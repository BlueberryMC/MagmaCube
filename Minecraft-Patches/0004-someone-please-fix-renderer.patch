From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Tue, 3 Nov 2020 19:56:04 +0900
Subject: [PATCH] someone please fix renderer


diff --git a/src/main/java/com/mojang/blaze3d/platform/GlStateManager.java b/src/main/java/com/mojang/blaze3d/platform/GlStateManager.java
index 830367db52addc73392778af54ddb31a1b10ba03..c8067b411f016f06ac38febdad9d89929c3631d6 100644
--- a/src/main/java/com/mojang/blaze3d/platform/GlStateManager.java
+++ b/src/main/java/com/mojang/blaze3d/platform/GlStateManager.java
@@ -196,13 +196,19 @@ public class GlStateManager
             GL11.glBlendFunc(GlStateManager.BLEND.srcRgb = debug0, GlStateManager.BLEND.dstRgb = debug1);
         }
     }
-    
-    public static void _blendFuncSeparate(final int debug0, final int debug1, final int debug2, final int debug3) {
-        RenderSystem.assertThread(RenderSystem::isOnRenderThread);
-        if (debug0 != GlStateManager.BLEND.srcRgb || debug1 != GlStateManager.BLEND.dstRgb || debug2 != GlStateManager.BLEND.srcAlpha || debug3 != GlStateManager.BLEND.dstAlpha) {
-            glBlendFuncSeparate(GlStateManager.BLEND.srcRgb = debug0, GlStateManager.BLEND.dstRgb = debug1, GlStateManager.BLEND.srcAlpha = debug2, GlStateManager.BLEND.dstAlpha = debug3);
+
+    // MagmaCube start - rename parameter
+    public static void _blendFuncSeparate(final int srcFactor, final int dstFactor, final int srcFactorAlpha, final int dstFactorAlpha) {
+        RenderSystem.assertThread(RenderSystem::isOnRenderThread);
+        if (srcFactor != GlStateManager.BLEND.srcRgb || dstFactor != GlStateManager.BLEND.dstRgb || srcFactorAlpha != GlStateManager.BLEND.srcAlpha || dstFactorAlpha != GlStateManager.BLEND.dstAlpha) {
+            GlStateManager.BLEND.srcRgb = srcFactor;
+            GlStateManager.BLEND.dstRgb = dstFactor;
+            GlStateManager.BLEND.srcAlpha = srcFactorAlpha;
+            GlStateManager.BLEND.dstAlpha = dstFactorAlpha;
+            glBlendFuncSeparate(srcFactor, dstFactor, srcFactorAlpha, dstFactorAlpha);
         }
     }
+    // MagmaCube end - rename parameter
     
     public static void _blendColor(final float debug0, final float debug1, final float debug2, final float debug3) {
         GL14.glBlendColor(debug0, debug1, debug2, debug3);
@@ -1137,10 +1143,10 @@ public class GlStateManager
     }
     
     @Deprecated
-    public static void _color4f(final float debug0, final float debug1, final float debug2, final float debug3) {
+    public static void _color4f(final float r, final float g, final float b, final float a) { // MagmaCube - rename parameter
         RenderSystem.assertThread(RenderSystem::isOnRenderThread);
-        if (debug0 != GlStateManager.COLOR.r || debug1 != GlStateManager.COLOR.g || debug2 != GlStateManager.COLOR.b || debug3 != GlStateManager.COLOR.a) {
-            GL11.glColor4f(GlStateManager.COLOR.r = debug0, GlStateManager.COLOR.g = debug1, GlStateManager.COLOR.b = debug2, GlStateManager.COLOR.a = debug3);
+        if (r != GlStateManager.COLOR.r || g != GlStateManager.COLOR.g || b != GlStateManager.COLOR.b || a != GlStateManager.COLOR.a) { // MagmaCube - rename parameter
+            GL11.glColor4f(GlStateManager.COLOR.r = r, GlStateManager.COLOR.g = g, GlStateManager.COLOR.b = b, GlStateManager.COLOR.a = a); // MagmaCube - rename parameter
         }
     }
     
@@ -1172,9 +1178,9 @@ public class GlStateManager
     }
     
     @Deprecated
-    public static void _colorPointer(final int debug0, final int debug1, final int debug2, final long debug3) {
+    public static void _colorPointer(final int size, final int type, final int stride, final long pointer) { // MagmaCube - rename parameter
         RenderSystem.assertThread(RenderSystem::isOnRenderThread);
-        GL11.glColorPointer(debug0, debug1, debug2, debug3);
+        GL11.glColorPointer(size, type, stride, pointer); // MagmaCube - rename parameter
     }
     
     public static void _vertexAttribPointer(final int debug0, final int debug1, final int debug2, final boolean debug3, final int debug4, final long debug5) {
diff --git a/src/main/java/com/mojang/blaze3d/platform/TextureUtil.java b/src/main/java/com/mojang/blaze3d/platform/TextureUtil.java
index 1c52c8eb3229816dbd004628a6ec3922a9bde711..1831bf0e7ff4a5df59747d66a99a17a1d306d577 100644
--- a/src/main/java/com/mojang/blaze3d/platform/TextureUtil.java
+++ b/src/main/java/com/mojang/blaze3d/platform/TextureUtil.java
@@ -79,8 +79,10 @@ public class TextureUtil
         }
         else {
             debug3 = MemoryUtil.memAlloc(8192);
-            for (ReadableByteChannel debug4 = Channels.newChannel(debug0); debug4.read(debug3) != -1; debug3 = MemoryUtil.memRealloc(debug3, debug3.capacity() * 2)) {
-                if (debug3.remaining() == 0) {}
+            ReadableByteChannel debug2 = Channels.newChannel(debug0); // MagmaCube - decompile fix
+            while (debug2.read(debug3) != -1) { // MagmaCube - decompile fix
+                if (debug3.remaining() == 0) // MagmaCube - decompile fix
+                    debug3 = MemoryUtil.memRealloc(debug3, debug3.capacity() * 2); // MagmaCube - decompile fix
             }
         }
         return debug3;
diff --git a/src/main/java/com/mojang/blaze3d/systems/RenderSystem.java b/src/main/java/com/mojang/blaze3d/systems/RenderSystem.java
index 1f267a992c24314310a5cc5c56ce3b93f29430b7..d51b0dca97795a145357bc7138a60733f72103a2 100644
--- a/src/main/java/com/mojang/blaze3d/systems/RenderSystem.java
+++ b/src/main/java/com/mojang/blaze3d/systems/RenderSystem.java
@@ -61,13 +61,15 @@ public class RenderSystem {
         return isInInit || RenderSystem.isOnRenderThread();
     }
 
-    public static void initGameThread(boolean debug0) {
-        boolean debug1 = renderThread == Thread.currentThread(); // MagmaCube - decompile fix
-        if (gameThread != null || renderThread == null || debug1 == debug0) {
+    // MagmaCube start - rename parameter and variable
+    public static void initGameThread(boolean expectRenderThread) {
+        boolean isRenderThread = renderThread == Thread.currentThread();
+        if (gameThread != null || renderThread == null || isRenderThread == expectRenderThread) {
             throw new IllegalStateException("Could not initialize tick thread");
         }
         gameThread = Thread.currentThread();
     }
+    // MagmaCube end - rename parameter and variable
 
     public static boolean isOnGameThread() {
         return true;
diff --git a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
index def1c901ec09ec24601f9a7abe007304c0247020..cdace9c04921a3cffc45f7beec1fd047b32224b5 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
@@ -42,17 +42,18 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
     }
     
     private void ensureCapacity(final int debug1) {
-        if (this.nextElementByte + debug1 <= this.buffer.capacity()) {
-            return;
+        // MagmaCube start - invert condition
+        if (this.nextElementByte + debug1 > this.buffer.capacity()) {
+            final int debug2 = this.buffer.capacity();
+            final int debug3 = debug2 + roundUp(debug1);
+            BufferBuilder.LOGGER.debug("Needed to grow BufferBuilder buffer: Old size {} bytes, new size {} bytes.", (Object) debug2, (Object) debug3);
+            final ByteBuffer debug4 = MemoryTracker.createByteBuffer(debug3);
+            this.buffer.position(0);
+            debug4.put(this.buffer);
+            debug4.rewind();
+            this.buffer = debug4;
         }
-        final int debug2 = this.buffer.capacity();
-        final int debug3 = debug2 + roundUp(debug1);
-        BufferBuilder.LOGGER.debug("Needed to grow BufferBuilder buffer: Old size {} bytes, new size {} bytes.", (Object)debug2, (Object)debug3);
-        final ByteBuffer debug4 = MemoryTracker.createByteBuffer(debug3);
-        this.buffer.position(0);
-        debug4.put(this.buffer);
-        debug4.rewind();
-        this.buffer = debug4;
+        // MagmaCube end - invert condition
     }
     
     private static int roundUp(final int debug0) {
@@ -130,24 +131,24 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
     }
     
     private static float getQuadDistanceFromPlayer(final FloatBuffer debug0, final float debug1, final float debug2, final float debug3, final int debug4, final int debug5) {
-        // MagmaCube start - decompile fix? todo: verify
-        final float debug6 = debug0.get(debug5 + debug4 * (0 + 0));
-        final float debug7 = debug0.get(debug5 + debug4 * (0 + 1));
-        final float debug8 = debug0.get(debug5 + debug4 * (0 + 2));
-        final float debug9 = debug0.get(debug5 + debug4 * (1 + 0));
-        final float debug10 = debug0.get(debug5 + debug4 * (1 + 1));
-        final float debug11 = debug0.get(debug5 + debug4 * (1 + 2));
-        final float debug12 = debug0.get(debug5 + debug4 * (2 + 0));
-        final float debug13 = debug0.get(debug5 + debug4 * (2 + 1));
-        final float debug14 = debug0.get(debug5 + debug4 * (2 + 2));
-        final float debug15 = debug0.get(debug5 + debug4 * (3 + 0));
-        final float debug16 = debug0.get(debug5 + debug4 * (3 + 1));
-        final float debug17 = debug0.get(debug5 + debug4 * (3 + 2));
+        // MagmaCube start - decompile fix
+        final float debug6 = debug0.get(debug5 + debug4 * 0 + 0);
+        final float debug7 = debug0.get(debug5 + debug4 * 0 + 1);
+        final float debug8 = debug0.get(debug5 + debug4 * 0 + 2);
+        final float debug9 = debug0.get(debug5 + debug4 * 1 + 0);
+        final float debug10 = debug0.get(debug5 + debug4 * 1 + 1);
+        final float debug11 = debug0.get(debug5 + debug4 * 1 + 2);
+        final float debug12 = debug0.get(debug5 + debug4 * 2 + 0);
+        final float debug13 = debug0.get(debug5 + debug4 * 2 + 1);
+        final float debug14 = debug0.get(debug5 + debug4 * 2 + 2);
+        final float debug15 = debug0.get(debug5 + debug4 * 3 + 0);
+        final float debug16 = debug0.get(debug5 + debug4 * 3 + 1);
+        final float debug17 = debug0.get(debug5 + debug4 * 3 + 2);
         final float debug18 = (debug6 + debug9 + debug12 + debug15) * 0.25f - debug1;
         final float debug19 = (debug7 + debug10 + debug13 + debug16) * 0.25f - debug2;
         final float debug20 = (debug8 + debug11 + debug14 + debug17) * 0.25f - debug3;
         return debug18 * debug18 + debug19 * debug19 + debug20 * debug20;
-        // MagmaCube end - decompile fix?
+        // MagmaCube end - decompile fix
     }
     
     public void restoreState(final State debug1) {
@@ -175,17 +176,19 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         this.elementIndex = 0;
         this.buffer.clear();
     }
-    
-    private void switchFormat(final VertexFormat debug1) {
-        if (this.format == debug1) {
+
+    // MagmaCube - rename parameter
+    private void switchFormat(final VertexFormat vertexFormat) {
+        if (this.format == vertexFormat) {
             return;
         }
-        this.format = debug1;
-        final boolean debug2 = debug1 == DefaultVertexFormat.NEW_ENTITY;
-        final boolean debug3 = debug1 == DefaultVertexFormat.BLOCK;
-        this.fastFormat = (debug2 || debug3);
-        this.fullFormat = debug2;
+        this.format = vertexFormat;
+        final boolean isNewEntity = vertexFormat == DefaultVertexFormat.NEW_ENTITY;
+        final boolean isBlock = vertexFormat == DefaultVertexFormat.BLOCK;
+        this.fastFormat = (isNewEntity || isBlock);
+        this.fullFormat = isNewEntity;
     }
+    // MagmaCube end - rename parameter
     
     public void end() {
         if (!this.building) {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/VertexConsumer.java b/src/main/java/com/mojang/blaze3d/vertex/VertexConsumer.java
index f8022db2e8c4537013c57e572ac16ad0a27e0e30..2cf40bc29bb9f2e4a615c72bc4f966a6210dd8cc 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/VertexConsumer.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/VertexConsumer.java
@@ -40,8 +40,8 @@ public interface VertexConsumer
         this.endVertex();
     }
     
-    default VertexConsumer color(final float debug1, final float debug2, final float debug3, final float debug4) {
-        return this.color((int)(debug1 * 255.0f), (int)(debug2 * 255.0f), (int)(debug3 * 255.0f), (int)(debug4 * 255.0f));
+    default VertexConsumer color(final float red, final float green, final float blue, final float alpha) { // MagmaCube - rename parameter
+        return this.color((int)(red * 255.0f), (int)(green * 255.0f), (int)(blue * 255.0f), (int)(alpha * 255.0f)); // MagmaCube - rename parameter
     }
     
     default VertexConsumer uv2(final int debug1) {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/VertexFormatElement.java b/src/main/java/com/mojang/blaze3d/vertex/VertexFormatElement.java
index abd4b44c6ee5aed05deeb96f19f3412ce64af2d1..f2c96748f9b5adc9ef16f5a12d84d33e165524ee 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/VertexFormatElement.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/VertexFormatElement.java
@@ -98,8 +98,8 @@ public class VertexFormatElement
             GlStateManager._enableClientState(32885);
             return;
         }, debug0 -> GlStateManager._disableClientState(32885)), 
-        COLOR("Vertex Color", (debug0, debug1, debug2, debug3, debug5) -> {
-            GlStateManager._colorPointer(debug0, debug1, debug2, debug3);
+        COLOR("Vertex Color", (size, type, stride, pointer, debug5) -> { // MagmaCube - rename parameter
+            GlStateManager._colorPointer(size, type, stride, pointer); // MagmaCube - rename parameter
             GlStateManager._enableClientState(32886);
             return;
         }, debug0 -> {
diff --git a/src/main/java/com/mojang/math/Vector4f.java b/src/main/java/com/mojang/math/Vector4f.java
index 19983c81650106269c8faf604d603540c0929b67..8c5134ca7034b20997ed58fdd269a2294e833878 100644
--- a/src/main/java/com/mojang/math/Vector4f.java
+++ b/src/main/java/com/mojang/math/Vector4f.java
@@ -89,17 +89,19 @@ public class Vector4f
         this.w *= debug2;
         return true;
     }
-    
-    public void transform(final Matrix4f debug1) {
-        final float debug2 = this.x;
-        final float debug3 = this.y;
-        final float debug4 = this.z;
-        final float debug5 = this.w;
-        this.x = debug1.m00 * debug2 + debug1.m01 * debug3 + debug1.m02 * debug4 + debug1.m03 * debug5;
-        this.y = debug1.m10 * debug2 + debug1.m11 * debug3 + debug1.m12 * debug4 + debug1.m13 * debug5;
-        this.z = debug1.m20 * debug2 + debug1.m21 * debug3 + debug1.m22 * debug4 + debug1.m23 * debug5;
-        this.w = debug1.m30 * debug2 + debug1.m31 * debug3 + debug1.m32 * debug4 + debug1.m33 * debug5;
-    }
+
+    // MagmaCube start - rename parameter, variable
+    public void transform(final Matrix4f matrix) {
+        final float x = this.x;
+        final float y = this.y;
+        final float z = this.z;
+        final float w = this.w;
+        this.x = matrix.m00 * x + matrix.m01 * y + matrix.m02 * z + matrix.m03 * w;
+        this.y = matrix.m10 * x + matrix.m11 * y + matrix.m12 * z + matrix.m13 * w;
+        this.z = matrix.m20 * x + matrix.m21 * y + matrix.m22 * z + matrix.m23 * w;
+        this.w = matrix.m30 * x + matrix.m31 * y + matrix.m32 * z + matrix.m33 * w;
+    }
+    // MagmaCube end - rename parameter, variable
     
     public void transform(final Quaternion debug1) {
         final Quaternion debug2 = new Quaternion(debug1);
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index caa7b49fcc3c55410ad1bfcadf76e4b7675f4202..83d5060bc399683d7aa2b4766df3f1d6982da397 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -532,6 +532,7 @@ WindowEventHandler {
                 this.selfTest();
             }
         }), false));
+        System.gc(); // MagmaCube - explicit gc to reduce memory usage
     }
 
     public void updateTitle() {
diff --git a/src/main/java/net/minecraft/client/gui/GuiComponent.java b/src/main/java/net/minecraft/client/gui/GuiComponent.java
index 74cf6f2c4b3698f9c361839e9d4f1c04c5f251a4..5e7299f628d3b2e1a3b87f3a9705af6da328239b 100644
--- a/src/main/java/net/minecraft/client/gui/GuiComponent.java
+++ b/src/main/java/net/minecraft/client/gui/GuiComponent.java
@@ -42,36 +42,38 @@ public abstract class GuiComponent
     public static void fill(final PoseStack debug0, final int debug1, final int debug2, final int debug3, final int debug4, final int debug5) {
         innerFill(debug0.last().pose(), debug1, debug2, debug3, debug4, debug5);
     }
-    
-    private static void innerFill(final Matrix4f debug0, int debug1, int debug2, int debug3, int debug4, final int debug5) {
-        if (debug1 < debug3) {
-            final int debug6 = debug1;
-            debug1 = debug3;
-            debug3 = debug6;
+
+    // MagmaCube start - rename parameter and variable
+    private static void innerFill(final Matrix4f matrix, int minX, int minY, int maxX, int maxY, final int color) {
+        if (minX < maxX) {
+            final int x = minX;
+            minX = maxX;
+            maxX = x;
         }
-        if (debug2 < debug4) {
-            final int debug6 = debug2;
-            debug2 = debug4;
-            debug4 = debug6;
+        if (minY < maxY) {
+            final int y = minY;
+            minY = maxY;
+            maxY = y;
         }
-        final float debug7 = (debug5 >> 24 & 0xFF) / 255.0f;
-        final float debug8 = (debug5 >> 16 & 0xFF) / 255.0f;
-        final float debug9 = (debug5 >> 8 & 0xFF) / 255.0f;
-        final float debug10 = (debug5 & 0xFF) / 255.0f;
-        final BufferBuilder debug11 = Tesselator.getInstance().getBuilder();
+        final float alpha = (color >> 24 & 0xFF) / 255.0f;
+        final float red = (color >> 16 & 0xFF) / 255.0f;
+        final float green = (color >> 8 & 0xFF) / 255.0f;
+        final float blue = (color & 0xFF) / 255.0f;
+        final BufferBuilder builder = Tesselator.getInstance().getBuilder();
         RenderSystem.enableBlend();
         RenderSystem.disableTexture();
         RenderSystem.defaultBlendFunc();
-        debug11.begin(7, DefaultVertexFormat.POSITION_COLOR);
-        debug11.vertex(debug0, debug1, debug4, 0.0f).color(debug8, debug9, debug10, debug7).endVertex();
-        debug11.vertex(debug0, debug3, debug4, 0.0f).color(debug8, debug9, debug10, debug7).endVertex();
-        debug11.vertex(debug0, debug3, debug2, 0.0f).color(debug8, debug9, debug10, debug7).endVertex();
-        debug11.vertex(debug0, debug1, debug2, 0.0f).color(debug8, debug9, debug10, debug7).endVertex();
-        debug11.end();
-        BufferUploader.end(debug11);
+        builder.begin(7, DefaultVertexFormat.POSITION_COLOR);
+        builder.vertex(matrix, minX, maxY, 0.0f).color(red, green, blue, alpha).endVertex();
+        builder.vertex(matrix, maxX, maxY, 0.0f).color(red, green, blue, alpha).endVertex();
+        builder.vertex(matrix, maxX, minY, 0.0f).color(red, green, blue, alpha).endVertex();
+        builder.vertex(matrix, minX, minY, 0.0f).color(red, green, blue, alpha).endVertex();
+        builder.end();
+        BufferUploader.end(builder);
         RenderSystem.enableTexture();
         RenderSystem.disableBlend();
     }
+    // MagmaCube end - rename parameter
     
     protected void fillGradient(final PoseStack debug1, final int debug2, final int debug3, final int debug4, final int debug5, final int debug6, final int debug7) {
         RenderSystem.disableTexture();
diff --git a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
index f88b99e8ddec4dc5a1abee8b7e91752beb24aca5..54f017f4286a987170f4126609b2f4c9f7ecf6f6 100644
--- a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
@@ -296,7 +296,6 @@ extends GuiComponent {
         debug13.add("Game Renderer: " + this.minecraft.gameRenderer.getClass().getSimpleName());
         debug13.add("Level Renderer: " + this.minecraft.levelRenderer.getClass().getSimpleName());
         debug13.add("Block Renderer: " + this.minecraft.getBlockRenderer().getClass().getSimpleName());
-        debug13.add("Chunk Render Dispatcher: " + this.minecraft.levelRenderer.chunkRenderDispatcher.getClass().getSimpleName());
         debug13.add("Current Screen: " + (this.minecraft.screen == null ? ChatFormatting.YELLOW + "null" : this.minecraft.screen.getClass().getSimpleName()));
         debug13.add("Current GUI: " + this.minecraft.gui.getClass().getSimpleName());
         debug13.add("Current Overlay: " + (this.minecraft.overlay == null ? ChatFormatting.YELLOW + "null" : this.minecraft.overlay.getClass().getSimpleName()));
diff --git a/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java b/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java
index 1832e076a5555b4a7d2f5242ea5c0d9bf6cc5a67..a414d081aac6d99567082321442079e98770fb54 100644
--- a/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java
@@ -36,12 +36,14 @@ extends Overlay {
     private long fadeOutStart = -1L;
     private long fadeInStart = -1L;
 
-    public LoadingOverlay(Minecraft debug1, ReloadInstance debug2, Consumer<Optional<Throwable>> debug3, boolean debug4) {
-        this.minecraft = debug1;
-        this.reload = debug2;
-        this.onFinish = debug3;
-        this.fadeIn = debug4;
+    // MagmaCube start - rename parameter
+    public LoadingOverlay(Minecraft minecraft, ReloadInstance reload, Consumer<Optional<Throwable>> onFinish, boolean fadeIn) {
+        this.minecraft = minecraft;
+        this.reload = reload;
+        this.onFinish = onFinish;
+        this.fadeIn = fadeIn;
     }
+    // MagmaCube end - rename parameter
 
     public static void registerTextures(Minecraft debug0) {
         debug0.getTextureManager().register(MOJANG_STUDIOS_LOGO_LOCATION, new LogoTexture());
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index 387811ef932cf6ca29e8140d64c35527ef40fdb6..e6c2eb79de86920d722df2e5f83ab0eeb2dc54f2 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -2029,10 +2029,9 @@ implements ClientGamePacketListener {
 
     private void readSectionList(int debug1, int debug2, LevelLightEngine debug3, LightLayer debug4, int debug5, int debug6, Iterator<byte[]> debug7, boolean debug8) {
         for (int debug9 = 0; debug9 < 18; ++debug9) {
-            boolean debug12;
             int debug10 = -1 + debug9;
             boolean debug11 = (debug5 & 1 << debug9) != 0;
-            boolean bl = debug12 = (debug6 & 1 << debug9) != 0;
+            boolean debug12 = (debug6 & 1 << debug9) != 0; // MagmaCube - decompile fix - remove unused var
             if (!debug11 && !debug12) continue;
             debug3.queueSectionData(debug4, SectionPos.of(debug1, debug10, debug2), debug11 ? new DataLayer((byte[])debug7.next().clone()) : new DataLayer(), debug8);
             this.level.setSectionDirtyWithNeighbors(debug1, debug10, debug2);
diff --git a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
index 4f17dded99e7f0a83957e1fc6a98e31f34159a43..497d1190c558759498a653c6d7e479529cb575b2 100644
--- a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
@@ -213,7 +213,7 @@ AutoCloseable {
     private int prevCloudZ = Integer.MIN_VALUE;
     private Vec3 prevCloudColor = Vec3.ZERO;
     private CloudStatus prevCloudsType;
-    public ChunkRenderDispatcher chunkRenderDispatcher; // MagmaCube - todo: visible for testing
+    private ChunkRenderDispatcher chunkRenderDispatcher;
     private final VertexFormat format = DefaultVertexFormat.BLOCK;
     private int lastViewDistance = -1;
     private int renderedEntities;
@@ -857,8 +857,6 @@ AutoCloseable {
      * WARNING - Removed try catching itself - possible behaviour change.
      */
     public void renderLevel(PoseStack debug1, float debug22, long debug3, boolean debug5, Camera debug6, GameRenderer debug7, LightTexture debug8, Matrix4f debug9) {
-        int debug47;
-        boolean debug222;
         Frustum debug20;
         boolean debug19;
         BlockEntityRenderDispatcher.instance.prepare(this.level, this.minecraft.getTextureManager(), this.minecraft.font, debug6, this.minecraft.hitResult);
@@ -889,7 +887,7 @@ AutoCloseable {
         FogRenderer.setupColor(debug6, debug22, this.minecraft.level, this.minecraft.options.renderDistance, debug7.getDarkenWorldAmount(debug22));
         RenderSystem.clear(16640, Minecraft.ON_OSX);
         float debug21 = debug7.getRenderDistance();
-        boolean bl2 = debug222 = this.minecraft.level.effects().isFoggyAt(Mth.floor(debug12), Mth.floor(debug14)) || this.minecraft.gui.getBossOverlay().shouldCreateWorldFog();
+        boolean debug222 = this.minecraft.level.effects().isFoggyAt(Mth.floor(debug12), Mth.floor(debug14)) || this.minecraft.gui.getBossOverlay().shouldCreateWorldFog(); // MagmaCube - decompile fix - remove unused var
         if (this.minecraft.options.renderDistance >= 4) {
             FogRenderer.setupFog(debug6, FogRenderer.FogMode.FOG_SKY, debug21, debug222);
             debug10.popPush("sky");
@@ -952,7 +950,7 @@ AutoCloseable {
                 int debug44 = 255;
                 int debug45 = debug43 >> 16 & 0xFF;
                 int debug46 = debug43 >> 8 & 0xFF;
-                debug47 = debug43 & 0xFF;
+                int debug47 = debug43 & 0xFF;
                 ((OutlineBufferSource)debug42).setColor(debug45, debug46, debug47, 255);
             } else {
                 debug412 = debug38;
@@ -974,7 +972,9 @@ AutoCloseable {
                 debug1.pushPose();
                 debug1.translate((double) debug44.getX() - debug12, (double) debug44.getY() - debug14, (double) debug44.getZ() - debug16); // MagmaCube - decompile fix
                 SortedSet debug46 = (SortedSet) this.destructionProgress.get(debug44.asLong()); // MagmaCube - decompile fix
-                if (debug46 != null && !debug46.isEmpty() && (debug47 = ((BlockDestructionProgress) debug46.last()).getProgress()) >= 0) { // MagmaCube - decompile fix
+                if (debug46 != null && !debug46.isEmpty()) { // MagmaCube - decompile fix
+                    int debug47 = ((BlockDestructionProgress) debug46.last()).getProgress(); // MagmaCube - decompile fix
+                    if (debug47 >= 0) { // MagmaCube - decompile fix
                     PoseStack.Pose debug48 = debug1.last(); // MagmaCube - decompile fix
                     SheetedDecalTextureGenerator debug49 = new SheetedDecalTextureGenerator(this.renderBuffers.crumblingBufferSource().getBuffer(ModelBakery.DESTROY_TYPES.get(debug47)), ((PoseStack.Pose) debug48).pose(), ((PoseStack.Pose) debug48).normal()); // MagmaCube - decompile fix
                     debug45 = debug2 -> {
@@ -984,13 +984,12 @@ AutoCloseable {
                         }
                         return debug3l; // MagmaCube - decompile fix
                     };
-                }
+                }} // MagmaCube - decompile fix
                 BlockEntityRenderDispatcher.instance.render(debug43, debug22, debug1, debug45);
                 debug1.popPose();
             }
         }
-        Set<BlockEntity> set = this.globalBlockEntities;
-        synchronized (set) {
+        synchronized (this.globalBlockEntities) { // MagmaCube - decompile fix
             for (BlockEntity debug412 : this.globalBlockEntities) { // MagmaCube - decompile fix
                 BlockPos debug42 = ((BlockEntity)debug412).getBlockPos(); // MagmaCube - decompile fix
                 debug1.pushPose();
diff --git a/src/main/java/net/minecraft/client/renderer/block/ModelBlockRenderer.java b/src/main/java/net/minecraft/client/renderer/block/ModelBlockRenderer.java
index 60b5418b4e63210a1ec7e798e5d549f3a36ed923..81c7bfc5e60fbc7ed3dab6a0d1e14a3c54c705b3 100644
--- a/src/main/java/net/minecraft/client/renderer/block/ModelBlockRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/block/ModelBlockRenderer.java
@@ -42,11 +42,11 @@ public class ModelBlockRenderer {
     }
 
     public boolean tesselateBlock(BlockAndTintGetter debug1, BakedModel debug2, BlockState debug3, BlockPos debug4, PoseStack debug5, VertexConsumer debug6, boolean debug7, Random debug8, long debug9, int debug11) {
-        boolean debug12 = Minecraft.useAmbientOcclusion() && debug3.getLightEmission() == 0 && debug2.useAmbientOcclusion();
+        boolean useAO = Minecraft.useAmbientOcclusion() && debug3.getLightEmission() == 0 && debug2.useAmbientOcclusion(); // MagmaCube - rename debug12 -> useAO
         Vec3 debug13 = debug3.getOffset(debug1, debug4);
         debug5.translate(debug13.x, debug13.y, debug13.z);
         try {
-            if (debug12) {
+            if (useAO) { // MagmaCube - rename debug12 -> useAO
                 return this.tesselateWithAO(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8, debug9, debug11);
             }
             return this.tesselateWithoutAO(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8, debug9, debug11);
@@ -55,7 +55,7 @@ public class ModelBlockRenderer {
             CrashReport debug15 = CrashReport.forThrowable(debug14, "Tesselating block model");
             CrashReportCategory debug16 = debug15.addCategory("Block model being tesselated");
             CrashReportCategory.populateBlockDetails(debug16, debug4, debug3);
-            debug16.setDetail("Using AO", debug12);
+            debug16.setDetail("Using AO", useAO); // MagmaCube - rename debug12 -> useAO
             throw new ReportedException(debug15);
         }
     }
@@ -116,9 +116,9 @@ public class ModelBlockRenderer {
         float debug16;
         if (debug6.isTinted()) {
             int debug19 = this.blockColors.getColor(debug2, debug1, debug3, debug6.getTintIndex());
-            debug16 = (debug19 >> 16 & 0xFF) / 255.0f; // MagmaCube - decompile fix
-            debug17 = (debug19 >> 8 & 0xFF) / 255.0f; // MagmaCube - decompile fix
-            debug18 = (debug19 & 0xFF) / 255.0f; // MagmaCube - decompile fix
+            debug16 = (float)(debug19 >> 16 & 0xFF) / 255.0f;
+            debug17 = (float)(debug19 >> 8 & 0xFF) / 255.0f;
+            debug18 = (float)(debug19 & 0xFF) / 255.0f;
         } else {
             debug16 = 1.0f;
             debug17 = 1.0f;
diff --git a/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java b/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java
index 74b2a25144b99de9bf5aaea352782a5f3136c3f5..d183a4ca942ba82757594a73c0a333f54e342fcc 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java
@@ -74,7 +74,9 @@ AutoCloseable {
     }
 
     public void register(ResourceLocation debug1, AbstractTexture debug2) {
-        AbstractTexture debug3 = this.byPath.put(debug1, debug2 = this.loadTexture(debug1, debug2));
+        debug2 = this.loadTexture(debug1, debug2); // MagmaCube - decompile fix
+        //LOGGER.debug("Texture of " + debug1 + ": " + debug2); // MagmaCube - todo: debug
+        AbstractTexture debug3 = this.byPath.put(debug1, debug2); // MagmaCube - decompile fix
         if (debug3 != debug2) {
             if (debug3 != null && debug3 != MissingTextureAtlasSprite.getTexture()) {
                 this.tickableTextures.remove(debug3);
@@ -100,6 +102,7 @@ AutoCloseable {
 
     private AbstractTexture loadTexture(ResourceLocation debug1, AbstractTexture debug2) {
         try {
+            //LOGGER.debug("Loading texture " + debug1); // MagmaCube - todo: debug
             debug2.load(this.resourceManager);
             return debug2;
         }
@@ -128,8 +131,7 @@ AutoCloseable {
         if (debug3 == null) {
             debug3 = 1;
         } else {
-            Integer n = debug3;
-            Integer n2 = debug3 = Integer.valueOf(debug3 + 1);
+            debug3 = debug3 + 1; // MagmaCube - decompile fix
         }
         this.prefixRegister.put(debug1, debug3);
         ResourceLocation debug4 = new ResourceLocation(String.format("dynamic/%s_%d", debug1, debug3));
diff --git a/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java b/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java
index cccf2921a763c1be7b053695c9c10e1240752c57..ed908c7d1965ae5e60a49de222e62d79f6d16d12 100644
--- a/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java
+++ b/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java
@@ -110,6 +110,7 @@ implements PackResources {
             }
         } else {
             if ("textures/entity/enderdragon/dragon.png".equals(debug3) || "textures/entity/enderdragon/dragon_exploding.png".equals(debug3)) {
+                ByteArrayInputStream byteArrayInputStream; // MagmaCube - decompile fix
                 try (NativeImage debug4 = NativeImage.read(this.pack.getResource(debug1, debug2));){
                     int debug6 = debug4.getWidth() / 256;
                     for (int debug7 = 88 * debug6; debug7 < 200 * debug6; ++debug7) {
@@ -117,9 +118,9 @@ implements PackResources {
                             debug4.setPixelRGBA(debug8, debug7, 0);
                         }
                     }
-                    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(debug4.asByteArray());
-                    return byteArrayInputStream;
+                    byteArrayInputStream = new ByteArrayInputStream(debug4.asByteArray()); // MagmaCube - decompile fix
                 }
+                return byteArrayInputStream; // MagmaCube - decompile fix
             }
             if ("textures/entity/conduit/closed_eye.png".equals(debug3) || "textures/entity/conduit/open_eye.png".equals(debug3)) {
                 return PackResourcesAdapterV4.fixConduitEyeTexture(this.pack.getResource(debug1, debug2));
@@ -148,30 +149,29 @@ implements PackResources {
      */
     @Nullable
     public static InputStream fixPattern(InputStream debug0, InputStream debug1, int debug2, int debug3, int debug4, int debug5, int debug6) throws IOException {
-        try (NativeImage debug7 = NativeImage.read(debug0);){
-            Throwable throwable = null;
-            try (NativeImage debug9 = NativeImage.read(debug1);) { // MagmaCube - decompile fix
-                int debug11 = debug7.getWidth();
-                int debug12 = debug7.getHeight();
-                if (debug11 == debug9.getWidth()) {
-                    if (debug12 == debug9.getHeight()) {
-                        try (NativeImage debug13 = new NativeImage(debug11, debug12, true);) { // MagmaCube - decompile fix
-                            int debug15 = debug11 / debug2;
-                            for (int debug16 = debug4 * debug15; debug16 < debug6 * debug15; ++debug16) {
-                                for (int debug17 = debug3 * debug15; debug17 < debug5 * debug15; ++debug17) {
-                                    int debug18 = NativeImage.getR(debug9.getPixelRGBA(debug17, debug16));
-                                    int debug19 = debug7.getPixelRGBA(debug17, debug16);
-                                    debug13.setPixelRGBA(debug17, debug16, NativeImage.combine(debug18, NativeImage.getB(debug19), NativeImage.getG(debug19), NativeImage.getR(debug19)));
-                                }
+        // MagmaCube start - decompile fix
+        ByteArrayInputStream byteArrayInputStream;
+        try (NativeImage debug7 = NativeImage.read(debug0)){
+            try (NativeImage debug9 = NativeImage.read(debug1)) {
+                int width = debug7.getWidth();
+                int height = debug7.getHeight();
+                if (width == debug9.getWidth() && height == debug9.getHeight()) {
+                    try (NativeImage debug13 = new NativeImage(width, height, true);) { // MagmaCube - decompile fix
+                        int debug15 = width / debug2;
+                        for (int debug16 = debug4 * debug15; debug16 < debug6 * debug15; ++debug16) {
+                            for (int debug17 = debug3 * debug15; debug17 < debug5 * debug15; ++debug17) {
+                                int debug18 = NativeImage.getR(debug9.getPixelRGBA(debug17, debug16));
+                                int debug19 = debug7.getPixelRGBA(debug17, debug16);
+                                debug13.setPixelRGBA(debug17, debug16, NativeImage.combine(debug18, NativeImage.getB(debug19), NativeImage.getG(debug19), NativeImage.getR(debug19)));
                             }
-                            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(debug13.asByteArray());
-                            return byteArrayInputStream;
                         }
+                        byteArrayInputStream = new ByteArrayInputStream(debug13.asByteArray());
                     }
-                }
+                } else return null;
             }
         }
-        return null; // MagmaCube - decompile fix
+        return byteArrayInputStream;
+        // MagmaCube end - decompile fix
     }
 
     /*
@@ -179,11 +179,16 @@ implements PackResources {
      */
     public static InputStream fixConduitEyeTexture(InputStream debug0) throws IOException {
         // MagmaCube start - decompile fix
-        try (NativeImage debug1 = NativeImage.read(debug0)) {
-            int debug3 = debug1.getWidth();
-            int debug4 = debug1.getHeight();
+        ByteArrayInputStream bais;
+        try (NativeImage nativeimage = NativeImage.read(debug0)) {
+            int width = nativeimage.getWidth();
+            int height = nativeimage.getHeight();
+            try (NativeImage nativeimage1 = new NativeImage(2 * width, 2 * height, true)) {
+                copyRect(nativeimage, nativeimage1, 0, 0, 0, 0, width, height, 1, false, false);
+                bais = new ByteArrayInputStream(nativeimage1.asByteArray());
+            }
         }
-        return debug0; // todo: fix code
+        return bais;
         // MagmaCube end - decompile fix
     }
 
@@ -192,11 +197,31 @@ implements PackResources {
      */
     public static InputStream fixLeftChest(InputStream debug0) throws IOException {
         // MagmaCube start - decompile fix
-        try (NativeImage debug1 = NativeImage.read(debug0)) {
-            int debug3 = debug1.getWidth();
-            int debug4 = debug1.getHeight();
+        ByteArrayInputStream bytearrayinputstream;
+        try (NativeImage nativeimage = NativeImage.read(debug0)) {
+            int width = nativeimage.getWidth();
+            int height = nativeimage.getHeight();
+            try (NativeImage nativeimage1 = new NativeImage(width / 2, height, true)) {
+                int k = height / 64;
+                copyRect(nativeimage, nativeimage1, 29, 0, 29, 0, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 59, 0, 14, 0, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 29, 14, 43, 14, 15, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 44, 14, 29, 14, 14, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 58, 14, 14, 14, 15, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 29, 19, 29, 19, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 59, 19, 14, 19, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 29, 33, 43, 33, 15, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 44, 33, 29, 33, 14, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 58, 33, 14, 33, 15, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 2, 0, 2, 0, 1, 1, k, false, true);
+                copyRect(nativeimage, nativeimage1, 4, 0, 1, 0, 1, 1, k, false, true);
+                copyRect(nativeimage, nativeimage1, 2, 1, 3, 1, 1, 4, k, true, true);
+                copyRect(nativeimage, nativeimage1, 3, 1, 2, 1, 1, 4, k, true, true);
+                copyRect(nativeimage, nativeimage1, 4, 1, 1, 1, 1, 4, k, true, true);
+                bytearrayinputstream = new ByteArrayInputStream(nativeimage1.asByteArray());
+            }
         }
-        return debug0; // todo: fix code
+        return bytearrayinputstream;
         // MagmaCube end - decompile fix
     }
 
@@ -205,11 +230,31 @@ implements PackResources {
      */
     public static InputStream fixRightChest(InputStream debug0) throws IOException {
         // MagmaCube start - decompile fix
-        try (NativeImage debug1 = NativeImage.read(debug0)) {
-            int debug3 = debug1.getWidth();
-            int debug4 = debug1.getHeight();
+        ByteArrayInputStream bytearrayinputstream;
+        try (NativeImage nativeimage = NativeImage.read(debug0)) {
+            int width = nativeimage.getWidth();
+            int height = nativeimage.getHeight();
+            try (NativeImage nativeimage1 = new NativeImage(width / 2, height, true)) {
+                int k = height / 64;
+                copyRect(nativeimage, nativeimage1, 14, 0, 29, 0, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 44, 0, 14, 0, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 0, 14, 0, 14, 14, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 14, 14, 43, 14, 15, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 73, 14, 14, 14, 15, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 14, 19, 29, 19, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 44, 19, 14, 19, 15, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 0, 33, 0, 33, 14, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 14, 33, 43, 33, 15, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 73, 33, 14, 33, 15, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 1, 0, 2, 0, 1, 1, k, false, true);
+                copyRect(nativeimage, nativeimage1, 3, 0, 1, 0, 1, 1, k, false, true);
+                copyRect(nativeimage, nativeimage1, 0, 1, 0, 1, 1, 4, k, true, true);
+                copyRect(nativeimage, nativeimage1, 1, 1, 3, 1, 1, 4, k, true, true);
+                copyRect(nativeimage, nativeimage1, 5, 1, 1, 1, 1, 4, k, true, true);
+                bytearrayinputstream = new ByteArrayInputStream(nativeimage1.asByteArray());
+            }
         }
-        return debug0; // todo: fix code
+        return bytearrayinputstream;
         // MagmaCube end - decompile fix
     }
 
@@ -218,11 +263,34 @@ implements PackResources {
      */
     public static InputStream fixSingleChest(InputStream debug0) throws IOException {
         // MagmaCube start - decompile fix
-        try (NativeImage debug1 = NativeImage.read(debug0)) {
-            int debug3 = debug1.getWidth();
-            int debug4 = debug1.getHeight();
+        ByteArrayInputStream bytearrayinputstream;
+        try (NativeImage nativeimage = NativeImage.read(debug0)) {
+            int width = nativeimage.getWidth();
+            int height = nativeimage.getHeight();
+            try (NativeImage nativeimage1 = new NativeImage(width, height, true)) {
+                int k = height / 64;
+                copyRect(nativeimage, nativeimage1, 14, 0, 28, 0, 14, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 28, 0, 14, 0, 14, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 0, 14, 0, 14, 14, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 14, 14, 42, 14, 14, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 28, 14, 28, 14, 14, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 42, 14, 14, 14, 14, 5, k, true, true);
+                copyRect(nativeimage, nativeimage1, 14, 19, 28, 19, 14, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 28, 19, 14, 19, 14, 14, k, false, true);
+                copyRect(nativeimage, nativeimage1, 0, 33, 0, 33, 14, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 14, 33, 42, 33, 14, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 28, 33, 28, 33, 14, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 42, 33, 14, 33, 14, 10, k, true, true);
+                copyRect(nativeimage, nativeimage1, 1, 0, 3, 0, 2, 1, k, false, true);
+                copyRect(nativeimage, nativeimage1, 3, 0, 1, 0, 2, 1, k, false, true);
+                copyRect(nativeimage, nativeimage1, 0, 1, 0, 1, 1, 4, k, true, true);
+                copyRect(nativeimage, nativeimage1, 1, 1, 4, 1, 2, 4, k, true, true);
+                copyRect(nativeimage, nativeimage1, 3, 1, 3, 1, 1, 4, k, true, true);
+                copyRect(nativeimage, nativeimage1, 4, 1, 1, 1, 2, 4, k, true, true);
+                bytearrayinputstream = new ByteArrayInputStream(nativeimage1.asByteArray());
+            }
         }
-        return debug0; // todo: fix code
+        return bytearrayinputstream;
         // MagmaCube end - decompile fix
     }
 
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index 0aef54996087d6055d5ce1d2858b681b9aab842d..73dbd1b7b701b42e7ef3bcea67e2587269b6e56e 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -132,13 +132,13 @@ public class PlayerAdvancements {
     }
 
     private void ensureAllVisible() {
-        ArrayList<Map.Entry<Advancement, AdvancementProgress>> debug1 = Lists.newArrayList();
+        ArrayList<Advancement> debug1 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (Map.Entry<Advancement, AdvancementProgress> debug3 : this.advancements.entrySet()) {
             if (!debug3.getValue().isDone()) continue;
-            debug1.add(debug3); // MagmaCube - decompile fix - original code: debug1.add(debug3.getKey());
+            debug1.add(debug3.getKey());
             this.progressChanged.add((Advancement)debug3.getKey());
         }
-        for (Map.Entry<Advancement, AdvancementProgress> debug3 : debug1) {
+        for (Advancement debug3 : debug1) { // MagmaCube - decompile fix
             this.ensureVisibility((Advancement)((Object)debug3));
         }
     }
diff --git a/src/main/java/net/minecraft/server/packs/VanillaPackResources.java b/src/main/java/net/minecraft/server/packs/VanillaPackResources.java
index 83b396c86e80ae8e090dcfa54c3c7ae77b9175bf..fbf6a2fbaaf581b13c8d1b7246b0d535d06082e4 100644
--- a/src/main/java/net/minecraft/server/packs/VanillaPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/VanillaPackResources.java
@@ -148,12 +148,11 @@ public class VanillaPackResources implements PackResources
             final URL debug5 = VanillaPackResources.class.getResource(debug3);
             if (isResourceUrlValid(debug3, debug5)) {
                 return debug5.openStream();
-            }
+            } else return null; // MagmaCube - decompile fix
         }
         catch (IOException debug6) {
             return VanillaPackResources.class.getResourceAsStream(debug3);
         }
-        return null;
     }
     
     private static String createPath(final PackType debug0, final ResourceLocation debug1) {
@@ -215,12 +214,9 @@ public class VanillaPackResources implements PackResources
     static {
         LOGGER = LogManager.getLogger();
         // MagmaCube start - decompile fix
-        JAR_FILESYSTEM_BY_TYPE = Util.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
+        JAR_FILESYSTEM_BY_TYPE = Util.make(Maps.newHashMap(), debug0 -> {
             synchronized (VanillaPackResources.class) {
-                PackType[] array = PackType.values();
-                int i = 0;
-                for (int length = array.length; i < length; ++i) {
-                    PackType debug = array[i];
+                for (PackType debug : PackType.values()) {
                     URL debug2 = VanillaPackResources.class.getResource("/" + debug.getDirectory() + "/.mcassetsroot");
                     // MagmaCube end - decompile fix
                     try {
diff --git a/src/main/java/net/minecraft/util/StringDecomposer.java b/src/main/java/net/minecraft/util/StringDecomposer.java
index 6dfef3468e49e2ee538e52b8bebc55dfcfe0f19f..c101ff9822710d21515971b2ed86d3d1317eca82 100644
--- a/src/main/java/net/minecraft/util/StringDecomposer.java
+++ b/src/main/java/net/minecraft/util/StringDecomposer.java
@@ -86,6 +86,7 @@ public class StringDecomposer
     }
     
     public static boolean iterateFormatted(final String debug0, final int debug1, final Style debug2, final Style debug3, final FormattedCharSink debug4) {
+        // todo: fix broken legacy color formatting
         final int debug5 = debug0.length();
         Style debug6 = debug2;
         for (int debug7 = debug1; debug7 < debug5; ++debug7) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java b/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
index c48a0ca499e053091bdb5ba157dd62061caa95b0..4a12f90b2917cf646b3f6a0351ca321fa57967ed 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
@@ -126,8 +126,8 @@ implements SurfaceNoise {
             if (debug19 != null) {
                 debug12 += this.amplitudes.getDouble(debug18) * debug19.noise(PerlinNoise.wrap(debug1 * debug14), debug11 ? -debug19.yo : PerlinNoise.wrap(debug3 * debug14), PerlinNoise.wrap(debug5 * debug14), debug7 * debug14, debug9 * debug14) * debug16;
             }
-            debug14 *= 2.0;
-            debug16 /= 2.0;
+            debug14 /= 2.0; // MagmaCube - decompile fix todo: verify
+            debug16 *= 2.0; // MagmaCube - decompile fix todo: verify
         }
         return debug12;
     }
