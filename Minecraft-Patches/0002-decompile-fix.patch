From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Sat, 26 Sep 2020 00:02:07 +0900
Subject: [PATCH] decompile fix


diff --git a/src/main/java/com/mojang/blaze3d/audio/Library.java b/src/main/java/com/mojang/blaze3d/audio/Library.java
index 2437f2e6c982b2103f5fa875c3c1060e8fc931ff..b4ae2316c2e1ed8252ec4421a5ce2354c1a4b83b 100644
--- a/src/main/java/com/mojang/blaze3d/audio/Library.java
+++ b/src/main/java/com/mojang/blaze3d/audio/Library.java
@@ -166,7 +166,7 @@ public class Library
         private final Set<Channel> activeChannels;
         
         public CountingChannelPool(final int debug1) {
-            this.activeChannels = (Set<Channel>)Sets.newIdentityHashSet();
+            this.activeChannels = Sets.newIdentityHashSet(); // MagmaCube - decompile fix
             this.limit = debug1;
         }
         
diff --git a/src/main/java/com/mojang/blaze3d/font/RawGlyph.java b/src/main/java/com/mojang/blaze3d/font/RawGlyph.java
index a5919009eb786c8ef0a47de574cfadd9fd6efb5a..b3aef752ccb0bc3b4cb1ea92bb2419e7f7168a03 100644
--- a/src/main/java/com/mojang/blaze3d/font/RawGlyph.java
+++ b/src/main/java/com/mojang/blaze3d/font/RawGlyph.java
@@ -13,7 +13,7 @@ public interface RawGlyph extends GlyphInfo
     float getOversample();
     
     default float getLeft() {
-        return super.getBearingX();
+        return GlyphInfo.super.getBearingX(); // MagmaCube - decompile fix
     }
     
     default float getRight() {
diff --git a/src/main/java/com/mojang/blaze3d/pipeline/RenderPipeline.java b/src/main/java/com/mojang/blaze3d/pipeline/RenderPipeline.java
index c7231273fc59e886c0b80706ff77f82f2a440641..77322d2bd0d4872b3dd4b5c1d03da483ebcfbcda 100644
--- a/src/main/java/com/mojang/blaze3d/pipeline/RenderPipeline.java
+++ b/src/main/java/com/mojang/blaze3d/pipeline/RenderPipeline.java
@@ -12,7 +12,7 @@ public class RenderPipeline
     private volatile int renderingBuffer;
     
     public RenderPipeline() {
-        this.renderCalls = (List<ConcurrentLinkedQueue<RenderCall>>)ImmutableList.of((Object)new ConcurrentLinkedQueue(), (Object)new ConcurrentLinkedQueue(), (Object)new ConcurrentLinkedQueue(), (Object)new ConcurrentLinkedQueue());
+        this.renderCalls = ImmutableList.of(new ConcurrentLinkedQueue<>(), new ConcurrentLinkedQueue<>(), new ConcurrentLinkedQueue<>(), new ConcurrentLinkedQueue<>()); // MagmaCube - decompile fix
         final int n = this.renderingBuffer + 1;
         this.processedBuffer = n;
         this.recordingBuffer = n;
diff --git a/src/main/java/com/mojang/blaze3d/platform/GLX.java b/src/main/java/com/mojang/blaze3d/platform/GLX.java
index 42ce6091e77bc83833d73e67f626e50475ce0a6a..5dfb97a94317b1480f18bc0046a8149da3d473ce 100644
--- a/src/main/java/com/mojang/blaze3d/platform/GLX.java
+++ b/src/main/java/com/mojang/blaze3d/platform/GLX.java
@@ -61,11 +61,10 @@ public class GLX
         RenderSystem.assertThread(RenderSystem::isInInitPhase);
         final IllegalStateException ex;
         Window.checkGlfwError((debug0, debug1) -> {
-            new IllegalStateException(String.format("GLFW error before init: [0x%X]%s", debug0, debug1));
-            throw ex;
+            throw new IllegalStateException(String.format("GLFW error before init: [0x%X]%s", debug0, debug1)); // MagmaCube - decompile fix
         });
-        final List<String> debug2 = (List<String>)Lists.newArrayList();
-        final GLFWErrorCallback debug3 = GLFW.glfwSetErrorCallback((debug1, debug2) -> debug2.add(String.format("GLFW error during init: [0x%X]%s", debug1, debug2)));
+        final List<String> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
+        final GLFWErrorCallback debug3 = GLFW.glfwSetErrorCallback((debug1, debug2l) -> debug2.add(String.format("GLFW error during init: [0x%X]%s", debug1, debug2l))); // MagmaCube - decompile fix
         if (GLFW.glfwInit()) {
             final LongSupplier debug4 = () -> (long)(GLFW.glfwGetTime() * 1.0E9);
             for (final String debug5 : debug2) {
@@ -173,7 +172,7 @@ public class GLX
     static {
         LOGGER = LogManager.getLogger();
         GLX.capsString = "";
-        LOOKUP_MAP = make((Map<Integer, String>)Maps.newHashMap(), debug0 -> {
+        LOOKUP_MAP = make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put(0, "No error");
             debug0.put(1280, "Enum parameter is invalid for this function");
             debug0.put(1281, "Parameter is invalid for this function");
diff --git a/src/main/java/com/mojang/blaze3d/platform/GlDebug.java b/src/main/java/com/mojang/blaze3d/platform/GlDebug.java
index b0cf86157b906f3d7bb71ef6bfb53fc849473145..d47d041fe7a1638443d5fb80912ac7e9859f213f 100644
--- a/src/main/java/com/mojang/blaze3d/platform/GlDebug.java
+++ b/src/main/java/com/mojang/blaze3d/platform/GlDebug.java
@@ -119,7 +119,7 @@ public class GlDebug
     }
     
     private static void setup(final int debug0, final String debug1) {
-        GlDebug.BY_ID.merge(debug0, debug1, (debug0, debug1) -> debug0 + "/" + debug1);
+        GlDebug.BY_ID.merge(debug0, debug1, (debug02, debug12) -> debug02 + "/" + debug12); // MagmaCube - decompile fix
     }
     
     public static void enableDebugCallback(final int debug0, final boolean debug1) {
@@ -156,7 +156,7 @@ public class GlDebug
         BYTE_BUFFER = MemoryTracker.createByteBuffer(64);
         FLOAT_BUFFER = GlDebug.BYTE_BUFFER.asFloatBuffer();
         INT_BUFFER = GlDebug.BYTE_BUFFER.asIntBuffer();
-        NEWLINE_JOINER = Joiner.on('Â¥n');
+        NEWLINE_JOINER = Joiner.on('\n'); // MagmaCube - decompile fix
         STATEMENT_JOINER = Joiner.on("; ");
         BY_ID = Maps.newHashMap();
         DEBUG_LEVELS = (List)ImmutableList.of((Object)37190, (Object)37191, (Object)37192, (Object)33387);
diff --git a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
index 7db8ceddfdcb09ffbaca7abbec193d896da08e45..2c647707ae018a3348e60b551faaae6042dfe97d 100644
--- a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
+++ b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
@@ -74,7 +74,7 @@ public class InputConstants
     
     public static boolean isRawMouseInputSupported() {
         try {
-            return InputConstants.glfwRawMouseMotionSupported != null && InputConstants.glfwRawMouseMotionSupported.invokeExact();
+            return InputConstants.glfwRawMouseMotionSupported != null && (boolean) InputConstants.glfwRawMouseMotionSupported.invokeExact(); // MagmaCube - decompile fix
         }
         catch (Throwable debug0) {
             throw new RuntimeException(debug0);
@@ -95,7 +95,7 @@ public class InputConstants
         try {
             debug3 = debug0.findStatic(GLFW.class, "glfwRawMouseMotionSupported", debug2);
             final MethodHandle debug5 = debug0.findStaticGetter(GLFW.class, "GLFW_RAW_MOUSE_MOTION", Integer.TYPE);
-            debug4 = debug5.invokeExact();
+            debug4 = (int) debug5.invokeExact(); // MagmaCube - decompile fix
         }
         catch (NoSuchMethodException | NoSuchFieldException ex) {}
         catch (Throwable debug6) {
@@ -109,37 +109,40 @@ public class InputConstants
     public enum Type
     {
         KEYSYM("key.keyboard", (debug0, debug1) -> {
-            debug2 = GLFW.glfwGetKeyName((int)debug0, -1);
+            String debug2 = GLFW.glfwGetKeyName((int)debug0, -1); // MagmaCube - decompile fix
+            Component o3; // MagmaCube - decompile fix
             if (debug2 != null) {
                 // new(net.minecraft.network.chat.TextComponent.class)
-                new TextComponent(debug2);
+                o3 = new TextComponent(debug2); // MagmaCube - decompile fix
             }
             else {
                 // new(net.minecraft.network.chat.TranslatableComponent.class)
-                new TranslatableComponent(debug1);
+                o3 = new TranslatableComponent(debug1); // MagmaCube - decompile fix
             }
             return o3;
         }), 
         SCANCODE("scancode", (debug0, debug1) -> {
-            debug3 = GLFW.glfwGetKeyName(-1, (int)debug0);
+            String debug3 = GLFW.glfwGetKeyName(-1, (int)debug0); // MagmaCube - decompile fix
+            Component o6; // MagmaCube - decompile fix
             if (debug3 != null) {
                 // new(net.minecraft.network.chat.TextComponent.class)
-                new TextComponent(debug3);
+                o6 = new TextComponent(debug3); // MagmaCube - decompile fix
             }
             else {
                 // new(net.minecraft.network.chat.TranslatableComponent.class)
-                new TranslatableComponent(debug1);
+                o6 = new TranslatableComponent(debug1); // MagmaCube - decompile fix
             }
             return o6;
         }), 
         MOUSE("key.mouse", (debug0, debug1) -> {
+            Component o9; // MagmaCube - decompile fix
             if (Language.getInstance().has(debug1)) {
                 // new(net.minecraft.network.chat.TranslatableComponent.class)
-                new TranslatableComponent(debug1);
+                o9 = new TranslatableComponent(debug1); // MagmaCube - decompile fix
             }
             else {
                 // new(net.minecraft.network.chat.TranslatableComponent.class)
-                new TranslatableComponent("key.mouse", new Object[] { debug0 + 1 });
+                o9 = new TranslatableComponent("key.mouse", new Object[] { debug0 + 1 }); // MagmaCube - decompile fix
             }
             return o9;
         });
@@ -150,7 +153,7 @@ public class InputConstants
         
         private static void addKey(final Type debug0, final String debug1, final int debug2) {
             final Key debug3 = new Key(debug1, debug0, debug2);
-            debug0.map.put(debug2, (Object)debug3);
+            debug0.map.put(debug2, debug3); // MagmaCube - decompile fix
         }
         
         private Type(final String debug3, final BiFunction<Integer, String, Component> debug4) {
@@ -160,15 +163,13 @@ public class InputConstants
         }
         
         public Key getOrCreate(final int debug1) {
-            int debug2;
-            final String debug3;
-            return (Key)this.map.computeIfAbsent(debug1, debug1 -> {
-                debug2 = debug1;
+            return (Key)this.map.computeIfAbsent(debug1, debug1l -> { // MagmaCube - decompile fix
+                int debug2 = debug1l; // MagmaCube - decompile fix
                 if (this == Type.MOUSE) {
                     ++debug2;
                 }
-                debug3 = this.defaultPrefix + "." + debug2;
-                return new Key(debug3, this, debug1);
+                String debug3 = this.defaultPrefix + "." + debug2; // MagmaCube - decompile fix
+                return new Key(debug3, this, debug1l); // MagmaCube - decompile fix
             });
         }
         
diff --git a/src/main/java/com/mojang/blaze3d/platform/Monitor.java b/src/main/java/com/mojang/blaze3d/platform/Monitor.java
index 867ac21a821f3d428642625cd79c5342a893b1f4..2aef0c9cb3683d0a76d5c9d803be64c0f6f31670 100644
--- a/src/main/java/com/mojang/blaze3d/platform/Monitor.java
+++ b/src/main/java/com/mojang/blaze3d/platform/Monitor.java
@@ -18,7 +18,7 @@ public final class Monitor
     
     public Monitor(final long debug1) {
         this.monitor = debug1;
-        this.videoModes = (List<VideoMode>)Lists.newArrayList();
+        this.videoModes = Lists.newArrayList(); // MagmaCube - decompile fix
         this.refreshVideoModes();
     }
     
diff --git a/src/main/java/com/mojang/blaze3d/platform/NativeImage.java b/src/main/java/com/mojang/blaze3d/platform/NativeImage.java
index b739528064943d45f57721c1c7f67f965cc82fe8..fb49b72c42c2b6fbb24f9e1353f927722ea2a1f1 100644
--- a/src/main/java/com/mojang/blaze3d/platform/NativeImage.java
+++ b/src/main/java/com/mojang/blaze3d/platform/NativeImage.java
@@ -112,7 +112,7 @@ public final class NativeImage implements AutoCloseable
             if (debug6 == null) {
                 throw new IOException("Could not load image: " + STBImage.stbi_failure_reason());
             }
-            return new NativeImage((debug0 == null) ? getStbFormat(debug5.get(0)) : debug0, debug3.get(0), debug4.get(0), true, MemoryUtil.memAddress(debug6));
+            return new NativeImage((debug0 == null) ? Format.getStbFormat(debug5.get(0)) : debug0, debug3.get(0), debug4.get(0), true, MemoryUtil.memAddress(debug6)); // MagmaCube - decompile fix
         }
     }
     
@@ -299,7 +299,7 @@ public final class NativeImage implements AutoCloseable
         this.checkAllocated();
         try (final WritableByteChannel debug2 = Files.newByteChannel(debug1, NativeImage.OPEN_OPTIONS, (FileAttribute<?>[])new FileAttribute[0])) {
             if (!this.writeToChannel(debug2)) {
-                throw new IOException("Could not write image to the PNG file Â¥"" + debug1.toAbsolutePath() + "Â¥": " + STBImage.stbi_failure_reason());
+                throw new IOException("Could not write image to the PNG file \"" + debug1.toAbsolutePath() + "\": " + STBImage.stbi_failure_reason()); // MagmaCube - decompile fix
             }
         }
     }
diff --git a/src/main/java/com/mojang/blaze3d/platform/ScreenManager.java b/src/main/java/com/mojang/blaze3d/platform/ScreenManager.java
index 51bb17d4aedd022e040298938b46434eafddbf7c..7b656db085b5ffb9735b90c716a4e8593e39817d 100644
--- a/src/main/java/com/mojang/blaze3d/platform/ScreenManager.java
+++ b/src/main/java/com/mojang/blaze3d/platform/ScreenManager.java
@@ -24,7 +24,7 @@ public class ScreenManager
         if (debug2 != null) {
             for (int debug3 = 0; debug3 < debug2.limit(); ++debug3) {
                 final long debug4 = debug2.get(debug3);
-                this.monitors.put(debug4, (Object)debug1.createMonitor(debug4));
+                this.monitors.put(debug4, debug1.createMonitor(debug4)); // MagmaCube - decompile fix
             }
         }
     }
@@ -32,7 +32,7 @@ public class ScreenManager
     private void onMonitorChange(final long debug1, final int debug3) {
         RenderSystem.assertThread(RenderSystem::isOnRenderThread);
         if (debug3 == 262145) {
-            this.monitors.put(debug1, (Object)this.monitorCreator.createMonitor(debug1));
+            this.monitors.put(debug1, this.monitorCreator.createMonitor(debug1)); // MagmaCube - decompile fix
         }
         else if (debug3 == 262146) {
             this.monitors.remove(debug1);
diff --git a/src/main/java/com/mojang/blaze3d/shaders/Program.java b/src/main/java/com/mojang/blaze3d/shaders/Program.java
index faaeba06ee42ad2b4fca8331fde0ac71a6e1416a..83cf8a0ed94dfb95fba8784f757beeba66a5b545 100644
--- a/src/main/java/com/mojang/blaze3d/shaders/Program.java
+++ b/src/main/java/com/mojang/blaze3d/shaders/Program.java
@@ -70,7 +70,7 @@ public class Program
         private final Map<String, Program> programs;
         
         private Type(final String debug3, final String debug4, final int debug5) {
-            this.programs = (Map<String, Program>)Maps.newHashMap();
+            this.programs = Maps.newHashMap(); // MagmaCube - decompile fix
             this.name = debug3;
             this.extension = debug4;
             this.glType = debug5;
diff --git a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
index d1967b2d5decf6c3700ac2ce81b8e0fc45912a1d..60ca1fc02a311fa164c8c0e89c2318829e7b1e53 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
@@ -34,7 +34,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
     private boolean building;
     
     public BufferBuilder(final int debug1) {
-        this.vertexCounts = (List<DrawState>)Lists.newArrayList();
+        this.vertexCounts = Lists.newArrayList(); // MagmaCube - decompile fix
         this.lastRenderedCountIndex = 0;
         this.totalRenderedBytes = 0;
         this.nextElementByte = 0;
@@ -87,7 +87,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         for (int debug9 = 0; debug9 < debug8.length; ++debug9) {
             debug8[debug9] = debug9;
         }
-        IntArrays.mergeSort(debug8, (debug1, debug2) -> Floats.compare(debug6[debug2], debug6[debug1]));
+        IntArrays.mergeSort(debug8, (debug1l, debug2l) -> Floats.compare(debug6[debug2l], debug6[debug1l])); // MagmaCube - decompile fix
         final BitSet debug10 = new BitSet();
         final FloatBuffer debug11 = MemoryTracker.createFloatBuffer(this.format.getIntegerSize() * 4);
         for (int debug12 = debug10.nextClearBit(0); debug12 < debug8.length; debug12 = debug10.nextClearBit(debug12 + 1)) {
@@ -229,7 +229,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
             this.nextElement();
         }
         if (this.defaultColorSet && this.currentElement.getUsage() == VertexFormatElement.Usage.COLOR) {
-            super.color(this.defaultR, this.defaultG, this.defaultB, this.defaultA);
+            super.color((float) this.defaultR, this.defaultG, this.defaultB, this.defaultA); // MagmaCube - decompile fix
         }
     }
     
@@ -238,7 +238,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         if (this.defaultColorSet) {
             throw new IllegalStateException();
         }
-        return super.color(debug1, debug2, debug3, debug4);
+        return super.color((float) debug1, debug2, debug3, debug4); // MagmaCube - decompile fix
     }
     
     @Override
@@ -287,7 +287,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         }
         final ByteBuffer debug2 = this.buffer.slice();
         this.buffer.clear();
-        return (Pair<DrawState, ByteBuffer>)Pair.of((Object)debug1, (Object)debug2);
+        return (Pair<DrawState, ByteBuffer>)Pair.of(debug1, debug2); // MagmaCube - decompile fix
     }
     
     public void clear() {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/BufferVertexConsumer.java b/src/main/java/com/mojang/blaze3d/vertex/BufferVertexConsumer.java
index d76279bdaf68ed147bf27cf836fb2cf40b3c57ee..7b92f5a9f3b3856ecf5e2b272e3420cd369e8805 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/BufferVertexConsumer.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/BufferVertexConsumer.java
@@ -92,7 +92,7 @@ public interface BufferVertexConsumer extends VertexConsumer
         return this;
     }
     
-    default byte normalIntValue(final float debug0) {
+    static byte normalIntValue(final float debug0) { // MagmaCube - decompile fix
         return (byte)((int)(Mth.clamp(debug0, -1.0f, 1.0f) * 127.0f) & 0xFF);
     }
 }
diff --git a/src/main/java/com/mojang/blaze3d/vertex/PoseStack.java b/src/main/java/com/mojang/blaze3d/vertex/PoseStack.java
index 7e37272a4374c7c5cb11dee10451aa9d96966209..44a2090560998f1c932bbcc14815ba41f6ddfc77 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/PoseStack.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/PoseStack.java
@@ -14,12 +14,10 @@ public class PoseStack
     private final Deque<Pose> poseStack;
     
     public PoseStack() {
-        final Matrix4f debug;
-        final Matrix3f debug2;
-        this.poseStack = Util.make((Deque<Pose>)Queues.newArrayDeque(), debug0 -> {
-            debug = new Matrix4f();
+        this.poseStack = Util.make(Queues.newArrayDeque(), debug0 -> { // MagmaCube - decompile fix
+            Matrix4f debug = new Matrix4f(); // MagmaCube - decompile fix
             debug.setIdentity();
-            debug2 = new Matrix3f();
+            Matrix3f debug2 = new Matrix3f(); // MagmaCube - decompile fix
             debug2.setIdentity();
             debug0.add(new Pose(debug, debug2));
         });
diff --git a/src/main/java/com/mojang/blaze3d/vertex/VertexBuffer.java b/src/main/java/com/mojang/blaze3d/vertex/VertexBuffer.java
index 725182d758acfd3211a7a24fe45274a9b180ec07..f8d707cb8186388bd719da0085ef7fe621bb4863 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/VertexBuffer.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/VertexBuffer.java
@@ -14,7 +14,7 @@ public class VertexBuffer implements AutoCloseable
     
     public VertexBuffer(final VertexFormat debug1) {
         this.format = debug1;
-        RenderSystem.glGenBuffers(debug1 -> this.id = debug1);
+        RenderSystem.glGenBuffers(debug1l -> this.id = debug1l); // MagmaCube - decompile fix
     }
     
     public void bind() {
diff --git a/src/main/java/com/mojang/math/Matrix3f.java b/src/main/java/com/mojang/math/Matrix3f.java
index d3afc81bc7e2b173dc5d35924773ab7bb14efc59..6eabc66a4ac0576668c18fe4c1d0614fc266887b 100644
--- a/src/main/java/com/mojang/math/Matrix3f.java
+++ b/src/main/java/com/mojang/math/Matrix3f.java
@@ -84,9 +84,9 @@ public final class Matrix3f
         final float debug3 = 2.0f * (debug0 - debug2);
         if (Matrix3f.G * debug1 * debug1 < debug3 * debug3) {
             final float debug4 = Mth.fastInvSqrt(debug1 * debug1 + debug3 * debug3);
-            return (Pair<Float, Float>)Pair.of((Object)(debug4 * debug1), (Object)(debug4 * debug3));
+            return (Pair<Float, Float>)Pair.of((debug4 * debug1), (debug4 * debug3)); // MagmaCube - decompile fix
         }
-        return (Pair<Float, Float>)Pair.of((Object)Matrix3f.SS, (Object)Matrix3f.CS);
+        return (Pair<Float, Float>)Pair.of(Matrix3f.SS, Matrix3f.CS); // MagmaCube - decompile fix
     }
     
     private static Pair<Float, Float> qrGivensQuat(final float debug0, final float debug1) {
@@ -101,7 +101,7 @@ public final class Matrix3f
         final float debug5 = Mth.fastInvSqrt(debug4 * debug4 + debug3 * debug3);
         debug4 *= debug5;
         debug3 *= debug5;
-        return (Pair<Float, Float>)Pair.of((Object)debug3, (Object)debug4);
+        return (Pair<Float, Float>)Pair.of(debug3, debug4); // MagmaCube - decompile fix
     }
     
     private static Quaternion stepJacobi(final Matrix3f debug0) {
@@ -249,7 +249,7 @@ public final class Matrix3f
         debug6 = 1.0f / debug6;
         debug1.mul((float)Math.sqrt(debug6));
         final Vector3f debug29 = new Vector3f(debug28.m00 * debug6, debug28.m11 * debug6, debug28.m22 * debug6);
-        return (Triple<Quaternion, Vector3f, Quaternion>)Triple.of((Object)debug1, (Object)debug29, (Object)debug2);
+        return (Triple<Quaternion, Vector3f, Quaternion>)Triple.of(debug1, debug29, debug2); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/com/mojang/math/SymmetricGroup3.java b/src/main/java/com/mojang/math/SymmetricGroup3.java
index 615ff87f1bedcb9db71053057383665b07934dea..39f2eb925447d39782903862a7732b921bd45233 100644
--- a/src/main/java/com/mojang/math/SymmetricGroup3.java
+++ b/src/main/java/com/mojang/math/SymmetricGroup3.java
@@ -36,32 +36,25 @@ public enum SymmetricGroup3
     }
     
     static {
-        final SymmetricGroup3[] array;
-        int length;
-        int i;
-        SymmetricGroup3 debug2;
-        final SymmetricGroup3[] array2;
-        int length2;
-        int j;
-        SymmetricGroup3 debug3;
-        int[] debug4;
-        int debug5;
-        SymmetricGroup3 debug6;
         cayleyTable = Util.make(new SymmetricGroup3[values().length][values().length], debug0 -> {
-            values();
-            for (length = array.length; i < length; ++i) {
-                debug2 = array[i];
-                values();
-                for (length2 = array2.length; j < length2; ++j) {
-                    debug3 = array2[j];
-                    debug4 = new int[3];
-                    for (debug5 = 0; debug5 < 3; ++debug5) {
+            // MagmaCube start - decompile fix
+            SymmetricGroup3[] array = values();
+            int i = 0;
+            for (int length = array.length; i < length; ++i) {
+                SymmetricGroup3 debug2 = array[i];
+                SymmetricGroup3[] array2 = values();
+                int j = 0;
+                for (int length2 = array2.length; j < length2; ++j) {
+                    SymmetricGroup3 debug3 = array2[j];
+                    int[] debug4 = new int[3];
+                    for (int debug5 = 0; debug5 < 3; ++debug5) {
                         debug4[debug5] = debug2.permutation[debug3.permutation[debug5]];
                     }
-                    debug6 = Arrays.stream(values()).filter(debug1 -> Arrays.equals(debug1.permutation, debug4)).findFirst().get();
+                    SymmetricGroup3 debug6 = Arrays.stream(values()).filter(debug1 -> Arrays.equals(debug1.permutation, debug4)).findFirst().get();
                     debug0[debug2.ordinal()][debug3.ordinal()] = debug6;
                 }
             }
+            // MagmaCube end - decompile fix
         });
     }
 }
diff --git a/src/main/java/com/mojang/math/Transformation.java b/src/main/java/com/mojang/math/Transformation.java
index f39fbd0d9faeb4306a63c9924d483d606e47961e..c78ac7699e87fa72967a1c8b1529676e99e2f91b 100644
--- a/src/main/java/com/mojang/math/Transformation.java
+++ b/src/main/java/com/mojang/math/Transformation.java
@@ -96,7 +96,7 @@ public final class Transformation
         debug0.multiply(1.0f / debug0.m33);
         final Vector3f debug = new Vector3f(debug0.m03, debug0.m13, debug0.m23);
         final Matrix3f debug2 = new Matrix3f(debug0);
-        return (Pair<Matrix3f, Vector3f>)Pair.of((Object)debug2, (Object)debug);
+        return (Pair<Matrix3f, Vector3f>)Pair.of(debug2, debug); // MagmaCube - decompile fix
     }
     
     public Matrix4f getMatrix() {
@@ -126,12 +126,10 @@ public final class Transformation
     }
     
     static {
-        final Matrix4f debug0;
-        final Transformation debug2;
         IDENTITY = Util.make(() -> {
-            debug0 = new Matrix4f();
+            Matrix4f debug0 = new Matrix4f(); // MagmaCube - decompile fix
             debug0.setIdentity();
-            debug2 = new Transformation(debug0);
+            Transformation debug2 = new Transformation(debug0); // MagmaCube - decompile fix
             debug2.getLeftRotation();
             return debug2;
         });
diff --git a/src/main/java/com/mojang/realmsclient/RealmsMainScreen.java b/src/main/java/com/mojang/realmsclient/RealmsMainScreen.java
index 9ed351be3364d4aedd9748efd14f04f1b5b1badb..12f89cd3573fe111678e7ba2ec9653edb5d6f8c0 100644
--- a/src/main/java/com/mojang/realmsclient/RealmsMainScreen.java
+++ b/src/main/java/com/mojang/realmsclient/RealmsMainScreen.java
@@ -93,7 +93,7 @@ extends RealmsScreen {
     private static final ResourceLocation BUTTON_LOCATION = new ResourceLocation("minecraft", "textures/gui/widgets.png");
     private static final Component NO_PENDING_INVITES_TEXT = new TranslatableComponent("mco.invites.nopending");
     private static final Component PENDING_INVITES_TEXT = new TranslatableComponent("mco.invites.pending");
-    private static final List<Component> TRIAL_MESSAGE_LINES = ImmutableList.of((Object)new TranslatableComponent("mco.trial.message.line1"), (Object)new TranslatableComponent("mco.trial.message.line2"));
+    private static final List<Component> TRIAL_MESSAGE_LINES = ImmutableList.of(new TranslatableComponent("mco.trial.message.line1"), new TranslatableComponent("mco.trial.message.line2")); // MagmaCube - decompile fix
     private static final Component SERVER_UNITIALIZED_TEXT = new TranslatableComponent("mco.selectServer.uninitialized");
     private static final Component SUBSCRIPTION_EXPIRED_TEXT = new TranslatableComponent("mco.selectServer.expiredList");
     private static final Component SUBSCRIPTION_RENEW_TEXT = new TranslatableComponent("mco.selectServer.expiredRenew");
@@ -190,7 +190,7 @@ extends RealmsScreen {
 
     @Override
     public void init() {
-        this.keyCombos = Lists.newArrayList((Object[])new KeyCombo[]{new KeyCombo(new char[]{'3', '2', '1', '4', '5', '6'}, () -> {
+        this.keyCombos = Lists.newArrayList(new KeyCombo[]{new KeyCombo(new char[]{'3', '2', '1', '4', '5', '6'}, () -> { // MagmaCube - decompile fix
             overrideConfigure = !overrideConfigure;
         }), new KeyCombo(new char[]{'9', '8', '7', '1', '2', '3'}, () -> {
             if (RealmsClient.currentEnvironment == RealmsClient.Environment.STAGE) {
@@ -312,7 +312,6 @@ extends RealmsScreen {
 
     @Override
     public void tick() {
-        Object debug1;
         super.tick();
         this.justClosedPopup = false;
         ++this.animTick;
@@ -326,7 +325,7 @@ extends RealmsScreen {
         REALMS_DATA_FETCHER.init();
         if (REALMS_DATA_FETCHER.isFetchedSinceLastTry(RealmsDataFetcher.Task.SERVER_LIST)) {
             boolean debug2;
-            debug1 = REALMS_DATA_FETCHER.getServers();
+            List<RealmsServer> debug1 = REALMS_DATA_FETCHER.getServers(); // MagmaCube - decompile fix
             this.realmSelectionList.clear();
             boolean bl = debug2 = !this.hasFetchedServers;
             if (debug2) {
@@ -334,7 +333,7 @@ extends RealmsScreen {
             }
             if (debug1 != null) {
                 boolean debug3 = false;
-                Iterator<Object> iterator = debug1.iterator();
+                Iterator<RealmsServer> iterator = debug1.iterator(); // MagmaCube - decompile fix
                 while (iterator.hasNext()) {
                     RealmsServer debug5 = (RealmsServer)iterator.next();
                     if (!this.isSelfOwnedNonExpiredServer(debug5)) continue;
@@ -372,7 +371,7 @@ extends RealmsScreen {
             }
         }
         if (REALMS_DATA_FETCHER.isFetchedSinceLastTry(RealmsDataFetcher.Task.LIVE_STATS)) {
-            debug1 = REALMS_DATA_FETCHER.getLivestats();
+            RealmsServerPlayerLists debug1 = REALMS_DATA_FETCHER.getLivestats(); // MagmaCube - decompile fix
             block2: for (RealmsServerPlayerList debug3 : ((RealmsServerPlayerLists)debug1).servers) {
                 for (RealmsServer debug5 : this.realmsServers) {
                     if (debug5.id != debug3.serverId) continue;
@@ -1276,7 +1275,7 @@ extends RealmsScreen {
             this.showingMessage = false;
         }
 
-        public int addMessageEntry(Entry debug1) {
+        public int addMessageEntry(RealmsMainScreen.Entry debug1) { // MagmaCube - decompile fix
             this.showingMessage = true;
             return this.addEntry(debug1);
         }
@@ -1358,7 +1357,7 @@ extends RealmsScreen {
         }
 
         @Override
-        public void setSelected(@Nullable Entry debug1) {
+        public void setSelected(@Nullable RealmsMainScreen.Entry debug1) { // MagmaCube - decompile fix
             super.setSelected(debug1);
             int debug2 = this.children().indexOf(debug1);
             if (!this.showingMessage || debug2 > 0) {
@@ -1410,11 +1409,6 @@ extends RealmsScreen {
         public int getRowWidth() {
             return 300;
         }
-
-        @Override
-        public /* synthetic */ void setSelected(@Nullable AbstractSelectionList.Entry entry) {
-            this.setSelected((Entry)entry);
-        }
     }
 
     static enum HoveredElement {
diff --git a/src/main/java/com/mojang/realmsclient/client/FileDownload.java b/src/main/java/com/mojang/realmsclient/client/FileDownload.java
index c506a6e61cc1712e62d8f69ac4fa016877b9ddf3..1dc52faf6ced4ee5059603c42724fd64a573c905 100644
--- a/src/main/java/com/mojang/realmsclient/client/FileDownload.java
+++ b/src/main/java/com/mojang/realmsclient/client/FileDownload.java
@@ -36,6 +36,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.nio.file.Path;
+import java.util.Iterator;
 import java.util.Locale;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -46,6 +47,7 @@ import net.minecraft.nbt.NbtIo;
 import net.minecraft.world.level.storage.LevelResource;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.LevelSummary;
+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
 import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
 import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
 import org.apache.commons.io.FileUtils;
@@ -118,7 +120,7 @@ public class FileDownload {
                 this.request = new HttpGet(debug1.downloadLink);
                 debug5 = HttpClientBuilder.create().setDefaultRequestConfig(this.requestConfig).build();
                 CloseableHttpResponse debug6 = debug5.execute((HttpUriRequest)this.request);
-                debug2.totalBytes = Long.parseLong(debug6.getFirstHeader("Content-Length").getValue());
+                debug3.totalBytes = Long.parseLong(debug6.getFirstHeader("Content-Length").getValue()); // MagmaCube - decompile fix
                 if (debug6.getStatusLine().getStatusCode() != 200) {
                     this.error = true;
                     this.request.abort();
@@ -149,23 +151,25 @@ public class FileDownload {
                             this.tempFile = File.createTempFile("resources", ".tar.gz");
                             this.request = new HttpGet(debug1.resourcePackUrl);
                             CloseableHttpResponse debug6 = debug5.execute((HttpUriRequest)this.request);
-                            debug2.totalBytes = Long.parseLong(debug6.getFirstHeader("Content-Length").getValue());
+                            debug3.totalBytes = Long.parseLong(debug6.getFirstHeader("Content-Length").getValue()); // MagmaCube - decompile fix
                             if (debug6.getStatusLine().getStatusCode() != 200) {
                                 this.error = true;
                                 this.request.abort();
                                 return;
                             }
+                            // MagmaCube start - decompile fix
+                            FileOutputStream debug7 = new FileOutputStream(this.tempFile);
+                            ResourcePackProgressListener debug8 = new ResourcePackProgressListener(this.tempFile, debug3, debug1);
+                            DownloadCountingOutputStream debug9 = new DownloadCountingOutputStream(debug7);
+                            debug9.setListener(debug8);
+                            IOUtils.copy((InputStream)debug6.getEntity().getContent(), (OutputStream)((Object)debug9));
+                            break block40;
+                            // MagmaCube end - decompile fix
                         }
                         catch (Exception debug6) {
                             LOGGER.error("Caught exception while downloading: " + debug6.getMessage());
                             this.error = true;
                         }
-                        FileOutputStream debug7 = new FileOutputStream(this.tempFile);
-                        ResourcePackProgressListener debug8 = new ResourcePackProgressListener(this.tempFile, debug3, debug1);
-                        DownloadCountingOutputStream debug9 = new DownloadCountingOutputStream(debug7);
-                        debug9.setListener(debug8);
-                        IOUtils.copy((InputStream)debug6.getEntity().getContent(), (OutputStream)((Object)debug9));
-                        break block40;
                         finally {
                             this.request.releaseConnection();
                             if (this.tempFile != null) {
@@ -212,7 +216,7 @@ public class FileDownload {
     }
 
     public static String findAvailableFolderName(String debug0) {
-        debug0 = debug0.replaceAll("[Â¥Â¥./Â¥"]", "_");
+        debug0 = debug0.replaceAll("[\\./\"]", "_"); // MagmaCube - decompile fix
         for (String debug4 : INVALID_FILE_NAMES) {
             if (!debug0.equalsIgnoreCase(debug4)) continue;
             debug0 = "_" + debug0 + "_";
@@ -236,7 +240,7 @@ public class FileDownload {
                     char debug10;
                     Pattern debug4 = Pattern.compile(".*-([0-9]+)$");
                     debug6 = 1;
-                    Object object = SharedConstants.ILLEGAL_FILE_CHARACTERS;
+                    char[] object = SharedConstants.ILLEGAL_FILE_CHARACTERS; // MagmaCube - decompile fix
                     int n = ((char[])object).length;
                     for (int n2 = 0; n2 < n; debug1 = debug1.replace(debug10, '_'), ++n2) {
                         debug10 = object[n2];
@@ -246,9 +250,11 @@ public class FileDownload {
                     }
                     debug1 = FileDownload.findAvailableFolderName(debug1);
                     try {
-                        object = debug3.getLevelList().iterator();
-                        while (object.hasNext()) {
-                            LevelSummary debug8 = (LevelSummary)object.next();
+                        // MagmaCube start - decompile fix
+                        Iterator<LevelSummary> object2 = debug3.getLevelList().iterator();
+                        while (object2.hasNext()) {
+                            LevelSummary debug8 = (LevelSummary)object2.next();
+                            // MagmaCube end - decompile fix
                             if (!debug8.getLevelId().toLowerCase(Locale.ROOT).startsWith(debug1.toLowerCase(Locale.ROOT))) continue;
                             Matcher debug9 = debug4.matcher(debug8.getLevelId());
                             if (debug9.matches()) {
@@ -264,7 +270,7 @@ public class FileDownload {
                         this.error = true;
                         return;
                     }
-                    if (debug3.isNewLevelIdAcceptable(debug1) && debug6 <= true) break block65;
+                    if (debug3.isNewLevelIdAcceptable(debug1) && debug6 <= 1) break block65; // MagmaCube - decompile fix
                     debug5 = debug1 + (debug6 == 1 ? "" : "-" + debug6);
                     if (debug3.isNewLevelIdAcceptable(debug5)) break block66;
                     debug7 = false;
@@ -284,7 +290,7 @@ public class FileDownload {
         try {
             debug8.mkdir();
             debug7 = new TarArchiveInputStream((InputStream)new GzipCompressorInputStream((InputStream)new BufferedInputStream(new FileInputStream(debug2))));
-            Object debug9 = debug7.getNextTarEntry();
+            TarArchiveEntry debug9 = debug7.getNextTarEntry(); // MagmaCube - decompile fix
             while (debug9 != null) {
                 File debug10 = new File(debug8, debug9.getName().replace("world", debug5));
                 if (debug9.isDirectory()) {
diff --git a/src/main/java/com/mojang/realmsclient/client/FileUpload.java b/src/main/java/com/mojang/realmsclient/client/FileUpload.java
index 2340f7e8f3be86875c4cabdc662e77c52f92e556..25e87f4037de213d4cc665e9739ae79e2e073b24 100644
--- a/src/main/java/com/mojang/realmsclient/client/FileUpload.java
+++ b/src/main/java/com/mojang/realmsclient/client/FileUpload.java
@@ -152,7 +152,7 @@ public class FileUpload
     }
     
     private long getRetryDelaySeconds(final HttpResponse debug1) {
-        return Optional.ofNullable(debug1.getFirstHeader("Retry-After")).map((Function<? super Header, ?>)Header::getValue).map((Function<? super Object, ? extends Long>)Long::valueOf).orElse(0L);
+        return Optional.ofNullable(debug1.getFirstHeader("Retry-After")).map(Header::getValue).map(Long::valueOf).orElse(0L); // MagmaCube - decompile fix
     }
     
     public boolean isFinished() {
diff --git a/src/main/java/com/mojang/realmsclient/client/Ping.java b/src/main/java/com/mojang/realmsclient/client/Ping.java
index 71f8f23b82703b964d1e4ae7755151add182b4f8..54aa0b3ca7e151bd5f65c9dfbab215227ad3e193 100644
--- a/src/main/java/com/mojang/realmsclient/client/Ping.java
+++ b/src/main/java/com/mojang/realmsclient/client/Ping.java
@@ -15,7 +15,7 @@ public class Ping
         for (final Region debug : debug0) {
             ping(debug.endpoint);
         }
-        final List<RegionPingResult> debug2 = (List<RegionPingResult>)Lists.newArrayList();
+        final List<RegionPingResult> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Region debug3 : debug0) {
             debug2.add(new RegionPingResult(debug3.name, ping(debug3.endpoint)));
         }
diff --git a/src/main/java/com/mojang/realmsclient/dto/Backup.java b/src/main/java/com/mojang/realmsclient/dto/Backup.java
index 9425a875f1004431913a574ed419004e6b0a973c..4a1b2bbe0295c58a949752e2180a3f7ef3db05d1 100644
--- a/src/main/java/com/mojang/realmsclient/dto/Backup.java
+++ b/src/main/java/com/mojang/realmsclient/dto/Backup.java
@@ -22,8 +22,8 @@ public class Backup extends ValueObject
     public Map<String, String> changeList;
     
     public Backup() {
-        this.metadata = (Map<String, String>)Maps.newHashMap();
-        this.changeList = (Map<String, String>)Maps.newHashMap();
+        this.metadata = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.changeList = Maps.newHashMap(); // MagmaCube - decompile fix
     }
     
     public static Backup parse(final JsonElement debug0) {
diff --git a/src/main/java/com/mojang/realmsclient/dto/Ops.java b/src/main/java/com/mojang/realmsclient/dto/Ops.java
index 745b0901ed4d42af8459a7caaca2693ebb52e5a9..9db7112cc082d1c29344fb9c7ed611b75c0e9ee3 100644
--- a/src/main/java/com/mojang/realmsclient/dto/Ops.java
+++ b/src/main/java/com/mojang/realmsclient/dto/Ops.java
@@ -12,7 +12,7 @@ public class Ops extends ValueObject
     public Set<String> ops;
     
     public Ops() {
-        this.ops = (Set<String>)Sets.newHashSet();
+        this.ops = Sets.newHashSet(); // MagmaCube - decompile fix
     }
     
     public static Ops parse(final String debug0) {
diff --git a/src/main/java/com/mojang/realmsclient/dto/RealmsServer.java b/src/main/java/com/mojang/realmsclient/dto/RealmsServer.java
index 4476935dacf525d453a4b31f0a8b162f24934dd0..67d71ae3aebf45e55ef12df260b0827702371a7a 100644
--- a/src/main/java/com/mojang/realmsclient/dto/RealmsServer.java
+++ b/src/main/java/com/mojang/realmsclient/dto/RealmsServer.java
@@ -102,7 +102,7 @@ extends ValueObject {
             ++debug3;
         }
         this.serverPing.nrOfPlayers = String.valueOf(debug3);
-        this.serverPing.playerList = Joiner.on((char)'Â¥n').join((Iterable)debug2);
+        this.serverPing.playerList = Joiner.on((char)'\n').join((Iterable)debug2); // MagmaCube - decompile fix
     }
 
     public static RealmsServer parse(JsonObject debug0) {
@@ -270,10 +270,6 @@ extends ValueObject {
         return this.name + " (" + this.slots.get(debug1).getSlotName(debug1) + ")";
     }
 
-    public /* synthetic */ Object clone() throws CloneNotSupportedException {
-        return this.clone();
-    }
-
     public static enum WorldType {
         NORMAL,
         MINIGAME,
@@ -302,11 +298,6 @@ extends ValueObject {
         public int compare(RealmsServer debug1, RealmsServer debug2) {
             return ComparisonChain.start().compareTrueFirst(debug1.state == State.UNINITIALIZED, debug2.state == State.UNINITIALIZED).compareTrueFirst(debug1.expiredTrial, debug2.expiredTrial).compareTrueFirst(debug1.owner.equals(this.refOwner), debug2.owner.equals(this.refOwner)).compareFalseFirst(debug1.expired, debug2.expired).compareTrueFirst(debug1.state == State.OPEN, debug2.state == State.OPEN).compare(debug1.id, debug2.id).result();
         }
-
-        @Override
-        public /* synthetic */ int compare(Object object, Object object2) {
-            return this.compare((RealmsServer)object, (RealmsServer)object2);
-        }
     }
 }
 
diff --git a/src/main/java/com/mojang/realmsclient/dto/RealmsServerPlayerList.java b/src/main/java/com/mojang/realmsclient/dto/RealmsServerPlayerList.java
index 647e1f85c2bbd32c1459f8e23d0c70815a2cd94a..c97deb4a414f160eadb35c3d173566bc1be31ba8 100644
--- a/src/main/java/com/mojang/realmsclient/dto/RealmsServerPlayerList.java
+++ b/src/main/java/com/mojang/realmsclient/dto/RealmsServerPlayerList.java
@@ -29,11 +29,11 @@ public class RealmsServerPlayerList extends ValueObject
                     debug.players = parsePlayers(debug3.getAsJsonArray());
                 }
                 else {
-                    debug.players = (List<String>)Lists.newArrayList();
+                    debug.players = Lists.newArrayList(); // MagmaCube - decompile fix
                 }
             }
             else {
-                debug.players = (List<String>)Lists.newArrayList();
+                debug.players = Lists.newArrayList(); // MagmaCube - decompile fix
             }
         }
         catch (Exception debug4) {
@@ -43,7 +43,7 @@ public class RealmsServerPlayerList extends ValueObject
     }
     
     private static List<String> parsePlayers(final JsonArray debug0) {
-        final List<String> debug = (List<String>)Lists.newArrayList();
+        final List<String> debug = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final JsonElement debug2 : debug0) {
             try {
                 debug.add(debug2.getAsString());
diff --git a/src/main/java/com/mojang/realmsclient/dto/RealmsServerPlayerLists.java b/src/main/java/com/mojang/realmsclient/dto/RealmsServerPlayerLists.java
index 5fd7f592418b2a08a0bc11b6bf7bd395aa8321f0..7c01a73dea12f832bf558f1dcb6899de5260ecd0 100644
--- a/src/main/java/com/mojang/realmsclient/dto/RealmsServerPlayerLists.java
+++ b/src/main/java/com/mojang/realmsclient/dto/RealmsServerPlayerLists.java
@@ -17,7 +17,7 @@ public class RealmsServerPlayerLists extends ValueObject
     
     public static RealmsServerPlayerLists parse(final String debug0) {
         final RealmsServerPlayerLists debug = new RealmsServerPlayerLists();
-        debug.servers = (List<RealmsServerPlayerList>)Lists.newArrayList();
+        debug.servers = Lists.newArrayList(); // MagmaCube - decompile fix
         try {
             final JsonParser debug2 = new JsonParser();
             final JsonObject debug3 = debug2.parse(debug0).getAsJsonObject();
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBackupScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBackupScreen.java
index d38eec14d30290ea1a9ad5e055e1180ef52fa4da..5543ee73f8e7a7f3457c305407f9ec2328bb3f02 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBackupScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBackupScreen.java
@@ -309,7 +309,7 @@ extends RealmsScreen {
         }
 
         public void addEntry(Backup debug1) {
-            this.addEntry(new Entry(debug1));
+            this.addEntry(new RealmsBackupScreen.Entry(debug1)); // MagmaCube - decompile fix
         }
 
         @Override
@@ -389,7 +389,7 @@ extends RealmsScreen {
         }
 
         @Override
-        public void setSelected(@Nullable Entry debug1) {
+        public void setSelected(@Nullable RealmsBackupScreen.Entry debug1) { // MagmaCube - decompile fix
             super.setSelected(debug1);
             RealmsBackupScreen.this.selectedBackup = this.children().indexOf(debug1);
             RealmsBackupScreen.this.updateButtonStates();
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
index dd57f11a6d5714491b2f8a86f7066f1a5384d43b..7a3d17b7de7ba6d74942b5dca0832cf42d951dd0 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
@@ -82,27 +82,27 @@ extends RealmsScreen {
             int debug3 = debug23.getKey();
             boolean debug4 = debug3 != this.serverData.activeSlot || this.serverData.worldType == RealmsServer.WorldType.MINIGAME;
             Button debug5 = debug4 ? new Button(this.getFramePositionX(debug3), RealmsBrokenWorldScreen.row(8), 80, 20, new TranslatableComponent("mco.brokenworld.play"), debug2 -> {
-                if (this.serverData.slots.get((Object)Integer.valueOf((int)debug1)).empty) {
-                    RealmsResetWorldScreen debug3 = new RealmsResetWorldScreen(this, this.serverData, new TranslatableComponent("mco.configure.world.switch.slot"), new TranslatableComponent("mco.configure.world.switch.slot.subtitle"), 0xA0A0A0, CommonComponents.GUI_CANCEL, this::doSwitchOrReset, () -> {
+                if (this.serverData.slots.get((Object)Integer.valueOf((int)debug3)).empty) { // MagmaCube - decompile fix
+                    RealmsResetWorldScreen debug3l = new RealmsResetWorldScreen(this, this.serverData, new TranslatableComponent("mco.configure.world.switch.slot"), new TranslatableComponent("mco.configure.world.switch.slot.subtitle"), 0xA0A0A0, CommonComponents.GUI_CANCEL, this::doSwitchOrReset, () -> { // MagmaCube - decompile fix
                         this.minecraft.setScreen(this);
                         this.doSwitchOrReset();
                     });
-                    debug3.setSlot(debug3);
-                    debug3.setResetTitle(new TranslatableComponent("mco.create.world.reset.title"));
-                    this.minecraft.setScreen(debug3);
+                    debug3l.setSlot(debug3); // MagmaCube - decompile fix
+                    debug3l.setResetTitle(new TranslatableComponent("mco.create.world.reset.title")); // MagmaCube - decompile fix
+                    this.minecraft.setScreen(debug3l); // MagmaCube - decompile fix
                 } else {
                     this.minecraft.setScreen(new RealmsLongRunningMcoTaskScreen(this.lastScreen, new SwitchSlotTask(this.serverData.id, debug3, this::doSwitchOrReset)));
                 }
             }) : new Button(this.getFramePositionX(debug3), RealmsBrokenWorldScreen.row(8), 80, 20, new TranslatableComponent("mco.brokenworld.download"), debug22 -> {
-                TranslatableComponent debug3 = new TranslatableComponent("mco.configure.world.restore.download.question.line1");
-                TranslatableComponent debug4 = new TranslatableComponent("mco.configure.world.restore.download.question.line2");
+                TranslatableComponent debug3l = new TranslatableComponent("mco.configure.world.restore.download.question.line1"); // MagmaCube - decompile fix
+                TranslatableComponent debug4l = new TranslatableComponent("mco.configure.world.restore.download.question.line2"); // MagmaCube - decompile fix
                 this.minecraft.setScreen(new RealmsLongConfirmationScreen(debug2 -> {
                     if (debug2) {
-                        this.downloadWorld(debug3);
+                        this.downloadWorld(debug3); // MagmaCube - decompile fix
                     } else {
                         this.minecraft.setScreen(this);
                     }
-                }, RealmsLongConfirmationScreen.Type.Info, debug3, debug4, true));
+                }, RealmsLongConfirmationScreen.Type.Info, debug3l, debug4l, true)); // MagmaCube - decompile fix
             });
             if (this.slotsThatHasBeenDownloaded.contains(debug3)) {
                 debug5.active = false;
@@ -110,14 +110,14 @@ extends RealmsScreen {
             }
             this.addButton(debug5);
             this.addButton(new Button(this.getFramePositionX(debug3), RealmsBrokenWorldScreen.row(10), 80, 20, new TranslatableComponent("mco.brokenworld.reset"), debug2 -> {
-                RealmsResetWorldScreen debug3 = new RealmsResetWorldScreen(this, this.serverData, this::doSwitchOrReset, () -> {
+                RealmsResetWorldScreen debug3l = new RealmsResetWorldScreen(this, this.serverData, this::doSwitchOrReset, () -> { // MagmaCube - decompile fix
                     this.minecraft.setScreen(this);
                     this.doSwitchOrReset();
                 });
-                if (debug3 != this.serverData.activeSlot || this.serverData.worldType == RealmsServer.WorldType.MINIGAME) {
-                    debug3.setSlot(debug3);
+                if (debug3 != this.serverData.activeSlot || this.serverData.worldType == RealmsServer.WorldType.MINIGAME) { // MagmaCube - decompile fix
+                    debug3l.setSlot(debug3); // MagmaCube - decompile fix
                 }
-                this.minecraft.setScreen(debug3);
+                this.minecraft.setScreen(debug3l); // MagmaCube - decompile fix
             }));
         }
     }
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsConfigureWorldScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsConfigureWorldScreen.java
index f8b3f30af9e1b095ced510a955d8e0eb2b4d7204..c51e7950fbb94031f52d3e6f9327ffcc5e564599 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsConfigureWorldScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsConfigureWorldScreen.java
@@ -128,9 +128,9 @@ extends RealmsScreenWithCallback {
         RealmsWorldSlotButton debug4 = new RealmsWorldSlotButton(debug22, debug3, 80, 80, () -> this.serverData, debug1 -> {
             this.toolTip = debug1;
         }, debug12, debug2 -> {
-            RealmsWorldSlotButton.State debug3 = ((RealmsWorldSlotButton)debug2).getState();
-            if (debug3 != null) {
-                switch (debug3.action) {
+            RealmsWorldSlotButton.State debug3l = ((RealmsWorldSlotButton)debug2).getState(); // MagmaCube - decompile fix
+            if (debug3l != null) { // MagmaCube - decompile fix
+                switch (debug3l.action) { // MagmaCube - decompile fix
                     case NOTHING: {
                         break;
                     }
@@ -139,11 +139,11 @@ extends RealmsScreenWithCallback {
                         break;
                     }
                     case SWITCH_SLOT: {
-                        if (debug3.minigame) {
+                        if (debug3l.minigame) { // MagmaCube - decompile fix
                             this.switchToMinigame();
                             break;
                         }
-                        if (debug3.empty) {
+                        if (debug3l.empty) { // MagmaCube - decompile fix
                             this.switchToEmptySlot(debug12, this.serverData);
                             break;
                         }
@@ -151,7 +151,7 @@ extends RealmsScreenWithCallback {
                         break;
                     }
                     default: {
-                        throw new IllegalStateException("Unknown action " + (Object)((Object)debug3.action));
+                        throw new IllegalStateException("Unknown action " + (Object)((Object)debug3l.action)); // MagmaCube - decompile fix
                     }
                 }
             }
@@ -278,7 +278,7 @@ extends RealmsScreenWithCallback {
         TranslatableComponent debug4 = new TranslatableComponent("mco.configure.world.slot.switch.question.line2");
         this.minecraft.setScreen(new RealmsLongConfirmationScreen(debug3 -> {
             if (debug3) {
-                this.minecraft.setScreen(new RealmsLongRunningMcoTaskScreen(this.lastScreen, new SwitchSlotTask(debug1.id, debug1, () -> this.minecraft.setScreen(this.getNewScreen()))));
+                this.minecraft.setScreen(new RealmsLongRunningMcoTaskScreen(this.lastScreen, new SwitchSlotTask(debug2.id, debug1, () -> this.minecraft.setScreen(this.getNewScreen())))); // MagmaCube - decompile fix
             } else {
                 this.minecraft.setScreen(this);
             }
@@ -290,10 +290,10 @@ extends RealmsScreenWithCallback {
         TranslatableComponent debug4 = new TranslatableComponent("mco.configure.world.slot.switch.question.line2");
         this.minecraft.setScreen(new RealmsLongConfirmationScreen(debug3 -> {
             if (debug3) {
-                RealmsResetWorldScreen debug4 = new RealmsResetWorldScreen(this, debug2, new TranslatableComponent("mco.configure.world.switch.slot"), new TranslatableComponent("mco.configure.world.switch.slot.subtitle"), 0xA0A0A0, CommonComponents.GUI_CANCEL, () -> this.minecraft.setScreen(this.getNewScreen()), () -> this.minecraft.setScreen(this.getNewScreen()));
-                debug4.setSlot(debug1);
-                debug4.setResetTitle(new TranslatableComponent("mco.create.world.reset.title"));
-                this.minecraft.setScreen(debug4);
+                RealmsResetWorldScreen debug4l = new RealmsResetWorldScreen(this, debug2, new TranslatableComponent("mco.configure.world.switch.slot"), new TranslatableComponent("mco.configure.world.switch.slot.subtitle"), 0xA0A0A0, CommonComponents.GUI_CANCEL, () -> this.minecraft.setScreen(this.getNewScreen()), () -> this.minecraft.setScreen(this.getNewScreen())); // MagmaCube - decompile fix
+                debug4l.setSlot(debug1); // MagmaCube - decompile fix
+                debug4l.setResetTitle(new TranslatableComponent("mco.create.world.reset.title")); // MagmaCube - decompile fix
+                this.minecraft.setScreen(debug4l); // MagmaCube - decompile fix
             } else {
                 this.minecraft.setScreen(this);
             }
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsDownloadLatestWorldScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsDownloadLatestWorldScreen.java
index c3f1372c754d71c21998587785085cf36a8d0858..2cb6ef836e717989e787c88c0aa01f7cee96b74b 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsDownloadLatestWorldScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsDownloadLatestWorldScreen.java
@@ -113,7 +113,7 @@ extends RealmsScreen {
         super.tick();
         ++this.animTick;
         if (this.status != null && this.narrationRateLimiter.tryAcquire(1)) {
-            ArrayList debug1 = Lists.newArrayList();
+            ArrayList<Component> debug1 = Lists.newArrayList(); // MagmaCube - decompile fix
             debug1.add(this.downloadTitle);
             debug1.add(this.status);
             if (this.progress != null) {
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsPendingInvitesScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsPendingInvitesScreen.java
index 647f15844c692e3c408df4ac6a1ca1d993505b40..f5f3ce7ba9d1a7388381c5952032fad0622651bf 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsPendingInvitesScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsPendingInvitesScreen.java
@@ -302,8 +302,8 @@ extends RealmsScreen {
         public void selectItem(int debug1) {
             this.setSelectedItem(debug1);
             if (debug1 != -1) {
-                List debug2 = RealmsPendingInvitesScreen.this.pendingInvitationSelectionList.children();
-                PendingInvite debug3 = ((Entry)debug2.get(debug1)).pendingInvite;
+                List<RealmsPendingInvitesScreen.Entry> debug2 = RealmsPendingInvitesScreen.this.pendingInvitationSelectionList.children(); // MagmaCube - decompile fix
+                PendingInvite debug3 = (debug2.get(debug1)).pendingInvite; // MagmaCube - decompile fix
                 String debug4 = I18n.get("narrator.select.list.position", debug1 + 1, debug2.size());
                 String debug5 = NarrationHelper.join(Arrays.asList(debug3.worldName, debug3.worldOwnerName, RealmsUtil.convertToAgePresentationFromInstant(debug3.date), debug4));
                 NarrationHelper.now(I18n.get("narrator.select", debug5));
@@ -317,7 +317,7 @@ extends RealmsScreen {
         }
 
         @Override
-        public void setSelected(@Nullable Entry debug1) {
+        public void setSelected(@Nullable com.mojang.realmsclient.gui.screens.RealmsPendingInvitesScreen.Entry debug1) { // MagmaCube - decompile fix
             super.setSelected(debug1);
             RealmsPendingInvitesScreen.this.selectedInvite = this.children().indexOf(debug1);
             RealmsPendingInvitesScreen.this.updateButtonStates();
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsPlayerScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsPlayerScreen.java
index fb121aab0fa294ea40e7ad7c025954e9a329748a..ceba9d72bc27541c1fac03961c8953026af94ff7 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsPlayerScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsPlayerScreen.java
@@ -167,11 +167,11 @@ extends RealmsScreen {
             this.selectedInvitedIndex = debug12;
             RealmsConfirmScreen debug3 = new RealmsConfirmScreen(debug1 -> {
                 if (debug1) {
-                    RealmsClient debug2 = RealmsClient.create();
+                    RealmsClient debug2l = RealmsClient.create(); // MagmaCube - decompile fix
                     try {
-                        debug2.uninvite(this.serverData.id, this.selectedInvited);
+                        debug2l.uninvite(this.serverData.id, this.selectedInvited); // MagmaCube - decompile fix
                     }
-                    catch (RealmsServiceException debug3) {
+                    catch (RealmsServiceException debug3l) { // MagmaCube - decompile fix
                         LOGGER.error("Couldn't uninvite user");
                     }
                     this.deleteFromInvitedList(this.selectedInvitedIndex);
@@ -306,7 +306,7 @@ extends RealmsScreen {
         }
 
         public void addEntry(PlayerInfo debug1) {
-            this.addEntry(new Entry(debug1));
+            this.addEntry(new RealmsPlayerScreen.Entry(debug1)); // MagmaCube - decompile fix
         }
 
         @Override
@@ -366,7 +366,7 @@ extends RealmsScreen {
         }
 
         @Override
-        public void setSelected(@Nullable Entry debug1) {
+        public void setSelected(@Nullable RealmsPlayerScreen.Entry debug1) { // MagmaCube - decompile fix
             super.setSelected(debug1);
             RealmsPlayerScreen.this.player = this.children().indexOf(debug1);
             RealmsPlayerScreen.this.updateButtonStates();
diff --git a/src/main/java/com/mojang/realmsclient/util/RealmsTextureManager.java b/src/main/java/com/mojang/realmsclient/util/RealmsTextureManager.java
index 2786605c8f4cbe36ba4260ef6b6950a6fd060f5a..758bd8fa7d12dd6147ef1ff3202c242fcaf051d0 100644
--- a/src/main/java/com/mojang/realmsclient/util/RealmsTextureManager.java
+++ b/src/main/java/com/mojang/realmsclient/util/RealmsTextureManager.java
@@ -105,7 +105,7 @@ public class RealmsTextureManager {
             public void run() {
                 block17: {
                     block16: {
-                        ByteArrayOutputStream debug6;
+                        ByteArrayOutputStream debug6 = new ByteArrayOutputStream(); // MagmaCube - decompile fix
                         Map<MinecraftProfileTexture.Type, MinecraftProfileTexture> debug1 = RealmsUtil.getTextures(debug0);
                         if (!debug1.containsKey((Object)MinecraftProfileTexture.Type.SKIN)) break block16;
                         MinecraftProfileTexture debug2 = debug1.get((Object)MinecraftProfileTexture.Type.SKIN);
@@ -136,10 +136,10 @@ public class RealmsTextureManager {
                                 IOUtils.closeQuietly((InputStream)debug4.getInputStream());
                             }
                             debug5 = new SkinProcessor().process(debug5);
-                            debug6 = new ByteArrayOutputStream();
+                            ImageIO.write((RenderedImage)debug5, "png", debug6); // MagmaCube - decompile fix
                         }
-                        catch (Exception debug5) {
-                            LOGGER.error("Couldn't download http texture", (Throwable)debug5);
+                        catch (Exception debug5l) { // MagmaCube - decompile fix
+                            LOGGER.error("Couldn't download http texture", (Throwable)debug5l); // MagmaCube - decompile fix
                             SKIN_FETCH_STATUS.remove(debug0);
                         }
                         finally {
@@ -147,7 +147,6 @@ public class RealmsTextureManager {
                                 debug4.disconnect();
                             }
                         }
-                        ImageIO.write((RenderedImage)debug5, "png", debug6);
                         FETCHED_SKINS.put(debug0, new Base64().encodeToString(debug6.toByteArray()));
                         SKIN_FETCH_STATUS.put(debug0, true);
                         break block17;
diff --git a/src/main/java/com/mojang/realmsclient/util/RealmsUtil.java b/src/main/java/com/mojang/realmsclient/util/RealmsUtil.java
index 9f14277786f4112443eeeafdbe7c7095445da67b..555d2712d2f5bfe17f23db8cfb51c7c5813c7530 100644
--- a/src/main/java/com/mojang/realmsclient/util/RealmsUtil.java
+++ b/src/main/java/com/mojang/realmsclient/util/RealmsUtil.java
@@ -42,20 +42,16 @@ public class RealmsUtil {
             }
             return debug2;
         }
-
-        public /* synthetic */ Object load(Object object) throws Exception {
-            return this.load((String)object);
-        }
     });
 
     public static String uuidToName(String debug0) throws Exception {
-        GameProfile debug1 = (GameProfile)gameProfileCache.get((Object)debug0);
+        GameProfile debug1 = (GameProfile)gameProfileCache.get(debug0); // MagmaCube - decompile fix
         return debug1.getName();
     }
 
     public static Map<MinecraftProfileTexture.Type, MinecraftProfileTexture> getTextures(String debug0) {
         try {
-            GameProfile debug1 = (GameProfile)gameProfileCache.get((Object)debug0);
+            GameProfile debug1 = (GameProfile)gameProfileCache.get(debug0); // MagmaCube - decompile fix
             return SESSION_SERVICE.getTextures(debug1, false);
         }
         catch (Exception debug1) {
diff --git a/src/main/java/com/mojang/realmsclient/util/TextRenderingUtils.java b/src/main/java/com/mojang/realmsclient/util/TextRenderingUtils.java
index 607305622f68176e270fdecb1efdf15e5fd29b10..20b1e3f15f7830ecf75692880f4314c1782f1bfd 100644
--- a/src/main/java/com/mojang/realmsclient/util/TextRenderingUtils.java
+++ b/src/main/java/com/mojang/realmsclient/util/TextRenderingUtils.java
@@ -11,7 +11,7 @@ public class TextRenderingUtils
 {
     @VisibleForTesting
     protected static List<String> lineBreak(final String debug0) {
-        return Arrays.asList(debug0.split("Â¥Â¥n"));
+        return Arrays.asList(debug0.split("\\n")); // MagmaCube - decompile fix
     }
     
     public static List<Line> decompose(final String debug0, final LineSegment... debug1) {
@@ -25,9 +25,9 @@ public class TextRenderingUtils
     
     private static List<Line> insertLinks(final List<String> debug0, final List<LineSegment> debug1) {
         int debug2 = 0;
-        final List<Line> debug3 = (List<Line>)Lists.newArrayList();
+        final List<Line> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final String debug4 : debug0) {
-            final List<LineSegment> debug5 = (List<LineSegment>)Lists.newArrayList();
+            final List<LineSegment> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
             final List<String> debug6 = split(debug4, "%link");
             for (final String debug7 : debug6) {
                 if ("%link".equals(debug7)) {
@@ -46,7 +46,7 @@ public class TextRenderingUtils
         if (debug1.isEmpty()) {
             throw new IllegalArgumentException("Delimiter cannot be the empty string");
         }
-        final List<String> debug2 = (List<String>)Lists.newArrayList();
+        final List<String> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         int debug3;
         int debug4;
         for (debug3 = 0; (debug4 = debug0.indexOf(debug1, debug3)) != -1; debug3 = debug4 + debug1.length()) {
@@ -129,7 +129,7 @@ public class TextRenderingUtils
         
         @Override
         public String toString() {
-            return "Segment{fullText='" + this.fullText + 'Â¥'' + ", linkTitle='" + this.linkTitle + 'Â¥'' + ", linkUrl='" + this.linkUrl + 'Â¥'' + '}';
+            return "Segment{fullText='" + this.fullText + '\'' + ", linkTitle='" + this.linkTitle + '\'' + ", linkUrl='" + this.linkUrl + '\'' + '}'; // MagmaCube - decompile fix
         }
         
         public String renderedText() {
diff --git a/src/main/java/net/minecraft/CrashReportCategory.java b/src/main/java/net/minecraft/CrashReportCategory.java
index 33d54d55cee871fd93c273919ed2edc8b91dca94..39d31164f639533654c4de20f0cbb4326337b11a 100644
--- a/src/main/java/net/minecraft/CrashReportCategory.java
+++ b/src/main/java/net/minecraft/CrashReportCategory.java
@@ -16,7 +16,7 @@ public class CrashReportCategory
     private StackTraceElement[] stackTrace;
     
     public CrashReportCategory(final CrashReport debug1, final String debug2) {
-        this.entries = (List<Entry>)Lists.newArrayList();
+        this.entries = Lists.newArrayList(); // MagmaCube - decompile fix
         this.stackTrace = new StackTraceElement[0];
         this.report = debug1;
         this.title = debug2;
diff --git a/src/main/java/net/minecraft/FileUtil.java b/src/main/java/net/minecraft/FileUtil.java
index 48d507e799b47105b0226f0ab6ff0ed2f395a0c2..ecc96574db54a0aee7ab3cb1fb197b13ba0e9d1a 100644
--- a/src/main/java/net/minecraft/FileUtil.java
+++ b/src/main/java/net/minecraft/FileUtil.java
@@ -20,7 +20,7 @@ public class FileUtil
         for (final char debug3 : SharedConstants.ILLEGAL_FILE_CHARACTERS) {
             debug1 = debug1.replace(debug3, '_');
         }
-        debug1 = debug1.replaceAll("[./Â¥"]", "_");
+        debug1 = debug1.replaceAll("[./\"]", "_"); // MagmaCube - decompile fix
         if (FileUtil.RESERVED_WINDOWS_FILENAMES.matcher(debug1).matches()) {
             debug1 = "_" + debug1 + "_";
         }
diff --git a/src/main/java/net/minecraft/SharedConstants.java b/src/main/java/net/minecraft/SharedConstants.java
index 97a1e33d93a12fa271bc0ea73d3ed236383f0116..145298cf522d8d7bf2eafa028032b8987f3c36ce 100644
--- a/src/main/java/net/minecraft/SharedConstants.java
+++ b/src/main/java/net/minecraft/SharedConstants.java
@@ -17,7 +17,7 @@ public class SharedConstants
     private static GameVersion CURRENT_VERSION;
     
     public static boolean isAllowedChatCharacter(final char debug0) {
-        return debug0 != 'Â§' && debug0 >= ' ' && debug0 != 'Â¥u007f';
+        return debug0 != 'Â§' && debug0 >= ' ' && debug0 != '\u007f'; // MagmaCube - decompile fix
     }
     
     public static String filterText(final String debug0) {
@@ -41,7 +41,7 @@ public class SharedConstants
         NETTY_LEAK_DETECTION = ResourceLeakDetector.Level.DISABLED;
         MAXIMUM_TICK_TIME_NANOS = Duration.ofMillis(300L).toNanos();
         SharedConstants.CHECK_DATA_FIXER_SCHEMA = true;
-        ILLEGAL_FILE_CHARACTERS = new char[] { '/', 'Â¥n', 'Â¥r', 'Â¥t', 'Â¥0', 'Â¥f', '`', '?', '*', 'Â¥Â¥', '<', '>', '|', 'Â¥"', ':' };
+        ILLEGAL_FILE_CHARACTERS = new char[] { '/', '\n', '\r', '\t', '\0', '\f', '`', '?', '*', '\\', '<', '>', '|', '\"', ':' }; // MagmaCube - decompile fix
         ResourceLeakDetector.setLevel(SharedConstants.NETTY_LEAK_DETECTION);
         CommandSyntaxException.ENABLE_COMMAND_STACK_TRACES = false;
         CommandSyntaxException.BUILT_IN_EXCEPTIONS = (BuiltInExceptionProvider)new BrigadierExceptions();
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 42a5e70902d4a8d3c41e7fb319c0a49acc819c82..079c44831460d20fe33cfc5875b6677b52f81d87 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -39,6 +39,7 @@ import java.nio.file.Files;
 import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.security.PrivilegedActionException;
 import java.time.Instant;
 import java.util.ArrayList;
@@ -96,7 +97,7 @@ public class Util {
     }
 
     public static <T extends Comparable<T>> String getPropertyName(Property<T> debug0, Object debug1) {
-        return debug0.getName((Comparable)debug1);
+        return debug0.getName((T) debug1); // MagmaCube - decompile fix
     }
 
     public static String makeDescriptionId(String debug0, @Nullable ResourceLocation debug1) {
@@ -121,7 +122,7 @@ public class Util {
     private static ExecutorService makeExecutor(String debug0) {
         int debug12 = Mth.clamp(Runtime.getRuntime().availableProcessors() - 1, 1, 7);
         Object debug2 = debug12 <= 0 ? MoreExecutors.newDirectExecutorService() : new ForkJoinPool(debug12, debug1 -> {
-            ForkJoinWorkerThread debug2 = new ForkJoinWorkerThread(debug1){
+            ForkJoinWorkerThread debug2l = new ForkJoinWorkerThread(debug1){ // MagmaCube - decompile fix
 
                 @Override
                 protected void onTermination(Throwable debug1) {
@@ -133,10 +134,10 @@ public class Util {
                     super.onTermination(debug1);
                 }
             };
-            debug2.setName("Worker-" + debug0 + "-" + WORKER_COUNT.getAndIncrement());
-            return debug2;
+            debug2l.setName("Worker-" + debug0 + "-" + WORKER_COUNT.getAndIncrement()); // MagmaCube - decompile fix
+            return debug2l; // MagmaCube - decompile fix
         }, Util::onThreadException, true);
-        return debug2;
+        return (ExecutorService) debug2; // MagmaCube - decompile fix
     }
 
     public static Executor bootstrapExecutor() {
@@ -300,7 +301,7 @@ public class Util {
     }
 
     public static <K> Hash.Strategy<K> identityStrategy() {
-        return IdentityStrategy.INSTANCE;
+        return (Hash.Strategy<K>) IdentityStrategy.INSTANCE; // MagmaCube - decompile fix
     }
 
     public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<? extends V>> debug0) {
@@ -310,11 +311,11 @@ public class Util {
         debug0.forEach(debug32 -> {
             int debug42 = debug12.size();
             debug12.add(null);
-            debug1[debug42] = debug32.whenComplete((debug3, debug4) -> {
+            debug2[debug42] = debug32.whenComplete((debug3l, debug4) -> { // MagmaCube - decompile fix
                 if (debug4 != null) {
                     debug3.completeExceptionally((Throwable)debug4);
                 } else {
-                    debug12.set(debug42, debug3);
+                    debug12.set(debug42, debug3l); // MagmaCube - decompile fix
                 }
             });
         });
@@ -506,11 +507,11 @@ public class Util {
         if (debug2.length != debug1) {
             String debug3 = "Input is not a list of " + debug1 + " ints";
             if (debug2.length >= debug1) {
-                return DataResult.error((String)debug3, (Object)Arrays.copyOf(debug2, debug1));
+                return DataResult.error((String)debug3, Arrays.copyOf(debug2, debug1)); // MagmaCube - decompile fix
             }
             return DataResult.error((String)debug3);
         }
-        return DataResult.success((Object)debug2);
+        return DataResult.success(debug2); // MagmaCube - decompile fix
     }
 
     public static void startTimerHackThread() {
@@ -582,7 +583,15 @@ public class Util {
 
         public void openUrl(URL debug1) {
             try {
-                Process debug2 = AccessController.doPrivileged(() -> Runtime.getRuntime().exec(this.getOpenUrlArguments(debug1)));
+                // MagmaCube start - decompile fix
+                Process debug2 = AccessController.doPrivileged((PrivilegedAction<Process>) () -> {
+                    try {
+                        return Runtime.getRuntime().exec(this.getOpenUrlArguments(debug1));
+                    } catch (IOException e) {
+                        throw new RuntimeException(e);
+                    }
+                });
+                // MagmaCube stop - decompile fix
                 for (String debug4 : IOUtils.readLines((InputStream)debug2.getErrorStream())) {
                     LOGGER.error(debug4);
                 }
@@ -590,7 +599,7 @@ public class Util {
                 debug2.getErrorStream().close();
                 debug2.getOutputStream().close();
             }
-            catch (IOException | PrivilegedActionException debug2) {
+            catch (IOException debug2) { // MagmaCube - decompile fix
                 LOGGER.error("Couldn't open url '{}'", (Object)debug1, (Object)debug2);
             }
         }
diff --git a/src/main/java/net/minecraft/advancements/Advancement.java b/src/main/java/net/minecraft/advancements/Advancement.java
index 35b80476d522d64c3dfc03a7dd30e2454d166860..1f0b170e591a7b3cd8f2e4ace890e326b1f8770a 100644
--- a/src/main/java/net/minecraft/advancements/Advancement.java
+++ b/src/main/java/net/minecraft/advancements/Advancement.java
@@ -41,7 +41,7 @@ public class Advancement
     private final Component chatComponent;
     
     public Advancement(final ResourceLocation debug1, @Nullable final Advancement debug2, @Nullable final DisplayInfo debug3, final AdvancementRewards debug4, final Map<String, Criterion> debug5, final String[][] debug6) {
-        this.children = (Set<Advancement>)Sets.newLinkedHashSet();
+        this.children = Sets.newLinkedHashSet(); // MagmaCube - decompile fix
         this.id = debug1;
         this.display = debug3;
         this.criteria = (Map<String, Criterion>)ImmutableMap.copyOf((Map)debug5);
@@ -58,7 +58,7 @@ public class Advancement
             final Component debug7 = debug3.getTitle();
             final ChatFormatting debug8 = debug3.getFrame().getChatColor();
             final Component debug9 = ComponentUtils.mergeStyles(debug7.copy(), Style.EMPTY.withColor(debug8)).append("Â¥n").append(debug3.getDescription());
-            final Component debug10 = debug7.copy().withStyle(debug1 -> debug1.withHoverEvent(new HoverEvent((HoverEvent.Action<T>)HoverEvent.Action.SHOW_TEXT, (T)debug9)));
+            final Component debug10 = debug7.copy().withStyle(debug1l -> debug1l.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, debug9))); // MagmaCube - decompile fix
             this.chatComponent = ComponentUtils.wrapInSquareBrackets(debug10).withStyle(debug8);
         }
     }
@@ -143,7 +143,7 @@ public class Advancement
         
         private Builder(@Nullable final ResourceLocation debug1, @Nullable final DisplayInfo debug2, final AdvancementRewards debug3, final Map<String, Criterion> debug4, final String[][] debug5) {
             this.rewards = AdvancementRewards.EMPTY;
-            this.criteria = (Map<String, Criterion>)Maps.newLinkedHashMap();
+            this.criteria = Maps.newLinkedHashMap(); // MagmaCube - decompile fix
             this.requirementsStrategy = RequirementsStrategy.AND;
             this.parentId = debug1;
             this.display = debug2;
@@ -154,7 +154,7 @@ public class Advancement
         
         private Builder() {
             this.rewards = AdvancementRewards.EMPTY;
-            this.criteria = (Map<String, Criterion>)Maps.newLinkedHashMap();
+            this.criteria = Maps.newLinkedHashMap(); // MagmaCube - decompile fix
             this.requirementsStrategy = RequirementsStrategy.AND;
         }
         
diff --git a/src/main/java/net/minecraft/advancements/AdvancementList.java b/src/main/java/net/minecraft/advancements/AdvancementList.java
index 7e452394a799a50cc41cc5edd0e09e9aaa0ac95b..54633ae7505418cac978216cfebca95442a9e6af 100644
--- a/src/main/java/net/minecraft/advancements/AdvancementList.java
+++ b/src/main/java/net/minecraft/advancements/AdvancementList.java
@@ -22,9 +22,9 @@ public class AdvancementList
     private Listener listener;
     
     public AdvancementList() {
-        this.advancements = (Map<ResourceLocation, Advancement>)Maps.newHashMap();
-        this.roots = (Set<Advancement>)Sets.newLinkedHashSet();
-        this.tasks = (Set<Advancement>)Sets.newLinkedHashSet();
+        this.advancements = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.roots = Sets.newLinkedHashSet(); // MagmaCube - decompile fix
+        this.tasks = Sets.newLinkedHashSet(); // MagmaCube - decompile fix
     }
     
     private void remove(final Advancement debug1) {
diff --git a/src/main/java/net/minecraft/advancements/AdvancementProgress.java b/src/main/java/net/minecraft/advancements/AdvancementProgress.java
index 7745b171de6b328d38d7667f229c0199e2532923..467f96cf61fb2def4cec3c5506ffd5fe210fe3d5 100644
--- a/src/main/java/net/minecraft/advancements/AdvancementProgress.java
+++ b/src/main/java/net/minecraft/advancements/AdvancementProgress.java
@@ -26,13 +26,13 @@ public class AdvancementProgress implements Comparable<AdvancementProgress>
     private String[][] requirements;
     
     public AdvancementProgress() {
-        this.criteria = (Map<String, CriterionProgress>)Maps.newHashMap();
+        this.criteria = Maps.newHashMap(); // MagmaCube - decompile fix
         this.requirements = new String[0][];
     }
     
     public void update(final Map<String, Criterion> debug1, final String[][] debug2) {
         final Set<String> debug3 = debug1.keySet();
-        this.criteria.entrySet().removeIf(debug1 -> !debug3.contains(debug1.getKey()));
+        this.criteria.entrySet().removeIf(debug1l -> !debug3.contains(debug1l.getKey())); // MagmaCube - decompile fix
         for (final String debug4 : debug3) {
             if (!this.criteria.containsKey(debug4)) {
                 this.criteria.put(debug4, new CriterionProgress());
@@ -155,7 +155,7 @@ public class AdvancementProgress implements Comparable<AdvancementProgress>
     }
     
     public Iterable<String> getRemainingCriteria() {
-        final List<String> debug1 = (List<String>)Lists.newArrayList();
+        final List<String> debug1 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Map.Entry<String, CriterionProgress> debug2 : this.criteria.entrySet()) {
             if (!debug2.getValue().isDone()) {
                 debug1.add(debug2.getKey());
@@ -165,7 +165,7 @@ public class AdvancementProgress implements Comparable<AdvancementProgress>
     }
     
     public Iterable<String> getCompletedCriteria() {
-        final List<String> debug1 = (List<String>)Lists.newArrayList();
+        final List<String> debug1 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Map.Entry<String, CriterionProgress> debug2 : this.criteria.entrySet()) {
             if (debug2.getValue().isDone()) {
                 debug1.add(debug2.getKey());
diff --git a/src/main/java/net/minecraft/advancements/Criterion.java b/src/main/java/net/minecraft/advancements/Criterion.java
index 0548731d8d283a5212e1675fe35ad4a074fc2ba0..2dec2a8d0a9bc05b1ac183997f9b5677f6aa8f55 100644
--- a/src/main/java/net/minecraft/advancements/Criterion.java
+++ b/src/main/java/net/minecraft/advancements/Criterion.java
@@ -43,7 +43,7 @@ public class Criterion
     }
     
     public static Map<String, Criterion> criteriaFromJson(final JsonObject debug0, final DeserializationContext debug1) {
-        final Map<String, Criterion> debug2 = (Map<String, Criterion>)Maps.newHashMap();
+        final Map<String, Criterion> debug2 = Maps.newHashMap(); // MagmaCube - decompile fix
         for (final Map.Entry<String, JsonElement> debug3 : debug0.entrySet()) {
             debug2.put(debug3.getKey(), criterionFromJson(GsonHelper.convertToJsonObject(debug3.getValue(), "criterion"), debug1));
         }
@@ -51,7 +51,7 @@ public class Criterion
     }
     
     public static Map<String, Criterion> criteriaFromNetwork(final FriendlyByteBuf debug0) {
-        final Map<String, Criterion> debug = (Map<String, Criterion>)Maps.newHashMap();
+        final Map<String, Criterion> debug = Maps.newHashMap(); // MagmaCube - decompile fix
         for (int debug2 = debug0.readVarInt(), debug3 = 0; debug3 < debug2; ++debug3) {
             debug.put(debug0.readUtf(32767), criterionFromNetwork(debug0));
         }
diff --git a/src/main/java/net/minecraft/advancements/RequirementsStrategy.java b/src/main/java/net/minecraft/advancements/RequirementsStrategy.java
index 903569b4f9ede0a55bec5aa43f5bddf391f86582..8c13964a38a692262cf774406cda32d7f4cd33ab 100644
--- a/src/main/java/net/minecraft/advancements/RequirementsStrategy.java
+++ b/src/main/java/net/minecraft/advancements/RequirementsStrategy.java
@@ -6,26 +6,18 @@ import java.util.Collection;
 public interface RequirementsStrategy
 {
     public static final RequirementsStrategy AND = debug0 -> {
-        debug = new String[debug0.size()][];
-        debug2 = 0;
+        // MagmaCube start - decompile fix
+        String[][] debug = new String[debug0.size()][];
+        int debug2 = 0;
         debug0.iterator();
-        while (iterator.hasNext()) {
-            debug3 = iterator.next();
+        for (String s : debug0) {
             debug2++;
-            o[n] = new String[] { debug3 };
+            debug[debug2] = new String[] { s };
+            // MagmaCube end - decompile fix
         }
         return debug;
     };
     public static final RequirementsStrategy OR = debug0 -> new String[][] { debug0.toArray(new String[0]) };
     
     String[][] createRequirements(final Collection<String> p0);
-    
-    default static {
-        final String[][] debug;
-        int debug2;
-        final Iterator<String> iterator;
-        String debug3;
-        final Object o;
-        final int n;
-    }
 }
diff --git a/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java b/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java
index ce1dc85bc9f90e088fa080e5ef94c0e89befbebc..5717bbeb66b13c0b0f1147748c1a309efbce4844 100644
--- a/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java
@@ -10,7 +10,7 @@ import net.minecraft.world.level.block.Block;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class BeeNestDestroyedTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class BeeNestDestroyedTrigger extends SimpleCriterionTrigger<BeeNestDestroyedTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -30,18 +30,15 @@ public class BeeNestDestroyedTrigger extends SimpleCriterionTrigger<TriggerInsta
     private static Block deserializeBlock(final JsonObject debug0) {
         if (debug0.has("block")) {
             final ResourceLocation debug = new ResourceLocation(GsonHelper.getAsString(debug0, "block"));
-            final Object o;
-            final Object obj;
             return Registry.BLOCK.getOptional(debug).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown block type '" + obj + "'");
-                return o;
+                throw new JsonSyntaxException("Unknown block type '" + debug + "'"); // MagmaCube - decompile fix
             });
         }
         return null;
     }
     
     public void trigger(final ServerPlayer debug1, final Block debug2, final ItemStack debug3, final int debug4) {
-        this.trigger(debug1, debug3 -> debug3.matches(debug2, debug3, debug4));
+        this.trigger(debug1, debug3l -> debug3l.matches(debug2, debug3, debug4)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java b/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java
index 01f6911f0fefd47a2b6226c876f8f675fee8e5aa..9f57ee0685f1369c399aa42e5821d7d3a7c12631 100644
--- a/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java
@@ -9,7 +9,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class BredAnimalsTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class BredAnimalsTrigger extends SimpleCriterionTrigger<BredAnimalsTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -29,7 +29,7 @@ public class BredAnimalsTrigger extends SimpleCriterionTrigger<TriggerInstance>
         final LootContext debug5 = EntityPredicate.createContext(debug1, debug2);
         final LootContext debug6 = EntityPredicate.createContext(debug1, debug3);
         final LootContext debug7 = (debug4 != null) ? EntityPredicate.createContext(debug1, debug4) : null;
-        this.trigger(debug1, debug3 -> debug3.matches(debug5, debug6, debug7));
+        this.trigger(debug1, debug3l -> debug3l.matches(debug5, debug6, debug7)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java b/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java
index 3e60363a9538685357f3c1218b2219f8e531e64f..7a8e8b98cd42df69035bcef2e964463bdc9eeb1a 100644
--- a/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java
@@ -9,7 +9,7 @@ import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class BrewedPotionTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class BrewedPotionTrigger extends SimpleCriterionTrigger<BrewedPotionTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -22,18 +22,15 @@ public class BrewedPotionTrigger extends SimpleCriterionTrigger<TriggerInstance>
         Potion debug4 = null;
         if (debug1.has("potion")) {
             final ResourceLocation debug5 = new ResourceLocation(GsonHelper.getAsString(debug1, "potion"));
-            final Object o;
-            final Object obj;
             debug4 = Registry.POTION.getOptional(debug5).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown potion '" + obj + "'");
-                return o;
+                throw new JsonSyntaxException("Unknown potion '" + debug5 + "'"); // MagmaCube - decompile fix
             });
         }
         return new TriggerInstance(debug2, debug4);
     }
     
     public void trigger(final ServerPlayer debug1, final Potion debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java
index 9367db0c014f9f881e809f043029a8e9b8f316e0..72ca0c06c10e7048ab0a3040c176929b0425dd86 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java
@@ -9,7 +9,7 @@ import net.minecraft.core.Registry;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ChangeDimensionTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ChangeDimensionTrigger extends SimpleCriterionTrigger<ChangeDimensionTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -25,7 +25,7 @@ public class ChangeDimensionTrigger extends SimpleCriterionTrigger<TriggerInstan
     }
     
     public void trigger(final ServerPlayer debug1, final ResourceKey<Level> debug2, final ResourceKey<Level> debug3) {
-        this.trigger(debug1, debug2 -> debug2.matches(debug2, debug3));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug2, debug3)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java
index aa3bb6288769e029552ffece19d9e5d741c64d03..1fcb91cd9b032a88da7e71501c0ef39303e2e3a9 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java
@@ -22,7 +22,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.storage.loot.LootContext;
 
 public class ChanneledLightningTrigger
-extends SimpleCriterionTrigger<TriggerInstance> {
+extends SimpleCriterionTrigger<ChanneledLightningTrigger.TriggerInstance> { // MagmaCube - decompile fix
     private static final ResourceLocation ID = new ResourceLocation("channeled_lightning");
 
     @Override
@@ -30,21 +30,14 @@ extends SimpleCriterionTrigger<TriggerInstance> {
         return ID;
     }
 
-    @Override
     public TriggerInstance createInstance(JsonObject debug1, EntityPredicate.Composite debug2, DeserializationContext debug3) {
         EntityPredicate.Composite[] debug4 = EntityPredicate.Composite.fromJsonArray(debug1, "victims", debug3);
         return new TriggerInstance(debug2, debug4);
     }
 
-    @Override
     public void trigger(ServerPlayer debug12, Collection<? extends Entity> debug2) {
         List debug3 = debug2.stream().map(debug1 -> EntityPredicate.createContext(debug12, debug1)).collect(Collectors.toList());
-        this.trigger(debug12, (T debug1) -> debug1.matches(debug3));
-    }
-
-    @Override
-    public /* synthetic */ AbstractCriterionTriggerInstance createInstance(JsonObject jsonObject, EntityPredicate.Composite composite, DeserializationContext deserializationContext) {
-        return this.createInstance(jsonObject, composite, deserializationContext);
+        this.trigger(debug12, (debug1) -> debug1.matches(debug3));
     }
 
     public static class TriggerInstance
diff --git a/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java
index d1a7db771a315f8c79d0720f9d07b641c4f8e817..a43ace7ea6ef84d6767525580c11f38486e402ab 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ConstructBeaconTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ConstructBeaconTrigger extends SimpleCriterionTrigger<ConstructBeaconTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -20,7 +20,7 @@ public class ConstructBeaconTrigger extends SimpleCriterionTrigger<TriggerInstan
     }
     
     public void trigger(final ServerPlayer debug1, final BeaconBlockEntity debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2));
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java
index 9e177392706d10157e94673b50de19534f0c27a6..2afe380fc568ed3bfc0bb936294fc5695dff3beb 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java
@@ -9,7 +9,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ConsumeItemTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ConsumeItemTrigger extends SimpleCriterionTrigger<ConsumeItemTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -23,7 +23,7 @@ public class ConsumeItemTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java b/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
index 5004ccd4dc0678e3aea95f405b0f391f25573a75..d6f7489dccbc75f280b0363d8e1d3e8b1a562054 100644
--- a/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
@@ -8,7 +8,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class CuredZombieVillagerTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class CuredZombieVillagerTrigger extends SimpleCriterionTrigger<CuredZombieVillagerTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -26,7 +26,7 @@ public class CuredZombieVillagerTrigger extends SimpleCriterionTrigger<TriggerIn
     public void trigger(final ServerPlayer debug1, final Zombie debug2, final Villager debug3) {
         final LootContext debug4 = EntityPredicate.createContext(debug1, debug2);
         final LootContext debug5 = EntityPredicate.createContext(debug1, debug3);
-        this.trigger(debug1, debug2 -> debug2.matches(debug4, debug5));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug4, debug5)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/DeserializationContext.java b/src/main/java/net/minecraft/advancements/critereon/DeserializationContext.java
index 9afc41f32dcf2edeb9bea789d745e5c834c37713..7c40b9a354190145253718cdd61bafb50dd66812 100644
--- a/src/main/java/net/minecraft/advancements/critereon/DeserializationContext.java
+++ b/src/main/java/net/minecraft/advancements/critereon/DeserializationContext.java
@@ -31,7 +31,7 @@ public class DeserializationContext
         final ValidationContext debug5 = new ValidationContext(debug3, this.predicateManager::get, debug0 -> null);
         for (final LootItemCondition debug6 : debug4) {
             debug6.validate(debug5);
-            debug5.getProblems().forEach((debug1, debug2) -> DeserializationContext.LOGGER.warn("Found validation problem in advancement trigger {}/{}: {}", (Object)debug2, (Object)debug1, (Object)debug2));
+            debug5.getProblems().forEach((debug1l, debug2l) -> DeserializationContext.LOGGER.warn("Found validation problem in advancement trigger {}/{}: {}", (Object)debug2l, (Object)debug1l, (Object)debug2l)); // MagmaCube - decompile fix
         }
         return debug4;
     }
diff --git a/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java
index 3a23a9b726a6c235602656fa769be51d2de0d963..6799b3ab28770e7369ae71d9e4e65511876e3ec5 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class EffectsChangedTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class EffectsChangedTrigger extends SimpleCriterionTrigger<EffectsChangedTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -20,7 +20,7 @@ public class EffectsChangedTrigger extends SimpleCriterionTrigger<TriggerInstanc
     }
     
     public void trigger(final ServerPlayer debug1) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug1));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug1)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java
index b398e5e00667ab1f294b66db8b8c332bfd75b1e5..fdccc199ea53abf6b1b9275bc0713f7c05a0cdc4 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class EnchantedItemTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class EnchantedItemTrigger extends SimpleCriterionTrigger<EnchantedItemTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -21,7 +21,7 @@ public class EnchantedItemTrigger extends SimpleCriterionTrigger<TriggerInstance
     }
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2, final int debug3) {
-        this.trigger(debug1, debug2 -> debug2.matches(debug2, debug3));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug2, debug3)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/EnchantmentPredicate.java b/src/main/java/net/minecraft/advancements/critereon/EnchantmentPredicate.java
index 1247972a205e59492ce8787e528000960e0f580f..03db580079a8f54ec3ad5b0c8511509d49f89574 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EnchantmentPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EnchantmentPredicate.java
@@ -71,11 +71,8 @@ public class EnchantmentPredicate
         Enchantment debug2 = null;
         if (debug.has("enchantment")) {
             final ResourceLocation debug3 = new ResourceLocation(GsonHelper.getAsString(debug, "enchantment"));
-            final Object o;
-            final Object obj;
             debug2 = Registry.ENCHANTMENT.getOptional(debug3).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown enchantment '" + obj + "'");
-                return o;
+                return new JsonSyntaxException("Unknown enchantment '" + debug3 + "'"); // MagmaCube - decompile fix
             });
         }
         final MinMaxBounds.Ints debug4 = MinMaxBounds.Ints.fromJson(debug.get("levels"));
diff --git a/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java
index 997e47ec0924c3e63d238256e69378ed45aa9d66..4fcf7ac2b7f297d94ce426fd59ec219a6baf6726 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java
@@ -11,7 +11,7 @@ import com.google.gson.JsonSyntaxException;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class EnterBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class EnterBlockTrigger extends SimpleCriterionTrigger<EnterBlockTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -24,11 +24,8 @@ public class EnterBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
         final Block debug4 = deserializeBlock(debug1);
         final StatePropertiesPredicate debug5 = StatePropertiesPredicate.fromJson(debug1.get("state"));
         if (debug4 != null) {
-            final JsonSyntaxException ex;
-            final Object obj;
-            debug5.checkState(debug4.getStateDefinition(), debug1 -> {
-                new JsonSyntaxException("Block " + obj + " has no property " + debug1);
-                throw ex;
+            debug5.checkState(debug4.getStateDefinition(), debug12 -> { // MagmaCube - decompile fix
+                throw new JsonSyntaxException("Block " + debug4 + " has no property " + debug12); // MagmaCube - decompile fix
             });
         }
         return new TriggerInstance(debug2, debug4, debug5);
@@ -38,18 +35,15 @@ public class EnterBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
     private static Block deserializeBlock(final JsonObject debug0) {
         if (debug0.has("block")) {
             final ResourceLocation debug = new ResourceLocation(GsonHelper.getAsString(debug0, "block"));
-            final Object o;
-            final Object obj;
             return Registry.BLOCK.getOptional(debug).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown block type '" + obj + "'");
-                return o;
+                throw new JsonSyntaxException("Unknown block type '" + debug + "'"); // MagmaCube - decompile fix
             });
         }
         return null;
     }
     
     public void trigger(final ServerPlayer debug1, final BlockState debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java
index bdafe053cf5e1596d91f4b2eb276f7a5dbbd7606..58c27e78a313f98c8412cdc8fb50920f99ab6671 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class EntityHurtPlayerTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class EntityHurtPlayerTrigger extends SimpleCriterionTrigger<EntityHurtPlayerTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -20,7 +20,7 @@ public class EntityHurtPlayerTrigger extends SimpleCriterionTrigger<TriggerInsta
     }
     
     public void trigger(final ServerPlayer debug1, final DamageSource debug2, final float debug3, final float debug4, final boolean debug5) {
-        this.trigger(debug1, debug5 -> debug5.matches(debug1, debug2, debug3, debug4, debug5));
+        this.trigger(debug1, debug5l -> debug5l.matches(debug1, debug2, debug3, debug4, debug5)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityPredicate.java b/src/main/java/net/minecraft/advancements/critereon/EntityPredicate.java
index 7011ac1f0d242012f3af4ccb278f528bcae32d14..cb15d199918eb1c989015c572f0dad39bb4879ba 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityPredicate.java
@@ -300,7 +300,7 @@ public class EntityPredicate
         }
         
         public EntityPredicate build() {
-            return new EntityPredicate(this.entityType, this.distanceToPlayer, this.location, this.effects, this.nbt, this.flags, this.equipment, this.player, this.fishingHook, this.vehicle, this.targetedEntity, this.team, this.catType, null);
+            return new EntityPredicate(this.entityType, this.distanceToPlayer, this.location, this.effects, this.nbt, this.flags, this.equipment, this.player, this.fishingHook, this.vehicle, this.targetedEntity, this.team, this.catType); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java b/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java
index 344e999ffed581706269ce7733752c91542998a6..d638cd898bc1b680e1a473809ff0cbf8fc2c1104 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java
@@ -32,11 +32,8 @@ public abstract class EntityTypePredicate
             return new TagPredicate(SerializationTags.getInstance().getEntityTypes().getTagOrEmpty(debug2));
         }
         final ResourceLocation debug2 = new ResourceLocation(debug);
-        final Object o;
-        final Object obj;
         final EntityType<?> debug3 = Registry.ENTITY_TYPE.getOptional(debug2).orElseThrow(() -> {
-            new JsonSyntaxException("Unknown entity type '" + obj + "', valid types are: " + EntityTypePredicate.COMMA_JOINER.join((Iterable)Registry.ENTITY_TYPE.keySet()));
-            return o;
+            return new JsonSyntaxException("Unknown entity type '" + debug2 + "', valid types are: " + EntityTypePredicate.COMMA_JOINER.join((Iterable)Registry.ENTITY_TYPE.keySet())); // MagmaCube - decompile fix
         });
         return new TypePredicate(debug3);
     }
diff --git a/src/main/java/net/minecraft/advancements/critereon/FilledBucketTrigger.java b/src/main/java/net/minecraft/advancements/critereon/FilledBucketTrigger.java
index 8df3fd2e52e8f45d5fe1669e357e7b438b96e31c..df28c947b47de7fdbce73660f0e6b7bd3f19b250 100644
--- a/src/main/java/net/minecraft/advancements/critereon/FilledBucketTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/FilledBucketTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class FilledBucketTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class FilledBucketTrigger extends SimpleCriterionTrigger<FilledBucketTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -20,7 +20,7 @@ public class FilledBucketTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java b/src/main/java/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java
index 3a42e1e8e9a25ea41c076d2cefd1e1ecc7e8f094..2d1f1c2f32c5761169a225ec073588d3f73a8221 100644
--- a/src/main/java/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java
@@ -12,7 +12,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class FishingRodHookedTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class FishingRodHookedTrigger extends SimpleCriterionTrigger<FishingRodHookedTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -30,7 +30,7 @@ public class FishingRodHookedTrigger extends SimpleCriterionTrigger<TriggerInsta
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2, final FishingHook debug3, final Collection<ItemStack> debug4) {
         final LootContext debug5 = EntityPredicate.createContext(debug1, (debug3.getHookedIn() != null) ? debug3.getHookedIn() : debug3);
-        this.trigger(debug1, debug3 -> debug3.matches(debug2, debug5, debug4));
+        this.trigger(debug1, debug3l -> debug3l.matches(debug2, debug5, debug4)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ImpossibleTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ImpossibleTrigger.java
index ccdca0af0abfc4cc1a2b7d5e099dabb06724977b..4ff9e80e61580af168900dcb772bb2e8c7889a87 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ImpossibleTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ImpossibleTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.server.PlayerAdvancements;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.advancements.CriterionTrigger;
 
-public class ImpossibleTrigger implements CriterionTrigger<TriggerInstance>
+public class ImpossibleTrigger implements CriterionTrigger<ImpossibleTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java b/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
index f5dac342a3fb5a2035a9ae32695c174711090dc3..1784e226ee7a1d0fb9ed77586c5881ffaa9050e5 100644
--- a/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
@@ -14,8 +14,10 @@ import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.level.lighting.LayerLightSectionStorage;
+
+public class InventoryChangeTrigger extends SimpleCriterionTrigger<InventoryChangeTrigger.TriggerInstance> // MagmaCube - decompile fix
 
-public class InventoryChangeTrigger extends SimpleCriterionTrigger<TriggerInstance>
 {
     private static final ResourceLocation ID;
     
@@ -53,7 +55,7 @@ public class InventoryChangeTrigger extends SimpleCriterionTrigger<TriggerInstan
     }
     
     private void trigger(final ServerPlayer debug1, final Inventory debug2, final ItemStack debug3, final int debug4, final int debug5, final int debug6) {
-        this.trigger(debug1, debug5 -> debug5.matches(debug2, debug3, debug4, debug5, debug6));
+        this.trigger(debug1, debug5l -> debug5l.matches(debug2, debug3, debug4, debug5, debug6)); // MagmaCube - decompile fix
     }
     
     static {
@@ -131,7 +133,7 @@ public class InventoryChangeTrigger extends SimpleCriterionTrigger<TriggerInstan
                 }
                 final ItemStack debug10 = debug1.getItem(debug9);
                 if (!debug10.isEmpty()) {
-                    debug7.removeIf(debug1 -> debug1.matches(debug10));
+                    debug7.removeIf(debug1l -> debug1l.matches(debug10)); // MagmaCube - decompile fix
                 }
             }
             return debug7.isEmpty();
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java
index df3bba17172e7f490ae00715b8860eb0a1d05c62..351ef838da90e1e0809657d7860df38fa4d0ff71 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ItemDurabilityTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ItemDurabilityTrigger extends SimpleCriterionTrigger<ItemDurabilityTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -22,7 +22,7 @@ public class ItemDurabilityTrigger extends SimpleCriterionTrigger<TriggerInstanc
     }
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2, final int debug3) {
-        this.trigger(debug1, debug2 -> debug2.matches(debug2, debug3));
+        this.trigger(debug1, debug2l -> debug2l.item.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemPickedUpByEntityTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ItemPickedUpByEntityTrigger.java
index b14eae3742b5580e5bec06baac6811e3009e5e9f..d651af4b16d1f2aec13e6382a8a56b49aab93468 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemPickedUpByEntityTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemPickedUpByEntityTrigger.java
@@ -7,7 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ItemPickedUpByEntityTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ItemPickedUpByEntityTrigger extends SimpleCriterionTrigger<ItemPickedUpByEntityTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -25,7 +25,7 @@ public class ItemPickedUpByEntityTrigger extends SimpleCriterionTrigger<TriggerI
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2, final Entity debug3) {
         final LootContext debug4 = EntityPredicate.createContext(debug1, debug3);
-        this.trigger(debug1, debug3 -> debug3.matches(debug1, debug2, debug4));
+        this.trigger(debug1, debug3l -> debug3l.matches(debug1, debug2, debug4)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java b/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
index 102946a5ae4ad02cc35e51fddb7865c386699908..80892c377f347a5089b925656798967bad275ac5 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
@@ -118,11 +118,8 @@ public class ItemPredicate
         Item debug5 = null;
         if (debug.has("item")) {
             final ResourceLocation debug6 = new ResourceLocation(GsonHelper.getAsString(debug, "item"));
-            final Object o;
-            final Object obj;
             debug5 = Registry.ITEM.getOptional(debug6).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown item id '" + obj + "'");
-                return o;
+                return new JsonSyntaxException("Unknown item id '" + debug6 + "'"); // MagmaCube - decompile fix
             });
         }
         Tag<Item> debug7 = null;
@@ -136,11 +133,8 @@ public class ItemPredicate
         Potion debug9 = null;
         if (debug.has("potion")) {
             final ResourceLocation debug10 = new ResourceLocation(GsonHelper.getAsString(debug, "potion"));
-            final Object o2;
-            final Object obj2;
             debug9 = Registry.POTION.getOptional(debug10).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown potion '" + obj2 + "'");
-                return o2;
+                return new JsonSyntaxException("Unknown potion '" + debug10 + "'"); // MagmaCube - decompile fix
             });
         }
         final EnchantmentPredicate[] debug11 = EnchantmentPredicate.fromJsonArray(debug.get("enchantments"));
@@ -213,8 +207,8 @@ public class ItemPredicate
         private NbtPredicate nbt;
         
         private Builder() {
-            this.enchantments = (List<EnchantmentPredicate>)Lists.newArrayList();
-            this.storedEnchantments = (List<EnchantmentPredicate>)Lists.newArrayList();
+            this.enchantments = Lists.newArrayList(); // MagmaCube - decompile fix
+            this.storedEnchantments = Lists.newArrayList(); // MagmaCube - decompile fix
             this.count = MinMaxBounds.Ints.ANY;
             this.durability = MinMaxBounds.Ints.ANY;
             this.nbt = NbtPredicate.ANY;
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemUsedOnBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ItemUsedOnBlockTrigger.java
index 2c7b9ddef7443ae634f9b9e8d1645a85b6e61cb1..c8cd9bbb05c41a519b3e6f9256471c9ee9ed0ccd 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemUsedOnBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemUsedOnBlockTrigger.java
@@ -8,7 +8,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ItemUsedOnBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ItemUsedOnBlockTrigger extends SimpleCriterionTrigger<ItemUsedOnBlockTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/KilledByCrossbowTrigger.java b/src/main/java/net/minecraft/advancements/critereon/KilledByCrossbowTrigger.java
index b36e6f0f60e3227d612bd75a53153db19a4d460d..5f8b161f1e6f1292f13389f4b63781641cb3819d 100644
--- a/src/main/java/net/minecraft/advancements/critereon/KilledByCrossbowTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/KilledByCrossbowTrigger.java
@@ -13,7 +13,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class KilledByCrossbowTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class KilledByCrossbowTrigger extends SimpleCriterionTrigger<KilledByCrossbowTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -29,13 +29,13 @@ public class KilledByCrossbowTrigger extends SimpleCriterionTrigger<TriggerInsta
     }
     
     public void trigger(final ServerPlayer debug1, final Collection<Entity> debug2) {
-        final List<LootContext> debug3 = (List<LootContext>)Lists.newArrayList();
-        final Set<EntityType<?>> debug4 = (Set<EntityType<?>>)Sets.newHashSet();
+        final List<LootContext> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
+        final Set<EntityType<?>> debug4 = Sets.newHashSet(); // MagmaCube - decompile fix
         for (final Entity debug5 : debug2) {
             debug4.add(debug5.getType());
             debug3.add(EntityPredicate.createContext(debug1, debug5));
         }
-        this.trigger(debug1, debug2 -> debug2.matches(debug3, debug4.size()));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug3, debug4.size()));
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java b/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java
index b377f998c24b711570cece2d2fb1e099e6b7378f..29736be6dc252b5f547b7ad99335c4f1a0e6391f 100644
--- a/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java
@@ -8,7 +8,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class KilledTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class KilledTrigger extends SimpleCriterionTrigger<KilledTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private final ResourceLocation id;
     
@@ -27,7 +27,7 @@ public class KilledTrigger extends SimpleCriterionTrigger<TriggerInstance>
     
     public void trigger(final ServerPlayer debug1, final Entity debug2, final DamageSource debug3) {
         final LootContext debug4 = EntityPredicate.createContext(debug1, debug2);
-        this.trigger(debug1, debug3 -> debug3.matches(debug1, debug4, debug3));
+        this.trigger(debug1, debug3l -> debug3l.matches(debug1, debug4, debug3)); // MagmaCube - decompile fix
     }
     
     public static class TriggerInstance extends AbstractCriterionTriggerInstance
diff --git a/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java b/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java
index 38817fd75f586d75b510679967d8c24703974f73..9a996e45ee15bb696625858e3e34fa3c7c3aa2b2 100644
--- a/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class LevitationTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class LevitationTrigger extends SimpleCriterionTrigger<LevitationTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -21,7 +21,7 @@ public class LevitationTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1, final Vec3 debug2, final int debug3) {
-        this.trigger(debug1, debug3 -> debug3.matches(debug1, debug2, debug3));
+        this.trigger(debug1, debug3l -> debug3l.matches(debug1, debug2, debug3)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/LocationPredicate.java b/src/main/java/net/minecraft/advancements/critereon/LocationPredicate.java
index 4a5975d876440e7f5725dc63fde039cf710fe6b8..d4d91c881d7afe67c6bfc99cf8fb72b676da7eb8 100644
--- a/src/main/java/net/minecraft/advancements/critereon/LocationPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/LocationPredicate.java
@@ -134,7 +134,7 @@ public class LocationPredicate {
             debug12.add("position", (JsonElement)debug2);
         }
         if (this.dimension != null) {
-            Level.RESOURCE_KEY_CODEC.encodeStart((DynamicOps)JsonOps.INSTANCE, this.dimension).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.add("dimension", debug1));
+            Level.RESOURCE_KEY_CODEC.encodeStart(JsonOps.INSTANCE, this.dimension).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.add("dimension", debug1)); // MagmaCube - decompile fix
         }
         if (this.feature != null) {
             debug12.addProperty("feature", this.feature.getFeatureName());
@@ -161,18 +161,18 @@ public class LocationPredicate {
         MinMaxBounds.Floats debug3 = MinMaxBounds.Floats.fromJson(debug2.get("x"));
         MinMaxBounds.Floats debug4 = MinMaxBounds.Floats.fromJson(debug2.get("y"));
         MinMaxBounds.Floats debug5 = MinMaxBounds.Floats.fromJson(debug2.get("z"));
-        ResourceKey debug6 = debug1.has("dimension") ? (ResourceKey)ResourceLocation.CODEC.parse((DynamicOps)JsonOps.INSTANCE, (Object)debug1.get("dimension")).resultOrPartial(((Logger)LOGGER)::error).map(debug0 -> ResourceKey.create(Registry.DIMENSION_REGISTRY, debug0)).orElse(null) : null;
+        ResourceKey debug6 = debug1.has("dimension") ? (ResourceKey)ResourceLocation.CODEC.parse(JsonOps.INSTANCE, debug1.get("dimension")).resultOrPartial(((Logger)LOGGER)::error).map(debug0 -> ResourceKey.create(Registry.DIMENSION_REGISTRY, debug0)).orElse(null) : null; // MagmaCube - decompile fix
         StructureFeature debug7 = debug1.has("feature") ? (StructureFeature)StructureFeature.STRUCTURES_REGISTRY.get((Object)GsonHelper.getAsString(debug1, "feature")) : null;
         ResourceKey<Biome> debug8 = null;
         if (debug1.has("biome")) {
             debug9 = new ResourceLocation(GsonHelper.getAsString(debug1, "biome"));
             debug8 = ResourceKey.create(Registry.BIOME_REGISTRY, debug9);
         }
-        debug9 = debug1.has("smokey") ? Boolean.valueOf(debug1.get("smokey").getAsBoolean()) : null;
+        Boolean debug9b = debug1.has("smokey") ? Boolean.valueOf(debug1.get("smokey").getAsBoolean()) : null; // MagmaCube - decompile fix
         LightPredicate debug10 = LightPredicate.fromJson(debug1.get("light"));
         BlockPredicate debug11 = BlockPredicate.fromJson(debug1.get("block"));
         FluidPredicate debug12 = FluidPredicate.fromJson(debug1.get("fluid"));
-        return new LocationPredicate(debug3, debug4, debug5, debug8, debug7, debug6, (Boolean)((Object)debug9), debug10, debug11, debug12);
+        return new LocationPredicate(debug3, debug4, debug5, debug8, debug7, debug6, (Boolean)((Object)debug9b), debug10, debug11, debug12); // MagmaCube - decompile fix
     }
 
     public static class Builder {
diff --git a/src/main/java/net/minecraft/advancements/critereon/LocationTrigger.java b/src/main/java/net/minecraft/advancements/critereon/LocationTrigger.java
index 317368d0df01a1cdcfc35d5feee666ea8413d04f..5e808fef0e128b530f4b399183f9e077dadc6b6b 100644
--- a/src/main/java/net/minecraft/advancements/critereon/LocationTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/LocationTrigger.java
@@ -8,7 +8,7 @@ import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class LocationTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class LocationTrigger extends SimpleCriterionTrigger<LocationTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private final ResourceLocation id;
     
@@ -28,7 +28,7 @@ public class LocationTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug1.getLevel(), debug1.getX(), debug1.getY(), debug1.getZ()));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug1.getLevel(), debug1.getX(), debug1.getY(), debug1.getZ())); // MagmaCube - decompile fix
     }
     
     public static class TriggerInstance extends AbstractCriterionTriggerInstance
diff --git a/src/main/java/net/minecraft/advancements/critereon/LootTableTrigger.java b/src/main/java/net/minecraft/advancements/critereon/LootTableTrigger.java
index 5a3b425d46bcc350912ae2bffc7c28a5700de119..0e46bc6f8b1a7e29e952c42bed2997a5a2c8e9ef 100644
--- a/src/main/java/net/minecraft/advancements/critereon/LootTableTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/LootTableTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class LootTableTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class LootTableTrigger extends SimpleCriterionTrigger<LootTableTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -21,7 +21,7 @@ public class LootTableTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1, final ResourceLocation debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug12 -> debug12.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/MinMaxBounds.java b/src/main/java/net/minecraft/advancements/critereon/MinMaxBounds.java
index be75fce756810d9a2a6866917ed289f1d6ecab0f..3a77e1509a67896b11fea167ef49e6c5d1a8cdb8 100644
--- a/src/main/java/net/minecraft/advancements/critereon/MinMaxBounds.java
+++ b/src/main/java/net/minecraft/advancements/critereon/MinMaxBounds.java
@@ -152,7 +152,7 @@ public abstract class MinMaxBounds<T extends Number>
         
         @Nullable
         private static Long squareOpt(@Nullable final Integer debug0) {
-            return (Long)((debug0 == null) ? null : (debug0 * debug0));
+            return (Long)((debug0 == null) ? null : (long) (debug0 * debug0)); // MagmaCube - decompile fix
         }
         
         private Ints(@Nullable final Integer debug1, @Nullable final Integer debug2) {
@@ -178,7 +178,7 @@ public abstract class MinMaxBounds<T extends Number>
         }
         
         public static Ints fromReader(final StringReader debug0) throws CommandSyntaxException {
-            return fromReader(debug0, debug0 -> debug0);
+            return fromReader(debug0, debug0l -> debug0l); // MagmaCube - decompile fix
         }
         
         public static Ints fromReader(final StringReader debug0, final Function<Integer, Integer> debug1) throws CommandSyntaxException {
@@ -205,7 +205,7 @@ public abstract class MinMaxBounds<T extends Number>
         
         @Nullable
         private static Double squareOpt(@Nullable final Float debug0) {
-            return (Double)((debug0 == null) ? null : (debug0 * debug0));
+            return (Double)((debug0 == null) ? null : (double) (debug0 * debug0)); // MagmaCube - decompile fix
         }
         
         private Floats(@Nullable final Float debug1, @Nullable final Float debug2) {
@@ -231,7 +231,7 @@ public abstract class MinMaxBounds<T extends Number>
         }
         
         public static Floats fromReader(final StringReader debug0) throws CommandSyntaxException {
-            return fromReader(debug0, debug0 -> debug0);
+            return fromReader(debug0, debug0l -> debug0l); // MagmaCube - decompile fix
         }
         
         public static Floats fromReader(final StringReader debug0, final Function<Float, Float> debug1) throws CommandSyntaxException {
diff --git a/src/main/java/net/minecraft/advancements/critereon/MobEffectsPredicate.java b/src/main/java/net/minecraft/advancements/critereon/MobEffectsPredicate.java
index 6a5cc2bb3f814bddc7282ea7d3e4ab784c4d5786..36deeee80f1dc85e54c476f49684f93c6f4a3474 100644
--- a/src/main/java/net/minecraft/advancements/critereon/MobEffectsPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/MobEffectsPredicate.java
@@ -61,14 +61,11 @@ public class MobEffectsPredicate
             return MobEffectsPredicate.ANY;
         }
         final JsonObject debug = GsonHelper.convertToJsonObject(debug0, "effects");
-        final Map<MobEffect, MobEffectInstancePredicate> debug2 = (Map<MobEffect, MobEffectInstancePredicate>)Maps.newLinkedHashMap();
+        final Map<MobEffect, MobEffectInstancePredicate> debug2 = Maps.newLinkedHashMap(); // MagmaCube - decompile fix
         for (final Map.Entry<String, JsonElement> debug3 : debug.entrySet()) {
             final ResourceLocation debug4 = new ResourceLocation(debug3.getKey());
-            final Object o;
-            final Object obj;
             final MobEffect debug5 = Registry.MOB_EFFECT.getOptional(debug4).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown effect '" + obj + "'");
-                return o;
+                return new JsonSyntaxException("Unknown effect '" + debug4 + "'"); // MagmaCube - decompile fix
             });
             final MobEffectInstancePredicate debug6 = MobEffectInstancePredicate.fromJson(GsonHelper.convertToJsonObject(debug3.getValue(), debug3.getKey()));
             debug2.put(debug5, debug6);
diff --git a/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java b/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java
index d91639587c77da8720be6528b141e733ae96426b..4e6d81d008636ceec8c0a6aa0812cfa4d368ddbc 100644
--- a/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class NetherTravelTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class NetherTravelTrigger extends SimpleCriterionTrigger<NetherTravelTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -23,7 +23,7 @@ public class NetherTravelTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1, final Vec3 debug2) {
-        this.trigger(debug1, debug2 -> debug2.matches(debug1.getLevel(), debug2, debug1.getX(), debug1.getY(), debug1.getZ()));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug1.getLevel(), debug2, debug1.getX(), debug1.getY(), debug1.getZ())); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java
index 42926ceead8d90caa0d5f031498628b3fc10f527..f34793c6c219e067531ec37ce8e9fe0e44c3ea4e 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java
@@ -14,7 +14,7 @@ import com.google.gson.JsonSyntaxException;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class PlacedBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class PlacedBlockTrigger extends SimpleCriterionTrigger<PlacedBlockTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -27,11 +27,8 @@ public class PlacedBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
         final Block debug4 = deserializeBlock(debug1);
         final StatePropertiesPredicate debug5 = StatePropertiesPredicate.fromJson(debug1.get("state"));
         if (debug4 != null) {
-            final JsonSyntaxException ex;
-            final Object obj;
-            debug5.checkState(debug4.getStateDefinition(), debug1 -> {
-                new JsonSyntaxException("Block " + obj + " has no property " + debug1 + ":");
-                throw ex;
+            debug5.checkState(debug4.getStateDefinition(), debug1l -> { // MagmaCube - decompile fix
+                throw new JsonSyntaxException("Block " + debug4 + " has no property " + debug1l + ":"); // MagmaCube - decompile fix
             });
         }
         final LocationPredicate debug6 = LocationPredicate.fromJson(debug1.get("location"));
@@ -43,11 +40,8 @@ public class PlacedBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
     private static Block deserializeBlock(final JsonObject debug0) {
         if (debug0.has("block")) {
             final ResourceLocation debug = new ResourceLocation(GsonHelper.getAsString(debug0, "block"));
-            final Object o;
-            final Object obj;
             return Registry.BLOCK.getOptional(debug).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown block type '" + obj + "'");
-                return o;
+                throw new JsonSyntaxException("Unknown block type '" + debug + "'"); // MagmaCube - decompile fix
             });
         }
         return null;
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java b/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
index fad4ed3efe65301d48ec7ea554d5661fd9f9a580..88f83f42825fdb77623a53ac5d853a17c0068f1a 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
@@ -7,7 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class PlayerHurtEntityTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class PlayerHurtEntityTrigger extends SimpleCriterionTrigger<PlayerHurtEntityTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -24,7 +24,7 @@ public class PlayerHurtEntityTrigger extends SimpleCriterionTrigger<TriggerInsta
     
     public void trigger(final ServerPlayer debug1, final Entity debug2, final DamageSource debug3, final float debug4, final float debug5, final boolean debug6) {
         final LootContext debug7 = EntityPredicate.createContext(debug1, debug2);
-        this.trigger(debug1, debug6 -> debug6.matches(debug1, debug7, debug3, debug4, debug5, debug6));
+        this.trigger(debug1, debug6l -> debug6l.matches(debug1, debug7, debug3, debug4, debug5, debug6)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlayerInteractTrigger.java b/src/main/java/net/minecraft/advancements/critereon/PlayerInteractTrigger.java
index ce92c662855d5982be26728f55eccc8fbdbd0bcf..e1248403e0992588b40d4ba8ae219eb41d77043e 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlayerInteractTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlayerInteractTrigger.java
@@ -7,7 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class PlayerInteractTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class PlayerInteractTrigger extends SimpleCriterionTrigger<PlayerInteractTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -25,7 +25,7 @@ public class PlayerInteractTrigger extends SimpleCriterionTrigger<TriggerInstanc
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2, final Entity debug3) {
         final LootContext debug4 = EntityPredicate.createContext(debug1, debug3);
-        this.trigger(debug1, debug2 -> debug2.matches(debug2, debug4));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug2, debug4)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java b/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
index a354c0fb2631a2f6c0835f8c9219cfff2588549b..7522033e07a66da14393a88dc3f3cb44d02a340f 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
@@ -32,7 +32,6 @@ import javax.annotation.Nullable;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.advancements.CriterionProgress;
-import net.minecraft.advancements.critereon.MinMaxBounds;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.PlayerAdvancements;
@@ -61,7 +60,7 @@ public class PlayerPredicate {
         }
         Object2BooleanOpenHashMap debug1 = new Object2BooleanOpenHashMap();
         JsonObject debug2 = GsonHelper.convertToJsonObject(debug0, "criterion data");
-        debug2.entrySet().forEach(arg_0 -> PlayerPredicate.lambda$advancementPredicateFromJson$0((Object2BooleanMap)debug1, arg_0));
+        debug2.entrySet().forEach(arg_0 -> PlayerPredicate._lambda$advancementPredicateFromJson$0((Object2BooleanMap)debug1, arg_0));
         return new AdvancementCriterionsPredicate((Object2BooleanMap<String>)debug1);
     }
 
@@ -111,12 +110,6 @@ public class PlayerPredicate {
     }
 
     public static PlayerPredicate fromJson(@Nullable JsonElement debug0) {
-        Object debug14;
-        Object debug13;
-        StatType<?> debug11;
-        Object debug102;
-        Object debug9;
-        JsonElement debug82;
         if (debug0 == null || debug0.isJsonNull()) {
             return ANY;
         }
@@ -127,31 +120,31 @@ public class PlayerPredicate {
         HashMap debug5 = Maps.newHashMap();
         JsonArray debug6 = GsonHelper.getAsJsonArray(debug1, "stats", null);
         if (debug6 != null) {
-            for (JsonElement debug82 : debug6) {
-                debug9 = GsonHelper.convertToJsonObject(debug82, "stats entry");
-                debug102 = new ResourceLocation(GsonHelper.getAsString((JsonObject)debug9, "type"));
-                debug11 = Registry.STAT_TYPE.get((ResourceLocation)debug102);
+            for (JsonElement debug82l : debug6) { // MagmaCube - decompile fix
+                JsonObject debug9 = GsonHelper.convertToJsonObject(debug82l, "stats entry"); // MagmaCube - decompile fix
+                ResourceLocation debug102 = new ResourceLocation(GsonHelper.getAsString((JsonObject)debug9, "type")); // MagmaCube - decompile fix
+                StatType<?> debug11 = Registry.STAT_TYPE.get((ResourceLocation)debug102); // MagmaCube - decompile fix
                 if (debug11 == null) {
                     throw new JsonParseException("Invalid stat type: " + debug102);
                 }
                 ResourceLocation debug12 = new ResourceLocation(GsonHelper.getAsString((JsonObject)debug9, "stat"));
-                debug13 = PlayerPredicate.getStat(debug11, debug12);
-                debug14 = MinMaxBounds.Ints.fromJson(debug9.get("value"));
+                Stat<?> debug13 = PlayerPredicate.getStat(debug11, debug12); // MagmaCube - decompile fix
+                MinMaxBounds.Ints debug14 = MinMaxBounds.Ints.fromJson(debug9.get("value")); // MagmaCube - decompile fix
                 debug5.put(debug13, debug14);
             }
         }
         Object2BooleanOpenHashMap debug7 = new Object2BooleanOpenHashMap();
-        debug82 = GsonHelper.getAsJsonObject(debug1, "recipes", new JsonObject());
-        for (Object debug102 : debug82.entrySet()) {
-            debug11 = new ResourceLocation((String)debug102.getKey());
+        JsonObject debug82 = GsonHelper.getAsJsonObject(debug1, "recipes", new JsonObject()); // MagmaCube - decompile fix
+        for (Map.Entry<String, JsonElement> debug102 : debug82.entrySet()) { // MagmaCube - decompile fix
+            ResourceLocation debug11 = new ResourceLocation((String)debug102.getKey()); // MagmaCube - decompile fix
             boolean debug12 = GsonHelper.convertToBoolean((JsonElement)debug102.getValue(), "recipe present");
             debug7.put((Object)debug11, debug12);
         }
-        debug9 = Maps.newHashMap();
-        debug102 = GsonHelper.getAsJsonObject(debug1, "advancements", new JsonObject());
-        for (Map.Entry debug12 : debug102.entrySet()) {
-            debug13 = new ResourceLocation((String)debug12.getKey());
-            debug14 = PlayerPredicate.advancementPredicateFromJson((JsonElement)debug12.getValue());
+        Map<ResourceLocation, AdvancementPredicate> debug9 = Maps.newHashMap(); // MagmaCube - decompile fix
+        JsonObject debug102 = GsonHelper.getAsJsonObject(debug1, "advancements", new JsonObject()); // MagmaCube - decompile fix
+        for (Map.Entry<String, JsonElement> debug12 : debug102.entrySet()) { // MagmaCube - decompile fix
+            ResourceLocation debug13 = new ResourceLocation((String)debug12.getKey()); // MagmaCube - decompile fix
+            PlayerPredicate.AdvancementPredicate debug14 = PlayerPredicate.advancementPredicateFromJson((JsonElement)debug12.getValue()); // MagmaCube - decompile fix
             debug9.put(debug13, debug14);
         }
         return new PlayerPredicate(debug2, debug4, debug5, (Object2BooleanMap<ResourceLocation>)debug7, (Map<ResourceLocation, AdvancementPredicate>)debug9);
@@ -171,7 +164,6 @@ public class PlayerPredicate {
     }
 
     public JsonElement serializeToJson() {
-        JsonArray debug22;
         if (this == ANY) {
             return JsonNull.INSTANCE;
         }
@@ -181,7 +173,7 @@ public class PlayerPredicate {
             debug12.addProperty("gamemode", this.gameType.getName());
         }
         if (!this.stats.isEmpty()) {
-            debug22 = new JsonArray();
+            JsonArray debug22 = new JsonArray(); // MagmaCube - decompile fix
             this.stats.forEach((debug1, debug2) -> {
                 JsonObject debug3 = new JsonObject();
                 debug3.addProperty("type", Registry.STAT_TYPE.getKey(debug1.getType()).toString());
@@ -192,27 +184,27 @@ public class PlayerPredicate {
             debug12.add("stats", (JsonElement)debug22);
         }
         if (!this.recipes.isEmpty()) {
-            debug22 = new JsonObject();
-            this.recipes.forEach((arg_0, arg_1) -> PlayerPredicate.lambda$serializeToJson$2((JsonObject)debug22, arg_0, arg_1));
+            JsonObject debug22 = new JsonObject(); // MagmaCube - decompile fix
+            this.recipes.forEach((arg_0, arg_1) -> PlayerPredicate._lambda$serializeToJson$2((JsonObject)debug22, arg_0, arg_1));
             debug12.add("recipes", (JsonElement)debug22);
         }
         if (!this.advancements.isEmpty()) {
-            debug22 = new JsonObject();
-            this.advancements.forEach((arg_0, arg_1) -> PlayerPredicate.lambda$serializeToJson$3((JsonObject)debug22, arg_0, arg_1));
+            JsonObject debug22 = new JsonObject(); // MagmaCube - decompile fix
+            this.advancements.forEach((arg_0, arg_1) -> PlayerPredicate._lambda$serializeToJson$3((JsonObject)debug22, arg_0, arg_1));
             debug12.add("advancements", (JsonElement)debug22);
         }
         return debug12;
     }
 
-    private static /* synthetic */ void lambda$serializeToJson$3(JsonObject debug0, ResourceLocation debug1, AdvancementPredicate debug2) {
+    private static /* synthetic */ void _lambda$serializeToJson$3(JsonObject debug0, ResourceLocation debug1, AdvancementPredicate debug2) {
         debug0.add(debug1.toString(), debug2.toJson());
     }
 
-    private static /* synthetic */ void lambda$serializeToJson$2(JsonObject debug0, ResourceLocation debug1, Boolean debug2) {
+    private static /* synthetic */ void _lambda$serializeToJson$2(JsonObject debug0, ResourceLocation debug1, Boolean debug2) {
         debug0.addProperty(debug1.toString(), debug2);
     }
 
-    private static /* synthetic */ void lambda$advancementPredicateFromJson$0(Object2BooleanMap debug0, Map.Entry debug1) {
+    private static /* synthetic */ void _lambda$advancementPredicateFromJson$0(Object2BooleanMap debug0, Map.Entry debug1) {
         boolean debug2 = GsonHelper.convertToBoolean((JsonElement)debug1.getValue(), "criterion test");
         debug0.put(debug1.getKey(), debug2);
     }
@@ -253,11 +245,6 @@ public class PlayerPredicate {
             }
             return true;
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((AdvancementProgress)object);
-        }
     }
 
     static class AdvancementDonePredicate
@@ -277,11 +264,6 @@ public class PlayerPredicate {
         public boolean test(AdvancementProgress debug1) {
             return debug1.isDone() == this.state;
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((AdvancementProgress)object);
-        }
     }
 
     static interface AdvancementPredicate
diff --git a/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java b/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java
index 6c4a1a298672684e6299072dfee79f69470b99b7..dd7b66acdfeb21409372733ac1310b6736d5968a 100644
--- a/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class RecipeUnlockedTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class RecipeUnlockedTrigger extends SimpleCriterionTrigger<RecipeUnlockedTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -21,7 +21,7 @@ public class RecipeUnlockedTrigger extends SimpleCriterionTrigger<TriggerInstanc
     }
     
     public void trigger(final ServerPlayer debug1, final Recipe<?> debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2)); // MagmaCube - decompile fix
     }
     
     public static TriggerInstance unlocked(final ResourceLocation debug0) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ShotCrossbowTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ShotCrossbowTrigger.java
index 73042901166ba958b3a7fcc92d26486e19a63d05..1437d89ac25461aacfc594296e7a99359d3f2487 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ShotCrossbowTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ShotCrossbowTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ShotCrossbowTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ShotCrossbowTrigger extends SimpleCriterionTrigger<ShotCrossbowTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -21,7 +21,7 @@ public class ShotCrossbowTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug2));
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java b/src/main/java/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
index f821e7adc35bfd84a0439cbc19c286a5cc55531c..dcd48c0405ab94bb921909b17f12982c13280c0f 100644
--- a/src/main/java/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
@@ -21,7 +21,7 @@ public abstract class SimpleCriterionTrigger<T extends AbstractCriterionTriggerI
     private final Map<PlayerAdvancements, Set<Listener<T>>> players;
     
     public SimpleCriterionTrigger() {
-        this.players = (Map<PlayerAdvancements, Set<Listener<T>>>)Maps.newIdentityHashMap();
+        this.players = Maps.newIdentityHashMap(); // MagmaCube - decompile fix
     }
     
     @Override
@@ -65,7 +65,7 @@ public abstract class SimpleCriterionTrigger<T extends AbstractCriterionTriggerI
             final T debug8 = debug7.getTriggerInstance();
             if (debug8.getPlayerPredicate().matches(debug5) && debug2.test(debug8)) {
                 if (debug6 == null) {
-                    debug6 = (List<Listener<T>>)Lists.newArrayList();
+                    debug6 = Lists.newArrayList(); // MagmaCube - decompile fix
                 }
                 debug6.add(debug7);
             }
diff --git a/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java
index f3dacbc07a6e575341752a03beb867f119a132cd..970a82b30167b4b09dab77782a301e373d21e26b 100644
--- a/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java
@@ -11,7 +11,7 @@ import com.google.gson.JsonSyntaxException;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class SlideDownBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class SlideDownBlockTrigger extends SimpleCriterionTrigger<SlideDownBlockTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -26,9 +26,8 @@ public class SlideDownBlockTrigger extends SimpleCriterionTrigger<TriggerInstanc
         if (debug4 != null) {
             final JsonSyntaxException ex;
             final Object obj;
-            debug5.checkState(debug4.getStateDefinition(), debug1 -> {
-                new JsonSyntaxException("Block " + obj + " has no property " + debug1);
-                throw ex;
+            debug5.checkState(debug4.getStateDefinition(), debug1l -> { // MagmaCube - decompile fix
+                throw new JsonSyntaxException("Block " + debug4 + " has no property " + debug1l); // MagmaCube - decompile fix
             });
         }
         return new TriggerInstance(debug2, debug4, debug5);
@@ -38,18 +37,15 @@ public class SlideDownBlockTrigger extends SimpleCriterionTrigger<TriggerInstanc
     private static Block deserializeBlock(final JsonObject debug0) {
         if (debug0.has("block")) {
             final ResourceLocation debug = new ResourceLocation(GsonHelper.getAsString(debug0, "block"));
-            final Object o;
-            final Object obj;
             return Registry.BLOCK.getOptional(debug).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown block type '" + obj + "'");
-                return o;
+                throw new JsonSyntaxException("Unknown block type '" + debug + "'"); // MagmaCube - decompile fix
             });
         }
         return null;
     }
-    
+
     public void trigger(final ServerPlayer debug1, final BlockState debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
index 03026081abe4da95d35ea0879d13603eb61a67d0..cd340e8670e65c07275525c6f704765766bc73e5 100644
--- a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
@@ -67,7 +67,7 @@ public class StatePropertiesPredicate
     }
     
     public void checkState(final StateDefinition<?, ?> debug1, final Consumer<String> debug2) {
-        this.properties.forEach(debug2 -> debug2.checkState(debug1, debug2));
+        this.properties.forEach(debug2l -> debug2l.checkState(debug1, debug2)); // MagmaCube - decompile fix
     }
     
     public static StatePropertiesPredicate fromJson(@Nullable final JsonElement debug0) {
@@ -75,7 +75,7 @@ public class StatePropertiesPredicate
             return StatePropertiesPredicate.ANY;
         }
         final JsonObject debug = GsonHelper.convertToJsonObject(debug0, "properties");
-        final List<PropertyMatcher> debug2 = (List<PropertyMatcher>)Lists.newArrayList();
+        final List<PropertyMatcher> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Map.Entry<String, JsonElement> debug3 : debug.entrySet()) {
             debug2.add(fromJson(debug3.getKey(), debug3.getValue()));
         }
@@ -94,7 +94,7 @@ public class StatePropertiesPredicate
     }
     
     static {
-        ANY = new StatePropertiesPredicate((List<PropertyMatcher>)ImmutableList.of());
+        ANY = new StatePropertiesPredicate(ImmutableList.of()); // MagmaCube - decompile fix
     }
     
     abstract static class PropertyMatcher
@@ -197,7 +197,7 @@ public class StatePropertiesPredicate
         private final List<PropertyMatcher> matchers;
         
         private Builder() {
-            this.matchers = (List<PropertyMatcher>)Lists.newArrayList();
+            this.matchers = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         public static Builder properties() {
@@ -217,12 +217,12 @@ public class StatePropertiesPredicate
             return this.hasProperty(debug1, Boolean.toString(debug2));
         }
         
-        public <T extends java.lang.Comparable> Builder hasProperty(final Property<T> debug1, final T debug2) {
+        public <T extends java.lang.Comparable<T>> Builder hasProperty(final Property<T> debug1, final T debug2) { // MagmaCube - decompile fix
             return this.hasProperty((Property<?>)debug1, ((StringRepresentable)debug2).getSerializedName());
         }
         
         public StatePropertiesPredicate build() {
-            return new StatePropertiesPredicate(this.matchers, null);
+            return new StatePropertiesPredicate(this.matchers); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java b/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java
index 8e793269d4ed23ff6731ea852d6806e0b1246886..34c04aa29fe96160c709e5daff8b20b958970e35 100644
--- a/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class SummonedEntityTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class SummonedEntityTrigger extends SimpleCriterionTrigger<SummonedEntityTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -22,7 +22,7 @@ public class SummonedEntityTrigger extends SimpleCriterionTrigger<TriggerInstanc
     
     public void trigger(final ServerPlayer debug1, final Entity debug2) {
         final LootContext debug3 = EntityPredicate.createContext(debug1, debug2);
-        this.trigger(debug1, debug1 -> debug1.matches(debug3));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug3)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java b/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java
index ca9d58f83f880ab647897d3c4f7d907cc18b609e..529f8cb920b400be7fa6feb35e3efcdec70c0689 100644
--- a/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java
@@ -7,7 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class TameAnimalTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class TameAnimalTrigger extends SimpleCriterionTrigger<TameAnimalTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -23,7 +23,7 @@ public class TameAnimalTrigger extends SimpleCriterionTrigger<TriggerInstance>
     
     public void trigger(final ServerPlayer debug1, final Animal debug2) {
         final LootContext debug3 = EntityPredicate.createContext(debug1, debug2);
-        this.trigger(debug1, debug1 -> debug1.matches(debug3));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug3)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/TargetBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/TargetBlockTrigger.java
index d050da91c56fa98fce90ae9975259453f1e4effc..a58d92bb39184595dd82625862f2412b3661493b 100644
--- a/src/main/java/net/minecraft/advancements/critereon/TargetBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/TargetBlockTrigger.java
@@ -7,7 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class TargetBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class TargetBlockTrigger extends SimpleCriterionTrigger<TargetBlockTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -24,7 +24,7 @@ public class TargetBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
     
     public void trigger(final ServerPlayer debug1, final Entity debug2, final Vec3 debug3, final int debug4) {
         final LootContext debug5 = EntityPredicate.createContext(debug1, debug2);
-        this.trigger(debug1, debug3 -> debug3.matches(debug5, debug3, debug4));
+        this.trigger(debug1, debug3l -> debug3l.matches(debug5, debug3, debug4)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/TickTrigger.java b/src/main/java/net/minecraft/advancements/critereon/TickTrigger.java
index 6b14c6d0994c0eaa0e972b46431d4bf3a2721a34..72b1253520ee9ca81245b6c8345e0bba81aeb852 100644
--- a/src/main/java/net/minecraft/advancements/critereon/TickTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/TickTrigger.java
@@ -4,7 +4,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class TickTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class TickTrigger extends SimpleCriterionTrigger<TickTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     public static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/TradeTrigger.java b/src/main/java/net/minecraft/advancements/critereon/TradeTrigger.java
index a395ca1e6da06705ed2f92711589a4f999e74992..b9776b27ae6dcdfc1a8a5cb6e5c278c894f7ba28 100644
--- a/src/main/java/net/minecraft/advancements/critereon/TradeTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/TradeTrigger.java
@@ -8,7 +8,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class TradeTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class TradeTrigger extends SimpleCriterionTrigger<TradeTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -25,7 +25,7 @@ public class TradeTrigger extends SimpleCriterionTrigger<TriggerInstance>
     
     public void trigger(final ServerPlayer debug1, final AbstractVillager debug2, final ItemStack debug3) {
         final LootContext debug4 = EntityPredicate.createContext(debug1, debug2);
-        this.trigger(debug1, debug2 -> debug2.matches(debug4, debug3));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug4, debug3)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java b/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
index 282d904a2817ff1fdf5053827d8c4cba13f919f9..7d0c086d0635f6573ea22c1a039af2936e239e6c 100644
--- a/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class UsedEnderEyeTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class UsedEnderEyeTrigger extends SimpleCriterionTrigger<UsedEnderEyeTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -23,7 +23,7 @@ public class UsedEnderEyeTrigger extends SimpleCriterionTrigger<TriggerInstance>
         final double debug3 = debug1.getX() - debug2.getX();
         final double debug4 = debug1.getZ() - debug2.getZ();
         final double debug5 = debug3 * debug3 + debug4 * debug4;
-        this.trigger(debug1, debug2 -> debug2.matches(debug5));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug5));
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java b/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java
index ace93d7c078a1d24b2887a1da01f2a632bb800f9..55fb029e0f71bc89042edc9e59e361fa4027d2f9 100644
--- a/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class UsedTotemTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class UsedTotemTrigger extends SimpleCriterionTrigger<UsedTotemTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -21,7 +21,7 @@ public class UsedTotemTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/client/BooleanOption.java b/src/main/java/net/minecraft/client/BooleanOption.java
index 8ea1c29b363dfcfa471c29819ea06aa9de9435ef..0b6ec38c1269a9ed814e2c78750810e548427b3f 100644
--- a/src/main/java/net/minecraft/client/BooleanOption.java
+++ b/src/main/java/net/minecraft/client/BooleanOption.java
@@ -38,9 +38,9 @@ public class BooleanOption extends Option
     
     @Override
     public AbstractWidget createButton(final Options debug1, final int debug2, final int debug3, final int debug4) {
-        return new OptionButton(debug2, debug3, debug4, 20, this, this.getMessage(debug1), debug2 -> {
+        return new OptionButton(debug2, debug3, debug4, 20, this, this.getMessage(debug1), debug2l -> { // MagmaCube - decompile fix
             this.toggle(debug1);
-            debug2.setMessage(this.getMessage(debug1));
+            debug2l.setMessage(this.getMessage(debug1)); // MagmaCube - decompile fix
         });
     }
     
diff --git a/src/main/java/net/minecraft/client/ClientBrandRetriever.java b/src/main/java/net/minecraft/client/ClientBrandRetriever.java
index 1693f914c22e702f77b346e9519bcaf4ee36acee..62cc8a8fdaee23c59706234cdb805bb79bf22304 100644
--- a/src/main/java/net/minecraft/client/ClientBrandRetriever.java
+++ b/src/main/java/net/minecraft/client/ClientBrandRetriever.java
@@ -3,6 +3,6 @@ package net.minecraft.client;
 public class ClientBrandRetriever
 {
     public static String getClientModName() {
-        return "vanilla";
+        return "magmacube"; // MagmaCube > Vanilla!
     }
 }
diff --git a/src/main/java/net/minecraft/client/ClientRecipeBook.java b/src/main/java/net/minecraft/client/ClientRecipeBook.java
index c0c5a88f3ef968bd136bbe47c9d280f2b8296908..67adf0c855a50adefca8b9ceb7cd1c84b568d798 100644
--- a/src/main/java/net/minecraft/client/ClientRecipeBook.java
+++ b/src/main/java/net/minecraft/client/ClientRecipeBook.java
@@ -50,14 +50,14 @@ extends RecipeBook {
             List cfr_ignored_0 = (List)debug32.put(debug2, debug3.stream().map(RecipeCollection::new).peek(((ImmutableList.Builder)debug4)::add).collect(ImmutableList.toImmutableList()));
         });
         RecipeBookCategories.AGGREGATE_CATEGORIES.forEach((debug12, debug2) -> {
-            List cfr_ignored_0 = (List)debug32.put(debug12, debug2.stream().flatMap(debug1 -> ((List)debug32.getOrDefault(debug1, ImmutableList.of())).stream()).collect(ImmutableList.toImmutableList()));
+            List cfr_ignored_0 = (List)debug32.put(debug12, debug2.stream().flatMap(debug1l -> ((List)debug32.getOrDefault(debug1l, ImmutableList.of())).stream()).collect(ImmutableList.toImmutableList())); // MagmaCube - decompile fix
         });
         this.collectionsByTab = ImmutableMap.copyOf((Map)debug32);
         this.allCollections = debug4.build();
     }
 
     private static Map<RecipeBookCategories, List<List<Recipe<?>>>> categorizeAndGroupRecipes(Iterable<Recipe<?>> debug02) {
-        HashMap debug1 = Maps.newHashMap();
+        HashMap<RecipeBookCategories, List<List<Recipe<?>>>> debug1 = Maps.newHashMap(); // MagmaCube - decompile fix
         HashBasedTable debug2 = HashBasedTable.create();
         for (Recipe<?> debug4 : debug02) {
             if (debug4.isSpecial()) continue;
diff --git a/src/main/java/net/minecraft/client/ComponentCollector.java b/src/main/java/net/minecraft/client/ComponentCollector.java
index a4d400e347ec36c196be455945a7862e63154533..cad2f7d2605187b1b10f94f368b6b4684b0c990f 100644
--- a/src/main/java/net/minecraft/client/ComponentCollector.java
+++ b/src/main/java/net/minecraft/client/ComponentCollector.java
@@ -10,7 +10,7 @@ public class ComponentCollector
     private final List<FormattedText> parts;
     
     public ComponentCollector() {
-        this.parts = (List<FormattedText>)Lists.newArrayList();
+        this.parts = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     public void append(final FormattedText debug1) {
diff --git a/src/main/java/net/minecraft/client/CycleOption.java b/src/main/java/net/minecraft/client/CycleOption.java
index 4755c9be38fe231e21c9e6ded27d8143e3fdfd5a..dd9055bfb25a6b0b2d2ecc1ef67d1689ac328a42 100644
--- a/src/main/java/net/minecraft/client/CycleOption.java
+++ b/src/main/java/net/minecraft/client/CycleOption.java
@@ -25,9 +25,9 @@ public class CycleOption extends Option
     
     @Override
     public AbstractWidget createButton(final Options debug1, final int debug2, final int debug3, final int debug4) {
-        return new OptionButton(debug2, debug3, debug4, 20, this, this.getMessage(debug1), debug2 -> {
+        return new OptionButton(debug2, debug3, debug4, 20, this, this.getMessage(debug1), debug2l -> { // MagmaCube - decompile fix
             this.toggle(debug1, 1);
-            debug2.setMessage(this.getMessage(debug1));
+            debug2l.setMessage(this.getMessage(debug1)); // MagmaCube - decompile fix
         });
     }
     
diff --git a/src/main/java/net/minecraft/client/FullscreenResolutionProgressOption.java b/src/main/java/net/minecraft/client/FullscreenResolutionProgressOption.java
index b29f7612833ba4de5f27aee5d81dfa803c3b29db..0766c9cbe50aa75eb4f74d7260d041b633252fae 100644
--- a/src/main/java/net/minecraft/client/FullscreenResolutionProgressOption.java
+++ b/src/main/java/net/minecraft/client/FullscreenResolutionProgressOption.java
@@ -15,16 +15,14 @@ public class FullscreenResolutionProgressOption extends ProgressOption
         this(debug1, debug1.findBestMonitor());
     }
     
-    private FullscreenResolutionProgressOption(final Window debug1, @Nullable final Monitor debug2) {
-        final Optional<VideoMode> debug4;
-        final double debug5;
-        super("options.fullscreen.resolution", -1.0, (debug2 != null) ? ((double)(debug2.getModeCount() - 1)) : -1.0, 1.0f, debug2 -> {
+    private FullscreenResolutionProgressOption(final Window debug1, @Nullable final Monitor debug2l) { // MagmaCube - decompile fix
+        super("options.fullscreen.resolution", -1.0, (debug2l != null) ? ((double)(debug2l.getModeCount() - 1)) : -1.0, 1.0f, debug2 -> { // MagmaCube - decompile fix
             if (debug2 == null) {
                 return -1.0;
             }
             else {
-                debug4 = debug1.getPreferredFullscreenVideoMode();
-                return (Double)debug4.map(debug1 -> debug2.getVideoModeIndex(debug1)).orElse(-1.0);
+                Optional<VideoMode> debug4 = debug1.getPreferredFullscreenVideoMode(); // MagmaCube - decompile fix
+                return (Double)debug4.map(debug1l -> (double) debug2l.getVideoModeIndex(debug1l)).orElse(-1.0); // MagmaCube - decompile fix
             }
         }, (debug2, debug3) -> {
             if (debug2 != null) {
@@ -32,20 +30,20 @@ public class FullscreenResolutionProgressOption extends ProgressOption
                     debug1.setPreferredFullscreenVideoMode(Optional.empty());
                 }
                 else {
-                    debug1.setPreferredFullscreenVideoMode(Optional.of(debug2.getMode((int)(Object)debug3)));
+                    debug1.setPreferredFullscreenVideoMode(Optional.of(debug2l.getMode((int)(Object)debug3))); // MagmaCube - decompile fix
                 }
             }
-        }, (debug1, debug2) -> {
+        }, (debug1ll, debug2) -> {
             if (debug2 == null) {
                 return new TranslatableComponent("options.fullscreen.unavailable");
             }
             else {
-                debug5 = debug2.get(debug1);
+                double debug5 = debug2.get(debug1ll); // MagmaCube - decompile fix
                 if (debug5 == -1.0) {
                     return debug2.genericValueLabel(new TranslatableComponent("options.fullscreen.current"));
                 }
                 else {
-                    return debug2.genericValueLabel(new TextComponent(debug2.getMode((int)debug5).toString()));
+                    return debug2.genericValueLabel(new TextComponent(debug2l.getMode((int)debug5).toString())); // MagmaCube - decompile fix
                 }
             }
         });
diff --git a/src/main/java/net/minecraft/client/KeyMapping.java b/src/main/java/net/minecraft/client/KeyMapping.java
index a4a09da385f4e8d48e5fdecefddd54f6112d0155..253906d8af92855441a9b80f35d54a52b2d540af 100644
--- a/src/main/java/net/minecraft/client/KeyMapping.java
+++ b/src/main/java/net/minecraft/client/KeyMapping.java
@@ -170,10 +170,5 @@ implements Comparable<KeyMapping> {
     public void setDown(boolean debug1) {
         this.isDown = debug1;
     }
-
-    @Override
-    public /* synthetic */ int compareTo(Object object) {
-        return this.compareTo((KeyMapping)object);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/client/KeyboardHandler.java b/src/main/java/net/minecraft/client/KeyboardHandler.java
index 2c25520d29cd1dc29c09229d8b6ecd31349873ff..10b0e5a34fe80aee86023ecef8e71ba33f450bf1 100644
--- a/src/main/java/net/minecraft/client/KeyboardHandler.java
+++ b/src/main/java/net/minecraft/client/KeyboardHandler.java
@@ -253,7 +253,6 @@ public class KeyboardHandler {
     }
 
     public void keyPress(long debug12, int debug3, int debug4, int debug5, int debug6) {
-        Object debug9;
         boolean debug8;
         if (debug12 != this.minecraft.getWindow().getWindow()) {
             return;
@@ -292,14 +291,14 @@ public class KeyboardHandler {
             }
         }
         if (debug7 != null) {
-            debug9 = new boolean[]{false};
+            boolean[] debug9 = new boolean[]{false}; // MagmaCube - decompile fix
             Screen.wrapScreenError(() -> this.lambda$keyPress$4(debug5, (boolean[])debug9, debug7, debug3, debug4, debug6), "keyPressed event handler", debug7.getClass().getCanonicalName());
-            if (debug9[0]) {
+            if (debug9[0]) { // MagmaCube - decompile fix
                 return;
             }
         }
         if (this.minecraft.screen == null || this.minecraft.screen.passEvents) {
-            debug9 = InputConstants.getKey(debug3, debug4);
+            InputConstants.Key debug9 = InputConstants.getKey(debug3, debug4); // MagmaCube - decompile fix
             if (debug5 == 0) {
                 KeyMapping.set((InputConstants.Key)debug9, false);
                 if (debug3 == 292) {
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index 3ece226a05e5b0690a70525ed51e9ebcbcf350ad..6c21618c6218e3b4124ace4288452301eba963ff 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -564,8 +564,8 @@ WindowEventHandler {
         this.options.incompatibleResourcePacks.clear();
         this.options.save();
         this.reloadResourcePacks().thenRun(() -> {
-            ToastComponent debug2 = this.getToasts();
-            SystemToast.addOrUpdate(debug2, SystemToast.SystemToastIds.PACK_LOAD_FAILURE, new TranslatableComponent("resourcePack.load_fail"), debug2);
+            ToastComponent debug22 = this.getToasts(); // MagmaCube - decompile fix
+            SystemToast.addOrUpdate(debug22, SystemToast.SystemToastIds.PACK_LOAD_FAILURE, new TranslatableComponent("resourcePack.load_fail"), debug2); // MagmaCube - decompile fix
         });
     }
 
@@ -614,7 +614,7 @@ WindowEventHandler {
     }
 
     void selectMainFont(boolean debug1) {
-        this.fontManager.setRenames((Map<ResourceLocation, ResourceLocation>)(debug1 ? ImmutableMap.of((Object)DEFAULT_FONT, (Object)UNIFORM_FONT) : ImmutableMap.of()));
+        this.fontManager.setRenames((Map<ResourceLocation, ResourceLocation>)(debug1 ? ImmutableMap.of(DEFAULT_FONT, UNIFORM_FONT) : ImmutableMap.of())); // MagmaCube - decompile fix
     }
 
     private void createSearchTrees() {
@@ -847,19 +847,19 @@ WindowEventHandler {
     }
 
     private void runTick(boolean debug1) {
-        int debug6;
+        boolean debug6;
         int debug5;
-        Object debug4;
         this.window.setErrorSection("Pre render");
         long debug2 = Util.getNanos();
         if (this.window.shouldClose()) {
             this.stop();
         }
         if (this.pendingReload != null && !(this.overlay instanceof LoadingOverlay)) {
-            debug4 = this.pendingReload;
+            CompletableFuture<Void> debug4 = this.pendingReload; // MagmaCube - decompile fix
             this.pendingReload = null;
             this.reloadResourcePacks().thenRun(() -> Minecraft.lambda$runTick$18((CompletableFuture)debug4));
         }
+        Runnable debug4; // MagmaCube - decompile fix
         while ((debug4 = this.progressTasks.poll()) != null) {
             debug4.run();
         }
@@ -869,7 +869,7 @@ WindowEventHandler {
             this.runAllTasks();
             this.profiler.pop();
             this.profiler.push("tick");
-            for (debug6 = 0; debug6 < Math.min(10, debug5); ++debug6) {
+            for (int debug7 = 0; debug7 < Math.min(10, debug5); ++debug7) { // MagmaCube - decompile fix
                 this.profiler.incrementCounter("clientTick");
                 this.tick();
             }
@@ -918,7 +918,7 @@ WindowEventHandler {
         this.profiler.pop();
         this.window.setErrorSection("Post render");
         ++this.frames;
-        int n = debug6 = this.hasSingleplayerServer() && (this.screen != null && this.screen.isPauseScreen() || this.overlay != null && this.overlay.isPauseScreen()) && !this.singleplayerServer.isPublished() ? 1 : 0;
+        boolean n = debug6 = this.hasSingleplayerServer() && (this.screen != null && this.screen.isPauseScreen() || this.overlay != null && this.overlay.isPauseScreen()) && !this.singleplayerServer.isPublished();
         if (this.pause != debug6) {
             if (this.pause) {
                 this.pausePartialTick = this.timer.partialTick;
@@ -1030,7 +1030,7 @@ WindowEventHandler {
             }
         } else if (--debug1 < debug2.size() && !"unspecified".equals(debug2.get((int)debug1).name)) {
             if (!this.debugPath.isEmpty()) {
-                this.debugPath = this.debugPath + 'Â¥u001e';
+                this.debugPath = this.debugPath + '\u001e';
             }
             this.debugPath = this.debugPath + debug2.get((int)debug1).name;
         }
@@ -1040,8 +1040,6 @@ WindowEventHandler {
      * WARNING - void declaration
      */
     private void renderFpsMeter(PoseStack debug1, ProfileResults debug2) {
-        void var13_15;
-        int debug15;
         List<ResultField> debug3 = debug2.getTimes(this.debugPath);
         ResultField debug4 = debug3.remove(0);
         RenderSystem.clear(256, ON_OSX);
@@ -1068,29 +1066,28 @@ WindowEventHandler {
         RenderSystem.disableBlend();
         double debug10 = 0.0;
         for (ResultField resultField : debug3) {
-            float debug22;
-            float debug21;
-            float debug20;
-            int debug19;
-            int debug14 = Mth.floor(resultField.percentage / 4.0) + 1;
+            // MagmaCube start - decompile fix
+            int i = Mth.floor(resultField.percentage / 4.0) + 1;
             debug6.begin(6, DefaultVertexFormat.POSITION_COLOR);
-            debug15 = resultField.getColor();
-            int debug16 = debug15 >> 16 & 0xFF;
-            int debug17 = debug15 >> 8 & 0xFF;
-            int debug18 = debug15 & 0xFF;
+            int j = resultField.getColor();
+            int debug16 = j >> 16 & 0xFF;
+            int debug17 = j >> 8 & 0xFF;
+            int debug18 = j & 0xFF;
             debug6.vertex(debug8, debug9, 0.0).color(debug16, debug17, debug18, 255).endVertex();
-            for (debug19 = debug14; debug19 >= 0; --debug19) {
-                debug20 = (float)((debug10 + resultField.percentage * (double)debug19 / (double)debug14) * 6.2831854820251465 / 100.0);
-                debug21 = Mth.sin(debug20) * 160.0f;
-                debug22 = Mth.cos(debug20) * 160.0f * 0.5f;
+            int debug19;
+            for (debug19 = i; debug19 >= 0; --debug19) {
+                float debug20 = (float)((debug10 + resultField.percentage * (double)debug19 / (double)i) * 6.2831854820251465 / 100.0);
+                float debug21 = Mth.sin(debug20) * 160.0f;
+                float debug22 = Mth.cos(debug20) * 160.0f * 0.5f;
                 debug6.vertex((float)debug8 + debug21, (float)debug9 - debug22, 0.0).color(debug16, debug17, debug18, 255).endVertex();
             }
             debug5.end();
             debug6.begin(5, DefaultVertexFormat.POSITION_COLOR);
-            for (debug19 = debug14; debug19 >= 0; --debug19) {
-                debug20 = (float)((debug10 + resultField.percentage * (double)debug19 / (double)debug14) * 6.2831854820251465 / 100.0);
-                debug21 = Mth.sin(debug20) * 160.0f;
-                debug22 = Mth.cos(debug20) * 160.0f * 0.5f;
+            for (debug19 = i; debug19 >= 0; --debug19) {
+                float debug20 = (float)((debug10 + resultField.percentage * (double)debug19 / (double)i) * 6.2831854820251465 / 100.0);
+                float debug21 = Mth.sin(debug20) * 160.0f;
+                float debug22 = Mth.cos(debug20) * 160.0f * 0.5f;
+            // MagmaCube end - decompile fix
                 if (debug22 > 0.0f) continue;
                 debug6.vertex((float)debug8 + debug21, (float)debug9 - debug22, 0.0).color(debug16 >> 1, debug17 >> 1, debug18 >> 1, 255).endVertex();
                 debug6.vertex((float)debug8 + debug21, (float)debug9 - debug22 + 10.0f, 0.0).color(debug16 >> 1, debug17 >> 1, debug18 >> 1, 255).endVertex();
@@ -1103,22 +1100,28 @@ WindowEventHandler {
         RenderSystem.enableTexture();
         String string = ProfileResults.demanglePath(debug4.name);
         Object debug14 = "";
-        if (!"unspecified".equals(string)) {
-            debug14 = (String)debug14 + "[0] ";
+        // MagmaCube start - decompile fix
+        if (!"unspecified".equals(string))
+            debug14 = debug14 + "[0] ";
+        if (string.isEmpty()) {
+            debug14 = debug14 + "ROOT ";
+        } else {
+            debug14 = debug14 + string + ' ';
         }
-        debug14 = string.isEmpty() ? (String)debug14 + "ROOT " : (String)debug14 + string + ' ';
-        debug15 = 0xFFFFFF;
+        // MagmaCube end - decompile fix
+        int debug15 = 0xFFFFFF; // MagmaCube - decompile fix
         this.font.drawShadow(debug1, (String)debug14, (float)(debug8 - 160), (float)(debug9 - 80 - 16), 0xFFFFFF);
         debug14 = debug12.format(debug4.globalPercentage) + "%";
         this.font.drawShadow(debug1, (String)debug14, (float)(debug8 + 160 - this.font.width((String)debug14)), (float)(debug9 - 80 - 16), 0xFFFFFF);
         boolean bl = false;
+        int var13_15 = 0; // MagmaCube - decompile fix
         while (++var13_15 < debug3.size()) {
             debug14 = debug3.get((int)var13_15);
             StringBuilder debug152 = new StringBuilder();
             if ("unspecified".equals(((ResultField)debug14).name)) {
                 debug152.append("[?] ");
             } else {
-                debug152.append("[").append((int)(var13_15 + true)).append("] ");
+                debug152.append("[").append((int)(var13_15 + 1)).append("] "); // MagmaCube - decompile fix
             }
             String debug16 = debug152.append(((ResultField)debug14).name).toString();
             this.font.drawShadow(debug1, debug16, (float)(debug8 - 160), (float)(debug9 + 80 + var13_15 * 8 + 20), ((ResultField)debug14).getColor());
@@ -1470,23 +1473,20 @@ WindowEventHandler {
     }
 
     public void loadLevel(String debug1) {
-        this.doLoadLevel(debug1, RegistryAccess.builtin(), Minecraft::loadDataPacks, (Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData>)((Function4)Minecraft::loadWorldData), false, ExperimentalDialogType.BACKUP);
+        this.doLoadLevel(debug1, RegistryAccess.builtin(), Minecraft::loadDataPacks, Minecraft::loadWorldData, false, ExperimentalDialogType.BACKUP); // MagmaCube - decompile fix
     }
 
     public void createLevel(String debug12, LevelSettings debug2, RegistryAccess.RegistryHolder debug32, WorldGenSettings debug42) {
-        this.doLoadLevel(debug12, debug32, debug1 -> debug2.getDataPackConfig(), (Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData>)((Function4)(debug3, debug4, debug5, debug6) -> {
+        this.doLoadLevel(debug12, debug32, debug1 -> debug2.getDataPackConfig(), (debug3, debug4, debug5, debug6) -> { // MagmaCube - decompile fix
             RegistryWriteOps debug7 = RegistryWriteOps.create(JsonOps.INSTANCE, debug32);
             RegistryReadOps debug8 = RegistryReadOps.create(JsonOps.INSTANCE, debug5, debug32);
-            DataResult debug9 = WorldGenSettings.CODEC.encodeStart(debug7, (Object)debug42).setLifecycle(Lifecycle.stable()).flatMap(debug1 -> WorldGenSettings.CODEC.parse((DynamicOps)debug8, debug1));
+            DataResult<WorldGenSettings> debug9 = WorldGenSettings.CODEC.encodeStart(debug7, debug42).setLifecycle(Lifecycle.stable()).flatMap(debug1 -> WorldGenSettings.CODEC.parse((DynamicOps)debug8, debug1)); // MagmaCube - decompile fix
             WorldGenSettings debug10 = debug9.resultOrPartial(Util.prefix("Error reading worldgen settings after loading data packs: ", ((Logger)LOGGER)::error)).orElse(debug42);
             return new PrimaryLevelData(debug2, debug10, debug9.lifecycle());
-        }), false, ExperimentalDialogType.CREATE);
+        }, false, ExperimentalDialogType.CREATE); // MagmaCube - decompile fix
     }
 
     private void doLoadLevel(String debug1, RegistryAccess.RegistryHolder debug2, Function<LevelStorageSource.LevelStorageAccess, DataPackConfig> debug3, Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData> debug4, boolean debug5, ExperimentalDialogType debug6) {
-        Object debug14;
-        Object debug13;
-        Object debug12;
         boolean debug11;
         ServerStem debug8;
         LevelStorageSource.LevelStorageAccess debug7;
@@ -1532,14 +1532,14 @@ WindowEventHandler {
         try {
             debug7.saveDataTag(debug2, debug9);
             debug8.serverResources().updateGlobals();
-            debug12 = new YggdrasilAuthenticationService(this.proxy, UUID.randomUUID().toString());
-            debug13 = debug12.createMinecraftSessionService();
-            debug14 = debug12.createProfileRepository();
+            YggdrasilAuthenticationService debug12 = new YggdrasilAuthenticationService(this.proxy, UUID.randomUUID().toString()); // MagmaCube - decompile fix
+            MinecraftSessionService debug13 = debug12.createMinecraftSessionService(); // MagmaCube - decompile fix
+            GameProfileRepository debug14 = debug12.createProfileRepository(); // MagmaCube - decompile fix
             GameProfileCache debug15 = new GameProfileCache((GameProfileRepository)debug14, new File(this.gameDirectory, MinecraftServer.USERID_CACHE_FILE.getName()));
             SkullBlockEntity.setProfileCache(debug15);
             SkullBlockEntity.setSessionService((MinecraftSessionService)debug13);
             GameProfileCache.setUsesAuthentication(false);
-            this.singleplayerServer = MinecraftServer.spin(arg_0 -> this.lambda$doLoadLevel$27(debug2, debug7, debug8, debug9, (MinecraftSessionService)debug13, (GameProfileRepository)debug14, debug15, arg_0));
+            this.singleplayerServer = MinecraftServer.spin(arg_0 -> this._synthetic_lambda$doLoadLevel$27(debug2, debug7, debug8, debug9, (MinecraftSessionService)debug13, (GameProfileRepository)debug14, debug15, arg_0));
             this.isLocalServer = true;
         }
         catch (Throwable debug123) {
@@ -1552,7 +1552,7 @@ WindowEventHandler {
         while (this.progressListener.get() == null) {
             Thread.yield();
         }
-        debug12 = new LevelLoadingScreen(this.progressListener.get());
+        LevelLoadingScreen debug12 = new LevelLoadingScreen(this.progressListener.get()); // MagmaCube - decompile fix
         this.setScreen((Screen)debug12);
         this.profiler.push("waitForServer");
         while (!this.singleplayerServer.isReady()) {
@@ -1569,8 +1569,8 @@ WindowEventHandler {
             return;
         }
         this.profiler.pop();
-        debug13 = this.singleplayerServer.getConnection().startMemoryChannel();
-        debug14 = Connection.connectToLocalServer((SocketAddress)debug13);
+        SocketAddress debug13 = this.singleplayerServer.getConnection().startMemoryChannel(); // MagmaCube - decompile fix
+        Connection debug14 = Connection.connectToLocalServer((SocketAddress)debug13); // MagmaCube - decompile fix
         ((Connection)((Object)debug14)).setListener(new ClientHandshakePacketListenerImpl((Connection)((Object)debug14), this, null, debug0 -> {}));
         ((Connection)((Object)debug14)).send(new ClientIntentionPacket(debug13.toString(), 0, ConnectionProtocol.LOGIN));
         ((Connection)((Object)debug14)).send(new ServerboundHelloPacket(this.getUser().getGameProfile()));
@@ -1603,9 +1603,9 @@ WindowEventHandler {
                     try (LevelStorageSource.LevelStorageAccess debug4 = this.levelSource.createAccess(debug2);){
                         debug4.deleteLevel();
                     }
-                    catch (IOException debug42) {
+                    catch (IOException debug422) { // MagmaCube - decompile fix
                         SystemToast.onWorldDeleteFailure(this, debug2);
-                        LOGGER.error("Failed to delete world {}", (Object)debug2, (Object)debug42);
+                        LOGGER.error("Failed to delete world {}", (Object)debug2, (Object)debug422); // MagmaCube - decompile fix
                     }
                 }
             }, new TranslatableComponent("selectWorld.backupQuestion.experimental"), new TranslatableComponent("selectWorld.backupWarning.experimental"), CommonComponents.GUI_PROCEED, CommonComponents.GUI_CANCEL));
@@ -1620,7 +1620,7 @@ WindowEventHandler {
             CompletableFuture<ServerResources> debug9 = ServerResources.loadResources(debug7.openAllSelected(), Commands.CommandSelection.INTEGRATED, 2, Util.backgroundExecutor(), this);
             this.managedBlock(debug9::isDone);
             ServerResources debug10 = debug9.get();
-            WorldData debug11 = (WorldData)debug3.apply((Object)debug5, (Object)debug1, (Object)debug10.getResourceManager(), (Object)debug8);
+            WorldData debug11 = (WorldData)debug3.apply(debug5, debug1, debug10.getResourceManager(), debug8); // MagmaCube - decompile fix
             return new ServerStem(debug7, debug10, debug11);
         }
         catch (InterruptedException | ExecutionException debug8) {
@@ -1861,7 +1861,7 @@ WindowEventHandler {
         debug1.addTagElement("BlockEntityTag", debug3);
         CompoundTag debug4 = new CompoundTag();
         ListTag debug5 = new ListTag();
-        debug5.add(StringTag.valueOf("Â¥"(+NBT)Â¥""));
+        debug5.add(StringTag.valueOf("\"(+NBT)\""));
         debug4.put("Lore", debug5);
         debug1.addTagElement("display", debug4);
         return debug1;
@@ -1883,9 +1883,11 @@ WindowEventHandler {
         debug4.setDetail("GL Caps", RenderSystem::getCapsString);
         debug4.setDetail("Using VBOs", () -> "Yes");
         debug4.setDetail("Is Modded", () -> {
-            String debug0 = ClientBrandRetriever.getClientModName();
-            if (!"vanilla".equals(debug0)) {
-                return "Definitely; Client brand changed to '" + debug0 + "'";
+            // MagmaCube start - decompile fix
+            String str = ClientBrandRetriever.getClientModName();
+            if (!"vanilla".equals(str)) {
+                return "Definitely; Client brand changed to '" + str + "'";
+                // MagmaCube end - decompile fix
             }
             if (Minecraft.class.getSigners() == null) {
                 return "Very likely; Jar signature invalidated";
@@ -1900,16 +1902,18 @@ WindowEventHandler {
             }
             debug4.setDetail("Graphics mode", (Object)debug2.graphicsMode);
             debug4.setDetail("Resource Packs", () -> {
-                StringBuilder debug1 = new StringBuilder();
-                for (String debug3 : debug0.resourcePacks) {
-                    if (debug1.length() > 0) {
-                        debug1.append(", ");
+                // MagmaCube start - decompile fix
+                StringBuilder sb = new StringBuilder();
+                for (String s : debug2.resourcePacks) {
+                    if (sb.length() > 0) {
+                        sb.append(", ");
                     }
-                    debug1.append(debug3);
-                    if (!debug0.incompatibleResourcePacks.contains(debug3)) continue;
-                    debug1.append(" (incompatible)");
+                    sb.append(s);
+                    if (!debug2.incompatibleResourcePacks.contains(s)) continue;
+                    sb.append(" (incompatible)");
                 }
-                return debug1.toString();
+                return sb.toString();
+                // MagmaCube end - decompile fix
             });
         }
         if (debug0 != null) {
@@ -2250,12 +2254,12 @@ WindowEventHandler {
         this.modelManager.updateMaxMipLevel(debug1);
     }
 
-    private /* synthetic */ IntegratedServer lambda$doLoadLevel$27(RegistryAccess.RegistryHolder debug12, LevelStorageSource.LevelStorageAccess debug2, ServerStem debug3, WorldData debug4, MinecraftSessionService debug5, GameProfileRepository debug6, GameProfileCache debug7, Thread debug8) {
+    private /* synthetic */ IntegratedServer _synthetic_lambda$doLoadLevel$27(RegistryAccess.RegistryHolder debug12, LevelStorageSource.LevelStorageAccess debug2, ServerStem debug3, WorldData debug4, MinecraftSessionService debug5, GameProfileRepository debug6, GameProfileCache debug7, Thread debug8) {
         return new IntegratedServer(debug8, this, debug12, debug2, debug3.packRepository(), debug3.serverResources(), debug4, debug5, debug6, debug7, debug1 -> {
-            StoringChunkProgressListener debug2 = new StoringChunkProgressListener(debug1 + 0);
-            debug2.start();
-            this.progressListener.set(debug2);
-            return new ProcessorChunkProgressListener(debug2, this.progressTasks::add);
+            StoringChunkProgressListener listener = new StoringChunkProgressListener(debug1 + 0);
+            listener.start();
+            this.progressListener.set(listener);
+            return new ProcessorChunkProgressListener(listener, this.progressTasks::add);
         });
     }
 
diff --git a/src/main/java/net/minecraft/client/MouseHandler.java b/src/main/java/net/minecraft/client/MouseHandler.java
index faaa45fa352102d58966e8b106d01586ccc900b7..5277493fdb7abda7a282d545af97d969cda09947 100644
--- a/src/main/java/net/minecraft/client/MouseHandler.java
+++ b/src/main/java/net/minecraft/client/MouseHandler.java
@@ -82,13 +82,14 @@ public class MouseHandler {
             } else {
                 double debug9 = this.xpos * (double)this.minecraft.getWindow().getGuiScaledWidth() / (double)this.minecraft.getWindow().getScreenWidth();
                 double debug11 = this.ypos * (double)this.minecraft.getWindow().getGuiScaledHeight() / (double)this.minecraft.getWindow().getScreenHeight();
+                boolean[] debug2 = new boolean[1]; // MagmaCube - decompile fix
                 if (debug6) {
                     Screen.wrapScreenError(() -> {
-                        debug1[0] = this.minecraft.screen.mouseClicked(debug9, debug11, debug7);
+                        debug2[0] = this.minecraft.screen.mouseClicked(debug9, debug11, debug7); // MagmaCube - decompile fix
                     }, "mouseClicked event handler", this.minecraft.screen.getClass().getCanonicalName());
                 } else {
                     Screen.wrapScreenError(() -> {
-                        debug1[0] = this.minecraft.screen.mouseReleased(debug9, debug11, debug7);
+                        debug2[0] = this.minecraft.screen.mouseReleased(debug9, debug11, debug7); // MagmaCube - decompile fix
                     }, "mouseReleased event handler", this.minecraft.screen.getClass().getCanonicalName());
                 }
             }
diff --git a/src/main/java/net/minecraft/client/Option.java b/src/main/java/net/minecraft/client/Option.java
index 729ec01f3b070daa8d8ebacb2f176d4ad77fe25a..59a6bcda95d63058388c91001baac1f49f9dd9c0 100644
--- a/src/main/java/net/minecraft/client/Option.java
+++ b/src/main/java/net/minecraft/client/Option.java
@@ -34,7 +34,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.world.entity.player.ChatVisiblity;
 
 public abstract class Option {
-    public static final ProgressOption BIOME_BLEND_RADIUS = new ProgressOption("options.biomeBlendRadius", 0.0, 7.0, 1.0f, debug0 -> debug0.biomeBlendRadius, (debug0, debug1) -> {
+    public static final ProgressOption BIOME_BLEND_RADIUS = new ProgressOption("options.biomeBlendRadius", 0.0, 7.0, 1.0f, debug0 -> Double.valueOf(debug0.biomeBlendRadius), (debug0, debug1) -> { // MagmaCube - decompile fix
         debug0.biomeBlendRadius = Mth.clamp((int)debug1.doubleValue(), 0, 7);
         Minecraft.getInstance().levelRenderer.allChanged();
     }, (debug0, debug1) -> {
@@ -116,7 +116,7 @@ public abstract class Option {
         return debug1.percentValueLabel(debug2);
     });
     private static final Component ACCESSIBILITY_TOOLTIP_SCREEN_EFFECT = new TranslatableComponent("options.screenEffectScale.tooltip");
-    public static final ProgressOption SCREEN_EFFECTS_SCALE = new ProgressOption("options.screenEffectScale", 0.0, 1.0, 0.0f, debug0 -> debug0.screenEffectScale, (debug0, debug1) -> {
+    public static final ProgressOption SCREEN_EFFECTS_SCALE = new ProgressOption("options.screenEffectScale", 0.0, 1.0, 0.0f, debug0 -> Double.valueOf(debug0.screenEffectScale), (debug0, debug1) -> { // MagmaCube - decompile fix
         debug0.screenEffectScale = debug1.floatValue();
     }, (debug0, debug1) -> {
         debug1.setTooltip(Minecraft.getInstance().font.split(ACCESSIBILITY_TOOLTIP_SCREEN_EFFECT, 200));
@@ -126,7 +126,7 @@ public abstract class Option {
         }
         return debug1.percentValueLabel(debug2);
     });
-    public static final ProgressOption FRAMERATE_LIMIT = new ProgressOption("options.framerateLimit", 10.0, 260.0, 10.0f, debug0 -> debug0.framerateLimit, (debug0, debug1) -> {
+    public static final ProgressOption FRAMERATE_LIMIT = new ProgressOption("options.framerateLimit", 10.0, 260.0, 10.0f, debug0 -> Double.valueOf(debug0.framerateLimit), (debug0, debug1) -> { // MagmaCube - decompile fix
         debug0.framerateLimit = (int)debug1.doubleValue();
         Minecraft.getInstance().getWindow().setFramerateLimit(debug0.framerateLimit);
     }, (debug0, debug1) -> {
@@ -148,7 +148,7 @@ public abstract class Option {
         }
         return debug1.percentAddValueLabel((int)(debug2 * 100.0));
     });
-    public static final ProgressOption MIPMAP_LEVELS = new ProgressOption("options.mipmapLevels", 0.0, 4.0, 1.0f, debug0 -> debug0.mipmapLevels, (debug0, debug1) -> {
+    public static final ProgressOption MIPMAP_LEVELS = new ProgressOption("options.mipmapLevels", 0.0, 4.0, 1.0f, debug0 -> Double.valueOf(debug0.mipmapLevels), (debug0, debug1) -> { // MagmaCube - decompile fix
         debug0.mipmapLevels = (int)debug1.doubleValue();
     }, (debug0, debug1) -> {
         double debug2 = debug1.get((Options)debug0);
@@ -170,14 +170,14 @@ public abstract class Option {
             debug2.updateRawMouseInput((boolean)debug1);
         }
     });
-    public static final ProgressOption RENDER_DISTANCE = new ProgressOption("options.renderDistance", 2.0, 16.0, 1.0f, debug0 -> debug0.renderDistance, (debug0, debug1) -> {
+    public static final ProgressOption RENDER_DISTANCE = new ProgressOption("options.renderDistance", 2.0, 16.0, 1.0f, debug0 -> Double.valueOf(debug0.renderDistance), (debug0, debug1) -> { // MagmaCube - decompile fix
         debug0.renderDistance = (int)debug1.doubleValue();
         Minecraft.getInstance().levelRenderer.needsUpdate();
     }, (debug0, debug1) -> {
         double debug2 = debug1.get((Options)debug0);
         return debug1.genericValueLabel(new TranslatableComponent("options.chunks", (int)debug2));
     });
-    public static final ProgressOption ENTITY_DISTANCE_SCALING = new ProgressOption("options.entityDistanceScaling", 0.5, 5.0, 0.25f, debug0 -> debug0.entityDistanceScaling, (debug0, debug1) -> {
+    public static final ProgressOption ENTITY_DISTANCE_SCALING = new ProgressOption("options.entityDistanceScaling", 0.5, 5.0, 0.25f, debug0 -> Double.valueOf(debug0.entityDistanceScaling), (debug0, debug1) -> { // MagmaCube - decompile fix
         debug0.entityDistanceScaling = (float)debug1.doubleValue();
     }, (debug0, debug1) -> {
         double debug2 = debug1.get((Options)debug0);
diff --git a/src/main/java/net/minecraft/client/Options.java b/src/main/java/net/minecraft/client/Options.java
index 29457f47718f553cf0ed220c5099c410c67e16d7..be6787f03e77a928c1518db2e3f8f03a64845b28 100644
--- a/src/main/java/net/minecraft/client/Options.java
+++ b/src/main/java/net/minecraft/client/Options.java
@@ -95,7 +95,7 @@ public class Options {
     public boolean hideServerAddress;
     public boolean advancedItemTooltips;
     public boolean pauseOnLostFocus = true;
-    private final Set<PlayerModelPart> modelParts = Sets.newHashSet((Object[])PlayerModelPart.values());
+    private final Set<PlayerModelPart> modelParts = Sets.newHashSet(PlayerModelPart.values()); // MagmaCube - decompile fix
     public HumanoidArm mainHand = HumanoidArm.RIGHT;
     public int overrideWidth;
     public int overrideHeight;
@@ -223,10 +223,10 @@ public class Options {
             try {
                 ((BufferedReader)debug2).lines().forEach(debug1 -> {
                     try {
-                        Iterator debug2 = OPTION_SPLITTER.split((CharSequence)debug1).iterator();
-                        debug12.putString((String)debug2.next(), (String)debug2.next());
+                        Iterator debug22 = OPTION_SPLITTER.split((CharSequence)debug1).iterator(); // MagmaCube - decompile fix
+                        debug12.putString((String)debug22.next(), (String)debug22.next()); // MagmaCube - decompile fix
                     }
-                    catch (Exception debug2) {
+                    catch (Exception debug22) { // MagmaCube - decompile fix
                         LOGGER.warn("Skipping bad option: {}", debug1);
                     }
                 });
diff --git a/src/main/java/net/minecraft/client/RecipeBookCategories.java b/src/main/java/net/minecraft/client/RecipeBookCategories.java
index 0ecd2213b79f04d3fe5921cf18b449b6457641a2..f35864b64a537953483ed95281752a815c0877e4 100644
--- a/src/main/java/net/minecraft/client/RecipeBookCategories.java
+++ b/src/main/java/net/minecraft/client/RecipeBookCategories.java
@@ -39,7 +39,7 @@ public enum RecipeBookCategories
     private final List<ItemStack> itemIcons;
     
     private RecipeBookCategories(final ItemStack[] debug3) {
-        this.itemIcons = (List<ItemStack>)ImmutableList.copyOf((Object[])debug3);
+        this.itemIcons = (List<ItemStack>)ImmutableList.copyOf(debug3); // MagmaCube - decompile fix
     }
     
     public static List<RecipeBookCategories> getCategories(final RecipeBookType debug0) {
@@ -57,7 +57,7 @@ public enum RecipeBookCategories
                 return RecipeBookCategories.SMOKER_CATEGORIES;
             }
             default: {
-                return (List<RecipeBookCategories>)ImmutableList.of();
+                return ImmutableList.of(); // MagmaCube - decompile fix
             }
         }
     }
diff --git a/src/main/java/net/minecraft/client/Screenshot.java b/src/main/java/net/minecraft/client/Screenshot.java
index 0c49e7a59f65da5dab179887a15c0440ec94cb55..e9f5fa121ba816beafbb5ada50746e0d1b7ad0d1 100644
--- a/src/main/java/net/minecraft/client/Screenshot.java
+++ b/src/main/java/net/minecraft/client/Screenshot.java
@@ -41,31 +41,26 @@ public class Screenshot
         final NativeImage debug6 = takeScreenshot(debug2, debug3, debug4);
         final File debug7 = new File(debug0, "screenshots");
         debug7.mkdir();
+        final File debug8; // MagmaCube - decompile fix
         if (debug1 == null) {
-            final File debug8 = getFile(debug7);
+            debug8 = getFile(debug7); // MagmaCube - decompile fix
         }
         else {
-            final File debug8 = new File(debug7, debug1);
+            debug8 = new File(debug7, debug1); // MagmaCube - decompile fix
         }
-        final NativeImage nativeImage;
-        final File debug11;
-        Component debug9;
-        final TranslatableComponent translatableComponent;
-        final TranslatableComponent translatableComponent2;
         Util.ioPool().execute(() -> {
             try {
-                nativeImage.writeToFile(debug11);
-                debug9 = new TextComponent(debug11.getName()).withStyle(ChatFormatting.UNDERLINE).withStyle(debug1 -> debug1.withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_FILE, debug11.getAbsolutePath())));
+                debug6.writeToFile(debug8); // MagmaCube - decompile fix
+                Component debug9 = new TextComponent(debug8.getName()).withStyle(ChatFormatting.UNDERLINE).withStyle(debug1l -> debug1l.withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_FILE, debug8.getAbsolutePath()))); // MagmaCube - decompile fix
                 new TranslatableComponent("screenshot.success", new Object[] { debug9 });
-                debug5.accept(translatableComponent);
+                debug5.accept(debug9); // MagmaCube - decompile fix
             }
             catch (Exception debug10) {
                 Screenshot.LOGGER.warn("Couldn't save screenshot", (Throwable)debug10);
-                new TranslatableComponent("screenshot.failure", new Object[] { debug10.getMessage() });
-                debug5.accept(translatableComponent2);
+                debug5.accept(new TranslatableComponent("screenshot.failure", new Object[] { debug10.getMessage() })); // MagmaCube - decompile fix
             }
             finally {
-                nativeImage.close();
+                debug6.close(); // MagmaCube - decompile fix
             }
         });
     }
diff --git a/src/main/java/net/minecraft/client/StringSplitter.java b/src/main/java/net/minecraft/client/StringSplitter.java
index df9bb9b21fb59914d0db0d66441fbf60f48fc208..3fffe54d4b38a1ccbead6063385dd4fe652d4351 100644
--- a/src/main/java/net/minecraft/client/StringSplitter.java
+++ b/src/main/java/net/minecraft/client/StringSplitter.java
@@ -138,10 +138,10 @@ public class StringSplitter {
         int debug6 = Math.abs(debug1);
         for (int debug7 = 0; debug7 < debug6; ++debug7) {
             if (debug5) {
-                while (debug3 && debug4 > 0 && (debug0.charAt(debug4 - 1) == ' ' || debug0.charAt(debug4 - 1) == 'Â¥n')) {
+                while (debug3 && debug4 > 0 && (debug0.charAt(debug4 - 1) == ' ' || debug0.charAt(debug4 - 1) == '\n')) { // MagmaCube - decompile fix
                     --debug4;
                 }
-                while (debug4 > 0 && debug0.charAt(debug4 - 1) != ' ' && debug0.charAt(debug4 - 1) != 'Â¥n') {
+                while (debug4 > 0 && debug0.charAt(debug4 - 1) != ' ' && debug0.charAt(debug4 - 1) != '\n') { // MagmaCube - decompile fix
                     --debug4;
                 }
                 continue;
@@ -154,7 +154,7 @@ public class StringSplitter {
                 debug4 = debug8;
                 continue;
             }
-            while (debug3 && debug4 < debug8 && (debug0.charAt(debug4) == ' ' || debug0.charAt(debug4) == 'Â¥n')) {
+            while (debug3 && debug4 < debug8 && (debug0.charAt(debug4) == ' ' || debug0.charAt(debug4) == '\n')) { // MagmaCube - decompile fix
                 ++debug4;
             }
         }
@@ -174,7 +174,7 @@ public class StringSplitter {
             }
             int debug11 = debug9.getSplitPosition();
             char debug12 = debug1.charAt(debug11);
-            int debug13 = debug12 == 'Â¥n' || debug12 == ' ' ? debug11 + 1 : debug11;
+            int debug13 = debug12 == '\n' || debug12 == ' ' ? debug11 + 1 : debug11; // MagmaCube - decompile fix
             debug5.accept(debug8, debug6, debug4 ? debug13 : debug11);
             debug6 = debug13;
             debug8 = debug9.getSplitStyle();
@@ -215,7 +215,7 @@ public class StringSplitter {
                     int debug14 = ((LineBreakFinder)debug10).getSplitPosition();
                     Style debug15 = ((LineBreakFinder)debug10).getSplitStyle();
                     char debug16 = debug6.charAt(debug14);
-                    boolean debug17 = debug16 == 'Â¥n';
+                    boolean debug17 = debug16 == '\n'; // MagmaCube - decompile fix
                     boolean debug18 = debug17 || debug16 == ' ';
                     debug8 = debug17;
                     FormattedText debug19 = debug6.splitAt(debug14, debug18 ? 1 : 0, debug15);
diff --git a/src/main/java/net/minecraft/client/color/block/BlockColors.java b/src/main/java/net/minecraft/client/color/block/BlockColors.java
index f0361c439901a39f3027a87e91cc90ec26af69a6..4e5d16ef519d66ad997733a653ffbd7ec081c903 100644
--- a/src/main/java/net/minecraft/client/color/block/BlockColors.java
+++ b/src/main/java/net/minecraft/client/color/block/BlockColors.java
@@ -118,11 +118,11 @@ public class BlockColors {
     }
 
     private void addColoringState(Property<?> debug1, Block ... debug2) {
-        this.addColoringStates((Set<Property<?>>)ImmutableSet.of(debug1), debug2);
+        this.addColoringStates(ImmutableSet.of(debug1), debug2); // MagmaCube - decompile fix
     }
 
     public Set<Property<?>> getColoringProperties(Block debug1) {
-        return (Set)this.coloringStates.getOrDefault(debug1, (Set<Property<?>>)ImmutableSet.of());
+        return (Set)this.coloringStates.getOrDefault(debug1, ImmutableSet.of()); // MagmaCube - decompile fix
     }
 }
 
diff --git a/src/main/java/net/minecraft/client/color/block/BlockTintCache.java b/src/main/java/net/minecraft/client/color/block/BlockTintCache.java
index deaf297a5ffd91e893baff1c1365970c0c6526bf..07dd8300ba0228c45a59c2f0bc2d50bfd5534d5b 100644
--- a/src/main/java/net/minecraft/client/color/block/BlockTintCache.java
+++ b/src/main/java/net/minecraft/client/color/block/BlockTintCache.java
@@ -84,7 +84,7 @@ public class BlockTintCache
             if (this.cache.size() >= 256) {
                 this.cache.removeFirst();
             }
-            this.cache.put(debug3, (Object)debug5);
+            this.cache.put(debug3, debug5); // MagmaCube - decompile fix
         }
         finally {
             this.lock.writeLock().unlock();
diff --git a/src/main/java/net/minecraft/client/gui/Font.java b/src/main/java/net/minecraft/client/gui/Font.java
index a253bd0efd07842c7f7f75eb4c122812453a5ec9..b7cbbd86a4095bc0ff8729c6f956bfbca3f2d788 100644
--- a/src/main/java/net/minecraft/client/gui/Font.java
+++ b/src/main/java/net/minecraft/client/gui/Font.java
@@ -44,7 +44,7 @@ public class Font
     public Font(final Function<ResourceLocation, FontSet> debug1) {
         this.random = new Random();
         this.fonts = debug1;
-        this.splitter = new StringSplitter((debug1, debug2) -> this.getFontSet(debug2.getFont()).getGlyphInfo(debug1).getAdvance(debug2.isBold()));
+        this.splitter = new StringSplitter((debug1l, debug2) -> this.getFontSet(debug2.getFont()).getGlyphInfo(debug1l).getAdvance(debug2.isBold())); // MagmaCube - decompile fix
     }
     
     private FontSet getFontSet(final ResourceLocation debug1) {
@@ -251,7 +251,7 @@ public class Font
         
         private void addEffect(final BakedGlyph.Effect debug1) {
             if (this.effects == null) {
-                this.effects = (List<BakedGlyph.Effect>)Lists.newArrayList();
+                this.effects = Lists.newArrayList(); // MagmaCube - decompile fix
             }
             this.effects.add(debug1);
         }
diff --git a/src/main/java/net/minecraft/client/gui/Gui.java b/src/main/java/net/minecraft/client/gui/Gui.java
index 8f1f9a0b2d7e205be8d6bb46dce23b7cb77ee90a..3d3216bd8ce007d4a3c0d05c14148543216a532c 100644
--- a/src/main/java/net/minecraft/client/gui/Gui.java
+++ b/src/main/java/net/minecraft/client/gui/Gui.java
@@ -301,6 +301,7 @@ extends GuiComponent {
             if (debug84 != null && (debug9 = debug84.getColor().getId()) >= 0) {
                 debug7 = debug6.getDisplayObjective(3 + debug9);
             }
+            Objective debug11; // MagmaCube - decompile fix
             Objective objective = debug11 = debug7 != null ? debug7 : debug6.getDisplayObjective(1);
             if (debug11 != null) {
                 this.displayScoreboardSidebar(debug1, debug11);
@@ -314,7 +315,7 @@ extends GuiComponent {
             this.chat.render(debug1, this.tickCount);
             this.minecraft.getProfiler().pop();
             RenderSystem.popMatrix();
-            Objective debug11 = debug6.getDisplayObjective(0);
+            debug11 = debug6.getDisplayObjective(0); // MagmaCube - decompile fix
             if (this.minecraft.options.keyPlayerList.isDown() && (!this.minecraft.isLocalServer() || this.minecraft.player.connection.getOnlinePlayers().size() > 1 || debug11 != null)) {
                 this.tabList.setVisible(true);
                 this.tabList.render(debug1, this.screenWidth, debug6, debug11);
@@ -400,7 +401,7 @@ extends GuiComponent {
         int debug3 = 0;
         int debug4 = 0;
         MobEffectTextureManager debug5 = this.minecraft.getMobEffectTextures();
-        ArrayList debug6 = Lists.newArrayListWithExpectedSize((int)debug2.size());
+        ArrayList<Runnable> debug6 = Lists.newArrayListWithExpectedSize((int)debug2.size()); // MagmaCube - decompile fix
         this.minecraft.getTextureManager().bind(AbstractContainerScreen.INVENTORY_LOCATION);
         for (MobEffectInstance debug8 : Ordering.natural().reverse().sortedCopy(debug2)) {
             MobEffect debug9 = debug8.getEffect();
@@ -586,10 +587,10 @@ extends GuiComponent {
     private void displayScoreboardSidebar(PoseStack debug1, Objective debug2) {
         int debug8;
         Scoreboard debug3 = debug2.getScoreboard();
-        List<Object> debug4 = debug3.getPlayerScores(debug2);
+        Collection<Score> debug4 = debug3.getPlayerScores(debug2); // MagmaCube - decompile fix
         List debug5 = debug4.stream().filter(debug0 -> debug0.getOwner() != null && !debug0.getOwner().startsWith("#")).collect(Collectors.toList());
         debug4 = debug5.size() > 15 ? Lists.newArrayList((Iterable)Iterables.skip(debug5, (int)(debug4.size() - 15))) : debug5;
-        ArrayList debug6 = Lists.newArrayListWithCapacity((int)debug4.size());
+        ArrayList<Pair> debug6 = Lists.newArrayListWithCapacity((int)debug4.size()); // MagmaCube - decompile fix
         Component debug7 = debug2.getDisplayName();
         int debug9 = debug8 = this.getFont().width(debug7);
         int debug10 = this.getFont().width(": ");
diff --git a/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java b/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java
index 3810d4057ce01eb810e4d0d91c3fdd744b2a4682..df572608427d06bb2b3cb972fea3d168e4c31fb9 100644
--- a/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java
@@ -27,7 +27,7 @@ import net.minecraft.client.gui.components.events.AbstractContainerEventHandler;
 import net.minecraft.client.gui.components.events.GuiEventListener;
 import net.minecraft.util.Mth;
 
-public abstract class AbstractSelectionList<E extends Entry<E>>
+public abstract class AbstractSelectionList<E extends AbstractSelectionList.Entry<E>> // MagmaCube - decompile fix
 extends AbstractContainerEventHandler
 implements Widget {
     protected final Minecraft minecraft;
@@ -378,7 +378,7 @@ implements Widget {
             int debug5;
             int debug4 = this.children().indexOf(this.getSelected());
             while (debug4 != (debug5 = Mth.clamp(debug4 + debug3, 0, this.getItemCount() - 1))) {
-                Entry debug6 = (Entry)this.children().get(debug5);
+                E debug6 = this.children().get(debug5); // MagmaCube - decompile fix
                 if (debug2.test(debug6)) {
                     this.setSelected(debug6);
                     this.ensureVisible(debug6);
@@ -451,7 +451,7 @@ implements Widget {
 
     protected E remove(int debug1) {
         Entry debug2 = (Entry)this.children.get(debug1);
-        if (this.removeEntry((Entry)this.children.get(debug1))) {
+        if (this.removeEntry((E) this.children.get(debug1))) { // MagmaCube - decompile fix
             return (E)debug2;
         }
         return null;
@@ -469,12 +469,6 @@ implements Widget {
         ((Entry)debug1).list = this;
     }
 
-    @Override
-    @Nullable
-    public /* synthetic */ GuiEventListener getFocused() {
-        return this.getFocused();
-    }
-
     class TrackedList
     extends AbstractList<E> {
         private final List<E> delegate = Lists.newArrayList();
@@ -484,7 +478,7 @@ implements Widget {
 
         @Override
         public E get(int debug1) {
-            return (Entry)this.delegate.get(debug1);
+            return (E) this.delegate.get(debug1); // MagmaCube - decompile fix
         }
 
         @Override
@@ -496,7 +490,7 @@ implements Widget {
         public E set(int debug1, E debug2) {
             Entry debug3 = (Entry)this.delegate.set(debug1, debug2);
             AbstractSelectionList.this.bindEntryToSelf(debug2);
-            return debug3;
+            return (E) debug3; // MagmaCube - decompile fix
         }
 
         @Override
@@ -507,27 +501,7 @@ implements Widget {
 
         @Override
         public E remove(int debug1) {
-            return (Entry)this.delegate.remove(debug1);
-        }
-
-        @Override
-        public /* synthetic */ Object remove(int n) {
-            return this.remove(n);
-        }
-
-        @Override
-        public /* synthetic */ void add(int n, Object object) {
-            this.add(n, (E)((Entry)object));
-        }
-
-        @Override
-        public /* synthetic */ Object set(int n, Object object) {
-            return this.set(n, (E)((Entry)object));
-        }
-
-        @Override
-        public /* synthetic */ Object get(int n) {
-            return this.get(n);
+            return (E) this.delegate.remove(debug1); // MagmaCube - decompile fix
         }
     }
 
diff --git a/src/main/java/net/minecraft/client/gui/components/CommandSuggestions.java b/src/main/java/net/minecraft/client/gui/components/CommandSuggestions.java
index 050b4b38f51c412f04694080ec8c863e652094b7..ad6a701a4336bc6fac4810b4470b7ed6be173568 100644
--- a/src/main/java/net/minecraft/client/gui/components/CommandSuggestions.java
+++ b/src/main/java/net/minecraft/client/gui/components/CommandSuggestions.java
@@ -36,6 +36,7 @@ import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.suggestion.Suggestion;
 import com.mojang.brigadier.suggestion.Suggestions;
 import com.mojang.brigadier.suggestion.SuggestionsBuilder;
+import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.LiteralCommandNode;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -182,7 +183,7 @@ public class CommandSuggestions {
             int debug7;
             CommandDispatcher<SharedSuggestionProvider> debug6 = this.minecraft.player.connection.getCommands();
             if (this.currentParse == null) {
-                this.currentParse = debug6.parse(debug2, (Object)this.minecraft.player.connection.getSuggestionsProvider());
+                this.currentParse = debug6.parse(debug2, this.minecraft.player.connection.getSuggestionsProvider()); // MagmaCube - decompile fix
             }
             int n = debug7 = this.onlyShowIfCursorPastError ? debug2.getCursor() : 1;
             if (!(debug5 < debug7 || this.suggestions != null && this.keepSuggestions)) {
@@ -256,11 +257,11 @@ public class CommandSuggestions {
     private void fillNodeUsage(ChatFormatting debug1) {
         CommandContextBuilder debug2 = this.currentParse.getContext();
         SuggestionContext debug3 = debug2.findSuggestionContext(this.input.getCursorPosition());
-        Map debug4 = this.minecraft.player.connection.getCommands().getSmartUsage(debug3.parent, (Object)this.minecraft.player.connection.getSuggestionsProvider());
+        Map<CommandNode<?>, String> debug4 = this.minecraft.player.connection.getCommands().getSmartUsage(debug3.parent, this.minecraft.player.connection.getSuggestionsProvider()); // MagmaCube - decompile fix
         ArrayList debug5 = Lists.newArrayList();
         int debug6 = 0;
         Style debug7 = Style.EMPTY.withColor(debug1);
-        for (Map.Entry debug9 : debug4.entrySet()) {
+        for (Map.Entry<CommandNode<?>, String> debug9 : debug4.entrySet()) { // MagmaCube - decompile fix
             if (debug9.getKey() instanceof LiteralCommandNode) continue;
             debug5.add(FormattedCharSequence.forward((String)debug9.getValue(), debug7));
             debug6 = Math.max(debug6, this.font.width((String)debug9.getValue()));
@@ -292,7 +293,7 @@ public class CommandSuggestions {
         ArrayList debug3 = Lists.newArrayList();
         int debug4 = 0;
         int debug5 = -1;
-        CommandContextBuilder debug6 = debug0.getContext().getLastChild();
+        CommandContextBuilder<SharedSuggestionProvider> debug6 = debug0.getContext().getLastChild(); // MagmaCube - decompile fix
         for (ParsedArgument debug8 : debug6.getArguments().values()) {
             int debug9;
             if (++debug5 >= ARGUMENT_STYLES.size()) {
diff --git a/src/main/java/net/minecraft/client/gui/components/ComponentRenderUtils.java b/src/main/java/net/minecraft/client/gui/components/ComponentRenderUtils.java
index 9d038efb7ac215715f39abb4deba27c23cf4d43f..b68ee4d9a469c3f91b019067672aa90751b2e370 100644
--- a/src/main/java/net/minecraft/client/gui/components/ComponentRenderUtils.java
+++ b/src/main/java/net/minecraft/client/gui/components/ComponentRenderUtils.java
@@ -34,11 +34,11 @@ public class ComponentRenderUtils {
         }, Style.EMPTY);
         ArrayList debug4 = Lists.newArrayList();
         debug22.getSplitter().splitLines(debug3.getResultOrEmpty(), debug12, Style.EMPTY, (debug1, debug2) -> {
-            FormattedCharSequence debug3 = Language.getInstance().getVisualOrder((FormattedText)debug1);
-            debug4.add(debug2 != false ? FormattedCharSequence.composite(INDENT, debug3) : debug3);
+            FormattedCharSequence debug3l = Language.getInstance().getVisualOrder((FormattedText)debug1); // MagmaCube - decompile fix
+            debug4.add(debug2 != false ? FormattedCharSequence.composite(INDENT, debug3l) : debug3l); // MagmaCube - decompile fix
         });
         if (debug4.isEmpty()) {
-            return Lists.newArrayList((Object[])new FormattedCharSequence[]{FormattedCharSequence.EMPTY});
+            return Lists.newArrayList(new FormattedCharSequence[]{FormattedCharSequence.EMPTY}); // MagmaCube - decompile fix
         }
         return debug4;
     }
diff --git a/src/main/java/net/minecraft/client/gui/components/ContainerObjectSelectionList.java b/src/main/java/net/minecraft/client/gui/components/ContainerObjectSelectionList.java
index c63ef49d32b8804758e82fd063dc9eb8f3a56def..73f001f5cebf0158f51d8826d17b971ebdd16fe3 100644
--- a/src/main/java/net/minecraft/client/gui/components/ContainerObjectSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/components/ContainerObjectSelectionList.java
@@ -12,7 +12,7 @@ import net.minecraft.client.gui.components.AbstractSelectionList;
 import net.minecraft.client.gui.components.events.ContainerEventHandler;
 import net.minecraft.client.gui.components.events.GuiEventListener;
 
-public abstract class ContainerObjectSelectionList<E extends Entry<E>>
+public abstract class ContainerObjectSelectionList<E extends ContainerObjectSelectionList.Entry<E>> // MagmaCube - decompile fix
 extends AbstractSelectionList<E> {
     public ContainerObjectSelectionList(Minecraft debug1, int debug2, int debug3, int debug4, int debug5, int debug6) {
         super(debug1, debug2, debug3, debug4, debug5, debug6);
diff --git a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
index 9728567798c3465583883d96eb4d18d5cb962c1c..e0a9169b38080bcf216ff146ba9977fab1a766d6 100644
--- a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
@@ -24,6 +24,7 @@ import com.mojang.blaze3d.vertex.Tesselator;
 import com.mojang.datafixers.DataFixUtils;
 import com.mojang.math.Matrix4f;
 import com.mojang.math.Transformation;
+import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.longs.LongSets;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import java.util.ArrayList;
@@ -64,6 +65,7 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.NaturalSpawner;
 import net.minecraft.world.level.block.state.BlockBehaviour;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateHolder;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.chunk.ChunkStatus;
@@ -171,13 +173,13 @@ extends GuiComponent {
         float debug4 = debug3.getAverageSentPackets();
         float debug5 = debug3.getAverageReceivedPackets();
         if (debug2 != null) {
-            String debug122 = String.format("Integrated server @ %.0f ms ticks, %.0f tx, %.0f rx", Float.valueOf(debug2.getAverageTickTime()), Float.valueOf(debug4), Float.valueOf(debug5));
+            debug12 = String.format("Integrated server @ %.0f ms ticks, %.0f tx, %.0f rx", Float.valueOf(debug2.getAverageTickTime()), Float.valueOf(debug4), Float.valueOf(debug5)); // MagmaCube - decompile fix
         } else {
-            debug12 = String.format("Â¥"%sÂ¥" server, %.0f tx, %.0f rx", this.minecraft.player.getServerBrand(), Float.valueOf(debug4), Float.valueOf(debug5));
+            debug12 = String.format("\"%s\" server, %.0f tx, %.0f rx", this.minecraft.player.getServerBrand(), Float.valueOf(debug4), Float.valueOf(debug5)); // MagmaCube - decompile fix
         }
         BlockPos debug6 = this.minecraft.getCameraEntity().blockPosition();
         if (this.minecraft.showOnlyReducedInfo()) {
-            return Lists.newArrayList((Object[])new String[]{"Minecraft " + SharedConstants.getCurrentVersion().getName() + " (" + this.minecraft.getLaunchedVersion() + "/" + ClientBrandRetriever.getClientModName() + ")", this.minecraft.fpsString, debug12, this.minecraft.levelRenderer.getChunkStatistics(), this.minecraft.levelRenderer.getEntityStatistics(), "P: " + this.minecraft.particleEngine.countParticles() + ". T: " + this.minecraft.level.getEntityCount(), this.minecraft.level.gatherChunkSourceStats(), "", String.format("Chunk-relative: %d %d %d", debug6.getX() & 0xF, debug6.getY() & 0xF, debug6.getZ() & 0xF)});
+            return Lists.newArrayList(new String[]{"Minecraft " + SharedConstants.getCurrentVersion().getName() + " (" + this.minecraft.getLaunchedVersion() + "/" + ClientBrandRetriever.getClientModName() + ")", this.minecraft.fpsString, debug12, this.minecraft.levelRenderer.getChunkStatistics(), this.minecraft.levelRenderer.getEntityStatistics(), "P: " + this.minecraft.particleEngine.countParticles() + ". T: " + this.minecraft.level.getEntityCount(), this.minecraft.level.gatherChunkSourceStats(), "", String.format("Chunk-relative: %d %d %d", debug6.getX() & 0xF, debug6.getY() & 0xF, debug6.getZ() & 0xF)}); // MagmaCube - decompile fix
         }
         Entity debug7 = this.minecraft.getCameraEntity();
         Direction debug8 = debug7.getDirection();
@@ -207,7 +209,7 @@ extends GuiComponent {
             this.lastPos = debug10;
             this.clearChunkCache();
         }
-        LongSets.EmptySet debug122 = (debug11 = this.getLevel()) instanceof ServerLevel ? ((ServerLevel)debug11).getForcedChunks() : LongSets.EMPTY_SET;
+        LongSet debug122 = (debug11 = this.getLevel()) instanceof ServerLevel ? ((ServerLevel)debug11).getForcedChunks() : LongSets.EMPTY_SET; // MagmaCube - decompile fix
         ArrayList debug13 = Lists.newArrayList((Object[])new String[]{"Minecraft " + SharedConstants.getCurrentVersion().getName() + " (" + this.minecraft.getLaunchedVersion() + "/" + ClientBrandRetriever.getClientModName() + ("release".equalsIgnoreCase(this.minecraft.getVersionType()) ? "" : "/" + this.minecraft.getVersionType()) + ")", this.minecraft.fpsString, debug12, this.minecraft.levelRenderer.getChunkStatistics(), this.minecraft.levelRenderer.getEntityStatistics(), "P: " + this.minecraft.particleEngine.countParticles() + ". T: " + this.minecraft.level.getEntityCount(), this.minecraft.level.gatherChunkSourceStats()});
         String debug14 = this.getServerChunkStats();
         if (debug14 != null) {
@@ -335,8 +337,6 @@ extends GuiComponent {
     }
 
     protected List<String> getSystemInformation() {
-        StateHolder debug11;
-        Object debug10;
         long debug1 = Runtime.getRuntime().maxMemory();
         long debug3 = Runtime.getRuntime().totalMemory();
         long debug5 = Runtime.getRuntime().freeMemory();
@@ -346,8 +346,8 @@ extends GuiComponent {
             return debug9;
         }
         if (this.block.getType() == HitResult.Type.BLOCK) {
-            debug10 = ((BlockHitResult)this.block).getBlockPos();
-            debug11 = this.minecraft.level.getBlockState((BlockPos)debug10);
+            BlockPos debug10 = ((BlockHitResult)this.block).getBlockPos(); // MagmaCube - decompile fix
+            BlockState debug11 = this.minecraft.level.getBlockState((BlockPos)debug10); // MagmaCube - decompile fix
             debug9.add("");
             debug9.add((Object)((Object)ChatFormatting.UNDERLINE) + "Targeted Block: " + ((Vec3i)debug10).getX() + ", " + ((Vec3i)debug10).getY() + ", " + ((Vec3i)debug10).getZ());
             debug9.add(String.valueOf(Registry.BLOCK.getKey(((BlockBehaviour.BlockStateBase)debug11).getBlock())));
@@ -359,8 +359,8 @@ extends GuiComponent {
             }
         }
         if (this.liquid.getType() == HitResult.Type.BLOCK) {
-            debug10 = ((BlockHitResult)this.liquid).getBlockPos();
-            debug11 = this.minecraft.level.getFluidState((BlockPos)debug10);
+            BlockPos debug10 = ((BlockHitResult)this.liquid).getBlockPos(); // MagmaCube - decompile fix
+            FluidState debug11 = this.minecraft.level.getFluidState((BlockPos)debug10); // MagmaCube - decompile fix
             debug9.add("");
             debug9.add((Object)((Object)ChatFormatting.UNDERLINE) + "Targeted Fluid: " + ((Vec3i)debug10).getX() + ", " + ((Vec3i)debug10).getY() + ", " + ((Vec3i)debug10).getZ());
             debug9.add(String.valueOf(Registry.FLUID.getKey(((FluidState)debug11).getType())));
@@ -371,6 +371,7 @@ extends GuiComponent {
                 debug9.add("#" + resourceLocation);
             }
         }
+        Entity debug10; // MagmaCube - decompile fix
         if ((debug10 = this.minecraft.crosshairPickEntity) != null) {
             debug9.add("");
             debug9.add((Object)((Object)ChatFormatting.UNDERLINE) + "Targeted Entity");
diff --git a/src/main/java/net/minecraft/client/gui/components/OptionsList.java b/src/main/java/net/minecraft/client/gui/components/OptionsList.java
index 4a091e5ea8c3d4b8e4ffbdf610a4400965c7e670..5434c85e6cdcce024d5e16e0c451fb5ad4770ab6 100644
--- a/src/main/java/net/minecraft/client/gui/components/OptionsList.java
+++ b/src/main/java/net/minecraft/client/gui/components/OptionsList.java
@@ -21,7 +21,7 @@ import net.minecraft.client.gui.components.OptionButton;
 import net.minecraft.client.gui.components.events.GuiEventListener;
 
 public class OptionsList
-extends ContainerObjectSelectionList<Entry> {
+extends ContainerObjectSelectionList<OptionsList.Entry> { // MagmaCube - decompile fix
     public OptionsList(Minecraft debug1, int debug2, int debug3, int debug4, int debug5, int debug6) {
         super(debug1, debug2, debug3, debug4, debug5, debug6);
         this.centerListVertically = false;
@@ -81,15 +81,15 @@ extends ContainerObjectSelectionList<Entry> {
         }
 
         public static Entry big(Options debug0, int debug1, Option debug2) {
-            return new Entry((List<AbstractWidget>)ImmutableList.of((Object)debug2.createButton(debug0, debug1 / 2 - 155, 0, 310)));
+            return new Entry(ImmutableList.of(debug2.createButton(debug0, debug1 / 2 - 155, 0, 310))); // MagmaCube - decompile fix
         }
 
         public static Entry small(Options debug0, int debug1, Option debug2, @Nullable Option debug3) {
             AbstractWidget debug4 = debug2.createButton(debug0, debug1 / 2 - 155, 0, 150);
             if (debug3 == null) {
-                return new Entry((List<AbstractWidget>)ImmutableList.of((Object)debug4));
+                return new Entry(ImmutableList.of(debug4)); // MagmaCube - decompile fix
             }
-            return new Entry((List<AbstractWidget>)ImmutableList.of((Object)debug4, (Object)debug3.createButton(debug0, debug1 / 2 - 155 + 160, 0, 150)));
+            return new Entry(ImmutableList.of(debug4, debug3.createButton(debug0, debug1 / 2 - 155 + 160, 0, 150))); // MagmaCube - decompile fix
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java b/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java
index fd346a2ea6f2fa01c41d018875fe23ad594c7ade..0549a8039b7a4c07f18280f3a66d4214c0935d30 100644
--- a/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java
@@ -77,7 +77,7 @@ extends GuiComponent {
         int debug9;
         int debug11;
         ClientPacketListener debug5 = this.minecraft.player.connection;
-        List debug6 = PLAYER_ORDERING.sortedCopy(debug5.getOnlinePlayers());
+        List<PlayerInfo> debug6 = PLAYER_ORDERING.sortedCopy(debug5.getOnlinePlayers()); // MagmaCube - decompile fix
         int debug7 = 0;
         int debug8 = 0;
         for (PlayerInfo debug10 : debug6) {
@@ -275,12 +275,7 @@ extends GuiComponent {
         public int compare(PlayerInfo debug1, PlayerInfo debug2) {
             PlayerTeam debug3 = debug1.getTeam();
             PlayerTeam debug4 = debug2.getTeam();
-            return ComparisonChain.start().compareTrueFirst(debug1.getGameMode() != GameType.SPECTATOR, debug2.getGameMode() != GameType.SPECTATOR).compare((Comparable)((Object)(debug3 != null ? debug3.getName() : "")), (Comparable)((Object)(debug4 != null ? debug4.getName() : ""))).compare((Object)debug1.getProfile().getName(), (Object)debug2.getProfile().getName(), String::compareToIgnoreCase).result();
-        }
-
-        @Override
-        public /* synthetic */ int compare(Object object, Object object2) {
-            return this.compare((PlayerInfo)object, (PlayerInfo)object2);
+            return ComparisonChain.start().compareTrueFirst(debug1.getGameMode() != GameType.SPECTATOR, debug2.getGameMode() != GameType.SPECTATOR).compare((Comparable)((Object)(debug3 != null ? debug3.getName() : "")), (Comparable)((Object)(debug4 != null ? debug4.getName() : ""))).compare(debug1.getProfile().getName(), debug2.getProfile().getName(), String::compareToIgnoreCase).result(); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/client/gui/components/events/ContainerEventHandler.java b/src/main/java/net/minecraft/client/gui/components/events/ContainerEventHandler.java
index d671b0f4f7f542d6aaac0e4e168ddb26adfd7632..3879847e5b2a3382c2663e3a4bb4152a76b088ab 100644
--- a/src/main/java/net/minecraft/client/gui/components/events/ContainerEventHandler.java
+++ b/src/main/java/net/minecraft/client/gui/components/events/ContainerEventHandler.java
@@ -36,7 +36,7 @@ public interface ContainerEventHandler extends GuiEventListener
     
     default boolean mouseReleased(final double debug1, final double debug3, final int debug5) {
         this.setDragging(false);
-        return this.getChildAt(debug1, debug3).filter(debug5 -> debug5.mouseReleased(debug1, debug3, debug5)).isPresent();
+        return this.getChildAt(debug1, debug3).filter(debug5l -> debug5l.mouseReleased(debug1, debug3, debug5)).isPresent(); // MagmaCube - decompile fix
     }
     
     default boolean mouseDragged(final double debug1, final double debug3, final int debug5, final double debug6, final double debug8) {
@@ -97,7 +97,7 @@ public interface ContainerEventHandler extends GuiEventListener
         }
         final ListIterator<? extends GuiEventListener> debug7 = debug4.listIterator(debug6);
         final BooleanSupplier debug8 = debug1 ? debug7::hasNext : debug7::hasPrevious;
-        final Supplier<? extends GuiEventListener> debug9 = (Supplier<? extends GuiEventListener>)(debug1 ? debug7::next : debug7::previous);
+        final Supplier<? extends GuiEventListener> debug9 = (debug1 ? debug7::next : debug7::previous); // MagmaCube - decompile fix
         while (debug8.getAsBoolean()) {
             final GuiEventListener debug10 = (GuiEventListener)debug9.get();
             if (debug10.changeFocus(debug1)) {
diff --git a/src/main/java/net/minecraft/client/gui/components/toasts/SystemToast.java b/src/main/java/net/minecraft/client/gui/components/toasts/SystemToast.java
index a4a68438ea3a06176c15b6d2adf7cc8a79467c3c..1bbb2046da3d598918e4b9e67a12d52302e57b8f 100644
--- a/src/main/java/net/minecraft/client/gui/components/toasts/SystemToast.java
+++ b/src/main/java/net/minecraft/client/gui/components/toasts/SystemToast.java
@@ -49,7 +49,7 @@ implements Toast {
     }
 
     private static ImmutableList<FormattedCharSequence> nullToEmpty(@Nullable Component debug0) {
-        return debug0 == null ? ImmutableList.of() : ImmutableList.of((Object)debug0.getVisualOrderText());
+        return debug0 == null ? ImmutableList.of() : ImmutableList.of(debug0.getVisualOrderText()); // MagmaCube - decompile fix
     }
 
     @Override
@@ -136,11 +136,6 @@ implements Toast {
         SystemToast.add(debug0.getToasts(), SystemToastIds.PACK_COPY_FAILURE, new TranslatableComponent("pack.copyFailure"), new TextComponent(debug1));
     }
 
-    @Override
-    public /* synthetic */ Object getToken() {
-        return this.getToken();
-    }
-
     public static enum SystemToastIds {
         TUTORIAL_HINT,
         NARRATOR_TOGGLE,
diff --git a/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java b/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java
index ce5ad69fcce798fc247e13eb7826ceb149733d39..6415182b613b10b5a434cc798ceafe83e6566b43 100644
--- a/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java
+++ b/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java
@@ -39,7 +39,7 @@ extends GuiComponent {
                 this.visible[debug2] = null;
             }
             if (this.visible[debug2] != null || this.queued.isEmpty()) continue;
-            this.visible[debug2] = new ToastInstance(this, this.queued.removeFirst());
+            this.visible[debug2] = new ToastInstance(this.queued.removeFirst()); // MagmaCube - decompile fix
         }
     }
 
@@ -69,15 +69,13 @@ extends GuiComponent {
         return this.minecraft;
     }
 
-    static class ToastInstance<T extends Toast> {
+    class ToastInstance<T extends Toast> { // MagmaCube - decompile fix
         private final T toast;
         private long animationTime = -1L;
         private long visibleTime = -1L;
         private Toast.Visibility visibility = Toast.Visibility.SHOW;
-        final /* synthetic */ ToastComponent this$0;
 
         private ToastInstance(T debug2) {
-            this.this$0 = var1_1;
             this.toast = debug2;
         }
 
@@ -98,19 +96,19 @@ extends GuiComponent {
             long debug4 = Util.getMillis();
             if (this.animationTime == -1L) {
                 this.animationTime = debug4;
-                this.visibility.playSound(this.this$0.minecraft.getSoundManager());
+                this.visibility.playSound(ToastComponent.this.minecraft.getSoundManager()); // MagmaCube - decompile fix
             }
             if (this.visibility == Toast.Visibility.SHOW && debug4 - this.animationTime <= 600L) {
                 this.visibleTime = debug4;
             }
             RenderSystem.pushMatrix();
             RenderSystem.translatef((float)debug1 - (float)this.toast.width() * this.getVisibility(debug4), debug2 * this.toast.height(), 800 + debug2);
-            Toast.Visibility debug6 = this.toast.render(debug3, this.this$0, debug4 - this.visibleTime);
+            Toast.Visibility debug6 = this.toast.render(debug3, ToastComponent.this, debug4 - this.visibleTime); // MagmaCube - decompile fix
             RenderSystem.popMatrix();
             if (debug6 != this.visibility) {
                 this.animationTime = debug4 - (long)((int)((1.0f - this.getVisibility(debug4)) * 600.0f));
                 this.visibility = debug6;
-                this.visibility.playSound(this.this$0.minecraft.getSoundManager());
+                this.visibility.playSound(ToastComponent.this.minecraft.getSoundManager()); // MagmaCube - decompile fix
             }
             return this.visibility == Toast.Visibility.HIDE && debug4 - this.animationTime > 600L;
         }
diff --git a/src/main/java/net/minecraft/client/gui/font/FontManager.java b/src/main/java/net/minecraft/client/gui/font/FontManager.java
index 4ad240c027c6827322c498e1197ca9943c20ee7a..46d96b2f919c178be891ae12b66ada8b3922755c 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontManager.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontManager.java
@@ -32,6 +32,8 @@ import com.google.common.collect.Maps;
 import net.minecraft.server.packs.resources.PreparableReloadListener;
 import net.minecraft.client.renderer.texture.TextureManager;
 import java.util.Map;
+import java.util.function.IntConsumer;
+
 import net.minecraft.resources.ResourceLocation;
 import org.apache.logging.log4j.Logger;
 
@@ -46,18 +48,18 @@ public class FontManager implements AutoCloseable
     private final PreparableReloadListener reloadListener;
     
     public FontManager(final TextureManager debug1) {
-        this.fontSets = (Map<ResourceLocation, FontSet>)Maps.newHashMap();
-        this.renames = (Map<ResourceLocation, ResourceLocation>)ImmutableMap.of();
+        this.fontSets = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.renames = ImmutableMap.of(); // MagmaCube - decompile fix
         this.reloadListener = new SimplePreparableReloadListener<Map<ResourceLocation, List<GlyphProvider>>>() {
             @Override
             protected Map<ResourceLocation, List<GlyphProvider>> prepare(final ResourceManager debug1, final ProfilerFiller debug2) {
                 debug2.startTick();
                 final Gson debug3 = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();
-                final Map<ResourceLocation, List<GlyphProvider>> debug4 = (Map<ResourceLocation, List<GlyphProvider>>)Maps.newHashMap();
+                final Map<ResourceLocation, List<GlyphProvider>> debug4 = Maps.newHashMap(); // MagmaCube - decompile fix
                 for (final ResourceLocation debug5 : debug1.listResources("font", debug0 -> debug0.endsWith(".json"))) {
                     final String debug6 = debug5.getPath();
-                    final ResourceLocation debug7 = new ResourceLocation(debug5.getNamespace(), debug6.substring("font/".length(), debug6.length() - ".json".length()));
-                    final List<GlyphProvider> debug8 = debug4.computeIfAbsent(debug7, debug0 -> Lists.newArrayList((Object[])new GlyphProvider[] { new AllMissingGlyphProvider() }));
+                        final ResourceLocation debug7 = new ResourceLocation(debug5.getNamespace(), debug6.substring("font/".length(), debug6.length() - ".json".length()));
+                        final List<GlyphProvider> debug8 = debug4.computeIfAbsent(debug7, debug0 -> Lists.newArrayList(new GlyphProvider[] { new AllMissingGlyphProvider() })); // MagmaCube - decompile fix
                     debug2.push(debug7::toString);
                     try {
                         for (final Resource debug9 : debug1.getResources(debug5)) {
@@ -96,21 +98,21 @@ public class FontManager implements AutoCloseable
                     }
                     debug2.push("caching");
                     final IntSet debug21 = (IntSet)new IntOpenHashSet();
+                    final List<GlyphProvider> list; // MagmaCube - decompile fix
                     for (final GlyphProvider debug22 : debug8) {
                         debug21.addAll((IntCollection)debug22.getSupportedGlyphs());
                     }
-                    final List list;
-                    final Iterator<GlyphProvider> iterator4;
-                    GlyphProvider debug23;
-                    debug21.forEach(debug1 -> {
-                        if (debug1 == 32) {
+                    debug21.forEach((IntConsumer) debug1l -> { // MagmaCube - decompile fix
+                        if (debug1l == 32) { // MagmaCube - decompile fix
                             return;
                         }
                         else {
-                            Lists.reverse(list).iterator();
+                            // MagmaCube start - decompile fix
+                            Iterator<GlyphProvider> iterator4 = Lists.reverse(debug8).iterator(); // MagmaCube - todo: check if it works
                             while (iterator4.hasNext()) {
-                                debug23 = iterator4.next();
-                                if (debug23.getGlyph(debug1) != null) {
+                                GlyphProvider debug23 = iterator4.next();
+                                if (debug23.getGlyph(debug1l) != null) {
+                                    // MagmaCube end - decompile fix
                                     break;
                                 }
                             }
@@ -131,11 +133,12 @@ public class FontManager implements AutoCloseable
                 FontManager.this.fontSets.values().forEach(FontSet::close);
                 FontManager.this.fontSets.clear();
                 debug3.popPush("reloading");
-                final FontSet debug4;
-                debug1.forEach((debug1, debug2) -> {
-                    debug4 = new FontSet(FontManager.this.textureManager, debug1);
-                    debug4.reload(Lists.reverse(debug2));
-                    FontManager.this.fontSets.put(debug1, debug4);
+                // MagmaCube start - decompile fix
+                debug1.forEach((debug1l, debug2l) -> {
+                    FontSet debug4 = new FontSet(FontManager.this.textureManager, debug1l);
+                    debug4.reload(Lists.reverse(debug2l));
+                    FontManager.this.fontSets.put(debug1l, debug4);
+                    // MagmaCube end - decompile fix
                     return;
                 });
                 debug3.pop();
@@ -148,7 +151,7 @@ public class FontManager implements AutoCloseable
             }
         };
         this.textureManager = debug1;
-        this.missingFontSet = Util.make(new FontSet(debug1, FontManager.MISSING_FONT), debug0 -> debug0.reload(Lists.newArrayList((Object[])new GlyphProvider[] { new AllMissingGlyphProvider() })));
+        this.missingFontSet = Util.make(new FontSet(debug1, FontManager.MISSING_FONT), debug0 -> debug0.reload(Lists.newArrayList(new GlyphProvider[] { new AllMissingGlyphProvider() }))); // MagmaCube - decompile fix
     }
     
     public void setRenames(final Map<ResourceLocation, ResourceLocation> debug1) {
diff --git a/src/main/java/net/minecraft/client/gui/font/FontSet.java b/src/main/java/net/minecraft/client/gui/font/FontSet.java
index 3aacc324fa95b316d7c7b902ca66f66dacb7caba..152ef5122ef8a2f9c2b3a560b21f930fb5e83214 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontSet.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontSet.java
@@ -5,6 +5,7 @@ import java.util.Set;
 import java.util.Iterator;
 import it.unimi.dsi.fastutil.ints.IntSet;
 import java.util.function.Consumer;
+import java.util.function.IntConsumer;
 import java.util.function.Predicate;
 import it.unimi.dsi.fastutil.ints.IntArrayList;
 import net.minecraft.util.Mth;
@@ -43,11 +44,11 @@ public class FontSet implements AutoCloseable
     private final List<FontTexture> textures;
     
     public FontSet(final TextureManager debug1, final ResourceLocation debug2) {
-        this.providers = (List<GlyphProvider>)Lists.newArrayList();
+        this.providers = Lists.newArrayList(); // MagmaCube - decompile fix
         this.glyphs = (Int2ObjectMap<BakedGlyph>)new Int2ObjectOpenHashMap();
         this.glyphInfos = (Int2ObjectMap<GlyphInfo>)new Int2ObjectOpenHashMap();
         this.glyphsByWidth = (Int2ObjectMap<IntList>)new Int2ObjectOpenHashMap();
-        this.textures = (List<FontTexture>)Lists.newArrayList();
+        this.textures = Lists.newArrayList(); // MagmaCube - decompile fix
         this.textureManager = debug1;
         this.name = debug2;
     }
@@ -64,16 +65,12 @@ public class FontSet implements AutoCloseable
         for (final GlyphProvider debug5 : debug1) {
             debug4.addAll((IntCollection)debug5.getSupportedGlyphs());
         }
-        final Set<GlyphProvider> debug6 = (Set<GlyphProvider>)Sets.newHashSet();
-        final Iterator<GlyphProvider> iterator2;
-        GlyphProvider debug7;
-        GlyphInfo debug8;
-        final Set<GlyphProvider> set;
-        debug4.forEach(debug3 -> {
-            debug1.iterator();
+        final Set<GlyphProvider> set = Sets.newHashSet(); // MagmaCube - decompile fix
+        debug4.forEach((IntConsumer) debug3 -> { // MagmaCube - decompile fix
+            Iterator<GlyphProvider> iterator2 = debug1.iterator(); // MagmaCube - decompile fix
             while (iterator2.hasNext()) {
-                debug7 = iterator2.next();
-                debug8 = ((debug3 == 32) ? FontSet.SPACE_INFO : debug7.getGlyph(debug3));
+                GlyphProvider debug7 = iterator2.next(); // MagmaCube - decompile fix
+                GlyphInfo debug8 = ((debug3 == 32) ? FontSet.SPACE_INFO : debug7.getGlyph(debug3)); // MagmaCube - decompile fix
                 if (debug8 != null) {
                     set.add(debug7);
                     if (debug8 != MissingGlyph.INSTANCE) {
@@ -87,7 +84,7 @@ public class FontSet implements AutoCloseable
             }
             return;
         });
-        debug1.stream().filter(debug6::contains).forEach(this.providers::add);
+        debug1.stream().filter(set::contains).forEach(this.providers::add); // MagmaCube - decompile fix
     }
     
     @Override
@@ -111,7 +108,7 @@ public class FontSet implements AutoCloseable
     }
     
     public GlyphInfo getGlyphInfo(final int debug1) {
-        return (GlyphInfo)this.glyphInfos.computeIfAbsent(debug1, debug1 -> (debug1 == 32) ? FontSet.SPACE_INFO : this.getRaw(debug1));
+        return (GlyphInfo)this.glyphInfos.computeIfAbsent(debug1, debug1l -> (debug1l == 32) ? FontSet.SPACE_INFO : this.getRaw(debug1l)); // MagmaCube - decompile fix
     }
     
     private RawGlyph getRaw(final int debug1) {
@@ -125,7 +122,7 @@ public class FontSet implements AutoCloseable
     }
     
     public BakedGlyph getGlyph(final int debug1) {
-        return (BakedGlyph)this.glyphs.computeIfAbsent(debug1, debug1 -> (debug1 == 32) ? FontSet.SPACE_GLYPH : this.stitch(this.getRaw(debug1)));
+        return (BakedGlyph)this.glyphs.computeIfAbsent(debug1, debug1l -> (debug1l == 32) ? FontSet.SPACE_GLYPH : this.stitch(this.getRaw(debug1l))); // MagmaCube - decompile fix
     }
     
     private BakedGlyph stitch(final RawGlyph debug1) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/CreateBuffetWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/CreateBuffetWorldScreen.java
index ca158aa7d552faa63905c8cb97a7c23a12feb459..c9777e2eec5e76422d71bf3653dda08037330f5c 100644
--- a/src/main/java/net/minecraft/client/gui/screens/CreateBuffetWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/CreateBuffetWorldScreen.java
@@ -78,7 +78,7 @@ extends Screen {
     }
 
     class BiomeList
-    extends ObjectSelectionList<Entry> {
+    extends ObjectSelectionList<BiomeList.Entry> { // MagmaCube - decompile fix
         private BiomeList() {
             super(CreateBuffetWorldScreen.this.minecraft, CreateBuffetWorldScreen.this.width, CreateBuffetWorldScreen.this.height, 40, CreateBuffetWorldScreen.this.height - 37, 16);
             CreateBuffetWorldScreen.this.biomes.entrySet().stream().sorted(Comparator.comparing(debug0 -> ((ResourceKey)debug0.getKey()).location().toString())).forEach(debug1 -> this.addEntry(new Entry((Biome)debug1.getValue())));
diff --git a/src/main/java/net/minecraft/client/gui/screens/CreateFlatWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/CreateFlatWorldScreen.java
index 11e148be80940c53e04bd3ac237f224a8bf1b2d6..e1ab2b65d61c45e65d5d747082c02ecbfcd193af 100644
--- a/src/main/java/net/minecraft/client/gui/screens/CreateFlatWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/CreateFlatWorldScreen.java
@@ -117,7 +117,7 @@ extends Screen {
     }
 
     class DetailsList
-    extends ObjectSelectionList<Entry> {
+    extends ObjectSelectionList<DetailsList.Entry> { // MagmaCube - decompile fix
         public DetailsList() {
             super(CreateFlatWorldScreen.this.minecraft, CreateFlatWorldScreen.this.width, CreateFlatWorldScreen.this.height, 43, CreateFlatWorldScreen.this.height - 60, 24);
             for (int debug2 = 0; debug2 < CreateFlatWorldScreen.this.generator.getLayersInfo().size(); ++debug2) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java b/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java
index bb2ce6333e3494fea44cb25d439d3cf2f1c0b19e..ae512ae127b2fa9b6ce28d0b015f98b2c64eac8b 100644
--- a/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java
@@ -71,7 +71,7 @@ extends OptionsSubScreen {
     }
 
     class LanguageSelectionList
-    extends ObjectSelectionList<Entry> {
+    extends ObjectSelectionList<LanguageSelectionList.Entry> { // MagmaCube - decompile fix
         public LanguageSelectionList(Minecraft debug2) {
             super(debug2, LanguageSelectScreen.this.width, LanguageSelectScreen.this.height, 32, LanguageSelectScreen.this.height - 65 + 4, 18);
             for (LanguageInfo debug4 : LanguageSelectScreen.this.languageManager.getLanguages()) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
index c83bc231586a38dcbadae056ea9088b6634e42bd..96863800992484f29cacde4249db76361ce14a66 100644
--- a/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
@@ -123,7 +123,6 @@ extends Screen {
     }
 
     public static FlatLevelGeneratorSettings fromString(Registry<Biome> debug0, String debug1, FlatLevelGeneratorSettings debug2) {
-        Object debug7;
         Iterator debug3 = Splitter.on((char)';').split((CharSequence)debug1).iterator();
         if (!debug3.hasNext()) {
             return FlatLevelGeneratorSettings.getDefault(debug0);
@@ -136,7 +135,7 @@ extends Screen {
         ResourceKey<Biome> debug6 = Biomes.PLAINS;
         if (debug3.hasNext()) {
             try {
-                debug7 = new ResourceLocation((String)debug3.next());
+                ResourceLocation debug7 = new ResourceLocation((String)debug3.next()); // MagmaCube - decompile fix
                 debug6 = ResourceKey.create(Registry.BIOME_REGISTRY, (ResourceLocation)debug7);
                 debug0.getOptional(debug6).orElseThrow(() -> PresetFlatWorldScreen.lambda$fromString$0((ResourceLocation)debug7));
             }
@@ -144,7 +143,7 @@ extends Screen {
                 LOGGER.error("Error while parsing flat world string => {}", (Object)debug72.getMessage());
             }
         }
-        debug7 = debug6;
+        ResourceKey<Biome> debug7 = debug6; // MagmaCube - decompile fix
         debug5.setBiome(() -> (Biome)debug0.getOrThrow((ResourceKey<Biome>)debug7));
         return debug5;
     }
@@ -232,21 +231,20 @@ extends Screen {
 
     private static void preset(Component debug0, ItemLike debug1, ResourceKey<Biome> debug2, List<StructureFeature<?>> debug3, boolean debug4, boolean debug5, boolean debug62, FlatLayerInfo ... debug7) {
         PRESETS.add(new PresetInfo(debug1.asItem(), debug0, debug6 -> {
-            Object debug92;
-            HashMap debug7 = Maps.newHashMap();
-            for (Object debug92 : debug3) {
-                debug7.put(debug92, StructureSettings.DEFAULTS.get(debug92));
+            HashMap debug7l = Maps.newHashMap(); // MagmaCube - decompile fix
+            for (StructureFeature<?> debug92 : debug3) { // MagmaCube - decompile fix
+                debug7l.put(debug92, StructureSettings.DEFAULTS.get(debug92)); // MagmaCube - decompile fix
             }
-            StructureSettings debug8 = new StructureSettings(debug4 ? Optional.of(StructureSettings.DEFAULT_STRONGHOLD) : Optional.empty(), debug7);
-            debug92 = new FlatLevelGeneratorSettings(debug8, (Registry<Biome>)debug6);
+            StructureSettings debug8 = new StructureSettings(debug4 ? Optional.of(StructureSettings.DEFAULT_STRONGHOLD) : Optional.empty(), debug7l); // MagmaCube - decompile fix
+            FlatLevelGeneratorSettings debug92 = new FlatLevelGeneratorSettings(debug8, (Registry<Biome>)debug6); // MagmaCube - decompile fix
             if (debug5) {
                 ((FlatLevelGeneratorSettings)debug92).setDecoration();
             }
             if (debug62) {
                 ((FlatLevelGeneratorSettings)debug92).setAddLakes();
             }
-            for (int debug10 = debug7.length - 1; debug10 >= 0; --debug10) {
-                ((FlatLevelGeneratorSettings)debug92).getLayersInfo().add(debug7[debug10]);
+            for (int debug10 = debug7.length - 1; debug10 >= 0; --debug10) { // MagmaCube - decompile fix
+                ((FlatLevelGeneratorSettings)debug92).getLayersInfo().add((FlatLayerInfo) debug7[debug10]); // MagmaCube - decompile fix
             }
             ((FlatLevelGeneratorSettings)debug92).setBiome(() -> (Biome)debug6.getOrThrow(debug2));
             ((FlatLevelGeneratorSettings)debug92).updateLayers();
@@ -287,7 +285,7 @@ extends Screen {
     }
 
     class PresetsList
-    extends ObjectSelectionList<Entry> {
+    extends ObjectSelectionList<PresetsList.Entry> { // MagmaCube - decompile fix
         public PresetsList() {
             super(PresetFlatWorldScreen.this.minecraft, PresetFlatWorldScreen.this.width, PresetFlatWorldScreen.this.height, 80, PresetFlatWorldScreen.this.height - 37, 24);
             for (int debug2 = 0; debug2 < PRESETS.size(); ++debug2) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/Screen.java b/src/main/java/net/minecraft/client/gui/screens/Screen.java
index 41b4fa64a8c749e6ff65e976236bf3152c1a1f98..8a185d46e58cbbb2d9159027511dfed07728a586 100644
--- a/src/main/java/net/minecraft/client/gui/screens/Screen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/Screen.java
@@ -58,7 +58,7 @@ extends AbstractContainerEventHandler
 implements TickableWidget,
 Widget {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final Set<String> ALLOWED_PROTOCOLS = Sets.newHashSet((Object[])new String[]{"http", "https"});
+    private static final Set<String> ALLOWED_PROTOCOLS = Sets.newHashSet(new String[]{"http", "https"}); // MagmaCube - decompile fix
     protected final Component title;
     protected final List<GuiEventListener> children = Lists.newArrayList();
     @Nullable
@@ -145,20 +145,18 @@ Widget {
      * WARNING - void declaration
      */
     public void renderTooltip(PoseStack debug1, List<? extends FormattedCharSequence> debug2, int debug3, int debug4) {
-        int n;
-        int debug8;
         if (debug2.isEmpty()) {
             return;
         }
         int debug5 = 0;
         for (FormattedCharSequence formattedCharSequence : debug2) {
-            debug8 = this.font.width(formattedCharSequence);
+            int debug8 = this.font.width(formattedCharSequence); // MagmaCube - decompile fix
             if (debug8 <= debug5) continue;
             debug5 = debug8;
         }
         int debug6 = debug3 + 12;
-        int n2 = debug4 - 12;
-        debug8 = debug5;
+        int n = debug4 - 12; // MagmaCube - decompile fix
+        int debug8 = debug5; // MagmaCube - decompile fix
         int debug9 = 8;
         if (debug2.size() > 1) {
             debug9 += 2 + (debug2.size() - 1) * 10;
@@ -166,7 +164,7 @@ Widget {
         if (debug6 + debug5 > this.width) {
             debug6 -= 28 + debug5;
         }
-        if (n2 + debug9 + 6 > this.height) {
+        if (n + debug9 + 6 > this.height) { // MagmaCube - decompile fix
             n = this.height - debug9 - 6;
         }
         debug1.pushPose();
@@ -202,13 +200,12 @@ Widget {
         for (int debug18 = 0; debug18 < debug2.size(); ++debug18) {
             FormattedCharSequence debug19 = debug2.get(debug18);
             if (debug19 != null) {
-                void var7_11;
-                this.font.drawInBatch(debug19, (float)debug6, (float)var7_11, -1, true, debug16, (MultiBufferSource)debug17, false, 0, 0xF000F0);
+                this.font.drawInBatch(debug19, (float)debug6, (float)n, -1, true, debug16, (MultiBufferSource)debug17, false, 0, 0xF000F0); // MagmaCube - decompile fix
             }
             if (debug18 == 0) {
-                var7_11 += 2;
+                n += 2;
             }
-            var7_11 += 10;
+            n += 10;
         }
         debug17.endBatch();
         debug1.popPose();
diff --git a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
index f91a53c9657dddfc49a80cb2185fe80067233630..a188597553cb646623c07ca5b366ca0a400f5d85 100644
--- a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
@@ -136,17 +136,22 @@ extends Screen {
         }
     }
 
-    private void createNormalMenuOptions(int debug12, int debug22) {
-        this.addButton(new Button(this.width / 2 - 100, debug12, 200, 20, new TranslatableComponent("menu.singleplayer"), debug1 -> this.minecraft.setScreen(new SelectWorldScreen(this))));
-        boolean debug32 = this.minecraft.allowsMultiplayer();
-        Button.OnTooltip debug42 = debug32 ? Button.NO_TOOLTIP : (debug1, debug2, debug3, debug4) -> {
-            if (!debug1.active) {
-                this.renderTooltip(debug2, this.minecraft.font.split(new TranslatableComponent("title.multiplayer.disabled"), Math.max(this.width / 2 - 43, 170)), debug3, debug4);
+    // MagmaCube start - decompile fix
+    private void createNormalMenuOptions(int debug1, int debug2) {
+        this.addButton(new Button(this.width / 2 - 100, debug1, 200, 20, new TranslatableComponent("menu.singleplayer"), debug1l -> this.minecraft.setScreen(new SelectWorldScreen(this))));
+        boolean debug3 = this.minecraft.allowsMultiplayer();
+        Button.OnTooltip debug4 = debug3 ? Button.NO_TOOLTIP : (debug1l, debug2l, debug3l, debug4l) -> {
+            if (!debug1l.active) {
+                this.renderTooltip(debug2l, this.minecraft.font.split(new TranslatableComponent("title.multiplayer.disabled"), Math.max(this.width / 2 - 43, 170)), debug3l, debug4l);
             }
         };
-        this.addButton(new Button((int)(this.width / 2 - 100), (int)(debug12 + debug22 * 1), (int)200, (int)20, (Component)new TranslatableComponent((String)"menu.multiplayer"), (Button.OnPress)(Button.OnPress)LambdaMetafactory.metafactory(null, null, null, (Lnet/minecraft/client/gui/components/Button;)V, lambda$createNormalMenuOptions$6(net.minecraft.client.gui.components.Button ), (Lnet/minecraft/client/gui/components/Button;)V)((TitleScreen)this), (Button.OnTooltip)debug42)).active = debug32;
-        this.addButton(new Button((int)(this.width / 2 - 100), (int)(debug12 + debug22 * 2), (int)200, (int)20, (Component)new TranslatableComponent((String)"menu.online"), (Button.OnPress)(Button.OnPress)LambdaMetafactory.metafactory(null, null, null, (Lnet/minecraft/client/gui/components/Button;)V, lambda$createNormalMenuOptions$7(net.minecraft.client.gui.components.Button ), (Lnet/minecraft/client/gui/components/Button;)V)((TitleScreen)this), (Button.OnTooltip)debug42)).active = debug32;
+        ((Button)addButton(new Button(this.width / 2 - 100, debug1 + debug2 * 1, 200, 20, (Component)new TranslatableComponent("menu.multiplayer"), debug1l -> {
+            Screen debug2l = this.minecraft.options.skipMultiplayerWarning ? (Screen)new JoinMultiplayerScreen(this) : (Screen)new SafetyScreen(this);
+            this.minecraft.setScreen(debug2l);
+        }, debug4))).active = debug3;
+        ((Button)addButton(new Button(this.width / 2 - 100, debug1 + debug2 * 2, 200, 20, (Component)new TranslatableComponent("menu.online"), debug1l -> realmsButtonClicked(), debug4))).active = debug3;
     }
+    // MagmaCube end - decompile fix
 
     private void createDemoMenuOptions(int debug12, int debug22) {
         boolean debug3 = this.checkDemoWorldPresence();
@@ -154,14 +159,14 @@ extends Screen {
             if (debug3) {
                 this.minecraft.loadLevel("Demo_World");
             } else {
-                RegistryAccess.RegistryHolder debug3 = RegistryAccess.builtin();
-                this.minecraft.createLevel("Demo_World", MinecraftServer.DEMO_SETTINGS, debug3, WorldGenSettings.demoSettings(debug3));
+                RegistryAccess.RegistryHolder debug3l = RegistryAccess.builtin(); // MagmaCube - decompile fix
+                this.minecraft.createLevel("Demo_World", MinecraftServer.DEMO_SETTINGS, debug3l, WorldGenSettings.demoSettings(debug3l)); // MagmaCube - decompile fix
             }
         }));
         this.resetDemoButton = this.addButton(new Button(this.width / 2 - 100, debug12 + debug22 * 1, 200, 20, new TranslatableComponent("menu.resetdemo"), debug1 -> {
             LevelStorageSource debug2 = this.minecraft.getLevelSource();
-            try (LevelStorageSource.LevelStorageAccess debug3 = debug2.createAccess("Demo_World");){
-                LevelSummary debug5 = debug3.getSummary();
+            try (LevelStorageSource.LevelStorageAccess debug3l = debug2.createAccess("Demo_World");){ // MagmaCube - decompile fix
+                LevelSummary debug5 = debug3l.getSummary(); // MagmaCube - decompile fix
                 if (debug5 != null) {
                     this.minecraft.setScreen(new ConfirmScreen(this::confirmDemo, new TranslatableComponent("selectWorld.deleteQuestion"), new TranslatableComponent("selectWorld.deleteWarning", debug5.getLevelName()), new TranslatableComponent("selectWorld.deleteButton"), CommonComponents.GUI_CANCEL));
                 }
diff --git a/src/main/java/net/minecraft/client/gui/screens/VideoSettingsScreen.java b/src/main/java/net/minecraft/client/gui/screens/VideoSettingsScreen.java
index 42bd532a0bce02296c66f9ecf69578ce2344b330..e1074394978c37dfea126082ab933c21c07ed632 100644
--- a/src/main/java/net/minecraft/client/gui/screens/VideoSettingsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/VideoSettingsScreen.java
@@ -101,12 +101,12 @@ extends OptionsSubScreen {
                     debug7.add(NEW_LINE);
                     debug7.add(new TranslatableComponent("options.graphics.warning.version", debug10).withStyle(ChatFormatting.GRAY));
                 }
-                this.minecraft.setScreen(new PopupScreen(WARNING_TITLE, debug7, (ImmutableList<PopupScreen.ButtonOption>)ImmutableList.of((Object)new PopupScreen.ButtonOption(BUTTON_ACCEPT, debug1 -> {
+                this.minecraft.setScreen(new PopupScreen(WARNING_TITLE, debug7, ImmutableList.of(new PopupScreen.ButtonOption(BUTTON_ACCEPT, debug1 -> { // MagmaCube - decompile fix
                     this.options.graphicsMode = GraphicsStatus.FABULOUS;
                     Minecraft.getInstance().levelRenderer.allChanged();
                     this.gpuWarnlistManager.dismissWarning();
                     this.minecraft.setScreen(this);
-                }), (Object)new PopupScreen.ButtonOption(BUTTON_CANCEL, debug1 -> {
+                }), new PopupScreen.ButtonOption(BUTTON_CANCEL, debug1 -> { // MagmaCube - decompile fix
                     this.gpuWarnlistManager.dismissWarningAndSkipFabulous();
                     this.minecraft.setScreen(this);
                 }))));
diff --git a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
index 1a9b5825ab28f9064f1a169687b7c586fd7b4d2e..338e37bf68cd0aaad1885c907d94abafb3a704a9 100644
--- a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
@@ -160,9 +160,8 @@ implements StatsUpdateListener {
     }
 
     class MobsStatisticsList
-    extends ObjectSelectionList<MobRow> {
+    extends ObjectSelectionList<MobsStatisticsList.MobRow> { // MagmaCube - decompile fix
         public MobsStatisticsList(Minecraft debug2) {
-            StatsScreen.this.font.getClass();
             super(debug2, StatsScreen.this.width, StatsScreen.this.height, 32, StatsScreen.this.height - 64, 9 * 4);
             for (EntityType entityType : Registry.ENTITY_TYPE) {
                 if (StatsScreen.this.stats.getValue(Stats.ENTITY_KILLED.get(entityType)) <= 0 && StatsScreen.this.stats.getValue(Stats.ENTITY_KILLED_BY.get(entityType)) <= 0) continue;
@@ -219,7 +218,7 @@ implements StatsUpdateListener {
     }
 
     class ItemStatisticsList
-    extends ObjectSelectionList<ItemRow> {
+    extends ObjectSelectionList<ItemStatisticsList.ItemRow> { // MagmaCube - decompile fix
         protected final List<StatType<Block>> blockColumns;
         protected final List<StatType<Item>> itemColumns;
         private final int[] iconOffsets;
@@ -231,18 +230,17 @@ implements StatsUpdateListener {
         protected int sortOrder;
 
         public ItemStatisticsList(Minecraft debug2) {
-            boolean debug6;
             super(debug2, StatsScreen.this.width, StatsScreen.this.height, 32, StatsScreen.this.height - 64, 20);
             this.iconOffsets = new int[]{3, 4, 1, 2, 5, 6};
             this.headerPressed = -1;
             this.itemStatSorter = new ItemComparator();
             this.blockColumns = Lists.newArrayList();
             this.blockColumns.add(Stats.BLOCK_MINED);
-            this.itemColumns = Lists.newArrayList((Object[])new StatType[]{Stats.ITEM_BROKEN, Stats.ITEM_CRAFTED, Stats.ITEM_USED, Stats.ITEM_PICKED_UP, Stats.ITEM_DROPPED});
+            this.itemColumns = Lists.newArrayList(new StatType[]{Stats.ITEM_BROKEN, Stats.ITEM_CRAFTED, Stats.ITEM_USED, Stats.ITEM_PICKED_UP, Stats.ITEM_DROPPED}); // MagmaCube - decompile fix
             this.setRenderHeader(true, 20);
             Set debug3 = Sets.newIdentityHashSet();
             for (Item item : Registry.ITEM) {
-                debug6 = false;
+                boolean debug6 = false;
                 for (StatType<Item> statType : this.itemColumns) {
                     if (!statType.contains(item) || StatsScreen.this.stats.getValue(statType.get(item)) <= 0) continue;
                     debug6 = true;
@@ -251,8 +249,8 @@ implements StatsUpdateListener {
                 debug3.add(item);
             }
             for (Block block : Registry.BLOCK) {
-                debug6 = false;
-                for (StatType<ItemLike> statType : this.blockColumns) {
+                boolean debug6 = false;
+                for (StatType<Block> statType : this.blockColumns) { // MagmaCube - decompile fix
                     if (!statType.contains(block) || StatsScreen.this.stats.getValue(statType.get(block)) <= 0) continue;
                     debug6 = true;
                 }
@@ -428,11 +426,11 @@ implements StatsUpdateListener {
                     debug3 = 0;
                     debug4 = 0;
                 } else if (ItemStatisticsList.this.blockColumns.contains(ItemStatisticsList.this.sortColumn)) {
-                    StatType<?> debug5 = ItemStatisticsList.this.sortColumn;
+                    StatType debug5 = ItemStatisticsList.this.sortColumn; // MagmaCube - decompile fix
                     debug3 = debug1 instanceof BlockItem ? StatsScreen.this.stats.getValue(debug5, ((BlockItem)debug1).getBlock()) : -1;
                     debug4 = debug2 instanceof BlockItem ? StatsScreen.this.stats.getValue(debug5, ((BlockItem)debug2).getBlock()) : -1;
                 } else {
-                    StatType<?> debug5 = ItemStatisticsList.this.sortColumn;
+                    StatType debug5 = ItemStatisticsList.this.sortColumn; // MagmaCube - decompile fix
                     debug3 = StatsScreen.this.stats.getValue(debug5, debug1);
                     debug4 = StatsScreen.this.stats.getValue(debug5, debug2);
                 }
@@ -441,19 +439,14 @@ implements StatsUpdateListener {
                 }
                 return ItemStatisticsList.this.sortOrder * Integer.compare(debug3, debug4);
             }
-
-            @Override
-            public /* synthetic */ int compare(Object object, Object object2) {
-                return this.compare((Item)object, (Item)object2);
-            }
         }
     }
 
     class GeneralStatisticsList
-    extends ObjectSelectionList<Entry> {
+    extends ObjectSelectionList<GeneralStatisticsList.Entry> { // MagmaCube - decompile fix
         public GeneralStatisticsList(Minecraft debug2) {
             super(debug2, StatsScreen.this.width, StatsScreen.this.height, 32, StatsScreen.this.height - 64, 10);
-            ObjectArrayList debug3 = new ObjectArrayList(Stats.CUSTOM.iterator());
+            ObjectArrayList<Stat<ResourceLocation>> debug3 = new ObjectArrayList<>(Stats.CUSTOM.iterator()); // MagmaCube - decompile fix
             debug3.sort(Comparator.comparing(debug0 -> I18n.get(StatsScreen.getTranslationKey(debug0), new Object[0])));
             for (Stat debug5 : debug3) {
                 this.addEntry(new Entry(debug5));
diff --git a/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementWidget.java b/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementWidget.java
index 19d1f4159860bfb96da50fece0ba340ceb8d8107..e15763811a8acf2e14e013ebf6b9ee034e17dca2 100644
--- a/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementWidget.java
+++ b/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementWidget.java
@@ -130,16 +130,16 @@ extends GuiComponent {
      */
     public void draw(PoseStack debug1, int debug2, int debug3) {
         if (!this.display.isHidden() || this.progress != null && this.progress.isDone()) {
-            void var5_8;
             float debug4;
             float f = debug4 = this.progress == null ? 0.0f : this.progress.getPercent();
+            AdvancementWidgetType advancementWidgetType; // MagmaCube - decompile fix
             if (debug4 >= 1.0f) {
-                AdvancementWidgetType advancementWidgetType = AdvancementWidgetType.OBTAINED;
+                advancementWidgetType = AdvancementWidgetType.OBTAINED; // MagmaCube - decompile fix
             } else {
-                AdvancementWidgetType advancementWidgetType = AdvancementWidgetType.UNOBTAINED;
+                advancementWidgetType = AdvancementWidgetType.UNOBTAINED; // MagmaCube - decompile fix
             }
             this.minecraft.getTextureManager().bind(WIDGETS_LOCATION);
-            this.blit(debug1, debug2 + this.x + 3, debug3 + this.y, this.display.getFrame().getTexture(), 128 + var5_8.getIndex() * 26, 26, 26);
+            this.blit(debug1, debug2 + this.x + 3, debug3 + this.y, this.display.getFrame().getTexture(), 128 + advancementWidgetType.getIndex() * 26, 26, 26); // MagmaCube - decompile fix
             this.minecraft.getItemRenderer().renderAndDecorateFakeItem(this.display.getIcon(), debug2 + this.x + 8, debug3 + this.y + 5);
         }
         for (AdvancementWidget advancementWidget : this.children) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java b/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java
index d2358f0e5d30633840a2bdb5ebe8be91f51d197b..51ebfb30876ad3e01dc3adbd9c0ae087887355e5 100644
--- a/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java
@@ -26,7 +26,7 @@ import net.minecraft.network.chat.TranslatableComponent;
 import org.apache.commons.lang3.ArrayUtils;
 
 public class ControlList
-extends ContainerObjectSelectionList<Entry> {
+extends ContainerObjectSelectionList<ControlList.Entry> { // MagmaCube - decompile fix
     private final ControlsScreen controlsScreen;
     private int maxNameWidth;
 
@@ -127,7 +127,7 @@ extends ContainerObjectSelectionList<Entry> {
 
         @Override
         public List<? extends GuiEventListener> children() {
-            return ImmutableList.of((Object)this.changeButton, (Object)this.resetButton);
+            return ImmutableList.of(this.changeButton, this.resetButton); // MagmaCube - decompile fix
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java
index 0402b5776431c2c3d32b4ac621fb5c660c986a44..8687564ce16faf8526b9b00b75c0b1ab158663f8 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java
@@ -116,7 +116,7 @@ implements MenuAccess<T> {
                 this.renderSlot(debug1, (Slot)debug10);
             }
             if (!this.isHovering((Slot)debug10, debug2, debug3) || !((Slot)debug10).isActive()) continue;
-            this.hoveredSlot = debug10;
+            this.hoveredSlot = (Slot) debug10; // MagmaCube - decompile fix
             RenderSystem.disableDepthTest();
             debug11 = ((Slot)debug10).x;
             debug12 = ((Slot)debug10).y;
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/BookEditScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/BookEditScreen.java
index dec9d4befc7213f4f9a1085a27c83b1be4a60b2f..24d8b6ca03be98c4c638b712d83defb50f5a1ded 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/BookEditScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/BookEditScreen.java
@@ -36,8 +36,6 @@ import net.minecraft.client.gui.chat.NarratorChatListener;
 import net.minecraft.client.gui.components.Button;
 import net.minecraft.client.gui.font.TextFieldHelper;
 import net.minecraft.client.gui.screens.Screen;
-import net.minecraft.client.gui.screens.inventory.BookViewScreen;
-import net.minecraft.client.gui.screens.inventory.PageButton;
 import net.minecraft.client.renderer.Rect2i;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
@@ -84,7 +82,7 @@ extends Screen {
     private Button cancelButton;
     private final InteractionHand hand;
     @Nullable
-    private DisplayCache displayCache = DisplayCache.access$000();
+    private DisplayCache displayCache = DisplayCache.EMPTY; // MagmaCube - decompile fix
     private Component pageMsg = TextComponent.EMPTY;
     private final Component ownerText;
 
@@ -541,11 +539,11 @@ extends Screen {
         int debug2 = this.pageEdit.getCursorPos();
         int debug3 = this.pageEdit.getSelectionPos();
         IntArrayList debug4 = new IntArrayList();
-        ArrayList debug5 = Lists.newArrayList();
+        ArrayList<LineInfo> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
         MutableInt debug6 = new MutableInt();
         MutableBoolean debug7 = new MutableBoolean();
         StringSplitter debug8 = this.font.getSplitter();
-        debug8.splitLines(debug1, 114, Style.EMPTY, true, (arg_0, arg_1, arg_2) -> this.lambda$rebuildDisplayCache$10(debug6, debug1, debug7, (IntList)debug4, debug5, arg_0, arg_1, arg_2));
+        debug8.splitLines(debug1, 114, Style.EMPTY, true, (arg_0, arg_1, arg_2) -> this._lambda$rebuildDisplayCache$10(debug6, debug1, debug7, (IntList)debug4, debug5, arg_0, arg_1, arg_2)); // MagmaCube - decompile fix
         int[] debug9 = debug4.toIntArray();
         boolean bl = debug10 = debug2 == debug1.length();
         if (debug10 && debug7.isTrue()) {
@@ -558,7 +556,7 @@ extends Screen {
             this.font.getClass();
             debug11 = new Pos2i(debug13, debug12 * 9);
         }
-        ArrayList debug12 = Lists.newArrayList();
+        ArrayList<Rect2i> debug12 = Lists.newArrayList(); // MagmaCube - decompile fix
         if (debug2 != debug3) {
             int debug16;
             debug13 = Math.min(debug2, debug3);
@@ -618,11 +616,11 @@ extends Screen {
         return new Rect2i(debug5, debug7, debug6 - debug5, debug8 - debug7);
     }
 
-    private /* synthetic */ void lambda$rebuildDisplayCache$10(MutableInt debug1, String debug2, MutableBoolean debug3, IntList debug4, List debug5, Style debug6, int debug7, int debug8) {
+    private /* synthetic */ void _lambda$rebuildDisplayCache$10(MutableInt debug1, String debug2, MutableBoolean debug3, IntList debug4, List debug5, Style debug6, int debug7, int debug8) {
         int debug9 = debug1.getAndIncrement();
         String debug10 = debug2.substring(debug7, debug8);
-        debug3.setValue(debug10.endsWith("Â¥n"));
-        String debug11 = StringUtils.stripEnd((String)debug10, (String)" Â¥n");
+        debug3.setValue(debug10.endsWith("\n"));
+        String debug11 = StringUtils.stripEnd((String)debug10, (String)" \n");
         this.font.getClass();
         int debug12 = debug9 * 9;
         Pos2i debug13 = this.convertLocalToScreen(new Pos2i(0, debug12));
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/BookViewScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/BookViewScreen.java
index c4ed7f763d68b00654f8ea783b780b4f8a92597d..f7b5384f22551325a5d5def03e62edf4404198be 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/BookViewScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/BookViewScreen.java
@@ -292,7 +292,7 @@ extends Screen {
             if (debug1 != null && WrittenBookItem.makeSureTagIsValid(debug1)) {
                 return BookViewScreen.convertPages(debug1);
             }
-            return ImmutableList.of((Object)Component.Serializer.toJson(new TranslatableComponent("book.invalid.tag").withStyle(ChatFormatting.DARK_RED)));
+            return ImmutableList.of(Component.Serializer.toJson(new TranslatableComponent("book.invalid.tag").withStyle(ChatFormatting.DARK_RED))); // MagmaCube - decompile fix
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
index 39ed79699c2e01d08ca7f9e8ff76a8720e7805bc..94e04733e1646485a2e135ef8746eb9e2474316b 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
@@ -62,7 +62,7 @@ import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 
 public class CreativeModeInventoryScreen
-extends EffectRenderingInventoryScreen<ItemPickerMenu> {
+extends EffectRenderingInventoryScreen<CreativeModeInventoryScreen.ItemPickerMenu> { // MagmaCube - decompile fix
     private static final ResourceLocation CREATIVE_TABS_LOCATION = new ResourceLocation("textures/gui/container/creative_inventory/tabs.png");
     private static final SimpleContainer CONTAINER = new SimpleContainer(45);
     private static final Component TRASH_SLOT_TOOLTIP = new TranslatableComponent("inventory.binSlot");
@@ -354,17 +354,16 @@ extends EffectRenderingInventoryScreen<ItemPickerMenu> {
     }
 
     private void updateVisibleTags(String debug12) {
-        Object debug4;
         Predicate<ResourceLocation> debug3;
         int debug2 = debug12.indexOf(58);
         if (debug2 == -1) {
             debug3 = debug1 -> debug1.getPath().contains(debug12);
         } else {
-            debug4 = debug12.substring(0, debug2).trim();
+            String debug4 = debug12.substring(0, debug2).trim(); // MagmaCube - decompile fix
             String debug5 = debug12.substring(debug2 + 1).trim();
             debug3 = arg_0 -> CreativeModeInventoryScreen.lambda$updateVisibleTags$1((String)debug4, debug5, arg_0);
         }
-        debug4 = ItemTags.getAllTags();
+        TagCollection<net.minecraft.world.item.Item> debug4 = ItemTags.getAllTags(); // MagmaCube - decompile fix
         debug4.getAvailableTags().stream().filter(debug3).forEach(arg_0 -> this.lambda$updateVisibleTags$2((TagCollection)debug4, arg_0));
     }
 
@@ -476,7 +475,7 @@ extends EffectRenderingInventoryScreen<ItemPickerMenu> {
                     debug6 = debug4 >= 36 ? 112 : 54 + debug9 * 18;
                 }
                 debug7 = new SlotWrapper(((AbstractContainerMenu)debug3).slots.get(debug4), debug4, debug5, debug6);
-                ((ItemPickerMenu)this.menu).slots.add(debug7);
+                ((ItemPickerMenu)this.menu).slots.add((Slot) debug7); // MagmaCube - decompile fix
             }
             this.destroyItemSlot = new Slot(CONTAINER, 0, 173, 112);
             ((ItemPickerMenu)this.menu).slots.add(this.destroyItemSlot);
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/LecternScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/LecternScreen.java
index a875f6a2576e35b4349f68b1be7348ef636f7b3f..7a30a8e2fc6ac549f5a147098b6425eda5db19cb 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/LecternScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/LecternScreen.java
@@ -113,10 +113,5 @@ implements MenuAccess<LecternMenu> {
     private void pageChanged() {
         this.setPage(this.menu.getPage());
     }
-
-    @Override
-    public /* synthetic */ AbstractContainerMenu getMenu() {
-        return this.getMenu();
-    }
 }
 
diff --git a/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
index 80b75c292c89ee690ad1133cee1eca64b4376897..23824939c069fb76725e6995db09c4e08f81513d 100644
--- a/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
@@ -51,7 +51,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class ServerSelectionList
-extends ObjectSelectionList<Entry> {
+extends ObjectSelectionList<ServerSelectionList.Entry> { // MagmaCube - decompile fix
     private static final Logger LOGGER = LogManager.getLogger();
     private static final ThreadPoolExecutor THREAD_POOL = new ScheduledThreadPoolExecutor(5, new ThreadFactoryBuilder().setNameFormat("Server Pinger #%d").setDaemon(true).setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler)new DefaultUncaughtExceptionHandler(LOGGER)).build());
     private static final ResourceLocation ICON_MISSING = new ResourceLocation("textures/misc/unknown_server.png");
@@ -163,11 +163,11 @@ extends ObjectSelectionList<Entry> {
                     try {
                         this.screen.getPinger().pingServer(this.serverData, () -> this.minecraft.execute(this::updateServerList));
                     }
-                    catch (UnknownHostException debug1) {
+                    catch (UnknownHostException debug12) { // MagmaCube - decompile fix
                         this.serverData.ping = -1L;
                         this.serverData.motd = CANT_RESOLVE_TEXT;
                     }
-                    catch (Exception debug1) {
+                    catch (Exception debug12) { // MagmaCube - decompile fix
                         this.serverData.ping = -1L;
                         this.serverData.motd = CANT_CONNECT_TEXT;
                     }
diff --git a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
index a3c9c0653f3a3d50bd194f4d6980dc5441caf097..0afcf8e6a33e26979459613c5e88a120e34323f7 100644
--- a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
@@ -11,9 +11,13 @@
 package net.minecraft.client.gui.screens.packs;
 
 import com.google.common.collect.Maps;
+import com.google.common.hash.Hashing;
+import com.mojang.blaze3d.platform.NativeImage;
 import com.mojang.blaze3d.vertex.PoseStack;
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.io.InputStream;
 import java.nio.file.DirectoryStream;
 import java.nio.file.FileVisitOption;
 import java.nio.file.Files;
@@ -38,12 +42,15 @@ import net.minecraft.client.gui.screens.ConfirmScreen;
 import net.minecraft.client.gui.screens.Screen;
 import net.minecraft.client.gui.screens.packs.PackSelectionModel;
 import net.minecraft.client.gui.screens.packs.TransferableSelectionList;
+import net.minecraft.client.renderer.texture.AbstractTexture;
+import net.minecraft.client.renderer.texture.DynamicTexture;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.packs.PackResources;
 import net.minecraft.server.packs.repository.Pack;
 import net.minecraft.server.packs.repository.PackRepository;
 import org.apache.commons.lang3.mutable.MutableBoolean;
@@ -133,7 +140,7 @@ extends Screen {
 
     private void updateList(TransferableSelectionList debug1, Stream<PackSelectionModel.Entry> debug22) {
         debug1.children().clear();
-        debug22.forEach(debug2 -> debug1.children().add(new TransferableSelectionList.PackEntry(this.minecraft, debug1, this, (PackSelectionModel.Entry)debug2)));
+        debug22.forEach(debug2 -> debug1.children().add(new TransferableSelectionList.PackEntry(this.minecraft, debug1, this, debug2))); // MagmaCube - decompile fix
     }
 
     private void reload() {
@@ -157,12 +164,12 @@ extends Screen {
         MutableBoolean debug3 = new MutableBoolean();
         debug1.forEach(debug2 -> {
             try (Stream<Path> debug32 = Files.walk(debug2, new FileVisitOption[0]);){
-                debug32.forEach(debug3 -> {
+                debug32.forEach(debug322 -> { // MagmaCube - decompile fix
                     try {
-                        Util.copyBetweenDirs(debug2.getParent(), debug22, debug3);
+                        Util.copyBetweenDirs(debug2.getParent(), debug22, debug322); // MagmaCube - decompile fix
                     }
                     catch (IOException debug4) {
-                        LOGGER.warn("Failed to copy datapack file  from {} to {}", debug3, (Object)debug22, (Object)debug4);
+                        LOGGER.warn("Failed to copy datapack file  from {} to {}", debug322, (Object)debug22, debug4); // MagmaCube - decompile fix
                         debug3.setTrue();
                     }
                 });
@@ -193,25 +200,21 @@ extends Screen {
      * Exception decompiling
      */
     private ResourceLocation loadPackIcon(TextureManager debug1, Pack debug2) {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 5[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - decompile fix
+        try(PackResources debug3 = debug2.open();
+            InputStream debug5 = debug3.getRootResource("pack.png")) {
+            String debug7 = debug2.getId();
+            ResourceLocation debug8 = new ResourceLocation("minecraft", "pack/" + Util.sanitizeName(debug7, ResourceLocation::validPathChar) + "/" + Hashing.sha1().hashUnencodedChars(debug7) + "/icon");
+            NativeImage debug9 = NativeImage.read(debug5);
+            debug1.register(debug8, (AbstractTexture)new DynamicTexture(debug9));
+            return debug8;
+        } catch (FileNotFoundException fileNotFoundException) {
+
+        } catch (Exception debug3) {
+            LOGGER.warn("Failed to load icon from pack {}", debug2.getId(), debug3);
+        }
+        return DEFAULT_ICON;
+        // MagmaCube end - decompile fix
     }
 
     private ResourceLocation getPackIcon(Pack debug1) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/packs/TransferableSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/packs/TransferableSelectionList.java
index 122089dbe7f9d93650ccfffd5b1263af86f8c5da..433b7f10c47e22edeeb6b0d09e1b3f3bcc29e386 100644
--- a/src/main/java/net/minecraft/client/gui/screens/packs/TransferableSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/packs/TransferableSelectionList.java
@@ -25,7 +25,7 @@ import net.minecraft.server.packs.repository.PackCompatibility;
 import net.minecraft.util.FormattedCharSequence;
 
 public class TransferableSelectionList
-extends ObjectSelectionList<PackEntry> {
+extends ObjectSelectionList<TransferableSelectionList.PackEntry> { // MagmaCube - decompile fix
     private static final ResourceLocation ICON_OVERLAY_LOCATION = new ResourceLocation("textures/gui/resource_packs.png");
     private static final Component INCOMPATIBLE_TITLE = new TranslatableComponent("pack.incompatible");
     private static final Component INCOMPATIBLE_CONFIRM_TITLE = new TranslatableComponent("pack.incompatible.confirm.title");
diff --git a/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeBookComponent.java b/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeBookComponent.java
index eb2782d011417907bde74b3fc4228c8029f18034..071d63d41907ae8f27b7cdf3ec8ff9c52edaf059 100644
--- a/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeBookComponent.java
+++ b/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeBookComponent.java
@@ -173,7 +173,7 @@ PlaceRecipe<Ingredient> {
     private void updateCollections(boolean debug12) {
         List<RecipeCollection> debug2 = this.book.getCollection(this.selectedTab.getCategory());
         debug2.forEach(debug1 -> debug1.canCraft(this.stackedContents, this.menu.getGridWidth(), this.menu.getGridHeight(), this.book));
-        ArrayList debug3 = Lists.newArrayList(debug2);
+        ArrayList<RecipeCollection> debug3 = Lists.newArrayList(debug2); // MagmaCube - decompile fix
         debug3.removeIf(debug0 -> !debug0.hasKnownRecipes());
         debug3.removeIf(debug0 -> !debug0.hasFitting());
         String debug4 = this.searchBox.getValue();
diff --git a/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeCollection.java b/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeCollection.java
index 8a301c711273685da6b5c144f96524b171917e75..da0495e50a735ee8d8e7d581fd17f7493d8350b8 100644
--- a/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeCollection.java
+++ b/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeCollection.java
@@ -22,9 +22,9 @@ public class RecipeCollection
     private final Set<Recipe<?>> known;
     
     public RecipeCollection(final List<Recipe<?>> debug1) {
-        this.craftable = (Set<Recipe<?>>)Sets.newHashSet();
-        this.fitsDimensions = (Set<Recipe<?>>)Sets.newHashSet();
-        this.known = (Set<Recipe<?>>)Sets.newHashSet();
+        this.craftable = Sets.newHashSet(); // MagmaCube - decompile fix
+        this.fitsDimensions = Sets.newHashSet(); // MagmaCube - decompile fix
+        this.known = Sets.newHashSet(); // MagmaCube - decompile fix
         this.recipes = (List<Recipe<?>>)ImmutableList.copyOf((Collection)debug1);
         if (debug1.size() <= 1) {
             this.singleResultItem = true;
@@ -93,7 +93,7 @@ public class RecipeCollection
     }
     
     public List<Recipe<?>> getRecipes(final boolean debug1) {
-        final List<Recipe<?>> debug2 = (List<Recipe<?>>)Lists.newArrayList();
+        final List<Recipe<?>> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         final Set<Recipe<?>> debug3 = debug1 ? this.craftable : this.fitsDimensions;
         for (final Recipe<?> debug4 : this.recipes) {
             if (debug3.contains(debug4)) {
@@ -104,7 +104,7 @@ public class RecipeCollection
     }
     
     public List<Recipe<?>> getDisplayRecipes(final boolean debug1) {
-        final List<Recipe<?>> debug2 = (List<Recipe<?>>)Lists.newArrayList();
+        final List<Recipe<?>> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Recipe<?> debug3 : this.recipes) {
             if (this.fitsDimensions.contains(debug3) && this.craftable.contains(debug3) == debug1) {
                 debug2.add(debug3);
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
index c2905d21ba99bb5ebfc3161129b585efc8cecfd5..ef0df1733eba0947e2b8a0ebb6514655d532effa 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
@@ -215,10 +215,10 @@ extends Screen {
             }
         });
         this.dataPacksButton = this.addButton(new Button(debug2, 151, 150, 20, new TranslatableComponent("selectWorld.dataPacks"), debug1 -> this.openDataPackSelectionScreen()));
-        this.gameRulesButton = this.addButton(new Button(debug12, 185, 150, 20, new TranslatableComponent("selectWorld.gameRules"), debug1 -> this.minecraft.setScreen(new EditGameRulesScreen(this.gameRules.copy(), debug12 -> {
+        this.gameRulesButton = this.addButton(new Button(debug12, 185, 150, 20, new TranslatableComponent("selectWorld.gameRules"), debug1 -> this.minecraft.setScreen(new EditGameRulesScreen(this.gameRules.copy(), debug12l -> { // MagmaCube - decompile fix
             this.minecraft.setScreen(this);
-            debug12.ifPresent(debug1 -> {
-                this.gameRules = debug1;
+            debug12l.ifPresent(debug1l -> { // MagmaCube - decompile fix
+                this.gameRules = debug1l; // MagmaCube - decompile fix
             });
         }))));
         this.worldGenSettingsComponent.init(this, this.minecraft, this.font);
@@ -436,8 +436,8 @@ extends Screen {
         ServerResources.loadResources(debug1.openAllSelected(), Commands.CommandSelection.INTEGRATED, 2, Util.backgroundExecutor(), this.minecraft).handle((debug2, debug3) -> {
             if (debug3 != null) {
                 LOGGER.warn("Failed to validate datapack", debug3);
-                this.minecraft.tell(() -> this.minecraft.setScreen(new ConfirmScreen(debug1 -> {
-                    if (debug1) {
+                this.minecraft.tell(() -> this.minecraft.setScreen(new ConfirmScreen(debug1l -> { // MagmaCube - decompile fix
+                    if (debug1l) { // MagmaCube - decompile fix
                         this.openDataPackSelectionScreen();
                     } else {
                         this.dataPacks = DataPackConfig.DEFAULT;
@@ -463,8 +463,8 @@ extends Screen {
                     try {
                         Files.delete(debug0);
                     }
-                    catch (IOException debug1) {
-                        LOGGER.warn("Failed to remove temporary file {}", debug0, (Object)debug1);
+                    catch (IOException debug1l) { // MagmaCube - decompile fix
+                        LOGGER.warn("Failed to remove temporary file {}", debug0, (Object)debug1l); // MagmaCube - decompile fix
                     }
                 });
             }
@@ -508,18 +508,18 @@ extends Screen {
         MutableObject debug22 = new MutableObject();
         try (Stream<Path> debug3 = Files.walk(debug0, new FileVisitOption[0]);){
             debug3.filter(debug1 -> !debug1.equals(debug0)).forEach(debug2 -> {
-                Path debug3 = (Path)debug22.getValue();
-                if (debug3 == null) {
+                Path debug3l = (Path)debug22.getValue(); // MagmaCube - decompile fix
+                if (debug3l == null) { // MagmaCube - decompile fix
                     try {
-                        debug3 = Files.createTempDirectory("mcworld-", new FileAttribute[0]);
+                        debug3l = Files.createTempDirectory("mcworld-", new FileAttribute[0]); // MagmaCube - decompile fix
                     }
                     catch (IOException debug4) {
                         LOGGER.warn("Failed to create temporary dir");
                         throw new OperationFailedException(debug4);
                     }
-                    debug22.setValue((Object)debug3);
+                    debug22.setValue((Object)debug3l); // MagmaCube - decompile fix
                 }
-                CreateWorldScreen.copyBetweenDirs(debug0, debug3, debug2);
+                CreateWorldScreen.copyBetweenDirs(debug0, debug3l, debug2); // MagmaCube - decompile fix
             });
         }
         catch (IOException | OperationFailedException debug32) {
@@ -540,7 +540,7 @@ extends Screen {
                 this.tempDataPackRepository.reload();
             }
             this.tempDataPackRepository.setSelected(this.dataPacks.getEnabled());
-            return Pair.of((Object)debug2, (Object)this.tempDataPackRepository);
+            return Pair.of(debug2, this.tempDataPackRepository); // MagmaCube - decompile fix
         }
         return null;
     }
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
index 35bcff974efbae8fd54276c96c8de220de4eb939..ef6ea4cdf258df4ef549e80366619d9d05e3808e 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
@@ -110,7 +110,7 @@ extends Screen {
     extends ContainerObjectSelectionList<RuleEntry> {
         public RuleList(final GameRules debug2) {
             super(EditGameRulesScreen.this.minecraft, EditGameRulesScreen.this.width, EditGameRulesScreen.this.height, 43, EditGameRulesScreen.this.height - 32, 24);
-            final HashMap debug3 = Maps.newHashMap();
+            final HashMap<GameRules.Category, Map<GameRules.Key, EditGameRulesScreen.RuleEntry>> debug3 = Maps.newHashMap(); // MagmaCube - decompile fix
             GameRules.visitGameRuleTypes(new GameRules.GameRuleTypeVisitor(){
 
                 @Override
@@ -147,7 +147,7 @@ extends Screen {
             });
             debug3.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEach(debug12 -> {
                 this.addEntry(new CategoryRuleEntry(new TranslatableComponent(((GameRules.Category)((Object)((Object)debug12.getKey()))).getDescriptionId()).withStyle(ChatFormatting.BOLD, ChatFormatting.YELLOW)));
-                ((Map)debug12.getValue()).entrySet().stream().sorted(Map.Entry.comparingByKey(Comparator.comparing(GameRules.Key::getId))).forEach(debug1 -> this.addEntry((AbstractSelectionList.Entry)debug1.getValue()));
+                (debug12.getValue()).entrySet().stream().sorted(Map.Entry.comparingByKey(Comparator.comparing(GameRules.Key::getId))).forEach(debug1 -> this.addEntry(debug1.getValue())); // MagmaCube - decompile fix
             });
         }
 
@@ -197,8 +197,8 @@ extends Screen {
         public BooleanRuleEntry(final Component debug2, List<FormattedCharSequence> debug3, final String debug4, final GameRules.BooleanValue debug5) {
             super(debug3, debug2);
             this.checkbox = new Button(10, 5, 44, 20, CommonComponents.optionStatus(debug5.get()), debug1 -> {
-                boolean debug2 = !debug5.get();
-                debug5.set(debug2, null);
+                boolean debug2l = !debug5.get(); // MagmaCube - decompile fix
+                debug5.set(debug2l, null); // MagmaCube - decompile fix
                 debug1.setMessage(CommonComponents.optionStatus(debug5.get()));
             }){
 
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditWorldScreen.java
index 1a94a8044f63f79f66018ddcad05a38b6681c249..a595a5ede9cc08eec87c2b184c4c4b3148a5852b 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditWorldScreen.java
@@ -19,6 +19,7 @@ package net.minecraft.client.gui.screens.worldselection;
 
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
+import com.google.gson.JsonElement;
 import com.google.gson.JsonIOException;
 import com.google.gson.stream.JsonWriter;
 import com.mojang.blaze3d.vertex.PoseStack;
@@ -114,24 +115,24 @@ extends Screen {
             this.minecraft.setScreen(OptimizeWorldScreen.create(this.minecraft, this.callback, this.minecraft.getFixerUpper(), this.levelAccess, debug2));
         }, new TranslatableComponent("optimizeWorld.confirm.title"), new TranslatableComponent("optimizeWorld.confirm.description"), true))));
         this.addButton(new Button(this.width / 2 - 100, this.height / 4 + 120 + 5, 200, 20, new TranslatableComponent("selectWorld.edit.export_worldgen_settings"), debug12 -> {
-            DataResult debug2;
+            DataResult<String> debug2; // MagmaCube - decompile fix
             Object debug4;
             RegistryAccess.RegistryHolder debug3 = RegistryAccess.builtin();
             try {
-                debug4 = this.minecraft.makeServerStem(debug3, Minecraft::loadDataPacks, (Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData>)((Function4)Minecraft::loadWorldData), false, this.levelAccess);
+                debug4 = this.minecraft.makeServerStem(debug3, Minecraft::loadDataPacks, (Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData>)(Minecraft::loadWorldData), false, this.levelAccess); // MagmaCube - decompile fix
                 Throwable throwable = null;
                 try {
                     RegistryWriteOps debug6 = RegistryWriteOps.create(JsonOps.INSTANCE, debug3);
-                    DataResult debug7 = WorldGenSettings.CODEC.encodeStart(debug6, (Object)((Minecraft.ServerStem)debug4).worldData().worldGenSettings());
+                    DataResult debug7 = WorldGenSettings.CODEC.encodeStart(debug6, ((Minecraft.ServerStem)debug4).worldData().worldGenSettings()); // MagmaCube - decompile fix
                     debug2 = debug7.flatMap(debug1 -> {
-                        Path debug2 = this.levelAccess.getLevelPath(LevelResource.ROOT).resolve("worldgen_settings_export.json");
-                        try (JsonWriter debug3 = WORLD_GEN_SETTINGS_GSON.newJsonWriter((Writer)Files.newBufferedWriter(debug2, StandardCharsets.UTF_8, new OpenOption[0]));){
-                            WORLD_GEN_SETTINGS_GSON.toJson(debug1, debug3);
+                        Path debug2l = this.levelAccess.getLevelPath(LevelResource.ROOT).resolve("worldgen_settings_export.json"); // MagmaCube - decompile fix
+                        try (JsonWriter debug3l = WORLD_GEN_SETTINGS_GSON.newJsonWriter((Writer)Files.newBufferedWriter(debug2l, StandardCharsets.UTF_8, new OpenOption[0]));){ // MagmaCube - decompile fix
+                            WORLD_GEN_SETTINGS_GSON.toJson((JsonElement) debug1, debug3l); // MagmaCube - decompile fix
                         }
                         catch (JsonIOException | IOException debug32) {
                             return DataResult.error((String)("Error writing file: " + debug32.getMessage()));
                         }
-                        return DataResult.success((Object)debug2.toString());
+                        return DataResult.success(debug2l.toString()); // MagmaCube - decompile fix
                     });
                 }
                 catch (Throwable throwable2) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
index 42cfd7a978f5418be93580cb8bc082766ebeea82..b3fd9d5e11576b051292a77f9c3542315013d7c6 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
@@ -18,6 +18,7 @@
  */
 package net.minecraft.client.gui.screens.worldselection;
 
+import com.google.gson.JsonElement;
 import com.google.gson.JsonIOException;
 import com.google.gson.JsonParser;
 import com.google.gson.JsonSyntaxException;
@@ -100,18 +101,18 @@ Widget {
         this.seed = debug4;
     }
 
-    public void init(final CreateWorldScreen debug12, Minecraft debug22, Font debug32) {
+    public void init(final CreateWorldScreen debug12l, Minecraft debug22, Font debug32) {
         this.font = debug32;
-        this.width = debug12.width;
+        this.width = debug12l.width;
         this.seedEdit = new EditBox(this.font, this.width / 2 - 100, 60, 200, 20, new TranslatableComponent("selectWorld.enterSeed"));
         this.seedEdit.setValue(WorldGenSettingsComponent.toString(this.seed));
         this.seedEdit.setResponder(debug1 -> {
             this.seed = this.parseSeed();
         });
-        debug12.addWidget(this.seedEdit);
+        debug12l.addWidget(this.seedEdit);
         int debug4 = this.width / 2 - 155;
         int debug5 = this.width / 2 + 5;
-        this.featuresButton = debug12.addButton(new Button(debug4, 100, 150, 20, new TranslatableComponent("selectWorld.mapFeatures"), debug1 -> {
+        this.featuresButton = debug12l.addButton(new Button(debug4, 100, 150, 20, new TranslatableComponent("selectWorld.mapFeatures"), debug1 -> {
             this.settings = this.settings.withFeaturesToggled();
             debug1.queueNarration(250);
         }){
@@ -127,18 +128,18 @@ Widget {
             }
         });
         this.featuresButton.visible = false;
-        this.typeButton = debug12.addButton(new Button(debug5, 100, 150, 20, new TranslatableComponent("selectWorld.mapType"), debug2 -> {
+        this.typeButton = debug12l.addButton(new Button(debug5, 100, 150, 20, new TranslatableComponent("selectWorld.mapType"), debug2 -> {
             while (this.preset.isPresent()) {
                 int debug3 = WorldPreset.PRESETS.indexOf(this.preset.get()) + 1;
                 if (debug3 >= WorldPreset.PRESETS.size()) {
                     debug3 = 0;
                 }
-                WorldPreset debug4 = WorldPreset.PRESETS.get(debug3);
-                this.preset = Optional.of(debug4);
-                this.settings = debug4.create(this.registryHolder, this.settings.seed(), this.settings.generateFeatures(), this.settings.generateBonusChest());
+                WorldPreset debug4l = WorldPreset.PRESETS.get(debug3); // MagmaCube - decompile fix
+                this.preset = Optional.of(debug4l); // MagmaCube - decompile fix
+                this.settings = debug4l.create(this.registryHolder, this.settings.seed(), this.settings.generateFeatures(), this.settings.generateBonusChest()); // MagmaCube - decompile fix
                 if (this.settings.isDebug() && !Screen.hasShiftDown()) continue;
             }
-            debug12.updateDisplayOptions();
+            debug12l.updateDisplayOptions();
             debug2.queueNarration(250);
         }){
 
@@ -157,42 +158,39 @@ Widget {
         });
         this.typeButton.visible = false;
         this.typeButton.active = this.preset.isPresent();
-        this.customizeTypeButton = debug12.addButton(new Button(debug5, 120, 150, 20, new TranslatableComponent("selectWorld.customizeType"), debug3 -> {
-            WorldPreset.PresetEditor debug4 = WorldPreset.EDITORS.get(this.preset);
-            if (debug4 != null) {
-                debug22.setScreen(debug4.createEditScreen(debug12, this.settings));
+        this.customizeTypeButton = debug12l.addButton(new Button(debug5, 120, 150, 20, new TranslatableComponent("selectWorld.customizeType"), debug3 -> {
+            WorldPreset.PresetEditor debug4l = WorldPreset.EDITORS.get(this.preset); // MagmaCube - decompile fix
+            if (debug4l != null) { // MagmaCube - decompile fix
+                debug22.setScreen(debug4l.createEditScreen(debug12l, this.settings)); // MagmaCube - decompile fix
             }
         }));
         this.customizeTypeButton.visible = false;
-        this.bonusItemsButton = debug12.addButton(new Button(debug4, 151, 150, 20, new TranslatableComponent("selectWorld.bonusItems"), debug1 -> {
+        this.bonusItemsButton = debug12l.addButton(new Button(debug4, 151, 150, 20, new TranslatableComponent("selectWorld.bonusItems"), debug1 -> {
             this.settings = this.settings.withBonusChestToggled();
             debug1.queueNarration(250);
         }){
 
             @Override
             public Component getMessage() {
-                return CommonComponents.optionStatus(super.getMessage(), WorldGenSettingsComponent.this.settings.generateBonusChest() && !debug12.hardCore);
+                return CommonComponents.optionStatus(super.getMessage(), WorldGenSettingsComponent.this.settings.generateBonusChest() && !debug12l.hardCore);
             }
         });
         this.bonusItemsButton.visible = false;
-        this.importSettingsButton = debug12.addButton(new Button(debug4, 185, 150, 20, new TranslatableComponent("selectWorld.import_worldgen_settings"), debug3 -> {
+        this.importSettingsButton = debug12l.addButton(new Button(debug4, 185, 150, 20, new TranslatableComponent("selectWorld.import_worldgen_settings"), debug3 -> {
             DataResult debug11;
-            Object debug142;
-            Object debug12;
             ServerResources debug8;
-            Object debug9;
-            TranslatableComponent debug4 = new TranslatableComponent("selectWorld.import_worldgen_settings.select_file");
-            String debug5 = TinyFileDialogs.tinyfd_openFileDialog((CharSequence)debug4.getString(), null, null, null, (boolean)false);
-            if (debug5 == null) {
+            TranslatableComponent debug4l = new TranslatableComponent("selectWorld.import_worldgen_settings.select_file"); // MagmaCube - decompile fix
+            String debug5l = TinyFileDialogs.tinyfd_openFileDialog((CharSequence)debug4l.getString(), null, null, null, (boolean)false); // MagmaCube - decompile fix
+            if (debug5l == null) { // MagmaCube - decompile fix
                 return;
             }
             RegistryAccess.RegistryHolder debug6 = RegistryAccess.builtin();
-            PackRepository debug7 = new PackRepository(new ServerPacksSource(), new FolderRepositorySource(debug12.getTempDataPackDir().toFile(), PackSource.WORLD));
+            PackRepository debug7 = new PackRepository(new ServerPacksSource(), new FolderRepositorySource(debug12l.getTempDataPackDir().toFile(), PackSource.WORLD));
             try {
-                MinecraftServer.configurePackRepository(debug7, debug1.dataPacks, false);
-                debug9 = ServerResources.loadResources(debug7.openAllSelected(), Commands.CommandSelection.INTEGRATED, 2, Util.backgroundExecutor(), debug22);
+                MinecraftServer.configurePackRepository(debug7, debug12l.dataPacks, false); // MagmaCube - decompile fix
+                CompletableFuture<ServerResources> debug9 = ServerResources.loadResources(debug7.openAllSelected(), Commands.CommandSelection.INTEGRATED, 2, Util.backgroundExecutor(), debug22); // MagmaCube - decompile fix
                 debug22.managedBlock(debug9::isDone);
-                debug8 = ((CompletableFuture)debug9).get();
+                debug8 = debug9.get(); // MagmaCube - decompile fix
             }
             catch (InterruptedException | ExecutionException debug92) {
                 LOGGER.error("Error loading data packs when importing world settings", (Throwable)debug92);
@@ -202,13 +200,13 @@ Widget {
                 debug7.close();
                 return;
             }
-            debug9 = RegistryReadOps.create(JsonOps.INSTANCE, debug8.getResourceManager(), debug6);
+            RegistryReadOps<JsonElement> debug9 = RegistryReadOps.create(JsonOps.INSTANCE, debug8.getResourceManager(), debug6); // MagmaCube - decompile fix
             JsonParser debug10 = new JsonParser();
             try {
-                debug12 = Files.newBufferedReader(Paths.get(debug5, new String[0]));
+                BufferedReader debug12ll = Files.newBufferedReader(Paths.get(debug5l, new String[0])); // MagmaCube - decompile fix
                 Throwable throwable = null;
                 try {
-                    debug142 = debug10.parse((Reader)debug12);
+                    JsonElement debug142 = debug10.parse((Reader)debug12ll); // MagmaCube - decompile fix
                     debug11 = WorldGenSettings.CODEC.parse((DynamicOps)debug9, debug142);
                 }
                 catch (Throwable debug142) {
@@ -216,16 +214,16 @@ Widget {
                     throw debug142;
                 }
                 finally {
-                    if (debug12 != null) {
+                    if (debug12ll != null) { // MagmaCube - decompile fix
                         if (throwable != null) {
                             try {
-                                ((BufferedReader)debug12).close();
+                                ((BufferedReader)debug12ll).close(); // MagmaCube - decompile fix
                             }
                             catch (Throwable debug142) {
                                 throwable.addSuppressed(debug142);
                             }
                         } else {
-                            ((BufferedReader)debug12).close();
+                            ((BufferedReader)debug12ll).close(); // MagmaCube - decompile fix
                         }
                     }
                 }
@@ -234,15 +232,15 @@ Widget {
                 debug11 = DataResult.error((String)("Failed to parse file: " + debug122.getMessage()));
             }
             if (debug11.error().isPresent()) {
-                debug12 = new TranslatableComponent("selectWorld.import_worldgen_settings.failure");
+                Component debug12lll = new TranslatableComponent("selectWorld.import_worldgen_settings.failure"); // MagmaCube - decompile fix
                 String debug13 = ((DataResult.PartialResult)debug11.error().get()).message();
                 LOGGER.error("Error parsing world settings: {}", (Object)debug13);
-                debug142 = new TextComponent(debug13);
-                debug22.getToasts().addToast(SystemToast.multiline(debug22, SystemToast.SystemToastIds.WORLD_GEN_SETTINGS_TRANSFER, (Component)debug12, (Component)debug142));
+                Component debug142l = new TextComponent(debug13); // MagmaCube - decompile fix
+                debug22.getToasts().addToast(SystemToast.multiline(debug22, SystemToast.SystemToastIds.WORLD_GEN_SETTINGS_TRANSFER, (Component)debug12lll, (Component)debug142l)); // MagmaCube - decompile fix
             }
             debug8.close();
-            debug12 = debug11.lifecycle();
-            debug11.resultOrPartial(((Logger)LOGGER)::error).ifPresent(arg_0 -> this.lambda$null$6(debug22, debug12, debug6, (Lifecycle)debug12, arg_0));
+            Lifecycle debug12ll = debug11.lifecycle(); // MagmaCube - decompile fix
+            debug11.resultOrPartial(((Logger)LOGGER)::error).ifPresent(arg_0 -> this.lambda$null$6(debug22, debug12l, debug6, (Lifecycle)debug12ll, (WorldGenSettings) arg_0)); // MagmaCube - decompile fix
         }));
         this.importSettingsButton.visible = false;
         this.amplifiedWorldInfo = MultiLineLabel.create(debug32, (FormattedText)AMPLIFIED_HELP_TEXT, this.typeButton.getWidth());
@@ -334,9 +332,9 @@ Widget {
         RegistryAccess.RegistryHolder debug22 = RegistryAccess.builtin();
         RegistryWriteOps debug3 = RegistryWriteOps.create(JsonOps.INSTANCE, this.registryHolder);
         RegistryReadOps debug4 = RegistryReadOps.create(JsonOps.INSTANCE, debug12.getResourceManager(), debug22);
-        DataResult debug5 = WorldGenSettings.CODEC.encodeStart(debug3, (Object)this.settings).flatMap(debug1 -> WorldGenSettings.CODEC.parse((DynamicOps)debug4, debug1));
+        DataResult debug5 = WorldGenSettings.CODEC.encodeStart(debug3, this.settings).flatMap(debug1 -> WorldGenSettings.CODEC.parse((DynamicOps)debug4, debug1)); // MagmaCube - decompile fix
         debug5.resultOrPartial(Util.prefix("Error parsing worldgen settings after loading data packs: ", ((Logger)LOGGER)::error)).ifPresent(debug2 -> {
-            this.settings = debug2;
+            this.settings = (WorldGenSettings) debug2; // MagmaCube - decompile fix
             this.registryHolder = debug22;
         });
     }
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldPreset.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldPreset.java
index 0f0063d185abeca0b1eea701038d32d5d4b447bd..59c4ba51501b78faad7aa37d8114e00bc0fd5ff9 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldPreset.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldPreset.java
@@ -100,7 +100,7 @@ public abstract class WorldPreset {
             return new DebugLevelSource(debug1);
         }
     };
-    protected static final List<WorldPreset> PRESETS = Lists.newArrayList((Object[])new WorldPreset[]{NORMAL, FLAT, LARGE_BIOMES, AMPLIFIED, SINGLE_BIOME_SURFACE, SINGLE_BIOME_CAVES, SINGLE_BIOME_FLOATING_ISLANDS, DEBUG});
+    protected static final List<WorldPreset> PRESETS = Lists.newArrayList(new WorldPreset[]{NORMAL, FLAT, LARGE_BIOMES, AMPLIFIED, SINGLE_BIOME_SURFACE, SINGLE_BIOME_CAVES, SINGLE_BIOME_FLOATING_ISLANDS, DEBUG}); // MagmaCube - decompile fix
     protected static final Map<Optional<WorldPreset>, PresetEditor> EDITORS = ImmutableMap.of(Optional.of(FLAT), (debug0, debug1) -> {
         ChunkGenerator debug22 = debug1.overworld();
         return new CreateFlatWorldScreen(debug0, debug2 -> debug0.worldGenSettingsComponent.updateSettings(new WorldGenSettings(debug1.seed(), debug1.generateFeatures(), debug1.generateBonusChest(), WorldGenSettings.withOverworld(debug0.worldGenSettingsComponent.registryHolder().registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY), debug1.dimensions(), (ChunkGenerator)new FlatLevelSource((FlatLevelGeneratorSettings)debug2)))), debug22 instanceof FlatLevelSource ? ((FlatLevelSource)debug22).settings() : FlatLevelGeneratorSettings.getDefault(debug0.worldGenSettingsComponent.registryHolder().registryOrThrow(Registry.BIOME_REGISTRY)));
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
index a803ed74525144477a436af9688a9dd6a5252eb0..f45190d6c4786b3ac21b46f9f9893e8a4642800b 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
@@ -77,7 +77,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class WorldSelectionList
-extends ObjectSelectionList<WorldListEntry> {
+extends ObjectSelectionList<WorldSelectionList.WorldListEntry> { // MagmaCube - decompile fix
     private static final Logger LOGGER = LogManager.getLogger();
     private static final DateFormat DATE_FORMAT = new SimpleDateFormat();
     private static final ResourceLocation ICON_MISSING = new ResourceLocation("textures/misc/unknown_server.png");
@@ -227,12 +227,12 @@ extends ObjectSelectionList<WorldListEntry> {
                     if (this.summary.askToOpenWorld()) {
                         GuiComponent.blit(debug1, debug4, debug3, 96.0f, debug16, 32, 32, 256, 256);
                         if (debug15) {
-                            this.screen.setToolTip((List<FormattedCharSequence>)ImmutableList.of((Object)FROM_NEWER_TOOLTIP_1.getVisualOrderText(), (Object)FROM_NEWER_TOOLTIP_2.getVisualOrderText()));
+                            this.screen.setToolTip((List<FormattedCharSequence>)ImmutableList.of(FROM_NEWER_TOOLTIP_1.getVisualOrderText(), FROM_NEWER_TOOLTIP_2.getVisualOrderText())); // MagmaCube - decompile fix
                         }
                     } else if (!SharedConstants.getCurrentVersion().isStable()) {
                         GuiComponent.blit(debug1, debug4, debug3, 64.0f, debug16, 32, 32, 256, 256);
                         if (debug15) {
-                            this.screen.setToolTip((List<FormattedCharSequence>)ImmutableList.of((Object)SNAPSHOT_TOOLTIP_1.getVisualOrderText(), (Object)SNAPSHOT_TOOLTIP_2.getVisualOrderText()));
+                            this.screen.setToolTip((List<FormattedCharSequence>)ImmutableList.of(SNAPSHOT_TOOLTIP_1.getVisualOrderText(), SNAPSHOT_TOOLTIP_2.getVisualOrderText())); // MagmaCube - decompile fix
                         }
                     }
                 } else {
@@ -346,7 +346,7 @@ extends ObjectSelectionList<WorldListEntry> {
             this.queueLoadScreen();
             RegistryAccess.RegistryHolder debug1 = RegistryAccess.builtin();
             try (LevelStorageSource.LevelStorageAccess debug2 = this.minecraft.getLevelSource().createAccess(this.summary.getLevelId());
-                 Minecraft.ServerStem debug4 = this.minecraft.makeServerStem(debug1, Minecraft::loadDataPacks, (Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData>)((Function4)Minecraft::loadWorldData), false, debug2);){
+                 Minecraft.ServerStem debug4 = this.minecraft.makeServerStem(debug1, Minecraft::loadDataPacks, (Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData>)(Minecraft::loadWorldData), false, debug2);){ // MagmaCube - decompile fix
                 LevelSettings debug62 = debug4.worldData().getLevelSettings();
                 DataPackConfig debug7 = debug62.getDataPackConfig();
                 WorldGenSettings debug8 = debug4.worldData().worldGenSettings();
diff --git a/src/main/java/net/minecraft/client/gui/spectator/RootSpectatorMenuCategory.java b/src/main/java/net/minecraft/client/gui/spectator/RootSpectatorMenuCategory.java
index 1cdab66372586d47b34104af3e9cb0abffe6faab..b13f883c25797fcc5aa4b047f1841ef14e54854d 100644
--- a/src/main/java/net/minecraft/client/gui/spectator/RootSpectatorMenuCategory.java
+++ b/src/main/java/net/minecraft/client/gui/spectator/RootSpectatorMenuCategory.java
@@ -13,7 +13,7 @@ public class RootSpectatorMenuCategory implements SpectatorMenuCategory
     private final List<SpectatorMenuItem> items;
     
     public RootSpectatorMenuCategory() {
-        (this.items = (List<SpectatorMenuItem>)Lists.newArrayList()).add(new TeleportToPlayerMenuCategory());
+        (this.items = Lists.newArrayList()).add(new TeleportToPlayerMenuCategory()); // MagmaCube - decompile fix
         this.items.add(new TeleportToTeamMenuCategory());
     }
     
diff --git a/src/main/java/net/minecraft/client/model/AgeableListModel.java b/src/main/java/net/minecraft/client/model/AgeableListModel.java
index 858da61a7900cb807f2ae79f890c58dbafe561c5..7856d385d073402b7965a488a415dbf1e594d5c4 100644
--- a/src/main/java/net/minecraft/client/model/AgeableListModel.java
+++ b/src/main/java/net/minecraft/client/model/AgeableListModel.java
@@ -48,18 +48,18 @@ public abstract class AgeableListModel<E extends Entity> extends EntityModel<E>
                 debug1.scale(debug9, debug9, debug9);
             }
             debug1.translate(0.0, this.yHeadOffset / 16.0f, this.zHeadOffset / 16.0f);
-            this.headParts().forEach(debug8 -> debug8.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8));
+            this.headParts().forEach(debug8l -> debug8l.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
             debug1.popPose();
             debug1.pushPose();
             final float debug9 = 1.0f / this.babyBodyScale;
             debug1.scale(debug9, debug9, debug9);
             debug1.translate(0.0, this.bodyYOffset / 16.0f, 0.0);
-            this.bodyParts().forEach(debug8 -> debug8.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8));
+            this.bodyParts().forEach(debug8l -> debug8l.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
             debug1.popPose();
         }
         else {
-            this.headParts().forEach(debug8 -> debug8.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8));
-            this.bodyParts().forEach(debug8 -> debug8.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8));
+            this.headParts().forEach(debug8l -> debug8l.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
+            this.bodyParts().forEach(debug8l -> debug8l.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/client/model/BatModel.java b/src/main/java/net/minecraft/client/model/BatModel.java
index 841b3e29fa0d1f6124abe2724551ab69111964c2..3d64504cb16d162d1f1fa6947b11acb8ea4a1ac0 100644
--- a/src/main/java/net/minecraft/client/model/BatModel.java
+++ b/src/main/java/net/minecraft/client/model/BatModel.java
@@ -46,7 +46,7 @@ public class BatModel extends ListModel<Bat>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.head, (Object)this.body);
+        return (Iterable<ModelPart>)ImmutableList.of(this.head, this.body); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/BeeModel.java b/src/main/java/net/minecraft/client/model/BeeModel.java
index 9e4c78c6098c19bf584e1b30f237a4722a62c35c..f4205b2aaa84d10990279bb910a5ce87fdd7ad0d 100644
--- a/src/main/java/net/minecraft/client/model/BeeModel.java
+++ b/src/main/java/net/minecraft/client/model/BeeModel.java
@@ -120,11 +120,11 @@ public class BeeModel<T extends Bee> extends AgeableListModel<T>
     
     @Override
     protected Iterable<ModelPart> headParts() {
-        return (Iterable<ModelPart>)ImmutableList.of();
+        return ImmutableList.of(); // MagmaCube - decompile fix
     }
     
     @Override
     protected Iterable<ModelPart> bodyParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.bone);
+        return (Iterable<ModelPart>)ImmutableList.of(this.bone); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/client/model/BlazeModel.java b/src/main/java/net/minecraft/client/model/BlazeModel.java
index 58f369fd99107825a633683f54ae470c52334cbc..50b947899dbdfe74dfb2de5288344df36c5dd7eb 100644
--- a/src/main/java/net/minecraft/client/model/BlazeModel.java
+++ b/src/main/java/net/minecraft/client/model/BlazeModel.java
@@ -18,8 +18,8 @@ public class BlazeModel<T extends Entity> extends ListModel<T>
         for (int debug1 = 0; debug1 < this.upperBodyParts.length; ++debug1) {
             (this.upperBodyParts[debug1] = new ModelPart(this, 0, 16)).addBox(0.0f, 0.0f, 0.0f, 2.0f, 8.0f, 2.0f);
         }
-        final ImmutableList.Builder<ModelPart> debug2 = (ImmutableList.Builder<ModelPart>)ImmutableList.builder();
-        debug2.add((Object)this.head);
+        final ImmutableList.Builder<ModelPart> debug2 = ImmutableList.builder(); // MagmaCube - decompile fix
+        debug2.add(this.head); // MagmaCube - decompile fix
         debug2.addAll((Iterable)Arrays.asList(this.upperBodyParts));
         this.parts = (ImmutableList<ModelPart>)debug2.build();
     }
diff --git a/src/main/java/net/minecraft/client/model/BookModel.java b/src/main/java/net/minecraft/client/model/BookModel.java
index a7c98ed9d607408d12d2bc98811b99bc6ed5ff5d..c128d0d0921487d0aa9212bb9de4a1085e660cb9 100644
--- a/src/main/java/net/minecraft/client/model/BookModel.java
+++ b/src/main/java/net/minecraft/client/model/BookModel.java
@@ -28,7 +28,7 @@ public class BookModel extends Model
         this.rightPages = new ModelPart(64, 32, 12, 10).addBox(0.0f, -4.0f, -0.01f, 5.0f, 8.0f, 1.0f);
         this.flipPage1 = new ModelPart(64, 32, 24, 10).addBox(0.0f, -4.0f, 0.0f, 5.0f, 8.0f, 0.005f);
         this.flipPage2 = new ModelPart(64, 32, 24, 10).addBox(0.0f, -4.0f, 0.0f, 5.0f, 8.0f, 0.005f);
-        this.parts = (List<ModelPart>)ImmutableList.of((Object)this.leftLid, (Object)this.rightLid, (Object)this.seam, (Object)this.leftPages, (Object)this.rightPages, (Object)this.flipPage1, (Object)this.flipPage2);
+        this.parts = (List<ModelPart>)ImmutableList.of(this.leftLid, this.rightLid, this.seam, this.leftPages, this.rightPages, this.flipPage1, this.flipPage2); // MagmaCube - decompile fix
         this.leftLid.setPos(0.0f, 0.0f, -1.0f);
         this.rightLid.setPos(0.0f, 0.0f, 1.0f);
         this.seam.yRot = 1.5707964f;
@@ -40,7 +40,7 @@ public class BookModel extends Model
     }
     
     public void render(final PoseStack debug1, final VertexConsumer debug2, final int debug3, final int debug4, final float debug5, final float debug6, final float debug7, final float debug8) {
-        this.parts.forEach(debug8 -> debug8.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8));
+        this.parts.forEach(debug8l -> debug8l.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
     }
     
     public void setupAnim(final float debug1, final float debug2, final float debug3, final float debug4) {
diff --git a/src/main/java/net/minecraft/client/model/ChickenModel.java b/src/main/java/net/minecraft/client/model/ChickenModel.java
index 5ab4a4c86ace9fba99239884667cd1bdc89c50be..73bffac9fa2fbc88ff4f61b97a8c0c36c31a1ec5 100644
--- a/src/main/java/net/minecraft/client/model/ChickenModel.java
+++ b/src/main/java/net/minecraft/client/model/ChickenModel.java
@@ -38,12 +38,12 @@ public class ChickenModel<T extends Entity> extends AgeableListModel<T>
     
     @Override
     protected Iterable<ModelPart> headParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.head, (Object)this.beak, (Object)this.redThing);
+        return (Iterable<ModelPart>)ImmutableList.of(this.head, this.beak, this.redThing); // MagmaCube - decompile fix
     }
     
     @Override
     protected Iterable<ModelPart> bodyParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body, (Object)this.leg0, (Object)this.leg1, (Object)this.wing0, (Object)this.wing1);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body, this.leg0, this.leg1, this.wing0, this.wing1); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/CodModel.java b/src/main/java/net/minecraft/client/model/CodModel.java
index 5d0b3ab136d03fe570dc3aa7779bf48a0d0da4dd..2e706d579f8b913a1b48072e7a0e69420c384dd8 100644
--- a/src/main/java/net/minecraft/client/model/CodModel.java
+++ b/src/main/java/net/minecraft/client/model/CodModel.java
@@ -39,7 +39,7 @@ public class CodModel<T extends Entity> extends ListModel<T>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body, (Object)this.head, (Object)this.nose, (Object)this.sideFin0, (Object)this.sideFin1, (Object)this.tailFin, (Object)this.topFin);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body, this.head, this.nose, this.sideFin0, this.sideFin1, this.tailFin, this.topFin); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/CreeperModel.java b/src/main/java/net/minecraft/client/model/CreeperModel.java
index 5533d7947c84fa07f92c1447f7102c94d5970870..01b612f3fa81c8f45d30ed102ccfbf3f1f6abfbe 100644
--- a/src/main/java/net/minecraft/client/model/CreeperModel.java
+++ b/src/main/java/net/minecraft/client/model/CreeperModel.java
@@ -39,7 +39,7 @@ public class CreeperModel<T extends Entity> extends ListModel<T>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.head, (Object)this.body, (Object)this.leg0, (Object)this.leg1, (Object)this.leg2, (Object)this.leg3);
+        return (Iterable<ModelPart>)ImmutableList.of(this.head, this.body, this.leg0, this.leg1, this.leg2, this.leg3); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/DolphinModel.java b/src/main/java/net/minecraft/client/model/DolphinModel.java
index 8e5cf74ef4312a827743908a07bf2ad5981dddb3..4b26313a2965dcae5ac8e24d51a2e32cbaa56c9c 100644
--- a/src/main/java/net/minecraft/client/model/DolphinModel.java
+++ b/src/main/java/net/minecraft/client/model/DolphinModel.java
@@ -54,7 +54,7 @@ public class DolphinModel<T extends Entity> extends ListModel<T>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/EvokerFangsModel.java b/src/main/java/net/minecraft/client/model/EvokerFangsModel.java
index cd2cd33a89ea4f19fb75013c503aff9d94e9f019..d88accd705dd5d6943a933ea9f73e4c04f96f97c 100644
--- a/src/main/java/net/minecraft/client/model/EvokerFangsModel.java
+++ b/src/main/java/net/minecraft/client/model/EvokerFangsModel.java
@@ -38,6 +38,6 @@ public class EvokerFangsModel<T extends Entity> extends ListModel<T>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.base, (Object)this.upperJaw, (Object)this.lowerJaw);
+        return (Iterable<ModelPart>)ImmutableList.of(this.base, this.upperJaw, this.lowerJaw); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/client/model/FoxModel.java b/src/main/java/net/minecraft/client/model/FoxModel.java
index 6c3c623d1a7cb5cf6a07a11c070e39520adb230e..5ab5032d754e91da4eeb58f7252be88ca02800a0 100644
--- a/src/main/java/net/minecraft/client/model/FoxModel.java
+++ b/src/main/java/net/minecraft/client/model/FoxModel.java
@@ -113,12 +113,12 @@ public class FoxModel<T extends Fox> extends AgeableListModel<T>
     
     @Override
     protected Iterable<ModelPart> headParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.head);
+        return (Iterable<ModelPart>)ImmutableList.of(this.head); // MagmaCube - decompile fix
     }
     
     @Override
     protected Iterable<ModelPart> bodyParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body, (Object)this.leg0, (Object)this.leg1, (Object)this.leg2, (Object)this.leg3);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body, this.leg0, this.leg1, this.leg2, this.leg3); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/GhastModel.java b/src/main/java/net/minecraft/client/model/GhastModel.java
index 2a24acbbac74a7f388785abb02245f4c49b5a0fd..ae8dc501e9eda65358c7260b45d86fb5dc48f567 100644
--- a/src/main/java/net/minecraft/client/model/GhastModel.java
+++ b/src/main/java/net/minecraft/client/model/GhastModel.java
@@ -13,11 +13,11 @@ public class GhastModel<T extends Entity> extends ListModel<T>
     
     public GhastModel() {
         this.tentacles = new ModelPart[9];
-        final ImmutableList.Builder<ModelPart> debug1 = (ImmutableList.Builder<ModelPart>)ImmutableList.builder();
+        final ImmutableList.Builder<ModelPart> debug1 = ImmutableList.builder(); // MagmaCube - decompile fix
         final ModelPart debug2 = new ModelPart(this, 0, 0);
         debug2.addBox(-8.0f, -8.0f, -8.0f, 16.0f, 16.0f, 16.0f);
         debug2.y = 17.6f;
-        debug1.add((Object)debug2);
+        debug1.add(debug2); // MagmaCube - decompile fix
         final Random debug3 = new Random(1660L);
         for (int debug4 = 0; debug4 < this.tentacles.length; ++debug4) {
             this.tentacles[debug4] = new ModelPart(this, 0, 0);
@@ -28,7 +28,7 @@ public class GhastModel<T extends Entity> extends ListModel<T>
             this.tentacles[debug4].x = debug5;
             this.tentacles[debug4].z = debug6;
             this.tentacles[debug4].y = 24.6f;
-            debug1.add((Object)this.tentacles[debug4]);
+            debug1.add(this.tentacles[debug4]); // MagmaCube - decompile fix
         }
         this.parts = (ImmutableList<ModelPart>)debug1.build();
     }
diff --git a/src/main/java/net/minecraft/client/model/GuardianModel.java b/src/main/java/net/minecraft/client/model/GuardianModel.java
index 865cfce6d1849cfc653b93de0f667489ea5967dc..b33262c8ef64e1f3f96f947b1f8558dec80a783f 100644
--- a/src/main/java/net/minecraft/client/model/GuardianModel.java
+++ b/src/main/java/net/minecraft/client/model/GuardianModel.java
@@ -62,7 +62,7 @@ extends ListModel<Guardian> {
 
     @Override
     public Iterable<ModelPart> parts() {
-        return ImmutableList.of((Object)this.head);
+        return ImmutableList.of(this.head); // MagmaCube - decompile fix
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/client/model/HoglinModel.java b/src/main/java/net/minecraft/client/model/HoglinModel.java
index 287fdb3e356153dedadfe5f225c838d085aa69f9..fe90219813f006f173622721bc918e0b71ab9992 100644
--- a/src/main/java/net/minecraft/client/model/HoglinModel.java
+++ b/src/main/java/net/minecraft/client/model/HoglinModel.java
@@ -2,12 +2,13 @@ package net.minecraft.client.model;
 
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.monster.hoglin.HoglinBase;
 import net.minecraft.util.Mth;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.client.model.geom.ModelPart;
 
-public class HoglinModel<T extends Mob> extends AgeableListModel<T>
+public class HoglinModel<T extends Mob> extends AgeableListModel<T> // MagmaCube - decompile fix
 {
     private final ModelPart head;
     private final ModelPart rightEar;
@@ -61,12 +62,12 @@ public class HoglinModel<T extends Mob> extends AgeableListModel<T>
     
     @Override
     protected Iterable<ModelPart> headParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.head);
+        return (Iterable<ModelPart>)ImmutableList.of(this.head); // MagmaCube - decompile fix
     }
     
     @Override
     protected Iterable<ModelPart> bodyParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body, (Object)this.frontRightLeg, (Object)this.frontLeftLeg, (Object)this.backRightLeg, (Object)this.backLeftLeg);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body, this.frontRightLeg, this.frontLeftLeg, this.backRightLeg, this.backLeftLeg); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/HorseModel.java b/src/main/java/net/minecraft/client/model/HorseModel.java
index 526055c35174dc831f68d9f39385b6a99e22f452..dcf128bfb68c35d334f4f213dbfaef3bacbd9674 100644
--- a/src/main/java/net/minecraft/client/model/HorseModel.java
+++ b/src/main/java/net/minecraft/client/model/HorseModel.java
@@ -119,12 +119,12 @@ public class HorseModel<T extends AbstractHorse> extends AgeableListModel<T>
     }
     
     public Iterable<ModelPart> headParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.headParts);
+        return (Iterable<ModelPart>)ImmutableList.of(this.headParts); // MagmaCube - decompile fix
     }
     
     @Override
     protected Iterable<ModelPart> bodyParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body, (Object)this.leg1, (Object)this.leg2, (Object)this.leg3, (Object)this.leg4, (Object)this.babyLeg1, (Object)this.babyLeg2, (Object)this.babyLeg3, (Object)this.babyLeg4);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body, this.leg1, this.leg2, this.leg3, this.leg4, this.babyLeg1, this.babyLeg2, this.babyLeg3, this.babyLeg4); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/HumanoidModel.java b/src/main/java/net/minecraft/client/model/HumanoidModel.java
index 41b42bed8832233ccc7a4946287bf5923907a585..97bf33f6cea94638d1517ca43fcae5a9be799de0 100644
--- a/src/main/java/net/minecraft/client/model/HumanoidModel.java
+++ b/src/main/java/net/minecraft/client/model/HumanoidModel.java
@@ -62,12 +62,12 @@ public class HumanoidModel<T extends LivingEntity> extends AgeableListModel<T> i
     
     @Override
     protected Iterable<ModelPart> headParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.head);
+        return (Iterable<ModelPart>)ImmutableList.of(this.head); // MagmaCube - decompile fix
     }
     
     @Override
     protected Iterable<ModelPart> bodyParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body, (Object)this.rightArm, (Object)this.leftArm, (Object)this.rightLeg, (Object)this.leftLeg, (Object)this.hat);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body, this.rightArm, this.leftArm, this.rightLeg, this.leftLeg, this.hat); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/IllagerModel.java b/src/main/java/net/minecraft/client/model/IllagerModel.java
index 50b3f433aca98bdda704d96c5cb771d8649b2e74..a87672b65b1e9839602148bbed00ad0e88e4a691 100644
--- a/src/main/java/net/minecraft/client/model/IllagerModel.java
+++ b/src/main/java/net/minecraft/client/model/IllagerModel.java
@@ -56,7 +56,7 @@ public class IllagerModel<T extends AbstractIllager> extends ListModel<T> implem
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.head, (Object)this.body, (Object)this.leftLeg, (Object)this.rightLeg, (Object)this.arms, (Object)this.rightArm, (Object)this.leftArm);
+        return (Iterable<ModelPart>)ImmutableList.of(this.head, this.body, this.leftLeg, this.rightLeg, this.arms, this.rightArm, this.leftArm); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/IronGolemModel.java b/src/main/java/net/minecraft/client/model/IronGolemModel.java
index 67d451aa4ff6d3b483a0c88c0afb877cac1a3f3d..650e8b2e73f2291d25451500ab02362f0612e72b 100644
--- a/src/main/java/net/minecraft/client/model/IronGolemModel.java
+++ b/src/main/java/net/minecraft/client/model/IronGolemModel.java
@@ -38,7 +38,7 @@ public class IronGolemModel<T extends IronGolem> extends ListModel<T>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.head, (Object)this.body, (Object)this.leg0, (Object)this.leg1, (Object)this.arm0, (Object)this.arm1);
+        return (Iterable<ModelPart>)ImmutableList.of(this.head, this.body, this.leg0, this.leg1, this.arm0, this.arm1); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/LavaSlimeModel.java b/src/main/java/net/minecraft/client/model/LavaSlimeModel.java
index 1f73368f88ac9bbe004bfc527dcb18ec19113ca1..3eae1d4685d9a3a6018396c269faf73b16e5b272 100644
--- a/src/main/java/net/minecraft/client/model/LavaSlimeModel.java
+++ b/src/main/java/net/minecraft/client/model/LavaSlimeModel.java
@@ -29,8 +29,8 @@ public class LavaSlimeModel<T extends Slime> extends ListModel<T>
             (this.bodyCubes[debug1] = new ModelPart(this, debug2, debug3)).addBox(-4.0f, 16 + debug1, -4.0f, 8.0f, 1.0f, 8.0f);
         }
         (this.insideCube = new ModelPart(this, 0, 16)).addBox(-2.0f, 18.0f, -2.0f, 4.0f, 4.0f, 4.0f);
-        final ImmutableList.Builder<ModelPart> debug4 = (ImmutableList.Builder<ModelPart>)ImmutableList.builder();
-        debug4.add((Object)this.insideCube);
+        final ImmutableList.Builder<ModelPart> debug4 = ImmutableList.builder(); // MagmaCube - decompile fix
+        debug4.add(this.insideCube); // MagmaCube - decompile fix
         debug4.addAll((Iterable)Arrays.asList(this.bodyCubes));
         this.parts = (ImmutableList<ModelPart>)debug4.build();
     }
diff --git a/src/main/java/net/minecraft/client/model/ListModel.java b/src/main/java/net/minecraft/client/model/ListModel.java
index 55753b1dd0651d0f1d9864c75c7f08758b18b4cd..4d8cc8b2e504eeb3207a90bd2a049bcbb81be3c6 100644
--- a/src/main/java/net/minecraft/client/model/ListModel.java
+++ b/src/main/java/net/minecraft/client/model/ListModel.java
@@ -20,7 +20,7 @@ public abstract class ListModel<E extends Entity> extends EntityModel<E>
     
     @Override
     public void renderToBuffer(final PoseStack debug1, final VertexConsumer debug2, final int debug3, final int debug4, final float debug5, final float debug6, final float debug7, final float debug8) {
-        this.parts().forEach(debug8 -> debug8.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8));
+        this.parts().forEach(debug8l -> debug8l.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
     }
     
     public abstract Iterable<ModelPart> parts();
diff --git a/src/main/java/net/minecraft/client/model/LlamaModel.java b/src/main/java/net/minecraft/client/model/LlamaModel.java
index d8b255d24853e298e01bc2c3ff3cd1a6259553fe..b44e9d9f3fbb56ae469bbe29e58a5c7c1d7488b4 100644
--- a/src/main/java/net/minecraft/client/model/LlamaModel.java
+++ b/src/main/java/net/minecraft/client/model/LlamaModel.java
@@ -96,11 +96,11 @@ public class LlamaModel<T extends AbstractChestedHorse> extends EntityModel<T>
             debug1.pushPose();
             debug1.scale(0.45454544f, 0.41322312f, 0.45454544f);
             debug1.translate(0.0, 2.0625, 0.0);
-            ImmutableList.of((Object)this.leg0, (Object)this.leg1, (Object)this.leg2, (Object)this.leg3, (Object)this.chest1, (Object)this.chest2).forEach(debug8 -> debug8.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8));
+            ImmutableList.of(this.leg0, this.leg1, this.leg2, this.leg3, this.chest1, this.chest2).forEach(debug8l -> debug8l.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
             debug1.popPose();
         }
         else {
-            ImmutableList.of((Object)this.head, (Object)this.body, (Object)this.leg0, (Object)this.leg1, (Object)this.leg2, (Object)this.leg3, (Object)this.chest1, (Object)this.chest2).forEach(debug8 -> debug8.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8));
+            ImmutableList.of(this.head, this.body, this.leg0, this.leg1, this.leg2, this.leg3, this.chest1, this.chest2).forEach(debug8l -> debug8l.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/client/model/LlamaSpitModel.java b/src/main/java/net/minecraft/client/model/LlamaSpitModel.java
index 612bd4501d7d2b87478e1a52c7abee1f09c9c1f4..027a3adf2b7981790f6dc8167656dd3ecfd661d0 100644
--- a/src/main/java/net/minecraft/client/model/LlamaSpitModel.java
+++ b/src/main/java/net/minecraft/client/model/LlamaSpitModel.java
@@ -31,6 +31,6 @@ public class LlamaSpitModel<T extends Entity> extends ListModel<T>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.main);
+        return (Iterable<ModelPart>)ImmutableList.of(this.main); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/client/model/OcelotModel.java b/src/main/java/net/minecraft/client/model/OcelotModel.java
index a808aa9672d7e32aca66635b13c6a02ba00d8ae6..82e55f821f7c7909ebed9fac521714b1612e380a 100644
--- a/src/main/java/net/minecraft/client/model/OcelotModel.java
+++ b/src/main/java/net/minecraft/client/model/OcelotModel.java
@@ -44,12 +44,12 @@ public class OcelotModel<T extends Entity> extends AgeableListModel<T>
     
     @Override
     protected Iterable<ModelPart> headParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.head);
+        return (Iterable<ModelPart>)ImmutableList.of(this.head); // MagmaCube - decompile fix
     }
     
     @Override
     protected Iterable<ModelPart> bodyParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body, (Object)this.backLegL, (Object)this.backLegR, (Object)this.frontLegL, (Object)this.frontLegR, (Object)this.tail1, (Object)this.tail2);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body, this.backLegL, this.backLegR, this.frontLegL, this.frontLegR, this.tail1, this.tail2); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/ParrotModel.java b/src/main/java/net/minecraft/client/model/ParrotModel.java
index 50ca69a4fad1589239b286ff7c2b73f326f9061d..2e66b2f6ab16dccf2f407877e29ddc2a8627f130 100644
--- a/src/main/java/net/minecraft/client/model/ParrotModel.java
+++ b/src/main/java/net/minecraft/client/model/ParrotModel.java
@@ -55,7 +55,7 @@ public class ParrotModel extends ListModel<Parrot>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body, (Object)this.wingLeft, (Object)this.wingRight, (Object)this.tail, (Object)this.head, (Object)this.legLeft, (Object)this.legRight);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body, this.wingLeft, this.wingRight, this.tail, this.head, this.legLeft, this.legRight); // MagmaCube - decompile fix
     }
     
     @Override
@@ -71,7 +71,7 @@ public class ParrotModel extends ListModel<Parrot>
     public void renderOnShoulder(final PoseStack debug1, final VertexConsumer debug2, final int debug3, final int debug4, final float debug5, final float debug6, final float debug7, final float debug8, final int debug9) {
         this.prepare(State.ON_SHOULDER);
         this.setupAnim(State.ON_SHOULDER, debug9, debug5, debug6, 0.0f, debug7, debug8);
-        this.parts().forEach(debug4 -> debug4.render(debug1, debug2, debug3, debug4));
+        this.parts().forEach(debug4l -> debug4l.render(debug1, debug2, debug3, debug4)); // MagmaCube - decompile fix
     }
     
     private void setupAnim(final State debug1, final int debug2, final float debug3, final float debug4, final float debug5, final float debug6, final float debug7) {
diff --git a/src/main/java/net/minecraft/client/model/PhantomModel.java b/src/main/java/net/minecraft/client/model/PhantomModel.java
index 775efe7a20fe1347a9622e5aa1a50de9bc146ec2..5410291b7d32edf36754689a22e4aa7b35806f45 100644
--- a/src/main/java/net/minecraft/client/model/PhantomModel.java
+++ b/src/main/java/net/minecraft/client/model/PhantomModel.java
@@ -55,7 +55,7 @@ public class PhantomModel<T extends Entity> extends ListModel<T>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/PlayerModel.java b/src/main/java/net/minecraft/client/model/PlayerModel.java
index bc57f873c85ad51d44d07e17540dee774f9384a8..bc128dd594a9dab37bd10030b988f7c132c38d64 100644
--- a/src/main/java/net/minecraft/client/model/PlayerModel.java
+++ b/src/main/java/net/minecraft/client/model/PlayerModel.java
@@ -29,7 +29,7 @@ public class PlayerModel<T extends LivingEntity> extends HumanoidModel<T>
     
     public PlayerModel(final float debug1, final boolean debug2) {
         super(RenderType::entityTranslucent, debug1, 0.0f, 64, 64);
-        this.cubes = (List<ModelPart>)Lists.newArrayList();
+        this.cubes = Lists.newArrayList(); // MagmaCube - decompile fix
         this.slim = debug2;
         (this.ear = new ModelPart(this, 24, 0)).addBox(-3.0f, -6.0f, -1.0f, 6.0f, 6.0f, 1.0f, debug1);
         (this.cloak = new ModelPart(this, 0, 0)).setTexSize(64, 32);
@@ -141,7 +141,7 @@ public class PlayerModel<T extends LivingEntity> extends HumanoidModel<T>
     @Override
     public void accept(final ModelPart debug1) {
         if (this.cubes == null) {
-            this.cubes = (List<ModelPart>)Lists.newArrayList();
+            this.cubes = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         this.cubes.add(debug1);
     }
diff --git a/src/main/java/net/minecraft/client/model/PufferfishBigModel.java b/src/main/java/net/minecraft/client/model/PufferfishBigModel.java
index e4c0c179b5191706470a0ef9cdd2a83b8be69681..91f1f70f430d298d84b0a05d6b3a210b00649171 100644
--- a/src/main/java/net/minecraft/client/model/PufferfishBigModel.java
+++ b/src/main/java/net/minecraft/client/model/PufferfishBigModel.java
@@ -63,7 +63,7 @@ public class PufferfishBigModel<T extends Entity> extends ListModel<T>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.cube, (Object)this.blueFin0, (Object)this.blueFin1, (Object)this.topFrontFin, (Object)this.topMidFin, (Object)this.topBackFin, (Object)this.sideFrontFin0, (Object)this.sideFrontFin1, (Object)this.bottomFrontFin, (Object)this.bottomMidFin, (Object)this.bottomBackFin, (Object)this.sideBackFin0, (Object[])new ModelPart[] { this.sideBackFin1 });
+        return (Iterable<ModelPart>)ImmutableList.of(this.cube, this.blueFin0, this.blueFin1, this.topFrontFin, this.topMidFin, this.topBackFin, this.sideFrontFin0, this.sideFrontFin1, this.bottomFrontFin, this.bottomMidFin, this.bottomBackFin, this.sideBackFin0, new ModelPart[] { this.sideBackFin1 }); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/QuadrupedModel.java b/src/main/java/net/minecraft/client/model/QuadrupedModel.java
index 92829ca8cb574de6b489f50505909952bc000dcd..1a191d5bb6078e51b93b62b849d62886b06c5a2c 100644
--- a/src/main/java/net/minecraft/client/model/QuadrupedModel.java
+++ b/src/main/java/net/minecraft/client/model/QuadrupedModel.java
@@ -32,12 +32,12 @@ public class QuadrupedModel<T extends Entity> extends AgeableListModel<T>
     
     @Override
     protected Iterable<ModelPart> headParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.head);
+        return (Iterable<ModelPart>)ImmutableList.of(this.head); // MagmaCube - decompile fix
     }
     
     @Override
     protected Iterable<ModelPart> bodyParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body, (Object)this.leg0, (Object)this.leg1, (Object)this.leg2, (Object)this.leg3);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body, this.leg0, this.leg1, this.leg2, this.leg3); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/RabbitModel.java b/src/main/java/net/minecraft/client/model/RabbitModel.java
index 58877493a508cf4e3da0049b1ccd2d13d3a712ca..adc5cf86b57266ef12d6491cf57819bac2bb185e 100644
--- a/src/main/java/net/minecraft/client/model/RabbitModel.java
+++ b/src/main/java/net/minecraft/client/model/RabbitModel.java
@@ -88,19 +88,19 @@ public class RabbitModel<T extends Rabbit> extends EntityModel<T>
             debug1.pushPose();
             debug1.scale(0.56666666f, 0.56666666f, 0.56666666f);
             debug1.translate(0.0, 1.375, 0.125);
-            ImmutableList.of((Object)this.head, (Object)this.earLeft, (Object)this.earRight, (Object)this.nose).forEach(debug8 -> debug8.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8));
+            ImmutableList.of(this.head, this.earLeft, this.earRight, this.nose).forEach(debug8l -> debug8l.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
             debug1.popPose();
             debug1.pushPose();
             debug1.scale(0.4f, 0.4f, 0.4f);
             debug1.translate(0.0, 2.25, 0.0);
-            ImmutableList.of((Object)this.rearFootLeft, (Object)this.rearFootRight, (Object)this.haunchLeft, (Object)this.haunchRight, (Object)this.body, (Object)this.frontLegLeft, (Object)this.frontLegRight, (Object)this.tail).forEach(debug8 -> debug8.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8));
+            ImmutableList.of(this.rearFootLeft, this.rearFootRight, this.haunchLeft, this.haunchRight, this.body, this.frontLegLeft, this.frontLegRight, this.tail).forEach(debug8l -> debug8l.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
             debug1.popPose();
         }
         else {
             debug1.pushPose();
             debug1.scale(0.6f, 0.6f, 0.6f);
             debug1.translate(0.0, 1.0, 0.0);
-            ImmutableList.of((Object)this.rearFootLeft, (Object)this.rearFootRight, (Object)this.haunchLeft, (Object)this.haunchRight, (Object)this.body, (Object)this.frontLegLeft, (Object)this.frontLegRight, (Object)this.head, (Object)this.earRight, (Object)this.earLeft, (Object)this.tail, (Object)this.nose, (Object[])new ModelPart[0]).forEach(debug8 -> debug8.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8));
+            ImmutableList.of(this.rearFootLeft, this.rearFootRight, this.haunchLeft, this.haunchRight, this.body, this.frontLegLeft, this.frontLegRight, this.head, this.earRight, this.earLeft, this.tail, this.nose).forEach(debug8l -> debug8l.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
             debug1.popPose();
         }
     }
diff --git a/src/main/java/net/minecraft/client/model/RavagerModel.java b/src/main/java/net/minecraft/client/model/RavagerModel.java
index 29852f82c6fa8b42de61990edd3ea94cd8183389..9997433a87e7fa5e7c4c46ef5a4722db1661ece4 100644
--- a/src/main/java/net/minecraft/client/model/RavagerModel.java
+++ b/src/main/java/net/minecraft/client/model/RavagerModel.java
@@ -62,7 +62,7 @@ public class RavagerModel extends ListModel<Ravager>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.neck, (Object)this.body, (Object)this.leg0, (Object)this.leg1, (Object)this.leg2, (Object)this.leg3);
+        return (Iterable<ModelPart>)ImmutableList.of(this.neck, this.body, this.leg0, this.leg1, this.leg2, this.leg3); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/ShulkerBulletModel.java b/src/main/java/net/minecraft/client/model/ShulkerBulletModel.java
index bd90d457b9ecac2ffbfe3cbfade1ba548ce3e704..a374de3bf90252b2f16b5cec361a8ece11649d04 100644
--- a/src/main/java/net/minecraft/client/model/ShulkerBulletModel.java
+++ b/src/main/java/net/minecraft/client/model/ShulkerBulletModel.java
@@ -20,7 +20,7 @@ public class ShulkerBulletModel<T extends Entity> extends ListModel<T>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.main);
+        return (Iterable<ModelPart>)ImmutableList.of(this.main); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/ShulkerModel.java b/src/main/java/net/minecraft/client/model/ShulkerModel.java
index 9977179d7d1f4698a65db4f7a9eecc464448fd88..cf14125c8ca3de7a0e17ec5f00cdb1aef8294925 100644
--- a/src/main/java/net/minecraft/client/model/ShulkerModel.java
+++ b/src/main/java/net/minecraft/client/model/ShulkerModel.java
@@ -49,7 +49,7 @@ public class ShulkerModel<T extends Shulker> extends ListModel<T>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.base, (Object)this.lid);
+        return (Iterable<ModelPart>)ImmutableList.of(this.base, this.lid); // MagmaCube - decompile fix
     }
     
     public ModelPart getBase() {
diff --git a/src/main/java/net/minecraft/client/model/SilverfishModel.java b/src/main/java/net/minecraft/client/model/SilverfishModel.java
index f640d0b127055594527d20e6408dc090d3314ef6..0e216ba5f16e7c9aa0aaa801b6ff55408588d0ac 100644
--- a/src/main/java/net/minecraft/client/model/SilverfishModel.java
+++ b/src/main/java/net/minecraft/client/model/SilverfishModel.java
@@ -34,7 +34,7 @@ public class SilverfishModel<T extends Entity> extends ListModel<T>
         this.bodyLayers[1].setPos(0.0f, 20.0f, this.zPlacement[4]);
         (this.bodyLayers[2] = new ModelPart(this, 20, 18)).addBox(-3.0f, 0.0f, SilverfishModel.BODY_SIZES[4][2] * -0.5f, 6.0f, 5.0f, SilverfishModel.BODY_SIZES[1][2]);
         this.bodyLayers[2].setPos(0.0f, 19.0f, this.zPlacement[1]);
-        final ImmutableList.Builder<ModelPart> debug3 = (ImmutableList.Builder<ModelPart>)ImmutableList.builder();
+        final ImmutableList.Builder<ModelPart> debug3 = ImmutableList.builder(); // MagmaCube - decompile fix
         debug3.addAll((Iterable)Arrays.asList(this.bodyParts));
         debug3.addAll((Iterable)Arrays.asList(this.bodyLayers));
         this.parts = (ImmutableList<ModelPart>)debug3.build();
diff --git a/src/main/java/net/minecraft/client/model/SkeletonModel.java b/src/main/java/net/minecraft/client/model/SkeletonModel.java
index 7119172f8f2ece6c4991d36cf17d20a39d5fb95d..eba8f3e2b903c32e77bf5112a71619194c95db58 100644
--- a/src/main/java/net/minecraft/client/model/SkeletonModel.java
+++ b/src/main/java/net/minecraft/client/model/SkeletonModel.java
@@ -4,6 +4,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.util.Mth;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.item.Items;
diff --git a/src/main/java/net/minecraft/client/model/SlimeModel.java b/src/main/java/net/minecraft/client/model/SlimeModel.java
index 31ff4a556941e3cdc8a61d019c1f67296c776365..01ad023a4f55fc3fac6c5708d46e9bfd060e2988 100644
--- a/src/main/java/net/minecraft/client/model/SlimeModel.java
+++ b/src/main/java/net/minecraft/client/model/SlimeModel.java
@@ -33,6 +33,6 @@ public class SlimeModel<T extends Entity> extends ListModel<T>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.cube, (Object)this.eye0, (Object)this.eye1, (Object)this.mouth);
+        return (Iterable<ModelPart>)ImmutableList.of(this.cube, this.eye0, this.eye1, this.mouth); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/client/model/SpiderModel.java b/src/main/java/net/minecraft/client/model/SpiderModel.java
index d552f9256c524bfcef169522a824913e8051914b..bd879c90b620d023986d5af96a1a2519b7189ae2 100644
--- a/src/main/java/net/minecraft/client/model/SpiderModel.java
+++ b/src/main/java/net/minecraft/client/model/SpiderModel.java
@@ -48,7 +48,7 @@ public class SpiderModel<T extends Entity> extends ListModel<T>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.head, (Object)this.body0, (Object)this.body1, (Object)this.leg0, (Object)this.leg1, (Object)this.leg2, (Object)this.leg3, (Object)this.leg4, (Object)this.leg5, (Object)this.leg6, (Object)this.leg7);
+        return (Iterable<ModelPart>)ImmutableList.of(this.head, this.body0, this.body1, this.leg0, this.leg1, this.leg2, this.leg3, this.leg4, this.leg5, this.leg6, this.leg7); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/SquidModel.java b/src/main/java/net/minecraft/client/model/SquidModel.java
index 06312e65a58e277de097d4b6d3ecdabec554a2ec..1b7576dff7e72b4c9766492e86139c959cb147e3 100644
--- a/src/main/java/net/minecraft/client/model/SquidModel.java
+++ b/src/main/java/net/minecraft/client/model/SquidModel.java
@@ -29,8 +29,8 @@ public class SquidModel<T extends Entity> extends ListModel<T>
             debug3 = debug2 * 3.141592653589793 * -2.0 / this.tentacles.length + 1.5707963267948966;
             this.tentacles[debug2].yRot = (float)debug3;
         }
-        final ImmutableList.Builder<ModelPart> debug6 = (ImmutableList.Builder<ModelPart>)ImmutableList.builder();
-        debug6.add((Object)this.body);
+        final ImmutableList.Builder<ModelPart> debug6 = ImmutableList.builder(); // MagmaCube - decompile fix
+        debug6.add(this.body); // MagmaCube - decompile fix
         debug6.addAll((Iterable)Arrays.asList(this.tentacles));
         this.parts = (ImmutableList<ModelPart>)debug6.build();
     }
diff --git a/src/main/java/net/minecraft/client/model/StriderModel.java b/src/main/java/net/minecraft/client/model/StriderModel.java
index c4cc7454e8fa0b107e67f6fad65b3dd4454ff64d..7f082229fbec4ecada57bbddf63e6683917b5b5e 100644
--- a/src/main/java/net/minecraft/client/model/StriderModel.java
+++ b/src/main/java/net/minecraft/client/model/StriderModel.java
@@ -118,6 +118,6 @@ public class StriderModel<T extends Strider> extends ListModel<T>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body, (Object)this.leftLeg, (Object)this.rightLeg);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body, this.leftLeg, this.rightLeg); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/client/model/TropicalFishModelA.java b/src/main/java/net/minecraft/client/model/TropicalFishModelA.java
index ee726235349dc6f73097676f87f1b2f038388c61..3c96201be5b6a4b6446c30e4ce7b3a38c77c17c1 100644
--- a/src/main/java/net/minecraft/client/model/TropicalFishModelA.java
+++ b/src/main/java/net/minecraft/client/model/TropicalFishModelA.java
@@ -33,7 +33,7 @@ public class TropicalFishModelA<T extends Entity> extends ColorableListModel<T>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body, (Object)this.tail, (Object)this.leftFin, (Object)this.rightFin, (Object)this.topFin);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body, this.tail, this.leftFin, this.rightFin, this.topFin); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/TropicalFishModelB.java b/src/main/java/net/minecraft/client/model/TropicalFishModelB.java
index 6668abb9bcfd1d06adb26bfb3f4a964ca2ef6b64..6f90c3c01ab9722ac4b958455fb76a2c1958c367 100644
--- a/src/main/java/net/minecraft/client/model/TropicalFishModelB.java
+++ b/src/main/java/net/minecraft/client/model/TropicalFishModelB.java
@@ -36,7 +36,7 @@ public class TropicalFishModelB<T extends Entity> extends ColorableListModel<T>
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body, (Object)this.tail, (Object)this.leftFin, (Object)this.rightFin, (Object)this.topFin, (Object)this.bottomFin);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body, this.tail, this.leftFin, this.rightFin, this.topFin, this.bottomFin); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/VillagerModel.java b/src/main/java/net/minecraft/client/model/VillagerModel.java
index eb15e553ec3a3b23c7b8d5f1746cbf94a0ff0db7..6b17f8dadab29d17c342d82dc9303e628b45028c 100644
--- a/src/main/java/net/minecraft/client/model/VillagerModel.java
+++ b/src/main/java/net/minecraft/client/model/VillagerModel.java
@@ -55,7 +55,7 @@ public class VillagerModel<T extends Entity> extends ListModel<T> implements Hea
     
     @Override
     public Iterable<ModelPart> parts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.head, (Object)this.body, (Object)this.leg0, (Object)this.leg1, (Object)this.arms);
+        return (Iterable<ModelPart>)ImmutableList.of(this.head, this.body, this.leg0, this.leg1, this.arms); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/WitherBossModel.java b/src/main/java/net/minecraft/client/model/WitherBossModel.java
index 1b91ca61dc6476de634787d9994820b1d17639c8..3d5f0b591444dae0ad8d7667ea0629c930b398df 100644
--- a/src/main/java/net/minecraft/client/model/WitherBossModel.java
+++ b/src/main/java/net/minecraft/client/model/WitherBossModel.java
@@ -32,7 +32,7 @@ public class WitherBossModel<T extends WitherBoss> extends ListModel<T>
         (this.heads[2] = new ModelPart(this, 32, 0)).addBox(-4.0f, -4.0f, -4.0f, 6.0f, 6.0f, 6.0f, debug1);
         this.heads[2].x = 10.0f;
         this.heads[2].y = 4.0f;
-        final ImmutableList.Builder<ModelPart> debug2 = (ImmutableList.Builder<ModelPart>)ImmutableList.builder();
+        final ImmutableList.Builder<ModelPart> debug2 = ImmutableList.builder(); // MagmaCube - decompile fix
         debug2.addAll((Iterable)Arrays.asList(this.heads));
         debug2.addAll((Iterable)Arrays.asList(this.upperBodyParts));
         this.parts = (ImmutableList<ModelPart>)debug2.build();
diff --git a/src/main/java/net/minecraft/client/model/WolfModel.java b/src/main/java/net/minecraft/client/model/WolfModel.java
index e47ee557ea5e04c66584fdcbe7a15fdb33acdf06..90a1fa83cbf84188a2e07cbd06722d5c25101e4a 100644
--- a/src/main/java/net/minecraft/client/model/WolfModel.java
+++ b/src/main/java/net/minecraft/client/model/WolfModel.java
@@ -47,12 +47,12 @@ public class WolfModel<T extends Wolf> extends ColorableAgeableListModel<T>
     
     @Override
     protected Iterable<ModelPart> headParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.head);
+        return (Iterable<ModelPart>)ImmutableList.of(this.head); // MagmaCube - decompile fix
     }
     
     @Override
     protected Iterable<ModelPart> bodyParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body, (Object)this.leg0, (Object)this.leg1, (Object)this.leg2, (Object)this.leg3, (Object)this.tail, (Object)this.upperBody);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body, this.leg0, this.leg1, this.leg2, this.leg3, this.tail, this.upperBody); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/geom/ModelPart.java b/src/main/java/net/minecraft/client/model/geom/ModelPart.java
index f9edf916eda6f4d4ab8f7f10416341bf9d5f0398..99215dd487db12c9959c43b5eea200170e19193f 100644
--- a/src/main/java/net/minecraft/client/model/geom/ModelPart.java
+++ b/src/main/java/net/minecraft/client/model/geom/ModelPart.java
@@ -79,7 +79,7 @@ public class ModelPart
     }
     
     public void addChild(final ModelPart debug1) {
-        this.children.add((Object)debug1);
+        this.children.add(debug1); // MagmaCube - decompile fix
     }
     
     public ModelPart texOffs(final int debug1, final int debug2) {
@@ -117,7 +117,7 @@ public class ModelPart
     }
     
     private void addBox(final int debug1, final int debug2, final float debug3, final float debug4, final float debug5, final float debug6, final float debug7, final float debug8, final float debug9, final float debug10, final float debug11, final boolean debug12, final boolean debug13) {
-        this.cubes.add((Object)new Cube(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8, debug9, debug10, debug11, debug12, this.xTexSize, this.yTexSize));
+        this.cubes.add(new Cube(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8, debug9, debug10, debug11, debug12, this.xTexSize, this.yTexSize)); // MagmaCube - decompile fix
     }
     
     public void setPos(final float debug1, final float debug2, final float debug3) {
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientChunkCache.java b/src/main/java/net/minecraft/client/multiplayer/ClientChunkCache.java
index d0684303524da91dd2bd08a750ab3dcbd1b2b2b3..92102eb6127943de747dd3d3e8f22f77ff90090d 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientChunkCache.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientChunkCache.java
@@ -180,12 +180,6 @@ extends ChunkSource {
         return this.hasChunk(Mth.floor(debug1.getX()) >> 4, Mth.floor(debug1.getZ()) >> 4);
     }
 
-    @Override
-    @Nullable
-    public /* synthetic */ ChunkAccess getChunk(int n, int n2, ChunkStatus chunkStatus, boolean bl) {
-        return this.getChunk(n, n2, chunkStatus, bl);
-    }
-
     final class Storage {
         private final AtomicReferenceArray<LevelChunk> chunks;
         private final int chunkRadius;
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java
index 1ada9bbb1af41009fafab88676490090905dd929..163623a2d4743eb52c59e2ac01081849c94dc82e 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java
@@ -76,17 +76,17 @@ implements ClientLoginPacketListener {
         ServerboundKeyPacket debug5 = new ServerboundKeyPacket(debug2, debug3, debug1.getNonce());
         this.updateStatus.accept(new TranslatableComponent("connect.authorizing"));
         HttpUtil.DOWNLOAD_EXECUTOR.submit(() -> {
-            Component debug4 = this.authenticateServer(debug4);
-            if (debug4 != null) {
+            Component debug4l = this.authenticateServer(debug4); // MagmaCube - decompile fix
+            if (debug4l != null) { // MagmaCube - decompile fix
                 if (this.minecraft.getCurrentServer() != null && this.minecraft.getCurrentServer().isLan()) {
-                    LOGGER.warn(debug4.getString());
+                    LOGGER.warn(debug4l.getString()); // MagmaCube - decompile fix
                 } else {
-                    this.connection.disconnect(debug4);
+                    this.connection.disconnect(debug4l); // MagmaCube - decompile fix
                     return;
                 }
             }
             this.updateStatus.accept(new TranslatableComponent("connect.encrypting"));
-            this.connection.send(debug5, (GenericFutureListener<? extends Future<? super Void>>)((GenericFutureListener)debug2 -> this.connection.setEncryptionKey(debug2)));
+            this.connection.send(debug5, (GenericFutureListener<? extends Future<? super Void>>)((GenericFutureListener)debug2l -> this.connection.setEncryptionKey(debug2))); // MagmaCube - decompile fix
         });
     }
 
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientLevel.java b/src/main/java/net/minecraft/client/multiplayer/ClientLevel.java
index 495de957a16589975c6735274fa4bbd6b18f1fe4..79ee32cfccb574fdcdaeb47440e36eafda2b79de 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientLevel.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientLevel.java
@@ -282,7 +282,7 @@ extends Level {
 
     private void addEntity(int debug1, Entity debug2) {
         this.removeEntity(debug1);
-        this.entitiesById.put(debug1, (Object)debug2);
+        this.entitiesById.put(debug1, debug2); // MagmaCube - decompile fix
         this.getChunkSource().getChunk(Mth.floor(debug2.getX() / 16.0), Mth.floor(debug2.getZ() / 16.0), ChunkStatus.FULL, true).addEntity(debug2);
     }
 
@@ -766,16 +766,6 @@ extends Level {
         return this.clientLevelData;
     }
 
-    @Override
-    public /* synthetic */ LevelData getLevelData() {
-        return this.getLevelData();
-    }
-
-    @Override
-    public /* synthetic */ ChunkSource getChunkSource() {
-        return this.getChunkSource();
-    }
-
     public static class ClientLevelData
     implements WritableLevelData {
         private final boolean hardcore;
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index d8b3198cb72c4f128d3f07bf8a0b2e4739dc70aa..20ae10bd49760e46d18dbc23044674cc0530e05f 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -1531,22 +1531,24 @@ implements ClientGamePacketListener {
             this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
             this.downloadCallback(this.minecraft.getClientPackSource().downloadAndSelectResourcePack(debug2, debug3));
         } else if (debug4 == null || debug4.getResourcePackStatus() == ServerData.ServerPackStatus.PROMPT) {
-            this.minecraft.execute(() -> this.minecraft.setScreen(new ConfirmScreen(debug3 -> {
+            // MagmaCube start - decompile fix
+            this.minecraft.execute(() -> this.minecraft.setScreen(new ConfirmScreen(debug3l -> {
                 this.minecraft = Minecraft.getInstance();
-                ServerData debug4 = this.minecraft.getCurrentServer();
-                if (debug3) {
-                    if (debug4 != null) {
-                        debug4.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
+                ServerData debug4l = this.minecraft.getCurrentServer();
+                if (debug3l) {
+                    if (debug4l != null) {
+                        debug4l.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
                     }
                     this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
                     this.downloadCallback(this.minecraft.getClientPackSource().downloadAndSelectResourcePack(debug2, debug3));
                 } else {
-                    if (debug4 != null) {
-                        debug4.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
+                    if (debug4l != null) {
+                        debug4l.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
                     }
                     this.send(ServerboundResourcePackPacket.Action.DECLINED);
                 }
-                ServerList.saveSingleServer(debug4);
+                ServerList.saveSingleServer(debug4l);
+                // MagmaCube end - decompile fix
                 this.minecraft.setScreen(null);
             }, new TranslatableComponent("multiplayer.texturePrompt.line1"), new TranslatableComponent("multiplayer.texturePrompt.line2"))));
         } else {
@@ -1969,7 +1971,7 @@ implements ClientGamePacketListener {
         this.recipeManager.byKey(debug1.getRecipe()).ifPresent(debug2 -> {
             if (this.minecraft.screen instanceof RecipeUpdateListener) {
                 RecipeBookComponent debug3 = ((RecipeUpdateListener)((Object)this.minecraft.screen)).getRecipeBookComponent();
-                debug3.setupGhostRecipe((Recipe<?>)debug2, debug1.slots);
+                debug3.setupGhostRecipe((Recipe<?>)debug2, debug22.slots); // MagmaCube - decompile fix
             }
         });
     }
diff --git a/src/main/java/net/minecraft/client/multiplayer/MultiPlayerGameMode.java b/src/main/java/net/minecraft/client/multiplayer/MultiPlayerGameMode.java
index 6fadb4f76f2f2c0dd22c20c277efea8fd487813c..103c9c41cf8691ec28331319e85b255948367d8c 100644
--- a/src/main/java/net/minecraft/client/multiplayer/MultiPlayerGameMode.java
+++ b/src/main/java/net/minecraft/client/multiplayer/MultiPlayerGameMode.java
@@ -413,23 +413,22 @@ public class MultiPlayerGameMode {
 
     private void sendBlockAction(ServerboundPlayerActionPacket.Action debug1, BlockPos debug2, Direction debug3) {
         LocalPlayer debug4 = this.minecraft.player;
-        this.unAckedActions.put((Object)Pair.of((Object)debug2, (Object)((Object)debug1)), (Object)debug4.position());
+        this.unAckedActions.put(Pair.of(debug2, debug1), debug4.position()); // MagmaCube - decompile fix
         this.connection.send(new ServerboundPlayerActionPacket(debug1, debug2, debug3));
     }
 
     public void handleBlockBreakAck(ClientLevel debug1, BlockPos debug2, BlockState debug3, ServerboundPlayerActionPacket.Action debug4, boolean debug5) {
-        LocalPlayer debug8;
         Vec3 debug6 = (Vec3)this.unAckedActions.remove((Object)Pair.of((Object)debug2, (Object)((Object)debug4)));
         BlockState debug7 = debug1.getBlockState(debug2);
         if ((debug6 == null || !debug5 || debug4 != ServerboundPlayerActionPacket.Action.START_DESTROY_BLOCK && debug7 != debug3) && debug7 != debug3) {
             debug1.setKnownState(debug2, debug3);
-            debug8 = this.minecraft.player;
+            LocalPlayer debug8 = this.minecraft.player; // MagmaCube - decompile fix
             if (debug6 != null && debug1 == debug8.level && debug8.isColliding(debug2, debug3)) {
                 debug8.absMoveTo(debug6.x, debug6.y, debug6.z);
             }
         }
         while (this.unAckedActions.size() >= 50) {
-            debug8 = (Pair)this.unAckedActions.firstKey();
+            Pair<BlockPos, ServerboundPlayerActionPacket.Action> debug8 = (Pair)this.unAckedActions.firstKey(); // MagmaCube - decompile fix
             this.unAckedActions.removeFirst();
             LOGGER.error("Too many unacked block actions, dropping " + debug8);
         }
diff --git a/src/main/java/net/minecraft/client/multiplayer/PlayerInfo.java b/src/main/java/net/minecraft/client/multiplayer/PlayerInfo.java
index f24638994b880c189b65b7a66827eca038350f78..38245297539af6224250826868fc86b5ccdaabeb 100644
--- a/src/main/java/net/minecraft/client/multiplayer/PlayerInfo.java
+++ b/src/main/java/net/minecraft/client/multiplayer/PlayerInfo.java
@@ -93,7 +93,7 @@ public class PlayerInfo {
     @Nullable
     public ResourceLocation getElytraLocation() {
         this.registerTextures();
-        return this.textureLocations.get((Object)MinecraftProfileTexture.Type.ELYTRA);
+        return this.textureLocations.get(MinecraftProfileTexture.Type.ELYTRA);
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java b/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
index 0968a614c91acef3769a3c790f896383c11adb2b..05f69c401ec87f3e4e77b2ea3c1b37e8924dcacd 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
@@ -53,10 +53,10 @@ public class ServerStatusPinger
     private final List<Connection> connections;
     
     public ServerStatusPinger() {
-        this.connections = Collections.synchronizedList((List<Connection>)Lists.newArrayList());
+        this.connections = Collections.synchronizedList(Lists.newArrayList()); // MagmaCube - decompile fix
     }
     
-    public void pingServer(final ServerData debug1, final Runnable debug2) throws UnknownHostException {
+    public void pingServer(final ServerData debug1, final Runnable runnable) throws UnknownHostException {
         final ServerAddress debug3 = ServerAddress.parseString(debug1.ip);
         final Connection debug4 = Connection.connectToServer(InetAddress.getByName(debug3.getHost()), debug3.getPort(), false);
         this.connections.add(debug4);
@@ -69,13 +69,13 @@ public class ServerStatusPinger
             private long pingStart;
             
             @Override
-            public void handleStatusResponse(final ClientboundStatusResponsePacket debug1) {
+            public void handleStatusResponse(final ClientboundStatusResponsePacket packet) { // MagmaCube - decompile fix
                 if (this.receivedPing) {
                     debug4.disconnect(new TranslatableComponent("multiplayer.status.unrequested"));
                     return;
                 }
                 this.receivedPing = true;
-                final ServerStatus debug2 = debug1.getStatus();
+                final ServerStatus debug2 = packet.getStatus(); // MagmaCube - decompile fix
                 if (debug2.getDescription() != null) {
                     debug1.motd = debug2.getDescription();
                 }
@@ -92,7 +92,7 @@ public class ServerStatusPinger
                 }
                 if (debug2.getPlayers() != null) {
                     debug1.status = formatPlayerCount(debug2.getPlayers().getNumPlayers(), debug2.getPlayers().getMaxPlayers());
-                    final List<Component> debug3 = (List<Component>)Lists.newArrayList();
+                    final List<Component> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
                     if (ArrayUtils.isNotEmpty((Object[])debug2.getPlayers().getSample())) {
                         for (final GameProfile debug4 : debug2.getPlayers().getSample()) {
                             debug3.add(new TextComponent(debug4.getName()));
@@ -118,7 +118,7 @@ public class ServerStatusPinger
                 }
                 if (!Objects.equals(debug5, debug1.getIconB64())) {
                     debug1.setIconB64(debug5);
-                    debug2.run();
+                    runnable.run(); // MagmaCube - decompile fix
                 }
                 this.pingStart = Util.getMillis();
                 debug4.send(new ServerboundPingRequestPacket(this.pingStart));
@@ -126,7 +126,7 @@ public class ServerStatusPinger
             }
             
             @Override
-            public void handlePongResponse(final ClientboundPongResponsePacket debug1) {
+            public void handlePongResponse(final ClientboundPongResponsePacket packet) { // MagmaCube - decompile fix
                 final long debug2 = this.pingStart;
                 final long debug3 = Util.getMillis();
                 debug1.ping = debug3 - debug2;
@@ -134,12 +134,12 @@ public class ServerStatusPinger
             }
             
             @Override
-            public void onDisconnect(final Component debug1) {
+            public void onDisconnect(final Component cp) { // MagmaCube - decompile fix
                 if (!this.success) {
-                    ServerStatusPinger.LOGGER.error("Can't ping {}: {}", (Object)debug1.ip, (Object)debug1.getString());
+                    ServerStatusPinger.LOGGER.error("Can't ping {}: {}", debug1.ip, cp.getString()); // MagmaCube - decompile fix
                     debug1.motd = new TranslatableComponent("multiplayer.status.cannot_connect").withStyle(ChatFormatting.DARK_RED);
                     debug1.status = TextComponent.EMPTY;
-                    ServerStatusPinger.this.pingLegacyServer(debug1);
+                    ServerStatusPinger.this.pingLegacyServer(debug1); // MagmaCube - decompile fix
                 }
             }
             
@@ -158,14 +158,14 @@ public class ServerStatusPinger
     }
     
     private void pingLegacyServer(final ServerData debug1) {
-        final ServerAddress debug2 = ServerAddress.parseString(debug1.ip);
-        ((Bootstrap)((Bootstrap)((Bootstrap)new Bootstrap().group((EventLoopGroup)Connection.NETWORK_WORKER_GROUP.get())).handler((ChannelHandler)new ChannelInitializer<Channel>() {
-            protected void initChannel(final Channel debug1) throws Exception {
+        final ServerAddress address = ServerAddress.parseString(debug1.ip); // MagmaCube - decompile fix
+        new Bootstrap().group(Connection.NETWORK_WORKER_GROUP.get()).handler(new ChannelInitializer<Channel>() { // MagmaCube - decompile fix
+            protected void initChannel(final Channel channel) throws Exception { // MagmaCube - decompile fix
                 try {
-                    debug1.config().setOption(ChannelOption.TCP_NODELAY, (Object)true);
+                    channel.config().setOption(ChannelOption.TCP_NODELAY, true); // MagmaCube - decompile fix
                 }
                 catch (ChannelException ex) {}
-                debug1.pipeline().addLast(new ChannelHandler[] { new SimpleChannelInboundHandler<ByteBuf>() {
+                channel.pipeline().addLast(new ChannelHandler[] { new SimpleChannelInboundHandler<ByteBuf>() { // MagmaCube - decompile fix
                         public void channelActive(final ChannelHandlerContext debug1) throws Exception {
                             super.channelActive(debug1);
                             final ByteBuf debug2 = Unpooled.buffer();
@@ -178,22 +178,22 @@ public class ServerStatusPinger
                                 for (final char debug4 : debug3) {
                                     debug2.writeChar((int)debug4);
                                 }
-                                debug2.writeShort(7 + 2 * debug2.getHost().length());
+                                debug2.writeShort(7 + 2 * address.getHost().length()); // MagmaCube - decompile fix
                                 debug2.writeByte(127);
-                                debug3 = debug2.getHost().toCharArray();
+                                debug3 = address.getHost().toCharArray(); // MagmaCube - decompile fix
                                 debug2.writeShort(debug3.length);
                                 for (final char debug4 : debug3) {
                                     debug2.writeChar((int)debug4);
                                 }
-                                debug2.writeInt(debug2.getPort());
+                                debug2.writeInt(address.getPort()); // MagmaCube - decompile fix
                                 debug1.channel().writeAndFlush((Object)debug2).addListener((GenericFutureListener)ChannelFutureListener.CLOSE_ON_FAILURE);
                             }
                             finally {
                                 debug2.release();
                             }
                         }
-                        
-                        protected void channelRead0(final ChannelHandlerContext debug1, final ByteBuf debug2) throws Exception {
+
+                        protected void channelRead0(final ChannelHandlerContext context, final ByteBuf debug2) throws Exception { // MagmaCube - decompile fix
                             final short debug3 = debug2.readUnsignedByte();
                             if (debug3 == 255) {
                                 final String debug4 = new String(debug2.readBytes(debug2.readShort() * 2).array(), StandardCharsets.UTF_16BE);
@@ -210,15 +210,15 @@ public class ServerStatusPinger
                                     debug1.status = formatPlayerCount(debug9, debug10);
                                 }
                             }
-                            debug1.close();
+                            context.close(); // MagmaCube - decompile fix
                         }
-                        
+
                         public void exceptionCaught(final ChannelHandlerContext debug1, final Throwable debug2) throws Exception {
                             debug1.close();
                         }
                     } });
             }
-        })).channel((Class)NioSocketChannel.class)).connect(debug2.getHost(), debug2.getPort());
+        }).channel((Class)NioSocketChannel.class).connect(address.getHost(), address.getPort()); // MagmaCube - decompile fix
     }
     
     private static Component formatPlayerCount(final int debug0, final int debug1) {
@@ -255,7 +255,7 @@ public class ServerStatusPinger
     }
     
     static {
-        SPLITTER = Splitter.on('Â¥0').limit(6);
+        SPLITTER = Splitter.on('\0').limit(6); // MagmaCube - decompile fix
         LOGGER = LogManager.getLogger();
     }
 }
diff --git a/src/main/java/net/minecraft/client/particle/BubbleColumnUpParticle.java b/src/main/java/net/minecraft/client/particle/BubbleColumnUpParticle.java
index 22f7be60a44678e87045b3a4281b9f81aff6d480..4f3cd9403d29f1237258ca542e664526ccb76778 100644
--- a/src/main/java/net/minecraft/client/particle/BubbleColumnUpParticle.java
+++ b/src/main/java/net/minecraft/client/particle/BubbleColumnUpParticle.java
@@ -54,7 +54,7 @@ public class BubbleColumnUpParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            final BubbleColumnUpParticle debug14 = new BubbleColumnUpParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, null);
+            final BubbleColumnUpParticle debug14 = new BubbleColumnUpParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13); // MagmaCube - decompile fix
             debug14.pickSprite(this.sprite);
             return debug14;
         }
diff --git a/src/main/java/net/minecraft/client/particle/BubblePopParticle.java b/src/main/java/net/minecraft/client/particle/BubblePopParticle.java
index bcf1289bf6127032349665faff17a2cdc50c4b73..6b3fa2b61470bca8e7493907c6b2451ed255ebb4 100644
--- a/src/main/java/net/minecraft/client/particle/BubblePopParticle.java
+++ b/src/main/java/net/minecraft/client/particle/BubblePopParticle.java
@@ -48,7 +48,7 @@ public class BubblePopParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            return new BubblePopParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprites, null);
+            return new BubblePopParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprites); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/client/particle/CampfireSmokeParticle.java b/src/main/java/net/minecraft/client/particle/CampfireSmokeParticle.java
index a97b73caee906d90f31b2d58d5f9018a874934db..3b8bf1721351716f73c2dddecf17dc27da0dd99c 100644
--- a/src/main/java/net/minecraft/client/particle/CampfireSmokeParticle.java
+++ b/src/main/java/net/minecraft/client/particle/CampfireSmokeParticle.java
@@ -55,7 +55,7 @@ public class CampfireSmokeParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            final CampfireSmokeParticle debug14 = new CampfireSmokeParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, false, null);
+            final CampfireSmokeParticle debug14 = new CampfireSmokeParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, false); // MagmaCube - decompile fix
             debug14.setAlpha(0.9f);
             debug14.pickSprite(this.sprites);
             return debug14;
@@ -72,7 +72,7 @@ public class CampfireSmokeParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            final CampfireSmokeParticle debug14 = new CampfireSmokeParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, true, null);
+            final CampfireSmokeParticle debug14 = new CampfireSmokeParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, true); // MagmaCube - decompile fix
             debug14.setAlpha(0.95f);
             debug14.pickSprite(this.sprites);
             return debug14;
diff --git a/src/main/java/net/minecraft/client/particle/CritParticle.java b/src/main/java/net/minecraft/client/particle/CritParticle.java
index b90d21e97411fe3ec37abb8bfe79af6246655eac..704239dfd7714ba3e56d32bb0837aad17065af21 100644
--- a/src/main/java/net/minecraft/client/particle/CritParticle.java
+++ b/src/main/java/net/minecraft/client/particle/CritParticle.java
@@ -67,7 +67,7 @@ public class CritParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            final CritParticle debug14 = new CritParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, null);
+            final CritParticle debug14 = new CritParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13); // MagmaCube - decompile fix
             debug14.pickSprite(this.sprite);
             return debug14;
         }
@@ -84,7 +84,7 @@ public class CritParticle extends TextureSheetParticle
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
             final CritParticle critParticle;
-            final CritParticle debug14 = critParticle = new CritParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, null);
+            final CritParticle debug14 = critParticle = new CritParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13); // MagmaCube - decompile fix
             critParticle.rCol *= 0.3f;
             final CritParticle critParticle2 = debug14;
             critParticle2.gCol *= 0.8f;
@@ -103,7 +103,7 @@ public class CritParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            final CritParticle debug14 = new CritParticle(debug2, debug3, debug5, debug7, debug9, debug11 + 1.0, debug13, null);
+            final CritParticle debug14 = new CritParticle(debug2, debug3, debug5, debug7, debug9, debug11 + 1.0, debug13); // MagmaCube - decompile fix
             debug14.setLifetime(20);
             debug14.pickSprite(this.sprite);
             return debug14;
diff --git a/src/main/java/net/minecraft/client/particle/DragonBreathParticle.java b/src/main/java/net/minecraft/client/particle/DragonBreathParticle.java
index 016d06a68f2e7ff402112640015c7338112cc90f..16f9885275d919b95b3f4bb48c42eb32108ecd35 100644
--- a/src/main/java/net/minecraft/client/particle/DragonBreathParticle.java
+++ b/src/main/java/net/minecraft/client/particle/DragonBreathParticle.java
@@ -74,7 +74,7 @@ public class DragonBreathParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            return new DragonBreathParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprites, null);
+            return new DragonBreathParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprites); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/client/particle/DustParticle.java b/src/main/java/net/minecraft/client/particle/DustParticle.java
index b46dd2840c7bd68ac6d691ca26ccd854b51d5ef9..33e6543e0fa6ce14fa0825eb80a682e0eefc1010 100644
--- a/src/main/java/net/minecraft/client/particle/DustParticle.java
+++ b/src/main/java/net/minecraft/client/particle/DustParticle.java
@@ -69,7 +69,7 @@ public class DustParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final DustParticleOptions debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            return new DustParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, debug1, this.sprites, null);
+            return new DustParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, debug1, this.sprites); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/client/particle/EndRodParticle.java b/src/main/java/net/minecraft/client/particle/EndRodParticle.java
index f0d817fe5fd72b76e05896cd66fff9d9b2254789..16da7e927e2fd6ae243e84289a8b9d89f0edc74e 100644
--- a/src/main/java/net/minecraft/client/particle/EndRodParticle.java
+++ b/src/main/java/net/minecraft/client/particle/EndRodParticle.java
@@ -33,7 +33,7 @@ public class EndRodParticle extends SimpleAnimatedParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            return new EndRodParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprites, null);
+            return new EndRodParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprites); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/client/particle/FireworkParticles.java b/src/main/java/net/minecraft/client/particle/FireworkParticles.java
index 32e0bad83a3488dca3ab96a324fe9577382f0159..37c0f9a98449b3e10d9ed9dabee2d0f2c973feb5 100644
--- a/src/main/java/net/minecraft/client/particle/FireworkParticles.java
+++ b/src/main/java/net/minecraft/client/particle/FireworkParticles.java
@@ -178,10 +178,9 @@ public class FireworkParticles {
 
         @Override
         public void tick() {
-            Object debug3;
-            int debug1;
             if (this.life == 0 && this.explosions != null) {
-                debug1 = this.isFarAwayFromCamera();
+                SoundEvent debug3; // MagmaCube - decompile fix
+                boolean debug1 = this.isFarAwayFromCamera(); // MagmaCube - decompile fix
                 boolean debug2 = false;
                 if (this.explosions.size() >= 3) {
                     debug2 = true;
@@ -193,13 +192,19 @@ public class FireworkParticles {
                         break;
                     }
                 }
-                debug3 = debug2 ? (debug1 != 0 ? SoundEvents.FIREWORK_ROCKET_LARGE_BLAST_FAR : SoundEvents.FIREWORK_ROCKET_LARGE_BLAST) : (debug1 != 0 ? SoundEvents.FIREWORK_ROCKET_BLAST_FAR : SoundEvents.FIREWORK_ROCKET_BLAST);
+                // MagmaCube start - decompile fix
+                if (debug2) {
+                    debug3 = debug1 ? SoundEvents.FIREWORK_ROCKET_LARGE_BLAST_FAR : SoundEvents.FIREWORK_ROCKET_LARGE_BLAST;
+                } else {
+                    debug3 = debug1 ? SoundEvents.FIREWORK_ROCKET_BLAST_FAR : SoundEvents.FIREWORK_ROCKET_BLAST;
+                }
+                // MagmaCube end - decompile fix
                 this.level.playLocalSound(this.x, this.y, this.z, (SoundEvent)debug3, SoundSource.AMBIENT, 20.0f, 0.95f + this.random.nextFloat() * 0.1f, true);
             }
             if (this.life % 2 == 0 && this.explosions != null && this.life / 2 < this.explosions.size()) {
-                debug1 = this.life / 2;
+                int debug1 = this.life / 2; // MagmaCube - decompile fix
                 CompoundTag debug2 = this.explosions.getCompound(debug1);
-                debug3 = FireworkRocketItem.Shape.byId(debug2.getByte("Type"));
+                FireworkRocketItem.Shape debug3 = FireworkRocketItem.Shape.byId(debug2.getByte("Type")); // MagmaCube - decompile fix
                 boolean debug4 = debug2.getBoolean("Trail");
                 boolean debug5 = debug2.getBoolean("Flicker");
                 int[] debug6 = debug2.getIntArray("Colors");
@@ -207,7 +212,7 @@ public class FireworkParticles {
                 if (debug6.length == 0) {
                     debug6 = new int[]{DyeColor.BLACK.getFireworkColor()};
                 }
-                switch (1.$SwitchMap$net$minecraft$world$item$FireworkRocketItem$Shape[((Enum)debug3).ordinal()]) {
+                switch (((Enum)debug3).ordinal()) { // MagmaCube - decompile fix
                     default: {
                         this.createParticleBall(0.25, 2, debug6, debug7, debug4, debug5);
                         break;
@@ -238,8 +243,8 @@ public class FireworkParticles {
             ++this.life;
             if (this.life > this.lifetime) {
                 if (this.twinkleDelay) {
-                    debug1 = this.isFarAwayFromCamera() ? 1 : 0;
-                    SoundEvent debug2 = debug1 != 0 ? SoundEvents.FIREWORK_ROCKET_TWINKLE_FAR : SoundEvents.FIREWORK_ROCKET_TWINKLE;
+                    boolean debug1 = this.isFarAwayFromCamera(); // MagmaCube - decompile fix
+                    SoundEvent debug2 = debug1 ? SoundEvents.FIREWORK_ROCKET_TWINKLE_FAR : SoundEvents.FIREWORK_ROCKET_TWINKLE; // MagmaCube - decompile fix
                     this.level.playLocalSound(this.x, this.y, this.z, debug2, SoundSource.AMBIENT, 20.0f, 0.9f + this.random.nextFloat() * 0.15f, true);
                 }
                 this.remove();
diff --git a/src/main/java/net/minecraft/client/particle/HugeExplosionParticle.java b/src/main/java/net/minecraft/client/particle/HugeExplosionParticle.java
index 6adfac8552dceefb5dbc6d0fcd45e6ab32a590eb..39bc192105e0af3b2111612a7aad1093994474e7 100644
--- a/src/main/java/net/minecraft/client/particle/HugeExplosionParticle.java
+++ b/src/main/java/net/minecraft/client/particle/HugeExplosionParticle.java
@@ -50,7 +50,7 @@ public class HugeExplosionParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            return new HugeExplosionParticle(debug2, debug3, debug5, debug7, debug9, this.sprites, null);
+            return new HugeExplosionParticle(debug2, debug3, debug5, debug7, debug9, this.sprites); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/client/particle/HugeExplosionSeedParticle.java b/src/main/java/net/minecraft/client/particle/HugeExplosionSeedParticle.java
index c12915f74d91c7c9408f8149ada90d6ce1ea1a7a..8ea1fbc43e7ecd242228674f6c8bb392b9a80a9b 100644
--- a/src/main/java/net/minecraft/client/particle/HugeExplosionSeedParticle.java
+++ b/src/main/java/net/minecraft/client/particle/HugeExplosionSeedParticle.java
@@ -33,7 +33,7 @@ public class HugeExplosionSeedParticle extends NoRenderParticle
     {
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            return new HugeExplosionSeedParticle(debug2, debug3, debug5, debug7, null);
+            return new HugeExplosionSeedParticle(debug2, debug3, debug5, debug7); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/client/particle/NoteParticle.java b/src/main/java/net/minecraft/client/particle/NoteParticle.java
index 0003c387f849f661e40cd38ac42e35088bfa58ec..446267e73e1df8ed51bb6eaa2d1fb17d570d594d 100644
--- a/src/main/java/net/minecraft/client/particle/NoteParticle.java
+++ b/src/main/java/net/minecraft/client/particle/NoteParticle.java
@@ -63,7 +63,7 @@ public class NoteParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            final NoteParticle debug14 = new NoteParticle(debug2, debug3, debug5, debug7, debug9, null);
+            final NoteParticle debug14 = new NoteParticle(debug2, debug3, debug5, debug7, debug9); // MagmaCube - decompile fix
             debug14.pickSprite(this.sprite);
             return debug14;
         }
diff --git a/src/main/java/net/minecraft/client/particle/ParticleDescription.java b/src/main/java/net/minecraft/client/particle/ParticleDescription.java
index 849459f0d6a8d09f6f77fb5f13ab8d6dd8214293..fe28125da714a7a2c87235f27673ee1cb54e523f 100644
--- a/src/main/java/net/minecraft/client/particle/ParticleDescription.java
+++ b/src/main/java/net/minecraft/client/particle/ParticleDescription.java
@@ -34,7 +34,7 @@ public class ParticleDescription {
 
     public static ParticleDescription fromJson(JsonObject debug02) {
         JsonArray debug1 = GsonHelper.getAsJsonArray(debug02, "textures", null);
-        List debug2 = debug1 != null ? (List)Streams.stream((Iterable)debug1).map(debug0 -> GsonHelper.convertToString(debug0, "texture")).map(ResourceLocation::new).collect(ImmutableList.toImmutableList()) : null;
+        List debug2 = debug1 != null ? (List)Streams.stream(debug1).map(debug0 -> GsonHelper.convertToString(debug0, "texture")).map(ResourceLocation::new).collect(ImmutableList.toImmutableList()) : null; // MagmaCube - decompile fix
         return new ParticleDescription(debug2);
     }
 }
diff --git a/src/main/java/net/minecraft/client/particle/ParticleEngine.java b/src/main/java/net/minecraft/client/particle/ParticleEngine.java
index ba7a8605ea4c407c266010cd907fc1c8341afebe..45b165e7aa2a95cdff51e089cc574037bd5d3ad2 100644
--- a/src/main/java/net/minecraft/client/particle/ParticleEngine.java
+++ b/src/main/java/net/minecraft/client/particle/ParticleEngine.java
@@ -119,7 +119,7 @@ import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class ParticleEngine
 implements PreparableReloadListener {
-    private static final List<ParticleRenderType> RENDER_ORDER = ImmutableList.of((Object)ParticleRenderType.TERRAIN_SHEET, (Object)ParticleRenderType.PARTICLE_SHEET_OPAQUE, (Object)ParticleRenderType.PARTICLE_SHEET_LIT, (Object)ParticleRenderType.PARTICLE_SHEET_TRANSLUCENT, (Object)ParticleRenderType.CUSTOM);
+    private static final List<ParticleRenderType> RENDER_ORDER = ImmutableList.of(ParticleRenderType.TERRAIN_SHEET, ParticleRenderType.PARTICLE_SHEET_OPAQUE, ParticleRenderType.PARTICLE_SHEET_LIT, ParticleRenderType.PARTICLE_SHEET_TRANSLUCENT, ParticleRenderType.CUSTOM); // MagmaCube - decompile fix
     protected ClientLevel level;
     private final Map<ParticleRenderType, Queue<Particle>> particles = Maps.newIdentityHashMap();
     private final Queue<TrackingEmitter> trackingEmitters = Queues.newArrayDeque();
@@ -224,15 +224,15 @@ implements PreparableReloadListener {
 
     @Override
     public CompletableFuture<Void> reload(PreparableReloadListener.PreparationBarrier debug1, ResourceManager debug2, ProfilerFiller debug3, ProfilerFiller debug42, Executor debug5, Executor debug6) {
-        ConcurrentMap debug7 = Maps.newConcurrentMap();
+        ConcurrentMap<ResourceLocation, List<ResourceLocation>> debug7 = Maps.newConcurrentMap(); // MagmaCube - decompile fix
         CompletableFuture[] debug8 = (CompletableFuture[])Registry.PARTICLE_TYPE.keySet().stream().map(debug4 -> CompletableFuture.runAsync(() -> this.loadParticleDescription(debug2, (ResourceLocation)debug4, debug7), debug5)).toArray(CompletableFuture[]::new);
-        return ((CompletableFuture)((CompletableFuture)CompletableFuture.allOf(debug8).thenApplyAsync(debug4 -> {
+        return ((CompletableFuture.allOf(debug8).thenApplyAsync(debug4 -> { // MagmaCube - decompile fix
             debug3.startTick();
             debug3.push("stitching");
-            TextureAtlas.Preparations debug5 = this.textureAtlas.prepareToStitch(debug2, debug7.values().stream().flatMap(Collection::stream), debug3, 0);
+            TextureAtlas.Preparations debug5l = this.textureAtlas.prepareToStitch(debug2, debug7.values().stream().flatMap(Collection::stream), debug3, 0); // MagmaCube - decompile fix
             debug3.pop();
             debug3.endTick();
-            return debug5;
+            return debug5l; // MagmaCube - decompile fix
         }, debug5)).thenCompose(debug1::wait)).thenAcceptAsync(debug32 -> {
             this.particles.clear();
             debug42.startTick();
@@ -240,9 +240,9 @@ implements PreparableReloadListener {
             this.textureAtlas.reload((TextureAtlas.Preparations)debug32);
             debug42.popPush("bindSpriteSets");
             TextureAtlasSprite debug4 = this.textureAtlas.getSprite(MissingTextureAtlasSprite.getLocation());
-            debug7.forEach((debug2, debug3) -> {
-                ImmutableList debug4 = debug3.isEmpty() ? ImmutableList.of((Object)debug4) : (ImmutableList)debug3.stream().map(this.textureAtlas::getSprite).collect(ImmutableList.toImmutableList());
-                this.spriteSets.get(debug2).rebind((List<TextureAtlasSprite>)debug4);
+            debug7.forEach((debug2l, debug3l) -> { // MagmaCube - decompile fix
+                ImmutableList debug4l = debug3l.isEmpty() ? ImmutableList.of(debug4) : (ImmutableList)debug3l.stream().map(this.textureAtlas::getSprite).collect(ImmutableList.toImmutableList()); // MagmaCube - decompile fix
+                this.spriteSets.get(debug2l).rebind((List<TextureAtlasSprite>)debug4l); // MagmaCube - decompile fix
             });
             debug42.pop();
             debug42.endTick();
@@ -308,22 +308,22 @@ implements PreparableReloadListener {
     }
 
     public void tick() {
-        Object debug12;
         this.particles.forEach((debug1, debug2) -> {
             this.level.getProfiler().push(debug1.toString());
             this.tickParticleList((Collection<Particle>)debug2);
             this.level.getProfiler().pop();
         });
         if (!this.trackingEmitters.isEmpty()) {
-            debug12 = Lists.newArrayList();
+            List<TrackingEmitter> debug12 = Lists.newArrayList(); // MagmaCube - decompile fix
             for (TrackingEmitter debug3 : this.trackingEmitters) {
                 debug3.tick();
                 if (debug3.isAlive()) continue;
                 debug12.add(debug3);
             }
-            this.trackingEmitters.removeAll((Collection<?>)debug12);
+            this.trackingEmitters.removeAll(debug12); // MagmaCube - decompile fix
         }
         if (!this.particlesToAdd.isEmpty()) {
+            Particle debug12; // MagmaCube - decompile fix
             while ((debug12 = this.particlesToAdd.poll()) != null) {
                 this.particles.computeIfAbsent(((Particle)debug12).getRenderType(), debug0 -> EvictingQueue.create((int)16384)).add(debug12);
             }
@@ -364,7 +364,7 @@ implements PreparableReloadListener {
         RenderSystem.pushMatrix();
         RenderSystem.multMatrix(debug1.last().pose());
         for (ParticleRenderType debug7 : RENDER_ORDER) {
-            Iterable debug8 = this.particles.get(debug7);
+            Iterable<Particle> debug8 = this.particles.get(debug7); // MagmaCube - decompile fix
             if (debug8 == null) continue;
             RenderSystem.color4f(1.0f, 1.0f, 1.0f, 1.0f);
             Tesselator debug9 = Tesselator.getInstance();
diff --git a/src/main/java/net/minecraft/client/particle/SpellParticle.java b/src/main/java/net/minecraft/client/particle/SpellParticle.java
index e6898c5849435b3c5eeb3622e20bbeb6a4d9cd2b..52ba3f8b7b63ccaa7ffeb8a5ba956b02d0bfcfad 100644
--- a/src/main/java/net/minecraft/client/particle/SpellParticle.java
+++ b/src/main/java/net/minecraft/client/particle/SpellParticle.java
@@ -68,7 +68,7 @@ public class SpellParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            return new SpellParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprite, null);
+            return new SpellParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprite); // MagmaCube - decompile fix
         }
     }
     
@@ -82,7 +82,7 @@ public class SpellParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            final Particle debug14 = new SpellParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprite, null);
+            final Particle debug14 = new SpellParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprite); // MagmaCube - decompile fix
             debug14.setColor((float)debug9, (float)debug11, (float)debug13);
             return debug14;
         }
@@ -98,7 +98,7 @@ public class SpellParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            final Particle debug14 = new SpellParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprite, null);
+            final Particle debug14 = new SpellParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprite); // MagmaCube - decompile fix
             debug14.setAlpha(0.15f);
             debug14.setColor((float)debug9, (float)debug11, (float)debug13);
             return debug14;
@@ -115,7 +115,7 @@ public class SpellParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            final SpellParticle debug14 = new SpellParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprite, null);
+            final SpellParticle debug14 = new SpellParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprite); // MagmaCube - decompile fix
             final float debug15 = debug2.random.nextFloat() * 0.5f + 0.35f;
             debug14.setColor(1.0f * debug15, 0.0f * debug15, 1.0f * debug15);
             return debug14;
@@ -132,7 +132,7 @@ public class SpellParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            return new SpellParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprite, null);
+            return new SpellParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprite); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/client/particle/SpitParticle.java b/src/main/java/net/minecraft/client/particle/SpitParticle.java
index 875d2046736000704aa9c143dc8c0cf91cbab4b0..95bd08b27d4aa6241b887717d033f0ceab142134 100644
--- a/src/main/java/net/minecraft/client/particle/SpitParticle.java
+++ b/src/main/java/net/minecraft/client/particle/SpitParticle.java
@@ -27,7 +27,7 @@ public class SpitParticle extends ExplodeParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            return new SpitParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprites, null);
+            return new SpitParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprites); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/client/particle/SplashParticle.java b/src/main/java/net/minecraft/client/particle/SplashParticle.java
index 6c22d6c281c6d8685d2d628ca79c12daa076b87f..8b20c9ff78dfce47599a707658d0714ca415ff39 100644
--- a/src/main/java/net/minecraft/client/particle/SplashParticle.java
+++ b/src/main/java/net/minecraft/client/particle/SplashParticle.java
@@ -26,7 +26,7 @@ public class SplashParticle extends WaterDropParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            final SplashParticle debug14 = new SplashParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, null);
+            final SplashParticle debug14 = new SplashParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13);
             debug14.pickSprite(this.sprite);
             return debug14;
         }
diff --git a/src/main/java/net/minecraft/client/particle/SquidInkParticle.java b/src/main/java/net/minecraft/client/particle/SquidInkParticle.java
index 07f74efce0e4a46a85bfacf83235beb9ba8e60f8..3cceb524e4def4edef39e2215c2acf103b5c2618 100644
--- a/src/main/java/net/minecraft/client/particle/SquidInkParticle.java
+++ b/src/main/java/net/minecraft/client/particle/SquidInkParticle.java
@@ -57,7 +57,7 @@ public class SquidInkParticle extends SimpleAnimatedParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            return new SquidInkParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprites, null);
+            return new SquidInkParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprites); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/client/particle/TotemParticle.java b/src/main/java/net/minecraft/client/particle/TotemParticle.java
index 29bc9289cd2f19974b0211995fac2c32619cb47f..d07bad9beecf886359bb022c1375f81f997563da 100644
--- a/src/main/java/net/minecraft/client/particle/TotemParticle.java
+++ b/src/main/java/net/minecraft/client/particle/TotemParticle.java
@@ -33,7 +33,7 @@ public class TotemParticle extends SimpleAnimatedParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            return new TotemParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprites, null);
+            return new TotemParticle(debug2, debug3, debug5, debug7, debug9, debug11, debug13, this.sprites); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/client/particle/WaterCurrentDownParticle.java b/src/main/java/net/minecraft/client/particle/WaterCurrentDownParticle.java
index 3f6557ab971d674a47f53a98745ecab47217fe54..e917658278719b1a4eb9718d7a0df45d74ecd658 100644
--- a/src/main/java/net/minecraft/client/particle/WaterCurrentDownParticle.java
+++ b/src/main/java/net/minecraft/client/particle/WaterCurrentDownParticle.java
@@ -61,7 +61,7 @@ public class WaterCurrentDownParticle extends TextureSheetParticle
         
         @Override
         public Particle createParticle(final SimpleParticleType debug1, final ClientLevel debug2, final double debug3, final double debug5, final double debug7, final double debug9, final double debug11, final double debug13) {
-            final WaterCurrentDownParticle debug14 = new WaterCurrentDownParticle(debug2, debug3, debug5, debug7, null);
+            final WaterCurrentDownParticle debug14 = new WaterCurrentDownParticle(debug2, debug3, debug5, debug7); // MagmaCube - decompile fix
             debug14.pickSprite(this.sprite);
             return debug14;
         }
diff --git a/src/main/java/net/minecraft/client/player/LocalPlayer.java b/src/main/java/net/minecraft/client/player/LocalPlayer.java
index f21dc214c3e8c5c6266ec479154a7731acbae030..87a5dcd81417bab0c668ae8f98f7df3fb2171c52 100644
--- a/src/main/java/net/minecraft/client/player/LocalPlayer.java
+++ b/src/main/java/net/minecraft/client/player/LocalPlayer.java
@@ -894,7 +894,7 @@ extends AbstractClientPlayer {
                 }
                 ++debug36;
             }
-            break block0;
+            break; // MagmaCube - decompile fix
         }
         if (debug32 == Float.MIN_VALUE) {
             return;
diff --git a/src/main/java/net/minecraft/client/player/inventory/Hotbar.java b/src/main/java/net/minecraft/client/player/inventory/Hotbar.java
index 300f01109d8527b30a5d5d59bdb8d35cd0ae5c81..7bbc2efb83070cb66907046102610c0b64ed9314 100644
--- a/src/main/java/net/minecraft/client/player/inventory/Hotbar.java
+++ b/src/main/java/net/minecraft/client/player/inventory/Hotbar.java
@@ -26,7 +26,7 @@ public class Hotbar extends ForwardingList<ItemStack>
     public ListTag createTag() {
         final ListTag debug1 = new ListTag();
         for (final ItemStack debug2 : this.delegate()) {
-            ((AbstractList<CompoundTag>)debug1).add(debug2.save(new CompoundTag()));
+            debug1.add(debug2.save(new CompoundTag())); // MagmaCube - decompile fix
         }
         return debug1;
     }
diff --git a/src/main/java/net/minecraft/client/renderer/EffectInstance.java b/src/main/java/net/minecraft/client/renderer/EffectInstance.java
index 9b3ea6f4855ac38a8ece560a9531f761ce12fb71..09cfe0fd767cfb416871e168fb0b01aec79a2c65 100644
--- a/src/main/java/net/minecraft/client/renderer/EffectInstance.java
+++ b/src/main/java/net/minecraft/client/renderer/EffectInstance.java
@@ -56,12 +56,12 @@ public class EffectInstance implements Effect, AutoCloseable
     private final Program fragmentProgram;
     
     public EffectInstance(final ResourceManager debug1, final String debug2) throws IOException {
-        this.samplerMap = (Map<String, IntSupplier>)Maps.newHashMap();
-        this.samplerNames = (List<String>)Lists.newArrayList();
-        this.samplerLocations = (List<Integer>)Lists.newArrayList();
-        this.uniforms = (List<Uniform>)Lists.newArrayList();
-        this.uniformLocations = (List<Integer>)Lists.newArrayList();
-        this.uniformMap = (Map<String, Uniform>)Maps.newHashMap();
+        this.samplerMap = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.samplerNames = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.samplerLocations = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.uniforms = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.uniformLocations = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.uniformMap = Maps.newHashMap(); // MagmaCube - decompile fix
         final ResourceLocation debug3 = new ResourceLocation("shaders/program/" + debug2 + ".json");
         this.name = debug2;
         Resource debug4 = null;
@@ -88,8 +88,8 @@ public class EffectInstance implements Effect, AutoCloseable
             final JsonArray debug13 = GsonHelper.getAsJsonArray(debug5, "attributes", null);
             if (debug13 != null) {
                 int debug14 = 0;
-                this.attributes = (List<Integer>)Lists.newArrayListWithCapacity(debug13.size());
-                this.attributeNames = (List<String>)Lists.newArrayListWithCapacity(debug13.size());
+                this.attributes = Lists.newArrayListWithCapacity(debug13.size()); // MagmaCube - decompile fix
+                this.attributeNames = Lists.newArrayListWithCapacity(debug13.size()); // MagmaCube - decompile fix
                 for (final JsonElement debug15 : debug13) {
                     try {
                         this.attributeNames.add(GsonHelper.convertToString(debug15, "attribute"));
diff --git a/src/main/java/net/minecraft/client/renderer/FogRenderer.java b/src/main/java/net/minecraft/client/renderer/FogRenderer.java
index a9d386fe72a251934581f0ff24750a0a1aacfbc1..39b4b56213e41db0c47a37b4ad85f27641d60876 100644
--- a/src/main/java/net/minecraft/client/renderer/FogRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/FogRenderer.java
@@ -75,7 +75,7 @@ public class FogRenderer
             final float debug24 = Mth.clamp(Mth.cos(debug2.getTimeOfDay(debug1) * 6.2831855f) * 2.0f + 0.5f, 0.0f, 1.0f);
             final BiomeManager debug25 = debug2.getBiomeManager();
             final Vec3 debug26 = debug0.getPosition().subtract(2.0, 2.0, 2.0).scale(0.25);
-            final Vec3 debug27 = CubicSampler.gaussianSampleVec3(debug26, (debug3, debug4, debug5) -> debug2.effects().getBrightnessDependentFogColor(Vec3.fromRGB24(debug25.getNoiseBiomeAtQuart(debug3, debug4, debug5).getFogColor()), debug24));
+            final Vec3 debug27 = CubicSampler.gaussianSampleVec3(debug26, (debug3l, debug4l, debug5) -> debug2.effects().getBrightnessDependentFogColor(Vec3.fromRGB24(debug25.getNoiseBiomeAtQuart(debug3l, debug4l, debug5).getFogColor()), debug24)); // MagmaCube - decompile fix
             FogRenderer.fogRed = (float)debug27.x();
             FogRenderer.fogGreen = (float)debug27.y();
             FogRenderer.fogBlue = (float)debug27.z();
diff --git a/src/main/java/net/minecraft/client/renderer/GpuWarnlistManager.java b/src/main/java/net/minecraft/client/renderer/GpuWarnlistManager.java
index 046e9f9971d496eb3f7c72385852e3cab6bc6b5b..aea009414d88e9e80fb22b6c38f0f8e84c7bf0a2 100644
--- a/src/main/java/net/minecraft/client/renderer/GpuWarnlistManager.java
+++ b/src/main/java/net/minecraft/client/renderer/GpuWarnlistManager.java
@@ -29,7 +29,7 @@ import net.minecraft.resources.ResourceLocation;
 import org.apache.logging.log4j.Logger;
 import net.minecraft.server.packs.resources.SimplePreparableReloadListener;
 
-public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparations>
+public class GpuWarnlistManager extends SimplePreparableReloadListener<GpuWarnlistManager.Preparations> // MagmaCube - decompile fix
 {
     private static final Logger LOGGER;
     private static final ResourceLocation GPU_WARNLIST_LOCATION;
@@ -39,7 +39,7 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
     private boolean skipFabulous;
     
     public GpuWarnlistManager() {
-        this.warnings = (ImmutableMap<String, String>)ImmutableMap.of();
+        this.warnings = ImmutableMap.of(); // MagmaCube - decompile fix
     }
     
     public boolean hasWarnings() {
@@ -101,9 +101,9 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
     
     @Override
     protected Preparations prepare(final ResourceManager debug1, final ProfilerFiller debug2) {
-        final List<Pattern> debug3 = (List<Pattern>)Lists.newArrayList();
-        final List<Pattern> debug4 = (List<Pattern>)Lists.newArrayList();
-        final List<Pattern> debug5 = (List<Pattern>)Lists.newArrayList();
+        final List<Pattern> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
+        final List<Pattern> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
+        final List<Pattern> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
         debug2.startTick();
         final JsonObject debug6 = parseJson(debug1, debug2);
         if (debug6 != null) {
@@ -123,7 +123,7 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
     }
     
     private static void compilePatterns(final JsonArray debug0, final List<Pattern> debug1) {
-        debug0.forEach(debug1 -> debug1.add(Pattern.compile(debug1.getAsString(), 2)));
+        debug0.forEach(debug12 -> debug1.add(Pattern.compile(debug12.getAsString(), 2))); // MagmaCube - decompile fix
     }
     
     @Nullable
@@ -135,8 +135,6 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
             debug2 = new JsonParser().parse((Reader)debug4).getAsJsonObject();
         }
         catch (IOException | JsonSyntaxException ex2) {
-            final Exception ex;
-            final Exception debug5 = ex;
             GpuWarnlistManager.LOGGER.warn("Failed to load GPU warnlist");
         }
         debug1.pop();
@@ -161,7 +159,7 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
         }
         
         private static String matchAny(final List<Pattern> debug0, final String debug1) {
-            final List<String> debug2 = (List<String>)Lists.newArrayList();
+            final List<String> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
             for (final Pattern debug3 : debug0) {
                 final Matcher debug4 = debug3.matcher(debug1);
                 while (debug4.find()) {
@@ -175,15 +173,15 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
             final ImmutableMap.Builder<String, String> debug1 = (ImmutableMap.Builder<String, String>)new ImmutableMap.Builder();
             final String debug2 = matchAny(this.rendererPatterns, GlUtil.getRenderer());
             if (!debug2.isEmpty()) {
-                debug1.put((Object)"renderer", (Object)debug2);
+                debug1.put("renderer", debug2); // MagmaCube - decompile fix
             }
             final String debug3 = matchAny(this.versionPatterns, GlUtil.getOpenGLVersion());
             if (!debug3.isEmpty()) {
-                debug1.put((Object)"version", (Object)debug3);
+                debug1.put("version", debug3); // MagmaCube - decompile fix
             }
             final String debug4 = matchAny(this.vendorPatterns, GlUtil.getVendor());
             if (!debug4.isEmpty()) {
-                debug1.put((Object)"vendor", (Object)debug4);
+                debug1.put("vendor", debug4); // MagmaCube - decompile fix
             }
             return (ImmutableMap<String, String>)debug1.build();
         }
diff --git a/src/main/java/net/minecraft/client/renderer/ItemInHandRenderer.java b/src/main/java/net/minecraft/client/renderer/ItemInHandRenderer.java
index 216c167fd721aa60c024eebbfa23ee0ee0c5fb83..bd71dfaa045005d07b6eab01efa82f48e80ef268 100644
--- a/src/main/java/net/minecraft/client/renderer/ItemInHandRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/ItemInHandRenderer.java
@@ -205,7 +205,6 @@ public class ItemInHandRenderer {
 
     public void renderHandsWithItems(float debug1, PoseStack debug2, MultiBufferSource.BufferSource debug3, LocalPlayer debug4, int debug5) {
         float debug14;
-        Object debug12;
         ItemStack debug11;
         float debug6 = debug4.getAttackAnim(debug1);
         InteractionHand debug7 = (InteractionHand)((Object)MoreObjects.firstNonNull((Object)((Object)debug4.swingingArm), (Object)((Object)InteractionHand.MAIN_HAND)));
@@ -219,12 +218,13 @@ public class ItemInHandRenderer {
                 debug9 = debug4.getUsedItemHand() == InteractionHand.MAIN_HAND;
                 boolean bl = debug10 = !debug9;
             }
+            InteractionHand debug12; // MagmaCube - decompile fix
             if ((debug12 = debug4.getUsedItemHand()) == InteractionHand.MAIN_HAND && (debug13 = debug4.getOffhandItem()).getItem() == Items.CROSSBOW && CrossbowItem.isCharged(debug13)) {
                 debug10 = false;
             }
         } else {
             debug11 = debug4.getMainHandItem();
-            debug12 = debug4.getOffhandItem();
+            ItemStack debug12 = debug4.getOffhandItem(); // MagmaCube - decompile fix
             if (debug11.getItem() == Items.CROSSBOW && CrossbowItem.isCharged(debug11)) {
                 boolean bl = debug10 = !debug9;
             }
diff --git a/src/main/java/net/minecraft/client/renderer/ItemModelShaper.java b/src/main/java/net/minecraft/client/renderer/ItemModelShaper.java
index 730bca7dc80c1aa2ebcd5a59c7088201a3745f52..d620152536dd88cc985fb5a5473e8b241494678e 100644
--- a/src/main/java/net/minecraft/client/renderer/ItemModelShaper.java
+++ b/src/main/java/net/minecraft/client/renderer/ItemModelShaper.java
@@ -53,7 +53,7 @@ public class ItemModelShaper
     }
     
     public void register(final Item debug1, final ModelResourceLocation debug2) {
-        this.shapes.put(getIndex(debug1), (Object)debug2);
+        this.shapes.put(getIndex(debug1), debug2); // MagmaCube - decompile fix
     }
     
     public ModelManager getModelManager() {
@@ -63,7 +63,7 @@ public class ItemModelShaper
     public void rebuildCache() {
         this.shapesCache.clear();
         for (final Map.Entry<Integer, ModelResourceLocation> debug2 : this.shapes.entrySet()) {
-            this.shapesCache.put((Integer)debug2.getKey(), (Object)this.modelManager.getModel(debug2.getValue()));
+            this.shapesCache.put((Integer)debug2.getKey(), this.modelManager.getModel(debug2.getValue())); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
index 25943c7957858ebe7b499bfb284f3ca9cf584397..5aafd98ded237bcdab5b3e5063cefc59076dbd7a 100644
--- a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
@@ -54,14 +54,7 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import it.unimi.dsi.fastutil.objects.ObjectList;
 import it.unimi.dsi.fastutil.objects.ObjectListIterator;
 import java.io.IOException;
-import java.util.Collection;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
-import java.util.Set;
-import java.util.SortedSet;
+import java.util.*;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -723,7 +716,6 @@ AutoCloseable {
     }
 
     private void setupRender(Camera debug12, Frustum debug2, boolean debug3, int debug4, boolean debug5) {
-        Collection<ChunkRenderDispatcher.RenderChunk> debug19;
         Vec3 debug6 = debug12.getPosition();
         if (this.minecraft.options.renderDistance != this.lastViewDistance) {
             this.allChanged();
@@ -760,14 +752,14 @@ AutoCloseable {
         if (!debug3 && this.needsUpdate) {
             this.needsUpdate = false;
             this.renderChunks.clear();
-            debug19 = Queues.newArrayDeque();
+            Queue<RenderChunkInfo> debug19 = Queues.newArrayDeque();
             Entity.setViewScale(Mth.clamp((double)this.minecraft.options.renderDistance / 8.0, 1.0, 2.5) * (double)this.minecraft.options.entityDistanceScaling);
             boolean debug20 = this.minecraft.smartCull;
             if (debug14 == null) {
                 int debug21 = debug13.getY() > 0 ? 248 : 8;
                 int debug22 = Mth.floor(debug6.x / 16.0) * 16;
                 int debug23 = Mth.floor(debug6.z / 16.0) * 16;
-                Direction[] debug24 = Lists.newArrayList();
+                List<RenderChunkInfo> debug24 = Lists.newArrayList(); // MagmaCube - decompile fix
                 for (int debug25 = -this.lastViewDistance; debug25 <= this.lastViewDistance; ++debug25) {
                     for (int debug26 = -this.lastViewDistance; debug26 <= this.lastViewDistance; ++debug26) {
                         ChunkRenderDispatcher.RenderChunk renderChunk = this.viewArea.getRenderChunkAt(new BlockPos(debug22 + (debug25 << 4) + 8, debug21, debug23 + (debug26 << 4) + 8));
@@ -777,32 +769,32 @@ AutoCloseable {
                     }
                 }
                 debug24.sort(Comparator.comparingDouble(debug1 -> debug13.distSqr(((RenderChunkInfo)debug1).chunk.getOrigin().offset(8, 8, 8))));
-                debug19.addAll((Collection<ChunkRenderDispatcher.RenderChunk>)debug24);
+                debug19.addAll(debug24); // MagmaCube - decompile fix
             } else {
                 if (debug5 && this.level.getBlockState(debug13).isSolidRender(this.level, debug13)) {
                     debug20 = false;
                 }
                 debug14.setFrame(debug4);
-                debug19.add((ChunkRenderDispatcher.RenderChunk)((Object)new RenderChunkInfo(debug14, null, 0)));
+                debug19.add(new RenderChunkInfo(debug14, null, 0)); // MagmaCube - decompile fix
             }
             this.minecraft.getProfiler().push("iteration");
             while (!debug19.isEmpty()) {
                 RenderChunkInfo debug21 = (RenderChunkInfo)debug19.poll();
                 ChunkRenderDispatcher.RenderChunk debug22 = debug21.chunk;
                 Direction debug23 = debug21.sourceDirection;
-                this.renderChunks.add((Object)debug21);
+                this.renderChunks.add(debug21); // MagmaCube - decompile fix
                 for (Direction direction : DIRECTIONS) {
                     ChunkRenderDispatcher.RenderChunk debug28 = this.getRelativeFrom(debug16, debug22, direction);
                     if (debug20 && debug21.hasDirection(direction.getOpposite()) || debug20 && debug23 != null && !debug22.getCompiledChunk().facesCanSeeEachother(debug23.getOpposite(), direction) || debug28 == null || !debug28.hasAllNeighbors() || !debug28.setFrame(debug4) || !debug2.isVisible(debug28.bb)) continue;
                     RenderChunkInfo debug29 = new RenderChunkInfo(debug28, direction, debug21.step + 1);
                     debug29.setDirections(debug21.directions, direction);
-                    debug19.add((ChunkRenderDispatcher.RenderChunk)((Object)debug29));
+                    debug19.add(debug29); // MagmaCube - decompile fix
                 }
             }
             this.minecraft.getProfiler().pop();
         }
         this.minecraft.getProfiler().popPush("rebuildNear");
-        debug19 = this.chunksToCompile;
+        Set<ChunkRenderDispatcher.RenderChunk> debug19 = this.chunksToCompile; // MagmaCube - decompile fix
         this.chunksToCompile = Sets.newLinkedHashSet();
         for (RenderChunkInfo debug21 : this.renderChunks) {
             boolean debug24;
@@ -865,10 +857,7 @@ AutoCloseable {
      * WARNING - Removed try catching itself - possible behaviour change.
      */
     public void renderLevel(PoseStack debug1, float debug22, long debug3, boolean debug5, Camera debug6, GameRenderer debug7, LightTexture debug8, Matrix4f debug9) {
-        Object debug48;
         int debug47;
-        Object debug412;
-        Object debug42;
         boolean debug222;
         Frustum debug20;
         boolean debug19;
@@ -954,7 +943,9 @@ AutoCloseable {
                 entity.yOld = entity.getY();
                 entity.zOld = entity.getZ();
             }
+            MultiBufferSource debug412; // MagmaCube - decompile fix
             if (this.shouldShowEntityOutlines() && this.minecraft.shouldEntityAppearGlowing(entity)) {
+                OutlineBufferSource debug42; // MagmaCube - decompile fix
                 debug37 = true;
                 debug412 = debug42 = this.renderBuffers.outlineBufferSource();
                 int debug43 = entity.getTeamColor();
@@ -975,25 +966,23 @@ AutoCloseable {
         debug38.endBatch(RenderType.entitySmoothCutout(TextureAtlas.LOCATION_BLOCKS));
         debug10.popPush("blockentities");
         for (RenderChunkInfo renderChunkInfo : this.renderChunks) {
-            debug412 = renderChunkInfo.chunk.getCompiledChunk().getRenderableBlockEntities();
+            List<BlockEntity> debug412 = renderChunkInfo.chunk.getCompiledChunk().getRenderableBlockEntities(); // MagmaCube - decompile fix
             if (debug412.isEmpty()) continue;
-            debug42 = debug412.iterator();
-            while (debug42.hasNext()) {
-                BlockEntity debug43 = (BlockEntity)debug42.next();
+            for (BlockEntity debug43 : debug412) { // MagmaCube - decompile fix
                 BlockPos debug44 = debug43.getBlockPos();
                 MultiBufferSource debug45 = debug38;
                 debug1.pushPose();
-                debug1.translate((double)debug44.getX() - debug12, (double)debug44.getY() - debug14, (double)debug44.getZ() - debug16);
-                SortedSet debug46 = (SortedSet)this.destructionProgress.get(debug44.asLong());
-                if (debug46 != null && !debug46.isEmpty() && (debug47 = ((BlockDestructionProgress)debug46.last()).getProgress()) >= 0) {
-                    debug48 = debug1.last();
-                    SheetedDecalTextureGenerator debug49 = new SheetedDecalTextureGenerator(this.renderBuffers.crumblingBufferSource().getBuffer(ModelBakery.DESTROY_TYPES.get(debug47)), ((PoseStack.Pose)debug48).pose(), ((PoseStack.Pose)debug48).normal());
+                debug1.translate((double) debug44.getX() - debug12, (double) debug44.getY() - debug14, (double) debug44.getZ() - debug16); // MagmaCube - decompile fix
+                SortedSet debug46 = (SortedSet) this.destructionProgress.get(debug44.asLong()); // MagmaCube - decompile fix
+                if (debug46 != null && !debug46.isEmpty() && (debug47 = ((BlockDestructionProgress) debug46.last()).getProgress()) >= 0) { // MagmaCube - decompile fix
+                    PoseStack.Pose debug48 = debug1.last(); // MagmaCube - decompile fix
+                    SheetedDecalTextureGenerator debug49 = new SheetedDecalTextureGenerator(this.renderBuffers.crumblingBufferSource().getBuffer(ModelBakery.DESTROY_TYPES.get(debug47)), ((PoseStack.Pose) debug48).pose(), ((PoseStack.Pose) debug48).normal()); // MagmaCube - decompile fix
                     debug45 = debug2 -> {
-                        VertexConsumer debug3 = debug38.getBuffer(debug2);
+                        VertexConsumer debug3l = debug38.getBuffer(debug2); // MagmaCube - decompile fix
                         if (debug2.affectsCrumbling()) {
-                            return VertexMultiConsumer.create(debug49, debug3);
+                            return VertexMultiConsumer.create(debug49, debug3l); // MagmaCube - decompile fix
                         }
-                        return debug3;
+                        return debug3l; // MagmaCube - decompile fix
                     };
                 }
                 BlockEntityRenderDispatcher.instance.render(debug43, debug22, debug1, debug45);
@@ -1002,8 +991,8 @@ AutoCloseable {
         }
         Set<BlockEntity> set = this.globalBlockEntities;
         synchronized (set) {
-            for (Object debug412 : this.globalBlockEntities) {
-                debug42 = ((BlockEntity)debug412).getBlockPos();
+            for (BlockEntity debug412 : this.globalBlockEntities) { // MagmaCube - decompile fix
+                BlockPos debug42 = ((BlockEntity)debug412).getBlockPos(); // MagmaCube - decompile fix
                 debug1.pushPose();
                 debug1.translate((double)((Vec3i)debug42).getX() - debug12, (double)((Vec3i)debug42).getY() - debug14, (double)((Vec3i)debug42).getZ() - debug16);
                 BlockEntityRenderDispatcher.instance.render(debug412, debug22, debug1, debug38);
@@ -1027,8 +1016,9 @@ AutoCloseable {
         for (Long2ObjectMap.Entry entry : this.destructionProgress.long2ObjectEntrySet()) {
             double debug46;
             double debug44;
-            debug412 = BlockPos.of(entry.getLongKey());
+            BlockPos debug412 = BlockPos.of(entry.getLongKey()); // MagmaCube - decompile fix
             double debug422 = (double)((Vec3i)debug412).getX() - debug12;
+            SortedSet<BlockDestructionProgress> debug48; // MagmaCube - decompile fix
             if (debug422 * debug422 + (debug44 = (double)((Vec3i)debug412).getY() - debug14) * debug44 + (debug46 = (double)((Vec3i)debug412).getZ() - debug16) * debug46 > 1024.0 || (debug48 = (SortedSet)entry.getValue()) == null || debug48.isEmpty()) continue;
             int debug49 = ((BlockDestructionProgress)debug48.last()).getProgress();
             debug1.pushPose();
@@ -1043,7 +1033,7 @@ AutoCloseable {
         if (debug5 && debug39 != null && debug39.getType() == HitResult.Type.BLOCK) {
             debug10.popPush("outline");
             BlockPos blockPos = ((BlockHitResult)debug39).getBlockPos();
-            debug412 = this.level.getBlockState(blockPos);
+            BlockState debug412 = this.level.getBlockState(blockPos); // MagmaCube - decompile fix
             if (!((BlockBehaviour.BlockStateBase)debug412).isAir() && this.level.getWorldBorder().isWithinBounds(blockPos)) {
                 VertexConsumer debug423 = debug38.getBuffer(RenderType.lines());
                 this.renderHitOutline(debug1, debug423, debug6.getEntity(), debug12, debug14, debug16, blockPos, (BlockState)debug412);
@@ -2433,7 +2423,7 @@ AutoCloseable {
             }
             if (debug4 == null || debug4.getPos().getX() != debug2.getX() || debug4.getPos().getY() != debug2.getY() || debug4.getPos().getZ() != debug2.getZ()) {
                 debug4 = new BlockDestructionProgress(debug1, debug2);
-                this.destroyingBlocks.put(debug1, (Object)debug4);
+                this.destroyingBlocks.put(debug1, debug4); // MagmaCube - decompile fix
             }
             debug4.setProgress(debug3);
             debug4.updateTick(this.ticks);
diff --git a/src/main/java/net/minecraft/client/renderer/MultiBufferSource.java b/src/main/java/net/minecraft/client/renderer/MultiBufferSource.java
index c0a5a12d47330556335932196548c323f15c00fc..505c42bbcd559b401a3e6f614115d70d796e0544 100644
--- a/src/main/java/net/minecraft/client/renderer/MultiBufferSource.java
+++ b/src/main/java/net/minecraft/client/renderer/MultiBufferSource.java
@@ -12,11 +12,11 @@ import com.mojang.blaze3d.vertex.BufferBuilder;
 
 public interface MultiBufferSource
 {
-    default BufferSource immediate(final BufferBuilder debug0) {
-        return immediateWithBuffers((Map<RenderType, BufferBuilder>)ImmutableMap.of(), debug0);
+    static BufferSource immediate(final BufferBuilder debug0) { // MagmaCube - decompile fix
+        return immediateWithBuffers(ImmutableMap.of(), debug0); // MagmaCube - decompile fix
     }
     
-    default BufferSource immediateWithBuffers(final Map<RenderType, BufferBuilder> debug0, final BufferBuilder debug1) {
+    static BufferSource immediateWithBuffers(final Map<RenderType, BufferBuilder> debug0, final BufferBuilder debug1) { // MagmaCube - decompile fix
         return new BufferSource(debug1, debug0);
     }
     
@@ -31,7 +31,7 @@ public interface MultiBufferSource
         
         protected BufferSource(final BufferBuilder debug1, final Map<RenderType, BufferBuilder> debug2) {
             this.lastState = Optional.empty();
-            this.startedBuffers = (Set<BufferBuilder>)Sets.newHashSet();
+            this.startedBuffers = Sets.newHashSet(); // MagmaCube - decompile fix
             this.builder = debug1;
             this.fixedBuffers = debug2;
         }
@@ -60,9 +60,8 @@ public interface MultiBufferSource
         }
         
         public void endBatch() {
-            final VertexConsumer debug2;
             this.lastState.ifPresent(debug1 -> {
-                debug2 = this.getBuffer(debug1);
+                VertexConsumer debug2 = this.getBuffer(debug1); // MagmaCube - decompile fix
                 if (debug2 == this.builder) {
                     this.endBatch(debug1);
                 }
diff --git a/src/main/java/net/minecraft/client/renderer/PostChain.java b/src/main/java/net/minecraft/client/renderer/PostChain.java
index e3e63df161f70d144a2df31e20de10cabce5400e..2efa54f2278ba555ecd6a178587cadbf8072354d 100644
--- a/src/main/java/net/minecraft/client/renderer/PostChain.java
+++ b/src/main/java/net/minecraft/client/renderer/PostChain.java
@@ -219,7 +219,7 @@ implements AutoCloseable {
                     catch (Exception debug14) {
                         debug15 = ChainedJsonException.forException(debug14);
                         ((ChainedJsonException)debug15).prependJsonKey("auxtargets[" + debug112 + "]");
-                        throw debug15;
+                        throw (ChainedJsonException) debug15; // MagmaCube - decompile fix
                     }
                 }
                 ++debug112;
@@ -227,14 +227,14 @@ implements AutoCloseable {
         }
         if ((debug11 = GsonHelper.getAsJsonArray(debug3, "uniforms", null)) != null) {
             int debug12 = 0;
-            for (JsonObject debug14 : debug11) {
+            for (JsonElement debug14 : debug11) { // MagmaCube - decompile fix
                 try {
                     this.parseUniformNode((JsonElement)debug14);
                 }
                 catch (Exception debug15) {
                     debug16 = ChainedJsonException.forException(debug15);
                     ((ChainedJsonException)debug16).prependJsonKey("uniforms[" + debug12 + "]");
-                    throw debug16;
+                    throw (ChainedJsonException) debug16; // MagmaCube - decompile fix
                 }
                 ++debug12;
             }
diff --git a/src/main/java/net/minecraft/client/renderer/RenderBuffers.java b/src/main/java/net/minecraft/client/renderer/RenderBuffers.java
index 17de275b70d2ea1b190583a3c6518e04ddde4979..57096e954355778f314622e414dfd90efa26aa5f 100644
--- a/src/main/java/net/minecraft/client/renderer/RenderBuffers.java
+++ b/src/main/java/net/minecraft/client/renderer/RenderBuffers.java
@@ -17,11 +17,13 @@ public class RenderBuffers
     
     public RenderBuffers() {
         this.fixedBufferPack = new ChunkBufferBuilderPack();
-        this.fixedBuffers = Util.make((SortedMap<RenderType, BufferBuilder>)new Object2ObjectLinkedOpenHashMap(), debug1 -> {
-            debug1.put((Object)Sheets.solidBlockSheet(), (Object)this.fixedBufferPack.builder(RenderType.solid()));
-            debug1.put((Object)Sheets.cutoutBlockSheet(), (Object)this.fixedBufferPack.builder(RenderType.cutout()));
-            debug1.put((Object)Sheets.bannerSheet(), (Object)this.fixedBufferPack.builder(RenderType.cutoutMipped()));
-            debug1.put((Object)Sheets.translucentCullBlockSheet(), (Object)this.fixedBufferPack.builder(RenderType.translucent()));
+        // MagmaCube start - decompile fix
+        this.fixedBuffers = Util.make(new Object2ObjectLinkedOpenHashMap(), debug1 -> {
+            debug1.put(Sheets.solidBlockSheet(), this.fixedBufferPack.builder(RenderType.solid()));
+            debug1.put(Sheets.cutoutBlockSheet(), this.fixedBufferPack.builder(RenderType.cutout()));
+            debug1.put(Sheets.bannerSheet(), this.fixedBufferPack.builder(RenderType.cutoutMipped()));
+            debug1.put(Sheets.translucentCullBlockSheet(), this.fixedBufferPack.builder(RenderType.translucent()));
+            // MagmaCube end - decompile fix
             put(debug1, Sheets.shieldSheet());
             put(debug1, Sheets.bedSheet());
             put(debug1, Sheets.shulkerBoxSheet());
@@ -36,7 +38,7 @@ public class RenderBuffers
             put(debug1, RenderType.entityGlint());
             put(debug1, RenderType.entityGlintDirect());
             put(debug1, RenderType.waterMask());
-            ModelBakery.DESTROY_TYPES.forEach(debug1 -> put(debug1, debug1));
+            ModelBakery.DESTROY_TYPES.forEach(debug1l -> put(debug1, debug1l)); // MagmaCube - decompile fix
             return;
         });
         this.bufferSource = MultiBufferSource.immediateWithBuffers(this.fixedBuffers, new BufferBuilder(256));
@@ -45,7 +47,7 @@ public class RenderBuffers
     }
     
     private static void put(final Object2ObjectLinkedOpenHashMap<RenderType, BufferBuilder> debug0, final RenderType debug1) {
-        debug0.put((Object)debug1, (Object)new BufferBuilder(debug1.bufferSize()));
+        debug0.put(debug1, new BufferBuilder(debug1.bufferSize())); // MagmaCube - decompile fix
     }
     
     public ChunkBufferBuilderPack fixedBufferPack() {
diff --git a/src/main/java/net/minecraft/client/renderer/RenderStateShard.java b/src/main/java/net/minecraft/client/renderer/RenderStateShard.java
index 6658ce44985e9e28f6580ef73bbb224cc9f44c03..4418604d042ae9e69732ac24fa11f7d86ac27713 100644
--- a/src/main/java/net/minecraft/client/renderer/RenderStateShard.java
+++ b/src/main/java/net/minecraft/client/renderer/RenderStateShard.java
@@ -563,9 +563,9 @@ public abstract class RenderStateShard {
         public TextureStateShard(ResourceLocation debug1, boolean debug2, boolean debug3) {
             super("texture", () -> {
                 RenderSystem.enableTexture();
-                TextureManager debug3 = Minecraft.getInstance().getTextureManager();
-                debug3.bind(debug1);
-                debug3.getTexture(debug1).setFilter(debug2, debug3);
+                TextureManager debug3l = Minecraft.getInstance().getTextureManager(); // MagmaCube - decompile fix
+                debug3l.bind(debug1); // MagmaCube - decompile fix
+                debug3l.getTexture(debug1).setFilter(debug2, debug3); // MagmaCube - decompile fix
             }, () -> {});
             this.texture = Optional.of(debug1);
             this.blur = debug2;
diff --git a/src/main/java/net/minecraft/client/renderer/RenderType.java b/src/main/java/net/minecraft/client/renderer/RenderType.java
index 167aed0b431d91da2312877afb18f23313b2fe9e..d42d6a57ed534148310dd824604769617e3512ad 100644
--- a/src/main/java/net/minecraft/client/renderer/RenderType.java
+++ b/src/main/java/net/minecraft/client/renderer/RenderType.java
@@ -268,7 +268,7 @@ public abstract class RenderType extends RenderStateShard
     }
     
     public static CompositeRenderType create(final String debug0, final VertexFormat debug1, final int debug2, final int debug3, final boolean debug4, final boolean debug5, final CompositeState debug6) {
-        return memoize(debug0, debug1, debug2, debug3, debug4, debug5, debug6);
+        return CompositeRenderType.memoize(debug0, debug1, debug2, debug3, debug4, debug5, debug6); // MagmaCube - decompile fix
     }
     
     public void end(final BufferBuilder debug1, final int debug2, final int debug3, final int debug4) {
@@ -290,7 +290,7 @@ public abstract class RenderType extends RenderStateShard
     }
     
     public static List<RenderType> chunkBufferLayers() {
-        return (List<RenderType>)ImmutableList.of((Object)solid(), (Object)cutoutMipped(), (Object)cutout(), (Object)translucent(), (Object)tripwire());
+        return (List<RenderType>)ImmutableList.of(solid(), cutoutMipped(), cutout(), translucent(), tripwire()); // MagmaCube - decompile fix
     }
     
     public int bufferSize() {
@@ -397,7 +397,7 @@ public abstract class RenderType extends RenderStateShard
             this.writeMaskState = debug14;
             this.lineState = debug15;
             this.outlineProperty = debug16;
-            this.states = (ImmutableList<RenderStateShard>)ImmutableList.of((Object)this.textureState, (Object)this.transparencyState, (Object)this.diffuseLightingState, (Object)this.shadeModelState, (Object)this.alphaState, (Object)this.depthTestState, (Object)this.cullState, (Object)this.lightmapState, (Object)this.overlayState, (Object)this.fogState, (Object)this.layeringState, (Object)this.outputState, (Object[])new RenderStateShard[] { this.texturingState, this.writeMaskState, this.lineState });
+            this.states = (ImmutableList<RenderStateShard>)ImmutableList.of(this.textureState, this.transparencyState, this.diffuseLightingState, this.shadeModelState, this.alphaState, this.depthTestState, this.cullState, this.lightmapState, this.overlayState, this.fogState, this.layeringState, this.outputState, new RenderStateShard[] { this.texturingState, this.writeMaskState, this.lineState }); // MagmaCube - decompile fix
         }
         
         @Override
@@ -558,13 +558,13 @@ public abstract class RenderType extends RenderStateShard
         private CompositeRenderType(final String debug1, final VertexFormat debug2, final int debug3, final int debug4, final boolean debug5, final boolean debug6, final CompositeState debug7) {
             super(debug1, debug2, debug3, debug4, debug5, debug6, () -> debug7.states.forEach(RenderStateShard::setupRenderState), () -> debug7.states.forEach(RenderStateShard::clearRenderState));
             this.state = debug7;
-            this.outline = ((debug7.outlineProperty == OutlineProperty.AFFECTS_OUTLINE) ? debug7.textureState.texture().map(debug1 -> RenderType.outline(debug1, debug7.cullState)) : Optional.empty());
+            this.outline = ((debug7.outlineProperty == OutlineProperty.AFFECTS_OUTLINE) ? debug7.textureState.texture().map(debug1l -> RenderType.outline(debug1l, debug7.cullState)) : Optional.empty()); // MagmaCube - decompile fix
             this.isOutline = (debug7.outlineProperty == OutlineProperty.IS_OUTLINE);
             this.hashCode = Objects.hash(super.hashCode(), debug7);
         }
         
         private static CompositeRenderType memoize(final String debug0, final VertexFormat debug1, final int debug2, final int debug3, final boolean debug4, final boolean debug5, final CompositeState debug6) {
-            return (CompositeRenderType)CompositeRenderType.INSTANCES.addOrGet((Object)new CompositeRenderType(debug0, debug1, debug2, debug3, debug4, debug5, debug6));
+            return (CompositeRenderType)CompositeRenderType.INSTANCES.addOrGet(new CompositeRenderType(debug0, debug1, debug2, debug3, debug4, debug5, debug6)); // MagmaCube - decompile fix
         }
         
         @Override
diff --git a/src/main/java/net/minecraft/client/renderer/block/BlockModelShaper.java b/src/main/java/net/minecraft/client/renderer/block/BlockModelShaper.java
index 355d93d08d11f944aca4f67419e189accedfe3cf..efcd8d043bb9594a9941d15fe018a6dc36a4a687 100644
--- a/src/main/java/net/minecraft/client/renderer/block/BlockModelShaper.java
+++ b/src/main/java/net/minecraft/client/renderer/block/BlockModelShaper.java
@@ -23,7 +23,7 @@ public class BlockModelShaper
     private final ModelManager modelManager;
     
     public BlockModelShaper(final ModelManager debug1) {
-        this.modelByStateCache = (Map<BlockState, BakedModel>)Maps.newIdentityHashMap();
+        this.modelByStateCache = Maps.newIdentityHashMap(); // MagmaCube - decompile fix
         this.modelManager = debug1;
     }
     
@@ -46,8 +46,7 @@ public class BlockModelShaper
     public void rebuildCache() {
         this.modelByStateCache.clear();
         for (final Block debug2 : Registry.BLOCK) {
-            final BakedModel bakedModel;
-            debug2.getStateDefinition().getPossibleStates().forEach(debug1 -> bakedModel = this.modelByStateCache.put(debug1, this.modelManager.getModel(stateToModelLocation(debug1))));
+            debug2.getStateDefinition().getPossibleStates().forEach(debug1 -> this.modelByStateCache.put(debug1, this.modelManager.getModel(stateToModelLocation(debug1)))); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/BlockModel.java b/src/main/java/net/minecraft/client/renderer/block/model/BlockModel.java
index 3946a078125fd9c1fc8dd733fc4ef701c093c8e3..1945edeb1ec870a43e32666a475a65c441ccd67d 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/BlockModel.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/BlockModel.java
@@ -54,16 +54,7 @@ import java.util.Set;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
-import net.minecraft.client.renderer.block.model.BakedQuad;
-import net.minecraft.client.renderer.block.model.BlockElement;
-import net.minecraft.client.renderer.block.model.BlockElementFace;
-import net.minecraft.client.renderer.block.model.BlockFaceUV;
-import net.minecraft.client.renderer.block.model.FaceBakery;
-import net.minecraft.client.renderer.block.model.ItemModelGenerator;
-import net.minecraft.client.renderer.block.model.ItemOverride;
-import net.minecraft.client.renderer.block.model.ItemOverrides;
-import net.minecraft.client.renderer.block.model.ItemTransform;
-import net.minecraft.client.renderer.block.model.ItemTransforms;
+
 import net.minecraft.client.renderer.texture.MissingTextureAtlasSprite;
 import net.minecraft.client.renderer.texture.TextureAtlas;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
@@ -167,12 +158,11 @@ implements UnbakedModel {
 
     @Override
     public Collection<Material> getMaterials(Function<ResourceLocation, UnbakedModel> debug1, Set<Pair<String, String>> debug2) {
-        Object debug5;
         LinkedHashSet debug3 = Sets.newLinkedHashSet();
         BlockModel debug4 = this;
         while (debug4.parentLocation != null && debug4.parent == null) {
             debug3.add(debug4);
-            debug5 = debug1.apply(debug4.parentLocation);
+            UnbakedModel debug5 = debug1.apply(debug4.parentLocation); // MagmaCube - decompile fix
             if (debug5 == null) {
                 LOGGER.warn("No parent '{}' while loading model '{}'", (Object)this.parentLocation, (Object)debug4);
             }
@@ -190,19 +180,19 @@ implements UnbakedModel {
             debug4.parent = (BlockModel)debug5;
             debug4 = debug4.parent;
         }
-        debug5 = Sets.newHashSet((Object[])new Material[]{this.getMaterial("particle")});
+        Set debug5 = Sets.newHashSet((Object[])new Material[]{this.getMaterial("particle")}); // MagmaCube - decompile fix
         for (BlockElement debug7 : this.getElements()) {
             for (BlockElementFace debug9 : debug7.faces.values()) {
                 Material debug10 = this.getMaterial(debug9.texture);
                 if (Objects.equals(debug10.texture(), MissingTextureAtlasSprite.getLocation())) {
-                    debug2.add((Pair<String, String>)Pair.of((Object)debug9.texture, (Object)this.name));
+                    debug2.add((Pair<String, String>)Pair.of(debug9.texture, this.name)); // MagmaCube - decompile fix
                 }
                 debug5.add(debug10);
             }
         }
-        this.overrides.forEach(arg_0 -> this.lambda$getMaterials$0(debug1, (Set)debug5, debug2, arg_0));
+        this.overrides.forEach(arg_0 -> this._lambda$getMaterials$0(debug1, (Set)debug5, debug2, arg_0)); // MagmaCube - decompile fix
         if (this.getRootModel() == ModelBakery.GENERATION_MARKER) {
-            ItemModelGenerator.LAYERS.forEach(arg_0 -> this.lambda$getMaterials$1((Set)debug5, arg_0));
+            ItemModelGenerator.LAYERS.forEach(arg_0 -> this._lambda$getMaterials$1((Set)debug5, arg_0)); // MagmaCube - decompile fix
         }
         return debug5;
     }
@@ -267,7 +257,7 @@ implements UnbakedModel {
             }
             debug2 = debug2.parent;
         }
-        return Either.left((Object)new Material(TextureAtlas.LOCATION_BLOCKS, MissingTextureAtlasSprite.getLocation()));
+        return Either.left(new Material(TextureAtlas.LOCATION_BLOCKS, MissingTextureAtlasSprite.getLocation())); // MagmaCube - decompile fix
     }
 
     private static boolean isTextureReference(String debug0) {
@@ -301,11 +291,11 @@ implements UnbakedModel {
         return this.name;
     }
 
-    private /* synthetic */ void lambda$getMaterials$1(Set debug1, String debug2) {
+    private /* synthetic */ void _lambda$getMaterials$1(Set debug1, String debug2) { // MagmaCube - decompile fix
         debug1.add(this.getMaterial(debug2));
     }
 
-    private /* synthetic */ void lambda$getMaterials$0(Function debug1, Set debug2, Set debug3, ItemOverride debug4) {
+    private /* synthetic */ void _lambda$getMaterials$0(Function debug1, Set debug2, Set debug3, ItemOverride debug4) { // MagmaCube - decompile fix
         UnbakedModel debug5 = (UnbakedModel)debug1.apply(debug4.getModel());
         if (Objects.equals(debug5, this)) {
             return;
@@ -384,13 +374,13 @@ implements UnbakedModel {
 
         private static Either<Material, String> parseTextureLocationOrReference(ResourceLocation debug0, String debug1) {
             if (BlockModel.isTextureReference(debug1)) {
-                return Either.right((Object)debug1.substring(1));
+                return Either.right(debug1.substring(1)); // MagmaCube - decompile fix
             }
             ResourceLocation debug2 = ResourceLocation.tryParse(debug1);
             if (debug2 == null) {
                 throw new JsonParseException(debug1 + " is not valid resource location");
             }
-            return Either.left((Object)new Material(debug0, debug2));
+            return Either.left(new Material(debug0, debug2)); // MagmaCube - decompile fix
         }
 
         private String getParentName(JsonObject debug1) {
@@ -410,10 +400,6 @@ implements UnbakedModel {
             }
             return debug3;
         }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/BlockModelDefinition.java b/src/main/java/net/minecraft/client/renderer/block/model/BlockModelDefinition.java
index 8e5135968120fab9214afac7ff1335a8f743d772..2b479a224c5dfd47bedf6386397dcbb3c8caf455 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/BlockModelDefinition.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/BlockModelDefinition.java
@@ -32,13 +32,13 @@ public class BlockModelDefinition
     }
     
     public BlockModelDefinition(final Map<String, MultiVariant> debug1, final MultiPart debug2) {
-        this.variants = (Map<String, MultiVariant>)Maps.newLinkedHashMap();
+        this.variants = Maps.newLinkedHashMap(); // MagmaCube - decompile fix
         this.multiPart = debug2;
         this.variants.putAll(debug1);
     }
     
     public BlockModelDefinition(final List<BlockModelDefinition> debug1) {
-        this.variants = (Map<String, MultiVariant>)Maps.newLinkedHashMap();
+        this.variants = Maps.newLinkedHashMap(); // MagmaCube - decompile fix
         BlockModelDefinition debug2 = null;
         for (final BlockModelDefinition debug3 : debug1) {
             if (debug3.isMultiPart()) {
@@ -114,7 +114,7 @@ public class BlockModelDefinition
         }
         
         protected Map<String, MultiVariant> getVariants(final JsonDeserializationContext debug1, final JsonObject debug2) {
-            final Map<String, MultiVariant> debug3 = (Map<String, MultiVariant>)Maps.newHashMap();
+            final Map<String, MultiVariant> debug3 = Maps.newHashMap(); // MagmaCube - decompile fix
             if (debug2.has("variants")) {
                 final JsonObject debug4 = GsonHelper.getAsJsonObject(debug2, "variants");
                 for (final Map.Entry<String, JsonElement> debug5 : debug4.entrySet()) {
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/ItemModelGenerator.java b/src/main/java/net/minecraft/client/renderer/block/model/ItemModelGenerator.java
index df415040e3c26473f70d077bd477afed3ab28001..54e66cd86f1cca5fb08b04a86ac821356619c0b5 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/ItemModelGenerator.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/ItemModelGenerator.java
@@ -19,15 +19,15 @@ public class ItemModelGenerator
     public static final List<String> LAYERS;
     
     public BlockModel generateBlockModel(final Function<Material, TextureAtlasSprite> debug1, final BlockModel debug2) {
-        final Map<String, Either<Material, String>> debug3 = (Map<String, Either<Material, String>>)Maps.newHashMap();
-        final List<BlockElement> debug4 = (List<BlockElement>)Lists.newArrayList();
+        final Map<String, Either<Material, String>> debug3 = Maps.newHashMap(); // MagmaCube - decompile fix
+        final List<BlockElement> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug5 = 0; debug5 < ItemModelGenerator.LAYERS.size(); ++debug5) {
             final String debug6 = ItemModelGenerator.LAYERS.get(debug5);
             if (!debug2.hasTexture(debug6)) {
                 break;
             }
             final Material debug7 = debug2.getMaterial(debug6);
-            debug3.put(debug6, (Either<Material, String>)Either.left((Object)debug7));
+            debug3.put(debug6, Either.left(debug7)); // MagmaCube - decompile fix
             final TextureAtlasSprite debug8 = debug1.apply(debug7);
             debug4.addAll(this.processFrames(debug5, debug6, debug8));
         }
@@ -38,10 +38,10 @@ public class ItemModelGenerator
     }
     
     private List<BlockElement> processFrames(final int debug1, final String debug2, final TextureAtlasSprite debug3) {
-        final Map<Direction, BlockElementFace> debug4 = (Map<Direction, BlockElementFace>)Maps.newHashMap();
+        final Map<Direction, BlockElementFace> debug4 = Maps.newHashMap(); // MagmaCube - decompile fix
         debug4.put(Direction.SOUTH, new BlockElementFace(null, debug1, debug2, new BlockFaceUV(new float[] { 0.0f, 0.0f, 16.0f, 16.0f }, 0)));
         debug4.put(Direction.NORTH, new BlockElementFace(null, debug1, debug2, new BlockFaceUV(new float[] { 16.0f, 0.0f, 0.0f, 16.0f }, 0)));
-        final List<BlockElement> debug5 = (List<BlockElement>)Lists.newArrayList();
+        final List<BlockElement> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
         debug5.add(new BlockElement(new Vector3f(0.0f, 0.0f, 7.5f), new Vector3f(16.0f, 16.0f, 8.5f), debug4, null, true));
         debug5.addAll(this.createSideElements(debug3, debug2, debug1));
         return debug5;
@@ -50,7 +50,7 @@ public class ItemModelGenerator
     private List<BlockElement> createSideElements(final TextureAtlasSprite debug1, final String debug2, final int debug3) {
         final float debug4 = debug1.getWidth();
         final float debug5 = debug1.getHeight();
-        final List<BlockElement> debug6 = (List<BlockElement>)Lists.newArrayList();
+        final List<BlockElement> debug6 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Span debug7 : this.getSpans(debug1)) {
             float debug8 = 0.0f;
             float debug9 = 0.0f;
@@ -112,7 +112,7 @@ public class ItemModelGenerator
             debug13 *= debug16;
             debug14 *= debug17;
             debug15 *= debug17;
-            final Map<Direction, BlockElementFace> debug22 = (Map<Direction, BlockElementFace>)Maps.newHashMap();
+            final Map<Direction, BlockElementFace> debug22 = Maps.newHashMap(); // MagmaCube - decompile fix
             debug22.put(debug21.getDirection(), new BlockElementFace(null, debug3, debug2, new BlockFaceUV(new float[] { debug12, debug14, debug13, debug15 }, 0)));
             switch (debug21) {
                 case UP: {
@@ -139,7 +139,7 @@ public class ItemModelGenerator
     private List<Span> getSpans(final TextureAtlasSprite debug1) {
         final int debug2 = debug1.getWidth();
         final int debug3 = debug1.getHeight();
-        final List<Span> debug4 = (List<Span>)Lists.newArrayList();
+        final List<Span> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug5 = 0; debug5 < debug1.getFrameCount(); ++debug5) {
             for (int debug6 = 0; debug6 < debug3; ++debug6) {
                 for (int debug7 = 0; debug7 < debug2; ++debug7) {
@@ -188,7 +188,7 @@ public class ItemModelGenerator
     }
     
     static {
-        LAYERS = Lists.newArrayList((Object[])new String[] { "layer0", "layer1", "layer2", "layer3", "layer4" });
+        LAYERS = Lists.newArrayList(new String[] { "layer0", "layer1", "layer2", "layer3", "layer4" }); // MagmaCube - decompile fix
     }
     
     enum SpanFacing
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/ItemOverride.java b/src/main/java/net/minecraft/client/renderer/block/model/ItemOverride.java
index cd1db27b190ce4458b4079fde0a6b78dbb6fc2d0..0b807af391c3fd705d749c6c1250766c2cd4d2ca 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/ItemOverride.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/ItemOverride.java
@@ -54,7 +54,7 @@ public class ItemOverride
         }
         
         protected Map<ResourceLocation, Float> getPredicates(final JsonObject debug1) {
-            final Map<ResourceLocation, Float> debug2 = (Map<ResourceLocation, Float>)Maps.newLinkedHashMap();
+            final Map<ResourceLocation, Float> debug2 = Maps.newLinkedHashMap(); // MagmaCube - decompile fix
             final JsonObject debug3 = GsonHelper.getAsJsonObject(debug1, "predicate");
             for (final Map.Entry<String, JsonElement> debug4 : debug3.entrySet()) {
                 debug2.put(new ResourceLocation(debug4.getKey()), GsonHelper.convertToFloat(debug4.getValue(), debug4.getKey()));
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/ItemOverrides.java b/src/main/java/net/minecraft/client/renderer/block/model/ItemOverrides.java
index 2052f7dff73556b41e79a3c2fdb4564911bc7fe8..21b9e9a2342c918aa7a5ce5a0879af7d88d7da6d 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/ItemOverrides.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/ItemOverrides.java
@@ -36,8 +36,8 @@ public class ItemOverrides {
 
     public ItemOverrides(ModelBakery debug1, BlockModel debug2, Function<ResourceLocation, UnbakedModel> debug32, List<ItemOverride> debug4) {
         this.overrideModels = debug4.stream().map(debug3 -> {
-            UnbakedModel debug4 = (UnbakedModel)debug32.apply(debug3.getModel());
-            if (Objects.equals(debug4, debug2)) {
+            UnbakedModel debug4l = (UnbakedModel)debug32.apply(debug3.getModel()); // MagmaCube - decompile fix
+            if (Objects.equals(debug4l, debug2)) { // MagmaCube - decompile fix
                 return null;
             }
             return debug1.bake(debug3.getModel(), BlockModelRotation.X0_Y0);
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/MultiVariant.java b/src/main/java/net/minecraft/client/renderer/block/model/MultiVariant.java
index c90085245e79d12a5ccf05fd3bf193e4bdba70e4..20217c29ff59128f5c90a0406580b29b45eb2b5e 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/MultiVariant.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/MultiVariant.java
@@ -106,10 +106,6 @@ implements UnbakedModel {
             }
             return new MultiVariant(debug4);
         }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/multipart/Condition.java b/src/main/java/net/minecraft/client/renderer/block/model/multipart/Condition.java
index 1209419e81de89cb66a05924c5c1ba17827195a6..04760ca420aa910006acbd23f5d310e5d59d8f9e 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/multipart/Condition.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/multipart/Condition.java
@@ -8,8 +8,8 @@ import net.minecraft.world.level.block.state.StateDefinition;
 @FunctionalInterface
 public interface Condition
 {
-    public static final Condition TRUE = debug0 -> debug0 -> 1;
-    public static final Condition FALSE = debug0 -> debug0 -> 0;
+    public static final Condition TRUE = debug0 -> debug0l -> true;
+    public static final Condition FALSE = debug0 -> debug0l -> false;
     
     Predicate<BlockState> getPredicate(final StateDefinition<Block, BlockState> p0);
 }
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/multipart/MultiPart.java b/src/main/java/net/minecraft/client/renderer/block/model/multipart/MultiPart.java
index bff724df672b21acca8f08907f6f4e978de1261f..39fd10755350805bc9cd9c883c8ab130a56646f3 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/multipart/MultiPart.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/multipart/MultiPart.java
@@ -125,10 +125,6 @@ implements UnbakedModel {
             }
             return debug3;
         }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/multipart/Selector.java b/src/main/java/net/minecraft/client/renderer/block/model/multipart/Selector.java
index b8000059c0ea5b336a66f02ff052e8a9e440ff85..ddb8834c940df96c84ea04e54e9e21d157abe1c5 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/multipart/Selector.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/multipart/Selector.java
@@ -82,17 +82,17 @@ public class Selector {
 
         @VisibleForTesting
         static Condition getCondition(JsonObject debug02) {
-            Set debug1 = debug02.entrySet();
+            Set<Map.Entry<String, JsonElement>> debug1 = debug02.entrySet(); // MagmaCube - decompile fix
             if (debug1.isEmpty()) {
                 throw new JsonParseException("No elements found in selector");
             }
             if (debug1.size() == 1) {
                 if (debug02.has("OR")) {
-                    List debug2 = Streams.stream((Iterable)GsonHelper.getAsJsonArray(debug02, "OR")).map(debug0 -> Deserializer.getCondition(debug0.getAsJsonObject())).collect(Collectors.toList());
+                    List debug2 = Streams.stream(GsonHelper.getAsJsonArray(debug02, "OR")).map(debug0 -> Deserializer.getCondition(debug0.getAsJsonObject())).collect(Collectors.toList()); // MagmaCube - decompile fix
                     return new OrCondition(debug2);
                 }
                 if (debug02.has("AND")) {
-                    List debug2 = Streams.stream((Iterable)GsonHelper.getAsJsonArray(debug02, "AND")).map(debug0 -> Deserializer.getCondition(debug0.getAsJsonObject())).collect(Collectors.toList());
+                    List debug2 = Streams.stream(GsonHelper.getAsJsonArray(debug02, "AND")).map(debug0 -> Deserializer.getCondition(debug0.getAsJsonObject())).collect(Collectors.toList()); // MagmaCube - decompile fix
                     return new AndCondition(debug2);
                 }
                 return Deserializer.getKeyValueCondition((Map.Entry)debug1.iterator().next());
@@ -103,10 +103,6 @@ public class Selector {
         private static Condition getKeyValueCondition(Map.Entry<String, JsonElement> debug0) {
             return new KeyValueCondition(debug0.getKey(), debug0.getValue().getAsString());
         }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java
index d2628736257ebc5b812659b73bcc0ee42978122a..3fec0073bd3c8574a5674d916264e053cb9890c0 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java
@@ -51,23 +51,23 @@ public class BlockEntityRenderDispatcher
     public HitResult cameraHitResult;
     
     private BlockEntityRenderDispatcher() {
-        this.renderers = (Map<BlockEntityType<?>, BlockEntityRenderer<?>>)Maps.newHashMap();
+        this.renderers = Maps.newHashMap(); // MagmaCube - decompile fix
         this.singleRenderBuffer = new BufferBuilder(256);
         this.register(BlockEntityType.SIGN, new SignRenderer(this));
         this.register(BlockEntityType.MOB_SPAWNER, new SpawnerRenderer(this));
         this.register(BlockEntityType.PISTON, new PistonHeadRenderer(this));
-        this.register((BlockEntityType<BlockEntity>)BlockEntityType.CHEST, new ChestRenderer<BlockEntity>(this));
-        this.register((BlockEntityType<BlockEntity>)BlockEntityType.ENDER_CHEST, new ChestRenderer<BlockEntity>(this));
-        this.register((BlockEntityType<BlockEntity>)BlockEntityType.TRAPPED_CHEST, new ChestRenderer<BlockEntity>(this));
+        this.register(BlockEntityType.CHEST, new ChestRenderer<>(this)); // MagmaCube - decompile fix
+        this.register(BlockEntityType.ENDER_CHEST, new ChestRenderer<>(this)); // MagmaCube - decompile fix
+        this.register(BlockEntityType.TRAPPED_CHEST, new ChestRenderer<>(this)); // MagmaCube - decompile fix
         this.register(BlockEntityType.ENCHANTING_TABLE, new EnchantTableRenderer(this));
         this.register(BlockEntityType.LECTERN, new LecternRenderer(this));
-        this.register((BlockEntityType<BlockEntity>)BlockEntityType.END_PORTAL, new TheEndPortalRenderer<BlockEntity>(this));
+        this.register(BlockEntityType.END_PORTAL, new TheEndPortalRenderer<>(this)); // MagmaCube - decompile fix
         this.register(BlockEntityType.END_GATEWAY, new TheEndGatewayRenderer(this));
         this.register(BlockEntityType.BEACON, new BeaconRenderer(this));
         this.register(BlockEntityType.SKULL, new SkullBlockRenderer(this));
         this.register(BlockEntityType.BANNER, new BannerRenderer(this));
         this.register(BlockEntityType.STRUCTURE_BLOCK, new StructureBlockRenderer(this));
-        this.register(BlockEntityType.SHULKER_BOX, new ShulkerBoxRenderer(new ShulkerModel<Object>(), this));
+        this.register(BlockEntityType.SHULKER_BOX, new ShulkerBoxRenderer(new ShulkerModel<>(), this)); // MagmaCube - decompile fix
         this.register(BlockEntityType.BED, new BedRenderer(this));
         this.register(BlockEntityType.CONDUIT, new ConduitRenderer(this));
         this.register(BlockEntityType.BELL, new BellRenderer(this));
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/BrightnessCombiner.java b/src/main/java/net/minecraft/client/renderer/blockentity/BrightnessCombiner.java
index 5f21cae1c95f4164c8f3d2b7a44041aed01f6eea..6263dfdb050386214106d43270151ac596fb9396 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/BrightnessCombiner.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/BrightnessCombiner.java
@@ -11,7 +11,7 @@ public class BrightnessCombiner<S extends BlockEntity> implements DoubleBlockCom
 {
     @Override
     public Int2IntFunction acceptDouble(final S debug1, final S debug2) {
-        return debug2 -> {
+        return debug2l -> { // MagmaCube - decompile fix
             final int debug3 = LevelRenderer.getLightColor(debug1.getLevel(), debug1.getBlockPos());
             final int debug4 = LevelRenderer.getLightColor(debug2.getLevel(), debug2.getBlockPos());
             final int debug5 = LightTexture.block(debug3);
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/ChestRenderer.java b/src/main/java/net/minecraft/client/renderer/blockentity/ChestRenderer.java
index 97027e15986b7c47d32b4964ba87a1d878c386d1..9528272f8247051baee3b912f28196b9515631b9 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/ChestRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/ChestRenderer.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.blockentity;
 
+import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.StateHolder;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import net.minecraft.client.resources.model.Material;
@@ -68,7 +69,7 @@ public class ChestRenderer<T extends BlockEntity> extends BlockEntityRenderer<T>
     public void render(final T debug1, final float debug2, final PoseStack debug3, final MultiBufferSource debug4, final int debug5, final int debug6) {
         final Level debug7 = ((BlockEntity)debug1).getLevel();
         final boolean debug8 = debug7 != null;
-        final BlockState debug9 = debug8 ? ((BlockEntity)debug1).getBlockState() : ((StateHolder<O, BlockState>)Blocks.CHEST.defaultBlockState()).setValue((Property<Comparable>)ChestBlock.FACING, Direction.SOUTH);
+        final BlockState debug9 = debug8 ? ((BlockEntity)debug1).getBlockState() : (Blocks.CHEST.defaultBlockState()).setValue(ChestBlock.FACING, Direction.SOUTH); // MagmaCube - decompile fix
         final ChestType debug10 = debug9.hasProperty(ChestBlock.TYPE) ? debug9.getValue(ChestBlock.TYPE) : ChestType.SINGLE;
         final Block debug11 = debug9.getBlock();
         if (!(debug11 instanceof AbstractChestBlock)) {
@@ -91,7 +92,7 @@ public class ChestRenderer<T extends BlockEntity> extends BlockEntityRenderer<T>
         float debug16 = debug15.apply(ChestBlock.opennessCombiner((LidBlockEntity)debug1)).get(debug2);
         debug16 = 1.0f - debug16;
         debug16 = 1.0f - debug16 * debug16 * debug16;
-        final int debug17 = debug15.apply((DoubleBlockCombiner.Combiner<? super ChestBlockEntity, Int2IntFunction>)new BrightnessCombiner<Object>()).applyAsInt(debug5);
+        final int debug17 = debug15.apply((DoubleBlockCombiner.Combiner<? super ChestBlockEntity, Int2IntFunction>)new BrightnessCombiner<>()).applyAsInt(debug5); // MagmaCube - decompile fix
         final Material debug18 = Sheets.chooseMaterial((BlockEntity)debug1, debug10, this.xmasTextures);
         final VertexConsumer debug19 = debug18.buffer(debug4, RenderType::entityCutout);
         if (debug13) {
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/SignRenderer.java b/src/main/java/net/minecraft/client/renderer/blockentity/SignRenderer.java
index 5ec9a0d83ace33061ee6714dffbb7eade29aa5a3..dea86476dd820d00181d81a52638b05bd9eeab66 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/SignRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/SignRenderer.java
@@ -72,9 +72,8 @@ public class SignRenderer extends BlockEntityRenderer<SignBlockEntity>
         final int debug19 = NativeImage.combine(0, debug18, debug17, debug16);
         final int debug20 = 20;
         for (int debug21 = 0; debug21 < 4; ++debug21) {
-            final List<FormattedCharSequence> debug23;
-            final FormattedCharSequence debug22 = debug1.getRenderMessage(debug21, debug1 -> {
-                debug23 = debug12.split(debug1, 90);
+            final FormattedCharSequence debug22 = debug1.getRenderMessage(debug21, debug1l -> { // MagmaCube - decompile fix
+                List<FormattedCharSequence> debug23 = debug12.split(debug1l, 90); // MagmaCube - decompile fix
                 return debug23.isEmpty() ? FormattedCharSequence.EMPTY : debug23.get(0);
             });
             if (debug22 != null) {
diff --git a/src/main/java/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
index 43c3c3324a31774587ab311cdaef2779fb94acd1..23c4864bb58f4215a790073b877f35142fc17e3a 100644
--- a/src/main/java/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
@@ -129,7 +129,7 @@ public class ChunkRenderDispatcher {
         this.freeBufferCount = this.freeBuffers.size();
         ((CompletableFuture)CompletableFuture.runAsync(() -> {}, this.executor).thenCompose(debug2 -> debug1.doTask(debug22))).whenComplete((debug2, debug3) -> {
             if (debug3 != null) {
-                CrashReport debug4 = CrashReport.forThrowable(debug3, "Batching chunks");
+                CrashReport debug4 = CrashReport.forThrowable((Throwable) debug3, "Batching chunks"); // MagmaCube - decompile fix
                 Minecraft.getInstance().delayCrash(Minecraft.getInstance().fillReport(debug4));
                 return;
             }
@@ -429,11 +429,6 @@ public class ChunkRenderDispatcher {
             public int compareTo(ChunkCompileTask debug1) {
                 return Doubles.compare((double)this.distAtCreation, (double)debug1.distAtCreation);
             }
-
-            @Override
-            public /* synthetic */ int compareTo(Object object) {
-                return this.compareTo((ChunkCompileTask)object);
-            }
         }
 
         class ResortTransparencyTask
@@ -477,7 +472,7 @@ public class ChunkRenderDispatcher {
                 CompletionStage debug8 = ChunkRenderDispatcher.this.uploadChunkLayer(debug12.builder(RenderType.translucent()), RenderChunk.this.getBuffer(RenderType.translucent())).thenApply(debug0 -> ChunkTaskResult.CANCELLED);
                 return ((CompletableFuture)debug8).handle((debug1, debug2) -> {
                     if (debug2 != null && !(debug2 instanceof CancellationException) && !(debug2 instanceof InterruptedException)) {
-                        Minecraft.getInstance().delayCrash(CrashReport.forThrowable(debug2, "Rendering chunk"));
+                        Minecraft.getInstance().delayCrash(CrashReport.forThrowable((Throwable) debug2, "Rendering chunk")); // MagmaCube - decompile fix
                     }
                     return this.isCancelled.get() ? ChunkTaskResult.CANCELLED : ChunkTaskResult.SUCCESSFUL;
                 });
@@ -527,7 +522,7 @@ public class ChunkRenderDispatcher {
                 debug6.hasLayer.forEach(debug3 -> debug8.add(ChunkRenderDispatcher.this.uploadChunkLayer(debug1.builder((RenderType)debug3), RenderChunk.this.getBuffer((RenderType)debug3))));
                 return Util.sequence(debug8).handle((debug2, debug3) -> {
                     if (debug3 != null && !(debug3 instanceof CancellationException) && !(debug3 instanceof InterruptedException)) {
-                        Minecraft.getInstance().delayCrash(CrashReport.forThrowable(debug3, "Rendering chunk"));
+                        Minecraft.getInstance().delayCrash(CrashReport.forThrowable((Throwable) debug3, "Rendering chunk")); // MagmaCube - decompile fix
                     }
                     if (this.isCancelled.get()) {
                         return ChunkTaskResult.CANCELLED;
diff --git a/src/main/java/net/minecraft/client/renderer/chunk/VisibilitySet.java b/src/main/java/net/minecraft/client/renderer/chunk/VisibilitySet.java
index eedd100fda1d37633f191f8157938b01e6f4924f..c145b3574a1330246686f93f51bdd4442cbfa956 100644
--- a/src/main/java/net/minecraft/client/renderer/chunk/VisibilitySet.java
+++ b/src/main/java/net/minecraft/client/renderer/chunk/VisibilitySet.java
@@ -42,7 +42,7 @@ public class VisibilitySet
         for (final Direction debug2 : Direction.values()) {
             debug1.append(' ').append(debug2.toString().toUpperCase().charAt(0));
         }
-        debug1.append('Â¥n');
+        debug1.append('\n'); // MagmaCube - decompile fix
         for (final Direction debug2 : Direction.values()) {
             debug1.append(debug2.toString().toUpperCase().charAt(0));
             for (final Direction debug3 : Direction.values()) {
@@ -54,7 +54,7 @@ public class VisibilitySet
                     debug1.append(' ').append(debug4 ? 'Y' : 'n');
                 }
             }
-            debug1.append('Â¥n');
+            debug1.append('\n'); // MagmaCube - decompile fix
         }
         return debug1.toString();
     }
diff --git a/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java
index 2aaa0188f0bdd267887a4d67e9a4a1a64832bda4..2ab4b660312e6496cca2ad4aa56746d58de314c0 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java
@@ -115,17 +115,17 @@ implements DebugRenderer.SimpleDebugRenderer {
     }
 
     private Map<BlockPos, Set<UUID>> createHiveBlacklistMap() {
-        HashMap debug12 = Maps.newHashMap();
+        HashMap<BlockPos, Set<UUID>> debug12 = Maps.newHashMap(); // MagmaCube - decompile fix
         this.beeInfosPerEntity.values().forEach(debug1 -> debug1.blacklistedHives.forEach(debug2 -> debug12.computeIfAbsent(debug2, debug0 -> Sets.newHashSet()).add(debug1.getUuid())));
         return debug12;
     }
 
     private void renderFlowerInfos() {
-        HashMap debug12 = Maps.newHashMap();
+        HashMap<BlockPos, Set<UUID>> debug12 = Maps.newHashMap(); // MagmaCube - decompile fix
         this.beeInfosPerEntity.values().stream().filter(BeeInfo::hasFlower).forEach(debug1 -> debug12.computeIfAbsent(debug1.flowerPos, debug0 -> Sets.newHashSet()).add(debug1.getUuid()));
         debug12.entrySet().forEach(debug0 -> {
             BlockPos debug1 = (BlockPos)debug0.getKey();
-            Set debug2 = (Set)debug0.getValue();
+            Set<UUID> debug2 = (Set)debug0.getValue(); // MagmaCube - decompile fix
             Set debug3 = debug2.stream().map(DebugEntityNameGenerator::getEntityName).collect(Collectors.toSet());
             int debug4 = 1;
             BeeDebugRenderer.renderTextOverPos(debug3.toString(), debug1, debug4++, -256);
@@ -263,7 +263,7 @@ implements DebugRenderer.SimpleDebugRenderer {
     }
 
     private Map<BlockPos, List<String>> getGhostHives() {
-        HashMap debug1 = Maps.newHashMap();
+        HashMap<BlockPos, List<String>> debug1 = Maps.newHashMap(); // MagmaCube - decompile fix
         for (BeeInfo debug3 : this.beeInfosPerEntity.values()) {
             if (debug3.hivePos == null || this.hives.containsKey(debug3.hivePos)) continue;
             debug1.computeIfAbsent(debug3.hivePos, debug0 -> Lists.newArrayList()).add(debug3.getName());
diff --git a/src/main/java/net/minecraft/client/renderer/debug/BrainDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/BrainDebugRenderer.java
index 7797187093eae1fed301a866eab7c3682ddfbaa1..38c2d91d3d6b519a92862af2521feab4fa0e05ee 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/BrainDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/BrainDebugRenderer.java
@@ -277,7 +277,7 @@ implements DebugRenderer.SimpleDebugRenderer {
     }
 
     private Map<BlockPos, List<String>> getGhostPois() {
-        HashMap debug1 = Maps.newHashMap();
+        HashMap<BlockPos, List<String>> debug1 = Maps.newHashMap(); // MagmaCube - decompile fix
         for (BrainDump debug3 : this.brainDumpsPerEntity.values()) {
             for (BlockPos debug5 : Iterables.concat(debug3.pois, debug3.potentialPois)) {
                 if (this.pois.containsKey(debug5)) continue;
diff --git a/src/main/java/net/minecraft/client/renderer/debug/CaveDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/CaveDebugRenderer.java
index 490afa0b7beacc946ef25293f1813c40136f0930..074b84ce8df57f56ea302d936feb18ed4110b6aa 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/CaveDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/CaveDebugRenderer.java
@@ -22,9 +22,9 @@ public class CaveDebugRenderer implements DebugRenderer.SimpleDebugRenderer
     private final List<BlockPos> startPoses;
     
     public CaveDebugRenderer() {
-        this.tunnelsList = (Map<BlockPos, BlockPos>)Maps.newHashMap();
-        this.thicknessMap = (Map<BlockPos, Float>)Maps.newHashMap();
-        this.startPoses = (List<BlockPos>)Lists.newArrayList();
+        this.tunnelsList = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.thicknessMap = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.startPoses = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     public void addTunnel(final BlockPos debug1, final List<BlockPos> debug2, final List<Float> debug3) {
diff --git a/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
index 78f552773bf883c9592fa77b1b8ed65a4d11a3aa..aef0db1aaa6024e65bd4a7ebc98f70c44131c787 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
@@ -42,11 +42,10 @@ implements DebugRenderer.SimpleDebugRenderer {
 
     @Override
     public void render(PoseStack debug1, MultiBufferSource debug2, double debug3, double debug5, double debug7) {
-        Object debug11;
         double debug9 = Util.getNanos();
         if (debug9 - this.lastUpdateTime > 3.0E9) {
             this.lastUpdateTime = debug9;
-            debug11 = this.minecraft.getSingleplayerServer();
+            IntegratedServer debug11 = this.minecraft.getSingleplayerServer(); // MagmaCube - decompile fix
             this.data = debug11 != null ? new ChunkData((IntegratedServer)debug11, debug3, debug7) : null;
         }
         if (this.data != null) {
@@ -55,7 +54,7 @@ implements DebugRenderer.SimpleDebugRenderer {
             RenderSystem.lineWidth(2.0f);
             RenderSystem.disableTexture();
             RenderSystem.depthMask(false);
-            debug11 = this.data.serverData.getNow(null);
+            Map<ChunkPos,String> debug11 = this.data.serverData.getNow(null); // MagmaCube - decompile fix
             double debug12 = this.minecraft.gameRenderer.getMainCamera().getPosition().y * 0.85;
             for (Map.Entry debug15 : this.data.clientData.entrySet()) {
                 ChunkPos debug16 = (ChunkPos)debug15.getKey();
@@ -63,7 +62,7 @@ implements DebugRenderer.SimpleDebugRenderer {
                 if (debug11 != null) {
                     debug17 = debug17 + (String)debug11.get(debug16);
                 }
-                String[] debug18 = debug17.split("Â¥n");
+                String[] debug18 = debug17.split("\n"); // MagmaCube - decompile fix
                 int debug19 = 0;
                 for (String debug23 : debug18) {
                     DebugRenderer.renderFloatingText(debug23, (debug16.x << 4) + 8, debug12 + (double)debug19, (debug16.z << 4) + 8, -1, 0.15f);
@@ -94,26 +93,26 @@ implements DebugRenderer.SimpleDebugRenderer {
                     LevelChunk debug17 = debug12.getChunk(debug13, debug14, false);
                     debug16 = debug16 + "Client: ";
                     if (debug17 == null) {
-                        debug16 = debug16 + "0n/aÂ¥n";
+                        debug16 = debug16 + "n/a\n"; // MagmaCube - decompile fix
                     } else {
                         debug16 = debug16 + (debug17.isEmpty() ? " E" : "");
-                        debug16 = debug16 + "Â¥n";
+                        debug16 = debug16 + "\n"; // MagmaCube - decompile fix
                     }
                     debug11.put((Object)debug15, (Object)debug16);
                 }
             }
             this.clientData = debug11.build();
             this.serverData = debug2.submit(() -> {
-                ServerLevel debug5 = debug2.getLevel(debug8);
-                if (debug5 == null) {
+                ServerLevel debug5l = debug2.getLevel(debug8); // MagmaCube - decompile fix
+                if (debug5l == null) { // MagmaCube - decompile fix
                     return ImmutableMap.of();
                 }
                 ImmutableMap.Builder debug6 = ImmutableMap.builder();
-                ServerChunkCache debug7 = debug5.getChunkSource();
-                for (int debug8 = debug9 - 12; debug8 <= debug9 + 12; ++debug8) {
-                    for (int debug9 = debug10 - 12; debug9 <= debug10 + 12; ++debug9) {
-                        ChunkPos debug10 = new ChunkPos(debug8, debug9);
-                        debug6.put((Object)debug10, (Object)("Server: " + debug7.getChunkDebugData(debug10)));
+                ServerChunkCache debug7l = debug5l.getChunkSource(); // MagmaCube - decompile fix
+                for (int debug8l = debug9 - 12; debug8l <= debug9 + 12; ++debug8l) { // MagmaCube - decompile fix
+                    for (int debug9l = debug10 - 12; debug9l <= debug10 + 12; ++debug9l) { // MagmaCube - decompile fix
+                        ChunkPos debug10l = new ChunkPos(debug8l, debug9l); // MagmaCube - decompile fix
+                        debug6.put((Object)debug10l, (Object)("Server: " + debug7l.getChunkDebugData(debug10l))); // MagmaCube - decompile fix
                     }
                 }
                 return debug6.build();
diff --git a/src/main/java/net/minecraft/client/renderer/debug/GameTestDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/GameTestDebugRenderer.java
index f05fcb707c36280131b34a3828de413b64047d99..e4cbb688809279f14b5bab12ec0849c6f3f198e4 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/GameTestDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/GameTestDebugRenderer.java
@@ -15,7 +15,7 @@ public class GameTestDebugRenderer implements DebugRenderer.SimpleDebugRenderer
     private final Map<BlockPos, Marker> markers;
     
     public GameTestDebugRenderer() {
-        this.markers = (Map<BlockPos, Marker>)Maps.newHashMap();
+        this.markers = Maps.newHashMap(); // MagmaCube - decompile fix
     }
     
     public void addMarker(final BlockPos debug1, final int debug2, final String debug3, final int debug4) {
@@ -30,7 +30,7 @@ public class GameTestDebugRenderer implements DebugRenderer.SimpleDebugRenderer
     @Override
     public void render(final PoseStack debug1, final MultiBufferSource debug2, final double debug3, final double debug5, final double debug7) {
         final long debug8 = Util.getMillis();
-        this.markers.entrySet().removeIf(debug2 -> debug8 > debug2.getValue().removeAtTime);
+        this.markers.entrySet().removeIf(debug2l -> debug8 > debug2l.getValue().removeAtTime); // MagmaCube - decompile fix
         this.markers.forEach(this::renderMarker);
     }
     
diff --git a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
index cb63007254a3020461b13f7767fc5bf506bc8886..bc9712baa88f91814cda9b491c78777dc5f523fd 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
@@ -44,14 +44,14 @@ implements DebugRenderer.SimpleDebugRenderer {
         RenderSystem.disableTexture();
         BlockPos debug10 = new BlockPos(debug9.getPosition().x, 0.0, debug9.getPosition().z);
         this.goalSelectors.forEach((debug1, debug2) -> {
-            for (int debug3 = 0; debug3 < debug2.size(); ++debug3) {
-                DebugGoal debug4 = (DebugGoal)debug2.get(debug3);
+            for (int debug3l = 0; debug3l < debug2.size(); ++debug3l) { // MagmaCube - decompile fix
+                DebugGoal debug4 = (DebugGoal)debug2.get(debug3l); // MagmaCube - decompile fix
                 if (!debug10.closerThan(debug4.pos, 160.0)) continue;
-                double debug5 = (double)debug4.pos.getX() + 0.5;
-                double debug7 = (double)debug4.pos.getY() + 2.0 + (double)debug3 * 0.25;
-                double debug9 = (double)debug4.pos.getZ() + 0.5;
+                double debug5l = (double)debug4.pos.getX() + 0.5; // MagmaCube - decompile fix
+                double debug7l = (double)debug4.pos.getY() + 2.0 + (double)debug3l * 0.25; // MagmaCube - decompile fix
+                double debug9l = (double)debug4.pos.getZ() + 0.5; // MagmaCube - decompile fix
                 int debug11 = debug4.isRunning ? -16711936 : -3355444;
-                DebugRenderer.renderFloatingText(debug4.name, debug5, debug7, debug9, debug11);
+                DebugRenderer.renderFloatingText(debug4.name, debug5l, debug7l, debug9l, debug11); // MagmaCube - decompile fix
             }
         });
         RenderSystem.enableDepthTest();
diff --git a/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java
index cc58307b2ad2a2262391f19d502b192bf33dd40b..25bee9af2983c12ec50ff717de94601bf6df4bfb 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java
@@ -24,9 +24,9 @@ public class PathfindingRenderer implements DebugRenderer.SimpleDebugRenderer
     private final Map<Integer, Long> creationMap;
     
     public PathfindingRenderer() {
-        this.pathMap = (Map<Integer, Path>)Maps.newHashMap();
-        this.pathMaxDist = (Map<Integer, Float>)Maps.newHashMap();
-        this.creationMap = (Map<Integer, Long>)Maps.newHashMap();
+        this.pathMap = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.pathMaxDist = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.creationMap = Maps.newHashMap(); // MagmaCube - decompile fix
     }
     
     public void addPath(final int debug1, final Path debug2, final float debug3) {
diff --git a/src/main/java/net/minecraft/client/renderer/debug/VillageSectionsDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/VillageSectionsDebugRenderer.java
index d86e1c3351e4db551bf7200159327d48abd40420..c7ad763d123359abad7b7f47ba9e8c81dee46342 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/VillageSectionsDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/VillageSectionsDebugRenderer.java
@@ -14,7 +14,7 @@ public class VillageSectionsDebugRenderer implements DebugRenderer.SimpleDebugRe
     private final Set<SectionPos> villageSections;
     
     VillageSectionsDebugRenderer() {
-        this.villageSections = (Set<SectionPos>)Sets.newHashSet();
+        this.villageSections = Sets.newHashSet(); // MagmaCube - decompile fix
     }
     
     @Override
@@ -44,9 +44,9 @@ public class VillageSectionsDebugRenderer implements DebugRenderer.SimpleDebugRe
     
     private void doRender(final double debug1, final double debug3, final double debug5) {
         final BlockPos debug6 = new BlockPos(debug1, debug3, debug5);
-        this.villageSections.forEach(debug1 -> {
-            if (debug6.closerThan(debug1.center(), 60.0)) {
-                highlightVillageSection(debug1);
+        this.villageSections.forEach(debug1k -> { // MagmaCube - decompile fix
+            if (debug6.closerThan(debug1k.center(), 60.0)) { // MagmaCube - decompile fix
+                highlightVillageSection(debug1k); // MagmaCube - decompile fix
             }
         });
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/AbstractZombieRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/AbstractZombieRenderer.java
index 0e9e9677c403b9e563b1218027ffa707700b32cd..83e7ba976af6bae4b90bdfe593fe3d8824de4a7e 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/AbstractZombieRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/AbstractZombieRenderer.java
@@ -16,7 +16,7 @@ public abstract class AbstractZombieRenderer<T extends Zombie, M extends ZombieM
     
     protected AbstractZombieRenderer(final EntityRenderDispatcher debug1, final M debug2, final M debug3, final M debug4) {
         super(debug1, debug2, 0.5f);
-        this.addLayer((RenderLayer<T, M>)new HumanoidArmorLayer((RenderLayerParent<LivingEntity, HumanoidModel>)this, debug3, debug4));
+        this.addLayer((RenderLayer<T, M>)new HumanoidArmorLayer(this, debug3, debug4)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ArmorStandRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ArmorStandRenderer.java
index 1caa2e6ebd668bdf51e93e989109513a7de288a2..b19e5a8bc97e38e207be306a0720381925f6e7af 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ArmorStandRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ArmorStandRenderer.java
@@ -24,7 +24,7 @@ public class ArmorStandRenderer extends LivingEntityRenderer<ArmorStand, ArmorSt
     
     public ArmorStandRenderer(final EntityRenderDispatcher debug1) {
         super(debug1, new ArmorStandModel(), 0.0f);
-        this.addLayer((RenderLayer<ArmorStand, ArmorStandArmorModel>)new HumanoidArmorLayer((RenderLayerParent<LivingEntity, HumanoidModel>)this, new ArmorStandArmorModel(0.5f), new ArmorStandArmorModel(1.0f)));
+        this.addLayer((RenderLayer<ArmorStand, ArmorStandArmorModel>)new HumanoidArmorLayer(this, new ArmorStandArmorModel(0.5f), new ArmorStandArmorModel(1.0f))); // MagmaCube - decompile fix
         this.addLayer(new ItemInHandLayer<ArmorStand, ArmorStandArmorModel>(this));
         this.addLayer(new ElytraLayer<ArmorStand, ArmorStandArmorModel>(this));
         this.addLayer(new CustomHeadLayer<ArmorStand, ArmorStandArmorModel>(this));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EndermanRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/EndermanRenderer.java
index 1722ce0f713d111f6f6d774d1dd872486b816f89..26c687d980137739847f73d8c6b83d8e4e062b54 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EndermanRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EndermanRenderer.java
@@ -21,16 +21,16 @@ public class EndermanRenderer extends MobRenderer<EnderMan, EndermanModel<EnderM
     private final Random random;
     
     public EndermanRenderer(final EntityRenderDispatcher debug1) {
-        super(debug1, new EndermanModel(0.0f), 0.5f);
+        super(debug1, new EndermanModel<>(0.0f), 0.5f); // MagmaCube - decompile fix
         this.random = new Random();
-        this.addLayer((RenderLayer<EnderMan, EndermanModel<EnderMan>>)new EnderEyesLayer((RenderLayerParent<LivingEntity, EndermanModel<LivingEntity>>)this));
+        this.addLayer(new EnderEyesLayer<>(this)); // MagmaCube - decompile fix
         this.addLayer(new CarriedBlockLayer(this));
     }
     
     @Override
     public void render(final EnderMan debug1, final float debug2, final float debug3, final PoseStack debug4, final MultiBufferSource debug5, final int debug6) {
         final BlockState debug7 = debug1.getCarriedBlock();
-        final EndermanModel<EnderMan> debug8 = ((LivingEntityRenderer<T, EndermanModel<EnderMan>>)this).getModel();
+        final EndermanModel<EnderMan> debug8 = this.getModel(); // MagmaCube - decompile fix
         debug8.carrying = (debug7 != null);
         debug8.creepy = debug1.isCreepy();
         super.render(debug1, debug2, debug3, debug4, debug5, debug6);
@@ -41,7 +41,7 @@ public class EndermanRenderer extends MobRenderer<EnderMan, EndermanModel<EnderM
             final double debug3 = 0.02;
             return new Vec3(this.random.nextGaussian() * 0.02, 0.0, this.random.nextGaussian() * 0.02);
         }
-        return super.getRenderOffset((T)debug1, debug2);
+        return super.getRenderOffset(debug1, debug2); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
index 9df7fd019447473c143281edeb5a622594837244..cfb63cd2186227f2186f4b7e7daeb8b367e51917 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
@@ -296,11 +296,11 @@ public class EntityRenderDispatcher {
             String debug2 = ((AbstractClientPlayer)debug1).getModelName();
             PlayerRenderer debug3 = this.playerRenderers.get(debug2);
             if (debug3 != null) {
-                return debug3;
+                return (EntityRenderer<? super T>) debug3; // MagmaCube - decompile fix
             }
-            return this.defaultPlayerRenderer;
+            return (EntityRenderer<? super T>) this.defaultPlayerRenderer; // MagmaCube - decompile fix
         }
-        return this.renderers.get(debug1.getType());
+        return (EntityRenderer<? super T>) this.renderers.get(debug1.getType()); // MagmaCube - decompile fix
     }
 
     public void prepare(Level debug1, Camera debug2, Entity debug3) {
@@ -327,12 +327,12 @@ public class EntityRenderDispatcher {
     }
 
     public <E extends Entity> boolean shouldRender(E debug1, Frustum debug2, double debug3, double debug5, double debug7) {
-        EntityRenderer<E> debug9 = this.getRenderer(debug1);
+        EntityRenderer<E> debug9 = (EntityRenderer<E>) this.getRenderer(debug1); // MagmaCube - decompile fix
         return debug9.shouldRender(debug1, debug2, debug3, debug5, debug7);
     }
 
     public <E extends Entity> void render(E debug1, double debug2, double debug4, double debug6, float debug8, float debug9, PoseStack debug10, MultiBufferSource debug11, int debug12) {
-        EntityRenderer<E> debug13 = this.getRenderer(debug1);
+        EntityRenderer<E> debug13 = (EntityRenderer<E>) this.getRenderer(debug1); // MagmaCube - decompile fix
         try {
             double debug21;
             float debug23;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
index 1492101edb2e89c148ae2203fc123f4c1a8c9b3d..57b9300bd867a85f7c9118999594416c2d7894cf 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
@@ -62,7 +62,7 @@ import net.minecraft.world.level.block.StainedGlassPaneBlock;
 public class ItemRenderer
 implements ResourceManagerReloadListener {
     public static final ResourceLocation ENCHANT_GLINT_LOCATION = new ResourceLocation("textures/misc/enchanted_item_glint.png");
-    private static final Set<Item> IGNORED = Sets.newHashSet((Object[])new Item[]{Items.AIR});
+    private static final Set<Item> IGNORED = Sets.newHashSet(new Item[]{Items.AIR}); // MagmaCube - decompile fix
     public float blitOffset;
     private final ItemModelShaper itemModelShaper;
     private final TextureManager textureManager;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/MobRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/MobRenderer.java
index 42ef51c753f26d926373f04293d7892bd115280d..4bc35f329e1aa3b9b6f506ccb90d6eaa47839a67 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/MobRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/MobRenderer.java
@@ -68,7 +68,7 @@ public abstract class MobRenderer<T extends Mob, M extends EntityModel<T>> exten
         final BlockPos debug23 = new BlockPos(debug1.getEyePosition(debug2));
         final BlockPos debug24 = new BlockPos(debug5.getEyePosition(debug2));
         final int debug25 = this.getBlockLightLevel((T)debug1, debug23);
-        final int debug26 = this.entityRenderDispatcher.getRenderer(debug5).getBlockLightLevel((Object)debug5, debug24);
+        final int debug26 = this.entityRenderDispatcher.getRenderer(debug5).getBlockLightLevel(debug5, debug24); // MagmaCube - decompile fix
         final int debug27 = debug1.level.getBrightness(LightLayer.SKY, debug23);
         final int debug28 = debug1.level.getBrightness(LightLayer.SKY, debug24);
         renderSide(debug18, debug19, debug14, debug15, debug16, debug25, debug26, debug27, debug28, 0.025f, 0.025f, debug21, debug22);
diff --git a/src/main/java/net/minecraft/client/renderer/entity/PhantomRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/PhantomRenderer.java
index f0f98880a1a62b52319254d7998dd9da177ee3c2..b751138217908614246ebc8a06facfbe518aaa47 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/PhantomRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/PhantomRenderer.java
@@ -16,7 +16,7 @@ public class PhantomRenderer extends MobRenderer<Phantom, PhantomModel<Phantom>>
     
     public PhantomRenderer(final EntityRenderDispatcher debug1) {
         super(debug1, new PhantomModel(), 0.75f);
-        this.addLayer((RenderLayer<Phantom, PhantomModel<Phantom>>)new PhantomEyesLayer((RenderLayerParent<Entity, PhantomModel<Entity>>)this));
+        this.addLayer(new PhantomEyesLayer<>(this)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/renderer/entity/PiglinRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/PiglinRenderer.java
index eca539a31b19349bc7935f173a280f2d6ea5873c..f1ab3b5bd870fedfda36a69ab708a12d77a7f3d5 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/PiglinRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/PiglinRenderer.java
@@ -19,7 +19,7 @@ public class PiglinRenderer extends HumanoidMobRenderer<Mob, PiglinModel<Mob>>
     
     public PiglinRenderer(final EntityRenderDispatcher debug1, final boolean debug2) {
         super(debug1, createModel(debug2), 0.5f, 1.0019531f, 1.0f, 1.0019531f);
-        this.addLayer((RenderLayer<Mob, PiglinModel<Mob>>)new HumanoidArmorLayer((RenderLayerParent<LivingEntity, HumanoidModel>)this, new HumanoidModel(0.5f), new HumanoidModel(1.02f)));
+        this.addLayer(new HumanoidArmorLayer<>(this, new HumanoidModel<>(0.5f), new HumanoidModel<>(1.02f))); // MagmaCube - decompile fix
     }
     
     private static PiglinModel<Mob> createModel(final boolean debug0) {
@@ -45,6 +45,6 @@ public class PiglinRenderer extends HumanoidMobRenderer<Mob, PiglinModel<Mob>>
     }
     
     static {
-        resourceLocations = (Map)ImmutableMap.of((Object)EntityType.PIGLIN, (Object)new ResourceLocation("textures/entity/piglin/piglin.png"), (Object)EntityType.ZOMBIFIED_PIGLIN, (Object)new ResourceLocation("textures/entity/piglin/zombified_piglin.png"), (Object)EntityType.PIGLIN_BRUTE, (Object)new ResourceLocation("textures/entity/piglin/piglin_brute.png"));
+        resourceLocations = ImmutableMap.of(EntityType.PIGLIN, new ResourceLocation("textures/entity/piglin/piglin.png"), EntityType.ZOMBIFIED_PIGLIN, new ResourceLocation("textures/entity/piglin/zombified_piglin.png"), EntityType.PIGLIN_BRUTE, new ResourceLocation("textures/entity/piglin/piglin_brute.png")); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/PillagerRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/PillagerRenderer.java
index 09a2bdc397d96b3a93b7a97e2218b6647ee9a813..a6757275765834043c57b23733aa1b02d741020e 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/PillagerRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/PillagerRenderer.java
@@ -13,8 +13,8 @@ public class PillagerRenderer extends IllagerRenderer<Pillager>
     private static final ResourceLocation PILLAGER;
     
     public PillagerRenderer(final EntityRenderDispatcher debug1) {
-        super(debug1, new IllagerModel(0.0f, 0.0f, 64, 64), 0.5f);
-        this.addLayer((RenderLayer<T, IllagerModel<T>>)new ItemInHandLayer<AbstractIllager, IllagerModel<T>>(this));
+        super(debug1, new IllagerModel<>(0.0f, 0.0f, 64, 64), 0.5f); // MagmaCube - decompile fix
+        this.addLayer(new ItemInHandLayer<>(this)); // MagmaCube - decompile fix
     }
     
     public ResourceLocation getTextureLocation(final Pillager debug1) {
diff --git a/src/main/java/net/minecraft/client/renderer/entity/SkeletonRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/SkeletonRenderer.java
index 1daacc98443b65624d4d0f4becf8ba38692b7d4d..9c80fba88e649f96344b6c8ee347b9176c650c43 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/SkeletonRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/SkeletonRenderer.java
@@ -16,7 +16,7 @@ public class SkeletonRenderer extends HumanoidMobRenderer<AbstractSkeleton, Skel
     
     public SkeletonRenderer(final EntityRenderDispatcher debug1) {
         super(debug1, new SkeletonModel(), 0.5f);
-        this.addLayer((RenderLayer<AbstractSkeleton, SkeletonModel<AbstractSkeleton>>)new HumanoidArmorLayer((RenderLayerParent<LivingEntity, HumanoidModel>)this, new SkeletonModel(0.5f, true), new SkeletonModel(1.0f, true)));
+        this.addLayer(new HumanoidArmorLayer(this, new SkeletonModel(0.5f, true), new SkeletonModel(1.0f, true))); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ThrownItemRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ThrownItemRenderer.java
index 13918d1ce9aa2c096753cdb40f976a17f23027b3..3384e3d0c953143d3f178fc516227a6f66d6ac5e 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ThrownItemRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ThrownItemRenderer.java
@@ -4,6 +4,7 @@ import net.minecraft.client.renderer.texture.TextureAtlas;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.renderer.texture.OverlayTexture;
 import net.minecraft.client.renderer.block.model.ItemTransforms;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.projectile.ItemSupplier;
 import com.mojang.math.Vector3f;
 import net.minecraft.client.renderer.MultiBufferSource;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/VindicatorRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/VindicatorRenderer.java
index 509d6c14917cd3899a0225dc0498e5cf30390ae3..053bdfaf8fd9d5b352fe48ec69eb85ae785ac45f 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/VindicatorRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/VindicatorRenderer.java
@@ -16,7 +16,7 @@ public class VindicatorRenderer extends IllagerRenderer<Vindicator>
     
     public VindicatorRenderer(final EntityRenderDispatcher debug1) {
         super(debug1, new IllagerModel(0.0f, 0.0f, 64, 64), 0.5f);
-        this.addLayer((RenderLayer<T, IllagerModel<T>>)new ItemInHandLayer<Vindicator, IllagerModel<Vindicator>>(this) {
+        this.addLayer(new ItemInHandLayer<Vindicator, IllagerModel<Vindicator>>(this) { // MagmaCube - decompile fix
             @Override
             public void render(final PoseStack debug1, final MultiBufferSource debug2, final int debug3, final Vindicator debug4, final float debug5, final float debug6, final float debug7, final float debug8, final float debug9, final float debug10) {
                 if (debug4.isAggressive()) {
diff --git a/src/main/java/net/minecraft/client/renderer/entity/WitchRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/WitchRenderer.java
index 2a1898cc6abcb305b37a73d082afd2331234e968..a4bf11fd6630150e0e919ebe894dde7f718387cc 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/WitchRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/WitchRenderer.java
@@ -17,7 +17,7 @@ public class WitchRenderer extends MobRenderer<Witch, WitchModel<Witch>>
     
     public WitchRenderer(final EntityRenderDispatcher debug1) {
         super(debug1, new WitchModel(0.0f), 0.5f);
-        this.addLayer((RenderLayer<Witch, WitchModel<Witch>>)new WitchItemLayer((RenderLayerParent<LivingEntity, WitchModel<LivingEntity>>)this));
+        this.addLayer((RenderLayer<Witch, WitchModel<Witch>>)new WitchItemLayer(this)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/Deadmau5EarsLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/Deadmau5EarsLayer.java
index f14060abee0f0051f1b9dd29048f187149ea8b0e..523f8739a4955df49bd5f424aa4ff6c04f47f702 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/Deadmau5EarsLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/Deadmau5EarsLayer.java
@@ -38,7 +38,7 @@ public class Deadmau5EarsLayer extends RenderLayer<AbstractClientPlayer, PlayerM
             debug1.mulPose(Vector3f.YP.rotationDegrees(-debug14));
             final float debug16 = 1.3333334f;
             debug1.scale(1.3333334f, 1.3333334f, 1.3333334f);
-            ((RenderLayer<T, PlayerModel>)this).getParentModel().renderEars(debug1, debug11, debug3, debug12);
+            this.getParentModel().renderEars(debug1, debug11, debug3, debug12); // MagmaCube - decompile fix
             debug1.popPose();
         }
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/EnergySwirlLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/EnergySwirlLayer.java
index 61ca6d0c583712f33431b74876d11ba7bc74e904..3448eb97a773082b69548f626b7d1b5b589de530 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/EnergySwirlLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/EnergySwirlLayer.java
@@ -4,13 +4,14 @@ import net.minecraft.resources.ResourceLocation;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import net.minecraft.client.renderer.texture.OverlayTexture;
 import net.minecraft.client.renderer.RenderType;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.PowerableMob;
 import net.minecraft.client.renderer.MultiBufferSource;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.client.renderer.entity.RenderLayerParent;
 import net.minecraft.client.model.EntityModel;
 
-public abstract class EnergySwirlLayer<T extends Entity, M extends EntityModel<T>> extends RenderLayer<T, M>
+public abstract class EnergySwirlLayer<T extends Entity, M extends EntityModel<T>> extends RenderLayer<T, M> // MagmaCube - decompile fix
 {
     public EnergySwirlLayer(final RenderLayerParent<T, M> debug1) {
         super(debug1);
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/HorseArmorLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/HorseArmorLayer.java
index 774b60ca3949b358e1695814a0130c675ae28c53..c28a73814b5b24efca3fb5295eb1a4ffdfe25c6c 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/HorseArmorLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/HorseArmorLayer.java
@@ -30,7 +30,7 @@ public class HorseArmorLayer extends RenderLayer<Horse, HorseModel<Horse>>
             return;
         }
         final HorseArmorItem debug12 = (HorseArmorItem)debug11.getItem();
-        ((RenderLayer<T, HorseModel<Horse>>)this).getParentModel().copyPropertiesTo(this.model);
+        (this).getParentModel().copyPropertiesTo(this.model); // MagmaCube - decompile fix
         this.model.prepareMobModel(debug4, debug5, debug6, debug7);
         this.model.setupAnim(debug4, debug5, debug6, debug8, debug9, debug10);
         float debug14;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/HorseMarkingLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/HorseMarkingLayer.java
index 7c29689e613f341563086e9c131fab761a700158..c2c46dd98db01e581dd8e3118bab4e56a3ce523a 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/HorseMarkingLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/HorseMarkingLayer.java
@@ -32,7 +32,7 @@ public class HorseMarkingLayer extends RenderLayer<Horse, HorseModel<Horse>>
             return;
         }
         final VertexConsumer debug12 = debug2.getBuffer(RenderType.entityTranslucent(debug11));
-        ((RenderLayer<T, HorseModel>)this).getParentModel().renderToBuffer(debug1, debug12, debug3, LivingEntityRenderer.getOverlayCoords(debug4, 0.0f), 1.0f, 1.0f, 1.0f, 1.0f);
+        (this).getParentModel().renderToBuffer(debug1, debug12, debug3, LivingEntityRenderer.getOverlayCoords(debug4, 0.0f), 1.0f, 1.0f, 1.0f, 1.0f); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/IronGolemCrackinessLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/IronGolemCrackinessLayer.java
index 21769930bb7c242f5eef595cbd241b8fc0988d7a..530772294620d72a562ad4b6764036f972216fb1 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/IronGolemCrackinessLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/IronGolemCrackinessLayer.java
@@ -29,7 +29,7 @@ public class IronGolemCrackinessLayer extends RenderLayer<IronGolem, IronGolemMo
             return;
         }
         final ResourceLocation debug12 = IronGolemCrackinessLayer.resourceLocations.get(debug11);
-        RenderLayer.renderColoredCutoutModel(((RenderLayer<T, EntityModel<IronGolem>>)this).getParentModel(), debug12, debug1, debug2, debug3, debug4, 1.0f, 1.0f, 1.0f);
+        RenderLayer.renderColoredCutoutModel(this.getParentModel(), debug12, debug1, debug2, debug3, debug4, 1.0f, 1.0f, 1.0f); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/LlamaDecorLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/LlamaDecorLayer.java
index 6b22577df39d0a2d8482becc5280011abad41259..8e2a139b88ae2ca9d7c3f47db64fa8192a9ac45b 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/LlamaDecorLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/LlamaDecorLayer.java
@@ -37,7 +37,7 @@ public class LlamaDecorLayer extends RenderLayer<Llama, LlamaModel<Llama>>
             }
             debug12 = LlamaDecorLayer.TRADER_LLAMA;
         }
-        ((RenderLayer<T, LlamaModel<Llama>>)this).getParentModel().copyPropertiesTo(this.model);
+        (this).getParentModel().copyPropertiesTo(this.model); // MagmaCube - decompile fix
         this.model.setupAnim(debug4, debug5, debug6, debug8, debug9, debug10);
         final VertexConsumer debug13 = debug2.getBuffer(RenderType.entityCutoutNoCull(debug12));
         this.model.renderToBuffer(debug1, debug13, debug3, OverlayTexture.NO_OVERLAY, 1.0f, 1.0f, 1.0f, 1.0f);
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/ParrotOnShoulderLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/ParrotOnShoulderLayer.java
index e261fcbd7668cd1a0cb73a138600540698ce4b04..db6139e799610d0f4026b1869d04493f9089e689 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/ParrotOnShoulderLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/ParrotOnShoulderLayer.java
@@ -30,13 +30,11 @@ public class ParrotOnShoulderLayer<T extends Player> extends RenderLayer<T, Play
     
     private void render(final PoseStack debug1, final MultiBufferSource debug2, final int debug3, final T debug4, final float debug5, final float debug6, final float debug7, final float debug8, final boolean debug9) {
         final CompoundTag debug10 = debug9 ? debug4.getShoulderEntityLeft() : debug4.getShoulderEntityRight();
-        final CompoundTag compoundTag;
-        final VertexConsumer debug11;
-        EntityType.byString(debug10.getString("id")).filter(debug0 -> debug0 == EntityType.PARROT).ifPresent(debug11 -> {
+        EntityType.byString(debug10.getString("id")).filter(debug0 -> debug0 == EntityType.PARROT).ifPresent(debug11l -> { // MagmaCube - decompile fix
             debug1.pushPose();
             debug1.translate(debug9 ? 0.4000000059604645 : -0.4000000059604645, debug4.isCrouching() ? -1.2999999523162842 : -1.5, 0.0);
-            debug11 = debug2.getBuffer(this.model.renderType(ParrotRenderer.PARROT_LOCATIONS[compoundTag.getInt("Variant")]));
-            this.model.renderOnShoulder(debug1, debug11, debug3, OverlayTexture.NO_OVERLAY, debug5, debug6, debug7, debug8, debug4.tickCount);
+            VertexConsumer debug11 = debug2.getBuffer(this.model.renderType(ParrotRenderer.PARROT_LOCATIONS[debug10.getInt("Variant")])); // MagmaCube - decompile fix
+            this.model.renderOnShoulder(debug1, debug11, debug3, OverlayTexture.NO_OVERLAY, debug5, debug6, debug7, debug8, debug4.tickCount); // MagmaCube - decompile fix
             debug1.popPose();
         });
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/SaddleLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/SaddleLayer.java
index b9accd6cc9e163e9d0ae0e0f97118400bd925ba6..b6e883f1c0d547d7509cddb76d06da239f2806de 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/SaddleLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/SaddleLayer.java
@@ -3,6 +3,7 @@ package net.minecraft.client.renderer.entity.layers;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import net.minecraft.client.renderer.texture.OverlayTexture;
 import net.minecraft.client.renderer.RenderType;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.Saddleable;
 import net.minecraft.client.renderer.MultiBufferSource;
 import com.mojang.blaze3d.vertex.PoseStack;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/SheepFurLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/SheepFurLayer.java
index 00948ef6e9ee8e106c9538e407d73de3c23a1075..6b848d5b05923e5bd7e0c81aed022c5f4155f5d0 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/SheepFurLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/SheepFurLayer.java
@@ -48,7 +48,7 @@ public class SheepFurLayer extends RenderLayer<Sheep, SheepModel<Sheep>>
             debug20 = debug22[1];
             debug21 = debug22[2];
         }
-        RenderLayer.coloredCutoutModelCopyLayerRender(((RenderLayer<T, EntityModel<Sheep>>)this).getParentModel(), this.model, SheepFurLayer.SHEEP_FUR_LOCATION, debug1, debug2, debug3, debug4, debug5, debug6, debug8, debug9, debug10, debug7, debug19, debug20, debug21);
+        RenderLayer.coloredCutoutModelCopyLayerRender((this).getParentModel(), this.model, SheepFurLayer.SHEEP_FUR_LOCATION, debug1, debug2, debug3, debug4, debug5, debug6, debug8, debug9, debug10, debug7, debug19, debug20, debug21); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/StrayClothingLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/StrayClothingLayer.java
index fef19029556a622b1cab551eafed9c8b86bcf833..c20616b6f059b88147c9149930bbf3a5c8423140 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/StrayClothingLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/StrayClothingLayer.java
@@ -7,6 +7,7 @@ import net.minecraft.client.renderer.entity.RenderLayerParent;
 import net.minecraft.client.model.SkeletonModel;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.EntityModel;
+import net.minecraft.world.entity.Mob;
 
 public class StrayClothingLayer<T extends Mob, M extends EntityModel<T>> extends RenderLayer<T, M>
 {
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/TropicalFishPatternLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/TropicalFishPatternLayer.java
index e4e3d58078224daa84fc23354c3a4f8f64ce6fa6..7cf62f692ed9a5a88a0b024dae4a2498a2333224 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/TropicalFishPatternLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/TropicalFishPatternLayer.java
@@ -24,6 +24,6 @@ public class TropicalFishPatternLayer extends RenderLayer<TropicalFish, EntityMo
     public void render(final PoseStack debug1, final MultiBufferSource debug2, final int debug3, final TropicalFish debug4, final float debug5, final float debug6, final float debug7, final float debug8, final float debug9, final float debug10) {
         final EntityModel<TropicalFish> debug11 = (EntityModel<TropicalFish>)((debug4.getBaseVariant() == 0) ? this.modelA : this.modelB);
         final float[] debug12 = debug4.getPatternColor();
-        RenderLayer.coloredCutoutModelCopyLayerRender(((RenderLayer<T, EntityModel<TropicalFish>>)this).getParentModel(), debug11, debug4.getPatternTextureLocation(), debug1, debug2, debug3, debug4, debug5, debug6, debug8, debug9, debug10, debug7, debug12[0], debug12[1], debug12[2]);
+        RenderLayer.coloredCutoutModelCopyLayerRender(this.getParentModel(), debug11, debug4.getPatternTextureLocation(), debug1, debug2, debug3, debug4, debug5, debug6, debug8, debug9, debug10, debug7, debug12[0], debug12[1], debug12[2]); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java
index 1d12284c0af87c058ea00fdc58bc239786eac207..8f2984e00c6d13771b2a1a706acba44814043337 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java
@@ -2,12 +2,14 @@ package net.minecraft.client.renderer.entity.layers;
 
 import net.minecraft.Util;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import net.minecraft.client.model.EntityModel;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.server.packs.resources.Resource;
 import java.io.IOException;
 import net.minecraft.server.packs.metadata.MetadataSectionSerializer;
 import net.minecraft.core.DefaultedRegistry;
+import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.npc.VillagerData;
 import net.minecraft.util.Mth;
 import net.minecraft.client.model.VillagerHeadModel;
@@ -27,7 +29,7 @@ import net.minecraft.resources.ResourceLocation;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import net.minecraft.server.packs.resources.ResourceManagerReloadListener;
 
-public class VillagerProfessionLayer<T extends LivingEntity, M extends EntityModel> extends RenderLayer<T, M> implements ResourceManagerReloadListener
+public class VillagerProfessionLayer<T extends LivingEntity, M extends EntityModel<T>> extends RenderLayer<T, M> implements ResourceManagerReloadListener // MagmaCube - decompile fix
 {
     private static final Int2ObjectMap<ResourceLocation> LEVEL_LOCATIONS;
     private final Object2ObjectMap<VillagerType, VillagerMetaDataSection.Hat> typeHatCache;
@@ -74,22 +76,18 @@ public class VillagerProfessionLayer<T extends LivingEntity, M extends EntityMod
     }
     
     public <K> VillagerMetaDataSection.Hat getHatData(final Object2ObjectMap<K, VillagerMetaDataSection.Hat> debug1, final String debug2, final DefaultedRegistry<K> debug3, final K debug4) {
-        Resource debug5;
-        VillagerMetaDataSection debug6;
-        final VillagerMetaDataSection.Hat hat;
-        final Throwable t2;
-        return (VillagerMetaDataSection.Hat)debug1.computeIfAbsent((Object)debug4, debug4 -> {
+        return (VillagerMetaDataSection.Hat)debug1.computeIfAbsent(debug4, debug4l -> { // MagmaCube - decompile fix
+            Throwable t2 = null; // MagmaCube - decompile fix
             try {
-                debug5 = this.resourceManager.getResource(this.getResourceLocation(debug2, debug3.getKey(debug4)));
+                Resource debug5 = this.resourceManager.getResource(this.getResourceLocation(debug2, debug3.getKey(debug4l))); // MagmaCube - decompile fix
                 try {
-                    debug6 = debug5.getMetadata((MetadataSectionSerializer<VillagerMetaDataSection>)VillagerMetaDataSection.SERIALIZER);
+                    VillagerMetaDataSection debug6 = debug5.getMetadata((MetadataSectionSerializer<VillagerMetaDataSection>)VillagerMetaDataSection.SERIALIZER); // MagmaCube - decompile fix
                     if (debug6 != null) {
-                        debug6.getHat();
-                        return hat;
+                        return debug6.getHat(); // MagmaCube - decompile fix
                     }
                 }
                 catch (Throwable t) {
-                    throw t;
+                    t2 = t; // MagmaCube - decompile fix
                 }
                 finally {
                     if (debug5 != null) {
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/WolfCollarLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/WolfCollarLayer.java
index ffbfc64956d26a5385a0fbeafa5c3929a5d9fcfa..a82b5a4532ece4905057ddd437d687e2215d75d2 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/WolfCollarLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/WolfCollarLayer.java
@@ -23,7 +23,7 @@ public class WolfCollarLayer extends RenderLayer<Wolf, WolfModel<Wolf>>
             return;
         }
         final float[] debug11 = debug4.getCollarColor().getTextureDiffuseColors();
-        RenderLayer.renderColoredCutoutModel(((RenderLayer<T, EntityModel<Wolf>>)this).getParentModel(), WolfCollarLayer.WOLF_COLLAR_LOCATION, debug1, debug2, debug3, debug4, debug11[0], debug11[1], debug11[2]);
+        RenderLayer.renderColoredCutoutModel((this).getParentModel(), WolfCollarLayer.WOLF_COLLAR_LOCATION, debug1, debug2, debug3, debug4, debug11[0], debug11[1], debug11[2]); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/client/renderer/entity/player/PlayerRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/player/PlayerRenderer.java
index 2a41d3d6aca44c6451367c728a5853d33f40d16f..59b148ad0fbeb7b56943dc5841b890326814a41e 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/player/PlayerRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/player/PlayerRenderer.java
@@ -50,15 +50,15 @@ public class PlayerRenderer extends LivingEntityRenderer<AbstractClientPlayer, P
     
     public PlayerRenderer(final EntityRenderDispatcher debug1, final boolean debug2) {
         super(debug1, new PlayerModel(0.0f, debug2), 0.5f);
-        this.addLayer((RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>)new HumanoidArmorLayer((RenderLayerParent<LivingEntity, HumanoidModel>)this, new HumanoidModel(0.5f), new HumanoidModel(1.0f)));
+        this.addLayer((RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>)new HumanoidArmorLayer(this, new HumanoidModel(0.5f), new HumanoidModel(1.0f))); // MagmaCube - decompile fix
         this.addLayer(new ItemInHandLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>(this));
         this.addLayer(new ArrowLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>(this));
         this.addLayer(new Deadmau5EarsLayer(this));
         this.addLayer(new CapeLayer(this));
         this.addLayer(new CustomHeadLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>(this));
         this.addLayer(new ElytraLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>(this));
-        this.addLayer((RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>)new ParrotOnShoulderLayer((RenderLayerParent<Player, PlayerModel<Player>>)this));
-        this.addLayer((RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>)new SpinAttackEffectLayer((RenderLayerParent<LivingEntity, PlayerModel<LivingEntity>>)this));
+        this.addLayer((RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>)new ParrotOnShoulderLayer(this)); // MagmaCube - decompile fix
+        this.addLayer((RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>)new SpinAttackEffectLayer(this)); // MagmaCube - decompile fix
         this.addLayer(new BeeStingerLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>(this));
     }
     
@@ -72,11 +72,11 @@ public class PlayerRenderer extends LivingEntityRenderer<AbstractClientPlayer, P
         if (debug1.isCrouching()) {
             return new Vec3(0.0, -0.125, 0.0);
         }
-        return super.getRenderOffset((T)debug1, debug2);
+        return super.getRenderOffset(debug1, debug2); // MagmaCube - decompile fix
     }
     
     private void setModelProperties(final AbstractClientPlayer debug1) {
-        final PlayerModel<AbstractClientPlayer> debug2 = ((LivingEntityRenderer<T, PlayerModel<AbstractClientPlayer>>)this).getModel();
+        final PlayerModel<AbstractClientPlayer> debug2 = this.getModel(); // MagmaCube - decompile fix
         if (debug1.isSpectator()) {
             debug2.setAllVisible(false);
             debug2.head.visible = true;
@@ -152,13 +152,13 @@ public class PlayerRenderer extends LivingEntityRenderer<AbstractClientPlayer, P
             final Objective debug8 = debug7.getDisplayObjective(2);
             if (debug8 != null) {
                 final Score debug9 = debug7.getOrCreatePlayerScore(debug1.getScoreboardName(), debug8);
-                super.renderNameTag((T)debug1, new TextComponent(Integer.toString(debug9.getScore())).append(" ").append(debug8.getDisplayName()), debug3, debug4, debug5);
+                super.renderNameTag(debug1, new TextComponent(Integer.toString(debug9.getScore())).append(" ").append(debug8.getDisplayName()), debug3, debug4, debug5); // MagmaCube - decompile fix
                 final double debug10 = 0.0;
                 this.getFont().getClass();
                 debug3.translate(debug10, 9.0f * 1.15f * 0.025f, 0.0);
             }
         }
-        super.renderNameTag((T)debug1, debug2, debug3, debug4, debug5);
+        super.renderNameTag(debug1, debug2, debug3, debug4, debug5); // MagmaCube - decompile fix
         debug3.popPose();
     }
     
@@ -171,7 +171,7 @@ public class PlayerRenderer extends LivingEntityRenderer<AbstractClientPlayer, P
     }
     
     private void renderHand(final PoseStack debug1, final MultiBufferSource debug2, final int debug3, final AbstractClientPlayer debug4, final ModelPart debug5, final ModelPart debug6) {
-        final PlayerModel<AbstractClientPlayer> debug7 = ((LivingEntityRenderer<T, PlayerModel<AbstractClientPlayer>>)this).getModel();
+        final PlayerModel<AbstractClientPlayer> debug7 = this.getModel(); // MagmaCube - decompile fix
         this.setModelProperties(debug4);
         debug7.attackTime = 0.0f;
         debug7.crouching = false;
diff --git a/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java b/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
index 60779f34b88cd1b2b535b2b7a48ead28296d8346..42311af8d7c822d3763c7404a01a1f6fbd283e98 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
@@ -77,8 +77,8 @@ extends SimpleTexture {
                 try {
                     super.load(debug1);
                 }
-                catch (IOException debug2) {
-                    LOGGER.warn("Failed to load texture: {}", (Object)this.location, (Object)debug2);
+                catch (IOException debug22) { // MagmaCube - decompile fix
+                    LOGGER.warn("Failed to load texture: {}", (Object)this.location, debug22); // MagmaCube - decompile fix
                 }
                 this.uploaded = true;
             }
@@ -98,36 +98,38 @@ extends SimpleTexture {
             return;
         }
         this.future = CompletableFuture.runAsync(() -> {
-            HttpURLConnection debug1 = null;
+            HttpURLConnection conn = null; // MagmaCube - decompile fix
             LOGGER.debug("Downloading http texture from {} to {}", (Object)this.urlString, (Object)this.file);
             try {
-                InputStream debug2;
-                debug1 = (HttpURLConnection)new URL(this.urlString).openConnection(Minecraft.getInstance().getProxy());
-                debug1.setDoInput(true);
-                debug1.setDoOutput(false);
-                debug1.connect();
-                if (debug1.getResponseCode() / 100 != 2) {
+                // MagmaCube start - decompile fix
+                InputStream is;
+                conn = (HttpURLConnection)new URL(this.urlString).openConnection(Minecraft.getInstance().getProxy());
+                conn.setDoInput(true);
+                conn.setDoOutput(false);
+                conn.connect();
+                if (conn.getResponseCode() / 100 != 2) {
                     return;
                 }
                 if (this.file != null) {
-                    FileUtils.copyInputStreamToFile((InputStream)debug1.getInputStream(), (File)this.file);
-                    debug2 = new FileInputStream(this.file);
+                    FileUtils.copyInputStreamToFile((InputStream)conn.getInputStream(), (File)this.file);
+                    is = new FileInputStream(this.file);
                 } else {
-                    debug2 = debug1.getInputStream();
+                    is = conn.getInputStream();
                 }
                 Minecraft.getInstance().execute(() -> {
-                    NativeImage debug2 = this.load(debug2);
-                    if (debug2 != null) {
-                        this.loadCallback(debug2);
+                    NativeImage img = this.load(is);
+                    if (img != null) {
+                        this.loadCallback(img);
                     }
                 });
             }
-            catch (Exception debug2) {
-                LOGGER.error("Couldn't download http texture", (Throwable)debug2);
+            catch (Exception debug22) {
+                LOGGER.error("Couldn't download http texture", (Throwable)debug22);
             }
+            // MagmaCube end - decompile fix
             finally {
-                if (debug1 != null) {
-                    debug1.disconnect();
+                if (conn != null) {
+                    conn.disconnect();
                 }
             }
         }, Util.backgroundExecutor());
diff --git a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
index 72245dc8a64e26f57c822cfde282867c65512f11..3a3516fddab443fc5135daebcdd9413b09011de7 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
@@ -22,7 +22,7 @@ import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.util.Mth;
 
 public class Stitcher {
-    private static final Comparator<Holder> HOLDER_COMPARATOR = Comparator.comparing(debug0 -> -debug0.height).thenComparing(debug0 -> -debug0.width).thenComparing(debug0 -> debug0.spriteInfo.name());
+    private static final Comparator<Holder> HOLDER_COMPARATOR = Comparator.<Holder, Integer>comparing(debug0 -> -debug0.height).thenComparing(debug0 -> -debug0.width).thenComparing(debug0 -> debug0.spriteInfo.name()); // MagmaCube - decompile fix
     private final int mipLevel;
     private final Set<Holder> texturesToBeStitched = Sets.newHashSetWithExpectedSize((int)256);
     private final List<Region> storage = Lists.newArrayListWithCapacity((int)256);
@@ -51,11 +51,11 @@ public class Stitcher {
     }
 
     public void stitch() {
-        ArrayList debug1 = Lists.newArrayList(this.texturesToBeStitched);
+        ArrayList<Holder> debug1 = Lists.newArrayList(this.texturesToBeStitched); // MagmaCube - decompile fix
         debug1.sort(HOLDER_COMPARATOR);
         for (Holder debug3 : debug1) {
             if (this.addToStorage(debug3)) continue;
-            throw new StitcherException(debug3.spriteInfo, (Collection)debug1.stream().map(debug0 -> debug0.spriteInfo).collect(ImmutableList.toImmutableList()));
+            throw new StitcherException(debug3.spriteInfo, debug1.stream().map(debug0 -> debug0.spriteInfo).collect(ImmutableList.toImmutableList())); // MagmaCube - decompile fix
         }
         this.storageX = Mth.smallestEncompassingPowerOfTwo(this.storageX);
         this.storageY = Mth.smallestEncompassingPowerOfTwo(this.storageY);
@@ -64,8 +64,8 @@ public class Stitcher {
     public void gatherSprites(SpriteLoader debug1) {
         for (Region debug3 : this.storage) {
             debug3.walk(debug2 -> {
-                Holder debug3 = debug2.getHolder();
-                TextureAtlasSprite.Info debug4 = debug3.spriteInfo;
+                Holder debug3l = debug2.getHolder(); // MagmaCube - decompile fix
+                TextureAtlasSprite.Info debug4 = debug3l.spriteInfo; // MagmaCube - decompile fix
                 debug1.load(debug4, this.storageX, this.storageY, debug2.getX(), debug2.getY());
             });
         }
diff --git a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java
index f7314e790873cee77f5c6c759f4b60fa596850b7..ed6fdbee71010a123b2a55f03bf1982f6ec9fffa 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java
@@ -147,16 +147,18 @@ implements Tickable {
     }
 
     private Collection<TextureAtlasSprite.Info> getBasicSpriteInfos(ResourceManager debug1, Set<ResourceLocation> debug2) {
-        ArrayList debug3 = Lists.newArrayList();
+        ArrayList<CompletableFuture> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
         ConcurrentLinkedQueue<TextureAtlasSprite.Info> debug4 = new ConcurrentLinkedQueue<TextureAtlasSprite.Info>();
         for (ResourceLocation debug6 : debug2) {
             if (MissingTextureAtlasSprite.getLocation().equals(debug6)) continue;
             debug3.add(CompletableFuture.runAsync(() -> {
                 TextureAtlasSprite.Info debug5;
-                ResourceLocation debug4 = this.getResourceLocation(debug6);
-                try (Resource debug6 = debug1.getResource(debug4);){
-                    PngInfo debug8 = new PngInfo(debug6.toString(), debug6.getInputStream());
-                    AnimationMetadataSection debug9 = debug6.getMetadata(AnimationMetadataSection.SERIALIZER);
+                // MagmaCube start - decompile fix
+                ResourceLocation debug4l = this.getResourceLocation(debug6);
+                try (Resource debug6l = debug1.getResource(debug4l);){
+                    PngInfo debug8 = new PngInfo(debug6l.toString(), debug6l.getInputStream());
+                    AnimationMetadataSection debug9 = debug6l.getMetadata(AnimationMetadataSection.SERIALIZER);
+                    // MagmaCube end - decompile fix
                     if (debug9 == null) {
                         debug9 = AnimationMetadataSection.EMPTY;
                     }
@@ -164,14 +166,14 @@ implements Tickable {
                     debug5 = new TextureAtlasSprite.Info(debug6, (Integer)debug10.getFirst(), (Integer)debug10.getSecond(), debug9);
                 }
                 catch (RuntimeException debug62) {
-                    LOGGER.error("Unable to parse metadata from {} : {}", (Object)debug4, (Object)debug62);
+                    LOGGER.error("Unable to parse metadata from {} : {}", (Object)debug4l, (Object)debug62); // MagmaCube - decompile fix
                     return;
                 }
                 catch (IOException debug63) {
-                    LOGGER.error("Using missing texture, unable to load {} : {}", (Object)debug4, (Object)debug63);
+                    LOGGER.error("Using missing texture, unable to load {} : {}", (Object)debug4l, (Object)debug63); // MagmaCube - decompile fix
                     return;
                 }
-                debug4.add(debug5);
+                debug4.add(debug5); // MagmaCube - decompile fix
             }, Util.backgroundExecutor()));
         }
         CompletableFuture.allOf(debug3.toArray(new CompletableFuture[0])).join();
@@ -180,16 +182,16 @@ implements Tickable {
 
     private List<TextureAtlasSprite> getLoadedSprites(ResourceManager debug1, Stitcher debug2, int debug3) {
         ConcurrentLinkedQueue debug4 = new ConcurrentLinkedQueue();
-        ArrayList debug52 = Lists.newArrayList();
+        ArrayList<CompletableFuture> debug52 = Lists.newArrayList(); // MagmaCube - decompile fix
         debug2.gatherSprites((debug5, debug6, debug7, debug8, debug9) -> {
             if (debug5 == MissingTextureAtlasSprite.info()) {
                 MissingTextureAtlasSprite debug10 = MissingTextureAtlasSprite.newInstance(this, debug3, debug6, debug7, debug8, debug9);
                 debug4.add(debug10);
             } else {
                 debug52.add(CompletableFuture.runAsync(() -> {
-                    int debug9 = this.load(debug1, debug5, debug6, debug7, debug3, debug8, debug9);
-                    if (debug9 != null) {
-                        debug4.add(debug9);
+                    TextureAtlasSprite debug9l = this.load(debug1, debug5, debug6, debug7, debug3, debug8, debug9); // MagmaCube - decompile fix
+                    if (debug9l != null) { // MagmaCube - decompile fix
+                        debug4.add(debug9l); // MagmaCube - decompile fix
                     }
                 }, Util.backgroundExecutor()));
             }
diff --git a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
index a4b130697d4691e429a600fd7700fa1e8a8f32dd..2f92c58a96538b0dda0638d825e75865f5c6a8ab 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
@@ -69,7 +69,7 @@ public class TextureAtlasSprite implements AutoCloseable
             }
         }
         else {
-            final List<AnimationFrame> debug18 = (List<AnimationFrame>)Lists.newArrayList();
+            final List<AnimationFrame> debug18 = Lists.newArrayList(); // MagmaCube - decompile fix
             final int debug19 = debug12 * debug13;
             this.framesX = new int[debug19];
             this.framesY = new int[debug19];
@@ -92,9 +92,8 @@ public class TextureAtlasSprite implements AutoCloseable
             catch (Throwable debug21) {
                 final CrashReport debug20 = CrashReport.forThrowable(debug21, "Generating mipmaps for frame");
                 final CrashReportCategory debug22 = debug20.addCategory("Frame being iterated");
-                final StringBuilder debug23;
                 debug22.setDetail("First frame", () -> {
-                    debug23 = new StringBuilder();
+                    StringBuilder debug23 = new StringBuilder(); // MagmaCube - decompile fix
                     if (debug23.length() > 0) {
                         debug23.append(", ");
                     }
@@ -194,7 +193,7 @@ public class TextureAtlasSprite implements AutoCloseable
     @Override
     public String toString() {
         final int debug1 = this.framesX.length;
-        return "TextureAtlasSprite{name='" + this.info.name + 'Â¥'' + ", frameCount=" + debug1 + ", x=" + this.x + ", y=" + this.y + ", height=" + this.info.height + ", width=" + this.info.width + ", u0=" + this.u0 + ", u1=" + this.u1 + ", v0=" + this.v0 + ", v1=" + this.v1 + '}';
+        return "TextureAtlasSprite{name='" + this.info.name + '\'' + ", frameCount=" + debug1 + ", x=" + this.x + ", y=" + this.y + ", height=" + this.info.height + ", width=" + this.info.width + ", u0=" + this.u0 + ", u1=" + this.u1 + ", v0=" + this.v0 + ", v1=" + this.v1 + '}'; // MagmaCube - decompile fix
     }
     
     public boolean isTransparent(final int debug1, final int debug2, final int debug3) {
diff --git a/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java b/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java
index 950c1c1418f71530d5af5f0abd8e6ef17333f73e..74b2a25144b99de9bf5aaea352782a5f3136c3f5 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java
@@ -177,16 +177,18 @@ AutoCloseable {
         return ((CompletableFuture)CompletableFuture.allOf(TitleScreen.preloadResources(this, debug5), this.preload(AbstractWidget.WIDGETS_LOCATION, debug5)).thenCompose(debug1::wait)).thenAcceptAsync(debug3 -> {
             MissingTextureAtlasSprite.getTexture();
             RealmsMainScreen.updateTeaserImages(this.resourceManager);
-            Iterator<Map.Entry<ResourceLocation, AbstractTexture>> debug4 = this.byPath.entrySet().iterator();
-            while (debug4.hasNext()) {
-                Map.Entry<ResourceLocation, AbstractTexture> debug5 = debug4.next();
-                ResourceLocation debug6 = debug5.getKey();
-                AbstractTexture debug7 = debug5.getValue();
-                if (debug7 == MissingTextureAtlasSprite.getTexture() && !debug6.equals(MissingTextureAtlasSprite.getLocation())) {
-                    debug4.remove();
+            // MagmaCube start - decompile fix
+            Iterator<Map.Entry<ResourceLocation, AbstractTexture>> debug4l = this.byPath.entrySet().iterator();
+            while (debug4l.hasNext()) {
+                Map.Entry<ResourceLocation, AbstractTexture> debug5l = debug4l.next();
+                ResourceLocation debug6l = debug5l.getKey();
+                AbstractTexture debug7 = debug5l.getValue();
+                if (debug7 == MissingTextureAtlasSprite.getTexture() && !debug6l.equals(MissingTextureAtlasSprite.getLocation())) {
+                    debug4l.remove();
                     continue;
                 }
-                debug7.reset(this, debug2, debug6, debug6);
+                debug7.reset(this, debug2, debug6l, debug6);
+                // MagmaCube end - decompile fix
             }
         }, debug0 -> RenderSystem.recordRenderCall(debug0::run));
     }
diff --git a/src/main/java/net/minecraft/client/resources/AssetIndex.java b/src/main/java/net/minecraft/client/resources/AssetIndex.java
index 466190ac1450075709695c4e52e29130fbcc5a62..7b1f63f0e60777a26261e35f9a64a9ad53a8bfc7 100644
--- a/src/main/java/net/minecraft/client/resources/AssetIndex.java
+++ b/src/main/java/net/minecraft/client/resources/AssetIndex.java
@@ -91,8 +91,8 @@ public class AssetIndex {
 
     public Collection<ResourceLocation> getFiles(String debug1, String debug2, int debug32, Predicate<String> debug4) {
         return this.namespacedFiles.keySet().stream().filter(debug3 -> {
-            String debug4 = debug3.getPath();
-            return debug3.getNamespace().equals(debug2) && !debug4.endsWith(".mcmeta") && debug4.startsWith(debug1 + "/") && debug4.test(debug4);
+            String debug4l = debug3.getPath(); // MagmaCube - decompile fix
+            return debug3.getNamespace().equals(debug2) && !debug4l.endsWith(".mcmeta") && debug4l.startsWith(debug1 + "/") && debug4.test(debug4l); // MagmaCube - decompile fix
         }).collect(Collectors.toList());
     }
 }
diff --git a/src/main/java/net/minecraft/client/resources/ClientPackSource.java b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
index 67a805e1395f44bded1d00d7294543f436af5051..2ca37167516e1bcc8a7ffdfcf93a7777a6bd080c 100644
--- a/src/main/java/net/minecraft/client/resources/ClientPackSource.java
+++ b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
@@ -115,7 +115,7 @@ implements RepositorySource {
         String debug4 = SHA1.matcher(debug22).matches() ? debug22 : "";
         this.downloadLock.lock();
         try {
-            CompletableFuture<String> debug6;
+            CompletableFuture<?> debug6; // MagmaCube - decompile fix
             this.clearServerPack();
             this.clearOldDownloads();
             File debug5 = new File(this.serverPackDir, debug32);
@@ -135,7 +135,7 @@ implements RepositorySource {
                 return this.setServerPack(debug5, PackSource.SERVER);
             })).whenComplete((debug1, debug2) -> {
                 if (debug2 != null) {
-                    LOGGER.warn("Pack application failed: {}, deleting file {}", (Object)debug2.getMessage(), (Object)debug5);
+                    LOGGER.warn("Pack application failed: {}, deleting file {}", ((Throwable) debug2).getMessage(), (Object)debug5); // MagmaCube - decompile fix
                     ClientPackSource.deleteQuietly(debug5);
                 }
             });
@@ -196,7 +196,7 @@ implements RepositorySource {
 
     private void clearOldDownloads() {
         try {
-            ArrayList debug1 = Lists.newArrayList((Iterable)FileUtils.listFiles((File)this.serverPackDir, (IOFileFilter)TrueFileFilter.TRUE, null));
+            ArrayList<File> debug1 = Lists.newArrayList((Iterable)FileUtils.listFiles((File)this.serverPackDir, (IOFileFilter)TrueFileFilter.TRUE, null)); // MagmaCube - decompile fix
             debug1.sort(LastModifiedFileComparator.LASTMODIFIED_REVERSE);
             int debug2 = 0;
             for (File debug4 : debug1) {
diff --git a/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java b/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java
index 89e42f1984734fcb31f37051a4256e0c75cd0604..cccf2921a763c1be7b053695c9c10e1240752c57 100644
--- a/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java
+++ b/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java
@@ -44,7 +44,7 @@ implements PackResources {
         debug0.put("textures/entity/chest/christmas.png", new Pair((Object)ChestType.SINGLE, (Object)new ResourceLocation("textures/entity/chest/christmas.png")));
         debug0.put("textures/entity/chest/ender.png", new Pair((Object)ChestType.SINGLE, (Object)new ResourceLocation("textures/entity/chest/ender.png")));
     });
-    private static final List<String> PATTERNS = Lists.newArrayList((Object[])new String[]{"base", "border", "bricks", "circle", "creeper", "cross", "curly_border", "diagonal_left", "diagonal_right", "diagonal_up_left", "diagonal_up_right", "flower", "globe", "gradient", "gradient_up", "half_horizontal", "half_horizontal_bottom", "half_vertical", "half_vertical_right", "mojang", "rhombus", "skull", "small_stripes", "square_bottom_left", "square_bottom_right", "square_top_left", "square_top_right", "straight_cross", "stripe_bottom", "stripe_center", "stripe_downleft", "stripe_downright", "stripe_left", "stripe_middle", "stripe_right", "stripe_top", "triangle_bottom", "triangle_top", "triangles_bottom", "triangles_top"});
+    private static final List<String> PATTERNS = Lists.newArrayList(new String[]{"base", "border", "bricks", "circle", "creeper", "cross", "curly_border", "diagonal_left", "diagonal_right", "diagonal_up_left", "diagonal_up_right", "flower", "globe", "gradient", "gradient_up", "half_horizontal", "half_horizontal_bottom", "half_vertical", "half_vertical_right", "mojang", "rhombus", "skull", "small_stripes", "square_bottom_left", "square_bottom_right", "square_top_left", "square_top_right", "straight_cross", "stripe_bottom", "stripe_center", "stripe_downleft", "stripe_downright", "stripe_left", "stripe_middle", "stripe_right", "stripe_top", "triangle_bottom", "triangle_top", "triangles_bottom", "triangles_top"}); // MagmaCube - decompile fix
     private static final Set<String> SHIELDS = PATTERNS.stream().map(debug0 -> "textures/entity/shield/" + debug0 + ".png").collect(Collectors.toSet());
     private static final Set<String> BANNERS = PATTERNS.stream().map(debug0 -> "textures/entity/banner/" + debug0 + ".png").collect(Collectors.toSet());
     public static final ResourceLocation SHIELD_BASE = new ResourceLocation("textures/entity/shield_base.png");
@@ -150,12 +150,12 @@ implements PackResources {
     public static InputStream fixPattern(InputStream debug0, InputStream debug1, int debug2, int debug3, int debug4, int debug5, int debug6) throws IOException {
         try (NativeImage debug7 = NativeImage.read(debug0);){
             Throwable throwable = null;
-            try (NativeImage debug9 = NativeImage.read(debug1);){
+            try (NativeImage debug9 = NativeImage.read(debug1);) { // MagmaCube - decompile fix
                 int debug11 = debug7.getWidth();
                 int debug12 = debug7.getHeight();
                 if (debug11 == debug9.getWidth()) {
                     if (debug12 == debug9.getHeight()) {
-                        try (NativeImage debug13 = new NativeImage(debug11, debug12, true);){
+                        try (NativeImage debug13 = new NativeImage(debug11, debug12, true);) { // MagmaCube - decompile fix
                             int debug15 = debug11 / debug2;
                             for (int debug16 = debug4 * debug15; debug16 < debug6 * debug15; ++debug16) {
                                 for (int debug17 = debug3 * debug15; debug17 < debug5 * debug15; ++debug17) {
@@ -169,117 +169,61 @@ implements PackResources {
                         }
                     }
                 }
-                {
-                    catch (Throwable throwable2) {
-                        throwable = throwable2;
-                        throw throwable2;
-                    }
-                    catch (Throwable throwable3) {
-                        throw throwable3;
-                    }
-                }
             }
         }
+        return null; // MagmaCube - decompile fix
     }
 
     /*
      * Exception decompiling
      */
     public static InputStream fixConduitEyeTexture(InputStream debug0) throws IOException {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [0[TRYBLOCK]], but top level block is 4[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - decompile fix
+        try (NativeImage debug1 = NativeImage.read(debug0)) {
+            int debug3 = debug1.getWidth();
+            int debug4 = debug1.getHeight();
+        }
+        return debug0; // todo: fix code
+        // MagmaCube end - decompile fix
     }
 
     /*
      * Exception decompiling
      */
     public static InputStream fixLeftChest(InputStream debug0) throws IOException {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [0[TRYBLOCK]], but top level block is 4[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - decompile fix
+        try (NativeImage debug1 = NativeImage.read(debug0)) {
+            int debug3 = debug1.getWidth();
+            int debug4 = debug1.getHeight();
+        }
+        return debug0; // todo: fix code
+        // MagmaCube end - decompile fix
     }
 
     /*
      * Exception decompiling
      */
     public static InputStream fixRightChest(InputStream debug0) throws IOException {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [0[TRYBLOCK]], but top level block is 4[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - decompile fix
+        try (NativeImage debug1 = NativeImage.read(debug0)) {
+            int debug3 = debug1.getWidth();
+            int debug4 = debug1.getHeight();
+        }
+        return debug0; // todo: fix code
+        // MagmaCube end - decompile fix
     }
 
     /*
      * Exception decompiling
      */
     public static InputStream fixSingleChest(InputStream debug0) throws IOException {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [0[TRYBLOCK]], but top level block is 4[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - decompile fix
+        try (NativeImage debug1 = NativeImage.read(debug0)) {
+            int debug3 = debug1.getWidth();
+            int debug4 = debug1.getHeight();
+        }
+        return debug0; // todo: fix code
+        // MagmaCube end - decompile fix
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/client/resources/PaintingTextureManager.java b/src/main/java/net/minecraft/client/resources/PaintingTextureManager.java
index 94edd26606b7b4931a2fcd53164eb7df0f2008ea..9511f4dba7cf0e951b1be5c21c9f5f13b4c814ca 100644
--- a/src/main/java/net/minecraft/client/resources/PaintingTextureManager.java
+++ b/src/main/java/net/minecraft/client/resources/PaintingTextureManager.java
@@ -17,7 +17,7 @@ public class PaintingTextureManager extends TextureAtlasHolder
     
     @Override
     protected Stream<ResourceLocation> getResourcesToLoad() {
-        return Stream.concat(Registry.MOTIVE.keySet().stream(), (Stream<? extends ResourceLocation>)Stream.of((T)PaintingTextureManager.BACK_SPRITE_LOCATION));
+        return Stream.concat(Registry.MOTIVE.keySet().stream(), (Stream<? extends ResourceLocation>)Stream.of(PaintingTextureManager.BACK_SPRITE_LOCATION)); // MagmaCube - decompile fix
     }
     
     public TextureAtlasSprite get(final Motive debug1) {
diff --git a/src/main/java/net/minecraft/client/resources/SkinManager.java b/src/main/java/net/minecraft/client/resources/SkinManager.java
index 03905b54d692eed731fe6a4fad9c8d58b45e7de7..5aa9a1413d184ca89452c73a0958b65e4744ec53 100644
--- a/src/main/java/net/minecraft/client/resources/SkinManager.java
+++ b/src/main/java/net/minecraft/client/resources/SkinManager.java
@@ -59,11 +59,11 @@ public class SkinManager {
         this.textureManager = debug1;
         this.skinsDirectory = debug2;
         this.sessionService = debug3;
-        this.insecureSkinCache = CacheBuilder.newBuilder().expireAfterAccess(15L, TimeUnit.SECONDS).build((CacheLoader)new CacheLoader<String, Map<MinecraftProfileTexture.Type, MinecraftProfileTexture>>(){
+        this.insecureSkinCache = CacheBuilder.newBuilder().expireAfterAccess(15L, TimeUnit.SECONDS).build(new CacheLoader<String, Map<MinecraftProfileTexture.Type, MinecraftProfileTexture>>(){ // MagmaCube - decompile fix
 
             public Map<MinecraftProfileTexture.Type, MinecraftProfileTexture> load(String debug1) {
                 GameProfile debug2 = new GameProfile(null, "dummy_mcdummyface");
-                debug2.getProperties().put((Object)"textures", (Object)new Property("textures", debug1, ""));
+                debug2.getProperties().put("textures", new Property("textures", debug1, "")); // MagmaCube - decompile fix
                 try {
                     return debug3.getTextures(debug2, false);
                 }
@@ -71,10 +71,6 @@ public class SkinManager {
                     return ImmutableMap.of();
                 }
             }
-
-            public /* synthetic */ Object load(Object object) throws Exception {
-                return this.load((String)object);
-            }
         });
     }
 
@@ -105,31 +101,31 @@ public class SkinManager {
 
     public void registerSkins(GameProfile debug1, SkinTextureCallback debug2, boolean debug3) {
         Runnable debug4 = () -> {
-            HashMap debug4 = Maps.newHashMap();
+            HashMap debug4l = Maps.newHashMap(); // MagmaCube - decompile fix
             try {
-                debug4.putAll(this.sessionService.getTextures(debug1, debug3));
+                debug4l.putAll(this.sessionService.getTextures(debug1, debug3)); // MagmaCube - decompile fix
             }
             catch (InsecureTextureException insecureTextureException) {
                 // empty catch block
             }
-            if (debug4.isEmpty()) {
+            if (debug4l.isEmpty()) { // MagmaCube - decompile fix
                 debug1.getProperties().clear();
                 if (debug1.getId().equals(Minecraft.getInstance().getUser().getGameProfile().getId())) {
                     debug1.getProperties().putAll((Multimap)Minecraft.getInstance().getProfileProperties());
-                    debug4.putAll(this.sessionService.getTextures(debug1, false));
+                    debug4l.putAll(this.sessionService.getTextures(debug1, false)); // MagmaCube - decompile fix
                 } else {
                     this.sessionService.fillProfileProperties(debug1, debug3);
                     try {
-                        debug4.putAll(this.sessionService.getTextures(debug1, debug3));
+                        debug4l.putAll(this.sessionService.getTextures(debug1, debug3)); // MagmaCube - decompile fix
                     }
                     catch (InsecureTextureException insecureTextureException) {
                         // empty catch block
                     }
                 }
             }
-            Minecraft.getInstance().execute(() -> RenderSystem.recordRenderCall(() -> ImmutableList.of((Object)MinecraftProfileTexture.Type.SKIN, (Object)MinecraftProfileTexture.Type.CAPE).forEach(debug3 -> {
-                if (debug4.containsKey(debug3)) {
-                    this.registerTexture((MinecraftProfileTexture)debug4.get(debug3), (MinecraftProfileTexture.Type)debug3, debug2);
+            Minecraft.getInstance().execute(() -> RenderSystem.recordRenderCall(() -> ImmutableList.of(MinecraftProfileTexture.Type.SKIN, MinecraftProfileTexture.Type.CAPE).forEach(debug3l -> { // MagmaCube - decompile fix
+                if (debug4l.containsKey(debug3l)) { // MagmaCube - decompile fix
+                    this.registerTexture((MinecraftProfileTexture)debug4l.get(debug3l), (MinecraftProfileTexture.Type)debug3l, debug2); // MagmaCube - decompile fix
                 }
             })));
         };
@@ -137,11 +133,11 @@ public class SkinManager {
     }
 
     public Map<MinecraftProfileTexture.Type, MinecraftProfileTexture> getInsecureSkinInformation(GameProfile debug1) {
-        Property debug2 = (Property)Iterables.getFirst((Iterable)debug1.getProperties().get((Object)"textures"), null);
+        Property debug2 = (Property)Iterables.getFirst((Iterable)debug1.getProperties().get("textures"), null); // MagmaCube - decompile fix
         if (debug2 == null) {
             return ImmutableMap.of();
         }
-        return (Map)this.insecureSkinCache.getUnchecked((Object)debug2.getValue());
+        return (Map)this.insecureSkinCache.getUnchecked(debug2.getValue()); // MagmaCube - decompile fix
     }
 
     public static interface SkinTextureCallback {
diff --git a/src/main/java/net/minecraft/client/resources/SplashManager.java b/src/main/java/net/minecraft/client/resources/SplashManager.java
index d002d83a198db2d699357b29172eebccca922591..0f3d5947d53c3e785adb2b04165e4fbdf6376832 100644
--- a/src/main/java/net/minecraft/client/resources/SplashManager.java
+++ b/src/main/java/net/minecraft/client/resources/SplashManager.java
@@ -8,14 +8,19 @@
 package net.minecraft.client.resources;
 
 import com.google.common.collect.Lists;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.List;
-import java.util.Locale;
-import java.util.Random;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
+import java.util.*;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+
+import net.minecraft.client.Minecraft;
 import net.minecraft.client.User;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.packs.resources.Resource;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.server.packs.resources.SimplePreparableReloadListener;
 import net.minecraft.util.profiling.ProfilerFiller;
@@ -36,25 +41,14 @@ extends SimplePreparableReloadListener<List<String>> {
      */
     @Override
     protected List<String> prepare(ResourceManager debug1, ProfilerFiller debug2) {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 5[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - decompile fix
+        try(Resource debug3 = Minecraft.getInstance().getResourceManager().getResource(SPLASHES_LOCATION);
+            BufferedReader debug5 = new BufferedReader(new InputStreamReader(debug3.getInputStream(), StandardCharsets.UTF_8))) {
+            return (List)debug5.lines().map(String::trim).filter(debug0 -> (debug0.hashCode() != 125780783)).collect(Collectors.toList());
+        } catch (IOException debug3) {
+            return Collections.emptyList();
+        }
+        // MagmaCube end - decompile fix
     }
 
     @Override
@@ -85,12 +79,7 @@ extends SimplePreparableReloadListener<List<String>> {
         return this.splashes.get(RANDOM.nextInt(this.splashes.size()));
     }
 
-    @Override
-    protected /* synthetic */ Object prepare(ResourceManager resourceManager, ProfilerFiller profilerFiller) {
-        return this.prepare(resourceManager, profilerFiller);
-    }
-
-    private static /* synthetic */ boolean lambda$prepare$0(String debug0) {
+    private static /* synthetic */ boolean _lambda$prepare$0(String debug0) {
         return debug0.hashCode() != 125780783;
     }
 }
diff --git a/src/main/java/net/minecraft/client/resources/language/FormattedBidiReorder.java b/src/main/java/net/minecraft/client/resources/language/FormattedBidiReorder.java
index 4b8b0df9b386845be1a302795c133b689524dbfe..12d573f082b7685f47fb50cad729501ca200c518 100644
--- a/src/main/java/net/minecraft/client/resources/language/FormattedBidiReorder.java
+++ b/src/main/java/net/minecraft/client/resources/language/FormattedBidiReorder.java
@@ -17,7 +17,7 @@ public class FormattedBidiReorder
         final SubStringSource debug2 = SubStringSource.create(debug0, UCharacter::getMirror, FormattedBidiReorder::shape);
         final Bidi debug3 = new Bidi(debug2.getPlainText(), debug1 ? 127 : 126);
         debug3.setReorderingMode(0);
-        final List<FormattedCharSequence> debug4 = (List<FormattedCharSequence>)Lists.newArrayList();
+        final List<FormattedCharSequence> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug5 = debug3.countRuns(), debug6 = 0; debug6 < debug5; ++debug6) {
             final BidiRun debug7 = debug3.getVisualRun(debug6);
             debug4.addAll(debug2.substring(debug7.getStart(), debug7.getLength(), debug7.isOddRun()));
diff --git a/src/main/java/net/minecraft/client/resources/language/LanguageManager.java b/src/main/java/net/minecraft/client/resources/language/LanguageManager.java
index 6aecc2ac62c5e9285e1290b87479f76ecf07be3c..0ff3639fa130ff34d2e9043a73fceb4355415bc3 100644
--- a/src/main/java/net/minecraft/client/resources/language/LanguageManager.java
+++ b/src/main/java/net/minecraft/client/resources/language/LanguageManager.java
@@ -28,37 +28,30 @@ public class LanguageManager implements ResourceManagerReloadListener
     private LanguageInfo currentLanguage;
     
     public LanguageManager(final String debug1) {
-        this.languages = (Map<String, LanguageInfo>)ImmutableMap.of((Object)"en_us", (Object)LanguageManager.DEFAULT_LANGUAGE);
+        this.languages = (Map<String, LanguageInfo>)ImmutableMap.of("en_us", LanguageManager.DEFAULT_LANGUAGE); // MagmaCube - decompile fix
         this.currentLanguage = LanguageManager.DEFAULT_LANGUAGE;
         this.currentCode = debug1;
     }
     
     private static Map<String, LanguageInfo> extractLanguages(final Stream<PackResources> debug0) {
-        final Map<String, LanguageInfo> debug2 = (Map<String, LanguageInfo>)Maps.newHashMap();
-        LanguageMetadataSection debug3;
-        final Iterator<LanguageInfo> iterator;
-        LanguageInfo debug4;
-        final Map<String, LanguageInfo> map;
-        final Exception ex;
-        Exception debug5;
+        final Map<String, LanguageInfo> map = Maps.newHashMap(); // MagmaCube - decompile fix
         debug0.forEach(debug1 -> {
             try {
-                debug3 = debug1.getMetadataSection((MetadataSectionSerializer<LanguageMetadataSection>)LanguageMetadataSection.SERIALIZER);
+                LanguageMetadataSection debug3 = debug1.getMetadataSection((MetadataSectionSerializer<LanguageMetadataSection>)LanguageMetadataSection.SERIALIZER); // MagmaCube - decompile fix
                 if (debug3 != null) {
-                    debug3.getLanguages().iterator();
+                    Iterator<LanguageInfo> iterator = debug3.getLanguages().iterator(); // MagmaCube - decompile fix
                     while (iterator.hasNext()) {
-                        debug4 = iterator.next();
+                        LanguageInfo debug4 = iterator.next(); // MagmaCube - decompile fix
                         map.putIfAbsent(debug4.getCode(), debug4);
                     }
                 }
             }
             catch (RuntimeException | IOException ex2) {
-                debug5 = ex;
-                LanguageManager.LOGGER.warn("Unable to parse language metadata section of resourcepack: {}", (Object)debug1.getName(), (Object)debug5);
+                LanguageManager.LOGGER.warn("Unable to parse language metadata section of resourcepack: {}", (Object)debug1.getName(), ex2); // MagmaCube - decompile fix
             }
             return;
         });
-        return (Map<String, LanguageInfo>)ImmutableMap.copyOf((Map)debug2);
+        return (Map<String, LanguageInfo>)ImmutableMap.copyOf(map); // MagmaCube - decompile fix
     }
     
     @Override
@@ -66,7 +59,7 @@ public class LanguageManager implements ResourceManagerReloadListener
         this.languages = extractLanguages(debug1.listPacks());
         final LanguageInfo debug2 = this.languages.getOrDefault("en_us", LanguageManager.DEFAULT_LANGUAGE);
         this.currentLanguage = this.languages.getOrDefault(this.currentCode, debug2);
-        final List<LanguageInfo> debug3 = (List<LanguageInfo>)Lists.newArrayList((Object[])new LanguageInfo[] { debug2 });
+        final List<LanguageInfo> debug3 = (List<LanguageInfo>)Lists.newArrayList(new LanguageInfo[] { debug2 }); // MagmaCube - decompile fix
         if (this.currentLanguage != debug2) {
             debug3.add(this.currentLanguage);
         }
diff --git a/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSection.java b/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSection.java
index 5b62383708ac8f34f6f69ad947e8e07643e51bbb..c820a5a19dd79125294f47fd13b39a8a5225815a 100644
--- a/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSection.java
+++ b/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSection.java
@@ -42,16 +42,16 @@ public class AnimationMetadataSection
     private Pair<Integer, Integer> calculateFrameSize(final int debug1, final int debug2) {
         if (this.frameWidth != -1) {
             if (this.frameHeight != -1) {
-                return (Pair<Integer, Integer>)Pair.of((Object)this.frameWidth, (Object)this.frameHeight);
+                return (Pair<Integer, Integer>)Pair.of(this.frameWidth, this.frameHeight); // MagmaCube - decompile fix
             }
-            return (Pair<Integer, Integer>)Pair.of((Object)this.frameWidth, (Object)debug2);
+            return (Pair<Integer, Integer>)Pair.of(this.frameWidth, debug2); // MagmaCube - decompile fix
         }
         else {
             if (this.frameHeight != -1) {
-                return (Pair<Integer, Integer>)Pair.of((Object)debug1, (Object)this.frameHeight);
+                return (Pair<Integer, Integer>)Pair.of(debug1, this.frameHeight); // MagmaCube - decompile fix
             }
             final int debug3 = Math.min(debug1, debug2);
-            return (Pair<Integer, Integer>)Pair.of((Object)debug3, (Object)debug3);
+            return (Pair<Integer, Integer>)Pair.of(debug3, debug3); // MagmaCube - decompile fix
         }
     }
     
@@ -92,7 +92,7 @@ public class AnimationMetadataSection
     }
     
     public Set<Integer> getUniqueFrameIndices() {
-        final Set<Integer> debug1 = (Set<Integer>)Sets.newHashSet();
+        final Set<Integer> debug1 = Sets.newHashSet(); // MagmaCube - decompile fix
         for (final AnimationFrame debug2 : this.frames) {
             debug1.add(debug2.getIndex());
         }
@@ -104,7 +104,7 @@ public class AnimationMetadataSection
         EMPTY = new AnimationMetadataSection(Lists.newArrayList(), -1, -1, 1, false) {
             @Override
             public Pair<Integer, Integer> getFrameSize(final int debug1, final int debug2) {
-                return (Pair<Integer, Integer>)Pair.of((Object)debug1, (Object)debug2);
+                return (Pair<Integer, Integer>)Pair.of(debug1, debug2); // MagmaCube - decompile fix
             }
         };
     }
diff --git a/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSectionSerializer.java b/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSectionSerializer.java
index 4854fcf2e5a28f95fc2f44b9421f82d9dfdf7102..ba965838d7b90b07a3df7949a179be7fc094747b 100644
--- a/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSectionSerializer.java
+++ b/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSectionSerializer.java
@@ -14,7 +14,7 @@ public class AnimationMetadataSectionSerializer implements MetadataSectionSerial
 {
     @Override
     public AnimationMetadataSection fromJson(final JsonObject debug1) {
-        final List<AnimationFrame> debug2 = (List<AnimationFrame>)Lists.newArrayList();
+        final List<AnimationFrame> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         final int debug3 = GsonHelper.getAsInt(debug1, "frametime", 1);
         if (debug3 != 1) {
             Validate.inclusiveBetween(1L, 2147483647L, (long)debug3, "Invalid default frame time");
diff --git a/src/main/java/net/minecraft/client/resources/metadata/language/LanguageMetadataSectionSerializer.java b/src/main/java/net/minecraft/client/resources/metadata/language/LanguageMetadataSectionSerializer.java
index eafd9391260b00c250b015eea144c022caa4a1cd..958f29d8827cd3aedaf6f1ef01612ab80a4b2e51 100644
--- a/src/main/java/net/minecraft/client/resources/metadata/language/LanguageMetadataSectionSerializer.java
+++ b/src/main/java/net/minecraft/client/resources/metadata/language/LanguageMetadataSectionSerializer.java
@@ -16,7 +16,7 @@ public class LanguageMetadataSectionSerializer implements MetadataSectionSeriali
 {
     @Override
     public LanguageMetadataSection fromJson(final JsonObject debug1) {
-        final Set<LanguageInfo> debug2 = (Set<LanguageInfo>)Sets.newHashSet();
+        final Set<LanguageInfo> debug2 = Sets.newHashSet(); // MagmaCube - decompile fix
         for (final Map.Entry<String, JsonElement> debug3 : debug1.entrySet()) {
             final String debug4 = debug3.getKey();
             if (debug4.length() > 16) {
diff --git a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
index 8208ea3fadd38e09b2726b8f234a24a5b261a3e6..b40895e102ef36e230208b0f5b4c5cac228966e0 100644
--- a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
+++ b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
@@ -137,19 +137,19 @@ public class ModelBakery {
     public static final ModelResourceLocation MISSING_MODEL_LOCATION = new ModelResourceLocation("builtin/missing", "missing");
     private static final String MISSING_MODEL_LOCATION_STRING = MISSING_MODEL_LOCATION.toString();
     @VisibleForTesting
-    public static final String MISSING_MODEL_MESH = ("{    'textures': {       'particle': '" + MissingTextureAtlasSprite.getLocation().getPath() + "',       'missingno': '" + MissingTextureAtlasSprite.getLocation().getPath() + "'    },    'elements': [         {  'from': [ 0, 0, 0 ],            'to': [ 16, 16, 16 ],            'faces': {                'down':  { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'down',  'texture': '#missingno' },                'up':    { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'up',    'texture': '#missingno' },                'north': { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'north', 'texture': '#missingno' },                'south': { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'south', 'texture': '#missingno' },                'west':  { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'west',  'texture': '#missingno' },                'east':  { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'east',  'texture': '#missingno' }            }        }    ]}").replace('Â¥'', 'Â¥"');
+    public static final String MISSING_MODEL_MESH = ("{    'textures': {       'particle': '" + MissingTextureAtlasSprite.getLocation().getPath() + "',       'missingno': '" + MissingTextureAtlasSprite.getLocation().getPath() + "'    },    'elements': [         {  'from': [ 0, 0, 0 ],            'to': [ 16, 16, 16 ],            'faces': {                'down':  { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'down',  'texture': '#missingno' },                'up':    { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'up',    'texture': '#missingno' },                'north': { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'north', 'texture': '#missingno' },                'south': { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'south', 'texture': '#missingno' },                'west':  { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'west',  'texture': '#missingno' },                'east':  { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'east',  'texture': '#missingno' }            }        }    ]}").replace('\'', '\"');
     private static final Map<String, String> BUILTIN_MODELS = Maps.newHashMap((Map)ImmutableMap.of((Object)"missing", (Object)MISSING_MODEL_MESH));
     private static final Splitter COMMA_SPLITTER = Splitter.on((char)',');
     private static final Splitter EQUAL_SPLITTER = Splitter.on((char)'=').limit(2);
-    public static final BlockModel GENERATION_MARKER = Util.make(BlockModel.fromString("{Â¥"gui_lightÂ¥": Â¥"frontÂ¥"}"), debug0 -> {
+    public static final BlockModel GENERATION_MARKER = Util.make(BlockModel.fromString("{\"gui_light\": \"front\"}"), debug0 -> {
         debug0.name = "generation marker";
     });
-    public static final BlockModel BLOCK_ENTITY_MARKER = Util.make(BlockModel.fromString("{Â¥"gui_lightÂ¥": Â¥"sideÂ¥"}"), debug0 -> {
+    public static final BlockModel BLOCK_ENTITY_MARKER = Util.make(BlockModel.fromString("{\"gui_light\": \"side\"}"), debug0 -> {
         debug0.name = "block entity marker";
     });
-    private static final StateDefinition<Block, BlockState> ITEM_FRAME_FAKE_DEFINITION = new StateDefinition.Builder(Blocks.AIR).add(BooleanProperty.create("map")).create(Block::defaultBlockState, BlockState::new);
+    private static final StateDefinition<Block, BlockState> ITEM_FRAME_FAKE_DEFINITION = new StateDefinition.Builder<Block, BlockState>(Blocks.AIR).add(new Property[]{BooleanProperty.create("map")}).create(Block::defaultBlockState, BlockState::new); // MagmaCube - decompile fix
     private static final ItemModelGenerator ITEM_MODEL_GENERATOR = new ItemModelGenerator();
-    private static final Map<ResourceLocation, StateDefinition<Block, BlockState>> STATIC_DEFINITIONS = ImmutableMap.of((Object)new ResourceLocation("item_frame"), ITEM_FRAME_FAKE_DEFINITION);
+    private static final Map<ResourceLocation, StateDefinition<Block, BlockState>> STATIC_DEFINITIONS = ImmutableMap.of(new ResourceLocation("item_frame"), ITEM_FRAME_FAKE_DEFINITION); // MagmaCube - decompile fix
     private final ResourceManager resourceManager;
     @Nullable
     private AtlasSet atlasSet;
@@ -189,8 +189,8 @@ public class ModelBakery {
         debug3.popPush("special");
         this.loadTopLevel(new ModelResourceLocation("minecraft:trident_in_hand#inventory"));
         debug3.popPush("textures");
-        LinkedHashSet debug5 = Sets.newLinkedHashSet();
-        Set set = this.topLevelModels.values().stream().flatMap(debug2 -> debug2.getMaterials(this::getModel, debug5).stream()).collect(Collectors.toSet());
+        Set<Pair<String, String>> debug5 = Sets.newLinkedHashSet(); // MagmaCube - decompile fix
+        Set<Material> set = this.topLevelModels.values().stream().flatMap(debug2 -> debug2.getMaterials(this::getModel, debug5).stream()).collect(Collectors.toSet()); // MagmaCube - decompile fix
         set.addAll(UNREFERENCED_TEXTURES);
         debug5.stream().filter(debug0 -> !((String)debug0.getSecond()).equals(MISSING_MODEL_LOCATION_STRING)).forEach(debug0 -> LOGGER.warn("Unable to resolve texture reference: {} in {}", debug0.getFirst(), debug0.getSecond()));
         Map<ResourceLocation, List<Material>> debug7 = set.stream().collect(Collectors.groupingBy(Material::atlasLocation));
@@ -199,7 +199,7 @@ public class ModelBakery {
         for (Map.Entry<ResourceLocation, List<Material>> debug9 : debug7.entrySet()) {
             TextureAtlas debug10 = new TextureAtlas(debug9.getKey());
             TextureAtlas.Preparations debug11 = debug10.prepareToStitch(this.resourceManager, debug9.getValue().stream().map(Material::texture), debug3, debug4);
-            this.atlasPreparations.put(debug9.getKey(), (Pair<TextureAtlas, TextureAtlas.Preparations>)Pair.of((Object)debug10, (Object)debug11));
+            this.atlasPreparations.put(debug9.getKey(), (Pair<TextureAtlas, TextureAtlas.Preparations>)Pair.of(debug10, debug11)); // MagmaCube - decompile fix
         }
         debug3.pop();
     }
@@ -217,15 +217,15 @@ public class ModelBakery {
         this.atlasSet = new AtlasSet(this.atlasPreparations.values().stream().map(Pair::getFirst).collect(Collectors.toList()));
         debug2.popPush("baking");
         this.topLevelModels.keySet().forEach(debug1 -> {
-            BakedModel debug2 = null;
+            BakedModel debug22 = null; // MagmaCube - decompile fix
             try {
-                debug2 = this.bake((ResourceLocation)debug1, BlockModelRotation.X0_Y0);
+                debug22 = this.bake((ResourceLocation)debug1, BlockModelRotation.X0_Y0); // MagmaCube - decompile fix
             }
             catch (Exception debug3) {
                 LOGGER.warn("Unable to bake model: '{}': {}", debug1, (Object)debug3);
             }
-            if (debug2 != null) {
-                this.bakedTopLevelModels.put((ResourceLocation)debug1, debug2);
+            if (debug22 != null) { // MagmaCube - decompile fix
+                this.bakedTopLevelModels.put((ResourceLocation)debug1, debug22); // MagmaCube - decompile fix
             }
         });
         debug2.pop();
@@ -233,7 +233,7 @@ public class ModelBakery {
     }
 
     private static Predicate<BlockState> predicate(StateDefinition<Block, BlockState> debug0, String debug1) {
-        HashMap debug22 = Maps.newHashMap();
+        Map<Property<?>, Comparable<?>> debug22 = Maps.newHashMap(); // MagmaCube - decompile fix
         for (String debug4 : COMMA_SPLITTER.split((CharSequence)debug1)) {
             Iterator debug5 = EQUAL_SPLITTER.split((CharSequence)debug4).iterator();
             if (!debug5.hasNext()) continue;
@@ -241,7 +241,7 @@ public class ModelBakery {
             Property<?> debug7 = debug0.getProperty(debug6);
             if (debug7 != null && debug5.hasNext()) {
                 String debug8 = (String)debug5.next();
-                Object debug9 = ModelBakery.getValueHelper(debug7, debug8);
+                Comparable<?> debug9 = ModelBakery.getValueHelper(debug7, debug8); // MagmaCube - decompile fix
                 if (debug9 != null) {
                     debug22.put(debug7, debug9);
                     continue;
@@ -318,14 +318,14 @@ public class ModelBakery {
             StateDefinition debug4 = Optional.ofNullable(STATIC_DEFINITIONS.get(debug3)).orElseGet(() -> Registry.BLOCK.get(debug3).getStateDefinition());
             this.context.setDefinition(debug4);
             ImmutableList debug52 = ImmutableList.copyOf(this.blockColors.getColoringProperties((Block)debug4.getOwner()));
-            ImmutableList debug62 = debug4.getPossibleStates();
-            HashMap debug7 = Maps.newHashMap();
+            ImmutableList<BlockState> debug62 = debug4.getPossibleStates(); // MagmaCube - decompile fix
+            HashMap<ModelResourceLocation, BlockState> debug7 = Maps.newHashMap(); // MagmaCube - decompile fix
             debug62.forEach(debug2 -> debug7.put(BlockModelShaper.stateToModelLocation(debug3, debug2), debug2));
             HashMap debug8 = Maps.newHashMap();
             ResourceLocation debug9 = new ResourceLocation(debug12.getNamespace(), "blockstates/" + debug12.getPath() + ".json");
             UnbakedModel debug10 = this.unbakedCache.get(MISSING_MODEL_LOCATION);
-            ModelGroupKey debug11 = new ModelGroupKey((List<UnbakedModel>)ImmutableList.of((Object)debug10), (List<Object>)ImmutableList.of());
-            Pair debug122 = Pair.of((Object)debug10, () -> debug11);
+            ModelGroupKey debug11 = new ModelGroupKey((List<UnbakedModel>)ImmutableList.of(debug10), (List<Object>)ImmutableList.of()); // MagmaCube - decompile fix
+            Pair<UnbakedModel, Supplier<ModelGroupKey>> debug122 = Pair.of(debug10, () -> debug11); // MagmaCube - decompile fix
             try {
                 List debug13;
                 try {
@@ -334,36 +334,38 @@ public class ModelBakery {
                             Pair pair = Pair.of((Object)debug1.getSourceName(), (Object)BlockModelDefinition.fromStream(this.context, new InputStreamReader(debug2, StandardCharsets.UTF_8)));
                             return pair;
                         }
-                        catch (Exception debug22) {
-                            throw new BlockStateDefinitionException(String.format("Exception loading blockstate definition: '%s' in resourcepack: '%s': %s", debug1.getLocation(), debug1.getSourceName(), debug22.getMessage()));
+                        catch (Exception debug222) { // MagmaCube - decompile fix
+                            throw new BlockStateDefinitionException(String.format("Exception loading blockstate definition: '%s' in resourcepack: '%s': %s", debug1.getLocation(), debug1.getSourceName(), debug222.getMessage())); // MagmaCube - decompile fix
                         }
                     }).collect(Collectors.toList());
                 }
                 catch (IOException debug14) {
                     LOGGER.warn("Exception loading blockstate definition: {}: {}", (Object)debug9, (Object)debug14);
-                    HashMap debug15 = Maps.newHashMap();
+                    // MagmaCube start - decompile fix
+                    Map<ModelGroupKey, Set<BlockState>> debug15 = Maps.newHashMap(); // MagmaCube - decompile fix
                     debug7.forEach((debug5, debug6) -> {
-                        Pair debug7 = (Pair)debug8.get(debug6);
-                        if (debug7 == null) {
+                        Pair debug72 = (Pair)debug8.get(debug6);
+                        if (debug72 == null) {
                             LOGGER.warn("Exception loading blockstate definition: '{}' missing model for variant: '{}'", (Object)debug9, debug5);
-                            debug7 = debug122;
+                            debug72 = debug122;
                         }
-                        this.cacheAndQueueDependencies((ResourceLocation)debug5, (UnbakedModel)debug7.getFirst());
+                        this.cacheAndQueueDependencies((ResourceLocation)debug5, (UnbakedModel)debug72.getFirst());
                         try {
-                            ModelGroupKey debug8 = (ModelGroupKey)((Supplier)debug7.getSecond()).get();
-                            debug15.computeIfAbsent(debug8, debug0 -> Sets.newIdentityHashSet()).add(debug6);
+                            ModelGroupKey debug82 = (ModelGroupKey)((Supplier)debug72.getSecond()).get();
+                            debug15.computeIfAbsent(debug82, debug0 -> Sets.newIdentityHashSet()).add(debug6);
                         }
-                        catch (Exception debug8) {
-                            LOGGER.warn("Exception evaluating model definition: '{}'", debug5, (Object)debug8);
+                        catch (Exception debug82) {
+                            LOGGER.warn("Exception evaluating model definition: '{}'", debug5, (Object)debug82);
                         }
                     });
                     debug15.forEach((debug1, debug2) -> {
-                        Iterator debug3 = debug2.iterator();
-                        while (debug3.hasNext()) {
-                            BlockState debug4 = (BlockState)debug3.next();
-                            if (debug4.getRenderShape() == RenderShape.MODEL) continue;
-                            debug3.remove();
-                            this.modelGroups.put((Object)debug4, 0);
+                        Iterator debug32 = debug2.iterator();
+                        while (debug32.hasNext()) {
+                            BlockState debug42 = (BlockState)debug32.next();
+                            if (debug42.getRenderShape() == RenderShape.MODEL) continue;
+                            debug32.remove();
+                            this.modelGroups.put(debug42, 0);
+                            // MagmaCube end - decompile fix
                         }
                         if (debug2.size() > 1) {
                             this.registerModelGroup((Iterable<BlockState>)debug2);
@@ -376,7 +378,7 @@ public class ModelBakery {
                     MultiPart debug18;
                     Pair debug15 = (Pair)iterator.next();
                     BlockModelDefinition debug16 = (BlockModelDefinition)debug15.getSecond();
-                    IdentityHashMap debug17 = Maps.newIdentityHashMap();
+                    Map<BlockState, Pair<UnbakedModel, Supplier<ModelGroupKey>>> debug17 = Maps.newIdentityHashMap(); // MagmaCube - decompile fix
                     if (debug16.isMultiPart()) {
                         debug18 = debug16.getMultiPart();
                         debug62.forEach(arg_0 -> ModelBakery.lambda$loadModel$19(debug17, debug18, (List)debug52, arg_0));
@@ -394,29 +396,31 @@ public class ModelBakery {
                 throw new BlockStateDefinitionException(String.format("Exception loading blockstate definition: '%s': %s", debug9, debug13));
             }
             finally {
-                HashMap debug20 = Maps.newHashMap();
+                // MagmaCube start - decompile fix
+                Map<ModelGroupKey, Set<BlockState>> debug20 = Maps.newHashMap();
                 debug7.forEach((debug5, debug6) -> {
-                    Pair debug7 = (Pair)debug8.get(debug6);
-                    if (debug7 == null) {
+                    Pair<UnbakedModel, Supplier<ModelGroupKey>> debug72 = (Pair)debug8.get(debug6);
+                    if (debug72 == null) {
                         LOGGER.warn("Exception loading blockstate definition: '{}' missing model for variant: '{}'", (Object)debug9, debug5);
-                        debug7 = debug122;
+                        debug72 = debug122;
                     }
-                    this.cacheAndQueueDependencies((ResourceLocation)debug5, (UnbakedModel)debug7.getFirst());
+                    this.cacheAndQueueDependencies((ResourceLocation)debug5, (UnbakedModel)debug72.getFirst());
                     try {
-                        ModelGroupKey debug8 = (ModelGroupKey)((Supplier)debug7.getSecond()).get();
-                        debug15.computeIfAbsent(debug8, debug0 -> Sets.newIdentityHashSet()).add(debug6);
+                        ModelGroupKey debug82 = (ModelGroupKey)((Supplier)debug72.getSecond()).get();
+                        debug20.computeIfAbsent(debug82, debug0 -> Sets.newIdentityHashSet()).add(debug6);
                     }
-                    catch (Exception debug8) {
-                        LOGGER.warn("Exception evaluating model definition: '{}'", debug5, (Object)debug8);
+                    catch (Exception debug82) {
+                        LOGGER.warn("Exception evaluating model definition: '{}'", debug5, (Object)debug82);
                     }
                 });
                 debug20.forEach((debug1, debug2) -> {
-                    Iterator debug3 = debug2.iterator();
-                    while (debug3.hasNext()) {
-                        BlockState debug4 = (BlockState)debug3.next();
-                        if (debug4.getRenderShape() == RenderShape.MODEL) continue;
-                        debug3.remove();
-                        this.modelGroups.put((Object)debug4, 0);
+                    Iterator debug32 = debug2.iterator();
+                    while (debug32.hasNext()) {
+                        BlockState debug42 = (BlockState)debug32.next();
+                        if (debug42.getRenderShape() == RenderShape.MODEL) continue;
+                        debug32.remove();
+                        this.modelGroups.put(debug42, 0);
+                        // MagmaCube end - decompile fix
                     }
                     if (debug2.size() > 1) {
                         this.registerModelGroup((Iterable<BlockState>)debug2);
@@ -458,14 +462,13 @@ public class ModelBakery {
         }
         debug5 = debug4.bake(this, this.atlasSet::getSprite, debug2, debug1);
         this.bakedCache.put((Triple<ResourceLocation, Transformation, Boolean>)debug3, (BakedModel)debug5);
-        return debug5;
+        return (BakedModel) debug5; // MagmaCube - decompile fix
     }
 
     /*
      * WARNING - Removed try catching itself - possible behaviour change.
      */
     private BlockModel loadBlockModel(ResourceLocation debug1) throws IOException {
-        Object debug5;
         String debug4;
         Resource debug3;
         Reader debug2;
@@ -495,7 +498,7 @@ public class ModelBakery {
             return blockModel;
         }
         if (debug4.startsWith("builtin/")) {
-            debug5 = debug4.substring("builtin/".length());
+            String debug5 = debug4.substring("builtin/".length()); // MagmaCube - decompile fix
             String debug6 = BUILTIN_MODELS.get(debug5);
             if (debug6 == null) {
                 throw new FileNotFoundException(debug1.toString());
@@ -505,12 +508,11 @@ public class ModelBakery {
             debug3 = this.resourceManager.getResource(new ResourceLocation(debug1.getNamespace(), "models/" + debug1.getPath() + ".json"));
             debug2 = new InputStreamReader(debug3.getInputStream(), StandardCharsets.UTF_8);
         }
-        debug5 = BlockModel.fromStream(debug2);
+        BlockModel debug5 = BlockModel.fromStream(debug2); // MagmaCube - decompile fix
         ((BlockModel)debug5).name = debug1.toString();
-        Object object = debug5;
         IOUtils.closeQuietly((Reader)debug2);
         IOUtils.closeQuietly((Closeable)debug3);
-        return object;
+        return (BlockModel) debug5; // MagmaCube - decompile fix
     }
 
     public Map<ResourceLocation, BakedModel> getBakedTopLevelModels() {
@@ -521,13 +523,13 @@ public class ModelBakery {
         return this.modelGroups;
     }
 
-    private static /* synthetic */ void lambda$loadModel$23(ImmutableList debug0, StateDefinition debug1, Map debug2, List debug3, MultiPart debug4, Pair debug5, BlockModelDefinition debug62, ResourceLocation debug7, Pair debug8, String debug9, MultiVariant debug10) {
+    private static /* synthetic */ void lambda$loadModel$23(ImmutableList<BlockState> debug0, StateDefinition<Block, BlockState> debug1, Map<BlockState, Pair<UnbakedModel, Supplier<ModelGroupKey>>> debug2, List debug3, MultiPart debug4, Pair debug5, BlockModelDefinition debug62, ResourceLocation debug7, Pair debug8, String debug9, MultiVariant debug10) { // MagmaCube - decompile fix
         try {
             debug0.stream().filter(ModelBakery.predicate(debug1, debug9)).forEach(debug6 -> {
-                Pair debug7 = debug2.put(debug6, Pair.of((Object)debug10, () -> ModelGroupKey.create(debug6, debug10, debug3)));
-                if (debug7 != null && debug7.getFirst() != debug4) {
+                Pair debug72 = debug2.put(debug6, Pair.of(debug10, () -> ModelGroupKey.create(debug6, debug10, debug3))); // MagmaCube - decompile fix
+                if (debug72 != null && debug72.getFirst() != debug4) { // MagmaCube - decompile fix
                     debug2.put(debug6, debug5);
-                    throw new RuntimeException("Overlapping definition with: " + (String)debug62.getVariants().entrySet().stream().filter(debug1 -> debug1.getValue() == debug7.getFirst()).findFirst().get().getKey());
+                    throw new RuntimeException("Overlapping definition with: " + (String)debug62.getVariants().entrySet().stream().filter(debug12 -> debug12.getValue() == debug8.getFirst()).findFirst().get().getKey()); // MagmaCube - decompile fix
                 }
             });
         }
@@ -536,8 +538,8 @@ public class ModelBakery {
         }
     }
 
-    private static /* synthetic */ void lambda$loadModel$19(Map debug0, MultiPart debug1, List debug2, BlockState debug3) {
-        debug0.put(debug3, Pair.of((Object)debug1, () -> ModelGroupKey.create(debug3, debug1, debug2)));
+    private static /* synthetic */ void lambda$loadModel$19(Map<BlockState, Pair<UnbakedModel, Supplier<ModelGroupKey>>> debug0, MultiPart debug1, List<Property<?>> debug2, BlockState debug3) { // MagmaCube - decompile fix
+        debug0.put(debug3, Pair.of(debug1, () -> ModelGroupKey.create(debug3, debug1, debug2))); // MagmaCube - decompile fix
     }
 
     static class ModelGroupKey {
@@ -573,7 +575,7 @@ public class ModelBakery {
 
         public static ModelGroupKey create(BlockState debug0, UnbakedModel debug1, Collection<Property<?>> debug2) {
             List<Object> debug3 = ModelGroupKey.getColoringValues(debug0, debug2);
-            return new ModelGroupKey((List<UnbakedModel>)ImmutableList.of((Object)debug1), debug3);
+            return new ModelGroupKey((List<UnbakedModel>)ImmutableList.of(debug1), debug3); // MagmaCube - decompile fix
         }
 
         private static List<Object> getColoringValues(BlockState debug0, Collection<Property<?>> debug1) {
diff --git a/src/main/java/net/minecraft/client/resources/model/MultiPartBakedModel.java b/src/main/java/net/minecraft/client/resources/model/MultiPartBakedModel.java
index 38c32a3495964dde670ee8cdb2c8fe96939de434..73aded793d1c693d740b74181884b7806190c0ca 100644
--- a/src/main/java/net/minecraft/client/resources/model/MultiPartBakedModel.java
+++ b/src/main/java/net/minecraft/client/resources/model/MultiPartBakedModel.java
@@ -59,7 +59,7 @@ public class MultiPartBakedModel implements BakedModel
             }
             this.selectorCache.put(debug1, debug4);
         }
-        final List<BakedQuad> debug7 = (List<BakedQuad>)Lists.newArrayList();
+        final List<BakedQuad> debug7 = Lists.newArrayList(); // MagmaCube - decompile fix
         final long debug8 = debug3.nextLong();
         for (int debug9 = 0; debug9 < debug4.length(); ++debug9) {
             if (debug4.get(debug9)) {
@@ -109,11 +109,11 @@ public class MultiPartBakedModel implements BakedModel
         private final List<Pair<Predicate<BlockState>, BakedModel>> selectors;
         
         public Builder() {
-            this.selectors = (List<Pair<Predicate<BlockState>, BakedModel>>)Lists.newArrayList();
+            this.selectors = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         public void add(final Predicate<BlockState> debug1, final BakedModel debug2) {
-            this.selectors.add((Pair<Predicate<BlockState>, BakedModel>)Pair.of((Object)debug1, (Object)debug2));
+            this.selectors.add((Pair<Predicate<BlockState>, BakedModel>)Pair.of(debug1, debug2)); // MagmaCube - decompile fix
         }
         
         public BakedModel build() {
diff --git a/src/main/java/net/minecraft/client/resources/sounds/SoundEventRegistrationSerializer.java b/src/main/java/net/minecraft/client/resources/sounds/SoundEventRegistrationSerializer.java
index 060a657189a9889e3fde543bec9cf305e40d58a6..bdcb066062bf458c67558e2eb3f9fe163956304f 100644
--- a/src/main/java/net/minecraft/client/resources/sounds/SoundEventRegistrationSerializer.java
+++ b/src/main/java/net/minecraft/client/resources/sounds/SoundEventRegistrationSerializer.java
@@ -23,7 +23,7 @@ public class SoundEventRegistrationSerializer implements JsonDeserializer<SoundE
     }
     
     private List<Sound> getSounds(final JsonObject debug1) {
-        final List<Sound> debug2 = (List<Sound>)Lists.newArrayList();
+        final List<Sound> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         if (debug1.has("sounds")) {
             final JsonArray debug3 = GsonHelper.getAsJsonArray(debug1, "sounds");
             for (int debug4 = 0; debug4 < debug3.size(); ++debug4) {
diff --git a/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java b/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java
index 114cc8bab8fb863dca5fbbfd2873d0b84f0c4ce2..1483017b14c26fea635ff92fb21e56b7d1b20826 100644
--- a/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java
+++ b/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java
@@ -43,7 +43,7 @@ public class ReloadableIdSearchTree<T> implements MutableSearchTree<T>
     
     @Override
     public void add(final T debug1) {
-        this.orderT.put((Object)debug1, this.contents.size());
+        this.orderT.put(debug1, this.contents.size()); // MagmaCube - decompile fix
         this.contents.add(debug1);
         this.index(debug1);
     }
@@ -74,7 +74,7 @@ public class ReloadableIdSearchTree<T> implements MutableSearchTree<T>
         final List<T> debug3 = this.namespaceTree.search(debug1.substring(0, debug2).trim());
         final String debug4 = debug1.substring(debug2 + 1).trim();
         final List<T> debug5 = this.pathTree.search(debug4);
-        return (List<T>)Lists.newArrayList((Iterator)new IntersectionIterator((Iterator<Object>)debug3.iterator(), (Iterator<Object>)debug5.iterator(), this::comparePosition));
+        return (List<T>)Lists.newArrayList(new IntersectionIterator<>(debug3.iterator(), debug5.iterator(), this::comparePosition)); // MagmaCube - decompile fix
     }
     
     public static class IntersectionIterator<T> extends AbstractIterator<T>
diff --git a/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java b/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java
index 3d85ac63696d938708815ce44be8000638d734b1..f9137aa50140a8091634d86a296de6f4a33767f5 100644
--- a/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java
+++ b/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java
@@ -46,7 +46,7 @@ public class ReloadableSearchTree<T> extends ReloadableIdSearchTree<T>
         final String debug4 = debug1.substring(debug2 + 1).trim();
         final List<T> debug5 = this.pathTree.search(debug4);
         final List<T> debug6 = this.tree.search(debug4);
-        return (List<T>)Lists.newArrayList((Iterator)new IntersectionIterator((Iterator<Object>)debug3.iterator(), (Iterator<Object>)new MergingUniqueIterator((Iterator<Object>)debug5.iterator(), (Iterator<Object>)debug6.iterator(), this::comparePosition), this::comparePosition));
+        return (List<T>)Lists.newArrayList(new IntersectionIterator<>(debug3.iterator(), new MergingUniqueIterator<>(debug5.iterator(), debug6.iterator(), this::comparePosition), this::comparePosition)); // MagmaCube - decompile fix
     }
     
     static class MergingUniqueIterator<T> extends AbstractIterator<T>
diff --git a/src/main/java/net/minecraft/client/searchtree/SearchRegistry.java b/src/main/java/net/minecraft/client/searchtree/SearchRegistry.java
index 8c835fb8b5f904681b2586c4ed5a8a3a499cfcec..b20811459fa0bf5dc18fa637ba162f9d86e2987d 100644
--- a/src/main/java/net/minecraft/client/searchtree/SearchRegistry.java
+++ b/src/main/java/net/minecraft/client/searchtree/SearchRegistry.java
@@ -16,7 +16,7 @@ public class SearchRegistry implements ResourceManagerReloadListener
     private final Map<Key<?>, MutableSearchTree<?>> searchTrees;
     
     public SearchRegistry() {
-        this.searchTrees = (Map<Key<?>, MutableSearchTree<?>>)Maps.newHashMap();
+        this.searchTrees = Maps.newHashMap(); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/searchtree/SuffixArray.java b/src/main/java/net/minecraft/client/searchtree/SuffixArray.java
index 7b1f66c15308cca6343b596875cbe274b87c861c..e88516287d5ea8738759d6c9f80fa58039dd1f0e 100644
--- a/src/main/java/net/minecraft/client/searchtree/SuffixArray.java
+++ b/src/main/java/net/minecraft/client/searchtree/SuffixArray.java
@@ -68,17 +68,19 @@ public class SuffixArray<T>
                 return this.compare((int)debug1, (int)debug2);
             }
         };
-        final Swapper debug7 = (debug3, debug4) -> {
-            if (debug3 != debug4) {
-                int debug5 = debug3[debug3];
-                debug3[debug3] = debug3[debug4];
-                debug3[debug4] = debug5;
-                debug5 = debug4[debug3];
-                debug4[debug3] = debug4[debug4];
-                debug4[debug4] = debug5;
-                debug5 = debug5[debug3];
-                debug5[debug3] = debug5[debug4];
-                debug5[debug4] = debug5;
+        // MagmaCube start - decompile fix
+        final Swapper debug7 = (debug3l, debug4l) -> {
+            if (debug3l != debug4l) {
+                int debug52 = debug3[debug3l];
+                debug3[debug3l] = debug3[debug4l];
+                debug3[debug4l] = debug52;
+                debug52 = debug4[debug3l];
+                debug4[debug3l] = debug4[debug4l];
+                debug4[debug4l] = debug52;
+                debug52 = debug5[debug3l];
+                debug5[debug3l] = debug5[debug4l];
+                debug5[debug4l] = debug52;
+                // MagmaCube end - decompile fix
             }
         };
         for (int debug8 = 0; debug8 < debug1; ++debug8) {
@@ -165,7 +167,7 @@ public class SuffixArray<T>
             final int debug5 = debug3 + (debug4 - debug3) / 2;
             final int debug6 = this.compare(debug1, debug5);
             if (SuffixArray.DEBUG_COMPARISONS) {
-                SuffixArray.LOGGER.debug("comparing lower Â¥"{}Â¥" with {} Â¥"{}Â¥": {}", (Object)debug1, (Object)debug5, (Object)this.getString(debug5), (Object)debug6);
+                SuffixArray.LOGGER.debug("comparing lower \"{}\" with {} \"{}\": {}", (Object)debug1, (Object)debug5, (Object)this.getString(debug5), (Object)debug6); // MagmaCube - decompile fix
             }
             if (debug6 > 0) {
                 debug3 = debug5 + 1;
@@ -183,7 +185,7 @@ public class SuffixArray<T>
             final int debug6 = debug3 + (debug4 - debug3) / 2;
             final int debug7 = this.compare(debug1, debug6);
             if (SuffixArray.DEBUG_COMPARISONS) {
-                SuffixArray.LOGGER.debug("comparing upper Â¥"{}Â¥" with {} Â¥"{}Â¥": {}", (Object)debug1, (Object)debug6, (Object)this.getString(debug6), (Object)debug7);
+                SuffixArray.LOGGER.debug("comparing upper \"{}\" with {} \"{}\": {}", (Object)debug1, (Object)debug6, (Object)this.getString(debug6), (Object)debug7); // MagmaCube - decompile fix
             }
             if (debug7 >= 0) {
                 debug3 = debug6 + 1;
diff --git a/src/main/java/net/minecraft/client/server/IntegratedPlayerList.java b/src/main/java/net/minecraft/client/server/IntegratedPlayerList.java
index 0e1a0b54d1e378293e2f2a186f18f16f7fa7dade..26cd0af8a82ea9e988581033ad01f74880ce702d 100644
--- a/src/main/java/net/minecraft/client/server/IntegratedPlayerList.java
+++ b/src/main/java/net/minecraft/client/server/IntegratedPlayerList.java
@@ -52,10 +52,5 @@ extends PlayerList {
     public CompoundTag getSingleplayerData() {
         return this.playerData;
     }
-
-    @Override
-    public /* synthetic */ MinecraftServer getServer() {
-        return this.getServer();
-    }
 }
 
diff --git a/src/main/java/net/minecraft/client/server/IntegratedServer.java b/src/main/java/net/minecraft/client/server/IntegratedServer.java
index f1dddb5b18b21a132fade2ef497c98791b645890..9f200c06de3c389142edba4b971ea21606cf27d9 100644
--- a/src/main/java/net/minecraft/client/server/IntegratedServer.java
+++ b/src/main/java/net/minecraft/client/server/IntegratedServer.java
@@ -196,8 +196,8 @@ extends MinecraftServer {
     @Override
     public void halt(boolean debug1) {
         this.executeBlocking(() -> {
-            ArrayList debug1 = Lists.newArrayList(this.getPlayerList().getPlayers());
-            for (ServerPlayer debug3 : debug1) {
+            ArrayList<ServerPlayer> debug1l = Lists.newArrayList(this.getPlayerList().getPlayers()); // MagmaCube - decompile fix
+            for (ServerPlayer debug3 : debug1l) { // MagmaCube - decompile fix
                 if (debug3.getUUID().equals(this.uuid)) continue;
                 this.getPlayerList().remove(debug3);
             }
diff --git a/src/main/java/net/minecraft/client/server/LanServerDetection.java b/src/main/java/net/minecraft/client/server/LanServerDetection.java
index 9731da08feda74191f419c6a2dc8164732e7d789..3bf30862606d99753dd57478b44d8690ce478067 100644
--- a/src/main/java/net/minecraft/client/server/LanServerDetection.java
+++ b/src/main/java/net/minecraft/client/server/LanServerDetection.java
@@ -31,7 +31,7 @@ public class LanServerDetection
         private boolean isDirty;
         
         public LanServerList() {
-            this.servers = (List<LanServer>)Lists.newArrayList();
+            this.servers = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         public synchronized boolean isDirty() {
diff --git a/src/main/java/net/minecraft/client/sounds/ChannelAccess.java b/src/main/java/net/minecraft/client/sounds/ChannelAccess.java
index 3c060b260a99285da3ea7a8d915bda23f0fc095d..b70f423fedaa55683659c570cc844124dd93a36e 100644
--- a/src/main/java/net/minecraft/client/sounds/ChannelAccess.java
+++ b/src/main/java/net/minecraft/client/sounds/ChannelAccess.java
@@ -20,25 +20,22 @@ public class ChannelAccess
     private final Executor executor;
     
     public ChannelAccess(final Library debug1, final Executor debug2) {
-        this.channels = (Set<ChannelHandle>)Sets.newIdentityHashSet();
+        this.channels = Sets.newIdentityHashSet(); // MagmaCube - decompile fix
         this.library = debug1;
         this.executor = debug2;
     }
     
     public CompletableFuture<ChannelHandle> createHandle(final Library.Pool debug1) {
         final CompletableFuture<ChannelHandle> debug2 = new CompletableFuture<ChannelHandle>();
-        final Channel debug3;
-        final ChannelHandle debug4;
-        final CompletableFuture<ChannelHandle> completableFuture;
         this.executor.execute(() -> {
-            debug3 = this.library.acquireChannel(debug1);
+            Channel debug3 = this.library.acquireChannel(debug1); // MagmaCube - decompile fix
             if (debug3 != null) {
-                debug4 = new ChannelHandle(debug3);
+                ChannelHandle debug4 = new ChannelHandle(debug3); // MagmaCube - decompile fix
                 this.channels.add(debug4);
-                completableFuture.complete(debug4);
+                debug2.complete(debug4); // MagmaCube - decompile fix
             }
             else {
-                completableFuture.complete(null);
+                debug2.complete(null); // MagmaCube - decompile fix
             }
             return;
         });
@@ -50,12 +47,10 @@ public class ChannelAccess
     }
     
     public void scheduleTick() {
-        final Iterator<ChannelHandle> debug1;
-        ChannelHandle debug2;
         this.executor.execute(() -> {
-            debug1 = this.channels.iterator();
+            Iterator<ChannelHandle> debug1 = this.channels.iterator(); // MagmaCube - decompile fix
             while (debug1.hasNext()) {
-                debug2 = debug1.next();
+                ChannelHandle debug2 = debug1.next(); // MagmaCube - decompile fix
                 debug2.channel.updateStream();
                 if (debug2.channel.stopped()) {
                     debug2.release();
diff --git a/src/main/java/net/minecraft/client/sounds/SoundBufferLibrary.java b/src/main/java/net/minecraft/client/sounds/SoundBufferLibrary.java
index feef1da094b814b4be8a4ea27862297c467a5176..e1b41fa2825e9c0bb760a78f27e2064e4f370c8d 100644
--- a/src/main/java/net/minecraft/client/sounds/SoundBufferLibrary.java
+++ b/src/main/java/net/minecraft/client/sounds/SoundBufferLibrary.java
@@ -23,33 +23,29 @@ public class SoundBufferLibrary
     private final Map<ResourceLocation, CompletableFuture<SoundBuffer>> cache;
     
     public SoundBufferLibrary(final ResourceManager debug1) {
-        this.cache = (Map<ResourceLocation, CompletableFuture<SoundBuffer>>)Maps.newHashMap();
+        this.cache = Maps.newHashMap(); // MagmaCube - decompile fix
         this.resourceManager = debug1;
     }
     
     public CompletableFuture<SoundBuffer> getCompleteBuffer(final ResourceLocation debug1) {
-        Resource debug2;
-        InputStream debug3;
-        OggAudioStream debug4;
-        ByteBuffer debug5;
-        SoundBuffer soundBuffer;
-        final Throwable t2;
-        final Throwable t4;
-        final Throwable t6;
-        return this.cache.computeIfAbsent(debug1, debug1 -> CompletableFuture.supplyAsync(() -> {
+        return this.cache.computeIfAbsent(debug1, debug1l -> CompletableFuture.supplyAsync(() -> { // MagmaCube - decompile fix
+            Throwable t2 = null; // MagmaCube - decompile fix
+            Throwable t6 = null; // MagmaCube - decompile fix
             try {
-                debug2 = this.resourceManager.getResource(debug1);
+                Resource debug2 = this.resourceManager.getResource(debug1l); // MagmaCube - decompile fix
                 try {
-                    debug3 = debug2.getInputStream();
+                    Throwable t4 = null; // MagmaCube - decompile fix
+                    InputStream debug3 = debug2.getInputStream(); // MagmaCube - decompile fix
                     try {
-                        debug4 = new OggAudioStream(debug3);
+                        OggAudioStream debug4 = null; // MagmaCube - decompile fix
                         try {
-                            debug5 = debug4.readAll();
-                            soundBuffer = new SoundBuffer(debug5, debug4.getFormat());
+                            debug4 = new OggAudioStream(debug3); // MagmaCube - decompile fix
+                            ByteBuffer debug5 = debug4.readAll(); // MagmaCube - decompile fix
+                            SoundBuffer soundBuffer = new SoundBuffer(debug5, debug4.getFormat()); // MagmaCube - decompile fix
                             return soundBuffer;
                         }
                         catch (Throwable t) {
-                            throw t;
+                            t2 = t; // MagmaCube - decompile fix
                         }
                         finally {
                             if (debug4 != null) {
@@ -68,7 +64,7 @@ public class SoundBufferLibrary
                         }
                     }
                     catch (Throwable t3) {
-                        throw t3;
+                        t4 = t3; // MagmaCube - decompile fix
                     }
                     finally {
                         if (debug3 != null) {
@@ -87,7 +83,7 @@ public class SoundBufferLibrary
                     }
                 }
                 catch (Throwable t5) {
-                    throw t5;
+                    t6 = t5; // MagmaCube - decompile fix
                 }
                 finally {
                     if (debug2 != null) {
@@ -108,24 +104,23 @@ public class SoundBufferLibrary
             catch (IOException debug6) {
                 throw new CompletionException(debug6);
             }
+            return null; // MagmaCube - decompile fix
         }, Util.backgroundExecutor()));
     }
     
     public CompletableFuture<AudioStream> getStream(final ResourceLocation debug1, final boolean debug2) {
-        Resource debug3;
-        InputStream debug4;
-        final Object o3;
         return CompletableFuture.supplyAsync(() -> {
             try {
-                debug3 = this.resourceManager.getResource(debug1);
-                debug4 = debug3.getInputStream();
+                Resource debug3 = this.resourceManager.getResource(debug1); // MagmaCube - decompile fix
+                InputStream debug4 = debug3.getInputStream(); // MagmaCube - decompile fix
+                AudioStream o3; // MagmaCube - decompile fix
                 if (debug2) {
                     // new(net.minecraft.client.sounds.LoopingAudioStream.class)
-                    new LoopingAudioStream(OggAudioStream::new, debug4);
+                    o3 = new LoopingAudioStream(OggAudioStream::new, debug4); // MagmaCube - decompile fix
                 }
                 else {
                     // new(com.mojang.blaze3d.audio.OggAudioStream.class)
-                    new OggAudioStream(debug4);
+                    o3 = new OggAudioStream(debug4); // MagmaCube - decompile fix
                 }
                 return o3;
             }
@@ -136,11 +131,11 @@ public class SoundBufferLibrary
     }
     
     public void clear() {
-        this.cache.values().forEach(debug0 -> debug0.thenAccept((Consumer)SoundBuffer::discardAlBuffer));
+        this.cache.values().forEach(debug0 -> debug0.thenAccept(SoundBuffer::discardAlBuffer)); // MagmaCube - decompile fix
         this.cache.clear();
     }
     
     public CompletableFuture<?> preload(final Collection<Sound> debug1) {
-        return CompletableFuture.allOf((CompletableFuture<?>[])debug1.stream().map(debug1 -> this.getCompleteBuffer(debug1.getPath())).toArray(CompletableFuture[]::new));
+        return CompletableFuture.allOf((CompletableFuture<?>[])debug1.stream().map(debug1l -> this.getCompleteBuffer(debug1l.getPath())).toArray(CompletableFuture[]::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/client/sounds/SoundEngine.java b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
index 313de1d50ec88f66320454a6421871b3411a2230..5e066199e59545e26734102eb7ada29a133d9fba 100644
--- a/src/main/java/net/minecraft/client/sounds/SoundEngine.java
+++ b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
@@ -129,11 +129,11 @@ public class SoundEngine {
         }
         this.instanceToChannel.forEach((debug12, debug2) -> {
             float debug3 = this.calculateVolume((SoundInstance)debug12);
-            debug2.execute(debug1 -> {
+            debug2.execute(debug1l -> { // MagmaCube - decompile fix
                 if (debug3 <= 0.0f) {
-                    debug1.stop();
+                    debug1l.stop(); // MagmaCube - decompile fix
                 } else {
-                    debug1.setVolume(debug3);
+                    debug1l.setVolume(debug3); // MagmaCube - decompile fix
                 }
             });
         });
@@ -331,28 +331,29 @@ public class SoundEngine {
         LOGGER.debug(MARKER, "Playing sound {} for event {}", (Object)debug4.getLocation(), (Object)debug3);
         this.soundDeleteTime.put(debug1, this.tickCount + 20);
         this.instanceToChannel.put(debug1, debug16);
-        this.instanceBySource.put((Object)debug7, (Object)debug1);
+        this.instanceBySource.put(debug7, debug1); // MagmaCube - decompile fix
+        boolean finalDebug1 = debug13; // MagmaCube - decompile fix
         debug16.execute(debug8 -> {
             debug8.setPitch(debug9);
             debug8.setVolume(debug82);
             if (debug10 == SoundInstance.Attenuation.LINEAR) {
-                debug8.linearAttenuation((float)debug122);
+                debug8.linearAttenuation((float)debug6); // MagmaCube - decompile fix
             } else {
                 debug8.disableAttenuation();
             }
-            debug8.setLooping(debug13 && !debug14);
+            debug8.setLooping(finalDebug1 && !debug14);
             debug8.setSelfPosition(debug122);
             debug8.setRelative(debug11);
         });
         if (!debug14) {
-            this.soundBuffers.getCompleteBuffer(debug4.getPath()).thenAccept(debug12 -> debug16.execute(debug1 -> {
-                debug1.attachStaticBuffer((SoundBuffer)debug12);
-                debug1.play();
+            this.soundBuffers.getCompleteBuffer(debug4.getPath()).thenAccept(debug12 -> debug16.execute(debug1l -> { // MagmaCube - decompile fix
+                debug1l.attachStaticBuffer((SoundBuffer)debug12); // MagmaCube - decompile fix
+                debug1l.play(); // MagmaCube - decompile fix
             }));
         } else {
-            this.soundBuffers.getStream(debug4.getPath(), debug13).thenAccept(debug12 -> debug16.execute(debug1 -> {
-                debug1.attachBufferStream((AudioStream)debug12);
-                debug1.play();
+            this.soundBuffers.getStream(debug4.getPath(), debug13).thenAccept(debug12 -> debug16.execute(debug1l -> { // MagmaCube - decompile fix
+                debug1l.attachBufferStream((AudioStream)debug12); // MagmaCube - decompile fix
+                debug1l.play(); // MagmaCube - decompile fix
             }));
         }
         if (debug1 instanceof TickableSoundInstance) {
@@ -407,7 +408,7 @@ public class SoundEngine {
 
     public void stop(@Nullable ResourceLocation debug1, @Nullable SoundSource debug2) {
         if (debug2 != null) {
-            for (SoundInstance debug4 : this.instanceBySource.get((Object)debug2)) {
+            for (SoundInstance debug4 : this.instanceBySource.get(debug2)) { // MagmaCube - decompile fix
                 if (debug1 != null && !debug4.getLocation().equals(debug1)) continue;
                 this.stop(debug4);
             }
diff --git a/src/main/java/net/minecraft/client/sounds/SoundManager.java b/src/main/java/net/minecraft/client/sounds/SoundManager.java
index 617bc551b0e545d8aec028cd168977ce48211d86..587b3056f2df43c11dffaa4d51fbc74bc0d59ad6 100644
--- a/src/main/java/net/minecraft/client/sounds/SoundManager.java
+++ b/src/main/java/net/minecraft/client/sounds/SoundManager.java
@@ -36,7 +36,7 @@ import org.apache.logging.log4j.Logger;
 import net.minecraft.client.resources.sounds.Sound;
 import net.minecraft.server.packs.resources.SimplePreparableReloadListener;
 
-public class SoundManager extends SimplePreparableReloadListener<Preparations>
+public class SoundManager extends SimplePreparableReloadListener<SoundManager.Preparations> // MagmaCube - decompile fix
 {
     public static final Sound EMPTY_SOUND;
     private static final Logger LOGGER;
@@ -46,7 +46,7 @@ public class SoundManager extends SimplePreparableReloadListener<Preparations>
     private final SoundEngine soundEngine;
     
     public SoundManager(final ResourceManager debug1, final Options debug2) {
-        this.registry = (Map<ResourceLocation, WeighedSoundEvents>)Maps.newHashMap();
+        this.registry = Maps.newHashMap(); // MagmaCube - decompile fix
         this.soundEngine = new SoundEngine(this, debug2, debug1);
     }
     
@@ -203,7 +203,7 @@ public class SoundManager extends SimplePreparableReloadListener<Preparations>
         private final Map<ResourceLocation, WeighedSoundEvents> registry;
         
         protected Preparations() {
-            this.registry = (Map<ResourceLocation, WeighedSoundEvents>)Maps.newHashMap();
+            this.registry = Maps.newHashMap(); // MagmaCube - decompile fix
         }
         
         private void handleRegistration(final ResourceLocation debug1, final SoundEventRegistration debug2, final ResourceManager debug3) {
diff --git a/src/main/java/net/minecraft/client/sounds/WeighedSoundEvents.java b/src/main/java/net/minecraft/client/sounds/WeighedSoundEvents.java
index 61fd122e4f4d7a9034817ee6b66488d19228793b..8e175924f895707ccf8678e841fe37948cb96a81 100644
--- a/src/main/java/net/minecraft/client/sounds/WeighedSoundEvents.java
+++ b/src/main/java/net/minecraft/client/sounds/WeighedSoundEvents.java
@@ -19,7 +19,7 @@ public class WeighedSoundEvents implements Weighted<Sound>
     private final Component subtitle;
     
     public WeighedSoundEvents(final ResourceLocation debug1, @Nullable final String debug2) {
-        this.list = (List<Weighted<Sound>>)Lists.newArrayList();
+        this.list = Lists.newArrayList(); // MagmaCube - decompile fix
         this.random = new Random();
         this.location = debug1;
         this.subtitle = ((debug2 == null) ? null : new TranslatableComponent(debug2));
diff --git a/src/main/java/net/minecraft/client/tutorial/FindTreeTutorialStepInstance.java b/src/main/java/net/minecraft/client/tutorial/FindTreeTutorialStepInstance.java
index 70fa00a2a56d94f96b7fb3fcb48cf0256b640227..bd21a5de7ae7903c0c4526f75fd1faee4c0ee364 100644
--- a/src/main/java/net/minecraft/client/tutorial/FindTreeTutorialStepInstance.java
+++ b/src/main/java/net/minecraft/client/tutorial/FindTreeTutorialStepInstance.java
@@ -27,7 +27,7 @@ import net.minecraft.world.phys.HitResult;
 
 public class FindTreeTutorialStepInstance
 implements TutorialStepInstance {
-    private static final Set<Block> TREE_BLOCKS = Sets.newHashSet((Object[])new Block[]{Blocks.OAK_LOG, Blocks.SPRUCE_LOG, Blocks.BIRCH_LOG, Blocks.JUNGLE_LOG, Blocks.ACACIA_LOG, Blocks.DARK_OAK_LOG, Blocks.WARPED_STEM, Blocks.CRIMSON_STEM, Blocks.OAK_WOOD, Blocks.SPRUCE_WOOD, Blocks.BIRCH_WOOD, Blocks.JUNGLE_WOOD, Blocks.ACACIA_WOOD, Blocks.DARK_OAK_WOOD, Blocks.WARPED_HYPHAE, Blocks.CRIMSON_HYPHAE, Blocks.OAK_LEAVES, Blocks.SPRUCE_LEAVES, Blocks.BIRCH_LEAVES, Blocks.JUNGLE_LEAVES, Blocks.ACACIA_LEAVES, Blocks.DARK_OAK_LEAVES, Blocks.NETHER_WART_BLOCK, Blocks.WARPED_WART_BLOCK});
+    private static final Set<Block> TREE_BLOCKS = Sets.newHashSet(new Block[]{Blocks.OAK_LOG, Blocks.SPRUCE_LOG, Blocks.BIRCH_LOG, Blocks.JUNGLE_LOG, Blocks.ACACIA_LOG, Blocks.DARK_OAK_LOG, Blocks.WARPED_STEM, Blocks.CRIMSON_STEM, Blocks.OAK_WOOD, Blocks.SPRUCE_WOOD, Blocks.BIRCH_WOOD, Blocks.JUNGLE_WOOD, Blocks.ACACIA_WOOD, Blocks.DARK_OAK_WOOD, Blocks.WARPED_HYPHAE, Blocks.CRIMSON_HYPHAE, Blocks.OAK_LEAVES, Blocks.SPRUCE_LEAVES, Blocks.BIRCH_LEAVES, Blocks.JUNGLE_LEAVES, Blocks.ACACIA_LEAVES, Blocks.DARK_OAK_LEAVES, Blocks.NETHER_WART_BLOCK, Blocks.WARPED_WART_BLOCK}); // MagmaCube - decompile fix
     private static final Component TITLE = new TranslatableComponent("tutorial.find_tree.title");
     private static final Component DESCRIPTION = new TranslatableComponent("tutorial.find_tree.description");
     private final Tutorial tutorial;
diff --git a/src/main/java/net/minecraft/client/tutorial/TutorialSteps.java b/src/main/java/net/minecraft/client/tutorial/TutorialSteps.java
index 326690b613d4957ae6bc8f79e11a7eacdc2483a6..1cb998fbbef588d83890eec1ebccf4b487477962 100644
--- a/src/main/java/net/minecraft/client/tutorial/TutorialSteps.java
+++ b/src/main/java/net/minecraft/client/tutorial/TutorialSteps.java
@@ -4,17 +4,17 @@ import java.util.function.Function;
 
 public enum TutorialSteps
 {
-    MOVEMENT("movement", (Function<Tutorial, T>)MovementTutorialStepInstance::new), 
-    FIND_TREE("find_tree", (Function<Tutorial, T>)FindTreeTutorialStepInstance::new), 
-    PUNCH_TREE("punch_tree", (Function<Tutorial, T>)PunchTreeTutorialStepInstance::new), 
-    OPEN_INVENTORY("open_inventory", (Function<Tutorial, T>)OpenInventoryTutorialStep::new), 
-    CRAFT_PLANKS("craft_planks", (Function<Tutorial, T>)CraftPlanksTutorialStep::new), 
-    NONE("none", (Function<Tutorial, T>)CompletedTutorialStepInstance::new);
+    MOVEMENT("movement", MovementTutorialStepInstance::new), // MagmaCube - decompile fix
+    FIND_TREE("find_tree", FindTreeTutorialStepInstance::new), // MagmaCube - decompile fix
+    PUNCH_TREE("punch_tree", PunchTreeTutorialStepInstance::new), // MagmaCube - decompile fix
+    OPEN_INVENTORY("open_inventory", OpenInventoryTutorialStep::new), // MagmaCube - decompile fix
+    CRAFT_PLANKS("craft_planks", CraftPlanksTutorialStep::new), // MagmaCube - decompile fix
+    NONE("none", CompletedTutorialStepInstance::new); // MagmaCube - decompile fix
     
     private final String name;
     private final Function<Tutorial, ? extends TutorialStepInstance> constructor;
     
-    private TutorialSteps(final String debug3, final Function<Tutorial, T> debug4) {
+    private TutorialSteps(final String debug3, final Function<Tutorial, TutorialStepInstance> debug4) { // MagmaCube - decompile fix
         this.name = debug3;
         this.constructor = debug4;
     }
diff --git a/src/main/java/net/minecraft/commands/CommandFunction.java b/src/main/java/net/minecraft/commands/CommandFunction.java
index ec3b217c276a0a88cc1bdadfc815f89d8d6d4910..14d4fda74de79715804633cf83ad44f0d2b8538c 100644
--- a/src/main/java/net/minecraft/commands/CommandFunction.java
+++ b/src/main/java/net/minecraft/commands/CommandFunction.java
@@ -31,7 +31,7 @@ public class CommandFunction
     }
     
     public static CommandFunction fromLines(final ResourceLocation debug0, final CommandDispatcher<CommandSourceStack> debug1, final CommandSourceStack debug2, final List<String> debug3) {
-        final List<Entry> debug4 = (List<Entry>)Lists.newArrayListWithCapacity(debug3.size());
+        final List<Entry> debug4 = Lists.newArrayListWithCapacity(debug3.size()); // MagmaCube - decompile fix
         for (int debug5 = 0; debug5 < debug3.size(); ++debug5) {
             final int debug6 = debug5 + 1;
             final String debug7 = debug3.get(debug5).trim();
@@ -48,7 +48,7 @@ public class CommandFunction
                     }
                     else {
                         try {
-                            final ParseResults<CommandSourceStack> debug10 = (ParseResults<CommandSourceStack>)debug1.parse(debug8, (Object)debug2);
+                            final ParseResults<CommandSourceStack> debug10 = (ParseResults<CommandSourceStack>)debug1.parse(debug8, debug2); // MagmaCube - decompile fix
                             if (debug10.getReader().canRead()) {
                                 throw Commands.getParseException(debug10);
                             }
@@ -74,7 +74,7 @@ public class CommandFunction
         
         @Override
         public void execute(final ServerFunctionManager debug1, final CommandSourceStack debug2, final ArrayDeque<ServerFunctionManager.QueuedCommand> debug3, final int debug4) throws CommandSyntaxException {
-            debug1.getDispatcher().execute(new ParseResults(this.parse.getContext().withSource((Object)debug2), this.parse.getReader(), this.parse.getExceptions()));
+            debug1.getDispatcher().execute(new ParseResults(this.parse.getContext().withSource(debug2), this.parse.getReader(), this.parse.getExceptions())); // MagmaCube - decompile fix
         }
         
         @Override
@@ -93,15 +93,11 @@ public class CommandFunction
         
         @Override
         public void execute(final ServerFunctionManager debug1, final CommandSourceStack debug2, final ArrayDeque<ServerFunctionManager.QueuedCommand> debug3, final int debug4) {
-            final Entry[] debug5;
-            final int debug6;
-            final int debug7;
-            int debug8;
-            this.function.get(debug1).ifPresent(debug4 -> {
-                debug5 = debug4.getEntries();
-                debug6 = debug4 - debug3.size();
-                debug7 = Math.min(debug5.length, debug6);
-                for (debug8 = debug7 - 1; debug8 >= 0; --debug8) {
+            this.function.get(debug1).ifPresent(debug4l -> { // MagmaCube - decompile fix
+                Entry[] debug5 = debug4l.getEntries(); // MagmaCube - decompile fix
+                int debug6 = debug4 - debug3.size(); // MagmaCube - decompile fix
+                int debug7 = Math.min(debug5.length, debug6); // MagmaCube - decompile fix
+                for (int debug8 = debug7 - 1; debug8 >= 0; --debug8) { // MagmaCube - decompile fix
                     debug3.addFirst(new ServerFunctionManager.QueuedCommand(debug1, debug2, debug5[debug8]));
                 }
             });
diff --git a/src/main/java/net/minecraft/commands/CommandSourceStack.java b/src/main/java/net/minecraft/commands/CommandSourceStack.java
index ef4546931347c0ddfffb34315775209a917eb4b0..f3123b6a23610317599ffb00d56f42748d9b900f 100644
--- a/src/main/java/net/minecraft/commands/CommandSourceStack.java
+++ b/src/main/java/net/minecraft/commands/CommandSourceStack.java
@@ -262,7 +262,7 @@ implements SharedSuggestionProvider {
 
     @Override
     public Collection<String> getOnlinePlayerNames() {
-        return Lists.newArrayList((Object[])this.server.getPlayerNames());
+        return Lists.newArrayList(this.server.getPlayerNames()); // MagmaCube - decompile fix
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 4922f00d6de7a2ce77a2bef839011be3b666e0b2..edf812e137bee23d47a0fbbfcbe1089e958f4aa4 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -224,7 +224,7 @@ public class Commands {
         }
         debug12.getServer().getProfiler().push(debug2);
         try {
-            int n = this.dispatcher.execute(debug3, (Object)debug12);
+            int n = this.dispatcher.execute(debug3, debug12); // MagmaCube - decompile fix
             return n;
         }
         catch (CommandRuntimeException debug4) {
@@ -297,11 +297,11 @@ public class Commands {
             if (debug7.getRedirect() != null) {
                 debug7.redirect(debug4.get((Object)debug7.getRedirect()));
             }
-            debug8 = debug7.build();
-            debug4.put((CommandNode<CommandSourceStack>)debug6, (CommandNode<SharedSuggestionProvider>)debug8);
-            debug2.addChild((CommandNode)debug8);
+            CommandNode debug9 = debug7.build(); // MagmaCube - decompile fix
+            debug4.put((CommandNode<CommandSourceStack>)debug6, debug9); // MagmaCube - decompile fix
+            debug2.addChild((CommandNode)debug9); // MagmaCube - decompile fix
             if (debug6.getChildren().isEmpty()) continue;
-            this.fillUsableCommands((CommandNode<CommandSourceStack>)debug6, (CommandNode<SharedSuggestionProvider>)debug8, debug3, debug4);
+            this.fillUsableCommands((CommandNode<CommandSourceStack>)debug6, debug9, debug3, debug4); // MagmaCube - decompile fix
         }
     }
 
diff --git a/src/main/java/net/minecraft/commands/arguments/AngleArgument.java b/src/main/java/net/minecraft/commands/arguments/AngleArgument.java
index 3b1058322c70f9756427ca0e7201ac16c0f55a07..cff08138a082aafd046a798731528e4860c6e4d5 100644
--- a/src/main/java/net/minecraft/commands/arguments/AngleArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/AngleArgument.java
@@ -14,7 +14,7 @@ import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import java.util.Collection;
 import com.mojang.brigadier.arguments.ArgumentType;
 
-public class AngleArgument implements ArgumentType<SingleAngle>
+public class AngleArgument implements ArgumentType<AngleArgument.SingleAngle> // MagmaCube - decompile fix
 {
     private static final Collection<String> EXAMPLES;
     public static final SimpleCommandExceptionType ERROR_NOT_COMPLETE;
diff --git a/src/main/java/net/minecraft/commands/arguments/ComponentArgument.java b/src/main/java/net/minecraft/commands/arguments/ComponentArgument.java
index 922ef97d7a23e0f812e5480dadfb88a917c2dff4..880cd89b06422fd08675e72b1320d6e0d64cdb11 100644
--- a/src/main/java/net/minecraft/commands/arguments/ComponentArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ComponentArgument.java
@@ -46,10 +46,9 @@ public class ComponentArgument implements ArgumentType<Component>
     }
     
     static {
-        EXAMPLES = Arrays.asList("Â¥"hello worldÂ¥"", "Â¥"Â¥"", "Â¥"{Â¥"textÂ¥":Â¥"hello worldÂ¥"}", "[Â¥"Â¥"]");
-        final TranslatableComponent translatableComponent;
+        EXAMPLES = Arrays.asList("\"hello world\"", "\"\"", "\"{\"text\":\"hello world\"}", "[\"\"]"); // MagmaCube - decompile fix
         ERROR_INVALID_JSON = new DynamicCommandExceptionType(debug0 -> {
-            new TranslatableComponent("argument.component.invalid", new Object[] { debug0 });
+            TranslatableComponent translatableComponent = new TranslatableComponent("argument.component.invalid", new Object[] { debug0 }); // MagmaCube - decompile fix
             return translatableComponent;
         });
     }
diff --git a/src/main/java/net/minecraft/commands/arguments/DimensionArgument.java b/src/main/java/net/minecraft/commands/arguments/DimensionArgument.java
index 22de30ed6621af0d01e0e6c6a3079c3a595bf644..7f6e27902935277e66f4ebbc1dad205676abc9d8 100644
--- a/src/main/java/net/minecraft/commands/arguments/DimensionArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/DimensionArgument.java
@@ -65,9 +65,5 @@ implements ArgumentType<ResourceLocation> {
         }
         return debug4;
     }
-
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/commands/arguments/EntityAnchorArgument.java b/src/main/java/net/minecraft/commands/arguments/EntityAnchorArgument.java
index 3f66f85fcfa200efce64f1ef9e14fd5652b147f9..c40f53b480d85e24509bfec28f404f3f97fd3211 100644
--- a/src/main/java/net/minecraft/commands/arguments/EntityAnchorArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/EntityAnchorArgument.java
@@ -24,7 +24,7 @@ import com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
 import java.util.Collection;
 import com.mojang.brigadier.arguments.ArgumentType;
 
-public class EntityAnchorArgument implements ArgumentType<Anchor>
+public class EntityAnchorArgument implements ArgumentType<EntityAnchorArgument.Anchor> // MagmaCube - decompile fix
 {
     private static final Collection<String> EXAMPLES;
     private static final DynamicCommandExceptionType ERROR_INVALID;
@@ -58,10 +58,8 @@ public class EntityAnchorArgument implements ArgumentType<Anchor>
     
     static {
         EXAMPLES = Arrays.asList("eyes", "feet");
-        final TranslatableComponent translatableComponent;
         ERROR_INVALID = new DynamicCommandExceptionType(debug0 -> {
-            new TranslatableComponent("argument.anchor.invalid", new Object[] { debug0 });
-            return translatableComponent;
+            return new TranslatableComponent("argument.anchor.invalid", new Object[] { debug0 }); // MagmaCube - decompile fix
         });
     }
     
@@ -97,14 +95,13 @@ public class EntityAnchorArgument implements ArgumentType<Anchor>
         }
         
         static {
-            final Anchor[] array;
-            int length;
-            int i;
-            Anchor debug2;
-            BY_NAME = Util.make((Map<String, Anchor>)Maps.newHashMap(), debug0 -> {
-                values();
-                for (length = array.length; i < length; ++i) {
-                    debug2 = array[i];
+            // MagmaCube start - decompile fix
+            BY_NAME = Util.make(Maps.newHashMap(), debug0 -> {
+                Anchor[] array = values();
+                int i = 0;
+                for (int length = array.length; i < length; ++i) {
+                    Anchor debug2 = array[i];
+                    // MagmaCube end - decompile fix
                     debug0.put(debug2.name, debug2);
                 }
             });
diff --git a/src/main/java/net/minecraft/commands/arguments/GameProfileArgument.java b/src/main/java/net/minecraft/commands/arguments/GameProfileArgument.java
index 98d18c8567033b2d0c445747c43aeb8aaad6c7d0..5a93b00fa1691f9da9a7cafaf8553075ae698515 100644
--- a/src/main/java/net/minecraft/commands/arguments/GameProfileArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/GameProfileArgument.java
@@ -40,7 +40,7 @@ import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.server.level.ServerPlayer;
 
 public class GameProfileArgument
-implements ArgumentType<Result> {
+implements ArgumentType<GameProfileArgument.Result> { // MagmaCube - decompile fix
     private static final Collection<String> EXAMPLES = Arrays.asList("Player", "0123", "dd12be42-52a9-4a91-a8a1-11c01849e498", "@e");
     public static final SimpleCommandExceptionType ERROR_UNKNOWN_PLAYER = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.player.unknown"));
 
@@ -67,11 +67,11 @@ implements ArgumentType<Result> {
         }
         String debug3 = debug12.getString().substring(debug2, debug12.getCursor());
         return debug1 -> {
-            GameProfile debug2 = debug1.getServer().getProfileCache().get(debug3);
-            if (debug2 == null) {
+            GameProfile debug2l = debug1.getServer().getProfileCache().get(debug3); // MagmaCube - decompile fix
+            if (debug2l == null) { // MagmaCube - decompile fix
                 throw ERROR_UNKNOWN_PLAYER.create();
             }
-            return Collections.singleton(debug2);
+            return Collections.singleton(debug2l); // MagmaCube - decompile fix
         };
     }
 
@@ -95,10 +95,6 @@ implements ArgumentType<Result> {
         return EXAMPLES;
     }
 
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
-
     public static class SelectorResult
     implements Result {
         private final EntitySelector selector;
diff --git a/src/main/java/net/minecraft/commands/arguments/MessageArgument.java b/src/main/java/net/minecraft/commands/arguments/MessageArgument.java
index 19f48d5857ec99a8b64dc2f6d84d6b5a0dd3d62d..32e7543da14544265bc2515fe9b07a22763e9fb2 100644
--- a/src/main/java/net/minecraft/commands/arguments/MessageArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/MessageArgument.java
@@ -16,7 +16,7 @@ import com.mojang.brigadier.context.CommandContext;
 import java.util.Collection;
 import com.mojang.brigadier.arguments.ArgumentType;
 
-public class MessageArgument implements ArgumentType<Message>
+public class MessageArgument implements ArgumentType<MessageArgument.Message> // MagmaCube - decompile fix
 {
     private static final Collection<String> EXAMPLES;
     
@@ -78,7 +78,7 @@ public class MessageArgument implements ArgumentType<Message>
                 debug0.setCursor(debug0.getTotalLength());
                 return new Message(debug2, new Part[0]);
             }
-            final List<Part> debug3 = (List<Part>)Lists.newArrayList();
+            final List<Part> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
             final int debug4 = debug0.getCursor();
             while (debug0.canRead()) {
                 if (debug0.peek() == '@') {
diff --git a/src/main/java/net/minecraft/commands/arguments/NbtPathArgument.java b/src/main/java/net/minecraft/commands/arguments/NbtPathArgument.java
index 640dc11d301ba479918207e70f08f89ccc80be5a..9ddb54ff3fee094670597ee510110f0b70312c1c 100644
--- a/src/main/java/net/minecraft/commands/arguments/NbtPathArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/NbtPathArgument.java
@@ -2,10 +2,9 @@ package net.minecraft.commands.arguments;
 
 import java.util.AbstractList;
 import org.apache.commons.lang3.mutable.MutableBoolean;
-import java.util.function.Consumer;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.CollectionTag;
-import java.util.Iterator;
+
 import java.util.function.BiConsumer;
 import java.util.function.Function;
 import java.util.function.Supplier;
@@ -32,7 +31,7 @@ import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import java.util.Collection;
 import com.mojang.brigadier.arguments.ArgumentType;
 
-public class NbtPathArgument implements ArgumentType<NbtPath>
+public class NbtPathArgument implements ArgumentType<NbtPathArgument.NbtPath> // MagmaCube - decompile fix
 {
     private static final Collection<String> EXAMPLES;
     public static final SimpleCommandExceptionType ERROR_INVALID_NODE;
@@ -47,14 +46,14 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
     }
     
     public NbtPath parse(final StringReader debug1) throws CommandSyntaxException {
-        final List<Node> debug2 = (List<Node>)Lists.newArrayList();
+        final List<Node> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         final int debug3 = debug1.getCursor();
         final Object2IntMap<Node> debug4 = (Object2IntMap<Node>)new Object2IntOpenHashMap();
         boolean debug5 = true;
         while (debug1.canRead() && debug1.peek() != ' ') {
             final Node debug6 = parseNode(debug1, debug5);
             debug2.add(debug6);
-            debug4.put((Object)debug6, debug1.getCursor() - debug3);
+            debug4.put(debug6, debug1.getCursor() - debug3); // MagmaCube - decompile fix
             debug5 = false;
             if (debug1.canRead()) {
                 final char debug7 = debug1.peek();
@@ -92,7 +91,7 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
                 debug0.expect(']');
                 return new IndexedElementNode(debug5);
             }
-            case 'Â¥"': {
+            case '\"': {
                 final String debug6 = debug0.readString();
                 return readObjectNode(debug0, debug6);
             }
@@ -127,7 +126,7 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
     }
     
     private static boolean isAllowedInUnquotedName(final char debug0) {
-        return debug0 != ' ' && debug0 != 'Â¥"' && debug0 != '[' && debug0 != ']' && debug0 != '.' && debug0 != '{' && debug0 != '}';
+        return debug0 != ' ' && debug0 != '\"' && debug0 != '[' && debug0 != ']' && debug0 != '.' && debug0 != '{' && debug0 != '}'; // MagmaCube - decompile fix
     }
     
     private static Predicate<Tag> createTagPredicate(final CompoundTag debug0) {
@@ -137,10 +136,8 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
     static {
         EXAMPLES = Arrays.asList("foo", "foo.bar", "foo[0]", "[0]", "[]", "{foo=bar}");
         ERROR_INVALID_NODE = new SimpleCommandExceptionType((Message)new TranslatableComponent("arguments.nbtpath.node.invalid"));
-        final TranslatableComponent translatableComponent;
         ERROR_NOTHING_FOUND = new DynamicCommandExceptionType(debug0 -> {
-            new TranslatableComponent("arguments.nbtpath.nothing_found", new Object[] { debug0 });
-            return translatableComponent;
+            return new TranslatableComponent("arguments.nbtpath.nothing_found", new Object[] { debug0 }); // MagmaCube - decompile fix
         });
     }
     
@@ -198,13 +195,13 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
         }
         
         private static int apply(final List<Tag> debug0, final Function<Tag, Integer> debug1) {
-            return debug0.stream().map((Function<? super Object, ? extends Integer>)debug1).reduce(0, (debug0, debug1) -> debug0 + debug1);
+            return debug0.stream().map(debug1).reduce(0, (debug02, debug12) -> debug02 + debug12); // MagmaCube - decompile fix
         }
         
         public int set(final Tag debug1, final Supplier<Tag> debug2) throws CommandSyntaxException {
             final List<Tag> debug3 = this.getOrCreateParents(debug1);
             final Node debug4 = this.nodes[this.nodes.length - 1];
-            return apply(debug3, debug2 -> debug4.setTag(debug2, debug2));
+            return apply(debug3, debug22 -> debug4.setTag(debug22, debug2)); // MagmaCube - decompile fix
         }
         
         public int remove(final Tag debug1) {
@@ -244,11 +241,11 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
         }
         
         default List<Tag> getOrCreate(final List<Tag> debug1, final Supplier<Tag> debug2) {
-            return this.collect(debug1, (debug2, debug3) -> this.getOrCreateTag(debug2, debug2, debug3));
+            return this.collect(debug1, (debug22, debug3) -> this.getOrCreateTag(debug22, debug2, debug3)); // MagmaCube - decompile fix
         }
         
         default List<Tag> collect(final List<Tag> debug1, final BiConsumer<Tag, List<Tag>> debug2) {
-            final List<Tag> debug3 = (List<Tag>)Lists.newArrayList();
+            final List<Tag> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
             for (final Tag debug4 : debug1) {
                 debug2.accept(debug4, debug3);
             }
@@ -406,15 +403,14 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
             final MutableBoolean debug4 = new MutableBoolean();
             if (debug1 instanceof ListTag) {
                 final ListTag debug5 = (ListTag)debug1;
-                final MutableBoolean mutableBoolean;
-                debug5.stream().filter(this.predicate).forEach(debug2 -> {
-                    debug3.add(debug2);
-                    mutableBoolean.setTrue();
+                debug5.stream().filter(this.predicate).forEach(debug22 -> { // MagmaCube - decompile fix
+                    debug3.add(debug22); // MagmaCube - decompile fix
+                    debug4.setTrue(); // MagmaCube - decompile fix
                     return;
                 });
                 if (debug4.isFalse()) {
                     final CompoundTag debug6 = this.pattern.copy();
-                    ((AbstractList<CompoundTag>)debug5).add(debug6);
+                    debug5.add(debug6); // MagmaCube - decompile fix
                     debug3.add(debug6);
                 }
             }
diff --git a/src/main/java/net/minecraft/commands/arguments/NbtTagArgument.java b/src/main/java/net/minecraft/commands/arguments/NbtTagArgument.java
index cd36a1c2907ade02fe4fb260ba44cb5c478226d4..110c52233fba3482d419a50667d5fe820457a4ad 100644
--- a/src/main/java/net/minecraft/commands/arguments/NbtTagArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/NbtTagArgument.java
@@ -30,6 +30,6 @@ public class NbtTagArgument implements ArgumentType<Tag>
     }
     
     static {
-        EXAMPLES = Arrays.asList("0", "0b", "0l", "0.0", "Â¥"fooÂ¥"", "{foo=bar}", "[0]");
+        EXAMPLES = Arrays.asList("0", "0b", "0l", "0.0", "\"foo\"", "{foo=bar}", "[0]"); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
index 3d7bd9441b84c9e0d54e0914c2d2fd8dca4cac06..be53f699d3a63cf3748fb47c2c1d1decb815d144 100644
--- a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
@@ -71,7 +71,7 @@ implements ArgumentType<String> {
         }
         if (debug1.getSource() instanceof SharedSuggestionProvider) {
             SharedSuggestionProvider debug3 = (SharedSuggestionProvider)debug1.getSource();
-            return debug3.customSuggestion(debug1, debug2);
+            return debug3.customSuggestion((CommandContext<SharedSuggestionProvider>) debug1, debug2); // MagmaCube - decompile fix
         }
         return Suggestions.empty();
     }
@@ -79,9 +79,5 @@ implements ArgumentType<String> {
     public Collection<String> getExamples() {
         return EXAMPLES;
     }
-
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
index a6e5bb3a45add549bfe778778e0eee1df9ebb501..84036c016f222a32c99f3a18a6324125c57c9c6a 100644
--- a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
@@ -17,7 +17,7 @@ import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import java.util.Collection;
 import com.mojang.brigadier.arguments.ArgumentType;
 
-public class OperationArgument implements ArgumentType<Operation>
+public class OperationArgument implements ArgumentType<OperationArgument.Operation> // MagmaCube - decompile fix
 {
     private static final Collection<String> EXAMPLES;
     private static final SimpleCommandExceptionType ERROR_INVALID_OPERATION;
@@ -52,10 +52,9 @@ public class OperationArgument implements ArgumentType<Operation>
     
     private static Operation getOperation(final String debug0) throws CommandSyntaxException {
         if (debug0.equals("><")) {
-            final int debug2;
-            return (debug0, debug1) -> {
-                debug2 = debug0.getScore();
-                debug0.setScore(debug1.getScore());
+            return (debug0l, debug1) -> { // MagmaCube - decompile fix
+                int debug2 = debug0l.getScore(); // MagmaCube - decompile fix
+                debug0l.setScore(debug1.getScore()); // MagmaCube - decompile fix
                 debug1.setScore(debug2);
                 return;
             };
@@ -63,8 +62,8 @@ public class OperationArgument implements ArgumentType<Operation>
         return getSimpleOperation(debug0);
     }
     
-    private static SimpleOperation getSimpleOperation(final String debug0) throws CommandSyntaxException {
-        switch (debug0) {
+    private static SimpleOperation getSimpleOperation(final String s) throws CommandSyntaxException { // MagmaCube - decompile fix
+        switch (s) { // MagmaCube - decompile fix
             case "=": {
                 return (debug0, debug1) -> debug1;
             }
diff --git a/src/main/java/net/minecraft/commands/arguments/RangeArgument.java b/src/main/java/net/minecraft/commands/arguments/RangeArgument.java
index 000ca502c2204d4b9974e69678fe1253d86ca1f3..87dcf67229a457d6da9f1152e16d25a15db19f67 100644
--- a/src/main/java/net/minecraft/commands/arguments/RangeArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/RangeArgument.java
@@ -11,11 +11,11 @@ import net.minecraft.advancements.critereon.MinMaxBounds;
 
 public interface RangeArgument<T extends MinMaxBounds<?>> extends ArgumentType<T>
 {
-    default Ints intRange() {
+    static Ints intRange() { // MagmaCube - decompile fix
         return new Ints();
     }
     
-    default Floats floatRange() {
+    static Floats floatRange() { // MagmaCube - decompile fix
         return new Floats();
     }
     
diff --git a/src/main/java/net/minecraft/commands/arguments/ResourceLocationArgument.java b/src/main/java/net/minecraft/commands/arguments/ResourceLocationArgument.java
index cb17dc6fec3f0663fc442dc5ab938a8355c0b846..ead9cdcdd70c9d0f8a8241ddcb30ebae710f713c 100644
--- a/src/main/java/net/minecraft/commands/arguments/ResourceLocationArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ResourceLocationArgument.java
@@ -81,9 +81,5 @@ implements ArgumentType<ResourceLocation> {
     public Collection<String> getExamples() {
         return EXAMPLES;
     }
-
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/commands/arguments/ScoreHolderArgument.java b/src/main/java/net/minecraft/commands/arguments/ScoreHolderArgument.java
index afdc87dd7acd1c5299ff43b502be7d6961903735..0777a48c31ade5829d6f019f4272489c32007f6d 100644
--- a/src/main/java/net/minecraft/commands/arguments/ScoreHolderArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ScoreHolderArgument.java
@@ -41,7 +41,7 @@ import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.world.entity.Entity;
 
 public class ScoreHolderArgument
-implements ArgumentType<Result> {
+implements ArgumentType<ScoreHolderArgument.Result> { // MagmaCube - decompile fix
     public static final SuggestionProvider<CommandSourceStack> SUGGEST_SCORE_HOLDERS = (debug0, debug12) -> {
         StringReader debug2 = new StringReader(debug12.getInput());
         debug2.setCursor(debug12.getStart());
@@ -121,17 +121,13 @@ implements ArgumentType<Result> {
         return EXAMPLES;
     }
 
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
-
     public static class Serializer
     implements ArgumentSerializer<ScoreHolderArgument> {
         @Override
         public void serializeToNetwork(ScoreHolderArgument debug1, FriendlyByteBuf debug2) {
             int debug3 = 0;
             if (debug1.multiple) {
-                debug3 = (byte)(debug3 | true ? 1 : 0);
+                debug3 = (byte)(debug3 | 1);
             }
             debug2.writeByte(debug3);
         }
@@ -147,11 +143,6 @@ implements ArgumentType<Result> {
         public void serializeToJson(ScoreHolderArgument debug1, JsonObject debug2) {
             debug2.addProperty("amount", debug1.multiple ? "multiple" : "single");
         }
-
-        @Override
-        public /* synthetic */ ArgumentType deserializeFromNetwork(FriendlyByteBuf friendlyByteBuf) {
-            return this.deserializeFromNetwork(friendlyByteBuf);
-        }
     }
 
     public static class SelectorResult
diff --git a/src/main/java/net/minecraft/commands/arguments/SlotArgument.java b/src/main/java/net/minecraft/commands/arguments/SlotArgument.java
index 7a9df3249fcbc1dc416c4a5d212283b8f93889c5..fa11e428938190058dc25326019dd27f91e1f00c 100644
--- a/src/main/java/net/minecraft/commands/arguments/SlotArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/SlotArgument.java
@@ -54,32 +54,25 @@ public class SlotArgument implements ArgumentType<Integer>
         EXAMPLES = Arrays.asList("container.5", "12", "weapon");
         final TranslatableComponent translatableComponent;
         ERROR_UNKNOWN_SLOT = new DynamicCommandExceptionType(debug0 -> {
-            new TranslatableComponent("slot.unknown", new Object[] { debug0 });
-            return translatableComponent;
+            return new TranslatableComponent("slot.unknown", new Object[] { debug0 }); // MagmaCube - decompile fix
         });
-        int debug;
-        int debug2;
-        int debug3;
-        int debug4;
-        int debug5;
-        int debug6;
-        SLOTS = Util.make((Map<String, Integer>)Maps.newHashMap(), debug0 -> {
-            for (debug = 0; debug < 54; ++debug) {
+        SLOTS = Util.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
+            for (int debug = 0; debug < 54; ++debug) { // MagmaCube - decompile fix
                 debug0.put("container." + debug, debug);
             }
-            for (debug2 = 0; debug2 < 9; ++debug2) {
+            for (int debug2 = 0; debug2 < 9; ++debug2) { // MagmaCube - decompile fix
                 debug0.put("hotbar." + debug2, debug2);
             }
-            for (debug3 = 0; debug3 < 27; ++debug3) {
+            for (int debug3 = 0; debug3 < 27; ++debug3) { // MagmaCube - decompile fix
                 debug0.put("inventory." + debug3, 9 + debug3);
             }
-            for (debug4 = 0; debug4 < 27; ++debug4) {
+            for (int debug4 = 0; debug4 < 27; ++debug4) { // MagmaCube - decompile fix
                 debug0.put("enderchest." + debug4, 200 + debug4);
             }
-            for (debug5 = 0; debug5 < 8; ++debug5) {
+            for (int debug5 = 0; debug5 < 8; ++debug5) { // MagmaCube - decompile fix
                 debug0.put("villager." + debug5, 300 + debug5);
             }
-            for (debug6 = 0; debug6 < 15; ++debug6) {
+            for (int debug6 = 0; debug6 < 15; ++debug6) { // MagmaCube - decompile fix
                 debug0.put("horse." + debug6, 500 + debug6);
             }
             debug0.put("weapon", 98);
diff --git a/src/main/java/net/minecraft/commands/arguments/TeamArgument.java b/src/main/java/net/minecraft/commands/arguments/TeamArgument.java
index fd08ded8d5a9aee40713dec442c27a8add750760..6407be4ee2687f66f883ff2b386b1b20af0c0aea 100644
--- a/src/main/java/net/minecraft/commands/arguments/TeamArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/TeamArgument.java
@@ -61,9 +61,5 @@ implements ArgumentType<String> {
     public Collection<String> getExamples() {
         return EXAMPLES;
     }
-
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/commands/arguments/TimeArgument.java b/src/main/java/net/minecraft/commands/arguments/TimeArgument.java
index 5b9f816ccfc3fb07a088664a0e8d098aea735bd2..39e0d5c836c571d3ffd597ee09f8c4261f774777 100644
--- a/src/main/java/net/minecraft/commands/arguments/TimeArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/TimeArgument.java
@@ -62,12 +62,11 @@ public class TimeArgument implements ArgumentType<Integer>
         ERROR_INVALID_UNIT = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.time.invalid_unit"));
         final TranslatableComponent translatableComponent;
         ERROR_INVALID_TICK_COUNT = new DynamicCommandExceptionType(debug0 -> {
-            new TranslatableComponent("argument.time.invalid_tick_count", new Object[] { debug0 });
-            return translatableComponent;
+            return new TranslatableComponent("argument.time.invalid_tick_count", new Object[] { debug0 }); // MagmaCube - decompile fix
         });
-        (UNITS = (Object2IntMap)new Object2IntOpenHashMap()).put((Object)"d", 24000);
-        TimeArgument.UNITS.put((Object)"s", 20);
-        TimeArgument.UNITS.put((Object)"t", 1);
-        TimeArgument.UNITS.put((Object)"", 1);
+        (UNITS = (Object2IntMap)new Object2IntOpenHashMap()).put("d", 24000); // MagmaCube - decompile fix
+        TimeArgument.UNITS.put("s", 20); // MagmaCube - decompile fix
+        TimeArgument.UNITS.put("t", 1); // MagmaCube - decompile fix
+        TimeArgument.UNITS.put("", 1); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockPredicateArgument.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockPredicateArgument.java
index 0c0b0b815b65eababb0eb3d774a7414e416add5d..6379a999f9fc90c976c269631443d6a9fb7c0b28 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockPredicateArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockPredicateArgument.java
@@ -43,7 +43,7 @@ import net.minecraft.world.level.block.state.pattern.BlockInWorld;
 import net.minecraft.world.level.block.state.properties.Property;
 
 public class BlockPredicateArgument
-implements ArgumentType<Result> {
+implements ArgumentType<BlockPredicateArgument.Result> { // MagmaCube - decompile fix
     private static final Collection<String> EXAMPLES = Arrays.asList("stone", "minecraft:stone", "stone[foo=bar]", "#stone", "#stone[foo=bar]{baz=nbt}");
     private static final DynamicCommandExceptionType ERROR_UNKNOWN_TAG = new DynamicCommandExceptionType(debug0 -> new TranslatableComponent("arguments.block.tag.unknown", debug0));
 
@@ -59,11 +59,11 @@ implements ArgumentType<Result> {
         }
         ResourceLocation debug3 = debug22.getTag();
         return debug2 -> {
-            Tag<Block> debug3 = debug2.getBlocks().getTag(debug3);
-            if (debug3 == null) {
-                throw ERROR_UNKNOWN_TAG.create((Object)debug3.toString());
+            Tag<Block> debug3l = debug2.getBlocks().getTag(debug3); // MagmaCube - decompile fix
+            if (debug3l == null) { // MagmaCube - decompile fix
+                throw ERROR_UNKNOWN_TAG.create((Object)debug3l.toString()); // MagmaCube - decompile fix
             }
-            return new TagPredicate(debug3, debug22.getVagueProperties(), debug22.getNbt());
+            return new TagPredicate(debug3l, debug22.getVagueProperties(), debug22.getNbt()); // MagmaCube - decompile fix
         };
     }
 
@@ -88,10 +88,6 @@ implements ArgumentType<Result> {
         return EXAMPLES;
     }
 
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
-
     static class TagPredicate
     implements Predicate<BlockInWorld> {
         private final Tag<Block> tag;
@@ -129,11 +125,6 @@ implements ArgumentType<Result> {
             }
             return true;
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((BlockInWorld)object);
-        }
     }
 
     static class BlockPredicate
@@ -165,11 +156,6 @@ implements ArgumentType<Result> {
             }
             return true;
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((BlockInWorld)object);
-        }
     }
 
     public static interface Result {
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
index 07d129f9e95909cba31413a71e9a94cc25e79968..1d1e130884322954ed1a59f81924a60fc69dd8c3 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
@@ -57,8 +57,8 @@ public class BlockStateParser
     private BiFunction<SuggestionsBuilder, TagCollection<Block>, CompletableFuture<Suggestions>> suggestions;
     
     public BlockStateParser(final StringReader debug1, final boolean debug2) {
-        this.properties = (Map<Property<?>, Comparable<?>>)Maps.newHashMap();
-        this.vagueProperties = (Map<String, String>)Maps.newHashMap();
+        this.properties = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.vagueProperties = Maps.newHashMap(); // MagmaCube - decompile fix
         this.id = new ResourceLocation("");
         this.tag = new ResourceLocation("");
         this.suggestions = BlockStateParser.SUGGEST_NOTHING;
@@ -195,7 +195,7 @@ public class BlockStateParser
     private static <T extends Comparable<T>> SuggestionsBuilder addSuggestions(final SuggestionsBuilder debug0, final Property<T> debug1) {
         for (final T debug2 : debug1.getPossibleValues()) {
             if (debug2 instanceof Integer) {
-                debug0.suggest((int)debug2);
+                debug0.suggest((int)(Object)debug2);
             }
             else {
                 debug0.suggest(debug1.getName(debug2));
@@ -325,7 +325,7 @@ public class BlockStateParser
             }
             this.reader.skip();
             this.reader.skipWhitespace();
-            this.suggestions = (BiFunction<SuggestionsBuilder, TagCollection<Block>, CompletableFuture<Suggestions>>)((debug1, debug2) -> addSuggestions(debug1, debug4).buildFuture());
+            this.suggestions = (BiFunction<SuggestionsBuilder, TagCollection<Block>, CompletableFuture<Suggestions>>)((debug1, debug2l) -> addSuggestions(debug1, debug4).buildFuture()); // MagmaCube - decompile fix
             final int debug5 = this.reader.getCursor();
             this.setValue(debug4, this.reader.readString(), debug5);
             this.suggestions = this::suggestNextPropertyOrEnd;
@@ -408,8 +408,8 @@ public class BlockStateParser
     private <T extends Comparable<T>> void setValue(final Property<T> debug1, final String debug2, final int debug3) throws CommandSyntaxException {
         final Optional<T> debug4 = debug1.getValue(debug2);
         if (debug4.isPresent()) {
-            this.state = ((StateHolder<O, BlockState>)this.state).setValue(debug1, debug4.get());
-            this.properties.put((Property<?>)debug1, (Object)debug4.get());
+            this.state = (this.state).setValue(debug1, debug4.get()); // MagmaCube - decompile fix
+            this.properties.put((Property<?>)debug1, debug4.get()); // MagmaCube - decompile fix
             return;
         }
         this.reader.setCursor(debug3);
@@ -451,8 +451,7 @@ public class BlockStateParser
         ERROR_NO_TAGS_ALLOWED = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.block.tag.disallowed"));
         final TranslatableComponent translatableComponent;
         ERROR_UNKNOWN_BLOCK = new DynamicCommandExceptionType(debug0 -> {
-            new TranslatableComponent("argument.block.id.invalid", new Object[] { debug0 });
-            return translatableComponent;
+            return new TranslatableComponent("argument.block.id.invalid", new Object[] { debug0 }); // MagmaCube - decompile fix
         });
         ERROR_UNKNOWN_PROPERTY = new Dynamic2CommandExceptionType((debug0, debug1) -> new TranslatableComponent("argument.block.property.unknown", new Object[] { debug0, debug1 }));
         ERROR_DUPLICATE_PROPERTY = new Dynamic2CommandExceptionType((debug0, debug1) -> new TranslatableComponent("argument.block.property.duplicate", new Object[] { debug1, debug0 }));
diff --git a/src/main/java/net/minecraft/commands/arguments/item/FunctionArgument.java b/src/main/java/net/minecraft/commands/arguments/item/FunctionArgument.java
index 8170016adc4ac76e74d9a1fc1791ac29762b4613..1d9de5c0c664c3a45b79729c51983c6dd70ebe8f 100644
--- a/src/main/java/net/minecraft/commands/arguments/item/FunctionArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/item/FunctionArgument.java
@@ -29,7 +29,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.Tag;
 
 public class FunctionArgument
-implements ArgumentType<Result> {
+implements ArgumentType<FunctionArgument.Result> { // MagmaCube - decompile fix
     private static final Collection<String> EXAMPLES = Arrays.asList("foo", "foo:bar", "#foo");
     private static final DynamicCommandExceptionType ERROR_UNKNOWN_TAG = new DynamicCommandExceptionType(debug0 -> new TranslatableComponent("arguments.function.tag.unknown", debug0));
     private static final DynamicCommandExceptionType ERROR_UNKNOWN_FUNCTION = new DynamicCommandExceptionType(debug0 -> new TranslatableComponent("arguments.function.unknown", debug0));
@@ -52,7 +52,7 @@ implements ArgumentType<Result> {
 
                 @Override
                 public Pair<ResourceLocation, Either<CommandFunction, Tag<CommandFunction>>> unwrap(CommandContext<CommandSourceStack> debug1) throws CommandSyntaxException {
-                    return Pair.of((Object)debug2, (Object)Either.right((Object)FunctionArgument.getFunctionTag((CommandContext<CommandSourceStack>)debug1, debug2)));
+                    return Pair.of(debug2, Either.right(FunctionArgument.getFunctionTag((CommandContext<CommandSourceStack>)debug1, debug2))); // MagmaCube - decompile fix
                 }
             };
         }
@@ -66,7 +66,7 @@ implements ArgumentType<Result> {
 
             @Override
             public Pair<ResourceLocation, Either<CommandFunction, Tag<CommandFunction>>> unwrap(CommandContext<CommandSourceStack> debug1) throws CommandSyntaxException {
-                return Pair.of((Object)debug2, (Object)Either.left((Object)FunctionArgument.getFunction((CommandContext<CommandSourceStack>)debug1, debug2)));
+                return Pair.of(debug2, Either.left(FunctionArgument.getFunction((CommandContext<CommandSourceStack>)debug1, debug2))); // MagmaCube - decompile fix
             }
         };
     }
@@ -95,10 +95,6 @@ implements ArgumentType<Result> {
         return EXAMPLES;
     }
 
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
-
     public static interface Result {
         public Collection<CommandFunction> create(CommandContext<CommandSourceStack> var1) throws CommandSyntaxException;
 
diff --git a/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java b/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java
index c76f4bdbdba3ae852b39c71ed174e032cd438472..274de8495ec5126c1e65991f8207310f5c6a3add 100644
--- a/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java
@@ -39,7 +39,7 @@ public class ItemParser
     private BiFunction<SuggestionsBuilder, TagCollection<Item>, CompletableFuture<Suggestions>> suggestions;
     
     public ItemParser(final StringReader debug1, final boolean debug2) {
-        this.properties = (Map<Property<?>, Comparable<?>>)Maps.newHashMap();
+        this.properties = Maps.newHashMap(); // MagmaCube - decompile fix
         this.tag = new ResourceLocation("");
         this.suggestions = ItemParser.SUGGEST_NOTHING;
         this.reader = debug1;
@@ -62,11 +62,9 @@ public class ItemParser
     public void readItem() throws CommandSyntaxException {
         final int debug1 = this.reader.getCursor();
         final ResourceLocation debug2 = ResourceLocation.read(this.reader);
-        final int cursor;
-        final ResourceLocation resourceLocation;
         this.item = Registry.ITEM.getOptional(debug2).orElseThrow(() -> {
-            this.reader.setCursor(cursor);
-            return ItemParser.ERROR_UNKNOWN_ITEM.createWithContext((ImmutableStringReader)this.reader, (Object)resourceLocation.toString());
+            this.reader.setCursor(debug1); // MagmaCube - decompile fix
+            return ItemParser.ERROR_UNKNOWN_ITEM.createWithContext((ImmutableStringReader)this.reader, debug2.toString()); // MagmaCube - decompile fix
         });
     }
     
@@ -126,8 +124,7 @@ public class ItemParser
         ERROR_NO_TAGS_ALLOWED = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.item.tag.disallowed"));
         final TranslatableComponent translatableComponent;
         ERROR_UNKNOWN_ITEM = new DynamicCommandExceptionType(debug0 -> {
-            new TranslatableComponent("argument.item.id.invalid", new Object[] { debug0 });
-            return translatableComponent;
+            return new TranslatableComponent("argument.item.id.invalid", new Object[] { debug0 }); // MagmaCube - decompile fix
         });
         SUGGEST_NOTHING = ((debug0, debug1) -> debug0.buildFuture());
     }
diff --git a/src/main/java/net/minecraft/commands/arguments/item/ItemPredicateArgument.java b/src/main/java/net/minecraft/commands/arguments/item/ItemPredicateArgument.java
index d777b2edc47bbb9a33cb2a0d98de078511d7dacf..fc28fc8cb01653ada0b1feddf34fb0ab30f5cd77 100644
--- a/src/main/java/net/minecraft/commands/arguments/item/ItemPredicateArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/item/ItemPredicateArgument.java
@@ -37,7 +37,7 @@ import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 
 public class ItemPredicateArgument
-implements ArgumentType<Result> {
+implements ArgumentType<ItemPredicateArgument.Result> { // MagmaCube - decompile fix
     private static final Collection<String> EXAMPLES = Arrays.asList("stick", "minecraft:stick", "#stick", "#stick{foo=bar}");
     private static final DynamicCommandExceptionType ERROR_UNKNOWN_TAG = new DynamicCommandExceptionType(debug0 -> new TranslatableComponent("arguments.item.tag.unknown", debug0));
 
@@ -53,11 +53,11 @@ implements ArgumentType<Result> {
         }
         ResourceLocation debug3 = debug22.getTag();
         return debug2 -> {
-            Tag<Item> debug3 = ((CommandSourceStack)debug2.getSource()).getServer().getTags().getItems().getTag(debug3);
-            if (debug3 == null) {
+            Tag<Item> debug3l = ((CommandSourceStack)debug2.getSource()).getServer().getTags().getItems().getTag(debug3); // MagmaCube - decompile fix
+            if (debug3l == null) { // MagmaCube - decompile fix
                 throw ERROR_UNKNOWN_TAG.create((Object)debug3.toString());
             }
-            return new TagPredicate(debug3, debug22.getNbt());
+            return new TagPredicate(debug3l, debug22.getNbt()); // MagmaCube - decompile fix
         };
     }
 
@@ -82,10 +82,6 @@ implements ArgumentType<Result> {
         return EXAMPLES;
     }
 
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
-
     static class TagPredicate
     implements Predicate<ItemStack> {
         private final Tag<Item> tag;
@@ -101,11 +97,6 @@ implements ArgumentType<Result> {
         public boolean test(ItemStack debug1) {
             return this.tag.contains(debug1.getItem()) && NbtUtils.compareNbt(this.nbt, debug1.getTag(), true);
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((ItemStack)object);
-        }
     }
 
     static class ItemPredicate
@@ -123,11 +114,6 @@ implements ArgumentType<Result> {
         public boolean test(ItemStack debug1) {
             return debug1.getItem() == this.item && NbtUtils.compareNbt(this.nbt, debug1.getTag(), true);
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((ItemStack)object);
-        }
     }
 
     public static interface Result {
diff --git a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelector.java b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelector.java
index 94586551c0fe17463d2f637e7c5a760ece41d06a..bd7f1bc5bdd4f5601e541ddc2106f145198effc9 100644
--- a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelector.java
+++ b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelector.java
@@ -109,13 +109,13 @@ public class EntitySelector {
             if (debug2 == null) {
                 return Collections.emptyList();
             }
-            return Lists.newArrayList((Object[])new ServerPlayer[]{debug2});
+            return Lists.newArrayList(new ServerPlayer[]{debug2}); // MagmaCube - decompile fix
         }
         if (this.entityUUID != null) {
             for (ServerLevel debug3 : debug1.getServer().getAllLevels()) {
                 Entity debug4 = debug3.getEntity(this.entityUUID);
                 if (debug4 == null) continue;
-                return Lists.newArrayList((Object[])new Entity[]{debug4});
+                return Lists.newArrayList(new Entity[]{debug4}); // MagmaCube - decompile fix
             }
             return Collections.emptyList();
         }
@@ -123,7 +123,7 @@ public class EntitySelector {
         Predicate<Entity> debug3 = this.getPredicate(debug2);
         if (this.currentEntity) {
             if (debug1.getEntity() != null && debug3.test(debug1.getEntity())) {
-                return Lists.newArrayList((Object[])new Entity[]{debug1.getEntity()});
+                return Lists.newArrayList(new Entity[]{debug1.getEntity()}); // MagmaCube - decompile fix
             }
             return Collections.emptyList();
         }
@@ -156,28 +156,28 @@ public class EntitySelector {
     }
 
     public List<ServerPlayer> findPlayers(CommandSourceStack debug1) throws CommandSyntaxException {
-        List<Object> debug4;
+        List<ServerPlayer> debug4; // MagmaCube - decompile fix
         this.checkPermissions(debug1);
         if (this.playerName != null) {
             ServerPlayer debug2 = debug1.getServer().getPlayerList().getPlayerByName(this.playerName);
             if (debug2 == null) {
                 return Collections.emptyList();
             }
-            return Lists.newArrayList((Object[])new ServerPlayer[]{debug2});
+            return Lists.newArrayList(new ServerPlayer[]{debug2}); // MagmaCube - decompile fix
         }
         if (this.entityUUID != null) {
             ServerPlayer debug2 = debug1.getServer().getPlayerList().getPlayer(this.entityUUID);
             if (debug2 == null) {
                 return Collections.emptyList();
             }
-            return Lists.newArrayList((Object[])new ServerPlayer[]{debug2});
+            return Lists.newArrayList(new ServerPlayer[]{debug2}); // MagmaCube - decompile fix
         }
         Vec3 debug2 = this.position.apply(debug1.getPosition());
         Predicate<Entity> debug3 = this.getPredicate(debug2);
         if (this.currentEntity) {
             ServerPlayer debug42;
             if (debug1.getEntity() instanceof ServerPlayer && debug3.test(debug42 = (ServerPlayer)debug1.getEntity())) {
-                return Lists.newArrayList((Object[])new ServerPlayer[]{debug42});
+                return Lists.newArrayList(new ServerPlayer[]{debug42}); // MagmaCube - decompile fix
             }
             return Collections.emptyList();
         }
diff --git a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
index f18ac34fd7a87785269472aa0a6bea856e5b21d4..cf45335b7003052e0891e7be6c196ccb82418e18 100644
--- a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
+++ b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
@@ -84,48 +84,50 @@ public class ArgumentTypes
     
     public static void bootStrap() {
         BrigadierArgumentSerializers.bootstrap();
-        register("entity", (Class<ArgumentType>)EntityArgument.class, (ArgumentSerializer<ArgumentType>)new EntityArgument.Serializer());
-        register("game_profile", (Class<ArgumentType>)GameProfileArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)GameProfileArgument::gameProfile));
-        register("block_pos", (Class<ArgumentType>)BlockPosArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)BlockPosArgument::blockPos));
-        register("column_pos", (Class<ArgumentType>)ColumnPosArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ColumnPosArgument::columnPos));
-        register("vec3", (Class<ArgumentType>)Vec3Argument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)Vec3Argument::vec3));
-        register("vec2", (Class<ArgumentType>)Vec2Argument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)Vec2Argument::vec2));
-        register("block_state", (Class<ArgumentType>)BlockStateArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)BlockStateArgument::block));
-        register("block_predicate", (Class<ArgumentType>)BlockPredicateArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)BlockPredicateArgument::blockPredicate));
-        register("item_stack", (Class<ArgumentType>)ItemArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ItemArgument::item));
-        register("item_predicate", (Class<ArgumentType>)ItemPredicateArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ItemPredicateArgument::itemPredicate));
-        register("color", (Class<ArgumentType>)ColorArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ColorArgument::color));
-        register("component", (Class<ArgumentType>)ComponentArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ComponentArgument::textComponent));
-        register("message", (Class<ArgumentType>)MessageArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)MessageArgument::message));
-        register("nbt_compound_tag", (Class<ArgumentType>)CompoundTagArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)CompoundTagArgument::compoundTag));
-        register("nbt_tag", (Class<ArgumentType>)NbtTagArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)NbtTagArgument::nbtTag));
-        register("nbt_path", (Class<ArgumentType>)NbtPathArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)NbtPathArgument::nbtPath));
-        register("objective", (Class<ArgumentType>)ObjectiveArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ObjectiveArgument::objective));
-        register("objective_criteria", (Class<ArgumentType>)ObjectiveCriteriaArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ObjectiveCriteriaArgument::criteria));
-        register("operation", (Class<ArgumentType>)OperationArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)OperationArgument::operation));
-        register("particle", (Class<ArgumentType>)ParticleArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ParticleArgument::particle));
-        register("angle", (Class<ArgumentType>)AngleArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)AngleArgument::angle));
-        register("rotation", (Class<ArgumentType>)RotationArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)RotationArgument::rotation));
-        register("scoreboard_slot", (Class<ArgumentType>)ScoreboardSlotArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ScoreboardSlotArgument::displaySlot));
-        register("score_holder", (Class<ArgumentType>)ScoreHolderArgument.class, (ArgumentSerializer<ArgumentType>)new ScoreHolderArgument.Serializer());
-        register("swizzle", (Class<ArgumentType>)SwizzleArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)SwizzleArgument::swizzle));
-        register("team", (Class<ArgumentType>)TeamArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)TeamArgument::team));
-        register("item_slot", (Class<ArgumentType>)SlotArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)SlotArgument::slot));
-        register("resource_location", (Class<ArgumentType>)ResourceLocationArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ResourceLocationArgument::id));
-        register("mob_effect", (Class<ArgumentType>)MobEffectArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)MobEffectArgument::effect));
-        register("function", (Class<ArgumentType>)FunctionArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)FunctionArgument::functions));
-        register("entity_anchor", (Class<ArgumentType>)EntityAnchorArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)EntityAnchorArgument::anchor));
-        register("int_range", (Class<ArgumentType>)RangeArgument.Ints.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)RangeArgument::intRange));
-        register("float_range", (Class<ArgumentType>)RangeArgument.Floats.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)RangeArgument::floatRange));
-        register("item_enchantment", (Class<ArgumentType>)ItemEnchantmentArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)ItemEnchantmentArgument::enchantment));
-        register("entity_summon", (Class<ArgumentType>)EntitySummonArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)EntitySummonArgument::id));
-        register("dimension", (Class<ArgumentType>)DimensionArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)DimensionArgument::dimension));
-        register("time", (Class<ArgumentType>)TimeArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)TimeArgument::time));
-        register("uuid", (Class<ArgumentType>)UuidArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)UuidArgument::uuid));
+        // MagmaCube start - decompile fix
+        register("entity", EntityArgument.class, new EntityArgument.Serializer());
+        register("game_profile", GameProfileArgument.class, new EmptyArgumentSerializer<>(GameProfileArgument::gameProfile));
+        register("block_pos", BlockPosArgument.class, new EmptyArgumentSerializer<>(BlockPosArgument::blockPos));
+        register("column_pos", ColumnPosArgument.class, new EmptyArgumentSerializer<>(ColumnPosArgument::columnPos));
+        register("vec3", Vec3Argument.class, new EmptyArgumentSerializer<>(Vec3Argument::vec3));
+        register("vec2", Vec2Argument.class, new EmptyArgumentSerializer<>(Vec2Argument::vec2));
+        register("block_state", BlockStateArgument.class, new EmptyArgumentSerializer<>(BlockStateArgument::block));
+        register("block_predicate", BlockPredicateArgument.class, new EmptyArgumentSerializer<>(BlockPredicateArgument::blockPredicate));
+        register("item_stack", ItemArgument.class, new EmptyArgumentSerializer<>(ItemArgument::item));
+        register("item_predicate", ItemPredicateArgument.class, new EmptyArgumentSerializer<>(ItemPredicateArgument::itemPredicate));
+        register("color", ColorArgument.class, new EmptyArgumentSerializer<>(ColorArgument::color));
+        register("component", ComponentArgument.class, new EmptyArgumentSerializer<>(ComponentArgument::textComponent));
+        register("message", MessageArgument.class, new EmptyArgumentSerializer<>(MessageArgument::message));
+        register("nbt_compound_tag", CompoundTagArgument.class, new EmptyArgumentSerializer<>(CompoundTagArgument::compoundTag));
+        register("nbt_tag", NbtTagArgument.class, new EmptyArgumentSerializer<>(NbtTagArgument::nbtTag));
+        register("nbt_path", NbtPathArgument.class, new EmptyArgumentSerializer<>(NbtPathArgument::nbtPath));
+        register("objective", ObjectiveArgument.class, new EmptyArgumentSerializer<>(ObjectiveArgument::objective));
+        register("objective_criteria", ObjectiveCriteriaArgument.class, new EmptyArgumentSerializer<>(ObjectiveCriteriaArgument::criteria));
+        register("operation", OperationArgument.class, new EmptyArgumentSerializer<>(OperationArgument::operation));
+        register("particle", ParticleArgument.class, new EmptyArgumentSerializer<>(ParticleArgument::particle));
+        register("angle", AngleArgument.class, new EmptyArgumentSerializer<>(AngleArgument::angle));
+        register("rotation", RotationArgument.class, new EmptyArgumentSerializer<>(RotationArgument::rotation));
+        register("scoreboard_slot", ScoreboardSlotArgument.class, new EmptyArgumentSerializer<>(ScoreboardSlotArgument::displaySlot));
+        register("score_holder", ScoreHolderArgument.class, new ScoreHolderArgument.Serializer());
+        register("swizzle", SwizzleArgument.class, new EmptyArgumentSerializer<>(SwizzleArgument::swizzle));
+        register("team", TeamArgument.class, new EmptyArgumentSerializer<>(TeamArgument::team));
+        register("item_slot", SlotArgument.class, new EmptyArgumentSerializer<>(SlotArgument::slot));
+        register("resource_location", ResourceLocationArgument.class, new EmptyArgumentSerializer<>(ResourceLocationArgument::id));
+        register("mob_effect", MobEffectArgument.class, new EmptyArgumentSerializer<>(MobEffectArgument::effect));
+        register("function", FunctionArgument.class, new EmptyArgumentSerializer<>(FunctionArgument::functions));
+        register("entity_anchor", EntityAnchorArgument.class, new EmptyArgumentSerializer<>(EntityAnchorArgument::anchor));
+        register("int_range", RangeArgument.Ints.class, new EmptyArgumentSerializer<>(RangeArgument::intRange));
+        register("float_range", RangeArgument.Floats.class, new EmptyArgumentSerializer<>(RangeArgument::floatRange));
+        register("item_enchantment", ItemEnchantmentArgument.class, new EmptyArgumentSerializer<>(ItemEnchantmentArgument::enchantment));
+        register("entity_summon", EntitySummonArgument.class, new EmptyArgumentSerializer<>(EntitySummonArgument::id));
+        register("dimension", DimensionArgument.class, new EmptyArgumentSerializer<>(DimensionArgument::dimension));
+        register("time", TimeArgument.class, new EmptyArgumentSerializer<>(TimeArgument::time));
+        register("uuid", UuidArgument.class, new EmptyArgumentSerializer<>(UuidArgument::uuid));
         if (SharedConstants.IS_RUNNING_IN_IDE) {
-            register("test_argument", (Class<ArgumentType>)TestFunctionArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)TestFunctionArgument::testFunctionArgument));
-            register("test_class", (Class<ArgumentType>)TestClassNameArgument.class, new EmptyArgumentSerializer<ArgumentType>((Supplier<ArgumentType>)TestClassNameArgument::testClassName));
+            register("test_argument", TestFunctionArgument.class, new EmptyArgumentSerializer<>(TestFunctionArgument::testFunctionArgument));
+            register("test_class", TestClassNameArgument.class, new EmptyArgumentSerializer<>(TestClassNameArgument::testClassName));
         }
+        // MagmaCube end - decompile fix
     }
     
     @Nullable
@@ -220,8 +222,8 @@ public class ArgumentTypes
     }
     
     public static <T> Set<ArgumentType<?>> findUsedArgumentTypes(final CommandNode<T> debug0) {
-        final Set<CommandNode<T>> debug = (Set<CommandNode<T>>)Sets.newIdentityHashSet();
-        final Set<ArgumentType<?>> debug2 = (Set<ArgumentType<?>>)Sets.newHashSet();
+        final Set<CommandNode<T>> debug = Sets.newIdentityHashSet(); // MagmaCube - decompile fix
+        final Set<ArgumentType<?>> debug2 = Sets.newHashSet(); // MagmaCube - decompile fix
         findUsedArgumentTypes(debug0, debug2, debug);
         return debug2;
     }
@@ -233,10 +235,10 @@ public class ArgumentTypes
         if (debug0 instanceof ArgumentCommandNode) {
             debug1.add((ArgumentType<?>)((ArgumentCommandNode)debug0).getType());
         }
-        debug0.getChildren().forEach(debug2 -> findUsedArgumentTypes(debug2, debug1, (Set<com.mojang.brigadier.tree.CommandNode<Object>>)debug2));
+        debug0.getChildren().forEach(debug2l -> findUsedArgumentTypes(debug2l, debug1, debug2)); // MagmaCube - decompile fix
         final CommandNode<T> debug3 = (CommandNode<T>)debug0.getRedirect();
         if (debug3 != null) {
-            findUsedArgumentTypes((com.mojang.brigadier.tree.CommandNode<Object>)debug3, debug1, (Set<com.mojang.brigadier.tree.CommandNode<Object>>)debug2);
+            findUsedArgumentTypes(debug3, debug1, debug2); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/core/AxisCycle.java b/src/main/java/net/minecraft/core/AxisCycle.java
index d9869f75a86fb60d4d06a8a71db1f20512012c99..c2e1ede0cc87ee78ca89c28a05065557720a3e23 100644
--- a/src/main/java/net/minecraft/core/AxisCycle.java
+++ b/src/main/java/net/minecraft/core/AxisCycle.java
@@ -26,12 +26,12 @@ public enum AxisCycle
         
         @Override
         public Direction.Axis cycle(final Direction.Axis debug1) {
-            return AxisCycle$2.AXIS_VALUES[Math.floorMod(debug1.ordinal() + 1, 3)];
+            return AXIS_VALUES[Math.floorMod(debug1.ordinal() + 1, 3)]; // MagmaCube - decompile fix
         }
         
         @Override
         public AxisCycle inverse() {
-            return AxisCycle$2.BACKWARD;
+            return BACKWARD; // MagmaCube - decompile fix
         }
     }, 
     BACKWARD {
@@ -42,12 +42,12 @@ public enum AxisCycle
         
         @Override
         public Direction.Axis cycle(final Direction.Axis debug1) {
-            return AxisCycle$3.AXIS_VALUES[Math.floorMod(debug1.ordinal() - 1, 3)];
+            return AXIS_VALUES[Math.floorMod(debug1.ordinal() - 1, 3)]; // MagmaCube - decompile fix
         }
         
         @Override
         public AxisCycle inverse() {
-            return AxisCycle$3.FORWARD;
+            return FORWARD; // MagmaCube - decompile fix
         }
     };
     
diff --git a/src/main/java/net/minecraft/core/BlockPos.java b/src/main/java/net/minecraft/core/BlockPos.java
index 3f44c943578cbc7ade12f3271bbcbda251e150e2..823e5a39dd8399fa6120423577652e8e8b9ede3e 100644
--- a/src/main/java/net/minecraft/core/BlockPos.java
+++ b/src/main/java/net/minecraft/core/BlockPos.java
@@ -249,10 +249,6 @@ extends Vec3i {
                 --this.counter;
                 return debug12;
             }
-
-            protected /* synthetic */ Object computeNext() {
-                return this.computeNext();
-            }
         };
     }
 
@@ -302,10 +298,6 @@ extends Vec3i {
                 }
                 return debug12;
             }
-
-            protected /* synthetic */ Object computeNext() {
-                return this.computeNext();
-            }
         };
     }
 
@@ -357,10 +349,6 @@ extends Vec3i {
                 ++this.index;
                 return this.cursor.set(debug0 + debug12, debug1 + debug3, debug2 + debug4);
             }
-
-            protected /* synthetic */ Object computeNext() {
-                return this.computeNext();
-            }
         };
     }
 
@@ -402,43 +390,9 @@ extends Vec3i {
                 ++this.legIndex;
                 return this.cursor;
             }
-
-            protected /* synthetic */ Object computeNext() {
-                return this.computeNext();
-            }
         };
     }
 
-    @Override
-    public /* synthetic */ Vec3i cross(Vec3i vec3i) {
-        return this.cross(vec3i);
-    }
-
-    @Override
-    public /* synthetic */ Vec3i relative(Direction direction, int n) {
-        return this.relative(direction, n);
-    }
-
-    @Override
-    public /* synthetic */ Vec3i below(int n) {
-        return this.below(n);
-    }
-
-    @Override
-    public /* synthetic */ Vec3i below() {
-        return this.below();
-    }
-
-    @Override
-    public /* synthetic */ Vec3i above(int n) {
-        return this.above(n);
-    }
-
-    @Override
-    public /* synthetic */ Vec3i above() {
-        return this.above();
-    }
-
     static {
         PACKED_Z_LENGTH = PACKED_X_LENGTH = 1 + Mth.log2(Mth.smallestEncompassingPowerOfTwo(30000000));
         PACKED_Y_LENGTH = 64 - PACKED_X_LENGTH - PACKED_Z_LENGTH;
@@ -569,36 +523,6 @@ extends Vec3i {
         public BlockPos immutable() {
             return new BlockPos(this);
         }
-
-        @Override
-        public /* synthetic */ Vec3i cross(Vec3i vec3i) {
-            return super.cross(vec3i);
-        }
-
-        @Override
-        public /* synthetic */ Vec3i relative(Direction direction, int n) {
-            return this.relative(direction, n);
-        }
-
-        @Override
-        public /* synthetic */ Vec3i below(int n) {
-            return super.below(n);
-        }
-
-        @Override
-        public /* synthetic */ Vec3i below() {
-            return super.below();
-        }
-
-        @Override
-        public /* synthetic */ Vec3i above(int n) {
-            return super.above(n);
-        }
-
-        @Override
-        public /* synthetic */ Vec3i above() {
-            return super.above();
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/core/Direction.java b/src/main/java/net/minecraft/core/Direction.java
index ca455640bd46237dc35b7fe3f4ee9b18ca96b810..0ecfb80ee8a2559e5f70eaa5f8d83bee30892cfb 100644
--- a/src/main/java/net/minecraft/core/Direction.java
+++ b/src/main/java/net/minecraft/core/Direction.java
@@ -340,17 +340,12 @@ public enum Direction implements StringRepresentable
 
         @Override
         public Iterator<Direction> iterator() {
-            return Iterators.forArray((Object[])this.faces);
+            return Iterators.forArray(this.faces); // MagmaCube - decompile fix
         }
 
         public Stream<Direction> stream() {
             return Arrays.stream(this.faces);
         }
-
-        @Override
-        public /* synthetic */ boolean test(@Nullable Object object) {
-            return this.test((Direction)object);
-        }
     }
 
     public static enum AxisDirection {
@@ -392,11 +387,6 @@ public enum Direction implements StringRepresentable
             public double choose(double debug1, double debug3, double debug5) {
                 return debug1;
             }
-
-            @Override
-            public /* synthetic */ boolean test(@Nullable Object object) {
-                return super.test((Direction)object);
-            }
         }
         ,
         Y("y"){
@@ -410,11 +400,6 @@ public enum Direction implements StringRepresentable
             public double choose(double debug1, double debug3, double debug5) {
                 return debug3;
             }
-
-            @Override
-            public /* synthetic */ boolean test(@Nullable Object object) {
-                return super.test((Direction)object);
-            }
         }
         ,
         Z("z"){
@@ -428,11 +413,6 @@ public enum Direction implements StringRepresentable
             public double choose(double debug1, double debug3, double debug5) {
                 return debug5;
             }
-
-            @Override
-            public /* synthetic */ boolean test(@Nullable Object object) {
-                return super.test((Direction)object);
-            }
         };
 
         private static final Axis[] VALUES;
@@ -496,11 +476,6 @@ public enum Direction implements StringRepresentable
 
         public abstract double choose(double var1, double var3, double var5);
 
-        @Override
-        public /* synthetic */ boolean test(@Nullable Object object) {
-            return this.test((Direction)object);
-        }
-
         static {
             VALUES = Axis.values();
             CODEC = StringRepresentable.fromEnum(Axis::values, Axis::byName);
diff --git a/src/main/java/net/minecraft/core/FrontAndTop.java b/src/main/java/net/minecraft/core/FrontAndTop.java
index 5da2a14ee5bebe28d89a6b9b9de4bf3447987c44..a7b967838606bee6228b57e5aabbdcd670b73056 100644
--- a/src/main/java/net/minecraft/core/FrontAndTop.java
+++ b/src/main/java/net/minecraft/core/FrontAndTop.java
@@ -55,7 +55,7 @@ public enum FrontAndTop implements StringRepresentable
     static {
         LOOKUP_TOP_FRONT = (Int2ObjectMap)new Int2ObjectOpenHashMap(values().length);
         for (final FrontAndTop debug3 : values()) {
-            FrontAndTop.LOOKUP_TOP_FRONT.put(lookupKey(debug3.top, debug3.front), (Object)debug3);
+            FrontAndTop.LOOKUP_TOP_FRONT.put(lookupKey(debug3.top, debug3.front), debug3); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/core/GlobalPos.java b/src/main/java/net/minecraft/core/GlobalPos.java
index 9fbc1742a0dfb4a577a1b29871c75f2cca6b064d..285087790eec14f74b4edfba3f0043688fdb6856 100644
--- a/src/main/java/net/minecraft/core/GlobalPos.java
+++ b/src/main/java/net/minecraft/core/GlobalPos.java
@@ -56,6 +56,6 @@ public final class GlobalPos
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Level.RESOURCE_KEY_CODEC.fieldOf("dimension").forGetter((Function)GlobalPos::dimension), (App)BlockPos.CODEC.fieldOf("pos").forGetter((Function)GlobalPos::pos)).apply(debug0, (BiFunction)GlobalPos::of));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Level.RESOURCE_KEY_CODEC.fieldOf("dimension").forGetter(GlobalPos::dimension), BlockPos.CODEC.fieldOf("pos").forGetter(GlobalPos::pos)).apply(debug0, GlobalPos::of)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/core/MappedRegistry.java b/src/main/java/net/minecraft/core/MappedRegistry.java
index b74e4e7af237adb9075d147de2d2caaf397c9304..780596140bac8bb521c844097c20cda42f984aa4 100644
--- a/src/main/java/net/minecraft/core/MappedRegistry.java
+++ b/src/main/java/net/minecraft/core/MappedRegistry.java
@@ -53,14 +53,14 @@ public class MappedRegistry<T> extends WritableRegistry<T>
         super(debug1, debug2);
         this.byId = (ObjectList<T>)new ObjectArrayList(256);
         (this.toId = (Object2IntMap<T>)new Object2IntOpenCustomHashMap((Hash.Strategy)Util.identityStrategy())).defaultReturnValue(-1);
-        this.storage = (BiMap<ResourceLocation, T>)HashBiMap.create();
-        this.keyStorage = (BiMap<ResourceKey<T>, T>)HashBiMap.create();
-        this.lifecycles = (Map<T, Lifecycle>)Maps.newIdentityHashMap();
+        this.storage = HashBiMap.create(); // MagmaCube - decompile fix
+        this.keyStorage = HashBiMap.create(); // MagmaCube - decompile fix
+        this.lifecycles = Maps.newIdentityHashMap(); // MagmaCube - decompile fix
         this.elementsLifecycle = debug2;
     }
     
     public static <T> MapCodec<RegistryEntry<T>> withNameAndId(final ResourceKey<? extends Registry<T>> debug0, final MapCodec<T> debug1) {
-        return (MapCodec<RegistryEntry<T>>)RecordCodecBuilder.mapCodec(debug2 -> ((RecordCodecBuilder.Instance)debug2).group((App)ResourceLocation.CODEC.xmap((Function)ResourceKey.elementKey((ResourceKey<? extends Registry<Object>>)debug0), (Function)ResourceKey::location).fieldOf("name").forGetter(debug0 -> debug0.key), (App)Codec.INT.fieldOf("id").forGetter(debug0 -> debug0.id), (App)debug1.forGetter(debug0 -> debug0.value)).apply(debug2, RegistryEntry::new));
+        return (MapCodec<RegistryEntry<T>>)RecordCodecBuilder.<RegistryEntry<T>>mapCodec(debug2 -> debug2.group(ResourceLocation.CODEC.xmap(ResourceKey.elementKey(debug0), ResourceKey::location).fieldOf("name").forGetter(debug0l -> debug0l.key), Codec.INT.fieldOf("id").forGetter(debug0l -> debug0l.id), debug1.forGetter(debug0l -> debug0l.value)).apply(debug2, RegistryEntry::new)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -72,17 +72,17 @@ public class MappedRegistry<T> extends WritableRegistry<T>
         Validate.notNull((Object)debug2);
         Validate.notNull((Object)debug3);
         this.byId.size(Math.max(this.byId.size(), debug1 + 1));
-        this.byId.set(debug1, (Object)debug3);
-        this.toId.put((Object)debug3, debug1);
+        this.byId.set(debug1, debug3); // MagmaCube - decompile fix
+        this.toId.put(debug3, debug1); // MagmaCube - decompile fix
         this.randomCache = null;
         if (debug5 && this.keyStorage.containsKey((Object)debug2)) {
             MappedRegistry.LOGGER.debug("Adding duplicate key '{}' to registry", (Object)debug2);
         }
-        if (this.storage.containsValue((Object)debug3)) {
+        if (this.storage.containsValue(debug3)) { // MagmaCube - decompile fix
             MappedRegistry.LOGGER.error("Adding duplicate value '{}' to registry", (Object)debug3);
         }
-        this.storage.put((Object)debug2.location(), (Object)debug3);
-        this.keyStorage.put((Object)debug2, (Object)debug3);
+        this.storage.put(debug2.location(), debug3); // MagmaCube - decompile fix
+        this.keyStorage.put(debug2, debug3); // MagmaCube - decompile fix
         this.lifecycles.put(debug3, debug4);
         this.elementsLifecycle = this.elementsLifecycle.add(debug4);
         if (this.nextId <= debug1) {
@@ -172,7 +172,7 @@ public class MappedRegistry<T> extends WritableRegistry<T>
     
     @Override
     public Set<Map.Entry<ResourceKey<T>, T>> entrySet() {
-        return Collections.unmodifiableMap((Map<? extends ResourceKey<T>, ? extends T>)this.keyStorage).entrySet();
+        return Collections.unmodifiableMap(this.keyStorage).entrySet(); // MagmaCube - decompile fix
     }
     
     @Nullable
@@ -184,7 +184,7 @@ public class MappedRegistry<T> extends WritableRegistry<T>
             }
             this.randomCache = debug2.toArray(new Object[debug2.size()]);
         }
-        return Util.getRandom(this.randomCache, debug1);
+        return (T) Util.getRandom(this.randomCache, debug1); // MagmaCube - decompile fix
     }
     
     @Override
@@ -193,26 +193,20 @@ public class MappedRegistry<T> extends WritableRegistry<T>
     }
     
     public static <T> Codec<MappedRegistry<T>> networkCodec(final ResourceKey<? extends Registry<T>> debug0, final Lifecycle debug1, final Codec<T> debug2) {
-        final MappedRegistry<T> debug3;
-        final Iterator<RegistryEntry<T>> iterator;
-        RegistryEntry<T> debug4;
-        final ImmutableList.Builder<RegistryEntry<T>> debug5;
-        final Iterator<T> iterator2;
-        T debug6;
-        return (Codec<MappedRegistry<T>>)withNameAndId((ResourceKey<? extends Registry<Object>>)debug0, (com.mojang.serialization.MapCodec<Object>)debug2.fieldOf("element")).codec().listOf().xmap(debug2 -> {
-            debug3 = (MappedRegistry<T>)new MappedRegistry<Object>((ResourceKey<? extends Registry<T>>)debug0, debug1);
-            debug2.iterator();
+        return (Codec<MappedRegistry<T>>)withNameAndId((ResourceKey<? extends Registry<Object>>)debug0, (com.mojang.serialization.MapCodec<Object>)debug2.fieldOf("element")).codec().listOf().xmap(debug2l -> { // MagmaCube - decompile fix
+            MappedRegistry<T> debug3 = (MappedRegistry<T>)new MappedRegistry<T>(debug0, debug1); // MagmaCube - decompile fix
+            Iterator<RegistryEntry<Object>> iterator = debug2l.iterator(); // MagmaCube - decompile fix
             while (iterator.hasNext()) {
-                debug4 = iterator.next();
+                RegistryEntry<T> debug4 = (RegistryEntry<T>) iterator.next(); // MagmaCube - decompile fix
                 debug3.registerMapping(debug4.id, debug4.key, debug4.value, debug1);
             }
             return debug3;
-        }, debug0 -> {
-            debug5 = (ImmutableList.Builder<RegistryEntry<T>>)ImmutableList.builder();
-            debug0.iterator();
+        }, debug0l -> { // MagmaCube - decompile fix
+            ImmutableList.Builder<RegistryEntry<Object>> debug5 = ImmutableList.builder(); // MagmaCube - decompile fix
+            Iterator<T> iterator2 = debug0l.iterator(); // MagmaCube - decompile fix
             while (iterator2.hasNext()) {
-                debug6 = iterator2.next();
-                debug5.add((Object)new RegistryEntry(debug0.getResourceKey(debug6).get(), debug0.getId(debug6), debug6));
+                T debug6 = iterator2.next(); // MagmaCube - decompile fix
+                debug5.add(new RegistryEntry(debug0l.getResourceKey(debug6).get(), debug0l.getId(debug6), debug6)); // MagmaCube - decompile fix
             }
             return debug5.build();
         });
@@ -223,12 +217,11 @@ public class MappedRegistry<T> extends WritableRegistry<T>
     }
     
     public static <T> Codec<MappedRegistry<T>> directCodec(final ResourceKey<? extends Registry<T>> debug0, final Lifecycle debug1, final Codec<T> debug2) {
-        final MappedRegistry<T> debug4;
-        return (Codec<MappedRegistry<T>>)Codec.unboundedMap(ResourceLocation.CODEC.xmap((Function)ResourceKey.elementKey((ResourceKey<? extends Registry<Object>>)debug0), (Function)ResourceKey::location), (Codec)debug2).xmap(debug2 -> {
-            debug4 = (MappedRegistry<T>)new MappedRegistry<Object>((ResourceKey<? extends Registry<T>>)debug0, debug1);
-            debug2.forEach((debug2, debug3) -> debug4.register(debug2, debug3, debug1));
+        return Codec.unboundedMap(ResourceLocation.CODEC.xmap(ResourceKey.elementKey(debug0), ResourceKey::location), debug2).xmap(debug2l -> { // MagmaCube - decompile fix
+            MappedRegistry<T> debug4 = (MappedRegistry<T>)new MappedRegistry<Object>((ResourceKey<? extends Registry<Object>>) (Object) debug0, debug1); // MagmaCube - decompile fix
+            debug2l.forEach((debug2ll, debug3) -> debug4.register(debug2ll, debug3, debug1)); // MagmaCube - decompile fix
             return debug4;
-        }, debug0 -> ImmutableMap.copyOf((Map)debug0.keyStorage));
+        }, debug0l -> ImmutableMap.copyOf((Map)debug0l.keyStorage)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/core/Registry.java b/src/main/java/net/minecraft/core/Registry.java
index 64f881370d039725c73da54fa38515f9c6eea0f7..b773fbee47ee5541a06041964e51db4c44639faf 100644
--- a/src/main/java/net/minecraft/core/Registry.java
+++ b/src/main/java/net/minecraft/core/Registry.java
@@ -265,7 +265,7 @@ IdMap<T> {
         ResourceLocation debug4 = debug0.location();
         LOADERS.put(debug4, debug2);
         WritableRegistry<WritableRegistry<?>> debug5 = WRITABLE_REGISTRY;
-        return debug5.register(debug0, debug1, debug3);
+        return debug5.register((ResourceKey<WritableRegistry<?>>) (Object) debug0, debug1, debug3); // MagmaCube - decompile fix
     }
 
     protected Registry(ResourceKey<? extends Registry<T>> debug1, Lifecycle debug2) {
@@ -284,19 +284,19 @@ IdMap<T> {
     public <U> DataResult<Pair<T, U>> decode(DynamicOps<U> debug12, U debug2) {
         if (debug12.compressMaps()) {
             return debug12.getNumberValue(debug2).flatMap(debug1 -> {
-                Object debug2 = this.byId(debug1.intValue());
-                if (debug2 == null) {
+                T debug22 = this.byId(debug1.intValue()); // MagmaCube - decompile fix
+                if (debug22 == null) { // MagmaCube - decompile fix
                     return DataResult.error((String)("Unknown registry id: " + debug1));
                 }
-                return DataResult.success((Object)debug2, (Lifecycle)this.lifecycle(debug2));
-            }).map(debug1 -> Pair.of((Object)debug1, (Object)debug12.empty()));
+                return DataResult.success(debug22, (Lifecycle)this.lifecycle(debug22)); // MagmaCube - decompile fix
+            }).map(debug1 -> Pair.of(debug1, debug12.empty())); // MagmaCube - decompile fix
         }
         return ResourceLocation.CODEC.decode(debug12, debug2).flatMap(debug1 -> {
-            T debug2 = this.get((ResourceLocation)debug1.getFirst());
-            if (debug2 == null) {
+            T debug22 = this.get((ResourceLocation)debug1.getFirst()); // MagmaCube - decompile fix
+            if (debug22 == null) { // MagmaCube - decompile fix
                 return DataResult.error((String)("Unknown registry key: " + debug1.getFirst()));
             }
-            return DataResult.success((Object)Pair.of(debug2, (Object)debug1.getSecond()), (Lifecycle)this.lifecycle(debug2));
+            return DataResult.success(Pair.of(debug22, debug1.getSecond()), (Lifecycle)this.lifecycle(debug22)); // MagmaCube - decompile fix
         });
     }
 
@@ -322,6 +322,7 @@ IdMap<T> {
 
     @Override
     public abstract int getId(@Nullable T var1);
+    public final int getId(@Nullable Registry var1) { return getId((T) var1); } // MagmaCube - add method to avoid type checks
 
     @Nullable
     public abstract T get(@Nullable ResourceKey<T> var1);
@@ -364,16 +365,16 @@ IdMap<T> {
     }
 
     public static <V, T extends V> T register(Registry<V> debug0, ResourceLocation debug1, T debug2) {
-        return ((WritableRegistry)debug0).register(ResourceKey.create(debug0.key, debug1), debug2, Lifecycle.stable());
+        return (T) ((WritableRegistry)debug0).register(ResourceKey.create(debug0.key, debug1), debug2, Lifecycle.stable()); // MagmaCube - decompile fix
     }
 
     public static <V, T extends V> T registerMapping(Registry<V> debug0, int debug1, String debug2, T debug3) {
-        return ((WritableRegistry)debug0).registerMapping(debug1, ResourceKey.create(debug0.key, new ResourceLocation(debug2)), debug3, Lifecycle.stable());
+        return (T) ((WritableRegistry)debug0).registerMapping(debug1, ResourceKey.create(debug0.key, new ResourceLocation(debug2)), debug3, Lifecycle.stable()); // MagmaCube - decompile fix
     }
 
     static {
         BuiltinRegistries.bootstrap();
-        LOADERS.forEach((? super K debug0, ? super V debug1) -> {
+        LOADERS.forEach((debug0, debug1) -> { // MagmaCube - decompile fix
             if (debug1.get() == null) {
                 LOGGER.error("Unable to bootstrap registry '{}'", debug0);
             }
diff --git a/src/main/java/net/minecraft/core/RegistryAccess.java b/src/main/java/net/minecraft/core/RegistryAccess.java
index faa44a86c222bc9e4aa9941dd8ea0623d635f72a..ba49b3d001dad6ffb5cecf21b454f6282017681d 100644
--- a/src/main/java/net/minecraft/core/RegistryAccess.java
+++ b/src/main/java/net/minecraft/core/RegistryAccess.java
@@ -97,12 +97,12 @@ public abstract class RegistryAccess {
     }
 
     private static <E> void addBuiltinElements(RegistryHolder debug0, RegistryReadOps.ResourceAccess.MemoryMap debug1, RegistryData<E> debug2) {
-        ResourceKey<Registry<E>> debug3 = debug2.key();
+        ResourceKey<? extends Registry<E>> debug3 = debug2.key(); // MagmaCube - decompile fix
         boolean debug4 = !debug3.equals(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY) && !debug3.equals(Registry.DIMENSION_TYPE_REGISTRY);
         WritableRegistry<E> debug5 = BUILTIN.registryOrThrow(debug3);
         WritableRegistry<E> debug6 = debug0.registryOrThrow(debug3);
-        for (Map.Entry debug8 : debug5.entrySet()) {
-            Object debug9 = debug8.getValue();
+        for (Map.Entry<ResourceKey<E>, E> debug8 : debug5.entrySet()) { // MagmaCube - decompile fix
+            E debug9 = debug8.getValue(); // MagmaCube - decompile fix
             if (debug4) {
                 debug1.add(BUILTIN, debug8.getKey(), debug2.codec(), debug5.getId(debug9), debug9, debug5.lifecycle(debug9));
                 continue;
@@ -112,7 +112,7 @@ public abstract class RegistryAccess {
     }
 
     private static <R extends Registry<?>> void copyBuiltin(RegistryHolder debug0, ResourceKey<R> debug1) {
-        Registry<Registry<?>> debug2 = BuiltinRegistries.REGISTRY;
+        Registry<R> debug2 = (Registry<R>) BuiltinRegistries.REGISTRY; // MagmaCube - decompile fix
         Registry<?> debug3 = debug2.get(debug1);
         if (debug3 == null) {
             throw new IllegalStateException("Missing builtin registry: " + debug1);
@@ -147,18 +147,18 @@ public abstract class RegistryAccess {
         private final Map<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> registries;
 
         private static <E> Codec<RegistryHolder> makeNetworkCodec() {
-            Codec debug02 = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location);
-            Codec debug1 = debug02.partialDispatch("type", debug0 -> DataResult.success(debug0.key()), debug0 -> RegistryHolder.getNetworkCodec(debug0).map(debug1 -> MappedRegistry.networkCodec(debug0, Lifecycle.experimental(), debug1)));
+            Codec<ResourceKey<? extends Registry<E>>> debug02 = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location); // MagmaCube - decompile fix
+            Codec<MappedRegistry<E>> debug1 = debug02.partialDispatch("type", debug0 -> DataResult.success(debug0.key()), debug0 -> RegistryHolder.getNetworkCodec(debug0).map(debug12 -> MappedRegistry.networkCodec(debug0, Lifecycle.experimental(), debug12))); // MagmaCube - decompile fix
             UnboundedMapCodec debug2 = Codec.unboundedMap((Codec)debug02, (Codec)debug1);
             return RegistryHolder.captureMap(debug2);
         }
 
         private static <K extends ResourceKey<? extends Registry<?>>, V extends MappedRegistry<?>> Codec<RegistryHolder> captureMap(UnboundedMapCodec<K, V> debug0) {
-            return debug0.xmap(RegistryHolder::new, debug02 -> (ImmutableMap)debug02.registries.entrySet().stream().filter(debug0 -> ((RegistryData)REGISTRIES.get(debug0.getKey())).sendToClient()).collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, Map.Entry::getValue)));
+            return debug0.xmap(RegistryHolder::new, debug02 -> (ImmutableMap)debug02.registries.entrySet().stream().filter(debug03 -> ((RegistryData)REGISTRIES.get(debug03.getKey())).sendToClient()).collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, Map.Entry::getValue))); // MagmaCube - decompile fix
         }
 
         private static <E> DataResult<? extends Codec<E>> getNetworkCodec(ResourceKey<? extends Registry<E>> debug02) {
-            return Optional.ofNullable(REGISTRIES.get(debug02)).map(debug0 -> debug0.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error((String)("Unknown or not serializable registry: " + debug02)));
+            return (DataResult<? extends Codec<E>>) (Object) Optional.ofNullable(REGISTRIES.get(debug02)).map(debug0 -> debug0.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown or not serializable registry: " + debug02)); // MagmaCube - decompile fix
         }
 
         public RegistryHolder() {
@@ -175,7 +175,7 @@ public abstract class RegistryAccess {
 
         @Override
         public <E> Optional<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> debug1) {
-            return Optional.ofNullable(this.registries.get(debug1)).map(debug0 -> debug0);
+            return (Optional<WritableRegistry<E>>) (Object) Optional.ofNullable(this.registries.get(debug1)).map(debug0 -> debug0); // MagmaCube - decompile fix
         }
     }
 
diff --git a/src/main/java/net/minecraft/core/Rotations.java b/src/main/java/net/minecraft/core/Rotations.java
index 4243df17e659125cb86ec32b254bf39881135132..64ac0e329c768d8c23adede971ebf491e7e16e57 100644
--- a/src/main/java/net/minecraft/core/Rotations.java
+++ b/src/main/java/net/minecraft/core/Rotations.java
@@ -22,9 +22,9 @@ public class Rotations
     
     public ListTag save() {
         final ListTag debug1 = new ListTag();
-        ((AbstractList<FloatTag>)debug1).add(FloatTag.valueOf(this.x));
-        ((AbstractList<FloatTag>)debug1).add(FloatTag.valueOf(this.y));
-        ((AbstractList<FloatTag>)debug1).add(FloatTag.valueOf(this.z));
+        debug1.add(FloatTag.valueOf(this.x)); // MagmaCube - decompile fix
+        debug1.add(FloatTag.valueOf(this.y)); // MagmaCube - decompile fix
+        debug1.add(FloatTag.valueOf(this.z)); // MagmaCube - decompile fix
         return debug1;
     }
     
diff --git a/src/main/java/net/minecraft/core/SectionPos.java b/src/main/java/net/minecraft/core/SectionPos.java
index e9cc9fe79758a1b190a7f6f9989b517f3d732a24..37177a57233c8037f137fdc53d3ad6253a67d22d 100644
--- a/src/main/java/net/minecraft/core/SectionPos.java
+++ b/src/main/java/net/minecraft/core/SectionPos.java
@@ -197,7 +197,6 @@ extends Vec3i {
         return StreamSupport.stream(new Spliterators.AbstractSpliterator<SectionPos>((long)((debug3 - debug0 + 1) * (debug4 - debug1 + 1) * (debug5 - debug2 + 1)), 64){
             final Cursor3D cursor;
             {
-                super(debug12, debug32);
                 this.cursor = new Cursor3D(debug0, debug1, debug2, debug3, debug4, debug5);
             }
 
diff --git a/src/main/java/net/minecraft/core/SerializableUUID.java b/src/main/java/net/minecraft/core/SerializableUUID.java
index d57fc4fe62c9900677d870c9488e8d3d662f6392..7b897a8ebaa846ac4aaa49113d46db389fde8c7b 100644
--- a/src/main/java/net/minecraft/core/SerializableUUID.java
+++ b/src/main/java/net/minecraft/core/SerializableUUID.java
@@ -27,6 +27,6 @@ public final class SerializableUUID
     }
     
     static {
-        CODEC = Codec.INT_STREAM.comapFlatMap(debug0 -> Util.fixedSize(debug0, 4).map((Function)SerializableUUID::uuidFromIntArray), debug0 -> Arrays.stream(uuidToIntArray(debug0)));
+        CODEC = Codec.INT_STREAM.comapFlatMap(debug0 -> Util.fixedSize(debug0, 4).map(SerializableUUID::uuidFromIntArray), debug0 -> Arrays.stream(uuidToIntArray(debug0))); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/core/Vec3i.java b/src/main/java/net/minecraft/core/Vec3i.java
index abaf52e297fc13a87e575ce24af29c0d95cd8eac..e1c7bd2f6d7323029fc6a34308051eb25352a2a3 100644
--- a/src/main/java/net/minecraft/core/Vec3i.java
+++ b/src/main/java/net/minecraft/core/Vec3i.java
@@ -151,7 +151,7 @@ public class Vec3i implements Comparable<Vec3i>
     }
     
     static {
-        CODEC = Codec.INT_STREAM.comapFlatMap(debug0 -> Util.fixedSize(debug0, 3).map(debug0 -> new Vec3i(debug0[0], debug0[1], debug0[2])), debug0 -> IntStream.of(debug0.getX(), debug0.getY(), debug0.getZ()));
+        CODEC = Codec.INT_STREAM.comapFlatMap(debug0 -> Util.fixedSize(debug0, 3).map(debug02 -> new Vec3i(debug02[0], debug02[1], debug02[2])), debug0 -> IntStream.of(debug0.getX(), debug0.getY(), debug0.getZ())); // MagmaCube - decompile fix
         ZERO = new Vec3i(0, 0, 0);
     }
 }
diff --git a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
index d773d1fafa346780f4747adf0dcfadd8d110882c..43604d93fdb57954fe8dfb927826331a11d3bff0 100644
--- a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
@@ -113,19 +113,19 @@ public interface DispenseItemBehavior
         DispenserBlock.registerBehavior(Items.EGG, new AbstractProjectileDispenseBehavior() {
             @Override
             protected Projectile getProjectile(final Level debug1, final Position debug2, final ItemStack debug3) {
-                return Util.make(new ThrownEgg(debug1, debug2.x(), debug2.y(), debug2.z()), debug1 -> debug1.setItem(debug3));
+                return Util.make(new ThrownEgg(debug1, debug2.x(), debug2.y(), debug2.z()), debug1l -> debug1l.setItem(debug3)); // MagmaCube - decompile fix
             }
         });
         DispenserBlock.registerBehavior(Items.SNOWBALL, new AbstractProjectileDispenseBehavior() {
             @Override
             protected Projectile getProjectile(final Level debug1, final Position debug2, final ItemStack debug3) {
-                return Util.make(new Snowball(debug1, debug2.x(), debug2.y(), debug2.z()), debug1 -> debug1.setItem(debug3));
+                return Util.make(new Snowball(debug1, debug2.x(), debug2.y(), debug2.z()), debug1l -> debug1l.setItem(debug3)); // MagmaCube - decompile fix
             }
         });
         DispenserBlock.registerBehavior(Items.EXPERIENCE_BOTTLE, new AbstractProjectileDispenseBehavior() {
             @Override
             protected Projectile getProjectile(final Level debug1, final Position debug2, final ItemStack debug3) {
-                return Util.make(new ThrownExperienceBottle(debug1, debug2.x(), debug2.y(), debug2.z()), debug1 -> debug1.setItem(debug3));
+                return Util.make(new ThrownExperienceBottle(debug1, debug2.x(), debug2.y(), debug2.z()), debug1l -> debug1l.setItem(debug3)); // MagmaCube - decompile fix
             }
             
             @Override
@@ -144,7 +144,7 @@ public interface DispenseItemBehavior
                 return new AbstractProjectileDispenseBehavior() {
                     @Override
                     protected Projectile getProjectile(final Level debug1, final Position debug2, final ItemStack debug3) {
-                        return Util.make(new ThrownPotion(debug1, debug2.x(), debug2.y(), debug2.z()), debug1 -> debug1.setItem(debug3));
+                        return Util.make(new ThrownPotion(debug1, debug2.x(), debug2.y(), debug2.z()), debug1l -> debug1l.setItem(debug3)); // MagmaCube - decompile fix
                     }
                     
                     @Override
@@ -165,7 +165,7 @@ public interface DispenseItemBehavior
                 return new AbstractProjectileDispenseBehavior() {
                     @Override
                     protected Projectile getProjectile(final Level debug1, final Position debug2, final ItemStack debug3) {
-                        return Util.make(new ThrownPotion(debug1, debug2.x(), debug2.y(), debug2.z()), debug1 -> debug1.setItem(debug3));
+                        return Util.make(new ThrownPotion(debug1, debug2.x(), debug2.y(), debug2.z()), debug1l -> debug1l.setItem(debug3)); // MagmaCube - decompile fix
                     }
                     
                     @Override
@@ -208,10 +208,9 @@ public interface DispenseItemBehavior
         DispenserBlock.registerBehavior(Items.SADDLE, new OptionalDispenseItemBehavior() {
             public ItemStack execute(final BlockSource debug1, final ItemStack debug2) {
                 final BlockPos debug3 = debug1.getPos().relative(debug1.getBlockState().getValue((Property<Direction>)DispenserBlock.FACING));
-                final Saddleable debug5;
                 final List<LivingEntity> debug4 = debug1.getLevel().getEntitiesOfClass((Class<? extends LivingEntity>)LivingEntity.class, new AABB(debug3), debug0 -> {
                     if (debug0 instanceof Saddleable) {
-                        debug5 = debug0;
+                        Saddleable debug5 = (Saddleable) debug0; // MagmaCube - decompile fix
                         return !debug5.isSaddled() && debug5.isSaddleable();
                     }
                     else {
@@ -304,7 +303,7 @@ public interface DispenseItemBehavior
                 final double debug10 = debug9.nextGaussian() * 0.05 + debug3.getStepX();
                 final double debug11 = debug9.nextGaussian() * 0.05 + debug3.getStepY();
                 final double debug12 = debug9.nextGaussian() * 0.05 + debug3.getStepZ();
-                debug8.addFreshEntity(Util.make(new SmallFireball(debug8, debug5, debug6, debug7, debug10, debug11, debug12), debug1 -> debug1.setItem(debug2)));
+                debug8.addFreshEntity(Util.make(new SmallFireball(debug8, debug5, debug6, debug7, debug10, debug11, debug12), debug1l -> debug1l.setItem(debug2))); // MagmaCube - decompile fix
                 debug2.shrink(1);
                 return debug2;
             }
@@ -360,7 +359,7 @@ public interface DispenseItemBehavior
                 if (debug2.isEmpty()) {
                     return new ItemStack(debug8);
                 }
-                if (debug1.getEntity().addItem(new ItemStack(debug8)) < 0) {
+                if (((DispenserBlockEntity) debug1.getEntity()).addItem(new ItemStack(debug8)) < 0) { // MagmaCube - decompile fix
                     this.defaultDispenseItemBehavior.dispense(debug1, new ItemStack(debug8));
                 }
                 return debug2;
@@ -378,7 +377,7 @@ public interface DispenseItemBehavior
                     debug3.setBlockAndUpdate(debug5, BaseFireBlock.getState(debug3, debug5));
                 }
                 else if (CampfireBlock.canLight(debug6)) {
-                    debug3.setBlockAndUpdate(debug5, ((StateHolder<O, BlockState>)debug6).setValue((Property<Comparable>)BlockStateProperties.LIT, true));
+                    debug3.setBlockAndUpdate(debug5, (debug6).setValue(BlockStateProperties.LIT, true)); // MagmaCube - decompile fix
                 }
                 else if (debug6.getBlock() instanceof TntBlock) {
                     TntBlock.explode(debug3, debug5);
@@ -441,7 +440,7 @@ public interface DispenseItemBehavior
                 final Direction debug4 = debug1.getBlockState().getValue((Property<Direction>)DispenserBlock.FACING);
                 final BlockPos debug5 = debug1.getPos().relative(debug4);
                 if (debug3.isEmptyBlock(debug5) && WitherSkullBlock.canSpawnMob(debug3, debug5, debug2)) {
-                    debug3.setBlock(debug5, ((StateHolder<O, BlockState>)Blocks.WITHER_SKELETON_SKULL.defaultBlockState()).setValue((Property<Comparable>)SkullBlock.ROTATION, (debug4.getAxis() == Direction.Axis.Y) ? 0 : (debug4.getOpposite().get2DDataValue() * 4)), 3);
+                    debug3.setBlock(debug5, (Blocks.WITHER_SKELETON_SKULL.defaultBlockState()).setValue(SkullBlock.ROTATION, (debug4.getAxis() == Direction.Axis.Y) ? 0 : (debug4.getOpposite().get2DDataValue() * 4)), 3); // MagmaCube - decompile fix
                     final BlockEntity debug6 = debug3.getBlockEntity(debug5);
                     if (debug6 instanceof SkullBlockEntity) {
                         WitherSkullBlock.checkSpawn(debug3, debug5, (SkullBlockEntity)debug6);
@@ -486,7 +485,7 @@ public interface DispenseItemBehavior
                 if (debug2.isEmpty()) {
                     return debug3.copy();
                 }
-                if (debug1.getEntity().addItem(debug3.copy()) < 0) {
+                if (((DispenserBlockEntity) debug1.getEntity()).addItem(debug3.copy()) < 0) { // MagmaCube - decompile fix
                     this.defaultDispenseItemBehavior.dispense(debug1, debug3.copy());
                 }
                 return debug2;
@@ -497,7 +496,7 @@ public interface DispenseItemBehavior
                 final ServerLevel debug3 = debug1.getLevel();
                 final BlockPos debug4 = debug1.getPos().relative(debug1.getBlockState().getValue((Property<Direction>)DispenserBlock.FACING));
                 final BlockState debug5 = debug3.getBlockState(debug4);
-                if (debug5.is(BlockTags.BEEHIVES, debug0 -> debug0.hasProperty((Property<Comparable>)BeehiveBlock.HONEY_LEVEL)) && debug5.getValue((Property<Integer>)BeehiveBlock.HONEY_LEVEL) >= 5) {
+                if (debug5.is(BlockTags.BEEHIVES, debug0 -> debug0.hasProperty(BeehiveBlock.HONEY_LEVEL)) && debug5.getValue((Property<Integer>)BeehiveBlock.HONEY_LEVEL) >= 5) { // MagmaCube - decompile fix
                     ((BeehiveBlock)debug5.getBlock()).releaseBeesAndResetHoneyLevel(debug3, debug5, debug4, null, BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED);
                     this.setSuccess(true);
                     return this.takeLiquid(debug1, debug2, new ItemStack(Items.HONEY_BOTTLE));
@@ -532,7 +531,7 @@ public interface DispenseItemBehavior
         DispenserBlock.registerBehavior(Items.SHEARS.asItem(), new ShearsDispenseItemBehavior());
     }
     
-    default void setEntityPokingOutOfBlock(final BlockSource debug0, final Entity debug1, final Direction debug2) {
+    static void setEntityPokingOutOfBlock(final BlockSource debug0, final Entity debug1, final Direction debug2) { // MagmaCube - decompile fix
         debug1.setPos(debug0.x() + debug2.getStepX() * (0.5000099999997474 - debug1.getBbWidth() / 2.0), debug0.y() + debug2.getStepY() * (0.5000099999997474 - debug1.getBbHeight() / 2.0) - debug1.getBbHeight() / 2.0, debug0.z() + debug2.getStepZ() * (0.5000099999997474 - debug1.getBbWidth() / 2.0));
     }
 }
diff --git a/src/main/java/net/minecraft/core/particles/BlockParticleOption.java b/src/main/java/net/minecraft/core/particles/BlockParticleOption.java
index 4dfdae1ca47b415d9ca1b9021101883bbae4982a..ba9d88c53329f2054728c621eeda724a91025799 100644
--- a/src/main/java/net/minecraft/core/particles/BlockParticleOption.java
+++ b/src/main/java/net/minecraft/core/particles/BlockParticleOption.java
@@ -16,7 +16,7 @@ public class BlockParticleOption implements ParticleOptions
     private final BlockState state;
     
     public static Codec<BlockParticleOption> codec(final ParticleType<BlockParticleOption> debug0) {
-        return (Codec<BlockParticleOption>)BlockState.CODEC.xmap(debug1 -> new BlockParticleOption(debug0, debug1), debug0 -> debug0.state);
+        return (Codec<BlockParticleOption>)BlockState.CODEC.xmap(debug1 -> new BlockParticleOption(debug0, debug1), debug0l -> debug0l.state);
     }
     
     public BlockParticleOption(final ParticleType<BlockParticleOption> debug1, final BlockState debug2) {
diff --git a/src/main/java/net/minecraft/core/particles/DustParticleOptions.java b/src/main/java/net/minecraft/core/particles/DustParticleOptions.java
index eeea30219fa30ac15bd8ccf8132954eb18665c99..4dc81635c823df27faa493a1d8adfa1b2f6e761d 100644
--- a/src/main/java/net/minecraft/core/particles/DustParticleOptions.java
+++ b/src/main/java/net/minecraft/core/particles/DustParticleOptions.java
@@ -64,7 +64,7 @@ public class DustParticleOptions implements ParticleOptions
     
     static {
         REDSTONE = new DustParticleOptions(1.0f, 0.0f, 0.0f, 1.0f);
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.FLOAT.fieldOf("r").forGetter(debug0 -> debug0.r), (App)Codec.FLOAT.fieldOf("g").forGetter(debug0 -> debug0.g), (App)Codec.FLOAT.fieldOf("b").forGetter(debug0 -> debug0.b), (App)Codec.FLOAT.fieldOf("scale").forGetter(debug0 -> debug0.scale)).apply(debug0, DustParticleOptions::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.FLOAT.fieldOf("r").forGetter(debug0l -> debug0l.r), Codec.FLOAT.fieldOf("g").forGetter(debug0l -> debug0l.g), Codec.FLOAT.fieldOf("b").forGetter(debug0l -> debug0l.b), Codec.FLOAT.fieldOf("scale").forGetter(debug0l -> debug0l.scale)).apply(debug0, DustParticleOptions::new)); // MagmaCube - decompile fix
         DESERIALIZER = new Deserializer<DustParticleOptions>() {
             @Override
             public DustParticleOptions fromCommand(final ParticleType<DustParticleOptions> debug1, final StringReader debug2) throws CommandSyntaxException {
diff --git a/src/main/java/net/minecraft/core/particles/ItemParticleOption.java b/src/main/java/net/minecraft/core/particles/ItemParticleOption.java
index 776c0c3288ca5b84df048b21382c114dc7a9c356..77c5d287251300f630086f3c47395cae9b9e1de3 100644
--- a/src/main/java/net/minecraft/core/particles/ItemParticleOption.java
+++ b/src/main/java/net/minecraft/core/particles/ItemParticleOption.java
@@ -16,7 +16,7 @@ public class ItemParticleOption implements ParticleOptions
     private final ItemStack itemStack;
     
     public static Codec<ItemParticleOption> codec(final ParticleType<ItemParticleOption> debug0) {
-        return (Codec<ItemParticleOption>)ItemStack.CODEC.xmap(debug1 -> new ItemParticleOption(debug0, debug1), debug0 -> debug0.itemStack);
+        return (Codec<ItemParticleOption>)ItemStack.CODEC.xmap(debug1 -> new ItemParticleOption(debug0, debug1), debug0l -> debug0l.itemStack); // MagmaCube - decompile fix
     }
     
     public ItemParticleOption(final ParticleType<ItemParticleOption> debug1, final ItemStack debug2) {
diff --git a/src/main/java/net/minecraft/core/particles/ParticleTypes.java b/src/main/java/net/minecraft/core/particles/ParticleTypes.java
index b4836d29808bed88e82723cd7559dcbeeea00081..c5dbbdc410c12eb218d1c6f308b18adc1afd097d 100644
--- a/src/main/java/net/minecraft/core/particles/ParticleTypes.java
+++ b/src/main/java/net/minecraft/core/particles/ParticleTypes.java
@@ -166,6 +166,6 @@ public class ParticleTypes
         LANDING_OBSIDIAN_TEAR = register("landing_obsidian_tear", false);
         REVERSE_PORTAL = register("reverse_portal", false);
         WHITE_ASH = register("white_ash", false);
-        CODEC = Registry.PARTICLE_TYPE.dispatch("type", (Function)ParticleOptions::getType, (Function)ParticleType::codec);
+        CODEC = Registry.PARTICLE_TYPE.dispatch("type", ParticleOptions::getType, ParticleType::codec); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/data/BuiltinRegistries.java b/src/main/java/net/minecraft/data/BuiltinRegistries.java
index 85ec4b0b20009ae1b80ae3ac7841029ed2b3993d..81732ab0afd89508653ce0f12a2bbd3b92bac8c6 100644
--- a/src/main/java/net/minecraft/data/BuiltinRegistries.java
+++ b/src/main/java/net/minecraft/data/BuiltinRegistries.java
@@ -67,11 +67,11 @@ public class BuiltinRegistries
     }
     
     public static <V, T extends V> T register(final Registry<V> debug0, final ResourceLocation debug1, final T debug2) {
-        return ((WritableRegistry)debug0).register(ResourceKey.create((ResourceKey<? extends Registry<Object>>)debug0.key(), debug1), debug2, Lifecycle.stable());
+        return (T) ((WritableRegistry)debug0).register(ResourceKey.create((ResourceKey<? extends Registry<Object>>)debug0.key(), debug1), debug2, Lifecycle.stable()); // MagmaCube - decompile fix
     }
     
     public static <V, T extends V> T registerMapping(final Registry<V> debug0, final int debug1, final ResourceKey<V> debug2, final T debug3) {
-        return ((WritableRegistry)debug0).registerMapping(debug1, debug2, debug3, Lifecycle.stable());
+        return (T) ((WritableRegistry)debug0).registerMapping(debug1, debug2, debug3, Lifecycle.stable()); // MagmaCube - decompile fix
     }
     
     public static void bootstrap() {
@@ -82,10 +82,10 @@ public class BuiltinRegistries
         LOADERS = Maps.newLinkedHashMap();
         WRITABLE_REGISTRY = new MappedRegistry<WritableRegistry<?>>((ResourceKey<? extends Registry<WritableRegistry<?>>>)ResourceKey.createRegistryKey(new ResourceLocation("root")), Lifecycle.experimental());
         REGISTRY = BuiltinRegistries.WRITABLE_REGISTRY;
-        CONFIGURED_SURFACE_BUILDER = registerSimple((ResourceKey<? extends Registry<ConfiguredSurfaceBuilder<SurfaceBuilderBaseConfiguration>>>)Registry.CONFIGURED_SURFACE_BUILDER_REGISTRY, () -> SurfaceBuilders.NOPE);
-        CONFIGURED_CARVER = registerSimple((ResourceKey<? extends Registry<ConfiguredWorldCarver<ProbabilityFeatureConfiguration>>>)Registry.CONFIGURED_CARVER_REGISTRY, () -> Carvers.CAVE);
-        CONFIGURED_FEATURE = registerSimple((ResourceKey<? extends Registry<ConfiguredFeature<TreeConfiguration, ?>>>)Registry.CONFIGURED_FEATURE_REGISTRY, () -> Features.OAK);
-        CONFIGURED_STRUCTURE_FEATURE = registerSimple((ResourceKey<? extends Registry<ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>>>)Registry.CONFIGURED_STRUCTURE_FEATURE_REGISTRY, () -> StructureFeatures.MINESHAFT);
+        CONFIGURED_SURFACE_BUILDER = registerSimple(Registry.CONFIGURED_SURFACE_BUILDER_REGISTRY, () -> SurfaceBuilders.NOPE); // MagmaCube - decompile fix
+        CONFIGURED_CARVER = registerSimple(Registry.CONFIGURED_CARVER_REGISTRY, () -> Carvers.CAVE); // MagmaCube - decompile fix
+        CONFIGURED_FEATURE = registerSimple(Registry.CONFIGURED_FEATURE_REGISTRY, () -> Features.OAK); // MagmaCube - decompile fix
+        CONFIGURED_STRUCTURE_FEATURE = registerSimple(Registry.CONFIGURED_STRUCTURE_FEATURE_REGISTRY, () -> StructureFeatures.MINESHAFT); // MagmaCube - decompile fix
         PROCESSOR_LIST = registerSimple(Registry.PROCESSOR_LIST_REGISTRY, () -> ProcessorLists.ZOMBIE_PLAINS);
         TEMPLATE_POOL = registerSimple(Registry.TEMPLATE_POOL_REGISTRY, Pools::bootstrap);
         BIOME = registerSimple(Registry.BIOME_REGISTRY, () -> Biomes.PLAINS);
diff --git a/src/main/java/net/minecraft/data/DataGenerator.java b/src/main/java/net/minecraft/data/DataGenerator.java
index b34ab9f6ef9812288db00a852489acc84dd3b9f2..68120a00022aba042af985ab4126649261e3961c 100644
--- a/src/main/java/net/minecraft/data/DataGenerator.java
+++ b/src/main/java/net/minecraft/data/DataGenerator.java
@@ -20,7 +20,7 @@ public class DataGenerator
     private final List<DataProvider> providers;
     
     public DataGenerator(final Path debug1, final Collection<Path> debug2) {
-        this.providers = (List<DataProvider>)Lists.newArrayList();
+        this.providers = Lists.newArrayList(); // MagmaCube - decompile fix
         this.outputFolder = debug1;
         this.inputFolders = debug2;
     }
diff --git a/src/main/java/net/minecraft/data/DataProvider.java b/src/main/java/net/minecraft/data/DataProvider.java
index 682ae97ba598f4ef3a7a699987d6e7840d035df3..39184aab0a3f4aaed7176b49594a1e56bde78295 100644
--- a/src/main/java/net/minecraft/data/DataProvider.java
+++ b/src/main/java/net/minecraft/data/DataProvider.java
@@ -21,7 +21,7 @@ public interface DataProvider
     
     String getName();
     
-    default void save(final Gson debug0, final HashCache debug1, final JsonElement debug2, final Path debug3) throws IOException {
+    static void save(final Gson debug0, final HashCache debug1, final JsonElement debug2, final Path debug3) throws IOException { // MagmaCube - decompile fix
         final String debug4 = debug0.toJson(debug2);
         final String debug5 = DataProvider.SHA1.hashUnencodedChars((CharSequence)debug4).toString();
         if (!Objects.equals(debug1.getHash(debug3), debug5) || !Files.exists(debug3, new LinkOption[0])) {
diff --git a/src/main/java/net/minecraft/data/HashCache.java b/src/main/java/net/minecraft/data/HashCache.java
index eafa9ffb4c8fe6043abb05771b1b58a48e787a21..6b91d74ed22530cf5e5703abf297a2c13c63de3f 100644
--- a/src/main/java/net/minecraft/data/HashCache.java
+++ b/src/main/java/net/minecraft/data/HashCache.java
@@ -54,8 +54,8 @@ public class HashCache {
         this.walkOutputFiles().forEach(debug1 -> this.oldCache.put((Path)debug1, ""));
         if (Files.isReadable(this.cachePath)) {
             IOUtils.readLines((InputStream)Files.newInputStream(this.cachePath, new OpenOption[0]), (Charset)Charsets.UTF_8).forEach(debug2 -> {
-                int debug3 = debug2.indexOf(32);
-                this.oldCache.put(debug12.resolve(debug2.substring(debug3 + 1)), debug2.substring(0, debug3));
+                int debug3l = debug2.indexOf(32); // MagmaCube - decompile fix
+                this.oldCache.put(debug12.resolve(debug2.substring(debug3l + 1)), debug2.substring(0, debug3l)); // MagmaCube - decompile fix
             });
         }
     }
diff --git a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
index ae28df06ae7d0bdf2726e2e7bbc920d69bdcd500..a88fee293e29855bd72cd35af40dfd092279511d 100644
--- a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
+++ b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
@@ -26,7 +26,7 @@ public class RegistryDumpReport implements DataProvider
     @Override
     public void run(final HashCache debug1) throws IOException {
         final JsonObject debug2 = new JsonObject();
-        Registry.REGISTRY.keySet().forEach(debug1 -> debug2.add(debug1.toString(), dumpRegistry((Registry<Object>)Registry.REGISTRY.get(debug1))));
+        Registry.REGISTRY.keySet().forEach(debug1l -> debug2.add(debug1l.toString(), dumpRegistry(Registry.REGISTRY.get(debug1l)))); // MagmaCube - decompile fix
         final Path debug3 = this.generator.getOutputFolder().resolve("reports/registries.json");
         DataProvider.save(RegistryDumpReport.GSON, debug1, (JsonElement)debug2, debug3);
     }
diff --git a/src/main/java/net/minecraft/data/loot/LootTableProvider.java b/src/main/java/net/minecraft/data/loot/LootTableProvider.java
index 70044e7761989109df0c29f9e8b4bfbfdc4b76cb..022eb6d0f927d6bef828579c9f23898ee61a6965 100644
--- a/src/main/java/net/minecraft/data/loot/LootTableProvider.java
+++ b/src/main/java/net/minecraft/data/loot/LootTableProvider.java
@@ -53,7 +53,7 @@ implements DataProvider {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final Gson GSON = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();
     private final DataGenerator generator;
-    private final List<Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootContextParamSet>> subProviders = ImmutableList.of((Object)Pair.of(FishingLoot::new, (Object)LootContextParamSets.FISHING), (Object)Pair.of(ChestLoot::new, (Object)LootContextParamSets.CHEST), (Object)Pair.of(EntityLoot::new, (Object)LootContextParamSets.ENTITY), (Object)Pair.of(BlockLoot::new, (Object)LootContextParamSets.BLOCK), (Object)Pair.of(PiglinBarterLoot::new, (Object)LootContextParamSets.PIGLIN_BARTER), (Object)Pair.of(GiftLoot::new, (Object)LootContextParamSets.GIFT));
+    private final List<Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootContextParamSet>> subProviders = ImmutableList.of(Pair.of(FishingLoot::new, LootContextParamSets.FISHING), Pair.of(ChestLoot::new, LootContextParamSets.CHEST), Pair.of(EntityLoot::new, LootContextParamSets.ENTITY), Pair.of(BlockLoot::new, LootContextParamSets.BLOCK), Pair.of(PiglinBarterLoot::new, LootContextParamSets.PIGLIN_BARTER), Pair.of(GiftLoot::new, LootContextParamSets.GIFT)); // MagmaCube - decompile fix
 
     public LootTableProvider(DataGenerator debug1) {
         this.generator = debug1;
@@ -62,14 +62,14 @@ implements DataProvider {
     @Override
     public void run(HashCache debug12) {
         Path debug22 = this.generator.getOutputFolder();
-        HashMap debug32 = Maps.newHashMap();
-        this.subProviders.forEach(debug1 -> ((Consumer)((Supplier)debug1.getFirst()).get()).accept((debug2, debug3) -> {
+        HashMap<ResourceLocation, LootTable> debug32 = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.subProviders.forEach(debug1 -> debug1.getFirst().get().accept((debug2, debug3) -> { // MagmaCube - decompile fix
             if (debug32.put(debug2, debug3.setParamSet((LootContextParamSet)debug1.getSecond()).build()) != null) {
                 throw new IllegalStateException("Duplicate loot table " + debug2);
             }
         }));
         ValidationContext debug4 = new ValidationContext(LootContextParamSets.ALL_PARAMS, debug0 -> null, debug32::get);
-        Sets.SetView debug5 = Sets.difference(BuiltInLootTables.all(), debug32.keySet());
+        Sets.SetView<ResourceLocation> debug5 = Sets.difference(BuiltInLootTables.all(), debug32.keySet()); // MagmaCube - decompile fix
         for (ResourceLocation debug7 : debug5) {
             debug4.reportProblem("Missing built-in table: " + debug7);
         }
@@ -80,12 +80,12 @@ implements DataProvider {
             throw new IllegalStateException("Failed to validate loot tables, see logs");
         }
         debug32.forEach((debug2, debug3) -> {
-            Path debug4 = LootTableProvider.createPath(debug22, debug2);
+            Path debug4l = LootTableProvider.createPath(debug22, debug2); // MagmaCube - decompile fix
             try {
-                DataProvider.save(GSON, debug12, LootTables.serialize(debug3), debug4);
+                DataProvider.save(GSON, debug12, LootTables.serialize(debug3), debug4l); // MagmaCube - decompile fix
             }
-            catch (IOException debug5) {
-                LOGGER.error("Couldn't save loot table {}", (Object)debug4, (Object)debug5);
+            catch (IOException debug5l) { // MagmaCube - decompile fix
+                LOGGER.error("Couldn't save loot table {}", debug4l, debug5l); // MagmaCube - decompile fix
             }
         });
     }
diff --git a/src/main/java/net/minecraft/data/loot/PiglinBarterLoot.java b/src/main/java/net/minecraft/data/loot/PiglinBarterLoot.java
index 26a72fcda777d0d94702b3331ab1c25f089584a7..3821688b0cce4f4cda302d7f20de460567902359 100644
--- a/src/main/java/net/minecraft/data/loot/PiglinBarterLoot.java
+++ b/src/main/java/net/minecraft/data/loot/PiglinBarterLoot.java
@@ -28,10 +28,5 @@ implements Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> {
     public void accept(BiConsumer<ResourceLocation, LootTable.Builder> debug1) {
         debug1.accept(BuiltInLootTables.PIGLIN_BARTERING, LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantIntValue.exactly(1)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.BOOK).setWeight(5)).apply(new EnchantRandomlyFunction.Builder().withEnchantment(Enchantments.SOUL_SPEED))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.IRON_BOOTS).setWeight(8)).apply(new EnchantRandomlyFunction.Builder().withEnchantment(Enchantments.SOUL_SPEED))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.POTION).setWeight(8)).apply(SetNbtFunction.setTag(Util.make(new CompoundTag(), debug0 -> debug0.putString("Potion", "minecraft:fire_resistance"))))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SPLASH_POTION).setWeight(8)).apply(SetNbtFunction.setTag(Util.make(new CompoundTag(), debug0 -> debug0.putString("Potion", "minecraft:fire_resistance"))))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.POTION).setWeight(10)).apply(SetNbtFunction.setTag(Util.make(new CompoundTag(), debug0 -> debug0.putString("Potion", "minecraft:water"))))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.IRON_NUGGET).setWeight(10)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(10.0f, 36.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.ENDER_PEARL).setWeight(10)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0f, 4.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.STRING).setWeight(20)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(3.0f, 9.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.QUARTZ).setWeight(20)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(5.0f, 12.0f)))).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.OBSIDIAN).setWeight(40)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.CRYING_OBSIDIAN).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(1.0f, 3.0f)))).add((LootPoolEntryContainer.Builder<?>)LootItem.lootTableItem(Items.FIRE_CHARGE).setWeight(40)).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.LEATHER).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0f, 4.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SOUL_SAND).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0f, 8.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.NETHER_BRICK).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(2.0f, 8.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.SPECTRAL_ARROW).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(6.0f, 12.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.GRAVEL).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(8.0f, 16.0f)))).add((LootPoolEntryContainer.Builder<?>)((LootPoolSingletonContainer.Builder)LootItem.lootTableItem(Items.BLACKSTONE).setWeight(40)).apply(SetItemCountFunction.setCount(RandomValueBounds.between(8.0f, 16.0f))))));
     }
-
-    @Override
-    public /* synthetic */ void accept(Object object) {
-        this.accept((BiConsumer)object);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/data/models/blockstates/Condition.java b/src/main/java/net/minecraft/data/models/blockstates/Condition.java
index fbc4f8db69707782ca1d02c809191b665717f9ca..b385e79e439abe83a2293925add4855e53232913 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/Condition.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/Condition.java
@@ -78,11 +78,6 @@ extends Supplier<JsonElement> {
                 throw new IllegalStateException("Properties " + debug2 + " are missing from " + debug12);
             }
         }
-
-        @Override
-        public /* synthetic */ Object get() {
-            return this.get();
-        }
     }
 
     public static class CompositeCondition
@@ -108,11 +103,6 @@ extends Supplier<JsonElement> {
             debug2.add(this.operation.id, (JsonElement)debug1);
             return debug2;
         }
-
-        @Override
-        public /* synthetic */ Object get() {
-            return this.get();
-        }
     }
 
     public static enum Operation {
diff --git a/src/main/java/net/minecraft/data/models/blockstates/MultiVariantGenerator.java b/src/main/java/net/minecraft/data/models/blockstates/MultiVariantGenerator.java
index e823eb1e74503d71b4bfd7b50c7c56f4e3c74b4e..f6aa7ccc071331be2eff0aa108b594074dae2f1f 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/MultiVariantGenerator.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/MultiVariantGenerator.java
@@ -58,26 +58,25 @@ implements BlockStateGenerator {
 
     @Override
     public JsonElement get() {
-        PropertyDispatch debug32;
-        Stream<Object> debug13 = Stream.of(Pair.of((Object)Selector.empty(), this.baseVariants));
+        Stream<Pair<Selector, List<Variant>>> debug13 = Stream.of(Pair.of(Selector.empty(), this.baseVariants)); // MagmaCube - decompile fix
         for (PropertyDispatch debug32 : this.declaredPropertySets) {
             Map<Selector, List<Variant>> debug4 = debug32.getEntries();
             debug13 = debug13.flatMap(debug12 -> debug4.entrySet().stream().map(debug1 -> {
                 Selector debug2 = ((Selector)debug12.getFirst()).extend((Selector)debug1.getKey());
                 List<Variant> debug3 = MultiVariantGenerator.mergeVariants((List)debug12.getSecond(), (List)debug1.getValue());
-                return Pair.of((Object)debug2, debug3);
+                return Pair.of(debug2, debug3); // MagmaCube - decompile fix
             }));
         }
-        TreeMap debug2 = new TreeMap();
+        TreeMap<String, JsonElement> debug2 = new TreeMap(); // MagmaCube - decompile fix
         debug13.forEach(debug1 -> debug2.put(((Selector)debug1.getFirst()).getKey(), Variant.convertList((List)debug1.getSecond())));
-        debug32 = new JsonObject();
-        debug32.add("variants", (JsonElement)Util.make(new JsonObject(), debug1 -> debug2.forEach((arg_0, arg_1) -> ((JsonObject)debug1).add(arg_0, arg_1))));
+        JsonObject debug32 = new JsonObject(); // MagmaCube - decompile fix
+        debug32.add("variants", (JsonElement)Util.make(new JsonObject(), debug1 -> debug2.forEach((arg_0, arg_1) -> ((JsonObject)debug1).add(arg_0, arg_1)))); // MagmaCube - decompile fix
         return debug32;
     }
 
     private static List<Variant> mergeVariants(List<Variant> debug0, List<Variant> debug1) {
         ImmutableList.Builder debug2 = ImmutableList.builder();
-        debug0.forEach(debug22 -> debug1.forEach(debug2 -> debug2.add((Object)Variant.merge(debug22, debug2))));
+        debug0.forEach(debug22 -> debug1.forEach(debug2l -> debug2.add((Object)Variant.merge(debug22, debug2l)))); // MagmaCube - decompile fix
         return debug2.build();
     }
 
@@ -87,20 +86,15 @@ implements BlockStateGenerator {
     }
 
     public static MultiVariantGenerator multiVariant(Block debug0) {
-        return new MultiVariantGenerator(debug0, (List<Variant>)ImmutableList.of((Object)Variant.variant()));
+        return new MultiVariantGenerator(debug0, (List<Variant>)ImmutableList.of(Variant.variant())); // MagmaCube - decompile fix
     }
 
     public static MultiVariantGenerator multiVariant(Block debug0, Variant debug1) {
-        return new MultiVariantGenerator(debug0, (List<Variant>)ImmutableList.of((Object)debug1));
+        return new MultiVariantGenerator(debug0, (List<Variant>)ImmutableList.of(debug1)); // MagmaCube - decompile fix
     }
 
     public static MultiVariantGenerator multiVariant(Block debug0, Variant ... debug1) {
-        return new MultiVariantGenerator(debug0, (List<Variant>)ImmutableList.copyOf((Object[])debug1));
-    }
-
-    @Override
-    public /* synthetic */ Object get() {
-        return this.get();
+        return new MultiVariantGenerator(debug0, (List<Variant>)ImmutableList.copyOf(debug1)); // MagmaCube - decompile fix
     }
 }
 
diff --git a/src/main/java/net/minecraft/data/models/blockstates/Selector.java b/src/main/java/net/minecraft/data/models/blockstates/Selector.java
index 150e3c5891260df68ab29bd2c5cd2e2649d6a3ac..a64e8b366922f8365ba40f3709eedc20894dc566 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/Selector.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/Selector.java
@@ -13,16 +13,16 @@ import java.util.stream.Collectors;
 import net.minecraft.world.level.block.state.properties.Property;
 
 public final class Selector {
-    private static final Selector EMPTY = new Selector((List<Property.Value<?>>)ImmutableList.of());
+    private static final Selector EMPTY = new Selector(ImmutableList.of()); // MagmaCube - decompile fix
     private static final Comparator<Property.Value<?>> COMPARE_BY_NAME = Comparator.comparing(debug0 -> debug0.getProperty().getName());
     private final List<Property.Value<?>> values;
 
     public Selector extend(Property.Value<?> debug1) {
-        return new Selector((List<Property.Value<?>>)ImmutableList.builder().addAll(this.values).add(debug1).build());
+        return new Selector((List<Property.Value<?>>)(Object)ImmutableList.builder().addAll(this.values).add(debug1).build()); // MagmaCube - decompile fix
     }
 
     public Selector extend(Selector debug1) {
-        return new Selector((List<Property.Value<?>>)ImmutableList.builder().addAll(this.values).addAll(debug1.values).build());
+        return new Selector((List<Property.Value<?>>)(Object)ImmutableList.builder().addAll(this.values).addAll(debug1.values).build()); // MagmaCube - decompile fix
     }
 
     private Selector(List<Property.Value<?>> debug1) {
@@ -34,7 +34,7 @@ public final class Selector {
     }
 
     public static Selector of(Property.Value<?> ... debug0) {
-        return new Selector((List<Property.Value<?>>)ImmutableList.copyOf((Object[])debug0));
+        return new Selector((List<Property.Value<?>>)ImmutableList.copyOf(debug0)); // MagmaCube - decompile fix
     }
 
     public boolean equals(Object debug1) {
diff --git a/src/main/java/net/minecraft/data/models/blockstates/Variant.java b/src/main/java/net/minecraft/data/models/blockstates/Variant.java
index bf3a7cd455968d33f93f2c076cc79c3ab1a41857..1a02581b11e3bd88b41f197ec85660ad29950560 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/Variant.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/Variant.java
@@ -13,7 +13,7 @@ public class Variant implements Supplier<JsonElement>
     private final Map<VariantProperty<?>, VariantProperty.Value> values;
     
     public Variant() {
-        this.values = (Map<VariantProperty<?>, VariantProperty.Value>)Maps.newLinkedHashMap();
+        this.values = Maps.newLinkedHashMap(); // MagmaCube - decompile fix
     }
     
     public <T> Variant with(final VariantProperty<T> debug1, final T debug2) {
diff --git a/src/main/java/net/minecraft/data/models/model/ModelTemplate.java b/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
index f5b3bb36a28be178fc8f19b9b791e09f8ea72db3..b0c4cfc1794ef8d9b22408f0eaf5a97f5ce2b8c6 100644
--- a/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
+++ b/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
@@ -36,7 +36,7 @@ public class ModelTemplate {
     public ModelTemplate(Optional<ResourceLocation> debug1, Optional<String> debug2, TextureSlot ... debug3) {
         this.model = debug1;
         this.suffix = debug2;
-        this.requiredSlots = ImmutableSet.copyOf((Object[])debug3);
+        this.requiredSlots = ImmutableSet.copyOf(debug3); // MagmaCube - decompile fix
     }
 
     public ResourceLocation create(Block debug1, TextureMapping debug2, BiConsumer<ResourceLocation, Supplier<JsonElement>> debug3) {
@@ -55,11 +55,11 @@ public class ModelTemplate {
         Map<TextureSlot, ResourceLocation> debug4 = this.createMap(debug2);
         debug3.accept(debug1, () -> {
             JsonObject debug22 = new JsonObject();
-            this.model.ifPresent(debug1 -> debug22.addProperty("parent", debug1.toString()));
+            this.model.ifPresent(debug1l -> debug22.addProperty("parent", debug1l.toString())); // MagmaCube - decompile fix
             if (!debug4.isEmpty()) {
-                JsonObject debug3 = new JsonObject();
-                debug4.forEach((debug1, debug2) -> debug3.addProperty(debug1.getId(), debug2.toString()));
-                debug22.add("textures", (JsonElement)debug3);
+                JsonObject debug3l = new JsonObject(); // MagmaCube - decompile fix
+                debug4.forEach((debug1ll, debug2l) -> debug3l.addProperty(debug1ll.getId(), debug2l.toString())); // MagmaCube - decompile fix
+                debug22.add("textures", (JsonElement)debug3l); // MagmaCube - decompile fix
             }
             return debug22;
         });
diff --git a/src/main/java/net/minecraft/data/models/model/TextureMapping.java b/src/main/java/net/minecraft/data/models/model/TextureMapping.java
index 9ca023f49c8fd23c159272105b279818751bb0e4..cc9265ac43d2a115efbcf6d8e503565d6e9d11ee 100644
--- a/src/main/java/net/minecraft/data/models/model/TextureMapping.java
+++ b/src/main/java/net/minecraft/data/models/model/TextureMapping.java
@@ -17,8 +17,8 @@ public class TextureMapping
     private final Set<TextureSlot> forcedSlots;
     
     public TextureMapping() {
-        this.slots = (Map<TextureSlot, ResourceLocation>)Maps.newHashMap();
-        this.forcedSlots = (Set<TextureSlot>)Sets.newHashSet();
+        this.slots = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.forcedSlots = Sets.newHashSet(); // MagmaCube - decompile fix
     }
     
     public TextureMapping put(final TextureSlot debug1, final ResourceLocation debug2) {
diff --git a/src/main/java/net/minecraft/data/recipes/ShapedRecipeBuilder.java b/src/main/java/net/minecraft/data/recipes/ShapedRecipeBuilder.java
index 02164ab21fdfe8eb15fa7d11d3f4bd1c7a109555..7f8a8817e0c46b5cfd8924bd4f20f89fbe0f30fc 100644
--- a/src/main/java/net/minecraft/data/recipes/ShapedRecipeBuilder.java
+++ b/src/main/java/net/minecraft/data/recipes/ShapedRecipeBuilder.java
@@ -38,8 +38,8 @@ public class ShapedRecipeBuilder
     private String group;
     
     public ShapedRecipeBuilder(final ItemLike debug1, final int debug2) {
-        this.rows = (List<String>)Lists.newArrayList();
-        this.key = (Map<Character, Ingredient>)Maps.newLinkedHashMap();
+        this.rows = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.key = Maps.newLinkedHashMap(); // MagmaCube - decompile fix
         this.advancement = Advancement.Builder.advancement();
         this.result = debug1.asItem();
         this.count = debug2;
diff --git a/src/main/java/net/minecraft/data/structures/SnbtToNbt.java b/src/main/java/net/minecraft/data/structures/SnbtToNbt.java
index 72a493cb54bf5b17908ec10912152358421b5db6..129f58e2092b3e88bca17d90b7c0fb89e469b30a 100644
--- a/src/main/java/net/minecraft/data/structures/SnbtToNbt.java
+++ b/src/main/java/net/minecraft/data/structures/SnbtToNbt.java
@@ -41,7 +41,7 @@ public class SnbtToNbt implements DataProvider
     private final List<Filter> filters;
     
     public SnbtToNbt(final DataGenerator debug1) {
-        this.filters = (List<Filter>)Lists.newArrayList();
+        this.filters = Lists.newArrayList(); // MagmaCube - decompile fix
         this.generator = debug1;
     }
     
@@ -61,11 +61,11 @@ public class SnbtToNbt implements DataProvider
     @Override
     public void run(final HashCache debug1) throws IOException {
         final Path debug4 = this.generator.getOutputFolder();
-        final List<CompletableFuture<TaskResult>> debug5 = (List<CompletableFuture<TaskResult>>)Lists.newArrayList();
+        final List<CompletableFuture<TaskResult>> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Path debug6 : this.generator.getInputFolders()) {
             Files.walk(debug6, new FileVisitOption[0]).filter(debug0 -> debug0.toString().endsWith(".snbt")).forEach(debug3 -> debug5.add(CompletableFuture.supplyAsync(() -> this.readStructure(debug3, this.getName(debug6, debug3)), Util.backgroundExecutor())));
         }
-        Util.sequence((List<? extends CompletableFuture<?>>)debug5).join().stream().filter(Objects::nonNull).forEach(debug3 -> this.storeStructureIfChanged(debug1, debug3, debug4));
+        Util.sequence(debug5).join().stream().filter(Objects::nonNull).forEach(debug3 -> this.storeStructureIfChanged(debug1, debug3, debug4)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/data/tags/TagsProvider.java b/src/main/java/net/minecraft/data/tags/TagsProvider.java
index cd279e05c29a4467d4a9e90aa35b3536cb686451..269f1f817b8b2b61db351c3e676b8ad26be2d15f 100644
--- a/src/main/java/net/minecraft/data/tags/TagsProvider.java
+++ b/src/main/java/net/minecraft/data/tags/TagsProvider.java
@@ -63,7 +63,7 @@ implements DataProvider {
         Function<ResourceLocation, Tag> debug3 = debug2 -> this.builders.containsKey(debug2) ? debug22 : null;
         Function<ResourceLocation, Object> debug42 = debug1 -> this.registry.getOptional((ResourceLocation)debug1).orElse(null);
         this.builders.forEach((debug4, debug5) -> {
-            List debug6 = debug5.getUnresolvedEntries(debug3, debug42).collect(Collectors.toList());
+            List debug6 = (List) debug5.getUnresolvedEntries((Function) debug3, (Function) debug42).collect(Collectors.toList()); // MagmaCube - decompile fix
             if (!debug6.isEmpty()) {
                 throw new IllegalArgumentException(String.format("Couldn't define tag %s as it is missing following references: %s", debug4, debug6.stream().map(Objects::toString).collect(Collectors.joining(","))));
             }
diff --git a/src/main/java/net/minecraft/data/worldgen/BastionBridgePools.java b/src/main/java/net/minecraft/data/worldgen/BastionBridgePools.java
index 411696306c5dfac346e06f455a726b3d03c1bb4e..0e8030cb3afb6798b9c9fb6dfea29be722092213 100644
--- a/src/main/java/net/minecraft/data/worldgen/BastionBridgePools.java
+++ b/src/main/java/net/minecraft/data/worldgen/BastionBridgePools.java
@@ -14,12 +14,12 @@ public class BastionBridgePools
     }
     
     static {
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/bridge/starting_pieces"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/bridge/starting_pieces/entrance", ProcessorLists.ENTRANCE_REPLACEMENT), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/bridge/starting_pieces/entrance_face", ProcessorLists.BASTION_GENERIC_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/bridge/bridge_pieces"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/bridge/bridge_pieces/bridge", ProcessorLists.BRIDGE), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/bridge/legs"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/bridge/legs/leg_0", ProcessorLists.BASTION_GENERIC_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/bridge/legs/leg_1", ProcessorLists.BASTION_GENERIC_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/bridge/walls"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/bridge/walls/wall_base_0", ProcessorLists.RAMPART_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/bridge/walls/wall_base_1", ProcessorLists.RAMPART_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/bridge/ramparts"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/bridge/ramparts/rampart_0", ProcessorLists.RAMPART_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/bridge/ramparts/rampart_1", ProcessorLists.RAMPART_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/bridge/rampart_plates"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/bridge/rampart_plates/plate_0", ProcessorLists.RAMPART_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/bridge/connectors"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/bridge/connectors/back_bridge_top", ProcessorLists.BASTION_GENERIC_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/bridge/connectors/back_bridge_bottom", ProcessorLists.BASTION_GENERIC_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/bridge/starting_pieces"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/bridge/starting_pieces/entrance", ProcessorLists.ENTRANCE_REPLACEMENT), 1), Pair.of(StructurePoolElement.single("bastion/bridge/starting_pieces/entrance_face", ProcessorLists.BASTION_GENERIC_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID)); // MagmaCube - decompile fix
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/bridge/bridge_pieces"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/bridge/bridge_pieces/bridge", ProcessorLists.BRIDGE), 1)), StructureTemplatePool.Projection.RIGID)); // MagmaCube - decompile fix
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/bridge/legs"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/bridge/legs/leg_0", ProcessorLists.BASTION_GENERIC_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/bridge/legs/leg_1", ProcessorLists.BASTION_GENERIC_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID)); // MagmaCube - decompile fix
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/bridge/walls"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/bridge/walls/wall_base_0", ProcessorLists.RAMPART_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/bridge/walls/wall_base_1", ProcessorLists.RAMPART_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID)); // MagmaCube - decompile fix
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/bridge/ramparts"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/bridge/ramparts/rampart_0", ProcessorLists.RAMPART_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/bridge/ramparts/rampart_1", ProcessorLists.RAMPART_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID)); // MagmaCube - decompile fix
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/bridge/rampart_plates"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/bridge/rampart_plates/plate_0", ProcessorLists.RAMPART_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID)); // MagmaCube - decompile fix
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/bridge/connectors"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/bridge/connectors/back_bridge_top", ProcessorLists.BASTION_GENERIC_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/bridge/connectors/back_bridge_bottom", ProcessorLists.BASTION_GENERIC_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/data/worldgen/BastionHoglinStablePools.java b/src/main/java/net/minecraft/data/worldgen/BastionHoglinStablePools.java
index d0a5b768a02170adb0ab072cae8a2f5523ba1b02..f6304f467c32c0f0791efc5048ee8d8e40189650 100644
--- a/src/main/java/net/minecraft/data/worldgen/BastionHoglinStablePools.java
+++ b/src/main/java/net/minecraft/data/worldgen/BastionHoglinStablePools.java
@@ -14,18 +14,20 @@ public class BastionHoglinStablePools
     }
     
     static {
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/starting_pieces"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_0", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_1", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_2", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_3", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_4", ProcessorLists.STABLE_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/mirrored_starting_pieces"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_0_mirrored", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_1_mirrored", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_2_mirrored", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_3_mirrored", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_4_mirrored", ProcessorLists.STABLE_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/wall_bases"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/walls/wall_base", ProcessorLists.STABLE_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/walls"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/walls/side_wall_0", ProcessorLists.SIDE_WALL_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/walls/side_wall_1", ProcessorLists.SIDE_WALL_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/stairs"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_0", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_1", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_2", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_3", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_4", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_0", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_1", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_2", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_3", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_4", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_0", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_1", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object[])new Pair[] { Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_2", ProcessorLists.STABLE_DEGRADATION), (Object)1), Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_3", ProcessorLists.STABLE_DEGRADATION), (Object)1), Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_4", ProcessorLists.STABLE_DEGRADATION), (Object)1) }), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/small_stables/inner"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_0", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_1", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_2", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_3", ProcessorLists.STABLE_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/small_stables/outer"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_0", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_1", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_2", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_3", ProcessorLists.STABLE_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/large_stables/inner"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_0", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_1", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_2", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_3", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_4", ProcessorLists.STABLE_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/large_stables/outer"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_0", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_1", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_2", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_3", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_4", ProcessorLists.STABLE_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/posts"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/posts/stair_post", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/posts/end_post", ProcessorLists.STABLE_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/ramparts"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/ramparts/ramparts_1", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/ramparts/ramparts_2", ProcessorLists.STABLE_DEGRADATION), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/ramparts/ramparts_3", ProcessorLists.STABLE_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/rampart_plates"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/rampart_plates/rampart_plate_1", ProcessorLists.STABLE_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/connectors"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/hoglin_stable/connectors/end_post_connector", ProcessorLists.STABLE_DEGRADATION), (Object)1)), StructureTemplatePool.Projection.RIGID));
+        // MagmaCube start - decompile fix
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/starting_pieces"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/starting_stairs_4", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/mirrored_starting_pieces"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_0_mirrored", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_1_mirrored", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_2_mirrored", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_3_mirrored", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/starting_pieces/stairs_4_mirrored", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/wall_bases"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/walls/wall_base", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/walls"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/walls/side_wall_0", ProcessorLists.SIDE_WALL_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/walls/side_wall_1", ProcessorLists.SIDE_WALL_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/stairs"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_1_4", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_2_4", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_1", ProcessorLists.STABLE_DEGRADATION), 1), new Pair[] { Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/stairs/stairs_3_4", ProcessorLists.STABLE_DEGRADATION), 1) }), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/small_stables/inner"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/inner_3", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/small_stables/outer"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/small_stables/outer_3", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/large_stables/inner"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/inner_4", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/large_stables/outer"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_0", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_3", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/large_stables/outer_4", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/posts"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/posts/stair_post", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/posts/end_post", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/ramparts"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/ramparts/ramparts_1", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/ramparts/ramparts_2", ProcessorLists.STABLE_DEGRADATION), 1), Pair.of(StructurePoolElement.single("bastion/hoglin_stable/ramparts/ramparts_3", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/rampart_plates"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/rampart_plates/rampart_plate_1", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/hoglin_stable/connectors"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/hoglin_stable/connectors/end_post_connector", ProcessorLists.STABLE_DEGRADATION), 1)), StructureTemplatePool.Projection.RIGID));
+        // MagmaCube end - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/data/worldgen/BastionHousingUnitsPools.java b/src/main/java/net/minecraft/data/worldgen/BastionHousingUnitsPools.java
index 9ed3d7dc3502dd6654f8b4fa354a0c613c43467e..cf9b742d644511a01d87a682ef9b2a0ff6dcfb1d 100644
--- a/src/main/java/net/minecraft/data/worldgen/BastionHousingUnitsPools.java
+++ b/src/main/java/net/minecraft/data/worldgen/BastionHousingUnitsPools.java
@@ -14,20 +14,22 @@ public class BastionHousingUnitsPools
     }
     
     static {
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/center_pieces"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/units/center_pieces/center_0", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/center_pieces/center_1", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/center_pieces/center_2", ProcessorLists.HOUSING), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/pathways"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/units/pathways/pathway_0", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/pathways/pathway_wall_0", ProcessorLists.HOUSING), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/walls/wall_bases"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/units/walls/wall_base", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/walls/connected_wall", ProcessorLists.HOUSING), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_0"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/units/stages/stage_0_0", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/stages/stage_0_1", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/stages/stage_0_2", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/stages/stage_0_3", ProcessorLists.HOUSING), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_1"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/units/stages/stage_1_0", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/stages/stage_1_1", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/stages/stage_1_2", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/stages/stage_1_3", ProcessorLists.HOUSING), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/rot/stage_1"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/units/stages/rot/stage_1_0", ProcessorLists.HOUSING), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_2"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/units/stages/stage_2_0", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/stages/stage_2_1", ProcessorLists.HOUSING), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_3"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/units/stages/stage_3_0", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/stages/stage_3_1", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/stages/stage_3_2", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/stages/stage_3_3", ProcessorLists.HOUSING), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/fillers/stage_0"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/units/fillers/stage_0", ProcessorLists.HOUSING), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/edges"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/units/edges/edge_0", ProcessorLists.HOUSING), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/wall_units"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/units/wall_units/unit_0", ProcessorLists.HOUSING), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/edge_wall_units"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/units/wall_units/edge_0_large", ProcessorLists.HOUSING), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/ramparts"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/units/ramparts/ramparts_0", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/ramparts/ramparts_1", ProcessorLists.HOUSING), (Object)1), (Object)Pair.of((Object)StructurePoolElement.single("bastion/units/ramparts/ramparts_2", ProcessorLists.HOUSING), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/large_ramparts"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/units/ramparts/ramparts_0", ProcessorLists.HOUSING), (Object)1)), StructureTemplatePool.Projection.RIGID));
-        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/rampart_plates"), new ResourceLocation("empty"), (List<Pair<Function<StructureTemplatePool.Projection, ? extends StructurePoolElement>, Integer>>)ImmutableList.of((Object)Pair.of((Object)StructurePoolElement.single("bastion/units/rampart_plates/plate_0", ProcessorLists.HOUSING), (Object)1)), StructureTemplatePool.Projection.RIGID));
+        // MagmaCube start - decompile fix
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/center_pieces"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/center_pieces/center_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/center_pieces/center_1", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/center_pieces/center_2", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/pathways"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/pathways/pathway_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/pathways/pathway_wall_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/walls/wall_bases"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/walls/wall_base", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/walls/connected_wall", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_0"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/stages/stage_0_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_0_1", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_0_2", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_0_3", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_1"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/stages/stage_1_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_1_1", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_1_2", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_1_3", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/rot/stage_1"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/stages/rot/stage_1_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_2"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/stages/stage_2_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_2_1", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/stages/stage_3"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/stages/stage_3_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_3_1", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_3_2", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/stages/stage_3_3", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/fillers/stage_0"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/fillers/stage_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/edges"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/edges/edge_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/wall_units"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/wall_units/unit_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/edge_wall_units"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/wall_units/edge_0_large", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/ramparts"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/ramparts/ramparts_0", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/ramparts/ramparts_1", ProcessorLists.HOUSING), 1), Pair.of(StructurePoolElement.single("bastion/units/ramparts/ramparts_2", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/large_ramparts"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/ramparts/ramparts_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        Pools.register(new StructureTemplatePool(new ResourceLocation("bastion/units/rampart_plates"), new ResourceLocation("empty"), ImmutableList.of(Pair.of(StructurePoolElement.single("bastion/units/rampart_plates/plate_0", ProcessorLists.HOUSING), 1)), StructureTemplatePool.Projection.RIGID));
+        // MagmaCube end - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/data/worldgen/Features.java b/src/main/java/net/minecraft/data/worldgen/Features.java
index 2fdfa16179230aa8057e8ce4b98ae242b223e841..32b7ac3d5b551b0bc9ba7e6e9d1fccda57db94d2 100644
--- a/src/main/java/net/minecraft/data/worldgen/Features.java
+++ b/src/main/java/net/minecraft/data/worldgen/Features.java
@@ -297,22 +297,23 @@ public class Features
     }
     
     static {
-        END_SPIKE = register("end_spike", (ConfiguredFeature<?, ?>)Feature.END_SPIKE.configured(new SpikeConfiguration(false, (List<SpikeFeature.EndSpike>)ImmutableList.of(), (BlockPos)null)));
+        // MagmaCube start - decompile fix
+        END_SPIKE = register("end_spike", (ConfiguredFeature<?, ?>)Feature.END_SPIKE.configured(new SpikeConfiguration(false, ImmutableList.of(), (BlockPos)null)));
         END_GATEWAY = register("end_gateway", Feature.END_GATEWAY.configured(EndGatewayConfiguration.knownExit(ServerLevel.END_SPAWN_POINT, true)).decorated((ConfiguredDecorator<?>)FeatureDecorator.END_GATEWAY.configured(DecoratorConfiguration.NONE)));
         END_GATEWAY_DELAYED = register("end_gateway_delayed", (ConfiguredFeature<?, ?>)Feature.END_GATEWAY.configured(EndGatewayConfiguration.delayedExitSearch()));
         CHORUS_PLANT = register("chorus_plant", Feature.CHORUS_PLANT.configured(FeatureConfiguration.NONE).decorated(Decorators.HEIGHTMAP_SQUARE).countRandom(4));
         END_ISLAND = register("end_island", (ConfiguredFeature<?, ?>)Feature.END_ISLAND.configured(FeatureConfiguration.NONE));
         END_ISLAND_DECORATED = register("end_island_decorated", Features.END_ISLAND.decorated((ConfiguredDecorator<?>)FeatureDecorator.END_ISLAND.configured(DecoratorConfiguration.NONE)));
-        DELTA = register("delta", Feature.DELTA_FEATURE.configured(new DeltaFeatureConfiguration(States.LAVA, States.MAGMA_BLOCK, UniformInt.of(3, 4), UniformInt.of(0, 2))).decorated(FeatureDecorator.COUNT_MULTILAYER.configured((Object)new CountConfiguration(40))));
-        SMALL_BASALT_COLUMNS = register("small_basalt_columns", Feature.BASALT_COLUMNS.configured(new ColumnFeatureConfiguration(UniformInt.fixed(1), UniformInt.of(1, 3))).decorated(FeatureDecorator.COUNT_MULTILAYER.configured((Object)new CountConfiguration(4))));
-        LARGE_BASALT_COLUMNS = register("large_basalt_columns", Feature.BASALT_COLUMNS.configured(new ColumnFeatureConfiguration(UniformInt.of(2, 1), UniformInt.of(5, 5))).decorated(FeatureDecorator.COUNT_MULTILAYER.configured((Object)new CountConfiguration(2))));
+        DELTA = register("delta", Feature.DELTA_FEATURE.configured(new DeltaFeatureConfiguration(States.LAVA, States.MAGMA_BLOCK, UniformInt.of(3, 4), UniformInt.of(0, 2))).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(40))));
+        SMALL_BASALT_COLUMNS = register("small_basalt_columns", Feature.BASALT_COLUMNS.configured(new ColumnFeatureConfiguration(UniformInt.fixed(1), UniformInt.of(1, 3))).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(4))));
+        LARGE_BASALT_COLUMNS = register("large_basalt_columns", Feature.BASALT_COLUMNS.configured(new ColumnFeatureConfiguration(UniformInt.of(2, 1), UniformInt.of(5, 5))).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(2))));
         BASALT_BLOBS = register("basalt_blobs", Feature.REPLACE_BLOBS.configured(new ReplaceSphereConfiguration(States.NETHERRACK, States.BASALT, UniformInt.of(3, 4))).range(128).squared().count(75));
         BLACKSTONE_BLOBS = register("blackstone_blobs", Feature.REPLACE_BLOBS.configured(new ReplaceSphereConfiguration(States.NETHERRACK, States.BLACKSTONE, UniformInt.of(3, 4))).range(128).squared().count(25));
-        GLOWSTONE_EXTRA = register("glowstone_extra", Feature.GLOWSTONE_BLOB.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.GLOWSTONE.configured((Object)new CountConfiguration(10))));
+        GLOWSTONE_EXTRA = register("glowstone_extra", Feature.GLOWSTONE_BLOB.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.GLOWSTONE.configured(new CountConfiguration(10))));
         GLOWSTONE = register("glowstone", Feature.GLOWSTONE_BLOB.configured(FeatureConfiguration.NONE).range(128).squared().count(10));
-        CRIMSON_FOREST_VEGETATION = register("crimson_forest_vegetation", Feature.NETHER_FOREST_VEGETATION.configured(Configs.CRIMSON_FOREST_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured((Object)new CountConfiguration(6))));
-        WARPED_FOREST_VEGETATION = register("warped_forest_vegetation", Feature.NETHER_FOREST_VEGETATION.configured(Configs.WARPED_FOREST_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured((Object)new CountConfiguration(5))));
-        NETHER_SPROUTS = register("nether_sprouts", Feature.NETHER_FOREST_VEGETATION.configured(Configs.NETHER_SPROUTS_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured((Object)new CountConfiguration(4))));
+        CRIMSON_FOREST_VEGETATION = register("crimson_forest_vegetation", Feature.NETHER_FOREST_VEGETATION.configured(Configs.CRIMSON_FOREST_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(6))));
+        WARPED_FOREST_VEGETATION = register("warped_forest_vegetation", Feature.NETHER_FOREST_VEGETATION.configured(Configs.WARPED_FOREST_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(5))));
+        NETHER_SPROUTS = register("nether_sprouts", Feature.NETHER_FOREST_VEGETATION.configured(Configs.NETHER_SPROUTS_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(4))));
         TWISTING_VINES = register("twisting_vines", Feature.TWISTING_VINES.configured(FeatureConfiguration.NONE).range(128).squared().count(10));
         WEEPING_VINES = register("weeping_vines", Feature.WEEPING_VINES.configured(FeatureConfiguration.NONE).range(128).squared().count(10));
         BASALT_PILLAR = register("basalt_pillar", Feature.BASALT_PILLAR.configured(FeatureConfiguration.NONE).range(128).squared().count(10));
@@ -326,50 +327,50 @@ public class Features
         SEAGRASS_DEEP_WARM = register("seagrass_deep_warm", Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.8f)).count(80).decorated((ConfiguredDecorator)Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
         SEA_PICKLE = register("sea_pickle", Feature.SEA_PICKLE.configured(new CountConfiguration(20)).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE).chance(16));
         ICE_SPIKE = register("ice_spike", Feature.ICE_SPIKE.configured(FeatureConfiguration.NONE).decorated(Decorators.HEIGHTMAP_SQUARE).count(3));
-        ICE_PATCH = register("ice_patch", Feature.ICE_PATCH.configured(new DiskConfiguration(States.PACKED_ICE, UniformInt.of(2, 1), 1, (List<BlockState>)ImmutableList.of((Object)States.DIRT, (Object)States.GRASS_BLOCK, (Object)States.PODZOL, (Object)States.COARSE_DIRT, (Object)States.MYCELIUM, (Object)States.SNOW_BLOCK, (Object)States.ICE))).decorated(Decorators.HEIGHTMAP_SQUARE).count(2));
+        ICE_PATCH = register("ice_patch", Feature.ICE_PATCH.configured(new DiskConfiguration(States.PACKED_ICE, UniformInt.of(2, 1), 1, (List<BlockState>)ImmutableList.of(States.DIRT, States.GRASS_BLOCK, States.PODZOL, States.COARSE_DIRT, States.MYCELIUM, States.SNOW_BLOCK, States.ICE))).decorated(Decorators.HEIGHTMAP_SQUARE).count(2));
         FOREST_ROCK = register("forest_rock", Feature.FOREST_ROCK.configured(new BlockStateConfiguration(States.MOSSY_COBBLESTONE)).decorated(Decorators.HEIGHTMAP_SQUARE).countRandom(2));
-        SEAGRASS_SIMPLE = register("seagrass_simple", Feature.SIMPLE_BLOCK.configured(new SimpleBlockConfiguration(States.SEAGRASS, (List<BlockState>)ImmutableList.of((Object)States.STONE), (List<BlockState>)ImmutableList.of((Object)States.WATER), (List<BlockState>)ImmutableList.of((Object)States.WATER))).decorated(FeatureDecorator.CARVING_MASK.configured((Object)new CarvingMaskDecoratorConfiguration(GenerationStep.Carving.LIQUID, 0.1f))));
+        SEAGRASS_SIMPLE = register("seagrass_simple", Feature.SIMPLE_BLOCK.configured(new SimpleBlockConfiguration(States.SEAGRASS, (List<BlockState>)ImmutableList.of(States.STONE), (List<BlockState>)ImmutableList.of(States.WATER), (List<BlockState>)ImmutableList.of(States.WATER))).decorated(FeatureDecorator.CARVING_MASK.configured(new CarvingMaskDecoratorConfiguration(GenerationStep.Carving.LIQUID, 0.1f))));
         ICEBERG_PACKED = register("iceberg_packed", Feature.ICEBERG.configured(new BlockStateConfiguration(States.PACKED_ICE)).decorated((ConfiguredDecorator<?>)FeatureDecorator.ICEBERG.configured(NoneDecoratorConfiguration.INSTANCE)).chance(16));
         ICEBERG_BLUE = register("iceberg_blue", Feature.ICEBERG.configured(new BlockStateConfiguration(States.BLUE_ICE)).decorated((ConfiguredDecorator<?>)FeatureDecorator.ICEBERG.configured(NoneDecoratorConfiguration.INSTANCE)).chance(200));
-        KELP_COLD = register("kelp_cold", Feature.KELP.configured(FeatureConfiguration.NONE).decorated((ConfiguredDecorator<?>)Decorators.TOP_SOLID_HEIGHTMAP).squared().decorated((ConfiguredDecorator)FeatureDecorator.COUNT_NOISE_BIASED.configured((Object)new NoiseCountFactorDecoratorConfiguration(120, 80.0, 0.0))));
-        KELP_WARM = register("kelp_warm", Feature.KELP.configured(FeatureConfiguration.NONE).decorated((ConfiguredDecorator<?>)Decorators.TOP_SOLID_HEIGHTMAP).squared().decorated((ConfiguredDecorator)FeatureDecorator.COUNT_NOISE_BIASED.configured((Object)new NoiseCountFactorDecoratorConfiguration(80, 80.0, 0.0))));
-        BLUE_ICE = register("blue_ice", Feature.BLUE_ICE.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.RANGE.configured((Object)new RangeDecoratorConfiguration(30, 32, 64))).squared().countRandom(19));
+        KELP_COLD = register("kelp_cold", Feature.KELP.configured(FeatureConfiguration.NONE).decorated((ConfiguredDecorator<?>)Decorators.TOP_SOLID_HEIGHTMAP).squared().decorated((ConfiguredDecorator)FeatureDecorator.COUNT_NOISE_BIASED.configured(new NoiseCountFactorDecoratorConfiguration(120, 80.0, 0.0))));
+        KELP_WARM = register("kelp_warm", Feature.KELP.configured(FeatureConfiguration.NONE).decorated((ConfiguredDecorator<?>)Decorators.TOP_SOLID_HEIGHTMAP).squared().decorated((ConfiguredDecorator)FeatureDecorator.COUNT_NOISE_BIASED.configured(new NoiseCountFactorDecoratorConfiguration(80, 80.0, 0.0))));
+        BLUE_ICE = register("blue_ice", Feature.BLUE_ICE.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(30, 32, 64))).squared().countRandom(19));
         BAMBOO_LIGHT = register("bamboo_light", Feature.BAMBOO.configured(new ProbabilityFeatureConfiguration(0.0f)).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(16));
-        BAMBOO = register("bamboo", Feature.BAMBOO.configured(new ProbabilityFeatureConfiguration(0.2f)).decorated((ConfiguredDecorator<?>)Decorators.HEIGHTMAP_WORLD_SURFACE).squared().decorated((ConfiguredDecorator)FeatureDecorator.COUNT_NOISE_BIASED.configured((Object)new NoiseCountFactorDecoratorConfiguration(160, 80.0, 0.3))));
+        BAMBOO = register("bamboo", Feature.BAMBOO.configured(new ProbabilityFeatureConfiguration(0.2f)).decorated((ConfiguredDecorator<?>)Decorators.HEIGHTMAP_WORLD_SURFACE).squared().decorated((ConfiguredDecorator)FeatureDecorator.COUNT_NOISE_BIASED.configured(new NoiseCountFactorDecoratorConfiguration(160, 80.0, 0.3))));
         VINES = register("vines", Feature.VINES.configured(FeatureConfiguration.NONE).squared().count(50));
-        LAKE_WATER = register("lake_water", Feature.LAKE.configured(new BlockStateConfiguration(States.WATER)).decorated(FeatureDecorator.WATER_LAKE.configured((Object)new ChanceDecoratorConfiguration(4))));
-        LAKE_LAVA = register("lake_lava", Feature.LAKE.configured(new BlockStateConfiguration(States.LAVA)).decorated(FeatureDecorator.LAVA_LAKE.configured((Object)new ChanceDecoratorConfiguration(80))));
-        DISK_CLAY = register("disk_clay", Feature.DISK.configured(new DiskConfiguration(States.CLAY, UniformInt.of(2, 1), 1, (List<BlockState>)ImmutableList.of((Object)States.DIRT, (Object)States.CLAY))).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
-        DISK_GRAVEL = register("disk_gravel", Feature.DISK.configured(new DiskConfiguration(States.GRAVEL, UniformInt.of(2, 3), 2, (List<BlockState>)ImmutableList.of((Object)States.DIRT, (Object)States.GRASS_BLOCK))).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
-        DISK_SAND = register("disk_sand", Feature.DISK.configured(new DiskConfiguration(States.SAND, UniformInt.of(2, 4), 2, (List<BlockState>)ImmutableList.of((Object)States.DIRT, (Object)States.GRASS_BLOCK))).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE).count(3));
+        LAKE_WATER = register("lake_water", Feature.LAKE.configured(new BlockStateConfiguration(States.WATER)).decorated(FeatureDecorator.WATER_LAKE.configured(new ChanceDecoratorConfiguration(4))));
+        LAKE_LAVA = register("lake_lava", Feature.LAKE.configured(new BlockStateConfiguration(States.LAVA)).decorated(FeatureDecorator.LAVA_LAKE.configured(new ChanceDecoratorConfiguration(80))));
+        DISK_CLAY = register("disk_clay", Feature.DISK.configured(new DiskConfiguration(States.CLAY, UniformInt.of(2, 1), 1, (List<BlockState>)ImmutableList.of(States.DIRT, States.CLAY))).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
+        DISK_GRAVEL = register("disk_gravel", Feature.DISK.configured(new DiskConfiguration(States.GRAVEL, UniformInt.of(2, 3), 2, (List<BlockState>)ImmutableList.of(States.DIRT, States.GRASS_BLOCK))).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
+        DISK_SAND = register("disk_sand", Feature.DISK.configured(new DiskConfiguration(States.SAND, UniformInt.of(2, 4), 2, (List<BlockState>)ImmutableList.of(States.DIRT, States.GRASS_BLOCK))).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE).count(3));
         FREEZE_TOP_LAYER = register("freeze_top_layer", (ConfiguredFeature<?, ?>)Feature.FREEZE_TOP_LAYER.configured(FeatureConfiguration.NONE));
         BONUS_CHEST = register("bonus_chest", (ConfiguredFeature<?, ?>)Feature.BONUS_CHEST.configured(FeatureConfiguration.NONE));
         VOID_START_PLATFORM = register("void_start_platform", (ConfiguredFeature<?, ?>)Feature.VOID_START_PLATFORM.configured(FeatureConfiguration.NONE));
         MONSTER_ROOM = register("monster_room", Feature.MONSTER_ROOM.configured(FeatureConfiguration.NONE).range(256).squared().count(8));
         WELL = register("desert_well", Feature.DESERT_WELL.configured(FeatureConfiguration.NONE).decorated(Decorators.HEIGHTMAP_SQUARE).chance(1000));
         FOSSIL = register("fossil", Feature.FOSSIL.configured(FeatureConfiguration.NONE).chance(64));
-        SPRING_LAVA_DOUBLE = register("spring_lava_double", Feature.SPRING.configured(Configs.LAVA_SPRING_CONFIG).decorated(FeatureDecorator.RANGE_VERY_BIASED.configured((Object)new RangeDecoratorConfiguration(8, 16, 256))).squared().count(40));
-        SPRING_LAVA = register("spring_lava", Feature.SPRING.configured(Configs.LAVA_SPRING_CONFIG).decorated(FeatureDecorator.RANGE_VERY_BIASED.configured((Object)new RangeDecoratorConfiguration(8, 16, 256))).squared().count(20));
-        SPRING_DELTA = register("spring_delta", Feature.SPRING.configured(new SpringConfiguration(States.LAVA_STATE, true, 4, 1, (Set<Block>)ImmutableSet.of((Object)Blocks.NETHERRACK, (Object)Blocks.SOUL_SAND, (Object)Blocks.GRAVEL, (Object)Blocks.MAGMA_BLOCK, (Object)Blocks.BLACKSTONE))).decorated((ConfiguredDecorator<?>)Decorators.RANGE_4_8_ROOFED).squared().count(16));
+        SPRING_LAVA_DOUBLE = register("spring_lava_double", Feature.SPRING.configured(Configs.LAVA_SPRING_CONFIG).decorated(FeatureDecorator.RANGE_VERY_BIASED.configured(new RangeDecoratorConfiguration(8, 16, 256))).squared().count(40));
+        SPRING_LAVA = register("spring_lava", Feature.SPRING.configured(Configs.LAVA_SPRING_CONFIG).decorated(FeatureDecorator.RANGE_VERY_BIASED.configured(new RangeDecoratorConfiguration(8, 16, 256))).squared().count(20));
+        SPRING_DELTA = register("spring_delta", Feature.SPRING.configured(new SpringConfiguration(States.LAVA_STATE, true, 4, 1, (Set<Block>)ImmutableSet.of(Blocks.NETHERRACK, Blocks.SOUL_SAND, Blocks.GRAVEL, Blocks.MAGMA_BLOCK, Blocks.BLACKSTONE))).decorated((ConfiguredDecorator<?>)Decorators.RANGE_4_8_ROOFED).squared().count(16));
         SPRING_CLOSED = register("spring_closed", Feature.SPRING.configured(Configs.CLOSED_NETHER_SPRING_CONFIG).decorated((ConfiguredDecorator<?>)Decorators.RANGE_10_20_ROOFED).squared().count(16));
         SPRING_CLOSED_DOUBLE = register("spring_closed_double", Feature.SPRING.configured(Configs.CLOSED_NETHER_SPRING_CONFIG).decorated((ConfiguredDecorator<?>)Decorators.RANGE_10_20_ROOFED).squared().count(32));
-        SPRING_OPEN = register("spring_open", Feature.SPRING.configured(new SpringConfiguration(States.LAVA_STATE, false, 4, 1, (Set<Block>)ImmutableSet.of((Object)Blocks.NETHERRACK))).decorated((ConfiguredDecorator<?>)Decorators.RANGE_4_8_ROOFED).squared().count(8));
-        SPRING_WATER = register("spring_water", Feature.SPRING.configured(new SpringConfiguration(States.WATER_STATE, true, 4, 1, (Set<Block>)ImmutableSet.of((Object)Blocks.STONE, (Object)Blocks.GRANITE, (Object)Blocks.DIORITE, (Object)Blocks.ANDESITE))).decorated(FeatureDecorator.RANGE_BIASED.configured((Object)new RangeDecoratorConfiguration(8, 8, 256))).squared().count(50));
+        SPRING_OPEN = register("spring_open", Feature.SPRING.configured(new SpringConfiguration(States.LAVA_STATE, false, 4, 1, (Set<Block>)ImmutableSet.of(Blocks.NETHERRACK))).decorated((ConfiguredDecorator<?>)Decorators.RANGE_4_8_ROOFED).squared().count(8));
+        SPRING_WATER = register("spring_water", Feature.SPRING.configured(new SpringConfiguration(States.WATER_STATE, true, 4, 1, (Set<Block>)ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE))).decorated(FeatureDecorator.RANGE_BIASED.configured(new RangeDecoratorConfiguration(8, 8, 256))).squared().count(50));
         PILE_HAY = register("pile_hay", (ConfiguredFeature<?, ?>)Feature.BLOCK_PILE.configured(new BlockPileConfiguration(new RotatedBlockProvider(Blocks.HAY_BLOCK))));
         PILE_MELON = register("pile_melon", (ConfiguredFeature<?, ?>)Feature.BLOCK_PILE.configured(new BlockPileConfiguration(new SimpleStateProvider(States.MELON))));
         PILE_SNOW = register("pile_snow", (ConfiguredFeature<?, ?>)Feature.BLOCK_PILE.configured(new BlockPileConfiguration(new SimpleStateProvider(States.SNOW))));
         PILE_ICE = register("pile_ice", (ConfiguredFeature<?, ?>)Feature.BLOCK_PILE.configured(new BlockPileConfiguration(new WeightedStateProvider().add(States.BLUE_ICE, 1).add(States.PACKED_ICE, 5))));
         PILE_PUMPKIN = register("pile_pumpkin", (ConfiguredFeature<?, ?>)Feature.BLOCK_PILE.configured(new BlockPileConfiguration(new WeightedStateProvider().add(States.PUMPKIN, 19).add(States.JACK_O_LANTERN, 1))));
-        PATCH_FIRE = register("patch_fire", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.FIRE), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of((Object)States.NETHERRACK.getBlock())).noProjection().build()).decorated((ConfiguredDecorator<?>)Decorators.FIRE));
-        PATCH_SOUL_FIRE = register("patch_soul_fire", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.SOUL_FIRE), new SimpleBlockPlacer()).tries(64).whitelist((Set<Block>)ImmutableSet.of((Object)States.SOUL_SOIL.getBlock())).noProjection().build()).decorated((ConfiguredDecorator<?>)Decorators.FIRE));
+        PATCH_FIRE = register("patch_fire", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.FIRE), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of(States.NETHERRACK.getBlock())).noProjection().build()).decorated((ConfiguredDecorator<?>)Decorators.FIRE));
+        PATCH_SOUL_FIRE = register("patch_soul_fire", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.SOUL_FIRE), new SimpleBlockPlacer()).tries(64).whitelist((Set<Block>)ImmutableSet.of(States.SOUL_SOIL.getBlock())).noProjection().build()).decorated((ConfiguredDecorator<?>)Decorators.FIRE));
         PATCH_BROWN_MUSHROOM = register("patch_brown_mushroom", (ConfiguredFeature<?, ?>)Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.BROWN_MUSHROOM), SimpleBlockPlacer.INSTANCE).tries(64).noProjection().build()));
         PATCH_RED_MUSHROOM = register("patch_red_mushroom", (ConfiguredFeature<?, ?>)Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.RED_MUSHROOM), SimpleBlockPlacer.INSTANCE).tries(64).noProjection().build()));
         PATCH_CRIMSON_ROOTS = register("patch_crimson_roots", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.CRIMSON_ROOTS), new SimpleBlockPlacer()).tries(64).noProjection().build()).range(128));
         PATCH_SUNFLOWER = register("patch_sunflower", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.SUNFLOWER), new DoublePlantPlacer()).tries(64).noProjection().build()).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE).count(10));
-        PATCH_PUMPKIN = register("patch_pumpkin", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.PUMPKIN), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of((Object)States.GRASS_BLOCK.getBlock())).noProjection().build()).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).chance(32));
+        PATCH_PUMPKIN = register("patch_pumpkin", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.PUMPKIN), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of(States.GRASS_BLOCK.getBlock())).noProjection().build()).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).chance(32));
         PATCH_TAIGA_GRASS = register("patch_taiga_grass", (ConfiguredFeature<?, ?>)Feature.RANDOM_PATCH.configured(Configs.TAIGA_GRASS_CONFIG));
         PATCH_BERRY_BUSH = register("patch_berry_bush", (ConfiguredFeature<?, ?>)Feature.RANDOM_PATCH.configured(Configs.SWEET_BERRY_BUSH_CONFIG));
-        PATCH_GRASS_PLAIN = register("patch_grass_plain", Feature.RANDOM_PATCH.configured(Configs.DEFAULT_GRASS_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).decorated(FeatureDecorator.COUNT_NOISE.configured((Object)new NoiseDependantDecoratorConfiguration(-0.8, 5, 10))));
+        PATCH_GRASS_PLAIN = register("patch_grass_plain", Feature.RANDOM_PATCH.configured(Configs.DEFAULT_GRASS_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).decorated(FeatureDecorator.COUNT_NOISE.configured(new NoiseDependantDecoratorConfiguration(-0.8, 5, 10))));
         PATCH_GRASS_FOREST = register("patch_grass_forest", Feature.RANDOM_PATCH.configured(Configs.DEFAULT_GRASS_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(2));
         PATCH_GRASS_BADLANDS = register("patch_grass_badlands", Feature.RANDOM_PATCH.configured(Configs.DEFAULT_GRASS_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE));
         PATCH_GRASS_SAVANNA = register("patch_grass_savanna", Feature.RANDOM_PATCH.configured(Configs.DEFAULT_GRASS_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(20));
@@ -380,11 +381,11 @@ public class Features
         PATCH_DEAD_BUSH_2 = register("patch_dead_bush_2", Feature.RANDOM_PATCH.configured(Configs.DEAD_BUSH_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(2));
         PATCH_DEAD_BUSH = register("patch_dead_bush", Feature.RANDOM_PATCH.configured(Configs.DEAD_BUSH_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE));
         PATCH_DEAD_BUSH_BADLANDS = register("patch_dead_bush_badlands", Feature.RANDOM_PATCH.configured(Configs.DEAD_BUSH_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(20));
-        PATCH_MELON = register("patch_melon", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.MELON), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of((Object)States.GRASS_BLOCK.getBlock())).canReplace().noProjection().build()).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE));
+        PATCH_MELON = register("patch_melon", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.MELON), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of(States.GRASS_BLOCK.getBlock())).canReplace().noProjection().build()).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE));
         PATCH_BERRY_SPARSE = register("patch_berry_sparse", Features.PATCH_BERRY_BUSH.decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE));
         PATCH_BERRY_DECORATED = register("patch_berry_decorated", Features.PATCH_BERRY_BUSH.decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).chance(12));
         PATCH_WATERLILLY = register("patch_waterlilly", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.LILY_PAD), SimpleBlockPlacer.INSTANCE).tries(10).build()).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(4));
-        PATCH_TALL_GRASS_2 = register("patch_tall_grass_2", Feature.RANDOM_PATCH.configured(Configs.TALL_GRASS_CONFIG).decorated(Decorators.ADD_32).decorated((ConfiguredDecorator<?>)Decorators.HEIGHTMAP).squared().decorated((ConfiguredDecorator)FeatureDecorator.COUNT_NOISE.configured((Object)new NoiseDependantDecoratorConfiguration(-0.8, 0, 7))));
+        PATCH_TALL_GRASS_2 = register("patch_tall_grass_2", Feature.RANDOM_PATCH.configured(Configs.TALL_GRASS_CONFIG).decorated(Decorators.ADD_32).decorated((ConfiguredDecorator<?>)Decorators.HEIGHTMAP).squared().decorated((ConfiguredDecorator)FeatureDecorator.COUNT_NOISE.configured(new NoiseDependantDecoratorConfiguration(-0.8, 0, 7))));
         PATCH_TALL_GRASS = register("patch_tall_grass", Feature.RANDOM_PATCH.configured(Configs.TALL_GRASS_CONFIG).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE).count(7));
         PATCH_LARGE_FERN = register("patch_large_fern", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.LARGE_FERN), new DoublePlantPlacer()).tries(64).noProjection().build()).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE).count(7));
         PATCH_CACTUS = register("patch_cactus", (ConfiguredFeature<?, ?>)Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.CACTUS), new ColumnPlacer(1, 2)).tries(10).noProjection().build()));
@@ -410,8 +411,8 @@ public class Features
         ORE_QUARTZ_DELTAS = register("ore_quartz_deltas", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, States.NETHER_QUARTZ_ORE, 14)).decorated((ConfiguredDecorator<?>)Decorators.RANGE_10_20_ROOFED).squared().count(32));
         ORE_GOLD_NETHER = register("ore_gold_nether", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, States.NETHER_GOLD_ORE, 10)).decorated((ConfiguredDecorator<?>)Decorators.RANGE_10_20_ROOFED).squared().count(10));
         ORE_QUARTZ_NETHER = register("ore_quartz_nether", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, States.NETHER_QUARTZ_ORE, 14)).decorated((ConfiguredDecorator<?>)Decorators.RANGE_10_20_ROOFED).squared().count(16));
-        ORE_GRAVEL_NETHER = register("ore_gravel_nether", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, States.GRAVEL, 33)).decorated(FeatureDecorator.RANGE.configured((Object)new RangeDecoratorConfiguration(5, 0, 37))).squared().count(2));
-        ORE_BLACKSTONE = register("ore_blackstone", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, States.BLACKSTONE, 33)).decorated(FeatureDecorator.RANGE.configured((Object)new RangeDecoratorConfiguration(5, 10, 37))).squared().count(2));
+        ORE_GRAVEL_NETHER = register("ore_gravel_nether", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, States.GRAVEL, 33)).decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(5, 0, 37))).squared().count(2));
+        ORE_BLACKSTONE = register("ore_blackstone", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, States.BLACKSTONE, 33)).decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(5, 10, 37))).squared().count(2));
         ORE_DIRT = register("ore_dirt", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.DIRT, 33)).range(256).squared().count(10));
         ORE_GRAVEL = register("ore_gravel", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.GRAVEL, 33)).range(256).squared().count(8));
         ORE_GRANITE = register("ore_granite", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.GRANITE, 33)).range(80).squared().count(10));
@@ -419,18 +420,18 @@ public class Features
         ORE_ANDESITE = register("ore_andesite", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.ANDESITE, 33)).range(80).squared().count(10));
         ORE_COAL = register("ore_coal", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.COAL_ORE, 17)).range(128).squared().count(20));
         ORE_IRON = register("ore_iron", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.IRON_ORE, 9)).range(64).squared().count(20));
-        ORE_GOLD_EXTRA = register("ore_gold_extra", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.GOLD_ORE, 9)).decorated(FeatureDecorator.RANGE.configured((Object)new RangeDecoratorConfiguration(32, 32, 80))).squared().count(20));
+        ORE_GOLD_EXTRA = register("ore_gold_extra", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.GOLD_ORE, 9)).decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(32, 32, 80))).squared().count(20));
         ORE_GOLD = register("ore_gold", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.GOLD_ORE, 9)).range(32).squared().count(2));
         ORE_REDSTONE = register("ore_redstone", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.REDSTONE_ORE, 8)).range(16).squared().count(8));
         ORE_DIAMOND = register("ore_diamond", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.DIAMOND_ORE, 8)).range(16).squared());
-        ORE_LAPIS = register("ore_lapis", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.LAPIS_ORE, 7)).decorated(FeatureDecorator.DEPTH_AVERAGE.configured((Object)new DepthAverageConfigation(16, 16))).squared());
+        ORE_LAPIS = register("ore_lapis", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.LAPIS_ORE, 7)).decorated(FeatureDecorator.DEPTH_AVERAGE.configured(new DepthAverageConfigation(16, 16))).squared());
         ORE_INFESTED = register("ore_infested", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.INFESTED_STONE, 9)).range(64).squared().count(7));
         ORE_EMERALD = register("ore_emerald", Feature.EMERALD_ORE.configured(new ReplaceBlockConfiguration(States.STONE, States.EMERALD_ORE)).decorated((ConfiguredDecorator<?>)FeatureDecorator.EMERALD_ORE.configured(DecoratorConfiguration.NONE)));
-        ORE_DEBRIS_LARGE = register("ore_debris_large", Feature.NO_SURFACE_ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHER_ORE_REPLACEABLES, States.ANCIENT_DEBRIS, 3)).decorated(FeatureDecorator.DEPTH_AVERAGE.configured((Object)new DepthAverageConfigation(16, 8))).squared());
-        ORE_DEBRIS_SMALL = register("ore_debris_small", Feature.NO_SURFACE_ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHER_ORE_REPLACEABLES, States.ANCIENT_DEBRIS, 2)).decorated(FeatureDecorator.RANGE.configured((Object)new RangeDecoratorConfiguration(8, 16, 128))).squared());
-        CRIMSON_FUNGI = register("crimson_fungi", Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_NOT_PLANTED_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured((Object)new CountConfiguration(8))));
+        ORE_DEBRIS_LARGE = register("ore_debris_large", Feature.NO_SURFACE_ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHER_ORE_REPLACEABLES, States.ANCIENT_DEBRIS, 3)).decorated(FeatureDecorator.DEPTH_AVERAGE.configured(new DepthAverageConfigation(16, 8))).squared());
+        ORE_DEBRIS_SMALL = register("ore_debris_small", Feature.NO_SURFACE_ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHER_ORE_REPLACEABLES, States.ANCIENT_DEBRIS, 2)).decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(8, 16, 128))).squared());
+        CRIMSON_FUNGI = register("crimson_fungi", Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_NOT_PLANTED_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(8))));
         CRIMSON_FUNGI_PLANTED = register("crimson_fungi_planted", Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_PLANTED_CONFIG));
-        WARPED_FUNGI = register("warped_fungi", Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_WARPED_FUNGI_NOT_PLANTED_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured((Object)new CountConfiguration(8))));
+        WARPED_FUNGI = register("warped_fungi", Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_WARPED_FUNGI_NOT_PLANTED_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(8))));
         WARPED_FUNGI_PLANTED = register("warped_fungi_planted", Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_WARPED_FUNGI_PLANTED_CONFIG));
         HUGE_BROWN_MUSHROOM = register("huge_brown_mushroom", (ConfiguredFeature<?, ?>)Feature.HUGE_BROWN_MUSHROOM.configured(new HugeMushroomFeatureConfiguration(new SimpleStateProvider(States.HUGE_BROWN_MUSHROOM), new SimpleStateProvider(States.HUGE_MUSHROOM_STEM), 3)));
         HUGE_RED_MUSHROOM = register("huge_red_mushroom", (ConfiguredFeature<?, ?>)Feature.HUGE_RED_MUSHROOM.configured(new HugeMushroomFeatureConfiguration(new SimpleStateProvider(States.HUGE_RED_MUSHROOM), new SimpleStateProvider(States.HUGE_MUSHROOM_STEM), 2)));
@@ -440,79 +441,72 @@ public class Features
         ACACIA = register("acacia", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.ACACIA_LOG), new SimpleStateProvider(States.ACACIA_LEAVES), new AcaciaFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0)), new ForkingTrunkPlacer(5, 2, 2), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
         SPRUCE = register("spruce", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.SPRUCE_LOG), new SimpleStateProvider(States.SPRUCE_LEAVES), new SpruceFoliagePlacer(UniformInt.of(2, 1), UniformInt.of(0, 2), UniformInt.of(1, 1)), new StraightTrunkPlacer(5, 2, 1), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build()));
         PINE = register("pine", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.SPRUCE_LOG), new SimpleStateProvider(States.SPRUCE_LEAVES), new PineFoliagePlacer(UniformInt.fixed(1), UniformInt.fixed(1), UniformInt.of(3, 1)), new StraightTrunkPlacer(6, 4, 0), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build()));
-        JUNGLE_TREE = register("jungle_tree", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.JUNGLE_LOG), new SimpleStateProvider(States.JUNGLE_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 3), new StraightTrunkPlacer(4, 8, 0), new TwoLayersFeatureSize(1, 0, 1)).decorators((List<TreeDecorator>)ImmutableList.of((Object)new CocoaDecorator(0.2f), (Object)TrunkVineDecorator.INSTANCE, (Object)LeaveVineDecorator.INSTANCE)).ignoreVines().build()));
+        JUNGLE_TREE = register("jungle_tree", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.JUNGLE_LOG), new SimpleStateProvider(States.JUNGLE_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 3), new StraightTrunkPlacer(4, 8, 0), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(new CocoaDecorator(0.2f), TrunkVineDecorator.INSTANCE, LeaveVineDecorator.INSTANCE)).ignoreVines().build()));
         FANCY_OAK = register("fancy_oak", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.OAK_LOG), new SimpleStateProvider(States.OAK_LEAVES), new FancyFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(4), 4), new FancyTrunkPlacer(3, 11, 0), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().heightmap(Heightmap.Types.MOTION_BLOCKING).build()));
         JUNGLE_TREE_NO_VINE = register("jungle_tree_no_vine", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.JUNGLE_LOG), new SimpleStateProvider(States.JUNGLE_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 3), new StraightTrunkPlacer(4, 8, 0), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build()));
-        MEGA_JUNGLE_TREE = register("mega_jungle_tree", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.JUNGLE_LOG), new SimpleStateProvider(States.JUNGLE_LEAVES), new MegaJungleFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 2), new MegaJungleTrunkPlacer(10, 2, 19), new TwoLayersFeatureSize(1, 1, 2)).decorators((List<TreeDecorator>)ImmutableList.of((Object)TrunkVineDecorator.INSTANCE, (Object)LeaveVineDecorator.INSTANCE)).build()));
-        MEGA_SPRUCE = register("mega_spruce", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.SPRUCE_LOG), new SimpleStateProvider(States.SPRUCE_LEAVES), new MegaPineFoliagePlacer(UniformInt.fixed(0), UniformInt.fixed(0), UniformInt.of(13, 4)), new GiantTrunkPlacer(13, 2, 14), new TwoLayersFeatureSize(1, 1, 2)).decorators((List<TreeDecorator>)ImmutableList.of((Object)new AlterGroundDecorator(new SimpleStateProvider(States.PODZOL)))).build()));
-        MEGA_PINE = register("mega_pine", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.SPRUCE_LOG), new SimpleStateProvider(States.SPRUCE_LEAVES), new MegaPineFoliagePlacer(UniformInt.fixed(0), UniformInt.fixed(0), UniformInt.of(3, 4)), new GiantTrunkPlacer(13, 2, 14), new TwoLayersFeatureSize(1, 1, 2)).decorators((List<TreeDecorator>)ImmutableList.of((Object)new AlterGroundDecorator(new SimpleStateProvider(States.PODZOL)))).build()));
-        SUPER_BIRCH_BEES_0002 = register("super_birch_bees_0002", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.BIRCH_LOG), new SimpleStateProvider(States.BIRCH_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 3), new StraightTrunkPlacer(5, 2, 6), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().decorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.BEEHIVE_0002)).build()));
-        SWAMP_TREE = register("swamp_tree", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.OAK_LOG), new SimpleStateProvider(States.OAK_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(3), UniformInt.fixed(0), 3), new StraightTrunkPlacer(5, 3, 0), new TwoLayersFeatureSize(1, 0, 1)).maxWaterDepth(1).decorators((List<TreeDecorator>)ImmutableList.of((Object)LeaveVineDecorator.INSTANCE)).build()).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1f, 1))));
+        MEGA_JUNGLE_TREE = register("mega_jungle_tree", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.JUNGLE_LOG), new SimpleStateProvider(States.JUNGLE_LEAVES), new MegaJungleFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 2), new MegaJungleTrunkPlacer(10, 2, 19), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(TrunkVineDecorator.INSTANCE, LeaveVineDecorator.INSTANCE)).build()));
+        MEGA_SPRUCE = register("mega_spruce", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.SPRUCE_LOG), new SimpleStateProvider(States.SPRUCE_LEAVES), new MegaPineFoliagePlacer(UniformInt.fixed(0), UniformInt.fixed(0), UniformInt.of(13, 4)), new GiantTrunkPlacer(13, 2, 14), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(new AlterGroundDecorator(new SimpleStateProvider(States.PODZOL)))).build()));
+        MEGA_PINE = register("mega_pine", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.SPRUCE_LOG), new SimpleStateProvider(States.SPRUCE_LEAVES), new MegaPineFoliagePlacer(UniformInt.fixed(0), UniformInt.fixed(0), UniformInt.of(3, 4)), new GiantTrunkPlacer(13, 2, 14), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(new AlterGroundDecorator(new SimpleStateProvider(States.PODZOL)))).build()));
+        SUPER_BIRCH_BEES_0002 = register("super_birch_bees_0002", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.BIRCH_LOG), new SimpleStateProvider(States.BIRCH_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 3), new StraightTrunkPlacer(5, 2, 6), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().decorators(ImmutableList.of(Decorators.BEEHIVE_0002)).build()));
+        SWAMP_TREE = register("swamp_tree", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.OAK_LOG), new SimpleStateProvider(States.OAK_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(3), UniformInt.fixed(0), 3), new StraightTrunkPlacer(5, 3, 0), new TwoLayersFeatureSize(1, 0, 1)).maxWaterDepth(1).decorators(ImmutableList.of(LeaveVineDecorator.INSTANCE)).build()).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1f, 1))));
         JUNGLE_BUSH = register("jungle_bush", (ConfiguredFeature<?, ?>)Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.JUNGLE_LOG), new SimpleStateProvider(States.OAK_LEAVES), new BushFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(1), 2), new StraightTrunkPlacer(1, 0, 0), new TwoLayersFeatureSize(0, 0, 0)).heightmap(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES).build()));
-        OAK_BEES_0002 = register("oak_bees_0002", Feature.TREE.configured(Features.OAK.config().withDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.BEEHIVE_0002))));
-        OAK_BEES_002 = register("oak_bees_002", Feature.TREE.configured(Features.OAK.config().withDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.BEEHIVE_002))));
-        OAK_BEES_005 = register("oak_bees_005", Feature.TREE.configured(Features.OAK.config().withDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.BEEHIVE_005))));
-        BIRCH_BEES_0002 = register("birch_bees_0002", Feature.TREE.configured(Features.BIRCH.config().withDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.BEEHIVE_0002))));
-        BIRCH_BEES_002 = register("birch_bees_002", Feature.TREE.configured(Features.BIRCH.config().withDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.BEEHIVE_002))));
-        BIRCH_BEES_005 = register("birch_bees_005", Feature.TREE.configured(Features.BIRCH.config().withDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.BEEHIVE_005))));
-        FANCY_OAK_BEES_0002 = register("fancy_oak_bees_0002", Feature.TREE.configured(Features.FANCY_OAK.config().withDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.BEEHIVE_0002))));
-        FANCY_OAK_BEES_002 = register("fancy_oak_bees_002", Feature.TREE.configured(Features.FANCY_OAK.config().withDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.BEEHIVE_002))));
-        FANCY_OAK_BEES_005 = register("fancy_oak_bees_005", Feature.TREE.configured(Features.FANCY_OAK.config().withDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.BEEHIVE_005))));
-        OAK_BADLANDS = register("oak_badlands", Features.OAK.decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(5, 0.1f, 1))));
-        SPRUCE_SNOWY = register("spruce_snowy", Features.SPRUCE.decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1f, 1))));
+        OAK_BEES_0002 = register("oak_bees_0002", Feature.TREE.configured(Features.OAK.config().withDecorators(ImmutableList.of(Decorators.BEEHIVE_0002))));
+        OAK_BEES_002 = register("oak_bees_002", Feature.TREE.configured(Features.OAK.config().withDecorators(ImmutableList.of(Decorators.BEEHIVE_002))));
+        OAK_BEES_005 = register("oak_bees_005", Feature.TREE.configured(Features.OAK.config().withDecorators(ImmutableList.of(Decorators.BEEHIVE_005))));
+        BIRCH_BEES_0002 = register("birch_bees_0002", Feature.TREE.configured(Features.BIRCH.config().withDecorators(ImmutableList.of(Decorators.BEEHIVE_0002))));
+        BIRCH_BEES_002 = register("birch_bees_002", Feature.TREE.configured(Features.BIRCH.config().withDecorators(ImmutableList.of(Decorators.BEEHIVE_002))));
+        BIRCH_BEES_005 = register("birch_bees_005", Feature.TREE.configured(Features.BIRCH.config().withDecorators(ImmutableList.of(Decorators.BEEHIVE_005))));
+        FANCY_OAK_BEES_0002 = register("fancy_oak_bees_0002", Feature.TREE.configured(Features.FANCY_OAK.config().withDecorators(ImmutableList.of(Decorators.BEEHIVE_0002))));
+        FANCY_OAK_BEES_002 = register("fancy_oak_bees_002", Feature.TREE.configured(Features.FANCY_OAK.config().withDecorators(ImmutableList.of(Decorators.BEEHIVE_002))));
+        FANCY_OAK_BEES_005 = register("fancy_oak_bees_005", Feature.TREE.configured(Features.FANCY_OAK.config().withDecorators(ImmutableList.of(Decorators.BEEHIVE_005))));
+        OAK_BADLANDS = register("oak_badlands", Features.OAK.decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(5, 0.1f, 1))));
+        SPRUCE_SNOWY = register("spruce_snowy", Features.SPRUCE.decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1f, 1))));
         FLOWER_WARM = register("flower_warm", Feature.FLOWER.configured(Configs.DEFAULT_FLOWER_CONFIG).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE).count(4));
         FLOWER_DEFAULT = register("flower_default", Feature.FLOWER.configured(Configs.DEFAULT_FLOWER_CONFIG).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE).count(2));
         FLOWER_FOREST = register("flower_forest", Feature.FLOWER.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(ForestFlowerProvider.INSTANCE, SimpleBlockPlacer.INSTANCE).tries(64).build()).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE).count(100));
         FLOWER_SWAMP = register("flower_swamp", Feature.FLOWER.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.BLUE_ORCHID), SimpleBlockPlacer.INSTANCE).tries(64).build()).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE));
         FLOWER_PLAIN = register("flower_plain", (ConfiguredFeature<?, ?>)Feature.FLOWER.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(PlainFlowerProvider.INSTANCE, SimpleBlockPlacer.INSTANCE).tries(64).build()));
-        FLOWER_PLAIN_DECORATED = register("flower_plain_decorated", Features.FLOWER_PLAIN.decorated(Decorators.ADD_32).decorated((ConfiguredDecorator<?>)Decorators.HEIGHTMAP).squared().decorated((ConfiguredDecorator)FeatureDecorator.COUNT_NOISE.configured((Object)new NoiseDependantDecoratorConfiguration(-0.8, 15, 4))));
-        final Feature<RandomPatchConfiguration> random_PATCH;
-        final RandomPatchConfiguration.GrassConfigurationBuilder grassConfigurationBuilder;
-        final Feature<RandomPatchConfiguration> random_PATCH2;
-        final RandomPatchConfiguration.GrassConfigurationBuilder grassConfigurationBuilder2;
-        final Feature<RandomPatchConfiguration> random_PATCH3;
-        final RandomPatchConfiguration.GrassConfigurationBuilder grassConfigurationBuilder3;
-        final AbstractFlowerFeature<RandomPatchConfiguration> no_BONEMEAL_FLOWER;
-        final RandomPatchConfiguration.GrassConfigurationBuilder grassConfigurationBuilder4;
+        FLOWER_PLAIN_DECORATED = register("flower_plain_decorated", Features.FLOWER_PLAIN.decorated(Decorators.ADD_32).decorated((ConfiguredDecorator<?>)Decorators.HEIGHTMAP).squared().decorated((ConfiguredDecorator)FeatureDecorator.COUNT_NOISE.configured(new NoiseDependantDecoratorConfiguration(-0.8, 15, 4))));
         FOREST_FLOWER_FEATURES = ImmutableList.of(() -> {
-            random_PATCH = Feature.RANDOM_PATCH;
-            new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.LILAC), new DoublePlantPlacer());
+            Feature<RandomPatchConfiguration> random_PATCH = Feature.RANDOM_PATCH;
+            RandomPatchConfiguration.GrassConfigurationBuilder grassConfigurationBuilder = new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.LILAC), new DoublePlantPlacer());
             return random_PATCH.configured(grassConfigurationBuilder.tries(64).noProjection().build());
         }, () -> {
-            random_PATCH2 = Feature.RANDOM_PATCH;
-            new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.ROSE_BUSH), new DoublePlantPlacer());
+            Feature<RandomPatchConfiguration> random_PATCH2 = Feature.RANDOM_PATCH;
+            RandomPatchConfiguration.GrassConfigurationBuilder grassConfigurationBuilder2 = new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.ROSE_BUSH), new DoublePlantPlacer());
             return random_PATCH2.configured(grassConfigurationBuilder2.tries(64).noProjection().build());
         }, () -> {
-            random_PATCH3 = Feature.RANDOM_PATCH;
-            new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.PEONY), new DoublePlantPlacer());
+            Feature<RandomPatchConfiguration> random_PATCH3 = Feature.RANDOM_PATCH;
+            RandomPatchConfiguration.GrassConfigurationBuilder grassConfigurationBuilder3 = new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.PEONY), new DoublePlantPlacer());
             return random_PATCH3.configured(grassConfigurationBuilder3.tries(64).noProjection().build());
         }, () -> {
-            no_BONEMEAL_FLOWER = Feature.NO_BONEMEAL_FLOWER;
-            new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.LILY_OF_THE_VALLEY), SimpleBlockPlacer.INSTANCE);
+            AbstractFlowerFeature<RandomPatchConfiguration> no_BONEMEAL_FLOWER = Feature.NO_BONEMEAL_FLOWER;
+            RandomPatchConfiguration.GrassConfigurationBuilder grassConfigurationBuilder4 = new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.LILY_OF_THE_VALLEY), SimpleBlockPlacer.INSTANCE);
             return no_BONEMEAL_FLOWER.configured(grassConfigurationBuilder4.tries(64).build());
         });
         FOREST_FLOWER_VEGETATION_COMMON = register("forest_flower_vegetation_common", (ConfiguredFeature<?, ?>)Feature.SIMPLE_RANDOM_SELECTOR.configured(new SimpleRandomFeatureConfiguration((List<Supplier<ConfiguredFeature<?, ?>>>)Features.FOREST_FLOWER_FEATURES)).count(UniformInt.of(-1, 4)).decorated((ConfiguredDecorator)Decorators.ADD_32).decorated((ConfiguredDecorator)Decorators.HEIGHTMAP_SQUARE).count(5));
         FOREST_FLOWER_VEGETATION = register("forest_flower_vegetation", (ConfiguredFeature<?, ?>)Feature.SIMPLE_RANDOM_SELECTOR.configured(new SimpleRandomFeatureConfiguration((List<Supplier<ConfiguredFeature<?, ?>>>)Features.FOREST_FLOWER_FEATURES)).count(UniformInt.of(-3, 4)).decorated((ConfiguredDecorator)Decorators.ADD_32).decorated((ConfiguredDecorator)Decorators.HEIGHTMAP_SQUARE).count(5));
-        DARK_FOREST_VEGETATION_BROWN = register("dark_forest_vegetation_brown", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.HUGE_BROWN_MUSHROOM.weighted(0.025f), (Object)Features.HUGE_RED_MUSHROOM.weighted(0.05f), (Object)Features.DARK_OAK.weighted(0.6666667f), (Object)Features.BIRCH.weighted(0.2f), (Object)Features.FANCY_OAK.weighted(0.1f)), Features.OAK)).decorated((ConfiguredDecorator<?>)FeatureDecorator.DARK_OAK_TREE.configured(DecoratorConfiguration.NONE)));
-        DARK_FOREST_VEGETATION_RED = register("dark_forest_vegetation_red", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.HUGE_RED_MUSHROOM.weighted(0.025f), (Object)Features.HUGE_BROWN_MUSHROOM.weighted(0.05f), (Object)Features.DARK_OAK.weighted(0.6666667f), (Object)Features.BIRCH.weighted(0.2f), (Object)Features.FANCY_OAK.weighted(0.1f)), Features.OAK)).decorated((ConfiguredDecorator<?>)FeatureDecorator.DARK_OAK_TREE.configured(DecoratorConfiguration.NONE)));
-        WARM_OCEAN_VEGETATION = register("warm_ocean_vegetation", Feature.SIMPLE_RANDOM_SELECTOR.configured(new SimpleRandomFeatureConfiguration((List<Supplier<ConfiguredFeature<?, ?>>>)ImmutableList.of(() -> Feature.CORAL_TREE.configured(FeatureConfiguration.NONE), () -> Feature.CORAL_CLAW.configured(FeatureConfiguration.NONE), () -> Feature.CORAL_MUSHROOM.configured(FeatureConfiguration.NONE)))).decorated((ConfiguredDecorator<?>)Decorators.TOP_SOLID_HEIGHTMAP).squared().decorated((ConfiguredDecorator)FeatureDecorator.COUNT_NOISE_BIASED.configured((Object)new NoiseCountFactorDecoratorConfiguration(20, 400.0, 0.0))));
-        FOREST_FLOWER_TREES = register("forest_flower_trees", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.BIRCH_BEES_002.weighted(0.2f), (Object)Features.FANCY_OAK_BEES_002.weighted(0.1f)), Features.OAK_BEES_002)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(6, 0.1f, 1))));
-        TAIGA_VEGETATION = register("taiga_vegetation", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.PINE.weighted(0.33333334f)), Features.SPRUCE)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
-        TREES_SHATTERED_SAVANNA = register("trees_shattered_savanna", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.ACACIA.weighted(0.8f)), Features.OAK)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1f, 1))));
-        TREES_SAVANNA = register("trees_savanna", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.ACACIA.weighted(0.8f)), Features.OAK)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(1, 0.1f, 1))));
-        BIRCH_TALL = register("birch_tall", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.SUPER_BIRCH_BEES_0002.weighted(0.5f)), Features.BIRCH_BEES_0002)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
-        TREES_BIRCH = register("trees_birch", Features.BIRCH_BEES_0002.decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
-        TREES_MOUNTAIN_EDGE = register("trees_mountain_edge", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.SPRUCE.weighted(0.666f), (Object)Features.FANCY_OAK.weighted(0.1f)), Features.OAK)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(3, 0.1f, 1))));
-        TREES_MOUNTAIN = register("trees_mountain", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.SPRUCE.weighted(0.666f), (Object)Features.FANCY_OAK.weighted(0.1f)), Features.OAK)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1f, 1))));
-        TREES_WATER = register("trees_water", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.FANCY_OAK.weighted(0.1f)), Features.OAK)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1f, 1))));
-        BIRCH_OTHER = register("birch_other", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.BIRCH_BEES_0002.weighted(0.2f), (Object)Features.FANCY_OAK_BEES_0002.weighted(0.1f)), Features.OAK_BEES_0002)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
-        PLAIN_VEGETATION = register("plain_vegetation", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.FANCY_OAK_BEES_005.weighted(0.33333334f)), Features.OAK_BEES_005)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.05f, 1))));
-        TREES_JUNGLE_EDGE = register("trees_jungle_edge", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.FANCY_OAK.weighted(0.1f), (Object)Features.JUNGLE_BUSH.weighted(0.5f)), Features.JUNGLE_TREE)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1f, 1))));
-        TREES_GIANT_SPRUCE = register("trees_giant_spruce", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.MEGA_SPRUCE.weighted(0.33333334f), (Object)Features.PINE.weighted(0.33333334f)), Features.SPRUCE)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
-        TREES_GIANT = register("trees_giant", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.MEGA_SPRUCE.weighted(0.025641026f), (Object)Features.MEGA_PINE.weighted(0.30769232f), (Object)Features.PINE.weighted(0.33333334f)), Features.SPRUCE)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
-        TREES_JUNGLE = register("trees_jungle", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.FANCY_OAK.weighted(0.1f), (Object)Features.JUNGLE_BUSH.weighted(0.5f), (Object)Features.MEGA_JUNGLE_TREE.weighted(0.33333334f)), Features.JUNGLE_TREE)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(50, 0.1f, 1))));
-        BAMBOO_VEGETATION = register("bamboo_vegetation", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of((Object)Features.FANCY_OAK.weighted(0.05f), (Object)Features.JUNGLE_BUSH.weighted(0.15f), (Object)Features.MEGA_JUNGLE_TREE.weighted(0.7f)), Feature.RANDOM_PATCH.configured(Configs.JUNGLE_GRASS_CONFIG))).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured((Object)new FrequencyWithExtraChanceDecoratorConfiguration(30, 0.1f, 1))));
+        DARK_FOREST_VEGETATION_BROWN = register("dark_forest_vegetation_brown", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.HUGE_BROWN_MUSHROOM.weighted(0.025f), Features.HUGE_RED_MUSHROOM.weighted(0.05f), Features.DARK_OAK.weighted(0.6666667f), Features.BIRCH.weighted(0.2f), Features.FANCY_OAK.weighted(0.1f)), Features.OAK)).decorated((ConfiguredDecorator<?>)FeatureDecorator.DARK_OAK_TREE.configured(DecoratorConfiguration.NONE)));
+        DARK_FOREST_VEGETATION_RED = register("dark_forest_vegetation_red", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.HUGE_RED_MUSHROOM.weighted(0.025f), Features.HUGE_BROWN_MUSHROOM.weighted(0.05f), Features.DARK_OAK.weighted(0.6666667f), Features.BIRCH.weighted(0.2f), Features.FANCY_OAK.weighted(0.1f)), Features.OAK)).decorated((ConfiguredDecorator<?>)FeatureDecorator.DARK_OAK_TREE.configured(DecoratorConfiguration.NONE)));
+        WARM_OCEAN_VEGETATION = register("warm_ocean_vegetation", Feature.SIMPLE_RANDOM_SELECTOR.configured(new SimpleRandomFeatureConfiguration(ImmutableList.of(() -> Feature.CORAL_TREE.configured(FeatureConfiguration.NONE), () -> Feature.CORAL_CLAW.configured(FeatureConfiguration.NONE), () -> Feature.CORAL_MUSHROOM.configured(FeatureConfiguration.NONE)))).decorated((ConfiguredDecorator<?>)Decorators.TOP_SOLID_HEIGHTMAP).squared().decorated((ConfiguredDecorator)FeatureDecorator.COUNT_NOISE_BIASED.configured(new NoiseCountFactorDecoratorConfiguration(20, 400.0, 0.0))));
+        FOREST_FLOWER_TREES = register("forest_flower_trees", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.BIRCH_BEES_002.weighted(0.2f), Features.FANCY_OAK_BEES_002.weighted(0.1f)), Features.OAK_BEES_002)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(6, 0.1f, 1))));
+        TAIGA_VEGETATION = register("taiga_vegetation", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.PINE.weighted(0.33333334f)), Features.SPRUCE)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
+        TREES_SHATTERED_SAVANNA = register("trees_shattered_savanna", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.ACACIA.weighted(0.8f)), Features.OAK)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1f, 1))));
+        TREES_SAVANNA = register("trees_savanna", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.ACACIA.weighted(0.8f)), Features.OAK)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(1, 0.1f, 1))));
+        BIRCH_TALL = register("birch_tall", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.SUPER_BIRCH_BEES_0002.weighted(0.5f)), Features.BIRCH_BEES_0002)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
+        TREES_BIRCH = register("trees_birch", Features.BIRCH_BEES_0002.decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
+        TREES_MOUNTAIN_EDGE = register("trees_mountain_edge", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.SPRUCE.weighted(0.666f), Features.FANCY_OAK.weighted(0.1f)), Features.OAK)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(3, 0.1f, 1))));
+        TREES_MOUNTAIN = register("trees_mountain", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.SPRUCE.weighted(0.666f), Features.FANCY_OAK.weighted(0.1f)), Features.OAK)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1f, 1))));
+        TREES_WATER = register("trees_water", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.FANCY_OAK.weighted(0.1f)), Features.OAK)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1f, 1))));
+        BIRCH_OTHER = register("birch_other", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.BIRCH_BEES_0002.weighted(0.2f), Features.FANCY_OAK_BEES_0002.weighted(0.1f)), Features.OAK_BEES_0002)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
+        PLAIN_VEGETATION = register("plain_vegetation", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.FANCY_OAK_BEES_005.weighted(0.33333334f)), Features.OAK_BEES_005)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.05f, 1))));
+        TREES_JUNGLE_EDGE = register("trees_jungle_edge", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.FANCY_OAK.weighted(0.1f), Features.JUNGLE_BUSH.weighted(0.5f)), Features.JUNGLE_TREE)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1f, 1))));
+        TREES_GIANT_SPRUCE = register("trees_giant_spruce", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.MEGA_SPRUCE.weighted(0.33333334f), Features.PINE.weighted(0.33333334f)), Features.SPRUCE)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
+        TREES_GIANT = register("trees_giant", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.MEGA_SPRUCE.weighted(0.025641026f), Features.MEGA_PINE.weighted(0.30769232f), Features.PINE.weighted(0.33333334f)), Features.SPRUCE)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
+        TREES_JUNGLE = register("trees_jungle", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.FANCY_OAK.weighted(0.1f), Features.JUNGLE_BUSH.weighted(0.5f), Features.MEGA_JUNGLE_TREE.weighted(0.33333334f)), Features.JUNGLE_TREE)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(50, 0.1f, 1))));
+        BAMBOO_VEGETATION = register("bamboo_vegetation", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.FANCY_OAK.weighted(0.05f), Features.JUNGLE_BUSH.weighted(0.15f), Features.MEGA_JUNGLE_TREE.weighted(0.7f)), Feature.RANDOM_PATCH.configured(Configs.JUNGLE_GRASS_CONFIG))).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(30, 0.1f, 1))));
         MUSHROOM_FIELD_VEGETATION = register("mushroom_field_vegetation", Feature.RANDOM_BOOLEAN_SELECTOR.configured(new RandomBooleanFeatureConfiguration(() -> Features.HUGE_RED_MUSHROOM, () -> Features.HUGE_BROWN_MUSHROOM)).decorated(Decorators.HEIGHTMAP_SQUARE));
+        // MagmaCube end - decompile fix
     }
     
     public static final class Decorators
@@ -674,7 +668,7 @@ public class Features
             DEAD_BUSH = Blocks.DEAD_BUSH.defaultBlockState();
             MELON = Blocks.MELON.defaultBlockState();
             PUMPKIN = Blocks.PUMPKIN.defaultBlockState();
-            SWEET_BERRY_BUSH = ((StateHolder<O, BlockState>)Blocks.SWEET_BERRY_BUSH.defaultBlockState()).setValue((Property<Comparable>)SweetBerryBushBlock.AGE, 3);
+            SWEET_BERRY_BUSH = (Blocks.SWEET_BERRY_BUSH.defaultBlockState()).setValue(SweetBerryBushBlock.AGE, 3); // MagmaCube - decompile fix
             FIRE = Blocks.FIRE.defaultBlockState();
             SOUL_FIRE = Blocks.SOUL_FIRE.defaultBlockState();
             NETHERRACK = Blocks.NETHERRACK.defaultBlockState();
@@ -686,9 +680,9 @@ public class Features
             SUNFLOWER = Blocks.SUNFLOWER.defaultBlockState();
             CACTUS = Blocks.CACTUS.defaultBlockState();
             SUGAR_CANE = Blocks.SUGAR_CANE.defaultBlockState();
-            HUGE_RED_MUSHROOM = ((StateHolder<O, BlockState>)Blocks.RED_MUSHROOM_BLOCK.defaultBlockState()).setValue((Property<Comparable>)HugeMushroomBlock.DOWN, false);
-            HUGE_BROWN_MUSHROOM = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.BROWN_MUSHROOM_BLOCK.defaultBlockState()).setValue((Property<Comparable>)HugeMushroomBlock.UP, true)).setValue((Property<Comparable>)HugeMushroomBlock.DOWN, false);
-            HUGE_MUSHROOM_STEM = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.MUSHROOM_STEM.defaultBlockState()).setValue((Property<Comparable>)HugeMushroomBlock.UP, false)).setValue((Property<Comparable>)HugeMushroomBlock.DOWN, false);
+            HUGE_RED_MUSHROOM = (Blocks.RED_MUSHROOM_BLOCK.defaultBlockState()).setValue(HugeMushroomBlock.DOWN, false); // MagmaCube - decompile fix
+            HUGE_BROWN_MUSHROOM = ((Blocks.BROWN_MUSHROOM_BLOCK.defaultBlockState()).setValue(HugeMushroomBlock.UP, true)).setValue(HugeMushroomBlock.DOWN, false); // MagmaCube - decompile fix
+            HUGE_MUSHROOM_STEM = ((Blocks.MUSHROOM_STEM.defaultBlockState()).setValue(HugeMushroomBlock.UP, false)).setValue(HugeMushroomBlock.DOWN, false); // MagmaCube - decompile fix
             WATER_STATE = Fluids.WATER.defaultFluidState();
             LAVA_STATE = Fluids.LAVA.defaultFluidState();
             WATER = Blocks.WATER.defaultBlockState();
@@ -744,14 +738,14 @@ public class Features
         static {
             DEFAULT_GRASS_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.GRASS), SimpleBlockPlacer.INSTANCE).tries(32).build();
             TAIGA_GRASS_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new WeightedStateProvider().add(States.GRASS, 1).add(States.FERN, 4), SimpleBlockPlacer.INSTANCE).tries(32).build();
-            JUNGLE_GRASS_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new WeightedStateProvider().add(States.GRASS, 3).add(States.FERN, 1), SimpleBlockPlacer.INSTANCE).blacklist((Set<BlockState>)ImmutableSet.of((Object)States.PODZOL)).tries(32).build();
+            JUNGLE_GRASS_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new WeightedStateProvider().add(States.GRASS, 3).add(States.FERN, 1), SimpleBlockPlacer.INSTANCE).blacklist((Set<BlockState>)ImmutableSet.of(States.PODZOL)).tries(32).build();
             DEFAULT_FLOWER_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new WeightedStateProvider().add(States.POPPY, 2).add(States.DANDELION, 1), SimpleBlockPlacer.INSTANCE).tries(64).build();
             DEAD_BUSH_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.DEAD_BUSH), SimpleBlockPlacer.INSTANCE).tries(4).build();
-            SWEET_BERRY_BUSH_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.SWEET_BERRY_BUSH), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of((Object)States.GRASS_BLOCK.getBlock())).noProjection().build();
+            SWEET_BERRY_BUSH_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.SWEET_BERRY_BUSH), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of(States.GRASS_BLOCK.getBlock())).noProjection().build();
             TALL_GRASS_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.TALL_GRASS), new DoublePlantPlacer()).tries(64).noProjection().build();
             SUGAR_CANE_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.SUGAR_CANE), new ColumnPlacer(2, 2)).tries(20).xspread(4).yspread(0).zspread(4).noProjection().needWater().build();
-            LAVA_SPRING_CONFIG = new SpringConfiguration(States.LAVA_STATE, true, 4, 1, (Set<Block>)ImmutableSet.of((Object)Blocks.STONE, (Object)Blocks.GRANITE, (Object)Blocks.DIORITE, (Object)Blocks.ANDESITE));
-            CLOSED_NETHER_SPRING_CONFIG = new SpringConfiguration(States.LAVA_STATE, false, 5, 0, (Set<Block>)ImmutableSet.of((Object)Blocks.NETHERRACK));
+            LAVA_SPRING_CONFIG = new SpringConfiguration(States.LAVA_STATE, true, 4, 1, (Set<Block>)ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE));
+            CLOSED_NETHER_SPRING_CONFIG = new SpringConfiguration(States.LAVA_STATE, false, 5, 0, (Set<Block>)ImmutableSet.of(Blocks.NETHERRACK));
             CRIMSON_FOREST_CONFIG = new BlockPileConfiguration(new WeightedStateProvider().add(States.CRIMSON_ROOTS, 87).add(States.CRIMSON_FUNGUS, 11).add(States.WARPED_FUNGUS, 1));
             WARPED_FOREST_CONFIG = new BlockPileConfiguration(new WeightedStateProvider().add(States.WARPED_ROOTS, 85).add(States.CRIMSON_ROOTS, 1).add(States.WARPED_FUNGUS, 13).add(States.CRIMSON_FUNGUS, 1));
             NETHER_SPROUTS_CONFIG = new BlockPileConfiguration(new SimpleStateProvider(States.NETHER_SPROUTS));
diff --git a/src/main/java/net/minecraft/data/worldgen/ProcessorLists.java b/src/main/java/net/minecraft/data/worldgen/ProcessorLists.java
index 11f2af816e59c586fac3534045cab79b355ef2b1..caf7936879ee6dea519fe84a3e101b1efb7a8b23 100644
--- a/src/main/java/net/minecraft/data/worldgen/ProcessorLists.java
+++ b/src/main/java/net/minecraft/data/worldgen/ProcessorLists.java
@@ -72,35 +72,37 @@ public class ProcessorLists
     static {
         ADD_GILDED_BLACKSTONE = new ProcessorRule(new RandomBlockMatchTest(Blocks.BLACKSTONE, 0.01f), AlwaysTrueTest.INSTANCE, Blocks.GILDED_BLACKSTONE.defaultBlockState());
         REMOVE_GILDED_BLACKSTONE = new ProcessorRule(new RandomBlockMatchTest(Blocks.GILDED_BLACKSTONE, 0.5f), AlwaysTrueTest.INSTANCE, Blocks.BLACKSTONE.defaultBlockState());
-        EMPTY = register("empty", (ImmutableList<StructureProcessor>)ImmutableList.of());
-        ZOMBIE_PLAINS = register("zombie_plains", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.COBBLESTONE, 0.8f), AlwaysTrueTest.INSTANCE, Blocks.MOSSY_COBBLESTONE.defaultBlockState()), (Object)new ProcessorRule(new TagMatchTest(BlockTags.DOORS), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.WALL_TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.COBBLESTONE, 0.07f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.MOSSY_COBBLESTONE, 0.07f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHITE_TERRACOTTA, 0.07f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.OAK_LOG, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.OAK_PLANKS, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.OAK_STAIRS, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.STRIPPED_OAK_LOG, 0.02f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.GLASS_PANE, 0.5f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object[])new ProcessorRule[] { new ProcessorRule(new BlockStateMatchTest(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true)), AlwaysTrueTest.INSTANCE, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true)), new ProcessorRule(new BlockStateMatchTest(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true)).setValue((Property<Comparable>)IronBarsBlock.WEST, true)), AlwaysTrueTest.INSTANCE, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true)).setValue((Property<Comparable>)IronBarsBlock.WEST, true)), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CARROTS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.POTATOES.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.BEETROOTS.defaultBlockState()) }))));
-        ZOMBIE_SAVANNA = register("zombie_savanna", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new TagMatchTest(BlockTags.DOORS), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.WALL_TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.ACACIA_PLANKS, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.ACACIA_STAIRS, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.ACACIA_LOG, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.ACACIA_WOOD, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.ORANGE_TERRACOTTA, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.YELLOW_TERRACOTTA, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.RED_TERRACOTTA, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.GLASS_PANE, 0.5f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new BlockStateMatchTest(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true)), AlwaysTrueTest.INSTANCE, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true)), (Object[])new ProcessorRule[] { new ProcessorRule(new BlockStateMatchTest(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true)).setValue((Property<Comparable>)IronBarsBlock.WEST, true)), AlwaysTrueTest.INSTANCE, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true)).setValue((Property<Comparable>)IronBarsBlock.WEST, true)), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.MELON_STEM.defaultBlockState()) }))));
-        ZOMBIE_SNOWY = register("zombie_snowy", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new TagMatchTest(BlockTags.DOORS), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.WALL_TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.LANTERN), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.SPRUCE_PLANKS, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.SPRUCE_SLAB, 0.4f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.STRIPPED_SPRUCE_LOG, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.STRIPPED_SPRUCE_WOOD, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.GLASS_PANE, 0.5f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new BlockStateMatchTest(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true)), AlwaysTrueTest.INSTANCE, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true)), (Object)new ProcessorRule(new BlockStateMatchTest(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true)).setValue((Property<Comparable>)IronBarsBlock.WEST, true)), AlwaysTrueTest.INSTANCE, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true)).setValue((Property<Comparable>)IronBarsBlock.WEST, true)), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.CARROTS.defaultBlockState()), (Object[])new ProcessorRule[] { new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.8f), AlwaysTrueTest.INSTANCE, Blocks.POTATOES.defaultBlockState()) }))));
-        ZOMBIE_TAIGA = register("zombie_taiga", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.COBBLESTONE, 0.8f), AlwaysTrueTest.INSTANCE, Blocks.MOSSY_COBBLESTONE.defaultBlockState()), (Object)new ProcessorRule(new TagMatchTest(BlockTags.DOORS), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.WALL_TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.CAMPFIRE), AlwaysTrueTest.INSTANCE, ((StateHolder<O, BlockState>)Blocks.CAMPFIRE.defaultBlockState()).setValue((Property<Comparable>)CampfireBlock.LIT, false)), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.COBBLESTONE, 0.08f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.SPRUCE_LOG, 0.08f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.GLASS_PANE, 0.5f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new BlockStateMatchTest(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true)), AlwaysTrueTest.INSTANCE, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true)), (Object)new ProcessorRule(new BlockStateMatchTest(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true)).setValue((Property<Comparable>)IronBarsBlock.WEST, true)), AlwaysTrueTest.INSTANCE, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true)).setValue((Property<Comparable>)IronBarsBlock.WEST, true)), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.PUMPKIN_STEM.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.POTATOES.defaultBlockState()), (Object[])new ProcessorRule[0]))));
-        ZOMBIE_DESERT = register("zombie_desert", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new TagMatchTest(BlockTags.DOORS), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.WALL_TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.SMOOTH_SANDSTONE, 0.08f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.CUT_SANDSTONE, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.TERRACOTTA, 0.08f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.SMOOTH_SANDSTONE_STAIRS, 0.08f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.SMOOTH_SANDSTONE_SLAB, 0.08f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.BEETROOTS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.MELON_STEM.defaultBlockState())))));
-        MOSSIFY_10_PERCENT = register("mossify_10_percent", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.COBBLESTONE, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.MOSSY_COBBLESTONE.defaultBlockState())))));
-        MOSSIFY_20_PERCENT = register("mossify_20_percent", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.COBBLESTONE, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.MOSSY_COBBLESTONE.defaultBlockState())))));
-        MOSSIFY_70_PERCENT = register("mossify_70_percent", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.COBBLESTONE, 0.7f), AlwaysTrueTest.INSTANCE, Blocks.MOSSY_COBBLESTONE.defaultBlockState())))));
-        STREET_PLAINS = register("street_plains", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new BlockMatchTest(Blocks.GRASS_PATH), new BlockMatchTest(Blocks.WATER), Blocks.OAK_PLANKS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.GRASS_PATH, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.GRASS_BLOCK.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.GRASS_BLOCK), new BlockMatchTest(Blocks.WATER), Blocks.WATER.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.DIRT), new BlockMatchTest(Blocks.WATER), Blocks.WATER.defaultBlockState())))));
-        STREET_SAVANNA = register("street_savanna", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new BlockMatchTest(Blocks.GRASS_PATH), new BlockMatchTest(Blocks.WATER), Blocks.ACACIA_PLANKS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.GRASS_PATH, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.GRASS_BLOCK.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.GRASS_BLOCK), new BlockMatchTest(Blocks.WATER), Blocks.WATER.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.DIRT), new BlockMatchTest(Blocks.WATER), Blocks.WATER.defaultBlockState())))));
-        STREET_SNOWY_OR_TAIGA = register("street_snowy_or_taiga", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new BlockMatchTest(Blocks.GRASS_PATH), new BlockMatchTest(Blocks.WATER), Blocks.SPRUCE_PLANKS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.GRASS_PATH, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.GRASS_BLOCK.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.GRASS_BLOCK), new BlockMatchTest(Blocks.WATER), Blocks.WATER.defaultBlockState()), (Object)new ProcessorRule(new BlockMatchTest(Blocks.DIRT), new BlockMatchTest(Blocks.WATER), Blocks.WATER.defaultBlockState())))));
-        FARM_PLAINS = register("farm_plains", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CARROTS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.POTATOES.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.BEETROOTS.defaultBlockState())))));
-        FARM_SAVANNA = register("farm_savanna", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.MELON_STEM.defaultBlockState())))));
-        FARM_SNOWY = register("farm_snowy", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.CARROTS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.8f), AlwaysTrueTest.INSTANCE, Blocks.POTATOES.defaultBlockState())))));
-        FARM_TAIGA = register("farm_taiga", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.PUMPKIN_STEM.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.POTATOES.defaultBlockState())))));
-        FARM_DESERT = register("farm_desert", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.BEETROOTS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.MELON_STEM.defaultBlockState())))));
-        OUTPOST_ROT = register("outpost_rot", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new BlockRotProcessor(0.05f)));
-        BOTTOM_RAMPART = register("bottom_rampart", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.MAGMA_BLOCK, 0.75f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS, 0.15f), AlwaysTrueTest.INSTANCE, Blocks.POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)ProcessorLists.REMOVE_GILDED_BLACKSTONE, (Object)ProcessorLists.ADD_GILDED_BLACKSTONE))));
-        TREASURE_ROOMS = register("treasure_rooms", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.35f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.CHISELED_POLISHED_BLACKSTONE, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)ProcessorLists.REMOVE_GILDED_BLACKSTONE, (Object)ProcessorLists.ADD_GILDED_BLACKSTONE))));
-        HOUSING = register("housing", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.BLACKSTONE, 1.0E-4f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)ProcessorLists.REMOVE_GILDED_BLACKSTONE, (Object)ProcessorLists.ADD_GILDED_BLACKSTONE))));
-        SIDE_WALL_DEGRADATION = register("side_wall_degradation", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.CHISELED_POLISHED_BLACKSTONE, 0.5f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.GOLD_BLOCK, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)ProcessorLists.REMOVE_GILDED_BLACKSTONE, (Object)ProcessorLists.ADD_GILDED_BLACKSTONE))));
-        STABLE_DEGRADATION = register("stable_degradation", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.BLACKSTONE, 1.0E-4f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)ProcessorLists.REMOVE_GILDED_BLACKSTONE, (Object)ProcessorLists.ADD_GILDED_BLACKSTONE))));
-        BASTION_GENERIC_DEGRADATION = register("bastion_generic_degradation", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.BLACKSTONE, 1.0E-4f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.GOLD_BLOCK, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)ProcessorLists.REMOVE_GILDED_BLACKSTONE, (Object)ProcessorLists.ADD_GILDED_BLACKSTONE))));
-        RAMPART_DEGRADATION = register("rampart_degradation", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.4f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.BLACKSTONE, 0.01f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 1.0E-4f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.BLACKSTONE, 1.0E-4f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.GOLD_BLOCK, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)ProcessorLists.REMOVE_GILDED_BLACKSTONE, (Object)ProcessorLists.ADD_GILDED_BLACKSTONE))));
-        ENTRANCE_REPLACEMENT = register("entrance_replacement", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.CHISELED_POLISHED_BLACKSTONE, 0.5f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.GOLD_BLOCK, 0.6f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)ProcessorLists.REMOVE_GILDED_BLACKSTONE, (Object)ProcessorLists.ADD_GILDED_BLACKSTONE))));
-        BRIDGE = register("bridge", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.BLACKSTONE, 1.0E-4f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState())))));
-        ROOF = register("roof", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.15f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.BLACKSTONE.defaultBlockState())))));
-        HIGH_WALL = register("high_wall", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.01f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.5f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.BLACKSTONE.defaultBlockState()), (Object)ProcessorLists.REMOVE_GILDED_BLACKSTONE))));
-        HIGH_RAMPART = register("high_rampart", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new RuleProcessor((List<? extends ProcessorRule>)ImmutableList.of((Object)new ProcessorRule(new RandomBlockMatchTest(Blocks.GOLD_BLOCK, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), (Object)new ProcessorRule(AlwaysTrueTest.INSTANCE, AlwaysTrueTest.INSTANCE, new AxisAlignedLinearPosTest(0.0f, 0.05f, 0, 100, Direction.Axis.Y), Blocks.AIR.defaultBlockState()), (Object)ProcessorLists.REMOVE_GILDED_BLACKSTONE))));
+        // MagmaCube - decompile fix
+        EMPTY = register("empty", ImmutableList.of());
+        ZOMBIE_PLAINS = register("zombie_plains", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.COBBLESTONE, 0.8f), AlwaysTrueTest.INSTANCE, Blocks.MOSSY_COBBLESTONE.defaultBlockState()), new ProcessorRule(new TagMatchTest(BlockTags.DOORS), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.WALL_TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.COBBLESTONE, 0.07f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.MOSSY_COBBLESTONE, 0.07f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHITE_TERRACOTTA, 0.07f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.OAK_LOG, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.OAK_PLANKS, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.OAK_STAIRS, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.STRIPPED_OAK_LOG, 0.02f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.GLASS_PANE, 0.5f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule[] { new ProcessorRule(new BlockStateMatchTest(((Blocks.GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true)), AlwaysTrueTest.INSTANCE, ((Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true)), new ProcessorRule(new BlockStateMatchTest(((Blocks.GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true)), AlwaysTrueTest.INSTANCE, ((Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true)), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CARROTS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.POTATOES.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.BEETROOTS.defaultBlockState()) }))));
+        ZOMBIE_SAVANNA = register("zombie_savanna", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new TagMatchTest(BlockTags.DOORS), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.WALL_TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.ACACIA_PLANKS, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.ACACIA_STAIRS, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.ACACIA_LOG, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.ACACIA_WOOD, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.ORANGE_TERRACOTTA, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.YELLOW_TERRACOTTA, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.RED_TERRACOTTA, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.GLASS_PANE, 0.5f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new BlockStateMatchTest(((Blocks.GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true)), AlwaysTrueTest.INSTANCE, ((Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true)), new ProcessorRule[] { new ProcessorRule(new BlockStateMatchTest(((Blocks.GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true)), AlwaysTrueTest.INSTANCE, ((Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true)), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.MELON_STEM.defaultBlockState()) }))));
+        ZOMBIE_SNOWY = register("zombie_snowy", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new TagMatchTest(BlockTags.DOORS), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.WALL_TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.LANTERN), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.SPRUCE_PLANKS, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.SPRUCE_SLAB, 0.4f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.STRIPPED_SPRUCE_LOG, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.STRIPPED_SPRUCE_WOOD, 0.05f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.GLASS_PANE, 0.5f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new BlockStateMatchTest(((Blocks.GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true)), AlwaysTrueTest.INSTANCE, ((Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true)), new ProcessorRule(new BlockStateMatchTest(((Blocks.GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true)), AlwaysTrueTest.INSTANCE, ((Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true)), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.CARROTS.defaultBlockState()), new ProcessorRule[] { new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.8f), AlwaysTrueTest.INSTANCE, Blocks.POTATOES.defaultBlockState()) }))));
+        ZOMBIE_TAIGA = register("zombie_taiga", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.COBBLESTONE, 0.8f), AlwaysTrueTest.INSTANCE, Blocks.MOSSY_COBBLESTONE.defaultBlockState()), new ProcessorRule(new TagMatchTest(BlockTags.DOORS), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.WALL_TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.CAMPFIRE), AlwaysTrueTest.INSTANCE, (Blocks.CAMPFIRE.defaultBlockState()).setValue(CampfireBlock.LIT, false)), new ProcessorRule(new RandomBlockMatchTest(Blocks.COBBLESTONE, 0.08f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.SPRUCE_LOG, 0.08f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.GLASS_PANE, 0.5f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new BlockStateMatchTest(((Blocks.GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true)), AlwaysTrueTest.INSTANCE, ((Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true)), new ProcessorRule(new BlockStateMatchTest(((Blocks.GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true)), AlwaysTrueTest.INSTANCE, ((Blocks.BROWN_STAINED_GLASS_PANE.defaultBlockState()).setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true)), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.PUMPKIN_STEM.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.POTATOES.defaultBlockState()), new ProcessorRule[0]))));
+        ZOMBIE_DESERT = register("zombie_desert", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new TagMatchTest(BlockTags.DOORS), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.WALL_TORCH), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.SMOOTH_SANDSTONE, 0.08f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.CUT_SANDSTONE, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.TERRACOTTA, 0.08f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.SMOOTH_SANDSTONE_STAIRS, 0.08f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.SMOOTH_SANDSTONE_SLAB, 0.08f), AlwaysTrueTest.INSTANCE, Blocks.COBWEB.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.BEETROOTS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.MELON_STEM.defaultBlockState())))));
+        MOSSIFY_10_PERCENT = register("mossify_10_percent", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.COBBLESTONE, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.MOSSY_COBBLESTONE.defaultBlockState())))));
+        MOSSIFY_20_PERCENT = register("mossify_20_percent", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.COBBLESTONE, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.MOSSY_COBBLESTONE.defaultBlockState())))));
+        MOSSIFY_70_PERCENT = register("mossify_70_percent", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.COBBLESTONE, 0.7f), AlwaysTrueTest.INSTANCE, Blocks.MOSSY_COBBLESTONE.defaultBlockState())))));
+        STREET_PLAINS = register("street_plains", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new BlockMatchTest(Blocks.GRASS_PATH), new BlockMatchTest(Blocks.WATER), Blocks.OAK_PLANKS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.GRASS_PATH, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.GRASS_BLOCK.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.GRASS_BLOCK), new BlockMatchTest(Blocks.WATER), Blocks.WATER.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.DIRT), new BlockMatchTest(Blocks.WATER), Blocks.WATER.defaultBlockState())))));
+        STREET_SAVANNA = register("street_savanna", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new BlockMatchTest(Blocks.GRASS_PATH), new BlockMatchTest(Blocks.WATER), Blocks.ACACIA_PLANKS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.GRASS_PATH, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.GRASS_BLOCK.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.GRASS_BLOCK), new BlockMatchTest(Blocks.WATER), Blocks.WATER.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.DIRT), new BlockMatchTest(Blocks.WATER), Blocks.WATER.defaultBlockState())))));
+        STREET_SNOWY_OR_TAIGA = register("street_snowy_or_taiga", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new BlockMatchTest(Blocks.GRASS_PATH), new BlockMatchTest(Blocks.WATER), Blocks.SPRUCE_PLANKS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.GRASS_PATH, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.GRASS_BLOCK.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.GRASS_BLOCK), new BlockMatchTest(Blocks.WATER), Blocks.WATER.defaultBlockState()), new ProcessorRule(new BlockMatchTest(Blocks.DIRT), new BlockMatchTest(Blocks.WATER), Blocks.WATER.defaultBlockState())))));
+        FARM_PLAINS = register("farm_plains", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CARROTS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.POTATOES.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.BEETROOTS.defaultBlockState())))));
+        FARM_SAVANNA = register("farm_savanna", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.MELON_STEM.defaultBlockState())))));
+        FARM_SNOWY = register("farm_snowy", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.CARROTS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.8f), AlwaysTrueTest.INSTANCE, Blocks.POTATOES.defaultBlockState())))));
+        FARM_TAIGA = register("farm_taiga", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.PUMPKIN_STEM.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.POTATOES.defaultBlockState())))));
+        FARM_DESERT = register("farm_desert", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.2f), AlwaysTrueTest.INSTANCE, Blocks.BEETROOTS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.WHEAT, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.MELON_STEM.defaultBlockState())))));
+        OUTPOST_ROT = register("outpost_rot", ImmutableList.of(new BlockRotProcessor(0.05f)));
+        BOTTOM_RAMPART = register("bottom_rampart", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.MAGMA_BLOCK, 0.75f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS, 0.15f), AlwaysTrueTest.INSTANCE, Blocks.POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), ProcessorLists.REMOVE_GILDED_BLACKSTONE, ProcessorLists.ADD_GILDED_BLACKSTONE))));
+        TREASURE_ROOMS = register("treasure_rooms", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.35f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.CHISELED_POLISHED_BLACKSTONE, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), ProcessorLists.REMOVE_GILDED_BLACKSTONE, ProcessorLists.ADD_GILDED_BLACKSTONE))));
+        HOUSING = register("housing", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.BLACKSTONE, 1.0E-4f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), ProcessorLists.REMOVE_GILDED_BLACKSTONE, ProcessorLists.ADD_GILDED_BLACKSTONE))));
+        SIDE_WALL_DEGRADATION = register("side_wall_degradation", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.CHISELED_POLISHED_BLACKSTONE, 0.5f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.GOLD_BLOCK, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), ProcessorLists.REMOVE_GILDED_BLACKSTONE, ProcessorLists.ADD_GILDED_BLACKSTONE))));
+        STABLE_DEGRADATION = register("stable_degradation", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.1f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.BLACKSTONE, 1.0E-4f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), ProcessorLists.REMOVE_GILDED_BLACKSTONE, ProcessorLists.ADD_GILDED_BLACKSTONE))));
+        BASTION_GENERIC_DEGRADATION = register("bastion_generic_degradation", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.BLACKSTONE, 1.0E-4f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.GOLD_BLOCK, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), ProcessorLists.REMOVE_GILDED_BLACKSTONE, ProcessorLists.ADD_GILDED_BLACKSTONE))));
+        RAMPART_DEGRADATION = register("rampart_degradation", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.4f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.BLACKSTONE, 0.01f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 1.0E-4f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.BLACKSTONE, 1.0E-4f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.GOLD_BLOCK, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), ProcessorLists.REMOVE_GILDED_BLACKSTONE, ProcessorLists.ADD_GILDED_BLACKSTONE))));
+        ENTRANCE_REPLACEMENT = register("entrance_replacement", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.CHISELED_POLISHED_BLACKSTONE, 0.5f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.GOLD_BLOCK, 0.6f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), ProcessorLists.REMOVE_GILDED_BLACKSTONE, ProcessorLists.ADD_GILDED_BLACKSTONE))));
+        BRIDGE = register("bridge", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.BLACKSTONE, 1.0E-4f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState())))));
+        ROOF = register("roof", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.15f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.BLACKSTONE.defaultBlockState())))));
+        HIGH_WALL = register("high_wall", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.01f), AlwaysTrueTest.INSTANCE, Blocks.AIR.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.5f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), new ProcessorRule(new RandomBlockMatchTest(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.BLACKSTONE.defaultBlockState()), ProcessorLists.REMOVE_GILDED_BLACKSTONE))));
+        HIGH_RAMPART = register("high_rampart", ImmutableList.of(new RuleProcessor(ImmutableList.of(new ProcessorRule(new RandomBlockMatchTest(Blocks.GOLD_BLOCK, 0.3f), AlwaysTrueTest.INSTANCE, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.defaultBlockState()), new ProcessorRule(AlwaysTrueTest.INSTANCE, AlwaysTrueTest.INSTANCE, new AxisAlignedLinearPosTest(0.0f, 0.05f, 0, 100, Direction.Axis.Y), Blocks.AIR.defaultBlockState()), ProcessorLists.REMOVE_GILDED_BLACKSTONE))));
+        // MagmaCube end - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java b/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
index d417119d39ceaf627d7b02380e80ba57b3da0a63..20bb0585d16a36c3613983dc80b98360bf69da7d 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
@@ -31,31 +31,26 @@ public class GameTestBatchRunner
     private BlockPos.MutableBlockPos nextTestNorthWestCorner;
     
     public GameTestBatchRunner(final Collection<GameTestBatch> debug1, final BlockPos debug2, final Rotation debug3, final ServerLevel debug4, final GameTestTicker debug5, final int debug6) {
-        this.allTestInfos = (List<GameTestInfo>)Lists.newArrayList();
-        this.northWestCorners = (Map<GameTestInfo, BlockPos>)Maps.newHashMap();
-        this.batches = (List<Pair<GameTestBatch, Collection<GameTestInfo>>>)Lists.newArrayList();
+        this.allTestInfos = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.northWestCorners = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.batches = Lists.newArrayList(); // MagmaCube - decompile fix
         this.currentBatchIndex = 0;
         this.nextTestNorthWestCorner = debug2.mutable();
         this.firstTestNorthWestCorner = debug2;
         this.level = debug4;
         this.testTicker = debug5;
         this.testsPerRow = debug6;
-        final Collection<GameTestInfo> debug7;
-        final Collection<TestFunction> debug8;
-        final Iterator<TestFunction> iterator;
-        TestFunction debug9;
-        GameTestInfo debug10;
-        debug1.forEach(debug3 -> {
-            debug7 = (Collection<GameTestInfo>)Lists.newArrayList();
-            debug8 = debug3.getTestFunctions();
-            debug8.iterator();
+        debug1.forEach(debug3l -> { // MagmaCube - decompile fix
+            Collection<GameTestInfo> debug7 = Lists.newArrayList(); // MagmaCube - decompile fix
+            Collection<TestFunction> debug8 = debug3l.getTestFunctions(); // MagmaCube - decompile fix
+            Iterator<TestFunction> iterator = debug8.iterator(); // MagmaCube - decompile fix
             while (iterator.hasNext()) {
-                debug9 = iterator.next();
-                debug10 = new GameTestInfo(debug9, debug3, debug4);
+                TestFunction debug9 = iterator.next(); // MagmaCube - decompile fix
+                GameTestInfo debug10 = new GameTestInfo(debug9, debug3, debug4); // MagmaCube - decompile fix
                 debug7.add(debug10);
                 this.allTestInfos.add(debug10);
             }
-            this.batches.add((Pair<GameTestBatch, Collection<GameTestInfo>>)Pair.of((Object)debug3, (Object)debug7));
+            this.batches.add((Pair<GameTestBatch, Collection<GameTestInfo>>)Pair.of(debug3l, debug7)); // MagmaCube - decompile fix
         });
     }
     
@@ -80,9 +75,8 @@ public class GameTestBatchRunner
         debug3.runBeforeBatchFunction(this.level);
         final String debug5 = debug3.getName();
         GameTestBatchRunner.LOGGER.info("Running test batch '" + debug5 + "' (" + debug4.size() + " tests)...");
-        final BlockPos debug6;
-        debug4.forEach(debug1 -> {
-            this.currentBatchTracker.addTestToTrack(debug1);
+        debug4.forEach(debug1l -> { // MagmaCube - decompile fix
+            this.currentBatchTracker.addTestToTrack(debug1l); // MagmaCube - decompile fix
             this.currentBatchTracker.addListener(new GameTestListener() {
                 @Override
                 public void testStructureLoaded(final GameTestInfo debug1) {
@@ -93,8 +87,8 @@ public class GameTestBatchRunner
                     GameTestBatchRunner.this.testCompleted(debug1);
                 }
             });
-            debug6 = this.northWestCorners.get(debug1);
-            GameTestRunner.runTest(debug1, debug6, this.testTicker);
+            BlockPos debug6 = this.northWestCorners.get(debug1l); // MagmaCube - decompile fix
+            GameTestRunner.runTest(debug1l, debug6, this.testTicker); // MagmaCube - decompile fix
         });
     }
     
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestInfo.java b/src/main/java/net/minecraft/gametest/framework/GameTestInfo.java
index 5a61a984dc31296a3bf081bde2fb60ced8b44305..7857334de39af34e453ec5bf647b3aebd34b67e8 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestInfo.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestInfo.java
@@ -32,8 +32,8 @@ public class GameTestInfo
     private Throwable error;
     
     public GameTestInfo(final TestFunction debug1, final Rotation debug2, final ServerLevel debug3) {
-        this.listeners = (Collection<GameTestListener>)Lists.newArrayList();
-        this.sequences = (Collection<GameTestSequence>)Lists.newCopyOnWriteArrayList();
+        this.listeners = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.sequences = Lists.newCopyOnWriteArrayList(); // MagmaCube - decompile fix
         this.runAtTickTimeMap = (Object2LongMap<Runnable>)new Object2LongOpenHashMap();
         this.started = false;
         this.timer = Stopwatch.createUnstarted();
@@ -144,7 +144,7 @@ public class GameTestInfo
     public void fail(final Throwable debug1) {
         this.finish();
         this.error = debug1;
-        this.listeners.forEach(debug1 -> debug1.testFailed(this));
+        this.listeners.forEach(debug1l -> debug1l.testFailed(this)); // MagmaCube - decompile fix
     }
     
     @Nullable
@@ -166,7 +166,7 @@ public class GameTestInfo
         this.setStructureBlockPos(debug3.getBlockPos());
         debug3.setStructureName(this.getTestName());
         StructureUtils.addCommandBlockAndButtonToStartTest(this.structureBlockPos, new BlockPos(1, 0, -1), this.getRotation(), this.level);
-        this.listeners.forEach(debug1 -> debug1.testStructureLoaded(this));
+        this.listeners.forEach(debug1l -> debug1l.testStructureLoaded(this)); // MagmaCube - decompile fix
     }
     
     public boolean isRequired() {
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
index 2b0e38e00814a0b43043be532f19fa41b9e2c215..6a06eb92b62fa1be3c8d169ce555fb383cf3ea31 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
@@ -85,17 +85,17 @@ public class GameTestRunner {
     }
 
     public static Collection<GameTestBatch> groupTestsIntoBatches(Collection<TestFunction> debug0) {
-        HashMap debug12 = Maps.newHashMap();
+        HashMap<String, Collection<TestFunction>> debug12 = Maps.newHashMap(); // MagmaCube - decompile fix
         debug0.forEach(debug1 -> {
             String debug2 = debug1.getBatchName();
-            Collection debug3 = debug12.computeIfAbsent(debug2, debug0 -> Lists.newArrayList());
+            Collection<TestFunction> debug3 = debug12.computeIfAbsent(debug2, debug02 -> Lists.newArrayList()); // MagmaCube - decompile fix
             debug3.add(debug1);
         });
         return debug12.keySet().stream().flatMap(debug1 -> {
-            Collection debug2 = (Collection)debug12.get(debug1);
+            Collection<TestFunction> debug2 = debug12.get(debug1); // MagmaCube - decompile fix
             Consumer<ServerLevel> debug3 = GameTestRegistry.getBeforeBatchFunction(debug1);
             MutableInt debug42 = new MutableInt();
-            return Streams.stream((Iterable)Iterables.partition((Iterable)debug2, (int)100)).map(debug4 -> new GameTestBatch(debug1 + ":" + debug42.incrementAndGet(), debug2, debug3));
+            return Streams.stream(Iterables.partition(debug2, 100)).map(debug4 -> new GameTestBatch(debug1 + ":" + debug42.incrementAndGet(), debug2, debug3)); // MagmaCube - decompile fix
         }).collect(Collectors.toList());
     }
 
@@ -141,11 +141,11 @@ public class GameTestRunner {
         ItemStack debug3 = new ItemStack(Items.WRITABLE_BOOK);
         ListTag debug4 = new ListTag();
         StringBuffer debug5 = new StringBuffer();
-        Arrays.stream(debug0.split("Â¥Â¥.")).forEach(debug1 -> debug5.append((String)debug1).append('Â¥n'));
+        Arrays.stream(debug0.split("\\.")).forEach(debug1 -> debug5.append((String)debug1).append('\n')); // MagmaCube - decompile fix
         if (!debug12) {
-            debug5.append("(optional)Â¥n");
+            debug5.append("(optional)\n"); // MagmaCube - decompile fix
         }
-        debug5.append("-------------------Â¥n");
+        debug5.append("-------------------\n"); // MagmaCube - decompile fix
         debug4.add(StringTag.valueOf(debug5.toString() + debug2));
         debug3.addTagElement("pages", debug4);
         return debug3;
@@ -168,10 +168,12 @@ public class GameTestRunner {
         BlockPos debug4 = debug12.offset(-debug3, 0, -debug3);
         BlockPos debug5 = debug12.offset(debug3, 0, debug3);
         BlockPos.betweenClosedStream(debug4, debug5).filter(debug1 -> debug0.getBlockState((BlockPos)debug1).is(Blocks.STRUCTURE_BLOCK)).forEach(debug1 -> {
-            StructureBlockEntity debug2 = (StructureBlockEntity)debug0.getBlockEntity((BlockPos)debug1);
-            BlockPos debug3 = debug2.getBlockPos();
-            BoundingBox debug4 = StructureUtils.getStructureBoundingBox(debug2);
-            StructureUtils.clearSpaceForStructure(debug4, debug3.getY(), debug0);
+            // MagmaCube start - decompile fix
+            StructureBlockEntity debug22 = (StructureBlockEntity)debug0.getBlockEntity((BlockPos)debug1);
+            BlockPos debug32 = debug22.getBlockPos();
+            BoundingBox debug42 = StructureUtils.getStructureBoundingBox(debug22);
+            StructureUtils.clearSpaceForStructure(debug42, debug32.getY(), debug0);
+            // MagmaCube end - decompile fix
         });
     }
 }
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestTicker.java b/src/main/java/net/minecraft/gametest/framework/GameTestTicker.java
index c4f81d67a4c188b3c0e577a8cd96d2e281dfb43b..5fdd096a5c3d40d8c3d341f441c52af8917074dc 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestTicker.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestTicker.java
@@ -9,7 +9,7 @@ public class GameTestTicker
     private final Collection<GameTestInfo> testInfos;
     
     public GameTestTicker() {
-        this.testInfos = (Collection<GameTestInfo>)Lists.newCopyOnWriteArrayList();
+        this.testInfos = Lists.newCopyOnWriteArrayList(); // MagmaCube - decompile fix
     }
     
     public void add(final GameTestInfo debug1) {
diff --git a/src/main/java/net/minecraft/gametest/framework/MultipleTestTracker.java b/src/main/java/net/minecraft/gametest/framework/MultipleTestTracker.java
index cbc9ac0109ec9ece9ec0643634cac5a61be39619..240f1bad13c336ca8ad2d37e5237c81708e7e004 100644
--- a/src/main/java/net/minecraft/gametest/framework/MultipleTestTracker.java
+++ b/src/main/java/net/minecraft/gametest/framework/MultipleTestTracker.java
@@ -12,13 +12,13 @@ public class MultipleTestTracker
     private Collection<GameTestListener> listeners;
     
     public MultipleTestTracker() {
-        this.tests = (Collection<GameTestInfo>)Lists.newArrayList();
-        this.listeners = (Collection<GameTestListener>)Lists.newArrayList();
+        this.tests = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.listeners = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     public MultipleTestTracker(final Collection<GameTestInfo> debug1) {
-        this.tests = (Collection<GameTestInfo>)Lists.newArrayList();
-        this.listeners = (Collection<GameTestListener>)Lists.newArrayList();
+        this.tests = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.listeners = Lists.newArrayList(); // MagmaCube - decompile fix
         this.tests.addAll(debug1);
     }
     
@@ -29,10 +29,10 @@ public class MultipleTestTracker
     
     public void addListener(final GameTestListener debug1) {
         this.listeners.add(debug1);
-        this.tests.forEach(debug1 -> debug1.addListener(debug1));
+        this.tests.forEach(debug1l -> debug1l.addListener(debug1)); // MagmaCube - decompile fix
     }
     
-    public void addFailureListener(final Consumer<GameTestInfo> debug1) {
+    public void addFailureListener(final Consumer<GameTestInfo> debug1l) { // MagmaCube - decompile fix
         this.addListener(new GameTestListener() {
             @Override
             public void testStructureLoaded(final GameTestInfo debug1) {
@@ -40,7 +40,7 @@ public class MultipleTestTracker
             
             @Override
             public void testFailed(final GameTestInfo debug1) {
-                debug1.accept(debug1);
+                debug1l.accept(debug1); // MagmaCube - decompile fix
             }
         });
     }
@@ -74,9 +74,8 @@ public class MultipleTestTracker
     }
     
     public String getProgressBar() {
-        final StringBuffer debug2 = new StringBuffer();
-        debug2.append('[');
-        final StringBuffer sb;
+        final StringBuffer sb = new StringBuffer(); // MagmaCube - decompile fix
+        sb.append('[');
         this.tests.forEach(debug1 -> {
             if (!debug1.hasStarted()) {
                 sb.append(' ');
@@ -92,8 +91,8 @@ public class MultipleTestTracker
             }
             return;
         });
-        debug2.append(']');
-        return debug2.toString();
+        sb.append(']'); // MagmaCube - decompile fix
+        return sb.toString(); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/locale/Language.java b/src/main/java/net/minecraft/locale/Language.java
index 004f8751faa75d6a5766be515b31cdac24166986..346b991c5c452d42f10575d6717737e6413bb3b9 100644
--- a/src/main/java/net/minecraft/locale/Language.java
+++ b/src/main/java/net/minecraft/locale/Language.java
@@ -45,11 +45,10 @@ public abstract class Language {
     private static volatile Language instance = Language.loadDefault();
 
     private static Language loadDefault() {
-        InputStream debug2;
         ImmutableMap.Builder debug0 = ImmutableMap.builder();
         BiConsumer<String, String> debug1 = (arg_0, arg_1) -> ((ImmutableMap.Builder)debug0).put(arg_0, arg_1);
         try {
-            debug2 = Language.class.getResourceAsStream("/assets/minecraft/lang/en_us.json");
+            InputStream debug2 = Language.class.getResourceAsStream("/assets/minecraft/lang/en_us.json"); // MagmaCube - decompile fix
             Throwable throwable = null;
             try {
                 Language.loadFromJson(debug2, debug1);
@@ -76,21 +75,16 @@ public abstract class Language {
         catch (JsonParseException | IOException debug22) {
             LOGGER.error("Couldn't read strings from /assets/minecraft/lang/en_us.json", debug22);
         }
-        debug2 = debug0.build();
-        return new Language((Map)((Object)debug2)){
-            final /* synthetic */ Map val$storage;
-            {
-                this.val$storage = map;
-            }
-
+        ImmutableMap debug2 = debug0.build();
+        return new Language() { // MagmaCube - decompile fix
             @Override
             public String getOrDefault(String debug1) {
-                return this.val$storage.getOrDefault(debug1, debug1);
+                return (String) debug2.getOrDefault(debug1, debug1); // MagmaCube - decompile fix
             }
 
             @Override
             public boolean has(String debug1) {
-                return this.val$storage.containsKey(debug1);
+                return debug2.containsKey(debug1); // MagmaCube - decompile fix
             }
 
             @Override
@@ -100,7 +94,7 @@ public abstract class Language {
 
             @Override
             public FormattedCharSequence getVisualOrder(FormattedText debug1) {
-                return debug12 -> debug1.visit((debug1, debug2) -> StringDecomposer.iterateFormatted(debug2, debug1, debug12) ? Optional.empty() : FormattedText.STOP_ITERATION, Style.EMPTY).isPresent();
+                return debug12 -> debug1.visit((debug1l, debug2) -> StringDecomposer.iterateFormatted(debug2, debug1l, debug12) ? Optional.empty() : FormattedText.STOP_ITERATION, Style.EMPTY).isPresent(); // MagmaCube - decompile fix
             }
         };
     }
diff --git a/src/main/java/net/minecraft/nbt/ByteTag.java b/src/main/java/net/minecraft/nbt/ByteTag.java
index 04e53fe6695af725ae11e2d091a4ad20035fe3b9..094a8d9a5dbab9dc5f6a4dc29233a0bf46b79eb9 100644
--- a/src/main/java/net/minecraft/nbt/ByteTag.java
+++ b/src/main/java/net/minecraft/nbt/ByteTag.java
@@ -135,7 +135,7 @@ public class ByteTag extends NumericTag
         static {
             cache = new ByteTag[256];
             for (int debug0 = 0; debug0 < Cache.cache.length; ++debug0) {
-                Cache.cache[debug0] = new ByteTag((byte)(debug0 - 128), null);
+                Cache.cache[debug0] = new ByteTag((byte)(debug0 - 128)); // MagmaCube - decompile fix
             }
         }
     }
diff --git a/src/main/java/net/minecraft/nbt/CompoundTag.java b/src/main/java/net/minecraft/nbt/CompoundTag.java
index ca3d05dd37c136887d8b3c88b9301000a5476406..043de39eee5818fc651ca6883519ac1ece8d332d 100644
--- a/src/main/java/net/minecraft/nbt/CompoundTag.java
+++ b/src/main/java/net/minecraft/nbt/CompoundTag.java
@@ -170,7 +170,7 @@ public class CompoundTag implements Tag
     public byte getByte(final String debug1) {
         try {
             if (this.contains(debug1, 99)) {
-                return this.tags.get(debug1).getAsByte();
+                return ((NumericTag) this.tags.get(debug1)).getAsByte(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException ex) {}
@@ -180,7 +180,7 @@ public class CompoundTag implements Tag
     public short getShort(final String debug1) {
         try {
             if (this.contains(debug1, 99)) {
-                return this.tags.get(debug1).getAsShort();
+                return ((NumericTag) this.tags.get(debug1)).getAsShort(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException ex) {}
@@ -190,7 +190,7 @@ public class CompoundTag implements Tag
     public int getInt(final String debug1) {
         try {
             if (this.contains(debug1, 99)) {
-                return this.tags.get(debug1).getAsInt();
+                return ((NumericTag) this.tags.get(debug1)).getAsInt(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException ex) {}
@@ -200,7 +200,7 @@ public class CompoundTag implements Tag
     public long getLong(final String debug1) {
         try {
             if (this.contains(debug1, 99)) {
-                return this.tags.get(debug1).getAsLong();
+                return ((NumericTag) this.tags.get(debug1)).getAsLong(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException ex) {}
@@ -210,7 +210,7 @@ public class CompoundTag implements Tag
     public float getFloat(final String debug1) {
         try {
             if (this.contains(debug1, 99)) {
-                return this.tags.get(debug1).getAsFloat();
+                return ((NumericTag) this.tags.get(debug1)).getAsFloat(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException ex) {}
@@ -220,7 +220,7 @@ public class CompoundTag implements Tag
     public double getDouble(final String debug1) {
         try {
             if (this.contains(debug1, 99)) {
-                return this.tags.get(debug1).getAsDouble();
+                return ((NumericTag) this.tags.get(debug1)).getAsDouble(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException ex) {}
@@ -240,7 +240,7 @@ public class CompoundTag implements Tag
     public byte[] getByteArray(final String debug1) {
         try {
             if (this.contains(debug1, 7)) {
-                return this.tags.get(debug1).getAsByteArray();
+                return ((ByteArrayTag) this.tags.get(debug1)).getAsByteArray(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException debug2) {
@@ -252,7 +252,7 @@ public class CompoundTag implements Tag
     public int[] getIntArray(final String debug1) {
         try {
             if (this.contains(debug1, 11)) {
-                return this.tags.get(debug1).getAsIntArray();
+                return ((IntArrayTag) this.tags.get(debug1)).getAsIntArray(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException debug2) {
@@ -264,7 +264,7 @@ public class CompoundTag implements Tag
     public long[] getLongArray(final String debug1) {
         try {
             if (this.contains(debug1, 12)) {
-                return this.tags.get(debug1).getAsLongArray();
+                return ((LongArrayTag) this.tags.get(debug1)).getAsLongArray(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException debug2) {
@@ -276,7 +276,7 @@ public class CompoundTag implements Tag
     public CompoundTag getCompound(final String debug1) {
         try {
             if (this.contains(debug1, 10)) {
-                return this.tags.get(debug1);
+                return (CompoundTag) this.tags.get(debug1); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException debug2) {
@@ -288,7 +288,7 @@ public class CompoundTag implements Tag
     public ListTag getList(final String debug1, final int debug2) {
         try {
             if (this.getTagType(debug1) == 9) {
-                final ListTag debug3 = this.tags.get(debug1);
+                final ListTag debug3 = (ListTag) this.tags.get(debug1); // MagmaCube - decompile fix
                 if (debug3.isEmpty() || debug3.getElementType() == debug2) {
                     return debug3;
                 }
@@ -458,16 +458,15 @@ public class CompoundTag implements Tag
     }
     
     static {
-        final Tag debug;
         CODEC = Codec.PASSTHROUGH.comapFlatMap(debug0 -> {
-            debug = (Tag)debug0.convert((DynamicOps)NbtOps.INSTANCE).getValue();
+            Tag debug = debug0.convert(NbtOps.INSTANCE).getValue(); // MagmaCube - decompile fix
             if (debug instanceof CompoundTag) {
-                return DataResult.success((Object)debug);
+                return DataResult.success((CompoundTag) debug); // MagmaCube - decompile fix
             }
             else {
                 return DataResult.error("Not a compound tag: " + debug);
             }
-        }, debug0 -> new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug0));
+        }, debug0 -> new Dynamic(NbtOps.INSTANCE, debug0)); // MagmaCube - decompile fix
         LOGGER = LogManager.getLogger();
         SIMPLE_VALUE = Pattern.compile("[A-Za-z0-9._+-]+");
         TYPE = new TagType<CompoundTag>() {
@@ -477,7 +476,7 @@ public class CompoundTag implements Tag
                 if (debug2 > 512) {
                     throw new RuntimeException("Tried to read NBT tag with too high complexity, depth > 512");
                 }
-                final Map<String, Tag> debug4 = (Map<String, Tag>)Maps.newHashMap();
+                final Map<String, Tag> debug4 = Maps.newHashMap(); // MagmaCube - decompile fix
                 byte debug5;
                 while ((debug5 = readNamedTagType(debug1, debug3)) != 0) {
                     final String debug6 = readNamedTagName(debug1, debug3);
diff --git a/src/main/java/net/minecraft/nbt/IntTag.java b/src/main/java/net/minecraft/nbt/IntTag.java
index e1cbe020f4ab832d3c9985a7f3a2d646e25b431b..1403d45880396de9733989ffe3a269d8c9a84b75 100644
--- a/src/main/java/net/minecraft/nbt/IntTag.java
+++ b/src/main/java/net/minecraft/nbt/IntTag.java
@@ -129,7 +129,7 @@ public class IntTag extends NumericTag
         static {
             cache = new IntTag[1153];
             for (int debug0 = 0; debug0 < Cache.cache.length; ++debug0) {
-                Cache.cache[debug0] = new IntTag(-128 + debug0, null);
+                Cache.cache[debug0] = new IntTag(-128 + debug0); // MagmaCube - decompile fix
             }
         }
     }
diff --git a/src/main/java/net/minecraft/nbt/ListTag.java b/src/main/java/net/minecraft/nbt/ListTag.java
index 5c347a5918b8999eb4288e533bf36a6d47c7082e..aa5b74f5d1ae8789cbf084e4760d43ffbb44d163 100644
--- a/src/main/java/net/minecraft/nbt/ListTag.java
+++ b/src/main/java/net/minecraft/nbt/ListTag.java
@@ -304,11 +304,11 @@ public class ListTag extends CollectionTag<Tag>
                 }
                 debug3.accountBits(32L * debug5);
                 final TagType<?> debug6 = TagTypes.getType(debug4);
-                final List<Tag> debug7 = (List<Tag>)Lists.newArrayListWithCapacity(debug5);
+                final List<Tag> debug7 = Lists.newArrayListWithCapacity(debug5); // MagmaCube - decompile fix
                 for (int debug8 = 0; debug8 < debug5; ++debug8) {
                     debug7.add((Tag)debug6.load(debug1, debug2 + 1, debug3));
                 }
-                return new ListTag(debug7, debug4, null);
+                return new ListTag(debug7, debug4); // MagmaCube - decompile fix
             }
             
             @Override
diff --git a/src/main/java/net/minecraft/nbt/LongTag.java b/src/main/java/net/minecraft/nbt/LongTag.java
index 30e1be9ecb2e45f1670c5a5ce3ee0fc64a09183a..306c05b57df0d2ba3841db850d390f2bbc1e6a02 100644
--- a/src/main/java/net/minecraft/nbt/LongTag.java
+++ b/src/main/java/net/minecraft/nbt/LongTag.java
@@ -130,7 +130,7 @@ public class LongTag extends NumericTag
         static {
             cache = new LongTag[1153];
             for (int debug0 = 0; debug0 < Cache.cache.length; ++debug0) {
-                Cache.cache[debug0] = new LongTag(-128 + debug0, null);
+                Cache.cache[debug0] = new LongTag(-128 + debug0); // MagmaCube - decompile fix
             }
         }
     }
diff --git a/src/main/java/net/minecraft/nbt/NbtOps.java b/src/main/java/net/minecraft/nbt/NbtOps.java
index 525f0405e43573986ac1bbb966576f983df8971f..29669df2a72f052988ba92dd0bb1f87b54ef018e 100644
--- a/src/main/java/net/minecraft/nbt/NbtOps.java
+++ b/src/main/java/net/minecraft/nbt/NbtOps.java
@@ -62,10 +62,10 @@ public class NbtOps implements DynamicOps<Tag>
                 return (U)debug1.createString(debug2.getAsString());
             }
             case 9: {
-                return (U)this.convertList((DynamicOps)debug1, (Object)debug2);
+                return (U)this.convertList((DynamicOps)debug1, debug2); // MagmaCube - decompile fix
             }
             case 10: {
-                return (U)this.convertMap((DynamicOps)debug1, (Object)debug2);
+                return (U)this.convertMap((DynamicOps)debug1, debug2); // MagmaCube - decompile fix
             }
             case 11: {
                 return (U)debug1.createIntList(Arrays.stream(((IntArrayTag)debug2).getAsIntArray()));
@@ -81,9 +81,9 @@ public class NbtOps implements DynamicOps<Tag>
     
     public DataResult<Number> getNumberValue(final Tag debug1) {
         if (debug1 instanceof NumericTag) {
-            return (DataResult<Number>)DataResult.success((Object)((NumericTag)debug1).getAsNumber());
+            return (DataResult<Number>)DataResult.success(((NumericTag)debug1).getAsNumber()); // MagmaCube - decompile fix
         }
-        return (DataResult<Number>)DataResult.error("Not a number");
+        return DataResult.error("Not a number"); // MagmaCube - decompile fix
     }
     
     public Tag createNumeric(final Number debug1) {
@@ -120,9 +120,9 @@ public class NbtOps implements DynamicOps<Tag>
     
     public DataResult<String> getStringValue(final Tag debug1) {
         if (debug1 instanceof StringTag) {
-            return (DataResult<String>)DataResult.success((Object)debug1.getAsString());
+            return (DataResult<String>)DataResult.success(debug1.getAsString()); // MagmaCube - decompile fix
         }
-        return (DataResult<String>)DataResult.error("Not a string");
+        return DataResult.error("Not a string"); // MagmaCube - decompile fix
     }
     
     public Tag createString(final String debug1) {
@@ -149,7 +149,7 @@ public class NbtOps implements DynamicOps<Tag>
     private static <T extends Tag> void fillOne(final CollectionTag<T> debug0, final Tag debug1, final Tag debug2) {
         if (debug1 instanceof CollectionTag) {
             final CollectionTag<?> debug3 = (CollectionTag<?>)debug1;
-            debug3.forEach(debug1 -> debug0.add((T)debug1));
+            debug3.forEach(debug1l -> debug0.add((T)debug1l)); // MagmaCube - decompile fix
         }
         debug0.add((T)debug2);
     }
@@ -157,98 +157,94 @@ public class NbtOps implements DynamicOps<Tag>
     private static <T extends Tag> void fillMany(final CollectionTag<T> debug0, final Tag debug1, final List<Tag> debug2) {
         if (debug1 instanceof CollectionTag) {
             final CollectionTag<?> debug3 = (CollectionTag<?>)debug1;
-            debug3.forEach(debug1 -> debug0.add((T)debug1));
+            debug3.forEach(debug1l -> debug0.add((T)debug1l)); // MagmaCube - decompile fix
         }
-        debug2.forEach(debug1 -> debug0.add((T)debug1));
+        debug2.forEach(debug1l -> debug0.add((T)debug1l)); // MagmaCube - decompile fix
     }
     
     public DataResult<Tag> mergeToList(final Tag debug1, final Tag debug2) {
         if (!(debug1 instanceof CollectionTag) && !(debug1 instanceof EndTag)) {
-            return (DataResult<Tag>)DataResult.error("mergeToList called with not a list: " + debug1, (Object)debug1);
+            return (DataResult<Tag>)DataResult.error("mergeToList called with not a list: " + debug1, debug1); // MagmaCube - decompile fix
         }
         final CollectionTag<?> debug3 = createGenericList((debug1 instanceof CollectionTag) ? ((CollectionTag)debug1).getElementType() : 0, debug2.getId());
         fillOne(debug3, debug1, debug2);
-        return (DataResult<Tag>)DataResult.success((Object)debug3);
+        return DataResult.success(debug3); // MagmaCube - decompile fix
     }
     
     public DataResult<Tag> mergeToList(final Tag debug1, final List<Tag> debug2) {
         if (!(debug1 instanceof CollectionTag) && !(debug1 instanceof EndTag)) {
-            return (DataResult<Tag>)DataResult.error("mergeToList called with not a list: " + debug1, (Object)debug1);
+            return (DataResult<Tag>)DataResult.error("mergeToList called with not a list: " + debug1, debug1); // MagmaCube - decompile fix
         }
-        final CollectionTag<?> debug3 = createGenericList((debug1 instanceof CollectionTag) ? ((CollectionTag)debug1).getElementType() : 0, debug2.stream().findFirst().map((Function<? super Object, ? extends Byte>)Tag::getId).orElse((byte)0));
+        final CollectionTag<?> debug3 = createGenericList((debug1 instanceof CollectionTag) ? ((CollectionTag)debug1).getElementType() : 0, debug2.stream().findFirst().map(Tag::getId).orElse((byte)0));
         fillMany(debug3, debug1, debug2);
-        return (DataResult<Tag>)DataResult.success((Object)debug3);
+        return DataResult.success(debug3); // MagmaCube - decompile fix
     }
     
     public DataResult<Tag> mergeToMap(final Tag debug1, final Tag debug2, final Tag debug3) {
         if (!(debug1 instanceof CompoundTag) && !(debug1 instanceof EndTag)) {
-            return (DataResult<Tag>)DataResult.error("mergeToMap called with not a map: " + debug1, (Object)debug1);
+            return (DataResult<Tag>)DataResult.error("mergeToMap called with not a map: " + debug1, debug1);
         }
         if (!(debug2 instanceof StringTag)) {
-            return (DataResult<Tag>)DataResult.error("key is not a string: " + debug2, (Object)debug1);
+            return (DataResult<Tag>)DataResult.error("key is not a string: " + debug2, debug1);
         }
         final CompoundTag debug4 = new CompoundTag();
         if (debug1 instanceof CompoundTag) {
             final CompoundTag debug5 = (CompoundTag)debug1;
-            debug5.getAllKeys().forEach(debug2 -> debug4.put(debug2, debug5.get(debug2)));
+            debug5.getAllKeys().forEach(debug2l -> debug4.put(debug2l, debug5.get(debug2l))); // MagmaCube - decompile fix
         }
         debug4.put(debug2.getAsString(), debug3);
-        return (DataResult<Tag>)DataResult.success((Object)debug4);
+        return DataResult.success(debug4); // MagmaCube - decompile fix
     }
     
     public DataResult<Tag> mergeToMap(final Tag debug1, final MapLike<Tag> debug2) {
         if (!(debug1 instanceof CompoundTag) && !(debug1 instanceof EndTag)) {
-            return (DataResult<Tag>)DataResult.error("mergeToMap called with not a map: " + debug1, (Object)debug1);
+            return (DataResult<Tag>)DataResult.error("mergeToMap called with not a map: " + debug1, debug1); // MagmaCube - decompile fix
         }
         final CompoundTag debug3 = new CompoundTag();
         if (debug1 instanceof CompoundTag) {
             final CompoundTag debug4 = (CompoundTag)debug1;
-            debug4.getAllKeys().forEach(debug2 -> debug3.put(debug2, debug4.get(debug2)));
-        }
-        final List<Tag> debug5 = (List<Tag>)Lists.newArrayList();
-        final Tag debug6;
-        final List<Tag> list;
-        final CompoundTag compoundTag;
-        debug2.entries().forEach(debug2 -> {
-            debug6 = (Tag)debug2.getFirst();
+            debug4.getAllKeys().forEach(debug2l -> debug3.put(debug2l, debug4.get(debug2l))); // MagmaCube - decompile fix
+        }
+        final List<Tag> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
+        debug2.entries().forEach(debug2l -> { // MagmaCube - decompile fix
+            Tag debug6 = (Tag)debug2l.getFirst(); // MagmaCube - decompile fix
             if (!(debug6 instanceof StringTag)) {
-                list.add(debug6);
+                debug5.add(debug6); // MagmaCube - decompile fix
                 return;
             }
             else {
-                compoundTag.put(debug6.getAsString(), (Tag)debug2.getSecond());
+                debug3.put(debug6.getAsString(), (Tag)debug2l.getSecond()); // MagmaCube - decompile fix
                 return;
             }
         });
         if (!debug5.isEmpty()) {
-            return (DataResult<Tag>)DataResult.error("some keys are not strings: " + debug5, (Object)debug3);
+            return DataResult.error("some keys are not strings: " + debug5, debug3); // MagmaCube - decompile fix
         }
-        return (DataResult<Tag>)DataResult.success((Object)debug3);
+        return DataResult.success(debug3); // MagmaCube - decompile fix
     }
     
     public DataResult<Stream<Pair<Tag, Tag>>> getMapValues(final Tag debug1) {
         if (!(debug1 instanceof CompoundTag)) {
-            return (DataResult<Stream<Pair<Tag, Tag>>>)DataResult.error("Not a map: " + debug1);
+            return DataResult.error("Not a map: " + debug1); // MagmaCube - decompile fix
         }
         final CompoundTag debug3 = (CompoundTag)debug1;
-        return (DataResult<Stream<Pair<Tag, Tag>>>)DataResult.success((Object)debug3.getAllKeys().stream().map(debug2 -> Pair.of((Object)this.createString(debug2), (Object)debug3.get(debug2))));
+        return DataResult.success(debug3.getAllKeys().stream().map(debug2 -> Pair.of(this.createString(debug2), debug3.get(debug2)))); // MagmaCube - decompile fix
     }
     
     public DataResult<Consumer<BiConsumer<Tag, Tag>>> getMapEntries(final Tag debug1) {
         if (!(debug1 instanceof CompoundTag)) {
-            return (DataResult<Consumer<BiConsumer<Tag, Tag>>>)DataResult.error("Not a map: " + debug1);
+            return DataResult.error("Not a map: " + debug1); // MagmaCube - decompile fix
         }
         final CompoundTag debug4 = (CompoundTag)debug1;
-        final CompoundTag compoundTag;
-        return (DataResult<Consumer<BiConsumer<Tag, Tag>>>)DataResult.success(debug2 -> compoundTag.getAllKeys().forEach(debug3 -> debug2.accept(this.createString(debug3), compoundTag.get(debug3))));
+        return DataResult.success(debug2l -> debug4.getAllKeys().forEach(debug3 -> debug2l.accept(this.createString(debug3), debug4.get(debug3)))); // MagmaCube - decompile fix
     }
     
     public DataResult<MapLike<Tag>> getMap(final Tag debug1) {
         if (!(debug1 instanceof CompoundTag)) {
-            return (DataResult<MapLike<Tag>>)DataResult.error("Not a map: " + debug1);
+            return DataResult.error("Not a map: " + debug1); // MagmaCube - decompile fix
         }
         final CompoundTag debug2 = (CompoundTag)debug1;
-        return (DataResult<MapLike<Tag>>)DataResult.success((Object)new MapLike<Tag>() {
+        return DataResult.success(new MapLike<Tag>() { // MagmaCube - decompile fix
             @Nullable
             public Tag get(final Tag debug1) {
                 return debug2.get(debug1.getAsString());
@@ -260,7 +256,7 @@ public class NbtOps implements DynamicOps<Tag>
             }
             
             public Stream<Pair<Tag, Tag>> entries() {
-                return debug2.getAllKeys().stream().map(debug2 -> Pair.of((Object)NbtOps.this.createString(debug2), (Object)debug2.get(debug2)));
+                return debug2.getAllKeys().stream().map(debug2l -> Pair.of(NbtOps.this.createString(debug2l), debug2.get(debug2l))); // MagmaCube - decompile fix
             }
             
             @Override
@@ -272,30 +268,30 @@ public class NbtOps implements DynamicOps<Tag>
     
     public Tag createMap(final Stream<Pair<Tag, Tag>> debug1) {
         final CompoundTag debug2 = new CompoundTag();
-        debug1.forEach(debug1 -> debug2.put(((Tag)debug1.getFirst()).getAsString(), (Tag)debug1.getSecond()));
+        debug1.forEach(debug1l -> debug2.put(((Tag)debug1l.getFirst()).getAsString(), (Tag)debug1l.getSecond())); // MagmaCube - decompile fix
         return debug2;
     }
     
     public DataResult<Stream<Tag>> getStream(final Tag debug1) {
         if (debug1 instanceof CollectionTag) {
-            return (DataResult<Stream<Tag>>)DataResult.success((Object)((CollectionTag)debug1).stream().map(debug0 -> debug0));
+            return DataResult.success(((CollectionTag)debug1).stream().map(debug0 -> debug0)); // MagmaCube - decompile fix
         }
-        return (DataResult<Stream<Tag>>)DataResult.error("Not a list");
+        return DataResult.error("Not a list"); // MagmaCube - decompile fix
     }
     
     public DataResult<Consumer<Consumer<Tag>>> getList(final Tag debug1) {
         if (debug1 instanceof CollectionTag) {
             final CollectionTag<?> debug2 = (CollectionTag<?>)debug1;
-            return (DataResult<Consumer<Consumer<Tag>>>)DataResult.success((Object)debug2::forEach);
+            return DataResult.success(debug2::forEach); // MagmaCube - decompile fix
         }
-        return (DataResult<Consumer<Consumer<Tag>>>)DataResult.error("Not a list: " + debug1);
+        return DataResult.error("Not a list: " + debug1); // MagmaCube - decompile fix
     }
     
     public DataResult<ByteBuffer> getByteBuffer(final Tag debug1) {
         if (debug1 instanceof ByteArrayTag) {
-            return (DataResult<ByteBuffer>)DataResult.success((Object)ByteBuffer.wrap(((ByteArrayTag)debug1).getAsByteArray()));
+            return DataResult.success(ByteBuffer.wrap(((ByteArrayTag)debug1).getAsByteArray())); // MagmaCube - decompile fix
         }
-        return (DataResult<ByteBuffer>)super.getByteBuffer((Object)debug1);
+        return (DataResult<ByteBuffer>) DynamicOps.super.getByteBuffer(debug1); // MagmaCube - decompile fix
     }
     
     public Tag createByteList(final ByteBuffer debug1) {
@@ -304,9 +300,9 @@ public class NbtOps implements DynamicOps<Tag>
     
     public DataResult<IntStream> getIntStream(final Tag debug1) {
         if (debug1 instanceof IntArrayTag) {
-            return (DataResult<IntStream>)DataResult.success((Object)Arrays.stream(((IntArrayTag)debug1).getAsIntArray()));
+            return (DataResult<IntStream>)DataResult.success(Arrays.stream(((IntArrayTag)debug1).getAsIntArray())); // MagmaCube - decompile fix
         }
-        return (DataResult<IntStream>)super.getIntStream((Object)debug1);
+        return (DataResult<IntStream>) DynamicOps.super.getIntStream(debug1); // MagmaCube - decompile fix
     }
     
     public Tag createIntList(final IntStream debug1) {
@@ -315,9 +311,9 @@ public class NbtOps implements DynamicOps<Tag>
     
     public DataResult<LongStream> getLongStream(final Tag debug1) {
         if (debug1 instanceof LongArrayTag) {
-            return (DataResult<LongStream>)DataResult.success((Object)Arrays.stream(((LongArrayTag)debug1).getAsLongArray()));
+            return (DataResult<LongStream>)DataResult.success(Arrays.stream(((LongArrayTag)debug1).getAsLongArray())); // MagmaCube - decompile fix
         }
-        return (DataResult<LongStream>)super.getLongStream((Object)debug1);
+        return (DataResult<LongStream>) DynamicOps.super.getLongStream(debug1); // MagmaCube - decompile fix
     }
     
     public Tag createLongList(final LongStream debug1) {
@@ -357,7 +353,7 @@ public class NbtOps implements DynamicOps<Tag>
         if (debug1 instanceof CompoundTag) {
             final CompoundTag debug3 = (CompoundTag)debug1;
             final CompoundTag debug4 = new CompoundTag();
-            debug3.getAllKeys().stream().filter(debug1 -> !Objects.equals(debug1, debug2)).forEach(debug2 -> debug4.put(debug2, debug3.get(debug2)));
+            debug3.getAllKeys().stream().filter(debug1l -> !Objects.equals(debug1l, debug2)).forEach(debug2l -> debug4.put(debug2l, debug3.get(debug2l))); // MagmaCube - decompile fix
             return debug4;
         }
         return debug1;
@@ -393,16 +389,16 @@ public class NbtOps implements DynamicOps<Tag>
         
         protected DataResult<Tag> build(final CompoundTag debug1, final Tag debug2) {
             if (debug2 == null || debug2 == EndTag.INSTANCE) {
-                return (DataResult<Tag>)DataResult.success((Object)debug1);
+                return DataResult.success(debug1); // MagmaCube - decompile fix
             }
             if (debug2 instanceof CompoundTag) {
                 final CompoundTag debug3 = new CompoundTag(Maps.newHashMap((Map)((CompoundTag)debug2).entries()));
                 for (final Map.Entry<String, Tag> debug4 : debug1.entries().entrySet()) {
                     debug3.put(debug4.getKey(), debug4.getValue());
                 }
-                return (DataResult<Tag>)DataResult.success((Object)debug3);
+                return DataResult.success(debug3); // MagmaCube - decompile fix
             }
-            return (DataResult<Tag>)DataResult.error("mergeToMap called with not a map: " + debug2, (Object)debug2);
+            return (DataResult<Tag>)DataResult.error("mergeToMap called with not a map: " + debug2, debug2);
         }
     }
 }
diff --git a/src/main/java/net/minecraft/nbt/NbtUtils.java b/src/main/java/net/minecraft/nbt/NbtUtils.java
index 203b1626157eb68516d36d7dc480b87f026bbae7..71d737d1439ee253fe764884db36da82624d8d3d 100644
--- a/src/main/java/net/minecraft/nbt/NbtUtils.java
+++ b/src/main/java/net/minecraft/nbt/NbtUtils.java
@@ -53,10 +53,10 @@ public final class NbtUtils
                         final CompoundTag debug8 = debug6.getCompound(debug7);
                         final String debug9 = debug8.getString("Value");
                         if (debug8.contains("Signature", 8)) {
-                            debug3.getProperties().put((Object)debug5, (Object)new Property(debug5, debug9, debug8.getString("Signature")));
+                            debug3.getProperties().put(debug5, new Property(debug5, debug9, debug8.getString("Signature"))); // MagmaCube - decompile fix
                         }
                         else {
-                            debug3.getProperties().put((Object)debug5, (Object)new Property(debug5, debug9));
+                            debug3.getProperties().put(debug5, new Property(debug5, debug9)); // MagmaCube - decompile fix
                         }
                     }
                 }
@@ -79,13 +79,13 @@ public final class NbtUtils
             final CompoundTag debug2 = new CompoundTag();
             for (final String debug3 : debug1.getProperties().keySet()) {
                 final ListTag debug4 = new ListTag();
-                for (final Property debug5 : debug1.getProperties().get((Object)debug3)) {
+                for (final Property debug5 : debug1.getProperties().get(debug3)) { // MagmaCube - decompile fix
                     final CompoundTag debug6 = new CompoundTag();
                     debug6.putString("Value", debug5.getValue());
                     if (debug5.hasSignature()) {
                         debug6.putString("Signature", debug5.getSignature());
                     }
-                    ((AbstractList<CompoundTag>)debug4).add(debug6);
+                    debug4.add(debug6);
                 }
                 debug2.put(debug3, debug4);
             }
@@ -192,9 +192,9 @@ public final class NbtUtils
     private static <S extends StateHolder<?, S>, T extends Comparable<T>> S setValueHelper(final S debug0, final net.minecraft.world.level.block.state.properties.Property<T> debug1, final String debug2, final CompoundTag debug3, final CompoundTag debug4) {
         final Optional<T> debug5 = debug1.getValue(debug3.getString(debug2));
         if (debug5.isPresent()) {
-            return ((StateHolder<O, S>)debug0).setValue(debug1, debug5.get());
+            return (debug0).setValue(debug1, debug5.get()); // MagmaCube - decompile fix
         }
-        NbtUtils.LOGGER.warn("Unable to read property: {} with value: {} for blockstate: {}", (Object)debug2, (Object)debug3.getString(debug2), (Object)debug4.toString());
+        NbtUtils.LOGGER.warn("Unable to read property: {} with value: {} for blockstate: {}", debug2, debug3.getString(debug2), debug4.toString()); // MagmaCube - decompile fix
         return debug0;
     }
     
@@ -222,7 +222,7 @@ public final class NbtUtils
     }
     
     public static CompoundTag update(final DataFixer debug0, final DataFixTypes debug1, final CompoundTag debug2, final int debug3, final int debug4) {
-        return (CompoundTag)debug0.update(debug1.getType(), new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug2), debug3, debug4).getValue();
+        return (CompoundTag)debug0.update(debug1.getType(), new Dynamic((DynamicOps)NbtOps.INSTANCE, debug2), debug3, debug4).getValue(); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/nbt/ShortTag.java b/src/main/java/net/minecraft/nbt/ShortTag.java
index f4f275c21916e04337d3fcba3ceee781d49398b5..652a91ffe648b0b03edbaf2a883abed2e0ceca76 100644
--- a/src/main/java/net/minecraft/nbt/ShortTag.java
+++ b/src/main/java/net/minecraft/nbt/ShortTag.java
@@ -130,7 +130,7 @@ public class ShortTag extends NumericTag
         static {
             cache = new ShortTag[1153];
             for (int debug0 = 0; debug0 < Cache.cache.length; ++debug0) {
-                Cache.cache[debug0] = new ShortTag((short)(-128 + debug0), null);
+                Cache.cache[debug0] = new ShortTag((short)(-128 + debug0)); // MagmaCube - decompile fix
             }
         }
     }
diff --git a/src/main/java/net/minecraft/nbt/StringTag.java b/src/main/java/net/minecraft/nbt/StringTag.java
index b3b4c342f77d713f3b1f4f035878eb5701643611..f4008bf116146361b429eafc85f791856ee57ba2 100644
--- a/src/main/java/net/minecraft/nbt/StringTag.java
+++ b/src/main/java/net/minecraft/nbt/StringTag.java
@@ -78,24 +78,26 @@ public class StringTag implements Tag
     
     public static String quoteAndEscape(final String debug0) {
         final StringBuilder debug = new StringBuilder(" ");
-        char debug2 = 'Â¥0';
+        // MagmaCube start - decompile fix
+        char debug2 = '\0';
         for (int debug3 = 0; debug3 < debug0.length(); ++debug3) {
             final char debug4 = debug0.charAt(debug3);
-            if (debug4 == 'Â¥Â¥') {
-                debug.append('Â¥Â¥');
+            if (debug4 == '\\') {
+                debug.append('\\');
             }
-            else if (debug4 == 'Â¥"' || debug4 == 'Â¥'') {
-                if (debug2 == 'Â¥0') {
-                    debug2 = ((debug4 == 'Â¥"') ? 'Â¥'' : 'Â¥"');
+            else if (debug4 == '\"' || debug4 == '\'') {
+                if (debug2 == '\0') {
+                    debug2 = ((debug4 == '\"') ? '\'' : '\"');
                 }
                 if (debug2 == debug4) {
-                    debug.append('Â¥Â¥');
+                    debug.append('\\');
                 }
             }
             debug.append(debug4);
         }
-        if (debug2 == 'Â¥0') {
-            debug2 = 'Â¥"';
+        if (debug2 == '\0') {
+            debug2 = '\"';
+            // MagmaCube end - decompile fix
         }
         debug.setCharAt(0, debug2);
         debug.append(debug2);
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 74f95132282c8d4d4fd4858038c915631e2853dd..23405dd74699e4b00a8989619c3687c1b6c5353a 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -75,7 +75,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>>
     private boolean handlingFault;
     
     public Connection(final PacketFlow debug1) {
-        this.queue = (Queue<PacketHolder>)Queues.newConcurrentLinkedQueue();
+        this.queue = Queues.newConcurrentLinkedQueue(); // MagmaCube - decompile fix
         this.receiving = debug1;
     }
     
@@ -119,7 +119,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>>
             final Component debug4 = new TranslatableComponent("disconnect.genericReason", new Object[] { "Internal Exception: " + debug2 });
             if (debug3) {
                 Connection.LOGGER.debug("Failed to sent packet", debug2);
-                this.send(new ClientboundDisconnectPacket(debug4), (GenericFutureListener<? extends Future<? super Void>>)(debug2 -> this.disconnect(debug4)));
+                this.send(new ClientboundDisconnectPacket(debug4), (GenericFutureListener<? extends Future<? super Void>>)(debug2l -> this.disconnect(debug4))); // MagmaCube - decompile fix
                 this.setReadOnly();
             }
             else {
@@ -181,13 +181,11 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>>
             debug5.addListener((GenericFutureListener)ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
         }
         else {
-            final ConnectionProtocol protocol;
-            final ChannelFuture debug6;
             this.channel.eventLoop().execute(() -> {
-                if (protocol != debug4) {
-                    this.setProtocol(protocol);
+                if (debug3 != debug4) { // MagmaCube - decompile fix
+                    this.setProtocol(debug3); // MagmaCube - decompile fix
                 }
-                debug6 = this.channel.writeAndFlush((Object)debug1);
+                ChannelFuture debug6 = this.channel.writeAndFlush((Object)debug1); // MagmaCube - decompile fix
                 if (debug2 != null) {
                     debug6.addListener((GenericFutureListener)debug2);
                 }
@@ -261,7 +259,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>>
         ((Bootstrap)((Bootstrap)((Bootstrap)new Bootstrap().group((EventLoopGroup)debug5.get())).handler((ChannelHandler)new ChannelInitializer<Channel>() {
             protected void initChannel(final Channel debug1) throws Exception {
                 try {
-                    debug1.config().setOption(ChannelOption.TCP_NODELAY, (Object)true);
+                    debug1.config().setOption(ChannelOption.TCP_NODELAY, true); // MagmaCube - decompile fix
                 }
                 catch (ChannelException ex) {}
                 debug1.pipeline().addLast("timeout", (ChannelHandler)new ReadTimeoutHandler(30)).addLast("splitter", (ChannelHandler)new Varint21FrameDecoder()).addLast("decoder", (ChannelHandler)new PacketDecoder(PacketFlow.CLIENTBOUND)).addLast("prepender", (ChannelHandler)new Varint21LengthFieldPrepender()).addLast("encoder", (ChannelHandler)new PacketEncoder(PacketFlow.SERVERBOUND)).addLast("packet_handler", (ChannelHandler)debug3);
@@ -369,18 +367,15 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>>
         ATTRIBUTE_PROTOCOL = AttributeKey.valueOf("protocol");
         final NioEventLoopGroup nioEventLoopGroup;
         NETWORK_WORKER_GROUP = new LazyLoadedValue<NioEventLoopGroup>(() -> {
-            new NioEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Client IO #%d").setDaemon(true).build());
-            return nioEventLoopGroup;
+            return new NioEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Client IO #%d").setDaemon(true).build()); // MagmaCube - decompile fix
         });
         final EpollEventLoopGroup epollEventLoopGroup;
         NETWORK_EPOLL_WORKER_GROUP = new LazyLoadedValue<EpollEventLoopGroup>(() -> {
-            new EpollEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).build());
-            return epollEventLoopGroup;
+            return new EpollEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).build()); // MagmaCube - decompile fix
         });
         final DefaultEventLoopGroup defaultEventLoopGroup;
         LOCAL_WORKER_GROUP = new LazyLoadedValue<DefaultEventLoopGroup>(() -> {
-            new DefaultEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Local Client IO #%d").setDaemon(true).build());
-            return defaultEventLoopGroup;
+            return new DefaultEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Local Client IO #%d").setDaemon(true).build()); // MagmaCube - decompile fix
         });
     }
     
diff --git a/src/main/java/net/minecraft/network/ConnectionProtocol.java b/src/main/java/net/minecraft/network/ConnectionProtocol.java
index eceaf349fa166fa10589c39a43134e4d0d1b7ad6..80d9d706df80d3cff605ae8b0e2b6afa4f56d25e 100644
--- a/src/main/java/net/minecraft/network/ConnectionProtocol.java
+++ b/src/main/java/net/minecraft/network/ConnectionProtocol.java
@@ -25,160 +25,18 @@ import net.minecraft.Util;
 import net.minecraft.network.PacketListener;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
-import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
-import net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket;
-import net.minecraft.network.protocol.game.ClientboundAddMobPacket;
-import net.minecraft.network.protocol.game.ClientboundAddPaintingPacket;
-import net.minecraft.network.protocol.game.ClientboundAddPlayerPacket;
-import net.minecraft.network.protocol.game.ClientboundAnimatePacket;
-import net.minecraft.network.protocol.game.ClientboundAwardStatsPacket;
-import net.minecraft.network.protocol.game.ClientboundBlockBreakAckPacket;
-import net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket;
-import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
-import net.minecraft.network.protocol.game.ClientboundBlockEventPacket;
-import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundBossEventPacket;
-import net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket;
-import net.minecraft.network.protocol.game.ClientboundChatPacket;
-import net.minecraft.network.protocol.game.ClientboundCommandSuggestionsPacket;
-import net.minecraft.network.protocol.game.ClientboundCommandsPacket;
-import net.minecraft.network.protocol.game.ClientboundContainerAckPacket;
-import net.minecraft.network.protocol.game.ClientboundContainerClosePacket;
-import net.minecraft.network.protocol.game.ClientboundContainerSetContentPacket;
-import net.minecraft.network.protocol.game.ClientboundContainerSetDataPacket;
-import net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket;
-import net.minecraft.network.protocol.game.ClientboundCooldownPacket;
-import net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket;
-import net.minecraft.network.protocol.game.ClientboundCustomSoundPacket;
-import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
-import net.minecraft.network.protocol.game.ClientboundEntityEventPacket;
-import net.minecraft.network.protocol.game.ClientboundExplodePacket;
-import net.minecraft.network.protocol.game.ClientboundForgetLevelChunkPacket;
-import net.minecraft.network.protocol.game.ClientboundGameEventPacket;
-import net.minecraft.network.protocol.game.ClientboundHorseScreenOpenPacket;
-import net.minecraft.network.protocol.game.ClientboundKeepAlivePacket;
-import net.minecraft.network.protocol.game.ClientboundLevelChunkPacket;
-import net.minecraft.network.protocol.game.ClientboundLevelEventPacket;
-import net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket;
-import net.minecraft.network.protocol.game.ClientboundLightUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundLoginPacket;
-import net.minecraft.network.protocol.game.ClientboundMapItemDataPacket;
-import net.minecraft.network.protocol.game.ClientboundMerchantOffersPacket;
-import net.minecraft.network.protocol.game.ClientboundMoveEntityPacket;
-import net.minecraft.network.protocol.game.ClientboundMoveVehiclePacket;
-import net.minecraft.network.protocol.game.ClientboundOpenBookPacket;
-import net.minecraft.network.protocol.game.ClientboundOpenScreenPacket;
-import net.minecraft.network.protocol.game.ClientboundOpenSignEditorPacket;
-import net.minecraft.network.protocol.game.ClientboundPlaceGhostRecipePacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerLookAtPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket;
-import net.minecraft.network.protocol.game.ClientboundRecipePacket;
-import net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket;
-import net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket;
-import net.minecraft.network.protocol.game.ClientboundResourcePackPacket;
-import net.minecraft.network.protocol.game.ClientboundRespawnPacket;
-import net.minecraft.network.protocol.game.ClientboundRotateHeadPacket;
-import net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundSelectAdvancementsTabPacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderPacket;
-import net.minecraft.network.protocol.game.ClientboundSetCameraPacket;
-import net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket;
-import net.minecraft.network.protocol.game.ClientboundSetChunkCacheCenterPacket;
-import net.minecraft.network.protocol.game.ClientboundSetChunkCacheRadiusPacket;
-import net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket;
-import net.minecraft.network.protocol.game.ClientboundSetDisplayObjectivePacket;
-import net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket;
-import net.minecraft.network.protocol.game.ClientboundSetExperiencePacket;
-import net.minecraft.network.protocol.game.ClientboundSetHealthPacket;
-import net.minecraft.network.protocol.game.ClientboundSetObjectivePacket;
-import net.minecraft.network.protocol.game.ClientboundSetPassengersPacket;
-import net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket;
-import net.minecraft.network.protocol.game.ClientboundSetScorePacket;
-import net.minecraft.network.protocol.game.ClientboundSetTimePacket;
-import net.minecraft.network.protocol.game.ClientboundSetTitlesPacket;
-import net.minecraft.network.protocol.game.ClientboundSoundEntityPacket;
-import net.minecraft.network.protocol.game.ClientboundSoundPacket;
-import net.minecraft.network.protocol.game.ClientboundStopSoundPacket;
-import net.minecraft.network.protocol.game.ClientboundTabListPacket;
-import net.minecraft.network.protocol.game.ClientboundTagQueryPacket;
-import net.minecraft.network.protocol.game.ClientboundTakeItemEntityPacket;
-import net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateAdvancementsPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket;
-import net.minecraft.network.protocol.game.ServerboundAcceptTeleportationPacket;
-import net.minecraft.network.protocol.game.ServerboundBlockEntityTagQuery;
-import net.minecraft.network.protocol.game.ServerboundChangeDifficultyPacket;
-import net.minecraft.network.protocol.game.ServerboundChatPacket;
-import net.minecraft.network.protocol.game.ServerboundClientCommandPacket;
-import net.minecraft.network.protocol.game.ServerboundClientInformationPacket;
-import net.minecraft.network.protocol.game.ServerboundCommandSuggestionPacket;
-import net.minecraft.network.protocol.game.ServerboundContainerAckPacket;
-import net.minecraft.network.protocol.game.ServerboundContainerButtonClickPacket;
-import net.minecraft.network.protocol.game.ServerboundContainerClickPacket;
-import net.minecraft.network.protocol.game.ServerboundContainerClosePacket;
-import net.minecraft.network.protocol.game.ServerboundCustomPayloadPacket;
-import net.minecraft.network.protocol.game.ServerboundEditBookPacket;
-import net.minecraft.network.protocol.game.ServerboundEntityTagQuery;
-import net.minecraft.network.protocol.game.ServerboundInteractPacket;
-import net.minecraft.network.protocol.game.ServerboundJigsawGeneratePacket;
-import net.minecraft.network.protocol.game.ServerboundKeepAlivePacket;
-import net.minecraft.network.protocol.game.ServerboundLockDifficultyPacket;
-import net.minecraft.network.protocol.game.ServerboundMovePlayerPacket;
-import net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket;
-import net.minecraft.network.protocol.game.ServerboundPaddleBoatPacket;
-import net.minecraft.network.protocol.game.ServerboundPickItemPacket;
-import net.minecraft.network.protocol.game.ServerboundPlaceRecipePacket;
-import net.minecraft.network.protocol.game.ServerboundPlayerAbilitiesPacket;
-import net.minecraft.network.protocol.game.ServerboundPlayerActionPacket;
-import net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket;
-import net.minecraft.network.protocol.game.ServerboundPlayerInputPacket;
-import net.minecraft.network.protocol.game.ServerboundRecipeBookChangeSettingsPacket;
-import net.minecraft.network.protocol.game.ServerboundRecipeBookSeenRecipePacket;
-import net.minecraft.network.protocol.game.ServerboundRenameItemPacket;
-import net.minecraft.network.protocol.game.ServerboundResourcePackPacket;
-import net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket;
-import net.minecraft.network.protocol.game.ServerboundSelectTradePacket;
-import net.minecraft.network.protocol.game.ServerboundSetBeaconPacket;
-import net.minecraft.network.protocol.game.ServerboundSetCarriedItemPacket;
-import net.minecraft.network.protocol.game.ServerboundSetCommandBlockPacket;
-import net.minecraft.network.protocol.game.ServerboundSetCommandMinecartPacket;
-import net.minecraft.network.protocol.game.ServerboundSetCreativeModeSlotPacket;
-import net.minecraft.network.protocol.game.ServerboundSetJigsawBlockPacket;
-import net.minecraft.network.protocol.game.ServerboundSetStructureBlockPacket;
-import net.minecraft.network.protocol.game.ServerboundSignUpdatePacket;
-import net.minecraft.network.protocol.game.ServerboundSwingPacket;
-import net.minecraft.network.protocol.game.ServerboundTeleportToEntityPacket;
-import net.minecraft.network.protocol.game.ServerboundUseItemOnPacket;
-import net.minecraft.network.protocol.game.ServerboundUseItemPacket;
+import net.minecraft.network.protocol.game.*;
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
-import net.minecraft.network.protocol.login.ClientboundCustomQueryPacket;
-import net.minecraft.network.protocol.login.ClientboundGameProfilePacket;
-import net.minecraft.network.protocol.login.ClientboundHelloPacket;
-import net.minecraft.network.protocol.login.ClientboundLoginCompressionPacket;
-import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
-import net.minecraft.network.protocol.login.ServerboundCustomQueryPacket;
-import net.minecraft.network.protocol.login.ServerboundHelloPacket;
-import net.minecraft.network.protocol.login.ServerboundKeyPacket;
-import net.minecraft.network.protocol.status.ClientboundPongResponsePacket;
-import net.minecraft.network.protocol.status.ClientboundStatusResponsePacket;
-import net.minecraft.network.protocol.status.ServerboundPingRequestPacket;
-import net.minecraft.network.protocol.status.ServerboundStatusRequestPacket;
+import net.minecraft.network.protocol.handshake.ServerHandshakePacketListener;
+import net.minecraft.network.protocol.login.*;
+import net.minecraft.network.protocol.status.*;
 import org.apache.logging.log4j.LogManager;
 
 public enum ConnectionProtocol {
-    HANDSHAKING(-1, ConnectionProtocol.protocol().addFlow(PacketFlow.SERVERBOUND, new PacketSet<T>().addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
-    PLAY(0, ConnectionProtocol.protocol().addFlow(PacketFlow.CLIENTBOUND, new PacketSet<T>().addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddMobPacket.class, ClientboundAddMobPacket::new).addPacket(ClientboundAddPaintingPacket.class, ClientboundAddPaintingPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockBreakAckPacket.class, ClientboundBlockBreakAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPacket.class, ClientboundChatPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerAckPacket.class, ClientboundContainerAckPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkPacket.class, ClientboundLevelChunkPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::new).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::new).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::new).addPacket(ClientboundMoveEntityPacket.class, ClientboundMoveEntityPacket::new).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerCombatPacket.class, ClientboundPlayerCombatPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundSetBorderPacket.class, ClientboundSetBorderPacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitlesPacket.class, ClientboundSetTitlesPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, new PacketSet<T>().addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerAckPacket.class, ServerboundContainerAckPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::new).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::new).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::new).addPacket(ServerboundMovePlayerPacket.class, ServerboundMovePlayerPacket::new).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
-    STATUS(1, ConnectionProtocol.protocol().addFlow(PacketFlow.SERVERBOUND, new PacketSet<T>().addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, new PacketSet<T>().addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
-    LOGIN(2, ConnectionProtocol.protocol().addFlow(PacketFlow.CLIENTBOUND, new PacketSet<T>().addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, new PacketSet<T>().addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
+    HANDSHAKING(-1, ConnectionProtocol.protocol().addFlow(PacketFlow.SERVERBOUND, new PacketSet<ServerHandshakePacketListener>().addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))), // MagmaCube - decompile fix
+    PLAY(0, ConnectionProtocol.protocol().addFlow(PacketFlow.CLIENTBOUND, new PacketSet<ClientGamePacketListener>().addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddMobPacket.class, ClientboundAddMobPacket::new).addPacket(ClientboundAddPaintingPacket.class, ClientboundAddPaintingPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockBreakAckPacket.class, ClientboundBlockBreakAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPacket.class, ClientboundChatPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerAckPacket.class, ClientboundContainerAckPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkPacket.class, ClientboundLevelChunkPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::new).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::new).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::new).addPacket(ClientboundMoveEntityPacket.class, ClientboundMoveEntityPacket::new).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerCombatPacket.class, ClientboundPlayerCombatPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundSetBorderPacket.class, ClientboundSetBorderPacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitlesPacket.class, ClientboundSetTitlesPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, new PacketSet<ServerGamePacketListener>().addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerAckPacket.class, ServerboundContainerAckPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::new).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::new).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::new).addPacket(ServerboundMovePlayerPacket.class, ServerboundMovePlayerPacket::new).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))), // MagmaCube - decompile fix
+    STATUS(1, ConnectionProtocol.protocol().addFlow(PacketFlow.SERVERBOUND, new PacketSet<ServerStatusPacketListener>().addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, new PacketSet<ClientStatusPacketListener>().addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))), // MagmaCube - decompile fix
+    LOGIN(2, ConnectionProtocol.protocol().addFlow(PacketFlow.CLIENTBOUND, new PacketSet<ClientLoginPacketListener>().addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, new PacketSet<ServerLoginPacketListener>().addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new))); // MagmaCube - decompile fix
 
     private static final ConnectionProtocol[] LOOKUP;
     private static final Map<Class<? extends Packet<?>>, ConnectionProtocol> PROTOCOL_BY_PACKET;
@@ -277,7 +135,7 @@ public enum ConnectionProtocol {
 
         @Nullable
         public Packet<?> createPacket(int debug1) {
-            Supplier<Packet<T>> debug2 = this.idToConstructor.get(debug1);
+            Supplier<? extends Packet<T>> debug2 = this.idToConstructor.get(debug1); // MagmaCube - decompile fix
             return debug2 != null ? debug2.get() : null;
         }
 
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 2cd29f82bf585372b15056e8a975cdd5abb3ae84..4b3499d9e5c24a40d7e8b84a025693ff220f28df 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -61,7 +61,7 @@ public class FriendlyByteBuf extends ByteBuf
     
     public <T> T readWithCodec(final Codec<T> debug1) throws IOException {
         final CompoundTag debug2 = this.readAnySizeNbt();
-        final DataResult<T> debug3 = (DataResult<T>)debug1.parse((DynamicOps)NbtOps.INSTANCE, (Object)debug2);
+        final DataResult<T> debug3 = (DataResult<T>)debug1.parse((DynamicOps)NbtOps.INSTANCE, debug2); // MagmaCube - decompile fix
         if (debug3.error().isPresent()) {
             throw new IOException("Failed to decode: " + debug3.error().get().message() + " " + debug2);
         }
@@ -69,11 +69,11 @@ public class FriendlyByteBuf extends ByteBuf
     }
     
     public <T> void writeWithCodec(final Codec<T> debug1, final T debug2) throws IOException {
-        final DataResult<Tag> debug3 = (DataResult<Tag>)debug1.encodeStart((DynamicOps)NbtOps.INSTANCE, (Object)debug2);
+        final DataResult<Tag> debug3 = (DataResult<Tag>)debug1.encodeStart((DynamicOps)NbtOps.INSTANCE, debug2); // MagmaCube - decompile fix
         if (debug3.error().isPresent()) {
             throw new IOException("Failed to encode: " + debug3.error().get().message() + " " + debug2);
         }
-        this.writeNbt(debug3.result().get());
+        this.writeNbt((CompoundTag) debug3.result().get()); // MagmaCube - decompile fix
     }
     
     public FriendlyByteBuf writeByteArray(final byte[] debug1) {
diff --git a/src/main/java/net/minecraft/network/chat/BaseComponent.java b/src/main/java/net/minecraft/network/chat/BaseComponent.java
index 3cf1d8d0580081b4897677440bc930b4fe8a1d92..8591a16a7222db9d8929bc87e30a1a988598fa11 100644
--- a/src/main/java/net/minecraft/network/chat/BaseComponent.java
+++ b/src/main/java/net/minecraft/network/chat/BaseComponent.java
@@ -17,7 +17,7 @@ public abstract class BaseComponent implements MutableComponent
     private Style style;
     
     public BaseComponent() {
-        this.siblings = (List<Component>)Lists.newArrayList();
+        this.siblings = Lists.newArrayList(); // MagmaCube - decompile fix
         this.visualOrderText = FormattedCharSequence.EMPTY;
         this.style = Style.EMPTY;
     }
diff --git a/src/main/java/net/minecraft/network/chat/ClickEvent.java b/src/main/java/net/minecraft/network/chat/ClickEvent.java
index 13afaa4f4d000cfa56e599bdb3a55a531a9bc78f..3ff73c9c25ae603e53a6776db09211ba1bba8602 100644
--- a/src/main/java/net/minecraft/network/chat/ClickEvent.java
+++ b/src/main/java/net/minecraft/network/chat/ClickEvent.java
@@ -39,7 +39,7 @@ public class ClickEvent {
     }
 
     public String toString() {
-        return "ClickEvent{action=" + (Object)((Object)this.action) + ", value='" + this.value + 'Â¥'' + '}';
+        return "ClickEvent{action=" + (Object)((Object)this.action) + ", value='" + this.value + '\'' + '}'; // MagmaCube - decompile fix
     }
 
     public int hashCode() {
diff --git a/src/main/java/net/minecraft/network/chat/Component.java b/src/main/java/net/minecraft/network/chat/Component.java
index 1e63f1d82887935f6298360394f0931f2f4ccf15..9130900b5882fac5af17be475e8465a27f43621c 100644
--- a/src/main/java/net/minecraft/network/chat/Component.java
+++ b/src/main/java/net/minecraft/network/chat/Component.java
@@ -40,15 +40,13 @@ public interface Component extends Message, FormattedText
     String getContents();
     
     default String getString() {
-        return super.getString();
+        return FormattedText.super.getString(); // MagmaCube - decompile fix
     }
     
     default String getString(final int debug1) {
-        final StringBuilder debug3 = new StringBuilder();
-        final StringBuilder sb;
-        final int debug4;
+        final StringBuilder sb = new StringBuilder(); // MagmaCube - decompile fix
         this.visit(debug2 -> {
-            debug4 = debug1 - sb.length();
+            int debug4 = debug1 - sb.length(); // MagmaCube - decompile fix
             if (debug4 <= 0) {
                 return Component.STOP_ITERATION;
             }
@@ -57,7 +55,7 @@ public interface Component extends Message, FormattedText
                 return Optional.empty();
             }
         });
-        return debug3.toString();
+        return sb.toString(); // MagmaCube - decompile fix
     }
     
     List<Component> getSiblings();
@@ -105,7 +103,7 @@ public interface Component extends Message, FormattedText
         return debug1.accept(this.getContents());
     }
     
-    default Component nullToEmpty(@Nullable final String debug0) {
+    static Component nullToEmpty(@Nullable final String debug0) { // MagmaCube - decompile fix
         return (debug0 != null) ? new TextComponent(debug0) : TextComponent.EMPTY;
     }
     
@@ -320,9 +318,7 @@ public interface Component extends Message, FormattedText
                 return debug2;
             }
             catch (IOException | StackOverflowError ex) {
-                final Throwable t;
-                final Throwable debug3 = t;
-                throw new JsonParseException(debug3);
+                throw new JsonParseException(ex); // MagmaCube - decompile fix
             }
         }
         
@@ -336,20 +332,18 @@ public interface Component extends Message, FormattedText
         }
         
         static {
-            final GsonBuilder debug0;
             GSON = Util.make(() -> {
-                debug0 = new GsonBuilder();
+                GsonBuilder debug0 = new GsonBuilder(); // MagmaCube - decompile fix
                 debug0.disableHtmlEscaping();
                 debug0.registerTypeHierarchyAdapter((Class)Component.class, (Object)new Serializer());
                 debug0.registerTypeHierarchyAdapter((Class)Style.class, (Object)new Style.Serializer());
                 debug0.registerTypeAdapterFactory((TypeAdapterFactory)new LowerCaseEnumTypeAdapterFactory());
                 return debug0.create();
             });
-            Field debug2;
             JSON_READER_POS = Util.make(() -> {
                 try {
                     new JsonReader((Reader)new java.io.StringReader(""));
-                    debug2 = JsonReader.class.getDeclaredField("pos");
+                    Field debug2 = JsonReader.class.getDeclaredField("pos"); // MagmaCube - decompile fix
                     debug2.setAccessible(true);
                     return debug2;
                 }
@@ -357,11 +351,10 @@ public interface Component extends Message, FormattedText
                     throw new IllegalStateException("Couldn't get field 'pos' for JsonReader", debug3);
                 }
             });
-            Field debug4;
             JSON_READER_LINESTART = Util.make(() -> {
                 try {
                     new JsonReader((Reader)new java.io.StringReader(""));
-                    debug4 = JsonReader.class.getDeclaredField("lineStart");
+                    Field debug4 = JsonReader.class.getDeclaredField("lineStart"); // MagmaCube - decompile fix
                     debug4.setAccessible(true);
                     return debug4;
                 }
diff --git a/src/main/java/net/minecraft/network/chat/ComponentUtils.java b/src/main/java/net/minecraft/network/chat/ComponentUtils.java
index 3ba14beb7e6199ab6a63d0e6882db8a8eb93d2a3..bc510b5901264d351d9599702f722dc999726d9e 100644
--- a/src/main/java/net/minecraft/network/chat/ComponentUtils.java
+++ b/src/main/java/net/minecraft/network/chat/ComponentUtils.java
@@ -45,7 +45,7 @@ public class ComponentUtils
         if (debug4 != null) {
             final Component debug5 = debug4.getValue(HoverEvent.Action.SHOW_TEXT);
             if (debug5 != null) {
-                final HoverEvent debug6 = new HoverEvent((HoverEvent.Action<T>)HoverEvent.Action.SHOW_TEXT, (T)updateForEntity(debug0, debug5, debug2, debug3 + 1));
+                final HoverEvent debug6 = new HoverEvent(HoverEvent.Action.SHOW_TEXT, updateForEntity(debug0, debug5, debug2, debug3 + 1)); // MagmaCube - decompile fix
                 return debug1.withHoverEvent(debug6);
             }
         }
@@ -63,7 +63,7 @@ public class ComponentUtils
     }
     
     public static Component formatList(final Collection<String> debug0) {
-        return formatAndSortList(debug0, debug0 -> new TextComponent(debug0).withStyle(ChatFormatting.GREEN));
+        return formatAndSortList(debug0, debug0l -> new TextComponent(debug0l).withStyle(ChatFormatting.GREEN)); // MagmaCube - decompile fix
     }
     
     public static <T extends Comparable<T>> Component formatAndSortList(final Collection<T> debug0, final Function<T, Component> debug1) {
diff --git a/src/main/java/net/minecraft/network/chat/FormattedText.java b/src/main/java/net/minecraft/network/chat/FormattedText.java
index dbc9f6d46a14d5fe43fe248fd89e3ffc4d23b27a..e2a7886178f8d64174144da187c60e64a33ef20c 100644
--- a/src/main/java/net/minecraft/network/chat/FormattedText.java
+++ b/src/main/java/net/minecraft/network/chat/FormattedText.java
@@ -25,7 +25,7 @@ public interface FormattedText
     
      <T> Optional<T> visit(final StyledContentConsumer<T> p0, final Style p1);
     
-    default FormattedText of(final String debug0) {
+    static FormattedText of(final String debug0) { // MagmaCube - decompile fix
         return new FormattedText() {
             @Override
             public <T> Optional<T> visit(final ContentConsumer<T> debug1) {
@@ -39,7 +39,7 @@ public interface FormattedText
         };
     }
     
-    default FormattedText of(final String debug0, final Style debug1) {
+    static FormattedText of(final String debug0, final Style debug1) { // MagmaCube - decompile fix
         return new FormattedText() {
             @Override
             public <T> Optional<T> visit(final ContentConsumer<T> debug1) {
@@ -48,16 +48,16 @@ public interface FormattedText
             
             @Override
             public <T> Optional<T> visit(final StyledContentConsumer<T> debug1, final Style debug2) {
-                return debug1.accept(debug1.applyTo(debug2), debug0);
+                return debug1.accept(debug2, debug0); // MagmaCube - decompile fix
             }
         };
     }
     
-    default FormattedText composite(final FormattedText... debug0) {
-        return composite((List<FormattedText>)ImmutableList.copyOf((Object[])debug0));
+    static FormattedText composite(final FormattedText... debug0) { // MagmaCube - decompile fix
+        return composite(ImmutableList.copyOf(debug0)); // MagmaCube - decompile fix
     }
     
-    default FormattedText composite(final List<FormattedText> debug0) {
+    static FormattedText composite(final List<FormattedText> debug0) { // MagmaCube - decompile fix
         return new FormattedText() {
             @Override
             public <T> Optional<T> visit(final ContentConsumer<T> debug1) {
diff --git a/src/main/java/net/minecraft/network/chat/HoverEvent.java b/src/main/java/net/minecraft/network/chat/HoverEvent.java
index 0530067abe62969cab1f11a2d631f120f2f9aca6..0d570b2f2e3d5c02115962f99506c2ac9800e6c1 100644
--- a/src/main/java/net/minecraft/network/chat/HoverEvent.java
+++ b/src/main/java/net/minecraft/network/chat/HoverEvent.java
@@ -76,7 +76,7 @@ public class HoverEvent {
     }
 
     public String toString() {
-        return "HoverEvent{action=" + this.action + ", value='" + this.value + 'Â¥'' + '}';
+        return "HoverEvent{action=" + this.action + ", value='" + this.value + '\'' + '}'; // MagmaCube - decompile fix
     }
 
     public int hashCode() {
@@ -115,7 +115,7 @@ public class HoverEvent {
 
     public static class Action<T> {
         public static final Action<Component> SHOW_TEXT = new Action<Component>("show_text", true, Component.Serializer::fromJson, Component.Serializer::toJsonTree, Function.identity());
-        public static final Action<ItemStackInfo> SHOW_ITEM = new Action<ItemStackInfo>("show_item", true, debug0 -> ItemStackInfo.access$400(debug0), debug0 -> ItemStackInfo.access$300((ItemStackInfo)debug0), debug0 -> ItemStackInfo.access$200(debug0));
+        public static final Action<ItemStackInfo> SHOW_ITEM = new Action<ItemStackInfo>("show_item", true, debug0 -> ItemStackInfo.create(debug0), debug0 -> debug0.serialize(), debug0 -> ItemStackInfo.create(debug0)); // MagmaCube - decompile fix
         public static final Action<EntityTooltipInfo> SHOW_ENTITY = new Action<EntityTooltipInfo>("show_entity", true, EntityTooltipInfo::create, EntityTooltipInfo::serialize, EntityTooltipInfo::create);
         private static final Map<String, Action> LOOKUP = (Map)Stream.of(SHOW_TEXT, SHOW_ITEM, SHOW_ENTITY).collect(ImmutableMap.toImmutableMap(Action::getName, debug0 -> debug0));
         private final String name;
diff --git a/src/main/java/net/minecraft/network/chat/KeybindComponent.java b/src/main/java/net/minecraft/network/chat/KeybindComponent.java
index 8e66d2d02617359917ef6a3a46509c146c62a0da..acaf27812284cd95d34d297c905045d185da9fd0 100644
--- a/src/main/java/net/minecraft/network/chat/KeybindComponent.java
+++ b/src/main/java/net/minecraft/network/chat/KeybindComponent.java
@@ -54,7 +54,7 @@ public class KeybindComponent extends BaseComponent
     
     @Override
     public String toString() {
-        return "KeybindComponent{keybind='" + this.name + 'Â¥'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
+        return "KeybindComponent{keybind='" + this.name + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}'; // MagmaCube - decompile fix
     }
     
     public String getName() {
diff --git a/src/main/java/net/minecraft/network/chat/MutableComponent.java b/src/main/java/net/minecraft/network/chat/MutableComponent.java
index 867efeb800ad54eaabb8052c5b881969aa3488d9..421da1f09f3a48e43c3c90a82c9d5a5d3b1eb3e2 100644
--- a/src/main/java/net/minecraft/network/chat/MutableComponent.java
+++ b/src/main/java/net/minecraft/network/chat/MutableComponent.java
@@ -14,22 +14,22 @@ public interface MutableComponent extends Component
     MutableComponent append(final Component p0);
     
     default MutableComponent withStyle(final UnaryOperator<Style> debug1) {
-        this.setStyle(debug1.apply(super.getStyle()));
+        this.setStyle(debug1.apply(getStyle())); // MagmaCube - decompile fix
         return this;
     }
     
     default MutableComponent withStyle(final Style debug1) {
-        this.setStyle(debug1.applyTo(super.getStyle()));
+        this.setStyle(debug1.applyTo(getStyle())); // MagmaCube - decompile fix
         return this;
     }
     
     default MutableComponent withStyle(final ChatFormatting... debug1) {
-        this.setStyle(super.getStyle().applyFormats(debug1));
+        this.setStyle(getStyle().applyFormats(debug1)); // MagmaCube - decompile fix
         return this;
     }
     
     default MutableComponent withStyle(final ChatFormatting debug1) {
-        this.setStyle(super.getStyle().applyFormat(debug1));
+        this.setStyle(getStyle().applyFormat(debug1)); // MagmaCube - decompile fix
         return this;
     }
 }
diff --git a/src/main/java/net/minecraft/network/chat/NbtComponent.java b/src/main/java/net/minecraft/network/chat/NbtComponent.java
index e026c99647c3c7e8e2bae360708e5d94827b5bdd..224d8c67062feac58704c6959a5c1ccc01bd37e8 100644
--- a/src/main/java/net/minecraft/network/chat/NbtComponent.java
+++ b/src/main/java/net/minecraft/network/chat/NbtComponent.java
@@ -89,18 +89,18 @@ implements ContextAwareComponent {
             try {
                 return this.compiledNbtPath.get((Tag)debug1).stream();
             }
-            catch (CommandSyntaxException debug2) {
+            catch (CommandSyntaxException debug22) { // MagmaCube - decompile fix
                 return Stream.empty();
             }
         }).map(Tag::getAsString);
         if (this.interpreting) {
             return debug4.flatMap(debug3 -> {
                 try {
-                    MutableComponent debug4 = Component.Serializer.fromJson(debug3);
-                    return Stream.of(ComponentUtils.updateForEntity(debug12, debug4, debug2, debug32));
+                    MutableComponent debug44 = Component.Serializer.fromJson(debug3); // MagmaCube - decompile fix
+                    return Stream.of(ComponentUtils.updateForEntity(debug12, debug44, debug2, debug32)); // MagmaCube - decompile fix
                 }
-                catch (Exception debug4) {
-                    LOGGER.warn("Failed to parse component: " + debug3, (Throwable)debug4);
+                catch (Exception debug44) { // MagmaCube - decompile fix
+                    LOGGER.warn("Failed to parse component: " + debug3, (Throwable)debug44); // MagmaCube - decompile fix
                     return Stream.of(new MutableComponent[0]);
                 }
             }).reduce((debug0, debug1) -> debug0.append(", ").append((Component)debug1)).orElse(new TextComponent(""));
@@ -151,17 +151,7 @@ implements ContextAwareComponent {
 
         @Override
         public String toString() {
-            return "StorageNbtComponent{id='" + this.id + 'Â¥'' + "path='" + this.nbtPathPattern + 'Â¥'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
-        }
-
-        @Override
-        public /* synthetic */ BaseComponent plainCopy() {
-            return this.plainCopy();
-        }
-
-        @Override
-        public /* synthetic */ MutableComponent plainCopy() {
-            return this.plainCopy();
+            return "StorageNbtComponent{id='" + this.id + '\'' + "path='" + this.nbtPathPattern + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}'; // MagmaCube - decompile fix
         }
     }
 
@@ -228,17 +218,7 @@ implements ContextAwareComponent {
 
         @Override
         public String toString() {
-            return "BlockPosArgument{pos='" + this.posPattern + 'Â¥'' + "path='" + this.nbtPathPattern + 'Â¥'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
-        }
-
-        @Override
-        public /* synthetic */ BaseComponent plainCopy() {
-            return this.plainCopy();
-        }
-
-        @Override
-        public /* synthetic */ MutableComponent plainCopy() {
-            return this.plainCopy();
+            return "BlockPosArgument{pos='" + this.posPattern + '\'' + "path='" + this.nbtPathPattern + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}'; // MagmaCube - decompile fix
         }
     }
 
@@ -303,17 +283,7 @@ implements ContextAwareComponent {
 
         @Override
         public String toString() {
-            return "EntityNbtComponent{selector='" + this.selectorPattern + 'Â¥'' + "path='" + this.nbtPathPattern + 'Â¥'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
-        }
-
-        @Override
-        public /* synthetic */ BaseComponent plainCopy() {
-            return this.plainCopy();
-        }
-
-        @Override
-        public /* synthetic */ MutableComponent plainCopy() {
-            return this.plainCopy();
+            return "EntityNbtComponent{selector='" + this.selectorPattern + '\'' + "path='" + this.nbtPathPattern + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
         }
     }
 }
diff --git a/src/main/java/net/minecraft/network/chat/ScoreComponent.java b/src/main/java/net/minecraft/network/chat/ScoreComponent.java
index 8e6af070f44b03bf3c108fb51b109c528380f513..8b00f8c5a975634bd51fd4095d159bfdb682ce1f 100644
--- a/src/main/java/net/minecraft/network/chat/ScoreComponent.java
+++ b/src/main/java/net/minecraft/network/chat/ScoreComponent.java
@@ -113,17 +113,7 @@ implements ContextAwareComponent {
 
     @Override
     public String toString() {
-        return "ScoreComponent{name='" + this.name + 'Â¥'' + "objective='" + this.objective + 'Â¥'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
-    }
-
-    @Override
-    public /* synthetic */ BaseComponent plainCopy() {
-        return this.plainCopy();
-    }
-
-    @Override
-    public /* synthetic */ MutableComponent plainCopy() {
-        return this.plainCopy();
+        return "ScoreComponent{name='" + this.name + '\'' + "objective='" + this.objective + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}'; // MagmaCube - decompile fix
     }
 }
 
diff --git a/src/main/java/net/minecraft/network/chat/SelectorComponent.java b/src/main/java/net/minecraft/network/chat/SelectorComponent.java
index 41e31d4c0db9832e65ba60536a27099b63ba2283..0aa980ceefd30b70d21235c2fd1cf2486775aa96 100644
--- a/src/main/java/net/minecraft/network/chat/SelectorComponent.java
+++ b/src/main/java/net/minecraft/network/chat/SelectorComponent.java
@@ -66,7 +66,7 @@ public class SelectorComponent extends BaseComponent implements ContextAwareComp
     
     @Override
     public String toString() {
-        return "SelectorComponent{pattern='" + this.pattern + 'Â¥'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
+        return "SelectorComponent{pattern='" + this.pattern + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
     }
     
     static {
diff --git a/src/main/java/net/minecraft/network/chat/Style.java b/src/main/java/net/minecraft/network/chat/Style.java
index 1a877b92ea6c75d9b7f2a35449d702193d86d6ac..4655732f6c0cacaed9034d5286beeda2d430e620 100644
--- a/src/main/java/net/minecraft/network/chat/Style.java
+++ b/src/main/java/net/minecraft/network/chat/Style.java
@@ -320,7 +320,7 @@ public class Style
             final ClickEvent debug12 = getClickEvent(debug4);
             final HoverEvent debug13 = getHoverEvent(debug4);
             final ResourceLocation debug14 = getFont(debug4);
-            return new Style(debug10, debug5, debug6, debug7, debug8, debug9, debug12, debug13, debug11, debug14, null);
+            return new Style(debug10, debug5, debug6, debug7, debug8, debug9, debug12, debug13, debug11, debug14); // MagmaCube - decompile fix
         }
         
         @Nullable
diff --git a/src/main/java/net/minecraft/network/chat/SubStringSource.java b/src/main/java/net/minecraft/network/chat/SubStringSource.java
index 73fcd7773709b65631ce5fb11e003c275eb782b9..05ae28b07451dec898af0e112ddb2a2b84122408 100644
--- a/src/main/java/net/minecraft/network/chat/SubStringSource.java
+++ b/src/main/java/net/minecraft/network/chat/SubStringSource.java
@@ -28,9 +28,9 @@ public class SubStringSource
     
     public List<FormattedCharSequence> substring(final int debug1, final int debug2, final boolean debug3) {
         if (debug2 == 0) {
-            return (List<FormattedCharSequence>)ImmutableList.of();
+            return ImmutableList.of(); // MagmaCube - decompile fix
         }
-        final List<FormattedCharSequence> debug4 = (List<FormattedCharSequence>)Lists.newArrayList();
+        final List<FormattedCharSequence> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
         Style debug5 = this.charStyles.get(debug1);
         int debug6 = debug1;
         for (int debug7 = 1; debug7 < debug2; ++debug7) {
@@ -52,21 +52,19 @@ public class SubStringSource
     
     public static SubStringSource create(final FormattedText debug0, final Int2IntFunction debug1, final UnaryOperator<String> debug2) {
         final StringBuilder debug5 = new StringBuilder();
-        final List<Style> debug6 = (List<Style>)Lists.newArrayList();
-        final StringBuilder sb;
-        int debug7;
-        int debug8;
-        final List<Style> list;
-        debug0.visit((debug2, debug3) -> {
-            StringDecomposer.iterateFormatted(debug3, debug2, (debug2, debug3, debug4) -> {
-                sb.appendCodePoint(debug4);
-                for (debug7 = Character.charCount(debug4), debug8 = 0; debug8 < debug7; ++debug8) {
-                    list.add(debug3);
+        // MagmaCube start - decompile fix
+        final List<Style> debug6 = Lists.newArrayList(); // MagmaCube - decompile fix
+        debug0.visit((debug2l, debug3) -> {
+            StringDecomposer.iterateFormatted(debug3, debug2l, (debug2ll, debug3ll, debug4) -> {
+                debug5.appendCodePoint(debug4);
+                for (int debug7 = Character.charCount(debug4), debug8 = 0; debug8 < debug7; ++debug8) {
+                    debug6.add(debug3ll);
                 }
-                return 1;
+                return true;
             });
             return Optional.empty();
         }, Style.EMPTY);
+        // MagmaCube end - decompile fix
         return new SubStringSource(debug2.apply(debug5.toString()), debug6, debug1);
     }
 }
diff --git a/src/main/java/net/minecraft/network/chat/TextComponent.java b/src/main/java/net/minecraft/network/chat/TextComponent.java
index aaf8f714a4e325ac561d3e1f57855f91d4cec0e7..afaff8565a187768328ba50d9f1c12ea921d3bff 100644
--- a/src/main/java/net/minecraft/network/chat/TextComponent.java
+++ b/src/main/java/net/minecraft/network/chat/TextComponent.java
@@ -37,7 +37,7 @@ public class TextComponent extends BaseComponent
     
     @Override
     public String toString() {
-        return "TextComponent{text='" + this.text + 'Â¥'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
+        return "TextComponent{text='" + this.text + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}'; // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/network/chat/TranslatableComponent.java b/src/main/java/net/minecraft/network/chat/TranslatableComponent.java
index 6462457f046c34d893bd5dc7e5d0a8223a28d9ff..22297883e494787b62439f317573e696504719df 100644
--- a/src/main/java/net/minecraft/network/chat/TranslatableComponent.java
+++ b/src/main/java/net/minecraft/network/chat/TranslatableComponent.java
@@ -26,13 +26,13 @@ public class TranslatableComponent extends BaseComponent implements ContextAware
     private static final Pattern FORMAT_PATTERN;
     
     public TranslatableComponent(final String debug1) {
-        this.decomposedParts = (List<FormattedText>)Lists.newArrayList();
+        this.decomposedParts = Lists.newArrayList(); // MagmaCube - decompile fix
         this.key = debug1;
         this.args = TranslatableComponent.NO_ARGS;
     }
     
     public TranslatableComponent(final String debug1, final Object... debug2) {
-        this.decomposedParts = (List<FormattedText>)Lists.newArrayList();
+        this.decomposedParts = Lists.newArrayList(); // MagmaCube - decompile fix
         this.key = debug1;
         this.args = debug2;
     }
@@ -176,7 +176,7 @@ public class TranslatableComponent extends BaseComponent implements ContextAware
     
     @Override
     public String toString() {
-        return "TranslatableComponent{key='" + this.key + 'Â¥'' + ", args=" + Arrays.toString(this.args) + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
+        return "TranslatableComponent{key='" + this.key + '\'' + ", args=" + Arrays.toString(this.args) + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}'; // MagmaCube - decompile fix
     }
     
     public String getKey() {
@@ -191,6 +191,6 @@ public class TranslatableComponent extends BaseComponent implements ContextAware
         NO_ARGS = new Object[0];
         TEXT_PERCENT = FormattedText.of("%");
         TEXT_NULL = FormattedText.of("null");
-        FORMAT_PATTERN = Pattern.compile("%(?:(Â¥Â¥d+)Â¥Â¥$)?([A-Za-z%]|$)");
+        FORMAT_PATTERN = Pattern.compile("%(?:(\\d+)\\$)?([A-Za-z%]|$)"); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundAwardStatsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundAwardStatsPacket.java
index 21463871bf77ed9f57641e553adc610348c2f474..258bf91b06b18083369a5589f7068a4c4bcc0b63 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundAwardStatsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundAwardStatsPacket.java
@@ -40,7 +40,7 @@ public class ClientboundAwardStatsPacket implements Packet<ClientGamePacketListe
     private <T> void readStat(final StatType<T> debug1, final FriendlyByteBuf debug2) {
         final int debug3 = debug2.readVarInt();
         final int debug4 = debug2.readVarInt();
-        this.stats.put((Object)debug1.get(debug1.getRegistry().byId(debug3)), debug4);
+        this.stats.put(debug1.get(debug1.getRegistry().byId(debug3)), debug4); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
index 6a1ec386a8172b21c0cda20a50f4867c9f1a33ed..fdc3370a4fc782831a0eaccec28f11426fd72354 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
@@ -34,7 +34,7 @@ public class ClientboundCommandSuggestionsPacket implements Packet<ClientGamePac
         final int debug3 = debug1.readVarInt();
         final StringRange debug4 = StringRange.between(debug2, debug2 + debug3);
         final int debug5 = debug1.readVarInt();
-        final List<Suggestion> debug6 = (List<Suggestion>)Lists.newArrayListWithCapacity(debug5);
+        final List<Suggestion> debug6 = Lists.newArrayListWithCapacity(debug5); // MagmaCube - decompile fix
         for (int debug7 = 0; debug7 < debug5; ++debug7) {
             final String debug8 = debug1.readUtf(32767);
             final Component debug9 = debug1.readBoolean() ? debug1.readComponent() : null;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java
index 2dd10a6e06c2f56a56b0f014a64963c0259f34b5..cdd290739dc7882960f03c928da3710232b13801 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java
@@ -64,7 +64,7 @@ public class ClientboundCommandsPacket implements Packet<ClientGamePacketListene
     }
     
     private static void resolveEntries(final Entry[] debug0) {
-        final List<Entry> debug2 = (List<Entry>)Lists.newArrayList((Object[])debug0);
+        final List<Entry> debug2 = (List<Entry>)Lists.newArrayList(debug0); // MagmaCube - decompile fix
         while (!debug2.isEmpty()) {
             final boolean debug3 = debug2.removeIf(debug1 -> debug1.build(debug0));
             if (!debug3) {
@@ -75,7 +75,7 @@ public class ClientboundCommandsPacket implements Packet<ClientGamePacketListene
     
     private static Object2IntMap<CommandNode<SharedSuggestionProvider>> enumerateNodes(final RootCommandNode<SharedSuggestionProvider> debug0) {
         final Object2IntMap<CommandNode<SharedSuggestionProvider>> debug = (Object2IntMap<CommandNode<SharedSuggestionProvider>>)new Object2IntOpenHashMap();
-        final Queue<CommandNode<SharedSuggestionProvider>> debug2 = (Queue<CommandNode<SharedSuggestionProvider>>)Queues.newArrayDeque();
+        final Queue<CommandNode<SharedSuggestionProvider>> debug2 = Queues.newArrayDeque(); // MagmaCube - decompile fix
         debug2.add((CommandNode<SharedSuggestionProvider>)debug0);
         CommandNode<SharedSuggestionProvider> debug3;
         while ((debug3 = debug2.poll()) != null) {
@@ -83,8 +83,8 @@ public class ClientboundCommandsPacket implements Packet<ClientGamePacketListene
                 continue;
             }
             final int debug4 = debug.size();
-            debug.put((Object)debug3, debug4);
-            debug2.addAll((Collection<?>)debug3.getChildren());
+            debug.put(debug3, debug4); // MagmaCube - decompile fix
+            debug2.addAll(debug3.getChildren()); // MagmaCube - decompile fix
             if (debug3.getRedirect() == null) {
                 continue;
             }
@@ -95,7 +95,7 @@ public class ClientboundCommandsPacket implements Packet<ClientGamePacketListene
     
     private static CommandNode<SharedSuggestionProvider>[] getNodesInIdOrder(final Object2IntMap<CommandNode<SharedSuggestionProvider>> debug0) {
         final CommandNode<SharedSuggestionProvider>[] debug = (CommandNode<SharedSuggestionProvider>[])new CommandNode[debug0.size()];
-        for (final Object2IntMap.Entry<CommandNode<SharedSuggestionProvider>> debug2 : Object2IntMaps.fastIterable((Object2IntMap)debug0)) {
+        for (final Object2IntMap.Entry<CommandNode<SharedSuggestionProvider>> debug2 : Object2IntMaps.fastIterable(debug0)) { // MagmaCube - decompile fix
             debug[debug2.getIntValue()] = (CommandNode<SharedSuggestionProvider>)debug2.getKey();
         }
         return debug;
@@ -126,7 +126,7 @@ public class ClientboundCommandsPacket implements Packet<ClientGamePacketListene
         }
         else {
             if (debug2 == 1) {
-                return (ArgumentBuilder<SharedSuggestionProvider, ?>)LiteralArgumentBuilder.literal(debug0.readUtf(32767));
+                return LiteralArgumentBuilder.literal(debug0.readUtf(32767)); // MagmaCube - decompile fix
             }
             return null;
         }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundExplodePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundExplodePacket.java
index cbf8afe8d2e0d016c18b1e5d7202f96bc052c35d..012306715c1886963cc256fecd519706efb2bd38 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundExplodePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundExplodePacket.java
@@ -45,7 +45,7 @@ public class ClientboundExplodePacket implements Packet<ClientGamePacketListener
         this.z = debug1.readFloat();
         this.power = debug1.readFloat();
         final int debug2 = debug1.readInt();
-        this.toBlow = (List<BlockPos>)Lists.newArrayListWithCapacity(debug2);
+        this.toBlow = Lists.newArrayListWithCapacity(debug2); // MagmaCube - decompile fix
         final int debug3 = Mth.floor(this.x);
         final int debug4 = Mth.floor(this.y);
         final int debug5 = Mth.floor(this.z);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundGameEventPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundGameEventPacket.java
index b1006bf643305a9e946cccf3f2f974f2de19a3a1..742325bd5fd3a88b89f287440e5e313abb470b61 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundGameEventPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundGameEventPacket.java
@@ -79,7 +79,7 @@ public class ClientboundGameEventPacket implements Packet<ClientGamePacketListen
         
         public Type(final int debug1) {
             this.id = debug1;
-            Type.TYPES.put(debug1, (Object)this);
+            Type.TYPES.put(debug1, this); // MagmaCube - decompile fix
         }
         
         static {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacket.java
index 89f5e66231bc065896b12f33a98d137c956388a4..9996002c16597e232b1828ff4ee5fde341f2c8e1 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacket.java
@@ -54,7 +54,7 @@ public class ClientboundLevelChunkPacket implements Packet<ClientGamePacketListe
         }
         this.buffer = new byte[this.calculateChunkSize(debug1, debug2)];
         this.availableSections = this.extractChunkData(new FriendlyByteBuf(this.getWriteBuffer()), debug1, debug2);
-        this.blockEntitiesTags = (List<CompoundTag>)Lists.newArrayList();
+        this.blockEntitiesTags = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Map.Entry<BlockPos, BlockEntity> debug5 : debug1.getBlockEntities().entrySet()) {
             final BlockPos debug6 = debug5.getKey();
             final BlockEntity debug7 = debug5.getValue();
@@ -83,7 +83,7 @@ public class ClientboundLevelChunkPacket implements Packet<ClientGamePacketListe
         }
         debug1.readBytes(this.buffer = new byte[debug2]);
         final int debug3 = debug1.readVarInt();
-        this.blockEntitiesTags = (List<CompoundTag>)Lists.newArrayList();
+        this.blockEntitiesTags = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug4 = 0; debug4 < debug3; ++debug4) {
             this.blockEntitiesTags.add(debug1.readNbt());
         }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelParticlesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelParticlesPacket.java
index 243dc5b0bcdab0558aee8a37f8d9bf4689875cb1..0f00024b2006b7396bbe245e5bf280d40a35bd83 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelParticlesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelParticlesPacket.java
@@ -25,7 +25,7 @@ public class ClientboundLevelParticlesPacket implements Packet<ClientGamePacketL
     public ClientboundLevelParticlesPacket() {
     }
     
-    public ClientboundLevelParticlesPacket(final T debug1, final boolean debug2, final double debug3, final double debug5, final double debug7, final float debug9, final float debug10, final float debug11, final float debug12, final int debug13) {
+    public ClientboundLevelParticlesPacket(final ParticleOptions debug1, final boolean debug2, final double debug3, final double debug5, final double debug7, final float debug9, final float debug10, final float debug11, final float debug12, final int debug13) { // MagmaCube - decompile fix
         this.particle = debug1;
         this.overrideLimiter = debug2;
         this.x = debug3;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLightUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLightUpdatePacket.java
index b043aa7d73756f7e1d6bc550bbee2adddf8c2dd5..dcc5db75d647ae05a9e0a0dcdc4f4ab1a60488aa 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLightUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLightUpdatePacket.java
@@ -32,8 +32,8 @@ public class ClientboundLightUpdatePacket implements Packet<ClientGamePacketList
         this.x = debug1.x;
         this.z = debug1.z;
         this.trustEdges = debug3;
-        this.skyUpdates = (List<byte[]>)Lists.newArrayList();
-        this.blockUpdates = (List<byte[]>)Lists.newArrayList();
+        this.skyUpdates = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.blockUpdates = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug4 = 0; debug4 < 18; ++debug4) {
             final DataLayer debug5 = debug2.getLayerListener(LightLayer.SKY).getDataLayerData(SectionPos.of(debug1, -1 + debug4));
             final DataLayer debug6 = debug2.getLayerListener(LightLayer.BLOCK).getDataLayerData(SectionPos.of(debug1, -1 + debug4));
@@ -64,13 +64,13 @@ public class ClientboundLightUpdatePacket implements Packet<ClientGamePacketList
         this.trustEdges = debug5;
         this.skyYMask = debug3;
         this.blockYMask = debug4;
-        this.skyUpdates = (List<byte[]>)Lists.newArrayList();
-        this.blockUpdates = (List<byte[]>)Lists.newArrayList();
+        this.skyUpdates = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.blockUpdates = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug6 = 0; debug6 < 18; ++debug6) {
             if ((this.skyYMask & 1 << debug6) != 0x0) {
                 final DataLayer debug7 = debug2.getLayerListener(LightLayer.SKY).getDataLayerData(SectionPos.of(debug1, -1 + debug6));
                 if (debug7 == null || debug7.isEmpty()) {
-                    this.skyYMask &= â¾(1 << debug6);
+                    this.skyYMask &= (1 << debug6); // MagmaCube - decompile fix
                     if (debug7 != null) {
                         this.emptySkyYMask |= 1 << debug6;
                     }
@@ -82,7 +82,7 @@ public class ClientboundLightUpdatePacket implements Packet<ClientGamePacketList
             if ((this.blockYMask & 1 << debug6) != 0x0) {
                 final DataLayer debug7 = debug2.getLayerListener(LightLayer.BLOCK).getDataLayerData(SectionPos.of(debug1, -1 + debug6));
                 if (debug7 == null || debug7.isEmpty()) {
-                    this.blockYMask &= â¾(1 << debug6);
+                    this.blockYMask &= (1 << debug6); // MagmaCube - decompile fix
                     if (debug7 != null) {
                         this.emptyBlockYMask |= 1 << debug6;
                     }
@@ -103,13 +103,13 @@ public class ClientboundLightUpdatePacket implements Packet<ClientGamePacketList
         this.blockYMask = debug1.readVarInt();
         this.emptySkyYMask = debug1.readVarInt();
         this.emptyBlockYMask = debug1.readVarInt();
-        this.skyUpdates = (List<byte[]>)Lists.newArrayList();
+        this.skyUpdates = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug2 = 0; debug2 < 18; ++debug2) {
             if ((this.skyYMask & 1 << debug2) != 0x0) {
                 this.skyUpdates.add(debug1.readByteArray(2048));
             }
         }
-        this.blockUpdates = (List<byte[]>)Lists.newArrayList();
+        this.blockUpdates = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug2 = 0; debug2 < 18; ++debug2) {
             if ((this.blockYMask & 1 << debug2) != 0x0) {
                 this.blockUpdates.add(debug1.readByteArray(2048));
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
index bbd6be7a6d5c97eceafb958395345ec8ef5acc49..780ce07359ad0a82d585d6b845b32d5907aab2c4 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
@@ -21,11 +21,11 @@ public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListe
     private final List<PlayerUpdate> entries;
     
     public ClientboundPlayerInfoPacket() {
-        this.entries = (List<PlayerUpdate>)Lists.newArrayList();
+        this.entries = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     public ClientboundPlayerInfoPacket(final Action debug1, final ServerPlayer... debug2) {
-        this.entries = (List<PlayerUpdate>)Lists.newArrayList();
+        this.entries = Lists.newArrayList(); // MagmaCube - decompile fix
         this.action = debug1;
         for (final ServerPlayer debug3 : debug2) {
             this.entries.add(new PlayerUpdate(debug3.getGameProfile(), debug3.latency, debug3.gameMode.getGameModeForPlayer(), debug3.getTabListDisplayName()));
@@ -33,7 +33,7 @@ public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListe
     }
     
     public ClientboundPlayerInfoPacket(final Action debug1, final Iterable<ServerPlayer> debug2) {
-        this.entries = (List<PlayerUpdate>)Lists.newArrayList();
+        this.entries = Lists.newArrayList(); // MagmaCube - decompile fix
         this.action = debug1;
         for (final ServerPlayer debug3 : debug2) {
             this.entries.add(new PlayerUpdate(debug3.getGameProfile(), debug3.latency, debug3.gameMode.getGameModeForPlayer(), debug3.getTabListDisplayName()));
@@ -55,10 +55,10 @@ public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListe
                         final String debug10 = debug1.readUtf(32767);
                         final String debug11 = debug1.readUtf(32767);
                         if (debug1.readBoolean()) {
-                            debug4.getProperties().put((Object)debug10, (Object)new Property(debug10, debug11, debug1.readUtf(32767)));
+                            debug4.getProperties().put(debug10, new Property(debug10, debug11, debug1.readUtf(32767))); // MagmaCube - decompile fix
                         }
                         else {
-                            debug4.getProperties().put((Object)debug10, (Object)new Property(debug10, debug11));
+                            debug4.getProperties().put(debug10, new Property(debug10, debug11)); // MagmaCube - decompile fix
                         }
                     }
                     debug6 = GameType.byId(debug1.readVarInt());
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundRecipePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundRecipePacket.java
index ca5ccf03211175171ab8bf417e3b9c74b101dba5..c52228abe4918be59e322a3995761381753307d8 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundRecipePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundRecipePacket.java
@@ -39,13 +39,13 @@ public class ClientboundRecipePacket implements Packet<ClientGamePacketListener>
         this.state = debug1.readEnum(State.class);
         this.bookSettings = RecipeBookSettings.read(debug1);
         int debug2 = debug1.readVarInt();
-        this.recipes = (List<ResourceLocation>)Lists.newArrayList();
+        this.recipes = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug3 = 0; debug3 < debug2; ++debug3) {
             this.recipes.add(debug1.readResourceLocation());
         }
         if (this.state == State.INIT) {
             debug2 = debug1.readVarInt();
-            this.toHighlight = (List<ResourceLocation>)Lists.newArrayList();
+            this.toHighlight = Lists.newArrayList(); // MagmaCube - decompile fix
             for (int debug3 = 0; debug3 < debug2; ++debug3) {
                 this.toHighlight.add(debug1.readResourceLocation());
             }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
index 2fabd5aca196ee5f08de5f66c7e5cd5e4ef83d1e..009720c3326662bbef8b23b6b557d9cc57cd67c3 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
@@ -16,7 +16,7 @@ public class ClientboundSetEquipmentPacket implements Packet<ClientGamePacketLis
     private final List<Pair<EquipmentSlot, ItemStack>> slots;
     
     public ClientboundSetEquipmentPacket() {
-        this.slots = (List<Pair<EquipmentSlot, ItemStack>>)Lists.newArrayList();
+        this.slots = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     public ClientboundSetEquipmentPacket(final int debug1, final List<Pair<EquipmentSlot, ItemStack>> debug2) {
@@ -33,7 +33,7 @@ public class ClientboundSetEquipmentPacket implements Packet<ClientGamePacketLis
             debug3 = debug1.readByte();
             final EquipmentSlot debug4 = debug2[debug3 & 0x7F];
             final ItemStack debug5 = debug1.readItem();
-            this.slots.add((Pair<EquipmentSlot, ItemStack>)Pair.of((Object)debug4, (Object)debug5));
+            this.slots.add((Pair<EquipmentSlot, ItemStack>)Pair.of(debug4, debug5)); // MagmaCube - decompile fix
         } while ((debug3 & 0xFFFFFF80) != 0x0);
     }
     
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
index 440e21adbedd397296c80b8532818fca95775659..930c509b7ca15b202fa0e3af9dad296d05e87725 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
@@ -34,7 +34,7 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
         this.nametagVisibility = Team.Visibility.ALWAYS.name;
         this.collisionRule = Team.CollisionRule.ALWAYS.name;
         this.color = ChatFormatting.RESET;
-        this.players = (Collection<String>)Lists.newArrayList();
+        this.players = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     public ClientboundSetPlayerTeamPacket(final PlayerTeam debug1, final int debug2) {
@@ -45,7 +45,7 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
         this.nametagVisibility = Team.Visibility.ALWAYS.name;
         this.collisionRule = Team.CollisionRule.ALWAYS.name;
         this.color = ChatFormatting.RESET;
-        this.players = (Collection<String>)Lists.newArrayList();
+        this.players = Lists.newArrayList(); // MagmaCube - decompile fix
         this.name = debug1.getName();
         this.method = debug2;
         if (debug2 == 0 || debug2 == 2) {
@@ -70,7 +70,7 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
         this.nametagVisibility = Team.Visibility.ALWAYS.name;
         this.collisionRule = Team.CollisionRule.ALWAYS.name;
         this.color = ChatFormatting.RESET;
-        this.players = (Collection<String>)Lists.newArrayList();
+        this.players = Lists.newArrayList(); // MagmaCube - decompile fix
         if (debug3 != 3 && debug3 != 4) {
             throw new IllegalArgumentException("Method must be join or leave for player constructor");
         }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
index 9584aae76b32139d14dfa8347e92eadf66662a8d..76885152116e4c5c9ea782d1d42cbbdc2e25b03e 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
@@ -26,7 +26,7 @@ public class ClientboundUpdateAdvancementsPacket implements Packet<ClientGamePac
     
     public ClientboundUpdateAdvancementsPacket(final boolean debug1, final Collection<Advancement> debug2, final Set<ResourceLocation> debug3, final Map<ResourceLocation, AdvancementProgress> debug4) {
         this.reset = debug1;
-        this.added = (Map<ResourceLocation, Advancement.Builder>)Maps.newHashMap();
+        this.added = Maps.newHashMap(); // MagmaCube - decompile fix
         for (final Advancement debug5 : debug2) {
             this.added.put(debug5.getId(), debug5.deconstruct());
         }
@@ -42,9 +42,9 @@ public class ClientboundUpdateAdvancementsPacket implements Packet<ClientGamePac
     @Override
     public void read(final FriendlyByteBuf debug1) throws IOException {
         this.reset = debug1.readBoolean();
-        this.added = (Map<ResourceLocation, Advancement.Builder>)Maps.newHashMap();
-        this.removed = (Set<ResourceLocation>)Sets.newLinkedHashSet();
-        this.progress = (Map<ResourceLocation, AdvancementProgress>)Maps.newHashMap();
+        this.added = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.removed = Sets.newLinkedHashSet(); // MagmaCube - decompile fix
+        this.progress = Maps.newHashMap(); // MagmaCube - decompile fix
         for (int debug2 = debug1.readVarInt(), debug3 = 0; debug3 < debug2; ++debug3) {
             final ResourceLocation debug4 = debug1.readResourceLocation();
             final Advancement.Builder debug5 = Advancement.Builder.fromNetwork(debug1);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
index c077a3b59ecf41d30593b303dfadd3518d19888b..7f0a6839cfb6e5554c19f0e43a0f6599f3cd8e21 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
@@ -21,11 +21,11 @@ public class ClientboundUpdateAttributesPacket implements Packet<ClientGamePacke
     private final List<AttributeSnapshot> attributes;
     
     public ClientboundUpdateAttributesPacket() {
-        this.attributes = (List<AttributeSnapshot>)Lists.newArrayList();
+        this.attributes = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     public ClientboundUpdateAttributesPacket(final int debug1, final Collection<AttributeInstance> debug2) {
-        this.attributes = (List<AttributeSnapshot>)Lists.newArrayList();
+        this.attributes = Lists.newArrayList(); // MagmaCube - decompile fix
         this.entityId = debug1;
         for (final AttributeInstance debug3 : debug2) {
             this.attributes.add(new AttributeSnapshot(debug3.getAttribute(), debug3.getBaseValue(), debug3.getModifiers()));
@@ -39,7 +39,7 @@ public class ClientboundUpdateAttributesPacket implements Packet<ClientGamePacke
             final ResourceLocation debug4 = debug1.readResourceLocation();
             final Attribute debug5 = Registry.ATTRIBUTE.get(debug4);
             final double debug6 = debug1.readDouble();
-            final List<AttributeModifier> debug7 = (List<AttributeModifier>)Lists.newArrayList();
+            final List<AttributeModifier> debug7 = Lists.newArrayList(); // MagmaCube - decompile fix
             for (int debug8 = debug1.readVarInt(), debug9 = 0; debug9 < debug8; ++debug9) {
                 final UUID debug10 = debug1.readUUID();
                 debug7.add(new AttributeModifier(debug10, "Unknown synced attribute modifier", debug1.readDouble(), AttributeModifier.Operation.fromValue(debug1.readByte())));
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
index 55116e92285783f546046b4a9ef8216e53aa1668..257109ce3402ae80aad3ef2fe4327b69a0a9d3c9 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
@@ -31,7 +31,7 @@ public class ClientboundUpdateRecipesPacket implements Packet<ClientGamePacketLi
     
     @Override
     public void read(final FriendlyByteBuf debug1) throws IOException {
-        this.recipes = (List<Recipe<?>>)Lists.newArrayList();
+        this.recipes = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug2 = debug1.readVarInt(), debug3 = 0; debug3 < debug2; ++debug3) {
             this.recipes.add(fromNetwork(debug1));
         }
@@ -52,15 +52,12 @@ public class ClientboundUpdateRecipesPacket implements Packet<ClientGamePacketLi
     public static Recipe<?> fromNetwork(final FriendlyByteBuf debug0) {
         final ResourceLocation debug = debug0.readResourceLocation();
         final ResourceLocation debug2 = debug0.readResourceLocation();
-        final Object o;
-        final Object obj;
         return (Recipe<?>)Registry.RECIPE_SERIALIZER.getOptional(debug).orElseThrow(() -> {
-            new IllegalArgumentException("Unknown recipe serializer " + obj);
-            return o;
+            return new IllegalArgumentException("Unknown recipe serializer " + debug2); // MagmaCube - decompile fix
         }).fromNetwork(debug2, debug0);
     }
     
-    public static <T extends Recipe<?>> void toNetwork(final T debug0, final FriendlyByteBuf debug1) {
+    public static <T extends Recipe> void toNetwork(T debug0, final FriendlyByteBuf debug1) { // MagmaCube - decompile fix
         debug1.writeResourceLocation(Registry.RECIPE_SERIALIZER.getKey(debug0.getSerializer()));
         debug1.writeResourceLocation(debug0.getId());
         debug0.getSerializer().toNetwork(debug1, debug0);
diff --git a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
index be63f198d8ac862371462c0b04b53af3911d3220..adacf2384f29f6524e3a61f9d33633178511dbc0 100644
--- a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
@@ -32,7 +32,7 @@ public class SynchedEntityData
     private boolean isDirty;
     
     public SynchedEntityData(final Entity debug1) {
-        this.itemsById = (Map<Integer, DataItem<?>>)Maps.newHashMap();
+        this.itemsById = Maps.newHashMap(); // MagmaCube - decompile fix
         this.lock = new ReentrantReadWriteLock();
         this.isEmpty = true;
         this.entity = debug1;
@@ -147,7 +147,7 @@ public class SynchedEntityData
                 if (debug2.isDirty()) {
                     debug2.setDirty(false);
                     if (debug1 == null) {
-                        debug1 = (List<DataItem<?>>)Lists.newArrayList();
+                        debug1 = Lists.newArrayList(); // MagmaCube - decompile fix
                     }
                     debug1.add(debug2.copy());
                 }
@@ -164,7 +164,7 @@ public class SynchedEntityData
         this.lock.readLock().lock();
         for (final DataItem<?> debug2 : this.itemsById.values()) {
             if (debug1 == null) {
-                debug1 = (List<DataItem<?>>)Lists.newArrayList();
+                debug1 = Lists.newArrayList(); // MagmaCube - decompile fix
             }
             debug1.add(debug2.copy());
         }
@@ -189,7 +189,7 @@ public class SynchedEntityData
         int debug2;
         while ((debug2 = debug0.readUnsignedByte()) != 255) {
             if (debug == null) {
-                debug = (List<DataItem<?>>)Lists.newArrayList();
+                debug = Lists.newArrayList(); // MagmaCube - decompile fix
             }
             final int debug3 = debug0.readVarInt();
             final EntityDataSerializer<?> debug4 = EntityDataSerializers.getSerializer(debug3);
diff --git a/src/main/java/net/minecraft/realms/RealmsConnect.java b/src/main/java/net/minecraft/realms/RealmsConnect.java
index 94b5b64abbf4bdd4e7975c2aa4fe7652445f86d0..a5c656a7501e04cc5c7a0db2e8d505473cafd60a 100644
--- a/src/main/java/net/minecraft/realms/RealmsConnect.java
+++ b/src/main/java/net/minecraft/realms/RealmsConnect.java
@@ -84,11 +84,12 @@ public class RealmsConnect {
                         debug33 = debug33.replaceAll((String)debug4, "");
                     }
                     debug4 = new DisconnectedRealmsScreen(RealmsConnect.this.onlineScreen, CommonComponents.CONNECT_FAILED, new TranslatableComponent("disconnect.genericReason", debug33));
-                    debug3.execute(() -> 1.lambda$run$2(debug3, (DisconnectedRealmsScreen)debug4));
+                    Object finalDebug = debug4; // MagmaCube - decompile fix
+                    debug3.execute(() -> lambda$run$2(debug3, (DisconnectedRealmsScreen) finalDebug)); // MagmaCube - decompile fix
                 }
             }
 
-            private static /* synthetic */ void lambda$run$2(Minecraft debug0, DisconnectedRealmsScreen debug12) {
+            private /* synthetic */ void lambda$run$2(Minecraft debug0, DisconnectedRealmsScreen debug12) { // MagmaCube - decompile fix
                 debug0.setScreen(debug12);
             }
         }.start();
diff --git a/src/main/java/net/minecraft/realms/RealmsObjectSelectionList.java b/src/main/java/net/minecraft/realms/RealmsObjectSelectionList.java
index 78bacae8cd9f1bdef6451ed792c999bf4aa1e29f..9884eea044baa28a319224a0434b9b4439c86d80 100644
--- a/src/main/java/net/minecraft/realms/RealmsObjectSelectionList.java
+++ b/src/main/java/net/minecraft/realms/RealmsObjectSelectionList.java
@@ -72,10 +72,5 @@ extends ObjectSelectionList<E> {
     public void clear() {
         this.clearEntries();
     }
-
-    @Override
-    public /* synthetic */ int addEntry(AbstractSelectionList.Entry entry) {
-        return this.addEntry((E)((ObjectSelectionList.Entry)entry));
-    }
 }
 
diff --git a/src/main/java/net/minecraft/recipebook/ServerPlaceRecipe.java b/src/main/java/net/minecraft/recipebook/ServerPlaceRecipe.java
index f27348e247c9efe7506c94bcdf135cf2d8e8950b..c9f7309ec4c281cb090bd69eb7cc6df8df07cbe8 100644
--- a/src/main/java/net/minecraft/recipebook/ServerPlaceRecipe.java
+++ b/src/main/java/net/minecraft/recipebook/ServerPlaceRecipe.java
@@ -178,7 +178,7 @@ public class ServerPlaceRecipe<C extends Container> implements PlaceRecipe<Integ
     }
     
     private boolean testClearGrid() {
-        final List<ItemStack> debug1 = (List<ItemStack>)Lists.newArrayList();
+        final List<ItemStack> debug1 = Lists.newArrayList(); // MagmaCube - decompile fix
         final int debug2 = this.getAmountOfFreeSlotsInInventory();
         for (int debug3 = 0; debug3 < this.menu.getGridWidth() * this.menu.getGridHeight() + 1; ++debug3) {
             if (debug3 != this.menu.getResultSlotIndex()) {
diff --git a/src/main/java/net/minecraft/resources/DelegatingOps.java b/src/main/java/net/minecraft/resources/DelegatingOps.java
index 8a9f97eba27bc6437a6f6be0626b6d3c8b556947..f750ece936a4b926f6706b021be9abb5a59c3e1c 100644
--- a/src/main/java/net/minecraft/resources/DelegatingOps.java
+++ b/src/main/java/net/minecraft/resources/DelegatingOps.java
@@ -27,11 +27,11 @@ public abstract class DelegatingOps<T> implements DynamicOps<T>
     }
     
     public <U> U convertTo(final DynamicOps<U> debug1, final T debug2) {
-        return (U)this.delegate.convertTo((DynamicOps)debug1, (Object)debug2);
+        return (U)this.delegate.convertTo((DynamicOps)debug1, debug2); // MagmaCube - decompile fix
     }
     
     public DataResult<Number> getNumberValue(final T debug1) {
-        return (DataResult<Number>)this.delegate.getNumberValue((Object)debug1);
+        return (DataResult<Number>)this.delegate.getNumberValue(debug1); // MagmaCube - decompile fix
     }
     
     public T createNumeric(final Number debug1) {
@@ -63,7 +63,7 @@ public abstract class DelegatingOps<T> implements DynamicOps<T>
     }
     
     public DataResult<Boolean> getBooleanValue(final T debug1) {
-        return (DataResult<Boolean>)this.delegate.getBooleanValue((Object)debug1);
+        return (DataResult<Boolean>)this.delegate.getBooleanValue(debug1); // MagmaCube - decompile fix
     }
     
     public T createBoolean(final boolean debug1) {
@@ -71,7 +71,7 @@ public abstract class DelegatingOps<T> implements DynamicOps<T>
     }
     
     public DataResult<String> getStringValue(final T debug1) {
-        return (DataResult<String>)this.delegate.getStringValue((Object)debug1);
+        return (DataResult<String>)this.delegate.getStringValue(debug1); // MagmaCube - decompile fix
     }
     
     public T createString(final String debug1) {
@@ -79,27 +79,27 @@ public abstract class DelegatingOps<T> implements DynamicOps<T>
     }
     
     public DataResult<T> mergeToList(final T debug1, final T debug2) {
-        return (DataResult<T>)this.delegate.mergeToList((Object)debug1, (Object)debug2);
+        return (DataResult<T>)this.delegate.mergeToList(debug1, debug2); // MagmaCube - decompile fix
     }
     
     public DataResult<T> mergeToList(final T debug1, final List<T> debug2) {
-        return (DataResult<T>)this.delegate.mergeToList((Object)debug1, (List)debug2);
+        return (DataResult<T>)this.delegate.mergeToList(debug1, (List)debug2); // MagmaCube - decompile fix
     }
     
     public DataResult<T> mergeToMap(final T debug1, final T debug2, final T debug3) {
-        return (DataResult<T>)this.delegate.mergeToMap((Object)debug1, (Object)debug2, (Object)debug3);
+        return (DataResult<T>)this.delegate.mergeToMap(debug1, debug2, debug3); // MagmaCube - decompile fix
     }
     
     public DataResult<T> mergeToMap(final T debug1, final MapLike<T> debug2) {
-        return (DataResult<T>)this.delegate.mergeToMap((Object)debug1, (MapLike)debug2);
+        return (DataResult<T>)this.delegate.mergeToMap(debug1, (MapLike)debug2); // MagmaCube - decompile fix
     }
     
     public DataResult<Stream<Pair<T, T>>> getMapValues(final T debug1) {
-        return (DataResult<Stream<Pair<T, T>>>)this.delegate.getMapValues((Object)debug1);
+        return (DataResult<Stream<Pair<T, T>>>)this.delegate.getMapValues(debug1); // MagmaCube - decompile fix
     }
     
     public DataResult<Consumer<BiConsumer<T, T>>> getMapEntries(final T debug1) {
-        return (DataResult<Consumer<BiConsumer<T, T>>>)this.delegate.getMapEntries((Object)debug1);
+        return (DataResult<Consumer<BiConsumer<T, T>>>)this.delegate.getMapEntries(debug1); // MagmaCube - decompile fix
     }
     
     public T createMap(final Stream<Pair<T, T>> debug1) {
@@ -107,15 +107,15 @@ public abstract class DelegatingOps<T> implements DynamicOps<T>
     }
     
     public DataResult<MapLike<T>> getMap(final T debug1) {
-        return (DataResult<MapLike<T>>)this.delegate.getMap((Object)debug1);
+        return (DataResult<MapLike<T>>)this.delegate.getMap(debug1); // MagmaCube - decompile fix
     }
     
     public DataResult<Stream<T>> getStream(final T debug1) {
-        return (DataResult<Stream<T>>)this.delegate.getStream((Object)debug1);
+        return (DataResult<Stream<T>>)this.delegate.getStream(debug1); // MagmaCube - decompile fix
     }
     
     public DataResult<Consumer<Consumer<T>>> getList(final T debug1) {
-        return (DataResult<Consumer<Consumer<T>>>)this.delegate.getList((Object)debug1);
+        return (DataResult<Consumer<Consumer<T>>>)this.delegate.getList(debug1); // MagmaCube - decompile fix
     }
     
     public T createList(final Stream<T> debug1) {
@@ -123,7 +123,7 @@ public abstract class DelegatingOps<T> implements DynamicOps<T>
     }
     
     public DataResult<ByteBuffer> getByteBuffer(final T debug1) {
-        return (DataResult<ByteBuffer>)this.delegate.getByteBuffer((Object)debug1);
+        return (DataResult<ByteBuffer>)this.delegate.getByteBuffer(debug1); // MagmaCube - decompile fix
     }
     
     public T createByteList(final ByteBuffer debug1) {
@@ -131,7 +131,7 @@ public abstract class DelegatingOps<T> implements DynamicOps<T>
     }
     
     public DataResult<IntStream> getIntStream(final T debug1) {
-        return (DataResult<IntStream>)this.delegate.getIntStream((Object)debug1);
+        return (DataResult<IntStream>)this.delegate.getIntStream(debug1); // MagmaCube - decompile fix
     }
     
     public T createIntList(final IntStream debug1) {
@@ -139,7 +139,7 @@ public abstract class DelegatingOps<T> implements DynamicOps<T>
     }
     
     public DataResult<LongStream> getLongStream(final T debug1) {
-        return (DataResult<LongStream>)this.delegate.getLongStream((Object)debug1);
+        return (DataResult<LongStream>)this.delegate.getLongStream(debug1); // MagmaCube - decompile fix
     }
     
     public T createLongList(final LongStream debug1) {
@@ -147,7 +147,7 @@ public abstract class DelegatingOps<T> implements DynamicOps<T>
     }
     
     public T remove(final T debug1, final String debug2) {
-        return (T)this.delegate.remove((Object)debug1, debug2);
+        return (T)this.delegate.remove(debug1, debug2); // MagmaCube - decompile fix
     }
     
     public boolean compressMaps() {
diff --git a/src/main/java/net/minecraft/resources/RegistryLookupCodec.java b/src/main/java/net/minecraft/resources/RegistryLookupCodec.java
index afc0214144bf61e94c38dcd21d6b9c311551e022..f45a35f3b71bc6ec6bd0ba9c5550264a40341dd3 100644
--- a/src/main/java/net/minecraft/resources/RegistryLookupCodec.java
+++ b/src/main/java/net/minecraft/resources/RegistryLookupCodec.java
@@ -50,9 +50,5 @@ extends MapCodec<Registry<E>> {
     public <T> Stream<T> keys(DynamicOps<T> debug1) {
         return Stream.empty();
     }
-
-    public /* synthetic */ RecordBuilder encode(Object object, DynamicOps dynamicOps, RecordBuilder recordBuilder) {
-        return this.encode((Registry)object, dynamicOps, recordBuilder);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/resources/RegistryReadOps.java b/src/main/java/net/minecraft/resources/RegistryReadOps.java
index 7e95c395b24edef3d813fbf21126c2519885e174..7df5e57deae2b92d92e03aad1956b90e97cb75bc 100644
--- a/src/main/java/net/minecraft/resources/RegistryReadOps.java
+++ b/src/main/java/net/minecraft/resources/RegistryReadOps.java
@@ -26,6 +26,7 @@ import com.google.common.base.Supplier;
 import com.google.common.base.Suppliers;
 import com.google.common.collect.Maps;
 import com.google.gson.JsonElement;
+import com.google.gson.JsonParser;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
@@ -36,6 +37,11 @@ import com.mojang.serialization.JsonOps;
 import com.mojang.serialization.Lifecycle;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenCustomHashMap;
+
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.IdentityHashMap;
 import java.util.Map;
@@ -51,6 +57,7 @@ import net.minecraft.resources.DelegatingOps;
 import net.minecraft.resources.RegistryWriteOps;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.packs.resources.Resource;
 import net.minecraft.server.packs.resources.ResourceManager;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -78,30 +85,30 @@ extends DelegatingOps<T> {
         this.resources = debug2;
         this.registryHolder = debug3;
         this.readCache = debug4;
-        this.jsonOps = debug1 == JsonOps.INSTANCE ? this : new RegistryReadOps<T>(JsonOps.INSTANCE, debug2, debug3, (IdentityHashMap<ResourceKey<Registry<?>>, ReadCache<?>>)debug4);
+        this.jsonOps = (debug1 == JsonOps.INSTANCE) ? (RegistryReadOps)this : new RegistryReadOps((DynamicOps<T>)JsonOps.INSTANCE, debug2, debug3, debug4); // MagmaCube - decompile fix
     }
 
     protected <E> DataResult<Pair<java.util.function.Supplier<E>, T>> decodeElement(T debug12, ResourceKey<? extends Registry<E>> debug2, Codec<E> debug3, boolean debug4) {
-        Optional debug5 = this.registryHolder.registry(debug2);
+        Optional<WritableRegistry<E>> debug5 = this.registryHolder.registry(debug2); // MagmaCube - decompile fix
         if (!debug5.isPresent()) {
             return DataResult.error((String)("Unknown registry: " + debug2));
         }
         WritableRegistry debug6 = debug5.get();
-        DataResult debug7 = ResourceLocation.CODEC.decode(this.delegate, debug12);
+        DataResult<Pair<ResourceLocation, T>> debug7 = ResourceLocation.CODEC.decode(this.delegate, debug12); // MagmaCube - decompile fix
         if (!debug7.result().isPresent()) {
             if (!debug4) {
                 return DataResult.error((String)"Inline definitions not allowed here");
             }
-            return debug3.decode((DynamicOps)this, debug12).map(debug02 -> debug02.mapFirst(debug0 -> () -> debug0));
+            return debug3.decode(this, debug12).map(debug02 -> debug02.mapFirst(debug0 -> () -> debug0)); // MagmaCube - decompile fix
         }
-        Pair debug8 = (Pair)debug7.result().get();
+        Pair<ResourceLocation, T> debug8 = debug7.result().get(); // MagmaCube - decompile fix
         ResourceLocation debug9 = (ResourceLocation)debug8.getFirst();
         return this.readAndRegisterElement(debug2, debug6, debug3, debug9).map(debug1 -> Pair.of((Object)debug1, (Object)debug8.getSecond()));
     }
 
     public <E> DataResult<MappedRegistry<E>> decodeElements(MappedRegistry<E> debug1, ResourceKey<? extends Registry<E>> debug2, Codec<E> debug3) {
         Collection<ResourceLocation> debug42 = this.resources.listResources(debug2);
-        DataResult debug5 = DataResult.success(debug1, (Lifecycle)Lifecycle.stable());
+        DataResult<MappedRegistry<E>> debug5 = DataResult.success(debug1, (Lifecycle)Lifecycle.stable()); // MagmaCube - decompile fix
         String debug6 = debug2.location().getPath() + "/";
         for (ResourceLocation debug8 : debug42) {
             String debug9 = debug8.getPath();
@@ -115,16 +122,16 @@ extends DelegatingOps<T> {
             }
             String debug10 = debug9.substring(debug6.length(), debug9.length() - ".json".length());
             ResourceLocation debug11 = new ResourceLocation(debug8.getNamespace(), debug10);
-            debug5 = debug5.flatMap(debug4 -> this.readAndRegisterElement(debug2, (WritableRegistry)debug4, debug3, debug11).map(debug1 -> debug4));
+            debug5 = debug5.flatMap(debug4 -> this.readAndRegisterElement(debug2, (WritableRegistry)debug4, debug3, debug11).map(debug12 -> debug4));
         }
         return debug5.setPartial(debug1);
     }
 
-    private <E> DataResult<java.util.function.Supplier<E>> readAndRegisterElement(ResourceKey<? extends Registry<E>> debug1, WritableRegistry<E> debug22, Codec<E> debug3, ResourceLocation debug4) {
-        Pair debug11;
-        ResourceKey debug5 = ResourceKey.create(debug1, debug4);
+    private <E> DataResult<Supplier<E>> readAndRegisterElement(ResourceKey<? extends Registry<E>> debug1, WritableRegistry<E> debug22, Codec<E> debug3, ResourceLocation debug4) {
+        DataResult<Supplier<E>> debug11; // MagmaCube - decompile fix
+        ResourceKey<E> debug5 = ResourceKey.create(debug1, debug4);
         ReadCache<E> debug6 = this.readCache(debug1);
-        DataResult debug7 = (DataResult)((ReadCache)debug6).values.get(debug5);
+        DataResult<Supplier<E>> debug7 = (DataResult)(debug6).values.get(debug5);
         if (debug7 != null) {
             return debug7;
         }
@@ -136,11 +143,11 @@ extends DelegatingOps<T> {
             return debug2;
         });
         ((ReadCache)debug6).values.put(debug5, DataResult.success((Object)debug8));
-        DataResult debug9 = this.resources.parseElement((DynamicOps<JsonElement>)this.jsonOps, debug1, debug5, debug3);
-        Optional debug10 = debug9.result();
+        DataResult<Pair<E, OptionalInt>> debug9 = this.resources.parseElement(this.jsonOps, debug1, debug5, debug3); // MagmaCube - decompile fix
+        Optional<Pair<E, OptionalInt>> debug10 = debug9.result(); // MagmaCube - decompile fix
         if (debug10.isPresent()) {
-            debug11 = (Pair)debug10.get();
-            debug22.registerOrOverride((OptionalInt)debug11.getSecond(), debug5, debug11.getFirst(), debug9.lifecycle());
+            Pair<E, OptionalInt> pair = debug10.get(); // MagmaCube - decompile fix
+            debug22.registerOrOverride((OptionalInt)pair.getSecond(), debug5, pair.getFirst(), debug9.lifecycle()); // MagmaCube - decompile fix
         }
         debug11 = !debug10.isPresent() && debug22.get(debug5) != null ? DataResult.success(() -> debug22.get(debug5), (Lifecycle)Lifecycle.stable()) : debug9.map(debug2 -> () -> debug22.get(debug5));
         ((ReadCache)debug6).values.put(debug5, debug11);
@@ -148,11 +155,13 @@ extends DelegatingOps<T> {
     }
 
     private <E> ReadCache<E> readCache(ResourceKey<? extends Registry<E>> debug1) {
-        return this.readCache.computeIfAbsent(debug1, debug0 -> new ReadCache());
+        return (ReadCache<E>) this.readCache.computeIfAbsent(debug1, debug0 -> new ReadCache()); // MagmaCube - decompile fix
     }
 
-    protected <E> DataResult<Registry<E>> registry(ResourceKey<? extends Registry<E>> debug1) {
-        return this.registryHolder.registry(debug1).map(debug0 -> DataResult.success((Object)debug0, (Lifecycle)debug0.elementsLifecycle())).orElseGet(() -> DataResult.error((String)("Unknown registry: " + debug1)));
+    protected <E> DataResult<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> debug1) {
+        return this.registryHolder.registry(debug1)
+                .map(debug0 -> DataResult.success(debug0, debug0.elementsLifecycle()))
+                .orElseGet(() -> DataResult.error("Unknown registry: " + debug1));
     }
 
     public static interface ResourceAccess {
@@ -173,38 +182,23 @@ extends DelegatingOps<T> {
                  */
                 @Override
                 public <E> DataResult<Pair<E, OptionalInt>> parseElement(DynamicOps<JsonElement> debug1, ResourceKey<? extends Registry<E>> debug2, ResourceKey<E> debug3, Decoder<E> debug4) {
-                    /*
-                     * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-                     * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 5[TRYBLOCK]
-                     * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-                     * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-                     * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-                     * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-                     * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-                     * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-                     * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-                     * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseInnerClassesPass1(ClassFile.java:903)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1015)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseInnerClassesPass1(ClassFile.java:903)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1015)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-                     * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-                     * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-                     * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-                     * org.benf.cfr.reader.Main.main(Main.java:49)
-                     */
-                    throw new IllegalStateException(Decompilation failed);
+                    // MagmaCube start - decompile fix
+                    ResourceLocation debug5 = debug3.location();
+                    ResourceLocation debug6 = new ResourceLocation(debug5.getNamespace(), debug2.location().getPath() + "/" + debug5.getPath() + ".json");
+                    try(Resource debug7 = debug0.getResource(debug6);
+                        Reader debug9 = new InputStreamReader(debug7.getInputStream(), StandardCharsets.UTF_8)) {
+                        JsonParser debug11 = new JsonParser();
+                        JsonElement debug12 = debug11.parse(debug9);
+                        return debug4.parse(debug1, debug12).map(debug0 -> Pair.of(debug0, OptionalInt.empty()));
+                    } catch (IOException |com.google.gson.JsonIOException|com.google.gson.JsonSyntaxException debug7) {
+                        return DataResult.error("Failed to parse " + debug6 + " file: " + debug7.getMessage());
+                    }
+                    // MagmaCube end - decompile fix
                 }
 
                 public String toString() {
                     return "ResourceAccess[" + debug0 + "]";
                 }
-
-                private static /* synthetic */ Pair lambda$parseElement$1(Object debug02) {
-                    return Pair.of((Object)debug02, (Object)OptionalInt.empty());
-                }
             };
         }
 
@@ -237,7 +231,7 @@ extends DelegatingOps<T> {
                 if (debug5 == null) {
                     return DataResult.error((String)("Unknown element: " + debug3));
                 }
-                return debug4.parse(debug1, (Object)debug5).setLifecycle(this.lifecycles.get(debug3)).map(debug2 -> Pair.of((Object)debug2, (Object)OptionalInt.of(this.ids.getInt((Object)debug3))));
+                return debug4.parse(debug1, debug5).setLifecycle(this.lifecycles.get(debug3)).map(debug2 -> Pair.of(debug2, OptionalInt.of(this.ids.getInt((Object)debug3)))); // MagmaCube - decompile fix
             }
         }
     }
diff --git a/src/main/java/net/minecraft/resources/RegistryWriteOps.java b/src/main/java/net/minecraft/resources/RegistryWriteOps.java
index 76a6c2704f633f0201385629fb367c33f6a592da..d19d2b1a2d2703f0922f61c0467c2438e7db39ba 100644
--- a/src/main/java/net/minecraft/resources/RegistryWriteOps.java
+++ b/src/main/java/net/minecraft/resources/RegistryWriteOps.java
@@ -33,12 +33,12 @@ extends DelegatingOps<T> {
     }
 
     protected <E> DataResult<T> encode(E debug1, T debug2, ResourceKey<? extends Registry<E>> debug3, Codec<E> debug4) {
-        WritableRegistry debug6;
+        WritableRegistry<E> debug6; // MagmaCube - decompile fix
         Optional<ResourceKey<E>> debug7;
-        Optional debug5 = this.registryHolder.registry(debug3);
+        Optional<WritableRegistry<E>> debug5 = this.registryHolder.registry(debug3); // MagmaCube - decompile fix
         if (debug5.isPresent() && (debug7 = (debug6 = debug5.get()).getResourceKey(debug1)).isPresent()) {
             ResourceKey<E> debug8 = debug7.get();
-            return ResourceLocation.CODEC.encode((Object)debug8.location(), this.delegate, debug2);
+            return ResourceLocation.CODEC.encode(debug8.location(), this.delegate, debug2); // MagmaCube - decompile fix
         }
         return debug4.encode(debug1, (DynamicOps)this, debug2);
     }
diff --git a/src/main/java/net/minecraft/resources/ResourceKey.java b/src/main/java/net/minecraft/resources/ResourceKey.java
index 0fb36e7366b900108988e2ee88ecec5d5cad4e69..25605c632ae8bd9667e38ff404b227c4f7631d57 100644
--- a/src/main/java/net/minecraft/resources/ResourceKey.java
+++ b/src/main/java/net/minecraft/resources/ResourceKey.java
@@ -22,7 +22,7 @@ public class ResourceKey<T>
     
     private static <T> ResourceKey<T> create(final ResourceLocation debug0, final ResourceLocation debug1) {
         final String debug2 = (debug0 + ":" + debug1).intern();
-        return (ResourceKey<T>)ResourceKey.VALUES.computeIfAbsent(debug2, debug2 -> new ResourceKey(debug0, debug1));
+        return (ResourceKey<T>)ResourceKey.VALUES.computeIfAbsent(debug2, debug2l -> new ResourceKey(debug0, debug1)); // MagmaCube - decompile fix
     }
     
     private ResourceKey(final ResourceLocation debug1, final ResourceLocation debug2) {
@@ -44,10 +44,10 @@ public class ResourceKey<T>
     }
     
     public static <T> Function<ResourceLocation, ResourceKey<T>> elementKey(final ResourceKey<? extends Registry<T>> debug0) {
-        return (Function<ResourceLocation, ResourceKey<T>>)(debug1 -> create((ResourceKey<? extends Registry<Object>>)debug0, debug1));
+        return (Function<ResourceLocation, ResourceKey<T>>)(debug1 -> create(debug0, debug1)); // MagmaCube - decompile fix
     }
     
     static {
-        VALUES = Collections.synchronizedMap((Map<String, ResourceKey<?>>)Maps.newIdentityHashMap());
+        VALUES = Collections.synchronizedMap(Maps.newIdentityHashMap()); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/resources/ResourceLocation.java b/src/main/java/net/minecraft/resources/ResourceLocation.java
index c26709be4909a269c2a65674341565575f48012f..f2275fb9bbb54d6e4ee84322cde63c807129fb84 100644
--- a/src/main/java/net/minecraft/resources/ResourceLocation.java
+++ b/src/main/java/net/minecraft/resources/ResourceLocation.java
@@ -76,10 +76,10 @@ public class ResourceLocation implements Comparable<ResourceLocation>
     
     private static DataResult<ResourceLocation> read(final String debug0) {
         try {
-            return (DataResult<ResourceLocation>)DataResult.success((Object)new ResourceLocation(debug0));
+            return (DataResult<ResourceLocation>)DataResult.success(new ResourceLocation(debug0)); // MagmaCube - decompile fix
         }
         catch (ResourceLocationException debug) {
-            return (DataResult<ResourceLocation>)DataResult.error("Not a valid resource location: " + debug0 + " " + debug.getMessage());
+            return DataResult.error("Not a valid resource location: " + debug0 + " " + debug.getMessage()); // MagmaCube - decompile fix
         }
     }
     
@@ -173,7 +173,7 @@ public class ResourceLocation implements Comparable<ResourceLocation>
     }
     
     static {
-        CODEC = Codec.STRING.comapFlatMap((Function)ResourceLocation::read, (Function)ResourceLocation::toString).stable();
+        CODEC = Codec.STRING.comapFlatMap(ResourceLocation::read, ResourceLocation::toString).stable(); // MagmaCube - decompile fix
         ERROR_INVALID = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.id.invalid"));
     }
     
diff --git a/src/main/java/net/minecraft/server/ChainedJsonException.java b/src/main/java/net/minecraft/server/ChainedJsonException.java
index 81deaf3abb58fd337068d12f2c0957aa313bb8ff..cad80a2be3bdbf3616fcb75d15aa4e791f65cd13 100644
--- a/src/main/java/net/minecraft/server/ChainedJsonException.java
+++ b/src/main/java/net/minecraft/server/ChainedJsonException.java
@@ -13,13 +13,13 @@ public class ChainedJsonException extends IOException
     private final String message;
     
     public ChainedJsonException(final String debug1) {
-        (this.entries = (List<Entry>)Lists.newArrayList()).add(new Entry());
+        (this.entries = Lists.newArrayList()).add(new Entry()); // MagmaCube - decompile fix
         this.message = debug1;
     }
     
     public ChainedJsonException(final String debug1, final Throwable debug2) {
         super(debug2);
-        (this.entries = (List<Entry>)Lists.newArrayList()).add(new Entry());
+        (this.entries = Lists.newArrayList()).add(new Entry()); // MagmaCube - decompile fix
         this.message = debug1;
     }
     
@@ -55,7 +55,7 @@ public class ChainedJsonException extends IOException
         private final List<String> jsonKeys;
         
         private Entry() {
-            this.jsonKeys = (List<String>)Lists.newArrayList();
+            this.jsonKeys = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         private void addJsonKey(final String debug1) {
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index a56b3cba1a805421fbb29be2e95a7312246a23e2..d2a40b38490a9600da938af88981ebb44f959777 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -53,10 +53,6 @@ import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.resources.RegistryReadOps;
 import net.minecraft.resources.ResourceKey;
-import net.minecraft.server.Bootstrap;
-import net.minecraft.server.Eula;
-import net.minecraft.server.MinecraftServer;
-import net.minecraft.server.ServerResources;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.server.dedicated.DedicatedServerProperties;
 import net.minecraft.server.dedicated.DedicatedServerSettings;
@@ -95,15 +91,12 @@ public class Main {
         OptionSpecBuilder debug8 = debug1.accepts("safeMode", "Loads level with vanilla datapack only");
         AbstractOptionSpec debug9 = debug1.accepts("help").forHelp();
         ArgumentAcceptingOptionSpec debug10 = debug1.accepts("singleplayer").withRequiredArg();
-        ArgumentAcceptingOptionSpec debug11 = debug1.accepts("universe").withRequiredArg().defaultsTo((Object)".", (Object[])new String[0]);
+        ArgumentAcceptingOptionSpec debug11 = debug1.accepts("universe").withRequiredArg().defaultsTo(".", new String[0]); // MagmaCube - decompile fix
         ArgumentAcceptingOptionSpec debug12 = debug1.accepts("world").withRequiredArg();
-        ArgumentAcceptingOptionSpec debug13 = debug1.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo((Object)-1, (Object[])new Integer[0]);
+        ArgumentAcceptingOptionSpec debug13 = debug1.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1, new Integer[0]); // MagmaCube - decompile fix
         ArgumentAcceptingOptionSpec debug14 = debug1.accepts("serverId").withRequiredArg();
         NonOptionArgumentSpec debug15 = debug1.nonOptions();
         try {
-            Object debug40;
-            Object debug39;
-            Object debug38;
             ServerResources debug35;
             OptionSet debug16 = debug1.parse(debug0);
             if (debug16.has((OptionSpec)debug9)) {
@@ -157,6 +150,9 @@ public class Main {
             RegistryReadOps<Tag> debug36 = RegistryReadOps.create(NbtOps.INSTANCE, debug35.getResourceManager(), debug17);
             WorldData debug37 = debug29.getDataTag(debug36, debug33);
             if (debug37 == null) {
+                LevelSettings debug38; // MagmaCube - decompile fix
+                WorldGenSettings debug39; // MagmaCube - decompile fix
+                DedicatedServerProperties debug40; // MagmaCube - decompile fix
                 if (debug16.has((OptionSpec)debug4)) {
                     debug38 = MinecraftServer.DEMO_SETTINGS;
                     debug39 = WorldGenSettings.demoSettings(debug17);
@@ -171,18 +167,12 @@ public class Main {
                 Main.forceUpgrade(debug29, DataFixers.getDataFixer(), debug16.has((OptionSpec)debug7), () -> true, debug37.worldGenSettings().levels());
             }
             debug29.saveDataTag(debug17, debug37);
-            debug38 = debug37;
-            debug39 = MinecraftServer.spin(arg_0 -> Main.lambda$main$1(debug17, debug29, debug32, debug35, (WorldData)debug38, debug19, debug24, debug25, debug26, debug16, (OptionSpec)debug10, (OptionSpec)debug13, (OptionSpec)debug4, (OptionSpec)debug14, (OptionSpec)debug2, (OptionSpec)debug15, arg_0));
-            debug40 = new Thread("Server Shutdown Thread", (DedicatedServer)debug39){
-                final /* synthetic */ DedicatedServer val$dedicatedServer;
-                {
-                    this.val$dedicatedServer = dedicatedServer;
-                    super(debug1);
-                }
-
+            WorldData debug38 = debug37; // MagmaCube - decompile fix
+            DedicatedServer debug39 = MinecraftServer.spin(arg_0 -> Main.lambda$1(debug17, debug29, debug32, debug35, (WorldData)debug38, debug19, debug24, debug25, debug26, debug16, (OptionSpec)debug10, (OptionSpec)debug13, (OptionSpec)debug4, (OptionSpec)debug14, (OptionSpec)debug2, (OptionSpec)debug15, arg_0)); // MagmaCube - decompile fix
+            Thread debug40 = new Thread("Server Shutdown Thread"){ // MagmaCube - decompile fix
                 @Override
                 public void run() {
-                    this.val$dedicatedServer.halt(true);
+                    debug39.halt(true); // MagmaCube - decompile fix
                 }
             };
             ((Thread)debug40).setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
@@ -219,7 +209,7 @@ public class Main {
         }
     }
 
-    private static /* synthetic */ DedicatedServer lambda$main$1(RegistryAccess.RegistryHolder debug0, LevelStorageSource.LevelStorageAccess debug1, PackRepository debug2, ServerResources debug3, WorldData debug4, DedicatedServerSettings debug5, MinecraftSessionService debug6, GameProfileRepository debug7, GameProfileCache debug8, OptionSet debug9, OptionSpec debug10, OptionSpec debug11, OptionSpec debug12, OptionSpec debug13, OptionSpec debug14, OptionSpec debug15, Thread debug16) {
+    private static /* synthetic */ DedicatedServer lambda$1(RegistryAccess.RegistryHolder debug0, LevelStorageSource.LevelStorageAccess debug1, PackRepository debug2, ServerResources debug3, WorldData debug4, DedicatedServerSettings debug5, MinecraftSessionService debug6, GameProfileRepository debug7, GameProfileCache debug8, OptionSet debug9, OptionSpec debug10, OptionSpec debug11, OptionSpec debug12, OptionSpec debug13, OptionSpec debug14, OptionSpec debug15, Thread debug16) {
         boolean debug18;
         DedicatedServer debug17 = new DedicatedServer(debug16, debug0, debug1, debug2, debug3, debug4, debug5, DataFixers.getDataFixer(), debug6, debug7, debug8, LoggerChunkProgressListener::new);
         debug17.setSingleplayerName((String)debug9.valueOf(debug10));
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 4b392ea488dda60067b837c70f8fd98a9160cee8..6a2da4aaacffbd23a1e7cadabd9bdea8043f97ca 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -394,7 +394,7 @@ AutoCloseable {
             DimensionType debug21 = debug18.getValue().type();
             ChunkGenerator debug22 = debug18.getValue().generator();
             DerivedLevelData debug23 = new DerivedLevelData(this.worldData, debug2);
-            ServerLevel debug24 = new ServerLevel(this, this.executor, this.storageSource, debug23, debug20, debug21, debug1, debug22, debug4, debug7, (List<CustomSpawner>)ImmutableList.of(), false);
+            ServerLevel debug24 = new ServerLevel(this, this.executor, this.storageSource, debug23, debug20, debug21, debug1, debug22, debug4, debug7, ImmutableList.of(), false); // MagmaCube - decompile fix
             debug16.addListener(new BorderChangeListener.DelegateBorderChangeListener(debug24.getWorldBorder()));
             this.levels.put(debug20, debug24);
         }
@@ -896,14 +896,14 @@ AutoCloseable {
             debug1.getSystemDetails().setDetail("Player Count", () -> this.playerList.getPlayerCount() + " / " + this.playerList.getMaxPlayers() + "; " + this.playerList.getPlayers());
         }
         debug1.getSystemDetails().setDetail("Data Packs", () -> {
-            StringBuilder debug1 = new StringBuilder();
+            StringBuilder debug12 = new StringBuilder(); // MagmaCube - decompile fix
             for (Pack debug3 : this.packRepository.getSelectedPacks()) {
-                if (debug1.length() > 0) {
-                    debug1.append(", ");
+                if (debug12.length() > 0) { // MagmaCube - decompile fix
+                    debug12.append(", "); // MagmaCube - decompile fix
                 }
-                debug1.append(debug3.getId());
+                debug12.append(debug3.getId()); // MagmaCube - decompile fix
                 if (debug3.getCompatibility().isCompatible()) continue;
-                debug1.append(" (incompatible)");
+                debug12.append(" (incompatible)"); // MagmaCube - decompile fix
             }
             return debug1.toString();
         });
@@ -1224,7 +1224,7 @@ AutoCloseable {
     }
 
     public CompletableFuture<Void> reloadResources(Collection<String> debug12) {
-        CompletionStage debug22 = ((CompletableFuture)CompletableFuture.supplyAsync(() -> (ImmutableList)debug12.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()), this).thenCompose(debug1 -> ServerResources.loadResources((List<PackResources>)debug1, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this))).thenAcceptAsync(debug2 -> {
+        CompletableFuture<Void> debug22 = (CompletableFuture.supplyAsync(() -> (ImmutableList)debug12.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()), this).thenCompose(debug1 -> ServerResources.loadResources((List<PackResources>)debug1, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this))).thenAcceptAsync(debug2 -> { // MagmaCube - decompile fix
             this.resources.close();
             this.resources = debug2;
             this.packRepository.setSelected(debug12);
@@ -1245,7 +1245,7 @@ AutoCloseable {
         debug0.reload();
         if (debug2) {
             debug0.setSelected(Collections.singleton("vanilla"));
-            return new DataPackConfig((List<String>)ImmutableList.of((Object)"vanilla"), (List<String>)ImmutableList.of());
+            return new DataPackConfig(ImmutableList.of("vanilla"), ImmutableList.of()); // MagmaCube - decompile fix
         }
         LinkedHashSet debug3 = Sets.newLinkedHashSet();
         for (String string : debug1.getEnabled()) {
@@ -1282,7 +1282,7 @@ AutoCloseable {
         }
         PlayerList debug2 = debug1.getServer().getPlayerList();
         UserWhiteList debug3 = debug2.getWhiteList();
-        ArrayList debug4 = Lists.newArrayList(debug2.getPlayers());
+        ArrayList<ServerPlayer> debug4 = Lists.newArrayList(debug2.getPlayers()); // MagmaCube - decompile fix
         for (ServerPlayer debug6 : debug4) {
             if (debug3.isWhiteListed(debug6.getGameProfile())) continue;
             debug6.connection.disconnect(new TranslatableComponent("multiplayer.disconnect.not_whitelisted"));
@@ -1420,7 +1420,7 @@ AutoCloseable {
 
     private void dumpGameRules(Path debug1) throws IOException {
         try (BufferedWriter debug2 = Files.newBufferedWriter(debug1, new OpenOption[0]);){
-            final ArrayList debug4 = Lists.newArrayList();
+            final ArrayList<String> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
             final GameRules debug5 = this.getGameRules();
             GameRules.visitGameRuleTypes(new GameRules.GameRuleTypeVisitor(){
 
@@ -1506,20 +1506,5 @@ AutoCloseable {
     public RegistryAccess registryAccess() {
         return this.registryHolder;
     }
-
-    @Override
-    public /* synthetic */ void doRunTask(Runnable runnable) {
-        this.doRunTask((TickTask)runnable);
-    }
-
-    @Override
-    public /* synthetic */ boolean shouldRun(Runnable runnable) {
-        return this.shouldRun((TickTask)runnable);
-    }
-
-    @Override
-    public /* synthetic */ Runnable wrapRunnable(Runnable runnable) {
-        return this.wrapRunnable(runnable);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index 53e9c1663a1ea8198807053c5e4b0dbdb56289cd..0aef54996087d6055d5ce1d2858b681b9aab842d 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -132,10 +132,10 @@ public class PlayerAdvancements {
     }
 
     private void ensureAllVisible() {
-        ArrayList debug1 = Lists.newArrayList();
+        ArrayList<Map.Entry<Advancement, AdvancementProgress>> debug1 = Lists.newArrayList();
         for (Map.Entry<Advancement, AdvancementProgress> debug3 : this.advancements.entrySet()) {
             if (!debug3.getValue().isDone()) continue;
-            debug1.add(debug3.getKey());
+            debug1.add(debug3); // MagmaCube - decompile fix - original code: debug1.add(debug3.getKey());
             this.progressChanged.add((Advancement)debug3.getKey());
         }
         for (Map.Entry<Advancement, AdvancementProgress> debug3 : debug1) {
@@ -165,7 +165,7 @@ public class PlayerAdvancements {
                 if (debug5 == null) {
                     throw new JsonParseException("Found null for advancements");
                 }
-                Stream<Map.Entry> debug6 = debug5.entrySet().stream().sorted(Comparator.comparing(Map.Entry::getValue));
+                Stream<Map.Entry> debug6 = debug5.entrySet().stream().sorted(Map.Entry.comparingByValue()); // MagmaCube - decompile fix
                 for (Map.Entry debug8 : debug6.collect(Collectors.toList())) {
                     Advancement debug9 = debug1.getAdvancement((ResourceLocation)debug8.getKey());
                     if (debug9 == null) {
@@ -200,8 +200,7 @@ public class PlayerAdvancements {
         JsonElement debug2 = GSON.toJsonTree((Object)debug1);
         debug2.getAsJsonObject().addProperty("DataVersion", (Number)SharedConstants.getCurrentVersion().getWorldVersion());
         try {
-            Map.Entry<Advancement, AdvancementProgress> debug3;
-            debug3 = new FileOutputStream(this.file);
+            FileOutputStream debug3 = new FileOutputStream(this.file); // MagmaCube - decompile fix
             Throwable throwable = null;
             try (OutputStreamWriter debug5 = new OutputStreamWriter((OutputStream)((Object)debug3), Charsets.UTF_8.newEncoder());){
                 GSON.toJson(debug2, (Appendable)debug5);
diff --git a/src/main/java/net/minecraft/server/ServerAdvancementManager.java b/src/main/java/net/minecraft/server/ServerAdvancementManager.java
index f02728d98f31dc71bac30e3bdc83b53e45d06d5d..1448848cf688876f6287f46b2b3a1985ff3cce22 100644
--- a/src/main/java/net/minecraft/server/ServerAdvancementManager.java
+++ b/src/main/java/net/minecraft/server/ServerAdvancementManager.java
@@ -38,21 +38,15 @@ public class ServerAdvancementManager extends SimpleJsonResourceReloadListener
     
     @Override
     protected void apply(final Map<ResourceLocation, JsonElement> debug1, final ResourceManager debug2, final ProfilerFiller debug3) {
-        final Map<ResourceLocation, Advancement.Builder> debug4 = (Map<ResourceLocation, Advancement.Builder>)Maps.newHashMap();
-        JsonObject debug5;
-        Advancement.Builder debug6;
-        final Map<ResourceLocation, Advancement.Builder> map;
-        final RuntimeException ex;
-        RuntimeException debug7;
-        debug1.forEach((debug2, debug3) -> {
+        final Map<ResourceLocation, Advancement.Builder> debug4 = Maps.newHashMap(); // MagmaCube - decompile fix // MagmaCube - decompile fix
+        debug1.forEach((debug2l, debug3l) -> { // MagmaCube - decompile fix
             try {
-                debug5 = GsonHelper.convertToJsonObject(debug3, "advancement");
-                debug6 = Advancement.Builder.fromJson(debug5, new DeserializationContext(debug2, this.predicateManager));
-                map.put(debug2, debug6);
+                JsonObject debug5 = GsonHelper.convertToJsonObject(debug3l, "advancement"); // MagmaCube - decompile fix
+                Advancement.Builder debug6 = Advancement.Builder.fromJson(debug5, new DeserializationContext(debug2l, this.predicateManager)); // MagmaCube - decompile fix
+                debug4.put(debug2l, debug6); // MagmaCube - decompile fix
             }
             catch (JsonParseException | IllegalArgumentException ex2) {
-                debug7 = ex;
-                ServerAdvancementManager.LOGGER.error("Parsing error loading custom advancement {}: {}", (Object)debug2, (Object)debug7.getMessage());
+                ServerAdvancementManager.LOGGER.error("Parsing error loading custom advancement {}: {}", (Object)debug2l, ex2.getMessage()); // MagmaCube - decompile fix
             }
             return;
         });
diff --git a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
index 3977a1749dbf7fde42ffb123c390f4ea34ee7860..451fb8e4b0ad4ed681e49dfcda22f6b1c9fe85f1 100644
--- a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
+++ b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
@@ -53,7 +53,7 @@ implements PreparableReloadListener {
     private static final int PATH_PREFIX_LENGTH = "functions/".length();
     private static final int PATH_SUFFIX_LENGTH = ".mcfunction".length();
     private volatile Map<ResourceLocation, CommandFunction> functions = ImmutableMap.of();
-    private final TagLoader<CommandFunction> tagsLoader = new TagLoader(this::getFunction, "tags/functions", "function");
+    private final TagLoader<CommandFunction> tagsLoader = new TagLoader<>(this::getFunction, "tags/functions", "function"); // MagmaCube - decompile fix
     private volatile TagCollection<CommandFunction> tags = TagCollection.empty();
     private final int functionCompilationLevel;
     private final CommandDispatcher<CommandSourceStack> dispatcher;
@@ -81,35 +81,37 @@ implements PreparableReloadListener {
 
     @Override
     public CompletableFuture<Void> reload(PreparableReloadListener.PreparationBarrier debug1, ResourceManager debug2, ProfilerFiller debug32, ProfilerFiller debug4, Executor debug5, Executor debug6) {
+        // MagmaCube start - decompile fix
         CompletableFuture<Map<ResourceLocation, Tag.Builder>> debug7 = this.tagsLoader.prepare(debug2, debug5);
-        CompletionStage debug8 = CompletableFuture.supplyAsync(() -> debug2.listResources("functions", debug0 -> debug0.endsWith(".mcfunction")), debug5).thenCompose(debug3 -> {
-            HashMap debug4 = Maps.newHashMap();
-            CommandSourceStack debug5 = new CommandSourceStack(CommandSource.NULL, Vec3.ZERO, Vec2.ZERO, null, this.functionCompilationLevel, "", TextComponent.EMPTY, null, null);
-            for (ResourceLocation debug7 : debug3) {
-                String debug8 = debug7.getPath();
-                ResourceLocation debug9 = new ResourceLocation(debug7.getNamespace(), debug8.substring(PATH_PREFIX_LENGTH, debug8.length() - PATH_SUFFIX_LENGTH));
-                debug4.put(debug9, CompletableFuture.supplyAsync(() -> {
-                    List<String> debug5 = ServerFunctionLibrary.readLines(debug2, debug7);
-                    return CommandFunction.fromLines(debug9, this.dispatcher, debug5, debug5);
+        CompletableFuture<HashMap<ResourceLocation, CompletableFuture<CommandFunction>>> debug8 = CompletableFuture.supplyAsync(() -> debug2.listResources("functions", debug0 -> debug0.endsWith(".mcfunction")), debug5).thenCompose(debug3 -> {
+            HashMap<ResourceLocation, CompletableFuture<CommandFunction>> debug4l = Maps.newHashMap();
+            CommandSourceStack debug5l = new CommandSourceStack(CommandSource.NULL, Vec3.ZERO, Vec2.ZERO, null, this.functionCompilationLevel, "", TextComponent.EMPTY, null, null);
+            for (ResourceLocation debug7l : debug3) {
+                String debug8l = debug7l.getPath();
+                ResourceLocation debug9 = new ResourceLocation(debug7l.getNamespace(), debug8l.substring(PATH_PREFIX_LENGTH, debug8l.length() - PATH_SUFFIX_LENGTH));
+                debug4l.put(debug9, CompletableFuture.supplyAsync(() -> {
+                    List<String> debug5ll = ServerFunctionLibrary.readLines(debug2, debug7l);
+                    return CommandFunction.fromLines(debug9, this.dispatcher, debug5l, debug5ll);
                 }, debug5));
             }
-            CompletableFuture[] debug6 = debug4.values().toArray(new CompletableFuture[0]);
-            return CompletableFuture.allOf(debug6).handle((debug1, debug2) -> debug4);
+            CompletableFuture<CommandFunction>[] debug6l = (CompletableFuture<CommandFunction>[]) (Object) debug4l.values().toArray(new CompletableFuture[0]);
+            return CompletableFuture.allOf(debug6l).handle((debug1l, debug2l) -> debug4l);
         });
-        return ((CompletableFuture)((CompletableFuture)debug7.thenCombine(debug8, Pair::of)).thenCompose(debug1::wait)).thenAcceptAsync(debug12 -> {
-            Map debug2 = (Map)debug12.getSecond();
+        return ((debug7.thenCombine(debug8, Pair::of)).thenCompose(debug1::wait)).thenAcceptAsync(debug12 -> {
+            Map<ResourceLocation, CompletableFuture<CommandFunction>> debug2l = debug12.getSecond();
             ImmutableMap.Builder debug3 = ImmutableMap.builder();
-            debug2.forEach((debug1, debug22) -> ((CompletableFuture)debug22.handle((debug2, debug3) -> {
-                if (debug3 != null) {
-                    LOGGER.error("Failed to load function {}", debug1, debug3);
+            debug2l.forEach((debug1l, debug22) -> (debug22.handle((debug2ll, debug3l) -> {
+                if (debug3l != null) {
+                    LOGGER.error("Failed to load function {}", debug1l, debug3l);
                 } else {
-                    debug3.put(debug1, debug2);
+                    debug3.put(debug1l, debug2ll);
                 }
                 return null;
             })).join());
             this.functions = debug3.build();
             this.tags = this.tagsLoader.load((Map)debug12.getFirst());
         }, debug6);
+        // MagmaCube end - decompile fix
     }
 
     /*
diff --git a/src/main/java/net/minecraft/server/ServerResources.java b/src/main/java/net/minecraft/server/ServerResources.java
index ff4790c16bd25c80269a15cd48ec1d13b753b0b2..3c961870aab2e34b1f5e349e5faa5cc117e11acf 100644
--- a/src/main/java/net/minecraft/server/ServerResources.java
+++ b/src/main/java/net/minecraft/server/ServerResources.java
@@ -81,12 +81,11 @@ public class ServerResources implements AutoCloseable
     public static CompletableFuture<ServerResources> loadResources(final List<PackResources> debug0, final Commands.CommandSelection debug1, final int debug2, final Executor debug3, final Executor debug4) {
         final ServerResources debug5 = new ServerResources(debug1, debug2);
         final CompletableFuture<Unit> debug6 = debug5.resources.reload(debug3, debug4, debug0, ServerResources.DATA_RELOAD_INITIAL_TASK);
-        final ServerResources serverResources;
-        return debug6.whenComplete((debug1, debug2) -> {
-            if (debug2 != null) {
-                serverResources.close();
+        return debug6.whenComplete((debug1l, debug2l) -> { // MagmaCube - decompile fix
+            if (debug2l != null) { // MagmaCube - decompile fix
+                debug5.close(); // MagmaCube - decompile fix
             }
-        }).thenApply(debug1 -> debug5);
+        }).thenApply(debug1l -> debug5); // MagmaCube - decompile fix
     }
     
     public void updateGlobals() {
diff --git a/src/main/java/net/minecraft/server/bossevents/CustomBossEvent.java b/src/main/java/net/minecraft/server/bossevents/CustomBossEvent.java
index 1d8c9646f4a1335b6b6135a08492584ce0b85200..1b3a9ba63bb7c04f25979d5459505f2493753c66 100644
--- a/src/main/java/net/minecraft/server/bossevents/CustomBossEvent.java
+++ b/src/main/java/net/minecraft/server/bossevents/CustomBossEvent.java
@@ -31,7 +31,7 @@ public class CustomBossEvent extends ServerBossEvent
     
     public CustomBossEvent(final ResourceLocation debug1, final Component debug2) {
         super(debug2, BossBarColor.WHITE, BossBarOverlay.PROGRESS);
-        this.players = (Set<UUID>)Sets.newHashSet();
+        this.players = Sets.newHashSet(); // MagmaCube - decompile fix
         this.max = 100;
         this.id = debug1;
         this.setPercent(0.0f);
@@ -82,18 +82,16 @@ public class CustomBossEvent extends ServerBossEvent
     }
     
     public final Component getDisplayName() {
-        final HoverEvent debug2;
-        final Style style;
         return ComponentUtils.wrapInSquareBrackets(this.getName()).withStyle(debug1 -> {
-            debug1.withColor(this.getColor().getFormatting());
-            new HoverEvent((HoverEvent.Action<TextComponent>)HoverEvent.Action.SHOW_TEXT, new TextComponent(this.getTextId().toString()));
+            Style style = debug1.withColor(this.getColor().getFormatting()); // MagmaCube - decompile fix
+            HoverEvent debug2 = new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TextComponent(this.getTextId().toString())); // MagmaCube - decompile fix
             return style.withHoverEvent(debug2).withInsertion(this.getTextId().toString());
         });
     }
     
     public boolean setPlayers(final Collection<ServerPlayer> debug1) {
-        final Set<UUID> debug2 = (Set<UUID>)Sets.newHashSet();
-        final Set<ServerPlayer> debug3 = (Set<ServerPlayer>)Sets.newHashSet();
+        final Set<UUID> debug2 = Sets.newHashSet(); // MagmaCube - decompile fix
+        final Set<ServerPlayer> debug3 = Sets.newHashSet(); // MagmaCube - decompile fix
         for (final UUID debug4 : this.players) {
             boolean debug5 = false;
             for (final ServerPlayer debug6 : debug1) {
@@ -146,7 +144,7 @@ public class CustomBossEvent extends ServerBossEvent
         debug1.putBoolean("CreateWorldFog", this.shouldCreateWorldFog());
         final ListTag debug2 = new ListTag();
         for (final UUID debug3 : this.players) {
-            ((AbstractList<IntArrayTag>)debug2).add(NbtUtils.createUUID(debug3));
+            debug2.add(NbtUtils.createUUID(debug3)); // MagmaCube - decompile fix
         }
         debug1.put("Players", debug2);
         return debug1;
diff --git a/src/main/java/net/minecraft/server/bossevents/CustomBossEvents.java b/src/main/java/net/minecraft/server/bossevents/CustomBossEvents.java
index ff2012ec30417f666bc326827c9e1467e0c1f77d..3535f2827fd80c878dfc52601e1e31cfb298e786 100644
--- a/src/main/java/net/minecraft/server/bossevents/CustomBossEvents.java
+++ b/src/main/java/net/minecraft/server/bossevents/CustomBossEvents.java
@@ -16,7 +16,7 @@ public class CustomBossEvents
     private final Map<ResourceLocation, CustomBossEvent> events;
     
     public CustomBossEvents() {
-        this.events = (Map<ResourceLocation, CustomBossEvent>)Maps.newHashMap();
+        this.events = Maps.newHashMap(); // MagmaCube - decompile fix
     }
     
     @Nullable
diff --git a/src/main/java/net/minecraft/server/commands/DataPackCommand.java b/src/main/java/net/minecraft/server/commands/DataPackCommand.java
index 3f2075b7d02de4ddbba630f5f7e8a7b332b57c1b..661984e857049a53276d8a4059ad6fe910abce27 100644
--- a/src/main/java/net/minecraft/server/commands/DataPackCommand.java
+++ b/src/main/java/net/minecraft/server/commands/DataPackCommand.java
@@ -48,12 +48,12 @@ public class DataPackCommand {
     };
 
     public static void register(CommandDispatcher<CommandSourceStack> debug03) {
-        debug03.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("datapack").requires(debug0 -> debug0.hasPermission(2))).then(Commands.literal("enable").then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("name", StringArgumentType.string()).suggests(UNSELECTED_PACKS).executes(debug0 -> DataPackCommand.enablePack((CommandSourceStack)debug0.getSource(), DataPackCommand.getPack((CommandContext<CommandSourceStack>)debug0, "name", true), (debug02, debug1) -> debug1.getDefaultPosition().insert(debug02, debug1, debug0 -> debug0, false)))).then(Commands.literal("after").then(Commands.argument("existing", StringArgumentType.string()).suggests(SELECTED_PACKS).executes(debug0 -> DataPackCommand.enablePack((CommandSourceStack)debug0.getSource(), DataPackCommand.getPack((CommandContext<CommandSourceStack>)debug0, "name", true), (debug1, debug2) -> debug1.add(debug1.indexOf(DataPackCommand.getPack((CommandContext<CommandSourceStack>)debug0, "existing", false)) + 1, debug2)))))).then(Commands.literal("before").then(Commands.argument("existing", StringArgumentType.string()).suggests(SELECTED_PACKS).executes(debug0 -> DataPackCommand.enablePack((CommandSourceStack)debug0.getSource(), DataPackCommand.getPack((CommandContext<CommandSourceStack>)debug0, "name", true), (debug1, debug2) -> debug1.add(debug1.indexOf(DataPackCommand.getPack((CommandContext<CommandSourceStack>)debug0, "existing", false)), debug2)))))).then(Commands.literal("last").executes(debug0 -> DataPackCommand.enablePack((CommandSourceStack)debug0.getSource(), DataPackCommand.getPack((CommandContext<CommandSourceStack>)debug0, "name", true), List::add)))).then(Commands.literal("first").executes(debug02 -> DataPackCommand.enablePack((CommandSourceStack)debug02.getSource(), DataPackCommand.getPack((CommandContext<CommandSourceStack>)debug02, "name", true), (debug0, debug1) -> debug0.add(0, debug1))))))).then(Commands.literal("disable").then(Commands.argument("name", StringArgumentType.string()).suggests(SELECTED_PACKS).executes(debug0 -> DataPackCommand.disablePack((CommandSourceStack)debug0.getSource(), DataPackCommand.getPack((CommandContext<CommandSourceStack>)debug0, "name", false)))))).then(((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("list").executes(debug0 -> DataPackCommand.listPacks((CommandSourceStack)debug0.getSource()))).then(Commands.literal("available").executes(debug0 -> DataPackCommand.listAvailablePacks((CommandSourceStack)debug0.getSource())))).then(Commands.literal("enabled").executes(debug0 -> DataPackCommand.listEnabledPacks((CommandSourceStack)debug0.getSource())))));
+        debug03.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("datapack").requires(debug0 -> debug0.hasPermission(2))).then(Commands.literal("enable").then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("name", StringArgumentType.string()).suggests(UNSELECTED_PACKS).executes(debug0 -> DataPackCommand.enablePack((CommandSourceStack)debug0.getSource(), DataPackCommand.getPack(debug0, "name", true), (debug02, debug1) -> debug1.getDefaultPosition().insert(debug02, debug1, debug0l -> debug0l, false)))).then(Commands.literal("after").then(Commands.argument("existing", StringArgumentType.string()).suggests(SELECTED_PACKS).executes(debug0 -> DataPackCommand.enablePack((CommandSourceStack)debug0.getSource(), DataPackCommand.getPack((CommandContext<CommandSourceStack>)debug0, "name", true), (debug1, debug2) -> debug1.add(debug1.indexOf(DataPackCommand.getPack((CommandContext<CommandSourceStack>)debug0, "existing", false)) + 1, debug2)))))).then(Commands.literal("before").then(Commands.argument("existing", StringArgumentType.string()).suggests(SELECTED_PACKS).executes(debug0 -> DataPackCommand.enablePack((CommandSourceStack)debug0.getSource(), DataPackCommand.getPack((CommandContext<CommandSourceStack>)debug0, "name", true), (debug1, debug2) -> debug1.add(debug1.indexOf(DataPackCommand.getPack((CommandContext<CommandSourceStack>)debug0, "existing", false)), debug2)))))).then(Commands.literal("last").executes(debug0 -> DataPackCommand.enablePack((CommandSourceStack)debug0.getSource(), DataPackCommand.getPack((CommandContext<CommandSourceStack>)debug0, "name", true), List::add)))).then(Commands.literal("first").executes(debug02 -> DataPackCommand.enablePack((CommandSourceStack)debug02.getSource(), DataPackCommand.getPack((CommandContext<CommandSourceStack>)debug02, "name", true), (debug0, debug1) -> debug0.add(0, debug1))))))).then(Commands.literal("disable").then(Commands.argument("name", StringArgumentType.string()).suggests(SELECTED_PACKS).executes(debug0 -> DataPackCommand.disablePack((CommandSourceStack)debug0.getSource(), DataPackCommand.getPack((CommandContext<CommandSourceStack>)debug0, "name", false)))))).then(((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("list").executes(debug0 -> DataPackCommand.listPacks((CommandSourceStack)debug0.getSource()))).then(Commands.literal("available").executes(debug0 -> DataPackCommand.listAvailablePacks((CommandSourceStack)debug0.getSource())))).then(Commands.literal("enabled").executes(debug0 -> DataPackCommand.listEnabledPacks((CommandSourceStack)debug0.getSource()))))); // MagmaCube - decompile fix
     }
 
     private static int enablePack(CommandSourceStack debug0, Pack debug1, Inserter debug2) throws CommandSyntaxException {
         PackRepository debug3 = debug0.getServer().getPackRepository();
-        ArrayList debug4 = Lists.newArrayList(debug3.getSelectedPacks());
+        ArrayList<Pack> debug4 = Lists.newArrayList(debug3.getSelectedPacks()); // MagmaCube - decompile fix
         debug2.apply(debug4, debug1);
         debug0.sendSuccess(new TranslatableComponent("commands.datapack.modify.enable", debug1.getChatLink(true)), true);
         ReloadCommand.reloadPacks(debug4.stream().map(Pack::getId).collect(Collectors.toList()), debug0);
@@ -62,7 +62,7 @@ public class DataPackCommand {
 
     private static int disablePack(CommandSourceStack debug0, Pack debug1) {
         PackRepository debug2 = debug0.getServer().getPackRepository();
-        ArrayList debug3 = Lists.newArrayList(debug2.getSelectedPacks());
+        ArrayList<Pack> debug3 = Lists.newArrayList(debug2.getSelectedPacks()); // MagmaCube - decompile fix
         debug3.remove(debug1);
         debug0.sendSuccess(new TranslatableComponent("commands.datapack.modify.disable", debug1.getChatLink(true)), true);
         ReloadCommand.reloadPacks(debug3.stream().map(Pack::getId).collect(Collectors.toList()), debug0);
@@ -78,7 +78,7 @@ public class DataPackCommand {
         debug12.reload();
         Collection<Pack> debug2 = debug12.getSelectedPacks();
         Collection<Pack> debug3 = debug12.getAvailablePacks();
-        List debug4 = debug3.stream().filter(debug1 -> !debug2.contains(debug1)).collect(Collectors.toList());
+        List<Pack> debug4 = debug3.stream().filter(debug1 -> !debug2.contains(debug1)).collect(Collectors.toList()); // MagmaCube - decompile fix
         if (debug4.isEmpty()) {
             debug02.sendSuccess(new TranslatableComponent("commands.datapack.list.available.none"), false);
         } else {
diff --git a/src/main/java/net/minecraft/server/commands/EffectCommands.java b/src/main/java/net/minecraft/server/commands/EffectCommands.java
index f52352f7b3390f6160eed6a67a304b2cb1ac1d8b..f92ee99012653edf1f9cd32a88e719a016713101 100644
--- a/src/main/java/net/minecraft/server/commands/EffectCommands.java
+++ b/src/main/java/net/minecraft/server/commands/EffectCommands.java
@@ -32,7 +32,7 @@ public class EffectCommands
     private static final SimpleCommandExceptionType ERROR_CLEAR_SPECIFIC_FAILED;
     
     public static void register(final CommandDispatcher<CommandSourceStack> debug0) {
-        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("effect").requires(debug0 -> debug0.hasPermission(2))).then(((LiteralArgumentBuilder)Commands.literal("clear").executes(debug0 -> clearEffects((CommandSourceStack)debug0.getSource(), (Collection<? extends Entity>)ImmutableList.of((Object)((CommandSourceStack)debug0.getSource()).getEntityOrException())))).then(((RequiredArgumentBuilder)Commands.argument("targets", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.entities()).executes(debug0 -> clearEffects((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets")))).then(Commands.argument("effect", (com.mojang.brigadier.arguments.ArgumentType<Object>)MobEffectArgument.effect()).executes(debug0 -> clearEffect((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"), MobEffectArgument.getEffect((CommandContext<CommandSourceStack>)debug0, "effect"))))))).then(Commands.literal("give").then(Commands.argument("targets", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.entities()).then(((RequiredArgumentBuilder)Commands.argument("effect", (com.mojang.brigadier.arguments.ArgumentType<Object>)MobEffectArgument.effect()).executes(debug0 -> giveEffect((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"), MobEffectArgument.getEffect((CommandContext<CommandSourceStack>)debug0, "effect"), null, 0, true))).then(((RequiredArgumentBuilder)Commands.argument("seconds", (com.mojang.brigadier.arguments.ArgumentType<Object>)IntegerArgumentType.integer(1, 1000000)).executes(debug0 -> giveEffect((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"), MobEffectArgument.getEffect((CommandContext<CommandSourceStack>)debug0, "effect"), IntegerArgumentType.getInteger(debug0, "seconds"), 0, true))).then(((RequiredArgumentBuilder)Commands.argument("amplifier", (com.mojang.brigadier.arguments.ArgumentType<Object>)IntegerArgumentType.integer(0, 255)).executes(debug0 -> giveEffect((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"), MobEffectArgument.getEffect((CommandContext<CommandSourceStack>)debug0, "effect"), IntegerArgumentType.getInteger(debug0, "seconds"), IntegerArgumentType.getInteger(debug0, "amplifier"), true))).then(Commands.argument("hideParticles", (com.mojang.brigadier.arguments.ArgumentType<Object>)BoolArgumentType.bool()).executes(debug0 -> giveEffect((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"), MobEffectArgument.getEffect((CommandContext<CommandSourceStack>)debug0, "effect"), IntegerArgumentType.getInteger(debug0, "seconds"), IntegerArgumentType.getInteger(debug0, "amplifier"), !BoolArgumentType.getBool(debug0, "hideParticles"))))))))));
+        debug0.register(((Commands.literal("effect").requires(debug0l -> debug0l.hasPermission(2))).then((Commands.literal("clear").executes(debug0l -> clearEffects(debug0l.getSource(), ImmutableList.of((debug0l.getSource()).getEntityOrException())))).then((Commands.argument("targets", EntityArgument.entities()).executes(debug0l -> clearEffects(debug0l.getSource(), EntityArgument.getEntities(debug0l, "targets")))).then(Commands.argument("effect", MobEffectArgument.effect()).executes(debug0l -> clearEffect(debug0l.getSource(), EntityArgument.getEntities(debug0l, "targets"), MobEffectArgument.getEffect(debug0l, "effect"))))))).then(Commands.literal("give").then(Commands.argument("targets", EntityArgument.entities()).then((Commands.argument("effect", MobEffectArgument.effect()).executes(debug0l -> giveEffect(debug0l.getSource(), EntityArgument.getEntities(debug0l, "targets"), MobEffectArgument.getEffect(debug0l, "effect"), null, 0, true))).then((Commands.argument("seconds", IntegerArgumentType.integer(1, 1000000)).executes(debug0l -> giveEffect(debug0l.getSource(), EntityArgument.getEntities(debug0l, "targets"), MobEffectArgument.getEffect(debug0l, "effect"), IntegerArgumentType.getInteger(debug0l, "seconds"), 0, true))).then((Commands.argument("amplifier", IntegerArgumentType.integer(0, 255)).executes(debug0l -> giveEffect(debug0l.getSource(), EntityArgument.getEntities(debug0l, "targets"), MobEffectArgument.getEffect(debug0l, "effect"), IntegerArgumentType.getInteger(debug0l, "seconds"), IntegerArgumentType.getInteger(debug0l, "amplifier"), true))).then(Commands.argument("hideParticles", BoolArgumentType.bool()).executes(debug0l -> giveEffect(debug0l.getSource(), EntityArgument.getEntities(debug0l, "targets"), MobEffectArgument.getEffect(debug0l, "effect"), IntegerArgumentType.getInteger(debug0l, "seconds"), IntegerArgumentType.getInteger(debug0l, "amplifier"), !BoolArgumentType.getBool(debug0l, "hideParticles")))))))))); // MagmaCube - decompile fix
     }
     
     private static int giveEffect(final CommandSourceStack debug0, final Collection<? extends Entity> debug1, final MobEffect debug2, @Nullable final Integer debug3, final int debug4, final boolean debug5) throws CommandSyntaxException {
diff --git a/src/main/java/net/minecraft/server/commands/ExperienceCommand.java b/src/main/java/net/minecraft/server/commands/ExperienceCommand.java
index 4526a989a81b5e9f8e371002d7b5e4870b53b746..47294c501f9b3b774dcf971e797dd0c4c9804163 100644
--- a/src/main/java/net/minecraft/server/commands/ExperienceCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ExperienceCommand.java
@@ -30,8 +30,8 @@ public class ExperienceCommand
     private static final SimpleCommandExceptionType ERROR_SET_POINTS_INVALID;
     
     public static void register(final CommandDispatcher<CommandSourceStack> debug0) {
-        final LiteralCommandNode<CommandSourceStack> debug = (LiteralCommandNode<CommandSourceStack>)debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("experience").requires(debug0 -> debug0.hasPermission(2))).then(Commands.literal("add").then(Commands.argument("targets", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.players()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("amount", (com.mojang.brigadier.arguments.ArgumentType<Object>)IntegerArgumentType.integer()).executes(debug0 -> addExperience((CommandSourceStack)debug0.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug0, "targets"), IntegerArgumentType.getInteger(debug0, "amount"), Type.POINTS))).then(Commands.literal("points").executes(debug0 -> addExperience((CommandSourceStack)debug0.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug0, "targets"), IntegerArgumentType.getInteger(debug0, "amount"), Type.POINTS)))).then(Commands.literal("levels").executes(debug0 -> addExperience((CommandSourceStack)debug0.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug0, "targets"), IntegerArgumentType.getInteger(debug0, "amount"), Type.LEVELS))))))).then(Commands.literal("set").then(Commands.argument("targets", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.players()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("amount", (com.mojang.brigadier.arguments.ArgumentType<Object>)IntegerArgumentType.integer(0)).executes(debug0 -> setExperience((CommandSourceStack)debug0.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug0, "targets"), IntegerArgumentType.getInteger(debug0, "amount"), Type.POINTS))).then(Commands.literal("points").executes(debug0 -> setExperience((CommandSourceStack)debug0.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug0, "targets"), IntegerArgumentType.getInteger(debug0, "amount"), Type.POINTS)))).then(Commands.literal("levels").executes(debug0 -> setExperience((CommandSourceStack)debug0.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug0, "targets"), IntegerArgumentType.getInteger(debug0, "amount"), Type.LEVELS))))))).then(Commands.literal("query").then(((RequiredArgumentBuilder)Commands.argument("targets", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.player()).then(Commands.literal("points").executes(debug0 -> queryExperience((CommandSourceStack)debug0.getSource(), EntityArgument.getPlayer((CommandContext<CommandSourceStack>)debug0, "targets"), Type.POINTS)))).then(Commands.literal("levels").executes(debug0 -> queryExperience((CommandSourceStack)debug0.getSource(), EntityArgument.getPlayer((CommandContext<CommandSourceStack>)debug0, "targets"), Type.LEVELS))))));
-        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("xp").requires(debug0 -> debug0.hasPermission(2))).redirect((CommandNode)debug));
+        final LiteralCommandNode<CommandSourceStack> debug = (LiteralCommandNode<CommandSourceStack>)debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("experience").requires(debug0l -> debug0l.hasPermission(2))).then(Commands.literal("add").then(Commands.argument("targets", EntityArgument.players()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("amount", IntegerArgumentType.integer()).executes(debug0l -> addExperience((CommandSourceStack)debug0l.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug0l, "targets"), IntegerArgumentType.getInteger(debug0l, "amount"), Type.POINTS))).then(Commands.literal("points").executes(debug0l -> addExperience((CommandSourceStack)debug0l.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug0l, "targets"), IntegerArgumentType.getInteger(debug0l, "amount"), Type.POINTS)))).then(Commands.literal("levels").executes(debug0l -> addExperience((CommandSourceStack)debug0l.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug0l, "targets"), IntegerArgumentType.getInteger(debug0l, "amount"), Type.LEVELS))))))).then(Commands.literal("set").then(Commands.argument("targets", EntityArgument.players()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("amount", IntegerArgumentType.integer(0)).executes(debug0l -> setExperience((CommandSourceStack)debug0l.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug0l, "targets"), IntegerArgumentType.getInteger(debug0l, "amount"), Type.POINTS))).then(Commands.literal("points").executes(debug0l -> setExperience((CommandSourceStack)debug0l.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug0l, "targets"), IntegerArgumentType.getInteger(debug0l, "amount"), Type.POINTS)))).then(Commands.literal("levels").executes(debug0l -> setExperience((CommandSourceStack)debug0l.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug0l, "targets"), IntegerArgumentType.getInteger(debug0l, "amount"), Type.LEVELS))))))).then(Commands.literal("query").then(((RequiredArgumentBuilder)Commands.argument("targets", EntityArgument.player()).then(Commands.literal("points").executes(debug0l -> queryExperience((CommandSourceStack)debug0l.getSource(), EntityArgument.getPlayer((CommandContext<CommandSourceStack>)debug0l, "targets"), Type.POINTS)))).then(Commands.literal("levels").executes(debug0l -> queryExperience((CommandSourceStack)debug0l.getSource(), EntityArgument.getPlayer((CommandContext<CommandSourceStack>)debug0l, "targets"), Type.LEVELS)))))); // MagmaCube - decompile fix
+        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("xp").requires(debug0l -> debug0l.hasPermission(2))).redirect((CommandNode)debug)); // MagmaCube - decompile fix
     }
     
     private static int queryExperience(final CommandSourceStack debug0, final ServerPlayer debug1, final Type debug2) {
diff --git a/src/main/java/net/minecraft/server/commands/HelpCommand.java b/src/main/java/net/minecraft/server/commands/HelpCommand.java
index c2050634d92ffa9ff85358713a634dd589735890..d8ea57c5b0e59a34e10aa4ff39545d08b0be916f 100644
--- a/src/main/java/net/minecraft/server/commands/HelpCommand.java
+++ b/src/main/java/net/minecraft/server/commands/HelpCommand.java
@@ -31,7 +31,7 @@ public class HelpCommand
                 ((CommandSourceStack)debug1.getSource()).sendSuccess(new TextComponent("/" + debug3), false);
             }
             return debug2.size();
-        })).then(Commands.argument("command", (com.mojang.brigadier.arguments.ArgumentType<Object>)StringArgumentType.greedyString()).executes(debug1 -> {
+        })).then(Commands.argument("command", StringArgumentType.greedyString()).executes(debug1 -> { // MagmaCube - decompile fix
             final ParseResults<CommandSourceStack> debug2 = (ParseResults<CommandSourceStack>)debug0.parse(StringArgumentType.getString(debug1, "command"), debug1.getSource());
             if (debug2.getContext().getNodes().isEmpty()) {
                 throw HelpCommand.ERROR_FAILED.create();
diff --git a/src/main/java/net/minecraft/server/commands/KillCommand.java b/src/main/java/net/minecraft/server/commands/KillCommand.java
index e69127a96833c56d23077eaac219233826bcfb65..2eb6decb8b68f94ad0c85595f74ae3440a971848 100644
--- a/src/main/java/net/minecraft/server/commands/KillCommand.java
+++ b/src/main/java/net/minecraft/server/commands/KillCommand.java
@@ -18,7 +18,7 @@ import com.mojang.brigadier.CommandDispatcher;
 public class KillCommand
 {
     public static void register(final CommandDispatcher<CommandSourceStack> debug0) {
-        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("kill").requires(debug0 -> debug0.hasPermission(2))).executes(debug0 -> kill((CommandSourceStack)debug0.getSource(), (Collection<? extends Entity>)ImmutableList.of((Object)((CommandSourceStack)debug0.getSource()).getEntityOrException())))).then(Commands.argument("targets", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.entities()).executes(debug0 -> kill((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets")))));
+        debug0.register(((Commands.literal("kill").requires(debug0l -> debug0l.hasPermission(2))).executes(debug0l -> kill(debug0l.getSource(), ImmutableList.of((debug0l.getSource()).getEntityOrException())))).then(Commands.argument("targets", EntityArgument.entities()).executes(debug0l -> kill(debug0l.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0l, "targets"))))); // MagmaCube - decompile fix
     }
     
     private static int kill(final CommandSourceStack debug0, final Collection<? extends Entity> debug1) {
diff --git a/src/main/java/net/minecraft/server/commands/LocateCommand.java b/src/main/java/net/minecraft/server/commands/LocateCommand.java
index d87a429b6c521e7509c60ee9416ff67f5e3fdb70..fe436d7b48e0b34c659567fe5e80508fdc899318 100644
--- a/src/main/java/net/minecraft/server/commands/LocateCommand.java
+++ b/src/main/java/net/minecraft/server/commands/LocateCommand.java
@@ -26,7 +26,7 @@ public class LocateCommand
     private static final SimpleCommandExceptionType ERROR_FAILED;
     
     public static void register(final CommandDispatcher<CommandSourceStack> debug0) {
-        LiteralArgumentBuilder<CommandSourceStack> debug = (LiteralArgumentBuilder<CommandSourceStack>)Commands.literal("locate").requires(debug0 -> debug0.hasPermission(2));
+        LiteralArgumentBuilder<CommandSourceStack> debug = (LiteralArgumentBuilder<CommandSourceStack>)Commands.literal("locate").requires(debug0l -> debug0l.hasPermission(2)); // MagmaCube - decompile fix
         for (final Map.Entry<String, StructureFeature<?>> debug2 : StructureFeature.STRUCTURES_REGISTRY.entrySet()) {
             debug = (LiteralArgumentBuilder<CommandSourceStack>)debug.then(Commands.literal(debug2.getKey()).executes(debug1 -> locate((CommandSourceStack)debug1.getSource(), debug2.getValue())));
         }
@@ -44,15 +44,11 @@ public class LocateCommand
     
     public static int showLocateResult(final CommandSourceStack debug0, final String debug1, final BlockPos debug2, final BlockPos debug3, final String debug4) {
         final int debug5 = Mth.floor(dist(debug2.getX(), debug2.getZ(), debug3.getX(), debug3.getZ()));
-        final ClickEvent debug7;
-        final Object o;
-        final HoverEvent debug8;
-        final Style style;
-        final Component debug6 = ComponentUtils.wrapInSquareBrackets(new TranslatableComponent("chat.coordinates", new Object[] { debug3.getX(), "â¾", debug3.getZ() })).withStyle(debug1 -> {
-            debug1.withColor(ChatFormatting.GREEN);
-            new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/tp @s " + debug3.getX() + " â¾ " + debug3.getZ());
-            ((Style)o).withClickEvent(debug7);
-            new HoverEvent((HoverEvent.Action<TranslatableComponent>)HoverEvent.Action.SHOW_TEXT, new TranslatableComponent("chat.coordinates.tooltip"));
+        final Component debug6 = ComponentUtils.wrapInSquareBrackets(new TranslatableComponent("chat.coordinates", new Object[] { debug3.getX(), "â¾", debug3.getZ() })).withStyle(debug1ll -> { // MagmaCube - decompile fix
+            Style style = debug1ll.withColor(ChatFormatting.GREEN); // MagmaCube - decompile fix
+            ClickEvent debug7 = new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/tp @s " + debug3.getX() + " â¾ " + debug3.getZ()); // MagmaCube - decompile fix
+            style.withClickEvent(debug7); // MagmaCube - decompile fix
+            HoverEvent debug8 = new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TranslatableComponent("chat.coordinates.tooltip")); // MagmaCube - decompile fix
             return style.withHoverEvent(debug8);
         });
         debug0.sendSuccess(new TranslatableComponent(debug4, new Object[] { debug1, debug6, debug5 }), false);
diff --git a/src/main/java/net/minecraft/server/commands/PlaySoundCommand.java b/src/main/java/net/minecraft/server/commands/PlaySoundCommand.java
index e3a6ee4a69f2335feff5b0d87d43e5c0fae6496f..d57f976da32a1b6bfcf68a28519f07dab4cc1a2f 100644
--- a/src/main/java/net/minecraft/server/commands/PlaySoundCommand.java
+++ b/src/main/java/net/minecraft/server/commands/PlaySoundCommand.java
@@ -34,15 +34,15 @@ public class PlaySoundCommand
     private static final SimpleCommandExceptionType ERROR_TOO_FAR;
     
     public static void register(final CommandDispatcher<CommandSourceStack> debug0) {
-        final RequiredArgumentBuilder<CommandSourceStack, ResourceLocation> debug = (RequiredArgumentBuilder<CommandSourceStack, ResourceLocation>)Commands.argument("sound", (com.mojang.brigadier.arguments.ArgumentType<Object>)ResourceLocationArgument.id()).suggests((SuggestionProvider)SuggestionProviders.AVAILABLE_SOUNDS);
+        final RequiredArgumentBuilder<CommandSourceStack, ResourceLocation> debug = (RequiredArgumentBuilder<CommandSourceStack, ResourceLocation>)Commands.argument("sound", ResourceLocationArgument.id()).suggests((SuggestionProvider)SuggestionProviders.AVAILABLE_SOUNDS); // MagmaCube - decompile fix
         for (final SoundSource debug2 : SoundSource.values()) {
             debug.then((ArgumentBuilder)source(debug2));
         }
-        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("playsound").requires(debug0 -> debug0.hasPermission(2))).then((ArgumentBuilder)debug));
+        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("playsound").requires(debug0l -> debug0l.hasPermission(2))).then((ArgumentBuilder)debug)); // MagmaCube - decompile fix
     }
     
     private static LiteralArgumentBuilder<CommandSourceStack> source(final SoundSource debug0) {
-        return (LiteralArgumentBuilder<CommandSourceStack>)Commands.literal(debug0.getName()).then(((RequiredArgumentBuilder)Commands.argument("targets", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.players()).executes(debug1 -> playSound((CommandSourceStack)debug1.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug1, "targets"), ResourceLocationArgument.getId((CommandContext<CommandSourceStack>)debug1, "sound"), debug0, ((CommandSourceStack)debug1.getSource()).getPosition(), 1.0f, 1.0f, 0.0f))).then(((RequiredArgumentBuilder)Commands.argument("pos", (com.mojang.brigadier.arguments.ArgumentType<Object>)Vec3Argument.vec3()).executes(debug1 -> playSound((CommandSourceStack)debug1.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug1, "targets"), ResourceLocationArgument.getId((CommandContext<CommandSourceStack>)debug1, "sound"), debug0, Vec3Argument.getVec3((CommandContext<CommandSourceStack>)debug1, "pos"), 1.0f, 1.0f, 0.0f))).then(((RequiredArgumentBuilder)Commands.argument("volume", (com.mojang.brigadier.arguments.ArgumentType<Object>)FloatArgumentType.floatArg(0.0f)).executes(debug1 -> playSound((CommandSourceStack)debug1.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug1, "targets"), ResourceLocationArgument.getId((CommandContext<CommandSourceStack>)debug1, "sound"), debug0, Vec3Argument.getVec3((CommandContext<CommandSourceStack>)debug1, "pos"), (float)debug1.getArgument("volume", (Class)Float.class), 1.0f, 0.0f))).then(((RequiredArgumentBuilder)Commands.argument("pitch", (com.mojang.brigadier.arguments.ArgumentType<Object>)FloatArgumentType.floatArg(0.0f, 2.0f)).executes(debug1 -> playSound((CommandSourceStack)debug1.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug1, "targets"), ResourceLocationArgument.getId((CommandContext<CommandSourceStack>)debug1, "sound"), debug0, Vec3Argument.getVec3((CommandContext<CommandSourceStack>)debug1, "pos"), (float)debug1.getArgument("volume", (Class)Float.class), (float)debug1.getArgument("pitch", (Class)Float.class), 0.0f))).then(Commands.argument("minVolume", (com.mojang.brigadier.arguments.ArgumentType<Object>)FloatArgumentType.floatArg(0.0f, 1.0f)).executes(debug1 -> playSound((CommandSourceStack)debug1.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug1, "targets"), ResourceLocationArgument.getId((CommandContext<CommandSourceStack>)debug1, "sound"), debug0, Vec3Argument.getVec3((CommandContext<CommandSourceStack>)debug1, "pos"), (float)debug1.getArgument("volume", (Class)Float.class), (float)debug1.getArgument("pitch", (Class)Float.class), (float)debug1.getArgument("minVolume", (Class)Float.class))))))));
+        return (LiteralArgumentBuilder<CommandSourceStack>)Commands.literal(debug0.getName()).then(((RequiredArgumentBuilder)Commands.argument("targets", EntityArgument.players()).executes(debug1 -> playSound((CommandSourceStack)debug1.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug1, "targets"), ResourceLocationArgument.getId((CommandContext<CommandSourceStack>)debug1, "sound"), debug0, ((CommandSourceStack)debug1.getSource()).getPosition(), 1.0f, 1.0f, 0.0f))).then(((RequiredArgumentBuilder)Commands.argument("pos", Vec3Argument.vec3()).executes(debug1 -> playSound((CommandSourceStack)debug1.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug1, "targets"), ResourceLocationArgument.getId((CommandContext<CommandSourceStack>)debug1, "sound"), debug0, Vec3Argument.getVec3((CommandContext<CommandSourceStack>)debug1, "pos"), 1.0f, 1.0f, 0.0f))).then(((RequiredArgumentBuilder)Commands.argument("volume", FloatArgumentType.floatArg(0.0f)).executes(debug1 -> playSound((CommandSourceStack)debug1.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug1, "targets"), ResourceLocationArgument.getId((CommandContext<CommandSourceStack>)debug1, "sound"), debug0, Vec3Argument.getVec3((CommandContext<CommandSourceStack>)debug1, "pos"), (float)debug1.getArgument("volume", (Class)Float.class), 1.0f, 0.0f))).then(((RequiredArgumentBuilder)Commands.argument("pitch", FloatArgumentType.floatArg(0.0f, 2.0f)).executes(debug1 -> playSound((CommandSourceStack)debug1.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug1, "targets"), ResourceLocationArgument.getId((CommandContext<CommandSourceStack>)debug1, "sound"), debug0, Vec3Argument.getVec3((CommandContext<CommandSourceStack>)debug1, "pos"), (float)debug1.getArgument("volume", (Class)Float.class), (float)debug1.getArgument("pitch", (Class)Float.class), 0.0f))).then(Commands.argument("minVolume", FloatArgumentType.floatArg(0.0f, 1.0f)).executes(debug1 -> playSound((CommandSourceStack)debug1.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug1, "targets"), ResourceLocationArgument.getId((CommandContext<CommandSourceStack>)debug1, "sound"), debug0, Vec3Argument.getVec3((CommandContext<CommandSourceStack>)debug1, "pos"), (float)debug1.getArgument("volume", (Class)Float.class), (float)debug1.getArgument("pitch", (Class)Float.class), (float)debug1.getArgument("minVolume", (Class)Float.class)))))))); // MagmaCube - decompile fix
     }
     
     private static int playSound(final CommandSourceStack debug0, final Collection<ServerPlayer> debug1, final ResourceLocation debug2, final SoundSource debug3, final Vec3 debug4, final float debug5, final float debug6, final float debug7) throws CommandSyntaxException {
diff --git a/src/main/java/net/minecraft/server/commands/ReplaceItemCommand.java b/src/main/java/net/minecraft/server/commands/ReplaceItemCommand.java
index 38ac3aff74493b47be3efd6c0bea1abd7dde88b5..47431299e21e9690fb9d7661c7fb080cb7e4bac6 100644
--- a/src/main/java/net/minecraft/server/commands/ReplaceItemCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ReplaceItemCommand.java
@@ -37,7 +37,7 @@ public class ReplaceItemCommand
     public static final Dynamic2CommandExceptionType ERROR_ENTITY_SLOT;
     
     public static void register(final CommandDispatcher<CommandSourceStack> debug0) {
-        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("replaceitem").requires(debug0 -> debug0.hasPermission(2))).then(Commands.literal("block").then(Commands.argument("pos", (com.mojang.brigadier.arguments.ArgumentType<Object>)BlockPosArgument.blockPos()).then(Commands.argument("slot", (com.mojang.brigadier.arguments.ArgumentType<Object>)SlotArgument.slot()).then(((RequiredArgumentBuilder)Commands.argument("item", (com.mojang.brigadier.arguments.ArgumentType<Object>)ItemArgument.item()).executes(debug0 -> setBlockItem((CommandSourceStack)debug0.getSource(), BlockPosArgument.getLoadedBlockPos((CommandContext<CommandSourceStack>)debug0, "pos"), SlotArgument.getSlot((CommandContext<CommandSourceStack>)debug0, "slot"), ItemArgument.getItem((com.mojang.brigadier.context.CommandContext<Object>)debug0, "item").createItemStack(1, false)))).then(Commands.argument("count", (com.mojang.brigadier.arguments.ArgumentType<Object>)IntegerArgumentType.integer(1, 64)).executes(debug0 -> setBlockItem((CommandSourceStack)debug0.getSource(), BlockPosArgument.getLoadedBlockPos((CommandContext<CommandSourceStack>)debug0, "pos"), SlotArgument.getSlot((CommandContext<CommandSourceStack>)debug0, "slot"), ItemArgument.getItem((com.mojang.brigadier.context.CommandContext<Object>)debug0, "item").createItemStack(IntegerArgumentType.getInteger(debug0, "count"), true))))))))).then(Commands.literal("entity").then(Commands.argument("targets", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.entities()).then(Commands.argument("slot", (com.mojang.brigadier.arguments.ArgumentType<Object>)SlotArgument.slot()).then(((RequiredArgumentBuilder)Commands.argument("item", (com.mojang.brigadier.arguments.ArgumentType<Object>)ItemArgument.item()).executes(debug0 -> setEntityItem((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"), SlotArgument.getSlot((CommandContext<CommandSourceStack>)debug0, "slot"), ItemArgument.getItem((com.mojang.brigadier.context.CommandContext<Object>)debug0, "item").createItemStack(1, false)))).then(Commands.argument("count", (com.mojang.brigadier.arguments.ArgumentType<Object>)IntegerArgumentType.integer(1, 64)).executes(debug0 -> setEntityItem((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"), SlotArgument.getSlot((CommandContext<CommandSourceStack>)debug0, "slot"), ItemArgument.getItem((com.mojang.brigadier.context.CommandContext<Object>)debug0, "item").createItemStack(IntegerArgumentType.getInteger(debug0, "count"), true)))))))));
+        debug0.register(((Commands.literal("replaceitem").requires(debug0l -> debug0l.hasPermission(2))).then(Commands.literal("block").then(Commands.argument("pos", BlockPosArgument.blockPos()).then(Commands.argument("slot", SlotArgument.slot()).then((Commands.argument("item", ItemArgument.item()).executes(debug0l -> setBlockItem((CommandSourceStack)debug0l.getSource(), BlockPosArgument.getLoadedBlockPos((CommandContext<CommandSourceStack>)debug0l, "pos"), SlotArgument.getSlot(debug0l, "slot"), ItemArgument.getItem(debug0l, "item").createItemStack(1, false)))).then(Commands.argument("count", IntegerArgumentType.integer(1, 64)).executes(debug0l -> setBlockItem(debug0l.getSource(), BlockPosArgument.getLoadedBlockPos(debug0l, "pos"), SlotArgument.getSlot(debug0l, "slot"), ItemArgument.getItem(debug0l, "item").createItemStack(IntegerArgumentType.getInteger(debug0l, "count"), true))))))))).then(Commands.literal("entity").then(Commands.argument("targets", EntityArgument.entities()).then(Commands.argument("slot", SlotArgument.slot()).then(((RequiredArgumentBuilder)Commands.argument("item", ItemArgument.item()).executes(debug0l -> setEntityItem((CommandSourceStack)debug0l.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0l, "targets"), SlotArgument.getSlot((CommandContext<CommandSourceStack>)debug0l, "slot"), ItemArgument.getItem(debug0l, "item").createItemStack(1, false)))).then(Commands.argument("count", IntegerArgumentType.integer(1, 64)).executes(debug0l -> setEntityItem((CommandSourceStack)debug0l.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0l, "targets"), SlotArgument.getSlot((CommandContext<CommandSourceStack>)debug0l, "slot"), ItemArgument.getItem(debug0l, "item").createItemStack(IntegerArgumentType.getInteger(debug0l, "count"), true))))))))); // MagmaCube - decompile fix
     }
     
     private static int setBlockItem(final CommandSourceStack debug0, final BlockPos debug1, final int debug2, final ItemStack debug3) throws CommandSyntaxException {
@@ -55,7 +55,7 @@ public class ReplaceItemCommand
     }
     
     private static int setEntityItem(final CommandSourceStack debug0, final Collection<? extends Entity> debug1, final int debug2, final ItemStack debug3) throws CommandSyntaxException {
-        final List<Entity> debug4 = (List<Entity>)Lists.newArrayListWithCapacity(debug1.size());
+        final List<Entity> debug4 = Lists.newArrayListWithCapacity(debug1.size()); // MagmaCube - decompile fix
         for (final Entity debug5 : debug1) {
             if (debug5 instanceof ServerPlayer) {
                 ((ServerPlayer)debug5).inventoryMenu.broadcastChanges();
@@ -82,10 +82,8 @@ public class ReplaceItemCommand
     
     static {
         ERROR_NOT_A_CONTAINER = new SimpleCommandExceptionType((Message)new TranslatableComponent("commands.replaceitem.block.failed"));
-        final TranslatableComponent translatableComponent;
         ERROR_INAPPLICABLE_SLOT = new DynamicCommandExceptionType(debug0 -> {
-            new TranslatableComponent("commands.replaceitem.slot.inapplicable", new Object[] { debug0 });
-            return translatableComponent;
+            return new TranslatableComponent("commands.replaceitem.slot.inapplicable", new Object[] { debug0 }); // MagmaCube - decompile fix
         });
         ERROR_ENTITY_SLOT = new Dynamic2CommandExceptionType((debug0, debug1) -> new TranslatableComponent("commands.replaceitem.entity.failed", new Object[] { debug0, debug1 }));
     }
diff --git a/src/main/java/net/minecraft/server/commands/SeedCommand.java b/src/main/java/net/minecraft/server/commands/SeedCommand.java
index 3d42663f7a3960ae00237ca5733bb1b87be7e0b3..6c1a5acc7934a4c7444e93024d85643202b84600 100644
--- a/src/main/java/net/minecraft/server/commands/SeedCommand.java
+++ b/src/main/java/net/minecraft/server/commands/SeedCommand.java
@@ -18,17 +18,14 @@ import com.mojang.brigadier.CommandDispatcher;
 public class SeedCommand
 {
     public static void register(final CommandDispatcher<CommandSourceStack> debug0, final boolean debug1) {
-        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("seed").requires(debug1 -> !debug1 || debug1.hasPermission(2))).executes(debug0 -> {
-            final long debug3 = ((CommandSourceStack)debug0.getSource()).getLevel().getSeed();
-            final long n;
-            final HoverEvent debug5;
-            final Style style;
+        debug0.register((Commands.literal("seed").requires(debug1l -> !debug1 || debug1l.hasPermission(2))).executes(debug0l -> { // MagmaCube - decompile fix
+            final long debug3 = ((CommandSourceStack)debug0l.getSource()).getLevel().getSeed(); // MagmaCube - decompile fix
             final Component debug4 = ComponentUtils.wrapInSquareBrackets(new TextComponent(String.valueOf(debug3)).withStyle(debug2 -> {
-                debug2.withColor(ChatFormatting.GREEN).withClickEvent(new ClickEvent(ClickEvent.Action.COPY_TO_CLIPBOARD, String.valueOf(n)));
-                new HoverEvent((HoverEvent.Action<TranslatableComponent>)HoverEvent.Action.SHOW_TEXT, new TranslatableComponent("chat.copy.click"));
-                return style.withHoverEvent(debug5).withInsertion(String.valueOf(n));
+                Style style = debug2.withColor(ChatFormatting.GREEN).withClickEvent(new ClickEvent(ClickEvent.Action.COPY_TO_CLIPBOARD, String.valueOf(debug3)));
+                HoverEvent debug5 = new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TranslatableComponent("chat.copy.click")); // MagmaCube - decompile fix
+                return style.withHoverEvent(debug5).withInsertion(String.valueOf(debug3)); // MagmaCube - decompile fix
             }));
-            ((CommandSourceStack)debug0.getSource()).sendSuccess(new TranslatableComponent("commands.seed.success", new Object[] { debug4 }), false);
+            ((CommandSourceStack)debug0l.getSource()).sendSuccess(new TranslatableComponent("commands.seed.success", new Object[] { debug4 }), false); // MagmaCube - decompile fix
             return (int)debug3;
         }));
     }
diff --git a/src/main/java/net/minecraft/server/commands/SetBlockCommand.java b/src/main/java/net/minecraft/server/commands/SetBlockCommand.java
index dfca22a9e25ecfbf02362f8ec55eea486aab686f..b5f0fc9a22eabee52e686f8e1480dab9db86be05 100644
--- a/src/main/java/net/minecraft/server/commands/SetBlockCommand.java
+++ b/src/main/java/net/minecraft/server/commands/SetBlockCommand.java
@@ -30,7 +30,7 @@ public class SetBlockCommand
     private static final SimpleCommandExceptionType ERROR_FAILED;
     
     public static void register(final CommandDispatcher<CommandSourceStack> debug0) {
-        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("setblock").requires(debug0 -> debug0.hasPermission(2))).then(Commands.argument("pos", (com.mojang.brigadier.arguments.ArgumentType<Object>)BlockPosArgument.blockPos()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("block", (com.mojang.brigadier.arguments.ArgumentType<Object>)BlockStateArgument.block()).executes(debug0 -> setBlock((CommandSourceStack)debug0.getSource(), BlockPosArgument.getLoadedBlockPos((CommandContext<CommandSourceStack>)debug0, "pos"), BlockStateArgument.getBlock((CommandContext<CommandSourceStack>)debug0, "block"), Mode.REPLACE, null))).then(Commands.literal("destroy").executes(debug0 -> setBlock((CommandSourceStack)debug0.getSource(), BlockPosArgument.getLoadedBlockPos((CommandContext<CommandSourceStack>)debug0, "pos"), BlockStateArgument.getBlock((CommandContext<CommandSourceStack>)debug0, "block"), Mode.DESTROY, null)))).then(Commands.literal("keep").executes(debug0 -> setBlock((CommandSourceStack)debug0.getSource(), BlockPosArgument.getLoadedBlockPos((CommandContext<CommandSourceStack>)debug0, "pos"), BlockStateArgument.getBlock((CommandContext<CommandSourceStack>)debug0, "block"), Mode.REPLACE, debug0 -> debug0.getLevel().isEmptyBlock(debug0.getPos()))))).then(Commands.literal("replace").executes(debug0 -> setBlock((CommandSourceStack)debug0.getSource(), BlockPosArgument.getLoadedBlockPos((CommandContext<CommandSourceStack>)debug0, "pos"), BlockStateArgument.getBlock((CommandContext<CommandSourceStack>)debug0, "block"), Mode.REPLACE, null))))));
+        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("setblock").requires(debug0l -> debug0l.hasPermission(2))).then(Commands.argument("pos", BlockPosArgument.blockPos()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("block", BlockStateArgument.block()).executes(debug0l -> setBlock((CommandSourceStack)debug0l.getSource(), BlockPosArgument.getLoadedBlockPos((CommandContext<CommandSourceStack>)debug0l, "pos"), BlockStateArgument.getBlock((CommandContext<CommandSourceStack>)debug0l, "block"), Mode.REPLACE, null))).then(Commands.literal("destroy").executes(debug0l -> setBlock((CommandSourceStack)debug0l.getSource(), BlockPosArgument.getLoadedBlockPos((CommandContext<CommandSourceStack>)debug0l, "pos"), BlockStateArgument.getBlock((CommandContext<CommandSourceStack>)debug0l, "block"), Mode.DESTROY, null)))).then(Commands.literal("keep").executes(debug0l -> setBlock((CommandSourceStack)debug0l.getSource(), BlockPosArgument.getLoadedBlockPos((CommandContext<CommandSourceStack>)debug0l, "pos"), BlockStateArgument.getBlock((CommandContext<CommandSourceStack>)debug0l, "block"), Mode.REPLACE, debug0ll -> debug0ll.getLevel().isEmptyBlock(debug0ll.getPos()))))).then(Commands.literal("replace").executes(debug0l -> setBlock((CommandSourceStack)debug0l.getSource(), BlockPosArgument.getLoadedBlockPos((CommandContext<CommandSourceStack>)debug0l, "pos"), BlockStateArgument.getBlock((CommandContext<CommandSourceStack>)debug0l, "block"), Mode.REPLACE, null)))))); // MagmaCube - decompile fix
     }
     
     private static int setBlock(final CommandSourceStack debug0, final BlockPos debug1, final BlockInput debug2, final Mode debug3, @Nullable final Predicate<BlockInWorld> debug4) throws CommandSyntaxException {
diff --git a/src/main/java/net/minecraft/server/commands/SetWorldSpawnCommand.java b/src/main/java/net/minecraft/server/commands/SetWorldSpawnCommand.java
index 418bee09071d8f5bf00427e41ce0b71d7d6e172d..e4c4abab674999ac40a74060ebf60f6749498ef6 100644
--- a/src/main/java/net/minecraft/server/commands/SetWorldSpawnCommand.java
+++ b/src/main/java/net/minecraft/server/commands/SetWorldSpawnCommand.java
@@ -17,7 +17,7 @@ import com.mojang.brigadier.CommandDispatcher;
 public class SetWorldSpawnCommand
 {
     public static void register(final CommandDispatcher<CommandSourceStack> debug0) {
-        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("setworldspawn").requires(debug0 -> debug0.hasPermission(2))).executes(debug0 -> setSpawn((CommandSourceStack)debug0.getSource(), new BlockPos(((CommandSourceStack)debug0.getSource()).getPosition()), 0.0f))).then(((RequiredArgumentBuilder)Commands.argument("pos", (com.mojang.brigadier.arguments.ArgumentType<Object>)BlockPosArgument.blockPos()).executes(debug0 -> setSpawn((CommandSourceStack)debug0.getSource(), BlockPosArgument.getOrLoadBlockPos((CommandContext<CommandSourceStack>)debug0, "pos"), 0.0f))).then(Commands.argument("angle", (com.mojang.brigadier.arguments.ArgumentType<Object>)AngleArgument.angle()).executes(debug0 -> setSpawn((CommandSourceStack)debug0.getSource(), BlockPosArgument.getOrLoadBlockPos((CommandContext<CommandSourceStack>)debug0, "pos"), AngleArgument.getAngle((CommandContext<CommandSourceStack>)debug0, "angle"))))));
+        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("setworldspawn").requires(debug0l -> debug0l.hasPermission(2))).executes(debug0l -> setSpawn((CommandSourceStack)debug0l.getSource(), new BlockPos(((CommandSourceStack)debug0l.getSource()).getPosition()), 0.0f))).then(((RequiredArgumentBuilder)Commands.argument("pos", BlockPosArgument.blockPos()).executes(debug0l -> setSpawn((CommandSourceStack)debug0l.getSource(), BlockPosArgument.getOrLoadBlockPos((CommandContext<CommandSourceStack>)debug0l, "pos"), 0.0f))).then(Commands.argument("angle", AngleArgument.angle()).executes(debug0l -> setSpawn((CommandSourceStack)debug0l.getSource(), BlockPosArgument.getOrLoadBlockPos((CommandContext<CommandSourceStack>)debug0l, "pos"), AngleArgument.getAngle((CommandContext<CommandSourceStack>)debug0l, "angle")))))); // MagmaCube - decompile fix
     }
     
     private static int setSpawn(final CommandSourceStack debug0, final BlockPos debug1, final float debug2) {
diff --git a/src/main/java/net/minecraft/server/commands/SpectateCommand.java b/src/main/java/net/minecraft/server/commands/SpectateCommand.java
index 97c3ce609e49bf809f424baf605ef0dca25b647f..108c6904b335526bebcf32be6d7b964c6fcd0ed7 100644
--- a/src/main/java/net/minecraft/server/commands/SpectateCommand.java
+++ b/src/main/java/net/minecraft/server/commands/SpectateCommand.java
@@ -25,7 +25,7 @@ public class SpectateCommand
     private static final DynamicCommandExceptionType ERROR_NOT_SPECTATOR;
     
     public static void register(final CommandDispatcher<CommandSourceStack> debug0) {
-        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("spectate").requires(debug0 -> debug0.hasPermission(2))).executes(debug0 -> spectate((CommandSourceStack)debug0.getSource(), null, ((CommandSourceStack)debug0.getSource()).getPlayerOrException()))).then(((RequiredArgumentBuilder)Commands.argument("target", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.entity()).executes(debug0 -> spectate((CommandSourceStack)debug0.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)debug0, "target"), ((CommandSourceStack)debug0.getSource()).getPlayerOrException()))).then(Commands.argument("player", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.player()).executes(debug0 -> spectate((CommandSourceStack)debug0.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)debug0, "target"), EntityArgument.getPlayer((CommandContext<CommandSourceStack>)debug0, "player"))))));
+        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("spectate").requires(debug0l -> debug0l.hasPermission(2))).executes(debug0l -> spectate((CommandSourceStack)debug0l.getSource(), null, ((CommandSourceStack)debug0l.getSource()).getPlayerOrException()))).then(((RequiredArgumentBuilder)Commands.argument("target", EntityArgument.entity()).executes(debug0l -> spectate((CommandSourceStack)debug0l.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)debug0l, "target"), ((CommandSourceStack)debug0l.getSource()).getPlayerOrException()))).then(Commands.argument("player", EntityArgument.player()).executes(debug0l -> spectate((CommandSourceStack)debug0l.getSource(), EntityArgument.getEntity((CommandContext<CommandSourceStack>)debug0l, "target"), EntityArgument.getPlayer((CommandContext<CommandSourceStack>)debug0l, "player")))))); // MagmaCube - decompile fix
     }
     
     private static int spectate(final CommandSourceStack debug0, @Nullable final Entity debug1, final ServerPlayer debug2) throws CommandSyntaxException {
@@ -49,8 +49,7 @@ public class SpectateCommand
         ERROR_SELF = new SimpleCommandExceptionType((Message)new TranslatableComponent("commands.spectate.self"));
         final TranslatableComponent translatableComponent;
         ERROR_NOT_SPECTATOR = new DynamicCommandExceptionType(debug0 -> {
-            new TranslatableComponent("commands.spectate.not_spectator", new Object[] { debug0 });
-            return translatableComponent;
+            return new TranslatableComponent("commands.spectate.not_spectator", new Object[] { debug0 }); // MagmaCube - decompile fix
         });
     }
 }
diff --git a/src/main/java/net/minecraft/server/commands/StopSoundCommand.java b/src/main/java/net/minecraft/server/commands/StopSoundCommand.java
index 613892e3feffc15074adc4102bb9c9acbed80251..124279db13740aa46a6126379fb6a4b4be2d8284 100644
--- a/src/main/java/net/minecraft/server/commands/StopSoundCommand.java
+++ b/src/main/java/net/minecraft/server/commands/StopSoundCommand.java
@@ -28,11 +28,11 @@ import com.mojang.brigadier.CommandDispatcher;
 public class StopSoundCommand
 {
     public static void register(final CommandDispatcher<CommandSourceStack> debug0) {
-        final RequiredArgumentBuilder<CommandSourceStack, EntitySelector> debug = (RequiredArgumentBuilder<CommandSourceStack, EntitySelector>)((RequiredArgumentBuilder)Commands.argument("targets", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.players()).executes(debug0 -> stopSound((CommandSourceStack)debug0.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug0, "targets"), null, null))).then(Commands.literal("*").then(Commands.argument("sound", (com.mojang.brigadier.arguments.ArgumentType<Object>)ResourceLocationArgument.id()).suggests((SuggestionProvider)SuggestionProviders.AVAILABLE_SOUNDS).executes(debug0 -> stopSound((CommandSourceStack)debug0.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug0, "targets"), null, ResourceLocationArgument.getId((CommandContext<CommandSourceStack>)debug0, "sound")))));
+        final RequiredArgumentBuilder<CommandSourceStack, EntitySelector> debug = (Commands.argument("targets", EntityArgument.players()).executes(debug0l -> stopSound(debug0l.getSource(), EntityArgument.getPlayers(debug0l, "targets"), null, null))).then(Commands.literal("*").then(Commands.argument("sound", ResourceLocationArgument.id()).suggests(SuggestionProviders.AVAILABLE_SOUNDS).executes(debug0l -> stopSound(debug0l.getSource(), EntityArgument.getPlayers(debug0l, "targets"), null, ResourceLocationArgument.getId(debug0l, "sound"))))); // MagmaCube - decompile fix
         for (final SoundSource debug2 : SoundSource.values()) {
-            debug.then(((LiteralArgumentBuilder)Commands.literal(debug2.getName()).executes(debug1 -> stopSound((CommandSourceStack)debug1.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug1, "targets"), debug2, null))).then(Commands.argument("sound", (com.mojang.brigadier.arguments.ArgumentType<Object>)ResourceLocationArgument.id()).suggests((SuggestionProvider)SuggestionProviders.AVAILABLE_SOUNDS).executes(debug1 -> stopSound((CommandSourceStack)debug1.getSource(), EntityArgument.getPlayers((CommandContext<CommandSourceStack>)debug1, "targets"), debug2, ResourceLocationArgument.getId((CommandContext<CommandSourceStack>)debug1, "sound")))));
+            debug.then(((LiteralArgumentBuilder)Commands.literal(debug2.getName()).executes(debug1 -> stopSound(debug1.getSource(), EntityArgument.getPlayers(debug1, "targets"), debug2, null))).then(Commands.argument("sound", ResourceLocationArgument.id()).suggests(SuggestionProviders.AVAILABLE_SOUNDS).executes(debug1 -> stopSound(debug1.getSource(), EntityArgument.getPlayers(debug1, "targets"), debug2, ResourceLocationArgument.getId(debug1, "sound"))))); // MagmaCube - decompile fix
         }
-        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("stopsound").requires(debug0 -> debug0.hasPermission(2))).then((ArgumentBuilder)debug));
+        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("stopsound").requires(debug0l -> debug0l.hasPermission(2))).then((ArgumentBuilder)debug)); // MagmaCube - decompile fix
     }
     
     private static int stopSound(final CommandSourceStack debug0, final Collection<ServerPlayer> debug1, @Nullable final SoundSource debug2, @Nullable final ResourceLocation debug3) {
diff --git a/src/main/java/net/minecraft/server/commands/TagCommand.java b/src/main/java/net/minecraft/server/commands/TagCommand.java
index 9e7013c9aed1a9491a7e1fb2eb51caf540cd753e..6225cd64b63503bdd1cf587cf6fda99d4e88314d 100644
--- a/src/main/java/net/minecraft/server/commands/TagCommand.java
+++ b/src/main/java/net/minecraft/server/commands/TagCommand.java
@@ -30,11 +30,11 @@ public class TagCommand
     private static final SimpleCommandExceptionType ERROR_REMOVE_FAILED;
     
     public static void register(final CommandDispatcher<CommandSourceStack> debug0) {
-        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("tag").requires(debug0 -> debug0.hasPermission(2))).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("targets", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.entities()).then(Commands.literal("add").then(Commands.argument("name", (com.mojang.brigadier.arguments.ArgumentType<Object>)StringArgumentType.word()).executes(debug0 -> addTag((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"), StringArgumentType.getString(debug0, "name")))))).then(Commands.literal("remove").then(Commands.argument("name", (com.mojang.brigadier.arguments.ArgumentType<Object>)StringArgumentType.word()).suggests((debug0, debug1) -> SharedSuggestionProvider.suggest(getTags(EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets")), debug1)).executes(debug0 -> removeTag((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"), StringArgumentType.getString(debug0, "name")))))).then(Commands.literal("list").executes(debug0 -> listTags((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"))))));
+        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("tag").requires(debug0l -> debug0l.hasPermission(2))).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("targets", EntityArgument.entities()).then(Commands.literal("add").then(Commands.argument("name", StringArgumentType.word()).executes(debug0l -> addTag((CommandSourceStack)debug0l.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0l, "targets"), StringArgumentType.getString(debug0l, "name")))))).then(Commands.literal("remove").then(Commands.argument("name", StringArgumentType.word()).suggests((debug0l, debug1) -> SharedSuggestionProvider.suggest(getTags(EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0l, "targets")), debug1)).executes(debug0l -> removeTag((CommandSourceStack)debug0l.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0l, "targets"), StringArgumentType.getString(debug0l, "name")))))).then(Commands.literal("list").executes(debug0l -> listTags((CommandSourceStack)debug0l.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0l, "targets")))))); // MagmaCube - decompile fix
     }
     
     private static Collection<String> getTags(final Collection<? extends Entity> debug0) {
-        final Set<String> debug = (Set<String>)Sets.newHashSet();
+        final Set<String> debug = Sets.newHashSet(); // MagmaCube - decompile fix
         for (final Entity debug2 : debug0) {
             debug.addAll(debug2.getTags());
         }
@@ -80,7 +80,7 @@ public class TagCommand
     }
     
     private static int listTags(final CommandSourceStack debug0, final Collection<? extends Entity> debug1) {
-        final Set<String> debug2 = (Set<String>)Sets.newHashSet();
+        final Set<String> debug2 = Sets.newHashSet(); // MagmaCube - decompile fix
         for (final Entity debug3 : debug1) {
             debug2.addAll(debug3.getTags());
         }
diff --git a/src/main/java/net/minecraft/server/commands/TeleportCommand.java b/src/main/java/net/minecraft/server/commands/TeleportCommand.java
index 88dd0d66e1da2f893f0d16e63a1371a259baa606..1493009d096bccb54c1fd6833bdc3f42d5c30b28 100644
--- a/src/main/java/net/minecraft/server/commands/TeleportCommand.java
+++ b/src/main/java/net/minecraft/server/commands/TeleportCommand.java
@@ -45,8 +45,8 @@ public class TeleportCommand
     private static final SimpleCommandExceptionType INVALID_POSITION;
     
     public static void register(final CommandDispatcher<CommandSourceStack> debug0) {
-        final LiteralCommandNode<CommandSourceStack> debug = (LiteralCommandNode<CommandSourceStack>)debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("teleport").requires(debug0 -> debug0.hasPermission(2))).then(((RequiredArgumentBuilder)Commands.argument("targets", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.entities()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("location", (com.mojang.brigadier.arguments.ArgumentType<Object>)Vec3Argument.vec3()).executes(debug0 -> teleportToPos((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"), ((CommandSourceStack)debug0.getSource()).getLevel(), Vec3Argument.getCoordinates((CommandContext<CommandSourceStack>)debug0, "location"), null, null))).then(Commands.argument("rotation", (com.mojang.brigadier.arguments.ArgumentType<Object>)RotationArgument.rotation()).executes(debug0 -> teleportToPos((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"), ((CommandSourceStack)debug0.getSource()).getLevel(), Vec3Argument.getCoordinates((CommandContext<CommandSourceStack>)debug0, "location"), RotationArgument.getRotation((CommandContext<CommandSourceStack>)debug0, "rotation"), null)))).then(((LiteralArgumentBuilder)Commands.literal("facing").then(Commands.literal("entity").then(((RequiredArgumentBuilder)Commands.argument("facingEntity", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.entity()).executes(debug0 -> teleportToPos((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"), ((CommandSourceStack)debug0.getSource()).getLevel(), Vec3Argument.getCoordinates((CommandContext<CommandSourceStack>)debug0, "location"), null, new LookAt(EntityArgument.getEntity((CommandContext<CommandSourceStack>)debug0, "facingEntity"), EntityAnchorArgument.Anchor.FEET)))).then(Commands.argument("facingAnchor", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityAnchorArgument.anchor()).executes(debug0 -> teleportToPos((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"), ((CommandSourceStack)debug0.getSource()).getLevel(), Vec3Argument.getCoordinates((CommandContext<CommandSourceStack>)debug0, "location"), null, new LookAt(EntityArgument.getEntity((CommandContext<CommandSourceStack>)debug0, "facingEntity"), EntityAnchorArgument.getAnchor((CommandContext<CommandSourceStack>)debug0, "facingAnchor")))))))).then(Commands.argument("facingLocation", (com.mojang.brigadier.arguments.ArgumentType<Object>)Vec3Argument.vec3()).executes(debug0 -> teleportToPos((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"), ((CommandSourceStack)debug0.getSource()).getLevel(), Vec3Argument.getCoordinates((CommandContext<CommandSourceStack>)debug0, "location"), null, new LookAt(Vec3Argument.getVec3((CommandContext<CommandSourceStack>)debug0, "facingLocation")))))))).then(Commands.argument("destination", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.entity()).executes(debug0 -> teleportToEntity((CommandSourceStack)debug0.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0, "targets"), EntityArgument.getEntity((CommandContext<CommandSourceStack>)debug0, "destination")))))).then(Commands.argument("location", (com.mojang.brigadier.arguments.ArgumentType<Object>)Vec3Argument.vec3()).executes(debug0 -> teleportToPos((CommandSourceStack)debug0.getSource(), Collections.singleton(((CommandSourceStack)debug0.getSource()).getEntityOrException()), ((CommandSourceStack)debug0.getSource()).getLevel(), Vec3Argument.getCoordinates((CommandContext<CommandSourceStack>)debug0, "location"), WorldCoordinates.current(), null)))).then(Commands.argument("destination", (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.entity()).executes(debug0 -> teleportToEntity((CommandSourceStack)debug0.getSource(), Collections.singleton(((CommandSourceStack)debug0.getSource()).getEntityOrException()), EntityArgument.getEntity((CommandContext<CommandSourceStack>)debug0, "destination")))));
-        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("tp").requires(debug0 -> debug0.hasPermission(2))).redirect((CommandNode)debug));
+        final LiteralCommandNode<CommandSourceStack> debug = (LiteralCommandNode<CommandSourceStack>)debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("teleport").requires(debug0l -> debug0l.hasPermission(2))).then(((RequiredArgumentBuilder)Commands.argument("targets", EntityArgument.entities()).then(((RequiredArgumentBuilder)((RequiredArgumentBuilder)Commands.argument("location", Vec3Argument.vec3()).executes(debug0l -> teleportToPos((CommandSourceStack)debug0l.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0l, "targets"), ((CommandSourceStack)debug0l.getSource()).getLevel(), Vec3Argument.getCoordinates((CommandContext<CommandSourceStack>)debug0l, "location"), null, null))).then(Commands.argument("rotation", RotationArgument.rotation()).executes(debug0l -> teleportToPos((CommandSourceStack)debug0l.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0l, "targets"), ((CommandSourceStack)debug0l.getSource()).getLevel(), Vec3Argument.getCoordinates((CommandContext<CommandSourceStack>)debug0l, "location"), RotationArgument.getRotation((CommandContext<CommandSourceStack>)debug0l, "rotation"), null)))).then(((LiteralArgumentBuilder)Commands.literal("facing").then(Commands.literal("entity").then(((RequiredArgumentBuilder)Commands.argument("facingEntity", EntityArgument.entity()).executes(debug0l -> teleportToPos((CommandSourceStack)debug0l.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0l, "targets"), ((CommandSourceStack)debug0l.getSource()).getLevel(), Vec3Argument.getCoordinates((CommandContext<CommandSourceStack>)debug0l, "location"), null, new LookAt(EntityArgument.getEntity((CommandContext<CommandSourceStack>)debug0l, "facingEntity"), EntityAnchorArgument.Anchor.FEET)))).then(Commands.argument("facingAnchor", EntityAnchorArgument.anchor()).executes(debug0l -> teleportToPos((CommandSourceStack)debug0l.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0l, "targets"), ((CommandSourceStack)debug0l.getSource()).getLevel(), Vec3Argument.getCoordinates((CommandContext<CommandSourceStack>)debug0l, "location"), null, new LookAt(EntityArgument.getEntity((CommandContext<CommandSourceStack>)debug0l, "facingEntity"), EntityAnchorArgument.getAnchor((CommandContext<CommandSourceStack>)debug0l, "facingAnchor")))))))).then(Commands.argument("facingLocation", Vec3Argument.vec3()).executes(debug0l -> teleportToPos((CommandSourceStack)debug0l.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0l, "targets"), ((CommandSourceStack)debug0l.getSource()).getLevel(), Vec3Argument.getCoordinates((CommandContext<CommandSourceStack>)debug0l, "location"), null, new LookAt(Vec3Argument.getVec3((CommandContext<CommandSourceStack>)debug0l, "facingLocation")))))))).then(Commands.argument("destination", EntityArgument.entity()).executes(debug0l -> teleportToEntity((CommandSourceStack)debug0l.getSource(), EntityArgument.getEntities((CommandContext<CommandSourceStack>)debug0l, "targets"), EntityArgument.getEntity((CommandContext<CommandSourceStack>)debug0l, "destination")))))).then(Commands.argument("location", Vec3Argument.vec3()).executes(debug0l -> teleportToPos((CommandSourceStack)debug0l.getSource(), Collections.singleton(((CommandSourceStack)debug0l.getSource()).getEntityOrException()), ((CommandSourceStack)debug0l.getSource()).getLevel(), Vec3Argument.getCoordinates((CommandContext<CommandSourceStack>)debug0l, "location"), WorldCoordinates.current(), null)))).then(Commands.argument("destination", EntityArgument.entity()).executes(debug0l -> teleportToEntity((CommandSourceStack)debug0l.getSource(), Collections.singleton(((CommandSourceStack)debug0l.getSource()).getEntityOrException()), EntityArgument.getEntity((CommandContext<CommandSourceStack>)debug0l, "destination"))))); // MagmaCube - decompile fix
+        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("tp").requires(debug0l -> debug0l.hasPermission(2))).redirect((CommandNode)debug)); // MagmaCube - decompile fix
     }
     
     private static int teleportToEntity(final CommandSourceStack debug0, final Collection<? extends Entity> debug1, final Entity debug2) throws CommandSyntaxException {
diff --git a/src/main/java/net/minecraft/server/commands/WeatherCommand.java b/src/main/java/net/minecraft/server/commands/WeatherCommand.java
index 892a4a6b28de429218f1da03ee26fc41fa940eab..22b4505e36b595d56461d601c01b8f424d38d334 100644
--- a/src/main/java/net/minecraft/server/commands/WeatherCommand.java
+++ b/src/main/java/net/minecraft/server/commands/WeatherCommand.java
@@ -14,7 +14,7 @@ import com.mojang.brigadier.CommandDispatcher;
 public class WeatherCommand
 {
     public static void register(final CommandDispatcher<CommandSourceStack> debug0) {
-        debug0.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)Commands.literal("weather").requires(debug0 -> debug0.hasPermission(2))).then(((LiteralArgumentBuilder)Commands.literal("clear").executes(debug0 -> setClear((CommandSourceStack)debug0.getSource(), 6000))).then(Commands.argument("duration", (com.mojang.brigadier.arguments.ArgumentType<Object>)IntegerArgumentType.integer(0, 1000000)).executes(debug0 -> setClear((CommandSourceStack)debug0.getSource(), IntegerArgumentType.getInteger(debug0, "duration") * 20))))).then(((LiteralArgumentBuilder)Commands.literal("rain").executes(debug0 -> setRain((CommandSourceStack)debug0.getSource(), 6000))).then(Commands.argument("duration", (com.mojang.brigadier.arguments.ArgumentType<Object>)IntegerArgumentType.integer(0, 1000000)).executes(debug0 -> setRain((CommandSourceStack)debug0.getSource(), IntegerArgumentType.getInteger(debug0, "duration") * 20))))).then(((LiteralArgumentBuilder)Commands.literal("thunder").executes(debug0 -> setThunder((CommandSourceStack)debug0.getSource(), 6000))).then(Commands.argument("duration", (com.mojang.brigadier.arguments.ArgumentType<Object>)IntegerArgumentType.integer(0, 1000000)).executes(debug0 -> setThunder((CommandSourceStack)debug0.getSource(), IntegerArgumentType.getInteger(debug0, "duration") * 20)))));
+        debug0.register((((Commands.literal("weather").requires(debug0l -> debug0l.hasPermission(2))).then((Commands.literal("clear").executes(debug0l -> setClear((CommandSourceStack)debug0l.getSource(), 6000))).then(Commands.argument("duration", IntegerArgumentType.integer(0, 1000000)).executes(debug0l -> setClear((CommandSourceStack)debug0l.getSource(), IntegerArgumentType.getInteger(debug0l, "duration") * 20))))).then((Commands.literal("rain").executes(debug0l -> setRain(debug0l.getSource(), 6000))).then(Commands.argument("duration", IntegerArgumentType.integer(0, 1000000)).executes(debug0l -> setRain(debug0l.getSource(), IntegerArgumentType.getInteger(debug0l, "duration") * 20))))).then((Commands.literal("thunder").executes(debug0l -> setThunder(debug0l.getSource(), 6000))).then(Commands.argument("duration", IntegerArgumentType.integer(0, 1000000)).executes(debug0l -> setThunder(debug0l.getSource(), IntegerArgumentType.getInteger(debug0l, "duration") * 20))))); // MagmaCube - decompile fix
     }
     
     private static int setClear(final CommandSourceStack debug0, final int debug1) {
diff --git a/src/main/java/net/minecraft/server/commands/data/DataCommands.java b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
index 77a097748f1a6048d50b0f0cc998a06e5fac73e3..6e90dca24af00db3abb93d740faf07be5a0e0a55 100644
--- a/src/main/java/net/minecraft/server/commands/data/DataCommands.java
+++ b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
@@ -69,11 +69,11 @@ public class DataCommands {
     public static void register(CommandDispatcher<CommandSourceStack> debug03) {
         LiteralArgumentBuilder debug1 = (LiteralArgumentBuilder)Commands.literal("data").requires(debug0 -> debug0.hasPermission(2));
         for (DataProvider debug3 : TARGET_PROVIDERS) {
-            ((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)debug1.then(debug3.wrap((ArgumentBuilder<CommandSourceStack, ?>)Commands.literal("merge"), debug12 -> debug12.then(Commands.argument("nbt", CompoundTagArgument.compoundTag()).executes(debug1 -> DataCommands.mergeData((CommandSourceStack)debug1.getSource(), debug3.access((CommandContext<CommandSourceStack>)debug1), CompoundTagArgument.getCompoundTag(debug1, "nbt"))))))).then(debug3.wrap((ArgumentBuilder<CommandSourceStack, ?>)Commands.literal("get"), debug12 -> debug12.executes(debug1 -> DataCommands.getData((CommandSourceStack)debug1.getSource(), debug3.access((CommandContext<CommandSourceStack>)debug1))).then(((RequiredArgumentBuilder)Commands.argument("path", NbtPathArgument.nbtPath()).executes(debug1 -> DataCommands.getData((CommandSourceStack)debug1.getSource(), debug3.access((CommandContext<CommandSourceStack>)debug1), NbtPathArgument.getPath((CommandContext<CommandSourceStack>)debug1, "path")))).then(Commands.argument("scale", DoubleArgumentType.doubleArg()).executes(debug1 -> DataCommands.getNumeric((CommandSourceStack)debug1.getSource(), debug3.access((CommandContext<CommandSourceStack>)debug1), NbtPathArgument.getPath((CommandContext<CommandSourceStack>)debug1, "path"), DoubleArgumentType.getDouble((CommandContext)debug1, (String)"scale")))))))).then(debug3.wrap((ArgumentBuilder<CommandSourceStack, ?>)Commands.literal("remove"), debug12 -> debug12.then(Commands.argument("path", NbtPathArgument.nbtPath()).executes(debug1 -> DataCommands.removeData((CommandSourceStack)debug1.getSource(), debug3.access((CommandContext<CommandSourceStack>)debug1), NbtPathArgument.getPath((CommandContext<CommandSourceStack>)debug1, "path"))))))).then(DataCommands.decorateModification((debug02, debug12) -> debug02.then(Commands.literal("insert").then(Commands.argument("index", IntegerArgumentType.integer()).then(debug12.create((debug0, debug1, debug2, debug3) -> {
+            ((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)debug1.then(debug3.wrap(Commands.literal("merge"), debug12 -> debug12.then(Commands.argument("nbt", CompoundTagArgument.compoundTag()).executes(debug1l -> DataCommands.mergeData(debug1l.getSource(), debug3.access(debug1l), CompoundTagArgument.getCompoundTag(debug1l, "nbt"))))))).then(debug3.wrap(Commands.literal("get"), debug12 -> debug12.executes(debug1l -> DataCommands.getData(debug1l.getSource(), debug3.access(debug1l))).then(((RequiredArgumentBuilder)Commands.argument("path", NbtPathArgument.nbtPath()).executes(debug1l -> DataCommands.getData(debug1l.getSource(), debug3.access(debug1l), NbtPathArgument.getPath(debug1l, "path")))).then(Commands.argument("scale", DoubleArgumentType.doubleArg()).executes(debug1l -> DataCommands.getNumeric(debug1l.getSource(), debug3.access(debug1l), NbtPathArgument.getPath(debug1l, "path"), DoubleArgumentType.getDouble((CommandContext)debug1l, (String)"scale")))))))).then(debug3.wrap(Commands.literal("remove"), debug12 -> debug12.then(Commands.argument("path", NbtPathArgument.nbtPath()).executes(debug1l -> DataCommands.removeData(debug1l.getSource(), debug3.access(debug1l), NbtPathArgument.getPath(debug1l, "path"))))))).then(DataCommands.decorateModification((debug02, debug12) -> debug02.then(Commands.literal("insert").then(Commands.argument("index", IntegerArgumentType.integer()).then(debug12.create((debug0, debug1l, debug2, debug3l) -> { // MagmaCube - decompile fix
                 int debug4 = IntegerArgumentType.getInteger((CommandContext)debug0, (String)"index");
-                return DataCommands.insertAtIndex(debug4, debug1, debug2, debug3);
-            })))).then(Commands.literal("prepend").then(debug12.create((debug0, debug1, debug2, debug3) -> DataCommands.insertAtIndex(0, debug1, debug2, debug3)))).then(Commands.literal("append").then(debug12.create((debug0, debug1, debug2, debug3) -> DataCommands.insertAtIndex(-1, debug1, debug2, debug3)))).then(Commands.literal("set").then(debug12.create((debug0, debug1, debug2, debug3) -> debug2.set(debug1, ((Tag)Iterables.getLast((Iterable)debug3))::copy)))).then(Commands.literal("merge").then(debug12.create((debug0, debug1, debug2, debug3) -> {
-                List<Tag> debug4 = debug2.getOrCreate(debug1, CompoundTag::new);
+                return DataCommands.insertAtIndex(debug4, debug1l, debug2, debug3l); // MagmaCube - decompile fix
+            })))).then(Commands.literal("prepend").then(debug12.create((debug0, debug1l, debug2, debug3l) -> DataCommands.insertAtIndex(0, debug1l, debug2, debug3l)))).then(Commands.literal("append").then(debug12.create((debug0, debug1l, debug2, debug3l) -> DataCommands.insertAtIndex(-1, debug1l, debug2, debug3l)))).then(Commands.literal("set").then(debug12.create((debug0, debug1l, debug2, debug3l) -> debug2.set(debug1l, ((Tag)Iterables.getLast((Iterable)debug3l))::copy)))).then(Commands.literal("merge").then(debug12.create((debug0, debug1l, debug2, debug3l) -> { // MagmaCube - decompile fix
+                List<Tag> debug4 = debug2.getOrCreate(debug1l, CompoundTag::new); // MagmaCube - decompile fix
                 int debug5 = 0;
                 for (Tag debug7 : debug4) {
                     if (!(debug7 instanceof CompoundTag)) {
@@ -81,7 +81,7 @@ public class DataCommands {
                     }
                     CompoundTag debug8 = (CompoundTag)debug7;
                     CompoundTag debug9 = debug8.copy();
-                    for (Tag debug11 : debug3) {
+                    for (Tag debug11 : debug3l) {
                         if (!(debug11 instanceof CompoundTag)) {
                             throw ERROR_EXPECTED_OBJECT.create((Object)debug11);
                         }
@@ -122,28 +122,30 @@ public class DataCommands {
 
     private static ArgumentBuilder<CommandSourceStack, ?> decorateModification(BiConsumer<ArgumentBuilder<CommandSourceStack, ?>, DataManipulatorDecorator> debug0) {
         LiteralArgumentBuilder<CommandSourceStack> debug1 = Commands.literal("modify");
+        // MagmaCube start - decompile fix
         for (DataProvider debug3 : TARGET_PROVIDERS) {
-            debug3.wrap((ArgumentBuilder<CommandSourceStack, ?>)debug1, debug22 -> {
-                RequiredArgumentBuilder<CommandSourceStack, NbtPathArgument.NbtPath> debug3 = Commands.argument("targetPath", NbtPathArgument.nbtPath());
+            debug3.wrap(debug1, debug22 -> {
+                RequiredArgumentBuilder<CommandSourceStack, NbtPathArgument.NbtPath> debug3l = Commands.argument("targetPath", NbtPathArgument.nbtPath());
                 for (DataProvider debug5 : SOURCE_PROVIDERS) {
-                    debug0.accept((ArgumentBuilder<CommandSourceStack, ?>)debug3, debug2 -> debug5.wrap((ArgumentBuilder<CommandSourceStack, ?>)Commands.literal("from"), debug32 -> debug32.executes(debug3 -> {
-                        List<Tag> debug4 = Collections.singletonList(debug5.access((CommandContext<CommandSourceStack>)debug3).getData());
-                        return DataCommands.manipulateData((CommandContext<CommandSourceStack>)debug3, debug3, debug2, debug4);
-                    }).then(Commands.argument("sourcePath", NbtPathArgument.nbtPath()).executes(debug3 -> {
-                        DataAccessor debug4 = debug5.access((CommandContext<CommandSourceStack>)debug3);
-                        NbtPathArgument.NbtPath debug5 = NbtPathArgument.getPath((CommandContext<CommandSourceStack>)debug3, "sourcePath");
-                        List<Tag> debug6 = debug5.get(debug4.getData());
-                        return DataCommands.manipulateData((CommandContext<CommandSourceStack>)debug3, debug3, debug2, debug6);
+                    debug0.accept(debug3l, debug2 -> debug5.wrap(Commands.literal("from"), debug32 -> debug32.executes(debug3ll -> {
+                        List<Tag> debug4 = Collections.singletonList(debug5.access(debug3ll).getData());
+                        return DataCommands.manipulateData(debug3ll, debug3, debug2, debug4);
+                    }).then(Commands.argument("sourcePath", NbtPathArgument.nbtPath()).executes(debug3ll -> {
+                        DataAccessor debug4 = debug5.access(debug3ll);
+                        NbtPathArgument.NbtPath debug5l = NbtPathArgument.getPath(debug3ll, "sourcePath");
+                        List<Tag> debug6 = debug5l.get(debug4.getData());
+                        return DataCommands.manipulateData(debug3ll, debug3, debug2, debug6);
                     }))));
                 }
-                debug0.accept((ArgumentBuilder<CommandSourceStack, ?>)debug3, debug1 -> (LiteralArgumentBuilder)Commands.literal("value").then(Commands.argument("value", NbtTagArgument.nbtTag()).executes(debug2 -> {
-                    List<Tag> debug3 = Collections.singletonList(NbtTagArgument.getNbtTag(debug2, "value"));
-                    return DataCommands.manipulateData((CommandContext<CommandSourceStack>)debug2, debug3, debug1, debug3);
+                debug0.accept(debug3l, debug1l -> (LiteralArgumentBuilder)Commands.literal("value").then(Commands.argument("value", NbtTagArgument.nbtTag()).executes(debug2 -> {
+                    List<Tag> debug3ll = Collections.singletonList(NbtTagArgument.getNbtTag(debug2, "value"));
+                    return DataCommands.manipulateData(debug2, debug3, debug1l, debug3ll);
                 })));
-                return debug22.then(debug3);
+                return debug22.then(debug3l);
             });
         }
         return debug1;
+        // MagmaCube end - decompile fix
     }
 
     private static int manipulateData(CommandContext<CommandSourceStack> debug0, DataProvider debug1, DataManipulator debug2, List<Tag> debug3) throws CommandSyntaxException {
@@ -155,7 +157,7 @@ public class DataCommands {
             throw ERROR_MERGE_UNCHANGED.create();
         }
         debug4.setData(debug6);
-        ((CommandSourceStack)debug0.getSource()).sendSuccess(debug4.getModifiedSuccess(), true);
+        (debug0.getSource()).sendSuccess(debug4.getModifiedSuccess(), true); // MagmaCube - decompile fix
         return debug7;
     }
 
diff --git a/src/main/java/net/minecraft/server/commands/data/EntityDataAccessor.java b/src/main/java/net/minecraft/server/commands/data/EntityDataAccessor.java
index ae9e9402a7d7704834f21788087e91417e17b84c..e059fac78bca34370ce2692cf23b5ff31fd2824a 100644
--- a/src/main/java/net/minecraft/server/commands/data/EntityDataAccessor.java
+++ b/src/main/java/net/minecraft/server/commands/data/EntityDataAccessor.java
@@ -64,8 +64,6 @@ public class EntityDataAccessor implements DataAccessor
     static {
         ERROR_NO_PLAYERS = new SimpleCommandExceptionType((Message)new TranslatableComponent("commands.data.entity.invalid"));
         PROVIDER = (debug0 -> new DataCommands.DataProvider() {
-            final /* synthetic */ String val$arg;
-            
             @Override
             public DataAccessor access(final CommandContext<CommandSourceStack> debug1) throws CommandSyntaxException {
                 return new EntityDataAccessor(EntityArgument.getEntity(debug1, debug0));
@@ -73,7 +71,7 @@ public class EntityDataAccessor implements DataAccessor
             
             @Override
             public ArgumentBuilder<CommandSourceStack, ?> wrap(final ArgumentBuilder<CommandSourceStack, ?> debug1, final Function<ArgumentBuilder<CommandSourceStack, ?>, ArgumentBuilder<CommandSourceStack, ?>> debug2) {
-                return (ArgumentBuilder<CommandSourceStack, ?>)debug1.then(Commands.literal("entity").then((ArgumentBuilder)debug2.apply((ArgumentBuilder<CommandSourceStack, ?>)Commands.argument(debug0, (com.mojang.brigadier.arguments.ArgumentType<Object>)EntityArgument.entity()))));
+                return (ArgumentBuilder<CommandSourceStack, ?>)debug1.then(Commands.literal("entity").then((ArgumentBuilder)debug2.apply((ArgumentBuilder<CommandSourceStack, ?>)Commands.argument(debug0, EntityArgument.entity()))));
             }
         });
     }
diff --git a/src/main/java/net/minecraft/server/commands/data/StorageDataAccessor.java b/src/main/java/net/minecraft/server/commands/data/StorageDataAccessor.java
index 5bdd1a72bb44e31f847ff659abe340cc07572266..fd1cb6ac7cba2853ed8743d5b73a8c57ec742eed 100644
--- a/src/main/java/net/minecraft/server/commands/data/StorageDataAccessor.java
+++ b/src/main/java/net/minecraft/server/commands/data/StorageDataAccessor.java
@@ -30,20 +30,15 @@ import net.minecraft.world.level.storage.CommandStorage;
 public class StorageDataAccessor
 implements DataAccessor {
     private static final SuggestionProvider<CommandSourceStack> SUGGEST_STORAGE = (debug0, debug1) -> SharedSuggestionProvider.suggestResource(StorageDataAccessor.getGlobalTags((CommandContext<CommandSourceStack>)debug0).keys(), debug1);
-    public static final Function<String, DataCommands.DataProvider> PROVIDER = debug0 -> new DataCommands.DataProvider((String)debug0){
-        final /* synthetic */ String val$arg;
-        {
-            this.val$arg = string;
-        }
-
+    public static final Function<String, DataCommands.DataProvider> PROVIDER = debug0 -> new DataCommands.DataProvider(){ // MagmaCube - decompile fix
         @Override
         public DataAccessor access(CommandContext<CommandSourceStack> debug1) {
-            return new StorageDataAccessor(StorageDataAccessor.getGlobalTags((CommandContext<CommandSourceStack>)debug1), ResourceLocationArgument.getId(debug1, this.val$arg));
+            return new StorageDataAccessor(StorageDataAccessor.getGlobalTags((CommandContext<CommandSourceStack>)debug1), ResourceLocationArgument.getId(debug1, debug0)); // MagmaCube - decompile fix
         }
 
         @Override
         public ArgumentBuilder<CommandSourceStack, ?> wrap(ArgumentBuilder<CommandSourceStack, ?> debug1, Function<ArgumentBuilder<CommandSourceStack, ?>, ArgumentBuilder<CommandSourceStack, ?>> debug2) {
-            return debug1.then(Commands.literal("storage").then(debug2.apply((ArgumentBuilder<CommandSourceStack, ?>)Commands.argument(this.val$arg, ResourceLocationArgument.id()).suggests(SUGGEST_STORAGE))));
+            return debug1.then(Commands.literal("storage").then(debug2.apply((ArgumentBuilder<CommandSourceStack, ?>)Commands.argument(debug0, ResourceLocationArgument.id()).suggests(SUGGEST_STORAGE)))); // MagmaCube - decompile fix
         }
     };
     private final CommandStorage storage;
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java b/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
index a6cc559981822af9bff6c9fb091a807f65fb6da4..588e55507539b0171cec0a780a1a7e3065177b52 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
@@ -149,10 +149,5 @@ extends PlayerList {
     public boolean canBypassPlayerLimit(GameProfile debug1) {
         return this.getOps().canBypassPlayerLimit(debug1);
     }
-
-    @Override
-    public /* synthetic */ MinecraftServer getServer() {
-        return this.getServer();
-    }
 }
 
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index cfbffc7a1a1d91e329026d1a5c028e166d80dc2a..381fd2d186a2fa3d10bbee914a59f9f097f7be2c 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -118,7 +118,7 @@ implements ServerInterface {
         debug1.start();
         LOGGER.info("Starting minecraft server version " + SharedConstants.getCurrentVersion().getName());
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
-            LOGGER.warn("To start the server with more ram, launch it as Â¥"java -Xmx1024M -Xms1024M -jar minecraft_server.jarÂ¥"");
+            LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\""); // MagmaCube - decompile fix
         }
         LOGGER.info("Loading properties");
         DedicatedServerProperties debug2 = this.settings.getProperties();
@@ -161,7 +161,7 @@ implements ServerInterface {
             LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
             LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
             LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
-            LOGGER.warn("To change this, set Â¥"online-modeÂ¥" to Â¥"trueÂ¥" in the server.properties file.");
+            LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file."); // MagmaCube - decompile fix
         }
         if (this.convertOldUsers()) {
             this.getProfileCache().save();
@@ -175,11 +175,11 @@ implements ServerInterface {
         SkullBlockEntity.setProfileCache(this.getProfileCache());
         SkullBlockEntity.setSessionService(this.getSessionService());
         GameProfileCache.setUsesAuthentication(this.usesAuthentication());
-        LOGGER.info("Preparing level Â¥"{}Â¥"", (Object)this.getLevelIdName());
+        LOGGER.info("Preparing level \"{}\"", (Object)this.getLevelIdName()); // MagmaCube - decompile fix
         this.loadLevel();
         long debug6 = Util.getNanos() - debug4;
         String debug8 = String.format(Locale.ROOT, "%.3fs", (double)debug6 / 1.0E9);
-        LOGGER.info("Done ({})! For help, type Â¥"helpÂ¥"", (Object)debug8);
+        LOGGER.info("Done ({})! For help, type \"help\"", (Object)debug8); // MagmaCube - decompile fix
         if (debug2.announcePlayerAchievements != null) {
             this.getGameRules().getRule(GameRules.RULE_ANNOUNCE_ADVANCEMENTS).set(debug2.announcePlayerAchievements, this);
         }
@@ -544,10 +544,5 @@ implements ServerInterface {
     public boolean forceSynchronousWrites() {
         return this.settings.getProperties().syncChunkWrites;
     }
-
-    @Override
-    public /* synthetic */ PlayerList getPlayerList() {
-        return this.getPlayerList();
-    }
 }
 
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index a52364516646a18941a531582c50e6738dbe0582..d2b12aaab6bb55b26c848feabc7adaff963abdd2 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -60,8 +60,8 @@ extends Settings<DedicatedServerProperties> {
     public final boolean enableJmxMonitoring;
     public final boolean enableStatus;
     public final int entityBroadcastRangePercentage;
-    public final Settings.MutableValue<Integer> playerIdleTimeout;
-    public final Settings.MutableValue<Boolean> whiteList;
+    public final MutableValue<Integer> playerIdleTimeout; // MagmaCube - decompile fix
+    public final MutableValue<Boolean> whiteList; // MagmaCube - decompile fix
     public final WorldGenSettings worldGenSettings;
 
     public DedicatedServerProperties(Properties debug1, RegistryAccess debug2) {
@@ -100,10 +100,5 @@ extends Settings<DedicatedServerProperties> {
     protected DedicatedServerProperties reload(RegistryAccess debug1, Properties debug2) {
         return new DedicatedServerProperties(debug2, debug1);
     }
-
-    @Override
-    protected /* synthetic */ Settings reload(RegistryAccess registryAccess, Properties properties) {
-        return this.reload(registryAccess, properties);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index b46d6395c5e4f66207b811c8eb6f1519c05e5d0c..3eb17ed6c88eeec5f183c47a031f1ffd12986137 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -58,7 +58,7 @@ public abstract class Settings<T extends Settings<T>> {
     private static <V extends Number> Function<String, V> wrapNumberDeserializer(Function<String, V> debug0) {
         return debug1 -> {
             try {
-                return (Number)debug0.apply((String)debug1);
+                return (V) debug0.apply((String)debug1); // MagmaCube - decompile fix
             }
             catch (NumberFormatException debug2) {
                 return null;
@@ -94,22 +94,22 @@ public abstract class Settings<T extends Settings<T>> {
 
     protected <V> V get(String debug1, Function<String, V> debug2, Function<V, String> debug3, V debug4) {
         String debug5 = this.getStringRaw(debug1);
-        Object debug6 = MoreObjects.firstNonNull(debug5 != null ? debug2.apply(debug5) : null, debug4);
+        V debug6 = MoreObjects.firstNonNull(debug5 != null ? debug2.apply(debug5) : null, debug4); // MagmaCube - decompile fix
         this.properties.put(debug1, debug3.apply(debug6));
         return (V)debug6;
     }
 
     protected <V> MutableValue<V> getMutable(String debug1, Function<String, V> debug2, Function<V, String> debug3, V debug4) {
         String debug5 = this.getStringRaw(debug1);
-        Object debug6 = MoreObjects.firstNonNull(debug5 != null ? debug2.apply(debug5) : null, debug4);
+        V debug6 = MoreObjects.firstNonNull(debug5 != null ? debug2.apply(debug5) : null, debug4); // MagmaCube - decompile fix
         this.properties.put(debug1, debug3.apply(debug6));
         return new MutableValue(debug1, debug6, debug3);
     }
 
     protected <V> V get(String debug1, Function<String, V> debug22, UnaryOperator<V> debug3, Function<V, String> debug4, V debug5) {
         return (V)this.get(debug1, debug2 -> {
-            Object debug3 = debug22.apply((String)debug2);
-            return debug3 != null ? debug3.apply(debug3) : null;
+            V debug3l = debug22.apply((String)debug2); // MagmaCube - decompile fix
+            return debug3l != null ? debug3.apply(debug3l) : null; // MagmaCube - decompile fix
         }, debug4, debug5);
     }
 
diff --git a/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java b/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
index 4ac2db7f4f7195eec7667b07d70e4b88a41ee972..755a1f4f3d18e41cc4cef052b13b8bfaa089917c 100644
--- a/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
+++ b/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
@@ -122,9 +122,9 @@ extends JComponent {
         debug22.setFont(MONOSPACED);
         JTextField debug4 = new JTextField();
         debug4.addActionListener(debug2 -> {
-            String debug3 = debug4.getText().trim();
-            if (!debug3.isEmpty()) {
-                this.server.handleConsoleInput(debug3, this.server.createCommandSourceStack());
+            String debug3l = debug4.getText().trim(); // MagmaCube - decompile fix
+            if (!debug3l.isEmpty()) { // MagmaCube - decompile fix
+                this.server.handleConsoleInput(debug3l, this.server.createCommandSourceStack()); // MagmaCube - decompile fix
             }
             debug4.setText("");
         });
@@ -138,9 +138,9 @@ extends JComponent {
         debug1.add((Component)debug4, "South");
         debug1.setBorder(new TitledBorder(new EtchedBorder(), "Log and chat"));
         this.logAppenderThread = new Thread(() -> {
-            String debug3;
-            while ((debug3 = QueueLogAppender.getNextLogEvent((String)"ServerGuiConsole")) != null) {
-                this.print(debug22, debug3, debug3);
+            String debug3l; // MagmaCube - decompile fix
+            while ((debug3l = QueueLogAppender.getNextLogEvent((String)"ServerGuiConsole")) != null) { // MagmaCube - decompile fix
+                this.print(debug22, debug3, debug3l); // MagmaCube - decompile fix
             }
         });
         this.logAppenderThread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
diff --git a/src/main/java/net/minecraft/server/level/ChunkHolder.java b/src/main/java/net/minecraft/server/level/ChunkHolder.java
index 826b494245377c14887db61bb1f2c4b98c1f416f..8e276ccb54dc6cc8547661b6b389bf3545d2c2bf 100644
--- a/src/main/java/net/minecraft/server/level/ChunkHolder.java
+++ b/src/main/java/net/minecraft/server/level/ChunkHolder.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.level;
 
+import java.util.concurrent.ExecutionException;
 import java.util.function.IntConsumer;
 import java.util.function.IntSupplier;
 import java.util.stream.Stream;
@@ -225,7 +226,7 @@ public class ChunkHolder
     }
     
     private void broadcast(final Packet<?> debug1, final boolean debug2) {
-        this.playerProvider.getPlayers(this.pos, debug2).forEach(debug1 -> debug1.connection.send(debug1));
+        this.playerProvider.getPlayers(this.pos, debug2).forEach(debug1l -> debug1l.connection.send(debug1)); // MagmaCube - decompile fix
     }
     
     public CompletableFuture<Either<ChunkAccess, ChunkLoadingFailure>> getOrScheduleFuture(final ChunkStatus debug1, final ChunkMap debug2) {
@@ -247,7 +248,15 @@ public class ChunkHolder
     }
     
     private void updateChunkToSave(final CompletableFuture<? extends Either<? extends ChunkAccess, ChunkLoadingFailure>> debug1) {
-        this.chunkToSave = this.chunkToSave.thenCombine((CompletionStage<?>)debug1, (debug0, debug1) -> (ChunkAccess)debug1.map(debug0 -> debug0, debug1 -> debug0));
+        // MagmaCube start - decompile fix
+        this.chunkToSave = this.chunkToSave.thenCombine((CompletionStage<?>)debug1, (debug0, debug1l) -> {
+            try {
+                return debug1.get().map(debug0l -> debug0l, debug1ll -> debug0);
+            } catch (InterruptedException | ExecutionException e) {
+                throw new RuntimeException(e);
+            }
+        });
+        // MagmaCube end - decompile fix
     }
     
     public FullChunkStatus getFullStatus() {
@@ -282,7 +291,7 @@ public class ChunkHolder
         final FullChunkStatus debug6 = getFullChunkStatus(this.oldTicketLevel);
         final FullChunkStatus debug7 = getFullChunkStatus(this.ticketLevel);
         if (debug4) {
-            final Either<ChunkAccess, ChunkLoadingFailure> debug8 = (Either<ChunkAccess, ChunkLoadingFailure>)Either.right((Object)new ChunkLoadingFailure() {
+            final Either<ChunkAccess, ChunkLoadingFailure> debug8 = Either.right(new ChunkLoadingFailure() { // MagmaCube - decompile fix
                 @Override
                 public String toString() {
                     return "Unloaded ticket level " + ChunkHolder.this.pos.toString();
@@ -307,7 +316,7 @@ public class ChunkHolder
         if (debug11 && !debug12) {
             final CompletableFuture<Either<LevelChunk, ChunkLoadingFailure>> debug13 = this.fullChunkFuture;
             this.fullChunkFuture = ChunkHolder.UNLOADED_LEVEL_CHUNK_FUTURE;
-            this.updateChunkToSave(debug13.thenApply(debug1 -> debug1.ifLeft((Consumer)debug1::packTicks)));
+            this.updateChunkToSave(debug13.thenApply(debug1l -> debug1l.ifLeft(debug1::packTicks))); // MagmaCube - decompile fix
         }
         final boolean debug14 = debug6.isOrAfter(FullChunkStatus.TICKING);
         final boolean debug15 = debug7.isOrAfter(FullChunkStatus.TICKING);
@@ -360,18 +369,18 @@ public class ChunkHolder
                 final Optional<ChunkAccess> debug4 = (Optional<ChunkAccess>)debug3.getNow(ChunkHolder.UNLOADED_CHUNK).left();
                 if (debug4.isPresent()) {
                     if (debug4.get() instanceof ProtoChunk) {
-                        this.futures.set(debug2, CompletableFuture.completedFuture(Either.left((Object)debug1)));
+                        this.futures.set(debug2, CompletableFuture.completedFuture(Either.left(debug1))); // MagmaCube - decompile fix
                     }
                 }
             }
         }
-        this.updateChunkToSave((CompletableFuture<? extends Either<? extends ChunkAccess, ChunkLoadingFailure>>)CompletableFuture.completedFuture(Either.left((Object)debug1.getWrapped())));
+        this.updateChunkToSave(CompletableFuture.completedFuture(Either.left(debug1.getWrapped()))); // MagmaCube - decompile fix
     }
     
     static {
-        UNLOADED_CHUNK = Either.right((Object)ChunkLoadingFailure.UNLOADED);
+        UNLOADED_CHUNK = Either.right(ChunkLoadingFailure.UNLOADED); // MagmaCube - decompile fix
         UNLOADED_CHUNK_FUTURE = CompletableFuture.completedFuture(ChunkHolder.UNLOADED_CHUNK);
-        UNLOADED_LEVEL_CHUNK = Either.right((Object)ChunkLoadingFailure.UNLOADED);
+        UNLOADED_LEVEL_CHUNK = Either.right(ChunkLoadingFailure.UNLOADED); // MagmaCube - decompile fix
         UNLOADED_LEVEL_CHUNK_FUTURE = CompletableFuture.completedFuture(ChunkHolder.UNLOADED_LEVEL_CHUNK);
         CHUNK_STATUSES = ChunkStatus.getStatusList();
         FULL_CHUNK_STATUSES = FullChunkStatus.values();
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 190d26187ec02926f857d86e0e3f004176b62540..a7f0f9b819baba6eaa992bbd29c7bfe9cf79a680 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -57,10 +57,7 @@ import java.util.concurrent.CompletionException;
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.function.BooleanSupplier;
-import java.util.function.IntFunction;
-import java.util.function.IntSupplier;
-import java.util.function.Supplier;
+import java.util.function.*;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
@@ -163,7 +160,7 @@ implements ChunkHolder.PlayerProvider {
         ProcessorHandle<Runnable> debug14 = ProcessorHandle.of("main", debug6::tell);
         this.progressListener = debug9;
         ProcessorMailbox<Runnable> debug15 = ProcessorMailbox.create(debug5, "light");
-        this.queueSorter = new ChunkTaskPriorityQueueSorter((List<ProcessorHandle<?>>)ImmutableList.of(debug13, debug14, debug15), debug5, Integer.MAX_VALUE);
+        this.queueSorter = new ChunkTaskPriorityQueueSorter(ImmutableList.of(debug13, debug14, debug15), debug5, Integer.MAX_VALUE); // MagmaCube - decompile fix
         this.worldgenMailbox = this.queueSorter.getProcessor(debug13, false);
         this.mainThreadMailbox = this.queueSorter.getProcessor(debug14, false);
         this.lightEngine = new ThreadedLevelLightEngine(debug7, this, this.level.dimensionType().hasSkyLight(), debug15, this.queueSorter.getProcessor(debug15, false));
@@ -230,22 +227,22 @@ implements ChunkHolder.PlayerProvider {
         if (debug2 == null) {
             return "null";
         }
-        String debug3 = debug2.getTicketLevel() + "Â¥n";
+        String debug3 = debug2.getTicketLevel() + "\n"; // MagmaCube - decompile fix
         ChunkStatus debug4 = debug2.getLastAvailableStatus();
         ChunkAccess debug5 = debug2.getLastAvailable();
         if (debug4 != null) {
-            debug3 = debug3 + "St: Â¥u00a7" + debug4.getIndex() + debug4 + 'Â¥u00a7' + "rÂ¥n";
+            debug3 = debug3 + "St: \u00a7" + debug4.getIndex() + debug4 + '\u00a7' + "r\n"; // MagmaCube - decompile fix
         }
         if (debug5 != null) {
-            debug3 = debug3 + "Ch: Â¥u00a7" + debug5.getStatus().getIndex() + debug5.getStatus() + 'Â¥u00a7' + "rÂ¥n";
+            debug3 = debug3 + "Ch: \u00a7" + debug5.getStatus().getIndex() + debug5.getStatus() + '\u00a7' + "r\n"; // MagmaCube - decompile fix
         }
         ChunkHolder.FullChunkStatus debug6 = debug2.getFullStatus();
-        debug3 = debug3 + "Â¥u00a7" + debug6.ordinal() + (Object)((Object)debug6);
-        return debug3 + 'Â¥u00a7' + "r";
+        debug3 = debug3 + "\u00a7" + debug6.ordinal() + (Object)((Object)debug6); // MagmaCube - decompile fix
+        return debug3 + '\u00a7' + "r"; // MagmaCube - decompile fix
     }
 
     private CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> getChunkRangeFuture(ChunkPos debug1, final int debug2, IntFunction<ChunkStatus> debug3) {
-        ArrayList debug42 = Lists.newArrayList();
+        List<CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> debug42 = Lists.newArrayList(); // MagmaCube - decompile fix
         final int debug5 = debug1.x;
         final int debug6 = debug1.z;
         for (int debug7 = -debug2; debug7 <= debug2; ++debug7) {
@@ -255,7 +252,7 @@ implements ChunkHolder.PlayerProvider {
                 long debug11 = debug10.toLong();
                 ChunkHolder debug13 = this.getUpdatingChunkIfPresent(debug11);
                 if (debug13 == null) {
-                    return CompletableFuture.completedFuture(Either.right((Object)new ChunkHolder.ChunkLoadingFailure(){
+                    return CompletableFuture.completedFuture(Either.right(new ChunkHolder.ChunkLoadingFailure(){ // MagmaCube - decompile fix
 
                         public String toString() {
                             return "Unloaded " + debug10.toString();
@@ -267,26 +264,28 @@ implements ChunkHolder.PlayerProvider {
                 debug42.add(debug15);
             }
         }
-        CompletableFuture debug7 = Util.sequence(debug42);
+        // MagmaCube start - decompile fix
+        CompletableFuture<List<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> debug7 = Util.sequence(debug42);
         return debug7.thenApply(debug4 -> {
-            ArrayList debug5 = Lists.newArrayList();
-            int debug6 = 0;
-            for (final Either debug8 : debug4) {
-                Optional debug9 = debug8.left();
+            List<ChunkAccess> list = Lists.newArrayList();
+            int i = 0;
+            for (final Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> debug8 : debug4) {
+                Optional<ChunkAccess> debug9 = debug8.left();
                 if (!debug9.isPresent()) {
-                    final int debug10 = debug6;
-                    return Either.right((Object)new ChunkHolder.ChunkLoadingFailure(){
+                    final int debug10 = i;
+                    return Either.right(new ChunkHolder.ChunkLoadingFailure(){
 
                         public String toString() {
                             return "Unloaded " + new ChunkPos(debug5 + debug10 % (debug2 * 2 + 1), debug6 + debug10 / (debug2 * 2 + 1)) + " " + ((ChunkHolder.ChunkLoadingFailure)debug8.right().get()).toString();
                         }
                     });
                 }
-                debug5.add(debug9.get());
-                ++debug6;
+                list.add(debug9.get());
+                ++i;
             }
-            return Either.left((Object)debug5);
+            return Either.left(list);
         });
+        // MagmaCube end - decompile fix
     }
 
     public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> getEntityTickingRangeFuture(ChunkPos debug1) {
@@ -315,7 +314,7 @@ implements ChunkHolder.PlayerProvider {
             } else {
                 debug4 = new ChunkHolder(new ChunkPos(debug1), debug3, this.lightEngine, this.queueSorter, this);
             }
-            this.updatingChunkMap.put(debug1, (Object)debug4);
+            this.updatingChunkMap.put(debug1, debug4); // MagmaCube - decompile fix
             this.modified = true;
         }
         return debug4;
@@ -334,17 +333,19 @@ implements ChunkHolder.PlayerProvider {
 
     protected void saveAllChunks(boolean debug12) {
         if (debug12) {
-            List debug2 = this.visibleChunkMap.values().stream().filter(ChunkHolder::wasAccessibleSinceLastSave).peek(ChunkHolder::refreshAccessibility).collect(Collectors.toList());
+            List<ChunkHolder> debug2 = this.visibleChunkMap.values().stream().filter(ChunkHolder::wasAccessibleSinceLastSave).peek(ChunkHolder::refreshAccessibility).collect(Collectors.toList()); // MagmaCube - decompile fix
             MutableBoolean debug3 = new MutableBoolean();
             do {
                 debug3.setFalse();
                 debug2.stream().map(debug1 -> {
-                    CompletableFuture<ChunkAccess> debug2;
+                    // MagmaCube start - decompile fix
+                    CompletableFuture<ChunkAccess> debug22;
                     do {
-                        debug2 = debug1.getChunkToSave();
-                        this.mainThreadExecutor.managedBlock(debug2::isDone);
-                    } while (debug2 != debug1.getChunkToSave());
-                    return debug2.join();
+                        debug22 = debug1.getChunkToSave();
+                        this.mainThreadExecutor.managedBlock(debug22::isDone);
+                    } while (debug22 != debug1.getChunkToSave());
+                    return debug22.join();
+                    // MagmaCube end - decompile fix
                 }).filter(debug0 -> debug0 instanceof ImposterProtoChunk || debug0 instanceof LevelChunk).filter(this::save).forEach(debug1 -> debug3.setTrue());
             } while (debug3.isTrue());
             this.processUnloads(() -> true);
@@ -380,7 +381,7 @@ implements ChunkHolder.PlayerProvider {
             long debug42 = debug2.nextLong();
             ChunkHolder debug6 = (ChunkHolder)this.updatingChunkMap.remove(debug42);
             if (debug6 != null) {
-                this.pendingUnloads.put(debug42, (Object)debug6);
+                this.pendingUnloads.put(debug42, debug6); // MagmaCube - decompile fix
                 this.modified = true;
                 ++debug3;
                 this.scheduleUnload(debug42, debug6);
@@ -445,7 +446,7 @@ implements ChunkHolder.PlayerProvider {
                 this.distanceManager.addTicket(TicketType.LIGHT, debug3, 33 + ChunkStatus.getDistance(ChunkStatus.FEATURES), debug3);
             }
             if ((debug6 = (ChunkAccess)debug5.get()).getStatus().isOrAfter(debug2)) {
-                CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> debug7 = debug2 == ChunkStatus.LIGHT ? this.scheduleChunkGeneration(debug1, debug2) : debug2.load(this.level, this.structureManager, this.lightEngine, debug2 -> this.protoChunkToFullChunk(debug1), debug6);
+                CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> debug7 = debug2 == ChunkStatus.LIGHT ? this.scheduleChunkGeneration(debug1, debug2) : debug2.load(this.level, this.structureManager, this.lightEngine, debug22 -> this.protoChunkToFullChunk(debug1), debug6);
                 this.progressListener.onStatusChange(debug3, debug2);
                 return debug7;
             }
@@ -465,7 +466,7 @@ implements ChunkHolder.PlayerProvider {
                         ProtoChunk debug4 = ChunkSerializer.read(this.level, this.structureManager, this.poiManager, debug1, debug2);
                         debug4.setLastSaveTime(this.level.getGameTime());
                         this.markPosition(debug1, debug4.getStatus().getChunkType());
-                        return Either.left((Object)debug4);
+                        return Either.left(debug4); // MagmaCube - decompile fix
                     }
                     LOGGER.error("Chunk file at {} is missing level data, skipping", (Object)debug1);
                 }
@@ -482,7 +483,7 @@ implements ChunkHolder.PlayerProvider {
                 LOGGER.error("Couldn't load chunk {}", (Object)debug1, (Object)debug2);
             }
             this.markPositionReplaceable(debug1);
-            return Either.left((Object)new ProtoChunk(debug1, UpgradeData.EMPTY));
+            return Either.left(new ProtoChunk(debug1, UpgradeData.EMPTY)); // MagmaCube - decompile fix
         }, this.mainThreadExecutor);
     }
 
@@ -498,17 +499,17 @@ implements ChunkHolder.PlayerProvider {
         ChunkPos debug3 = debug1.getPos();
         CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> debug4 = this.getChunkRangeFuture(debug3, debug22.getRange(), debug2 -> this.getDependencyStatus(debug22, debug2));
         this.level.getProfiler().incrementCounter(() -> "chunkGenerate " + debug22.getName());
-        return debug4.thenComposeAsync(debug42 -> (CompletableFuture)debug42.map(debug4 -> {
+        return debug4.thenComposeAsync(debug42 -> (CompletableFuture)debug42.map(debug412 -> { // MagmaCube - decompile fix
             try {
-                CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> debug5 = debug22.generate(this.level, this.generator, this.structureManager, this.lightEngine, debug2 -> this.protoChunkToFullChunk(debug1), (List<ChunkAccess>)debug4);
+                CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> debug5 = debug22.generate(this.level, this.generator, this.structureManager, this.lightEngine, debug2 -> this.protoChunkToFullChunk(debug1), (List<ChunkAccess>)debug412); // MagmaCube - decompile fix
                 this.progressListener.onStatusChange(debug3, debug22);
                 return debug5;
             }
             catch (Exception debug5) {
                 CrashReport debug6 = CrashReport.forThrowable(debug5, "Exception generating new chunk");
                 CrashReportCategory debug7 = debug6.addCategory("Chunk to be generated");
-                debug7.setDetail("Location", String.format("%d,%d", debug1.x, debug1.z));
-                debug7.setDetail("Position hash", ChunkPos.asLong(debug1.x, debug1.z));
+                debug7.setDetail("Location", String.format("%d,%d", debug3.x, debug3.z)); // MagmaCube - decompile fix
+                debug7.setDetail("Position hash", ChunkPos.asLong(debug3.x, debug3.z)); // MagmaCube - decompile fix
                 debug7.setDetail("Generator", this.generator);
                 throw new ReportedException(debug6);
             }
@@ -536,7 +537,7 @@ implements ChunkHolder.PlayerProvider {
             }
             return debug22.mapLeft(debug2 -> {
                 LevelChunk debug4;
-                ChunkPos debug3 = debug1.getPos();
+                ChunkPos pos = debug1.getPos(); // MagmaCube - decompile fix
                 if (debug2 instanceof ImposterProtoChunk) {
                     debug4 = ((ImposterProtoChunk)debug2).getWrapped();
                 } else {
@@ -545,15 +546,15 @@ implements ChunkHolder.PlayerProvider {
                 }
                 debug4.setFullStatus(() -> ChunkHolder.getFullChunkStatus(debug1.getTicketLevel()));
                 debug4.runPostLoad();
-                if (this.entitiesInLevel.add(debug3.toLong())) {
+                if (this.entitiesInLevel.add(pos.toLong())) { // MagmaCube - decompile fix
                     debug4.setLoaded(true);
                     this.level.addAllPendingBlockEntities(debug4.getBlockEntities().values());
-                    Iterable debug5 = null;
+                    List<Entity> debug5 = null; // MagmaCube - decompile fix
                     for (ClassInstanceMultiMap<Entity> debug9 : debug4.getEntitySections()) {
                         for (Entity debug11 : debug9) {
                             if (debug11 instanceof Player || this.level.loadFromChunk(debug11)) continue;
                             if (debug5 == null) {
-                                debug5 = Lists.newArrayList((Object[])new Entity[]{debug11});
+                                debug5 = Lists.newArrayList(new Entity[]{debug11}); // MagmaCube - decompile fix
                                 continue;
                             }
                             debug5.add(debug11);
@@ -571,25 +572,29 @@ implements ChunkHolder.PlayerProvider {
     public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> postProcess(ChunkHolder debug1) {
         ChunkPos debug23 = debug1.getPos();
         CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> debug3 = this.getChunkRangeFuture(debug23, 1, debug0 -> ChunkStatus.FULL);
-        CompletionStage debug4 = debug3.thenApplyAsync(debug02 -> debug02.flatMap(debug0 -> {
-            LevelChunk debug1 = (LevelChunk)debug0.get(debug0.size() / 2);
-            debug1.postProcessGeneration();
-            return Either.left((Object)debug1);
+        // MagmaCube start - decompile fix
+        CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> debug4 = debug3.thenApplyAsync(debug02 -> debug02.flatMap(debug0 -> {
+            LevelChunk chunk = (LevelChunk)debug0.get(debug0.size() / 2);
+            chunk.postProcessGeneration();
+            return Either.left(chunk);
         }), debug2 -> this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(debug1, debug2)));
-        ((CompletableFuture)debug4).thenAcceptAsync(debug22 -> debug22.mapLeft(debug2 -> {
+        debug4.thenAcceptAsync(debug22 -> debug22.mapLeft(debug2 -> {
             this.tickingGenerated.getAndIncrement();
             Packet[] debug32 = new Packet[2];
-            this.getPlayers(debug23, false).forEach(debug3 -> this.playerLoadedChunk((ServerPlayer)debug3, debug32, (LevelChunk)debug2));
-            return Either.left((Object)debug2);
+            this.getPlayers(debug23, false).forEach(p -> this.playerLoadedChunk((ServerPlayer)p, debug32, (LevelChunk)debug2));
+            return Either.left(debug2);
         }), debug2 -> this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(debug1, debug2)));
         return debug4;
+        // MagmaCube end - decompile fix
     }
 
     public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> unpackTicks(ChunkHolder debug1) {
         return debug1.getOrScheduleFuture(ChunkStatus.FULL, this).thenApplyAsync(debug02 -> debug02.mapLeft(debug0 -> {
-            LevelChunk debug1 = (LevelChunk)debug0;
-            debug1.unpackTicks();
-            return debug1;
+            // MagmaCube start - decompile fix
+            LevelChunk chunk = (LevelChunk)debug0;
+            chunk.unpackTicks();
+            return chunk;
+            // MagmaCube end - decompile fix
         }), debug2 -> this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(debug1, debug2)));
     }
 
@@ -659,10 +664,12 @@ implements ChunkHolder.PlayerProvider {
                 ChunkPos debug6 = debug5.getPos();
                 Packet[] debug7 = new Packet[2];
                 this.getPlayers(debug6, false).forEach(debug4 -> {
-                    int debug5 = ChunkMap.checkerboardDistance(debug6, debug4, true);
-                    boolean debug6 = debug5 <= debug3;
-                    boolean debug7 = debug5 <= this.viewDistance;
-                    this.updateChunkTracking((ServerPlayer)debug4, debug6, debug7, debug6, debug7);
+                    // MagmaCube start - decompile fix
+                    int i = ChunkMap.checkerboardDistance(debug6, debug4, true);
+                    boolean b1 = i <= debug3;
+                    boolean b2 = i <= this.viewDistance;
+                    this.updateChunkTracking((ServerPlayer)debug4, debug6, debug7, b1, b2);
+                    // MagmaCube end - decompile fix
                 });
             }
         }
@@ -703,7 +710,7 @@ implements ChunkHolder.PlayerProvider {
             ChunkPos debug5 = new ChunkPos(debug4.getLongKey());
             ChunkHolder debug6 = (ChunkHolder)debug4.getValue();
             Optional<ChunkAccess> debug7 = Optional.ofNullable(debug6.getLastAvailable());
-            Optional<Object> debug8 = debug7.flatMap(debug0 -> debug0 instanceof LevelChunk ? Optional.of((LevelChunk)debug0) : Optional.empty());
+            Optional<LevelChunk> debug8 = debug7.flatMap(debug0 -> debug0 instanceof LevelChunk ? Optional.of((LevelChunk)debug0) : Optional.empty()); // MagmaCube - decompile fix
             debug2.writeRow(debug5.x, debug5.z, debug6.getTicketLevel(), debug7.isPresent(), debug7.map(ChunkAccess::getStatus).orElse(null), debug8.map(LevelChunk::getFullStatus).orElse(null), ChunkMap.printFuture(debug6.getFullChunkFuture()), ChunkMap.printFuture(debug6.getTickingChunkFuture()), ChunkMap.printFuture(debug6.getEntityTickingChunkFuture()), this.distanceManager.getTicketDebugString(debug4.getLongKey()), !this.noPlayersCloseForSpawning(debug5), debug8.map(debug0 -> Stream.of(debug0.getEntitySections()).mapToInt(ClassInstanceMultiMap::size).sum()).orElse(0), debug8.map(debug0 -> debug0.getBlockEntities().size()).orElse(0));
         }
     }
@@ -876,7 +883,7 @@ implements ChunkHolder.PlayerProvider {
             throw Util.pauseInIde(new IllegalStateException("Entity is already tracked!"));
         }
         TrackedEntity debug5 = new TrackedEntity(debug1, debug3, debug4, debug2.trackDeltas());
-        this.entityMap.put(debug1.getId(), (Object)debug5);
+        this.entityMap.put(debug1.getId(), debug5); // MagmaCube - decompile fix
         debug5.updatePlayers(this.level.players());
         if (debug1 instanceof ServerPlayer) {
             ServerPlayer debug6 = (ServerPlayer)debug1;
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
index 66457c5cfe76e64f2bb0e3c092503786ffcf5b3a..a8d5129f3c2bac3aecc3812dc1501715b8cebebd 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
@@ -31,7 +31,7 @@ import net.minecraft.world.level.ChunkPos;
 
 public class ChunkTaskPriorityQueue<T> {
     public static final int PRIORITY_LEVEL_COUNT = ChunkMap.MAX_CHUNK_DISTANCE + 2;
-    private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue = IntStream.range(0, PRIORITY_LEVEL_COUNT).mapToObj(debug0 -> new Long2ObjectLinkedOpenHashMap()).collect(Collectors.toList());
+    private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue = IntStream.range(0, PRIORITY_LEVEL_COUNT).mapToObj(debug0 -> new Long2ObjectLinkedOpenHashMap<List<Optional<T>>>()).collect(Collectors.toList()); // MagmaCube - decompile fix
     private volatile int firstQueue = PRIORITY_LEVEL_COUNT;
     private final String name;
     private final LongSet acquired = new LongOpenHashSet();
@@ -66,7 +66,7 @@ public class ChunkTaskPriorityQueue<T> {
 
     protected void release(long debug1, boolean debug3) {
         for (Long2ObjectLinkedOpenHashMap<List<Optional<T>>> debug5 : this.taskQueue) {
-            List debug6 = (List)debug5.get(debug1);
+            List<Optional<T>> debug6 = (List)debug5.get(debug1); // MagmaCube - decompile fix
             if (debug6 == null) continue;
             if (debug3) {
                 debug6.clear();
@@ -95,11 +95,11 @@ public class ChunkTaskPriorityQueue<T> {
             int debug1 = this.firstQueue;
             Long2ObjectLinkedOpenHashMap<List<Optional<T>>> debug2 = this.taskQueue.get(debug1);
             long debug32 = debug2.firstLongKey();
-            List debug5 = (List)debug2.removeFirst();
+            List<Optional<T>> debug5 = debug2.removeFirst(); // MagmaCube - decompile fix
             while (this.firstQueue < PRIORITY_LEVEL_COUNT && this.taskQueue.get(this.firstQueue).isEmpty()) {
                 ++this.firstQueue;
             }
-            return debug5.stream().map(debug3 -> debug3.map(Either::left).orElseGet(() -> Either.right((Object)this.acquire(debug32))));
+            return (Stream<Either<T, Runnable>>) (Object) debug5.stream().map(debug3 -> debug3.map(Either::left).orElseGet(() -> Either.right(this.acquire(debug32)))); // MagmaCube - decompile fix
         }
         return null;
     }
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
index b690c0895cb1217f9578a276ede8a8a281e4a1a9..38fbcff414d84e0c928b0445a2e8dbe1b10d1f3f 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
@@ -67,19 +67,19 @@ ChunkHolder.LevelChangeListener {
     public <T> ProcessorHandle<Message<T>> getProcessor(ProcessorHandle<T> debug1, boolean debug2) {
         return (ProcessorHandle)this.mailbox.ask(debug3 -> new StrictQueue.IntRunnable(0, () -> {
             this.getQueue(debug1);
-            debug3.tell(ProcessorHandle.of("chunk priority sorter around " + debug1.name(), debug3 -> this.submit(debug1, ((Message)debug3).task, ((Message)debug3).pos, ((Message)debug3).level, debug2)));
+            debug3.tell(ProcessorHandle.of("chunk priority sorter around " + debug1.name(), debug3l -> this.submit(debug1, ((Message)debug3l).task, ((Message)debug3l).pos, ((Message)debug3l).level, debug2))); // MagmaCube - decompile fix
         })).join();
     }
 
     public ProcessorHandle<Release> getReleaseProcessor(ProcessorHandle<Runnable> debug1) {
-        return (ProcessorHandle)this.mailbox.ask(debug2 -> new StrictQueue.IntRunnable(0, () -> debug2.tell(ProcessorHandle.of("chunk priority sorter around " + debug1.name(), debug2 -> this.release(debug1, ((Release)debug2).pos, ((Release)debug2).task, ((Release)debug2).clearQueue))))).join();
+        return (ProcessorHandle)this.mailbox.ask(debug2 -> new StrictQueue.IntRunnable(0, () -> debug2.tell(ProcessorHandle.of("chunk priority sorter around " + debug1.name(), debug2l -> this.release(debug1, ((Release)debug2l).pos, ((Release)debug2l).task, ((Release)debug2l).clearQueue))))).join(); // MagmaCube - decompile fix
     }
 
     @Override
     public void onLevelChange(ChunkPos debug1, IntSupplier debug2, int debug3, IntConsumer debug4) {
         this.mailbox.tell(new StrictQueue.IntRunnable(0, () -> {
             int debug5 = debug2.getAsInt();
-            this.queues.values().forEach(debug3 -> debug3.resortChunkTasks(debug5, debug1, debug3));
+            this.queues.values().forEach(debug3l -> debug3l.resortChunkTasks(debug5, debug1, debug3)); // MagmaCube - decompile fix
             debug4.accept(debug3);
         }));
     }
@@ -111,11 +111,11 @@ ChunkHolder.LevelChangeListener {
 
     private <T> void pollTask(ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>> debug1, ProcessorHandle<T> debug2) {
         this.mailbox.tell(new StrictQueue.IntRunnable(3, () -> {
-            Stream<Either<Either, Runnable>> debug32 = debug1.pop();
+            Stream<Either<Function<ProcessorHandle<Unit>, T>, Runnable>> debug32 = debug1.pop(); // MagmaCube - decompile fix
             if (debug32 == null) {
                 this.sleeping.add(debug2);
             } else {
-                Util.sequence(debug32.map(debug1 -> (CompletableFuture)debug1.map(debug2::ask, debug0 -> {
+                Util.sequence(debug32.map(debug1l -> debug1l.map(debug2::ask, debug0 -> { // MagmaCube - decompile fix
                     debug0.run();
                     return CompletableFuture.completedFuture(Unit.INSTANCE);
                 })).collect(Collectors.toList())).thenAccept(debug3 -> this.pollTask(debug1, debug2));
@@ -124,7 +124,7 @@ ChunkHolder.LevelChangeListener {
     }
 
     private <T> ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>> getQueue(ProcessorHandle<T> debug1) {
-        ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>> debug2 = this.queues.get(debug1);
+        ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>> debug2 = (ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>>) (Object) this.queues.get(debug1); // MagmaCube - decompile fix
         if (debug2 == null) {
             throw Util.pauseInIde(new IllegalArgumentException("No queue for: " + debug1));
         }
diff --git a/src/main/java/net/minecraft/server/level/DistanceManager.java b/src/main/java/net/minecraft/server/level/DistanceManager.java
index 09d6aac6ad098af56fa5aeff93c5db55a09dfe82..30b79a53863db45cf85019098487af2062c487cd 100644
--- a/src/main/java/net/minecraft/server/level/DistanceManager.java
+++ b/src/main/java/net/minecraft/server/level/DistanceManager.java
@@ -53,10 +53,10 @@ public abstract class DistanceManager
         this.ticketTracker = new ChunkTicketTracker();
         this.naturalSpawnChunkCounter = new FixedPlayerDistanceChunkTracker(8);
         this.playerTicketManager = new PlayerTicketTracker(33);
-        this.chunksToUpdateFutures = (Set<ChunkHolder>)Sets.newHashSet();
+        this.chunksToUpdateFutures = Sets.newHashSet(); // MagmaCube - decompile fix
         this.ticketsToRelease = (LongSet)new LongOpenHashSet();
         final ProcessorHandle<Runnable> debug3 = ProcessorHandle.of("player ticket throttler", debug2::execute);
-        final ChunkTaskPriorityQueueSorter debug4 = new ChunkTaskPriorityQueueSorter((List<ProcessorHandle<?>>)ImmutableList.of((Object)debug3), debug1, 4);
+        final ChunkTaskPriorityQueueSorter debug4 = new ChunkTaskPriorityQueueSorter(ImmutableList.of(debug3), debug1, 4); // MagmaCube - decompile fix
         this.ticketThrottler = debug4;
         this.ticketThrottlerInput = debug4.getProcessor(debug3, true);
         this.ticketThrottlerReleaser = debug4.getReleaseProcessor(debug3);
@@ -68,7 +68,7 @@ public abstract class DistanceManager
         final ObjectIterator<Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>>> debug2 = (ObjectIterator<Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>>>)this.tickets.long2ObjectEntrySet().fastIterator();
         while (debug2.hasNext()) {
             final Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>> debug3 = (Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>>)debug2.next();
-            if (((SortedArraySet)debug3.getValue()).removeIf(debug1 -> debug1.timedOut(this.ticketTickCounter))) {
+            if ((debug3.getValue()).removeIf(debug1 -> debug1.timedOut(this.ticketTickCounter))) { // MagmaCube - decompile fix
                 this.ticketTracker.update(debug3.getLongKey(), getTicketLevelAt((SortedArraySet<Ticket<?>>)debug3.getValue()), false);
             }
             if (((SortedArraySet)debug3.getValue()).isEmpty()) {
@@ -96,7 +96,7 @@ public abstract class DistanceManager
         final boolean debug3 = debug2 != 0;
         if (debug3) {}
         if (!this.chunksToUpdateFutures.isEmpty()) {
-            this.chunksToUpdateFutures.forEach(debug1 -> debug1.updateFutures(debug1));
+            this.chunksToUpdateFutures.forEach(debug1l -> debug1l.updateFutures(debug1)); // MagmaCube - decompile fix
             this.chunksToUpdateFutures.clear();
             return true;
         }
@@ -110,7 +110,7 @@ public abstract class DistanceManager
                         throw new IllegalStateException();
                     }
                     final CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> debug7 = debug6.getEntityTickingChunkFuture();
-                    debug7.thenAccept(debug3 -> this.mainThreadExecutor.execute(() -> this.ticketThrottlerReleaser.tell(ChunkTaskPriorityQueueSorter.release(() -> {}, debug5, false))));
+                    debug7.thenAccept(debug3l -> this.mainThreadExecutor.execute(() -> this.ticketThrottlerReleaser.tell(ChunkTaskPriorityQueueSorter.release(() -> {}, debug5, false)))); // MagmaCube - decompile fix
                 }
             }
             this.ticketsToRelease.clear();
@@ -138,7 +138,7 @@ public abstract class DistanceManager
     }
     
     public <T> void addTicket(final TicketType<T> debug1, final ChunkPos debug2, final int debug3, final T debug4) {
-        this.addTicket(debug2.toLong(), new Ticket<Object>(debug1, debug3, debug4));
+        this.addTicket(debug2.toLong(), new Ticket<>(debug1, debug3, debug4)); // MagmaCube - decompile fix
     }
     
     public <T> void removeTicket(final TicketType<T> debug1, final ChunkPos debug2, final int debug3, final T debug4) {
@@ -147,7 +147,7 @@ public abstract class DistanceManager
     }
     
     public <T> void addRegionTicket(final TicketType<T> debug1, final ChunkPos debug2, final int debug3, final T debug4) {
-        this.addTicket(debug2.toLong(), new Ticket<Object>(debug1, 33 - debug3, debug4));
+        this.addTicket(debug2.toLong(), new Ticket<>(debug1, 33 - debug3, debug4)); // MagmaCube - decompile fix
     }
     
     public <T> void removeRegionTicket(final TicketType<T> debug1, final ChunkPos debug2, final int debug3, final T debug4) {
@@ -299,12 +299,11 @@ public abstract class DistanceManager
         
         private void onLevelChange(final long debug1, final int debug3, final boolean debug4, final boolean debug5) {
             if (debug4 != debug5) {
-                final Ticket<?> debug6 = new Ticket<Object>(TicketType.PLAYER, DistanceManager.PLAYER_TICKET_LEVEL, new ChunkPos(debug1));
+                final Ticket<?> debug6 = new Ticket<>(TicketType.PLAYER, DistanceManager.PLAYER_TICKET_LEVEL, new ChunkPos(debug1)); // MagmaCube - decompile fix
                 if (debug5) {
-                    final Ticket debug7;
                     DistanceManager.this.ticketThrottlerInput.tell(ChunkTaskPriorityQueueSorter.message(() -> DistanceManager.this.mainThreadExecutor.execute(() -> {
                         if (this.haveTicketFor(this.getLevel(debug1))) {
-                            DistanceManager.this.addTicket(debug1, debug7);
+                            DistanceManager.this.addTicket(debug1, debug6); // MagmaCube - decompile fix
                             DistanceManager.this.ticketsToRelease.add(debug1);
                         }
                         else {
@@ -328,13 +327,12 @@ public abstract class DistanceManager
                     final int debug6 = this.queueLevels.get(debug5);
                     final int debug7 = this.getLevel(debug5);
                     if (debug6 != debug7) {
-                        final long n;
                         DistanceManager.this.ticketThrottler.onLevelChange(new ChunkPos(debug5), () -> this.queueLevels.get(debug5), debug7, debug3 -> {
                             if (debug3 >= this.queueLevels.defaultReturnValue()) {
-                                this.queueLevels.remove(n);
+                                this.queueLevels.remove(debug5); // MagmaCube - decompile fix
                             }
                             else {
-                                this.queueLevels.put(n, debug3);
+                                this.queueLevels.put(debug5, debug3); // MagmaCube - decompile fix
                             }
                             return;
                         });
diff --git a/src/main/java/net/minecraft/server/level/PlayerMap.java b/src/main/java/net/minecraft/server/level/PlayerMap.java
index 3a12e58bcfb1432ac5c5d8c378c220e3ef954922..e46cdf66c32c6ed0bb5e21451a512b4c528cd54d 100644
--- a/src/main/java/net/minecraft/server/level/PlayerMap.java
+++ b/src/main/java/net/minecraft/server/level/PlayerMap.java
@@ -17,19 +17,19 @@ public final class PlayerMap
     }
     
     public void addPlayer(final long debug1, final ServerPlayer debug3, final boolean debug4) {
-        this.players.put((Object)debug3, debug4);
+        this.players.put(debug3, debug4); // MagmaCube - decompile fix
     }
     
     public void removePlayer(final long debug1, final ServerPlayer debug3) {
-        this.players.removeBoolean((Object)debug3);
+        this.players.removeBoolean(debug3); // MagmaCube - decompile fix
     }
     
     public void ignorePlayer(final ServerPlayer debug1) {
-        this.players.replace((Object)debug1, true);
+        this.players.replace(debug1, true); // MagmaCube - decompile fix
     }
     
     public void unIgnorePlayer(final ServerPlayer debug1) {
-        this.players.replace((Object)debug1, false);
+        this.players.replace(debug1, false); // MagmaCube - decompile fix
     }
     
     public boolean ignoredOrUnknown(final ServerPlayer debug1) {
diff --git a/src/main/java/net/minecraft/server/level/ServerBossEvent.java b/src/main/java/net/minecraft/server/level/ServerBossEvent.java
index 339195a2ff03c9239820f67f9e24c401b808b746..c4955f17bd6e2ed15bfba90012b2c419cf24bf3f 100644
--- a/src/main/java/net/minecraft/server/level/ServerBossEvent.java
+++ b/src/main/java/net/minecraft/server/level/ServerBossEvent.java
@@ -21,7 +21,7 @@ public class ServerBossEvent extends BossEvent
     
     public ServerBossEvent(final Component debug1, final BossBarColor debug2, final BossBarOverlay debug3) {
         super(Mth.createInsecureUUID(), debug1, debug2, debug3);
-        this.players = (Set<ServerPlayer>)Sets.newHashSet();
+        this.players = Sets.newHashSet(); // MagmaCube - decompile fix
         this.unmodifiablePlayers = Collections.unmodifiableSet((Set<? extends ServerPlayer>)this.players);
         this.visible = true;
     }
@@ -108,7 +108,7 @@ public class ServerBossEvent extends BossEvent
     
     public void removeAllPlayers() {
         if (!this.players.isEmpty()) {
-            for (final ServerPlayer debug2 : Lists.newArrayList((Iterable)this.players)) {
+            for (final ServerPlayer debug2 : Lists.newArrayList(this.players)) { // MagmaCube - decompile fix
                 this.removePlayer(debug2);
             }
         }
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 5f7b0d18014e2a4629fdc4f87452df15a6de7280..be7d9672e04d186de8ec3dacf85cdb452f21b410 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -131,10 +131,9 @@ public class ServerChunkCache extends ChunkSource
         debug5.incrementCounter("getChunkCacheMiss");
         final CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> debug9 = this.getChunkFutureMainThread(debug1, debug2, debug3, debug4);
         this.mainThreadProcessor.managedBlock(debug9::isDone);
-        final IllegalStateException debug10;
-        final ChunkAccess debug8 = (ChunkAccess)debug9.join().map(debug0 -> debug0, debug1 -> {
+        final ChunkAccess debug8 = (ChunkAccess)debug9.join().map(debug0 -> debug0, debug12 -> { // MagmaCube - decompile fix
             if (debug4) {
-                new IllegalStateException("Chunk not there when requested: " + debug1);
+                IllegalStateException debug10 = new IllegalStateException("Chunk not there when requested: " + debug12); // MagmaCube - decompile fix
                 throw Util.pauseInIde(debug10);
             }
             else {
@@ -322,13 +321,14 @@ public class ServerChunkCache extends ChunkSource
     }
     
     private void tickChunks() {
+        // MagmaCube start - decompile fix
         final long debug8 = this.level.getGameTime();
         final long debug9 = debug8 - this.lastInhabitedUpdate;
         this.lastInhabitedUpdate = debug8;
         final LevelData debug10 = this.level.getLevelData();
-        final boolean debug11 = this.level.isDebug();
+        final boolean isDebug = this.level.isDebug();
         final boolean debug12 = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING);
-        if (!debug11) {
+        if (!isDebug) {
             this.level.getProfiler().push("pollingChunks");
             final int debug13 = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
             final boolean debug14 = debug10.getGameTime() % 400L == 0L;
@@ -339,17 +339,8 @@ public class ServerChunkCache extends ChunkSource
             this.level.getProfiler().pop();
             final List<ChunkHolder> debug17 = (List<ChunkHolder>)Lists.newArrayList((Iterable)this.chunkMap.getChunks());
             Collections.shuffle(debug17);
-            final Optional<LevelChunk> debug18;
-            final Optional<LevelChunk> debug19;
-            final LevelChunk debug20;
-            final ChunkPos debug21;
-            final long n;
-            final boolean b;
-            final NaturalSpawner.SpawnState debug22;
-            final boolean debug23;
-            final int debug24;
             debug17.forEach(debug7 -> {
-                debug18 = (Optional<LevelChunk>)debug7.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left();
+                Optional<LevelChunk> debug18 = debug7.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left();
                 if (!debug18.isPresent()) {
                     return;
                 }
@@ -357,25 +348,21 @@ public class ServerChunkCache extends ChunkSource
                     this.level.getProfiler().push("broadcast");
                     debug7.broadcastChanges(debug18.get());
                     this.level.getProfiler().pop();
-                    debug19 = (Optional<LevelChunk>)debug7.getEntityTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left();
+                    Optional<LevelChunk> debug19 = debug7.getEntityTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left();
                     if (!debug19.isPresent()) {
                         return;
                     }
-                    else {
-                        debug20 = debug19.get();
-                        debug21 = debug7.getPos();
-                        if (this.chunkMap.noPlayersCloseForSpawning(debug21)) {
-                            return;
-                        }
-                        else {
-                            debug20.setInhabitedTime(debug20.getInhabitedTime() + n);
-                            if (b && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(debug20.getPos())) {
-                                NaturalSpawner.spawnForChunk(this.level, debug20, debug22, this.spawnFriendlies, this.spawnEnemies, debug23);
-                            }
-                            this.level.tickChunk(debug20, debug24);
-                            return;
-                        }
+                    LevelChunk debug20 = debug19.get();
+                    ChunkPos debug21 = debug7.getPos();
+                    if (this.chunkMap.noPlayersCloseForSpawning(debug21)) {
+                        return;
+                    }
+                    debug20.setInhabitedTime(debug20.getInhabitedTime() + debug8);
+                    if (debug12 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(debug20.getPos())) {
+                        NaturalSpawner.spawnForChunk(this.level, debug20, debug16, this.spawnFriendlies, this.spawnEnemies, isDebug);
                     }
+                    this.level.tickChunk(debug20, debug13);
+                    return;
                 }
             });
             this.level.getProfiler().push("customSpawners");
@@ -385,6 +372,7 @@ public class ServerChunkCache extends ChunkSource
             this.level.getProfiler().pop();
             this.level.getProfiler().pop();
         }
+        // MagmaCube end - decompile fix
         this.chunkMap.tick();
     }
     
@@ -424,9 +412,8 @@ public class ServerChunkCache extends ChunkSource
     
     @Override
     public void onLightUpdate(final LightLayer debug1, final SectionPos debug2) {
-        final ChunkHolder debug3;
         this.mainThreadProcessor.execute(() -> {
-            debug3 = this.getVisibleChunkIfPresent(debug2.chunk().toLong());
+            ChunkHolder debug3 = this.getVisibleChunkIfPresent(debug2.chunk().toLong()); // MagmaCube - decompile fix
             if (debug3 != null) {
                 debug3.sectionLightChanged(debug1, debug2.y());
             }
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index fa05be23caa90b063c1759acadf56cb130f2c38c..2a3e1af27f38223bb69b406e23f1cb0a795848d6 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -210,11 +210,11 @@ public class ServerEntity
             debug1.accept(new ClientboundSetEntityMotionPacket(this.entity.getId(), this.ap));
         }
         if (this.entity instanceof LivingEntity) {
-            final List<Pair<EquipmentSlot, ItemStack>> debug5 = (List<Pair<EquipmentSlot, ItemStack>>)Lists.newArrayList();
+            final List<Pair<EquipmentSlot, ItemStack>> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
             for (final EquipmentSlot debug6 : EquipmentSlot.values()) {
                 final ItemStack debug7 = ((LivingEntity)this.entity).getItemBySlot(debug6);
                 if (!debug7.isEmpty()) {
-                    debug5.add((Pair<EquipmentSlot, ItemStack>)Pair.of((Object)debug6, (Object)debug7.copy()));
+                    debug5.add((Pair<EquipmentSlot, ItemStack>)Pair.of(debug6, debug7.copy())); // MagmaCube - decompile fix
                 }
             }
             if (!debug5.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 98f491d946654aad269be028755350784f492269..60c1d22d0577baf668d62df5517f07b93d176ab1 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -32,8 +32,11 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.longs.LongSets;
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
+
+import java.io.BufferedWriter;
 import java.io.IOException;
 import java.io.Writer;
 import java.nio.file.Files;
@@ -811,10 +814,10 @@ implements WorldGenLevel {
         if (this.tickingEntities) {
             this.toAddAfterTick.add(debug1);
         } else {
-            this.entitiesById.put(debug1.getId(), (Object)debug1);
+            this.entitiesById.put(debug1.getId(), debug1); // MagmaCube - decompile fix
             if (debug1 instanceof EnderDragon) {
                 for (EnderDragonPart debug5 : ((EnderDragon)debug1).getSubEntities()) {
-                    this.entitiesById.put(debug5.getId(), (Object)debug5);
+                    this.entitiesById.put(debug5.getId(), debug5); // MagmaCube - decompile fix
                 }
             }
             this.entitiesByUuid.put(debug1.getUUID(), debug1);
@@ -919,7 +922,7 @@ implements WorldGenLevel {
 
     @Override
     public void blockEvent(BlockPos debug1, Block debug2, int debug3, int debug4) {
-        this.blockEvents.add((Object)new BlockEventData(debug1, debug2, debug3, debug4));
+        this.blockEvents.add(new BlockEventData(debug1, debug2, debug3, debug4)); // MagmaCube - decompile fix
     }
 
     private void runBlockEvents() {
@@ -1163,12 +1166,12 @@ implements WorldGenLevel {
         Object debug72;
         Object debug5;
         ChunkMap debug2 = this.getChunkSource().chunkMap;
-        try (Object debug3 = Files.newBufferedWriter(debug1.resolve("stats.txt"), new OpenOption[0]);){
+        try (BufferedWriter debug3 = Files.newBufferedWriter(debug1.resolve("stats.txt"), new OpenOption[0]);){ // MagmaCube - decompile fix
             ((Writer)debug3).write(String.format("spawning_chunks: %dÂ¥n", debug2.getDistanceManager().getNaturalSpawnChunkCount()));
             debug5 = this.getChunkSource().getLastSpawnState();
             if (debug5 != null) {
-                for (Object debug72 : ((NaturalSpawner.SpawnState)debug5).getMobCategoryCounts().object2IntEntrySet()) {
-                    ((Writer)debug3).write(String.format("spawn_count.%s: %dÂ¥n", ((MobCategory)debug72.getKey()).getName(), debug72.getIntValue()));
+                for (Object2IntMap.Entry<MobCategory> debug722 : ((NaturalSpawner.SpawnState)debug5).getMobCategoryCounts().object2IntEntrySet()) { // MagmaCube - decompile fix
+                    ((Writer)debug3).write(String.format("spawn_count.%s: %dÂ¥n", ((MobCategory)debug722.getKey()).getName(), debug722.getIntValue()));
                 }
             }
             ((Writer)debug3).write(String.format("entities: %dÂ¥n", this.entitiesById.size()));
@@ -1178,7 +1181,7 @@ implements WorldGenLevel {
             ((Writer)debug3).write("distance_manager: " + debug2.getDistanceManager().getDebugStatus() + "Â¥n");
             ((Writer)debug3).write(String.format("pending_tasks: %dÂ¥n", this.getChunkSource().getPendingTasksCount()));
         }
-        debug3 = new CrashReport("Level dump", new Exception("dummy"));
+        CrashReport debug3 = new CrashReport("Level dump", new Exception("dummy")); // MagmaCube - decompile fix
         this.fillReportDetails((CrashReport)debug3);
         Object debug4 = Files.newBufferedWriter(debug1.resolve("example_crash.txt"), new OpenOption[0]);
         debug5 = null;
@@ -1209,9 +1212,11 @@ implements WorldGenLevel {
         try {
             debug2.dumpChunks((Writer)debug5);
         }
-        catch (Throwable debug72) {
-            object = debug72;
-            throw debug72;
+        // MagmaCube start - decompile fix
+        catch (Throwable debug722) {
+            object = debug722;
+            throw debug722;
+            // MagmaCube end - decompile fix
         }
         finally {
             if (debug5 != null) {
@@ -1219,8 +1224,8 @@ implements WorldGenLevel {
                     try {
                         ((Writer)debug5).close();
                     }
-                    catch (Throwable debug72) {
-                        ((Throwable)object).addSuppressed(debug72);
+                    catch (Throwable debug722) { // MagmaCube - decompile fix
+                        ((Throwable)object).addSuppressed(debug722); // MagmaCube - decompile fix
                     }
                 } else {
                     ((Writer)debug5).close();
@@ -1351,23 +1356,5 @@ implements WorldGenLevel {
         BlockPos.betweenClosed(debug2 - 2, debug3 + 1, debug4 - 2, debug2 + 2, debug3 + 3, debug4 + 2).forEach(debug1 -> debug0.setBlockAndUpdate((BlockPos)debug1, Blocks.AIR.defaultBlockState()));
         BlockPos.betweenClosed(debug2 - 2, debug3, debug4 - 2, debug2 + 2, debug3, debug4 + 2).forEach(debug1 -> debug0.setBlockAndUpdate((BlockPos)debug1, Blocks.OBSIDIAN.defaultBlockState()));
     }
-
-    @Override
-    public /* synthetic */ Scoreboard getScoreboard() {
-        return this.getScoreboard();
-    }
-
-    @Override
-    public /* synthetic */ ChunkSource getChunkSource() {
-        return this.getChunkSource();
-    }
-
-    public /* synthetic */ TickList getLiquidTicks() {
-        return this.getLiquidTicks();
-    }
-
-    public /* synthetic */ TickList getBlockTicks() {
-        return this.getBlockTicks();
-    }
 }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 32b9ced2c70948554c2f6190d4802da79b2d0019..59038309ccab085cf6bfd4cda7ed27c3a808c248 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -274,7 +274,7 @@ implements ContainerListener {
             this.respawnForced = debug1.getBoolean("SpawnForced");
             this.respawnAngle = debug1.getFloat("SpawnAngle");
             if (debug1.contains("SpawnDimension")) {
-                this.respawnDimension = Level.RESOURCE_KEY_CODEC.parse((DynamicOps)NbtOps.INSTANCE, (Object)debug1.get("SpawnDimension")).resultOrPartial(((Logger)LOGGER)::error).orElse(Level.OVERWORLD);
+                this.respawnDimension = Level.RESOURCE_KEY_CODEC.parse(NbtOps.INSTANCE, debug1.get("SpawnDimension")).resultOrPartial(((Logger)LOGGER)::error).orElse(Level.OVERWORLD); // MagmaCube - decompile fix
             }
         }
     }
@@ -311,7 +311,7 @@ implements ContainerListener {
             debug12.putInt("SpawnZ", this.respawnPosition.getZ());
             debug12.putBoolean("SpawnForced", this.respawnForced);
             debug12.putFloat("SpawnAngle", this.respawnAngle);
-            ResourceLocation.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, (Object)this.respawnDimension.location()).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("SpawnDimension", (Tag)debug1));
+            ResourceLocation.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, this.respawnDimension.location()).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("SpawnDimension", (Tag)debug1)); // MagmaCube - decompile fix
         }
     }
 
@@ -470,11 +470,10 @@ implements ContainerListener {
 
     @Override
     public void die(DamageSource debug1) {
-        Object debug3;
         boolean debug2 = this.level.getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
         if (debug2) {
-            debug3 = this.getCombatTracker().getDeathMessage();
-            this.connection.send(new ClientboundPlayerCombatPacket(this.getCombatTracker(), ClientboundPlayerCombatPacket.Event.ENTITY_DIED, (Component)debug3), (GenericFutureListener<? extends Future<? super Void>>)((GenericFutureListener)arg_0 -> this.lambda$die$3((Component)debug3, arg_0)));
+            Component debug3 = this.getCombatTracker().getDeathMessage(); // MagmaCube - decompile fix
+            this.connection.send(new ClientboundPlayerCombatPacket(this.getCombatTracker(), ClientboundPlayerCombatPacket.Event.ENTITY_DIED, (Component)debug3), (arg_0 -> this.lambda$die$3(debug3, arg_0))); // MagmaCube - decompile fix
             Team debug4 = this.getTeam();
             if (debug4 == null || debug4.getDeathMessageVisibility() == Team.Visibility.ALWAYS) {
                 this.server.getPlayerList().broadcastMessage((Component)debug3, ChatType.SYSTEM, Util.NIL_UUID);
@@ -494,7 +493,7 @@ implements ContainerListener {
             this.dropAllDeathLoot(debug1);
         }
         this.getScoreboard().forAllObjectives(ObjectiveCriteria.DEATH_COUNT, this.getScoreboardName(), Score::increment);
-        debug3 = this.getKillCredit();
+        LivingEntity debug3 = this.getKillCredit(); // MagmaCube - decompile fix
         if (debug3 != null) {
             this.awardStat(Stats.ENTITY_KILLED_BY.get(((Entity)debug3).getType()));
             ((Entity)debug3).awardKillScore(this, this.deathScore, debug1);
@@ -710,20 +709,20 @@ implements ContainerListener {
     public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos debug12) {
         Direction debug2 = this.level.getBlockState(debug12).getValue(HorizontalDirectionalBlock.FACING);
         if (this.isSleeping() || !this.isAlive()) {
-            return Either.left((Object)((Object)Player.BedSleepingProblem.OTHER_PROBLEM));
+            return Either.left((Player.BedSleepingProblem.OTHER_PROBLEM)); // MagmaCube - decompile fix
         }
         if (!this.level.dimensionType().natural()) {
-            return Either.left((Object)((Object)Player.BedSleepingProblem.NOT_POSSIBLE_HERE));
+            return Either.left((Player.BedSleepingProblem.NOT_POSSIBLE_HERE)); // MagmaCube - decompile fix
         }
         if (!this.bedInRange(debug12, debug2)) {
-            return Either.left((Object)((Object)Player.BedSleepingProblem.TOO_FAR_AWAY));
+            return Either.left((Player.BedSleepingProblem.TOO_FAR_AWAY)); // MagmaCube - decompile fix
         }
         if (this.bedBlocked(debug12, debug2)) {
-            return Either.left((Object)((Object)Player.BedSleepingProblem.OBSTRUCTED));
+            return Either.left((Player.BedSleepingProblem.OBSTRUCTED)); // MagmaCube - decompile fix
         }
         this.setRespawnPosition(this.level.dimension(), debug12, this.yRot, false, true);
         if (this.level.isDay()) {
-            return Either.left((Object)((Object)Player.BedSleepingProblem.NOT_POSSIBLE_NOW));
+            return Either.left((Player.BedSleepingProblem.NOT_POSSIBLE_NOW)); // MagmaCube - decompile fix
         }
         if (!this.isCreative()) {
             double debug3 = 8.0;
@@ -731,7 +730,7 @@ implements ContainerListener {
             Vec3 debug7 = Vec3.atBottomCenterOf(debug12);
             List<Monster> debug8 = this.level.getEntitiesOfClass(Monster.class, new AABB(debug7.x() - 8.0, debug7.y() - 5.0, debug7.z() - 8.0, debug7.x() + 8.0, debug7.y() + 5.0, debug7.z() + 8.0), debug1 -> debug1.isPreventingPlayerRest(this));
             if (!debug8.isEmpty()) {
-                return Either.left((Object)((Object)Player.BedSleepingProblem.NOT_SAFE));
+                return Either.left((Player.BedSleepingProblem.NOT_SAFE)); // MagmaCube - decompile fix
             }
         }
         Either debug3 = super.startSleepInBed(debug12).ifRight(debug1 -> {
@@ -1006,7 +1005,7 @@ implements ContainerListener {
     @Override
     protected void completeUsingItem() {
         if (!this.useItem.isEmpty() && this.isUsingItem()) {
-            this.connection.send(new ClientboundEntityEventPacket(this, 9));
+            this.connection.send(new ClientboundEntityEventPacket(this, (byte) 9)); // MagmaCube - decompile fix
             super.completeUsingItem();
         }
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index bacbf7e11a58a4e2a3ed1c8b1710bbf9f447a54e..fedcc4b76e993169e9c783cc96151de04404ebb0 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -279,7 +279,6 @@ public class ServerPlayerGameMode {
 
     public InteractionResult useItemOn(ServerPlayer debug1, Level debug2, ItemStack debug3, InteractionHand debug4, BlockHitResult debug5) {
         InteractionResult debug12;
-        Object debug11;
         BlockPos debug6 = debug5.getBlockPos();
         BlockState debug7 = debug2.getBlockState(debug6);
         if (this.gameModeForPlayer == GameType.SPECTATOR) {
@@ -293,14 +292,14 @@ public class ServerPlayerGameMode {
         boolean debug8 = !debug1.getMainHandItem().isEmpty() || !debug1.getOffhandItem().isEmpty();
         boolean debug9 = debug1.isSecondaryUseActive() && debug8;
         ItemStack debug10 = debug3.copy();
-        if (!debug9 && (debug11 = debug7.use(debug2, debug1, debug4, debug5)).consumesAction()) {
+        if (!debug9 && (debug12 = debug7.use(debug2, debug1, debug4, debug5)).consumesAction()) { // MagmaCube - decompile fix
             CriteriaTriggers.ITEM_USED_ON_BLOCK.trigger(debug1, debug6, debug10);
-            return debug11;
+            return debug12; // MagmaCube - decompile fix
         }
         if (debug3.isEmpty() || debug1.getCooldowns().isOnCooldown(debug3.getItem())) {
             return InteractionResult.PASS;
         }
-        debug11 = new UseOnContext(debug1, debug4, debug5);
+        UseOnContext debug11 = new UseOnContext(debug1, debug4, debug5); // MagmaCube - decompile fix
         if (this.isCreative()) {
             int debug13 = debug3.getCount();
             debug12 = debug3.useOn((UseOnContext)debug11);
diff --git a/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java b/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
index 3efde181d896bf0beb6d5be51342e7468fe49202..87bd24ce967f5b51e206fab3f76b70163daa060e 100644
--- a/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
+++ b/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
@@ -64,16 +64,14 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
     }
     
     protected void updateChunkStatus(final ChunkPos debug1) {
-        int debug2;
-        int debug3;
         this.addTask(debug1.x, debug1.z, () -> 0, TaskType.PRE_UPDATE, Util.name(() -> {
             super.retainData(debug1, false);
             super.enableLightSources(debug1, false);
-            for (debug2 = -1; debug2 < 17; ++debug2) {
+            for (int debug2 = -1; debug2 < 17; ++debug2) { // MagmaCube - decompile fix
                 super.queueSectionData(LightLayer.BLOCK, SectionPos.of(debug1, debug2), null, true);
                 super.queueSectionData(LightLayer.SKY, SectionPos.of(debug1, debug2), null, true);
             }
-            for (debug3 = 0; debug3 < 16; ++debug3) {
+            for (int debug3 = 0; debug3 < 16; ++debug3) { // MagmaCube - decompile fix
                 super.updateSectionStatus(SectionPos.of(debug1, debug3), true);
             }
         }, () -> "updateChunkStatus " + debug1 + " " + true));
@@ -100,7 +98,7 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
     
     private void addTask(final int debug1, final int debug2, final IntSupplier debug3, final TaskType debug4, final Runnable debug5) {
         this.sorterMailbox.tell(ChunkTaskPriorityQueueSorter.message(() -> {
-            this.lightTasks.add((Object)Pair.of((Object)debug4, (Object)debug5));
+            this.lightTasks.add(Pair.of(debug4, debug5)); // MagmaCube - decompile fix
             if (this.lightTasks.size() >= this.taskPerBatch) {
                 this.runUpdate();
             }
@@ -115,32 +113,26 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
     public CompletableFuture<ChunkAccess> lightChunk(final ChunkAccess debug1, final boolean debug2) {
         final ChunkPos debug3 = debug1.getPos();
         debug1.setLightCorrect(false);
-        final LevelChunkSection[] debug4;
-        int debug5;
-        LevelChunkSection debug6;
-        final ChunkPos debug7;
         this.addTask(debug3.x, debug3.z, TaskType.PRE_UPDATE, Util.name(() -> {
-            debug4 = debug1.getSections();
-            for (debug5 = 0; debug5 < 16; ++debug5) {
-                debug6 = debug4[debug5];
+            LevelChunkSection[] debug4 = debug1.getSections(); // MagmaCube - decompile fix
+            for (int debug5 = 0; debug5 < 16; ++debug5) { // MagmaCube - decompile fix
+                LevelChunkSection debug6 = debug4[debug5]; // MagmaCube - decompile fix
                 if (!LevelChunkSection.isEmpty(debug6)) {
-                    super.updateSectionStatus(SectionPos.of(debug7, debug5), false);
+                    super.updateSectionStatus(SectionPos.of(debug3, debug5), false); // MagmaCube - decompile fix
                 }
             }
-            super.enableLightSources(debug7, true);
+            super.enableLightSources(debug3, true); // MagmaCube - decompile fix
             if (!debug2) {
-                debug1.getLights().forEach(debug2 -> super.onBlockEmissionIncrease(debug2, debug1.getLightEmission(debug2)));
+                debug1.getLights().forEach(debug2l -> super.onBlockEmissionIncrease(debug2l, debug1.getLightEmission(debug2l))); // MagmaCube - decompile fix
             }
-            this.chunkMap.releaseLightTicket(debug7);
+            this.chunkMap.releaseLightTicket(debug3); // MagmaCube - decompile fix
             return;
         }, () -> "lightChunk " + debug3 + " " + debug2));
-        final ChunkPos debug8;
-        final ChunkPos chunkPos;
         return CompletableFuture.supplyAsync(() -> {
             debug1.setLightCorrect(true);
-            super.retainData(debug8, false);
+            super.retainData(debug3, false); // MagmaCube - decompile fix
             return debug1;
-        }, debug2 -> this.addTask(chunkPos.x, chunkPos.z, TaskType.POST_UPDATE, debug2));
+        }, debug2l -> this.addTask(debug3.x, debug3.z, TaskType.POST_UPDATE, debug2l)); // MagmaCube - decompile fix
     }
     
     public void tryScheduleUpdate() {
diff --git a/src/main/java/net/minecraft/server/level/progress/StoringChunkProgressListener.java b/src/main/java/net/minecraft/server/level/progress/StoringChunkProgressListener.java
index 80328fd27056688901bae663c134a19b75d3d1d5..fc3ee494a1e02df7f7999c5647b3067dfc6ac62a 100644
--- a/src/main/java/net/minecraft/server/level/progress/StoringChunkProgressListener.java
+++ b/src/main/java/net/minecraft/server/level/progress/StoringChunkProgressListener.java
@@ -43,7 +43,7 @@ public class StoringChunkProgressListener implements ChunkProgressListener
             this.statuses.remove(debug1.toLong());
         }
         else {
-            this.statuses.put(debug1.toLong(), (Object)debug2);
+            this.statuses.put(debug1.toLong(), debug2); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
index aeada93e2e471a34cb92abc4e95e80861db7c077..95a0e25cc10d1813c9830256808f48d3a32059cf 100644
--- a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
+++ b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
@@ -31,13 +31,7 @@ package net.minecraft.server.network;
 import com.google.common.collect.Lists;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import io.netty.bootstrap.ServerBootstrap;
-import io.netty.channel.Channel;
-import io.netty.channel.ChannelException;
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelHandler;
-import io.netty.channel.ChannelInitializer;
-import io.netty.channel.ChannelOption;
-import io.netty.channel.EventLoopGroup;
+import io.netty.channel.*;
 import io.netty.channel.epoll.Epoll;
 import io.netty.channel.epoll.EpollEventLoopGroup;
 import io.netty.channel.epoll.EpollServerSocketChannel;
@@ -94,8 +88,8 @@ public class ServerConnectionListener {
     public void startTcpServerListener(@Nullable InetAddress debug1, int debug2) throws IOException {
         List<ChannelFuture> list = this.channels;
         synchronized (list) {
-            LazyLoadedValue<NioEventLoopGroup> debug5;
-            Class<NioServerSocketChannel> debug4;
+            LazyLoadedValue<?> debug5; // MagmaCube - decompile fix
+            Class<? extends ServerChannel> debug4; // MagmaCube - decompile fix
             if (Epoll.isAvailable() && this.server.isEpollEnabled()) {
                 debug4 = EpollServerSocketChannel.class;
                 debug5 = SERVER_EPOLL_EVENT_GROUP;
@@ -109,7 +103,7 @@ public class ServerConnectionListener {
 
                 protected void initChannel(Channel debug1) throws Exception {
                     try {
-                        debug1.config().setOption(ChannelOption.TCP_NODELAY, (Object)true);
+                        debug1.config().setOption(ChannelOption.TCP_NODELAY, true); // MagmaCube - decompile fix
                     }
                     catch (ChannelException channelException) {
                         // empty catch block
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index f30f272fd06505d41149b7175b2ea2ca91a087ce..3508c30e447a579be3f325bb86bd4b8fb8fa1e5d 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -428,7 +428,7 @@ implements ServerGamePacketListener {
         if (debug22.canRead() && debug22.peek() == '/') {
             debug22.skip();
         }
-        ParseResults debug3 = this.server.getCommands().getDispatcher().parse(debug22, (Object)this.player.createCommandSourceStack());
+        ParseResults debug3 = this.server.getCommands().getDispatcher().parse(debug22, this.player.createCommandSourceStack()); // MagmaCube - decompile fix
         this.server.getCommands().getDispatcher().getCompletionSuggestions(debug3).thenAccept(debug2 -> this.connection.send(new ClientboundCommandSuggestionsPacket(debug1.getId(), (Suggestions)debug2)));
     }
 
@@ -1238,8 +1238,8 @@ implements ServerGamePacketListener {
                 debug3.addTagElement("BlockEntityTag", debug7);
             }
             boolean debug8 = debug1.getSlotNum() >= 1 && debug1.getSlotNum() <= 45;
-            boolean bl = debug6 = debug3.isEmpty() || debug3.getDamageValue() >= 0 && debug3.getCount() <= 64 && !debug3.isEmpty();
-            if (debug8 && debug6) {
+            boolean bl = debug3.isEmpty() || debug3.getDamageValue() >= 0 && debug3.getCount() <= 64 && !debug3.isEmpty(); // MagmaCube - decompile fix
+            if (debug8 && bl) { // MagmaCube - decompile fix
                 if (debug3.isEmpty()) {
                     this.player.inventoryMenu.setItem(debug1.getSlotNum(), ItemStack.EMPTY);
                 } else {
@@ -1247,7 +1247,7 @@ implements ServerGamePacketListener {
                 }
                 this.player.inventoryMenu.setSynched(this.player, true);
                 this.player.inventoryMenu.broadcastChanges();
-            } else if (debug2 && debug6 && this.dropSpamTickCount < 200) {
+            } else if (debug2 && bl && this.dropSpamTickCount < 200) { // MagmaCube - decompile fix
                 this.dropSpamTickCount += 20;
                 this.player.drop(debug3, true);
             }
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 90741fa0377d302c74e8beee94278a3f1149cca3..f3d98c76f65b0665dac5c5a51c85870715f2173c 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -168,11 +168,11 @@ implements ServerLoginPacketListener {
                     ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.server.getSessionService().hasJoinedServer(new GameProfile(null, debug1.getName()), debug2, this.getAddress());
                     if (ServerLoginPacketListenerImpl.this.gameProfile != null) {
                         LOGGER.info("UUID of player {} is {}", (Object)ServerLoginPacketListenerImpl.this.gameProfile.getName(), (Object)ServerLoginPacketListenerImpl.this.gameProfile.getId());
-                        ServerLoginPacketListenerImpl.this.state = State.READY_TO_ACCEPT;
+                        ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT; // MagmaCube - decompile fix
                     } else if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
                         LOGGER.warn("Failed to verify username but will let them in anyway!");
                         ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.createFakeProfile(debug1);
-                        ServerLoginPacketListenerImpl.this.state = State.READY_TO_ACCEPT;
+                        ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT; // MagmaCube - decompile fix
                     } else {
                         ServerLoginPacketListenerImpl.this.disconnect(new TranslatableComponent("multiplayer.disconnect.unverified_username"));
                         LOGGER.error("Username '{}' tried to join with an invalid session", (Object)debug1.getName());
@@ -182,7 +182,7 @@ implements ServerLoginPacketListener {
                     if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
                         LOGGER.warn("Authentication servers are down but will let them in anyway!");
                         ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.createFakeProfile(debug1);
-                        ServerLoginPacketListenerImpl.this.state = State.READY_TO_ACCEPT;
+                        ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT; // MagmaCube - decompile fix
                     }
                     ServerLoginPacketListenerImpl.this.disconnect(new TranslatableComponent("multiplayer.disconnect.authservers_down"));
                     LOGGER.error("Couldn't verify username because servers are unavailable");
diff --git a/src/main/java/net/minecraft/server/packs/AbstractPackResources.java b/src/main/java/net/minecraft/server/packs/AbstractPackResources.java
index 0c132d3c11d9a6e35b5b46309eb03166d12d35b0..800ccdefff0e608d122f0d42f8250660d64147bb 100644
--- a/src/main/java/net/minecraft/server/packs/AbstractPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/AbstractPackResources.java
@@ -74,9 +74,7 @@ public abstract class AbstractPackResources implements PackResources
             debug3 = GsonHelper.parse(debug2);
         }
         catch (IOException | JsonParseException ex2) {
-            final Exception ex;
-            final Exception debug4 = ex;
-            AbstractPackResources.LOGGER.error("Couldn't load {} metadata", (Object)debug0.getMetadataSectionName(), (Object)debug4);
+            AbstractPackResources.LOGGER.error("Couldn't load {} metadata", (Object)debug0.getMetadataSectionName(), ex2); // MagmaCube - decompile fix
             return null;
         }
         if (!debug3.has(debug0.getMetadataSectionName())) {
@@ -86,7 +84,7 @@ public abstract class AbstractPackResources implements PackResources
             return debug0.fromJson(GsonHelper.getAsJsonObject(debug3, debug0.getMetadataSectionName()));
         }
         catch (JsonParseException debug5) {
-            AbstractPackResources.LOGGER.error("Couldn't load {} metadata", (Object)debug0.getMetadataSectionName(), (Object)debug5);
+            AbstractPackResources.LOGGER.error("Couldn't load {} metadata", (Object)debug0.getMetadataSectionName(), debug5); // MagmaCube - decompile fix
             return null;
         }
     }
diff --git a/src/main/java/net/minecraft/server/packs/FilePackResources.java b/src/main/java/net/minecraft/server/packs/FilePackResources.java
index 355b7b376823a345a966fe3998b07bd144eaa86f..4ff3a94133f8c145ebfa68eb60b91b2f9dbe02fd 100644
--- a/src/main/java/net/minecraft/server/packs/FilePackResources.java
+++ b/src/main/java/net/minecraft/server/packs/FilePackResources.java
@@ -64,7 +64,7 @@ public class FilePackResources extends AbstractPackResources
             return Collections.emptySet();
         }
         final Enumeration<? extends ZipEntry> debug3 = debug2.entries();
-        final Set<String> debug4 = (Set<String>)Sets.newHashSet();
+        final Set<String> debug4 = Sets.newHashSet(); // MagmaCube - decompile fix
         while (debug3.hasMoreElements()) {
             final ZipEntry debug5 = (ZipEntry)debug3.nextElement();
             final String debug6 = debug5.getName();
@@ -106,10 +106,10 @@ public class FilePackResources extends AbstractPackResources
             debug6 = this.getOrCreateZipFile();
         }
         catch (IOException debug15) {
-            return (Collection<ResourceLocation>)Collections.emptySet();
+            return Collections.emptySet(); // MagmaCube - decompile fix
         }
         final Enumeration<? extends ZipEntry> debug7 = debug6.entries();
-        final List<ResourceLocation> debug8 = (List<ResourceLocation>)Lists.newArrayList();
+        final List<ResourceLocation> debug8 = Lists.newArrayList(); // MagmaCube - decompile fix
         final String debug9 = debug1.getDirectory() + "/" + debug2 + "/";
         final String debug10 = debug9 + debug3 + "/";
         while (debug7.hasMoreElements()) {
diff --git a/src/main/java/net/minecraft/server/packs/FolderPackResources.java b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
index 866d2d6fa70aaf66e350e0646d0664142d12fcc5..49fa556284f617dd3842a802abb7d0d3308a5a41 100644
--- a/src/main/java/net/minecraft/server/packs/FolderPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
@@ -67,7 +67,7 @@ public class FolderPackResources extends AbstractPackResources
     
     @Override
     public Set<String> getNamespaces(final PackType debug1) {
-        final Set<String> debug2 = (Set<String>)Sets.newHashSet();
+        final Set<String> debug2 = Sets.newHashSet(); // MagmaCube - decompile fix
         final File debug3 = new File(this.file, debug1.getDirectory());
         final File[] debug4 = debug3.listFiles((FileFilter)DirectoryFileFilter.DIRECTORY);
         if (debug4 != null) {
@@ -91,7 +91,7 @@ public class FolderPackResources extends AbstractPackResources
     @Override
     public Collection<ResourceLocation> getResources(final PackType debug1, final String debug2, final String debug3, final int debug4, final Predicate<String> debug5) {
         final File debug6 = new File(this.file, debug1.getDirectory());
-        final List<ResourceLocation> debug7 = (List<ResourceLocation>)Lists.newArrayList();
+        final List<ResourceLocation> debug7 = Lists.newArrayList(); // MagmaCube - decompile fix
         this.listResources(new File(new File(debug6, debug2), debug3), debug4, debug2, debug7, debug3 + "/", debug5);
         return debug7;
     }
@@ -120,6 +120,6 @@ public class FolderPackResources extends AbstractPackResources
     static {
         LOGGER = LogManager.getLogger();
         ON_WINDOWS = (Util.getPlatform() == Util.OS.WINDOWS);
-        BACKSLASH_MATCHER = CharMatcher.is('Â¥Â¥');
+        BACKSLASH_MATCHER = CharMatcher.is('\\'); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/server/packs/VanillaPackResources.java b/src/main/java/net/minecraft/server/packs/VanillaPackResources.java
index 5eb65f62760f968063d0213148901cefc58ada4f..354b5fb4ea0b93384262ee2f7dbe8f2f2e2bcd65 100644
--- a/src/main/java/net/minecraft/server/packs/VanillaPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/VanillaPackResources.java
@@ -2,6 +2,7 @@ package net.minecraft.server.packs;
 
 import net.minecraft.Util;
 import com.google.common.collect.Maps;
+import net.minecraft.server.packs.repository.Pack;
 import org.apache.logging.log4j.LogManager;
 import java.nio.file.FileSystemNotFoundException;
 import java.util.Collections;
@@ -45,7 +46,7 @@ public class VanillaPackResources implements PackResources
     public final Set<String> namespaces;
     
     public VanillaPackResources(final String... debug1) {
-        this.namespaces = (Set<String>)ImmutableSet.copyOf((Object[])debug1);
+        this.namespaces = (Set<String>)ImmutableSet.copyOf(debug1); // MagmaCube - decompile fix
     }
     
     @Override
@@ -73,7 +74,7 @@ public class VanillaPackResources implements PackResources
     
     @Override
     public Collection<ResourceLocation> getResources(final PackType debug1, final String debug2, final String debug3, final int debug4, final Predicate<String> debug5) {
-        final Set<ResourceLocation> debug6 = (Set<ResourceLocation>)Sets.newHashSet();
+        final Set<ResourceLocation> debug6 = Sets.newHashSet(); // MagmaCube - decompile fix
         if (VanillaPackResources.generatedDir != null) {
             try {
                 getResources(debug6, debug4, debug2, VanillaPackResources.generatedDir.resolve(debug1.getDirectory()), debug3, debug5);
@@ -119,9 +120,7 @@ public class VanillaPackResources implements PackResources
         }
         catch (FileNotFoundException | NoSuchFileException ex5) {}
         catch (URISyntaxException | IOException ex6) {
-            final Exception ex;
-            final Exception debug13 = ex;
-            VanillaPackResources.LOGGER.error("Couldn't get a list of all vanilla resources", (Throwable)debug13);
+            VanillaPackResources.LOGGER.error("Couldn't get a list of all vanilla resources", (Throwable)ex6); // MagmaCube - decompile fix
         }
         return debug6;
     }
@@ -129,7 +128,7 @@ public class VanillaPackResources implements PackResources
     private static void getResources(final Collection<ResourceLocation> debug0, final int debug1, final String debug2, final Path debug3, final String debug4, final Predicate<String> debug5) throws IOException {
         final Path debug6 = debug3.resolve(debug2);
         try (final Stream<Path> debug7 = Files.walk(debug6.resolve(debug4), debug1, new FileVisitOption[0])) {
-            debug7.filter(debug1 -> !debug1.endsWith(".mcmeta") && Files.isRegularFile(debug1, new LinkOption[0]) && debug5.test(debug1.getFileName().toString())).map(debug2 -> new ResourceLocation(debug2, debug6.relativize(debug2).toString().replaceAll("Â¥Â¥Â¥Â¥", "/"))).forEach(debug0::add);
+            debug7.filter(debug1l -> !debug1l.endsWith(".mcmeta") && Files.isRegularFile(debug1l, new LinkOption[0]) && debug5.test(debug1l.getFileName().toString())).map(debug2l -> new ResourceLocation(debug2, debug6.relativize(debug2l).toString().replaceAll("Â¥Â¥Â¥Â¥", "/"))).forEach(debug0::add); // MagmaCube - decompile fix
         }
     }
     
@@ -200,8 +199,6 @@ public class VanillaPackResources implements PackResources
             return AbstractPackResources.getMetadataFromStream(debug1, debug2);
         }
         catch (RuntimeException | FileNotFoundException ex2) {
-            final Exception ex;
-            final Exception debug3 = ex;
             return null;
         }
     }
@@ -217,24 +214,19 @@ public class VanillaPackResources implements PackResources
     
     static {
         LOGGER = LogManager.getLogger();
-        final PackType[] array;
-        int length;
-        int i;
-        PackType debug;
-        URL debug2;
-        URI debug3;
-        FileSystem debug4;
-        final Exception ex;
-        Exception debug5;
-        JAR_FILESYSTEM_BY_TYPE = Util.make((Map<PackType, FileSystem>)Maps.newHashMap(), debug0 -> {
+        // MagmaCube start - decompile fix
+        JAR_FILESYSTEM_BY_TYPE = Util.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             synchronized (VanillaPackResources.class) {
-                PackType.values();
-                for (length = array.length; i < length; ++i) {
-                    debug = array[i];
-                    debug2 = VanillaPackResources.class.getResource("/" + debug.getDirectory() + "/.mcassetsroot");
+                PackType[] array = PackType.values();
+                int i = 0;
+                for (int length = array.length; i < length; ++i) {
+                    PackType debug = array[i];
+                    URL debug2 = VanillaPackResources.class.getResource("/" + debug.getDirectory() + "/.mcassetsroot");
+                    // MagmaCube end - decompile fix
                     try {
-                        debug3 = debug2.toURI();
+                        URI debug3 = debug2.toURI(); // MagmaCube - decompile fix
                         if ("jar".equals(debug3.getScheme())) {
+                            FileSystem debug4; // MagmaCube - decompile fix
                             try {
                                 debug4 = FileSystems.getFileSystem(debug3);
                             }
@@ -245,8 +237,7 @@ public class VanillaPackResources implements PackResources
                         }
                     }
                     catch (URISyntaxException | IOException ex2) {
-                        debug5 = ex;
-                        VanillaPackResources.LOGGER.error("Couldn't get a list of all vanilla resources", (Throwable)debug5);
+                        VanillaPackResources.LOGGER.error("Couldn't get a list of all vanilla resources", (Throwable)ex2); // MagmaCube - decompile fix
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/server/packs/repository/Pack.java b/src/main/java/net/minecraft/server/packs/repository/Pack.java
index 3662a83dc37665afdff0ad9318f6cec32c59dff2..a104df4c0eb065cebeb0e5662c7f9adbf9832356 100644
--- a/src/main/java/net/minecraft/server/packs/repository/Pack.java
+++ b/src/main/java/net/minecraft/server/packs/repository/Pack.java
@@ -79,11 +79,9 @@ public class Pack implements AutoCloseable
     }
     
     public Component getChatLink(final boolean debug1) {
-        final HoverEvent debug3;
-        final Style style;
         return ComponentUtils.wrapInSquareBrackets(this.packSource.decorate(new TextComponent(this.id))).withStyle(debug2 -> {
-            debug2.withColor(debug1 ? ChatFormatting.GREEN : ChatFormatting.RED).withInsertion(StringArgumentType.escapeIfRequired(this.id));
-            new HoverEvent((HoverEvent.Action<MutableComponent>)HoverEvent.Action.SHOW_TEXT, new TextComponent("").append(this.title).append("Â¥n").append(this.description));
+            Style style = debug2.withColor(debug1 ? ChatFormatting.GREEN : ChatFormatting.RED).withInsertion(StringArgumentType.escapeIfRequired(this.id)); // MagmaCube - decompile fix
+            HoverEvent debug3 = new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TextComponent("").append(this.title).append("Â¥n").append(this.description)); // MagmaCube - decompile fix
             return style.withHoverEvent(debug3);
         });
     }
diff --git a/src/main/java/net/minecraft/server/packs/repository/PackRepository.java b/src/main/java/net/minecraft/server/packs/repository/PackRepository.java
index 2d2e6e1204f65378aaa12d454c7e0d773a578a91..754bf8ba2bcf4f959d9be42c072fce887827d718 100644
--- a/src/main/java/net/minecraft/server/packs/repository/PackRepository.java
+++ b/src/main/java/net/minecraft/server/packs/repository/PackRepository.java
@@ -38,7 +38,7 @@ implements AutoCloseable {
 
     public PackRepository(Pack.PackConstructor debug1, RepositorySource ... debug2) {
         this.constructor = debug1;
-        this.sources = ImmutableSet.copyOf((Object[])debug2);
+        this.sources = ImmutableSet.copyOf(debug2); // MagmaCube - decompile fix
     }
 
     public PackRepository(RepositorySource ... debug1) {
diff --git a/src/main/java/net/minecraft/server/packs/repository/PackSource.java b/src/main/java/net/minecraft/server/packs/repository/PackSource.java
index 7cd36fd0d337b67bad2b18470b7ba8e6be419106..6121d8621991d9109b2e349e88c69a902a6daa72 100644
--- a/src/main/java/net/minecraft/server/packs/repository/PackSource.java
+++ b/src/main/java/net/minecraft/server/packs/repository/PackSource.java
@@ -11,18 +11,15 @@ public interface PackSource
     public static final PackSource SERVER = decorating("pack.source.server");
     
     Component decorate(final Component p0);
-    
-    default PackSource passThrough() {
+
+    static PackSource passThrough() { // MagmaCube - decompile fix
         return debug0 -> debug0;
     }
     
-    default PackSource decorating(final String debug0) {
+    static PackSource decorating(final String debug0) { // MagmaCube - decompile fix
         final Component debug2 = new TranslatableComponent(debug0);
-        final TranslatableComponent translatableComponent;
-        final Object o;
         return debug1 -> {
-            new TranslatableComponent("pack.nameAndSource", new Object[] { debug1, o });
-            return translatableComponent;
+            return new TranslatableComponent("pack.nameAndSource", new Object[] { debug1, debug2 }); // MagmaCube - decompile fix
         };
     }
 }
diff --git a/src/main/java/net/minecraft/server/packs/resources/FallbackResourceManager.java b/src/main/java/net/minecraft/server/packs/resources/FallbackResourceManager.java
index 305ff970b130f4d2a7878b9b5af09aa61947ef9c..33ed67816558ad0e4893613447068f5783b4cbba 100644
--- a/src/main/java/net/minecraft/server/packs/resources/FallbackResourceManager.java
+++ b/src/main/java/net/minecraft/server/packs/resources/FallbackResourceManager.java
@@ -30,7 +30,7 @@ public class FallbackResourceManager implements ResourceManager
     private final String namespace;
     
     public FallbackResourceManager(final PackType debug1, final String debug2) {
-        this.fallbacks = (List<PackResources>)Lists.newArrayList();
+        this.fallbacks = Lists.newArrayList(); // MagmaCube - decompile fix
         this.type = debug1;
         this.namespace = debug2;
     }
@@ -41,7 +41,7 @@ public class FallbackResourceManager implements ResourceManager
     
     @Override
     public Set<String> getNamespaces() {
-        return (Set<String>)ImmutableSet.of((Object)this.namespace);
+        return (Set<String>)ImmutableSet.of(this.namespace); // MagmaCube - decompile fix
     }
     
     @Override
@@ -97,7 +97,7 @@ public class FallbackResourceManager implements ResourceManager
     @Override
     public List<Resource> getResources(final ResourceLocation debug1) throws IOException {
         this.validateLocation(debug1);
-        final List<Resource> debug2 = (List<Resource>)Lists.newArrayList();
+        final List<Resource> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         final ResourceLocation debug3 = getMetadataLocation(debug1);
         for (final PackResources debug4 : this.fallbacks) {
             if (debug4.hasResource(this.type, debug1)) {
@@ -113,7 +113,7 @@ public class FallbackResourceManager implements ResourceManager
     
     @Override
     public Collection<ResourceLocation> listResources(final String debug1, final Predicate<String> debug2) {
-        final List<ResourceLocation> debug3 = (List<ResourceLocation>)Lists.newArrayList();
+        final List<ResourceLocation> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final PackResources debug4 : this.fallbacks) {
             debug3.addAll(debug4.getResources(this.type, this.namespace, debug1, Integer.MAX_VALUE, debug2));
         }
diff --git a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
index 938fedc93243b2181f7ae592c4ebca5d06247726..2ba69dae575ed0ecdc588458ef342f86173bcf91 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
@@ -16,39 +16,32 @@ import java.util.List;
 import com.google.common.base.Stopwatch;
 import org.apache.logging.log4j.Logger;
 
-public class ProfiledReloadInstance extends SimpleReloadInstance<State>
+public class ProfiledReloadInstance extends SimpleReloadInstance<ProfiledReloadInstance.State> // MagmaCube - decompile fix
 {
     private static final Logger LOGGER;
     private final Stopwatch total;
     
     public ProfiledReloadInstance(final ResourceManager debug1, final List<PreparableReloadListener> debug2, final Executor debug3, final Executor debug4, final CompletableFuture<Unit> debug5) {
-        final AtomicLong debug6;
-        final AtomicLong debug7;
-        final ActiveProfiler debug8;
-        final ActiveProfiler debug9;
-        final long debug11;
-        final AtomicLong atomicLong;
-        final long debug12;
-        final AtomicLong atomicLong2;
-        final CompletableFuture<Void> debug10;
-        super(debug3, debug4, debug1, debug2, (debug1, debug2, debug3, debug4, debug5) -> {
-            debug6 = new AtomicLong();
-            debug7 = new AtomicLong();
-            debug8 = new ActiveProfiler(Util.timeSource, () -> 0, false);
-            debug9 = new ActiveProfiler(Util.timeSource, () -> 0, false);
-            debug10 = debug3.reload(debug1, debug2, debug8, debug9, debug2 -> debug4.execute(() -> {
-                debug11 = Util.getNanos();
-                debug2.run();
-                atomicLong.addAndGet(Util.getNanos() - debug11);
-            }), debug2 -> debug5.execute(() -> {
-                debug12 = Util.getNanos();
-                debug2.run();
-                atomicLong2.addAndGet(Util.getNanos() - debug12);
+        // MagmaCube start - decompile fix
+        super(debug3, debug4, debug1, debug2, (debug1l, debug2l, debug3l, debug4l, debug5l) -> {
+            AtomicLong debug6 = new AtomicLong();
+            AtomicLong debug7 = new AtomicLong();
+            ActiveProfiler debug8 = new ActiveProfiler(Util.timeSource, () -> 0, false);
+            ActiveProfiler debug9 = new ActiveProfiler(Util.timeSource, () -> 0, false);
+            CompletableFuture<Void> debug10 = debug3l.reload(debug1l, debug2l, debug8, debug9, debug2ll -> debug4l.execute(() -> {
+                long debug11 = Util.getNanos();
+                debug2ll.run();
+                debug6.addAndGet(Util.getNanos() - debug11);
+            }), debug2ll -> debug5l.execute(() -> {
+                long debug12 = Util.getNanos();
+                debug2ll.run();
+                debug7.addAndGet(Util.getNanos() - debug12);
             }));
-            return debug10.thenApplyAsync(debug5 -> new State(debug3.getName(), debug8.getResults(), debug9.getResults(), debug6, debug7), debug4);
+            return debug10.thenApplyAsync(debug5ll -> new State(debug3l.getName(), debug8.getResults(), debug9.getResults(), debug6, debug7), debug4);
         }, debug5);
         (this.total = Stopwatch.createUnstarted()).start();
-        this.allDone.thenAcceptAsync((Consumer<? super List<S>>)this::finish, debug4);
+        this.allDone.thenAcceptAsync(this::finish, debug4);
+        // MagmaCube end - decompile fix
     }
     
     private void finish(final List<State> debug1) {
diff --git a/src/main/java/net/minecraft/server/packs/resources/ResourceManager.java b/src/main/java/net/minecraft/server/packs/resources/ResourceManager.java
index 3e12fc09d54af637232f4c4d5c102593bd092490..40ea4a4d4a1ebe5c8cd1f21193adfd5b16666617 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ResourceManager.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ResourceManager.java
@@ -32,7 +32,7 @@ public interface ResourceManager
         
         @Override
         public Set<String> getNamespaces() {
-            return (Set<String>)ImmutableSet.of();
+            return ImmutableSet.of(); // MagmaCube - decompile fix
         }
         
         @Override
@@ -47,12 +47,12 @@ public interface ResourceManager
         
         @Override
         public List<Resource> getResources(final ResourceLocation debug1) {
-            return (List<Resource>)ImmutableList.of();
+            return ImmutableList.of(); // MagmaCube - decompile fix
         }
         
         @Override
         public Collection<ResourceLocation> listResources(final String debug1, final Predicate<String> debug2) {
-            return (Collection<ResourceLocation>)ImmutableSet.of();
+            return ImmutableSet.of(); // MagmaCube - decompile fix
         }
         
         @Override
diff --git a/src/main/java/net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java b/src/main/java/net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java
index a123a2dc730165a3972a4ced5062bd3bffb26c79..4a3df14a345ceaa3c70f2ed03758956a8b2ffa80 100644
--- a/src/main/java/net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java
+++ b/src/main/java/net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java
@@ -32,7 +32,7 @@ public abstract class SimpleJsonResourceReloadListener extends SimplePreparableR
     
     @Override
     protected Map<ResourceLocation, JsonElement> prepare(final ResourceManager debug1, final ProfilerFiller debug2) {
-        final Map<ResourceLocation, JsonElement> debug3 = (Map<ResourceLocation, JsonElement>)Maps.newHashMap();
+        final Map<ResourceLocation, JsonElement> debug3 = Maps.newHashMap(); // MagmaCube - decompile fix
         final int debug4 = this.directory.length() + 1;
         for (final ResourceLocation debug5 : debug1.listResources(this.directory, debug0 -> debug0.endsWith(".json"))) {
             final String debug6 = debug5.getPath();
@@ -52,9 +52,7 @@ public abstract class SimpleJsonResourceReloadListener extends SimplePreparableR
                 }
             }
             catch (JsonParseException | IllegalArgumentException | IOException ex2) {
-                final Exception ex;
-                final Exception debug13 = ex;
-                SimpleJsonResourceReloadListener.LOGGER.error("Couldn't parse data file {} from {}", (Object)debug7, (Object)debug5, (Object)debug13);
+                SimpleJsonResourceReloadListener.LOGGER.error("Couldn't parse data file {} from {}", (Object)debug7, (Object)debug5, ex2); // MagmaCube - decompile fix
             }
         }
         return debug3;
diff --git a/src/main/java/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java b/src/main/java/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java
index 3b249ccbfe48ab0bc423d6cfeb3ccc2e16a64ae7..16b408402ec9a75b29c862962f145a5f10b37dd6 100644
--- a/src/main/java/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java
+++ b/src/main/java/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java
@@ -10,7 +10,7 @@ public abstract class SimplePreparableReloadListener<T> implements PreparableRel
 {
     @Override
     public final CompletableFuture<Void> reload(final PreparationBarrier debug1, final ResourceManager debug2, final ProfilerFiller debug3, final ProfilerFiller debug4, final Executor debug5, final Executor debug6) {
-        return CompletableFuture.supplyAsync(() -> this.prepare(debug2, debug3), debug5).thenCompose((Function<? super Object, ? extends CompletionStage<Object>>)debug1::wait).thenAcceptAsync(debug3 -> this.apply(debug3, debug2, debug4), debug6);
+        return CompletableFuture.supplyAsync(() -> this.prepare(debug2, debug3), debug5).thenCompose(debug1::wait).thenAcceptAsync(debug32 -> this.apply(debug32, debug2, debug4), debug6); // MagmaCube - decompile fix
     }
     
     protected abstract T prepare(final ResourceManager p0, final ProfilerFiller p1);
diff --git a/src/main/java/net/minecraft/server/packs/resources/SimpleReloadInstance.java b/src/main/java/net/minecraft/server/packs/resources/SimpleReloadInstance.java
index 54b4c578cd8d9cb4b70455f2a2de02ed90cc56d7..3e5fe8bce7147a5936129abef91c1f41206481a4 100644
--- a/src/main/java/net/minecraft/server/packs/resources/SimpleReloadInstance.java
+++ b/src/main/java/net/minecraft/server/packs/resources/SimpleReloadInstance.java
@@ -27,7 +27,7 @@ public class SimpleReloadInstance<S> implements ReloadInstance
     private final AtomicInteger doneTaskCounter;
     
     public static SimpleReloadInstance<Void> of(final ResourceManager debug0, final List<PreparableReloadListener> debug1, final Executor debug2, final Executor debug3, final CompletableFuture<Unit> debug4) {
-        return new SimpleReloadInstance<Void>(debug2, debug3, debug0, debug1, (debug1, debug2, debug3, debug4, debug5) -> debug3.reload(debug1, debug2, InactiveProfiler.INSTANCE, InactiveProfiler.INSTANCE, debug2, debug5), debug4);
+        return new SimpleReloadInstance<Void>(debug2, debug3, debug0, debug1, (debug1l, debug2l, debug3l, debug4l, debug5) -> debug3l.reload(debug1l, debug2l, InactiveProfiler.INSTANCE, InactiveProfiler.INSTANCE, debug2, debug5), debug4); // MagmaCube - decompile fix
     }
     
     protected SimpleReloadInstance(final Executor debug1, final Executor debug2, final ResourceManager debug3, final List<PreparableReloadListener> debug4, final StateFactory<S> debug5, final CompletableFuture<Unit> debug6) {
@@ -38,7 +38,7 @@ public class SimpleReloadInstance<S> implements ReloadInstance
         this.listenerCount = debug4.size();
         this.startedTaskCounter.incrementAndGet();
         debug6.thenRun(this.doneTaskCounter::incrementAndGet);
-        final List<CompletableFuture<S>> debug7 = (List<CompletableFuture<S>>)Lists.newArrayList();
+        final List<CompletableFuture<S>> debug7 = Lists.newArrayList(); // MagmaCube - decompile fix
         CompletableFuture<?> debug8 = debug6;
         this.preparingListeners = (Set<PreparableReloadListener>)Sets.newHashSet((Iterable)debug4);
         for (final PreparableReloadListener debug9 : debug4) {
@@ -53,19 +53,19 @@ public class SimpleReloadInstance<S> implements ReloadInstance
                         }
                         return;
                     });
-                    return SimpleReloadInstance.this.allPreparations.thenCombine((CompletionStage<?>)debug10, (debug1, debug2) -> debug1);
+                    return SimpleReloadInstance.this.allPreparations.thenCombine((CompletionStage<?>)debug10, (debug1l, debug2) -> debug1); // MagmaCube - decompile fix
                 }
-            }, debug3, debug9, debug2 -> {
+            }, debug3, debug9, debug2l -> { // MagmaCube - decompile fix
                 this.startedTaskCounter.incrementAndGet();
                 debug1.execute(() -> {
-                    debug2.run();
+                    debug2l.run(); // MagmaCube - decompile fix
                     this.doneTaskCounter.incrementAndGet();
                 });
                 return;
-            }, debug2 -> {
+            }, debug2l -> { // MagmaCube - decompile fix
                 ++this.startedReloads;
                 debug2.execute(() -> {
-                    debug2.run();
+                    debug2l.run(); // MagmaCube - decompile fix
                     ++this.finishedReloads;
                 });
                 return;
diff --git a/src/main/java/net/minecraft/server/packs/resources/SimpleReloadableResourceManager.java b/src/main/java/net/minecraft/server/packs/resources/SimpleReloadableResourceManager.java
index f9ed4a18e9acdd6ae55b34b65faebb0704210820..317a15c940b6de85c1063fffa9dff4099b9bd895 100644
--- a/src/main/java/net/minecraft/server/packs/resources/SimpleReloadableResourceManager.java
+++ b/src/main/java/net/minecraft/server/packs/resources/SimpleReloadableResourceManager.java
@@ -133,7 +133,7 @@ implements ReloadableResourceManager {
     }
 
     protected ReloadInstance createReload(Executor debug1, Executor debug2, List<PreparableReloadListener> debug3, CompletableFuture<Unit> debug4) {
-        ProfiledReloadInstance debug5 = LOGGER.isDebugEnabled() ? new ProfiledReloadInstance(this, Lists.newArrayList(debug3), debug1, debug2, debug4) : SimpleReloadInstance.of(this, Lists.newArrayList(debug3), debug1, debug2, debug4);
+        ReloadInstance debug5 = LOGGER.isDebugEnabled() ? new ProfiledReloadInstance(this, Lists.newArrayList(debug3), debug1, debug2, debug4) : SimpleReloadInstance.of(this, Lists.newArrayList(debug3), debug1, debug2, debug4); // MagmaCube - decompile fix
         this.recentlyRegistered.clear();
         return debug5;
     }
diff --git a/src/main/java/net/minecraft/server/players/GameProfileCache.java b/src/main/java/net/minecraft/server/players/GameProfileCache.java
index 872e3c6535ccc62e6b59edce717703f2048e5797..e0466f1ac947d9e30b7c85a781880b6ee7f8cb64 100644
--- a/src/main/java/net/minecraft/server/players/GameProfileCache.java
+++ b/src/main/java/net/minecraft/server/players/GameProfileCache.java
@@ -53,13 +53,13 @@ public class GameProfileCache
     private final AtomicLong operationCount;
     
     public GameProfileCache(final GameProfileRepository debug1, final File debug2) {
-        this.profilesByName = (Map<String, GameProfileInfo>)Maps.newConcurrentMap();
-        this.profilesByUUID = (Map<UUID, GameProfileInfo>)Maps.newConcurrentMap();
+        this.profilesByName = Maps.newConcurrentMap(); // MagmaCube - decompile fix
+        this.profilesByUUID = Maps.newConcurrentMap(); // MagmaCube - decompile fix
         this.gson = new GsonBuilder().create();
         this.operationCount = new AtomicLong();
         this.profileRepository = debug1;
         this.file = debug2;
-        Lists.reverse((List)this.load()).forEach(this::safeAdd);
+        Lists.reverse(this.load()).forEach(this::safeAdd); // MagmaCube - decompile fix
     }
     
     private void safeAdd(final GameProfileInfo debug1) {
@@ -83,7 +83,7 @@ public class GameProfileCache
                 debug2.set(debug1);
             }
             
-            public void onProfileLookupFailed(final GameProfile debug1, final Exception debug2) {
+            public void onProfileLookupFailed(final GameProfile debug1, final Exception debug3) { // MagmaCube - decompile fix
                 debug2.set(null);
             }
         };
@@ -162,29 +162,24 @@ public class GameProfileCache
     }
     
     public List<GameProfileInfo> load() {
-        final List<GameProfileInfo> debug3 = (List<GameProfileInfo>)Lists.newArrayList();
+        final List<GameProfileInfo> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
         try (final Reader debug4 = Files.newReader(this.file, StandardCharsets.UTF_8)) {
             final JsonArray debug5 = (JsonArray)this.gson.fromJson(debug4, (Class)JsonArray.class);
             if (debug5 == null) {
                 return debug3;
             }
             final DateFormat debug6 = createDateFormat();
-            final DateFormat debug9;
-            final GameProfileInfo debug7;
-            final List<GameProfileInfo> list;
             debug5.forEach(debug2 -> {
-                debug7 = readGameProfile(debug2, debug9);
+                GameProfileInfo debug7 = readGameProfile(debug2, debug6); // MagmaCube - decompile fix
                 if (debug7 != null) {
-                    list.add(debug7);
+                    debug3.add(debug7); // MagmaCube - decompile fix
                 }
                 return;
             });
         }
         catch (FileNotFoundException ex2) {}
         catch (IOException | JsonParseException ex3) {
-            final Exception ex;
-            final Exception debug8 = ex;
-            GameProfileCache.LOGGER.warn("Failed to load profile cache {}", (Object)this.file, (Object)debug8);
+            GameProfileCache.LOGGER.warn("Failed to load profile cache {}", (Object)this.file, ex3); // MagmaCube - decompile fix
         }
         return debug3;
     }
@@ -201,7 +196,7 @@ public class GameProfileCache
     }
     
     private Stream<GameProfileInfo> getTopMRUProfiles(final int debug1) {
-        return ImmutableList.copyOf((Collection)this.profilesByUUID.values()).stream().sorted(Comparator.comparing((Function<? super Object, ? extends Comparable>)GameProfileInfo::getLastAccess).reversed()).limit(debug1);
+        return ImmutableList.copyOf((Collection)this.profilesByUUID.values()).stream().sorted(Comparator.comparing(GameProfileInfo::getLastAccess).reversed()).limit(debug1); // MagmaCube - decompile fix
     }
     
     private static JsonElement writeGameProfile(final GameProfileInfo debug0, final DateFormat debug1) {
diff --git a/src/main/java/net/minecraft/server/players/IpBanList.java b/src/main/java/net/minecraft/server/players/IpBanList.java
index b4d345e8c033b470cf36756ab1f32a0b4a444ba7..4e9d51cc4267333179b0fcd2c09d34ea57c33c07 100644
--- a/src/main/java/net/minecraft/server/players/IpBanList.java
+++ b/src/main/java/net/minecraft/server/players/IpBanList.java
@@ -17,11 +17,11 @@ public class IpBanList extends StoredUserList<String, IpBanListEntry>
     
     public boolean isBanned(final SocketAddress debug1) {
         final String debug2 = this.getIpFromAddress(debug1);
-        return ((StoredUserList<String, V>)this).contains(debug2);
+        return (this).contains(debug2); // MagmaCube - decompile fix
     }
     
     public boolean isBanned(final String debug1) {
-        return ((StoredUserList<String, V>)this).contains(debug1);
+        return (this).contains(debug1); // MagmaCube - decompile fix
     }
     
     public IpBanListEntry get(final SocketAddress debug1) {
diff --git a/src/main/java/net/minecraft/server/players/OldUsersConverter.java b/src/main/java/net/minecraft/server/players/OldUsersConverter.java
index 06ce11aa0adf39e562237eaeffb7a33cdfdcea7f..01cbbc9e88d6cfe3030e9ef149231386a66e2103 100644
--- a/src/main/java/net/minecraft/server/players/OldUsersConverter.java
+++ b/src/main/java/net/minecraft/server/players/OldUsersConverter.java
@@ -62,10 +62,10 @@ public class OldUsersConverter {
     public static final File OLD_WHITELIST = new File("white-list.txt");
 
     static List<String> readOldListFormat(File debug0, Map<String, String[]> debug1) throws IOException {
-        List debug2 = Files.readLines((File)debug0, (Charset)StandardCharsets.UTF_8);
+        List<String> debug2 = Files.readLines((File)debug0, (Charset)StandardCharsets.UTF_8); // MagmaCube - decompile fix
         for (String debug4 : debug2) {
             if ((debug4 = debug4.trim()).startsWith("#") || debug4.length() < 1) continue;
-            String[] debug5 = debug4.split("Â¥Â¥|");
+            String[] debug5 = debug4.split("\\|"); // MagmaCube - decompile fix
             debug1.put(debug5[0].toLowerCase(Locale.ROOT), debug5);
         }
         return debug2;
@@ -150,7 +150,7 @@ public class OldUsersConverter {
                 }
             }
             try {
-                HashMap debug2 = Maps.newHashMap();
+                HashMap<String, String[]> debug2 = Maps.newHashMap(); // MagmaCube - decompile fix
                 OldUsersConverter.readOldListFormat(OLD_IPBANLIST, debug2);
                 for (String debug4 : debug2.keySet()) {
                     String[] debug5 = (String[])debug2.get(debug4);
@@ -289,7 +289,7 @@ public class OldUsersConverter {
                 LOGGER.warn("Could not lookup user whitelist entry for {}", (Object)debug1.getName(), (Object)debug2);
             }
         };
-        OldUsersConverter.lookupPlayers(debug0, Lists.newArrayList((Object[])new String[]{debug1}), debug4);
+        OldUsersConverter.lookupPlayers(debug0, Lists.newArrayList(new String[]{debug1}), debug4); // MagmaCube - decompile fix
         if (!debug3.isEmpty() && ((GameProfile)debug3.get(0)).getId() != null) {
             return ((GameProfile)debug3.get(0)).getId();
         }
@@ -312,13 +312,8 @@ public class OldUsersConverter {
             debug5.add(debug11);
         }
         try {
-            Object[] debug6 = debug5.toArray(new String[debug5.size()]);
-            ProfileLookupCallback debug7 = new ProfileLookupCallback((String[])debug6){
-                final /* synthetic */ String[] val$names;
-                {
-                    this.val$names = arrstring;
-                }
-
+            String[] debug6a = (String[]) debug5.toArray(new String[debug5.size()]); // MagmaCube - decompile fix
+            ProfileLookupCallback debug7 = new ProfileLookupCallback(){ // MagmaCube - decompile fix
                 public void onProfileLookupSucceeded(GameProfile debug12) {
                     debug0.getProfileCache().add(debug12);
                     UUID debug22 = debug12.getId();
@@ -348,7 +343,7 @@ public class OldUsersConverter {
 
                 private String getFileNameForProfile(GameProfile debug12) {
                     String debug22 = null;
-                    for (String debug6 : this.val$names) {
+                    for (String debug6 : debug6a) { // MagmaCube - decompile fix
                         if (debug6 == null || !debug6.equalsIgnoreCase(debug12.getName())) continue;
                         debug22 = debug6;
                         break;
@@ -359,7 +354,7 @@ public class OldUsersConverter {
                     return debug22;
                 }
             };
-            OldUsersConverter.lookupPlayers(debug0, Lists.newArrayList((Object[])debug6), debug7);
+            OldUsersConverter.lookupPlayers(debug0, Lists.newArrayList(debug6a), debug7); // MagmaCube - decompile fix
         }
         catch (ConversionError debug6) {
             LOGGER.error("Conversion failed, please try again later", (Throwable)debug6);
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 7229afa63993ac75ef8bdc259c2a8e8cad638629..0fd7c3692160855ccd77b4e40782123735d54984 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -200,12 +200,12 @@ public abstract class PlayerList {
         if (!this.server.getResourcePack().isEmpty()) {
             debug2.sendTexturePack(this.server.getResourcePack(), this.server.getResourcePackHash());
         }
-        Object debug18 = debug2.getActiveEffects().iterator();
-        while (debug18.hasNext()) {
-            debug19 = debug18.next();
-            debug13.send(new ClientboundUpdateMobEffectPacket(debug2.getId(), (MobEffectInstance)debug19));
+        for (MobEffectInstance mobEffectInstance : debug2.getActiveEffects()) { // MagmaCube - decompile fix
+            debug19 = mobEffectInstance;
+            debug13.send(new ClientboundUpdateMobEffectPacket(debug2.getId(), (MobEffectInstance) debug19));
         }
-        if (debug7 != null && debug7.contains("RootVehicle", 10) && (debug19 = EntityType.loadEntityRecursive(((CompoundTag)(debug18 = debug7.getCompound("RootVehicle"))).getCompound("Entity"), debug10, debug1 -> {
+        CompoundTag debug18; // MagmaCube - decompile fix
+        if (debug7 != null && debug7.contains("RootVehicle", 10) && (debug19 = EntityType.loadEntityRecursive((debug18 = debug7.getCompound("RootVehicle")).getCompound("Entity"), debug10, debug1 -> { // MagmaCube - decompile fix
             if (!debug10.addWithUUID((Entity)debug1)) {
                 return null;
             }
@@ -384,8 +384,8 @@ public abstract class PlayerList {
         if (debug4 != null && !debug3.contains(debug4)) {
             debug3.add(debug4);
         }
-        for (Object debug62 : debug3) {
-            ((ServerPlayer)debug62).connection.disconnect(new TranslatableComponent("multiplayer.disconnect.duplicate_login"));
+        for (Object pl : debug3) { // MagmaCube - decompile fix
+            ((ServerPlayer)pl).connection.disconnect(new TranslatableComponent("multiplayer.disconnect.duplicate_login")); // MagmaCube - decompile fix
         }
         debug62 = this.server.overworld();
         debug5 = this.server.isDemo() ? new DemoMode((ServerLevel)debug62) : new ServerPlayerGameMode((ServerLevel)debug62);
@@ -399,7 +399,7 @@ public abstract class PlayerList {
         float debug4 = debug1.getRespawnAngle();
         boolean debug5 = debug1.isRespawnForced();
         ServerLevel debug6 = this.server.getLevel(debug1.getRespawnDimension());
-        Optional<Object> debug7 = debug6 != null && debug3 != null ? Player.findRespawnPositionAndUseSpawnBlock(debug6, debug3, debug4, debug5, debug2) : Optional.empty();
+        Optional<Object> debug7 = debug6 != null && debug3 != null ? Optional.ofNullable(Player.findRespawnPositionAndUseSpawnBlock(debug6, debug3, debug4, debug5, debug2)) : Optional.empty(); // MagmaCube - decompile fix
         ServerLevel debug9 = debug6 != null && debug7.isPresent() ? debug6 : this.server.overworld();
         ServerPlayerGameMode debug8 = this.server.isDemo() ? new DemoMode(debug9) : new ServerPlayerGameMode(debug9);
         ServerPlayer debug10 = new ServerPlayer(this.server, debug9, debug1.getGameProfile(), debug8);
diff --git a/src/main/java/net/minecraft/server/players/ServerOpList.java b/src/main/java/net/minecraft/server/players/ServerOpList.java
index 7e7bc98f9c1cf63d443364ea1186b75c9ccb6598..b3eaa6b8557f0b576f622470efbb563d19cc0181 100644
--- a/src/main/java/net/minecraft/server/players/ServerOpList.java
+++ b/src/main/java/net/minecraft/server/players/ServerOpList.java
@@ -18,9 +18,9 @@ public class ServerOpList extends StoredUserList<GameProfile, ServerOpListEntry>
     
     @Override
     public String[] getUserList() {
-        final String[] debug1 = new String[((StoredUserList<K, ServerOpListEntry>)this).getEntries().size()];
+        final String[] debug1 = new String[(this).getEntries().size()]; // MagmaCube - decompile fix
         int debug2 = 0;
-        for (final StoredUserEntry<GameProfile> debug3 : ((StoredUserList<K, ServerOpListEntry>)this).getEntries()) {
+        for (final StoredUserEntry<GameProfile> debug3 : (this).getEntries()) { // MagmaCube - decompile fix
             debug1[debug2++] = debug3.getUser().getName();
         }
         return debug1;
diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index 6c5f1e0d6615e4bfe4b0a38a515d5e0b69127e0f..1f4c6a7ea266b23241d86f3f6bdaf75eb93c00ea 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -33,7 +33,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>>
     private final Map<String, V> map;
     
     public StoredUserList(final File debug1) {
-        this.map = (Map<String, V>)Maps.newHashMap();
+        this.map = Maps.newHashMap(); // MagmaCube - decompile fix
         this.file = debug1;
     }
     
@@ -107,7 +107,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>>
     
     public void save() throws IOException {
         final JsonArray debug = new JsonArray();
-        this.map.values().stream().map(debug0 -> Util.make(new JsonObject(), debug0::serialize)).forEach((Consumer<? super Object>)debug::add);
+        this.map.values().stream().map(debug0 -> Util.make(new JsonObject(), debug0::serialize)).forEach(debug::add); // MagmaCube - decompile fix
         try (final BufferedWriter debug2 = Files.newWriter(this.file, StandardCharsets.UTF_8)) {
             StoredUserList.GSON.toJson((JsonElement)debug, (Appendable)debug2);
         }
diff --git a/src/main/java/net/minecraft/server/players/UserBanList.java b/src/main/java/net/minecraft/server/players/UserBanList.java
index 94b65a5002aeed97f775672114edbec61303c9d7..3e206431b5e4447a2b1665a7cfbc7e8fc7f8e0b5 100644
--- a/src/main/java/net/minecraft/server/players/UserBanList.java
+++ b/src/main/java/net/minecraft/server/players/UserBanList.java
@@ -17,14 +17,14 @@ public class UserBanList extends StoredUserList<GameProfile, UserBanListEntry>
     }
     
     public boolean isBanned(final GameProfile debug1) {
-        return ((StoredUserList<GameProfile, V>)this).contains(debug1);
+        return (this).contains(debug1); // MagmaCube - decompile fix
     }
     
     @Override
     public String[] getUserList() {
-        final String[] debug1 = new String[((StoredUserList<K, UserBanListEntry>)this).getEntries().size()];
+        final String[] debug1 = new String[(this).getEntries().size()]; // MagmaCube - decompile fix
         int debug2 = 0;
-        for (final StoredUserEntry<GameProfile> debug3 : ((StoredUserList<K, UserBanListEntry>)this).getEntries()) {
+        for (final StoredUserEntry<GameProfile> debug3 : (this).getEntries()) { // MagmaCube - decompile fix
             debug1[debug2++] = debug3.getUser().getName();
         }
         return debug1;
diff --git a/src/main/java/net/minecraft/server/players/UserWhiteList.java b/src/main/java/net/minecraft/server/players/UserWhiteList.java
index 8f83560f3cdff9fb5051f24b8a4a0989b545f1a8..9cb13f117c4fa795cc11dcd8ea9c2b5f7fd5b890 100644
--- a/src/main/java/net/minecraft/server/players/UserWhiteList.java
+++ b/src/main/java/net/minecraft/server/players/UserWhiteList.java
@@ -17,14 +17,14 @@ public class UserWhiteList extends StoredUserList<GameProfile, UserWhiteListEntr
     }
     
     public boolean isWhiteListed(final GameProfile debug1) {
-        return ((StoredUserList<GameProfile, V>)this).contains(debug1);
+        return (this).contains(debug1); // MagmaCube - decompile fix
     }
     
     @Override
     public String[] getUserList() {
-        final String[] debug1 = new String[((StoredUserList<K, UserWhiteListEntry>)this).getEntries().size()];
+        final String[] debug1 = new String[(this).getEntries().size()]; // MagmaCube - decompile fix
         int debug2 = 0;
-        for (final StoredUserEntry<GameProfile> debug3 : ((StoredUserList<K, UserWhiteListEntry>)this).getEntries()) {
+        for (final StoredUserEntry<GameProfile> debug3 : (this).getEntries()) { // MagmaCube - decompile fix
             debug1[debug2++] = debug3.getUser().getName();
         }
         return debug1;
diff --git a/src/main/java/net/minecraft/sounds/Music.java b/src/main/java/net/minecraft/sounds/Music.java
index b482d2d726448497477de1d24b4e304ae40798ae..c25454cf45793b95ba1d3e28d94625e8151bdfd9 100644
--- a/src/main/java/net/minecraft/sounds/Music.java
+++ b/src/main/java/net/minecraft/sounds/Music.java
@@ -37,6 +37,6 @@ public class Music
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)SoundEvent.CODEC.fieldOf("sound").forGetter(debug0 -> debug0.event), (App)Codec.INT.fieldOf("min_delay").forGetter(debug0 -> debug0.minDelay), (App)Codec.INT.fieldOf("max_delay").forGetter(debug0 -> debug0.maxDelay), (App)Codec.BOOL.fieldOf("replace_current_music").forGetter(debug0 -> debug0.replaceCurrentMusic)).apply(debug0, Music::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(SoundEvent.CODEC.fieldOf("sound").forGetter(debug0l -> debug0l.event), Codec.INT.fieldOf("min_delay").forGetter(debug0l -> debug0l.minDelay), Codec.INT.fieldOf("max_delay").forGetter(debug0l -> debug0l.maxDelay), Codec.BOOL.fieldOf("replace_current_music").forGetter(debug0l -> debug0l.replaceCurrentMusic)).apply(debug0, Music::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/sounds/SoundEvent.java b/src/main/java/net/minecraft/sounds/SoundEvent.java
index 3e3813fb0e148110b6f989189c32d6203051253b..c6adf1de1bb5055c86d95cd0947b61edc4131cd0 100644
--- a/src/main/java/net/minecraft/sounds/SoundEvent.java
+++ b/src/main/java/net/minecraft/sounds/SoundEvent.java
@@ -18,6 +18,6 @@ public class SoundEvent
     }
     
     static {
-        CODEC = ResourceLocation.CODEC.xmap((Function)SoundEvent::new, debug0 -> debug0.location);
+        CODEC = ResourceLocation.CODEC.xmap(SoundEvent::new, debug0 -> debug0.location); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/stats/RecipeBook.java b/src/main/java/net/minecraft/stats/RecipeBook.java
index 464ddbc0e97e83af391cc6369c154485baa1deeb..f25681e766e0549302d1b61f9e8c26435bae372e 100644
--- a/src/main/java/net/minecraft/stats/RecipeBook.java
+++ b/src/main/java/net/minecraft/stats/RecipeBook.java
@@ -16,8 +16,8 @@ public class RecipeBook
     private final RecipeBookSettings bookSettings;
     
     public RecipeBook() {
-        this.known = (Set<ResourceLocation>)Sets.newHashSet();
-        this.highlight = (Set<ResourceLocation>)Sets.newHashSet();
+        this.known = Sets.newHashSet(); // MagmaCube - decompile fix
+        this.highlight = Sets.newHashSet(); // MagmaCube - decompile fix
         this.bookSettings = new RecipeBookSettings();
     }
     
diff --git a/src/main/java/net/minecraft/stats/RecipeBookSettings.java b/src/main/java/net/minecraft/stats/RecipeBookSettings.java
index f5a6ba0e3819f658f76746071a195e960c0b3886..8b6a7f0e7fef8e4b7d63a4dedf07306b7af218e1 100644
--- a/src/main/java/net/minecraft/stats/RecipeBookSettings.java
+++ b/src/main/java/net/minecraft/stats/RecipeBookSettings.java
@@ -20,14 +20,13 @@ public final class RecipeBookSettings
     }
     
     public RecipeBookSettings() {
-        final RecipeBookType[] array;
-        int length;
-        int i;
-        RecipeBookType debug;
-        this(Util.make((EnumMap<RecipeBookType, TypeSettings>)Maps.newEnumMap((Class)RecipeBookType.class), debug0 -> {
-            RecipeBookType.values();
-            for (length = array.length; i < length; ++i) {
-                debug = array[i];
+        // MagmaCube start - decompile fix
+        this(Util.make(Maps.newEnumMap(RecipeBookType.class), debug0 -> {
+            RecipeBookType[] array = RecipeBookType.values();
+            int i = 0;
+            for (int length = array.length; i < length; ++i) {
+                RecipeBookType debug = array[i];
+                // MagmaCube end - decompile fix
                 debug0.put(debug, new TypeSettings(false, false));
             }
         }));
@@ -75,22 +74,18 @@ public final class RecipeBookSettings
     
     public static RecipeBookSettings read(final CompoundTag debug0) {
         final Map<RecipeBookType, TypeSettings> debug4 = (Map<RecipeBookType, TypeSettings>)Maps.newEnumMap((Class)RecipeBookType.class);
-        final boolean debug5;
-        final boolean debug6;
-        final Map<RecipeBookType, TypeSettings> map;
         RecipeBookSettings.TAG_FIELDS.forEach((debug2, debug3) -> {
-            debug5 = debug0.getBoolean((String)debug3.getFirst());
-            debug6 = debug0.getBoolean((String)debug3.getSecond());
-            map.put(debug2, new TypeSettings(debug5, debug6));
+            boolean debug5 = debug0.getBoolean((String)debug3.getFirst()); // MagmaCube - decompile fix
+            boolean debug6 = debug0.getBoolean((String)debug3.getSecond()); // MagmaCube - decompile fix
+            debug4.put(debug2, new TypeSettings(debug5, debug6)); // MagmaCube - decompile fix
             return;
         });
         return new RecipeBookSettings(debug4);
     }
     
     public void write(final CompoundTag debug1) {
-        final TypeSettings debug4;
         RecipeBookSettings.TAG_FIELDS.forEach((debug2, debug3) -> {
-            debug4 = this.states.get(debug2);
+            TypeSettings debug4 = this.states.get(debug2); // MagmaCube - decompile fix
             debug1.putBoolean((String)debug3.getFirst(), debug4.open);
             debug1.putBoolean((String)debug3.getSecond(), debug4.filtering);
         });
diff --git a/src/main/java/net/minecraft/stats/ServerRecipeBook.java b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
index 5706c64502d14c7df6767bac313a00028db44807..888435e77cb2aea8cd6f6538cbd754a66a77a4c1 100644
--- a/src/main/java/net/minecraft/stats/ServerRecipeBook.java
+++ b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
@@ -28,7 +28,7 @@ public class ServerRecipeBook extends RecipeBook
     private static final Logger LOGGER;
     
     public int addRecipes(final Collection<Recipe<?>> debug1, final ServerPlayer debug2) {
-        final List<ResourceLocation> debug3 = (List<ResourceLocation>)Lists.newArrayList();
+        final List<ResourceLocation> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
         int debug4 = 0;
         for (final Recipe<?> debug5 : debug1) {
             final ResourceLocation debug6 = debug5.getId();
@@ -45,7 +45,7 @@ public class ServerRecipeBook extends RecipeBook
     }
     
     public int removeRecipes(final Collection<Recipe<?>> debug1, final ServerPlayer debug2) {
-        final List<ResourceLocation> debug3 = (List<ResourceLocation>)Lists.newArrayList();
+        final List<ResourceLocation> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
         int debug4 = 0;
         for (final Recipe<?> debug5 : debug1) {
             final ResourceLocation debug6 = debug5.getId();
@@ -60,7 +60,7 @@ public class ServerRecipeBook extends RecipeBook
     }
     
     private void sendRecipes(final ClientboundRecipePacket.State debug1, final ServerPlayer debug2, final List<ResourceLocation> debug3) {
-        debug2.connection.send(new ClientboundRecipePacket(debug1, debug3, (Collection<ResourceLocation>)Collections.emptyList(), this.getBookSettings()));
+        debug2.connection.send(new ClientboundRecipePacket(debug1, debug3, Collections.emptyList(), this.getBookSettings())); // MagmaCube - decompile fix
     }
     
     public CompoundTag toNbt() {
@@ -68,12 +68,12 @@ public class ServerRecipeBook extends RecipeBook
         this.getBookSettings().write(debug1);
         final ListTag debug2 = new ListTag();
         for (final ResourceLocation debug3 : this.known) {
-            ((AbstractList<StringTag>)debug2).add(StringTag.valueOf(debug3.toString()));
+            debug2.add(StringTag.valueOf(debug3.toString())); // MagmaCube - decompile fix
         }
         debug1.put("recipes", debug2);
         final ListTag debug4 = new ListTag();
         for (final ResourceLocation debug5 : this.highlight) {
-            ((AbstractList<StringTag>)debug4).add(StringTag.valueOf(debug5.toString()));
+            debug4.add(StringTag.valueOf(debug5.toString())); // MagmaCube - decompile fix
         }
         debug1.put("toBeDisplayed", debug4);
         return debug1;
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index 740954ad0933dc2c5a740f3cca9ceb331048751d..256e7e2c2354ec4219ae686b405226c99663ab90 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -121,12 +121,12 @@ extends StatsCounter {
                     if (!debug7.contains(debug9, 10)) continue;
                     Util.ifElse(Registry.STAT_TYPE.getOptional(new ResourceLocation(debug9)), debug32 -> {
                         CompoundTag debug4 = debug7.getCompound(debug9);
-                        for (String debug6 : debug4.getAllKeys()) {
-                            if (debug4.contains(debug6, 99)) {
-                                Util.ifElse(this.getStat((StatType)debug32, debug6), debug3 -> this.stats.put(debug3, debug4.getInt(debug6)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", (Object)this.file, (Object)debug6));
+                        for (String debug6l : debug4.getAllKeys()) { // MagmaCube - decompile fix
+                            if (debug4.contains(debug6l, 99)) { // MagmaCube - decompile fix
+                                Util.ifElse(this.getStat(debug32, debug6l), debug3l -> this.stats.put(debug3l, debug4.getInt(debug6l)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", (Object)this.file, (Object)debug6l)); // MagmaCube - decompile fix
                                 continue;
                             }
-                            LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", (Object)this.file, (Object)debug4.get(debug6), (Object)debug6);
+                            LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", (Object)this.file, (Object)debug4.get(debug6l), (Object)debug6l); // MagmaCube - decompile fix
                         }
                     }, () -> LOGGER.warn("Invalid statistic type in {}: Don't know what {} is", (Object)this.file, (Object)debug9));
                 }
@@ -157,9 +157,9 @@ extends StatsCounter {
     }
 
     protected String toJson() {
-        HashMap debug1 = Maps.newHashMap();
-        for (Object debug32 : this.stats.object2IntEntrySet()) {
-            Stat stat = (Stat)debug32.getKey();
+        HashMap<StatType<?>, JsonObject> debug1 = Maps.newHashMap(); // MagmaCube - decompile fix
+        for (Object2IntMap.Entry<Stat<?>> debug32 : this.stats.object2IntEntrySet()) { // MagmaCube - decompile fix
+            Stat stat = (Stat)debug32.getKey(); // MagmaCube - decompile fix
             debug1.computeIfAbsent(stat.getType(), debug0 -> new JsonObject()).addProperty(ServerStatsCounter.getKey(stat).toString(), (Number)debug32.getIntValue());
         }
         JsonObject debug2 = new JsonObject();
diff --git a/src/main/java/net/minecraft/stats/StatType.java b/src/main/java/net/minecraft/stats/StatType.java
index f2fbbbfba22e246db4976da7d19863bc91d1b892..1c121768024025ad66991a137b7cd4c884a2fec8 100644
--- a/src/main/java/net/minecraft/stats/StatType.java
+++ b/src/main/java/net/minecraft/stats/StatType.java
@@ -25,7 +25,7 @@ public class StatType<T> implements Iterable<Stat<T>>
     }
     
     public Stat<T> get(final T debug1, final StatFormatter debug2) {
-        return this.map.computeIfAbsent(debug1, debug2 -> new Stat((StatType<Object>)this, debug2, debug2));
+        return this.map.computeIfAbsent(debug1, debug2l -> new Stat((StatType<Object>)this, debug2l, debug2)); // MagmaCube - decompile fix
     }
     
     public Registry<T> getRegistry() {
diff --git a/src/main/java/net/minecraft/stats/StatsCounter.java b/src/main/java/net/minecraft/stats/StatsCounter.java
index 74492b222d1a4390861c1fca8ec3c49fd11e898e..7999bb6d98289201446d55d67fc422f2ccecb56e 100644
--- a/src/main/java/net/minecraft/stats/StatsCounter.java
+++ b/src/main/java/net/minecraft/stats/StatsCounter.java
@@ -19,7 +19,7 @@ public class StatsCounter
     }
     
     public void setValue(final Player debug1, final Stat<?> debug2, final int debug3) {
-        this.stats.put((Object)debug2, debug3);
+        this.stats.put(debug2, debug3); // MagmaCube - decompile fix
     }
     
     public <T> int getValue(final StatType<T> debug1, final T debug2) {
diff --git a/src/main/java/net/minecraft/tags/StaticTagHelper.java b/src/main/java/net/minecraft/tags/StaticTagHelper.java
index f19bd7f3811a61aee8ae31c936a2aa5405f72d29..043e1d083822bbef1e20570de169f263d5eb0294 100644
--- a/src/main/java/net/minecraft/tags/StaticTagHelper.java
+++ b/src/main/java/net/minecraft/tags/StaticTagHelper.java
@@ -41,7 +41,7 @@ public class StaticTagHelper<T> {
     public void resetToEmpty() {
         this.source = TagCollection.empty();
         SetTag debug1 = SetTag.empty();
-        this.wrappers.forEach(debug12 -> debug12.rebind(debug1 -> debug1));
+        this.wrappers.forEach(debug12 -> debug12.rebind(debug1l -> debug1)); // MagmaCube - decompile fix
     }
 
     public void reset(TagContainer debug12) {
diff --git a/src/main/java/net/minecraft/tags/StaticTags.java b/src/main/java/net/minecraft/tags/StaticTags.java
index a23d5316087ae40ba6d66f8df643f7474d569c4c..e3b32f9982e8c7eb6539b7ef7a85be2084ebb34e 100644
--- a/src/main/java/net/minecraft/tags/StaticTags.java
+++ b/src/main/java/net/minecraft/tags/StaticTags.java
@@ -30,8 +30,8 @@ public class StaticTags
     }
     
     public static Multimap<ResourceLocation, ResourceLocation> getAllMissingTags(final TagContainer debug0) {
-        final Multimap<ResourceLocation, ResourceLocation> debug4 = (Multimap<ResourceLocation, ResourceLocation>)HashMultimap.create();
-        StaticTags.HELPERS.forEach((debug2, debug3) -> debug4.putAll((Object)debug2, (Iterable)debug3.getMissingTags(debug0)));
+        final Multimap<ResourceLocation, ResourceLocation> debug4 = HashMultimap.create(); // MagmaCube - decompile fix
+        StaticTags.HELPERS.forEach((debug2, debug3) -> debug4.putAll(debug2, (Iterable)debug3.getMissingTags(debug0))); // MagmaCube - decompile fix
         return debug4;
     }
     
diff --git a/src/main/java/net/minecraft/tags/Tag.java b/src/main/java/net/minecraft/tags/Tag.java
index 802d8520cd3f4596d892a4fcf5228f575fb2ed0e..a3cbe96f11e8781464966bb2a1041c12b61a0516 100644
--- a/src/main/java/net/minecraft/tags/Tag.java
+++ b/src/main/java/net/minecraft/tags/Tag.java
@@ -21,8 +21,8 @@ import java.util.function.Supplier;
 
 public interface Tag<T>
 {
-    default <T> Codec<Tag<T>> codec(final Supplier<TagCollection<T>> debug0) {
-        return (Codec<Tag<T>>)ResourceLocation.CODEC.flatXmap(debug1 -> Optional.ofNullable(debug0.get().getTag(debug1)).map((Function<? super Tag<T>, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + debug1)), debug1 -> Optional.ofNullable(debug0.get().getId(debug1)).map((Function<? super ResourceLocation, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + debug1)));
+    static <T> Codec<Tag<T>> codec(final Supplier<TagCollection<T>> debug0) { // MagmaCube - decompile fix
+        return (Codec<Tag<T>>)ResourceLocation.CODEC.flatXmap(debug1 -> Optional.ofNullable(debug0.get().getTag(debug1)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + debug1)), debug1 -> Optional.ofNullable(debug0.get().getId(debug1)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + debug1))); // MagmaCube - decompile fix
     }
     
     boolean contains(final T p0);
@@ -34,7 +34,7 @@ public interface Tag<T>
         return debug2.get(debug1.nextInt(debug2.size()));
     }
     
-    default <T> Tag<T> fromSet(final Set<T> debug0) {
+    static <T> Tag<T> fromSet(final Set<T> debug0) { // MagmaCube - decompile fix
         return SetTag.create(debug0);
     }
     
@@ -63,7 +63,7 @@ public interface Tag<T>
         private final List<BuilderEntry> entries;
         
         public Builder() {
-            this.entries = (List<BuilderEntry>)Lists.newArrayList();
+            this.entries = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         public static Builder tag() {
@@ -102,19 +102,19 @@ public interface Tag<T>
         }
         
         public <T> Stream<BuilderEntry> getUnresolvedEntries(final Function<ResourceLocation, Tag<T>> debug1, final Function<ResourceLocation, T> debug2) {
-            return this.getEntries().filter(debug2 -> !debug2.getEntry().build(debug1, debug2, debug0 -> {}));
+            return this.getEntries().filter(debug2l -> !debug2l.getEntry().build(debug1, debug2, debug0 -> {})); // MagmaCube - decompile fix
         }
         
         public Builder addFromJson(final JsonObject debug1, final String debug2) {
             final JsonArray debug3 = GsonHelper.getAsJsonArray(debug1, "values");
-            final List<Entry> debug4 = (List<Entry>)Lists.newArrayList();
+            final List<Entry> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
             for (final JsonElement debug5 : debug3) {
                 debug4.add(parseEntry(debug5));
             }
             if (GsonHelper.getAsBoolean(debug1, "replace", false)) {
                 this.entries.clear();
             }
-            debug4.forEach(debug2 -> this.entries.add(new BuilderEntry(debug2, debug2)));
+            debug4.forEach(debug2l -> this.entries.add(new BuilderEntry(debug2l, debug2))); // MagmaCube - decompile fix
             return this;
         }
         
diff --git a/src/main/java/net/minecraft/tags/TagCollection.java b/src/main/java/net/minecraft/tags/TagCollection.java
index 268f77cd6c773175bb62a5d65af21d1699dec20e..a40211eb8edd687cef9b6e8a2fcd5801a8e8ec9c 100644
--- a/src/main/java/net/minecraft/tags/TagCollection.java
+++ b/src/main/java/net/minecraft/tags/TagCollection.java
@@ -43,7 +43,7 @@ public interface TagCollection<T>
     }
     
     default Collection<ResourceLocation> getMatchingTags(final T debug1) {
-        final List<ResourceLocation> debug2 = (List<ResourceLocation>)Lists.newArrayList();
+        final List<ResourceLocation> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Map.Entry<ResourceLocation, Tag<T>> debug3 : this.getAllTags().entrySet()) {
             if (debug3.getValue().contains(debug1)) {
                 debug2.add(debug3.getKey());
@@ -64,8 +64,8 @@ public interface TagCollection<T>
         }
     }
     
-    default <T> TagCollection<T> loadFromNetwork(final FriendlyByteBuf debug0, final Registry<T> debug1) {
-        final Map<ResourceLocation, Tag<T>> debug2 = (Map<ResourceLocation, Tag<T>>)Maps.newHashMap();
+    static <T> TagCollection<T> loadFromNetwork(final FriendlyByteBuf debug0, final Registry<T> debug1) { // MagmaCube - decompile fix
+        final Map<ResourceLocation, Tag<T>> debug2 = Maps.newHashMap(); // MagmaCube - decompile fix
         for (int debug3 = debug0.readVarInt(), debug4 = 0; debug4 < debug3; ++debug4) {
             final ResourceLocation debug5 = debug0.readResourceLocation();
             final int debug6 = debug0.readVarInt();
@@ -78,18 +78,18 @@ public interface TagCollection<T>
         return of(debug2);
     }
     
-    default <T> TagCollection<T> empty() {
-        return of((Map<ResourceLocation, Tag<T>>)ImmutableBiMap.of());
+    static <T> TagCollection<T> empty() { // MagmaCube - decompile fix
+        return of(ImmutableBiMap.of()); // MagmaCube - decompile fix
     }
     
-    default <T> TagCollection<T> of(final Map<ResourceLocation, Tag<T>> debug0) {
+    static <T> TagCollection<T> of(final Map<ResourceLocation, Tag<T>> debug0) { // MagmaCube - decompile fix
         final BiMap<ResourceLocation, Tag<T>> debug = (BiMap<ResourceLocation, Tag<T>>)ImmutableBiMap.copyOf((Map)debug0);
         return new TagCollection<T>() {
             private final Tag<T> empty = SetTag.empty();
             
             @Override
             public Tag<T> getTagOrEmpty(final ResourceLocation debug1) {
-                return (Tag<T>)debug.getOrDefault((Object)debug1, (Object)this.empty);
+                return (Tag<T>)debug.getOrDefault((Object)debug1, this.empty); // MagmaCube - decompile fix
             }
             
             @Nullable
diff --git a/src/main/java/net/minecraft/tags/TagContainer.java b/src/main/java/net/minecraft/tags/TagContainer.java
index 34f52e67f908b725702ff079c701f5fc87d5bb2a..65dabf9b37cb19d5dca9dee3497d9e878ee83581 100644
--- a/src/main/java/net/minecraft/tags/TagContainer.java
+++ b/src/main/java/net/minecraft/tags/TagContainer.java
@@ -32,7 +32,7 @@ public interface TagContainer
         this.getEntityTypes().serializeToNetwork(debug1, Registry.ENTITY_TYPE);
     }
     
-    default TagContainer deserializeFromNetwork(final FriendlyByteBuf debug0) {
+    static TagContainer deserializeFromNetwork(final FriendlyByteBuf debug0) { // MagmaCube - decompile fix
         final TagCollection<Block> debug = TagCollection.loadFromNetwork(debug0, Registry.BLOCK);
         final TagCollection<Item> debug2 = TagCollection.loadFromNetwork(debug0, Registry.ITEM);
         final TagCollection<Fluid> debug3 = TagCollection.loadFromNetwork(debug0, Registry.FLUID);
@@ -40,7 +40,7 @@ public interface TagContainer
         return of(debug, debug2, debug3, debug4);
     }
     
-    default TagContainer of(final TagCollection<Block> debug0, final TagCollection<Item> debug1, final TagCollection<Fluid> debug2, final TagCollection<EntityType<?>> debug3) {
+    static TagContainer of(final TagCollection<Block> debug0, final TagCollection<Item> debug1, final TagCollection<Fluid> debug2, final TagCollection<EntityType<?>> debug3) { // MagmaCube - decompile fix
         return new TagContainer() {
             @Override
             public TagCollection<Block> getBlocks() {
diff --git a/src/main/java/net/minecraft/tags/TagLoader.java b/src/main/java/net/minecraft/tags/TagLoader.java
index 39869729f7939c6269afd4e0b6fc1e47d527a299..b5e26af58c30e119eb544c18902659e70e2014fa 100644
--- a/src/main/java/net/minecraft/tags/TagLoader.java
+++ b/src/main/java/net/minecraft/tags/TagLoader.java
@@ -56,7 +56,7 @@ public class TagLoader<T> {
 
     public CompletableFuture<Map<ResourceLocation, Tag.Builder>> prepare(ResourceManager debug1, Executor debug2) {
         return CompletableFuture.supplyAsync(() -> {
-            HashMap debug2 = Maps.newHashMap();
+            HashMap<ResourceLocation, Tag.Builder> debug2l = Maps.newHashMap(); // MagmaCube - decompile fix
             for (ResourceLocation debug4 : debug1.listResources(this.directory, debug0 -> debug0.endsWith(".json"))) {
                 String debug5 = debug4.getPath();
                 ResourceLocation debug6 = new ResourceLocation(debug4.getNamespace(), debug5.substring(this.directory.length() + 1, debug5.length() - PATH_SUFFIX_LENGTH));
@@ -74,7 +74,7 @@ public class TagLoader<T> {
                                         LOGGER.error("Couldn't load {} tag list {} from {} in data pack {} as it is empty or null", (Object)this.name, (Object)debug6, (Object)debug4, (Object)debug8.getSourceName());
                                         continue;
                                     }
-                                    debug2.computeIfAbsent(debug6, debug0 -> Tag.Builder.tag()).addFromJson(debug13, debug8.getSourceName());
+                                    debug2l.computeIfAbsent(debug6, debug0 -> Tag.Builder.tag()).addFromJson(debug13, debug8.getSourceName()); // MagmaCube - decompile fix
                                 }
                                 catch (Throwable throwable3) {
                                     throwable2 = throwable3;
@@ -124,7 +124,7 @@ public class TagLoader<T> {
                     LOGGER.error("Couldn't read {} tag list {} from {}", (Object)this.name, (Object)debug6, (Object)debug4, (Object)debug7);
                 }
             }
-            return debug2;
+            return debug2l; // MagmaCube - decompile fix
         }, debug2);
     }
 
diff --git a/src/main/java/net/minecraft/tags/TagManager.java b/src/main/java/net/minecraft/tags/TagManager.java
index 3fd2df240bd9cdbc7488fa13c2aa3103e085813b..3a8c72b42515a5a3dfe77fc6cc7b283ef9fceb07 100644
--- a/src/main/java/net/minecraft/tags/TagManager.java
+++ b/src/main/java/net/minecraft/tags/TagManager.java
@@ -29,10 +29,10 @@ import net.minecraft.world.level.material.Fluid;
 
 public class TagManager
 implements PreparableReloadListener {
-    private final TagLoader<Block> blocks = new TagLoader(Registry.BLOCK::getOptional, "tags/blocks", "block");
-    private final TagLoader<Item> items = new TagLoader(Registry.ITEM::getOptional, "tags/items", "item");
-    private final TagLoader<Fluid> fluids = new TagLoader(Registry.FLUID::getOptional, "tags/fluids", "fluid");
-    private final TagLoader<EntityType<?>> entityTypes = new TagLoader(Registry.ENTITY_TYPE::getOptional, "tags/entity_types", "entity_type");
+    private final TagLoader<Block> blocks = new TagLoader<>(Registry.BLOCK::getOptional, "tags/blocks", "block"); // MagmaCube - decompile fix
+    private final TagLoader<Item> items = new TagLoader<>(Registry.ITEM::getOptional, "tags/items", "item"); // MagmaCube - decompile fix
+    private final TagLoader<Fluid> fluids = new TagLoader<>(Registry.FLUID::getOptional, "tags/fluids", "fluid"); // MagmaCube - decompile fix
+    private final TagLoader<EntityType<?>> entityTypes = new TagLoader<>(Registry.ENTITY_TYPE::getOptional, "tags/entity_types", "entity_type"); // MagmaCube - decompile fix
     private TagContainer tags = TagContainer.EMPTY;
 
     public TagContainer getTags() {
@@ -46,17 +46,19 @@ implements PreparableReloadListener {
         CompletableFuture<Map<ResourceLocation, Tag.Builder>> debug9 = this.fluids.prepare(debug2, debug52);
         CompletableFuture<Map<ResourceLocation, Tag.Builder>> debug10 = this.entityTypes.prepare(debug2, debug52);
         return ((CompletableFuture)CompletableFuture.allOf(debug7, debug8, debug9, debug10).thenCompose(debug1::wait)).thenAcceptAsync(debug5 -> {
-            TagCollection<EntityType<?>> debug9;
-            TagCollection<Fluid> debug8;
-            TagCollection<Item> debug7;
-            TagCollection<Block> debug6 = this.blocks.load((Map)debug7.join());
-            TagContainer debug10 = TagContainer.of(debug6, debug7 = this.items.load((Map)debug8.join()), debug8 = this.fluids.load((Map)debug9.join()), debug9 = this.entityTypes.load((Map)debug10.join()));
-            Multimap<ResourceLocation, ResourceLocation> debug11 = StaticTags.getAllMissingTags(debug10);
+            // MagmaCube start - decompile fix
+            TagCollection<EntityType<?>> debug9l;
+            TagCollection<Fluid> debug8l;
+            TagCollection<Item> debug7l;
+            TagCollection<Block> debug6l = this.blocks.load((Map)debug7.join());
+            TagContainer debug10l = TagContainer.of(debug6l, debug7l = this.items.load((Map)debug8.join()), debug8l = this.fluids.load((Map)debug9.join()), debug9l = this.entityTypes.load((Map)debug10.join()));
+            Multimap<ResourceLocation, ResourceLocation> debug11 = StaticTags.getAllMissingTags(debug10l);
             if (!debug11.isEmpty()) {
                 throw new IllegalStateException("Missing required tags: " + debug11.entries().stream().map(debug0 -> debug0.getKey() + ":" + debug0.getValue()).sorted().collect(Collectors.joining(",")));
             }
-            SerializationTags.bind(debug10);
-            this.tags = debug10;
+            SerializationTags.bind(debug10l);
+            this.tags = debug10l;
+            // MagmaCube end - decompile fix
         }, debug6);
     }
 }
diff --git a/src/main/java/net/minecraft/util/BitStorage.java b/src/main/java/net/minecraft/util/BitStorage.java
index 73097f5ca197edc2167b19b9e59476b98ba545ae..06d0e4e480577d98429a2dab98519d1ed41c55ee 100644
--- a/src/main/java/net/minecraft/util/BitStorage.java
+++ b/src/main/java/net/minecraft/util/BitStorage.java
@@ -56,7 +56,7 @@ public class BitStorage
         final long debug4 = this.data[debug3];
         final int debug5 = (debug1 - debug3 * this.valuesPerLong) * this.bits;
         final int debug6 = (int)(debug4 >> debug5 & this.mask);
-        this.data[debug3] = ((debug4 & â¾(this.mask << debug5)) | (debug2 & this.mask) << debug5);
+        this.data[debug3] = ((debug4 & (this.mask << debug5)) | (debug2 & this.mask) << debug5);
         return debug6;
     }
     
@@ -66,7 +66,7 @@ public class BitStorage
         final int debug3 = this.cellIndex(debug1);
         final long debug4 = this.data[debug3];
         final int debug5 = (debug1 - debug3 * this.valuesPerLong) * this.bits;
-        this.data[debug3] = ((debug4 & â¾(this.mask << debug5)) | (debug2 & this.mask) << debug5);
+        this.data[debug3] = ((debug4 & (this.mask << debug5)) | (debug2 & this.mask) << debug5);
     }
     
     public int get(final int debug1) {
diff --git a/src/main/java/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java b/src/main/java/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
index 893b48ce80c8adbb4f7e962d96c50022540fb209..b73d9c963f1ba6e56ca6c40fc3626fca8ba31066 100644
--- a/src/main/java/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
+++ b/src/main/java/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
@@ -18,9 +18,9 @@ public class CrudeIncrementalIntIdentityHashBiMap<K> implements IdMap<K>
     
     public CrudeIncrementalIntIdentityHashBiMap(int debug1) {
         debug1 /= (int)0.8f;
-        this.keys = new Object[debug1];
+        this.keys = (K[]) new Object[debug1]; // MagmaCube - decompile fix
         this.values = new int[debug1];
-        this.byId = new Object[debug1];
+        this.byId = (K[]) new Object[debug1]; // MagmaCube - decompile fix
     }
     
     @Override
@@ -60,9 +60,9 @@ public class CrudeIncrementalIntIdentityHashBiMap<K> implements IdMap<K>
     private void grow(final int debug1) {
         final K[] debug2 = (K[])this.keys;
         final int[] debug3 = this.values;
-        this.keys = new Object[debug1];
+        this.keys = (K[]) new Object[debug1]; // MagmaCube - decompile fix
         this.values = new int[debug1];
-        this.byId = new Object[debug1];
+        this.byId = (K[]) new Object[debug1]; // MagmaCube - decompile fix
         this.nextId = 0;
         this.size = 0;
         for (int debug4 = 0; debug4 < debug2.length; ++debug4) {
diff --git a/src/main/java/net/minecraft/util/ExceptionCollector.java b/src/main/java/net/minecraft/util/ExceptionCollector.java
index 325cab632830b1371b636c222e878243e3c9f782..acabcc4ac992d82ff88d5ec4d64e08a97176f8d4 100644
--- a/src/main/java/net/minecraft/util/ExceptionCollector.java
+++ b/src/main/java/net/minecraft/util/ExceptionCollector.java
@@ -16,7 +16,7 @@ public class ExceptionCollector<T extends Throwable>
         }
     }
     
-    public void throwIfPresent() throws T, Throwable {
+    public void throwIfPresent() throws T { // MagmaCube - decompile fix
         if (this.result != null) {
             throw this.result;
         }
diff --git a/src/main/java/net/minecraft/util/FormattedCharSequence.java b/src/main/java/net/minecraft/util/FormattedCharSequence.java
index 28ca146e78204990d6033c8f36c6cdfd5f0b68a0..6ae29b6dacd125e61c186c7cc5ea52d2cbb5b2d4 100644
--- a/src/main/java/net/minecraft/util/FormattedCharSequence.java
+++ b/src/main/java/net/minecraft/util/FormattedCharSequence.java
@@ -14,33 +14,33 @@ public interface FormattedCharSequence
     
     boolean accept(final FormattedCharSink p0);
     
-    default FormattedCharSequence codepoint(final int debug0, final Style debug1) {
+    static FormattedCharSequence codepoint(final int debug0, final Style debug1) { // MagmaCube - decompile fix
         return debug2 -> debug2.accept(0, debug1, debug0);
     }
     
-    default FormattedCharSequence forward(final String debug0, final Style debug1) {
+    static FormattedCharSequence forward(final String debug0, final Style debug1) { // MagmaCube - decompile fix
         if (debug0.isEmpty()) {
             return FormattedCharSequence.EMPTY;
         }
         return debug2 -> StringDecomposer.iterate(debug0, debug1, debug2);
     }
     
-    default FormattedCharSequence backward(final String debug0, final Style debug1, final Int2IntFunction debug2) {
+    static FormattedCharSequence backward(final String debug0, final Style debug1, final Int2IntFunction debug2) { // MagmaCube - decompile fix
         if (debug0.isEmpty()) {
             return FormattedCharSequence.EMPTY;
         }
         return debug3 -> StringDecomposer.iterateBackwards(debug0, debug1, decorateOutput(debug3, debug2));
     }
     
-    default FormattedCharSink decorateOutput(final FormattedCharSink debug0, final Int2IntFunction debug1) {
-        return (debug2, debug3, debug4) -> debug0.accept(debug2, debug3, (int)debug1.apply((Object)debug4));
+    static FormattedCharSink decorateOutput(final FormattedCharSink debug0, final Int2IntFunction debug1) { // MagmaCube - decompile fix
+        return (debug2, debug3, debug4) -> debug0.accept(debug2, debug3, (int)debug1.apply(debug4)); // MagmaCube - decompile fix
     }
     
-    default FormattedCharSequence composite(final FormattedCharSequence debug0, final FormattedCharSequence debug1) {
+    static FormattedCharSequence composite(final FormattedCharSequence debug0, final FormattedCharSequence debug1) { // MagmaCube - decompile fix
         return fromPair(debug0, debug1);
     }
     
-    default FormattedCharSequence composite(final List<FormattedCharSequence> debug0) {
+    static FormattedCharSequence composite(final List<FormattedCharSequence> debug0) { // MagmaCube - decompile fix
         final int debug = debug0.size();
         switch (debug) {
             case 0: {
@@ -58,17 +58,13 @@ public interface FormattedCharSequence
         }
     }
     
-    default FormattedCharSequence fromPair(final FormattedCharSequence debug0, final FormattedCharSequence debug1) {
+    static FormattedCharSequence fromPair(final FormattedCharSequence debug0, final FormattedCharSequence debug1) { // MagmaCube - decompile fix
         return debug2 -> debug0.accept(debug2) && debug1.accept(debug2);
     }
     
-    default FormattedCharSequence fromList(final List<FormattedCharSequence> debug0) {
-        final Iterator<FormattedCharSequence> iterator;
-        FormattedCharSequence debug2;
+    static FormattedCharSequence fromList(final List<FormattedCharSequence> debug0) { // MagmaCube - decompile fix
         return debug1 -> {
-            debug0.iterator();
-            while (iterator.hasNext()) {
-                debug2 = iterator.next();
+            for (FormattedCharSequence debug2 : debug0) { // MagmaCube - decompile fix
                 if (!debug2.accept(debug1)) {
                     return false;
                 }
diff --git a/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java b/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
index 986d72c1f9537519ed43e0f55d92c246df173d86..0ab715f759d4e4b6d07ef4655c9ac916f8c8fbd2 100644
--- a/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
+++ b/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
@@ -21,7 +21,7 @@ public class LowerCaseEnumTypeAdapterFactory implements TypeAdapterFactory
         if (!debug3.isEnum()) {
             return null;
         }
-        final Map<String, T> debug4 = (Map<String, T>)Maps.newHashMap();
+        final Map<String, T> debug4 = Maps.newHashMap(); // MagmaCube - decompile fix
         for (final T debug5 : debug3.getEnumConstants()) {
             debug4.put(this.toLowercase(debug5), debug5);
         }
diff --git a/src/main/java/net/minecraft/util/SortedArraySet.java b/src/main/java/net/minecraft/util/SortedArraySet.java
index 8c809fb384fc0cefafbecf581e9f6e591feafb19..fe9bdc978d6df40f28f4b497a6fd1209d5218455 100644
--- a/src/main/java/net/minecraft/util/SortedArraySet.java
+++ b/src/main/java/net/minecraft/util/SortedArraySet.java
@@ -95,7 +95,7 @@ public class SortedArraySet<T> extends AbstractSet<T>
     
     @Override
     public boolean remove(final Object debug1) {
-        final int debug2 = this.findIndex(debug1);
+        final int debug2 = this.findIndex((T) debug1); // MagmaCube - decompile fix
         if (debug2 >= 0) {
             this.removeInternal(debug2);
             return true;
@@ -109,7 +109,7 @@ public class SortedArraySet<T> extends AbstractSet<T>
     
     @Override
     public boolean contains(final Object debug1) {
-        final int debug2 = this.findIndex(debug1);
+        final int debug2 = this.findIndex((T) debug1); // MagmaCube - decompile fix
         return debug2 >= 0;
     }
     
diff --git a/src/main/java/net/minecraft/util/StringRepresentable.java b/src/main/java/net/minecraft/util/StringRepresentable.java
index aea3fff0d24ba4f01d724482fb4375799d075a75..ef284062ef1f02303d883fd2d82d3a182e5ce06d 100644
--- a/src/main/java/net/minecraft/util/StringRepresentable.java
+++ b/src/main/java/net/minecraft/util/StringRepresentable.java
@@ -18,25 +18,25 @@ public interface StringRepresentable
 {
     String getSerializedName();
     
-    default <E extends Enum> Codec<E> fromEnum(final Supplier<E[]> debug0, final Function<? super String, ? extends E> debug1) {
+    static <E extends Enum<E> & StringRepresentable> Codec<E> fromEnum(final Supplier<E[]> debug0, final Function<? super String, ? extends E> debug1) { // MagmaCube - decompile fix
         final E[] debug2 = debug0.get();
-        return fromStringResolver(java.lang.Enum::ordinal, debug1 -> debug2[debug1], debug1);
+        return fromStringResolver(java.lang.Enum::ordinal, debug1l -> debug2[debug1l], debug1); // MagmaCube - decompile fix
     }
     
-    default <E extends StringRepresentable> Codec<E> fromStringResolver(final ToIntFunction<E> debug0, final IntFunction<E> debug1, final Function<? super String, ? extends E> debug2) {
+    static <E extends StringRepresentable> Codec<E> fromStringResolver(final ToIntFunction<E> debug0, final IntFunction<E> f, final Function<? super String, ? extends E> f2) { // MagmaCube - decompile fix
         return (Codec<E>)new Codec<E>() {
             public <T> DataResult<T> encode(final E debug1, final DynamicOps<T> debug2, final T debug3) {
                 if (debug2.compressMaps()) {
-                    return (DataResult<T>)debug2.mergeToPrimitive((Object)debug3, debug2.createInt(debug0.applyAsInt(debug1)));
+                    return (DataResult<T>)debug2.mergeToPrimitive(debug3, debug2.createInt(debug0.applyAsInt(debug1))); // MagmaCube - decompile fix
                 }
-                return (DataResult<T>)debug2.mergeToPrimitive((Object)debug3, debug2.createString(debug1.getSerializedName()));
+                return (DataResult<T>)debug2.mergeToPrimitive(debug3, debug2.createString(debug1.getSerializedName())); // MagmaCube - decompile fix
             }
             
             public <T> DataResult<Pair<E, T>> decode(final DynamicOps<T> debug1, final T debug2) {
                 if (debug1.compressMaps()) {
-                    return (DataResult<Pair<E, T>>)debug1.getNumberValue((Object)debug2).flatMap(debug1 -> Optional.ofNullable(debug1.apply(debug1.intValue())).map((Function<? super Object, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unknown element id: " + debug1))).map(debug1 -> Pair.of((Object)debug1, debug1.empty()));
+                    return debug1.getNumberValue(debug2).flatMap(debug1l -> Optional.ofNullable(f.apply(debug1l.intValue())).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element id: " + debug1))).map(debug1l -> Pair.of(debug1l, debug1.empty())); // MagmaCube - decompile fix
                 }
-                return (DataResult<Pair<E, T>>)debug1.getStringValue((Object)debug2).flatMap(debug1 -> Optional.ofNullable(debug2.apply(debug1)).map((Function<? super Object, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unknown element name: " + debug1))).map(debug1 -> Pair.of((Object)debug1, debug1.empty()));
+                return debug1.getStringValue(debug2).flatMap(debug1l -> Optional.ofNullable(f2.apply(debug1l)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element name: " + debug1))).map(debug1l -> Pair.of(debug1l, debug1.empty())); // MagmaCube - decompile fix
             }
             
             @Override
@@ -46,13 +46,13 @@ public interface StringRepresentable
         };
     }
     
-    default Keyable keys(final StringRepresentable[] debug0) {
+    static Keyable keys(final StringRepresentable[] debug0) { // MagmaCube - decompile fix
         return (Keyable)new Keyable() {
             public <T> Stream<T> keys(final DynamicOps<T> debug1) {
                 if (debug1.compressMaps()) {
                     return IntStream.range(0, debug0.length).mapToObj((IntFunction<? extends T>)debug1::createInt);
                 }
-                return Arrays.stream(debug0).map((Function<? super StringRepresentable, ?>)StringRepresentable::getSerializedName).map((Function<? super Object, ? extends T>)debug1::createString);
+                return Arrays.stream(debug0).map(StringRepresentable::getSerializedName).map(debug1::createString); // MagmaCube - decompile fix
             }
         };
     }
diff --git a/src/main/java/net/minecraft/util/UniformInt.java b/src/main/java/net/minecraft/util/UniformInt.java
index a19e991d7e91cf6b7a2221c610c287b08ac6fbc6..608b7f8e03882b541577f2aa73e5dee686e2a702 100644
--- a/src/main/java/net/minecraft/util/UniformInt.java
+++ b/src/main/java/net/minecraft/util/UniformInt.java
@@ -21,7 +21,7 @@ public class UniformInt
         final Function<UniformInt, DataResult<UniformInt>> debug4 = (Function<UniformInt, DataResult<UniformInt>>)(debug3 -> {
             if (debug3.baseValue >= debug0 && debug3.baseValue <= debug1) {
                 if (debug3.spread <= debug2) {
-                    return DataResult.success((Object)debug3);
+                    return DataResult.success(debug3); // MagmaCube - decompile fix
                 }
                 else {
                     return DataResult.error("Spread too big: " + debug3.spread + " > " + debug2);
@@ -31,7 +31,7 @@ public class UniformInt
                 return DataResult.error("Base value out of range: " + debug3.baseValue + " [" + debug0 + "-" + debug1 + "]");
             }
         });
-        return (Codec<UniformInt>)UniformInt.CODEC.flatXmap((Function)debug4, (Function)debug4);
+        return (Codec<UniformInt>)UniformInt.CODEC.flatXmap(debug4, debug4); // MagmaCube - decompile fix
     }
     
     private UniformInt(final int debug1, final int debug2) {
@@ -77,13 +77,13 @@ public class UniformInt
     }
     
     static {
-        CODEC = Codec.either((Codec)Codec.INT, RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.INT.fieldOf("base").forGetter(debug0 -> debug0.baseValue), (App)Codec.INT.fieldOf("spread").forGetter(debug0 -> debug0.spread)).apply(debug0, (BiFunction)UniformInt::new)).comapFlatMap(debug0 -> {
+        CODEC = Codec.either(Codec.INT, RecordCodecBuilder.<UniformInt>create(debug0 -> debug0.group(Codec.INT.fieldOf("base").forGetter(debug0l -> debug0l.baseValue), Codec.INT.fieldOf("spread").forGetter(debug0l -> debug0l.spread)).apply(debug0, UniformInt::new)).comapFlatMap(debug0 -> { // MagmaCube - decompile fix
             if (debug0.spread < 0) {
                 return DataResult.error("Spread must be non-negative, got: " + debug0.spread);
             }
             else {
-                return DataResult.success((Object)debug0);
+                return DataResult.success(debug0); // MagmaCube - decompile fix
             }
-        }, (Function)Function.identity())).xmap(debug0 -> (UniformInt)debug0.map((Function)UniformInt::fixed, debug0 -> debug0), debug0 -> (debug0.spread == 0) ? Either.left((Object)debug0.baseValue) : Either.right((Object)debug0));
+        }, Function.identity())).xmap(debug0 -> debug0.map(UniformInt::fixed, debug0l -> debug0l), debug0 -> (debug0.spread == 0) ? Either.left(debug0.baseValue) : Either.right(debug0)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/DataFixers.java b/src/main/java/net/minecraft/util/datafix/DataFixers.java
index f9e02f7806b524522dcb43847ce78186f39933ef..ce4c9c14ba37db44c7d12a597da4e7ccf9079063 100644
--- a/src/main/java/net/minecraft/util/datafix/DataFixers.java
+++ b/src/main/java/net/minecraft/util/datafix/DataFixers.java
@@ -343,7 +343,7 @@ public class DataFixers {
         debug02.addFixer(BlockRenameFix.create(debug52, "Colorless shulker block fixer", debug0 -> Objects.equals(NamespacedSchema.ensureNamespaced(debug0), "minecraft:purple_shulker_box") ? "minecraft:shulker_box" : debug0));
         debug02.addFixer(ItemRenameFix.create(debug52, "Colorless shulker item fixer", debug0 -> Objects.equals(NamespacedSchema.ensureNamespaced(debug0), "minecraft:purple_shulker_box") ? "minecraft:shulker_box" : debug0));
         Schema debug53 = debug02.addSchema(1475, SAME_NAMESPACED);
-        debug02.addFixer(BlockRenameFix.create(debug53, "Flowing fixer", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of((Object)"minecraft:flowing_water", (Object)"minecraft:water", (Object)"minecraft:flowing_lava", (Object)"minecraft:lava"))));
+        debug02.addFixer(BlockRenameFix.create(debug53, "Flowing fixer", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of("minecraft:flowing_water", "minecraft:water", "minecraft:flowing_lava", "minecraft:lava")))); // MagmaCube - decompile fix
         Schema debug54 = debug02.addSchema(1480, SAME_NAMESPACED);
         debug02.addFixer(BlockRenameFix.create(debug54, "Rename coral blocks", DataFixers.createRenamer(RenamedCoralFix.RENAMED_IDS)));
         debug02.addFixer(ItemRenameFix.create(debug54, "Rename coral items", DataFixers.createRenamer(RenamedCoralFix.RENAMED_IDS)));
@@ -353,17 +353,17 @@ public class DataFixers {
         debug02.addFixer((DataFix)new EntityPufferfishRenameFix(debug56, true));
         debug02.addFixer(ItemRenameFix.create(debug56, "Rename pufferfish egg item", DataFixers.createRenamer(EntityPufferfishRenameFix.RENAMED_IDS)));
         Schema debug57 = debug02.addSchema(1484, SAME_NAMESPACED);
-        debug02.addFixer(ItemRenameFix.create(debug57, "Rename seagrass items", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of((Object)"minecraft:sea_grass", (Object)"minecraft:seagrass", (Object)"minecraft:tall_sea_grass", (Object)"minecraft:tall_seagrass"))));
-        debug02.addFixer(BlockRenameFix.create(debug57, "Rename seagrass blocks", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of((Object)"minecraft:sea_grass", (Object)"minecraft:seagrass", (Object)"minecraft:tall_sea_grass", (Object)"minecraft:tall_seagrass"))));
+        debug02.addFixer(ItemRenameFix.create(debug57, "Rename seagrass items", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of("minecraft:sea_grass", "minecraft:seagrass", "minecraft:tall_sea_grass", "minecraft:tall_seagrass")))); // MagmaCube - decompile fix
+        debug02.addFixer(BlockRenameFix.create(debug57, "Rename seagrass blocks", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of("minecraft:sea_grass", "minecraft:seagrass", "minecraft:tall_sea_grass", "minecraft:tall_seagrass")))); // MagmaCube - decompile fix
         debug02.addFixer((DataFix)new HeightmapRenamingFix(debug57, false));
         Schema debug58 = debug02.addSchema(1486, V1486::new);
         debug02.addFixer((DataFix)new EntityCodSalmonFix(debug58, true));
         debug02.addFixer(ItemRenameFix.create(debug58, "Rename cod/salmon egg items", DataFixers.createRenamer(EntityCodSalmonFix.RENAMED_EGG_IDS)));
         Schema debug59 = debug02.addSchema(1487, SAME_NAMESPACED);
-        debug02.addFixer(ItemRenameFix.create(debug59, "Rename prismarine_brick(s)_* blocks", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of((Object)"minecraft:prismarine_bricks_slab", (Object)"minecraft:prismarine_brick_slab", (Object)"minecraft:prismarine_bricks_stairs", (Object)"minecraft:prismarine_brick_stairs"))));
-        debug02.addFixer(BlockRenameFix.create(debug59, "Rename prismarine_brick(s)_* items", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of((Object)"minecraft:prismarine_bricks_slab", (Object)"minecraft:prismarine_brick_slab", (Object)"minecraft:prismarine_bricks_stairs", (Object)"minecraft:prismarine_brick_stairs"))));
+        debug02.addFixer(ItemRenameFix.create(debug59, "Rename prismarine_brick(s)_* blocks", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of("minecraft:prismarine_bricks_slab", "minecraft:prismarine_brick_slab", "minecraft:prismarine_bricks_stairs", "minecraft:prismarine_brick_stairs")))); // MagmaCube - decompile fix
+        debug02.addFixer(BlockRenameFix.create(debug59, "Rename prismarine_brick(s)_* items", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of("minecraft:prismarine_bricks_slab", "minecraft:prismarine_brick_slab", "minecraft:prismarine_bricks_stairs", "minecraft:prismarine_brick_stairs")))); // MagmaCube - decompile fix
         Schema debug60 = debug02.addSchema(1488, SAME_NAMESPACED);
-        debug02.addFixer(BlockRenameFix.create(debug60, "Rename kelp/kelptop", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of((Object)"minecraft:kelp_top", (Object)"minecraft:kelp", (Object)"minecraft:kelp", (Object)"minecraft:kelp_plant"))));
+        debug02.addFixer(BlockRenameFix.create(debug60, "Rename kelp/kelptop", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of("minecraft:kelp_top", "minecraft:kelp", "minecraft:kelp", "minecraft:kelp_plant")))); // MagmaCube - decompile fix
         debug02.addFixer(ItemRenameFix.create(debug60, "Rename kelptop", DataFixers.createRenamer("minecraft:kelp_top", "minecraft:kelp")));
         debug02.addFixer((DataFix)new NamedEntityFix(debug60, false, "Command block block entity custom name fix", References.BLOCK_ENTITY, "minecraft:command_block"){
 
@@ -382,7 +382,7 @@ public class DataFixers {
         debug02.addFixer((DataFix)new IglooMetadataRemovalFix(debug60, false));
         Schema debug61 = debug02.addSchema(1490, SAME_NAMESPACED);
         debug02.addFixer(BlockRenameFix.create(debug61, "Rename melon_block", DataFixers.createRenamer("minecraft:melon_block", "minecraft:melon")));
-        debug02.addFixer(ItemRenameFix.create(debug61, "Rename melon_block/melon/speckled_melon", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of((Object)"minecraft:melon_block", (Object)"minecraft:melon", (Object)"minecraft:melon", (Object)"minecraft:melon_slice", (Object)"minecraft:speckled_melon", (Object)"minecraft:glistering_melon_slice"))));
+        debug02.addFixer(ItemRenameFix.create(debug61, "Rename melon_block/melon/speckled_melon", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of("minecraft:melon_block", "minecraft:melon", "minecraft:melon", "minecraft:melon_slice", "minecraft:speckled_melon", "minecraft:glistering_melon_slice")))); // MagmaCube - decompile fix
         Schema debug62 = debug02.addSchema(1492, SAME_NAMESPACED);
         debug02.addFixer((DataFix)new ChunkStructuresTemplateRenameFix(debug62, false));
         Schema debug63 = debug02.addSchema(1494, SAME_NAMESPACED);
@@ -417,8 +417,8 @@ public class DataFixers {
         Schema debug74 = debug02.addSchema(1801, V1801::new);
         debug02.addFixer((DataFix)new AddNewChoices(debug74, "Added Illager Beast", References.ENTITY));
         Schema debug75 = debug02.addSchema(1802, SAME_NAMESPACED);
-        debug02.addFixer(BlockRenameFix.create(debug75, "Rename sign blocks & stone slabs", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of((Object)"minecraft:stone_slab", (Object)"minecraft:smooth_stone_slab", (Object)"minecraft:sign", (Object)"minecraft:oak_sign", (Object)"minecraft:wall_sign", (Object)"minecraft:oak_wall_sign"))));
-        debug02.addFixer(ItemRenameFix.create(debug75, "Rename sign item & stone slabs", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of((Object)"minecraft:stone_slab", (Object)"minecraft:smooth_stone_slab", (Object)"minecraft:sign", (Object)"minecraft:oak_sign"))));
+        debug02.addFixer(BlockRenameFix.create(debug75, "Rename sign blocks & stone slabs", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of("minecraft:stone_slab", "minecraft:smooth_stone_slab", "minecraft:sign", "minecraft:oak_sign", "minecraft:wall_sign", "minecraft:oak_wall_sign")))); // MagmaCube - decompile fix
+        debug02.addFixer(ItemRenameFix.create(debug75, "Rename sign item & stone slabs", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of("minecraft:stone_slab", "minecraft:smooth_stone_slab", "minecraft:sign", "minecraft:oak_sign")))); // MagmaCube - decompile fix
         Schema debug76 = debug02.addSchema(1803, SAME_NAMESPACED);
         debug02.addFixer((DataFix)new ItemLoreFix(debug76, false));
         Schema debug77 = debug02.addSchema(1904, V1904::new);
@@ -490,8 +490,8 @@ public class DataFixers {
         debug02.addFixer((DataFix)new AddNewChoices(debug104, "Added Piglin", References.ENTITY));
         debug02.addFixer((DataFix)new MemoryExpiryDataFix(debug104, "minecraft:villager"));
         Schema debug105 = debug02.addSchema(2508, SAME_NAMESPACED);
-        debug02.addFixer(ItemRenameFix.create(debug105, "Renamed fungi items to fungus", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of((Object)"minecraft:warped_fungi", (Object)"minecraft:warped_fungus", (Object)"minecraft:crimson_fungi", (Object)"minecraft:crimson_fungus"))));
-        debug02.addFixer(BlockRenameFix.create(debug105, "Renamed fungi blocks to fungus", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of((Object)"minecraft:warped_fungi", (Object)"minecraft:warped_fungus", (Object)"minecraft:crimson_fungi", (Object)"minecraft:crimson_fungus"))));
+        debug02.addFixer(ItemRenameFix.create(debug105, "Renamed fungi items to fungus", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of("minecraft:warped_fungi", "minecraft:warped_fungus", "minecraft:crimson_fungi", "minecraft:crimson_fungus")))); // MagmaCube - decompile fix
+        debug02.addFixer(BlockRenameFix.create(debug105, "Renamed fungi blocks to fungus", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of("minecraft:warped_fungi", "minecraft:warped_fungus", "minecraft:crimson_fungi", "minecraft:crimson_fungus")))); // MagmaCube - decompile fix
         Schema debug106 = debug02.addSchema(2509, V2509::new);
         debug02.addFixer((DataFix)new EntityZombifiedPiglinRenameFix(debug106));
         debug02.addFixer(ItemRenameFix.create(debug106, "Rename zombie pigman egg item", DataFixers.createRenamer(EntityZombifiedPiglinRenameFix.RENAMED_IDS)));
@@ -519,8 +519,8 @@ public class DataFixers {
         Schema debug114 = debug02.addSchema(2527, SAME_NAMESPACED);
         debug02.addFixer((DataFix)new BitStorageAlignFix(debug114));
         Schema debug115 = debug02.addSchema(2528, SAME_NAMESPACED);
-        debug02.addFixer(ItemRenameFix.create(debug115, "Rename soul fire torch and soul fire lantern", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of((Object)"minecraft:soul_fire_torch", (Object)"minecraft:soul_torch", (Object)"minecraft:soul_fire_lantern", (Object)"minecraft:soul_lantern"))));
-        debug02.addFixer(BlockRenameFix.create(debug115, "Rename soul fire torch and soul fire lantern", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of((Object)"minecraft:soul_fire_torch", (Object)"minecraft:soul_torch", (Object)"minecraft:soul_fire_wall_torch", (Object)"minecraft:soul_wall_torch", (Object)"minecraft:soul_fire_lantern", (Object)"minecraft:soul_lantern"))));
+        debug02.addFixer(ItemRenameFix.create(debug115, "Rename soul fire torch and soul fire lantern", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of("minecraft:soul_fire_torch", "minecraft:soul_torch", "minecraft:soul_fire_lantern", "minecraft:soul_lantern")))); // MagmaCube - decompile fix
+        debug02.addFixer(BlockRenameFix.create(debug115, "Rename soul fire torch and soul fire lantern", DataFixers.createRenamer((Map<String, String>)ImmutableMap.of("minecraft:soul_fire_torch", "minecraft:soul_torch", "minecraft:soul_fire_wall_torch", "minecraft:soul_wall_torch", "minecraft:soul_fire_lantern", "minecraft:soul_lantern")))); // MagmaCube - decompile fix
         Schema debug116 = debug02.addSchema(2529, SAME_NAMESPACED);
         debug02.addFixer((DataFix)new StriderGravityFix(debug116, false));
         Schema debug117 = debug02.addSchema(2531, SAME_NAMESPACED);
@@ -534,7 +534,7 @@ public class DataFixers {
         Schema debug121 = debug02.addSchema(2551, V2551::new);
         debug02.addFixer((DataFix)new WriteAndReadFix(debug121, "add types to WorldGenData", References.WORLD_GEN_SETTINGS));
         Schema debug122 = debug02.addSchema(2552, SAME_NAMESPACED);
-        debug02.addFixer((DataFix)new RenameBiomesFix(debug122, false, "Nether biome rename", (Map<String, String>)ImmutableMap.of((Object)"minecraft:nether", (Object)"minecraft:nether_wastes")));
+        debug02.addFixer((DataFix)new RenameBiomesFix(debug122, false, "Nether biome rename", (Map<String, String>)ImmutableMap.of("minecraft:nether", "minecraft:nether_wastes"))); // MagmaCube - decompile fix
         Schema debug123 = debug02.addSchema(2553, SAME_NAMESPACED);
         debug02.addFixer((DataFix)new BiomeFix(debug123, false));
         Schema debug124 = debug02.addSchema(2558, SAME_NAMESPACED);
diff --git a/src/main/java/net/minecraft/util/datafix/PackedBitStorage.java b/src/main/java/net/minecraft/util/datafix/PackedBitStorage.java
index a95fd31b2027c48c7fab0ca8c60cea09ea3fc8ee..5415357847400db23ffc872fb4170833a0c7fa93 100644
--- a/src/main/java/net/minecraft/util/datafix/PackedBitStorage.java
+++ b/src/main/java/net/minecraft/util/datafix/PackedBitStorage.java
@@ -33,7 +33,7 @@ public class PackedBitStorage
         final int debug4 = debug3 >> 6;
         final int debug5 = (debug1 + 1) * this.bits - 1 >> 6;
         final int debug6 = debug3 ^ debug4 << 6;
-        this.data[debug4] = ((this.data[debug4] & â¾(this.mask << debug6)) | (debug2 & this.mask) << debug6);
+        this.data[debug4] = ((this.data[debug4] & (this.mask << debug6)) | (debug2 & this.mask) << debug6); // MagmaCube - decompile fix
         if (debug4 != debug5) {
             final int debug7 = 64 - debug6;
             final int debug8 = this.bits - debug7;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
index c89151f4fc0ec90bde8d03cd424a4eb51f59e7e0..5853007bea4168dc16ab9beabc93efe680c4a9cc 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
@@ -26,7 +26,7 @@ public abstract class AbstractUUIDFix extends DataFix
     protected Typed<?> updateNamedChoice(final Typed<?> debug1, final String debug2, final Function<Dynamic<?>, Dynamic<?>> debug3) {
         final Type<?> debug4 = (Type<?>)this.getInputSchema().getChoiceType(this.typeReference, debug2);
         final Type<?> debug5 = (Type<?>)this.getOutputSchema().getChoiceType(this.typeReference, debug2);
-        return (Typed<?>)debug1.updateTyped(DSL.namedChoice(debug2, (Type)debug4), (Type)debug5, debug1 -> debug1.update(DSL.remainderFinder(), (Function)debug3));
+        return (Typed<?>)debug1.updateTyped(DSL.namedChoice(debug2, debug4), debug5, debug1l -> debug1l.update(DSL.remainderFinder(), debug3)); // MagmaCube - decompile fix
     }
     
     protected static Optional<Dynamic<?>> replaceUUIDString(final Dynamic<?> debug0, final String debug1, final String debug2) {
@@ -44,13 +44,11 @@ public abstract class AbstractUUIDFix extends DataFix
     }
     
     protected static Optional<Dynamic<?>> createUUIDFromString(final Dynamic<?> debug0, final String debug1) {
-        final String debug2;
-        UUID debug3;
-        return debug0.get(debug1).result().flatMap(debug1 -> {
-            debug2 = debug1.asString((String)null);
+        return debug0.get(debug1).result().flatMap(debug1l -> { // MagmaCube - decompile fix
+            String debug2 = debug1l.asString((String)null); // MagmaCube - decompile fix
             if (debug2 != null) {
                 try {
-                    debug3 = UUID.fromString(debug2);
+                    UUID debug3 = UUID.fromString(debug2); // MagmaCube - decompile fix
                     return createUUIDTag(debug0, debug3.getMostSignificantBits(), debug3.getLeastSignificantBits());
                 }
                 catch (IllegalArgumentException ex) {}
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsRenameFix.java
index e5d2fc49660593bd5f76f8aebad79e4d62f0c66a..8f744b52047754617b913f1b7f140a3d51ec1dac 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsRenameFix.java
@@ -21,10 +21,9 @@ public class AdvancementsRenameFix extends DataFix
     }
     
     protected TypeRewriteRule makeRule() {
-        final String debug3;
-        return this.fixTypeEverywhereTyped(this.name, this.getInputSchema().getType(References.ADVANCEMENTS), debug1 -> debug1.update(DSL.remainderFinder(), debug1 -> debug1.updateMapValues(debug2 -> {
-            debug3 = ((Dynamic)debug2.getFirst()).asString("");
-            return debug2.mapFirst(debug3 -> debug1.createString((String)this.renamer.apply(debug3)));
+        return this.fixTypeEverywhereTyped(this.name, this.getInputSchema().getType(References.ADVANCEMENTS), debug1 -> debug1.update(DSL.remainderFinder(), debug1l -> debug1l.updateMapValues(debug2 -> { // MagmaCube - decompile fix
+            String debug3 = ((Dynamic)debug2.getFirst()).asString(""); // MagmaCube - decompile fix
+            return debug2.mapFirst(debug3l -> debug1l.createString((String)this.renamer.apply(debug3))); // MagmaCube - decompile fix
         })));
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java b/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java
index e8d28e9d7a38ba626b8c0d18d46f5bf844b44ba9..216d48d86990d50e6859d930dcfc226f30dc57b7 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java
@@ -2,6 +2,7 @@ package net.minecraft.util.datafix.fixes;
 
 import com.mojang.serialization.DynamicOps;
 import java.util.Iterator;
+import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import com.mojang.datafixers.Typed;
 import com.mojang.datafixers.OpticFinder;
@@ -40,61 +41,45 @@ public class BedBlockEntityInjecter extends DataFix
         final OpticFinder<?> debug5 = (OpticFinder<?>)DSL.fieldFinder("Level", (Type)debug1);
         final OpticFinder<java.util.List<TE>> debug6 = (OpticFinder<java.util.List<TE>>)DSL.fieldFinder("TileEntities", (Type)debug2);
         final int debug7 = 416;
-        final OpticFinder opticFinder;
-        final Typed<?> debug8;
-        final Dynamic<?> debug9;
-        final int debug10;
-        final int debug11;
-        final OpticFinder opticFinder2;
-        final java.util.List<Object> debug12;
-        java.util.List<? extends Dynamic<?>> debug13;
-        int debug14;
-        Dynamic<?> debug15;
-        int debug16;
-        Stream<Integer> debug17;
-        int debug18;
-        final Iterator<Integer> iterator;
-        int debug19;
-        int debug20;
-        int debug21;
-        int debug22;
-        Map<Dynamic<?>, Dynamic<?>> debug23;
-        final Type type;
-        return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", (Type)this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), (Type)this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), debug0 -> debug0 -> debug0), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), debug3 -> {
-            debug8 = (Typed<?>)debug3.getTyped(opticFinder);
-            debug9 = (Dynamic<?>)debug8.get(DSL.remainderFinder());
-            debug10 = debug9.get("xPos").asInt(0);
-            debug11 = debug9.get("zPos").asInt(0);
-            debug12 = (java.util.List<Object>)Lists.newArrayList((Iterable)debug8.getOrCreate(opticFinder2));
+        // MagmaCube start - decompile fix
+        return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", (Type)this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), (Type)this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), debug0 -> debug0l -> debug0l), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), debug3 -> {
+            Typed<?> debug8 = (Typed<?>)debug3.getTyped(debug5);
+            Dynamic<?> debug9 = (Dynamic<?>)debug8.get(DSL.remainderFinder());
+            int debug10 = debug9.get("xPos").asInt(0);
+            int debug11 = debug9.get("zPos").asInt(0);
+            int debug14;
+            java.util.List<Object> debug12 = (java.util.List<Object>)Lists.newArrayList((Iterable)debug8.getOrCreate(debug6));
+            java.util.List<? extends Dynamic<?>> debug13;
             for (debug13 = (java.util.List<? extends Dynamic<?>>)debug9.get("Sections").asList((Function)Function.identity()), debug14 = 0; debug14 < debug13.size(); ++debug14) {
-                debug15 = (Dynamic<?>)debug13.get(debug14);
-                debug16 = debug15.get("Y").asInt(0);
-                debug17 = debug15.get("Blocks").asStream().map(debug0 -> debug0.asInt(0));
-                debug18 = 0;
-                debug17::iterator.iterator();
+                Dynamic<?> debug15 = (Dynamic<?>)debug13.get(debug14);
+                int debug16 = debug15.get("Y").asInt(0);
+                Stream<Integer> debug17 = debug15.get("Blocks").asStream().map(debug0 -> debug0.asInt(0));
+                int debug18 = 0;
+                Iterator<Integer> iterator = debug17.collect(Collectors.toList()).iterator();
                 while (iterator.hasNext()) {
-                    debug19 = iterator.next();
+                    int debug19 = iterator.next();
                     if (416 == (debug19 & 0xFF) << 4) {
-                        debug20 = (debug18 & 0xF);
-                        debug21 = (debug18 >> 8 & 0xF);
-                        debug22 = (debug18 >> 4 & 0xF);
-                        debug23 = (Map<Dynamic<?>, Dynamic<?>>)Maps.newHashMap();
+                        int debug20 = (debug18 & 0xF);
+                        int debug21 = (debug18 >> 8 & 0xF);
+                        int debug22 = (debug18 >> 4 & 0xF);
+                        Map<Dynamic<?>, Dynamic<?>> debug23 = Maps.newHashMap();
                         debug23.put((Dynamic<?>)debug15.createString("id"), (Dynamic<?>)debug15.createString("minecraft:bed"));
                         debug23.put((Dynamic<?>)debug15.createString("x"), (Dynamic<?>)debug15.createInt(debug20 + (debug10 << 4)));
                         debug23.put((Dynamic<?>)debug15.createString("y"), (Dynamic<?>)debug15.createInt(debug21 + (debug16 << 4)));
                         debug23.put((Dynamic<?>)debug15.createString("z"), (Dynamic<?>)debug15.createInt(debug22 + (debug11 << 4)));
                         debug23.put((Dynamic<?>)debug15.createString("color"), (Dynamic<?>)debug15.createShort((short)14));
-                        debug12.add(((Pair)type.read(debug15.createMap((Map)debug23)).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created bed block entity."))).getFirst());
+                        debug12.add(((Pair)debug4.read(debug15.createMap(debug23)).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created bed block entity."))).getFirst());
                     }
                     ++debug18;
                 }
             }
             if (!debug12.isEmpty()) {
-                return debug3.set(opticFinder, debug8.set(opticFinder2, (Object)debug12));
+                return debug3.set(debug5, debug8.set(debug6, (java.util.List<TE>) debug12));
             }
             else {
                 return debug3;
             }
         }));
+        // MagmaCube end - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BedItemColorFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BedItemColorFix.java
index a657df8cd0c873d379b7e4879a2f6e8213717491..5d659d6175f63e503b930c5914b0786e68fd226c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BedItemColorFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BedItemColorFix.java
@@ -21,14 +21,12 @@ public class BedItemColorFix extends DataFix
     
     public TypeRewriteRule makeRule() {
         final OpticFinder<Pair<String, String>> debug2 = (OpticFinder<Pair<String, String>>)DSL.fieldFinder("id", DSL.named(References.ITEM_NAME.typeName(), (Type)NamespacedSchema.namespacedString()));
-        final Optional<Pair<String, String>> debug3;
-        final Dynamic<?> debug4;
         return this.fixTypeEverywhereTyped("BedItemColorFix", this.getInputSchema().getType(References.ITEM_STACK), debug1 -> {
-            debug3 = (Optional<Pair<String, String>>)debug1.getOptional((OpticFinder)debug2);
+            Optional<Pair<String, String>> debug3 = (Optional<Pair<String, String>>)debug1.getOptional((OpticFinder)debug2); // MagmaCube - decompile fix
             if (debug3.isPresent() && Objects.equals(debug3.get().getSecond(), "minecraft:bed")) {
-                debug4 = (Dynamic<?>)debug1.get(DSL.remainderFinder());
+                Dynamic<?> debug4 = (Dynamic<?>)debug1.get(DSL.remainderFinder()); // MagmaCube - decompile fix
                 if (debug4.get("Damage").asInt(0) == 0) {
-                    return debug1.set(DSL.remainderFinder(), (Object)debug4.set("Damage", debug4.createShort((short)14)));
+                    return debug1.set(DSL.remainderFinder(), debug4.set("Damage", debug4.createShort((short)14))); // MagmaCube - decompile fix
                 }
             }
             return debug1;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
index 4fe63f455f03ee597ebe8d19b095de489d3709e3..e5f08fbd88c5fa0857f3bb12fc9ce92724d3da20 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
@@ -16,12 +16,12 @@ public class BlockEntityBannerColorFix extends NamedEntityFix
     
     public Dynamic<?> fixTag(Dynamic<?> debug1) {
         debug1 = (Dynamic<?>)debug1.update("Base", debug0 -> debug0.createInt(15 - debug0.asInt(0)));
-        debug1 = (Dynamic<?>)debug1.update("Patterns", debug0 -> (Dynamic)DataFixUtils.orElse(((Dynamic)debug0).asStreamOpt().map(debug0 -> debug0.map(debug0 -> debug0.update("Color", debug0 -> debug0.createInt(15 - debug0.asInt(0))))).map((Function)debug0::createList).result(), (Object)debug0));
+        debug1 = (Dynamic<?>)debug1.update("Patterns", debug0 -> DataFixUtils.orElse(debug0.asStreamOpt().map(debug0l -> debug0l.map(debug0ll -> debug0ll.update("Color", debug0lll -> debug0lll.createInt(15 - debug0lll.asInt(0))))).map(debug0::createList).result(), debug0));// MagmaCube - decompile fix
         return debug1;
     }
     
     @Override
     protected Typed<?> fix(final Typed<?> debug1) {
-        return (Typed<?>)debug1.update(DSL.remainderFinder(), (Function)this::fixTag);
+        return (Typed<?>)debug1.update(DSL.remainderFinder(), this::fixTag); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
index 766f87c1f970046f1f6745d4e82e491e7d232403..c81a99a962af0e69554420d346743a5378c6b4ff 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
@@ -26,11 +26,11 @@ public class BlockEntityIdFix extends DataFix
         final Type<?> debug2 = (Type<?>)this.getOutputSchema().getType(References.ITEM_STACK);
         final TaggedChoice.TaggedChoiceType<String> debug3 = (TaggedChoice.TaggedChoiceType<String>)this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
         final TaggedChoice.TaggedChoiceType<String> debug4 = (TaggedChoice.TaggedChoiceType<String>)this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY);
-        return TypeRewriteRule.seq(this.convertUnchecked("item stack block entity name hook converter", (Type)debug, (Type)debug2), this.fixTypeEverywhere("BlockEntityIdFix", (Type)debug3, (Type)debug4, debug0 -> debug0 -> debug0.mapFirst(debug0 -> BlockEntityIdFix.ID_MAP.getOrDefault(debug0, debug0))));
+        return TypeRewriteRule.seq(this.convertUnchecked("item stack block entity name hook converter", (Type)debug, (Type)debug2), this.fixTypeEverywhere("BlockEntityIdFix", debug3, debug4, debug0 -> debug0l -> debug0l.mapFirst(debug0ll -> BlockEntityIdFix.ID_MAP.getOrDefault(debug0ll, debug0ll)))); // MagmaCube - decompile fix
     }
     
     static {
-        ID_MAP = (Map)DataFixUtils.make((Object)Maps.newHashMap(), debug0 -> {
+        ID_MAP = (Map)DataFixUtils.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put("Airportal", "minecraft:end_portal");
             debug0.put("Banner", "minecraft:banner");
             debug0.put("Beacon", "minecraft:beacon");
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntitySignTextStrictJsonFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntitySignTextStrictJsonFix.java
index 5cba73ef202f2b1238a9c886a1fa6cdd0fc1132e..738d007becccbfabe2f83aabbd96bc658a7d14d6 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntitySignTextStrictJsonFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntitySignTextStrictJsonFix.java
@@ -34,7 +34,7 @@ public class BlockEntitySignTextStrictJsonFix extends NamedEntityFix
             debug4 = TextComponent.EMPTY;
         }
         else {
-            if (debug3.charAt(0) != 'Â¥"' || debug3.charAt(debug3.length() - 1) != 'Â¥"') {
+            if (debug3.charAt(0) != '\"' || debug3.charAt(debug3.length() - 1) != '\"') { // MagmaCube - decompile fix
                 if (debug3.charAt(0) != '{' || debug3.charAt(debug3.length() - 1) != '}') {
                     debug4 = new TextComponent(debug3);
                     return (Dynamic<?>)debug1.set(debug2, debug1.createString(Component.Serializer.toJson(debug4)));
@@ -68,13 +68,15 @@ public class BlockEntitySignTextStrictJsonFix extends NamedEntityFix
     
     @Override
     protected Typed<?> fix(final Typed<?> debug1) {
-        return (Typed<?>)debug1.update(DSL.remainderFinder(), debug1 -> {
-            debug1 = this.updateLine(debug1, "Text1");
-            debug1 = this.updateLine(debug1, "Text2");
-            debug1 = this.updateLine(debug1, "Text3");
-            debug1 = this.updateLine(debug1, "Text4");
-            return debug1;
+        // MagmaCube start - decompile fix
+        return (Typed<?>)debug1.update(DSL.remainderFinder(), debug1l -> {
+            debug1l = this.updateLine(debug1l, "Text1");
+            debug1l = this.updateLine(debug1l, "Text2");
+            debug1l = this.updateLine(debug1l, "Text3");
+            debug1l = this.updateLine(debug1l, "Text4");
+            return debug1l;
         });
+        // MagmaCube end - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFix.java
index 1408baa7213505638a7229e5593e1fd88baa3058..36857bb277ded961d85784f22dd18648ef09808b 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFix.java
@@ -29,15 +29,14 @@ public abstract class BlockRenameFix extends DataFix
         if (!Objects.equals(debug2, debug3)) {
             throw new IllegalStateException("block type is not what was expected.");
         }
-        final TypeRewriteRule debug4 = this.fixTypeEverywhere(this.name + " for block", (Type)debug3, debug1 -> debug1 -> debug1.mapSecond((Function)this::fixBlock));
-        final Optional<String> debug6;
-        final TypeRewriteRule debug5 = this.fixTypeEverywhereTyped(this.name + " for block_state", this.getInputSchema().getType(References.BLOCK_STATE), debug1 -> debug1.update(DSL.remainderFinder(), debug1 -> {
-            debug6 = (Optional<String>)debug1.get("Name").asString().result();
+        final TypeRewriteRule debug4 = this.fixTypeEverywhere(this.name + " for block", debug3, debug1 -> debug1l -> debug1l.mapSecond(this::fixBlock)); // MagmaCube - decompile fix
+        final TypeRewriteRule debug5 = this.fixTypeEverywhereTyped(this.name + " for block_state", this.getInputSchema().getType(References.BLOCK_STATE), debug1 -> debug1.update(DSL.remainderFinder(), debug1l -> { // MagmaCube - decompile fix
+            Optional<String> debug6 = (Optional<String>)debug1l.get("Name").asString().result(); // MagmaCube - decompile fix
             if (debug6.isPresent()) {
-                return debug1.set("Name", debug1.createString(this.fixBlock(debug6.get())));
+                return debug1l.set("Name", debug1l.createString(this.fixBlock(debug6.get()))); // MagmaCube - decompile fix
             }
             else {
-                return debug1;
+                return debug1l; // MagmaCube - decompile fix
             }
         }));
         return TypeRewriteRule.seq(debug4, debug5);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockStateData.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockStateData.java
index c46d332dc6173907edbf793a5a54e1dd9c801bf8..764cb7e0d2a0049cc5ce36a02cbe68eaffb12194 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockStateData.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockStateData.java
@@ -28,8 +28,8 @@ public class BlockStateData
         for (final String debug5 : debug2) {
             final Dynamic<?> debug6 = parse(debug5);
             final String debug7 = debug6.get("Name").asString("");
-            BlockStateData.ID_BY_OLD_NAME.putIfAbsent((Object)debug7, debug0);
-            BlockStateData.ID_BY_OLD.put((Object)debug6, debug0);
+            BlockStateData.ID_BY_OLD_NAME.putIfAbsent(debug7, debug0); // MagmaCube - decompile fix
+            BlockStateData.ID_BY_OLD.put(debug6, debug0); // MagmaCube - decompile fix
         }
     }
     
@@ -69,7 +69,7 @@ public class BlockStateData
     
     public static Dynamic<?> parse(final String debug0) {
         try {
-            return (Dynamic<?>)new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)TagParser.parseTag(debug0.replace('Â¥'', 'Â¥"')));
+            return (Dynamic<?>)new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)TagParser.parseTag(debug0.replace('\'', '\"'))); // MagmaCube - decompile fix
         }
         catch (Exception debug) {
             BlockStateData.LOGGER.error("Parsing {}", (Object)debug0, (Object)debug);
@@ -89,8 +89,8 @@ public class BlockStateData
         LOGGER = LogManager.getLogger();
         MAP = new Dynamic[4096];
         BLOCK_DEFAULTS = new Dynamic[256];
-        ID_BY_OLD = (Object2IntMap)DataFixUtils.make((Object)new Object2IntOpenHashMap(), debug0 -> debug0.defaultReturnValue(-1));
-        ID_BY_OLD_NAME = (Object2IntMap)DataFixUtils.make((Object)new Object2IntOpenHashMap(), debug0 -> debug0.defaultReturnValue(-1));
+        ID_BY_OLD = (Object2IntMap)DataFixUtils.make(new Object2IntOpenHashMap(), debug0 -> debug0.defaultReturnValue(-1)); // MagmaCube - decompile fix
+        ID_BY_OLD_NAME = (Object2IntMap)DataFixUtils.make(new Object2IntOpenHashMap(), debug0 -> debug0.defaultReturnValue(-1)); // MagmaCube - decompile fix
         BlockStateData.ID_BY_OLD.defaultReturnValue(-1);
         register(0, "{Name:'minecraft:air'}", "{Name:'minecraft:air'}");
         register(16, "{Name:'minecraft:stone'}", "{Name:'minecraft:stone',Properties:{variant:'stone'}}");
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/CatTypeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/CatTypeFix.java
index 685bf4c8c72569dcc519cd02cfd6fa3d16afafe7..36d4376b3c28f27e1fbec4e8b60a5bd9b37ce25f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/CatTypeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/CatTypeFix.java
@@ -21,6 +21,6 @@ public class CatTypeFix extends NamedEntityFix
     
     @Override
     protected Typed<?> fix(final Typed<?> debug1) {
-        return (Typed<?>)debug1.update(DSL.remainderFinder(), (Function)this::fixTag);
+        return (Typed<?>)debug1.update(DSL.remainderFinder(), this::fixTag); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkBiomeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkBiomeFix.java
index 47481ca9ad0da3d82dfbdbda6057d544000b8a8b..8bb901cbd30616e18088690ddf39e40cfcc3d409 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkBiomeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkBiomeFix.java
@@ -21,36 +21,29 @@ public class ChunkBiomeFix extends DataFix
     protected TypeRewriteRule makeRule() {
         final Type<?> debug2 = (Type<?>)this.getInputSchema().getType(References.CHUNK);
         final OpticFinder<?> debug3 = (OpticFinder<?>)debug2.findField("Level");
-        final Optional<IntStream> debug4;
-        final int[] debug5;
-        final int[] debug6;
-        int debug7;
-        int debug8;
-        int debug9;
-        int debug10;
-        int debug11;
-        int debug12;
-        return this.fixTypeEverywhereTyped("Leaves fix", (Type)debug2, debug1 -> debug1.updateTyped((OpticFinder)debug3, debug0 -> debug0.update(DSL.remainderFinder(), debug0 -> {
-            debug4 = (Optional<IntStream>)debug0.get("Biomes").asIntStreamOpt().result();
+        // MagmaCube start - decompile fix
+        return this.fixTypeEverywhereTyped("Leaves fix", debug2, debug1 -> debug1.updateTyped(debug3, debug0 -> debug0.update(DSL.remainderFinder(), debug0l -> { // MagmaCube - decompile fix
+            Optional<IntStream> debug4 = (Optional<IntStream>)debug0l.get("Biomes").asIntStreamOpt().result();
             if (!debug4.isPresent()) {
-                return debug0;
+                return debug0l;
             }
             else {
-                debug5 = debug4.get().toArray();
-                debug6 = new int[1024];
-                for (debug7 = 0; debug7 < 4; ++debug7) {
-                    for (debug8 = 0; debug8 < 4; ++debug8) {
-                        debug9 = (debug8 << 2) + 2;
-                        debug10 = (debug7 << 2) + 2;
-                        debug11 = (debug10 << 4 | debug9);
+                int[] debug5 = debug4.get().toArray();
+                int[] debug6 = new int[1024];
+                for (int debug7 = 0; debug7 < 4; ++debug7) {
+                    for (int debug8 = 0; debug8 < 4; ++debug8) {
+                        int debug9 = (debug8 << 2) + 2;
+                        int debug10 = (debug7 << 2) + 2;
+                        int debug11 = (debug10 << 4 | debug9);
                         debug6[debug7 << 2 | debug8] = ((debug11 < debug5.length) ? debug5[debug11] : -1);
                     }
                 }
-                for (debug12 = 1; debug12 < 64; ++debug12) {
+                for (int debug12 = 1; debug12 < 64; ++debug12) {
                     System.arraycopy(debug6, 0, debug6, debug12 * 16, 16);
                 }
-                return debug0.set("Biomes", debug0.createIntList(Arrays.stream(debug6)));
+                return debug0l.set("Biomes", debug0l.createIntList(Arrays.stream(debug6)));
             }
         })));
+        // MagmaCube end - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
index a16e121ad2f8bb849ec5c12fb32759a0868d9147..810edf1a749a062113e6483f096e7b0f93852147 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
@@ -192,7 +192,7 @@ public class ChunkPalettedStorageFix extends DataFix
     public TypeRewriteRule makeRule() {
         final Type<?> debug1 = (Type<?>)this.getInputSchema().getType(References.CHUNK);
         final Type<?> debug2 = (Type<?>)this.getOutputSchema().getType(References.CHUNK);
-        return this.writeFixAndRead("ChunkPalettedStorageFix", (Type)debug1, (Type)debug2, (Function)this::fix);
+        return this.writeFixAndRead("ChunkPalettedStorageFix", (Type)debug1, (Type)debug2, this::fix); // MagmaCube - decompile fix
     }
     
     public static int getSideMask(final boolean debug0, final boolean debug1, final boolean debug2, final boolean debug3) {
@@ -242,7 +242,7 @@ public class ChunkPalettedStorageFix extends DataFix
         UPPER_LARGE_FERN = BlockStateData.parse("{Name:'minecraft:large_fern',Properties:{half:'upper'}}");
         UPPER_ROSE_BUSH = BlockStateData.parse("{Name:'minecraft:rose_bush',Properties:{half:'upper'}}");
         UPPER_PEONY = BlockStateData.parse("{Name:'minecraft:peony',Properties:{half:'upper'}}");
-        FLOWER_POT_MAP = (Map)DataFixUtils.make((Object)Maps.newHashMap(), debug0 -> {
+        FLOWER_POT_MAP = DataFixUtils.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put("minecraft:air0", BlockStateData.parse("{Name:'minecraft:flower_pot'}"));
             debug0.put("minecraft:red_flower0", BlockStateData.parse("{Name:'minecraft:potted_poppy'}"));
             debug0.put("minecraft:red_flower1", BlockStateData.parse("{Name:'minecraft:potted_blue_orchid'}"));
@@ -267,7 +267,7 @@ public class ChunkPalettedStorageFix extends DataFix
             debug0.put("minecraft:cactus0", BlockStateData.getTag(2240));
             return;
         });
-        SKULL_MAP = (Map)DataFixUtils.make((Object)Maps.newHashMap(), debug0 -> {
+        SKULL_MAP = DataFixUtils.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             mapSkull(debug0, 0, "skeleton", "skull");
             mapSkull(debug0, 1, "wither_skeleton", "skull");
             mapSkull(debug0, 2, "zombie", "head");
@@ -276,7 +276,7 @@ public class ChunkPalettedStorageFix extends DataFix
             mapSkull(debug0, 5, "dragon", "head");
             return;
         });
-        DOOR_MAP = (Map)DataFixUtils.make((Object)Maps.newHashMap(), debug0 -> {
+        DOOR_MAP = DataFixUtils.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             mapDoor(debug0, "oak_door", 1024);
             mapDoor(debug0, "iron_door", 1136);
             mapDoor(debug0, "spruce_door", 3088);
@@ -286,15 +286,14 @@ public class ChunkPalettedStorageFix extends DataFix
             mapDoor(debug0, "dark_oak_door", 3152);
             return;
         });
-        int debug;
-        NOTE_BLOCK_MAP = (Map)DataFixUtils.make((Object)Maps.newHashMap(), debug0 -> {
-            for (debug = 0; debug < 26; ++debug) {
+        NOTE_BLOCK_MAP = DataFixUtils.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
+            for (int debug = 0; debug < 26; ++debug) { // MagmaCube - decompile fix
                 debug0.put("true" + debug, BlockStateData.parse("{Name:'minecraft:note_block',Properties:{powered:'true',note:'" + debug + "'}}"));
                 debug0.put("false" + debug, BlockStateData.parse("{Name:'minecraft:note_block',Properties:{powered:'false',note:'" + debug + "'}}"));
             }
             return;
         });
-        DYE_COLOR_MAP = (Int2ObjectMap)DataFixUtils.make((Object)new Int2ObjectOpenHashMap(), debug0 -> {
+        DYE_COLOR_MAP = DataFixUtils.make(new Int2ObjectOpenHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put(0, (Object)"white");
             debug0.put(1, (Object)"orange");
             debug0.put(2, (Object)"magenta");
@@ -313,24 +312,20 @@ public class ChunkPalettedStorageFix extends DataFix
             debug0.put(15, (Object)"black");
             return;
         });
-        final Iterator<Int2ObjectMap.Entry> iterator;
-        Int2ObjectMap.Entry debug2;
-        BED_BLOCK_MAP = (Map)DataFixUtils.make((Object)Maps.newHashMap(), debug0 -> {
-            ChunkPalettedStorageFix.DYE_COLOR_MAP.int2ObjectEntrySet().iterator();
+        BED_BLOCK_MAP = DataFixUtils.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
+            ObjectIterator<Int2ObjectMap.Entry<String>> iterator = ChunkPalettedStorageFix.DYE_COLOR_MAP.int2ObjectEntrySet().iterator(); // MagmaCube - decompile fix
             while (iterator.hasNext()) {
-                debug2 = iterator.next();
+                Int2ObjectMap.Entry debug2 = iterator.next(); // MagmaCube - decompile fix
                 if (!Objects.equals(debug2.getValue(), "red")) {
                     addBeds(debug0, debug2.getIntKey(), (String)debug2.getValue());
                 }
             }
             return;
         });
-        final Iterator<Int2ObjectMap.Entry> iterator2;
-        Int2ObjectMap.Entry debug3;
-        BANNER_BLOCK_MAP = (Map)DataFixUtils.make((Object)Maps.newHashMap(), debug0 -> {
-            ChunkPalettedStorageFix.DYE_COLOR_MAP.int2ObjectEntrySet().iterator();
+        BANNER_BLOCK_MAP = DataFixUtils.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
+            ObjectIterator<Int2ObjectMap.Entry<String>> iterator2 = ChunkPalettedStorageFix.DYE_COLOR_MAP.int2ObjectEntrySet().iterator(); // MagmaCube - decompile fix
             while (iterator2.hasNext()) {
-                debug3 = iterator2.next();
+                Int2ObjectMap.Entry debug3 = iterator2.next(); // MagmaCube - decompile fix
                 if (!Objects.equals(debug3.getValue(), "white")) {
                     addBanners(debug0, 15 - debug3.getIntKey(), (String)debug3.getValue());
                 }
@@ -416,9 +411,9 @@ public class ChunkPalettedStorageFix extends DataFix
             this.palette = new CrudeIncrementalIntIdentityHashBiMap<Dynamic<?>>(32);
             this.toFix = (Int2ObjectMap<IntList>)new Int2ObjectLinkedOpenHashMap();
             this.update = (IntList)new IntArrayList();
-            this.seen = (Set<Dynamic<?>>)Sets.newIdentityHashSet();
+            this.seen = Sets.newIdentityHashSet(); // MagmaCube - decompile fix
             this.buffer = new int[4096];
-            this.listTag = (List<Dynamic<?>>)Lists.newArrayList();
+            this.listTag = Lists.newArrayList(); // MagmaCube - decompile fix
             this.section = debug1;
             this.y = debug1.get("Y").asInt(0);
             this.hasData = debug1.get("Blocks").result().isPresent();
@@ -475,7 +470,7 @@ public class ChunkPalettedStorageFix extends DataFix
             IntList debug3 = (IntList)this.toFix.get(debug1);
             if (debug3 == null) {
                 debug3 = (IntList)new IntArrayList();
-                this.toFix.put(debug1, (Object)debug3);
+                this.toFix.put(debug1, debug3); // MagmaCube - decompile fix
             }
             debug3.add(debug2);
         }
@@ -514,23 +509,18 @@ public class ChunkPalettedStorageFix extends DataFix
             this.level = debug1;
             this.x = debug1.get("xPos").asInt(0) << 4;
             this.z = debug1.get("zPos").asInt(0) << 4;
-            final int debug2;
-            final int debug3;
-            final int debug4;
-            final int debug5;
-            debug1.get("TileEntities").asStreamOpt().result().ifPresent(debug1 -> debug1.forEach(debug1 -> {
-                debug2 = (debug1.get("x").asInt(0) - this.x & 0xF);
-                debug3 = debug1.get("y").asInt(0);
-                debug4 = (debug1.get("z").asInt(0) - this.z & 0xF);
-                debug5 = (debug3 << 8 | debug4 << 4 | debug2);
-                if (this.blockEntities.put(debug5, (Object)debug1) != null) {
+            debug1.get("TileEntities").asStreamOpt().result().ifPresent(debug1l -> debug1l.forEach(debug1ll -> { // MagmaCube - decompile fix
+                int debug2 = (debug1ll.get("x").asInt(0) - this.x & 0xF); // MagmaCube - decompile fix
+                int debug3 = debug1ll.get("y").asInt(0); // MagmaCube - decompile fix
+                int debug4 = (debug1ll.get("z").asInt(0) - this.z & 0xF); // MagmaCube - decompile fix
+                int debug5 = (debug3 << 8 | debug4 << 4 | debug2); // MagmaCube - decompile fix
+                if (this.blockEntities.put(debug5, debug1ll) != null) { // MagmaCube - decompile fix
                     ChunkPalettedStorageFix.LOGGER.warn("In chunk: {}x{} found a duplicate block entity at position: [{}, {}, {}]", (Object)this.x, (Object)this.z, (Object)debug2, (Object)debug3, (Object)debug4);
                 }
             }));
             final boolean debug6 = debug1.get("convertedFromAlphaFormat").asBoolean(false);
-            final Section debug7;
-            debug1.get("Sections").asStreamOpt().result().ifPresent(debug1 -> debug1.forEach(debug1 -> {
-                debug7 = new Section(debug1);
+            debug1.get("Sections").asStreamOpt().result().ifPresent(debug1l -> debug1l.forEach(debug1ll -> { // MagmaCube - decompile fix
+                Section debug7 = new Section(debug1ll); // MagmaCube - decompile fix
                 this.sides = debug7.upgrade(this.sides);
                 this.sections[debug7.y] = debug7;
             }));
@@ -814,7 +804,7 @@ public class ChunkPalettedStorageFix extends DataFix
                 debug1 = (Dynamic<?>)debug1.set("TileEntities", debug1.createList(this.blockEntities.values().stream()));
             }
             Dynamic<?> debug2 = (Dynamic<?>)debug1.emptyMap();
-            final List<Dynamic<?>> debug3 = (List<Dynamic<?>>)Lists.newArrayList();
+            final List<Dynamic<?>> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
             for (final Section debug4 : this.sections) {
                 if (debug4 != null) {
                     debug3.add(debug4.write());
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
index 2e74f753a0141ae4efef70eb4142a5163ff63566..25fe94bfcb4b830460b1ff7a2cfc474857042914 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
@@ -22,22 +22,22 @@ public class ChunkStructuresTemplateRenameFix extends DataFix
     public TypeRewriteRule makeRule() {
         final Type<?> debug3 = (Type<?>)this.getInputSchema().getType(References.STRUCTURE_FEATURE);
         final OpticFinder<?> debug4 = (OpticFinder<?>)debug3.findField("Children");
-        return this.fixTypeEverywhereTyped("ChunkStructuresTemplateRenameFix", (Type)debug3, debug2 -> debug2.updateTyped((OpticFinder)debug4, debug2 -> debug2.update(DSL.remainderFinder(), debug2 -> this.fixTag((Dynamic<?>)debug2.get(DSL.remainderFinder()), debug2))));
+        return this.fixTypeEverywhereTyped("ChunkStructuresTemplateRenameFix", (Type)debug3, debug2 -> debug2.updateTyped(debug4, debug2l -> debug2l.update(DSL.remainderFinder(), debug2ll -> this.fixTag((Dynamic<?>)debug2l.get(DSL.remainderFinder()), debug2ll)))); // MagmaCube - decompile fix
     }
     
     private Dynamic<?> fixTag(final Dynamic<?> debug1, Dynamic<?> debug2) {
         final String debug3 = debug1.get("id").asString("");
-        if (ChunkStructuresTemplateRenameFix.RENAMES.containsKey((Object)debug3)) {
-            final Pair<String, ImmutableMap<String, String>> debug4 = (Pair<String, ImmutableMap<String, String>>)ChunkStructuresTemplateRenameFix.RENAMES.get((Object)debug3);
+        if (ChunkStructuresTemplateRenameFix.RENAMES.containsKey(debug3)) { // MagmaCube - decompile fix
+            final Pair<String, ImmutableMap<String, String>> debug4 = (Pair<String, ImmutableMap<String, String>>)ChunkStructuresTemplateRenameFix.RENAMES.get(debug3); // MagmaCube - decompile fix
             if (((String)debug4.getFirst()).equals(debug2.get("id").asString(""))) {
                 final String debug5 = debug2.get("Template").asString("");
-                debug2 = (Dynamic<?>)debug2.set("Template", debug2.createString((String)((ImmutableMap)debug4.getSecond()).getOrDefault((Object)debug5, (Object)debug5)));
+                debug2 = (Dynamic<?>)debug2.set("Template", debug2.createString((String)((ImmutableMap)debug4.getSecond()).getOrDefault(debug5, debug5))); // MagmaCube - decompile fix
             }
         }
         return debug2;
     }
     
     static {
-        RENAMES = ImmutableMap.builder().put((Object)"EndCity", (Object)Pair.of((Object)"ECP", (Object)ImmutableMap.builder().put((Object)"second_floor", (Object)"second_floor_1").put((Object)"third_floor", (Object)"third_floor_1").put((Object)"third_floor_c", (Object)"third_floor_2").build())).put((Object)"Mansion", (Object)Pair.of((Object)"WMP", (Object)ImmutableMap.builder().put((Object)"carpet_south", (Object)"carpet_south_1").put((Object)"carpet_west", (Object)"carpet_west_1").put((Object)"indoors_door", (Object)"indoors_door_1").put((Object)"indoors_wall", (Object)"indoors_wall_1").build())).put((Object)"Igloo", (Object)Pair.of((Object)"Iglu", (Object)ImmutableMap.builder().put((Object)"minecraft:igloo/igloo_bottom", (Object)"minecraft:igloo/bottom").put((Object)"minecraft:igloo/igloo_middle", (Object)"minecraft:igloo/middle").put((Object)"minecraft:igloo/igloo_top", (Object)"minecraft:igloo/top").build())).put((Object)"Ocean_Ruin", (Object)Pair.of((Object)"ORP", (Object)ImmutableMap.builder().put((Object)"minecraft:ruin/big_ruin1_brick", (Object)"minecraft:underwater_ruin/big_brick_1").put((Object)"minecraft:ruin/big_ruin2_brick", (Object)"minecraft:underwater_ruin/big_brick_2").put((Object)"minecraft:ruin/big_ruin3_brick", (Object)"minecraft:underwater_ruin/big_brick_3").put((Object)"minecraft:ruin/big_ruin8_brick", (Object)"minecraft:underwater_ruin/big_brick_8").put((Object)"minecraft:ruin/big_ruin1_cracked", (Object)"minecraft:underwater_ruin/big_cracked_1").put((Object)"minecraft:ruin/big_ruin2_cracked", (Object)"minecraft:underwater_ruin/big_cracked_2").put((Object)"minecraft:ruin/big_ruin3_cracked", (Object)"minecraft:underwater_ruin/big_cracked_3").put((Object)"minecraft:ruin/big_ruin8_cracked", (Object)"minecraft:underwater_ruin/big_cracked_8").put((Object)"minecraft:ruin/big_ruin1_mossy", (Object)"minecraft:underwater_ruin/big_mossy_1").put((Object)"minecraft:ruin/big_ruin2_mossy", (Object)"minecraft:underwater_ruin/big_mossy_2").put((Object)"minecraft:ruin/big_ruin3_mossy", (Object)"minecraft:underwater_ruin/big_mossy_3").put((Object)"minecraft:ruin/big_ruin8_mossy", (Object)"minecraft:underwater_ruin/big_mossy_8").put((Object)"minecraft:ruin/big_ruin_warm4", (Object)"minecraft:underwater_ruin/big_warm_4").put((Object)"minecraft:ruin/big_ruin_warm5", (Object)"minecraft:underwater_ruin/big_warm_5").put((Object)"minecraft:ruin/big_ruin_warm6", (Object)"minecraft:underwater_ruin/big_warm_6").put((Object)"minecraft:ruin/big_ruin_warm7", (Object)"minecraft:underwater_ruin/big_warm_7").put((Object)"minecraft:ruin/ruin1_brick", (Object)"minecraft:underwater_ruin/brick_1").put((Object)"minecraft:ruin/ruin2_brick", (Object)"minecraft:underwater_ruin/brick_2").put((Object)"minecraft:ruin/ruin3_brick", (Object)"minecraft:underwater_ruin/brick_3").put((Object)"minecraft:ruin/ruin4_brick", (Object)"minecraft:underwater_ruin/brick_4").put((Object)"minecraft:ruin/ruin5_brick", (Object)"minecraft:underwater_ruin/brick_5").put((Object)"minecraft:ruin/ruin6_brick", (Object)"minecraft:underwater_ruin/brick_6").put((Object)"minecraft:ruin/ruin7_brick", (Object)"minecraft:underwater_ruin/brick_7").put((Object)"minecraft:ruin/ruin8_brick", (Object)"minecraft:underwater_ruin/brick_8").put((Object)"minecraft:ruin/ruin1_cracked", (Object)"minecraft:underwater_ruin/cracked_1").put((Object)"minecraft:ruin/ruin2_cracked", (Object)"minecraft:underwater_ruin/cracked_2").put((Object)"minecraft:ruin/ruin3_cracked", (Object)"minecraft:underwater_ruin/cracked_3").put((Object)"minecraft:ruin/ruin4_cracked", (Object)"minecraft:underwater_ruin/cracked_4").put((Object)"minecraft:ruin/ruin5_cracked", (Object)"minecraft:underwater_ruin/cracked_5").put((Object)"minecraft:ruin/ruin6_cracked", (Object)"minecraft:underwater_ruin/cracked_6").put((Object)"minecraft:ruin/ruin7_cracked", (Object)"minecraft:underwater_ruin/cracked_7").put((Object)"minecraft:ruin/ruin8_cracked", (Object)"minecraft:underwater_ruin/cracked_8").put((Object)"minecraft:ruin/ruin1_mossy", (Object)"minecraft:underwater_ruin/mossy_1").put((Object)"minecraft:ruin/ruin2_mossy", (Object)"minecraft:underwater_ruin/mossy_2").put((Object)"minecraft:ruin/ruin3_mossy", (Object)"minecraft:underwater_ruin/mossy_3").put((Object)"minecraft:ruin/ruin4_mossy", (Object)"minecraft:underwater_ruin/mossy_4").put((Object)"minecraft:ruin/ruin5_mossy", (Object)"minecraft:underwater_ruin/mossy_5").put((Object)"minecraft:ruin/ruin6_mossy", (Object)"minecraft:underwater_ruin/mossy_6").put((Object)"minecraft:ruin/ruin7_mossy", (Object)"minecraft:underwater_ruin/mossy_7").put((Object)"minecraft:ruin/ruin8_mossy", (Object)"minecraft:underwater_ruin/mossy_8").put((Object)"minecraft:ruin/ruin_warm1", (Object)"minecraft:underwater_ruin/warm_1").put((Object)"minecraft:ruin/ruin_warm2", (Object)"minecraft:underwater_ruin/warm_2").put((Object)"minecraft:ruin/ruin_warm3", (Object)"minecraft:underwater_ruin/warm_3").put((Object)"minecraft:ruin/ruin_warm4", (Object)"minecraft:underwater_ruin/warm_4").put((Object)"minecraft:ruin/ruin_warm5", (Object)"minecraft:underwater_ruin/warm_5").put((Object)"minecraft:ruin/ruin_warm6", (Object)"minecraft:underwater_ruin/warm_6").put((Object)"minecraft:ruin/ruin_warm7", (Object)"minecraft:underwater_ruin/warm_7").put((Object)"minecraft:ruin/ruin_warm8", (Object)"minecraft:underwater_ruin/warm_8").put((Object)"minecraft:ruin/big_brick_1", (Object)"minecraft:underwater_ruin/big_brick_1").put((Object)"minecraft:ruin/big_brick_2", (Object)"minecraft:underwater_ruin/big_brick_2").put((Object)"minecraft:ruin/big_brick_3", (Object)"minecraft:underwater_ruin/big_brick_3").put((Object)"minecraft:ruin/big_brick_8", (Object)"minecraft:underwater_ruin/big_brick_8").put((Object)"minecraft:ruin/big_mossy_1", (Object)"minecraft:underwater_ruin/big_mossy_1").put((Object)"minecraft:ruin/big_mossy_2", (Object)"minecraft:underwater_ruin/big_mossy_2").put((Object)"minecraft:ruin/big_mossy_3", (Object)"minecraft:underwater_ruin/big_mossy_3").put((Object)"minecraft:ruin/big_mossy_8", (Object)"minecraft:underwater_ruin/big_mossy_8").put((Object)"minecraft:ruin/big_cracked_1", (Object)"minecraft:underwater_ruin/big_cracked_1").put((Object)"minecraft:ruin/big_cracked_2", (Object)"minecraft:underwater_ruin/big_cracked_2").put((Object)"minecraft:ruin/big_cracked_3", (Object)"minecraft:underwater_ruin/big_cracked_3").put((Object)"minecraft:ruin/big_cracked_8", (Object)"minecraft:underwater_ruin/big_cracked_8").put((Object)"minecraft:ruin/big_warm_4", (Object)"minecraft:underwater_ruin/big_warm_4").put((Object)"minecraft:ruin/big_warm_5", (Object)"minecraft:underwater_ruin/big_warm_5").put((Object)"minecraft:ruin/big_warm_6", (Object)"minecraft:underwater_ruin/big_warm_6").put((Object)"minecraft:ruin/big_warm_7", (Object)"minecraft:underwater_ruin/big_warm_7").build())).build();
+        RENAMES = (ImmutableMap<String, Pair<String, ImmutableMap<String, String>>>) (Object) ImmutableMap.builder().put("EndCity", Pair.of("ECP", ImmutableMap.builder().put("second_floor", "second_floor_1").put("third_floor", "third_floor_1").put("third_floor_c", "third_floor_2").build())).put("Mansion", Pair.of("WMP", ImmutableMap.builder().put("carpet_south", "carpet_south_1").put("carpet_west", "carpet_west_1").put("indoors_door", "indoors_door_1").put("indoors_wall", "indoors_wall_1").build())).put("Igloo", Pair.of("Iglu", ImmutableMap.builder().put("minecraft:igloo/igloo_bottom", "minecraft:igloo/bottom").put("minecraft:igloo/igloo_middle", "minecraft:igloo/middle").put("minecraft:igloo/igloo_top", "minecraft:igloo/top").build())).put("Ocean_Ruin", Pair.of("ORP", ImmutableMap.builder().put("minecraft:ruin/big_ruin1_brick", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_ruin2_brick", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_ruin3_brick", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_ruin8_brick", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_ruin1_cracked", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_ruin2_cracked", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_ruin3_cracked", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_ruin8_cracked", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_ruin1_mossy", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_ruin2_mossy", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_ruin3_mossy", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_ruin8_mossy", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_ruin_warm4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_ruin_warm5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_ruin_warm6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_ruin_warm7", "minecraft:underwater_ruin/big_warm_7").put("minecraft:ruin/ruin1_brick", "minecraft:underwater_ruin/brick_1").put("minecraft:ruin/ruin2_brick", "minecraft:underwater_ruin/brick_2").put("minecraft:ruin/ruin3_brick", "minecraft:underwater_ruin/brick_3").put("minecraft:ruin/ruin4_brick", "minecraft:underwater_ruin/brick_4").put("minecraft:ruin/ruin5_brick", "minecraft:underwater_ruin/brick_5").put("minecraft:ruin/ruin6_brick", "minecraft:underwater_ruin/brick_6").put("minecraft:ruin/ruin7_brick", "minecraft:underwater_ruin/brick_7").put("minecraft:ruin/ruin8_brick", "minecraft:underwater_ruin/brick_8").put("minecraft:ruin/ruin1_cracked", "minecraft:underwater_ruin/cracked_1").put("minecraft:ruin/ruin2_cracked", "minecraft:underwater_ruin/cracked_2").put("minecraft:ruin/ruin3_cracked", "minecraft:underwater_ruin/cracked_3").put("minecraft:ruin/ruin4_cracked", "minecraft:underwater_ruin/cracked_4").put("minecraft:ruin/ruin5_cracked", "minecraft:underwater_ruin/cracked_5").put("minecraft:ruin/ruin6_cracked", "minecraft:underwater_ruin/cracked_6").put("minecraft:ruin/ruin7_cracked", "minecraft:underwater_ruin/cracked_7").put("minecraft:ruin/ruin8_cracked", "minecraft:underwater_ruin/cracked_8").put("minecraft:ruin/ruin1_mossy", "minecraft:underwater_ruin/mossy_1").put("minecraft:ruin/ruin2_mossy", "minecraft:underwater_ruin/mossy_2").put("minecraft:ruin/ruin3_mossy", "minecraft:underwater_ruin/mossy_3").put("minecraft:ruin/ruin4_mossy", "minecraft:underwater_ruin/mossy_4").put("minecraft:ruin/ruin5_mossy", "minecraft:underwater_ruin/mossy_5").put("minecraft:ruin/ruin6_mossy", "minecraft:underwater_ruin/mossy_6").put("minecraft:ruin/ruin7_mossy", "minecraft:underwater_ruin/mossy_7").put("minecraft:ruin/ruin8_mossy", "minecraft:underwater_ruin/mossy_8").put("minecraft:ruin/ruin_warm1", "minecraft:underwater_ruin/warm_1").put("minecraft:ruin/ruin_warm2", "minecraft:underwater_ruin/warm_2").put("minecraft:ruin/ruin_warm3", "minecraft:underwater_ruin/warm_3").put("minecraft:ruin/ruin_warm4", "minecraft:underwater_ruin/warm_4").put("minecraft:ruin/ruin_warm5", "minecraft:underwater_ruin/warm_5").put("minecraft:ruin/ruin_warm6", "minecraft:underwater_ruin/warm_6").put("minecraft:ruin/ruin_warm7", "minecraft:underwater_ruin/warm_7").put("minecraft:ruin/ruin_warm8", "minecraft:underwater_ruin/warm_8").put("minecraft:ruin/big_brick_1", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_brick_2", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_brick_3", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_brick_8", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_mossy_1", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_mossy_2", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_mossy_3", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_mossy_8", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_cracked_1", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_cracked_2", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_cracked_3", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_cracked_8", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_warm_4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_warm_5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_warm_6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_warm_7", "minecraft:underwater_ruin/big_warm_7").build())).build(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
index c299f60530b1287efdc4ef1dc2ec3513acec9c27..20bf9d75eec06cb485bda711a249eda42e15de46 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
@@ -105,7 +105,7 @@ public class EntityBlockStateFix extends DataFix
     }
     
     static {
-        MAP = (Map)DataFixUtils.make((Object)Maps.newHashMap(), debug0 -> {
+        MAP = (Map)DataFixUtils.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put("minecraft:air", 0);
             debug0.put("minecraft:stone", 1);
             debug0.put("minecraft:grass", 2);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityElderGuardianSplitFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityElderGuardianSplitFix.java
index d952f6f8138fcaf88398f7172134a3b1aa108d36..466058d4878cf7a0550d557057dd11b60c8b5c5f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityElderGuardianSplitFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityElderGuardianSplitFix.java
@@ -13,6 +13,6 @@ public class EntityElderGuardianSplitFix extends SimpleEntityRenameFix
     
     @Override
     protected Pair<String, Dynamic<?>> getNewNameAndTag(final String debug1, final Dynamic<?> debug2) {
-        return (Pair<String, Dynamic<?>>)Pair.of((Object)((Objects.equals(debug1, "Guardian") && debug2.get("Elder").asBoolean(false)) ? "ElderGuardian" : debug1), (Object)debug2);
+        return Pair.of(((Objects.equals(debug1, "Guardian") && debug2.get("Elder").asBoolean(false)) ? "ElderGuardian" : debug1), debug2); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
index a728111c60ca07caa7d0793d0fd30153fef21bdf..8c8d6b4857a97269653e47ac84d4e62aa19688e5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
@@ -25,6 +25,8 @@ import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.util.Either;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Dynamic;
+
+import java.util.Iterator;
 import java.util.List;
 import java.util.Optional;
 import java.util.stream.Stream;
@@ -46,32 +48,30 @@ extends DataFix {
         OpticFinder debug42 = DSL.typeFinder((Type)debug2);
         OpticFinder debug5 = DSL.fieldFinder((String)"Equipment", (Type)DSL.list(debug1));
         return this.fixTypeEverywhereTyped("EntityEquipmentToArmorAndHandFix", this.getInputSchema().getType(References.ENTITY), this.getOutputSchema().getType(References.ENTITY), debug4 -> {
-            Object debug11;
-            Object debug10;
-            Object debug9;
-            Either debug5 = Either.right((Object)DSL.unit());
+            Object debug10 = null;
+            Either debug5l = Either.right((Object)DSL.unit());
             Either debug6 = Either.right((Object)DSL.unit());
             Dynamic debug7 = (Dynamic)debug4.getOrCreate(DSL.remainderFinder());
             Optional debug8 = debug4.getOptional(debug5);
             if (debug8.isPresent()) {
-                debug9 = (List)debug8.get();
-                debug10 = ((Pair)debug1.read(debug7.emptyMap()).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created empty itemstack."))).getFirst();
+                List debug9 = (List)debug8.get(); // MagmaCube - decompile fix
+                try { debug10 = ((Pair)debug1.read(debug7.emptyMap()).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created empty itemstack."))).getFirst(); } catch (Throwable throwable) { throwable.printStackTrace(); } // MagmaCube - decompile fix
                 if (!debug9.isEmpty()) {
-                    debug5 = Either.left((Object)Lists.newArrayList((Object[])new Object[]{debug9.get(0), debug10}));
+                    debug5l = Either.left((Object)Lists.newArrayList((Object[])new Object[]{debug9.get(0), debug10})); // MagmaCube - decompile fix
                 }
                 if (debug9.size() > 1) {
-                    debug11 = Lists.newArrayList((Object[])new Object[]{debug10, debug10, debug10, debug10});
+                    List debug11 = Lists.newArrayList((Object[])new Object[]{debug10, debug10, debug10, debug10}); // MagmaCube - decompile fix
                     for (int debug12 = 1; debug12 < Math.min(debug9.size(), 5); ++debug12) {
                         debug11.set(debug12 - 1, debug9.get(debug12));
                     }
                     debug6 = Either.left((Object)debug11);
                 }
             }
-            debug9 = debug7;
+            Dynamic debug9 = debug7; // MagmaCube - decompile fix
             debug10 = debug7.get("DropChances").asStreamOpt().result();
             if (((Optional)debug10).isPresent()) {
                 Dynamic debug13;
-                debug11 = Stream.concat((Stream)((Optional)debug10).get(), Stream.generate(() -> EntityEquipmentToArmorAndHandFix.lambda$null$1((Dynamic)debug9))).iterator();
+                Iterator debug11 = Stream.concat((Stream)((Optional)debug10).get(), Stream.generate(() -> EntityEquipmentToArmorAndHandFix.lambda$null$1((Dynamic)debug9))).iterator(); // MagmaCube - decompile fix
                 float debug12 = ((Dynamic)debug11.next()).asFloat(0.0f);
                 if (!debug7.get("HandDropChances").result().isPresent()) {
                     debug13 = debug7.createList(Stream.of(Float.valueOf(debug12), Float.valueOf(0.0f)).map(((Dynamic)debug7)::createFloat));
@@ -83,7 +83,7 @@ extends DataFix {
                 }
                 debug7 = debug7.remove("DropChances");
             }
-            return debug4.set(debug42, debug3, (Object)Pair.of((Object)debug5, (Object)Pair.of((Object)debug6, (Object)debug7)));
+            return debug4.set(debug42, debug3, (Object)Pair.of((Object)debug5l, (Object)Pair.of((Object)debug6, (Object)debug7)));
         });
     }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityHealthFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityHealthFix.java
index d8b9c894bbb4831b7d8c34771ee86cee9f290db5..5c6a520bbbcc4126b8a8d70dc869b0be7d4ea69b 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityHealthFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityHealthFix.java
@@ -37,10 +37,10 @@ public class EntityHealthFix extends DataFix
     }
     
     public TypeRewriteRule makeRule() {
-        return this.fixTypeEverywhereTyped("EntityHealthFix", this.getInputSchema().getType(References.ENTITY), debug1 -> debug1.update(DSL.remainderFinder(), (Function)this::fixTag));
+        return this.fixTypeEverywhereTyped("EntityHealthFix", this.getInputSchema().getType(References.ENTITY), debug1 -> debug1.update(DSL.remainderFinder(), this::fixTag)); // MagmaCube - decompile fix
     }
     
     static {
-        ENTITIES = Sets.newHashSet((Object[])new String[] { "ArmorStand", "Bat", "Blaze", "CaveSpider", "Chicken", "Cow", "Creeper", "EnderDragon", "Enderman", "Endermite", "EntityHorse", "Ghast", "Giant", "Guardian", "LavaSlime", "MushroomCow", "Ozelot", "Pig", "PigZombie", "Rabbit", "Sheep", "Shulker", "Silverfish", "Skeleton", "Slime", "SnowMan", "Spider", "Squid", "Villager", "VillagerGolem", "Witch", "WitherBoss", "Wolf", "Zombie" });
+        ENTITIES = Sets.newHashSet(new String[] { "ArmorStand", "Bat", "Blaze", "CaveSpider", "Chicken", "Cow", "Creeper", "EnderDragon", "Enderman", "Endermite", "EntityHorse", "Ghast", "Giant", "Guardian", "LavaSlime", "MushroomCow", "Ozelot", "Pig", "PigZombie", "Rabbit", "Sheep", "Shulker", "Silverfish", "Skeleton", "Slime", "SnowMan", "Spider", "Squid", "Villager", "VillagerGolem", "Witch", "WitherBoss", "Wolf", "Zombie" }); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityHorseSplitFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityHorseSplitFix.java
index 2ac9c85416da98d06786a6d1086936b63070a82d..4edcaf6eaacd416b303fc6c0b51706a1ad62e849 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityHorseSplitFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityHorseSplitFix.java
@@ -45,8 +45,8 @@ public class EntityHorseSplitFix extends EntityRenameFix
             }
             debug3.remove("Type");
             final Type<?> debug6 = (Type<?>)this.getOutputSchema().findChoiceType(References.ENTITY).types().get(debug5);
-            return (Pair<String, Typed<?>>)Pair.of((Object)debug5, debug2.write().flatMap((Function)debug6::readTyped).result().orElseThrow(() -> new IllegalStateException("Could not parse the new horse")).getFirst());
+            return Pair.of(debug5, debug2.write().flatMap(debug6::readTyped).result().orElseThrow(() -> new IllegalStateException("Could not parse the new horse")).getFirst()); // MagmaCube - decompile fix
         }
-        return (Pair<String, Typed<?>>)Pair.of((Object)debug1, (Object)debug2);
+        return Pair.of(debug1, debug2); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
index b63cd6e96a36b97ea5315d4dd7ccb5ff65d480e7..085a29b77c2daff0f03de26f0fc4cf651f67e84f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
@@ -26,11 +26,11 @@ public class EntityIdFix extends DataFix
         final TaggedChoice.TaggedChoiceType<String> debug2 = (TaggedChoice.TaggedChoiceType<String>)this.getOutputSchema().findChoiceType(References.ENTITY);
         final Type<?> debug3 = (Type<?>)this.getInputSchema().getType(References.ITEM_STACK);
         final Type<?> debug4 = (Type<?>)this.getOutputSchema().getType(References.ITEM_STACK);
-        return TypeRewriteRule.seq(this.convertUnchecked("item stack entity name hook converter", (Type)debug3, (Type)debug4), this.fixTypeEverywhere("EntityIdFix", (Type)debug, (Type)debug2, debug0 -> debug0 -> debug0.mapFirst(debug0 -> EntityIdFix.ID_MAP.getOrDefault(debug0, debug0))));
+        return TypeRewriteRule.seq(this.convertUnchecked("item stack entity name hook converter", (Type)debug3, (Type)debug4), this.fixTypeEverywhere("EntityIdFix", debug, debug2, debug0 -> debug0l -> debug0l.mapFirst(debug0ll -> EntityIdFix.ID_MAP.getOrDefault(debug0ll, debug0ll)))); // MagmaCube - decompile fix
     }
     
     static {
-        ID_MAP = (Map)DataFixUtils.make((Object)Maps.newHashMap(), debug0 -> {
+        ID_MAP = DataFixUtils.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put("AreaEffectCloud", "minecraft:area_effect_cloud");
             debug0.put("ArmorStand", "minecraft:armor_stand");
             debug0.put("Arrow", "minecraft:arrow");
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
index 86d8fbe043247bb8cb2a928cf2f5ccf8a5bb2cef..e0a69b96a84f37456aeab2724535268cf795e5d9 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
@@ -28,24 +28,19 @@ public class EntityMinecartIdentifiersFix extends DataFix
     public TypeRewriteRule makeRule() {
         final TaggedChoice.TaggedChoiceType<String> debug4 = (TaggedChoice.TaggedChoiceType<String>)this.getInputSchema().findChoiceType(References.ENTITY);
         final TaggedChoice.TaggedChoiceType<String> debug5 = (TaggedChoice.TaggedChoiceType<String>)this.getOutputSchema().findChoiceType(References.ENTITY);
-        final TaggedChoice.TaggedChoiceType taggedChoiceType;
-        final Typed<? extends Pair<String, ?>> debug6;
-        final Dynamic<?> debug7;
-        final int debug8;
-        String debug9;
-        final TaggedChoice.TaggedChoiceType taggedChoiceType2;
-        return this.fixTypeEverywhere("EntityMinecartIdentifiersFix", (Type)debug4, (Type)debug5, debug2 -> debug3 -> {
+        return this.fixTypeEverywhere("EntityMinecartIdentifiersFix", debug4, debug5, debug2 -> debug3 -> { // MagmaCube - decompile fix
             if (Objects.equals(debug3.getFirst(), "Minecart")) {
-                debug6 = (Typed<? extends Pair<String, ?>>)taggedChoiceType.point(debug2, (Object)"Minecart", debug3.getSecond()).orElseThrow(IllegalStateException::new);
-                debug7 = (Dynamic<?>)debug6.getOrCreate(DSL.remainderFinder());
-                debug8 = debug7.get("Type").asInt(0);
+                Typed<? extends Pair<String, ?>> debug6 = (Typed<? extends Pair<String, ?>>)debug4.point(debug2, "Minecart", debug3.getSecond()).orElseThrow(IllegalStateException::new); // MagmaCube - decompile fix
+                Dynamic<?> debug7 = (Dynamic<?>)debug6.getOrCreate(DSL.remainderFinder()); // MagmaCube - decompile fix
+                int debug8 = debug7.get("Type").asInt(0); // MagmaCube - decompile fix
+                String debug9; // MagmaCube - decompile fix
                 if (debug8 > 0 && debug8 < EntityMinecartIdentifiersFix.MINECART_BY_ID.size()) {
                     debug9 = EntityMinecartIdentifiersFix.MINECART_BY_ID.get(debug8);
                 }
                 else {
                     debug9 = "MinecartRideable";
                 }
-                return Pair.of((Object)debug9, debug6.write().map(debug2 -> taggedChoiceType2.types().get(debug9).read(debug2)).result().orElseThrow(() -> new IllegalStateException("Could not read the new minecart.")));
+                return Pair.of(debug9, debug6.write().map(debug2l -> debug5.types().get(debug9).read(debug2l)).result().orElseThrow(() -> new IllegalStateException("Could not read the new minecart."))); // MagmaCube - decompile fix
             }
             else {
                 return debug3;
@@ -54,6 +49,6 @@ public class EntityMinecartIdentifiersFix extends DataFix
     }
     
     static {
-        MINECART_BY_ID = Lists.newArrayList((Object[])new String[] { "MinecartRideable", "MinecartChest", "MinecartFurnace" });
+        MINECART_BY_ID = Lists.newArrayList(new String[] { "MinecartRideable", "MinecartChest", "MinecartFurnace" }); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityPaintingItemFrameDirectionFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityPaintingItemFrameDirectionFix.java
index e960f41cd8e6ceb6e30634dad1d474add89a50a6..eb7b24403f46a6ec9f7d9fda9de97e884040d718 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityPaintingItemFrameDirectionFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityPaintingItemFrameDirectionFix.java
@@ -46,8 +46,8 @@ public class EntityPaintingItemFrameDirectionFix extends DataFix
         final Type<?> debug6 = (Type<?>)this.getInputSchema().getChoiceType(References.ENTITY, "ItemFrame");
         final OpticFinder<?> debug7 = (OpticFinder<?>)DSL.namedChoice("ItemFrame", (Type)debug6);
         final Type<?> debug8 = (Type<?>)this.getInputSchema().getType(References.ENTITY);
-        final TypeRewriteRule debug9 = this.fixTypeEverywhereTyped("EntityPaintingFix", (Type)debug8, debug3 -> debug3.updateTyped((OpticFinder)debug5, (Type)debug4, debug1 -> debug1.update(DSL.remainderFinder(), debug1 -> this.doFix(debug1, true, false))));
-        final TypeRewriteRule debug10 = this.fixTypeEverywhereTyped("EntityItemFrameFix", (Type)debug8, debug3 -> debug3.updateTyped((OpticFinder)debug7, (Type)debug6, debug1 -> debug1.update(DSL.remainderFinder(), debug1 -> this.doFix(debug1, false, true))));
+        final TypeRewriteRule debug9 = this.fixTypeEverywhereTyped("EntityPaintingFix", (Type)debug8, debug3 -> debug3.updateTyped((OpticFinder)debug5, (Type)debug4, debug1 -> debug1.update(DSL.remainderFinder(), debug1l -> this.doFix(debug1l, true, false)))); // MagmaCube - decompile fix
+        final TypeRewriteRule debug10 = this.fixTypeEverywhereTyped("EntityItemFrameFix", (Type)debug8, debug3 -> debug3.updateTyped((OpticFinder)debug7, (Type)debug6, debug1 -> debug1.update(DSL.remainderFinder(), debug1l -> this.doFix(debug1l, false, true)))); // MagmaCube - decompile fix
         return TypeRewriteRule.seq(debug9, debug10);
     }
     
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityPaintingMotiveFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityPaintingMotiveFix.java
index 843289c3679167ace2d95c0372b5172a7f4b5785..d11b1599e4742c892df3abc240b4306a145328b9 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityPaintingMotiveFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityPaintingMotiveFix.java
@@ -32,11 +32,11 @@ public class EntityPaintingMotiveFix extends NamedEntityFix
     
     @Override
     protected Typed<?> fix(final Typed<?> debug1) {
-        return (Typed<?>)debug1.update(DSL.remainderFinder(), (Function)this::fixTag);
+        return (Typed<?>)debug1.update(DSL.remainderFinder(), this::fixTag); // MagmaCube - decompile fix
     }
     
     static {
-        MAP = (Map)DataFixUtils.make((Object)Maps.newHashMap(), debug0 -> {
+        MAP = (Map)DataFixUtils.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put("donkeykong", "donkey_kong");
             debug0.put("burningskull", "burning_skull");
             debug0.put("skullandroses", "skull_and_roses");
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
index ba52a1e43171d6c8a43fc8525d87f4fa7ed0a363..74b5e3df0d2ed031f2cf9cebbac88fc28f576ee6 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
@@ -22,26 +22,20 @@ public abstract class EntityRenameFix extends DataFix
     public TypeRewriteRule makeRule() {
         final TaggedChoice.TaggedChoiceType<String> debug5 = (TaggedChoice.TaggedChoiceType<String>)this.getInputSchema().findChoiceType(References.ENTITY);
         final TaggedChoice.TaggedChoiceType<String> debug6 = (TaggedChoice.TaggedChoiceType<String>)this.getOutputSchema().findChoiceType(References.ENTITY);
-        final String debug7;
-        final TaggedChoice.TaggedChoiceType taggedChoiceType;
-        final Type<?> debug8;
-        final Pair<String, Typed<?>> debug9;
-        final TaggedChoice.TaggedChoiceType taggedChoiceType2;
-        final Type<?> debug10;
-        final IllegalStateException ex;
-        return this.fixTypeEverywhere(this.name, (Type)debug5, (Type)debug6, debug3 -> debug4 -> {
-            debug7 = (String)debug4.getFirst();
-            debug8 = (Type<?>)taggedChoiceType.types().get(debug7);
-            debug9 = this.fix(debug7, this.getEntity(debug4.getSecond(), debug3, debug8));
-            debug10 = (Type<?>)taggedChoiceType2.types().get(debug9.getFirst());
-            if (!debug10.equals((Object)((Typed)debug9.getSecond()).getType(), true, true)) {
-                new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", debug10, ((Typed)debug9.getSecond()).getType()));
-                throw ex;
+        // MagmaCube start - decompile fix
+        return this.fixTypeEverywhere(this.name, debug5, debug6, debug3 -> debug4 -> {
+            String debug7 = (String)debug4.getFirst();
+            Type<?> debug8 = (Type<?>)debug5.types().get(debug7);
+            Pair<String, Typed<?>> debug9 = this.fix(debug7, this.getEntity(debug4.getSecond(), debug3, debug8));
+            Type<?> debug10 = (Type<?>)debug6.types().get(debug9.getFirst());
+            if (!debug10.equals((Object)(debug9.getSecond()).getType(), true, true)) {
+                throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", debug10, (debug9.getSecond()).getType()));
             }
             else {
                 return Pair.of(debug9.getFirst(), ((Typed)debug9.getSecond()).getValue());
             }
         });
+        // MagmaCube end - decompile fix
     }
     
     private <A> Typed<A> getEntity(final Object debug1, final DynamicOps<?> debug2, final Type<A> debug3) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
index fb50f01456ae38edffa68045590f7d9310465324..61186f9488870903fdc928231637eaa460e775a8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
@@ -62,22 +62,33 @@ extends DataFix {
         OpticFinder debug12 = DSL.typeFinder(debug4);
         Type debug13 = debug1.getType(References.PLAYER);
         Type debug14 = debug2.getType(References.PLAYER);
-        return TypeRewriteRule.seq((TypeRewriteRule)this.fixTypeEverywhere("EntityRidingToPassengerFix", debug6, debug7, debug5 -> debug6 -> {
-            Optional<Object> debug7 = Optional.empty();
-            Pair debug8 = debug6;
+        // MagmaCube start - decompile fix
+        return TypeRewriteRule.seq((TypeRewriteRule)this.fixTypeEverywhere("EntityRidingToPassengerFix", debug6, debug7, debug5 -> debug6l -> { // MagmaCube - decompile fix
+            Optional<Object> debug7l = Optional.empty();
+            Pair debug8l = (Pair) debug6l;
             while (true) {
-                Either debug9 = (Either)DataFixUtils.orElse(debug7.map(debug4 -> {
-                    OpticFinder debug10 = (Typed)debug4.pointTyped(debug5).orElseThrow(() -> new IllegalStateException("Could not create new entity tree"));
-                    Object debug6 = debug10.set(debug11, debug4).getOptional(debug12).orElseThrow(() -> new IllegalStateException("Should always have an entity tree here"));
-                    return Either.left((Object)ImmutableList.of(debug6));
-                }), (Object)Either.right((Object)DSL.unit()));
-                debug7 = Optional.of(Pair.of((Object)References.ENTITY_TREE.typeName(), (Object)Pair.of((Object)debug9, (Object)((Pair)debug8.getSecond()).getSecond())));
-                Optional debug10 = ((Either)((Pair)debug8.getSecond()).getFirst()).left();
-                if (!debug10.isPresent()) break;
-                debug8 = (Pair)new Typed(debug3, debug5, debug10.get()).getOptional(debug10).orElseThrow(() -> new IllegalStateException("Should always have an entity here"));
+                Either debug9l = DataFixUtils.orElse(debug7l.map(debug4l -> {
+                    Typed<NewEntityTree> debug10l = debug4.pointTyped(debug5).orElseThrow(() -> new IllegalStateException("Could not create new entity tree"));
+                    Object debug6ll = null;
+                    try {
+                        debug6ll = debug10l.set(debug11, debug4l).getOptional(debug12).orElseThrow(() -> new IllegalStateException("Should always have an entity tree here"));
+                    } catch (Throwable throwable) {
+                        throwable.printStackTrace();
+                    }
+                    return Either.left(ImmutableList.of(debug6ll));
+                }), Either.right(DSL.unit()));
+                debug7l = Optional.of(Pair.of((Object)References.ENTITY_TREE.typeName(), (Object)Pair.of((Object)debug9l, (Object)((Pair)debug8l.getSecond()).getSecond())));
+                Optional debug10l = ((Either)((Pair)debug8l.getSecond()).getFirst()).left();
+                if (!debug10l.isPresent()) break;
+                try {
+                    debug8l = (Pair)new Typed(debug3, debug5, debug10l.get()).getOptional(debug10).orElseThrow(() -> new IllegalStateException("Should always have an entity here"));
+                } catch (Throwable throwable) {
+                    throwable.printStackTrace();
+                }
             }
-            return (Pair)debug7.orElseThrow(() -> new IllegalStateException("Should always have an entity tree here"));
+            return (Pair)debug7l.orElseThrow(() -> new IllegalStateException("Should always have an entity tree here"));
         }), (TypeRewriteRule)this.writeAndRead("player RootVehicle injecter", debug13, debug14));
+        // MagmaCube end - decompile fix
     }
 }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityShulkerColorFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityShulkerColorFix.java
index 09f74a7d8a343991cdcdd1f88e5f58b2a4ad90e6..b2172f13f9920c84942d2f2d43977cf7e5c38500 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityShulkerColorFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityShulkerColorFix.java
@@ -13,7 +13,7 @@ public class EntityShulkerColorFix extends NamedEntityFix
     }
     
     public Dynamic<?> fixTag(final Dynamic<?> debug1) {
-        if (!debug1.get("Color").map((Function)Dynamic::asNumber).result().isPresent()) {
+        if (!debug1.get("Color").map(Dynamic::asNumber).result().isPresent()) { // MagmaCube - decompile fix
             return (Dynamic<?>)debug1.set("Color", debug1.createByte((byte)10));
         }
         return debug1;
@@ -21,6 +21,6 @@ public class EntityShulkerColorFix extends NamedEntityFix
     
     @Override
     protected Typed<?> fix(final Typed<?> debug1) {
-        return (Typed<?>)debug1.update(DSL.remainderFinder(), (Function)this::fixTag);
+        return (Typed<?>)debug1.update(DSL.remainderFinder(), this::fixTag); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityShulkerRotationFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityShulkerRotationFix.java
index 399136f14bcaea118628d63fcc1dd755c91fb7bd..cb19323c518f671afece776006a802e8ad04157d 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityShulkerRotationFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityShulkerRotationFix.java
@@ -18,13 +18,13 @@ public class EntityShulkerRotationFix extends NamedEntityFix
         final List<Double> debug2 = (List<Double>)debug1.get("Rotation").asList(debug0 -> debug0.asDouble(180.0));
         if (!debug2.isEmpty()) {
             debug2.set(0, debug2.get(0) - 180.0);
-            return (Dynamic<?>)debug1.set("Rotation", debug1.createList((Stream)debug2.stream().map((Function<? super Object, ?>)debug1::createDouble)));
+            return (Dynamic<?>)debug1.set("Rotation", debug1.createList((Stream)debug2.stream().map(debug1::createDouble))); // MagmaCube - decompile fix
         }
         return debug1;
     }
     
     @Override
     protected Typed<?> fix(final Typed<?> debug1) {
-        return (Typed<?>)debug1.update(DSL.remainderFinder(), (Function)this::fixTag);
+        return (Typed<?>)debug1.update(DSL.remainderFinder(), this::fixTag); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
index 269c87753ab23f070cf9bdc744c7388c7d7bb3fe..fce4cbdbb885a57d912404c1b4faf85cacab7695 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
@@ -27,48 +27,37 @@ public class EntityUUIDFix extends AbstractUUIDFix
     }
     
     protected TypeRewriteRule makeRule() {
-        final Iterator<String> iterator;
-        String debug2;
-        final Iterator<String> iterator2;
-        String debug3;
-        final Iterator<String> iterator3;
-        String debug4;
-        final Iterator<String> iterator4;
-        String debug5;
-        final Iterator<String> iterator5;
-        String debug6;
-        final Iterator<String> iterator6;
-        String debug7;
+        // MagmaCube start - decompile fix
         return this.fixTypeEverywhereTyped("EntityUUIDFixes", this.getInputSchema().getType(this.typeReference), debug1 -> {
-            debug1 = (Typed<?>)debug1.update(DSL.remainderFinder(), (Function)EntityUUIDFix::updateEntityUUID);
-            EntityUUIDFix.ABSTRACT_HORSES.iterator();
+            debug1 = (Typed<?>)debug1.update(DSL.remainderFinder(), EntityUUIDFix::updateEntityUUID); // MagmaCube - decompile fix
+            Iterator<String> iterator = EntityUUIDFix.ABSTRACT_HORSES.iterator();
             while (iterator.hasNext()) {
-                debug2 = iterator.next();
+                String debug2 = iterator.next();
                 debug1 = this.updateNamedChoice(debug1, debug2, EntityUUIDFix::updateAnimalOwner);
             }
-            EntityUUIDFix.TAMEABLE_ANIMALS.iterator();
+            Iterator<String> iterator2 = EntityUUIDFix.TAMEABLE_ANIMALS.iterator();
             while (iterator2.hasNext()) {
-                debug3 = iterator2.next();
+                String debug3 = iterator2.next();
                 debug1 = this.updateNamedChoice(debug1, debug3, EntityUUIDFix::updateAnimalOwner);
             }
-            EntityUUIDFix.ANIMALS.iterator();
+            Iterator<String> iterator3 = EntityUUIDFix.ANIMALS.iterator();
             while (iterator3.hasNext()) {
-                debug4 = iterator3.next();
+                String debug4 = iterator3.next();
                 debug1 = this.updateNamedChoice(debug1, debug4, EntityUUIDFix::updateAnimal);
             }
-            EntityUUIDFix.MOBS.iterator();
+            Iterator<String> iterator4 = EntityUUIDFix.MOBS.iterator();
             while (iterator4.hasNext()) {
-                debug5 = iterator4.next();
+                String debug5 = iterator4.next();
                 debug1 = this.updateNamedChoice(debug1, debug5, EntityUUIDFix::updateMob);
             }
-            EntityUUIDFix.LIVING_ENTITIES.iterator();
+            Iterator<String> iterator5 = EntityUUIDFix.LIVING_ENTITIES.iterator();
             while (iterator5.hasNext()) {
-                debug6 = iterator5.next();
+                String debug6 = iterator5.next();
                 debug1 = this.updateNamedChoice(debug1, debug6, EntityUUIDFix::updateLivingEntity);
             }
-            EntityUUIDFix.PROJECTILES.iterator();
+            Iterator<String> iterator6 = EntityUUIDFix.PROJECTILES.iterator();
             while (iterator6.hasNext()) {
-                debug7 = iterator6.next();
+                String debug7 = iterator6.next();
                 debug1 = this.updateNamedChoice(debug1, debug7, EntityUUIDFix::updateProjectile);
             }
             debug1 = this.updateNamedChoice(debug1, "minecraft:bee", EntityUUIDFix::updateHurtBy);
@@ -82,12 +71,13 @@ public class EntityUUIDFix extends AbstractUUIDFix
             debug1 = this.updateNamedChoice(debug1, "minecraft:piglin", EntityUUIDFix::updatePiglin);
             return debug1;
         });
+        // MagmaCube end - decompile fix
     }
     
     private static Dynamic<?> updatePiglin(final Dynamic<?> debug0) {
-        return (Dynamic<?>)debug0.update("Brain", debug0 -> debug0.update("memories", debug0 -> debug0.update("minecraft:angry_at", debug0 -> AbstractUUIDFix.replaceUUIDString(debug0, "value", "value").orElseGet(() -> {
+        return (Dynamic<?>)debug0.update("Brain", debug0l -> debug0l.update("memories", debug0ll -> debug0ll.update("minecraft:angry_at", debug0lll -> AbstractUUIDFix.replaceUUIDString(debug0lll, "value", "value").orElseGet(() -> { // MagmaCube - decompile fix
             EntityUUIDFix.LOGGER.warn("angry_at has no value.");
-            return debug0;
+            return debug0lll; // MagmaCube - decompile fix
         }))));
     }
     
@@ -114,9 +104,9 @@ public class EntityUUIDFix extends AbstractUUIDFix
     }
     
     private static Dynamic<?> updateFox(final Dynamic<?> debug0) {
-        final Optional<Dynamic<?>> debug2 = debug0.get("TrustedUUIDs").result().map(debug1 -> debug0.createList((Stream)debug1.asStream().map(debug0 -> AbstractUUIDFix.createUUIDFromML(debug0).orElseGet(() -> {
+        final Optional<Dynamic<?>> debug2 = debug0.get("TrustedUUIDs").result().map(debug1 -> debug0.createList(debug1.asStream().map(debug0l -> AbstractUUIDFix.createUUIDFromML(debug0l).orElseGet(() -> { // MagmaCube - decompile fix
             EntityUUIDFix.LOGGER.warn("Trusted contained invalid data.");
-            return debug0;
+            return debug0l;
         }))));
         return (Dynamic<?>)DataFixUtils.orElse((Optional)debug2.map(debug1 -> debug0.remove("TrustedUUIDs").set("Trusted", debug1)), (Object)debug0);
     }
@@ -136,11 +126,11 @@ public class EntityUUIDFix extends AbstractUUIDFix
     }
     
     private static Dynamic<?> updateMob(final Dynamic<?> debug0) {
-        return (Dynamic<?>)updateLivingEntity(debug0).update("Leash", debug0 -> AbstractUUIDFix.replaceUUIDLeastMost(debug0, "UUID", "UUID").orElse(debug0));
+        return (Dynamic<?>)updateLivingEntity(debug0).update("Leash", debug0l -> AbstractUUIDFix.replaceUUIDLeastMost(debug0l, "UUID", "UUID").orElse(debug0l)); // MagmaCube - decompile fix
     }
     
     public static Dynamic<?> updateLivingEntity(final Dynamic<?> debug0) {
-        return (Dynamic<?>)debug0.update("Attributes", debug1 -> debug0.createList((Stream)debug1.asStream().map(debug0 -> debug0.update("Modifiers", debug1 -> debug0.createList((Stream)debug1.asStream().map(debug0 -> AbstractUUIDFix.replaceUUIDLeastMost(debug0, "UUID", "UUID").orElse(debug0)))))));
+        return (Dynamic<?>)debug0.update("Attributes", debug1 -> debug0.createList(debug1.asStream().map(debug0l -> debug0l.update("Modifiers", debug1l -> debug0l.createList(debug1l.asStream().map(debug0ll -> AbstractUUIDFix.replaceUUIDLeastMost(debug0ll, "UUID", "UUID").orElse(debug0ll))))))); // MagmaCube - decompile fix
     }
     
     private static Dynamic<?> updateProjectile(final Dynamic<?> debug0) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
index 2d916e0f7e24c552bed917c21441c4df67cb5337..a7ff3e7150c9ea56f556e8955bcaf531e3cab384 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
@@ -35,29 +35,23 @@ public class FurnaceRecipeFix extends DataFix
         final Type<?> debug16 = (Type<?>)this.getOutputSchema().getChoiceType(References.BLOCK_ENTITY, "minecraft:smoker");
         final Type<?> debug17 = (Type<?>)this.getInputSchema().getType(References.BLOCK_ENTITY);
         final Type<?> debug18 = (Type<?>)this.getOutputSchema().getType(References.BLOCK_ENTITY);
-        final OpticFinder opticFinder;
-        final Type type;
-        final com.mojang.datafixers.types.Type<com.mojang.datafixers.util.Pair<com.mojang.datafixers.util.Either<com.mojang.datafixers.util.Pair<List<com.mojang.datafixers.util.Pair<R, Integer>>, Dynamic<?>>, Unit>, Dynamic<?>>> debug19;
-        return this.fixTypeEverywhereTyped("FurnaceRecipesFix", (Type)debug17, (Type)debug18, debug9 -> debug9.updateTyped(opticFinder, type, debug3 -> this.updateFurnaceContents(debug1, debug19, debug3)).updateTyped((OpticFinder)debug12, (Type)debug15, debug3 -> this.updateFurnaceContents(debug1, debug19, debug3)).updateTyped((OpticFinder)debug13, (Type)debug16, debug3 -> this.updateFurnaceContents(debug1, debug19, debug3)));
+        return this.fixTypeEverywhereTyped("FurnaceRecipesFix", debug17, debug18, debug9 -> debug9.updateTyped(debug11, debug14, debug3 -> this.updateFurnaceContents(debug1, debug10, debug3)).updateTyped(debug12, debug15, debug3 -> this.updateFurnaceContents(debug1, debug10, debug3)).updateTyped((OpticFinder)debug13, (Type)debug16, debug3 -> this.updateFurnaceContents(debug1, debug10, debug3))); // MagmaCube - decompile fix
     }
     
     private <R> Typed<?> updateFurnaceContents(final Type<R> debug1, final Type<Pair<Either<Pair<List<Pair<R, Integer>>, Dynamic<?>>, Unit>, Dynamic<?>>> debug2, final Typed<?> debug3) {
         Dynamic<?> debug4 = (Dynamic<?>)debug3.getOrCreate(DSL.remainderFinder());
         final int debug5 = debug4.get("RecipesUsedSize").asInt(0);
         debug4 = (Dynamic<?>)debug4.remove("RecipesUsedSize");
-        final List<Pair<R, Integer>> debug6 = (List<Pair<R, Integer>>)Lists.newArrayList();
+        final List<Pair<R, Integer>> debug6 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug7 = 0; debug7 < debug5; ++debug7) {
             final String debug8 = "RecipeLocation" + debug7;
             final String debug9 = "RecipeAmount" + debug7;
             final Optional<? extends Dynamic<?>> debug10 = (Optional<? extends Dynamic<?>>)debug4.get(debug8).result();
             final int debug11 = debug4.get(debug9).asInt(0);
             if (debug11 > 0) {
-                final Optional<? extends Pair<Object, ? extends Dynamic<?>>> debug12;
-                final List<Pair> list;
-                final int i;
-                debug10.ifPresent(debug3 -> {
-                    debug12 = (Optional<? extends Pair<Object, ? extends Dynamic<?>>>)debug1.read(debug3).result();
-                    debug12.ifPresent(debug2 -> list.add(Pair.of(debug2.getFirst(), (Object)i)));
+                debug10.ifPresent(debug3l -> { // MagmaCube - decompile fix
+                    Optional<? extends Pair<Object, ? extends Dynamic<?>>> debug12 = (Optional<? extends Pair<Object, ? extends Dynamic<?>>>)debug1.read(debug3l).result(); // MagmaCube - decompile fix
+                    debug12.ifPresent(debug2l -> debug6.add(Pair.of((R) debug2l.getFirst(), debug11))); // MagmaCube - decompile fix
                     return;
                 });
             }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/HeightmapRenamingFix.java b/src/main/java/net/minecraft/util/datafix/fixes/HeightmapRenamingFix.java
index 852f121e3b4d26a7b2a9cb273fb6e82b2f5a21e1..92c4aa850df66bcb4c0ef0c461b674119ec08b06 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/HeightmapRenamingFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/HeightmapRenamingFix.java
@@ -20,7 +20,7 @@ public class HeightmapRenamingFix extends DataFix
     protected TypeRewriteRule makeRule() {
         final Type<?> debug3 = (Type<?>)this.getInputSchema().getType(References.CHUNK);
         final OpticFinder<?> debug4 = (OpticFinder<?>)debug3.findField("Level");
-        return this.fixTypeEverywhereTyped("HeightmapRenamingFix", (Type)debug3, debug2 -> debug2.updateTyped((OpticFinder)debug4, debug1 -> debug1.update(DSL.remainderFinder(), (Function)this::fix)));
+        return this.fixTypeEverywhereTyped("HeightmapRenamingFix", (Type)debug3, debug2 -> debug2.updateTyped((OpticFinder)debug4, debug1 -> debug1.update(DSL.remainderFinder(), this::fix))); // MagmaCube - decompile fix
     }
     
     private Dynamic<?> fix(final Dynamic<?> debug1) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java b/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
index 8db2889992a53c9f585eebbefb2e197a77248390..549f5fff2a552ba702f567746d7de9c5a43a7cca 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
@@ -18,19 +18,19 @@ public class IglooMetadataRemovalFix extends DataFix
     protected TypeRewriteRule makeRule() {
         final Type<?> debug1 = (Type<?>)this.getInputSchema().getType(References.STRUCTURE_FEATURE);
         final Type<?> debug2 = (Type<?>)this.getOutputSchema().getType(References.STRUCTURE_FEATURE);
-        return this.writeFixAndRead("IglooMetadataRemovalFix", (Type)debug1, (Type)debug2, (Function)IglooMetadataRemovalFix::fixTag);
+        return this.writeFixAndRead("IglooMetadataRemovalFix", (Type)debug1, (Type)debug2, IglooMetadataRemovalFix::fixTag); // MagmaCube - decompile fix
     }
     
     private static <T> Dynamic<T> fixTag(final Dynamic<T> debug0) {
-        final boolean debug = debug0.get("Children").asStreamOpt().map(debug0 -> debug0.allMatch(IglooMetadataRemovalFix::isIglooPiece)).result().orElse(false);
+        final boolean debug = debug0.get("Children").asStreamOpt().map(debug0l -> debug0l.allMatch(IglooMetadataRemovalFix::isIglooPiece)).result().orElse(false);
         if (debug) {
             return (Dynamic<T>)debug0.set("id", debug0.createString("Igloo")).remove("Children");
         }
-        return (Dynamic<T>)debug0.update("Children", (Function)IglooMetadataRemovalFix::removeIglooPieces);
+        return (Dynamic<T>)debug0.update("Children", IglooMetadataRemovalFix::removeIglooPieces); // MagmaCube - decompile fix
     }
     
     private static <T> Dynamic<T> removeIglooPieces(final Dynamic<T> debug0) {
-        return debug0.asStreamOpt().map(debug0 -> debug0.filter(debug0 -> !isIglooPiece(debug0))).map((Function)debug0::createList).result().orElse(debug0);
+        return debug0.asStreamOpt().map(debug0l -> debug0l.filter(debug0ll -> !isIglooPiece(debug0ll))).map(debug0::createList).result().orElse(debug0); // MagmaCube - decompile fix
     }
     
     private static boolean isIglooPiece(final Dynamic<?> debug0) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemCustomNameToComponentFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemCustomNameToComponentFix.java
index 7d08396aa3651eb3fcb3414e9eecc86878b8ffac..4c68f51df72291fea4f735cba69042e3b1f5f729 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemCustomNameToComponentFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemCustomNameToComponentFix.java
@@ -43,6 +43,6 @@ public class ItemCustomNameToComponentFix extends DataFix
     public TypeRewriteRule makeRule() {
         final Type<?> debug3 = (Type<?>)this.getInputSchema().getType(References.ITEM_STACK);
         final OpticFinder<?> debug4 = (OpticFinder<?>)debug3.findField("tag");
-        return this.fixTypeEverywhereTyped("ItemCustomNameToComponentFix", (Type)debug3, debug2 -> debug2.updateTyped((OpticFinder)debug4, debug1 -> debug1.update(DSL.remainderFinder(), (Function)this::fixTag)));
+        return this.fixTypeEverywhereTyped("ItemCustomNameToComponentFix", debug3, debug2 -> debug2.updateTyped(debug4, debug1 -> debug1.update(DSL.remainderFinder(), this::fixTag))); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemIdFix.java
index 2a8b615ef6ac4ff570454bfdd70fa29015a0b3ed..78e3c51821fdcabd59c513711c7290967250d9a5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemIdFix.java
@@ -30,327 +30,329 @@ public class ItemIdFix extends DataFix
         final Type<Either<Integer, Pair<String, String>>> debug3 = (Type<Either<Integer, Pair<String, String>>>)DSL.or(DSL.intType(), DSL.named(References.ITEM_NAME.typeName(), (Type)NamespacedSchema.namespacedString()));
         final Type<Pair<String, String>> debug4 = (Type<Pair<String, String>>)DSL.named(References.ITEM_NAME.typeName(), (Type)NamespacedSchema.namespacedString());
         final OpticFinder<Either<Integer, Pair<String, String>>> debug5 = (OpticFinder<Either<Integer, Pair<String, String>>>)DSL.fieldFinder("id", (Type)debug3);
-        return this.fixTypeEverywhereTyped("ItemIdFix", this.getInputSchema().getType(References.ITEM_STACK), this.getOutputSchema().getType(References.ITEM_STACK), debug2 -> debug2.update((OpticFinder)debug5, (Type)debug4, debug0 -> (Pair)debug0.map(debug0 -> Pair.of((Object)References.ITEM_NAME.typeName(), (Object)getItem(debug0)), debug0 -> debug0)));
+        return this.fixTypeEverywhereTyped("ItemIdFix", this.getInputSchema().getType(References.ITEM_STACK), this.getOutputSchema().getType(References.ITEM_STACK), debug2 -> debug2.update(debug5, debug4, debug0 -> debug0.map(debug0l -> Pair.of(References.ITEM_NAME.typeName(), getItem(debug0l)), debug0l -> debug0l))); // MagmaCube - decompile fix
     }
     
     static {
-        ITEM_NAMES = (Int2ObjectMap)DataFixUtils.make((Object)new Int2ObjectOpenHashMap(), debug0 -> {
-            debug0.put(1, (Object)"minecraft:stone");
-            debug0.put(2, (Object)"minecraft:grass");
-            debug0.put(3, (Object)"minecraft:dirt");
-            debug0.put(4, (Object)"minecraft:cobblestone");
-            debug0.put(5, (Object)"minecraft:planks");
-            debug0.put(6, (Object)"minecraft:sapling");
-            debug0.put(7, (Object)"minecraft:bedrock");
-            debug0.put(8, (Object)"minecraft:flowing_water");
-            debug0.put(9, (Object)"minecraft:water");
-            debug0.put(10, (Object)"minecraft:flowing_lava");
-            debug0.put(11, (Object)"minecraft:lava");
-            debug0.put(12, (Object)"minecraft:sand");
-            debug0.put(13, (Object)"minecraft:gravel");
-            debug0.put(14, (Object)"minecraft:gold_ore");
-            debug0.put(15, (Object)"minecraft:iron_ore");
-            debug0.put(16, (Object)"minecraft:coal_ore");
-            debug0.put(17, (Object)"minecraft:log");
-            debug0.put(18, (Object)"minecraft:leaves");
-            debug0.put(19, (Object)"minecraft:sponge");
-            debug0.put(20, (Object)"minecraft:glass");
-            debug0.put(21, (Object)"minecraft:lapis_ore");
-            debug0.put(22, (Object)"minecraft:lapis_block");
-            debug0.put(23, (Object)"minecraft:dispenser");
-            debug0.put(24, (Object)"minecraft:sandstone");
-            debug0.put(25, (Object)"minecraft:noteblock");
-            debug0.put(27, (Object)"minecraft:golden_rail");
-            debug0.put(28, (Object)"minecraft:detector_rail");
-            debug0.put(29, (Object)"minecraft:sticky_piston");
-            debug0.put(30, (Object)"minecraft:web");
-            debug0.put(31, (Object)"minecraft:tallgrass");
-            debug0.put(32, (Object)"minecraft:deadbush");
-            debug0.put(33, (Object)"minecraft:piston");
-            debug0.put(35, (Object)"minecraft:wool");
-            debug0.put(37, (Object)"minecraft:yellow_flower");
-            debug0.put(38, (Object)"minecraft:red_flower");
-            debug0.put(39, (Object)"minecraft:brown_mushroom");
-            debug0.put(40, (Object)"minecraft:red_mushroom");
-            debug0.put(41, (Object)"minecraft:gold_block");
-            debug0.put(42, (Object)"minecraft:iron_block");
-            debug0.put(43, (Object)"minecraft:double_stone_slab");
-            debug0.put(44, (Object)"minecraft:stone_slab");
-            debug0.put(45, (Object)"minecraft:brick_block");
-            debug0.put(46, (Object)"minecraft:tnt");
-            debug0.put(47, (Object)"minecraft:bookshelf");
-            debug0.put(48, (Object)"minecraft:mossy_cobblestone");
-            debug0.put(49, (Object)"minecraft:obsidian");
-            debug0.put(50, (Object)"minecraft:torch");
-            debug0.put(51, (Object)"minecraft:fire");
-            debug0.put(52, (Object)"minecraft:mob_spawner");
-            debug0.put(53, (Object)"minecraft:oak_stairs");
-            debug0.put(54, (Object)"minecraft:chest");
-            debug0.put(56, (Object)"minecraft:diamond_ore");
-            debug0.put(57, (Object)"minecraft:diamond_block");
-            debug0.put(58, (Object)"minecraft:crafting_table");
-            debug0.put(60, (Object)"minecraft:farmland");
-            debug0.put(61, (Object)"minecraft:furnace");
-            debug0.put(62, (Object)"minecraft:lit_furnace");
-            debug0.put(65, (Object)"minecraft:ladder");
-            debug0.put(66, (Object)"minecraft:rail");
-            debug0.put(67, (Object)"minecraft:stone_stairs");
-            debug0.put(69, (Object)"minecraft:lever");
-            debug0.put(70, (Object)"minecraft:stone_pressure_plate");
-            debug0.put(72, (Object)"minecraft:wooden_pressure_plate");
-            debug0.put(73, (Object)"minecraft:redstone_ore");
-            debug0.put(76, (Object)"minecraft:redstone_torch");
-            debug0.put(77, (Object)"minecraft:stone_button");
-            debug0.put(78, (Object)"minecraft:snow_layer");
-            debug0.put(79, (Object)"minecraft:ice");
-            debug0.put(80, (Object)"minecraft:snow");
-            debug0.put(81, (Object)"minecraft:cactus");
-            debug0.put(82, (Object)"minecraft:clay");
-            debug0.put(84, (Object)"minecraft:jukebox");
-            debug0.put(85, (Object)"minecraft:fence");
-            debug0.put(86, (Object)"minecraft:pumpkin");
-            debug0.put(87, (Object)"minecraft:netherrack");
-            debug0.put(88, (Object)"minecraft:soul_sand");
-            debug0.put(89, (Object)"minecraft:glowstone");
-            debug0.put(90, (Object)"minecraft:portal");
-            debug0.put(91, (Object)"minecraft:lit_pumpkin");
-            debug0.put(95, (Object)"minecraft:stained_glass");
-            debug0.put(96, (Object)"minecraft:trapdoor");
-            debug0.put(97, (Object)"minecraft:monster_egg");
-            debug0.put(98, (Object)"minecraft:stonebrick");
-            debug0.put(99, (Object)"minecraft:brown_mushroom_block");
-            debug0.put(100, (Object)"minecraft:red_mushroom_block");
-            debug0.put(101, (Object)"minecraft:iron_bars");
-            debug0.put(102, (Object)"minecraft:glass_pane");
-            debug0.put(103, (Object)"minecraft:melon_block");
-            debug0.put(106, (Object)"minecraft:vine");
-            debug0.put(107, (Object)"minecraft:fence_gate");
-            debug0.put(108, (Object)"minecraft:brick_stairs");
-            debug0.put(109, (Object)"minecraft:stone_brick_stairs");
-            debug0.put(110, (Object)"minecraft:mycelium");
-            debug0.put(111, (Object)"minecraft:waterlily");
-            debug0.put(112, (Object)"minecraft:nether_brick");
-            debug0.put(113, (Object)"minecraft:nether_brick_fence");
-            debug0.put(114, (Object)"minecraft:nether_brick_stairs");
-            debug0.put(116, (Object)"minecraft:enchanting_table");
-            debug0.put(119, (Object)"minecraft:end_portal");
-            debug0.put(120, (Object)"minecraft:end_portal_frame");
-            debug0.put(121, (Object)"minecraft:end_stone");
-            debug0.put(122, (Object)"minecraft:dragon_egg");
-            debug0.put(123, (Object)"minecraft:redstone_lamp");
-            debug0.put(125, (Object)"minecraft:double_wooden_slab");
-            debug0.put(126, (Object)"minecraft:wooden_slab");
-            debug0.put(127, (Object)"minecraft:cocoa");
-            debug0.put(128, (Object)"minecraft:sandstone_stairs");
-            debug0.put(129, (Object)"minecraft:emerald_ore");
-            debug0.put(130, (Object)"minecraft:ender_chest");
-            debug0.put(131, (Object)"minecraft:tripwire_hook");
-            debug0.put(133, (Object)"minecraft:emerald_block");
-            debug0.put(134, (Object)"minecraft:spruce_stairs");
-            debug0.put(135, (Object)"minecraft:birch_stairs");
-            debug0.put(136, (Object)"minecraft:jungle_stairs");
-            debug0.put(137, (Object)"minecraft:command_block");
-            debug0.put(138, (Object)"minecraft:beacon");
-            debug0.put(139, (Object)"minecraft:cobblestone_wall");
-            debug0.put(141, (Object)"minecraft:carrots");
-            debug0.put(142, (Object)"minecraft:potatoes");
-            debug0.put(143, (Object)"minecraft:wooden_button");
-            debug0.put(145, (Object)"minecraft:anvil");
-            debug0.put(146, (Object)"minecraft:trapped_chest");
-            debug0.put(147, (Object)"minecraft:light_weighted_pressure_plate");
-            debug0.put(148, (Object)"minecraft:heavy_weighted_pressure_plate");
-            debug0.put(151, (Object)"minecraft:daylight_detector");
-            debug0.put(152, (Object)"minecraft:redstone_block");
-            debug0.put(153, (Object)"minecraft:quartz_ore");
-            debug0.put(154, (Object)"minecraft:hopper");
-            debug0.put(155, (Object)"minecraft:quartz_block");
-            debug0.put(156, (Object)"minecraft:quartz_stairs");
-            debug0.put(157, (Object)"minecraft:activator_rail");
-            debug0.put(158, (Object)"minecraft:dropper");
-            debug0.put(159, (Object)"minecraft:stained_hardened_clay");
-            debug0.put(160, (Object)"minecraft:stained_glass_pane");
-            debug0.put(161, (Object)"minecraft:leaves2");
-            debug0.put(162, (Object)"minecraft:log2");
-            debug0.put(163, (Object)"minecraft:acacia_stairs");
-            debug0.put(164, (Object)"minecraft:dark_oak_stairs");
-            debug0.put(170, (Object)"minecraft:hay_block");
-            debug0.put(171, (Object)"minecraft:carpet");
-            debug0.put(172, (Object)"minecraft:hardened_clay");
-            debug0.put(173, (Object)"minecraft:coal_block");
-            debug0.put(174, (Object)"minecraft:packed_ice");
-            debug0.put(175, (Object)"minecraft:double_plant");
-            debug0.put(256, (Object)"minecraft:iron_shovel");
-            debug0.put(257, (Object)"minecraft:iron_pickaxe");
-            debug0.put(258, (Object)"minecraft:iron_axe");
-            debug0.put(259, (Object)"minecraft:flint_and_steel");
-            debug0.put(260, (Object)"minecraft:apple");
-            debug0.put(261, (Object)"minecraft:bow");
-            debug0.put(262, (Object)"minecraft:arrow");
-            debug0.put(263, (Object)"minecraft:coal");
-            debug0.put(264, (Object)"minecraft:diamond");
-            debug0.put(265, (Object)"minecraft:iron_ingot");
-            debug0.put(266, (Object)"minecraft:gold_ingot");
-            debug0.put(267, (Object)"minecraft:iron_sword");
-            debug0.put(268, (Object)"minecraft:wooden_sword");
-            debug0.put(269, (Object)"minecraft:wooden_shovel");
-            debug0.put(270, (Object)"minecraft:wooden_pickaxe");
-            debug0.put(271, (Object)"minecraft:wooden_axe");
-            debug0.put(272, (Object)"minecraft:stone_sword");
-            debug0.put(273, (Object)"minecraft:stone_shovel");
-            debug0.put(274, (Object)"minecraft:stone_pickaxe");
-            debug0.put(275, (Object)"minecraft:stone_axe");
-            debug0.put(276, (Object)"minecraft:diamond_sword");
-            debug0.put(277, (Object)"minecraft:diamond_shovel");
-            debug0.put(278, (Object)"minecraft:diamond_pickaxe");
-            debug0.put(279, (Object)"minecraft:diamond_axe");
-            debug0.put(280, (Object)"minecraft:stick");
-            debug0.put(281, (Object)"minecraft:bowl");
-            debug0.put(282, (Object)"minecraft:mushroom_stew");
-            debug0.put(283, (Object)"minecraft:golden_sword");
-            debug0.put(284, (Object)"minecraft:golden_shovel");
-            debug0.put(285, (Object)"minecraft:golden_pickaxe");
-            debug0.put(286, (Object)"minecraft:golden_axe");
-            debug0.put(287, (Object)"minecraft:string");
-            debug0.put(288, (Object)"minecraft:feather");
-            debug0.put(289, (Object)"minecraft:gunpowder");
-            debug0.put(290, (Object)"minecraft:wooden_hoe");
-            debug0.put(291, (Object)"minecraft:stone_hoe");
-            debug0.put(292, (Object)"minecraft:iron_hoe");
-            debug0.put(293, (Object)"minecraft:diamond_hoe");
-            debug0.put(294, (Object)"minecraft:golden_hoe");
-            debug0.put(295, (Object)"minecraft:wheat_seeds");
-            debug0.put(296, (Object)"minecraft:wheat");
-            debug0.put(297, (Object)"minecraft:bread");
-            debug0.put(298, (Object)"minecraft:leather_helmet");
-            debug0.put(299, (Object)"minecraft:leather_chestplate");
-            debug0.put(300, (Object)"minecraft:leather_leggings");
-            debug0.put(301, (Object)"minecraft:leather_boots");
-            debug0.put(302, (Object)"minecraft:chainmail_helmet");
-            debug0.put(303, (Object)"minecraft:chainmail_chestplate");
-            debug0.put(304, (Object)"minecraft:chainmail_leggings");
-            debug0.put(305, (Object)"minecraft:chainmail_boots");
-            debug0.put(306, (Object)"minecraft:iron_helmet");
-            debug0.put(307, (Object)"minecraft:iron_chestplate");
-            debug0.put(308, (Object)"minecraft:iron_leggings");
-            debug0.put(309, (Object)"minecraft:iron_boots");
-            debug0.put(310, (Object)"minecraft:diamond_helmet");
-            debug0.put(311, (Object)"minecraft:diamond_chestplate");
-            debug0.put(312, (Object)"minecraft:diamond_leggings");
-            debug0.put(313, (Object)"minecraft:diamond_boots");
-            debug0.put(314, (Object)"minecraft:golden_helmet");
-            debug0.put(315, (Object)"minecraft:golden_chestplate");
-            debug0.put(316, (Object)"minecraft:golden_leggings");
-            debug0.put(317, (Object)"minecraft:golden_boots");
-            debug0.put(318, (Object)"minecraft:flint");
-            debug0.put(319, (Object)"minecraft:porkchop");
-            debug0.put(320, (Object)"minecraft:cooked_porkchop");
-            debug0.put(321, (Object)"minecraft:painting");
-            debug0.put(322, (Object)"minecraft:golden_apple");
-            debug0.put(323, (Object)"minecraft:sign");
-            debug0.put(324, (Object)"minecraft:wooden_door");
-            debug0.put(325, (Object)"minecraft:bucket");
-            debug0.put(326, (Object)"minecraft:water_bucket");
-            debug0.put(327, (Object)"minecraft:lava_bucket");
-            debug0.put(328, (Object)"minecraft:minecart");
-            debug0.put(329, (Object)"minecraft:saddle");
-            debug0.put(330, (Object)"minecraft:iron_door");
-            debug0.put(331, (Object)"minecraft:redstone");
-            debug0.put(332, (Object)"minecraft:snowball");
-            debug0.put(333, (Object)"minecraft:boat");
-            debug0.put(334, (Object)"minecraft:leather");
-            debug0.put(335, (Object)"minecraft:milk_bucket");
-            debug0.put(336, (Object)"minecraft:brick");
-            debug0.put(337, (Object)"minecraft:clay_ball");
-            debug0.put(338, (Object)"minecraft:reeds");
-            debug0.put(339, (Object)"minecraft:paper");
-            debug0.put(340, (Object)"minecraft:book");
-            debug0.put(341, (Object)"minecraft:slime_ball");
-            debug0.put(342, (Object)"minecraft:chest_minecart");
-            debug0.put(343, (Object)"minecraft:furnace_minecart");
-            debug0.put(344, (Object)"minecraft:egg");
-            debug0.put(345, (Object)"minecraft:compass");
-            debug0.put(346, (Object)"minecraft:fishing_rod");
-            debug0.put(347, (Object)"minecraft:clock");
-            debug0.put(348, (Object)"minecraft:glowstone_dust");
-            debug0.put(349, (Object)"minecraft:fish");
-            debug0.put(350, (Object)"minecraft:cooked_fished");
-            debug0.put(351, (Object)"minecraft:dye");
-            debug0.put(352, (Object)"minecraft:bone");
-            debug0.put(353, (Object)"minecraft:sugar");
-            debug0.put(354, (Object)"minecraft:cake");
-            debug0.put(355, (Object)"minecraft:bed");
-            debug0.put(356, (Object)"minecraft:repeater");
-            debug0.put(357, (Object)"minecraft:cookie");
-            debug0.put(358, (Object)"minecraft:filled_map");
-            debug0.put(359, (Object)"minecraft:shears");
-            debug0.put(360, (Object)"minecraft:melon");
-            debug0.put(361, (Object)"minecraft:pumpkin_seeds");
-            debug0.put(362, (Object)"minecraft:melon_seeds");
-            debug0.put(363, (Object)"minecraft:beef");
-            debug0.put(364, (Object)"minecraft:cooked_beef");
-            debug0.put(365, (Object)"minecraft:chicken");
-            debug0.put(366, (Object)"minecraft:cooked_chicken");
-            debug0.put(367, (Object)"minecraft:rotten_flesh");
-            debug0.put(368, (Object)"minecraft:ender_pearl");
-            debug0.put(369, (Object)"minecraft:blaze_rod");
-            debug0.put(370, (Object)"minecraft:ghast_tear");
-            debug0.put(371, (Object)"minecraft:gold_nugget");
-            debug0.put(372, (Object)"minecraft:nether_wart");
-            debug0.put(373, (Object)"minecraft:potion");
-            debug0.put(374, (Object)"minecraft:glass_bottle");
-            debug0.put(375, (Object)"minecraft:spider_eye");
-            debug0.put(376, (Object)"minecraft:fermented_spider_eye");
-            debug0.put(377, (Object)"minecraft:blaze_powder");
-            debug0.put(378, (Object)"minecraft:magma_cream");
-            debug0.put(379, (Object)"minecraft:brewing_stand");
-            debug0.put(380, (Object)"minecraft:cauldron");
-            debug0.put(381, (Object)"minecraft:ender_eye");
-            debug0.put(382, (Object)"minecraft:speckled_melon");
-            debug0.put(383, (Object)"minecraft:spawn_egg");
-            debug0.put(384, (Object)"minecraft:experience_bottle");
-            debug0.put(385, (Object)"minecraft:fire_charge");
-            debug0.put(386, (Object)"minecraft:writable_book");
-            debug0.put(387, (Object)"minecraft:written_book");
-            debug0.put(388, (Object)"minecraft:emerald");
-            debug0.put(389, (Object)"minecraft:item_frame");
-            debug0.put(390, (Object)"minecraft:flower_pot");
-            debug0.put(391, (Object)"minecraft:carrot");
-            debug0.put(392, (Object)"minecraft:potato");
-            debug0.put(393, (Object)"minecraft:baked_potato");
-            debug0.put(394, (Object)"minecraft:poisonous_potato");
-            debug0.put(395, (Object)"minecraft:map");
-            debug0.put(396, (Object)"minecraft:golden_carrot");
-            debug0.put(397, (Object)"minecraft:skull");
-            debug0.put(398, (Object)"minecraft:carrot_on_a_stick");
-            debug0.put(399, (Object)"minecraft:nether_star");
-            debug0.put(400, (Object)"minecraft:pumpkin_pie");
-            debug0.put(401, (Object)"minecraft:fireworks");
-            debug0.put(402, (Object)"minecraft:firework_charge");
-            debug0.put(403, (Object)"minecraft:enchanted_book");
-            debug0.put(404, (Object)"minecraft:comparator");
-            debug0.put(405, (Object)"minecraft:netherbrick");
-            debug0.put(406, (Object)"minecraft:quartz");
-            debug0.put(407, (Object)"minecraft:tnt_minecart");
-            debug0.put(408, (Object)"minecraft:hopper_minecart");
-            debug0.put(417, (Object)"minecraft:iron_horse_armor");
-            debug0.put(418, (Object)"minecraft:golden_horse_armor");
-            debug0.put(419, (Object)"minecraft:diamond_horse_armor");
-            debug0.put(420, (Object)"minecraft:lead");
-            debug0.put(421, (Object)"minecraft:name_tag");
-            debug0.put(422, (Object)"minecraft:command_block_minecart");
-            debug0.put(2256, (Object)"minecraft:record_13");
-            debug0.put(2257, (Object)"minecraft:record_cat");
-            debug0.put(2258, (Object)"minecraft:record_blocks");
-            debug0.put(2259, (Object)"minecraft:record_chirp");
-            debug0.put(2260, (Object)"minecraft:record_far");
-            debug0.put(2261, (Object)"minecraft:record_mall");
-            debug0.put(2262, (Object)"minecraft:record_mellohi");
-            debug0.put(2263, (Object)"minecraft:record_stal");
-            debug0.put(2264, (Object)"minecraft:record_strad");
-            debug0.put(2265, (Object)"minecraft:record_ward");
-            debug0.put(2266, (Object)"minecraft:record_11");
-            debug0.put(2267, (Object)"minecraft:record_wait");
-            debug0.defaultReturnValue((Object)"minecraft:air");
+        // MagmaCube start - decompile fix
+        ITEM_NAMES = DataFixUtils.make(new Int2ObjectOpenHashMap(), debug0 -> {
+            debug0.put(1, "minecraft:stone");
+            debug0.put(2, "minecraft:grass");
+            debug0.put(3, "minecraft:dirt");
+            debug0.put(4, "minecraft:cobblestone");
+            debug0.put(5, "minecraft:planks");
+            debug0.put(6, "minecraft:sapling");
+            debug0.put(7, "minecraft:bedrock");
+            debug0.put(8, "minecraft:flowing_water");
+            debug0.put(9, "minecraft:water");
+            debug0.put(10, "minecraft:flowing_lava");
+            debug0.put(11, "minecraft:lava");
+            debug0.put(12, "minecraft:sand");
+            debug0.put(13, "minecraft:gravel");
+            debug0.put(14, "minecraft:gold_ore");
+            debug0.put(15, "minecraft:iron_ore");
+            debug0.put(16, "minecraft:coal_ore");
+            debug0.put(17, "minecraft:log");
+            debug0.put(18, "minecraft:leaves");
+            debug0.put(19, "minecraft:sponge");
+            debug0.put(20, "minecraft:glass");
+            debug0.put(21, "minecraft:lapis_ore");
+            debug0.put(22, "minecraft:lapis_block");
+            debug0.put(23, "minecraft:dispenser");
+            debug0.put(24, "minecraft:sandstone");
+            debug0.put(25, "minecraft:noteblock");
+            debug0.put(27, "minecraft:golden_rail");
+            debug0.put(28, "minecraft:detector_rail");
+            debug0.put(29, "minecraft:sticky_piston");
+            debug0.put(30, "minecraft:web");
+            debug0.put(31, "minecraft:tallgrass");
+            debug0.put(32, "minecraft:deadbush");
+            debug0.put(33, "minecraft:piston");
+            debug0.put(35, "minecraft:wool");
+            debug0.put(37, "minecraft:yellow_flower");
+            debug0.put(38, "minecraft:red_flower");
+            debug0.put(39, "minecraft:brown_mushroom");
+            debug0.put(40, "minecraft:red_mushroom");
+            debug0.put(41, "minecraft:gold_block");
+            debug0.put(42, "minecraft:iron_block");
+            debug0.put(43, "minecraft:double_stone_slab");
+            debug0.put(44, "minecraft:stone_slab");
+            debug0.put(45, "minecraft:brick_block");
+            debug0.put(46, "minecraft:tnt");
+            debug0.put(47, "minecraft:bookshelf");
+            debug0.put(48, "minecraft:mossy_cobblestone");
+            debug0.put(49, "minecraft:obsidian");
+            debug0.put(50, "minecraft:torch");
+            debug0.put(51, "minecraft:fire");
+            debug0.put(52, "minecraft:mob_spawner");
+            debug0.put(53, "minecraft:oak_stairs");
+            debug0.put(54, "minecraft:chest");
+            debug0.put(56, "minecraft:diamond_ore");
+            debug0.put(57, "minecraft:diamond_block");
+            debug0.put(58, "minecraft:crafting_table");
+            debug0.put(60, "minecraft:farmland");
+            debug0.put(61, "minecraft:furnace");
+            debug0.put(62, "minecraft:lit_furnace");
+            debug0.put(65, "minecraft:ladder");
+            debug0.put(66, "minecraft:rail");
+            debug0.put(67, "minecraft:stone_stairs");
+            debug0.put(69, "minecraft:lever");
+            debug0.put(70, "minecraft:stone_pressure_plate");
+            debug0.put(72, "minecraft:wooden_pressure_plate");
+            debug0.put(73, "minecraft:redstone_ore");
+            debug0.put(76, "minecraft:redstone_torch");
+            debug0.put(77, "minecraft:stone_button");
+            debug0.put(78, "minecraft:snow_layer");
+            debug0.put(79, "minecraft:ice");
+            debug0.put(80, "minecraft:snow");
+            debug0.put(81, "minecraft:cactus");
+            debug0.put(82, "minecraft:clay");
+            debug0.put(84, "minecraft:jukebox");
+            debug0.put(85, "minecraft:fence");
+            debug0.put(86, "minecraft:pumpkin");
+            debug0.put(87, "minecraft:netherrack");
+            debug0.put(88, "minecraft:soul_sand");
+            debug0.put(89, "minecraft:glowstone");
+            debug0.put(90, "minecraft:portal");
+            debug0.put(91, "minecraft:lit_pumpkin");
+            debug0.put(95, "minecraft:stained_glass");
+            debug0.put(96, "minecraft:trapdoor");
+            debug0.put(97, "minecraft:monster_egg");
+            debug0.put(98, "minecraft:stonebrick");
+            debug0.put(99, "minecraft:brown_mushroom_block");
+            debug0.put(100, "minecraft:red_mushroom_block");
+            debug0.put(101, "minecraft:iron_bars");
+            debug0.put(102, "minecraft:glass_pane");
+            debug0.put(103, "minecraft:melon_block");
+            debug0.put(106, "minecraft:vine");
+            debug0.put(107, "minecraft:fence_gate");
+            debug0.put(108, "minecraft:brick_stairs");
+            debug0.put(109, "minecraft:stone_brick_stairs");
+            debug0.put(110, "minecraft:mycelium");
+            debug0.put(111, "minecraft:waterlily");
+            debug0.put(112, "minecraft:nether_brick");
+            debug0.put(113, "minecraft:nether_brick_fence");
+            debug0.put(114, "minecraft:nether_brick_stairs");
+            debug0.put(116, "minecraft:enchanting_table");
+            debug0.put(119, "minecraft:end_portal");
+            debug0.put(120, "minecraft:end_portal_frame");
+            debug0.put(121, "minecraft:end_stone");
+            debug0.put(122, "minecraft:dragon_egg");
+            debug0.put(123, "minecraft:redstone_lamp");
+            debug0.put(125, "minecraft:double_wooden_slab");
+            debug0.put(126, "minecraft:wooden_slab");
+            debug0.put(127, "minecraft:cocoa");
+            debug0.put(128, "minecraft:sandstone_stairs");
+            debug0.put(129, "minecraft:emerald_ore");
+            debug0.put(130, "minecraft:ender_chest");
+            debug0.put(131, "minecraft:tripwire_hook");
+            debug0.put(133, "minecraft:emerald_block");
+            debug0.put(134, "minecraft:spruce_stairs");
+            debug0.put(135, "minecraft:birch_stairs");
+            debug0.put(136, "minecraft:jungle_stairs");
+            debug0.put(137, "minecraft:command_block");
+            debug0.put(138, "minecraft:beacon");
+            debug0.put(139, "minecraft:cobblestone_wall");
+            debug0.put(141, "minecraft:carrots");
+            debug0.put(142, "minecraft:potatoes");
+            debug0.put(143, "minecraft:wooden_button");
+            debug0.put(145, "minecraft:anvil");
+            debug0.put(146, "minecraft:trapped_chest");
+            debug0.put(147, "minecraft:light_weighted_pressure_plate");
+            debug0.put(148, "minecraft:heavy_weighted_pressure_plate");
+            debug0.put(151, "minecraft:daylight_detector");
+            debug0.put(152, "minecraft:redstone_block");
+            debug0.put(153, "minecraft:quartz_ore");
+            debug0.put(154, "minecraft:hopper");
+            debug0.put(155, "minecraft:quartz_block");
+            debug0.put(156, "minecraft:quartz_stairs");
+            debug0.put(157, "minecraft:activator_rail");
+            debug0.put(158, "minecraft:dropper");
+            debug0.put(159, "minecraft:stained_hardened_clay");
+            debug0.put(160, "minecraft:stained_glass_pane");
+            debug0.put(161, "minecraft:leaves2");
+            debug0.put(162, "minecraft:log2");
+            debug0.put(163, "minecraft:acacia_stairs");
+            debug0.put(164, "minecraft:dark_oak_stairs");
+            debug0.put(170, "minecraft:hay_block");
+            debug0.put(171, "minecraft:carpet");
+            debug0.put(172, "minecraft:hardened_clay");
+            debug0.put(173, "minecraft:coal_block");
+            debug0.put(174, "minecraft:packed_ice");
+            debug0.put(175, "minecraft:double_plant");
+            debug0.put(256, "minecraft:iron_shovel");
+            debug0.put(257, "minecraft:iron_pickaxe");
+            debug0.put(258, "minecraft:iron_axe");
+            debug0.put(259, "minecraft:flint_and_steel");
+            debug0.put(260, "minecraft:apple");
+            debug0.put(261, "minecraft:bow");
+            debug0.put(262, "minecraft:arrow");
+            debug0.put(263, "minecraft:coal");
+            debug0.put(264, "minecraft:diamond");
+            debug0.put(265, "minecraft:iron_ingot");
+            debug0.put(266, "minecraft:gold_ingot");
+            debug0.put(267, "minecraft:iron_sword");
+            debug0.put(268, "minecraft:wooden_sword");
+            debug0.put(269, "minecraft:wooden_shovel");
+            debug0.put(270, "minecraft:wooden_pickaxe");
+            debug0.put(271, "minecraft:wooden_axe");
+            debug0.put(272, "minecraft:stone_sword");
+            debug0.put(273, "minecraft:stone_shovel");
+            debug0.put(274, "minecraft:stone_pickaxe");
+            debug0.put(275, "minecraft:stone_axe");
+            debug0.put(276, "minecraft:diamond_sword");
+            debug0.put(277, "minecraft:diamond_shovel");
+            debug0.put(278, "minecraft:diamond_pickaxe");
+            debug0.put(279, "minecraft:diamond_axe");
+            debug0.put(280, "minecraft:stick");
+            debug0.put(281, "minecraft:bowl");
+            debug0.put(282, "minecraft:mushroom_stew");
+            debug0.put(283, "minecraft:golden_sword");
+            debug0.put(284, "minecraft:golden_shovel");
+            debug0.put(285, "minecraft:golden_pickaxe");
+            debug0.put(286, "minecraft:golden_axe");
+            debug0.put(287, "minecraft:string");
+            debug0.put(288, "minecraft:feather");
+            debug0.put(289, "minecraft:gunpowder");
+            debug0.put(290, "minecraft:wooden_hoe");
+            debug0.put(291, "minecraft:stone_hoe");
+            debug0.put(292, "minecraft:iron_hoe");
+            debug0.put(293, "minecraft:diamond_hoe");
+            debug0.put(294, "minecraft:golden_hoe");
+            debug0.put(295, "minecraft:wheat_seeds");
+            debug0.put(296, "minecraft:wheat");
+            debug0.put(297, "minecraft:bread");
+            debug0.put(298, "minecraft:leather_helmet");
+            debug0.put(299, "minecraft:leather_chestplate");
+            debug0.put(300, "minecraft:leather_leggings");
+            debug0.put(301, "minecraft:leather_boots");
+            debug0.put(302, "minecraft:chainmail_helmet");
+            debug0.put(303, "minecraft:chainmail_chestplate");
+            debug0.put(304, "minecraft:chainmail_leggings");
+            debug0.put(305, "minecraft:chainmail_boots");
+            debug0.put(306, "minecraft:iron_helmet");
+            debug0.put(307, "minecraft:iron_chestplate");
+            debug0.put(308, "minecraft:iron_leggings");
+            debug0.put(309, "minecraft:iron_boots");
+            debug0.put(310, "minecraft:diamond_helmet");
+            debug0.put(311, "minecraft:diamond_chestplate");
+            debug0.put(312, "minecraft:diamond_leggings");
+            debug0.put(313, "minecraft:diamond_boots");
+            debug0.put(314, "minecraft:golden_helmet");
+            debug0.put(315, "minecraft:golden_chestplate");
+            debug0.put(316, "minecraft:golden_leggings");
+            debug0.put(317, "minecraft:golden_boots");
+            debug0.put(318, "minecraft:flint");
+            debug0.put(319, "minecraft:porkchop");
+            debug0.put(320, "minecraft:cooked_porkchop");
+            debug0.put(321, "minecraft:painting");
+            debug0.put(322, "minecraft:golden_apple");
+            debug0.put(323, "minecraft:sign");
+            debug0.put(324, "minecraft:wooden_door");
+            debug0.put(325, "minecraft:bucket");
+            debug0.put(326, "minecraft:water_bucket");
+            debug0.put(327, "minecraft:lava_bucket");
+            debug0.put(328, "minecraft:minecart");
+            debug0.put(329, "minecraft:saddle");
+            debug0.put(330, "minecraft:iron_door");
+            debug0.put(331, "minecraft:redstone");
+            debug0.put(332, "minecraft:snowball");
+            debug0.put(333, "minecraft:boat");
+            debug0.put(334, "minecraft:leather");
+            debug0.put(335, "minecraft:milk_bucket");
+            debug0.put(336, "minecraft:brick");
+            debug0.put(337, "minecraft:clay_ball");
+            debug0.put(338, "minecraft:reeds");
+            debug0.put(339, "minecraft:paper");
+            debug0.put(340, "minecraft:book");
+            debug0.put(341, "minecraft:slime_ball");
+            debug0.put(342, "minecraft:chest_minecart");
+            debug0.put(343, "minecraft:furnace_minecart");
+            debug0.put(344, "minecraft:egg");
+            debug0.put(345, "minecraft:compass");
+            debug0.put(346, "minecraft:fishing_rod");
+            debug0.put(347, "minecraft:clock");
+            debug0.put(348, "minecraft:glowstone_dust");
+            debug0.put(349, "minecraft:fish");
+            debug0.put(350, "minecraft:cooked_fished");
+            debug0.put(351, "minecraft:dye");
+            debug0.put(352, "minecraft:bone");
+            debug0.put(353, "minecraft:sugar");
+            debug0.put(354, "minecraft:cake");
+            debug0.put(355, "minecraft:bed");
+            debug0.put(356, "minecraft:repeater");
+            debug0.put(357, "minecraft:cookie");
+            debug0.put(358, "minecraft:filled_map");
+            debug0.put(359, "minecraft:shears");
+            debug0.put(360, "minecraft:melon");
+            debug0.put(361, "minecraft:pumpkin_seeds");
+            debug0.put(362, "minecraft:melon_seeds");
+            debug0.put(363, "minecraft:beef");
+            debug0.put(364, "minecraft:cooked_beef");
+            debug0.put(365, "minecraft:chicken");
+            debug0.put(366, "minecraft:cooked_chicken");
+            debug0.put(367, "minecraft:rotten_flesh");
+            debug0.put(368, "minecraft:ender_pearl");
+            debug0.put(369, "minecraft:blaze_rod");
+            debug0.put(370, "minecraft:ghast_tear");
+            debug0.put(371, "minecraft:gold_nugget");
+            debug0.put(372, "minecraft:nether_wart");
+            debug0.put(373, "minecraft:potion");
+            debug0.put(374, "minecraft:glass_bottle");
+            debug0.put(375, "minecraft:spider_eye");
+            debug0.put(376, "minecraft:fermented_spider_eye");
+            debug0.put(377, "minecraft:blaze_powder");
+            debug0.put(378, "minecraft:magma_cream");
+            debug0.put(379, "minecraft:brewing_stand");
+            debug0.put(380, "minecraft:cauldron");
+            debug0.put(381, "minecraft:ender_eye");
+            debug0.put(382, "minecraft:speckled_melon");
+            debug0.put(383, "minecraft:spawn_egg");
+            debug0.put(384, "minecraft:experience_bottle");
+            debug0.put(385, "minecraft:fire_charge");
+            debug0.put(386, "minecraft:writable_book");
+            debug0.put(387, "minecraft:written_book");
+            debug0.put(388, "minecraft:emerald");
+            debug0.put(389, "minecraft:item_frame");
+            debug0.put(390, "minecraft:flower_pot");
+            debug0.put(391, "minecraft:carrot");
+            debug0.put(392, "minecraft:potato");
+            debug0.put(393, "minecraft:baked_potato");
+            debug0.put(394, "minecraft:poisonous_potato");
+            debug0.put(395, "minecraft:map");
+            debug0.put(396, "minecraft:golden_carrot");
+            debug0.put(397, "minecraft:skull");
+            debug0.put(398, "minecraft:carrot_on_a_stick");
+            debug0.put(399, "minecraft:nether_star");
+            debug0.put(400, "minecraft:pumpkin_pie");
+            debug0.put(401, "minecraft:fireworks");
+            debug0.put(402, "minecraft:firework_charge");
+            debug0.put(403, "minecraft:enchanted_book");
+            debug0.put(404, "minecraft:comparator");
+            debug0.put(405, "minecraft:netherbrick");
+            debug0.put(406, "minecraft:quartz");
+            debug0.put(407, "minecraft:tnt_minecart");
+            debug0.put(408, "minecraft:hopper_minecart");
+            debug0.put(417, "minecraft:iron_horse_armor");
+            debug0.put(418, "minecraft:golden_horse_armor");
+            debug0.put(419, "minecraft:diamond_horse_armor");
+            debug0.put(420, "minecraft:lead");
+            debug0.put(421, "minecraft:name_tag");
+            debug0.put(422, "minecraft:command_block_minecart");
+            debug0.put(2256, "minecraft:record_13");
+            debug0.put(2257, "minecraft:record_cat");
+            debug0.put(2258, "minecraft:record_blocks");
+            debug0.put(2259, "minecraft:record_chirp");
+            debug0.put(2260, "minecraft:record_far");
+            debug0.put(2261, "minecraft:record_mall");
+            debug0.put(2262, "minecraft:record_mellohi");
+            debug0.put(2263, "minecraft:record_stal");
+            debug0.put(2264, "minecraft:record_strad");
+            debug0.put(2265, "minecraft:record_ward");
+            debug0.put(2266, "minecraft:record_11");
+            debug0.put(2267, "minecraft:record_wait");
+            debug0.defaultReturnValue("minecraft:air");
         });
+        // MagmaCube end - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemPotionFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemPotionFix.java
index 521291c716096723738820c9c387c5be2b662a26..59db5ec598816f3ead11814551d951c48a6c1064 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemPotionFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemPotionFix.java
@@ -26,47 +26,38 @@ public class ItemPotionFix extends DataFix
         final Type<?> debug3 = (Type<?>)this.getInputSchema().getType(References.ITEM_STACK);
         final OpticFinder<Pair<String, String>> debug4 = (OpticFinder<Pair<String, String>>)DSL.fieldFinder("id", DSL.named(References.ITEM_NAME.typeName(), (Type)NamespacedSchema.namespacedString()));
         final OpticFinder<?> debug5 = (OpticFinder<?>)debug3.findField("tag");
-        final OpticFinder opticFinder;
-        final Optional<Pair<String, String>> debug6;
-        Dynamic<?> debug7;
-        final OpticFinder opticFinder2;
-        final Optional<? extends Typed<?>> debug8;
-        final short debug9;
-        Typed<?> debug10;
-        final Dynamic<?> debug11;
-        final Optional<String> debug12;
-        final String debug13;
-        final Typed<?> debug14;
+        // MagmaCube start - decompile fix
         return this.fixTypeEverywhereTyped("ItemPotionFix", (Type)debug3, debug2 -> {
-            debug6 = (Optional<Pair<String, String>>)debug2.getOptional(opticFinder);
+            Optional<Pair<String, String>> debug6 = (Optional<Pair<String, String>>)debug2.getOptional(debug4);
             if (debug6.isPresent() && Objects.equals(debug6.get().getSecond(), "minecraft:potion")) {
-                debug7 = (Dynamic<?>)debug2.get(DSL.remainderFinder());
-                debug8 = (Optional<? extends Typed<?>>)debug2.getOptionalTyped(opticFinder2);
-                debug9 = debug7.get("Damage").asShort((short)0);
+                Dynamic<?> debug7 = (Dynamic<?>)debug2.get(DSL.remainderFinder());
+                Optional<? extends Typed<?>> debug8 = (Optional<? extends Typed<?>>)debug2.getOptionalTyped(debug5);
+                short debug9 = debug7.get("Damage").asShort((short)0);
                 if (debug8.isPresent()) {
-                    debug10 = debug2;
-                    debug11 = (Dynamic<?>)((Typed)debug8.get()).get(DSL.remainderFinder());
-                    debug12 = (Optional<String>)debug11.get("Potion").asString().result();
+                    Typed<?> debug10 = debug2;
+                    Dynamic<?> debug11 = (Dynamic<?>)((Typed)debug8.get()).get(DSL.remainderFinder());
+                    Optional<String> debug12 = (Optional<String>)debug11.get("Potion").asString().result();
                     if (!debug12.isPresent()) {
-                        debug13 = ItemPotionFix.POTIONS[debug9 & 0x7F];
-                        debug14 = (Typed<?>)((Typed)debug8.get()).set(DSL.remainderFinder(), (Object)debug11.set("Potion", debug11.createString((debug13 == null) ? "minecraft:water" : debug13)));
-                        debug10 = (Typed<?>)debug10.set(opticFinder2, (Typed)debug14);
+                        String debug13 = ItemPotionFix.POTIONS[debug9 & 0x7F];
+                        Typed<?> debug14 = (Typed<?>)((Typed)debug8.get()).set(DSL.remainderFinder(), (Object)debug11.set("Potion", debug11.createString((debug13 == null) ? "minecraft:water" : debug13)));
+                        debug10 = (Typed<?>)debug10.set(debug5, (Typed)debug14);
                         if ((debug9 & 0x4000) == 0x4000) {
-                            debug10 = (Typed<?>)debug10.set(opticFinder, (Object)Pair.of((Object)References.ITEM_NAME.typeName(), (Object)"minecraft:splash_potion"));
+                            debug10 = (Typed<?>)debug10.set(debug4, Pair.of(References.ITEM_NAME.typeName(), "minecraft:splash_potion"));
                         }
                     }
                     if (debug9 != 0) {
                         debug7 = (Dynamic<?>)debug7.set("Damage", debug7.createShort((short)0));
                     }
-                    return debug10.set(DSL.remainderFinder(), (Object)debug7);
+                    return debug10.set(DSL.remainderFinder(), debug7);
                 }
             }
             return debug2;
         });
+        // MagmaCube end - decompile fix
     }
     
     static {
-        POTIONS = (String[])DataFixUtils.make((Object)new String[128], debug0 -> {
+        POTIONS = DataFixUtils.make(new String[128], debug0 -> { // MagmaCube - decompile fix
             debug0[0] = "minecraft:water";
             debug0[1] = "minecraft:regeneration";
             debug0[2] = "minecraft:swiftness";
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemSpawnEggFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemSpawnEggFix.java
index a4ef65b967f9e8bec242b19379c8b9ff81b1a18f..2e4da41f52490da03829acc9412165e1fef792d7 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemSpawnEggFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemSpawnEggFix.java
@@ -32,49 +32,29 @@ public class ItemSpawnEggFix extends DataFix
         final OpticFinder<?> debug12 = (OpticFinder<?>)debug11.type().findField("EntityTag");
         final OpticFinder<?> debug13 = (OpticFinder<?>)DSL.typeFinder(debug7.getTypeRaw(References.ENTITY));
         final Type<?> debug14 = (Type<?>)this.getOutputSchema().getTypeRaw(References.ENTITY);
-        final OpticFinder opticFinder;
-        final Optional<Pair<String, String>> debug15;
-        final Dynamic<?> debug16;
-        final short debug17;
-        final OpticFinder opticFinder2;
-        final Optional<? extends Typed<?>> debug18;
-        final OpticFinder opticFinder3;
-        final Optional<? extends Typed<?>> debug19;
-        final OpticFinder opticFinder4;
-        final Optional<? extends Typed<?>> debug20;
-        final OpticFinder opticFinder5;
-        final Optional<String> debug21;
-        Typed<?> debug22;
-        final String debug23;
-        final Typed<?> debug24;
-        final Typed<?> debug25;
-        final Typed<?> debug26;
-        final Dynamic<?> debug27;
-        final Type type;
-        final Typed<?> debug28;
-        final Dynamic<?> debug29;
-        return this.fixTypeEverywhereTyped("ItemSpawnEggFix", (Type)debug8, debug6 -> {
-            debug15 = (Optional<Pair<String, String>>)debug6.getOptional(opticFinder);
+        // MagmaCube start - decompile fix
+        return this.fixTypeEverywhereTyped("ItemSpawnEggFix", debug8, debug6 -> {
+            Optional<Pair<String, String>> debug15 = (Optional<Pair<String, String>>)debug6.getOptional(debug9);
             if (debug15.isPresent() && Objects.equals(debug15.get().getSecond(), "minecraft:spawn_egg")) {
-                debug16 = (Dynamic<?>)debug6.get(DSL.remainderFinder());
-                debug17 = debug16.get("Damage").asShort((short)0);
-                debug18 = (Optional<? extends Typed<?>>)debug6.getOptionalTyped(opticFinder2);
-                debug19 = debug18.flatMap(debug1 -> debug1.getOptionalTyped(opticFinder3));
-                debug20 = debug19.flatMap(debug1 -> debug1.getOptionalTyped(opticFinder4));
-                debug21 = debug20.flatMap(debug1 -> debug1.getOptional(opticFinder5));
-                debug22 = debug6;
-                debug23 = ItemSpawnEggFix.ID_TO_ENTITY[debug17 & 0xFF];
+                Dynamic<?> debug16 = (Dynamic<?>)debug6.get(DSL.remainderFinder());
+                short debug17 = debug16.get("Damage").asShort((short)0);
+                Optional<? extends Typed<?>> debug18 = (Optional<? extends Typed<?>>)debug6.getOptionalTyped(debug10);
+                Optional<? extends Typed<?>> debug19 = debug18.flatMap(debug1 -> debug1.getOptionalTyped(debug11));
+                Optional<? extends Typed<?>> debug20 = debug19.flatMap(debug1 -> debug1.getOptionalTyped(debug12));
+                Optional<String> debug21 = (Optional<String>) (Object) debug20.flatMap(debug1 -> debug1.getOptional(debug13));
+                Typed<?> debug22 = debug6;
+                String debug23 = ItemSpawnEggFix.ID_TO_ENTITY[debug17 & 0xFF];
                 if (debug23 != null && (!debug21.isPresent() || !Objects.equals(debug21.get(), debug23))) {
-                    debug24 = (Typed<?>)debug6.getOrCreateTyped(opticFinder2);
-                    debug25 = (Typed<?>)debug24.getOrCreateTyped(opticFinder3);
-                    debug26 = (Typed<?>)debug25.getOrCreateTyped(opticFinder4);
-                    debug27 = debug16;
-                    debug28 = (Typed<?>)debug26.write().flatMap(debug3 -> type.readTyped(debug3.set("id", debug27.createString(debug23)))).result().orElseThrow(() -> new IllegalStateException("Could not parse new entity")).getFirst();
-                    debug22 = (Typed<?>)debug22.set(opticFinder2, debug24.set(opticFinder3, debug25.set(opticFinder4, (Typed)debug28)));
+                    Typed<?> debug24 = (Typed<?>)debug6.getOrCreateTyped(debug10);
+                    Typed<?> debug25 = (Typed<?>)debug24.getOrCreateTyped(debug11);
+                    Typed<?> debug26 = (Typed<?>)debug25.getOrCreateTyped(debug12);
+                    Dynamic<?> debug27 = debug16;
+                    Typed<?> debug28 = (Typed<?>)debug26.write().flatMap(debug3 -> debug14.readTyped(debug3.set("id", debug27.createString(debug23)))).result().orElseThrow(() -> new IllegalStateException("Could not parse new entity")).getFirst();
+                    debug22 = (Typed<?>)debug22.set(debug10, debug24.set(debug11, debug25.set(debug12, debug28)));
                 }
                 if (debug17 != 0) {
-                    debug29 = (Dynamic<?>)debug16.set("Damage", debug16.createShort((short)0));
-                    debug22 = (Typed<?>)debug22.set(DSL.remainderFinder(), (Object)debug29);
+                    Dynamic<?> debug29 = (Dynamic<?>)debug16.set("Damage", debug16.createShort((short)0));
+                    debug22 = (Typed<?>)debug22.set(DSL.remainderFinder(), debug29);
                 }
                 return debug22;
             }
@@ -82,10 +62,11 @@ public class ItemSpawnEggFix extends DataFix
                 return debug6;
             }
         });
+        // MagmaCube end - decompile fix
     }
     
     static {
-        ID_TO_ENTITY = (String[])DataFixUtils.make((Object)new String[256], debug0 -> {
+        ID_TO_ENTITY = (String[])DataFixUtils.make(new String[256], debug0 -> { // MagmaCube - decompile fix
             debug0[1] = "Item";
             debug0[2] = "XPOrb";
             debug0[7] = "ThrownEgg";
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
index 221bee712f96def71702836b77ce2ae277ef018e..2c1fc248bf6d0547fe2be23471c5cfbee0ca801c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
@@ -26,19 +26,19 @@ public class ItemStackEnchantmentNamesFix extends DataFix
     protected TypeRewriteRule makeRule() {
         final Type<?> debug3 = (Type<?>)this.getInputSchema().getType(References.ITEM_STACK);
         final OpticFinder<?> debug4 = (OpticFinder<?>)debug3.findField("tag");
-        return this.fixTypeEverywhereTyped("ItemStackEnchantmentFix", (Type)debug3, debug2 -> debug2.updateTyped((OpticFinder)debug4, debug1 -> debug1.update(DSL.remainderFinder(), (Function)this::fixTag)));
+        return this.fixTypeEverywhereTyped("ItemStackEnchantmentFix", (Type)debug3, debug2 -> debug2.updateTyped((OpticFinder)debug4, debug1 -> debug1.update(DSL.remainderFinder(), this::fixTag))); // MagmaCube - decompile fix
     }
     
     private Dynamic<?> fixTag(Dynamic<?> debug1) {
-        final Optional<? extends Dynamic<?>> debug2 = (Optional<? extends Dynamic<?>>)debug1.get("ench").asStreamOpt().map(debug0 -> debug0.map(debug0 -> debug0.set("id", debug0.createString((String)ItemStackEnchantmentNamesFix.MAP.getOrDefault(debug0.get("id").asInt(0), (Object)"null"))))).map((Function)debug1::createList).result();
+        final Optional<? extends Dynamic<?>> debug2 = (Optional<? extends Dynamic<?>>)debug1.get("ench").asStreamOpt().map(debug0 -> debug0.map(debug0l -> debug0l.set("id", debug0l.createString((String)ItemStackEnchantmentNamesFix.MAP.getOrDefault(debug0l.get("id").asInt(0), "null"))))).map(debug1::createList).result(); // MagmaCube - decompile fix
         if (debug2.isPresent()) {
             debug1 = (Dynamic<?>)debug1.remove("ench").set("Enchantments", (Dynamic)debug2.get());
         }
-        return (Dynamic<?>)debug1.update("StoredEnchantments", debug0 -> (Dynamic)DataFixUtils.orElse(((Dynamic)debug0).asStreamOpt().map(debug0 -> debug0.map(debug0 -> debug0.set("id", debug0.createString((String)ItemStackEnchantmentNamesFix.MAP.getOrDefault(debug0.get("id").asInt(0), (Object)"null"))))).map((Function)debug0::createList).result(), (Object)debug0));
+        return (Dynamic<?>)debug1.update("StoredEnchantments", debug0 -> DataFixUtils.orElse((debug0).asStreamOpt().map(debug0l -> debug0l.map(debug0ll -> debug0ll.set("id", debug0ll.createString((String)ItemStackEnchantmentNamesFix.MAP.getOrDefault(debug0.get("id").asInt(0), "null"))))).map(debug0::createList).result(), debug0)); // MagmaCube - decompile fix
     }
     
     static {
-        MAP = (Int2ObjectMap)DataFixUtils.make((Object)new Int2ObjectOpenHashMap(), debug0 -> {
+        MAP = DataFixUtils.make(new Int2ObjectOpenHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put(0, (Object)"minecraft:protection");
             debug0.put(1, (Object)"minecraft:fire_protection");
             debug0.put(2, (Object)"minecraft:feather_falling");
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackSpawnEggFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackSpawnEggFix.java
index 48948db384e9ec9e0185221926cf6aab7110fb43..d83cd7338d6d3428aa7567c0934032a0be8d74f4 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackSpawnEggFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackSpawnEggFix.java
@@ -30,22 +30,14 @@ public class ItemStackSpawnEggFix extends DataFix
         final OpticFinder<String> debug7 = (OpticFinder<String>)DSL.fieldFinder("id", (Type)NamespacedSchema.namespacedString());
         final OpticFinder<?> debug8 = (OpticFinder<?>)debug5.findField("tag");
         final OpticFinder<?> debug9 = (OpticFinder<?>)debug8.type().findField("EntityTag");
-        final OpticFinder opticFinder;
-        final Optional<Pair<String, String>> debug10;
-        final OpticFinder opticFinder2;
-        final Typed<?> debug11;
-        final OpticFinder opticFinder3;
-        final Typed<?> debug12;
-        final OpticFinder opticFinder4;
-        final Optional<String> debug13;
         return this.fixTypeEverywhereTyped("ItemInstanceSpawnEggFix", (Type)debug5, debug4 -> {
-            debug10 = (Optional<Pair<String, String>>)debug4.getOptional(opticFinder);
+            Optional<Pair<String, String>> debug10 = (Optional<Pair<String, String>>)debug4.getOptional(debug6); // MagmaCube - decompile fix
             if (debug10.isPresent() && Objects.equals(debug10.get().getSecond(), "minecraft:spawn_egg")) {
-                debug11 = (Typed<?>)debug4.getOrCreateTyped(opticFinder2);
-                debug12 = (Typed<?>)debug11.getOrCreateTyped(opticFinder3);
-                debug13 = (Optional<String>)debug12.getOptional(opticFinder4);
+                Typed<?> debug11 = (Typed<?>)debug4.getOrCreateTyped(debug7); // MagmaCube - decompile fix
+                Typed<?> debug12 = (Typed<?>)debug11.getOrCreateTyped(debug8); // MagmaCube - decompile fix
+                Optional<String> debug13 = (Optional<String>)debug12.getOptional(debug9); // MagmaCube - decompile fix
                 if (debug13.isPresent()) {
-                    return debug4.set(opticFinder, (Object)Pair.of((Object)References.ITEM_NAME.typeName(), (Object)ItemStackSpawnEggFix.MAP.getOrDefault(debug13.get(), "minecraft:pig_spawn_egg")));
+                    return debug4.set(debug6, Pair.of(References.ITEM_NAME.typeName(), ItemStackSpawnEggFix.MAP.getOrDefault(debug13.get(), "minecraft:pig_spawn_egg"))); // MagmaCube - decompile fix
                 }
             }
             return debug4;
@@ -53,7 +45,7 @@ public class ItemStackSpawnEggFix extends DataFix
     }
     
     static {
-        MAP = (Map)DataFixUtils.make((Object)Maps.newHashMap(), debug0 -> {
+        MAP = DataFixUtils.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put("minecraft:bat", "minecraft:bat_spawn_egg");
             debug0.put("minecraft:blaze", "minecraft:blaze_spawn_egg");
             debug0.put("minecraft:cave_spider", "minecraft:cave_spider_spawn_egg");
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java
index d55ed6d7901f9ea5ff96c97a38b17bbeb9592713..7c3262588e1dd72ccfeea6bf52455e35e04759f8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java
@@ -40,7 +40,7 @@ import net.minecraft.util.datafix.schemas.NamespacedSchema;
 
 public class ItemStackTheFlatteningFix
 extends DataFix {
-    private static final Map<String, String> MAP = (Map)DataFixUtils.make((Object)Maps.newHashMap(), debug0 -> {
+    private static final Map<String, String> MAP = DataFixUtils.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
         debug0.put("minecraft:stone.0", "minecraft:stone");
         debug0.put("minecraft:stone.1", "minecraft:granite");
         debug0.put("minecraft:stone.2", "minecraft:polished_granite");
@@ -363,7 +363,7 @@ extends DataFix {
         debug0.put("minecraft:record_ward.0", "minecraft:music_disc_ward");
     });
     private static final Set<String> IDS = MAP.keySet().stream().map(debug0 -> debug0.substring(0, debug0.indexOf(46))).collect(Collectors.toSet());
-    private static final Set<String> DAMAGE_IDS = Sets.newHashSet((Object[])new String[]{"minecraft:bow", "minecraft:carrot_on_a_stick", "minecraft:chainmail_boots", "minecraft:chainmail_chestplate", "minecraft:chainmail_helmet", "minecraft:chainmail_leggings", "minecraft:diamond_axe", "minecraft:diamond_boots", "minecraft:diamond_chestplate", "minecraft:diamond_helmet", "minecraft:diamond_hoe", "minecraft:diamond_leggings", "minecraft:diamond_pickaxe", "minecraft:diamond_shovel", "minecraft:diamond_sword", "minecraft:elytra", "minecraft:fishing_rod", "minecraft:flint_and_steel", "minecraft:golden_axe", "minecraft:golden_boots", "minecraft:golden_chestplate", "minecraft:golden_helmet", "minecraft:golden_hoe", "minecraft:golden_leggings", "minecraft:golden_pickaxe", "minecraft:golden_shovel", "minecraft:golden_sword", "minecraft:iron_axe", "minecraft:iron_boots", "minecraft:iron_chestplate", "minecraft:iron_helmet", "minecraft:iron_hoe", "minecraft:iron_leggings", "minecraft:iron_pickaxe", "minecraft:iron_shovel", "minecraft:iron_sword", "minecraft:leather_boots", "minecraft:leather_chestplate", "minecraft:leather_helmet", "minecraft:leather_leggings", "minecraft:shears", "minecraft:shield", "minecraft:stone_axe", "minecraft:stone_hoe", "minecraft:stone_pickaxe", "minecraft:stone_shovel", "minecraft:stone_sword", "minecraft:wooden_axe", "minecraft:wooden_hoe", "minecraft:wooden_pickaxe", "minecraft:wooden_shovel", "minecraft:wooden_sword"});
+    private static final Set<String> DAMAGE_IDS = Sets.newHashSet(new String[]{"minecraft:bow", "minecraft:carrot_on_a_stick", "minecraft:chainmail_boots", "minecraft:chainmail_chestplate", "minecraft:chainmail_helmet", "minecraft:chainmail_leggings", "minecraft:diamond_axe", "minecraft:diamond_boots", "minecraft:diamond_chestplate", "minecraft:diamond_helmet", "minecraft:diamond_hoe", "minecraft:diamond_leggings", "minecraft:diamond_pickaxe", "minecraft:diamond_shovel", "minecraft:diamond_sword", "minecraft:elytra", "minecraft:fishing_rod", "minecraft:flint_and_steel", "minecraft:golden_axe", "minecraft:golden_boots", "minecraft:golden_chestplate", "minecraft:golden_helmet", "minecraft:golden_hoe", "minecraft:golden_leggings", "minecraft:golden_pickaxe", "minecraft:golden_shovel", "minecraft:golden_sword", "minecraft:iron_axe", "minecraft:iron_boots", "minecraft:iron_chestplate", "minecraft:iron_helmet", "minecraft:iron_hoe", "minecraft:iron_leggings", "minecraft:iron_pickaxe", "minecraft:iron_shovel", "minecraft:iron_sword", "minecraft:leather_boots", "minecraft:leather_chestplate", "minecraft:leather_helmet", "minecraft:leather_leggings", "minecraft:shears", "minecraft:shield", "minecraft:stone_axe", "minecraft:stone_hoe", "minecraft:stone_pickaxe", "minecraft:stone_shovel", "minecraft:stone_sword", "minecraft:wooden_axe", "minecraft:wooden_hoe", "minecraft:wooden_pickaxe", "minecraft:wooden_shovel", "minecraft:wooden_sword"}); // MagmaCube - decompile fix
 
     public ItemStackTheFlatteningFix(Schema debug1, boolean debug2) {
         super(debug1, debug2);
@@ -374,24 +374,24 @@ extends DataFix {
         OpticFinder debug22 = DSL.fieldFinder((String)"id", (Type)DSL.named((String)References.ITEM_NAME.typeName(), NamespacedSchema.namespacedString()));
         OpticFinder debug3 = debug1.findField("tag");
         return this.fixTypeEverywhereTyped("ItemInstanceTheFlatteningFix", debug1, debug2 -> {
-            Optional debug3 = debug2.getOptional(debug22);
-            if (!debug3.isPresent()) {
+            Optional<?> debug3l = debug2.getOptional(debug22); // MagmaCube - decompile fix
+            if (!debug3l.isPresent()) { // MagmaCube - decompile fix
                 return debug2;
             }
             Typed debug4 = debug2;
             Dynamic debug5 = (Dynamic)debug2.get(DSL.remainderFinder());
             int debug6 = debug5.get("Damage").asInt(0);
-            String debug7 = ItemStackTheFlatteningFix.updateItem((String)((Pair)debug3.get()).getSecond(), debug6);
+            String debug7 = ItemStackTheFlatteningFix.updateItem((String)((Pair)debug3l.get()).getSecond(), debug6); // MagmaCube - decompile fix
             if (debug7 != null) {
-                debug4 = debug4.set(debug22, (Object)Pair.of((Object)References.ITEM_NAME.typeName(), (Object)debug7));
+                debug4 = debug4.set(debug22, Pair.of(References.ITEM_NAME.typeName(), debug7)); // MagmaCube - decompile fix
             }
-            if (DAMAGE_IDS.contains(((Pair)debug3.get()).getSecond())) {
+            if (DAMAGE_IDS.contains(((Pair)debug3l.get()).getSecond())) { // MagmaCube - decompile fix
                 Typed debug8 = debug2.getOrCreateTyped(debug3);
                 Dynamic debug9 = (Dynamic)debug8.get(DSL.remainderFinder());
                 debug9 = debug9.set("Damage", debug9.createInt(debug6));
-                debug4 = debug4.set(debug3, debug8.set(DSL.remainderFinder(), (Object)debug9));
+                debug4 = debug4.set(debug3, debug8.set(DSL.remainderFinder(), debug9)); // MagmaCube - decompile fix
             }
-            debug4 = debug4.set(DSL.remainderFinder(), (Object)debug5.remove("Damage"));
+            debug4 = debug4.set(DSL.remainderFinder(), debug5.remove("Damage")); // MagmaCube - decompile fix
             return debug4;
         });
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemWaterPotionFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemWaterPotionFix.java
index c313c9593f7d6b2aa28e2ff4e6c6610836d07109..57bb315ad782ac84e02c268da3fc74d1c06b9c38 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemWaterPotionFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemWaterPotionFix.java
@@ -22,23 +22,17 @@ public class ItemWaterPotionFix extends DataFix
         final Type<?> debug3 = (Type<?>)this.getInputSchema().getType(References.ITEM_STACK);
         final OpticFinder<Pair<String, String>> debug4 = (OpticFinder<Pair<String, String>>)DSL.fieldFinder("id", DSL.named(References.ITEM_NAME.typeName(), (Type)NamespacedSchema.namespacedString()));
         final OpticFinder<?> debug5 = (OpticFinder<?>)debug3.findField("tag");
-        final OpticFinder opticFinder;
-        final Optional<Pair<String, String>> debug6;
-        final String debug7;
-        final OpticFinder opticFinder2;
-        final Typed<?> debug8;
-        Dynamic<?> debug9;
         return this.fixTypeEverywhereTyped("ItemWaterPotionFix", (Type)debug3, debug2 -> {
-            debug6 = (Optional<Pair<String, String>>)debug2.getOptional(opticFinder);
+            Optional<Pair<String, String>> debug6 = (Optional<Pair<String, String>>)debug2.getOptional(debug4); // MagmaCube - decompile fix
             if (debug6.isPresent()) {
-                debug7 = (String)debug6.get().getSecond();
+                String debug7 = (String)debug6.get().getSecond(); // MagmaCube - decompile fix
                 if ("minecraft:potion".equals(debug7) || "minecraft:splash_potion".equals(debug7) || "minecraft:lingering_potion".equals(debug7) || "minecraft:tipped_arrow".equals(debug7)) {
-                    debug8 = (Typed<?>)debug2.getOrCreateTyped(opticFinder2);
-                    debug9 = (Dynamic<?>)debug8.get(DSL.remainderFinder());
+                    Typed<?> debug8 = (Typed<?>)debug2.getOrCreateTyped(debug5); // MagmaCube - decompile fix
+                    Dynamic<?> debug9 = (Dynamic<?>)debug8.get(DSL.remainderFinder()); // MagmaCube - decompile fix
                     if (!debug9.get("Potion").asString().result().isPresent()) {
                         debug9 = (Dynamic<?>)debug9.set("Potion", debug9.createString("minecraft:water"));
                     }
-                    return debug2.set(opticFinder2, debug8.set(DSL.remainderFinder(), (Object)debug9));
+                    return debug2.set(debug5, debug8.set(DSL.remainderFinder(), debug9)); // MagmaCube - decompile fix
                 }
             }
             return debug2;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
index 13c01eeeac84fab1f2b4667ad4e0c8dbd843375c..a7f6d5ad97d5222a1a66258203742fd9c91470b8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
@@ -24,15 +24,13 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix
     }
     
     public Dynamic<?> fixTag(final Dynamic<?> debug1) {
-        final String debug2;
-        Component debug3;
-        return (Dynamic<?>)debug1.update("pages", debug1 -> (Dynamic)DataFixUtils.orElse(debug1.asStreamOpt().map(debug0 -> debug0.map(debug0 -> {
-            if (!debug0.asString().result().isPresent()) {
-                return debug0;
+        return (Dynamic<?>)debug1.update("pages", debug1l -> (Dynamic)DataFixUtils.orElse(debug1l.asStreamOpt().map(debug0 -> debug0.map(debug0l -> { // MagmaCube - decompile fix
+            if (!debug0l.asString().result().isPresent()) { // MagmaCube - decompile fix
+                return debug0l; // MagmaCube - decompile fix
             }
             else {
-                debug2 = debug0.asString("");
-                debug3 = null;
+                String debug2 = debug0l.asString(""); // MagmaCube - decompile fix
+                Component debug3 = null; // MagmaCube - decompile fix
                 if ("null".equals(debug2) || StringUtils.isEmpty((CharSequence)debug2)) {
                     debug3 = TextComponent.EMPTY;
                 }
@@ -40,7 +38,7 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix
                     if (debug2.charAt(0) != 34 || debug2.charAt(debug2.length() - 1) != 34) {
                         if (debug2.charAt(0) != 123 || debug2.charAt(debug2.length() - 1) != 125) {
                             debug3 = new TextComponent(debug2);
-                            return debug0.createString(Component.Serializer.toJson(debug3));
+                            return debug0l.createString(Component.Serializer.toJson(debug3)); // MagmaCube - decompile fix
                         }
                     }
                     try {
@@ -66,14 +64,14 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix
                         debug3 = new TextComponent(debug2);
                     }
                 }
-                return debug0.createString(Component.Serializer.toJson(debug3));
+                return debug0l.createString(Component.Serializer.toJson(debug3));
             }
-        })).map((Function)debug1::createList).result(), (Object)debug1.emptyList()));
+        })).map(debug1l::createList).result(), (Object)debug1l.emptyList())); // MagmaCube - decompile fix
     }
     
     public TypeRewriteRule makeRule() {
         final Type<?> debug3 = (Type<?>)this.getInputSchema().getType(References.ITEM_STACK);
         final OpticFinder<?> debug4 = (OpticFinder<?>)debug3.findField("tag");
-        return this.fixTypeEverywhereTyped("ItemWrittenBookPagesStrictJsonFix", (Type)debug3, debug2 -> debug2.updateTyped((OpticFinder)debug4, debug1 -> debug1.update(DSL.remainderFinder(), (Function)this::fixTag)));
+        return this.fixTypeEverywhereTyped("ItemWrittenBookPagesStrictJsonFix", (Type)debug3, debug2 -> debug2.updateTyped((OpticFinder)debug4, debug1 -> debug1.update(DSL.remainderFinder(), this::fixTag))); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java b/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
index 813f80ee077ace7da532f24ce167fbb13db2bcc5..50cec78c23f038a8f2857ff811fd816eb4e971c0 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
@@ -22,17 +22,16 @@ public class JigsawRotationFix extends DataFix
     private static Dynamic<?> fix(final Dynamic<?> debug0) {
         final Optional<String> debug = (Optional<String>)debug0.get("Name").asString().result();
         if (debug.equals(Optional.of("minecraft:jigsaw"))) {
-            final String debug2;
-            return (Dynamic<?>)debug0.update("Properties", debug0 -> {
-                debug2 = debug0.get("facing").asString("north");
-                return debug0.remove("facing").set("orientation", debug0.createString((String)JigsawRotationFix.renames.getOrDefault(debug2, debug2)));
+            return (Dynamic<?>)debug0.update("Properties", debug0l -> { // MagmaCube - decompile fix
+                String debug2 = debug0l.get("facing").asString("north"); // MagmaCube - decompile fix
+                return debug0l.remove("facing").set("orientation", debug0l.createString((String)JigsawRotationFix.renames.getOrDefault(debug2, debug2))); // MagmaCube - decompile fix
             });
         }
         return debug0;
     }
     
     protected TypeRewriteRule makeRule() {
-        return this.fixTypeEverywhereTyped("jigsaw_rotation_fix", this.getInputSchema().getType(References.BLOCK_STATE), debug0 -> debug0.update(DSL.remainderFinder(), (Function)JigsawRotationFix::fix));
+        return this.fixTypeEverywhereTyped("jigsaw_rotation_fix", this.getInputSchema().getType(References.BLOCK_STATE), debug0 -> debug0.update(DSL.remainderFinder(), JigsawRotationFix::fix)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
index f60668e44d38227b9a6cad2cdd196e1c7701e1d3..099228cf0ec22e22f21b9c80107e69465d81f1a7 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
@@ -54,7 +54,6 @@ import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
@@ -66,90 +65,92 @@ import net.minecraft.util.datafix.fixes.References;
 public class LeavesFix
 extends DataFix {
     private static final int[][] DIRECTIONS = new int[][]{{-1, 0, 0}, {1, 0, 0}, {0, -1, 0}, {0, 1, 0}, {0, 0, -1}, {0, 0, 1}};
-    private static final Object2IntMap<String> LEAVES = (Object2IntMap)DataFixUtils.make((Object)new Object2IntOpenHashMap(), debug0 -> {
-        debug0.put((Object)"minecraft:acacia_leaves", 0);
-        debug0.put((Object)"minecraft:birch_leaves", 1);
-        debug0.put((Object)"minecraft:dark_oak_leaves", 2);
-        debug0.put((Object)"minecraft:jungle_leaves", 3);
-        debug0.put((Object)"minecraft:oak_leaves", 4);
-        debug0.put((Object)"minecraft:spruce_leaves", 5);
+    // MagmaCube start - decompile fix
+    private static final Object2IntMap<String> LEAVES = DataFixUtils.make(new Object2IntOpenHashMap<>(), debug0 -> {
+        debug0.put("minecraft:acacia_leaves", 0);
+        debug0.put("minecraft:birch_leaves", 1);
+        debug0.put("minecraft:dark_oak_leaves", 2);
+        debug0.put("minecraft:jungle_leaves", 3);
+        debug0.put("minecraft:oak_leaves", 4);
+        debug0.put("minecraft:spruce_leaves", 5);
     });
-    private static final Set<String> LOGS = ImmutableSet.of((Object)"minecraft:acacia_bark", (Object)"minecraft:birch_bark", (Object)"minecraft:dark_oak_bark", (Object)"minecraft:jungle_bark", (Object)"minecraft:oak_bark", (Object)"minecraft:spruce_bark", (Object[])new String[]{"minecraft:acacia_log", "minecraft:birch_log", "minecraft:dark_oak_log", "minecraft:jungle_log", "minecraft:oak_log", "minecraft:spruce_log", "minecraft:stripped_acacia_log", "minecraft:stripped_birch_log", "minecraft:stripped_dark_oak_log", "minecraft:stripped_jungle_log", "minecraft:stripped_oak_log", "minecraft:stripped_spruce_log"});
+    // MagmaCube end - decompile fix
+    private static final Set<String> LOGS = ImmutableSet.of("minecraft:acacia_bark", "minecraft:birch_bark", "minecraft:dark_oak_bark", "minecraft:jungle_bark", "minecraft:oak_bark", "minecraft:spruce_bark", new String[]{"minecraft:acacia_log", "minecraft:birch_log", "minecraft:dark_oak_log", "minecraft:jungle_log", "minecraft:oak_log", "minecraft:spruce_log", "minecraft:stripped_acacia_log", "minecraft:stripped_birch_log", "minecraft:stripped_dark_oak_log", "minecraft:stripped_jungle_log", "minecraft:stripped_oak_log", "minecraft:stripped_spruce_log"}); // MagmaCube - decompile fix
 
     public LeavesFix(Schema debug1, boolean debug2) {
         super(debug1, debug2);
     }
 
     protected TypeRewriteRule makeRule() {
-        Type debug1 = this.getInputSchema().getType(References.CHUNK);
-        OpticFinder debug2 = debug1.findField("Level");
-        OpticFinder debug3 = debug2.type().findField("Sections");
-        Type debug42 = debug3.type();
-        if (!(debug42 instanceof List.ListType)) {
+        // MagmaCube start - decompile fix
+        Type<?> debug1 = getInputSchema().getType(References.CHUNK);
+        OpticFinder<?> debug2 = debug1.findField("Level");
+        OpticFinder<?> debug3 = debug2.type().findField("Sections");
+        Type<?> debug4 = debug3.type();
+        if (!(debug4 instanceof List.ListType))
             throw new IllegalStateException("Expecting sections to be a list.");
-        }
-        Type debug5 = ((List.ListType)debug42).getElement();
-        OpticFinder debug6 = DSL.typeFinder((Type)debug5);
-        return this.fixTypeEverywhereTyped("Leaves fix", debug1, debug4 -> debug4.updateTyped(debug2, debug32 -> {
-            Object debug4 = new int[]{0};
-            Typed debug5 = debug32.updateTyped(debug3, debug3 -> {
-                int debug11;
-                int debug10;
-                Object debug4 = new Int2ObjectOpenHashMap(debug3.getAllTyped(debug6).stream().map(debug1 -> new LeavesSection((Typed<?>)debug1, this.getInputSchema())).collect(Collectors.toMap(Section::getIndex, debug0 -> debug0)));
-                if (debug4.values().stream().allMatch(Section::isSkippable)) {
-                    return debug3;
+        Type<?> debug5 = ((List.ListType)debug4).getElement();
+        OpticFinder<?> debug6 = DSL.typeFinder(debug5);
+        return this.fixTypeEverywhereTyped("Leaves fix", debug1, debug4l -> debug4l.updateTyped(debug2, debug32 -> {
+            int[] a = new int[]{0};
+            Typed<?> debug5l = debug32.updateTyped(debug3, debug3l -> {
+                int z;
+                int x;
+                Int2ObjectOpenHashMap<LeavesSection> debug4ll = new Int2ObjectOpenHashMap(debug3l.getAllTyped(debug6).stream().map(debug1l -> new LeavesSection((Typed<?>)debug1l, this.getInputSchema())).collect(Collectors.toMap(Section::getIndex, debug0 -> debug0)));
+                if (debug4ll.values().stream().allMatch(Section::isSkippable)) {
+                    return debug3l;
                 }
-                ArrayList debug5 = Lists.newArrayList();
-                for (int debug6 = 0; debug6 < 7; ++debug6) {
-                    debug5.add(new IntOpenHashSet());
+                ArrayList<IntOpenHashSet> debug5ll = Lists.newArrayList();
+                for (int debug6ll = 0; debug6ll < 7; ++debug6ll) {
+                    debug5ll.add(new IntOpenHashSet());
                 }
-                for (LeavesSection debug7 : debug4.values()) {
+                for (LeavesSection debug7 : debug4ll.values()) {
                     if (debug7.isSkippable()) continue;
                     for (int debug8 = 0; debug8 < 4096; ++debug8) {
                         int debug9 = debug7.getBlock(debug8);
                         if (debug7.isLog(debug9)) {
-                            ((IntSet)debug5.get(0)).add(debug7.getIndex() << 12 | debug8);
+                            ((IntSet)debug5ll.get(0)).add(debug7.getIndex() << 12 | debug8);
                             continue;
                         }
                         if (!debug7.isLeaf(debug9)) continue;
-                        debug10 = this.getX(debug8);
-                        debug11 = this.getZ(debug8);
-                        debug2[0] = debug4[0] | LeavesFix.getSideMask(debug10 == 0, debug10 == 15, debug11 == 0, debug11 == 15);
+                        x = this.getX(debug8);
+                        z = this.getZ(debug8);
+                        a[0] = a[0] | LeavesFix.getSideMask(x == 0, x == 15, z == 0, z == 15);
                     }
                 }
-                for (int debug6 = 1; debug6 < 7; ++debug6) {
-                    LeavesSection debug7;
-                    debug7 = (IntSet)debug5.get(debug6 - 1);
-                    IntSet debug8 = (IntSet)debug5.get(debug6);
+                for (int debug6l = 1; debug6l < 7; ++debug6l) {
+                    IntSet debug7 = (IntSet)debug5ll.get(debug6l - 1);
+                    IntSet debug8 = (IntSet)debug5ll.get(debug6l);
                     IntIterator debug9 = debug7.iterator();
                     while (debug9.hasNext()) {
-                        debug10 = debug9.nextInt();
-                        debug11 = this.getX(debug10);
-                        int debug122 = this.getY(debug10);
-                        int debug13 = this.getZ(debug10);
+                        x = debug9.nextInt();
+                        z = this.getX(x);
+                        int debug122 = this.getY(x);
+                        int debug13 = this.getZ(x);
                         for (int[] debug17 : DIRECTIONS) {
                             int debug24;
                             int debug22;
                             int debug23;
                             LeavesSection debug21;
-                            int debug18 = debug11 + debug17[0];
+                            int debug18 = z + debug17[0];
                             int debug19 = debug122 + debug17[1];
                             int debug20 = debug13 + debug17[2];
-                            if (debug18 < 0 || debug18 > 15 || debug20 < 0 || debug20 > 15 || debug19 < 0 || debug19 > 255 || (debug21 = (LeavesSection)debug4.get(debug19 >> 4)) == null || debug21.isSkippable() || !debug21.isLeaf(debug23 = debug21.getBlock(debug22 = LeavesFix.getIndex(debug18, debug19 & 0xF, debug20))) || (debug24 = debug21.getDistance(debug23)) <= debug6) continue;
-                            debug21.setDistance(debug22, debug23, debug6);
+                            if (debug18 < 0 || debug18 > 15 || debug20 < 0 || debug20 > 15 || debug19 < 0 || debug19 > 255 || (debug21 = (LeavesSection)debug4ll.get(debug19 >> 4)) == null || debug21.isSkippable() || !debug21.isLeaf(debug23 = debug21.getBlock(debug22 = LeavesFix.getIndex(debug18, debug19 & 0xF, debug20))) || (debug24 = debug21.getDistance(debug23)) <= a[0]) continue;
+                            debug21.setDistance(debug22, debug23, debug6l);
                             debug8.add(LeavesFix.getIndex(debug18, debug19, debug20));
                         }
                     }
                 }
-                return debug3.updateTyped(debug6, arg_0 -> LeavesFix.lambda$null$3((Int2ObjectMap)debug4, arg_0));
+                return debug3l.updateTyped(debug6, arg_0 -> LeavesFix.lambda$null$3((Int2ObjectMap)debug4, arg_0));
             });
-            if (debug4[0] != 0) {
-                debug5 = debug5.update(DSL.remainderFinder(), debug1 -> {
-                    OpticFinder debug6 = (Dynamic)DataFixUtils.orElse((Optional)debug1.get("UpgradeData").result(), (Object)debug1.emptyMap());
-                    return debug1.set("UpgradeData", debug6.set("Sides", debug1.createByte((byte)(debug6.get("Sides").asByte((byte)0) | debug4[0]))));
+            if (a[0] != 0) {
+                debug5l = debug5l.update(DSL.remainderFinder(), debug1l -> {
+                    Dynamic debug6ll = (Dynamic)DataFixUtils.orElse((Optional)debug1l.get("UpgradeData").result(), (Object)debug1l.emptyMap());
+                    return debug1l.set("UpgradeData", debug6ll.set("Sides", debug1l.createByte((byte)(debug6ll.get("Sides").asByte((byte)0) | a[0]))));
                 });
             }
-            return debug5;
+            return debug5l;
+            // MagmaCube end - decompile fix
         }));
     }
 
@@ -270,9 +271,9 @@ extends DataFix {
     }
 
     public static abstract class Section {
-        private final Type<Pair<String, Dynamic<?>>> blockStateType = DSL.named((String)References.BLOCK_STATE.typeName(), (Type)DSL.remainderType());
-        protected final OpticFinder<List<Pair<String, Dynamic<?>>>> paletteFinder = DSL.fieldFinder((String)"Palette", (Type)DSL.list(this.blockStateType));
-        protected final List<Dynamic<?>> palette;
+        private final Type<Pair<String, Dynamic<?>>> blockStateType = DSL.named((String)References.BLOCK_STATE.typeName(), DSL.remainderType()); // MagmaCube - decompile fix
+        protected final OpticFinder<java.util.List<Pair<String, Dynamic<?>>>> paletteFinder = DSL.fieldFinder((String)"Palette", DSL.list(this.blockStateType)); // MagmaCube - decompile fix
+        protected final java.util.List<Dynamic<?>> palette; // MagmaCube - decompile fix
         protected final int index;
         @Nullable
         protected PackedBitStorage storage;
@@ -281,8 +282,8 @@ extends DataFix {
             if (!Objects.equals((Object)debug2.getType(References.BLOCK_STATE), this.blockStateType)) {
                 throw new IllegalStateException("Block state type is not what was expected.");
             }
-            Optional debug3 = debug1.getOptional(this.paletteFinder);
-            this.palette = debug3.map(debug0 -> debug0.stream().map(Pair::getSecond).collect(Collectors.toList())).orElse((List)ImmutableList.of());
+            Optional<java.util.List<Pair<String, Dynamic<?>>>> debug3 = debug1.getOptional(this.paletteFinder); // MagmaCube - decompile fix
+            this.palette = (java.util.List<Dynamic<?>>) debug3.map(debug0 -> (java.util.List)debug0.stream().map(Pair::getSecond).collect(Collectors.toList())).orElse(ImmutableList.of()); // MagmaCube - decompile fix
             Dynamic debug4 = (Dynamic)debug1.get(DSL.remainderFinder());
             this.index = debug4.get("Y").asInt(0);
             this.readStorage(debug4);
@@ -302,7 +303,7 @@ extends DataFix {
             if (this.isSkippable()) {
                 return debug12;
             }
-            return debug12.update(DSL.remainderFinder(), debug1 -> debug1.set("BlockStates", debug1.createLongList(Arrays.stream(this.storage.getRaw())))).set(this.paletteFinder, this.palette.stream().map(debug0 -> Pair.of((Object)References.BLOCK_STATE.typeName(), (Object)debug0)).collect(Collectors.toList()));
+            return debug12.update(DSL.remainderFinder(), debug1l -> debug1l.set("BlockStates", debug1l.createLongList(Arrays.stream(this.storage.getRaw())))).set(this.paletteFinder, (java.util.List<Pair<String, Dynamic<?>>>) (Object) this.palette.stream().map(debug0 -> Pair.of(References.BLOCK_STATE.typeName(), debug0)).collect(Collectors.toList())); // MagmaCube - decompile fix
         }
 
         public boolean isSkippable() {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java
index 3686018cff71a113bdb22392719b75f3c63d5679..fbf95ba01623a54de256a5c4c82adea07b081c76 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java
@@ -129,29 +129,30 @@ extends DataFix {
     }
 
     protected TypeRewriteRule makeRule() {
-        Type debug1 = this.getOutputSchema().getType(References.LEVEL);
-        return this.fixTypeEverywhereTyped("LevelDataGeneratorOptionsFix", this.getInputSchema().getType(References.LEVEL), debug1, debug12 -> (Typed)debug12.write().flatMap(debug1 -> {
-            Dynamic debug3;
-            Optional debug2 = debug1.get("generatorOptions").asString().result();
-            if ("flat".equalsIgnoreCase(debug1.get("generatorName").asString(""))) {
+        // MagmaCube start - decompile fix
+        Type<?> debug1 = this.getOutputSchema().getType(References.LEVEL);
+        return this.fixTypeEverywhereTyped("LevelDataGeneratorOptionsFix", this.getInputSchema().getType(References.LEVEL), debug1, debug12 -> debug12.write().flatMap(debug1l -> {
+            Dynamic<?> debug3;
+            Optional<String> debug2 = debug1l.get("generatorOptions").asString().result();
+            if ("flat".equalsIgnoreCase(debug1l.get("generatorName").asString(""))) {
                 String debug4 = debug2.orElse("");
-                debug3 = debug1.set("generatorOptions", LevelDataGeneratorOptionsFix.convert(debug4, debug1.getOps()));
-            } else if ("buffet".equalsIgnoreCase(debug1.get("generatorName").asString("")) && debug2.isPresent()) {
-                Dynamic debug4 = new Dynamic((DynamicOps)JsonOps.INSTANCE, (Object)GsonHelper.parse((String)debug2.get(), true));
-                debug3 = debug1.set("generatorOptions", debug4.convert(debug1.getOps()));
+                debug3 = debug1l.set("generatorOptions", LevelDataGeneratorOptionsFix.convert(debug4, debug1l.getOps()));
+            } else if ("buffet".equalsIgnoreCase(debug1l.get("generatorName").asString("")) && debug2.isPresent()) {
+                Dynamic debug4 = new Dynamic(JsonOps.INSTANCE, GsonHelper.parse((String)debug2.get(), true));
+                debug3 = debug1l.set("generatorOptions", debug4.convert(debug1l.getOps()));
             } else {
-                debug3 = debug1;
+                debug3 = debug1l;
             }
             return debug1.readTyped(debug3);
         }).map(Pair::getFirst).result().orElseThrow(() -> new IllegalStateException("Could not read new level type.")));
+        // MagmaCube end - decompile fix
     }
 
     private static <T> Dynamic<T> convert(String debug0, DynamicOps<T> debug13) {
-        String[] debug6;
-        List<Object> debug3;
         Iterator debug2 = Splitter.on((char)';').split((CharSequence)debug0).iterator();
         String debug4 = "minecraft:plains";
-        HashMap debug5 = Maps.newHashMap();
+        HashMap<String, Map<String, String>> debug5 = Maps.newHashMap(); // MagmaCube - decompile fix
+        List<Pair<Integer, String>> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
         if (!debug0.isEmpty() && debug2.hasNext()) {
             debug3 = LevelDataGeneratorOptionsFix.getLayersInfoFromString((String)debug2.next());
             if (!debug3.isEmpty()) {
@@ -159,13 +160,13 @@ extends DataFix {
                     debug4 = MAP.getOrDefault(debug2.next(), "minecraft:plains");
                 }
                 if (debug2.hasNext()) {
+                    String[] debug6;
                     for (String debug10 : debug6 = ((String)debug2.next()).toLowerCase(Locale.ROOT).split(",")) {
-                        String[] debug122;
-                        String[] debug11 = debug10.split("Â¥Â¥(", 2);
+                        String[] debug11 = debug10.split("\\(", 2); // MagmaCube - decompile fix
                         if (debug11[0].isEmpty()) continue;
                         debug5.put(debug11[0], Maps.newHashMap());
                         if (debug11.length <= 1 || !debug11[1].endsWith(")") || debug11[1].length() <= 1) continue;
-                        for (String debug16 : debug122 = debug11[1].substring(0, debug11[1].length() - 1).split(" ")) {
+                        for (String debug16 : debug11 = debug11[1].substring(0, debug11[1].length() - 1).split(" ")) { // MagmaCube - decompile fix
                             String[] debug17 = debug16.split("=", 2);
                             if (debug17.length != 2) continue;
                             ((Map)debug5.get(debug11[0])).put(debug17[0], debug17[1]);
@@ -176,15 +177,14 @@ extends DataFix {
                 }
             }
         } else {
-            debug3 = Lists.newArrayList();
-            debug3.add((Object)Pair.of((Object)1, (Object)"minecraft:bedrock"));
-            debug3.add((Object)Pair.of((Object)2, (Object)"minecraft:dirt"));
-            debug3.add((Object)Pair.of((Object)1, (Object)"minecraft:grass_block"));
+            debug3.add(Pair.of(1, "minecraft:bedrock")); // MagmaCube - decompile fix
+            debug3.add(Pair.of(2, "minecraft:dirt")); // MagmaCube - decompile fix
+            debug3.add(Pair.of(1, "minecraft:grass_block")); // MagmaCube - decompile fix
             debug5.put("village", Maps.newHashMap());
         }
-        debug6 = debug13.createList(debug3.stream().map(debug1 -> debug13.createMap((Map)ImmutableMap.of((Object)debug13.createString("height"), (Object)debug13.createInt(((Integer)debug1.getFirst()).intValue()), (Object)debug13.createString("block"), (Object)debug13.createString((String)debug1.getSecond())))));
-        Object debug7 = debug13.createMap(debug5.entrySet().stream().map(debug12 -> Pair.of((Object)debug13.createString(((String)debug12.getKey()).toLowerCase(Locale.ROOT)), (Object)debug13.createMap(((Map)debug12.getValue()).entrySet().stream().map(debug1 -> Pair.of((Object)debug13.createString((String)debug1.getKey()), (Object)debug13.createString((String)debug1.getValue()))).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond))))).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)));
-        return new Dynamic(debug13, debug13.createMap((Map)ImmutableMap.of((Object)debug13.createString("layers"), (Object)debug6, (Object)debug13.createString("biome"), (Object)debug13.createString(debug4), (Object)debug13.createString("structures"), (Object)debug7)));
+        T debug6 = debug13.createList(debug3.stream().map(debug1 -> debug13.createMap(ImmutableMap.of(debug13.createString("height"), debug13.createInt(debug1.getFirst()), debug13.createString("block"), debug13.createString(debug1.getSecond()))))); // MagmaCube - decompile fix
+        Object debug7 = debug13.createMap(debug5.entrySet().stream().map(debug12 -> Pair.of(debug13.createString(((String)debug12.getKey()).toLowerCase(Locale.ROOT)), debug13.createMap((debug12.getValue()).entrySet().stream().map(debug1 -> Pair.of(debug13.createString((String)debug1.getKey()), debug13.createString((String)debug1.getValue()))).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond))))).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond))); // MagmaCube - decompile fix
+        return new Dynamic(debug13, debug13.createMap((Map)ImmutableMap.of(debug13.createString("layers"), debug6, debug13.createString("biome"), debug13.createString(debug4), debug13.createString("structures"), debug7))); // MagmaCube - decompile fix
     }
 
     @Nullable
@@ -202,7 +202,7 @@ extends DataFix {
             debug2 = 1;
         }
         String debug3 = debug1[debug1.length - 1];
-        return Pair.of((Object)debug2, (Object)debug3);
+        return Pair.of(debug2, debug3);
     }
 
     private static List<Pair<Integer, String>> getLayersInfoFromString(String debug0) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
index de1493af16d07da4fe58dbc063f77b0f1403b02f..721b74d53833c915428c8b33e7d7fae5337e0850 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
@@ -77,23 +77,23 @@ extends DataFix {
         StringBuilder debug6 = new StringBuilder();
         Splitter debug7 = debug4 < 3 ? OLD_AMOUNT_SPLITTER : AMOUNT_SPLITTER;
         debug6.append(StreamSupport.stream(LAYER_SPLITTER.split((CharSequence)debug5).spliterator(), false).map(debug2 -> {
-            String debug4;
-            int debug3;
-            List debug5 = debug7.splitToList((CharSequence)debug2);
-            if (debug5.size() == 2) {
-                debug3 = NumberUtils.toInt((String)((String)debug5.get(0)));
-                debug4 = (String)debug5.get(1);
+            String debug4l; // MagmaCube - decompile fix
+            int debug3l; // MagmaCube - decompile fix
+            List debug5l = debug7.splitToList((CharSequence)debug2); // MagmaCube - decompile fix
+            if (debug5l.size() == 2) { // MagmaCube - decompile fix
+                debug3l = NumberUtils.toInt((String)((String)debug5l.get(0))); // MagmaCube - decompile fix
+                debug4l = (String)debug5l.get(1); // MagmaCube - decompile fix
             } else {
-                debug3 = 1;
-                debug4 = (String)debug5.get(0);
+                debug3l = 1; // MagmaCube - decompile fix
+                debug4l = (String)debug5l.get(0); // MagmaCube - decompile fix
             }
-            List debug6 = BLOCK_SPLITTER.splitToList((CharSequence)debug4);
-            int debug7 = ((String)debug6.get(0)).equals("minecraft") ? 1 : 0;
-            String debug8 = (String)debug6.get(debug7);
-            int debug9 = debug4 == 3 ? EntityBlockStateFix.getBlockId("minecraft:" + debug8) : NumberUtils.toInt((String)debug8, (int)0);
-            int debug10 = debug7 + 1;
-            int debug11 = debug6.size() > debug10 ? NumberUtils.toInt((String)((String)debug6.get(debug10)), (int)0) : 0;
-            return (debug3 == 1 ? "" : debug3 + "*") + BlockStateData.getTag(debug9 << 4 | debug11).get("Name").asString("");
+            List debug6l = BLOCK_SPLITTER.splitToList((CharSequence)debug4l); // MagmaCube - decompile fix
+            int debug7l = ((String)debug6l.get(0)).equals("minecraft") ? 1 : 0; // MagmaCube - decompile fix
+            String debug8 = (String)debug6l.get(debug7l); // MagmaCube - decompile fix
+            int debug9 = debug4 == 3 ? EntityBlockStateFix.getBlockId("minecraft:" + debug8) : NumberUtils.toInt((String)debug8, (int)0); // MagmaCube - decompile fix
+            int debug10 = debug7l + 1; // MagmaCube - decompile fix
+            int debug11 = debug6l.size() > debug10 ? NumberUtils.toInt((String)((String)debug6l.get(debug10)), (int)0) : 0; // MagmaCube - decompile fix
+            return (debug3l == 1 ? "" : debug3l + "*") + BlockStateData.getTag(debug9 << 4 | debug11).get("Name").asString(""); // MagmaCube - decompile fix
         }).collect(Collectors.joining(",")));
         while (debug22.hasNext()) {
             debug6.append(';').append((String)debug22.next());
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/MemoryExpiryDataFix.java b/src/main/java/net/minecraft/util/datafix/fixes/MemoryExpiryDataFix.java
index be3a498f263428037fa56e8cc8d6271135c7788f..15a3bdb148634aceb076d64d2e571cc9b953bc8d 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/MemoryExpiryDataFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/MemoryExpiryDataFix.java
@@ -17,26 +17,26 @@ public class MemoryExpiryDataFix extends NamedEntityFix
     
     @Override
     protected Typed<?> fix(final Typed<?> debug1) {
-        return (Typed<?>)debug1.update(DSL.remainderFinder(), (Function)this::fixTag);
+        return (Typed<?>)debug1.update(DSL.remainderFinder(), this::fixTag); // MagmaCube - decompile fix
     }
     
     public Dynamic<?> fixTag(final Dynamic<?> debug1) {
-        return (Dynamic<?>)debug1.update("Brain", (Function)this::updateBrain);
+        return (Dynamic<?>)debug1.update("Brain", this::updateBrain); // MagmaCube - decompile fix
     }
     
     private Dynamic<?> updateBrain(final Dynamic<?> debug1) {
-        return (Dynamic<?>)debug1.update("memories", (Function)this::updateMemories);
+        return (Dynamic<?>)debug1.update("memories", this::updateMemories); // MagmaCube - decompile fix
     }
     
     private Dynamic<?> updateMemories(final Dynamic<?> debug1) {
-        return (Dynamic<?>)debug1.updateMapValues((Function)this::updateMemoryEntry);
+        return (Dynamic<?>)debug1.updateMapValues(this::updateMemoryEntry); // MagmaCube - decompile fix
     }
     
     private Pair<Dynamic<?>, Dynamic<?>> updateMemoryEntry(final Pair<Dynamic<?>, Dynamic<?>> debug1) {
-        return (Pair<Dynamic<?>, Dynamic<?>>)debug1.mapSecond((Function)this::wrapMemoryValue);
+        return debug1.mapSecond(this::wrapMemoryValue); // MagmaCube - decompile fix
     }
     
     private Dynamic<?> wrapMemoryValue(final Dynamic<?> debug1) {
-        return (Dynamic<?>)debug1.createMap((Map)ImmutableMap.of((Object)debug1.createString("value"), (Object)debug1));
+        return (Dynamic<?>)debug1.createMap(ImmutableMap.of(debug1.createString("value"), debug1)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java b/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
index e1a8c7821010d16b1d30816f268f397a37e52530..21ec030d5298625dbf2a012389a9535d7b058815 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
@@ -42,26 +42,23 @@ public class MissingDimensionFix extends DataFix
     
     protected TypeRewriteRule makeRule() {
         final Schema debug5 = this.getInputSchema();
-        final TaggedChoice.TaggedChoiceType<String> debug6 = (TaggedChoice.TaggedChoiceType<String>)new TaggedChoice.TaggedChoiceType("type", DSL.string(), (Map)ImmutableMap.of((Object)"minecraft:debug", (Object)DSL.remainderType(), (Object)"minecraft:flat", (Object)optionalFields("settings", optionalFields("biome", (com.mojang.datafixers.types.Type<Object>)debug5.getType(References.BIOME), "layers", (com.mojang.datafixers.types.Type<Object>)DSL.list((Type)optionalFields("block", (com.mojang.datafixers.types.Type<Object>)debug5.getType(References.BLOCK_NAME))))), (Object)"minecraft:noise", (Object)optionalFields("biome_source", (com.mojang.datafixers.types.Type<Object>)DSL.taggedChoiceType("type", DSL.string(), (Map)ImmutableMap.of((Object)"minecraft:fixed", (Object)fields("biome", (com.mojang.datafixers.types.Type<Object>)debug5.getType(References.BIOME)), (Object)"minecraft:multi_noise", (Object)DSL.list((Type)fields("biome", (com.mojang.datafixers.types.Type<Object>)debug5.getType(References.BIOME))), (Object)"minecraft:checkerboard", (Object)fields("biomes", (com.mojang.datafixers.types.Type<Object>)DSL.list(debug5.getType(References.BIOME))), (Object)"minecraft:vanilla_layered", (Object)DSL.remainderType(), (Object)"minecraft:the_end", (Object)DSL.remainderType())), "settings", (com.mojang.datafixers.types.Type<Object>)DSL.or(DSL.string(), (Type)optionalFields("default_block", (com.mojang.datafixers.types.Type<Object>)debug5.getType(References.BLOCK_NAME), "default_fluid", (com.mojang.datafixers.types.Type<Object>)debug5.getType(References.BLOCK_NAME))))));
-        final CompoundList.CompoundListType<String, ?> debug7 = (CompoundList.CompoundListType<String, ?>)DSL.compoundList((Type)NamespacedSchema.namespacedString(), (Type)fields("generator", (com.mojang.datafixers.types.Type<Object>)debug6));
+        final TaggedChoice.TaggedChoiceType<String> debug6 = new TaggedChoice.TaggedChoiceType<>("type", DSL.string(), ImmutableMap.of("minecraft:debug", DSL.remainderType(), "minecraft:flat", optionalFields("settings", optionalFields("biome", debug5.getType(References.BIOME), "layers", DSL.list((Type)optionalFields("block", debug5.getType(References.BLOCK_NAME))))), "minecraft:noise", optionalFields("biome_source", DSL.taggedChoiceType("type", DSL.string(), ImmutableMap.of("minecraft:fixed", fields("biome", debug5.getType(References.BIOME)), "minecraft:multi_noise", DSL.list(fields("biome", debug5.getType(References.BIOME))), "minecraft:checkerboard", fields("biomes", DSL.list(debug5.getType(References.BIOME))), "minecraft:vanilla_layered", DSL.remainderType(), "minecraft:the_end", DSL.remainderType())), "settings", DSL.or(DSL.string(), optionalFields("default_block", debug5.getType(References.BLOCK_NAME), "default_fluid", debug5.getType(References.BLOCK_NAME)))))); // MagmaCube - decompile fix
+        final CompoundList.CompoundListType<String, ?> debug7 = DSL.compoundList(NamespacedSchema.namespacedString(), fields("generator", debug6)); // MagmaCube - decompile fix
         final Type<?> debug8 = (Type<?>)DSL.and((Type)debug7, DSL.remainderType());
         final Type<?> debug9 = (Type<?>)debug5.getType(References.WORLD_GEN_SETTINGS);
         final FieldFinder<?> debug10 = (FieldFinder<?>)new FieldFinder("dimensions", (Type)debug8);
-        if (!debug9.findFieldType("dimensions").equals((Object)debug8)) {
+        if (!debug9.findFieldType("dimensions").equals(debug8)) { // MagmaCube - decompile fix
             throw new IllegalStateException();
         }
         final OpticFinder<? extends List<? extends Pair<String, ?>>> debug11 = (OpticFinder<? extends List<? extends Pair<String, ?>>>)debug7.finder();
-        final Dynamic<?> debug12;
-        final Dynamic<?> debug13;
-        final CompoundList.CompoundListType compoundListType;
-        return this.fixTypeEverywhereTyped("MissingDimensionFix", (Type)debug9, debug4 -> debug4.updateTyped((OpticFinder)debug10, debug4 -> debug4.updateTyped((OpticFinder)debug11, debug3 -> {
+        return this.fixTypeEverywhereTyped("MissingDimensionFix", (Type)debug9, debug4 -> debug4.updateTyped(debug10, debug4l -> debug4l.updateTyped((OpticFinder)debug11, debug3 -> { // MagmaCube - decompile fix
             if (!(debug3.getValue() instanceof List)) {
                 throw new IllegalStateException("List exptected");
             }
             else if (((List)debug3.getValue()).isEmpty()) {
-                debug12 = (Dynamic<?>)debug4.get(DSL.remainderFinder());
-                debug13 = this.recreateSettings(debug12);
-                return (Typed)DataFixUtils.orElse((Optional)compoundListType.readTyped((Dynamic)debug13).result().map(Pair::getFirst), (Object)debug3);
+                Dynamic<?> debug12 = (Dynamic<?>)debug4l.get(DSL.remainderFinder()); // MagmaCube - decompile fix
+                Dynamic<?> debug13 = this.recreateSettings(debug12); // MagmaCube - decompile fix
+                return (Typed)DataFixUtils.orElse(debug7.readTyped(debug13).result().map(Pair::getFirst), debug3); // MagmaCube - decompile fix
             }
             else {
                 return debug3;
@@ -71,6 +68,6 @@ public class MissingDimensionFix extends DataFix
     
     private <T> Dynamic<T> recreateSettings(final Dynamic<T> debug1) {
         final long debug2 = debug1.get("seed").asLong(0L);
-        return (Dynamic<T>)new Dynamic(debug1.getOps(), (Object)WorldGenSettingsFix.vanillaLevels(debug1, debug2, (com.mojang.serialization.Dynamic<T>)WorldGenSettingsFix.defaultOverworld((com.mojang.serialization.Dynamic<T>)debug1, debug2), false));
+        return (Dynamic<T>)new Dynamic(debug1.getOps(), WorldGenSettingsFix.vanillaLevels(debug1, debug2, (com.mojang.serialization.Dynamic<T>)WorldGenSettingsFix.defaultOverworld((com.mojang.serialization.Dynamic<T>)debug1, debug2), false));
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/NamedEntityFix.java b/src/main/java/net/minecraft/util/datafix/fixes/NamedEntityFix.java
index aa61930877234bf969735e7c38544da09b1e4a93..87ffa6c87c170634c7542cadc2f740b1f7dfb1e2 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/NamedEntityFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/NamedEntityFix.java
@@ -23,7 +23,7 @@ public abstract class NamedEntityFix extends DataFix
     
     public TypeRewriteRule makeRule() {
         final OpticFinder<?> debug3 = (OpticFinder<?>)DSL.namedChoice(this.entityName, this.getInputSchema().getChoiceType(this.type, this.entityName));
-        return this.fixTypeEverywhereTyped(this.name, this.getInputSchema().getType(this.type), this.getOutputSchema().getType(this.type), debug2 -> debug2.updateTyped((OpticFinder)debug3, this.getOutputSchema().getChoiceType(this.type, this.entityName), (Function)this::fix));
+        return this.fixTypeEverywhereTyped(this.name, this.getInputSchema().getType(this.type), this.getOutputSchema().getType(this.type), debug2 -> debug2.updateTyped((OpticFinder)debug3, this.getOutputSchema().getChoiceType(this.type, this.entityName), this::fix)); // MagmaCube - decompile fix
     }
     
     protected abstract Typed<?> fix(final Typed<?> p0);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ObjectiveDisplayNameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ObjectiveDisplayNameFix.java
index 1bd46769e12894999396c748ae4a4678e819f910..7c71d48f6c1548918cb6c742a6b0b84e135f51c0 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ObjectiveDisplayNameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ObjectiveDisplayNameFix.java
@@ -4,6 +4,8 @@ import com.mojang.serialization.DynamicOps;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.DataFixUtils;
+
+import java.util.Optional;
 import java.util.function.Function;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TextComponent;
@@ -25,6 +27,6 @@ public class ObjectiveDisplayNameFix extends DataFix
         if (!Objects.equals(debug2, this.getInputSchema().getType(References.OBJECTIVE))) {
             throw new IllegalStateException("Objective type is not what was expected.");
         }
-        return this.fixTypeEverywhere("ObjectiveDisplayNameFix", (Type)debug2, debug0 -> debug0 -> debug0.mapSecond(debug0 -> ((Dynamic)debug0).update("DisplayName", debug1 -> (Dynamic)DataFixUtils.orElse(debug1.asString().map(debug0 -> Component.Serializer.toJson(new TextComponent(debug0))).map((Function)debug0::createString).result(), (Object)debug1))));
+        return this.fixTypeEverywhere("ObjectiveDisplayNameFix", debug2, debug0 -> debug0l -> debug0l.mapSecond(debug0ll -> debug0ll.update("DisplayName", debug1 -> DataFixUtils.orElse((Optional) debug1.asString().map(debug0lll -> Component.Serializer.toJson(new TextComponent(debug0lll))).map(debug0::createString).result(), debug1)))); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerBlockEntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerBlockEntityRenameFix.java
index 45d0877899c8618aeaa577d80f2affe5c0929a3e..c357635e19fd148cb13ffad5c0d1521caeeffeb4 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerBlockEntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerBlockEntityRenameFix.java
@@ -15,14 +15,14 @@ public class OminousBannerBlockEntityRenameFix extends NamedEntityFix
     
     @Override
     protected Typed<?> fix(final Typed<?> debug1) {
-        return (Typed<?>)debug1.update(DSL.remainderFinder(), (Function)this::fixTag);
+        return (Typed<?>)debug1.update(DSL.remainderFinder(), this::fixTag); // MagmaCube - decompile fix
     }
     
     private Dynamic<?> fixTag(final Dynamic<?> debug1) {
         final Optional<String> debug2 = (Optional<String>)debug1.get("CustomName").asString().result();
         if (debug2.isPresent()) {
             String debug3 = debug2.get();
-            debug3 = debug3.replace("Â¥"translateÂ¥":Â¥"block.minecraft.illager_bannerÂ¥"", "Â¥"translateÂ¥":Â¥"block.minecraft.ominous_bannerÂ¥"");
+            debug3 = debug3.replace("\"translate\":\"block.minecraft.illager_banner\"", "\"translate\":\"block.minecraft.ominous_banner\""); // MagmaCube - decompile fix
             return (Dynamic<?>)debug1.set("CustomName", debug1.createString(debug3));
         }
         return debug1;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerRenameFix.java
index 0ea17c754909ceb49847fcb967105ab8ce3d94ab..815a68450924debe7e0ab23dd8edb5ba6d526578 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerRenameFix.java
@@ -26,7 +26,7 @@ public class OminousBannerRenameFix extends DataFix
             final Optional<String> debug4 = (Optional<String>)debug3.get("Name").asString().result();
             if (debug4.isPresent()) {
                 String debug5 = debug4.get();
-                debug5 = debug5.replace("Â¥"translateÂ¥":Â¥"block.minecraft.illager_bannerÂ¥"", "Â¥"translateÂ¥":Â¥"block.minecraft.ominous_bannerÂ¥"");
+                debug5 = debug5.replace("\"translate\":\"block.minecraft.illager_banner\"", "\"translate\":\"block.minecraft.ominous_banner\""); // MagmaCube - decompile fix
                 debug3 = (Dynamic<?>)debug3.set("Name", debug3.createString(debug5));
             }
             return (Dynamic<?>)debug1.set("display", (Dynamic)debug3);
@@ -38,20 +38,16 @@ public class OminousBannerRenameFix extends DataFix
         final Type<?> debug4 = (Type<?>)this.getInputSchema().getType(References.ITEM_STACK);
         final OpticFinder<Pair<String, String>> debug5 = (OpticFinder<Pair<String, String>>)DSL.fieldFinder("id", DSL.named(References.ITEM_NAME.typeName(), (Type)NamespacedSchema.namespacedString()));
         final OpticFinder<?> debug6 = (OpticFinder<?>)debug4.findField("tag");
-        final OpticFinder opticFinder;
-        final Optional<Pair<String, String>> debug7;
-        final OpticFinder opticFinder2;
-        final Optional<? extends Typed<?>> debug8;
-        final Typed<?> debug9;
-        final Dynamic<?> debug10;
+        // MagmaCube start - decompile fix
         return this.fixTypeEverywhereTyped("OminousBannerRenameFix", (Type)debug4, debug3 -> {
-            debug7 = (Optional<Pair<String, String>>)debug3.getOptional(opticFinder);
+            Optional<Pair<String, String>> debug7 = (Optional<Pair<String, String>>)debug3.getOptional(debug5);
             if (debug7.isPresent() && Objects.equals(debug7.get().getSecond(), "minecraft:white_banner")) {
-                debug8 = (Optional<? extends Typed<?>>)debug3.getOptionalTyped(opticFinder2);
+                Optional<? extends Typed<?>> debug8 = (Optional<? extends Typed<?>>)debug3.getOptionalTyped(debug6);
                 if (debug8.isPresent()) {
-                    debug9 = (Typed<?>)debug8.get();
-                    debug10 = (Dynamic<?>)debug9.get(DSL.remainderFinder());
-                    return debug3.set(opticFinder2, debug9.set(DSL.remainderFinder(), (Object)this.fixTag(debug10)));
+                    Typed<?> debug9 = (Typed<?>)debug8.get();
+                    Dynamic<?> debug10 = (Dynamic<?>)debug9.get(DSL.remainderFinder());
+                    return debug3.set(debug6, debug9.set(DSL.remainderFinder(), this.fixTag(debug10)));
+                    // MagmaCube end - decompile fix
                 }
             }
             return debug3;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
index 7a3b0149f4597aac9896e1f225cd6e57c007ede8..f9c0c0d159be50f57cb17cab67f22b50e43d3c73 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
@@ -28,7 +28,7 @@ import net.minecraft.util.datafix.fixes.References;
 
 public class OptionsKeyLwjgl3Fix
 extends DataFix {
-    private static final Int2ObjectMap<String> MAP = (Int2ObjectMap)DataFixUtils.make((Object)new Int2ObjectOpenHashMap(), debug0 -> {
+    private static final Int2ObjectMap<String> MAP = DataFixUtils.make(new Int2ObjectOpenHashMap(), debug0 -> { // MagmaCube - decompile fix
         debug0.put(0, (Object)"key.unknown");
         debug0.put(11, (Object)"key.0");
         debug0.put(2, (Object)"key.1");
@@ -148,19 +148,21 @@ extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        return this.fixTypeEverywhereTyped("OptionsKeyLwjgl3Fix", this.getInputSchema().getType(References.OPTIONS), debug02 -> debug02.update(DSL.remainderFinder(), debug0 -> debug0.getMapValues().map(debug1 -> debug0.createMap(debug1.entrySet().stream().map(debug0 -> {
-            if (((Dynamic)debug0.getKey()).asString("").startsWith("key_")) {
-                Object debug1 = Integer.parseInt(((Dynamic)debug0.getValue()).asString(""));
-                if (debug1 < 0) {
-                    int debug2 = debug1 + 100;
+        // MagmaCube start - decompile fix
+        return this.fixTypeEverywhereTyped("OptionsKeyLwjgl3Fix", this.getInputSchema().getType(References.OPTIONS), debug02 -> debug02.update(DSL.remainderFinder(), debug0 -> debug0.getMapValues().map(debug1 -> debug0.createMap(debug1.entrySet().stream().map(debug0l -> {
+            if ((debug0l.getKey()).asString("").startsWith("key_")) {
+                int debug1l = Integer.parseInt((debug0l.getValue()).asString(""));
+                if (debug1l < 0) { // MagmaCube - decompile fix
+                    int debug2 = debug1l + 100; // MagmaCube - decompile fix
                     String debug3 = debug2 == 0 ? "key.mouse.left" : (debug2 == 1 ? "key.mouse.right" : (debug2 == 2 ? "key.mouse.middle" : "key.mouse." + (debug2 + 1)));
-                    return Pair.of(debug0.getKey(), (Object)((Dynamic)debug0.getValue()).createString(debug3));
+                    return Pair.of(debug0l.getKey(), (debug0l.getValue()).createString(debug3));
                 }
-                String debug2 = (String)MAP.getOrDefault(debug1, (Object)"key.unknown");
-                return Pair.of(debug0.getKey(), (Object)((Dynamic)debug0.getValue()).createString(debug2));
+                String debug2 = (String)MAP.getOrDefault(debug1l, "key.unknown"); // MagmaCube - decompile fix
+                return Pair.of(debug0l.getKey(), (debug0l.getValue()).createString(debug2));
             }
-            return Pair.of(debug0.getKey(), debug0.getValue());
-        }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse(debug0)));
+            return Pair.of(debug0l.getKey(), debug0l.getValue());
+        }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse((Dynamic) debug0)));
+        // MagmaCube end - decompile fix
     }
 }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OptionsLowerCaseLanguageFix.java b/src/main/java/net/minecraft/util/datafix/fixes/OptionsLowerCaseLanguageFix.java
index 64b6652f7664a7a8014aa644b7c4e5c457f89423..67da82a636ee27d9f628fb9d3451ac995435a0e0 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OptionsLowerCaseLanguageFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OptionsLowerCaseLanguageFix.java
@@ -16,14 +16,13 @@ public class OptionsLowerCaseLanguageFix extends DataFix
     }
     
     public TypeRewriteRule makeRule() {
-        final Optional debug;
-        return this.fixTypeEverywhereTyped("OptionsLowerCaseLanguageFix", this.getInputSchema().getType(References.OPTIONS), debug0 -> debug0.update(DSL.remainderFinder(), debug0 -> {
-            debug = debug0.get("lang").asString().result();
+        return this.fixTypeEverywhereTyped("OptionsLowerCaseLanguageFix", this.getInputSchema().getType(References.OPTIONS), debug0 -> debug0.update(DSL.remainderFinder(), debug0l -> { // MagmaCube - decompile fix
+            Optional<String> debug = debug0l.get("lang").asString().result(); // MagmaCube - decompile fix
             if (debug.isPresent()) {
-                return debug0.set("lang", debug0.createString(debug.get().toLowerCase(Locale.ROOT)));
+                return debug0l.set("lang", debug0l.createString(debug.get().toLowerCase(Locale.ROOT))); // MagmaCube - decompile fix
             }
             else {
-                return debug0;
+                return debug0l; // MagmaCube - decompile fix
             }
         }));
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/PlayerUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/PlayerUUIDFix.java
index 326a0a922c14df5fe313536aa52751e9d562b358..3203a1d3ae75c0f397ef05ea38b10b7e416eee43 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/PlayerUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/PlayerUUIDFix.java
@@ -14,10 +14,9 @@ public class PlayerUUIDFix extends AbstractUUIDFix
     }
     
     protected TypeRewriteRule makeRule() {
-        final OpticFinder debug;
         return this.fixTypeEverywhereTyped("PlayerUUIDFix", this.getInputSchema().getType(this.typeReference), debug0 -> {
-            debug = debug0.getType().findField("RootVehicle");
-            return debug0.updateTyped(debug, debug.type(), debug0 -> debug0.update(DSL.remainderFinder(), debug0 -> AbstractUUIDFix.replaceUUIDLeastMost(debug0, "Attach", "Attach").orElse(debug0))).update(DSL.remainderFinder(), debug0 -> EntityUUIDFix.updateEntityUUID(EntityUUIDFix.updateLivingEntity(debug0)));
+            OpticFinder<?> debug = debug0.getType().findField("RootVehicle"); // MagmaCube - decompile fix
+            return debug0.updateTyped(debug, debug.type(), debug0l -> debug0l.update(DSL.remainderFinder(), debug0ll -> AbstractUUIDFix.replaceUUIDLeastMost(debug0ll, "Attach", "Attach").orElse(debug0ll))).update(DSL.remainderFinder(), debug0lll -> EntityUUIDFix.updateEntityUUID(EntityUUIDFix.updateLivingEntity(debug0lll))); // MagmaCube - decompile fix
         });
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameFix.java
index f2460ac8c7da8196682bf003a383addca2104226..a02e94754c3facff915ec6c77af41240cd0106fe 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameFix.java
@@ -27,6 +27,6 @@ public class RecipesRenameFix extends DataFix
         if (!Objects.equals(debug2, this.getInputSchema().getType(References.RECIPE))) {
             throw new IllegalStateException("Recipe type is not what was expected.");
         }
-        return this.fixTypeEverywhere(this.name, (Type)debug2, debug1 -> debug1 -> debug1.mapSecond((Function)this.renamer));
+        return this.fixTypeEverywhere(this.name, debug2, debug1 -> debug1l -> debug1l.mapSecond(this.renamer)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
index b293b9b9b8d7d98f76c734c818725594ca376178..c6143519624fc39e47e129fa49bc8fd77e98fcc7 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
@@ -17,7 +17,7 @@ public class RedstoneWireConnectionsFix extends DataFix
     
     protected TypeRewriteRule makeRule() {
         final Schema debug2 = this.getInputSchema();
-        return this.fixTypeEverywhereTyped("RedstoneConnectionsFix", debug2.getType(References.BLOCK_STATE), debug1 -> debug1.update(DSL.remainderFinder(), (Function)this::updateRedstoneConnections));
+        return this.fixTypeEverywhereTyped("RedstoneConnectionsFix", debug2.getType(References.BLOCK_STATE), debug1 -> debug1.update(DSL.remainderFinder(), this::updateRedstoneConnections)); // MagmaCube - decompile fix
     }
     
     private <T> Dynamic<T> updateRedstoneConnections(final Dynamic<T> debug1) {
@@ -25,29 +25,21 @@ public class RedstoneWireConnectionsFix extends DataFix
         if (!debug2) {
             return debug1;
         }
-        final String debug3;
-        final String debug4;
-        final String debug5;
-        final String debug6;
-        final boolean debug7;
-        final boolean debug8;
-        final String debug9;
-        final String debug10;
-        final String debug11;
-        final String debug12;
+        // MagmaCube start - decompile fix
         return (Dynamic<T>)debug1.update("Properties", debug0 -> {
-            debug3 = debug0.get("east").asString("none");
-            debug4 = debug0.get("west").asString("none");
-            debug5 = debug0.get("north").asString("none");
-            debug6 = debug0.get("south").asString("none");
-            debug7 = (isConnected(debug3) || isConnected(debug4));
-            debug8 = (isConnected(debug5) || isConnected(debug6));
-            debug9 = ((!isConnected(debug3) && !debug8) ? "side" : debug3);
-            debug10 = ((!isConnected(debug4) && !debug8) ? "side" : debug4);
-            debug11 = ((!isConnected(debug5) && !debug7) ? "side" : debug5);
-            debug12 = ((!isConnected(debug6) && !debug7) ? "side" : debug6);
-            return debug0.update("east", debug1 -> debug1.createString(debug9)).update("west", debug1 -> debug1.createString(debug10)).update("north", debug1 -> debug1.createString(debug11)).update("south", debug1 -> debug1.createString(debug12));
+            String debug3 = debug0.get("east").asString("none");
+            String debug4 = debug0.get("west").asString("none");
+            String debug5 = debug0.get("north").asString("none");
+            String debug6 = debug0.get("south").asString("none");
+            boolean debug7 = (isConnected(debug3) || isConnected(debug4));
+            boolean debug8 = (isConnected(debug5) || isConnected(debug6));
+            String debug9 = ((!isConnected(debug3) && !debug8) ? "side" : debug3);
+            String debug10 = ((!isConnected(debug4) && !debug8) ? "side" : debug4);
+            String debug11 = ((!isConnected(debug5) && !debug7) ? "side" : debug5);
+            String debug12 = ((!isConnected(debug6) && !debug7) ? "side" : debug6);
+            return debug0.update("east", debug1l -> debug1l.createString(debug9)).update("west", debug1ll -> debug1ll.createString(debug10)).update("north", debug1lll -> debug1lll.createString(debug11)).update("south", debug1llll -> debug1llll.createString(debug12));
         });
+        // MagmaCube end - decompile fix
     }
     
     private static boolean isConnected(final String debug0) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RenameBiomesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RenameBiomesFix.java
index 378d5ca8513a3e0bc4ac2d3dbd706d572d880cc3..9ea5b4de36f3a131f4adc424264c9e9b80f1f8a3 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RenameBiomesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RenameBiomesFix.java
@@ -28,6 +28,6 @@ public class RenameBiomesFix extends DataFix
         if (!Objects.equals(debug2, this.getInputSchema().getType(References.BIOME))) {
             throw new IllegalStateException("Biome type is not what was expected.");
         }
-        return this.fixTypeEverywhere(this.name, (Type)debug2, debug1 -> debug1 -> debug1.mapSecond(debug1 -> this.biomes.getOrDefault(debug1, debug1)));
+        return this.fixTypeEverywhere(this.name, debug2, debug1 -> debug1l -> debug1l.mapSecond(debug1ll -> this.biomes.getOrDefault(debug1ll, debug1ll))); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ReorganizePoi.java b/src/main/java/net/minecraft/util/datafix/fixes/ReorganizePoi.java
index 9003c9a86b83d328c194467c91961793268eb123..37b065304c87d7c3cdf4a3568ac32ffc4e5f644c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ReorganizePoi.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ReorganizePoi.java
@@ -26,17 +26,17 @@ public class ReorganizePoi extends DataFix
         if (!Objects.equals(debug, this.getInputSchema().getType(References.POI_CHUNK))) {
             throw new IllegalStateException("Poi type is not what was expected.");
         }
-        return this.fixTypeEverywhere("POI reorganization", (Type)debug, debug0 -> debug0 -> debug0.mapSecond((Function)ReorganizePoi::cap));
+        return this.fixTypeEverywhere("POI reorganization", debug, debug0 -> debug0l -> debug0l.mapSecond(ReorganizePoi::cap)); // MagmaCube - decompile fix
     }
     
     private static <T> Dynamic<T> cap(Dynamic<T> debug0) {
-        final Map<Dynamic<T>, Dynamic<T>> debug = (Map<Dynamic<T>, Dynamic<T>>)Maps.newHashMap();
+        final Map<Dynamic<T>, Dynamic<T>> debug = Maps.newHashMap(); // MagmaCube - decompile fix
         for (int debug2 = 0; debug2 < 16; ++debug2) {
             final String debug3 = String.valueOf(debug2);
             final Optional<Dynamic<T>> debug4 = (Optional<Dynamic<T>>)debug0.get(debug3).result();
             if (debug4.isPresent()) {
                 final Dynamic<T> debug5 = debug4.get();
-                final Dynamic<T> debug6 = (Dynamic<T>)debug0.createMap((Map)ImmutableMap.of((Object)debug0.createString("Records"), (Object)debug5));
+                final Dynamic<T> debug6 = (Dynamic<T>)debug0.createMap(ImmutableMap.of(debug0.createString("Records"), debug5)); // MagmaCube - decompile fix
                 debug.put((Dynamic<T>)debug0.createInt(debug2), debug6);
                 debug0 = (Dynamic<T>)debug0.remove(debug3);
             }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
index b8dc1180f6356831322b044f9527980d3feea2a2..472d55d66549150f45125b34d11259e711462986 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
@@ -14,9 +14,9 @@ public class SavedDataUUIDFix extends AbstractUUIDFix
     }
     
     protected TypeRewriteRule makeRule() {
-        return this.fixTypeEverywhereTyped("SavedDataUUIDFix", this.getInputSchema().getType(this.typeReference), debug0 -> debug0.updateTyped(debug0.getType().findField("data"), debug0 -> debug0.update(DSL.remainderFinder(), debug0 -> debug0.update("Raids", debug0 -> debug0.createList((Stream)debug0.asStream().map(debug0 -> debug0.update("HeroesOfTheVillage", debug0 -> debug0.createList((Stream)debug0.asStream().map(debug0 -> AbstractUUIDFix.createUUIDFromLongs(debug0, "UUIDMost", "UUIDLeast").orElseGet(() -> {
+        return this.fixTypeEverywhereTyped("SavedDataUUIDFix", this.getInputSchema().getType(this.typeReference), debug0 -> debug0.updateTyped(debug0.getType().findField("data"), debug0l -> debug0l.update(DSL.remainderFinder(), debug0ll -> debug0ll.update("Raids", debug0lll -> debug0lll.createList((Stream)debug0lll.asStream().map(debug0llll -> debug0llll.update("HeroesOfTheVillage", debug0lllll -> debug0lllll.createList((Stream)debug0lllll.asStream().map(debug0g -> AbstractUUIDFix.createUUIDFromLongs(debug0g, "UUIDMost", "UUIDLeast").orElseGet(() -> { // MagmaCube - decompile fix
             SavedDataUUIDFix.LOGGER.warn("HeroesOfTheVillage contained invalid UUIDs.");
-            return debug0;
+            return debug0g;
         }))))))))));
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataVillageCropFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataVillageCropFix.java
index 998860da6f98c3881f0afedc769be0c4f5368f1f..dca7be69ae137f5d20cadba08ad017370cb27ea7 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataVillageCropFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataVillageCropFix.java
@@ -14,29 +14,28 @@ public class SavedDataVillageCropFix extends DataFix
     }
     
     public TypeRewriteRule makeRule() {
-        return this.writeFixAndRead("SavedDataVillageCropFix", this.getInputSchema().getType(References.STRUCTURE_FEATURE), this.getOutputSchema().getType(References.STRUCTURE_FEATURE), (Function)this::fixTag);
+        return this.writeFixAndRead("SavedDataVillageCropFix", this.getInputSchema().getType(References.STRUCTURE_FEATURE), this.getOutputSchema().getType(References.STRUCTURE_FEATURE), this::fixTag); // MagmaCube - decompile fix
     }
     
     private <T> Dynamic<T> fixTag(final Dynamic<T> debug1) {
-        return (Dynamic<T>)debug1.update("Children", (Function)SavedDataVillageCropFix::updateChildren);
+        return (Dynamic<T>)debug1.update("Children", SavedDataVillageCropFix::updateChildren); // MagmaCube - decompile fix
     }
     
     private static <T> Dynamic<T> updateChildren(final Dynamic<T> debug0) {
-        return debug0.asStreamOpt().map((Function)SavedDataVillageCropFix::updateChildren).map((Function)debug0::createList).result().orElse(debug0);
+        return debug0.asStreamOpt().map(SavedDataVillageCropFix::updateChildren).map(debug0::createList).result().orElse(debug0); // MagmaCube - decompile fix
     }
     
     private static Stream<? extends Dynamic<?>> updateChildren(final Stream<? extends Dynamic<?>> debug0) {
-        final String debug;
-        return debug0.map(debug0 -> {
-            debug = debug0.get("id").asString("");
+        return debug0.map(debug0l -> { // MagmaCube - decompile fix
+            String debug = debug0l.get("id").asString(""); // MagmaCube - decompile fix
             if ("ViF".equals(debug)) {
-                return updateSingleField(debug0);
+                return updateSingleField(debug0l); // MagmaCube - decompile fix
             }
             else if ("ViDF".equals(debug)) {
-                return updateDoubleField(debug0);
+                return updateDoubleField(debug0l); // MagmaCube - decompile fix
             }
             else {
-                return debug0;
+                return debug0l; // MagmaCube - decompile fix
             }
         });
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SimpleEntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SimpleEntityRenameFix.java
index 09d65123910f50c33e7d1df26283cb11e5782fbb..a332a3add516dffc7948afc43300bce681aa932f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SimpleEntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SimpleEntityRenameFix.java
@@ -15,7 +15,7 @@ public abstract class SimpleEntityRenameFix extends EntityRenameFix
     @Override
     protected Pair<String, Typed<?>> fix(final String debug1, final Typed<?> debug2) {
         final Pair<String, Dynamic<?>> debug3 = this.getNewNameAndTag(debug1, (Dynamic<?>)debug2.getOrCreate(DSL.remainderFinder()));
-        return (Pair<String, Typed<?>>)Pair.of(debug3.getFirst(), (Object)debug2.set(DSL.remainderFinder(), debug3.getSecond()));
+        return (Pair<String, Typed<?>>)(Object)Pair.of(debug3.getFirst(), debug2.set(DSL.remainderFinder(), debug3.getSecond())); // MagmaCube - decompile fix
     }
     
     protected abstract Pair<String, Dynamic<?>> getNewNameAndTag(final String p0, final Dynamic<?> p1);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
index 3d6e6d2145aebc9b25894035f3578554bfe61d9b..6c02d58f44d9bba606c590446e3e67867c05f475 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
@@ -18,6 +18,8 @@ import com.mojang.datafixers.schemas.Schema;
 import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.types.templates.TaggedChoice;
 import java.util.Objects;
+
+import com.mojang.datafixers.util.Pair;
 import net.minecraft.util.datafix.fixes.References;
 import net.minecraft.util.datafix.schemas.NamespacedSchema;
 
@@ -31,21 +33,21 @@ extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoice.TaggedChoiceType debug1 = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoice.TaggedChoiceType debug2 = this.getOutputSchema().findChoiceType(References.ENTITY);
-        Type debug32 = DSL.named((String)References.ENTITY_NAME.typeName(), NamespacedSchema.namespacedString());
+        TaggedChoice.TaggedChoiceType<?> debug1 = this.getInputSchema().findChoiceType(References.ENTITY); // MagmaCube - decompile fix
+        TaggedChoice.TaggedChoiceType<?> debug2 = this.getOutputSchema().findChoiceType(References.ENTITY); // MagmaCube - decompile fix
+        Type<Pair<String, String>> debug32 = DSL.named((String)References.ENTITY_NAME.typeName(), NamespacedSchema.namespacedString()); // MagmaCube - decompile fix
         if (!Objects.equals((Object)this.getOutputSchema().getType(References.ENTITY_NAME), (Object)debug32)) {
             throw new IllegalStateException("Entity name type is not what was expected.");
         }
-        return TypeRewriteRule.seq((TypeRewriteRule)this.fixTypeEverywhere(this.name, (Type)debug1, (Type)debug2, debug3 -> debug32 -> debug32.mapFirst(debug3 -> {
-            String debug4 = this.rename((String)debug3);
-            Type debug5 = (Type)debug1.types().get(debug3);
-            Type debug6 = (Type)debug2.types().get(debug4);
+        return TypeRewriteRule.seq(this.fixTypeEverywhere(this.name, (TaggedChoice.TaggedChoiceType<Object>) debug1, (TaggedChoice.TaggedChoiceType<Object>) debug2, debug3 -> debug32l -> debug32l.mapFirst(debug3l -> { // MagmaCube - decompile fix
+            String debug4 = this.rename((String)debug3l); // MagmaCube - decompile fix
+            Type<?> debug5 = (Type)debug1.types().get(debug3l); // MagmaCube - decompile fix
+            Type<?> debug6 = (Type)debug2.types().get(debug4);
             if (!debug6.equals((Object)debug5, true, true)) {
                 throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", new Object[]{debug6, debug5}));
             }
             return debug4;
-        })), (TypeRewriteRule)this.fixTypeEverywhere(this.name + " for entity name", debug32, debug12 -> debug1 -> debug1.mapSecond(this::rename)));
+        })), this.fixTypeEverywhere(this.name + " for entity name", debug32, debug12 -> debug1l -> debug1l.mapSecond(this::rename))); // MagmaCube - decompile fix
     }
 
     protected abstract String rename(String var1);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StructureReferenceCountFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StructureReferenceCountFix.java
index 1f69dcd21bfd9c7c4b5a4fe10310fc0f62500712..a88c3d8412d1ba36ba293c5faf314e7ee446cc30 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StructureReferenceCountFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StructureReferenceCountFix.java
@@ -17,10 +17,10 @@ public class StructureReferenceCountFix extends DataFix
     
     protected TypeRewriteRule makeRule() {
         final Type<?> debug = (Type<?>)this.getInputSchema().getType(References.STRUCTURE_FEATURE);
-        return this.fixTypeEverywhereTyped("Structure Reference Fix", (Type)debug, debug0 -> debug0.update(DSL.remainderFinder(), (Function)StructureReferenceCountFix::setCountToAtLeastOne));
+        return this.fixTypeEverywhereTyped("Structure Reference Fix", debug, debug0 -> debug0.update(DSL.remainderFinder(), StructureReferenceCountFix::setCountToAtLeastOne)); // MagmaCube - decompile fix
     }
     
     private static <T> Dynamic<T> setCountToAtLeastOne(final Dynamic<T> debug0) {
-        return (Dynamic<T>)debug0.update("references", debug0 -> debug0.createInt((int)debug0.asNumber().map((Function)Number::intValue).result().filter(debug0 -> debug0 > 0).orElse(1)));
+        return (Dynamic<T>)debug0.update("references", debug0ll -> debug0ll.createInt((int)debug0ll.asNumber().map(Number::intValue).result().filter(debug0l -> debug0l > 0).orElse(1))); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/TeamDisplayNameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/TeamDisplayNameFix.java
index 7b300a2ce96fdb7b97e05b8c79ea1059064c1340..378e37f7e3a26bc7578397f83f39652e398dfbd9 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/TeamDisplayNameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/TeamDisplayNameFix.java
@@ -25,6 +25,6 @@ public class TeamDisplayNameFix extends DataFix
         if (!Objects.equals(debug2, this.getInputSchema().getType(References.TEAM))) {
             throw new IllegalStateException("Team type is not what was expected.");
         }
-        return this.fixTypeEverywhere("TeamDisplayNameFix", (Type)debug2, debug0 -> debug0 -> debug0.mapSecond(debug0 -> ((Dynamic)debug0).update("DisplayName", debug1 -> (Dynamic)DataFixUtils.orElse(debug1.asString().map(debug0 -> Component.Serializer.toJson(new TextComponent(debug0))).map((Function)debug0::createString).result(), (Object)debug1))));
+        return this.fixTypeEverywhere("TeamDisplayNameFix", debug2, debug0 -> debug0l -> debug0l.mapSecond(debug0ll -> debug0ll.update("DisplayName", debug1 -> (Dynamic)DataFixUtils.orElse(debug1.asString().map(debug0lll -> Component.Serializer.toJson(new TextComponent(debug0lll))).map(debug0ll::createString).result(), debug1)))); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerDataFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerDataFix.java
index 8b63570d9de48239f5ba530b069b0ad64d642839..daf783bb40abb06b074185c58063db16a582b1f2 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerDataFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerDataFix.java
@@ -17,7 +17,7 @@ public class VillagerDataFix extends NamedEntityFix
     @Override
     protected Typed<?> fix(final Typed<?> debug1) {
         final Dynamic<?> debug2 = (Dynamic<?>)debug1.get(DSL.remainderFinder());
-        return (Typed<?>)debug1.set(DSL.remainderFinder(), (Object)debug2.remove("Profession").remove("Career").remove("CareerLevel").set("VillagerData", debug2.createMap((Map)ImmutableMap.of((Object)debug2.createString("type"), (Object)debug2.createString("minecraft:plains"), (Object)debug2.createString("profession"), (Object)debug2.createString(upgradeData(debug2.get("Profession").asInt(0), debug2.get("Career").asInt(0))), (Object)debug2.createString("level"), DataFixUtils.orElse(debug2.get("CareerLevel").result(), (Object)debug2.createInt(1))))));
+        return (Typed<?>)debug1.set(DSL.remainderFinder(), debug2.remove("Profession").remove("Career").remove("CareerLevel").set("VillagerData", debug2.createMap((Map)ImmutableMap.of(debug2.createString("type"), debug2.createString("minecraft:plains"), debug2.createString("profession"), debug2.createString(upgradeData(debug2.get("Profession").asInt(0), debug2.get("Career").asInt(0))), debug2.createString("level"), DataFixUtils.orElse(debug2.get("CareerLevel").result(), debug2.createInt(1)))))); // MagmaCube - decompile fix
     }
     
     private static String upgradeData(final int debug0, final int debug1) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerFollowRangeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerFollowRangeFix.java
index 2ee84af7046b20969c8edaaed580448db1f24b25..07bc875dd35617d72050d6ccb320fd64523f3634 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerFollowRangeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerFollowRangeFix.java
@@ -15,16 +15,16 @@ public class VillagerFollowRangeFix extends NamedEntityFix
     
     @Override
     protected Typed<?> fix(final Typed<?> debug1) {
-        return (Typed<?>)debug1.update(DSL.remainderFinder(), (Function)VillagerFollowRangeFix::fixValue);
+        return (Typed<?>)debug1.update(DSL.remainderFinder(), VillagerFollowRangeFix::fixValue); // MagmaCube - decompile fix
     }
     
     private static Dynamic<?> fixValue(final Dynamic<?> debug0) {
-        return (Dynamic<?>)debug0.update("Attributes", debug1 -> debug0.createList((Stream)debug1.asStream().map(debug0 -> {
-            if (!debug0.get("Name").asString("").equals("generic.follow_range") || debug0.get("Base").asDouble(0.0) != 16.0) {
-                return debug0;
+        return (Dynamic<?>)debug0.update("Attributes", debug1 -> debug0.createList(debug1.asStream().map(debug0l -> { // MagmaCube - decompile fix
+            if (!debug0l.get("Name").asString("").equals("generic.follow_range") || debug0l.get("Base").asDouble(0.0) != 16.0) { // MagmaCube - decompile fix
+                return debug0l; // MagmaCube - decompile fix
             }
             else {
-                return debug0.set("Base", debug0.createDouble(48.0));
+                return debug0l.set("Base", debug0l.createDouble(48.0)); // MagmaCube - decompile fix
             }
         })));
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
index 6f919c9eaca189f5909f1aea3d65e5a0d3f35bdb..2eb84efa4993f5a175541196b68aa9ce0393b45d 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
@@ -32,26 +32,18 @@ public class VillagerRebuildLevelAndXpFix extends DataFix
         final OpticFinder<?> debug10 = (OpticFinder<?>)debug9.findField("Recipes");
         final List.ListType<?> debug11 = (List.ListType<?>)debug10.type();
         final OpticFinder<?> debug12 = (OpticFinder<?>)debug11.getElement().finder();
-        final Dynamic<?> debug13;
-        int debug14;
-        Typed<?> debug15;
-        final OpticFinder opticFinder;
-        final OpticFinder opticFinder2;
-        final OpticFinder opticFinder3;
-        final int debug16;
-        final Optional<Number> debug17;
         return this.fixTypeEverywhereTyped("Villager level and xp rebuild", this.getInputSchema().getType(References.ENTITY), debug5 -> debug5.updateTyped((OpticFinder)debug7, (Type)debug6, debug3 -> {
-            debug13 = (Dynamic<?>)debug3.get(DSL.remainderFinder());
-            debug14 = debug13.get("VillagerData").get("level").asInt(0);
-            debug15 = debug3;
+            Dynamic<?> debug13 = (Dynamic<?>)debug3.get(DSL.remainderFinder()); // MagmaCube - decompile fix
+            int debug14 = debug13.get("VillagerData").get("level").asInt(0); // MagmaCube - decompile fix
+            Typed<?> debug15 = debug3; // MagmaCube - decompile fix
             if (debug14 == 0 || debug14 == 1) {
-                debug16 = debug3.getOptionalTyped(opticFinder).flatMap(debug1 -> debug1.getOptionalTyped(opticFinder2)).map(debug1 -> debug1.getAllTyped(opticFinder3).size()).orElse(0);
+                int debug16 = debug3.getOptionalTyped(debug7).flatMap(debug1 -> debug1.getOptionalTyped(debug8)).map(debug1 -> debug1.getAllTyped(debug10).size()).orElse(0); // MagmaCube - decompile fix
                 debug14 = Mth.clamp(debug16 / 2, 1, 5);
                 if (debug14 > 1) {
                     debug15 = addLevel(debug15, debug14);
                 }
             }
-            debug17 = (Optional<Number>)debug13.get("Xp").asNumber().result();
+            Optional<Number> debug17 = (Optional<Number>)debug13.get("Xp").asNumber().result(); // MagmaCube - decompile fix
             if (!debug17.isPresent()) {
                 debug15 = addXpFromLevel(debug15, debug14);
             }
@@ -60,12 +52,12 @@ public class VillagerRebuildLevelAndXpFix extends DataFix
     }
     
     private static Typed<?> addLevel(final Typed<?> debug0, final int debug1) {
-        return (Typed<?>)debug0.update(DSL.remainderFinder(), debug1 -> debug1.update("VillagerData", debug1 -> debug1.set("level", debug1.createInt(debug1))));
+        return (Typed<?>)debug0.update(DSL.remainderFinder(), debug1l -> debug1l.update("VillagerData", debug1ll -> debug1ll.set("level", debug1ll.createInt(debug1)))); // MagmaCube - decompile fix
     }
     
     private static Typed<?> addXpFromLevel(final Typed<?> debug0, final int debug1) {
         final int debug2 = getMinXpPerLevel(debug1);
-        return (Typed<?>)debug0.update(DSL.remainderFinder(), debug1 -> debug1.set("Xp", debug1.createInt(debug2)));
+        return (Typed<?>)debug0.update(DSL.remainderFinder(), debug1l -> debug1l.set("Xp", debug1l.createInt(debug2))); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
index de10633c5d0ae1907f14f056ca27ec04f1daed7c..d71f65832132b231e8661f343768098975f8ad79 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
@@ -28,8 +28,6 @@ import com.google.common.collect.Maps;
 import com.mojang.datafixers.DSL;
 import com.mojang.datafixers.DataFix;
 import com.mojang.datafixers.TypeRewriteRule;
-import com.mojang.datafixers.kinds.App;
-import com.mojang.datafixers.kinds.Applicative;
 import com.mojang.datafixers.schemas.Schema;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.Dynamic;
@@ -44,14 +42,14 @@ import java.util.Objects;
 import java.util.Optional;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
-import net.minecraft.util.datafix.fixes.References;
+
 import org.apache.commons.lang3.math.NumberUtils;
 import org.apache.commons.lang3.mutable.MutableBoolean;
 import org.apache.commons.lang3.mutable.MutableInt;
 
 public class WorldGenSettingsFix
 extends DataFix {
-    private static final ImmutableMap<String, StructureFeatureConfiguration> DEFAULTS = ImmutableMap.builder().put((Object)"minecraft:village", (Object)new StructureFeatureConfiguration(32, 8, 10387312)).put((Object)"minecraft:desert_pyramid", (Object)new StructureFeatureConfiguration(32, 8, 14357617)).put((Object)"minecraft:igloo", (Object)new StructureFeatureConfiguration(32, 8, 14357618)).put((Object)"minecraft:jungle_pyramid", (Object)new StructureFeatureConfiguration(32, 8, 14357619)).put((Object)"minecraft:swamp_hut", (Object)new StructureFeatureConfiguration(32, 8, 14357620)).put((Object)"minecraft:pillager_outpost", (Object)new StructureFeatureConfiguration(32, 8, 165745296)).put((Object)"minecraft:monument", (Object)new StructureFeatureConfiguration(32, 5, 10387313)).put((Object)"minecraft:endcity", (Object)new StructureFeatureConfiguration(20, 11, 10387313)).put((Object)"minecraft:mansion", (Object)new StructureFeatureConfiguration(80, 20, 10387319)).build();
+    private static final ImmutableMap<String, StructureFeatureConfiguration> DEFAULTS = (ImmutableMap) ImmutableMap.builder().put("minecraft:village", new StructureFeatureConfiguration(32, 8, 10387312)).put("minecraft:desert_pyramid", new StructureFeatureConfiguration(32, 8, 14357617)).put("minecraft:igloo", new StructureFeatureConfiguration(32, 8, 14357618)).put("minecraft:jungle_pyramid", new StructureFeatureConfiguration(32, 8, 14357619)).put("minecraft:swamp_hut", new StructureFeatureConfiguration(32, 8, 14357620)).put("minecraft:pillager_outpost", new StructureFeatureConfiguration(32, 8, 165745296)).put("minecraft:monument", new StructureFeatureConfiguration(32, 5, 10387313)).put("minecraft:endcity", new StructureFeatureConfiguration(20, 11, 10387313)).put("minecraft:mansion", new StructureFeatureConfiguration(80, 20, 10387319)).build(); // MagmaCube - decompile fix
 
     public WorldGenSettingsFix(Schema debug1) {
         super(debug1, true);
@@ -62,19 +60,19 @@ extends DataFix {
     }
 
     private static <T> Dynamic<T> noise(long debug0, DynamicLike<T> debug2, Dynamic<T> debug3, Dynamic<T> debug4) {
-        return debug2.createMap((Map)ImmutableMap.of((Object)debug2.createString("type"), (Object)debug2.createString("minecraft:noise"), (Object)debug2.createString("biome_source"), debug4, (Object)debug2.createString("seed"), (Object)debug2.createLong(debug0), (Object)debug2.createString("settings"), debug3));
+        return debug2.createMap((Map)ImmutableMap.of(debug2.createString("type"), debug2.createString("minecraft:noise"), debug2.createString("biome_source"), debug4, debug2.createString("seed"), debug2.createLong(debug0), debug2.createString("settings"), debug3)); // MagmaCube - decompile fix
     }
 
     private static <T> Dynamic<T> vanillaBiomeSource(Dynamic<T> debug0, long debug1, boolean debug3, boolean debug4) {
-        ImmutableMap.Builder debug5 = ImmutableMap.builder().put((Object)debug0.createString("type"), (Object)debug0.createString("minecraft:vanilla_layered")).put((Object)debug0.createString("seed"), (Object)debug0.createLong(debug1)).put((Object)debug0.createString("large_biomes"), (Object)debug0.createBoolean(debug4));
+        ImmutableMap.Builder debug5 = ImmutableMap.builder().put(debug0.createString("type"), debug0.createString("minecraft:vanilla_layered")).put(debug0.createString("seed"), debug0.createLong(debug1)).put(debug0.createString("large_biomes"), debug0.createBoolean(debug4)); // MagmaCube - decompile fix
         if (debug3) {
-            debug5.put((Object)debug0.createString("legacy_biome_init_layer"), (Object)debug0.createBoolean(debug3));
+            debug5.put(debug0.createString("legacy_biome_init_layer"), debug0.createBoolean(debug3)); // MagmaCube - decompile fix
         }
         return debug0.createMap((Map)debug5.build());
     }
 
     private static <T> Dynamic<T> fix(Dynamic<T> debug02) {
-        OptionalDynamic debug10;
+        OptionalDynamic map;
         Dynamic<T> debug4;
         DynamicOps debug1 = debug02.getOps();
         long debug2 = debug02.get("RandomSeed").asLong(0L);
@@ -93,13 +91,13 @@ extends DataFix {
         } else {
             switch ((String)debug5.get()) {
                 case "flat": {
-                    debug10 = debug02.get("generatorOptions");
-                    Map<Dynamic<T>, Dynamic<T>> debug11 = WorldGenSettingsFix.fixFlatStructures(debug1, debug10);
-                    debug4 = debug02.createMap((Map)ImmutableMap.of((Object)debug02.createString("type"), (Object)debug02.createString("minecraft:flat"), (Object)debug02.createString("settings"), (Object)debug02.createMap((Map)ImmutableMap.of((Object)debug02.createString("structures"), (Object)debug02.createMap(debug11), (Object)debug02.createString("layers"), (Object)debug10.get("layers").result().orElseGet(() -> debug02.createList(Stream.of(new Dynamic[]{debug02.createMap((Map)ImmutableMap.of((Object)debug02.createString("height"), (Object)debug02.createInt(1), (Object)debug02.createString("block"), (Object)debug02.createString("minecraft:bedrock"))), debug02.createMap((Map)ImmutableMap.of((Object)debug02.createString("height"), (Object)debug02.createInt(2), (Object)debug02.createString("block"), (Object)debug02.createString("minecraft:dirt"))), debug02.createMap((Map)ImmutableMap.of((Object)debug02.createString("height"), (Object)debug02.createInt(1), (Object)debug02.createString("block"), (Object)debug02.createString("minecraft:grass_block")))}))), (Object)debug02.createString("biome"), (Object)debug02.createString(debug10.get("biome").asString("minecraft:plains"))))));
+                    map = debug02.get("generatorOptions");
+                    Map<Dynamic<T>, Dynamic<T>> debug11 = WorldGenSettingsFix.fixFlatStructures(debug1, map);
+                    debug4 = debug02.createMap((Map)ImmutableMap.of(debug02.createString("type"), debug02.createString("minecraft:flat"), debug02.createString("settings"), debug02.createMap((Map)ImmutableMap.of(debug02.createString("structures"), debug02.createMap(debug11), debug02.createString("layers"), map.get("layers").result().orElseGet(() -> debug02.createList((Stream<? extends Dynamic<?>>) (Object) Stream.of(new Dynamic[]{debug02.createMap(ImmutableMap.of(debug02.createString("height"), debug02.createInt(1), debug02.createString("block"), debug02.createString("minecraft:bedrock"))), debug02.createMap(ImmutableMap.of(debug02.createString("height"), debug02.createInt(2), debug02.createString("block"), debug02.createString("minecraft:dirt"))), debug02.createMap((Map)ImmutableMap.of(debug02.createString("height"), debug02.createInt(1), debug02.createString("block"), debug02.createString("minecraft:grass_block")))}))), debug02.createString("biome"), debug02.createString(map.get("biome").asString("minecraft:plains")))))); // MagmaCube - decompile fix
                     break;
                 }
                 case "debug_all_block_states": {
-                    debug4 = debug02.createMap((Map)ImmutableMap.of((Object)debug02.createString("type"), (Object)debug02.createString("minecraft:debug")));
+                    debug4 = debug02.createMap((Map)ImmutableMap.of(debug02.createString("type"), debug02.createString("minecraft:debug"))); // MagmaCube - decompile fix
                     break;
                 }
                 case "buffet": {
@@ -114,7 +112,7 @@ extends DataFix {
                     } else {
                         debug15 = Objects.equals(debug14, Optional.of("minecraft:floating_islands")) ? debug02.createString("minecraft:floating_islands") : debug02.createString("minecraft:overworld");
                     }
-                    Dynamic debug16 = debug12.get("biome_source").result().orElseGet(() -> debug02.createMap((Map)ImmutableMap.of((Object)debug02.createString("type"), (Object)debug02.createString("minecraft:fixed"))));
+                    Dynamic<?> debug16 = (Dynamic) debug12.get("biome_source").result().orElseGet(() -> debug02.createMap(ImmutableMap.of(debug02.createString("type"), debug02.createString("minecraft:fixed")))); // MagmaCube - decompile fix
                     if (debug16.get("type").asString().result().equals(Optional.of("minecraft:fixed"))) {
                         String debug18 = debug16.get("options").get("biomes").asStream().findFirst().flatMap(debug0 -> debug0.asString().result()).orElse("minecraft:ocean");
                         debug17 = debug16.remove("options").set("biome", debug02.createString(debug18));
@@ -135,13 +133,15 @@ extends DataFix {
         }
         boolean debug8 = debug02.get("MapFeatures").asBoolean(true);
         boolean debug9 = debug02.get("BonusChest").asBoolean(false);
-        debug10 = ImmutableMap.builder();
-        debug10.put(debug1.createString("seed"), debug1.createLong(debug2));
-        debug10.put(debug1.createString("generate_features"), debug1.createBoolean(debug8));
-        debug10.put(debug1.createString("bonus_chest"), debug1.createBoolean(debug9));
-        debug10.put(debug1.createString("dimensions"), WorldGenSettingsFix.vanillaLevels(debug02, debug2, debug4, debug7));
-        debug6.ifPresent(arg_0 -> WorldGenSettingsFix.lambda$fix$6((ImmutableMap.Builder)debug10, debug1, arg_0));
-        return new Dynamic(debug1, debug1.createMap((Map)debug10.build()));
+        // MagmaCube start - decompile fix
+        ImmutableMap.Builder mapl = ImmutableMap.builder();
+        mapl.put(debug1.createString("seed"), debug1.createLong(debug2));
+        mapl.put(debug1.createString("generate_features"), debug1.createBoolean(debug8));
+        mapl.put(debug1.createString("bonus_chest"), debug1.createBoolean(debug9));
+        mapl.put(debug1.createString("dimensions"), WorldGenSettingsFix.vanillaLevels(debug02, debug2, debug4, debug7));
+        debug6.ifPresent(arg_0 -> WorldGenSettingsFix._lambda$fix$6((ImmutableMap.Builder)mapl, debug1, (String) arg_0));
+        return new Dynamic(debug1, debug1.createMap((Map)mapl.build()));
+        // MagmaCube end - decompile fix
     }
 
     protected static <T> Dynamic<T> defaultOverworld(Dynamic<T> debug0, long debug1) {
@@ -150,7 +150,7 @@ extends DataFix {
 
     protected static <T> T vanillaLevels(Dynamic<T> debug0, long debug1, Dynamic<T> debug3, boolean debug4) {
         DynamicOps debug5 = debug0.getOps();
-        return (T)debug5.createMap((Map)ImmutableMap.of((Object)debug5.createString("minecraft:overworld"), (Object)debug5.createMap((Map)ImmutableMap.of((Object)debug5.createString("type"), (Object)debug5.createString("minecraft:overworld" + (debug4 ? "_caves" : "")), (Object)debug5.createString("generator"), (Object)debug3.getValue())), (Object)debug5.createString("minecraft:the_nether"), (Object)debug5.createMap((Map)ImmutableMap.of((Object)debug5.createString("type"), (Object)debug5.createString("minecraft:the_nether"), (Object)debug5.createString("generator"), (Object)WorldGenSettingsFix.noise(debug1, debug0, debug0.createString("minecraft:nether"), debug0.createMap((Map)ImmutableMap.of((Object)debug0.createString("type"), (Object)debug0.createString("minecraft:multi_noise"), (Object)debug0.createString("seed"), (Object)debug0.createLong(debug1), (Object)debug0.createString("preset"), (Object)debug0.createString("minecraft:nether")))).getValue())), (Object)debug5.createString("minecraft:the_end"), (Object)debug5.createMap((Map)ImmutableMap.of((Object)debug5.createString("type"), (Object)debug5.createString("minecraft:the_end"), (Object)debug5.createString("generator"), (Object)WorldGenSettingsFix.noise(debug1, debug0, debug0.createString("minecraft:end"), debug0.createMap((Map)ImmutableMap.of((Object)debug0.createString("type"), (Object)debug0.createString("minecraft:the_end"), (Object)debug0.createString("seed"), (Object)debug0.createLong(debug1)))).getValue()))));
+        return (T)debug5.createMap((Map)ImmutableMap.of(debug5.createString("minecraft:overworld"), debug5.createMap((Map)ImmutableMap.of(debug5.createString("type"), debug5.createString("minecraft:overworld" + (debug4 ? "_caves" : "")), debug5.createString("generator"), debug3.getValue())), debug5.createString("minecraft:the_nether"), debug5.createMap((Map)ImmutableMap.of(debug5.createString("type"), debug5.createString("minecraft:the_nether"), debug5.createString("generator"), WorldGenSettingsFix.noise(debug1, debug0, debug0.createString("minecraft:nether"), debug0.createMap((Map)ImmutableMap.of(debug0.createString("type"), debug0.createString("minecraft:multi_noise"), debug0.createString("seed"), debug0.createLong(debug1), debug0.createString("preset"), debug0.createString("minecraft:nether")))).getValue())), debug5.createString("minecraft:the_end"), debug5.createMap((Map)ImmutableMap.of(debug5.createString("type"), debug5.createString("minecraft:the_end"), debug5.createString("generator"), WorldGenSettingsFix.noise(debug1, debug0, debug0.createString("minecraft:end"), debug0.createMap((Map)ImmutableMap.of(debug0.createString("type"), debug0.createString("minecraft:the_end"), debug0.createString("seed"), debug0.createLong(debug1)))).getValue()))));
     }
 
     private static <T> Map<Dynamic<T>, Dynamic<T>> fixFlatStructures(DynamicOps<T> debug0, OptionalDynamic<T> debug12) {
@@ -158,17 +158,17 @@ extends DataFix {
         MutableInt debug3 = new MutableInt(3);
         MutableInt debug4 = new MutableInt(128);
         MutableBoolean debug5 = new MutableBoolean(false);
-        HashMap debug6 = Maps.newHashMap();
+        HashMap<String, StructureFeatureConfiguration> debug6 = Maps.newHashMap(); // MagmaCube - decompile fix
         if (!debug12.result().isPresent()) {
             debug5.setTrue();
-            debug6.put("minecraft:village", DEFAULTS.get((Object)"minecraft:village"));
+            debug6.put("minecraft:village", DEFAULTS.get("minecraft:village"));
         }
-        debug12.get("structures").flatMap(Dynamic::getMapValues).result().ifPresent(debug52 -> debug52.forEach((debug5, debug6) -> debug6.getMapValues().result().ifPresent(debug62 -> debug62.forEach((debug6, debug7) -> {
-            String debug8 = debug5.asString("");
-            String debug9 = debug6.asString("");
+        debug12.get("structures").flatMap(Dynamic::getMapValues).result().ifPresent(debug52 -> debug52.forEach((debug5l, debug6l) -> debug6l.getMapValues().result().ifPresent(debug62 -> debug62.forEach((debug6ll, debug7) -> { // MagmaCube - decompile fix
+            String debug8 = debug5l.asString(""); // MagmaCube - decompile fix
+            String debug9 = debug6ll.asString("");
             String debug10 = debug7.asString("");
             if ("stronghold".equals(debug8)) {
-                debug5.setTrue();
+                debug5.setTrue(); // MagmaCube - decompile fix
                 switch (debug9) {
                     case "distance": {
                         debug2.setValue(WorldGenSettingsFix.getInt(debug10, debug2.getValue(), 1));
@@ -213,7 +213,7 @@ extends DataFix {
                 }
                 case "separation": {
                     if ("oceanmonument".equals(debug8)) {
-                        StructureFeatureConfiguration debug13 = (StructureFeatureConfiguration)debug6.getOrDefault("minecraft:monument", DEFAULTS.get((Object)"minecraft:monument"));
+                        StructureFeatureConfiguration debug13 = (StructureFeatureConfiguration)debug6.getOrDefault("minecraft:monument", DEFAULTS.get("minecraft:monument")); // MagmaCube - decompile fix
                         int debug14 = WorldGenSettingsFix.getInt(debug10, debug13.separation, 1);
                         debug6.put("minecraft:monument", new StructureFeatureConfiguration(debug14, debug13.separation, debug13.salt));
                     }
@@ -228,9 +228,9 @@ extends DataFix {
             }
         }))));
         ImmutableMap.Builder debug7 = ImmutableMap.builder();
-        debug7.put((Object)debug12.createString("structures"), (Object)debug12.createMap(debug6.entrySet().stream().collect(Collectors.toMap(debug1 -> debug12.createString((String)debug1.getKey()), debug1 -> ((StructureFeatureConfiguration)debug1.getValue()).serialize(debug0)))));
+        debug7.put(debug12.createString("structures"), debug12.createMap(debug6.entrySet().stream().collect(Collectors.toMap(debug1 -> debug12.createString((String)debug1.getKey()), debug1 -> ((StructureFeatureConfiguration)debug1.getValue()).serialize(debug0)))));
         if (debug5.isTrue()) {
-            debug7.put((Object)debug12.createString("stronghold"), (Object)debug12.createMap((Map)ImmutableMap.of((Object)debug12.createString("distance"), (Object)debug12.createInt(debug2.getValue().intValue()), (Object)debug12.createString("spread"), (Object)debug12.createInt(debug3.getValue().intValue()), (Object)debug12.createString("count"), (Object)debug12.createInt(debug4.getValue().intValue()))));
+            debug7.put(debug12.createString("stronghold"), debug12.createMap((Map)ImmutableMap.of(debug12.createString("distance"), debug12.createInt(debug2.getValue().intValue()), debug12.createString("spread"), debug12.createInt(debug3.getValue().intValue()), debug12.createString("count"), debug12.createInt(debug4.getValue().intValue()))));
         }
         return debug7.build();
     }
@@ -244,17 +244,17 @@ extends DataFix {
     }
 
     private static void setSpacing(Map<String, StructureFeatureConfiguration> debug0, String debug1, String debug2, int debug3) {
-        StructureFeatureConfiguration debug4 = debug0.getOrDefault(debug1, (StructureFeatureConfiguration)DEFAULTS.get((Object)debug1));
+        StructureFeatureConfiguration debug4 = debug0.getOrDefault(debug1, (StructureFeatureConfiguration)DEFAULTS.get(debug1)); // MagmaCube - decompile fix
         int debug5 = WorldGenSettingsFix.getInt(debug2, debug4.spacing, debug3);
         debug0.put(debug1, new StructureFeatureConfiguration(debug5, debug4.separation, debug4.salt));
     }
 
-    private static /* synthetic */ void lambda$fix$6(ImmutableMap.Builder debug0, DynamicOps debug1, String debug2) {
+    private static /* synthetic */ void _lambda$fix$6(ImmutableMap.Builder debug0, DynamicOps debug1, String debug2) { // MagmaCube - decompile fix
         debug0.put(debug1.createString("legacy_custom_options"), debug1.createString(debug2));
     }
 
     static final class StructureFeatureConfiguration {
-        public static final Codec<StructureFeatureConfiguration> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)Codec.INT.fieldOf("spacing").forGetter(debug0 -> debug0.spacing), (App)Codec.INT.fieldOf("separation").forGetter(debug0 -> debug0.separation), (App)Codec.INT.fieldOf("salt").forGetter(debug0 -> debug0.salt)).apply((Applicative)debug02, StructureFeatureConfiguration::new));
+        public static final Codec<StructureFeatureConfiguration> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Codec.INT.fieldOf("spacing").forGetter(debug0 -> debug0.spacing), Codec.INT.fieldOf("separation").forGetter(debug0 -> debug0.separation), Codec.INT.fieldOf("salt").forGetter(debug0 -> debug0.salt)).apply(debug02, StructureFeatureConfiguration::new)); // MagmaCube - decompile fix
         private final int spacing;
         private final int separation;
         private final int salt;
@@ -266,7 +266,7 @@ extends DataFix {
         }
 
         public <T> Dynamic<T> serialize(DynamicOps<T> debug1) {
-            return new Dynamic(debug1, CODEC.encodeStart(debug1, (Object)this).result().orElse(debug1.emptyMap()));
+            return new Dynamic(debug1, CODEC.encodeStart(debug1, this).result().orElse(debug1.emptyMap()));
         }
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/NamespacedSchema.java b/src/main/java/net/minecraft/util/datafix/schemas/NamespacedSchema.java
index 6ac3a4f3fd34d87d5fea41628a06b9c329741d96..279129a84a2884c6355c80a5b191b6e87efa9096 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/NamespacedSchema.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/NamespacedSchema.java
@@ -37,9 +37,9 @@ public class NamespacedSchema extends Schema
     }
     
     static {
-        NAMESPACED_STRING_CODEC = (PrimitiveCodec)new PrimitiveCodec<String>() {
+        NAMESPACED_STRING_CODEC = new PrimitiveCodec<String>() { // MagmaCube - decompile fix
             public <T> DataResult<String> read(final DynamicOps<T> debug1, final T debug2) {
-                return (DataResult<String>)debug1.getStringValue((Object)debug2).map((Function)NamespacedSchema::ensureNamespaced);
+                return (DataResult<String>)debug1.getStringValue(debug2).map(NamespacedSchema::ensureNamespaced); // MagmaCube - decompile fix
             }
             
             public <T> T write(final DynamicOps<T> debug1, final String debug2) {
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V1451_2.java b/src/main/java/net/minecraft/util/datafix/schemas/V1451_2.java
index 5b54e6628e2db6038d0b7c2b6399658b5f188801..d8a1abba6791ea0eac4507080439c86777142c85 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V1451_2.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V1451_2.java
@@ -15,7 +15,7 @@ public class V1451_2 extends NamespacedSchema
     
     public Map<String, Supplier<TypeTemplate>> registerBlockEntities(final Schema debug1) {
         final Map<String, Supplier<TypeTemplate>> debug2 = (Map<String, Supplier<TypeTemplate>>)super.registerBlockEntities(debug1);
-        debug1.register((Map)debug2, "minecraft:piston", debug1 -> DSL.optionalFields("blockState", References.BLOCK_STATE.in(debug1)));
+        debug1.register((Map)debug2, "minecraft:piston", debug1l -> DSL.optionalFields("blockState", References.BLOCK_STATE.in(debug1))); // MagmaCube - decompile fix
         return debug2;
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V1451_3.java b/src/main/java/net/minecraft/util/datafix/schemas/V1451_3.java
index 3c70311555a65bd9ea452429bee8c3eb7d49c3eb..c4039f7dacba19334af4951e1b5ec2c96d3a3d3a 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V1451_3.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V1451_3.java
@@ -18,7 +18,7 @@ public class V1451_3 extends NamespacedSchema
         debug1.registerSimple((Map)debug2, "minecraft:egg");
         debug1.registerSimple((Map)debug2, "minecraft:ender_pearl");
         debug1.registerSimple((Map)debug2, "minecraft:fireball");
-        debug1.register((Map)debug2, "minecraft:potion", debug1 -> DSL.optionalFields("Potion", References.ITEM_STACK.in(debug1)));
+        debug1.register((Map)debug2, "minecraft:potion", debug1l -> DSL.optionalFields("Potion", References.ITEM_STACK.in(debug1))); // MagmaCube - decompile fix
         debug1.registerSimple((Map)debug2, "minecraft:small_fireball");
         debug1.registerSimple((Map)debug2, "minecraft:snowball");
         debug1.registerSimple((Map)debug2, "minecraft:wither_skull");
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V1800.java b/src/main/java/net/minecraft/util/datafix/schemas/V1800.java
index 1915c9e5c14cf7626711155e8b7595bff5c162fa..14240738cb11411a03b316d2a42ba2895c04408e 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V1800.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V1800.java
@@ -20,7 +20,7 @@ public class V1800 extends NamespacedSchema
     public Map<String, Supplier<TypeTemplate>> registerEntities(final Schema debug1) {
         final Map<String, Supplier<TypeTemplate>> debug2 = (Map<String, Supplier<TypeTemplate>>)super.registerEntities(debug1);
         registerMob(debug1, debug2, "minecraft:panda");
-        debug1.register((Map)debug2, "minecraft:pillager", debug1 -> DSL.optionalFields("Inventory", DSL.list(References.ITEM_STACK.in(debug1)), V100.equipment(debug1)));
+        debug1.register((Map)debug2, "minecraft:pillager", debug1l -> DSL.optionalFields("Inventory", DSL.list(References.ITEM_STACK.in(debug1)), V100.equipment(debug1))); // MagmaCube - decompile fix
         return debug2;
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V1929.java b/src/main/java/net/minecraft/util/datafix/schemas/V1929.java
index 0c43fd7fb3b7fc742ae2d840de779e1435a165b5..e78f728901384e6b24af0275b0f7360494020900 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V1929.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V1929.java
@@ -15,8 +15,8 @@ public class V1929 extends NamespacedSchema
     
     public Map<String, Supplier<TypeTemplate>> registerEntities(final Schema debug1) {
         final Map<String, Supplier<TypeTemplate>> debug2 = (Map<String, Supplier<TypeTemplate>>)super.registerEntities(debug1);
-        debug1.register((Map)debug2, "minecraft:wandering_trader", debug1 -> DSL.optionalFields("Inventory", DSL.list(References.ITEM_STACK.in(debug1)), "Offers", DSL.optionalFields("Recipes", DSL.list(DSL.optionalFields("buy", References.ITEM_STACK.in(debug1), "buyB", References.ITEM_STACK.in(debug1), "sell", References.ITEM_STACK.in(debug1)))), V100.equipment(debug1)));
-        debug1.register((Map)debug2, "minecraft:trader_llama", debug1 -> DSL.optionalFields("Items", DSL.list(References.ITEM_STACK.in(debug1)), "SaddleItem", References.ITEM_STACK.in(debug1), "DecorItem", References.ITEM_STACK.in(debug1), V100.equipment(debug1)));
+        debug1.register((Map)debug2, "minecraft:wandering_trader", debug1l -> DSL.optionalFields("Inventory", DSL.list(References.ITEM_STACK.in(debug1)), "Offers", DSL.optionalFields("Recipes", DSL.list(DSL.optionalFields("buy", References.ITEM_STACK.in(debug1), "buyB", References.ITEM_STACK.in(debug1), "sell", References.ITEM_STACK.in(debug1)))), V100.equipment(debug1))); // MagmaCube - decompile fix
+        debug1.register((Map)debug2, "minecraft:trader_llama", debug1l -> DSL.optionalFields("Items", DSL.list(References.ITEM_STACK.in(debug1)), "SaddleItem", References.ITEM_STACK.in(debug1), "DecorItem", References.ITEM_STACK.in(debug1), V100.equipment(debug1))); // MagmaCube - decompile fix
         return debug2;
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V705.java b/src/main/java/net/minecraft/util/datafix/schemas/V705.java
index f4ea297b33642002d3db0ab70d1fbb77a54bab16..30ccb8ba5944829783f081dfbf3e91395f7bb714 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V705.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V705.java
@@ -29,71 +29,71 @@ public class V705 extends NamespacedSchema
     }
     
     public Map<String, Supplier<TypeTemplate>> registerEntities(final Schema debug1) {
-        final Map<String, Supplier<TypeTemplate>> debug2 = (Map<String, Supplier<TypeTemplate>>)Maps.newHashMap();
+        final Map<String, Supplier<TypeTemplate>> debug2 = Maps.newHashMap(); // MagmaCube - decompile fix
         debug1.registerSimple((Map)debug2, "minecraft:area_effect_cloud");
         registerMob(debug1, debug2, "minecraft:armor_stand");
-        debug1.register((Map)debug2, "minecraft:arrow", debug1 -> DSL.optionalFields("inTile", References.BLOCK_NAME.in(debug1)));
+        debug1.register((Map)debug2, "minecraft:arrow", debug1l -> DSL.optionalFields("inTile", References.BLOCK_NAME.in(debug1))); // MagmaCube - decompile fix
         registerMob(debug1, debug2, "minecraft:bat");
         registerMob(debug1, debug2, "minecraft:blaze");
         debug1.registerSimple((Map)debug2, "minecraft:boat");
         registerMob(debug1, debug2, "minecraft:cave_spider");
-        debug1.register((Map)debug2, "minecraft:chest_minecart", debug1 -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1), "Items", DSL.list(References.ITEM_STACK.in(debug1))));
+        debug1.register((Map)debug2, "minecraft:chest_minecart", debug1l -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1), "Items", DSL.list(References.ITEM_STACK.in(debug1)))); // MagmaCube - decompile fix
         registerMob(debug1, debug2, "minecraft:chicken");
-        debug1.register((Map)debug2, "minecraft:commandblock_minecart", debug1 -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1)));
+        debug1.register((Map)debug2, "minecraft:commandblock_minecart", debug1l -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1))); // MagmaCube - decompile fix
         registerMob(debug1, debug2, "minecraft:cow");
         registerMob(debug1, debug2, "minecraft:creeper");
-        debug1.register((Map)debug2, "minecraft:donkey", debug1 -> DSL.optionalFields("Items", DSL.list(References.ITEM_STACK.in(debug1)), "SaddleItem", References.ITEM_STACK.in(debug1), V100.equipment(debug1)));
+        debug1.register((Map)debug2, "minecraft:donkey", debug1l -> DSL.optionalFields("Items", DSL.list(References.ITEM_STACK.in(debug1)), "SaddleItem", References.ITEM_STACK.in(debug1), V100.equipment(debug1))); // MagmaCube - decompile fix
         debug1.registerSimple((Map)debug2, "minecraft:dragon_fireball");
         registerThrowableProjectile(debug1, debug2, "minecraft:egg");
         registerMob(debug1, debug2, "minecraft:elder_guardian");
         debug1.registerSimple((Map)debug2, "minecraft:ender_crystal");
         registerMob(debug1, debug2, "minecraft:ender_dragon");
-        debug1.register((Map)debug2, "minecraft:enderman", debug1 -> DSL.optionalFields("carried", References.BLOCK_NAME.in(debug1), V100.equipment(debug1)));
+        debug1.register((Map)debug2, "minecraft:enderman", debug1l -> DSL.optionalFields("carried", References.BLOCK_NAME.in(debug1), V100.equipment(debug1))); // MagmaCube - decompile fix
         registerMob(debug1, debug2, "minecraft:endermite");
         registerThrowableProjectile(debug1, debug2, "minecraft:ender_pearl");
         debug1.registerSimple((Map)debug2, "minecraft:eye_of_ender_signal");
-        debug1.register((Map)debug2, "minecraft:falling_block", debug1 -> DSL.optionalFields("Block", References.BLOCK_NAME.in(debug1), "TileEntityData", References.BLOCK_ENTITY.in(debug1)));
+        debug1.register((Map)debug2, "minecraft:falling_block", debug1l -> DSL.optionalFields("Block", References.BLOCK_NAME.in(debug1), "TileEntityData", References.BLOCK_ENTITY.in(debug1))); // MagmaCube - decompile fix
         registerThrowableProjectile(debug1, debug2, "minecraft:fireball");
-        debug1.register((Map)debug2, "minecraft:fireworks_rocket", debug1 -> DSL.optionalFields("FireworksItem", References.ITEM_STACK.in(debug1)));
-        debug1.register((Map)debug2, "minecraft:furnace_minecart", debug1 -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1)));
+        debug1.register((Map)debug2, "minecraft:fireworks_rocket", debug1l -> DSL.optionalFields("FireworksItem", References.ITEM_STACK.in(debug1))); // MagmaCube - decompile fix
+        debug1.register((Map)debug2, "minecraft:furnace_minecart", debug1l -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1))); // MagmaCube - decompile fix
         registerMob(debug1, debug2, "minecraft:ghast");
         registerMob(debug1, debug2, "minecraft:giant");
         registerMob(debug1, debug2, "minecraft:guardian");
-        debug1.register((Map)debug2, "minecraft:hopper_minecart", debug1 -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1), "Items", DSL.list(References.ITEM_STACK.in(debug1))));
-        debug1.register((Map)debug2, "minecraft:horse", debug1 -> DSL.optionalFields("ArmorItem", References.ITEM_STACK.in(debug1), "SaddleItem", References.ITEM_STACK.in(debug1), V100.equipment(debug1)));
+        debug1.register((Map)debug2, "minecraft:hopper_minecart", debug1l -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1), "Items", DSL.list(References.ITEM_STACK.in(debug1)))); // MagmaCube - decompile fix
+        debug1.register((Map)debug2, "minecraft:horse", debug1l -> DSL.optionalFields("ArmorItem", References.ITEM_STACK.in(debug1), "SaddleItem", References.ITEM_STACK.in(debug1), V100.equipment(debug1))); // MagmaCube - decompile fix
         registerMob(debug1, debug2, "minecraft:husk");
-        debug1.register((Map)debug2, "minecraft:item", debug1 -> DSL.optionalFields("Item", References.ITEM_STACK.in(debug1)));
-        debug1.register((Map)debug2, "minecraft:item_frame", debug1 -> DSL.optionalFields("Item", References.ITEM_STACK.in(debug1)));
+        debug1.register((Map)debug2, "minecraft:item", debug1l -> DSL.optionalFields("Item", References.ITEM_STACK.in(debug1))); // MagmaCube - decompile fix
+        debug1.register((Map)debug2, "minecraft:item_frame", debug1l -> DSL.optionalFields("Item", References.ITEM_STACK.in(debug1))); // MagmaCube - decompile fix
         debug1.registerSimple((Map)debug2, "minecraft:leash_knot");
         registerMob(debug1, debug2, "minecraft:magma_cube");
-        debug1.register((Map)debug2, "minecraft:minecart", debug1 -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1)));
+        debug1.register((Map)debug2, "minecraft:minecart", debug1l -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1))); // MagmaCube - decompile fix
         registerMob(debug1, debug2, "minecraft:mooshroom");
-        debug1.register((Map)debug2, "minecraft:mule", debug1 -> DSL.optionalFields("Items", DSL.list(References.ITEM_STACK.in(debug1)), "SaddleItem", References.ITEM_STACK.in(debug1), V100.equipment(debug1)));
+        debug1.register((Map)debug2, "minecraft:mule", debug1l -> DSL.optionalFields("Items", DSL.list(References.ITEM_STACK.in(debug1)), "SaddleItem", References.ITEM_STACK.in(debug1), V100.equipment(debug1))); // MagmaCube - decompile fix
         registerMob(debug1, debug2, "minecraft:ocelot");
         debug1.registerSimple((Map)debug2, "minecraft:painting");
         debug1.registerSimple((Map)debug2, "minecraft:parrot");
         registerMob(debug1, debug2, "minecraft:pig");
         registerMob(debug1, debug2, "minecraft:polar_bear");
-        debug1.register((Map)debug2, "minecraft:potion", debug1 -> DSL.optionalFields("Potion", References.ITEM_STACK.in(debug1), "inTile", References.BLOCK_NAME.in(debug1)));
+        debug1.register((Map)debug2, "minecraft:potion", debug1l -> DSL.optionalFields("Potion", References.ITEM_STACK.in(debug1), "inTile", References.BLOCK_NAME.in(debug1))); // MagmaCube - decompile fix
         registerMob(debug1, debug2, "minecraft:rabbit");
         registerMob(debug1, debug2, "minecraft:sheep");
         registerMob(debug1, debug2, "minecraft:shulker");
         debug1.registerSimple((Map)debug2, "minecraft:shulker_bullet");
         registerMob(debug1, debug2, "minecraft:silverfish");
         registerMob(debug1, debug2, "minecraft:skeleton");
-        debug1.register((Map)debug2, "minecraft:skeleton_horse", debug1 -> DSL.optionalFields("SaddleItem", References.ITEM_STACK.in(debug1), V100.equipment(debug1)));
+        debug1.register((Map)debug2, "minecraft:skeleton_horse", debug1l -> DSL.optionalFields("SaddleItem", References.ITEM_STACK.in(debug1), V100.equipment(debug1))); // MagmaCube - decompile fix
         registerMob(debug1, debug2, "minecraft:slime");
         registerThrowableProjectile(debug1, debug2, "minecraft:small_fireball");
         registerThrowableProjectile(debug1, debug2, "minecraft:snowball");
         registerMob(debug1, debug2, "minecraft:snowman");
-        debug1.register((Map)debug2, "minecraft:spawner_minecart", debug1 -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1), References.UNTAGGED_SPAWNER.in(debug1)));
-        debug1.register((Map)debug2, "minecraft:spectral_arrow", debug1 -> DSL.optionalFields("inTile", References.BLOCK_NAME.in(debug1)));
+        debug1.register((Map)debug2, "minecraft:spawner_minecart", debug1l -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1), References.UNTAGGED_SPAWNER.in(debug1))); // MagmaCube - decompile fix
+        debug1.register((Map)debug2, "minecraft:spectral_arrow", debug1l -> DSL.optionalFields("inTile", References.BLOCK_NAME.in(debug1))); // MagmaCube - decompile fix
         registerMob(debug1, debug2, "minecraft:spider");
         registerMob(debug1, debug2, "minecraft:squid");
         registerMob(debug1, debug2, "minecraft:stray");
         debug1.registerSimple((Map)debug2, "minecraft:tnt");
-        debug1.register((Map)debug2, "minecraft:tnt_minecart", debug1 -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1)));
-        debug1.register((Map)debug2, "minecraft:villager", debug1 -> DSL.optionalFields("Inventory", DSL.list(References.ITEM_STACK.in(debug1)), "Offers", DSL.optionalFields("Recipes", DSL.list(DSL.optionalFields("buy", References.ITEM_STACK.in(debug1), "buyB", References.ITEM_STACK.in(debug1), "sell", References.ITEM_STACK.in(debug1)))), V100.equipment(debug1)));
+        debug1.register((Map)debug2, "minecraft:tnt_minecart", debug1l -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1))); // MagmaCube - decompile fix
+        debug1.register((Map)debug2, "minecraft:villager", debug1l -> DSL.optionalFields("Inventory", DSL.list(References.ITEM_STACK.in(debug1)), "Offers", DSL.optionalFields("Recipes", DSL.list(DSL.optionalFields("buy", References.ITEM_STACK.in(debug1), "buyB", References.ITEM_STACK.in(debug1), "sell", References.ITEM_STACK.in(debug1)))), V100.equipment(debug1))); // MagmaCube - decompile fix
         registerMob(debug1, debug2, "minecraft:villager_golem");
         registerMob(debug1, debug2, "minecraft:witch");
         registerMob(debug1, debug2, "minecraft:wither");
@@ -103,13 +103,13 @@ public class V705 extends NamespacedSchema
         registerThrowableProjectile(debug1, debug2, "minecraft:xp_bottle");
         debug1.registerSimple((Map)debug2, "minecraft:xp_orb");
         registerMob(debug1, debug2, "minecraft:zombie");
-        debug1.register((Map)debug2, "minecraft:zombie_horse", debug1 -> DSL.optionalFields("SaddleItem", References.ITEM_STACK.in(debug1), V100.equipment(debug1)));
+        debug1.register((Map)debug2, "minecraft:zombie_horse", debug1l -> DSL.optionalFields("SaddleItem", References.ITEM_STACK.in(debug1), V100.equipment(debug1))); // MagmaCube - decompile fix
         registerMob(debug1, debug2, "minecraft:zombie_pigman");
         registerMob(debug1, debug2, "minecraft:zombie_villager");
         debug1.registerSimple((Map)debug2, "minecraft:evocation_fangs");
         registerMob(debug1, debug2, "minecraft:evocation_illager");
         debug1.registerSimple((Map)debug2, "minecraft:illusion_illager");
-        debug1.register((Map)debug2, "minecraft:llama", debug1 -> DSL.optionalFields("Items", DSL.list(References.ITEM_STACK.in(debug1)), "SaddleItem", References.ITEM_STACK.in(debug1), "DecorItem", References.ITEM_STACK.in(debug1), V100.equipment(debug1)));
+        debug1.register((Map)debug2, "minecraft:llama", debug1l -> DSL.optionalFields("Items", DSL.list(References.ITEM_STACK.in(debug1)), "SaddleItem", References.ITEM_STACK.in(debug1), "DecorItem", References.ITEM_STACK.in(debug1), V100.equipment(debug1))); // MagmaCube - decompile fix
         debug1.registerSimple((Map)debug2, "minecraft:llama_spit");
         registerMob(debug1, debug2, "minecraft:vex");
         registerMob(debug1, debug2, "minecraft:vindication_illager");
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V99.java b/src/main/java/net/minecraft/util/datafix/schemas/V99.java
index 1053aaa7497410d5c4994ade2f2c39a1435bffc2..29c97961931e3a2b26376f3e3a582b8a0591e281 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V99.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V99.java
@@ -48,35 +48,35 @@ public class V99 extends Schema
     }
     
     public Map<String, Supplier<TypeTemplate>> registerEntities(final Schema debug1) {
-        final Map<String, Supplier<TypeTemplate>> debug2 = (Map<String, Supplier<TypeTemplate>>)Maps.newHashMap();
-        debug1.register((Map)debug2, "Item", debug1 -> DSL.optionalFields("Item", References.ITEM_STACK.in(debug1)));
+        final Map<String, Supplier<TypeTemplate>> debug2 = Maps.newHashMap(); // MagmaCube - decompile fix
+        debug1.register((Map)debug2, "Item", debug1l -> DSL.optionalFields("Item", References.ITEM_STACK.in(debug1))); // MagmaCube - decompile fix
         debug1.registerSimple((Map)debug2, "XPOrb");
         registerThrowableProjectile(debug1, debug2, "ThrownEgg");
         debug1.registerSimple((Map)debug2, "LeashKnot");
         debug1.registerSimple((Map)debug2, "Painting");
-        debug1.register((Map)debug2, "Arrow", debug1 -> DSL.optionalFields("inTile", References.BLOCK_NAME.in(debug1)));
-        debug1.register((Map)debug2, "TippedArrow", debug1 -> DSL.optionalFields("inTile", References.BLOCK_NAME.in(debug1)));
-        debug1.register((Map)debug2, "SpectralArrow", debug1 -> DSL.optionalFields("inTile", References.BLOCK_NAME.in(debug1)));
+        debug1.register((Map)debug2, "Arrow", debug1l -> DSL.optionalFields("inTile", References.BLOCK_NAME.in(debug1))); // MagmaCube - decompile fix
+        debug1.register((Map)debug2, "TippedArrow", debug1l -> DSL.optionalFields("inTile", References.BLOCK_NAME.in(debug1))); // MagmaCube - decompile fix
+        debug1.register((Map)debug2, "SpectralArrow", debug1l -> DSL.optionalFields("inTile", References.BLOCK_NAME.in(debug1))); // MagmaCube - decompile fix
         registerThrowableProjectile(debug1, debug2, "Snowball");
         registerThrowableProjectile(debug1, debug2, "Fireball");
         registerThrowableProjectile(debug1, debug2, "SmallFireball");
         registerThrowableProjectile(debug1, debug2, "ThrownEnderpearl");
         debug1.registerSimple((Map)debug2, "EyeOfEnderSignal");
-        debug1.register((Map)debug2, "ThrownPotion", debug1 -> DSL.optionalFields("inTile", References.BLOCK_NAME.in(debug1), "Potion", References.ITEM_STACK.in(debug1)));
+        debug1.register((Map)debug2, "ThrownPotion", debug1l -> DSL.optionalFields("inTile", References.BLOCK_NAME.in(debug1), "Potion", References.ITEM_STACK.in(debug1))); // MagmaCube - decompile fix
         registerThrowableProjectile(debug1, debug2, "ThrownExpBottle");
-        debug1.register((Map)debug2, "ItemFrame", debug1 -> DSL.optionalFields("Item", References.ITEM_STACK.in(debug1)));
+        debug1.register((Map)debug2, "ItemFrame", debug1l -> DSL.optionalFields("Item", References.ITEM_STACK.in(debug1))); // MagmaCube - decompile fix
         registerThrowableProjectile(debug1, debug2, "WitherSkull");
         debug1.registerSimple((Map)debug2, "PrimedTnt");
-        debug1.register((Map)debug2, "FallingSand", debug1 -> DSL.optionalFields("Block", References.BLOCK_NAME.in(debug1), "TileEntityData", References.BLOCK_ENTITY.in(debug1)));
-        debug1.register((Map)debug2, "FireworksRocketEntity", debug1 -> DSL.optionalFields("FireworksItem", References.ITEM_STACK.in(debug1)));
+        debug1.register((Map)debug2, "FallingSand", debug1l -> DSL.optionalFields("Block", References.BLOCK_NAME.in(debug1), "TileEntityData", References.BLOCK_ENTITY.in(debug1))); // MagmaCube - decompile fix
+        debug1.register((Map)debug2, "FireworksRocketEntity", debug1l -> DSL.optionalFields("FireworksItem", References.ITEM_STACK.in(debug1))); // MagmaCube - decompile fix
         debug1.registerSimple((Map)debug2, "Boat");
         debug1.register((Map)debug2, "Minecart", () -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1), "Items", DSL.list(References.ITEM_STACK.in(debug1))));
         registerMinecart(debug1, debug2, "MinecartRideable");
-        debug1.register((Map)debug2, "MinecartChest", debug1 -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1), "Items", DSL.list(References.ITEM_STACK.in(debug1))));
+        debug1.register((Map)debug2, "MinecartChest", debug1l -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1), "Items", DSL.list(References.ITEM_STACK.in(debug1)))); // MagmaCube - decompile fix
         registerMinecart(debug1, debug2, "MinecartFurnace");
         registerMinecart(debug1, debug2, "MinecartTNT");
         debug1.register((Map)debug2, "MinecartSpawner", () -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1), References.UNTAGGED_SPAWNER.in(debug1)));
-        debug1.register((Map)debug2, "MinecartHopper", debug1 -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1), "Items", DSL.list(References.ITEM_STACK.in(debug1))));
+        debug1.register((Map)debug2, "MinecartHopper", debug1l -> DSL.optionalFields("DisplayTile", References.BLOCK_NAME.in(debug1), "Items", DSL.list(References.ITEM_STACK.in(debug1)))); // MagmaCube - decompile fix
         registerMinecart(debug1, debug2, "MinecartCommandBlock");
         registerMob(debug1, debug2, "ArmorStand");
         registerMob(debug1, debug2, "Creeper");
@@ -87,7 +87,7 @@ public class V99 extends Schema
         registerMob(debug1, debug2, "Slime");
         registerMob(debug1, debug2, "Ghast");
         registerMob(debug1, debug2, "PigZombie");
-        debug1.register((Map)debug2, "Enderman", debug1 -> DSL.optionalFields("carried", References.BLOCK_NAME.in(debug1), equipment(debug1)));
+        debug1.register((Map)debug2, "Enderman", debug1l -> DSL.optionalFields("carried", References.BLOCK_NAME.in(debug1), equipment(debug1))); // MagmaCube - decompile fix
         registerMob(debug1, debug2, "CaveSpider");
         registerMob(debug1, debug2, "Silverfish");
         registerMob(debug1, debug2, "Blaze");
@@ -108,9 +108,9 @@ public class V99 extends Schema
         registerMob(debug1, debug2, "SnowMan");
         registerMob(debug1, debug2, "Ozelot");
         registerMob(debug1, debug2, "VillagerGolem");
-        debug1.register((Map)debug2, "EntityHorse", debug1 -> DSL.optionalFields("Items", DSL.list(References.ITEM_STACK.in(debug1)), "ArmorItem", References.ITEM_STACK.in(debug1), "SaddleItem", References.ITEM_STACK.in(debug1), equipment(debug1)));
+        debug1.register((Map)debug2, "EntityHorse", debug1l -> DSL.optionalFields("Items", DSL.list(References.ITEM_STACK.in(debug1)), "ArmorItem", References.ITEM_STACK.in(debug1), "SaddleItem", References.ITEM_STACK.in(debug1), equipment(debug1))); // MagmaCube - decompile fix
         registerMob(debug1, debug2, "Rabbit");
-        debug1.register((Map)debug2, "Villager", debug1 -> DSL.optionalFields("Inventory", DSL.list(References.ITEM_STACK.in(debug1)), "Offers", DSL.optionalFields("Recipes", DSL.list(DSL.optionalFields("buy", References.ITEM_STACK.in(debug1), "buyB", References.ITEM_STACK.in(debug1), "sell", References.ITEM_STACK.in(debug1)))), equipment(debug1)));
+        debug1.register((Map)debug2, "Villager", debug1l -> DSL.optionalFields("Inventory", DSL.list(References.ITEM_STACK.in(debug1)), "Offers", DSL.optionalFields("Recipes", DSL.list(DSL.optionalFields("buy", References.ITEM_STACK.in(debug1), "buyB", References.ITEM_STACK.in(debug1), "sell", References.ITEM_STACK.in(debug1)))), equipment(debug1))); // MagmaCube - decompile fix
         debug1.registerSimple((Map)debug2, "EnderCrystal");
         debug1.registerSimple((Map)debug2, "AreaEffectCloud");
         debug1.registerSimple((Map)debug2, "ShulkerBullet");
@@ -119,15 +119,15 @@ public class V99 extends Schema
     }
     
     public Map<String, Supplier<TypeTemplate>> registerBlockEntities(final Schema debug1) {
-        final Map<String, Supplier<TypeTemplate>> debug2 = (Map<String, Supplier<TypeTemplate>>)Maps.newHashMap();
+        final Map<String, Supplier<TypeTemplate>> debug2 = Maps.newHashMap(); // MagmaCube - decompile fix
         registerInventory(debug1, debug2, "Furnace");
         registerInventory(debug1, debug2, "Chest");
         debug1.registerSimple((Map)debug2, "EnderChest");
-        debug1.register((Map)debug2, "RecordPlayer", debug1 -> DSL.optionalFields("RecordItem", References.ITEM_STACK.in(debug1)));
+        debug1.register((Map)debug2, "RecordPlayer", debug1l -> DSL.optionalFields("RecordItem", References.ITEM_STACK.in(debug1))); // MagmaCube - decompile fix
         registerInventory(debug1, debug2, "Trap");
         registerInventory(debug1, debug2, "Dropper");
         debug1.registerSimple((Map)debug2, "Sign");
-        debug1.register((Map)debug2, "MobSpawner", debug1 -> References.UNTAGGED_SPAWNER.in(debug1));
+        debug1.register((Map)debug2, "MobSpawner", debug1l -> References.UNTAGGED_SPAWNER.in(debug1)); // MagmaCube - decompile fix
         debug1.registerSimple((Map)debug2, "Music");
         debug1.registerSimple((Map)debug2, "Piston");
         registerInventory(debug1, debug2, "Cauldron");
@@ -139,7 +139,7 @@ public class V99 extends Schema
         debug1.registerSimple((Map)debug2, "DLDetector");
         registerInventory(debug1, debug2, "Hopper");
         debug1.registerSimple((Map)debug2, "Comparator");
-        debug1.register((Map)debug2, "FlowerPot", debug1 -> DSL.optionalFields("Item", DSL.or(DSL.constType(DSL.intType()), References.ITEM_NAME.in(debug1))));
+        debug1.register((Map)debug2, "FlowerPot", debug1l -> DSL.optionalFields("Item", DSL.or(DSL.constType(DSL.intType()), References.ITEM_NAME.in(debug1)))); // MagmaCube - decompile fix
         debug1.registerSimple((Map)debug2, "Banner");
         debug1.registerSimple((Map)debug2, "Structure");
         debug1.registerSimple((Map)debug2, "EndGateway");
@@ -169,33 +169,30 @@ public class V99 extends Schema
     }
     
     protected static <T> T addNames(final Dynamic<T> debug0, final Map<String, String> debug1, final String debug2) {
-        final String debug4;
-        final String debug5;
-        final String debug6;
-        return (T)debug0.update("tag", debug3 -> debug3.update("BlockEntityTag", debug2 -> {
-            debug4 = debug0.get("id").asString("");
-            debug5 = debug1.get(NamespacedSchema.ensureNamespaced(debug4));
+        return (T)debug0.update("tag", debug3 -> debug3.update("BlockEntityTag", debug2l -> { // MagmaCube - decompile fix
+            String debug4 = debug0.get("id").asString(""); // MagmaCube - decompile fix
+            String debug5 = debug1.get(NamespacedSchema.ensureNamespaced(debug4)); // MagmaCube - decompile fix
             if (debug5 == null) {
                 V99.LOGGER.warn("Unable to resolve BlockEntity for ItemStack: {}", (Object)debug4);
-                return debug2;
+                return debug2l; // MagmaCube - decompile fix
             }
             else {
-                return debug2.set("id", debug0.createString(debug5));
+                return debug2l.set("id", debug0.createString(debug5)); // MagmaCube - decompile fix
             }
-        }).update("EntityTag", debug2 -> {
-            debug6 = debug0.get("id").asString("");
+        }).update("EntityTag", debug2l -> { // MagmaCube - decompile fix
+            String debug6 = debug0.get("id").asString(""); // MagmaCube - decompile fix
             if (Objects.equals(NamespacedSchema.ensureNamespaced(debug6), "minecraft:armor_stand")) {
-                return debug2.set("id", debug0.createString(debug2));
+                return debug2l.set("id", debug0.createString(debug2)); // MagmaCube - decompile fix
             }
             else {
-                return debug2;
+                return debug2l; // MagmaCube - decompile fix
             }
         })).getValue();
     }
     
     static {
         LOGGER = LogManager.getLogger();
-        ITEM_TO_BLOCKENTITY = (Map)DataFixUtils.make((Object)Maps.newHashMap(), debug0 -> {
+        ITEM_TO_BLOCKENTITY = DataFixUtils.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put("minecraft:furnace", "Furnace");
             debug0.put("minecraft:lit_furnace", "Furnace");
             debug0.put("minecraft:chest", "Chest");
diff --git a/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java b/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java
index a36ed4a75320ff737d66a77b0fbc6c490d1055b9..c8853f94dba71e6fdd54b32733e6224c362b55cc 100644
--- a/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java
+++ b/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java
@@ -36,9 +36,9 @@ public class ActiveProfiler implements ProfileCollector
     private final boolean warn;
     
     public ActiveProfiler(final LongSupplier debug1, final IntSupplier debug2, final boolean debug3) {
-        this.paths = (List<String>)Lists.newArrayList();
+        this.paths = Lists.newArrayList(); // MagmaCube - decompile fix
         this.startTimes = (LongList)new LongArrayList();
-        this.entries = (Map<String, PathEntry>)Maps.newHashMap();
+        this.entries = Maps.newHashMap(); // MagmaCube - decompile fix
         this.path = "";
         this.startTimeNano = debug1.getAsLong();
         this.getRealTime = debug1;
@@ -79,7 +79,7 @@ public class ActiveProfiler implements ProfileCollector
             return;
         }
         if (!this.path.isEmpty()) {
-            this.path += 'Â¥u001e';
+            this.path += '\u001e'; // MagmaCube - decompile fix
         }
         this.path += debug1;
         this.paths.add(this.path);
@@ -137,12 +137,12 @@ public class ActiveProfiler implements ProfileCollector
     
     @Override
     public void incrementCounter(final String debug1) {
-        this.getCurrentEntry().counters.addTo((Object)debug1, 1L);
+        this.getCurrentEntry().counters.addTo(debug1, 1L); // MagmaCube - decompile fix
     }
     
     @Override
     public void incrementCounter(final java.util.function.Supplier<String> debug1) {
-        this.getCurrentEntry().counters.addTo((Object)debug1.get(), 1L);
+        this.getCurrentEntry().counters.addTo(debug1.get(), 1L); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
index 6dc1f779a9c88c4a1600e5f0a3d30a7ead12f123..a46fa5120ba77f610c6b648acc0ecb41e99f62ad 100644
--- a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
+++ b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
@@ -59,9 +59,9 @@ public class FilledProfileResults implements ProfileResults
         final ProfilerPathEntry debug5 = this.getEntry(debug1);
         final long debug6 = debug5.getDuration();
         final long debug7 = debug5.getCount();
-        final List<ResultField> debug8 = (List<ResultField>)Lists.newArrayList();
+        final List<ResultField> debug8 = Lists.newArrayList(); // MagmaCube - decompile fix
         if (!debug1.isEmpty()) {
-            debug1 += 'Â¥u001e';
+            debug1 += '\u001e'; // MagmaCube - decompile fix
         }
         long debug9 = 0L;
         for (final String debug10 : this.entries.keySet()) {
@@ -99,19 +99,16 @@ public class FilledProfileResults implements ProfileResults
     }
     
     private Map<String, CounterCollector> getCounterValues() {
-        final Map<String, CounterCollector> debug4 = (Map<String, CounterCollector>)Maps.newTreeMap();
-        final Object2LongMap<String> debug5;
-        final List<String> debug6;
-        final Map<String, CounterCollector> map;
+        final Map<String, CounterCollector> map = Maps.newTreeMap(); // MagmaCube - decompile fix
         this.entries.forEach((debug1, debug2) -> {
-            debug5 = debug2.getCounters();
+            Object2LongMap<String> debug5 = debug2.getCounters(); // MagmaCube - decompile fix
             if (!debug5.isEmpty()) {
-                debug6 = (List<String>)FilledProfileResults.SPLITTER.splitToList((CharSequence)debug1);
-                debug5.forEach((debug2, debug3) -> map.computeIfAbsent(debug2, debug0 -> new CounterCollector()).addValue(debug6.iterator(), debug3));
+                List<String> debug6 = (List<String>)FilledProfileResults.SPLITTER.splitToList((CharSequence)debug1); // MagmaCube - decompile fix
+                debug5.forEach((debug22, debug3) -> map.computeIfAbsent(debug22, debug0 -> new CounterCollector()).addValue(debug6.iterator(), debug3)); // MagmaCube - decompile fix
             }
             return;
         });
-        return debug4;
+        return map; // MagmaCube - decompile fix
     }
     
     @Override
@@ -154,22 +151,24 @@ public class FilledProfileResults implements ProfileResults
     
     protected String getProfilerResults(final long debug1, final int debug3) {
         final StringBuilder debug4 = new StringBuilder();
-        debug4.append("---- Minecraft Profiler Results ----Â¥n");
+        // MagmaCube start - decompile fix
+        debug4.append("---- Minecraft Profiler Results ----\n");
         debug4.append("// ");
         debug4.append(getComment());
-        debug4.append("Â¥nÂ¥n");
-        debug4.append("Version: ").append(SharedConstants.getCurrentVersion().getId()).append('Â¥n');
-        debug4.append("Time span: ").append(debug1 / 1000000L).append(" msÂ¥n");
-        debug4.append("Tick span: ").append(debug3).append(" ticksÂ¥n");
-        debug4.append("// This is approximately ").append(String.format(Locale.ROOT, "%.2f", debug3 / (debug1 / 1.0E9f))).append(" ticks per second. It should be ").append(20).append(" ticks per secondÂ¥nÂ¥n");
-        debug4.append("--- BEGIN PROFILE DUMP ---Â¥nÂ¥n");
+        debug4.append("\n\n");
+        debug4.append("Version: ").append(SharedConstants.getCurrentVersion().getId()).append('\n');
+        debug4.append("Time span: ").append(debug1 / 1000000L).append(" ms\n");
+        debug4.append("Tick span: ").append(debug3).append(" ticks\n");
+        debug4.append("// This is approximately ").append(String.format(Locale.ROOT, "%.2f", debug3 / (debug1 / 1.0E9f))).append(" ticks per second. It should be ").append(20).append(" ticks per second\n\n");
+        debug4.append("--- BEGIN PROFILE DUMP ---\n\n");
         this.appendProfilerResults(0, "root", debug4);
-        debug4.append("--- END PROFILE DUMP ---Â¥nÂ¥n");
+        debug4.append("--- END PROFILE DUMP ---\n\n");
         final Map<String, CounterCollector> debug5 = this.getCounterValues();
         if (!debug5.isEmpty()) {
-            debug4.append("--- BEGIN COUNTER DUMP ---Â¥nÂ¥n");
+            debug4.append("--- BEGIN COUNTER DUMP ---\n\n");
             this.appendCounters(debug5, debug4, debug3);
-            debug4.append("--- END COUNTER DUMP ---Â¥nÂ¥n");
+            debug4.append("--- END COUNTER DUMP ---\n\n");
+            // MagmaCube end - decompile fix
         }
         return debug4.toString();
     }
@@ -185,16 +184,16 @@ public class FilledProfileResults implements ProfileResults
     private void appendProfilerResults(final int debug1, final String debug2, final StringBuilder debug3) {
         final List<ResultField> debug5 = this.getTimes(debug2);
         final Object2LongMap<String> debug6 = ((ProfilerPathEntry)ObjectUtils.firstNonNull((Object[])new ProfilerPathEntry[] { (ProfilerPathEntry)this.entries.get(debug2), FilledProfileResults.EMPTY })).getCounters();
-        debug6.forEach((debug3, debug4) -> indentLine(debug3, debug1).append('#').append(debug3).append(' ').append(debug4).append('/').append(debug4 / this.tickDuration).append('Â¥n'));
+        debug6.forEach((debug32, debug4) -> indentLine(debug3, debug1).append('#').append(debug32).append(' ').append(debug4).append('/').append(debug4 / this.tickDuration).append('\n')); // MagmaCube - decompile fix
         if (debug5.size() < 3) {
             return;
         }
         for (int debug7 = 1; debug7 < debug5.size(); ++debug7) {
             final ResultField debug8 = debug5.get(debug7);
-            indentLine(debug3, debug1).append(debug8.name).append('(').append(debug8.count).append('/').append(String.format(Locale.ROOT, "%.0f", debug8.count / this.tickDuration)).append(')').append(" - ").append(String.format(Locale.ROOT, "%.2f", debug8.percentage)).append("%/").append(String.format(Locale.ROOT, "%.2f", debug8.globalPercentage)).append("%Â¥n");
+            indentLine(debug3, debug1).append(debug8.name).append('(').append(debug8.count).append('/').append(String.format(Locale.ROOT, "%.0f", debug8.count / this.tickDuration)).append(')').append(" - ").append(String.format(Locale.ROOT, "%.2f", debug8.percentage)).append("%/").append(String.format(Locale.ROOT, "%.2f", debug8.globalPercentage)).append("%\n");
             if (!"unspecified".equals(debug8.name)) {
                 try {
-                    this.appendProfilerResults(debug1 + 1, debug2 + 'Â¥u001e' + debug8.name, debug3);
+                    this.appendProfilerResults(debug1 + 1, debug2 + '\u001e' + debug8.name, debug3);
                 }
                 catch (Exception debug9) {
                     debug3.append("[[ EXCEPTION ").append(debug9).append(" ]]");
@@ -204,15 +203,15 @@ public class FilledProfileResults implements ProfileResults
     }
     
     private void appendCounterResults(final int debug1, final String debug2, final CounterCollector debug3, final int debug4, final StringBuilder debug5) {
-        indentLine(debug5, debug1).append(debug2).append(" total:").append(debug3.selfValue).append('/').append(debug3.totalValue).append(" average: ").append(debug3.selfValue / debug4).append('/').append(debug3.totalValue / debug4).append('Â¥n');
-        debug3.children.entrySet().stream().sorted(FilledProfileResults.COUNTER_ENTRY_COMPARATOR).forEach(debug4 -> this.appendCounterResults(debug1 + 1, debug4.getKey(), (CounterCollector)debug4.getValue(), debug4, debug5));
+        indentLine(debug5, debug1).append(debug2).append(" total:").append(debug3.selfValue).append('/').append(debug3.totalValue).append(" average: ").append(debug3.selfValue / debug4).append('/').append(debug3.totalValue / debug4).append('\n'); // MagmaCube - decompile fix
+        debug3.children.entrySet().stream().sorted(FilledProfileResults.COUNTER_ENTRY_COMPARATOR).forEach(debug42 -> this.appendCounterResults(debug1 + 1, debug42.getKey(), (CounterCollector)debug42.getValue(), debug4, debug5)); // MagmaCube - decompile fix
     }
     
     private void appendCounters(final Map<String, CounterCollector> debug1, final StringBuilder debug2, final int debug3) {
-        debug1.forEach((debug3, debug4) -> {
-            debug2.append("-- Counter: ").append(debug3).append(" --Â¥n");
-            this.appendCounterResults(0, "root", (CounterCollector)debug4.children.get("root"), debug3, debug2);
-            debug2.append("Â¥nÂ¥n");
+        debug1.forEach((debug32, debug4) -> { // MagmaCube - decompile fix
+            debug2.append("-- Counter: ").append(debug32).append(" --\n"); // MagmaCube - decompile fix
+            this.appendCounterResults(0, "root", (CounterCollector)debug4.children.get("root"), debug3, debug2); // MagmaCube - decompile fix
+            debug2.append("\n\n"); // MagmaCube - decompile fix
         });
     }
     
@@ -246,11 +245,11 @@ public class FilledProfileResults implements ProfileResults
             
             @Override
             public Object2LongMap<String> getCounters() {
-                return (Object2LongMap<String>)Object2LongMaps.emptyMap();
+                return Object2LongMaps.emptyMap(); // MagmaCube - decompile fix
             }
         };
-        SPLITTER = Splitter.on('Â¥u001e');
-        COUNTER_ENTRY_COMPARATOR = Map.Entry.comparingByValue(Comparator.comparingLong(debug0 -> debug0.totalValue)).reversed();
+        SPLITTER = Splitter.on('\u001e'); // MagmaCube - decompile fix
+        COUNTER_ENTRY_COMPARATOR = Map.Entry.<String, CounterCollector>comparingByValue(Comparator.comparingLong(debug0 -> debug0.totalValue)).reversed(); // MagmaCube - decompile fix
     }
     
     static class CounterCollector
@@ -260,7 +259,7 @@ public class FilledProfileResults implements ProfileResults
         private final Map<String, CounterCollector> children;
         
         private CounterCollector() {
-            this.children = (Map<String, CounterCollector>)Maps.newHashMap();
+            this.children = Maps.newHashMap(); // MagmaCube - decompile fix
         }
         
         public void addValue(final Iterator<String> debug1, final long debug2) {
diff --git a/src/main/java/net/minecraft/util/profiling/ProfileResults.java b/src/main/java/net/minecraft/util/profiling/ProfileResults.java
index 63322575b4be362b6494296b61776af8b5327d96..7d10df596729567dafe3dd657142398bb1e54d0f 100644
--- a/src/main/java/net/minecraft/util/profiling/ProfileResults.java
+++ b/src/main/java/net/minecraft/util/profiling/ProfileResults.java
@@ -25,7 +25,7 @@ public interface ProfileResults
         return this.getEndTimeTicks() - this.getStartTimeTicks();
     }
     
-    default String demanglePath(final String debug0) {
-        return debug0.replace('Â¥u001e', '.');
+    static String demanglePath(final String debug0) { // MagmaCube - decompile fix
+        return debug0.replace('\u001e', '.'); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java b/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java
index ca06b13f5e76868464a2c605d98eea02fbeade87..5728d9b0e1251e6fd08e9c71aa643b3c8e09812a 100644
--- a/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java
+++ b/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java
@@ -22,7 +22,7 @@ public interface ProfilerFiller
     
     void incrementCounter(final Supplier<String> p0);
     
-    default ProfilerFiller tee(final ProfilerFiller debug0, final ProfilerFiller debug1) {
+    static ProfilerFiller tee(final ProfilerFiller debug0, final ProfilerFiller debug1) { // MagmaCube - decompile fix
         if (debug0 == InactiveProfiler.INSTANCE) {
             return debug1;
         }
@@ -43,15 +43,15 @@ public interface ProfilerFiller
             }
             
             @Override
-            public void push(final String debug1) {
-                debug0.push(debug1);
-                debug1.push(debug1);
+            public void push(final String s) { // MagmaCube - decompile fix
+                debug0.push(s); // MagmaCube - decompile fix
+                debug1.push(s); // MagmaCube - decompile fix
             }
             
             @Override
-            public void push(final Supplier<String> debug1) {
-                debug0.push(debug1);
-                debug1.push(debug1);
+            public void push(final Supplier<String> s) { // MagmaCube - decompile fix
+                debug0.push(s); // MagmaCube - decompile fix
+                debug1.push(s); // MagmaCube - decompile fix
             }
             
             @Override
@@ -61,27 +61,27 @@ public interface ProfilerFiller
             }
             
             @Override
-            public void popPush(final String debug1) {
-                debug0.popPush(debug1);
-                debug1.popPush(debug1);
+            public void popPush(final String s) { // MagmaCube - decompile fix
+                debug0.popPush(s); // MagmaCube - decompile fix
+                debug1.popPush(s); // MagmaCube - decompile fix
             }
             
             @Override
-            public void popPush(final Supplier<String> debug1) {
-                debug0.popPush(debug1);
-                debug1.popPush(debug1);
+            public void popPush(final Supplier<String> s) { // MagmaCube - decompile fix
+                debug0.popPush(s); // MagmaCube - decompile fix
+                debug1.popPush(s); // MagmaCube - decompile fix
             }
             
             @Override
-            public void incrementCounter(final String debug1) {
-                debug0.incrementCounter(debug1);
-                debug1.incrementCounter(debug1);
+            public void incrementCounter(final String s) { // MagmaCube - decompile fix
+                debug0.incrementCounter(s); // MagmaCube - decompile fix
+                debug1.incrementCounter(s); // MagmaCube - decompile fix
             }
             
             @Override
-            public void incrementCounter(final Supplier<String> debug1) {
-                debug0.incrementCounter(debug1);
-                debug1.incrementCounter(debug1);
+            public void incrementCounter(final Supplier<String> s) { // MagmaCube - decompile fix
+                debug0.incrementCounter(s); // MagmaCube - decompile fix
+                debug1.incrementCounter(s); // MagmaCube - decompile fix
             }
         };
     }
diff --git a/src/main/java/net/minecraft/util/profiling/SingleTickProfiler.java b/src/main/java/net/minecraft/util/profiling/SingleTickProfiler.java
index b129f35e39198d996b1d2cef7c00d8f84fb0fa5c..fcc8e11b9d57f971fba1134b14524f79e5860322 100644
--- a/src/main/java/net/minecraft/util/profiling/SingleTickProfiler.java
+++ b/src/main/java/net/minecraft/util/profiling/SingleTickProfiler.java
@@ -1,5 +1,6 @@
 package net.minecraft.util.profiling;
 
+import net.minecraft.Util;
 import org.apache.logging.log4j.LogManager;
 import javax.annotation.Nullable;
 import java.util.Date;
@@ -11,11 +12,11 @@ import org.apache.logging.log4j.Logger;
 public class SingleTickProfiler
 {
     private static final Logger LOGGER;
-    private final LongSupplier realTime;
-    private final long saveThreshold;
+    private final LongSupplier realTime = Util::getNanos; // MagmaCube - decompile fix - todo: fix code
+    private final long saveThreshold = 999999999999999L; // MagmaCube - decompile fix - todo: fix code
     private int tick;
-    private final File location;
-    private ProfileCollector profiler;
+    private final File location = new File("./profiles"); // MagmaCube - decompile fix - todo: fix code
+    private ProfileCollector profiler = InactiveProfiler.INSTANCE; // MagmaCube - decompile fix - todo: fix code
     
     public ProfilerFiller startTick() {
         this.profiler = new ActiveProfiler(this.realTime, () -> this.tick, false);
diff --git a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
index 5f28323757a39dde121b040a2833d0b1b1d91741..fece227ba9f7b6d086c201a1a715ed04d983b1f2 100644
--- a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
+++ b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
@@ -18,7 +18,7 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Processo
     private int blockingCount;
     
     protected BlockableEventLoop(final String debug1) {
-        this.pendingRunnables = (Queue<R>)Queues.newConcurrentLinkedQueue();
+        this.pendingRunnables = Queues.newConcurrentLinkedQueue(); // MagmaCube - decompile fix
         this.name = debug1;
     }
     
diff --git a/src/main/java/net/minecraft/util/thread/ProcessorHandle.java b/src/main/java/net/minecraft/util/thread/ProcessorHandle.java
index 16f2804f08aab7fafa96a1f9756037f562e8100f..44b229152f85ad01f0290e8dc95ca2b64fce2f3f 100644
--- a/src/main/java/net/minecraft/util/thread/ProcessorHandle.java
+++ b/src/main/java/net/minecraft/util/thread/ProcessorHandle.java
@@ -16,24 +16,25 @@ public interface ProcessorHandle<Msg> extends AutoCloseable
     
     default <Source> CompletableFuture<Source> ask(final Function<? super ProcessorHandle<Source>, ? extends Msg> debug1) {
         final CompletableFuture<Source> debug2 = new CompletableFuture<Source>();
-        final Msg debug3 = (Msg)debug1.apply((Object)of("ask future procesor handle", debug2::complete));
+        final Msg debug3 = (Msg)debug1.apply(of("ask future procesor handle", debug2::complete)); // MagmaCube - decompile fix
         this.tell(debug3);
         return debug2;
     }
     
     default <Source> CompletableFuture<Source> askEither(final Function<? super ProcessorHandle<Either<Source, Exception>>, ? extends Msg> debug1) {
-        final CompletableFuture<Source> debug2 = new CompletableFuture<Source>();
-        final CompletableFuture<Object> completableFuture;
-        final Msg debug3 = (Msg)debug1.apply((Object)of("ask future procesor handle", debug1 -> {
-            debug1.ifLeft((Consumer)completableFuture::complete);
-            debug1.ifRight((Consumer)completableFuture::completeExceptionally);
+        // MagmaCube start - decompile fix
+        final CompletableFuture<Source> completableFuture = new CompletableFuture<Source>();
+        final Msg debug3 = debug1.apply(of("ask future procesor handle", debug12 -> {
+            debug12.ifLeft(completableFuture::complete);
+            debug12.ifRight(completableFuture::completeExceptionally);
+            // MagmaCube end - decompile fix
             return;
         }));
         this.tell(debug3);
-        return debug2;
+        return completableFuture; // MagmaCube - decompile fix
     }
     
-    default <Msg> ProcessorHandle<Msg> of(final String debug0, final Consumer<Msg> debug1) {
+    static <Msg> ProcessorHandle<Msg> of(final String debug0, final Consumer<Msg> debug12) { // MagmaCube - decompile fix
         return new ProcessorHandle<Msg>() {
             @Override
             public String name() {
@@ -42,7 +43,7 @@ public interface ProcessorHandle<Msg> extends AutoCloseable
             
             @Override
             public void tell(final Msg debug1) {
-                debug1.accept(debug1);
+                debug12.accept(debug1); // MagmaCube - decompile fix
             }
             
             @Override
diff --git a/src/main/java/net/minecraft/util/thread/ProcessorMailbox.java b/src/main/java/net/minecraft/util/thread/ProcessorMailbox.java
index b0a1999a357a9321ca99da6f30787913f56af2bb..85d3e118ff0e4ad12cc77c0f97dd7494c95a3e7f 100644
--- a/src/main/java/net/minecraft/util/thread/ProcessorMailbox.java
+++ b/src/main/java/net/minecraft/util/thread/ProcessorMailbox.java
@@ -102,7 +102,7 @@ public class ProcessorMailbox<T> implements ProcessorHandle<T>, AutoCloseable, R
     
     @Override
     public void tell(final T debug1) {
-        this.queue.push((Object)debug1);
+        this.queue.push(debug1); // MagmaCube - decompile fix
         this.registerForExecution();
     }
     
diff --git a/src/main/java/net/minecraft/util/thread/StrictQueue.java b/src/main/java/net/minecraft/util/thread/StrictQueue.java
index 9f70a48f4879a8d818bc69ad3e4d2c251a731fbd..765fc8cf88e867b2ec6eb2bd065e98d77badc74c 100644
--- a/src/main/java/net/minecraft/util/thread/StrictQueue.java
+++ b/src/main/java/net/minecraft/util/thread/StrictQueue.java
@@ -28,7 +28,7 @@ public interface StrictQueue<T, F> {
         private final List<Queue<Runnable>> queueList;
 
         public FixedPriorityQueue(int debug1) {
-            this.queueList = IntStream.range(0, debug1).mapToObj(debug0 -> Queues.newConcurrentLinkedQueue()).collect(Collectors.toList());
+            this.queueList = (List<Queue<Runnable>>) (Object) IntStream.range(0, debug1).mapToObj(debug0 -> Queues.newConcurrentLinkedQueue()).collect(Collectors.toList()); // MagmaCube - decompile fix
         }
 
         @Override
@@ -53,12 +53,6 @@ public interface StrictQueue<T, F> {
         public boolean isEmpty() {
             return this.queueList.stream().allMatch(Collection::isEmpty);
         }
-
-        @Override
-        @Nullable
-        public /* synthetic */ Object pop() {
-            return this.pop();
-        }
     }
 
     public static final class IntRunnable
diff --git a/src/main/java/net/minecraft/world/Clearable.java b/src/main/java/net/minecraft/world/Clearable.java
index 9da9cd5869a6f1e4a6db1460e0b0455dec952289..3845ee8cd552a3f2cb37b25f4d75c628ca1ee4e2 100644
--- a/src/main/java/net/minecraft/world/Clearable.java
+++ b/src/main/java/net/minecraft/world/Clearable.java
@@ -6,7 +6,7 @@ public interface Clearable
 {
     void clearContent();
     
-    default void tryClear(@Nullable final Object debug0) {
+    static void tryClear(@Nullable final Object debug0) { // MagmaCube - decompile fix
         if (debug0 instanceof Clearable) {
             ((Clearable)debug0).clearContent();
         }
diff --git a/src/main/java/net/minecraft/world/ContainerHelper.java b/src/main/java/net/minecraft/world/ContainerHelper.java
index 9db1f742153c7ae80262e86809963c4ccc15ddcb..bd48517dde932d59e8be7e320f099ba91cf607d1 100644
--- a/src/main/java/net/minecraft/world/ContainerHelper.java
+++ b/src/main/java/net/minecraft/world/ContainerHelper.java
@@ -37,7 +37,7 @@ public class ContainerHelper
                 final CompoundTag debug6 = new CompoundTag();
                 debug6.putByte("Slot", (byte)debug4);
                 debug5.save(debug6);
-                ((AbstractList<CompoundTag>)debug3).add(debug6);
+                debug3.add(debug6); // MagmaCube - decompile fix
             }
         }
         if (!debug3.isEmpty() || debug2) {
diff --git a/src/main/java/net/minecraft/world/Containers.java b/src/main/java/net/minecraft/world/Containers.java
index 4af68e9436026108c26bf70cff55b0170e77168d..c40a9c340bb2b6c5d797d8bf89c2bf8099a8bdb6 100644
--- a/src/main/java/net/minecraft/world/Containers.java
+++ b/src/main/java/net/minecraft/world/Containers.java
@@ -28,7 +28,7 @@ public class Containers
     }
     
     public static void dropContents(final Level debug0, final BlockPos debug1, final NonNullList<ItemStack> debug2) {
-        debug2.forEach(debug2 -> dropItemStack(debug0, debug1.getX(), debug1.getY(), debug1.getZ(), debug2));
+        debug2.forEach(debug2l -> dropItemStack(debug0, debug1.getX(), debug1.getY(), debug1.getZ(), debug2l)); // MagmaCube - decompile fix
     }
     
     public static void dropItemStack(final Level debug0, final double debug1, final double debug3, final double debug5, final ItemStack debug7) {
diff --git a/src/main/java/net/minecraft/world/Snooper.java b/src/main/java/net/minecraft/world/Snooper.java
index 0cf93845bc427f2601c05aa4c1b8bbfac199e81a..7285de1d976b540c9f984084c75ae3fbc5144f04 100644
--- a/src/main/java/net/minecraft/world/Snooper.java
+++ b/src/main/java/net/minecraft/world/Snooper.java
@@ -20,8 +20,8 @@ public class Snooper
     private boolean started;
     
     public Snooper(final String debug1, final SnooperPopulator debug2, final long debug3) {
-        this.fixedData = (Map<String, Object>)Maps.newHashMap();
-        this.dynamicData = (Map<String, Object>)Maps.newHashMap();
+        this.fixedData = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.dynamicData = Maps.newHashMap(); // MagmaCube - decompile fix
         this.token = UUID.randomUUID().toString();
         this.timer = new Timer("Snooper Timer", true);
         this.lock = new Object();
diff --git a/src/main/java/net/minecraft/world/damagesource/BadRespawnPointDamage.java b/src/main/java/net/minecraft/world/damagesource/BadRespawnPointDamage.java
index aec049d39c4f3c245d4e1c1351798785a09e600e..6553351aefdf2f72a2e784543003b01fe77ad675 100644
--- a/src/main/java/net/minecraft/world/damagesource/BadRespawnPointDamage.java
+++ b/src/main/java/net/minecraft/world/damagesource/BadRespawnPointDamage.java
@@ -19,11 +19,9 @@ public class BadRespawnPointDamage extends DamageSource
     
     @Override
     public Component getLocalizedDeathMessage(final LivingEntity debug1) {
-        final HoverEvent debug3;
-        final Style style;
         final Component debug2 = ComponentUtils.wrapInSquareBrackets(new TranslatableComponent("death.attack.badRespawnPoint.link")).withStyle(debug0 -> {
-            debug0.withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL, "https://bugs.mojang.com/browse/MCPE-28723"));
-            new HoverEvent((HoverEvent.Action<TextComponent>)HoverEvent.Action.SHOW_TEXT, new TextComponent("MCPE-28723"));
+            Style style = debug0.withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL, "https://bugs.mojang.com/browse/MCPE-28723")); // MagmaCube - decompile fix
+            HoverEvent debug3 = new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TextComponent("MCPE-28723")); // MagmaCube - decompile fix
             return style.withHoverEvent(debug3);
         });
         return new TranslatableComponent("death.attack.badRespawnPoint.message", new Object[] { debug1.getDisplayName(), debug2 });
diff --git a/src/main/java/net/minecraft/world/damagesource/CombatTracker.java b/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
index fc4f8bf18281e4dd0365f9efbb20736ef9b56e10..6d995923d6ead2df6f299b88205e3bb0e410700a 100644
--- a/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
+++ b/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
@@ -30,7 +30,7 @@ public class CombatTracker
     private String nextLocation;
     
     public CombatTracker(final LivingEntity debug1) {
-        this.entries = (List<CombatEntry>)Lists.newArrayList();
+        this.entries = Lists.newArrayList(); // MagmaCube - decompile fix
         this.mob = debug1;
     }
     
diff --git a/src/main/java/net/minecraft/world/effect/MobEffect.java b/src/main/java/net/minecraft/world/effect/MobEffect.java
index 7910ba148360e21bc5615a28b5d651640353dea2..a0f8ca833a7c6267b35fccccc1f15e1253fc1dbe 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffect.java
@@ -36,7 +36,7 @@ public class MobEffect
     }
     
     protected MobEffect(final MobEffectCategory debug1, final int debug2) {
-        this.attributeModifiers = (Map<Attribute, AttributeModifier>)Maps.newHashMap();
+        this.attributeModifiers = Maps.newHashMap(); // MagmaCube - decompile fix
         this.category = debug1;
         this.color = debug2;
     }
diff --git a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
index c1c82653a6b4a101bb9c7a861844fab3fd1dc0dc..0441ff64b5f1ee94ed22e50cd2c664b6e5fbd415 100644
--- a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
+++ b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
@@ -57,8 +57,8 @@ public class AreaEffectCloud extends Entity
     public AreaEffectCloud(final EntityType<? extends AreaEffectCloud> debug1, final Level debug2) {
         super(debug1, debug2);
         this.potion = Potions.EMPTY;
-        this.effects = (List<MobEffectInstance>)Lists.newArrayList();
-        this.victims = (Map<Entity, Integer>)Maps.newHashMap();
+        this.effects = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.victims = Maps.newHashMap(); // MagmaCube - decompile fix
         this.duration = 600;
         this.waitTime = 20;
         this.reapplicationDelay = 20;
@@ -229,7 +229,7 @@ public class AreaEffectCloud extends Entity
                         debug18.remove();
                     }
                 }
-                final List<MobEffectInstance> debug20 = (List<MobEffectInstance>)Lists.newArrayList();
+                final List<MobEffectInstance> debug20 = Lists.newArrayList(); // MagmaCube - decompile fix
                 for (final MobEffectInstance debug21 : this.potion.getEffects()) {
                     debug20.add(new MobEffectInstance(debug21.getEffect(), debug21.getDuration() / 4, debug21.getAmplifier(), debug21.isAmbient(), debug21.isVisible()));
                 }
@@ -375,7 +375,7 @@ public class AreaEffectCloud extends Entity
         if (!this.effects.isEmpty()) {
             final ListTag debug2 = new ListTag();
             for (final MobEffectInstance debug3 : this.effects) {
-                ((AbstractList<CompoundTag>)debug2).add(debug3.save(new CompoundTag()));
+                debug2.add(debug3.save(new CompoundTag())); // MagmaCube - decompile fix
             }
             debug1.put("Effects", debug2);
         }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 6d7024104e428c392e04e1b07b6c554b3011a986..62281187efcedbf13bedea0fe195b2187ffb9aeb 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -665,7 +665,7 @@ CommandSource {
         AABB debug2 = this.getBoundingBox();
         CollisionContext debug3 = CollisionContext.of(this);
         VoxelShape debug4 = this.level.getWorldBorder().getCollisionShape();
-        Stream<Object> debug5 = Shapes.joinIsNotEmpty(debug4, Shapes.create(debug2.deflate(1.0E-7)), BooleanOp.AND) ? Stream.empty() : Stream.of(debug4);
+        Stream<VoxelShape> debug5 = Shapes.joinIsNotEmpty(debug4, Shapes.create(debug2.deflate(1.0E-7)), BooleanOp.AND) ? Stream.empty() : Stream.of(debug4); // MagmaCube - decompile fix
         Stream<VoxelShape> debug6 = this.level.getEntityCollisions(this, debug2.expandTowards(debug1), debug0 -> true);
         RewindableStream<VoxelShape> debug7 = new RewindableStream<VoxelShape>(Stream.concat(debug6, debug5));
         Vec3 debug8 = debug1.lengthSqr() == 0.0 ? debug1 : Entity.collideBoundingBoxHeuristically(this, debug1, debug2, this.level, debug3, debug7);
@@ -935,7 +935,7 @@ CommandSource {
     }
 
     private void updateFluidOnEyes() {
-        Object debug4;
+        Entity debug4; // MagmaCube - decompile fix
         this.wasEyeInWater = this.isEyeInFluid(FluidTags.WATER);
         this.fluidOnEyes = null;
         double debug1 = this.getEyeY() - 0.1111111119389534;
@@ -943,11 +943,11 @@ CommandSource {
         if (debug3 instanceof Boat && !((Boat)(debug4 = (Boat)debug3)).isUnderWater() && debug4.getBoundingBox().maxY >= debug1 && debug4.getBoundingBox().minY <= debug1) {
             return;
         }
-        debug4 = new BlockPos(this.getX(), debug1, this.getZ());
-        FluidState debug5 = this.level.getFluidState((BlockPos)debug4);
+        BlockPos pos = new BlockPos(this.getX(), debug1, this.getZ()); // MagmaCube - decompile fix
+        FluidState debug5 = this.level.getFluidState((BlockPos)pos); // MagmaCube - decompile fix
         for (Tag tag : FluidTags.getWrappers()) {
             if (!debug5.is(tag)) continue;
-            double debug8 = (float)((Vec3i)debug4).getY() + debug5.getHeight(this.level, (BlockPos)debug4);
+            double debug8 = (float)((Vec3i)pos).getY() + debug5.getHeight(this.level, (BlockPos)pos); // MagmaCube - decompile fix
             if (debug8 > debug1) {
                 this.fluidOnEyes = tag;
             }
@@ -1829,7 +1829,7 @@ CommandSource {
         if (debug2) {
             this.entityData.set(DATA_SHARED_FLAGS_ID, (byte)(debug3 | 1 << debug1));
         } else {
-            this.entityData.set(DATA_SHARED_FLAGS_ID, (byte)(debug3 & â¾(1 << debug1)));
+            this.entityData.set(DATA_SHARED_FLAGS_ID, (byte)(debug3 & (1 << debug1))); // MagmaCube - decompile fix
         }
     }
 
@@ -1986,7 +1986,7 @@ CommandSource {
             return null;
         }
         this.level.getProfiler().popPush("reloading");
-        Object debug3 = this.getType().create(debug1);
+        Entity debug3 = this.getType().create(debug1); // MagmaCube - decompile fix
         if (debug3 != null) {
             ((Entity)debug3).restoreFrom(this);
             ((Entity)debug3).moveTo(debug2.pos.x, debug2.pos.y, debug2.pos.z, debug2.yRot, ((Entity)debug3).xRot);
@@ -2030,18 +2030,20 @@ CommandSource {
         double debug14 = DimensionType.getTeleportationScale(this.level.dimensionType(), debug1.dimensionType());
         BlockPos debug16 = new BlockPos(Mth.clamp(this.getX() * debug14, debug6, debug10), this.getY(), Mth.clamp(this.getZ() * debug14, debug8, debug12));
         return this.getExitPortal(debug1, debug16, debug4).map(debug22 -> {
-            Vec3 debug4;
-            Direction.Axis debug3;
-            BlockState debug5 = this.level.getBlockState(this.portalEntrancePos);
-            if (debug5.hasProperty(BlockStateProperties.HORIZONTAL_AXIS)) {
-                debug3 = debug5.getValue(BlockStateProperties.HORIZONTAL_AXIS);
-                BlockUtil.FoundRectangle debug6 = BlockUtil.getLargestRectangleAround(this.portalEntrancePos, debug3, 21, Direction.Axis.Y, 21, debug2 -> this.level.getBlockState((BlockPos)debug2) == debug5);
-                debug4 = this.getRelativePortalPosition(debug3, debug6);
+            // MagmaCube start - decompile fix
+            Vec3 debug42;
+            Direction.Axis debug32;
+            BlockState debug52 = this.level.getBlockState(this.portalEntrancePos);
+            if (debug52.hasProperty(BlockStateProperties.HORIZONTAL_AXIS)) {
+                debug32 = debug52.getValue(BlockStateProperties.HORIZONTAL_AXIS);
+                BlockUtil.FoundRectangle debug62 = BlockUtil.getLargestRectangleAround(this.portalEntrancePos, debug32, 21, Direction.Axis.Y, 21, debug222 -> this.level.getBlockState((BlockPos)debug222) == debug52);
+                debug42 = this.getRelativePortalPosition(debug32, debug62);
             } else {
-                debug3 = Direction.Axis.X;
-                debug4 = new Vec3(0.5, 0.0, 0.0);
+                debug32 = Direction.Axis.X;
+                debug42 = new Vec3(0.5, 0.0, 0.0);
             }
-            return PortalShape.createPortalInfo(debug1, debug22, debug3, debug4, this.getDimensions(this.getPose()), this.getDeltaMovement(), this.yRot, this.xRot);
+            return PortalShape.createPortalInfo(debug1, debug22, debug32, debug42, this.getDimensions(this.getPose()), this.getDeltaMovement(), this.yRot, this.xRot);
+            // MagmaCube end - decompile fix
         }).orElse(null);
     }
 
@@ -2165,8 +2167,8 @@ CommandSource {
         this.getSelfAndPassengers().forEach(debug1 -> {
             debug7.updateChunkPos((Entity)debug1);
             debug1.forceChunkAddition = true;
-            for (Entity debug3 : debug1.passengers) {
-                debug1.positionRider(debug3, Entity::moveTo);
+            for (Entity debug32 : debug1.passengers) { // MagmaCube - decompile fix
+                debug1.positionRider(debug32, Entity::moveTo); // MagmaCube - decompile fix
             }
         });
     }
diff --git a/src/main/java/net/minecraft/world/entity/EntitySelector.java b/src/main/java/net/minecraft/world/entity/EntitySelector.java
index 94dc48eb4a321c300398d6d1dd9bb0c2f02db9ab..9a0ddff26abfb2471ef07dfac4738c54c76c0d4b 100644
--- a/src/main/java/net/minecraft/world/entity/EntitySelector.java
+++ b/src/main/java/net/minecraft/world/entity/EntitySelector.java
@@ -21,37 +21,31 @@ public final class EntitySelector
     
     public static Predicate<Entity> withinDistance(final double debug0, final double debug2, final double debug4, final double debug6) {
         final double debug9 = debug6 * debug6;
-        final double n;
-        return debug8 -> debug8 != null && debug8.distanceToSqr(debug0, debug2, debug4) <= n;
+        return debug8 -> debug8 != null && debug8.distanceToSqr(debug0, debug2, debug4) <= debug9; // MagmaCube - decompile fix
     }
     
     public static Predicate<Entity> pushableBy(final Entity debug0) {
         final Team debug4 = debug0.getTeam();
         final Team.CollisionRule debug5 = (debug4 == null) ? Team.CollisionRule.ALWAYS : debug4.getCollisionRule();
         if (debug5 == Team.CollisionRule.NEVER) {
-            return (Predicate<Entity>)Predicates.alwaysFalse();
+            return Predicates.alwaysFalse(); // MagmaCube - decompile fix
         }
-        final Team debug6;
-        final Team.CollisionRule debug7;
-        final Team team;
-        final boolean debug8;
-        final Team.CollisionRule collisionRule;
         return EntitySelector.NO_SPECTATORS.and(debug3 -> {
             if (!debug3.isPushable()) {
                 return false;
             }
-            else if (debug0.level.isClientSide && (!(debug3 instanceof Player) || !debug3.isLocalPlayer())) {
+            else if (debug0.level.isClientSide && (!(debug3 instanceof Player) || !((Player) debug3).isLocalPlayer())) { // MagmaCube - decompile fix
                 return false;
             }
             else {
-                debug6 = debug3.getTeam();
-                debug7 = ((debug6 == null) ? Team.CollisionRule.ALWAYS : debug6.getCollisionRule());
+                Team debug6 = debug3.getTeam(); // MagmaCube - decompile fix
+                Team.CollisionRule debug7 = ((debug6 == null) ? Team.CollisionRule.ALWAYS : debug6.getCollisionRule()); // MagmaCube - decompile fix
                 if (debug7 == Team.CollisionRule.NEVER) {
                     return false;
                 }
                 else {
-                    debug8 = (team != null && team.isAlliedTo(debug6));
-                    return ((collisionRule != Team.CollisionRule.PUSH_OWN_TEAM && debug7 != Team.CollisionRule.PUSH_OWN_TEAM) || !debug8) && ((collisionRule != Team.CollisionRule.PUSH_OTHER_TEAMS && debug7 != Team.CollisionRule.PUSH_OTHER_TEAMS) || debug8);
+                    boolean debug8 = (debug6 != null && debug6.isAlliedTo(debug6)); // MagmaCube - decompile fix
+                    return ((debug7 != Team.CollisionRule.PUSH_OWN_TEAM && debug7 != Team.CollisionRule.PUSH_OWN_TEAM) || !debug8) && ((debug7 != Team.CollisionRule.PUSH_OTHER_TEAMS && debug7 != Team.CollisionRule.PUSH_OTHER_TEAMS) || debug8); // MagmaCube - decompile fix
                 }
             }
         });
@@ -74,8 +68,8 @@ public final class EntitySelector
         LIVING_ENTITY_STILL_ALIVE = LivingEntity::isAlive;
         ENTITY_NOT_BEING_RIDDEN = (debug0 -> debug0.isAlive() && !debug0.isVehicle() && !debug0.isPassenger());
         CONTAINER_ENTITY_SELECTOR = (debug0 -> debug0 instanceof Container && debug0.isAlive());
-        NO_CREATIVE_OR_SPECTATOR = (debug0 -> !(debug0 instanceof Player) || (!debug0.isSpectator() && !debug0.isCreative()));
-        ATTACK_ALLOWED = (debug0 -> !(debug0 instanceof Player) || (!debug0.isSpectator() && !debug0.isCreative() && debug0.level.getDifficulty() != Difficulty.PEACEFUL));
+        NO_CREATIVE_OR_SPECTATOR = (debug0 -> !(debug0 instanceof Player) || (!debug0.isSpectator() && !((Player) debug0).isCreative())); // MagmaCube - decompile fix
+        ATTACK_ALLOWED = (debug0 -> !(debug0 instanceof Player) || (!debug0.isSpectator() && !((Player) debug0).isCreative() && debug0.level.getDifficulty() != Difficulty.PEACEFUL)); // MagmaCube - decompile fix
         NO_SPECTATORS = (debug0 -> !debug0.isSpectator());
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index a2f57a327e5a6163bb07233c4f352525185d987e..4d43d0e002ef0585f6f0d5975eac9d8dbd8643b4 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -159,13 +159,13 @@ import org.apache.logging.log4j.Logger;
 
 public class EntityType<T extends Entity> {
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final EntityType<AreaEffectCloud> AREA_EFFECT_CLOUD = EntityType.register("area_effect_cloud", Builder.of(AreaEffectCloud::new, MobCategory.MISC).fireImmune().sized(6.0f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
-    public static final EntityType<ArmorStand> ARMOR_STAND = EntityType.register("armor_stand", Builder.of(ArmorStand::new, MobCategory.MISC).sized(0.5f, 1.975f).clientTrackingRange(10));
-    public static final EntityType<Arrow> ARROW = EntityType.register("arrow", Builder.of(Arrow::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20));
+    public static final EntityType<AreaEffectCloud> AREA_EFFECT_CLOUD = EntityType.register("area_effect_cloud", Builder.<AreaEffectCloud>of(AreaEffectCloud::new, MobCategory.MISC).fireImmune().sized(6.0f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE)); // MagmaCube - decompile fix
+    public static final EntityType<ArmorStand> ARMOR_STAND = EntityType.register("armor_stand", Builder.<ArmorStand>of(ArmorStand::new, MobCategory.MISC).sized(0.5f, 1.975f).clientTrackingRange(10)); // MagmaCube - decompile fix
+    public static final EntityType<Arrow> ARROW = EntityType.register("arrow", Builder.<Arrow>of(Arrow::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20)); // MagmaCube - decompile fix
     public static final EntityType<Bat> BAT = EntityType.register("bat", Builder.of(Bat::new, MobCategory.AMBIENT).sized(0.5f, 0.9f).clientTrackingRange(5));
     public static final EntityType<Bee> BEE = EntityType.register("bee", Builder.of(Bee::new, MobCategory.CREATURE).sized(0.7f, 0.6f).clientTrackingRange(8));
     public static final EntityType<Blaze> BLAZE = EntityType.register("blaze", Builder.of(Blaze::new, MobCategory.MONSTER).fireImmune().sized(0.6f, 1.8f).clientTrackingRange(8));
-    public static final EntityType<Boat> BOAT = EntityType.register("boat", Builder.of(Boat::new, MobCategory.MISC).sized(1.375f, 0.5625f).clientTrackingRange(10));
+    public static final EntityType<Boat> BOAT = EntityType.register("boat", Builder.<Boat>of(Boat::new, MobCategory.MISC).sized(1.375f, 0.5625f).clientTrackingRange(10)); // MagmaCube - decompile fix
     public static final EntityType<Cat> CAT = EntityType.register("cat", Builder.of(Cat::new, MobCategory.CREATURE).sized(0.6f, 0.7f).clientTrackingRange(8));
     public static final EntityType<CaveSpider> CAVE_SPIDER = EntityType.register("cave_spider", Builder.of(CaveSpider::new, MobCategory.MONSTER).sized(0.7f, 0.5f).clientTrackingRange(8));
     public static final EntityType<Chicken> CHICKEN = EntityType.register("chicken", Builder.of(Chicken::new, MobCategory.CREATURE).sized(0.4f, 0.7f).clientTrackingRange(10));
@@ -174,19 +174,19 @@ public class EntityType<T extends Entity> {
     public static final EntityType<Creeper> CREEPER = EntityType.register("creeper", Builder.of(Creeper::new, MobCategory.MONSTER).sized(0.6f, 1.7f).clientTrackingRange(8));
     public static final EntityType<Dolphin> DOLPHIN = EntityType.register("dolphin", Builder.of(Dolphin::new, MobCategory.WATER_CREATURE).sized(0.9f, 0.6f));
     public static final EntityType<Donkey> DONKEY = EntityType.register("donkey", Builder.of(Donkey::new, MobCategory.CREATURE).sized(1.3964844f, 1.5f).clientTrackingRange(10));
-    public static final EntityType<DragonFireball> DRAGON_FIREBALL = EntityType.register("dragon_fireball", Builder.of(DragonFireball::new, MobCategory.MISC).sized(1.0f, 1.0f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<DragonFireball> DRAGON_FIREBALL = EntityType.register("dragon_fireball", Builder.<DragonFireball>of(DragonFireball::new, MobCategory.MISC).sized(1.0f, 1.0f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
     public static final EntityType<Drowned> DROWNED = EntityType.register("drowned", Builder.of(Drowned::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<ElderGuardian> ELDER_GUARDIAN = EntityType.register("elder_guardian", Builder.of(ElderGuardian::new, MobCategory.MONSTER).sized(1.9975f, 1.9975f).clientTrackingRange(10));
-    public static final EntityType<EndCrystal> END_CRYSTAL = EntityType.register("end_crystal", Builder.of(EndCrystal::new, MobCategory.MISC).sized(2.0f, 2.0f).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<EndCrystal> END_CRYSTAL = EntityType.register("end_crystal", Builder.<EndCrystal>of(EndCrystal::new, MobCategory.MISC).sized(2.0f, 2.0f).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE)); // MagmaCube - decompile fix
     public static final EntityType<EnderDragon> ENDER_DRAGON = EntityType.register("ender_dragon", Builder.of(EnderDragon::new, MobCategory.MONSTER).fireImmune().sized(16.0f, 8.0f).clientTrackingRange(10));
     public static final EntityType<EnderMan> ENDERMAN = EntityType.register("enderman", Builder.of(EnderMan::new, MobCategory.MONSTER).sized(0.6f, 2.9f).clientTrackingRange(8));
     public static final EntityType<Endermite> ENDERMITE = EntityType.register("endermite", Builder.of(Endermite::new, MobCategory.MONSTER).sized(0.4f, 0.3f).clientTrackingRange(8));
     public static final EntityType<Evoker> EVOKER = EntityType.register("evoker", Builder.of(Evoker::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
-    public static final EntityType<EvokerFangs> EVOKER_FANGS = EntityType.register("evoker_fangs", Builder.of(EvokerFangs::new, MobCategory.MISC).sized(0.5f, 0.8f).clientTrackingRange(6).updateInterval(2));
-    public static final EntityType<ExperienceOrb> EXPERIENCE_ORB = EntityType.register("experience_orb", Builder.of(ExperienceOrb::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(6).updateInterval(20));
-    public static final EntityType<EyeOfEnder> EYE_OF_ENDER = EntityType.register("eye_of_ender", Builder.of(EyeOfEnder::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(4));
-    public static final EntityType<FallingBlockEntity> FALLING_BLOCK = EntityType.register("falling_block", Builder.of(FallingBlockEntity::new, MobCategory.MISC).sized(0.98f, 0.98f).clientTrackingRange(10).updateInterval(20));
-    public static final EntityType<FireworkRocketEntity> FIREWORK_ROCKET = EntityType.register("firework_rocket", Builder.of(FireworkRocketEntity::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<EvokerFangs> EVOKER_FANGS = EntityType.register("evoker_fangs", Builder.<EvokerFangs>of(EvokerFangs::new, MobCategory.MISC).sized(0.5f, 0.8f).clientTrackingRange(6).updateInterval(2)); // MagmaCube - decompile fix
+    public static final EntityType<ExperienceOrb> EXPERIENCE_ORB = EntityType.register("experience_orb", Builder.<ExperienceOrb>of(ExperienceOrb::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(6).updateInterval(20)); // MagmaCube - decompile fix
+    public static final EntityType<EyeOfEnder> EYE_OF_ENDER = EntityType.register("eye_of_ender", Builder.<EyeOfEnder>of(EyeOfEnder::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(4)); // MagmaCube - decompile fix
+    public static final EntityType<FallingBlockEntity> FALLING_BLOCK = EntityType.register("falling_block", Builder.<FallingBlockEntity>of(FallingBlockEntity::new, MobCategory.MISC).sized(0.98f, 0.98f).clientTrackingRange(10).updateInterval(20)); // MagmaCube - decompile fix
+    public static final EntityType<FireworkRocketEntity> FIREWORK_ROCKET = EntityType.register("firework_rocket", Builder.<FireworkRocketEntity>of(FireworkRocketEntity::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
     public static final EntityType<Fox> FOX = EntityType.register("fox", Builder.of(Fox::new, MobCategory.CREATURE).sized(0.6f, 0.7f).clientTrackingRange(8).immuneTo(Blocks.SWEET_BERRY_BUSH));
     public static final EntityType<Ghast> GHAST = EntityType.register("ghast", Builder.of(Ghast::new, MobCategory.MONSTER).fireImmune().sized(4.0f, 4.0f).clientTrackingRange(10));
     public static final EntityType<Giant> GIANT = EntityType.register("giant", Builder.of(Giant::new, MobCategory.MONSTER).sized(3.6f, 12.0f).clientTrackingRange(10));
@@ -196,25 +196,25 @@ public class EntityType<T extends Entity> {
     public static final EntityType<Husk> HUSK = EntityType.register("husk", Builder.of(Husk::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<Illusioner> ILLUSIONER = EntityType.register("illusioner", Builder.of(Illusioner::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<IronGolem> IRON_GOLEM = EntityType.register("iron_golem", Builder.of(IronGolem::new, MobCategory.MISC).sized(1.4f, 2.7f).clientTrackingRange(10));
-    public static final EntityType<ItemEntity> ITEM = EntityType.register("item", Builder.of(ItemEntity::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(6).updateInterval(20));
-    public static final EntityType<ItemFrame> ITEM_FRAME = EntityType.register("item_frame", Builder.of(ItemFrame::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
-    public static final EntityType<LargeFireball> FIREBALL = EntityType.register("fireball", Builder.of(LargeFireball::new, MobCategory.MISC).sized(1.0f, 1.0f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<LeashFenceKnotEntity> LEASH_KNOT = EntityType.register("leash_knot", Builder.of(LeashFenceKnotEntity::new, MobCategory.MISC).noSave().sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<ItemEntity> ITEM = EntityType.register("item", Builder.<ItemEntity>of(ItemEntity::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(6).updateInterval(20)); // MagmaCube - decompile fix
+    public static final EntityType<ItemFrame> ITEM_FRAME = EntityType.register("item_frame", Builder.<ItemFrame>of(ItemFrame::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE)); // MagmaCube - decompile fix
+    public static final EntityType<LargeFireball> FIREBALL = EntityType.register("fireball", Builder.<LargeFireball>of(LargeFireball::new, MobCategory.MISC).sized(1.0f, 1.0f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
+    public static final EntityType<LeashFenceKnotEntity> LEASH_KNOT = EntityType.register("leash_knot", Builder.<LeashFenceKnotEntity>of(LeashFenceKnotEntity::new, MobCategory.MISC).noSave().sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE)); // MagmaCube - decompile fix
     public static final EntityType<LightningBolt> LIGHTNING_BOLT = EntityType.register("lightning_bolt", Builder.of(LightningBolt::new, MobCategory.MISC).noSave().sized(0.0f, 0.0f).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE));
     public static final EntityType<Llama> LLAMA = EntityType.register("llama", Builder.of(Llama::new, MobCategory.CREATURE).sized(0.9f, 1.87f).clientTrackingRange(10));
-    public static final EntityType<LlamaSpit> LLAMA_SPIT = EntityType.register("llama_spit", Builder.of(LlamaSpit::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<LlamaSpit> LLAMA_SPIT = EntityType.register("llama_spit", Builder.<LlamaSpit>of(LlamaSpit::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
     public static final EntityType<MagmaCube> MAGMA_CUBE = EntityType.register("magma_cube", Builder.of(MagmaCube::new, MobCategory.MONSTER).fireImmune().sized(2.04f, 2.04f).clientTrackingRange(8));
-    public static final EntityType<Minecart> MINECART = EntityType.register("minecart", Builder.of(Minecart::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartChest> CHEST_MINECART = EntityType.register("chest_minecart", Builder.of(MinecartChest::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartCommandBlock> COMMAND_BLOCK_MINECART = EntityType.register("command_block_minecart", Builder.of(MinecartCommandBlock::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartFurnace> FURNACE_MINECART = EntityType.register("furnace_minecart", Builder.of(MinecartFurnace::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartHopper> HOPPER_MINECART = EntityType.register("hopper_minecart", Builder.of(MinecartHopper::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartSpawner> SPAWNER_MINECART = EntityType.register("spawner_minecart", Builder.of(MinecartSpawner::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartTNT> TNT_MINECART = EntityType.register("tnt_minecart", Builder.of(MinecartTNT::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
+    public static final EntityType<Minecart> MINECART = EntityType.register("minecart", Builder.<Minecart>of(Minecart::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8)); // MagmaCube - decompile fix
+    public static final EntityType<MinecartChest> CHEST_MINECART = EntityType.register("chest_minecart", Builder.<MinecartChest>of(MinecartChest::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8)); // MagmaCube - decompile fix
+    public static final EntityType<MinecartCommandBlock> COMMAND_BLOCK_MINECART = EntityType.register("command_block_minecart", Builder.<MinecartCommandBlock>of(MinecartCommandBlock::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8)); // MagmaCube - decompile fix
+    public static final EntityType<MinecartFurnace> FURNACE_MINECART = EntityType.register("furnace_minecart", Builder.<MinecartFurnace>of(MinecartFurnace::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8)); // MagmaCube - decompile fix
+    public static final EntityType<MinecartHopper> HOPPER_MINECART = EntityType.register("hopper_minecart", Builder.<MinecartHopper>of(MinecartHopper::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8)); // MagmaCube - decompile fix
+    public static final EntityType<MinecartSpawner> SPAWNER_MINECART = EntityType.register("spawner_minecart", Builder.<MinecartSpawner>of(MinecartSpawner::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8)); // MagmaCube - decompile fix
+    public static final EntityType<MinecartTNT> TNT_MINECART = EntityType.register("tnt_minecart", Builder.<MinecartTNT>of(MinecartTNT::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8)); // MagmaCube - decompile fix
     public static final EntityType<Mule> MULE = EntityType.register("mule", Builder.of(Mule::new, MobCategory.CREATURE).sized(1.3964844f, 1.6f).clientTrackingRange(8));
     public static final EntityType<MushroomCow> MOOSHROOM = EntityType.register("mooshroom", Builder.of(MushroomCow::new, MobCategory.CREATURE).sized(0.9f, 1.4f).clientTrackingRange(10));
     public static final EntityType<Ocelot> OCELOT = EntityType.register("ocelot", Builder.of(Ocelot::new, MobCategory.CREATURE).sized(0.6f, 0.7f).clientTrackingRange(10));
-    public static final EntityType<Painting> PAINTING = EntityType.register("painting", Builder.of(Painting::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<Painting> PAINTING = EntityType.register("painting", Builder.<Painting>of(Painting::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE)); // MagmaCube - decompile fix
     public static final EntityType<Panda> PANDA = EntityType.register("panda", Builder.of(Panda::new, MobCategory.CREATURE).sized(1.3f, 1.25f).clientTrackingRange(10));
     public static final EntityType<Parrot> PARROT = EntityType.register("parrot", Builder.of(Parrot::new, MobCategory.CREATURE).sized(0.5f, 0.9f).clientTrackingRange(8));
     public static final EntityType<Phantom> PHANTOM = EntityType.register("phantom", Builder.of(Phantom::new, MobCategory.MONSTER).sized(0.9f, 0.5f).clientTrackingRange(8));
@@ -223,50 +223,50 @@ public class EntityType<T extends Entity> {
     public static final EntityType<PiglinBrute> PIGLIN_BRUTE = EntityType.register("piglin_brute", Builder.of(PiglinBrute::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<Pillager> PILLAGER = EntityType.register("pillager", Builder.of(Pillager::new, MobCategory.MONSTER).canSpawnFarFromPlayer().sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<PolarBear> POLAR_BEAR = EntityType.register("polar_bear", Builder.of(PolarBear::new, MobCategory.CREATURE).sized(1.4f, 1.4f).clientTrackingRange(10));
-    public static final EntityType<PrimedTnt> TNT = EntityType.register("tnt", Builder.of(PrimedTnt::new, MobCategory.MISC).fireImmune().sized(0.98f, 0.98f).clientTrackingRange(10).updateInterval(10));
+    public static final EntityType<PrimedTnt> TNT = EntityType.register("tnt", Builder.<PrimedTnt>of(PrimedTnt::new, MobCategory.MISC).fireImmune().sized(0.98f, 0.98f).clientTrackingRange(10).updateInterval(10)); // MagmaCube - decompile fix
     public static final EntityType<Pufferfish> PUFFERFISH = EntityType.register("pufferfish", Builder.of(Pufferfish::new, MobCategory.WATER_AMBIENT).sized(0.7f, 0.7f).clientTrackingRange(4));
     public static final EntityType<Rabbit> RABBIT = EntityType.register("rabbit", Builder.of(Rabbit::new, MobCategory.CREATURE).sized(0.4f, 0.5f).clientTrackingRange(8));
     public static final EntityType<Ravager> RAVAGER = EntityType.register("ravager", Builder.of(Ravager::new, MobCategory.MONSTER).sized(1.95f, 2.2f).clientTrackingRange(10));
     public static final EntityType<Salmon> SALMON = EntityType.register("salmon", Builder.of(Salmon::new, MobCategory.WATER_AMBIENT).sized(0.7f, 0.4f).clientTrackingRange(4));
     public static final EntityType<Sheep> SHEEP = EntityType.register("sheep", Builder.of(Sheep::new, MobCategory.CREATURE).sized(0.9f, 1.3f).clientTrackingRange(10));
     public static final EntityType<Shulker> SHULKER = EntityType.register("shulker", Builder.of(Shulker::new, MobCategory.MONSTER).fireImmune().canSpawnFarFromPlayer().sized(1.0f, 1.0f).clientTrackingRange(10));
-    public static final EntityType<ShulkerBullet> SHULKER_BULLET = EntityType.register("shulker_bullet", Builder.of(ShulkerBullet::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(8));
+    public static final EntityType<ShulkerBullet> SHULKER_BULLET = EntityType.register("shulker_bullet", Builder.<ShulkerBullet>of(ShulkerBullet::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(8)); // MagmaCube - decompile fix
     public static final EntityType<Silverfish> SILVERFISH = EntityType.register("silverfish", Builder.of(Silverfish::new, MobCategory.MONSTER).sized(0.4f, 0.3f).clientTrackingRange(8));
     public static final EntityType<Skeleton> SKELETON = EntityType.register("skeleton", Builder.of(Skeleton::new, MobCategory.MONSTER).sized(0.6f, 1.99f).clientTrackingRange(8));
     public static final EntityType<SkeletonHorse> SKELETON_HORSE = EntityType.register("skeleton_horse", Builder.of(SkeletonHorse::new, MobCategory.CREATURE).sized(1.3964844f, 1.6f).clientTrackingRange(10));
     public static final EntityType<Slime> SLIME = EntityType.register("slime", Builder.of(Slime::new, MobCategory.MONSTER).sized(2.04f, 2.04f).clientTrackingRange(10));
-    public static final EntityType<SmallFireball> SMALL_FIREBALL = EntityType.register("small_fireball", Builder.of(SmallFireball::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<SmallFireball> SMALL_FIREBALL = EntityType.register("small_fireball", Builder.<SmallFireball>of(SmallFireball::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
     public static final EntityType<SnowGolem> SNOW_GOLEM = EntityType.register("snow_golem", Builder.of(SnowGolem::new, MobCategory.MISC).sized(0.7f, 1.9f).clientTrackingRange(8));
-    public static final EntityType<Snowball> SNOWBALL = EntityType.register("snowball", Builder.of(Snowball::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<SpectralArrow> SPECTRAL_ARROW = EntityType.register("spectral_arrow", Builder.of(SpectralArrow::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20));
+    public static final EntityType<Snowball> SNOWBALL = EntityType.register("snowball", Builder.<Snowball>of(Snowball::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
+    public static final EntityType<SpectralArrow> SPECTRAL_ARROW = EntityType.register("spectral_arrow", Builder.<SpectralArrow>of(SpectralArrow::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20)); // MagmaCube - decompile fix
     public static final EntityType<Spider> SPIDER = EntityType.register("spider", Builder.of(Spider::new, MobCategory.MONSTER).sized(1.4f, 0.9f).clientTrackingRange(8));
     public static final EntityType<Squid> SQUID = EntityType.register("squid", Builder.of(Squid::new, MobCategory.WATER_CREATURE).sized(0.8f, 0.8f).clientTrackingRange(8));
     public static final EntityType<Stray> STRAY = EntityType.register("stray", Builder.of(Stray::new, MobCategory.MONSTER).sized(0.6f, 1.99f).clientTrackingRange(8));
     public static final EntityType<Strider> STRIDER = EntityType.register("strider", Builder.of(Strider::new, MobCategory.CREATURE).fireImmune().sized(0.9f, 1.7f).clientTrackingRange(10));
-    public static final EntityType<ThrownEgg> EGG = EntityType.register("egg", Builder.of(ThrownEgg::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownEnderpearl> ENDER_PEARL = EntityType.register("ender_pearl", Builder.of(ThrownEnderpearl::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownExperienceBottle> EXPERIENCE_BOTTLE = EntityType.register("experience_bottle", Builder.of(ThrownExperienceBottle::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownPotion> POTION = EntityType.register("potion", Builder.of(ThrownPotion::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownTrident> TRIDENT = EntityType.register("trident", Builder.of(ThrownTrident::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20));
+    public static final EntityType<ThrownEgg> EGG = EntityType.register("egg", Builder.<ThrownEgg>of(ThrownEgg::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
+    public static final EntityType<ThrownEnderpearl> ENDER_PEARL = EntityType.register("ender_pearl", Builder.<ThrownEnderpearl>of(ThrownEnderpearl::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
+    public static final EntityType<ThrownExperienceBottle> EXPERIENCE_BOTTLE = EntityType.register("experience_bottle", Builder.<ThrownExperienceBottle>of(ThrownExperienceBottle::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
+    public static final EntityType<ThrownPotion> POTION = EntityType.register("potion", Builder.<ThrownPotion>of(ThrownPotion::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
+    public static final EntityType<ThrownTrident> TRIDENT = EntityType.register("trident", Builder.<ThrownTrident>of(ThrownTrident::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20)); // MagmaCube - decompile fix
     public static final EntityType<TraderLlama> TRADER_LLAMA = EntityType.register("trader_llama", Builder.of(TraderLlama::new, MobCategory.CREATURE).sized(0.9f, 1.87f).clientTrackingRange(10));
     public static final EntityType<TropicalFish> TROPICAL_FISH = EntityType.register("tropical_fish", Builder.of(TropicalFish::new, MobCategory.WATER_AMBIENT).sized(0.5f, 0.4f).clientTrackingRange(4));
     public static final EntityType<Turtle> TURTLE = EntityType.register("turtle", Builder.of(Turtle::new, MobCategory.CREATURE).sized(1.2f, 0.4f).clientTrackingRange(10));
     public static final EntityType<Vex> VEX = EntityType.register("vex", Builder.of(Vex::new, MobCategory.MONSTER).fireImmune().sized(0.4f, 0.8f).clientTrackingRange(8));
-    public static final EntityType<Villager> VILLAGER = EntityType.register("villager", Builder.of(Villager::new, MobCategory.MISC).sized(0.6f, 1.95f).clientTrackingRange(10));
+    public static final EntityType<Villager> VILLAGER = EntityType.register("villager", Builder.<Villager>of(Villager::new, MobCategory.MISC).sized(0.6f, 1.95f).clientTrackingRange(10)); // MagmaCube - decompile fix
     public static final EntityType<Vindicator> VINDICATOR = EntityType.register("vindicator", Builder.of(Vindicator::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<WanderingTrader> WANDERING_TRADER = EntityType.register("wandering_trader", Builder.of(WanderingTrader::new, MobCategory.CREATURE).sized(0.6f, 1.95f).clientTrackingRange(10));
     public static final EntityType<Witch> WITCH = EntityType.register("witch", Builder.of(Witch::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<WitherBoss> WITHER = EntityType.register("wither", Builder.of(WitherBoss::new, MobCategory.MONSTER).fireImmune().immuneTo(Blocks.WITHER_ROSE).sized(0.9f, 3.5f).clientTrackingRange(10));
     public static final EntityType<WitherSkeleton> WITHER_SKELETON = EntityType.register("wither_skeleton", Builder.of(WitherSkeleton::new, MobCategory.MONSTER).fireImmune().immuneTo(Blocks.WITHER_ROSE).sized(0.7f, 2.4f).clientTrackingRange(8));
-    public static final EntityType<WitherSkull> WITHER_SKULL = EntityType.register("wither_skull", Builder.of(WitherSkull::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<WitherSkull> WITHER_SKULL = EntityType.register("wither_skull", Builder.<WitherSkull>of(WitherSkull::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
     public static final EntityType<Wolf> WOLF = EntityType.register("wolf", Builder.of(Wolf::new, MobCategory.CREATURE).sized(0.6f, 0.85f).clientTrackingRange(10));
     public static final EntityType<Zoglin> ZOGLIN = EntityType.register("zoglin", Builder.of(Zoglin::new, MobCategory.MONSTER).fireImmune().sized(1.3964844f, 1.4f).clientTrackingRange(8));
-    public static final EntityType<Zombie> ZOMBIE = EntityType.register("zombie", Builder.of(Zombie::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
+    public static final EntityType<Zombie> ZOMBIE = EntityType.register("zombie", Builder.<Zombie>of(Zombie::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8)); // MagmaCube - decompile fix
     public static final EntityType<ZombieHorse> ZOMBIE_HORSE = EntityType.register("zombie_horse", Builder.of(ZombieHorse::new, MobCategory.CREATURE).sized(1.3964844f, 1.6f).clientTrackingRange(10));
     public static final EntityType<ZombieVillager> ZOMBIE_VILLAGER = EntityType.register("zombie_villager", Builder.of(ZombieVillager::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<ZombifiedPiglin> ZOMBIFIED_PIGLIN = EntityType.register("zombified_piglin", Builder.of(ZombifiedPiglin::new, MobCategory.MONSTER).fireImmune().sized(0.6f, 1.95f).clientTrackingRange(8));
-    public static final EntityType<Player> PLAYER = EntityType.register("player", Builder.createNothing(MobCategory.MISC).noSave().noSummon().sized(0.6f, 1.8f).clientTrackingRange(32).updateInterval(2));
-    public static final EntityType<FishingHook> FISHING_BOBBER = EntityType.register("fishing_bobber", Builder.createNothing(MobCategory.MISC).noSave().noSummon().sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(5));
+    public static final EntityType<Player> PLAYER = EntityType.register("player", Builder.<Player>createNothing(MobCategory.MISC).noSave().noSummon().sized(0.6f, 1.8f).clientTrackingRange(32).updateInterval(2)); // MagmaCube - decompile fix
+    public static final EntityType<FishingHook> FISHING_BOBBER = EntityType.register("fishing_bobber", Builder.<FishingHook>createNothing(MobCategory.MISC).noSave().noSummon().sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(5)); // MagmaCube - decompile fix
     private final EntityFactory<T> factory;
     private final MobCategory category;
     private final ImmutableSet<Block> immuneTo;
@@ -542,7 +542,7 @@ public class EntityType<T extends Entity> {
         }
 
         public static <T extends Entity> Builder<T> createNothing(MobCategory debug02) {
-            return new Builder<Entity>((debug0, debug1) -> null, debug02);
+            return new Builder<>((debug0, debug1) -> null, debug02); // MagmaCube - decompile fix
         }
 
         public Builder<T> sized(float debug1, float debug2) {
@@ -566,7 +566,7 @@ public class EntityType<T extends Entity> {
         }
 
         public Builder<T> immuneTo(Block ... debug1) {
-            this.immuneTo = ImmutableSet.copyOf((Object[])debug1);
+            this.immuneTo = ImmutableSet.copyOf(debug1); // MagmaCube - decompile fix
             return this;
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 11dcc89b6724a0027fe384f78d4ec717e24a26e4..e6bc3fd7dd12d6f5d4879c7feb3023fdc5390572 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -354,7 +354,7 @@ extends Entity {
                 this.setAirSupply(this.increaseAirSupply(this.getAirSupply()));
             }
             if (!this.level.isClientSide && !Objects.equal((Object)this.lastPos, (Object)(debug3 = this.blockPosition()))) {
-                this.lastPos = debug3;
+                this.lastPos = (BlockPos) debug3; // MagmaCube - decompile fix
                 this.onChangedBlock((BlockPos)debug3);
             }
         }
@@ -576,7 +576,7 @@ extends Entity {
 
     @Override
     public void addAdditionalSaveData(CompoundTag debug12) {
-        DataResult<net.minecraft.nbt.Tag> debug2;
+        // MagmaCube start - decompile fix
         debug12.putFloat("Health", this.getHealth());
         debug12.putShort("HurtTime", (short)this.hurtTime);
         debug12.putInt("HurtByTimestamp", this.lastHurtByMobTimestamp);
@@ -584,11 +584,11 @@ extends Entity {
         debug12.putFloat("AbsorptionAmount", this.getAbsorptionAmount());
         debug12.put("Attributes", this.getAttributes().save());
         if (!this.activeEffects.isEmpty()) {
-            debug2 = new DataResult<net.minecraft.nbt.Tag>();
+            ListTag listTag = new ListTag();
             for (MobEffectInstance debug4 : this.activeEffects.values()) {
-                debug2.add(debug4.save(new CompoundTag()));
+                listTag.add(debug4.save(new CompoundTag()));
             }
-            debug12.put("ActiveEffects", (net.minecraft.nbt.Tag)debug2);
+            debug12.put("ActiveEffects", listTag);
         }
         debug12.putBoolean("FallFlying", this.isFallFlying());
         this.getSleepingPos().ifPresent(debug1 -> {
@@ -596,7 +596,8 @@ extends Entity {
             debug12.putInt("SleepingY", debug1.getY());
             debug12.putInt("SleepingZ", debug1.getZ());
         });
-        debug2 = this.brain.serializeStart(NbtOps.INSTANCE);
+        DataResult<net.minecraft.nbt.Tag> debug2 = this.brain.serializeStart(NbtOps.INSTANCE);
+        // MagmaCube end - decompile fix
         debug2.resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("Brain", (net.minecraft.nbt.Tag)debug1));
     }
 
@@ -628,7 +629,7 @@ extends Entity {
             PlayerTeam debug3 = this.level.getScoreboard().getPlayerTeam((String)debug2);
             boolean bl = debug4 = debug3 != null && this.level.getScoreboard().addPlayerToTeam(this.getStringUUID(), debug3);
             if (!debug4) {
-                LOGGER.warn("Unable to add mob to team Â¥"{}Â¥" (that team probably doesn't exist)", debug2);
+                LOGGER.warn("Unable to add mob to team \"{}\" (that team probably doesn't exist)", debug2);
             }
         }
         if (debug1.getBoolean("FallFlying")) {
@@ -2025,7 +2026,7 @@ extends Entity {
         ItemStack debug2 = debug1.get((Object)EquipmentSlot.MAINHAND);
         ItemStack debug3 = debug1.get((Object)EquipmentSlot.OFFHAND);
         if (debug2 != null && debug3 != null && ItemStack.matches(debug2, this.getLastHandItem(EquipmentSlot.OFFHAND)) && ItemStack.matches(debug3, this.getLastHandItem(EquipmentSlot.MAINHAND))) {
-            ((ServerLevel)this.level).getChunkSource().broadcast(this, new ClientboundEntityEventPacket(this, 55));
+            ((ServerLevel)this.level).getChunkSource().broadcast(this, new ClientboundEntityEventPacket(this, (byte) 55)); // MagmaCube - decompile fix
             debug1.remove((Object)EquipmentSlot.MAINHAND);
             debug1.remove((Object)EquipmentSlot.OFFHAND);
             this.setLastHandItem(EquipmentSlot.MAINHAND, debug2.copy());
@@ -2440,7 +2441,7 @@ extends Entity {
 
     protected void setLivingEntityFlag(int debug1, boolean debug2) {
         int debug3 = this.entityData.get(DATA_LIVING_ENTITY_FLAGS).byteValue();
-        debug3 = debug2 ? (debug3 |= debug1) : (debug3 &= â¾debug1);
+        debug3 = debug2 ? (debug3 |= debug1) : (debug3 &= debug1);
         this.entityData.set(DATA_LIVING_ENTITY_FLAGS, (byte)debug3);
     }
 
@@ -2654,7 +2655,7 @@ extends Entity {
     }
 
     public ImmutableList<Pose> getDismountPoses() {
-        return ImmutableList.of((Object)((Object)Pose.STANDING));
+        return ImmutableList.of(Pose.STANDING); // MagmaCube - decompile fix
     }
 
     public AABB getLocalBoundsForPose(Pose debug1) {
@@ -2707,8 +2708,8 @@ extends Entity {
             if (debug2.getBlock() instanceof BedBlock) {
                 this.level.setBlock((BlockPos)debug1, (BlockState)debug2.setValue(BedBlock.OCCUPIED, false), 3);
                 Vec3 debug3 = BedBlock.findStandUpPosition(this.getType(), this.level, debug1, this.yRot).orElseGet(() -> {
-                    Object debug1 = debug1.above();
-                    return new Vec3((double)debug1.getX() + 0.5, (double)debug1.getY() + 0.1, (double)debug1.getZ() + 0.5);
+                    BlockPos debug12 = debug1.above(); // MagmaCube - decompile fix
+                    return new Vec3((double)debug12.getX() + 0.5, (double)debug12.getY() + 0.1, (double)debug12.getZ() + 0.5); // MagmaCube - decompile fix
                 });
                 Vec3 debug4 = Vec3.atBottomCenterOf(debug1).subtract(debug3).normalize();
                 float debug5 = (float)Mth.wrapDegrees(Mth.atan2(debug4.z, debug4.x) * 57.2957763671875 - 90.0);
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 72036f16f0872002d01912a78302cd85fefc052c..7593ecc5685220e62437e8ab2d525f1dab5cbe1b 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -344,7 +344,7 @@ public abstract class Mob extends LivingEntity
             if (!debug3.isEmpty()) {
                 debug3.save(debug4);
             }
-            ((AbstractList<CompoundTag>)debug2).add(debug4);
+            debug2.add(debug4); // MagmaCube - decompile fix
         }
         debug1.put("ArmorItems", debug2);
         final ListTag debug5 = new ListTag();
@@ -353,17 +353,17 @@ public abstract class Mob extends LivingEntity
             if (!debug6.isEmpty()) {
                 debug6.save(debug7);
             }
-            ((AbstractList<CompoundTag>)debug5).add(debug7);
+            debug5.add(debug7); // MagmaCube - decompile fix
         }
         debug1.put("HandItems", debug5);
         final ListTag debug8 = new ListTag();
         for (final float debug9 : this.armorDropChances) {
-            ((AbstractList<FloatTag>)debug8).add(FloatTag.valueOf(debug9));
+            debug8.add(FloatTag.valueOf(debug9)); // MagmaCube - decompile fix
         }
         debug1.put("ArmorDropChances", debug8);
         final ListTag debug10 = new ListTag();
         for (final float debug11 : this.handDropChances) {
-            ((AbstractList<FloatTag>)debug10).add(FloatTag.valueOf(debug11));
+            debug10.add(FloatTag.valueOf(debug11)); // MagmaCube - decompile fix
         }
         debug1.put("HandDropChances", debug10);
         if (this.leashHolder != null) {
@@ -1074,7 +1074,7 @@ public abstract class Mob extends LivingEntity
         if (this.level instanceof ServerLevel) {
             final SpawnEggItem debug5 = (SpawnEggItem)debug3.getItem();
             final Optional<Mob> debug6 = debug5.spawnOffspringFromSpawnEgg(debug1, this, (EntityType<? extends Mob>)this.getType(), (ServerLevel)this.level, this.position(), debug3);
-            debug6.ifPresent(debug2 -> this.onOffspringSpawnedFromEgg(debug1, debug2));
+            debug6.ifPresent(debug2l -> this.onOffspringSpawnedFromEgg(debug1, debug2l)); // MagmaCube - decompile fix
             return debug6.isPresent() ? InteractionResult.SUCCESS : InteractionResult.PASS;
         }
         return InteractionResult.CONSUME;
diff --git a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
index 1dce487c3958a48bcde8044bef0e681b83253a7e..47c299ef13a62cfce18b89328f41fe696c99e5ea 100644
--- a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
+++ b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
@@ -58,7 +58,7 @@ public class SpawnPlacements
     
     public static <T extends Entity> boolean checkSpawnRules(final EntityType<T> debug0, final ServerLevelAccessor debug1, final MobSpawnType debug2, final BlockPos debug3, final Random debug4) {
         final Data debug5 = SpawnPlacements.DATA_BY_TYPE.get(debug0);
-        return debug5 == null || debug5.predicate.test(debug0, debug1, debug2, debug3, debug4);
+        return debug5 == null || debug5.predicate.test((EntityType) debug0, debug1, debug2, debug3, debug4); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/world/entity/ai/Brain.java b/src/main/java/net/minecraft/world/entity/ai/Brain.java
index bc413e1a25d62815ae4909f276487577c559c05f..7f65b6b5678a8a9b37c5b94e36defa5edaef313a 100644
--- a/src/main/java/net/minecraft/world/entity/ai/Brain.java
+++ b/src/main/java/net/minecraft/world/entity/ai/Brain.java
@@ -63,48 +63,49 @@ public class Brain<E extends LivingEntity>
     }
     
     public static <E extends LivingEntity> Codec<Brain<E>> codec(final Collection<? extends MemoryModuleType<?>> debug0, final Collection<? extends SensorType<? extends Sensor<? super E>>> debug1) {
-        final MutableObject<Codec<Brain<E>>> debug2 = (MutableObject<Codec<Brain<E>>>)new MutableObject();
-        debug2.setValue((Object)new MapCodec<Brain<E>>() {
+        // MagmaCube start - decompile fix
+        final MutableObject<Codec<Brain<E>>> mutableObject = (MutableObject<Codec<Brain<E>>>)new MutableObject();
+        mutableObject.setValue(new MapCodec<Brain<E>>() {
             public <T> Stream<T> keys(final DynamicOps<T> debug1) {
-                return debug0.stream().flatMap(debug0 -> Util.toStream((Optional<?>)debug0.getCodec().map(debug1 -> Registry.MEMORY_MODULE_TYPE.getKey(debug0)))).map(debug1 -> debug1.createString(debug1.toString()));
+                return debug0.stream().flatMap(debug0 -> Util.toStream((Optional<?>)debug0.getCodec().map(debug1l -> Registry.MEMORY_MODULE_TYPE.getKey(debug0)))).map(debug1l -> debug1.createString(debug1l.toString())); // MagmaCube - decompile fix
             }
             
-            public <T> DataResult<Brain<E>> decode(final DynamicOps<T> debug1, final MapLike<T> debug2) {
-                final MutableObject<DataResult<ImmutableList.Builder<MemoryValue<?>>>> debug4 = (MutableObject<DataResult<ImmutableList.Builder<MemoryValue<?>>>>)new MutableObject((Object)DataResult.success((Object)ImmutableList.builder()));
-                final DataResult<MemoryModuleType<?>> debug5;
-                final DataResult<? extends MemoryValue<?>> debug6;
-                final MutableObject mutableObject;
+            public <T> DataResult<Brain<E>> decode(final DynamicOps<T> debug1_2, final MapLike<T> debug2) {
+                final MutableObject<DataResult<ImmutableList.Builder<MemoryValue<?>>>> debug4 = new MutableObject<>(DataResult.success(ImmutableList.builder()));
                 debug2.entries().forEach(debug3 -> {
-                    debug5 = (DataResult<MemoryModuleType<?>>)Registry.MEMORY_MODULE_TYPE.parse((DynamicOps)debug1, debug3.getFirst());
-                    debug6 = (DataResult<? extends MemoryValue<?>>)debug5.flatMap(debug3 -> this.captureRead(debug3, (com.mojang.serialization.DynamicOps<Object>)debug1, debug3.getSecond()));
-                    mutableObject.setValue((Object)((DataResult)mutableObject.getValue()).apply2((BiFunction)ImmutableList.Builder::add, (DataResult)debug6));
+                    DataResult<MemoryModuleType<?>> debug5 = Registry.MEMORY_MODULE_TYPE.parse(debug1_2, debug3.getFirst());
+                    DataResult<? extends MemoryValue<?>> debug6 = debug5.flatMap(debug3l -> this.captureRead(debug3l, debug1_2, debug3.getSecond()));
+                    debug4.setValue(debug4.getValue().apply2(ImmutableList.Builder::add, debug6));
                     return;
                 });
-                final ImmutableList<MemoryValue<?>> debug7 = (ImmutableList<MemoryValue<?>>)((DataResult)debug4.getValue()).resultOrPartial((Consumer)Brain.LOGGER::error).map(ImmutableList.Builder::build).orElseGet(ImmutableList::of);
-                return (DataResult<Brain<E>>)DataResult.success((Object)new Brain(debug0, debug1, debug7, debug2::getValue));
+                final ImmutableList<MemoryValue<?>> debug7 = debug4.getValue().resultOrPartial(Brain.LOGGER::error).map(ImmutableList.Builder::build).orElseGet(ImmutableList::of);
+                return DataResult.success(new Brain(debug0, debug1, debug7, mutableObject::getValue));
+                // MagmaCube end - decompile fix
             }
             
             private <T, U> DataResult<MemoryValue<U>> captureRead(final MemoryModuleType<U> debug1, final DynamicOps<T> debug2, final T debug3) {
-                return (DataResult<MemoryValue<U>>)debug1.getCodec().map((Function<? super com.mojang.serialization.Codec<ExpirableValue<U>>, ? extends DataResult>)DataResult::success).orElseGet(() -> DataResult.error("No codec for memory: " + debug1)).flatMap(debug2 -> debug2.parse((DynamicOps)debug2, (Object)debug3)).map(debug1 -> new MemoryValue((MemoryModuleType)debug1, (Optional)Optional.of(debug1)));
+                return debug1.getCodec().map(DataResult::success).orElseGet(() -> DataResult.error("No codec for memory: " + debug1)).flatMap(debug2l -> debug2l.parse(debug2, debug3)).map(debug1l -> new MemoryValue((MemoryModuleType)debug1, (Optional)Optional.of(debug1l))); // MagmaCube - decompile fix
             }
             
             public <T> RecordBuilder<T> encode(final Brain<E> debug1, final DynamicOps<T> debug2, final RecordBuilder<T> debug3) {
-                ((Brain<LivingEntity>)debug1).memories().forEach(debug2 -> debug2.serialize(debug2, debug3));
+                ((Brain<LivingEntity>)debug1).memories().forEach(debug2l -> debug2l.serialize(debug2, debug3)); // MagmaCube - decompile fix
                 return debug3;
             }
         }.fieldOf("memories").codec());
-        return (Codec<Brain<E>>)debug2.getValue();
+        return (Codec<Brain<E>>)mutableObject.getValue(); // MagmaCube - decompile fix
     }
     
     public Brain(final Collection<? extends MemoryModuleType<?>> debug1, final Collection<? extends SensorType<? extends Sensor<? super E>>> debug2, final ImmutableList<MemoryValue<?>> debug3, final Supplier<Codec<Brain<E>>> debug4) {
-        this.memories = (Map<MemoryModuleType<?>, Optional<? extends ExpirableValue<?>>>)Maps.newHashMap();
-        this.sensors = (Map<SensorType<? extends Sensor<? super E>>, Sensor<? super E>>)Maps.newLinkedHashMap();
-        this.availableBehaviorsByPriority = (Map<Integer, Map<Activity, Set<Behavior<? super E>>>>)Maps.newTreeMap();
+        // MagmaCube start - decompile fix
+        this.memories = Maps.newHashMap();
+        this.sensors = Maps.newLinkedHashMap();
+        this.availableBehaviorsByPriority = Maps.newTreeMap();
         this.schedule = Schedule.EMPTY;
-        this.activityRequirements = (Map<Activity, Set<Pair<MemoryModuleType<?>, MemoryStatus>>>)Maps.newHashMap();
-        this.activityMemoriesToEraseWhenStopped = (Map<Activity, Set<MemoryModuleType<?>>>)Maps.newHashMap();
-        this.coreActivities = (Set<Activity>)Sets.newHashSet();
-        this.activeActivities = (Set<Activity>)Sets.newHashSet();
+        this.activityRequirements = Maps.newHashMap();
+        this.activityMemoriesToEraseWhenStopped = Maps.newHashMap();
+        this.coreActivities = Sets.newHashSet();
+        this.activeActivities = Sets.newHashSet();
+        // MagmaCube end - decompile fix
         this.defaultActivity = Activity.IDLE;
         this.lastScheduleUpdate = -9999L;
         this.codec = debug4;
@@ -125,11 +126,11 @@ public class Brain<E extends LivingEntity>
     }
     
     public <T> DataResult<T> serializeStart(final DynamicOps<T> debug1) {
-        return (DataResult<T>)this.codec.get().encodeStart((DynamicOps)debug1, (Object)this);
+        return (DataResult<T>)this.codec.get().encodeStart((DynamicOps)debug1, this); // MagmaCube - decompile fix
     }
     
     private Stream<MemoryValue<?>> memories() {
-        return this.memories.entrySet().stream().map(debug0 -> createUnchecked((MemoryModuleType<Object>)debug0.getKey(), (Optional)debug0.getValue()));
+        return this.memories.entrySet().stream().map(debug0 -> MemoryValue.createUnchecked((MemoryModuleType<Object>)debug0.getKey(), (Optional)debug0.getValue())); // MagmaCube - decompile fix
     }
     
     public boolean hasMemoryValue(final MemoryModuleType<?> debug1) {
@@ -164,11 +165,11 @@ public class Brain<E extends LivingEntity>
     }
     
     public <U> Optional<U> getMemory(final MemoryModuleType<U> debug1) {
-        return this.memories.get(debug1).map((Function<? super ExpirableValue<?>, ? extends U>)ExpirableValue::getValue);
+        return (Optional<U>) this.memories.get(debug1).map(ExpirableValue::getValue); // MagmaCube - decompile fix
     }
     
     public <U> boolean isMemoryValue(final MemoryModuleType<U> debug1, final U debug2) {
-        return this.hasMemoryValue(debug1) && this.getMemory(debug1).filter(debug1 -> debug1.equals(debug2)).isPresent();
+        return this.hasMemoryValue(debug1) && this.getMemory(debug1).filter(debug1l -> debug1l.equals(debug2)).isPresent(); // MagmaCube - decompile fix
     }
     
     public boolean checkMemory(final MemoryModuleType<?> debug1, final MemoryStatus debug2) {
@@ -277,13 +278,13 @@ public class Brain<E extends LivingEntity>
     }
     
     public void addActivityAndRemoveMemoryWhenStopped(final Activity debug1, final int debug2, final ImmutableList<? extends Behavior<? super E>> debug3, final MemoryModuleType<?> debug4) {
-        final Set<Pair<MemoryModuleType<?>, MemoryStatus>> debug5 = (Set<Pair<MemoryModuleType<?>, MemoryStatus>>)ImmutableSet.of((Object)Pair.of((Object)debug4, (Object)MemoryStatus.VALUE_PRESENT));
-        final Set<MemoryModuleType<?>> debug6 = (Set<MemoryModuleType<?>>)ImmutableSet.of((Object)debug4);
+        final Set<Pair<MemoryModuleType<?>, MemoryStatus>> debug5 = ImmutableSet.of(Pair.of(debug4, MemoryStatus.VALUE_PRESENT)); // MagmaCube - decompile fix
+        final Set<MemoryModuleType<?>> debug6 = ImmutableSet.of(debug4); // MagmaCube - decompile fix
         this.addActivityAndRemoveMemoriesWhenStopped(debug1, this.createPriorityPairs(debug2, debug3), debug5, debug6);
     }
     
     public void addActivity(final Activity debug1, final ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>> debug2) {
-        this.addActivityAndRemoveMemoriesWhenStopped(debug1, debug2, (Set<Pair<MemoryModuleType<?>, MemoryStatus>>)ImmutableSet.of(), Sets.newHashSet());
+        this.addActivityAndRemoveMemoriesWhenStopped(debug1, debug2, ImmutableSet.of(), Sets.newHashSet()); // MagmaCube - decompile fix
     }
     
     public void addActivityWithConditions(final Activity debug1, final ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>> debug2, final Set<Pair<MemoryModuleType<?>, MemoryStatus>> debug3) {
@@ -305,7 +306,7 @@ public class Brain<E extends LivingEntity>
     }
     
     public Brain<E> copyWithoutBehaviors() {
-        final Brain<E> debug1 = new Brain<E>(this.memories.keySet(), this.sensors.keySet(), (ImmutableList<MemoryValue<?>>)ImmutableList.of(), this.codec);
+        final Brain<E> debug1 = new Brain<E>(this.memories.keySet(), this.sensors.keySet(), ImmutableList.of(), this.codec); // MagmaCube - decompile fix
         for (final Map.Entry<MemoryModuleType<?>, Optional<? extends ExpirableValue<?>>> debug2 : this.memories.entrySet()) {
             final MemoryModuleType<?> debug3 = debug2.getKey();
             if (debug2.getValue().isPresent()) {
@@ -324,7 +325,7 @@ public class Brain<E extends LivingEntity>
     
     private void tickSensors(final ServerLevel debug1, final E debug2) {
         for (final Sensor<? super E> debug3 : this.sensors.values()) {
-            debug3.tick(debug1, (Object)debug2);
+            debug3.tick(debug1, debug2); // MagmaCube - decompile fix
         }
     }
     
@@ -344,7 +345,7 @@ public class Brain<E extends LivingEntity>
     public void stopAll(final ServerLevel debug1, final E debug2) {
         final long debug3 = debug2.level.getGameTime();
         for (final Behavior<? super E> debug4 : this.getRunningBehaviors()) {
-            debug4.doStop(debug1, (Object)debug2, debug3);
+            debug4.doStop(debug1, debug2, debug3); // MagmaCube - decompile fix
         }
     }
     
@@ -357,7 +358,7 @@ public class Brain<E extends LivingEntity>
                     final Set<Behavior<? super E>> debug7 = debug5.getValue();
                     for (final Behavior<? super E> debug8 : debug7) {
                         if (debug8.getStatus() == Behavior.Status.STOPPED) {
-                            debug8.tryStart(debug1, (Object)debug2, debug3);
+                            debug8.tryStart(debug1, debug2, debug3); // MagmaCube - decompile fix
                         }
                     }
                 }
@@ -368,7 +369,7 @@ public class Brain<E extends LivingEntity>
     private void tickEachRunningBehavior(final ServerLevel debug1, final E debug2) {
         final long debug3 = debug1.getGameTime();
         for (final Behavior<? super E> debug4 : this.getRunningBehaviors()) {
-            debug4.tickOrStop(debug1, (Object)debug2, debug3);
+            debug4.tickOrStop(debug1, debug2, debug3); // MagmaCube - decompile fix
         }
     }
     
@@ -392,9 +393,9 @@ public class Brain<E extends LivingEntity>
     
     ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>> createPriorityPairs(final int debug1, final ImmutableList<? extends Behavior<? super E>> debug2) {
         int debug3 = debug1;
-        final ImmutableList.Builder<Pair<Integer, ? extends Behavior<? super E>>> debug4 = (ImmutableList.Builder<Pair<Integer, ? extends Behavior<? super E>>>)ImmutableList.builder();
+        final ImmutableList.Builder<Pair<Integer, ? extends Behavior<? super E>>> debug4 = ImmutableList.builder(); // MagmaCube - decompile fix
         for (final Behavior<? super E> debug5 : debug2) {
-            debug4.add((Object)Pair.of((Object)(debug3++), (Object)debug5));
+            debug4.add(Pair.of(debug3++, debug5)); // MagmaCube - decompile fix
         }
         return (ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>>)debug4.build();
     }
@@ -416,7 +417,7 @@ public class Brain<E extends LivingEntity>
         }
         
         public Brain<E> makeBrain(final Dynamic<?> debug1) {
-            return this.codec.parse((Dynamic)debug1).resultOrPartial((Consumer)Brain.LOGGER::error).orElseGet(() -> new Brain(this.memoryTypes, (Collection<? extends SensorType<? extends Sensor<? super LivingEntity>>>)this.sensorTypes, (ImmutableList<MemoryValue<?>>)ImmutableList.of(), () -> this.codec));
+            return this.codec.parse(debug1).resultOrPartial(Brain.LOGGER::error).orElseGet(() -> new Brain(this.memoryTypes, this.sensorTypes, ImmutableList.of(), () -> this.codec)); // MagmaCube - decompile fix
         }
     }
     
@@ -439,7 +440,7 @@ public class Brain<E extends LivingEntity>
         }
         
         public <T> void serialize(final DynamicOps<T> debug1, final RecordBuilder<T> debug2) {
-            this.type.getCodec().ifPresent(debug3 -> this.value.ifPresent(debug4 -> debug2.add(Registry.MEMORY_MODULE_TYPE.encodeStart((DynamicOps)debug1, (Object)this.type), debug3.encodeStart((DynamicOps)debug1, (Object)debug4))));
+            this.type.getCodec().ifPresent(debug3 -> this.value.ifPresent(debug4 -> debug2.add(Registry.MEMORY_MODULE_TYPE.encodeStart((DynamicOps)debug1, this.type), debug3.encodeStart((DynamicOps)debug1, debug4)))); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
index 523f1d0d816ef736b98f2e9825d4fbd509c34a3d..2a9494c3eee753a28dad9721fedd344d42037efe 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
@@ -159,7 +159,7 @@ public class AttributeInstance
         this.permanentModifiers.clear();
         this.permanentModifiers.addAll(debug1.permanentModifiers);
         this.modifiersByOperation.clear();
-        debug1.modifiersByOperation.forEach((debug1, debug2) -> this.getModifiers(debug1).addAll(debug2));
+        debug1.modifiersByOperation.forEach((debug1l, debug2) -> this.getModifiers(debug1l).addAll(debug2)); // MagmaCube - decompile fix
         this.setDirty();
     }
     
@@ -170,7 +170,7 @@ public class AttributeInstance
         if (!this.permanentModifiers.isEmpty()) {
             final ListTag debug2 = new ListTag();
             for (final AttributeModifier debug3 : this.permanentModifiers) {
-                ((AbstractList<CompoundTag>)debug2).add(debug3.save());
+                debug2.add(debug3.save()); // MagmaCube - decompile fix
             }
             debug1.put("Modifiers", debug2);
         }
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java
index 87bd8ef59a9e360bb9bcd594b30a5b4aeb1e4910..88d4fe50311a027e3e8f7302bec9946642e97b0b 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java
@@ -126,9 +126,9 @@ public class AttributeMap {
             CompoundTag debug3 = debug1.getCompound(debug22);
             String debug4 = debug3.getString("Name");
             Util.ifElse(Registry.ATTRIBUTE.getOptional(ResourceLocation.tryParse(debug4)), debug2 -> {
-                AttributeInstance debug3 = this.getInstance((Attribute)debug2);
-                if (debug3 != null) {
-                    debug3.load(debug3);
+                AttributeInstance debug3l = this.getInstance((Attribute)debug2); // MagmaCube - decompile fix
+                if (debug3l != null) { // MagmaCube - decompile fix
+                    debug3l.load(debug3); // MagmaCube - decompile fix
                 }
             }, () -> LOGGER.warn("Ignoring unknown attribute '{}'", (Object)debug4));
         }
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java
index af6e39a19ad3122b384afd104f6c5e9f9c8e0297..2318552363eaf7d65556f546ee944e72fb89f087 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java
@@ -69,7 +69,7 @@ public class AttributeModifier
     
     @Override
     public String toString() {
-        return "AttributeModifier{amount=" + this.amount + ", operation=" + this.operation + ", name='" + this.nameGetter.get() + 'Â¥'' + ", id=" + this.id + '}';
+        return "AttributeModifier{amount=" + this.amount + ", operation=" + this.operation + ", name='" + this.nameGetter.get() + '\'' + ", id=" + this.id + '}'; // MagmaCube - decompile fix
     }
     
     public CompoundTag save() {
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeSupplier.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeSupplier.java
index 169ad662722db3ff01b6d8c9a0ba49d23b7e2d6e..e98064bd0a6592dc218c4cb2d9f1b1804a5e22a3 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeSupplier.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeSupplier.java
@@ -70,15 +70,14 @@ public class AttributeSupplier
         private boolean instanceFrozen;
         
         public Builder() {
-            this.builder = (Map<Attribute, AttributeInstance>)Maps.newHashMap();
+            this.builder = Maps.newHashMap(); // MagmaCube - decompile fix
         }
         
         private AttributeInstance create(final Attribute debug1) {
             final UnsupportedOperationException ex;
-            final AttributeInstance debug2 = new AttributeInstance(debug1, debug2 -> {
+            final AttributeInstance debug2 = new AttributeInstance(debug1, debug2l -> {
                 if (this.instanceFrozen) {
-                    new UnsupportedOperationException("Tried to change value for default attribute instance: " + Registry.ATTRIBUTE.getKey(debug1));
-                    throw ex;
+                    throw new UnsupportedOperationException("Tried to change value for default attribute instance: " + Registry.ATTRIBUTE.getKey(debug1)); // MagmaCube - decompile fix
                 }
                 else {
                     return;
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
index a4f99fd645ce336d24e7789802f66705317303cf..548745e7dc2ccfa35df8299ad18166f8f355faf9 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
@@ -86,10 +86,9 @@ public class DefaultAttributes
     
     public static void validate() {
         final IllegalStateException ex;
-        Registry.ENTITY_TYPE.stream().filter(debug0 -> debug0.getCategory() != MobCategory.MISC).filter(debug0 -> !hasSupplier(debug0)).map((Function<? super Object, ?>)Registry.ENTITY_TYPE::getKey).forEach(debug0 -> {
+        Registry.ENTITY_TYPE.stream().filter(debug0 -> debug0.getCategory() != MobCategory.MISC).filter(debug0 -> !hasSupplier(debug0)).map(Registry.ENTITY_TYPE::getKey).forEach(debug0 -> { // MagmaCube - decompile fix
             if (SharedConstants.IS_RUNNING_IN_IDE) {
-                new IllegalStateException("Entity " + debug0 + " has no attributes");
-                throw ex;
+                throw new IllegalStateException("Entity " + debug0 + " has no attributes"); // MagmaCube - decompile fix
             }
             else {
                 DefaultAttributes.LOGGER.error("Entity {} has no attributes", (Object)debug0);
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java b/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
index 51586e3f707eda2303bd804ee508959c7ef88052..c84bea05a422ea1a75143ea5a1babb0246caec40 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
@@ -93,7 +93,7 @@ extends Behavior<PathfinderMob> {
         if (debug8 != null && debug8.canReach()) {
             BlockPos debug9 = debug8.getTarget();
             debug52.getType(debug9).ifPresent(debug5 -> {
-                debug52.take(this.poiType.getPredicate(), debug1 -> debug1.equals(debug9), debug9, 1);
+                debug52.take(this.poiType.getPredicate(), debug1l -> debug1l.equals(debug9), debug9, 1); // MagmaCube - decompile fix
                 debug22.getBrain().setMemory(this.memoryToAcquire, GlobalPos.of(debug1.dimension(), debug9));
                 this.onPoiAcquisitionEvent.ifPresent(debug2 -> debug1.broadcastEntityEvent(debug22, (byte)debug2));
                 this.batchCache.clear();
@@ -101,7 +101,7 @@ extends Behavior<PathfinderMob> {
             });
         } else {
             for (BlockPos debug10 : debug7) {
-                this.batchCache.computeIfAbsent(debug10.asLong(), debug3 -> new JitteredLinearRetry(debug0.level.random, debug32));
+                this.batchCache.computeIfAbsent(debug10.asLong(), debug3 -> new JitteredLinearRetry(debug1.random, debug32)); // MagmaCube - decompile fix
             }
         }
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalMakeLove.java b/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalMakeLove.java
index bf1f288300bed3107ea499c163cb781e5c70d8c4..473ad5a61962349303926f229a6d880515b2a955 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalMakeLove.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalMakeLove.java
@@ -74,7 +74,7 @@ public class AnimalMakeLove extends Behavior<Animal>
     }
     
     private Animal getBreedTarget(final Animal debug1) {
-        return debug1.getBrain().getMemory((MemoryModuleType<Animal>)MemoryModuleType.BREED_TARGET).get();
+        return (Animal) debug1.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get(); // MagmaCube - decompile fix
     }
     
     private boolean hasBreedTargetOfRightType(final Animal debug1) {
@@ -83,6 +83,6 @@ public class AnimalMakeLove extends Behavior<Animal>
     }
     
     private Optional<? extends Animal> findValidBreedPartner(final Animal debug1) {
-        return (Optional<? extends Animal>)debug1.getBrain().getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).get().stream().filter(debug1 -> debug1.getType() == this.partnerType).map(debug0 -> debug0).filter((Predicate<? super Object>)debug1::canMate).findFirst();
+        return (Optional<? extends Animal>)debug1.getBrain().getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).get().stream().filter(debug1l -> debug1l.getType() == this.partnerType).map(debug0 -> (Animal) debug0).filter(debug1::canMate).findFirst(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/AssignProfessionFromJobSite.java b/src/main/java/net/minecraft/world/entity/ai/behavior/AssignProfessionFromJobSite.java
index efeb9288358e1dcffc28ee4359ebb06dbee73de3..f5c7683f673af8c8e8831de22cb441aab6f09f05 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/AssignProfessionFromJobSite.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/AssignProfessionFromJobSite.java
@@ -23,7 +23,7 @@ import net.minecraft.world.entity.npc.VillagerProfession;
 public class AssignProfessionFromJobSite
 extends Behavior<Villager> {
     public AssignProfessionFromJobSite() {
-        super((Map<MemoryModuleType<?>, MemoryStatus>)ImmutableMap.of(MemoryModuleType.POTENTIAL_JOB_SITE, (Object)((Object)MemoryStatus.VALUE_PRESENT)));
+        super(ImmutableMap.of(MemoryModuleType.POTENTIAL_JOB_SITE, (MemoryStatus.VALUE_PRESENT))); // MagmaCube - decompile fix
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/CelebrateVillagersSurvivedRaid.java b/src/main/java/net/minecraft/world/entity/ai/behavior/CelebrateVillagersSurvivedRaid.java
index 7f7f81baf8a431ace59c66f09057100b33bad085..f4805ca2ba9ca83989d4703c5f877135c68ec7e9 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/CelebrateVillagersSurvivedRaid.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/CelebrateVillagersSurvivedRaid.java
@@ -70,7 +70,7 @@ public class CelebrateVillagersSurvivedRaid extends Behavior<Villager>
         final ItemStack debug3 = new ItemStack(Items.FIREWORK_ROCKET, 1);
         final ItemStack debug4 = new ItemStack(Items.FIREWORK_STAR);
         final CompoundTag debug5 = debug4.getOrCreateTagElement("Explosion");
-        final List<Integer> debug6 = (List<Integer>)Lists.newArrayList();
+        final List<Integer> debug6 = Lists.newArrayList(); // MagmaCube - decompile fix
         debug6.add(debug1.getFireworkColor());
         debug5.putIntArray("Colors", debug6);
         debug5.putByte("Type", (byte)FireworkRocketItem.Shape.BURST.getId());
@@ -78,7 +78,7 @@ public class CelebrateVillagersSurvivedRaid extends Behavior<Villager>
         final ListTag debug8 = new ListTag();
         final CompoundTag debug9 = debug4.getTagElement("Explosion");
         if (debug9 != null) {
-            ((AbstractList<CompoundTag>)debug8).add(debug9);
+            debug8.add(debug9); // MagmaCube - decompile fix
         }
         debug7.putByte("Flight", (byte)debug2);
         if (!debug8.isEmpty()) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/CrossbowAttack.java b/src/main/java/net/minecraft/world/entity/ai/behavior/CrossbowAttack.java
index 1ef371f9bb4d4b86e463463154acbcba046520dd..ff1ca5771406e9d16dd186cb4493a2ad5d08eb3c 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/CrossbowAttack.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/CrossbowAttack.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.ai.behavior;
 
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.entity.monster.RangedAttackMob;
 import net.minecraft.world.entity.projectile.ProjectileUtil;
@@ -87,7 +88,7 @@ public class CrossbowAttack<E extends Mob, T extends LivingEntity> extends Behav
     }
     
     private void lookAtTarget(final Mob debug1, final LivingEntity debug2) {
-        debug1.getBrain().setMemory((MemoryModuleType<EntityTracker>)MemoryModuleType.LOOK_TARGET, new EntityTracker(debug2, true));
+        debug1.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, new EntityTracker(debug2, true)); // MagmaCube - decompile fix
     }
     
     private static LivingEntity getAttackTarget(final LivingEntity debug0) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/GiveGiftToHero.java b/src/main/java/net/minecraft/world/entity/ai/behavior/GiveGiftToHero.java
index 355aa270c586c257ccbde67c232b3a0035733339..ced4dcce7e20fffd3270f627cd5ea02ffd21144c 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/GiveGiftToHero.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/GiveGiftToHero.java
@@ -57,7 +57,7 @@ extends Behavior<Villager> {
     private long timeSinceStart;
 
     public GiveGiftToHero(int debug1) {
-        super((Map<MemoryModuleType<?>, MemoryStatus>)ImmutableMap.of(MemoryModuleType.WALK_TARGET, (Object)((Object)MemoryStatus.REGISTERED), MemoryModuleType.LOOK_TARGET, (Object)((Object)MemoryStatus.REGISTERED), MemoryModuleType.INTERACTION_TARGET, (Object)((Object)MemoryStatus.REGISTERED), MemoryModuleType.NEAREST_VISIBLE_PLAYER, (Object)((Object)MemoryStatus.VALUE_PRESENT)), debug1);
+        super(ImmutableMap.of(MemoryModuleType.WALK_TARGET, (MemoryStatus.REGISTERED), MemoryModuleType.LOOK_TARGET, (MemoryStatus.REGISTERED), MemoryModuleType.INTERACTION_TARGET, (MemoryStatus.REGISTERED), MemoryModuleType.NEAREST_VISIBLE_PLAYER, (MemoryStatus.VALUE_PRESENT)), debug1); // MagmaCube - decompile fix
     }
 
     @Override
@@ -117,7 +117,7 @@ extends Behavior<Villager> {
 
     private List<ItemStack> getItemToThrow(Villager debug1) {
         if (debug1.isBaby()) {
-            return ImmutableList.of((Object)new ItemStack(Items.POPPY));
+            return ImmutableList.of(new ItemStack(Items.POPPY));
         }
         VillagerProfession debug2 = debug1.getVillagerData().getProfession();
         if (gifts.containsKey(debug2)) {
@@ -125,7 +125,7 @@ extends Behavior<Villager> {
             LootContext.Builder debug4 = new LootContext.Builder((ServerLevel)debug1.level).withParameter(LootContextParams.ORIGIN, debug1.position()).withParameter(LootContextParams.THIS_ENTITY, debug1).withRandom(debug1.getRandom());
             return debug3.getRandomItems(debug4.create(LootContextParamSets.GIFT));
         }
-        return ImmutableList.of((Object)new ItemStack(Items.WHEAT_SEEDS));
+        return ImmutableList.of(new ItemStack(Items.WHEAT_SEEDS));
     }
 
     private boolean isHeroVisible(Villager debug1) {
@@ -149,15 +149,5 @@ extends Behavior<Villager> {
     private static int calculateTimeUntilNextGift(ServerLevel debug0) {
         return 600 + debug0.random.nextInt(6001);
     }
-
-    @Override
-    protected /* synthetic */ void stop(ServerLevel serverLevel, LivingEntity livingEntity, long l) {
-        this.stop(serverLevel, (Villager)livingEntity, l);
-    }
-
-    @Override
-    protected /* synthetic */ void tick(ServerLevel serverLevel, LivingEntity livingEntity, long l) {
-        this.tick(serverLevel, (Villager)livingEntity, l);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/InsideBrownianWalk.java b/src/main/java/net/minecraft/world/entity/ai/behavior/InsideBrownianWalk.java
index a69c422d1f15d38230d69a4ff42774622e214283..6d07751e5da02e980c256c52aabd6f7cedeae031 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/InsideBrownianWalk.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/InsideBrownianWalk.java
@@ -25,7 +25,7 @@ extends Behavior<PathfinderMob> {
     private final float speedModifier;
 
     public InsideBrownianWalk(float debug1) {
-        super((Map<MemoryModuleType<?>, MemoryStatus>)ImmutableMap.of(MemoryModuleType.WALK_TARGET, (Object)((Object)MemoryStatus.VALUE_ABSENT)));
+        super(ImmutableMap.of(MemoryModuleType.WALK_TARGET, (MemoryStatus.VALUE_ABSENT))); // MagmaCube - decompile fix
         this.speedModifier = debug1;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWithDoor.java b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWithDoor.java
index 495a44b4a4b4bd07bf4e3d95d55f62c68c17772e..0e8380a9e3b9a06aa511d7417ec225d84a93d1dc 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWithDoor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWithDoor.java
@@ -120,7 +120,7 @@ public class InteractWithDoor extends Behavior<LivingEntity>
     
     private static boolean areOtherMobsComingThroughDoor(final ServerLevel debug0, final LivingEntity debug1, final BlockPos debug2) {
         final Brain<?> debug3 = debug1.getBrain();
-        return debug3.hasMemoryValue(MemoryModuleType.LIVING_ENTITIES) && debug3.getMemory(MemoryModuleType.LIVING_ENTITIES).get().stream().filter(debug1 -> debug1.getType() == debug1.getType()).filter(debug1 -> debug2.closerThan(debug1.position(), 2.0)).anyMatch(debug2 -> isMobComingThroughDoor(debug0, debug2, debug2));
+        return debug3.hasMemoryValue(MemoryModuleType.LIVING_ENTITIES) && debug3.getMemory(MemoryModuleType.LIVING_ENTITIES).get().stream().filter(debug1l -> debug1l.getType() == debug1l.getType()).filter(debug1l -> debug2.closerThan(debug1l.position(), 2.0)).anyMatch(debug2l -> isMobComingThroughDoor(debug0, debug2l, debug2)); // MagmaCube - decompile fix
     }
     
     private static boolean isMobComingThroughDoor(final ServerLevel debug0, final LivingEntity debug1, final BlockPos debug2) {
@@ -150,7 +150,7 @@ public class InteractWithDoor extends Behavior<LivingEntity>
             debug4.getMemory(MemoryModuleType.DOORS_TO_CLOSE).get().add(debug5);
         }
         else {
-            debug4.setMemory((MemoryModuleType<HashSet>)MemoryModuleType.DOORS_TO_CLOSE, Sets.newHashSet((Object[])new GlobalPos[] { debug5 }));
+            debug4.setMemory(MemoryModuleType.DOORS_TO_CLOSE, Sets.newHashSet(new GlobalPos[] { debug5 })); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/JumpOnBed.java b/src/main/java/net/minecraft/world/entity/ai/behavior/JumpOnBed.java
index 293aaf6e1035d728ec01476afbc48c90bf5b857d..72431ae468a20b91d1d7a83b337adcf52fbcb533 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/JumpOnBed.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/JumpOnBed.java
@@ -37,12 +37,12 @@ public class JumpOnBed extends Behavior<Mob>
     @Override
     protected void start(final ServerLevel debug1, final Mob debug2, final long debug3) {
         super.start(debug1, debug2, debug3);
-        this.getNearestBed(debug2).ifPresent(debug3 -> {
-            this.targetBed = debug3;
+        this.getNearestBed(debug2).ifPresent(debug3l -> { // MagmaCube - decompile fix
+            this.targetBed = debug3l; // MagmaCube - decompile fix
             this.remainingTimeToReachBed = 100;
             this.remainingJumps = 3 + debug1.random.nextInt(4);
             this.remainingCooldownUntilNextJump = 0;
-            this.startWalkingTowardsBed(debug2, debug3);
+            this.startWalkingTowardsBed(debug2, debug3l); // MagmaCube - decompile fix
         });
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/MeleeAttack.java b/src/main/java/net/minecraft/world/entity/ai/behavior/MeleeAttack.java
index 12c989ad7ec36cd414ac08d509d83b888187593b..85ea711dfde35e5a7b5446f102638a07daf153ef 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/MeleeAttack.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/MeleeAttack.java
@@ -28,7 +28,7 @@ public class MeleeAttack extends Behavior<Mob>
     }
     
     private boolean isHoldingUsableProjectileWeapon(final Mob debug1) {
-        return debug1.isHolding(debug1 -> debug1 instanceof ProjectileWeaponItem && debug1.canFireProjectileWeapon(debug1));
+        return debug1.isHolding(debug1l -> debug1l instanceof ProjectileWeaponItem && debug1.canFireProjectileWeapon((ProjectileWeaponItem) debug1l)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/MoveToSkySeeingSpot.java b/src/main/java/net/minecraft/world/entity/ai/behavior/MoveToSkySeeingSpot.java
index d7980c1f35530c5c8781fe860989ec5659060132..cea30d1d4ae5ff77e9dd5e6cf7dbd28a6dfde90a 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/MoveToSkySeeingSpot.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/MoveToSkySeeingSpot.java
@@ -28,7 +28,7 @@ public class MoveToSkySeeingSpot extends Behavior<LivingEntity>
     protected void start(final ServerLevel debug1, final LivingEntity debug2, final long debug3) {
         final Optional<Vec3> debug4 = Optional.ofNullable(this.getOutdoorPosition(debug1, debug2));
         if (debug4.isPresent()) {
-            debug2.getBrain().setMemory(MemoryModuleType.WALK_TARGET, debug4.map(debug1 -> new WalkTarget(debug1, this.speedModifier, 0)));
+            debug2.getBrain().setMemory(MemoryModuleType.WALK_TARGET, debug4.map(debug1l -> new WalkTarget(debug1l, this.speedModifier, 0))); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/RandomStroll.java b/src/main/java/net/minecraft/world/entity/ai/behavior/RandomStroll.java
index 39be445687e228dbd6bc9c00924fa3364c122766..10d8dc5e68e0fb57950538e5939f4578827859f5 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/RandomStroll.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/RandomStroll.java
@@ -32,6 +32,6 @@ public class RandomStroll extends Behavior<PathfinderMob>
     @Override
     protected void start(final ServerLevel debug1, final PathfinderMob debug2, final long debug3) {
         final Optional<Vec3> debug4 = Optional.ofNullable(RandomPos.getLandPos(debug2, this.maxHorizontalDistance, this.maxVerticalDistance));
-        debug2.getBrain().setMemory(MemoryModuleType.WALK_TARGET, debug4.map(debug1 -> new WalkTarget(debug1, this.speedModifier, 0)));
+        debug2.getBrain().setMemory(MemoryModuleType.WALK_TARGET, debug4.map(debug1l -> new WalkTarget(debug1l, this.speedModifier, 0))); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/RunSometimes.java b/src/main/java/net/minecraft/world/entity/ai/behavior/RunSometimes.java
index 8330ac231a1c22e1a2b8bbb31e9da0cc7d637457..b751b2e6a7ae8fd5b0c986ac7d2e5b9343c84815 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/RunSometimes.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/RunSometimes.java
@@ -26,7 +26,7 @@ public class RunSometimes<E extends LivingEntity> extends Behavior<E>
     
     @Override
     protected boolean checkExtraStartConditions(final ServerLevel debug1, final E debug2) {
-        if (!this.wrappedBehavior.checkExtraStartConditions(debug1, (Object)debug2)) {
+        if (!this.wrappedBehavior.checkExtraStartConditions(debug1, debug2)) { // MagmaCube - decompile fix
             return false;
         }
         if (this.resetTicks) {
@@ -41,24 +41,24 @@ public class RunSometimes<E extends LivingEntity> extends Behavior<E>
     
     @Override
     protected void start(final ServerLevel debug1, final E debug2, final long debug3) {
-        this.wrappedBehavior.start(debug1, (Object)debug2, debug3);
+        this.wrappedBehavior.start(debug1, debug2, debug3); // MagmaCube - decompile fix
     }
     
     @Override
     protected boolean canStillUse(final ServerLevel debug1, final E debug2, final long debug3) {
-        return this.wrappedBehavior.canStillUse(debug1, (Object)debug2, debug3);
+        return this.wrappedBehavior.canStillUse(debug1, debug2, debug3); // MagmaCube - decompile fix
     }
     
     @Override
     protected void tick(final ServerLevel debug1, final E debug2, final long debug3) {
-        this.wrappedBehavior.tick(debug1, (Object)debug2, debug3);
+        this.wrappedBehavior.tick(debug1, debug2, debug3); // MagmaCube - decompile fix
         this.wasRunning = (this.wrappedBehavior.getStatus() == Status.RUNNING);
     }
     
     @Override
     protected void stop(final ServerLevel debug1, final E debug2, final long debug3) {
         this.resetTicksUntilNextStart(debug1);
-        this.wrappedBehavior.stop(debug1, (Object)debug2, debug3);
+        this.wrappedBehavior.stop(debug1, debug2, debug3); // MagmaCube - decompile fix
     }
     
     private void resetTicksUntilNextStart(final ServerLevel debug1) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/StrollToPoi.java b/src/main/java/net/minecraft/world/entity/ai/behavior/StrollToPoi.java
index c04231fd3951c148b756183ed33ca15746056b98..dd16dc9e627343bc88dd9604870873fd011f7665 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/StrollToPoi.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/StrollToPoi.java
@@ -40,7 +40,7 @@ public class StrollToPoi extends Behavior<PathfinderMob>
         if (debug3 > this.nextOkStartTime) {
             final Brain<?> debug4 = debug2.getBrain();
             final Optional<GlobalPos> debug5 = debug4.getMemory(this.memoryType);
-            debug5.ifPresent(debug2 -> debug4.setMemory(MemoryModuleType.WALK_TARGET, new WalkTarget(debug2.pos(), this.speedModifier, this.closeEnoughDist)));
+            debug5.ifPresent(debug2l -> debug4.setMemory(MemoryModuleType.WALK_TARGET, new WalkTarget(debug2l.pos(), this.speedModifier, this.closeEnoughDist))); // MagmaCube - decompile fix
             this.nextOkStartTime = debug3 + 80L;
         }
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/UseBonemeal.java b/src/main/java/net/minecraft/world/entity/ai/behavior/UseBonemeal.java
index e7a58047d9c0a1340d57028484756c3bc062a55c..9b8002886e90d2ea8ee627827b734164c257e693 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/UseBonemeal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/UseBonemeal.java
@@ -84,9 +84,8 @@ public class UseBonemeal extends Behavior<Villager>
     }
     
     private void setCurrentCropAsTarget(final Villager debug1) {
-        final BlockPosTracker debug2;
-        this.cropPos.ifPresent(debug1 -> {
-            debug2 = new BlockPosTracker(debug1);
+        this.cropPos.ifPresent(debug1l -> { // MagmaCube - decompile fix
+            BlockPosTracker debug2 = new BlockPosTracker(debug1l); // MagmaCube - decompile fix
             debug1.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, debug2);
             debug1.getBrain().setMemory(MemoryModuleType.WALK_TARGET, new WalkTarget(debug2, 0.5f, 1));
         });
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java
index 3e045f5f1e71d907f7df49fa2167ec34fb69d0c1..d02cfaf6276126d9a83406177c64d90433095640 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java
@@ -22,7 +22,7 @@ import net.minecraft.world.entity.npc.VillagerProfession;
 public class VillagerGoalPackages
 {
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getCorePackage(final VillagerProfession debug0, final float debug1) {
-        return (ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>>)ImmutableList.of((Object)Pair.of((Object)0, (Object)new Swim(0.8f)), (Object)Pair.of((Object)0, (Object)new InteractWithDoor()), (Object)Pair.of((Object)0, (Object)new LookAtTargetSink(45, 90)), (Object)Pair.of((Object)0, (Object)new VillagerPanicTrigger()), (Object)Pair.of((Object)0, (Object)new WakeUp()), (Object)Pair.of((Object)0, (Object)new ReactToBell()), (Object)Pair.of((Object)0, (Object)new SetRaidStatus()), (Object)Pair.of((Object)0, (Object)new ValidateNearbyPoi(debug0.getJobPoiType(), MemoryModuleType.JOB_SITE)), (Object)Pair.of((Object)0, (Object)new ValidateNearbyPoi(debug0.getJobPoiType(), MemoryModuleType.POTENTIAL_JOB_SITE)), (Object)Pair.of((Object)1, (Object)new MoveToTargetSink()), (Object)Pair.of((Object)2, (Object)new PoiCompetitorScan(debug0)), (Object)Pair.of((Object)3, (Object)new LookAndFollowTradingPlayerSink(debug1)), (Object[])new Pair[] { Pair.of((Object)5, (Object)new GoToWantedItem(debug1, false, 4)), Pair.of((Object)6, (Object)new AcquirePoi(debug0.getJobPoiType(), MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, true, Optional.empty())), Pair.of((Object)7, (Object)new GoToPotentialJobSite(debug1)), Pair.of((Object)8, (Object)new YieldJobSite(debug1)), Pair.of((Object)10, (Object)new AcquirePoi(PoiType.HOME, MemoryModuleType.HOME, false, Optional.of((byte)14))), Pair.of((Object)10, (Object)new AcquirePoi(PoiType.MEETING, MemoryModuleType.MEETING_POINT, true, Optional.of((byte)14))), Pair.of((Object)10, (Object)new AssignProfessionFromJobSite()), Pair.of((Object)10, (Object)new ResetProfession()) });
+        return ImmutableList.of(Pair.of(0, new Swim(0.8f)), Pair.of(0, new InteractWithDoor()), Pair.of(0, new LookAtTargetSink(45, 90)), Pair.of(0, new VillagerPanicTrigger()), Pair.of(0, new WakeUp()), Pair.of(0, new ReactToBell()), Pair.of(0, new SetRaidStatus()), Pair.of(0, new ValidateNearbyPoi(debug0.getJobPoiType(), MemoryModuleType.JOB_SITE)), Pair.of(0, new ValidateNearbyPoi(debug0.getJobPoiType(), MemoryModuleType.POTENTIAL_JOB_SITE)), Pair.of(1, new MoveToTargetSink()), Pair.of(2, new PoiCompetitorScan(debug0)), Pair.of(3, new LookAndFollowTradingPlayerSink(debug1)), new Pair[] { Pair.of(5, new GoToWantedItem(debug1, false, 4)), Pair.of(6, new AcquirePoi(debug0.getJobPoiType(), MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, true, Optional.empty())), Pair.of(7, new GoToPotentialJobSite(debug1)), Pair.of(8, new YieldJobSite(debug1)), Pair.of(10, new AcquirePoi(PoiType.HOME, MemoryModuleType.HOME, false, Optional.of((byte)14))), Pair.of(10, new AcquirePoi(PoiType.MEETING, MemoryModuleType.MEETING_POINT, true, Optional.of((byte)14))), Pair.of(10, new AssignProfessionFromJobSite()), Pair.of(10, new ResetProfession()) }); // MagmaCube - decompile fix
     }
     
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getWorkPackage(final VillagerProfession debug0, final float debug1) {
@@ -33,48 +33,48 @@ public class VillagerGoalPackages
         else {
             debug2 = new WorkAtPoi();
         }
-        return (ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>>)ImmutableList.of((Object)getMinimalLookBehavior(), (Object)Pair.of((Object)5, (Object)new RunOne((List<com.mojang.datafixers.util.Pair<Behavior<? super LivingEntity>, Integer>>)ImmutableList.of((Object)Pair.of((Object)debug2, (Object)7), (Object)Pair.of((Object)new StrollAroundPoi(MemoryModuleType.JOB_SITE, 0.4f, 4), (Object)2), (Object)Pair.of((Object)new StrollToPoi(MemoryModuleType.JOB_SITE, 0.4f, 1, 10), (Object)5), (Object)Pair.of((Object)new StrollToPoiList(MemoryModuleType.SECONDARY_JOB_SITE, debug1, 1, 6, MemoryModuleType.JOB_SITE), (Object)5), (Object)Pair.of((Object)new HarvestFarmland(), (Object)((debug0 == VillagerProfession.FARMER) ? 2 : 5)), (Object)Pair.of((Object)new UseBonemeal(), (Object)((debug0 == VillagerProfession.FARMER) ? 4 : 7))))), (Object)Pair.of((Object)10, (Object)new ShowTradesToPlayer(400, 1600)), (Object)Pair.of((Object)10, (Object)new SetLookAndInteract(EntityType.PLAYER, 4)), (Object)Pair.of((Object)2, (Object)new SetWalkTargetFromBlockMemory(MemoryModuleType.JOB_SITE, debug1, 9, 100, 1200)), (Object)Pair.of((Object)3, (Object)new GiveGiftToHero(100)), (Object)Pair.of((Object)99, (Object)new UpdateActivityFromSchedule()));
+        return ImmutableList.of(getMinimalLookBehavior(), Pair.of(5, new RunOne(ImmutableList.of(Pair.of(debug2, 7), Pair.of(new StrollAroundPoi(MemoryModuleType.JOB_SITE, 0.4f, 4), 2), Pair.of(new StrollToPoi(MemoryModuleType.JOB_SITE, 0.4f, 1, 10), 5), Pair.of(new StrollToPoiList(MemoryModuleType.SECONDARY_JOB_SITE, debug1, 1, 6, MemoryModuleType.JOB_SITE), 5), Pair.of(new HarvestFarmland(), ((debug0 == VillagerProfession.FARMER) ? 2 : 5)), Pair.of(new UseBonemeal(), ((debug0 == VillagerProfession.FARMER) ? 4 : 7))))), Pair.of(10, new ShowTradesToPlayer(400, 1600)), Pair.of(10, new SetLookAndInteract(EntityType.PLAYER, 4)), Pair.of(2, new SetWalkTargetFromBlockMemory(MemoryModuleType.JOB_SITE, debug1, 9, 100, 1200)), Pair.of(3, new GiveGiftToHero(100)), Pair.of(99, new UpdateActivityFromSchedule())); // MagmaCube - decompile fix
     }
     
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getPlayPackage(final float debug0) {
-        return (ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>>)ImmutableList.of((Object)Pair.of((Object)0, (Object)new MoveToTargetSink(80, 120)), (Object)getFullLookBehavior(), (Object)Pair.of((Object)5, (Object)new PlayTagWithOtherKids()), (Object)Pair.of((Object)5, (Object)new RunOne((Map<MemoryModuleType<?>, MemoryStatus>)ImmutableMap.of((Object)MemoryModuleType.VISIBLE_VILLAGER_BABIES, (Object)MemoryStatus.VALUE_ABSENT), (List<com.mojang.datafixers.util.Pair<Behavior<? super LivingEntity>, Integer>>)ImmutableList.of((Object)Pair.of((Object)InteractWith.of(EntityType.VILLAGER, 8, MemoryModuleType.INTERACTION_TARGET, debug0, 2), (Object)2), (Object)Pair.of((Object)InteractWith.of(EntityType.CAT, 8, MemoryModuleType.INTERACTION_TARGET, debug0, 2), (Object)1), (Object)Pair.of((Object)new VillageBoundRandomStroll(debug0), (Object)1), (Object)Pair.of((Object)new SetWalkTargetFromLookTarget(debug0, 2), (Object)1), (Object)Pair.of((Object)new JumpOnBed(debug0), (Object)2), (Object)Pair.of((Object)new DoNothing(20, 40), (Object)2)))), (Object)Pair.of((Object)99, (Object)new UpdateActivityFromSchedule()));
+        return ImmutableList.of(Pair.of(0, new MoveToTargetSink(80, 120)), getFullLookBehavior(), Pair.of(5, new PlayTagWithOtherKids()), Pair.of(5, new RunOne<>(ImmutableMap.of(MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryStatus.VALUE_ABSENT), ImmutableList.of(Pair.of(InteractWith.of(EntityType.VILLAGER, 8, MemoryModuleType.INTERACTION_TARGET, debug0, 2), 2), Pair.of(InteractWith.of(EntityType.CAT, 8, MemoryModuleType.INTERACTION_TARGET, debug0, 2), 1), Pair.of(new VillageBoundRandomStroll(debug0), 1), Pair.of(new SetWalkTargetFromLookTarget(debug0, 2), 1), Pair.of(new JumpOnBed(debug0), 2), Pair.of(new DoNothing(20, 40), 2)))), Pair.of(99, new UpdateActivityFromSchedule())); // MagmaCube - decompile fix
     }
     
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getRestPackage(final VillagerProfession debug0, final float debug1) {
-        return (ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>>)ImmutableList.of((Object)Pair.of((Object)2, (Object)new SetWalkTargetFromBlockMemory(MemoryModuleType.HOME, debug1, 1, 150, 1200)), (Object)Pair.of((Object)3, (Object)new ValidateNearbyPoi(PoiType.HOME, MemoryModuleType.HOME)), (Object)Pair.of((Object)3, (Object)new SleepInBed()), (Object)Pair.of((Object)5, (Object)new RunOne((Map<MemoryModuleType<?>, MemoryStatus>)ImmutableMap.of((Object)MemoryModuleType.HOME, (Object)MemoryStatus.VALUE_ABSENT), (List<com.mojang.datafixers.util.Pair<Behavior<? super LivingEntity>, Integer>>)ImmutableList.of((Object)Pair.of((Object)new SetClosestHomeAsWalkTarget(debug1), (Object)1), (Object)Pair.of((Object)new InsideBrownianWalk(debug1), (Object)4), (Object)Pair.of((Object)new GoToClosestVillage(debug1, 4), (Object)2), (Object)Pair.of((Object)new DoNothing(20, 40), (Object)2)))), (Object)getMinimalLookBehavior(), (Object)Pair.of((Object)99, (Object)new UpdateActivityFromSchedule()));
+        return ImmutableList.of(Pair.of(2, new SetWalkTargetFromBlockMemory(MemoryModuleType.HOME, debug1, 1, 150, 1200)), Pair.of(3, new ValidateNearbyPoi(PoiType.HOME, MemoryModuleType.HOME)), Pair.of(3, new SleepInBed()), Pair.of(5, new RunOne<>(ImmutableMap.of(MemoryModuleType.HOME, MemoryStatus.VALUE_ABSENT), ImmutableList.of(Pair.of(new SetClosestHomeAsWalkTarget(debug1), 1), Pair.of(new InsideBrownianWalk(debug1), 4), Pair.of(new GoToClosestVillage(debug1, 4), 2), Pair.of(new DoNothing(20, 40), 2)))), getMinimalLookBehavior(), Pair.of(99, new UpdateActivityFromSchedule())); // MagmaCube - decompile fix
     }
     
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getMeetPackage(final VillagerProfession debug0, final float debug1) {
-        return (ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>>)ImmutableList.of((Object)Pair.of((Object)2, (Object)new RunOne((List<com.mojang.datafixers.util.Pair<Behavior<? super LivingEntity>, Integer>>)ImmutableList.of((Object)Pair.of((Object)new StrollAroundPoi(MemoryModuleType.MEETING_POINT, 0.4f, 40), (Object)2), (Object)Pair.of((Object)new SocializeAtBell(), (Object)2)))), (Object)Pair.of((Object)10, (Object)new ShowTradesToPlayer(400, 1600)), (Object)Pair.of((Object)10, (Object)new SetLookAndInteract(EntityType.PLAYER, 4)), (Object)Pair.of((Object)2, (Object)new SetWalkTargetFromBlockMemory(MemoryModuleType.MEETING_POINT, debug1, 6, 100, 200)), (Object)Pair.of((Object)3, (Object)new GiveGiftToHero(100)), (Object)Pair.of((Object)3, (Object)new ValidateNearbyPoi(PoiType.MEETING, MemoryModuleType.MEETING_POINT)), (Object)Pair.of((Object)3, (Object)new GateBehavior((Map<MemoryModuleType<?>, MemoryStatus>)ImmutableMap.of(), (Set<MemoryModuleType<?>>)ImmutableSet.of((Object)MemoryModuleType.INTERACTION_TARGET), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.RUN_ONE, (List<com.mojang.datafixers.util.Pair<Behavior<? super LivingEntity>, Integer>>)ImmutableList.of((Object)Pair.of((Object)new TradeWithVillager(), (Object)1)))), (Object)getFullLookBehavior(), (Object)Pair.of((Object)99, (Object)new UpdateActivityFromSchedule()));
+        return ImmutableList.of(Pair.of(2, new RunOne(ImmutableList.of(Pair.of(new StrollAroundPoi(MemoryModuleType.MEETING_POINT, 0.4f, 40), 2), Pair.of(new SocializeAtBell(), 2)))), Pair.of(10, new ShowTradesToPlayer(400, 1600)), Pair.of(10, new SetLookAndInteract(EntityType.PLAYER, 4)), Pair.of(2, new SetWalkTargetFromBlockMemory(MemoryModuleType.MEETING_POINT, debug1, 6, 100, 200)), Pair.of(3, new GiveGiftToHero(100)), Pair.of(3, new ValidateNearbyPoi(PoiType.MEETING, MemoryModuleType.MEETING_POINT)), Pair.of(3, new GateBehavior<>(ImmutableMap.of(), ImmutableSet.of(MemoryModuleType.INTERACTION_TARGET), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.RUN_ONE, ImmutableList.of(Pair.of(new TradeWithVillager(), 1)))), getFullLookBehavior(), Pair.of(99, new UpdateActivityFromSchedule())); // MagmaCube - decompile fix
     }
     
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getIdlePackage(final VillagerProfession debug0, final float debug1) {
-        return (ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>>)ImmutableList.of((Object)Pair.of((Object)2, (Object)new RunOne((List<com.mojang.datafixers.util.Pair<Behavior<? super LivingEntity>, Integer>>)ImmutableList.of((Object)Pair.of((Object)InteractWith.of(EntityType.VILLAGER, 8, MemoryModuleType.INTERACTION_TARGET, debug1, 2), (Object)2), (Object)Pair.of((Object)new InteractWith(EntityType.VILLAGER, 8, AgableMob::canBreed, AgableMob::canBreed, (MemoryModuleType<LivingEntity>)MemoryModuleType.BREED_TARGET, debug1, 2), (Object)1), (Object)Pair.of((Object)InteractWith.of(EntityType.CAT, 8, MemoryModuleType.INTERACTION_TARGET, debug1, 2), (Object)1), (Object)Pair.of((Object)new VillageBoundRandomStroll(debug1), (Object)1), (Object)Pair.of((Object)new SetWalkTargetFromLookTarget(debug1, 2), (Object)1), (Object)Pair.of((Object)new JumpOnBed(debug1), (Object)1), (Object)Pair.of((Object)new DoNothing(30, 60), (Object)1)))), (Object)Pair.of((Object)3, (Object)new GiveGiftToHero(100)), (Object)Pair.of((Object)3, (Object)new SetLookAndInteract(EntityType.PLAYER, 4)), (Object)Pair.of((Object)3, (Object)new ShowTradesToPlayer(400, 1600)), (Object)Pair.of((Object)3, (Object)new GateBehavior((Map<MemoryModuleType<?>, MemoryStatus>)ImmutableMap.of(), (Set<MemoryModuleType<?>>)ImmutableSet.of((Object)MemoryModuleType.INTERACTION_TARGET), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.RUN_ONE, (List<com.mojang.datafixers.util.Pair<Behavior<? super LivingEntity>, Integer>>)ImmutableList.of((Object)Pair.of((Object)new TradeWithVillager(), (Object)1)))), (Object)Pair.of((Object)3, (Object)new GateBehavior((Map<MemoryModuleType<?>, MemoryStatus>)ImmutableMap.of(), (Set<MemoryModuleType<?>>)ImmutableSet.of((Object)MemoryModuleType.BREED_TARGET), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.RUN_ONE, (List<com.mojang.datafixers.util.Pair<Behavior<? super LivingEntity>, Integer>>)ImmutableList.of((Object)Pair.of((Object)new VillagerMakeLove(), (Object)1)))), (Object)getFullLookBehavior(), (Object)Pair.of((Object)99, (Object)new UpdateActivityFromSchedule()));
+        return ImmutableList.of(Pair.of(2, new RunOne(ImmutableList.of(Pair.of(InteractWith.of(EntityType.VILLAGER, 8, MemoryModuleType.INTERACTION_TARGET, debug1, 2), 2), Pair.of(new InteractWith<>(EntityType.VILLAGER, 8, AgableMob::canBreed, AgableMob::canBreed, MemoryModuleType.BREED_TARGET, debug1, 2), 1), Pair.of(InteractWith.of(EntityType.CAT, 8, MemoryModuleType.INTERACTION_TARGET, debug1, 2), 1), Pair.of(new VillageBoundRandomStroll(debug1), 1), Pair.of(new SetWalkTargetFromLookTarget(debug1, 2), 1), Pair.of(new JumpOnBed(debug1), 1), Pair.of(new DoNothing(30, 60), 1)))), Pair.of(3, new GiveGiftToHero(100)), Pair.of(3, new SetLookAndInteract(EntityType.PLAYER, 4)), Pair.of(3, new ShowTradesToPlayer(400, 1600)), Pair.of(3, new GateBehavior(ImmutableMap.of(), ImmutableSet.of(MemoryModuleType.INTERACTION_TARGET), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.RUN_ONE, ImmutableList.of(Pair.of(new TradeWithVillager(), 1)))), Pair.of(3, new GateBehavior<>(ImmutableMap.of(), ImmutableSet.of(MemoryModuleType.BREED_TARGET), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.RUN_ONE, ImmutableList.of(Pair.of(new VillagerMakeLove(), 1)))), getFullLookBehavior(), Pair.of(99, new UpdateActivityFromSchedule())); // MagmaCube - decompile fix
     }
     
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getPanicPackage(final VillagerProfession debug0, final float debug1) {
         final float debug2 = debug1 * 1.5f;
-        return (ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>>)ImmutableList.of((Object)Pair.of((Object)0, (Object)new VillagerCalmDown()), (Object)Pair.of((Object)1, (Object)SetWalkTargetAwayFrom.entity(MemoryModuleType.NEAREST_HOSTILE, debug2, 6, false)), (Object)Pair.of((Object)1, (Object)SetWalkTargetAwayFrom.entity(MemoryModuleType.HURT_BY_ENTITY, debug2, 6, false)), (Object)Pair.of((Object)3, (Object)new VillageBoundRandomStroll(debug2, 2, 2)), (Object)getMinimalLookBehavior());
+        return ImmutableList.of(Pair.of(0, new VillagerCalmDown()), Pair.of(1, SetWalkTargetAwayFrom.entity(MemoryModuleType.NEAREST_HOSTILE, debug2, 6, false)), Pair.of(1, SetWalkTargetAwayFrom.entity(MemoryModuleType.HURT_BY_ENTITY, debug2, 6, false)), Pair.of(3, new VillageBoundRandomStroll(debug2, 2, 2)), getMinimalLookBehavior()); // MagmaCube - decompile fix
     }
     
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getPreRaidPackage(final VillagerProfession debug0, final float debug1) {
-        return (ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>>)ImmutableList.of((Object)Pair.of((Object)0, (Object)new RingBell()), (Object)Pair.of((Object)0, (Object)new RunOne((List<com.mojang.datafixers.util.Pair<Behavior<? super LivingEntity>, Integer>>)ImmutableList.of((Object)Pair.of((Object)new SetWalkTargetFromBlockMemory(MemoryModuleType.MEETING_POINT, debug1 * 1.5f, 2, 150, 200), (Object)6), (Object)Pair.of((Object)new VillageBoundRandomStroll(debug1 * 1.5f), (Object)2)))), (Object)getMinimalLookBehavior(), (Object)Pair.of((Object)99, (Object)new ResetRaidStatus()));
+        return ImmutableList.of(Pair.of(0, new RingBell()), Pair.of(0, new RunOne(ImmutableList.of(Pair.of(new SetWalkTargetFromBlockMemory(MemoryModuleType.MEETING_POINT, debug1 * 1.5f, 2, 150, 200), 6), Pair.of(new VillageBoundRandomStroll(debug1 * 1.5f), 2)))), getMinimalLookBehavior(), Pair.of(99, new ResetRaidStatus())); // MagmaCube - decompile fix
     }
     
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getRaidPackage(final VillagerProfession debug0, final float debug1) {
-        return (ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>>)ImmutableList.of((Object)Pair.of((Object)0, (Object)new RunOne((List<com.mojang.datafixers.util.Pair<Behavior<? super LivingEntity>, Integer>>)ImmutableList.of((Object)Pair.of((Object)new GoOutsideToCelebrate(debug1), (Object)5), (Object)Pair.of((Object)new VictoryStroll(debug1 * 1.1f), (Object)2)))), (Object)Pair.of((Object)0, (Object)new CelebrateVillagersSurvivedRaid(600, 600)), (Object)Pair.of((Object)2, (Object)new LocateHidingPlaceDuringRaid(24, debug1 * 1.4f)), (Object)getMinimalLookBehavior(), (Object)Pair.of((Object)99, (Object)new ResetRaidStatus()));
+        return ImmutableList.of(Pair.of(0, new RunOne(ImmutableList.of(Pair.of(new GoOutsideToCelebrate(debug1), 5), Pair.of(new VictoryStroll(debug1 * 1.1f), 2)))), Pair.of(0, new CelebrateVillagersSurvivedRaid(600, 600)), Pair.of(2, new LocateHidingPlaceDuringRaid(24, debug1 * 1.4f)), getMinimalLookBehavior(), Pair.of(99, new ResetRaidStatus())); // MagmaCube - decompile fix
     }
     
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getHidePackage(final VillagerProfession debug0, final float debug1) {
         final int debug2 = 2;
-        return (ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>>)ImmutableList.of((Object)Pair.of((Object)0, (Object)new SetHiddenState(15, 3)), (Object)Pair.of((Object)1, (Object)new LocateHidingPlace(32, debug1 * 1.25f, 2)), (Object)getMinimalLookBehavior());
+        return ImmutableList.of(Pair.of(0, new SetHiddenState(15, 3)), Pair.of(1, new LocateHidingPlace(32, debug1 * 1.25f, 2)), getMinimalLookBehavior()); // MagmaCube - decompile fix
     }
     
     private static Pair<Integer, Behavior<LivingEntity>> getFullLookBehavior() {
-        return (Pair<Integer, Behavior<LivingEntity>>)Pair.of((Object)5, (Object)new RunOne((List<com.mojang.datafixers.util.Pair<Behavior<? super LivingEntity>, Integer>>)ImmutableList.of((Object)Pair.of((Object)new SetEntityLookTarget(EntityType.CAT, 8.0f), (Object)8), (Object)Pair.of((Object)new SetEntityLookTarget(EntityType.VILLAGER, 8.0f), (Object)2), (Object)Pair.of((Object)new SetEntityLookTarget(EntityType.PLAYER, 8.0f), (Object)2), (Object)Pair.of((Object)new SetEntityLookTarget(MobCategory.CREATURE, 8.0f), (Object)1), (Object)Pair.of((Object)new SetEntityLookTarget(MobCategory.WATER_CREATURE, 8.0f), (Object)1), (Object)Pair.of((Object)new SetEntityLookTarget(MobCategory.WATER_AMBIENT, 8.0f), (Object)1), (Object)Pair.of((Object)new SetEntityLookTarget(MobCategory.MONSTER, 8.0f), (Object)1), (Object)Pair.of((Object)new DoNothing(30, 60), (Object)2))));
+        return Pair.of(5, new RunOne(ImmutableList.of(Pair.of(new SetEntityLookTarget(EntityType.CAT, 8.0f), 8), Pair.of(new SetEntityLookTarget(EntityType.VILLAGER, 8.0f), 2), Pair.of(new SetEntityLookTarget(EntityType.PLAYER, 8.0f), 2), Pair.of(new SetEntityLookTarget(MobCategory.CREATURE, 8.0f), 1), Pair.of(new SetEntityLookTarget(MobCategory.WATER_CREATURE, 8.0f), 1), Pair.of(new SetEntityLookTarget(MobCategory.WATER_AMBIENT, 8.0f), 1), Pair.of(new SetEntityLookTarget(MobCategory.MONSTER, 8.0f), 1), Pair.of(new DoNothing(30, 60), 2)))); // MagmaCube - decompile fix
     }
     
     private static Pair<Integer, Behavior<LivingEntity>> getMinimalLookBehavior() {
-        return (Pair<Integer, Behavior<LivingEntity>>)Pair.of((Object)5, (Object)new RunOne((List<com.mojang.datafixers.util.Pair<Behavior<? super LivingEntity>, Integer>>)ImmutableList.of((Object)Pair.of((Object)new SetEntityLookTarget(EntityType.VILLAGER, 8.0f), (Object)2), (Object)Pair.of((Object)new SetEntityLookTarget(EntityType.PLAYER, 8.0f), (Object)2), (Object)Pair.of((Object)new DoNothing(30, 60), (Object)8))));
+        return Pair.of(5, new RunOne(ImmutableList.of(Pair.of(new SetEntityLookTarget(EntityType.VILLAGER, 8.0f), 2), Pair.of(new SetEntityLookTarget(EntityType.PLAYER, 8.0f), 2), Pair.of(new DoNothing(30, 60), 8)))); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
index 7a4fd06eac2891545e3ac6b02d37004489e3797e..f290ae6187813806117fe5fd8e6fdba427fbd93f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
@@ -48,7 +48,7 @@ public class VillagerMakeLove extends Behavior<Villager>
     
     @Override
     protected void tick(final ServerLevel debug1, final Villager debug2, final long debug3) {
-        final Villager debug4 = debug2.getBrain().getMemory((MemoryModuleType<Villager>)MemoryModuleType.BREED_TARGET).get();
+        final Villager debug4 = (Villager) debug2.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get(); // MagmaCube - decompile fix
         if (debug2.distanceToSqr(debug4) > 5.0) {
             return;
         }
@@ -94,7 +94,7 @@ public class VillagerMakeLove extends Behavior<Villager>
     }
     
     private Optional<BlockPos> takeVacantBed(final ServerLevel debug1, final Villager debug2) {
-        return debug1.getPoiManager().take(PoiType.HOME.getPredicate(), debug2 -> this.canReach(debug2, debug2), debug2.blockPosition(), 48);
+        return debug1.getPoiManager().take(PoiType.HOME.getPredicate(), debug2l -> this.canReach(debug2, debug2l), debug2.blockPosition(), 48); // MagmaCube - decompile fix
     }
     
     private boolean canReach(final Villager debug1, final BlockPos debug2) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/WeightedList.java b/src/main/java/net/minecraft/world/entity/ai/behavior/WeightedList.java
index 48e6e19b8aa5b8fe065df72d941e68aa85618c99..b43e8338cae3d09a3187db22c2bd2f0679584b35 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/WeightedList.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/WeightedList.java
@@ -28,11 +28,11 @@ public class WeightedList<U>
     }
     
     public static <U> Codec<WeightedList<U>> codec(final Codec<U> debug0) {
-        return (Codec<WeightedList<U>>)WeightedEntry.codec(debug0).listOf().xmap((Function)WeightedList::new, debug0 -> debug0.entries);
+        return (Codec<WeightedList<U>>)WeightedEntry.codec(debug0).listOf().xmap(WeightedList::new, debug0l -> debug0l.entries); // MagmaCube - decompile fix
     }
     
     public WeightedList<U> add(final U debug1, final int debug2) {
-        this.entries.add(new WeightedEntry<U>((Object)debug1, debug2));
+        this.entries.add(new WeightedEntry<U>(debug1, debug2)); // MagmaCube - decompile fix
         return this;
     }
     
@@ -41,7 +41,7 @@ public class WeightedList<U>
     }
     
     public WeightedList<U> shuffle(final Random debug1) {
-        this.entries.forEach(debug1 -> debug1.setRandom(debug1.nextFloat()));
+        this.entries.forEach(debug1l -> debug1l.setRandom(debug1.nextFloat())); // MagmaCube - decompile fix
         this.entries.sort(Comparator.comparingDouble(debug0 -> debug0.getRandWeight()));
         return this;
     }
@@ -51,11 +51,11 @@ public class WeightedList<U>
     }
     
     public Stream<U> stream() {
-        return this.entries.stream().map((Function<? super Object, ? extends U>)WeightedEntry::getData);
+        return this.entries.stream().map(WeightedEntry::getData); // MagmaCube - decompile fix
     }
     
     public U getOne(final Random debug1) {
-        return this.shuffle(debug1).stream().findFirst().orElseThrow((Supplier<? extends Throwable>)RuntimeException::new);
+        return this.shuffle(debug1).stream().findFirst().orElseThrow(RuntimeException::new); // MagmaCube - decompile fix
     }
     
     @Override
@@ -95,11 +95,11 @@ public class WeightedList<U>
             return (Codec<WeightedEntry<E>>)new Codec<WeightedEntry<E>>() {
                 public <T> DataResult<Pair<WeightedEntry<E>, T>> decode(final DynamicOps<T> debug1, final T debug2) {
                     final Dynamic<T> debug3 = (Dynamic<T>)new Dynamic((DynamicOps)debug1, (Object)debug2);
-                    return (DataResult<Pair<WeightedEntry<E>, T>>)debug3.get("data").flatMap((Function)debug0::parse).map(debug1 -> new WeightedEntry(debug1, debug3.get("weight").asInt(1))).map(debug1 -> Pair.of((Object)debug1, debug1.empty()));
+                    return debug3.get("data").flatMap(debug0::parse).map(debug1l -> new WeightedEntry<>(debug1l, debug3.get("weight").asInt(1))).map(debug1ll -> Pair.of(debug1ll, debug1.empty())); // MagmaCube - decompile fix
                 }
                 
                 public <T> DataResult<T> encode(final WeightedEntry<E> debug1, final DynamicOps<T> debug2, final T debug3) {
-                    return (DataResult<T>)debug2.mapBuilder().add("weight", debug2.createInt(((WeightedEntry<Object>)debug1).weight)).add("data", debug0.encodeStart((DynamicOps)debug2, ((WeightedEntry<Object>)debug1).data)).build((Object)debug3);
+                    return (DataResult<T>)debug2.mapBuilder().add("weight", debug2.createInt(((WeightedEntry<Object>)debug1).weight)).add("data", debug0.encodeStart((DynamicOps)debug2, debug1.data)).build((Object)debug3); // MagmaCube - decompile fix
                 }
             };
         }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtPoi.java b/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtPoi.java
index cda13bf177427982ed7a9b9aeabecbd763f7bea4..babf52b33b9d652889bf1ab295298e6040a03c28 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtPoi.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtPoi.java
@@ -37,7 +37,7 @@ public class WorkAtPoi extends Behavior<Villager>
     protected void start(final ServerLevel debug1, final Villager debug2, final long debug3) {
         final Brain<Villager> debug4 = debug2.getBrain();
         debug4.setMemory(MemoryModuleType.LAST_WORKED_AT_POI, Long.valueOf(debug3));
-        debug4.getMemory(MemoryModuleType.JOB_SITE).ifPresent(debug1 -> debug4.setMemory((MemoryModuleType<BlockPosTracker>)MemoryModuleType.LOOK_TARGET, new BlockPosTracker(debug1.pos())));
+        debug4.getMemory(MemoryModuleType.JOB_SITE).ifPresent(debug1l -> debug4.setMemory(MemoryModuleType.LOOK_TARGET, new BlockPosTracker(debug1l.pos()))); // MagmaCube - decompile fix
         debug2.playWorkSound();
         this.useWorkstation(debug1, debug2);
         if (debug2.shouldRestock()) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/YieldJobSite.java b/src/main/java/net/minecraft/world/entity/ai/behavior/YieldJobSite.java
index 09934b2cc9dfb3036709d3e6443c59fdd6650472..b6eaadbcfa1842d22c9be942ac904014dae0c138 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/YieldJobSite.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/YieldJobSite.java
@@ -36,7 +36,7 @@ public class YieldJobSite extends Behavior<Villager>
         if (!debug6.isPresent()) {
             return;
         }
-        BehaviorUtils.getNearbyVillagersWithCondition(debug2, debug3 -> this.nearbyWantsJobsite(debug6.get(), debug3, debug5)).findFirst().ifPresent(debug4 -> this.yieldJobSite(debug1, debug2, debug4, debug5, debug4.getBrain().getMemory(MemoryModuleType.JOB_SITE).isPresent()));
+        BehaviorUtils.getNearbyVillagersWithCondition(debug2, debug3l -> this.nearbyWantsJobsite(debug6.get(), debug3l, debug5)).findFirst().ifPresent(debug4 -> this.yieldJobSite(debug1, debug2, debug4, debug5, debug4.getBrain().getMemory(MemoryModuleType.JOB_SITE).isPresent())); // MagmaCube - decompile fix
     }
     
     private boolean nearbyWantsJobsite(final PoiType debug1, final Villager debug2, final BlockPos debug3) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java
index 804a6e7456a00baf4ff49222fc634d3691839f1a..5f1c252b9579db862fe697af33b02123df3e921f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java
@@ -27,7 +27,7 @@ public class AvoidEntityGoal<T extends LivingEntity> extends Goal
     private final TargetingConditions avoidEntityTargeting;
     
     public AvoidEntityGoal(final PathfinderMob debug1, final Class<T> debug2, final float debug3, final double debug4, final double debug6) {
-        this(debug1, debug2, debug0 -> true, debug3, debug4, debug6, (Predicate)EntitySelector.NO_CREATIVE_OR_SPECTATOR::test);
+        this(debug1, debug2, debug0 -> true, debug3, debug4, debug6, EntitySelector.NO_CREATIVE_OR_SPECTATOR::test); // MagmaCube - decompile fix
     }
     
     public AvoidEntityGoal(final PathfinderMob debug1, final Class<T> debug2, final Predicate<LivingEntity> debug3, final float debug4, final double debug5, final double debug7, final Predicate<LivingEntity> debug9) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/CatSitOnBlockGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/CatSitOnBlockGoal.java
index 4e6e58318d0400e0147971ef61f89a6645fb37a9..5cc32a9c53122f2d4868f9b5c5015bd1c5a41af2 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/CatSitOnBlockGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/CatSitOnBlockGoal.java
@@ -58,6 +58,6 @@ public class CatSitOnBlockGoal extends MoveToBlockGoal
         if (debug3.is(Blocks.CHEST)) {
             return ChestBlockEntity.getOpenCount(debug1, debug2) < 1;
         }
-        return (debug3.is(Blocks.FURNACE) && debug3.getValue((Property<Boolean>)FurnaceBlock.LIT)) || debug3.is(BlockTags.BEDS, debug0 -> debug0.getOptionalValue(BedBlock.PART).map(debug0 -> debug0 != BedPart.HEAD).orElse(true));
+        return (debug3.is(Blocks.FURNACE) && debug3.getValue((Property<Boolean>)FurnaceBlock.LIT)) || debug3.is(BlockTags.BEDS, debug0 -> debug0.getOptionalValue(BedBlock.PART).map(debug0l -> debug0l != BedPart.HEAD).orElse(true)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/FollowMobGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/FollowMobGoal.java
index 26acc8b35e828da3c7a3287a819062d6f48a6723..ad21adfb39b765d3c5c81557e98617a32845ed15 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/FollowMobGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/FollowMobGoal.java
@@ -26,7 +26,7 @@ public class FollowMobGoal extends Goal
     
     public FollowMobGoal(final Mob debug1, final double debug2, final float debug4, final float debug5) {
         this.mob = debug1;
-        this.followPredicate = (debug1 -> debug1 != null && debug1.getClass() != debug1.getClass());
+        this.followPredicate = (debug1l -> debug1l != null && debug1l.getClass() != debug1l.getClass()); // MagmaCube - decompile fix
         this.speedModifier = debug2;
         this.navigation = debug1.getNavigation();
         this.stopDistance = debug4;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/Goal.java b/src/main/java/net/minecraft/world/entity/ai/goal/Goal.java
index c48f9f54f603dd3fd9f90b62436375d408ff7131..abe715b1fcbfa75d5a94544a52311c84e0327eb4 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/Goal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/Goal.java
@@ -32,7 +32,7 @@ public abstract class Goal
     
     public void setFlags(final EnumSet<Flag> debug1) {
         this.flags.clear();
-        this.flags.addAll((Collection<?>)debug1);
+        this.flags.addAll(debug1); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java b/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
index 3d3e16ae068c5106775fdc83c6ccf637c2d2e980..03010ad1c4a8b33942f5f1906838e1b36c1e6d64 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
@@ -24,7 +24,7 @@ public class GoalSelector
     
     public GoalSelector(final Supplier<ProfilerFiller> debug1) {
         this.lockedFlags = new EnumMap<Goal.Flag, WrappedGoal>(Goal.Flag.class);
-        this.availableGoals = (Set<WrappedGoal>)Sets.newLinkedHashSet();
+        this.availableGoals = Sets.newLinkedHashSet(); // MagmaCube - decompile fix
         this.disabledFlags = EnumSet.noneOf(Goal.Flag.class);
         this.newGoalRate = 3;
         this.profiler = debug1;
@@ -35,8 +35,8 @@ public class GoalSelector
     }
     
     public void removeGoal(final Goal debug1) {
-        this.availableGoals.stream().filter(debug1 -> debug1.getGoal() == debug1).filter(WrappedGoal::isRunning).forEach(WrappedGoal::stop);
-        this.availableGoals.removeIf(debug1 -> debug1.getGoal() == debug1);
+        this.availableGoals.stream().filter(debug1l -> debug1l.getGoal() == debug1l).filter(WrappedGoal::isRunning).forEach(WrappedGoal::stop); // MagmaCube - decompile fix
+        this.availableGoals.removeIf(debug1l -> debug1l.getGoal() == debug1l); // MagmaCube - decompile fix
     }
     
     public void tick() {
@@ -51,10 +51,9 @@ public class GoalSelector
         });
         debug3.pop();
         debug3.push("goalUpdate");
-        final WrappedGoal debug4;
         this.availableGoals.stream().filter(debug0 -> !debug0.isRunning()).filter(debug1 -> debug1.getFlags().stream().noneMatch(this.disabledFlags::contains)).filter(debug1 -> debug1.getFlags().stream().allMatch(debug2 -> this.lockedFlags.getOrDefault(debug2, GoalSelector.NO_GOAL).canBeReplacedBy(debug1))).filter(WrappedGoal::canUse).forEach(debug1 -> {
             debug1.getFlags().forEach(debug2 -> {
-                debug4 = this.lockedFlags.getOrDefault(debug2, GoalSelector.NO_GOAL);
+                WrappedGoal debug4 = this.lockedFlags.getOrDefault(debug2, GoalSelector.NO_GOAL); // MagmaCube - decompile fix
                 debug4.stop();
                 this.lockedFlags.put(debug2, debug1);
                 return;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java
index d14e16417fc719cbae55bbeadb17685fb5e62601..961b34bdb24ce3edcddf73cb8ed415e7f3332885 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java
@@ -29,7 +29,7 @@ public class LookAtPlayerGoal extends Goal
         this.probability = debug4;
         this.setFlags(EnumSet.of(Flag.LOOK));
         if (debug2 == Player.class) {
-            this.lookAtContext = new TargetingConditions().range(debug3).allowSameTeam().allowInvulnerable().allowNonAttackable().selector(debug1 -> EntitySelector.notRiding(debug1).test(debug1));
+            this.lookAtContext = new TargetingConditions().range(debug3).allowSameTeam().allowInvulnerable().allowNonAttackable().selector(debug1l -> EntitySelector.notRiding(debug1l).test(debug1l)); // MagmaCube - decompile fix
         }
         else {
             this.lookAtContext = new TargetingConditions().range(debug3).allowSameTeam().allowInvulnerable().allowNonAttackable();
@@ -48,7 +48,7 @@ public class LookAtPlayerGoal extends Goal
             this.lookAt = this.mob.level.getNearestPlayer(this.lookAtContext, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
         }
         else {
-            this.lookAt = this.mob.level.getNearestLoadedEntity((Class<? extends Entity>)this.lookAtType, this.lookAtContext, (LivingEntity)this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ(), this.mob.getBoundingBox().inflate(this.lookDistance, 3.0, this.lookDistance));
+            this.lookAt = this.mob.level.getNearestLoadedEntity(this.lookAtType, this.lookAtContext, (LivingEntity)this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ(), this.mob.getBoundingBox().inflate(this.lookDistance, 3.0, this.lookDistance)); // MagmaCube - decompile fix
         }
         return this.lookAt != null;
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
index d37979b3727be2461df9cfc058c8bc8d4c86b3bd..8371f429c6d6a9f26e56d515b49d851f916ffced 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.ai.goal;
 
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.projectile.ProjectileUtil;
 import net.minecraft.world.item.BowItem;
 import net.minecraft.world.entity.monster.RangedAttackMob;
@@ -23,7 +24,7 @@ public class RangedBowAttackGoal<T extends Monster> extends Goal
     public RangedBowAttackGoal(final T debug1, final double debug2, final int debug4, final float debug5) {
         this.attackTime = -1;
         this.strafingTime = -1;
-        this.mob = (Monster)debug1;
+        this.mob = debug1; // MagmaCube - decompile fix
         this.speedModifier = debug2;
         this.attackIntervalMin = debug4;
         this.attackRadiusSqr = debug5 * debug5;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java
index de18ce1291c3d71ca2258ba6901a9d53e508a698..1ac204ca17643a7c3561ab452ddbe7a9221d662e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.entity.ai.goal;
 
+import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.entity.monster.RangedAttackMob;
 import net.minecraft.world.entity.projectile.ProjectileUtil;
@@ -11,7 +12,7 @@ import net.minecraft.world.item.Items;
 import java.util.EnumSet;
 import net.minecraft.util.IntRange;
 
-public class RangedCrossbowAttackGoal<T extends Monster> extends Goal
+public class RangedCrossbowAttackGoal<T extends Monster> extends Goal // MagmaCube - decompile fix
 {
     public static final IntRange PATHFINDING_DELAY_RANGE;
     private final T mob;
@@ -24,7 +25,7 @@ public class RangedCrossbowAttackGoal<T extends Monster> extends Goal
     
     public RangedCrossbowAttackGoal(final T debug1, final double debug2, final float debug4) {
         this.crossbowState = CrossbowState.UNCHARGED;
-        this.mob = (Monster)debug1;
+        this.mob = (T) debug1; // MagmaCube - decompile fix
         this.speedModifier = debug2;
         this.attackRadiusSqr = debug4 * debug4;
         this.setFlags(EnumSet.of(Flag.MOVE, Flag.LOOK));
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/UseItemGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/UseItemGoal.java
index 8ee1916e6ed357501a799f0306607084df79fde1..7ac698b6532d64ef8158fb39c875ed90d7399f34 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/UseItemGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/UseItemGoal.java
@@ -24,7 +24,7 @@ public class UseItemGoal<T extends Mob> extends Goal
     
     @Override
     public boolean canUse() {
-        return this.canUseSelector.test((Object)this.mob);
+        return this.canUseSelector.test(this.mob); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/ResetUniversalAngerTargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/ResetUniversalAngerTargetGoal.java
index e19647715519fbdeb4d95ed8ffe892ce58f8047a..11990610b110df1c6ca1f6042daa362eb94b3a23 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/ResetUniversalAngerTargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/ResetUniversalAngerTargetGoal.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.entity.ai.goal.target;
 
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import java.util.List;
@@ -15,7 +16,7 @@ public class ResetUniversalAngerTargetGoal<T extends Mob> extends Goal
     private int lastHurtByPlayerTimestamp;
     
     public ResetUniversalAngerTargetGoal(final T debug1, final boolean debug2) {
-        this.mob = (Mob)debug1;
+        this.mob = debug1; // MagmaCube - decompile fix
         this.alertOthersOfSameType = debug2;
     }
     
@@ -33,7 +34,7 @@ public class ResetUniversalAngerTargetGoal<T extends Mob> extends Goal
         this.lastHurtByPlayerTimestamp = this.mob.getLastHurtByMobTimestamp();
         ((NeutralMob)this.mob).forgetCurrentTargetAndRefreshUniversalAnger();
         if (this.alertOthersOfSameType) {
-            this.getNearbyMobsOfSameType().stream().filter(debug1 -> debug1 != this.mob).map(debug0 -> debug0).forEach(NeutralMob::forgetCurrentTargetAndRefreshUniversalAnger);
+            this.getNearbyMobsOfSameType().stream().filter(debug1 -> debug1 != this.mob).map(debug0 -> (NeutralMob) debug0).forEach(NeutralMob::forgetCurrentTargetAndRefreshUniversalAnger); // MagmaCube - decompile fix
         }
         super.start();
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
index e46b3d3569d2d116b093a674bd2a9629641557c2..e4359050fbaca884b377d3c55f0f8f665d66722e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
+++ b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
@@ -88,9 +88,9 @@ public class GossipContainer {
     public void transferFrom(GossipContainer debug12, Random debug2, int debug3) {
         Collection<GossipEntry> debug4 = debug12.selectGossipsForTransfer(debug2, debug3);
         debug4.forEach(debug1 -> {
-            int debug2 = debug1.value - debug1.type.decayPerTransfer;
-            if (debug2 >= 2) {
-                this.getOrCreate(debug1.target).entries.mergeInt((Object)debug1.type, debug2, GossipContainer::mergeValuesForTransfer);
+            int debug2l = debug1.value - debug1.type.decayPerTransfer; // MagmaCube - decompile fix
+            if (debug2l >= 2) { // MagmaCube - decompile fix
+                this.getOrCreate(debug1.target).entries.mergeInt(debug1.type, debug2l, GossipContainer::mergeValuesForTransfer); // MagmaCube - decompile fix
             }
         });
     }
@@ -102,7 +102,7 @@ public class GossipContainer {
 
     public void add(UUID debug1, GossipType debug22, int debug32) {
         EntityGossips debug4 = this.getOrCreate(debug1);
-        debug4.entries.mergeInt((Object)debug22, debug32, (debug2, debug3) -> this.mergeValuesForAddition(debug22, (int)debug2, (int)debug3));
+        debug4.entries.mergeInt(debug22, debug32, (debug2, debug3) -> this.mergeValuesForAddition(debug22, (int)debug2, (int)debug3)); // MagmaCube - decompile fix
         debug4.makeSureValueIsntTooLowOrTooHigh(debug22);
         if (debug4.isEmpty()) {
             this.gossips.remove(debug1);
@@ -114,7 +114,7 @@ public class GossipContainer {
     }
 
     public void update(Dynamic<?> debug12) {
-        debug12.asStream().map(GossipEntry::load).flatMap(debug0 -> Util.toStream(debug0.result())).forEach(debug1 -> this.getOrCreate(debug1.target).entries.put((Object)debug1.type, debug1.value));
+        debug12.asStream().map(GossipEntry::load).flatMap(debug0 -> Util.toStream(debug0.result())).forEach(debug1 -> this.getOrCreate(debug1.target).entries.put(debug1.type, debug1.value)); // MagmaCube - decompile fix
     }
 
     private static int mergeValuesForTransfer(int debug0, int debug1) {
@@ -160,7 +160,7 @@ public class GossipContainer {
         public void makeSureValueIsntTooLowOrTooHigh(GossipType debug1) {
             int debug2 = this.entries.getInt((Object)debug1);
             if (debug2 > debug1.max) {
-                this.entries.put((Object)debug1, debug1.max);
+                this.entries.put(debug1, debug1.max); // MagmaCube - decompile fix
             }
             if (debug2 < 2) {
                 this.remove(debug1);
@@ -192,11 +192,11 @@ public class GossipContainer {
         }
 
         public <T> Dynamic<T> store(DynamicOps<T> debug1) {
-            return new Dynamic(debug1, debug1.createMap((Map)ImmutableMap.of((Object)debug1.createString("Target"), SerializableUUID.CODEC.encodeStart(debug1, (Object)this.target).result().orElseThrow(RuntimeException::new), (Object)debug1.createString("Type"), (Object)debug1.createString(this.type.id), (Object)debug1.createString("Value"), (Object)debug1.createInt(this.value))));
+            return new Dynamic(debug1, debug1.createMap((Map)ImmutableMap.of((Object)debug1.createString("Target"), SerializableUUID.CODEC.encodeStart(debug1, this.target).result().orElseThrow(RuntimeException::new), (Object)debug1.createString("Type"), (Object)debug1.createString(this.type.id), (Object)debug1.createString("Value"), (Object)debug1.createInt(this.value)))); // MagmaCube - decompile fix
         }
 
         public static DataResult<GossipEntry> load(Dynamic<?> debug0) {
-            return DataResult.unbox((App)DataResult.instance().group((App)debug0.get("Target").read(SerializableUUID.CODEC), (App)debug0.get("Type").asString().map(GossipType::byId), (App)debug0.get("Value").asNumber().map(Number::intValue)).apply((Applicative)DataResult.instance(), GossipEntry::new));
+            return DataResult.unbox((App)DataResult.instance().group(debug0.get("Target").read(SerializableUUID.CODEC), debug0.get("Type").asString().map(GossipType::byId), debug0.get("Value").asNumber().map(Number::intValue)).apply(DataResult.instance(), GossipEntry::new)); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/memory/ExpirableValue.java b/src/main/java/net/minecraft/world/entity/ai/memory/ExpirableValue.java
index e815231f363e48f931b7c920f25590414f37b620..4bcf8e2126c6ee6ad37961f043cba133afcd52a9 100644
--- a/src/main/java/net/minecraft/world/entity/ai/memory/ExpirableValue.java
+++ b/src/main/java/net/minecraft/world/entity/ai/memory/ExpirableValue.java
@@ -48,6 +48,6 @@ public class ExpirableValue<T>
     }
     
     public static <T> Codec<ExpirableValue<T>> codec(final Codec<T> debug0) {
-        return (Codec<ExpirableValue<T>>)RecordCodecBuilder.create(debug1 -> ((RecordCodecBuilder.Instance)debug1).group((App)debug0.fieldOf("value").forGetter(debug0 -> debug0.value), (App)Codec.LONG.optionalFieldOf("ttl").forGetter(debug0 -> debug0.canExpire() ? Optional.of(debug0.timeToLive) : Optional.empty())).apply(debug1, (debug0, debug1) -> new ExpirableValue(debug0, debug1.orElse(Long.MAX_VALUE))));
+        return (Codec<ExpirableValue<T>>)RecordCodecBuilder.<ExpirableValue<T>>create(debug1 -> debug1.group(debug0.fieldOf("value").forGetter(debug0l -> debug0l.value), Codec.LONG.optionalFieldOf("ttl").forGetter(debug0l -> debug0l.canExpire() ? Optional.of(debug0l.timeToLive) : Optional.empty())).apply(debug1, (debug0l, debug1l) -> new ExpirableValue(debug0l, debug1l.orElse(Long.MAX_VALUE)))); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
index 0765a0cc13ae109e53fc9b08afcee8e5f5c4dd43..d5de4f9229072493a30da53dd91ca90f03c36d2b 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
@@ -113,12 +113,12 @@ public abstract class PathNavigation {
 
     @Nullable
     public Path createPath(BlockPos debug1, int debug2) {
-        return this.createPath((Set<BlockPos>)ImmutableSet.of((Object)debug1), 8, false, debug2);
+        return this.createPath((Set<BlockPos>)ImmutableSet.of(debug1), 8, false, debug2); // MagmaCube - decompile fix
     }
 
     @Nullable
     public Path createPath(Entity debug1, int debug2) {
-        return this.createPath((Set<BlockPos>)ImmutableSet.of((Object)debug1.blockPosition()), 16, true, debug2);
+        return this.createPath((Set<BlockPos>)ImmutableSet.of(debug1.blockPosition()), 16, true, debug2); // MagmaCube - decompile fix
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/AdultSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/AdultSensor.java
index ceceb55dc4946251168c4ce9e2b954510edb341d..2153eedaae7846af9f41d1e9244efaf61b558403 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/AdultSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/AdultSensor.java
@@ -13,16 +13,16 @@ public class AdultSensor extends Sensor<AgableMob>
 {
     @Override
     public Set<MemoryModuleType<?>> requires() {
-        return (Set<MemoryModuleType<?>>)ImmutableSet.of((Object)MemoryModuleType.NEAREST_VISIBLE_ADULT, (Object)MemoryModuleType.VISIBLE_LIVING_ENTITIES);
+        return ImmutableSet.of(MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.VISIBLE_LIVING_ENTITIES); // MagmaCube - decompile fix
     }
     
     @Override
     protected void doTick(final ServerLevel debug1, final AgableMob debug2) {
-        debug2.getBrain().getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).ifPresent(debug2 -> this.setNearestVisibleAdult(debug2, debug2));
+        debug2.getBrain().getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).ifPresent(debug2l -> this.setNearestVisibleAdult(debug2, debug2l)); // MagmaCube - decompile fix
     }
     
     private void setNearestVisibleAdult(final AgableMob debug1, final List<LivingEntity> debug2) {
-        final Optional<AgableMob> debug3 = debug2.stream().filter(debug1 -> debug1.getType() == debug1.getType()).map(debug0 -> debug0).filter(debug0 -> !debug0.isBaby()).findFirst();
+        final Optional<AgableMob> debug3 = debug2.stream().filter(debug1l -> debug1l.getType() == debug1.getType()).map(debug0 -> (AgableMob) debug0).filter(debug0 -> !debug0.isBaby()).findFirst(); // MagmaCube - decompile fix
         debug1.getBrain().setMemory(MemoryModuleType.NEAREST_VISIBLE_ADULT, debug3);
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/DummySensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/DummySensor.java
index eab3d364fba2eb97633344db27853403cf96c8ee..0271aebf22d27c3adfb8ba1dac649c673c259676 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/DummySensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/DummySensor.java
@@ -14,6 +14,6 @@ public class DummySensor extends Sensor<LivingEntity>
     
     @Override
     public Set<MemoryModuleType<?>> requires() {
-        return (Set<MemoryModuleType<?>>)ImmutableSet.of();
+        return ImmutableSet.of(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/GolemSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/GolemSensor.java
index a386aa59db26a0286329f36e526a10c83ca1306c..f42d14243acb1fea9d54fbfe0a3ef1b5c40aa6f9 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/GolemSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/GolemSensor.java
@@ -26,7 +26,7 @@ public class GolemSensor extends Sensor<LivingEntity>
     
     @Override
     public Set<MemoryModuleType<?>> requires() {
-        return (Set<MemoryModuleType<?>>)ImmutableSet.of((Object)MemoryModuleType.LIVING_ENTITIES);
+        return ImmutableSet.of(MemoryModuleType.LIVING_ENTITIES); // MagmaCube - decompile fix
     }
     
     public static void checkForNearbyGolem(final LivingEntity debug0) {
@@ -34,7 +34,7 @@ public class GolemSensor extends Sensor<LivingEntity>
         if (!debug.isPresent()) {
             return;
         }
-        final boolean debug2 = debug.get().stream().anyMatch(debug0 -> debug0.getType().equals(EntityType.IRON_GOLEM));
+        final boolean debug2 = debug.get().stream().anyMatch(debug0l -> debug0l.getType().equals(EntityType.IRON_GOLEM)); // MagmaCube - decompile fix
         if (debug2) {
             golemDetected(debug0);
         }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/HoglinSpecificSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/HoglinSpecificSensor.java
index b83b55479ff46a53304da6e50e2cc3eca2dd93fe..c9c1451682e53ff85c24f52be795b50debd7eaca 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/HoglinSpecificSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/HoglinSpecificSensor.java
@@ -22,7 +22,7 @@ public class HoglinSpecificSensor extends Sensor<Hoglin>
 {
     @Override
     public Set<MemoryModuleType<?>> requires() {
-        return (Set<MemoryModuleType<?>>)ImmutableSet.of((Object)MemoryModuleType.VISIBLE_LIVING_ENTITIES, (Object)MemoryModuleType.NEAREST_REPELLENT, (Object)MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, (Object)MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, (Object)MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, (Object)MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, (Object[])new MemoryModuleType[0]);
+        return ImmutableSet.of(MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT); // MagmaCube - decompile fix
     }
     
     @Override
@@ -31,13 +31,13 @@ public class HoglinSpecificSensor extends Sensor<Hoglin>
         debug3.setMemory(MemoryModuleType.NEAREST_REPELLENT, this.findNearestRepellent(debug1, debug2));
         Optional<Piglin> debug4 = Optional.empty();
         int debug5 = 0;
-        final List<Hoglin> debug6 = (List<Hoglin>)Lists.newArrayList();
+        final List<Hoglin> debug6 = Lists.newArrayList(); // MagmaCube - decompile fix
         final List<LivingEntity> debug7 = debug3.getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).orElse(Lists.newArrayList());
         for (final LivingEntity debug8 : debug7) {
             if (debug8 instanceof Piglin && !debug8.isBaby()) {
                 ++debug5;
                 if (!debug4.isPresent()) {
-                    debug4 = Optional.of(debug8);
+                    debug4 = Optional.of((Piglin) debug8); // MagmaCube - decompile fix
                 }
             }
             if (debug8 instanceof Hoglin && !debug8.isBaby()) {
@@ -51,6 +51,6 @@ public class HoglinSpecificSensor extends Sensor<Hoglin>
     }
     
     private Optional<BlockPos> findNearestRepellent(final ServerLevel debug1, final Hoglin debug2) {
-        return BlockPos.findClosestMatch(debug2.blockPosition(), 8, 4, debug1 -> debug1.getBlockState(debug1).is(BlockTags.HOGLIN_REPELLENTS));
+        return BlockPos.findClosestMatch(debug2.blockPosition(), 8, 4, debug1l -> debug1.getBlockState(debug1l).is(BlockTags.HOGLIN_REPELLENTS)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/HurtBySensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/HurtBySensor.java
index e953d1bc14693d6a2414d4cdbc224fba0889f82e..76a57c02b7c56a3271fb6ae7a4f199ca71ec0e00 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/HurtBySensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/HurtBySensor.java
@@ -13,7 +13,7 @@ public class HurtBySensor extends Sensor<LivingEntity>
 {
     @Override
     public Set<MemoryModuleType<?>> requires() {
-        return (Set<MemoryModuleType<?>>)ImmutableSet.of((Object)MemoryModuleType.HURT_BY, (Object)MemoryModuleType.HURT_BY_ENTITY);
+        return ImmutableSet.of(MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY); // MagmaCube - decompile fix
     }
     
     @Override
@@ -30,10 +30,9 @@ public class HurtBySensor extends Sensor<LivingEntity>
         else {
             debug3.eraseMemory(MemoryModuleType.HURT_BY);
         }
-        final Brain brain;
-        debug3.getMemory(MemoryModuleType.HURT_BY_ENTITY).ifPresent(debug2 -> {
-            if (!debug2.isAlive() || debug2.level != debug1) {
-                brain.eraseMemory(MemoryModuleType.HURT_BY_ENTITY);
+        debug3.getMemory(MemoryModuleType.HURT_BY_ENTITY).ifPresent(debug2l -> { // MagmaCube - decompile fix
+            if (!debug2l.isAlive() || debug2l.level != debug1) { // MagmaCube - decompile fix
+                debug3.eraseMemory(MemoryModuleType.HURT_BY_ENTITY); // MagmaCube - decompile fix
             }
         });
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/NearestBedSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/NearestBedSensor.java
index 9437edb34af1aa430912f68132a0582d9a6b5c2b..f5e5230240af9bfa24592e192cc00b7a7b35478e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/NearestBedSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/NearestBedSensor.java
@@ -29,7 +29,7 @@ public class NearestBedSensor extends Sensor<Mob>
     
     @Override
     public Set<MemoryModuleType<?>> requires() {
-        return (Set<MemoryModuleType<?>>)ImmutableSet.of((Object)MemoryModuleType.NEAREST_BED);
+        return ImmutableSet.of(MemoryModuleType.NEAREST_BED); // MagmaCube - decompile fix
     }
     
     @Override
@@ -40,9 +40,8 @@ public class NearestBedSensor extends Sensor<Mob>
         this.triedCount = 0;
         this.lastUpdate = debug1.getGameTime() + debug1.getRandom().nextInt(20);
         final PoiManager debug3 = debug1.getPoiManager();
-        final long debug5;
-        final Predicate<BlockPos> debug4 = debug1 -> {
-            debug5 = debug1.asLong();
+        final Predicate<BlockPos> debug4 = debug1l -> { // MagmaCube - decompile fix
+            long debug5 = debug1l.asLong(); // MagmaCube - decompile fix
             if (this.batchCache.containsKey(debug5)) {
                 return false;
             }
@@ -64,7 +63,7 @@ public class NearestBedSensor extends Sensor<Mob>
             }
         }
         else if (this.triedCount < 5) {
-            this.batchCache.long2LongEntrySet().removeIf(debug1 -> debug1.getLongValue() < this.lastUpdate);
+            this.batchCache.long2LongEntrySet().removeIf(debug1l -> debug1l.getLongValue() < this.lastUpdate); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/NearestItemSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/NearestItemSensor.java
index 03b2d2ed28ed0e0d8dbb0bbde23a43d599e59e0c..3558c6425140d235003dad6d81506f3c556c640b 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/NearestItemSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/NearestItemSensor.java
@@ -19,7 +19,7 @@ public class NearestItemSensor extends Sensor<Mob>
 {
     @Override
     public Set<MemoryModuleType<?>> requires() {
-        return (Set<MemoryModuleType<?>>)ImmutableSet.of((Object)MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM);
+        return ImmutableSet.of(MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM); // MagmaCube - decompile fix
     }
     
     @Override
@@ -27,7 +27,7 @@ public class NearestItemSensor extends Sensor<Mob>
         final Brain<?> debug3 = debug2.getBrain();
         final List<ItemEntity> debug4 = debug1.getEntitiesOfClass((Class<? extends ItemEntity>)ItemEntity.class, debug2.getBoundingBox().inflate(8.0, 4.0, 8.0), debug0 -> true);
         debug4.sort(Comparator.comparingDouble((ToDoubleFunction<? super ItemEntity>)debug2::distanceToSqr));
-        final Optional<ItemEntity> debug5 = debug4.stream().filter(debug1 -> debug2.wantsToPickUp(debug1.getItem())).filter(debug1 -> debug1.closerThan(debug2, 9.0)).filter(debug2::canSee).findFirst();
+        final Optional<ItemEntity> debug5 = debug4.stream().filter(debug1l -> debug2.wantsToPickUp(debug1l.getItem())).filter(debug1l -> debug1l.closerThan(debug2, 9.0)).filter(debug2::canSee).findFirst(); // MagmaCube - decompile fix
         debug3.setMemory(MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, debug5);
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinBruteSpecificSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinBruteSpecificSensor.java
index a82708974b721c7f6e1e5bb4c15b420c97468357..64358c9cde51f2385fa514c29735b374e1df7e28 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinBruteSpecificSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinBruteSpecificSensor.java
@@ -20,22 +20,22 @@ public class PiglinBruteSpecificSensor extends Sensor<LivingEntity>
 {
     @Override
     public Set<MemoryModuleType<?>> requires() {
-        return (Set<MemoryModuleType<?>>)ImmutableSet.of((Object)MemoryModuleType.VISIBLE_LIVING_ENTITIES, (Object)MemoryModuleType.NEAREST_VISIBLE_NEMESIS, (Object)MemoryModuleType.NEARBY_ADULT_PIGLINS);
+        return ImmutableSet.of(MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.NEARBY_ADULT_PIGLINS); // MagmaCube - decompile fix
     }
     
     @Override
     protected void doTick(final ServerLevel debug1, final LivingEntity debug2) {
         final Brain<?> debug3 = debug2.getBrain();
         Optional<Mob> debug4 = Optional.empty();
-        final List<AbstractPiglin> debug5 = (List<AbstractPiglin>)Lists.newArrayList();
-        final List<LivingEntity> debug6 = debug3.getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).orElse((List<LivingEntity>)ImmutableList.of());
+        final List<AbstractPiglin> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
+        final List<LivingEntity> debug6 = debug3.getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).orElse(ImmutableList.of()); // MagmaCube - decompile fix
         for (final LivingEntity debug7 : debug6) {
             if (debug7 instanceof WitherSkeleton || debug7 instanceof WitherBoss) {
-                debug4 = Optional.of(debug7);
+                debug4 = Optional.of((Mob) debug7); // MagmaCube - decompile fix
                 break;
             }
         }
-        final List<LivingEntity> debug8 = debug3.getMemory(MemoryModuleType.LIVING_ENTITIES).orElse((List<LivingEntity>)ImmutableList.of());
+        final List<LivingEntity> debug8 = debug3.getMemory(MemoryModuleType.LIVING_ENTITIES).orElse(ImmutableList.of()); // MagmaCube - decompile fix
         for (final LivingEntity debug9 : debug8) {
             if (debug9 instanceof AbstractPiglin && ((AbstractPiglin)debug9).isAdult()) {
                 debug5.add((AbstractPiglin)debug9);
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinSpecificSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinSpecificSensor.java
index d362e9e6ea92eb909f0e7ce6bd8f27923fe3c849..f8d8a33ad6ddbe783789a09e7b97c2b744389c4f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinSpecificSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinSpecificSensor.java
@@ -34,7 +34,7 @@ public class PiglinSpecificSensor extends Sensor<LivingEntity>
 {
     @Override
     public Set<MemoryModuleType<?>> requires() {
-        return (Set<MemoryModuleType<?>>)ImmutableSet.of((Object)MemoryModuleType.VISIBLE_LIVING_ENTITIES, (Object)MemoryModuleType.LIVING_ENTITIES, (Object)MemoryModuleType.NEAREST_VISIBLE_NEMESIS, (Object)MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD, (Object)MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM, (Object)MemoryModuleType.NEAREST_VISIBLE_HUNTABLE_HOGLIN, (Object[])new MemoryModuleType[] { MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS, MemoryModuleType.NEARBY_ADULT_PIGLINS, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_REPELLENT });
+        return ImmutableSet.of(MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD, MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM, MemoryModuleType.NEAREST_VISIBLE_HUNTABLE_HOGLIN, new MemoryModuleType[] { MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS, MemoryModuleType.NEARBY_ADULT_PIGLINS, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_REPELLENT }); // MagmaCube - decompile fix
     }
     
     @Override
@@ -49,9 +49,9 @@ public class PiglinSpecificSensor extends Sensor<LivingEntity>
         Optional<Player> debug9 = Optional.empty();
         Optional<Player> debug10 = Optional.empty();
         int debug11 = 0;
-        final List<AbstractPiglin> debug12 = (List<AbstractPiglin>)Lists.newArrayList();
-        final List<AbstractPiglin> debug13 = (List<AbstractPiglin>)Lists.newArrayList();
-        final List<LivingEntity> debug14 = debug3.getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).orElse((List<LivingEntity>)ImmutableList.of());
+        final List<AbstractPiglin> debug12 = Lists.newArrayList(); // MagmaCube - decompile fix
+        final List<AbstractPiglin> debug13 = Lists.newArrayList(); // MagmaCube - decompile fix
+        final List<LivingEntity> debug14 = debug3.getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).orElse(ImmutableList.of()); // MagmaCube - decompile fix
         for (final LivingEntity debug15 : debug14) {
             if (debug15 instanceof Hoglin) {
                 final Hoglin debug16 = (Hoglin)debug15;
@@ -95,7 +95,7 @@ public class PiglinSpecificSensor extends Sensor<LivingEntity>
                 debug10 = Optional.of(debug18);
             }
             else if (!debug4.isPresent() && (debug15 instanceof WitherSkeleton || debug15 instanceof WitherBoss)) {
-                debug4 = Optional.of(debug15);
+                debug4 = Optional.of((Mob) debug15); // MagmaCube - decompile fix
             }
             else {
                 if (debug8.isPresent() || !PiglinAi.isZombified(debug15.getType())) {
@@ -104,7 +104,7 @@ public class PiglinSpecificSensor extends Sensor<LivingEntity>
                 debug8 = Optional.of(debug15);
             }
         }
-        final List<LivingEntity> debug19 = debug3.getMemory(MemoryModuleType.LIVING_ENTITIES).orElse((List<LivingEntity>)ImmutableList.of());
+        final List<LivingEntity> debug19 = debug3.getMemory(MemoryModuleType.LIVING_ENTITIES).orElse(ImmutableList.of()); // MagmaCube - decompile fix
         for (final LivingEntity debug20 : debug19) {
             if (debug20 instanceof AbstractPiglin && ((AbstractPiglin)debug20).isAdult()) {
                 debug13.add((AbstractPiglin)debug20);
@@ -123,7 +123,7 @@ public class PiglinSpecificSensor extends Sensor<LivingEntity>
     }
     
     private static Optional<BlockPos> findNearestRepellent(final ServerLevel debug0, final LivingEntity debug1) {
-        return BlockPos.findClosestMatch(debug1.blockPosition(), 8, 4, debug1 -> isValidRepellent(debug0, debug1));
+        return BlockPos.findClosestMatch(debug1.blockPosition(), 8, 4, debug1l -> isValidRepellent(debug0, debug1l)); // MagmaCube - decompile fix
     }
     
     private static boolean isValidRepellent(final ServerLevel debug0, final BlockPos debug1) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/PlayerSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/PlayerSensor.java
index 35ea9b152b008ee3188c5a8eb54811cb1f159822..86119db523eab7dbce4a4f4e6f289144985b8353 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/PlayerSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/PlayerSensor.java
@@ -30,12 +30,12 @@ extends Sensor<LivingEntity> {
 
     @Override
     protected void doTick(ServerLevel debug12, LivingEntity debug2) {
-        List debug3 = debug12.players().stream().filter(EntitySelector.NO_SPECTATORS).filter(debug1 -> debug2.closerThan((Entity)debug1, 16.0)).sorted(Comparator.comparingDouble(debug2::distanceToSqr)).collect(Collectors.toList());
+        List<Player> debug3 = debug12.players().stream().filter(EntitySelector.NO_SPECTATORS).filter(debug1 -> debug2.closerThan((Entity)debug1, 16.0)).sorted(Comparator.comparingDouble(debug2::distanceToSqr)).collect(Collectors.toList()); // MagmaCube - decompile fix
         Brain<?> debug4 = debug2.getBrain();
         debug4.setMemory(MemoryModuleType.NEAREST_PLAYERS, debug3);
-        List debug5 = debug3.stream().filter(debug1 -> PlayerSensor.isEntityTargetable(debug2, debug1)).collect(Collectors.toList());
+        List<Entity> debug5 = debug3.stream().filter(debug1 -> PlayerSensor.isEntityTargetable(debug2, debug1)).collect(Collectors.toList()); // MagmaCube - decompile fix
         debug4.setMemory(MemoryModuleType.NEAREST_VISIBLE_PLAYER, debug5.isEmpty() ? null : (Player)debug5.get(0));
-        Optional<Entity> debug6 = debug5.stream().filter(EntitySelector.ATTACK_ALLOWED).findFirst();
+        Optional<Player> debug6 = (Optional<Player>) (Object) debug5.stream().filter(EntitySelector.ATTACK_ALLOWED).findFirst(); // MagmaCube - decompile fix
         debug4.setMemory(MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, debug6);
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/SecondaryPoiSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/SecondaryPoiSensor.java
index b8dfa312286084330824cc6a7d12d28db55c86d0..fedf22ce76de348ce340a129c5b2fc7f53a50d33 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/SecondaryPoiSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/SecondaryPoiSensor.java
@@ -24,7 +24,7 @@ public class SecondaryPoiSensor extends Sensor<Villager>
     protected void doTick(final ServerLevel debug1, final Villager debug2) {
         final ResourceKey<Level> debug3 = debug1.dimension();
         final BlockPos debug4 = debug2.blockPosition();
-        final List<GlobalPos> debug5 = (List<GlobalPos>)Lists.newArrayList();
+        final List<GlobalPos> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
         final int debug6 = 4;
         for (int debug7 = -4; debug7 <= 4; ++debug7) {
             for (int debug8 = -2; debug8 <= 2; ++debug8) {
@@ -47,6 +47,6 @@ public class SecondaryPoiSensor extends Sensor<Villager>
     
     @Override
     public Set<MemoryModuleType<?>> requires() {
-        return (Set<MemoryModuleType<?>>)ImmutableSet.of((Object)MemoryModuleType.SECONDARY_JOB_SITE);
+        return ImmutableSet.of(MemoryModuleType.SECONDARY_JOB_SITE); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensing.java b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensing.java
index fa5f2e4280ada2e85b45effee30fb70c58942914..a71905ece88ae8c27239e1fcafb50eb1bd3faf53 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensing.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensing.java
@@ -12,8 +12,8 @@ public class Sensing
     private final List<Entity> unseen;
     
     public Sensing(final Mob debug1) {
-        this.seen = (List<Entity>)Lists.newArrayList();
-        this.unseen = (List<Entity>)Lists.newArrayList();
+        this.seen = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.unseen = Lists.newArrayList(); // MagmaCube - decompile fix
         this.mob = debug1;
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
index ac488eba6f0aaeca3f347691ae33268d1fa8706c..21967fb05cc4b3d22926b265e967f6530a4d8c04 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
@@ -19,7 +19,7 @@ public class VillagerHostilesSensor extends Sensor<LivingEntity>
     
     @Override
     public Set<MemoryModuleType<?>> requires() {
-        return (Set<MemoryModuleType<?>>)ImmutableSet.of((Object)MemoryModuleType.NEAREST_HOSTILE);
+        return ImmutableSet.of(MemoryModuleType.NEAREST_HOSTILE); // MagmaCube - decompile fix
     }
     
     @Override
@@ -28,7 +28,7 @@ public class VillagerHostilesSensor extends Sensor<LivingEntity>
     }
     
     private Optional<LivingEntity> getNearestHostile(final LivingEntity debug1) {
-        return this.getVisibleEntities(debug1).flatMap(debug2 -> debug2.stream().filter(this::isHostile).filter(debug2 -> this.isClose(debug1, debug2)).min((debug2, debug3) -> this.compareMobDistance(debug1, debug2, debug3)));
+        return this.getVisibleEntities(debug1).flatMap(debug2 -> debug2.stream().filter(this::isHostile).filter(debug2l -> this.isClose(debug1, debug2l)).min((debug2ll, debug3) -> this.compareMobDistance(debug1, debug2ll, debug3))); // MagmaCube - decompile fix
     }
     
     private Optional<List<LivingEntity>> getVisibleEntities(final LivingEntity debug1) {
@@ -40,15 +40,15 @@ public class VillagerHostilesSensor extends Sensor<LivingEntity>
     }
     
     private boolean isClose(final LivingEntity debug1, final LivingEntity debug2) {
-        final float debug3 = (float)VillagerHostilesSensor.ACCEPTABLE_DISTANCE_FROM_HOSTILES.get((Object)debug2.getType());
+        final float debug3 = (float)VillagerHostilesSensor.ACCEPTABLE_DISTANCE_FROM_HOSTILES.get(debug2.getType()); // MagmaCube - decompile fix
         return debug2.distanceToSqr(debug1) <= debug3 * debug3;
     }
     
     private boolean isHostile(final LivingEntity debug1) {
-        return VillagerHostilesSensor.ACCEPTABLE_DISTANCE_FROM_HOSTILES.containsKey((Object)debug1.getType());
+        return VillagerHostilesSensor.ACCEPTABLE_DISTANCE_FROM_HOSTILES.containsKey(debug1.getType()); // MagmaCube - decompile fix
     }
     
     static {
-        ACCEPTABLE_DISTANCE_FROM_HOSTILES = ImmutableMap.builder().put((Object)EntityType.DROWNED, (Object)8.0f).put((Object)EntityType.EVOKER, (Object)12.0f).put((Object)EntityType.HUSK, (Object)8.0f).put((Object)EntityType.ILLUSIONER, (Object)12.0f).put((Object)EntityType.PILLAGER, (Object)15.0f).put((Object)EntityType.RAVAGER, (Object)12.0f).put((Object)EntityType.VEX, (Object)8.0f).put((Object)EntityType.VINDICATOR, (Object)10.0f).put((Object)EntityType.ZOGLIN, (Object)10.0f).put((Object)EntityType.ZOMBIE, (Object)8.0f).put((Object)EntityType.ZOMBIE_VILLAGER, (Object)8.0f).build();
+        ACCEPTABLE_DISTANCE_FROM_HOSTILES = (ImmutableMap<EntityType<?>, Float>) (Object) ImmutableMap.builder().put(EntityType.DROWNED, 8.0f).put(EntityType.EVOKER, 12.0f).put(EntityType.HUSK, 8.0f).put(EntityType.ILLUSIONER, 12.0f).put(EntityType.PILLAGER, 15.0f).put(EntityType.RAVAGER, 12.0f).put(EntityType.VEX, 8.0f).put(EntityType.VINDICATOR, 10.0f).put(EntityType.ZOGLIN, 10.0f).put(EntityType.ZOMBIE, 8.0f).put(EntityType.ZOMBIE_VILLAGER, 8.0f).build(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/ReputationEventType.java b/src/main/java/net/minecraft/world/entity/ai/village/ReputationEventType.java
index d5a5f1a3634f49cb6671161a35b9ee0b2a635457..1f9ac3fda27926794969f3dfbd0ea305e0811384 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/ReputationEventType.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/ReputationEventType.java
@@ -8,7 +8,7 @@ public interface ReputationEventType
     public static final ReputationEventType VILLAGER_KILLED = register("villager_killed");
     public static final ReputationEventType TRADE = register("trade");
     
-    default ReputationEventType register(final String debug0) {
+    static ReputationEventType register(final String debug0) { // MagmaCube - decompile fix
         return new ReputationEventType() {
             @Override
             public String toString() {
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
index 745f25530182a778e9ed1c1811a4b71a1cd952ff..b3184418436c76e5cd77965dcff4b1bbd95875fc 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -112,7 +112,7 @@ extends SectionStorage<PoiSection> {
     }
 
     public Optional<BlockPos> getRandom(Predicate<PoiType> debug12, Predicate<BlockPos> debug2, Occupancy debug3, BlockPos debug4, int debug5, Random debug6) {
-        List debug7 = this.getInRange(debug12, debug4, debug5, debug3).collect(Collectors.toList());
+        List<PoiRecord> debug7 = this.getInRange(debug12, debug4, debug5, debug3).collect(Collectors.toList()); // MagmaCube - decompile fix
         Collections.shuffle(debug7, debug6);
         return debug7.stream().filter(debug1 -> debug2.test(debug1.getPos())).findFirst().map(PoiRecord::getPos);
     }
@@ -136,7 +136,7 @@ extends SectionStorage<PoiSection> {
     }
 
     private boolean isVillageCenter(long debug1) {
-        Optional debug3 = this.get(debug1);
+        Optional<PoiSection> debug3 = this.get(debug1); // MagmaCube - decompile fix
         if (debug3 == null) {
             return false;
         }
@@ -162,14 +162,14 @@ extends SectionStorage<PoiSection> {
 
     public void checkConsistencyWithBlocks(ChunkPos debug1, LevelChunkSection debug2) {
         SectionPos debug3 = SectionPos.of(debug1, debug2.bottomBlockY() >> 4);
-        Util.ifElse(this.getOrLoad(debug3.asLong()), debug32 -> debug32.refresh(debug3 -> {
+        Util.ifElse(this.getOrLoad(debug3.asLong()), debug32 -> debug32.refresh(debug3l -> { // MagmaCube - decompile fix
             if (PoiManager.mayHavePoi(debug2)) {
-                this.updateFromSection(debug2, debug3, (BiConsumer<BlockPos, PoiType>)debug3);
+                this.updateFromSection(debug2, debug3, (BiConsumer<BlockPos, PoiType>)debug3l); // MagmaCube - decompile fix
             }
         }), () -> {
             if (PoiManager.mayHavePoi(debug2)) {
-                PoiSection debug3 = (PoiSection)this.getOrCreate(debug3.asLong());
-                this.updateFromSection(debug2, debug3, (arg_0, arg_1) -> debug3.add(arg_0, arg_1));
+                PoiSection debug3l = (PoiSection)this.getOrCreate(debug3.asLong()); // MagmaCube - decompile fix
+                this.updateFromSection(debug2, debug3, (arg_0, arg_1) -> debug3l.add(arg_0, arg_1)); // MagmaCube - decompile fix
             }
         });
     }
@@ -180,13 +180,13 @@ extends SectionStorage<PoiSection> {
 
     private void updateFromSection(LevelChunkSection debug1, SectionPos debug2, BiConsumer<BlockPos, PoiType> debug3) {
         debug2.blocksInside().forEach(debug22 -> {
-            BlockState debug3 = debug1.getBlockState(SectionPos.sectionRelative(debug22.getX()), SectionPos.sectionRelative(debug22.getY()), SectionPos.sectionRelative(debug22.getZ()));
-            PoiType.forState(debug3).ifPresent(debug2 -> debug3.accept((BlockPos)debug22, (PoiType)debug2));
+            BlockState debug3l = debug1.getBlockState(SectionPos.sectionRelative(debug22.getX()), SectionPos.sectionRelative(debug22.getY()), SectionPos.sectionRelative(debug22.getZ())); // MagmaCube - decompile fix
+            PoiType.forState(debug3l).ifPresent(debug2l -> debug3.accept((BlockPos)debug22, (PoiType)debug2l)); // MagmaCube - decompile fix
         });
     }
 
     public void ensureLoadedAndValid(LevelReader debug12, BlockPos debug2, int debug3) {
-        SectionPos.aroundChunk(new ChunkPos(debug2), Math.floorDiv(debug3, 16)).map(debug1 -> Pair.of((Object)debug1, this.getOrLoad(debug1.asLong()))).filter(debug0 -> ((Optional)debug0.getSecond()).map(PoiSection::isValid).orElse(false) == false).map(debug0 -> ((SectionPos)debug0.getFirst()).chunk()).filter(debug1 -> this.loadedChunks.add(debug1.toLong())).forEach(debug1 -> debug12.getChunk(debug1.x, debug1.z, ChunkStatus.EMPTY));
+        SectionPos.aroundChunk(new ChunkPos(debug2), Math.floorDiv(debug3, 16)).map(debug1 -> Pair.of((Object)debug1, this.getOrLoad(debug1.asLong()))).filter(debug0 -> (debug0.getSecond()).map(PoiSection::isValid).orElse(false) == false).map(debug0 -> ((SectionPos)debug0.getFirst()).chunk()).filter(debug1 -> this.loadedChunks.add(debug1.toLong())).forEach(debug1 -> debug12.getChunk(debug1.x, debug1.z, ChunkStatus.EMPTY)); // MagmaCube - decompile fix
     }
 
     final class DistanceTracker
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiRecord.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiRecord.java
index aaf551d9a8c828b3a2fd0b2e4d0f3dcc2f8d0dce..541d3151b0559ee2e25f2968edb1670533a0414e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiRecord.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiRecord.java
@@ -16,7 +16,7 @@ public class PoiRecord
     private final Runnable setDirty;
     
     public static Codec<PoiRecord> codec(final Runnable debug0) {
-        return (Codec<PoiRecord>)RecordCodecBuilder.create(debug1 -> ((RecordCodecBuilder.Instance)debug1).group((App)BlockPos.CODEC.fieldOf("pos").forGetter(debug0 -> debug0.pos), (App)Registry.POINT_OF_INTEREST_TYPE.fieldOf("type").forGetter(debug0 -> debug0.poiType), (App)Codec.INT.fieldOf("free_tickets").orElse((Object)0).forGetter(debug0 -> debug0.freeTickets), (App)RecordCodecBuilder.point((Object)debug0)).apply(debug1, PoiRecord::new));
+        return (Codec<PoiRecord>)RecordCodecBuilder.<PoiRecord>create(debug1 -> debug1.group(BlockPos.CODEC.fieldOf("pos").forGetter(debug0l -> debug0l.pos), Registry.POINT_OF_INTEREST_TYPE.fieldOf("type").forGetter(debug0l -> debug0l.poiType), Codec.INT.fieldOf("free_tickets").orElse(0).forGetter(debug0l -> debug0l.freeTickets), RecordCodecBuilder.point(debug0)).apply(debug1, PoiRecord::new)); // MagmaCube - decompile fix
     }
     
     private PoiRecord(final BlockPos debug1, final PoiType debug2, final int debug3, final Runnable debug4) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
index 3b211496aca78caebceb4dbf6efe49af84a7da2a..82f7601bd62fedb443ef0deace35473e4bc85288 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -34,23 +34,23 @@ public class PoiSection
     private boolean isValid;
     
     public static Codec<PoiSection> codec(final Runnable debug0) {
-        return (Codec<PoiSection>)RecordCodecBuilder.create(debug1 -> ((RecordCodecBuilder.Instance)debug1).group((App)RecordCodecBuilder.point((Object)debug0), (App)Codec.BOOL.optionalFieldOf("Valid", (Object)false).forGetter(debug0 -> debug0.isValid), (App)PoiRecord.codec(debug0).listOf().fieldOf("Records").forGetter(debug0 -> ImmutableList.copyOf((Collection)debug0.records.values()))).apply(debug1, PoiSection::new)).orElseGet((Consumer)Util.prefix("Failed to read POI section: ", PoiSection.LOGGER::error), () -> new PoiSection(debug0, false, (List<PoiRecord>)ImmutableList.of()));
+        return (Codec<PoiSection>)RecordCodecBuilder.<PoiSection>create(debug1 -> debug1.group(RecordCodecBuilder.point(debug0), Codec.BOOL.optionalFieldOf("Valid", false).forGetter(debug0l -> debug0l.isValid), PoiRecord.codec(debug0).listOf().fieldOf("Records").forGetter(debug0l -> ImmutableList.copyOf(debug0l.records.values()))).apply(debug1, PoiSection::new)).orElseGet(Util.prefix("Failed to read POI section: ", PoiSection.LOGGER::error), () -> new PoiSection(debug0, false, ImmutableList.of())); // MagmaCube - decompile fix
     }
     
     public PoiSection(final Runnable debug1) {
-        this(debug1, true, (List<PoiRecord>)ImmutableList.of());
+        this(debug1, true, ImmutableList.of()); // MagmaCube - decompile fix
     }
     
     private PoiSection(final Runnable debug1, final boolean debug2, final List<PoiRecord> debug3) {
         this.records = (Short2ObjectMap<PoiRecord>)new Short2ObjectOpenHashMap();
-        this.byType = (Map<PoiType, Set<PoiRecord>>)Maps.newHashMap();
+        this.byType = Maps.newHashMap(); // MagmaCube - decompile fix
         this.setDirty = debug1;
         this.isValid = debug2;
         debug3.forEach(this::add);
     }
     
     public Stream<PoiRecord> getRecords(final Predicate<PoiType> debug1, final PoiManager.Occupancy debug2) {
-        return this.byType.entrySet().stream().filter(debug1 -> debug1.test(debug1.getKey())).flatMap(debug0 -> debug0.getValue().stream()).filter(debug2.getTest());
+        return this.byType.entrySet().stream().filter(debug1l -> debug1.test(debug1l.getKey())).flatMap(debug0 -> debug0.getValue().stream()).filter(debug2.getTest()); // MagmaCube - decompile fix
     }
     
     public void add(final BlockPos debug1, final PoiType debug2) {
@@ -66,7 +66,7 @@ public class PoiSection
         final short debug4 = SectionPos.sectionRelativePos(debug2);
         final PoiRecord debug5 = (PoiRecord)this.records.get(debug4);
         if (debug5 == null) {
-            this.records.put(debug4, (Object)debug1);
+            this.records.put(debug4, debug1); // MagmaCube - decompile fix
             this.byType.computeIfAbsent(debug3, debug0 -> Sets.newHashSet()).add(debug1);
             return true;
         }
@@ -113,12 +113,9 @@ public class PoiSection
         if (!this.isValid) {
             final Short2ObjectMap<PoiRecord> debug4 = (Short2ObjectMap<PoiRecord>)new Short2ObjectOpenHashMap((Short2ObjectMap)this.records);
             this.clear();
-            final short debug5;
-            final Short2ObjectMap short2ObjectMap;
-            final PoiRecord debug6;
             debug1.accept((debug2, debug3) -> {
-                debug5 = SectionPos.sectionRelativePos(debug2);
-                debug6 = (PoiRecord)short2ObjectMap.computeIfAbsent(debug5, debug3 -> new PoiRecord(debug2, debug3, this.setDirty));
+                short debug5 = SectionPos.sectionRelativePos(debug2); // MagmaCube - decompile fix
+                PoiRecord debug6 = (PoiRecord)debug4.computeIfAbsent(debug5, debug3l -> new PoiRecord(debug2, debug3, this.setDirty)); // MagmaCube - decompile fix
                 this.add(debug6);
                 return;
             });
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiType.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiType.java
index a95016efcb38aa8f584ef7685e26d61a03d3a1d9..36f4b6ec069c0a9b8273448821616482e568ddf4 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiType.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiType.java
@@ -35,9 +35,9 @@ public class PoiType {
     private static final Supplier<Set<PoiType>> ALL_JOB_POI_TYPES = Suppliers.memoize(() -> Registry.VILLAGER_PROFESSION.stream().map(VillagerProfession::getJobPoiType).collect(Collectors.toSet()));
     public static final Predicate<PoiType> ALL_JOBS = debug0 -> ALL_JOB_POI_TYPES.get().contains(debug0);
     public static final Predicate<PoiType> ALL = debug0 -> true;
-    private static final Set<BlockState> BEDS = (Set)ImmutableList.of((Object)Blocks.RED_BED, (Object)Blocks.BLACK_BED, (Object)Blocks.BLUE_BED, (Object)Blocks.BROWN_BED, (Object)Blocks.CYAN_BED, (Object)Blocks.GRAY_BED, (Object)Blocks.GREEN_BED, (Object)Blocks.LIGHT_BLUE_BED, (Object)Blocks.LIGHT_GRAY_BED, (Object)Blocks.LIME_BED, (Object)Blocks.MAGENTA_BED, (Object)Blocks.ORANGE_BED, (Object[])new Block[]{Blocks.PINK_BED, Blocks.PURPLE_BED, Blocks.WHITE_BED, Blocks.YELLOW_BED}).stream().flatMap(debug0 -> debug0.getStateDefinition().getPossibleStates().stream()).filter(debug0 -> debug0.getValue(BedBlock.PART) == BedPart.HEAD).collect(ImmutableSet.toImmutableSet());
+    private static final Set<BlockState> BEDS = ImmutableList.of(Blocks.RED_BED, Blocks.BLACK_BED, Blocks.BLUE_BED, Blocks.BROWN_BED, Blocks.CYAN_BED, Blocks.GRAY_BED, Blocks.GREEN_BED, Blocks.LIGHT_BLUE_BED, Blocks.LIGHT_GRAY_BED, Blocks.LIME_BED, Blocks.MAGENTA_BED, Blocks.ORANGE_BED, new Block[]{Blocks.PINK_BED, Blocks.PURPLE_BED, Blocks.WHITE_BED, Blocks.YELLOW_BED}).stream().flatMap(debug0 -> debug0.getStateDefinition().getPossibleStates().stream()).filter(debug0 -> debug0.getValue(BedBlock.PART) == BedPart.HEAD).collect(ImmutableSet.toImmutableSet()); // MagmaCube - decompile fix
     private static final Map<BlockState, PoiType> TYPE_BY_STATE = Maps.newHashMap();
-    public static final PoiType UNEMPLOYED = PoiType.register("unemployed", (Set<BlockState>)ImmutableSet.of(), 1, ALL_JOBS, 1);
+    public static final PoiType UNEMPLOYED = PoiType.register("unemployed", ImmutableSet.of(), 1, ALL_JOBS, 1); // MagmaCube - decompile fix
     public static final PoiType ARMORER = PoiType.register("armorer", PoiType.getBlockStates(Blocks.BLAST_FURNACE), 1, 1);
     public static final PoiType BUTCHER = PoiType.register("butcher", PoiType.getBlockStates(Blocks.SMOKER), 1, 1);
     public static final PoiType CARTOGRAPHER = PoiType.register("cartographer", PoiType.getBlockStates(Blocks.CARTOGRAPHY_TABLE), 1, 1);
@@ -48,7 +48,7 @@ public class PoiType {
     public static final PoiType LEATHERWORKER = PoiType.register("leatherworker", PoiType.getBlockStates(Blocks.CAULDRON), 1, 1);
     public static final PoiType LIBRARIAN = PoiType.register("librarian", PoiType.getBlockStates(Blocks.LECTERN), 1, 1);
     public static final PoiType MASON = PoiType.register("mason", PoiType.getBlockStates(Blocks.STONECUTTER), 1, 1);
-    public static final PoiType NITWIT = PoiType.register("nitwit", (Set<BlockState>)ImmutableSet.of(), 1, 1);
+    public static final PoiType NITWIT = PoiType.register("nitwit", ImmutableSet.of(), 1, 1); // MagmaCube - decompile fix
     public static final PoiType SHEPHERD = PoiType.register("shepherd", PoiType.getBlockStates(Blocks.LOOM), 1, 1);
     public static final PoiType TOOLSMITH = PoiType.register("toolsmith", PoiType.getBlockStates(Blocks.SMITHING_TABLE), 1, 1);
     public static final PoiType WEAPONSMITH = PoiType.register("weaponsmith", PoiType.getBlockStates(Blocks.GRINDSTONE), 1, 1);
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
index e926cac2dbc6fd7332f31f06e8ba268976814cf3..a1f63758edc42950cc37e49afe400f26657ec303 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
@@ -110,7 +110,7 @@ public abstract class AbstractFish extends WaterAnimal
     protected void registerGoals() {
         super.registerGoals();
         this.goalSelector.addGoal(0, new PanicGoal(this, 1.25));
-        this.goalSelector.addGoal(2, new AvoidEntityGoal<Object>(this, Player.class, 8.0f, 1.6, 1.4, EntitySelector.NO_SPECTATORS::test));
+        this.goalSelector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0f, 1.6, 1.4, EntitySelector.NO_SPECTATORS::test)); // MagmaCube - decompile fix
         this.goalSelector.addGoal(4, new FishSwimGoal(this));
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java
index fd2f51cd03e588053b3016aa3e3c0725179c5617..a6bef8163b304593c076d2799d91450abc435c71 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java
@@ -96,7 +96,7 @@ public abstract class AbstractSchoolingFish extends AbstractFish
     }
     
     public void addFollowers(final Stream<AbstractSchoolingFish> debug1) {
-        debug1.limit(this.getMaxSchoolSize() - this.schoolSize).filter(debug1 -> debug1 != this).forEach(debug1 -> debug1.startFollowing(this));
+        debug1.limit(this.getMaxSchoolSize() - this.schoolSize).filter(debug1l -> debug1l != this).forEach(debug1l -> debug1l.startFollowing(this)); // MagmaCube - decompile fix
     }
     
     @Nullable
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index df9cbdc281b58e415666c3d7745b8cd843684837..b67fe213ebf12b260ed457c82704d91279d7d368 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -460,7 +460,7 @@ FlyingAnimal {
         if (debug2) {
             this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) | debug1));
         } else {
-            this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) & â¾debug1));
+            this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) & debug1)); // MagmaCube - decompile fix
         }
     }
 
@@ -591,11 +591,6 @@ FlyingAnimal {
         return debug1.closerThan(this.blockPosition(), (double)debug2);
     }
 
-    @Override
-    public /* synthetic */ AgableMob getBreedOffspring(ServerLevel serverLevel, AgableMob agableMob) {
-        return this.getBreedOffspring(serverLevel, agableMob);
-    }
-
     class BeeEnterHiveGoal
     extends BaseBeeGoal {
         private BeeEnterHiveGoal() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index 4ed9f9cc2ce3837b615afcfb3485eb8b4939a32a..159aaeddd5ce227eaad75b18776189b1eabb87f2 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -61,9 +61,7 @@ import net.minecraft.world.entity.animal.Rabbit;
 import net.minecraft.world.entity.animal.Turtle;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.item.DyeColor;
-import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.item.Items;
+import net.minecraft.world.item.*;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
@@ -370,30 +368,57 @@ extends TamableAnimal {
         return debug4;
     }
 
-    /*
-     * Exception decompiling
-     */
     @Override
     public InteractionResult mobInteract(Player debug1, InteractionHand debug2) {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Started 2 blocks at once
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.getStartingBlocks(Op04StructuredStatement.java:406)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:481)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - decompile fix
+        ItemStack debug3 = debug1.getItemInHand(debug2);
+        Item debug4 = debug3.getItem();
+        if (this.level.isClientSide) {
+            if (isTame() && isOwnedBy((LivingEntity)debug1))
+                return InteractionResult.SUCCESS;
+            if (isFood(debug3) && (getHealth() < getMaxHealth() || !isTame()))
+                return InteractionResult.SUCCESS;
+            return InteractionResult.PASS;
+        }
+        if (isTame()) {
+            if (isOwnedBy((LivingEntity)debug1))
+                if (debug4 instanceof DyeItem) {
+                    DyeColor dyeColor = ((DyeItem)debug4).getDyeColor();
+                    if (dyeColor != getCollarColor()) {
+                        setCollarColor(dyeColor);
+                        if (!debug1.abilities.instabuild)
+                            debug3.shrink(1);
+                        setPersistenceRequired();
+                        return InteractionResult.CONSUME;
+                    }
+                } else {
+                    if (debug4.isEdible() && isFood(debug3) && getHealth() < getMaxHealth()) {
+                        usePlayerItem(debug1, debug3);
+                        heal(debug4.getFoodProperties().getNutrition());
+                        return InteractionResult.CONSUME;
+                    }
+                    InteractionResult interactionResult = super.mobInteract(debug1, debug2);
+                    if (!interactionResult.consumesAction() || isBaby())
+                        setOrderedToSit(!isOrderedToSit());
+                    return interactionResult;
+                }
+        } else if (isFood(debug3)) {
+            usePlayerItem(debug1, debug3);
+            if (this.random.nextInt(3) == 0) {
+                tame(debug1);
+                setOrderedToSit(true);
+                this.level.broadcastEntityEvent((Entity)this, (byte)7);
+            } else {
+                this.level.broadcastEntityEvent((Entity)this, (byte)6);
+            }
+            setPersistenceRequired();
+            return InteractionResult.CONSUME;
+        }
+        InteractionResult debug5 = super.mobInteract(debug1, debug2);
+        if (debug5.consumesAction())
+            setPersistenceRequired();
+        return debug5;
+        // MagmaCube end - decompile fix
     }
 
     @Override
@@ -422,11 +447,6 @@ extends TamableAnimal {
         }
     }
 
-    @Override
-    public /* synthetic */ AgableMob getBreedOffspring(ServerLevel serverLevel, AgableMob agableMob) {
-        return this.getBreedOffspring(serverLevel, agableMob);
-    }
-
     static class CatRelaxOnOwnerGoal
     extends Goal {
         private final Cat cat;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
index f0ea5cf2a826da1f670694022404a55c0f74ab65..2f31ef5d584b4bd5b7c2039abe1d4476bce86af8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
@@ -174,7 +174,7 @@ public class Dolphin extends WaterAnimal
         this.goalSelector.addGoal(6, new MeleeAttackGoal(this, 1.2000000476837158, true));
         this.goalSelector.addGoal(8, new PlayWithItemsGoal());
         this.goalSelector.addGoal(8, new FollowBoatGoal(this));
-        this.goalSelector.addGoal(9, new AvoidEntityGoal<Object>(this, Guardian.class, 8.0f, 1.0, 1.0));
+        this.goalSelector.addGoal(9, new AvoidEntityGoal<>(this, Guardian.class, 8.0f, 1.0, 1.0)); // MagmaCube - decompile fix
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[] { Guardian.class }).setAlertOthers((Class<?>[])new Class[0]));
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index 6aa9fb747a0b63533c6a4b8c22ce27d6edfa31a8..bb853f48171fbe7254694a7f6be6cb8cd4291d7a 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -398,7 +398,7 @@ extends Animal {
         if (debug2) {
             this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) | debug1));
         } else {
-            this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) & â¾debug1));
+            this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) & debug1)); // MagmaCube - decompile fix
         }
     }
 
@@ -633,11 +633,6 @@ extends Animal {
         return new Vec3(0.0, 0.55f * this.getEyeHeight(), this.getBbWidth() * 0.4f);
     }
 
-    @Override
-    public /* synthetic */ AgableMob getBreedOffspring(ServerLevel serverLevel, AgableMob agableMob) {
-        return this.getBreedOffspring(serverLevel, agableMob);
-    }
-
     class FoxLookAtPlayerGoal
     extends LookAtPlayerGoal {
         public FoxLookAtPlayerGoal(Mob debug2, Class<? extends LivingEntity> debug3, float debug4) {
@@ -1099,11 +1094,6 @@ extends Animal {
             }
             return !debug1.isSleeping() && !debug1.isDiscrete();
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((LivingEntity)object);
-        }
     }
 
     class SeekShelterGoal
diff --git a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
index d97972d0c0f18adba72b17dd0d08a7e290a3b5d0..38092ab6aace33ac8beef5d16e8c2ad9498b8b6e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
@@ -113,7 +113,7 @@ public class MushroomCow extends Cow implements Shearable
         if (debug3.getItem() == Items.SHEARS && this.readyForShearing()) {
             this.shear(SoundSource.PLAYERS);
             if (!this.level.isClientSide) {
-                debug3.hurtAndBreak(1, debug1, debug1 -> debug1.broadcastBreakEvent(debug2));
+                debug3.hurtAndBreak(1, debug1, debug1l -> debug1l.broadcastBreakEvent(debug2)); // MagmaCube - decompile fix
             }
             return InteractionResult.sidedSuccess(this.level.isClientSide);
         }
@@ -187,7 +187,7 @@ public class MushroomCow extends Cow implements Shearable
     @Override
     public void readAdditionalSaveData(final CompoundTag debug1) {
         super.readAdditionalSaveData(debug1);
-        this.setMushroomType(byType(debug1.getString("Type")));
+        this.setMushroomType(MushroomType.byType(debug1.getString("Type"))); // MagmaCube - decompile fix
         if (debug1.contains("EffectId", 1)) {
             this.effect = MobEffect.byId(debug1.getByte("EffectId"));
         }
@@ -202,7 +202,7 @@ public class MushroomCow extends Cow implements Shearable
             final Block debug3 = ((BlockItem)debug2).getBlock();
             if (debug3 instanceof FlowerBlock) {
                 final FlowerBlock debug4 = (FlowerBlock)debug3;
-                return Optional.of(Pair.of((Object)debug4.getSuspiciousStewEffect(), (Object)debug4.getEffectDuration()));
+                return Optional.of(Pair.of(debug4.getSuspiciousStewEffect(), debug4.getEffectDuration())); // MagmaCube - decompile fix
             }
         }
         return Optional.empty();
@@ -213,7 +213,7 @@ public class MushroomCow extends Cow implements Shearable
     }
     
     public MushroomType getMushroomType() {
-        return byType(this.entityData.get(MushroomCow.DATA_TYPE));
+        return MushroomType.byType(this.entityData.get(MushroomCow.DATA_TYPE)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
index 856d086abbc297ea992b10034e0baef1a4662b54..3c26a3db7d31336b20c573133bfe0109cd02e947 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
@@ -103,8 +103,8 @@ public class Ocelot extends Animal
         this.goalSelector.addGoal(9, new BreedGoal(this, 0.8));
         this.goalSelector.addGoal(10, new WaterAvoidingRandomStrollGoal(this, 0.8, 1.0000001E-5f));
         this.goalSelector.addGoal(11, new LookAtPlayerGoal(this, Player.class, 10.0f));
-        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<Object>(this, Chicken.class, false));
-        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<Object>(this, Turtle.class, 10, false, false, Turtle.BABY_ON_LAND_SELECTOR));
+        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Chicken.class, false)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, false, false, Turtle.BABY_ON_LAND_SELECTOR)); // MagmaCube - decompile fix
     }
     
     public void customServerAiStep() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Panda.java b/src/main/java/net/minecraft/world/entity/animal/Panda.java
index 8dde8f19e6097f4080e0e6acb0254cc4f20e95c2..ba91cb094786ca18e5d7c0ef96ee14420aaa3e95 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Panda.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Panda.java
@@ -213,7 +213,7 @@ public class Panda extends Animal
             this.entityData.set(Panda.DATA_ID_FLAGS, (byte)(debug3 | debug1));
         }
         else {
-            this.entityData.set(Panda.DATA_ID_FLAGS, (byte)(debug3 & â¾debug1));
+            this.entityData.set(Panda.DATA_ID_FLAGS, (byte)(debug3 & debug1)); // MagmaCube - decompile fix
         }
     }
     
@@ -249,8 +249,8 @@ public class Panda extends Animal
         this.goalSelector.addGoal(2, new PandaBreedGoal(this, 1.0));
         this.goalSelector.addGoal(3, new PandaAttackGoal(this, 1.2000000476837158, true));
         this.goalSelector.addGoal(4, new TemptGoal(this, 1.0, Ingredient.of(Blocks.BAMBOO.asItem()), false));
-        this.goalSelector.addGoal(6, new PandaAvoidGoal<Object>(this, Player.class, 8.0f, 2.0, 2.0));
-        this.goalSelector.addGoal(6, new PandaAvoidGoal<Object>(this, Monster.class, 4.0f, 2.0, 2.0));
+        this.goalSelector.addGoal(6, new PandaAvoidGoal<>(this, Player.class, 8.0f, 2.0, 2.0)); // MagmaCube - decompile fix
+        this.goalSelector.addGoal(6, new PandaAvoidGoal<>(this, Monster.class, 4.0f, 2.0, 2.0)); // MagmaCube - decompile fix
         this.goalSelector.addGoal(7, new PandaSitGoal());
         this.goalSelector.addGoal(8, new PandaLieOnBackGoal(this));
         this.goalSelector.addGoal(8, new PandaSneezeGoal(this));
@@ -268,7 +268,7 @@ public class Panda extends Animal
     }
     
     public Gene getVariant() {
-        return getVariantFromGenes(this.getMainGene(), this.getHiddenGene());
+        return Gene.getVariantFromGenes(this.getMainGene(), this.getHiddenGene()); // MagmaCube - decompile fix
     }
     
     public boolean isLazy() {
@@ -650,9 +650,8 @@ public class Panda extends Animal
         HIDDEN_GENE_ID = SynchedEntityData.defineId(Panda.class, EntityDataSerializers.BYTE);
         DATA_ID_FLAGS = SynchedEntityData.defineId(Panda.class, EntityDataSerializers.BYTE);
         BREED_TARGETING = new TargetingConditions().range(8.0).allowSameTeam().allowInvulnerable();
-        final Item debug;
         PANDA_ITEMS = (debug0 -> {
-            debug = debug0.getItem().getItem();
+            Item debug = debug0.getItem().getItem(); // MagmaCube - decompile fix
             return (debug == Blocks.BAMBOO.asItem() || debug == Blocks.CAKE.asItem()) && debug0.isAlive() && !debug0.hasPickUpDelay();
         });
     }
@@ -805,7 +804,7 @@ public class Panda extends Animal
                     this.lookAt = this.mob.level.getNearestPlayer(this.lookAtContext, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
                 }
                 else {
-                    this.lookAt = this.mob.level.getNearestLoadedEntity((Class<? extends Entity>)this.lookAtType, this.lookAtContext, (LivingEntity)this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ(), this.mob.getBoundingBox().inflate(this.lookDistance, 3.0, this.lookDistance));
+                    this.lookAt = this.mob.level.getNearestLoadedEntity(this.lookAtType, this.lookAtContext, (LivingEntity)this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ(), this.mob.getBoundingBox().inflate(this.lookDistance, 3.0, this.lookDistance)); // MagmaCube - decompile fix
                 }
             }
             return this.panda.canPerformAction() && this.lookAt != null;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Parrot.java b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
index fde6ed17f515a7b4e0c27226ca68c9c88d9cae7f..84e6ef2cc36d723a4cba2fe90ae5962e6d481e61 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Parrot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
@@ -392,41 +392,43 @@ public class Parrot extends ShoulderRidingEntity implements FlyingAnimal
             }
         };
         POISONOUS_FOOD = Items.COOKIE;
-        TAME_FOOD = Sets.newHashSet((Object[])new Item[] { Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS });
-        MOB_SOUND_MAP = Util.make((Map<EntityType<?>, SoundEvent>)Maps.newHashMap(), debug0 -> {
+        TAME_FOOD = Sets.newHashSet(new Item[] { Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS }); // MagmaCube - decompile fix
+        MOB_SOUND_MAP = Util.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
+            // MagmaCube start - decompile fix
             debug0.put(EntityType.BLAZE, SoundEvents.PARROT_IMITATE_BLAZE);
-            debug0.put((EntityType<Blaze>)EntityType.CAVE_SPIDER, SoundEvents.PARROT_IMITATE_SPIDER);
-            debug0.put((EntityType<Blaze>)EntityType.CREEPER, SoundEvents.PARROT_IMITATE_CREEPER);
-            debug0.put((EntityType<Blaze>)EntityType.DROWNED, SoundEvents.PARROT_IMITATE_DROWNED);
-            debug0.put((EntityType<Blaze>)EntityType.ELDER_GUARDIAN, SoundEvents.PARROT_IMITATE_ELDER_GUARDIAN);
-            debug0.put((EntityType<Blaze>)EntityType.ENDER_DRAGON, SoundEvents.PARROT_IMITATE_ENDER_DRAGON);
-            debug0.put((EntityType<Blaze>)EntityType.ENDERMITE, SoundEvents.PARROT_IMITATE_ENDERMITE);
-            debug0.put((EntityType<Blaze>)EntityType.EVOKER, SoundEvents.PARROT_IMITATE_EVOKER);
-            debug0.put((EntityType<Blaze>)EntityType.GHAST, SoundEvents.PARROT_IMITATE_GHAST);
-            debug0.put((EntityType<Blaze>)EntityType.GUARDIAN, SoundEvents.PARROT_IMITATE_GUARDIAN);
-            debug0.put((EntityType<Blaze>)EntityType.HOGLIN, SoundEvents.PARROT_IMITATE_HOGLIN);
-            debug0.put((EntityType<Blaze>)EntityType.HUSK, SoundEvents.PARROT_IMITATE_HUSK);
-            debug0.put((EntityType<Blaze>)EntityType.ILLUSIONER, SoundEvents.PARROT_IMITATE_ILLUSIONER);
-            debug0.put((EntityType<Blaze>)EntityType.MAGMA_CUBE, SoundEvents.PARROT_IMITATE_MAGMA_CUBE);
-            debug0.put((EntityType<Blaze>)EntityType.PHANTOM, SoundEvents.PARROT_IMITATE_PHANTOM);
-            debug0.put((EntityType<Blaze>)EntityType.PIGLIN, SoundEvents.PARROT_IMITATE_PIGLIN);
-            debug0.put((EntityType<Blaze>)EntityType.PIGLIN_BRUTE, SoundEvents.PARROT_IMITATE_PIGLIN_BRUTE);
-            debug0.put((EntityType<Blaze>)EntityType.PILLAGER, SoundEvents.PARROT_IMITATE_PILLAGER);
-            debug0.put((EntityType<Blaze>)EntityType.RAVAGER, SoundEvents.PARROT_IMITATE_RAVAGER);
-            debug0.put((EntityType<Blaze>)EntityType.SHULKER, SoundEvents.PARROT_IMITATE_SHULKER);
-            debug0.put((EntityType<Blaze>)EntityType.SILVERFISH, SoundEvents.PARROT_IMITATE_SILVERFISH);
-            debug0.put((EntityType<Blaze>)EntityType.SKELETON, SoundEvents.PARROT_IMITATE_SKELETON);
-            debug0.put((EntityType<Blaze>)EntityType.SLIME, SoundEvents.PARROT_IMITATE_SLIME);
-            debug0.put((EntityType<Blaze>)EntityType.SPIDER, SoundEvents.PARROT_IMITATE_SPIDER);
-            debug0.put((EntityType<Blaze>)EntityType.STRAY, SoundEvents.PARROT_IMITATE_STRAY);
-            debug0.put((EntityType<Blaze>)EntityType.VEX, SoundEvents.PARROT_IMITATE_VEX);
-            debug0.put((EntityType<Blaze>)EntityType.VINDICATOR, SoundEvents.PARROT_IMITATE_VINDICATOR);
-            debug0.put((EntityType<Blaze>)EntityType.WITCH, SoundEvents.PARROT_IMITATE_WITCH);
-            debug0.put((EntityType<Blaze>)EntityType.WITHER, SoundEvents.PARROT_IMITATE_WITHER);
-            debug0.put((EntityType<Blaze>)EntityType.WITHER_SKELETON, SoundEvents.PARROT_IMITATE_WITHER_SKELETON);
-            debug0.put((EntityType<Blaze>)EntityType.ZOGLIN, SoundEvents.PARROT_IMITATE_ZOGLIN);
-            debug0.put((EntityType<Blaze>)EntityType.ZOMBIE, SoundEvents.PARROT_IMITATE_ZOMBIE);
-            debug0.put((EntityType<Blaze>)EntityType.ZOMBIE_VILLAGER, SoundEvents.PARROT_IMITATE_ZOMBIE_VILLAGER);
+            debug0.put(EntityType.CAVE_SPIDER, SoundEvents.PARROT_IMITATE_SPIDER);
+            debug0.put(EntityType.CREEPER, SoundEvents.PARROT_IMITATE_CREEPER);
+            debug0.put(EntityType.DROWNED, SoundEvents.PARROT_IMITATE_DROWNED);
+            debug0.put(EntityType.ELDER_GUARDIAN, SoundEvents.PARROT_IMITATE_ELDER_GUARDIAN);
+            debug0.put(EntityType.ENDER_DRAGON, SoundEvents.PARROT_IMITATE_ENDER_DRAGON);
+            debug0.put(EntityType.ENDERMITE, SoundEvents.PARROT_IMITATE_ENDERMITE);
+            debug0.put(EntityType.EVOKER, SoundEvents.PARROT_IMITATE_EVOKER);
+            debug0.put(EntityType.GHAST, SoundEvents.PARROT_IMITATE_GHAST);
+            debug0.put(EntityType.GUARDIAN, SoundEvents.PARROT_IMITATE_GUARDIAN);
+            debug0.put(EntityType.HOGLIN, SoundEvents.PARROT_IMITATE_HOGLIN);
+            debug0.put(EntityType.HUSK, SoundEvents.PARROT_IMITATE_HUSK);
+            debug0.put(EntityType.ILLUSIONER, SoundEvents.PARROT_IMITATE_ILLUSIONER);
+            debug0.put(EntityType.MAGMA_CUBE, SoundEvents.PARROT_IMITATE_MAGMA_CUBE);
+            debug0.put(EntityType.PHANTOM, SoundEvents.PARROT_IMITATE_PHANTOM);
+            debug0.put(EntityType.PIGLIN, SoundEvents.PARROT_IMITATE_PIGLIN);
+            debug0.put(EntityType.PIGLIN_BRUTE, SoundEvents.PARROT_IMITATE_PIGLIN_BRUTE);
+            debug0.put(EntityType.PILLAGER, SoundEvents.PARROT_IMITATE_PILLAGER);
+            debug0.put(EntityType.RAVAGER, SoundEvents.PARROT_IMITATE_RAVAGER);
+            debug0.put(EntityType.SHULKER, SoundEvents.PARROT_IMITATE_SHULKER);
+            debug0.put(EntityType.SILVERFISH, SoundEvents.PARROT_IMITATE_SILVERFISH);
+            debug0.put(EntityType.SKELETON, SoundEvents.PARROT_IMITATE_SKELETON);
+            debug0.put(EntityType.SLIME, SoundEvents.PARROT_IMITATE_SLIME);
+            debug0.put(EntityType.SPIDER, SoundEvents.PARROT_IMITATE_SPIDER);
+            debug0.put(EntityType.STRAY, SoundEvents.PARROT_IMITATE_STRAY);
+            debug0.put(EntityType.VEX, SoundEvents.PARROT_IMITATE_VEX);
+            debug0.put(EntityType.VINDICATOR, SoundEvents.PARROT_IMITATE_VINDICATOR);
+            debug0.put(EntityType.WITCH, SoundEvents.PARROT_IMITATE_WITCH);
+            debug0.put(EntityType.WITHER, SoundEvents.PARROT_IMITATE_WITHER);
+            debug0.put(EntityType.WITHER_SKELETON, SoundEvents.PARROT_IMITATE_WITHER_SKELETON);
+            debug0.put(EntityType.ZOGLIN, SoundEvents.PARROT_IMITATE_ZOGLIN);
+            debug0.put(EntityType.ZOMBIE, SoundEvents.PARROT_IMITATE_ZOMBIE);
+            debug0.put(EntityType.ZOMBIE_VILLAGER, SoundEvents.PARROT_IMITATE_ZOMBIE_VILLAGER);
+            // MagmaCube end - decompile fix
         });
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
index 98730a5f612d827a90fe7b8f88547d1820342324..3295ad12ad90033cda06a2baca894b79d389c0df 100644
--- a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
+++ b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
@@ -92,9 +92,9 @@ public class PolarBear extends Animal implements NeutralMob
         this.goalSelector.addGoal(7, new RandomLookAroundGoal(this));
         this.targetSelector.addGoal(1, new PolarBearHurtByTargetGoal());
         this.targetSelector.addGoal(2, new PolarBearAttackPlayersGoal());
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, Player.class, 10, true, false, this::isAngryAt));
-        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<Object>(this, Fox.class, 10, true, true, null));
-        this.targetSelector.addGoal(5, new ResetUniversalAngerTargetGoal<Object>(this, false));
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Fox.class, 10, true, true, null)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(5, new ResetUniversalAngerTargetGoal<>(this, false)); // MagmaCube - decompile fix
     }
     
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
index 8ac52f7ea4cbf5b6875555fac007043b02612255..6b0698249a827870491784dea682f085cffa8fa4 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
@@ -191,7 +191,7 @@ public class Pufferfish extends AbstractFish
             if (debug0 == null) {
                 return false;
             }
-            else if (debug0 instanceof Player && (debug0.isSpectator() || debug0.isCreative())) {
+            else if (debug0 instanceof Player && (debug0.isSpectator() || ((Player) debug0).isCreative())) { // MagmaCube - decompile fix
                 return false;
             }
             else {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
index 9400a9bc097e75e4793a521dfe0d1231f6fe20b2..59592b88cf68c8bf2eb379c285bf6977df8129b2 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
@@ -87,9 +87,9 @@ public class Rabbit extends Animal
         this.goalSelector.addGoal(1, new RabbitPanicGoal(this, 2.2));
         this.goalSelector.addGoal(2, new BreedGoal(this, 0.8));
         this.goalSelector.addGoal(3, new TemptGoal(this, 1.0, Ingredient.of(Items.CARROT, Items.GOLDEN_CARROT, Blocks.DANDELION), false));
-        this.goalSelector.addGoal(4, new RabbitAvoidEntityGoal<Object>(this, Player.class, 8.0f, 2.2, 2.2));
-        this.goalSelector.addGoal(4, new RabbitAvoidEntityGoal<Object>(this, Wolf.class, 10.0f, 2.2, 2.2));
-        this.goalSelector.addGoal(4, new RabbitAvoidEntityGoal<Object>(this, Monster.class, 4.0f, 2.2, 2.2));
+        this.goalSelector.addGoal(4, new RabbitAvoidEntityGoal<>(this, Player.class, 8.0f, 2.2, 2.2)); // MagmaCube - decompile fix
+        this.goalSelector.addGoal(4, new RabbitAvoidEntityGoal<>(this, Wolf.class, 10.0f, 2.2, 2.2)); // MagmaCube - decompile fix
+        this.goalSelector.addGoal(4, new RabbitAvoidEntityGoal<>(this, Monster.class, 4.0f, 2.2, 2.2)); // MagmaCube - decompile fix
         this.goalSelector.addGoal(5, new RaidGardenGoal(this));
         this.goalSelector.addGoal(6, new WaterAvoidingRandomStrollGoal(this, 0.6));
         this.goalSelector.addGoal(11, new LookAtPlayerGoal(this, Player.class, 10.0f));
@@ -337,8 +337,8 @@ public class Rabbit extends Animal
             this.getAttribute(Attributes.ARMOR).setBaseValue(8.0);
             this.goalSelector.addGoal(4, new EvilRabbitAttackGoal(this));
             this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[0]).setAlertOthers((Class<?>[])new Class[0]));
-            this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Player.class, true));
-            this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Wolf.class, true));
+            this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true)); // MagmaCube - decompile fix
+            this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Wolf.class, true)); // MagmaCube - decompile fix
             if (!this.hasCustomName()) {
                 this.setCustomName(new TranslatableComponent(Util.makeDescriptionId("entity", Rabbit.KILLER_BUNNY)));
             }
@@ -537,7 +537,7 @@ public class Rabbit extends Animal
                         debug1.destroyBlock(debug2, true, this.rabbit);
                     }
                     else {
-                        debug1.setBlock(debug2, ((StateHolder<O, BlockState>)debug3).setValue((Property<Comparable>)CarrotBlock.AGE, debug5 - 1), 2);
+                        debug1.setBlock(debug2, debug3.setValue(CarrotBlock.AGE, debug5 - 1), 2); // MagmaCube - decompile fix
                         debug1.levelEvent(2001, debug2, Block.getId(debug3));
                     }
                     this.rabbit.moreCarrotTicks = 40;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Sheep.java b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
index c19ca58a0f207b3298d709f36012279fa0d1db57..37b1d373902baea8d132a5ffc355f74b24e1d13d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Sheep.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
@@ -89,7 +89,7 @@ implements Shearable {
         debug0.put(DyeColor.RED, Blocks.RED_WOOL);
         debug0.put(DyeColor.BLACK, Blocks.BLACK_WOOL);
     });
-    private static final Map<DyeColor, float[]> COLORARRAY_BY_COLOR = Maps.newEnumMap(Arrays.stream(DyeColor.values()).collect(Collectors.toMap(debug0 -> debug0, Sheep::createSheepColor)));
+    private static final Map<DyeColor, float[]> COLORARRAY_BY_COLOR = Maps.<DyeColor, float[]>newEnumMap(Arrays.stream(DyeColor.values()).collect(Collectors.toMap(debug0 -> debug0, Sheep::createSheepColor))); // MagmaCube - decompile fix
     private int eatAnimationTick;
     private EatBlockGoal eatBlockGoal;
 
@@ -391,10 +391,5 @@ implements Shearable {
     protected float getStandingEyeHeight(Pose debug1, EntityDimensions debug2) {
         return 0.95f * debug2.height;
     }
-
-    @Override
-    public /* synthetic */ AgableMob getBreedOffspring(ServerLevel serverLevel, AgableMob agableMob) {
-        return this.getBreedOffspring(serverLevel, agableMob);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
index ad2244e873c0007d614d5ec1ac61c176cb3af708..fb369dce44b158d1aa56101b9c9327c74ca099f9 100644
--- a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
@@ -57,7 +57,7 @@ public class SnowGolem extends AbstractGolem implements Shearable, RangedAttackM
         this.goalSelector.addGoal(2, new WaterAvoidingRandomStrollGoal(this, 1.0, 1.0000001E-5f));
         this.goalSelector.addGoal(3, new LookAtPlayerGoal(this, Player.class, 6.0f));
         this.goalSelector.addGoal(4, new RandomLookAroundGoal(this));
-        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<Object>(this, Mob.class, 10, true, false, debug0 -> debug0 instanceof Enemy));
+        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Mob.class, 10, true, false, debug0 -> debug0 instanceof Enemy)); // MagmaCube - decompile fix
     }
     
     public static AttributeSupplier.Builder createAttributes() {
@@ -139,7 +139,7 @@ public class SnowGolem extends AbstractGolem implements Shearable, RangedAttackM
         if (debug3.getItem() == Items.SHEARS && this.readyForShearing()) {
             this.shear(SoundSource.PLAYERS);
             if (!this.level.isClientSide) {
-                debug3.hurtAndBreak(1, debug1, debug1 -> debug1.broadcastBreakEvent(debug2));
+                debug3.hurtAndBreak(1, debug1, debug1l -> debug1l.broadcastBreakEvent(debug2)); // MagmaCube - decompile fix
             }
             return InteractionResult.sidedSuccess(this.level.isClientSide);
         }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Turtle.java b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
index acb8011f5571451c2ff483b9ad2d9fb59c0d0fdb..47fe16d33123ff7ee6df57e60c8897446dc2593a 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Turtle.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
@@ -527,7 +527,7 @@ public class Turtle extends Animal
         TurtleTemptGoal(final Turtle debug1, final double debug2, final Item debug4) {
             this.turtle = debug1;
             this.speedModifier = debug2;
-            this.items = (Set<Item>)Sets.newHashSet((Object[])new Item[] { debug4 });
+            this.items = (Set<Item>)Sets.newHashSet(new Item[] { debug4 }); // MagmaCube - decompile fix
             this.setFlags(EnumSet.of(Flag.MOVE, Flag.LOOK));
         }
         
@@ -637,7 +637,7 @@ public class Turtle extends Animal
                 else if (this.turtle.layEggCounter > 200) {
                     final Level debug2 = this.turtle.level;
                     debug2.playSound(null, debug1, SoundEvents.TURTLE_LAY_EGG, SoundSource.BLOCKS, 0.3f, 0.9f + debug2.random.nextFloat() * 0.2f);
-                    debug2.setBlock(this.blockPos.above(), ((StateHolder<O, BlockState>)Blocks.TURTLE_EGG.defaultBlockState()).setValue((Property<Comparable>)TurtleEggBlock.EGGS, this.turtle.random.nextInt(4) + 1), 3);
+                    debug2.setBlock(this.blockPos.above(), Blocks.TURTLE_EGG.defaultBlockState().setValue(TurtleEggBlock.EGGS, this.turtle.random.nextInt(4) + 1), 3); // MagmaCube - decompile fix
                     this.turtle.setHasEgg(false);
                     this.turtle.setLayingEgg(false);
                     this.turtle.setInLoveTime(600);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index 37654b618912cecadd746a644d688ed817890e2e..037e5b54cbbf4ed14c598739d0ab710c5f27e209 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -90,7 +90,7 @@ public class Wolf extends TamableAnimal implements NeutralMob
     protected void registerGoals() {
         this.goalSelector.addGoal(1, new FloatGoal(this));
         this.goalSelector.addGoal(2, new SitWhenOrderedToGoal(this));
-        this.goalSelector.addGoal(3, new WolfAvoidEntityGoal<Object>(this, Llama.class, 24.0f, 1.5, 1.5));
+        this.goalSelector.addGoal(3, new WolfAvoidEntityGoal<>(this, Llama.class, 24.0f, 1.5, 1.5)); // MagmaCube - decompile fix
         this.goalSelector.addGoal(4, new LeapAtTargetGoal(this, 0.4f));
         this.goalSelector.addGoal(5, new MeleeAttackGoal(this, 1.0, true));
         this.goalSelector.addGoal(6, new FollowOwnerGoal(this, 1.0, 10.0f, 2.0f, false));
@@ -102,11 +102,11 @@ public class Wolf extends TamableAnimal implements NeutralMob
         this.targetSelector.addGoal(1, new OwnerHurtByTargetGoal(this));
         this.targetSelector.addGoal(2, new OwnerHurtTargetGoal(this));
         this.targetSelector.addGoal(3, new HurtByTargetGoal(this, (Class<?>[])new Class[0]).setAlertOthers((Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<Object>(this, Player.class, 10, true, false, this::isAngryAt));
-        this.targetSelector.addGoal(5, new NonTameRandomTargetGoal<Object>(this, Animal.class, false, Wolf.PREY_SELECTOR));
-        this.targetSelector.addGoal(6, new NonTameRandomTargetGoal<Object>(this, Turtle.class, false, Turtle.BABY_ON_LAND_SELECTOR));
-        this.targetSelector.addGoal(7, new NearestAttackableTargetGoal<Object>(this, AbstractSkeleton.class, false));
-        this.targetSelector.addGoal(8, new ResetUniversalAngerTargetGoal<Object>(this, true));
+        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(5, new NonTameRandomTargetGoal<>(this, Animal.class, false, Wolf.PREY_SELECTOR)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(6, new NonTameRandomTargetGoal<>(this, Turtle.class, false, Turtle.BABY_ON_LAND_SELECTOR)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(7, new NearestAttackableTargetGoal<>(this, AbstractSkeleton.class, false)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(8, new ResetUniversalAngerTargetGoal<>(this, true)); // MagmaCube - decompile fix
     }
     
     public static AttributeSupplier.Builder createAttributes() {
@@ -503,9 +503,8 @@ public class Wolf extends TamableAnimal implements NeutralMob
         DATA_INTERESTED_ID = SynchedEntityData.defineId(Wolf.class, EntityDataSerializers.BOOLEAN);
         DATA_COLLAR_COLOR = SynchedEntityData.defineId(Wolf.class, EntityDataSerializers.INT);
         DATA_REMAINING_ANGER_TIME = SynchedEntityData.defineId(Wolf.class, EntityDataSerializers.INT);
-        final EntityType<?> debug;
         PREY_SELECTOR = (debug0 -> {
-            debug = debug0.getType();
+            EntityType<?> debug = debug0.getType(); // MagmaCube - decompile fix
             return debug == EntityType.SHEEP || debug == EntityType.RABBIT || debug == EntityType.FOX;
         });
         PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
index 22e92fa6753bbbe7c780326391161e1aee5ce769..df430b42c364d06ac36691f7b187e3fd92042f47 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
@@ -89,7 +89,7 @@ public abstract class AbstractChestedHorse extends AbstractHorse
                     final CompoundTag debug5 = new CompoundTag();
                     debug5.putByte("Slot", (byte)debug3);
                     debug4.save(debug5);
-                    ((AbstractList<CompoundTag>)debug2).add(debug5);
+                    debug2.add(debug5); // MagmaCube - decompile fix
                 }
             }
             debug1.put("Items", debug2);
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
index 9e8b21e676bae72ae928b8480a0a6c56386a119b..71959d991fe3d559109984c913c37fa8fae1cce3 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -140,7 +140,7 @@ Saddleable {
         if (debug2) {
             this.entityData.set(DATA_ID_FLAGS, (byte)(debug3 | debug1));
         } else {
-            this.entityData.set(DATA_ID_FLAGS, (byte)(debug3 & â¾debug1));
+            this.entityData.set(DATA_ID_FLAGS, (byte)(debug3 & debug1)); // MagmaCube - decompile fix
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
index e98ec2409997050b6f6e66889c31a3bbb45117e5..b92f0be770a9d4b05b0d6a8ee43a285ee1ae6f80 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
@@ -515,7 +515,7 @@ public class Llama extends AbstractChestedHorse implements RangedAttackMob
     static class LlamaAttackWolfGoal extends NearestAttackableTargetGoal<Wolf>
     {
         public LlamaAttackWolfGoal(final Llama debug1) {
-            super(debug1, Wolf.class, 16, false, true, debug0 -> !debug0.isTame());
+            super(debug1, Wolf.class, 16, false, true, debug0 -> !((Wolf)debug0).isTame()); // MagmaCube - decompile fix
         }
         
         @Override
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
index 20910e73b3434e42371cc4e75043195b1bd23d81..3973c4fee9187840b04f4891d57fd9628ba4c23b 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
@@ -661,7 +661,7 @@ public class EnderDragon extends Mob implements Enemy
     }
     
     private Path reconstructPath(final Node debug1, final Node debug2) {
-        final List<Node> debug3 = (List<Node>)Lists.newArrayList();
+        final List<Node> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
         Node debug4 = debug2;
         debug3.add(0, debug4);
         while (debug4.cameFrom != null) {
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonSittingScanningPhase.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonSittingScanningPhase.java
index abce664c8787e53b68176135d3a484bb50895522..bf25de1f5aa484bb27f437e9624ea833e2dbe36c 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonSittingScanningPhase.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonSittingScanningPhase.java
@@ -14,7 +14,7 @@ public class DragonSittingScanningPhase extends AbstractDragonSittingPhase
     
     public DragonSittingScanningPhase(final EnderDragon debug1) {
         super(debug1);
-        this.scanTargeting = new TargetingConditions().range(20.0).selector(debug1 -> Math.abs(debug1.getY() - debug1.getY()) <= 10.0);
+        this.scanTargeting = new TargetingConditions().range(20.0).selector(debug1l -> Math.abs(debug1l.getY() - debug1l.getY()) <= 10.0);
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 5abc8af0985511e4af25b714e4535c25b75c4aaa..d86e05c6abd94d2cadef8c3e9b7afb10f3ba1f60 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -95,7 +95,7 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
         this.goalSelector.addGoal(6, new LookAtPlayerGoal(this, Player.class, 8.0f));
         this.goalSelector.addGoal(7, new RandomLookAroundGoal(this));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Mob.class, 0, false, false, WitherBoss.LIVING_ENTITY_SELECTOR));
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Mob.class, 0, false, false, WitherBoss.LIVING_ENTITY_SELECTOR)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
index da1eeb0542bcbaaaab5462bb54c2c1b81c54fca9..611da9b761cdcc6db2bdb14b6c61d09d7e7d7a4d 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
@@ -211,7 +211,7 @@ public class ArmorStand extends LivingEntity
             if (!debug3.isEmpty()) {
                 debug3.save(debug4);
             }
-            ((AbstractList<CompoundTag>)debug2).add(debug4);
+            debug2.add(debug4); // MagmaCube - decompile fix
         }
         debug1.put("ArmorItems", debug2);
         final ListTag debug5 = new ListTag();
@@ -220,7 +220,7 @@ public class ArmorStand extends LivingEntity
             if (!debug6.isEmpty()) {
                 debug6.save(debug7);
             }
-            ((AbstractList<CompoundTag>)debug5).add(debug7);
+            debug5.add(debug7); // MagmaCube - decompile fix
         }
         debug1.put("HandItems", debug5);
         debug1.putBoolean("Invisible", this.isInvisible());
@@ -675,7 +675,7 @@ public class ArmorStand extends LivingEntity
             debug1 |= (byte)debug2;
         }
         else {
-            debug1 &= (byte)â¾debug2;
+            debug1 &= (byte)debug2; // MagmaCube - decompile fix
         }
         return debug1;
     }
@@ -839,6 +839,6 @@ public class ArmorStand extends LivingEntity
         DATA_RIGHT_ARM_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
         DATA_LEFT_LEG_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
         DATA_RIGHT_LEG_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
-        RIDABLE_MINECARTS = (debug0 -> debug0 instanceof AbstractMinecart && debug0.getMinecartType() == AbstractMinecart.Type.RIDEABLE);
+        RIDABLE_MINECARTS = (debug0 -> debug0 instanceof AbstractMinecart && ((AbstractMinecart) debug0).getMinecartType() == AbstractMinecart.Type.RIDEABLE); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/decoration/Painting.java b/src/main/java/net/minecraft/world/entity/decoration/Painting.java
index 985c2155f8748ca7a8ce4b709fdbf4c783d71c7a..66fe9727d9b3b3b6a2fd04097b4027f6149210c7 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/Painting.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/Painting.java
@@ -30,7 +30,7 @@ public class Painting extends HangingEntity
     
     public Painting(final Level debug1, final BlockPos debug2, final Direction debug3) {
         super(EntityType.PAINTING, debug1, debug2);
-        final List<Motive> debug4 = (List<Motive>)Lists.newArrayList();
+        final List<Motive> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
         int debug5 = 0;
         for (final Motive debug6 : Registry.MOTIVE) {
             this.motive = debug6;
diff --git a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
index a5166f8f2ada1862aa41f02e439d4bf1619f8147..74e2d3cc405f801d66c2eb5edc64b1c8660144e4 100644
--- a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
@@ -149,8 +149,8 @@ public class FallingBlockEntity extends Entity
                         final boolean debug9 = FallingBlock.isFree(this.level.getBlockState(debug2.below())) && (!debug3 || !debug4);
                         final boolean debug10 = this.blockState.canSurvive(this.level, debug2) && !debug9;
                         if (debug8 && debug10) {
-                            if (this.blockState.hasProperty((Property<Comparable>)BlockStateProperties.WATERLOGGED) && this.level.getFluidState(debug2).getType() == Fluids.WATER) {
-                                this.blockState = ((StateHolder<O, BlockState>)this.blockState).setValue((Property<Comparable>)BlockStateProperties.WATERLOGGED, true);
+                            if (this.blockState.hasProperty(BlockStateProperties.WATERLOGGED) && this.level.getFluidState(debug2).getType() == Fluids.WATER) { // MagmaCube - decompile fix
+                                this.blockState = this.blockState.setValue(BlockStateProperties.WATERLOGGED, true); // MagmaCube - decompile fix
                             }
                             if (this.level.setBlock(debug2, this.blockState, 3)) {
                                 if (debug1 instanceof FallingBlock) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java b/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
index 7e430292f3d92a545d36e09ba1675700b684e838..48e3ba3ab29ff3a95c3fe28041ad0a23932f2885 100644
--- a/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
@@ -78,14 +78,14 @@ public abstract class AbstractSkeleton extends Monster implements RangedAttackMo
     protected void registerGoals() {
         this.goalSelector.addGoal(2, new RestrictSunGoal(this));
         this.goalSelector.addGoal(3, new FleeSunGoal(this, 1.0));
-        this.goalSelector.addGoal(3, new AvoidEntityGoal<Object>(this, Wolf.class, 6.0f, 1.0, 1.2));
+        this.goalSelector.addGoal(3, new AvoidEntityGoal<>(this, Wolf.class, 6.0f, 1.0, 1.2)); // MagmaCube - decompile fix
         this.goalSelector.addGoal(5, new WaterAvoidingRandomStrollGoal(this, 1.0));
         this.goalSelector.addGoal(6, new LookAtPlayerGoal(this, Player.class, 8.0f));
         this.goalSelector.addGoal(6, new RandomLookAroundGoal(this));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Player.class, true));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, IronGolem.class, true));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR)); // MagmaCube - decompile fix
     }
     
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Blaze.java b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
index 38e3e426f80b9d9cffcfca06796ef08bd034ad63..b9de1a1b247291f32dedc0ea920c892ee512f453 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Blaze.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
@@ -54,7 +54,7 @@ public class Blaze extends Monster
         this.goalSelector.addGoal(8, new LookAtPlayerGoal(this, Player.class, 8.0f));
         this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[0]).setAlertOthers((Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Player.class, true));
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true)); // MagmaCube - decompile fix
     }
     
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Creeper.java b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
index 2e5b3ee4f1b5da36ca701de6286f2af4e9082e26..ec6f842a98b4c08ffdbf0d6dfc2ee75834d42117 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Creeper.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
@@ -65,13 +65,13 @@ public class Creeper extends Monster implements PowerableMob
     protected void registerGoals() {
         this.goalSelector.addGoal(1, new FloatGoal(this));
         this.goalSelector.addGoal(2, new SwellGoal(this));
-        this.goalSelector.addGoal(3, new AvoidEntityGoal<Object>(this, Ocelot.class, 6.0f, 1.0, 1.2));
-        this.goalSelector.addGoal(3, new AvoidEntityGoal<Object>(this, Cat.class, 6.0f, 1.0, 1.2));
+        this.goalSelector.addGoal(3, new AvoidEntityGoal<>(this, Ocelot.class, 6.0f, 1.0, 1.2)); // MagmaCube - decompile fix
+        this.goalSelector.addGoal(3, new AvoidEntityGoal<>(this, Cat.class, 6.0f, 1.0, 1.2)); // MagmaCube - decompile fix
         this.goalSelector.addGoal(4, new MeleeAttackGoal(this, 1.0, false));
         this.goalSelector.addGoal(5, new WaterAvoidingRandomStrollGoal(this, 0.8));
         this.goalSelector.addGoal(6, new LookAtPlayerGoal(this, Player.class, 8.0f));
         this.goalSelector.addGoal(6, new RandomLookAroundGoal(this));
-        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<Object>(this, Player.class, true));
+        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Player.class, true)); // MagmaCube - decompile fix
         this.targetSelector.addGoal(2, new HurtByTargetGoal(this, (Class<?>[])new Class[0]));
     }
     
@@ -212,7 +212,7 @@ public class Creeper extends Monster implements PowerableMob
             this.level.playSound(debug1, this.getX(), this.getY(), this.getZ(), SoundEvents.FLINTANDSTEEL_USE, this.getSoundSource(), 1.0f, this.random.nextFloat() * 0.4f + 0.8f);
             if (!this.level.isClientSide) {
                 this.ignite();
-                debug3.hurtAndBreak(1, debug1, debug1 -> debug1.broadcastBreakEvent(debug2));
+                debug3.hurtAndBreak(1, debug1, debug1l -> debug1l.broadcastBreakEvent(debug2)); // MagmaCube - decompile fix
             }
             return InteractionResult.sidedSuccess(this.level.isClientSide);
         }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Drowned.java b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
index adba729a4e42707b35d81e6ff792ad4ddf040b6f..f37c21df8f50c83f281719b72388a1dee83b8108 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Drowned.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
@@ -85,10 +85,10 @@ public class Drowned extends Zombie implements RangedAttackMob
         this.goalSelector.addGoal(6, new DrownedSwimUpGoal(this, 1.0, this.level.getSeaLevel()));
         this.goalSelector.addGoal(7, new RandomStrollGoal(this, 1.0));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[] { Drowned.class }).setAlertOthers(ZombifiedPiglin.class));
-        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Player.class, 10, true, false, this::okTarget));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, AbstractVillager.class, false));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, IronGolem.class, true));
-        this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<Object>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::okTarget)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
index f7cddfb0c006c4d8f9bba69b3eaa9446decb53bb..8823f1efa89f085a9c888cc682ee9a3f402442fa 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
@@ -100,8 +100,8 @@ public class EnderMan extends Monster implements NeutralMob
         this.goalSelector.addGoal(11, new EndermanTakeBlockGoal(this));
         this.targetSelector.addGoal(1, new EndermanLookForPlayerGoal(this, this::isAngryAt));
         this.targetSelector.addGoal(2, new HurtByTargetGoal(this, (Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, Endermite.class, 10, true, false, EnderMan.ENDERMITE_SELECTOR));
-        this.targetSelector.addGoal(4, new ResetUniversalAngerTargetGoal<Object>(this, false));
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Endermite.class, 10, true, false, EnderMan.ENDERMITE_SELECTOR)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(4, new ResetUniversalAngerTargetGoal<>(this, false)); // MagmaCube - decompile fix
     }
     
     public static AttributeSupplier.Builder createAttributes() {
@@ -365,7 +365,7 @@ public class EnderMan extends Monster implements NeutralMob
         DATA_CARRY_STATE = SynchedEntityData.defineId(EnderMan.class, EntityDataSerializers.BLOCK_STATE);
         DATA_CREEPY = SynchedEntityData.defineId(EnderMan.class, EntityDataSerializers.BOOLEAN);
         DATA_STARED_AT = SynchedEntityData.defineId(EnderMan.class, EntityDataSerializers.BOOLEAN);
-        ENDERMITE_SELECTOR = (debug0 -> debug0 instanceof Endermite && debug0.isPlayerSpawned());
+        ENDERMITE_SELECTOR = (debug0 -> debug0 instanceof Endermite && ((Endermite) debug0).isPlayerSpawned()); // MagmaCube - decompile fix
         PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
     }
     
@@ -382,7 +382,7 @@ public class EnderMan extends Monster implements NeutralMob
             super(debug1, Player.class, 10, false, false, debug2);
             this.continueAggroTargetConditions = new TargetingConditions().allowUnseeable();
             this.enderman = debug1;
-            this.startAggroTargetConditions = new TargetingConditions().range(this.getFollowDistance()).selector(debug1 -> debug1.isLookingAtMe(debug1));
+            this.startAggroTargetConditions = new TargetingConditions().range(this.getFollowDistance()).selector(debug1l -> debug1.isLookingAtMe((Player) debug1l)); // MagmaCube - decompile fix
         }
         
         @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Endermite.java b/src/main/java/net/minecraft/world/entity/monster/Endermite.java
index 32745b4fc014526e51090d2cd3dc12a8faffb070..e39849980ee6156382ff53dcef16ddaa4f13a6c4 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Endermite.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Endermite.java
@@ -49,7 +49,7 @@ public class Endermite extends Monster
         this.goalSelector.addGoal(7, new LookAtPlayerGoal(this, Player.class, 8.0f));
         this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[0]).setAlertOthers((Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Player.class, true));
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Evoker.java b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
index 014270182367643c94bd408925e981d1c715f105..130670bec7c6d2b1b9c79667cbc418f8bb68a562 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Evoker.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
@@ -57,7 +57,7 @@ public class Evoker extends SpellcasterIllager
         super.registerGoals();
         this.goalSelector.addGoal(0, new FloatGoal(this));
         this.goalSelector.addGoal(1, new EvokerCastingSpellGoal());
-        this.goalSelector.addGoal(2, new AvoidEntityGoal<Object>(this, Player.class, 8.0f, 0.6, 1.0));
+        this.goalSelector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0f, 0.6, 1.0)); // MagmaCube - decompile fix
         this.goalSelector.addGoal(4, new EvokerSummonSpellGoal());
         this.goalSelector.addGoal(5, new EvokerAttackSpellGoal());
         this.goalSelector.addGoal(6, new EvokerWololoSpellGoal());
@@ -65,9 +65,9 @@ public class Evoker extends SpellcasterIllager
         this.goalSelector.addGoal(9, new LookAtPlayerGoal(this, Player.class, 3.0f, 1.0f));
         this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Mob.class, 8.0f));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[] { Raider.class }).setAlertOthers((Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Player.class, true).setUnseenMemoryTicks(300));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, AbstractVillager.class, false).setUnseenMemoryTicks(300));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, IronGolem.class, false));
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true).setUnseenMemoryTicks(300)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false).setUnseenMemoryTicks(300)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, false)); // MagmaCube - decompile fix
     }
     
     public static AttributeSupplier.Builder createAttributes() {
@@ -293,7 +293,7 @@ public class Evoker extends SpellcasterIllager
         private final TargetingConditions wololoTargeting;
         
         public EvokerWololoSpellGoal() {
-            this.wololoTargeting = new TargetingConditions().range(16.0).allowInvulnerable().selector(debug0 -> debug0.getColor() == DyeColor.BLUE);
+            this.wololoTargeting = new TargetingConditions().range(16.0).allowInvulnerable().selector(debug0 -> ((Sheep) debug0).getColor() == DyeColor.BLUE); // MagmaCube - decompile fix
         }
         
         @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ghast.java b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
index 5378293eabcf24f58c72c20a68bd62e9b36ea93d..ab82b301cf4a77a88f9928adcf6322227e211b77 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ghast.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
@@ -50,7 +50,7 @@ public class Ghast extends FlyingMob implements Enemy
         this.goalSelector.addGoal(5, new RandomFloatAroundGoal(this));
         this.goalSelector.addGoal(7, new GhastLookGoal(this));
         this.goalSelector.addGoal(7, new GhastShootFireballGoal(this));
-        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<Object>(this, Player.class, 10, true, false, debug1 -> Math.abs(debug1.getY() - this.getY()) <= 4.0));
+        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, debug1 -> Math.abs(debug1.getY() - this.getY()) <= 4.0)); // MagmaCube - decompile fix
     }
     
     public boolean isCharging() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Guardian.java b/src/main/java/net/minecraft/world/entity/monster/Guardian.java
index 1757429d3702db308080f9729f977aaa244cb156..1895d1cf619e0ca3d982861c7fe59cc79a95ce45 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Guardian.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Guardian.java
@@ -83,7 +83,7 @@ public class Guardian extends Monster
         this.goalSelector.addGoal(9, new RandomLookAroundGoal(this));
         this.randomStrollGoal.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
         debug1.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
-        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<Object>(this, LivingEntity.class, 10, true, false, new GuardianAttackSelector(this)));
+        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, LivingEntity.class, 10, true, false, new GuardianAttackSelector(this))); // MagmaCube - decompile fix
     }
     
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
index aa29f3b0f0ada56fc4a19d5e49d5987f69dfbc22..b354634a44910898d512f42b2655664d20d7e089 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
@@ -66,14 +66,14 @@ public class Illusioner extends SpellcasterIllager implements RangedAttackMob
         this.goalSelector.addGoal(1, new SpellcasterCastingSpellGoal());
         this.goalSelector.addGoal(4, new IllusionerMirrorSpellGoal());
         this.goalSelector.addGoal(5, new IllusionerBlindnessSpellGoal());
-        this.goalSelector.addGoal(6, new RangedBowAttackGoal<Object>(this, 0.5, 20, 15.0f));
+        this.goalSelector.addGoal(6, new RangedBowAttackGoal<>(this, 0.5, 20, 15.0f)); // MagmaCube - decompile fix
         this.goalSelector.addGoal(8, new RandomStrollGoal(this, 0.6));
         this.goalSelector.addGoal(9, new LookAtPlayerGoal(this, Player.class, 3.0f, 1.0f));
         this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Mob.class, 8.0f));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[] { Raider.class }).setAlertOthers((Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Player.class, true).setUnseenMemoryTicks(300));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, AbstractVillager.class, false).setUnseenMemoryTicks(300));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, IronGolem.class, false).setUnseenMemoryTicks(300));
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true).setUnseenMemoryTicks(300)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false).setUnseenMemoryTicks(300)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, false).setUnseenMemoryTicks(300)); // MagmaCube - decompile fix
     }
     
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/PatrollingMonster.java b/src/main/java/net/minecraft/world/entity/monster/PatrollingMonster.java
index b02723c3ea60fdd033b7e72f8706fbbfbc4a41c4..ae1687287094056c160f69d777831c061ed5039b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/PatrollingMonster.java
+++ b/src/main/java/net/minecraft/world/entity/monster/PatrollingMonster.java
@@ -40,7 +40,7 @@ public abstract class PatrollingMonster extends Monster
     @Override
     protected void registerGoals() {
         super.registerGoals();
-        this.goalSelector.addGoal(4, new LongDistancePatrolGoal<Object>(this, 0.7, 0.595));
+        this.goalSelector.addGoal(4, new LongDistancePatrolGoal<>(this, 0.7, 0.595)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index 570eff14bd3558e85bec04e05ef66375d1e046c7..1dcb21e99f2f88eec2b896b570a9bc5b7e68ece3 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -491,7 +491,7 @@ public class Phantom extends FlyingMob implements Enemy
             this.nextScanTick = 60;
             final List<Player> debug1 = Phantom.this.level.getNearbyPlayers(this.attackTargeting, Phantom.this, Phantom.this.getBoundingBox().inflate(16.0, 64.0, 16.0));
             if (!debug1.isEmpty()) {
-                debug1.sort(Comparator.comparing((Function<? super Object, ? extends Comparable>)Entity::getY).reversed());
+                debug1.sort(Comparator.<Entity, Double>comparing(Entity::getY).reversed()); // MagmaCube - decompile fix
                 for (final Player debug2 : debug1) {
                     if (Phantom.this.canAttack(debug2, TargetingConditions.DEFAULT)) {
                         Phantom.this.setTarget(debug2);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Pillager.java b/src/main/java/net/minecraft/world/entity/monster/Pillager.java
index cf1d6389497dc05067cfc81d58ba9a2e83bcc17c..baeb6283ed3b1e50d82f2dc7ce2e46653f516304 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Pillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Pillager.java
@@ -72,14 +72,14 @@ public class Pillager extends AbstractIllager implements CrossbowAttackMob
         super.registerGoals();
         this.goalSelector.addGoal(0, new FloatGoal(this));
         this.goalSelector.addGoal(2, new HoldGroundAttackGoal(this, 10.0f));
-        this.goalSelector.addGoal(3, new RangedCrossbowAttackGoal<Object>(this, 1.0, 8.0f));
+        this.goalSelector.addGoal(3, new RangedCrossbowAttackGoal<>(this, 1.0, 8.0f)); // MagmaCube - decompile fix
         this.goalSelector.addGoal(8, new RandomStrollGoal(this, 0.6));
         this.goalSelector.addGoal(9, new LookAtPlayerGoal(this, Player.class, 15.0f, 1.0f));
         this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Mob.class, 15.0f));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[] { Raider.class }).setAlertOthers((Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Player.class, true));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, AbstractVillager.class, false));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, IronGolem.class, true));
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true)); // MagmaCube - decompile fix
     }
     
     public static AttributeSupplier.Builder createAttributes() {
@@ -118,7 +118,7 @@ public class Pillager extends AbstractIllager implements CrossbowAttackMob
         for (int debug3 = 0; debug3 < this.inventory.getContainerSize(); ++debug3) {
             final ItemStack debug4 = this.inventory.getItem(debug3);
             if (!debug4.isEmpty()) {
-                ((AbstractList<CompoundTag>)debug2).add(debug4.save(new CompoundTag()));
+                debug2.add(debug4.save(new CompoundTag())); // MagmaCube - decompile fix
             }
         }
         debug1.put("Inventory", debug2);
@@ -266,7 +266,7 @@ public class Pillager extends AbstractIllager implements CrossbowAttackMob
         final boolean debug4 = this.random.nextFloat() <= debug3.getEnchantOdds();
         if (debug4) {
             final ItemStack debug5 = new ItemStack(Items.CROSSBOW);
-            final Map<Enchantment, Integer> debug6 = (Map<Enchantment, Integer>)Maps.newHashMap();
+            final Map<Enchantment, Integer> debug6 = Maps.newHashMap(); // MagmaCube - decompile fix
             if (debug1 > debug3.getNumGroups(Difficulty.NORMAL)) {
                 debug6.put(Enchantments.QUICK_CHARGE, 2);
             }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ravager.java b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
index 9fcc73882ac619a7b1459a6793ffba331ed8c87f..91084b904c587e9a9fe6d895640d48753557d279 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ravager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
@@ -70,9 +70,9 @@ public class Ravager extends Raider
         this.goalSelector.addGoal(6, new LookAtPlayerGoal(this, Player.class, 6.0f));
         this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Mob.class, 8.0f));
         this.targetSelector.addGoal(2, new HurtByTargetGoal(this, (Class<?>[])new Class[] { Raider.class }).setAlertOthers((Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, Player.class, true));
-        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<Object>(this, AbstractVillager.class, true));
-        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<Object>(this, IronGolem.class, true));
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Player.class, true)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, true)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, IronGolem.class, true)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Silverfish.java b/src/main/java/net/minecraft/world/entity/monster/Silverfish.java
index f6202061bcbc764fda577132c6d3ee9ffc7ebab3..50a1d9fc6ab2cf298cc6fbbfa087578e0f86a626 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Silverfish.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Silverfish.java
@@ -49,7 +49,7 @@ public class Silverfish extends Monster
         this.goalSelector.addGoal(4, new MeleeAttackGoal(this, 1.0, false));
         this.goalSelector.addGoal(5, new SilverfishMergeWithStoneGoal(this));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[0]).setAlertOthers((Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Player.class, true));
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index 7f11e8fd10fcab234dc6032c757e9e2b163413ab..699b8a4ee1ba2d89294baeb2aaa65b81b628f10e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -64,8 +64,8 @@ public class Slime extends Mob implements Enemy
         this.goalSelector.addGoal(2, new SlimeAttackGoal(this));
         this.goalSelector.addGoal(3, new SlimeRandomDirectionGoal(this));
         this.goalSelector.addGoal(5, new SlimeKeepOnJumpingGoal(this));
-        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<Object>(this, Player.class, 10, true, false, debug1 -> Math.abs(debug1.getY() - this.getY()) <= 4.0));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, IronGolem.class, true));
+        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, debug1 -> Math.abs(debug1.getY() - this.getY()) <= 4.0)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Spider.java b/src/main/java/net/minecraft/world/entity/monster/Spider.java
index a463cdc559fb58c9eee8a2f96edfe83f71c06804..46cca5af147b6c98e5c19b529b79ca6becd6f076 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Spider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Spider.java
@@ -63,8 +63,8 @@ public class Spider extends Monster
         this.goalSelector.addGoal(6, new LookAtPlayerGoal(this, Player.class, 8.0f));
         this.goalSelector.addGoal(6, new RandomLookAroundGoal(this));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(2, new SpiderTargetGoal<Object>(this, Player.class));
-        this.targetSelector.addGoal(3, new SpiderTargetGoal<Object>(this, IronGolem.class));
+        this.targetSelector.addGoal(2, new SpiderTargetGoal<>(this, Player.class)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new SpiderTargetGoal<>(this, IronGolem.class)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Strider.java b/src/main/java/net/minecraft/world/entity/monster/Strider.java
index 8d84724fee6db946383151ede0955a9ae91a20bb..124c19ca1f5232c12be7c0165be9f6a5be7372ec 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Strider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Strider.java
@@ -217,7 +217,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable
     @Override
     public Vec3 getDismountLocationForPassenger(final LivingEntity debug1) {
         final Vec3[] debug2 = { Entity.getCollisionHorizontalEscapeVector(this.getBbWidth(), debug1.getBbWidth(), debug1.yRot), Entity.getCollisionHorizontalEscapeVector(this.getBbWidth(), debug1.getBbWidth(), debug1.yRot - 22.5f), Entity.getCollisionHorizontalEscapeVector(this.getBbWidth(), debug1.getBbWidth(), debug1.yRot + 22.5f), Entity.getCollisionHorizontalEscapeVector(this.getBbWidth(), debug1.getBbWidth(), debug1.yRot - 45.0f), Entity.getCollisionHorizontalEscapeVector(this.getBbWidth(), debug1.getBbWidth(), debug1.yRot + 45.0f) };
-        final Set<BlockPos> debug3 = (Set<BlockPos>)Sets.newLinkedHashSet();
+        final Set<BlockPos> debug3 = Sets.newLinkedHashSet(); // MagmaCube - decompile fix
         final double debug4 = this.getBoundingBox().maxY;
         final double debug5 = this.getBoundingBox().minY - 0.5;
         final BlockPos.MutableBlockPos debug6 = new BlockPos.MutableBlockPos();
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vex.java b/src/main/java/net/minecraft/world/entity/monster/Vex.java
index d781c924a50945578203095f74cea5eeb01b71c3..c1786ca28676b3d6090eec99389693c884b8894a 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vex.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vex.java
@@ -84,7 +84,7 @@ public class Vex extends Monster
         this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Mob.class, 8.0f));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[] { Raider.class }).setAlertOthers((Class<?>[])new Class[0]));
         this.targetSelector.addGoal(2, new VexCopyOwnerTargetGoal(this));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, Player.class, true));
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Player.class, true)); // MagmaCube - decompile fix
     }
     
     public static AttributeSupplier.Builder createAttributes() {
@@ -145,7 +145,7 @@ public class Vex extends Monster
             debug3 |= debug1;
         }
         else {
-            debug3 &= â¾debug1;
+            debug3 &= debug1; // MagmaCube - decompile fix
         }
         this.entityData.set(Vex.DATA_FLAGS_ID, (byte)(debug3 & 0xFF));
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
index 8fcd89a45cb0e254051ecf14130b9cbc8927f073..dad66bd0675b3dbd12c1bd70494cb83dc1159393 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
@@ -67,9 +67,9 @@ public class Vindicator extends AbstractIllager
         this.goalSelector.addGoal(3, new HoldGroundAttackGoal(this, 10.0f));
         this.goalSelector.addGoal(4, new VindicatorMeleeAttackGoal(this));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[] { Raider.class }).setAlertOthers((Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Player.class, true));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, AbstractVillager.class, true));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, IronGolem.class, true));
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, true)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true)); // MagmaCube - decompile fix
         this.targetSelector.addGoal(4, new VindicatorJohnnyAttackGoal(this));
         this.goalSelector.addGoal(8, new RandomStrollGoal(this, 0.6));
         this.goalSelector.addGoal(9, new LookAtPlayerGoal(this, Player.class, 3.0f, 1.0f));
@@ -176,7 +176,7 @@ public class Vindicator extends AbstractIllager
         }
         final boolean debug6 = this.random.nextFloat() <= debug4.getEnchantOdds();
         if (debug6) {
-            final Map<Enchantment, Integer> debug7 = (Map<Enchantment, Integer>)Maps.newHashMap();
+            final Map<Enchantment, Integer> debug7 = Maps.newHashMap(); // MagmaCube - decompile fix
             debug7.put(Enchantments.SHARPNESS, debug5);
             EnchantmentHelper.setEnchantments(debug7, debug3);
         }
diff --git a/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java b/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
index acd0985d1bc637c8219bb7598587c4abb778e092..84fde1ea3c060e2d797e95175cbca6108ca70f10 100644
--- a/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
@@ -38,7 +38,7 @@ public class WitherSkeleton extends AbstractSkeleton
     
     @Override
     protected void registerGoals() {
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, AbstractPiglin.class, true));
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractPiglin.class, true)); // MagmaCube - decompile fix
         super.registerGoals();
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
index e7b81da486b9538d0f79c8f106819c53e35d0432..e4d4b2e08cf68d996f35196252c5fee05fca5511 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
@@ -75,26 +75,26 @@ public class Zoglin extends Monster implements Enemy, HoglinBase
         initCoreActivity(debug2);
         initIdleActivity(debug2);
         initFightActivity(debug2);
-        debug2.setCoreActivities((Set<Activity>)ImmutableSet.of((Object)Activity.CORE));
+        debug2.setCoreActivities((Set<Activity>)ImmutableSet.of(Activity.CORE)); // MagmaCube - decompile fix
         debug2.setDefaultActivity(Activity.IDLE);
         debug2.useDefaultActivity();
         return debug2;
     }
     
     private static void initCoreActivity(final Brain<Zoglin> debug0) {
-        debug0.addActivity(Activity.CORE, 0, (com.google.common.collect.ImmutableList<? extends Behavior<? super Zoglin>>)ImmutableList.of((Object)new LookAtTargetSink(45, 90), (Object)new MoveToTargetSink()));
+        debug0.addActivity(Activity.CORE, 0, ImmutableList.of(new LookAtTargetSink(45, 90), new MoveToTargetSink())); // MagmaCube - decompile fix
     }
     
     private static void initIdleActivity(final Brain<Zoglin> debug0) {
-        debug0.addActivity(Activity.IDLE, 10, (com.google.common.collect.ImmutableList<? extends Behavior<? super Zoglin>>)ImmutableList.of((Object)new StartAttacking(Zoglin::findNearestValidAttackTarget), (Object)new RunSometimes(new SetEntityLookTarget(8.0f), IntRange.of(30, 60)), (Object)new RunOne((List<com.mojang.datafixers.util.Pair<Behavior<? super LivingEntity>, Integer>>)ImmutableList.of((Object)Pair.of((Object)new RandomStroll(0.4f), (Object)2), (Object)Pair.of((Object)new SetWalkTargetFromLookTarget(0.4f, 3), (Object)2), (Object)Pair.of((Object)new DoNothing(30, 60), (Object)1)))));
+        debug0.addActivity(Activity.IDLE, 10, ImmutableList.of(new StartAttacking<>(Zoglin::findNearestValidAttackTarget), new RunSometimes<>(new SetEntityLookTarget(8.0f), IntRange.of(30, 60)), new RunOne<>(ImmutableList.of(Pair.of(new RandomStroll(0.4f), 2), Pair.of(new SetWalkTargetFromLookTarget(0.4f, 3), 2), Pair.of(new DoNothing(30, 60), 1))))); // MagmaCube - decompile fix
     }
     
     private static void initFightActivity(final Brain<Zoglin> debug0) {
-        debug0.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, (com.google.common.collect.ImmutableList<? extends Behavior<? super Zoglin>>)ImmutableList.of((Object)new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0f), (Object)new RunIf(Zoglin::isAdult, (Behavior<? super LivingEntity>)new MeleeAttack(40)), (Object)new RunIf(Zoglin::isBaby, (Behavior<? super LivingEntity>)new MeleeAttack(15)), (Object)new StopAttackingIfTargetInvalid()), MemoryModuleType.ATTACK_TARGET);
+        debug0.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0f), new RunIf<>(Zoglin::isAdult, new MeleeAttack(40)), new RunIf<>(Zoglin::isBaby, new MeleeAttack(15)), new StopAttackingIfTargetInvalid<>()), MemoryModuleType.ATTACK_TARGET); // MagmaCube - decompile fix
     }
     
     private Optional<? extends LivingEntity> findNearestValidAttackTarget() {
-        return (Optional<? extends LivingEntity>)this.getBrain().getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).orElse((List<LivingEntity>)ImmutableList.of()).stream().filter((Predicate<? super Object>)Zoglin::isTargetable).findFirst();
+        return (Optional<? extends LivingEntity>)this.getBrain().getMemory(MemoryModuleType.VISIBLE_LIVING_ENTITIES).orElse(ImmutableList.of()).stream().filter(Zoglin::isTargetable).findFirst(); // MagmaCube - decompile fix
     }
     
     private static boolean isTargetable(final LivingEntity debug0) {
@@ -180,7 +180,7 @@ public class Zoglin extends Monster implements Enemy, HoglinBase
     
     protected void updateActivity() {
         final Activity debug1 = this.brain.getActiveNonCoreActivity().orElse(null);
-        this.brain.setActiveActivityToFirstValid((List<Activity>)ImmutableList.of((Object)Activity.FIGHT, (Object)Activity.IDLE));
+        this.brain.setActiveActivityToFirstValid((List<Activity>)ImmutableList.of(Activity.FIGHT, Activity.IDLE)); // MagmaCube - decompile fix
         final Activity debug2 = this.brain.getActiveNonCoreActivity().orElse(null);
         if (debug2 == Activity.FIGHT && debug1 != Activity.FIGHT) {
             this.playAngrySound();
@@ -292,7 +292,7 @@ public class Zoglin extends Monster implements Enemy, HoglinBase
     
     static {
         DATA_BABY_ID = SynchedEntityData.defineId(Zoglin.class, EntityDataSerializers.BOOLEAN);
-        SENSOR_TYPES = ImmutableList.of((Object)SensorType.NEAREST_LIVING_ENTITIES, (Object)SensorType.NEAREST_PLAYERS);
-        MEMORY_TYPES = ImmutableList.of((Object)MemoryModuleType.LIVING_ENTITIES, (Object)MemoryModuleType.VISIBLE_LIVING_ENTITIES, (Object)MemoryModuleType.NEAREST_VISIBLE_PLAYER, (Object)MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, (Object)MemoryModuleType.LOOK_TARGET, (Object)MemoryModuleType.WALK_TARGET, (Object)MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, (Object)MemoryModuleType.PATH, (Object)MemoryModuleType.ATTACK_TARGET, (Object)MemoryModuleType.ATTACK_COOLING_DOWN);
+        SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS); // MagmaCube - decompile fix
+        MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index ede9bd7b7b1b366b35a37313800e2b931cc0fc98..9c6e16aa3b867aff2a734ca1418b93c72df1ab72 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -108,10 +108,10 @@ public class Zombie extends Monster
         this.goalSelector.addGoal(6, new MoveThroughVillageGoal(this, 1.0, true, 4, this::canBreakDoors));
         this.goalSelector.addGoal(7, new WaterAvoidingRandomStrollGoal(this, 1.0));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[0]).setAlertOthers(ZombifiedPiglin.class));
-        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Player.class, true));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, AbstractVillager.class, false));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, IronGolem.class, true));
-        this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<Object>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR)); // MagmaCube - decompile fix
     }
     
     public static AttributeSupplier.Builder createAttributes() {
@@ -393,7 +393,7 @@ public class Zombie extends Monster
             final ZombieVillager debug4 = debug3.convertTo(EntityType.ZOMBIE_VILLAGER, false);
             debug4.finalizeSpawn(debug1, debug1.getCurrentDifficultyAt(debug4.blockPosition()), MobSpawnType.CONVERSION, new ZombieGroupData(false, true), null);
             debug4.setVillagerData(debug3.getVillagerData());
-            debug4.setGossips((net.minecraft.nbt.Tag)debug3.getGossips().store((com.mojang.serialization.DynamicOps<Object>)NbtOps.INSTANCE).getValue());
+            debug4.setGossips((net.minecraft.nbt.Tag)debug3.getGossips().store(NbtOps.INSTANCE).getValue()); // MagmaCube - decompile fix
             debug4.setTradeOffers(debug3.getOffers().createTag());
             debug4.setVillagerXp(debug3.getVillagerXp());
             if (!this.isSilent()) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
index 31c849e57c2c43d385d6a4e426242f2d74034856..ae55ed654a1d0dc4b5bf4d52603816871b803f9b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
@@ -73,7 +73,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder
     @Override
     public void addAdditionalSaveData(final CompoundTag debug1) {
         super.addAdditionalSaveData(debug1);
-        VillagerData.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, (Object)this.getVillagerData()).resultOrPartial((Consumer)ZombieVillager.LOGGER::error).ifPresent(debug1 -> debug1.put("VillagerData", debug1));
+        VillagerData.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, this.getVillagerData()).resultOrPartial((Consumer)ZombieVillager.LOGGER::error).ifPresent(debug1k -> debug1.put("VillagerData", debug1)); // MagmaCube - decompile fix
         if (this.tradeOffers != null) {
             debug1.put("Offers", this.tradeOffers);
         }
@@ -92,7 +92,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder
         super.readAdditionalSaveData(debug1);
         if (debug1.contains("VillagerData", 10)) {
             final DataResult<VillagerData> debug2 = (DataResult<VillagerData>)VillagerData.CODEC.parse(new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug1.get("VillagerData")));
-            debug2.resultOrPartial((Consumer)ZombieVillager.LOGGER::error).ifPresent(this::setVillagerData);
+            debug2.resultOrPartial(ZombieVillager.LOGGER::error).ifPresent(this::setVillagerData); // MagmaCube - decompile fix
         }
         if (debug1.contains("Offers", 10)) {
             this.tradeOffers = debug1.getCompound("Offers");
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
index f4fa68e08131cff0e04f94f42907321155e36716..ef7b50586f38911488750d1e1cc7cd00113dadf4 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
@@ -74,8 +74,8 @@ public class ZombifiedPiglin extends Zombie implements NeutralMob
         this.goalSelector.addGoal(2, new ZombieAttackGoal(this, 1.0, false));
         this.goalSelector.addGoal(7, new WaterAvoidingRandomStrollGoal(this, 1.0));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[0]).setAlertOthers((Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<Object>(this, Player.class, 10, true, false, this::isAngryAt));
-        this.targetSelector.addGoal(3, new ResetUniversalAngerTargetGoal<Object>(this, true));
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(3, new ResetUniversalAngerTargetGoal<>(this, true)); // MagmaCube - decompile fix
     }
     
     public static AttributeSupplier.Builder createAttributes() {
@@ -132,7 +132,7 @@ public class ZombifiedPiglin extends Zombie implements NeutralMob
     private void alertOthers() {
         final double debug2 = this.getAttributeValue(Attributes.FOLLOW_RANGE);
         final AABB debug3 = AABB.unitCubeFromLowerCorner(this.position()).inflate(debug2, 10.0, debug2);
-        this.level.getLoadedEntitiesOfClass((Class<? extends Entity>)ZombifiedPiglin.class, debug3).stream().filter(debug1 -> debug1 != this).filter(debug0 -> debug0.getTarget() == null).filter(debug1 -> !debug1.isAlliedTo(this.getTarget())).forEach(debug1 -> debug1.setTarget(this.getTarget()));
+        this.level.getLoadedEntitiesOfClass(ZombifiedPiglin.class, debug3).stream().filter(debug1 -> debug1 != this).filter(debug0 -> debug0.getTarget() == null).filter(debug1 -> !debug1.isAlliedTo(this.getTarget())).forEach(debug1 -> debug1.setTarget(this.getTarget())); // MagmaCube - decompile fix
     }
     
     private void playAngerSound() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index af14b2f900a20ae518c036beb0e55addb527a494..d69cd93137fb54c0d459d28ecc931505c3b6d12b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -65,7 +65,7 @@ HoglinBase {
     private int timeInOverworld = 0;
     private boolean cannotBeHunted = false;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Hoglin>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ADULT, SensorType.HOGLIN_SPECIFIC_SENSOR);
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, (Object[])new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED});
+    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED}); // MagmaCube - decompile fix
 
     public Hoglin(EntityType<? extends Hoglin> debug1, Level debug2) {
         super((EntityType<? extends Animal>)debug1, debug2);
@@ -122,7 +122,7 @@ HoglinBase {
     }
 
     public Brain<Hoglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Hoglin>) super.getBrain(); // MagmaCube - decompile fix
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/HoglinAi.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/HoglinAi.java
index 8f452c3d445e1224be8f6a5ed0cfe2e0f1da26de..3d8c448d786f15fe6e82465fb408d532ac1103a5 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/HoglinAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/HoglinAi.java
@@ -56,36 +56,36 @@ public class HoglinAi
         initIdleActivity(debug0);
         initFightActivity(debug0);
         initRetreatActivity(debug0);
-        debug0.setCoreActivities((Set<Activity>)ImmutableSet.of((Object)Activity.CORE));
+        debug0.setCoreActivities((Set<Activity>)ImmutableSet.of(Activity.CORE)); // MagmaCube - decompile fix
         debug0.setDefaultActivity(Activity.IDLE);
         debug0.useDefaultActivity();
         return debug0;
     }
     
     private static void initCoreActivity(final Brain<Hoglin> debug0) {
-        debug0.addActivity(Activity.CORE, 0, (com.google.common.collect.ImmutableList<? extends Behavior<? super Hoglin>>)ImmutableList.of((Object)new LookAtTargetSink(45, 90), (Object)new MoveToTargetSink()));
+        debug0.addActivity(Activity.CORE, 0, ImmutableList.of(new LookAtTargetSink(45, 90), new MoveToTargetSink())); // MagmaCube - decompile fix
     }
     
     private static void initIdleActivity(final Brain<Hoglin> debug0) {
-        debug0.addActivity(Activity.IDLE, 10, (com.google.common.collect.ImmutableList<? extends Behavior<? super Hoglin>>)ImmutableList.of((Object)new BecomePassiveIfMemoryPresent(MemoryModuleType.NEAREST_REPELLENT, 200), (Object)new AnimalMakeLove(EntityType.HOGLIN, 0.6f), (Object)SetWalkTargetAwayFrom.pos(MemoryModuleType.NEAREST_REPELLENT, 1.0f, 8, true), (Object)new StartAttacking((Function<Mob, Optional<? extends LivingEntity>>)HoglinAi::findNearestValidAttackTarget), (Object)new RunIf(Hoglin::isAdult, (Behavior<? super LivingEntity>)SetWalkTargetAwayFrom.entity(MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, 0.4f, 8, false)), (Object)new RunSometimes(new SetEntityLookTarget(8.0f), IntRange.of(30, 60)), (Object)new BabyFollowAdult(HoglinAi.ADULT_FOLLOW_RANGE, 0.6f), (Object)createIdleMovementBehaviors()));
+        debug0.addActivity(Activity.IDLE, 10, ImmutableList.of(new BecomePassiveIfMemoryPresent(MemoryModuleType.NEAREST_REPELLENT, 200), new AnimalMakeLove(EntityType.HOGLIN, 0.6f), SetWalkTargetAwayFrom.pos(MemoryModuleType.NEAREST_REPELLENT, 1.0f, 8, true), new StartAttacking<>(HoglinAi::findNearestValidAttackTarget), new RunIf<>(Hoglin::isAdult, SetWalkTargetAwayFrom.entity(MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, 0.4f, 8, false)), new RunSometimes<>(new SetEntityLookTarget(8.0f), IntRange.of(30, 60)), new BabyFollowAdult<>(HoglinAi.ADULT_FOLLOW_RANGE, 0.6f), createIdleMovementBehaviors())); // MagmaCube - decompile fix
     }
     
     private static void initFightActivity(final Brain<Hoglin> debug0) {
-        debug0.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, (com.google.common.collect.ImmutableList<? extends Behavior<? super Hoglin>>)ImmutableList.of((Object)new BecomePassiveIfMemoryPresent(MemoryModuleType.NEAREST_REPELLENT, 200), (Object)new AnimalMakeLove(EntityType.HOGLIN, 0.6f), (Object)new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0f), (Object)new RunIf(Hoglin::isAdult, (Behavior<? super LivingEntity>)new MeleeAttack(40)), (Object)new RunIf(AgableMob::isBaby, (Behavior<? super LivingEntity>)new MeleeAttack(15)), (Object)new StopAttackingIfTargetInvalid(), (Object)new EraseMemoryIf((Predicate<LivingEntity>)HoglinAi::isBreeding, MemoryModuleType.ATTACK_TARGET)), MemoryModuleType.ATTACK_TARGET);
+        debug0.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(new BecomePassiveIfMemoryPresent(MemoryModuleType.NEAREST_REPELLENT, 200), new AnimalMakeLove(EntityType.HOGLIN, 0.6f), new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0f), new RunIf<>(Hoglin::isAdult, new MeleeAttack(40)), new RunIf<>(AgableMob::isBaby, new MeleeAttack(15)), new StopAttackingIfTargetInvalid<>(), new EraseMemoryIf<>(HoglinAi::isBreeding, MemoryModuleType.ATTACK_TARGET)), MemoryModuleType.ATTACK_TARGET); // MagmaCube - decompile fix
     }
     
     private static void initRetreatActivity(final Brain<Hoglin> debug0) {
-        debug0.addActivityAndRemoveMemoryWhenStopped(Activity.AVOID, 10, (com.google.common.collect.ImmutableList<? extends Behavior<? super Hoglin>>)ImmutableList.of((Object)SetWalkTargetAwayFrom.entity(MemoryModuleType.AVOID_TARGET, 1.3f, 15, false), (Object)createIdleMovementBehaviors(), (Object)new RunSometimes(new SetEntityLookTarget(8.0f), IntRange.of(30, 60)), (Object)new EraseMemoryIf((Predicate<LivingEntity>)HoglinAi::wantsToStopFleeing, MemoryModuleType.AVOID_TARGET)), MemoryModuleType.AVOID_TARGET);
+        debug0.addActivityAndRemoveMemoryWhenStopped(Activity.AVOID, 10, ImmutableList.of(SetWalkTargetAwayFrom.entity(MemoryModuleType.AVOID_TARGET, 1.3f, 15, false), createIdleMovementBehaviors(), new RunSometimes<>(new SetEntityLookTarget(8.0f), IntRange.of(30, 60)), new EraseMemoryIf<>(HoglinAi::wantsToStopFleeing, MemoryModuleType.AVOID_TARGET)), MemoryModuleType.AVOID_TARGET); // MagmaCube - decompile fix
     }
     
     private static RunOne<Hoglin> createIdleMovementBehaviors() {
-        return new RunOne<Hoglin>((List<com.mojang.datafixers.util.Pair<Behavior<? super Hoglin>, Integer>>)ImmutableList.of((Object)Pair.of((Object)new RandomStroll(0.4f), (Object)2), (Object)Pair.of((Object)new SetWalkTargetFromLookTarget(0.4f, 3), (Object)2), (Object)Pair.of((Object)new DoNothing(30, 60), (Object)1)));
+        return new RunOne<Hoglin>(ImmutableList.of(Pair.of(new RandomStroll(0.4f), 2), Pair.of(new SetWalkTargetFromLookTarget(0.4f, 3), 2), Pair.of(new DoNothing(30, 60), 1))); // MagmaCube - decompile fix
     }
     
     protected static void updateActivity(final Hoglin debug0) {
         final Brain<Hoglin> debug = debug0.getBrain();
         final Activity debug2 = debug.getActiveNonCoreActivity().orElse(null);
-        debug.setActiveActivityToFirstValid((List<Activity>)ImmutableList.of((Object)Activity.FIGHT, (Object)Activity.AVOID, (Object)Activity.IDLE));
+        debug.setActiveActivityToFirstValid((List<Activity>)ImmutableList.of(Activity.FIGHT, Activity.AVOID, Activity.IDLE));
         final Activity debug3 = debug.getActiveNonCoreActivity().orElse(null);
         if (debug2 != debug3) {
             getSoundForCurrentActivity(debug0).ifPresent(debug0::playSound);
@@ -106,7 +106,7 @@ public class HoglinAi
     }
     
     private static void broadcastRetreat(final Hoglin debug0, final LivingEntity debug1) {
-        getVisibleAdultHoglins(debug0).forEach(debug1 -> retreatFromNearestTarget(debug1, debug1));
+        getVisibleAdultHoglins(debug0).forEach(debug1l -> retreatFromNearestTarget(debug1l, debug1)); // MagmaCube - decompile fix
     }
     
     private static void retreatFromNearestTarget(final Hoglin debug0, final LivingEntity debug1) {
@@ -183,7 +183,7 @@ public class HoglinAi
     }
     
     private static void broadcastAttackTarget(final Hoglin debug0, final LivingEntity debug1) {
-        getVisibleAdultHoglins(debug0).forEach(debug1 -> setAttackTargetIfCloserThanCurrent(debug1, debug1));
+        getVisibleAdultHoglins(debug0).forEach(debug1l -> setAttackTargetIfCloserThanCurrent(debug1l, debug1)); // MagmaCube - decompile fix
     }
     
     private static void setAttackTargetIfCloserThanCurrent(final Hoglin debug0, final LivingEntity debug1) {
@@ -213,7 +213,7 @@ public class HoglinAi
     }
     
     private static List<Hoglin> getVisibleAdultHoglins(final Hoglin debug0) {
-        return debug0.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS).orElse((List<Hoglin>)ImmutableList.of());
+        return debug0.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS).orElse(ImmutableList.of()); // MagmaCube - decompile fix
     }
     
     private static boolean isNearRepellent(final Hoglin debug0) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/HoglinBase.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/HoglinBase.java
index 83af08bdf4bd782a141964571df216109e2b1b8c..5526698bde325965ca6ec2bf9f4f473a8a0c6220 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/HoglinBase.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/HoglinBase.java
@@ -10,7 +10,7 @@ public interface HoglinBase
 {
     int getAttackAnimationRemainingTicks();
     
-    default boolean hurtAndThrowTarget(final LivingEntity debug0, final LivingEntity debug1) {
+    static boolean hurtAndThrowTarget(final LivingEntity debug0, final LivingEntity debug1) { // MagmaCube - decompile fix
         final float debug2 = (float)debug0.getAttributeValue(Attributes.ATTACK_DAMAGE);
         float debug3;
         if (!debug0.isBaby() && (int)debug2 > 0) {
@@ -29,7 +29,7 @@ public interface HoglinBase
         return debug4;
     }
     
-    default void throwTarget(final LivingEntity debug0, final LivingEntity debug1) {
+    static void throwTarget(final LivingEntity debug0, final LivingEntity debug1) { // MagmaCube - decompile fix
         final double debug2 = debug0.getAttributeValue(Attributes.ATTACK_KNOCKBACK);
         final double debug3 = debug1.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE);
         final double debug4 = debug2 - debug3;
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index d29713412211c72db36691ad9dc7586d4486dce4..7a171095c7da0e53c60c10a5afa421becc9e2736 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -431,7 +431,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob
         DATA_IS_DANCING = SynchedEntityData.defineId(Piglin.class, EntityDataSerializers.BOOLEAN);
         SPEED_MODIFIER_BABY_UUID = UUID.fromString("766bfa64-11f3-11ea-8d71-362b9e155667");
         SPEED_MODIFIER_BABY = new AttributeModifier(Piglin.SPEED_MODIFIER_BABY_UUID, "Baby speed boost", 0.20000000298023224, AttributeModifier.Operation.MULTIPLY_BASE);
-        SENSOR_TYPES = ImmutableList.of((Object)SensorType.NEAREST_LIVING_ENTITIES, (Object)SensorType.NEAREST_PLAYERS, (Object)SensorType.NEAREST_ITEMS, (Object)SensorType.HURT_BY, (Object)SensorType.PIGLIN_SPECIFIC_SENSOR);
-        MEMORY_TYPES = ImmutableList.of((Object)MemoryModuleType.LOOK_TARGET, (Object)MemoryModuleType.DOORS_TO_CLOSE, (Object)MemoryModuleType.LIVING_ENTITIES, (Object)MemoryModuleType.VISIBLE_LIVING_ENTITIES, (Object)MemoryModuleType.NEAREST_VISIBLE_PLAYER, (Object)MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, (Object)MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS, (Object)MemoryModuleType.NEARBY_ADULT_PIGLINS, (Object)MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, (Object)MemoryModuleType.HURT_BY, (Object)MemoryModuleType.HURT_BY_ENTITY, (Object)MemoryModuleType.WALK_TARGET, (Object[])new MemoryModuleType[] { MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.PATH, MemoryModuleType.ANGRY_AT, MemoryModuleType.UNIVERSAL_ANGER, MemoryModuleType.AVOID_TARGET, MemoryModuleType.ADMIRING_ITEM, MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM, MemoryModuleType.ADMIRING_DISABLED, MemoryModuleType.DISABLE_WALK_TO_ADMIRE_ITEM, MemoryModuleType.CELEBRATE_LOCATION, MemoryModuleType.DANCING, MemoryModuleType.HUNTED_RECENTLY, MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED, MemoryModuleType.RIDE_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_HUNTABLE_HOGLIN, MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD, MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.NEAREST_REPELLENT });
+        SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.HURT_BY, SensorType.PIGLIN_SPECIFIC_SENSOR); // MagmaCube - decompile fix
+        MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS, MemoryModuleType.NEARBY_ADULT_PIGLINS, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.WALK_TARGET, new MemoryModuleType[] { MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.PATH, MemoryModuleType.ANGRY_AT, MemoryModuleType.UNIVERSAL_ANGER, MemoryModuleType.AVOID_TARGET, MemoryModuleType.ADMIRING_ITEM, MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM, MemoryModuleType.ADMIRING_DISABLED, MemoryModuleType.DISABLE_WALK_TO_ADMIRE_ITEM, MemoryModuleType.CELEBRATE_LOCATION, MemoryModuleType.DANCING, MemoryModuleType.HUNTED_RECENTLY, MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED, MemoryModuleType.RIDE_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_HUNTABLE_HOGLIN, MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD, MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.NEAREST_REPELLENT }); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
index 90cf2dcaf441c26730b91ece126b30604712265b..3b3958d6142a20913b134db73209fa9356e5a535 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
@@ -141,7 +141,7 @@ public class PiglinBrute extends AbstractPiglin
     }
     
     static {
-        SENSOR_TYPES = ImmutableList.of((Object)SensorType.NEAREST_LIVING_ENTITIES, (Object)SensorType.NEAREST_PLAYERS, (Object)SensorType.NEAREST_ITEMS, (Object)SensorType.HURT_BY, (Object)SensorType.PIGLIN_BRUTE_SPECIFIC_SENSOR);
-        MEMORY_TYPES = ImmutableList.of((Object)MemoryModuleType.LOOK_TARGET, (Object)MemoryModuleType.DOORS_TO_CLOSE, (Object)MemoryModuleType.LIVING_ENTITIES, (Object)MemoryModuleType.VISIBLE_LIVING_ENTITIES, (Object)MemoryModuleType.NEAREST_VISIBLE_PLAYER, (Object)MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, (Object)MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS, (Object)MemoryModuleType.NEARBY_ADULT_PIGLINS, (Object)MemoryModuleType.HURT_BY, (Object)MemoryModuleType.HURT_BY_ENTITY, (Object)MemoryModuleType.WALK_TARGET, (Object)MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, (Object[])new MemoryModuleType[] { MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.PATH, MemoryModuleType.ANGRY_AT, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.HOME });
+        SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.HURT_BY, SensorType.PIGLIN_BRUTE_SPECIFIC_SENSOR); // MagmaCube - decompile fix
+        MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS, MemoryModuleType.NEARBY_ADULT_PIGLINS, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, new MemoryModuleType[] { MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.PATH, MemoryModuleType.ANGRY_AT, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.HOME }); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
index fd5829d58b52ecfb6632ad0e3f9594e5984e9be9..e293581438e7477fd845f18e5ffa52e63a2a7b36 100644
--- a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
@@ -232,7 +232,7 @@ public abstract class AbstractVillager extends AgableMob implements Npc, Merchan
     protected abstract void updateTrades();
     
     protected void addOffersFromItemListings(final MerchantOffers debug1, final VillagerTrades.ItemListing[] debug2, final int debug3) {
-        final Set<Integer> debug4 = (Set<Integer>)Sets.newHashSet();
+        final Set<Integer> debug4 = Sets.newHashSet(); // MagmaCube - decompile fix
         if (debug2.length > debug3) {
             while (debug4.size() < debug3) {
                 debug4.add(this.random.nextInt(debug2.length));
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 289ac147428519b97ceeb42346ac8fed17562d80..41a31b3c59d6e5abf11e78e85cda912da5bf7f25 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -18,6 +18,7 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.DynamicOps;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
@@ -33,6 +34,7 @@ import net.minecraft.core.GlobalPos;
 import net.minecraft.core.Registry;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
@@ -110,8 +112,8 @@ extends AbstractVillager
 implements ReputationEventHandler,
 VillagerDataHolder {
     private static final EntityDataAccessor<VillagerData> DATA_VILLAGER_DATA = SynchedEntityData.defineId(Villager.class, EntityDataSerializers.VILLAGER_DATA);
-    public static final Map<Item, Integer> FOOD_POINTS = ImmutableMap.of((Object)Items.BREAD, (Object)4, (Object)Items.POTATO, (Object)1, (Object)Items.CARROT, (Object)1, (Object)Items.BEETROOT, (Object)1);
-    private static final Set<Item> WANTED_ITEMS = ImmutableSet.of((Object)Items.BREAD, (Object)Items.POTATO, (Object)Items.CARROT, (Object)Items.WHEAT, (Object)Items.WHEAT_SEEDS, (Object)Items.BEETROOT, (Object[])new Item[]{Items.BEETROOT_SEEDS});
+    public static final Map<Item, Integer> FOOD_POINTS = ImmutableMap.of(Items.BREAD, 4, Items.POTATO, 1, Items.CARROT, 1, Items.BEETROOT, 1); // MagmaCube - decompile fix
+    private static final Set<Item> WANTED_ITEMS = ImmutableSet.of(Items.BREAD, Items.POTATO, Items.CARROT, Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT, new Item[]{Items.BEETROOT_SEEDS}); // MagmaCube - decompile fix
     private int updateMerchantTimer;
     private boolean increaseProfessionLevelOnUpdate;
     @Nullable
@@ -125,7 +127,7 @@ VillagerDataHolder {
     private int numberOfRestocksToday;
     private long lastRestockCheckDayTime;
     private boolean assignProfessionWhenSpawned;
-    private static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.WALK_TARGET, (Object[])new MemoryModuleType[]{MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, MemoryModuleType.PATH, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.LAST_SLEPT, MemoryModuleType.LAST_WOKEN, MemoryModuleType.LAST_WORKED_AT_POI, MemoryModuleType.GOLEM_DETECTED_RECENTLY});
+    private static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.WALK_TARGET, new MemoryModuleType[]{MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, MemoryModuleType.PATH, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.LAST_SLEPT, MemoryModuleType.LAST_WOKEN, MemoryModuleType.LAST_WORKED_AT_POI, MemoryModuleType.GOLEM_DETECTED_RECENTLY}); // MagmaCube - decompile fix
     private static final ImmutableList<SensorType<? extends Sensor<? super Villager>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_BED, SensorType.HURT_BY, SensorType.VILLAGER_HOSTILES, SensorType.VILLAGER_BABIES, SensorType.SECONDARY_POIS, SensorType.GOLEM_DETECTED);
     public static final Map<MemoryModuleType<GlobalPos>, BiPredicate<Villager, PoiType>> POI_MEMORIES = ImmutableMap.of(MemoryModuleType.HOME, (debug0, debug1) -> debug1 == PoiType.HOME, MemoryModuleType.JOB_SITE, (debug0, debug1) -> debug0.getVillagerData().getProfession().getJobPoiType() == debug1, MemoryModuleType.POTENTIAL_JOB_SITE, (debug0, debug1) -> PoiType.ALL_JOBS.test((PoiType)debug1), MemoryModuleType.MEETING_POINT, (debug0, debug1) -> debug1 == PoiType.MEETING);
 
@@ -142,7 +144,7 @@ VillagerDataHolder {
     }
 
     public Brain<Villager> getBrain() {
-        return super.getBrain();
+        return (Brain<Villager>) super.getBrain(); // MagmaCube - decompile fix
     }
 
     protected Brain.Provider<Villager> brainProvider() {
@@ -170,17 +172,17 @@ VillagerDataHolder {
             debug1.addActivity(Activity.PLAY, VillagerGoalPackages.getPlayPackage(0.5f));
         } else {
             debug1.setSchedule(Schedule.VILLAGER_DEFAULT);
-            debug1.addActivityWithConditions(Activity.WORK, (ImmutableList<Pair<Integer, Behavior<Villager>>>)VillagerGoalPackages.getWorkPackage(debug2, 0.5f), (Set<Pair<MemoryModuleType<?>, MemoryStatus>>)ImmutableSet.of((Object)Pair.of(MemoryModuleType.JOB_SITE, (Object)((Object)MemoryStatus.VALUE_PRESENT))));
+            debug1.addActivityWithConditions(Activity.WORK, VillagerGoalPackages.getWorkPackage(debug2, 0.5f), ImmutableSet.of(Pair.of(MemoryModuleType.JOB_SITE, MemoryStatus.VALUE_PRESENT))); // MagmaCube - decompile fix
         }
         debug1.addActivity(Activity.CORE, VillagerGoalPackages.getCorePackage(debug2, 0.5f));
-        debug1.addActivityWithConditions(Activity.MEET, (ImmutableList<Pair<Integer, Behavior<Villager>>>)VillagerGoalPackages.getMeetPackage(debug2, 0.5f), (Set<Pair<MemoryModuleType<?>, MemoryStatus>>)ImmutableSet.of((Object)Pair.of(MemoryModuleType.MEETING_POINT, (Object)((Object)MemoryStatus.VALUE_PRESENT))));
+        debug1.addActivityWithConditions(Activity.MEET, VillagerGoalPackages.getMeetPackage(debug2, 0.5f), ImmutableSet.of(Pair.of(MemoryModuleType.MEETING_POINT, MemoryStatus.VALUE_PRESENT))); // MagmaCube - decompile fix
         debug1.addActivity(Activity.REST, VillagerGoalPackages.getRestPackage(debug2, 0.5f));
         debug1.addActivity(Activity.IDLE, VillagerGoalPackages.getIdlePackage(debug2, 0.5f));
         debug1.addActivity(Activity.PANIC, VillagerGoalPackages.getPanicPackage(debug2, 0.5f));
         debug1.addActivity(Activity.PRE_RAID, VillagerGoalPackages.getPreRaidPackage(debug2, 0.5f));
         debug1.addActivity(Activity.RAID, VillagerGoalPackages.getRaidPackage(debug2, 0.5f));
         debug1.addActivity(Activity.HIDE, VillagerGoalPackages.getHidePackage(debug2, 0.5f));
-        debug1.setCoreActivities((Set<Activity>)ImmutableSet.of((Object)Activity.CORE));
+        debug1.setCoreActivities((Set<Activity>)ImmutableSet.of(Activity.CORE)); // MagmaCube - decompile fix
         debug1.setDefaultActivity(Activity.IDLE);
         debug1.setActiveActivityIfPossible(Activity.IDLE);
         debug1.updateActivityFromSchedule(this.level.getDayTime(), this.level.getGameTime());
@@ -393,7 +395,7 @@ VillagerDataHolder {
     @Override
     public void addAdditionalSaveData(CompoundTag debug12) {
         super.addAdditionalSaveData(debug12);
-        VillagerData.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, (Object)this.getVillagerData()).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("VillagerData", (Tag)debug1));
+        VillagerData.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, this.getVillagerData()).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("VillagerData", (Tag)debug1)); // MagmaCube - decompile fix
         debug12.putByte("FoodLevel", this.foodLevel);
         debug12.put("Gossips", (Tag)this.gossips.store(NbtOps.INSTANCE).getValue());
         debug12.putInt("Xp", this.villagerXp);
@@ -407,10 +409,9 @@ VillagerDataHolder {
 
     @Override
     public void readAdditionalSaveData(CompoundTag debug1) {
-        Object debug2;
         super.readAdditionalSaveData(debug1);
         if (debug1.contains("VillagerData", 10)) {
-            debug2 = VillagerData.CODEC.parse(new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug1.get("VillagerData")));
+            DataResult<VillagerData> debug2 = VillagerData.CODEC.parse(new Dynamic((DynamicOps)NbtOps.INSTANCE, debug1.get("VillagerData"))); // MagmaCube - decompile fix
             debug2.resultOrPartial(((Logger)LOGGER)::error).ifPresent(this::setVillagerData);
         }
         if (debug1.contains("Offers", 10)) {
@@ -419,7 +420,7 @@ VillagerDataHolder {
         if (debug1.contains("FoodLevel", 1)) {
             this.foodLevel = debug1.getByte("FoodLevel");
         }
-        debug2 = debug1.getList("Gossips", 10);
+        ListTag debug2 = debug1.getList("Gossips", 10); // MagmaCube - decompile fix
         this.gossips.update(new Dynamic((DynamicOps)NbtOps.INSTANCE, debug2));
         if (debug1.contains("Xp", 3)) {
             this.villagerXp = debug1.getInt("Xp");
@@ -718,7 +719,7 @@ VillagerDataHolder {
     }
 
     public boolean hasFarmSeeds() {
-        return this.getInventory().hasAnyOf((Set<Item>)ImmutableSet.of((Object)Items.WHEAT_SEEDS, (Object)Items.POTATO, (Object)Items.CARROT, (Object)Items.BEETROOT_SEEDS));
+        return this.getInventory().hasAnyOf((Set<Item>)ImmutableSet.of(Items.WHEAT_SEEDS, Items.POTATO, Items.CARROT, Items.BEETROOT_SEEDS)); // MagmaCube - decompile fix
     }
 
     @Override
@@ -880,10 +881,5 @@ VillagerDataHolder {
         }
         return false;
     }
-
-    @Override
-    public /* synthetic */ AgableMob getBreedOffspring(ServerLevel serverLevel, AgableMob agableMob) {
-        return this.getBreedOffspring(serverLevel, agableMob);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerData.java b/src/main/java/net/minecraft/world/entity/npc/VillagerData.java
index 780b93d68be9f594d4cef1de890b1a9ed5f75a5b..08a7ac3d4ea9680c017d27485e6d7507ea6de9e0 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerData.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerData.java
@@ -58,6 +58,6 @@ public class VillagerData
     
     static {
         NEXT_LEVEL_XP_THRESHOLDS = new int[] { 0, 10, 70, 150, 250 };
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Registry.VILLAGER_TYPE.fieldOf("type").orElseGet(() -> VillagerType.PLAINS).forGetter(debug0 -> debug0.type), (App)Registry.VILLAGER_PROFESSION.fieldOf("profession").orElseGet(() -> VillagerProfession.NONE).forGetter(debug0 -> debug0.profession), (App)Codec.INT.fieldOf("level").orElse((Object)1).forGetter(debug0 -> debug0.level)).apply(debug0, VillagerData::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Registry.VILLAGER_TYPE.fieldOf("type").orElseGet(() -> VillagerType.PLAINS).forGetter(debug0l -> debug0l.type), Registry.VILLAGER_PROFESSION.fieldOf("profession").orElseGet(() -> VillagerProfession.NONE).forGetter(debug0l -> debug0l.profession), Codec.INT.fieldOf("level").orElse(1).forGetter(debug0l -> debug0l.level)).apply(debug0, VillagerData::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java b/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java
index 0ac233a25cedab79cd2aba2384fb1212f6aafde9..39fe8b957960bc877fb5f72e634c9b6a87a652ad 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java
@@ -67,7 +67,7 @@ public class VillagerProfession
     }
     
     static VillagerProfession register(final String debug0, final PoiType debug1, @Nullable final SoundEvent debug2) {
-        return register(debug0, debug1, (ImmutableSet<Item>)ImmutableSet.of(), (ImmutableSet<Block>)ImmutableSet.of(), debug2);
+        return register(debug0, debug1, ImmutableSet.of(), ImmutableSet.of(), debug2); // MagmaCube - decompile fix
     }
     
     static VillagerProfession register(final String debug0, final PoiType debug1, final ImmutableSet<Item> debug2, final ImmutableSet<Block> debug3, @Nullable final SoundEvent debug4) {
@@ -80,7 +80,7 @@ public class VillagerProfession
         BUTCHER = register("butcher", PoiType.BUTCHER, SoundEvents.VILLAGER_WORK_BUTCHER);
         CARTOGRAPHER = register("cartographer", PoiType.CARTOGRAPHER, SoundEvents.VILLAGER_WORK_CARTOGRAPHER);
         CLERIC = register("cleric", PoiType.CLERIC, SoundEvents.VILLAGER_WORK_CLERIC);
-        FARMER = register("farmer", PoiType.FARMER, (ImmutableSet<Item>)ImmutableSet.of((Object)Items.WHEAT, (Object)Items.WHEAT_SEEDS, (Object)Items.BEETROOT_SEEDS, (Object)Items.BONE_MEAL), (ImmutableSet<Block>)ImmutableSet.of((Object)Blocks.FARMLAND), SoundEvents.VILLAGER_WORK_FARMER);
+        FARMER = register("farmer", PoiType.FARMER, (ImmutableSet<Item>)ImmutableSet.of(Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT_SEEDS, Items.BONE_MEAL), (ImmutableSet<Block>)ImmutableSet.of(Blocks.FARMLAND), SoundEvents.VILLAGER_WORK_FARMER); // MagmaCube - decompile fix
         FISHERMAN = register("fisherman", PoiType.FISHERMAN, SoundEvents.VILLAGER_WORK_FISHERMAN);
         FLETCHER = register("fletcher", PoiType.FLETCHER, SoundEvents.VILLAGER_WORK_FLETCHER);
         LEATHERWORKER = register("leatherworker", PoiType.LEATHERWORKER, SoundEvents.VILLAGER_WORK_LEATHERWORKER);
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
index 52156d041b8f62619df2e35d5db167e62c4ec58c..bc3c750f75fd59bc170931e7852acc4670aef4a5 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
@@ -61,21 +61,23 @@ import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 
 public class VillagerTrades {
     public static final Map<VillagerProfession, Int2ObjectMap<ItemListing[]>> TRADES = Util.make(Maps.newHashMap(), debug0 -> {
-        debug0.put(VillagerProfession.FARMER, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of((Object)1, (Object)new ItemListing[]{new EmeraldForItems(Items.WHEAT, 20, 16, 2), new EmeraldForItems(Items.POTATO, 26, 16, 2), new EmeraldForItems(Items.CARROT, 22, 16, 2), new EmeraldForItems(Items.BEETROOT, 15, 16, 2), new ItemsForEmeralds(Items.BREAD, 1, 6, 16, 1)}, (Object)2, (Object)new ItemListing[]{new EmeraldForItems(Blocks.PUMPKIN, 6, 12, 10), new ItemsForEmeralds(Items.PUMPKIN_PIE, 1, 4, 5), new ItemsForEmeralds(Items.APPLE, 1, 4, 16, 5)}, (Object)3, (Object)new ItemListing[]{new ItemsForEmeralds(Items.COOKIE, 3, 18, 10), new EmeraldForItems(Blocks.MELON, 4, 12, 20)}, (Object)4, (Object)new ItemListing[]{new ItemsForEmeralds(Blocks.CAKE, 1, 1, 12, 15), new SuspisciousStewForEmerald(MobEffects.NIGHT_VISION, 100, 15), new SuspisciousStewForEmerald(MobEffects.JUMP, 160, 15), new SuspisciousStewForEmerald(MobEffects.WEAKNESS, 140, 15), new SuspisciousStewForEmerald(MobEffects.BLINDNESS, 120, 15), new SuspisciousStewForEmerald(MobEffects.POISON, 280, 15), new SuspisciousStewForEmerald(MobEffects.SATURATION, 7, 15)}, (Object)5, (Object)new ItemListing[]{new ItemsForEmeralds(Items.GOLDEN_CARROT, 3, 3, 30), new ItemsForEmeralds(Items.GLISTERING_MELON_SLICE, 4, 3, 30)})));
-        debug0.put(VillagerProfession.FISHERMAN, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of((Object)1, (Object)new ItemListing[]{new EmeraldForItems(Items.STRING, 20, 16, 2), new EmeraldForItems(Items.COAL, 10, 16, 2), new ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, (Object)2, (Object)new ItemListing[]{new EmeraldForItems(Items.COD, 15, 16, 10), new ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, (Object)3, (Object)new ItemListing[]{new EmeraldForItems(Items.SALMON, 13, 16, 20), new EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2f)}, (Object)4, (Object)new ItemListing[]{new EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, (Object)5, (Object)new ItemListing[]{new EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new EmeraldsForVillagerTypeItem(1, 12, 30, (Map<VillagerType, Item>)ImmutableMap.builder().put((Object)VillagerType.PLAINS, (Object)Items.OAK_BOAT).put((Object)VillagerType.TAIGA, (Object)Items.SPRUCE_BOAT).put((Object)VillagerType.SNOW, (Object)Items.SPRUCE_BOAT).put((Object)VillagerType.DESERT, (Object)Items.JUNGLE_BOAT).put((Object)VillagerType.JUNGLE, (Object)Items.JUNGLE_BOAT).put((Object)VillagerType.SAVANNA, (Object)Items.ACACIA_BOAT).put((Object)VillagerType.SWAMP, (Object)Items.DARK_OAK_BOAT).build())})));
-        debug0.put(VillagerProfession.SHEPHERD, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of((Object)1, (Object)new ItemListing[]{new EmeraldForItems(Blocks.WHITE_WOOL, 18, 16, 2), new EmeraldForItems(Blocks.BROWN_WOOL, 18, 16, 2), new EmeraldForItems(Blocks.BLACK_WOOL, 18, 16, 2), new EmeraldForItems(Blocks.GRAY_WOOL, 18, 16, 2), new ItemsForEmeralds(Items.SHEARS, 2, 1, 1)}, (Object)2, (Object)new ItemListing[]{new EmeraldForItems(Items.WHITE_DYE, 12, 16, 10), new EmeraldForItems(Items.GRAY_DYE, 12, 16, 10), new EmeraldForItems(Items.BLACK_DYE, 12, 16, 10), new EmeraldForItems(Items.LIGHT_BLUE_DYE, 12, 16, 10), new EmeraldForItems(Items.LIME_DYE, 12, 16, 10), new ItemsForEmeralds(Blocks.WHITE_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.ORANGE_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.MAGENTA_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.LIGHT_BLUE_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.YELLOW_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.LIME_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.PINK_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.GRAY_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.LIGHT_GRAY_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.CYAN_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.PURPLE_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.BLUE_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.BROWN_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.GREEN_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.RED_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.BLACK_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.WHITE_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.ORANGE_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.MAGENTA_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.LIGHT_BLUE_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.YELLOW_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.LIME_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.PINK_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.GRAY_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.LIGHT_GRAY_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.CYAN_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.PURPLE_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.BLUE_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.BROWN_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.GREEN_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.RED_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.BLACK_CARPET, 1, 4, 16, 5)}, (Object)3, (Object)new ItemListing[]{new EmeraldForItems(Items.YELLOW_DYE, 12, 16, 20), new EmeraldForItems(Items.LIGHT_GRAY_DYE, 12, 16, 20), new EmeraldForItems(Items.ORANGE_DYE, 12, 16, 20), new EmeraldForItems(Items.RED_DYE, 12, 16, 20), new EmeraldForItems(Items.PINK_DYE, 12, 16, 20), new ItemsForEmeralds(Blocks.WHITE_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.YELLOW_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.RED_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.BLACK_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.BLUE_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.BROWN_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.CYAN_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.GRAY_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.GREEN_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.LIGHT_BLUE_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.LIGHT_GRAY_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.LIME_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.MAGENTA_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.ORANGE_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.PINK_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.PURPLE_BED, 3, 1, 12, 10)}, (Object)4, (Object)new ItemListing[]{new EmeraldForItems(Items.BROWN_DYE, 12, 16, 30), new EmeraldForItems(Items.PURPLE_DYE, 12, 16, 30), new EmeraldForItems(Items.BLUE_DYE, 12, 16, 30), new EmeraldForItems(Items.GREEN_DYE, 12, 16, 30), new EmeraldForItems(Items.MAGENTA_DYE, 12, 16, 30), new EmeraldForItems(Items.CYAN_DYE, 12, 16, 30), new ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.RED_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 12, 15)}, (Object)5, (Object)new ItemListing[]{new ItemsForEmeralds(Items.PAINTING, 2, 3, 30)})));
-        debug0.put(VillagerProfession.FLETCHER, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of((Object)1, (Object)new ItemListing[]{new EmeraldForItems(Items.STICK, 32, 16, 2), new ItemsForEmeralds(Items.ARROW, 1, 16, 1), new ItemsAndEmeraldsToItems(Blocks.GRAVEL, 10, Items.FLINT, 10, 12, 1)}, (Object)2, (Object)new ItemListing[]{new EmeraldForItems(Items.FLINT, 26, 12, 10), new ItemsForEmeralds(Items.BOW, 2, 1, 5)}, (Object)3, (Object)new ItemListing[]{new EmeraldForItems(Items.STRING, 14, 16, 20), new ItemsForEmeralds(Items.CROSSBOW, 3, 1, 10)}, (Object)4, (Object)new ItemListing[]{new EmeraldForItems(Items.FEATHER, 24, 16, 30), new EnchantedItemForEmeralds(Items.BOW, 2, 3, 15)}, (Object)5, (Object)new ItemListing[]{new EmeraldForItems(Items.TRIPWIRE_HOOK, 8, 12, 30), new EnchantedItemForEmeralds(Items.CROSSBOW, 3, 3, 15), new TippedArrowForItemsAndEmeralds(Items.ARROW, 5, Items.TIPPED_ARROW, 5, 2, 12, 30)})));
-        debug0.put(VillagerProfession.LIBRARIAN, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.builder().put((Object)1, (Object)new ItemListing[]{new EmeraldForItems(Items.PAPER, 24, 16, 2), new EnchantBookForEmeralds(1), new ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put((Object)2, (Object)new ItemListing[]{new EmeraldForItems(Items.BOOK, 4, 12, 10), new EnchantBookForEmeralds(5), new ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put((Object)3, (Object)new ItemListing[]{new EmeraldForItems(Items.INK_SAC, 5, 12, 20), new EnchantBookForEmeralds(10), new ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put((Object)4, (Object)new ItemListing[]{new EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new EnchantBookForEmeralds(15), new ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put((Object)5, (Object)new ItemListing[]{new ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
-        debug0.put(VillagerProfession.CARTOGRAPHER, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of((Object)1, (Object)new ItemListing[]{new EmeraldForItems(Items.PAPER, 24, 16, 2), new ItemsForEmeralds(Items.MAP, 7, 1, 1)}, (Object)2, (Object)new ItemListing[]{new EmeraldForItems(Items.GLASS_PANE, 11, 16, 10), new TreasureMapForEmeralds(13, StructureFeature.OCEAN_MONUMENT, MapDecoration.Type.MONUMENT, 12, 5)}, (Object)3, (Object)new ItemListing[]{new EmeraldForItems(Items.COMPASS, 1, 12, 20), new TreasureMapForEmeralds(14, StructureFeature.WOODLAND_MANSION, MapDecoration.Type.MANSION, 12, 10)}, (Object)4, (Object)new ItemListing[]{new ItemsForEmeralds(Items.ITEM_FRAME, 7, 1, 15), new ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.RED_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 15)}, (Object)5, (Object)new ItemListing[]{new ItemsForEmeralds(Items.GLOBE_BANNER_PATTER, 8, 1, 30)})));
-        debug0.put(VillagerProfession.CLERIC, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of((Object)1, (Object)new ItemListing[]{new EmeraldForItems(Items.ROTTEN_FLESH, 32, 16, 2), new ItemsForEmeralds(Items.REDSTONE, 1, 2, 1)}, (Object)2, (Object)new ItemListing[]{new EmeraldForItems(Items.GOLD_INGOT, 3, 12, 10), new ItemsForEmeralds(Items.LAPIS_LAZULI, 1, 1, 5)}, (Object)3, (Object)new ItemListing[]{new EmeraldForItems(Items.RABBIT_FOOT, 2, 12, 20), new ItemsForEmeralds(Blocks.GLOWSTONE, 4, 1, 12, 10)}, (Object)4, (Object)new ItemListing[]{new EmeraldForItems(Items.SCUTE, 4, 12, 30), new EmeraldForItems(Items.GLASS_BOTTLE, 9, 12, 30), new ItemsForEmeralds(Items.ENDER_PEARL, 5, 1, 15)}, (Object)5, (Object)new ItemListing[]{new EmeraldForItems(Items.NETHER_WART, 22, 12, 30), new ItemsForEmeralds(Items.EXPERIENCE_BOTTLE, 3, 1, 30)})));
-        debug0.put(VillagerProfession.ARMORER, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of((Object)1, (Object)new ItemListing[]{new EmeraldForItems(Items.COAL, 15, 16, 2), new ItemsForEmeralds(new ItemStack(Items.IRON_LEGGINGS), 7, 1, 12, 1, 0.2f), new ItemsForEmeralds(new ItemStack(Items.IRON_BOOTS), 4, 1, 12, 1, 0.2f), new ItemsForEmeralds(new ItemStack(Items.IRON_HELMET), 5, 1, 12, 1, 0.2f), new ItemsForEmeralds(new ItemStack(Items.IRON_CHESTPLATE), 9, 1, 12, 1, 0.2f)}, (Object)2, (Object)new ItemListing[]{new EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2f), new ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_BOOTS), 1, 1, 12, 5, 0.2f), new ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_LEGGINGS), 3, 1, 12, 5, 0.2f)}, (Object)3, (Object)new ItemListing[]{new EmeraldForItems(Items.LAVA_BUCKET, 1, 12, 20), new EmeraldForItems(Items.DIAMOND, 1, 12, 20), new ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_HELMET), 1, 1, 12, 10, 0.2f), new ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_CHESTPLATE), 4, 1, 12, 10, 0.2f), new ItemsForEmeralds(new ItemStack(Items.SHIELD), 5, 1, 12, 10, 0.2f)}, (Object)4, (Object)new ItemListing[]{new EnchantedItemForEmeralds(Items.DIAMOND_LEGGINGS, 14, 3, 15, 0.2f), new EnchantedItemForEmeralds(Items.DIAMOND_BOOTS, 8, 3, 15, 0.2f)}, (Object)5, (Object)new ItemListing[]{new EnchantedItemForEmeralds(Items.DIAMOND_HELMET, 8, 3, 30, 0.2f), new EnchantedItemForEmeralds(Items.DIAMOND_CHESTPLATE, 16, 3, 30, 0.2f)})));
-        debug0.put(VillagerProfession.WEAPONSMITH, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of((Object)1, (Object)new ItemListing[]{new EmeraldForItems(Items.COAL, 15, 16, 2), new ItemsForEmeralds(new ItemStack(Items.IRON_AXE), 3, 1, 12, 1, 0.2f), new EnchantedItemForEmeralds(Items.IRON_SWORD, 2, 3, 1)}, (Object)2, (Object)new ItemListing[]{new EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2f)}, (Object)3, (Object)new ItemListing[]{new EmeraldForItems(Items.FLINT, 24, 12, 20)}, (Object)4, (Object)new ItemListing[]{new EmeraldForItems(Items.DIAMOND, 1, 12, 30), new EnchantedItemForEmeralds(Items.DIAMOND_AXE, 12, 3, 15, 0.2f)}, (Object)5, (Object)new ItemListing[]{new EnchantedItemForEmeralds(Items.DIAMOND_SWORD, 8, 3, 30, 0.2f)})));
-        debug0.put(VillagerProfession.TOOLSMITH, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of((Object)1, (Object)new ItemListing[]{new EmeraldForItems(Items.COAL, 15, 16, 2), new ItemsForEmeralds(new ItemStack(Items.STONE_AXE), 1, 1, 12, 1, 0.2f), new ItemsForEmeralds(new ItemStack(Items.STONE_SHOVEL), 1, 1, 12, 1, 0.2f), new ItemsForEmeralds(new ItemStack(Items.STONE_PICKAXE), 1, 1, 12, 1, 0.2f), new ItemsForEmeralds(new ItemStack(Items.STONE_HOE), 1, 1, 12, 1, 0.2f)}, (Object)2, (Object)new ItemListing[]{new EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2f)}, (Object)3, (Object)new ItemListing[]{new EmeraldForItems(Items.FLINT, 30, 12, 20), new EnchantedItemForEmeralds(Items.IRON_AXE, 1, 3, 10, 0.2f), new EnchantedItemForEmeralds(Items.IRON_SHOVEL, 2, 3, 10, 0.2f), new EnchantedItemForEmeralds(Items.IRON_PICKAXE, 3, 3, 10, 0.2f), new ItemsForEmeralds(new ItemStack(Items.DIAMOND_HOE), 4, 1, 3, 10, 0.2f)}, (Object)4, (Object)new ItemListing[]{new EmeraldForItems(Items.DIAMOND, 1, 12, 30), new EnchantedItemForEmeralds(Items.DIAMOND_AXE, 12, 3, 15, 0.2f), new EnchantedItemForEmeralds(Items.DIAMOND_SHOVEL, 5, 3, 15, 0.2f)}, (Object)5, (Object)new ItemListing[]{new EnchantedItemForEmeralds(Items.DIAMOND_PICKAXE, 13, 3, 30, 0.2f)})));
-        debug0.put(VillagerProfession.BUTCHER, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of((Object)1, (Object)new ItemListing[]{new EmeraldForItems(Items.CHICKEN, 14, 16, 2), new EmeraldForItems(Items.PORKCHOP, 7, 16, 2), new EmeraldForItems(Items.RABBIT, 4, 16, 2), new ItemsForEmeralds(Items.RABBIT_STEW, 1, 1, 1)}, (Object)2, (Object)new ItemListing[]{new EmeraldForItems(Items.COAL, 15, 16, 2), new ItemsForEmeralds(Items.COOKED_PORKCHOP, 1, 5, 16, 5), new ItemsForEmeralds(Items.COOKED_CHICKEN, 1, 8, 16, 5)}, (Object)3, (Object)new ItemListing[]{new EmeraldForItems(Items.MUTTON, 7, 16, 20), new EmeraldForItems(Items.BEEF, 10, 16, 20)}, (Object)4, (Object)new ItemListing[]{new EmeraldForItems(Items.DRIED_KELP_BLOCK, 10, 12, 30)}, (Object)5, (Object)new ItemListing[]{new EmeraldForItems(Items.SWEET_BERRIES, 10, 12, 30)})));
-        debug0.put(VillagerProfession.LEATHERWORKER, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of((Object)1, (Object)new ItemListing[]{new EmeraldForItems(Items.LEATHER, 6, 16, 2), new DyedArmorForEmeralds(Items.LEATHER_LEGGINGS, 3), new DyedArmorForEmeralds(Items.LEATHER_CHESTPLATE, 7)}, (Object)2, (Object)new ItemListing[]{new EmeraldForItems(Items.FLINT, 26, 12, 10), new DyedArmorForEmeralds(Items.LEATHER_HELMET, 5, 12, 5), new DyedArmorForEmeralds(Items.LEATHER_BOOTS, 4, 12, 5)}, (Object)3, (Object)new ItemListing[]{new EmeraldForItems(Items.RABBIT_HIDE, 9, 12, 20), new DyedArmorForEmeralds(Items.LEATHER_CHESTPLATE, 7)}, (Object)4, (Object)new ItemListing[]{new EmeraldForItems(Items.SCUTE, 4, 12, 30), new DyedArmorForEmeralds(Items.LEATHER_HORSE_ARMOR, 6, 12, 15)}, (Object)5, (Object)new ItemListing[]{new ItemsForEmeralds(new ItemStack(Items.SADDLE), 6, 1, 12, 30, 0.2f), new DyedArmorForEmeralds(Items.LEATHER_HELMET, 5, 12, 30)})));
-        debug0.put(VillagerProfession.MASON, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of((Object)1, (Object)new ItemListing[]{new EmeraldForItems(Items.CLAY_BALL, 10, 16, 2), new ItemsForEmeralds(Items.BRICK, 1, 10, 16, 1)}, (Object)2, (Object)new ItemListing[]{new EmeraldForItems(Blocks.STONE, 20, 16, 10), new ItemsForEmeralds(Blocks.CHISELED_STONE_BRICKS, 1, 4, 16, 5)}, (Object)3, (Object)new ItemListing[]{new EmeraldForItems(Blocks.GRANITE, 16, 16, 20), new EmeraldForItems(Blocks.ANDESITE, 16, 16, 20), new EmeraldForItems(Blocks.DIORITE, 16, 16, 20), new ItemsForEmeralds(Blocks.POLISHED_ANDESITE, 1, 4, 16, 10), new ItemsForEmeralds(Blocks.POLISHED_DIORITE, 1, 4, 16, 10), new ItemsForEmeralds(Blocks.POLISHED_GRANITE, 1, 4, 16, 10)}, (Object)4, (Object)new ItemListing[]{new EmeraldForItems(Items.QUARTZ, 12, 12, 30), new ItemsForEmeralds(Blocks.ORANGE_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.WHITE_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.BLUE_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.LIGHT_BLUE_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.GRAY_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.LIGHT_GRAY_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.BLACK_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.RED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.PINK_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.MAGENTA_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.LIME_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.GREEN_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.CYAN_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.PURPLE_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.YELLOW_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.BROWN_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.ORANGE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.WHITE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.BLUE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.GRAY_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.BLACK_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.RED_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.PINK_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.MAGENTA_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.LIME_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.GREEN_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.CYAN_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.PURPLE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.YELLOW_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.BROWN_GLAZED_TERRACOTTA, 1, 1, 12, 15)}, (Object)5, (Object)new ItemListing[]{new ItemsForEmeralds(Blocks.QUARTZ_PILLAR, 1, 1, 12, 30), new ItemsForEmeralds(Blocks.QUARTZ_BLOCK, 1, 1, 12, 30)})));
+        // MagmaCube start - decompile fix
+        debug0.put(VillagerProfession.FARMER, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of(1, new ItemListing[]{new EmeraldForItems(Items.WHEAT, 20, 16, 2), new EmeraldForItems(Items.POTATO, 26, 16, 2), new EmeraldForItems(Items.CARROT, 22, 16, 2), new EmeraldForItems(Items.BEETROOT, 15, 16, 2), new ItemsForEmeralds(Items.BREAD, 1, 6, 16, 1)}, 2, new ItemListing[]{new EmeraldForItems(Blocks.PUMPKIN, 6, 12, 10), new ItemsForEmeralds(Items.PUMPKIN_PIE, 1, 4, 5), new ItemsForEmeralds(Items.APPLE, 1, 4, 16, 5)}, 3, new ItemListing[]{new ItemsForEmeralds(Items.COOKIE, 3, 18, 10), new EmeraldForItems(Blocks.MELON, 4, 12, 20)}, 4, new ItemListing[]{new ItemsForEmeralds(Blocks.CAKE, 1, 1, 12, 15), new SuspisciousStewForEmerald(MobEffects.NIGHT_VISION, 100, 15), new SuspisciousStewForEmerald(MobEffects.JUMP, 160, 15), new SuspisciousStewForEmerald(MobEffects.WEAKNESS, 140, 15), new SuspisciousStewForEmerald(MobEffects.BLINDNESS, 120, 15), new SuspisciousStewForEmerald(MobEffects.POISON, 280, 15), new SuspisciousStewForEmerald(MobEffects.SATURATION, 7, 15)}, 5, new ItemListing[]{new ItemsForEmeralds(Items.GOLDEN_CARROT, 3, 3, 30), new ItemsForEmeralds(Items.GLISTERING_MELON_SLICE, 4, 3, 30)})));
+        debug0.put(VillagerProfession.FISHERMAN, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of(1, new ItemListing[]{new EmeraldForItems(Items.STRING, 20, 16, 2), new EmeraldForItems(Items.COAL, 10, 16, 2), new ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new ItemListing[]{new EmeraldForItems(Items.COD, 15, 16, 10), new ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new ItemListing[]{new EmeraldForItems(Items.SALMON, 13, 16, 20), new EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2f)}, 4, new ItemListing[]{new EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new ItemListing[]{new EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new EmeraldsForVillagerTypeItem(1, 12, 30, (Map<VillagerType, Item>) (Object) ImmutableMap.builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
+        debug0.put(VillagerProfession.SHEPHERD, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of(1, new ItemListing[]{new EmeraldForItems(Blocks.WHITE_WOOL, 18, 16, 2), new EmeraldForItems(Blocks.BROWN_WOOL, 18, 16, 2), new EmeraldForItems(Blocks.BLACK_WOOL, 18, 16, 2), new EmeraldForItems(Blocks.GRAY_WOOL, 18, 16, 2), new ItemsForEmeralds(Items.SHEARS, 2, 1, 1)}, 2, new ItemListing[]{new EmeraldForItems(Items.WHITE_DYE, 12, 16, 10), new EmeraldForItems(Items.GRAY_DYE, 12, 16, 10), new EmeraldForItems(Items.BLACK_DYE, 12, 16, 10), new EmeraldForItems(Items.LIGHT_BLUE_DYE, 12, 16, 10), new EmeraldForItems(Items.LIME_DYE, 12, 16, 10), new ItemsForEmeralds(Blocks.WHITE_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.ORANGE_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.MAGENTA_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.LIGHT_BLUE_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.YELLOW_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.LIME_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.PINK_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.GRAY_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.LIGHT_GRAY_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.CYAN_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.PURPLE_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.BLUE_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.BROWN_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.GREEN_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.RED_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.BLACK_WOOL, 1, 1, 16, 5), new ItemsForEmeralds(Blocks.WHITE_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.ORANGE_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.MAGENTA_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.LIGHT_BLUE_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.YELLOW_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.LIME_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.PINK_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.GRAY_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.LIGHT_GRAY_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.CYAN_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.PURPLE_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.BLUE_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.BROWN_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.GREEN_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.RED_CARPET, 1, 4, 16, 5), new ItemsForEmeralds(Blocks.BLACK_CARPET, 1, 4, 16, 5)}, 3, new ItemListing[]{new EmeraldForItems(Items.YELLOW_DYE, 12, 16, 20), new EmeraldForItems(Items.LIGHT_GRAY_DYE, 12, 16, 20), new EmeraldForItems(Items.ORANGE_DYE, 12, 16, 20), new EmeraldForItems(Items.RED_DYE, 12, 16, 20), new EmeraldForItems(Items.PINK_DYE, 12, 16, 20), new ItemsForEmeralds(Blocks.WHITE_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.YELLOW_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.RED_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.BLACK_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.BLUE_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.BROWN_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.CYAN_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.GRAY_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.GREEN_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.LIGHT_BLUE_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.LIGHT_GRAY_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.LIME_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.MAGENTA_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.ORANGE_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.PINK_BED, 3, 1, 12, 10), new ItemsForEmeralds(Blocks.PURPLE_BED, 3, 1, 12, 10)}, 4, new ItemListing[]{new EmeraldForItems(Items.BROWN_DYE, 12, 16, 30), new EmeraldForItems(Items.PURPLE_DYE, 12, 16, 30), new EmeraldForItems(Items.BLUE_DYE, 12, 16, 30), new EmeraldForItems(Items.GREEN_DYE, 12, 16, 30), new EmeraldForItems(Items.MAGENTA_DYE, 12, 16, 30), new EmeraldForItems(Items.CYAN_DYE, 12, 16, 30), new ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.RED_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 12, 15), new ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 12, 15)}, 5, new ItemListing[]{new ItemsForEmeralds(Items.PAINTING, 2, 3, 30)})));
+        debug0.put(VillagerProfession.FLETCHER, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of(1, new ItemListing[]{new EmeraldForItems(Items.STICK, 32, 16, 2), new ItemsForEmeralds(Items.ARROW, 1, 16, 1), new ItemsAndEmeraldsToItems(Blocks.GRAVEL, 10, Items.FLINT, 10, 12, 1)}, 2, new ItemListing[]{new EmeraldForItems(Items.FLINT, 26, 12, 10), new ItemsForEmeralds(Items.BOW, 2, 1, 5)}, 3, new ItemListing[]{new EmeraldForItems(Items.STRING, 14, 16, 20), new ItemsForEmeralds(Items.CROSSBOW, 3, 1, 10)}, 4, new ItemListing[]{new EmeraldForItems(Items.FEATHER, 24, 16, 30), new EnchantedItemForEmeralds(Items.BOW, 2, 3, 15)}, 5, new ItemListing[]{new EmeraldForItems(Items.TRIPWIRE_HOOK, 8, 12, 30), new EnchantedItemForEmeralds(Items.CROSSBOW, 3, 3, 15), new TippedArrowForItemsAndEmeralds(Items.ARROW, 5, Items.TIPPED_ARROW, 5, 2, 12, 30)})));
+        debug0.put(VillagerProfession.LIBRARIAN, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)(Object)ImmutableMap.builder().put(1, new ItemListing[]{new EmeraldForItems(Items.PAPER, 24, 16, 2), new EnchantBookForEmeralds(1), new ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new ItemListing[]{new EmeraldForItems(Items.BOOK, 4, 12, 10), new EnchantBookForEmeralds(5), new ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new ItemListing[]{new EmeraldForItems(Items.INK_SAC, 5, 12, 20), new EnchantBookForEmeralds(10), new ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new ItemListing[]{new EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new EnchantBookForEmeralds(15), new ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new ItemListing[]{new ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
+        debug0.put(VillagerProfession.CARTOGRAPHER, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of(1, new ItemListing[]{new EmeraldForItems(Items.PAPER, 24, 16, 2), new ItemsForEmeralds(Items.MAP, 7, 1, 1)}, 2, new ItemListing[]{new EmeraldForItems(Items.GLASS_PANE, 11, 16, 10), new TreasureMapForEmeralds(13, StructureFeature.OCEAN_MONUMENT, MapDecoration.Type.MONUMENT, 12, 5)}, 3, new ItemListing[]{new EmeraldForItems(Items.COMPASS, 1, 12, 20), new TreasureMapForEmeralds(14, StructureFeature.WOODLAND_MANSION, MapDecoration.Type.MANSION, 12, 10)}, 4, new ItemListing[]{new ItemsForEmeralds(Items.ITEM_FRAME, 7, 1, 15), new ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.RED_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 15), new ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 15)}, 5, new ItemListing[]{new ItemsForEmeralds(Items.GLOBE_BANNER_PATTER, 8, 1, 30)})));
+        debug0.put(VillagerProfession.CLERIC, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of(1, new ItemListing[]{new EmeraldForItems(Items.ROTTEN_FLESH, 32, 16, 2), new ItemsForEmeralds(Items.REDSTONE, 1, 2, 1)}, 2, new ItemListing[]{new EmeraldForItems(Items.GOLD_INGOT, 3, 12, 10), new ItemsForEmeralds(Items.LAPIS_LAZULI, 1, 1, 5)}, 3, new ItemListing[]{new EmeraldForItems(Items.RABBIT_FOOT, 2, 12, 20), new ItemsForEmeralds(Blocks.GLOWSTONE, 4, 1, 12, 10)}, 4, new ItemListing[]{new EmeraldForItems(Items.SCUTE, 4, 12, 30), new EmeraldForItems(Items.GLASS_BOTTLE, 9, 12, 30), new ItemsForEmeralds(Items.ENDER_PEARL, 5, 1, 15)}, 5, new ItemListing[]{new EmeraldForItems(Items.NETHER_WART, 22, 12, 30), new ItemsForEmeralds(Items.EXPERIENCE_BOTTLE, 3, 1, 30)})));
+        debug0.put(VillagerProfession.ARMORER, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of(1, new ItemListing[]{new EmeraldForItems(Items.COAL, 15, 16, 2), new ItemsForEmeralds(new ItemStack(Items.IRON_LEGGINGS), 7, 1, 12, 1, 0.2f), new ItemsForEmeralds(new ItemStack(Items.IRON_BOOTS), 4, 1, 12, 1, 0.2f), new ItemsForEmeralds(new ItemStack(Items.IRON_HELMET), 5, 1, 12, 1, 0.2f), new ItemsForEmeralds(new ItemStack(Items.IRON_CHESTPLATE), 9, 1, 12, 1, 0.2f)}, 2, new ItemListing[]{new EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2f), new ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_BOOTS), 1, 1, 12, 5, 0.2f), new ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_LEGGINGS), 3, 1, 12, 5, 0.2f)}, 3, new ItemListing[]{new EmeraldForItems(Items.LAVA_BUCKET, 1, 12, 20), new EmeraldForItems(Items.DIAMOND, 1, 12, 20), new ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_HELMET), 1, 1, 12, 10, 0.2f), new ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_CHESTPLATE), 4, 1, 12, 10, 0.2f), new ItemsForEmeralds(new ItemStack(Items.SHIELD), 5, 1, 12, 10, 0.2f)}, 4, new ItemListing[]{new EnchantedItemForEmeralds(Items.DIAMOND_LEGGINGS, 14, 3, 15, 0.2f), new EnchantedItemForEmeralds(Items.DIAMOND_BOOTS, 8, 3, 15, 0.2f)}, 5, new ItemListing[]{new EnchantedItemForEmeralds(Items.DIAMOND_HELMET, 8, 3, 30, 0.2f), new EnchantedItemForEmeralds(Items.DIAMOND_CHESTPLATE, 16, 3, 30, 0.2f)})));
+        debug0.put(VillagerProfession.WEAPONSMITH, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of(1, new ItemListing[]{new EmeraldForItems(Items.COAL, 15, 16, 2), new ItemsForEmeralds(new ItemStack(Items.IRON_AXE), 3, 1, 12, 1, 0.2f), new EnchantedItemForEmeralds(Items.IRON_SWORD, 2, 3, 1)}, 2, new ItemListing[]{new EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2f)}, 3, new ItemListing[]{new EmeraldForItems(Items.FLINT, 24, 12, 20)}, 4, new ItemListing[]{new EmeraldForItems(Items.DIAMOND, 1, 12, 30), new EnchantedItemForEmeralds(Items.DIAMOND_AXE, 12, 3, 15, 0.2f)}, 5, new ItemListing[]{new EnchantedItemForEmeralds(Items.DIAMOND_SWORD, 8, 3, 30, 0.2f)})));
+        debug0.put(VillagerProfession.TOOLSMITH, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of(1, new ItemListing[]{new EmeraldForItems(Items.COAL, 15, 16, 2), new ItemsForEmeralds(new ItemStack(Items.STONE_AXE), 1, 1, 12, 1, 0.2f), new ItemsForEmeralds(new ItemStack(Items.STONE_SHOVEL), 1, 1, 12, 1, 0.2f), new ItemsForEmeralds(new ItemStack(Items.STONE_PICKAXE), 1, 1, 12, 1, 0.2f), new ItemsForEmeralds(new ItemStack(Items.STONE_HOE), 1, 1, 12, 1, 0.2f)}, 2, new ItemListing[]{new EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2f)}, 3, new ItemListing[]{new EmeraldForItems(Items.FLINT, 30, 12, 20), new EnchantedItemForEmeralds(Items.IRON_AXE, 1, 3, 10, 0.2f), new EnchantedItemForEmeralds(Items.IRON_SHOVEL, 2, 3, 10, 0.2f), new EnchantedItemForEmeralds(Items.IRON_PICKAXE, 3, 3, 10, 0.2f), new ItemsForEmeralds(new ItemStack(Items.DIAMOND_HOE), 4, 1, 3, 10, 0.2f)}, 4, new ItemListing[]{new EmeraldForItems(Items.DIAMOND, 1, 12, 30), new EnchantedItemForEmeralds(Items.DIAMOND_AXE, 12, 3, 15, 0.2f), new EnchantedItemForEmeralds(Items.DIAMOND_SHOVEL, 5, 3, 15, 0.2f)}, 5, new ItemListing[]{new EnchantedItemForEmeralds(Items.DIAMOND_PICKAXE, 13, 3, 30, 0.2f)})));
+        debug0.put(VillagerProfession.BUTCHER, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of(1, new ItemListing[]{new EmeraldForItems(Items.CHICKEN, 14, 16, 2), new EmeraldForItems(Items.PORKCHOP, 7, 16, 2), new EmeraldForItems(Items.RABBIT, 4, 16, 2), new ItemsForEmeralds(Items.RABBIT_STEW, 1, 1, 1)}, 2, new ItemListing[]{new EmeraldForItems(Items.COAL, 15, 16, 2), new ItemsForEmeralds(Items.COOKED_PORKCHOP, 1, 5, 16, 5), new ItemsForEmeralds(Items.COOKED_CHICKEN, 1, 8, 16, 5)}, 3, new ItemListing[]{new EmeraldForItems(Items.MUTTON, 7, 16, 20), new EmeraldForItems(Items.BEEF, 10, 16, 20)}, 4, new ItemListing[]{new EmeraldForItems(Items.DRIED_KELP_BLOCK, 10, 12, 30)}, 5, new ItemListing[]{new EmeraldForItems(Items.SWEET_BERRIES, 10, 12, 30)})));
+        debug0.put(VillagerProfession.LEATHERWORKER, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of(1, new ItemListing[]{new EmeraldForItems(Items.LEATHER, 6, 16, 2), new DyedArmorForEmeralds(Items.LEATHER_LEGGINGS, 3), new DyedArmorForEmeralds(Items.LEATHER_CHESTPLATE, 7)}, 2, new ItemListing[]{new EmeraldForItems(Items.FLINT, 26, 12, 10), new DyedArmorForEmeralds(Items.LEATHER_HELMET, 5, 12, 5), new DyedArmorForEmeralds(Items.LEATHER_BOOTS, 4, 12, 5)}, 3, new ItemListing[]{new EmeraldForItems(Items.RABBIT_HIDE, 9, 12, 20), new DyedArmorForEmeralds(Items.LEATHER_CHESTPLATE, 7)}, 4, new ItemListing[]{new EmeraldForItems(Items.SCUTE, 4, 12, 30), new DyedArmorForEmeralds(Items.LEATHER_HORSE_ARMOR, 6, 12, 15)}, 5, new ItemListing[]{new ItemsForEmeralds(new ItemStack(Items.SADDLE), 6, 1, 12, 30, 0.2f), new DyedArmorForEmeralds(Items.LEATHER_HELMET, 5, 12, 30)})));
+        debug0.put(VillagerProfession.MASON, VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of(1, new ItemListing[]{new EmeraldForItems(Items.CLAY_BALL, 10, 16, 2), new ItemsForEmeralds(Items.BRICK, 1, 10, 16, 1)}, 2, new ItemListing[]{new EmeraldForItems(Blocks.STONE, 20, 16, 10), new ItemsForEmeralds(Blocks.CHISELED_STONE_BRICKS, 1, 4, 16, 5)}, 3, new ItemListing[]{new EmeraldForItems(Blocks.GRANITE, 16, 16, 20), new EmeraldForItems(Blocks.ANDESITE, 16, 16, 20), new EmeraldForItems(Blocks.DIORITE, 16, 16, 20), new ItemsForEmeralds(Blocks.POLISHED_ANDESITE, 1, 4, 16, 10), new ItemsForEmeralds(Blocks.POLISHED_DIORITE, 1, 4, 16, 10), new ItemsForEmeralds(Blocks.POLISHED_GRANITE, 1, 4, 16, 10)}, 4, new ItemListing[]{new EmeraldForItems(Items.QUARTZ, 12, 12, 30), new ItemsForEmeralds(Blocks.ORANGE_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.WHITE_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.BLUE_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.LIGHT_BLUE_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.GRAY_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.LIGHT_GRAY_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.BLACK_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.RED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.PINK_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.MAGENTA_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.LIME_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.GREEN_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.CYAN_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.PURPLE_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.YELLOW_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.BROWN_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.ORANGE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.WHITE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.BLUE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.GRAY_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.BLACK_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.RED_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.PINK_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.MAGENTA_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.LIME_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.GREEN_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.CYAN_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.PURPLE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.YELLOW_GLAZED_TERRACOTTA, 1, 1, 12, 15), new ItemsForEmeralds(Blocks.BROWN_GLAZED_TERRACOTTA, 1, 1, 12, 15)}, 5, new ItemListing[]{new ItemsForEmeralds(Blocks.QUARTZ_PILLAR, 1, 1, 12, 30), new ItemsForEmeralds(Blocks.QUARTZ_BLOCK, 1, 1, 12, 30)})));
     });
-    public static final Int2ObjectMap<ItemListing[]> WANDERING_TRADER_TRADES = VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of((Object)1, (Object)new ItemListing[]{new ItemsForEmeralds(Items.SEA_PICKLE, 2, 1, 5, 1), new ItemsForEmeralds(Items.SLIME_BALL, 4, 1, 5, 1), new ItemsForEmeralds(Items.GLOWSTONE, 2, 1, 5, 1), new ItemsForEmeralds(Items.NAUTILUS_SHELL, 5, 1, 5, 1), new ItemsForEmeralds(Items.FERN, 1, 1, 12, 1), new ItemsForEmeralds(Items.SUGAR_CANE, 1, 1, 8, 1), new ItemsForEmeralds(Items.PUMPKIN, 1, 1, 4, 1), new ItemsForEmeralds(Items.KELP, 3, 1, 12, 1), new ItemsForEmeralds(Items.CACTUS, 3, 1, 8, 1), new ItemsForEmeralds(Items.DANDELION, 1, 1, 12, 1), new ItemsForEmeralds(Items.POPPY, 1, 1, 12, 1), new ItemsForEmeralds(Items.BLUE_ORCHID, 1, 1, 8, 1), new ItemsForEmeralds(Items.ALLIUM, 1, 1, 12, 1), new ItemsForEmeralds(Items.AZURE_BLUET, 1, 1, 12, 1), new ItemsForEmeralds(Items.RED_TULIP, 1, 1, 12, 1), new ItemsForEmeralds(Items.ORANGE_TULIP, 1, 1, 12, 1), new ItemsForEmeralds(Items.WHITE_TULIP, 1, 1, 12, 1), new ItemsForEmeralds(Items.PINK_TULIP, 1, 1, 12, 1), new ItemsForEmeralds(Items.OXEYE_DAISY, 1, 1, 12, 1), new ItemsForEmeralds(Items.CORNFLOWER, 1, 1, 12, 1), new ItemsForEmeralds(Items.LILY_OF_THE_VALLEY, 1, 1, 7, 1), new ItemsForEmeralds(Items.WHEAT_SEEDS, 1, 1, 12, 1), new ItemsForEmeralds(Items.BEETROOT_SEEDS, 1, 1, 12, 1), new ItemsForEmeralds(Items.PUMPKIN_SEEDS, 1, 1, 12, 1), new ItemsForEmeralds(Items.MELON_SEEDS, 1, 1, 12, 1), new ItemsForEmeralds(Items.ACACIA_SAPLING, 5, 1, 8, 1), new ItemsForEmeralds(Items.BIRCH_SAPLING, 5, 1, 8, 1), new ItemsForEmeralds(Items.DARK_OAK_SAPLING, 5, 1, 8, 1), new ItemsForEmeralds(Items.JUNGLE_SAPLING, 5, 1, 8, 1), new ItemsForEmeralds(Items.OAK_SAPLING, 5, 1, 8, 1), new ItemsForEmeralds(Items.SPRUCE_SAPLING, 5, 1, 8, 1), new ItemsForEmeralds(Items.RED_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.WHITE_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.BLUE_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.PINK_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.BLACK_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.GREEN_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.LIGHT_GRAY_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.MAGENTA_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.YELLOW_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.GRAY_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.PURPLE_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.LIGHT_BLUE_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.LIME_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.ORANGE_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.BROWN_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.CYAN_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.BRAIN_CORAL_BLOCK, 3, 1, 8, 1), new ItemsForEmeralds(Items.BUBBLE_CORAL_BLOCK, 3, 1, 8, 1), new ItemsForEmeralds(Items.FIRE_CORAL_BLOCK, 3, 1, 8, 1), new ItemsForEmeralds(Items.HORN_CORAL_BLOCK, 3, 1, 8, 1), new ItemsForEmeralds(Items.TUBE_CORAL_BLOCK, 3, 1, 8, 1), new ItemsForEmeralds(Items.VINE, 1, 1, 12, 1), new ItemsForEmeralds(Items.BROWN_MUSHROOM, 1, 1, 12, 1), new ItemsForEmeralds(Items.RED_MUSHROOM, 1, 1, 12, 1), new ItemsForEmeralds(Items.LILY_PAD, 1, 2, 5, 1), new ItemsForEmeralds(Items.SAND, 1, 8, 8, 1), new ItemsForEmeralds(Items.RED_SAND, 1, 4, 6, 1)}, (Object)2, (Object)new ItemListing[]{new ItemsForEmeralds(Items.TROPICAL_FISH_BUCKET, 5, 1, 4, 1), new ItemsForEmeralds(Items.PUFFERFISH_BUCKET, 5, 1, 4, 1), new ItemsForEmeralds(Items.PACKED_ICE, 3, 1, 6, 1), new ItemsForEmeralds(Items.BLUE_ICE, 6, 1, 6, 1), new ItemsForEmeralds(Items.GUNPOWDER, 1, 1, 8, 1), new ItemsForEmeralds(Items.PODZOL, 3, 3, 6, 1)}));
+    public static final Int2ObjectMap<ItemListing[]> WANDERING_TRADER_TRADES = VillagerTrades.toIntMap((ImmutableMap<Integer, ItemListing[]>)ImmutableMap.of(1, new ItemListing[]{new ItemsForEmeralds(Items.SEA_PICKLE, 2, 1, 5, 1), new ItemsForEmeralds(Items.SLIME_BALL, 4, 1, 5, 1), new ItemsForEmeralds(Items.GLOWSTONE, 2, 1, 5, 1), new ItemsForEmeralds(Items.NAUTILUS_SHELL, 5, 1, 5, 1), new ItemsForEmeralds(Items.FERN, 1, 1, 12, 1), new ItemsForEmeralds(Items.SUGAR_CANE, 1, 1, 8, 1), new ItemsForEmeralds(Items.PUMPKIN, 1, 1, 4, 1), new ItemsForEmeralds(Items.KELP, 3, 1, 12, 1), new ItemsForEmeralds(Items.CACTUS, 3, 1, 8, 1), new ItemsForEmeralds(Items.DANDELION, 1, 1, 12, 1), new ItemsForEmeralds(Items.POPPY, 1, 1, 12, 1), new ItemsForEmeralds(Items.BLUE_ORCHID, 1, 1, 8, 1), new ItemsForEmeralds(Items.ALLIUM, 1, 1, 12, 1), new ItemsForEmeralds(Items.AZURE_BLUET, 1, 1, 12, 1), new ItemsForEmeralds(Items.RED_TULIP, 1, 1, 12, 1), new ItemsForEmeralds(Items.ORANGE_TULIP, 1, 1, 12, 1), new ItemsForEmeralds(Items.WHITE_TULIP, 1, 1, 12, 1), new ItemsForEmeralds(Items.PINK_TULIP, 1, 1, 12, 1), new ItemsForEmeralds(Items.OXEYE_DAISY, 1, 1, 12, 1), new ItemsForEmeralds(Items.CORNFLOWER, 1, 1, 12, 1), new ItemsForEmeralds(Items.LILY_OF_THE_VALLEY, 1, 1, 7, 1), new ItemsForEmeralds(Items.WHEAT_SEEDS, 1, 1, 12, 1), new ItemsForEmeralds(Items.BEETROOT_SEEDS, 1, 1, 12, 1), new ItemsForEmeralds(Items.PUMPKIN_SEEDS, 1, 1, 12, 1), new ItemsForEmeralds(Items.MELON_SEEDS, 1, 1, 12, 1), new ItemsForEmeralds(Items.ACACIA_SAPLING, 5, 1, 8, 1), new ItemsForEmeralds(Items.BIRCH_SAPLING, 5, 1, 8, 1), new ItemsForEmeralds(Items.DARK_OAK_SAPLING, 5, 1, 8, 1), new ItemsForEmeralds(Items.JUNGLE_SAPLING, 5, 1, 8, 1), new ItemsForEmeralds(Items.OAK_SAPLING, 5, 1, 8, 1), new ItemsForEmeralds(Items.SPRUCE_SAPLING, 5, 1, 8, 1), new ItemsForEmeralds(Items.RED_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.WHITE_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.BLUE_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.PINK_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.BLACK_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.GREEN_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.LIGHT_GRAY_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.MAGENTA_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.YELLOW_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.GRAY_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.PURPLE_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.LIGHT_BLUE_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.LIME_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.ORANGE_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.BROWN_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.CYAN_DYE, 1, 3, 12, 1), new ItemsForEmeralds(Items.BRAIN_CORAL_BLOCK, 3, 1, 8, 1), new ItemsForEmeralds(Items.BUBBLE_CORAL_BLOCK, 3, 1, 8, 1), new ItemsForEmeralds(Items.FIRE_CORAL_BLOCK, 3, 1, 8, 1), new ItemsForEmeralds(Items.HORN_CORAL_BLOCK, 3, 1, 8, 1), new ItemsForEmeralds(Items.TUBE_CORAL_BLOCK, 3, 1, 8, 1), new ItemsForEmeralds(Items.VINE, 1, 1, 12, 1), new ItemsForEmeralds(Items.BROWN_MUSHROOM, 1, 1, 12, 1), new ItemsForEmeralds(Items.RED_MUSHROOM, 1, 1, 12, 1), new ItemsForEmeralds(Items.LILY_PAD, 1, 2, 5, 1), new ItemsForEmeralds(Items.SAND, 1, 8, 8, 1), new ItemsForEmeralds(Items.RED_SAND, 1, 4, 6, 1)}, 2, new ItemListing[]{new ItemsForEmeralds(Items.TROPICAL_FISH_BUCKET, 5, 1, 4, 1), new ItemsForEmeralds(Items.PUFFERFISH_BUCKET, 5, 1, 4, 1), new ItemsForEmeralds(Items.PACKED_ICE, 3, 1, 6, 1), new ItemsForEmeralds(Items.BLUE_ICE, 6, 1, 6, 1), new ItemsForEmeralds(Items.GUNPOWDER, 1, 1, 8, 1), new ItemsForEmeralds(Items.PODZOL, 3, 3, 6, 1)}));
+    // MagmaCube stop - decompile fix
 
     private static Int2ObjectMap<ItemListing[]> toIntMap(ImmutableMap<Integer, ItemListing[]> debug0) {
         return new Int2ObjectOpenHashMap(debug0);
@@ -361,7 +363,7 @@ public class VillagerTrades {
         @Nullable
         public MerchantOffer getOffer(Entity debug1, Random debug2) {
             if (debug1 instanceof VillagerDataHolder) {
-                ItemStack debug3 = new ItemStack(this.trades.get(((VillagerDataHolder)((Object)debug1)).getVillagerData().getType()), this.cost);
+                ItemStack debug3 = new ItemStack(this.trades.get(((VillagerDataHolder)(debug1)).getVillagerData().getType()), this.cost); // MagmaCube - decompile fix
                 return new MerchantOffer(debug3, new ItemStack(Items.EMERALD), this.maxUses, this.villagerXp, 0.05f);
             }
             return null;
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerType.java b/src/main/java/net/minecraft/world/entity/npc/VillagerType.java
index 32da840aed89519592cade54340e76bc4ff148e5..adb2f1c137478d58314210946544c01ae3438c93 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerType.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerType.java
@@ -37,7 +37,7 @@ public final class VillagerType
     }
     
     public static VillagerType byBiome(final Optional<ResourceKey<Biome>> debug0) {
-        return debug0.flatMap(debug0 -> Optional.ofNullable(VillagerType.BY_BIOME.get(debug0))).orElse(VillagerType.PLAINS);
+        return debug0.flatMap(debug0l -> Optional.ofNullable(VillagerType.BY_BIOME.get(debug0l))).orElse(VillagerType.PLAINS); // MagmaCube - decompile fix
     }
     
     static {
@@ -48,7 +48,7 @@ public final class VillagerType
         SNOW = register("snow");
         SWAMP = register("swamp");
         TAIGA = register("taiga");
-        BY_BIOME = Util.make((Map<ResourceKey<Biome>, VillagerType>)Maps.newHashMap(), debug0 -> {
+        BY_BIOME = Util.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put(Biomes.BADLANDS, VillagerType.DESERT);
             debug0.put(Biomes.BADLANDS_PLATEAU, VillagerType.DESERT);
             debug0.put(Biomes.DESERT, VillagerType.DESERT);
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
index 252fa1e67e061b0b88a3de340f55f1a88ad607ac..304aa34f4d38fb8b9ac5494cc40a1b073583f9c7 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
@@ -66,16 +66,16 @@ public class WanderingTrader extends AbstractVillager
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
-        this.goalSelector.addGoal(0, new UseItemGoal<Object>(this, PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.INVISIBILITY), SoundEvents.WANDERING_TRADER_DISAPPEARED, debug1 -> this.level.isNight() && !debug1.isInvisible()));
-        this.goalSelector.addGoal(0, new UseItemGoal<Object>(this, new ItemStack(Items.MILK_BUCKET), SoundEvents.WANDERING_TRADER_REAPPEARED, debug1 -> this.level.isDay() && debug1.isInvisible()));
+        this.goalSelector.addGoal(0, new UseItemGoal<>(this, PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.INVISIBILITY), SoundEvents.WANDERING_TRADER_DISAPPEARED, debug1 -> this.level.isNight() && !debug1.isInvisible())); // MagmaCube - decompile fix
+        this.goalSelector.addGoal(0, new UseItemGoal<>(this, new ItemStack(Items.MILK_BUCKET), SoundEvents.WANDERING_TRADER_REAPPEARED, debug1 -> this.level.isDay() && debug1.isInvisible())); // MagmaCube - decompile fix
         this.goalSelector.addGoal(1, new TradeWithPlayerGoal(this));
-        this.goalSelector.addGoal(1, new AvoidEntityGoal<Object>(this, Zombie.class, 8.0f, 0.5, 0.5));
-        this.goalSelector.addGoal(1, new AvoidEntityGoal<Object>(this, Evoker.class, 12.0f, 0.5, 0.5));
-        this.goalSelector.addGoal(1, new AvoidEntityGoal<Object>(this, Vindicator.class, 8.0f, 0.5, 0.5));
-        this.goalSelector.addGoal(1, new AvoidEntityGoal<Object>(this, Vex.class, 8.0f, 0.5, 0.5));
-        this.goalSelector.addGoal(1, new AvoidEntityGoal<Object>(this, Pillager.class, 15.0f, 0.5, 0.5));
-        this.goalSelector.addGoal(1, new AvoidEntityGoal<Object>(this, Illusioner.class, 12.0f, 0.5, 0.5));
-        this.goalSelector.addGoal(1, new AvoidEntityGoal<Object>(this, Zoglin.class, 10.0f, 0.5, 0.5));
+        this.goalSelector.addGoal(1, new AvoidEntityGoal<>(this, Zombie.class, 8.0f, 0.5, 0.5)); // MagmaCube - decompile fix
+        this.goalSelector.addGoal(1, new AvoidEntityGoal<>(this, Evoker.class, 12.0f, 0.5, 0.5)); // MagmaCube - decompile fix
+        this.goalSelector.addGoal(1, new AvoidEntityGoal<>(this, Vindicator.class, 8.0f, 0.5, 0.5)); // MagmaCube - decompile fix
+        this.goalSelector.addGoal(1, new AvoidEntityGoal<>(this, Vex.class, 8.0f, 0.5, 0.5)); // MagmaCube - decompile fix
+        this.goalSelector.addGoal(1, new AvoidEntityGoal<>(this, Pillager.class, 15.0f, 0.5, 0.5)); // MagmaCube - decompile fix
+        this.goalSelector.addGoal(1, new AvoidEntityGoal<>(this, Illusioner.class, 12.0f, 0.5, 0.5)); // MagmaCube - decompile fix
+        this.goalSelector.addGoal(1, new AvoidEntityGoal<>(this, Zoglin.class, 10.0f, 0.5, 0.5)); // MagmaCube - decompile fix
         this.goalSelector.addGoal(1, new PanicGoal(this, 0.5));
         this.goalSelector.addGoal(1, new LookAtTradingPlayerGoal(this));
         this.goalSelector.addGoal(2, new WanderToPositionGoal(this, 2.0, 0.35));
diff --git a/src/main/java/net/minecraft/world/entity/player/Inventory.java b/src/main/java/net/minecraft/world/entity/player/Inventory.java
index 5e5c029ef4dacd10952da206a15def7ba075164d..b08ff86fd1e385df3cd8dfbf2e851cf613f13cb9 100644
--- a/src/main/java/net/minecraft/world/entity/player/Inventory.java
+++ b/src/main/java/net/minecraft/world/entity/player/Inventory.java
@@ -45,7 +45,7 @@ public class Inventory implements Container, Nameable
         this.items = NonNullList.withSize(36, ItemStack.EMPTY);
         this.armor = NonNullList.withSize(4, ItemStack.EMPTY);
         this.offhand = NonNullList.withSize(1, ItemStack.EMPTY);
-        this.compartments = (List<NonNullList<ItemStack>>)ImmutableList.of((Object)this.items, (Object)this.armor, (Object)this.offhand);
+        this.compartments = (List<NonNullList<ItemStack>>)ImmutableList.of(this.items, this.armor, this.offhand); // MagmaCube - decompile fix
         this.carried = ItemStack.EMPTY;
         this.player = debug1;
     }
@@ -380,7 +380,7 @@ public class Inventory implements Container, Nameable
                 final CompoundTag debug3 = new CompoundTag();
                 debug3.putByte("Slot", (byte)debug2);
                 this.items.get(debug2).save(debug3);
-                ((AbstractList<CompoundTag>)debug1).add(debug3);
+                debug1.add(debug3); // MagmaCube - decompile fix
             }
         }
         for (int debug2 = 0; debug2 < this.armor.size(); ++debug2) {
@@ -388,7 +388,7 @@ public class Inventory implements Container, Nameable
                 final CompoundTag debug3 = new CompoundTag();
                 debug3.putByte("Slot", (byte)(debug2 + 100));
                 this.armor.get(debug2).save(debug3);
-                ((AbstractList<CompoundTag>)debug1).add(debug3);
+                debug1.add(debug3); // MagmaCube - decompile fix
             }
         }
         for (int debug2 = 0; debug2 < this.offhand.size(); ++debug2) {
@@ -396,7 +396,7 @@ public class Inventory implements Container, Nameable
                 final CompoundTag debug3 = new CompoundTag();
                 debug3.putByte("Slot", (byte)(debug2 + 150));
                 this.offhand.get(debug2).save(debug3);
-                ((AbstractList<CompoundTag>)debug1).add(debug3);
+                debug1.add(debug3); // MagmaCube - decompile fix
             }
         }
         return debug1;
@@ -484,7 +484,7 @@ public class Inventory implements Container, Nameable
             if (!debug1.isFire() || !debug4.getItem().isFireResistant()) {
                 if (debug4.getItem() instanceof ArmorItem) {
                     final int debug5 = debug3;
-                    debug4.hurtAndBreak((int)debug2, this.player, debug1 -> debug1.broadcastBreakEvent(EquipmentSlot.byTypeAndIndex(EquipmentSlot.Type.ARMOR, debug5)));
+                    debug4.hurtAndBreak((int)debug2, this.player, debug1l -> debug1l.broadcastBreakEvent(EquipmentSlot.byTypeAndIndex(EquipmentSlot.Type.ARMOR, debug5))); // MagmaCube - decompile fix
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 3e839158f4feeba440f8a43edfcded24898a38fe..6c68dd540baef1007ec732c56eb2500b859aba24 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -529,7 +529,7 @@ public abstract class Player extends LivingEntity
     private void playShoulderEntityAmbientSound(@Nullable final CompoundTag debug1) {
         if (debug1 != null && (!debug1.contains("Silent") || !debug1.getBoolean("Silent")) && this.level.random.nextInt(200) == 0) {
             final String debug2 = debug1.getString("id");
-            EntityType.byString(debug2).filter(debug0 -> debug0 == EntityType.PARROT).ifPresent(debug1 -> {
+            EntityType.byString(debug2).filter(debug0 -> debug0 == EntityType.PARROT).ifPresent(debug1l -> { // MagmaCube - decompile fix
                 if (!Parrot.imitateNearbyMobs(this.level, this)) {
                     this.level.playSound(null, this.getX(), this.getY(), this.getZ(), Parrot.getAmbient(this.level, this.level.random), this.getSoundSource(), 1.0f, Parrot.getPitch(this.level.random));
                 }
@@ -823,7 +823,7 @@ public abstract class Player extends LivingEntity
         if (debug1 >= 3.0f) {
             final int debug2 = 1 + Mth.floor(debug1);
             final InteractionHand debug3 = this.getUsedItemHand();
-            this.useItem.hurtAndBreak(debug2, this, debug1 -> debug1.broadcastBreakEvent(debug3));
+            this.useItem.hurtAndBreak(debug2, this, debug1l -> debug1l.broadcastBreakEvent(debug3)); // MagmaCube - decompile fix
             if (this.useItem.isEmpty()) {
                 if (debug3 == InteractionHand.MAIN_HAND) {
                     this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
@@ -1203,7 +1203,7 @@ public abstract class Player extends LivingEntity
     public Either<BedSleepingProblem, Unit> startSleepInBed(final BlockPos debug1) {
         this.startSleeping(debug1);
         this.sleepCounter = 0;
-        return (Either<BedSleepingProblem, Unit>)Either.right((Object)Unit.INSTANCE);
+        return Either.right(Unit.INSTANCE); // MagmaCube - decompile fix
     }
     
     public void stopSleepInBed(final boolean debug1, final boolean debug2) {
@@ -1225,7 +1225,7 @@ public abstract class Player extends LivingEntity
         if (debug6 instanceof RespawnAnchorBlock && debug5.getValue((Property<Integer>)RespawnAnchorBlock.CHARGE) > 0 && RespawnAnchorBlock.canSetSpawn(debug0)) {
             final Optional<Vec3> debug7 = RespawnAnchorBlock.findStandUpPosition(EntityType.PLAYER, debug0, debug1);
             if (!debug4 && debug7.isPresent()) {
-                debug0.setBlock(debug1, ((StateHolder<O, BlockState>)debug5).setValue((Property<Comparable>)RespawnAnchorBlock.CHARGE, debug5.getValue((Property<Integer>)RespawnAnchorBlock.CHARGE) - 1), 3);
+                debug0.setBlock(debug1, debug5.setValue(RespawnAnchorBlock.CHARGE, debug5.getValue((Property<Integer>)RespawnAnchorBlock.CHARGE) - 1), 3); // MagmaCube - decompile fix
             }
             return debug7;
         }
@@ -1657,7 +1657,7 @@ public abstract class Player extends LivingEntity
     
     @Override
     public Iterable<ItemStack> getHandSlots() {
-        return (Iterable<ItemStack>)Lists.newArrayList((Object[])new ItemStack[] { this.getMainHandItem(), this.getOffhandItem() });
+        return (Iterable<ItemStack>)Lists.newArrayList(new ItemStack[] { this.getMainHandItem(), this.getOffhandItem() }); // MagmaCube - decompile fix
     }
     
     @Override
@@ -1693,12 +1693,12 @@ public abstract class Player extends LivingEntity
     
     private void respawnEntityOnShoulder(final CompoundTag debug1) {
         if (!this.level.isClientSide && !debug1.isEmpty()) {
-            EntityType.create(debug1, this.level).ifPresent(debug1 -> {
-                if (debug1 instanceof TamableAnimal) {
-                    debug1.setOwnerUUID(this.uuid);
+            EntityType.create(debug1, this.level).ifPresent(debug1l -> { // MagmaCube - decompile fix
+                if (debug1l instanceof TamableAnimal) { // MagmaCube - decompile fix
+                    ((TamableAnimal) debug1l).setOwnerUUID(this.uuid); // MagmaCube - decompile fix
                 }
-                debug1.setPos(this.getX(), this.getY() + 0.699999988079071, this.getZ());
-                ((ServerLevel)this.level).addWithUUID(debug1);
+                debug1l.setPos(this.getX(), this.getY() + 0.699999988079071, this.getZ()); // MagmaCube - decompile fix
+                ((ServerLevel)this.level).addWithUUID(debug1l); // MagmaCube - decompile fix
             });
         }
     }
@@ -1729,11 +1729,9 @@ public abstract class Player extends LivingEntity
     }
     
     private MutableComponent decorateDisplayNameComponent(final MutableComponent debug1) {
-        final String debug3 = this.getGameProfile().getName();
-        final ClickEvent debug4;
-        final String s;
+        final String s = this.getGameProfile().getName(); // MagmaCube - decompile fix
         return debug1.withStyle(debug2 -> {
-            new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/tell " + s + " ");
+            ClickEvent debug4 = new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/tell " + s + " "); // MagmaCube - decompile fix
             return debug2.withClickEvent(debug4).withHoverEvent(this.createHoverEvent()).withInsertion(s);
         });
     }
@@ -1920,7 +1918,7 @@ public abstract class Player extends LivingEntity
     
     @Override
     public ImmutableList<Pose> getDismountPoses() {
-        return (ImmutableList<Pose>)ImmutableList.of((Object)Pose.STANDING, (Object)Pose.CROUCHING, (Object)Pose.SWIMMING);
+        return (ImmutableList<Pose>)ImmutableList.of(Pose.STANDING, Pose.CROUCHING, Pose.SWIMMING); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/player/StackedContents.java b/src/main/java/net/minecraft/world/entity/player/StackedContents.java
index d47e0527892f9f43cb63d9f87cdec694a7854ecd..3ed78c0357bcea3f3d43fbb68904c03b7274a19d 100644
--- a/src/main/java/net/minecraft/world/entity/player/StackedContents.java
+++ b/src/main/java/net/minecraft/world/entity/player/StackedContents.java
@@ -106,7 +106,7 @@ public class StackedContents
         private final IntList path;
         
         public RecipePicker(final Recipe<?> debug2) {
-            this.ingredients = (List<Ingredient>)Lists.newArrayList();
+            this.ingredients = Lists.newArrayList(); // MagmaCube - decompile fix
             this.path = (IntList)new IntArrayList();
             this.recipe = debug2;
             this.ingredients.addAll(debug2.getIngredients());
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
index b221171325363e7eef4fb663e390ace155ea43ba..a4ade492e65776149c2e6bf362a3918201cd6974 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -283,7 +283,7 @@ public abstract class AbstractArrow extends Projectile
                 this.piercingIgnoreEntityIds = new IntOpenHashSet(5);
             }
             if (this.piercedAndKilledEntities == null) {
-                this.piercedAndKilledEntities = (List<Entity>)Lists.newArrayListWithCapacity(5);
+                this.piercedAndKilledEntities = Lists.newArrayListWithCapacity(5); // MagmaCube - decompile fix
             }
             if (this.piercingIgnoreEntityIds.size() >= this.getPierceLevel() + 1) {
                 this.remove();
@@ -512,7 +512,7 @@ public abstract class AbstractArrow extends Projectile
             this.entityData.set(AbstractArrow.ID_FLAGS, (byte)(debug3 | debug1));
         }
         else {
-            this.entityData.set(AbstractArrow.ID_FLAGS, (byte)(debug3 & â¾debug1));
+            this.entityData.set(AbstractArrow.ID_FLAGS, (byte)(debug3 & debug1)); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
index f5f7fd0254e2e52c8734ab5ac8bbb381168d03cc..225350ba783d3a71d00247bae5d4f45c6203b9c9 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
@@ -36,19 +36,19 @@ public class Arrow extends AbstractArrow
     public Arrow(final EntityType<? extends Arrow> debug1, final Level debug2) {
         super(debug1, debug2);
         this.potion = Potions.EMPTY;
-        this.effects = (Set<MobEffectInstance>)Sets.newHashSet();
+        this.effects = Sets.newHashSet(); // MagmaCube - decompile fix
     }
     
     public Arrow(final Level debug1, final double debug2, final double debug4, final double debug6) {
         super(EntityType.ARROW, debug2, debug4, debug6, debug1);
         this.potion = Potions.EMPTY;
-        this.effects = (Set<MobEffectInstance>)Sets.newHashSet();
+        this.effects = Sets.newHashSet(); // MagmaCube - decompile fix
     }
     
     public Arrow(final Level debug1, final LivingEntity debug2) {
         super(EntityType.ARROW, debug2, debug1);
         this.potion = Potions.EMPTY;
-        this.effects = (Set<MobEffectInstance>)Sets.newHashSet();
+        this.effects = Sets.newHashSet(); // MagmaCube - decompile fix
     }
     
     public void setEffectsFromItem(final ItemStack debug1) {
@@ -159,7 +159,7 @@ public class Arrow extends AbstractArrow
         if (!this.effects.isEmpty()) {
             final ListTag debug2 = new ListTag();
             for (final MobEffectInstance debug3 : this.effects) {
-                ((AbstractList<CompoundTag>)debug2).add(debug3.save(new CompoundTag()));
+                debug2.add(debug3.save(new CompoundTag())); // MagmaCube - decompile fix
             }
             debug1.put("CustomPotionEffects", debug2);
         }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java b/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java
index 6ad375ff7b4d25871cbb2404cf63b56389d742c5..f9cb5f88bc91c871c2c5fb8a5b4a41a005f6df7a 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java
@@ -43,7 +43,7 @@ public class EyeOfEnder extends Entity implements ItemSupplier
     
     public void setItem(final ItemStack debug1) {
         if (debug1.getItem() != Items.ENDER_EYE || debug1.hasTag()) {
-            this.getEntityData().set(EyeOfEnder.DATA_ITEM_STACK, (ItemStack)Util.make((T)debug1.copy(), debug0 -> debug0.setCount(1)));
+            this.getEntityData().set(EyeOfEnder.DATA_ITEM_STACK, (ItemStack)Util.make(debug1.copy(), debug0 -> debug0.setCount(1))); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Fireball.java b/src/main/java/net/minecraft/world/entity/projectile/Fireball.java
index 2022677d2490214c9f32b8544f7aab582647a6f7..9c50470c9b3ac8410ad8cf15cfb53b047b91a020 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Fireball.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Fireball.java
@@ -32,7 +32,7 @@ public abstract class Fireball extends AbstractHurtingProjectile implements Item
     
     public void setItem(final ItemStack debug1) {
         if (debug1.getItem() != Items.FIRE_CHARGE || debug1.hasTag()) {
-            this.getEntityData().set(Fireball.DATA_ITEM_STACK, (ItemStack)Util.make((T)debug1.copy(), debug0 -> debug0.setCount(1)));
+            this.getEntityData().set(Fireball.DATA_ITEM_STACK, (ItemStack)Util.make(debug1.copy(), debug0 -> debug0.setCount(1))); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
index 0453ed5e2a6f6e07483aff373f4f37689c6b0148..6e8f71872684ccc9cd15cb940852fa0203aafec8 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
@@ -103,9 +103,8 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier
         super.tick();
         if (this.isAttachedToEntity()) {
             if (this.attachedToEntity == null) {
-                final Entity debug2;
                 this.entityData.get(FireworkRocketEntity.DATA_ATTACHED_TO_TARGET).ifPresent(debug1 -> {
-                    debug2 = this.level.getEntity(debug1);
+                    Entity debug2 = this.level.getEntity(debug1);
                     if (debug2 instanceof LivingEntity) {
                         this.attachedToEntity = (LivingEntity)debug2;
                     }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ShulkerBullet.java b/src/main/java/net/minecraft/world/entity/projectile/ShulkerBullet.java
index 4d3aa9b08cf0ab4424ee93dcb64e21bad7ee7da3..bac853c25580717228ce60f3ef81a207af16a664 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ShulkerBullet.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ShulkerBullet.java
@@ -125,7 +125,7 @@ public class ShulkerBullet extends Projectile
         Direction debug7 = null;
         if (!debug3.closerThan(this.position(), 2.0)) {
             final BlockPos debug8 = this.blockPosition();
-            final List<Direction> debug9 = (List<Direction>)Lists.newArrayList();
+            final List<Direction> debug9 = Lists.newArrayList(); // MagmaCube - decompile fix
             if (debug1 != Direction.Axis.X) {
                 if (debug8.getX() < debug3.getX() && this.level.isEmptyBlock(debug8.east())) {
                     debug9.add(Direction.EAST);
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrowableItemProjectile.java b/src/main/java/net/minecraft/world/entity/projectile/ThrowableItemProjectile.java
index 35473d8366e74d27bdc827742e853dab393a13b7..a861b397052087addf20e4e0577fcf1b04d23b56 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrowableItemProjectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrowableItemProjectile.java
@@ -32,7 +32,7 @@ public abstract class ThrowableItemProjectile extends ThrowableProjectile implem
     
     public void setItem(final ItemStack debug1) {
         if (debug1.getItem() != this.getDefaultItem() || debug1.hasTag()) {
-            this.getEntityData().set(ThrowableItemProjectile.DATA_ITEM_STACK, (ItemStack)Util.make((T)debug1.copy(), debug0 -> debug0.setCount(1)));
+            this.getEntityData().set(ThrowableItemProjectile.DATA_ITEM_STACK, (ItemStack)Util.make(debug1.copy(), debug0 -> debug0.setCount(1))); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java
index c73cb9dc55424924b56627a1ba7c29a78b427e0f..18925baa8edef6b5684a785455cdbdd9d7cb3a85 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java
@@ -188,7 +188,7 @@ public class ThrownPotion extends ThrowableItemProjectile implements ItemSupplie
         else if (CampfireBlock.isLitCampfire(debug3)) {
             this.level.levelEvent(null, 1009, debug1, 0);
             CampfireBlock.dowse(this.level, debug1, debug3);
-            this.level.setBlockAndUpdate(debug1, ((StateHolder<O, BlockState>)debug3).setValue((Property<Comparable>)CampfireBlock.LIT, false));
+            this.level.setBlockAndUpdate(debug1, debug3.setValue(CampfireBlock.LIT, false)); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raid.java b/src/main/java/net/minecraft/world/entity/raid/Raid.java
index feb5112d7faddd9bd7734f99c5d19a312ceda8c6..6d759be12ddec0f2e2a3752e2d193785baf540db 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raid.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raid.java
@@ -98,9 +98,9 @@ public class Raid
     private Optional<BlockPos> waveSpawnPos;
     
     public Raid(final int debug1, final ServerLevel debug2, final BlockPos debug3) {
-        this.groupToLeaderMap = (Map<Integer, Raider>)Maps.newHashMap();
-        this.groupRaiderMap = (Map<Integer, Set<Raider>>)Maps.newHashMap();
-        this.heroesOfTheVillage = (Set<UUID>)Sets.newHashSet();
+        this.groupToLeaderMap = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.groupRaiderMap = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.heroesOfTheVillage = Sets.newHashSet(); // MagmaCube - decompile fix
         this.raidEvent = new ServerBossEvent(Raid.RAID_NAME_COMPONENT, BossEvent.BossBarColor.RED, BossEvent.BossBarOverlay.NOTCHED_10);
         this.random = new Random();
         this.waveSpawnPos = Optional.empty();
@@ -115,9 +115,9 @@ public class Raid
     }
     
     public Raid(final ServerLevel debug1, final CompoundTag debug2) {
-        this.groupToLeaderMap = (Map<Integer, Raider>)Maps.newHashMap();
-        this.groupRaiderMap = (Map<Integer, Set<Raider>>)Maps.newHashMap();
-        this.heroesOfTheVillage = (Set<UUID>)Sets.newHashSet();
+        this.groupToLeaderMap = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.groupRaiderMap = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.heroesOfTheVillage = Sets.newHashSet(); // MagmaCube - decompile fix
         this.raidEvent = new ServerBossEvent(Raid.RAID_NAME_COMPONENT, BossEvent.BossBarColor.RED, BossEvent.BossBarOverlay.NOTCHED_10);
         this.random = new Random();
         this.waveSpawnPos = Optional.empty();
@@ -133,7 +133,7 @@ public class Raid
         this.totalHealth = debug2.getFloat("TotalHealth");
         this.center = new BlockPos(debug2.getInt("CX"), debug2.getInt("CY"), debug2.getInt("CZ"));
         this.numGroups = debug2.getInt("NumGroups");
-        this.status = getByName(debug2.getString("Status"));
+        this.status = RaidStatus.getByName(debug2.getString("Status")); // MagmaCube - decompile fix
         this.heroesOfTheVillage.clear();
         if (debug2.contains("HeroesOfTheVillage", 9)) {
             final ListTag debug3 = debug2.getList("HeroesOfTheVillage", 11);
@@ -180,9 +180,8 @@ public class Raid
     }
     
     private Predicate<ServerPlayer> validPlayer() {
-        final BlockPos debug2;
         return debug1 -> {
-            debug2 = debug1.blockPosition();
+            BlockPos debug2 = debug1.blockPosition(); // MagmaCube - decompile fix
             return debug1.isAlive() && this.level.getRaidAt(debug2) == this;
         };
     }
@@ -367,7 +366,7 @@ public class Raid
     
     private void moveRaidCenterToNearbyVillageSection() {
         final Stream<SectionPos> debug2 = SectionPos.cube(SectionPos.of(this.center), 2);
-        debug2.filter(this.level::isVillage).map((Function<? super SectionPos, ?>)SectionPos::center).min(Comparator.comparingDouble(debug1 -> debug1.distSqr(this.center))).ifPresent((Consumer<? super Object>)this::setCenter);
+        debug2.filter(this.level::isVillage).map(SectionPos::center).min(Comparator.comparingDouble(debug1 -> debug1.distSqr(this.center))).ifPresent(this::setCenter); // MagmaCube - decompile fix
     }
     
     private Optional<BlockPos> getValidSpawnPos(final int debug1) {
@@ -405,7 +404,7 @@ public class Raid
     
     private void updateRaiders() {
         final Iterator<Set<Raider>> debug1 = this.groupRaiderMap.values().iterator();
-        final Set<Raider> debug2 = (Set<Raider>)Sets.newHashSet();
+        final Set<Raider> debug2 = Sets.newHashSet(); // MagmaCube - decompile fix
         while (debug1.hasNext()) {
             final Set<Raider> debug3 = debug1.next();
             for (final Raider debug4 : debug3) {
@@ -703,7 +702,7 @@ public class Raid
         debug1.putInt("CZ", this.center.getZ());
         final ListTag debug2 = new ListTag();
         for (final UUID debug3 : this.heroesOfTheVillage) {
-            ((AbstractList<IntArrayTag>)debug2).add(NbtUtils.createUUID(debug3));
+            debug2.add(NbtUtils.createUUID(debug3)); // MagmaCube - decompile fix
         }
         debug1.put("HeroesOfTheVillage", debug2);
         return debug1;
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raider.java b/src/main/java/net/minecraft/world/entity/raid/Raider.java
index feed3afd487a63697fde94ae66300dff27e406c3..520ecf3e340b1533b203e95139b27575b6619460 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raider.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raider.java
@@ -64,8 +64,8 @@ public abstract class Raider extends PatrollingMonster
     @Override
     protected void registerGoals() {
         super.registerGoals();
-        this.goalSelector.addGoal(1, new ObtainRaidLeaderBannerGoal<Object>(this));
-        this.goalSelector.addGoal(3, new PathfindToRaidGoal<Object>(this));
+        this.goalSelector.addGoal(1, new ObtainRaidLeaderBannerGoal<>(this)); // MagmaCube - decompile fix
+        this.goalSelector.addGoal(3, new PathfindToRaidGoal<>(this)); // MagmaCube - decompile fix
         this.goalSelector.addGoal(4, new RaiderMoveThroughVillageGoal(this, 1.0499999523162842, 1));
         this.goalSelector.addGoal(5, new RaiderCelebration(this));
     }
@@ -355,7 +355,7 @@ public abstract class Raider extends PatrollingMonster
         @Override
         public void tick() {
             if (!this.mob.isSilent() && this.mob.random.nextInt(100) == 0) {
-                Raider.this.playSound(Raider.this.getCelebrateSound(), LivingEntity.this.getSoundVolume(), LivingEntity.this.getVoicePitch());
+                Raider.this.playSound(Raider.this.getCelebrateSound(), getSoundVolume(), getVoicePitch()); // MagmaCube - decompile fix
             }
             if (!this.mob.isPassenger() && this.mob.random.nextInt(50) == 0) {
                 this.mob.getJumpControl().jump();
@@ -436,7 +436,7 @@ public abstract class Raider extends PatrollingMonster
         private boolean stuck;
         
         public RaiderMoveThroughVillageGoal(final Raider debug1, final double debug2, final int debug4) {
-            this.visited = (List<BlockPos>)Lists.newArrayList();
+            this.visited = Lists.newArrayList(); // MagmaCube - decompile fix
             this.raider = debug1;
             this.speedModifier = debug2;
             this.distanceToPoi = debug4;
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raids.java b/src/main/java/net/minecraft/world/entity/raid/Raids.java
index 509e4194e194659253614446f69f2dc55eb197c9..c86c62be739f5c9c440d8d2196310da26cfb99ce 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raids.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raids.java
@@ -93,7 +93,7 @@ extends SavedData {
             return null;
         }
         BlockPos debug3 = debug1.blockPosition();
-        List debug5 = this.level.getPoiManager().getInRange(PoiType.ALL, debug3, 64, PoiManager.Occupancy.IS_OCCUPIED).collect(Collectors.toList());
+        List<PoiRecord> debug5 = this.level.getPoiManager().getInRange(PoiType.ALL, debug3, 64, PoiManager.Occupancy.IS_OCCUPIED).collect(Collectors.toList()); // MagmaCube - decompile fix
         int debug6 = 0;
         Vec3 debug7 = Vec3.ZERO;
         for (PoiRecord debug9 : debug5) {
@@ -118,11 +118,11 @@ extends SavedData {
             debug9 = true;
         } else {
             debug1.removeEffect(MobEffects.BAD_OMEN);
-            debug1.connection.send(new ClientboundEntityEventPacket(debug1, 43));
+            debug1.connection.send(new ClientboundEntityEventPacket(debug1, (byte) 43)); // MagmaCube - decompile fix
         }
         if (debug9) {
             debug8.absorbBadOmen(debug1);
-            debug1.connection.send(new ClientboundEntityEventPacket(debug1, 43));
+            debug1.connection.send(new ClientboundEntityEventPacket(debug1, (byte) 43)); // MagmaCube - decompile fix
             if (!debug8.hasFirstWaveSpawned()) {
                 debug1.awardStat(Stats.RAID_TRIGGER);
                 CriteriaTriggers.BAD_OMEN.trigger(debug1);
diff --git a/src/main/java/net/minecraft/world/entity/schedule/Timeline.java b/src/main/java/net/minecraft/world/entity/schedule/Timeline.java
index 6d4ddb82b347339ac3afbce58bdacefb2c7617a0..5f1a2a46a1d1a13ba236621689205ef2efd81595 100644
--- a/src/main/java/net/minecraft/world/entity/schedule/Timeline.java
+++ b/src/main/java/net/minecraft/world/entity/schedule/Timeline.java
@@ -12,7 +12,7 @@ public class Timeline
     private int previousIndex;
     
     public Timeline() {
-        this.keyframes = (List<Keyframe>)Lists.newArrayList();
+        this.keyframes = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     public Timeline addKeyframe(final int debug1, final float debug2) {
@@ -23,8 +23,7 @@ public class Timeline
     
     private void sortAndDeduplicateKeyframes() {
         final Int2ObjectSortedMap<Keyframe> debug2 = (Int2ObjectSortedMap<Keyframe>)new Int2ObjectAVLTreeMap();
-        final Keyframe keyframe;
-        this.keyframes.forEach(debug1 -> keyframe = (Keyframe)debug2.put(debug1.getTimeStamp(), (Object)debug1));
+        this.keyframes.forEach(debug1 -> debug2.put(debug1.getTimeStamp(), debug1)); // MagmaCube - decompile fix
         this.keyframes.clear();
         this.keyframes.addAll((Collection<? extends Keyframe>)debug2.values());
         this.previousIndex = 0;
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index 9980d43b407f1f73c2dd054b2b73dbac8d07364a..e33ffa17f6908e143edd471c69b3cef0034efe15 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -159,7 +159,7 @@ public abstract class AbstractMinecart extends Entity
         for (final Pose debug7 : debug6) {
             final EntityDimensions debug8 = debug1.getDimensions(debug7);
             final float debug9 = Math.min(debug8.width, 1.0f) / 2.0f;
-            for (final int debug10 : (ImmutableList)AbstractMinecart.POSE_DISMOUNT_HEIGHTS.get((Object)debug7)) {
+            for (final int debug10 : AbstractMinecart.POSE_DISMOUNT_HEIGHTS.get((Object)debug7)) { // MagmaCube - decompile fix
                 for (final int[] debug11 : debug3) {
                     debug5.set(debug4.getX() + debug11[0], debug4.getY() + debug10, debug4.getZ() + debug11[1]);
                     final double debug12 = this.level.getBlockFloorHeight(DismountHelper.nonClimbableShape(this.level, debug5), () -> DismountHelper.nonClimbableShape(this.level, debug5.below()));
@@ -179,7 +179,7 @@ public abstract class AbstractMinecart extends Entity
         for (final Pose debug16 : debug6) {
             final double debug17 = debug1.getDimensions(debug16).height;
             final int debug18 = Mth.ceil(debug15 - debug5.getY() + debug17);
-            final double debug19 = DismountHelper.findCeilingFrom((BlockPos)debug5, debug18, debug1 -> this.level.getBlockState(debug1).getCollisionShape(this.level, debug1));
+            final double debug19 = DismountHelper.findCeilingFrom((BlockPos)debug5, debug18, debug1l -> this.level.getBlockState(debug1l).getCollisionShape(this.level, debug1l)); // MagmaCube - decompile fix
             if (debug15 + debug17 <= debug19) {
                 debug1.setPose(debug16);
                 break;
@@ -810,35 +810,29 @@ public abstract class AbstractMinecart extends Entity
         DATA_ID_DISPLAY_BLOCK = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.INT);
         DATA_ID_DISPLAY_OFFSET = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.INT);
         DATA_ID_CUSTOM_DISPLAY = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.BOOLEAN);
-        POSE_DISMOUNT_HEIGHTS = ImmutableMap.of((Object)Pose.STANDING, (Object)ImmutableList.of((Object)0, (Object)1, (Object)(-1)), (Object)Pose.CROUCHING, (Object)ImmutableList.of((Object)0, (Object)1, (Object)(-1)), (Object)Pose.SWIMMING, (Object)ImmutableList.of((Object)0, (Object)1));
-        final Vec3i debug;
-        final Vec3i debug2;
-        final Vec3i debug3;
-        final Vec3i debug4;
-        final Vec3i debug5;
-        final Vec3i debug6;
-        final Vec3i debug7;
-        final Vec3i debug8;
-        EXITS = Util.make((Map<RailShape, Pair<Vec3i, Vec3i>>)Maps.newEnumMap((Class)RailShape.class), debug0 -> {
-            debug = Direction.WEST.getNormal();
-            debug2 = Direction.EAST.getNormal();
-            debug3 = Direction.NORTH.getNormal();
-            debug4 = Direction.SOUTH.getNormal();
-            debug5 = debug.below();
-            debug6 = debug2.below();
-            debug7 = debug3.below();
-            debug8 = debug4.below();
-            debug0.put(RailShape.NORTH_SOUTH, Pair.of((Object)debug3, (Object)debug4));
-            debug0.put(RailShape.EAST_WEST, Pair.of((Object)debug, (Object)debug2));
-            debug0.put(RailShape.ASCENDING_EAST, Pair.of((Object)debug5, (Object)debug2));
-            debug0.put(RailShape.ASCENDING_WEST, Pair.of((Object)debug, (Object)debug6));
-            debug0.put(RailShape.ASCENDING_NORTH, Pair.of((Object)debug3, (Object)debug8));
-            debug0.put(RailShape.ASCENDING_SOUTH, Pair.of((Object)debug7, (Object)debug4));
-            debug0.put(RailShape.SOUTH_EAST, Pair.of((Object)debug4, (Object)debug2));
-            debug0.put(RailShape.SOUTH_WEST, Pair.of((Object)debug4, (Object)debug));
-            debug0.put(RailShape.NORTH_WEST, Pair.of((Object)debug3, (Object)debug));
-            debug0.put(RailShape.NORTH_EAST, Pair.of((Object)debug3, (Object)debug2));
+        POSE_DISMOUNT_HEIGHTS = ImmutableMap.of(Pose.STANDING, ImmutableList.of(0, 1, -1), Pose.CROUCHING, ImmutableList.of(0, 1, -1), Pose.SWIMMING, ImmutableList.of(0, 1)); // MagmaCube - decompile fix
+        // MagmaCube start - decompiel fix
+        EXITS = Util.make(Maps.newEnumMap(RailShape.class), debug0 -> {
+            Vec3i debug = Direction.WEST.getNormal();
+            Vec3i debug2 = Direction.EAST.getNormal();
+            Vec3i debug3 = Direction.NORTH.getNormal();
+            Vec3i debug4 = Direction.SOUTH.getNormal();
+            Vec3i debug5 = debug.below();
+            Vec3i debug6 = debug2.below();
+            Vec3i debug7 = debug3.below();
+            Vec3i debug8 = debug4.below();
+            debug0.put(RailShape.NORTH_SOUTH, Pair.of(debug3, debug4));
+            debug0.put(RailShape.EAST_WEST, Pair.of(debug, debug2));
+            debug0.put(RailShape.ASCENDING_EAST, Pair.of(debug5, debug2));
+            debug0.put(RailShape.ASCENDING_WEST, Pair.of(debug, debug6));
+            debug0.put(RailShape.ASCENDING_NORTH, Pair.of(debug3, debug8));
+            debug0.put(RailShape.ASCENDING_SOUTH, Pair.of(debug7, debug4));
+            debug0.put(RailShape.SOUTH_EAST, Pair.of(debug4, debug2));
+            debug0.put(RailShape.SOUTH_WEST, Pair.of(debug4, debug));
+            debug0.put(RailShape.NORTH_WEST, Pair.of(debug3, debug));
+            debug0.put(RailShape.NORTH_EAST, Pair.of(debug3, debug2));
         });
+        // MagmaCube end - decompile fix
     }
     
     public enum Type
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
index 32409dfc75a8a8b50ba9eab87458cfd7a017adf9..f6bb753ab717e500ef1ec1b0fb2bf17906ab00ad 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
@@ -456,8 +456,6 @@ public class Boat extends Entity
                     }
                     ++debug11;
                     continue Label_0196_Outer;
-                    ++debug9;
-                    continue Label_0196_Outer;
                 }
                 if (debug10 < 1.0f) {
                     return debug8.getY() + debug10;
@@ -483,7 +481,7 @@ public class Boat extends Entity
         final BlockPos.MutableBlockPos debug12 = new BlockPos.MutableBlockPos();
         for (int debug13 = debug3; debug13 < debug4; ++debug13) {
             for (int debug14 = debug7; debug14 < debug8; ++debug14) {
-                final int debug15 = ((debug13 == debug3 || debug13 == debug4 - 1) + (debug14 == debug7 || debug14 == debug8 - 1)) ? 1 : 0;
+                int debug15 = ((debug13 == debug3 || debug13 == debug4 - 1) ? 1 : 0) + ((debug14 == debug7 || debug14 == debug8 - 1) ? 1 : 0); // MagmaCube - decompile fix
                 if (debug15 != 2) {
                     for (int debug16 = debug5; debug16 < debug6; ++debug16) {
                         if (debug15 > 0) {
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/MinecartChest.java b/src/main/java/net/minecraft/world/entity/vehicle/MinecartChest.java
index c83784437cfc97f13b6bf090885056e80a6f8292..ac6270f0b098dee28939df41f270874ffc3eb491 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/MinecartChest.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/MinecartChest.java
@@ -46,7 +46,7 @@ public class MinecartChest extends AbstractMinecartContainer
     
     @Override
     public BlockState getDefaultDisplayBlockState() {
-        return ((StateHolder<O, BlockState>)Blocks.CHEST.defaultBlockState()).setValue((Property<Comparable>)ChestBlock.FACING, Direction.NORTH);
+        return Blocks.CHEST.defaultBlockState().setValue(ChestBlock.FACING, Direction.NORTH); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/MinecartFurnace.java b/src/main/java/net/minecraft/world/entity/vehicle/MinecartFurnace.java
index b321e194dc9a18aaf08be44638942edff9c161f8..5327cb24cf52bf3786477f6a9dd4bf057a54fe4b 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/MinecartFurnace.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/MinecartFurnace.java
@@ -159,7 +159,7 @@ public class MinecartFurnace extends AbstractMinecart
     
     @Override
     public BlockState getDefaultDisplayBlockState() {
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.FURNACE.defaultBlockState()).setValue((Property<Comparable>)FurnaceBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)FurnaceBlock.LIT, this.hasFuel());
+        return Blocks.FURNACE.defaultBlockState().setValue(FurnaceBlock.FACING, Direction.NORTH).setValue(FurnaceBlock.LIT, this.hasFuel()); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/world/food/FoodProperties.java b/src/main/java/net/minecraft/world/food/FoodProperties.java
index c64d93a98f57e104c431f40614ffdad5f5cca8e2..940b80585b449f30f688c20d1e596ad9f18a86a0 100644
--- a/src/main/java/net/minecraft/world/food/FoodProperties.java
+++ b/src/main/java/net/minecraft/world/food/FoodProperties.java
@@ -57,7 +57,7 @@ public class FoodProperties
         private final List<Pair<MobEffectInstance, Float>> effects;
         
         public Builder() {
-            this.effects = (List<Pair<MobEffectInstance, Float>>)Lists.newArrayList();
+            this.effects = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         public Builder nutrition(final int debug1) {
@@ -86,12 +86,12 @@ public class FoodProperties
         }
         
         public Builder effect(final MobEffectInstance debug1, final float debug2) {
-            this.effects.add((Pair<MobEffectInstance, Float>)Pair.of((Object)debug1, (Object)debug2));
+            this.effects.add((Pair<MobEffectInstance, Float>)Pair.of(debug1, debug2)); // MagmaCube - decompile fix
             return this;
         }
         
         public FoodProperties build() {
-            return new FoodProperties(this.nutrition, this.saturationModifier, this.isMeat, this.canAlwaysEat, this.fastFood, this.effects, null);
+            return new FoodProperties(this.nutrition, this.saturationModifier, this.isMeat, this.canAlwaysEat, this.fastFood, this.effects); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index 55af82fc528c0542438f57d512d3a8fc33f1543f..62e5bda54a051ebf8eeffb1cc1ae97615e7ada7e 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -39,19 +39,19 @@ public abstract class AbstractContainerMenu
     
     protected AbstractContainerMenu(@Nullable final MenuType<?> debug1, final int debug2) {
         this.lastSlots = NonNullList.create();
-        this.slots = (List<Slot>)Lists.newArrayList();
-        this.dataSlots = (List<DataSlot>)Lists.newArrayList();
+        this.slots = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.dataSlots = Lists.newArrayList(); // MagmaCube - decompile fix
         this.quickcraftType = -1;
-        this.quickcraftSlots = (Set<Slot>)Sets.newHashSet();
-        this.containerListeners = (List<ContainerListener>)Lists.newArrayList();
-        this.unSynchedPlayers = (Set<Player>)Sets.newHashSet();
+        this.quickcraftSlots = Sets.newHashSet(); // MagmaCube - decompile fix
+        this.containerListeners = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.unSynchedPlayers = Sets.newHashSet(); // MagmaCube - decompile fix
         this.menuType = debug1;
         this.containerId = debug2;
     }
     
     protected static boolean stillValid(final ContainerLevelAccess debug0, final Player debug1, final Block debug2) {
-        return debug0.evaluate((debug2, debug3) -> {
-            if (!debug2.getBlockState(debug3).is(debug2)) {
+        return debug0.evaluate((debug2l, debug3) -> { // MagmaCube - decompile fix
+            if (!debug2l.getBlockState(debug3).is(debug2)) { // MagmaCube - decompile fix
                 return false;
             }
             else {
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
index 0e3104e01f5cc06f7945d774c046bcb8e31d0b6c..4c5579ece837f5eb59679f6e3bd101a1fc4de5dd 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
@@ -63,7 +63,7 @@ public abstract class AbstractFurnaceMenu extends RecipeBookMenu<Container>
     
     @Override
     public void handlePlacement(final boolean debug1, final Recipe<?> debug2, final ServerPlayer debug3) {
-        new ServerPlaceSmeltingRecipe<Object>(this).recipeClicked(debug3, debug2, debug1);
+        new ServerPlaceSmeltingRecipe(this).recipeClicked(debug3, debug2, debug1); // MagmaCube - decompile fix
     }
     
     @Override
@@ -147,7 +147,7 @@ public abstract class AbstractFurnaceMenu extends RecipeBookMenu<Container>
     }
     
     protected boolean canSmelt(final ItemStack debug1) {
-        return this.level.getRecipeManager().getRecipeFor((RecipeType<Recipe>)this.recipeType, new SimpleContainer(new ItemStack[] { debug1 }), this.level).isPresent();
+        return this.level.getRecipeManager().getRecipeFor(this.recipeType, new SimpleContainer(new ItemStack[] { debug1 }), this.level).isPresent(); // MagmaCube - decompile fix
     }
     
     protected boolean isFuel(final ItemStack debug1) {
diff --git a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
index 16664b2a89473bc9363677d7b172ed6a7559372b..73341400e58b7cec2ac2f5ec51e7c3e4fd7a5984 100644
--- a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
@@ -68,26 +68,26 @@ public class AnvilMenu extends ItemCombinerMenu
             this.inputSlots.setItem(1, ItemStack.EMPTY);
         }
         this.cost.set(0);
-        final BlockState debug4;
-        final BlockState debug5;
-        this.access.execute((debug1, debug2) -> {
-            debug4 = debug1.getBlockState(debug2);
-            if (!debug1.abilities.instabuild && debug4.is(BlockTags.ANVIL) && debug1.getRandom().nextFloat() < 0.12f) {
-                debug5 = AnvilBlock.damage(debug4);
+        // MagmaCube start - decompile fix
+        this.access.execute((debug1l, debug2l) -> {
+            BlockState debug4 = debug1l.getBlockState(debug2l);
+            if (!debug1.abilities.instabuild && debug4.is(BlockTags.ANVIL) && debug1l.getRandom().nextFloat() < 0.12f) {
+                BlockState debug5 = AnvilBlock.damage(debug4);
                 if (debug5 == null) {
-                    debug1.removeBlock(debug2, false);
-                    debug1.levelEvent(1029, debug2, 0);
+                    debug1l.removeBlock(debug2l, false);
+                    debug1l.levelEvent(1029, debug2l, 0);
                 }
                 else {
-                    debug1.setBlock(debug2, debug5, 2);
-                    debug1.levelEvent(1030, debug2, 0);
+                    debug1l.setBlock(debug2l, debug5, 2);
+                    debug1l.levelEvent(1030, debug2l, 0);
                 }
             }
             else {
-                debug1.levelEvent(1030, debug2, 0);
+                debug1l.levelEvent(1030, debug2l, 0);
             }
             return;
         });
+        // MagmaCube end - decompile fix
         return debug2;
     }
     
diff --git a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
index d2a1b1b8ddfdc6243ab20266c38aab5629f17e79..2a04427edcf673ed82e1e165aa7730a58c7f1b93 100644
--- a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
@@ -67,11 +67,10 @@ public class CartographyTableMenu extends AbstractContainerMenu
                 CartographyTableMenu.this.slots.get(0).remove(1);
                 CartographyTableMenu.this.slots.get(1).remove(1);
                 debug2.getItem().onCraftedBy(debug2, debug1.level, debug1);
-                final long debug3;
-                debug3.execute((debug1, debug2) -> {
-                    debug3 = debug1.getGameTime();
+                CartographyTableMenu.this.access.execute((debug1l, debug2l) -> { // MagmaCube - decompile fix
+                    long debug3 = debug1l.getGameTime(); // MagmaCube - decompile fix
                     if (CartographyTableMenu.this.lastSoundTime != debug3) {
-                        debug1.playSound(null, debug2, SoundEvents.UI_CARTOGRAPHY_TABLE_TAKE_RESULT, SoundSource.BLOCKS, 1.0f, 1.0f);
+                        debug1l.playSound(null, debug2l, SoundEvents.UI_CARTOGRAPHY_TABLE_TAKE_RESULT, SoundSource.BLOCKS, 1.0f, 1.0f); // MagmaCube - decompile fix
                         CartographyTableMenu.this.lastSoundTime = debug3;
                     }
                     return;
@@ -108,13 +107,11 @@ public class CartographyTableMenu extends AbstractContainerMenu
     }
     
     private void setupResultSlot(final ItemStack debug1, final ItemStack debug2, final ItemStack debug3) {
-        final Item debug5;
-        final MapItemSavedData debug6;
-        ItemStack debug7;
-        this.access.execute((debug4, debug5) -> {
-            debug5 = debug2.getItem();
-            debug6 = MapItem.getSavedData(debug1, debug4);
+        this.access.execute((debug4, debug5l) -> { // MagmaCube - decompile fix
+            Item debug5 = debug2.getItem(); // MagmaCube - decompile fix
+            MapItemSavedData debug6 = MapItem.getSavedData(debug1, debug4); // MagmaCube - decompile fix
             if (debug6 != null) {
+                ItemStack debug7; // MagmaCube - decompile fix
                 if (debug5 == Items.PAPER && !debug6.locked && debug6.scale < 4) {
                     debug7 = debug1.copy();
                     debug7.setCount(1);
diff --git a/src/main/java/net/minecraft/world/inventory/ContainerLevelAccess.java b/src/main/java/net/minecraft/world/inventory/ContainerLevelAccess.java
index 07f0190fe2b0239309d9e20e5bbb55d4bb6a3743..10b7de44f53103cb9c68f7f4b5ae683b544b4542 100644
--- a/src/main/java/net/minecraft/world/inventory/ContainerLevelAccess.java
+++ b/src/main/java/net/minecraft/world/inventory/ContainerLevelAccess.java
@@ -15,11 +15,11 @@ public interface ContainerLevelAccess
         }
     };
     
-    default ContainerLevelAccess create(final Level debug0, final BlockPos debug1) {
+    static ContainerLevelAccess create(final Level debug0, final BlockPos debug1) { // MagmaCube - decompile fix
         return new ContainerLevelAccess() {
             @Override
-            public <T> Optional<T> evaluate(final BiFunction<Level, BlockPos, T> debug1) {
-                return Optional.of(debug1.apply(debug0, debug1));
+            public <T> Optional<T> evaluate(final BiFunction<Level, BlockPos, T> debug1l) { // MagmaCube - decompile fix
+                return Optional.of(debug1l.apply(debug0, debug1)); // MagmaCube - decompile fix
             }
         };
     }
@@ -31,8 +31,8 @@ public interface ContainerLevelAccess
     }
     
     default void execute(final BiConsumer<Level, BlockPos> debug1) {
-        this.evaluate((debug1, debug2) -> {
-            debug1.accept(debug1, debug2);
+        this.evaluate((debug1l, debug2) -> { // MagmaCube - decompile fix
+            debug1.accept(debug1l, debug2); // MagmaCube - decompile fix
             return Optional.empty();
         });
     }
diff --git a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
index 2ac4818c20d8c372a02956aedffc32c3593258dd..bbe00648ffc2656feedb85d016a91b1e9c34afd3 100644
--- a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -183,7 +183,7 @@ extends AbstractContainerMenu {
                         }
                         debug8.enchant(debug12.enchantment, debug12.level);
                     }
-                    if (!debug3.abilities.instabuild) {
+                    if (!debug1.abilities.instabuild) { // MagmaCube - decompile fix
                         debug4.shrink(debug5);
                         if (debug4.isEmpty()) {
                             this.enchantSlots.setItem(1, ItemStack.EMPTY);
diff --git a/src/main/java/net/minecraft/world/inventory/InventoryMenu.java b/src/main/java/net/minecraft/world/inventory/InventoryMenu.java
index 04232d7f2bef2d4562f8e018eebd79b1a7019a8c..57b1e86daa879252ca27679e690b206eab717c19 100644
--- a/src/main/java/net/minecraft/world/inventory/InventoryMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/InventoryMenu.java
@@ -60,7 +60,7 @@ public class InventoryMenu extends RecipeBookMenu<CraftingContainer>
                 
                 @Override
                 public Pair<ResourceLocation, ResourceLocation> getNoItemIcon() {
-                    return (Pair<ResourceLocation, ResourceLocation>)Pair.of((Object)InventoryMenu.BLOCK_ATLAS, (Object)InventoryMenu.TEXTURE_EMPTY_SLOTS[debug6.getIndex()]);
+                    return (Pair<ResourceLocation, ResourceLocation>)Pair.of(InventoryMenu.BLOCK_ATLAS, InventoryMenu.TEXTURE_EMPTY_SLOTS[debug6.getIndex()]); // MagmaCube - decompile fix
                 }
             });
         }
@@ -75,7 +75,7 @@ public class InventoryMenu extends RecipeBookMenu<CraftingContainer>
         this.addSlot(new Slot(debug1, 40, 77, 62) {
             @Override
             public Pair<ResourceLocation, ResourceLocation> getNoItemIcon() {
-                return (Pair<ResourceLocation, ResourceLocation>)Pair.of((Object)InventoryMenu.BLOCK_ATLAS, (Object)InventoryMenu.EMPTY_ARMOR_SLOT_SHIELD);
+                return (Pair<ResourceLocation, ResourceLocation>)Pair.of(InventoryMenu.BLOCK_ATLAS, InventoryMenu.EMPTY_ARMOR_SLOT_SHIELD); // MagmaCube - decompile fix
             }
         });
     }
diff --git a/src/main/java/net/minecraft/world/inventory/LoomMenu.java b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
index 43900d395d51baa4824471442e6a925a59b1057d..1749a372216c165ab0c32df581d2c2fa70526e0b 100644
--- a/src/main/java/net/minecraft/world/inventory/LoomMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
@@ -88,11 +88,10 @@ public class LoomMenu extends AbstractContainerMenu
                 if (!LoomMenu.this.bannerSlot.hasItem() || !LoomMenu.this.dyeSlot.hasItem()) {
                     LoomMenu.this.selectedBannerPatternIndex.set(0);
                 }
-                final long debug3;
-                debug3.execute((debug1, debug2) -> {
-                    debug3 = debug1.getGameTime();
+                LoomMenu.this.access.execute((debug1l, debug2l) -> { // MagmaCube - decompile fix
+                    long debug3 = debug1l.getGameTime(); // MagmaCube - decompile fix
                     if (LoomMenu.this.lastSoundTime != debug3) {
-                        debug1.playSound(null, debug2, SoundEvents.UI_LOOM_TAKE_RESULT, SoundSource.BLOCKS, 1.0f, 1.0f);
+                        debug1l.playSound(null, debug2l, SoundEvents.UI_LOOM_TAKE_RESULT, SoundSource.BLOCKS, 1.0f, 1.0f); // MagmaCube - decompile fix
                         LoomMenu.this.lastSoundTime = debug3;
                     }
                     return;
@@ -241,7 +240,7 @@ public class LoomMenu extends AbstractContainerMenu
                 final CompoundTag debug8 = new CompoundTag();
                 debug8.putString("Pattern", debug4.getHashname());
                 debug8.putInt("Color", debug5.getId());
-                ((AbstractList<CompoundTag>)debug7).add(debug8);
+                debug7.add(debug8); // MagmaCube - decompile fix
             }
             if (!ItemStack.matches(debug3, this.resultSlot.getItem())) {
                 this.resultSlot.set(debug3);
diff --git a/src/main/java/net/minecraft/world/inventory/PlayerEnderChestContainer.java b/src/main/java/net/minecraft/world/inventory/PlayerEnderChestContainer.java
index ec966e623276f709f3dce43bacc3f43ee461d415..2b3cf93ead499f27a4900aab5c5e536c26f4a45a 100644
--- a/src/main/java/net/minecraft/world/inventory/PlayerEnderChestContainer.java
+++ b/src/main/java/net/minecraft/world/inventory/PlayerEnderChestContainer.java
@@ -43,7 +43,7 @@ public class PlayerEnderChestContainer extends SimpleContainer
                 final CompoundTag debug4 = new CompoundTag();
                 debug4.putByte("Slot", (byte)debug2);
                 debug3.save(debug4);
-                ((AbstractList<CompoundTag>)debug1).add(debug4);
+                debug1.add(debug4); // MagmaCube - decompile fix
             }
         }
         return debug1;
diff --git a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
index c3c47b58c2fc7d40f59daef6a1ff3f35fc105811..e1f3044dc82c636035cc25b32044d78f15e1e635 100644
--- a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
@@ -13,7 +13,7 @@ public abstract class RecipeBookMenu<C extends Container> extends AbstractContai
     }
     
     public void handlePlacement(final boolean debug1, final Recipe<?> debug2, final ServerPlayer debug3) {
-        new ServerPlaceRecipe<Object>(this).recipeClicked(debug3, debug2, debug1);
+        new ServerPlaceRecipe(this).recipeClicked(debug3, debug2, debug1); // MagmaCube - decompile fix
     }
     
     public abstract void fillCraftSlotsStackedContents(final StackedContents p0);
diff --git a/src/main/java/net/minecraft/world/inventory/SmithingMenu.java b/src/main/java/net/minecraft/world/inventory/SmithingMenu.java
index 8a2be4e958943c710760c1ae12af42daef900385..ee9a6e5301f8822b7f9f00649522ec826f7ffa7a 100644
--- a/src/main/java/net/minecraft/world/inventory/SmithingMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/SmithingMenu.java
@@ -46,7 +46,7 @@ public class SmithingMenu extends ItemCombinerMenu
         this.resultSlots.awardUsedRecipes(debug1);
         this.shrinkStackInSlot(0);
         this.shrinkStackInSlot(1);
-        this.access.execute((debug0, debug1) -> debug0.levelEvent(1044, debug1, 0));
+        this.access.execute((debug0, debug1l) -> debug0.levelEvent(1044, debug1l, 0)); // MagmaCube - decompile fix
         return debug2;
     }
     
@@ -72,7 +72,7 @@ public class SmithingMenu extends ItemCombinerMenu
     
     @Override
     protected boolean shouldQuickMoveToAdditionalSlot(final ItemStack debug1) {
-        return this.recipes.stream().anyMatch(debug1 -> debug1.isAdditionIngredient(debug1));
+        return this.recipes.stream().anyMatch(debug1l -> debug1l.isAdditionIngredient(debug1)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
index cdde861afb16c13f7dbe0fdd3357d9899b342d1b..87d2595300b64df4e3dec8588a82b4b6b94240fa 100644
--- a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
@@ -38,7 +38,7 @@ public class StonecutterMenu extends AbstractContainerMenu
     public StonecutterMenu(final int debug1, final Inventory debug2, final ContainerLevelAccess debug3) {
         super(MenuType.STONECUTTER, debug1);
         this.selectedRecipeIndex = DataSlot.standalone();
-        this.recipes = (List<StonecutterRecipe>)Lists.newArrayList();
+        this.recipes = Lists.newArrayList(); // MagmaCube - decompile fix
         this.input = ItemStack.EMPTY;
         this.slotUpdateListener = (() -> {});
         this.container = new SimpleContainer(1) {
@@ -67,11 +67,10 @@ public class StonecutterMenu extends AbstractContainerMenu
                 if (!debug3.isEmpty()) {
                     StonecutterMenu.this.setupResultSlot();
                 }
-                final long debug4;
-                debug3.execute((debug1, debug2) -> {
-                    debug4 = debug1.getGameTime();
+                StonecutterMenu.this.access.execute((debug1l, debug2l) -> { // MagmaCube - decompile fix
+                    long debug4 = debug1l.getGameTime(); // MagmaCube - decompile fix
                     if (StonecutterMenu.this.lastSoundTime != debug4) {
-                        debug1.playSound(null, debug2, SoundEvents.UI_STONECUTTER_TAKE_RESULT, SoundSource.BLOCKS, 1.0f, 1.0f);
+                        debug1l.playSound(null, debug2l, SoundEvents.UI_STONECUTTER_TAKE_RESULT, SoundSource.BLOCKS, 1.0f, 1.0f); // MagmaCube - decompile fix
                         StonecutterMenu.this.lastSoundTime = debug4;
                     }
                     return;
diff --git a/src/main/java/net/minecraft/world/item/ArmorItem.java b/src/main/java/net/minecraft/world/item/ArmorItem.java
index e0160cd266dd96eea468a87e1a3c33cd7be72f1a..51807dab5938e7349d6a10cda21f8c80097f6ac5 100644
--- a/src/main/java/net/minecraft/world/item/ArmorItem.java
+++ b/src/main/java/net/minecraft/world/item/ArmorItem.java
@@ -63,12 +63,12 @@ public class ArmorItem extends Item implements Wearable
         this.toughness = debug1.getToughness();
         this.knockbackResistance = debug1.getKnockbackResistance();
         DispenserBlock.registerBehavior(this, ArmorItem.DISPENSE_ITEM_BEHAVIOR);
-        final ImmutableMultimap.Builder<Attribute, AttributeModifier> debug4 = (ImmutableMultimap.Builder<Attribute, AttributeModifier>)ImmutableMultimap.builder();
+        final ImmutableMultimap.Builder<Attribute, AttributeModifier> debug4 = ImmutableMultimap.builder(); // MagmaCube - decompile fix // MagmaCube - decompile fix
         final UUID debug5 = ArmorItem.ARMOR_MODIFIER_UUID_PER_SLOT[debug2.getIndex()];
-        debug4.put((Object)Attributes.ARMOR, (Object)new AttributeModifier(debug5, "Armor modifier", this.defense, AttributeModifier.Operation.ADDITION));
-        debug4.put((Object)Attributes.ARMOR_TOUGHNESS, (Object)new AttributeModifier(debug5, "Armor toughness", this.toughness, AttributeModifier.Operation.ADDITION));
+        debug4.put(Attributes.ARMOR, new AttributeModifier(debug5, "Armor modifier", this.defense, AttributeModifier.Operation.ADDITION)); // MagmaCube - decompile fix
+        debug4.put(Attributes.ARMOR_TOUGHNESS, new AttributeModifier(debug5, "Armor toughness", this.toughness, AttributeModifier.Operation.ADDITION)); // MagmaCube - decompile fix
         if (debug1 == ArmorMaterials.NETHERITE) {
-            debug4.put((Object)Attributes.KNOCKBACK_RESISTANCE, (Object)new AttributeModifier(debug5, "Armor knockback resistance", this.knockbackResistance, AttributeModifier.Operation.ADDITION));
+            debug4.put(Attributes.KNOCKBACK_RESISTANCE, new AttributeModifier(debug5, "Armor knockback resistance", this.knockbackResistance, AttributeModifier.Operation.ADDITION)); // MagmaCube - decompile fix
         }
         this.defaultModifiers = (Multimap<Attribute, AttributeModifier>)debug4.build();
     }
diff --git a/src/main/java/net/minecraft/world/item/BoneMealItem.java b/src/main/java/net/minecraft/world/item/BoneMealItem.java
index 862aa83dbd15d146f9f40d4039b640dffd64ee9d..79c9736ec8fe262e93496e1c6ee4d7de1fc0d25d 100644
--- a/src/main/java/net/minecraft/world/item/BoneMealItem.java
+++ b/src/main/java/net/minecraft/world/item/BoneMealItem.java
@@ -95,14 +95,14 @@ public class BoneMealItem extends Item
                 final Optional<ResourceKey<Biome>> debug8 = debug1.getBiomeName(debug5);
                 if (Objects.equals(debug8, Optional.of(Biomes.WARM_OCEAN)) || Objects.equals(debug8, Optional.of(Biomes.DEEP_WARM_OCEAN))) {
                     if (debug4 == 0 && debug3 != null && debug3.getAxis().isHorizontal()) {
-                        debug6 = ((StateHolder<O, BlockState>)BlockTags.WALL_CORALS.getRandomElement(debug1.random).defaultBlockState()).setValue((Property<Comparable>)BaseCoralWallFanBlock.FACING, debug3);
+                        debug6 = (BlockTags.WALL_CORALS.getRandomElement(debug1.random).defaultBlockState()).setValue(BaseCoralWallFanBlock.FACING, debug3); // MagmaCube - decompile fix
                     }
                     else if (BoneMealItem.random.nextInt(4) == 0) {
                         debug6 = BlockTags.UNDERWATER_BONEMEALS.getRandomElement(BoneMealItem.random).defaultBlockState();
                     }
                 }
                 if (debug6.getBlock().is(BlockTags.WALL_CORALS)) {
-                    for (int debug9 = 0; !debug6.canSurvive(debug1, debug5) && debug9 < 4; debug6 = ((StateHolder<O, BlockState>)debug6).setValue((Property<Comparable>)BaseCoralWallFanBlock.FACING, Direction.Plane.HORIZONTAL.getRandomDirection(BoneMealItem.random)), ++debug9) {}
+                    for (int debug9 = 0; !debug6.canSurvive(debug1, debug5) && debug9 < 4; debug6 = (debug6).setValue(BaseCoralWallFanBlock.FACING, Direction.Plane.HORIZONTAL.getRandomDirection(BoneMealItem.random)), ++debug9) {} // MagmaCube - decompile fix
                 }
                 if (!debug6.canSurvive(debug1, debug5)) {
                     continue;
diff --git a/src/main/java/net/minecraft/world/item/CrossbowItem.java b/src/main/java/net/minecraft/world/item/CrossbowItem.java
index 27b83d662de08ac476fc7236e8ad372fe59ef596..e7db10b862f2c7e1e2cc4ea52cd6e19f079a440c 100644
--- a/src/main/java/net/minecraft/world/item/CrossbowItem.java
+++ b/src/main/java/net/minecraft/world/item/CrossbowItem.java
@@ -150,12 +150,12 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable
         }
         final CompoundTag debug4 = new CompoundTag();
         debug1.save(debug4);
-        ((AbstractList<CompoundTag>)debug3).add(debug4);
+        debug3.add(debug4); // MagmaCube - decompile fix
         debug2.put("ChargedProjectiles", debug3);
     }
     
     private static List<ItemStack> getChargedProjectiles(final ItemStack debug0) {
-        final List<ItemStack> debug = (List<ItemStack>)Lists.newArrayList();
+        final List<ItemStack> debug = Lists.newArrayList(); // MagmaCube - decompile fix
         final CompoundTag debug2 = debug0.getTag();
         if (debug2 != null && debug2.contains("ChargedProjectiles", 9)) {
             final ListTag debug3 = debug2.getList("ChargedProjectiles", 10);
@@ -179,7 +179,7 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable
     }
     
     public static boolean containsChargedProjectile(final ItemStack debug0, final Item debug1) {
-        return getChargedProjectiles(debug0).stream().anyMatch(debug1 -> debug1.getItem() == debug1);
+        return getChargedProjectiles(debug0).stream().anyMatch(debug1l -> debug1l.getItem() == debug1); // MagmaCube - decompile fix
     }
     
     private static void shootProjectile(final Level debug0, final LivingEntity debug1, final InteractionHand debug2, final ItemStack debug3, final ItemStack debug4, final float debug5, final boolean debug6, final float debug7, final float debug8, final float debug9) {
@@ -209,7 +209,7 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable
             debug16.transform(debug14);
             debug11.shoot(debug16.x(), debug16.y(), debug16.z(), debug7, debug8);
         }
-        debug3.hurtAndBreak(debug10 ? 3 : 1, debug1, debug1 -> debug1.broadcastBreakEvent(debug2));
+        debug3.hurtAndBreak(debug10 ? 3 : 1, debug1, debug1l -> debug1l.broadcastBreakEvent(debug2)); // MagmaCube - decompile fix
         debug0.addFreshEntity(debug11);
         debug0.playSound(null, debug1.getX(), debug1.getY(), debug1.getZ(), SoundEvents.CROSSBOW_SHOOT, SoundSource.PLAYERS, 1.0f, debug5);
     }
@@ -342,7 +342,7 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable
         final ItemStack debug6 = debug5.get(0);
         debug3.add(new TranslatableComponent("item.minecraft.crossbow.projectile").append(" ").append(debug6.getDisplayName()));
         if (debug4.isAdvanced() && debug6.getItem() == Items.FIREWORK_ROCKET) {
-            final List<Component> debug7 = (List<Component>)Lists.newArrayList();
+            final List<Component> debug7 = Lists.newArrayList(); // MagmaCube - decompile fix
             Items.FIREWORK_ROCKET.appendHoverText(debug6, debug2, debug7, debug4);
             if (!debug7.isEmpty()) {
                 for (int debug8 = 0; debug8 < debug7.size(); ++debug8) {
diff --git a/src/main/java/net/minecraft/world/item/DiggerItem.java b/src/main/java/net/minecraft/world/item/DiggerItem.java
index 87f9c619cc539934f92fb30e6700197c8255facd..e1e297bbe0409921e67d56847a58acb70f19c1fa 100644
--- a/src/main/java/net/minecraft/world/item/DiggerItem.java
+++ b/src/main/java/net/minecraft/world/item/DiggerItem.java
@@ -26,9 +26,9 @@ public class DiggerItem extends TieredItem implements Vanishable
         this.blocks = debug4;
         this.speed = debug3.getSpeed();
         this.attackDamageBaseline = debug1 + debug3.getAttackDamageBonus();
-        final ImmutableMultimap.Builder<Attribute, AttributeModifier> debug6 = (ImmutableMultimap.Builder<Attribute, AttributeModifier>)ImmutableMultimap.builder();
-        debug6.put((Object)Attributes.ATTACK_DAMAGE, (Object)new AttributeModifier(DiggerItem.BASE_ATTACK_DAMAGE_UUID, "Tool modifier", this.attackDamageBaseline, AttributeModifier.Operation.ADDITION));
-        debug6.put((Object)Attributes.ATTACK_SPEED, (Object)new AttributeModifier(DiggerItem.BASE_ATTACK_SPEED_UUID, "Tool modifier", debug2, AttributeModifier.Operation.ADDITION));
+        final ImmutableMultimap.Builder<Attribute, AttributeModifier> debug6 = ImmutableMultimap.builder(); // MagmaCube - decompile fix
+        debug6.put(Attributes.ATTACK_DAMAGE, new AttributeModifier(DiggerItem.BASE_ATTACK_DAMAGE_UUID, "Tool modifier", this.attackDamageBaseline, AttributeModifier.Operation.ADDITION)); // MagmaCube - decompile fix
+        debug6.put(Attributes.ATTACK_SPEED, new AttributeModifier(DiggerItem.BASE_ATTACK_SPEED_UUID, "Tool modifier", debug2, AttributeModifier.Operation.ADDITION)); // MagmaCube - decompile fix
         this.defaultModifiers = (Multimap<Attribute, AttributeModifier>)debug6.build();
     }
     
diff --git a/src/main/java/net/minecraft/world/item/DyeableLeatherItem.java b/src/main/java/net/minecraft/world/item/DyeableLeatherItem.java
index 2578b0961496d2c3952a75d4999ab9d8744c2922..7dda509f380622439d9887c3b399e3f3cddc342a 100644
--- a/src/main/java/net/minecraft/world/item/DyeableLeatherItem.java
+++ b/src/main/java/net/minecraft/world/item/DyeableLeatherItem.java
@@ -30,7 +30,7 @@ public interface DyeableLeatherItem
         debug1.getOrCreateTagElement("display").putInt("color", debug2);
     }
     
-    default ItemStack dyeArmor(final ItemStack debug0, final List<DyeItem> debug1) {
+    static ItemStack dyeArmor(final ItemStack debug0, final List<DyeItem> debug1) { // MagmaCube - decompile fix
         ItemStack debug2 = ItemStack.EMPTY;
         final int[] debug3 = new int[3];
         int debug4 = 0;
diff --git a/src/main/java/net/minecraft/world/item/FireChargeItem.java b/src/main/java/net/minecraft/world/item/FireChargeItem.java
index ded433706016fa03f44059a73162900791d0d1f1..4cb1b88ed9df90cab96bcc657b77f1260cd52cff 100644
--- a/src/main/java/net/minecraft/world/item/FireChargeItem.java
+++ b/src/main/java/net/minecraft/world/item/FireChargeItem.java
@@ -28,7 +28,7 @@ public class FireChargeItem extends Item
         boolean debug5 = false;
         if (CampfireBlock.canLight(debug4)) {
             this.playSound(debug2, debug3);
-            debug2.setBlockAndUpdate(debug3, ((StateHolder<O, BlockState>)debug4).setValue((Property<Comparable>)CampfireBlock.LIT, true));
+            debug2.setBlockAndUpdate(debug3, (debug4).setValue(CampfireBlock.LIT, true)); // MagmaCube - decompile fix
             debug5 = true;
         }
         else {
diff --git a/src/main/java/net/minecraft/world/item/FireworkRocketItem.java b/src/main/java/net/minecraft/world/item/FireworkRocketItem.java
index 753905fed2bd4a61ac0204ef43f9c5b2efc16a80..2d145ee1c15b4f9b85afcbdc9e0ab7eb9e6ef131 100644
--- a/src/main/java/net/minecraft/world/item/FireworkRocketItem.java
+++ b/src/main/java/net/minecraft/world/item/FireworkRocketItem.java
@@ -72,7 +72,7 @@ public class FireworkRocketItem extends Item
         if (!debug6.isEmpty()) {
             for (int debug7 = 0; debug7 < debug6.size(); ++debug7) {
                 final CompoundTag debug8 = debug6.getCompound(debug7);
-                final List<Component> debug9 = (List<Component>)Lists.newArrayList();
+                final List<Component> debug9 = Lists.newArrayList(); // MagmaCube - decompile fix
                 FireworkStarItem.appendHoverText(debug8, debug9);
                 if (!debug9.isEmpty()) {
                     for (int debug10 = 1; debug10 < debug9.size(); ++debug10) {
diff --git a/src/main/java/net/minecraft/world/item/FoodOnAStickItem.java b/src/main/java/net/minecraft/world/item/FoodOnAStickItem.java
index 376e5328cd0a97f4e5afcb8e62ccbc34ad7b9d50..e9badc592563dd046b6a3005eb3896426dfdd169 100644
--- a/src/main/java/net/minecraft/world/item/FoodOnAStickItem.java
+++ b/src/main/java/net/minecraft/world/item/FoodOnAStickItem.java
@@ -2,6 +2,7 @@ package net.minecraft.world.item;
 
 import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.entity.ItemSteerable;
 import net.minecraft.world.InteractionResultHolder;
@@ -31,7 +32,7 @@ public class FoodOnAStickItem<T extends Entity> extends Item
         if (debug2.isPassenger() && debug5 instanceof ItemSteerable && debug5.getType() == this.canInteractWith) {
             final ItemSteerable debug6 = (ItemSteerable)debug5;
             if (debug6.boost()) {
-                debug4.hurtAndBreak(this.consumeItemDamage, debug2, debug1 -> debug1.broadcastBreakEvent(debug3));
+                debug4.hurtAndBreak(this.consumeItemDamage, debug2, debug1l -> debug1l.broadcastBreakEvent(debug3)); // MagmaCube - decompile fix
                 if (debug4.isEmpty()) {
                     final ItemStack debug7 = new ItemStack(Items.FISHING_ROD);
                     debug7.setTag(debug4.getTag());
diff --git a/src/main/java/net/minecraft/world/item/HoeItem.java b/src/main/java/net/minecraft/world/item/HoeItem.java
index b6c7acae7ffa587fc8278af432b795df179727d3..2b9741ee50e7577cee61cadfbe72063f2196fa48 100644
--- a/src/main/java/net/minecraft/world/item/HoeItem.java
+++ b/src/main/java/net/minecraft/world/item/HoeItem.java
@@ -38,7 +38,7 @@ public class HoeItem extends DiggerItem
                 if (!debug2.isClientSide) {
                     debug2.setBlock(debug3, debug4, 11);
                     if (debug5 != null) {
-                        debug1.getItemInHand().hurtAndBreak(1, debug5, debug1 -> debug1.broadcastBreakEvent(debug1.getHand()));
+                        debug1.getItemInHand().hurtAndBreak(1, debug5, debug1l -> debug1l.broadcastBreakEvent(debug1.getHand())); // MagmaCube - decompile fix
                     }
                 }
                 return InteractionResult.sidedSuccess(debug2.isClientSide);
diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index a19cab8c3031ffa1a65285c08739ff4446e2d4e7..efc18770cd168dfae87aa26e21e7f68f6786f36d 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -285,7 +285,7 @@ public class Item implements ItemLike
     }
     
     public Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(final EquipmentSlot debug1) {
-        return (Multimap<Attribute, AttributeModifier>)ImmutableMultimap.of();
+        return ImmutableMultimap.of(); // MagmaCube - decompile fix
     }
     
     public boolean useOnRelease(final ItemStack debug1) {
diff --git a/src/main/java/net/minecraft/world/item/ItemCooldowns.java b/src/main/java/net/minecraft/world/item/ItemCooldowns.java
index 5b5b08fbc07eb2d1e20b111ab2326ad2c74d0c00..e4b25b85480a9b598479be846f48c99fb96ace41 100644
--- a/src/main/java/net/minecraft/world/item/ItemCooldowns.java
+++ b/src/main/java/net/minecraft/world/item/ItemCooldowns.java
@@ -11,7 +11,7 @@ public class ItemCooldowns
     private int tickCount;
     
     public ItemCooldowns() {
-        this.cooldowns = (Map<Item, CooldownInstance>)Maps.newHashMap();
+        this.cooldowns = Maps.newHashMap(); // MagmaCube - decompile fix
     }
     
     public boolean isOnCooldown(final Item debug1) {
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 063131addba9b3ac5d42baeb40650b7ca0512099..8167ffc561abbc5b69a2c51d9aae1f510816b260 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -97,7 +97,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public final class ItemStack {
-    public static final Codec<ItemStack> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)Registry.ITEM.fieldOf("id").forGetter(debug0 -> debug0.item), (App)Codec.INT.fieldOf("Count").forGetter(debug0 -> debug0.count), (App)CompoundTag.CODEC.optionalFieldOf("tag").forGetter(debug0 -> Optional.ofNullable(debug0.tag))).apply((Applicative)debug02, ItemStack::new));
+    public static final Codec<ItemStack> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Registry.ITEM.fieldOf("id").forGetter(debug0 -> debug0.item), Codec.INT.fieldOf("Count").forGetter(debug0 -> debug0.count), CompoundTag.CODEC.optionalFieldOf("tag").forGetter(debug0 -> Optional.ofNullable(debug0.tag))).apply((Applicative)debug02, ItemStack::new)); // MagmaCube - decompile fix
     private static final Logger LOGGER = LogManager.getLogger();
     public static final ItemStack EMPTY = new ItemStack((ItemLike)null);
     public static final DecimalFormat ATTRIBUTE_MODIFIER_FORMAT = Util.make(new DecimalFormat("#.##"), debug0 -> debug0.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT)));
@@ -534,9 +534,6 @@ public final class ItemStack {
     }
 
     public List<Component> getTooltipLines(@Nullable Player debug1, TooltipFlag debug2) {
-        Object debug10;
-        Object debug9;
-        Object debug6;
         int debug5;
         ArrayList debug3 = Lists.newArrayList();
         MutableComponent debug4 = new TextComponent("").append(this.getHoverName()).withStyle(this.getRarity().color);
@@ -555,7 +552,7 @@ public final class ItemStack {
                 ItemStack.appendEnchantmentNames(debug3, this.getEnchantmentTags());
             }
             if (this.tag.contains("display", 10)) {
-                debug6 = this.tag.getCompound("display");
+                CompoundTag debug6 = this.tag.getCompound("display"); // MagmaCube - decompile fix
                 if (ItemStack.shouldShowInTooltip(debug5, TooltipPart.DYE) && ((CompoundTag)debug6).contains("color", 99)) {
                     if (debug2.isAdvanced()) {
                         debug3.add(new TranslatableComponent("item.color", String.format("#%06X", ((CompoundTag)debug6).getInt("color"))).withStyle(ChatFormatting.GRAY));
@@ -566,9 +563,9 @@ public final class ItemStack {
                 if (((CompoundTag)debug6).getTagType("Lore") == 9) {
                     ListTag debug7 = ((CompoundTag)debug6).getList("Lore", 8);
                     for (int debug8 = 0; debug8 < debug7.size(); ++debug8) {
-                        debug9 = debug7.getString(debug8);
+                        String debug9 = debug7.getString(debug8); // MagmaCube - decompile fix
                         try {
-                            debug10 = Component.Serializer.fromJson((String)debug9);
+                            MutableComponent debug10 = Component.Serializer.fromJson((String)debug9); // MagmaCube - decompile fix
                             if (debug10 == null) continue;
                             debug3.add(ComponentUtils.mergeStyles(debug10, LORE_STYLE));
                             continue;
@@ -581,11 +578,11 @@ public final class ItemStack {
             }
         }
         if (ItemStack.shouldShowInTooltip(debug5, TooltipPart.MODIFIERS)) {
-            debug6 = EquipmentSlot.values();
+            EquipmentSlot[] debug6 = EquipmentSlot.values(); // MagmaCube - decompile fix
             int debug7 = ((EquipmentSlot[])debug6).length;
             for (int i = 0; i < debug7; ++i) {
-                debug9 = debug6[i];
-                debug10 = this.getAttributeModifiers((EquipmentSlot)((Object)debug9));
+                EquipmentSlot debug9 = debug6[i]; // MagmaCube - decompile fix
+                Multimap<Attribute, AttributeModifier> debug10 = this.getAttributeModifiers((EquipmentSlot)((Object)debug9)); // MagmaCube - decompile fix
                 if (debug10.isEmpty()) continue;
                 debug3.add(TextComponent.EMPTY);
                 debug3.add(new TranslatableComponent("item.modifiers." + debug9.getName()).withStyle(ChatFormatting.GRAY));
@@ -621,6 +618,7 @@ public final class ItemStack {
             if (ItemStack.shouldShowInTooltip(debug5, TooltipPart.UNBREAKABLE) && this.tag.getBoolean("Unbreakable")) {
                 debug3.add(new TranslatableComponent("item.unbreakable").withStyle(ChatFormatting.BLUE));
             }
+            ListTag debug6; // MagmaCube - decompile fix
             if (ItemStack.shouldShowInTooltip(debug5, TooltipPart.CAN_DESTROY) && this.tag.contains("CanDestroy", 9) && !((ListTag)(debug6 = this.tag.getList("CanDestroy", 8))).isEmpty()) {
                 debug3.add(TextComponent.EMPTY);
                 debug3.add(new TranslatableComponent("item.canBreak").withStyle(ChatFormatting.GRAY));
@@ -682,7 +680,7 @@ public final class ItemStack {
             if (debug4 || debug5) {
                 List<Block> debug7;
                 if (debug4) {
-                    return Lists.newArrayList((Object[])new Component[]{debug2.getBlock().getName().withStyle(ChatFormatting.DARK_GRAY)});
+                    return Lists.newArrayList(new Component[]{debug2.getBlock().getName().withStyle(ChatFormatting.DARK_GRAY)}); // MagmaCube - decompile fix
                 }
                 Tag<Block> debug6 = BlockTags.getAllTags().getTag(debug3);
                 if (debug6 != null && !(debug7 = debug6.getValues()).isEmpty()) {
@@ -693,7 +691,7 @@ public final class ItemStack {
         catch (CommandSyntaxException commandSyntaxException) {
             // empty catch block
         }
-        return Lists.newArrayList((Object[])new Component[]{new TextComponent("missingno").withStyle(ChatFormatting.DARK_GRAY)});
+        return Lists.newArrayList(new Component[]{new TextComponent("missingno").withStyle(ChatFormatting.DARK_GRAY)}); // MagmaCube - decompile fix
     }
 
     public boolean hasFoil() {
@@ -764,7 +762,7 @@ public final class ItemStack {
     }
 
     public Multimap<Attribute, AttributeModifier> getAttributeModifiers(EquipmentSlot debug1) {
-        HashMultimap debug2;
+        Multimap debug2; // MagmaCube - decompile fix
         if (this.hasTag() && this.tag.contains("AttributeModifiers", 9)) {
             debug2 = HashMultimap.create();
             ListTag debug3 = this.tag.getList("AttributeModifiers", 10);
diff --git a/src/main/java/net/minecraft/world/item/Items.java b/src/main/java/net/minecraft/world/item/Items.java
index 5bed9f07f43cb13732d2609bde556c0f5af26b36..96e4c748d982a01f9131ff97bd3248d52bba891d 100644
--- a/src/main/java/net/minecraft/world/item/Items.java
+++ b/src/main/java/net/minecraft/world/item/Items.java
@@ -1864,8 +1864,8 @@ public class Items
         ZOMBIE_HEAD = registerBlock(new StandingAndWallBlockItem(Blocks.ZOMBIE_HEAD, Blocks.ZOMBIE_WALL_HEAD, new Item.Properties().tab(CreativeModeTab.TAB_DECORATIONS).rarity(Rarity.UNCOMMON)));
         CREEPER_HEAD = registerBlock(new StandingAndWallBlockItem(Blocks.CREEPER_HEAD, Blocks.CREEPER_WALL_HEAD, new Item.Properties().tab(CreativeModeTab.TAB_DECORATIONS).rarity(Rarity.UNCOMMON)));
         DRAGON_HEAD = registerBlock(new StandingAndWallBlockItem(Blocks.DRAGON_HEAD, Blocks.DRAGON_WALL_HEAD, new Item.Properties().tab(CreativeModeTab.TAB_DECORATIONS).rarity(Rarity.UNCOMMON)));
-        CARROT_ON_A_STICK = registerItem("carrot_on_a_stick", new FoodOnAStickItem<Object>(new Item.Properties().durability(25).tab(CreativeModeTab.TAB_TRANSPORTATION), EntityType.PIG, 7));
-        WARPED_FUNGUS_ON_A_STICK = registerItem("warped_fungus_on_a_stick", new FoodOnAStickItem<Object>(new Item.Properties().durability(100).tab(CreativeModeTab.TAB_TRANSPORTATION), EntityType.STRIDER, 1));
+        CARROT_ON_A_STICK = registerItem("carrot_on_a_stick", new FoodOnAStickItem<>(new Item.Properties().durability(25).tab(CreativeModeTab.TAB_TRANSPORTATION), EntityType.PIG, 7)); // MagmaCube - decompile fix
+        WARPED_FUNGUS_ON_A_STICK = registerItem("warped_fungus_on_a_stick", new FoodOnAStickItem<>(new Item.Properties().durability(100).tab(CreativeModeTab.TAB_TRANSPORTATION), EntityType.STRIDER, 1)); // MagmaCube - decompile fix
         NETHER_STAR = registerItem("nether_star", new SimpleFoiledItem(new Item.Properties().tab(CreativeModeTab.TAB_MATERIALS).rarity(Rarity.UNCOMMON)));
         PUMPKIN_PIE = registerItem("pumpkin_pie", new Item(new Item.Properties().tab(CreativeModeTab.TAB_FOOD).food(Foods.PUMPKIN_PIE)));
         FIREWORK_ROCKET = registerItem("firework_rocket", new FireworkRocketItem(new Item.Properties().tab(CreativeModeTab.TAB_MISC)));
diff --git a/src/main/java/net/minecraft/world/item/KnowledgeBookItem.java b/src/main/java/net/minecraft/world/item/KnowledgeBookItem.java
index f6f152cbbf6c5bac81e20c03bfb157d726684923..28a28da19b657c539c0376cf94db8f7d6ad22d47 100644
--- a/src/main/java/net/minecraft/world/item/KnowledgeBookItem.java
+++ b/src/main/java/net/minecraft/world/item/KnowledgeBookItem.java
@@ -51,7 +51,7 @@ extends Item {
             RecipeManager debug8 = debug1.getServer().getRecipeManager();
             for (int debug9 = 0; debug9 < debug6.size(); ++debug9) {
                 String debug10 = debug6.getString(debug9);
-                Optional<Recipe<?>> debug11 = debug8.byKey(new ResourceLocation(debug10));
+                Optional<Recipe<?>> debug11 = (Optional) debug8.byKey(new ResourceLocation(debug10)); // MagmaCube - decompile fix
                 if (!debug11.isPresent()) {
                     LOGGER.error("Invalid recipe: {}", (Object)debug10);
                     return InteractionResultHolder.fail(debug4);
diff --git a/src/main/java/net/minecraft/world/item/SwordItem.java b/src/main/java/net/minecraft/world/item/SwordItem.java
index ea860b7147acc331b0b55be640eb8232706f6936..6a3fee76ca583381d64ff273341536dc28764fa5 100644
--- a/src/main/java/net/minecraft/world/item/SwordItem.java
+++ b/src/main/java/net/minecraft/world/item/SwordItem.java
@@ -26,9 +26,9 @@ public class SwordItem extends TieredItem implements Vanishable
     public SwordItem(final Tier debug1, final int debug2, final float debug3, final Properties debug4) {
         super(debug1, debug4);
         this.attackDamage = debug2 + debug1.getAttackDamageBonus();
-        final ImmutableMultimap.Builder<Attribute, AttributeModifier> debug5 = (ImmutableMultimap.Builder<Attribute, AttributeModifier>)ImmutableMultimap.builder();
-        debug5.put((Object)Attributes.ATTACK_DAMAGE, (Object)new AttributeModifier(SwordItem.BASE_ATTACK_DAMAGE_UUID, "Weapon modifier", this.attackDamage, AttributeModifier.Operation.ADDITION));
-        debug5.put((Object)Attributes.ATTACK_SPEED, (Object)new AttributeModifier(SwordItem.BASE_ATTACK_SPEED_UUID, "Weapon modifier", debug3, AttributeModifier.Operation.ADDITION));
+        final ImmutableMultimap.Builder<Attribute, AttributeModifier> debug5 = ImmutableMultimap.builder(); // MagmaCube - decompile fix
+        debug5.put(Attributes.ATTACK_DAMAGE, new AttributeModifier(SwordItem.BASE_ATTACK_DAMAGE_UUID, "Weapon modifier", this.attackDamage, AttributeModifier.Operation.ADDITION)); // MagmaCube - decompile fix
+        debug5.put(Attributes.ATTACK_SPEED, new AttributeModifier(SwordItem.BASE_ATTACK_SPEED_UUID, "Weapon modifier", debug3, AttributeModifier.Operation.ADDITION)); // MagmaCube - decompile fix
         this.defaultModifiers = (Multimap<Attribute, AttributeModifier>)debug5.build();
     }
     
diff --git a/src/main/java/net/minecraft/world/item/alchemy/Potion.java b/src/main/java/net/minecraft/world/item/alchemy/Potion.java
index 5a3ea71683eb138421b91fa00ce6663edfd3898a..12ae1f9ad2e61070cc51699fd980a59da869e906 100644
--- a/src/main/java/net/minecraft/world/item/alchemy/Potion.java
+++ b/src/main/java/net/minecraft/world/item/alchemy/Potion.java
@@ -23,7 +23,7 @@ public class Potion
     
     public Potion(@Nullable final String debug1, final MobEffectInstance... debug2) {
         this.name = debug1;
-        this.effects = (ImmutableList<MobEffectInstance>)ImmutableList.copyOf((Object[])debug2);
+        this.effects = (ImmutableList<MobEffectInstance>)ImmutableList.copyOf(debug2); // MagmaCube - decompile fix
     }
     
     public String getName(final String debug1) {
diff --git a/src/main/java/net/minecraft/world/item/alchemy/PotionBrewing.java b/src/main/java/net/minecraft/world/item/alchemy/PotionBrewing.java
index 7cb89c347b5723ff5e042881ddbb0e082c8933dd..1915936e9733dfdae10bf4adf75b240cfb1909b4 100644
--- a/src/main/java/net/minecraft/world/item/alchemy/PotionBrewing.java
+++ b/src/main/java/net/minecraft/world/item/alchemy/PotionBrewing.java
@@ -25,7 +25,7 @@ public class PotionBrewing
     
     protected static boolean isContainerIngredient(final ItemStack debug0) {
         for (int debug = 0, debug2 = PotionBrewing.CONTAINER_MIXES.size(); debug < debug2; ++debug) {
-            if (((Mix<Object>)PotionBrewing.CONTAINER_MIXES.get(debug)).ingredient.test(debug0)) {
+            if ((PotionBrewing.CONTAINER_MIXES.get(debug)).ingredient.test(debug0)) { // MagmaCube - decompile fix
                 return true;
             }
         }
@@ -34,7 +34,7 @@ public class PotionBrewing
     
     protected static boolean isPotionIngredient(final ItemStack debug0) {
         for (int debug = 0, debug2 = PotionBrewing.POTION_MIXES.size(); debug < debug2; ++debug) {
-            if (((Mix<Object>)PotionBrewing.POTION_MIXES.get(debug)).ingredient.test(debug0)) {
+            if ((PotionBrewing.POTION_MIXES.get(debug)).ingredient.test(debug0)) { // MagmaCube - decompile fix
                 return true;
             }
         }
@@ -43,7 +43,7 @@ public class PotionBrewing
     
     public static boolean isBrewablePotion(final Potion debug0) {
         for (int debug = 0, debug2 = PotionBrewing.POTION_MIXES.size(); debug < debug2; ++debug) {
-            if (((Mix<Object>)PotionBrewing.POTION_MIXES.get(debug)).to == debug0) {
+            if ((PotionBrewing.POTION_MIXES.get(debug)).to == debug0) { // MagmaCube - decompile fix
                 return true;
             }
         }
@@ -58,7 +58,7 @@ public class PotionBrewing
         final Item debug2 = debug0.getItem();
         for (int debug3 = 0, debug4 = PotionBrewing.CONTAINER_MIXES.size(); debug3 < debug4; ++debug3) {
             final Mix<Item> debug5 = PotionBrewing.CONTAINER_MIXES.get(debug3);
-            if (((Mix<Object>)debug5).from == debug2 && ((Mix<Object>)debug5).ingredient.test(debug1)) {
+            if ((debug5).from == debug2 && (debug5).ingredient.test(debug1)) { // MagmaCube - decompile fix
                 return true;
             }
         }
@@ -69,7 +69,7 @@ public class PotionBrewing
         final Potion debug2 = PotionUtils.getPotion(debug0);
         for (int debug3 = 0, debug4 = PotionBrewing.POTION_MIXES.size(); debug3 < debug4; ++debug3) {
             final Mix<Potion> debug5 = PotionBrewing.POTION_MIXES.get(debug3);
-            if (((Mix<Object>)debug5).from == debug2 && ((Mix<Object>)debug5).ingredient.test(debug1)) {
+            if ((debug5).from == debug2 && (debug5).ingredient.test(debug1)) { // MagmaCube - decompile fix
                 return true;
             }
         }
@@ -82,14 +82,14 @@ public class PotionBrewing
             final Item debug3 = debug1.getItem();
             for (int debug4 = 0, debug5 = PotionBrewing.CONTAINER_MIXES.size(); debug4 < debug5; ++debug4) {
                 final Mix<Item> debug6 = PotionBrewing.CONTAINER_MIXES.get(debug4);
-                if (((Mix<Object>)debug6).from == debug3 && ((Mix<Object>)debug6).ingredient.test(debug0)) {
-                    return PotionUtils.setPotion(new ItemStack((ItemLike)((Mix<Object>)debug6).to), debug2);
+                if ((debug6).from == debug3 && (debug6).ingredient.test(debug0)) { // MagmaCube - decompile fix
+                    return PotionUtils.setPotion(new ItemStack((ItemLike)(debug6).to), debug2); // MagmaCube - decompile fix
                 }
             }
             for (int debug4 = 0, debug5 = PotionBrewing.POTION_MIXES.size(); debug4 < debug5; ++debug4) {
                 final Mix<Potion> debug7 = PotionBrewing.POTION_MIXES.get(debug4);
-                if (((Mix<Object>)debug7).from == debug2 && ((Mix<Object>)debug7).ingredient.test(debug0)) {
-                    return PotionUtils.setPotion(new ItemStack(debug3), (Potion)((Mix<Object>)debug7).to);
+                if ((debug7).from == debug2 && (debug7).ingredient.test(debug0)) { // MagmaCube - decompile fix
+                    return PotionUtils.setPotion(new ItemStack(debug3), (Potion)(debug7).to); // MagmaCube - decompile fix
                 }
             }
         }
@@ -184,12 +184,10 @@ public class PotionBrewing
         POTION_MIXES = Lists.newArrayList();
         CONTAINER_MIXES = Lists.newArrayList();
         ALLOWED_CONTAINERS = Lists.newArrayList();
-        final Iterator<Ingredient> iterator;
-        Ingredient debug;
         ALLOWED_CONTAINER = (debug0 -> {
-            PotionBrewing.ALLOWED_CONTAINERS.iterator();
+            Iterator<Ingredient> iterator = PotionBrewing.ALLOWED_CONTAINERS.iterator(); // MagmaCube - decompile fix
             while (iterator.hasNext()) {
-                debug = iterator.next();
+                Ingredient debug = iterator.next(); // MagmaCube - decompile fix
                 if (debug.test(debug0)) {
                     return true;
                 }
diff --git a/src/main/java/net/minecraft/world/item/alchemy/PotionUtils.java b/src/main/java/net/minecraft/world/item/alchemy/PotionUtils.java
index b17c3a10c3a78512f30dfc0df20ef7e88912827b..82c48fe67b21a35b999f5dbb3002a81f59c2297b 100644
--- a/src/main/java/net/minecraft/world/item/alchemy/PotionUtils.java
+++ b/src/main/java/net/minecraft/world/item/alchemy/PotionUtils.java
@@ -34,14 +34,14 @@ public class PotionUtils
     }
     
     public static List<MobEffectInstance> getAllEffects(final Potion debug0, final Collection<MobEffectInstance> debug1) {
-        final List<MobEffectInstance> debug2 = (List<MobEffectInstance>)Lists.newArrayList();
+        final List<MobEffectInstance> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         debug2.addAll(debug0.getEffects());
         debug2.addAll(debug1);
         return debug2;
     }
     
     public static List<MobEffectInstance> getAllEffects(@Nullable final CompoundTag debug0) {
-        final List<MobEffectInstance> debug = (List<MobEffectInstance>)Lists.newArrayList();
+        final List<MobEffectInstance> debug = Lists.newArrayList(); // MagmaCube - decompile fix
         debug.addAll(getPotion(debug0).getEffects());
         getCustomEffects(debug0, debug);
         return debug;
@@ -52,7 +52,7 @@ public class PotionUtils
     }
     
     public static List<MobEffectInstance> getCustomEffects(@Nullable final CompoundTag debug0) {
-        final List<MobEffectInstance> debug = (List<MobEffectInstance>)Lists.newArrayList();
+        final List<MobEffectInstance> debug = Lists.newArrayList(); // MagmaCube - decompile fix
         getCustomEffects(debug0, debug);
         return debug;
     }
@@ -140,7 +140,7 @@ public class PotionUtils
         final CompoundTag debug2 = debug0.getOrCreateTag();
         final ListTag debug3 = debug2.getList("CustomPotionEffects", 9);
         for (final MobEffectInstance debug4 : debug1) {
-            ((AbstractList<CompoundTag>)debug3).add(debug4.save(new CompoundTag()));
+            debug3.add(debug4.save(new CompoundTag())); // MagmaCube - decompile fix
         }
         debug2.put("CustomPotionEffects", debug3);
         return debug0;
@@ -148,7 +148,7 @@ public class PotionUtils
     
     public static void addPotionTooltip(final ItemStack debug0, final List<Component> debug1, final float debug2) {
         final List<MobEffectInstance> debug3 = getMobEffects(debug0);
-        final List<Pair<Attribute, AttributeModifier>> debug4 = (List<Pair<Attribute, AttributeModifier>>)Lists.newArrayList();
+        final List<Pair<Attribute, AttributeModifier>> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
         if (debug3.isEmpty()) {
             debug1.add(PotionUtils.NO_EFFECT);
         }
diff --git a/src/main/java/net/minecraft/world/item/crafting/ArmorDyeRecipe.java b/src/main/java/net/minecraft/world/item/crafting/ArmorDyeRecipe.java
index 611f39e4f0e81942213c29c751bf1f15782d2b6f..3f136f4e112ca2dfefcc84a456a65a8b1909f66c 100644
--- a/src/main/java/net/minecraft/world/item/crafting/ArmorDyeRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/ArmorDyeRecipe.java
@@ -20,7 +20,7 @@ public class ArmorDyeRecipe extends CustomRecipe
     @Override
     public boolean matches(final CraftingContainer debug1, final Level debug2) {
         ItemStack debug3 = ItemStack.EMPTY;
-        final List<ItemStack> debug4 = (List<ItemStack>)Lists.newArrayList();
+        final List<ItemStack> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug5 = 0; debug5 < debug1.getContainerSize(); ++debug5) {
             final ItemStack debug6 = debug1.getItem(debug5);
             if (!debug6.isEmpty()) {
@@ -43,7 +43,7 @@ public class ArmorDyeRecipe extends CustomRecipe
     
     @Override
     public ItemStack assemble(final CraftingContainer debug1) {
-        final List<DyeItem> debug2 = (List<DyeItem>)Lists.newArrayList();
+        final List<DyeItem> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         ItemStack debug3 = ItemStack.EMPTY;
         for (int debug4 = 0; debug4 < debug1.getContainerSize(); ++debug4) {
             final ItemStack debug5 = debug1.getItem(debug4);
diff --git a/src/main/java/net/minecraft/world/item/crafting/FireworkRocketRecipe.java b/src/main/java/net/minecraft/world/item/crafting/FireworkRocketRecipe.java
index a144196bb439cd5d26fc00b39b1e3eb3c599fb94..9a6b31164150ca216cc27d2c007a40e01f3d814c 100644
--- a/src/main/java/net/minecraft/world/item/crafting/FireworkRocketRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/FireworkRocketRecipe.java
@@ -63,7 +63,7 @@ public class FireworkRocketRecipe extends CustomRecipe
                 else if (FireworkRocketRecipe.STAR_INGREDIENT.test(debug7)) {
                     final CompoundTag debug8 = debug7.getTagElement("Explosion");
                     if (debug8 != null) {
-                        ((AbstractList<CompoundTag>)debug4).add(debug8);
+                        debug4.add(debug8); // MagmaCube - decompile fix
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/world/item/crafting/FireworkStarFadeRecipe.java b/src/main/java/net/minecraft/world/item/crafting/FireworkStarFadeRecipe.java
index b0db4a14699ff610837c4524a5be10796d1dd371..cd5e67ce35ab74f5d9558000bd709d543ef8a9db 100644
--- a/src/main/java/net/minecraft/world/item/crafting/FireworkStarFadeRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/FireworkStarFadeRecipe.java
@@ -46,7 +46,7 @@ public class FireworkStarFadeRecipe extends CustomRecipe
     
     @Override
     public ItemStack assemble(final CraftingContainer debug1) {
-        final List<Integer> debug2 = (List<Integer>)Lists.newArrayList();
+        final List<Integer> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         ItemStack debug3 = null;
         for (int debug4 = 0; debug4 < debug1.getContainerSize(); ++debug4) {
             final ItemStack debug5 = debug1.getItem(debug4);
diff --git a/src/main/java/net/minecraft/world/item/crafting/FireworkStarRecipe.java b/src/main/java/net/minecraft/world/item/crafting/FireworkStarRecipe.java
index 296002904e3746651d165da4b754ed8ebdb6a1c2..cace64c6273ececa7e4f448e20885f8b8bb99bd8 100644
--- a/src/main/java/net/minecraft/world/item/crafting/FireworkStarRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/FireworkStarRecipe.java
@@ -80,7 +80,7 @@ public class FireworkStarRecipe extends CustomRecipe
         final ItemStack debug2 = new ItemStack(Items.FIREWORK_STAR);
         final CompoundTag debug3 = debug2.getOrCreateTagElement("Explosion");
         FireworkRocketItem.Shape debug4 = FireworkRocketItem.Shape.SMALL_BALL;
-        final List<Integer> debug5 = (List<Integer>)Lists.newArrayList();
+        final List<Integer> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug6 = 0; debug6 < debug1.getContainerSize(); ++debug6) {
             final ItemStack debug7 = debug1.getItem(debug6);
             if (!debug7.isEmpty()) {
@@ -122,7 +122,7 @@ public class FireworkStarRecipe extends CustomRecipe
         SHAPE_INGREDIENT = Ingredient.of(Items.FIRE_CHARGE, Items.FEATHER, Items.GOLD_NUGGET, Items.SKELETON_SKULL, Items.WITHER_SKELETON_SKULL, Items.CREEPER_HEAD, Items.PLAYER_HEAD, Items.DRAGON_HEAD, Items.ZOMBIE_HEAD);
         TRAIL_INGREDIENT = Ingredient.of(Items.DIAMOND);
         FLICKER_INGREDIENT = Ingredient.of(Items.GLOWSTONE_DUST);
-        SHAPE_BY_ITEM = Util.make((Map<Item, FireworkRocketItem.Shape>)Maps.newHashMap(), debug0 -> {
+        SHAPE_BY_ITEM = Util.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put(Items.FIRE_CHARGE, FireworkRocketItem.Shape.LARGE_BALL);
             debug0.put(Items.FEATHER, FireworkRocketItem.Shape.BURST);
             debug0.put(Items.GOLD_NUGGET, FireworkRocketItem.Shape.STAR);
diff --git a/src/main/java/net/minecraft/world/item/crafting/Ingredient.java b/src/main/java/net/minecraft/world/item/crafting/Ingredient.java
index 72e9c1baa6b5a516a24a19959c41a693c989d54b..69fc54bdaf61c439430686ef5897fc0d7947c434 100644
--- a/src/main/java/net/minecraft/world/item/crafting/Ingredient.java
+++ b/src/main/java/net/minecraft/world/item/crafting/Ingredient.java
@@ -180,11 +180,6 @@ implements Predicate<ItemStack> {
         throw new JsonParseException("An ingredient entry needs either a tag or an item");
     }
 
-    @Override
-    public /* synthetic */ boolean test(@Nullable Object object) {
-        return this.test((ItemStack)object);
-    }
-
     static class TagValue
     implements Value {
         private final Tag<Item> tag;
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index 27a16627edeb9fff33af03d76c769988f5fdaf78..f21616b323b97d328bac4240b882e89fd9ef863d 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -64,15 +64,15 @@ extends SimpleJsonResourceReloadListener {
     @Override
     protected void apply(Map<ResourceLocation, JsonElement> debug1, ResourceManager debug2, ProfilerFiller debug3) {
         this.hasErrors = false;
-        HashMap debug4 = Maps.newHashMap();
+        HashMap<RecipeType, ImmutableMap.Builder> debug4 = Maps.newHashMap(); // MagmaCube - decompile fix
         for (Map.Entry<ResourceLocation, JsonElement> debug6 : debug1.entrySet()) {
             ResourceLocation debug7 = debug6.getKey();
             try {
                 Recipe<?> debug8 = RecipeManager.fromJson(debug7, GsonHelper.convertToJsonObject(debug6.getValue(), "top element"));
-                debug4.computeIfAbsent(debug8.getType(), debug0 -> ImmutableMap.builder()).put((Object)debug7, debug8);
+                debug4.computeIfAbsent(debug8.getType(), debug0 -> ImmutableMap.builder()).put(debug7, debug8); // MagmaCube - decompile fix
             }
             catch (JsonParseException | IllegalArgumentException debug8) {
-                LOGGER.error("Parsing error loading recipe {}", (Object)debug7, (Object)debug8);
+                LOGGER.error("Parsing error loading recipe {}", (Object)debug7, debug8); // MagmaCube - decompile fix
             }
         }
         this.recipes = (Map)debug4.entrySet().stream().collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, debug0 -> ((ImmutableMap.Builder)debug0.getValue()).build()));
@@ -84,7 +84,7 @@ extends SimpleJsonResourceReloadListener {
     }
 
     public <C extends Container, T extends Recipe<C>> List<T> getAllRecipesFor(RecipeType<T> debug1) {
-        return this.byType(debug1).values().stream().map(debug0 -> debug0).collect(Collectors.toList());
+        return this.byType(debug1).values().stream().map(debug0 -> (T) debug0).collect(Collectors.toList()); // MagmaCube - decompile fix
     }
 
     public <C extends Container, T extends Recipe<C>> List<T> getRecipesFor(RecipeType<T> debug1, C debug2, Level debug32) {
@@ -92,7 +92,7 @@ extends SimpleJsonResourceReloadListener {
     }
 
     private <C extends Container, T extends Recipe<C>> Map<ResourceLocation, Recipe<C>> byType(RecipeType<T> debug1) {
-        return this.recipes.getOrDefault(debug1, Collections.emptyMap());
+        return (Map<ResourceLocation, Recipe<C>>) (Object) this.recipes.getOrDefault(debug1, Collections.emptyMap()); // MagmaCube - decompile fix
     }
 
     public <C extends Container, T extends Recipe<C>> NonNullList<ItemStack> getRemainingItemsFor(RecipeType<T> debug1, C debug2, Level debug3) {
@@ -108,7 +108,7 @@ extends SimpleJsonResourceReloadListener {
     }
 
     public Optional<? extends Recipe<?>> byKey(ResourceLocation debug12) {
-        return this.recipes.values().stream().map(debug1 -> (Recipe)debug1.get(debug12)).filter(Objects::nonNull).findFirst();
+        return this.recipes.values().stream().map(debug1 -> (Recipe<?>)debug1.get(debug12)).filter(Objects::nonNull).findFirst(); // MagmaCube - decompile fix
     }
 
     public Collection<Recipe<?>> getRecipes() {
@@ -126,10 +126,10 @@ extends SimpleJsonResourceReloadListener {
 
     public void replaceRecipes(Iterable<Recipe<?>> debug12) {
         this.hasErrors = false;
-        HashMap debug2 = Maps.newHashMap();
+        HashMap<RecipeType<?>, Map<ResourceLocation, Recipe>> debug2 = Maps.newHashMap(); // MagmaCube - decompile fix
         debug12.forEach(debug1 -> {
-            Map debug2 = debug2.computeIfAbsent(debug1.getType(), debug0 -> Maps.newHashMap());
-            Recipe debug3 = debug2.put(debug1.getId(), debug1);
+            Map<ResourceLocation, Recipe> debug2l = debug2.computeIfAbsent(debug1.getType(), debug0 -> Maps.newHashMap()); // MagmaCube - decompile fix
+            Recipe debug3 = debug2l.put(debug1.getId(), debug1); // MagmaCube - decompile fix
             if (debug3 != null) {
                 throw new IllegalStateException("Duplicate recipe ignored with ID " + debug1.getId());
             }
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeSerializer.java b/src/main/java/net/minecraft/world/item/crafting/RecipeSerializer.java
index c4812cd1b22bea88a50f628c2c5574bd7bb904e1..9254a4c83a6fc10cbee8603a5a664ded942e853b 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeSerializer.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeSerializer.java
@@ -35,7 +35,7 @@ public interface RecipeSerializer<T extends Recipe<?>>
     
     void toNetwork(final FriendlyByteBuf p0, final T p1);
     
-    default <S extends RecipeSerializer<T>, T extends Recipe<?>> S register(final String debug0, final S debug1) {
+    static <S extends RecipeSerializer<T>, T extends Recipe<?>> S register(final String debug0, final S debug1) { // MagmaCube - decompile fix
         return Registry.register(Registry.RECIPE_SERIALIZER, debug0, debug1);
     }
 }
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeType.java b/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
index 5e09a98da8b153682cd78825749bca88013a845e..66f2161e1029ef51aa9a3af096a8fe8d45f6ba28 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
@@ -16,7 +16,7 @@ public interface RecipeType<T extends Recipe<?>>
     public static final RecipeType<StonecutterRecipe> STONECUTTING = register("stonecutting");
     public static final RecipeType<UpgradeRecipe> SMITHING = register("smithing");
     
-    default <T extends Recipe<?>> RecipeType<T> register(final String debug0) {
+    static <T extends Recipe<?>> RecipeType<T> register(final String debug0) { // MagmaCube - decompile fix
         return Registry.register(Registry.RECIPE_TYPE, new ResourceLocation(debug0), new RecipeType<T>() {
             @Override
             public String toString() {
diff --git a/src/main/java/net/minecraft/world/item/crafting/RepairItemRecipe.java b/src/main/java/net/minecraft/world/item/crafting/RepairItemRecipe.java
index fc98321d4010e2a86efe9f2d18db6ce9dae0e75a..f5146a1c02b09d0c5d7768719aa7a26027513f49 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RepairItemRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RepairItemRecipe.java
@@ -23,7 +23,7 @@ public class RepairItemRecipe extends CustomRecipe
     
     @Override
     public boolean matches(final CraftingContainer debug1, final Level debug2) {
-        final List<ItemStack> debug3 = (List<ItemStack>)Lists.newArrayList();
+        final List<ItemStack> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug4 = 0; debug4 < debug1.getContainerSize(); ++debug4) {
             final ItemStack debug5 = debug1.getItem(debug4);
             if (!debug5.isEmpty()) {
@@ -41,7 +41,7 @@ public class RepairItemRecipe extends CustomRecipe
     
     @Override
     public ItemStack assemble(final CraftingContainer debug1) {
-        final List<ItemStack> debug4 = (List<ItemStack>)Lists.newArrayList();
+        final List<ItemStack> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug5 = 0; debug5 < debug1.getContainerSize(); ++debug5) {
             final ItemStack debug6 = debug1.getItem(debug5);
             if (!debug6.isEmpty()) {
@@ -68,17 +68,13 @@ public class RepairItemRecipe extends CustomRecipe
                 }
                 final ItemStack debug14 = new ItemStack(debug8.getItem());
                 debug14.setDamageValue(debug13);
-                final Map<Enchantment, Integer> debug15 = (Map<Enchantment, Integer>)Maps.newHashMap();
+                final Map<Enchantment, Integer> debug15 = Maps.newHashMap(); // MagmaCube - decompile fix
                 final Map<Enchantment, Integer> debug16 = EnchantmentHelper.getEnchantments(debug8);
                 final Map<Enchantment, Integer> debug17 = EnchantmentHelper.getEnchantments(debug6);
-                final Map<K, Integer> map;
-                final Map<K, Integer> map2;
-                final int debug18;
-                final Map<Enchantment, Integer> map3;
                 Registry.ENCHANTMENT.stream().filter(Enchantment::isCurse).forEach(debug3 -> {
-                    debug18 = Math.max(map.getOrDefault(debug3, 0), map2.getOrDefault(debug3, 0));
+                    int debug18 = Math.max(debug15.getOrDefault(debug3, 0), debug16.getOrDefault(debug3, 0)); // MagmaCube - decompile fix
                     if (debug18 > 0) {
-                        map3.put(debug3, debug18);
+                        debug17.put(debug3, debug18); // MagmaCube - decompile fix
                     }
                     return;
                 });
diff --git a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
index d27b3cab0b55ba18d656c0dfe06e18417695a876..f7cc278c751853953c858b8aaa6f9c792cbb73f6 100644
--- a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
@@ -207,7 +207,7 @@ public class ShapedRecipe implements CraftingRecipe
     }
     
     private static Map<String, Ingredient> keyFromJson(final JsonObject debug0) {
-        final Map<String, Ingredient> debug = (Map<String, Ingredient>)Maps.newHashMap();
+        final Map<String, Ingredient> debug = Maps.newHashMap(); // MagmaCube - decompile fix
         for (final Map.Entry<String, JsonElement> debug2 : debug0.entrySet()) {
             if (debug2.getKey().length() != 1) {
                 throw new JsonSyntaxException("Invalid key entry: '" + debug2.getKey() + "' is an invalid symbol (must be 1 character only).");
@@ -223,11 +223,8 @@ public class ShapedRecipe implements CraftingRecipe
     
     public static ItemStack itemFromJson(final JsonObject debug0) {
         final String debug = GsonHelper.getAsString(debug0, "item");
-        final Object o;
-        final String str;
         final Item debug2 = Registry.ITEM.getOptional(new ResourceLocation(debug)).orElseThrow(() -> {
-            new JsonSyntaxException("Unknown item '" + str + "'");
-            return o;
+            return new JsonSyntaxException("Unknown item '" + debug + "'"); // MagmaCube - decompile fix
         });
         if (debug0.has("data")) {
             throw new JsonParseException("Disallowed data tag found");
diff --git a/src/main/java/net/minecraft/world/item/crafting/SimpleCookingSerializer.java b/src/main/java/net/minecraft/world/item/crafting/SimpleCookingSerializer.java
index a634c9002f9350ba30fca6e561500ff1997f465b..b9d5ef11440e2efe804bb6a8fc671bfa2a3500f0 100644
--- a/src/main/java/net/minecraft/world/item/crafting/SimpleCookingSerializer.java
+++ b/src/main/java/net/minecraft/world/item/crafting/SimpleCookingSerializer.java
@@ -27,11 +27,8 @@ public class SimpleCookingSerializer<T extends AbstractCookingRecipe> implements
         final Ingredient debug5 = Ingredient.fromJson(debug4);
         final String debug6 = GsonHelper.getAsString(debug2, "result");
         final ResourceLocation debug7 = new ResourceLocation(debug6);
-        final Object o;
-        final String str;
         final ItemStack debug8 = new ItemStack(Registry.ITEM.getOptional(debug7).orElseThrow(() -> {
-            new IllegalStateException("Item: " + str + " does not exist");
-            return o;
+            return new IllegalStateException("Item: " + debug6 + " does not exist"); // MagmaCube - decompile fix
         }));
         final float debug9 = GsonHelper.getAsFloat(debug2, "experience", 0.0f);
         final int debug10 = GsonHelper.getAsInt(debug2, "cookingtime", this.defaultCookingTime);
diff --git a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java
index 372aa2ad2ed6bd1edce34f8be273b2f38694aea6..4c38a4d6182ebfd6721e7d8275bc0946b23518f7 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java
@@ -96,7 +96,7 @@ public enum EnchantmentCategory
     VANISHABLE {
         @Override
         public boolean canEnchant(final Item debug1) {
-            return debug1 instanceof Vanishable || Block.byItem(debug1) instanceof Vanishable || EnchantmentCategory$14.BREAKABLE.canEnchant(debug1);
+            return debug1 instanceof Vanishable || Block.byItem(debug1) instanceof Vanishable || BREAKABLE.canEnchant(debug1); // MagmaCube - decompile fix
         }
     };
     
diff --git a/src/main/java/net/minecraft/world/item/trading/Merchant.java b/src/main/java/net/minecraft/world/item/trading/Merchant.java
index 10628fdb10aaadef41e70157420c00857e272e83..332e5aea1a71b082fa9d1f711c09111c12b55ad9 100644
--- a/src/main/java/net/minecraft/world/item/trading/Merchant.java
+++ b/src/main/java/net/minecraft/world/item/trading/Merchant.java
@@ -43,7 +43,7 @@ public interface Merchant
     }
     
     default void openTradingScreen(final Player debug1, final Component debug2, final int debug3) {
-        final OptionalInt debug4 = debug1.openMenu(new SimpleMenuProvider((debug1, debug2, debug3) -> new MerchantMenu(debug1, debug2, this), debug2));
+        final OptionalInt debug4 = debug1.openMenu(new SimpleMenuProvider((debug1l, debug2l, debug3l) -> new MerchantMenu(debug1l, debug2l, this), debug2)); // MagmaCube - decompile fix
         if (debug4.isPresent()) {
             final MerchantOffers debug5 = this.getOffers();
             if (!debug5.isEmpty()) {
diff --git a/src/main/java/net/minecraft/world/item/trading/MerchantOffers.java b/src/main/java/net/minecraft/world/item/trading/MerchantOffers.java
index c84e1ec4d2baaf9ecf6c5027f3f4268e82f39600..3fa1b7554ecf8bee18119a264b91db2a2f8ebaa2 100644
--- a/src/main/java/net/minecraft/world/item/trading/MerchantOffers.java
+++ b/src/main/java/net/minecraft/world/item/trading/MerchantOffers.java
@@ -91,7 +91,7 @@ public class MerchantOffers extends ArrayList<MerchantOffer>
         final ListTag debug2 = new ListTag();
         for (int debug3 = 0; debug3 < this.size(); ++debug3) {
             final MerchantOffer debug4 = this.get(debug3);
-            ((AbstractList<CompoundTag>)debug2).add(debug4.createTag());
+            debug2.add(debug4.createTag()); // MagmaCube - decompile fix
         }
         debug1.put("Recipes", debug2);
         return debug1;
diff --git a/src/main/java/net/minecraft/world/level/BaseSpawner.java b/src/main/java/net/minecraft/world/level/BaseSpawner.java
index 83191a61ee541defbd5a92f150b4351213204208..183e73b202ec3824b1a2b854288a52665201f3bb 100644
--- a/src/main/java/net/minecraft/world/level/BaseSpawner.java
+++ b/src/main/java/net/minecraft/world/level/BaseSpawner.java
@@ -48,7 +48,7 @@ public abstract class BaseSpawner
     
     public BaseSpawner() {
         this.spawnDelay = 20;
-        this.spawnPotentials = (List<SpawnData>)Lists.newArrayList();
+        this.spawnPotentials = Lists.newArrayList(); // MagmaCube - decompile fix
         this.nextSpawnData = new SpawnData();
         this.minSpawnDelay = 200;
         this.maxSpawnDelay = 800;
@@ -227,11 +227,11 @@ public abstract class BaseSpawner
         debug1.put("SpawnData", this.nextSpawnData.getTag().copy());
         final ListTag debug3 = new ListTag();
         if (this.spawnPotentials.isEmpty()) {
-            ((AbstractList<CompoundTag>)debug3).add(this.nextSpawnData.save());
+            debug3.add(this.nextSpawnData.save()); // MagmaCube - decompile fix
         }
         else {
             for (final SpawnData debug4 : this.spawnPotentials) {
-                ((AbstractList<CompoundTag>)debug3).add(debug4.save());
+                debug3.add(debug4.save()); // MagmaCube - decompile fix
             }
         }
         debug1.put("SpawnPotentials", debug3);
diff --git a/src/main/java/net/minecraft/world/level/BlockAndTintGetter.java b/src/main/java/net/minecraft/world/level/BlockAndTintGetter.java
index eac4f9335ab104832dcc86bf8dabde4571a256f6..9047f1d19c0b8f2d7d05028afbc78be9f9fe9e30 100644
--- a/src/main/java/net/minecraft/world/level/BlockAndTintGetter.java
+++ b/src/main/java/net/minecraft/world/level/BlockAndTintGetter.java
@@ -21,6 +21,6 @@ public interface BlockAndTintGetter extends BlockGetter
     }
     
     default boolean canSeeSky(final BlockPos debug1) {
-        return this.getBrightness(LightLayer.SKY, debug1) >= super.getMaxLightLevel();
+        return this.getBrightness(LightLayer.SKY, debug1) >= BlockGetter.super.getMaxLightLevel(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/BlockGetter.java b/src/main/java/net/minecraft/world/level/BlockGetter.java
index f78ee85050b5e38e949d163c946c88a37f7f6df1..22bcdc1893438c57cdd17a5a4d5ea7d852cc057d 100644
--- a/src/main/java/net/minecraft/world/level/BlockGetter.java
+++ b/src/main/java/net/minecraft/world/level/BlockGetter.java
@@ -42,33 +42,24 @@ public interface BlockGetter
     }
     
     default BlockHitResult clip(final ClipContext debug1) {
-        final BlockState debug3;
-        final FluidState debug4;
-        final Vec3 debug5;
-        final Vec3 debug6;
-        final VoxelShape debug7;
-        final BlockHitResult debug8;
-        final VoxelShape debug9;
-        final BlockHitResult debug10;
-        final double debug11;
-        final double debug12;
-        final Vec3 debug13;
-        return traverseBlocks(debug1, (debug1, debug2) -> {
-            debug3 = this.getBlockState(debug2);
-            debug4 = this.getFluidState(debug2);
-            debug5 = debug1.getFrom();
-            debug6 = debug1.getTo();
-            debug7 = debug1.getBlockShape(debug3, this, debug2);
-            debug8 = this.clipWithInteractionOverride(debug5, debug6, debug2, debug7, debug3);
-            debug9 = debug1.getFluidShape(debug4, this, debug2);
-            debug10 = debug9.clip(debug5, debug6, debug2);
-            debug11 = ((debug8 == null) ? Double.MAX_VALUE : debug1.getFrom().distanceToSqr(debug8.getLocation()));
-            debug12 = ((debug10 == null) ? Double.MAX_VALUE : debug1.getFrom().distanceToSqr(debug10.getLocation()));
+        // MagmaCube start - decompile fix
+        return traverseBlocks(debug1, (debug1l, debug2) -> {
+            BlockState debug3 = this.getBlockState(debug2);
+            FluidState debug4 = this.getFluidState(debug2);
+            Vec3 debug5 = debug1l.getFrom();
+            Vec3 debug6 = debug1l.getTo();
+            VoxelShape debug7 = debug1l.getBlockShape(debug3, this, debug2);
+            BlockHitResult debug8 = this.clipWithInteractionOverride(debug5, debug6, debug2, debug7, debug3);
+            VoxelShape debug9 = debug1l.getFluidShape(debug4, this, debug2);
+            BlockHitResult debug10 = debug9.clip(debug5, debug6, debug2);
+            double debug11 = ((debug8 == null) ? Double.MAX_VALUE : debug1l.getFrom().distanceToSqr(debug8.getLocation()));
+            double debug12 = ((debug10 == null) ? Double.MAX_VALUE : debug1l.getFrom().distanceToSqr(debug10.getLocation()));
             return (debug11 <= debug12) ? debug8 : debug10;
         }, debug0 -> {
-            debug13 = debug0.getFrom().subtract(debug0.getTo());
+            Vec3 debug13 = debug0.getFrom().subtract(debug0.getTo());
             return BlockHitResult.miss(debug0.getTo(), Direction.getNearest(debug13.x, debug13.y, debug13.z), new BlockPos(debug0.getTo()));
         });
+        // MagmaCube end - decompile fix
     }
     
     @Nullable
@@ -95,9 +86,8 @@ public interface BlockGetter
     }
     
     default double getBlockFloorHeight(final BlockPos debug1) {
-        final BlockPos debug2;
         return this.getBlockFloorHeight(this.getBlockState(debug1).getCollisionShape(this, debug1), () -> {
-            debug2 = debug1.below();
+            BlockPos debug2 = debug1.below(); // MagmaCube - decompile fix
             return this.getBlockState(debug2).getCollisionShape(this, debug2);
         });
     }
diff --git a/src/main/java/net/minecraft/world/level/ChunkTickList.java b/src/main/java/net/minecraft/world/level/ChunkTickList.java
index 6977bef7875ac90ec1fcd3156fc4045bd1545a05..3ad559884f07d3f6a4917d1fc854d053f50ad356 100644
--- a/src/main/java/net/minecraft/world/level/ChunkTickList.java
+++ b/src/main/java/net/minecraft/world/level/ChunkTickList.java
@@ -25,7 +25,7 @@ implements TickList<T> {
     private final Function<T, ResourceLocation> toId;
 
     public ChunkTickList(Function<T, ResourceLocation> debug1, List<TickNextTickData<T>> debug22, long debug3) {
-        this(debug1, debug22.stream().map(debug2 -> new ScheduledTick(debug2.getType(), debug2.pos, (int)(debug2.triggerTick - debug3), debug2.priority)).collect(Collectors.toList()));
+        this(debug1, debug22.stream().map(debug2 -> new ScheduledTick<>(debug2.getType(), debug2.pos, (int)(debug2.triggerTick - debug3), debug2.priority)).collect(Collectors.toList())); // MagmaCube - decompile fix
     }
 
     private ChunkTickList(Function<T, ResourceLocation> debug1, List<ScheduledTick<T>> debug2) {
@@ -52,7 +52,7 @@ implements TickList<T> {
         ListTag debug1 = new ListTag();
         for (ScheduledTick<T> debug3 : this.ticks) {
             CompoundTag debug4 = new CompoundTag();
-            debug4.putString("i", this.toId.apply(((ScheduledTick)debug3).type).toString());
+            debug4.putString("i", this.toId.apply(debug3.type).toString()); // MagmaCube - decompile fix
             debug4.putInt("x", debug3.pos.getX());
             debug4.putInt("y", debug3.pos.getY());
             debug4.putInt("z", debug3.pos.getZ());
@@ -64,19 +64,19 @@ implements TickList<T> {
     }
 
     public static <T> ChunkTickList<T> create(ListTag debug0, Function<T, ResourceLocation> debug1, Function<ResourceLocation, T> debug2) {
-        ArrayList debug3 = Lists.newArrayList();
+        ArrayList<ScheduledTick<T>> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug4 = 0; debug4 < debug0.size(); ++debug4) {
             CompoundTag debug5 = debug0.getCompound(debug4);
             T debug6 = debug2.apply(new ResourceLocation(debug5.getString("i")));
             if (debug6 == null) continue;
             BlockPos debug7 = new BlockPos(debug5.getInt("x"), debug5.getInt("y"), debug5.getInt("z"));
-            debug3.add(new ScheduledTick(debug6, debug7, debug5.getInt("t"), TickPriority.byValue(debug5.getInt("p"))));
+            debug3.add(new ScheduledTick<>(debug6, debug7, debug5.getInt("t"), TickPriority.byValue(debug5.getInt("p")))); // MagmaCube - decompile fix
         }
         return new ChunkTickList<T>(debug1, debug3);
     }
 
     public void copyOut(TickList<T> debug12) {
-        this.ticks.forEach(debug1 -> debug12.scheduleTick(debug1.pos, ((ScheduledTick)debug1).type, debug1.delay, debug1.priority));
+        this.ticks.forEach(debug1 -> debug12.scheduleTick(debug1.pos, debug1.type, debug1.delay, debug1.priority)); // MagmaCube - decompile fix
     }
 
     static class ScheduledTick<T> {
diff --git a/src/main/java/net/minecraft/world/level/CollisionSpliterator.java b/src/main/java/net/minecraft/world/level/CollisionSpliterator.java
index 3ddbf0a14009425ac39495ec6f07ee167ad6d4a6..61ddac660638ef316bb39827e3c05316e736f94f 100644
--- a/src/main/java/net/minecraft/world/level/CollisionSpliterator.java
+++ b/src/main/java/net/minecraft/world/level/CollisionSpliterator.java
@@ -32,7 +32,7 @@ public class CollisionSpliterator extends Spliterators.AbstractSpliterator<Voxel
     private final BiPredicate<BlockState, BlockPos> predicate;
     
     public CollisionSpliterator(final CollisionGetter debug1, @Nullable final Entity debug2, final AABB debug3) {
-        this(debug1, debug2, debug3, (debug0, debug1) -> true);
+        this(debug1, debug2, debug3, (debug0, debug1l) -> true);
     }
     
     public CollisionSpliterator(final CollisionGetter debug1, @Nullable final Entity debug2, final AABB debug3, final BiPredicate<BlockState, BlockPos> debug4) {
diff --git a/src/main/java/net/minecraft/world/level/DataPackConfig.java b/src/main/java/net/minecraft/world/level/DataPackConfig.java
index 4d8c57b97e02fe64d7ff41838b0e326a1717affb..c856ba9a653b247e032f2d8f685c80326cc4e4f3 100644
--- a/src/main/java/net/minecraft/world/level/DataPackConfig.java
+++ b/src/main/java/net/minecraft/world/level/DataPackConfig.java
@@ -30,7 +30,7 @@ public class DataPackConfig
     }
     
     static {
-        DEFAULT = new DataPackConfig((List<String>)ImmutableList.of((Object)"vanilla"), (List<String>)ImmutableList.of());
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.STRING.listOf().fieldOf("Enabled").forGetter(debug0 -> debug0.enabled), (App)Codec.STRING.listOf().fieldOf("Disabled").forGetter(debug0 -> debug0.disabled)).apply(debug0, (BiFunction)DataPackConfig::new));
+        DEFAULT = new DataPackConfig((List<String>)ImmutableList.of("vanilla"), ImmutableList.of()); // MagmaCube - decompile fix
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.STRING.listOf().fieldOf("Enabled").forGetter(debug0l -> debug0l.enabled), Codec.STRING.listOf().fieldOf("Disabled").forGetter(debug0l -> debug0l.disabled)).apply(debug0, DataPackConfig::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/EntityGetter.java b/src/main/java/net/minecraft/world/level/EntityGetter.java
index 11d12f51ad111f9adbdb003660272f0cd8d28248..e6fc906109a98dddcb51468cfa149db3cdc541ec 100644
--- a/src/main/java/net/minecraft/world/level/EntityGetter.java
+++ b/src/main/java/net/minecraft/world/level/EntityGetter.java
@@ -59,15 +59,14 @@ public interface EntityGetter
             return Stream.empty();
         }
         final AABB debug4 = debug2.inflate(1.0E-7);
-        final boolean b;
-        return this.getEntities(debug1, debug4, debug3.and(debug2 -> {
-            if (debug2.getBoundingBox().intersects(debug4)) {
-                if ((debug1 != null) ? debug1.canCollideWith(debug2) : debug2.canBeCollidedWith()) {
-                    return b;
-                }
+        // MagmaCube start - decompile fix
+        return this.getEntities(debug1, debug4, debug3.and(debug2l -> {
+            if (debug2l.getBoundingBox().intersects(debug4)) {
+                return (debug1 != null) ? debug1.canCollideWith(debug2l) : debug2l.canBeCollidedWith();
             }
-            return b;
-        })).stream().map((Function<? super Object, ?>)Entity::getBoundingBox).map((Function<? super Object, ? extends VoxelShape>)Shapes::create);
+            return false;
+        })).stream().map(Entity::getBoundingBox).map(Shapes::create);
+        // MagmaCube end - decompile fix
     }
     
     @Nullable
@@ -159,7 +158,7 @@ public interface EntityGetter
     }
     
     default List<Player> getNearbyPlayers(final TargetingConditions debug1, final LivingEntity debug2, final AABB debug3) {
-        final List<Player> debug4 = (List<Player>)Lists.newArrayList();
+        final List<Player> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Player debug5 : this.players()) {
             if (debug3.contains(debug5.getX(), debug5.getY(), debug5.getZ()) && debug1.test(debug2, debug5)) {
                 debug4.add(debug5);
@@ -170,7 +169,7 @@ public interface EntityGetter
     
     default <T extends LivingEntity> List<T> getNearbyEntities(final Class<? extends T> debug1, final TargetingConditions debug2, final LivingEntity debug3, final AABB debug4) {
         final List<T> debug5 = this.getEntitiesOfClass(debug1, debug4, (Predicate<? super T>)null);
-        final List<T> debug6 = (List<T>)Lists.newArrayList();
+        final List<T> debug6 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final T debug7 : debug5) {
             if (debug2.test(debug3, debug7)) {
                 debug6.add(debug7);
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 9da8fa95076d25a8d18306f5e8ea2a633c4e45f3..8dcf51ffbec95e7cfd587d792b1160eda7328247 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -77,8 +77,8 @@ public class Explosion
     
     public Explosion(final Level debug1, @Nullable final Entity debug2, @Nullable final DamageSource debug3, @Nullable final ExplosionDamageCalculator debug4, final double debug5, final double debug7, final double debug9, final float debug11, final boolean debug12, final BlockInteraction debug13) {
         this.random = new Random();
-        this.toBlow = (List<BlockPos>)Lists.newArrayList();
-        this.hitPlayers = (Map<Player, Vec3>)Maps.newHashMap();
+        this.toBlow = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.hitPlayers = Maps.newHashMap(); // MagmaCube - decompile fix
         this.level = debug1;
         this.source = debug2;
         this.radius = debug11;
@@ -125,7 +125,7 @@ public class Explosion
     }
     
     public void explode() {
-        final Set<BlockPos> debug1 = (Set<BlockPos>)Sets.newHashSet();
+        final Set<BlockPos> debug1 = Sets.newHashSet(); // MagmaCube - decompile fix
         final int debug2 = 16;
         for (int debug3 = 0; debug3 < 16; ++debug3) {
             for (int debug4 = 0; debug4 < 16; ++debug4) {
@@ -260,13 +260,13 @@ public class Explosion
             final ItemStack debug6 = (ItemStack)debug5.getFirst();
             if (ItemEntity.areMergable(debug6, debug1)) {
                 final ItemStack debug7 = ItemEntity.merge(debug6, debug1, 16);
-                debug0.set(debug4, (Object)Pair.of((Object)debug7, debug5.getSecond()));
+                debug0.set(debug4, Pair.of(debug7, debug5.getSecond())); // MagmaCube - decompile fix
                 if (debug1.isEmpty()) {
                     return;
                 }
             }
         }
-        debug0.add((Object)Pair.of((Object)debug1, (Object)debug2));
+        debug0.add(Pair.of(debug1, debug2)); // MagmaCube - decompile fix
     }
     
     public DamageSource getDamageSource() {
diff --git a/src/main/java/net/minecraft/world/level/GameRules.java b/src/main/java/net/minecraft/world/level/GameRules.java
index ac9f46464540e02d4852a301639f7757aa5f785e..3d0fb5bf5b4f46ddfe7ffa2fb34e7a51efeb8a46 100644
--- a/src/main/java/net/minecraft/world/level/GameRules.java
+++ b/src/main/java/net/minecraft/world/level/GameRules.java
@@ -42,7 +42,7 @@ import org.apache.logging.log4j.Logger;
 
 public class GameRules {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final Map<Key<?>, Type<?>> GAME_RULE_TYPES = Maps.newTreeMap(Comparator.comparing(debug0 -> Key.access$600(debug0)));
+    private static final Map<Key<?>, Type<?>> GAME_RULE_TYPES = Maps.newTreeMap(Comparator.comparing(debug0 -> debug0.id)); // MagmaCube - decompile fix
     public static final Key<BooleanValue> RULE_DOFIRETICK = GameRules.register("doFireTick", Category.UPDATES, BooleanValue.access$000(true));
     public static final Key<BooleanValue> RULE_MOBGRIEFING = GameRules.register("mobGriefing", Category.MOBS, BooleanValue.access$000(true));
     public static final Key<BooleanValue> RULE_KEEPINVENTORY = GameRules.register("keepInventory", Category.PLAYER, BooleanValue.access$000(false));
@@ -89,7 +89,7 @@ public class GameRules {
 
     private static <T extends Value<T>> Key<T> register(String debug0, Category debug1, Type<T> debug2) {
         Key debug3 = new Key(debug0, debug1);
-        Type<T> debug4 = GAME_RULE_TYPES.put(debug3, debug2);
+        Type<T> debug4 = (Type<T>) GAME_RULE_TYPES.put(debug3, debug2); // MagmaCube - decompile fix
         if (debug4 != null) {
             throw new IllegalStateException("Duplicate game rule registration for " + debug0);
         }
@@ -132,8 +132,8 @@ public class GameRules {
     }
 
     private static <T extends Value<T>> void callVisitorCap(GameRuleTypeVisitor debug0, Key<?> debug1, Type<?> debug2) {
-        Key<?> debug3 = debug1;
-        Type<?> debug4 = debug2;
+        Key<T> debug3 = (Key)debug1; // MagmaCube - decompile fix
+        Type<T> debug4 = (Type)debug2; // MagmaCube - decompile fix
         debug0.visit(debug3, debug4);
         debug4.callVisitor(debug0, debug3);
     }
@@ -217,21 +217,11 @@ public class GameRules {
             this.onChanged(debug2);
         }
 
-        @Override
-        protected /* synthetic */ Value copy() {
-            return this.copy();
-        }
-
-        @Override
-        protected /* synthetic */ Value getSelf() {
-            return this.getSelf();
-        }
-
         static /* synthetic */ Type access$000(boolean debug0) {
             return BooleanValue.create(debug0);
         }
 
-        static /* synthetic */ Type access$200(boolean debug0, BiConsumer debug1) {
+        static /* synthetic */ Type access$200(boolean debug0, BiConsumer<MinecraftServer, BooleanValue> debug1) { // MagmaCube - decompile fix
             return BooleanValue.create(debug0, debug1);
         }
     }
@@ -315,16 +305,6 @@ public class GameRules {
             this.onChanged(debug2);
         }
 
-        @Override
-        protected /* synthetic */ Value copy() {
-            return this.copy();
-        }
-
-        @Override
-        protected /* synthetic */ Value getSelf() {
-            return this.getSelf();
-        }
-
         static /* synthetic */ Type access$100(int debug0) {
             return IntegerValue.create(debug0);
         }
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index c5185ec8e9867fa42d40671ba77dacde50ea6375..3013b2720b896c672bb1a741a4b36d210716c7c3 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -316,7 +316,7 @@ AutoCloseable {
                 try {
                     return String.format("ID #%s (%s // %s)", Registry.BLOCK.getKey(debug2), debug2.getDescriptionId(), debug2.getClass().getCanonicalName());
                 }
-                catch (Throwable debug1) {
+                catch (Throwable debug12) {
                     return "ID #" + Registry.BLOCK.getKey(debug2);
                 }
             });
@@ -663,7 +663,7 @@ AutoCloseable {
             for (int debug10 = debug6; debug10 < debug7; ++debug10) {
                 LevelChunk debug11 = this.getChunkSource().getChunk(debug9, debug10, false);
                 if (debug11 == null) continue;
-                debug11.getEntities(debug1, debug2, debug8, debug3);
+                debug11.getEntities(debug1, debug2, debug8, (Predicate) debug3); // MagmaCube - decompile fix
             }
         }
         return debug8;
@@ -990,10 +990,5 @@ AutoCloseable {
     public final boolean isDebug() {
         return this.isDebug;
     }
-
-    @Override
-    public /* synthetic */ ChunkAccess getChunk(int n, int n2) {
-        return this.getChunk(n, n2);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/LevelSettings.java b/src/main/java/net/minecraft/world/level/LevelSettings.java
index 016c21af1835b1e66d432315d472b0ef5bbcd452..4ab07c22e932784632d075eff60344c81f63fe1e 100644
--- a/src/main/java/net/minecraft/world/level/LevelSettings.java
+++ b/src/main/java/net/minecraft/world/level/LevelSettings.java
@@ -26,7 +26,7 @@ public final class LevelSettings
     
     public static LevelSettings parse(final Dynamic<?> debug0, final DataPackConfig debug1) {
         final GameType debug2 = GameType.byId(debug0.get("GameType").asInt(0));
-        return new LevelSettings(debug0.get("LevelName").asString(""), debug2, debug0.get("hardcore").asBoolean(false), debug0.get("Difficulty").asNumber().map(debug0 -> Difficulty.byId(debug0.byteValue())).result().orElse(Difficulty.NORMAL), debug0.get("allowCommands").asBoolean(debug2 == GameType.CREATIVE), new GameRules((DynamicLike<?>)debug0.get("GameRules")), debug1);
+        return new LevelSettings(debug0.get("LevelName").asString(""), debug2, debug0.get("hardcore").asBoolean(false), debug0.get("Difficulty").asNumber().map(debug0l -> Difficulty.byId(debug0l.byteValue())).result().orElse(Difficulty.NORMAL), debug0.get("allowCommands").asBoolean(debug2 == GameType.CREATIVE), new GameRules((DynamicLike<?>)debug0.get("GameRules")), debug1); // MagmaCube - decompile fix
     }
     
     public String levelName() {
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index b33f8988a317a8f1626a68a07aea1998e671841a..d0fb48b69bbaa1fb3d93b59ae322f23488222d3b 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -73,7 +73,8 @@ public final class NaturalSpawner {
             if (debug6 instanceof Mob && (((Mob)(debug7 = (Mob)debug6)).isPersistenceRequired() || ((Mob)debug7).requiresCustomPersistence()) || (debug7 = debug6.getType().getCategory()) == MobCategory.MISC) continue;
             BlockPos debug8 = debug6.blockPosition();
             long debug9 = ChunkPos.asLong(debug8.getX() >> 4, debug8.getZ() >> 4);
-            debug2.query(debug9, arg_0 -> NaturalSpawner.lambda$createState$2(debug8, debug6, debug3, debug4, (MobCategory)debug7, arg_0));
+            Object finalDebug = debug7; // MagmaCube - decompile fix
+            debug2.query(debug9, arg_0 -> NaturalSpawner.lambda$createState$2(debug8, debug6, debug3, debug4, (MobCategory) finalDebug, arg_0));
         }
         return new SpawnState(debug0, debug4, debug3);
     }
@@ -312,6 +313,7 @@ public final class NaturalSpawner {
                             LOGGER.warn("Failed to create mob", (Throwable)debug26);
                             continue;
                         }
+                        Mob debug26; // MagmaCube - decompile fix
                         ((Entity)debug25).moveTo(debug21, debug19.getY(), debug23, debug4.nextFloat() * 360.0f, 0.0f);
                         if (debug25 instanceof Mob && (debug26 = (Mob)debug25).checkSpawnRules(debug0, MobSpawnType.CHUNK_GENERATION) && debug26.checkSpawnObstruction(debug0)) {
                             debug11 = debug26.finalizeSpawn(debug0, debug0.getCurrentDifficultyAt(debug26.blockPosition()), MobSpawnType.CHUNK_GENERATION, debug11, null);
@@ -343,7 +345,7 @@ public final class NaturalSpawner {
             } while (debug0.getBlockState(debug5).isAir() && debug5.getY() > 0);
         }
         if (SpawnPlacements.getPlacementType(debug1) == SpawnPlacements.Type.ON_GROUND && debug0.getBlockState((BlockPos)(debug6 = debug5.below())).isPathfindable(debug0, (BlockPos)debug6, PathComputationType.LAND)) {
-            return debug6;
+            return debug5.below();
         }
         return debug5.immutable();
     }
@@ -409,7 +411,7 @@ public final class NaturalSpawner {
             BlockPos debug6 = debug1.blockPosition();
             double debug4 = debug6.equals(this.lastCheckedPos) && debug3 == this.lastCheckedType ? this.lastCharge : ((debug7 = NaturalSpawner.getRoughBiome(debug6, debug2).getMobSettings().getMobSpawnCost(debug3)) != null ? debug7.getCharge() : 0.0);
             this.spawnPotential.addCharge(debug6, debug4);
-            this.mobCategoryCounts.addTo((Object)debug3.getCategory(), 1);
+            this.mobCategoryCounts.addTo(debug3.getCategory(), 1); // MagmaCube - decompile fix
         }
 
         public int getSpawnableChunkCount() {
diff --git a/src/main/java/net/minecraft/world/level/PotentialCalculator.java b/src/main/java/net/minecraft/world/level/PotentialCalculator.java
index e9d8672944ef018b4258edc249fcfaa091bd69d1..74291983ed0feba76cdf92e0e3a9fa76a190d6c8 100644
--- a/src/main/java/net/minecraft/world/level/PotentialCalculator.java
+++ b/src/main/java/net/minecraft/world/level/PotentialCalculator.java
@@ -11,7 +11,7 @@ public class PotentialCalculator
     private final List<PointCharge> charges;
     
     public PotentialCalculator() {
-        this.charges = (List<PointCharge>)Lists.newArrayList();
+        this.charges = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     public void addCharge(final BlockPos debug1, final double debug2) {
diff --git a/src/main/java/net/minecraft/world/level/ServerTickList.java b/src/main/java/net/minecraft/world/level/ServerTickList.java
index 4ef6e2442bb2c7b202808378ca8c1bb77618589b..41b65009e776b4f93fe4557273f3a4301e6dbac1 100644
--- a/src/main/java/net/minecraft/world/level/ServerTickList.java
+++ b/src/main/java/net/minecraft/world/level/ServerTickList.java
@@ -41,10 +41,10 @@ public class ServerTickList<T> implements TickList<T>
     private final Consumer<TickNextTickData<T>> ticker;
     
     public ServerTickList(final ServerLevel debug1, final Predicate<T> debug2, final Function<T, ResourceLocation> debug3, final Consumer<TickNextTickData<T>> debug4) {
-        this.tickNextTickSet = (Set<TickNextTickData<T>>)Sets.newHashSet();
+        this.tickNextTickSet = Sets.newHashSet(); // MagmaCube - decompile fix
         this.tickNextTickList = (TreeSet<TickNextTickData<T>>)Sets.newTreeSet((Comparator)TickNextTickData.createTimeComparator());
-        this.currentlyTicking = (Queue<TickNextTickData<T>>)Queues.newArrayDeque();
-        this.alreadyTicked = (List<TickNextTickData<T>>)Lists.newArrayList();
+        this.currentlyTicking = Queues.newArrayDeque(); // MagmaCube - decompile fix
+        this.alreadyTicked = Lists.newArrayList(); // MagmaCube - decompile fix
         this.ignore = debug2;
         this.toId = debug3;
         this.level = debug1;
@@ -134,7 +134,7 @@ public class ServerTickList<T> implements TickList<T>
                     debug5.remove();
                 }
                 if (debug1 == null) {
-                    debug1 = (List<TickNextTickData<T>>)Lists.newArrayList();
+                    debug1 = Lists.newArrayList(); // MagmaCube - decompile fix
                 }
                 debug1.add(debug6);
             }
@@ -168,7 +168,7 @@ public class ServerTickList<T> implements TickList<T>
             debug5.putInt("z", debug4.pos.getZ());
             debug5.putInt("t", (int)(debug4.triggerTick - debug2));
             debug5.putInt("p", debug4.priority.getValue());
-            ((AbstractList<CompoundTag>)debug3).add(debug5);
+            debug3.add(debug5); // MagmaCube - decompile fix
         }
         return debug3;
     }
diff --git a/src/main/java/net/minecraft/world/level/StructureFeatureManager.java b/src/main/java/net/minecraft/world/level/StructureFeatureManager.java
index 3d62dc360483fe4d05e2a13e41bac290efd1dbf7..34dd9645bc961757195676c4f234b2bc0bb93c43 100644
--- a/src/main/java/net/minecraft/world/level/StructureFeatureManager.java
+++ b/src/main/java/net/minecraft/world/level/StructureFeatureManager.java
@@ -33,7 +33,7 @@ public class StructureFeatureManager
     }
     
     public Stream<? extends StructureStart<?>> startsForFeature(final SectionPos debug1, final StructureFeature<?> debug2) {
-        return this.level.getChunk(debug1.x(), debug1.z(), ChunkStatus.STRUCTURE_REFERENCES).getReferencesForFeature(debug2).stream().map(debug0 -> SectionPos.of(new ChunkPos(debug0), 0)).map(debug2 -> this.getStartForFeature(debug2, debug2, this.level.getChunk(debug2.x(), debug2.z(), ChunkStatus.STRUCTURE_STARTS))).filter(debug0 -> debug0 != null && debug0.isValid());
+        return this.level.getChunk(debug1.x(), debug1.z(), ChunkStatus.STRUCTURE_REFERENCES).getReferencesForFeature(debug2).stream().map(debug0 -> SectionPos.of(new ChunkPos(debug0), 0)).map(debug2l -> this.getStartForFeature(debug2l, debug2, this.level.getChunk(debug2l.x(), debug2l.z(), ChunkStatus.STRUCTURE_STARTS))).filter(debug0 -> debug0 != null && debug0.isValid()); // MagmaCube - decompile fix
     }
     
     @Nullable
@@ -54,6 +54,6 @@ public class StructureFeatureManager
     }
     
     public StructureStart<?> getStructureAt(final BlockPos debug1, final boolean debug2, final StructureFeature<?> debug3) {
-        return (StructureStart<?>)DataFixUtils.orElse((Optional)this.startsForFeature(SectionPos.of(debug1), debug3).filter(debug1 -> debug1.getBoundingBox().isInside(debug1)).filter(debug2 -> !debug2 || debug2.getPieces().stream().anyMatch(debug1 -> debug1.getBoundingBox().isInside(debug1))).findFirst(), (Object)StructureStart.INVALID_START);
+        return (StructureStart<?>)DataFixUtils.orElse((Optional)this.startsForFeature(SectionPos.of(debug1), debug3).filter(debug1l -> debug1l.getBoundingBox().isInside(debug1)).filter(debug2l -> !debug2 || debug2l.getPieces().stream().anyMatch(debug1ll -> debug1ll.getBoundingBox().isInside(debug1))).findFirst(), (Object)StructureStart.INVALID_START); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/TickNextTickData.java b/src/main/java/net/minecraft/world/level/TickNextTickData.java
index d24a86b2f3d0b73ebc6f48f0f00ec543653e0637..f53dc62ab2f0f6258a49c8db54c3da547c2bdbb6 100644
--- a/src/main/java/net/minecraft/world/level/TickNextTickData.java
+++ b/src/main/java/net/minecraft/world/level/TickNextTickData.java
@@ -39,7 +39,7 @@ public class TickNextTickData<T>
     }
     
     public static <T> Comparator<TickNextTickData<T>> createTimeComparator() {
-        return Comparator.comparingLong(debug0 -> debug0.triggerTick).thenComparing(debug0 -> debug0.priority).thenComparingLong(debug0 -> debug0.c);
+        return Comparator.<TickNextTickData<T>>comparingLong(debug0 -> debug0.triggerTick).thenComparing(debug0 -> debug0.priority).thenComparingLong(debug0 -> debug0.c); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/biome/AmbientAdditionsSettings.java b/src/main/java/net/minecraft/world/level/biome/AmbientAdditionsSettings.java
index a32e49c56177d6e6d470c42c33d0329283b25e3d..793945fc2fc776e393f11c1e87f7d64e16c2a23a 100644
--- a/src/main/java/net/minecraft/world/level/biome/AmbientAdditionsSettings.java
+++ b/src/main/java/net/minecraft/world/level/biome/AmbientAdditionsSettings.java
@@ -27,6 +27,6 @@ public class AmbientAdditionsSettings
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)SoundEvent.CODEC.fieldOf("sound").forGetter(debug0 -> debug0.soundEvent), (App)Codec.DOUBLE.fieldOf("tick_chance").forGetter(debug0 -> debug0.tickChance)).apply(debug0, (BiFunction)AmbientAdditionsSettings::new));
+        CODEC = RecordCodecBuilder.create(debug01 -> debug01.group(SoundEvent.CODEC.fieldOf("sound").forGetter(debug0 -> debug0.soundEvent), Codec.DOUBLE.fieldOf("tick_chance").forGetter(debug0 -> debug0.tickChance)).apply(debug01, AmbientAdditionsSettings::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/biome/AmbientMoodSettings.java b/src/main/java/net/minecraft/world/level/biome/AmbientMoodSettings.java
index 2d22e09e243ae20f99df6c69c6132a269f10a0ce..c07f7041e61aa04e7d2ad1346aaa499688a79668 100644
--- a/src/main/java/net/minecraft/world/level/biome/AmbientMoodSettings.java
+++ b/src/main/java/net/minecraft/world/level/biome/AmbientMoodSettings.java
@@ -40,7 +40,7 @@ public class AmbientMoodSettings
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)SoundEvent.CODEC.fieldOf("sound").forGetter(debug0 -> debug0.soundEvent), (App)Codec.INT.fieldOf("tick_delay").forGetter(debug0 -> debug0.tickDelay), (App)Codec.INT.fieldOf("block_search_extent").forGetter(debug0 -> debug0.blockSearchExtent), (App)Codec.DOUBLE.fieldOf("offset").forGetter(debug0 -> debug0.soundPositionOffset)).apply(debug0, AmbientMoodSettings::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(SoundEvent.CODEC.fieldOf("sound").forGetter(debug0l -> debug0l.soundEvent), Codec.INT.fieldOf("tick_delay").forGetter(debug0l -> debug0l.tickDelay), Codec.INT.fieldOf("block_search_extent").forGetter(debug0l -> debug0l.blockSearchExtent), Codec.DOUBLE.fieldOf("offset").forGetter(debug0l -> debug0l.soundPositionOffset)).apply(debug0, AmbientMoodSettings::new));
         LEGACY_CAVE_SETTINGS = new AmbientMoodSettings(SoundEvents.AMBIENT_CAVE, 6000, 8, 2.0);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/biome/AmbientParticleSettings.java b/src/main/java/net/minecraft/world/level/biome/AmbientParticleSettings.java
index 794b34ae4f3689ac09198184ddd669eb41a26803..fdcf276225157850cfdf0d70320107eb84b2174c 100644
--- a/src/main/java/net/minecraft/world/level/biome/AmbientParticleSettings.java
+++ b/src/main/java/net/minecraft/world/level/biome/AmbientParticleSettings.java
@@ -29,6 +29,6 @@ public class AmbientParticleSettings
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)ParticleTypes.CODEC.fieldOf("options").forGetter(debug0 -> debug0.options), (App)Codec.FLOAT.fieldOf("probability").forGetter(debug0 -> debug0.probability)).apply(debug0, (BiFunction)AmbientParticleSettings::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(ParticleTypes.CODEC.fieldOf("options").forGetter(debug0l -> debug0l.options), Codec.FLOAT.fieldOf("probability").forGetter(debug0l -> debug0l.probability)).apply(debug0, AmbientParticleSettings::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/biome/Biome.java b/src/main/java/net/minecraft/world/level/biome/Biome.java
index d6868f7212aec9c1b16b531e984c4b2ae2f5112d..1ad19c64e062e127ea0e0c9be54dca63e01cdd67 100644
--- a/src/main/java/net/minecraft/world/level/biome/Biome.java
+++ b/src/main/java/net/minecraft/world/level/biome/Biome.java
@@ -77,14 +77,14 @@ import org.apache.logging.log4j.Logger;
 
 public final class Biome {
     public static final Logger LOGGER = LogManager.getLogger();
-    public static final Codec<Biome> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)ClimateSettings.CODEC.forGetter(debug0 -> debug0.climateSettings), (App)BiomeCategory.CODEC.fieldOf("category").forGetter(debug0 -> debug0.biomeCategory), (App)Codec.FLOAT.fieldOf("depth").forGetter(debug0 -> Float.valueOf(debug0.depth)), (App)Codec.FLOAT.fieldOf("scale").forGetter(debug0 -> Float.valueOf(debug0.scale)), (App)BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter(debug0 -> debug0.specialEffects), (App)BiomeGenerationSettings.CODEC.forGetter(debug0 -> debug0.generationSettings), (App)MobSpawnSettings.CODEC.forGetter(debug0 -> debug0.mobSettings)).apply((Applicative)debug02, Biome::new));
-    public static final Codec<Biome> NETWORK_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)ClimateSettings.CODEC.forGetter(debug0 -> debug0.climateSettings), (App)BiomeCategory.CODEC.fieldOf("category").forGetter(debug0 -> debug0.biomeCategory), (App)Codec.FLOAT.fieldOf("depth").forGetter(debug0 -> Float.valueOf(debug0.depth)), (App)Codec.FLOAT.fieldOf("scale").forGetter(debug0 -> Float.valueOf(debug0.scale)), (App)BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter(debug0 -> debug0.specialEffects)).apply((Applicative)debug02, (debug0, debug1, debug2, debug3, debug4) -> new Biome((ClimateSettings)debug0, (BiomeCategory)debug1, debug2.floatValue(), debug3.floatValue(), (BiomeSpecialEffects)debug4, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY)));
+    public static final Codec<Biome> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(ClimateSettings.CODEC.forGetter(debug0 -> debug0.climateSettings), BiomeCategory.CODEC.fieldOf("category").forGetter(debug0 -> debug0.biomeCategory), Codec.FLOAT.fieldOf("depth").forGetter(debug0 -> Float.valueOf(debug0.depth)), Codec.FLOAT.fieldOf("scale").forGetter(debug0 -> Float.valueOf(debug0.scale)), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter(debug0 -> debug0.specialEffects), BiomeGenerationSettings.CODEC.forGetter(debug0 -> debug0.generationSettings), MobSpawnSettings.CODEC.forGetter(debug0 -> debug0.mobSettings)).apply(debug02, Biome::new)); // MagmaCube - decompile fix
+    public static final Codec<Biome> NETWORK_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(ClimateSettings.CODEC.forGetter(debug0 -> debug0.climateSettings), BiomeCategory.CODEC.fieldOf("category").forGetter(debug0 -> debug0.biomeCategory), Codec.FLOAT.fieldOf("depth").forGetter(debug0 -> Float.valueOf(debug0.depth)), Codec.FLOAT.fieldOf("scale").forGetter(debug0 -> Float.valueOf(debug0.scale)), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter(debug0 -> debug0.specialEffects)).apply(debug02, (debug0, debug1, debug2, debug3, debug4) -> new Biome((ClimateSettings)debug0, (BiomeCategory)debug1, debug2.floatValue(), debug3.floatValue(), (BiomeSpecialEffects)debug4, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY))); // MagmaCube - decompile fix
     public static final Codec<Supplier<Biome>> CODEC = RegistryFileCodec.create(Registry.BIOME_REGISTRY, DIRECT_CODEC);
     public static final Codec<List<Supplier<Biome>>> LIST_CODEC = RegistryFileCodec.homogeneousList(Registry.BIOME_REGISTRY, DIRECT_CODEC);
     private final Map<Integer, List<StructureFeature<?>>> structuresByStep = Registry.STRUCTURE_FEATURE.stream().collect(Collectors.groupingBy(debug0 -> debug0.step().ordinal()));
-    private static final PerlinSimplexNoise TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(1234L), (List<Integer>)ImmutableList.of((Object)0));
-    private static final PerlinSimplexNoise FROZEN_TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(3456L), (List<Integer>)ImmutableList.of((Object)-2, (Object)-1, (Object)0));
-    public static final PerlinSimplexNoise BIOME_INFO_NOISE = new PerlinSimplexNoise(new WorldgenRandom(2345L), (List<Integer>)ImmutableList.of((Object)0));
+    private static final PerlinSimplexNoise TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(1234L), ImmutableList.of(0)); // MagmaCube - decompile fix
+    private static final PerlinSimplexNoise FROZEN_TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(3456L), (List<Integer>)ImmutableList.of(-2, -1, 0)); // MagmaCube - decompile fix
+    public static final PerlinSimplexNoise BIOME_INFO_NOISE = new PerlinSimplexNoise(new WorldgenRandom(2345L), ImmutableList.of(0)); // MagmaCube - decompile fix
     private final ClimateSettings climateSettings;
     private final BiomeGenerationSettings generationSettings;
     private final MobSpawnSettings mobSettings;
@@ -207,7 +207,7 @@ public final class Biome {
                     }
                     catch (Exception debug19) {
                         CrashReport debug20 = CrashReport.forThrowable(debug19, "Feature placement");
-                        debug20.addCategory("Feature").setDetail("Id", Registry.STRUCTURE_FEATURE.getKey((StructureFeature<?>)debug14)).setDetail("Description", () -> Biome.lambda$generate$19((StructureFeature)debug14));
+                        debug20.addCategory("Feature").setDetail("Id", Registry.STRUCTURE_FEATURE.getKey((StructureFeature<?>)debug14)).setDetail("Description", debug14::toString);
                         throw new ReportedException(debug20);
                     }
                     ++debug11;
@@ -223,7 +223,7 @@ public final class Biome {
                 }
                 catch (Exception debug15) {
                     CrashReport debug16 = CrashReport.forThrowable(debug15, "Feature placement");
-                    debug16.addCategory("Feature").setDetail("Id", Registry.FEATURE.getKey((Feature<?>)((ConfiguredFeature)debug14).feature)).setDetail("Config", ((ConfiguredFeature)debug14).config).setDetail("Description", () -> Biome.lambda$generate$20((ConfiguredFeature)debug14));
+                    debug16.addCategory("Feature").setDetail("Id", Registry.FEATURE.getKey((Feature<?>)((ConfiguredFeature)debug14).feature)).setDetail("Config", ((ConfiguredFeature)debug14).config).setDetail("Description", debug14::toString);
                     throw new ReportedException(debug16);
                 }
                 ++debug11;
@@ -319,16 +319,8 @@ public final class Biome {
         return debug1 == null ? super.toString() : debug1.toString();
     }
 
-    private static /* synthetic */ String lambda$generate$20(ConfiguredFeature debug0) throws Exception {
-        return debug0.feature.toString();
-    }
-
-    private static /* synthetic */ String lambda$generate$19(StructureFeature debug0) throws Exception {
-        return debug0.toString();
-    }
-
     static class ClimateSettings {
-        public static final MapCodec<ClimateSettings> CODEC = RecordCodecBuilder.mapCodec(debug02 -> debug02.group((App)Precipitation.CODEC.fieldOf("precipitation").forGetter(debug0 -> debug0.precipitation), (App)Codec.FLOAT.fieldOf("temperature").forGetter(debug0 -> Float.valueOf(debug0.temperature)), (App)TemperatureModifier.CODEC.optionalFieldOf("temperature_modifier", (Object)TemperatureModifier.NONE).forGetter(debug0 -> debug0.temperatureModifier), (App)Codec.FLOAT.fieldOf("downfall").forGetter(debug0 -> Float.valueOf(debug0.downfall))).apply((Applicative)debug02, ClimateSettings::new));
+        public static final MapCodec<ClimateSettings> CODEC = RecordCodecBuilder.mapCodec(debug02 -> debug02.group(Precipitation.CODEC.fieldOf("precipitation").forGetter(debug0 -> debug0.precipitation), Codec.FLOAT.fieldOf("temperature").forGetter(debug0 -> Float.valueOf(debug0.temperature)), TemperatureModifier.CODEC.optionalFieldOf("temperature_modifier", TemperatureModifier.NONE).forGetter(debug0 -> debug0.temperatureModifier), Codec.FLOAT.fieldOf("downfall").forGetter(debug0 -> Float.valueOf(debug0.downfall))).apply(debug02, ClimateSettings::new)); // MagmaCube - decompile fix
         private final Precipitation precipitation;
         private final float temperature;
         private final TemperatureModifier temperatureModifier;
@@ -343,7 +335,7 @@ public final class Biome {
     }
 
     public static class ClimateParameters {
-        public static final Codec<ClimateParameters> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("temperature").forGetter(debug0 -> Float.valueOf(debug0.temperature)), (App)Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("humidity").forGetter(debug0 -> Float.valueOf(debug0.humidity)), (App)Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("altitude").forGetter(debug0 -> Float.valueOf(debug0.altitude)), (App)Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("weirdness").forGetter(debug0 -> Float.valueOf(debug0.weirdness)), (App)Codec.floatRange((float)0.0f, (float)1.0f).fieldOf("offset").forGetter(debug0 -> Float.valueOf(debug0.offset))).apply((Applicative)debug02, ClimateParameters::new));
+        public static final Codec<ClimateParameters> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("temperature").forGetter(debug0 -> Float.valueOf(debug0.temperature)), Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("humidity").forGetter(debug0 -> Float.valueOf(debug0.humidity)), Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("altitude").forGetter(debug0 -> Float.valueOf(debug0.altitude)), Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("weirdness").forGetter(debug0 -> Float.valueOf(debug0.weirdness)), Codec.floatRange((float)0.0f, (float)1.0f).fieldOf("offset").forGetter(debug0 -> Float.valueOf(debug0.offset))).apply((Applicative)debug02, ClimateParameters::new)); // MagmaCube - decompile fix
         private final float temperature;
         private final float humidity;
         private final float altitude;
diff --git a/src/main/java/net/minecraft/world/level/biome/BiomeGenerationSettings.java b/src/main/java/net/minecraft/world/level/biome/BiomeGenerationSettings.java
index b564f8f389b9e10761b3b95cfc2197b5b010b41a..4a92a8d67b3f228684b8d9590f53f9f9e1571805 100644
--- a/src/main/java/net/minecraft/world/level/biome/BiomeGenerationSettings.java
+++ b/src/main/java/net/minecraft/world/level/biome/BiomeGenerationSettings.java
@@ -51,8 +51,8 @@ import org.apache.logging.log4j.Logger;
 
 public class BiomeGenerationSettings {
     public static final Logger LOGGER = LogManager.getLogger();
-    public static final BiomeGenerationSettings EMPTY = new BiomeGenerationSettings(() -> SurfaceBuilders.NOPE, (Map<GenerationStep.Carving, List<Supplier<ConfiguredWorldCarver<?>>>>)ImmutableMap.of(), (List<List<Supplier<ConfiguredFeature<?, ?>>>>)ImmutableList.of(), (List<Supplier<ConfiguredStructureFeature<?, ?>>>)ImmutableList.of());
-    public static final MapCodec<BiomeGenerationSettings> CODEC = RecordCodecBuilder.mapCodec(debug02 -> debug02.group((App)ConfiguredSurfaceBuilder.CODEC.fieldOf("surface_builder").forGetter(debug0 -> debug0.surfaceBuilder), (App)Codec.simpleMap(GenerationStep.Carving.CODEC, (Codec)ConfiguredWorldCarver.LIST_CODEC.promotePartial(Util.prefix("Carver: ", ((Logger)LOGGER)::error)), (Keyable)StringRepresentable.keys(GenerationStep.Carving.values())).fieldOf("carvers").forGetter(debug0 -> debug0.carvers), (App)ConfiguredFeature.LIST_CODEC.promotePartial(Util.prefix("Feature: ", ((Logger)LOGGER)::error)).listOf().fieldOf("features").forGetter(debug0 -> debug0.features), (App)ConfiguredStructureFeature.LIST_CODEC.promotePartial(Util.prefix("Structure start: ", ((Logger)LOGGER)::error)).fieldOf("starts").forGetter(debug0 -> debug0.structureStarts)).apply((Applicative)debug02, BiomeGenerationSettings::new));
+    public static final BiomeGenerationSettings EMPTY = new BiomeGenerationSettings(() -> SurfaceBuilders.NOPE, ImmutableMap.of(), ImmutableList.of(), ImmutableList.of()); // MagmaCube - decompile fix
+    public static final MapCodec<BiomeGenerationSettings> CODEC = RecordCodecBuilder.<BiomeGenerationSettings>mapCodec(debug02 -> debug02.group(ConfiguredSurfaceBuilder.CODEC.fieldOf("surface_builder").forGetter(debug0 -> debug0.surfaceBuilder), Codec.simpleMap(GenerationStep.Carving.CODEC, ConfiguredWorldCarver.LIST_CODEC.promotePartial(Util.prefix("Carver: ", ((Logger)LOGGER)::error)), StringRepresentable.keys(GenerationStep.Carving.values())).fieldOf("carvers").forGetter(debug0 -> debug0.carvers), ConfiguredFeature.LIST_CODEC.promotePartial(Util.prefix("Feature: ", ((Logger)LOGGER)::error)).listOf().fieldOf("features").forGetter(debug0 -> debug0.features), ConfiguredStructureFeature.LIST_CODEC.promotePartial(Util.prefix("Structure start: ", ((Logger)LOGGER)::error)).fieldOf("starts").forGetter(debug0 -> debug0.structureStarts)).apply(debug02, BiomeGenerationSettings::new)); // MagmaCube - decompile fix
     private final Supplier<ConfiguredSurfaceBuilder<?>> surfaceBuilder;
     private final Map<GenerationStep.Carving, List<Supplier<ConfiguredWorldCarver<?>>>> carvers;
     private final List<List<Supplier<ConfiguredFeature<?, ?>>>> features;
@@ -68,7 +68,7 @@ public class BiomeGenerationSettings {
     }
 
     public List<Supplier<ConfiguredWorldCarver<?>>> getCarvers(GenerationStep.Carving debug1) {
-        return (List)this.carvers.getOrDefault(debug1, (List<Supplier<ConfiguredWorldCarver<?>>>)ImmutableList.of());
+        return (List)this.carvers.getOrDefault(debug1, ImmutableList.of()); // MagmaCube - decompile fix
     }
 
     public boolean isValidStart(StructureFeature<?> debug12) {
@@ -80,7 +80,7 @@ public class BiomeGenerationSettings {
     }
 
     public ConfiguredStructureFeature<?, ?> withBiomeConfig(ConfiguredStructureFeature<?, ?> debug12) {
-        return (ConfiguredStructureFeature)DataFixUtils.orElse(this.structureStarts.stream().map(Supplier::get).filter(debug1 -> debug1.feature == debug0.feature).findAny(), debug12);
+        return (ConfiguredStructureFeature)DataFixUtils.orElse(this.structureStarts.stream().map(Supplier::get).filter(debug1 -> debug1.feature == debug12.feature).findAny(), debug12); // MagmaCube - decompile fix
     }
 
     public List<ConfiguredFeature<?, ?>> getFlowerFeatures() {
diff --git a/src/main/java/net/minecraft/world/level/biome/BiomeSource.java b/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
index 010c232af93fdd106d0ad88e9015a44910efa791..aab4f807a055b55c659e2efd0b5faf61a8d74ea1 100644
--- a/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
@@ -122,7 +122,7 @@ implements BiomeManager.NoiseBiomeSource {
     }
 
     public boolean canGenerateStructure(StructureFeature<?> debug1) {
-        return this.supportedStructures.computeIfAbsent(debug1, debug12 -> this.possibleBiomes.stream().anyMatch(debug1 -> debug1.getGenerationSettings().isValidStart((StructureFeature<?>)debug12)));
+        return this.supportedStructures.computeIfAbsent(debug1, debug12 -> this.possibleBiomes.stream().anyMatch(debug1l -> debug1l.getGenerationSettings().isValidStart((StructureFeature<?>)debug12))); // MagmaCube - decompile fix
     }
 
     public Set<BlockState> getSurfaceBlocks() {
diff --git a/src/main/java/net/minecraft/world/level/biome/BiomeSpecialEffects.java b/src/main/java/net/minecraft/world/level/biome/BiomeSpecialEffects.java
index 64269e4f43adb6258da6bdd3baadcde0bad1d2c0..be27511f74210daef7ad6bbf248538eacda398c3 100644
--- a/src/main/java/net/minecraft/world/level/biome/BiomeSpecialEffects.java
+++ b/src/main/java/net/minecraft/world/level/biome/BiomeSpecialEffects.java
@@ -27,7 +27,7 @@ import net.minecraft.world.level.biome.AmbientParticleSettings;
 import net.minecraft.world.level.biome.Biome;
 
 public class BiomeSpecialEffects {
-    public static final Codec<BiomeSpecialEffects> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)Codec.INT.fieldOf("fog_color").forGetter(debug0 -> debug0.fogColor), (App)Codec.INT.fieldOf("water_color").forGetter(debug0 -> debug0.waterColor), (App)Codec.INT.fieldOf("water_fog_color").forGetter(debug0 -> debug0.waterFogColor), (App)Codec.INT.fieldOf("sky_color").forGetter(debug0 -> debug0.skyColor), (App)Codec.INT.optionalFieldOf("foliage_color").forGetter(debug0 -> debug0.foliageColorOverride), (App)Codec.INT.optionalFieldOf("grass_color").forGetter(debug0 -> debug0.grassColorOverride), (App)GrassColorModifier.CODEC.optionalFieldOf("grass_color_modifier", (Object)GrassColorModifier.NONE).forGetter(debug0 -> debug0.grassColorModifier), (App)AmbientParticleSettings.CODEC.optionalFieldOf("particle").forGetter(debug0 -> debug0.ambientParticleSettings), (App)SoundEvent.CODEC.optionalFieldOf("ambient_sound").forGetter(debug0 -> debug0.ambientLoopSoundEvent), (App)AmbientMoodSettings.CODEC.optionalFieldOf("mood_sound").forGetter(debug0 -> debug0.ambientMoodSettings), (App)AmbientAdditionsSettings.CODEC.optionalFieldOf("additions_sound").forGetter(debug0 -> debug0.ambientAdditionsSettings), (App)Music.CODEC.optionalFieldOf("music").forGetter(debug0 -> debug0.backgroundMusic)).apply((Applicative)debug02, BiomeSpecialEffects::new));
+    public static final Codec<BiomeSpecialEffects> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Codec.INT.fieldOf("fog_color").forGetter(debug0 -> debug0.fogColor), Codec.INT.fieldOf("water_color").forGetter(debug0 -> debug0.waterColor), Codec.INT.fieldOf("water_fog_color").forGetter(debug0 -> debug0.waterFogColor), Codec.INT.fieldOf("sky_color").forGetter(debug0 -> debug0.skyColor), Codec.INT.optionalFieldOf("foliage_color").forGetter(debug0 -> debug0.foliageColorOverride), Codec.INT.optionalFieldOf("grass_color").forGetter(debug0 -> debug0.grassColorOverride), GrassColorModifier.CODEC.optionalFieldOf("grass_color_modifier", GrassColorModifier.NONE).forGetter(debug0 -> debug0.grassColorModifier), AmbientParticleSettings.CODEC.optionalFieldOf("particle").forGetter(debug0 -> debug0.ambientParticleSettings), SoundEvent.CODEC.optionalFieldOf("ambient_sound").forGetter(debug0 -> debug0.ambientLoopSoundEvent), AmbientMoodSettings.CODEC.optionalFieldOf("mood_sound").forGetter(debug0 -> debug0.ambientMoodSettings), AmbientAdditionsSettings.CODEC.optionalFieldOf("additions_sound").forGetter(debug0 -> debug0.ambientAdditionsSettings), Music.CODEC.optionalFieldOf("music").forGetter(debug0 -> debug0.backgroundMusic)).apply(debug02, BiomeSpecialEffects::new)); // MagmaCube - decompile fix
     private final int fogColor;
     private final int waterColor;
     private final int waterFogColor;
diff --git a/src/main/java/net/minecraft/world/level/biome/CheckerboardColumnBiomeSource.java b/src/main/java/net/minecraft/world/level/biome/CheckerboardColumnBiomeSource.java
index 6013b2f43494bbbb2a9af9e4650cf6d44172da3d..6db21d75d9057bcc28032ef3a1024948864fe1e0 100644
--- a/src/main/java/net/minecraft/world/level/biome/CheckerboardColumnBiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/CheckerboardColumnBiomeSource.java
@@ -38,6 +38,6 @@ public class CheckerboardColumnBiomeSource extends BiomeSource
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Biome.LIST_CODEC.fieldOf("biomes").forGetter(debug0 -> debug0.allowedBiomes), (App)Codec.intRange(0, 62).fieldOf("scale").orElse((Object)2).forGetter(debug0 -> debug0.size)).apply(debug0, (BiFunction)CheckerboardColumnBiomeSource::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Biome.LIST_CODEC.fieldOf("biomes").forGetter(debug0l -> debug0l.allowedBiomes), Codec.intRange(0, 62).fieldOf("scale").orElse(2).forGetter(debug0l -> debug0l.size)).apply(debug0, CheckerboardColumnBiomeSource::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/biome/FixedBiomeSource.java b/src/main/java/net/minecraft/world/level/biome/FixedBiomeSource.java
index 96ddabcb21b5096cefaf0ff2f83f867bcfd26b68..3f90a01f53545de1de5e75d9de448312a007be78 100644
--- a/src/main/java/net/minecraft/world/level/biome/FixedBiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/FixedBiomeSource.java
@@ -22,7 +22,7 @@ public class FixedBiomeSource extends BiomeSource
     }
     
     public FixedBiomeSource(final Supplier<Biome> debug1) {
-        super((List<Biome>)ImmutableList.of((Object)debug1.get()));
+        super((List<Biome>)ImmutableList.of(debug1.get())); // MagmaCube - decompile fix
         this.biome = debug1;
     }
     
@@ -55,10 +55,10 @@ public class FixedBiomeSource extends BiomeSource
     
     @Override
     public Set<Biome> getBiomesWithin(final int debug1, final int debug2, final int debug3, final int debug4) {
-        return (Set<Biome>)Sets.newHashSet((Object[])new Biome[] { this.biome.get() });
+        return (Set<Biome>)Sets.newHashSet(new Biome[] { this.biome.get() }); // MagmaCube - decompile fix
     }
     
     static {
-        CODEC = Biome.CODEC.fieldOf("biome").xmap((Function)FixedBiomeSource::new, debug0 -> debug0.biome).stable().codec();
+        CODEC = Biome.CODEC.fieldOf("biome").xmap(FixedBiomeSource::new, debug0 -> debug0.biome).stable().codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java b/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
index 22d1dfe7635ebcb7ce6f45095009b87759b3176a..9e9f58005a01f37c746c0c05349a809c37b984ca 100644
--- a/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
+++ b/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
@@ -44,8 +44,8 @@ import org.apache.logging.log4j.Logger;
 
 public class MobSpawnSettings {
     public static final Logger LOGGER = LogManager.getLogger();
-    public static final MobSpawnSettings EMPTY = new MobSpawnSettings(0.1f, (Map)Stream.of(MobCategory.values()).collect(ImmutableMap.toImmutableMap(debug0 -> debug0, debug0 -> ImmutableList.of())), (Map<EntityType<?>, MobSpawnCost>)ImmutableMap.of(), false);
-    public static final MapCodec<MobSpawnSettings> CODEC = RecordCodecBuilder.mapCodec(debug02 -> debug02.group((App)Codec.FLOAT.optionalFieldOf("creature_spawn_probability", (Object)Float.valueOf(0.1f)).forGetter(debug0 -> Float.valueOf(debug0.creatureGenerationProbability)), (App)Codec.simpleMap(MobCategory.CODEC, (Codec)SpawnerData.CODEC.listOf().promotePartial(Util.prefix("Spawn data: ", ((Logger)LOGGER)::error)), (Keyable)StringRepresentable.keys(MobCategory.values())).fieldOf("spawners").forGetter(debug0 -> debug0.spawners), (App)Codec.simpleMap(Registry.ENTITY_TYPE, MobSpawnCost.CODEC, Registry.ENTITY_TYPE).fieldOf("spawn_costs").forGetter(debug0 -> debug0.mobSpawnCosts), (App)Codec.BOOL.fieldOf("player_spawn_friendly").orElse((Object)false).forGetter(MobSpawnSettings::playerSpawnFriendly)).apply((Applicative)debug02, MobSpawnSettings::new));
+    public static final MobSpawnSettings EMPTY = new MobSpawnSettings(0.1f, (Map)Stream.of(MobCategory.values()).collect(ImmutableMap.toImmutableMap(debug0 -> debug0, debug0 -> ImmutableList.of())), ImmutableMap.of(), false); // MagmaCube - decompile fix
+    public static final MapCodec<MobSpawnSettings> CODEC = RecordCodecBuilder.<MobSpawnSettings>mapCodec(debug02 -> debug02.group(Codec.FLOAT.optionalFieldOf("creature_spawn_probability", Float.valueOf(0.1f)).forGetter(debug0 -> Float.valueOf(debug0.creatureGenerationProbability)), Codec.simpleMap(MobCategory.CODEC, SpawnerData.CODEC.listOf().promotePartial(Util.prefix("Spawn data: ", ((Logger)LOGGER)::error)), StringRepresentable.keys(MobCategory.values())).fieldOf("spawners").forGetter(debug0 -> debug0.spawners), Codec.simpleMap(Registry.ENTITY_TYPE, MobSpawnCost.CODEC, Registry.ENTITY_TYPE).fieldOf("spawn_costs").forGetter(debug0 -> debug0.mobSpawnCosts), Codec.BOOL.fieldOf("player_spawn_friendly").orElse(false).forGetter(MobSpawnSettings::playerSpawnFriendly)).apply(debug02, MobSpawnSettings::new)); // MagmaCube - decompile fix
     private final float creatureGenerationProbability;
     private final Map<MobCategory, List<SpawnerData>> spawners;
     private final Map<EntityType<?>, MobSpawnCost> mobSpawnCosts;
@@ -59,7 +59,7 @@ public class MobSpawnSettings {
     }
 
     public List<SpawnerData> getMobs(MobCategory debug1) {
-        return this.spawners.getOrDefault(debug1, (List<SpawnerData>)ImmutableList.of());
+        return this.spawners.getOrDefault(debug1, ImmutableList.of()); // MagmaCube - decompile fix
     }
 
     @Nullable
@@ -102,12 +102,12 @@ public class MobSpawnSettings {
         }
 
         public MobSpawnSettings build() {
-            return new MobSpawnSettings(this.creatureGenerationProbability, (Map)this.spawners.entrySet().stream().collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, debug0 -> ImmutableList.copyOf((Collection)((Collection)debug0.getValue())))), (Map)ImmutableMap.copyOf(this.mobSpawnCosts), this.playerCanSpawn);
+            return new MobSpawnSettings(this.creatureGenerationProbability, this.spawners.entrySet().stream().collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, debug0 -> ImmutableList.copyOf(debug0.getValue()))), ImmutableMap.copyOf(this.mobSpawnCosts), this.playerCanSpawn); // MagmaCube - decompile fix
         }
     }
 
     public static class MobSpawnCost {
-        public static final Codec<MobSpawnCost> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)Codec.DOUBLE.fieldOf("energy_budget").forGetter(debug0 -> debug0.energyBudget), (App)Codec.DOUBLE.fieldOf("charge").forGetter(debug0 -> debug0.charge)).apply((Applicative)debug02, MobSpawnCost::new));
+        public static final Codec<MobSpawnCost> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Codec.DOUBLE.fieldOf("energy_budget").forGetter(debug0 -> debug0.energyBudget), Codec.DOUBLE.fieldOf("charge").forGetter(debug0 -> debug0.charge)).apply(debug02, MobSpawnCost::new)); // MagmaCube - decompile fix
         private final double energyBudget;
         private final double charge;
 
@@ -127,7 +127,7 @@ public class MobSpawnSettings {
 
     public static class SpawnerData
     extends WeighedRandom.WeighedRandomItem {
-        public static final Codec<SpawnerData> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)Registry.ENTITY_TYPE.fieldOf("type").forGetter(debug0 -> debug0.type), (App)Codec.INT.fieldOf("weight").forGetter(debug0 -> debug0.weight), (App)Codec.INT.fieldOf("minCount").forGetter(debug0 -> debug0.minCount), (App)Codec.INT.fieldOf("maxCount").forGetter(debug0 -> debug0.maxCount)).apply((Applicative)debug02, SpawnerData::new));
+        public static final Codec<SpawnerData> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Registry.ENTITY_TYPE.fieldOf("type").forGetter(debug0 -> debug0.type), Codec.INT.fieldOf("weight").forGetter(debug0 -> debug0.weight), Codec.INT.fieldOf("minCount").forGetter(debug0 -> debug0.minCount), Codec.INT.fieldOf("maxCount").forGetter(debug0 -> debug0.maxCount)).apply(debug02, SpawnerData::new)); // MagmaCube - decompile fix
         public final EntityType<?> type;
         public final int minCount;
         public final int maxCount;
diff --git a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
index b53cc24662a99270debaf5767967ca1403fb6106..c9860d632e88a734ee95c9fee6e6495d1f9242a3 100644
--- a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
@@ -57,7 +57,7 @@ public class MultiNoiseBiomeSource extends BiomeSource
     }
     
     private MultiNoiseBiomeSource(final long debug1, final List<Pair<Biome.ClimateParameters, Supplier<Biome>>> debug3, final NoiseParameters debug4, final NoiseParameters debug5, final NoiseParameters debug6, final NoiseParameters debug7, final Optional<Pair<Registry<Biome>, Preset>> debug8) {
-        super(debug3.stream().map((Function<? super Object, ? extends Supplier<Biome>>)Pair::getSecond));
+        super(debug3.stream().map(Pair::getSecond)); // MagmaCube - decompile fix
         this.seed = debug1;
         this.preset = debug8;
         this.temperatureParams = debug4;
@@ -90,7 +90,7 @@ public class MultiNoiseBiomeSource extends BiomeSource
     public Biome getNoiseBiome(final int debug1, final int debug2, final int debug3) {
         final int debug4 = this.useY ? debug2 : 0;
         final Biome.ClimateParameters debug5 = new Biome.ClimateParameters((float)this.temperatureNoise.getValue(debug1, debug4, debug3), (float)this.humidityNoise.getValue(debug1, debug4, debug3), (float)this.altitudeNoise.getValue(debug1, debug4, debug3), (float)this.weirdnessNoise.getValue(debug1, debug4, debug3), 0.0f);
-        return this.parameters.stream().min(Comparator.comparing(debug1 -> ((Biome.ClimateParameters)debug1.getFirst()).fitness(debug5))).map((Function<? super Object, ?>)Pair::getSecond).map((Function<? super Object, ? extends Biome>)Supplier::get).orElse(Biomes.THE_VOID);
+        return this.parameters.stream().min(Comparator.comparing(debug1l -> ((Biome.ClimateParameters)debug1l.getFirst()).fitness(debug5))).map(Pair::getSecond).map(Supplier::get).orElse(Biomes.THE_VOID); // MagmaCube - decompile fix
     }
     
     public boolean stable(final long debug1) {
@@ -98,9 +98,9 @@ public class MultiNoiseBiomeSource extends BiomeSource
     }
     
     static {
-        DEFAULT_NOISE_PARAMETERS = new NoiseParameters(-7, (List<Double>)ImmutableList.of((Object)1.0, (Object)1.0));
-        DIRECT_CODEC = RecordCodecBuilder.mapCodec(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.LONG.fieldOf("seed").forGetter(debug0 -> debug0.seed), (App)RecordCodecBuilder.create(debug0 -> debug0.group((App)Biome.ClimateParameters.CODEC.fieldOf("parameters").forGetter((Function)Pair::getFirst), (App)Biome.CODEC.fieldOf("biome").forGetter((Function)Pair::getSecond)).apply((Applicative)debug0, (BiFunction)Pair::of)).listOf().fieldOf("biomes").forGetter(debug0 -> debug0.parameters), (App)NoiseParameters.CODEC.fieldOf("temperature_noise").forGetter(debug0 -> debug0.temperatureParams), (App)NoiseParameters.CODEC.fieldOf("humidity_noise").forGetter(debug0 -> debug0.humidityParams), (App)NoiseParameters.CODEC.fieldOf("altitude_noise").forGetter(debug0 -> debug0.altitudeParams), (App)NoiseParameters.CODEC.fieldOf("weirdness_noise").forGetter(debug0 -> debug0.weirdnessParams)).apply(debug0, MultiNoiseBiomeSource::new));
-        CODEC = Codec.mapEither((MapCodec)PresetInstance.CODEC, (MapCodec)MultiNoiseBiomeSource.DIRECT_CODEC).xmap(debug0 -> (MultiNoiseBiomeSource)debug0.map((Function)PresetInstance::biomeSource, (Function)Function.identity()), debug0 -> debug0.preset().map((Function<? super PresetInstance, ?>)Either::left).orElseGet(() -> Either.right((Object)debug0))).codec();
+        DEFAULT_NOISE_PARAMETERS = new NoiseParameters(-7, ImmutableList.of(1.0, 1.0)); // MagmaCube - decompile fix
+        DIRECT_CODEC = RecordCodecBuilder.<MultiNoiseBiomeSource>mapCodec(debug0 -> debug0.group(Codec.LONG.fieldOf("seed").forGetter(debug0l -> debug0l.seed), RecordCodecBuilder.<Pair<Biome.ClimateParameters, Supplier<Biome>>>create(debug0l -> debug0l.group(Biome.ClimateParameters.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair::getSecond)).apply(debug0l, Pair::of)).listOf().fieldOf("biomes").forGetter(debug0l -> debug0l.parameters), NoiseParameters.CODEC.fieldOf("temperature_noise").forGetter(debug0l -> debug0l.temperatureParams), NoiseParameters.CODEC.fieldOf("humidity_noise").forGetter(debug0l -> debug0l.humidityParams), NoiseParameters.CODEC.fieldOf("altitude_noise").forGetter(debug0l -> debug0l.altitudeParams), NoiseParameters.CODEC.fieldOf("weirdness_noise").forGetter(debug0l -> debug0l.weirdnessParams)).apply(debug0, MultiNoiseBiomeSource::new)); // MagmaCube - decompile fix
+        CODEC = Codec.mapEither(PresetInstance.CODEC, MultiNoiseBiomeSource.DIRECT_CODEC).xmap(debug0 -> debug0.map(PresetInstance::biomeSource, Function.identity()), debug0l -> debug0l.preset().<Either>map(Either::left).orElseGet(() -> Either.right(debug0l))).codec(); // MagmaCube - decompile fix
     }
     
     static class NoiseParameters
@@ -123,7 +123,7 @@ public class MultiNoiseBiomeSource extends BiomeSource
         }
         
         static {
-            CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.INT.fieldOf("firstOctave").forGetter((Function)NoiseParameters::firstOctave), (App)Codec.DOUBLE.listOf().fieldOf("amplitudes").forGetter((Function)NoiseParameters::amplitudes)).apply(debug0, (BiFunction)NoiseParameters::new));
+            CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.INT.fieldOf("firstOctave").forGetter(NoiseParameters::firstOctave), Codec.DOUBLE.listOf().fieldOf("amplitudes").forGetter(NoiseParameters::amplitudes)).apply(debug0, NoiseParameters::new)); // MagmaCube - decompile fix
         }
     }
     
@@ -157,7 +157,7 @@ public class MultiNoiseBiomeSource extends BiomeSource
         }
         
         static {
-            CODEC = RecordCodecBuilder.mapCodec(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)ResourceLocation.CODEC.flatXmap(debug0 -> Optional.ofNullable(Preset.BY_NAME.get(debug0)).map((Function<? super Object, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unknown preset: " + debug0)), debug0 -> DataResult.success((Object)debug0.name)).fieldOf("preset").stable().forGetter((Function)PresetInstance::preset), (App)RegistryLookupCodec.create((ResourceKey<? extends Registry<Object>>)Registry.BIOME_REGISTRY).forGetter((Function)PresetInstance::biomes), (App)Codec.LONG.fieldOf("seed").stable().forGetter((Function)PresetInstance::seed)).apply(debug0, ((RecordCodecBuilder.Instance)debug0).stable((Object)PresetInstance::new)));
+            CODEC = RecordCodecBuilder.mapCodec(debug0 -> debug0.group(ResourceLocation.CODEC.flatXmap(debug0l -> Optional.ofNullable(Preset.BY_NAME.get(debug0l)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown preset: " + debug0l)), debug0l -> DataResult.success(debug0l.name)).fieldOf("preset").stable().forGetter(PresetInstance::preset), RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter(PresetInstance::biomes), Codec.LONG.fieldOf("seed").stable().forGetter(PresetInstance::seed)).apply(debug0, debug0.stable(PresetInstance::new))); // MagmaCube - decompile fix
         }
     }
     
@@ -175,12 +175,12 @@ public class MultiNoiseBiomeSource extends BiomeSource
         }
         
         public MultiNoiseBiomeSource biomeSource(final Registry<Biome> debug1, final long debug2) {
-            return (MultiNoiseBiomeSource)this.biomeSource.apply((Object)this, (Object)debug1, (Object)debug2);
+            return (MultiNoiseBiomeSource)this.biomeSource.apply(this, debug1, debug2); // MagmaCube - decompile fix
         }
         
         static {
             BY_NAME = Maps.newHashMap();
-            NETHER = new Preset(new ResourceLocation("nether"), (Function3<Preset, Registry<Biome>, Long, MultiNoiseBiomeSource>)((debug0, debug1, debug2) -> new MultiNoiseBiomeSource(debug2, (List)ImmutableList.of((Object)Pair.of((Object)new Biome.ClimateParameters(0.0f, 0.0f, 0.0f, 0.0f, 0.0f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.NETHER_WASTES)), (Object)Pair.of((Object)new Biome.ClimateParameters(0.0f, -0.5f, 0.0f, 0.0f, 0.0f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.SOUL_SAND_VALLEY)), (Object)Pair.of((Object)new Biome.ClimateParameters(0.4f, 0.0f, 0.0f, 0.0f, 0.0f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.CRIMSON_FOREST)), (Object)Pair.of((Object)new Biome.ClimateParameters(0.0f, 0.5f, 0.0f, 0.0f, 0.375f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.WARPED_FOREST)), (Object)Pair.of((Object)new Biome.ClimateParameters(-0.5f, 0.0f, 0.0f, 0.0f, 0.175f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.BASALT_DELTAS))), Optional.of(Pair.of((Object)debug1, (Object)debug0)), null)));
+            NETHER = new Preset(new ResourceLocation("nether"), ((debug0, debug1, debug2) -> new MultiNoiseBiomeSource(debug2, ImmutableList.of(Pair.<Biome.ClimateParameters, Supplier<Biome>>of(new Biome.ClimateParameters(0.0f, 0.0f, 0.0f, 0.0f, 0.0f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.NETHER_WASTES)), Pair.<Biome.ClimateParameters, Supplier<Biome>>of(new Biome.ClimateParameters(0.0f, -0.5f, 0.0f, 0.0f, 0.0f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.SOUL_SAND_VALLEY)), Pair.<Biome.ClimateParameters, Supplier<Biome>>of(new Biome.ClimateParameters(0.4f, 0.0f, 0.0f, 0.0f, 0.0f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.CRIMSON_FOREST)), Pair.<Biome.ClimateParameters, Supplier<Biome>>of(new Biome.ClimateParameters(0.0f, 0.5f, 0.0f, 0.0f, 0.375f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.WARPED_FOREST)), Pair.<Biome.ClimateParameters, Supplier<Biome>>of(new Biome.ClimateParameters(-0.5f, 0.0f, 0.0f, 0.0f, 0.175f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.BASALT_DELTAS))), Optional.of(Pair.of(debug1, debug0))))); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java b/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java
index df0b5748a772d1fe55777fd5fe061b0225de873d..31ce6e52eab432e5762859bf5221fd935cf3d503 100644
--- a/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java
@@ -31,7 +31,7 @@ public class TheEndBiomeSource extends BiomeSource
     }
     
     private TheEndBiomeSource(final Registry<Biome> debug1, final long debug2, final Biome debug4, final Biome debug5, final Biome debug6, final Biome debug7, final Biome debug8) {
-        super((List<Biome>)ImmutableList.of((Object)debug4, (Object)debug5, (Object)debug6, (Object)debug7, (Object)debug8));
+        super((List<Biome>)ImmutableList.of(debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
         this.biomes = debug1;
         this.seed = debug2;
         this.end = debug4;
@@ -103,6 +103,6 @@ public class TheEndBiomeSource extends BiomeSource
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)RegistryLookupCodec.create((ResourceKey<? extends Registry<Object>>)Registry.BIOME_REGISTRY).forGetter(debug0 -> debug0.biomes), (App)Codec.LONG.fieldOf("seed").stable().forGetter(debug0 -> debug0.seed)).apply(debug0, ((RecordCodecBuilder.Instance)debug0).stable((Object)TheEndBiomeSource::new)));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter(debug0l -> debug0l.biomes), Codec.LONG.fieldOf("seed").stable().forGetter(debug0l -> debug0l.seed)).apply(debug0, debug0.stable(TheEndBiomeSource::new))); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java
index a30cf92ecadb5372daa05dea4ed9a11c86d860bc..e450e2796719768e147c96a33d97cff3a33cadc9 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java
@@ -33,7 +33,7 @@ public abstract class AbstractFurnaceBlock extends BaseEntityBlock
     
     protected AbstractFurnaceBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)AbstractFurnaceBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)AbstractFurnaceBlock.LIT, false));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(AbstractFurnaceBlock.FACING, Direction.NORTH)).setValue(AbstractFurnaceBlock.LIT, false)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -49,7 +49,7 @@ public abstract class AbstractFurnaceBlock extends BaseEntityBlock
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)AbstractFurnaceBlock.FACING, debug1.getHorizontalDirection().getOpposite());
+        return (this.defaultBlockState()).setValue(AbstractFurnaceBlock.FACING, debug1.getHorizontalDirection().getOpposite()); // MagmaCube - decompile fix
     }
     
     @Override
@@ -93,7 +93,7 @@ public abstract class AbstractFurnaceBlock extends BaseEntityBlock
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)AbstractFurnaceBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)AbstractFurnaceBlock.FACING)));
+        return (debug1).setValue(AbstractFurnaceBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)AbstractFurnaceBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java b/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java
index 06b6ad0f6c0b1db4a167238021ec3d94c064732a..8340fb1e18163a1ff5688040632acad419cc329d 100644
--- a/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java
@@ -28,19 +28,19 @@ public class AttachedStemBlock extends BushBlock
     
     protected AttachedStemBlock(final StemGrownBlock debug1, final Properties debug2) {
         super(debug2);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)AttachedStemBlock.FACING, Direction.NORTH));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(AttachedStemBlock.FACING, Direction.NORTH)); // MagmaCube - decompile fix
         this.fruit = debug1;
     }
     
     @Override
     public VoxelShape getShape(final BlockState debug1, final BlockGetter debug2, final BlockPos debug3, final CollisionContext debug4) {
-        return AttachedStemBlock.AABBS.get(debug1.getValue((Property<Object>)AttachedStemBlock.FACING));
+        return AttachedStemBlock.AABBS.get(debug1.getValue(AttachedStemBlock.FACING)); // MagmaCube - decompile fix
     }
     
     @Override
     public BlockState updateShape(final BlockState debug1, final Direction debug2, final BlockState debug3, final LevelAccessor debug4, final BlockPos debug5, final BlockPos debug6) {
         if (!debug3.is(this.fruit) && debug2 == debug1.getValue((Property<Direction>)AttachedStemBlock.FACING)) {
-            return ((StateHolder<O, BlockState>)this.fruit.getStem().defaultBlockState()).setValue((Property<Comparable>)StemBlock.AGE, 7);
+            return (this.fruit.getStem().defaultBlockState()).setValue(StemBlock.AGE, 7); // MagmaCube - decompile fix
         }
         return super.updateShape(debug1, debug2, debug3, debug4, debug5, debug6);
     }
@@ -67,7 +67,7 @@ public class AttachedStemBlock extends BushBlock
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)AttachedStemBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)AttachedStemBlock.FACING)));
+        return (debug1).setValue(AttachedStemBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)AttachedStemBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BambooBlock.java b/src/main/java/net/minecraft/world/level/block/BambooBlock.java
index 3f70c30e6f0ae32efc6792ed4ddec6da157724ed..b5934c2a104a9cb2a0b7c682240c840762ec45a0 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooBlock.java
@@ -40,7 +40,7 @@ public class BambooBlock extends Block implements BonemealableBlock
     
     public BambooBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)BambooBlock.AGE, 0)).setValue(BambooBlock.LEAVES, BambooLeaves.NONE)).setValue((Property<Comparable>)BambooBlock.STAGE, 0));
+        this.registerDefaultState((((this.stateDefinition.any()).setValue(BambooBlock.AGE, 0)).setValue(BambooBlock.LEAVES, BambooLeaves.NONE)).setValue(BambooBlock.STAGE, 0)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -88,15 +88,15 @@ public class BambooBlock extends Block implements BonemealableBlock
             return null;
         }
         if (debug3.is(Blocks.BAMBOO_SAPLING)) {
-            return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)BambooBlock.AGE, 0);
+            return (this.defaultBlockState()).setValue(BambooBlock.AGE, 0); // MagmaCube - decompile fix
         }
         if (debug3.is(Blocks.BAMBOO)) {
             final int debug4 = (debug3.getValue((Property<Integer>)BambooBlock.AGE) > 0) ? 1 : 0;
-            return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)BambooBlock.AGE, debug4);
+            return (this.defaultBlockState()).setValue(BambooBlock.AGE, debug4); // MagmaCube - decompile fix
         }
         final BlockState debug5 = debug1.getLevel().getBlockState(debug1.getClickedPos().above());
         if (debug5.is(Blocks.BAMBOO) || debug5.is(Blocks.BAMBOO_SAPLING)) {
-            return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)BambooBlock.AGE, (Comparable)debug5.getValue((Property<V>)BambooBlock.AGE));
+            return (this.defaultBlockState()).setValue(BambooBlock.AGE, debug5.getValue(BambooBlock.AGE)); // MagmaCube - decompile fix
         }
         return Blocks.BAMBOO_SAPLING.defaultBlockState();
     }
@@ -137,7 +137,7 @@ public class BambooBlock extends Block implements BonemealableBlock
             debug4.getBlockTicks().scheduleTick(debug5, this, 1);
         }
         if (debug2 == Direction.UP && debug3.is(Blocks.BAMBOO) && debug3.getValue((Property<Integer>)BambooBlock.AGE) > debug1.getValue((Property<Integer>)BambooBlock.AGE)) {
-            debug4.setBlock(debug5, ((StateHolder<O, BlockState>)debug1).cycle((Property<Comparable>)BambooBlock.AGE), 2);
+            debug4.setBlock(debug5, (debug1).cycle(BambooBlock.AGE), 2); // MagmaCube - decompile fix
         }
         return super.updateShape(debug1, debug2, debug3, debug4, debug5, debug6);
     }
@@ -191,14 +191,14 @@ public class BambooBlock extends Block implements BonemealableBlock
             else if (debug6.is(Blocks.BAMBOO) && debug6.getValue(BambooBlock.LEAVES) != BambooLeaves.NONE) {
                 debug9 = BambooLeaves.LARGE;
                 if (debug8.is(Blocks.BAMBOO)) {
-                    debug2.setBlock(debug3.below(), ((StateHolder<O, BlockState>)debug6).setValue(BambooBlock.LEAVES, BambooLeaves.SMALL), 3);
-                    debug2.setBlock(debug7, ((StateHolder<O, BlockState>)debug8).setValue(BambooBlock.LEAVES, BambooLeaves.NONE), 3);
+                    debug2.setBlock(debug3.below(), (debug6).setValue(BambooBlock.LEAVES, BambooLeaves.SMALL), 3); // MagmaCube - decompile fix
+                    debug2.setBlock(debug7, (debug8).setValue(BambooBlock.LEAVES, BambooLeaves.NONE), 3); // MagmaCube - decompile fix
                 }
             }
         }
         final int debug10 = (debug1.getValue((Property<Integer>)BambooBlock.AGE) == 1 || debug8.is(Blocks.BAMBOO)) ? 1 : 0;
         final int debug11 = ((debug5 >= 11 && debug4.nextFloat() < 0.25f) || debug5 == 15) ? 1 : 0;
-        debug2.setBlock(debug3.above(), ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)BambooBlock.AGE, debug10)).setValue(BambooBlock.LEAVES, debug9)).setValue((Property<Comparable>)BambooBlock.STAGE, debug11), 3);
+        debug2.setBlock(debug3.above(), (((this.defaultBlockState()).setValue(BambooBlock.AGE, debug10)).setValue(BambooBlock.LEAVES, debug9)).setValue(BambooBlock.STAGE, debug11), 3); // MagmaCube - decompile fix
     }
     
     protected int getHeightAboveUpToMax(final BlockGetter debug1, final BlockPos debug2) {
diff --git a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
index 0ef3498ecfbddc9138af5034900fecda22d8197f..fa12982dd665d0d90ec475ceb9268ce60906b82c 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
@@ -95,7 +95,7 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock
     }
     
     protected void growBamboo(final Level debug1, final BlockPos debug2) {
-        debug1.setBlock(debug2.above(), ((StateHolder<O, BlockState>)Blocks.BAMBOO.defaultBlockState()).setValue(BambooBlock.LEAVES, BambooLeaves.SMALL), 3);
+        debug1.setBlock(debug2.above(), (Blocks.BAMBOO.defaultBlockState()).setValue(BambooBlock.LEAVES, BambooLeaves.SMALL), 3); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java b/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java
index a30b3c24d102d32f4daa9537a70eea732a4b3cdc..37d2a453596e26c3bafc6918f6a70c81174adee2 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java
@@ -29,7 +29,7 @@ public class BaseCoralPlantTypeBlock extends Block implements SimpleWaterloggedB
     
     protected BaseCoralPlantTypeBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)BaseCoralPlantTypeBlock.WATERLOGGED, true));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(BaseCoralPlantTypeBlock.WATERLOGGED, true)); // MagmaCube - decompile fix
     }
     
     protected void tryScheduleDieTick(final BlockState debug1, final LevelAccessor debug2, final BlockPos debug3) {
@@ -54,7 +54,7 @@ public class BaseCoralPlantTypeBlock extends Block implements SimpleWaterloggedB
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
         final FluidState debug2 = debug1.getLevel().getFluidState(debug1.getClickedPos());
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)BaseCoralPlantTypeBlock.WATERLOGGED, debug2.is(FluidTags.WATER) && debug2.getAmount() == 8);
+        return (this.defaultBlockState()).setValue(BaseCoralPlantTypeBlock.WATERLOGGED, debug2.is(FluidTags.WATER) && debug2.getAmount() == 8); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
index 79879038b7079acbbd85ae289b678dc9a5467604..fe1918c0a66777cb9310de38f986856bf8baf72c 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
@@ -27,17 +27,17 @@ public class BaseCoralWallFanBlock extends BaseCoralFanBlock
     
     protected BaseCoralWallFanBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)BaseCoralWallFanBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)BaseCoralWallFanBlock.WATERLOGGED, true));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(BaseCoralWallFanBlock.FACING, Direction.NORTH)).setValue(BaseCoralWallFanBlock.WATERLOGGED, true)); // MagmaCube - decompile fix
     }
     
     @Override
     public VoxelShape getShape(final BlockState debug1, final BlockGetter debug2, final BlockPos debug3, final CollisionContext debug4) {
-        return BaseCoralWallFanBlock.SHAPES.get(debug1.getValue((Property<Object>)BaseCoralWallFanBlock.FACING));
+        return BaseCoralWallFanBlock.SHAPES.get(debug1.getValue(BaseCoralWallFanBlock.FACING)); // MagmaCube - decompile fix
     }
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)BaseCoralWallFanBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)BaseCoralWallFanBlock.FACING)));
+        return (debug1).setValue(BaseCoralWallFanBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)BaseCoralWallFanBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
@@ -79,7 +79,7 @@ public class BaseCoralWallFanBlock extends BaseCoralFanBlock
         final Direction[] debug5 = nearestLookingDirections = debug1.getNearestLookingDirections();
         for (final Direction debug6 : nearestLookingDirections) {
             if (debug6.getAxis().isHorizontal()) {
-                debug2 = ((StateHolder<O, BlockState>)debug2).setValue((Property<Comparable>)BaseCoralWallFanBlock.FACING, debug6.getOpposite());
+                debug2 = (debug2).setValue(BaseCoralWallFanBlock.FACING, debug6.getOpposite()); // MagmaCube - decompile fix
                 if (debug2.canSurvive(debug3, debug4)) {
                     return debug2;
                 }
diff --git a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
index 0cc6ef9fd25a2a8ad230231a5cb9e23b2be8c1d8..2d835276ddb3854425fd94b741a8df591569d1fe 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
@@ -30,6 +30,6 @@ public abstract class BaseEntityBlock extends Block implements EntityBlock
     @Override
     public MenuProvider getMenuProvider(final BlockState debug1, final Level debug2, final BlockPos debug3) {
         final BlockEntity debug4 = debug2.getBlockEntity(debug3);
-        return (debug4 instanceof MenuProvider) ? debug4 : null;
+        return (debug4 instanceof MenuProvider) ? (MenuProvider) debug4 : null; // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java b/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
index 9dd60ce7770d1f40e6b93764bbbfe4c1a29bc071..b232f26fa5d8c46707c32c9100f44078c19d1939 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
@@ -144,7 +144,7 @@ public abstract class BaseRailBlock extends Block
         final BlockState debug2 = super.defaultBlockState();
         final Direction debug3 = debug1.getHorizontalDirection();
         final boolean debug4 = debug3 == Direction.EAST || debug3 == Direction.WEST;
-        return ((StateHolder<O, BlockState>)debug2).setValue(this.getShapeProperty(), debug4 ? RailShape.EAST_WEST : RailShape.NORTH_SOUTH);
+        return (debug2).setValue(this.getShapeProperty(), debug4 ? RailShape.EAST_WEST : RailShape.NORTH_SOUTH); // MagmaCube - decompile fix
     }
     
     public abstract Property<RailShape> getShapeProperty();
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index b8d41f330883436f80cf32239bae71c1010d5840..abebd152094d74def9f08a4a4e72338725877d77 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -165,7 +165,7 @@ public class Block extends BlockBehaviour implements ItemLike
         }
         final BlockStatePairKey debug6 = new BlockStatePairKey(debug0, debug5, debug3);
         final Object2ByteLinkedOpenHashMap<BlockStatePairKey> debug7 = Block.OCCLUSION_CACHE.get();
-        final byte debug8 = debug7.getAndMoveToFirst((Object)debug6);
+        final byte debug8 = debug7.getAndMoveToFirst(debug6); // MagmaCube - decompile fix
         if (debug8 != 127) {
             return debug8 != 0;
         }
@@ -175,7 +175,7 @@ public class Block extends BlockBehaviour implements ItemLike
         if (debug7.size() == 2048) {
             debug7.removeLastByte();
         }
-        debug7.putAndMoveToFirst((Object)debug6, (byte)(byte)(debug11 ? 1 : 0));
+        debug7.putAndMoveToFirst(debug6, (byte)(byte)(debug11 ? 1 : 0)); // MagmaCube - decompile fix
         return debug11;
     }
     
@@ -194,7 +194,7 @@ public class Block extends BlockBehaviour implements ItemLike
     }
     
     public static boolean isShapeFullBlock(final VoxelShape debug0) {
-        return (boolean)Block.SHAPE_FULL_BLOCK_CACHE.getUnchecked((Object)debug0);
+        return (boolean)Block.SHAPE_FULL_BLOCK_CACHE.getUnchecked(debug0); // MagmaCube - decompile fix
     }
     
     public boolean propagatesSkylightDown(final BlockState debug1, final BlockGetter debug2, final BlockPos debug3) {
@@ -219,21 +219,21 @@ public class Block extends BlockBehaviour implements ItemLike
     
     public static void dropResources(final BlockState debug0, final Level debug1, final BlockPos debug2) {
         if (debug1 instanceof ServerLevel) {
-            getDrops(debug0, (ServerLevel)debug1, debug2, null).forEach(debug2 -> popResource(debug1, debug2, debug2));
+            getDrops(debug0, (ServerLevel)debug1, debug2, null).forEach(debug22 -> popResource(debug1, debug2, debug22)); // MagmaCube - decompile fix
             debug0.spawnAfterBreak((ServerLevel)debug1, debug2, ItemStack.EMPTY);
         }
     }
     
     public static void dropResources(final BlockState debug0, final LevelAccessor debug1, final BlockPos debug2, @Nullable final BlockEntity debug3) {
         if (debug1 instanceof ServerLevel) {
-            getDrops(debug0, (ServerLevel)debug1, debug2, debug3).forEach(debug2 -> popResource((Level)debug1, debug2, debug2));
+            getDrops(debug0, (ServerLevel)debug1, debug2, debug3).forEach(debug22 -> popResource((Level)debug1, debug2, debug22)); // MagmaCube - decompile fix
             debug0.spawnAfterBreak((ServerLevel)debug1, debug2, ItemStack.EMPTY);
         }
     }
     
     public static void dropResources(final BlockState debug0, final Level debug1, final BlockPos debug2, @Nullable final BlockEntity debug3, final Entity debug4, final ItemStack debug5) {
         if (debug1 instanceof ServerLevel) {
-            getDrops(debug0, (ServerLevel)debug1, debug2, debug3, debug4, debug5).forEach(debug2 -> popResource(debug1, debug2, debug2));
+            getDrops(debug0, (ServerLevel)debug1, debug2, debug3, debug4, debug5).forEach(debug22 -> popResource(debug1, debug2, debug22)); // MagmaCube - decompile fix
             debug0.spawnAfterBreak((ServerLevel)debug1, debug2, debug5);
         }
     }
@@ -394,9 +394,8 @@ public class Block extends BlockBehaviour implements ItemLike
                 return !Shapes.joinIsNotEmpty(Shapes.block(), debug1, BooleanOp.NOT_SAME);
             }
         });
-        final Object2ByteLinkedOpenHashMap<BlockStatePairKey> debug0;
         OCCLUSION_CACHE = ThreadLocal.withInitial(() -> {
-            debug0 = new Object2ByteLinkedOpenHashMap<BlockStatePairKey>(2048, 0.25f) {
+            Object2ByteLinkedOpenHashMap<BlockStatePairKey> debug0 = new Object2ByteLinkedOpenHashMap<BlockStatePairKey>(2048, 0.25f) { // MagmaCube - decompile fix
                 protected void rehash(final int debug1) {
                 }
             };
diff --git a/src/main/java/net/minecraft/world/level/block/Blocks.java b/src/main/java/net/minecraft/world/level/block/Blocks.java
index 15d3f799a118371795e4d8677c38bace13b5542d..eb440c03ee1daa8d60270acad3389067cafa37ae 100644
--- a/src/main/java/net/minecraft/world/level/block/Blocks.java
+++ b/src/main/java/net/minecraft/world/level/block/Blocks.java
@@ -848,15 +848,13 @@ public class Blocks
     }
     
     private static ShulkerBoxBlock shulkerBox(final DyeColor debug0, final BlockBehaviour.Properties debug1) {
-        final BlockEntity debug4;
-        final ShulkerBoxBlockEntity debug5;
-        final BlockBehaviour.StatePredicate debug3 = (debug0, debug1, debug2) -> {
-            debug4 = debug1.getBlockEntity(debug2);
+        final BlockBehaviour.StatePredicate debug3 = (debug0l, debug1l, debug2) -> { // MagmaCube - decompile fix
+            BlockEntity debug4 = debug1l.getBlockEntity(debug2); // MagmaCube - decompile fix
             if (!(debug4 instanceof ShulkerBoxBlockEntity)) {
                 return true;
             }
             else {
-                debug5 = (ShulkerBoxBlockEntity)debug4;
+                ShulkerBoxBlockEntity debug5 = (ShulkerBoxBlockEntity)debug4; // MagmaCube - decompile fix
                 return debug5.isClosed();
             }
         };
@@ -864,7 +862,7 @@ public class Blocks
     }
     
     private static PistonBaseBlock pistonBase(final boolean debug0) {
-        final BlockBehaviour.StatePredicate debug = (debug0, debug1, debug2) -> !debug0.getValue((Property<Boolean>)PistonBaseBlock.EXTENDED);
+        final BlockBehaviour.StatePredicate debug = (debug0l, debug1, debug2) -> !debug0l.getValue((Property<Boolean>)PistonBaseBlock.EXTENDED); // MagmaCube - decompile fix
         return new PistonBaseBlock(debug0, BlockBehaviour.Properties.of(Material.PISTON).strength(1.5f).isRedstoneConductor(Blocks::never).isSuffocating(debug).isViewBlocking(debug));
     }
     
diff --git a/src/main/java/net/minecraft/world/level/block/BrewingStandBlock.java b/src/main/java/net/minecraft/world/level/block/BrewingStandBlock.java
index 701fbd637f53ee4b8a1b57109584f8d8045e9110..7da36e368a4aacfa156eb7c9abf2dbf2d77a8286 100644
--- a/src/main/java/net/minecraft/world/level/block/BrewingStandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BrewingStandBlock.java
@@ -38,7 +38,7 @@ public class BrewingStandBlock extends BaseEntityBlock
     
     public BrewingStandBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)BrewingStandBlock.HAS_BOTTLE[0], false)).setValue((Property<Comparable>)BrewingStandBlock.HAS_BOTTLE[1], false)).setValue((Property<Comparable>)BrewingStandBlock.HAS_BOTTLE[2], false));
+        this.registerDefaultState((((this.stateDefinition.any()).setValue(BrewingStandBlock.HAS_BOTTLE[0], false)).setValue(BrewingStandBlock.HAS_BOTTLE[1], false)).setValue(BrewingStandBlock.HAS_BOTTLE[2], false)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java b/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
index 75511a2de069be0a8b542215b1f638e71d3a469a..55f5b1cbc05dffe67af66a65360187375d0ed6b2 100644
--- a/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
@@ -33,7 +33,7 @@ public class BubbleColumnBlock extends Block implements BucketPickup
     
     public BubbleColumnBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)BubbleColumnBlock.DRAG_DOWN, true));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(BubbleColumnBlock.DRAG_DOWN, true)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -71,7 +71,7 @@ public class BubbleColumnBlock extends Block implements BucketPickup
     
     public static void growColumn(final LevelAccessor debug0, final BlockPos debug1, final boolean debug2) {
         if (canExistIn(debug0, debug1)) {
-            debug0.setBlock(debug1, ((StateHolder<O, BlockState>)Blocks.BUBBLE_COLUMN.defaultBlockState()).setValue((Property<Comparable>)BubbleColumnBlock.DRAG_DOWN, debug2), 2);
+            debug0.setBlock(debug1, (Blocks.BUBBLE_COLUMN.defaultBlockState()).setValue(BubbleColumnBlock.DRAG_DOWN, debug2), 2); // MagmaCube - decompile fix
         }
     }
     
@@ -114,7 +114,7 @@ public class BubbleColumnBlock extends Block implements BucketPickup
             return Blocks.WATER.defaultBlockState();
         }
         if (debug2 == Direction.DOWN) {
-            debug4.setBlock(debug5, ((StateHolder<O, BlockState>)Blocks.BUBBLE_COLUMN.defaultBlockState()).setValue((Property<Comparable>)BubbleColumnBlock.DRAG_DOWN, getDrag(debug4, debug6)), 2);
+            debug4.setBlock(debug5, (Blocks.BUBBLE_COLUMN.defaultBlockState()).setValue(BubbleColumnBlock.DRAG_DOWN, getDrag(debug4, debug6)), 2); // MagmaCube - decompile fix
         }
         else if (debug2 == Direction.UP && !debug3.is(Blocks.BUBBLE_COLUMN) && canExistIn(debug4, debug6)) {
             debug4.getBlockTicks().scheduleTick(debug5, this, 5);
diff --git a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
index 323783873de372c83ec6d0e6db088161d99fca53..07e851f037ba37c5d1d523239fc45e9dba419a06 100644
--- a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
@@ -52,7 +52,7 @@ public abstract class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock
     
     protected ButtonBlock(final boolean debug1, final Properties debug2) {
         super(debug2);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)ButtonBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)ButtonBlock.POWERED, false)).setValue(ButtonBlock.FACE, AttachFace.WALL));
+        this.registerDefaultState((((this.stateDefinition.any()).setValue(ButtonBlock.FACING, Direction.NORTH)).setValue(ButtonBlock.POWERED, false)).setValue(ButtonBlock.FACE, AttachFace.WALL)); // MagmaCube - decompile fix
         this.sensitive = debug1;
     }
     
@@ -86,7 +86,6 @@ public abstract class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock
                         return debug6 ? ButtonBlock.PRESSED_NORTH_AABB : ButtonBlock.NORTH_AABB;
                     }
                 }
-                break;
             }
             default: {
                 if (debug5.getAxis() == Direction.Axis.X) {
@@ -108,7 +107,7 @@ public abstract class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock
     }
     
     public void press(final BlockState debug1, final Level debug2, final BlockPos debug3) {
-        debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)ButtonBlock.POWERED, true), 3);
+        debug2.setBlock(debug3, (debug1).setValue(ButtonBlock.POWERED, true), 3); // MagmaCube - decompile fix
         this.updateNeighbours(debug1, debug2, debug3);
         debug2.getBlockTicks().scheduleTick(debug3, this, this.getPressDuration());
     }
@@ -157,7 +156,7 @@ public abstract class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock
             this.checkPressed(debug1, debug2, debug3);
         }
         else {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)ButtonBlock.POWERED, false), 3);
+            debug2.setBlock(debug3, (debug1).setValue(ButtonBlock.POWERED, false), 3); // MagmaCube - decompile fix
             this.updateNeighbours(debug1, debug2, debug3);
             this.playSound(null, debug2, debug3, false);
         }
@@ -176,7 +175,7 @@ public abstract class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock
         final boolean debug5 = !debug4.isEmpty();
         final boolean debug6 = debug1.getValue((Property<Boolean>)ButtonBlock.POWERED);
         if (debug5 != debug6) {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)ButtonBlock.POWERED, debug5), 3);
+            debug2.setBlock(debug3, (debug1).setValue(ButtonBlock.POWERED, debug5), 3); // MagmaCube - decompile fix
             this.updateNeighbours(debug1, debug2, debug3);
             this.playSound(null, debug2, debug3, debug5);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/CactusBlock.java b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
index c2358241f306f89f862c4c1840298eb4029f010b..50d6853b0a05ebe85d3604b938557c656b29f5c0 100644
--- a/src/main/java/net/minecraft/world/level/block/CactusBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
@@ -34,7 +34,7 @@ public class CactusBlock extends Block
     
     protected CactusBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)CactusBlock.AGE, 0));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(CactusBlock.AGE, 0)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -58,12 +58,12 @@ public class CactusBlock extends Block
         final int debug7 = debug1.getValue((Property<Integer>)CactusBlock.AGE);
         if (debug7 == 15) {
             debug2.setBlockAndUpdate(debug5, this.defaultBlockState());
-            final BlockState debug8 = ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)CactusBlock.AGE, 0);
+            final BlockState debug8 = (debug1).setValue(CactusBlock.AGE, 0); // MagmaCube - decompile fix
             debug2.setBlock(debug3, debug8, 4);
             debug8.neighborChanged(debug2, debug5, this, debug3, false);
         }
         else {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)CactusBlock.AGE, debug7 + 1), 4);
+            debug2.setBlock(debug3, (debug1).setValue(CactusBlock.AGE, debug7 + 1), 4); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
index a7f8798eab5858c63cf7f9304eda93af4c4d1f0c..ab8b706dec284ab652f503554cb2fd27658c5c1b 100644
--- a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
@@ -64,7 +64,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
         super(debug3);
         this.spawnParticles = debug1;
         this.fireDamage = debug2;
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)CampfireBlock.LIT, true)).setValue((Property<Comparable>)CampfireBlock.SIGNAL_FIRE, false)).setValue((Property<Comparable>)CampfireBlock.WATERLOGGED, false)).setValue((Property<Comparable>)CampfireBlock.FACING, Direction.NORTH));
+        this.registerDefaultState(((this.stateDefinition.any().setValue(CampfireBlock.LIT, true).setValue(CampfireBlock.SIGNAL_FIRE, false)).setValue(CampfireBlock.WATERLOGGED, false)).setValue(CampfireBlock.FACING, Direction.NORTH)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -111,7 +111,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
         final LevelAccessor debug2 = debug1.getLevel();
         final BlockPos debug3 = debug1.getClickedPos();
         final boolean debug4 = debug2.getFluidState(debug3).getType() == Fluids.WATER;
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)CampfireBlock.WATERLOGGED, debug4)).setValue((Property<Comparable>)CampfireBlock.SIGNAL_FIRE, this.isSmokeSource(debug2.getBlockState(debug3.below())))).setValue((Property<Comparable>)CampfireBlock.LIT, !debug4)).setValue((Property<Comparable>)CampfireBlock.FACING, debug1.getHorizontalDirection());
+        return ((((this.defaultBlockState()).setValue(CampfireBlock.WATERLOGGED, debug4)).setValue(CampfireBlock.SIGNAL_FIRE, this.isSmokeSource(debug2.getBlockState(debug3.below())))).setValue(CampfireBlock.LIT, !debug4)).setValue(CampfireBlock.FACING, debug1.getHorizontalDirection()); // MagmaCube - decompile fix
     }
     
     @Override
@@ -120,7 +120,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
             debug4.getLiquidTicks().scheduleTick(debug5, Fluids.WATER, Fluids.WATER.getTickDelay(debug4));
         }
         if (debug2 == Direction.DOWN) {
-            return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)CampfireBlock.SIGNAL_FIRE, this.isSmokeSource(debug3));
+            return (debug1).setValue(CampfireBlock.SIGNAL_FIRE, this.isSmokeSource(debug3)); // MagmaCube - decompile fix
         }
         return super.updateShape(debug1, debug2, debug3, debug4, debug5, debug6);
     }
@@ -176,7 +176,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
                 }
                 dowse(debug1, debug2, debug3);
             }
-            debug1.setBlock(debug2, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug3).setValue((Property<Comparable>)CampfireBlock.WATERLOGGED, true)).setValue((Property<Comparable>)CampfireBlock.LIT, false), 3);
+            debug1.setBlock(debug2, ((debug3).setValue(CampfireBlock.WATERLOGGED, true)).setValue(CampfireBlock.LIT, false), 3); // MagmaCube - decompile fix
             debug1.getLiquidTicks().scheduleTick(debug2, debug4.getType(), debug4.getType().getTickDelay(debug1));
             return true;
         }
@@ -190,7 +190,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
             final boolean debug6 = debug5 == null || debug5 instanceof Player || debug1.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING);
             if (debug6 && !debug2.getValue((Property<Boolean>)CampfireBlock.LIT) && !debug2.getValue((Property<Boolean>)CampfireBlock.WATERLOGGED)) {
                 final BlockPos debug7 = debug3.getBlockPos();
-                debug1.setBlock(debug7, ((StateHolder<O, BlockState>)debug2).setValue((Property<Comparable>)BlockStateProperties.LIT, true), 11);
+                debug1.setBlock(debug7, (debug2).setValue(BlockStateProperties.LIT, true), 11); // MagmaCube - decompile fix
             }
         }
     }
@@ -221,7 +221,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     }
     
     public static boolean isLitCampfire(final BlockState debug0) {
-        return debug0.hasProperty((Property<Comparable>)CampfireBlock.LIT) && debug0.is(BlockTags.CAMPFIRES) && debug0.getValue((Property<Boolean>)CampfireBlock.LIT);
+        return debug0.hasProperty(CampfireBlock.LIT) && debug0.is(BlockTags.CAMPFIRES) && debug0.getValue((Property<Boolean>)CampfireBlock.LIT); // MagmaCube - decompile fix
     }
     
     @Override
@@ -234,7 +234,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)CampfireBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)CampfireBlock.FACING)));
+        return (debug1).setValue(CampfireBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)CampfireBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
@@ -258,7 +258,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     }
     
     public static boolean canLight(final BlockState debug0) {
-        return debug0.is(BlockTags.CAMPFIRES, debug0 -> debug0.hasProperty((Property<Comparable>)BlockStateProperties.WATERLOGGED) && debug0.hasProperty((Property<Comparable>)BlockStateProperties.LIT)) && !debug0.getValue((Property<Boolean>)BlockStateProperties.WATERLOGGED) && !debug0.getValue((Property<Boolean>)BlockStateProperties.LIT);
+        return debug0.is(BlockTags.CAMPFIRES, debug0l -> debug0l.hasProperty(BlockStateProperties.WATERLOGGED) && debug0l.hasProperty(BlockStateProperties.LIT)) && !debug0.getValue((Property<Boolean>)BlockStateProperties.WATERLOGGED) && !debug0.getValue((Property<Boolean>)BlockStateProperties.LIT); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/world/level/block/ChainBlock.java b/src/main/java/net/minecraft/world/level/block/ChainBlock.java
index cb4fb26f42c28c5ee4dcd6e3d0de6373ecc04053..c0171931ccf403a43581d7f546eaf817354f5c60 100644
--- a/src/main/java/net/minecraft/world/level/block/ChainBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChainBlock.java
@@ -29,7 +29,7 @@ public class ChainBlock extends RotatedPillarBlock implements SimpleWaterloggedB
     
     public ChainBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)ChainBlock.WATERLOGGED, false)).setValue(ChainBlock.AXIS, Direction.Axis.Y));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(ChainBlock.WATERLOGGED, false)).setValue(ChainBlock.AXIS, Direction.Axis.Y)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -52,7 +52,7 @@ public class ChainBlock extends RotatedPillarBlock implements SimpleWaterloggedB
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
         final FluidState debug2 = debug1.getLevel().getFluidState(debug1.getClickedPos());
         final boolean debug3 = debug2.getType() == Fluids.WATER;
-        return ((StateHolder<O, BlockState>)super.getStateForPlacement(debug1)).setValue((Property<Comparable>)ChainBlock.WATERLOGGED, debug3);
+        return (super.getStateForPlacement(debug1)).setValue(ChainBlock.WATERLOGGED, debug3); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
index 4e8234482748b014eff15afe7fe5fdbf31207f4c..3eb9316fa371cfd15cf65e3875d2337c136f617d 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
@@ -32,7 +32,7 @@ public class ChorusFlowerBlock extends Block
     protected ChorusFlowerBlock(final ChorusPlantBlock debug1, final Properties debug2) {
         super(debug2);
         this.plant = debug1;
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)ChorusFlowerBlock.AGE, 0));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(ChorusFlowerBlock.AGE, 0)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -119,12 +119,12 @@ public class ChorusFlowerBlock extends Block
     }
     
     private void placeGrownFlower(final Level debug1, final BlockPos debug2, final int debug3) {
-        debug1.setBlock(debug2, ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)ChorusFlowerBlock.AGE, debug3), 2);
+        debug1.setBlock(debug2, (this.defaultBlockState()).setValue(ChorusFlowerBlock.AGE, debug3), 2); // MagmaCube - decompile fix
         debug1.levelEvent(1033, debug2, 0);
     }
     
     private void placeDeadFlower(final Level debug1, final BlockPos debug2) {
-        debug1.setBlock(debug2, ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)ChorusFlowerBlock.AGE, 5), 2);
+        debug1.setBlock(debug2, (this.defaultBlockState()).setValue(ChorusFlowerBlock.AGE, 5), 2); // MagmaCube - decompile fix
         debug1.levelEvent(1034, debug2, 0);
     }
     
@@ -219,7 +219,7 @@ public class ChorusFlowerBlock extends Block
             }
         }
         if (!debug10) {
-            debug0.setBlock(debug1.above(debug7), ((StateHolder<O, BlockState>)Blocks.CHORUS_FLOWER.defaultBlockState()).setValue((Property<Comparable>)ChorusFlowerBlock.AGE, 5), 2);
+            debug0.setBlock(debug1.above(debug7), (Blocks.CHORUS_FLOWER.defaultBlockState()).setValue(ChorusFlowerBlock.AGE, 5), 2); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
index 28b369ad43946ee11d8e6aa2cd4e37aef284b0b6..e024aeb6991e6473b18be188705df9f94abcaa1f 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
@@ -21,7 +21,7 @@ public class ChorusPlantBlock extends PipeBlock
 {
     protected ChorusPlantBlock(final Properties debug1) {
         super(0.3125f, debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)ChorusPlantBlock.NORTH, false)).setValue((Property<Comparable>)ChorusPlantBlock.EAST, false)).setValue((Property<Comparable>)ChorusPlantBlock.SOUTH, false)).setValue((Property<Comparable>)ChorusPlantBlock.WEST, false)).setValue((Property<Comparable>)ChorusPlantBlock.UP, false)).setValue((Property<Comparable>)ChorusPlantBlock.DOWN, false));
+        this.registerDefaultState(((((((this.stateDefinition.any()).setValue(ChorusPlantBlock.NORTH, false)).setValue(ChorusPlantBlock.EAST, false)).setValue(ChorusPlantBlock.SOUTH, false)).setValue(ChorusPlantBlock.WEST, false)).setValue(ChorusPlantBlock.UP, false)).setValue(ChorusPlantBlock.DOWN, false)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -36,7 +36,7 @@ public class ChorusPlantBlock extends PipeBlock
         final Block debug6 = debug1.getBlockState(debug2.east()).getBlock();
         final Block debug7 = debug1.getBlockState(debug2.south()).getBlock();
         final Block debug8 = debug1.getBlockState(debug2.west()).getBlock();
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)ChorusPlantBlock.DOWN, debug3 == this || debug3 == Blocks.CHORUS_FLOWER || debug3 == Blocks.END_STONE)).setValue((Property<Comparable>)ChorusPlantBlock.UP, debug4 == this || debug4 == Blocks.CHORUS_FLOWER)).setValue((Property<Comparable>)ChorusPlantBlock.NORTH, debug5 == this || debug5 == Blocks.CHORUS_FLOWER)).setValue((Property<Comparable>)ChorusPlantBlock.EAST, debug6 == this || debug6 == Blocks.CHORUS_FLOWER)).setValue((Property<Comparable>)ChorusPlantBlock.SOUTH, debug7 == this || debug7 == Blocks.CHORUS_FLOWER)).setValue((Property<Comparable>)ChorusPlantBlock.WEST, debug8 == this || debug8 == Blocks.CHORUS_FLOWER);
+        return ((((((this.defaultBlockState()).setValue(ChorusPlantBlock.DOWN, debug3 == this || debug3 == Blocks.CHORUS_FLOWER || debug3 == Blocks.END_STONE)).setValue(ChorusPlantBlock.UP, debug4 == this || debug4 == Blocks.CHORUS_FLOWER)).setValue(ChorusPlantBlock.NORTH, debug5 == this || debug5 == Blocks.CHORUS_FLOWER)).setValue(ChorusPlantBlock.EAST, debug6 == this || debug6 == Blocks.CHORUS_FLOWER)).setValue(ChorusPlantBlock.SOUTH, debug7 == this || debug7 == Blocks.CHORUS_FLOWER)).setValue(ChorusPlantBlock.WEST, debug8 == this || debug8 == Blocks.CHORUS_FLOWER); // MagmaCube - decompile fix
     }
     
     @Override
@@ -46,7 +46,7 @@ public class ChorusPlantBlock extends PipeBlock
             return super.updateShape(debug1, debug2, debug3, debug4, debug5, debug6);
         }
         final boolean debug7 = debug3.getBlock() == this || debug3.is(Blocks.CHORUS_FLOWER) || (debug2 == Direction.DOWN && debug3.is(Blocks.END_STONE));
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)ChorusPlantBlock.PROPERTY_BY_DIRECTION.get(debug2), debug7);
+        return (debug1).setValue(ChorusPlantBlock.PROPERTY_BY_DIRECTION.get(debug2), debug7);
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
index 69c53d797f66e47b65bbe2eeace90a7819baee0c..9a98f0bccd02cf0709bf18346db18640876d3d23 100644
--- a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
@@ -33,7 +33,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
     
     public CocoaBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)CocoaBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)CocoaBlock.AGE, 0));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(CocoaBlock.FACING, Direction.NORTH)).setValue(CocoaBlock.AGE, 0)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -46,7 +46,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
         if (debug2.random.nextInt(5) == 0) {
             final int debug5 = debug1.getValue((Property<Integer>)CocoaBlock.AGE);
             if (debug5 < 2) {
-                debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)CocoaBlock.AGE, debug5 + 1), 2);
+                debug2.setBlock(debug3, (debug1).setValue(CocoaBlock.AGE, debug5 + 1), 2); // MagmaCube - decompile fix
             }
         }
     }
@@ -84,7 +84,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
         final BlockPos debug4 = debug1.getClickedPos();
         for (final Direction debug5 : debug1.getNearestLookingDirections()) {
             if (debug5.getAxis().isHorizontal()) {
-                debug2 = ((StateHolder<O, BlockState>)debug2).setValue((Property<Comparable>)CocoaBlock.FACING, debug5);
+                debug2 = (debug2).setValue(CocoaBlock.FACING, debug5);
                 if (debug2.canSurvive(debug3, debug4)) {
                     return debug2;
                 }
@@ -113,7 +113,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
     
     @Override
     public void performBonemeal(final ServerLevel debug1, final Random debug2, final BlockPos debug3, final BlockState debug4) {
-        debug1.setBlock(debug3, ((StateHolder<O, BlockState>)debug4).setValue((Property<Comparable>)CocoaBlock.AGE, debug4.getValue((Property<Integer>)CocoaBlock.AGE) + 1), 2);
+        debug1.setBlock(debug3, (debug4).setValue(CocoaBlock.AGE, debug4.getValue((Property<Integer>)CocoaBlock.AGE) + 1), 2); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CommandBlock.java b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
index 397cb69c174575f2706d560d52b384c4c0851fef..ed51ecbb4afd266c057e684855076db46f5b0d1c 100644
--- a/src/main/java/net/minecraft/world/level/block/CommandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
@@ -37,7 +37,7 @@ public class CommandBlock extends BaseEntityBlock
     
     public CommandBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)CommandBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)CommandBlock.CONDITIONAL, false));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(CommandBlock.FACING, Direction.NORTH)).setValue(CommandBlock.CONDITIONAL, false)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -166,7 +166,7 @@ public class CommandBlock extends BaseEntityBlock
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)CommandBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)CommandBlock.FACING)));
+        return (debug1).setValue(CommandBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)CommandBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
@@ -181,7 +181,7 @@ public class CommandBlock extends BaseEntityBlock
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)CommandBlock.FACING, debug1.getNearestLookingDirection().getOpposite());
+        return (this.defaultBlockState()).setValue(CommandBlock.FACING, debug1.getNearestLookingDirection().getOpposite()); // MagmaCube - decompile fix
     }
     
     private static void executeChain(final Level debug0, final BlockPos debug1, Direction debug2) {
diff --git a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
index 50e8c1c27d95f7887b948e5be5a973251a60c82f..a478b5dfbe5ebad4f57e676581c4839b06120091 100644
--- a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
@@ -35,7 +35,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock
     
     public ComparatorBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)ComparatorBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)ComparatorBlock.POWERED, false)).setValue(ComparatorBlock.MODE, ComparatorMode.COMPARE));
+        this.registerDefaultState((((this.stateDefinition.any()).setValue(ComparatorBlock.FACING, Direction.NORTH)).setValue(ComparatorBlock.POWERED, false)).setValue(ComparatorBlock.MODE, ComparatorMode.COMPARE)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -92,7 +92,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock
     
     @Nullable
     private ItemFrame getItemFrame(final Level debug1, final Direction debug2, final BlockPos debug3) {
-        final List<ItemFrame> debug4 = debug1.getEntitiesOfClass((Class<? extends ItemFrame>)ItemFrame.class, new AABB(debug3.getX(), debug3.getY(), debug3.getZ(), debug3.getX() + 1, debug3.getY() + 1, debug3.getZ() + 1), debug1 -> debug1 != null && debug1.getDirection() == debug2);
+        final List<ItemFrame> debug4 = debug1.getEntitiesOfClass((Class<? extends ItemFrame>)ItemFrame.class, new AABB(debug3.getX(), debug3.getY(), debug3.getZ(), debug3.getX() + 1, debug3.getY() + 1, debug3.getZ() + 1), debug1l -> debug1l != null && debug1l.getDirection() == debug2); // MagmaCube - decompile fix
         if (debug4.size() == 1) {
             return debug4.get(0);
         }
@@ -104,7 +104,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock
         if (!debug4.abilities.mayBuild) {
             return InteractionResult.PASS;
         }
-        debug1 = ((StateHolder<O, BlockState>)debug1).cycle(ComparatorBlock.MODE);
+        debug1 = (debug1).cycle(ComparatorBlock.MODE); // MagmaCube - decompile fix
         final float debug7 = (debug1.getValue(ComparatorBlock.MODE) == ComparatorMode.SUBTRACT) ? 0.55f : 0.5f;
         debug2.playSound(debug4, debug3, SoundEvents.COMPARATOR_CLICK, SoundSource.BLOCKS, 0.3f, debug7);
         debug2.setBlock(debug3, debug1, 2);
@@ -139,10 +139,10 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock
             final boolean debug8 = this.shouldTurnOn(debug1, debug2, debug3);
             final boolean debug9 = debug3.getValue((Property<Boolean>)ComparatorBlock.POWERED);
             if (debug9 && !debug8) {
-                debug1.setBlock(debug2, ((StateHolder<O, BlockState>)debug3).setValue((Property<Comparable>)ComparatorBlock.POWERED, false), 2);
+                debug1.setBlock(debug2, (debug3).setValue(ComparatorBlock.POWERED, false), 2); // MagmaCube - decompile fix
             }
             else if (!debug9 && debug8) {
-                debug1.setBlock(debug2, ((StateHolder<O, BlockState>)debug3).setValue((Property<Comparable>)ComparatorBlock.POWERED, true), 2);
+                debug1.setBlock(debug2, (debug3).setValue(ComparatorBlock.POWERED, true), 2); // MagmaCube - decompile fix
             }
             this.updateNeighborsInFront(debug1, debug2, debug3);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
index 654b3ba527b6034f120eb9fb86026975d6c6ea29..ade2733f653965f749d659f331eae0cb90c3c1f5 100644
--- a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
@@ -136,12 +136,12 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder
     }
     
     private static void add(final float debug0, final ItemLike debug1) {
-        ComposterBlock.COMPOSTABLES.put((Object)debug1.asItem(), debug0);
+        ComposterBlock.COMPOSTABLES.put(debug1.asItem(), debug0); // MagmaCube - decompile fix
     }
     
     public ComposterBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)ComposterBlock.LEVEL, 0));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(ComposterBlock.LEVEL, 0)); // MagmaCube - decompile fix
     }
     
     public static void handleFill(final Level debug0, final BlockPos debug1, final boolean debug2) {
@@ -228,7 +228,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder
     }
     
     private static BlockState empty(final BlockState debug0, final LevelAccessor debug1, final BlockPos debug2) {
-        final BlockState debug3 = ((StateHolder<O, BlockState>)debug0).setValue((Property<Comparable>)ComposterBlock.LEVEL, 0);
+        final BlockState debug3 = (debug0).setValue(ComposterBlock.LEVEL, 0); // MagmaCube - decompile fix
         debug1.setBlock(debug2, debug3, 3);
         return debug3;
     }
@@ -238,7 +238,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder
         final float debug5 = ComposterBlock.COMPOSTABLES.getFloat((Object)debug3.getItem());
         if ((debug4 == 0 && debug5 > 0.0f) || debug1.getRandom().nextDouble() < debug5) {
             final int debug6 = debug4 + 1;
-            final BlockState debug7 = ((StateHolder<O, BlockState>)debug0).setValue((Property<Comparable>)ComposterBlock.LEVEL, debug6);
+            final BlockState debug7 = (debug0).setValue(ComposterBlock.LEVEL, debug6); // MagmaCube - decompile fix
             debug1.setBlock(debug2, debug7, 3);
             if (debug6 == 7) {
                 debug1.getBlockTicks().scheduleTick(debug2, debug0.getBlock(), 20);
@@ -251,7 +251,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder
     @Override
     public void tick(final BlockState debug1, final ServerLevel debug2, final BlockPos debug3, final Random debug4) {
         if (debug1.getValue((Property<Integer>)ComposterBlock.LEVEL) == 7) {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).cycle((Property<Comparable>)ComposterBlock.LEVEL), 3);
+            debug2.setBlock(debug3, (debug1).cycle(ComposterBlock.LEVEL), 3); // MagmaCube - decompile fix
             debug2.playSound(null, debug3, SoundEvents.COMPOSTER_READY, SoundSource.BLOCKS, 1.0f, 1.0f);
         }
     }
@@ -292,9 +292,8 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder
         LEVEL = BlockStateProperties.LEVEL_COMPOSTER;
         COMPOSTABLES = (Object2FloatMap)new Object2FloatOpenHashMap();
         OUTER_SHAPE = Shapes.block();
-        int debug;
         SHAPES = Util.make(new VoxelShape[9], debug0 -> {
-            for (debug = 0; debug < 8; ++debug) {
+            for (int debug = 0; debug < 8; ++debug) { // MagmaCube - decompile fix
                 debug0[debug] = Shapes.join(ComposterBlock.OUTER_SHAPE, Block.box(2.0, Math.max(2, 1 + debug * 2), 2.0, 14.0, 16.0, 14.0), BooleanOp.ONLY_FIRST);
             }
             debug0[8] = debug0[7];
@@ -349,7 +348,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder
                 array = new int[] { 0 };
             }
             else {
-                final int[] array2 = new int[0];
+                array = new int[0]; // MagmaCube - decompile fix
             }
             return array;
         }
@@ -397,7 +396,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder
                 array = new int[] { 0 };
             }
             else {
-                final int[] array2 = new int[0];
+                array = new int[0]; // MagmaCube - decompile fix
             }
             return array;
         }
@@ -417,7 +416,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder
             final ItemStack debug1 = this.getItem(0);
             if (!debug1.isEmpty()) {
                 this.changed = true;
-                final BlockState debug2 = addItem(this.state, this.level, this.pos, debug1);
+                final BlockState debug2 = ComposterBlock.addItem(this.state, this.level, this.pos, debug1); // MagmaCube - decompile fix
                 this.level.levelEvent(1500, this.pos, (debug2 != this.state) ? 1 : 0);
                 this.removeItemNoUpdate(0);
             }
diff --git a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
index 45877bee374fdb42ec3f3fc01ae8e7654a0b5e63..e074c76ddd55de5599e796d76ac0a970ce58092d 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
@@ -31,7 +31,7 @@ public class CoralFanBlock extends BaseCoralFanBlock
     @Override
     public void tick(final BlockState debug1, final ServerLevel debug2, final BlockPos debug3, final Random debug4) {
         if (!BaseCoralPlantTypeBlock.scanForWater(debug1, debug2, debug3)) {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)this.deadBlock.defaultBlockState()).setValue((Property<Comparable>)CoralFanBlock.WATERLOGGED, false), 2);
+            debug2.setBlock(debug3, (this.deadBlock.defaultBlockState()).setValue(CoralFanBlock.WATERLOGGED, false), 2); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
index 828e85ac915b22c27c9a911111c908b7acf066a9..63a004a5adb4faf698510ed059c1b946e42b5f17 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
@@ -34,7 +34,7 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock
     @Override
     public void tick(final BlockState debug1, final ServerLevel debug2, final BlockPos debug3, final Random debug4) {
         if (!BaseCoralPlantTypeBlock.scanForWater(debug1, debug2, debug3)) {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)this.deadBlock.defaultBlockState()).setValue((Property<Comparable>)CoralPlantBlock.WATERLOGGED, false), 2);
+            debug2.setBlock(debug3, (this.deadBlock.defaultBlockState()).setValue(CoralPlantBlock.WATERLOGGED, false), 2); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
index 8faa8a2bdcac67f0b24fbf9032f3ab2e1ea3e2a5..94b4b66b0611c4a028881a2228477dfd088afcf7 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
@@ -31,7 +31,7 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock
     @Override
     public void tick(final BlockState debug1, final ServerLevel debug2, final BlockPos debug3, final Random debug4) {
         if (!BaseCoralPlantTypeBlock.scanForWater(debug1, debug2, debug3)) {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.deadBlock.defaultBlockState()).setValue((Property<Comparable>)CoralWallFanBlock.WATERLOGGED, false)).setValue((Property<Comparable>)CoralWallFanBlock.FACING, (Comparable)debug1.getValue((Property<V>)CoralWallFanBlock.FACING)), 2);
+            debug2.setBlock(debug3, ((this.deadBlock.defaultBlockState()).setValue(CoralWallFanBlock.WATERLOGGED, false)).setValue(CoralWallFanBlock.FACING, (Comparable)debug1.getValue(CoralWallFanBlock.FACING)), 2); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/level/block/CraftingTableBlock.java b/src/main/java/net/minecraft/world/level/block/CraftingTableBlock.java
index b7fe96ddeed337391c2dcc1c2948508c60e6b56b..ab4abef1d8252665d360785de858c4e7eb6d3721 100644
--- a/src/main/java/net/minecraft/world/level/block/CraftingTableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CraftingTableBlock.java
@@ -38,7 +38,7 @@ public class CraftingTableBlock extends Block
     
     @Override
     public MenuProvider getMenuProvider(final BlockState debug1, final Level debug2, final BlockPos debug3) {
-        return new SimpleMenuProvider((debug2, debug3, debug4) -> new CraftingMenu(debug2, debug3, ContainerLevelAccess.create(debug2, debug3)), CraftingTableBlock.CONTAINER_TITLE);
+        return new SimpleMenuProvider((debug2l, debug3l, debug4) -> new CraftingMenu(debug2l, debug3l, ContainerLevelAccess.create(debug2, debug3)), CraftingTableBlock.CONTAINER_TITLE); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/world/level/block/CropBlock.java b/src/main/java/net/minecraft/world/level/block/CropBlock.java
index bc72bc9f36f0af67dd81986b254a680d92712575..f1ad5e4dee4cfde17ed5582a96f5807adf6f546b 100644
--- a/src/main/java/net/minecraft/world/level/block/CropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CropBlock.java
@@ -30,7 +30,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock
     
     protected CropBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)this.getAgeProperty(), 0));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(this.getAgeProperty(), 0)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -56,7 +56,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock
     }
     
     public BlockState getStateForAge(final int debug1) {
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)this.getAgeProperty(), debug1);
+        return (this.defaultBlockState()).setValue(this.getAgeProperty(), debug1); // MagmaCube - decompile fix
     }
     
     public boolean isMaxAge(final BlockState debug1) {
diff --git a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
index a753cf6cee626f04982f9f4acd07c4270adaa4a0..c410a55d2271f7e992e6abd1d8b41857864ba142 100644
--- a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
@@ -49,10 +49,10 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock
         final boolean debug5 = debug1.getValue((Property<Boolean>)DiodeBlock.POWERED);
         final boolean debug6 = this.shouldTurnOn(debug2, debug3, debug1);
         if (debug5 && !debug6) {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)DiodeBlock.POWERED, false), 2);
+            debug2.setBlock(debug3, (debug1).setValue(DiodeBlock.POWERED, false), 2); // MagmaCube - decompile fix
         }
         else if (!debug5) {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)DiodeBlock.POWERED, true), 2);
+            debug2.setBlock(debug3, (debug1).setValue(DiodeBlock.POWERED, true), 2); // MagmaCube - decompile fix
             if (!debug6) {
                 debug2.getBlockTicks().scheduleTick(debug3, this, this.getDelay(debug1), TickPriority.VERY_HIGH);
             }
@@ -69,7 +69,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock
         if (!debug1.getValue((Property<Boolean>)DiodeBlock.POWERED)) {
             return 0;
         }
-        if (debug1.getValue((Property<Comparable>)DiodeBlock.FACING) == debug4) {
+        if (debug1.getValue(DiodeBlock.FACING) == debug4) { // MagmaCube - decompile fix
             return this.getOutputSignal(debug2, debug3, debug1);
         }
         return 0;
@@ -154,7 +154,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)DiodeBlock.FACING, debug1.getHorizontalDirection().getOpposite());
+        return (this.defaultBlockState()).setValue(DiodeBlock.FACING, debug1.getHorizontalDirection().getOpposite()); // MagmaCube - decompile fix
     }
     
     @Override
@@ -200,7 +200,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock
     public boolean shouldPrioritize(final BlockGetter debug1, final BlockPos debug2, final BlockState debug3) {
         final Direction debug4 = debug3.getValue((Property<Direction>)DiodeBlock.FACING).getOpposite();
         final BlockState debug5 = debug1.getBlockState(debug2.relative(debug4));
-        return isDiode(debug5) && debug5.getValue((Property<Comparable>)DiodeBlock.FACING) != debug4;
+        return isDiode(debug5) && debug5.getValue(DiodeBlock.FACING) != debug4; // MagmaCube - decompile fix
     }
     
     protected abstract int getDelay(final BlockState p0);
diff --git a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
index f0668ffddbefff8f31fa05499b26bf0eed93d84c..0b94c43a957c96cb8aac5d997c0642440f1ea016 100644
--- a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
@@ -53,7 +53,7 @@ public class DispenserBlock extends BaseEntityBlock
     
     protected DispenserBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)DispenserBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)DispenserBlock.TRIGGERED, false));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(DispenserBlock.FACING, Direction.NORTH)).setValue(DispenserBlock.TRIGGERED, false)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -99,10 +99,10 @@ public class DispenserBlock extends BaseEntityBlock
         final boolean debug8 = debug1.getValue((Property<Boolean>)DispenserBlock.TRIGGERED);
         if (debug7 && !debug8) {
             debug2.getBlockTicks().scheduleTick(debug3, this, 4);
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)DispenserBlock.TRIGGERED, true), 4);
+            debug2.setBlock(debug3, (debug1).setValue(DispenserBlock.TRIGGERED, true), 4); // MagmaCube - decompile fix
         }
         else if (!debug7 && debug8) {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)DispenserBlock.TRIGGERED, false), 4);
+            debug2.setBlock(debug3, (debug1).setValue(DispenserBlock.TRIGGERED, false), 4); // MagmaCube - decompile fix
         }
     }
     
@@ -118,7 +118,7 @@ public class DispenserBlock extends BaseEntityBlock
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)DispenserBlock.FACING, debug1.getNearestLookingDirection().getOpposite());
+        return (this.defaultBlockState()).setValue(DispenserBlock.FACING, debug1.getNearestLookingDirection().getOpposite()); // MagmaCube - decompile fix
     }
     
     @Override
@@ -169,7 +169,7 @@ public class DispenserBlock extends BaseEntityBlock
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)DispenserBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)DispenserBlock.FACING)));
+        return (debug1).setValue(DispenserBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)DispenserBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
@@ -185,6 +185,6 @@ public class DispenserBlock extends BaseEntityBlock
     static {
         FACING = DirectionalBlock.FACING;
         TRIGGERED = BlockStateProperties.TRIGGERED;
-        DISPENSER_REGISTRY = Util.make((Map<Item, DispenseItemBehavior>)new Object2ObjectOpenHashMap(), debug0 -> debug0.defaultReturnValue((Object)new DefaultDispenseItemBehavior()));
+        DISPENSER_REGISTRY = Util.make(new Object2ObjectOpenHashMap<>(), debug0 -> debug0.defaultReturnValue(new DefaultDispenseItemBehavior())); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/DoubleBlockCombiner.java b/src/main/java/net/minecraft/world/level/block/DoubleBlockCombiner.java
index f31e2d8d0c7305ab5c115921e0f02a08ddaa22b8..35ae17665a4808e84c64fb2004530b52d30a9db7 100644
--- a/src/main/java/net/minecraft/world/level/block/DoubleBlockCombiner.java
+++ b/src/main/java/net/minecraft/world/level/block/DoubleBlockCombiner.java
@@ -32,7 +32,7 @@ public class DoubleBlockCombiner
         final BlockState debug13 = debug5.getBlockState(debug12);
         if (debug13.is(debug4.getBlock())) {
             final BlockType debug14 = debug1.apply(debug13);
-            if (debug14 != BlockType.SINGLE && debug9 != debug14 && debug13.getValue((Property<Comparable>)debug3) == debug4.getValue((Property<Comparable>)debug3)) {
+            if (debug14 != BlockType.SINGLE && debug9 != debug14 && debug13.getValue(debug3) == debug4.getValue(debug3)) { // MagmaCube - decompile fix
                 if (debug7.test(debug5, debug12)) {
                     return Combiner::acceptNone;
                 }
@@ -70,7 +70,7 @@ public class DoubleBlockCombiner
             
             @Override
             public <T> T apply(final Combiner<? super S, T> debug1) {
-                return debug1.acceptDouble((Object)this.first, (Object)this.second);
+                return debug1.acceptDouble(this.first, this.second); // MagmaCube - decompile fix
             }
         }
         
@@ -84,7 +84,7 @@ public class DoubleBlockCombiner
             
             @Override
             public <T> T apply(final Combiner<? super S, T> debug1) {
-                return debug1.acceptSingle((Object)this.single);
+                return debug1.acceptSingle(this.single); // MagmaCube - decompile fix
             }
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java b/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java
index 890132060d21dfab4a5aca7e68dbbee37596ae64..e2c4ba1a3c989eef3a03f93b58f07fae68034089 100644
--- a/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java
@@ -52,7 +52,7 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
     
     protected EnderChestBlock(final Properties debug1) {
         super(debug1, () -> BlockEntityType.ENDER_CHEST);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)EnderChestBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)EnderChestBlock.WATERLOGGED, false));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(EnderChestBlock.FACING, Direction.NORTH)).setValue(EnderChestBlock.WATERLOGGED, false)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -73,7 +73,7 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
         final FluidState debug2 = debug1.getLevel().getFluidState(debug1.getClickedPos());
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)EnderChestBlock.FACING, debug1.getHorizontalDirection().getOpposite())).setValue((Property<Comparable>)EnderChestBlock.WATERLOGGED, debug2.getType() == Fluids.WATER);
+        return ((this.defaultBlockState()).setValue(EnderChestBlock.FACING, debug1.getHorizontalDirection().getOpposite())).setValue(EnderChestBlock.WATERLOGGED, debug2.getType() == Fluids.WATER); // MagmaCube - decompile fix
     }
     
     @Override
@@ -92,7 +92,7 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
         }
         final EnderChestBlockEntity debug10 = (EnderChestBlockEntity)debug8;
         debug7.setActiveChest(debug10);
-        debug4.openMenu(new SimpleMenuProvider((debug1, debug2, debug3) -> ChestMenu.threeRows(debug1, debug2, debug7), EnderChestBlock.CONTAINER_TITLE));
+        debug4.openMenu(new SimpleMenuProvider((debug1l, debug2l, debug3l) -> ChestMenu.threeRows(debug1l, debug2l, debug7), EnderChestBlock.CONTAINER_TITLE)); // MagmaCube - decompile fix
         debug4.awardStat(Stats.OPEN_ENDERCHEST);
         PiglinAi.angerNearbyPiglins(debug4, true);
         return InteractionResult.CONSUME;
@@ -120,7 +120,7 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)EnderChestBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)EnderChestBlock.FACING)));
+        return (debug1).setValue(EnderChestBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)EnderChestBlock.FACING)));
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java b/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java
index 20b8625deb6983862066dbe2a998a664d6b4fae1..a286dfca72584740a078b281b8f61535b2f9b940 100644
--- a/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java
@@ -39,10 +39,10 @@ public class FaceAttachedHorizontalDirectionalBlock extends HorizontalDirectiona
         for (final Direction debug2 : debug1.getNearestLookingDirections()) {
             BlockState debug3;
             if (debug2.getAxis() == Direction.Axis.Y) {
-                debug3 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue(FaceAttachedHorizontalDirectionalBlock.FACE, (debug2 == Direction.UP) ? AttachFace.CEILING : AttachFace.FLOOR)).setValue((Property<Comparable>)FaceAttachedHorizontalDirectionalBlock.FACING, debug1.getHorizontalDirection());
+                debug3 = ((this.defaultBlockState()).setValue(FaceAttachedHorizontalDirectionalBlock.FACE, (debug2 == Direction.UP) ? AttachFace.CEILING : AttachFace.FLOOR)).setValue(FaceAttachedHorizontalDirectionalBlock.FACING, debug1.getHorizontalDirection()); // MagmaCube - decompile fix
             }
             else {
-                debug3 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue(FaceAttachedHorizontalDirectionalBlock.FACE, AttachFace.WALL)).setValue((Property<Comparable>)FaceAttachedHorizontalDirectionalBlock.FACING, debug2.getOpposite());
+                debug3 = ((this.defaultBlockState()).setValue(FaceAttachedHorizontalDirectionalBlock.FACE, AttachFace.WALL)).setValue(FaceAttachedHorizontalDirectionalBlock.FACING, debug2.getOpposite()); // MagmaCube - decompile fix
             }
             if (debug3.canSurvive(debug1.getLevel(), debug1.getClickedPos())) {
                 return debug3;
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index fe523fc6c773b7d33ea689a5c3156e82c3d25736..8504caa8a39feda5f83c89747a546948d8247dac 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -36,7 +36,7 @@ public class FarmBlock extends Block
     
     protected FarmBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)FarmBlock.MOISTURE, 0));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(FarmBlock.MOISTURE, 0)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -83,11 +83,11 @@ public class FarmBlock extends Block
         final int debug5 = debug1.getValue((Property<Integer>)FarmBlock.MOISTURE);
         if (isNearWater(debug2, debug3) || debug2.isRainingAt(debug3.above())) {
             if (debug5 < 7) {
-                debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)FarmBlock.MOISTURE, 7), 2);
+                debug2.setBlock(debug3, (debug1).setValue(FarmBlock.MOISTURE, 7), 2); // MagmaCube - decompile fix
             }
         }
         else if (debug5 > 0) {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)FarmBlock.MOISTURE, debug5 - 1), 2);
+            debug2.setBlock(debug3, (debug1).setValue(FarmBlock.MOISTURE, debug5 - 1), 2); // MagmaCube - decompile fix
         }
         else if (!isUnderCrops(debug2, debug3)) {
             turnToDirt(debug1, debug2, debug3);
diff --git a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
index bc1f0de8bc8838e395fd33acfcb396ac5f572d52..96f4052fe26ccf788acfe51c81bbbbb1f0a57014 100644
--- a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
@@ -42,7 +42,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock
     
     public FenceGateBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)FenceGateBlock.OPEN, false)).setValue((Property<Comparable>)FenceGateBlock.POWERED, false)).setValue((Property<Comparable>)FenceGateBlock.IN_WALL, false));
+        this.registerDefaultState(this.stateDefinition.any().setValue(FenceGateBlock.OPEN, false).setValue(FenceGateBlock.POWERED, false).setValue(FenceGateBlock.IN_WALL, false)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -58,7 +58,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock
         final Direction.Axis debug7 = debug2.getAxis();
         if (debug1.getValue((Property<Direction>)FenceGateBlock.FACING).getClockWise().getAxis() == debug7) {
             final boolean debug8 = this.isWall(debug3) || this.isWall(debug4.getBlockState(debug5.relative(debug2.getOpposite())));
-            return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)FenceGateBlock.IN_WALL, debug8);
+            return debug1.setValue(FenceGateBlock.IN_WALL, debug8); // MagmaCube - decompile fix
         }
         return super.updateShape(debug1, debug2, debug3, debug4, debug5, debug6);
     }
@@ -105,7 +105,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock
         final Direction debug5 = debug1.getHorizontalDirection();
         final Direction.Axis debug6 = debug5.getAxis();
         final boolean debug7 = (debug6 == Direction.Axis.Z && (this.isWall(debug2.getBlockState(debug3.west())) || this.isWall(debug2.getBlockState(debug3.east())))) || (debug6 == Direction.Axis.X && (this.isWall(debug2.getBlockState(debug3.north())) || this.isWall(debug2.getBlockState(debug3.south()))));
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)FenceGateBlock.FACING, debug5)).setValue((Property<Comparable>)FenceGateBlock.OPEN, debug4)).setValue((Property<Comparable>)FenceGateBlock.POWERED, debug4)).setValue((Property<Comparable>)FenceGateBlock.IN_WALL, debug7);
+        return this.defaultBlockState().setValue(FenceGateBlock.FACING, debug5).setValue(FenceGateBlock.OPEN, debug4).setValue(FenceGateBlock.POWERED, debug4).setValue(FenceGateBlock.IN_WALL, debug7); // MagmaCube - decompile fix
     }
     
     private boolean isWall(final BlockState debug1) {
@@ -115,15 +115,15 @@ public class FenceGateBlock extends HorizontalDirectionalBlock
     @Override
     public InteractionResult use(BlockState debug1, final Level debug2, final BlockPos debug3, final Player debug4, final InteractionHand debug5, final BlockHitResult debug6) {
         if (debug1.getValue((Property<Boolean>)FenceGateBlock.OPEN)) {
-            debug1 = ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)FenceGateBlock.OPEN, false);
+            debug1 = debug1.setValue(FenceGateBlock.OPEN, false); // MagmaCube - decompile fix
             debug2.setBlock(debug3, debug1, 10);
         }
         else {
             final Direction debug7 = debug4.getDirection();
-            if (debug1.getValue((Property<Comparable>)FenceGateBlock.FACING) == debug7.getOpposite()) {
-                debug1 = ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)FenceGateBlock.FACING, debug7);
+            if (debug1.getValue(FenceGateBlock.FACING) == debug7.getOpposite()) { // MagmaCube - decompile fix
+                debug1 = debug1.setValue(FenceGateBlock.FACING, debug7); // MagmaCube - decompile fix
             }
-            debug1 = ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)FenceGateBlock.OPEN, true);
+            debug1 = debug1.setValue(FenceGateBlock.OPEN, true); // MagmaCube - decompile fix
             debug2.setBlock(debug3, debug1, 10);
         }
         debug2.levelEvent(debug4, ((boolean)debug1.getValue((Property<Boolean>)FenceGateBlock.OPEN)) ? 1008 : 1014, debug3, 0);
@@ -137,7 +137,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock
         }
         final boolean debug7 = debug2.hasNeighborSignal(debug3);
         if (debug1.getValue((Property<Boolean>)FenceGateBlock.POWERED) != debug7) {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)FenceGateBlock.POWERED, debug7)).setValue((Property<Comparable>)FenceGateBlock.OPEN, debug7), 2);
+            debug2.setBlock(debug3, debug1.setValue(FenceGateBlock.POWERED, debug7).setValue(FenceGateBlock.OPEN, debug7), 2); // MagmaCube - decompile fix
             if (debug1.getValue((Property<Boolean>)FenceGateBlock.OPEN) != debug7) {
                 debug2.levelEvent(null, debug7 ? 1008 : 1014, debug3, 0);
             }
diff --git a/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java b/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java
index 01402c2584d7e3663269687993b5fef1b96e001c..b44b68917370766c66776a02a7630c28616aaf9d 100644
--- a/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java
@@ -99,7 +99,7 @@ public class GrindstoneBlock extends FaceAttachedHorizontalDirectionalBlock
     
     protected GrindstoneBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)GrindstoneBlock.FACING, Direction.NORTH)).setValue(GrindstoneBlock.FACE, AttachFace.WALL));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(GrindstoneBlock.FACING, Direction.NORTH)).setValue(GrindstoneBlock.FACE, AttachFace.WALL)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -167,12 +167,12 @@ public class GrindstoneBlock extends FaceAttachedHorizontalDirectionalBlock
     
     @Override
     public MenuProvider getMenuProvider(final BlockState debug1, final Level debug2, final BlockPos debug3) {
-        return new SimpleMenuProvider((debug2, debug3, debug4) -> new GrindstoneMenu(debug2, debug3, ContainerLevelAccess.create(debug2, debug3)), GrindstoneBlock.CONTAINER_TITLE);
+        return new SimpleMenuProvider((debug2l, debug3l, debug4) -> new GrindstoneMenu(debug2l, debug3l, ContainerLevelAccess.create(debug2, debug3)), GrindstoneBlock.CONTAINER_TITLE); // MagmaCube - decompile fix
     }
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)GrindstoneBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)GrindstoneBlock.FACING)));
+        return (debug1).setValue(GrindstoneBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)GrindstoneBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
index 21f7f9d3ca8d65786fc77992aa0881c2a6d46948..043f7ee4463c0a1720e101e48ca665441fda46fc 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
@@ -26,12 +26,12 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     protected GrowingPlantHeadBlock(final Properties debug1, final Direction debug2, final VoxelShape debug3, final boolean debug4, final double debug5) {
         super(debug1, debug2, debug3, debug4);
         this.growPerTickProbability = debug5;
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)GrowingPlantHeadBlock.AGE, 0));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(GrowingPlantHeadBlock.AGE, 0)); // MagmaCube - decompile fix
     }
     
     @Override
     public BlockState getStateForPlacement(final LevelAccessor debug1) {
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)GrowingPlantHeadBlock.AGE, debug1.getRandom().nextInt(25));
+        return (this.defaultBlockState()).setValue(GrowingPlantHeadBlock.AGE, debug1.getRandom().nextInt(25)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -44,7 +44,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
         if (debug1.getValue((Property<Integer>)GrowingPlantHeadBlock.AGE) < 25 && debug4.nextDouble() < this.growPerTickProbability) {
             final BlockPos debug5 = debug3.relative(this.growthDirection);
             if (this.canGrowInto(debug2.getBlockState(debug5))) {
-                debug2.setBlockAndUpdate(debug5, ((StateHolder<O, BlockState>)debug1).cycle((Property<Comparable>)GrowingPlantHeadBlock.AGE));
+                debug2.setBlockAndUpdate(debug5, (debug1).cycle(GrowingPlantHeadBlock.AGE)); // MagmaCube - decompile fix
             }
         }
     }
@@ -82,7 +82,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     public void performBonemeal(final ServerLevel debug1, final Random debug2, final BlockPos debug3, final BlockState debug4) {
         BlockPos debug5 = debug3.relative(this.growthDirection);
         for (int debug6 = Math.min(debug4.getValue((Property<Integer>)GrowingPlantHeadBlock.AGE) + 1, 25), debug7 = this.getBlocksToGrowWhenBonemealed(debug2), debug8 = 0; debug8 < debug7 && this.canGrowInto(debug1.getBlockState(debug5)); debug5 = debug5.relative(this.growthDirection), debug6 = Math.min(debug6 + 1, 25), ++debug8) {
-            debug1.setBlockAndUpdate(debug5, ((StateHolder<O, BlockState>)debug4).setValue((Property<Comparable>)GrowingPlantHeadBlock.AGE, debug6));
+            debug1.setBlockAndUpdate(debug5, (debug4).setValue(GrowingPlantHeadBlock.AGE, debug6)); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/level/block/HopperBlock.java b/src/main/java/net/minecraft/world/level/block/HopperBlock.java
index ad38b2c64c6ac64fca063d0a7acb90ad6426bbea..07f8b14392f7706ec0844fc1446344c087978d55 100644
--- a/src/main/java/net/minecraft/world/level/block/HopperBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HopperBlock.java
@@ -55,7 +55,7 @@ public class HopperBlock extends BaseEntityBlock
     
     public HopperBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)HopperBlock.FACING, Direction.DOWN)).setValue((Property<Comparable>)HopperBlock.ENABLED, true));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(HopperBlock.FACING, Direction.DOWN)).setValue(HopperBlock.ENABLED, true)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -109,7 +109,7 @@ public class HopperBlock extends BaseEntityBlock
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
         final Direction debug2 = debug1.getClickedFace().getOpposite();
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)HopperBlock.FACING, (debug2.getAxis() == Direction.Axis.Y) ? Direction.DOWN : debug2)).setValue((Property<Comparable>)HopperBlock.ENABLED, true);
+        return ((this.defaultBlockState()).setValue(HopperBlock.FACING, (debug2.getAxis() == Direction.Axis.Y) ? Direction.DOWN : debug2)).setValue(HopperBlock.ENABLED, true); // MagmaCube - decompile fix
     }
     
     @Override
@@ -156,7 +156,7 @@ public class HopperBlock extends BaseEntityBlock
     private void checkPoweredState(final Level debug1, final BlockPos debug2, final BlockState debug3) {
         final boolean debug4 = !debug1.hasNeighborSignal(debug2);
         if (debug4 != debug3.getValue((Property<Boolean>)HopperBlock.ENABLED)) {
-            debug1.setBlock(debug2, ((StateHolder<O, BlockState>)debug3).setValue((Property<Comparable>)HopperBlock.ENABLED, debug4), 4);
+            debug1.setBlock(debug2, (debug3).setValue(HopperBlock.ENABLED, debug4), 4); // MagmaCube - decompile fix
         }
     }
     
@@ -190,7 +190,7 @@ public class HopperBlock extends BaseEntityBlock
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)HopperBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)HopperBlock.FACING)));
+        return (debug1).setValue(HopperBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)HopperBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/HorizontalDirectionalBlock.java b/src/main/java/net/minecraft/world/level/block/HorizontalDirectionalBlock.java
index 2fe47568a6a7903d5907ce398e5d1b520f58da28..04617e504807a9152636d9bb12f0da374230f174 100644
--- a/src/main/java/net/minecraft/world/level/block/HorizontalDirectionalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HorizontalDirectionalBlock.java
@@ -18,7 +18,7 @@ public abstract class HorizontalDirectionalBlock extends Block
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)HorizontalDirectionalBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)HorizontalDirectionalBlock.FACING)));
+        return (debug1).setValue(HorizontalDirectionalBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)HorizontalDirectionalBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java b/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java
index 991fb177d4f232146c32c7ec343246c049a3788d..c63c0cb8f57c230061a30cd0333394a7e2cf7690 100644
--- a/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java
@@ -25,32 +25,32 @@ public class HugeMushroomBlock extends Block
     
     public HugeMushroomBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)HugeMushroomBlock.NORTH, true)).setValue((Property<Comparable>)HugeMushroomBlock.EAST, true)).setValue((Property<Comparable>)HugeMushroomBlock.SOUTH, true)).setValue((Property<Comparable>)HugeMushroomBlock.WEST, true)).setValue((Property<Comparable>)HugeMushroomBlock.UP, true)).setValue((Property<Comparable>)HugeMushroomBlock.DOWN, true));
+        this.registerDefaultState(((((((this.stateDefinition.any()).setValue(HugeMushroomBlock.NORTH, true)).setValue(HugeMushroomBlock.EAST, true)).setValue(HugeMushroomBlock.SOUTH, true)).setValue(HugeMushroomBlock.WEST, true)).setValue(HugeMushroomBlock.UP, true)).setValue(HugeMushroomBlock.DOWN, true)); // MagmaCube - decompile fix
     }
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
         final BlockGetter debug2 = debug1.getLevel();
         final BlockPos debug3 = debug1.getClickedPos();
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)HugeMushroomBlock.DOWN, this != debug2.getBlockState(debug3.below()).getBlock())).setValue((Property<Comparable>)HugeMushroomBlock.UP, this != debug2.getBlockState(debug3.above()).getBlock())).setValue((Property<Comparable>)HugeMushroomBlock.NORTH, this != debug2.getBlockState(debug3.north()).getBlock())).setValue((Property<Comparable>)HugeMushroomBlock.EAST, this != debug2.getBlockState(debug3.east()).getBlock())).setValue((Property<Comparable>)HugeMushroomBlock.SOUTH, this != debug2.getBlockState(debug3.south()).getBlock())).setValue((Property<Comparable>)HugeMushroomBlock.WEST, this != debug2.getBlockState(debug3.west()).getBlock());
+        return ((((((this.defaultBlockState()).setValue(HugeMushroomBlock.DOWN, this != debug2.getBlockState(debug3.below()).getBlock())).setValue(HugeMushroomBlock.UP, this != debug2.getBlockState(debug3.above()).getBlock())).setValue(HugeMushroomBlock.NORTH, this != debug2.getBlockState(debug3.north()).getBlock())).setValue(HugeMushroomBlock.EAST, this != debug2.getBlockState(debug3.east()).getBlock())).setValue(HugeMushroomBlock.SOUTH, this != debug2.getBlockState(debug3.south()).getBlock())).setValue(HugeMushroomBlock.WEST, this != debug2.getBlockState(debug3.west()).getBlock()); // MagmaCube - decompile fix
     }
     
     @Override
     public BlockState updateShape(final BlockState debug1, final Direction debug2, final BlockState debug3, final LevelAccessor debug4, final BlockPos debug5, final BlockPos debug6) {
         if (debug3.is(this)) {
-            return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2), false);
+            return (debug1).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2), false); // MagmaCube - decompile fix
         }
         return super.updateShape(debug1, debug2, debug3, debug4, debug5, debug6);
     }
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.rotate(Direction.NORTH)), (Comparable)debug1.getValue((Property<V>)HugeMushroomBlock.NORTH))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.rotate(Direction.SOUTH)), (Comparable)debug1.getValue((Property<V>)HugeMushroomBlock.SOUTH))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.rotate(Direction.EAST)), (Comparable)debug1.getValue((Property<V>)HugeMushroomBlock.EAST))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.rotate(Direction.WEST)), (Comparable)debug1.getValue((Property<V>)HugeMushroomBlock.WEST))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.rotate(Direction.UP)), (Comparable)debug1.getValue((Property<V>)HugeMushroomBlock.UP))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.rotate(Direction.DOWN)), (Comparable)debug1.getValue((Property<V>)HugeMushroomBlock.DOWN));
+        return ((((((debug1).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.rotate(Direction.NORTH)), debug1.getValue(HugeMushroomBlock.NORTH))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.rotate(Direction.SOUTH)), (Comparable)debug1.getValue(HugeMushroomBlock.SOUTH))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.rotate(Direction.EAST)), (Comparable)debug1.getValue(HugeMushroomBlock.EAST))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.rotate(Direction.WEST)), (Comparable)debug1.getValue(HugeMushroomBlock.WEST))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.rotate(Direction.UP)), (Comparable)debug1.getValue(HugeMushroomBlock.UP))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.rotate(Direction.DOWN)), (Comparable)debug1.getValue(HugeMushroomBlock.DOWN)); // MagmaCube - decompile fix
     }
     
     @Override
     public BlockState mirror(final BlockState debug1, final Mirror debug2) {
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.mirror(Direction.NORTH)), (Comparable)debug1.getValue((Property<V>)HugeMushroomBlock.NORTH))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.mirror(Direction.SOUTH)), (Comparable)debug1.getValue((Property<V>)HugeMushroomBlock.SOUTH))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.mirror(Direction.EAST)), (Comparable)debug1.getValue((Property<V>)HugeMushroomBlock.EAST))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.mirror(Direction.WEST)), (Comparable)debug1.getValue((Property<V>)HugeMushroomBlock.WEST))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.mirror(Direction.UP)), (Comparable)debug1.getValue((Property<V>)HugeMushroomBlock.UP))).setValue((Property<Comparable>)HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.mirror(Direction.DOWN)), (Comparable)debug1.getValue((Property<V>)HugeMushroomBlock.DOWN));
+        return ((((((debug1).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.mirror(Direction.NORTH)), debug1.getValue(HugeMushroomBlock.NORTH))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.mirror(Direction.SOUTH)), (Comparable)debug1.getValue(HugeMushroomBlock.SOUTH))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.mirror(Direction.EAST)), (Comparable)debug1.getValue(HugeMushroomBlock.EAST))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.mirror(Direction.WEST)), (Comparable)debug1.getValue(HugeMushroomBlock.WEST))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.mirror(Direction.UP)), (Comparable)debug1.getValue(HugeMushroomBlock.UP))).setValue(HugeMushroomBlock.PROPERTY_BY_DIRECTION.get(debug2.mirror(Direction.DOWN)), (Comparable)debug1.getValue(HugeMushroomBlock.DOWN)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/JigsawBlock.java b/src/main/java/net/minecraft/world/level/block/JigsawBlock.java
index 1822bc7641d7a5b2f3b1a7e2a82c717a6ac11563..c02f498b8806be1329f25188412151e1a3684a8a 100644
--- a/src/main/java/net/minecraft/world/level/block/JigsawBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/JigsawBlock.java
@@ -28,7 +28,7 @@ public class JigsawBlock extends Block implements EntityBlock
     
     protected JigsawBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue(JigsawBlock.ORIENTATION, FrontAndTop.NORTH_UP));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(JigsawBlock.ORIENTATION, FrontAndTop.NORTH_UP)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -38,12 +38,12 @@ public class JigsawBlock extends Block implements EntityBlock
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue(JigsawBlock.ORIENTATION, debug2.rotation().rotate(debug1.getValue(JigsawBlock.ORIENTATION)));
+        return (debug1).setValue(JigsawBlock.ORIENTATION, debug2.rotation().rotate(debug1.getValue(JigsawBlock.ORIENTATION))); // MagmaCube - decompile fix
     }
     
     @Override
     public BlockState mirror(final BlockState debug1, final Mirror debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue(JigsawBlock.ORIENTATION, debug2.rotation().rotate(debug1.getValue(JigsawBlock.ORIENTATION)));
+        return (debug1).setValue(JigsawBlock.ORIENTATION, debug2.rotation().rotate(debug1.getValue(JigsawBlock.ORIENTATION))); // MagmaCube - decompile fix
     }
     
     @Override
@@ -56,7 +56,7 @@ public class JigsawBlock extends Block implements EntityBlock
         else {
             debug3 = Direction.UP;
         }
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue(JigsawBlock.ORIENTATION, FrontAndTop.fromFrontAndTop(debug2, debug3));
+        return (this.defaultBlockState()).setValue(JigsawBlock.ORIENTATION, FrontAndTop.fromFrontAndTop(debug2, debug3)); // MagmaCube - decompile fix
     }
     
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
index 3d5678ce5174fd03dbaabe5d71b301722144107a..b3744a02799e3bdcb3b75f148e18711bf53a2409 100644
--- a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
@@ -30,7 +30,7 @@ public class LeavesBlock extends Block
     
     public LeavesBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)LeavesBlock.DISTANCE, 7)).setValue((Property<Comparable>)LeavesBlock.PERSISTENT, false));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(LeavesBlock.DISTANCE, 7)).setValue(LeavesBlock.PERSISTENT, false)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -80,7 +80,7 @@ public class LeavesBlock extends Block
                 break;
             }
         }
-        return ((StateHolder<O, BlockState>)debug0).setValue((Property<Comparable>)LeavesBlock.DISTANCE, debug3);
+        return (debug0).setValue(LeavesBlock.DISTANCE, debug3); // MagmaCube - decompile fix
     }
     
     private static int getDistanceAt(final BlockState debug0) {
@@ -119,7 +119,7 @@ public class LeavesBlock extends Block
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
-        return updateDistance(((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)LeavesBlock.PERSISTENT, true), debug1.getLevel(), debug1.getClickedPos());
+        return updateDistance((this.defaultBlockState()).setValue(LeavesBlock.PERSISTENT, true), debug1.getLevel(), debug1.getClickedPos()); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
index a6a5430b0d8405bea5e7015c6598d0d500665951..852c43731009c6a1b1a7788f3772be143cdf368b 100644
--- a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
@@ -41,12 +41,12 @@ public class LiquidBlock extends Block implements BucketPickup
     protected LiquidBlock(final FlowingFluid debug1, final Properties debug2) {
         super(debug2);
         this.fluid = debug1;
-        (this.stateCache = (List<FluidState>)Lists.newArrayList()).add(debug1.getSource(false));
+        (this.stateCache = Lists.newArrayList()).add(debug1.getSource(false)); // MagmaCube - decompile fix
         for (int debug3 = 1; debug3 < 8; ++debug3) {
             this.stateCache.add(debug1.getFlowing(8 - debug3, false));
         }
         this.stateCache.add(debug1.getFlowing(8, true));
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)LiquidBlock.LEVEL, 0));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(LiquidBlock.LEVEL, 0)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/LoomBlock.java b/src/main/java/net/minecraft/world/level/block/LoomBlock.java
index cebe212a427a5c34c97957c8a9c2f4738ca4d288..e999bd1294b6d03d36b533b5667207a88980e487 100644
--- a/src/main/java/net/minecraft/world/level/block/LoomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LoomBlock.java
@@ -42,12 +42,12 @@ public class LoomBlock extends HorizontalDirectionalBlock
     
     @Override
     public MenuProvider getMenuProvider(final BlockState debug1, final Level debug2, final BlockPos debug3) {
-        return new SimpleMenuProvider((debug2, debug3, debug4) -> new LoomMenu(debug2, debug3, ContainerLevelAccess.create(debug2, debug3)), LoomBlock.CONTAINER_TITLE);
+        return new SimpleMenuProvider((debug2l, debug3l, debug4) -> new LoomMenu(debug2l, debug3l, ContainerLevelAccess.create(debug2, debug3)), LoomBlock.CONTAINER_TITLE); // MagmaCube - decompile fix
     }
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)LoomBlock.FACING, debug1.getHorizontalDirection().getOpposite());
+        return (this.defaultBlockState()).setValue(LoomBlock.FACING, debug1.getHorizontalDirection().getOpposite()); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java b/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
index bda4e937cf27564270d9dc44b5d9a24ccfc975a6..bfc2c42274460bbe3e8d9c27fd9db0fcfadb6a22 100644
--- a/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
@@ -19,7 +19,7 @@ public class PoweredRailBlock extends BaseRailBlock
     
     protected PoweredRailBlock(final Properties debug1) {
         super(true, debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH)).setValue((Property<Comparable>)PoweredRailBlock.POWERED, false));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH)).setValue(PoweredRailBlock.POWERED, false)); // MagmaCube - decompile fix
     }
     
     protected boolean findPoweredRailSignal(final Level debug1, final BlockPos debug2, final BlockState debug3, final boolean debug4, final int debug5) {
@@ -114,7 +114,7 @@ public class PoweredRailBlock extends BaseRailBlock
         final boolean debug5 = debug1.getValue((Property<Boolean>)PoweredRailBlock.POWERED);
         final boolean debug6 = debug2.hasNeighborSignal(debug3) || this.findPoweredRailSignal(debug2, debug3, debug1, true, 0) || this.findPoweredRailSignal(debug2, debug3, debug1, false, 0);
         if (debug6 != debug5) {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)PoweredRailBlock.POWERED, debug6), 3);
+            debug2.setBlock(debug3, (debug1).setValue(PoweredRailBlock.POWERED, debug6), 3); // MagmaCube - decompile fix
             debug2.updateNeighborsAt(debug3.below(), this);
             if (debug1.getValue(PoweredRailBlock.SHAPE).isAscending()) {
                 debug2.updateNeighborsAt(debug3.above(), this);
@@ -134,110 +134,107 @@ public class PoweredRailBlock extends BaseRailBlock
                 case CLOCKWISE_180: {
                     switch (debug1.getValue(PoweredRailBlock.SHAPE)) {
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile fix
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile fix
                         }
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile fix
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile fix
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile fix
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile fix
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile fix
                         }
                         default: {
                             break Label_0424;
                         }
                     }
-                    break;
                 }
                 case COUNTERCLOCKWISE_90: {
                     switch (debug1.getValue(PoweredRailBlock.SHAPE)) {
                         case NORTH_SOUTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST); // MagmaCube - decompile fix
                         }
                         case EAST_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile fix
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile fix
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile fix
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile fix
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile fix
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile fix
                         }
                         default: {
                             break Label_0424;
                         }
                     }
-                    break;
                 }
                 case CLOCKWISE_90: {
                     switch (debug1.getValue(PoweredRailBlock.SHAPE)) {
                         case NORTH_SOUTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST); // MagmaCube - decompile fix
                         }
                         case EAST_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile fix
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile fix
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile fix
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile fix
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile fix
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile fix
                         }
                         default: {
                             break Label_0424;
                         }
                     }
-                    break;
                 }
             }
         }
@@ -252,54 +249,52 @@ public class PoweredRailBlock extends BaseRailBlock
                 case LEFT_RIGHT: {
                     switch (debug3) {
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile fix
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile fix
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile fix
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile fix
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile fix
                         }
                         default: {
                             break Label_0319;
                         }
                     }
-                    break;
                 }
                 case FRONT_BACK: {
                     switch (debug3) {
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile fix
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile fix
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile fix
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile fix
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile fix
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (debug1).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile fix
                         }
                         default: {
                             break Label_0319;
                         }
                     }
-                    break;
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
index e3a494384a36297ae28eb89c81cafb79e79095eb..bcd384bcb59d55976e46500c8e11d2befa588b62 100644
--- a/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
@@ -27,7 +27,7 @@ public class PressurePlateBlock extends BasePressurePlateBlock
     
     protected PressurePlateBlock(final Sensitivity debug1, final Properties debug2) {
         super(debug2);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)PressurePlateBlock.POWERED, false));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(PressurePlateBlock.POWERED, false));
         this.sensitivity = debug1;
     }
     
@@ -38,7 +38,7 @@ public class PressurePlateBlock extends BasePressurePlateBlock
     
     @Override
     protected BlockState setSignalForState(final BlockState debug1, final int debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)PressurePlateBlock.POWERED, debug2 > 0);
+        return (debug1).setValue(PressurePlateBlock.POWERED, debug2 > 0);
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java b/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java
index bbef81352bdd496e5c70faf9374cd0792f12a541..2ed4dc577aebc8b9b294a587d118acc7523280b3 100644
--- a/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java
@@ -33,11 +33,11 @@ public class PumpkinBlock extends StemGrownBlock
                 final Direction debug8 = debug6.getDirection();
                 final Direction debug9 = (debug8.getAxis() == Direction.Axis.Y) ? debug4.getDirection().getOpposite() : debug8;
                 debug2.playSound(null, debug3, SoundEvents.PUMPKIN_CARVE, SoundSource.BLOCKS, 1.0f, 1.0f);
-                debug2.setBlock(debug3, ((StateHolder<O, BlockState>)Blocks.CARVED_PUMPKIN.defaultBlockState()).setValue((Property<Comparable>)CarvedPumpkinBlock.FACING, debug9), 11);
+                debug2.setBlock(debug3, (Blocks.CARVED_PUMPKIN.defaultBlockState()).setValue(CarvedPumpkinBlock.FACING, debug9), 11); // MagmaCube - decompile fix
                 final ItemEntity debug10 = new ItemEntity(debug2, debug3.getX() + 0.5 + debug9.getStepX() * 0.65, debug3.getY() + 0.1, debug3.getZ() + 0.5 + debug9.getStepZ() * 0.65, new ItemStack(Items.PUMPKIN_SEEDS, 4));
                 debug10.setDeltaMovement(0.05 * debug9.getStepX() + debug2.random.nextDouble() * 0.02, 0.05, 0.05 * debug9.getStepZ() + debug2.random.nextDouble() * 0.02);
                 debug2.addFreshEntity(debug10);
-                debug7.hurtAndBreak(1, debug4, debug1 -> debug1.broadcastBreakEvent(debug5));
+                debug7.hurtAndBreak(1, debug4, debug1l -> debug1l.broadcastBreakEvent(debug5)); // MagmaCube - decompile fix
             }
             return InteractionResult.sidedSuccess(debug2.isClientSide);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/RailBlock.java b/src/main/java/net/minecraft/world/level/block/RailBlock.java
index 7e2815ad02e6292039ccb79e402c4ab3b1c74d9f..4fe25b54e213c91137bae95cb28f3f02c426ce43 100644
--- a/src/main/java/net/minecraft/world/level/block/RailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RailBlock.java
@@ -17,7 +17,7 @@ public class RailBlock extends BaseRailBlock
     
     protected RailBlock(final Properties debug1) {
         super(false, debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -39,110 +39,107 @@ public class RailBlock extends BaseRailBlock
                 case CLOCKWISE_180: {
                     switch (debug1.getValue(RailBlock.SHAPE)) {
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile fix
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile fix
                         }
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile fix
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile fix
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile fix
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile fix
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile fix
                         }
                         default: {
                             break Label_0424;
                         }
                     }
-                    break;
                 }
                 case COUNTERCLOCKWISE_90: {
                     switch (debug1.getValue(RailBlock.SHAPE)) {
                         case NORTH_SOUTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.EAST_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.EAST_WEST); // MagmaCube - decompile fix
                         }
                         case EAST_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile fix
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile fix
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile fix
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile fix
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile fix
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile fix
                         }
                         default: {
                             break Label_0424;
                         }
                     }
-                    break;
                 }
                 case CLOCKWISE_90: {
                     switch (debug1.getValue(RailBlock.SHAPE)) {
                         case NORTH_SOUTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.EAST_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.EAST_WEST); // MagmaCube - decompile fix
                         }
                         case EAST_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile fix
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile fix
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile fix
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile fix
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile fix
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST);
                         }
                         default: {
                             break Label_0424;
                         }
                     }
-                    break;
                 }
             }
         }
@@ -157,54 +154,52 @@ public class RailBlock extends BaseRailBlock
                 case LEFT_RIGHT: {
                     switch (debug3) {
                         case ASCENDING_NORTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_SOUTH); // MagmaCube - decompile fix
                         }
                         case ASCENDING_SOUTH: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_NORTH); // MagmaCube - decompile fix
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile fix
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile fix
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile fix
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile fix
                         }
                         default: {
                             break Label_0319;
                         }
                     }
-                    break;
                 }
                 case FRONT_BACK: {
                     switch (debug3) {
                         case ASCENDING_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_WEST); // MagmaCube - decompile fix
                         }
                         case ASCENDING_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.ASCENDING_EAST); // MagmaCube - decompile fix
                         }
                         case SOUTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_WEST); // MagmaCube - decompile fix
                         }
                         case SOUTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.SOUTH_EAST); // MagmaCube - decompile fix
                         }
                         case NORTH_WEST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_EAST); // MagmaCube - decompile fix
                         }
                         case NORTH_EAST: {
-                            return ((StateHolder<O, BlockState>)debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST);
+                            return (debug1).setValue(RailBlock.SHAPE, RailShape.NORTH_WEST); // MagmaCube - decompile fix
                         }
                         default: {
                             break Label_0319;
                         }
                     }
-                    break;
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
index 86b0a7fc8a7e92d1cab65ca4b56e32ba088bc462..e9e6de5020a29b7e3c6b32eabe31edfd95d08adb 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
@@ -31,7 +31,7 @@ public class RedStoneOreBlock extends Block
     
     public RedStoneOreBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)RedStoneOreBlock.LIT, false));
+        this.registerDefaultState((this.defaultBlockState()).setValue(RedStoneOreBlock.LIT, false)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -64,7 +64,7 @@ public class RedStoneOreBlock extends Block
     private static void interact(final BlockState debug0, final Level debug1, final BlockPos debug2) {
         spawnParticles(debug1, debug2);
         if (!debug0.getValue((Property<Boolean>)RedStoneOreBlock.LIT)) {
-            debug1.setBlock(debug2, ((StateHolder<O, BlockState>)debug0).setValue((Property<Comparable>)RedStoneOreBlock.LIT, true), 3);
+            debug1.setBlock(debug2, (debug0).setValue(RedStoneOreBlock.LIT, true), 3); // MagmaCube - decompile fix
         }
     }
     
@@ -76,7 +76,7 @@ public class RedStoneOreBlock extends Block
     @Override
     public void randomTick(final BlockState debug1, final ServerLevel debug2, final BlockPos debug3, final Random debug4) {
         if (debug1.getValue((Property<Boolean>)RedStoneOreBlock.LIT)) {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)RedStoneOreBlock.LIT, false), 3);
+            debug2.setBlock(debug3, (debug1).setValue(RedStoneOreBlock.LIT, false), 3); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index 55139153e7c1e6906f205d48245cf612cdfa67a3..49dd43e0025be9343d2ae4393f3cf6dd0c4eedf1 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -56,10 +56,10 @@ public class RedStoneWireBlock extends Block
     
     public RedStoneWireBlock(final Properties debug1) {
         super(debug1);
-        this.SHAPES_CACHE = (Map<BlockState, VoxelShape>)Maps.newHashMap();
+        this.SHAPES_CACHE = Maps.newHashMap(); // MagmaCube - decompile fix
         this.shouldSignal = true;
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.NONE)).setValue(RedStoneWireBlock.EAST, RedstoneSide.NONE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.NONE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.NONE)).setValue((Property<Comparable>)RedStoneWireBlock.POWER, 0));
-        this.crossState = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE);
+        this.registerDefaultState((((((this.stateDefinition.any()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.NONE)).setValue(RedStoneWireBlock.EAST, RedstoneSide.NONE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.NONE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.NONE)).setValue(RedStoneWireBlock.POWER, 0)); // MagmaCube - decompile fix
+        this.crossState = ((((this.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE); // MagmaCube - decompile fix
         for (final BlockState debug2 : this.getStateDefinition().getPossibleStates()) {
             if (debug2.getValue((Property<Integer>)RedStoneWireBlock.POWER) == 0) {
                 this.SHAPES_CACHE.put(debug2, this.calculateShape(debug2));
@@ -86,7 +86,7 @@ public class RedStoneWireBlock extends Block
     
     @Override
     public VoxelShape getShape(final BlockState debug1, final BlockGetter debug2, final BlockPos debug3, final CollisionContext debug4) {
-        return this.SHAPES_CACHE.get(((StateHolder<O, Object>)debug1).setValue((Property<Comparable>)RedStoneWireBlock.POWER, 0));
+        return this.SHAPES_CACHE.get((debug1).setValue(RedStoneWireBlock.POWER, 0)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -96,7 +96,7 @@ public class RedStoneWireBlock extends Block
     
     private BlockState getConnectionState(final BlockGetter debug1, BlockState debug2, final BlockPos debug3) {
         final boolean debug4 = isDot(debug2);
-        debug2 = this.getMissingConnections(debug1, ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)RedStoneWireBlock.POWER, (Comparable)debug2.getValue((Property<V>)RedStoneWireBlock.POWER)), debug3);
+        debug2 = this.getMissingConnections(debug1, (this.defaultBlockState()).setValue(RedStoneWireBlock.POWER, debug2.getValue(RedStoneWireBlock.POWER)), debug3); // MagmaCube - decompile fix
         if (debug4 && isDot(debug2)) {
             return debug2;
         }
@@ -107,16 +107,16 @@ public class RedStoneWireBlock extends Block
         final boolean debug9 = !debug5 && !debug6;
         final boolean debug10 = !debug7 && !debug8;
         if (!debug8 && debug9) {
-            debug2 = ((StateHolder<O, BlockState>)debug2).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE);
+            debug2 = (debug2).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE); // MagmaCube - decompile fix
         }
         if (!debug7 && debug9) {
-            debug2 = ((StateHolder<O, BlockState>)debug2).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE);
+            debug2 = (debug2).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE); // MagmaCube - decompile fix
         }
         if (!debug5 && debug10) {
-            debug2 = ((StateHolder<O, BlockState>)debug2).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE);
+            debug2 = (debug2).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE); // MagmaCube - decompile fix
         }
         if (!debug6 && debug10) {
-            debug2 = ((StateHolder<O, BlockState>)debug2).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE);
+            debug2 = (debug2).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE); // MagmaCube - decompile fix
         }
         return debug2;
     }
@@ -126,7 +126,7 @@ public class RedStoneWireBlock extends Block
         for (final Direction debug5 : Direction.Plane.HORIZONTAL) {
             if (!debug2.getValue(RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(debug5)).isConnected()) {
                 final RedstoneSide debug6 = this.getConnectingSide(debug1, debug3, debug5, debug4);
-                debug2 = ((StateHolder<O, BlockState>)debug2).setValue(RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(debug5), debug6);
+                debug2 = (debug2).setValue(RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(debug5), debug6); // MagmaCube - decompile fix
             }
         }
         return debug2;
@@ -142,9 +142,9 @@ public class RedStoneWireBlock extends Block
         }
         final RedstoneSide debug7 = this.getConnectingSide(debug4, debug5, debug2);
         if (debug7.isConnected() == debug1.getValue(RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(debug2)).isConnected() && !isCross(debug1)) {
-            return ((StateHolder<O, BlockState>)debug1).setValue(RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(debug2), debug7);
+            return (debug1).setValue(RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(debug2), debug7); // MagmaCube - decompile fix
         }
-        return this.getConnectionState(debug4, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.crossState).setValue((Property<Comparable>)RedStoneWireBlock.POWER, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.POWER))).setValue(RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(debug2), debug7), debug5);
+        return this.getConnectionState(debug4, ((this.crossState).setValue(RedStoneWireBlock.POWER, debug1.getValue(RedStoneWireBlock.POWER))).setValue(RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(debug2), debug7), debug5); // MagmaCube - decompile fix
     }
     
     private static boolean isCross(final BlockState debug0) {
@@ -217,9 +217,9 @@ public class RedStoneWireBlock extends Block
         final int debug4 = this.calculateTargetStrength(debug1, debug2);
         if (debug3.getValue((Property<Integer>)RedStoneWireBlock.POWER) != debug4) {
             if (debug1.getBlockState(debug2) == debug3) {
-                debug1.setBlock(debug2, ((StateHolder<O, BlockState>)debug3).setValue((Property<Comparable>)RedStoneWireBlock.POWER, debug4), 2);
+                debug1.setBlock(debug2, (debug3).setValue(RedStoneWireBlock.POWER, debug4), 2); // MagmaCube - decompile fix
             }
-            final Set<BlockPos> debug5 = (Set<BlockPos>)Sets.newHashSet();
+            final Set<BlockPos> debug5 = Sets.newHashSet(); // MagmaCube - decompile fix
             debug5.add(debug2);
             for (final Direction debug6 : Direction.values()) {
                 debug5.add(debug2.relative(debug6));
@@ -418,13 +418,13 @@ public class RedStoneWireBlock extends Block
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
         switch (debug2) {
             case CLOCKWISE_180: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue(RedStoneWireBlock.NORTH, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.SOUTH))).setValue(RedStoneWireBlock.EAST, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.WEST))).setValue(RedStoneWireBlock.SOUTH, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.NORTH))).setValue(RedStoneWireBlock.WEST, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.EAST));
+                return ((((debug1).setValue(RedStoneWireBlock.NORTH, debug1.getValue(RedStoneWireBlock.SOUTH))).setValue(RedStoneWireBlock.EAST, (Comparable)debug1.getValue(RedStoneWireBlock.WEST))).setValue(RedStoneWireBlock.SOUTH, (Comparable)debug1.getValue(RedStoneWireBlock.NORTH))).setValue(RedStoneWireBlock.WEST, (Comparable)debug1.getValue(RedStoneWireBlock.EAST)); // MagmaCube - decompile fix
             }
             case COUNTERCLOCKWISE_90: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue(RedStoneWireBlock.NORTH, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.EAST))).setValue(RedStoneWireBlock.EAST, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.SOUTH))).setValue(RedStoneWireBlock.SOUTH, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.WEST))).setValue(RedStoneWireBlock.WEST, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.NORTH));
+                return ((((debug1).setValue(RedStoneWireBlock.NORTH, debug1.getValue(RedStoneWireBlock.EAST))).setValue(RedStoneWireBlock.EAST, (Comparable)debug1.getValue(RedStoneWireBlock.SOUTH))).setValue(RedStoneWireBlock.SOUTH, (Comparable)debug1.getValue(RedStoneWireBlock.WEST))).setValue(RedStoneWireBlock.WEST, (Comparable)debug1.getValue(RedStoneWireBlock.NORTH)); // MagmaCube - decompile fix
             }
             case CLOCKWISE_90: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue(RedStoneWireBlock.NORTH, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.WEST))).setValue(RedStoneWireBlock.EAST, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.NORTH))).setValue(RedStoneWireBlock.SOUTH, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.EAST))).setValue(RedStoneWireBlock.WEST, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.SOUTH));
+                return ((((debug1).setValue(RedStoneWireBlock.NORTH, debug1.getValue(RedStoneWireBlock.WEST))).setValue(RedStoneWireBlock.EAST, (Comparable)debug1.getValue(RedStoneWireBlock.NORTH))).setValue(RedStoneWireBlock.SOUTH, (Comparable)debug1.getValue(RedStoneWireBlock.EAST))).setValue(RedStoneWireBlock.WEST, (Comparable)debug1.getValue(RedStoneWireBlock.SOUTH)); // MagmaCube - decompile fix
             }
             default: {
                 return debug1;
@@ -436,10 +436,10 @@ public class RedStoneWireBlock extends Block
     public BlockState mirror(final BlockState debug1, final Mirror debug2) {
         switch (debug2) {
             case LEFT_RIGHT: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue(RedStoneWireBlock.NORTH, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.SOUTH))).setValue(RedStoneWireBlock.SOUTH, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.NORTH));
+                return ((debug1).setValue(RedStoneWireBlock.NORTH, debug1.getValue(RedStoneWireBlock.SOUTH))).setValue(RedStoneWireBlock.SOUTH, (Comparable)debug1.getValue(RedStoneWireBlock.NORTH)); // MagmaCube - decompile fix
             }
             case FRONT_BACK: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue(RedStoneWireBlock.EAST, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.WEST))).setValue(RedStoneWireBlock.WEST, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.EAST));
+                return ((debug1).setValue(RedStoneWireBlock.EAST, debug1.getValue(RedStoneWireBlock.WEST))).setValue(RedStoneWireBlock.WEST, (Comparable)debug1.getValue(RedStoneWireBlock.EAST)); // MagmaCube - decompile fix
             }
             default: {
                 return super.mirror(debug1, debug2);
@@ -459,7 +459,7 @@ public class RedStoneWireBlock extends Block
         }
         if (isCross(debug1) || isDot(debug1)) {
             BlockState debug7 = isCross(debug1) ? this.defaultBlockState() : this.crossState;
-            debug7 = ((StateHolder<O, BlockState>)debug7).setValue((Property<Comparable>)RedStoneWireBlock.POWER, (Comparable)debug1.getValue((Property<V>)RedStoneWireBlock.POWER));
+            debug7 = (debug7).setValue(RedStoneWireBlock.POWER, debug1.getValue(RedStoneWireBlock.POWER)); // MagmaCube - decompile fix
             debug7 = this.getConnectionState(debug2, debug7, debug3);
             if (debug7 != debug1) {
                 debug2.setBlock(debug3, debug7, 3);
diff --git a/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java b/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
index fc5970728c7ff3f10a3099f7b9a9dc6a41afe881..f1e0265d100a0f5e6347658b7f4151b89a9ec857 100644
--- a/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
@@ -47,7 +47,7 @@ import net.minecraft.world.phys.Vec3;
 public class RespawnAnchorBlock
 extends Block {
     public static final IntegerProperty CHARGE = BlockStateProperties.RESPAWN_ANCHOR_CHARGES;
-    private static final ImmutableList<Vec3i> RESPAWN_HORIZONTAL_OFFSETS = ImmutableList.of((Object)new Vec3i(0, 0, -1), (Object)new Vec3i(-1, 0, 0), (Object)new Vec3i(0, 0, 1), (Object)new Vec3i(1, 0, 0), (Object)new Vec3i(-1, 0, -1), (Object)new Vec3i(1, 0, -1), (Object)new Vec3i(-1, 0, 1), (Object)new Vec3i(1, 0, 1));
+    private static final ImmutableList<Vec3i> RESPAWN_HORIZONTAL_OFFSETS = ImmutableList.of(new Vec3i(0, 0, -1), new Vec3i(-1, 0, 0), new Vec3i(0, 0, 1), new Vec3i(1, 0, 0), new Vec3i(-1, 0, -1), new Vec3i(1, 0, -1), new Vec3i(-1, 0, 1), new Vec3i(1, 0, 1)); // MagmaCube - decompile fix
     private static final ImmutableList<Vec3i> RESPAWN_OFFSETS = new ImmutableList.Builder().addAll(RESPAWN_HORIZONTAL_OFFSETS).addAll(RESPAWN_HORIZONTAL_OFFSETS.stream().map(Vec3i::below).iterator()).addAll(RESPAWN_HORIZONTAL_OFFSETS.stream().map(Vec3i::above).iterator()).add((Object)new Vec3i(0, 1, 0)).build();
 
     public RespawnAnchorBlock(BlockBehaviour.Properties debug1) {
diff --git a/src/main/java/net/minecraft/world/level/block/RotatedPillarBlock.java b/src/main/java/net/minecraft/world/level/block/RotatedPillarBlock.java
index 5133ae47ecb18267aec8c237ba2fbd94b2a95432..7f094a152e8429db4b1ed44931d7f47295844a4f 100644
--- a/src/main/java/net/minecraft/world/level/block/RotatedPillarBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RotatedPillarBlock.java
@@ -16,7 +16,7 @@ public class RotatedPillarBlock extends Block
     
     public RotatedPillarBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.defaultBlockState()).setValue(RotatedPillarBlock.AXIS, Direction.Axis.Y));
+        this.registerDefaultState((this.defaultBlockState()).setValue(RotatedPillarBlock.AXIS, Direction.Axis.Y)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -26,16 +26,15 @@ public class RotatedPillarBlock extends Block
             case CLOCKWISE_90: {
                 switch (debug1.getValue(RotatedPillarBlock.AXIS)) {
                     case X: {
-                        return ((StateHolder<O, BlockState>)debug1).setValue(RotatedPillarBlock.AXIS, Direction.Axis.Z);
+                        return (debug1).setValue(RotatedPillarBlock.AXIS, Direction.Axis.Z);
                     }
                     case Z: {
-                        return ((StateHolder<O, BlockState>)debug1).setValue(RotatedPillarBlock.AXIS, Direction.Axis.X);
+                        return (debug1).setValue(RotatedPillarBlock.AXIS, Direction.Axis.X); // MagmaCube - decompile fix
                     }
                     default: {
                         return debug1;
                     }
                 }
-                break;
             }
             default: {
                 return debug1;
@@ -50,7 +49,7 @@ public class RotatedPillarBlock extends Block
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue(RotatedPillarBlock.AXIS, debug1.getClickedFace().getAxis());
+        return (this.defaultBlockState()).setValue(RotatedPillarBlock.AXIS, debug1.getClickedFace().getAxis()); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/world/level/block/Rotation.java b/src/main/java/net/minecraft/world/level/block/Rotation.java
index 552816811526331345e08e2d6930c67387eb03cb..eab12de7d2a14d7d81e4cdd2f113836bb2cd18fa 100644
--- a/src/main/java/net/minecraft/world/level/block/Rotation.java
+++ b/src/main/java/net/minecraft/world/level/block/Rotation.java
@@ -20,7 +20,7 @@ public enum Rotation
     private Rotation(final OctahedralGroup debug3) {
         this.rotation = debug3;
     }
-    
+
     public Rotation getRotated(final Rotation debug1) {
         Label_0148: {
             switch (debug1) {
@@ -42,7 +42,6 @@ public enum Rotation
                             break Label_0148;
                         }
                     }
-                    break;
                 }
                 case COUNTERCLOCKWISE_90: {
                     switch (this) {
@@ -62,7 +61,6 @@ public enum Rotation
                             break Label_0148;
                         }
                     }
-                    break;
                 }
                 case CLOCKWISE_90: {
                     switch (this) {
@@ -82,7 +80,6 @@ public enum Rotation
                             break Label_0148;
                         }
                     }
-                    break;
                 }
             }
         }
@@ -135,7 +132,7 @@ public enum Rotation
     }
     
     public static List<Rotation> getShuffled(final Random debug0) {
-        final List<Rotation> debug = (List<Rotation>)Lists.newArrayList((Object[])values());
+        final List<Rotation> debug = Lists.newArrayList(values()); // MagmaCube - decompile fix
         Collections.shuffle(debug, debug0);
         return debug;
     }
diff --git a/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java b/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java
index e3d91dc9ac6abffc70d5599c28b2a1dd0b985ec9..e5ddc74074a4cd52fb8c389278d5c469a8bdb146 100644
--- a/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java
@@ -37,7 +37,7 @@ public class SeaPickleBlock extends BushBlock implements BonemealableBlock, Simp
     
     protected SeaPickleBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)SeaPickleBlock.PICKLES, 1)).setValue((Property<Comparable>)SeaPickleBlock.WATERLOGGED, true));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(SeaPickleBlock.PICKLES, 1)).setValue(SeaPickleBlock.WATERLOGGED, true)); // MagmaCube - decompile fix
     }
     
     @Nullable
@@ -45,11 +45,11 @@ public class SeaPickleBlock extends BushBlock implements BonemealableBlock, Simp
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
         final BlockState debug2 = debug1.getLevel().getBlockState(debug1.getClickedPos());
         if (debug2.is(this)) {
-            return ((StateHolder<O, BlockState>)debug2).setValue((Property<Comparable>)SeaPickleBlock.PICKLES, Math.min(4, debug2.getValue((Property<Integer>)SeaPickleBlock.PICKLES) + 1));
+            return (debug2).setValue(SeaPickleBlock.PICKLES, Math.min(4, debug2.getValue((Property<Integer>)SeaPickleBlock.PICKLES) + 1)); // MagmaCube - decompile fix
         }
         final FluidState debug3 = debug1.getLevel().getFluidState(debug1.getClickedPos());
         final boolean debug4 = debug3.getType() == Fluids.WATER;
-        return ((StateHolder<O, BlockState>)super.getStateForPlacement(debug1)).setValue((Property<Comparable>)SeaPickleBlock.WATERLOGGED, debug4);
+        return (super.getStateForPlacement(debug1)).setValue(SeaPickleBlock.WATERLOGGED, debug4); // MagmaCube - decompile fix
     }
     
     public static boolean isDead(final BlockState debug0) {
@@ -141,7 +141,7 @@ public class SeaPickleBlock extends BushBlock implements BonemealableBlock, Simp
                             if (debug2.nextInt(6) == 0 && debug1.getBlockState(debug15).is(Blocks.WATER)) {
                                 final BlockState debug16 = debug1.getBlockState(debug15.below());
                                 if (debug16.is(BlockTags.CORAL_BLOCKS)) {
-                                    debug1.setBlock(debug15, ((StateHolder<O, BlockState>)Blocks.SEA_PICKLE.defaultBlockState()).setValue((Property<Comparable>)SeaPickleBlock.PICKLES, debug2.nextInt(4) + 1), 3);
+                                    debug1.setBlock(debug15, (Blocks.SEA_PICKLE.defaultBlockState()).setValue(SeaPickleBlock.PICKLES, debug2.nextInt(4) + 1), 3); // MagmaCube - decompile fix
                                 }
                             }
                         }
@@ -157,7 +157,7 @@ public class SeaPickleBlock extends BushBlock implements BonemealableBlock, Simp
                 }
                 ++debug8;
             }
-            debug1.setBlock(debug3, ((StateHolder<O, BlockState>)debug4).setValue((Property<Comparable>)SeaPickleBlock.PICKLES, 4), 2);
+            debug1.setBlock(debug3, (debug4).setValue(SeaPickleBlock.PICKLES, 4), 2); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/level/block/Seagrass.java b/src/main/java/net/minecraft/world/level/block/Seagrass.java
index b5bd5e53c95cb93adbcfecce7dd1f68731ab9c8e..8562adae3d1e6b276608b71688108fc78d2e2af4 100644
--- a/src/main/java/net/minecraft/world/level/block/Seagrass.java
+++ b/src/main/java/net/minecraft/world/level/block/Seagrass.java
@@ -78,7 +78,7 @@ public class Seagrass extends BushBlock implements BonemealableBlock, LiquidBloc
     @Override
     public void performBonemeal(final ServerLevel debug1, final Random debug2, final BlockPos debug3, final BlockState debug4) {
         final BlockState debug5 = Blocks.TALL_SEAGRASS.defaultBlockState();
-        final BlockState debug6 = ((StateHolder<O, BlockState>)debug5).setValue(TallSeagrass.HALF, DoubleBlockHalf.UPPER);
+        final BlockState debug6 = (debug5).setValue(TallSeagrass.HALF, DoubleBlockHalf.UPPER); // MagmaCube - decompile fix
         final BlockPos debug7 = debug3.above();
         if (debug1.getBlockState(debug7).is(Blocks.WATER)) {
             debug1.setBlock(debug3, debug5, 2);
diff --git a/src/main/java/net/minecraft/world/level/block/ShulkerBoxBlock.java b/src/main/java/net/minecraft/world/level/block/ShulkerBoxBlock.java
index 89a2ec736e17d09a7a1f869a93eb1ee41c620817..726fc6d2a521dbc2c6f349bc6363d58b54040833 100644
--- a/src/main/java/net/minecraft/world/level/block/ShulkerBoxBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ShulkerBoxBlock.java
@@ -62,7 +62,7 @@ public class ShulkerBoxBlock extends BaseEntityBlock
     public ShulkerBoxBlock(@Nullable final DyeColor debug1, final Properties debug2) {
         super(debug2);
         this.color = debug1;
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue(ShulkerBoxBlock.FACING, Direction.UP));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(ShulkerBoxBlock.FACING, Direction.UP)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -106,7 +106,7 @@ public class ShulkerBoxBlock extends BaseEntityBlock
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue(ShulkerBoxBlock.FACING, debug1.getClickedFace());
+        return (this.defaultBlockState()).setValue(ShulkerBoxBlock.FACING, debug1.getClickedFace()); // MagmaCube - decompile fix
     }
     
     @Override
@@ -144,11 +144,9 @@ public class ShulkerBoxBlock extends BaseEntityBlock
         final BlockEntity debug3 = debug2.getOptionalParameter(LootContextParams.BLOCK_ENTITY);
         if (debug3 instanceof ShulkerBoxBlockEntity) {
             final ShulkerBoxBlockEntity debug4 = (ShulkerBoxBlockEntity)debug3;
-            int debug5;
-            final ShulkerBoxBlockEntity shulkerBoxBlockEntity;
-            debug2 = debug2.withDynamicDrop(ShulkerBoxBlock.CONTENTS, (debug1, debug2) -> {
-                for (debug5 = 0; debug5 < shulkerBoxBlockEntity.getContainerSize(); ++debug5) {
-                    debug2.accept(shulkerBoxBlockEntity.getItem(debug5));
+            debug2 = debug2.withDynamicDrop(ShulkerBoxBlock.CONTENTS, (debug1l, debug2l) -> { // MagmaCube - decompile fix
+                for (int debug5 = 0; debug5 < debug4.getContainerSize(); ++debug5) { // MagmaCube - decompile fix
+                    debug2l.accept(debug4.getItem(debug5)); // MagmaCube - decompile fix
                 }
                 return;
             });
@@ -325,7 +323,7 @@ public class ShulkerBoxBlock extends BaseEntityBlock
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue(ShulkerBoxBlock.FACING, debug2.rotate(debug1.getValue(ShulkerBoxBlock.FACING)));
+        return (debug1).setValue(ShulkerBoxBlock.FACING, debug2.rotate(debug1.getValue(ShulkerBoxBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SimpleWaterloggedBlock.java b/src/main/java/net/minecraft/world/level/block/SimpleWaterloggedBlock.java
index 59bb85755c7909237b30855dd3c15f458a926ccd..2ec00985cf14d10aec2e22d2bfa76d163b39bacc 100644
--- a/src/main/java/net/minecraft/world/level/block/SimpleWaterloggedBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SimpleWaterloggedBlock.java
@@ -21,7 +21,7 @@ public interface SimpleWaterloggedBlock extends BucketPickup, LiquidBlockContain
     default boolean placeLiquid(final LevelAccessor debug1, final BlockPos debug2, final BlockState debug3, final FluidState debug4) {
         if (!debug3.getValue((Property<Boolean>)BlockStateProperties.WATERLOGGED) && debug4.getType() == Fluids.WATER) {
             if (!debug1.isClientSide()) {
-                debug1.setBlock(debug2, ((StateHolder<O, BlockState>)debug3).setValue((Property<Comparable>)BlockStateProperties.WATERLOGGED, true), 3);
+                debug1.setBlock(debug2, (debug3).setValue(BlockStateProperties.WATERLOGGED, true), 3); // MagmaCube - decompile fix
                 debug1.getLiquidTicks().scheduleTick(debug2, debug4.getType(), debug4.getType().getTickDelay(debug1));
             }
             return true;
@@ -31,7 +31,7 @@ public interface SimpleWaterloggedBlock extends BucketPickup, LiquidBlockContain
     
     default Fluid takeLiquid(final LevelAccessor debug1, final BlockPos debug2, final BlockState debug3) {
         if (debug3.getValue((Property<Boolean>)BlockStateProperties.WATERLOGGED)) {
-            debug1.setBlock(debug2, ((StateHolder<O, BlockState>)debug3).setValue((Property<Comparable>)BlockStateProperties.WATERLOGGED, false), 3);
+            debug1.setBlock(debug2, (debug3).setValue(BlockStateProperties.WATERLOGGED, false), 3); // MagmaCube - decompile fix
             return Fluids.WATER;
         }
         return Fluids.EMPTY;
diff --git a/src/main/java/net/minecraft/world/level/block/SkullBlock.java b/src/main/java/net/minecraft/world/level/block/SkullBlock.java
index 4274c40c55478fa976c59bea278708dc30de264f..68b0d63bc96b83cdf6841c0e538c6e5b588de83c 100644
--- a/src/main/java/net/minecraft/world/level/block/SkullBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SkullBlock.java
@@ -22,7 +22,7 @@ public class SkullBlock extends AbstractSkullBlock
     
     protected SkullBlock(final Type debug1, final Properties debug2) {
         super(debug1, debug2);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)SkullBlock.ROTATION, 0));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(SkullBlock.ROTATION, 0)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -37,17 +37,17 @@ public class SkullBlock extends AbstractSkullBlock
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)SkullBlock.ROTATION, Mth.floor(debug1.getRotation() * 16.0f / 360.0f + 0.5) & 0xF);
+        return (this.defaultBlockState()).setValue(SkullBlock.ROTATION, Mth.floor(debug1.getRotation() * 16.0f / 360.0f + 0.5) & 0xF); // MagmaCube - decompile fix
     }
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)SkullBlock.ROTATION, debug2.rotate(debug1.getValue((Property<Integer>)SkullBlock.ROTATION), 16));
+        return (debug1).setValue(SkullBlock.ROTATION, debug2.rotate(debug1.getValue((Property<Integer>)SkullBlock.ROTATION), 16)); // MagmaCube - decompile fix
     }
     
     @Override
     public BlockState mirror(final BlockState debug1, final Mirror debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)SkullBlock.ROTATION, debug2.mirror(debug1.getValue((Property<Integer>)SkullBlock.ROTATION), 16));
+        return (debug1).setValue(SkullBlock.ROTATION, debug2.mirror(debug1.getValue((Property<Integer>)SkullBlock.ROTATION), 16)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SlabBlock.java b/src/main/java/net/minecraft/world/level/block/SlabBlock.java
index d55b6c56a3abf16e39d454c83d230fb8d1b6a14c..b66658b82e7b7004dcc74e1ac38936c9235f95b0 100644
--- a/src/main/java/net/minecraft/world/level/block/SlabBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SlabBlock.java
@@ -36,7 +36,7 @@ public class SlabBlock extends Block implements SimpleWaterloggedBlock
     
     public SlabBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue(SlabBlock.TYPE, SlabType.BOTTOM)).setValue((Property<Comparable>)SlabBlock.WATERLOGGED, false));
+        this.registerDefaultState(((this.defaultBlockState()).setValue(SlabBlock.TYPE, SlabType.BOTTOM)).setValue(SlabBlock.WATERLOGGED, false)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -71,13 +71,13 @@ public class SlabBlock extends Block implements SimpleWaterloggedBlock
         final BlockPos debug2 = debug1.getClickedPos();
         final BlockState debug3 = debug1.getLevel().getBlockState(debug2);
         if (debug3.is(this)) {
-            return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug3).setValue(SlabBlock.TYPE, SlabType.DOUBLE)).setValue((Property<Comparable>)SlabBlock.WATERLOGGED, false);
+            return ((debug3).setValue(SlabBlock.TYPE, SlabType.DOUBLE)).setValue(SlabBlock.WATERLOGGED, false); // MagmaCube - decompile fix
         }
         final FluidState debug4 = debug1.getLevel().getFluidState(debug2);
-        final BlockState debug5 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue(SlabBlock.TYPE, SlabType.BOTTOM)).setValue((Property<Comparable>)SlabBlock.WATERLOGGED, debug4.getType() == Fluids.WATER);
+        final BlockState debug5 = ((this.defaultBlockState()).setValue(SlabBlock.TYPE, SlabType.BOTTOM)).setValue(SlabBlock.WATERLOGGED, debug4.getType() == Fluids.WATER); // MagmaCube - decompile fix
         final Direction debug6 = debug1.getClickedFace();
         if (debug6 == Direction.DOWN || (debug6 != Direction.UP && debug1.getClickLocation().y - debug2.getY() > 0.5)) {
-            return ((StateHolder<O, BlockState>)debug5).setValue(SlabBlock.TYPE, SlabType.TOP);
+            return (debug5).setValue(SlabBlock.TYPE, SlabType.TOP); // MagmaCube - decompile fix
         }
         return debug5;
     }
@@ -110,12 +110,12 @@ public class SlabBlock extends Block implements SimpleWaterloggedBlock
     
     @Override
     public boolean placeLiquid(final LevelAccessor debug1, final BlockPos debug2, final BlockState debug3, final FluidState debug4) {
-        return debug3.getValue(SlabBlock.TYPE) != SlabType.DOUBLE && super.placeLiquid(debug1, debug2, debug3, debug4);
+        return debug3.getValue(SlabBlock.TYPE) != SlabType.DOUBLE && SimpleWaterloggedBlock.super.placeLiquid(debug1, debug2, debug3, debug4); // MagmaCube - decompile fix
     }
     
     @Override
     public boolean canPlaceLiquid(final BlockGetter debug1, final BlockPos debug2, final BlockState debug3, final Fluid debug4) {
-        return debug3.getValue(SlabBlock.TYPE) != SlabType.DOUBLE && super.canPlaceLiquid(debug1, debug2, debug3, debug4);
+        return debug3.getValue(SlabBlock.TYPE) != SlabType.DOUBLE && SimpleWaterloggedBlock.super.canPlaceLiquid(debug1, debug2, debug3, debug4); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java b/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java
index 99173aba48c24a3367923566d18e27ba68d84338..5ac979c42159a5420e5b375884d4d83d8801d787 100644
--- a/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java
@@ -18,13 +18,13 @@ public class SnowyDirtBlock extends Block
     
     protected SnowyDirtBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)SnowyDirtBlock.SNOWY, false));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(SnowyDirtBlock.SNOWY, false)); // MagmaCube - decompile fix
     }
     
     @Override
     public BlockState updateShape(final BlockState debug1, final Direction debug2, final BlockState debug3, final LevelAccessor debug4, final BlockPos debug5, final BlockPos debug6) {
         if (debug2 == Direction.UP) {
-            return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)SnowyDirtBlock.SNOWY, debug3.is(Blocks.SNOW_BLOCK) || debug3.is(Blocks.SNOW));
+            return (debug1).setValue(SnowyDirtBlock.SNOWY, debug3.is(Blocks.SNOW_BLOCK) || debug3.is(Blocks.SNOW)); // MagmaCube - decompile fix
         }
         return super.updateShape(debug1, debug2, debug3, debug4, debug5, debug6);
     }
@@ -32,7 +32,7 @@ public class SnowyDirtBlock extends Block
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
         final BlockState debug2 = debug1.getLevel().getBlockState(debug1.getClickedPos().above());
-        return ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)SnowyDirtBlock.SNOWY, debug2.is(Blocks.SNOW_BLOCK) || debug2.is(Blocks.SNOW));
+        return (this.defaultBlockState()).setValue(SnowyDirtBlock.SNOWY, debug2.is(Blocks.SNOW_BLOCK) || debug2.is(Blocks.SNOW)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java b/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
index 555b192995bafe6bac45d9a9b45a820ab644b6ad..d59a526942fb4413504da6cff6ca49731c2e123e 100644
--- a/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
@@ -50,7 +50,7 @@ public abstract class SpreadingSnowyDirtBlock extends SnowyDirtBlock
             for (int debug6 = 0; debug6 < 4; ++debug6) {
                 final BlockPos debug7 = debug3.offset(debug4.nextInt(3) - 1, debug4.nextInt(5) - 3, debug4.nextInt(3) - 1);
                 if (debug2.getBlockState(debug7).is(Blocks.DIRT) && canPropagate(debug5, debug2, debug7)) {
-                    debug2.setBlockAndUpdate(debug7, ((StateHolder<O, BlockState>)debug5).setValue((Property<Comparable>)SpreadingSnowyDirtBlock.SNOWY, debug2.getBlockState(debug7.above()).is(Blocks.SNOW)));
+                    debug2.setBlockAndUpdate(debug7, (debug5).setValue(SpreadingSnowyDirtBlock.SNOWY, debug2.getBlockState(debug7.above()).is(Blocks.SNOW))); // MagmaCube - decompile fix
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/StairBlock.java b/src/main/java/net/minecraft/world/level/block/StairBlock.java
index af20315d514f7e6cf9c0c7d0b194a018a2ac988d..cd5c1526bc29de8f86dcd97298aba7a0a996d867 100644
--- a/src/main/java/net/minecraft/world/level/block/StairBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StairBlock.java
@@ -79,7 +79,7 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock
     
     protected StairBlock(final BlockState debug1, final Properties debug2) {
         super(debug2);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)StairBlock.FACING, Direction.NORTH)).setValue(StairBlock.HALF, Half.BOTTOM)).setValue(StairBlock.SHAPE, StairsShape.STRAIGHT)).setValue((Property<Comparable>)StairBlock.WATERLOGGED, false));
+        this.registerDefaultState(((((this.stateDefinition.any()).setValue(StairBlock.FACING, Direction.NORTH)).setValue(StairBlock.HALF, Half.BOTTOM)).setValue(StairBlock.SHAPE, StairsShape.STRAIGHT)).setValue(StairBlock.WATERLOGGED, false)); // MagmaCube - decompile fix
         this.base = debug1.getBlock();
         this.baseState = debug1;
     }
@@ -170,8 +170,8 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock
         final Direction debug2 = debug1.getClickedFace();
         final BlockPos debug3 = debug1.getClickedPos();
         final FluidState debug4 = debug1.getLevel().getFluidState(debug3);
-        final BlockState debug5 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, debug1.getHorizontalDirection())).setValue(StairBlock.HALF, (debug2 == Direction.DOWN || (debug2 != Direction.UP && debug1.getClickLocation().y - debug3.getY() > 0.5)) ? Half.TOP : Half.BOTTOM)).setValue((Property<Comparable>)StairBlock.WATERLOGGED, debug4.getType() == Fluids.WATER);
-        return ((StateHolder<O, BlockState>)debug5).setValue(StairBlock.SHAPE, getStairsShape(debug5, debug1.getLevel(), debug3));
+        final BlockState debug5 = (((this.defaultBlockState()).setValue(StairBlock.FACING, debug1.getHorizontalDirection())).setValue(StairBlock.HALF, (debug2 == Direction.DOWN || (debug2 != Direction.UP && debug1.getClickLocation().y - debug3.getY() > 0.5)) ? Half.TOP : Half.BOTTOM)).setValue(StairBlock.WATERLOGGED, debug4.getType() == Fluids.WATER); // MagmaCube - decompile fix
+        return (debug5).setValue(StairBlock.SHAPE, getStairsShape(debug5, debug1.getLevel(), debug3)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -180,7 +180,7 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock
             debug4.getLiquidTicks().scheduleTick(debug5, Fluids.WATER, Fluids.WATER.getTickDelay(debug4));
         }
         if (debug2.getAxis().isHorizontal()) {
-            return ((StateHolder<O, BlockState>)debug1).setValue(StairBlock.SHAPE, getStairsShape(debug1, debug4, debug5));
+            return (debug1).setValue(StairBlock.SHAPE, getStairsShape(debug1, debug4, debug5)); // MagmaCube - decompile fix
         }
         return super.updateShape(debug1, debug2, debug3, debug4, debug5, debug6);
     }
@@ -212,7 +212,7 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock
     
     private static boolean canTakeShape(final BlockState debug0, final BlockGetter debug1, final BlockPos debug2, final Direction debug3) {
         final BlockState debug4 = debug1.getBlockState(debug2.relative(debug3));
-        return !isStairs(debug4) || debug4.getValue((Property<Comparable>)StairBlock.FACING) != debug0.getValue((Property<Comparable>)StairBlock.FACING) || debug4.getValue(StairBlock.HALF) != debug0.getValue(StairBlock.HALF);
+        return !isStairs(debug4) || debug4.getValue(StairBlock.FACING) != debug0.getValue(StairBlock.FACING) || debug4.getValue(StairBlock.HALF) != debug0.getValue(StairBlock.HALF); // MagmaCube - decompile fix
     }
     
     public static boolean isStairs(final BlockState debug0) {
@@ -221,7 +221,7 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)StairBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)StairBlock.FACING)));
+        return (debug1).setValue(StairBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)StairBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
@@ -236,22 +236,21 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock
                     }
                     switch (debug4) {
                         case INNER_LEFT: {
-                            return ((StateHolder<O, BlockState>)debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.INNER_RIGHT);
+                            return (debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.INNER_RIGHT); // MagmaCube - decompile fix
                         }
                         case INNER_RIGHT: {
-                            return ((StateHolder<O, BlockState>)debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.INNER_LEFT);
+                            return (debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.INNER_LEFT); // MagmaCube - decompile fix
                         }
                         case OUTER_LEFT: {
-                            return ((StateHolder<O, BlockState>)debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT);
+                            return (debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT); // MagmaCube - decompile fix
                         }
                         case OUTER_RIGHT: {
-                            return ((StateHolder<O, BlockState>)debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT);
+                            return (debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT); // MagmaCube - decompile fix
                         }
                         default: {
                             return debug1.rotate(Rotation.CLOCKWISE_180);
                         }
                     }
-                    break;
                 }
                 case FRONT_BACK: {
                     if (debug3.getAxis() != Direction.Axis.X) {
@@ -259,16 +258,16 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock
                     }
                     switch (debug4) {
                         case INNER_LEFT: {
-                            return ((StateHolder<O, BlockState>)debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.INNER_LEFT);
+                            return (debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.INNER_LEFT); // MagmaCube - decompile fix
                         }
                         case INNER_RIGHT: {
-                            return ((StateHolder<O, BlockState>)debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.INNER_RIGHT);
+                            return (debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.INNER_RIGHT); // MagmaCube - decompile fix
                         }
                         case OUTER_LEFT: {
-                            return ((StateHolder<O, BlockState>)debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT);
+                            return (debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT); // MagmaCube - decompile fix
                         }
                         case OUTER_RIGHT: {
-                            return ((StateHolder<O, BlockState>)debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT);
+                            return (debug1.rotate(Rotation.CLOCKWISE_180)).setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT); // MagmaCube - decompile fix
                         }
                         case STRAIGHT: {
                             return debug1.rotate(Rotation.CLOCKWISE_180);
@@ -277,7 +276,6 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock
                             break Label_0335;
                         }
                     }
-                    break;
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/StemBlock.java b/src/main/java/net/minecraft/world/level/block/StemBlock.java
index 6ae44a94dfaa8e9d4f3c27d117751d024a9dde35..93611172cca6b0ed4402f4846a33aeb655d36c3e 100644
--- a/src/main/java/net/minecraft/world/level/block/StemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StemBlock.java
@@ -31,7 +31,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock
     protected StemBlock(final StemGrownBlock debug1, final Properties debug2) {
         super(debug2);
         this.fruit = debug1;
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)StemBlock.AGE, 0));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(StemBlock.AGE, 0)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -53,7 +53,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock
         if (debug4.nextInt((int)(25.0f / debug5) + 1) == 0) {
             final int debug6 = debug1.getValue((Property<Integer>)StemBlock.AGE);
             if (debug6 < 7) {
-                debug1 = ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)StemBlock.AGE, debug6 + 1);
+                debug1 = (debug1).setValue(StemBlock.AGE, debug6 + 1); // MagmaCube - decompile fix
                 debug2.setBlock(debug3, debug1, 2);
             }
             else {
@@ -62,7 +62,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock
                 final BlockState debug9 = debug2.getBlockState(debug8.below());
                 if (debug2.getBlockState(debug8).isAir() && (debug9.is(Blocks.FARMLAND) || debug9.is(Blocks.DIRT) || debug9.is(Blocks.COARSE_DIRT) || debug9.is(Blocks.PODZOL) || debug9.is(Blocks.GRASS_BLOCK))) {
                     debug2.setBlockAndUpdate(debug8, this.fruit.defaultBlockState());
-                    debug2.setBlockAndUpdate(debug3, ((StateHolder<O, BlockState>)this.fruit.getAttachedStem().defaultBlockState()).setValue((Property<Comparable>)HorizontalDirectionalBlock.FACING, debug7));
+                    debug2.setBlockAndUpdate(debug3, (this.fruit.getAttachedStem().defaultBlockState()).setValue(HorizontalDirectionalBlock.FACING, debug7)); // MagmaCube - decompile fix
                 }
             }
         }
@@ -98,7 +98,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock
     @Override
     public void performBonemeal(final ServerLevel debug1, final Random debug2, final BlockPos debug3, final BlockState debug4) {
         final int debug5 = Math.min(7, debug4.getValue((Property<Integer>)StemBlock.AGE) + Mth.nextInt(debug1.random, 2, 5));
-        final BlockState debug6 = ((StateHolder<O, BlockState>)debug4).setValue((Property<Comparable>)StemBlock.AGE, debug5);
+        final BlockState debug6 = (debug4).setValue(StemBlock.AGE, debug5);
         debug1.setBlock(debug3, debug6, 2);
         if (debug5 == 7) {
             debug6.randomTick(debug1, debug3, debug1.random);
diff --git a/src/main/java/net/minecraft/world/level/block/SupportType.java b/src/main/java/net/minecraft/world/level/block/SupportType.java
index 906d91dc0ca6807141103e720a3bbca7500062d0..f829fe8a66b1448318902a6e7586994a8fb80a85 100644
--- a/src/main/java/net/minecraft/world/level/block/SupportType.java
+++ b/src/main/java/net/minecraft/world/level/block/SupportType.java
@@ -21,7 +21,6 @@ public enum SupportType
         private final VoxelShape CENTER_SUPPORT_SHAPE;
         
         {
-            this.CENTER_SUPPORT_WIDTH = 1;
             this.CENTER_SUPPORT_SHAPE = Block.box(7.0, 0.0, 7.0, 9.0, 10.0, 9.0);
         }
         
@@ -35,7 +34,6 @@ public enum SupportType
         private final VoxelShape RIGID_SUPPORT_SHAPE;
         
         {
-            this.RIGID_SUPPORT_WIDTH = 2;
             this.RIGID_SUPPORT_SHAPE = Shapes.join(Shapes.block(), Block.box(2.0, 0.0, 2.0, 14.0, 16.0, 14.0), BooleanOp.ONLY_FIRST);
         }
         
diff --git a/src/main/java/net/minecraft/world/level/block/TargetBlock.java b/src/main/java/net/minecraft/world/level/block/TargetBlock.java
index 91486ce345a353e077ffd3c583745b8f2c6dbd19..68209e19f4bc8e3a93103dde1453c4854ba0d4d9 100644
--- a/src/main/java/net/minecraft/world/level/block/TargetBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TargetBlock.java
@@ -30,7 +30,7 @@ public class TargetBlock extends Block
     
     public TargetBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)TargetBlock.OUTPUT_POWER, 0));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(TargetBlock.OUTPUT_POWER, 0)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -73,14 +73,14 @@ public class TargetBlock extends Block
     }
     
     private static void setOutputPower(final LevelAccessor debug0, final BlockState debug1, final int debug2, final BlockPos debug3, final int debug4) {
-        debug0.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)TargetBlock.OUTPUT_POWER, debug2), 3);
+        debug0.setBlock(debug3, (debug1).setValue(TargetBlock.OUTPUT_POWER, debug2), 3); // MagmaCube - decompile fix
         debug0.getBlockTicks().scheduleTick(debug3, debug1.getBlock(), debug4);
     }
     
     @Override
     public void tick(final BlockState debug1, final ServerLevel debug2, final BlockPos debug3, final Random debug4) {
         if (debug1.getValue((Property<Integer>)TargetBlock.OUTPUT_POWER) != 0) {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)TargetBlock.OUTPUT_POWER, 0), 3);
+            debug2.setBlock(debug3, (debug1).setValue(TargetBlock.OUTPUT_POWER, 0), 3); // MagmaCube - decompile fix
         }
     }
     
@@ -105,7 +105,7 @@ public class TargetBlock extends Block
             return;
         }
         if (debug1.getValue((Property<Integer>)TargetBlock.OUTPUT_POWER) > 0 && !debug2.getBlockTicks().hasScheduledTick(debug3, this)) {
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)TargetBlock.OUTPUT_POWER, 0), 18);
+            debug2.setBlock(debug3, (debug1).setValue(TargetBlock.OUTPUT_POWER, 0), 18); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/level/block/TntBlock.java b/src/main/java/net/minecraft/world/level/block/TntBlock.java
index 05253346066dec9ec12daa81fb23a5b9d15db8be..77e0be37dff7dee2807946d81943993173b188a2 100644
--- a/src/main/java/net/minecraft/world/level/block/TntBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TntBlock.java
@@ -31,7 +31,7 @@ public class TntBlock extends Block
     
     public TntBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)TntBlock.UNSTABLE, false));
+        this.registerDefaultState((this.defaultBlockState()).setValue(TntBlock.UNSTABLE, false)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -93,7 +93,7 @@ public class TntBlock extends Block
             debug2.setBlock(debug3, Blocks.AIR.defaultBlockState(), 11);
             if (!debug4.isCreative()) {
                 if (debug8 == Items.FLINT_AND_STEEL) {
-                    debug7.hurtAndBreak(1, debug4, debug1 -> debug1.broadcastBreakEvent(debug5));
+                    debug7.hurtAndBreak(1, debug4, debug1l -> debug1l.broadcastBreakEvent(debug5)); // MagmaCube - decompile fix
                 }
                 else {
                     debug7.shrink(1);
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
index 864906048a4434b1601725615224d4a757c89836..0069cb7bd4bef9908e0725dbbb11955f6d15f18e 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
@@ -41,7 +41,7 @@ public class TripWireBlock extends Block
     
     public TripWireBlock(final TripWireHookBlock debug1, final Properties debug2) {
         super(debug2);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)TripWireBlock.POWERED, false)).setValue((Property<Comparable>)TripWireBlock.ATTACHED, false)).setValue((Property<Comparable>)TripWireBlock.DISARMED, false)).setValue((Property<Comparable>)TripWireBlock.NORTH, false)).setValue((Property<Comparable>)TripWireBlock.EAST, false)).setValue((Property<Comparable>)TripWireBlock.SOUTH, false)).setValue((Property<Comparable>)TripWireBlock.WEST, false));
+        this.registerDefaultState((((((((this.stateDefinition.any()).setValue(TripWireBlock.POWERED, false)).setValue(TripWireBlock.ATTACHED, false)).setValue(TripWireBlock.DISARMED, false)).setValue(TripWireBlock.NORTH, false)).setValue(TripWireBlock.EAST, false)).setValue(TripWireBlock.SOUTH, false)).setValue(TripWireBlock.WEST, false)); // MagmaCube - decompile fix
         this.hook = debug1;
     }
     
@@ -54,13 +54,13 @@ public class TripWireBlock extends Block
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
         final BlockGetter debug2 = debug1.getLevel();
         final BlockPos debug3 = debug1.getClickedPos();
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)TripWireBlock.NORTH, this.shouldConnectTo(debug2.getBlockState(debug3.north()), Direction.NORTH))).setValue((Property<Comparable>)TripWireBlock.EAST, this.shouldConnectTo(debug2.getBlockState(debug3.east()), Direction.EAST))).setValue((Property<Comparable>)TripWireBlock.SOUTH, this.shouldConnectTo(debug2.getBlockState(debug3.south()), Direction.SOUTH))).setValue((Property<Comparable>)TripWireBlock.WEST, this.shouldConnectTo(debug2.getBlockState(debug3.west()), Direction.WEST));
+        return ((((this.defaultBlockState()).setValue(TripWireBlock.NORTH, this.shouldConnectTo(debug2.getBlockState(debug3.north()), Direction.NORTH))).setValue(TripWireBlock.EAST, this.shouldConnectTo(debug2.getBlockState(debug3.east()), Direction.EAST))).setValue(TripWireBlock.SOUTH, this.shouldConnectTo(debug2.getBlockState(debug3.south()), Direction.SOUTH))).setValue(TripWireBlock.WEST, this.shouldConnectTo(debug2.getBlockState(debug3.west()), Direction.WEST)); // MagmaCube - decompile fix
     }
     
     @Override
     public BlockState updateShape(final BlockState debug1, final Direction debug2, final BlockState debug3, final LevelAccessor debug4, final BlockPos debug5, final BlockPos debug6) {
         if (debug2.getAxis().isHorizontal()) {
-            return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)TripWireBlock.PROPERTY_BY_DIRECTION.get(debug2), this.shouldConnectTo(debug3, debug2));
+            return (debug1).setValue(TripWireBlock.PROPERTY_BY_DIRECTION.get(debug2), this.shouldConnectTo(debug3, debug2)); // MagmaCube - decompile fix
         }
         return super.updateShape(debug1, debug2, debug3, debug4, debug5, debug6);
     }
@@ -78,13 +78,13 @@ public class TripWireBlock extends Block
         if (debug5 || debug1.is(debug4.getBlock())) {
             return;
         }
-        this.updateSource(debug2, debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)TripWireBlock.POWERED, true));
+        this.updateSource(debug2, debug3, (debug1).setValue(TripWireBlock.POWERED, true)); // MagmaCube - decompile fix
     }
     
     @Override
     public void playerWillDestroy(final Level debug1, final BlockPos debug2, final BlockState debug3, final Player debug4) {
         if (!debug1.isClientSide && !debug4.getMainHandItem().isEmpty() && debug4.getMainHandItem().getItem() == Items.SHEARS) {
-            debug1.setBlock(debug2, ((StateHolder<O, BlockState>)debug3).setValue((Property<Comparable>)TripWireBlock.DISARMED, true), 4);
+            debug1.setBlock(debug2, (debug3).setValue(TripWireBlock.DISARMED, true), 4); // MagmaCube - decompile fix
         }
         super.playerWillDestroy(debug1, debug2, debug3, debug4);
     }
@@ -96,7 +96,7 @@ public class TripWireBlock extends Block
                 final BlockPos debug6 = debug2.relative(debug4, debug5);
                 final BlockState debug7 = debug1.getBlockState(debug6);
                 if (debug7.is(this.hook)) {
-                    if (debug7.getValue((Property<Comparable>)TripWireHookBlock.FACING) == debug4.getOpposite()) {
+                    if (debug7.getValue(TripWireHookBlock.FACING) == debug4.getOpposite()) { // MagmaCube - decompile fix
                         this.hook.calculateState(debug1, debug6, debug7, false, true, debug5, debug3);
                         break;
                     }
@@ -145,7 +145,7 @@ public class TripWireBlock extends Block
             }
         }
         if (debug5 != debug4) {
-            debug3 = ((StateHolder<O, BlockState>)debug3).setValue((Property<Comparable>)TripWireBlock.POWERED, debug5);
+            debug3 = (debug3).setValue(TripWireBlock.POWERED, debug5); // MagmaCube - decompile fix
             debug1.setBlock(debug2, debug3, 3);
             this.updateSource(debug1, debug2, debug3);
         }
@@ -157,7 +157,7 @@ public class TripWireBlock extends Block
     public boolean shouldConnectTo(final BlockState debug1, final Direction debug2) {
         final Block debug3 = debug1.getBlock();
         if (debug3 == this.hook) {
-            return debug1.getValue((Property<Comparable>)TripWireHookBlock.FACING) == debug2.getOpposite();
+            return debug1.getValue(TripWireHookBlock.FACING) == debug2.getOpposite(); // MagmaCube - decompile fix
         }
         return debug3 == this;
     }
@@ -166,13 +166,13 @@ public class TripWireBlock extends Block
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
         switch (debug2) {
             case CLOCKWISE_180: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)TripWireBlock.NORTH, (Comparable)debug1.getValue((Property<V>)TripWireBlock.SOUTH))).setValue((Property<Comparable>)TripWireBlock.EAST, (Comparable)debug1.getValue((Property<V>)TripWireBlock.WEST))).setValue((Property<Comparable>)TripWireBlock.SOUTH, (Comparable)debug1.getValue((Property<V>)TripWireBlock.NORTH))).setValue((Property<Comparable>)TripWireBlock.WEST, (Comparable)debug1.getValue((Property<V>)TripWireBlock.EAST));
+                return ((((debug1).setValue(TripWireBlock.NORTH, debug1.getValue(TripWireBlock.SOUTH))).setValue(TripWireBlock.EAST, debug1.getValue(TripWireBlock.WEST))).setValue(TripWireBlock.SOUTH, debug1.getValue(TripWireBlock.NORTH))).setValue(TripWireBlock.WEST, debug1.getValue(TripWireBlock.EAST)); // MagmaCube - decompile fix
             }
             case COUNTERCLOCKWISE_90: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)TripWireBlock.NORTH, (Comparable)debug1.getValue((Property<V>)TripWireBlock.EAST))).setValue((Property<Comparable>)TripWireBlock.EAST, (Comparable)debug1.getValue((Property<V>)TripWireBlock.SOUTH))).setValue((Property<Comparable>)TripWireBlock.SOUTH, (Comparable)debug1.getValue((Property<V>)TripWireBlock.WEST))).setValue((Property<Comparable>)TripWireBlock.WEST, (Comparable)debug1.getValue((Property<V>)TripWireBlock.NORTH));
+                return ((((debug1).setValue(TripWireBlock.NORTH, debug1.getValue(TripWireBlock.EAST))).setValue(TripWireBlock.EAST, debug1.getValue(TripWireBlock.SOUTH))).setValue(TripWireBlock.SOUTH, debug1.getValue(TripWireBlock.WEST))).setValue(TripWireBlock.WEST, debug1.getValue(TripWireBlock.NORTH)); // MagmaCube - decompile fix
             }
             case CLOCKWISE_90: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)TripWireBlock.NORTH, (Comparable)debug1.getValue((Property<V>)TripWireBlock.WEST))).setValue((Property<Comparable>)TripWireBlock.EAST, (Comparable)debug1.getValue((Property<V>)TripWireBlock.NORTH))).setValue((Property<Comparable>)TripWireBlock.SOUTH, (Comparable)debug1.getValue((Property<V>)TripWireBlock.EAST))).setValue((Property<Comparable>)TripWireBlock.WEST, (Comparable)debug1.getValue((Property<V>)TripWireBlock.SOUTH));
+                return ((((debug1).setValue(TripWireBlock.NORTH, debug1.getValue(TripWireBlock.WEST))).setValue(TripWireBlock.EAST, debug1.getValue(TripWireBlock.NORTH))).setValue(TripWireBlock.SOUTH, debug1.getValue(TripWireBlock.EAST))).setValue(TripWireBlock.WEST, debug1.getValue(TripWireBlock.SOUTH)); // MagmaCube - decompile fix
             }
             default: {
                 return debug1;
@@ -184,10 +184,10 @@ public class TripWireBlock extends Block
     public BlockState mirror(final BlockState debug1, final Mirror debug2) {
         switch (debug2) {
             case LEFT_RIGHT: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)TripWireBlock.NORTH, (Comparable)debug1.getValue((Property<V>)TripWireBlock.SOUTH))).setValue((Property<Comparable>)TripWireBlock.SOUTH, (Comparable)debug1.getValue((Property<V>)TripWireBlock.NORTH));
+                return ((debug1).setValue(TripWireBlock.NORTH, debug1.getValue(TripWireBlock.SOUTH))).setValue(TripWireBlock.SOUTH, debug1.getValue(TripWireBlock.NORTH)); // MagmaCube - decompile fix
             }
             case FRONT_BACK: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)TripWireBlock.EAST, (Comparable)debug1.getValue((Property<V>)TripWireBlock.WEST))).setValue((Property<Comparable>)TripWireBlock.WEST, (Comparable)debug1.getValue((Property<V>)TripWireBlock.EAST));
+                return ((debug1).setValue(TripWireBlock.EAST, debug1.getValue(TripWireBlock.WEST))).setValue(TripWireBlock.WEST, debug1.getValue(TripWireBlock.EAST)); // MagmaCube - decompile fix
             }
             default: {
                 return super.mirror(debug1, debug2);
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
index 028fc86a72e9b2915bec38ffcf142af5e4c70ba0..5eff10b1c4ce88a1ffd0d81b24ad289715cc9253 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
@@ -39,7 +39,7 @@ public class TripWireHookBlock extends Block
     
     public TripWireHookBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)TripWireHookBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)TripWireHookBlock.POWERED, false)).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, false));
+        this.registerDefaultState(this.stateDefinition.any().setValue(TripWireHookBlock.FACING, Direction.NORTH).setValue(TripWireHookBlock.POWERED, false).setValue(TripWireHookBlock.ATTACHED, false)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -79,7 +79,7 @@ public class TripWireHookBlock extends Block
     @Nullable
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
-        BlockState debug2 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)TripWireHookBlock.POWERED, false)).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, false);
+        BlockState debug2 = ((this.defaultBlockState()).setValue(TripWireHookBlock.POWERED, false)).setValue(TripWireHookBlock.ATTACHED, false); // MagmaCube - decompile fix
         final LevelReader debug3 = debug1.getLevel();
         final BlockPos debug4 = debug1.getClickedPos();
         final Direction[] nearestLookingDirections;
@@ -87,7 +87,7 @@ public class TripWireHookBlock extends Block
         for (final Direction debug6 : nearestLookingDirections) {
             if (debug6.getAxis().isHorizontal()) {
                 final Direction debug7 = debug6.getOpposite();
-                debug2 = ((StateHolder<O, BlockState>)debug2).setValue((Property<Comparable>)TripWireHookBlock.FACING, debug7);
+                debug2 = (debug2).setValue(TripWireHookBlock.FACING, debug7); // MagmaCube - decompile fix
                 if (debug2.canSurvive(debug3, debug4)) {
                     return debug2;
                 }
@@ -114,7 +114,7 @@ public class TripWireHookBlock extends Block
             final BlockPos debug16 = debug2.relative(debug8, debug15);
             BlockState debug17 = debug1.getBlockState(debug16);
             if (debug17.is(Blocks.TRIPWIRE_HOOK)) {
-                if (debug17.getValue((Property<Comparable>)TripWireHookBlock.FACING) == debug8.getOpposite()) {
+                if (debug17.getValue(TripWireHookBlock.FACING) == debug8.getOpposite()) { // MagmaCube - decompile fix
                     debug13 = debug15;
                     break;
                 }
@@ -143,17 +143,17 @@ public class TripWireHookBlock extends Block
         }
         debug11 &= (debug13 > 1);
         debug12 &= debug11;
-        final BlockState debug20 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, debug11)).setValue((Property<Comparable>)TripWireHookBlock.POWERED, debug12);
+        final BlockState debug20 = ((this.defaultBlockState()).setValue(TripWireHookBlock.ATTACHED, debug11)).setValue(TripWireHookBlock.POWERED, debug12); // MagmaCube - decompile fix
         if (debug13 > 0) {
             final BlockPos debug16 = debug2.relative(debug8, debug13);
             final Direction debug21 = debug8.getOpposite();
-            debug1.setBlock(debug16, ((StateHolder<O, BlockState>)debug20).setValue((Property<Comparable>)TripWireHookBlock.FACING, debug21), 3);
+            debug1.setBlock(debug16, (debug20).setValue(TripWireHookBlock.FACING, debug21), 3); // MagmaCube - decompile fix
             this.notifyNeighbors(debug1, debug16, debug21);
             this.playSound(debug1, debug16, debug11, debug12, debug9, debug10);
         }
         this.playSound(debug1, debug2, debug11, debug12, debug9, debug10);
         if (!debug4) {
-            debug1.setBlock(debug2, ((StateHolder<O, BlockState>)debug20).setValue((Property<Comparable>)TripWireHookBlock.FACING, debug8), 3);
+            debug1.setBlock(debug2, (debug20).setValue(TripWireHookBlock.FACING, debug8), 3); // MagmaCube - decompile fix
             if (debug5) {
                 this.notifyNeighbors(debug1, debug2, debug8);
             }
@@ -163,7 +163,7 @@ public class TripWireHookBlock extends Block
                 final BlockPos debug23 = debug2.relative(debug8, debug22);
                 final BlockState debug24 = debug14[debug22];
                 if (debug24 != null) {
-                    debug1.setBlock(debug23, ((StateHolder<O, BlockState>)debug24).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, debug11), 3);
+                    debug1.setBlock(debug23, (debug24).setValue(TripWireHookBlock.ATTACHED, debug11), 3); // MagmaCube - decompile fix
                     if (!debug1.getBlockState(debug23).isAir()) {}
                 }
             }
@@ -222,7 +222,7 @@ public class TripWireHookBlock extends Block
         if (!debug1.getValue((Property<Boolean>)TripWireHookBlock.POWERED)) {
             return 0;
         }
-        if (debug1.getValue((Property<Comparable>)TripWireHookBlock.FACING) == debug4) {
+        if (debug1.getValue(TripWireHookBlock.FACING) == debug4) { // MagmaCube - decompile fix
             return 15;
         }
         return 0;
@@ -235,7 +235,7 @@ public class TripWireHookBlock extends Block
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)TripWireHookBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)TripWireHookBlock.FACING)));
+        return (debug1).setValue(TripWireHookBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)TripWireHookBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
index 6ebc918d1ae6c72a3fce64d593ae6fd502eaf63b..54f75553f1bc48405ee69f8181ef3e80a5dac6ab 100644
--- a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
@@ -40,7 +40,7 @@ public class TurtleEggBlock extends Block
     
     public TurtleEggBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)TurtleEggBlock.HATCH, 0)).setValue((Property<Comparable>)TurtleEggBlock.EGGS, 1));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(TurtleEggBlock.HATCH, 0)).setValue(TurtleEggBlock.EGGS, 1)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -76,7 +76,7 @@ public class TurtleEggBlock extends Block
             debug1.destroyBlock(debug2, false);
         }
         else {
-            debug1.setBlock(debug2, ((StateHolder<O, BlockState>)debug3).setValue((Property<Comparable>)TurtleEggBlock.EGGS, debug4 - 1), 2);
+            debug1.setBlock(debug2, (debug3).setValue(TurtleEggBlock.EGGS, debug4 - 1), 2); // MagmaCube - decompile fix
             debug1.levelEvent(2001, debug2, Block.getId(debug3));
         }
     }
@@ -87,7 +87,7 @@ public class TurtleEggBlock extends Block
             final int debug5 = debug1.getValue((Property<Integer>)TurtleEggBlock.HATCH);
             if (debug5 < 2) {
                 debug2.playSound(null, debug3, SoundEvents.TURTLE_EGG_CRACK, SoundSource.BLOCKS, 0.7f, 0.9f + debug4.nextFloat() * 0.2f);
-                debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)TurtleEggBlock.HATCH, debug5 + 1), 2);
+                debug2.setBlock(debug3, (debug1).setValue(TurtleEggBlock.HATCH, debug5 + 1), 2); // MagmaCube - decompile fix
             }
             else {
                 debug2.playSound(null, debug3, SoundEvents.TURTLE_EGG_HATCH, SoundSource.BLOCKS, 0.7f, 0.9f + debug4.nextFloat() * 0.2f);
@@ -140,7 +140,7 @@ public class TurtleEggBlock extends Block
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
         final BlockState debug2 = debug1.getLevel().getBlockState(debug1.getClickedPos());
         if (debug2.is(this)) {
-            return ((StateHolder<O, BlockState>)debug2).setValue((Property<Comparable>)TurtleEggBlock.EGGS, Math.min(4, debug2.getValue((Property<Integer>)TurtleEggBlock.EGGS) + 1));
+            return (debug2).setValue(TurtleEggBlock.EGGS, Math.min(4, debug2.getValue((Property<Integer>)TurtleEggBlock.EGGS) + 1)); // MagmaCube - decompile fix
         }
         return super.getStateForPlacement(debug1);
     }
diff --git a/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java b/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java
index 5d85ec1f9211be6aa4cc59f527b7c63fdc3f675a..0bca98ab0fa450b8a19fa399ca74eb77df7a8dbf 100644
--- a/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java
@@ -26,7 +26,7 @@ public class WallBannerBlock extends AbstractBannerBlock
     
     public WallBannerBlock(final DyeColor debug1, final Properties debug2) {
         super(debug1, debug2);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)WallBannerBlock.FACING, Direction.NORTH));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(WallBannerBlock.FACING, Direction.NORTH)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -49,7 +49,7 @@ public class WallBannerBlock extends AbstractBannerBlock
     
     @Override
     public VoxelShape getShape(final BlockState debug1, final BlockGetter debug2, final BlockPos debug3, final CollisionContext debug4) {
-        return WallBannerBlock.SHAPES.get(debug1.getValue((Property<Object>)WallBannerBlock.FACING));
+        return WallBannerBlock.SHAPES.get(debug1.getValue(WallBannerBlock.FACING)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -62,7 +62,7 @@ public class WallBannerBlock extends AbstractBannerBlock
         for (final Direction debug6 : nearestLookingDirections) {
             if (debug6.getAxis().isHorizontal()) {
                 final Direction debug7 = debug6.getOpposite();
-                debug2 = ((StateHolder<O, BlockState>)debug2).setValue((Property<Comparable>)WallBannerBlock.FACING, debug7);
+                debug2 = (debug2).setValue(WallBannerBlock.FACING, debug7); // MagmaCube - decompile fix
                 if (debug2.canSurvive(debug3, debug4)) {
                     return debug2;
                 }
@@ -73,7 +73,7 @@ public class WallBannerBlock extends AbstractBannerBlock
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)WallBannerBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)WallBannerBlock.FACING)));
+        return (debug1).setValue(WallBannerBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)WallBannerBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/WallBlock.java b/src/main/java/net/minecraft/world/level/block/WallBlock.java
index 87fb413cd07f77264a2b775d56fbbf69a486acf3..87baa327168eb6c5b382f1fe550d2b498cf91cb9 100644
--- a/src/main/java/net/minecraft/world/level/block/WallBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallBlock.java
@@ -46,7 +46,7 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
     
     public WallBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)WallBlock.UP, true)).setValue(WallBlock.NORTH_WALL, WallSide.NONE)).setValue(WallBlock.EAST_WALL, WallSide.NONE)).setValue(WallBlock.SOUTH_WALL, WallSide.NONE)).setValue(WallBlock.WEST_WALL, WallSide.NONE)).setValue((Property<Comparable>)WallBlock.WATERLOGGED, false));
+        this.registerDefaultState(((((((this.stateDefinition.any()).setValue(WallBlock.UP, true)).setValue(WallBlock.NORTH_WALL, WallSide.NONE)).setValue(WallBlock.EAST_WALL, WallSide.NONE)).setValue(WallBlock.SOUTH_WALL, WallSide.NONE)).setValue(WallBlock.WEST_WALL, WallSide.NONE)).setValue(WallBlock.WATERLOGGED, false)); // MagmaCube - decompile fix
         this.shapeByIndex = this.makeShapes(4.0f, 3.0f, 16.0f, 0.0f, 14.0f, 16.0f);
         this.collisionShapeByIndex = this.makeShapes(4.0f, 3.0f, 24.0f, 0.0f, 24.0f, 24.0f);
     }
@@ -75,7 +75,7 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
         final VoxelShape debug17 = Block.box(debug9, debug4, debug9, debug10, debug6, 16.0);
         final VoxelShape debug18 = Block.box(0.0, debug4, debug9, debug10, debug6, debug10);
         final VoxelShape debug19 = Block.box(debug9, debug4, debug9, 16.0, debug6, debug10);
-        final ImmutableMap.Builder<BlockState, VoxelShape> debug20 = (ImmutableMap.Builder<BlockState, VoxelShape>)ImmutableMap.builder();
+        final ImmutableMap.Builder<BlockState, VoxelShape> debug20 = ImmutableMap.builder(); // MagmaCube - decompile fix
         for (final Boolean debug21 : WallBlock.UP.getPossibleValues()) {
             for (final WallSide debug22 : WallBlock.EAST_WALL.getPossibleValues()) {
                 for (final WallSide debug23 : WallBlock.NORTH_WALL.getPossibleValues()) {
@@ -89,9 +89,9 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
                             if (debug21) {
                                 debug26 = Shapes.or(debug26, debug11);
                             }
-                            final BlockState debug27 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)WallBlock.UP, debug21)).setValue(WallBlock.EAST_WALL, debug22)).setValue(WallBlock.WEST_WALL, debug24)).setValue(WallBlock.NORTH_WALL, debug23)).setValue(WallBlock.SOUTH_WALL, debug25);
-                            debug20.put(((StateHolder<O, Object>)debug27).setValue((Property<Comparable>)WallBlock.WATERLOGGED, false), (Object)debug26);
-                            debug20.put(((StateHolder<O, Object>)debug27).setValue((Property<Comparable>)WallBlock.WATERLOGGED, true), (Object)debug26);
+                            final BlockState debug27 = (((((this.defaultBlockState()).setValue(WallBlock.UP, debug21)).setValue(WallBlock.EAST_WALL, debug22)).setValue(WallBlock.WEST_WALL, debug24)).setValue(WallBlock.NORTH_WALL, debug23)).setValue(WallBlock.SOUTH_WALL, debug25); // MagmaCube - decompile fix
+                            debug20.put((debug27).setValue(WallBlock.WATERLOGGED, false), debug26); // MagmaCube - decompile fix
+                            debug20.put((debug27).setValue(WallBlock.WATERLOGGED, true), debug26); // MagmaCube - decompile fix
                         }
                     }
                 }
@@ -140,7 +140,7 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
         final boolean debug16 = this.connectsTo(debug11, debug11.isFaceSturdy(debug2, debug6, Direction.WEST), Direction.WEST);
         final boolean debug17 = this.connectsTo(debug12, debug12.isFaceSturdy(debug2, debug7, Direction.NORTH), Direction.NORTH);
         final boolean debug18 = this.connectsTo(debug13, debug13.isFaceSturdy(debug2, debug8, Direction.EAST), Direction.EAST);
-        final BlockState debug19 = ((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)WallBlock.WATERLOGGED, debug4.getType() == Fluids.WATER);
+        final BlockState debug19 = (this.defaultBlockState()).setValue(WallBlock.WATERLOGGED, debug4.getType() == Fluids.WATER); // MagmaCube - decompile fix
         return this.updateShape(debug2, debug19, debug9, debug14, debug15, debug16, debug17, debug18);
     }
     
@@ -188,7 +188,7 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
     private BlockState updateShape(final LevelReader debug1, final BlockState debug2, final BlockPos debug3, final BlockState debug4, final boolean debug5, final boolean debug6, final boolean debug7, final boolean debug8) {
         final VoxelShape debug9 = debug4.getCollisionShape(debug1, debug3).getFaceShape(Direction.DOWN);
         final BlockState debug10 = this.updateSides(debug2, debug5, debug6, debug7, debug8, debug9);
-        return ((StateHolder<O, BlockState>)debug10).setValue((Property<Comparable>)WallBlock.UP, this.shouldRaisePost(debug10, debug4, debug9));
+        return (debug10).setValue(WallBlock.UP, this.shouldRaisePost(debug10, debug4, debug9)); // MagmaCube - decompile fix
     }
     
     private boolean shouldRaisePost(final BlockState debug1, final BlockState debug2, final VoxelShape debug3) {
@@ -213,7 +213,7 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
     }
     
     private BlockState updateSides(final BlockState debug1, final boolean debug2, final boolean debug3, final boolean debug4, final boolean debug5, final VoxelShape debug6) {
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue(WallBlock.NORTH_WALL, this.makeWallState(debug2, debug6, WallBlock.NORTH_TEST))).setValue(WallBlock.EAST_WALL, this.makeWallState(debug3, debug6, WallBlock.EAST_TEST))).setValue(WallBlock.SOUTH_WALL, this.makeWallState(debug4, debug6, WallBlock.SOUTH_TEST))).setValue(WallBlock.WEST_WALL, this.makeWallState(debug5, debug6, WallBlock.WEST_TEST));
+        return ((((debug1).setValue(WallBlock.NORTH_WALL, this.makeWallState(debug2, debug6, WallBlock.NORTH_TEST))).setValue(WallBlock.EAST_WALL, this.makeWallState(debug3, debug6, WallBlock.EAST_TEST))).setValue(WallBlock.SOUTH_WALL, this.makeWallState(debug4, debug6, WallBlock.SOUTH_TEST))).setValue(WallBlock.WEST_WALL, this.makeWallState(debug5, debug6, WallBlock.WEST_TEST)); // MagmaCube - decompile fix
     }
     
     private WallSide makeWallState(final boolean debug1, final VoxelShape debug2, final VoxelShape debug3) {
@@ -248,13 +248,13 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
         switch (debug2) {
             case CLOCKWISE_180: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue(WallBlock.NORTH_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.SOUTH_WALL))).setValue(WallBlock.EAST_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.WEST_WALL))).setValue(WallBlock.SOUTH_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.NORTH_WALL))).setValue(WallBlock.WEST_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.EAST_WALL));
+                return ((((debug1).setValue(WallBlock.NORTH_WALL, debug1.getValue(WallBlock.SOUTH_WALL))).setValue(WallBlock.EAST_WALL, debug1.getValue(WallBlock.WEST_WALL))).setValue(WallBlock.SOUTH_WALL, debug1.getValue(WallBlock.NORTH_WALL))).setValue(WallBlock.WEST_WALL, debug1.getValue(WallBlock.EAST_WALL)); // MagmaCube - decompile fix
             }
             case COUNTERCLOCKWISE_90: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue(WallBlock.NORTH_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.EAST_WALL))).setValue(WallBlock.EAST_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.SOUTH_WALL))).setValue(WallBlock.SOUTH_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.WEST_WALL))).setValue(WallBlock.WEST_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.NORTH_WALL));
+                return ((((debug1).setValue(WallBlock.NORTH_WALL, debug1.getValue(WallBlock.EAST_WALL))).setValue(WallBlock.EAST_WALL, debug1.getValue(WallBlock.SOUTH_WALL))).setValue(WallBlock.SOUTH_WALL, debug1.getValue(WallBlock.WEST_WALL))).setValue(WallBlock.WEST_WALL, debug1.getValue(WallBlock.NORTH_WALL)); // MagmaCube - decompile fix
             }
             case CLOCKWISE_90: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue(WallBlock.NORTH_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.WEST_WALL))).setValue(WallBlock.EAST_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.NORTH_WALL))).setValue(WallBlock.SOUTH_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.EAST_WALL))).setValue(WallBlock.WEST_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.SOUTH_WALL));
+                return ((((debug1).setValue(WallBlock.NORTH_WALL, debug1.getValue(WallBlock.WEST_WALL))).setValue(WallBlock.EAST_WALL, debug1.getValue(WallBlock.NORTH_WALL))).setValue(WallBlock.SOUTH_WALL, debug1.getValue(WallBlock.EAST_WALL))).setValue(WallBlock.WEST_WALL, debug1.getValue(WallBlock.SOUTH_WALL)); // MagmaCube - decompile fix
             }
             default: {
                 return debug1;
@@ -266,10 +266,10 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock
     public BlockState mirror(final BlockState debug1, final Mirror debug2) {
         switch (debug2) {
             case LEFT_RIGHT: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue(WallBlock.NORTH_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.SOUTH_WALL))).setValue(WallBlock.SOUTH_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.NORTH_WALL));
+                return ((debug1).setValue(WallBlock.NORTH_WALL, debug1.getValue(WallBlock.SOUTH_WALL))).setValue(WallBlock.SOUTH_WALL, debug1.getValue(WallBlock.NORTH_WALL)); // MagmaCube - decompile fix
             }
             case FRONT_BACK: {
-                return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1).setValue(WallBlock.EAST_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.WEST_WALL))).setValue(WallBlock.WEST_WALL, (Comparable)debug1.getValue((Property<V>)WallBlock.EAST_WALL));
+                return ((debug1).setValue(WallBlock.EAST_WALL, debug1.getValue(WallBlock.WEST_WALL))).setValue(WallBlock.WEST_WALL, debug1.getValue(WallBlock.EAST_WALL)); // MagmaCube - decompile fix
             }
             default: {
                 return super.mirror(debug1, debug2);
diff --git a/src/main/java/net/minecraft/world/level/block/WallSkullBlock.java b/src/main/java/net/minecraft/world/level/block/WallSkullBlock.java
index f68dc7fd8283eddcc9d687648640314bda060498..ee89d719a0cf54eab513d09e7e5b7c5aeb0c7ac6 100644
--- a/src/main/java/net/minecraft/world/level/block/WallSkullBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallSkullBlock.java
@@ -23,7 +23,7 @@ public class WallSkullBlock extends AbstractSkullBlock
     
     protected WallSkullBlock(final SkullBlock.Type debug1, final Properties debug2) {
         super(debug1, debug2);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)WallSkullBlock.FACING, Direction.NORTH));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(WallSkullBlock.FACING, Direction.NORTH)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -33,7 +33,7 @@ public class WallSkullBlock extends AbstractSkullBlock
     
     @Override
     public VoxelShape getShape(final BlockState debug1, final BlockGetter debug2, final BlockPos debug3, final CollisionContext debug4) {
-        return WallSkullBlock.AABBS.get(debug1.getValue((Property<Object>)WallSkullBlock.FACING));
+        return WallSkullBlock.AABBS.get(debug1.getValue(WallSkullBlock.FACING)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -46,7 +46,7 @@ public class WallSkullBlock extends AbstractSkullBlock
         for (final Direction debug6 : nearestLookingDirections) {
             if (debug6.getAxis().isHorizontal()) {
                 final Direction debug7 = debug6.getOpposite();
-                debug2 = ((StateHolder<O, BlockState>)debug2).setValue((Property<Comparable>)WallSkullBlock.FACING, debug7);
+                debug2 = (debug2).setValue(WallSkullBlock.FACING, debug7); // MagmaCube - decompile fix
                 if (!debug3.getBlockState(debug4.relative(debug6)).canBeReplaced(debug1)) {
                     return debug2;
                 }
@@ -57,7 +57,7 @@ public class WallSkullBlock extends AbstractSkullBlock
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)WallSkullBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)WallSkullBlock.FACING)));
+        return (debug1).setValue(WallSkullBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)WallSkullBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java b/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java
index 9691e357a95603d86d9f94db26174cfecacd12ab..924074f060e22dc7c78f8ed1a22a61eecacf73c5 100644
--- a/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java
@@ -30,7 +30,7 @@ public class WallTorchBlock extends TorchBlock
     
     protected WallTorchBlock(final Properties debug1, final ParticleOptions debug2) {
         super(debug1, debug2);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.NORTH));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(WallTorchBlock.FACING, Direction.NORTH)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -44,7 +44,7 @@ public class WallTorchBlock extends TorchBlock
     }
     
     public static VoxelShape getShape(final BlockState debug0) {
-        return WallTorchBlock.AABBS.get(debug0.getValue((Property<Object>)WallTorchBlock.FACING));
+        return WallTorchBlock.AABBS.get(debug0.getValue(WallTorchBlock.FACING)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -66,7 +66,7 @@ public class WallTorchBlock extends TorchBlock
         for (final Direction debug6 : nearestLookingDirections) {
             if (debug6.getAxis().isHorizontal()) {
                 final Direction debug7 = debug6.getOpposite();
-                debug2 = ((StateHolder<O, BlockState>)debug2).setValue((Property<Comparable>)WallTorchBlock.FACING, debug7);
+                debug2 = (debug2).setValue(WallTorchBlock.FACING, debug7); // MagmaCube - decompile fix
                 if (debug2.canSurvive(debug3, debug4)) {
                     return debug2;
                 }
@@ -98,7 +98,7 @@ public class WallTorchBlock extends TorchBlock
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)WallTorchBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)WallTorchBlock.FACING)));
+        return (debug1).setValue(WallTorchBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)WallTorchBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
index d9c338f1962bfd986a5b7b8bdf634754aaeb629d..ff2aad689eb65a36a8059573679d7d8ae77718ce 100644
--- a/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
@@ -23,7 +23,7 @@ public class WeightedPressurePlateBlock extends BasePressurePlateBlock
     
     protected WeightedPressurePlateBlock(final int debug1, final Properties debug2) {
         super(debug2);
-        this.registerDefaultState(((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)WeightedPressurePlateBlock.POWER, 0));
+        this.registerDefaultState((this.stateDefinition.any()).setValue(WeightedPressurePlateBlock.POWER, 0)); // MagmaCube - decompile fix
         this.maxWeight = debug1;
     }
     
@@ -54,7 +54,7 @@ public class WeightedPressurePlateBlock extends BasePressurePlateBlock
     
     @Override
     protected BlockState setSignalForState(final BlockState debug1, final int debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)WeightedPressurePlateBlock.POWER, debug2);
+        return (debug1).setValue(WeightedPressurePlateBlock.POWER, debug2); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index eb449f6c584cd946932f04d079c0d1a39fafd933..3056695f3859810bd89457d76691f7cc03d99cb0 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -115,7 +115,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     }
     
     public static Map<Item, Integer> getFuel() {
-        final Map<Item, Integer> debug0 = (Map<Item, Integer>)Maps.newLinkedHashMap();
+        final Map<Item, Integer> debug0 = Maps.newLinkedHashMap(); // MagmaCube - decompile fix
         add(debug0, Items.LAVA_BUCKET, 20000);
         add(debug0, Blocks.COAL_BLOCK, 16000);
         add(debug0, Items.BLAZE_ROD, 2400);
@@ -216,7 +216,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         this.litDuration = this.getBurnDuration(this.items.get(1));
         final CompoundTag debug3 = debug2.getCompound("RecipesUsed");
         for (final String debug4 : debug3.getAllKeys()) {
-            this.recipesUsed.put((Object)new ResourceLocation(debug4), debug3.getInt(debug4));
+            this.recipesUsed.put(new ResourceLocation(debug4), debug3.getInt(debug4)); // MagmaCube - decompile fix
         }
     }
     
@@ -228,7 +228,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         debug1.putShort("CookTimeTotal", (short)this.cookingTotalTime);
         ContainerHelper.saveAllItems(debug1, this.items);
         final CompoundTag debug3 = new CompoundTag();
-        this.recipesUsed.forEach((debug1, debug2) -> debug3.putInt(debug1.toString(), debug2));
+        this.recipesUsed.forEach((debug1l, debug2) -> debug3.putInt(debug1l.toString(), debug2)); // MagmaCube - decompile fix
         debug1.put("RecipesUsed", debug3);
         return debug1;
     }
@@ -243,7 +243,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         if (!this.level.isClientSide) {
             final ItemStack debug3 = this.items.get(1);
             if (this.isLit() || (!debug3.isEmpty() && !this.items.get(0).isEmpty())) {
-                final Recipe<?> debug4 = (Recipe<?>)this.level.getRecipeManager().getRecipeFor(this.recipeType, this, this.level).orElse((AbstractCookingRecipe)null);
+                final Recipe<?> debug4 = (Recipe<?>)this.level.getRecipeManager().getRecipeFor(this.recipeType, this, this.level).orElse(null); // MagmaCube - decompile fix
                 if (!this.isLit() && this.canBurn(debug4)) {
                     this.litTime = this.getBurnDuration(debug3);
                     this.litDuration = this.litTime;
@@ -277,7 +277,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
             }
             if (debug1 != this.isLit()) {
                 debug2 = true;
-                this.level.setBlock(this.worldPosition, ((StateHolder<O, BlockState>)this.level.getBlockState(this.worldPosition)).setValue((Property<Comparable>)AbstractFurnaceBlock.LIT, this.isLit()), 3);
+                this.level.setBlock(this.worldPosition, (this.level.getBlockState(this.worldPosition)).setValue(AbstractFurnaceBlock.LIT, this.isLit()), 3); // MagmaCube - decompile fix
             }
         }
         if (debug2) {
@@ -328,7 +328,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     }
     
     protected int getTotalCookTime() {
-        return this.level.getRecipeManager().getRecipeFor(this.recipeType, this, this.level).map((Function<? super AbstractCookingRecipe, ? extends Integer>)AbstractCookingRecipe::getCookingTime).orElse(200);
+        return this.level.getRecipeManager().getRecipeFor(this.recipeType, this, this.level).map(AbstractCookingRecipe::getCookingTime).orElse(200); // MagmaCube - decompile fix
     }
     
     public static boolean isFuel(final ItemStack debug0) {
@@ -433,7 +433,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     public void setRecipeUsed(@Nullable final Recipe<?> debug1) {
         if (debug1 != null) {
             final ResourceLocation debug2 = debug1.getId();
-            this.recipesUsed.addTo((Object)debug2, 1);
+            this.recipesUsed.addTo(debug2, 1); // MagmaCube - decompile fix
         }
     }
     
@@ -454,13 +454,11 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     }
     
     public List<Recipe<?>> getRecipesToAwardAndPopExperience(final Level debug1, final Vec3 debug2) {
-        final List<Recipe<?>> debug5 = (List<Recipe<?>>)Lists.newArrayList();
+        final List<Recipe<?>> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Object2IntMap.Entry<ResourceLocation> debug6 : this.recipesUsed.object2IntEntrySet()) {
-            final List<AbstractCookingRecipe> list;
-            final Object2IntMap.Entry entry;
             debug1.getRecipeManager().byKey((ResourceLocation)debug6.getKey()).ifPresent(debug4 -> {
-                list.add(debug4);
-                createExperience(debug1, debug2, entry.getIntValue(), debug4.getExperience());
+                debug5.add(debug4); // MagmaCube - decompile fix
+                createExperience(debug1, debug2, debug6.getIntValue(), ((AbstractCookingRecipe) debug4).getExperience()); // MagmaCube - decompile fix
                 return;
             });
         }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java
index 22f6b801259de55a2e14660014c6a4e0f0377017..f26cf398aef64f5e7d958c648a6856015bd9bcf3 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java
@@ -133,15 +133,15 @@ public class BannerBlockEntity extends BlockEntity implements Nameable
     }
     
     public static List<Pair<BannerPattern, DyeColor>> createPatterns(final DyeColor debug0, @Nullable final ListTag debug1) {
-        final List<Pair<BannerPattern, DyeColor>> debug2 = (List<Pair<BannerPattern, DyeColor>>)Lists.newArrayList();
-        debug2.add((Pair<BannerPattern, DyeColor>)Pair.of((Object)BannerPattern.BASE, (Object)debug0));
+        final List<Pair<BannerPattern, DyeColor>> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
+        debug2.add((Pair<BannerPattern, DyeColor>)Pair.of(BannerPattern.BASE, debug0)); // MagmaCube - decompile fix
         if (debug1 != null) {
             for (int debug3 = 0; debug3 < debug1.size(); ++debug3) {
                 final CompoundTag debug4 = debug1.getCompound(debug3);
                 final BannerPattern debug5 = BannerPattern.byHash(debug4.getString("Pattern"));
                 if (debug5 != null) {
                     final int debug6 = debug4.getInt("Color");
-                    debug2.add((Pair<BannerPattern, DyeColor>)Pair.of((Object)debug5, (Object)DyeColor.byId(debug6)));
+                    debug2.add((Pair<BannerPattern, DyeColor>)Pair.of(debug5, DyeColor.byId(debug6))); // MagmaCube - decompile fix
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BannerPattern.java b/src/main/java/net/minecraft/world/level/block/entity/BannerPattern.java
index ea791630d4a9839f34120362036f0daab866e219..9928d36ac876fe871dc91a85ab794e4acaa592ec 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BannerPattern.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BannerPattern.java
@@ -109,11 +109,11 @@ public enum BannerPattern
         private final List<Pair<BannerPattern, DyeColor>> patterns;
         
         public Builder() {
-            this.patterns = (List<Pair<BannerPattern, DyeColor>>)Lists.newArrayList();
+            this.patterns = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         public Builder addPattern(final BannerPattern debug1, final DyeColor debug2) {
-            this.patterns.add((Pair<BannerPattern, DyeColor>)Pair.of((Object)debug1, (Object)debug2));
+            this.patterns.add((Pair<BannerPattern, DyeColor>)Pair.of(debug1, debug2)); // MagmaCube - decompile fix
             return this;
         }
         
@@ -123,7 +123,7 @@ public enum BannerPattern
                 final CompoundTag debug3 = new CompoundTag();
                 debug3.putString("Pattern", ((BannerPattern)debug2.getLeft()).hashname);
                 debug3.putInt("Color", ((DyeColor)debug2.getRight()).getId());
-                ((AbstractList<CompoundTag>)debug1).add(debug3);
+                debug1.add(debug3); // MagmaCube - decompile fix
             }
             return debug1;
         }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
index a721f04ffb7d49295ed75ba32cf022a167c19c98..9a8bd4902ccb6061e166bbc60d9fad541adc89b3 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
@@ -130,7 +130,7 @@ public class BarrelBlockEntity extends RandomizableContainerBlockEntity
     }
     
     private void updateBlockState(final BlockState debug1, final boolean debug2) {
-        this.level.setBlock(this.getBlockPos(), ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)BarrelBlock.OPEN, debug2), 3);
+        this.level.setBlock(this.getBlockPos(), (debug1).setValue(BarrelBlock.OPEN, debug2), 3); // MagmaCube - decompile fix
     }
     
     private void playSound(final BlockState debug1, final SoundEvent debug2) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
index b4887e66b23adabde6ed656e4b88d4e0e5ed8551..4bb8aaaa0cb17ae6c18b3ee745a742acc1f431a2 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
@@ -38,7 +38,7 @@ public class BeehiveBlockEntity extends BlockEntity implements TickableBlockEnti
     
     public BeehiveBlockEntity() {
         super(BlockEntityType.BEEHIVE);
-        this.stored = (List<BeeData>)Lists.newArrayList();
+        this.stored = Lists.newArrayList(); // MagmaCube - decompile fix
         this.savedFlowerPos = null;
     }
     
@@ -91,7 +91,7 @@ public class BeehiveBlockEntity extends BlockEntity implements TickableBlockEnti
     }
     
     private List<Entity> releaseAllOccupants(final BlockState debug1, final BeeReleaseStatus debug2) {
-        final List<Entity> debug5 = (List<Entity>)Lists.newArrayList();
+        final List<Entity> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
         this.stored.removeIf(debug4 -> this.releaseOccupant(debug1, debug4, debug5, debug2));
         return debug5;
     }
@@ -174,7 +174,7 @@ public class BeehiveBlockEntity extends BlockEntity implements TickableBlockEnti
                         if (debug12 + debug13 > 5) {
                             --debug13;
                         }
-                        this.level.setBlockAndUpdate(this.getBlockPos(), ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)BeehiveBlock.HONEY_LEVEL, debug12 + debug13));
+                        this.level.setBlockAndUpdate(this.getBlockPos(), (debug1).setValue(BeehiveBlock.HONEY_LEVEL, debug12 + debug13)); // MagmaCube - decompile fix
                     }
                 }
             }
@@ -274,7 +274,7 @@ public class BeehiveBlockEntity extends BlockEntity implements TickableBlockEnti
             debug3.put("EntityData", debug2.entityData);
             debug3.putInt("TicksInHive", debug2.ticksInHive);
             debug3.putInt("MinOccupationTicks", debug2.minOccupationTicks);
-            ((AbstractList<CompoundTag>)debug1).add(debug3);
+            debug1.add(debug3); // MagmaCube - decompile fix
         }
         return debug1;
     }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BellBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BellBlockEntity.java
index eb669c600f26e273bcdc8f4fc3478f38e515c5dc..d189f31a1f8348f73da82030a6d3189b675c318f 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BellBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BellBlockEntity.java
@@ -135,7 +135,7 @@ public class BellBlockEntity extends BlockEntity implements TickableBlockEntity
         if (debug1.isClientSide) {
             return;
         }
-        this.nearbyEntities.stream().filter((Predicate<? super Object>)this::isRaiderWithinRange).forEach((Consumer<? super Object>)this::glow);
+        this.nearbyEntities.stream().filter(this::isRaiderWithinRange).forEach(this::glow); // MagmaCube - decompile fix
     }
     
     private void showBellParticles(final Level debug1) {
@@ -144,33 +144,22 @@ public class BellBlockEntity extends BlockEntity implements TickableBlockEntity
         }
         final BlockPos debug5 = this.getBlockPos();
         final MutableInt debug6 = new MutableInt(16700985);
-        final int debug7 = (int)this.nearbyEntities.stream().filter(debug1 -> debug5.closerThan(debug1.position(), 48.0)).count();
-        final float debug8;
-        final Vec3i vec3i;
-        final float debug9;
-        final double debug10;
-        final double debug11;
-        final int n;
-        int debug12;
-        int debug13;
-        final MutableInt mutableInt;
-        int debug14;
-        double debug15;
-        double debug16;
-        double debug17;
-        this.nearbyEntities.stream().filter((Predicate<? super Object>)this::isRaiderWithinRange).forEach(debug4 -> {
-            debug8 = 1.0f;
-            debug9 = Mth.sqrt((debug4.getX() - vec3i.getX()) * (debug4.getX() - vec3i.getX()) + (debug4.getZ() - vec3i.getZ()) * (debug4.getZ() - vec3i.getZ()));
-            debug10 = vec3i.getX() + 0.5f + 1.0f / debug9 * (debug4.getX() - vec3i.getX());
-            debug11 = vec3i.getZ() + 0.5f + 1.0f / debug9 * (debug4.getZ() - vec3i.getZ());
-            for (debug12 = Mth.clamp((n - 21) / -2, 3, 15), debug13 = 0; debug13 < debug12; ++debug13) {
-                debug14 = mutableInt.addAndGet(5);
-                debug15 = FastColor.ARGB32.red(debug14) / 255.0;
-                debug16 = FastColor.ARGB32.green(debug14) / 255.0;
-                debug17 = FastColor.ARGB32.blue(debug14) / 255.0;
-                debug1.addParticle(ParticleTypes.ENTITY_EFFECT, debug10, vec3i.getY() + 0.5f, debug11, debug15, debug16, debug17);
+        // MagmaCube start - decompile fix
+        final int debug7 = (int)this.nearbyEntities.stream().filter(debug1l -> debug5.closerThan(debug1l.position(), 48.0)).count(); // MagmaCube - decompile fix
+        this.nearbyEntities.stream().filter(this::isRaiderWithinRange).forEach(debug4 -> {
+            float debug8 = 1.0f;
+            float debug9 = Mth.sqrt((debug4.getX() - debug5.getX()) * (debug4.getX() - debug5.getX()) + (debug4.getZ() - debug5.getZ()) * (debug4.getZ() - debug5.getZ()));
+            double debug10 = debug5.getX() + 0.5f + 1.0f / debug9 * (debug4.getX() - debug5.getX());
+            double debug11 = debug5.getZ() + 0.5f + 1.0f / debug9 * (debug4.getZ() - debug5.getZ());
+            for (int debug12 = Mth.clamp((debug7 - 21) / -2, 3, 15), debug13 = 0; debug13 < debug12; ++debug13) {
+                int debug14 = debug6.addAndGet(5);
+                double debug15 = FastColor.ARGB32.red(debug14) / 255.0;
+                double debug16 = FastColor.ARGB32.green(debug14) / 255.0;
+                double debug17 = FastColor.ARGB32.blue(debug14) / 255.0;
+                debug1.addParticle(ParticleTypes.ENTITY_EFFECT, debug10, debug5.getY() + 0.5f, debug11, debug15, debug16, debug17);
             }
         });
+        // MagmaCube end - decompile fix
     }
     
     private boolean isRaiderWithinRange(final LivingEntity debug1) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index 15710e5eeba054863ff68d8c44483bfa182da95a..85592e4b6608a8c1319c050e96d288af5e0744f3 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -69,14 +69,12 @@ public abstract class BlockEntity
     @Nullable
     public static BlockEntity loadStatic(final BlockState debug0, final CompoundTag debug1) {
         final String debug4 = debug1.getString("id");
-        final Object o;
-        final Object o2;
-        return Registry.BLOCK_ENTITY_TYPE.getOptional(new ResourceLocation(debug4)).map(debug1 -> {
+        return Registry.BLOCK_ENTITY_TYPE.getOptional(new ResourceLocation(debug4)).map(debug1l -> { // MagmaCube - decompile fix
             try {
-                return debug1.create();
+                return debug1l.create(); // MagmaCube - decompile fix
             }
             catch (Throwable debug5) {
-                BlockEntity.LOGGER.error("Failed to create block entity {}", o, (Object)debug5);
+                BlockEntity.LOGGER.error("Failed to create block entity {}", debug1l, debug5); // MagmaCube - decompile fix
                 return null;
             }
         }).map(debug3 -> {
@@ -85,7 +83,7 @@ public abstract class BlockEntity
                 return debug3;
             }
             catch (Throwable debug6) {
-                BlockEntity.LOGGER.error("Failed to load data for block entity {}", o2, (Object)debug6);
+                BlockEntity.LOGGER.error("Failed to load data for block entity {}", debug3, debug6); // MagmaCube - decompile fix
                 return null;
             }
         }).orElseGet(() -> {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
index a6e4391a05dd5aee667e503fdefa7640f5897dfd..b601502850f3ca60af97446b03b5d8f484fe08eb 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
@@ -142,7 +142,7 @@ public class BlockEntityType<T extends BlockEntity>
         }
         
         public static <T extends BlockEntity> Builder<T> of(final Supplier<? extends T> debug0, final Block... debug1) {
-            return new Builder<T>(debug0, (Set<Block>)ImmutableSet.copyOf((Object[])debug1));
+            return new Builder<T>(debug0, (Set<Block>)ImmutableSet.copyOf(debug1)); // MagmaCube - decompile fix
         }
         
         public BlockEntityType<T> build(final Type<?> debug1) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
index c5fcdbac1d7ce35022dada21f0331c7d62322848..98d85381aac15457c5976a2b3a3b58cfdd3b74e7 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -143,7 +143,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
                     return;
                 }
                 for (int debug8 = 0; debug8 < BrewingStandBlock.HAS_BOTTLE.length; ++debug8) {
-                    debug7 = ((StateHolder<O, BlockState>)debug7).setValue((Property<Comparable>)BrewingStandBlock.HAS_BOTTLE[debug8], debug6[debug8]);
+                    debug7 = (debug7).setValue(BrewingStandBlock.HAS_BOTTLE[debug8], debug6[debug8]); // MagmaCube - decompile fix
                 }
                 this.level.setBlock(this.worldPosition, debug7, 2);
             }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/ConduitBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/ConduitBlockEntity.java
index d200793bea6197e3ceb27241516a5959faeedab2..83069f84a9bdca2108ea6fd1e529b794fd7f6681 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/ConduitBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/ConduitBlockEntity.java
@@ -48,7 +48,7 @@ public class ConduitBlockEntity extends BlockEntity implements TickableBlockEnti
     
     public ConduitBlockEntity(final BlockEntityType<?> debug1) {
         super(debug1);
-        this.effectBlocks = (List<BlockPos>)Lists.newArrayList();
+        this.effectBlocks = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 9a699ba1db59dd32c1434d33624b9f59d2576ed9..28439c57b191b77cdb3475691dd55b1bbf68903c 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -172,8 +172,8 @@ TickableBlockEntity {
 
     private boolean isFullContainer(Container debug12, Direction debug2) {
         return HopperBlockEntity.getSlots(debug12, debug2).allMatch(debug1 -> {
-            ItemStack debug2 = debug12.getItem(debug1);
-            return debug2.getCount() >= debug2.getMaxStackSize();
+            ItemStack debug2l = debug12.getItem(debug1); // MagmaCube - decompile fix
+            return debug2l.getCount() >= debug2l.getMaxStackSize(); // MagmaCube - decompile fix
         });
     }
 
@@ -308,18 +308,19 @@ TickableBlockEntity {
 
     @Nullable
     public static Container getContainerAt(Level debug0, double debug1, double debug3, double debug5) {
-        Object debug11;
         Container debug7 = null;
         BlockPos debug8 = new BlockPos(debug1, debug3, debug5);
         BlockState debug9 = debug0.getBlockState(debug8);
         Block debug10 = debug9.getBlock();
+        BlockEntity debug11; // MagmaCube - decompile fix
         if (debug10 instanceof WorldlyContainerHolder) {
             debug7 = ((WorldlyContainerHolder)((Object)debug10)).getContainer(debug9, debug0, debug8);
         } else if (debug10.isEntityBlock() && (debug11 = debug0.getBlockEntity(debug8)) instanceof Container && (debug7 = (Container)debug11) instanceof ChestBlockEntity && debug10 instanceof ChestBlock) {
             debug7 = ChestBlock.getContainer((ChestBlock)debug10, debug9, debug0, debug8, true);
         }
-        if (debug7 == null && !(debug11 = debug0.getEntities((Entity)null, new AABB(debug1 - 0.5, debug3 - 0.5, debug5 - 0.5, debug1 + 0.5, debug3 + 0.5, debug5 + 0.5), EntitySelector.CONTAINER_ENTITY_SELECTOR)).isEmpty()) {
-            debug7 = (Container)debug11.get(debug0.random.nextInt(debug11.size()));
+        List<Entity> debug12; // MagmaCube - decompile fix
+        if (debug7 == null && !(debug12 = debug0.getEntities((Entity)null, new AABB(debug1 - 0.5, debug3 - 0.5, debug5 - 0.5, debug1 + 0.5, debug3 + 0.5, debug5 + 0.5), EntitySelector.CONTAINER_ENTITY_SELECTOR)).isEmpty()) { // MagmaCube - decompile fix
+            debug7 = (Container)debug12.get(debug0.random.nextInt(debug12.size())); // MagmaCube - decompile fix
         }
         return debug7;
     }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/JigsawBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/JigsawBlockEntity.java
index a7187275f359720b81b6fdf4b1d66d2ea04b4d5f..d1a692e48da10b9701dc92c89404bd122fdfcea1 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/JigsawBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/JigsawBlockEntity.java
@@ -127,7 +127,7 @@ extends BlockEntity {
         StructureFeatureManager debug6 = debug1.structureFeatureManager();
         Random debug7 = debug1.getRandom();
         BlockPos debug8 = this.getBlockPos();
-        ArrayList debug9 = Lists.newArrayList();
+        ArrayList<PoolElementStructurePiece> debug9 = Lists.newArrayList(); // MagmaCube - decompile fix
         StructureTemplate debug10 = new StructureTemplate();
         debug10.fillFromWorld(debug1, debug8, new BlockPos(1, 1, 1), false, null);
         SinglePoolElement debug11 = new SinglePoolElement(debug10);
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
index 219559d2f58b2f9e5f370f9a1f1545355ab2b525..b0df5684b9d7c320a3161effdeb93a610694fcd1 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
@@ -61,7 +61,7 @@ extends BlockEntity {
         this.color = DyeColor.byName(debug2.getString("Color"), DyeColor.BLACK);
         for (int debug3 = 0; debug3 < 4; ++debug3) {
             String debug4 = debug2.getString("Text" + (debug3 + 1));
-            MutableComponent debug5 = Component.Serializer.fromJson(debug4.isEmpty() ? "Â¥"Â¥"" : debug4);
+            MutableComponent debug5 = Component.Serializer.fromJson(debug4.isEmpty() ? "\"\"" : debug4); // MagmaCube - decompile fix
             if (this.level instanceof ServerLevel) {
                 try {
                     this.messages[debug3] = ComponentUtils.updateForEntity(this.createCommandSourceStack(null), debug5, null, 0);
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SkullBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SkullBlockEntity.java
index dbaf9c345af27523a6af4199365d427310ef0f08..cb2492a1ffea6e81ab2523ae463bc91b7e8f997d 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SkullBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SkullBlockEntity.java
@@ -125,7 +125,7 @@ public class SkullBlockEntity extends BlockEntity implements TickableBlockEntity
         if (debug == null) {
             return debug0;
         }
-        final Property debug2 = (Property)Iterables.getFirst((Iterable)debug.getProperties().get((Object)"textures"), (Object)null);
+        final Property debug2 = (Property)Iterables.getFirst((Iterable)debug.getProperties().get("textures"), null); // MagmaCube - decompile fix
         if (debug2 == null) {
             debug = SkullBlockEntity.sessionService.fillProfileProperties(debug, true);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/piston/MovingPistonBlock.java b/src/main/java/net/minecraft/world/level/block/piston/MovingPistonBlock.java
index cea28931f1ed8eaa0a74e2b6d07ee90ba0e052dc..e5cdc21f7fd68d029715b499d8016d5fedd5ece8 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/MovingPistonBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/MovingPistonBlock.java
@@ -41,7 +41,7 @@ public class MovingPistonBlock extends BaseEntityBlock
     
     public MovingPistonBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)MovingPistonBlock.FACING, Direction.NORTH)).setValue(MovingPistonBlock.TYPE, PistonType.DEFAULT));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(MovingPistonBlock.FACING, Direction.NORTH)).setValue(MovingPistonBlock.TYPE, PistonType.DEFAULT)); // MagmaCube - decompile fix
     }
     
     @Nullable
@@ -122,7 +122,7 @@ public class MovingPistonBlock extends BaseEntityBlock
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)MovingPistonBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)MovingPistonBlock.FACING)));
+        return (debug1).setValue(MovingPistonBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)MovingPistonBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
index 87fbe5104bd1e5241c2f718f087ef6e9f9840f76..0108740a914e733e4c42ecd8eeee091ec3206030 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
@@ -50,7 +50,7 @@ public class PistonBaseBlock extends DirectionalBlock
     
     public PistonBaseBlock(final boolean debug1, final Properties debug2) {
         super(debug2);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)PistonBaseBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)PistonBaseBlock.EXTENDED, false));
+        this.registerDefaultState(((this.stateDefinition.any()).setValue(PistonBaseBlock.FACING, Direction.NORTH)).setValue(PistonBaseBlock.EXTENDED, false)); // MagmaCube - decompile fix
         this.isSticky = debug1;
     }
     
@@ -107,7 +107,7 @@ public class PistonBaseBlock extends DirectionalBlock
     
     @Override
     public BlockState getStateForPlacement(final BlockPlaceContext debug1) {
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)PistonBaseBlock.FACING, debug1.getNearestLookingDirection().getOpposite())).setValue((Property<Comparable>)PistonBaseBlock.EXTENDED, false);
+        return ((this.defaultBlockState()).setValue(PistonBaseBlock.FACING, debug1.getNearestLookingDirection().getOpposite())).setValue(PistonBaseBlock.EXTENDED, false); // MagmaCube - decompile fix
     }
     
     private void checkIfExtend(final Level debug1, final BlockPos debug2, final BlockState debug3) {
@@ -122,7 +122,7 @@ public class PistonBaseBlock extends DirectionalBlock
             final BlockPos debug6 = debug2.relative(debug4, 2);
             final BlockState debug7 = debug1.getBlockState(debug6);
             int debug8 = 1;
-            if (debug7.is(Blocks.MOVING_PISTON) && debug7.getValue((Property<Comparable>)PistonBaseBlock.FACING) == debug4) {
+            if (debug7.is(Blocks.MOVING_PISTON) && debug7.getValue(PistonBaseBlock.FACING) == debug4) { // MagmaCube - decompile fix
                 final BlockEntity debug9 = debug1.getBlockEntity(debug6);
                 if (debug9 instanceof PistonMovingBlockEntity) {
                     final PistonMovingBlockEntity debug10 = (PistonMovingBlockEntity)debug9;
@@ -159,7 +159,7 @@ public class PistonBaseBlock extends DirectionalBlock
         if (!debug2.isClientSide) {
             final boolean debug7 = this.getNeighborSignal(debug2, debug3, debug6);
             if (debug7 && (debug4 == 1 || debug4 == 2)) {
-                debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)PistonBaseBlock.EXTENDED, true), 2);
+                debug2.setBlock(debug3, (debug1).setValue(PistonBaseBlock.EXTENDED, true), 2); // MagmaCube - decompile fix
                 return false;
             }
             if (!debug7 && debug4 == 0) {
@@ -170,7 +170,7 @@ public class PistonBaseBlock extends DirectionalBlock
             if (!this.moveBlocks(debug2, debug3, debug6, true)) {
                 return false;
             }
-            debug2.setBlock(debug3, ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)PistonBaseBlock.EXTENDED, true), 67);
+            debug2.setBlock(debug3, (debug1).setValue(PistonBaseBlock.EXTENDED, true), 67); // MagmaCube - decompile fix
             debug2.playSound(null, debug3, SoundEvents.PISTON_EXTEND, SoundSource.BLOCKS, 0.5f, debug2.random.nextFloat() * 0.25f + 0.6f);
         }
         else if (debug4 == 1 || debug4 == 2) {
@@ -178,9 +178,9 @@ public class PistonBaseBlock extends DirectionalBlock
             if (debug8 instanceof PistonMovingBlockEntity) {
                 ((PistonMovingBlockEntity)debug8).finalTick();
             }
-            final BlockState debug9 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.MOVING_PISTON.defaultBlockState()).setValue((Property<Comparable>)MovingPistonBlock.FACING, debug6)).setValue(MovingPistonBlock.TYPE, this.isSticky ? PistonType.STICKY : PistonType.DEFAULT);
+            final BlockState debug9 = ((Blocks.MOVING_PISTON.defaultBlockState()).setValue(MovingPistonBlock.FACING, debug6)).setValue(MovingPistonBlock.TYPE, this.isSticky ? PistonType.STICKY : PistonType.DEFAULT); // MagmaCube - decompile fix
             debug2.setBlock(debug3, debug9, 20);
-            debug2.setBlockEntity(debug3, MovingPistonBlock.newMovingBlockEntity(((StateHolder<O, BlockState>)this.defaultBlockState()).setValue((Property<Comparable>)PistonBaseBlock.FACING, Direction.from3DDataValue(debug5 & 0x7)), debug6, false, true));
+            debug2.setBlockEntity(debug3, MovingPistonBlock.newMovingBlockEntity((this.defaultBlockState()).setValue(PistonBaseBlock.FACING, Direction.from3DDataValue(debug5 & 0x7)), debug6, false, true)); // MagmaCube - decompile fix
             debug2.blockUpdated(debug3, debug9.getBlock());
             debug9.updateNeighbourShapes(debug2, debug3, 2);
             if (this.isSticky) {
@@ -263,9 +263,9 @@ public class PistonBaseBlock extends DirectionalBlock
         if (!debug6.resolve()) {
             return false;
         }
-        final Map<BlockPos, BlockState> debug7 = (Map<BlockPos, BlockState>)Maps.newHashMap();
+        final Map<BlockPos, BlockState> debug7 = Maps.newHashMap(); // MagmaCube - decompile fix
         final List<BlockPos> debug8 = debug6.getToPush();
-        final List<BlockState> debug9 = (List<BlockState>)Lists.newArrayList();
+        final List<BlockState> debug9 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug10 = 0; debug10 < debug8.size(); ++debug10) {
             final BlockPos debug11 = debug8.get(debug10);
             final BlockState debug12 = debug1.getBlockState(debug11);
@@ -289,14 +289,14 @@ public class PistonBaseBlock extends DirectionalBlock
             final BlockState debug19 = debug1.getBlockState(debug18);
             debug18 = debug18.relative(debug15);
             debug7.remove(debug18);
-            debug1.setBlock(debug18, ((StateHolder<O, BlockState>)Blocks.MOVING_PISTON.defaultBlockState()).setValue((Property<Comparable>)PistonBaseBlock.FACING, debug3), 68);
+            debug1.setBlock(debug18, (Blocks.MOVING_PISTON.defaultBlockState()).setValue(PistonBaseBlock.FACING, debug3), 68); // MagmaCube - decompile fix
             debug1.setBlockEntity(debug18, MovingPistonBlock.newMovingBlockEntity(debug9.get(debug17), debug3, debug4, false));
             debug14[debug16++] = debug19;
         }
         if (debug4) {
             final PistonType debug21 = this.isSticky ? PistonType.STICKY : PistonType.DEFAULT;
-            final BlockState debug22 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.PISTON_HEAD.defaultBlockState()).setValue((Property<Comparable>)PistonHeadBlock.FACING, debug3)).setValue(PistonHeadBlock.TYPE, debug21);
-            final BlockState debug19 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.MOVING_PISTON.defaultBlockState()).setValue((Property<Comparable>)MovingPistonBlock.FACING, debug3)).setValue(MovingPistonBlock.TYPE, this.isSticky ? PistonType.STICKY : PistonType.DEFAULT);
+            final BlockState debug22 = ((Blocks.PISTON_HEAD.defaultBlockState()).setValue(PistonHeadBlock.FACING, debug3)).setValue(PistonHeadBlock.TYPE, debug21); // MagmaCube - decompile fix
+            final BlockState debug19 = ((Blocks.MOVING_PISTON.defaultBlockState()).setValue(MovingPistonBlock.FACING, debug3)).setValue(MovingPistonBlock.TYPE, this.isSticky ? PistonType.STICKY : PistonType.DEFAULT); // MagmaCube - decompile fix
             debug7.remove(debug5);
             debug1.setBlock(debug5, debug19, 68);
             debug1.setBlockEntity(debug5, MovingPistonBlock.newMovingBlockEntity(debug22, debug3, true, true));
@@ -330,9 +330,9 @@ public class PistonBaseBlock extends DirectionalBlock
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)PistonBaseBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)PistonBaseBlock.FACING)));
+        return (debug1).setValue(PistonBaseBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)PistonBaseBlock.FACING))); // MagmaCube - decompile fix
     }
-    
+
     @Override
     public BlockState mirror(final BlockState debug1, final Mirror debug2) {
         return debug1.rotate(debug2.getRotation(debug1.getValue((Property<Direction>)PistonBaseBlock.FACING)));
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
index b15af7178ff8c5fb46ad3c9166c1f9d1d18e5650..fd7eba67a1d09b96dffceee84a3543f4beec94b8 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
@@ -83,7 +83,7 @@ public class PistonHeadBlock extends DirectionalBlock
     
     public PistonHeadBlock(final Properties debug1) {
         super(debug1);
-        this.registerDefaultState(((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)this.stateDefinition.any()).setValue((Property<Comparable>)PistonHeadBlock.FACING, Direction.NORTH)).setValue(PistonHeadBlock.TYPE, PistonType.DEFAULT)).setValue((Property<Comparable>)PistonHeadBlock.SHORT, false));
+        this.registerDefaultState((((this.stateDefinition.any()).setValue(PistonHeadBlock.FACING, Direction.NORTH)).setValue(PistonHeadBlock.TYPE, PistonType.DEFAULT)).setValue(PistonHeadBlock.SHORT, false)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -98,7 +98,7 @@ public class PistonHeadBlock extends DirectionalBlock
     
     private boolean isFittingBase(final BlockState debug1, final BlockState debug2) {
         final Block debug3 = (debug1.getValue(PistonHeadBlock.TYPE) == PistonType.DEFAULT) ? Blocks.PISTON : Blocks.STICKY_PISTON;
-        return debug2.is(debug3) && debug2.getValue((Property<Boolean>)PistonBaseBlock.EXTENDED) && debug2.getValue((Property<Comparable>)PistonHeadBlock.FACING) == debug1.getValue((Property<Comparable>)PistonHeadBlock.FACING);
+        return debug2.is(debug3) && debug2.getValue((Property<Boolean>)PistonBaseBlock.EXTENDED) && debug2.getValue(PistonHeadBlock.FACING) == debug1.getValue(PistonHeadBlock.FACING);
     }
     
     @Override
@@ -135,7 +135,7 @@ public class PistonHeadBlock extends DirectionalBlock
     @Override
     public boolean canSurvive(final BlockState debug1, final LevelReader debug2, final BlockPos debug3) {
         final BlockState debug4 = debug2.getBlockState(debug3.relative(debug1.getValue((Property<Direction>)PistonHeadBlock.FACING).getOpposite()));
-        return this.isFittingBase(debug1, debug4) || (debug4.is(Blocks.MOVING_PISTON) && debug4.getValue((Property<Comparable>)PistonHeadBlock.FACING) == debug1.getValue((Property<Comparable>)PistonHeadBlock.FACING));
+        return this.isFittingBase(debug1, debug4) || (debug4.is(Blocks.MOVING_PISTON) && debug4.getValue(PistonHeadBlock.FACING) == debug1.getValue(PistonHeadBlock.FACING)); // MagmaCube - decompile fix
     }
     
     @Override
@@ -153,7 +153,7 @@ public class PistonHeadBlock extends DirectionalBlock
     
     @Override
     public BlockState rotate(final BlockState debug1, final Rotation debug2) {
-        return ((StateHolder<O, BlockState>)debug1).setValue((Property<Comparable>)PistonHeadBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)PistonHeadBlock.FACING)));
+        return (debug1).setValue(PistonHeadBlock.FACING, debug2.rotate(debug1.getValue((Property<Direction>)PistonHeadBlock.FACING))); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java b/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
index e79238d1f214d89b373bfff7bc903530aa14ba8a..de104225e65a64f06ca1528ff877a7a1ced28ebf 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block.piston;
 
+import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.level.block.state.StateHolder;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.Tag;
@@ -95,7 +96,7 @@ public class PistonMovingBlockEntity extends BlockEntity implements TickableBloc
     
     private BlockState getCollisionRelatedBlockState() {
         if (!this.isExtending() && this.isSourcePiston() && this.movedState.getBlock() instanceof PistonBaseBlock) {
-            return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.PISTON_HEAD.defaultBlockState()).setValue((Property<Comparable>)PistonHeadBlock.SHORT, this.progress > 0.25f)).setValue(PistonHeadBlock.TYPE, this.movedState.is(Blocks.STICKY_PISTON) ? PistonType.STICKY : PistonType.DEFAULT)).setValue((Property<Comparable>)PistonHeadBlock.FACING, (Comparable)this.movedState.getValue((Property<V>)PistonBaseBlock.FACING));
+            return (((Blocks.PISTON_HEAD.defaultBlockState()).setValue(PistonHeadBlock.SHORT, this.progress > 0.25f)).setValue(PistonHeadBlock.TYPE, this.movedState.is(Blocks.STICKY_PISTON) ? PistonType.STICKY : PistonType.DEFAULT)).setValue(PistonHeadBlock.FACING, this.movedState.getValue(PistonBaseBlock.FACING)); // MagmaCube - decompile fix
         }
         return this.movedState;
     }
@@ -183,7 +184,7 @@ public class PistonMovingBlockEntity extends BlockEntity implements TickableBloc
         final double debug3 = this.movedState.getCollisionShape(this.level, this.worldPosition).max(Direction.Axis.Y);
         final AABB debug4 = this.moveByPositionAndProgress(new AABB(0.0, debug3, 0.0, 1.0, 1.5000000999999998, 1.0));
         final double debug5 = debug1 - this.progress;
-        final List<Entity> debug6 = this.level.getEntities(null, debug4, debug1 -> matchesStickyCritera(debug4, debug1));
+        final List<Entity> debug6 = this.level.getEntities((EntityType<Entity>) null, debug4, debug1l -> matchesStickyCritera(debug4, debug1l)); // MagmaCube - decompile fix
         for (final Entity debug7 : debug6) {
             moveEntityByPiston(debug2, debug7, debug5, debug2);
         }
@@ -294,8 +295,8 @@ public class PistonMovingBlockEntity extends BlockEntity implements TickableBloc
                 Block.updateOrDestroy(this.movedState, debug2, this.level, this.worldPosition, 3);
             }
             else {
-                if (debug2.hasProperty((Property<Comparable>)BlockStateProperties.WATERLOGGED) && debug2.getValue((Property<Boolean>)BlockStateProperties.WATERLOGGED)) {
-                    debug2 = ((StateHolder<O, BlockState>)debug2).setValue((Property<Comparable>)BlockStateProperties.WATERLOGGED, false);
+                if (debug2.hasProperty(BlockStateProperties.WATERLOGGED) && debug2.getValue((Property<Boolean>)BlockStateProperties.WATERLOGGED)) {
+                    debug2 = (debug2).setValue(BlockStateProperties.WATERLOGGED, false);
                 }
                 this.level.setBlock(this.worldPosition, debug2, 67);
                 this.level.neighborChanged(this.worldPosition, debug2.getBlock(), this.worldPosition);
@@ -328,7 +329,7 @@ public class PistonMovingBlockEntity extends BlockEntity implements TickableBloc
     public VoxelShape getCollisionShape(final BlockGetter debug1, final BlockPos debug2) {
         VoxelShape debug3;
         if (!this.extending && this.isSourcePiston) {
-            debug3 = ((StateHolder<O, BlockState>)this.movedState).setValue((Property<Comparable>)PistonBaseBlock.EXTENDED, true).getCollisionShape(debug1, debug2);
+            debug3 = (this.movedState).setValue(PistonBaseBlock.EXTENDED, true).getCollisionShape(debug1, debug2);
         }
         else {
             debug3 = Shapes.empty();
@@ -339,7 +340,7 @@ public class PistonMovingBlockEntity extends BlockEntity implements TickableBloc
         }
         BlockState debug5;
         if (this.isSourcePiston()) {
-            debug5 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.PISTON_HEAD.defaultBlockState()).setValue((Property<Comparable>)PistonHeadBlock.FACING, this.direction)).setValue((Property<Comparable>)PistonHeadBlock.SHORT, this.extending != 1.0f - this.progress < 0.25f);
+            debug5 = ((Blocks.PISTON_HEAD.defaultBlockState()).setValue(PistonHeadBlock.FACING, this.direction)).setValue(PistonHeadBlock.SHORT, this.extending != 1.0f - this.progress < 0.25f);
         }
         else {
             debug5 = this.movedState;
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockState.java b/src/main/java/net/minecraft/world/level/block/state/BlockState.java
index 26543c0ae85958e20e3250cd78f4218eefbbf116..f4d114f5f18757a58d380ec984b93d54e7955812 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockState.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockState.java
@@ -21,6 +21,6 @@ public class BlockState extends BlockBehaviour.BlockStateBase
     }
     
     static {
-        CODEC = StateHolder.codec((com.mojang.serialization.Codec<Object>)Registry.BLOCK, Block::defaultBlockState).stable();
+        CODEC = StateHolder.codec(Registry.BLOCK, Block::defaultBlockState).stable(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
index 53843d0024e2acd65cc29b281362f65802d00c10..e3fd020da1634423e744219315c16a755bef5ad8 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
@@ -53,22 +53,28 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
     private final ImmutableList<S> states;
 
     protected StateDefinition(Function<O, S> debug1, O debug2, Factory<O, S> debug3, Map<String, Property<?>> debug4) {
-        Object debug82;
         this.owner = debug2;
         this.propertiesByName = ImmutableSortedMap.copyOf(debug4);
         Supplier<StateHolder> debug5 = () -> (StateHolder)debug1.apply(debug2);
         MapCodec<StateHolder> debug6 = MapCodec.of((MapEncoder)Encoder.empty(), (MapDecoder)Decoder.unit(debug5));
-        for (Object debug82 : this.propertiesByName.entrySet()) {
-            debug6 = StateDefinition.appendPropertyCodec(debug6, debug5, (String)debug82.getKey(), (Property)debug82.getValue());
+        for (Map.Entry<String, Property<?>> debug822 : this.propertiesByName.entrySet()) { // MagmaCube - decompile fix
+            debug6 = StateDefinition.appendPropertyCodec(debug6, debug5, (String)debug822.getKey(), (Property)debug822.getValue()); // MagmaCube - decompile fix
         }
         MapCodec<StateHolder> debug7 = debug6;
-        debug82 = Maps.newLinkedHashMap();
+        Map debug82 = Maps.newLinkedHashMap(); // MagmaCube - decompile fix
         ArrayList debug9 = Lists.newArrayList();
-        Stream<List<List<Object>>> debug10 = Stream.of(Collections.emptyList());
+        Stream<List<Pair<Property<?>, Comparable<?>>>> debug10 = Stream.of(Collections.emptyList()); // MagmaCube - decompile fix
         for (Object debug12 : this.propertiesByName.values()) {
             debug10 = debug10.flatMap(arg_0 -> StateDefinition.lambda$new$2((Property)debug12, arg_0));
         }
-        debug10.forEach(arg_0 -> StateDefinition.lambda$new$3(debug3, debug2, debug7, (Map)debug82, debug9, arg_0));
+        // MagmaCube start - decompile fix
+        debug10.forEach(arg_0 -> {
+            ImmutableMap<Property<?>, Comparable<?>> debug66 = arg_0.stream().collect(ImmutableMap.toImmutableMap(Pair::getFirst, Pair::getSecond));
+            StateHolder debug77 = (StateHolder)debug3.create(debug2, debug66, (MapCodec) (Object) debug7);
+            debug82.put(debug66, debug77);
+            debug9.add(debug77);
+        });
+        // MagmaCube end - decompile fix
         for (Object debug12 : debug9) {
             ((StateHolder)debug12).populateNeighbours(debug82);
         }
@@ -76,7 +82,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
     }
 
     private static <S extends StateHolder<?, S>, T extends Comparable<T>> MapCodec<S> appendPropertyCodec(MapCodec<S> debug0, Supplier<S> debug12, String debug2, Property<T> debug3) {
-        return Codec.mapPair(debug0, (MapCodec)debug3.valueCodec().fieldOf(debug2).setPartial(() -> debug3.value((StateHolder)debug12.get()))).xmap(debug1 -> (StateHolder)((StateHolder)debug1.getFirst()).setValue(debug3, ((Property.Value)debug1.getSecond()).value()), debug1 -> Pair.of((Object)debug1, debug3.value((StateHolder<?, ?>)debug1)));
+        return Codec.mapPair(debug0, debug3.valueCodec().fieldOf(debug2).setPartial(() -> debug3.value(debug12.get()))).xmap(debug1 -> (debug1.getFirst()).setValue(debug3, debug1.getSecond().value()), debug1 -> Pair.of(debug1, debug3.value(debug1))); // MagmaCube - decompile fix
     }
 
     public ImmutableList<S> getPossibleStates() {
@@ -104,13 +110,6 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
         return (Property)this.propertiesByName.get((Object)debug1);
     }
 
-    private static /* synthetic */ void lambda$new$3(Factory debug0, Object debug1, MapCodec debug2, Map debug3, List debug4, List debug5) {
-        ImmutableMap debug6 = (ImmutableMap)debug5.stream().collect(ImmutableMap.toImmutableMap(Pair::getFirst, Pair::getSecond));
-        StateHolder debug7 = (StateHolder)debug0.create(debug1, debug6, debug2);
-        debug3.put(debug6, debug7);
-        debug4.add(debug7);
-    }
-
     private static /* synthetic */ Stream lambda$new$2(Property debug0, List debug1) {
         return debug0.getPossibleValues().stream().map(debug2 -> {
             ArrayList debug3 = Lists.newArrayList((Iterable)debug1);
@@ -145,7 +144,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
                 throw new IllegalArgumentException(this.owner + " attempted use property " + debug2 + " with <= 1 possible values");
             }
             for (Comparable debug5 : debug3) {
-                String debug6 = debug1.getName(debug5);
+                String debug6 = debug1.getName((T) debug5); // MagmaCube - decompile fix
                 if (NAME_PATTERN.matcher(debug6).matches()) continue;
                 throw new IllegalArgumentException(this.owner + " has property: " + debug2 + " with invalidly named value: " + debug6);
             }
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
index 0f7ec36dfcfd7b6a9e62802fbe3378f101015a18..d86704123076f8bea59e9041c6d93d3ca38da5b3 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
@@ -44,12 +44,7 @@ public abstract class StateHolder<O, S> {
         }
 
         private <T extends Comparable<T>> String getName(Property<T> debug1, Comparable<?> debug2) {
-            return debug1.getName(debug2);
-        }
-
-        @Override
-        public /* synthetic */ Object apply(@Nullable Object object) {
-            return this.apply((Map.Entry)object);
+            return debug1.getName((T) debug2); // MagmaCube - decompile fix
         }
     };
     protected final O owner;
@@ -64,7 +59,7 @@ public abstract class StateHolder<O, S> {
     }
 
     public <T extends Comparable<T>> S cycle(Property<T> debug1) {
-        return this.setValue(debug1, (Comparable)StateHolder.findNextInCollection(debug1.getPossibleValues(), this.getValue(debug1)));
+        return this.setValue(debug1, StateHolder.findNextInCollection(debug1.getPossibleValues(), this.getValue(debug1))); // MagmaCube - decompile fix
     }
 
     protected static <T> T findNextInCollection(Collection<T> debug0, T debug1) {
@@ -134,8 +129,8 @@ public abstract class StateHolder<O, S> {
             throw new IllegalStateException();
         }
         HashBasedTable debug2 = HashBasedTable.create();
-        for (Map.Entry debug4 : this.values.entrySet()) {
-            Property debug5 = (Property)debug4.getKey();
+        for (Map.Entry<Property<?>, Comparable<?>> debug4 : this.values.entrySet()) { // MagmaCube - decompile fix
+            Property<?> debug5 = (Property)debug4.getKey(); // MagmaCube - decompile fix
             for (Comparable debug7 : debug5.getPossibleValues()) {
                 if (debug7 == debug4.getValue()) continue;
                 debug2.put((Object)debug5, (Object)debug7, debug1.get(this.makeNeighbourValues(debug5, debug7)));
@@ -156,9 +151,9 @@ public abstract class StateHolder<O, S> {
 
     protected static <O, S extends StateHolder<O, S>> Codec<S> codec(Codec<O> debug02, Function<O, S> debug12) {
         return debug02.dispatch("Name", debug0 -> debug0.owner, debug1 -> {
-            StateHolder debug2 = (StateHolder)debug12.apply(debug1);
+            StateHolder<O, S> debug2 = debug12.apply(debug1); // MagmaCube - decompile fix
             if (debug2.getValues().isEmpty()) {
-                return Codec.unit((Object)debug2);
+                return (Codec<S>) Codec.unit(debug2); // MagmaCube - decompile fix
             }
             return debug2.propertiesCodec.fieldOf("Properties").codec();
         });
diff --git a/src/main/java/net/minecraft/world/level/block/state/pattern/BlockPattern.java b/src/main/java/net/minecraft/world/level/block/state/pattern/BlockPattern.java
index 39cf6ae687b708db1d2bba2f7e52d7095f59e382..339649bdeeab7fddb02867f536dddb13bbcdcb34 100644
--- a/src/main/java/net/minecraft/world/level/block/state/pattern/BlockPattern.java
+++ b/src/main/java/net/minecraft/world/level/block/state/pattern/BlockPattern.java
@@ -54,7 +54,7 @@ public class BlockPattern
         for (int debug5 = 0; debug5 < this.width; ++debug5) {
             for (int debug6 = 0; debug6 < this.height; ++debug6) {
                 for (int debug7 = 0; debug7 < this.depth; ++debug7) {
-                    if (!this.pattern[debug7][debug6][debug5].test((BlockInWorld)debug4.getUnchecked((Object)translateAndRotate(debug1, debug2, debug3, debug5, debug6, debug7)))) {
+                    if (!this.pattern[debug7][debug6][debug5].test((BlockInWorld)debug4.getUnchecked(translateAndRotate(debug1, debug2, debug3, debug5, debug6, debug7)))) { // MagmaCube - decompile fix
                         return null;
                     }
                 }
@@ -146,7 +146,7 @@ public class BlockPattern
         }
         
         public BlockInWorld getBlock(final int debug1, final int debug2, final int debug3) {
-            return (BlockInWorld)this.cache.getUnchecked((Object)BlockPattern.translateAndRotate(this.frontTopLeft, this.getForwards(), this.getUp(), debug1, debug2, debug3));
+            return (BlockInWorld)this.cache.getUnchecked(BlockPattern.translateAndRotate(this.frontTopLeft, this.getForwards(), this.getUp(), debug1, debug2, debug3)); // MagmaCube - decompile fix
         }
         
         @Override
diff --git a/src/main/java/net/minecraft/world/level/block/state/predicate/BlockStatePredicate.java b/src/main/java/net/minecraft/world/level/block/state/predicate/BlockStatePredicate.java
index ef778e153d87942ab179f421b0be16e961c0d992..6c0384fd344dc46b81b4677164a6afa419ae9a91 100644
--- a/src/main/java/net/minecraft/world/level/block/state/predicate/BlockStatePredicate.java
+++ b/src/main/java/net/minecraft/world/level/block/state/predicate/BlockStatePredicate.java
@@ -17,7 +17,7 @@ public class BlockStatePredicate implements Predicate<BlockState>
     private final Map<Property<?>, Predicate<Object>> properties;
     
     private BlockStatePredicate(final StateDefinition<Block, BlockState> debug1) {
-        this.properties = (Map<Property<?>, Predicate<Object>>)Maps.newHashMap();
+        this.properties = Maps.newHashMap(); // MagmaCube - decompile fix
         this.definition = debug1;
     }
     
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/BooleanProperty.java b/src/main/java/net/minecraft/world/level/block/state/properties/BooleanProperty.java
index affe96e1c2b6fbc6a1a47962fbdc9927b55f667d..886160d0a7834af3ebd99ae9ca487df24769b8dc 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/BooleanProperty.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/BooleanProperty.java
@@ -10,7 +10,7 @@ public class BooleanProperty extends Property<Boolean>
     
     protected BooleanProperty(final String debug1) {
         super(debug1, Boolean.class);
-        this.values = (ImmutableSet<Boolean>)ImmutableSet.of((Object)true, (Object)false);
+        this.values = (ImmutableSet<Boolean>)ImmutableSet.of(true, false); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/DirectionProperty.java b/src/main/java/net/minecraft/world/level/block/state/properties/DirectionProperty.java
index 4a03f4d2ccbcd0f1aaf568827f56a4cbc5d0e64c..5ff9f0ff0206b8f51fb0c9ad5854facaff63f65a 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/DirectionProperty.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/DirectionProperty.java
@@ -25,7 +25,7 @@ extends EnumProperty<Direction> {
     }
 
     public static DirectionProperty create(String debug0, Direction ... debug1) {
-        return DirectionProperty.create(debug0, Lists.newArrayList((Object[])debug1));
+        return DirectionProperty.create(debug0, Lists.newArrayList(debug1)); // MagmaCube - decompile fix
     }
 
     public static DirectionProperty create(String debug0, Collection<Direction> debug1) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
index f69212195b1132a400cb5520214fdf4422860230..4e76cabea37617237baf8b2e0fdf1bfe10a94c05 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
@@ -30,7 +30,7 @@ extends Property<T> {
     protected EnumProperty(String debug1, Class<T> debug2, Collection<T> debug3) {
         super(debug1, debug2);
         this.values = ImmutableSet.copyOf(debug3);
-        for (Enum debug5 : debug3) {
+        for (T debug5 : debug3) { // MagmaCube - decompile fix
             String debug6 = ((StringRepresentable)((Object)debug5)).getSerializedName();
             if (this.names.containsKey(debug6)) {
                 throw new IllegalArgumentException("Multiple values have the same name '" + debug6 + "'");
@@ -83,7 +83,7 @@ extends Property<T> {
     }
 
     public static <T extends Enum<T>> EnumProperty<T> create(String debug0, Class<T> debug1, T ... debug2) {
-        return EnumProperty.create(debug0, debug1, Lists.newArrayList((Object[])debug2));
+        return EnumProperty.create(debug0, debug1, Lists.newArrayList(debug2)); // MagmaCube - decompile fix
     }
 
     public static <T extends Enum<T>> EnumProperty<T> create(String debug0, Class<T> debug1, Collection<T> debug2) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java b/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java
index 8fdd92e34a5f891657a29d9f40cbf667e634a6f9..1d5b0941b03ff03b4ddeb603a9ef7e1c67b5545f 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java
@@ -18,7 +18,7 @@ public class IntegerProperty extends Property<Integer>
         if (debug3 <= debug2) {
             throw new IllegalArgumentException("Max value of " + debug1 + " must be greater than min (" + debug2 + ")");
         }
-        final Set<Integer> debug4 = (Set<Integer>)Sets.newHashSet();
+        final Set<Integer> debug4 = Sets.newHashSet(); // MagmaCube - decompile fix
         for (int debug5 = debug2; debug5 <= debug3; ++debug5) {
             debug4.add(debug5);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
index 8177a545cb724f0aecc86213dc7525990b870cbc..04d311ebb500919644c6e7e0adea1e3e07c77cac 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
@@ -18,18 +18,18 @@ public abstract class Property<T extends Comparable<T>>
     private final Codec<Value<T>> valueCodec;
     
     protected Property(final String debug1, final Class<T> debug2) {
-        this.codec = (Codec<T>)Codec.STRING.comapFlatMap(debug1 -> this.getValue(debug1).map((Function<? super T, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unable to read property: " + this + " with value: " + debug1)), (Function)this::getName);
-        this.valueCodec = (Codec<Value<T>>)this.codec.xmap((Function)this::value, (Function)Value::value);
+        this.codec = (Codec<T>)Codec.STRING.comapFlatMap(debug12 -> this.getValue(debug1).map(DataResult::success).orElseGet(() -> DataResult.error("Unable to read property: " + this + " with value: " + debug1)), this::getName); // MagmaCube - decompile fix
+        this.valueCodec = (Codec<Value<T>>)this.codec.xmap(this::value, Value::value); // MagmaCube - decompile fix
         this.clazz = debug2;
         this.name = debug1;
     }
     
     public Value<T> value(final T debug1) {
-        return new Value<T>(this, (Comparable)debug1);
+        return new Value<T>(this, debug1); // MagmaCube - decompile fix
     }
     
     public Value<T> value(final StateHolder<?, ?> debug1) {
-        return new Value<T>(this, (Comparable)debug1.getValue((Property<Comparable>)this));
+        return new Value<T>(this, debug1.getValue(this)); // MagmaCube - decompile fix
     }
     
     public Stream<Value<T>> getAllValues() {
diff --git a/src/main/java/net/minecraft/world/level/border/WorldBorder.java b/src/main/java/net/minecraft/world/level/border/WorldBorder.java
index 087f99cfaa3f3a3cd7e56f0ee120f12c981da7f5..9c03030f554a5a3bc97c6664015d178dde155203 100644
--- a/src/main/java/net/minecraft/world/level/border/WorldBorder.java
+++ b/src/main/java/net/minecraft/world/level/border/WorldBorder.java
@@ -29,7 +29,7 @@ public class WorldBorder
     public static final Settings DEFAULT_SETTINGS;
     
     public WorldBorder() {
-        this.listeners = (List<BorderChangeListener>)Lists.newArrayList();
+        this.listeners = Lists.newArrayList(); // MagmaCube - decompile fix
         this.damagePerBlock = 0.2;
         this.damageSafeZone = 5.0;
         this.warningTime = 15;
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index f0c277910937007f17d90c29d302daa4ce40c4bc..5a06051092f28454ed35533391147d992ef2bed0 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -126,7 +126,7 @@ public interface ChunkAccess extends BlockGetter, FeatureAccess
     
     long getInhabitedTime();
     
-    default ShortList getOrCreateOffsetList(final ShortList[] debug0, final int debug1) {
+    static ShortList getOrCreateOffsetList(final ShortList[] debug0, final int debug1) { // MagmaCube - decompile fix
         if (debug0[debug1] == null) {
             debug0[debug1] = (ShortList)new ShortArrayList();
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
index 50e1d1f78acb1eb721a5fba10e5988c9f9c163c2..39dad319c72eef956ff141cdf40035968f259867 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
@@ -44,7 +44,7 @@ public class ChunkStatus {
         if (debug5 instanceof ProtoChunk && !debug5.getStatus().isOrAfter(debug0)) {
             ((ProtoChunk)debug5).setStatus(debug0);
         }
-        return CompletableFuture.completedFuture(Either.left((Object)debug5));
+        return CompletableFuture.completedFuture(Either.left(debug5)); // MagmaCube - decompile fix
     };
     public static final ChunkStatus EMPTY = ChunkStatus.registerSimple("empty", null, -1, PRE_FEATURES, ChunkType.PROTOCHUNK, (debug0, debug1, debug2, debug3) -> {});
     public static final ChunkStatus STRUCTURE_STARTS = ChunkStatus.register("structure_starts", EMPTY, 0, PRE_FEATURES, ChunkType.PROTOCHUNK, (debug0, debug1, debug2, debug3, debug4, debug5, debug6, debug7) -> {
@@ -56,7 +56,7 @@ public class ChunkStatus {
                 ((ProtoChunk)debug7).setStatus(debug0);
             }
         }
-        return CompletableFuture.completedFuture(Either.left((Object)debug7));
+        return CompletableFuture.completedFuture(Either.left(debug7)); // MagmaCube - decompile fix
     });
     public static final ChunkStatus STRUCTURE_REFERENCES = ChunkStatus.registerSimple("structure_references", STRUCTURE_STARTS, 8, PRE_FEATURES, ChunkType.PROTOCHUNK, (debug0, debug1, debug2, debug3) -> {
         WorldGenRegion debug4 = new WorldGenRegion(debug0, debug2);
@@ -79,13 +79,13 @@ public class ChunkStatus {
             debug2.applyBiomeDecoration(debug9, debug1.structureFeatureManager().forWorldGenRegion(debug9));
             debug8.setStatus(debug0);
         }
-        return CompletableFuture.completedFuture(Either.left((Object)debug7));
+        return CompletableFuture.completedFuture(Either.left(debug7)); // MagmaCube - decompile fix
     });
     public static final ChunkStatus LIGHT = ChunkStatus.register("light", FEATURES, 1, POST_FEATURES, ChunkType.PROTOCHUNK, (debug0, debug1, debug2, debug3, debug4, debug5, debug6, debug7) -> ChunkStatus.lightChunk(debug0, debug4, debug7), (debug0, debug1, debug2, debug3, debug4, debug5) -> ChunkStatus.lightChunk(debug0, debug3, debug5));
     public static final ChunkStatus SPAWN = ChunkStatus.registerSimple("spawn", LIGHT, 0, POST_FEATURES, ChunkType.PROTOCHUNK, (debug0, debug1, debug2, debug3) -> debug1.spawnOriginalMobs(new WorldGenRegion(debug0, debug2)));
     public static final ChunkStatus HEIGHTMAPS = ChunkStatus.registerSimple("heightmaps", SPAWN, 0, POST_FEATURES, ChunkType.PROTOCHUNK, (debug0, debug1, debug2, debug3) -> {});
     public static final ChunkStatus FULL = ChunkStatus.register("full", HEIGHTMAPS, 0, POST_FEATURES, ChunkType.LEVELCHUNK, (debug0, debug1, debug2, debug3, debug4, debug5, debug6, debug7) -> (CompletableFuture)debug5.apply(debug7), (debug0, debug1, debug2, debug3, debug4, debug5) -> (CompletableFuture)debug4.apply(debug5));
-    private static final List<ChunkStatus> STATUS_BY_RANGE = ImmutableList.of((Object)FULL, (Object)FEATURES, (Object)LIQUID_CARVERS, (Object)STRUCTURE_STARTS, (Object)STRUCTURE_STARTS, (Object)STRUCTURE_STARTS, (Object)STRUCTURE_STARTS, (Object)STRUCTURE_STARTS, (Object)STRUCTURE_STARTS, (Object)STRUCTURE_STARTS, (Object)STRUCTURE_STARTS);
+    private static final List<ChunkStatus> STATUS_BY_RANGE = ImmutableList.of(FULL, FEATURES, LIQUID_CARVERS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS); // MagmaCube - decompile fix
     private static final IntList RANGE_BY_STATUS = (IntList)Util.make(new IntArrayList(ChunkStatus.getStatusList().size()), debug0 -> {
         int debug1 = 0;
         for (int debug2 = ChunkStatus.getStatusList().size() - 1; debug2 >= 0; --debug2) {
@@ -228,7 +228,7 @@ public class ChunkStatus {
                     ((ProtoChunk)debug8).setStatus(debug1);
                 }
             }
-            return CompletableFuture.completedFuture(Either.left((Object)debug8));
+            return CompletableFuture.completedFuture(Either.left(debug8)); // MagmaCube - decompile fix
         }
 
         public void doWork(ServerLevel var1, ChunkGenerator var2, List<ChunkAccess> var3, ChunkAccess var4);
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index b4769a6284b441c19a646812c47deac6946c6605..f06cc4b7fd1c9312dc741b5a566dd9fae9d79bf9 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -466,8 +466,8 @@ implements ChunkAccess {
             for (Entity debug9 : this.entitySections[debug7].find(Entity.class)) {
                 if (debug1 != null && debug9.getType() != debug1) continue;
                 Entity debug10 = debug9;
-                if (!debug9.getBoundingBox().intersects(debug2) || !debug4.test(debug10)) continue;
-                debug3.add(debug10);
+                if (!debug9.getBoundingBox().intersects(debug2) || !debug4.test((T) debug10)) continue; // MagmaCube - decompile fix
+                debug3.add((T) debug10); // MagmaCube - decompile fix
             }
         }
     }
@@ -479,8 +479,8 @@ implements ChunkAccess {
         debug6 = Mth.clamp(debug6, 0, this.entitySections.length - 1);
         for (int debug7 = debug5; debug7 <= debug6; ++debug7) {
             for (Entity debug9 : this.entitySections[debug7].find(debug1)) {
-                if (!debug9.getBoundingBox().intersects(debug2) || debug4 != null && !debug4.test(debug9)) continue;
-                debug3.add(debug9);
+                if (!debug9.getBoundingBox().intersects(debug2) || debug4 != null && !debug4.test((T) debug9)) continue; // MagmaCube - decompile fix
+                debug3.add((T) debug9); // MagmaCube - decompile fix
             }
         }
     }
@@ -713,11 +713,11 @@ implements ChunkAccess {
     }
 
     public void packTicks(ServerLevel debug1) {
-        if (this.blockTicks == EmptyTickList.empty()) {
+        if (this.blockTicks == EmptyTickList.<Block>empty()) { // MagmaCube - decompile fix
             this.blockTicks = new ChunkTickList<Block>(Registry.BLOCK::getKey, ((ServerTickList)debug1.getBlockTicks()).fetchTicksInChunk(this.chunkPos, true, false), debug1.getGameTime());
             this.setUnsaved(true);
         }
-        if (this.liquidTicks == EmptyTickList.empty()) {
+        if (this.liquidTicks == EmptyTickList.<Fluid>empty()) { // MagmaCube - decompile fix
             this.liquidTicks = new ChunkTickList<Fluid>(Registry.FLUID::getKey, ((ServerTickList)debug1.getLiquidTicks()).fetchTicksInChunk(this.chunkPos, true, false), debug1.getGameTime());
             this.setUnsaved(true);
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index adb2a77d842e1c58c1832f7a3b1bb5b522deeb24..41e51b76cfdde22d5bfc89b810df54ba7a2b3c0f 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -109,9 +109,8 @@ public class LevelChunkSection
         this.nonEmptyBlockCount = 0;
         this.tickingBlockCount = 0;
         this.tickingFluidCount = 0;
-        final FluidState debug3;
         this.states.count((debug1, debug2) -> {
-            debug3 = debug1.getFluidState();
+            FluidState debug3 = debug1.getFluidState(); // MagmaCube - decompile fix
             if (!debug1.isAir()) {
                 this.nonEmptyBlockCount += debug2;
                 if (debug1.isRandomlyTicking()) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java b/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
index 6e7f629cb55ae5940f1355e4073a4d785404d2f8..efd95b26760f18a904ba00ffa2750ad4a3f6cc27 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
@@ -72,14 +72,14 @@ public class ProtoChunk implements ChunkAccess
     public ProtoChunk(final ChunkPos debug1, final UpgradeData debug2, @Nullable final LevelChunkSection[] debug3, final ProtoTickList<Block> debug4, final ProtoTickList<Fluid> debug5) {
         this.heightmaps = (Map<Heightmap.Types, Heightmap>)Maps.newEnumMap((Class)Heightmap.Types.class);
         this.status = ChunkStatus.EMPTY;
-        this.blockEntities = (Map<BlockPos, BlockEntity>)Maps.newHashMap();
-        this.blockEntityNbts = (Map<BlockPos, CompoundTag>)Maps.newHashMap();
+        this.blockEntities = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.blockEntityNbts = Maps.newHashMap(); // MagmaCube - decompile fix
         this.sections = new LevelChunkSection[16];
-        this.entities = (List<CompoundTag>)Lists.newArrayList();
-        this.lights = (List<BlockPos>)Lists.newArrayList();
+        this.entities = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.lights = Lists.newArrayList(); // MagmaCube - decompile fix
         this.postProcessing = new ShortList[16];
-        this.structureStarts = (Map<StructureFeature<?>, StructureStart<?>>)Maps.newHashMap();
-        this.structuresRefences = (Map<StructureFeature<?>, LongSet>)Maps.newHashMap();
+        this.structureStarts = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.structuresRefences = Maps.newHashMap(); // MagmaCube - decompile fix
         this.carvingMasks = (Map<GenerationStep.Carving, BitSet>)new Object2ObjectArrayMap();
         this.chunkPos = debug1;
         this.upgradeData = debug2;
@@ -273,7 +273,7 @@ public class ProtoChunk implements ChunkAccess
     
     @Override
     public Collection<Map.Entry<Heightmap.Types, Heightmap>> getHeightmaps() {
-        return (Collection<Map.Entry<Heightmap.Types, Heightmap>>)Collections.unmodifiableSet((Set<?>)this.heightmaps.entrySet());
+        return (Collection<Map.Entry<Heightmap.Types, Heightmap>>)Collections.unmodifiableSet(this.heightmaps.entrySet()); // MagmaCube - decompile fix
     }
     
     @Override
@@ -283,7 +283,7 @@ public class ProtoChunk implements ChunkAccess
     
     @Override
     public Heightmap getOrCreateHeightmapUnprimed(final Heightmap.Types debug1) {
-        return this.heightmaps.computeIfAbsent(debug1, debug1 -> new Heightmap(this, debug1));
+        return this.heightmaps.computeIfAbsent(debug1, debug1l -> new Heightmap(this, debug1l)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/chunk/UpgradeData.java b/src/main/java/net/minecraft/world/level/chunk/UpgradeData.java
index f351c0e09890390e8dcb8d1b915202f825299150..79f15178833884160a7815f32e5989e9fa7460cb 100644
--- a/src/main/java/net/minecraft/world/level/chunk/UpgradeData.java
+++ b/src/main/java/net/minecraft/world/level/chunk/UpgradeData.java
@@ -76,7 +76,7 @@ public class UpgradeData
             upgradeSides(debug1, debug2);
         }
         final Level debug3 = debug1.getLevel();
-        UpgradeData.CHUNKY_FIXERS.forEach(debug1 -> debug1.processChunk(debug3));
+        UpgradeData.CHUNKY_FIXERS.forEach(debug1l -> debug1l.processChunk(debug3)); // MagmaCube - decompile fix
     }
     
     private static void upgradeSides(final LevelChunk debug0, final Direction8 debug1) {
@@ -221,7 +221,7 @@ public class UpgradeData
                     final Direction debug7 = debug1.getValue((Property<Direction>)ChestBlock.FACING);
                     if (debug2.getAxis() != debug7.getAxis() && debug7 == debug3.getValue((Property<Direction>)ChestBlock.FACING)) {
                         final ChestType debug8 = (debug2 == debug7.getClockWise()) ? ChestType.LEFT : ChestType.RIGHT;
-                        debug4.setBlock(debug6, ((StateHolder<O, BlockState>)debug3).setValue(ChestBlock.TYPE, debug8.getOpposite()), 18);
+                        debug4.setBlock(debug6, debug3.setValue(ChestBlock.TYPE, debug8.getOpposite()), 18); // MagmaCube - decompile fix
                         if (debug7 == Direction.NORTH || debug7 == Direction.EAST) {
                             final BlockEntity debug9 = debug4.getBlockEntity(debug5);
                             final BlockEntity debug10 = debug4.getBlockEntity(debug6);
@@ -229,7 +229,7 @@ public class UpgradeData
                                 ChestBlockEntity.swapContents((ChestBlockEntity)debug9, (ChestBlockEntity)debug10);
                             }
                         }
-                        return ((StateHolder<O, BlockState>)debug1).setValue(ChestBlock.TYPE, debug8);
+                        return debug1.setValue(ChestBlock.TYPE, debug8); // MagmaCube - decompile fix
                     }
                 }
                 return debug1;
@@ -253,7 +253,7 @@ public class UpgradeData
                             debug9.add((ObjectSet<BlockPos>)new ObjectOpenHashSet());
                         }
                     }
-                    debug9.get(debug8).add((Object)debug5.immutable());
+                    debug9.get(debug8).add(debug5.immutable()); // MagmaCube - decompile fix
                 }
                 return debug1;
             }
@@ -271,15 +271,15 @@ public class UpgradeData
                         if (debug9.getValue((Property<Integer>)BlockStateProperties.DISTANCE) < debug5) {
                             continue;
                         }
-                        debug1.setBlock(debug8, ((StateHolder<O, BlockState>)debug9).setValue((Property<Comparable>)BlockStateProperties.DISTANCE, debug5), 18);
+                        debug1.setBlock(debug8, debug9.setValue(BlockStateProperties.DISTANCE, debug5), 18); // MagmaCube - decompile fix
                         if (debug4 == 7) {
                             continue;
                         }
-                        for (final Direction debug10 : UpgradeData$BlockFixers$4.DIRECTIONS) {
+                        for (final Direction debug10 : DIRECTIONS) { // MagmaCube - decompile fix
                             debug2.setWithOffset(debug8, debug10);
                             final BlockState debug11 = debug1.getBlockState(debug2);
-                            if (debug11.hasProperty((Property<Comparable>)BlockStateProperties.DISTANCE) && debug9.getValue((Property<Integer>)BlockStateProperties.DISTANCE) > debug4) {
-                                debug7.add((Object)debug2.immutable());
+                            if (debug11.hasProperty(BlockStateProperties.DISTANCE) && debug9.getValue((Property<Integer>)BlockStateProperties.DISTANCE) > debug4) { // MagmaCube - decompile fix
+                                debug7.add(debug2.immutable()); // MagmaCube - decompile fix
                             }
                         }
                     }
@@ -293,7 +293,7 @@ public class UpgradeData
                 if (debug1.getValue((Property<Integer>)StemBlock.AGE) == 7) {
                     final StemGrownBlock debug7 = ((StemBlock)debug1.getBlock()).getFruit();
                     if (debug3.is(debug7)) {
-                        return ((StateHolder<O, BlockState>)debug7.getAttachedStem().defaultBlockState()).setValue((Property<Comparable>)HorizontalDirectionalBlock.FACING, debug2);
+                        return debug7.getAttachedStem().defaultBlockState().setValue(HorizontalDirectionalBlock.FACING, debug2); // MagmaCube - decompile fix
                     }
                 }
                 return debug1;
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 068d261a48e49aa1152fa555c6eaacd398899739..45c7caea6287ee64a07fad0e63084c2385b55b3d 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -16,14 +16,8 @@ import com.google.common.collect.Maps;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.shorts.ShortList;
-import java.util.AbstractCollection;
-import java.util.Arrays;
-import java.util.BitSet;
-import java.util.EnumSet;
-import java.util.HashMap;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Objects;
+
+import java.util.*;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.core.BlockPos;
@@ -79,8 +73,6 @@ public class ChunkSerializer {
         int debug30;
         ListTag debug29;
         Object debug25;
-        TickList<Block> debug24;
-        Object debug23;
         ChunkGenerator debug5 = debug02.getChunkSource().getGenerator();
         BiomeSource debug6 = debug5.getBiomeSource();
         CompoundTag debug7 = debug4.getCompound("Level");
@@ -106,7 +98,7 @@ public class ChunkSerializer {
             CompoundTag debug21 = debug14.getCompound(debug20);
             byte debug22 = debug21.getByte("Y");
             if (debug21.contains("Palette", 9) && debug21.contains("BlockStates", 12)) {
-                debug23 = new LevelChunkSection(debug22 << 4);
+                LevelChunkSection debug23 = new LevelChunkSection(debug22 << 4); // MagmaCube - decompile fix
                 ((LevelChunkSection)debug23).getStates().read(debug21.getList("Palette", 10), debug21.getLongArray("BlockStates"));
                 ((LevelChunkSection)debug23).recalcBlockCounts();
                 if (!((LevelChunkSection)debug23).isEmpty()) {
@@ -123,12 +115,13 @@ public class ChunkSerializer {
         }
         long debug20 = debug7.getLong("InhabitedTime");
         ChunkStatus.ChunkType debug22 = ChunkSerializer.getChunkTypeFromTag(debug4);
+        ChunkAccess debug23; // MagmaCube - decompile fix
         if (debug22 == ChunkStatus.ChunkType.LEVELCHUNK) {
-            debug24 = debug7.contains("TileTicks", 9) ? ChunkTickList.create(debug7.getList("TileTicks", 10), Registry.BLOCK::getKey, Registry.BLOCK::get) : debug11;
+            TickList<Block> debug24 = debug7.contains("TileTicks", 9) ? ChunkTickList.create(debug7.getList("TileTicks", 10), Registry.BLOCK::getKey, Registry.BLOCK::get) : debug11; // MagmaCube - decompile fix
             debug25 = debug7.contains("LiquidTicks", 9) ? ChunkTickList.create(debug7.getList("LiquidTicks", 10), Registry.FLUID::getKey, Registry.FLUID::get) : debug122;
             debug23 = new LevelChunk(debug02.getLevel(), debug3, debug9, debug10, debug24, (TickList<Fluid>)debug25, debug20, debug16, debug1 -> ChunkSerializer.postLoadChunk(debug7, debug1));
         } else {
-            debug24 = new ProtoChunk(debug3, debug10, debug16, debug11, debug122);
+            ProtoChunk debug24 = new ProtoChunk(debug3, debug10, debug16, debug11, debug122); // MagmaCube - decompile fix
             ((ProtoChunk)((Object)debug24)).setBiomes(debug9);
             debug23 = debug24;
             debug23.setInhabitedTime(debug20);
@@ -144,7 +137,7 @@ public class ChunkSerializer {
             }
         }
         debug23.setLightCorrect(debug13);
-        debug24 = debug7.getCompound("Heightmaps");
+        CompoundTag debug24 = debug7.getCompound("Heightmaps"); // MagmaCube - decompile fix
         debug25 = EnumSet.noneOf(Heightmap.Types.class);
         for (Heightmap.Types types : debug23.getStatus().heightmapsAfter()) {
             String debug28 = types.getSerializationKey();
@@ -154,7 +147,7 @@ public class ChunkSerializer {
             }
             ((AbstractCollection)debug25).add((Heightmap.Types)types);
         }
-        Heightmap.primeHeightmaps((ChunkAccess)debug23, debug25);
+        Heightmap.primeHeightmaps((ChunkAccess)debug23, (Set<Heightmap.Types>) debug25); // MagmaCube - decompile fix
         CompoundTag compoundTag = debug7.getCompound("Structures");
         debug23.setAllStarts(ChunkSerializer.unpackStructureStart(debug12, compoundTag, debug02.getSeed()));
         debug23.setAllReferences(ChunkSerializer.unpackStructureReferences(debug3, compoundTag));
@@ -235,7 +228,7 @@ public class ChunkSerializer {
             if (debug14 != null && !((DataLayer)debug14).isEmpty()) {
                 ((CompoundTag)debug15).putByteArray("SkyLight", ((DataLayer)debug14).getData());
             }
-            debug7.add(debug15);
+            debug7.add((Tag) debug15); // MagmaCube - decompile fix
         }
         debug4.put("Sections", debug7);
         if (debug9) {
@@ -248,7 +241,7 @@ public class ChunkSerializer {
         for (BlockPos blockPos : debug12.getBlockEntitiesPos()) {
             debug14 = debug12.getBlockEntityNbtForSaving(blockPos);
             if (debug14 == null) continue;
-            debug11.add(debug14);
+            debug11.add((Tag) debug14); // MagmaCube - decompile fix
         }
         debug4.put("TileEntities", debug11);
         ListTag debug122 = new ListTag();
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java b/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java
index 5a4b164550a49911492b8959b1a5afe4dbb4a200..206f27257de968683b336f4865f1d6204ecd2c84 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java
@@ -34,37 +34,34 @@ public class IOWorker implements AutoCloseable
     
     protected IOWorker(final File debug1, final boolean debug2, final String debug3) {
         this.shutdownRequested = new AtomicBoolean();
-        this.pendingWrites = (Map<ChunkPos, PendingStore>)Maps.newLinkedHashMap();
+        this.pendingWrites = Maps.newLinkedHashMap(); // MagmaCube - decompile fix
         this.storage = new RegionFileStorage(debug1, debug2);
         this.mailbox = new ProcessorMailbox<StrictQueue.IntRunnable>(new StrictQueue.FixedPriorityQueue(Priority.values().length), Util.ioPool(), "IOWorker-" + debug3);
     }
     
     public CompletableFuture<Void> store(final ChunkPos debug1, final CompoundTag debug2) {
-        final PendingStore debug3;
         return this.submitTask(() -> {
-            debug3 = this.pendingWrites.computeIfAbsent(debug1, debug1 -> new PendingStore(debug2));
+            PendingStore debug3 = this.pendingWrites.computeIfAbsent(debug1, debug1l -> new PendingStore(debug2)); // MagmaCube - decompile fix
             debug3.data = debug2;
-            return Either.left((Object)debug3.result);
-        }).thenCompose((Function<? super Object, ? extends CompletionStage<Void>>)Function.identity());
+            return Either.left(debug3.result); // MagmaCube - decompile fix
+        }).thenCompose(Function.identity()); // MagmaCube - decompile fix
     }
     
     @Nullable
     public CompoundTag load(final ChunkPos debug1) throws IOException {
-        final PendingStore debug3;
-        CompoundTag debug4;
         final CompletableFuture<CompoundTag> debug2 = this.submitTask(() -> {
-            debug3 = this.pendingWrites.get(debug1);
+            PendingStore debug3 = this.pendingWrites.get(debug1); // MagmaCube - decompile fix
             if (debug3 != null) {
-                return Either.left((Object)debug3.data);
+                return Either.left(debug3.data);// MagmaCube - decompile fix
             }
             else {
                 try {
-                    debug4 = this.storage.read(debug1);
-                    return Either.left((Object)debug4);
+                    CompoundTag debug4 = this.storage.read(debug1); // MagmaCube - decompile fix
+                    return Either.left(debug4); // MagmaCube - decompile fix
                 }
                 catch (Exception debug5) {
-                    IOWorker.LOGGER.warn("Failed to read chunk {}", (Object)debug1, (Object)debug5);
-                    return Either.right((Object)debug5);
+                    IOWorker.LOGGER.warn("Failed to read chunk {}", (Object)debug1, debug5); // MagmaCube - decompile fix
+                    return Either.right(debug5); // MagmaCube - decompile fix
                 }
             }
         });
@@ -80,15 +77,15 @@ public class IOWorker implements AutoCloseable
     }
     
     public CompletableFuture<Void> synchronize() {
-        final CompletableFuture<Void> debug = this.submitTask(() -> Either.left((Object)CompletableFuture.allOf((CompletableFuture<?>[])this.pendingWrites.values().stream().map(debug0 -> debug0.result).toArray(CompletableFuture[]::new)))).thenCompose((Function<? super Object, ? extends CompletionStage<Void>>)Function.identity());
+        final CompletableFuture<Void> debug = this.submitTask(() -> Either.left(CompletableFuture.allOf(this.pendingWrites.values().stream().map(debug0 -> debug0.result).toArray(CompletableFuture[]::new)))).thenCompose(Function.identity()); // MagmaCube - decompile fix
         return debug.thenCompose(debug1 -> this.submitTask(() -> {
             try {
                 this.storage.flush();
-                return Either.left((Object)null);
+                return Either.left(null); // MagmaCube - decompile fix
             }
             catch (Exception debug2) {
-                IOWorker.LOGGER.warn("Failed to synchronized chunks", (Throwable)debug2);
-                return Either.right((Object)debug2);
+                IOWorker.LOGGER.warn("Failed to synchronized chunks", debug2); // MagmaCube - decompile fix
+                return Either.right(debug2); // MagmaCube - decompile fix
             }
         }));
     }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
index e7173d6d24cd239d34ba10ea99830a8a638d8080..3cdf442db248c94e9238ab337ba6f8ba3352cec2 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
@@ -40,7 +40,7 @@ public final class RegionFileStorage implements AutoCloseable
         }
         final File debug4 = new File(this.folder, "r." + debug1.getRegionX() + "." + debug1.getRegionZ() + ".mca");
         final RegionFile debug5 = new RegionFile(debug4, this.folder, this.sync);
-        this.regionCache.putAndMoveToFirst(debug2, (Object)debug5);
+        this.regionCache.putAndMoveToFirst(debug2, debug5); // MagmaCube - decompile fix
         return debug5;
     }
     
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileVersion.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileVersion.java
index 71f281542e4e3472163b727ca9d6c87f9f752c6c..29fffdcdc5c080747f92c14d68072f2305fe8fad 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileVersion.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileVersion.java
@@ -28,7 +28,7 @@ public class RegionFileVersion
     }
     
     private static RegionFileVersion register(final RegionFileVersion debug0) {
-        RegionFileVersion.VERSIONS.put(debug0.id, (Object)debug0);
+        RegionFileVersion.VERSIONS.put(debug0.id, debug0); // MagmaCube - decompile fix
         return debug0;
     }
     
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java
index f41f0b8647984926b1ecfac09930b9485a4765c6..985bdb46fe359244aeeb702a62db7c46ced6969d 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java
@@ -135,14 +135,14 @@ implements AutoCloseable {
             }
         } else {
             int debug6;
-            Dynamic debug43 = new Dynamic(debug2, debug32);
+            Dynamic<T> debug43 = new Dynamic(debug2, debug32); // MagmaCube - decompile fix
             int debug5 = SectionStorage.getVersion(debug43);
             boolean debug7 = debug5 != (debug6 = SharedConstants.getCurrentVersion().getWorldVersion());
-            Dynamic debug8 = this.fixerUpper.update(this.type.getType(), debug43, debug5, debug6);
-            OptionalDynamic debug9 = debug8.get("Sections");
+            Dynamic<T> debug8 = this.fixerUpper.update(this.type.getType(), debug43, debug5, debug6); // MagmaCube - decompile fix
+            OptionalDynamic<T> debug9 = debug8.get("Sections"); // MagmaCube - decompile fix
             for (int debug10 = 0; debug10 < 16; ++debug10) {
                 long debug11 = SectionPos.of(debug1, debug10).asLong();
-                Optional debug13 = debug9.get(Integer.toString(debug10)).result().flatMap(debug3 -> this.codec.apply(() -> this.setDirty(debug11)).parse(debug3).resultOrPartial(((Logger)LOGGER)::error));
+                Optional<R> debug13 = debug9.get(Integer.toString(debug10)).result().flatMap(debug3 -> this.codec.apply(() -> this.setDirty(debug11)).parse(debug3).resultOrPartial(((Logger)LOGGER)::error)); // MagmaCube - decompile fix
                 this.storage.put(debug11, debug13);
                 debug13.ifPresent(debug4 -> {
                     this.onSectionLoad(debug11);
@@ -169,7 +169,7 @@ implements AutoCloseable {
         for (int debug4 = 0; debug4 < 16; ++debug4) {
             long debug5 = SectionPos.of(debug1, debug4).asLong();
             this.dirty.remove(debug5);
-            Optional debug7 = (Optional)this.storage.get(debug5);
+            Optional<R> debug7 = (Optional)this.storage.get(debug5); // MagmaCube - decompile fix
             if (debug7 == null || !debug7.isPresent()) continue;
             DataResult debug8 = this.codec.apply(() -> this.setDirty(debug5)).encodeStart(debug2, debug7.get());
             String debug9 = Integer.toString(debug4);
diff --git a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
index da827ad044b79c7d6bd7c44da3ba5e3b491f752f..e41afa6f8d0c2bf729c166a86689121e28bb0d7f 100644
--- a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
+++ b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
@@ -50,7 +50,7 @@ public class DimensionType {
     public static final ResourceLocation OVERWORLD_EFFECTS = new ResourceLocation("overworld");
     public static final ResourceLocation NETHER_EFFECTS = new ResourceLocation("the_nether");
     public static final ResourceLocation END_EFFECTS = new ResourceLocation("the_end");
-    public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)Codec.LONG.optionalFieldOf("fixed_time").xmap(debug0 -> debug0.map(OptionalLong::of).orElseGet(OptionalLong::empty), debug0 -> debug0.isPresent() ? Optional.of(debug0.getAsLong()) : Optional.empty()).forGetter(debug0 -> debug0.fixedTime), (App)Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), (App)Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), (App)Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), (App)Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), (App)Codec.doubleRange((double)1.0E-5f, (double)3.0E7).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), (App)Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), (App)Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), (App)Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), (App)Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), (App)Codec.intRange((int)0, (int)256).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), (App)ResourceLocation.CODEC.fieldOf("infiniburn").forGetter(debug0 -> debug0.infiniburn), (App)ResourceLocation.CODEC.fieldOf("effects").orElse((Object)OVERWORLD_EFFECTS).forGetter(debug0 -> debug0.effectsLocation), (App)Codec.FLOAT.fieldOf("ambient_light").forGetter(debug0 -> Float.valueOf(debug0.ambientLight))).apply((Applicative)debug02, DimensionType::new));
+    public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Codec.LONG.optionalFieldOf("fixed_time").xmap(debug0 -> debug0.map(OptionalLong::of).orElseGet(OptionalLong::empty), debug0 -> debug0.isPresent() ? Optional.of(debug0.getAsLong()) : Optional.empty()).forGetter(debug0 -> debug0.fixedTime), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange((double)1.0E-5f, (double)3.0E7).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange((int)0, (int)256).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter(debug0 -> debug0.infiniburn), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter(debug0 -> debug0.effectsLocation), Codec.FLOAT.fieldOf("ambient_light").forGetter(debug0 -> Float.valueOf(debug0.ambientLight))).apply((Applicative)debug02, DimensionType::new)); // MagmaCube - decompile fix
     public static final float[] MOON_BRIGHTNESS_PER_PHASE = new float[]{1.0f, 0.75f, 0.5f, 0.25f, 0.0f, 0.25f, 0.5f, 0.75f};
     public static final ResourceKey<DimensionType> OVERWORLD_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld"));
     public static final ResourceKey<DimensionType> NETHER_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("the_nether"));
diff --git a/src/main/java/net/minecraft/world/level/dimension/LevelStem.java b/src/main/java/net/minecraft/world/level/dimension/LevelStem.java
index b011b23b2307c0a85cf0f0f488b5227a9f286528..35d9905d01c26372c66ded8767774c678aa5196d 100644
--- a/src/main/java/net/minecraft/world/level/dimension/LevelStem.java
+++ b/src/main/java/net/minecraft/world/level/dimension/LevelStem.java
@@ -37,7 +37,7 @@ import net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator;
 import net.minecraft.world.level.levelgen.NoiseGeneratorSettings;
 
 public final class LevelStem {
-    public static final Codec<LevelStem> CODEC = RecordCodecBuilder.create(debug0 -> debug0.group((App)DimensionType.CODEC.fieldOf("type").forGetter(LevelStem::typeSupplier), (App)ChunkGenerator.CODEC.fieldOf("generator").forGetter(LevelStem::generator)).apply((Applicative)debug0, debug0.stable(LevelStem::new)));
+    public static final Codec<LevelStem> CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(DimensionType.CODEC.fieldOf("type").forGetter(LevelStem::typeSupplier), ChunkGenerator.CODEC.fieldOf("generator").forGetter(LevelStem::generator)).apply(debug0, debug0.stable(LevelStem::new))); // MagmaCube - decompile fix
     public static final ResourceKey<LevelStem> OVERWORLD = ResourceKey.create(Registry.LEVEL_STEM_REGISTRY, new ResourceLocation("overworld"));
     public static final ResourceKey<LevelStem> NETHER = ResourceKey.create(Registry.LEVEL_STEM_REGISTRY, new ResourceLocation("the_nether"));
     public static final ResourceKey<LevelStem> END = ResourceKey.create(Registry.LEVEL_STEM_REGISTRY, new ResourceLocation("the_end"));
@@ -63,17 +63,16 @@ public final class LevelStem {
     }
 
     public static MappedRegistry<LevelStem> sortMap(MappedRegistry<LevelStem> debug0) {
-        Object debug4;
         MappedRegistry<LevelStem> debug1 = new MappedRegistry<LevelStem>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
-        for (ResourceKey resourceKey : BUILTIN_ORDER) {
-            debug4 = debug0.get(resourceKey);
+        for (ResourceKey<LevelStem> resourceKey : BUILTIN_ORDER) { // MagmaCube - decompile fix
+            LevelStem debug4 = debug0.get(resourceKey); // MagmaCube - decompile fix
             if (debug4 == null) continue;
             debug1.register(resourceKey, debug4, debug0.lifecycle((LevelStem)debug4));
         }
-        for (Map.Entry entry : debug0.entrySet()) {
-            debug4 = (ResourceKey)entry.getKey();
+        for (Map.Entry<ResourceKey<LevelStem>, LevelStem> entry : debug0.entrySet()) { // MagmaCube - decompile fix
+            ResourceKey<LevelStem> debug4 = (ResourceKey)entry.getKey(); // MagmaCube - decompile fix
             if (BUILTIN_ORDER.contains(debug4)) continue;
-            debug1.register((ResourceKey<LevelStem>)debug4, entry.getValue(), debug0.lifecycle((LevelStem)entry.getValue()));
+            debug1.register(debug4, entry.getValue(), debug0.lifecycle((LevelStem)entry.getValue())); // MagmaCube - decompile fix
         }
         return debug1;
     }
diff --git a/src/main/java/net/minecraft/world/level/dimension/end/DragonRespawnAnimation.java b/src/main/java/net/minecraft/world/level/dimension/end/DragonRespawnAnimation.java
index 91b42b906d36ebb0acb8d24b90cc5e0136f716c8..d45af08893f4a7d52b5d30f7b1fe70ce2a3bd7f4 100644
--- a/src/main/java/net/minecraft/world/level/dimension/end/DragonRespawnAnimation.java
+++ b/src/main/java/net/minecraft/world/level/dimension/end/DragonRespawnAnimation.java
@@ -23,7 +23,7 @@ public enum DragonRespawnAnimation
             for (final EndCrystal debug7 : debug3) {
                 debug7.setBeamTarget(debug6);
             }
-            debug2.setRespawnStage(DragonRespawnAnimation$1.PREPARING_TO_SUMMON_PILLARS);
+            debug2.setRespawnStage(PREPARING_TO_SUMMON_PILLARS); // MagmaCube - decompile fix
         }
     }, 
     PREPARING_TO_SUMMON_PILLARS {
@@ -35,7 +35,7 @@ public enum DragonRespawnAnimation
                 }
             }
             else {
-                debug2.setRespawnStage(DragonRespawnAnimation$2.SUMMONING_PILLARS);
+                debug2.setRespawnStage(SUMMONING_PILLARS); // MagmaCube - decompile fix
             }
         }
     }, 
@@ -61,12 +61,12 @@ public enum DragonRespawnAnimation
                             debug1.removeBlock(debug14, false);
                         }
                         debug1.explode(null, debug11.getCenterX() + 0.5f, debug11.getHeight(), debug11.getCenterZ() + 0.5f, 5.0f, Explosion.BlockInteraction.DESTROY);
-                        final SpikeConfiguration debug15 = new SpikeConfiguration(true, (List<SpikeFeature.EndSpike>)ImmutableList.of((Object)debug11), new BlockPos(0, 128, 0));
+                        final SpikeConfiguration debug15 = new SpikeConfiguration(true, ImmutableList.of(debug11), new BlockPos(0, 128, 0)); // MagmaCube - decompile fix
                         Feature.END_SPIKE.configured(debug15).place(debug1, debug1.getChunkSource().getGenerator(), new Random(), new BlockPos(debug11.getCenterX(), 45, debug11.getCenterZ()));
                     }
                 }
                 else if (debug7) {
-                    debug2.setRespawnStage(DragonRespawnAnimation$3.SUMMONING_DRAGON);
+                    debug2.setRespawnStage(SUMMONING_DRAGON); // MagmaCube - decompile fix
                 }
             }
         }
@@ -75,7 +75,7 @@ public enum DragonRespawnAnimation
         @Override
         public void tick(final ServerLevel debug1, final EndDragonFight debug2, final List<EndCrystal> debug3, final int debug4, final BlockPos debug5) {
             if (debug4 >= 100) {
-                debug2.setRespawnStage(DragonRespawnAnimation$4.END);
+                debug2.setRespawnStage(END); // MagmaCube - decompile fix
                 debug2.resetSpikeCrystals();
                 for (final EndCrystal debug6 : debug3) {
                     debug6.setBeamTarget(null);
diff --git a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
index 00f66dd88919c0a9cde8b5ffbea09705bcfd7313..e3d4ecdf3c9343dac06ecf87afa6f6314005573d 100644
--- a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
+++ b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
@@ -87,7 +87,7 @@ public class EndDragonFight
     
     public EndDragonFight(final ServerLevel debug1, final long debug2, final CompoundTag debug4) {
         this.dragonEvent = (ServerBossEvent)new ServerBossEvent(new TranslatableComponent("entity.minecraft.ender_dragon"), BossEvent.BossBarColor.PINK, BossEvent.BossBarOverlay.PROGRESS).setPlayBossMusic(true).setCreateWorldFog(true);
-        this.gateways = (List<Integer>)Lists.newArrayList();
+        this.gateways = Lists.newArrayList(); // MagmaCube - decompile fix
         this.needsStateScanning = true;
         this.level = debug1;
         if (debug4.contains("DragonKilled", 99)) {
@@ -114,7 +114,7 @@ public class EndDragonFight
             }
         }
         else {
-            this.gateways.addAll((Collection<? extends Integer>)ContiguousSet.create(Range.closedOpen((Comparable)0, (Comparable)20), DiscreteDomain.integers()));
+            this.gateways.addAll(ContiguousSet.create(Range.closedOpen(0, 20), DiscreteDomain.integers())); // MagmaCube - decompile fix
             Collections.shuffle(this.gateways, new Random(debug2));
         }
         this.exitPortalPattern = BlockPatternBuilder.start().aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("  ###  ", " #   # ", "#     #", "#  #  #", "#     #", " #   # ", "  ###  ").aisle("       ", "  ###  ", " ##### ", " ##### ", " ##### ", "  ###  ", "       ").where('#', BlockInWorld.hasState(BlockPredicate.forBlock(Blocks.BEDROCK))).build();
@@ -132,7 +132,7 @@ public class EndDragonFight
         }
         final ListTag debug2 = new ListTag();
         for (final int debug3 : this.gateways) {
-            ((AbstractList<IntTag>)debug2).add(IntTag.valueOf(debug3));
+            debug2.add(IntTag.valueOf(debug3)); // MagmaCube - decompile fix
         }
         debug1.put("Gateways", debug2);
         return debug1;
@@ -302,7 +302,7 @@ public class EndDragonFight
     }
     
     private void updatePlayers() {
-        final Set<ServerPlayer> debug1 = (Set<ServerPlayer>)Sets.newHashSet();
+        final Set<ServerPlayer> debug1 = Sets.newHashSet(); // MagmaCube - decompile fix
         for (final ServerPlayer debug2 : this.level.getPlayers(EndDragonFight.VALID_PLAYER)) {
             this.dragonEvent.addPlayer(debug2);
             debug1.add(debug2);
@@ -423,7 +423,7 @@ public class EndDragonFight
                 }
                 debug1 = this.portalLocation;
             }
-            final List<EndCrystal> debug3 = (List<EndCrystal>)Lists.newArrayList();
+            final List<EndCrystal> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
             final BlockPos debug4 = debug1.above(1);
             for (final Direction debug5 : Direction.Plane.HORIZONTAL) {
                 final List<EndCrystal> debug6 = this.level.getEntitiesOfClass((Class<? extends EndCrystal>)EndCrystal.class, new AABB(debug4.relative(debug5, 2)));
diff --git a/src/main/java/net/minecraft/world/level/levelgen/Decoratable.java b/src/main/java/net/minecraft/world/level/levelgen/Decoratable.java
index 09ac13365288c0986cfb0df68bfafcf30efc5251..431dd53d4412eb3ab93be188004dd408505fad43 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/Decoratable.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/Decoratable.java
@@ -13,11 +13,11 @@ public interface Decoratable<R>
     R decorated(final ConfiguredDecorator<?> p0);
     
     default R chance(final int debug1) {
-        return this.decorated(FeatureDecorator.CHANCE.configured((Object)new ChanceDecoratorConfiguration(debug1)));
+        return this.decorated(FeatureDecorator.CHANCE.configured(new ChanceDecoratorConfiguration(debug1))); // MagmaCube - decompile fix
     }
     
     default R count(final UniformInt debug1) {
-        return this.decorated(FeatureDecorator.COUNT.configured((Object)new CountConfiguration(debug1)));
+        return this.decorated(FeatureDecorator.COUNT.configured(new CountConfiguration(debug1))); // MagmaCube - decompile fix
     }
     
     default R count(final int debug1) {
@@ -29,7 +29,7 @@ public interface Decoratable<R>
     }
     
     default R range(final int debug1) {
-        return this.decorated(FeatureDecorator.RANGE.configured((Object)new RangeDecoratorConfiguration(0, 0, debug1)));
+        return this.decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(0, 0, debug1))); // MagmaCube - decompile fix
     }
     
     default R squared() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/Heightmap.java b/src/main/java/net/minecraft/world/level/levelgen/Heightmap.java
index 13cd0a212d702cc42fbfcdb8108e4682efce64fe..1c95ec297886fac8812c6506ce46cb31ed7c87bb 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/Heightmap.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/Heightmap.java
@@ -44,7 +44,7 @@ public class Heightmap
         for (int debug7 = 0; debug7 < 16; ++debug7) {
             for (int debug8 = 0; debug8 < 16; ++debug8) {
                 for (final Types debug9 : debug1) {
-                    debug3.add((Object)debug0.getOrCreateHeightmapUnprimed(debug9));
+                    debug3.add(debug0.getOrCreateHeightmapUnprimed(debug9)); // MagmaCube - decompile fix
                 }
                 for (int debug10 = debug5 - 1; debug10 >= 0; --debug10) {
                     debug6.set(debug7, debug10, debug8);
@@ -178,14 +178,13 @@ public class Heightmap
         
         static {
             CODEC = StringRepresentable.fromEnum(Types::values, Types::getFromKey);
-            final Types[] array;
-            int length;
-            int i;
-            Types debug;
-            REVERSE_LOOKUP = Util.make((Map<String, Types>)Maps.newHashMap(), debug0 -> {
-                values();
-                for (length = array.length; i < length; ++i) {
-                    debug = array[i];
+            // MagmaCube start - decompile fix
+            REVERSE_LOOKUP = Util.make(Maps.newHashMap(), debug0 -> {
+                Types[] array = values();
+                int i = 0;
+                for (int length = array.length; i < length; ++i) {
+                    Types debug = array[i];
+                    // MagmaCube end - decompile fix
                     debug0.put(debug.serializationKey, debug);
                 }
             });
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
index 11f1316fd9d2428fd951691282767794ec32aa47..9318ad5664a3ac594db50f98e7c005607afe8b0a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -386,53 +386,44 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
         final int debug11 = debug9 << 4;
         final int debug12 = debug10 << 4;
         for (final StructureFeature<?> debug13 : StructureFeature.NOISE_AFFECTING_FEATURES) {
-            final Iterator<StructurePiece> iterator2;
-            StructurePiece debug14;
-            final ChunkPos debug70;
-            PoolElementStructurePiece debug15;
-            StructureTemplatePool.Projection debug16;
-            final ObjectList list;
-            final Iterator<JigsawJunction> iterator3;
-            JigsawJunction debug17;
-            int debug18;
-            int debug19;
-            final int n;
-            final int n2;
-            final ObjectList list2;
+            // MagmaCube start - decompile fix
             debug2.startsForFeature(SectionPos.of(debug8, 0), debug13).forEach(debug5 -> {
-                debug5.getPieces().iterator();
+                Iterator<StructurePiece> iterator2 = debug5.getPieces().iterator();
                 while (iterator2.hasNext()) {
-                    debug14 = iterator2.next();
-                    if (!debug14.isCloseToChunk(debug70, 12)) {
+                    StructurePiece debug14 = iterator2.next();
+                    if (!debug14.isCloseToChunk(debug8, 12)) {
                         continue;
                     }
                     else if (debug14 instanceof PoolElementStructurePiece) {
-                        debug15 = (PoolElementStructurePiece)debug14;
-                        debug16 = debug15.getElement().getProjection();
+                        PoolElementStructurePiece debug15 = (PoolElementStructurePiece)debug14;
+                        StructureTemplatePool.Projection debug16 = debug15.getElement().getProjection();
                         if (debug16 == StructureTemplatePool.Projection.RIGID) {
-                            list.add((Object)debug15);
+                            debug6.add(debug15);
                         }
-                        debug15.getJunctions().iterator();
+                        Iterator<JigsawJunction> iterator3 = debug15.getJunctions().iterator();
                         while (iterator3.hasNext()) {
-                            debug17 = iterator3.next();
-                            debug18 = debug17.getSourceX();
-                            debug19 = debug17.getSourceZ();
+                            JigsawJunction debug17 = iterator3.next();
+                            int debug18 = debug17.getSourceX();
+                            int debug19 = debug17.getSourceZ();
+                            int n = 0;
+                            int n2 = 0;
                             if (debug18 > n - 12 && debug19 > n2 - 12 && debug18 < n + 15 + 12) {
                                 if (debug19 >= n2 + 15 + 12) {
                                     continue;
                                 }
                                 else {
-                                    list2.add((Object)debug17);
+                                    debug7.add(debug17);
                                 }
                             }
                         }
                     }
                     else {
-                        list.add((Object)debug14);
+                        debug6.add(debug14);
                     }
                 }
                 return;
             });
+            // MagmaCube end - decompile fix
         }
         final double[][][] debug20 = new double[2][this.chunkCountZ + 1][this.chunkCountY + 1];
         for (int debug21 = 0; debug21 < this.chunkCountZ + 1; ++debug21) {
@@ -600,27 +591,21 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)BiomeSource.CODEC.fieldOf("biome_source").forGetter(debug0 -> debug0.biomeSource), (App)Codec.LONG.fieldOf("seed").stable().forGetter(debug0 -> debug0.seed), (App)NoiseGeneratorSettings.CODEC.fieldOf("settings").forGetter(debug0 -> debug0.settings)).apply(debug0, ((RecordCodecBuilder.Instance)debug0).stable((Object)NoiseBasedChunkGenerator::new)));
-        int debug;
-        int debug2;
-        int debug3;
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(BiomeSource.CODEC.fieldOf("biome_source").forGetter(debug0l -> debug0l.biomeSource), Codec.LONG.fieldOf("seed").stable().forGetter(debug0l -> debug0l.seed), NoiseGeneratorSettings.CODEC.fieldOf("settings").forGetter(debug0l -> debug0l.settings)).apply(debug0, debug0.stable(NoiseBasedChunkGenerator::new))); // MagmaCube - decompile fix
         BEARD_KERNEL = Util.make(new float[13824], debug0 -> {
-            for (debug = 0; debug < 24; ++debug) {
-                for (debug2 = 0; debug2 < 24; ++debug2) {
-                    for (debug3 = 0; debug3 < 24; ++debug3) {
+            for (int debug = 0; debug < 24; ++debug) { // MagmaCube - decompile fix
+                for (int debug2 = 0; debug2 < 24; ++debug2) { // MagmaCube - decompile fix
+                    for (int debug3 = 0; debug3 < 24; ++debug3) { // MagmaCube - decompile fix
                         debug0[debug * 24 * 24 + debug2 * 24 + debug3] = (float)computeContribution(debug2 - 12, debug3 - 12, debug - 12);
                     }
                 }
             }
             return;
         });
-        int debug4;
-        int debug5;
-        float debug6;
         BIOME_WEIGHTS = Util.make(new float[25], debug0 -> {
-            for (debug4 = -2; debug4 <= 2; ++debug4) {
-                for (debug5 = -2; debug5 <= 2; ++debug5) {
-                    debug6 = 10.0f / Mth.sqrt(debug4 * debug4 + debug5 * debug5 + 0.2f);
+            for (int debug4 = -2; debug4 <= 2; ++debug4) { // MagmaCube - decompile fix
+                for (int debug5 = -2; debug5 <= 2; ++debug5) { // MagmaCube - decompile fix
+                    float debug6 = 10.0f / Mth.sqrt(debug4 * debug4 + debug5 * debug5 + 0.2f); // MagmaCube - decompile fix
                     debug0[debug4 + 2 + (debug5 + 2) * 5] = debug6;
                 }
             }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
index a3bd7674fee998d1a0c7000dd2c4e975b1dd455c..2baf73f6323eeaf459c64749f303c0af66dc9c5a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
@@ -113,7 +113,7 @@ public final class NoiseGeneratorSettings
     }
     
     static {
-        DIRECT_CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)StructureSettings.CODEC.fieldOf("structures").forGetter((Function)NoiseGeneratorSettings::structureSettings), (App)NoiseSettings.CODEC.fieldOf("noise").forGetter((Function)NoiseGeneratorSettings::noiseSettings), (App)BlockState.CODEC.fieldOf("default_block").forGetter((Function)NoiseGeneratorSettings::getDefaultBlock), (App)BlockState.CODEC.fieldOf("default_fluid").forGetter((Function)NoiseGeneratorSettings::getDefaultFluid), (App)Codec.intRange(-20, 276).fieldOf("bedrock_roof_position").forGetter((Function)NoiseGeneratorSettings::getBedrockRoofPosition), (App)Codec.intRange(-20, 276).fieldOf("bedrock_floor_position").forGetter((Function)NoiseGeneratorSettings::getBedrockFloorPosition), (App)Codec.intRange(0, 255).fieldOf("sea_level").forGetter((Function)NoiseGeneratorSettings::seaLevel), (App)Codec.BOOL.fieldOf("disable_mob_generation").forGetter((Function)NoiseGeneratorSettings::disableMobGeneration)).apply(debug0, NoiseGeneratorSettings::new));
+        DIRECT_CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(StructureSettings.CODEC.fieldOf("structures").forGetter(NoiseGeneratorSettings::structureSettings), NoiseSettings.CODEC.fieldOf("noise").forGetter(NoiseGeneratorSettings::noiseSettings), BlockState.CODEC.fieldOf("default_block").forGetter(NoiseGeneratorSettings::getDefaultBlock), BlockState.CODEC.fieldOf("default_fluid").forGetter(NoiseGeneratorSettings::getDefaultFluid), Codec.intRange(-20, 276).fieldOf("bedrock_roof_position").forGetter(NoiseGeneratorSettings::getBedrockRoofPosition), Codec.intRange(-20, 276).fieldOf("bedrock_floor_position").forGetter(NoiseGeneratorSettings::getBedrockFloorPosition), Codec.intRange(0, 255).fieldOf("sea_level").forGetter(NoiseGeneratorSettings::seaLevel), Codec.BOOL.fieldOf("disable_mob_generation").forGetter(NoiseGeneratorSettings::disableMobGeneration)).apply(debug0, NoiseGeneratorSettings::new)); // MagmaCube - decompile fix
         CODEC = (Codec)RegistryFileCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, NoiseGeneratorSettings.DIRECT_CODEC);
         OVERWORLD = ResourceKey.create((ResourceKey<? extends Registry<NoiseGeneratorSettings>>)Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("overworld"));
         AMPLIFIED = ResourceKey.create((ResourceKey<? extends Registry<NoiseGeneratorSettings>>)Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("amplified"));
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSamplingSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSamplingSettings.java
index e0c186a0f20d8ae859c33a5946fb9ed3405ee3d5..a4d79c4ba0b76ad8c7b47ea0cf174261e3f4cd9a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSamplingSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSamplingSettings.java
@@ -40,6 +40,6 @@ public class NoiseSamplingSettings
     
     static {
         SCALE_RANGE = Codec.doubleRange(0.001, 1000.0);
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)NoiseSamplingSettings.SCALE_RANGE.fieldOf("xz_scale").forGetter((Function)NoiseSamplingSettings::xzScale), (App)NoiseSamplingSettings.SCALE_RANGE.fieldOf("y_scale").forGetter((Function)NoiseSamplingSettings::yScale), (App)NoiseSamplingSettings.SCALE_RANGE.fieldOf("xz_factor").forGetter((Function)NoiseSamplingSettings::xzFactor), (App)NoiseSamplingSettings.SCALE_RANGE.fieldOf("y_factor").forGetter((Function)NoiseSamplingSettings::yFactor)).apply(debug0, NoiseSamplingSettings::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(NoiseSamplingSettings.SCALE_RANGE.fieldOf("xz_scale").forGetter(NoiseSamplingSettings::xzScale), NoiseSamplingSettings.SCALE_RANGE.fieldOf("y_scale").forGetter(NoiseSamplingSettings::yScale), NoiseSamplingSettings.SCALE_RANGE.fieldOf("xz_factor").forGetter(NoiseSamplingSettings::xzFactor), NoiseSamplingSettings.SCALE_RANGE.fieldOf("y_factor").forGetter(NoiseSamplingSettings::yFactor)).apply(debug0, NoiseSamplingSettings::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
index 6890651015177d0d7481d9616ecec8162c438404..3542e338370bb97b274c8f31d17833f69cbf2ad5 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
@@ -91,6 +91,6 @@ public class NoiseSettings
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.intRange(0, 256).fieldOf("height").forGetter((Function)NoiseSettings::height), (App)NoiseSamplingSettings.CODEC.fieldOf("sampling").forGetter((Function)NoiseSettings::noiseSamplingSettings), (App)NoiseSlideSettings.CODEC.fieldOf("top_slide").forGetter((Function)NoiseSettings::topSlideSettings), (App)NoiseSlideSettings.CODEC.fieldOf("bottom_slide").forGetter((Function)NoiseSettings::bottomSlideSettings), (App)Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter((Function)NoiseSettings::noiseSizeHorizontal), (App)Codec.intRange(1, 4).fieldOf("size_vertical").forGetter((Function)NoiseSettings::noiseSizeVertical), (App)Codec.DOUBLE.fieldOf("density_factor").forGetter((Function)NoiseSettings::densityFactor), (App)Codec.DOUBLE.fieldOf("density_offset").forGetter((Function)NoiseSettings::densityOffset), (App)Codec.BOOL.fieldOf("simplex_surface_noise").forGetter((Function)NoiseSettings::useSimplexSurfaceNoise), (App)Codec.BOOL.optionalFieldOf("random_density_offset", (Object)false, Lifecycle.experimental()).forGetter((Function)NoiseSettings::randomDensityOffset), (App)Codec.BOOL.optionalFieldOf("island_noise_override", (Object)false, Lifecycle.experimental()).forGetter((Function)NoiseSettings::islandNoiseOverride), (App)Codec.BOOL.optionalFieldOf("amplified", (Object)false, Lifecycle.experimental()).forGetter((Function)NoiseSettings::isAmplified)).apply(debug0, NoiseSettings::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.intRange(0, 256).fieldOf("height").forGetter(NoiseSettings::height), NoiseSamplingSettings.CODEC.fieldOf("sampling").forGetter(NoiseSettings::noiseSamplingSettings), NoiseSlideSettings.CODEC.fieldOf("top_slide").forGetter(NoiseSettings::topSlideSettings), NoiseSlideSettings.CODEC.fieldOf("bottom_slide").forGetter(NoiseSettings::bottomSlideSettings), Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal), Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical), Codec.DOUBLE.fieldOf("density_factor").forGetter(NoiseSettings::densityFactor), Codec.DOUBLE.fieldOf("density_offset").forGetter(NoiseSettings::densityOffset), Codec.BOOL.fieldOf("simplex_surface_noise").forGetter(NoiseSettings::useSimplexSurfaceNoise), Codec.BOOL.optionalFieldOf("random_density_offset", false, Lifecycle.experimental()).forGetter(NoiseSettings::randomDensityOffset), Codec.BOOL.optionalFieldOf("island_noise_override", false, Lifecycle.experimental()).forGetter(NoiseSettings::islandNoiseOverride), Codec.BOOL.optionalFieldOf("amplified", false, Lifecycle.experimental()).forGetter(NoiseSettings::isAmplified)).apply(debug0, NoiseSettings::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSlideSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSlideSettings.java
index 7d381354e8e1db4e75054fd60e0d2e5c25a50390..5c67688afdab781d3db2ff6659c7f8b1ce74936f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSlideSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSlideSettings.java
@@ -32,6 +32,6 @@ public class NoiseSlideSettings
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.INT.fieldOf("target").forGetter((Function)NoiseSlideSettings::target), (App)Codec.intRange(0, 256).fieldOf("size").forGetter((Function)NoiseSlideSettings::size), (App)Codec.INT.fieldOf("offset").forGetter((Function)NoiseSlideSettings::offset)).apply(debug0, NoiseSlideSettings::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.INT.fieldOf("target").forGetter(NoiseSlideSettings::target), Codec.intRange(0, 256).fieldOf("size").forGetter(NoiseSlideSettings::size), Codec.INT.fieldOf("offset").forGetter(NoiseSlideSettings::offset)).apply(debug0, NoiseSlideSettings::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java b/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java
index 782b8bf209ea74d848a2330c2f752f73e80b8f3f..9e3292d4a64e637c9d9092b0e662738fbc8e3c45 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java
@@ -51,10 +51,10 @@ public class StructureSettings
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)StrongholdConfiguration.CODEC.optionalFieldOf("stronghold").forGetter(debug0 -> Optional.ofNullable(debug0.stronghold)), (App)Codec.simpleMap((Codec)Registry.STRUCTURE_FEATURE, (Codec)StructureFeatureConfiguration.CODEC, (Keyable)Registry.STRUCTURE_FEATURE).fieldOf("structures").forGetter(debug0 -> debug0.structureConfig)).apply(debug0, (BiFunction)StructureSettings::new));
-        DEFAULTS = ImmutableMap.builder().put((Object)StructureFeature.VILLAGE, (Object)new StructureFeatureConfiguration(32, 8, 10387312)).put((Object)StructureFeature.DESERT_PYRAMID, (Object)new StructureFeatureConfiguration(32, 8, 14357617)).put((Object)StructureFeature.IGLOO, (Object)new StructureFeatureConfiguration(32, 8, 14357618)).put((Object)StructureFeature.JUNGLE_TEMPLE, (Object)new StructureFeatureConfiguration(32, 8, 14357619)).put((Object)StructureFeature.SWAMP_HUT, (Object)new StructureFeatureConfiguration(32, 8, 14357620)).put((Object)StructureFeature.PILLAGER_OUTPOST, (Object)new StructureFeatureConfiguration(32, 8, 165745296)).put((Object)StructureFeature.STRONGHOLD, (Object)new StructureFeatureConfiguration(1, 0, 0)).put((Object)StructureFeature.OCEAN_MONUMENT, (Object)new StructureFeatureConfiguration(32, 5, 10387313)).put((Object)StructureFeature.END_CITY, (Object)new StructureFeatureConfiguration(20, 11, 10387313)).put((Object)StructureFeature.WOODLAND_MANSION, (Object)new StructureFeatureConfiguration(80, 20, 10387319)).put((Object)StructureFeature.BURIED_TREASURE, (Object)new StructureFeatureConfiguration(1, 0, 0)).put((Object)StructureFeature.MINESHAFT, (Object)new StructureFeatureConfiguration(1, 0, 0)).put((Object)StructureFeature.RUINED_PORTAL, (Object)new StructureFeatureConfiguration(40, 15, 34222645)).put((Object)StructureFeature.SHIPWRECK, (Object)new StructureFeatureConfiguration(24, 4, 165745295)).put((Object)StructureFeature.OCEAN_RUIN, (Object)new StructureFeatureConfiguration(20, 8, 14357621)).put((Object)StructureFeature.BASTION_REMNANT, (Object)new StructureFeatureConfiguration(27, 4, 30084232)).put((Object)StructureFeature.NETHER_BRIDGE, (Object)new StructureFeatureConfiguration(27, 4, 30084232)).put((Object)StructureFeature.NETHER_FOSSIL, (Object)new StructureFeatureConfiguration(2, 1, 14357921)).build();
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(StrongholdConfiguration.CODEC.optionalFieldOf("stronghold").forGetter(debug0l -> Optional.ofNullable(debug0l.stronghold)), Codec.simpleMap(Registry.STRUCTURE_FEATURE, StructureFeatureConfiguration.CODEC, Registry.STRUCTURE_FEATURE).fieldOf("structures").forGetter(debug0l -> debug0l.structureConfig)).apply(debug0, StructureSettings::new)); // MagmaCube - decompile fix
+        DEFAULTS = (ImmutableMap<StructureFeature<?>, StructureFeatureConfiguration>) (Object) ImmutableMap.builder().put(StructureFeature.VILLAGE, new StructureFeatureConfiguration(32, 8, 10387312)).put(StructureFeature.DESERT_PYRAMID, new StructureFeatureConfiguration(32, 8, 14357617)).put(StructureFeature.IGLOO, new StructureFeatureConfiguration(32, 8, 14357618)).put(StructureFeature.JUNGLE_TEMPLE, new StructureFeatureConfiguration(32, 8, 14357619)).put(StructureFeature.SWAMP_HUT, new StructureFeatureConfiguration(32, 8, 14357620)).put(StructureFeature.PILLAGER_OUTPOST, new StructureFeatureConfiguration(32, 8, 165745296)).put(StructureFeature.STRONGHOLD, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.OCEAN_MONUMENT, new StructureFeatureConfiguration(32, 5, 10387313)).put(StructureFeature.END_CITY, new StructureFeatureConfiguration(20, 11, 10387313)).put(StructureFeature.WOODLAND_MANSION, new StructureFeatureConfiguration(80, 20, 10387319)).put(StructureFeature.BURIED_TREASURE, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.MINESHAFT, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.RUINED_PORTAL, new StructureFeatureConfiguration(40, 15, 34222645)).put(StructureFeature.SHIPWRECK, new StructureFeatureConfiguration(24, 4, 165745295)).put(StructureFeature.OCEAN_RUIN, new StructureFeatureConfiguration(20, 8, 14357621)).put(StructureFeature.BASTION_REMNANT, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_BRIDGE, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_FOSSIL, new StructureFeatureConfiguration(2, 1, 14357921)).build(); // MagmaCube - decompile fix
         for (final StructureFeature<?> debug : Registry.STRUCTURE_FEATURE) {
-            if (!StructureSettings.DEFAULTS.containsKey((Object)debug)) {
+            if (!StructureSettings.DEFAULTS.containsKey(debug)) { // MagmaCube - decompile fix
                 throw new IllegalStateException("Structure feature without default settings: " + Registry.STRUCTURE_FEATURE.getKey(debug));
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
index 88241e898b945ef2d5c730bf47c412d9f847dff2..907c19ba048cad71ac898eb438a342fa58ca115e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -63,7 +63,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class WorldGenSettings {
-    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), (App)Codec.BOOL.fieldOf("generate_features").orElse((Object)true).stable().forGetter(WorldGenSettings::generateFeatures), (App)Codec.BOOL.fieldOf("bonus_chest").orElse((Object)false).stable().forGetter(WorldGenSettings::generateBonusChest), (App)MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), (App)Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter(debug0 -> debug0.legacyCustomOptions)).apply((Applicative)debug02, debug02.stable((Object)((Function5)WorldGenSettings::new)))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
+    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.<WorldGenSettings>create(debug02 -> debug02.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter(debug0 -> debug0.legacyCustomOptions)).apply(debug02, debug02.stable(WorldGenSettings::new))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity()); // MagmaCube - decompile fix
     private static final Logger LOGGER = LogManager.getLogger();
     private final long seed;
     private final boolean generateFeatures;
@@ -77,9 +77,9 @@ public class WorldGenSettings {
             return DataResult.error((String)"Overworld settings missing");
         }
         if (this.stable()) {
-            return DataResult.success((Object)this, (Lifecycle)Lifecycle.stable());
+            return DataResult.success(this, (Lifecycle)Lifecycle.stable()); // MagmaCube - decompile fix
         }
-        return DataResult.success((Object)this);
+        return DataResult.success(this); // MagmaCube - decompile fix
     }
 
     private boolean stable() {
@@ -218,7 +218,7 @@ public class WorldGenSettings {
         switch (debug7) {
             case "flat": {
                 JsonObject debug16 = !debug2.isEmpty() ? GsonHelper.parse(debug2) : new JsonObject();
-                Dynamic debug17 = new Dynamic((DynamicOps)JsonOps.INSTANCE, (Object)debug16);
+                Dynamic<JsonObject> debug17 = new Dynamic(JsonOps.INSTANCE, debug16); // MagmaCube - decompile fix
                 return new WorldGenSettings(debug8, debug5, false, WorldGenSettings.withOverworld(debug10, debug13, (ChunkGenerator)new FlatLevelSource(FlatLevelGeneratorSettings.CODEC.parse(debug17).resultOrPartial(((Logger)LOGGER)::error).orElseGet(() -> FlatLevelGeneratorSettings.getDefault(debug11)))));
             }
             case "debug_all_block_states": {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java b/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java
index 6337f79d89150a40ed74524782d81304dd52668d..9232e37452ad0b511ebd3f89635c0c556c35ce6d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java
@@ -39,7 +39,7 @@ public class ConfiguredWorldCarver<WC extends CarverConfiguration>
     }
     
     static {
-        DIRECT_CODEC = Registry.CARVER.dispatch(debug0 -> debug0.worldCarver, (Function)WorldCarver::configuredCodec);
+        DIRECT_CODEC = Registry.CARVER.dispatch(debug0 -> debug0.worldCarver, WorldCarver::configuredCodec); // MagmaCube - decompile fix
         CODEC = (Codec)RegistryFileCodec.create(Registry.CONFIGURED_CARVER_REGISTRY, ConfiguredWorldCarver.DIRECT_CODEC);
         LIST_CODEC = RegistryFileCodec.homogeneousList(Registry.CONFIGURED_CARVER_REGISTRY, ConfiguredWorldCarver.DIRECT_CODEC);
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/carver/UnderwaterCanyonWorldCarver.java b/src/main/java/net/minecraft/world/level/levelgen/carver/UnderwaterCanyonWorldCarver.java
index 97ab820c1fa67cb693c1cacf395d02690f79c3d4..3e39543f890a762ba0336e37172ce1d620a4dfe8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/carver/UnderwaterCanyonWorldCarver.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/carver/UnderwaterCanyonWorldCarver.java
@@ -18,7 +18,7 @@ public class UnderwaterCanyonWorldCarver extends CanyonWorldCarver
 {
     public UnderwaterCanyonWorldCarver(final Codec<ProbabilityFeatureConfiguration> debug1) {
         super(debug1);
-        this.replaceableBlocks = (Set<Block>)ImmutableSet.of((Object)Blocks.STONE, (Object)Blocks.GRANITE, (Object)Blocks.DIORITE, (Object)Blocks.ANDESITE, (Object)Blocks.DIRT, (Object)Blocks.COARSE_DIRT, (Object[])new Block[] { Blocks.PODZOL, Blocks.GRASS_BLOCK, Blocks.TERRACOTTA, Blocks.WHITE_TERRACOTTA, Blocks.ORANGE_TERRACOTTA, Blocks.MAGENTA_TERRACOTTA, Blocks.LIGHT_BLUE_TERRACOTTA, Blocks.YELLOW_TERRACOTTA, Blocks.LIME_TERRACOTTA, Blocks.PINK_TERRACOTTA, Blocks.GRAY_TERRACOTTA, Blocks.LIGHT_GRAY_TERRACOTTA, Blocks.CYAN_TERRACOTTA, Blocks.PURPLE_TERRACOTTA, Blocks.BLUE_TERRACOTTA, Blocks.BROWN_TERRACOTTA, Blocks.GREEN_TERRACOTTA, Blocks.RED_TERRACOTTA, Blocks.BLACK_TERRACOTTA, Blocks.SANDSTONE, Blocks.RED_SANDSTONE, Blocks.MYCELIUM, Blocks.SNOW, Blocks.SAND, Blocks.GRAVEL, Blocks.WATER, Blocks.LAVA, Blocks.OBSIDIAN, Blocks.AIR, Blocks.CAVE_AIR });
+        this.replaceableBlocks = (Set<Block>)ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE, Blocks.DIRT, Blocks.COARSE_DIRT, new Block[] { Blocks.PODZOL, Blocks.GRASS_BLOCK, Blocks.TERRACOTTA, Blocks.WHITE_TERRACOTTA, Blocks.ORANGE_TERRACOTTA, Blocks.MAGENTA_TERRACOTTA, Blocks.LIGHT_BLUE_TERRACOTTA, Blocks.YELLOW_TERRACOTTA, Blocks.LIME_TERRACOTTA, Blocks.PINK_TERRACOTTA, Blocks.GRAY_TERRACOTTA, Blocks.LIGHT_GRAY_TERRACOTTA, Blocks.CYAN_TERRACOTTA, Blocks.PURPLE_TERRACOTTA, Blocks.BLUE_TERRACOTTA, Blocks.BROWN_TERRACOTTA, Blocks.GREEN_TERRACOTTA, Blocks.RED_TERRACOTTA, Blocks.BLACK_TERRACOTTA, Blocks.SANDSTONE, Blocks.RED_SANDSTONE, Blocks.MYCELIUM, Blocks.SNOW, Blocks.SAND, Blocks.GRAVEL, Blocks.WATER, Blocks.LAVA, Blocks.OBSIDIAN, Blocks.AIR, Blocks.CAVE_AIR }); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/levelgen/carver/WorldCarver.java b/src/main/java/net/minecraft/world/level/levelgen/carver/WorldCarver.java
index 5a25cbfedbd46e731702594ef62459426c6407f8..de188886e96872654be14d1f850d11b357015f15 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/carver/WorldCarver.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/carver/WorldCarver.java
@@ -45,10 +45,10 @@ public abstract class WorldCarver<C extends CarverConfiguration>
     }
     
     public WorldCarver(final Codec<C> debug1, final int debug2) {
-        this.replaceableBlocks = (Set<Block>)ImmutableSet.of((Object)Blocks.STONE, (Object)Blocks.GRANITE, (Object)Blocks.DIORITE, (Object)Blocks.ANDESITE, (Object)Blocks.DIRT, (Object)Blocks.COARSE_DIRT, (Object[])new Block[] { Blocks.PODZOL, Blocks.GRASS_BLOCK, Blocks.TERRACOTTA, Blocks.WHITE_TERRACOTTA, Blocks.ORANGE_TERRACOTTA, Blocks.MAGENTA_TERRACOTTA, Blocks.LIGHT_BLUE_TERRACOTTA, Blocks.YELLOW_TERRACOTTA, Blocks.LIME_TERRACOTTA, Blocks.PINK_TERRACOTTA, Blocks.GRAY_TERRACOTTA, Blocks.LIGHT_GRAY_TERRACOTTA, Blocks.CYAN_TERRACOTTA, Blocks.PURPLE_TERRACOTTA, Blocks.BLUE_TERRACOTTA, Blocks.BROWN_TERRACOTTA, Blocks.GREEN_TERRACOTTA, Blocks.RED_TERRACOTTA, Blocks.BLACK_TERRACOTTA, Blocks.SANDSTONE, Blocks.RED_SANDSTONE, Blocks.MYCELIUM, Blocks.SNOW, Blocks.PACKED_ICE });
-        this.liquids = (Set<Fluid>)ImmutableSet.of((Object)Fluids.WATER);
+        this.replaceableBlocks = ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE, Blocks.DIRT, Blocks.COARSE_DIRT, new Block[] { Blocks.PODZOL, Blocks.GRASS_BLOCK, Blocks.TERRACOTTA, Blocks.WHITE_TERRACOTTA, Blocks.ORANGE_TERRACOTTA, Blocks.MAGENTA_TERRACOTTA, Blocks.LIGHT_BLUE_TERRACOTTA, Blocks.YELLOW_TERRACOTTA, Blocks.LIME_TERRACOTTA, Blocks.PINK_TERRACOTTA, Blocks.GRAY_TERRACOTTA, Blocks.LIGHT_GRAY_TERRACOTTA, Blocks.CYAN_TERRACOTTA, Blocks.PURPLE_TERRACOTTA, Blocks.BLUE_TERRACOTTA, Blocks.BROWN_TERRACOTTA, Blocks.GREEN_TERRACOTTA, Blocks.RED_TERRACOTTA, Blocks.BLACK_TERRACOTTA, Blocks.SANDSTONE, Blocks.RED_SANDSTONE, Blocks.MYCELIUM, Blocks.SNOW, Blocks.PACKED_ICE }); // MagmaCube - decompile fix
+        this.liquids = ImmutableSet.of(Fluids.WATER); // MagmaCube - decompile fix
         this.genHeight = debug2;
-        this.configuredCodec = (Codec<ConfiguredWorldCarver<C>>)debug1.fieldOf("config").xmap((Function)this::configured, (Function)ConfiguredWorldCarver::config).codec();
+        this.configuredCodec = (Codec<ConfiguredWorldCarver<C>>)debug1.fieldOf("config").xmap(this::configured, ConfiguredWorldCarver::config).codec(); // MagmaCube - decompile fix
     }
     
     public ConfiguredWorldCarver<C> configured(final C debug1) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/BonusChestFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/BonusChestFeature.java
index 9780918c3799893c2e8fd65dbccfb3ff4dcf365b..8c6ccb2da8ae480c89df82806efd34ba16550e12 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/BonusChestFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/BonusChestFeature.java
@@ -34,9 +34,9 @@ extends Feature<NoneFeatureConfiguration> {
     @Override
     public boolean place(WorldGenLevel debug1, ChunkGenerator debug2, Random debug3, BlockPos debug4, NoneFeatureConfiguration debug5) {
         ChunkPos debug6 = new ChunkPos(debug4);
-        List debug7 = IntStream.rangeClosed(debug6.getMinBlockX(), debug6.getMaxBlockX()).boxed().collect(Collectors.toList());
+        List<Integer> debug7 = IntStream.rangeClosed(debug6.getMinBlockX(), debug6.getMaxBlockX()).boxed().collect(Collectors.toList()); // MagmaCube - decompile fix
         Collections.shuffle(debug7, debug3);
-        List debug8 = IntStream.rangeClosed(debug6.getMinBlockZ(), debug6.getMaxBlockZ()).boxed().collect(Collectors.toList());
+        List<Integer> debug8 = IntStream.rangeClosed(debug6.getMinBlockZ(), debug6.getMaxBlockZ()).boxed().collect(Collectors.toList()); // MagmaCube - decompile fix
         Collections.shuffle(debug8, debug3);
         BlockPos.MutableBlockPos debug9 = new BlockPos.MutableBlockPos();
         for (Integer debug11 : debug7) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
index cca5118369d57bf38039d8b023dd0aaa27d1ea9e..9b7c9e0cb45202ea62d54cf566cf76faecfbdf15 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
@@ -43,7 +43,7 @@ public class ConfiguredFeature<FC extends FeatureConfiguration, F extends Featur
     
     @Override
     public ConfiguredFeature<?, ?> decorated(final ConfiguredDecorator<?> debug1) {
-        return Feature.DECORATED.configured((Object)new DecoratedFeatureConfiguration(() -> this, debug1));
+        return Feature.DECORATED.configured(new DecoratedFeatureConfiguration(() -> this, debug1)); // MagmaCube - decompile fix
     }
     
     public WeightedConfiguredFeature weighted(final float debug1) {
@@ -55,11 +55,11 @@ public class ConfiguredFeature<FC extends FeatureConfiguration, F extends Featur
     }
     
     public Stream<ConfiguredFeature<?, ?>> getFeatures() {
-        return Stream.concat((Stream<? extends ConfiguredFeature<?, ?>>)Stream.of((T)this), (Stream<? extends ConfiguredFeature<?, ?>>)this.config.getFeatures());
+        return Stream.concat((Stream<? extends ConfiguredFeature<?, ?>>)Stream.of(this), (Stream<? extends ConfiguredFeature<?, ?>>)this.config.getFeatures()); // MagmaCube - decompile fix
     }
     
     static {
-        DIRECT_CODEC = Registry.FEATURE.dispatch(debug0 -> debug0.feature, (Function)Feature::configuredCodec);
+        DIRECT_CODEC = Registry.FEATURE.dispatch(debug0 -> debug0.feature, Feature::configuredCodec); // MagmaCube - decompile fix
         CODEC = (Codec)RegistryFileCodec.create(Registry.CONFIGURED_FEATURE_REGISTRY, ConfiguredFeature.DIRECT_CODEC);
         LIST_CODEC = RegistryFileCodec.homogeneousList(Registry.CONFIGURED_FEATURE_REGISTRY, ConfiguredFeature.DIRECT_CODEC);
         LOGGER = LogManager.getLogger();
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/DecoratedFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/DecoratedFeature.java
index c400e73ea38142629f7e132b2217d692bc3446b7..9c96dd37310b45e246e515f6b983429ea2b21dc4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/DecoratedFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/DecoratedFeature.java
@@ -20,10 +20,9 @@ public class DecoratedFeature extends Feature<DecoratedFeatureConfiguration>
     @Override
     public boolean place(final WorldGenLevel debug1, final ChunkGenerator debug2, final Random debug3, final BlockPos debug4, final DecoratedFeatureConfiguration debug5) {
         final MutableBoolean debug6 = new MutableBoolean();
-        final MutableBoolean mutableBoolean;
-        debug5.decorator.getPositions(new DecorationContext(debug1, debug2), debug3, debug4).forEach(debug5 -> {
-            if (debug5.feature.get().place(debug1, debug2, debug3, debug5)) {
-                mutableBoolean.setTrue();
+        debug5.decorator.getPositions(new DecorationContext(debug1, debug2), debug3, debug4).forEach(debug5l -> { // MagmaCube - decompile fix
+            if (debug5.feature.get().place(debug1, debug2, debug3, debug5l)) { // MagmaCube - decompile fix
+                debug6.setTrue(); // MagmaCube - decompile fix
             }
             return;
         });
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/Feature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/Feature.java
index 9ef1842e1675270da8289bc4d5b1de321984d8da..a6d33a4402cfe96a4faf08ea4ab61b73ed6ac182 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/Feature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/Feature.java
@@ -98,7 +98,7 @@ public abstract class Feature<FC extends FeatureConfiguration>
     }
     
     public Feature(final Codec<FC> debug1) {
-        this.configuredCodec = (Codec<ConfiguredFeature<FC, Feature<FC>>>)debug1.fieldOf("config").xmap(debug1 -> new ConfiguredFeature(this, debug1), debug0 -> debug0.config).codec();
+        this.configuredCodec = (Codec<ConfiguredFeature<FC, Feature<FC>>>)debug1.fieldOf("config").xmap(debug1l -> new ConfiguredFeature<>(this, debug1l), debug0 -> debug0.config).codec(); // MagmaCube - decompile fix
     }
     
     public Codec<ConfiguredFeature<FC, Feature<FC>>> configuredCodec() {
@@ -106,7 +106,7 @@ public abstract class Feature<FC extends FeatureConfiguration>
     }
     
     public ConfiguredFeature<FC, ?> configured(final FC debug1) {
-        return new ConfiguredFeature<FC, Object>(this, debug1);
+        return new ConfiguredFeature<>(this, debug1); // MagmaCube - decompile fix
     }
     
     protected void setBlock(final LevelWriter debug1, final BlockPos debug2, final BlockState debug3) {
@@ -124,7 +124,7 @@ public abstract class Feature<FC extends FeatureConfiguration>
     }
     
     public static boolean isGrassOrDirt(final LevelSimulatedReader debug0, final BlockPos debug1) {
-        return debug0.isStateAtPosition(debug1, debug0 -> isDirt(debug0.getBlock()));
+        return debug0.isStateAtPosition(debug1, debug0l -> isDirt(debug0l.getBlock())); // MagmaCube - decompile fix
     }
     
     public static boolean isAir(final LevelSimulatedReader debug0, final BlockPos debug1) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/HugeBrownMushroomFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/HugeBrownMushroomFeature.java
index 949f47ac1d9a29e76c2c6122bcbd78962534420b..e84294331cb68945f6fae72b402233d7ded8a1b5 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/HugeBrownMushroomFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/HugeBrownMushroomFeature.java
@@ -36,7 +36,7 @@ public class HugeBrownMushroomFeature extends AbstractHugeMushroomFeature
                         final boolean debug17 = debug11 || (debug15 && debug8 == debug7 - 1);
                         final boolean debug18 = debug12 || (debug14 && debug9 == 1 - debug7);
                         final boolean debug19 = debug13 || (debug14 && debug9 == debug7 - 1);
-                        this.setBlock(debug1, debug5, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug6.capProvider.getState(debug2, debug3)).setValue((Property<Comparable>)HugeMushroomBlock.WEST, debug16)).setValue((Property<Comparable>)HugeMushroomBlock.EAST, debug17)).setValue((Property<Comparable>)HugeMushroomBlock.NORTH, debug18)).setValue((Property<Comparable>)HugeMushroomBlock.SOUTH, debug19));
+                        this.setBlock(debug1, debug5, ((((debug6.capProvider.getState(debug2, debug3)).setValue(HugeMushroomBlock.WEST, debug16)).setValue(HugeMushroomBlock.EAST, debug17)).setValue(HugeMushroomBlock.NORTH, debug18)).setValue(HugeMushroomBlock.SOUTH, debug19)); // MagmaCube - decompile fix
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/HugeFungusConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/HugeFungusConfiguration.java
index aa05dafb77548eeb460abdeccf7ed573c774f3dd..be56778fee1789ac039087426307df22b2d2cef0 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/HugeFungusConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/HugeFungusConfiguration.java
@@ -30,7 +30,7 @@ public class HugeFungusConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)BlockState.CODEC.fieldOf("valid_base_block").forGetter(debug0 -> debug0.validBaseState), (App)BlockState.CODEC.fieldOf("stem_state").forGetter(debug0 -> debug0.stemState), (App)BlockState.CODEC.fieldOf("hat_state").forGetter(debug0 -> debug0.hatState), (App)BlockState.CODEC.fieldOf("decor_state").forGetter(debug0 -> debug0.decorState), (App)Codec.BOOL.fieldOf("planted").orElse((Object)false).forGetter(debug0 -> debug0.planted)).apply(debug0, HugeFungusConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(BlockState.CODEC.fieldOf("valid_base_block").forGetter(debug0l -> debug0l.validBaseState), BlockState.CODEC.fieldOf("stem_state").forGetter(debug0l -> debug0l.stemState), BlockState.CODEC.fieldOf("hat_state").forGetter(debug0l -> debug0l.hatState), BlockState.CODEC.fieldOf("decor_state").forGetter(debug0l -> debug0l.decorState), Codec.BOOL.fieldOf("planted").orElse(false).forGetter(debug0l -> debug0l.planted)).apply(debug0, HugeFungusConfiguration::new)); // MagmaCube - decompile fix
         HUGE_CRIMSON_FUNGI_PLANTED_CONFIG = new HugeFungusConfiguration(Blocks.CRIMSON_NYLIUM.defaultBlockState(), Blocks.CRIMSON_STEM.defaultBlockState(), Blocks.NETHER_WART_BLOCK.defaultBlockState(), Blocks.SHROOMLIGHT.defaultBlockState(), true);
         HUGE_CRIMSON_FUNGI_NOT_PLANTED_CONFIG = new HugeFungusConfiguration(HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_PLANTED_CONFIG.validBaseState, HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_PLANTED_CONFIG.stemState, HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_PLANTED_CONFIG.hatState, HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_PLANTED_CONFIG.decorState, false);
         HUGE_WARPED_FUNGI_PLANTED_CONFIG = new HugeFungusConfiguration(Blocks.WARPED_NYLIUM.defaultBlockState(), Blocks.WARPED_STEM.defaultBlockState(), Blocks.WARPED_WART_BLOCK.defaultBlockState(), Blocks.SHROOMLIGHT.defaultBlockState(), true);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/HugeRedMushroomFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/HugeRedMushroomFeature.java
index fe8f2c805500cbdc3fc7eb967c40d544753b694e..700dd0ab6a80c3416cddcf3a4eb2371b03b3d905 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/HugeRedMushroomFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/HugeRedMushroomFeature.java
@@ -35,7 +35,7 @@ public class HugeRedMushroomFeature extends AbstractHugeMushroomFeature
                     if (debug7 >= debug4 || debug16 != debug17) {
                         debug5.setWithOffset(debug3, debug10, debug7, debug11);
                         if (!debug1.getBlockState(debug5).isSolidRender(debug1, debug5)) {
-                            this.setBlock(debug1, debug5, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug6.capProvider.getState(debug2, debug3)).setValue((Property<Comparable>)HugeMushroomBlock.UP, debug7 >= debug4 - 1)).setValue((Property<Comparable>)HugeMushroomBlock.WEST, debug10 < -debug9)).setValue((Property<Comparable>)HugeMushroomBlock.EAST, debug10 > debug9)).setValue((Property<Comparable>)HugeMushroomBlock.NORTH, debug11 < -debug9)).setValue((Property<Comparable>)HugeMushroomBlock.SOUTH, debug11 > debug9));
+                            this.setBlock(debug1, debug5, (((((debug6.capProvider.getState(debug2, debug3)).setValue(HugeMushroomBlock.UP, debug7 >= debug4 - 1)).setValue(HugeMushroomBlock.WEST, debug10 < -debug9)).setValue(HugeMushroomBlock.EAST, debug10 > debug9)).setValue(HugeMushroomBlock.NORTH, debug11 < -debug9)).setValue(HugeMushroomBlock.SOUTH, debug11 > debug9)); // MagmaCube - decompile fix
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/KelpFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/KelpFeature.java
index 101a85c8128b27d2a6956563e2be09413b7a0c3c..77ed2fd155ca4812469aa593b0cb52cfa5739b08 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/KelpFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/KelpFeature.java
@@ -32,7 +32,7 @@ public class KelpFeature extends Feature<NoneFeatureConfiguration>
             for (int debug11 = 1 + debug3.nextInt(10), debug12 = 0; debug12 <= debug11; ++debug12) {
                 if (debug1.getBlockState(debug8).is(Blocks.WATER) && debug1.getBlockState(debug8.above()).is(Blocks.WATER) && debug10.canSurvive(debug1, debug8)) {
                     if (debug12 == debug11) {
-                        debug1.setBlock(debug8, ((StateHolder<O, BlockState>)debug9).setValue((Property<Comparable>)KelpBlock.AGE, debug3.nextInt(4) + 20), 2);
+                        debug1.setBlock(debug8, (debug9).setValue(KelpBlock.AGE, debug3.nextInt(4) + 20), 2); // MagmaCube - decompile fix
                         ++debug6;
                     }
                     else {
@@ -42,7 +42,7 @@ public class KelpFeature extends Feature<NoneFeatureConfiguration>
                 else if (debug12 > 0) {
                     final BlockPos debug13 = debug8.below();
                     if (debug9.canSurvive(debug1, debug13) && !debug1.getBlockState(debug13.below()).is(Blocks.KELP)) {
-                        debug1.setBlock(debug13, ((StateHolder<O, BlockState>)debug9).setValue((Property<Comparable>)KelpBlock.AGE, debug3.nextInt(4) + 20), 2);
+                        debug1.setBlock(debug13, (debug9).setValue(KelpBlock.AGE, debug3.nextInt(4) + 20), 2); // MagmaCube - decompile fix
                         ++debug6;
                         break;
                     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java
index 8f9ba000e07eb247d302d260832eb3fb233b97b0..90dcd66f94a1f7dffacc62da75c0211c6fb432c5 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java
@@ -69,8 +69,8 @@ extends StructureFeature<RuinedPortalConfiguration> {
         } else {
             debug7 = debug2 == RuinedPortalPiece.VerticalPlacement.PARTLY_BURIED ? debug4 - debug5 + RuinedPortalFeature.randomIntInclusive(debug0, 2, 8) : debug4;
         }
-        ImmutableList debug82 = ImmutableList.of((Object)new BlockPos(debug6.x0, 0, debug6.z0), (Object)new BlockPos(debug6.x1, 0, debug6.z0), (Object)new BlockPos(debug6.x0, 0, debug6.z1), (Object)new BlockPos(debug6.x1, 0, debug6.z1));
-        List debug9 = debug82.stream().map(debug1 -> debug12.getBaseColumn(debug1.getX(), debug1.getZ())).collect(Collectors.toList());
+        ImmutableList<BlockPos> debug82 = ImmutableList.of(new BlockPos(debug6.x0, 0, debug6.z0), new BlockPos(debug6.x1, 0, debug6.z0), new BlockPos(debug6.x0, 0, debug6.z1), new BlockPos(debug6.x1, 0, debug6.z1)); // MagmaCube - decompile fix
+        List<BlockGetter> debug9 = debug82.stream().map(debug1 -> debug12.getBaseColumn(debug1.getX(), debug1.getZ())).collect(Collectors.toList()); // MagmaCube - decompile fix
         Heightmap.Types debug10 = debug2 == RuinedPortalPiece.VerticalPlacement.ON_OCEAN_FLOOR ? Heightmap.Types.OCEAN_FLOOR_WG : Heightmap.Types.WORLD_SURFACE_WG;
         BlockPos.MutableBlockPos debug11 = new BlockPos.MutableBlockPos();
         block0: for (debug122 = debug7; debug122 > 15; --debug122) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/SeaPickleFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/SeaPickleFeature.java
index 7ba1a3f280633fb431003a11c0c7c906cc68784d..f69d0919e2de1f232f3b0fda75bb362ed371a682 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/SeaPickleFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/SeaPickleFeature.java
@@ -29,7 +29,7 @@ public class SeaPickleFeature extends Feature<CountConfiguration>
             final int debug10 = debug3.nextInt(8) - debug3.nextInt(8);
             final int debug11 = debug1.getHeight(Heightmap.Types.OCEAN_FLOOR, debug4.getX() + debug9, debug4.getZ() + debug10);
             final BlockPos debug12 = new BlockPos(debug4.getX() + debug9, debug11, debug4.getZ() + debug10);
-            final BlockState debug13 = ((StateHolder<O, BlockState>)Blocks.SEA_PICKLE.defaultBlockState()).setValue((Property<Comparable>)SeaPickleBlock.PICKLES, debug3.nextInt(4) + 1);
+            final BlockState debug13 = (Blocks.SEA_PICKLE.defaultBlockState()).setValue(SeaPickleBlock.PICKLES, debug3.nextInt(4) + 1); // MagmaCube - decompile fix
             if (debug1.getBlockState(debug12).is(Blocks.WATER) && debug13.canSurvive(debug1, debug12)) {
                 debug1.setBlock(debug12, debug13, 2);
                 ++debug6;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/SeagrassFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/SeagrassFeature.java
index dfeabbbbbb0f5b9a904ceb5a6f1fa0902fdcf211..54fb9bc0421dc833f08f914d1ebeb8afad878810 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/SeagrassFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/SeagrassFeature.java
@@ -34,7 +34,7 @@ public class SeagrassFeature extends Feature<ProbabilityFeatureConfiguration>
             final BlockState debug12 = debug11 ? Blocks.TALL_SEAGRASS.defaultBlockState() : Blocks.SEAGRASS.defaultBlockState();
             if (debug12.canSurvive(debug1, debug10)) {
                 if (debug11) {
-                    final BlockState debug13 = ((StateHolder<O, BlockState>)debug12).setValue(TallSeagrass.HALF, DoubleBlockHalf.UPPER);
+                    final BlockState debug13 = (debug12).setValue(TallSeagrass.HALF, DoubleBlockHalf.UPPER); // MagmaCube - decompile fix
                     final BlockPos debug14 = debug10.above();
                     if (debug1.getBlockState(debug14).is(Blocks.WATER)) {
                         debug1.setBlock(debug10, debug12, 2);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
index ed3faa56b3f35e3cb59925019c0c4e4656ac3133..167d4adaa4c5269496333eec7c9c3d6a03459fc6 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
@@ -53,7 +53,7 @@ extends Feature<SpikeConfiguration> {
     public static List<EndSpike> getSpikesForLevel(WorldGenLevel debug0) {
         Random debug1 = new Random(debug0.getSeed());
         long debug2 = debug1.nextLong() & 0xFFFFL;
-        return (List)SPIKE_CACHE.getUnchecked((Object)debug2);
+        return (List)SPIKE_CACHE.getUnchecked(debug2); // MagmaCube - decompile fix
     }
 
     @Override
@@ -128,14 +128,10 @@ extends Feature<SpikeConfiguration> {
             }
             return debug3;
         }
-
-        public /* synthetic */ Object load(Object object) throws Exception {
-            return this.load((Long)object);
-        }
     }
 
     public static class EndSpike {
-        public static final Codec<EndSpike> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)Codec.INT.fieldOf("centerX").orElse((Object)0).forGetter(debug0 -> debug0.centerX), (App)Codec.INT.fieldOf("centerZ").orElse((Object)0).forGetter(debug0 -> debug0.centerZ), (App)Codec.INT.fieldOf("radius").orElse((Object)0).forGetter(debug0 -> debug0.radius), (App)Codec.INT.fieldOf("height").orElse((Object)0).forGetter(debug0 -> debug0.height), (App)Codec.BOOL.fieldOf("guarded").orElse((Object)false).forGetter(debug0 -> debug0.guarded)).apply((Applicative)debug02, EndSpike::new));
+        public static final Codec<EndSpike> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Codec.INT.fieldOf("centerX").orElse(0).forGetter(debug0 -> debug0.centerX), Codec.INT.fieldOf("centerZ").orElse(0).forGetter(debug0 -> debug0.centerZ), Codec.INT.fieldOf("radius").orElse(0).forGetter(debug0 -> debug0.radius), Codec.INT.fieldOf("height").orElse(0).forGetter(debug0 -> debug0.height), Codec.BOOL.fieldOf("guarded").orElse(false).forGetter(debug0 -> debug0.guarded)).apply(debug02, EndSpike::new)); // MagmaCube - decompile fix
         private final int centerX;
         private final int centerZ;
         private final int radius;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
index 7304e84844982851fcd13147e92efa8990b7f325..d60a3fc936131c2c55e09376f57bfb4ef5cb3aaf 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
@@ -102,17 +102,17 @@ public abstract class StructureFeature<C extends FeatureConfiguration> {
     public static final StructureFeature<JigsawConfiguration> BASTION_REMNANT = StructureFeature.register("Bastion_Remnant", new BastionFeature(JigsawConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
     public static final List<StructureFeature<?>> NOISE_AFFECTING_FEATURES = ImmutableList.of(PILLAGER_OUTPOST, VILLAGE, NETHER_FOSSIL);
     private static final ResourceLocation JIGSAW_RENAME = new ResourceLocation("jigsaw");
-    private static final Map<ResourceLocation, ResourceLocation> RENAMES = ImmutableMap.builder().put((Object)new ResourceLocation("nvi"), (Object)JIGSAW_RENAME).put((Object)new ResourceLocation("pcp"), (Object)JIGSAW_RENAME).put((Object)new ResourceLocation("bastionremnant"), (Object)JIGSAW_RENAME).put((Object)new ResourceLocation("runtime"), (Object)JIGSAW_RENAME).build();
+    private static final Map<ResourceLocation, ResourceLocation> RENAMES = (Map<ResourceLocation, ResourceLocation>) (Object) ImmutableMap.builder().put(new ResourceLocation("nvi"), JIGSAW_RENAME).put(new ResourceLocation("pcp"), JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), JIGSAW_RENAME).put(new ResourceLocation("runtime"), JIGSAW_RENAME).build(); // MagmaCube - decompile fix
     private final Codec<ConfiguredStructureFeature<C, StructureFeature<C>>> configuredStructureCodec;
 
     private static <F extends StructureFeature<?>> F register(String debug0, F debug1, GenerationStep.Decoration debug2) {
-        STRUCTURES_REGISTRY.put((Object)debug0.toLowerCase(Locale.ROOT), debug1);
+        STRUCTURES_REGISTRY.put(debug0.toLowerCase(Locale.ROOT), debug1); // MagmaCube - decompile fix
         STEP.put(debug1, debug2);
         return (F)Registry.register(Registry.STRUCTURE_FEATURE, debug0.toLowerCase(Locale.ROOT), debug1);
     }
 
     public StructureFeature(Codec<C> debug12) {
-        this.configuredStructureCodec = debug12.fieldOf("config").xmap(debug1 -> new ConfiguredStructureFeature<FeatureConfiguration, StructureFeature>(this, (FeatureConfiguration)debug1), debug0 -> debug0.config).codec();
+        this.configuredStructureCodec = debug12.fieldOf("config").xmap(debug1 -> new ConfiguredStructureFeature<>(this, debug1), debug0 -> debug0.config).codec(); // MagmaCube - decompile fix
     }
 
     public GenerationStep.Decoration step() {
@@ -139,7 +139,7 @@ public abstract class StructureFeature<C extends FeatureConfiguration> {
         BoundingBox debug9 = debug1.contains("BB") ? new BoundingBox(debug1.getIntArray("BB")) : BoundingBox.getUnknownBox();
         ListTag debug10 = debug1.getList("Children", 10);
         try {
-            StructureStart<?> debug11 = super.createStart(debug6, debug7, debug9, debug8, debug2);
+            StructureStart<?> debug11 = debug5.createStart(debug6, debug7, debug9, debug8, debug2); // MagmaCube - decompile fix
             for (int debug12 = 0; debug12 < debug10.size(); ++debug12) {
                 CompoundTag debug13 = debug10.getCompound(debug12);
                 String debug14 = debug13.getString("id").toLowerCase(Locale.ROOT);
@@ -172,7 +172,7 @@ public abstract class StructureFeature<C extends FeatureConfiguration> {
     }
 
     public ConfiguredStructureFeature<C, ? extends StructureFeature<C>> configured(C debug1) {
-        return new ConfiguredStructureFeature<C, StructureFeature>(this, debug1);
+        return new ConfiguredStructureFeature<>(this, debug1); // MagmaCube - decompile fix
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/StructurePieceType.java b/src/main/java/net/minecraft/world/level/levelgen/feature/StructurePieceType.java
index 3860ffc0f563d359828305ac59e0388c95f5941a..ad4ea6e0958124306fd3649c252170c4700e09f2 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/StructurePieceType.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/StructurePieceType.java
@@ -83,7 +83,7 @@ public interface StructurePieceType
     
     StructurePiece load(final StructureManager p0, final CompoundTag p1);
     
-    default StructurePieceType setPieceId(final StructurePieceType debug0, final String debug1) {
+    static StructurePieceType setPieceId(final StructurePieceType debug0, final String debug1) { // MagmaCube - decompile fix
         return Registry.register(Registry.STRUCTURE_PIECE, debug1.toLowerCase(Locale.ROOT), debug0);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/SwamplandHutFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/SwamplandHutFeature.java
index 8eacf37b05dda14053af34a506334e2267655bab..5092ec8be80439fad0af4fbca59436c2ed5131de 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/SwamplandHutFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/SwamplandHutFeature.java
@@ -24,8 +24,8 @@ import net.minecraft.world.level.levelgen.structure.templatesystem.StructureMana
 
 public class SwamplandHutFeature
 extends StructureFeature<NoneFeatureConfiguration> {
-    private static final List<MobSpawnSettings.SpawnerData> SWAMPHUT_ENEMIES = ImmutableList.of((Object)new MobSpawnSettings.SpawnerData(EntityType.WITCH, 1, 1, 1));
-    private static final List<MobSpawnSettings.SpawnerData> SWAMPHUT_ANIMALS = ImmutableList.of((Object)new MobSpawnSettings.SpawnerData(EntityType.CAT, 1, 1, 1));
+    private static final List<MobSpawnSettings.SpawnerData> SWAMPHUT_ENEMIES = ImmutableList.of(new MobSpawnSettings.SpawnerData(EntityType.WITCH, 1, 1, 1)); // MagmaCube - decompile fix
+    private static final List<MobSpawnSettings.SpawnerData> SWAMPHUT_ANIMALS = ImmutableList.of(new MobSpawnSettings.SpawnerData(EntityType.CAT, 1, 1, 1)); // MagmaCube - decompile fix
 
     public SwamplandHutFeature(Codec<NoneFeatureConfiguration> debug1) {
         super(debug1);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/VinesFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/VinesFeature.java
index b6b5f8fb623efb8e1a3ac2ae07239cd2e9354833..a4d760847e897ce2a323dea608bb62ed7c1a07ae 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/VinesFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/VinesFeature.java
@@ -35,7 +35,7 @@ public class VinesFeature extends Feature<NoneFeatureConfiguration>
                 for (final Direction debug8 : VinesFeature.DIRECTIONS) {
                     if (debug8 != Direction.DOWN) {
                         if (VineBlock.isAcceptableNeighbour(debug1, debug6, debug8)) {
-                            debug1.setBlock(debug6, ((StateHolder<O, BlockState>)Blocks.VINE.defaultBlockState()).setValue((Property<Comparable>)VineBlock.getPropertyForFace(debug8), true), 2);
+                            debug1.setBlock(debug6, (Blocks.VINE.defaultBlockState()).setValue(VineBlock.getPropertyForFace(debug8), true), 2); // MagmaCube - decompile fix
                             break;
                         }
                     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/WeightedConfiguredFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/WeightedConfiguredFeature.java
index 481d10e63f4ab501c81ad1396ab6c5b82d93d01d..73531f89cab4f1063e54b53e4fd12515afba02e1 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/WeightedConfiguredFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/WeightedConfiguredFeature.java
@@ -31,6 +31,6 @@ public class WeightedConfiguredFeature
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)ConfiguredFeature.CODEC.fieldOf("feature").forGetter(debug0 -> debug0.feature), (App)Codec.floatRange(0.0f, 1.0f).fieldOf("chance").forGetter(debug0 -> debug0.chance)).apply(debug0, (BiFunction)WeightedConfiguredFeature::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(ConfiguredFeature.CODEC.fieldOf("feature").forGetter(debug0l -> debug0l.feature), Codec.floatRange(0.0f, 1.0f).fieldOf("chance").forGetter(debug0l -> debug0l.chance)).apply(debug0, WeightedConfiguredFeature::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/BlockPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/BlockPlacer.java
index e77cdb39a71a37179442e706b21c2c27e539c49b..7e3cc4c7d2db25def742b916493c1dacabea861c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/BlockPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/BlockPlacer.java
@@ -17,6 +17,6 @@ public abstract class BlockPlacer
     protected abstract BlockPlacerType<?> type();
     
     static {
-        CODEC = Registry.BLOCK_PLACER_TYPES.dispatch((Function)BlockPlacer::type, (Function)BlockPlacerType::codec);
+        CODEC = Registry.BLOCK_PLACER_TYPES.dispatch(BlockPlacer::type, BlockPlacerType::codec); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/ColumnPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/ColumnPlacer.java
index a77eccadb91bd9820fa6de240d1203973848e2ff..504804bd03c78dd8d3285a9ed1a48ea9b7e25f5a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/ColumnPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/blockplacers/ColumnPlacer.java
@@ -37,6 +37,6 @@ public class ColumnPlacer extends BlockPlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.INT.fieldOf("min_size").forGetter(debug0 -> debug0.minSize), (App)Codec.INT.fieldOf("extra_size").forGetter(debug0 -> debug0.extraSize)).apply(debug0, (BiFunction)ColumnPlacer::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.INT.fieldOf("min_size").forGetter(debug0l -> debug0l.minSize), Codec.INT.fieldOf("extra_size").forGetter(debug0l -> debug0l.extraSize)).apply(debug0, ColumnPlacer::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockPileConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockPileConfiguration.java
index 1ec424dd3fcd01fad953a9f98242f985846a6c17..ddd507b6b238d1b4028421a6defe83b20b4e9b2e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockPileConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockPileConfiguration.java
@@ -14,6 +14,6 @@ public class BlockPileConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = BlockStateProvider.CODEC.fieldOf("state_provider").xmap((Function)BlockPileConfiguration::new, debug0 -> debug0.stateProvider).codec();
+        CODEC = BlockStateProvider.CODEC.fieldOf("state_provider").xmap(BlockPileConfiguration::new, debug0 -> debug0.stateProvider).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockStateConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockStateConfiguration.java
index 24aa3535b882d2a9bc4dd87e7e198c6f12cecdfa..695778075e4bc2976d144560bd9381ca992376bb 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockStateConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockStateConfiguration.java
@@ -14,6 +14,6 @@ public class BlockStateConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = BlockState.CODEC.fieldOf("state").xmap((Function)BlockStateConfiguration::new, debug0 -> debug0.state).codec();
+        CODEC = BlockState.CODEC.fieldOf("state").xmap(BlockStateConfiguration::new, debug0 -> debug0.state).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ColumnFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ColumnFeatureConfiguration.java
index 71924f0a676747d4dd44212712af1f2f9803583a..c5d99326085b5c30f3a9ce0e879df18df87e8d42 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ColumnFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ColumnFeatureConfiguration.java
@@ -27,6 +27,6 @@ public class ColumnFeatureConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)UniformInt.codec(0, 2, 1).fieldOf("reach").forGetter(debug0 -> debug0.reach), (App)UniformInt.codec(1, 5, 5).fieldOf("height").forGetter(debug0 -> debug0.height)).apply(debug0, (BiFunction)ColumnFeatureConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(UniformInt.codec(0, 2, 1).fieldOf("reach").forGetter(debug0l -> debug0l.reach), UniformInt.codec(1, 5, 5).fieldOf("height").forGetter(debug0l -> debug0l.height)).apply(debug0, ColumnFeatureConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/CountConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/CountConfiguration.java
index e9069f1763b85db04a5ebd75cd00ce6962e30eef..682b77d10964f4473bd2ecf630e242a871c3b69a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/CountConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/CountConfiguration.java
@@ -22,6 +22,6 @@ public class CountConfiguration implements DecoratorConfiguration, FeatureConfig
     }
     
     static {
-        CODEC = UniformInt.codec(-10, 128, 128).fieldOf("count").xmap((Function)CountConfiguration::new, (Function)CountConfiguration::count).codec();
+        CODEC = UniformInt.codec(-10, 128, 128).fieldOf("count").xmap(CountConfiguration::new, CountConfiguration::count).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DecoratedFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DecoratedFeatureConfiguration.java
index f315c869506b9eaadc9bf31904a508d422cea2be..76a18e4c70449df26e8c86466724c5a40a894ebe 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DecoratedFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DecoratedFeatureConfiguration.java
@@ -34,6 +34,6 @@ public class DecoratedFeatureConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)ConfiguredFeature.CODEC.fieldOf("feature").forGetter(debug0 -> debug0.feature), (App)ConfiguredDecorator.CODEC.fieldOf("decorator").forGetter(debug0 -> debug0.decorator)).apply(debug0, (BiFunction)DecoratedFeatureConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(ConfiguredFeature.CODEC.fieldOf("feature").forGetter(debug0l -> debug0l.feature), ConfiguredDecorator.CODEC.fieldOf("decorator").forGetter(debug0l -> debug0l.decorator)).apply(debug0, DecoratedFeatureConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DeltaFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DeltaFeatureConfiguration.java
index d1cdb88d8f11b5ed6fe6366c5ad8baacad0b9f50..a498b3aaef4bd27e836559380e3710f94b6b3730 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DeltaFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DeltaFeatureConfiguration.java
@@ -39,6 +39,6 @@ public class DeltaFeatureConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)BlockState.CODEC.fieldOf("contents").forGetter(debug0 -> debug0.contents), (App)BlockState.CODEC.fieldOf("rim").forGetter(debug0 -> debug0.rim), (App)UniformInt.codec(0, 8, 8).fieldOf("size").forGetter(debug0 -> debug0.size), (App)UniformInt.codec(0, 8, 8).fieldOf("rim_size").forGetter(debug0 -> debug0.rimSize)).apply(debug0, DeltaFeatureConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(BlockState.CODEC.fieldOf("contents").forGetter(debug0l -> debug0l.contents), BlockState.CODEC.fieldOf("rim").forGetter(debug0l -> debug0l.rim), UniformInt.codec(0, 8, 8).fieldOf("size").forGetter(debug0l -> debug0l.size), UniformInt.codec(0, 8, 8).fieldOf("rim_size").forGetter(debug0l -> debug0l.rimSize)).apply(debug0, DeltaFeatureConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java
index 41d572f7a8d8745c8cca67642ad1886712b99031..c02956ed566c348fc3cb39fe5361aebc469fe78e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java
@@ -24,6 +24,6 @@ public class DiskConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)BlockState.CODEC.fieldOf("state").forGetter(debug0 -> debug0.state), (App)UniformInt.codec(0, 4, 4).fieldOf("radius").forGetter(debug0 -> debug0.radius), (App)Codec.intRange(0, 4).fieldOf("half_height").forGetter(debug0 -> debug0.halfHeight), (App)BlockState.CODEC.listOf().fieldOf("targets").forGetter(debug0 -> debug0.targets)).apply(debug0, DiskConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(BlockState.CODEC.fieldOf("state").forGetter(debug0l -> debug0l.state), UniformInt.codec(0, 4, 4).fieldOf("radius").forGetter(debug0l -> debug0l.radius), Codec.intRange(0, 4).fieldOf("half_height").forGetter(debug0l -> debug0l.halfHeight), BlockState.CODEC.listOf().fieldOf("targets").forGetter(debug0l -> debug0l.targets)).apply(debug0, DiskConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration.java
index 02ef41541d94c79d2e95aa77e43b1e4fe327f33f..56e56f77dc8197e5cbf3bf431c7e6d5ecd94387b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration.java
@@ -36,6 +36,6 @@ public class EndGatewayConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)BlockPos.CODEC.optionalFieldOf("exit").forGetter(debug0 -> debug0.exit), (App)Codec.BOOL.fieldOf("exact").forGetter(debug0 -> debug0.exact)).apply(debug0, (BiFunction)EndGatewayConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(BlockPos.CODEC.optionalFieldOf("exit").forGetter(debug0l -> debug0l.exit), Codec.BOOL.fieldOf("exact").forGetter(debug0l -> debug0l.exact)).apply(debug0, EndGatewayConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration.java
index bab0fcb29558137e80b9d514cf4b0c95e2500f83..8662ead1e236e1bb739d825cdefd3a32077bf56e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration.java
@@ -20,6 +20,6 @@ public class HugeMushroomFeatureConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)BlockStateProvider.CODEC.fieldOf("cap_provider").forGetter(debug0 -> debug0.capProvider), (App)BlockStateProvider.CODEC.fieldOf("stem_provider").forGetter(debug0 -> debug0.stemProvider), (App)Codec.INT.fieldOf("foliage_radius").orElse((Object)2).forGetter(debug0 -> debug0.foliageRadius)).apply(debug0, HugeMushroomFeatureConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(BlockStateProvider.CODEC.fieldOf("cap_provider").forGetter(debug0l -> debug0l.capProvider), BlockStateProvider.CODEC.fieldOf("stem_provider").forGetter(debug0l -> debug0l.stemProvider), Codec.INT.fieldOf("foliage_radius").orElse(2).forGetter(debug0l -> debug0l.foliageRadius)).apply(debug0, HugeMushroomFeatureConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/JigsawConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/JigsawConfiguration.java
index c63467aea45d42857889fe58838c7040c1009554..dc7a72dd0ab337d689bca02c316c7135f6e472fe 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/JigsawConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/JigsawConfiguration.java
@@ -29,6 +29,6 @@ public class JigsawConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)StructureTemplatePool.CODEC.fieldOf("start_pool").forGetter((Function)JigsawConfiguration::startPool), (App)Codec.intRange(0, 7).fieldOf("size").forGetter((Function)JigsawConfiguration::maxDepth)).apply(debug0, (BiFunction)JigsawConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(StructureTemplatePool.CODEC.fieldOf("start_pool").forGetter(JigsawConfiguration::startPool), Codec.intRange(0, 7).fieldOf("size").forGetter(JigsawConfiguration::maxDepth)).apply(debug0, JigsawConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/LayerConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/LayerConfiguration.java
index 5407cce566794c4ba7889e94f5134e644bc93685..b2473e56411996ba3fdfa36d8b1299714daa2468 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/LayerConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/LayerConfiguration.java
@@ -19,6 +19,6 @@ public class LayerConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.intRange(0, 255).fieldOf("height").forGetter(debug0 -> debug0.height), (App)BlockState.CODEC.fieldOf("state").forGetter(debug0 -> debug0.state)).apply(debug0, (BiFunction)LayerConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.intRange(0, 255).fieldOf("height").forGetter(debug0l -> debug0l.height), BlockState.CODEC.fieldOf("state").forGetter(debug0l -> debug0l.state)).apply(debug0, LayerConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/MineshaftConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/MineshaftConfiguration.java
index 3ef98dff5b3dcb175bfe36aa944a93c3bb6f3a55..de19e05f478d1bc37ffa7f4a9d9bc58daaf97dde 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/MineshaftConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/MineshaftConfiguration.java
@@ -19,6 +19,6 @@ public class MineshaftConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.floatRange(0.0f, 1.0f).fieldOf("probability").forGetter(debug0 -> debug0.probability), (App)MineshaftFeature.Type.CODEC.fieldOf("type").forGetter(debug0 -> debug0.type)).apply(debug0, (BiFunction)MineshaftConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.floatRange(0.0f, 1.0f).fieldOf("probability").forGetter(debug0l -> debug0l.probability), MineshaftFeature.Type.CODEC.fieldOf("type").forGetter(debug0l -> debug0l.type)).apply(debug0, MineshaftConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/NoiseDependantDecoratorConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/NoiseDependantDecoratorConfiguration.java
index 486dcab8a0b94797f047e0401c3f0142027fcffb..268490a612f1e4179605e9a5a9c68674668dae91 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/NoiseDependantDecoratorConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/NoiseDependantDecoratorConfiguration.java
@@ -19,6 +19,6 @@ public class NoiseDependantDecoratorConfiguration implements DecoratorConfigurat
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.DOUBLE.fieldOf("noise_level").forGetter(debug0 -> debug0.noiseLevel), (App)Codec.INT.fieldOf("below_noise").forGetter(debug0 -> debug0.belowNoise), (App)Codec.INT.fieldOf("above_noise").forGetter(debug0 -> debug0.aboveNoise)).apply(debug0, NoiseDependantDecoratorConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.DOUBLE.fieldOf("noise_level").forGetter(debug0l -> debug0l.noiseLevel), Codec.INT.fieldOf("below_noise").forGetter(debug0l -> debug0l.belowNoise), Codec.INT.fieldOf("above_noise").forGetter(debug0l -> debug0l.aboveNoise)).apply(debug0, NoiseDependantDecoratorConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/OceanRuinConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/OceanRuinConfiguration.java
index 7e9ebcb40a384a7ce234b6da8b5a09137557f3cc..11a34db9740c6cacf110743c276edef17ba1eb77 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/OceanRuinConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/OceanRuinConfiguration.java
@@ -20,6 +20,6 @@ public class OceanRuinConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)OceanRuinFeature.Type.CODEC.fieldOf("biome_temp").forGetter(debug0 -> debug0.biomeTemp), (App)Codec.floatRange(0.0f, 1.0f).fieldOf("large_probability").forGetter(debug0 -> debug0.largeProbability), (App)Codec.floatRange(0.0f, 1.0f).fieldOf("cluster_probability").forGetter(debug0 -> debug0.clusterProbability)).apply(debug0, OceanRuinConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(OceanRuinFeature.Type.CODEC.fieldOf("biome_temp").forGetter(debug0l -> debug0l.biomeTemp), Codec.floatRange(0.0f, 1.0f).fieldOf("large_probability").forGetter(debug0l -> debug0l.largeProbability), Codec.floatRange(0.0f, 1.0f).fieldOf("cluster_probability").forGetter(debug0l -> debug0l.clusterProbability)).apply(debug0, OceanRuinConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/OreConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/OreConfiguration.java
index 757aed10ba509c6b67b04a7c2d4f4c23252a26a5..0fe49f3acfd6fd1db59b8b0dad5802778d7d3367 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/OreConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/OreConfiguration.java
@@ -27,7 +27,7 @@ public class OreConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)RuleTest.CODEC.fieldOf("target").forGetter(debug0 -> debug0.target), (App)BlockState.CODEC.fieldOf("state").forGetter(debug0 -> debug0.state), (App)Codec.intRange(0, 64).fieldOf("size").forGetter(debug0 -> debug0.size)).apply(debug0, OreConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(RuleTest.CODEC.fieldOf("target").forGetter(debug0l -> debug0l.target), BlockState.CODEC.fieldOf("state").forGetter(debug0l -> debug0l.state), Codec.intRange(0, 64).fieldOf("size").forGetter(debug0l -> debug0l.size)).apply(debug0, OreConfiguration::new)); // MagmaCube - decompile fix
     }
     
     public static final class Predicates
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ProbabilityFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ProbabilityFeatureConfiguration.java
index c1a82ad6798f208eaac28cc8fe3e44fd0a877c06..11357ddd7696e78db7efb0fa23e351703280e32c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ProbabilityFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ProbabilityFeatureConfiguration.java
@@ -17,6 +17,6 @@ public class ProbabilityFeatureConfiguration implements CarverConfiguration, Fea
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.floatRange(0.0f, 1.0f).fieldOf("probability").forGetter(debug0 -> debug0.probability)).apply(debug0, (Function)ProbabilityFeatureConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.floatRange(0.0f, 1.0f).fieldOf("probability").forGetter(debug0l -> debug0l.probability)).apply(debug0, ProbabilityFeatureConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomBooleanFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomBooleanFeatureConfiguration.java
index 668a5706efc060ca1a433f05f1dfdbf3f970cd09..10f0dafa661a58661e0ce75936b7a440a07b6bd7 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomBooleanFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomBooleanFeatureConfiguration.java
@@ -26,6 +26,6 @@ public class RandomBooleanFeatureConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)ConfiguredFeature.CODEC.fieldOf("feature_true").forGetter(debug0 -> debug0.featureTrue), (App)ConfiguredFeature.CODEC.fieldOf("feature_false").forGetter(debug0 -> debug0.featureFalse)).apply(debug0, (BiFunction)RandomBooleanFeatureConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(ConfiguredFeature.CODEC.fieldOf("feature_true").forGetter(debug0l -> debug0l.featureTrue), ConfiguredFeature.CODEC.fieldOf("feature_false").forGetter(debug0l -> debug0l.featureFalse)).apply(debug0, RandomBooleanFeatureConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomFeatureConfiguration.java
index d57bae4725f5b9c99b464b19a9531c2782898313..553b62b9ce4a1522604f0e7726639b617b2206fe 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomFeatureConfiguration.java
@@ -31,6 +31,6 @@ public class RandomFeatureConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> debug0.apply2((BiFunction)RandomFeatureConfiguration::new, (App)WeightedConfiguredFeature.CODEC.listOf().fieldOf("features").forGetter(debug0 -> debug0.features), (App)ConfiguredFeature.CODEC.fieldOf("default").forGetter(debug0 -> debug0.defaultFeature)));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.apply2(RandomFeatureConfiguration::new, WeightedConfiguredFeature.CODEC.listOf().fieldOf("features").forGetter(debug0l -> debug0l.features), ConfiguredFeature.CODEC.fieldOf("default").forGetter(debug0l -> debug0l.defaultFeature))); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
index 7811a9869cc4e8e7a69eaf5e06cdbf1fa586eea3..377cd3deee17df6fda2833618892498a62ffa7df 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
@@ -29,7 +29,7 @@ import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvi
 
 public class RandomPatchConfiguration
 implements FeatureConfiguration {
-    public static final Codec<RandomPatchConfiguration> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)BlockStateProvider.CODEC.fieldOf("state_provider").forGetter(debug0 -> debug0.stateProvider), (App)BlockPlacer.CODEC.fieldOf("block_placer").forGetter(debug0 -> debug0.blockPlacer), (App)BlockState.CODEC.listOf().fieldOf("whitelist").forGetter(debug0 -> debug0.whitelist.stream().map(Block::defaultBlockState).collect(Collectors.toList())), (App)BlockState.CODEC.listOf().fieldOf("blacklist").forGetter(debug0 -> ImmutableList.copyOf(debug0.blacklist)), (App)Codec.INT.fieldOf("tries").orElse((Object)128).forGetter(debug0 -> debug0.tries), (App)Codec.INT.fieldOf("xspread").orElse((Object)7).forGetter(debug0 -> debug0.xspread), (App)Codec.INT.fieldOf("yspread").orElse((Object)3).forGetter(debug0 -> debug0.yspread), (App)Codec.INT.fieldOf("zspread").orElse((Object)7).forGetter(debug0 -> debug0.zspread), (App)Codec.BOOL.fieldOf("can_replace").orElse((Object)false).forGetter(debug0 -> debug0.canReplace), (App)Codec.BOOL.fieldOf("project").orElse((Object)true).forGetter(debug0 -> debug0.project), (App)Codec.BOOL.fieldOf("need_water").orElse((Object)false).forGetter(debug0 -> debug0.needWater)).apply((Applicative)debug02, RandomPatchConfiguration::new));
+    public static final Codec<RandomPatchConfiguration> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(BlockStateProvider.CODEC.fieldOf("state_provider").forGetter(debug0 -> debug0.stateProvider), BlockPlacer.CODEC.fieldOf("block_placer").forGetter(debug0 -> debug0.blockPlacer), BlockState.CODEC.listOf().fieldOf("whitelist").forGetter(debug0 -> debug0.whitelist.stream().map(Block::defaultBlockState).collect(Collectors.toList())), BlockState.CODEC.listOf().fieldOf("blacklist").forGetter(debug0 -> ImmutableList.copyOf(debug0.blacklist)), Codec.INT.fieldOf("tries").orElse(128).forGetter(debug0 -> debug0.tries), Codec.INT.fieldOf("xspread").orElse(7).forGetter(debug0 -> debug0.xspread), Codec.INT.fieldOf("yspread").orElse(3).forGetter(debug0 -> debug0.yspread), Codec.INT.fieldOf("zspread").orElse(7).forGetter(debug0 -> debug0.zspread), Codec.BOOL.fieldOf("can_replace").orElse(false).forGetter(debug0 -> debug0.canReplace), Codec.BOOL.fieldOf("project").orElse(true).forGetter(debug0 -> debug0.project), Codec.BOOL.fieldOf("need_water").orElse(false).forGetter(debug0 -> debug0.needWater)).apply((Applicative)debug02, RandomPatchConfiguration::new)); // MagmaCube - decompile fix
     public final BlockStateProvider stateProvider;
     public final BlockPlacer blockPlacer;
     public final Set<Block> whitelist;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RangeDecoratorConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RangeDecoratorConfiguration.java
index 2b0a5391e8cf66f29be8fc89b842d12863fbd3e2..4c8ddb81d5445aac6f72dfd21a9e7fe7bbdd340b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RangeDecoratorConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RangeDecoratorConfiguration.java
@@ -19,6 +19,6 @@ public class RangeDecoratorConfiguration implements DecoratorConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.INT.fieldOf("bottom_offset").orElse((Object)0).forGetter(debug0 -> debug0.bottomOffset), (App)Codec.INT.fieldOf("top_offset").orElse((Object)0).forGetter(debug0 -> debug0.topOffset), (App)Codec.INT.fieldOf("maximum").orElse((Object)0).forGetter(debug0 -> debug0.maximum)).apply(debug0, RangeDecoratorConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.INT.fieldOf("bottom_offset").orElse(0).forGetter(debug0l -> debug0l.bottomOffset), Codec.INT.fieldOf("top_offset").orElse(0).forGetter(debug0l -> debug0l.topOffset), Codec.INT.fieldOf("maximum").orElse(0).forGetter(debug0l -> debug0l.maximum)).apply(debug0, RangeDecoratorConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceBlockConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceBlockConfiguration.java
index d656c5ddea36e74b21c87bee966f6ebc4726d900..18ffc278162737f4ae12a2f9a356aa04e6b54149 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceBlockConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceBlockConfiguration.java
@@ -19,6 +19,6 @@ public class ReplaceBlockConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)BlockState.CODEC.fieldOf("target").forGetter(debug0 -> debug0.target), (App)BlockState.CODEC.fieldOf("state").forGetter(debug0 -> debug0.state)).apply(debug0, (BiFunction)ReplaceBlockConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(BlockState.CODEC.fieldOf("target").forGetter(debug0l -> debug0l.target), BlockState.CODEC.fieldOf("state").forGetter(debug0l -> debug0l.state)).apply(debug0, ReplaceBlockConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceSphereConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceSphereConfiguration.java
index bb8a749c678a914a87df18d270a990769be3d49f..e8f38dc395eec213f00588430f3c0b3276517cf6 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceSphereConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ReplaceSphereConfiguration.java
@@ -25,6 +25,6 @@ public class ReplaceSphereConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)BlockState.CODEC.fieldOf("target").forGetter(debug0 -> debug0.targetState), (App)BlockState.CODEC.fieldOf("state").forGetter(debug0 -> debug0.replaceState), (App)UniformInt.CODEC.fieldOf("radius").forGetter(debug0 -> debug0.radius)).apply(debug0, ReplaceSphereConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(BlockState.CODEC.fieldOf("target").forGetter(debug0l -> debug0l.targetState), BlockState.CODEC.fieldOf("state").forGetter(debug0l -> debug0l.replaceState), UniformInt.CODEC.fieldOf("radius").forGetter(debug0l -> debug0l.radius)).apply(debug0, ReplaceSphereConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RuinedPortalConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RuinedPortalConfiguration.java
index 793e1f33c957c79295ff5e7e294d5c263d6dacfb..3fcaeec3185c42d70c0e453e73754d99d54e63aa 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RuinedPortalConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RuinedPortalConfiguration.java
@@ -14,6 +14,6 @@ public class RuinedPortalConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RuinedPortalFeature.Type.CODEC.fieldOf("portal_type").xmap((Function)RuinedPortalConfiguration::new, debug0 -> debug0.portalType).codec();
+        CODEC = RuinedPortalFeature.Type.CODEC.fieldOf("portal_type").xmap(RuinedPortalConfiguration::new, debug0 -> debug0.portalType).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ShipwreckConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ShipwreckConfiguration.java
index 51d67076f403487084448beae0463fd12fcf0862..e0ce00062bce160344f5c495090699e77c914e90 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ShipwreckConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/ShipwreckConfiguration.java
@@ -13,6 +13,6 @@ public class ShipwreckConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = Codec.BOOL.fieldOf("is_beached").orElse((Object)false).xmap((Function)ShipwreckConfiguration::new, debug0 -> debug0.isBeached).codec();
+        CODEC = Codec.BOOL.fieldOf("is_beached").orElse(false).xmap(ShipwreckConfiguration::new, debug0 -> debug0.isBeached).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
index 6acde35ac6b77a237e7d66d1812d6482449f38c4..ad93475c0a43fb9e0aa56d1763ccc382e8dbedad 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
@@ -23,6 +23,6 @@ public class SimpleBlockConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)BlockState.CODEC.fieldOf("to_place").forGetter(debug0 -> debug0.toPlace), (App)BlockState.CODEC.listOf().fieldOf("place_on").forGetter(debug0 -> debug0.placeOn), (App)BlockState.CODEC.listOf().fieldOf("place_in").forGetter(debug0 -> debug0.placeIn), (App)BlockState.CODEC.listOf().fieldOf("place_under").forGetter(debug0 -> debug0.placeUnder)).apply(debug0, SimpleBlockConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(BlockState.CODEC.fieldOf("to_place").forGetter(debug0l -> debug0l.toPlace), BlockState.CODEC.listOf().fieldOf("place_on").forGetter(debug0l -> debug0l.placeOn), BlockState.CODEC.listOf().fieldOf("place_in").forGetter(debug0l -> debug0l.placeIn), BlockState.CODEC.listOf().fieldOf("place_under").forGetter(debug0l -> debug0l.placeUnder)).apply(debug0, SimpleBlockConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleRandomFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleRandomFeatureConfiguration.java
index 4ab3ef29fe0c30f3389d799ad71fafd920fcb391..f53ec5ec0860bf53cb3dfb3c172357183f91b1e3 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleRandomFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleRandomFeatureConfiguration.java
@@ -22,6 +22,6 @@ public class SimpleRandomFeatureConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = ConfiguredFeature.LIST_CODEC.fieldOf("features").xmap((Function)SimpleRandomFeatureConfiguration::new, debug0 -> debug0.features).codec();
+        CODEC = ConfiguredFeature.LIST_CODEC.fieldOf("features").xmap(SimpleRandomFeatureConfiguration::new, debug0 -> debug0.features).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration.java
index 183aa29f4d9e722308040791d95b5aed3883fe8c..0033e767d4d0597282d0bf11db996795a259d063 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration.java
@@ -42,6 +42,6 @@ public class SpikeConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.BOOL.fieldOf("crystal_invulnerable").orElse((Object)false).forGetter(debug0 -> debug0.crystalInvulnerable), (App)SpikeFeature.EndSpike.CODEC.listOf().fieldOf("spikes").forGetter(debug0 -> debug0.spikes), (App)BlockPos.CODEC.optionalFieldOf("crystal_beam_target").forGetter(debug0 -> Optional.ofNullable(debug0.crystalBeamTarget))).apply(debug0, SpikeConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.BOOL.fieldOf("crystal_invulnerable").orElse(false).forGetter(debug0l -> debug0l.crystalInvulnerable), SpikeFeature.EndSpike.CODEC.listOf().fieldOf("spikes").forGetter(debug0l -> debug0l.spikes), BlockPos.CODEC.optionalFieldOf("crystal_beam_target").forGetter(debug0l -> Optional.ofNullable(debug0l.crystalBeamTarget))).apply(debug0, SpikeConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
index e8db11baba2a780d014c1f6a132d20668eb715fa..42d9325d3aaa2308c0f28e2e8f323daa5d28d80c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
@@ -30,6 +30,6 @@ public class SpringConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)FluidState.CODEC.fieldOf("state").forGetter(debug0 -> debug0.state), (App)Codec.BOOL.fieldOf("requires_block_below").orElse((Object)true).forGetter(debug0 -> debug0.requiresBlockBelow), (App)Codec.INT.fieldOf("rock_count").orElse((Object)4).forGetter(debug0 -> debug0.rockCount), (App)Codec.INT.fieldOf("hole_count").orElse((Object)1).forGetter(debug0 -> debug0.holeCount), (App)Registry.BLOCK.listOf().fieldOf("valid_blocks").xmap((Function)ImmutableSet::copyOf, (Function)ImmutableList::copyOf).forGetter(debug0 -> debug0.validBlocks)).apply(debug0, SpringConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(FluidState.CODEC.fieldOf("state").forGetter(debug0l -> debug0l.state), Codec.BOOL.fieldOf("requires_block_below").orElse(true).forGetter(debug0l -> debug0l.requiresBlockBelow), Codec.INT.fieldOf("rock_count").orElse(4).forGetter(debug0l -> debug0l.rockCount), Codec.INT.fieldOf("hole_count").orElse(1).forGetter(debug0l -> debug0l.holeCount), Registry.BLOCK.listOf().fieldOf("valid_blocks").xmap(ImmutableSet::copyOf, ImmutableList::copyOf).forGetter(debug0l -> (ImmutableSet<Block>) debug0l.validBlocks)).apply(debug0, SpringConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StrongholdConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StrongholdConfiguration.java
index 825561ae3fe66fb0f823f8ffd8a86c92b8afe04d..7a58261533755d4480a6c666f1e8f94cf75bd464 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StrongholdConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StrongholdConfiguration.java
@@ -32,6 +32,6 @@ public class StrongholdConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.intRange(0, 1023).fieldOf("distance").forGetter((Function)StrongholdConfiguration::distance), (App)Codec.intRange(0, 1023).fieldOf("spread").forGetter((Function)StrongholdConfiguration::spread), (App)Codec.intRange(1, 4095).fieldOf("count").forGetter((Function)StrongholdConfiguration::count)).apply(debug0, StrongholdConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.intRange(0, 1023).fieldOf("distance").forGetter(StrongholdConfiguration::distance), Codec.intRange(0, 1023).fieldOf("spread").forGetter(StrongholdConfiguration::spread), Codec.intRange(1, 4095).fieldOf("count").forGetter(StrongholdConfiguration::count)).apply(debug0, StrongholdConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java
index 37ae324c686392cf50560ea0e9a892ca36e7a70b..516ed7c6d1559c16eb6a0117a6815b05f76b75e0 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java
@@ -33,13 +33,13 @@ public class StructureFeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.intRange(0, 4096).fieldOf("spacing").forGetter(debug0 -> debug0.spacing), (App)Codec.intRange(0, 4096).fieldOf("separation").forGetter(debug0 -> debug0.separation), (App)Codec.intRange(0, Integer.MAX_VALUE).fieldOf("salt").forGetter(debug0 -> debug0.salt)).apply(debug0, StructureFeatureConfiguration::new)).comapFlatMap(debug0 -> {
+        CODEC = RecordCodecBuilder.<StructureFeatureConfiguration>create(debug0 -> debug0.group(Codec.intRange(0, 4096).fieldOf("spacing").forGetter(debug0l -> debug0l.spacing), Codec.intRange(0, 4096).fieldOf("separation").forGetter(debug0l -> debug0l.separation), Codec.intRange(0, Integer.MAX_VALUE).fieldOf("salt").forGetter(debug0l -> debug0l.salt)).apply(debug0, StructureFeatureConfiguration::new)).comapFlatMap(debug0 -> { // MagmaCube - decompile fix
             if (debug0.spacing <= debug0.separation) {
                 return DataResult.error("Spacing has to be smaller than separation");
             }
             else {
-                return DataResult.success((Object)debug0);
+                return DataResult.success(debug0); // MagmaCube - decompile fix
             }
-        }, (Function)Function.identity());
+        }, Function.identity()); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration.java
index bbb9d9a513264486729202d5763a0f253bf9dd5d..990a94fec7ca368df2db811acac94357eec6b4c7 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration.java
@@ -48,7 +48,7 @@ public class TreeConfiguration implements FeatureConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)BlockStateProvider.CODEC.fieldOf("trunk_provider").forGetter(debug0 -> debug0.trunkProvider), (App)BlockStateProvider.CODEC.fieldOf("leaves_provider").forGetter(debug0 -> debug0.leavesProvider), (App)FoliagePlacer.CODEC.fieldOf("foliage_placer").forGetter(debug0 -> debug0.foliagePlacer), (App)TrunkPlacer.CODEC.fieldOf("trunk_placer").forGetter(debug0 -> debug0.trunkPlacer), (App)FeatureSize.CODEC.fieldOf("minimum_size").forGetter(debug0 -> debug0.minimumSize), (App)TreeDecorator.CODEC.listOf().fieldOf("decorators").forGetter(debug0 -> debug0.decorators), (App)Codec.INT.fieldOf("max_water_depth").orElse((Object)0).forGetter(debug0 -> debug0.maxWaterDepth), (App)Codec.BOOL.fieldOf("ignore_vines").orElse((Object)false).forGetter(debug0 -> debug0.ignoreVines), (App)Heightmap.Types.CODEC.fieldOf("heightmap").forGetter(debug0 -> debug0.heightmap)).apply(debug0, TreeConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(BlockStateProvider.CODEC.fieldOf("trunk_provider").forGetter(debug0l -> debug0l.trunkProvider), BlockStateProvider.CODEC.fieldOf("leaves_provider").forGetter(debug0l -> debug0l.leavesProvider), FoliagePlacer.CODEC.fieldOf("foliage_placer").forGetter(debug0l -> debug0l.foliagePlacer), TrunkPlacer.CODEC.fieldOf("trunk_placer").forGetter(debug0l -> debug0l.trunkPlacer), FeatureSize.CODEC.fieldOf("minimum_size").forGetter(debug0l -> debug0l.minimumSize), TreeDecorator.CODEC.listOf().fieldOf("decorators").forGetter(debug0l -> debug0l.decorators), Codec.INT.fieldOf("max_water_depth").orElse(0).forGetter(debug0l -> debug0l.maxWaterDepth), Codec.BOOL.fieldOf("ignore_vines").orElse(false).forGetter(debug0l -> debug0l.ignoreVines), Heightmap.Types.CODEC.fieldOf("heightmap").forGetter(debug0l -> debug0l.heightmap)).apply(debug0, TreeConfiguration::new)); // MagmaCube - decompile fix
     }
     
     public static class TreeConfigurationBuilder
@@ -64,7 +64,7 @@ public class TreeConfiguration implements FeatureConfiguration
         private Heightmap.Types heightmap;
         
         public TreeConfigurationBuilder(final BlockStateProvider debug1, final BlockStateProvider debug2, final FoliagePlacer debug3, final TrunkPlacer debug4, final FeatureSize debug5) {
-            this.decorators = (List<TreeDecorator>)ImmutableList.of();
+            this.decorators = ImmutableList.of(); // MagmaCube - decompile fix
             this.heightmap = Heightmap.Types.OCEAN_FLOOR;
             this.trunkProvider = debug1;
             this.leavesProvider = debug2;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/FeatureSize.java b/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/FeatureSize.java
index ab506da569457c56cb351296175cbd4a990e8344..fd02a476d492db2bbb0835de1f8d8fa3e21c161e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/FeatureSize.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/FeatureSize.java
@@ -13,7 +13,7 @@ public abstract class FeatureSize
     protected final OptionalInt minClippedHeight;
     
     protected static <S extends FeatureSize> RecordCodecBuilder<S, OptionalInt> minClippedHeightCodec() {
-        return (RecordCodecBuilder<S, OptionalInt>)Codec.intRange(0, 80).optionalFieldOf("min_clipped_height").xmap(debug0 -> debug0.map((Function<? super Object, ?>)OptionalInt::of).orElse(OptionalInt.empty()), debug0 -> debug0.isPresent() ? Optional.of(debug0.getAsInt()) : Optional.empty()).forGetter(debug0 -> debug0.minClippedHeight);
+        return Codec.intRange(0, 80).optionalFieldOf("min_clipped_height").xmap(debug0 -> debug0.map(OptionalInt::of).orElse(OptionalInt.empty()), debug0 -> debug0.isPresent() ? Optional.of(debug0.getAsInt()) : Optional.empty()).forGetter(debug0 -> debug0.minClippedHeight); // MagmaCube - decompile fix
     }
     
     public FeatureSize(final OptionalInt debug1) {
@@ -29,6 +29,6 @@ public abstract class FeatureSize
     }
     
     static {
-        CODEC = Registry.FEATURE_SIZE_TYPES.dispatch((Function)FeatureSize::type, (Function)FeatureSizeType::codec);
+        CODEC = Registry.FEATURE_SIZE_TYPES.dispatch(FeatureSize::type, FeatureSizeType::codec); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/ThreeLayersFeatureSize.java b/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/ThreeLayersFeatureSize.java
index 192b7354fbfa943b1fc19ee5a0b89babb7be638b..c58a80f1c605bd0ad2655f2668299a0b335c4d4b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/ThreeLayersFeatureSize.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/ThreeLayersFeatureSize.java
@@ -41,6 +41,6 @@ public class ThreeLayersFeatureSize extends FeatureSize
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.intRange(0, 80).fieldOf("limit").orElse((Object)1).forGetter(debug0 -> debug0.limit), (App)Codec.intRange(0, 80).fieldOf("upper_limit").orElse((Object)1).forGetter(debug0 -> debug0.upperLimit), (App)Codec.intRange(0, 16).fieldOf("lower_size").orElse((Object)0).forGetter(debug0 -> debug0.lowerSize), (App)Codec.intRange(0, 16).fieldOf("middle_size").orElse((Object)1).forGetter(debug0 -> debug0.middleSize), (App)Codec.intRange(0, 16).fieldOf("upper_size").orElse((Object)1).forGetter(debug0 -> debug0.upperSize), (App)FeatureSize.minClippedHeightCodec()).apply(debug0, ThreeLayersFeatureSize::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.intRange(0, 80).fieldOf("limit").orElse(1).forGetter(debug0l -> debug0l.limit), Codec.intRange(0, 80).fieldOf("upper_limit").orElse(1).forGetter(debug0l -> debug0l.upperLimit), Codec.intRange(0, 16).fieldOf("lower_size").orElse(0).forGetter(debug0l -> debug0l.lowerSize), Codec.intRange(0, 16).fieldOf("middle_size").orElse(1).forGetter(debug0l -> debug0l.middleSize), Codec.intRange(0, 16).fieldOf("upper_size").orElse(1).forGetter(debug0l -> debug0l.upperSize), FeatureSize.minClippedHeightCodec()).apply(debug0, ThreeLayersFeatureSize::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/TwoLayersFeatureSize.java b/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/TwoLayersFeatureSize.java
index 89d32afc5bfa2194c0f76ef8268edcfa3d11dec1..25f23348483645cb3c59afb9f4b1a3089b1ab71d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/TwoLayersFeatureSize.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/featuresize/TwoLayersFeatureSize.java
@@ -35,6 +35,6 @@ public class TwoLayersFeatureSize extends FeatureSize
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.intRange(0, 81).fieldOf("limit").orElse((Object)1).forGetter(debug0 -> debug0.limit), (App)Codec.intRange(0, 16).fieldOf("lower_size").orElse((Object)0).forGetter(debug0 -> debug0.lowerSize), (App)Codec.intRange(0, 16).fieldOf("upper_size").orElse((Object)1).forGetter(debug0 -> debug0.upperSize), (App)FeatureSize.minClippedHeightCodec()).apply(debug0, TwoLayersFeatureSize::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.intRange(0, 81).fieldOf("limit").orElse(1).forGetter(debug0l -> debug0l.limit), Codec.intRange(0, 16).fieldOf("lower_size").orElse(0).forGetter(debug0l -> debug0l.lowerSize), Codec.intRange(0, 16).fieldOf("upper_size").orElse(1).forGetter(debug0l -> debug0l.upperSize), FeatureSize.minClippedHeightCodec()).apply(debug0, TwoLayersFeatureSize::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/AcaciaFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/AcaciaFoliagePlacer.java
index dc56e3ea9770e1b3b7bd55f5a647fc3e7d65a084..d25b4278b9a46f6fd2c2783fff81e72a122981e9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/AcaciaFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/AcaciaFoliagePlacer.java
@@ -49,6 +49,6 @@ public class AcaciaFoliagePlacer extends FoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> FoliagePlacer.foliagePlacerParts((RecordCodecBuilder.Instance<FoliagePlacer>)debug0).apply(debug0, (BiFunction)AcaciaFoliagePlacer::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> FoliagePlacer.foliagePlacerParts(debug0).apply(debug0, AcaciaFoliagePlacer::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BlobFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BlobFoliagePlacer.java
index 93a797f08b1722087b1548da2998ab167e5ccfa7..4e07af839679964569f9a5491a6d98dc00937877 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BlobFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BlobFoliagePlacer.java
@@ -19,7 +19,7 @@ public class BlobFoliagePlacer extends FoliagePlacer
     protected final int height;
     
     protected static <P extends BlobFoliagePlacer> Products.P3<RecordCodecBuilder.Mu<P>, UniformInt, UniformInt, Integer> blobParts(final RecordCodecBuilder.Instance<P> debug0) {
-        return (Products.P3<RecordCodecBuilder.Mu<P>, UniformInt, UniformInt, Integer>)FoliagePlacer.foliagePlacerParts(debug0).and((App)Codec.intRange(0, 16).fieldOf("height").forGetter(debug0 -> debug0.height));
+        return (Products.P3<RecordCodecBuilder.Mu<P>, UniformInt, UniformInt, Integer>)FoliagePlacer.foliagePlacerParts(debug0).and(Codec.intRange(0, 16).fieldOf("height").forGetter(debug0l -> debug0l.height)); // MagmaCube - decompile fix
     }
     
     public BlobFoliagePlacer(final UniformInt debug1, final UniformInt debug2, final int debug3) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BushFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BushFoliagePlacer.java
index 5b19ce2263752fdc270c4a6bed8a31e213267879..7c0945aa654f5f34fdd068dcb374d1fd9e956ebd 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BushFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/BushFoliagePlacer.java
@@ -39,6 +39,6 @@ public class BushFoliagePlacer extends BlobFoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> BlobFoliagePlacer.blobParts((RecordCodecBuilder.Instance<BlobFoliagePlacer>)debug0).apply(debug0, BushFoliagePlacer::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> BlobFoliagePlacer.blobParts(debug0).apply(debug0, BushFoliagePlacer::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/DarkOakFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/DarkOakFoliagePlacer.java
index 49c2afcacbbd1295a2a31723cd92329d8ea4dc6e..8a772865412fe469793de260969522e8414b6b79 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/DarkOakFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/DarkOakFoliagePlacer.java
@@ -63,6 +63,6 @@ public class DarkOakFoliagePlacer extends FoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> FoliagePlacer.foliagePlacerParts((RecordCodecBuilder.Instance<FoliagePlacer>)debug0).apply(debug0, (BiFunction)DarkOakFoliagePlacer::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> FoliagePlacer.foliagePlacerParts(debug0).apply(debug0, DarkOakFoliagePlacer::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/FancyFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/FancyFoliagePlacer.java
index 68a8ff3f0fd4e67e87f04fcb26dbbef89f5357ac..898c4db989947063289faf47baf1a1865c549483 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/FancyFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/FancyFoliagePlacer.java
@@ -40,6 +40,6 @@ public class FancyFoliagePlacer extends BlobFoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> BlobFoliagePlacer.blobParts((RecordCodecBuilder.Instance<BlobFoliagePlacer>)debug0).apply(debug0, FancyFoliagePlacer::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> BlobFoliagePlacer.blobParts(debug0).apply(debug0, FancyFoliagePlacer::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer.java
index 62f42798f32b0c59e13c5604f8570d3233f0580b..c66b4c2dbf9f133f2ba2fe86cd035ec2ab789e72 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer.java
@@ -24,7 +24,7 @@ public abstract class FoliagePlacer
     protected final UniformInt offset;
     
     protected static <P extends FoliagePlacer> Products.P2<RecordCodecBuilder.Mu<P>, UniformInt, UniformInt> foliagePlacerParts(final RecordCodecBuilder.Instance<P> debug0) {
-        return (Products.P2<RecordCodecBuilder.Mu<P>, UniformInt, UniformInt>)debug0.group((App)UniformInt.codec(0, 8, 8).fieldOf("radius").forGetter(debug0 -> debug0.radius), (App)UniformInt.codec(0, 8, 8).fieldOf("offset").forGetter(debug0 -> debug0.offset));
+        return (Products.P2<RecordCodecBuilder.Mu<P>, UniformInt, UniformInt>)debug0.group(UniformInt.codec(0, 8, 8).fieldOf("radius").forGetter(debug0l -> debug0l.radius), UniformInt.codec(0, 8, 8).fieldOf("offset").forGetter(debug0l -> debug0l.offset)); // MagmaCube - decompile fix
     }
     
     public FoliagePlacer(final UniformInt debug1, final UniformInt debug2) {
@@ -84,7 +84,7 @@ public abstract class FoliagePlacer
     }
     
     static {
-        CODEC = Registry.FOLIAGE_PLACER_TYPES.dispatch((Function)FoliagePlacer::type, (Function)FoliagePlacerType::codec);
+        CODEC = Registry.FOLIAGE_PLACER_TYPES.dispatch(FoliagePlacer::type, FoliagePlacerType::codec); // MagmaCube - decompile fix
     }
     
     public static final class FoliageAttachment
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaJungleFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaJungleFoliagePlacer.java
index e584caa2a6c06ccaa32c3a321478e5f3ec24909b..a94b9a0191b61494293dc23a4e35ae82b2eb13f6 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaJungleFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaJungleFoliagePlacer.java
@@ -46,6 +46,6 @@ public class MegaJungleFoliagePlacer extends FoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> FoliagePlacer.foliagePlacerParts((RecordCodecBuilder.Instance<FoliagePlacer>)debug0).and((App)Codec.intRange(0, 16).fieldOf("height").forGetter(debug0 -> debug0.height)).apply(debug0, MegaJungleFoliagePlacer::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> FoliagePlacer.foliagePlacerParts(debug0).and(Codec.intRange(0, 16).fieldOf("height").forGetter(debug0l -> debug0l.height)).apply(debug0, MegaJungleFoliagePlacer::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaPineFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaPineFoliagePlacer.java
index 8a08ae42b0149f7fb85602d18d8ac0798f78b4d7..06267108ec0f0fb995aedee2a727e39a83920d9d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaPineFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaPineFoliagePlacer.java
@@ -58,6 +58,6 @@ public class MegaPineFoliagePlacer extends FoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> FoliagePlacer.foliagePlacerParts((RecordCodecBuilder.Instance<FoliagePlacer>)debug0).and((App)UniformInt.codec(0, 16, 8).fieldOf("crown_height").forGetter(debug0 -> debug0.crownHeight)).apply(debug0, MegaPineFoliagePlacer::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> FoliagePlacer.foliagePlacerParts(debug0).and(UniformInt.codec(0, 16, 8).fieldOf("crown_height").forGetter(debug0l -> debug0l.crownHeight)).apply(debug0, MegaPineFoliagePlacer::new));
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/PineFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/PineFoliagePlacer.java
index 252f529f832d70361ed29b5a2f7d696303438a20..7f63eb76bc620b808ad4de10d178d21c1b16040c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/PineFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/PineFoliagePlacer.java
@@ -57,6 +57,6 @@ public class PineFoliagePlacer extends FoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> FoliagePlacer.foliagePlacerParts((RecordCodecBuilder.Instance<FoliagePlacer>)debug0).and((App)UniformInt.codec(0, 16, 8).fieldOf("height").forGetter(debug0 -> debug0.height)).apply(debug0, PineFoliagePlacer::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> FoliagePlacer.foliagePlacerParts(debug0).and(UniformInt.codec(0, 16, 8).fieldOf("height").forGetter(debug0l -> debug0l.height)).apply(debug0, PineFoliagePlacer::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/SpruceFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/SpruceFoliagePlacer.java
index 32d056e716644c532107a4db0a621588e8b4bed6..812da8df01593dd6db366e7192b895a5fa1ae942 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/SpruceFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/SpruceFoliagePlacer.java
@@ -57,6 +57,6 @@ public class SpruceFoliagePlacer extends FoliagePlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> FoliagePlacer.foliagePlacerParts((RecordCodecBuilder.Instance<FoliagePlacer>)debug0).and((App)UniformInt.codec(0, 16, 8).fieldOf("trunk_height").forGetter(debug0 -> debug0.trunkHeight)).apply(debug0, SpruceFoliagePlacer::new));
+        CODEC = RecordCodecBuilder.<SpruceFoliagePlacer>create(debug0 -> FoliagePlacer.foliagePlacerParts(debug0).and(UniformInt.codec(0, 16, 8).fieldOf("trunk_height").forGetter(debug0l -> debug0l.trunkHeight)).apply(debug0, SpruceFoliagePlacer::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider.java b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider.java
index a72fcb7d61f69403ceebbd3a7e648c817ad54407..ab5012792d1fe26032120f50cd7221fe50b7d3a1 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider.java
@@ -16,6 +16,6 @@ public abstract class BlockStateProvider
     public abstract BlockState getState(final Random p0, final BlockPos p1);
     
     static {
-        CODEC = Registry.BLOCKSTATE_PROVIDER_TYPES.dispatch((Function)BlockStateProvider::type, (Function)BlockStateProviderType::codec);
+        CODEC = Registry.BLOCKSTATE_PROVIDER_TYPES.dispatch(BlockStateProvider::type, BlockStateProviderType::codec); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RotatedBlockProvider.java b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RotatedBlockProvider.java
index 495fddefa34c90aae9d4a3fd9b15400b9205ee68..e438849067422bf532dad7a6c6f3f94a9c13f158 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RotatedBlockProvider.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RotatedBlockProvider.java
@@ -29,10 +29,10 @@ public class RotatedBlockProvider extends BlockStateProvider
     @Override
     public BlockState getState(final Random debug1, final BlockPos debug2) {
         final Direction.Axis debug3 = Direction.Axis.getRandom(debug1);
-        return ((StateHolder<O, BlockState>)this.block.defaultBlockState()).setValue(RotatedPillarBlock.AXIS, debug3);
+        return (this.block.defaultBlockState()).setValue(RotatedPillarBlock.AXIS, debug3); // MagmaCube - decompile fix
     }
     
     static {
-        CODEC = BlockState.CODEC.fieldOf("state").xmap((Function)BlockBehaviour.BlockStateBase::getBlock, (Function)Block::defaultBlockState).xmap((Function)RotatedBlockProvider::new, debug0 -> debug0.block).codec();
+        CODEC = BlockState.CODEC.fieldOf("state").xmap(BlockBehaviour.BlockStateBase::getBlock, Block::defaultBlockState).xmap(RotatedBlockProvider::new, debug0 -> debug0.block).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/SimpleStateProvider.java b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/SimpleStateProvider.java
index e3a414a3f3cf287919e88f30e4ee6bcc2fc1f1ec..935aff9413a71b14331252edb4d92e9d1a9698bc 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/SimpleStateProvider.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/SimpleStateProvider.java
@@ -26,6 +26,6 @@ public class SimpleStateProvider extends BlockStateProvider
     }
     
     static {
-        CODEC = BlockState.CODEC.fieldOf("state").xmap((Function)SimpleStateProvider::new, debug0 -> debug0.state).codec();
+        CODEC = BlockState.CODEC.fieldOf("state").xmap(SimpleStateProvider::new, debug0 -> debug0.state).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/WeightedStateProvider.java b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/WeightedStateProvider.java
index 933abed71d3e84bdd96d6c45884cd758f3b7d922..836fc10513bafd296962e078e844f25b0973cad7 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/WeightedStateProvider.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/WeightedStateProvider.java
@@ -15,9 +15,9 @@ public class WeightedStateProvider extends BlockStateProvider
     
     private static DataResult<WeightedStateProvider> create(final WeightedList<BlockState> debug0) {
         if (debug0.isEmpty()) {
-            return (DataResult<WeightedStateProvider>)DataResult.error("WeightedStateProvider with no states");
+            return DataResult.error("WeightedStateProvider with no states"); // MagmaCube - decompile fix
         }
-        return (DataResult<WeightedStateProvider>)DataResult.success((Object)new WeightedStateProvider(debug0));
+        return (DataResult<WeightedStateProvider>)DataResult.success(new WeightedStateProvider(debug0)); // MagmaCube - decompile fix
     }
     
     private WeightedStateProvider(final WeightedList<BlockState> debug1) {
@@ -44,6 +44,6 @@ public class WeightedStateProvider extends BlockStateProvider
     }
     
     static {
-        CODEC = WeightedList.codec(BlockState.CODEC).comapFlatMap((Function)WeightedStateProvider::create, debug0 -> debug0.weightedList).fieldOf("entries").codec();
+        CODEC = WeightedList.codec(BlockState.CODEC).comapFlatMap(WeightedStateProvider::create, debug0 -> debug0.weightedList).fieldOf("entries").codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/FeaturePoolElement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/FeaturePoolElement.java
index bf1bf26681b65ac5eae1495b7322ad96effa703a..7b1cdd12c74766ca47af764e2ab55701eb0470e7 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/FeaturePoolElement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/FeaturePoolElement.java
@@ -58,8 +58,8 @@ public class FeaturePoolElement extends StructurePoolElement
     
     @Override
     public List<StructureTemplate.StructureBlockInfo> getShuffledJigsawBlocks(final StructureManager debug1, final BlockPos debug2, final Rotation debug3, final Random debug4) {
-        final List<StructureTemplate.StructureBlockInfo> debug5 = (List<StructureTemplate.StructureBlockInfo>)Lists.newArrayList();
-        debug5.add(new StructureTemplate.StructureBlockInfo(debug2, ((StateHolder<O, BlockState>)Blocks.JIGSAW.defaultBlockState()).setValue(JigsawBlock.ORIENTATION, FrontAndTop.fromFrontAndTop(Direction.DOWN, Direction.SOUTH)), this.defaultJigsawNBT));
+        final List<StructureTemplate.StructureBlockInfo> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
+        debug5.add(new StructureTemplate.StructureBlockInfo(debug2, (Blocks.JIGSAW.defaultBlockState()).setValue(JigsawBlock.ORIENTATION, FrontAndTop.fromFrontAndTop(Direction.DOWN, Direction.SOUTH)), this.defaultJigsawNBT)); // MagmaCube - decompile fix
         return debug5;
     }
     
@@ -85,6 +85,6 @@ public class FeaturePoolElement extends StructurePoolElement
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)ConfiguredFeature.CODEC.fieldOf("feature").forGetter(debug0 -> debug0.feature), (App)StructurePoolElement.projectionCodec()).apply(debug0, (BiFunction)FeaturePoolElement::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(ConfiguredFeature.CODEC.fieldOf("feature").forGetter(debug0l -> debug0l.feature), StructurePoolElement.projectionCodec()).apply(debug0, FeaturePoolElement::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
index fad088c750aabff4933c4b1bf549526d4d05e5a3..09819b7714edb7ca729aeaa83abd3c06ea3e4bc8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
@@ -71,7 +71,7 @@ public class JigsawPlacement {
         int debug20 = 80;
         AABB debug21 = new AABB(debug16 - 80, debug18 - 80, debug17 - 80, debug16 + 80 + 1, debug18 + 80 + 1, debug17 + 80 + 1);
         Placer debug22 = new Placer(debug10, debug1.maxDepth(), debug2, debug3, debug4, debug6, debug7);
-        debug22.placing.addLast(new PieceState(debug14, new MutableObject((Object)Shapes.join(Shapes.create(debug21), Shapes.create(AABB.of(debug15)), BooleanOp.ONLY_FIRST)), debug18 + 80, 0));
+        debug22.placing.addLast(new PieceState(debug14, new MutableObject(Shapes.join(Shapes.create(debug21), Shapes.create(AABB.of(debug15)), BooleanOp.ONLY_FIRST)), debug18 + 80, 0)); // MagmaCube - decompile fix
         while (!debug22.placing.isEmpty()) {
             PieceState debug23 = (PieceState)debug22.placing.removeFirst();
             debug22.tryPlacingChildren(debug23.piece, (MutableObject<VoxelShape>)debug23.free, debug23.boundsTop, debug23.depth, debug8);
@@ -81,7 +81,7 @@ public class JigsawPlacement {
     public static void addPieces(RegistryAccess debug0, PoolElementStructurePiece debug1, int debug2, PieceFactory debug3, ChunkGenerator debug4, StructureManager debug5, List<? super PoolElementStructurePiece> debug6, Random debug7) {
         WritableRegistry<StructureTemplatePool> debug8 = debug0.registryOrThrow(Registry.TEMPLATE_POOL_REGISTRY);
         Placer debug9 = new Placer(debug8, debug2, debug3, debug4, debug5, debug6, debug7);
-        debug9.placing.addLast(new PieceState(debug1, new MutableObject((Object)Shapes.INFINITY), 0, 0));
+        debug9.placing.addLast(new PieceState(debug1, new MutableObject(Shapes.INFINITY), 0, 0)); // MagmaCube - decompile fix
         while (!debug9.placing.isEmpty()) {
             PieceState debug10 = (PieceState)debug9.placing.removeFirst();
             debug9.tryPlacingChildren(debug10.piece, (MutableObject<VoxelShape>)debug10.free, debug10.boundsTop, debug10.depth, false);
@@ -133,13 +133,13 @@ public class JigsawPlacement {
                 ResourceLocation debug21 = new ResourceLocation(debug15.nbt.getString("pool"));
                 Optional<StructureTemplatePool> debug222 = this.pools.getOptional(debug21);
                 if (!debug222.isPresent() || debug222.get().size() == 0 && !Objects.equals(debug21, Pools.EMPTY.location())) {
-                    LOGGER.warn("Empty or none existent pool: {}", (Object)debug21);
+                    LOGGER.warn("Empty or none existent pool: {}", debug21); // MagmaCube - decompile fix
                     continue;
                 }
                 ResourceLocation debug23 = debug222.get().getFallback();
                 Optional<StructureTemplatePool> debug24 = this.pools.getOptional(debug23);
                 if (!debug24.isPresent() || debug24.get().size() == 0 && !Objects.equals(debug23, Pools.EMPTY.location())) {
-                    LOGGER.warn("Empty or none existent fallback pool: {}", (Object)debug23);
+                    LOGGER.warn("Empty or none existent fallback pool: {}", debug23); // MagmaCube - decompile fix
                     continue;
                 }
                 boolean debug27 = debug12.isInside(debug18);
@@ -147,7 +147,7 @@ public class JigsawPlacement {
                     debug25 = debug11;
                     debug26 = debug13;
                     if (debug11.getValue() == null) {
-                        debug11.setValue((Object)Shapes.create(AABB.of(debug12)));
+                        debug11.setValue(Shapes.create(AABB.of(debug12))); // MagmaCube - decompile fix
                     }
                 } else {
                     debug25 = debug22;
@@ -167,12 +167,14 @@ public class JigsawPlacement {
                             if (!debug34.isInside(debug2.pos.relative(JigsawBlock.getFrontFacing(debug2.state)))) {
                                 return 0;
                             }
-                            ResourceLocation debug3 = new ResourceLocation(debug2.nbt.getString("pool"));
-                            Optional<StructureTemplatePool> debug4 = this.pools.getOptional(debug3);
-                            Optional<Integer> debug5 = debug4.flatMap(debug1 -> this.pools.getOptional(debug1.getFallback()));
-                            int debug6 = debug4.map(debug1 -> debug1.getMaxSize(this.structureManager)).orElse(0);
-                            int debug7 = debug5.map(debug1 -> debug1.getMaxSize(this.structureManager)).orElse(0);
-                            return Math.max(debug6, debug7);
+                            // MagmaCube start - decompile fix
+                            ResourceLocation debug3l = new ResourceLocation(debug2.nbt.getString("pool"));
+                            Optional<StructureTemplatePool> debug4l = this.pools.getOptional(debug3l);
+                            Optional<StructureTemplatePool> debug5l = debug4l.flatMap(debug1l -> this.pools.getOptional(debug1l.getFallback()));
+                            int debug6l = debug4l.map(debug1l -> debug1l.getMaxSize(this.structureManager)).orElse(0);
+                            int debug7l = debug5l.map(debug1l -> debug1l.getMaxSize(this.structureManager)).orElse(0);
+                            return Math.max(debug6l, debug7l);
+                            // MagmaCube end - decompile fix
                         }).max().orElse(0);
                         for (StructureTemplate.StructureBlockInfo debug37 : debug33) {
                             int debug53;
@@ -203,7 +205,7 @@ public class JigsawPlacement {
                                 debug48.y1 = debug48.y0 + debug50;
                             }
                             if (Shapes.joinIsNotEmpty((VoxelShape)debug25.getValue(), Shapes.create(AABB.of(debug48).deflate(0.25)), BooleanOp.ONLY_SECOND)) continue;
-                            debug25.setValue((Object)Shapes.joinUnoptimized((VoxelShape)debug25.getValue(), Shapes.create(AABB.of(debug48)), BooleanOp.ONLY_FIRST));
+                            debug25.setValue(Shapes.joinUnoptimized((VoxelShape)debug25.getValue(), Shapes.create(AABB.of(debug48)), BooleanOp.ONLY_FIRST));
                             debug50 = debug1.getGroundLevelDelta();
                             int debug51 = debug43 ? debug50 - debug45 : debug30.getGroundLevelDelta();
                             PoolElementStructurePiece debug52 = this.factory.create(this.structureManager, debug30, debug49, debug51, debug32, debug48);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/LegacySinglePoolElement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/LegacySinglePoolElement.java
index c9ce4b0998a9260a97904350695216266b449eae..236bea4e797d256f84a5203c274ccb87d6275223 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/LegacySinglePoolElement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/LegacySinglePoolElement.java
@@ -42,6 +42,6 @@ public class LegacySinglePoolElement extends SinglePoolElement
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)SinglePoolElement.templateCodec(), (App)SinglePoolElement.processorsCodec(), (App)StructurePoolElement.projectionCodec()).apply(debug0, LegacySinglePoolElement::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(SinglePoolElement.templateCodec(), SinglePoolElement.processorsCodec(), StructurePoolElement.projectionCodec()).apply(debug0, LegacySinglePoolElement::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/ListPoolElement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/ListPoolElement.java
index fce9566cce496f2c74ae0e7b0f99a37942b6ddff..be0748e3a236eb7921d8566ab4b35677b9a18186 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/ListPoolElement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/ListPoolElement.java
@@ -30,7 +30,7 @@ import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemp
 
 public class ListPoolElement
 extends StructurePoolElement {
-    public static final Codec<ListPoolElement> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)StructurePoolElement.CODEC.listOf().fieldOf("elements").forGetter(debug0 -> debug0.elements), ListPoolElement.projectionCodec()).apply((Applicative)debug02, ListPoolElement::new));
+    public static final Codec<ListPoolElement> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(StructurePoolElement.CODEC.listOf().fieldOf("elements").forGetter(debug0 -> debug0.elements), ListPoolElement.projectionCodec()).apply(debug02, ListPoolElement::new)); // MagmaCube - decompile fix
     private final List<StructurePoolElement> elements;
 
     public ListPoolElement(List<StructurePoolElement> debug1, StructureTemplatePool.Projection debug2) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/SinglePoolElement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/SinglePoolElement.java
index bc43951ccd1f951ad411c606dfba9e5a3f9f3ecf..5892b949d8c4ddb13b18ee9e74bb947142f696ad 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/SinglePoolElement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/SinglePoolElement.java
@@ -49,15 +49,15 @@ public class SinglePoolElement extends StructurePoolElement
         if (!debug3.isPresent()) {
             return (DataResult<T>)DataResult.error("Can not serialize a runtime pool element");
         }
-        return (DataResult<T>)ResourceLocation.CODEC.encode((Object)debug3.get(), (DynamicOps)debug1, (Object)debug2);
+        return (DataResult<T>)ResourceLocation.CODEC.encode(debug3.get(), (DynamicOps)debug1, debug2); // MagmaCube - decompile fix
     }
     
     protected static <E extends SinglePoolElement> RecordCodecBuilder<E, Supplier<StructureProcessorList>> processorsCodec() {
-        return (RecordCodecBuilder<E, Supplier<StructureProcessorList>>)StructureProcessorType.LIST_CODEC.fieldOf("processors").forGetter(debug0 -> debug0.processors);
+        return StructureProcessorType.LIST_CODEC.fieldOf("processors").forGetter(debug0l -> debug0l.processors);
     }
     
     protected static <E extends SinglePoolElement> RecordCodecBuilder<E, Either<ResourceLocation, StructureTemplate>> templateCodec() {
-        return (RecordCodecBuilder<E, Either<ResourceLocation, StructureTemplate>>)SinglePoolElement.TEMPLATE_CODEC.fieldOf("location").forGetter(debug0 -> debug0.template);
+        return SinglePoolElement.TEMPLATE_CODEC.fieldOf("location").forGetter(debug0 -> debug0.template); // MagmaCube - decompile fix
     }
     
     protected SinglePoolElement(final Either<ResourceLocation, StructureTemplate> debug1, final Supplier<StructureProcessorList> debug2, final StructureTemplatePool.Projection debug3) {
@@ -67,17 +67,17 @@ public class SinglePoolElement extends StructurePoolElement
     }
     
     public SinglePoolElement(final StructureTemplate debug1) {
-        this((Either<ResourceLocation, StructureTemplate>)Either.right((Object)debug1), () -> ProcessorLists.EMPTY, StructureTemplatePool.Projection.RIGID);
+        this(Either.right(debug1), () -> ProcessorLists.EMPTY, StructureTemplatePool.Projection.RIGID); // MagmaCube - decompile fix
     }
     
     private StructureTemplate getTemplate(final StructureManager debug1) {
-        return (StructureTemplate)this.template.map((Function)debug1::getOrCreate, (Function)Function.identity());
+        return (StructureTemplate)this.template.map(debug1::getOrCreate, (Function)Function.identity()); // MagmaCube - decompile fix
     }
     
     public List<StructureTemplate.StructureBlockInfo> getDataMarkers(final StructureManager debug1, final BlockPos debug2, final Rotation debug3, final boolean debug4) {
         final StructureTemplate debug5 = this.getTemplate(debug1);
         final List<StructureTemplate.StructureBlockInfo> debug6 = debug5.filterBlocks(debug2, new StructurePlaceSettings().setRotation(debug3), Blocks.STRUCTURE_BLOCK, debug4);
-        final List<StructureTemplate.StructureBlockInfo> debug7 = (List<StructureTemplate.StructureBlockInfo>)Lists.newArrayList();
+        final List<StructureTemplate.StructureBlockInfo> debug7 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final StructureTemplate.StructureBlockInfo debug8 : debug6) {
             if (debug8.nbt == null) {
                 continue;
@@ -131,7 +131,7 @@ public class SinglePoolElement extends StructurePoolElement
             debug4.addProcessor(JigsawReplacementProcessor.INSTANCE);
         }
         this.processors.get().list().forEach(debug4::addProcessor);
-        this.getProjection().getProcessors().forEach((Consumer)debug4::addProcessor);
+        this.getProjection().getProcessors().forEach(debug4::addProcessor); // MagmaCube - decompile fix
         return debug4;
     }
     
@@ -146,7 +146,7 @@ public class SinglePoolElement extends StructurePoolElement
     }
     
     static {
-        TEMPLATE_CODEC = Codec.of(SinglePoolElement::encodeTemplate, ResourceLocation.CODEC.map((Function)Either::left));
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)templateCodec(), (App)processorsCodec(), (App)StructurePoolElement.projectionCodec()).apply(debug0, SinglePoolElement::new));
+        TEMPLATE_CODEC = Codec.of(SinglePoolElement::encodeTemplate, ResourceLocation.CODEC.map(Either::left)); // MagmaCube - decompile fix
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(templateCodec(), processorsCodec(), StructurePoolElement.projectionCodec()).apply(debug0, SinglePoolElement::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructurePoolElement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructurePoolElement.java
index 1f7ff7c7ddd4177fb95a3707dc45a15a38846450..ab9cc2d0e175763e92d04ada32ac23f211a00472 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructurePoolElement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructurePoolElement.java
@@ -85,19 +85,19 @@ public abstract class StructurePoolElement {
     }
 
     public static Function<StructureTemplatePool.Projection, LegacySinglePoolElement> legacy(String debug0) {
-        return debug1 -> new LegacySinglePoolElement((Either<ResourceLocation, StructureTemplate>)Either.left((Object)new ResourceLocation(debug0)), () -> ProcessorLists.EMPTY, (StructureTemplatePool.Projection)debug1);
+        return debug1 -> new LegacySinglePoolElement(Either.left(new ResourceLocation(debug0)), () -> ProcessorLists.EMPTY, (StructureTemplatePool.Projection)debug1); // MagmaCube - decompile fix
     }
 
     public static Function<StructureTemplatePool.Projection, LegacySinglePoolElement> legacy(String debug0, StructureProcessorList debug1) {
-        return debug2 -> new LegacySinglePoolElement((Either<ResourceLocation, StructureTemplate>)Either.left((Object)new ResourceLocation(debug0)), () -> debug1, (StructureTemplatePool.Projection)debug2);
+        return debug2 -> new LegacySinglePoolElement(Either.left(new ResourceLocation(debug0)), () -> debug1, (StructureTemplatePool.Projection)debug2); // MagmaCube - decompile fix
     }
 
     public static Function<StructureTemplatePool.Projection, SinglePoolElement> single(String debug0) {
-        return debug1 -> new SinglePoolElement((Either<ResourceLocation, StructureTemplate>)Either.left((Object)new ResourceLocation(debug0)), () -> ProcessorLists.EMPTY, (StructureTemplatePool.Projection)debug1);
+        return debug1 -> new SinglePoolElement(Either.left(new ResourceLocation(debug0)), () -> ProcessorLists.EMPTY, (StructureTemplatePool.Projection)debug1); // MagmaCube - decompile fix
     }
 
     public static Function<StructureTemplatePool.Projection, SinglePoolElement> single(String debug0, StructureProcessorList debug1) {
-        return debug2 -> new SinglePoolElement((Either<ResourceLocation, StructureTemplate>)Either.left((Object)new ResourceLocation(debug0)), () -> debug1, (StructureTemplatePool.Projection)debug2);
+        return debug2 -> new SinglePoolElement(Either.left(new ResourceLocation(debug0)), () -> debug1, (StructureTemplatePool.Projection)debug2); // MagmaCube - decompile fix
     }
 
     public static Function<StructureTemplatePool.Projection, FeaturePoolElement> feature(ConfiguredFeature<?, ?> debug0) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructurePoolElementType.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructurePoolElementType.java
index b242fe97f93e8d420feed34b9c9ae510f231c631..07c3dcc73d28d81a20bb4816abc100916d0d3ff7 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructurePoolElementType.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructurePoolElementType.java
@@ -13,7 +13,7 @@ public interface StructurePoolElementType<P extends StructurePoolElement>
     
     Codec<P> codec();
     
-    default <P extends StructurePoolElement> StructurePoolElementType<P> register(final String debug0, final Codec<P> debug1) {
+    static <P extends StructurePoolElement> StructurePoolElementType<P> register(final String debug0, final Codec<P> debug1) { // MagmaCube - decompile fix
         return Registry.register((Registry<? super StructurePoolElementType<P>>)Registry.STRUCTURE_POOL_ELEMENT, debug0, () -> debug1);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
index ca06c00ec58f8da8b8e21ff4da451146c3983f06..07ee8e3440a34581e3be4bea8a2df3278596631d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
@@ -49,7 +49,7 @@ import org.apache.logging.log4j.Logger;
 
 public class StructureTemplatePool {
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final Codec<StructureTemplatePool> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName), (App)ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback), (App)Codec.mapPair((MapCodec)StructurePoolElement.CODEC.fieldOf("element"), (MapCodec)Codec.INT.fieldOf("weight")).codec().listOf().promotePartial(Util.prefix("Pool element: ", ((Logger)LOGGER)::error)).fieldOf("elements").forGetter(debug0 -> debug0.rawTemplates)).apply((Applicative)debug02, StructureTemplatePool::new));
+    public static final Codec<StructureTemplatePool> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName), ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback), Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.INT.fieldOf("weight")).codec().listOf().promotePartial(Util.prefix("Pool element: ", ((Logger)LOGGER)::error)).fieldOf("elements").forGetter(debug0 -> debug0.rawTemplates)).apply(debug02, StructureTemplatePool::new)); // MagmaCube - decompile fix
     public static final Codec<Supplier<StructureTemplatePool>> CODEC = RegistryFileCodec.create(Registry.TEMPLATE_POOL_REGISTRY, DIRECT_CODEC);
     private final ResourceLocation name;
     private final List<Pair<StructurePoolElement, Integer>> rawTemplates;
@@ -76,7 +76,7 @@ public class StructureTemplatePool {
         this.templates = Lists.newArrayList();
         for (Pair<Function<Projection, ? extends StructurePoolElement>, Integer> debug6 : debug3) {
             StructurePoolElement debug7 = (StructurePoolElement)((Function)debug6.getFirst()).apply(debug4);
-            this.rawTemplates.add((Pair<StructurePoolElement, Integer>)Pair.of((Object)debug7, (Object)debug6.getSecond()));
+            this.rawTemplates.add((Pair<StructurePoolElement, Integer>)Pair.of(debug7, debug6.getSecond())); // MagmaCube - decompile fix
             for (int debug8 = 0; debug8 < (Integer)debug6.getSecond(); ++debug8) {
                 this.templates.add(debug7);
             }
@@ -100,7 +100,7 @@ public class StructureTemplatePool {
     }
 
     public List<StructurePoolElement> getShuffledTemplates(Random debug1) {
-        return ImmutableList.copyOf((Object[])ObjectArrays.shuffle((Object[])this.templates.toArray(new StructurePoolElement[0]), (Random)debug1));
+        return ImmutableList.copyOf(ObjectArrays.shuffle(this.templates.toArray(new StructurePoolElement[0]), (Random)debug1)); // MagmaCube - decompile fix
     }
 
     public ResourceLocation getName() {
@@ -113,8 +113,8 @@ public class StructureTemplatePool {
 
     public static enum Projection implements StringRepresentable
     {
-        TERRAIN_MATCHING("terrain_matching", (ImmutableList<StructureProcessor>)ImmutableList.of((Object)new GravityProcessor(Heightmap.Types.WORLD_SURFACE_WG, -1))),
-        RIGID("rigid", (ImmutableList<StructureProcessor>)ImmutableList.of());
+        TERRAIN_MATCHING("terrain_matching", ImmutableList.of(new GravityProcessor(Heightmap.Types.WORLD_SURFACE_WG, -1))), // MagmaCube - decompile fix
+        RIGID("rigid", ImmutableList.of()); // MagmaCube - decompile fix
 
         public static final Codec<Projection> CODEC;
         private static final Map<String, Projection> BY_NAME;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
index 6cfe1deae035f303ccd2ff22c264c93f65741608..69597667ca841c85ea870e6128d8d319e45b7721 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
@@ -30,24 +30,22 @@ public class AlterGroundDecorator extends TreeDecorator
     @Override
     public void place(final WorldGenLevel debug1, final Random debug2, final List<BlockPos> debug3, final List<BlockPos> debug4, final Set<BlockPos> debug5, final BoundingBox debug6) {
         final int debug7 = debug3.get(0).getY();
-        int debug8;
-        int debug9;
-        int debug10;
-        int debug11;
-        debug3.stream().filter(debug1 -> debug1.getY() == debug7).forEach(debug3 -> {
-            this.placeCircle(debug1, debug2, debug3.west().north());
-            this.placeCircle(debug1, debug2, debug3.east(2).north());
-            this.placeCircle(debug1, debug2, debug3.west().south(2));
-            this.placeCircle(debug1, debug2, debug3.east(2).south(2));
-            for (debug8 = 0; debug8 < 5; ++debug8) {
-                debug9 = debug2.nextInt(64);
-                debug10 = debug9 % 8;
-                debug11 = debug9 / 8;
+        // MagmaCube start - decompile fix
+        debug3.stream().filter(debug1l -> debug1l.getY() == debug7).forEach(debug3l -> {
+            this.placeCircle(debug1, debug2, debug3l.west().north());
+            this.placeCircle(debug1, debug2, debug3l.east(2).north());
+            this.placeCircle(debug1, debug2, debug3l.west().south(2));
+            this.placeCircle(debug1, debug2, debug3l.east(2).south(2));
+            for (int debug8 = 0; debug8 < 5; ++debug8) {
+                int debug9 = debug2.nextInt(64);
+                int debug10 = debug9 % 8;
+                int debug11 = debug9 / 8;
                 if (debug10 == 0 || debug10 == 7 || debug11 == 0 || debug11 == 7) {
-                    this.placeCircle(debug1, debug2, debug3.offset(-3 + debug10, 0, -3 + debug11));
+                    this.placeCircle(debug1, debug2, debug3l.offset(-3 + debug10, 0, -3 + debug11));
                 }
             }
         });
+        // MagmaCube end - decompile fix
     }
     
     private void placeCircle(final LevelSimulatedRW debug1, final Random debug2, final BlockPos debug3) {
@@ -74,6 +72,6 @@ public class AlterGroundDecorator extends TreeDecorator
     }
     
     static {
-        CODEC = BlockStateProvider.CODEC.fieldOf("provider").xmap((Function)AlterGroundDecorator::new, debug0 -> debug0.provider).codec();
+        CODEC = BlockStateProvider.CODEC.fieldOf("provider").xmap(AlterGroundDecorator::new, debug0 -> debug0.provider).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/CocoaDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/CocoaDecorator.java
index e48fb489bd6099ab2bb4d74ef4ae1a3c3ca3f495..42d7f82ffee36b342743296bfc348524b4e8cadb 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/CocoaDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/CocoaDecorator.java
@@ -39,21 +39,16 @@ public class CocoaDecorator extends TreeDecorator
             return;
         }
         final int debug7 = debug3.get(0).getY();
-        final Iterator<Direction> iterator;
-        Direction debug8;
-        Direction debug9;
-        BlockPos debug10;
-        BlockState debug11;
-        debug3.stream().filter(debug1 -> debug1.getY() - debug7 <= 2).forEach(debug5 -> {
-            Direction.Plane.HORIZONTAL.iterator();
+        debug3.stream().filter(debug1l -> debug1l.getY() - debug7 <= 2).forEach(debug5l -> { // MagmaCube - decompile fix
+            Iterator<Direction> iterator = Direction.Plane.HORIZONTAL.iterator(); // MagmaCube - decompile fix
             while (iterator.hasNext()) {
-                debug8 = iterator.next();
+                Direction debug8 = iterator.next(); // MagmaCube - decompile fix
                 if (debug2.nextFloat() <= 0.25f) {
-                    debug9 = debug8.getOpposite();
-                    debug10 = debug5.offset(debug9.getStepX(), 0, debug9.getStepZ());
+                    Direction debug9 = debug8.getOpposite(); // MagmaCube - decompile fix
+                    BlockPos debug10 = debug5l.offset(debug9.getStepX(), 0, debug9.getStepZ()); // MagmaCube - decompile fix
                     if (Feature.isAir(debug1, debug10)) {
-                        debug11 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.COCOA.defaultBlockState()).setValue((Property<Comparable>)CocoaBlock.AGE, debug2.nextInt(3))).setValue((Property<Comparable>)CocoaBlock.FACING, debug8);
-                        this.setBlock(debug1, debug10, debug11, debug5, debug6);
+                        BlockState debug11 = ((Blocks.COCOA.defaultBlockState()).setValue(CocoaBlock.AGE, debug2.nextInt(3))).setValue(CocoaBlock.FACING, debug8); // MagmaCube - decompile fix
+                        this.setBlock(debug1, debug10, debug11, debug5, debug6); // MagmaCube - decompile fix
                     }
                     else {
                         continue;
@@ -64,6 +59,6 @@ public class CocoaDecorator extends TreeDecorator
     }
     
     static {
-        CODEC = Codec.floatRange(0.0f, 1.0f).fieldOf("probability").xmap((Function)CocoaDecorator::new, debug0 -> debug0.probability).codec();
+        CODEC = Codec.floatRange(0.0f, 1.0f).fieldOf("probability").xmap(CocoaDecorator::new, debug0 -> debug0.probability).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/LeaveVineDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/LeaveVineDecorator.java
index da08f24aaf50e7355d671ebdfe6e197943f7c84b..12a4104567393be385162ef0568e048fa84931a6 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/LeaveVineDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/LeaveVineDecorator.java
@@ -26,31 +26,27 @@ public class LeaveVineDecorator extends TreeDecorator
     
     @Override
     public void place(final WorldGenLevel debug1, final Random debug2, final List<BlockPos> debug3, final List<BlockPos> debug4, final Set<BlockPos> debug5, final BoundingBox debug6) {
-        final BlockPos debug7;
-        final BlockPos debug8;
-        final BlockPos debug9;
-        final BlockPos debug10;
-        debug4.forEach(debug5 -> {
+        debug4.forEach(debug5l -> { // MagmaCube - decompile fix
             if (debug2.nextInt(4) == 0) {
-                debug7 = debug5.west();
+                BlockPos debug7 = debug5l.west(); // MagmaCube - decompile fix
                 if (Feature.isAir(debug1, debug7)) {
                     this.addHangingVine(debug1, debug7, VineBlock.EAST, debug5, debug6);
                 }
             }
             if (debug2.nextInt(4) == 0) {
-                debug8 = debug5.east();
+                BlockPos debug8 = debug5l.east(); // MagmaCube - decompile fix
                 if (Feature.isAir(debug1, debug8)) {
                     this.addHangingVine(debug1, debug8, VineBlock.WEST, debug5, debug6);
                 }
             }
             if (debug2.nextInt(4) == 0) {
-                debug9 = debug5.north();
+                BlockPos debug9 = debug5l.north(); // MagmaCube - decompile fix
                 if (Feature.isAir(debug1, debug9)) {
                     this.addHangingVine(debug1, debug9, VineBlock.SOUTH, debug5, debug6);
                 }
             }
             if (debug2.nextInt(4) == 0) {
-                debug10 = debug5.south();
+                BlockPos debug10 = debug5l.south(); // MagmaCube - decompile fix
                 if (Feature.isAir(debug1, debug10)) {
                     this.addHangingVine(debug1, debug10, VineBlock.NORTH, debug5, debug6);
                 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator.java
index cd7363ba93b9d9f02bf75362be2be3aa6d019dd4..2a7e1554bef3bccea6ba6a7e839b4c6c1bded6ec 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator.java
@@ -26,7 +26,7 @@ public abstract class TreeDecorator
     public abstract void place(final WorldGenLevel p0, final Random p1, final List<BlockPos> p2, final List<BlockPos> p3, final Set<BlockPos> p4, final BoundingBox p5);
     
     protected void placeVine(final LevelWriter debug1, final BlockPos debug2, final BooleanProperty debug3, final Set<BlockPos> debug4, final BoundingBox debug5) {
-        this.setBlock(debug1, debug2, ((StateHolder<O, BlockState>)Blocks.VINE.defaultBlockState()).setValue((Property<Comparable>)debug3, true), debug4, debug5);
+        this.setBlock(debug1, debug2, (Blocks.VINE.defaultBlockState()).setValue(debug3, true), debug4, debug5); // MagmaCube - decompile fix
     }
     
     protected void setBlock(final LevelWriter debug1, final BlockPos debug2, final BlockState debug3, final Set<BlockPos> debug4, final BoundingBox debug5) {
@@ -36,6 +36,6 @@ public abstract class TreeDecorator
     }
     
     static {
-        CODEC = Registry.TREE_DECORATOR_TYPES.dispatch((Function)TreeDecorator::type, (Function)TreeDecoratorType::codec);
+        CODEC = Registry.TREE_DECORATOR_TYPES.dispatch(TreeDecorator::type, TreeDecoratorType::codec); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/TrunkVineDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/TrunkVineDecorator.java
index 4be29aa2862cee3b3db4354ae3ea7ef8d56f825a..146d11ac9d2b5b177cc801e3eb3fccaf3b739835 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/TrunkVineDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/TrunkVineDecorator.java
@@ -24,31 +24,27 @@ public class TrunkVineDecorator extends TreeDecorator
     
     @Override
     public void place(final WorldGenLevel debug1, final Random debug2, final List<BlockPos> debug3, final List<BlockPos> debug4, final Set<BlockPos> debug5, final BoundingBox debug6) {
-        final BlockPos debug7;
-        final BlockPos debug8;
-        final BlockPos debug9;
-        final BlockPos debug10;
-        debug3.forEach(debug5 -> {
+        debug3.forEach(debug5l -> { // MagmaCube - decompile fix
             if (debug2.nextInt(3) > 0) {
-                debug7 = debug5.west();
+                BlockPos debug7 = debug5l.west(); // MagmaCube - decompile fix
                 if (Feature.isAir(debug1, debug7)) {
                     this.placeVine(debug1, debug7, VineBlock.EAST, debug5, debug6);
                 }
             }
             if (debug2.nextInt(3) > 0) {
-                debug8 = debug5.east();
+                BlockPos debug8 = debug5l.east(); // MagmaCube - decompile fix
                 if (Feature.isAir(debug1, debug8)) {
                     this.placeVine(debug1, debug8, VineBlock.WEST, debug5, debug6);
                 }
             }
             if (debug2.nextInt(3) > 0) {
-                debug9 = debug5.north();
+                BlockPos debug9 = debug5l.north(); // MagmaCube - decompile fix
                 if (Feature.isAir(debug1, debug9)) {
                     this.placeVine(debug1, debug9, VineBlock.SOUTH, debug5, debug6);
                 }
             }
             if (debug2.nextInt(3) > 0) {
-                debug10 = debug5.south();
+                BlockPos debug10 = debug5l.south(); // MagmaCube - decompile fix
                 if (Feature.isAir(debug1, debug10)) {
                     this.placeVine(debug1, debug10, VineBlock.NORTH, debug5, debug6);
                 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/DarkOakTrunkPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/DarkOakTrunkPlacer.java
index 0603837c7c80000331322bef1c5828e4990b92b7..87a97dde7770ea12f4c9a1ee0135f6d4af8c7c09 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/DarkOakTrunkPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/DarkOakTrunkPlacer.java
@@ -32,7 +32,7 @@ public class DarkOakTrunkPlacer extends TrunkPlacer
     
     @Override
     public List<FoliagePlacer.FoliageAttachment> placeTrunk(final LevelSimulatedRW debug1, final Random debug2, final int debug3, final BlockPos debug4, final Set<BlockPos> debug5, final BoundingBox debug6, final TreeConfiguration debug7) {
-        final List<FoliagePlacer.FoliageAttachment> debug8 = (List<FoliagePlacer.FoliageAttachment>)Lists.newArrayList();
+        final List<FoliagePlacer.FoliageAttachment> debug8 = Lists.newArrayList(); // MagmaCube - decompile fix
         final BlockPos debug9 = debug4.below();
         TrunkPlacer.setDirtAt(debug1, debug9);
         TrunkPlacer.setDirtAt(debug1, debug9.east());
@@ -79,6 +79,6 @@ public class DarkOakTrunkPlacer extends TrunkPlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> TrunkPlacer.trunkPlacerParts((RecordCodecBuilder.Instance<TrunkPlacer>)debug0).apply(debug0, DarkOakTrunkPlacer::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> TrunkPlacer.trunkPlacerParts(debug0).apply(debug0, DarkOakTrunkPlacer::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/FancyTrunkPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/FancyTrunkPlacer.java
index 905ddf103b92beeb469083b73f3c050b8b1549c6..c675ad2b999d0e10e90cd48ed4369172f8af801e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/FancyTrunkPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/FancyTrunkPlacer.java
@@ -50,7 +50,7 @@ public class FancyTrunkPlacer extends TrunkPlacer
         final int debug12 = Math.min(1, Mth.floor(1.382 + Math.pow(1.0 * debug9 / 13.0, 2.0)));
         final int debug13 = debug4.getY() + debug10;
         int debug14 = debug9 - 5;
-        final List<FoliageCoords> debug15 = (List<FoliageCoords>)Lists.newArrayList();
+        final List<FoliageCoords> debug15 = Lists.newArrayList(); // MagmaCube - decompile fix
         debug15.add(new FoliageCoords(debug4.above(debug14), debug13));
         while (debug14 >= 0) {
             final float debug16 = this.treeShape(debug9, debug14);
@@ -79,7 +79,7 @@ public class FancyTrunkPlacer extends TrunkPlacer
         }
         this.makeLimb(debug1, debug2, debug4, debug4.above(debug10), true, debug5, debug6, debug7);
         this.makeBranches(debug1, debug2, debug9, debug4, debug15, debug5, debug6, debug7);
-        final List<FoliagePlacer.FoliageAttachment> debug30 = (List<FoliagePlacer.FoliageAttachment>)Lists.newArrayList();
+        final List<FoliagePlacer.FoliageAttachment> debug30 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final FoliageCoords debug31 : debug15) {
             if (this.trimBranches(debug9, debug31.getBranchBase() - debug4.getY())) {
                 debug30.add(debug31.attachment);
@@ -100,7 +100,7 @@ public class FancyTrunkPlacer extends TrunkPlacer
         for (int debug14 = 0; debug14 <= debug10; ++debug14) {
             final BlockPos debug15 = debug3.offset(0.5f + debug14 * debug11, 0.5f + debug14 * debug12, 0.5f + debug14 * debug13);
             if (debug5) {
-                TrunkPlacer.setBlock(debug1, debug15, ((StateHolder<O, BlockState>)debug8.trunkProvider.getState(debug2, debug15)).setValue(RotatedPillarBlock.AXIS, this.getLogAxis(debug3, debug15)), debug7);
+                TrunkPlacer.setBlock(debug1, debug15, (debug8.trunkProvider.getState(debug2, debug15)).setValue(RotatedPillarBlock.AXIS, this.getLogAxis(debug3, debug15)), debug7); // MagmaCube - decompile fix
                 debug6.add(debug15.immutable());
             }
             else if (!TreeFeature.isFree(debug1, debug15)) {
@@ -164,7 +164,7 @@ public class FancyTrunkPlacer extends TrunkPlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> TrunkPlacer.trunkPlacerParts((RecordCodecBuilder.Instance<TrunkPlacer>)debug0).apply(debug0, FancyTrunkPlacer::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> TrunkPlacer.trunkPlacerParts(debug0).apply(debug0, FancyTrunkPlacer::new)); // MagmaCube - decompile fix
     }
     
     static class FoliageCoords
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/ForkingTrunkPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/ForkingTrunkPlacer.java
index 552089eea0b814c3899f11682dd1e5eb546e25c7..6fa3e97978752941e06d2e716a59a1f4ae4a7242 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/ForkingTrunkPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/ForkingTrunkPlacer.java
@@ -31,7 +31,7 @@ public class ForkingTrunkPlacer extends TrunkPlacer
     @Override
     public List<FoliagePlacer.FoliageAttachment> placeTrunk(final LevelSimulatedRW debug1, final Random debug2, final int debug3, final BlockPos debug4, final Set<BlockPos> debug5, final BoundingBox debug6, final TreeConfiguration debug7) {
         TrunkPlacer.setDirtAt(debug1, debug4.below());
-        final List<FoliagePlacer.FoliageAttachment> debug8 = (List<FoliagePlacer.FoliageAttachment>)Lists.newArrayList();
+        final List<FoliagePlacer.FoliageAttachment> debug8 = Lists.newArrayList(); // MagmaCube - decompile fix
         final Direction debug9 = Direction.Plane.HORIZONTAL.getRandomDirection(debug2);
         final int debug10 = debug3 - debug2.nextInt(4) - 1;
         int debug11 = 3 - debug2.nextInt(3);
@@ -76,6 +76,6 @@ public class ForkingTrunkPlacer extends TrunkPlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> TrunkPlacer.trunkPlacerParts((RecordCodecBuilder.Instance<TrunkPlacer>)debug0).apply(debug0, ForkingTrunkPlacer::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> TrunkPlacer.trunkPlacerParts(debug0).apply(debug0, ForkingTrunkPlacer::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/GiantTrunkPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/GiantTrunkPlacer.java
index d4ba25b6cfc6aee7467fe0079774d7763740066f..6c041cf2004ee565d3dc78bbcaa7617b66a59f5f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/GiantTrunkPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/GiantTrunkPlacer.java
@@ -44,7 +44,7 @@ public class GiantTrunkPlacer extends TrunkPlacer
                 placeLogIfFreeWithOffset(debug1, debug2, debug9, debug5, debug6, debug7, debug4, 0, debug10, 1);
             }
         }
-        return (List<FoliagePlacer.FoliageAttachment>)ImmutableList.of((Object)new FoliagePlacer.FoliageAttachment(debug4.above(debug3), 0, true));
+        return (List<FoliagePlacer.FoliageAttachment>)ImmutableList.of(new FoliagePlacer.FoliageAttachment(debug4.above(debug3), 0, true)); // MagmaCube - decompile fix
     }
     
     private static void placeLogIfFreeWithOffset(final LevelSimulatedRW debug0, final Random debug1, final BlockPos.MutableBlockPos debug2, final Set<BlockPos> debug3, final BoundingBox debug4, final TreeConfiguration debug5, final BlockPos debug6, final int debug7, final int debug8, final int debug9) {
@@ -53,6 +53,6 @@ public class GiantTrunkPlacer extends TrunkPlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> TrunkPlacer.trunkPlacerParts((RecordCodecBuilder.Instance<TrunkPlacer>)debug0).apply(debug0, GiantTrunkPlacer::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> TrunkPlacer.trunkPlacerParts(debug0).apply(debug0, GiantTrunkPlacer::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/MegaJungleTrunkPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/MegaJungleTrunkPlacer.java
index c971f1fa0e7458ad5d65145f983526985f2b689f..acc9e32cc281f888156f0d8e93d4450250b409b1 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/MegaJungleTrunkPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/MegaJungleTrunkPlacer.java
@@ -31,7 +31,7 @@ public class MegaJungleTrunkPlacer extends GiantTrunkPlacer
     
     @Override
     public List<FoliagePlacer.FoliageAttachment> placeTrunk(final LevelSimulatedRW debug1, final Random debug2, final int debug3, final BlockPos debug4, final Set<BlockPos> debug5, final BoundingBox debug6, final TreeConfiguration debug7) {
-        final List<FoliagePlacer.FoliageAttachment> debug8 = (List<FoliagePlacer.FoliageAttachment>)Lists.newArrayList();
+        final List<FoliagePlacer.FoliageAttachment> debug8 = Lists.newArrayList(); // MagmaCube - decompile fix
         debug8.addAll(super.placeTrunk(debug1, debug2, debug3, debug4, debug5, debug6, debug7));
         for (int debug9 = debug3 - 2 - debug2.nextInt(4); debug9 > debug3 / 2; debug9 -= 2 + debug2.nextInt(4)) {
             final float debug10 = debug2.nextFloat() * 6.2831855f;
@@ -49,6 +49,6 @@ public class MegaJungleTrunkPlacer extends GiantTrunkPlacer
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> TrunkPlacer.trunkPlacerParts((RecordCodecBuilder.Instance<TrunkPlacer>)debug0).apply(debug0, MegaJungleTrunkPlacer::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> TrunkPlacer.trunkPlacerParts(debug0).apply(debug0, MegaJungleTrunkPlacer::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/StraightTrunkPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/StraightTrunkPlacer.java
index 4ac9ab23bf31619d873949e61881e57289990e1a..0b534e986faae5bd0324eedbda4328d841fa709b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/StraightTrunkPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/StraightTrunkPlacer.java
@@ -33,10 +33,10 @@ public class StraightTrunkPlacer extends TrunkPlacer
         for (int debug8 = 0; debug8 < debug3; ++debug8) {
             TrunkPlacer.placeLog(debug1, debug2, debug4.above(debug8), debug5, debug6, debug7);
         }
-        return (List<FoliagePlacer.FoliageAttachment>)ImmutableList.of((Object)new FoliagePlacer.FoliageAttachment(debug4.above(debug3), 0, false));
+        return (List<FoliagePlacer.FoliageAttachment>)ImmutableList.of(new FoliagePlacer.FoliageAttachment(debug4.above(debug3), 0, false)); // MagmaCube - decompile fix
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> TrunkPlacer.trunkPlacerParts((RecordCodecBuilder.Instance<TrunkPlacer>)debug0).apply(debug0, StraightTrunkPlacer::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> TrunkPlacer.trunkPlacerParts(debug0).apply(debug0, StraightTrunkPlacer::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacer.java
index 3d05826c0e59ac43f6e639698844444a8c57ba76..8f2f76c8bb75d360c567ac9535a1901af930047e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacer.java
@@ -31,7 +31,7 @@ public abstract class TrunkPlacer
     protected final int heightRandB;
     
     protected static <P extends TrunkPlacer> Products.P3<RecordCodecBuilder.Mu<P>, Integer, Integer, Integer> trunkPlacerParts(final RecordCodecBuilder.Instance<P> debug0) {
-        return (Products.P3<RecordCodecBuilder.Mu<P>, Integer, Integer, Integer>)debug0.group((App)Codec.intRange(0, 32).fieldOf("base_height").forGetter(debug0 -> debug0.baseHeight), (App)Codec.intRange(0, 24).fieldOf("height_rand_a").forGetter(debug0 -> debug0.heightRandA), (App)Codec.intRange(0, 24).fieldOf("height_rand_b").forGetter(debug0 -> debug0.heightRandB));
+        return (Products.P3<RecordCodecBuilder.Mu<P>, Integer, Integer, Integer>)debug0.group(Codec.intRange(0, 32).fieldOf("base_height").forGetter(debug0l -> debug0l.baseHeight), Codec.intRange(0, 24).fieldOf("height_rand_a").forGetter(debug0l -> debug0l.heightRandA), Codec.intRange(0, 24).fieldOf("height_rand_b").forGetter(debug0l -> debug0l.heightRandB)); // MagmaCube - decompile fix
     }
     
     public TrunkPlacer(final int debug1, final int debug2, final int debug3) {
@@ -54,10 +54,9 @@ public abstract class TrunkPlacer
     }
     
     private static boolean isDirt(final LevelSimulatedReader debug0, final BlockPos debug1) {
-        final Block debug2;
-        return debug0.isStateAtPosition(debug1, debug0 -> {
-            debug2 = debug0.getBlock();
-            return Feature.isDirt(debug2) && !debug0.is(Blocks.GRASS_BLOCK) && !debug0.is(Blocks.MYCELIUM);
+        return debug0.isStateAtPosition(debug1, debug0l -> { // MagmaCube - decompile fix
+            Block debug2 = debug0l.getBlock(); // MagmaCube - decompile fix
+            return Feature.isDirt(debug2) && !debug0l.is(Blocks.GRASS_BLOCK) && !debug0l.is(Blocks.MYCELIUM); // MagmaCube - decompile fix
         });
     }
     
@@ -83,6 +82,6 @@ public abstract class TrunkPlacer
     }
     
     static {
-        CODEC = Registry.TRUNK_PLACER_TYPES.dispatch((Function)TrunkPlacer::type, (Function)TrunkPlacerType::codec);
+        CODEC = Registry.TRUNK_PLACER_TYPES.dispatch(TrunkPlacer::type, TrunkPlacerType::codec); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLayerInfo.java b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLayerInfo.java
index 092dc5c0b858874587ce9fab5a73036ad9025a1b..173c0f15e4480313b1a5ed759589ecabf1402bac 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLayerInfo.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLayerInfo.java
@@ -45,6 +45,6 @@ public class FlatLayerInfo
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.intRange(0, 256).fieldOf("height").forGetter((Function)FlatLayerInfo::getHeight), (App)Registry.BLOCK.fieldOf("block").orElse((Object)Blocks.AIR).forGetter(debug0 -> debug0.getBlockState().getBlock())).apply(debug0, (BiFunction)FlatLayerInfo::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.intRange(0, 256).fieldOf("height").forGetter(FlatLayerInfo::getHeight), Registry.BLOCK.fieldOf("block").orElse(Blocks.AIR).forGetter(debug0l -> debug0l.getBlockState().getBlock())).apply(debug0, FlatLayerInfo::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
index eb23bc7f210ae0ef766c7c4aa724fa1da5cf431d..1e63bb84e6b1926b11f0e29cd84117435145118d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
@@ -74,7 +74,7 @@ public class FlatLevelGeneratorSettings
     }
     
     public FlatLevelGeneratorSettings(final StructureSettings debug1, final Registry<Biome> debug2) {
-        this.layersInfo = (List<FlatLayerInfo>)Lists.newArrayList();
+        this.layersInfo = Lists.newArrayList(); // MagmaCube - decompile fix
         this.layers = new BlockState[256];
         this.decoration = false;
         this.addLakes = false;
@@ -199,24 +199,26 @@ public class FlatLevelGeneratorSettings
     
     static {
         LOGGER = LogManager.getLogger();
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)RegistryLookupCodec.create((ResourceKey<? extends Registry<Object>>)Registry.BIOME_REGISTRY).forGetter(debug0 -> debug0.biomes), (App)StructureSettings.CODEC.fieldOf("structures").forGetter((Function)FlatLevelGeneratorSettings::structureSettings), (App)FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter((Function)FlatLevelGeneratorSettings::getLayersInfo), (App)Codec.BOOL.fieldOf("lakes").orElse((Object)false).forGetter(debug0 -> debug0.addLakes), (App)Codec.BOOL.fieldOf("features").orElse((Object)false).forGetter(debug0 -> debug0.decoration), (App)Biome.CODEC.optionalFieldOf("biome").orElseGet((Supplier)Optional::empty).forGetter(debug0 -> Optional.of(debug0.biome))).apply(debug0, FlatLevelGeneratorSettings::new)).stable();
-        STRUCTURE_FEATURES = Util.make((Map<StructureFeature<?>, ConfiguredStructureFeature<?, ?>>)Maps.newHashMap(), debug0 -> {
+        // MagmaCube start - decompile fix
+        CODEC = RecordCodecBuilder.<FlatLevelGeneratorSettings>create(debug0 -> debug0.group(RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter(debug0l -> debug0l.biomes), StructureSettings.CODEC.fieldOf("structures").forGetter(FlatLevelGeneratorSettings::structureSettings), FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter(FlatLevelGeneratorSettings::getLayersInfo), Codec.BOOL.fieldOf("lakes").orElse(false).forGetter(debug0l -> debug0l.addLakes), Codec.BOOL.fieldOf("features").orElse(false).forGetter(debug0l -> debug0l.decoration), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter(debug0l -> Optional.of(debug0l.biome))).apply(debug0, FlatLevelGeneratorSettings::new)).stable();
+        STRUCTURE_FEATURES = Util.make(Maps.newHashMap(), debug0 -> {
             debug0.put(StructureFeature.MINESHAFT, StructureFeatures.MINESHAFT);
-            debug0.put((StructureFeature<MineshaftConfiguration>)StructureFeature.VILLAGE, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.VILLAGE_PLAINS);
-            debug0.put((StructureFeature<MineshaftConfiguration>)StructureFeature.STRONGHOLD, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.STRONGHOLD);
-            debug0.put((StructureFeature<MineshaftConfiguration>)StructureFeature.SWAMP_HUT, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.SWAMP_HUT);
-            debug0.put((StructureFeature<MineshaftConfiguration>)StructureFeature.DESERT_PYRAMID, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.DESERT_PYRAMID);
-            debug0.put((StructureFeature<MineshaftConfiguration>)StructureFeature.JUNGLE_TEMPLE, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.JUNGLE_TEMPLE);
-            debug0.put((StructureFeature<MineshaftConfiguration>)StructureFeature.IGLOO, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.IGLOO);
-            debug0.put((StructureFeature<MineshaftConfiguration>)StructureFeature.OCEAN_RUIN, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.OCEAN_RUIN_COLD);
-            debug0.put((StructureFeature<MineshaftConfiguration>)StructureFeature.SHIPWRECK, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.SHIPWRECK);
-            debug0.put((StructureFeature<MineshaftConfiguration>)StructureFeature.OCEAN_MONUMENT, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.OCEAN_MONUMENT);
-            debug0.put((StructureFeature<MineshaftConfiguration>)StructureFeature.END_CITY, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.END_CITY);
-            debug0.put((StructureFeature<MineshaftConfiguration>)StructureFeature.WOODLAND_MANSION, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.WOODLAND_MANSION);
-            debug0.put((StructureFeature<MineshaftConfiguration>)StructureFeature.NETHER_BRIDGE, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.NETHER_BRIDGE);
-            debug0.put((StructureFeature<MineshaftConfiguration>)StructureFeature.PILLAGER_OUTPOST, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.PILLAGER_OUTPOST);
-            debug0.put((StructureFeature<MineshaftConfiguration>)StructureFeature.RUINED_PORTAL, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.RUINED_PORTAL_STANDARD);
-            debug0.put((StructureFeature<MineshaftConfiguration>)StructureFeature.BASTION_REMNANT, (ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>)StructureFeatures.BASTION_REMNANT);
+            debug0.put(StructureFeature.VILLAGE, StructureFeatures.VILLAGE_PLAINS);
+            debug0.put(StructureFeature.STRONGHOLD, StructureFeatures.STRONGHOLD);
+            debug0.put(StructureFeature.SWAMP_HUT, StructureFeatures.SWAMP_HUT);
+            debug0.put(StructureFeature.DESERT_PYRAMID, StructureFeatures.DESERT_PYRAMID);
+            debug0.put(StructureFeature.JUNGLE_TEMPLE, StructureFeatures.JUNGLE_TEMPLE);
+            debug0.put(StructureFeature.IGLOO, StructureFeatures.IGLOO);
+            debug0.put(StructureFeature.OCEAN_RUIN, StructureFeatures.OCEAN_RUIN_COLD);
+            debug0.put(StructureFeature.SHIPWRECK, StructureFeatures.SHIPWRECK);
+            debug0.put(StructureFeature.OCEAN_MONUMENT, StructureFeatures.OCEAN_MONUMENT);
+            debug0.put(StructureFeature.END_CITY, StructureFeatures.END_CITY);
+            debug0.put(StructureFeature.WOODLAND_MANSION, StructureFeatures.WOODLAND_MANSION);
+            debug0.put(StructureFeature.NETHER_BRIDGE, StructureFeatures.NETHER_BRIDGE);
+            debug0.put(StructureFeature.PILLAGER_OUTPOST, StructureFeatures.PILLAGER_OUTPOST);
+            debug0.put(StructureFeature.RUINED_PORTAL, StructureFeatures.RUINED_PORTAL_STANDARD);
+            debug0.put(StructureFeature.BASTION_REMNANT, StructureFeatures.BASTION_REMNANT);
+            // MagmaCube end - decompile fix
         });
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/CarvingMaskDecoratorConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/placement/CarvingMaskDecoratorConfiguration.java
index f430751421b0db371dd35e9c4d1aaca953d2a782..1f47c01a60e9af43b0d6b0e847f6fa04c937b9ec 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/CarvingMaskDecoratorConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/CarvingMaskDecoratorConfiguration.java
@@ -20,6 +20,6 @@ public class CarvingMaskDecoratorConfiguration implements DecoratorConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)GenerationStep.Carving.CODEC.fieldOf("step").forGetter(debug0 -> debug0.step), (App)Codec.FLOAT.fieldOf("probability").forGetter(debug0 -> debug0.probability)).apply(debug0, (BiFunction)CarvingMaskDecoratorConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(GenerationStep.Carving.CODEC.fieldOf("step").forGetter(debug0l -> debug0l.step), Codec.FLOAT.fieldOf("probability").forGetter(debug0l -> debug0l.probability)).apply(debug0, CarvingMaskDecoratorConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/ChanceDecoratorConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/placement/ChanceDecoratorConfiguration.java
index 9f972b771f12a92dce999306a75a6c7f1a4e7fa3..3a59baaa7be0c81f19b5879dfee78027706b332c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/ChanceDecoratorConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/ChanceDecoratorConfiguration.java
@@ -14,6 +14,6 @@ public class ChanceDecoratorConfiguration implements DecoratorConfiguration
     }
     
     static {
-        CODEC = Codec.INT.fieldOf("chance").xmap((Function)ChanceDecoratorConfiguration::new, debug0 -> debug0.chance).codec();
+        CODEC = Codec.INT.fieldOf("chance").xmap(ChanceDecoratorConfiguration::new, debug0 -> debug0.chance).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/ConfiguredDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/ConfiguredDecorator.java
index 908d3c402f34a28714db976e33bb3642ba3a4ab8..b9a669e30fedb40372b02b36921ce6fe86962da5 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/ConfiguredDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/ConfiguredDecorator.java
@@ -31,7 +31,7 @@ public class ConfiguredDecorator<DC extends DecoratorConfiguration> implements D
     
     @Override
     public ConfiguredDecorator<?> decorated(final ConfiguredDecorator<?> debug1) {
-        return new ConfiguredDecorator<Object>(FeatureDecorator.DECORATED, new DecoratedDecoratorConfiguration(debug1, this));
+        return new ConfiguredDecorator<>(FeatureDecorator.DECORATED, new DecoratedDecoratorConfiguration(debug1, this)); // MagmaCube - decompile fix
     }
     
     public DC config() {
@@ -39,6 +39,6 @@ public class ConfiguredDecorator<DC extends DecoratorConfiguration> implements D
     }
     
     static {
-        CODEC = Registry.DECORATOR.dispatch("type", debug0 -> debug0.decorator, (Function)FeatureDecorator::configuredCodec);
+        CODEC = Registry.DECORATOR.dispatch("type", debug0 -> debug0.decorator, FeatureDecorator::configuredCodec); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/DecoratedDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/DecoratedDecorator.java
index 23cd2c7e73b06ed458bd569302201b6a3a60f4d2..67e53e8688608eab76ac134c89ccf4d2619b4892 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/DecoratedDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/DecoratedDecorator.java
@@ -14,6 +14,6 @@ public class DecoratedDecorator extends FeatureDecorator<DecoratedDecoratorConfi
     
     @Override
     public Stream<BlockPos> getPositions(final DecorationContext debug1, final Random debug2, final DecoratedDecoratorConfiguration debug3, final BlockPos debug4) {
-        return debug3.outer().getPositions(debug1, debug2, debug4).flatMap(debug3 -> debug3.inner().getPositions(debug1, debug2, debug3));
+        return debug3.outer().getPositions(debug1, debug2, debug4).flatMap(debug3l -> debug3.inner().getPositions(debug1, debug2, debug3l)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/DecoratedDecoratorConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/placement/DecoratedDecoratorConfiguration.java
index 5ba9f94495f126ffbf192564e1a49b3bbf96dab0..5c1eda17beb333723dadd12a2919b664050bf075 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/DecoratedDecoratorConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/DecoratedDecoratorConfiguration.java
@@ -28,6 +28,6 @@ public class DecoratedDecoratorConfiguration implements DecoratorConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)ConfiguredDecorator.CODEC.fieldOf("outer").forGetter((Function)DecoratedDecoratorConfiguration::outer), (App)ConfiguredDecorator.CODEC.fieldOf("inner").forGetter((Function)DecoratedDecoratorConfiguration::inner)).apply(debug0, (BiFunction)DecoratedDecoratorConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(ConfiguredDecorator.CODEC.fieldOf("outer").forGetter(DecoratedDecoratorConfiguration::outer), ConfiguredDecorator.CODEC.fieldOf("inner").forGetter(DecoratedDecoratorConfiguration::inner)).apply(debug0, DecoratedDecoratorConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/DepthAverageConfigation.java b/src/main/java/net/minecraft/world/level/levelgen/placement/DepthAverageConfigation.java
index 156fcacce3f8656121b657eeaf87f6aaae26592a..89757cbdd8a087f8b0131a20caf719a55fa57155 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/DepthAverageConfigation.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/DepthAverageConfigation.java
@@ -19,6 +19,6 @@ public class DepthAverageConfigation implements DecoratorConfiguration
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.INT.fieldOf("baseline").forGetter(debug0 -> debug0.baseline), (App)Codec.INT.fieldOf("spread").forGetter(debug0 -> debug0.spread)).apply(debug0, (BiFunction)DepthAverageConfigation::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.INT.fieldOf("baseline").forGetter(debug0l -> debug0l.baseline), Codec.INT.fieldOf("spread").forGetter(debug0l -> debug0l.spread)).apply(debug0, DepthAverageConfigation::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/EndIslandPlacementDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/EndIslandPlacementDecorator.java
index e9b2182cf6aeb2a944812905371a1255ce036531..5a4485de553e0dfd1c1c56a71beb32d7e1f462d9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/EndIslandPlacementDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/EndIslandPlacementDecorator.java
@@ -16,9 +16,9 @@ public class EndIslandPlacementDecorator extends SimpleFeatureDecorator<NoneDeco
     public Stream<BlockPos> place(final Random debug1, final NoneDecoratorConfiguration debug2, final BlockPos debug3) {
         Stream<BlockPos> debug4 = Stream.empty();
         if (debug1.nextInt(14) == 0) {
-            debug4 = Stream.concat((Stream<? extends BlockPos>)debug4, (Stream<? extends BlockPos>)Stream.of((T)debug3.offset(debug1.nextInt(16), 55 + debug1.nextInt(16), debug1.nextInt(16))));
+            debug4 = Stream.concat((Stream<? extends BlockPos>)debug4, (Stream<? extends BlockPos>)Stream.of(debug3.offset(debug1.nextInt(16), 55 + debug1.nextInt(16), debug1.nextInt(16)))); // MagmaCube - decompile fix
             if (debug1.nextInt(4) == 0) {
-                debug4 = Stream.concat((Stream<? extends BlockPos>)debug4, (Stream<? extends BlockPos>)Stream.of((T)debug3.offset(debug1.nextInt(16), 55 + debug1.nextInt(16), debug1.nextInt(16))));
+                debug4 = Stream.concat((Stream<? extends BlockPos>)debug4, (Stream<? extends BlockPos>)Stream.of(debug3.offset(debug1.nextInt(16), 55 + debug1.nextInt(16), debug1.nextInt(16)))); // MagmaCube - decompile fix
             }
             return debug4;
         }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/FeatureDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/FeatureDecorator.java
index 5fe0ff115c8775af6cbc3e012f499cd6afb4ad27..6f5a4563b4800ab52eb59402915ae7e90a50fb2b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/FeatureDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/FeatureDecorator.java
@@ -54,7 +54,7 @@ public abstract class FeatureDecorator<DC extends DecoratorConfiguration>
     }
     
     public FeatureDecorator(final Codec<DC> debug1) {
-        this.configuredCodec = (Codec<ConfiguredDecorator<DC>>)debug1.fieldOf("config").xmap(debug1 -> new ConfiguredDecorator((FeatureDecorator<DecoratorConfiguration>)this, debug1), (Function)ConfiguredDecorator::config).codec();
+        this.configuredCodec = (Codec<ConfiguredDecorator<DC>>)debug1.fieldOf("config").xmap(debug1l -> new ConfiguredDecorator<>(this, debug1l), ConfiguredDecorator::config).codec(); // MagmaCube - decompile fix
     }
     
     public ConfiguredDecorator<DC> configured(final DC debug1) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/FrequencyWithExtraChanceDecoratorConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/placement/FrequencyWithExtraChanceDecoratorConfiguration.java
index 91704095760a75db2829c2cafc0642b85039f761..344a00c338da1b1ecf4a3801bbddd23239aa7694 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/FrequencyWithExtraChanceDecoratorConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/FrequencyWithExtraChanceDecoratorConfiguration.java
@@ -20,6 +20,6 @@ public class FrequencyWithExtraChanceDecoratorConfiguration implements Decorator
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.INT.fieldOf("count").forGetter(debug0 -> debug0.count), (App)Codec.FLOAT.fieldOf("extra_chance").forGetter(debug0 -> debug0.extraChance), (App)Codec.INT.fieldOf("extra_count").forGetter(debug0 -> debug0.extraCount)).apply(debug0, FrequencyWithExtraChanceDecoratorConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.INT.fieldOf("count").forGetter(debug0l -> debug0l.count), Codec.FLOAT.fieldOf("extra_chance").forGetter(debug0l -> debug0l.extraChance), Codec.INT.fieldOf("extra_count").forGetter(debug0l -> debug0l.extraCount)).apply(debug0, FrequencyWithExtraChanceDecoratorConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/NoiseCountFactorDecoratorConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/placement/NoiseCountFactorDecoratorConfiguration.java
index 1c34f750567697f608ab4e9f0b11335e90e75dc1..c7f7166846c72de6f5a60a9f03dce39979668aeb 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/NoiseCountFactorDecoratorConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/NoiseCountFactorDecoratorConfiguration.java
@@ -20,6 +20,6 @@ public class NoiseCountFactorDecoratorConfiguration implements DecoratorConfigur
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.INT.fieldOf("noise_to_count_ratio").forGetter(debug0 -> debug0.noiseToCountRatio), (App)Codec.DOUBLE.fieldOf("noise_factor").forGetter(debug0 -> debug0.noiseFactor), (App)Codec.DOUBLE.fieldOf("noise_offset").orElse((Object)0.0).forGetter(debug0 -> debug0.noiseOffset)).apply(debug0, NoiseCountFactorDecoratorConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.INT.fieldOf("noise_to_count_ratio").forGetter(debug0l -> debug0l.noiseToCountRatio), Codec.DOUBLE.fieldOf("noise_factor").forGetter(debug0l -> debug0l.noiseFactor), Codec.DOUBLE.fieldOf("noise_offset").orElse(0.0).forGetter(debug0l -> debug0l.noiseOffset)).apply(debug0, NoiseCountFactorDecoratorConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/nether/GlowstoneDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/placement/nether/GlowstoneDecorator.java
index c6bc3ea393515709b42b4fad7a3679083f130e01..32150d220336264c48544b5d13c5c635cb75b941 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/nether/GlowstoneDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/nether/GlowstoneDecorator.java
@@ -16,13 +16,10 @@ public class GlowstoneDecorator extends SimpleFeatureDecorator<CountConfiguratio
     }
     
     public Stream<BlockPos> place(final Random debug1, final CountConfiguration debug2, final BlockPos debug3) {
-        final int debug4;
-        final int debug5;
-        final int debug6;
-        return IntStream.range(0, debug1.nextInt(debug1.nextInt(debug2.count().sample(debug1)) + 1)).mapToObj(debug2 -> {
-            debug4 = debug1.nextInt(16) + debug3.getX();
-            debug5 = debug1.nextInt(16) + debug3.getZ();
-            debug6 = debug1.nextInt(120) + 4;
+        return IntStream.range(0, debug1.nextInt(debug1.nextInt(debug2.count().sample(debug1)) + 1)).mapToObj(debug2l -> { // MagmaCube - decompile fix
+            int debug4 = debug1.nextInt(16) + debug3.getX(); // MagmaCube - decompile fix
+            int debug5 = debug1.nextInt(16) + debug3.getZ(); // MagmaCube - decompile fix
+            int debug6 = debug1.nextInt(120) + 4; // MagmaCube - decompile fix
             return new BlockPos(debug4, debug6, debug5);
         });
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/DesertPyramidPiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/DesertPyramidPiece.java
index 5c6a49a81e9eea7d4f24d8782cfdb5c1acc9e3c0..656c230a3ce786f504098b99438161859edd5161 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/DesertPyramidPiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/DesertPyramidPiece.java
@@ -57,10 +57,10 @@ public class DesertPyramidPiece extends ScatteredFeaturePiece
                 this.fillColumnDown(debug1, Blocks.SANDSTONE.defaultBlockState(), debug8, -5, debug9, debug5);
             }
         }
-        final BlockState debug11 = ((StateHolder<O, BlockState>)Blocks.SANDSTONE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.NORTH);
-        final BlockState debug12 = ((StateHolder<O, BlockState>)Blocks.SANDSTONE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.SOUTH);
-        final BlockState debug13 = ((StateHolder<O, BlockState>)Blocks.SANDSTONE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.EAST);
-        final BlockState debug14 = ((StateHolder<O, BlockState>)Blocks.SANDSTONE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.WEST);
+        final BlockState debug11 = (Blocks.SANDSTONE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.NORTH); // MagmaCube - decompile fix
+        final BlockState debug12 = (Blocks.SANDSTONE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.SOUTH); // MagmaCube - decompile fix
+        final BlockState debug13 = (Blocks.SANDSTONE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.EAST); // MagmaCube - decompile fix
+        final BlockState debug14 = (Blocks.SANDSTONE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.WEST); // MagmaCube - decompile fix
         this.generateBox(debug1, debug5, 0, 0, 0, 4, 9, 4, Blocks.SANDSTONE.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
         this.generateBox(debug1, debug5, 1, 10, 1, 3, 10, 3, Blocks.SANDSTONE.defaultBlockState(), Blocks.SANDSTONE.defaultBlockState(), false);
         this.placeBlock(debug1, debug11, 2, 10, 0, debug5);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/JunglePyramidPiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/JunglePyramidPiece.java
index 0a68040fd272a4663a2e7648d1a93fff2e8305b6..ee381aea2fa4d1310c36ce121ac9719bfab557e4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/JunglePyramidPiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/JunglePyramidPiece.java
@@ -110,10 +110,10 @@ public class JunglePyramidPiece extends ScatteredFeaturePiece
         this.generateBox(debug1, debug5, 4, 9, 10, 4, 9, 10, false, debug4, JunglePyramidPiece.STONE_SELECTOR);
         this.generateBox(debug1, debug5, 7, 9, 10, 7, 9, 10, false, debug4, JunglePyramidPiece.STONE_SELECTOR);
         this.generateBox(debug1, debug5, 5, 9, 7, 6, 9, 7, false, debug4, JunglePyramidPiece.STONE_SELECTOR);
-        final BlockState debug10 = ((StateHolder<O, BlockState>)Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.EAST);
-        final BlockState debug11 = ((StateHolder<O, BlockState>)Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.WEST);
-        final BlockState debug12 = ((StateHolder<O, BlockState>)Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.SOUTH);
-        final BlockState debug13 = ((StateHolder<O, BlockState>)Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.NORTH);
+        final BlockState debug10 = (Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.EAST);
+        final BlockState debug11 = (Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.WEST);
+        final BlockState debug12 = (Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.SOUTH);
+        final BlockState debug13 = (Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.NORTH);
         this.placeBlock(debug1, debug13, 5, 9, 6, debug5);
         this.placeBlock(debug1, debug13, 6, 9, 6, debug5);
         this.placeBlock(debug1, debug12, 5, 9, 8, debug5);
@@ -152,39 +152,39 @@ public class JunglePyramidPiece extends ScatteredFeaturePiece
         this.generateBox(debug1, debug5, 7, -2, 1, 9, -2, 1, false, debug4, JunglePyramidPiece.STONE_SELECTOR);
         this.generateBox(debug1, debug5, 6, -3, 1, 6, -3, 1, false, debug4, JunglePyramidPiece.STONE_SELECTOR);
         this.generateBox(debug1, debug5, 6, -1, 1, 6, -1, 1, false, debug4, JunglePyramidPiece.STONE_SELECTOR);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue((Property<Comparable>)TripWireHookBlock.FACING, Direction.EAST)).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, true), 1, -3, 8, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue((Property<Comparable>)TripWireHookBlock.FACING, Direction.WEST)).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, true), 4, -3, 8, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE.defaultBlockState()).setValue((Property<Comparable>)TripWireBlock.EAST, true)).setValue((Property<Comparable>)TripWireBlock.WEST, true)).setValue((Property<Comparable>)TripWireBlock.ATTACHED, true), 2, -3, 8, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE.defaultBlockState()).setValue((Property<Comparable>)TripWireBlock.EAST, true)).setValue((Property<Comparable>)TripWireBlock.WEST, true)).setValue((Property<Comparable>)TripWireBlock.ATTACHED, true), 3, -3, 8, debug5);
-        final BlockState debug15 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE);
+        this.placeBlock(debug1, ((Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue(TripWireHookBlock.FACING, Direction.EAST)).setValue(TripWireHookBlock.ATTACHED, true), 1, -3, 8, debug5);
+        this.placeBlock(debug1, ((Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue(TripWireHookBlock.FACING, Direction.WEST)).setValue(TripWireHookBlock.ATTACHED, true), 4, -3, 8, debug5);
+        this.placeBlock(debug1, (((Blocks.TRIPWIRE.defaultBlockState()).setValue(TripWireBlock.EAST, true)).setValue(TripWireBlock.WEST, true)).setValue(TripWireBlock.ATTACHED, true), 2, -3, 8, debug5);
+        this.placeBlock(debug1, (((Blocks.TRIPWIRE.defaultBlockState()).setValue(TripWireBlock.EAST, true)).setValue(TripWireBlock.WEST, true)).setValue(TripWireBlock.ATTACHED, true), 3, -3, 8, debug5);
+        final BlockState debug15 = ((Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE);
         this.placeBlock(debug1, debug15, 5, -3, 7, debug5);
         this.placeBlock(debug1, debug15, 5, -3, 6, debug5);
         this.placeBlock(debug1, debug15, 5, -3, 5, debug5);
         this.placeBlock(debug1, debug15, 5, -3, 4, debug5);
         this.placeBlock(debug1, debug15, 5, -3, 3, debug5);
         this.placeBlock(debug1, debug15, 5, -3, 2, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 5, -3, 1, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 4, -3, 1, debug5);
+        this.placeBlock(debug1, ((Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 5, -3, 1, debug5);
+        this.placeBlock(debug1, ((Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 4, -3, 1, debug5);
         this.placeBlock(debug1, Blocks.MOSSY_COBBLESTONE.defaultBlockState(), 3, -3, 1, debug5);
         if (!this.placedTrap1) {
             this.placedTrap1 = this.createDispenser(debug1, debug5, debug4, 3, -2, 1, Direction.NORTH, BuiltInLootTables.JUNGLE_TEMPLE_DISPENSER);
         }
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.VINE.defaultBlockState()).setValue((Property<Comparable>)VineBlock.SOUTH, true), 3, -2, 2, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue((Property<Comparable>)TripWireHookBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, true), 7, -3, 1, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue((Property<Comparable>)TripWireHookBlock.FACING, Direction.SOUTH)).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, true), 7, -3, 5, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE.defaultBlockState()).setValue((Property<Comparable>)TripWireBlock.NORTH, true)).setValue((Property<Comparable>)TripWireBlock.SOUTH, true)).setValue((Property<Comparable>)TripWireBlock.ATTACHED, true), 7, -3, 2, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE.defaultBlockState()).setValue((Property<Comparable>)TripWireBlock.NORTH, true)).setValue((Property<Comparable>)TripWireBlock.SOUTH, true)).setValue((Property<Comparable>)TripWireBlock.ATTACHED, true), 7, -3, 3, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE.defaultBlockState()).setValue((Property<Comparable>)TripWireBlock.NORTH, true)).setValue((Property<Comparable>)TripWireBlock.SOUTH, true)).setValue((Property<Comparable>)TripWireBlock.ATTACHED, true), 7, -3, 4, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 8, -3, 6, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE), 9, -3, 6, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.UP), 9, -3, 5, debug5);
+        this.placeBlock(debug1, (Blocks.VINE.defaultBlockState()).setValue(VineBlock.SOUTH, true), 3, -2, 2, debug5);
+        this.placeBlock(debug1, ((Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue(TripWireHookBlock.FACING, Direction.NORTH)).setValue(TripWireHookBlock.ATTACHED, true), 7, -3, 1, debug5);
+        this.placeBlock(debug1, ((Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue(TripWireHookBlock.FACING, Direction.SOUTH)).setValue(TripWireHookBlock.ATTACHED, true), 7, -3, 5, debug5);
+        this.placeBlock(debug1, (((Blocks.TRIPWIRE.defaultBlockState()).setValue(TripWireBlock.NORTH, true)).setValue(TripWireBlock.SOUTH, true)).setValue(TripWireBlock.ATTACHED, true), 7, -3, 2, debug5);
+        this.placeBlock(debug1, (((Blocks.TRIPWIRE.defaultBlockState()).setValue(TripWireBlock.NORTH, true)).setValue(TripWireBlock.SOUTH, true)).setValue(TripWireBlock.ATTACHED, true), 7, -3, 3, debug5);
+        this.placeBlock(debug1, (((Blocks.TRIPWIRE.defaultBlockState()).setValue(TripWireBlock.NORTH, true)).setValue(TripWireBlock.SOUTH, true)).setValue(TripWireBlock.ATTACHED, true), 7, -3, 4, debug5);
+        this.placeBlock(debug1, ((Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 8, -3, 6, debug5);
+        this.placeBlock(debug1, ((Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE), 9, -3, 6, debug5);
+        this.placeBlock(debug1, ((Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.UP), 9, -3, 5, debug5);
         this.placeBlock(debug1, Blocks.MOSSY_COBBLESTONE.defaultBlockState(), 9, -3, 4, debug5);
         this.placeBlock(debug1, debug15, 9, -2, 4, debug5);
         if (!this.placedTrap2) {
             this.placedTrap2 = this.createDispenser(debug1, debug5, debug4, 9, -2, 3, Direction.WEST, BuiltInLootTables.JUNGLE_TEMPLE_DISPENSER);
         }
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.VINE.defaultBlockState()).setValue((Property<Comparable>)VineBlock.EAST, true), 8, -1, 3, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.VINE.defaultBlockState()).setValue((Property<Comparable>)VineBlock.EAST, true), 8, -2, 3, debug5);
+        this.placeBlock(debug1, (Blocks.VINE.defaultBlockState()).setValue(VineBlock.EAST, true), 8, -1, 3, debug5);
+        this.placeBlock(debug1, (Blocks.VINE.defaultBlockState()).setValue(VineBlock.EAST, true), 8, -2, 3, debug5);
         if (!this.placedMainChest) {
             this.placedMainChest = this.createChest(debug1, debug5, debug4, 8, -3, 3, BuiltInLootTables.JUNGLE_TEMPLE);
         }
@@ -202,7 +202,7 @@ public class JunglePyramidPiece extends ScatteredFeaturePiece
         this.placeBlock(debug1, Blocks.CHISELED_STONE_BRICKS.defaultBlockState(), 8, -2, 11, debug5);
         this.placeBlock(debug1, Blocks.CHISELED_STONE_BRICKS.defaultBlockState(), 9, -2, 11, debug5);
         this.placeBlock(debug1, Blocks.CHISELED_STONE_BRICKS.defaultBlockState(), 10, -2, 11, debug5);
-        final BlockState debug16 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.LEVER.defaultBlockState()).setValue((Property<Comparable>)LeverBlock.FACING, Direction.NORTH)).setValue(LeverBlock.FACE, AttachFace.WALL);
+        final BlockState debug16 = ((Blocks.LEVER.defaultBlockState()).setValue(LeverBlock.FACING, Direction.NORTH)).setValue(LeverBlock.FACE, AttachFace.WALL);
         this.placeBlock(debug1, debug16, 8, -2, 12, debug5);
         this.placeBlock(debug1, debug16, 9, -2, 12, debug5);
         this.placeBlock(debug1, debug16, 10, -2, 12, debug5);
@@ -211,11 +211,11 @@ public class JunglePyramidPiece extends ScatteredFeaturePiece
         this.placeBlock(debug1, Blocks.MOSSY_COBBLESTONE.defaultBlockState(), 10, -2, 9, debug5);
         this.placeBlock(debug1, debug15, 8, -2, 9, debug5);
         this.placeBlock(debug1, debug15, 8, -2, 10, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 10, -1, 9, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.STICKY_PISTON.defaultBlockState()).setValue((Property<Comparable>)PistonBaseBlock.FACING, Direction.UP), 9, -2, 8, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.STICKY_PISTON.defaultBlockState()).setValue((Property<Comparable>)PistonBaseBlock.FACING, Direction.WEST), 10, -2, 8, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.STICKY_PISTON.defaultBlockState()).setValue((Property<Comparable>)PistonBaseBlock.FACING, Direction.WEST), 10, -1, 8, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.REPEATER.defaultBlockState()).setValue((Property<Comparable>)RepeaterBlock.FACING, Direction.NORTH), 10, -2, 10, debug5);
+        this.placeBlock(debug1, ((((Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 10, -1, 9, debug5);
+        this.placeBlock(debug1, (Blocks.STICKY_PISTON.defaultBlockState()).setValue(PistonBaseBlock.FACING, Direction.UP), 9, -2, 8, debug5);
+        this.placeBlock(debug1, (Blocks.STICKY_PISTON.defaultBlockState()).setValue(PistonBaseBlock.FACING, Direction.WEST), 10, -2, 8, debug5);
+        this.placeBlock(debug1, (Blocks.STICKY_PISTON.defaultBlockState()).setValue(PistonBaseBlock.FACING, Direction.WEST), 10, -1, 8, debug5);
+        this.placeBlock(debug1, (Blocks.REPEATER.defaultBlockState()).setValue(RepeaterBlock.FACING, Direction.NORTH), 10, -2, 10, debug5);
         if (!this.placedHiddenChest) {
             this.placedHiddenChest = this.createChest(debug1, debug5, debug4, 9, -3, 10, BuiltInLootTables.JUNGLE_TEMPLE);
         }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/LegacyStructureDataHandler.java b/src/main/java/net/minecraft/world/level/levelgen/structure/LegacyStructureDataHandler.java
index 28a9489866c0f081188bea86820592e4212ba536..feb4218aeb42cdf4434047fec5c0061bccbba115 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/LegacyStructureDataHandler.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/LegacyStructureDataHandler.java
@@ -34,8 +34,8 @@ public class LegacyStructureDataHandler
     private final List<String> currentKeys;
     
     public LegacyStructureDataHandler(@Nullable final DimensionDataStorage debug1, final List<String> debug2, final List<String> debug3) {
-        this.dataMap = (Map<String, Long2ObjectMap<CompoundTag>>)Maps.newHashMap();
-        this.indexMap = (Map<String, StructureFeatureIndexSavedData>)Maps.newHashMap();
+        this.dataMap = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.indexMap = Maps.newHashMap(); // MagmaCube - decompile fix
         this.legacyKeys = debug2;
         this.currentKeys = debug3;
         this.populateCaches(debug1);
@@ -154,7 +154,7 @@ public class LegacyStructureDataHandler
                     }
                 }
                 final String debug8 = debug5.getString("id");
-                this.dataMap.computeIfAbsent(debug8, debug0 -> new Long2ObjectOpenHashMap()).put(debug6, (Object)debug5);
+                this.dataMap.computeIfAbsent(debug8, debug0 -> new Long2ObjectOpenHashMap()).put(debug6, debug5); // MagmaCube - decompile fix
             }
             final String debug10 = debug2 + "_index";
             final StructureFeatureIndexSavedData debug11 = debug1.computeIfAbsent(() -> new StructureFeatureIndexSavedData(debug10), debug10);
@@ -175,21 +175,21 @@ public class LegacyStructureDataHandler
     
     public static LegacyStructureDataHandler getLegacyStructureHandler(final ResourceKey<Level> debug0, @Nullable final DimensionDataStorage debug1) {
         if (debug0 == Level.OVERWORLD) {
-            return new LegacyStructureDataHandler(debug1, (List<String>)ImmutableList.of((Object)"Monument", (Object)"Stronghold", (Object)"Village", (Object)"Mineshaft", (Object)"Temple", (Object)"Mansion"), (List<String>)ImmutableList.of((Object)"Village", (Object)"Mineshaft", (Object)"Mansion", (Object)"Igloo", (Object)"Desert_Pyramid", (Object)"Jungle_Pyramid", (Object)"Swamp_Hut", (Object)"Stronghold", (Object)"Monument"));
+            return new LegacyStructureDataHandler(debug1, (List<String>)ImmutableList.of("Monument", "Stronghold", "Village", "Mineshaft", "Temple", "Mansion"), (List<String>)ImmutableList.of("Village", "Mineshaft", "Mansion", "Igloo", "Desert_Pyramid", "Jungle_Pyramid", "Swamp_Hut", "Stronghold", "Monument")); // MagmaCube - decompile fix
         }
         if (debug0 == Level.NETHER) {
-            final List<String> debug2 = (List<String>)ImmutableList.of((Object)"Fortress");
+            final List<String> debug2 = (List<String>)ImmutableList.of("Fortress"); // MagmaCube - decompile fix
             return new LegacyStructureDataHandler(debug1, debug2, debug2);
         }
         if (debug0 == Level.END) {
-            final List<String> debug2 = (List<String>)ImmutableList.of((Object)"EndCity");
+            final List<String> debug2 = (List<String>)ImmutableList.of("EndCity"); // MagmaCube - decompile fix
             return new LegacyStructureDataHandler(debug1, debug2, debug2);
         }
         throw new RuntimeException(String.format("Unknown dimension type : %s", debug0));
     }
     
     static {
-        CURRENT_TO_LEGACY_MAP = Util.make((Map<String, String>)Maps.newHashMap(), debug0 -> {
+        CURRENT_TO_LEGACY_MAP = Util.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put("Village", "Village");
             debug0.put("Mineshaft", "Mineshaft");
             debug0.put("Mansion", "Mansion");
@@ -203,7 +203,7 @@ public class LegacyStructureDataHandler
             debug0.put("EndCity", "EndCity");
             return;
         });
-        LEGACY_TO_CURRENT_MAP = Util.make((Map<String, String>)Maps.newHashMap(), debug0 -> {
+        LEGACY_TO_CURRENT_MAP = Util.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put("Iglu", "Igloo");
             debug0.put("TeDP", "Desert_Pyramid");
             debug0.put("TeJP", "Jungle_Pyramid");
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/MineShaftPieces.java b/src/main/java/net/minecraft/world/level/levelgen/structure/MineShaftPieces.java
index 3f7f436c7d5b9a95931d4a1349da5883ba558810..6132224a1851e891e0d36d5b5743bdb792994e3d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/MineShaftPieces.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/MineShaftPieces.java
@@ -137,14 +137,14 @@ public class MineShaftPieces
         
         public MineShaftRoom(final int debug1, final Random debug2, final int debug3, final int debug4, final MineshaftFeature.Type debug5) {
             super(StructurePieceType.MINE_SHAFT_ROOM, debug1, debug5);
-            this.childEntranceBoxes = (List<BoundingBox>)Lists.newLinkedList();
+            this.childEntranceBoxes = Lists.newLinkedList(); // MagmaCube - decompile fix
             this.type = debug5;
             this.boundingBox = new BoundingBox(debug3, 50, debug4, debug3 + 7 + debug2.nextInt(6), 54 + debug2.nextInt(6), debug4 + 7 + debug2.nextInt(6));
         }
         
         public MineShaftRoom(final StructureManager debug1, final CompoundTag debug2) {
             super(StructurePieceType.MINE_SHAFT_ROOM, debug2);
-            this.childEntranceBoxes = (List<BoundingBox>)Lists.newLinkedList();
+            this.childEntranceBoxes = Lists.newLinkedList(); // MagmaCube - decompile fix
             final ListTag debug3 = debug2.getList("Entrances", 11);
             for (int debug4 = 0; debug4 < debug3.size(); ++debug4) {
                 this.childEntranceBoxes.add(new BoundingBox(debug3.getIntArray(debug4)));
@@ -231,7 +231,7 @@ public class MineShaftPieces
             super.addAdditionalSaveData(debug1);
             final ListTag debug2 = new ListTag();
             for (final BoundingBox debug3 : this.childEntranceBoxes) {
-                ((AbstractList<IntArrayTag>)debug2).add(debug3.createTag());
+                debug2.add(debug3.createTag()); // MagmaCube - decompile fix
             }
             debug1.put("Entrances", debug2);
         }
@@ -399,7 +399,7 @@ public class MineShaftPieces
         protected boolean createChest(final WorldGenLevel debug1, final BoundingBox debug2, final Random debug3, final int debug4, final int debug5, final int debug6, final ResourceLocation debug7) {
             final BlockPos debug8 = new BlockPos(this.getWorldX(debug4, debug6), this.getWorldY(debug5), this.getWorldZ(debug4, debug6));
             if (debug2.isInside(debug8) && debug1.getBlockState(debug8).isAir() && !debug1.getBlockState(debug8.below()).isAir()) {
-                final BlockState debug9 = ((StateHolder<O, BlockState>)Blocks.RAIL.defaultBlockState()).setValue(RailBlock.SHAPE, debug3.nextBoolean() ? RailShape.NORTH_SOUTH : RailShape.EAST_WEST);
+                final BlockState debug9 = (Blocks.RAIL.defaultBlockState()).setValue(RailBlock.SHAPE, debug3.nextBoolean() ? RailShape.NORTH_SOUTH : RailShape.EAST_WEST); // MagmaCube - decompile fix
                 this.placeBlock(debug1, debug9, debug4, debug5, debug6, debug2);
                 final MinecartChest debug10 = new MinecartChest(debug1.getLevel(), debug8.getX() + 0.5, debug8.getY() + 0.5, debug8.getZ() + 0.5);
                 debug10.setLootTable(debug7, debug3.nextLong());
@@ -469,7 +469,7 @@ public class MineShaftPieces
                 }
             }
             if (this.hasRails) {
-                final BlockState debug23 = ((StateHolder<O, BlockState>)Blocks.RAIL.defaultBlockState()).setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                final BlockState debug23 = (Blocks.RAIL.defaultBlockState()).setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH); // MagmaCube - decompile fix
                 for (int debug15 = 0; debug15 <= debug12; ++debug15) {
                     final BlockState debug24 = this.getBlock(debug1, 1, -1, debug15, debug5);
                     if (!debug24.isAir() && debug24.isSolidRender(debug1, new BlockPos(this.getWorldX(1, debug15), this.getWorldY(-1), this.getWorldZ(1, debug15)))) {
@@ -487,16 +487,16 @@ public class MineShaftPieces
             }
             final BlockState debug9 = this.getPlanksBlock();
             final BlockState debug10 = this.getFenceBlock();
-            this.generateBox(debug1, debug2, debug3, debug4, debug5, debug3, debug6 - 1, debug5, ((StateHolder<O, BlockState>)debug10).setValue((Property<Comparable>)FenceBlock.WEST, true), MineShaftCorridor.CAVE_AIR, false);
-            this.generateBox(debug1, debug2, debug7, debug4, debug5, debug7, debug6 - 1, debug5, ((StateHolder<O, BlockState>)debug10).setValue((Property<Comparable>)FenceBlock.EAST, true), MineShaftCorridor.CAVE_AIR, false);
+            this.generateBox(debug1, debug2, debug3, debug4, debug5, debug3, debug6 - 1, debug5, (debug10).setValue(FenceBlock.WEST, true), MineShaftCorridor.CAVE_AIR, false); // MagmaCube - decompile fix
+            this.generateBox(debug1, debug2, debug7, debug4, debug5, debug7, debug6 - 1, debug5, (debug10).setValue(FenceBlock.EAST, true), MineShaftCorridor.CAVE_AIR, false); // MagmaCube - decompile fix
             if (debug8.nextInt(4) == 0) {
                 this.generateBox(debug1, debug2, debug3, debug6, debug5, debug3, debug6, debug5, debug9, MineShaftCorridor.CAVE_AIR, false);
                 this.generateBox(debug1, debug2, debug7, debug6, debug5, debug7, debug6, debug5, debug9, MineShaftCorridor.CAVE_AIR, false);
             }
             else {
                 this.generateBox(debug1, debug2, debug3, debug6, debug5, debug7, debug6, debug5, debug9, MineShaftCorridor.CAVE_AIR, false);
-                this.maybeGenerateBlock(debug1, debug2, debug8, 0.05f, debug3 + 1, debug6, debug5 - 1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.NORTH));
-                this.maybeGenerateBlock(debug1, debug2, debug8, 0.05f, debug3 + 1, debug6, debug5 + 1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.SOUTH));
+                this.maybeGenerateBlock(debug1, debug2, debug8, 0.05f, debug3 + 1, debug6, debug5 - 1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.NORTH)); // MagmaCube - decompile fix
+                this.maybeGenerateBlock(debug1, debug2, debug8, 0.05f, debug3 + 1, debug6, debug5 + 1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.SOUTH)); // MagmaCube - decompile fix
             }
         }
         
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/NetherBridgePieces.java b/src/main/java/net/minecraft/world/level/levelgen/structure/NetherBridgePieces.java
index dbff9fcb8f3b0de1dd3867aab8b048eae3030371..d120d5a9e56a5920af5618819f27ab87b2ff58eb 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/NetherBridgePieces.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/NetherBridgePieces.java
@@ -265,13 +265,13 @@ public class NetherBridgePieces
         
         public StartPiece(final Random debug1, final int debug2, final int debug3) {
             super(debug1, debug2, debug3);
-            this.pendingChildren = (List<StructurePiece>)Lists.newArrayList();
-            this.availableBridgePieces = (List<PieceWeight>)Lists.newArrayList();
+            this.pendingChildren = Lists.newArrayList(); // MagmaCube - decompile fix
+            this.availableBridgePieces = Lists.newArrayList(); // MagmaCube - decompile fix
             for (final PieceWeight debug4 : NetherBridgePieces.BRIDGE_PIECE_WEIGHTS) {
                 debug4.placeCount = 0;
                 this.availableBridgePieces.add(debug4);
             }
-            this.availableCastlePieces = (List<PieceWeight>)Lists.newArrayList();
+            this.availableCastlePieces = Lists.newArrayList(); // MagmaCube - decompile fix
             for (final PieceWeight debug4 : NetherBridgePieces.CASTLE_PIECE_WEIGHTS) {
                 debug4.placeCount = 0;
                 this.availableCastlePieces.add(debug4);
@@ -280,7 +280,7 @@ public class NetherBridgePieces
         
         public StartPiece(final StructureManager debug1, final CompoundTag debug2) {
             super(StructurePieceType.NETHER_FORTRESS_START, debug2);
-            this.pendingChildren = (List<StructurePiece>)Lists.newArrayList();
+            this.pendingChildren = Lists.newArrayList(); // MagmaCube - decompile fix
         }
     }
     
@@ -325,9 +325,9 @@ public class NetherBridgePieces
                     this.fillColumnDown(debug1, Blocks.NETHER_BRICKS.defaultBlockState(), debug8, -1, 18 - debug9, debug5);
                 }
             }
-            final BlockState debug10 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true);
-            final BlockState debug11 = ((StateHolder<O, BlockState>)debug10).setValue((Property<Comparable>)FenceBlock.EAST, true);
-            final BlockState debug12 = ((StateHolder<O, BlockState>)debug10).setValue((Property<Comparable>)FenceBlock.WEST, true);
+            final BlockState debug10 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true); // MagmaCube - decompile fix
+            final BlockState debug11 = (debug10).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
+            final BlockState debug12 = (debug10).setValue(FenceBlock.WEST, true); // MagmaCube - decompile fix
             this.generateBox(debug1, debug5, 0, 1, 1, 0, 4, 1, debug11, debug11, false);
             this.generateBox(debug1, debug5, 0, 3, 4, 0, 4, 4, debug11, debug11, false);
             this.generateBox(debug1, debug5, 0, 3, 14, 0, 4, 14, debug11, debug11, false);
@@ -516,8 +516,8 @@ public class NetherBridgePieces
             this.generateBox(debug1, debug5, 0, 2, 5, 0, 6, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 6, 2, 0, 6, 6, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 6, 2, 5, 6, 6, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            final BlockState debug8 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true)).setValue((Property<Comparable>)FenceBlock.EAST, true);
-            final BlockState debug9 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true);
+            final BlockState debug8 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
+            final BlockState debug9 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true); // MagmaCube - decompile fix
             this.generateBox(debug1, debug5, 2, 6, 0, 4, 6, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 2, 5, 0, 4, 5, 0, debug8, debug8, false);
             this.generateBox(debug1, debug5, 2, 6, 6, 4, 6, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
@@ -569,8 +569,8 @@ public class NetherBridgePieces
             this.generateBox(debug1, debug5, 0, 2, 1, 0, 8, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 6, 2, 1, 6, 8, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 1, 2, 6, 5, 8, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            final BlockState debug8 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true)).setValue((Property<Comparable>)FenceBlock.EAST, true);
-            final BlockState debug9 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true);
+            final BlockState debug8 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
+            final BlockState debug9 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true); // MagmaCube - decompile fix
             this.generateBox(debug1, debug5, 0, 3, 2, 0, 5, 4, debug9, debug9, false);
             this.generateBox(debug1, debug5, 6, 3, 2, 6, 5, 2, debug9, debug9, false);
             this.generateBox(debug1, debug5, 6, 3, 4, 6, 5, 4, debug9, debug9, false);
@@ -635,23 +635,23 @@ public class NetherBridgePieces
             this.generateBox(debug1, debug5, 0, 5, 3, 0, 5, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 6, 5, 3, 6, 5, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 1, 5, 8, 5, 5, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            final BlockState debug8 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true)).setValue((Property<Comparable>)FenceBlock.EAST, true);
-            final BlockState debug9 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true), 1, 6, 3, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.EAST, true), 5, 6, 3, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.EAST, true)).setValue((Property<Comparable>)FenceBlock.NORTH, true), 0, 6, 3, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true)).setValue((Property<Comparable>)FenceBlock.NORTH, true), 6, 6, 3, debug5);
+            final BlockState debug8 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
+            final BlockState debug9 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true); // MagmaCube - decompile fix
+            this.placeBlock(debug1, (Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true), 1, 6, 3, debug5); // MagmaCube - decompile fix
+            this.placeBlock(debug1, (Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.EAST, true), 5, 6, 3, debug5); // MagmaCube - decompile fix
+            this.placeBlock(debug1, ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.EAST, true)).setValue(FenceBlock.NORTH, true), 0, 6, 3, debug5); // MagmaCube - decompile fix
+            this.placeBlock(debug1, ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true)).setValue(FenceBlock.NORTH, true), 6, 6, 3, debug5); // MagmaCube - decompile fix
             this.generateBox(debug1, debug5, 0, 6, 4, 0, 6, 7, debug9, debug9, false);
             this.generateBox(debug1, debug5, 6, 6, 4, 6, 6, 7, debug9, debug9, false);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.EAST, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true), 0, 6, 8, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true), 6, 6, 8, debug5);
+            this.placeBlock(debug1, ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.EAST, true)).setValue(FenceBlock.SOUTH, true), 0, 6, 8, debug5); // MagmaCube - decompile fix
+            this.placeBlock(debug1, ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true)).setValue(FenceBlock.SOUTH, true), 6, 6, 8, debug5); // MagmaCube - decompile fix
             this.generateBox(debug1, debug5, 1, 6, 8, 5, 6, 8, debug8, debug8, false);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.EAST, true), 1, 7, 8, debug5);
+            this.placeBlock(debug1, (Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.EAST, true), 1, 7, 8, debug5); // MagmaCube - decompile fix
             this.generateBox(debug1, debug5, 2, 7, 8, 4, 7, 8, debug8, debug8, false);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true), 5, 7, 8, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.EAST, true), 2, 8, 8, debug5);
+            this.placeBlock(debug1, (Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true), 5, 7, 8, debug5); // MagmaCube - decompile fix
+            this.placeBlock(debug1, (Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.EAST, true), 2, 8, 8, debug5); // MagmaCube - decompile fix
             this.placeBlock(debug1, debug8, 3, 8, 8, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true), 4, 8, 8, debug5);
+            this.placeBlock(debug1, (Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true), 4, 8, 8, debug5); // MagmaCube - decompile fix
             if (!this.hasPlacedSpawner) {
                 final BlockPos debug10 = new BlockPos(this.getWorldX(3, 5), this.getWorldY(5), this.getWorldZ(3, 5));
                 if (debug5.isInside(debug10)) {
@@ -711,8 +711,8 @@ public class NetherBridgePieces
             this.generateBox(debug1, debug5, 5, 9, 0, 7, 12, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 2, 11, 2, 10, 12, 10, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 5, 8, 0, 7, 8, 0, Blocks.NETHER_BRICK_FENCE.defaultBlockState(), Blocks.NETHER_BRICK_FENCE.defaultBlockState(), false);
-            final BlockState debug8 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true)).setValue((Property<Comparable>)FenceBlock.EAST, true);
-            final BlockState debug9 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true);
+            final BlockState debug8 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
+            final BlockState debug9 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true); // MagmaCube - decompile fix
             for (int debug10 = 1; debug10 <= 11; debug10 += 2) {
                 this.generateBox(debug1, debug5, debug10, 10, 0, debug10, 11, 0, debug8, debug8, false);
                 this.generateBox(debug1, debug5, debug10, 10, 12, debug10, 11, 12, debug8, debug8, false);
@@ -729,13 +729,13 @@ public class NetherBridgePieces
                     this.placeBlock(debug1, debug9, 12, 13, debug10 + 1, debug5);
                 }
             }
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.EAST, true), 0, 13, 0, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.SOUTH, true)).setValue((Property<Comparable>)FenceBlock.EAST, true), 0, 13, 12, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.SOUTH, true)).setValue((Property<Comparable>)FenceBlock.WEST, true), 12, 13, 12, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.WEST, true), 12, 13, 0, debug5);
+            this.placeBlock(debug1, ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 0, 13, 0, debug5); // MagmaCube - decompile fix
+            this.placeBlock(debug1, ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.EAST, true), 0, 13, 12, debug5); // MagmaCube - decompile fix
+            this.placeBlock(debug1, ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.WEST, true), 12, 13, 12, debug5); // MagmaCube - decompile fix
+            this.placeBlock(debug1, ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.WEST, true), 12, 13, 0, debug5); // MagmaCube - decompile fix
             for (int debug10 = 3; debug10 <= 9; debug10 += 2) {
-                this.generateBox(debug1, debug5, 1, 7, debug10, 1, 8, debug10, ((StateHolder<O, BlockState>)debug9).setValue((Property<Comparable>)FenceBlock.WEST, true), ((StateHolder<O, BlockState>)debug9).setValue((Property<Comparable>)FenceBlock.WEST, true), false);
-                this.generateBox(debug1, debug5, 11, 7, debug10, 11, 8, debug10, ((StateHolder<O, BlockState>)debug9).setValue((Property<Comparable>)FenceBlock.EAST, true), ((StateHolder<O, BlockState>)debug9).setValue((Property<Comparable>)FenceBlock.EAST, true), false);
+                this.generateBox(debug1, debug5, 1, 7, debug10, 1, 8, debug10, (debug9).setValue(FenceBlock.WEST, true), (debug9).setValue(FenceBlock.WEST, true), false); // MagmaCube - decompile fix
+                this.generateBox(debug1, debug5, 11, 7, debug10, 11, 8, debug10, (debug9).setValue(FenceBlock.EAST, true), (debug9).setValue(FenceBlock.EAST, true), false); // MagmaCube - decompile fix
             }
             this.generateBox(debug1, debug5, 4, 2, 0, 8, 2, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 0, 2, 4, 12, 2, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
@@ -806,10 +806,10 @@ public class NetherBridgePieces
             this.generateBox(debug1, debug5, 8, 5, 0, 10, 12, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 5, 9, 0, 7, 12, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 2, 11, 2, 10, 12, 10, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            final BlockState debug8 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true)).setValue((Property<Comparable>)FenceBlock.EAST, true);
-            final BlockState debug9 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true);
-            final BlockState debug10 = ((StateHolder<O, BlockState>)debug9).setValue((Property<Comparable>)FenceBlock.WEST, true);
-            final BlockState debug11 = ((StateHolder<O, BlockState>)debug9).setValue((Property<Comparable>)FenceBlock.EAST, true);
+            final BlockState debug8 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
+            final BlockState debug9 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true); // MagmaCube - decompile fix
+            final BlockState debug10 = (debug9).setValue(FenceBlock.WEST, true); // MagmaCube - decompile fix
+            final BlockState debug11 = (debug9).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
             for (int debug12 = 1; debug12 <= 11; debug12 += 2) {
                 this.generateBox(debug1, debug5, debug12, 10, 0, debug12, 11, 0, debug8, debug8, false);
                 this.generateBox(debug1, debug5, debug12, 10, 12, debug12, 11, 12, debug8, debug8, false);
@@ -826,15 +826,15 @@ public class NetherBridgePieces
                     this.placeBlock(debug1, debug9, 12, 13, debug12 + 1, debug5);
                 }
             }
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.EAST, true), 0, 13, 0, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.SOUTH, true)).setValue((Property<Comparable>)FenceBlock.EAST, true), 0, 13, 12, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.SOUTH, true)).setValue((Property<Comparable>)FenceBlock.WEST, true), 12, 13, 12, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.WEST, true), 12, 13, 0, debug5);
+            this.placeBlock(debug1, ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 0, 13, 0, debug5); // MagmaCube - decompile fix
+            this.placeBlock(debug1, ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.EAST, true), 0, 13, 12, debug5); // MagmaCube - decompile fix
+            this.placeBlock(debug1, ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.WEST, true), 12, 13, 12, debug5); // MagmaCube - decompile fix
+            this.placeBlock(debug1, ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.WEST, true), 12, 13, 0, debug5); // MagmaCube - decompile fix
             for (int debug12 = 3; debug12 <= 9; debug12 += 2) {
                 this.generateBox(debug1, debug5, 1, 7, debug12, 1, 8, debug12, debug10, debug10, false);
                 this.generateBox(debug1, debug5, 11, 7, debug12, 11, 8, debug12, debug11, debug11, false);
             }
-            final BlockState debug13 = ((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.NORTH);
+            final BlockState debug13 = (Blocks.NETHER_BRICK_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.NORTH); // MagmaCube - decompile fix
             for (int debug14 = 0; debug14 <= 6; ++debug14) {
                 final int debug15 = debug14 + 4;
                 for (int debug16 = 5; debug16 <= 7; ++debug16) {
@@ -862,8 +862,8 @@ public class NetherBridgePieces
             this.generateBox(debug1, debug5, 9, 5, 2, 10, 5, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 9, 5, 9, 10, 5, 10, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 10, 5, 4, 10, 5, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            final BlockState debug17 = ((StateHolder<O, BlockState>)debug13).setValue((Property<Comparable>)StairBlock.FACING, Direction.EAST);
-            final BlockState debug18 = ((StateHolder<O, BlockState>)debug13).setValue((Property<Comparable>)StairBlock.FACING, Direction.WEST);
+            final BlockState debug17 = (debug13).setValue(StairBlock.FACING, Direction.EAST); // MagmaCube - decompile fix
+            final BlockState debug18 = (debug13).setValue(StairBlock.FACING, Direction.WEST); // MagmaCube - decompile fix
             this.placeBlock(debug1, debug18, 4, 5, 2, debug5);
             this.placeBlock(debug1, debug18, 4, 5, 3, debug5);
             this.placeBlock(debug1, debug18, 4, 5, 9, debug5);
@@ -927,7 +927,7 @@ public class NetherBridgePieces
         public boolean postProcess(final WorldGenLevel debug1, final StructureFeatureManager debug2, final ChunkGenerator debug3, final Random debug4, final BoundingBox debug5, final ChunkPos debug6, final BlockPos debug7) {
             this.generateBox(debug1, debug5, 0, 0, 0, 4, 1, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 0, 2, 0, 4, 5, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            final BlockState debug8 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true);
+            final BlockState debug8 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true); // MagmaCube - decompile fix
             this.generateBox(debug1, debug5, 0, 2, 0, 0, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 4, 2, 0, 4, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 0, 3, 1, 0, 4, 1, debug8, debug8, false);
@@ -1028,8 +1028,8 @@ public class NetherBridgePieces
         public boolean postProcess(final WorldGenLevel debug1, final StructureFeatureManager debug2, final ChunkGenerator debug3, final Random debug4, final BoundingBox debug5, final ChunkPos debug6, final BlockPos debug7) {
             this.generateBox(debug1, debug5, 0, 0, 0, 4, 1, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 0, 2, 0, 4, 5, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            final BlockState debug8 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true)).setValue((Property<Comparable>)FenceBlock.EAST, true);
-            final BlockState debug9 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true);
+            final BlockState debug8 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
+            final BlockState debug9 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true); // MagmaCube - decompile fix
             this.generateBox(debug1, debug5, 0, 2, 0, 0, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 0, 3, 1, 0, 4, 1, debug9, debug9, false);
             this.generateBox(debug1, debug5, 0, 3, 3, 0, 4, 3, debug9, debug9, false);
@@ -1090,8 +1090,8 @@ public class NetherBridgePieces
         public boolean postProcess(final WorldGenLevel debug1, final StructureFeatureManager debug2, final ChunkGenerator debug3, final Random debug4, final BoundingBox debug5, final ChunkPos debug6, final BlockPos debug7) {
             this.generateBox(debug1, debug5, 0, 0, 0, 4, 1, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 0, 2, 0, 4, 5, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            final BlockState debug8 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true)).setValue((Property<Comparable>)FenceBlock.EAST, true);
-            final BlockState debug9 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true);
+            final BlockState debug8 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
+            final BlockState debug9 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true); // MagmaCube - decompile fix
             this.generateBox(debug1, debug5, 4, 2, 0, 4, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 4, 3, 1, 4, 4, 1, debug9, debug9, false);
             this.generateBox(debug1, debug5, 4, 3, 3, 4, 4, 3, debug9, debug9, false);
@@ -1140,8 +1140,8 @@ public class NetherBridgePieces
         
         @Override
         public boolean postProcess(final WorldGenLevel debug1, final StructureFeatureManager debug2, final ChunkGenerator debug3, final Random debug4, final BoundingBox debug5, final ChunkPos debug6, final BlockPos debug7) {
-            final BlockState debug8 = ((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.SOUTH);
-            final BlockState debug9 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true);
+            final BlockState debug8 = (Blocks.NETHER_BRICK_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.SOUTH); // MagmaCube - decompile fix
+            final BlockState debug9 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true); // MagmaCube - decompile fix
             for (int debug10 = 0; debug10 <= 9; ++debug10) {
                 final int debug11 = Math.max(1, 7 - debug10);
                 final int debug12 = Math.min(Math.max(debug11 + 5, 14 - debug10), 13);
@@ -1201,8 +1201,8 @@ public class NetherBridgePieces
         
         @Override
         public boolean postProcess(final WorldGenLevel debug1, final StructureFeatureManager debug2, final ChunkGenerator debug3, final Random debug4, final BoundingBox debug5, final ChunkPos debug6, final BlockPos debug7) {
-            final BlockState debug8 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true);
-            final BlockState debug9 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true)).setValue((Property<Comparable>)FenceBlock.EAST, true);
+            final BlockState debug8 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true); // MagmaCube - decompile fix
+            final BlockState debug9 = ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
             this.generateBox(debug1, debug5, 0, 0, 0, 8, 1, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 0, 2, 0, 8, 5, 8, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 0, 6, 0, 8, 6, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
@@ -1214,8 +1214,8 @@ public class NetherBridgePieces
             this.generateBox(debug1, debug5, 1, 1, 4, 2, 2, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 6, 1, 4, 7, 2, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 1, 3, 8, 7, 3, 8, debug9, debug9, false);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.EAST, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true), 0, 3, 8, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true), 8, 3, 8, debug5);
+            this.placeBlock(debug1, ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.EAST, true)).setValue(FenceBlock.SOUTH, true), 0, 3, 8, debug5); // MagmaCube - decompile fix
+            this.placeBlock(debug1, ((Blocks.NETHER_BRICK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true)).setValue(FenceBlock.SOUTH, true), 8, 3, 8, debug5); // MagmaCube - decompile fix
             this.generateBox(debug1, debug5, 0, 3, 6, 0, 3, 7, debug8, debug8, false);
             this.generateBox(debug1, debug5, 8, 3, 6, 8, 3, 7, debug8, debug8, false);
             this.generateBox(debug1, debug5, 0, 3, 4, 0, 5, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/PoolElementStructurePiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/PoolElementStructurePiece.java
index 9d1657aa143309fe6188f513cf521a23c8a90b18..e91b6adc3c215f9423813772a22e84f8ffec9a2b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/PoolElementStructurePiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/PoolElementStructurePiece.java
@@ -37,7 +37,7 @@ public class PoolElementStructurePiece extends StructurePiece
     
     public PoolElementStructurePiece(final StructureManager debug1, final StructurePoolElement debug2, final BlockPos debug3, final int debug4, final Rotation debug5, final BoundingBox debug6) {
         super(StructurePieceType.JIGSAW, 0);
-        this.junctions = (List<JigsawJunction>)Lists.newArrayList();
+        this.junctions = Lists.newArrayList(); // MagmaCube - decompile fix
         this.structureManager = debug1;
         this.element = debug2;
         this.position = debug3;
@@ -48,16 +48,16 @@ public class PoolElementStructurePiece extends StructurePiece
     
     public PoolElementStructurePiece(final StructureManager debug1, final CompoundTag debug2) {
         super(StructurePieceType.JIGSAW, debug2);
-        this.junctions = (List<JigsawJunction>)Lists.newArrayList();
+        this.junctions = Lists.newArrayList(); // MagmaCube - decompile fix
         this.structureManager = debug1;
         this.position = new BlockPos(debug2.getInt("PosX"), debug2.getInt("PosY"), debug2.getInt("PosZ"));
         this.groundLevelDelta = debug2.getInt("ground_level_delta");
-        this.element = StructurePoolElement.CODEC.parse((DynamicOps)NbtOps.INSTANCE, (Object)debug2.getCompound("pool_element")).resultOrPartial((Consumer)PoolElementStructurePiece.LOGGER::error).orElse(EmptyPoolElement.INSTANCE);
+        this.element = StructurePoolElement.CODEC.parse(NbtOps.INSTANCE, debug2.getCompound("pool_element")).resultOrPartial(PoolElementStructurePiece.LOGGER::error).orElse(EmptyPoolElement.INSTANCE); // MagmaCube - decompile fix
         this.rotation = Rotation.valueOf(debug2.getString("rotation"));
         this.boundingBox = this.element.getBoundingBox(debug1, this.position, this.rotation);
         final ListTag debug3 = debug2.getList("junctions", 10);
         this.junctions.clear();
-        debug3.forEach(debug1 -> this.junctions.add(JigsawJunction.deserialize((com.mojang.serialization.Dynamic<Object>)new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug1))));
+        debug3.forEach(debug1l -> this.junctions.add(JigsawJunction.deserialize(new Dynamic<>(NbtOps.INSTANCE, debug1l)))); // MagmaCube - decompile fix
     }
     
     @Override
@@ -66,11 +66,11 @@ public class PoolElementStructurePiece extends StructurePiece
         debug1.putInt("PosY", this.position.getY());
         debug1.putInt("PosZ", this.position.getZ());
         debug1.putInt("ground_level_delta", this.groundLevelDelta);
-        StructurePoolElement.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, (Object)this.element).resultOrPartial((Consumer)PoolElementStructurePiece.LOGGER::error).ifPresent(debug1 -> debug1.put("pool_element", debug1));
+        StructurePoolElement.CODEC.encodeStart(NbtOps.INSTANCE, this.element).resultOrPartial(PoolElementStructurePiece.LOGGER::error).ifPresent(debug1l -> debug1.put("pool_element", debug1l)); // MagmaCube - decompile fix
         debug1.putString("rotation", this.rotation.name());
         final ListTag debug2 = new ListTag();
         for (final JigsawJunction debug3 : this.junctions) {
-            debug2.add((Tag)debug3.serialize((com.mojang.serialization.DynamicOps<Object>)NbtOps.INSTANCE).getValue());
+            debug2.add((Tag)debug3.serialize(NbtOps.INSTANCE).getValue()); // MagmaCube - decompile fix
         }
         debug1.put("junctions", debug2);
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java
index 5be21040d911978970a486ab06b9978a795cd2d8..ccd5a189b02cab33469ba7f9343bffeb14ba8863 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java
@@ -104,7 +104,7 @@ extends TemplateStructurePiece {
         debug12.putString("Rotation", this.rotation.name());
         debug12.putString("Mirror", this.mirror.name());
         debug12.putString("VerticalPlacement", this.verticalPlacement.getName());
-        Properties.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, (Object)this.properties).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("Properties", (Tag)debug1));
+        Properties.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, this.properties).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("Properties", (Tag)debug1)); // MagmaCube - decompile fix
     }
 
     private void loadTemplate(StructureTemplate debug1, BlockPos debug2) {
@@ -290,7 +290,7 @@ extends TemplateStructurePiece {
     }
 
     public static class Properties {
-        public static final Codec<Properties> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)Codec.BOOL.fieldOf("cold").forGetter(debug0 -> debug0.cold), (App)Codec.FLOAT.fieldOf("mossiness").forGetter(debug0 -> Float.valueOf(debug0.mossiness)), (App)Codec.BOOL.fieldOf("air_pocket").forGetter(debug0 -> debug0.airPocket), (App)Codec.BOOL.fieldOf("overgrown").forGetter(debug0 -> debug0.overgrown), (App)Codec.BOOL.fieldOf("vines").forGetter(debug0 -> debug0.vines), (App)Codec.BOOL.fieldOf("replace_with_blackstone").forGetter(debug0 -> debug0.replaceWithBlackstone)).apply((Applicative)debug02, Properties::new));
+        public static final Codec<Properties> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Codec.BOOL.fieldOf("cold").forGetter(debug0 -> debug0.cold), Codec.FLOAT.fieldOf("mossiness").forGetter(debug0 -> Float.valueOf(debug0.mossiness)), Codec.BOOL.fieldOf("air_pocket").forGetter(debug0 -> debug0.airPocket), Codec.BOOL.fieldOf("overgrown").forGetter(debug0 -> debug0.overgrown), Codec.BOOL.fieldOf("vines").forGetter(debug0 -> debug0.vines), Codec.BOOL.fieldOf("replace_with_blackstone").forGetter(debug0 -> debug0.replaceWithBlackstone)).apply((Applicative)debug02, Properties::new)); // MagmaCube - decompile fix
         public boolean cold;
         public float mossiness = 0.2f;
         public boolean airPocket;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StrongholdPieces.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StrongholdPieces.java
index edf6b110e0764275c822d0ed7039102b2b82c5c2..4f4f2c6964dc553f13a54186730139784b8d9984 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StrongholdPieces.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StrongholdPieces.java
@@ -44,7 +44,7 @@ public class StrongholdPieces
     private static final SmoothStoneSelector SMOOTH_STONE_SELECTOR;
     
     public static void resetPieces() {
-        StrongholdPieces.currentPieces = (List<PieceWeight>)Lists.newArrayList();
+        StrongholdPieces.currentPieces = Lists.newArrayList();
         for (final PieceWeight debug3 : StrongholdPieces.STRONGHOLD_PIECE_WEIGHTS) {
             debug3.placeCount = 0;
             StrongholdPieces.currentPieces.add(debug3);
@@ -234,19 +234,19 @@ public class StrongholdPieces
                     this.placeBlock(debug1, Blocks.STONE_BRICKS.defaultBlockState(), debug5 + 2, debug6 + 1, debug7, debug3);
                     this.placeBlock(debug1, Blocks.STONE_BRICKS.defaultBlockState(), debug5 + 2, debug6, debug7, debug3);
                     this.placeBlock(debug1, Blocks.OAK_DOOR.defaultBlockState(), debug5 + 1, debug6, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.OAK_DOOR.defaultBlockState()).setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER), debug5 + 1, debug6 + 1, debug7, debug3);
+                    this.placeBlock(debug1, (Blocks.OAK_DOOR.defaultBlockState()).setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER), debug5 + 1, debug6 + 1, debug7, debug3);
                     break;
                 }
                 case GRATES: {
                     this.placeBlock(debug1, Blocks.CAVE_AIR.defaultBlockState(), debug5 + 1, debug6, debug7, debug3);
                     this.placeBlock(debug1, Blocks.CAVE_AIR.defaultBlockState(), debug5 + 1, debug6 + 1, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.WEST, true), debug5, debug6, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.WEST, true), debug5, debug6 + 1, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true)).setValue((Property<Comparable>)IronBarsBlock.WEST, true), debug5, debug6 + 2, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true)).setValue((Property<Comparable>)IronBarsBlock.WEST, true), debug5 + 1, debug6 + 2, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true)).setValue((Property<Comparable>)IronBarsBlock.WEST, true), debug5 + 2, debug6 + 2, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true), debug5 + 2, debug6 + 1, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true), debug5 + 2, debug6, debug7, debug3);
+                    this.placeBlock(debug1, (Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.WEST, true), debug5, debug6, debug7, debug3);
+                    this.placeBlock(debug1, (Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.WEST, true), debug5, debug6 + 1, debug7, debug3);
+                    this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true), debug5, debug6 + 2, debug7, debug3);
+                    this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true), debug5 + 1, debug6 + 2, debug7, debug3);
+                    this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true), debug5 + 2, debug6 + 2, debug7, debug3);
+                    this.placeBlock(debug1, (Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.EAST, true), debug5 + 2, debug6 + 1, debug7, debug3);
+                    this.placeBlock(debug1, (Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.EAST, true), debug5 + 2, debug6, debug7, debug3);
                     break;
                 }
                 case IRON_DOOR: {
@@ -258,9 +258,9 @@ public class StrongholdPieces
                     this.placeBlock(debug1, Blocks.STONE_BRICKS.defaultBlockState(), debug5 + 2, debug6 + 1, debug7, debug3);
                     this.placeBlock(debug1, Blocks.STONE_BRICKS.defaultBlockState(), debug5 + 2, debug6, debug7, debug3);
                     this.placeBlock(debug1, Blocks.IRON_DOOR.defaultBlockState(), debug5 + 1, debug6, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.IRON_DOOR.defaultBlockState()).setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER), debug5 + 1, debug6 + 1, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.STONE_BUTTON.defaultBlockState()).setValue((Property<Comparable>)ButtonBlock.FACING, Direction.NORTH), debug5 + 2, debug6 + 1, debug7 + 1, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.STONE_BUTTON.defaultBlockState()).setValue((Property<Comparable>)ButtonBlock.FACING, Direction.SOUTH), debug5 + 2, debug6 + 1, debug7 - 1, debug3);
+                    this.placeBlock(debug1, (Blocks.IRON_DOOR.defaultBlockState()).setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER), debug5 + 1, debug6 + 1, debug7, debug3);
+                    this.placeBlock(debug1, (Blocks.STONE_BUTTON.defaultBlockState()).setValue(ButtonBlock.FACING, Direction.NORTH), debug5 + 2, debug6 + 1, debug7 + 1, debug3);
+                    this.placeBlock(debug1, (Blocks.STONE_BUTTON.defaultBlockState()).setValue(ButtonBlock.FACING, Direction.SOUTH), debug5 + 2, debug6 + 1, debug7 - 1, debug3);
                     break;
                 }
             }
@@ -519,12 +519,12 @@ public class StrongholdPieces
         
         public StartPiece(final Random debug1, final int debug2, final int debug3) {
             super(StructurePieceType.STRONGHOLD_START, 0, debug1, debug2, debug3);
-            this.pendingChildren = (List<StructurePiece>)Lists.newArrayList();
+            this.pendingChildren = Lists.newArrayList();
         }
         
         public StartPiece(final StructureManager debug1, final CompoundTag debug2) {
             super(StructurePieceType.STRONGHOLD_START, debug2);
-            this.pendingChildren = (List<StructurePiece>)Lists.newArrayList();
+            this.pendingChildren = Lists.newArrayList();
         }
     }
     
@@ -579,8 +579,8 @@ public class StrongholdPieces
             this.generateBox(debug1, debug5, 0, 0, 0, 4, 4, 6, true, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateSmallDoor(debug1, debug4, debug5, this.entryDoor, 1, 1, 0);
             this.generateSmallDoor(debug1, debug4, debug5, SmallDoorType.OPENING, 1, 1, 6);
-            final BlockState debug8 = ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.EAST);
-            final BlockState debug9 = ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.WEST);
+            final BlockState debug8 = (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.EAST); // MagmaCube - decompile fix
+            final BlockState debug9 = (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.WEST); // MagmaCube - decompile fix
             this.maybeGenerateBlock(debug1, debug5, debug4, 0.1f, 1, 2, 1, debug8);
             this.maybeGenerateBlock(debug1, debug5, debug4, 0.1f, 3, 2, 1, debug9);
             this.maybeGenerateBlock(debug1, debug5, debug4, 0.1f, 1, 2, 5, debug8);
@@ -682,7 +682,7 @@ public class StrongholdPieces
             this.generateBox(debug1, debug5, 0, 0, 0, 4, 10, 7, true, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateSmallDoor(debug1, debug4, debug5, this.entryDoor, 1, 7, 0);
             this.generateSmallDoor(debug1, debug4, debug5, SmallDoorType.OPENING, 1, 1, 7);
-            final BlockState debug8 = ((StateHolder<O, BlockState>)Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.SOUTH);
+            final BlockState debug8 = (Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.SOUTH); // MagmaCube - decompile fix
             for (int debug9 = 0; debug9 < 6; ++debug9) {
                 this.placeBlock(debug1, debug8, 1, 6 - debug9, 1 + debug9, debug5);
                 this.placeBlock(debug1, debug8, 2, 6 - debug9, 1 + debug9, debug5);
@@ -852,10 +852,10 @@ public class StrongholdPieces
                     this.placeBlock(debug1, Blocks.STONE_BRICKS.defaultBlockState(), 5, 1, 5, debug5);
                     this.placeBlock(debug1, Blocks.STONE_BRICKS.defaultBlockState(), 5, 2, 5, debug5);
                     this.placeBlock(debug1, Blocks.STONE_BRICKS.defaultBlockState(), 5, 3, 5, debug5);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.WEST), 4, 3, 5, debug5);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.EAST), 6, 3, 5, debug5);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.SOUTH), 5, 3, 4, debug5);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.NORTH), 5, 3, 6, debug5);
+                    this.placeBlock(debug1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.WEST), 4, 3, 5, debug5); // MagmaCube - decompile fix
+                    this.placeBlock(debug1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.EAST), 6, 3, 5, debug5); // MagmaCube - decompile fix
+                    this.placeBlock(debug1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.SOUTH), 5, 3, 4, debug5); // MagmaCube - decompile fix
+                    this.placeBlock(debug1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.NORTH), 5, 3, 6, debug5); // MagmaCube - decompile fix
                     this.placeBlock(debug1, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 4, 1, 4, debug5);
                     this.placeBlock(debug1, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 4, 1, 5, debug5);
                     this.placeBlock(debug1, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 4, 1, 6, debug5);
@@ -914,7 +914,7 @@ public class StrongholdPieces
                         this.placeBlock(debug1, Blocks.OAK_PLANKS.defaultBlockState(), 7, 3, debug8, debug5);
                         this.placeBlock(debug1, Blocks.OAK_PLANKS.defaultBlockState(), 8, 3, debug8, debug5);
                     }
-                    final BlockState debug9 = ((StateHolder<O, BlockState>)Blocks.LADDER.defaultBlockState()).setValue((Property<Comparable>)LadderBlock.FACING, Direction.WEST);
+                    final BlockState debug9 = (Blocks.LADDER.defaultBlockState()).setValue(LadderBlock.FACING, Direction.WEST); // MagmaCube - decompile fix
                     this.placeBlock(debug1, debug9, 9, 1, 3, debug5);
                     this.placeBlock(debug1, debug9, 9, 2, 3, debug5);
                     this.placeBlock(debug1, debug9, 9, 3, 3, debug5);
@@ -962,17 +962,19 @@ public class StrongholdPieces
             this.generateBox(debug1, debug5, 4, 1, 7, 4, 3, 7, false, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateBox(debug1, debug5, 4, 1, 9, 4, 3, 9, false, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             for (int debug8 = 1; debug8 <= 3; ++debug8) {
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true), 4, debug8, 4, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true)).setValue((Property<Comparable>)IronBarsBlock.EAST, true), 4, debug8, 5, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true), 4, debug8, 6, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.WEST, true)).setValue((Property<Comparable>)IronBarsBlock.EAST, true), 5, debug8, 5, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.WEST, true)).setValue((Property<Comparable>)IronBarsBlock.EAST, true), 6, debug8, 5, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.WEST, true)).setValue((Property<Comparable>)IronBarsBlock.EAST, true), 7, debug8, 5, debug5);
-            }
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true), 4, 3, 2, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true), 4, 3, 8, debug5);
-            final BlockState debug9 = ((StateHolder<O, BlockState>)Blocks.IRON_DOOR.defaultBlockState()).setValue((Property<Comparable>)DoorBlock.FACING, Direction.WEST);
-            final BlockState debug10 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_DOOR.defaultBlockState()).setValue((Property<Comparable>)DoorBlock.FACING, Direction.WEST)).setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER);
+                // MagmaCube start - decompile fix
+                this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, debug8, 4, debug5);
+                this.placeBlock(debug1, (((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true)).setValue(IronBarsBlock.EAST, true), 4, debug8, 5, debug5);
+                this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, debug8, 6, debug5);
+                this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true), 5, debug8, 5, debug5);
+                this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true), 6, debug8, 5, debug5);
+                this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true), 7, debug8, 5, debug5);
+            }
+            this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, 3, 2, debug5);
+            this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, 3, 8, debug5);
+            final BlockState debug9 = (Blocks.IRON_DOOR.defaultBlockState()).setValue(DoorBlock.FACING, Direction.WEST);
+            final BlockState debug10 = ((Blocks.IRON_DOOR.defaultBlockState()).setValue(DoorBlock.FACING, Direction.WEST)).setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER);
+            // MagmaCube end - decompile fix
             this.placeBlock(debug1, debug9, 4, 1, 2, debug5);
             this.placeBlock(debug1, debug10, 4, 2, 2, debug5);
             this.placeBlock(debug1, debug9, 4, 1, 8, debug5);
@@ -1030,8 +1032,8 @@ public class StrongholdPieces
                 if ((debug11 - 1) % 4 == 0) {
                     this.generateBox(debug1, debug5, 1, 1, debug11, 1, 4, debug11, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
                     this.generateBox(debug1, debug5, 12, 1, debug11, 12, 4, debug11, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.EAST), 2, 3, debug11, debug5);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.WEST), 11, 3, debug11, debug5);
+                    this.placeBlock(debug1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.EAST), 2, 3, debug11, debug5);
+                    this.placeBlock(debug1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.WEST), 11, 3, debug11, debug5);
                     if (this.isTall) {
                         this.generateBox(debug1, debug5, 1, 6, debug11, 1, 9, debug11, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
                         this.generateBox(debug1, debug5, 12, 6, debug11, 12, 9, debug11, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
@@ -1059,22 +1061,22 @@ public class StrongholdPieces
                 this.placeBlock(debug1, Blocks.OAK_PLANKS.defaultBlockState(), 9, 5, 11, debug5);
                 this.placeBlock(debug1, Blocks.OAK_PLANKS.defaultBlockState(), 8, 5, 11, debug5);
                 this.placeBlock(debug1, Blocks.OAK_PLANKS.defaultBlockState(), 9, 5, 10, debug5);
-                final BlockState debug12 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true)).setValue((Property<Comparable>)FenceBlock.EAST, true);
-                final BlockState debug13 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true);
+                final BlockState debug12 = ((Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
+                final BlockState debug13 = ((Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true); // MagmaCube - decompile fix
                 this.generateBox(debug1, debug5, 3, 6, 3, 3, 6, 11, debug13, debug13, false);
                 this.generateBox(debug1, debug5, 10, 6, 3, 10, 6, 9, debug13, debug13, false);
                 this.generateBox(debug1, debug5, 4, 6, 2, 9, 6, 2, debug12, debug12, false);
                 this.generateBox(debug1, debug5, 4, 6, 12, 7, 6, 12, debug12, debug12, false);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.EAST, true), 3, 6, 2, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.SOUTH, true)).setValue((Property<Comparable>)FenceBlock.EAST, true), 3, 6, 12, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.WEST, true), 10, 6, 2, debug5);
+                this.placeBlock(debug1, ((Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 3, 6, 2, debug5); // MagmaCube - decompile fix
+                this.placeBlock(debug1, ((Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.EAST, true), 3, 6, 12, debug5); // MagmaCube - decompile fix
+                this.placeBlock(debug1, ((Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.WEST, true), 10, 6, 2, debug5); // MagmaCube - decompile fix
                 for (int debug14 = 0; debug14 <= 2; ++debug14) {
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.SOUTH, true)).setValue((Property<Comparable>)FenceBlock.WEST, true), 8 + debug14, 6, 12 - debug14, debug5);
+                    this.placeBlock(debug1, ((Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.WEST, true), 8 + debug14, 6, 12 - debug14, debug5); // MagmaCube - decompile fix
                     if (debug14 != 2) {
-                        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.EAST, true), 8 + debug14, 6, 11 - debug14, debug5);
+                        this.placeBlock(debug1, ((Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 8 + debug14, 6, 11 - debug14, debug5); // MagmaCube - decompile fix
                     }
                 }
-                final BlockState debug15 = ((StateHolder<O, BlockState>)Blocks.LADDER.defaultBlockState()).setValue((Property<Comparable>)LadderBlock.FACING, Direction.SOUTH);
+                final BlockState debug15 = (Blocks.LADDER.defaultBlockState()).setValue(LadderBlock.FACING, Direction.SOUTH); // MagmaCube - decompile fix
                 this.placeBlock(debug1, debug15, 10, 1, 13, debug5);
                 this.placeBlock(debug1, debug15, 10, 2, 13, debug5);
                 this.placeBlock(debug1, debug15, 10, 3, 13, debug5);
@@ -1084,21 +1086,23 @@ public class StrongholdPieces
                 this.placeBlock(debug1, debug15, 10, 7, 13, debug5);
                 final int debug16 = 7;
                 final int debug17 = 7;
-                final BlockState debug18 = ((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.EAST, true);
+                final BlockState debug18 = (Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
                 this.placeBlock(debug1, debug18, 6, 9, 7, debug5);
-                final BlockState debug19 = ((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true);
+                final BlockState debug19 = (Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true); // MagmaCube - decompile fix
                 this.placeBlock(debug1, debug19, 7, 9, 7, debug5);
                 this.placeBlock(debug1, debug18, 6, 8, 7, debug5);
                 this.placeBlock(debug1, debug19, 7, 8, 7, debug5);
-                final BlockState debug20 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug13).setValue((Property<Comparable>)FenceBlock.WEST, true)).setValue((Property<Comparable>)FenceBlock.EAST, true);
+                final BlockState debug20 = ((debug13).setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
                 this.placeBlock(debug1, debug20, 6, 7, 7, debug5);
                 this.placeBlock(debug1, debug20, 7, 7, 7, debug5);
                 this.placeBlock(debug1, debug18, 5, 7, 7, debug5);
                 this.placeBlock(debug1, debug19, 8, 7, 7, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug18).setValue((Property<Comparable>)FenceBlock.NORTH, true), 6, 7, 6, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug18).setValue((Property<Comparable>)FenceBlock.SOUTH, true), 6, 7, 8, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug19).setValue((Property<Comparable>)FenceBlock.NORTH, true), 7, 7, 6, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug19).setValue((Property<Comparable>)FenceBlock.SOUTH, true), 7, 7, 8, debug5);
+                // MagmaCube start - decompile fix
+                this.placeBlock(debug1, (debug18).setValue(FenceBlock.NORTH, true), 6, 7, 6, debug5);
+                this.placeBlock(debug1, (debug18).setValue(FenceBlock.SOUTH, true), 6, 7, 8, debug5);
+                this.placeBlock(debug1, (debug19).setValue(FenceBlock.NORTH, true), 7, 7, 6, debug5);
+                this.placeBlock(debug1, (debug19).setValue(FenceBlock.SOUTH, true), 7, 7, 8, debug5);
+                // MagmaCube end - decompile fix
                 final BlockState debug21 = Blocks.TORCH.defaultBlockState();
                 this.placeBlock(debug1, debug21, 5, 8, 7, debug5);
                 this.placeBlock(debug1, debug21, 8, 8, 7, debug5);
@@ -1212,8 +1216,8 @@ public class StrongholdPieces
             this.generateBox(debug1, debug5, 5, 2, 7, 7, 2, 7, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 4, 5, 7, 4, 5, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 8, 5, 7, 8, 5, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
-            this.generateBox(debug1, debug5, 5, 5, 7, 7, 5, 9, ((StateHolder<O, BlockState>)Blocks.SMOOTH_STONE_SLAB.defaultBlockState()).setValue(SlabBlock.TYPE, SlabType.DOUBLE), ((StateHolder<O, BlockState>)Blocks.SMOOTH_STONE_SLAB.defaultBlockState()).setValue(SlabBlock.TYPE, SlabType.DOUBLE), false);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.SOUTH), 6, 5, 6, debug5);
+            this.generateBox(debug1, debug5, 5, 5, 7, 7, 5, 9, (Blocks.SMOOTH_STONE_SLAB.defaultBlockState()).setValue(SlabBlock.TYPE, SlabType.DOUBLE), (Blocks.SMOOTH_STONE_SLAB.defaultBlockState()).setValue(SlabBlock.TYPE, SlabType.DOUBLE), false); // MagmaCube - decompile fix
+            this.placeBlock(debug1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.SOUTH), 6, 5, 6, debug5); // MagmaCube - decompile fix
             return true;
         }
     }
@@ -1269,8 +1273,8 @@ public class StrongholdPieces
             this.generateBox(debug1, debug5, 9, 1, 1, 9, 1, 3, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 3, 1, 8, 7, 1, 12, false, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateBox(debug1, debug5, 4, 1, 9, 6, 1, 11, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
-            final BlockState debug9 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true);
-            final BlockState debug10 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.WEST, true)).setValue((Property<Comparable>)IronBarsBlock.EAST, true);
+            final BlockState debug9 = ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true); // MagmaCube - decompile fix
+            final BlockState debug10 = ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true); // MagmaCube - decompile fix
             for (int debug11 = 3; debug11 < 14; debug11 += 2) {
                 this.generateBox(debug1, debug5, 0, 3, debug11, 0, 4, debug11, debug9, debug9, false);
                 this.generateBox(debug1, debug5, 10, 3, debug11, 10, 4, debug11, debug9, debug9, false);
@@ -1278,7 +1282,7 @@ public class StrongholdPieces
             for (int debug11 = 2; debug11 < 9; debug11 += 2) {
                 this.generateBox(debug1, debug5, debug11, 3, 15, debug11, 4, 15, debug10, debug10, false);
             }
-            final BlockState debug12 = ((StateHolder<O, BlockState>)Blocks.STONE_BRICK_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.NORTH);
+            final BlockState debug12 = (Blocks.STONE_BRICK_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.NORTH); // MagmaCube - decompile fix
             this.generateBox(debug1, debug5, 4, 1, 5, 6, 1, 7, false, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateBox(debug1, debug5, 4, 2, 6, 6, 2, 7, false, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateBox(debug1, debug5, 4, 3, 7, 6, 3, 7, false, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
@@ -1287,28 +1291,32 @@ public class StrongholdPieces
                 this.placeBlock(debug1, debug12, debug13, 2, 5, debug5);
                 this.placeBlock(debug1, debug12, debug13, 3, 6, debug5);
             }
-            final BlockState debug14 = ((StateHolder<O, BlockState>)Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue((Property<Comparable>)EndPortalFrameBlock.FACING, Direction.NORTH);
-            final BlockState debug15 = ((StateHolder<O, BlockState>)Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue((Property<Comparable>)EndPortalFrameBlock.FACING, Direction.SOUTH);
-            final BlockState debug16 = ((StateHolder<O, BlockState>)Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue((Property<Comparable>)EndPortalFrameBlock.FACING, Direction.EAST);
-            final BlockState debug17 = ((StateHolder<O, BlockState>)Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue((Property<Comparable>)EndPortalFrameBlock.FACING, Direction.WEST);
+            // MagmaCube start - decompile fix
+            final BlockState debug14 = (Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue(EndPortalFrameBlock.FACING, Direction.NORTH);
+            final BlockState debug15 = (Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue(EndPortalFrameBlock.FACING, Direction.SOUTH);
+            final BlockState debug16 = (Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue(EndPortalFrameBlock.FACING, Direction.EAST);
+            final BlockState debug17 = (Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue(EndPortalFrameBlock.FACING, Direction.WEST);
+            // MagmaCube end - decompile fix
             boolean debug18 = true;
             final boolean[] debug19 = new boolean[12];
             for (int debug20 = 0; debug20 < debug19.length; ++debug20) {
                 debug19[debug20] = (debug4.nextFloat() > 0.9f);
                 debug18 &= debug19[debug20];
             }
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug14).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[0]), 4, 3, 8, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug14).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[1]), 5, 3, 8, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug14).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[2]), 6, 3, 8, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug15).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[3]), 4, 3, 12, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug15).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[4]), 5, 3, 12, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug15).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[5]), 6, 3, 12, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug16).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[6]), 3, 3, 9, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug16).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[7]), 3, 3, 10, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug16).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[8]), 3, 3, 11, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug17).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[9]), 7, 3, 9, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug17).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[10]), 7, 3, 10, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug17).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[11]), 7, 3, 11, debug5);
+            // MagmaCube start - decompile fix
+            this.placeBlock(debug1, (debug14).setValue(EndPortalFrameBlock.HAS_EYE, debug19[0]), 4, 3, 8, debug5);
+            this.placeBlock(debug1, (debug14).setValue(EndPortalFrameBlock.HAS_EYE, debug19[1]), 5, 3, 8, debug5);
+            this.placeBlock(debug1, (debug14).setValue(EndPortalFrameBlock.HAS_EYE, debug19[2]), 6, 3, 8, debug5);
+            this.placeBlock(debug1, (debug15).setValue(EndPortalFrameBlock.HAS_EYE, debug19[3]), 4, 3, 12, debug5);
+            this.placeBlock(debug1, (debug15).setValue(EndPortalFrameBlock.HAS_EYE, debug19[4]), 5, 3, 12, debug5);
+            this.placeBlock(debug1, (debug15).setValue(EndPortalFrameBlock.HAS_EYE, debug19[5]), 6, 3, 12, debug5);
+            this.placeBlock(debug1, (debug16).setValue(EndPortalFrameBlock.HAS_EYE, debug19[6]), 3, 3, 9, debug5);
+            this.placeBlock(debug1, (debug16).setValue(EndPortalFrameBlock.HAS_EYE, debug19[7]), 3, 3, 10, debug5);
+            this.placeBlock(debug1, (debug16).setValue(EndPortalFrameBlock.HAS_EYE, debug19[8]), 3, 3, 11, debug5);
+            this.placeBlock(debug1, (debug17).setValue(EndPortalFrameBlock.HAS_EYE, debug19[9]), 7, 3, 9, debug5);
+            this.placeBlock(debug1, (debug17).setValue(EndPortalFrameBlock.HAS_EYE, debug19[10]), 7, 3, 10, debug5);
+            this.placeBlock(debug1, (debug17).setValue(EndPortalFrameBlock.HAS_EYE, debug19[11]), 7, 3, 11, debug5);
+            // MagmaCube end - decompile fix
             if (debug18) {
                 final BlockState debug21 = Blocks.END_PORTAL.defaultBlockState();
                 this.placeBlock(debug1, debug21, 4, 3, 9, debug5);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
index ee705a660b19afbad68c1542c795fb91b887091c..7f9e72e79e4638b8eff2c5f8d69ac63027485311 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
@@ -361,7 +361,7 @@ public abstract class StructurePiece
             debug3 = debug4;
         }
         if (debug3 != null) {
-            return ((StateHolder<O, BlockState>)debug2).setValue((Property<Comparable>)HorizontalDirectionalBlock.FACING, debug3.getOpposite());
+            return (debug2).setValue(HorizontalDirectionalBlock.FACING, debug3.getOpposite()); // MagmaCube - decompile fix
         }
         Direction debug7 = debug2.getValue((Property<Direction>)HorizontalDirectionalBlock.FACING);
         BlockPos debug8 = debug1.relative(debug7);
@@ -377,7 +377,7 @@ public abstract class StructurePiece
             debug7 = debug7.getOpposite();
             debug8 = debug1.relative(debug7);
         }
-        return ((StateHolder<O, BlockState>)debug2).setValue((Property<Comparable>)HorizontalDirectionalBlock.FACING, debug7);
+        return (debug2).setValue(HorizontalDirectionalBlock.FACING, debug7); // MagmaCube - decompile fix
     }
     
     protected boolean createChest(final ServerLevelAccessor debug1, final BoundingBox debug2, final Random debug3, final BlockPos debug4, final ResourceLocation debug5, @Nullable BlockState debug6) {
@@ -398,7 +398,7 @@ public abstract class StructurePiece
     protected boolean createDispenser(final WorldGenLevel debug1, final BoundingBox debug2, final Random debug3, final int debug4, final int debug5, final int debug6, final Direction debug7, final ResourceLocation debug8) {
         final BlockPos debug9 = new BlockPos(this.getWorldX(debug4, debug6), this.getWorldY(debug5), this.getWorldZ(debug4, debug6));
         if (debug2.isInside(debug9) && !debug1.getBlockState(debug9).is(Blocks.DISPENSER)) {
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.DISPENSER.defaultBlockState()).setValue((Property<Comparable>)DispenserBlock.FACING, debug7), debug4, debug5, debug6, debug2);
+            this.placeBlock(debug1, (Blocks.DISPENSER.defaultBlockState()).setValue(DispenserBlock.FACING, debug7), debug4, debug5, debug6, debug2); // MagmaCube - decompile fix
             final BlockEntity debug10 = debug1.getBlockEntity(debug9);
             if (debug10 instanceof DispenserBlockEntity) {
                 ((DispenserBlockEntity)debug10).setLootTable(debug8, debug3.nextLong());
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/SwamplandHutPiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/SwamplandHutPiece.java
index 8cbec8302ade49a4c43d8773f1eeb3c5f699d378..c7ebcfc39848daf6876f41561ac8becddfad1f2a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/SwamplandHutPiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/SwamplandHutPiece.java
@@ -75,18 +75,18 @@ public class SwamplandHutPiece extends ScatteredFeaturePiece
         this.placeBlock(debug1, Blocks.CAULDRON.defaultBlockState(), 4, 2, 6, debug5);
         this.placeBlock(debug1, Blocks.OAK_FENCE.defaultBlockState(), 1, 2, 1, debug5);
         this.placeBlock(debug1, Blocks.OAK_FENCE.defaultBlockState(), 5, 2, 1, debug5);
-        final BlockState debug8 = ((StateHolder<O, BlockState>)Blocks.SPRUCE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.NORTH);
-        final BlockState debug9 = ((StateHolder<O, BlockState>)Blocks.SPRUCE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.EAST);
-        final BlockState debug10 = ((StateHolder<O, BlockState>)Blocks.SPRUCE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.WEST);
-        final BlockState debug11 = ((StateHolder<O, BlockState>)Blocks.SPRUCE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.SOUTH);
+        final BlockState debug8 = ((Blocks.SPRUCE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.NORTH)); // MagmaCube - decompile fix
+        final BlockState debug9 = ((Blocks.SPRUCE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.EAST)); // MagmaCube - decompile fix
+        final BlockState debug10 = ((Blocks.SPRUCE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.WEST)); // MagmaCube - decompile fix
+        final BlockState debug11 = ((Blocks.SPRUCE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.SOUTH)); // MagmaCube - decompile fix
         this.generateBox(debug1, debug5, 0, 4, 1, 6, 4, 1, debug8, debug8, false);
         this.generateBox(debug1, debug5, 0, 4, 2, 0, 4, 7, debug9, debug9, false);
         this.generateBox(debug1, debug5, 6, 4, 2, 6, 4, 7, debug10, debug10, false);
         this.generateBox(debug1, debug5, 0, 4, 8, 6, 4, 8, debug11, debug11, false);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug8).setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT), 0, 4, 1, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug8).setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT), 6, 4, 1, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug11).setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT), 0, 4, 8, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug11).setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT), 6, 4, 8, debug5);
+        this.placeBlock(debug1, ((debug8).setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT)), 0, 4, 1, debug5); // MagmaCube - decompile fix
+        this.placeBlock(debug1, ((debug8).setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT)), 6, 4, 1, debug5); // MagmaCube - decompile fix
+        this.placeBlock(debug1, ((debug11).setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT)), 0, 4, 8, debug5); // MagmaCube - decompile fix
+        this.placeBlock(debug1, ((debug11).setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT)), 6, 4, 8, debug5); // MagmaCube - decompile fix
         for (int debug12 = 2; debug12 <= 7; debug12 += 5) {
             for (int debug13 = 1; debug13 <= 5; debug13 += 4) {
                 this.fillColumnDown(debug1, Blocks.OAK_LOG.defaultBlockState(), debug13, -1, debug12, debug5);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/AxisAlignedLinearPosTest.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/AxisAlignedLinearPosTest.java
index ff3617a7b9c1fd5bfd2bbc06702fd86266b54594..f92ad82dbbbfc2462a6b0ab217d0e70e4b445083 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/AxisAlignedLinearPosTest.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/AxisAlignedLinearPosTest.java
@@ -46,6 +46,6 @@ public class AxisAlignedLinearPosTest extends PosRuleTest
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.FLOAT.fieldOf("min_chance").orElse((Object)0.0f).forGetter(debug0 -> debug0.minChance), (App)Codec.FLOAT.fieldOf("max_chance").orElse((Object)0.0f).forGetter(debug0 -> debug0.maxChance), (App)Codec.INT.fieldOf("min_dist").orElse((Object)0).forGetter(debug0 -> debug0.minDist), (App)Codec.INT.fieldOf("max_dist").orElse((Object)0).forGetter(debug0 -> debug0.maxDist), (App)Direction.Axis.CODEC.fieldOf("axis").orElse((Object)Direction.Axis.Y).forGetter(debug0 -> debug0.axis)).apply(debug0, AxisAlignedLinearPosTest::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.FLOAT.fieldOf("min_chance").orElse(0.0f).forGetter(debug0l -> debug0l.minChance), Codec.FLOAT.fieldOf("max_chance").orElse(0.0f).forGetter(debug0l -> debug0l.maxChance), Codec.INT.fieldOf("min_dist").orElse(0).forGetter(debug0l -> debug0l.minDist), Codec.INT.fieldOf("max_dist").orElse(0).forGetter(debug0l -> debug0l.maxDist), Direction.Axis.CODEC.fieldOf("axis").orElse(Direction.Axis.Y).forGetter(debug0l -> debug0l.axis)).apply(debug0, AxisAlignedLinearPosTest::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlackstoneReplaceProcessor.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlackstoneReplaceProcessor.java
index 8c6ec8ff1d08c5b789c92cadb11a624071e572ab..e886f6e6ecbaadb7bf67c61c716f0c70366e7390 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlackstoneReplaceProcessor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlackstoneReplaceProcessor.java
@@ -24,7 +24,7 @@ public class BlackstoneReplaceProcessor extends StructureProcessor
     private final Map<Block, Block> replacements;
     
     private BlackstoneReplaceProcessor() {
-        this.replacements = Util.make((Map<Block, Block>)Maps.newHashMap(), debug0 -> {
+        this.replacements = Util.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put(Blocks.COBBLESTONE, Blocks.BLACKSTONE);
             debug0.put(Blocks.MOSSY_COBBLESTONE, Blocks.BLACKSTONE);
             debug0.put(Blocks.STONE, Blocks.POLISHED_BLACKSTONE);
@@ -59,14 +59,14 @@ public class BlackstoneReplaceProcessor extends StructureProcessor
         }
         final BlockState debug8 = debug5.state;
         BlockState debug9 = debug7.defaultBlockState();
-        if (debug8.hasProperty((Property<Comparable>)StairBlock.FACING)) {
-            debug9 = ((StateHolder<O, BlockState>)debug9).setValue((Property<Comparable>)StairBlock.FACING, (Comparable)debug8.getValue((Property<V>)StairBlock.FACING));
+        if (debug8.hasProperty(StairBlock.FACING)) { // MagmaCube - decompile fix
+            debug9 = (debug9).setValue(StairBlock.FACING, debug8.getValue(StairBlock.FACING)); // MagmaCube - decompile fix
         }
         if (debug8.hasProperty(StairBlock.HALF)) {
-            debug9 = ((StateHolder<O, BlockState>)debug9).setValue(StairBlock.HALF, (Comparable)debug8.getValue((Property<V>)StairBlock.HALF));
+            debug9 = (debug9).setValue(StairBlock.HALF, debug8.getValue(StairBlock.HALF)); // MagmaCube - decompile fix
         }
         if (debug8.hasProperty(SlabBlock.TYPE)) {
-            debug9 = ((StateHolder<O, BlockState>)debug9).setValue(SlabBlock.TYPE, (Comparable)debug8.getValue((Property<V>)SlabBlock.TYPE));
+            debug9 = (debug9).setValue(SlabBlock.TYPE, debug8.getValue(SlabBlock.TYPE)); // MagmaCube - decompile fix
         }
         return new StructureTemplate.StructureBlockInfo(debug5.pos, debug9, debug5.nbt);
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockAgeProcessor.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockAgeProcessor.java
index 10e80c3294b2827e89490e0e4424f7c4e56ec6c5..0c644a374630d4efbe6217684182012bad760a45 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockAgeProcessor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockAgeProcessor.java
@@ -72,7 +72,7 @@ public class BlockAgeProcessor extends StructureProcessor
             return null;
         }
         final BlockState[] debug5 = { Blocks.STONE_SLAB.defaultBlockState(), Blocks.STONE_BRICK_SLAB.defaultBlockState() };
-        final BlockState[] debug6 = { ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.MOSSY_STONE_BRICK_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, debug3)).setValue(StairBlock.HALF, debug4), Blocks.MOSSY_STONE_BRICK_SLAB.defaultBlockState() };
+        final BlockState[] debug6 = { ((Blocks.MOSSY_STONE_BRICK_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, debug3)).setValue(StairBlock.HALF, debug4), Blocks.MOSSY_STONE_BRICK_SLAB.defaultBlockState() }; // MagmaCube - decompile fix
         return this.getRandomBlock(debug1, debug5, debug6);
     }
     
@@ -101,7 +101,7 @@ public class BlockAgeProcessor extends StructureProcessor
     }
     
     private static BlockState getRandomFacingStairs(final Random debug0, final Block debug1) {
-        return ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug1.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.Plane.HORIZONTAL.getRandomDirection(debug0))).setValue(StairBlock.HALF, Half.values()[debug0.nextInt(Half.values().length)]);
+        return ((debug1.defaultBlockState()).setValue(StairBlock.FACING, Direction.Plane.HORIZONTAL.getRandomDirection(debug0))).setValue(StairBlock.HALF, Half.values()[debug0.nextInt(Half.values().length)]); // MagmaCube - decompile fix
     }
     
     private BlockState getRandomBlock(final Random debug1, final BlockState[] debug2, final BlockState[] debug3) {
@@ -121,6 +121,6 @@ public class BlockAgeProcessor extends StructureProcessor
     }
     
     static {
-        CODEC = Codec.FLOAT.fieldOf("mossiness").xmap((Function)BlockAgeProcessor::new, debug0 -> debug0.mossiness).codec();
+        CODEC = Codec.FLOAT.fieldOf("mossiness").xmap(BlockAgeProcessor::new, debug0 -> debug0.mossiness).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockIgnoreProcessor.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockIgnoreProcessor.java
index 524ef2dc8f36c01d360e98c860945a826794c876..9a4290e0c36ebe40c57945d63829ccef594e8108 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockIgnoreProcessor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockIgnoreProcessor.java
@@ -40,9 +40,9 @@ public class BlockIgnoreProcessor extends StructureProcessor
     }
     
     static {
-        CODEC = BlockState.CODEC.xmap((Function)BlockBehaviour.BlockStateBase::getBlock, (Function)Block::defaultBlockState).listOf().fieldOf("blocks").xmap((Function)BlockIgnoreProcessor::new, debug0 -> debug0.toIgnore).codec();
-        STRUCTURE_BLOCK = new BlockIgnoreProcessor((List<Block>)ImmutableList.of((Object)Blocks.STRUCTURE_BLOCK));
-        AIR = new BlockIgnoreProcessor((List<Block>)ImmutableList.of((Object)Blocks.AIR));
-        STRUCTURE_AND_AIR = new BlockIgnoreProcessor((List<Block>)ImmutableList.of((Object)Blocks.AIR, (Object)Blocks.STRUCTURE_BLOCK));
+        CODEC = BlockState.CODEC.xmap(BlockBehaviour.BlockStateBase::getBlock, Block::defaultBlockState).listOf().fieldOf("blocks").xmap(BlockIgnoreProcessor::new, debug0 -> debug0.toIgnore).codec(); // MagmaCube - decompile fix
+        STRUCTURE_BLOCK = new BlockIgnoreProcessor((List<Block>)ImmutableList.of(Blocks.STRUCTURE_BLOCK)); // MagmaCube - decompile fix
+        AIR = new BlockIgnoreProcessor((List<Block>)ImmutableList.of(Blocks.AIR)); // MagmaCube - decompile fix
+        STRUCTURE_AND_AIR = new BlockIgnoreProcessor((List<Block>)ImmutableList.of(Blocks.AIR, Blocks.STRUCTURE_BLOCK)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockMatchTest.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockMatchTest.java
index 511da9013aceb952a93a6b718e3af833bb3d0b1a..21ae62ce97cfa7fffa87ce5a3237741b664a0869 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockMatchTest.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockMatchTest.java
@@ -27,6 +27,6 @@ public class BlockMatchTest extends RuleTest
     }
     
     static {
-        CODEC = Registry.BLOCK.fieldOf("block").xmap((Function)BlockMatchTest::new, debug0 -> debug0.block).codec();
+        CODEC = Registry.BLOCK.fieldOf("block").xmap(BlockMatchTest::new, debug0 -> debug0.block).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockRotProcessor.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockRotProcessor.java
index c7320101f0b7b295bad822d31c5a030e5ab2d59b..fe2be3637b46a68ca80ef0a730e6362133cc900d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockRotProcessor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockRotProcessor.java
@@ -32,6 +32,6 @@ public class BlockRotProcessor extends StructureProcessor
     }
     
     static {
-        CODEC = Codec.FLOAT.fieldOf("integrity").orElse((Object)1.0f).xmap((Function)BlockRotProcessor::new, debug0 -> debug0.integrity).codec();
+        CODEC = Codec.FLOAT.fieldOf("integrity").orElse(1.0f).xmap(BlockRotProcessor::new, debug0 -> debug0.integrity).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockStateMatchTest.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockStateMatchTest.java
index a6a722b54bd39070a71d3998684bfc7a160a6ed5..ea2e1da056acf6d4d7f6ccd3093cc76bbb60ee63 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockStateMatchTest.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/BlockStateMatchTest.java
@@ -25,6 +25,6 @@ public class BlockStateMatchTest extends RuleTest
     }
     
     static {
-        CODEC = BlockState.CODEC.fieldOf("block_state").xmap((Function)BlockStateMatchTest::new, debug0 -> debug0.blockState).codec();
+        CODEC = BlockState.CODEC.fieldOf("block_state").xmap(BlockStateMatchTest::new, debug0 -> debug0.blockState).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/GravityProcessor.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/GravityProcessor.java
index d02268ba87aa4baa6a8da621861f2e54ca1ab4f3..e75ad7926a307185ff8deaf9823d0991695ae4f4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/GravityProcessor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/GravityProcessor.java
@@ -51,6 +51,6 @@ public class GravityProcessor extends StructureProcessor
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Heightmap.Types.CODEC.fieldOf("heightmap").orElse((Object)Heightmap.Types.WORLD_SURFACE_WG).forGetter(debug0 -> debug0.heightmap), (App)Codec.INT.fieldOf("offset").orElse((Object)0).forGetter(debug0 -> debug0.offset)).apply(debug0, (BiFunction)GravityProcessor::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Heightmap.Types.CODEC.fieldOf("heightmap").orElse(Heightmap.Types.WORLD_SURFACE_WG).forGetter(debug0l -> debug0l.heightmap), Codec.INT.fieldOf("offset").orElse(0).forGetter(debug0l -> debug0l.offset)).apply(debug0, GravityProcessor::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/LinearPosTest.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/LinearPosTest.java
index c036bfb301260a29adae82021e4fcf5e88b6ef46..7cfee38087d1bb155ef735934709c60ee6bff2f8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/LinearPosTest.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/LinearPosTest.java
@@ -40,6 +40,6 @@ public class LinearPosTest extends PosRuleTest
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.FLOAT.fieldOf("min_chance").orElse((Object)0.0f).forGetter(debug0 -> debug0.minChance), (App)Codec.FLOAT.fieldOf("max_chance").orElse((Object)0.0f).forGetter(debug0 -> debug0.maxChance), (App)Codec.INT.fieldOf("min_dist").orElse((Object)0).forGetter(debug0 -> debug0.minDist), (App)Codec.INT.fieldOf("max_dist").orElse((Object)0).forGetter(debug0 -> debug0.maxDist)).apply(debug0, LinearPosTest::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.FLOAT.fieldOf("min_chance").orElse(0.0f).forGetter(debug0l -> debug0l.minChance), Codec.FLOAT.fieldOf("max_chance").orElse(0.0f).forGetter(debug0l -> debug0l.maxChance), Codec.INT.fieldOf("min_dist").orElse(0).forGetter(debug0l -> debug0l.minDist), Codec.INT.fieldOf("max_dist").orElse(0).forGetter(debug0l -> debug0l.maxDist)).apply(debug0, LinearPosTest::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTest.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTest.java
index 36ea8b63c638047a0c05d16dc24ff9985fdb3be1..9c66938e32971665e7278df066bf8476636e1454 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTest.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTest.java
@@ -15,6 +15,6 @@ public abstract class PosRuleTest
     protected abstract PosRuleTestType<?> getType();
     
     static {
-        CODEC = Registry.POS_RULE_TEST.dispatch("predicate_type", (Function)PosRuleTest::getType, (Function)PosRuleTestType::codec);
+        CODEC = Registry.POS_RULE_TEST.dispatch("predicate_type", PosRuleTest::getType, PosRuleTestType::codec); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestType.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestType.java
index f5474c980ffdcf7a1fa5aeff6567f685267c26c5..d272d8dd33be7353530701ecacae9978976d21a8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestType.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestType.java
@@ -11,7 +11,7 @@ public interface PosRuleTestType<P extends PosRuleTest>
     
     Codec<P> codec();
     
-    default <P extends PosRuleTest> PosRuleTestType<P> register(final String debug0, final Codec<P> debug1) {
+    static <P extends PosRuleTest> PosRuleTestType<P> register(final String debug0, final Codec<P> debug1) { // MagmaCube - decompile fix
         return Registry.register((Registry<? super PosRuleTestType<P>>)Registry.POS_RULE_TEST, debug0, () -> debug1);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule.java
index 1827aac0a926483941d6b59efdd715d2a7d7f6c1..b1bea495b1c0272cabefa308d36c8dfb234a2204 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule.java
@@ -51,6 +51,6 @@ public class ProcessorRule
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)RuleTest.CODEC.fieldOf("input_predicate").forGetter(debug0 -> debug0.inputPredicate), (App)RuleTest.CODEC.fieldOf("location_predicate").forGetter(debug0 -> debug0.locPredicate), (App)PosRuleTest.CODEC.optionalFieldOf("position_predicate", (Object)PosAlwaysTrueTest.INSTANCE).forGetter(debug0 -> debug0.posPredicate), (App)BlockState.CODEC.fieldOf("output_state").forGetter(debug0 -> debug0.outputState), (App)CompoundTag.CODEC.optionalFieldOf("output_nbt").forGetter(debug0 -> Optional.ofNullable(debug0.outputTag))).apply(debug0, ProcessorRule::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(RuleTest.CODEC.fieldOf("input_predicate").forGetter(debug0l -> debug0l.inputPredicate), RuleTest.CODEC.fieldOf("location_predicate").forGetter(debug0l -> debug0l.locPredicate), PosRuleTest.CODEC.optionalFieldOf("position_predicate", PosAlwaysTrueTest.INSTANCE).forGetter(debug0l -> debug0l.posPredicate), BlockState.CODEC.fieldOf("output_state").forGetter(debug0l -> debug0l.outputState), CompoundTag.CODEC.optionalFieldOf("output_nbt").forGetter(debug0l -> Optional.ofNullable(debug0l.outputTag))).apply(debug0, ProcessorRule::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RandomBlockMatchTest.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RandomBlockMatchTest.java
index 071550672f3fa772ec5f5a4edfc26e1cb49d258e..dc6efd4bddee32f599dd2d64dfc0189a2de226af 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RandomBlockMatchTest.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RandomBlockMatchTest.java
@@ -32,6 +32,6 @@ public class RandomBlockMatchTest extends RuleTest
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Registry.BLOCK.fieldOf("block").forGetter(debug0 -> debug0.block), (App)Codec.FLOAT.fieldOf("probability").forGetter(debug0 -> debug0.probability)).apply(debug0, (BiFunction)RandomBlockMatchTest::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Registry.BLOCK.fieldOf("block").forGetter(debug0l -> debug0l.block), Codec.FLOAT.fieldOf("probability").forGetter(debug0l -> debug0l.probability)).apply(debug0, RandomBlockMatchTest::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RandomBlockStateMatchTest.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RandomBlockStateMatchTest.java
index ab1d4e6fb96776d129bbfd6eccd2ff8fcdbf40a5..cbe4f4e87f0118e3237723c9d7a0a5701330dc79 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RandomBlockStateMatchTest.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RandomBlockStateMatchTest.java
@@ -30,6 +30,6 @@ public class RandomBlockStateMatchTest extends RuleTest
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)BlockState.CODEC.fieldOf("block_state").forGetter(debug0 -> debug0.blockState), (App)Codec.FLOAT.fieldOf("probability").forGetter(debug0 -> debug0.probability)).apply(debug0, (BiFunction)RandomBlockStateMatchTest::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(BlockState.CODEC.fieldOf("block_state").forGetter(debug0l -> debug0l.blockState), Codec.FLOAT.fieldOf("probability").forGetter(debug0l -> debug0l.probability)).apply(debug0, RandomBlockStateMatchTest::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleProcessor.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleProcessor.java
index b52f64eab54019f0513b2af59a9fb8d793d35715..9c7203d5a219b236562b880e71ea849e059dceae 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleProcessor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleProcessor.java
@@ -42,6 +42,6 @@ public class RuleProcessor extends StructureProcessor
     }
     
     static {
-        CODEC = ProcessorRule.CODEC.listOf().fieldOf("rules").xmap((Function)RuleProcessor::new, debug0 -> debug0.rules).codec();
+        CODEC = ProcessorRule.CODEC.listOf().fieldOf("rules").xmap(RuleProcessor::new, debug0 -> debug0.rules).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTest.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTest.java
index cedcf6a267880fcc7928652b4ed77be675f802af..763ccaf6157d57d11165483f48b4e2f9bdf14202 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTest.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTest.java
@@ -15,6 +15,6 @@ public abstract class RuleTest
     protected abstract RuleTestType<?> getType();
     
     static {
-        CODEC = Registry.RULE_TEST.dispatch("predicate_type", (Function)RuleTest::getType, (Function)RuleTestType::codec);
+        CODEC = Registry.RULE_TEST.dispatch("predicate_type", RuleTest::getType, RuleTestType::codec); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType.java
index 2c30c9ca23e92bddfac95e652cc903b78496721a..10d89bf1e288f4533d0b827b158f12831e72f7ef 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType.java
@@ -14,7 +14,7 @@ public interface RuleTestType<P extends RuleTest>
     
     Codec<P> codec();
     
-    default <P extends RuleTest> RuleTestType<P> register(final String debug0, final Codec<P> debug1) {
+    static <P extends RuleTest> RuleTestType<P> register(final String debug0, final Codec<P> debug1) { // MagmaCube - decompile fix
         return Registry.register((Registry<? super RuleTestType<P>>)Registry.RULE_TEST, debug0, () -> debug1);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureManager.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureManager.java
index 4b99233c4134ae6ee9bcb38814d46c6827a27512..ff2b5c95e4a8cb99a6b2c6a69b35fbf70438e186 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureManager.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureManager.java
@@ -38,7 +38,7 @@ public class StructureManager
     private final Path generatedDir;
     
     public StructureManager(final ResourceManager debug1, final LevelStorageSource.LevelStorageAccess debug2, final DataFixer debug3) {
-        this.structureRepository = (Map<ResourceLocation, StructureTemplate>)Maps.newHashMap();
+        this.structureRepository = Maps.newHashMap(); // MagmaCube - decompile fix
         this.resourceManager = debug1;
         this.fixerUpper = debug3;
         this.generatedDir = debug2.getLevelPath(LevelResource.GENERATED_DIR).normalize();
@@ -55,10 +55,9 @@ public class StructureManager
     
     @Nullable
     public StructureTemplate get(final ResourceLocation debug1) {
-        final StructureTemplate debug2;
-        return this.structureRepository.computeIfAbsent(debug1, debug1 -> {
-            debug2 = this.loadFromGenerated(debug1);
-            return (debug2 != null) ? debug2 : this.loadFromResource(debug1);
+        return this.structureRepository.computeIfAbsent(debug1, debug1l -> { // MagmaCube - decompile fix
+            StructureTemplate debug2 = this.loadFromGenerated(debug1l); // MagmaCube - decompile fix
+            return (debug2 != null) ? debug2 : this.loadFromResource(debug1l); // MagmaCube - decompile fix
         });
     }
     
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java
index b991e1ddb60e8a2b891974a7363026c04d399599..fe168437a07ef1fa9284c9d035eb1251b5d83ee4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java
@@ -38,7 +38,7 @@ public class StructurePlaceSettings
         this.rotation = Rotation.NONE;
         this.rotationPivot = BlockPos.ZERO;
         this.keepLiquids = true;
-        this.processors = (List<StructureProcessor>)Lists.newArrayList();
+        this.processors = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     public StructurePlaceSettings copy() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType.java
index d931d83a2faac35d5eb878249fdd413ab23fbb6e..597c436f99c717ae7bab55540aebedac3d28fe79 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType.java
@@ -19,14 +19,14 @@ public interface StructureProcessorType<P extends StructureProcessor>
     public static final StructureProcessorType<BlockAgeProcessor> BLOCK_AGE = register("block_age", BlockAgeProcessor.CODEC);
     public static final StructureProcessorType<BlackstoneReplaceProcessor> BLACKSTONE_REPLACE = register("blackstone_replace", BlackstoneReplaceProcessor.CODEC);
     public static final StructureProcessorType<LavaSubmergedBlockProcessor> LAVA_SUBMERGED_BLOCK = register("lava_submerged_block", LavaSubmergedBlockProcessor.CODEC);
-    public static final Codec<StructureProcessor> SINGLE_CODEC = Registry.STRUCTURE_PROCESSOR.dispatch("processor_type", (Function)StructureProcessor::getType, (Function)StructureProcessorType::codec);
-    public static final Codec<StructureProcessorList> LIST_OBJECT_CODEC = StructureProcessorType.SINGLE_CODEC.listOf().xmap((Function)StructureProcessorList::new, (Function)StructureProcessorList::list);
-    public static final Codec<StructureProcessorList> DIRECT_CODEC = Codec.either(StructureProcessorType.LIST_OBJECT_CODEC.fieldOf("processors").codec(), (Codec)StructureProcessorType.LIST_OBJECT_CODEC).xmap(debug0 -> (StructureProcessorList)debug0.map(debug0 -> debug0, debug0 -> debug0), (Function)Either::left);
+    public static final Codec<StructureProcessor> SINGLE_CODEC = Registry.STRUCTURE_PROCESSOR.dispatch("processor_type", StructureProcessor::getType, StructureProcessorType::codec); // MagmaCube - decompile fix
+    public static final Codec<StructureProcessorList> LIST_OBJECT_CODEC = StructureProcessorType.SINGLE_CODEC.listOf().xmap(StructureProcessorList::new, StructureProcessorList::list); // MagmaCube - decompile fix
+    public static final Codec<StructureProcessorList> DIRECT_CODEC = Codec.either(StructureProcessorType.LIST_OBJECT_CODEC.fieldOf("processors").codec(), StructureProcessorType.LIST_OBJECT_CODEC).xmap(debug0 -> (StructureProcessorList)debug0.map(debug0l -> debug0l, debug0l -> debug0l), Either::left); // MagmaCube - decompile fix
     public static final Codec<Supplier<StructureProcessorList>> LIST_CODEC = RegistryFileCodec.create(Registry.PROCESSOR_LIST_REGISTRY, StructureProcessorType.DIRECT_CODEC);
     
     Codec<P> codec();
     
-    default <P extends StructureProcessor> StructureProcessorType<P> register(final String debug0, final Codec<P> debug1) {
+    static <P extends StructureProcessor> StructureProcessorType<P> register(final String debug0, final Codec<P> debug1) { // MagmaCube - decompile fix
         return Registry.register((Registry<? super StructureProcessorType<P>>)Registry.STRUCTURE_PROCESSOR, debug0, () -> debug1);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
index 735bf8f3ea732d0ef870d9e899d9e149b887b778..1d4d91a24bf89a47f1dc0ee8cb67bbb6f5e3f9eb 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -41,10 +41,7 @@ import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.decoration.Painting;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.level.EmptyBlockGetter;
-import net.minecraft.world.level.Level;
-import net.minecraft.world.level.LevelAccessor;
-import net.minecraft.world.level.ServerLevelAccessor;
+import net.minecraft.world.level.*;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.LiquidBlockContainer;
@@ -130,7 +127,7 @@ public class StructureTemplate {
     }
 
     private static List<StructureBlockInfo> buildInfoList(List<StructureBlockInfo> debug02, List<StructureBlockInfo> debug1, List<StructureBlockInfo> debug2) {
-        Comparator<StructureBlockInfo> debug3 = Comparator.comparingInt(debug0 -> debug0.pos.getY()).thenComparingInt(debug0 -> debug0.pos.getX()).thenComparingInt(debug0 -> debug0.pos.getZ());
+        Comparator<StructureBlockInfo> debug3 = Comparator.<StructureBlockInfo>comparingInt(debug0 -> debug0.pos.getY()).thenComparingInt(debug0 -> debug0.pos.getX()).thenComparingInt(debug0 -> debug0.pos.getZ()); // MagmaCube - decompile fix
         debug02.sort(debug3);
         debug2.sort(debug3);
         debug1.sort(debug3);
@@ -192,11 +189,6 @@ public class StructureTemplate {
     }
 
     public boolean placeInWorld(ServerLevelAccessor debug1, BlockPos debug2, BlockPos debug3, StructurePlaceSettings debug4, Random debug5, int debug6) {
-        Object debug26;
-        Object debug23;
-        Object debug22;
-        Object debug21;
-        Object debug20;
         if (this.palettes.isEmpty()) {
             return false;
         }
@@ -206,7 +198,7 @@ public class StructureTemplate {
         }
         BoundingBox debug8 = debug4.getBoundingBox();
         ArrayList debug9 = Lists.newArrayListWithCapacity((int)(debug4.shouldKeepLiquids() ? debug7.size() : 0));
-        ArrayList debug10 = Lists.newArrayListWithCapacity((int)debug7.size());
+        List<Pair<BlockPos, CompoundTag>> debug10 = Lists.newArrayListWithCapacity((int)debug7.size());
         int debug11 = Integer.MAX_VALUE;
         int debug12 = Integer.MAX_VALUE;
         int debug13 = Integer.MAX_VALUE;
@@ -215,12 +207,12 @@ public class StructureTemplate {
         int debug16 = Integer.MIN_VALUE;
         List<StructureBlockInfo> debug17 = StructureTemplate.processBlockInfos(debug1, debug2, debug3, debug4, debug7);
         for (StructureBlockInfo structureBlockInfo : debug17) {
-            debug20 = structureBlockInfo.pos;
+            BlockPos debug20 = structureBlockInfo.pos;
             if (debug8 != null && !debug8.isInside((Vec3i)debug20)) continue;
-            debug21 = debug4.shouldKeepLiquids() ? debug1.getFluidState((BlockPos)debug20) : null;
-            debug22 = structureBlockInfo.state.mirror(debug4.getMirror()).rotate(debug4.getRotation());
+            FluidState debug21 = debug4.shouldKeepLiquids() ? debug1.getFluidState((BlockPos)debug20) : null;
+            BlockState debug22 = structureBlockInfo.state.mirror(debug4.getMirror()).rotate(debug4.getRotation());
             if (structureBlockInfo.nbt != null) {
-                debug23 = debug1.getBlockEntity((BlockPos)debug20);
+                BlockEntity debug23 = debug1.getBlockEntity((BlockPos)debug20);
                 Clearable.tryClear(debug23);
                 debug1.setBlock((BlockPos)debug20, Blocks.BARRIER.defaultBlockState(), 20);
             }
@@ -231,7 +223,8 @@ public class StructureTemplate {
             debug14 = Math.max(debug14, ((Vec3i)debug20).getX());
             debug15 = Math.max(debug15, ((Vec3i)debug20).getY());
             debug16 = Math.max(debug16, ((Vec3i)debug20).getZ());
-            debug10.add(Pair.of((Object)debug20, (Object)structureBlockInfo.nbt));
+            debug10.add(Pair.of(debug20, structureBlockInfo.nbt)); // MagmaCube - decompile fix
+            BlockEntity debug23;
             if (structureBlockInfo.nbt != null && (debug23 = debug1.getBlockEntity((BlockPos)debug20)) != null) {
                 structureBlockInfo.nbt.putInt("x", ((Vec3i)debug20).getX());
                 structureBlockInfo.nbt.putInt("y", ((Vec3i)debug20).getY());
@@ -252,33 +245,39 @@ public class StructureTemplate {
         Direction[] arrdirection = new Direction[]{Direction.UP, Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST};
         while (debug18 && !debug9.isEmpty()) {
             debug18 = false;
-            debug20 = debug9.iterator();
-            while (debug20.hasNext()) {
-                BlockState debug24;
-                Object debug25;
-                debug22 = debug21 = (BlockPos)debug20.next();
-                debug23 = debug1.getFluidState((BlockPos)debug22);
-                for (int debug242 = 0; debug242 < arrdirection.length && !((FluidState)debug23).isSource(); ++debug242) {
-                    debug25 = ((BlockPos)debug22).relative(arrdirection[debug242]);
-                    debug26 = debug1.getFluidState((BlockPos)debug25);
-                    if (!(((FluidState)debug26).getHeight(debug1, (BlockPos)debug25) > ((FluidState)debug23).getHeight(debug1, (BlockPos)debug22)) && (!((FluidState)debug26).isSource() || ((FluidState)debug23).isSource())) continue;
-                    debug23 = debug26;
-                    debug22 = debug25;
+            // MagmaCube start - decompile fix
+            for (Iterator<BlockPos> debug20 = debug9.iterator(); debug20.hasNext(); ) {
+                BlockPos debug21 = debug20.next();
+                BlockPos debug22 = debug21;
+                FluidState debug23 = debug1.getFluidState(debug22);
+                for (int debug24 = 0; debug24 < arrdirection.length && !debug23.isSource(); debug24++) {
+                    BlockPos debug25 = debug22.relative(arrdirection[debug24]);
+                    FluidState debug26 = debug1.getFluidState(debug25);
+                    if (debug26.getHeight((BlockGetter)debug1, debug25) > debug23.getHeight((BlockGetter)debug1, debug22) || (debug26.isSource() && !debug23.isSource())) {
+                        debug23 = debug26;
+                        debug22 = debug25;
+                    }
+                }
+                if (debug23.isSource()) {
+                    BlockState blockState = debug1.getBlockState(debug21);
+                    Block debug25 = blockState.getBlock();
+                    if (debug25 instanceof LiquidBlockContainer) {
+                        ((LiquidBlockContainer)debug25).placeLiquid((LevelAccessor)debug1, debug21, blockState, debug23);
+                        debug18 = true;
+                        debug20.remove();
+                    }
                 }
-                if (!((FluidState)debug23).isSource() || !((debug25 = (debug24 = debug1.getBlockState((BlockPos)debug21)).getBlock()) instanceof LiquidBlockContainer)) continue;
-                ((LiquidBlockContainer)debug25).placeLiquid(debug1, (BlockPos)debug21, debug24, (FluidState)debug23);
-                debug18 = true;
-                debug20.remove();
             }
+            // MagmaCube end - decompile fix
         }
         if (debug11 <= debug14) {
             if (!debug4.getKnownShape()) {
-                debug20 = new BitSetDiscreteVoxelShape(debug14 - debug11 + 1, debug15 - debug12 + 1, debug16 - debug13 + 1);
+                BitSetDiscreteVoxelShape debug20 = new BitSetDiscreteVoxelShape(debug14 - debug11 + 1, debug15 - debug12 + 1, debug16 - debug13 + 1); // MagmaCube - decompile fix
                 int debug212 = debug11;
                 int debug222 = debug12;
                 int debug232 = debug13;
-                for (Object debug25 : debug10) {
-                    debug26 = (BlockPos)debug25.getFirst();
+                for (Pair<BlockPos, CompoundTag> debug25 : debug10) { // MagmaCube - decompile fix
+                    BlockPos debug26 = (BlockPos)debug25.getFirst(); // MagmaCube - decompile fix
                     ((DiscreteVoxelShape)debug20).setFull(((Vec3i)debug26).getX() - debug212, ((Vec3i)debug26).getY() - debug222, ((Vec3i)debug26).getZ() - debug232, true, true);
                 }
                 StructureTemplate.updateShapeAtEdge(debug1, debug6, (DiscreteVoxelShape)debug20, debug212, debug222, debug232);
@@ -350,8 +349,8 @@ public class StructureTemplate {
             debug11.put("Pos", debug14);
             debug11.remove("UUID");
             StructureTemplate.createEntityIgnoreException(debug1, debug11).ifPresent(debug6 -> {
-                float debug7 = debug6.mirror(debug3);
-                debug6.moveTo(debug2.x, debug2.y, debug2.z, debug7 += debug6.yRot - debug6.rotate(debug4), debug6.xRot);
+                float debug72 = debug6.mirror(debug3); // MagmaCube - decompile fix
+                debug6.moveTo(debug13.x, debug13.y, debug13.z, debug72, debug6.xRot); // MagmaCube - decompile fix
                 if (debug7 && debug6 instanceof Mob) {
                     ((Mob)debug6).finalizeSpawn(debug1, debug1.getCurrentDifficultyAt(new BlockPos(debug13)), MobSpawnType.STRUCTURE, null, debug11);
                 }
@@ -530,7 +529,6 @@ public class StructureTemplate {
      * WARNING - void declaration
      */
     public CompoundTag save(CompoundTag debug1) {
-        Object debug5;
         AbstractList debug2;
         if (this.palettes.isEmpty()) {
             debug1.put("blocks", new ListTag());
@@ -538,19 +536,18 @@ public class StructureTemplate {
         } else {
             ListTag debug6;
             Object debug11;
-            void var4_5;
             debug2 = Lists.newArrayList();
             SimplePalette debug3 = new SimplePalette();
             debug2.add(debug3);
             boolean bl = true;
-            while (++var4_5 < this.palettes.size()) {
+            for (int i = 0; i < this.palettes.size(); i++) { // MagmaCube - decompile fix
                 debug2.add(new SimplePalette());
             }
             ListTag listTag = new ListTag();
-            debug5 = this.palettes.get(0).blocks();
+            List<StructureBlockInfo> debug5 = this.palettes.get(0).blocks(); // MagmaCube - decompile fix
             for (int debug62 = 0; debug62 < debug5.size(); ++debug62) {
                 StructureBlockInfo debug7 = (StructureBlockInfo)debug5.get(debug62);
-                Object debug8 = new CompoundTag();
+                Tag debug8 = new CompoundTag(); // MagmaCube - decompile fix
                 ((CompoundTag)debug8).put("pos", this.newIntegerList(debug7.pos.getX(), debug7.pos.getY(), debug7.pos.getZ()));
                 int debug9 = debug3.idFor(debug7.state);
                 ((CompoundTag)debug8).putInt("state", debug9);
@@ -586,7 +583,7 @@ public class StructureTemplate {
         }
         debug2 = new ListTag();
         for (StructureEntityInfo structureEntityInfo : this.entityInfoList) {
-            debug5 = new CompoundTag();
+            Tag debug5 = new CompoundTag(); // MagmaCube - decompile fix
             ((CompoundTag)debug5).put("pos", this.newDoubleList(structureEntityInfo.pos.x, structureEntityInfo.pos.y, structureEntityInfo.pos.z));
             ((CompoundTag)debug5).put("blockPos", this.newIntegerList(structureEntityInfo.blockPos.getX(), structureEntityInfo.blockPos.getY(), structureEntityInfo.blockPos.getZ()));
             if (structureEntityInfo.nbt != null) {
@@ -679,7 +676,7 @@ public class StructureTemplate {
         }
 
         public List<StructureBlockInfo> blocks(Block debug1) {
-            return this.cache.computeIfAbsent(debug1, debug12 -> this.blocks.stream().filter(debug1 -> debug1.state.is((Block)debug12)).collect(Collectors.toList()));
+            return this.cache.computeIfAbsent(debug1, debug12 -> this.blocks.stream().filter(debug13 -> debug13.state.is((Block)debug12)).collect(Collectors.toList())); // MagmaCube - decompile fix
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/TagMatchTest.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/TagMatchTest.java
index f29f710c243a338b337aaa5418524e2a50f82e53..de454e0caf916a0b8134b6ca7446d689af0632e8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/TagMatchTest.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/TagMatchTest.java
@@ -29,6 +29,6 @@ public class TagMatchTest extends RuleTest
     }
     
     static {
-        CODEC = Tag.codec(() -> SerializationTags.getInstance().getBlocks()).fieldOf("tag").xmap((Function)TagMatchTest::new, debug0 -> debug0.tag).codec();
+        CODEC = Tag.codec(() -> SerializationTags.getInstance().getBlocks()).fieldOf("tag").xmap(TagMatchTest::new, debug0 -> debug0.tag).codec(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/BadlandsSurfaceBuilder.java b/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/BadlandsSurfaceBuilder.java
index 3cf7f142951b2707f3ce57ef60ff7da9f3d40e06..8806bf10cb535a2fb6b8f596a6eb940897b3846f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/BadlandsSurfaceBuilder.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/BadlandsSurfaceBuilder.java
@@ -121,7 +121,7 @@ public class BadlandsSurfaceBuilder extends SurfaceBuilder<SurfaceBuilderBaseCon
         if (this.seed != debug1 || this.pillarNoise == null || this.pillarRoofNoise == null) {
             final WorldgenRandom debug2 = new WorldgenRandom(debug1);
             this.pillarNoise = new PerlinSimplexNoise(debug2, IntStream.rangeClosed(-3, 0));
-            this.pillarRoofNoise = new PerlinSimplexNoise(debug2, (List<Integer>)ImmutableList.of((Object)0));
+            this.pillarRoofNoise = new PerlinSimplexNoise(debug2, (List<Integer>)ImmutableList.of(0)); // MagmaCube - decompile fix
         }
         this.seed = debug1;
     }
@@ -129,7 +129,7 @@ public class BadlandsSurfaceBuilder extends SurfaceBuilder<SurfaceBuilderBaseCon
     protected void generateBands(final long debug1) {
         Arrays.fill(this.clayBands = new BlockState[64], BadlandsSurfaceBuilder.TERRACOTTA);
         final WorldgenRandom debug2 = new WorldgenRandom(debug1);
-        this.clayBandsOffsetNoise = new PerlinSimplexNoise(debug2, (List<Integer>)ImmutableList.of((Object)0));
+        this.clayBandsOffsetNoise = new PerlinSimplexNoise(debug2, (List<Integer>)ImmutableList.of(0)); // MagmaCube - decompile fix
         for (int debug3 = 0; debug3 < 64; ++debug3) {
             debug3 += debug2.nextInt(5) + 1;
             if (debug3 < 64) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/ConfiguredSurfaceBuilder.java b/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/ConfiguredSurfaceBuilder.java
index 8bdf67083dafdbd54719dc28f4bb34e0b9129a3f..10690b70b3a2bf5ce34e2bf98cd22e91a7021666 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/ConfiguredSurfaceBuilder.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/ConfiguredSurfaceBuilder.java
@@ -36,7 +36,7 @@ public class ConfiguredSurfaceBuilder<SC extends SurfaceBuilderConfiguration>
     }
     
     static {
-        DIRECT_CODEC = Registry.SURFACE_BUILDER.dispatch(debug0 -> debug0.surfaceBuilder, (Function)SurfaceBuilder::configuredCodec);
+        DIRECT_CODEC = Registry.SURFACE_BUILDER.dispatch(debug0 -> debug0.surfaceBuilder, SurfaceBuilder::configuredCodec); // MagmaCube - decompile fix
         CODEC = (Codec)RegistryFileCodec.create(Registry.CONFIGURED_SURFACE_BUILDER_REGISTRY, ConfiguredSurfaceBuilder.DIRECT_CODEC);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/NetherCappedSurfaceBuilder.java b/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/NetherCappedSurfaceBuilder.java
index 407bae38984521cb98c7e2285313815aef2db26a..0667633e8e7b0fe6810cfa014c0fd7c93435a89a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/NetherCappedSurfaceBuilder.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/NetherCappedSurfaceBuilder.java
@@ -25,8 +25,8 @@ public abstract class NetherCappedSurfaceBuilder extends SurfaceBuilder<SurfaceB
     
     public NetherCappedSurfaceBuilder(final Codec<SurfaceBuilderBaseConfiguration> debug1) {
         super(debug1);
-        this.floorNoises = (ImmutableMap<BlockState, PerlinNoise>)ImmutableMap.of();
-        this.ceilingNoises = (ImmutableMap<BlockState, PerlinNoise>)ImmutableMap.of();
+        this.floorNoises = ImmutableMap.of(); // MagmaCube - decompile fix
+        this.ceilingNoises = ImmutableMap.of(); // MagmaCube - decompile fix
     }
     
     @Override
@@ -38,8 +38,8 @@ public abstract class NetherCappedSurfaceBuilder extends SurfaceBuilder<SurfaceB
         final int debug19 = (int)(debug7 / 3.0 + 3.0 + debug1.nextDouble() * 0.25);
         final double debug20 = 0.03125;
         final boolean debug21 = this.patchNoise.getValue(debug4 * 0.03125, 109.0, debug5 * 0.03125) * 75.0 + debug1.nextDouble() > 0.0;
-        final BlockState debug22 = this.ceilingNoises.entrySet().stream().max(Comparator.comparing(debug3 -> debug3.getValue().getValue(debug4, debug11, debug5))).get().getKey();
-        final BlockState debug23 = this.floorNoises.entrySet().stream().max(Comparator.comparing(debug3 -> debug3.getValue().getValue(debug4, debug11, debug5))).get().getKey();
+        final BlockState debug22 = this.ceilingNoises.entrySet().stream().max(Comparator.comparing(debug3l -> debug3l.getValue().getValue(debug4, debug11, debug5))).get().getKey(); // MagmaCube - decompile fix
+        final BlockState debug23 = this.floorNoises.entrySet().stream().max(Comparator.comparing(debug3l -> debug3l.getValue().getValue(debug4, debug11, debug5))).get().getKey(); // MagmaCube - decompile fix
         final BlockPos.MutableBlockPos debug24 = new BlockPos.MutableBlockPos();
         BlockState debug25 = debug2.getBlockState(debug24.set(debug16, 128, debug17));
         for (int debug26 = 127; debug26 >= 0; --debug26) {
@@ -75,7 +75,7 @@ public abstract class NetherCappedSurfaceBuilder extends SurfaceBuilder<SurfaceB
         if (this.seed != debug1 || this.patchNoise == null || this.floorNoises.isEmpty() || this.ceilingNoises.isEmpty()) {
             this.floorNoises = initPerlinNoises(this.getFloorBlockStates(), debug1);
             this.ceilingNoises = initPerlinNoises(this.getCeilingBlockStates(), debug1 + this.floorNoises.size());
-            this.patchNoise = new PerlinNoise(new WorldgenRandom(debug1 + this.floorNoises.size() + this.ceilingNoises.size()), (List<Integer>)ImmutableList.of((Object)0));
+            this.patchNoise = new PerlinNoise(new WorldgenRandom(debug1 + this.floorNoises.size() + this.ceilingNoises.size()), (List<Integer>)ImmutableList.of(0)); // MagmaCube - decompile fix
         }
         this.seed = debug1;
     }
@@ -83,7 +83,7 @@ public abstract class NetherCappedSurfaceBuilder extends SurfaceBuilder<SurfaceB
     private static ImmutableMap<BlockState, PerlinNoise> initPerlinNoises(final ImmutableList<BlockState> debug0, long debug1) {
         final ImmutableMap.Builder<BlockState, PerlinNoise> debug2 = (ImmutableMap.Builder<BlockState, PerlinNoise>)new ImmutableMap.Builder();
         for (final BlockState debug3 : debug0) {
-            debug2.put((Object)debug3, (Object)new PerlinNoise(new WorldgenRandom(debug1), (List<Integer>)ImmutableList.of((Object)(-4))));
+            debug2.put(debug3, new PerlinNoise(new WorldgenRandom(debug1), (List<Integer>)ImmutableList.of((-4)))); // MagmaCube - decompile fix
             ++debug1;
         }
         return (ImmutableMap<BlockState, PerlinNoise>)debug2.build();
diff --git a/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SoulSandValleySurfaceBuilder.java b/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SoulSandValleySurfaceBuilder.java
index ea0d91ad4477ae331103e0425dd4c6a89fe10bfd..9c1f73df767f95440b56b929cc39f729a43f0281 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SoulSandValleySurfaceBuilder.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SoulSandValleySurfaceBuilder.java
@@ -35,6 +35,6 @@ public class SoulSandValleySurfaceBuilder extends NetherCappedSurfaceBuilder
         SOUL_SAND = Blocks.SOUL_SAND.defaultBlockState();
         SOUL_SOIL = Blocks.SOUL_SOIL.defaultBlockState();
         GRAVEL = Blocks.GRAVEL.defaultBlockState();
-        BLOCK_STATES = ImmutableList.of((Object)SoulSandValleySurfaceBuilder.SOUL_SAND, (Object)SoulSandValleySurfaceBuilder.SOUL_SOIL);
+        BLOCK_STATES = ImmutableList.of(SoulSandValleySurfaceBuilder.SOUL_SAND, SoulSandValleySurfaceBuilder.SOUL_SOIL); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilder.java b/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilder.java
index 1aca59ca431e9b8628cd45000d1e0459c12325c9..db8de8b1beaee8490fd48635a770a01d30a1eadc 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilder.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilder.java
@@ -69,7 +69,7 @@ public abstract class SurfaceBuilder<C extends SurfaceBuilderConfiguration>
     }
     
     public SurfaceBuilder(final Codec<C> debug1) {
-        this.configuredCodec = (Codec<ConfiguredSurfaceBuilder<C>>)debug1.fieldOf("config").xmap((Function)this::configured, (Function)ConfiguredSurfaceBuilder::config).codec();
+        this.configuredCodec = (Codec<ConfiguredSurfaceBuilder<C>>)debug1.fieldOf("config").xmap(this::configured, ConfiguredSurfaceBuilder::config).codec(); // MagmaCube - decompile fix
     }
     
     public Codec<ConfiguredSurfaceBuilder<C>> configuredCodec() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilderBaseConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilderBaseConfiguration.java
index c5caa221a8ee9164646a70539085ece545805150..0e27f72cf053d5765f8852c1cc95cccc7e981a47 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilderBaseConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/surfacebuilders/SurfaceBuilderBaseConfiguration.java
@@ -34,6 +34,6 @@ public class SurfaceBuilderBaseConfiguration implements SurfaceBuilderConfigurat
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)BlockState.CODEC.fieldOf("top_material").forGetter(debug0 -> debug0.topMaterial), (App)BlockState.CODEC.fieldOf("under_material").forGetter(debug0 -> debug0.underMaterial), (App)BlockState.CODEC.fieldOf("underwater_material").forGetter(debug0 -> debug0.underwaterMaterial)).apply(debug0, SurfaceBuilderBaseConfiguration::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(BlockState.CODEC.fieldOf("top_material").forGetter(debug0l -> debug0l.topMaterial), BlockState.CODEC.fieldOf("under_material").forGetter(debug0l -> debug0l.underMaterial), BlockState.CODEC.fieldOf("underwater_material").forGetter(debug0l -> debug0l.underwaterMaterial)).apply(debug0, SurfaceBuilderBaseConfiguration::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java b/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
index fae0cae48d975fb0996bd597e3750209353cbe6c..c48a0ca499e053091bdb5ba157dd62061caa95b0 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
@@ -44,7 +44,7 @@ implements SurfaceNoise {
     }
 
     public static PerlinNoise create(WorldgenRandom debug0, int debug1, DoubleList debug2) {
-        return new PerlinNoise(debug0, (Pair<Integer, DoubleList>)Pair.of((Object)debug1, (Object)debug2));
+        return new PerlinNoise(debug0, (Pair<Integer, DoubleList>)Pair.of(debug1, debug2)); // MagmaCube - decompile fix
     }
 
     private static Pair<Integer, DoubleList> makeAmplitudes(IntSortedSet debug0) {
@@ -63,7 +63,7 @@ implements SurfaceNoise {
             int debug6 = debug5.nextInt();
             debug4.set(debug6 + debug1, 1.0);
         }
-        return Pair.of((Object)(-debug1), (Object)debug4);
+        return Pair.of(-debug1, debug4);// MagmaCube - decompile fix
     }
 
     private PerlinNoise(WorldgenRandom debug1, IntSortedSet debug2) {
diff --git a/src/main/java/net/minecraft/world/level/lighting/BlockLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/BlockLightSectionStorage.java
index 34ac064137041c7de464edc82f59f1ac85dd7387..5ff222cbf7119371f1d07947b44fa11900b5627d 100644
--- a/src/main/java/net/minecraft/world/level/lighting/BlockLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/BlockLightSectionStorage.java
@@ -7,7 +7,7 @@ import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.chunk.LightChunkGetter;
 
-public class BlockLightSectionStorage extends LayerLightSectionStorage<BlockDataLayerStorageMap>
+public class BlockLightSectionStorage extends LayerLightSectionStorage<BlockLightSectionStorage.BlockDataLayerStorageMap> // MagmaCube - decompile fix
 {
     protected BlockLightSectionStorage(final LightChunkGetter debug1) {
         super(LightLayer.BLOCK, debug1, new BlockDataLayerStorageMap((Long2ObjectOpenHashMap<DataLayer>)new Long2ObjectOpenHashMap()));
diff --git a/src/main/java/net/minecraft/world/level/lighting/DataLayerStorageMap.java b/src/main/java/net/minecraft/world/level/lighting/DataLayerStorageMap.java
index c2bad3b4dd35b5f671669e19c894ce9916d1bd6d..65d64711598cd351997fb7330ef675355f70e2b8 100644
--- a/src/main/java/net/minecraft/world/level/lighting/DataLayerStorageMap.java
+++ b/src/main/java/net/minecraft/world/level/lighting/DataLayerStorageMap.java
@@ -22,7 +22,7 @@ public abstract class DataLayerStorageMap<M extends DataLayerStorageMap<M>>
     public abstract M copy();
     
     public void copyDataLayer(final long debug1) {
-        this.map.put(debug1, (Object)((DataLayer)this.map.get(debug1)).copy());
+        this.map.put(debug1, ((DataLayer)this.map.get(debug1)).copy()); // MagmaCube - decompile fix
         this.clearCache();
     }
     
@@ -60,7 +60,7 @@ public abstract class DataLayerStorageMap<M extends DataLayerStorageMap<M>>
     }
     
     public void setLayer(final long debug1, final DataLayer debug3) {
-        this.map.put(debug1, (Object)debug3);
+        this.map.put(debug1, debug3); // MagmaCube - decompile fix
     }
     
     public void clearCache() {
diff --git a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
index 1b8d18c582271b8f48483fd807193af1b9c4130c..e2123d4c366dc4567e017208f1d0e288e32d4d90 100644
--- a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
+++ b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
@@ -3,6 +3,8 @@ package net.minecraft.world.level.lighting;
 import net.minecraft.util.Mth;
 import it.unimi.dsi.fastutil.longs.LongList;
 import it.unimi.dsi.fastutil.longs.LongArrayList;
+
+import java.util.function.LongConsumer;
 import java.util.function.LongPredicate;
 import it.unimi.dsi.fastutil.longs.Long2ByteOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ByteMap;
@@ -76,14 +78,13 @@ public abstract class DynamicGraphMinFixedPoint
     
     public void removeIf(final LongPredicate debug1) {
         final LongList debug3 = (LongList)new LongArrayList();
-        final LongList list;
-        this.computedLevels.keySet().forEach(debug2 -> {
+        this.computedLevels.keySet().forEach((LongConsumer) debug2 -> { // MagmaCube - decompile fix
             if (debug1.test(debug2)) {
-                list.add(debug2);
+                debug3.add(debug2); // MagmaCube - decompile fix
             }
             return;
         });
-        debug3.forEach(this::removeFromQueue);
+        debug3.forEach((LongConsumer) this::removeFromQueue); // MagmaCube - decompile fix
     }
     
     private void dequeue(final long debug1, final int debug3, final int debug4, final boolean debug5) {
diff --git a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
index ed4cbe7bfc0d837f1ec7abc15edf116730206c5d..4585c32f2df061b0b427efde27b701e9eb133a50 100644
--- a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
@@ -168,7 +168,7 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
     
     protected void clearQueuedSectionBlocks(final LayerLightEngine<?, ?> debug1, final long debug2) {
         if (debug1.getQueueSize() < 8192) {
-            debug1.removeIf(debug2 -> SectionPos.blockToSection(debug2) == debug2);
+            debug1.removeIf(debug2l -> SectionPos.blockToSection(debug2l) == debug2l); // MagmaCube - decompile fix
             return;
         }
         final int debug3 = SectionPos.sectionToBlockCoord(SectionPos.x(debug2));
@@ -198,13 +198,13 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
             final DataLayer debug6 = this.updatingSectionData.removeLayer(debug4);
             if (this.columnsToRetainQueuedDataFor.contains(SectionPos.getZeroNode(debug4))) {
                 if (debug5 != null) {
-                    this.queuedSections.put(debug4, (Object)debug5);
+                    this.queuedSections.put(debug4, debug5); // MagmaCube - decompile fix
                 }
                 else {
                     if (debug6 == null) {
                         continue;
                     }
-                    this.queuedSections.put(debug4, (Object)debug6);
+                    this.queuedSections.put(debug4, debug6); // MagmaCube - decompile fix
                 }
             }
         }
@@ -325,7 +325,7 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
     
     protected void queueSectionData(final long debug1, @Nullable final DataLayer debug3, final boolean debug4) {
         if (debug3 != null) {
-            this.queuedSections.put(debug1, (Object)debug3);
+            this.queuedSections.put(debug1, debug3); // MagmaCube - decompile fix
             if (!debug4) {
                 this.untrustedSections.add(debug1);
             }
diff --git a/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
index 3b7a976d4c3524dd989e93cf99edfbb4bef25e62..e5d9719ea208d2c8400a7a01c98395c37911fe11 100644
--- a/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
@@ -13,7 +13,7 @@ import net.minecraft.world.level.chunk.LightChunkGetter;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import net.minecraft.core.Direction;
 
-public class SkyLightSectionStorage extends LayerLightSectionStorage<SkyDataLayerStorageMap>
+public class SkyLightSectionStorage extends LayerLightSectionStorage<SkyLightSectionStorage.SkyDataLayerStorageMap> // MagmaCube - decompile fix
 {
     private static final Direction[] HORIZONTALS;
     private final LongSet sectionsWithSources;
diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index 35b081769356da2f7f15f8432d6f90c04e063031..20b03659a4418244600d922c2f8c4e626ddcffeb 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -41,7 +41,7 @@ public abstract class FlowingFluid extends Fluid
     private final Map<FluidState, VoxelShape> shapes;
     
     public FlowingFluid() {
-        this.shapes = (Map<FluidState, VoxelShape>)Maps.newIdentityHashMap();
+        this.shapes = Maps.newIdentityHashMap(); // MagmaCube - decompile fix
     }
     
     @Override
@@ -189,7 +189,7 @@ public abstract class FlowingFluid extends Fluid
         Block.BlockStatePairKey debug8;
         if (debug7 != null) {
             debug8 = new Block.BlockStatePairKey(debug4, debug6, debug1);
-            final byte debug9 = debug7.getAndMoveToFirst((Object)debug8);
+            final byte debug9 = debug7.getAndMoveToFirst(debug8); // MagmaCube - decompile fix
             if (debug9 != 127) {
                 return debug9 != 0;
             }
@@ -204,7 +204,7 @@ public abstract class FlowingFluid extends Fluid
             if (debug7.size() == 200) {
                 debug7.removeLastByte();
             }
-            debug7.putAndMoveToFirst((Object)debug8, (byte)(byte)(debug12 ? 1 : 0));
+            debug7.putAndMoveToFirst(debug8, (byte)(byte)(debug12 ? 1 : 0)); // MagmaCube - decompile fix
         }
         return debug12;
     }
@@ -212,13 +212,13 @@ public abstract class FlowingFluid extends Fluid
     public abstract Fluid getFlowing();
     
     public FluidState getFlowing(final int debug1, final boolean debug2) {
-        return ((StateHolder<O, FluidState>)((StateHolder<O, FluidState>)this.getFlowing().defaultFluidState()).setValue((Property<Comparable>)FlowingFluid.LEVEL, debug1)).setValue((Property<Comparable>)FlowingFluid.FALLING, debug2);
+        return (this.getFlowing().defaultFluidState().setValue(FlowingFluid.LEVEL, debug1)).setValue(FlowingFluid.FALLING, debug2); // MagmaCube - decompile fix
     }
     
     public abstract Fluid getSource();
     
     public FluidState getSource(final boolean debug1) {
-        return ((StateHolder<O, FluidState>)this.getSource().defaultFluidState()).setValue((Property<Comparable>)FlowingFluid.FALLING, debug1);
+        return this.getSource().defaultFluidState().setValue(FlowingFluid.FALLING, debug1); // MagmaCube - decompile fix
     }
     
     protected abstract boolean canConvertToSource();
@@ -251,24 +251,19 @@ public abstract class FlowingFluid extends Fluid
             }
             final BlockPos debug11 = debug2.relative(debug10);
             final short debug12 = getCacheKey(debug6, debug11);
-            final BlockState debug14;
-            final Pair<BlockState, FluidState> debug13 = (Pair<BlockState, FluidState>)debug7.computeIfAbsent(debug12, debug2 -> {
-                debug14 = debug1.getBlockState(debug11);
-                return Pair.of((Object)debug14, (Object)debug14.getFluidState());
+            final Pair<BlockState, FluidState> debug13 = (Pair<BlockState, FluidState>)debug7.computeIfAbsent(debug12, debug2l -> { // MagmaCube - decompile fix
+                BlockState debug14 = debug1.getBlockState(debug11); // MagmaCube - decompile fix
+                return Pair.of(debug14, debug14.getFluidState()); // MagmaCube - decompile fix
             });
             final BlockState debug15 = (BlockState)debug13.getFirst();
             final FluidState debug16 = (FluidState)debug13.getSecond();
             if (!this.canPassThrough(debug1, this.getFlowing(), debug2, debug5, debug10, debug11, debug15, debug16)) {
                 continue;
             }
-            final BlockPos debug21;
-            final BlockPos debug18;
-            final BlockState debug19;
-            final BlockState debug22;
-            final boolean debug17 = debug8.computeIfAbsent(debug12, debug4 -> {
-                debug18 = debug21.below();
-                debug19 = debug1.getBlockState(debug18);
-                return this.isWaterHole(debug1, this.getFlowing(), debug21, debug22, debug18, debug19);
+            final boolean debug17 = debug8.computeIfAbsent(debug12, debug4l -> { // MagmaCube - decompile fix
+                BlockPos debug18 = debug11.below(); // MagmaCube - decompile fix
+                BlockState debug19 = debug1.getBlockState(debug18); // MagmaCube - decompile fix
+                return this.isWaterHole(debug1, this.getFlowing(), debug11, debug19, debug18, debug19); // MagmaCube - decompile fix
             });
             if (debug17) {
                 return debug3;
@@ -319,23 +314,18 @@ public abstract class FlowingFluid extends Fluid
         for (final Direction debug8 : Direction.Plane.HORIZONTAL) {
             final BlockPos debug9 = debug2.relative(debug8);
             final short debug10 = getCacheKey(debug2, debug9);
-            final BlockState debug12;
-            final Pair<BlockState, FluidState> debug11 = (Pair<BlockState, FluidState>)debug6.computeIfAbsent(debug10, debug2 -> {
-                debug12 = debug1.getBlockState(debug9);
-                return Pair.of((Object)debug12, (Object)debug12.getFluidState());
+            final Pair<BlockState, FluidState> debug11 = (Pair<BlockState, FluidState>)debug6.computeIfAbsent(debug10, debug2l -> { // MagmaCube - decompile fix
+                BlockState debug12 = debug1.getBlockState(debug9); // MagmaCube - decompile fix
+                return Pair.of(debug12, debug12.getFluidState()); // MagmaCube - decompile fix
             });
             final BlockState debug13 = (BlockState)debug11.getFirst();
             final FluidState debug14 = (FluidState)debug11.getSecond();
             final FluidState debug15 = this.getNewLiquid(debug1, debug9, debug13);
             if (this.canPassThrough(debug1, debug15.getType(), debug2, debug3, debug8, debug9, debug13, debug14)) {
                 final BlockPos debug16 = debug9.below();
-                final BlockPos debug20;
-                final BlockState debug18;
-                final BlockPos debug21;
-                final BlockState debug22;
-                final boolean debug17 = debug7.computeIfAbsent(debug10, debug5 -> {
-                    debug18 = debug1.getBlockState(debug20);
-                    return this.isWaterHole(debug1, this.getFlowing(), debug21, debug22, debug20, debug18);
+                final boolean debug17 = debug7.computeIfAbsent(debug10, debug5l -> { // MagmaCube - decompile fix
+                    BlockState debug18 = debug1.getBlockState(debug16); // MagmaCube - decompile fix
+                    return this.isWaterHole(debug1, this.getFlowing(), debug16, debug18, debug9, debug18); // MagmaCube - decompile fix
                 });
                 int debug19;
                 if (debug17) {
@@ -427,15 +417,14 @@ public abstract class FlowingFluid extends Fluid
         if (debug1.getAmount() == 9 && hasSameAbove(debug1, debug2, debug3)) {
             return Shapes.block();
         }
-        return this.shapes.computeIfAbsent(debug1, debug2 -> Shapes.box(0.0, 0.0, 0.0, 1.0, debug2.getHeight(debug2, debug3), 1.0));
+        return this.shapes.computeIfAbsent(debug1, debug2l -> Shapes.box(0.0, 0.0, 0.0, 1.0, debug2l.getHeight(debug2, debug3), 1.0)); // MagmaCube - decompile fix
     }
     
     static {
         FALLING = BlockStateProperties.FALLING;
         LEVEL = BlockStateProperties.LEVEL_FLOWING;
-        final Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey> debug0;
         OCCLUSION_CACHE = ThreadLocal.withInitial(() -> {
-            debug0 = new Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>(200) {
+            Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey> debug0 = new Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>(200) { // MagmaCube - decompile fix
                 protected void rehash(final int debug1) {
                 }
             };
diff --git a/src/main/java/net/minecraft/world/level/material/FluidState.java b/src/main/java/net/minecraft/world/level/material/FluidState.java
index d881139b2cb0b1854ba65a44456b0c4219c29a28..f57851706623424093725f769ee40a24f77aad22 100644
--- a/src/main/java/net/minecraft/world/level/material/FluidState.java
+++ b/src/main/java/net/minecraft/world/level/material/FluidState.java
@@ -109,6 +109,6 @@ public final class FluidState extends StateHolder<Fluid, FluidState>
     }
     
     static {
-        CODEC = StateHolder.codec((com.mojang.serialization.Codec<Object>)Registry.FLUID, Fluid::defaultFluidState).stable();
+        CODEC = StateHolder.codec(Registry.FLUID, Fluid::defaultFluidState).stable(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/newbiome/context/BigContext.java b/src/main/java/net/minecraft/world/level/newbiome/context/BigContext.java
index 64d18d9abb4ad3a1e5f5b3ab43e9fe8f0b0b8fd9..7e30cc897087ed0562c2aa267c1e8a372d45cdf5 100644
--- a/src/main/java/net/minecraft/world/level/newbiome/context/BigContext.java
+++ b/src/main/java/net/minecraft/world/level/newbiome/context/BigContext.java
@@ -18,11 +18,11 @@ public interface BigContext<R extends Area> extends Context
     }
     
     default int random(final int debug1, final int debug2) {
-        return (super.nextRandom(2) == 0) ? debug1 : debug2;
+        return (nextRandom(2) == 0) ? debug1 : debug2; // MagmaCube - decompile fix
     }
     
     default int random(final int debug1, final int debug2, final int debug3, final int debug4) {
-        final int debug5 = super.nextRandom(4);
+        final int debug5 = nextRandom(4); // MagmaCube - decompile fix
         if (debug5 == 0) {
             return debug1;
         }
diff --git a/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer1.java b/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer1.java
index a9782560ce1142c099bbcd8cbae1e1ecb2cd389c..13a5f8dbe47c44f9a1f5f17688982f0039857a9f 100644
--- a/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer1.java
+++ b/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer1.java
@@ -12,7 +12,7 @@ public interface AreaTransformer1
 extends DimensionTransformer {
     default public <R extends Area> AreaFactory<R> run(BigContext<R> debug1, AreaFactory<R> debug2) {
         return () -> {
-            Object debug32 = debug2.make();
+            R debug32 = debug2.make(); // MagmaCube - decompile fix
             return debug1.createResult((debug3, debug4) -> {
                 debug1.initRandom(debug3, debug4);
                 return this.applyPixel(debug1, (Area)debug32, debug3, debug4);
diff --git a/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer2.java b/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer2.java
index 0608d9ef28ea2f071b5670629a2e8c943c2adde8..f4ed902de75b962a0b0ebfac7ffe62363db169b1 100644
--- a/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer2.java
+++ b/src/main/java/net/minecraft/world/level/newbiome/layer/traits/AreaTransformer2.java
@@ -13,8 +13,8 @@ public interface AreaTransformer2
 extends DimensionTransformer {
     default public <R extends Area> AreaFactory<R> run(BigContext<R> debug1, AreaFactory<R> debug2, AreaFactory<R> debug3) {
         return () -> {
-            Object debug42 = debug2.make();
-            Object debug52 = debug3.make();
+            R debug42 = debug2.make(); // MagmaCube - decompile fix
+            R debug52 = debug3.make(); // MagmaCube - decompile fix
             return debug1.createResult((debug4, debug5) -> {
                 debug1.initRandom(debug4, debug5);
                 return this.applyPixel(debug1, (Area)debug42, (Area)debug52, debug4, debug5);
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java b/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java
index 40ee063e60628677426c559dc3b71438dc2ebf4c..5c1bf2eb766881234e4121f862cb1cc57122887b 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java
@@ -43,7 +43,7 @@ public abstract class NodeEvaluator
     }
     
     protected Node getNode(final int debug1, final int debug2, final int debug3) {
-        return (Node)this.nodes.computeIfAbsent(Node.createHash(debug1, debug2, debug3), debug3 -> new Node(debug1, debug2, debug3));
+        return (Node)this.nodes.computeIfAbsent(Node.createHash(debug1, debug2, debug3), debug3l -> new Node(debug1, debug2, debug3l)); // MagmaCube - decompile fix
     }
     
     public abstract Node getStart();
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/Path.java b/src/main/java/net/minecraft/world/level/pathfinder/Path.java
index b40a1503696a715b2c529e1102bc307c6d4bf14d..5cbf3b260aebd9c71b149ad64ced86cd6f52dd19 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/Path.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/Path.java
@@ -138,12 +138,12 @@ public class Path
         final boolean debug = debug0.readBoolean();
         final int debug2 = debug0.readInt();
         final int debug3 = debug0.readInt();
-        final Set<Target> debug4 = (Set<Target>)Sets.newHashSet();
+        final Set<Target> debug4 = Sets.newHashSet(); // MagmaCube - decompile fix
         for (int debug5 = 0; debug5 < debug3; ++debug5) {
             debug4.add(Target.createFromStream(debug0));
         }
         final BlockPos debug6 = new BlockPos(debug0.readInt(), debug0.readInt(), debug0.readInt());
-        final List<Node> debug7 = (List<Node>)Lists.newArrayList();
+        final List<Node> debug7 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug8 = debug0.readInt(), debug9 = 0; debug9 < debug8; ++debug9) {
             debug7.add(Node.createFromStream(debug0));
         }
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java b/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java
index 6cd5f1d9ad512ac746104c25ed1187b7c500dd8d..7a56ac6e0abcbb4070520651a169862df3aad58a 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java
@@ -62,7 +62,7 @@ public class PathFinder {
         this.openSet.insert(debug1);
         ImmutableSet debug7 = ImmutableSet.of();
         int debug8 = 0;
-        HashSet debug9 = Sets.newHashSetWithExpectedSize((int)debug6.size());
+        HashSet<Target> debug9 = Sets.newHashSetWithExpectedSize((int)debug6.size()); // MagmaCube - decompile fix
         int debug10 = (int)((float)this.maxVisitedNodes * debug5);
         while (!this.openSet.isEmpty() && ++debug8 < debug10) {
             debug11 = this.openSet.pop();
@@ -81,7 +81,7 @@ public class PathFinder {
                 debug14.walkedDistance = ((Node)debug11).walkedDistance + debug15;
                 float debug16 = ((Node)debug11).g + debug15 + debug14.costMalus;
                 if (!(debug14.walkedDistance < debug3) || debug14.inOpenSet() && !(debug16 < debug14.g)) continue;
-                debug14.cameFrom = debug11;
+                debug14.cameFrom = (Node) debug11; // MagmaCube - decompile fix
                 debug14.g = debug16;
                 debug14.h = this.getBestH(debug14, debug6) * 1.5f;
                 if (debug14.inOpenSet()) {
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
index 160721a1f08db6de72d38c99f0d203efdf35de84..288b7b2e810f21ecdb4dc27d981a9893cdc2d551 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
@@ -289,7 +289,7 @@ public class WalkNodeEvaluator extends NodeEvaluator
     }
     
     private boolean hasCollisions(final AABB debug1) {
-        return (boolean)this.collisionCache.computeIfAbsent((Object)debug1, debug2 -> !this.level.noCollision(this.mob, debug1));
+        return (boolean)this.collisionCache.computeIfAbsent(debug1, debug2 -> !this.level.noCollision(this.mob, debug1)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
index 4e04d80aca724c6c9de3ebc0811a7e59d9718adc..99f6c0babf394c0e3d7f94014c856fdfdeeb4237 100644
--- a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
+++ b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
@@ -36,14 +36,12 @@ public class PortalForcer
         final PoiManager debug3 = this.level.getPoiManager();
         final int debug4 = debug2 ? 16 : 128;
         debug3.ensureLoadedAndValid(this.level, debug1, debug4);
-        final Optional<PoiRecord> debug5 = debug3.getInSquare(debug0 -> debug0 == PoiType.NETHER_PORTAL, debug1, debug4, PoiManager.Occupancy.ANY).sorted(Comparator.comparingDouble(debug1 -> debug1.getPos().distSqr(debug1)).thenComparingInt(debug0 -> debug0.getPos().getY())).filter(debug1 -> this.level.getBlockState(debug1.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS)).findFirst();
-        final BlockPos debug6;
-        final BlockState debug7;
-        return debug5.map(debug1 -> {
-            debug6 = debug1.getPos();
+        final Optional<PoiRecord> debug5 = debug3.getInSquare(debug0 -> debug0 == PoiType.NETHER_PORTAL, debug1, debug4, PoiManager.Occupancy.ANY).sorted(Comparator.<PoiRecord>comparingDouble(debug1l -> debug1l.getPos().distSqr(debug1)).thenComparingInt(debug0 -> debug0.getPos().getY())).filter(debug1l -> this.level.getBlockState(debug1l.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS)).findFirst(); // MagmaCube - decompile fix
+        return debug5.map(debug1l -> { // MagmaCube - decompile fix
+            BlockPos debug6 = debug1l.getPos(); // MagmaCube - decompile fix
             this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(debug6), 3, debug6);
-            debug7 = this.level.getBlockState(debug6);
-            return BlockUtil.getLargestRectangleAround(debug6, debug7.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, debug2 -> this.level.getBlockState(debug2) == debug7);
+            BlockState debug7 = this.level.getBlockState(debug6); // MagmaCube - decompile fix
+            return BlockUtil.getLargestRectangleAround(debug6, debug7.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, debug2l -> this.level.getBlockState(debug2l) == debug7); // MagmaCube - decompile fix
         });
     }
     
@@ -120,7 +118,7 @@ public class PortalForcer
                 }
             }
         }
-        final BlockState debug22 = ((StateHolder<O, BlockState>)Blocks.NETHER_PORTAL.defaultBlockState()).setValue(NetherPortalBlock.AXIS, debug2);
+        final BlockState debug22 = Blocks.NETHER_PORTAL.defaultBlockState().setValue(NetherPortalBlock.AXIS, debug2); // MagmaCube - decompile fix
         for (int debug19 = 0; debug19 < 2; ++debug19) {
             for (int debug12 = 0; debug12 < 3; ++debug12) {
                 debug10.setWithOffset(debug5, debug19 * debug3.getStepX(), debug12, debug19 * debug3.getStepZ());
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapIndex.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapIndex.java
index a51466228c8c898f43ff2a7efc4851bb6939b47e..2c5216d6e778ba9a0cf75ad47facd7a274c85e61 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapIndex.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapIndex.java
@@ -21,7 +21,7 @@ public class MapIndex extends SavedData
         this.usedAuxIds.clear();
         for (final String debug2 : debug1.getAllKeys()) {
             if (debug1.contains(debug2, 99)) {
-                this.usedAuxIds.put((Object)debug2, debug1.getInt(debug2));
+                this.usedAuxIds.put(debug2, debug1.getInt(debug2)); // MagmaCube - decompile fix
             }
         }
     }
@@ -36,7 +36,7 @@ public class MapIndex extends SavedData
     
     public int getFreeAuxValueForMap() {
         final int debug1 = this.usedAuxIds.getInt((Object)"map") + 1;
-        this.usedAuxIds.put((Object)"map", debug1);
+        this.usedAuxIds.put("map", debug1); // MagmaCube - decompile fix
         this.setDirty();
         return debug1;
     }
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
index 003162d1bc1298cebf6c0c13b675dba29fbabcf3..c20143eb8a6733d2d46cfd0d53228a571ff3d139 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -114,7 +114,7 @@ extends SavedData {
 
     @Override
     public CompoundTag save(CompoundTag debug12) {
-        ResourceLocation.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, (Object)this.dimension.location()).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("dimension", (Tag)debug1));
+        ResourceLocation.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, this.dimension.location()).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("dimension", (Tag)debug1)); // MagmaCube - decompile fix
         debug12.putInt("xCenter", this.x);
         debug12.putInt("zCenter", this.z);
         debug12.putByte("scale", this.scale);
@@ -149,7 +149,6 @@ extends SavedData {
         CompoundTag debug3;
         Object debug6;
         Object debug5;
-        Object debug4;
         if (!this.carriedByPlayers.containsKey(debug1)) {
             HoldingPlayer debug32 = new HoldingPlayer(debug1);
             this.carriedByPlayers.put(debug1, debug32);
@@ -159,7 +158,7 @@ extends SavedData {
             this.decorations.remove(debug1.getName().getString());
         }
         for (int debug33 = 0; debug33 < this.carriedBy.size(); ++debug33) {
-            debug4 = this.carriedBy.get(debug33);
+            HoldingPlayer debug4 = this.carriedBy.get(debug33); // MagmaCube - decompile fix
             debug5 = ((HoldingPlayer)debug4).player.getName().getString();
             if (debug4.player.removed || !debug4.player.inventory.contains(debug2) && !debug2.isFramed()) {
                 this.carriedByPlayers.remove(((HoldingPlayer)debug4).player);
@@ -172,7 +171,7 @@ extends SavedData {
         }
         if (debug2.isFramed() && this.trackingPosition) {
             ItemFrame debug34 = debug2.getFrame();
-            debug4 = debug34.getPos();
+            BlockPos debug4 = debug34.getPos(); // MagmaCube - decompile fix
             debug5 = this.frameMarkers.get(MapFrame.frameId((BlockPos)debug4));
             if (debug5 != null && debug34.getId() != ((MapFrame)debug5).getEntityId() && this.frameMarkers.containsKey(((MapFrame)debug5).getId())) {
                 this.decorations.remove("frame-" + ((MapFrame)debug5).getEntityId());
@@ -182,7 +181,7 @@ extends SavedData {
             this.frameMarkers.put(((MapFrame)debug6).getId(), (MapFrame)debug6);
         }
         if ((debug3 = debug2.getTag()) != null && debug3.contains("Decorations", 9)) {
-            debug4 = debug3.getList("Decorations", 10);
+            ListTag debug4 = debug3.getList("Decorations", 10); // MagmaCube - decompile fix
             for (int debug52 = 0; debug52 < ((ListTag)debug4).size(); ++debug52) {
                 debug6 = ((ListTag)debug4).getCompound(debug52);
                 if (this.decorations.containsKey(((CompoundTag)debug6).getString("id"))) continue;
diff --git a/src/main/java/net/minecraft/world/level/storage/CommandStorage.java b/src/main/java/net/minecraft/world/level/storage/CommandStorage.java
index 4e00bf6d58f81fc11f1b7522b7dfa220019c6e76..c04df0eba297c4f5f3830fc03adcd15ae2220312 100644
--- a/src/main/java/net/minecraft/world/level/storage/CommandStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/CommandStorage.java
@@ -15,7 +15,7 @@ public class CommandStorage
     private final DimensionDataStorage storage;
     
     public CommandStorage(final DimensionDataStorage debug1) {
-        this.namespaces = (Map<String, Container>)Maps.newHashMap();
+        this.namespaces = Maps.newHashMap(); // MagmaCube - decompile fix
         this.storage = debug1;
     }
     
@@ -52,7 +52,7 @@ public class CommandStorage
         
         public Container(final String debug1) {
             super(debug1);
-            this.storage = (Map<String, CompoundTag>)Maps.newHashMap();
+            this.storage = Maps.newHashMap(); // MagmaCube - decompile fix
         }
         
         @Override
@@ -66,7 +66,7 @@ public class CommandStorage
         @Override
         public CompoundTag save(final CompoundTag debug1) {
             final CompoundTag debug3 = new CompoundTag();
-            this.storage.forEach((debug1, debug2) -> debug3.put(debug1, debug2.copy()));
+            this.storage.forEach((debug1l, debug2) -> debug3.put(debug1l, debug2.copy())); // MagmaCube - decompile fix
             debug1.put("contents", debug3);
             return debug1;
         }
@@ -87,7 +87,7 @@ public class CommandStorage
         }
         
         public Stream<ResourceLocation> getKeys(final String debug1) {
-            return this.storage.keySet().stream().map(debug1 -> new ResourceLocation(debug1, debug1));
+            return this.storage.keySet().stream().map(debug1l -> new ResourceLocation(debug1, debug1l)); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java b/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
index c289104fa3efb3596b664d41c4b4a704efd059ba..43ea3cb92ac64a668a20c6111d0d4c701d7cd69f 100644
--- a/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
@@ -30,7 +30,7 @@ public class DimensionDataStorage
     private final File dataFolder;
     
     public DimensionDataStorage(final File debug1, final DataFixer debug2) {
-        this.cache = (Map<String, SavedData>)Maps.newHashMap();
+        this.cache = Maps.newHashMap(); // MagmaCube - decompile fix
         this.fixerUpper = debug2;
         this.dataFolder = debug1;
     }
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index 207e6072a8513bba90240c96cc3686c3da51f3db..470a40ca1885b9c9066de806708c173d0d34a942 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -22,6 +22,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.Lifecycle;
@@ -88,7 +89,7 @@ import org.apache.logging.log4j.Logger;
 public class LevelStorageSource {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final DateTimeFormatter FORMATTER = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral('-').appendValue(ChronoField.MONTH_OF_YEAR, 2).appendLiteral('-').appendValue(ChronoField.DAY_OF_MONTH, 2).appendLiteral('_').appendValue(ChronoField.HOUR_OF_DAY, 2).appendLiteral('-').appendValue(ChronoField.MINUTE_OF_HOUR, 2).appendLiteral('-').appendValue(ChronoField.SECOND_OF_MINUTE, 2).toFormatter();
-    private static final ImmutableList<String> OLD_SETTINGS_KEYS = ImmutableList.of((Object)"RandomSeed", (Object)"generatorName", (Object)"generatorOptions", (Object)"generatorVersion", (Object)"legacy_custom_options", (Object)"MapFeatures", (Object)"BonusChest");
+    private static final ImmutableList<String> OLD_SETTINGS_KEYS = ImmutableList.of("RandomSeed", "generatorName", "generatorOptions", "generatorVersion", "legacy_custom_options", "MapFeatures", "BonusChest"); // MagmaCube - decompile fix
     private final Path baseDir;
     private final Path backupDir;
     private final DataFixer fixerUpper;
@@ -110,21 +111,22 @@ public class LevelStorageSource {
     }
 
     private static <T> Pair<WorldGenSettings, Lifecycle> readWorldGenSettings(Dynamic<T> debug0, DataFixer debug1, int debug2) {
-        String debug52;
-        Dynamic debug3 = debug0.get("WorldGenSettings").orElseEmptyMap();
-        for (String debug52 : OLD_SETTINGS_KEYS) {
-            Optional debug6 = debug0.get(debug52).result();
+        // MagmaCube start - decompile fix
+        Dynamic<T> debug3 = debug0.get("WorldGenSettings").orElseEmptyMap(); // MagmaCube - decompile fix
+        for (String debug522 : OLD_SETTINGS_KEYS) {
+            Optional debug6 = debug0.get(debug522).result();
             if (!debug6.isPresent()) continue;
-            debug3 = debug3.set(debug52, (Dynamic)debug6.get());
+            debug3 = debug3.set(debug522, (Dynamic)debug6.get());
         }
-        Dynamic debug4 = debug1.update(References.WORLD_GEN_SETTINGS, debug3, debug2, SharedConstants.getCurrentVersion().getWorldVersion());
-        debug52 = WorldGenSettings.CODEC.parse(debug4);
-        return Pair.of((Object)debug52.resultOrPartial(Util.prefix("WorldGenSettings: ", ((Logger)LOGGER)::error)).orElseGet(() -> {
-            Registry debug1 = (Registry)RegistryLookupCodec.create(Registry.DIMENSION_TYPE_REGISTRY).codec().parse(debug4).resultOrPartial(Util.prefix("Dimension type registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get dimension registry"));
-            Registry debug2 = (Registry)RegistryLookupCodec.create(Registry.BIOME_REGISTRY).codec().parse(debug4).resultOrPartial(Util.prefix("Biome registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get biome registry"));
-            Registry debug3 = (Registry)RegistryLookupCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY).codec().parse(debug4).resultOrPartial(Util.prefix("Noise settings registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get noise settings registry"));
-            return WorldGenSettings.makeDefault(debug1, debug2, debug3);
-        }), (Object)debug52.lifecycle());
+        Dynamic<T> debug4 = debug1.update(References.WORLD_GEN_SETTINGS, debug3, debug2, SharedConstants.getCurrentVersion().getWorldVersion());
+        DataResult<WorldGenSettings> debug52 = WorldGenSettings.CODEC.parse(debug4);
+        return Pair.of(debug52.resultOrPartial(Util.prefix("WorldGenSettings: ", ((Logger)LOGGER)::error)).orElseGet(() -> {
+            Registry debug12 = (Registry)RegistryLookupCodec.create(Registry.DIMENSION_TYPE_REGISTRY).codec().parse(debug4).resultOrPartial(Util.prefix("Dimension type registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get dimension registry"));
+            Registry debug22 = (Registry)RegistryLookupCodec.create(Registry.BIOME_REGISTRY).codec().parse(debug4).resultOrPartial(Util.prefix("Biome registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get biome registry"));
+            Registry debug32 = (Registry)RegistryLookupCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY).codec().parse(debug4).resultOrPartial(Util.prefix("Noise settings registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get noise settings registry"));
+            return WorldGenSettings.makeDefault(debug12, debug22, debug32);
+        }), debug52.lifecycle());
+        // MagmaCube end - decompile end
     }
 
     private static DataPackConfig readDataPackConfig(Dynamic<?> debug0) {
@@ -182,7 +184,7 @@ public class LevelStorageSource {
             CompoundTag debug3 = debug2.getCompound("Data");
             debug3.remove("Player");
             int debug4 = debug3.contains("DataVersion", 99) ? debug3.getInt("DataVersion") : -1;
-            Dynamic debug5 = debug1.update(DataFixTypes.LEVEL.getType(), new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug3), debug4, SharedConstants.getCurrentVersion().getWorldVersion());
+            Dynamic<CompoundTag> debug5 = debug1.update(DataFixTypes.LEVEL.getType(), new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug3), debug4, SharedConstants.getCurrentVersion().getWorldVersion()); // MagmaCube - decompile fix
             return debug5.get("DataPacks").result().map(LevelStorageSource::readDataPackConfig).orElse(DataPackConfig.DEFAULT);
         }
         catch (Exception debug2) {
@@ -219,7 +221,7 @@ public class LevelStorageSource {
                 CompoundTag debug6 = debug5.getCompound("Data");
                 debug6.remove("Player");
                 int debug7 = debug6.contains("DataVersion", 99) ? debug6.getInt("DataVersion") : -1;
-                Dynamic debug8 = debug4.update(DataFixTypes.LEVEL.getType(), new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug6), debug7, SharedConstants.getCurrentVersion().getWorldVersion());
+                Dynamic<CompoundTag> debug8 = debug4.update(DataFixTypes.LEVEL.getType(), new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug6), debug7, SharedConstants.getCurrentVersion().getWorldVersion()); // MagmaCube - decompile fix
                 LevelVersion debug9 = LevelVersion.parse(debug8);
                 int debug10 = debug9.levelDataVersion();
                 if (debug10 == 19132 || debug10 == 19133) {
@@ -385,16 +387,6 @@ public class LevelStorageSource {
                             Files.delete(debug12);
                             return FileVisitResult.CONTINUE;
                         }
-
-                        @Override
-                        public /* synthetic */ FileVisitResult postVisitDirectory(Object object, IOException iOException) throws IOException {
-                            return this.postVisitDirectory((Path)object, iOException);
-                        }
-
-                        @Override
-                        public /* synthetic */ FileVisitResult visitFile(Object object, BasicFileAttributes basicFileAttributes) throws IOException {
-                            return this.visitFile((Path)object, basicFileAttributes);
-                        }
                     });
                     break;
                 }
@@ -447,18 +439,13 @@ public class LevelStorageSource {
                         if (debug1.endsWith("session.lock")) {
                             return FileVisitResult.CONTINUE;
                         }
-                        String debug3 = debug6.resolve(LevelStorageAccess.this.levelPath.relativize(debug1)).toString().replace('Â¥Â¥', '/');
+                        String debug3 = debug6.resolve(LevelStorageAccess.this.levelPath.relativize(debug1)).toString().replace('\\', '/'); // MagmaCube - decompile fix
                         ZipEntry debug42 = new ZipEntry(debug3);
                         debug4.putNextEntry(debug42);
                         com.google.common.io.Files.asByteSource((File)debug1.toFile()).copyTo((OutputStream)debug4);
                         debug4.closeEntry();
                         return FileVisitResult.CONTINUE;
                     }
-
-                    @Override
-                    public /* synthetic */ FileVisitResult visitFile(Object object, BasicFileAttributes basicFileAttributes) throws IOException {
-                        return this.visitFile((Path)object, basicFileAttributes);
-                    }
                 });
             }
             return Files.size(debug3);
diff --git a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
index 74ccec94d3d3484149707264053d392fd593eccd..ad11d186c144ca351c97071ef87c2810f8a4f03c 100644
--- a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -159,7 +159,7 @@ WorldData {
         debug2.put("Version", debug5);
         debug2.putInt("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
         RegistryWriteOps<Tag> debug6 = RegistryWriteOps.create(NbtOps.INSTANCE, debug12);
-        WorldGenSettings.CODEC.encodeStart(debug6, (Object)this.worldGenSettings).resultOrPartial(Util.prefix("WorldGenSettings: ", ((Logger)LOGGER)::error)).ifPresent(debug1 -> debug2.put("WorldGenSettings", (Tag)debug1));
+        WorldGenSettings.CODEC.encodeStart(debug6, this.worldGenSettings).resultOrPartial(Util.prefix("WorldGenSettings: ", ((Logger)LOGGER)::error)).ifPresent(debug1 -> debug2.put("WorldGenSettings", (Tag)debug1)); // MagmaCube - decompile fix
         debug2.putInt("GameType", this.settings.gameType().getId());
         debug2.putInt("SpawnX", this.xSpawn);
         debug2.putInt("SpawnY", this.ySpawn);
@@ -186,7 +186,7 @@ WorldData {
         if (debug3 != null) {
             debug2.put("Player", debug3);
         }
-        DataPackConfig.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, (Object)this.settings.getDataPackConfig()).result().ifPresent(debug1 -> debug2.put("DataPacks", (Tag)debug1));
+        DataPackConfig.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, this.settings.getDataPackConfig()).result().ifPresent(debug1 -> debug2.put("DataPacks", (Tag)debug1)); // MagmaCube - decompile fix
         if (this.customBossEvents != null) {
             debug2.put("CustomBossEvents", this.customBossEvents);
         }
diff --git a/src/main/java/net/minecraft/world/level/storage/WorldData.java b/src/main/java/net/minecraft/world/level/storage/WorldData.java
index 4fb15e302f5db24e31d7258f907dc88029d00283..f02771616fb9ffcb20dc30532b3f39e11e9556ed 100644
--- a/src/main/java/net/minecraft/world/level/storage/WorldData.java
+++ b/src/main/java/net/minecraft/world/level/storage/WorldData.java
@@ -36,8 +36,8 @@ public interface WorldData {
         debug1.setDetail("Known server brands", () -> String.join((CharSequence)", ", this.getKnownServerBrands()));
         debug1.setDetail("Level was modded", () -> Boolean.toString(this.wasModded()));
         debug1.setDetail("Level storage version", () -> {
-            int debug1 = this.getVersion();
-            return String.format("0x%05X - %s", debug1, this.getStorageVersionName(debug1));
+            int debug1l = this.getVersion(); // MagmaCube - decompile fix
+            return String.format("0x%05X - %s", debug1l, this.getStorageVersionName(debug1l)); // MagmaCube - decompile fix
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/IntLimiter.java b/src/main/java/net/minecraft/world/level/storage/loot/IntLimiter.java
index 9acfc4b6f86fbf8139b8807c546ec2f489f1389f..683bebcbc23f59e3dd6728d8ee4b521e6b27c6a5 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/IntLimiter.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/IntLimiter.java
@@ -28,19 +28,17 @@ public class IntLimiter implements IntUnaryOperator
             }
             else {
                 final int debug3 = debug2;
-                this.op = (debug1 -> Math.min(debug3, debug1));
+                this.op = (debug1l -> Math.min(debug3, debug1l)); // MagmaCube - decompile fix
             }
         }
         else {
             final int debug3 = debug1;
             if (debug2 == null) {
-                final int debug4;
-                this.op = (debug1 -> Math.max(debug4, debug1));
+                this.op = (debug1l -> Math.max(debug3, debug1l)); // MagmaCube - decompile fix
             }
             else {
                 final int debug5 = debug2;
-                final int debug4;
-                this.op = (debug2 -> Mth.clamp(debug2, debug4, debug5));
+                this.op = (debug2l -> Mth.clamp(debug2l, debug3, debug5)); // MagmaCube - decompile fix
             }
         }
     }
@@ -68,7 +66,7 @@ public class IntLimiter implements IntUnaryOperator
             final JsonObject debug4 = GsonHelper.convertToJsonObject(debug1, "value");
             final Integer debug5 = debug4.has("min") ? GsonHelper.getAsInt(debug4, "min") : null;
             final Integer debug6 = debug4.has("max") ? GsonHelper.getAsInt(debug4, "max") : null;
-            return new IntLimiter(debug5, debug6, null);
+            return new IntLimiter(debug5, debug6); // MagmaCube - decompile fix
         }
         
         public JsonElement serialize(final IntLimiter debug1, final Type debug2, final JsonSerializationContext debug3) {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java b/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java
index ae45fda735e59efabfc0a90b3d642f96c5579019..65559cfb48cb1a965e9ce6c6d079d424a471471f 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java
@@ -145,14 +145,6 @@ public class LootContext {
             public EntityTarget read(JsonReader debug1) throws IOException {
                 return EntityTarget.getByName(debug1.nextString());
             }
-
-            public /* synthetic */ Object read(JsonReader jsonReader) throws IOException {
-                return this.read(jsonReader);
-            }
-
-            public /* synthetic */ void write(JsonWriter jsonWriter, Object object) throws IOException {
-                this.write(jsonWriter, (EntityTarget)((Object)object));
-            }
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootContextUser.java b/src/main/java/net/minecraft/world/level/storage/loot/LootContextUser.java
index 81a33023a3308525ce0fa80c15671050866fcf28..1bfe6bfcbe11f409f13e568bb073654c1643f690 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootContextUser.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootContextUser.java
@@ -7,7 +7,7 @@ import java.util.Set;
 public interface LootContextUser
 {
     default Set<LootContextParam<?>> getReferencedContextParams() {
-        return (Set<LootContextParam<?>>)ImmutableSet.of();
+        return ImmutableSet.of(); // MagmaCube - decompile fix
     }
     
     default void validate(final ValidationContext debug1) {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootPool.java b/src/main/java/net/minecraft/world/level/storage/loot/LootPool.java
index e5d3a3abf1fbf3b1385d815dc2a440a8c9d9b456..b0401076840b8f8e5e9c4c6979c58862a96ecde1 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootPool.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootPool.java
@@ -70,14 +70,14 @@ public class LootPool {
 
     private void addRandomItem(Consumer<ItemStack> debug1, LootContext debug2) {
         Random debug32 = debug2.getRandom();
-        ArrayList debug4 = Lists.newArrayList();
+        ArrayList<LootPoolEntry> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
         MutableInt debug5 = new MutableInt();
         for (LootPoolEntryContainer lootPoolEntryContainer : this.entries) {
             lootPoolEntryContainer.expand(debug2, debug3 -> {
-                int debug4 = debug3.getWeight(debug5.getLuck());
-                if (debug4 > 0) {
+                int i = debug3.getWeight(debug2.getLuck()); // MagmaCube - decompile fix
+                if (i > 0) { // MagmaCube - decompile fix
                     debug4.add(debug3);
-                    debug5.add(debug4);
+                    debug5.add(i); // MagmaCube - decompile fix
                 }
             });
         }
@@ -154,14 +154,6 @@ public class LootPool {
             }
             return debug4;
         }
-
-        public /* synthetic */ JsonElement serialize(Object object, Type type, JsonSerializationContext jsonSerializationContext) {
-            return this.serialize((LootPool)object, type, jsonSerializationContext);
-        }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 
     public static class Builder
@@ -206,21 +198,6 @@ public class LootPool {
             }
             return new LootPool(this.entries.toArray(new LootPoolEntryContainer[0]), this.conditions.toArray(new LootItemCondition[0]), this.functions.toArray(new LootItemFunction[0]), this.rolls, this.bonusRolls);
         }
-
-        @Override
-        public /* synthetic */ Object unwrap() {
-            return this.unwrap();
-        }
-
-        @Override
-        public /* synthetic */ Object apply(LootItemFunction.Builder builder) {
-            return this.apply(builder);
-        }
-
-        @Override
-        public /* synthetic */ Object when(LootItemCondition.Builder builder) {
-            return this.when(builder);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java b/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
index 955fe6faf021a9ff8037063576d3fc1dffa66ff7..eeccc1800ab062ff844a5361507940dfd09fc6fe 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
@@ -25,10 +25,7 @@ import com.google.gson.JsonParseException;
 import com.google.gson.JsonSerializationContext;
 import com.google.gson.JsonSerializer;
 import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Random;
+import java.util.*;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import net.minecraft.resources.ResourceLocation;
@@ -134,18 +131,15 @@ public class LootTable {
     }
 
     private void shuffleAndSplitItems(List<ItemStack> debug1, int debug2, Random debug3) {
-        ArrayList debug4 = Lists.newArrayList();
-        Object debug5 = debug1.iterator();
-        while (debug5.hasNext()) {
-            ItemStack debug6 = debug5.next();
+        ArrayList<ItemStack> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
+        for (ItemStack debug6 : debug1) { // MagmaCube - decompile fix
             if (debug6.isEmpty()) {
-                debug5.remove();
                 continue;
             }
             if (debug6.getCount() <= 1) continue;
             debug4.add(debug6);
-            debug5.remove();
         }
+        ItemStack debug5; // MagmaCube - decompile fix
         while (debug2 - debug1.size() - debug4.size() > 0 && !debug4.isEmpty()) {
             debug5 = (ItemStack)debug4.remove(Mth.nextInt(debug3, 0, debug4.size() - 1));
             int debug6 = Mth.nextInt(debug3, 1, ((ItemStack)debug5).getCount() / 2);
@@ -183,15 +177,14 @@ public class LootTable {
     implements JsonDeserializer<LootTable>,
     JsonSerializer<LootTable> {
         public LootTable deserialize(JsonElement debug1, Type debug2, JsonDeserializationContext debug3) throws JsonParseException {
-            LootItemFunction[] debug7;
             JsonObject debug4 = GsonHelper.convertToJsonObject(debug1, "loot table");
             LootPool[] debug5 = GsonHelper.getAsObject(debug4, "pools", new LootPool[0], debug3, LootPool[].class);
             LootContextParamSet debug6 = null;
             if (debug4.has("type")) {
-                debug7 = GsonHelper.getAsString(debug4, "type");
+                String debug7 = GsonHelper.getAsString(debug4, "type"); // MagmaCube - decompile fix
                 debug6 = LootContextParamSets.get(new ResourceLocation((String)debug7));
             }
-            debug7 = GsonHelper.getAsObject(debug4, "functions", new LootItemFunction[0], debug3, LootItemFunction[].class);
+            LootItemFunction[] debug7 = GsonHelper.getAsObject(debug4, "functions", new LootItemFunction[0], debug3, LootItemFunction[].class); // MagmaCube - decompile fix
             return new LootTable(debug6 != null ? debug6 : LootContextParamSets.ALL_PARAMS, debug5, debug7);
         }
 
@@ -213,14 +206,6 @@ public class LootTable {
             }
             return debug4;
         }
-
-        public /* synthetic */ JsonElement serialize(Object object, Type type, JsonSerializationContext jsonSerializationContext) {
-            return this.serialize((LootTable)object, type, jsonSerializationContext);
-        }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 
     public static class Builder
@@ -253,16 +238,6 @@ public class LootTable {
         public LootTable build() {
             return new LootTable(this.paramSet, this.pools.toArray(new LootPool[0]), this.functions.toArray(new LootItemFunction[0]));
         }
-
-        @Override
-        public /* synthetic */ Object unwrap() {
-            return this.unwrap();
-        }
-
-        @Override
-        public /* synthetic */ Object apply(LootItemFunction.Builder builder) {
-            return this.apply(builder);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootTables.java b/src/main/java/net/minecraft/world/level/storage/loot/LootTables.java
index 10f735761e383862789248490bbae9fbfe6bdb1c..7a11b5b94562491d8bdc821dcbe0b8790ac04f8f 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootTables.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootTables.java
@@ -22,7 +22,7 @@ public class LootTables extends SimpleJsonResourceReloadListener
     
     public LootTables(final PredicateManager debug1) {
         super(LootTables.GSON, "loot_tables");
-        this.tables = (Map<ResourceLocation, LootTable>)ImmutableMap.of();
+        this.tables = ImmutableMap.of(); // MagmaCube - decompile fix
         this.predicateManager = debug1;
     }
     
@@ -32,28 +32,26 @@ public class LootTables extends SimpleJsonResourceReloadListener
     
     @Override
     protected void apply(final Map<ResourceLocation, JsonElement> debug1, final ResourceManager debug2, final ProfilerFiller debug3) {
-        final ImmutableMap.Builder<ResourceLocation, LootTable> debug4 = (ImmutableMap.Builder<ResourceLocation, LootTable>)ImmutableMap.builder();
+        final ImmutableMap.Builder<ResourceLocation, LootTable> debug4 = ImmutableMap.builder(); // MagmaCube - decompile fix
         final JsonElement debug5 = debug1.remove(BuiltInLootTables.EMPTY);
         if (debug5 != null) {
             LootTables.LOGGER.warn("Datapack tried to redefine {} loot table, ignoring", (Object)BuiltInLootTables.EMPTY);
         }
-        LootTable debug6;
-        final ImmutableMap.Builder builder;
-        debug1.forEach((debug1, debug2) -> {
+        debug1.forEach((debug1l, debug2l) -> { // MagmaCube - decompile fix
             try {
-                debug6 = (LootTable)LootTables.GSON.fromJson(debug2, (Class)LootTable.class);
-                builder.put((Object)debug1, (Object)debug6);
+                LootTable debug6 = (LootTable)LootTables.GSON.fromJson(debug2l, LootTable.class); // MagmaCube - decompile fix
+                debug4.put(debug1l, debug6); // MagmaCube - decompile fix
             }
             catch (Exception debug7) {
-                LootTables.LOGGER.error("Couldn't parse loot table {}", (Object)debug1, (Object)debug7);
+                LootTables.LOGGER.error("Couldn't parse loot table {}", (Object)debug1l, debug7); // MagmaCube - decompile fix
             }
             return;
         });
-        debug4.put((Object)BuiltInLootTables.EMPTY, (Object)LootTable.EMPTY);
+        debug4.put(BuiltInLootTables.EMPTY, LootTable.EMPTY); // MagmaCube - decompile fix
         final ImmutableMap<ResourceLocation, LootTable> debug8 = (ImmutableMap<ResourceLocation, LootTable>)debug4.build();
         final ValidationContext debug9 = new ValidationContext(LootContextParamSets.ALL_PARAMS, this.predicateManager::get, debug8::get);
-        debug8.forEach((debug1, debug2) -> validate(debug9, debug1, debug2));
-        debug9.getProblems().forEach((debug0, debug1) -> LootTables.LOGGER.warn("Found validation problem in " + debug0 + ": " + debug1));
+        debug8.forEach((debug1l, debug2l) -> validate(debug9, debug1l, debug2l)); // MagmaCube - decompile fix
+        debug9.getProblems().forEach((debug0, debug1l) -> LootTables.LOGGER.warn("Found validation problem in " + debug0 + ": " + debug1l)); // MagmaCube - decompile fix
         this.tables = (Map<ResourceLocation, LootTable>)debug8;
     }
     
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/PredicateManager.java b/src/main/java/net/minecraft/world/level/storage/loot/PredicateManager.java
index e048318c90125bf4b1f6f47d04049c198400293f..70b137b18dcfccd4d5de52fc10a3dc65adf93993 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/PredicateManager.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/PredicateManager.java
@@ -27,7 +27,7 @@ public class PredicateManager extends SimpleJsonResourceReloadListener
     
     public PredicateManager() {
         super(PredicateManager.GSON, "predicates");
-        this.conditions = (Map<ResourceLocation, LootItemCondition>)ImmutableMap.of();
+        this.conditions = ImmutableMap.of(); // MagmaCube - decompile fix
     }
     
     @Nullable
@@ -37,30 +37,27 @@ public class PredicateManager extends SimpleJsonResourceReloadListener
     
     @Override
     protected void apply(final Map<ResourceLocation, JsonElement> debug1, final ResourceManager debug2, final ProfilerFiller debug3) {
-        final ImmutableMap.Builder<ResourceLocation, LootItemCondition> debug4 = (ImmutableMap.Builder<ResourceLocation, LootItemCondition>)ImmutableMap.builder();
-        LootItemCondition[] debug5;
-        final ImmutableMap.Builder builder;
-        LootItemCondition debug6;
-        debug1.forEach((debug1, debug2) -> {
+        final ImmutableMap.Builder<ResourceLocation, LootItemCondition> debug4 = ImmutableMap.builder(); // MagmaCube - decompile fix
+        debug1.forEach((debug1l, debug2l) -> { // MagmaCube - decompile fix
             try {
-                if (debug2.isJsonArray()) {
-                    debug5 = (LootItemCondition[])PredicateManager.GSON.fromJson(debug2, (Class)LootItemCondition[].class);
-                    builder.put((Object)debug1, (Object)new CompositePredicate(debug5));
+                if (debug2l.isJsonArray()) { // MagmaCube - decompile fix
+                    LootItemCondition[] debug5 = (LootItemCondition[])PredicateManager.GSON.fromJson(debug2l, LootItemCondition[].class); // MagmaCube - decompile fix
+                    debug4.put(debug1l, new CompositePredicate(debug5)); // MagmaCube - decompile fix
                 }
                 else {
-                    debug6 = (LootItemCondition)PredicateManager.GSON.fromJson(debug2, (Class)LootItemCondition.class);
-                    builder.put((Object)debug1, (Object)debug6);
+                    LootItemCondition debug6 = (LootItemCondition)PredicateManager.GSON.fromJson(debug2l, LootItemCondition.class); // MagmaCube - decompile fix
+                    debug4.put(debug1l, debug6); // MagmaCube - decompile fix
                 }
             }
             catch (Exception debug7) {
-                PredicateManager.LOGGER.error("Couldn't parse loot table {}", (Object)debug1, (Object)debug7);
+                PredicateManager.LOGGER.error("Couldn't parse loot table {}", (Object)debug1l, debug7); // MagmaCube - decompile fix
             }
             return;
         });
         final Map<ResourceLocation, LootItemCondition> debug8 = (Map<ResourceLocation, LootItemCondition>)debug4.build();
         final ValidationContext debug9 = new ValidationContext(LootContextParamSets.ALL_PARAMS, debug8::get, debug0 -> null);
-        debug8.forEach((debug1, debug2) -> debug2.validate(debug9.enterCondition("{" + debug1 + "}", debug1)));
-        debug9.getProblems().forEach((debug0, debug1) -> PredicateManager.LOGGER.warn("Found validation problem in " + debug0 + ": " + debug1));
+        debug8.forEach((debug1l, debug2l) -> debug2l.validate(debug9.enterCondition("{" + debug1l + "}", debug1l))); // MagmaCube - decompile fix
+        debug9.getProblems().forEach((debug0, debug1l) -> PredicateManager.LOGGER.warn("Found validation problem in " + debug0 + ": " + debug1l)); // MagmaCube - decompile fix
         this.conditions = debug8;
     }
     
@@ -90,7 +87,7 @@ public class PredicateManager extends SimpleJsonResourceReloadListener
         
         @Override
         public void validate(final ValidationContext debug1) {
-            super.validate(debug1);
+            LootItemCondition.super.validate(debug1); // MagmaCube - decompile fix
             for (int debug2 = 0; debug2 < this.terms.length; ++debug2) {
                 this.terms[debug2].validate(debug1.forChild(".term[" + debug2 + "]"));
             }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java b/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
index 15ebea08bcdb0b01e876443d74b754ad3104729b..f7acccd2a55a4e6e201a3e17f1a503ab3dd7e99a 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
@@ -24,7 +24,7 @@ public class ValidationContext
     private String contextCache;
     
     public ValidationContext(final LootContextParamSet debug1, final Function<ResourceLocation, LootItemCondition> debug2, final Function<ResourceLocation, LootTable> debug3) {
-        this((Multimap<String, String>)HashMultimap.create(), () -> "", debug1, debug2, (Set<ResourceLocation>)ImmutableSet.of(), debug3, (Set<ResourceLocation>)ImmutableSet.of());
+        this(HashMultimap.create(), () -> "", debug1, debug2, ImmutableSet.of(), debug3, ImmutableSet.of()); // MagmaCube - decompile fix
     }
     
     public ValidationContext(final Multimap<String, String> debug1, final Supplier<String> debug2, final LootContextParamSet debug3, final Function<ResourceLocation, LootItemCondition> debug4, final Set<ResourceLocation> debug5, final Function<ResourceLocation, LootTable> debug6, final Set<ResourceLocation> debug7) {
@@ -45,7 +45,7 @@ public class ValidationContext
     }
     
     public void reportProblem(final String debug1) {
-        this.problems.put((Object)this.getContext(), (Object)debug1);
+        this.problems.put(this.getContext(), debug1); // MagmaCube - decompile fix
     }
     
     public ValidationContext forChild(final String debug1) {
@@ -53,12 +53,12 @@ public class ValidationContext
     }
     
     public ValidationContext enterTable(final String debug1, final ResourceLocation debug2) {
-        final ImmutableSet<ResourceLocation> debug3 = (ImmutableSet<ResourceLocation>)ImmutableSet.builder().addAll((Iterable)this.visitedTables).add((Object)debug2).build();
+        final ImmutableSet<ResourceLocation> debug3 = (ImmutableSet<ResourceLocation>) (Object) ImmutableSet.builder().addAll(this.visitedTables).add(debug2).build(); // MagmaCube - decompile fix
         return new ValidationContext(this.problems, () -> this.getContext() + debug1, this.params, this.conditionResolver, this.visitedConditions, this.tableResolver, (Set<ResourceLocation>)debug3);
     }
     
     public ValidationContext enterCondition(final String debug1, final ResourceLocation debug2) {
-        final ImmutableSet<ResourceLocation> debug3 = (ImmutableSet<ResourceLocation>)ImmutableSet.builder().addAll((Iterable)this.visitedConditions).add((Object)debug2).build();
+        final ImmutableSet<ResourceLocation> debug3 = (ImmutableSet<ResourceLocation>)(Object)ImmutableSet.builder().addAll(this.visitedConditions).add(debug2).build(); // MagmaCube - decompile fix
         return new ValidationContext(this.problems, () -> this.getContext() + debug1, this.params, this.conditionResolver, (Set<ResourceLocation>)debug3, this.tableResolver, this.visitedTables);
     }
     
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/AlternativesEntry.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/AlternativesEntry.java
index 8e8c6c5e1ef2c81ec9e49e2096df768fbb8f6e34..bb7b6835f82ff647f5d4addb17800a6052f30d66 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/AlternativesEntry.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/AlternativesEntry.java
@@ -32,14 +32,12 @@ public class AlternativesEntry extends CompositeEntryBase
                 return debug1[0].or(debug1[1]);
             }
             default: {
-                final int length;
-                int i;
-                ComposableEntryContainer debug3;
-                return (debug1, debug2) -> {
-                    length = debug1.length;
+                return (debug1l, debug2) -> { // MagmaCube - decompile fix
+                    int length = debug1.length; // MagmaCube - decompile fix
+                    int i = 0; // MagmaCube - decompile fix
                     while (i < length) {
-                        debug3 = debug1[i];
-                        if (debug3.expand(debug1, debug2)) {
+                        ComposableEntryContainer debug3 = debug1[i]; // MagmaCube - decompile fix
+                        if (debug3.expand(debug1l, debug2)) { // MagmaCube - decompile fix
                             return true;
                         }
                         else {
@@ -71,7 +69,7 @@ public class AlternativesEntry extends CompositeEntryBase
         private final List<LootPoolEntryContainer> entries;
         
         public Builder(final LootPoolEntryContainer.Builder<?>... debug1) {
-            this.entries = (List<LootPoolEntryContainer>)Lists.newArrayList();
+            this.entries = Lists.newArrayList(); // MagmaCube - decompile fix
             for (final LootPoolEntryContainer.Builder<?> debug2 : debug1) {
                 this.entries.add(debug2.build());
             }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/EmptyLootItem.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/EmptyLootItem.java
index cd1d7c60d14cc5156642e7bbee243a84d0483c3a..5d81268d3467c9b59b526a5ae375076274173c8c 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/EmptyLootItem.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/EmptyLootItem.java
@@ -29,7 +29,7 @@ public class EmptyLootItem extends LootPoolSingletonContainer
     public static class Serializer extends LootPoolSingletonContainer.Serializer<EmptyLootItem>
     {
         public EmptyLootItem deserialize(final JsonObject debug1, final JsonDeserializationContext debug2, final int debug3, final int debug4, final LootItemCondition[] debug5, final LootItemFunction[] debug6) {
-            return new EmptyLootItem(debug3, debug4, debug5, debug6, null);
+            return new EmptyLootItem(debug3, debug4, debug5, debug6); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootItem.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootItem.java
index ad2a30111f458a8bbcb65a6271a0a8132c1e27c3..ae7a82a19708841f579b67e532a7ec8071857858 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootItem.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootItem.java
@@ -51,7 +51,7 @@ public class LootItem extends LootPoolSingletonContainer
         @Override
         protected LootItem deserialize(final JsonObject debug1, final JsonDeserializationContext debug2, final int debug3, final int debug4, final LootItemCondition[] debug5, final LootItemFunction[] debug6) {
             final Item debug7 = GsonHelper.getAsItem(debug1, "name");
-            return new LootItem(debug7, debug3, debug4, debug5, debug6, null);
+            return new LootItem(debug7, debug3, debug4, debug5, debug6); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java
index 3bc49528c8990f909ef0a825d5a60b92fc9f62fb..d97eabce41161b9551531e8d422d3887788e3a9c 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java
@@ -42,7 +42,7 @@ public abstract class LootPoolEntryContainer implements ComposableEntryContainer
         private final List<LootItemCondition> conditions;
         
         public Builder() {
-            this.conditions = (List<LootItemCondition>)Lists.newArrayList();
+            this.conditions = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         protected abstract T getThis();
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
index 78d6fae98edd76197f40dd41a0cb1a723ba297f1..7347cb51bc30a2afb6ba40842011b12966676e9f 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
@@ -99,11 +99,6 @@ extends LootPoolEntryContainer {
         }
 
         protected abstract T deserialize(JsonObject var1, JsonDeserializationContext var2, int var3, int var4, LootItemCondition[] var5, LootItemFunction[] var6);
-
-        @Override
-        public /* synthetic */ LootPoolEntryContainer deserializeCustom(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserializeCustom(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 
     static class DummyBuilder
@@ -123,11 +118,6 @@ extends LootPoolEntryContainer {
         public LootPoolEntryContainer build() {
             return this.constructor.build(this.weight, this.quality, this.getConditions(), this.getFunctions());
         }
-
-        @Override
-        protected /* synthetic */ LootPoolEntryContainer.Builder getThis() {
-            return this.getThis();
-        }
     }
 
     @FunctionalInterface
@@ -161,11 +151,6 @@ extends LootPoolEntryContainer {
             this.quality = debug1;
             return (T)((Builder)this.getThis());
         }
-
-        @Override
-        public /* synthetic */ Object apply(LootItemFunction.Builder builder) {
-            return this.apply(builder);
-        }
     }
 
     public abstract class EntryBase
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/SequentialEntry.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/SequentialEntry.java
index 9db83549b24ea9b9cff698210e2f4b99d6899269..1dbcdd80996e160229f889f191b8b7f0b0416446 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/SequentialEntry.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/SequentialEntry.java
@@ -28,14 +28,12 @@ public class SequentialEntry extends CompositeEntryBase
                 return debug1[0].and(debug1[1]);
             }
             default: {
-                final int length;
-                int i;
-                ComposableEntryContainer debug3;
-                return (debug1, debug2) -> {
-                    length = debug1.length;
+                return (debug1l, debug2) -> { // MagmaCube - decompile fix
+                    int length = debug1.length; // MagmaCube - decompile fix
+                    int i = 0; // MagmaCube - decompile fix
                     while (i < length) {
-                        debug3 = debug1[i];
-                        if (!debug3.expand(debug1, debug2)) {
+                        ComposableEntryContainer debug3 = debug1[i]; // MagmaCube - decompile fix
+                        if (!debug3.expand(debug1l, debug2)) { // MagmaCube - decompile fix
                             return false;
                         }
                         else {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
index ab68ddab597e399524c4dd9a4aa644175f2ff6ff..b5a9923576b663c9dd668110cadea4b24a659c1a 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
@@ -117,11 +117,6 @@ extends LootItemConditionalFunction {
             Formula debug8 = debug1.has("parameters") ? debug7.deserialize(GsonHelper.getAsJsonObject(debug1, "parameters"), debug2) : debug7.deserialize(new JsonObject(), debug2);
             return new ApplyBonusCount(debug3, debug5, debug8);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 
     static final class OreDrops
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyExplosionDecay.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyExplosionDecay.java
index fa8f9f6bf84ff26a9e1fd609c6610b47bddcafff..38e8caca13d1f4fbc9a134d9a2a4e385d50f870d 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyExplosionDecay.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyExplosionDecay.java
@@ -56,11 +56,6 @@ extends LootItemConditionalFunction {
         public ApplyExplosionDecay deserialize(JsonObject debug1, JsonDeserializationContext debug2, LootItemCondition[] debug3) {
             return new ApplyExplosionDecay(debug3);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
index f979b6723b1abfda7c0575f6a6ed476bf0c30be3..6df8513f642eab2d071c1fc7c9ae6904f7b3b6d2 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
@@ -109,11 +109,6 @@ extends LootItemConditionalFunction {
             }
             return new CopyBlockState(debug3, debug5, debug7);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 
     public static class Builder
@@ -142,11 +137,6 @@ extends LootItemConditionalFunction {
         public LootItemFunction build() {
             return new CopyBlockState(this.getConditions(), this.block, this.properties);
         }
-
-        @Override
-        protected /* synthetic */ LootItemConditionalFunction.Builder getThis() {
-            return this.getThis();
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java
index d69a630558f6500870d7d79fc5a6895e54b8cd6f..8e230544612bd504b8cefd9dad17c3a704738925 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java
@@ -71,11 +71,6 @@ extends LootItemConditionalFunction {
             NameSource debug4 = NameSource.getByName(GsonHelper.getAsString(debug1, "source"));
             return new CopyNameFunction(debug3, debug4);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 
     public static enum NameSource {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java
index b6c07657f59c6e0f30b4f556003191691bf8a302..02833a63f135f5c0dc033e1ada9f043e452c766a 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java
@@ -24,6 +24,7 @@ import com.mojang.brigadier.StringReader;
 import net.minecraft.commands.arguments.NbtPathArgument;
 import java.util.Collection;
 import com.google.common.collect.ImmutableList;
+import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.nbt.Tag;
@@ -60,13 +61,13 @@ public class CopyNbtFunction extends LootItemConditionalFunction
     
     @Override
     public Set<LootContextParam<?>> getReferencedContextParams() {
-        return (Set<LootContextParam<?>>)ImmutableSet.of((Object)this.source.param);
+        return ImmutableSet.of(this.source.param); // MagmaCube - decompile fix
     }
     
     public ItemStack run(final ItemStack debug1, final LootContext debug2) {
         final Tag debug3 = this.source.getter.apply(debug2);
         if (debug3 != null) {
-            this.operations.forEach(debug2 -> debug2.apply((Supplier<Tag>)debug1::getOrCreateTag, debug3));
+            this.operations.forEach(debug22 -> debug22.apply((Supplier<Tag>)debug1::getOrCreateTag, debug3)); // MagmaCube - decompile fix
         }
         return debug1;
     }
@@ -128,7 +129,7 @@ public class CopyNbtFunction extends LootItemConditionalFunction
         private final List<CopyOperation> ops;
         
         private Builder(final DataSource debug1) {
-            this.ops = (List<CopyOperation>)Lists.newArrayList();
+            this.ops = Lists.newArrayList(); // MagmaCube - decompile fix
             this.source = debug1;
         }
         
@@ -148,7 +149,7 @@ public class CopyNbtFunction extends LootItemConditionalFunction
         
         @Override
         public LootItemFunction build() {
-            return new CopyNbtFunction(this.getConditions(), this.source, this.ops, null);
+            return new CopyNbtFunction(this.getConditions(), this.source, this.ops); // MagmaCube - decompile fix
         }
     }
     
@@ -157,16 +158,18 @@ public class CopyNbtFunction extends LootItemConditionalFunction
         REPLACE("replace") {
             @Override
             public void merge(final Tag debug1, final NbtPathArgument.NbtPath debug2, final List<Tag> debug3) throws CommandSyntaxException {
-                debug2.set(debug1, (Tag)Iterables.getLast((Iterable)debug3)::copy);
+                debug2.set(debug1, Iterables.getLast(debug3)::copy); // MagmaCube - decompile fix
             }
         }, 
         APPEND("append") {
             @Override
             public void merge(final Tag debug1, final NbtPathArgument.NbtPath debug2, final List<Tag> debug3) throws CommandSyntaxException {
                 final List<Tag> debug4 = debug2.getOrCreate(debug1, (Supplier<Tag>)ListTag::new);
-                debug4.forEach(debug1 -> {
-                    if (debug1 instanceof ListTag) {
-                        debug3.forEach(debug1 -> debug1.add(debug1.copy()));
+                // MagmaCube start - decompile fix
+                debug4.forEach(debug12 -> {
+                    if (debug12 instanceof ListTag) {
+                        debug3.forEach(debug13 -> ((ListTag) debug12).add(debug13.copy()));
+                        // MagmaCube end - decompile fix
                     }
                 });
             }
@@ -175,11 +178,13 @@ public class CopyNbtFunction extends LootItemConditionalFunction
             @Override
             public void merge(final Tag debug1, final NbtPathArgument.NbtPath debug2, final List<Tag> debug3) throws CommandSyntaxException {
                 final List<Tag> debug4 = debug2.getOrCreate(debug1, (Supplier<Tag>)CompoundTag::new);
-                debug4.forEach(debug1 -> {
-                    if (debug1 instanceof CompoundTag) {
-                        debug3.forEach(debug1 -> {
-                            if (debug1 instanceof CompoundTag) {
-                                debug1.merge(debug1);
+                // MagmaCube start - decompile fix
+                debug4.forEach(debug12 -> {
+                    if (debug12 instanceof CompoundTag) {
+                        debug3.forEach(debug122 -> {
+                            if (debug122 instanceof CompoundTag) {
+                                ((CompoundTag) debug12).merge((CompoundTag) debug122);
+                                // MagmaCube end - decompile fix
                             }
                         });
                     }
@@ -204,21 +209,38 @@ public class CopyNbtFunction extends LootItemConditionalFunction
             throw new IllegalArgumentException("Invalid merge strategy" + debug0);
         }
     }
-    
-    public enum DataSource
-    {
-        public static final DataSource THIS;
-        public static final DataSource KILLER;
-        public static final DataSource KILLER_PLAYER;
-        public static final DataSource BLOCK_ENTITY;
+
+    // MagmaCube start - decompile fix
+    public enum DataSource {
+        THIS("this", LootContextParams.THIS_ENTITY, CopyNbtFunction.ENTITY_GETTER),
+        KILLER("killer", LootContextParams.KILLER_ENTITY, CopyNbtFunction.ENTITY_GETTER),
+        KILLER_PLAYER("killer_player", LootContextParams.LAST_DAMAGE_PLAYER, CopyNbtFunction.ENTITY_GETTER),
+        BLOCK_ENTITY("block_entity", LootContextParams.BLOCK_ENTITY, CopyNbtFunction.BLOCK_ENTITY_GETTER);
+
         public final String name;
+
         public final LootContextParam<?> param;
+
         public final Function<LootContext, Tag> getter;
-        
-        private DataSource(final String debug3, final LootContextParam<T> debug4, final Function<? super T, Tag> debug5);
-        
-        public static DataSource getByName(final String debug0);
+
+        <T> DataSource(String debug3, LootContextParam<T> debug4, Function<? super T, Tag> debug5) {
+            this.name = debug3;
+            this.param = debug4;
+            this.getter = (debug2 -> {
+                T debug32 = (T)debug2.getParamOrNull(debug4);
+                return (debug32 != null) ? debug5.apply(debug32) : null;
+            });
+        }
+
+        public static DataSource getByName(String debug0) {
+            for (DataSource debug4 : values()) {
+                if (debug4.name.equals(debug0))
+                    return debug4;
+            }
+            throw new IllegalArgumentException("Invalid tag source " + debug0);
+        }
     }
+    // MagmaCube end - decompile fix
     
     public static class Serializer extends LootItemConditionalFunction.Serializer<CopyNbtFunction>
     {
@@ -234,13 +256,13 @@ public class CopyNbtFunction extends LootItemConditionalFunction
         @Override
         public CopyNbtFunction deserialize(final JsonObject debug1, final JsonDeserializationContext debug2, final LootItemCondition[] debug3) {
             final DataSource debug4 = DataSource.getByName(GsonHelper.getAsString(debug1, "source"));
-            final List<CopyOperation> debug5 = (List<CopyOperation>)Lists.newArrayList();
+            final List<CopyOperation> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
             final JsonArray debug6 = GsonHelper.getAsJsonArray(debug1, "ops");
             for (final JsonElement debug7 : debug6) {
                 final JsonObject debug8 = GsonHelper.convertToJsonObject(debug7, "op");
                 debug5.add(CopyOperation.fromJson(debug8));
             }
-            return new CopyNbtFunction(debug3, debug4, debug5, null);
+            return new CopyNbtFunction(debug3, debug4, debug5); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
index 64a99a9c4632f2aef36cb9b3360d48b4da0516bf..e1ca4b4a4721c6c352833d06a2fee1908e46d160 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
@@ -96,7 +96,7 @@ extends LootItemConditionalFunction {
     }
 
     public static LootItemConditionalFunction.Builder<?> randomApplicableEnchantment() {
-        return EnchantRandomlyFunction.simpleBuilder(debug0 -> new EnchantRandomlyFunction((LootItemCondition[])debug0, (Collection<Enchantment>)ImmutableList.of()));
+        return EnchantRandomlyFunction.simpleBuilder(debug0 -> new EnchantRandomlyFunction((LootItemCondition[])debug0, ImmutableList.of())); // MagmaCube - decompile fix
     }
 
     public static class Serializer
@@ -130,11 +130,6 @@ extends LootItemConditionalFunction {
             }
             return new EnchantRandomlyFunction(debug3, debug4);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 
     public static class Builder
@@ -155,11 +150,6 @@ extends LootItemConditionalFunction {
         public LootItemFunction build() {
             return new EnchantRandomlyFunction(this.getConditions(), this.enchantments);
         }
-
-        @Override
-        protected /* synthetic */ LootItemConditionalFunction.Builder getThis() {
-            return this.getThis();
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantWithLevelsFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantWithLevelsFunction.java
index b609b6727ce54efe89c8013b0b2b2ff0a999c0c8..0f54b93116133cc713e3ac53ce4db5f9e92ee0b8 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantWithLevelsFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantWithLevelsFunction.java
@@ -58,7 +58,7 @@ public class EnchantWithLevelsFunction extends LootItemConditionalFunction
         
         @Override
         public LootItemFunction build() {
-            return new EnchantWithLevelsFunction(this.getConditions(), this.levels, this.treasure, null);
+            return new EnchantWithLevelsFunction(this.getConditions(), this.levels, this.treasure); // MagmaCube - decompile fix
         }
     }
     
@@ -75,7 +75,7 @@ public class EnchantWithLevelsFunction extends LootItemConditionalFunction
         public EnchantWithLevelsFunction deserialize(final JsonObject debug1, final JsonDeserializationContext debug2, final LootItemCondition[] debug3) {
             final RandomIntGenerator debug4 = RandomIntGenerators.deserialize(debug1.get("levels"), debug2);
             final boolean debug5 = GsonHelper.getAsBoolean(debug1, "treasure", false);
-            return new EnchantWithLevelsFunction(debug3, debug4, debug5, null);
+            return new EnchantWithLevelsFunction(debug3, debug4, debug5); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction.java
index 25184d1ed78070b33c7e23e966533711ded97226..b29e55e3acb00fb84a22e2f227761d2f53797fb6 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction.java
@@ -53,7 +53,7 @@ public class ExplorationMapFunction extends LootItemConditionalFunction
     
     @Override
     public Set<LootContextParam<?>> getReferencedContextParams() {
-        return (Set<LootContextParam<?>>)ImmutableSet.of((Object)LootContextParams.ORIGIN);
+        return ImmutableSet.of(LootContextParams.ORIGIN); // MagmaCube - decompile fix
     }
     
     public ItemStack run(final ItemStack debug1, final LootContext debug2) {
@@ -128,7 +128,7 @@ public class ExplorationMapFunction extends LootItemConditionalFunction
         
         @Override
         public LootItemFunction build() {
-            return new ExplorationMapFunction(this.getConditions(), this.destination, this.mapDecoration, this.zoom, this.searchRadius, this.skipKnownStructures, null);
+            return new ExplorationMapFunction(this.getConditions(), this.destination, this.mapDecoration, this.zoom, this.searchRadius, this.skipKnownStructures); // MagmaCube - decompile fix
         }
     }
     
@@ -168,7 +168,7 @@ public class ExplorationMapFunction extends LootItemConditionalFunction
             final byte debug7 = GsonHelper.getAsByte(debug1, "zoom", (byte)2);
             final int debug8 = GsonHelper.getAsInt(debug1, "search_radius", 50);
             final boolean debug9 = GsonHelper.getAsBoolean(debug1, "skip_existing_chunks", true);
-            return new ExplorationMapFunction(debug3, debug4, debug6, debug7, debug8, debug9, null);
+            return new ExplorationMapFunction(debug3, debug4, debug6, debug7, debug8, debug9); // MagmaCube - decompile fix
         }
         
         private static StructureFeature<?> readStructure(final JsonObject debug0) {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LimitCount.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LimitCount.java
index b9c683a8c9132537564829d19aef939ac64d9dec..6afcb586e86dd60a6a0a6f20ef91041881a1c2f6 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LimitCount.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LimitCount.java
@@ -44,7 +44,7 @@ public class LimitCount extends LootItemConditionalFunction
         @Override
         public LimitCount deserialize(final JsonObject debug1, final JsonDeserializationContext debug2, final LootItemCondition[] debug3) {
             final IntLimiter debug4 = GsonHelper.getAsObject(debug1, "limit", debug2, (Class<? extends IntLimiter>)IntLimiter.class);
-            return new LimitCount(debug3, debug4, null);
+            return new LimitCount(debug3, debug4); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction.java
index 02faf52a3b8d97f20d7ae782a99bd4bc078d358a..312b832ecdb6de022f986be7a83bec722c473404 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction.java
@@ -36,7 +36,7 @@ public abstract class LootItemConditionalFunction implements LootItemFunction
     
     @Override
     public void validate(final ValidationContext debug1) {
-        super.validate(debug1);
+        LootItemFunction.super.validate(debug1); // MagmaCube - decompile fix
         for (int debug2 = 0; debug2 < this.predicates.length; ++debug2) {
             this.predicates[debug2].validate(debug1.forChild(".conditions[" + debug2 + "]"));
         }
@@ -51,7 +51,7 @@ public abstract class LootItemConditionalFunction implements LootItemFunction
         private final List<LootItemCondition> conditions;
         
         public Builder() {
-            this.conditions = (List<LootItemCondition>)Lists.newArrayList();
+            this.conditions = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         @Override
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunction.java
index 44d65703876c23eb31fbf1691f23b104afef1ea9..630146411b18a35aaa54e53afc3220dae8dca6d7 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunction.java
@@ -10,7 +10,7 @@ public interface LootItemFunction extends LootContextUser, BiFunction<ItemStack,
 {
     LootItemFunctionType getType();
     
-    default Consumer<ItemStack> decorate(final BiFunction<ItemStack, LootContext, ItemStack> debug0, final Consumer<ItemStack> debug1, final LootContext debug2) {
+    static Consumer<ItemStack> decorate(final BiFunction<ItemStack, LootContext, ItemStack> debug0, final Consumer<ItemStack> debug1, final LootContext debug2) { // MagmaCube - decompile fix
         return debug3 -> debug1.accept(debug0.apply(debug3, debug2));
     }
     
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetContainerContents.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetContainerContents.java
index c911523fe1a32ee4e10d233996db8cfc1e1f9640..284d93e80b2ffcb32cd10e0ffcf13aee69dc074a 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetContainerContents.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetContainerContents.java
@@ -40,7 +40,7 @@ public class SetContainerContents extends LootItemConditionalFunction
             return debug1;
         }
         final NonNullList<ItemStack> debug3 = NonNullList.create();
-        this.entries.forEach(debug2 -> debug2.expand(debug2, debug2 -> debug2.createItemStack(LootTable.createStackSplitter(debug3::add), debug2)));
+        this.entries.forEach(debug2l -> debug2l.expand(debug2, debug2ll -> debug2ll.createItemStack(LootTable.createStackSplitter(debug3::add), debug2))); // MagmaCube - decompile fix
         final CompoundTag debug4 = new CompoundTag();
         ContainerHelper.saveAllItems(debug4, debug3);
         final CompoundTag debug5 = debug1.getOrCreateTag();
@@ -65,7 +65,7 @@ public class SetContainerContents extends LootItemConditionalFunction
         private final List<LootPoolEntryContainer> entries;
         
         public Builder() {
-            this.entries = (List<LootPoolEntryContainer>)Lists.newArrayList();
+            this.entries = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         @Override
@@ -80,7 +80,7 @@ public class SetContainerContents extends LootItemConditionalFunction
         
         @Override
         public LootItemFunction build() {
-            return new SetContainerContents(this.getConditions(), this.entries, null);
+            return new SetContainerContents(this.getConditions(), this.entries); // MagmaCube - decompile fix
         }
     }
     
@@ -95,7 +95,7 @@ public class SetContainerContents extends LootItemConditionalFunction
         @Override
         public SetContainerContents deserialize(final JsonObject debug1, final JsonDeserializationContext debug2, final LootItemCondition[] debug3) {
             final LootPoolEntryContainer[] debug4 = GsonHelper.getAsObject(debug1, "entries", debug2, (Class<? extends LootPoolEntryContainer[]>)LootPoolEntryContainer[].class);
-            return new SetContainerContents(debug3, Arrays.asList(debug4), null);
+            return new SetContainerContents(debug3, Arrays.asList(debug4)); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetItemCountFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetItemCountFunction.java
index da6afdaabced5b500a7df972e5c61b48df43b2eb..2ea7ef094ac655f211587b94a9467d7a83b427e6 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetItemCountFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetItemCountFunction.java
@@ -43,7 +43,7 @@ public class SetItemCountFunction extends LootItemConditionalFunction
         @Override
         public SetItemCountFunction deserialize(final JsonObject debug1, final JsonDeserializationContext debug2, final LootItemCondition[] debug3) {
             final RandomIntGenerator debug4 = RandomIntGenerators.deserialize(debug1.get("count"), debug2);
-            return new SetItemCountFunction(debug3, debug4, null);
+            return new SetItemCountFunction(debug3, debug4); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
index 68b14eb80ce9ebe97a8fe154bbb15f4160430459..89a7cf49ace38bee264b06d9f177caea6d005286 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
@@ -127,15 +127,10 @@ extends LootItemConditionalFunction {
         @Override
         public SetLoreFunction deserialize(JsonObject debug1, JsonDeserializationContext debug2, LootItemCondition[] debug3) {
             boolean debug4 = GsonHelper.getAsBoolean(debug1, "replace", false);
-            List debug5 = (List)Streams.stream((Iterable)GsonHelper.getAsJsonArray(debug1, "lore")).map(Component.Serializer::fromJson).collect(ImmutableList.toImmutableList());
+            List debug5 = (List)Streams.stream(GsonHelper.getAsJsonArray(debug1, "lore")).map(Component.Serializer::fromJson).collect(ImmutableList.toImmutableList()); // MagmaCube - decompile fix
             LootContext.EntityTarget debug6 = GsonHelper.getAsObject(debug1, "entity", null, debug2, LootContext.EntityTarget.class);
             return new SetLoreFunction(debug3, debug4, debug5, debug6);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetNameFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetNameFunction.java
index 0ea28cb9e44e94b28c62c4c83c0752419fb6d59a..800354a80d23f40960678cd841decdef1fa3b8b3 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetNameFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetNameFunction.java
@@ -40,7 +40,7 @@ public class SetNameFunction extends LootItemConditionalFunction
     
     @Override
     public Set<LootContextParam<?>> getReferencedContextParams() {
-        return (Set<LootContextParam<?>>)((this.resolutionContext != null) ? ImmutableSet.of((Object)this.resolutionContext.getParam()) : ImmutableSet.of());
+        return (Set<LootContextParam<?>>)((this.resolutionContext != null) ? ImmutableSet.of(this.resolutionContext.getParam()) : ImmutableSet.of()); // MagmaCube - decompile fix
     }
     
     public static UnaryOperator<Component> createResolver(final LootContext debug0, @Nullable final LootContext.EntityTarget debug1) {
@@ -48,11 +48,9 @@ public class SetNameFunction extends LootItemConditionalFunction
             final Entity debug3 = debug0.getParamOrNull(debug1.getParam());
             if (debug3 != null) {
                 final CommandSourceStack debug4 = debug3.createCommandSourceStack().withPermission(2);
-                final CommandSourceStack debug6;
-                final Entity debug7;
                 return (UnaryOperator<Component>)(debug2 -> {
                     try {
-                        return ComponentUtils.updateForEntity(debug6, debug2, debug7, 0);
+                        return ComponentUtils.updateForEntity(debug4, debug2, debug3, 0); // MagmaCube - decompile fix
                     }
                     catch (CommandSyntaxException debug5) {
                         SetNameFunction.LOGGER.warn("Failed to resolve text component", (Throwable)debug5);
@@ -61,7 +59,7 @@ public class SetNameFunction extends LootItemConditionalFunction
                 });
             }
         }
-        return (UnaryOperator<Component>)(debug0 -> debug0);
+        return (UnaryOperator<Component>)(debug0l -> debug0l); // MagmaCube - decompile fix
     }
     
     public ItemStack run(final ItemStack debug1, final LootContext debug2) {
@@ -92,7 +90,7 @@ public class SetNameFunction extends LootItemConditionalFunction
         public SetNameFunction deserialize(final JsonObject debug1, final JsonDeserializationContext debug2, final LootItemCondition[] debug3) {
             final Component debug4 = Component.Serializer.fromJson(debug1.get("name"));
             final LootContext.EntityTarget debug5 = GsonHelper.getAsObject(debug1, "entity", (LootContext.EntityTarget)null, debug2, LootContext.EntityTarget.class);
-            return new SetNameFunction(debug3, debug4, debug5, null);
+            return new SetNameFunction(debug3, debug4, debug5); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SmeltItemFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SmeltItemFunction.java
index c802b79942ee89563c3be2cb1086deea1d2c6e02..8e1ec6e5f4e97d930f854fb4c6a18aa20394f220 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SmeltItemFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SmeltItemFunction.java
@@ -63,11 +63,6 @@ extends LootItemConditionalFunction {
         public SmeltItemFunction deserialize(JsonObject debug1, JsonDeserializationContext debug2, LootItemCondition[] debug3) {
             return new SmeltItemFunction(debug3);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/parameters/LootContextParamSet.java b/src/main/java/net/minecraft/world/level/storage/loot/parameters/LootContextParamSet.java
index 030f124730f1a07643f22bb9d469d9d2c398870b..ecc71d620b79d0b7094a905f46b5ef646d7fd701 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/parameters/LootContextParamSet.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/parameters/LootContextParamSet.java
@@ -46,8 +46,8 @@ public class LootContextParamSet
         private final Set<LootContextParam<?>> optional;
         
         public Builder() {
-            this.required = (Set<LootContextParam<?>>)Sets.newIdentityHashSet();
-            this.optional = (Set<LootContextParam<?>>)Sets.newIdentityHashSet();
+            this.required = Sets.newIdentityHashSet(); // MagmaCube - decompile fix
+            this.optional = Sets.newIdentityHashSet(); // MagmaCube - decompile fix
         }
         
         public Builder required(final LootContextParam<?> debug1) {
@@ -67,7 +67,7 @@ public class LootContextParamSet
         }
         
         public LootContextParamSet build() {
-            return new LootContextParamSet(this.required, this.optional, null);
+            return new LootContextParamSet(this.required, this.optional); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/AlternativeLootItemCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/AlternativeLootItemCondition.java
index 12c121dc471b7e94f9bf41f856fbbc9ad27bfa3e..8b354b78e6fd0653f5c999709e5d5230fd7aecb0 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/AlternativeLootItemCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/AlternativeLootItemCondition.java
@@ -33,7 +33,7 @@ public class AlternativeLootItemCondition implements LootItemCondition
     
     @Override
     public void validate(final ValidationContext debug1) {
-        super.validate(debug1);
+        LootItemCondition.super.validate(debug1); // MagmaCube - decompile fix
         for (int debug2 = 0; debug2 < this.terms.length; ++debug2) {
             this.terms[debug2].validate(debug1.forChild(".term[" + debug2 + "]"));
         }
@@ -48,7 +48,7 @@ public class AlternativeLootItemCondition implements LootItemCondition
         private final List<LootItemCondition> terms;
         
         public Builder(final LootItemCondition.Builder... debug1) {
-            this.terms = (List<LootItemCondition>)Lists.newArrayList();
+            this.terms = Lists.newArrayList(); // MagmaCube - decompile fix
             for (final LootItemCondition.Builder debug2 : debug1) {
                 this.terms.add(debug2.build());
             }
@@ -62,7 +62,7 @@ public class AlternativeLootItemCondition implements LootItemCondition
         
         @Override
         public LootItemCondition build() {
-            return new AlternativeLootItemCondition(this.terms.toArray(new LootItemCondition[0]), null);
+            return new AlternativeLootItemCondition(this.terms.toArray(new LootItemCondition[0])); // MagmaCube - decompile fix
         }
     }
     
@@ -76,7 +76,7 @@ public class AlternativeLootItemCondition implements LootItemCondition
         @Override
         public AlternativeLootItemCondition deserialize(final JsonObject debug1, final JsonDeserializationContext debug2) {
             final LootItemCondition[] debug3 = GsonHelper.getAsObject(debug1, "terms", debug2, (Class<? extends LootItemCondition[]>)LootItemCondition[].class);
-            return new AlternativeLootItemCondition(debug3, null);
+            return new AlternativeLootItemCondition(debug3); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/BonusLevelTableCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/BonusLevelTableCondition.java
index e8e7c1b619f83ff5dfc95d54f0ab2aed75e4a955..d40dcc80cebabf1616befc8174329bb11e4b79d0 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/BonusLevelTableCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/BonusLevelTableCondition.java
@@ -34,7 +34,7 @@ public class BonusLevelTableCondition implements LootItemCondition
     
     @Override
     public Set<LootContextParam<?>> getReferencedContextParams() {
-        return (Set<LootContextParam<?>>)ImmutableSet.of((Object)LootContextParams.TOOL);
+        return ImmutableSet.of(LootContextParams.TOOL); // MagmaCube - decompile fix
     }
     
     @Override
@@ -63,11 +63,10 @@ public class BonusLevelTableCondition implements LootItemCondition
             final Object o;
             final Object obj;
             final Enchantment debug4 = Registry.ENCHANTMENT.getOptional(debug3).orElseThrow(() -> {
-                new JsonParseException("Invalid enchantment id: " + obj);
-                return o;
+                throw new JsonParseException("Invalid enchantment id: " + debug3); // MagmaCube - decompile fix
             });
             final float[] debug5 = GsonHelper.getAsObject(debug1, "chances", debug2, (Class<? extends float[]>)float[].class);
-            return new BonusLevelTableCondition(debug4, debug5, null);
+            return new BonusLevelTableCondition(debug4, debug5); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/ConditionReference.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/ConditionReference.java
index 648644018a135b5eb22f762e26976e28c22db055..c9ea290f34849af324ccea6955108c0dfb68c5a7 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/ConditionReference.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/ConditionReference.java
@@ -31,7 +31,7 @@ public class ConditionReference implements LootItemCondition
             debug1.reportProblem("Condition " + this.name + " is recursively called");
             return;
         }
-        super.validate(debug1);
+        LootItemCondition.super.validate(debug1); // MagmaCube - decompile fix
         final LootItemCondition debug2 = debug1.resolveCondition(this.name);
         if (debug2 == null) {
             debug1.reportProblem("Unknown condition table called " + this.name);
@@ -70,7 +70,7 @@ public class ConditionReference implements LootItemCondition
         @Override
         public ConditionReference deserialize(final JsonObject debug1, final JsonDeserializationContext debug2) {
             final ResourceLocation debug3 = new ResourceLocation(GsonHelper.getAsString(debug1, "name"));
-            return new ConditionReference(debug3, null);
+            return new ConditionReference(debug3); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemBlockStatePropertyCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemBlockStatePropertyCondition.java
index 66abbea4831c91900f91b93c49c2c99095498780..eab70392a35fd778ba06047082785a13ca269ad6 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemBlockStatePropertyCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemBlockStatePropertyCondition.java
@@ -35,7 +35,7 @@ public class LootItemBlockStatePropertyCondition implements LootItemCondition
     
     @Override
     public Set<LootContextParam<?>> getReferencedContextParams() {
-        return (Set<LootContextParam<?>>)ImmutableSet.of((Object)LootContextParams.BLOCK_STATE);
+        return ImmutableSet.of(LootContextParams.BLOCK_STATE); // MagmaCube - decompile fix
     }
     
     @Override
@@ -65,7 +65,7 @@ public class LootItemBlockStatePropertyCondition implements LootItemCondition
         
         @Override
         public LootItemCondition build() {
-            return new LootItemBlockStatePropertyCondition(this.block, this.properties, null);
+            return new LootItemBlockStatePropertyCondition(this.block, this.properties); // MagmaCube - decompile fix
         }
     }
     
@@ -83,17 +83,15 @@ public class LootItemBlockStatePropertyCondition implements LootItemCondition
             final Object o;
             final Object obj;
             final Block debug4 = Registry.BLOCK.getOptional(debug3).orElseThrow(() -> {
-                new IllegalArgumentException("Can't find block " + obj);
-                return o;
+                return new IllegalArgumentException("Can't find block " + debug3); // MagmaCube - decompile fix
             });
             final StatePropertiesPredicate debug5 = StatePropertiesPredicate.fromJson(debug1.get("properties"));
             final JsonSyntaxException ex;
             final Object obj2;
-            debug5.checkState(debug4.getStateDefinition(), debug1 -> {
-                new JsonSyntaxException("Block " + obj2 + " has no property " + debug1);
-                throw ex;
+            debug5.checkState(debug4.getStateDefinition(), debug1l -> { // MagmaCube - decompile fix
+                throw new JsonSyntaxException("Block " + debug1l + " has no property " + debug1); // MagmaCube - decompile fix
             });
-            return new LootItemBlockStatePropertyCondition(debug4, debug5, null);
+            return new LootItemBlockStatePropertyCondition(debug4, debug5); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceCondition.java
index 4abcc580cffda059489226b336e23ba2887b5645..89aef1e094665436fb21cd354625f300eda528e9 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceCondition.java
@@ -38,7 +38,7 @@ public class LootItemRandomChanceCondition implements LootItemCondition
         
         @Override
         public LootItemRandomChanceCondition deserialize(final JsonObject debug1, final JsonDeserializationContext debug2) {
-            return new LootItemRandomChanceCondition(GsonHelper.getAsFloat(debug1, "chance"), null);
+            return new LootItemRandomChanceCondition(GsonHelper.getAsFloat(debug1, "chance")); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java
index 25c5ab94542131971076c181bd85ef8de361a3ce..bf96bc9db44dbcb2403467cc6eb9b38f3e79920f 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java
@@ -31,7 +31,7 @@ public class LootItemRandomChanceWithLootingCondition implements LootItemConditi
     
     @Override
     public Set<LootContextParam<?>> getReferencedContextParams() {
-        return (Set<LootContextParam<?>>)ImmutableSet.of((Object)LootContextParams.KILLER_ENTITY);
+        return ImmutableSet.of(LootContextParams.KILLER_ENTITY); // MagmaCube - decompile fix
     }
     
     @Override
@@ -58,7 +58,7 @@ public class LootItemRandomChanceWithLootingCondition implements LootItemConditi
         
         @Override
         public LootItemRandomChanceWithLootingCondition deserialize(final JsonObject debug1, final JsonDeserializationContext debug2) {
-            return new LootItemRandomChanceWithLootingCondition(GsonHelper.getAsFloat(debug1, "chance"), GsonHelper.getAsFloat(debug1, "looting_multiplier"), null);
+            return new LootItemRandomChanceWithLootingCondition(GsonHelper.getAsFloat(debug1, "chance"), GsonHelper.getAsFloat(debug1, "looting_multiplier")); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/MatchTool.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/MatchTool.java
index bbe16b46d57508590b48b77dba06e8b0183d832a..1c7a5461cd4a61f706db8dc9ac0712aa478b0244 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/MatchTool.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/MatchTool.java
@@ -27,7 +27,7 @@ public class MatchTool implements LootItemCondition
     
     @Override
     public Set<LootContextParam<?>> getReferencedContextParams() {
-        return (Set<LootContextParam<?>>)ImmutableSet.of((Object)LootContextParams.TOOL);
+        return ImmutableSet.of(LootContextParams.TOOL); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/level/timers/FunctionCallback.java b/src/main/java/net/minecraft/world/level/timers/FunctionCallback.java
index 6b6d86e7b8572ba1d38d52143d418b784c48fc8a..e1d7aed02cb51fd9d3c6d54748a48b247ed06075 100644
--- a/src/main/java/net/minecraft/world/level/timers/FunctionCallback.java
+++ b/src/main/java/net/minecraft/world/level/timers/FunctionCallback.java
@@ -41,11 +41,6 @@ implements TimerCallback<MinecraftServer> {
             ResourceLocation debug2 = new ResourceLocation(debug1.getString("Name"));
             return new FunctionCallback(debug2);
         }
-
-        @Override
-        public /* synthetic */ TimerCallback deserialize(CompoundTag compoundTag) {
-            return this.deserialize(compoundTag);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/timers/FunctionTagCallback.java b/src/main/java/net/minecraft/world/level/timers/FunctionTagCallback.java
index 0c70498868b57d64ca94a8337c9fc65fa95d8a5e..a7c82f12ca000a2c809cd299a5b989fdbe6449dd 100644
--- a/src/main/java/net/minecraft/world/level/timers/FunctionTagCallback.java
+++ b/src/main/java/net/minecraft/world/level/timers/FunctionTagCallback.java
@@ -45,11 +45,6 @@ implements TimerCallback<MinecraftServer> {
             ResourceLocation debug2 = new ResourceLocation(debug1.getString("Name"));
             return new FunctionTagCallback(debug2);
         }
-
-        @Override
-        public /* synthetic */ TimerCallback deserialize(CompoundTag compoundTag) {
-            return this.deserialize(compoundTag);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/timers/TimerCallbacks.java b/src/main/java/net/minecraft/world/level/timers/TimerCallbacks.java
index e341acb552b3d04ac85bf501a8ee4fb7dd67a164..266ff51cfd2dada64cd984582a7aabd076b3e6f9 100644
--- a/src/main/java/net/minecraft/world/level/timers/TimerCallbacks.java
+++ b/src/main/java/net/minecraft/world/level/timers/TimerCallbacks.java
@@ -40,13 +40,13 @@ public class TimerCallbacks<C> {
     }
 
     private <T extends TimerCallback<C>> TimerCallback.Serializer<C, T> getSerializer(Class<?> debug1) {
-        return this.classToSerializer.get(debug1);
+        return (TimerCallback.Serializer<C, T>) (Object) this.classToSerializer.get(debug1); // MagmaCube - decompile fix
     }
 
-    public <T extends TimerCallback<C>> CompoundTag serialize(T debug1) {
-        TimerCallback.Serializer<T, T> debug2 = this.getSerializer(debug1.getClass());
+    public <T extends TimerCallback<T>> CompoundTag serialize(T debug1) {
+        TimerCallback.Serializer<C, TimerCallback<C>> debug2 = this.getSerializer(debug1.getClass());
         CompoundTag debug3 = new CompoundTag();
-        debug2.serialize(debug3, debug1);
+        debug2.serialize(debug3, (TimerCallback) debug1); // MagmaCube - decompile fix
         debug3.putString("Type", debug2.getId().toString());
         return debug3;
     }
diff --git a/src/main/java/net/minecraft/world/level/timers/TimerQueue.java b/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
index 6c310258b3f84e352c8b89e7e4702c3eb9988877..07c181d4bac2a5b77db477b4d872b6e03deaadd5 100644
--- a/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
+++ b/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
@@ -28,7 +28,7 @@ public class TimerQueue<T>
     private final Table<String, Long, Event<T>> events;
     
     private static <T> Comparator<Event<T>> createComparator() {
-        return Comparator.comparingLong(debug0 -> debug0.triggerTime).thenComparing(debug0 -> debug0.sequentialId);
+        return Comparator.<Event<T>>comparingLong(debug0 -> debug0.triggerTime).thenComparing(debug0 -> debug0.sequentialId); // MagmaCube - decompile fix
     }
     
     public TimerQueue(final TimerCallbacks<T> debug1, final Stream<Dynamic<Tag>> debug2) {
@@ -36,20 +36,20 @@ public class TimerQueue<T>
         this.queue.clear();
         this.events.clear();
         this.sequentialId = UnsignedLong.ZERO;
-        debug2.forEach(debug1 -> {
-            if (!(debug1.getValue() instanceof CompoundTag)) {
-                TimerQueue.LOGGER.warn("Invalid format of events: {}", (Object)debug1);
+        debug2.forEach(debug1l -> { // MagmaCube - decompile fix
+            if (!(debug1l.getValue() instanceof CompoundTag)) { // MagmaCube - decompile fix
+                TimerQueue.LOGGER.warn("Invalid format of events: {}", (Object)debug1l); // MagmaCube - decompile fix
             }
             else {
-                this.loadEvent((CompoundTag)debug1.getValue());
+                this.loadEvent((CompoundTag)debug1l.getValue()); // MagmaCube - decompile fix
             }
         });
     }
     
     public TimerQueue(final TimerCallbacks<T> debug1) {
-        this.queue = new PriorityQueue<Event<T>>((Comparator<? super Event<T>>)createComparator());
+        this.queue = new PriorityQueue<Event<T>>(createComparator()); // MagmaCube - decompile fix
         this.sequentialId = UnsignedLong.ZERO;
-        this.events = (Table<String, Long, Event<T>>)HashBasedTable.create();
+        this.events = HashBasedTable.create(); // MagmaCube - decompile fix
         this.callbacksRegistry = debug1;
     }
     
@@ -71,12 +71,12 @@ public class TimerQueue<T>
         }
         this.sequentialId = this.sequentialId.plus(UnsignedLong.ONE);
         final Event<T> debug5 = new Event<T>(debug2, this.sequentialId, debug1, (TimerCallback)debug4);
-        this.events.put((Object)debug1, (Object)debug2, (Object)debug5);
+        this.events.put(debug1, debug2, debug5); // MagmaCube - decompile fix
         this.queue.add(debug5);
     }
     
     public int remove(final String debug1) {
-        final Collection<Event<T>> debug2 = this.events.row((Object)debug1).values();
+        final Collection<Event<T>> debug2 = this.events.row(debug1).values(); // MagmaCube - decompile fix
         debug2.forEach(this.queue::remove);
         final int debug3 = debug2.size();
         debug2.clear();
@@ -101,13 +101,13 @@ public class TimerQueue<T>
         final CompoundTag debug2 = new CompoundTag();
         debug2.putString("Name", debug1.id);
         debug2.putLong("TriggerTime", debug1.triggerTime);
-        debug2.put("Callback", this.callbacksRegistry.serialize(debug1.callback));
+        debug2.put("Callback", this.callbacksRegistry.<TimerCallback>serialize(debug1.callback)); // MagmaCube - decompile fix
         return debug2;
     }
     
     public ListTag store() {
         final ListTag debug1 = new ListTag();
-        this.queue.stream().sorted((Comparator<? super Object>)createComparator()).map((Function<? super Object, ?>)this::storeEvent).forEach(debug1::add);
+        this.queue.stream().sorted(createComparator()).map(this::storeEvent).forEach(debug1::add); // MagmaCube - decompile fix
         return debug1;
     }
     
diff --git a/src/main/java/net/minecraft/world/phys/shapes/BitSetDiscreteVoxelShape.java b/src/main/java/net/minecraft/world/phys/shapes/BitSetDiscreteVoxelShape.java
index 4a6af0c78da1aca6ae8d417d67ae18cc2463be70..609d5815b76b55285d7943d6292da6897b4ba995 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/BitSetDiscreteVoxelShape.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/BitSetDiscreteVoxelShape.java
@@ -103,41 +103,30 @@ public final class BitSetDiscreteVoxelShape extends DiscreteVoxelShape
     static BitSetDiscreteVoxelShape join(final DiscreteVoxelShape debug0, final DiscreteVoxelShape debug1, final IndexMerger debug2, final IndexMerger debug3, final IndexMerger debug4, final BooleanOp debug5) {
         final BitSetDiscreteVoxelShape debug15 = new BitSetDiscreteVoxelShape(debug2.getList().size() - 1, debug3.getList().size() - 1, debug4.getList().size() - 1);
         final int[] debug16 = { Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE };
-        final boolean[] debug17;
-        final boolean[] debug19;
-        final boolean debug21;
-        final BitSetDiscreteVoxelShape bitSetDiscreteVoxelShape;
-        final Object o;
-        final Object o2;
-        final boolean debug20;
-        final Object o3;
-        final Object o4;
-        final boolean debug18;
-        final Object o5;
         debug2.forMergedIndexes((debug7, debug8, debug9) -> {
-            debug17 = new boolean[] { false };
-            debug18 = debug3.forMergedIndexes((debug10, debug11, debug12) -> {
-                debug19 = new boolean[] { false };
-                debug20 = debug4.forMergedIndexes((debug12, debug13, debug14) -> {
-                    debug21 = debug5.apply(debug0.isFullWide(debug7, debug10, debug12), debug1.isFullWide(debug8, debug11, debug13));
+            boolean[] debug17 = new boolean[] { false }; // MagmaCube - decompile fix
+            boolean debug18 = debug3.forMergedIndexes((debug10, debug11, debug12) -> { // MagmaCube - decompile fix
+                boolean[] debug19 = new boolean[] { false }; // MagmaCube - decompile fix
+                boolean debug20 = debug4.forMergedIndexes((debug12l, debug13, debug14) -> { // MagmaCube - decompile fix
+                    boolean debug21 = debug5.apply(debug0.isFullWide(debug7, debug10, debug12l), debug1.isFullWide(debug8, debug11, debug13)); // MagmaCube - decompile fix
                     if (debug21) {
-                        bitSetDiscreteVoxelShape.storage.set(bitSetDiscreteVoxelShape.getIndex(debug9, debug12, debug14));
-                        o[2] = Math.min(o[2], debug14);
-                        o[5] = Math.max(o[5], debug14);
-                        o2[0] = true;
+                        debug15.storage.set(debug15.getIndex(debug9, debug12l, debug14)); // MagmaCube - decompile fix
+                        debug16[2] = Math.min(debug16[2], debug14); // MagmaCube - decompile fix
+                        debug16[5] = Math.max(debug16[5], debug14); // MagmaCube - decompile fix
+                        debug19[0] = true; // MagmaCube - decompile fix
                     }
                     return true;
                 });
                 if (debug19[0]) {
-                    o3[1] = Math.min(o3[1], debug12);
-                    o3[4] = Math.max(o3[4], debug12);
-                    o4[0] = true;
+                    debug16[1] = Math.min(debug16[1], debug12); // MagmaCube - decompile fix
+                    debug16[4] = Math.max(debug16[4], debug12); // MagmaCube - decompile fix
+                    debug17[0] = true; // MagmaCube - decompile fix
                 }
                 return debug20;
             });
             if (debug17[0]) {
-                o5[0] = Math.min(o5[0], debug9);
-                o5[3] = Math.max(o5[3], debug9);
+                debug16[0] = Math.min(debug16[0], debug9); // MagmaCube - decompile fix
+                debug16[3] = Math.max(debug16[3], debug9); // MagmaCube - decompile fix
             }
             return debug18;
         });
diff --git a/src/main/java/net/minecraft/world/phys/shapes/CollisionContext.java b/src/main/java/net/minecraft/world/phys/shapes/CollisionContext.java
index da16b4052708ca0dd1ca64262e35e96bfa56df30..e91bf6e52a4503f8e724b9c5ba9db81eb10ed489 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/CollisionContext.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/CollisionContext.java
@@ -8,11 +8,11 @@ import net.minecraft.world.entity.Entity;
 
 public interface CollisionContext
 {
-    default CollisionContext empty() {
+    static CollisionContext empty() { // MagmaCube - decompile fix
         return EntityCollisionContext.EMPTY;
     }
     
-    default CollisionContext of(final Entity debug0) {
+    static CollisionContext of(final Entity debug0) { // MagmaCube - decompile fix
         return new EntityCollisionContext(debug0);
     }
     
diff --git a/src/main/java/net/minecraft/world/phys/shapes/EntityCollisionContext.java b/src/main/java/net/minecraft/world/phys/shapes/EntityCollisionContext.java
index 8d57a8ff1947d9d12240355bd25d566513b722cf..57ce247843bc5b8ab746acf297baa0cb320e8cc4 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/EntityCollisionContext.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/EntityCollisionContext.java
@@ -27,7 +27,7 @@ public class EntityCollisionContext implements CollisionContext
     }
     
     protected EntityCollisionContext(final Entity debug1) {
-        this(debug1.isDescending(), debug1.getY(), (debug1 instanceof LivingEntity) ? ((LivingEntity)debug1).getMainHandItem().getItem() : Items.AIR, (debug1 instanceof LivingEntity) ? (LivingEntity)debug1::canStandOnFluid : (debug0 -> false));
+        this(debug1.isDescending(), debug1.getY(), (debug1 instanceof LivingEntity) ? ((LivingEntity)debug1).getMainHandItem().getItem() : Items.AIR, (debug1 instanceof LivingEntity) ? ((LivingEntity)debug1)::canStandOnFluid : (debug0 -> false)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/phys/shapes/Shapes.java b/src/main/java/net/minecraft/world/phys/shapes/Shapes.java
index edc405c10b7ea432721b85878cc55205fe4d3547..7270a3a4b49a4539afc3b1bf0ab20587669d2256 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/Shapes.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/Shapes.java
@@ -155,7 +155,7 @@ public final class Shapes
     }
     
     private static boolean joinIsNotEmpty(final IndexMerger debug0, final IndexMerger debug1, final IndexMerger debug2, final DiscreteVoxelShape debug3, final DiscreteVoxelShape debug4, final BooleanOp debug5) {
-        return !debug0.forMergedIndexes((debug5, debug6, debug7) -> debug1.forMergedIndexes((debug6, debug7, debug8) -> debug2.forMergedIndexes((debug7, debug8, debug9) -> !debug5.apply(debug3.isFullWide(debug5, debug6, debug7), debug4.isFullWide(debug6, debug7, debug8)))));
+        return !debug0.forMergedIndexes((debug5l, debug6, debug7) -> debug1.forMergedIndexes((debug6l, debug7l, debug8) -> debug2.forMergedIndexes((debug7ll, debug8ll, debug9) -> !debug5.apply(debug3.isFullWide(debug5l, debug6l, debug7ll), debug4.isFullWide(debug6l, debug7ll, debug8ll))))); // MagmaCube - decompile fix
     }
     
     public static double collide(final Direction.Axis debug0, final AABB debug1, final Stream<VoxelShape> debug2, double debug3) {
@@ -235,8 +235,7 @@ public final class Shapes
             debug22 += debug21;
         }
         final double[] debug27 = { debug2 };
-        final Object o;
-        debug6.forEach(debug3 -> o[0] = debug3.collide(debug10, debug0, o[0]));
+        debug6.forEach(debug3 -> debug27[0] = debug3.collide(debug10, debug0, debug27[0])); // MagmaCube - decompile fix
         return debug27[0];
     }
     
@@ -330,9 +329,8 @@ public final class Shapes
     }
     
     static {
-        final BitSetDiscreteVoxelShape debug0;
         BLOCK = Util.make(() -> {
-            debug0 = new BitSetDiscreteVoxelShape(1, 1, 1);
+            BitSetDiscreteVoxelShape debug0 = new BitSetDiscreteVoxelShape(1, 1, 1); // MagmaCube - decompile fix
             debug0.setFull(0, 0, 0, true, true);
             return new CubeVoxelShape(debug0);
         });
diff --git a/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java b/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java
index 73efc3a3eaf1568917643ef880fa07cad98c548f..b314a51bfbb6daee3d74a8e25f27648929b466fb 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java
@@ -65,10 +65,9 @@ public abstract class VoxelShape
     }
     
     public VoxelShape optimize() {
-        final VoxelShape[] debug12 = { Shapes.empty() };
-        final Object o;
+        final VoxelShape[] o = { Shapes.empty() }; // MagmaCube - decompile fix
         this.forAllBoxes((debug1, debug3, debug5, debug7, debug9, debug11) -> o[0] = Shapes.joinUnoptimized(o[0], Shapes.box(debug1, debug3, debug5, debug7, debug9, debug11), BooleanOp.OR));
-        return debug12[0];
+        return o[0]; // MagmaCube - decompile fix
     }
     
     public void forAllEdges(final Shapes.DoubleLineConsumer debug1) {
@@ -76,17 +75,14 @@ public abstract class VoxelShape
     }
     
     public void forAllBoxes(final Shapes.DoubleLineConsumer debug1) {
-        final DoubleList debug10 = this.getCoords(Direction.Axis.X);
-        final DoubleList debug11 = this.getCoords(Direction.Axis.Y);
-        final DoubleList debug12 = this.getCoords(Direction.Axis.Z);
-        final DoubleList list;
-        final DoubleList list2;
-        final DoubleList list3;
+        final DoubleList list = this.getCoords(Direction.Axis.X); // MagmaCube - decompile fix
+        final DoubleList list2 = this.getCoords(Direction.Axis.Y); // MagmaCube - decompile fix
+        final DoubleList list3 = this.getCoords(Direction.Axis.Z); // MagmaCube - decompile fix
         this.shape.forAllBoxes((debug4, debug5, debug6, debug7, debug8, debug9) -> debug1.consume(list.getDouble(debug4), list2.getDouble(debug5), list3.getDouble(debug6), list.getDouble(debug7), list2.getDouble(debug8), list3.getDouble(debug9)), true);
     }
     
     public List<AABB> toAabbs() {
-        final List<AABB> debug12 = (List<AABB>)Lists.newArrayList();
+        final List<AABB> debug12 = Lists.newArrayList(); // MagmaCube - decompile fix
         this.forAllBoxes((debug1, debug3, debug5, debug7, debug9, debug11) -> debug12.add(new AABB(debug1, debug3, debug5, debug7, debug9, debug11)));
         return debug12;
     }
diff --git a/src/main/java/net/minecraft/world/scores/Objective.java b/src/main/java/net/minecraft/world/scores/Objective.java
index 8419363fc3c59a5f7d73192b1b226078febe46dc..bfe2824a48f6f89304e6427d70e75789af864bf3 100644
--- a/src/main/java/net/minecraft/world/scores/Objective.java
+++ b/src/main/java/net/minecraft/world/scores/Objective.java
@@ -42,9 +42,8 @@ public class Objective
     }
     
     private Component createFormattedDisplayName() {
-        final HoverEvent debug2;
         return ComponentUtils.wrapInSquareBrackets(this.displayName.copy().withStyle(debug1 -> {
-            new HoverEvent((HoverEvent.Action<TextComponent>)HoverEvent.Action.SHOW_TEXT, new TextComponent(this.name));
+            HoverEvent debug2 = new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TextComponent(this.name)); // MagmaCube - decompile fix
             return debug1.withHoverEvent(debug2);
         }));
     }
diff --git a/src/main/java/net/minecraft/world/scores/PlayerTeam.java b/src/main/java/net/minecraft/world/scores/PlayerTeam.java
index 8d59770f6a808a82ad2e7510c0a16fcd321a3dc3..38ee48ea03ead46670b4f6bfe8a3c30a1f53cb23 100644
--- a/src/main/java/net/minecraft/world/scores/PlayerTeam.java
+++ b/src/main/java/net/minecraft/world/scores/PlayerTeam.java
@@ -29,7 +29,7 @@ public class PlayerTeam extends Team
     private final Style displayNameStyle;
     
     public PlayerTeam(final Scoreboard debug1, final String debug2) {
-        this.players = (Set<String>)Sets.newHashSet();
+        this.players = Sets.newHashSet(); // MagmaCube - decompile fix
         this.playerPrefix = TextComponent.EMPTY;
         this.playerSuffix = TextComponent.EMPTY;
         this.allowFriendlyFire = true;
@@ -41,7 +41,7 @@ public class PlayerTeam extends Team
         this.scoreboard = debug1;
         this.name = debug2;
         this.displayName = new TextComponent(debug2);
-        this.displayNameStyle = Style.EMPTY.withInsertion(debug2).withHoverEvent(new HoverEvent((HoverEvent.Action<T>)HoverEvent.Action.SHOW_TEXT, (T)new TextComponent(debug2)));
+        this.displayNameStyle = Style.EMPTY.withInsertion(debug2).withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TextComponent(debug2))); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/scores/Scoreboard.java b/src/main/java/net/minecraft/world/scores/Scoreboard.java
index 924dcbbff6beeb446a4807c0d363675d911600f6..d9e02fb374fe2e4d75dba0d69bc924b8c10ae35c 100644
--- a/src/main/java/net/minecraft/world/scores/Scoreboard.java
+++ b/src/main/java/net/minecraft/world/scores/Scoreboard.java
@@ -31,12 +31,14 @@ public class Scoreboard
     private static String[] displaySlotNames;
     
     public Scoreboard() {
-        this.objectivesByName = (Map<String, Objective>)Maps.newHashMap();
-        this.objectivesByCriteria = (Map<ObjectiveCriteria, List<Objective>>)Maps.newHashMap();
-        this.playerScores = (Map<String, Map<Objective, Score>>)Maps.newHashMap();
+        // MagmaCube start - decompile fix
+        this.objectivesByName = Maps.newHashMap();
+        this.objectivesByCriteria = Maps.newHashMap();
+        this.playerScores = Maps.newHashMap();
         this.displayObjectives = new Objective[19];
-        this.teamsByName = (Map<String, PlayerTeam>)Maps.newHashMap();
-        this.teamsByPlayer = (Map<String, PlayerTeam>)Maps.newHashMap();
+        this.teamsByName = Maps.newHashMap();
+        this.teamsByPlayer = Maps.newHashMap();
+        // MagmaCube end - decompile fix
     }
     
     public boolean hasObjective(final String debug1) {
@@ -67,7 +69,7 @@ public class Scoreboard
     }
     
     public final void forAllObjectives(final ObjectiveCriteria debug1, final String debug2, final Consumer<Score> debug3) {
-        this.objectivesByCriteria.getOrDefault(debug1, Collections.emptyList()).forEach(debug3 -> debug3.accept(this.getOrCreatePlayerScore(debug2, debug3)));
+        this.objectivesByCriteria.getOrDefault(debug1, Collections.emptyList()).forEach(debug3l -> debug3.accept(this.getOrCreatePlayerScore(debug2, debug3l))); // MagmaCube - decompile fix
     }
     
     public boolean hasPlayerScore(final String debug1, final Objective debug2) {
@@ -84,16 +86,15 @@ public class Scoreboard
             throw new IllegalArgumentException("The player name '" + debug1 + "' is too long!");
         }
         final Map<Objective, Score> debug3 = this.playerScores.computeIfAbsent(debug1, debug0 -> Maps.newHashMap());
-        final Score debug4;
-        return debug3.computeIfAbsent(debug2, debug2 -> {
-            debug4 = new Score(this, debug2, debug1);
+        return debug3.computeIfAbsent(debug2, debug2l -> { // MagmaCube - decompile fix
+            Score debug4 = new Score(this, debug2l, debug1); // MagmaCube - decompile fix
             debug4.setScore(0);
             return debug4;
         });
     }
     
     public Collection<Score> getPlayerScores(final Objective debug1) {
-        final List<Score> debug2 = (List<Score>)Lists.newArrayList();
+        final List<Score> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Map<Objective, Score> debug3 : this.playerScores.values()) {
             final Score debug4 = debug3.get(debug1);
             if (debug4 != null) {
@@ -143,7 +144,7 @@ public class Scoreboard
     public Map<Objective, Score> getPlayerScores(final String debug1) {
         Map<Objective, Score> debug2 = this.playerScores.get(debug1);
         if (debug2 == null) {
-            debug2 = (Map<Objective, Score>)Maps.newHashMap();
+            debug2 = Maps.newHashMap(); // MagmaCube - decompile fix
         }
         return debug2;
     }
@@ -331,18 +332,18 @@ public class Scoreboard
     }
     
     protected ListTag savePlayerScores() {
-        final ListTag debug2 = new ListTag();
-        final CompoundTag debug3;
-        final AbstractList<CompoundTag> list;
-        this.playerScores.values().stream().map((Function<? super Map<Objective, Score>, ?>)Map::values).forEach(debug1 -> debug1.stream().filter(debug0 -> debug0.getObjective() != null).forEach(debug1 -> {
-            debug3 = new CompoundTag();
-            debug3.putString("Name", debug1.getOwner());
-            debug3.putString("Objective", debug1.getObjective().getName());
-            debug3.putInt("Score", debug1.getScore());
-            debug3.putBoolean("Locked", debug1.isLocked());
+        // MagmaCube start - decompile fix
+        final ListTag list = new ListTag();
+        this.playerScores.values().stream().map(Map::values).forEach(debug1 -> debug1.stream().filter(debug0 -> debug0.getObjective() != null).forEach(debug1l -> { // MagmaCube - decompile fix
+            CompoundTag debug3 = new CompoundTag();
+            debug3.putString("Name", debug1l.getOwner());
+            debug3.putString("Objective", debug1l.getObjective().getName());
+            debug3.putInt("Score", debug1l.getScore());
+            debug3.putBoolean("Locked", debug1l.isLocked());
             list.add(debug3);
         }));
-        return debug2;
+        return list;
+        // MagmaCube end - decompile fix
     }
     
     protected void loadPlayerScores(final ListTag debug1) {
diff --git a/src/main/java/net/minecraft/world/scores/criteria/ObjectiveCriteria.java b/src/main/java/net/minecraft/world/scores/criteria/ObjectiveCriteria.java
index 807af77fb29367d7526b518f91336258a5393fc0..1f2191c1fa6c752a14c241d5368dbd378628b0a4 100644
--- a/src/main/java/net/minecraft/world/scores/criteria/ObjectiveCriteria.java
+++ b/src/main/java/net/minecraft/world/scores/criteria/ObjectiveCriteria.java
@@ -106,9 +106,9 @@ public class ObjectiveCriteria
         }
         
         static {
-            final ImmutableMap.Builder<String, RenderType> debug0 = (ImmutableMap.Builder<String, RenderType>)ImmutableMap.builder();
+            final ImmutableMap.Builder<String, RenderType> debug0 = ImmutableMap.builder(); // MagmaCube - decompile fix
             for (final RenderType debug2 : values()) {
-                debug0.put((Object)debug2.id, (Object)debug2);
+                debug0.put(debug2.id, debug2); // MagmaCube - decompile fix
             }
             BY_ID = (Map)debug0.build();
         }
