From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Sun, 10 Jan 2021 20:40:08 +0900
Subject: [PATCH] decompile fix


diff --git a/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java b/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
index 8f3f9946dd08ade4b63f84c517eeb2576e7af443..7cb31f32512675d3aeac8ee06266cba30e6d3909 100644
--- a/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
+++ b/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
@@ -190,7 +190,7 @@ public class OggAudioStream implements AudioStream {
                 memoryStack.close();
             }
 
-            return (boolean)i;
+            return false;
         }
     }
 
diff --git a/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java b/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
index 306a0f278616acc53cffec1fad2911fb8bd129a3..f63dbe7714fc4f0ab2573b2566a60f6f56931950 100644
--- a/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
+++ b/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
@@ -85,10 +85,10 @@ public class TrueTypeGlyphProvider implements GlyphProvider {
                         int i3 = intBuffer3.get(0) - intBuffer.get(0);
                         int i4 = intBuffer4.get(0) - intBuffer2.get(0);
                         if (i3 > 0 && i4 > 0) {
-                            IntBuffer intBuffer5 = memoryStack.mallocInt(1);
+                            IntBuffer intBuffer5In = memoryStack.mallocInt(1);
                             IntBuffer intBuffer6 = memoryStack.mallocInt(1);
-                            STBTruetype.stbtt_GetGlyphHMetrics(this.font, i2, intBuffer5, intBuffer6);
-                            var12 = new TrueTypeGlyphProvider.Glyph(intBuffer.get(0), intBuffer3.get(0), -intBuffer2.get(0), -intBuffer4.get(0), (float)intBuffer5.get(0) * this.pointScale, (float)intBuffer6.get(0) * this.pointScale, i2);
+                            STBTruetype.stbtt_GetGlyphHMetrics(this.font, i2, intBuffer5In, intBuffer6);
+                            var12 = new TrueTypeGlyphProvider.Glyph(intBuffer.get(0), intBuffer3.get(0), -intBuffer2.get(0), -intBuffer4.get(0), (float)intBuffer5In.get(0) * this.pointScale, (float)intBuffer6.get(0) * this.pointScale, i2);
                             break label62;
                         }
 
diff --git a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
index 72859efdfc3392f7d34b55b27784a9f488a7ba84..53ee749aca7f17ec1467882d7fe4ae9ebfaa2dd8 100644
--- a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
+++ b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
@@ -198,7 +198,7 @@ public class InputConstants {
 
     public static boolean isRawMouseInputSupported() {
         try {
-            return GLFW_RAW_MOUSE_MOTION_SUPPORTED != null && GLFW_RAW_MOUSE_MOTION_SUPPORTED.invokeExact();
+            return GLFW_RAW_MOUSE_MOTION_SUPPORTED != null && (boolean) GLFW_RAW_MOUSE_MOTION_SUPPORTED.invokeExact();
         } catch (Throwable var1) {
             throw new RuntimeException(var1);
         }
@@ -220,7 +220,7 @@ public class InputConstants {
         try {
             methodHandle = lookup.findStatic(GLFW.class, "glfwRawMouseMotionSupported", methodType);
             MethodHandle methodHandle2 = lookup.findStaticGetter(GLFW.class, "GLFW_RAW_MOUSE_MOTION", Integer.TYPE);
-            i = methodHandle2.invokeExact();
+            i = (int) methodHandle2.invokeExact();
         } catch (NoSuchFieldException | NoSuchMethodException var5) {
         } catch (Throwable var6) {
             throw new RuntimeException(var6);
diff --git a/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java b/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java
index 5d67e82e1e84949675c52f25f655c57cfc0adb6d..be0cd286660a3b104a267603ecf51c79c86a815c 100644
--- a/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java
+++ b/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java
@@ -18,7 +18,7 @@ public class MacosUtil {
     }
 
     private static boolean isInKioskMode(NSObject nSObject) {
-        return (nSObject.sendRaw("styleMask", new Object[0]) & 16384L) == 16384L;
+        return ((long) nSObject.sendRaw("styleMask", new Object[0]) & 16384L) == 16384L;
     }
 
     private static void toggleFullscreen(NSObject nSObject) {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
index 9f32f9f8c0b32ed63e02f70a554e2f5c50972278..3d487f375e5dc3e4deb276ad8a7164e65848c03a 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
@@ -61,7 +61,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
     }
 
     private static int roundUp(int i) {
-        int i2 = 2097152;
+        int i2 = GROWTH_SIZE;
         if (i == 0) {
             return i2;
         } else {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java b/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
index 00b8353961e5737884435e1a72f6fef37527c918..81b15d782de7485dba613eb60ee5fc4c090e4388 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
@@ -11,18 +11,18 @@ public class DefaultVertexFormat {
     public static final VertexFormatElement ELEMENT_NORMAL = new VertexFormatElement(0, VertexFormatElement.Type.BYTE, VertexFormatElement.Usage.NORMAL, 3);
     public static final VertexFormatElement ELEMENT_PADDING = new VertexFormatElement(0, VertexFormatElement.Type.BYTE, VertexFormatElement.Usage.PADDING, 1);
     public static final VertexFormatElement ELEMENT_UV = ELEMENT_UV0;
-    public static final VertexFormat BLIT_SCREEN = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV", ELEMENT_UV).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat BLOCK = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-    public static final VertexFormat NEW_ENTITY = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV1", ELEMENT_UV1).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-    public static final VertexFormat PARTICLE = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
-    public static final VertexFormat POSITION = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).build());
-    public static final VertexFormat POSITION_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat POSITION_COLOR_NORMAL = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-    public static final VertexFormat POSITION_COLOR_LIGHTMAP = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
-    public static final VertexFormat POSITION_TEX = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).build());
-    public static final VertexFormat POSITION_COLOR_TEX = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).build());
-    public static final VertexFormat POSITION_TEX_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat POSITION_COLOR_TEX_LIGHTMAP = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).build());
-    public static final VertexFormat POSITION_TEX_LIGHTMAP_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat POSITION_TEX_COLOR_NORMAL = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat BLIT_SCREEN = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV", ELEMENT_UV).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat BLOCK = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat NEW_ENTITY = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV1", ELEMENT_UV1).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat PARTICLE = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
+    public static final VertexFormat POSITION = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).build());
+    public static final VertexFormat POSITION_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat POSITION_COLOR_NORMAL = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat POSITION_COLOR_LIGHTMAP = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
+    public static final VertexFormat POSITION_TEX = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).build());
+    public static final VertexFormat POSITION_COLOR_TEX = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).build());
+    public static final VertexFormat POSITION_TEX_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat POSITION_COLOR_TEX_LIGHTMAP = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).build());
+    public static final VertexFormat POSITION_TEX_LIGHTMAP_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat POSITION_TEX_COLOR_NORMAL = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
 }
\ No newline at end of file
diff --git a/src/main/java/com/mojang/realmsclient/client/FileUpload.java b/src/main/java/com/mojang/realmsclient/client/FileUpload.java
index caae2969ff5a080b638a80e486ace7bbbc328ce9..79ff84c70f176148585ebb5ed058f0928c74a486 100644
--- a/src/main/java/com/mojang/realmsclient/client/FileUpload.java
+++ b/src/main/java/com/mojang/realmsclient/client/FileUpload.java
@@ -159,7 +159,7 @@ public class FileUpload {
     }
 
     private long getRetryDelaySeconds(HttpResponse httpResponse) {
-        return Optional.ofNullable(httpResponse.getFirstHeader("Retry-After")).map(NameValuePair::getValue).map(Long::valueOf).orElse(0L);
+        return Optional.ofNullable(httpResponse.getFirstHeader("Retry-After")).map(org.apache.http.Header::getValue).map(Long::valueOf).orElse(0L);
     }
 
     public boolean isFinished() {
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
index 7e0907650b0981f460b8c19245ad84213a9b8102..2af941bf22efd7ff09c55ef60386799ab09abc7a 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
@@ -76,7 +76,7 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
             boolean flag = i != this.serverData.activeSlot || this.serverData.worldType == RealmsServer.WorldType.MINIGAME;
             Button button;
             if (flag) {
-                button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.play"), (button) -> {
+                button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.play"), (buttonIn) -> {
                     if (((RealmsWorldOptions)this.serverData.slots.get(i)).empty) {
                         RealmsResetWorldScreen realmsResetWorldScreen = new RealmsResetWorldScreen(this, this.serverData, new TranslatableComponent("mco.configure.world.switch.slot"), new TranslatableComponent("mco.configure.world.switch.slot.subtitle"), 10526880, CommonComponents.GUI_CANCEL, this::doSwitchOrReset, () -> {
                             this.minecraft.setScreen(this);
@@ -91,11 +91,11 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
 
                 });
             } else {
-                button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.download"), (button) -> {
+                button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.download"), (buttonIn) -> {
                     Component component = new TranslatableComponent("mco.configure.world.restore.download.question.line1");
                     Component component2 = new TranslatableComponent("mco.configure.world.restore.download.question.line2");
-                    this.minecraft.setScreen(new RealmsLongConfirmationScreen((flag) -> {
-                        if (flag) {
+                    this.minecraft.setScreen(new RealmsLongConfirmationScreen((flagIn) -> {
+                        if (flagIn) {
                             this.downloadWorld(i);
                         } else {
                             this.minecraft.setScreen(this);
@@ -111,7 +111,7 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
             }
 
             this.addRenderableWidget(button);
-            this.addRenderableWidget(new Button(this.getFramePositionX(i), row(10), 80, 20, new TranslatableComponent("mco.brokenworld.reset"), (button) -> {
+            this.addRenderableWidget(new Button(this.getFramePositionX(i), row(10), 80, 20, new TranslatableComponent("mco.brokenworld.reset"), (buttonIn) -> {
                 RealmsResetWorldScreen realmsResetWorldScreen = new RealmsResetWorldScreen(this, this.serverData, this::doSwitchOrReset, () -> {
                     this.minecraft.setScreen(this);
                     this.doSwitchOrReset();
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
index 7bc9bbfdaaca5671901413331376367803f046ef..98e8534a9c98e673f3dce9d599d1e161fadda880 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
@@ -187,43 +187,43 @@ public class RealmsSelectWorldTemplateScreen extends RealmsScreen {
 
     }
 
-    private void fetchTemplatesAsync(final WorldTemplatePaginatedList worldTemplatePaginatedList) {
+    private void fetchTemplatesAsync(final WorldTemplatePaginatedList worldTemplatePaginatedListParam) {
         (new Thread("realms-template-fetcher") {
             public void run() {
-                WorldTemplatePaginatedList worldTemplatePaginatedList = worldTemplatePaginatedList;
-
-                Either<WorldTemplatePaginatedList, String> either;
-                for(RealmsClient realmsClient = RealmsClient.create(); worldTemplatePaginatedList != null; worldTemplatePaginatedList = (WorldTemplatePaginatedList)RealmsSelectWorldTemplateScreen.this.minecraft.submit(() -> {
-                    if (either.right().isPresent()) {
-                        RealmsSelectWorldTemplateScreen.LOGGER.error("Couldn't fetch templates: {}", either.right().get());
-                        if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
-                            RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(I18n.get("mco.template.select.failure"));
-                        }
-
-                        return null;
-                    } else {
-                        WorldTemplatePaginatedList worldTemplatePaginatedList = (WorldTemplatePaginatedList)either.left().get();
-
-                        for(WorldTemplate worldTemplate : worldTemplatePaginatedList.templates) {
-                            RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.addEntry(worldTemplate);
-                        }
-
-                        if (worldTemplatePaginatedList.templates.isEmpty()) {
+                WorldTemplatePaginatedList worldTemplatePaginatedList = worldTemplatePaginatedListParam;
+
+                RealmsClient realmsClient = RealmsClient.create();
+                while (worldTemplatePaginatedList != null) {
+                    Either<WorldTemplatePaginatedList, String> either = RealmsSelectWorldTemplateScreen.this.fetchTemplates(worldTemplatePaginatedList, realmsClient);
+                    worldTemplatePaginatedList = RealmsSelectWorldTemplateScreen.this.minecraft.submit(() -> {
+                        if (either.right().isPresent()) {
+                            RealmsSelectWorldTemplateScreen.LOGGER.error("Couldn't fetch templates: {}", either.right().get());
                             if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
-                                String s = I18n.get("mco.template.select.none", "%link");
-                                TextRenderingUtils.LineSegment lineSegment = TextRenderingUtils.LineSegment.link(I18n.get("mco.template.select.none.linkTitle"), "https://aka.ms/MinecraftRealmsContentCreator");
-                                RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(s, lineSegment);
+                                RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(I18n.get("mco.template.select.failure"));
                             }
 
                             return null;
                         } else {
-                            return worldTemplatePaginatedList;
+                            WorldTemplatePaginatedList worldTemplatePaginatedListIn = either.left().get();
+
+                            for (WorldTemplate worldTemplate : worldTemplatePaginatedListIn.templates) {
+                                RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.addEntry(worldTemplate);
+                            }
+
+                            if (worldTemplatePaginatedListIn.templates.isEmpty()) {
+                                if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
+                                    String s = I18n.get("mco.template.select.none", "%link");
+                                    TextRenderingUtils.LineSegment lineSegment = TextRenderingUtils.LineSegment.link(I18n.get("mco.template.select.none.linkTitle"), "https://aka.ms/MinecraftRealmsContentCreator");
+                                    RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(s, lineSegment);
+                                }
+
+                                return null;
+                            } else {
+                                return worldTemplatePaginatedListIn;
+                            }
                         }
-                    }
-                }).join()) {
-                    either = RealmsSelectWorldTemplateScreen.this.fetchTemplates(worldTemplatePaginatedList, realmsClient);
+                    }).join();
                 }
-
             }
         }).start();
     }
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index d635ec691ad51e0fe223effa3d05a7763efbba6d..193e89504728aa76282af8fc9de7f083857a6d15 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -24,6 +24,7 @@ import java.nio.file.Path;
 import java.nio.file.spi.FileSystemProvider;
 import java.security.AccessController;
 import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 import java.time.Duration;
 import java.time.Instant;
 import java.util.Arrays;
@@ -128,21 +129,21 @@ public class Util {
     }
 
     private static int getMaxThreads() {
-        String s = System.getProperty("max.bg.threads");
+        String s = System.getProperty(MAX_THREADS_SYSTEM_PROPERTY);
         if (s != null) {
             try {
                 int i = Integer.parseInt(s);
-                if (i >= 1 && i <= 255) {
+                if (i >= 1 && i <= DEFAULT_MAX_THREADS) {
                     return i;
                 }
 
-                LOGGER.error("Wrong {} property value '{}'. Should be an integer value between 1 and {}.", "max.bg.threads", s, 255);
+                LOGGER.error("Wrong {} property value '{}'. Should be an integer value between 1 and {}.", MAX_THREADS_SYSTEM_PROPERTY, s, DEFAULT_MAX_THREADS);
             } catch (NumberFormatException var2) {
-                LOGGER.error("Could not parse {} property value '{}'. Should be an integer value between 1 and {}.", "max.bg.threads", s, 255);
+                LOGGER.error("Could not parse {} property value '{}'. Should be an integer value between 1 and {}.", MAX_THREADS_SYSTEM_PROPERTY, s, DEFAULT_MAX_THREADS);
             }
         }
 
-        return 255;
+        return DEFAULT_MAX_THREADS;
     }
 
     public static ExecutorService bootstrapExecutor() {
@@ -253,7 +254,7 @@ public class Util {
             String s2 = thread.getName();
             thread.setName(s);
 
-            Object var4;
+            V var4;
             try {
                 var4 = supplier.get();
             } finally {
@@ -338,18 +339,18 @@ public class Util {
     }
 
     public static <K> Strategy<K> identityStrategy() {
-        return Util.IdentityStrategy.INSTANCE;
+        return (Strategy<K>) IdentityStrategy.INSTANCE;
     }
 
     public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<? extends V>> list) {
-        return list.stream().reduce(CompletableFuture.completedFuture(Lists.newArrayList()), (completableFuture, completableFuture2) -> completableFuture2.thenCombine(completableFuture, (object, list) -> {
-                List<V> list2 = Lists.newArrayListWithCapacity(list.size() + 1);
-                list2.addAll(list);
+        return list.stream().reduce(CompletableFuture.completedFuture(Lists.newArrayList()), (completableFuture, completableFuture2) -> completableFuture2.thenCombine(completableFuture, (object, listIn) -> {
+                List<V> list2 = Lists.newArrayListWithCapacity(listIn.size() + 1);
+                list2.addAll(listIn);
                 list2.add(object);
                 return list2;
-            }), (completableFuture, completableFuture2) -> completableFuture.thenCombine(completableFuture2, (list, list2) -> {
-                List<V> list3 = Lists.newArrayListWithCapacity(list.size() + list2.size());
-                list3.addAll(list);
+            }), (completableFuture, completableFuture2) -> completableFuture.thenCombine(completableFuture2, (listIn, list2) -> {
+                List<V> list3 = Lists.newArrayListWithCapacity(listIn.size() + list2.size());
+                list3.addAll(listIn);
                 list3.addAll(list2);
                 return list3;
             }));
@@ -677,7 +678,7 @@ public class Util {
 
         public void openUrl(URL url) {
             try {
-                Process process = (Process)AccessController.doPrivileged(() -> Runtime.getRuntime().exec(this.getOpenUrlArguments(url)));
+                Process process = (Process)AccessController.doPrivileged((PrivilegedExceptionAction<?>) () -> Runtime.getRuntime().exec(this.getOpenUrlArguments(url)));
 
                 for(String s : IOUtils.readLines(process.getErrorStream())) {
                     Util.LOGGER.error(s);
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java b/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java
index fa9eaf5019e4c6a446120a5e01efb9b60a821ddd..185c18cb559c5c1b6db7555df1b2f82b0ad12eee 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java
@@ -34,7 +34,7 @@ public abstract class EntityTypePredicate {
             String s = GsonHelper.convertToString(jsonElement, "type");
             if (s.startsWith("#")) {
                 ResourceLocation resourceLocation = new ResourceLocation(s.substring(1));
-                return new EntityTypePredicate.TagPredicate(SerializationTags.getInstance().getTagOrThrow(Registry.ENTITY_TYPE_REGISTRY, resourceLocation, (resourceLocation) -> new JsonSyntaxException("Unknown entity tag '" + resourceLocation + "'")));
+                return new EntityTypePredicate.TagPredicate(SerializationTags.getInstance().getTagOrThrow(Registry.ENTITY_TYPE_REGISTRY, resourceLocation, (resourceLocationIn) -> new JsonSyntaxException("Unknown entity tag '" + resourceLocationIn + "'")));
             } else {
                 ResourceLocation resourceLocation2 = new ResourceLocation(s);
                 EntityType<?> entityType = (EntityType)Registry.ENTITY_TYPE.getOptional(resourceLocation2).orElseThrow(() -> new JsonSyntaxException("Unknown entity type '" + resourceLocation2 + "', valid types are: " + COMMA_JOINER.join(Registry.ENTITY_TYPE.keySet())));
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java b/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
index 7d9776c2660ac8a6dff435842669e820d59032e4..258ba17c8d096374b3c8bc8df808ac4d7b1cc94c 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
@@ -209,11 +209,11 @@ public class PlayerPredicate {
             if (!this.stats.isEmpty()) {
                 JsonArray jsonArray = new JsonArray();
                 this.stats.forEach((stat, ints) -> {
-                    JsonObject jsonObject = new JsonObject();
-                    jsonObject.addProperty("type", Registry.STAT_TYPE.getKey(stat.getType()).toString());
-                    jsonObject.addProperty("stat", getStatValueId(stat).toString());
-                    jsonObject.add("value", ints.serializeToJson());
-                    jsonArray.add(jsonObject);
+                    JsonObject jsonObjectIn = new JsonObject();
+                    jsonObjectIn.addProperty("type", Registry.STAT_TYPE.getKey(stat.getType()).toString());
+                    jsonObjectIn.addProperty("stat", getStatValueId(stat).toString());
+                    jsonObjectIn.add("value", ints.serializeToJson());
+                    jsonArray.add(jsonObjectIn);
                 });
                 jsonObject.add("stats", jsonArray);
             }
diff --git a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
index 37260d9654e733198d03183dbc764d955befd279..06f47884e6d29f5671228f180587df1a17d1ca64 100644
--- a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
@@ -137,7 +137,7 @@ public class StatePropertiesPredicate {
         protected <T extends Comparable<T>> boolean match(StateHolder<?, ?> stateHolder, Property<T> property) {
             T comparable = stateHolder.getValue(property);
             Optional<T> optional = property.getValue(this.value);
-            return optional.isPresent() && comparable.compareTo((Comparable)optional.get()) == 0;
+            return optional.isPresent() && comparable.compareTo(optional.get()) == 0;
         }
 
         public JsonElement toJson() {
@@ -190,14 +190,14 @@ public class StatePropertiesPredicate {
             T comparable = stateHolder.getValue(property);
             if (this.minValue != null) {
                 Optional<T> optional = property.getValue(this.minValue);
-                if (!optional.isPresent() || comparable.compareTo((Comparable)optional.get()) < 0) {
+                if (!optional.isPresent() || comparable.compareTo(optional.get()) < 0) {
                     return false;
                 }
             }
 
             if (this.maxValue != null) {
                 Optional<T> optional2 = property.getValue(this.maxValue);
-                if (!optional2.isPresent() || comparable.compareTo((Comparable)optional2.get()) > 0) {
+                if (!optional2.isPresent() || comparable.compareTo(optional2.get()) > 0) {
                     return false;
                 }
             }
diff --git a/src/main/java/net/minecraft/client/CycleOption.java b/src/main/java/net/minecraft/client/CycleOption.java
index 762a8b578ac3805a6d251e81b46acc4c3aee24ad..d0a5166e52c93543b8eeecb5018290584c434589 100644
--- a/src/main/java/net/minecraft/client/CycleOption.java
+++ b/src/main/java/net/minecraft/client/CycleOption.java
@@ -61,7 +61,7 @@ public class CycleOption<T> extends Option {
 
     public AbstractWidget createButton(Options options, int i, int i2, int i3) {
         CycleButton.TooltipSupplier<T> tooltipSupplier = (CycleButton.TooltipSupplier)this.tooltip.apply(Minecraft.getInstance());
-        return ((CycleButton.Builder)this.buttonSetup.get()).withTooltip(tooltipSupplier).withInitialValue((T)this.getter.apply(options)).create(i, i2, i3, 20, this.getCaption(), (cycleButton, object) -> {
+        return this.buttonSetup.get().withTooltip(tooltipSupplier).withInitialValue((T)this.getter.apply(options)).create(i, i2, i3, 20, this.getCaption(), (cycleButton, object) -> {
             this.setter.accept(options, this, object);
             options.save();
         });
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index 9c616c6500d6ce2d009314610065c0ee3f3cc574..7ef68b3761ca17361b6280f68ee50d6b05f39836 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -516,7 +516,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
                 this.options.fullscreen = this.window.isFullscreen();
             }
         } else {
-            StringBuilder stringBuilder = new StringBuilder("Recovering from unsupported resolution (" + this.window.getWidth() + "x" + this.window.getHeight() + ").\nPlease make sure you have up-to-date drivers (see aka.ms/mcdriver for instructions).");
+            StringBuilder stringBuilder = new StringBuilder("Recovering from unsupported resolution (" + this.window.getWidth() + "x" + this.window.getHeight() + ").\n" + UPDATE_DRIVERS_ADVICE);
             if (GlDebug.isDebugEnabled()) {
                 stringBuilder.append("\n\nReported GL debug messages:\n").append(String.join("\n", GlDebug.getLastOpenGlDebugMessages()));
             }
@@ -968,7 +968,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
             this.profiler.pop();
             this.profiler.push("tick");
 
-            for(int i2 = 0; i2 < Math.min(10, i); ++i2) {
+            for(int i2 = 0; i2 < Math.min(MAX_TICKS_PER_UPDATE, i); ++i2) {
                 this.profiler.incrementCounter("clientTick");
                 this.tick();
             }
@@ -2228,13 +2228,13 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
             systemReport.setDetail("Resource Packs", (Supplier<String>)(() -> {
                 StringBuilder stringBuilder = new StringBuilder();
 
-                for(String s : options.resourcePacks) {
+                for(String resourcePack : options.resourcePacks) {
                     if (stringBuilder.length() > 0) {
                         stringBuilder.append(", ");
                     }
 
-                    stringBuilder.append(s);
-                    if (options.incompatibleResourcePacks.contains(s)) {
+                    stringBuilder.append(resourcePack);
+                    if (options.incompatibleResourcePacks.contains(resourcePack)) {
                         stringBuilder.append(" (incompatible)");
                     }
                 }
@@ -2256,7 +2256,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
     }
 
     public CompletableFuture<Void> delayTextureReload() {
-        return this.submit(this::reloadResourcePacks).thenCompose((completableFuture) -> completableFuture);
+        return this.submit((Supplier<CompletableFuture<Void>>) this::reloadResourcePacks).thenCompose((completableFuture) -> completableFuture);
     }
 
     public void setCurrentServer(@Nullable ServerData serverData) {
diff --git a/src/main/java/net/minecraft/client/Option.java b/src/main/java/net/minecraft/client/Option.java
index eac1085032dfd9318d7ff470f0cf35f39f1d11e6..a6dbc8b187405d7884d65d66567dec77cdd87266 100644
--- a/src/main/java/net/minecraft/client/Option.java
+++ b/src/main/java/net/minecraft/client/Option.java
@@ -167,24 +167,12 @@ public abstract class Option {
     private static final Component PRIORITIZE_CHUNK_TOOLTIP_NONE = new TranslatableComponent("options.prioritizeChunkUpdates.none.tooltip");
     private static final Component PRIORITIZE_CHUNK_TOOLTIP_PLAYER_AFFECTED = new TranslatableComponent("options.prioritizeChunkUpdates.byPlayer.tooltip");
     private static final Component PRIORITIZE_CHUNK_TOOLTIP_NEARBY = new TranslatableComponent("options.prioritizeChunkUpdates.nearby.tooltip");
-    public static final CycleOption<PrioritizeChunkUpdates> PRIORITIZE_CHUNK_UPDATES = CycleOption.create("options.prioritizeChunkUpdates", PrioritizeChunkUpdates.values(), (prioritizeChunkUpdates) -> new TranslatableComponent(prioritizeChunkUpdates.getKey()), (options) -> options.prioritizeChunkUpdates, (options, option, prioritizeChunkUpdates) -> options.prioritizeChunkUpdates = prioritizeChunkUpdates).setTooltip((minecraft) -> (prioritizeChunkUpdates) -> {
-            Object var10000;
-            switch(prioritizeChunkUpdates) {
-            case NONE:
-                var10000 = minecraft.font.split(PRIORITIZE_CHUNK_TOOLTIP_NONE, 200);
-                break;
-            case PLAYER_AFFECTED:
-                var10000 = minecraft.font.split(PRIORITIZE_CHUNK_TOOLTIP_PLAYER_AFFECTED, 200);
-                break;
-            case NEARBY:
-                var10000 = minecraft.font.split(PRIORITIZE_CHUNK_TOOLTIP_NEARBY, 200);
-                break;
-            default:
-                var10000 = ImmutableList.of();
-            }
-
-            return var10000;
-        });
+    public static final CycleOption<PrioritizeChunkUpdates> PRIORITIZE_CHUNK_UPDATES = CycleOption.create("options.prioritizeChunkUpdates", PrioritizeChunkUpdates.values(), (prioritizeChunkUpdates) -> new TranslatableComponent(prioritizeChunkUpdates.getKey()), (options) -> options.prioritizeChunkUpdates, (options, option, prioritizeChunkUpdates) -> options.prioritizeChunkUpdates = prioritizeChunkUpdates).setTooltip((minecraft) -> (prioritizeChunkUpdates) -> switch (prioritizeChunkUpdates) {
+        case NONE -> minecraft.font.split(PRIORITIZE_CHUNK_TOOLTIP_NONE, 200);
+        case PLAYER_AFFECTED -> minecraft.font.split(PRIORITIZE_CHUNK_TOOLTIP_PLAYER_AFFECTED, 200);
+        case NEARBY -> minecraft.font.split(PRIORITIZE_CHUNK_TOOLTIP_NEARBY, 200);
+        default -> ImmutableList.of();
+    });
     public static final CycleOption<AttackIndicatorStatus> ATTACK_INDICATOR = CycleOption.create("options.attackIndicator", AttackIndicatorStatus.values(), (attackIndicatorStatus) -> new TranslatableComponent(attackIndicatorStatus.getKey()), (options) -> options.attackIndicator, (options, option, attackIndicatorStatus) -> options.attackIndicator = attackIndicatorStatus);
     public static final CycleOption<ChatVisiblity> CHAT_VISIBILITY = CycleOption.create("options.chat.visibility", ChatVisiblity.values(), (chatVisiblity) -> new TranslatableComponent(chatVisiblity.getKey()), (options) -> options.chatVisibility, (options, option, chatVisiblity) -> options.chatVisibility = chatVisiblity);
     private static final Component GRAPHICS_TOOLTIP_FAST = new TranslatableComponent("options.graphics.fast.tooltip");
diff --git a/src/main/java/net/minecraft/client/Options.java b/src/main/java/net/minecraft/client/Options.java
index ba9672252bf59236e74c9f25131c34650400369e..d983644c75e7f6d2161ef976fae1c8820fd9f78a 100644
--- a/src/main/java/net/minecraft/client/Options.java
+++ b/src/main/java/net/minecraft/client/Options.java
@@ -296,7 +296,7 @@ public class Options {
         }
 
         for(SoundSource soundSource : SoundSource.values()) {
-            this.sourceVolumes.computeFloat(soundSource, (soundSource, f) -> fieldAccess.process("soundCategory_" + soundSource.getName(), f != null ? f : 1.0F));
+            this.sourceVolumes.computeFloat(soundSource, (soundSourceIn, f) -> fieldAccess.process("soundCategory_" + soundSourceIn.getName(), f != null ? f : 1.0F));
         }
 
         for(PlayerModelPart playerModelPart : PlayerModelPart.values()) {
@@ -685,7 +685,7 @@ public class Options {
     }
 
     public String dumpOptionsForReport() {
-        ImmutableList<Pair<String, String>> immutableList = ImmutableList.builder().add(Pair.of("ao", String.valueOf(this.ambientOcclusion))).add(Pair.of("biomeBlendRadius", String.valueOf(this.biomeBlendRadius))).add(Pair.of("enableVsync", String.valueOf(this.enableVsync))).add(Pair.of("entityDistanceScaling", String.valueOf(this.entityDistanceScaling))).add(Pair.of("entityShadows", String.valueOf(this.entityShadows))).add(Pair.of("forceUnicodeFont", String.valueOf(this.forceUnicodeFont))).add(Pair.of("fov", String.valueOf(this.fov))).add(Pair.of("fovEffectScale", String.valueOf(this.fovEffectScale))).add(Pair.of("prioritizeChunkUpdates", String.valueOf(this.prioritizeChunkUpdates))).add(Pair.of("fullscreen", String.valueOf(this.fullscreen))).add(Pair.of("fullscreenResolution", String.valueOf(this.fullscreenVideoModeString))).add(Pair.of("gamma", String.valueOf(this.gamma))).add(Pair.of("glDebugVerbosity", String.valueOf(this.glDebugVerbosity))).add(Pair.of("graphicsMode", String.valueOf(this.graphicsMode))).add(Pair.of("guiScale", String.valueOf(this.guiScale))).add(Pair.of("maxFps", String.valueOf(this.framerateLimit))).add(Pair.of("mipmapLevels", String.valueOf(this.mipmapLevels))).add(Pair.of("narrator", String.valueOf(this.narratorStatus))).add(Pair.of("overrideHeight", String.valueOf(this.overrideHeight))).add(Pair.of("overrideWidth", String.valueOf(this.overrideWidth))).add(Pair.of("particles", String.valueOf(this.particles))).add(Pair.of("reducedDebugInfo", String.valueOf(this.reducedDebugInfo))).add(Pair.of("renderClouds", String.valueOf(this.renderClouds))).add(Pair.of("renderDistance", String.valueOf(this.renderDistance))).add(Pair.of("simulationDistance", String.valueOf(this.simulationDistance))).add(Pair.of("resourcePacks", String.valueOf(this.resourcePacks))).add(Pair.of("screenEffectScale", String.valueOf(this.screenEffectScale))).add(Pair.of("syncChunkWrites", String.valueOf(this.syncWrites))).add(Pair.of("useNativeTransport", String.valueOf(this.useNativeTransport))).add(Pair.of("soundDevice", String.valueOf(this.soundDevice))).build();
+        ImmutableList<Pair<String, String>> immutableList = ImmutableList.<Pair<String, String>>builder().add(Pair.of("ao", String.valueOf(this.ambientOcclusion))).add(Pair.of("biomeBlendRadius", String.valueOf(this.biomeBlendRadius))).add(Pair.of("enableVsync", String.valueOf(this.enableVsync))).add(Pair.of("entityDistanceScaling", String.valueOf(this.entityDistanceScaling))).add(Pair.of("entityShadows", String.valueOf(this.entityShadows))).add(Pair.of("forceUnicodeFont", String.valueOf(this.forceUnicodeFont))).add(Pair.of("fov", String.valueOf(this.fov))).add(Pair.of("fovEffectScale", String.valueOf(this.fovEffectScale))).add(Pair.of("prioritizeChunkUpdates", String.valueOf(this.prioritizeChunkUpdates))).add(Pair.of("fullscreen", String.valueOf(this.fullscreen))).add(Pair.of("fullscreenResolution", String.valueOf(this.fullscreenVideoModeString))).add(Pair.of("gamma", String.valueOf(this.gamma))).add(Pair.of("glDebugVerbosity", String.valueOf(this.glDebugVerbosity))).add(Pair.of("graphicsMode", String.valueOf(this.graphicsMode))).add(Pair.of("guiScale", String.valueOf(this.guiScale))).add(Pair.of("maxFps", String.valueOf(this.framerateLimit))).add(Pair.of("mipmapLevels", String.valueOf(this.mipmapLevels))).add(Pair.of("narrator", String.valueOf(this.narratorStatus))).add(Pair.of("overrideHeight", String.valueOf(this.overrideHeight))).add(Pair.of("overrideWidth", String.valueOf(this.overrideWidth))).add(Pair.of("particles", String.valueOf(this.particles))).add(Pair.of("reducedDebugInfo", String.valueOf(this.reducedDebugInfo))).add(Pair.of("renderClouds", String.valueOf(this.renderClouds))).add(Pair.of("renderDistance", String.valueOf(this.renderDistance))).add(Pair.of("simulationDistance", String.valueOf(this.simulationDistance))).add(Pair.of("resourcePacks", String.valueOf(this.resourcePacks))).add(Pair.of("screenEffectScale", String.valueOf(this.screenEffectScale))).add(Pair.of("syncChunkWrites", String.valueOf(this.syncWrites))).add(Pair.of("useNativeTransport", String.valueOf(this.useNativeTransport))).add(Pair.of("soundDevice", String.valueOf(this.soundDevice))).build();
         return (String)immutableList.stream().map((pair) -> (String)pair.getFirst() + ": " + (String)pair.getSecond()).collect(Collectors.joining(System.lineSeparator()));
     }
 
diff --git a/src/main/java/net/minecraft/client/gui/Font.java b/src/main/java/net/minecraft/client/gui/Font.java
index e6286e22864e1fa019a7ea9eaee238a96aa8e9fd..acd74e224159ef69b6190f59b93c07bffeb2c7fa 100644
--- a/src/main/java/net/minecraft/client/gui/Font.java
+++ b/src/main/java/net/minecraft/client/gui/Font.java
@@ -131,14 +131,14 @@ public class Font {
                     float[] floats = new float[]{f};
                     int i7 = i5;
                     int i8 = i6;
-                    formattedCharSequence.accept((i4x, style, i5) -> {
+                    formattedCharSequence.accept((i4x, style, i5x) -> {
                         boolean flag = style.isBold();
                         FontSet fontSet = this.getFontSet(style.getFont());
-                        GlyphInfo glyphInfo = fontSet.getGlyphInfo(i5);
+                        GlyphInfo glyphInfo = fontSet.getGlyphInfo(i5x);
                         stringRenderOutput.x = floats[0] + (float)i7 * glyphInfo.getShadowOffset();
                         stringRenderOutput.y = f2 + (float)i8 * glyphInfo.getShadowOffset();
                         floats[0] += glyphInfo.getAdvance(flag);
-                        return stringRenderOutput.accept(i4x, style.withColor(i4), i5);
+                        return stringRenderOutput.accept(i4x, style.withColor(i4), i5x);
                     });
                 }
             }
diff --git a/src/main/java/net/minecraft/client/gui/Gui.java b/src/main/java/net/minecraft/client/gui/Gui.java
index caccdb4caeec7889b05a8e9baa059951a491d56a..883df21e96be64c2d8a9655698aed59281abbd2f 100644
--- a/src/main/java/net/minecraft/client/gui/Gui.java
+++ b/src/main/java/net/minecraft/client/gui/Gui.java
@@ -453,7 +453,7 @@ public class Gui extends GuiComponent {
 
             RenderSystem.enableBlend();
             int i = 0;
-            int i2 = 0;
+            int i2In = 0;
             MobEffectTextureManager mobEffectTextureManager = this.minecraft.getMobEffectTextures();
             List<Runnable> list = Lists.newArrayListWithExpectedSize(collection.size());
             RenderSystem.setShaderTexture(0, AbstractContainerScreen.INVENTORY_LOCATION);
@@ -471,8 +471,8 @@ public class Gui extends GuiComponent {
                         ++i;
                         i3 -= 25 * i;
                     } else {
-                        ++i2;
-                        i3 -= 25 * i2;
+                        ++i2In;
+                        i3 -= 25 * i2In;
                         i4 += 26;
                     }
 
diff --git a/src/main/java/net/minecraft/client/gui/components/CycleButton.java b/src/main/java/net/minecraft/client/gui/components/CycleButton.java
index b1affb61c23aea93466c45b1ea21b7afb84a7420..2661c93e79a3775d410a2307ca64d30db8fbffdb 100644
--- a/src/main/java/net/minecraft/client/gui/components/CycleButton.java
+++ b/src/main/java/net/minecraft/client/gui/components/CycleButton.java
@@ -132,15 +132,15 @@ public class CycleButton<T> extends AbstractButton implements TooltipAccessor {
     }
 
     public static CycleButton.Builder<Boolean> booleanBuilder(Component component, Component component2) {
-        return (new CycleButton.Builder((flag) -> flag ? component : component2)).withValues(BOOLEAN_OPTIONS);
+        return (new CycleButton.Builder<Boolean>((flag) -> flag ? component : component2)).withValues(BOOLEAN_OPTIONS);
     }
 
     public static CycleButton.Builder<Boolean> onOffBuilder() {
-        return (new CycleButton.Builder((flag) -> flag ? CommonComponents.OPTION_ON : CommonComponents.OPTION_OFF)).withValues(BOOLEAN_OPTIONS);
+        return (new CycleButton.Builder<Boolean>((flag) -> flag ? CommonComponents.OPTION_ON : CommonComponents.OPTION_OFF)).withValues(BOOLEAN_OPTIONS);
     }
 
     public static CycleButton.Builder<Boolean> onOffBuilder(boolean flag) {
-        return onOffBuilder().withInitialValue((T)flag);
+        return onOffBuilder().withInitialValue(flag);
     }
 
     public static class Builder<T> {
diff --git a/src/main/java/net/minecraft/client/gui/font/FontManager.java b/src/main/java/net/minecraft/client/gui/font/FontManager.java
index 88b8c76e50f0439249db18a907b17315312a14f7..b2edef46a662f12f698d25a9b8b6c5e358d17171 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontManager.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontManager.java
@@ -129,7 +129,7 @@ public class FontManager implements AutoCloseable {
                     intSet.addAll(glyphProvider2.getSupportedGlyphs());
                 }
 
-                intSet.forEach((ix) -> {
+                intSet.forEach((java.util.function.IntConsumer) (ix) -> {
                     if (ix != 32) {
                         for(GlyphProvider glyphProvider : Lists.reverse(list)) {
                             if (glyphProvider.getGlyph(ix) != null) {
diff --git a/src/main/java/net/minecraft/client/gui/font/FontSet.java b/src/main/java/net/minecraft/client/gui/font/FontSet.java
index 46be8963d9bd0fe53bbe4eade7078752f3c03877..19764e3234661e5510b67f9f53b9965e1526f2f1 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontSet.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontSet.java
@@ -56,7 +56,7 @@ public class FontSet implements AutoCloseable {
         }
 
         Set<GlyphProvider> set = Sets.newHashSet();
-        intSet.forEach((i) -> {
+        intSet.forEach((java.util.function.IntConsumer) (i) -> {
             for(GlyphProvider glyphProvider : list) {
                 GlyphInfo glyphInfo = (GlyphInfo)(i == 32 ? SPACE_INFO : glyphProvider.getGlyph(i));
                 if (glyphInfo != null) {
diff --git a/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java b/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
index d1b34189eb5f13c1f3886acd5ead146244bde0dd..1cc84417f43fcb3584388587298958db00a5c158 100644
--- a/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
+++ b/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
@@ -9,7 +9,7 @@ import net.minecraft.util.Unit;
 public class NarrationThunk<T> {
     private final T contents;
     private final BiConsumer<Consumer<String>, T> converter;
-    public static final NarrationThunk<?> EMPTY = new NarrationThunk((T)Unit.INSTANCE, (consumer, unit) -> {
+    public static final NarrationThunk<?> EMPTY = new NarrationThunk(Unit.INSTANCE, (consumer, unit) -> {
     });
 
     private NarrationThunk(T object, BiConsumer<Consumer<String>, T> biConsumer) {
@@ -18,7 +18,7 @@ public class NarrationThunk<T> {
     }
 
     public static NarrationThunk<?> from(String s) {
-        return new NarrationThunk((T)s, Consumer::accept);
+        return new NarrationThunk<>(s, Consumer::accept);
     }
 
     public static NarrationThunk<?> from(Component component) {
@@ -26,7 +26,7 @@ public class NarrationThunk<T> {
     }
 
     public static NarrationThunk<?> from(List<Component> list) {
-        return new NarrationThunk((T)list, (consumer, list2) -> list.stream().map(Component::getString).forEach(consumer));
+        return new NarrationThunk<>(list, (consumer, list2) -> list.stream().map(Component::getString).forEach(consumer));
     }
 
     public void getText(Consumer<String> consumer) {
diff --git a/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java b/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
index 1f88364b9929dc12f05535dd2297844a0f6efc0f..16189cf8f3ea7941c7aab3ee3eade99f03ce01e0 100644
--- a/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
+++ b/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
@@ -7,7 +7,7 @@ import java.util.function.Consumer;
 
 public class ScreenNarrationCollector {
     int generation;
-    final Map<ScreenNarrationCollector.EntryKey, ScreenNarrationCollector.NarrationEntry> entries = Maps.newTreeMap(Comparator.comparing((entryKey) -> entryKey.type).thenComparing((entryKey) -> entryKey.depth));
+    final Map<ScreenNarrationCollector.EntryKey, ScreenNarrationCollector.NarrationEntry> entries = Maps.newTreeMap(Comparator.<EntryKey, NarratedElementType>comparing((entryKey) -> entryKey.type).thenComparing((entryKey) -> entryKey.depth));
 
     public void update(Consumer<NarrationElementOutput> consumer) {
         ++this.generation;
diff --git a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
index 3123c52020760508b95b505dd8f2411b2e0af812..5ff27d50841176c1b0a3b71e58c520b19a79ec64 100644
--- a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
@@ -431,11 +431,11 @@ public class StatsScreen extends Screen implements StatsUpdateListener {
                     i = 0;
                     i2 = 0;
                 } else if (ItemStatisticsList.this.blockColumns.contains(ItemStatisticsList.this.sortColumn)) {
-                    StatType<Block> statType = ItemStatisticsList.this.sortColumn;
+                    StatType<Block> statType = (StatType<Block>) ItemStatisticsList.this.sortColumn;
                     i = item instanceof BlockItem ? StatsScreen.this.stats.getValue(statType, ((BlockItem)item).getBlock()) : -1;
                     i2 = item2 instanceof BlockItem ? StatsScreen.this.stats.getValue(statType, ((BlockItem)item2).getBlock()) : -1;
                 } else {
-                    StatType<Item> statType2 = ItemStatisticsList.this.sortColumn;
+                    StatType<Item> statType2 = (StatType<Item>) ItemStatisticsList.this.sortColumn;
                     i = StatsScreen.this.stats.getValue(statType2, item);
                     i2 = StatsScreen.this.stats.getValue(statType2, item2);
                 }
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
index cd316ffe0e676fceb3d2b3d069c0bc5a0d001046..e54ab1d0db391cade918d79fb2ea86cade3a2907 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
@@ -31,7 +31,7 @@ public class CommandBlockEditScreen extends AbstractCommandBlockEditScreen {
 
     protected void init() {
         super.init();
-        this.modeButton = this.addRenderableWidget(CycleButton.builder((mode) -> {
+        this.modeButton = this.addRenderableWidget(CycleButton.<CommandBlockEntity.Mode>builder((mode) -> {
             switch(mode) {
             case SEQUENCE:
                 return new TranslatableComponent("advMode.mode.sequence");
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
index c606c85eba4510e757b35f98fa2ef46ee1178518..606aa7524bcec38055a93d88c764cbcf5f86f7aa 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
@@ -125,7 +125,7 @@ public class StructureBlockEditScreen extends Screen {
             }
 
         }));
-        this.addRenderableWidget(CycleButton.builder((structureMode) -> new TranslatableComponent("structure_block.mode." + structureMode.getSerializedName())).withValues(DEFAULT_MODES, ALL_MODES).displayOnlyValue().withInitialValue(this.initialMode).create(this.width / 2 - 4 - 150, 185, 50, 20, new TextComponent("MODE"), (cycleButton, structureMode) -> {
+        this.addRenderableWidget(CycleButton.<StructureMode>builder((structureMode) -> new TranslatableComponent("structure_block.mode." + structureMode.getSerializedName())).withValues(DEFAULT_MODES, ALL_MODES).displayOnlyValue().withInitialValue(this.initialMode).create(this.width / 2 - 4 - 150, 185, 50, 20, new TextComponent("MODE"), (cycleButton, structureMode) -> {
             this.structure.setMode(structureMode);
             this.updateMode(structureMode);
         }));
diff --git a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
index d0687e0ff671698da68a55e4e4314ecd8dae19c3..2588001e4c9ab758cc86132f47741d2197cc66c7 100644
--- a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
@@ -219,8 +219,8 @@ public class PackSelectionScreen extends Screen {
                     label86: {
                         try {
                             if (inputStream != null) {
-                                String s = pack.getId();
-                                ResourceLocation resourceLocation = new ResourceLocation("minecraft", "pack/" + Util.sanitizeName(s, ResourceLocation::validPathChar) + "/" + Hashing.sha1().hashUnencodedChars(s) + "/icon");
+                                String packId = pack.getId();
+                                ResourceLocation resourceLocation = new ResourceLocation("minecraft", "pack/" + Util.sanitizeName(packId, ResourceLocation::validPathChar) + "/" + Hashing.sha1().hashUnencodedChars(packId) + "/icon");
                                 NativeImage nativeImage = NativeImage.read(inputStream);
                                 textureManager.register(resourceLocation, new DynamicTexture(nativeImage));
                                 var8 = resourceLocation;
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
index ca140af94b344fad60cd9d9c72ee2e6359947ad7..ef253c9e47a9d3f6e8476f5e41b9d66f1fec72f7 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
@@ -234,7 +234,7 @@ public class EditGameRulesScreen extends Screen {
                     List<FormattedCharSequence> list;
                     String s3;
                     if (I18n.exists(s2)) {
-                        Builder<FormattedCharSequence> builder = ImmutableList.builder().add(component2.getVisualOrderText());
+                        Builder<FormattedCharSequence> builder = ImmutableList.<FormattedCharSequence>builder().add(component2.getVisualOrderText());
                         Component component4 = new TranslatableComponent(s2);
                         EditGameRulesScreen.this.font.split(component4, 150).forEach(builder::add);
                         list = builder.add(component3.getVisualOrderText()).build();
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
index d168ae161670ef13e6f8f84821423ec8a522fed5..c7bf0a0a9e71c89abbcd996cf0352945c4f72581 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
@@ -274,10 +274,10 @@ public class WorldSelectionList extends ObjectSelectionList<WorldSelectionList.W
                     Component component = new TranslatableComponent(s2, this.summary.getWorldVersionName(), SharedConstants.getCurrentVersion().getName());
                     this.minecraft.setScreen(new BackupConfirmScreen(this.screen, (flag, flag2) -> {
                         if (flag) {
-                            String s = this.summary.getLevelId();
+                            String levelId = this.summary.getLevelId();
 
                             try {
-                                LevelStorageSource.LevelStorageAccess levelStorageAccess = this.minecraft.getLevelSource().createAccess(s);
+                                LevelStorageSource.LevelStorageAccess levelStorageAccess = this.minecraft.getLevelSource().createAccess(levelId);
 
                                 try {
                                     EditWorldScreen.makeBackupAndShowToast(levelStorageAccess);
@@ -297,8 +297,8 @@ public class WorldSelectionList extends ObjectSelectionList<WorldSelectionList.W
                                     levelStorageAccess.close();
                                 }
                             } catch (IOException var9) {
-                                SystemToast.onWorldAccessFailure(this.minecraft, s);
-                                WorldSelectionList.LOGGER.error("Failed to backup level {}", s, var9);
+                                SystemToast.onWorldAccessFailure(this.minecraft, levelId);
+                                WorldSelectionList.LOGGER.error("Failed to backup level {}", levelId, var9);
                             }
                         }
 
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index e8a6a5dd16994870e57225d62720c2ccffa60aef..f6b64dc5d5f1d2f2ceefebe17760c56edaa13254 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -509,7 +509,7 @@ public class ClientPacketListener implements ClientGamePacketListener {
 
     public void handleRemoveEntities(ClientboundRemoveEntitiesPacket clientboundRemoveEntitiesPacket) {
         PacketUtils.ensureRunningOnSameThread(clientboundRemoveEntitiesPacket, this, this.minecraft);
-        clientboundRemoveEntitiesPacket.getEntityIds().forEach((i) -> this.level.removeEntity(i, Entity.RemovalReason.DISCARDED));
+        clientboundRemoveEntitiesPacket.getEntityIds().forEach((java.util.function.IntConsumer) (i) -> this.level.removeEntity(i, Entity.RemovalReason.DISCARDED));
     }
 
     public void handleMovePlayer(ClientboundPlayerPositionPacket clientboundPlayerPositionPacket) {
@@ -1472,10 +1472,10 @@ public class ClientPacketListener implements ClientGamePacketListener {
                 } else {
                     this.minecraft.execute(() -> this.minecraft.setScreen(new ConfirmScreen((flag2) -> {
                             this.minecraft.setScreen((Screen)null);
-                            ServerData serverData = this.minecraft.getCurrentServer();
+                            ServerData serverDataIn = this.minecraft.getCurrentServer();
                             if (flag2) {
-                                if (serverData != null) {
-                                    serverData.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
+                                if (serverDataIn != null) {
+                                    serverDataIn.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
                                 }
 
                                 this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
@@ -1484,13 +1484,13 @@ public class ClientPacketListener implements ClientGamePacketListener {
                                 this.send(ServerboundResourcePackPacket.Action.DECLINED);
                                 if (flag) {
                                     this.connection.disconnect(new TranslatableComponent("multiplayer.requiredTexturePrompt.disconnect"));
-                                } else if (serverData != null) {
-                                    serverData.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
+                                } else if (serverDataIn != null) {
+                                    serverDataIn.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
                                 }
                             }
 
-                            if (serverData != null) {
-                                ServerList.saveSingleServer(serverData);
+                            if (serverDataIn != null) {
+                                ServerList.saveSingleServer(serverDataIn);
                             }
 
                         }, flag ? new TranslatableComponent("multiplayer.requiredTexturePrompt.line1") : new TranslatableComponent("multiplayer.texturePrompt.line1"), preparePackPrompt((Component)(flag ? (new TranslatableComponent("multiplayer.requiredTexturePrompt.line2")).withStyle(new ChatFormatting[]{ChatFormatting.YELLOW, ChatFormatting.BOLD}) : new TranslatableComponent("multiplayer.texturePrompt.line2")), clientboundResourcePackPacket.getPrompt()), flag ? CommonComponents.GUI_PROCEED : CommonComponents.GUI_YES, (Component)(flag ? new TranslatableComponent("menu.disconnect") : CommonComponents.GUI_NO))));
diff --git a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
index 0c453fe5a7b46d307673f5852e3695059e8a5414..35c862ea64f1a918f0ae211003f233ed130259e7 100644
--- a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
@@ -92,7 +92,7 @@ public class BlockEntityWithoutLevelRenderer implements ResourceManagerReloadLis
                     } else if (compoundTag.contains("SkullOwner", 8) && !StringUtils.isBlank(compoundTag.getString("SkullOwner"))) {
                         gameProfile = new GameProfile((UUID)null, compoundTag.getString("SkullOwner"));
                         compoundTag.remove("SkullOwner");
-                        SkullBlockEntity.updateGameprofile(gameProfile, (gameProfile) -> compoundTag.put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), gameProfile)));
+                        SkullBlockEntity.updateGameprofile(gameProfile, (gameProfileIn) -> compoundTag.put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), gameProfileIn)));
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
index 851526e3838c729d1602fd916afb970828da20d9..c34fe16a7f19226e24c023445fa5d10b71dc268d 100644
--- a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
@@ -924,131 +924,63 @@ public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseab
             for(Direction direction2 : DIRECTIONS) {
                 ChunkRenderDispatcher.RenderChunk renderChunk2 = this.getRelativeFrom(blockPos, renderChunk, direction2);
                 if (renderChunk2 == null) {
-                    if (!this.closeToBorder(blockPos, renderChunk)) {
+                    if (!closeToBorder(blockPos, renderChunk)) {
                         this.nextFullUpdateMillis.set(System.currentTimeMillis() + 500L);
                     }
-                } else if (!flag || !renderChunkInfo.hasDirection(direction2.getOpposite())) {
-                    if (flag && renderChunkInfo.hasSourceDirections()) {
-                        ChunkRenderDispatcher.CompiledChunk compiledChunk = renderChunk.getCompiledChunk();
-                        boolean flag3 = false;
-
-                        for(int i2 = 0; i2 < DIRECTIONS.length; ++i2) {
-                            if (renderChunkInfo.hasSourceDirection(i2) && compiledChunk.facesCanSeeEachother(DIRECTIONS[i2].getOpposite(), direction2)) {
-                                flag3 = true;
-                                break;
-                            }
-                        }
-
-                        if (!flag3) {
-                            continue;
-                        }
-                    }
-
-                    if (flag && flag2 && renderChunkInfo.hasSourceDirections() && !renderChunkInfo.hasSourceDirection(direction.ordinal())) {
-                        ChunkRenderDispatcher.RenderChunk renderChunk3 = this.getRelativeFrom(blockPos, renderChunk, direction.getOpposite());
-                        if (renderChunk3 == null) {
-                            continue;
-                        }
-
-                        LevelRenderer.RenderChunkInfo renderChunkInfo2 = renderInfoMap.get(renderChunk3);
-                        if (renderChunkInfo2 == null) {
-                            continue;
+                    continue;
+                }
+                if (flag && renderChunkInfo.hasDirection(direction2.getOpposite())) continue;
+                if (flag && renderChunkInfo.hasSourceDirections()) {
+                    ChunkRenderDispatcher.CompiledChunk compiledChunk = renderChunk.getCompiledChunk();
+                    boolean flag3 = false;
+                    for (int i2 = 0; i2 < DIRECTIONS.length; i2++) {
+                        if (renderChunkInfo.hasSourceDirection(i2) && compiledChunk.facesCanSeeEachother(DIRECTIONS[i2].getOpposite(), direction2)) {
+                            flag3 = true;
+                            break;
                         }
                     }
-
-                    if (flag && flag2) {
-                        BlockPos blockPos3;
-                        byte var10001;
-                        label140: {
-                            label139: {
-                                blockPos3 = renderChunk2.getOrigin();
-                                if (direction2.getAxis() == Direction.Axis.X) {
-                                    if (blockPos2.getX() > blockPos3.getX()) {
-                                        break label139;
-                                    }
-                                } else if (blockPos2.getX() < blockPos3.getX()) {
-                                    break label139;
-                                }
-
-                                var10001 = 0;
-                                break label140;
-                            }
-
-                            var10001 = 16;
-                        }
-
-                        byte var10002;
-                        label132: {
-                            label131: {
-                                if (direction2.getAxis() == Direction.Axis.Y) {
-                                    if (blockPos2.getY() > blockPos3.getY()) {
-                                        break label131;
-                                    }
-                                } else if (blockPos2.getY() < blockPos3.getY()) {
-                                    break label131;
-                                }
-
-                                var10002 = 0;
-                                break label132;
-                            }
-
-                            var10002 = 16;
-                        }
-
-                        byte var10003;
-                        label124: {
-                            label123: {
-                                if (direction2.getAxis() == Direction.Axis.Z) {
-                                    if (blockPos2.getZ() > blockPos3.getZ()) {
-                                        break label123;
-                                    }
-                                } else if (blockPos2.getZ() < blockPos3.getZ()) {
-                                    break label123;
-                                }
-
-                                var10003 = 0;
-                                break label124;
-                            }
-
-                            var10003 = 16;
-                        }
-
-                        BlockPos blockPos4 = blockPos3.offset(var10001, var10002, var10003);
-                        Vec3 vec32 = new Vec3((double)blockPos4.getX(), (double)blockPos4.getY(), (double)blockPos4.getZ());
-                        Vec3 vec33 = vec3.subtract(vec32).normalize().scale(CEILED_SECTION_DIAGONAL);
-                        boolean flag4 = true;
-
-                        while(vec3.subtract(vec32).lengthSqr() > 3600.0D) {
-                            vec32 = vec32.add(vec33);
-                            if (vec32.y > (double)this.level.getMaxBuildHeight() || vec32.y < (double)this.level.getMinBuildHeight()) {
-                                break;
-                            }
-
-                            ChunkRenderDispatcher.RenderChunk renderChunk4 = this.viewArea.getRenderChunkAt(new BlockPos(vec32.x, vec32.y, vec32.z));
-                            if (renderChunk4 == null || renderInfoMap.get(renderChunk4) == null) {
-                                flag4 = false;
-                                break;
-                            }
-                        }
-
-                        if (!flag4) {
-                            continue;
+                    if (!flag3) continue;
+                }
+                if (flag && flag2 && renderChunkInfo.hasSourceDirections() && !renderChunkInfo.hasSourceDirection(direction.ordinal())) {
+                    ChunkRenderDispatcher.RenderChunk renderChunk3 = getRelativeFrom(blockPos, renderChunk, direction.getOpposite());
+                    if (renderChunk3 == null) continue;
+                    RenderChunkInfo renderChunkInfo2 = renderInfoMap.get(renderChunk3);
+                    if (renderChunkInfo2 == null) continue;
+                }
+                if (flag && flag2) {
+                    BlockPos blockPos3 = renderChunk2.getOrigin();
+                    BlockPos blockPos4 = blockPos3.offset(
+                            ((direction2.getAxis() == Direction.Axis.X) ? (blockPos2.getX() > blockPos3.getX()) : (blockPos2.getX() < blockPos3.getX())) ? 16 : 0,
+                            ((direction2.getAxis() == Direction.Axis.Y) ? (blockPos2.getY() > blockPos3.getY()) : (blockPos2.getY() < blockPos3.getY())) ? 16 : 0,
+                            ((direction2.getAxis() == Direction.Axis.Z) ? (blockPos2.getZ() > blockPos3.getZ()) : (blockPos2.getZ() < blockPos3.getZ())) ? 16 : 0
+                    );
+                    Vec3 vec32 = new Vec3(blockPos4.getX(), blockPos4.getY(), blockPos4.getZ());
+                    Vec3 vec33 = vec3.subtract(vec32).normalize().scale(CEILED_SECTION_DIAGONAL);
+                    boolean flag4 = true;
+                    while (vec3.subtract(vec32).lengthSqr() > 3600.0D) {
+                        vec32 = vec32.add(vec33);
+                        if (vec32.y > this.level.getMaxBuildHeight() || vec32.y < this.level.getMinBuildHeight()) break;
+                        ChunkRenderDispatcher.RenderChunk renderChunk4 = this.viewArea.getRenderChunkAt(new BlockPos(vec32.x, vec32.y, vec32.z));
+                        if (renderChunk4 == null || renderInfoMap.get(renderChunk4) == null) {
+                            flag4 = false;
+                            break;
                         }
                     }
+                    if (!flag4) continue;
+                }
 
-                    LevelRenderer.RenderChunkInfo renderChunkInfo3 = renderInfoMap.get(renderChunk2);
-                    if (renderChunkInfo3 != null) {
-                        renderChunkInfo3.addSourceDirection(direction2);
-                    } else if (!renderChunk2.hasAllNeighbors()) {
-                        if (!this.closeToBorder(blockPos, renderChunk)) {
-                            this.nextFullUpdateMillis.set(System.currentTimeMillis() + 500L);
-                        }
-                    } else {
-                        LevelRenderer.RenderChunkInfo renderChunkInfo4 = new LevelRenderer.RenderChunkInfo(renderChunk2, direction2, renderChunkInfo.step + 1);
-                        renderChunkInfo4.setDirections(renderChunkInfo.directions, direction2);
-                        queue.add(renderChunkInfo4);
-                        renderInfoMap.put(renderChunk2, renderChunkInfo4);
+                LevelRenderer.RenderChunkInfo renderChunkInfo3 = renderInfoMap.get(renderChunk2);
+                if (renderChunkInfo3 != null) {
+                    renderChunkInfo3.addSourceDirection(direction2);
+                } else if (!renderChunk2.hasAllNeighbors()) {
+                    if (!this.closeToBorder(blockPos, renderChunk)) {
+                        this.nextFullUpdateMillis.set(System.currentTimeMillis() + 500L);
                     }
+                } else {
+                    LevelRenderer.RenderChunkInfo renderChunkInfo4 = new LevelRenderer.RenderChunkInfo(renderChunk2, direction2, renderChunkInfo.step + 1);
+                    renderChunkInfo4.setDirections(renderChunkInfo.directions, direction2);
+                    queue.add(renderChunkInfo4);
+                    renderInfoMap.put(renderChunk2, renderChunkInfo4);
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java b/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
index d559ca145678cb3127caffd0d92c2c70be8ea2f3..ebd531cd81b8966d0b738bdb6ce9e56df5be9581 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
@@ -41,7 +41,7 @@ public class KeyValueCondition implements Condition {
                     predicate = this.getBlockStatePredicate(stateDefinition, property, s);
                 } else {
                     List<Predicate<BlockState>> list2 = list.stream().map((sx) -> this.getBlockStatePredicate(stateDefinition, property, sx)).collect(Collectors.toList());
-                    predicate = (blockState) -> list2.stream().anyMatch((predicate) -> predicate.test(blockState));
+                    predicate = (blockState) -> list2.stream().anyMatch((predicateIn) -> predicateIn.test(blockState));
                 }
 
                 return flag ? predicate.negate() : predicate;
diff --git a/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
index a3b654a02fa1b7452f804e8df6826c1c5bf85ebe..763da7bba70f626190d7f170d4d93849f6260684 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
@@ -112,17 +112,17 @@ public class ChunkDebugRenderer implements DebugRenderer.SimpleDebugRenderer {
                 if (serverLevel == null) {
                     return ImmutableMap.of();
                 } else {
-                    Builder<ChunkPos, String> builder = ImmutableMap.builder();
+                    Builder<ChunkPos, String> builderIn = ImmutableMap.builder();
                     ServerChunkCache serverChunkCache = serverLevel.getChunkSource();
 
                     for(int i3 = i - 12; i3 <= i + 12; ++i3) {
                         for(int i4 = i2 - 12; i4 <= i2 + 12; ++i4) {
                             ChunkPos chunkPos = new ChunkPos(i3, i4);
-                            builder.put(chunkPos, "Server: " + serverChunkCache.getChunkDebugData(chunkPos));
+                            builderIn.put(chunkPos, "Server: " + serverChunkCache.getChunkDebugData(chunkPos));
                         }
                     }
 
-                    return builder.build();
+                    return builderIn.build();
                 }
             });
         }
diff --git a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
index 132b907e1e6570448624d1cbc4ea98f4daab2e77..52b51021c35d0291e672ca1ca3f0d0c18e4c0747 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
@@ -41,11 +41,11 @@ public class GoalSelectorDebugRenderer implements DebugRenderer.SimpleDebugRende
             for(int i = 0; i < list.size(); ++i) {
                 GoalSelectorDebugRenderer.DebugGoal debugGoal = (GoalSelectorDebugRenderer.DebugGoal)list.get(i);
                 if (blockPos.closerThan(debugGoal.pos, 160.0D)) {
-                    double d = (double)debugGoal.pos.getX() + 0.5D;
-                    double d2 = (double)debugGoal.pos.getY() + 2.0D + (double)i * 0.25D;
-                    double d3 = (double)debugGoal.pos.getZ() + 0.5D;
+                    double dx = (double)debugGoal.pos.getX() + 0.5D;
+                    double d2x = (double)debugGoal.pos.getY() + 2.0D + (double)i * 0.25D;
+                    double d3x = (double)debugGoal.pos.getZ() + 0.5D;
                     int i2 = debugGoal.isRunning ? -16711936 : -3355444;
-                    DebugRenderer.renderFloatingText(debugGoal.name, d, d2, d3, i2);
+                    DebugRenderer.renderFloatingText(debugGoal.name, dx, d2x, d3x, i2);
                 }
             }
 
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
index 511651e2fe3ed53089d6aadb4fda0fc86746e5ce..f4fab756fb817a47ebb0eac70c441d49cb602471 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
@@ -79,7 +79,7 @@ public class EntityRenderDispatcher implements ResourceManagerReloadListener {
         if (entity instanceof AbstractClientPlayer) {
             String s = ((AbstractClientPlayer)entity).getModelName();
             EntityRenderer<? extends Player> entityRenderer = (EntityRenderer)this.playerRenderers.get(s);
-            return entityRenderer != null ? entityRenderer : (EntityRenderer)this.playerRenderers.get("default");
+            return entityRenderer != null ? (EntityRenderer<? super T>) entityRenderer : (EntityRenderer)this.playerRenderers.get("default");
         } else {
             return (EntityRenderer)this.renderers.get(entity.getType());
         }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
index e499e04f41813e93b81d0f3a335b1de38564daa0..50184ff140119827fb920ac3d6eeba163565ab94 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
@@ -19,7 +19,7 @@ public class EntityRenderers {
     private static final Logger LOGGER = LogManager.getLogger();
     public static final String DEFAULT_PLAYER_MODEL = "default";
     private static final Map<EntityType<?>, EntityRendererProvider<?>> PROVIDERS = Maps.newHashMap();
-    private static final Map<String, EntityRendererProvider<AbstractClientPlayer>> PLAYER_PROVIDERS = ImmutableMap.of("default", (EntityRendererProvider<>)(context) -> new PlayerRenderer(context, false), "slim", (EntityRendererProvider<>)(context) -> new PlayerRenderer(context, true));
+    private static final Map<String, EntityRendererProvider<AbstractClientPlayer>> PLAYER_PROVIDERS = ImmutableMap.of("default", (EntityRendererProvider)(context) -> new PlayerRenderer(context, false), "slim", (EntityRendererProvider)(context) -> new PlayerRenderer(context, true));
 
     private static <T extends Entity> void register(EntityType<? extends T> entityType, EntityRendererProvider<T> entityRendererProvider) {
         PROVIDERS.put(entityType, entityRendererProvider);
diff --git a/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java b/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
index 5803c70769ed9aac00c34ce9668faa76ce68d680..cb4cf66e10f33e0f5fef3d96958f607f5bd73162 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
@@ -108,9 +108,9 @@ public class HttpTexture extends SimpleTexture {
                             }
 
                             Minecraft.getInstance().execute(() -> {
-                                NativeImage nativeImage = this.load(inputStream);
-                                if (nativeImage != null) {
-                                    this.loadCallback(nativeImage);
+                                NativeImage nativeImageIn = this.load(inputStream);
+                                if (nativeImageIn != null) {
+                                    this.loadCallback(nativeImageIn);
                                 }
 
                             });
diff --git a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
index ce8671a6ea9284aa8327b11cd165834e87ebffa4..64258228cf8133f66afcb67952e592111ba8546c 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
@@ -11,7 +11,7 @@ import java.util.function.Consumer;
 import net.minecraft.util.Mth;
 
 public class Stitcher {
-    private static final Comparator<Stitcher.Holder> HOLDER_COMPARATOR = Comparator.comparing((holder) -> -holder.height).thenComparing((holder) -> -holder.width).thenComparing((holder) -> holder.spriteInfo.name());
+    private static final Comparator<Stitcher.Holder> HOLDER_COMPARATOR = Comparator.<Holder, Integer>comparing((holder) -> -holder.height).thenComparing((holder) -> -holder.width).thenComparing((holder) -> holder.spriteInfo.name());
     private final int mipLevel;
     private final Set<Stitcher.Holder> texturesToBeStitched = Sets.newHashSetWithExpectedSize(256);
     private final List<Stitcher.Region> storage = Lists.newArrayListWithCapacity(256);
diff --git a/src/main/java/net/minecraft/client/resources/ClientPackSource.java b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
index 7ff0deca40be95d50538fe125d563343c73c9cfd..56d51630cbc596a753060ff577b7879cc80231b9 100644
--- a/src/main/java/net/minecraft/client/resources/ClientPackSource.java
+++ b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
@@ -143,8 +143,8 @@ public class ClientPackSource implements RepositorySource {
                     LOGGER.warn("Pack application failed: {}, deleting file {}", throwable.getMessage(), file);
                     deleteQuietly(file);
                     Minecraft minecraft = Minecraft.getInstance();
-                    minecraft.execute(() -> minecraft.setScreen(new ConfirmScreen((flag) -> {
-                            if (flag) {
+                    minecraft.execute(() -> minecraft.setScreen(new ConfirmScreen((flagIn) -> {
+                            if (flagIn) {
                                 minecraft.setScreen((Screen)null);
                             } else {
                                 ClientPacketListener clientPacketListener = minecraft.getConnection();
diff --git a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
index 2987942719048a8c7c12ec8701ded90bdcec316e..9a49783602918e8210e625b5df4a55cd988782e6 100644
--- a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
+++ b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
@@ -326,7 +326,7 @@ public class ModelBakery {
                             try {
                                 InputStream inputStream = resource.getInputStream();
 
-                                Pair var3;
+                                Pair<String, BlockModelDefinition> var3;
                                 try {
                                     var3 = Pair.of(resource.getSourceName(), BlockModelDefinition.fromStream(this.context, new InputStreamReader(inputStream, StandardCharsets.UTF_8)));
                                 } catch (Throwable var6) {
@@ -369,10 +369,10 @@ public class ModelBakery {
                         blockModelDefinition.getVariants().forEach((s, multiVariant) -> {
                             try {
                                 immutableList.stream().filter(predicate(stateDefinition, s)).forEach((blockState) -> {
-                                    Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair2 = map4.put(blockState, Pair.of(multiVariant, () -> ModelBakery.ModelGroupKey.create(blockState, multiVariant, list)));
-                                    if (pair2 != null && pair2.getFirst() != multiPart) {
+                                    Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair2In = map4.put(blockState, Pair.of(multiVariant, () -> ModelBakery.ModelGroupKey.create(blockState, multiVariant, list)));
+                                    if (pair2In != null && pair2In.getFirst() != multiPart) {
                                         map4.put(blockState, pair);
-                                        throw new RuntimeException("Overlapping definition with: " + (String)((Entry)blockModelDefinition.getVariants().entrySet().stream().filter((entry) -> entry.getValue() == pair2.getFirst()).findFirst().get()).getKey());
+                                        throw new RuntimeException("Overlapping definition with: " + (String)((Entry)blockModelDefinition.getVariants().entrySet().stream().filter((entry) -> entry.getValue() == pair2In.getFirst()).findFirst().get()).getKey());
                                     }
                                 });
                             } catch (Exception var12) {
@@ -388,7 +388,7 @@ public class ModelBakery {
                 } catch (Exception var27) {
                     throw new ModelBakery.BlockStateDefinitionException(String.format("Exception loading blockstate definition: '%s': %s", resourceLocation4, var27));
                 } finally {
-                    HashMap map6 = Maps.newHashMap();
+                    HashMap<ModelGroupKey, Set<BlockState>> map6 = Maps.newHashMap();
                     map.forEach((modelResourceLocationx, blockState) -> {
                         Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair2 = map2.get(blockState);
                         if (pair2 == null) {
@@ -399,8 +399,8 @@ public class ModelBakery {
                         this.cacheAndQueueDependencies(modelResourceLocationx, (UnbakedModel)pair2.getFirst());
 
                         try {
-                            ModelBakery.ModelGroupKey modelGroupKey = (ModelBakery.ModelGroupKey)(pair2.getSecond()).get();
-                            (map6.computeIfAbsent(modelGroupKey, (modelGroupKey) -> Sets.newIdentityHashSet())).add(blockState);
+                            ModelBakery.ModelGroupKey modelGroupKeyIn = (ModelBakery.ModelGroupKey)(pair2.getSecond()).get();
+                            (map6.computeIfAbsent(modelGroupKeyIn, (modelGroupKeyIn2) -> Sets.newIdentityHashSet())).add(blockState);
                         } catch (Exception var9) {
                             LOGGER.warn("Exception evaluating model definition: '{}'", modelResourceLocationx, var9);
                         }
diff --git a/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java b/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java
index eece29da395e8a25348510cf265a31b09a2b5598..95e0036e792e0cac6f5c8611e99be38ec0db1b56 100644
--- a/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java
+++ b/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java
@@ -49,7 +49,7 @@ public class ReloadableIdSearchTree<T> implements MutableSearchTree<T> {
     }
 
     protected void index(T object) {
-        ((Stream)this.idGetter.apply(object)).forEach((resourceLocation) -> {
+        (this.idGetter.apply(object)).forEach((resourceLocation) -> {
             this.namespaceTree.add(object, resourceLocation.getNamespace().toLowerCase(Locale.ROOT));
             this.pathTree.add(object, resourceLocation.getPath().toLowerCase(Locale.ROOT));
         });
@@ -67,7 +67,7 @@ public class ReloadableIdSearchTree<T> implements MutableSearchTree<T> {
             List<T> list = this.namespaceTree.search(s.substring(0, i).trim());
             String s2 = s.substring(i + 1).trim();
             List<T> list2 = this.pathTree.search(s2);
-            return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator(list.iterator(), list2.iterator(), this::comparePosition));
+            return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator<>(list.iterator(), list2.iterator(), this::comparePosition));
         }
     }
 
diff --git a/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java b/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java
index c858771f860ed9a00f983d51e470be0438839c13..087eda2aaef1ec6441d35ee11f0b76b7d4e7ec3d 100644
--- a/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java
+++ b/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java
@@ -29,7 +29,7 @@ public class ReloadableSearchTree<T> extends ReloadableIdSearchTree<T> {
 
     protected void index(T object) {
         super.index(object);
-        ((Stream)this.filler.apply(object)).forEach((s) -> this.tree.add(object, s.toLowerCase(Locale.ROOT)));
+        (this.filler.apply(object)).forEach((s) -> this.tree.add(object, s.toLowerCase(Locale.ROOT)));
     }
 
     public List<T> search(String s) {
@@ -41,7 +41,7 @@ public class ReloadableSearchTree<T> extends ReloadableIdSearchTree<T> {
             String s2 = s.substring(i + 1).trim();
             List<T> list2 = this.pathTree.search(s2);
             List<T> list3 = this.tree.search(s2);
-            return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator(list.iterator(), new ReloadableSearchTree.MergingUniqueIterator<T>(list2.iterator(), list3.iterator(), this::comparePosition), this::comparePosition));
+            return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator<>(list.iterator(), new ReloadableSearchTree.MergingUniqueIterator<T>(list2.iterator(), list3.iterator(), this::comparePosition), this::comparePosition));
         }
     }
 
diff --git a/src/main/java/net/minecraft/client/sounds/SoundEngine.java b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
index a7e7b28eda1ccf9fe6a1e851f4b70ce606b02df2..6de444b93b3ce9b0f12931e591df3366b1b9a396 100644
--- a/src/main/java/net/minecraft/client/sounds/SoundEngine.java
+++ b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
@@ -115,12 +115,12 @@ public class SoundEngine {
                 this.listener.setGain(f);
             } else {
                 this.instanceToChannel.forEach((soundInstance, channelHandle) -> {
-                    float f = this.calculateVolume(soundInstance);
+                    float volume = this.calculateVolume(soundInstance);
                     channelHandle.execute((channel) -> {
-                        if (f <= 0.0F) {
+                        if (volume <= 0.0F) {
                             channel.stop();
                         } else {
-                            channel.setVolume(f);
+                            channel.setVolume(volume);
                         }
 
                     });
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 38db47e2897a5910fb2302fed9b96c5d61f183a0..2595fc709ae7bf30144df7c648831efe8f0bc0c1 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -273,7 +273,7 @@ public class Commands {
     private void fillUsableCommands(CommandNode<CommandSourceStack> commandNode, CommandNode<SharedSuggestionProvider> commandNode2, CommandSourceStack commandSourceStack, Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map) {
         for(CommandNode<CommandSourceStack> commandNode3 : commandNode.getChildren()) {
             if (commandNode3.canUse(commandSourceStack)) {
-                ArgumentBuilder<SharedSuggestionProvider, ?> argumentBuilder = commandNode3.createBuilder();
+                ArgumentBuilder<SharedSuggestionProvider, ?> argumentBuilder = (ArgumentBuilder) commandNode3.createBuilder();
                 argumentBuilder.requires((sharedSuggestionProvider) -> true);
                 if (argumentBuilder.getCommand() != null) {
                     argumentBuilder.executes((commandContext) -> 0);
diff --git a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
index eaa952aa99e20741a033f81ca3f2b9bd7a3a261f..6aa2c46dfb45a90166a7d181fa24a42b7750ea3a 100644
--- a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
@@ -54,7 +54,7 @@ public class ObjectiveArgument implements ArgumentType<String> {
             return SharedSuggestionProvider.suggest(((CommandSourceStack)commandContext.getSource()).getServer().getScoreboard().getObjectiveNames(), suggestionsBuilder);
         } else if (commandContext.getSource() instanceof SharedSuggestionProvider) {
             SharedSuggestionProvider sharedSuggestionProvider = (SharedSuggestionProvider)commandContext.getSource();
-            return sharedSuggestionProvider.customSuggestion(commandContext, suggestionsBuilder);
+            return sharedSuggestionProvider.customSuggestion((CommandContext<SharedSuggestionProvider>) commandContext, suggestionsBuilder);
         } else {
             return Suggestions.empty();
         }
diff --git a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
index 303b74bbea129be5d013b81717eb14658aec838b..a4654a902dd662026d2ad1e39ced28ab7ed3853c 100644
--- a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
@@ -52,7 +52,7 @@ public class OperationArgument implements ArgumentType<OperationArgument.Operati
     }
 
     private static OperationArgument.Operation getOperation(String s) throws CommandSyntaxException {
-        return (OperationArgument.Operation)(s.equals("><") ? (score, score2) -> {
+        return (OperationArgument.Operation)(s.equals("><") ? (Operation) (score, score2) -> {
             int i = score.getScore();
             score.setScore(score2.getScore());
             score2.setScore(i);
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
index 3e102244e775405103adf9038e926e98fbd0a6ef..2d674443d146ca828bfb0580cc40cac02aaef0df 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
@@ -204,7 +204,7 @@ public class BlockStateParser {
     private static <T extends Comparable<T>> SuggestionsBuilder addSuggestions(SuggestionsBuilder suggestionsBuilder, Property<T> property) {
         for(T comparable : property.getPossibleValues()) {
             if (comparable instanceof Integer) {
-                suggestionsBuilder.suggest(comparable);
+                suggestionsBuilder.suggest((Integer) comparable);
             } else {
                 suggestionsBuilder.suggest(property.getName(comparable));
             }
@@ -444,8 +444,8 @@ public class BlockStateParser {
     private <T extends Comparable<T>> void setValue(Property<T> property, String s, int i) throws CommandSyntaxException {
         Optional<T> optional = property.getValue(s);
         if (optional.isPresent()) {
-            this.state = this.state.setValue(property, (Comparable)optional.get());
-            this.properties.put(property, (Comparable)optional.get());
+            this.state = this.state.setValue(property, optional.get());
+            this.properties.put(property, optional.get());
         } else {
             this.reader.setCursor(i);
             throw ERROR_INVALID_VALUE.createWithContext(this.reader, this.id.toString(), property.getName(), s);
diff --git a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
index 359167a86e84f628d25b0c44f30bfb81ee47ab52..3ee50f3619c6bb69ca48083a654e2f6a76d5988d 100644
--- a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
+++ b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
@@ -136,7 +136,7 @@ public class ArgumentTypes {
     }
 
     public static <T extends ArgumentType<?>> void serialize(FriendlyByteBuf friendlyByteBuf, T argumentType) {
-        ArgumentTypes.Entry<T> entry = get(argumentType);
+        ArgumentTypes.Entry<T> entry = (Entry<T>) get(argumentType);
         if (entry == null) {
             LOGGER.error("Could not serialize {} ({}) - will not be sent to client!", argumentType, argumentType.getClass());
             friendlyByteBuf.writeResourceLocation(new ResourceLocation(""));
@@ -159,7 +159,7 @@ public class ArgumentTypes {
     }
 
     private static <T extends ArgumentType<?>> void serializeToJson(JsonObject jsonObject, T argumentType) {
-        ArgumentTypes.Entry<T> entry = get(argumentType);
+        ArgumentTypes.Entry<T> entry = (Entry<T>) get(argumentType);
         if (entry == null) {
             LOGGER.error("Could not serialize argument {} ({})!", argumentType, argumentType.getClass());
             jsonObject.addProperty("type", "unknown");
diff --git a/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java b/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
index fd25df9e5f2dd2cb667c984dc7c82471c0597886..99018f49881c915d88c8728f5f3ae68258c4cc7a 100644
--- a/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
+++ b/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
@@ -30,7 +30,7 @@ public class SuggestionProviders {
             throw new IllegalArgumentException("A command suggestion provider is already registered with the name " + resourceLocation);
         } else {
             PROVIDERS_BY_NAME.put(resourceLocation, suggestionProvider);
-            return new SuggestionProviders.Wrapper(resourceLocation, suggestionProvider);
+            return (SuggestionProvider<S>) new Wrapper(resourceLocation, suggestionProvider);
         }
     }
 
diff --git a/src/main/java/net/minecraft/core/BlockPos.java b/src/main/java/net/minecraft/core/BlockPos.java
index d46bdb89e3ae101bfb1d839797286efbd63bbc77..18149d3cb10780ece878a45a4ac2efe1d1d38ab1 100644
--- a/src/main/java/net/minecraft/core/BlockPos.java
+++ b/src/main/java/net/minecraft/core/BlockPos.java
@@ -238,11 +238,11 @@ public class BlockPos extends Vec3i {
             };
     }
 
-    public static Iterable<BlockPos> withinManhattan(BlockPos blockPos, int i, int i2, int i3) {
-        int i4 = i + i2 + i3;
-        int i5 = blockPos.getX();
-        int i6 = blockPos.getY();
-        int i7 = blockPos.getZ();
+    public static Iterable<BlockPos> withinManhattan(BlockPos blockPos, int originZ, int maxDepth, int reachX) {
+        int reachY = originZ + maxDepth + reachX;
+        int reachZ = blockPos.getX();
+        int originX = blockPos.getY();
+        int originY = blockPos.getZ();
         return () -> new AbstractIterator<BlockPos>() {
                 private final BlockPos.MutableBlockPos cursor = new BlockPos.MutableBlockPos();
                 private int currentDepth;
@@ -255,7 +255,7 @@ public class BlockPos extends Vec3i {
                 protected BlockPos computeNext() {
                     if (this.zMirror) {
                         this.zMirror = false;
-                        this.cursor.setZ(i7 - (this.cursor.getZ() - i7));
+                        this.cursor.setZ(originY - (this.cursor.getZ() - originY));
                         return this.cursor;
                     } else {
                         BlockPos blockPos;
@@ -264,24 +264,24 @@ public class BlockPos extends Vec3i {
                                 ++this.x;
                                 if (this.x > this.maxX) {
                                     ++this.currentDepth;
-                                    if (this.currentDepth > i4) {
+                                    if (this.currentDepth > reachY) {
                                         return (BlockPos)this.endOfData();
                                     }
 
-                                    this.maxX = Math.min(i, this.currentDepth);
+                                    this.maxX = Math.min(originZ, this.currentDepth);
                                     this.x = -this.maxX;
                                 }
 
-                                this.maxY = Math.min(i2, this.currentDepth - Math.abs(this.x));
+                                this.maxY = Math.min(maxDepth, this.currentDepth - Math.abs(this.x));
                                 this.y = -this.maxY;
                             }
 
                             int i = this.x;
                             int i2 = this.y;
                             int i3 = this.currentDepth - Math.abs(i) - Math.abs(i2);
-                            if (i3 <= i3) {
+                            if (i3 <= reachZ) {
                                 this.zMirror = i3 != 0;
-                                blockPos = this.cursor.set(i5 + i, i6 + i2, i7 + i3);
+                                blockPos = this.cursor.set(reachZ + i, originX + i2, originY + i3);
                             }
                         }
 
@@ -319,10 +319,10 @@ public class BlockPos extends Vec3i {
         return StreamSupport.stream(betweenClosed(i, i2, i3, i4, i5, i6).spliterator(), false);
     }
 
-    public static Iterable<BlockPos> betweenClosed(int i, int i2, int i3, int i4, int i5, int i6) {
-        int i7 = i4 - i + 1;
-        int i8 = i5 - i2 + 1;
-        int i9 = i6 - i3 + 1;
+    public static Iterable<BlockPos> betweenClosed(int end, int width, int height, int minX, int minY, int minZ) {
+        int i7 = minX - end + 1;
+        int i8 = minY - width + 1;
+        int i9 = minZ - height + 1;
         int i10 = i7 * i8 * i9;
         return () -> new AbstractIterator<BlockPos>() {
                 private final BlockPos.MutableBlockPos cursor = new BlockPos.MutableBlockPos();
@@ -337,7 +337,7 @@ public class BlockPos extends Vec3i {
                         int i3 = i2 % i8;
                         int i4 = i2 / i8;
                         ++this.index;
-                        return this.cursor.set(i + i, i2 + i3, i3 + i4);
+                        return this.cursor.set(end + i, width + i3, height + i4);
                     }
                 }
             };
diff --git a/src/main/java/net/minecraft/core/NonNullList.java b/src/main/java/net/minecraft/core/NonNullList.java
index c2190c60e178443cd0a49d4cf42b0febebc2f346..4460f34e2589d9987affa1f40e0ba4c7e2ba3c4d 100644
--- a/src/main/java/net/minecraft/core/NonNullList.java
+++ b/src/main/java/net/minecraft/core/NonNullList.java
@@ -25,7 +25,7 @@ public class NonNullList<E> extends AbstractList<E> {
         Validate.notNull(object);
         Object[] objects = new Object[i];
         Arrays.fill(objects, object);
-        return new NonNullList<>(Arrays.asList(objects), object);
+        return new NonNullList(Arrays.asList(objects), object);
     }
 
     @SafeVarargs
diff --git a/src/main/java/net/minecraft/core/Registry.java b/src/main/java/net/minecraft/core/Registry.java
index 6912000ccc6f4d8d668f8b29dc6fd940a964bf78..e3a3fa52df93e34af7223870b7c6f567f10c3f36 100644
--- a/src/main/java/net/minecraft/core/Registry.java
+++ b/src/main/java/net/minecraft/core/Registry.java
@@ -272,8 +272,8 @@ public abstract class Registry<T> implements Codec<T>, Keyable, IdMap<T> {
     private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> resourceKey, R writableRegistry, Supplier<T> supplier, Lifecycle lifecycle) {
         ResourceLocation resourceLocation = resourceKey.location();
         LOADERS.put(resourceLocation, supplier);
-        WritableRegistry<R> writableRegistry2 = WRITABLE_REGISTRY;
-        return writableRegistry2.register(resourceKey, writableRegistry, lifecycle);
+        WritableRegistry<R> writableRegistry2 = (WritableRegistry<R>) WRITABLE_REGISTRY;
+        return writableRegistry2.register((ResourceKey<R>) resourceKey, writableRegistry, lifecycle);
     }
 
     protected Registry(ResourceKey<? extends Registry<T>> resourceKey, Lifecycle lifecycle) {
@@ -296,11 +296,11 @@ public abstract class Registry<T> implements Codec<T>, Keyable, IdMap<T> {
 
     public <U> DataResult<Pair<T, U>> decode(DynamicOps<U> dynamicOps, U object) {
         return dynamicOps.compressMaps() ? dynamicOps.getNumberValue(object).flatMap((number) -> {
-            T object = this.byId(number.intValue());
-            return object == null ? DataResult.error("Unknown registry id in " + this.key + ": " + number) : DataResult.success(object, this.lifecycle(object));
+            T objectIn = this.byId(number.intValue());
+            return objectIn == null ? DataResult.error("Unknown registry id in " + this.key + ": " + number) : DataResult.success(objectIn, this.lifecycle(objectIn));
         }).map((objectx) -> Pair.of(objectx, dynamicOps.empty())) : ResourceLocation.CODEC.decode(dynamicOps, object).flatMap((pair) -> {
-            T object = this.get((ResourceLocation)pair.getFirst());
-            return object == null ? DataResult.error("Unknown registry key in " + this.key + ": " + pair.getFirst()) : DataResult.success(Pair.of(object, pair.getSecond()), this.lifecycle(object));
+            T objectIn = this.get((ResourceLocation)pair.getFirst());
+            return objectIn == null ? DataResult.error("Unknown registry key in " + this.key + ": " + pair.getFirst()) : DataResult.success(Pair.of(objectIn, pair.getSecond()), this.lifecycle(objectIn));
         });
     }
 
@@ -375,11 +375,11 @@ public abstract class Registry<T> implements Codec<T>, Keyable, IdMap<T> {
     }
 
     public static <V, T extends V> T register(Registry<V> registry, ResourceKey<V> resourceKey, T object) {
-        return ((WritableRegistry)registry).register(resourceKey, object, Lifecycle.stable());
+        return ((WritableRegistry<V>)registry).register(resourceKey, object, Lifecycle.stable());
     }
 
     public static <V, T extends V> T registerMapping(Registry<V> registry, int i, String s, T object) {
-        return ((WritableRegistry)registry).registerMapping(i, ResourceKey.create(registry.key, new ResourceLocation(s)), object, Lifecycle.stable());
+        return ((WritableRegistry<V>)registry).registerMapping(i, ResourceKey.create(registry.key, new ResourceLocation(s)), object, Lifecycle.stable());
     }
 
     static {
diff --git a/src/main/java/net/minecraft/core/RegistryAccess.java b/src/main/java/net/minecraft/core/RegistryAccess.java
index be5f97e7c5b48f4d3fef0a0d904d00e9371fc64d..0665ccaf60d8a6712ed35b7cf39b8be4943dc423 100644
--- a/src/main/java/net/minecraft/core/RegistryAccess.java
+++ b/src/main/java/net/minecraft/core/RegistryAccess.java
@@ -63,7 +63,7 @@ public abstract class RegistryAccess {
 
     public <E> Optional<? extends Registry<E>> registry(ResourceKey<? extends Registry<? extends E>> resourceKey) {
         Optional<? extends Registry<E>> optional = this.ownedRegistry(resourceKey);
-        return optional.isPresent() ? optional : Registry.REGISTRY.getOptional(resourceKey.location());
+        return optional.isPresent() ? optional : (Optional<? extends Registry<E>>) Registry.REGISTRY.getOptional(resourceKey.location());
     }
 
     public <E> Registry<E> registryOrThrow(ResourceKey<? extends Registry<? extends E>> resourceKey) {
@@ -109,7 +109,7 @@ public abstract class RegistryAccess {
     }
 
     private static <R extends Registry<?>> void copyBuiltin(RegistryAccess.RegistryHolder registryHolder, ResourceKey<R> resourceKey) {
-        Registry<R> registry = BuiltinRegistries.REGISTRY;
+        Registry<R> registry = (Registry<R>) BuiltinRegistries.REGISTRY;
         Registry<?> registry2 = registry.getOrThrow(resourceKey);
         copy(registryHolder, registry2);
     }
@@ -176,17 +176,17 @@ public abstract class RegistryAccess {
 
         private static <E> Codec<RegistryAccess.RegistryHolder> makeNetworkCodec() {
             Codec<ResourceKey<? extends Registry<E>>> codec = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location);
-            Codec<MappedRegistry<E>> codec2 = codec.partialDispatch("type", (mappedRegistry) -> DataResult.success(mappedRegistry.key()), (resourceKey) -> getNetworkCodec(resourceKey).map((codec) -> MappedRegistry.networkCodec(resourceKey, Lifecycle.experimental(), codec)));
+            Codec<MappedRegistry<E>> codec2 = codec.partialDispatch("type", (mappedRegistry) -> DataResult.success(mappedRegistry.key()), (resourceKey) -> getNetworkCodec(resourceKey).map((codecIn) -> MappedRegistry.networkCodec(resourceKey, Lifecycle.experimental(), codecIn)));
             UnboundedMapCodec<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> unboundedMapCodec = Codec.unboundedMap(codec, codec2);
             return captureMap(unboundedMapCodec);
         }
 
         private static <K extends ResourceKey<? extends Registry<?>>, V extends MappedRegistry<?>> Codec<RegistryAccess.RegistryHolder> captureMap(UnboundedMapCodec<K, V> unboundedMapCodec) {
-            return unboundedMapCodec.xmap(RegistryAccess.RegistryHolder::new, (registryHolder) -> registryHolder.registries.entrySet().stream().filter((entry) -> ((RegistryAccess.RegistryData)RegistryAccess.REGISTRIES.get(entry.getKey())).sendToClient()).collect(ImmutableMap.toImmutableMap(Entry::getKey, Entry::getValue)));
+            return unboundedMapCodec.xmap(RegistryAccess.RegistryHolder::new, (registryHolder) -> registryHolder.registries.entrySet().stream().filter((entry) -> RegistryAccess.REGISTRIES.get(entry.getKey()).sendToClient()).collect(ImmutableMap.toImmutableMap(e -> (K) e.getKey(), e -> (V) e.getValue())));
         }
 
         private static <E> DataResult<? extends Codec<E>> getNetworkCodec(ResourceKey<? extends Registry<E>> resourceKey) {
-            return Optional.ofNullable((RegistryAccess.RegistryData)RegistryAccess.REGISTRIES.get(resourceKey)).map((registryData) -> registryData.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown or not serializable registry: " + resourceKey));
+            return (DataResult<? extends Codec<E>>) Optional.ofNullable(RegistryAccess.REGISTRIES.get(resourceKey)).map((registryData) -> registryData.networkCodec()).map(DataResult::success).orElseGet(() -> (DataResult) DataResult.error("Unknown or not serializable registry: " + resourceKey));
         }
 
         public RegistryHolder() {
@@ -198,7 +198,7 @@ public abstract class RegistryAccess {
         }
 
         private static <E> MappedRegistry<?> parseRegistry(ResourceKey<? extends Registry<?>> resourceKey, Dynamic<?> dynamic) {
-            return (MappedRegistry)RegistryLookupCodec.create(resourceKey).codec().parse(dynamic).resultOrPartial(Util.prefix(resourceKey + " registry: ", RegistryAccess.LOGGER::error)).orElseThrow(() -> new IllegalStateException("Failed to get " + resourceKey + " registry"));
+            return (MappedRegistry<?>) RegistryLookupCodec.create((ResourceKey<? extends Registry<Registry<?>>>) resourceKey).codec().parse(dynamic).resultOrPartial(Util.prefix(resourceKey + " registry: ", RegistryAccess.LOGGER::error)).orElseThrow(() -> new IllegalStateException("Failed to get " + resourceKey + " registry"));
         }
 
         private RegistryHolder(Map<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> map) {
@@ -206,7 +206,7 @@ public abstract class RegistryAccess {
         }
 
         private static <E> MappedRegistry<?> createRegistry(ResourceKey<? extends Registry<?>> resourceKey) {
-            return new MappedRegistry<>(resourceKey, Lifecycle.stable());
+            return new MappedRegistry(resourceKey, Lifecycle.stable());
         }
 
         public <E> Optional<WritableRegistry<E>> ownedRegistry(ResourceKey<? extends Registry<? extends E>> resourceKey) {
diff --git a/src/main/java/net/minecraft/data/BuiltinRegistries.java b/src/main/java/net/minecraft/data/BuiltinRegistries.java
index 7710a453550bacd388c851cbd2ffa9822efc6b38..28a3ebc969f129b09b8387ad882045c1f32cfb91 100644
--- a/src/main/java/net/minecraft/data/BuiltinRegistries.java
+++ b/src/main/java/net/minecraft/data/BuiltinRegistries.java
@@ -52,8 +52,8 @@ public class BuiltinRegistries {
     private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> resourceKey, R writableRegistry, Supplier<T> supplier, Lifecycle lifecycle) {
         ResourceLocation resourceLocation = resourceKey.location();
         LOADERS.put(resourceLocation, supplier);
-        WritableRegistry<R> writableRegistry2 = WRITABLE_REGISTRY;
-        return writableRegistry2.register(resourceKey, writableRegistry, lifecycle);
+        WritableRegistry<R> writableRegistry2 = (WritableRegistry<R>) WRITABLE_REGISTRY;
+        return writableRegistry2.register((ResourceKey<R>) resourceKey, writableRegistry, lifecycle);
     }
 
     public static <T> T register(Registry<? super T> registry, String s, T object) {
@@ -65,11 +65,11 @@ public class BuiltinRegistries {
     }
 
     public static <V, T extends V> T register(Registry<V> registry, ResourceKey<V> resourceKey, T object) {
-        return ((WritableRegistry)registry).register(resourceKey, object, Lifecycle.stable());
+        return (T) ((WritableRegistry)registry).register(resourceKey, object, Lifecycle.stable());
     }
 
     public static <V, T extends V> T registerMapping(Registry<V> registry, ResourceKey<V> resourceKey, T object) {
-        return ((WritableRegistry)registry).register(resourceKey, object, Lifecycle.stable());
+        return (T) ((WritableRegistry)registry).register(resourceKey, object, Lifecycle.stable());
     }
 
     public static void bootstrap() {
diff --git a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
index aa8263159a9c8f72932f0033823d397f35207524..ef803ccc0242559925583469c39e274b963ac109 100644
--- a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
+++ b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
@@ -35,7 +35,7 @@ public class RegistryDumpReport implements DataProvider {
             jsonObject.addProperty("default", resourceLocation.toString());
         }
 
-        int i = Registry.REGISTRY.getId(registry);
+        int i = ((Registry) Registry.REGISTRY).getId(registry);
         jsonObject.addProperty("protocol_id", i);
         JsonObject jsonObject2 = new JsonObject();
 
diff --git a/src/main/java/net/minecraft/data/models/BlockModelGenerators.java b/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
index b5cae59ce25c648a8c3189fc0727a1e82a565e72..5231a72d8c09766ca41ca596f60672816fb46a1a 100644
--- a/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
+++ b/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
@@ -69,15 +69,15 @@ public class BlockModelGenerators {
     final BiConsumer<ResourceLocation, Supplier<JsonElement>> modelOutput;
     private final Consumer<Item> skippedAutoModelsOutput;
     final List<Block> nonOrientableTrapdoor = ImmutableList.of(Blocks.OAK_TRAPDOOR, Blocks.DARK_OAK_TRAPDOOR, Blocks.IRON_TRAPDOOR);
-    final Map<Block, BlockModelGenerators.BlockStateGeneratorSupplier> fullBlockModelCustomGenerators = ImmutableMap.builder().put(Blocks.STONE, BlockModelGenerators::createMirroredCubeGenerator).put(Blocks.DEEPSLATE, BlockModelGenerators::createMirroredColumnGenerator).build();
-    final Map<Block, TexturedModel> texturedModels = ImmutableMap.builder().put(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.SANDSTONE)).put(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.RED_SANDSTONE)).put(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).put(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).put(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_SANDSTONE)))).put(Blocks.CUT_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.RED_SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_RED_SANDSTONE)))).put(Blocks.QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.QUARTZ_BLOCK)).put(Blocks.SMOOTH_QUARTZ, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.QUARTZ_BLOCK, "_bottom"))).put(Blocks.BLACKSTONE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.BLACKSTONE)).put(Blocks.DEEPSLATE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.DEEPSLATE)).put(Blocks.CHISELED_QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.CHISELED_QUARTZ_BLOCK).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_QUARTZ_BLOCK)))).put(Blocks.CHISELED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_SANDSTONE).updateTextures((textureMapping) -> {
+    final Map<Block, BlockModelGenerators.BlockStateGeneratorSupplier> fullBlockModelCustomGenerators = ImmutableMap.<Block, BlockModelGenerators.BlockStateGeneratorSupplier>builder().put(Blocks.STONE, BlockModelGenerators::createMirroredCubeGenerator).put(Blocks.DEEPSLATE, BlockModelGenerators::createMirroredColumnGenerator).build();
+    final Map<Block, TexturedModel> texturedModels = ImmutableMap.<Block, TexturedModel>builder().put(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.SANDSTONE)).put(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.RED_SANDSTONE)).put(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).put(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).put(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_SANDSTONE)))).put(Blocks.CUT_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.RED_SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_RED_SANDSTONE)))).put(Blocks.QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.QUARTZ_BLOCK)).put(Blocks.SMOOTH_QUARTZ, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.QUARTZ_BLOCK, "_bottom"))).put(Blocks.BLACKSTONE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.BLACKSTONE)).put(Blocks.DEEPSLATE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.DEEPSLATE)).put(Blocks.CHISELED_QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.CHISELED_QUARTZ_BLOCK).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_QUARTZ_BLOCK)))).put(Blocks.CHISELED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_SANDSTONE).updateTextures((textureMapping) -> {
         textureMapping.put(TextureSlot.END, TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"));
         textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_SANDSTONE));
     })).put(Blocks.CHISELED_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_RED_SANDSTONE).updateTextures((textureMapping) -> {
         textureMapping.put(TextureSlot.END, TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"));
         textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_RED_SANDSTONE));
     })).build();
-    static final Map<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>> SHAPE_CONSUMERS = ImmutableMap.builder().put(BlockFamily.Variant.BUTTON, BlockModelGenerators.BlockFamilyProvider::button).put(BlockFamily.Variant.DOOR, BlockModelGenerators.BlockFamilyProvider::door).put(BlockFamily.Variant.CHISELED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CRACKED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.FENCE, BlockModelGenerators.BlockFamilyProvider::fence).put(BlockFamily.Variant.FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::fenceGate).put(BlockFamily.Variant.SIGN, BlockModelGenerators.BlockFamilyProvider::sign).put(BlockFamily.Variant.SLAB, BlockModelGenerators.BlockFamilyProvider::slab).put(BlockFamily.Variant.STAIRS, BlockModelGenerators.BlockFamilyProvider::stairs).put(BlockFamily.Variant.PRESSURE_PLATE, BlockModelGenerators.BlockFamilyProvider::pressurePlate).put(BlockFamily.Variant.TRAPDOOR, BlockModelGenerators.BlockFamilyProvider::trapdoor).put(BlockFamily.Variant.WALL, BlockModelGenerators.BlockFamilyProvider::wall).build();
+    static final Map<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>> SHAPE_CONSUMERS = ImmutableMap.<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>>builder().put(BlockFamily.Variant.BUTTON, BlockModelGenerators.BlockFamilyProvider::button).put(BlockFamily.Variant.DOOR, BlockModelGenerators.BlockFamilyProvider::door).put(BlockFamily.Variant.CHISELED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CRACKED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.FENCE, BlockModelGenerators.BlockFamilyProvider::fence).put(BlockFamily.Variant.FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::fenceGate).put(BlockFamily.Variant.SIGN, BlockModelGenerators.BlockFamilyProvider::sign).put(BlockFamily.Variant.SLAB, BlockModelGenerators.BlockFamilyProvider::slab).put(BlockFamily.Variant.STAIRS, BlockModelGenerators.BlockFamilyProvider::stairs).put(BlockFamily.Variant.PRESSURE_PLATE, BlockModelGenerators.BlockFamilyProvider::pressurePlate).put(BlockFamily.Variant.TRAPDOOR, BlockModelGenerators.BlockFamilyProvider::trapdoor).put(BlockFamily.Variant.WALL, BlockModelGenerators.BlockFamilyProvider::wall).build();
     public static final Map<BooleanProperty, Function<ResourceLocation, Variant>> MULTIFACE_GENERATOR = Util.make(Maps.newHashMap(), (hashMap) -> {
         hashMap.put(BlockStateProperties.NORTH, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation));
         hashMap.put(BlockStateProperties.EAST, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true));
diff --git a/src/main/java/net/minecraft/data/models/blockstates/Selector.java b/src/main/java/net/minecraft/data/models/blockstates/Selector.java
index 1680f2a0b0d799933a7d099426148fe82dc84293..2b033e63fca12eb331bb130f45cc320b06949242 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/Selector.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/Selector.java
@@ -12,11 +12,11 @@ public final class Selector {
     private final List<Property.Value<?>> values;
 
     public Selector extend(Property.Value<?> value) {
-        return new Selector(ImmutableList.builder().addAll(this.values).add(value).build());
+        return new Selector(ImmutableList.<Property.Value<?>>builder().addAll(this.values).add(value).build());
     }
 
     public Selector extend(Selector selector) {
-        return new Selector(ImmutableList.builder().addAll(this.values).addAll(selector.values).build());
+        return new Selector(ImmutableList.<Property.Value<?>>builder().addAll(this.values).addAll(selector.values).build());
     }
 
     private Selector(List<Property.Value<?>> list) {
diff --git a/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java b/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
index 0175fa79e75a6dda6df00ee4f7bcb5d7c762fcc4..1d56e9173bf839b376659f8f24faa785be44ee58 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
@@ -4,11 +4,11 @@ import com.google.gson.JsonPrimitive;
 import net.minecraft.resources.ResourceLocation;
 
 public class VariantProperties {
-    public static final VariantProperty<VariantProperties.Rotation> X_ROT = new VariantProperty("x", (rotation) -> new JsonPrimitive(rotation.value));
-    public static final VariantProperty<VariantProperties.Rotation> Y_ROT = new VariantProperty("y", (rotation) -> new JsonPrimitive(rotation.value));
+    public static final VariantProperty<VariantProperties.Rotation> X_ROT = new VariantProperty<>("x", (rotation) -> new JsonPrimitive(rotation.value));
+    public static final VariantProperty<VariantProperties.Rotation> Y_ROT = new VariantProperty<>("y", (rotation) -> new JsonPrimitive(rotation.value));
     public static final VariantProperty<ResourceLocation> MODEL = new VariantProperty<>("model", (resourceLocation) -> new JsonPrimitive(resourceLocation.toString()));
-    public static final VariantProperty<Boolean> UV_LOCK = new VariantProperty("uvlock", JsonPrimitive::new);
-    public static final VariantProperty<Integer> WEIGHT = new VariantProperty("weight", JsonPrimitive::new);
+    public static final VariantProperty<Boolean> UV_LOCK = new VariantProperty<>("uvlock", JsonPrimitive::new);
+    public static final VariantProperty<Integer> WEIGHT = new VariantProperty<>("weight", JsonPrimitive::new);
 
     public static enum Rotation {
         R0(0),
diff --git a/src/main/java/net/minecraft/data/models/model/ModelTemplate.java b/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
index a90953b62ef3168e4f49cab6eb1fa3ce1f4ee2ad..68ea7b9aedb81b9d9087c7457274bac8a9253168 100644
--- a/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
+++ b/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
@@ -42,10 +42,10 @@ public class ModelTemplate {
         Map<TextureSlot, ResourceLocation> map = this.createMap(textureMapping);
         biConsumer.accept(resourceLocation, () -> {
             JsonObject jsonObject = new JsonObject();
-            this.model.ifPresent((resourceLocation) -> jsonObject.addProperty("parent", resourceLocation.toString()));
+            this.model.ifPresent((resourceLocationIn) -> jsonObject.addProperty("parent", resourceLocationIn.toString()));
             if (!map.isEmpty()) {
                 JsonObject jsonObject2 = new JsonObject();
-                map.forEach((textureSlot, resourceLocation) -> jsonObject2.addProperty(textureSlot.getId(), resourceLocation.toString()));
+                map.forEach((textureSlot, resourceLocationIn) -> jsonObject2.addProperty(textureSlot.getId(), resourceLocationIn.toString()));
                 jsonObject.add("textures", jsonObject2);
             }
 
@@ -55,6 +55,6 @@ public class ModelTemplate {
     }
 
     private Map<TextureSlot, ResourceLocation> createMap(TextureMapping textureMapping) {
-        return Streams.concat(new Stream[]{this.requiredSlots.stream(), textureMapping.getForced()}).collect(ImmutableMap.toImmutableMap(Function.identity(), textureMapping::get));
+        return (Map<TextureSlot, ResourceLocation>) Streams.concat(new Stream[]{this.requiredSlots.stream(), textureMapping.getForced()}).collect(ImmutableMap.toImmutableMap(Function.identity(), textureMapping::get));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/recipes/RecipeProvider.java b/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
index ef205228ee3027c181b2abcc9e8cd2d4a9082b34..31fa1eeef7b270889482c7796562ee07456bb437 100644
--- a/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
+++ b/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
@@ -60,7 +60,7 @@ public class RecipeProvider implements DataProvider {
     private static final ImmutableList<ItemLike> REDSTONE_SMELTABLES = ImmutableList.of(Items.REDSTONE_ORE, Items.DEEPSLATE_REDSTONE_ORE);
     private static final ImmutableList<ItemLike> EMERALD_SMELTABLES = ImmutableList.of(Items.EMERALD_ORE, Items.DEEPSLATE_EMERALD_ORE);
     private final DataGenerator generator;
-    private static final Map<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>> shapeBuilders = ImmutableMap.builder().put(BlockFamily.Variant.BUTTON, (itemLike, itemLike2) -> buttonBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CHISELED, (itemLike, itemLike2) -> chiseledBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUT, (itemLike, itemLike2) -> cutBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.DOOR, (itemLike, itemLike2) -> doorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE, (itemLike, itemLike2) -> fenceBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE_GATE, (itemLike, itemLike2) -> fenceGateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SIGN, (itemLike, itemLike2) -> signBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SLAB, (itemLike, itemLike2) -> slabBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.STAIRS, (itemLike, itemLike2) -> stairBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.PRESSURE_PLATE, (itemLike, itemLike2) -> pressurePlateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.POLISHED, (itemLike, itemLike2) -> polishedBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.TRAPDOOR, (itemLike, itemLike2) -> trapdoorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.WALL, (itemLike, itemLike2) -> wallBuilder(itemLike, Ingredient.of(itemLike2))).build();
+    private static final Map<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>> shapeBuilders = ImmutableMap.<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>>builder().put(BlockFamily.Variant.BUTTON, (itemLike, itemLike2) -> buttonBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CHISELED, (itemLike, itemLike2) -> chiseledBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUT, (itemLike, itemLike2) -> cutBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.DOOR, (itemLike, itemLike2) -> doorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE, (itemLike, itemLike2) -> fenceBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE_GATE, (itemLike, itemLike2) -> fenceGateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SIGN, (itemLike, itemLike2) -> signBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SLAB, (itemLike, itemLike2) -> slabBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.STAIRS, (itemLike, itemLike2) -> stairBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.PRESSURE_PLATE, (itemLike, itemLike2) -> pressurePlateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.POLISHED, (itemLike, itemLike2) -> polishedBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.TRAPDOOR, (itemLike, itemLike2) -> trapdoorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.WALL, (itemLike, itemLike2) -> wallBuilder(itemLike, Ingredient.of(itemLike2))).build();
 
     public RecipeProvider(DataGenerator dataGenerator) {
         this.generator = dataGenerator;
@@ -1169,7 +1169,7 @@ public class RecipeProvider implements DataProvider {
     }
 
     private static void waxRecipes(Consumer<FinishedRecipe> consumer) {
-        ((BiMap)HoneycombItem.WAXABLES.get()).forEach((block, block2) -> ShapelessRecipeBuilder.shapeless(block2).requires(block).requires(Items.HONEYCOMB).group(getItemName(block2)).unlockedBy(getHasName(block), has(block)).save(consumer, getConversionRecipeName(block2, Items.HONEYCOMB)));
+        (HoneycombItem.WAXABLES.get()).forEach((block, block2) -> ShapelessRecipeBuilder.shapeless(block2).requires(block).requires(Items.HONEYCOMB).group(getItemName(block2)).unlockedBy(getHasName(block), has(block)).save(consumer, getConversionRecipeName(block2, Items.HONEYCOMB)));
     }
 
     private static void generateRecipes(Consumer<FinishedRecipe> consumer, BlockFamily blockFamily) {
diff --git a/src/main/java/net/minecraft/data/worldgen/StructureFeatures.java b/src/main/java/net/minecraft/data/worldgen/StructureFeatures.java
index 40f6b52cb2a9e90b8668bf6fe7c983410d94cc1b..9bf2203d8e7f6c6bd33defef1d4cefc500258ed8 100644
--- a/src/main/java/net/minecraft/data/worldgen/StructureFeatures.java
+++ b/src/main/java/net/minecraft/data/worldgen/StructureFeatures.java
@@ -74,17 +74,17 @@ public class StructureFeatures {
     }
 
     public static void registerStructures(BiConsumer<ConfiguredStructureFeature<?, ?>, ResourceKey<Biome>> biConsumer) {
-        Set<ResourceKey<Biome>> set = ImmutableSet.builder().add(Biomes.DEEP_FROZEN_OCEAN).add(Biomes.DEEP_COLD_OCEAN).add(Biomes.DEEP_OCEAN).add(Biomes.DEEP_LUKEWARM_OCEAN).build();
-        Set<ResourceKey<Biome>> set2 = ImmutableSet.builder().add(Biomes.FROZEN_OCEAN).add(Biomes.OCEAN).add(Biomes.COLD_OCEAN).add(Biomes.LUKEWARM_OCEAN).add(Biomes.WARM_OCEAN).addAll(set).build();
-        Set<ResourceKey<Biome>> set3 = ImmutableSet.builder().add(Biomes.BEACH).add(Biomes.SNOWY_BEACH).build();
-        Set<ResourceKey<Biome>> set4 = ImmutableSet.builder().add(Biomes.RIVER).add(Biomes.FROZEN_RIVER).build();
-        Set<ResourceKey<Biome>> set5 = ImmutableSet.builder().add(Biomes.MEADOW).add(Biomes.FROZEN_PEAKS).add(Biomes.JAGGED_PEAKS).add(Biomes.STONY_PEAKS).add(Biomes.SNOWY_SLOPES).build();
-        Set<ResourceKey<Biome>> set6 = ImmutableSet.builder().add(Biomes.BADLANDS).add(Biomes.ERODED_BADLANDS).add(Biomes.WOODED_BADLANDS).build();
-        Set<ResourceKey<Biome>> set7 = ImmutableSet.builder().add(Biomes.WINDSWEPT_HILLS).add(Biomes.WINDSWEPT_FOREST).add(Biomes.WINDSWEPT_GRAVELLY_HILLS).build();
-        Set<ResourceKey<Biome>> set8 = ImmutableSet.builder().add(Biomes.TAIGA).add(Biomes.SNOWY_TAIGA).add(Biomes.OLD_GROWTH_PINE_TAIGA).add(Biomes.OLD_GROWTH_SPRUCE_TAIGA).build();
-        Set<ResourceKey<Biome>> set9 = ImmutableSet.builder().add(Biomes.BAMBOO_JUNGLE).add(Biomes.JUNGLE).add(Biomes.SPARSE_JUNGLE).build();
-        Set<ResourceKey<Biome>> set10 = ImmutableSet.builder().add(Biomes.FOREST).add(Biomes.FLOWER_FOREST).add(Biomes.BIRCH_FOREST).add(Biomes.OLD_GROWTH_BIRCH_FOREST).add(Biomes.DARK_FOREST).add(Biomes.GROVE).build();
-        Set<ResourceKey<Biome>> set11 = ImmutableSet.builder().add(Biomes.NETHER_WASTES).add(Biomes.BASALT_DELTAS).add(Biomes.SOUL_SAND_VALLEY).add(Biomes.CRIMSON_FOREST).add(Biomes.WARPED_FOREST).build();
+        Set<ResourceKey<Biome>> set = ImmutableSet.<ResourceKey<Biome>>builder().add(Biomes.DEEP_FROZEN_OCEAN).add(Biomes.DEEP_COLD_OCEAN).add(Biomes.DEEP_OCEAN).add(Biomes.DEEP_LUKEWARM_OCEAN).build();
+        Set<ResourceKey<Biome>> set2 = ImmutableSet.<ResourceKey<Biome>>builder().add(Biomes.FROZEN_OCEAN).add(Biomes.OCEAN).add(Biomes.COLD_OCEAN).add(Biomes.LUKEWARM_OCEAN).add(Biomes.WARM_OCEAN).addAll(set).build();
+        Set<ResourceKey<Biome>> set3 = ImmutableSet.<ResourceKey<Biome>>builder().add(Biomes.BEACH).add(Biomes.SNOWY_BEACH).build();
+        Set<ResourceKey<Biome>> set4 = ImmutableSet.<ResourceKey<Biome>>builder().add(Biomes.RIVER).add(Biomes.FROZEN_RIVER).build();
+        Set<ResourceKey<Biome>> set5 = ImmutableSet.<ResourceKey<Biome>>builder().add(Biomes.MEADOW).add(Biomes.FROZEN_PEAKS).add(Biomes.JAGGED_PEAKS).add(Biomes.STONY_PEAKS).add(Biomes.SNOWY_SLOPES).build();
+        Set<ResourceKey<Biome>> set6 = ImmutableSet.<ResourceKey<Biome>>builder().add(Biomes.BADLANDS).add(Biomes.ERODED_BADLANDS).add(Biomes.WOODED_BADLANDS).build();
+        Set<ResourceKey<Biome>> set7 = ImmutableSet.<ResourceKey<Biome>>builder().add(Biomes.WINDSWEPT_HILLS).add(Biomes.WINDSWEPT_FOREST).add(Biomes.WINDSWEPT_GRAVELLY_HILLS).build();
+        Set<ResourceKey<Biome>> set8 = ImmutableSet.<ResourceKey<Biome>>builder().add(Biomes.TAIGA).add(Biomes.SNOWY_TAIGA).add(Biomes.OLD_GROWTH_PINE_TAIGA).add(Biomes.OLD_GROWTH_SPRUCE_TAIGA).build();
+        Set<ResourceKey<Biome>> set9 = ImmutableSet.<ResourceKey<Biome>>builder().add(Biomes.BAMBOO_JUNGLE).add(Biomes.JUNGLE).add(Biomes.SPARSE_JUNGLE).build();
+        Set<ResourceKey<Biome>> set10 = ImmutableSet.<ResourceKey<Biome>>builder().add(Biomes.FOREST).add(Biomes.FLOWER_FOREST).add(Biomes.BIRCH_FOREST).add(Biomes.OLD_GROWTH_BIRCH_FOREST).add(Biomes.DARK_FOREST).add(Biomes.GROVE).build();
+        Set<ResourceKey<Biome>> set11 = ImmutableSet.<ResourceKey<Biome>>builder().add(Biomes.NETHER_WASTES).add(Biomes.BASALT_DELTAS).add(Biomes.SOUL_SAND_VALLEY).add(Biomes.CRIMSON_FOREST).add(Biomes.WARPED_FOREST).build();
         register(biConsumer, BURIED_TREASURE, set3);
         register(biConsumer, DESERT_PYRAMID, Biomes.DESERT);
         register(biConsumer, IGLOO, Biomes.SNOWY_TAIGA);
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java b/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
index 9bd4d4036347fecf036c389976b3da07ec1eb012..8a0440b268befe9800bba0943fb8b573204ce6a5 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
@@ -31,8 +31,8 @@ public class GameTestBatchRunner {
         this.testTicker = gameTestTicker;
         this.testsPerRow = i;
         this.batches = collection.stream().map((gameTestBatch) -> {
-            Collection<GameTestInfo> collection = gameTestBatch.getTestFunctions().stream().map((testFunction) -> new GameTestInfo(testFunction, rotation, serverLevel)).collect(ImmutableList.toImmutableList());
-            return Pair.of(gameTestBatch, collection);
+            Collection<GameTestInfo> collectionIn = gameTestBatch.getTestFunctions().stream().map((testFunction) -> new GameTestInfo(testFunction, rotation, serverLevel)).collect(ImmutableList.toImmutableList());
+            return Pair.of(gameTestBatch, collectionIn);
         }).collect(ImmutableList.toImmutableList());
         this.allTestInfos = this.batches.stream().flatMap((pair) -> (pair.getSecond()).stream()).collect(ImmutableList.toImmutableList());
     }
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java b/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
index 6cd79453b0c7c1af7b2abee7f7848a9258095ea3..1264dc78c8b4a7f32e85d35aad09c2f9d20cf26d 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
@@ -51,7 +51,7 @@ public class GameTestRegistry {
         T annotation = method.getAnnotation(clazz);
         if (annotation != null) {
             String s = (String)function.apply(annotation);
-            Consumer<ServerLevel> consumer = map.putIfAbsent(s, turnMethodIntoConsumer(method));
+            Consumer<ServerLevel> consumer = map.putIfAbsent(s, (Consumer<ServerLevel>) turnMethodIntoConsumer(method));
             if (consumer != null) {
                 throw new RuntimeException("Hey, there should only be one " + clazz + " method per batch. Batch '" + s + "' has more than one!");
             }
@@ -101,7 +101,7 @@ public class GameTestRegistry {
     private static Collection<TestFunction> useTestGeneratorMethod(Method method) {
         try {
             Object object = method.getDeclaringClass().newInstance();
-            return method.invoke(object);
+            return (Collection<TestFunction>) method.invoke(object);
         } catch (ReflectiveOperationException var2) {
             throw new RuntimeException(var2);
         }
@@ -115,7 +115,7 @@ public class GameTestRegistry {
         String s4 = gameTest.template().isEmpty() ? s3 : s2 + "." + gameTest.template();
         String s5 = gameTest.batch();
         Rotation rotation = StructureUtils.getRotationForRotationSteps(gameTest.rotationSteps());
-        return new TestFunction(s5, s3, s4, rotation, gameTest.timeoutTicks(), gameTest.setupTicks(), gameTest.required(), gameTest.requiredSuccesses(), gameTest.attempts(), turnMethodIntoConsumer(method));
+        return new TestFunction(s5, s3, s4, rotation, gameTest.timeoutTicks(), gameTest.setupTicks(), gameTest.required(), gameTest.requiredSuccesses(), gameTest.attempts(), (Consumer<GameTestHelper>) turnMethodIntoConsumer(method));
     }
 
     private static Consumer<?> turnMethodIntoConsumer(Method method) {
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
index 2ead86691ef5d6df54092762bae1203a3975a9a3..a9abc4457cdf4b25660d2778818face49ca0d3ab 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
@@ -48,8 +48,8 @@ public class GameTestRunner {
             Consumer<ServerLevel> consumer = GameTestRegistry.getBeforeBatchFunction(s);
             Consumer<ServerLevel> consumer2 = GameTestRegistry.getAfterBatchFunction(s);
             MutableInt mutableInt = new MutableInt();
-            Collection<TestFunction> collection = entry.getValue();
-            return Streams.stream(Iterables.partition(collection, 100)).map((list) -> new GameTestBatch(s + ":" + mutableInt.incrementAndGet(), ImmutableList.copyOf(list), consumer, consumer2));
+            Collection<TestFunction> collectionIn = entry.getValue();
+            return Streams.stream(Iterables.partition(collectionIn, 100)).map((list) -> new GameTestBatch(s + ":" + mutableInt.incrementAndGet(), ImmutableList.copyOf(list), consumer, consumer2));
         }).collect(ImmutableList.toImmutableList());
     }
 
@@ -59,9 +59,9 @@ public class GameTestRunner {
         BlockPos blockPos3 = blockPos.offset(i, 0, i);
         BlockPos.betweenClosedStream(blockPos2, blockPos3).filter((blockPosx) -> serverLevel.getBlockState(blockPosx).is(Blocks.STRUCTURE_BLOCK)).forEach((blockPosx) -> {
             StructureBlockEntity structureBlockEntity = (StructureBlockEntity)serverLevel.getBlockEntity(blockPosx);
-            BlockPos blockPos2 = structureBlockEntity.getBlockPos();
+            BlockPos pos = structureBlockEntity.getBlockPos();
             BoundingBox boundingBox = StructureUtils.getStructureBoundingBox(structureBlockEntity);
-            StructureUtils.clearSpaceForStructure(boundingBox, blockPos2.getY(), serverLevel);
+            StructureUtils.clearSpaceForStructure(boundingBox, pos.getY(), serverLevel);
         });
     }
 
diff --git a/src/main/java/net/minecraft/nbt/NbtOps.java b/src/main/java/net/minecraft/nbt/NbtOps.java
index 8ecb1be8754d4ff11ed204c4e8aad7afd77c253f..7076200441c14904b79db40f1a164d284b708ae5 100644
--- a/src/main/java/net/minecraft/nbt/NbtOps.java
+++ b/src/main/java/net/minecraft/nbt/NbtOps.java
@@ -127,19 +127,19 @@ public class NbtOps implements DynamicOps<Tag> {
     private static <T extends Tag> void fillOne(CollectionTag<T> collectionTag, Tag tag, Tag tag2) {
         if (tag instanceof CollectionTag) {
             CollectionTag<?> collectionTag2 = (CollectionTag)tag;
-            collectionTag2.forEach((tagx) -> collectionTag.add(tagx));
+            collectionTag2.forEach((tagx) -> collectionTag.add((T) tagx));
         }
 
-        collectionTag.add(tag2);
+        collectionTag.add((T) tag2);
     }
 
     private static <T extends Tag> void fillMany(CollectionTag<T> collectionTag, Tag tag, List<Tag> list) {
         if (tag instanceof CollectionTag) {
             CollectionTag<?> collectionTag2 = (CollectionTag)tag;
-            collectionTag2.forEach((tagx) -> collectionTag.add(tagx));
+            collectionTag2.forEach((tagx) -> collectionTag.add((T) tagx));
         }
 
-        list.forEach((tagx) -> collectionTag.add(tagx));
+        list.forEach((tagx) -> collectionTag.add((T) tagx));
     }
 
     public DataResult<Tag> mergeToList(Tag tag, Tag tag2) {
@@ -191,11 +191,11 @@ public class NbtOps implements DynamicOps<Tag> {
 
             List<Tag> list = Lists.newArrayList();
             mapLike.entries().forEach((pair) -> {
-                Tag tag = (Tag)pair.getFirst();
-                if (!(tag instanceof StringTag)) {
-                    list.add(tag);
+                Tag tagIn = (Tag)pair.getFirst();
+                if (!(tagIn instanceof StringTag)) {
+                    list.add(tagIn);
                 } else {
-                    compoundTag.put(tag.getAsString(), (Tag)pair.getSecond());
+                    compoundTag.put(tagIn.getAsString(), (Tag)pair.getSecond());
                 }
             });
             return !list.isEmpty() ? DataResult.error("some keys are not strings: " + list, compoundTag) : DataResult.success(compoundTag);
@@ -267,7 +267,7 @@ public class NbtOps implements DynamicOps<Tag> {
     }
 
     public DataResult<ByteBuffer> getByteBuffer(Tag tag) {
-        return tag instanceof ByteArrayTag ? DataResult.success(ByteBuffer.wrap(((ByteArrayTag)tag).getAsByteArray())) : super.getByteBuffer(tag);
+        return tag instanceof ByteArrayTag ? DataResult.success(ByteBuffer.wrap(((ByteArrayTag)tag).getAsByteArray())) : DynamicOps.super.getByteBuffer(tag);
     }
 
     public Tag createByteList(ByteBuffer byteBuffer) {
@@ -275,7 +275,7 @@ public class NbtOps implements DynamicOps<Tag> {
     }
 
     public DataResult<IntStream> getIntStream(Tag tag) {
-        return tag instanceof IntArrayTag ? DataResult.success(Arrays.stream(((IntArrayTag)tag).getAsIntArray())) : super.getIntStream(tag);
+        return tag instanceof IntArrayTag ? DataResult.success(Arrays.stream(((IntArrayTag)tag).getAsIntArray())) : DynamicOps.super.getIntStream(tag);
     }
 
     public Tag createIntList(IntStream intStream) {
@@ -283,7 +283,7 @@ public class NbtOps implements DynamicOps<Tag> {
     }
 
     public DataResult<LongStream> getLongStream(Tag tag) {
-        return tag instanceof LongArrayTag ? DataResult.success(Arrays.stream(((LongArrayTag)tag).getAsLongArray())) : super.getLongStream(tag);
+        return tag instanceof LongArrayTag ? DataResult.success(Arrays.stream(((LongArrayTag)tag).getAsLongArray())) : DynamicOps.super.getLongStream(tag);
     }
 
     public Tag createLongList(LongStream longStream) {
diff --git a/src/main/java/net/minecraft/nbt/NbtUtils.java b/src/main/java/net/minecraft/nbt/NbtUtils.java
index 993e5e12a5a9a901ab732c2f451aa0e3ea65981e..8da27ab2299ed77e8a51c6f5c0626b6bb236c68a 100644
--- a/src/main/java/net/minecraft/nbt/NbtUtils.java
+++ b/src/main/java/net/minecraft/nbt/NbtUtils.java
@@ -41,8 +41,8 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public final class NbtUtils {
-    private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.comparingInt((listTag) -> listTag.getInt(1)).thenComparingInt((listTag) -> listTag.getInt(0)).thenComparingInt((listTag) -> listTag.getInt(2));
-    private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.comparingDouble((listTag) -> listTag.getDouble(1)).thenComparingDouble((listTag) -> listTag.getDouble(0)).thenComparingDouble((listTag) -> listTag.getDouble(2));
+    private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.<ListTag>comparingInt((listTag) -> listTag.getInt(1)).thenComparingInt((listTag) -> listTag.getInt(0)).thenComparingInt((listTag) -> listTag.getInt(2));
+    private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.<ListTag>comparingDouble((listTag) -> listTag.getDouble(1)).thenComparingDouble((listTag) -> listTag.getDouble(0)).thenComparingDouble((listTag) -> listTag.getDouble(2));
     public static final String SNBT_DATA_TAG = "data";
     private static final char PROPERTIES_START = '{';
     private static final char PROPERTIES_END = '}';
@@ -234,7 +234,7 @@ public final class NbtUtils {
     private static <S extends StateHolder<?, S>, T extends Comparable<T>> S setValueHelper(S stateHolder, Property<T> property, String s, CompoundTag compoundTag, CompoundTag compoundTag2) {
         Optional<T> optional = property.getValue(compoundTag.getString(s));
         if (optional.isPresent()) {
-            return stateHolder.setValue(property, (Comparable)optional.get());
+            return stateHolder.setValue(property, optional.get());
         } else {
             LOGGER.warn("Unable to read property: {} with value: {} for blockstate: {}", s, compoundTag.getString(s), compoundTag2.toString());
             return stateHolder;
@@ -519,13 +519,13 @@ public final class NbtUtils {
             ListTag listTag4 = new ListTag();
             ListTag listTag5 = compoundTag.getList("palettes", 9);
             listTag5.stream().map(ListTag.class::cast).forEach((listTag3x) -> {
-                CompoundTag compoundTag = new CompoundTag();
+                CompoundTag compoundTagIn = new CompoundTag();
 
                 for(int i = 0; i < listTag3x.size(); ++i) {
-                    compoundTag.putString(listTag3.getString(i), packBlockState(listTag3x.getCompound(i)));
+                    compoundTagIn.putString(listTag3.getString(i), packBlockState(listTag3x.getCompound(i)));
                 }
 
-                listTag4.add(compoundTag);
+                listTag4.add(compoundTagIn);
             });
             compoundTag.put("palettes", listTag4);
         }
@@ -603,8 +603,8 @@ public final class NbtUtils {
             CompoundTag compoundTag2 = new CompoundTag();
             if (i + 2 <= s.length()) {
                 String s3 = s.substring(i + 1, s.indexOf(125, i));
-                COMMA_SPLITTER.split(s3).forEach((s2) -> {
-                    List<String> list = COLON_SPLITTER.splitToList(s2);
+                COMMA_SPLITTER.split(s3).forEach((s2x) -> {
+                    List<String> list = COLON_SPLITTER.splitToList(s2x);
                     if (list.size() == 2) {
                         compoundTag2.putString((String)list.get(0), (String)list.get(1));
                     } else {
diff --git a/src/main/java/net/minecraft/nbt/TagParser.java b/src/main/java/net/minecraft/nbt/TagParser.java
index 27590ee3be29818f7b751aa8c245f368abf4cdb6..443fb9f4c58e843d4f4ffe2f1a9321fec363e02d 100644
--- a/src/main/java/net/minecraft/nbt/TagParser.java
+++ b/src/main/java/net/minecraft/nbt/TagParser.java
@@ -235,11 +235,11 @@ public class TagParser {
                 }
 
                 if (tagType2 == ByteTag.TYPE) {
-                    list.add(((NumericTag)tag).getAsByte());
+                    list.add((T) (Object) ((NumericTag)tag).getAsByte());
                 } else if (tagType2 == LongTag.TYPE) {
-                    list.add(((NumericTag)tag).getAsLong());
+                    list.add((T) (Object) ((NumericTag)tag).getAsLong());
                 } else {
-                    list.add(((NumericTag)tag).getAsInt());
+                    list.add((T) (Object) ((NumericTag)tag).getAsInt());
                 }
 
                 if (this.hasElementSeparator()) {
diff --git a/src/main/java/net/minecraft/network/ConnectionProtocol.java b/src/main/java/net/minecraft/network/ConnectionProtocol.java
index 7aa5bc5caec46cdc8cdcce440fe6c32e8a41ffb2..db7a24fd73bd40ec1b2a7ed8d1cba8c5863ce2d7 100644
--- a/src/main/java/net/minecraft/network/ConnectionProtocol.java
+++ b/src/main/java/net/minecraft/network/ConnectionProtocol.java
@@ -15,6 +15,7 @@ import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket;
 import net.minecraft.network.protocol.game.ClientboundAddMobPacket;
@@ -117,6 +118,7 @@ import net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket;
+import net.minecraft.network.protocol.game.ServerGamePacketListener;
 import net.minecraft.network.protocol.game.ServerboundAcceptTeleportationPacket;
 import net.minecraft.network.protocol.game.ServerboundBlockEntityTagQuery;
 import net.minecraft.network.protocol.game.ServerboundChangeDifficultyPacket;
@@ -163,26 +165,31 @@ import net.minecraft.network.protocol.game.ServerboundTeleportToEntityPacket;
 import net.minecraft.network.protocol.game.ServerboundUseItemOnPacket;
 import net.minecraft.network.protocol.game.ServerboundUseItemPacket;
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
+import net.minecraft.network.protocol.handshake.ServerHandshakePacketListener;
+import net.minecraft.network.protocol.login.ClientLoginPacketListener;
 import net.minecraft.network.protocol.login.ClientboundCustomQueryPacket;
 import net.minecraft.network.protocol.login.ClientboundGameProfilePacket;
 import net.minecraft.network.protocol.login.ClientboundHelloPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginCompressionPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
+import net.minecraft.network.protocol.login.ServerLoginPacketListener;
 import net.minecraft.network.protocol.login.ServerboundCustomQueryPacket;
 import net.minecraft.network.protocol.login.ServerboundHelloPacket;
 import net.minecraft.network.protocol.login.ServerboundKeyPacket;
+import net.minecraft.network.protocol.status.ClientStatusPacketListener;
 import net.minecraft.network.protocol.status.ClientboundPongResponsePacket;
 import net.minecraft.network.protocol.status.ClientboundStatusResponsePacket;
+import net.minecraft.network.protocol.status.ServerStatusPacketListener;
 import net.minecraft.network.protocol.status.ServerboundPingRequestPacket;
 import net.minecraft.network.protocol.status.ServerboundStatusRequestPacket;
 import net.minecraft.util.VisibleForDebug;
 import org.apache.logging.log4j.LogManager;
 
 public enum ConnectionProtocol {
-    HANDSHAKING(-1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
-    PLAY(0, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddMobPacket.class, ClientboundAddMobPacket::new).addPacket(ClientboundAddPaintingPacket.class, ClientboundAddPaintingPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAddVibrationSignalPacket.class, ClientboundAddVibrationSignalPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockBreakAckPacket.class, ClientboundBlockBreakAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPacket.class, ClientboundChatPacket::new).addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkWithLightPacket.class, ClientboundLevelChunkWithLightPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new).addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new).addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new).addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new).addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new).addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new).addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new).addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetSimulationDistancePacket.class, ClientboundSetSimulationDistancePacket::new).addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new).addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read).addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
-    STATUS(1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
-    LOGIN(2, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
+    HANDSHAKING(-1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerHandshakePacketListener>()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
+    PLAY(0, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientGamePacketListener>()).addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddMobPacket.class, ClientboundAddMobPacket::new).addPacket(ClientboundAddPaintingPacket.class, ClientboundAddPaintingPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAddVibrationSignalPacket.class, ClientboundAddVibrationSignalPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockBreakAckPacket.class, ClientboundBlockBreakAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPacket.class, ClientboundChatPacket::new).addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkWithLightPacket.class, ClientboundLevelChunkWithLightPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new).addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new).addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new).addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new).addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new).addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new).addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new).addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetSimulationDistancePacket.class, ClientboundSetSimulationDistancePacket::new).addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new).addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerGamePacketListener>()).addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read).addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
+    STATUS(1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerStatusPacketListener>()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientStatusPacketListener>()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
+    LOGIN(2, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientLoginPacketListener>()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerLoginPacketListener>()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
 
     private static final int MIN_PROTOCOL_ID = -1;
     private static final int MAX_PROTOCOL_ID = 2;
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 34e7559b7e05c9752861c544b43ac93caa9b9d21..a8327d87373f23b88a4d471fc145e341a44466e7 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -148,7 +148,7 @@ public class FriendlyByteBuf extends ByteBuf {
 
     public void writeIntIdList(IntList intList) {
         this.writeVarInt(intList.size());
-        intList.forEach(this::writeVarInt);
+        intList.forEach((java.util.function.IntConsumer) this::writeVarInt);
     }
 
     public <K, V, M extends Map<K, V>> M readMap(IntFunction<M> intFunction, Function<FriendlyByteBuf, K> function, Function<FriendlyByteBuf, V> function2) {
diff --git a/src/main/java/net/minecraft/network/chat/ComponentUtils.java b/src/main/java/net/minecraft/network/chat/ComponentUtils.java
index cafc677fb15a93184de892845d45701b2f41bf15..fc4a5039b607c1644c1d715d171b642bd91c71d1 100644
--- a/src/main/java/net/minecraft/network/chat/ComponentUtils.java
+++ b/src/main/java/net/minecraft/network/chat/ComponentUtils.java
@@ -79,7 +79,7 @@ public class ComponentUtils {
         if (collection.isEmpty()) {
             return TextComponent.EMPTY;
         } else if (collection.size() == 1) {
-            return (Component)function.apply((Comparable)collection.iterator().next());
+            return (Component)function.apply(collection.iterator().next());
         } else {
             List<T> list = Lists.newArrayList(collection);
             list.sort(Comparable::compareTo);
diff --git a/src/main/java/net/minecraft/network/chat/NbtComponent.java b/src/main/java/net/minecraft/network/chat/NbtComponent.java
index 1e9182ca6d9827541cccd8f66ab546c60e4b96ba..48b6b9db0bbdc23f973caa862df7919ce2c08c56 100644
--- a/src/main/java/net/minecraft/network/chat/NbtComponent.java
+++ b/src/main/java/net/minecraft/network/chat/NbtComponent.java
@@ -85,7 +85,7 @@ public abstract class NbtComponent extends BaseComponent implements ContextAware
                     }
                 }).reduce((mutableComponent, mutableComponent2) -> mutableComponent.append(component).append(mutableComponent2)).orElseGet(() -> new TextComponent(""));
             } else {
-                return (MutableComponent)ComponentUtils.updateForEntity(commandSourceStack, this.separator, entity, i).map((mutableComponent) -> (MutableComponent)stream.map((s) -> new TextComponent(s)).reduce((mutableComponent2, mutableComponent3) -> mutableComponent2.append(mutableComponent).append(mutableComponent3)).orElseGet(() -> new TextComponent(""))).orElseGet(() -> new TextComponent((String)stream.collect(Collectors.joining(", "))));
+                return (MutableComponent)ComponentUtils.updateForEntity(commandSourceStack, this.separator, entity, i).map((mutableComponent) -> stream.<MutableComponent>map(TextComponent::new).reduce((mutableComponent2, mutableComponent3) -> mutableComponent2.append(mutableComponent).append(mutableComponent3)).orElseGet(() -> new TextComponent(""))).orElseGet(() -> new TextComponent((String)stream.collect(Collectors.joining(", "))));
             }
         } else {
             return new TextComponent("");
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockBreakAckPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockBreakAckPacket.java
index 7853f5bd5ab3f20e5c0459eed6eba29e9f3a0387..8dc52ad2a4d55cb17f82b81dc7edc9f51344e61f 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockBreakAckPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockBreakAckPacket.java
@@ -11,6 +11,17 @@ import org.apache.logging.log4j.Logger;
 public record ClientboundBlockBreakAckPacket(BlockPos pos, BlockState state, ServerboundPlayerActionPacket.Action action, boolean allGood) implements Packet<ClientGamePacketListener> {
     private static final Logger LOGGER = LogManager.getLogger();
 
+    public ClientboundBlockBreakAckPacket(BlockPos pos, BlockState state, ServerboundPlayerActionPacket.Action action, boolean allGood, String s) {
+        this(pos, state, action, allGood);
+    }
+
+    public ClientboundBlockBreakAckPacket(BlockPos pos, BlockState state, ServerboundPlayerActionPacket.Action action, boolean allGood) {
+        this.pos = pos.immutable();
+        this.state = state;
+        this.action = action;
+        this.allGood = allGood;
+    }
+
     public ClientboundBlockBreakAckPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readBlockPos(), Block.BLOCK_STATE_REGISTRY.byId(friendlyByteBuf.readVarInt()), friendlyByteBuf.readEnum(ServerboundPlayerActionPacket.Action.class), friendlyByteBuf.readBoolean());
     }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java
index f3546910674669c647a964e8e29a510b02270565..c2608a6026a5ac72c889cac3e18c41a07e3479e6 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java
@@ -13,32 +13,11 @@ import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.dimension.DimensionType;
 
-public record ClientboundLoginPacket(int playerId, boolean hardcore, GameType gameType, GameType previousGameType, Set<ResourceKey<Level>> levels, RegistryAccess.RegistryHolder registryHolder, DimensionType dimensionType, ResourceKey<Level> dimension, long seed, int maxPlayers, int chunkRadius, int simulationDistance, boolean reducedDebugInfo, boolean showDeathScreen, boolean isDebug, boolean isFlat) implements Packet {
-    @Nullable
-
+public record ClientboundLoginPacket(int playerId, boolean hardcore, GameType gameType, GameType previousGameType, Set<ResourceKey<Level>> levels, RegistryAccess.RegistryHolder registryHolder, DimensionType dimensionType, ResourceKey<Level> dimension, long seed, int maxPlayers, int chunkRadius, int simulationDistance, boolean reducedDebugInfo, boolean showDeathScreen, boolean isDebug, boolean isFlat) implements Packet<ClientGamePacketListener> {
     public ClientboundLoginPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readInt(), friendlyByteBuf.readBoolean(), GameType.byId(friendlyByteBuf.readByte()), GameType.byNullableId(friendlyByteBuf.readByte()), friendlyByteBuf.readCollection(Sets::newHashSetWithExpectedSize, (friendlyByteBufx) -> ResourceKey.create(Registry.DIMENSION_REGISTRY, friendlyByteBufx.readResourceLocation())), friendlyByteBuf.readWithCodec(RegistryAccess.RegistryHolder.NETWORK_CODEC), (DimensionType)(friendlyByteBuf.readWithCodec(DimensionType.CODEC)).get(), ResourceKey.create(Registry.DIMENSION_REGISTRY, friendlyByteBuf.readResourceLocation()), friendlyByteBuf.readLong(), friendlyByteBuf.readVarInt(), friendlyByteBuf.readVarInt(), friendlyByteBuf.readVarInt(), friendlyByteBuf.readBoolean(), friendlyByteBuf.readBoolean(), friendlyByteBuf.readBoolean(), friendlyByteBuf.readBoolean());
     }
 
-    public ClientboundLoginPacket(int i, boolean flag, GameType gameType, @Nullable GameType gameType2, Set<ResourceKey<Level>> set, RegistryAccess.RegistryHolder registryHolder, DimensionType dimensionType, ResourceKey<Level> resourceKey, long l, int i2, int i3, int i4, boolean flag2, boolean flag3, boolean flag4, boolean flag5) {
-        this.playerId = i;
-        this.hardcore = flag;
-        this.gameType = gameType;
-        this.previousGameType = gameType2;
-        this.levels = set;
-        this.registryHolder = registryHolder;
-        this.dimensionType = dimensionType;
-        this.dimension = resourceKey;
-        this.seed = l;
-        this.maxPlayers = i2;
-        this.chunkRadius = i3;
-        this.simulationDistance = i4;
-        this.reducedDebugInfo = flag2;
-        this.showDeathScreen = flag3;
-        this.isDebug = flag4;
-        this.isFlat = flag5;
-    }
-
     public void write(FriendlyByteBuf friendlyByteBuf) {
         friendlyByteBuf.writeInt(this.playerId);
         friendlyByteBuf.writeBoolean(this.hardcore);
@@ -61,6 +40,4 @@ public record ClientboundLoginPacket(int playerId, boolean hardcore, GameType ga
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleLogin(this);
     }
-
-    @Nullable
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java
index 530338eb32500d6878b78551dc1c4d7a3f66c8a5..5bf2f4e4978a98178802dd71471ecb37685424df 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java
@@ -4,7 +4,6 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
 public record ClientboundSetSimulationDistancePacket(int simulationDistance) implements Packet<ClientGamePacketListener> {
-
     public ClientboundSetSimulationDistancePacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readVarInt());
     }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
index c387a395af335f2bb7395f068165c4d6b2ac5786..5ad7fd0596c3738dd03a2166ce94b4c39515114a 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
@@ -31,7 +31,7 @@ public class ClientboundUpdateAttributesPacket implements Packet<ClientGamePacke
             ResourceLocation resourceLocation = friendlyByteBufx.readResourceLocation();
             Attribute attribute = Registry.ATTRIBUTE.get(resourceLocation);
             double d = friendlyByteBufx.readDouble();
-            List<AttributeModifier> list = friendlyByteBufx.readList((friendlyByteBuf) -> new AttributeModifier(friendlyByteBuf.readUUID(), "Unknown synced attribute modifier", friendlyByteBuf.readDouble(), AttributeModifier.Operation.fromValue(friendlyByteBuf.readByte())));
+            List<AttributeModifier> list = friendlyByteBufx.readList((friendlyByteBufIn) -> new AttributeModifier(friendlyByteBufIn.readUUID(), "Unknown synced attribute modifier", friendlyByteBufIn.readDouble(), AttributeModifier.Operation.fromValue(friendlyByteBufIn.readByte())));
             return new ClientboundUpdateAttributesPacket.AttributeSnapshot(attribute, d, list);
         });
     }
@@ -41,10 +41,10 @@ public class ClientboundUpdateAttributesPacket implements Packet<ClientGamePacke
         friendlyByteBuf.writeCollection(this.attributes, (friendlyByteBufx, attributeSnapshot) -> {
             friendlyByteBufx.writeResourceLocation(Registry.ATTRIBUTE.getKey(attributeSnapshot.getAttribute()));
             friendlyByteBufx.writeDouble(attributeSnapshot.getBase());
-            friendlyByteBufx.writeCollection(attributeSnapshot.getModifiers(), (friendlyByteBuf, attributeModifier) -> {
-                friendlyByteBuf.writeUUID(attributeModifier.getId());
-                friendlyByteBuf.writeDouble(attributeModifier.getAmount());
-                friendlyByteBuf.writeByte(attributeModifier.getOperation().toValue());
+            friendlyByteBufx.writeCollection(attributeSnapshot.getModifiers(), (friendlyByteBufIn, attributeModifier) -> {
+                friendlyByteBufIn.writeUUID(attributeModifier.getId());
+                friendlyByteBufIn.writeDouble(attributeModifier.getAmount());
+                friendlyByteBufIn.writeByte(attributeModifier.getOperation().toValue());
             });
         });
     }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
index 6b2cffc664aa6729b92e3a4e229684540e692597..af60d0c1be5f61278c34ec3613b6bf49eddfac51 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
@@ -42,6 +42,6 @@ public class ClientboundUpdateRecipesPacket implements Packet<ClientGamePacketLi
     public static <T extends Recipe<?>> void toNetwork(FriendlyByteBuf friendlyByteBuf, T recipe) {
         friendlyByteBuf.writeResourceLocation(Registry.RECIPE_SERIALIZER.getKey(recipe.getSerializer()));
         friendlyByteBuf.writeResourceLocation(recipe.getId());
-        recipe.getSerializer().toNetwork(friendlyByteBuf, recipe);
+        ((RecipeSerializer) recipe.getSerializer()).toNetwork(friendlyByteBuf, recipe);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/resources/RegistryFileCodec.java b/src/main/java/net/minecraft/resources/RegistryFileCodec.java
index cebb099d321cb419cf7995e741036ac169a04e52..1a651a4a93102697e94a0c61254b5406209875be 100644
--- a/src/main/java/net/minecraft/resources/RegistryFileCodec.java
+++ b/src/main/java/net/minecraft/resources/RegistryFileCodec.java
@@ -19,7 +19,7 @@ public final class RegistryFileCodec<E> implements Codec<Supplier<E>> {
     }
 
     public static <E> Codec<List<Supplier<E>>> homogeneousList(ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec) {
-        return Codec.either(create(resourceKey, codec, false).listOf(), codec.xmap((object) -> () -> object, Supplier::get).listOf()).xmap((either) -> either.map((list) -> list, (list) -> list), Either::left);
+        return Codec.either(create(resourceKey, codec, false).listOf(), codec.xmap((object) -> (Supplier<E>) () -> object, Supplier::get).listOf()).xmap((either) -> either.map((list) -> list, (list) -> list), Either::left);
     }
 
     private static <E> RegistryFileCodec<E> create(ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec, boolean flag) {
@@ -37,7 +37,7 @@ public final class RegistryFileCodec<E> implements Codec<Supplier<E>> {
     }
 
     public <T> DataResult<Pair<Supplier<E>, T>> decode(DynamicOps<T> dynamicOps, T object) {
-        return dynamicOps instanceof RegistryReadOps ? ((RegistryReadOps)dynamicOps).decodeElement(object, this.registryKey, this.elementCodec, this.allowInline) : this.elementCodec.decode(dynamicOps, object).map((pair) -> pair.mapFirst((object) -> () -> object));
+        return dynamicOps instanceof RegistryReadOps ? ((RegistryReadOps)dynamicOps).decodeElement(object, this.registryKey, this.elementCodec, this.allowInline) : this.elementCodec.decode(dynamicOps, object).map((pair) -> pair.mapFirst((objectIn) -> () -> objectIn));
     }
 
     public String toString() {
diff --git a/src/main/java/net/minecraft/resources/RegistryReadOps.java b/src/main/java/net/minecraft/resources/RegistryReadOps.java
index 47115782b954917fec13a69346e0bdaaaa700d67..93445809acf071f6d48dc87a3d1da329d4605e6b 100644
--- a/src/main/java/net/minecraft/resources/RegistryReadOps.java
+++ b/src/main/java/net/minecraft/resources/RegistryReadOps.java
@@ -69,7 +69,7 @@ public class RegistryReadOps<T> extends DelegatingOps<T> {
         this.resources = resourceAccess;
         this.registryAccess = registryAccess;
         this.readCache = identityHashMap;
-        this.jsonOps = dynamicOps == JsonOps.INSTANCE ? this : new RegistryReadOps(JsonOps.INSTANCE, resourceAccess, registryAccess, identityHashMap);
+        this.jsonOps = dynamicOps == JsonOps.INSTANCE ? (RegistryReadOps<JsonElement>) this : new RegistryReadOps(JsonOps.INSTANCE, resourceAccess, registryAccess, identityHashMap);
     }
 
     protected <E> DataResult<Pair<Supplier<E>, T>> decodeElement(T object, ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec, boolean flag) {
@@ -80,7 +80,7 @@ public class RegistryReadOps<T> extends DelegatingOps<T> {
             WritableRegistry<E> writableRegistry = (WritableRegistry)optional.get();
             DataResult<Pair<ResourceLocation, T>> dataResult = ResourceLocation.CODEC.decode(this.delegate, object);
             if (!dataResult.result().isPresent()) {
-                return !flag ? DataResult.error("Inline definitions not allowed here") : codec.decode(this, object).map((pairx) -> pairx.mapFirst((object) -> () -> object));
+                return !flag ? DataResult.error("Inline definitions not allowed here") : codec.decode(this, object).map((pairx) -> pairx.mapFirst((objectIn) -> () -> objectIn));
             } else {
                 Pair<ResourceLocation, T> pair = dataResult.result().get();
                 ResourceLocation resourceLocation = (ResourceLocation)pair.getFirst();
@@ -159,7 +159,7 @@ public class RegistryReadOps<T> extends DelegatingOps<T> {
     }
 
     protected <E> DataResult<Registry<E>> registry(ResourceKey<? extends Registry<E>> resourceKey) {
-        return this.registryAccess.ownedRegistry(resourceKey).map((writableRegistry) -> DataResult.success(writableRegistry, writableRegistry.elementsLifecycle())).orElseGet(() -> DataResult.error("Unknown registry: " + resourceKey));
+        return (DataResult) this.registryAccess.ownedRegistry(resourceKey).map((writableRegistry) -> DataResult.success(writableRegistry, writableRegistry.elementsLifecycle())).orElseGet(() -> DataResult.error("Unknown registry: " + resourceKey));
     }
 
     static final class ReadCache<E> {
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 27c90d19b6a7fd2be0f4d61627081aef59ea4699..32412fbbd625b7ae22e62b0f439152187f061f5b 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -174,17 +174,17 @@ public class Main {
             levelStorageAccess.saveDataTag(registryHolder, worldData);
             WorldData worldData2 = worldData;
             final DedicatedServer dedicatedServer = MinecraftServer.spin((threadx) -> {
-                DedicatedServer dedicatedServer = new DedicatedServer(threadx, registryHolder, levelStorageAccess, packRepository, serverResources, worldData2, dedicatedServerSettings, DataFixers.getDataFixer(), minecraftSessionService, gameProfileRepository, gameProfileCache, LoggerChunkProgressListener::new);
-                dedicatedServer.setSingleplayerName((String)optionSet.valueOf(optionSpec9));
-                dedicatedServer.setPort(optionSet.valueOf(optionSpec12));
-                dedicatedServer.setDemo(optionSet.has(optionSpec3));
-                dedicatedServer.setId((String)optionSet.valueOf(optionSpec13));
-                boolean flag = !optionSet.has(optionSpec) && !optionSet.valuesOf(optionSpec15).contains("nogui");
-                if (flag && !GraphicsEnvironment.isHeadless()) {
-                    dedicatedServer.showGui();
+                DedicatedServer dedicatedServerIn = new DedicatedServer(threadx, registryHolder, levelStorageAccess, packRepository, serverResources, worldData2, dedicatedServerSettings, DataFixers.getDataFixer(), minecraftSessionService, gameProfileRepository, gameProfileCache, LoggerChunkProgressListener::new);
+                dedicatedServerIn.setSingleplayerName((String)optionSet.valueOf(optionSpec9));
+                dedicatedServerIn.setPort(optionSet.valueOf(optionSpec12));
+                dedicatedServerIn.setDemo(optionSet.has(optionSpec3));
+                dedicatedServerIn.setId((String)optionSet.valueOf(optionSpec13));
+                boolean nogui = !optionSet.has(optionSpec) && !optionSet.valuesOf(optionSpec15).contains("nogui");
+                if (nogui && !GraphicsEnvironment.isHeadless()) {
+                    dedicatedServerIn.showGui();
                 }
 
-                return dedicatedServer;
+                return dedicatedServerIn;
             });
             Thread thread = new Thread("Server Shutdown Thread") {
                 public void run() {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index c9a374ff816c08541797fc158c8872c4a90d8609..487359b1fc30a1ebd6203033e26f380304df0aa0 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -737,7 +737,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
 
-    protected void doRunTask(TickTask tickTask) {
+    public void doRunTask(TickTask tickTask) {
         this.getProfiler().incrementCounter("runTask");
         super.doRunTask(tickTask);
     }
@@ -1227,7 +1227,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     public CompletableFuture<Void> reloadResources(Collection<String> collection) {
-        CompletableFuture<Void> completableFuture = CompletableFuture.supplyAsync(() -> (ImmutableList)collection.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()), this).thenCompose((immutableList) -> ServerResources.loadResources(immutableList, this.registryHolder, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this)).thenAcceptAsync((serverResources) -> {
+        CompletableFuture<Void> completableFuture = CompletableFuture.supplyAsync(() -> collection.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()), this).thenCompose((immutableList) -> ServerResources.loadResources(immutableList, this.registryHolder, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this)).thenAcceptAsync((serverResources) -> {
             this.resources.close();
             this.resources = serverResources;
             this.packRepository.setSelected(collection);
diff --git a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
index de25a7202a02410e0ebb7ddd289028c0f585df34..454481969f40fec2b10c9bbc55608ad3ad4c7aa9 100644
--- a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
+++ b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
@@ -86,7 +86,7 @@ public class ServerFunctionLibrary implements PreparableReloadListener {
         return completableFuture.thenCombine(completableFuture2, Pair::of).thenCompose(preparationBarrier::wait).thenAcceptAsync((pair) -> {
             Map<ResourceLocation, CompletableFuture<CommandFunction>> map = pair.getSecond();
             Builder<ResourceLocation, CommandFunction> builder = ImmutableMap.builder();
-            map.forEach((resourceLocation, completableFuture) -> completableFuture.handle((commandFunction, throwable) -> {
+            map.forEach((resourceLocation, completableFutureIn) -> completableFutureIn.handle((commandFunction, throwable) -> {
                     if (throwable != null) {
                         LOGGER.error("Failed to load function {}", resourceLocation, throwable);
                     } else {
diff --git a/src/main/java/net/minecraft/server/commands/EmoteCommands.java b/src/main/java/net/minecraft/server/commands/EmoteCommands.java
index b2328fb45da35d9074065809af9eab3d19cb79d3..f0ecdb23a104bd26c7f127a80540d40bbdab43a9 100644
--- a/src/main/java/net/minecraft/server/commands/EmoteCommands.java
+++ b/src/main/java/net/minecraft/server/commands/EmoteCommands.java
@@ -24,8 +24,8 @@ public class EmoteCommands {
                 if (entity instanceof ServerPlayer) {
                     ServerPlayer serverPlayer = (ServerPlayer)entity;
                     serverPlayer.getTextFilter().processStreamMessage(s).thenAcceptAsync((filteredText) -> {
-                        String s = filteredText.getFiltered();
-                        Component component = s.isEmpty() ? null : createMessage(commandContext, s);
+                        String textFiltered = filteredText.getFiltered();
+                        Component component = textFiltered.isEmpty() ? null : createMessage(commandContext, textFiltered);
                         Component component2 = createMessage(commandContext, filteredText.getRaw());
                         minecraftServer.getPlayerList().broadcastMessage(component2, (serverPlayer2) -> serverPlayer.shouldFilterMessageTo(serverPlayer2) ? component : component2, ChatType.CHAT, entity.getUUID());
                     }, minecraftServer);
diff --git a/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java b/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java
index 4e3fb0d3cd487a2b7b7d174823dd74c2ac8880b0..6b87533051cd445b4560c9e4bbc52066f4f5644d 100644
--- a/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java
@@ -67,7 +67,7 @@ public class ForceLoadCommand {
         ServerLevel serverLevel = commandSourceStack.getLevel();
         ResourceKey<Level> resourceKey = serverLevel.dimension();
         LongSet longSet = serverLevel.getForcedChunks();
-        longSet.forEach((l) -> serverLevel.setChunkForced(ChunkPos.getX(l), ChunkPos.getZ(l), false));
+        longSet.forEach((java.util.function.LongConsumer) (l) -> serverLevel.setChunkForced(ChunkPos.getX(l), ChunkPos.getZ(l), false));
         commandSourceStack.sendSuccess(new TranslatableComponent("commands.forceload.removed.all", resourceKey.location()), true);
         return 0;
     }
diff --git a/src/main/java/net/minecraft/server/commands/data/DataCommands.java b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
index b4fcb4678ad94bbb293202a31a1015e473117d92..3c5c0b6c60359e459207dd791e9b3cf518ae4336 100644
--- a/src/main/java/net/minecraft/server/commands/data/DataCommands.java
+++ b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
@@ -119,7 +119,7 @@ public class DataCommands {
                 ArgumentBuilder<CommandSourceStack, ?> argumentBuilder2 = Commands.argument("targetPath", NbtPathArgument.nbtPath());
 
                 for(DataCommands.DataProvider dataProvider2 : SOURCE_PROVIDERS) {
-                    biConsumer.accept(argumentBuilder2, (DataCommands.DataManipulatorDecorator)(dataManipulator) -> dataProvider2.wrap(Commands.literal("from"), (argumentBuilder) -> argumentBuilder.executes((commandContext) -> {
+                    biConsumer.accept(argumentBuilder2, (DataCommands.DataManipulatorDecorator)(dataManipulator) -> dataProvider2.wrap(Commands.literal("from"), (argumentBuilderIn) -> argumentBuilderIn.executes((commandContext) -> {
                                 List<Tag> list = Collections.singletonList(dataProvider2.access(commandContext).getData());
                                 return manipulateData(commandContext, dataProvider, dataManipulator, list);
                             }).then(Commands.argument("sourcePath", NbtPathArgument.nbtPath()).executes((commandContext) -> {
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index 595db43a0f044cbedfd4367ac69491f5f7fc032e..b8872e22ff9aa96e4025b167508c9f87ff8eb815 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -85,7 +85,7 @@ public abstract class Settings<T extends Settings<T>> {
     private static <V extends Number> Function<String, V> wrapNumberDeserializer(Function<String, V> function) {
         return (s) -> {
             try {
-                return (Number)function.apply(s);
+                return function.apply(s);
             } catch (NumberFormatException var3) {
                 return null;
             }
@@ -129,13 +129,13 @@ public abstract class Settings<T extends Settings<T>> {
         String s2 = this.getStringRaw(s);
         V object2 = (V)MoreObjects.firstNonNull(s2 != null ? function.apply(s2) : null, object);
         this.properties.put(s, function2.apply(object2));
-        return new Settings.MutableValue<>(s, object2, function2);
+        return new Settings.MutableValue(s, object2, function2);
     }
 
     protected <V> V get(String s, Function<String, V> function, UnaryOperator<V> unaryOperator, Function<V, String> function2, V object) {
         return this.get(s, (sx) -> {
-            V object = (V)function.apply(sx);
-            return object != null ? unaryOperator.apply(object) : null;
+            V o = (V)function.apply(sx);
+            return o != null ? unaryOperator.apply(o) : null;
         }, function2, object);
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 45f4b49a85b9f7d84f04e75a524ef924ef9142ea..acccb89ea0635891b072a09f13ae000b5aa27c4e 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -541,11 +541,11 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completableFuture = this.getChunkRangeFuture(chunkPos, chunkStatus.getRange(), (i) -> this.getDependencyStatus(chunkStatus, i));
         this.level.getProfiler().incrementCounter((Supplier<String>)(() -> "chunkGenerate " + chunkStatus.getName()));
         Executor executor = (runnable) -> this.worldgenMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkHolder, runnable));
-        return completableFuture.thenComposeAsync((either) -> (CompletionStage)either.map((list) -> {
+        return completableFuture.thenComposeAsync((either) -> either.map((list) -> {
                 try {
-                    CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture = chunkStatus.generate(executor, this.level, this.generator, this.structureManager, this.lightEngine, (chunkAccess) -> this.protoChunkToFullChunk(chunkHolder), list, false);
+                    CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFutureIn = chunkStatus.generate(executor, this.level, this.generator, this.structureManager, this.lightEngine, (chunkAccess) -> this.protoChunkToFullChunk(chunkHolder), list, false);
                     this.progressListener.onStatusChange(chunkPos, chunkStatus);
-                    return completableFuture;
+                    return completableFutureIn;
                 } catch (Exception var9) {
                     var9.getStackTrace();
                     CrashReport crashReport = CrashReport.forThrowable(var9, "Exception generating new chunk");
@@ -594,7 +594,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 if (protoChunk instanceof ImposterProtoChunk) {
                     levelChunk = ((ImposterProtoChunk)protoChunk).getWrapped();
                 } else {
-                    levelChunk = new LevelChunk(this.level, protoChunk, (levelChunk) -> postLoadProtoChunk(this.level, protoChunk.getEntities()));
+                    levelChunk = new LevelChunk(this.level, protoChunk, (levelChunkIn) -> postLoadProtoChunk(this.level, protoChunk.getEntities()));
                     chunkHolder.replaceProtoChunk(new ImposterProtoChunk(levelChunk, false));
                 }
 
@@ -874,7 +874,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             }
         }
 
-        int i = SectionPos.blockToSectionCoord(serverPlayer.getBlockX());
+        int iIn = SectionPos.blockToSectionCoord(serverPlayer.getBlockX());
         int i2 = SectionPos.blockToSectionCoord(serverPlayer.getBlockZ());
         SectionPos sectionPos = serverPlayer.getLastSectionPos();
         SectionPos sectionPos2 = SectionPos.of(serverPlayer);
@@ -908,17 +908,17 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
         int i3 = sectionPos.x();
         int i4 = sectionPos.z();
-        if (Math.abs(i3 - i) <= this.viewDistance * 2 && Math.abs(i4 - i2) <= this.viewDistance * 2) {
-            int i5 = Math.min(i, i3) - this.viewDistance;
+        if (Math.abs(i3 - iIn) <= this.viewDistance * 2 && Math.abs(i4 - i2) <= this.viewDistance * 2) {
+            int i5 = Math.min(iIn, i3) - this.viewDistance;
             int i6 = Math.min(i2, i4) - this.viewDistance;
-            int i7 = Math.max(i, i3) + this.viewDistance;
+            int i7 = Math.max(iIn, i3) + this.viewDistance;
             int i8 = Math.max(i2, i4) + this.viewDistance;
 
             for(int i9 = i5; i9 <= i7; ++i9) {
                 for(int i10 = i6; i10 <= i8; ++i10) {
                     ChunkPos chunkPos = new ChunkPos(i9, i10);
                     boolean flag4 = isChunkInEuclideanRange(chunkPos, i3, i4, this.viewDistance);
-                    boolean flag5 = isChunkInEuclideanRange(chunkPos, i, i2, this.viewDistance);
+                    boolean flag5 = isChunkInEuclideanRange(chunkPos, iIn, i2, this.viewDistance);
                     this.updateChunkTracking(serverPlayer, chunkPos, new MutableObject(), flag4, flag5);
                 }
             }
@@ -934,9 +934,9 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 }
             }
 
-            for(int i13 = i - this.viewDistance; i13 <= i + this.viewDistance; ++i13) {
+            for(int i13 = iIn - this.viewDistance; i13 <= iIn + this.viewDistance; ++i13) {
                 for(int i14 = i2 - this.viewDistance; i14 <= i2 + this.viewDistance; ++i14) {
-                    if (isChunkInEuclideanRange(i13, i14, i, i2, this.viewDistance)) {
+                    if (isChunkInEuclideanRange(i13, i14, iIn, i2, this.viewDistance)) {
                         ChunkPos chunkPos3 = new ChunkPos(i13, i14);
                         boolean flag8 = false;
                         boolean flag9 = true;
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
index 4563a38cbe68298cbf34c7d7be84041561ea6978..8b9a44282ab3eeddf9999a26034d5a6dd408b6d2 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
@@ -16,7 +16,7 @@ import net.minecraft.world.level.ChunkPos;
 
 public class ChunkTaskPriorityQueue<T> {
     public static final int PRIORITY_LEVEL_COUNT = ChunkMap.MAX_CHUNK_DISTANCE + 2;
-    private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue = IntStream.range(0, PRIORITY_LEVEL_COUNT).mapToObj((ix) -> new Long2ObjectLinkedOpenHashMap()).collect(Collectors.toList());
+    private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue = IntStream.range(0, PRIORITY_LEVEL_COUNT).mapToObj((ix) -> new Long2ObjectLinkedOpenHashMap<List<Optional<T>>>()).collect(Collectors.toList());
     private volatile int firstQueue = PRIORITY_LEVEL_COUNT;
     private final String name;
     private final LongSet acquired = new LongOpenHashSet();
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
index d8108bfacc673ef1c55f7835f71f2fa2bbdf7fd6..50f12b31bcda8dabcbe10a8485a01797eb87d756 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
@@ -40,7 +40,7 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
     }
 
     public static ChunkTaskPriorityQueueSorter.Message<Runnable> message(Runnable runnable, long l, IntSupplier intSupplier) {
-        return new ChunkTaskPriorityQueueSorter.Message((processorHandle) -> () -> {
+        return new ChunkTaskPriorityQueueSorter.Message<>((processorHandle) -> () -> {
                 runnable.run();
                 processorHandle.tell(Unit.INSTANCE);
             }, l, intSupplier);
@@ -61,12 +61,12 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
     public <T> ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<T>> getProcessor(ProcessorHandle<T> processorHandle, boolean flag) {
         return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> {
                 this.getQueue(processorHandle);
-                processorHandle2.tell(ProcessorHandle.of("chunk priority sorter around " + processorHandle.name(), (message) -> this.submit(processorHandle, message.task, message.pos, message.level, flag)));
+                processorHandle2.tell(ProcessorHandle.<Message<T>>of("chunk priority sorter around " + processorHandle.name(), (message) -> this.submit(processorHandle, message.task, message.pos, message.level, flag)));
             })).join();
     }
 
     public ProcessorHandle<ChunkTaskPriorityQueueSorter.Release> getReleaseProcessor(ProcessorHandle<Runnable> processorHandle) {
-        return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> processorHandle2.tell(ProcessorHandle.of("chunk priority sorter around " + processorHandle.name(), (release) -> this.release(processorHandle, release.pos, release.task, release.clearQueue))))).join();
+        return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> processorHandle2.tell(ProcessorHandle.<Release>of("chunk priority sorter around " + processorHandle.name(), (release) -> this.release(processorHandle, release.pos, release.task, release.clearQueue))))).join();
     }
 
     public void onLevelChange(ChunkPos chunkPos, IntSupplier intSupplier, int i, IntConsumer intConsumer) {
@@ -123,9 +123,9 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
     private <T> ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>> getQueue(ProcessorHandle<T> processorHandle) {
         ChunkTaskPriorityQueue<? extends Function<ProcessorHandle<Unit>, ?>> chunkTaskPriorityQueue = (ChunkTaskPriorityQueue)this.queues.get(processorHandle);
         if (chunkTaskPriorityQueue == null) {
-            throw (IllegalArgumentException)Util.pauseInIde((T)(new IllegalArgumentException("No queue for: " + processorHandle)));
+            throw Util.pauseInIde(new IllegalArgumentException("No queue for: " + processorHandle));
         } else {
-            return chunkTaskPriorityQueue;
+            return (ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>>) chunkTaskPriorityQueue;
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/level/DistanceManager.java b/src/main/java/net/minecraft/server/level/DistanceManager.java
index a268e3614421165167d50c8846632454e7a5c78b..91095f2d22b6aade567dfe6339d54ce80764d51d 100644
--- a/src/main/java/net/minecraft/server/level/DistanceManager.java
+++ b/src/main/java/net/minecraft/server/level/DistanceManager.java
@@ -286,7 +286,7 @@ public abstract class DistanceManager {
                     Entry<SortedArraySet<Ticket<?>>> entry = (Entry)var3.next();
                     ChunkPos chunkPos = new ChunkPos(entry.getLongKey());
 
-                    for(Ticket<?> ticket : (SortedArraySet)entry.getValue()) {
+                    for(Ticket<?> ticket : entry.getValue()) {
                         fileOutputStream.write((chunkPos.x + "\t" + chunkPos.z + "\t" + ticket.getType() + "\t" + ticket.getTicketLevel() + "\t\n").getBytes(StandardCharsets.UTF_8));
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index cce9e1de4fdc9f8a262fb9955f64f7c43c141dc9..67291813fe9c9489e4680bf071b3cef581eb3744 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -187,7 +187,7 @@ public class ServerChunkCache extends ChunkSource {
             completableFuture = this.getChunkFutureMainThread(i, i2, chunkStatus, flag);
             this.mainThreadProcessor.managedBlock(completableFuture::isDone);
         } else {
-            completableFuture = CompletableFuture.supplyAsync(() -> this.getChunkFutureMainThread(i, i2, chunkStatus, flag), this.mainThreadProcessor).thenCompose((completableFuture) -> completableFuture);
+            completableFuture = CompletableFuture.supplyAsync(() -> this.getChunkFutureMainThread(i, i2, chunkStatus, flag), this.mainThreadProcessor).thenCompose((completableFutureIn) -> completableFutureIn);
         }
 
         return completableFuture;
@@ -497,7 +497,7 @@ public class ServerChunkCache extends ChunkSource {
             super.doRunTask(runnable);
         }
 
-        protected boolean pollTask() {
+        public boolean pollTask() {
             if (ServerChunkCache.this.runDistanceManagerUpdates()) {
                 return true;
             } else {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 13ca10bfd9ab43c883935bd179fa70bf6b739905..7503f62d0366af3f7b42b9857ee3fff17ee0c633 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1324,7 +1324,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 object2IntOpenHashMap.addTo(s, 1);
             }
 
-            return (String)object2IntOpenHashMap.object2IntEntrySet().stream().sorted(Comparator.comparing(Entry::getIntValue).reversed()).limit(5L).map((entry) -> (String)entry.getKey() + ":" + entry.getIntValue()).collect(Collectors.joining(","));
+            return (String)object2IntOpenHashMap.object2IntEntrySet().stream().sorted(Comparator.<Entry<String>, Integer>comparing(Entry::getIntValue).reversed()).limit(5L).map((entry) -> (String)entry.getKey() + ":" + entry.getIntValue()).collect(Collectors.joining(","));
         } catch (Exception var6) {
             return "";
         }
diff --git a/src/main/java/net/minecraft/server/level/Ticket.java b/src/main/java/net/minecraft/server/level/Ticket.java
index e8d64341efcb1f109c88d2ac6043c79b54766425..06deecab338c9cbc67c29e129531fedbd1a62877 100644
--- a/src/main/java/net/minecraft/server/level/Ticket.java
+++ b/src/main/java/net/minecraft/server/level/Ticket.java
@@ -20,7 +20,7 @@ public final class Ticket<T> implements Comparable<Ticket<?>> {
             return i;
         } else {
             int i2 = Integer.compare(System.identityHashCode(this.type), System.identityHashCode(ticket.type));
-            return i2 != 0 ? i2 : this.type.getComparator().compare(this.key, ticket.key);
+            return i2 != 0 ? i2 : this.type.getComparator().compare(this.key, (T) ticket.key);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/level/TickingTracker.java b/src/main/java/net/minecraft/server/level/TickingTracker.java
index b69f662d756fa09c941882f6507dc0e5123c60d7..954f0f717e1e7fff201531f776905029c8470d42 100644
--- a/src/main/java/net/minecraft/server/level/TickingTracker.java
+++ b/src/main/java/net/minecraft/server/level/TickingTracker.java
@@ -65,9 +65,9 @@ public class TickingTracker extends ChunkTracker {
         while(var3.hasNext()) {
             Entry<SortedArraySet<Ticket<?>>> entry = (Entry)var3.next();
 
-            for(Ticket<?> ticket : (SortedArraySet)entry.getValue()) {
+            for(Ticket<?> ticket : entry.getValue()) {
                 if (ticket.getType() == TicketType.PLAYER) {
-                    list.add(Pair.of(ticket, entry.getLongKey()));
+                    list.add(Pair.of((Ticket<ChunkPos>) ticket, entry.getLongKey()));
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/packs/FolderPackResources.java b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
index 361667bfa1e3bb982087407d4e36917ba5bd00ab..c401c8159f6132f0ce5dbd082add557ef1975870 100644
--- a/src/main/java/net/minecraft/server/packs/FolderPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
@@ -4,6 +4,7 @@ import com.google.common.base.CharMatcher;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import java.io.File;
+import java.io.FileFilter;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -67,7 +68,7 @@ public class FolderPackResources extends AbstractPackResources {
     public Set<String> getNamespaces(PackType packType) {
         Set<String> set = Sets.newHashSet();
         File file = new File(this.file, packType.getDirectory());
-        File[] files = file.listFiles(DirectoryFileFilter.DIRECTORY);
+        File[] files = file.listFiles((FileFilter) DirectoryFileFilter.DIRECTORY);
         if (files != null) {
             for(File file2 : files) {
                 String s = getRelativePath(file, file2);
diff --git a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
index 6ba697fbe73f4ccad27173e68ee0f75c6d7a97f0..12d1c09aae03b504105353d6723300d848312f09 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
@@ -23,7 +23,7 @@ public class ProfiledReloadInstance extends SimpleReloadInstance<ProfiledReloadI
             AtomicLong atomicLong2 = new AtomicLong();
             ActiveProfiler activeProfiler = new ActiveProfiler(Util.timeSource, () -> 0, false);
             ActiveProfiler activeProfiler2 = new ActiveProfiler(Util.timeSource, () -> 0, false);
-            CompletableFuture<Void> completableFuture = preparableReloadListener.reload(preparationBarrier, resourceManagerx, activeProfiler, activeProfiler2, (runnable) -> executor2x.execute(() -> {
+            CompletableFuture<Void> completableFutureIn = preparableReloadListener.reload(preparationBarrier, resourceManagerx, activeProfiler, activeProfiler2, (runnable) -> executor2x.execute(() -> {
                     long l = Util.getNanos();
                     runnable.run();
                     atomicLong.addAndGet(Util.getNanos() - l);
@@ -32,7 +32,7 @@ public class ProfiledReloadInstance extends SimpleReloadInstance<ProfiledReloadI
                     runnable.run();
                     atomicLong2.addAndGet(Util.getNanos() - l);
                 }));
-            return completableFuture.thenApplyAsync((void_) -> new ProfiledReloadInstance.State(preparableReloadListener.getName(), activeProfiler.getResults(), activeProfiler2.getResults(), atomicLong, atomicLong2), executor2);
+            return completableFutureIn.thenApplyAsync((void_) -> new ProfiledReloadInstance.State(preparableReloadListener.getName(), activeProfiler.getResults(), activeProfiler2.getResults(), atomicLong, atomicLong2), executor2);
         }, completableFuture);
         this.total.start();
         this.allDone.thenAcceptAsync(this::finish, executor2);
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 13886d78c1c59cd1e6f8832fd34b6bd737bbcd63..6fa1eaeea651ecd74397705600ea620769e8b855 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -319,7 +319,7 @@ public abstract class PlayerList {
             if (entity.hasExactlyOnePlayerPassenger()) {
                 LOGGER.debug("Removing player mount");
                 serverPlayer.stopRiding();
-                entity.getPassengersAndSelf().forEach((entity) -> entity.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER));
+                entity.getPassengersAndSelf().forEach((entityIn) -> entityIn.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER));
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index 28ec0fc2b73519b2dbc44c82f2fe9300015475eb..759ae4c6cd1a216d0b9855a7f1c9b1d5d199a682 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -142,7 +142,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
                     JsonObject jsonObject = GsonHelper.convertToJsonObject(jsonElement, "entry");
                     StoredUserEntry<K> storedUserEntry = this.createEntry(jsonObject);
                     if (storedUserEntry.getUser() != null) {
-                        this.map.put(this.getKeyForUser(storedUserEntry.getUser()), storedUserEntry);
+                        this.map.put(this.getKeyForUser(storedUserEntry.getUser()), (V) storedUserEntry);
                     }
                 }
             } catch (Throwable var8) {
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index 3f18770272eb270cdcbab2296a3b4e8af4a7f471..6628462ad43c850155198db1dddbfa7ebe1cac1f 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -106,13 +106,13 @@ public class ServerStatsCounter extends StatsCounter {
                             String s2 = (String)var7.next();
                             if (compoundTag2.contains(s2, 10)) {
                                 Util.ifElse(Registry.STAT_TYPE.getOptional(new ResourceLocation(s2)), (statType) -> {
-                                    CompoundTag compoundTag2 = compoundTag2.getCompound(s2);
+                                    CompoundTag compoundTag2In = compoundTag2.getCompound(s2);
 
-                                    for(String s2 : compoundTag2.getAllKeys()) {
-                                        if (compoundTag2.contains(s2, 99)) {
-                                            Util.ifElse(this.getStat(statType, s2), (stat) -> this.stats.put(stat, compoundTag2.getInt(s2)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, s2));
+                                    for(String key : compoundTag2In.getAllKeys()) {
+                                        if (compoundTag2In.contains(key, 99)) {
+                                            Util.ifElse(this.getStat(statType, key), (stat) -> this.stats.put(stat, compoundTag2In.getInt(key)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, key));
                                         } else {
-                                            LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", this.file, compoundTag2.get(s2), s2);
+                                            LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", this.file, compoundTag2In.get(key), key);
                                         }
                                     }
 
@@ -175,14 +175,14 @@ public class ServerStatsCounter extends StatsCounter {
             ((JsonObject)map.computeIfAbsent(stat.getType(), (statType) -> new JsonObject())).addProperty(getKey(stat).toString(), entry.getIntValue());
         }
 
-        JsonObject jsonObject = new JsonObject();
+        JsonObject jsonObjectIn = new JsonObject();
 
         for(Entry<StatType<?>, JsonObject> entry2 : map.entrySet()) {
-            jsonObject.add(Registry.STAT_TYPE.getKey((StatType)entry2.getKey()).toString(), (JsonElement)entry2.getValue());
+            jsonObjectIn.add(Registry.STAT_TYPE.getKey((StatType)entry2.getKey()).toString(), (JsonElement)entry2.getValue());
         }
 
         JsonObject jsonObject2 = new JsonObject();
-        jsonObject2.add("stats", jsonObject);
+        jsonObject2.add("stats", jsonObjectIn);
         jsonObject2.addProperty("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
         return jsonObject2.toString();
     }
diff --git a/src/main/java/net/minecraft/tags/Tag.java b/src/main/java/net/minecraft/tags/Tag.java
index 33809739bc13832354d6091a652838be98b0e5f4..11370d6d126996d92dd21c5abd7530a468cad5fa 100644
--- a/src/main/java/net/minecraft/tags/Tag.java
+++ b/src/main/java/net/minecraft/tags/Tag.java
@@ -23,7 +23,7 @@ import net.minecraft.util.GsonHelper;
 
 public interface Tag<T> {
     static <T> Codec<Tag<T>> codec(Supplier<TagCollection<T>> supplier) {
-        return ResourceLocation.CODEC.flatXmap((resourceLocation) -> Optional.ofNullable(((TagCollection)supplier.get()).getTag(resourceLocation)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + resourceLocation)), (tag) -> Optional.ofNullable(((TagCollection)supplier.get()).getId(tag)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + tag)));
+        return ResourceLocation.CODEC.flatXmap((resourceLocation) -> Optional.ofNullable((supplier.get()).getTag(resourceLocation)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + resourceLocation)), (tag) -> Optional.ofNullable(((TagCollection)supplier.get()).getId(tag)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + tag)));
     }
 
     boolean contains(T var1);
diff --git a/src/main/java/net/minecraft/tags/TagContainer.java b/src/main/java/net/minecraft/tags/TagContainer.java
index 1383e28f4f245d89e817361ca6ca928ae90c6ff7..441c52faa46617f0021a31664a7e0a4c0163654c 100644
--- a/src/main/java/net/minecraft/tags/TagContainer.java
+++ b/src/main/java/net/minecraft/tags/TagContainer.java
@@ -36,11 +36,11 @@ public class TagContainer {
     public <T, E extends Exception> Tag<T> getTagOrThrow(ResourceKey<? extends Registry<T>> resourceKey, ResourceLocation resourceLocation, Function<ResourceLocation, E> function) throws E {
         TagCollection<T> tagCollection = this.get(resourceKey);
         if (tagCollection == null) {
-            throw (Exception)function.apply(resourceLocation);
+            throw function.apply(resourceLocation);
         } else {
             Tag<T> tag = tagCollection.getTag(resourceLocation);
             if (tag == null) {
-                throw (Exception)function.apply(resourceLocation);
+                throw function.apply(resourceLocation);
             } else {
                 return tag;
             }
@@ -50,11 +50,11 @@ public class TagContainer {
     public <T, E extends Exception> ResourceLocation getIdOrThrow(ResourceKey<? extends Registry<T>> resourceKey, Tag<T> tag, Supplier<E> supplier) throws E {
         TagCollection<T> tagCollection = this.get(resourceKey);
         if (tagCollection == null) {
-            throw (Exception)supplier.get();
+            throw supplier.get();
         } else {
             ResourceLocation resourceLocation = tagCollection.getId(tag);
             if (resourceLocation == null) {
-                throw (Exception)supplier.get();
+                throw supplier.get();
             } else {
                 return resourceLocation;
             }
@@ -66,7 +66,7 @@ public class TagContainer {
     }
 
     private static <T> void acceptCap(TagContainer.CollectionConsumer collectionConsumer, ResourceKey<? extends Registry<?>> resourceKey, TagCollection<?> tagCollection) {
-        collectionConsumer.accept(resourceKey, tagCollection);
+        collectionConsumer.accept((ResourceKey) resourceKey, tagCollection);
     }
 
     public void bindToGlobal() {
diff --git a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
index c337a6dc8cc16260f2038439027065ad77839128..487da6925055ec72c437165a15053e8d4fbf6939 100644
--- a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
+++ b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
@@ -57,7 +57,7 @@ public class ClassInstanceMultiMap<T> extends AbstractCollection<T> {
             throw new IllegalArgumentException("Don't know how to search for " + clazz);
         } else {
             List<? extends T> list = this.byClass.computeIfAbsent(clazz, (clazzx) -> this.allInstances.stream().filter(clazzx::isInstance).collect(Collectors.toList()));
-            return Collections.unmodifiableCollection(list);
+            return (Collection<S>) Collections.unmodifiableCollection(list);
         }
     }
 
diff --git a/src/main/java/net/minecraft/util/CubicSpline.java b/src/main/java/net/minecraft/util/CubicSpline.java
index f965effff8b95354b4e535bf6b8bed70907ef403..53d3e20e6fc27fbc685f28f457e1c3f4e6e6be09 100644
--- a/src/main/java/net/minecraft/util/CubicSpline.java
+++ b/src/main/java/net/minecraft/util/CubicSpline.java
@@ -18,30 +18,24 @@ public interface CubicSpline<C> extends ToFloatFunction<C> {
     @VisibleForDebug
     String parityString();
 
+    record Point<C>(float location, CubicSpline<C> value, float derivative) {
+    }
+
     static <C> Codec<CubicSpline<C>> codec(Codec<ToFloatFunction<C>> codec) {
         MutableObject<Codec<CubicSpline<C>>> mutableObject = new MutableObject();
         Codec<Point<C>> codec2 = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("location").forGetter(Point::location), ExtraCodecs.lazyInitializedCodec(mutableObject::getValue).fieldOf("value").forGetter(Point::value), Codec.FLOAT.fieldOf("derivative").forGetter(Point::derivative)).apply(instance, (f, cubicSpline, f2) -> {
-                record Point(float location, CubicSpline<C> value, float derivative, ToFloatFunction<C> coordinate) {
-
-                    Point(float f, CubicSpline<C> cubicSpline, float f2) {
-                        this.location = f;
-                        this.value = cubicSpline;
-                        this.derivative = f2;
-                    }
-                }
-
                 return new Point(f, cubicSpline, f2);
             }));
-        Codec<CubicSpline.Multipoint<C>> codec3 = RecordCodecBuilder.create((instance) -> instance.group(codec.fieldOf("coordinate").forGetter(CubicSpline.Multipoint::coordinate), codec2.listOf().fieldOf("points").forGetter((multipoint) -> IntStream.range(0, multipoint.locations.length).mapToObj((i) -> new Point(multipoint.locations()[i], (CubicSpline)multipoint.values().get(i), multipoint.derivatives()[i])).toList())).apply(instance, (toFloatFunction, list) -> {
+        Codec<CubicSpline.Multipoint<C>> codec3 = RecordCodecBuilder.create((instance) -> instance.group(codec.fieldOf("coordinate").forGetter(o -> o.coordinate()), codec2.listOf().fieldOf("points").forGetter((multipoint) -> (List) IntStream.range(0, multipoint.locations.length).mapToObj((i) -> new Point(multipoint.locations()[i], multipoint.values().get(i), multipoint.derivatives()[i])).toList())).apply(instance, (toFloatFunction, list) -> {
                 float[] floats = new float[list.size()];
                 com.google.common.collect.ImmutableList.Builder<CubicSpline<C>> builder = ImmutableList.builder();
                 float[] floats2 = new float[list.size()];
 
                 for(int i = 0; i < list.size(); ++i) {
-                    Point<C> 1Point = (Point)list.get(i);
-                    floats[i] = 1Point.location();
-                    builder.add(1Point.value());
-                    floats2[i] = 1Point.derivative();
+                    Point<C> point = (Point)list.get(i);
+                    floats[i] = point.location();
+                    builder.add(point.value());
+                    floats2[i] = point.derivative();
                 }
 
                 return new CubicSpline.Multipoint(toFloatFunction, floats, builder.build(), floats2);
@@ -72,6 +66,7 @@ public interface CubicSpline<C> extends ToFloatFunction<C> {
         private final FloatList locations = new FloatArrayList();
         private final List<CubicSpline<C>> values = Lists.newArrayList();
         private final FloatList derivatives = new FloatArrayList();
+        private final ToFloatFunction<C> coordinate;
 
         protected Builder(ToFloatFunction<C> toFloatFunction) {
             this.coordinate = toFloatFunction;
@@ -103,11 +98,6 @@ public interface CubicSpline<C> extends ToFloatFunction<C> {
 
     @VisibleForDebug
     public static record Constant<C>(float value) implements CubicSpline<C> {
-
-        public Constant(float f) {
-            this.value = f;
-        }
-
         public float apply(C object) {
             return this.value;
         }
@@ -118,9 +108,10 @@ public interface CubicSpline<C> extends ToFloatFunction<C> {
     }
 
     @VisibleForDebug
-    public static record Multipoint(ToFloatFunction<C> coordinate, float[] locations, List<CubicSpline<C>> values, float[] derivatives) implements CubicSpline { else {
-                throw new IllegalArgumentException("All lengths must be equal, got: " + floats.length + " " + list.size() + " " + floats2.length);
-            }
+    record Multipoint<C>(ToFloatFunction<C> coordinate, float[] locations, List<CubicSpline<C>> values, float[] derivatives) implements CubicSpline<C> {
+        public Multipoint {
+            if (locations.length != values.size() || locations.length != derivatives.length)
+                throw new IllegalArgumentException("All lengths must be equal, got: " + locations.length + " " + values.size() + " " + derivatives.length);
         }
 
         public float apply(C object) {
diff --git a/src/main/java/net/minecraft/util/ExtraCodecs.java b/src/main/java/net/minecraft/util/ExtraCodecs.java
index c4ade41ebee3b290775c6fcaace6e5cdee4397eb..65ad7341e1c2fa711d2d2f4b39083608aa7dc843 100644
--- a/src/main/java/net/minecraft/util/ExtraCodecs.java
+++ b/src/main/java/net/minecraft/util/ExtraCodecs.java
@@ -35,8 +35,8 @@ public class ExtraCodecs {
                 P object2 = (P)listx.get(1);
                 return biFunction.apply(object, object2);
             }), (object) -> ImmutableList.of(function.apply(object), function2.apply(object)));
-        Codec<I> codec3 = RecordCodecBuilder.create((instance) -> instance.group(codec.fieldOf(s).forGetter(Pair::getFirst), codec.fieldOf(s2).forGetter(Pair::getSecond)).apply(instance, Pair::of)).comapFlatMap((pair) -> biFunction.apply(pair.getFirst(), pair.getSecond()), (object) -> Pair.of(function.apply(object), function2.apply(object)));
-        Codec<I> codec4 = (new ExtraCodecs.EitherCodec(codec2, codec3)).xmap((either) -> either.map((object) -> object, (object) -> object), Either::left);
+        Codec<I> codec3 = RecordCodecBuilder.<Pair<P, P>>create((instance) -> instance.group(codec.fieldOf(s).forGetter(Pair<P, P>::getFirst), codec.fieldOf(s2).forGetter(Pair<P, P>::getSecond)).apply(instance, Pair::of)).comapFlatMap((pair) -> biFunction.apply(pair.getFirst(), pair.getSecond()), (object) -> Pair.of(function.apply(object), function2.apply(object)));
+        Codec<I> codec4 = (new ExtraCodecs.EitherCodec<>(codec2, codec3)).xmap((either) -> either.map((object) -> object, (object) -> object), Either::left);
         return Codec.either(codec, codec4).comapFlatMap((either) -> either.map((object) -> biFunction.apply(object, object), DataResult::success), (object) -> {
             P object2 = (P)function.apply(object);
             P object3 = (P)function2.apply(object);
@@ -49,7 +49,7 @@ public class ExtraCodecs {
             public <T> DataResult<Pair<A, T>> apply(DynamicOps<T> dynamicOps, T objectx, DataResult<Pair<A, T>> dataResult) {
                 MutableObject<String> mutableObject = new MutableObject();
                 Optional<Pair<A, T>> optional = dataResult.resultOrPartial(mutableObject::setValue);
-                return optional.isPresent() ? dataResult : DataResult.error("(" + (String)mutableObject.getValue() + " -> using default)", Pair.of(object, object));
+                return optional.isPresent() ? dataResult : DataResult.error("(" + (String)mutableObject.getValue() + " -> using default)", Pair.of(object, (T) object));
             }
 
             public <T> DataResult<T> coApply(DynamicOps<T> dynamicOps, A objectx, DataResult<T> dataResult) {
@@ -126,13 +126,7 @@ public class ExtraCodecs {
         return new ExtraCodecs.LazyInitializedCodec(supplier);
     }
 
-    static final class EitherCodec<F, S> implements Codec<Either<F, S>> {
-
-        public EitherCodec(Codec<F> codec, Codec<S> codec2) {
-            this.first = codec;
-            this.second = codec2;
-        }
-
+    static record EitherCodec<F, S>(Codec<F> first, Codec<S> second) implements Codec<Either<F, S>> {
         public <T> DataResult<Pair<Either<F, S>, T>> decode(DynamicOps<T> dynamicOps, T object) {
             DataResult<Pair<Either<F, S>, T>> dataResult = this.first.decode(dynamicOps, object).map((pair) -> pair.mapFirst(Either::left));
             if (!dataResult.error().isPresent()) {
@@ -167,11 +161,10 @@ public class ExtraCodecs {
         }
     }
 
-    static record LazyInitializedCodec(Supplier<Codec<A>> delegate, Codec<F> first, Codec<S> second) implements Codec {
+    static record LazyInitializedCodec<A>(Supplier<Codec<A>> delegate) implements Codec<A> {
 
-        LazyInitializedCodec(Supplier<Codec<A>> supplier) {
-            Supplier<Codec<A>> var2 = Suppliers.memoize(supplier::get);
-            this.delegate = var2;
+        LazyInitializedCodec(Supplier<Codec<A>> delegate) {
+            this.delegate = Suppliers.memoize(delegate::get);
         }
 
         public <T> DataResult<Pair<A, T>> decode(DynamicOps<T> dynamicOps, T object) {
@@ -183,13 +176,7 @@ public class ExtraCodecs {
         }
     }
 
-    static final class XorCodec<F, S> implements Codec<Either<F, S>> {
-
-        public XorCodec(Codec<F> codec, Codec<S> codec2) {
-            this.first = codec;
-            this.second = codec2;
-        }
-
+    static record XorCodec<F, S>(Codec<F> first, Codec<S> second) implements Codec<Either<F, S>> {
         public <T> DataResult<Pair<Either<F, S>, T>> decode(DynamicOps<T> dynamicOps, T object) {
             DataResult<Pair<Either<F, S>, T>> dataResult = this.first.decode(dynamicOps, object).map((pair) -> pair.mapFirst(Either::left));
             DataResult<Pair<Either<F, S>, T>> dataResult2 = this.second.decode(dynamicOps, object).map((pair) -> pair.mapFirst(Either::right));
diff --git a/src/main/java/net/minecraft/util/InclusiveRange.java b/src/main/java/net/minecraft/util/InclusiveRange.java
index 72fd17a88a2f97b94676d6be8368e081df57b7ed..e426bb2b73dc40e00e22dba093344e5ce9d25cdc 100644
--- a/src/main/java/net/minecraft/util/InclusiveRange.java
+++ b/src/main/java/net/minecraft/util/InclusiveRange.java
@@ -4,12 +4,8 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
 import java.util.function.Function;
 
-public record InclusiveRange(T minInclusive, T maxInclusive) {
-    public static final Codec<InclusiveRange<Integer>> INT = codec(Codec.INT); else {
-            this.minInclusive = comparable;
-            this.maxInclusive = comparable2;
-        }
-    }
+public record InclusiveRange<T extends Comparable<T>>(T minInclusive, T maxInclusive) {
+    public static final Codec<InclusiveRange<Integer>> INT = codec(Codec.INT);
 
     public static <T extends Comparable<T>> Codec<InclusiveRange<T>> codec(Codec<T> codec) {
         return ExtraCodecs.intervalCodec(codec, "min_inclusive", "max_inclusive", InclusiveRange::create, InclusiveRange::minInclusive, InclusiveRange::maxInclusive);
diff --git a/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java b/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
index e3b27a2bc10f1127203ff5874eed5582dc2459ac..69767559a40cee9bd01131d5a041e2d08eb52568 100644
--- a/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
+++ b/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
@@ -16,7 +16,7 @@ import javax.annotation.Nullable;
 public class LowerCaseEnumTypeAdapterFactory implements TypeAdapterFactory {
     @Nullable
     public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
-        Class<T> clazz = typeToken.getRawType();
+        Class<T> clazz = (Class<T>) typeToken.getRawType();
         if (!clazz.isEnum()) {
             return null;
         } else {
diff --git a/src/main/java/net/minecraft/util/ModCheck.java b/src/main/java/net/minecraft/util/ModCheck.java
index ccee3a7bf483c370863ead9c9fade8ea66158459..ba16f89a3925b5460153a99893c36a5f72dcf0dd 100644
--- a/src/main/java/net/minecraft/util/ModCheck.java
+++ b/src/main/java/net/minecraft/util/ModCheck.java
@@ -3,13 +3,7 @@ package net.minecraft.util;
 import java.util.function.Supplier;
 import org.apache.commons.lang3.ObjectUtils;
 
-public record ModCheck(ModCheck.Confidence confidence, String description, String description, boolean shouldReportAsModified) {
-
-    public ModCheck(ModCheck.Confidence confidence, String s) {
-        this.confidence = confidence;
-        this.description = s;
-    }
-
+public record ModCheck(ModCheck.Confidence confidence, String description) {
     public static ModCheck identify(String s, Supplier<String> supplier, String s2, Class<?> clazz) {
         String s3 = (String)supplier.get();
         if (!s.equals(s3)) {
@@ -27,11 +21,18 @@ public record ModCheck(ModCheck.Confidence confidence, String description, Strin
         return this.confidence.description + " " + this.description;
     }
 
+    public boolean shouldReportAsModified() {
+        return confidence.shouldReportAsModified;
+    }
+
     public static enum Confidence {
         PROBABLY_NOT("Probably not.", false),
         VERY_LIKELY("Very likely;", true),
         DEFINITELY("Definitely;", true);
 
+        String description;
+        boolean shouldReportAsModified;
+
         private Confidence(String s, boolean flag) {
             this.description = s;
             this.shouldReportAsModified = flag;
diff --git a/src/main/java/net/minecraft/util/StringRepresentable.java b/src/main/java/net/minecraft/util/StringRepresentable.java
index 9f1bb807bad4032f0f37bf9bdd79209b88b8789b..c925805d1dea978832b60ae6ce86c2ded1b56d06 100644
--- a/src/main/java/net/minecraft/util/StringRepresentable.java
+++ b/src/main/java/net/minecraft/util/StringRepresentable.java
@@ -18,7 +18,7 @@ public interface StringRepresentable {
     String getSerializedName();
 
     static <E extends Enum<E> & StringRepresentable> Codec<E> fromEnum(Supplier<E[]> supplier, Function<? super String, ? extends E> function) {
-        E[] enums = (Enum[])supplier.get();
+        E[] enums = supplier.get();
         return fromStringResolver((object) -> ((Enum)object).ordinal(), (i) -> enums[i], function);
     }
 
@@ -29,7 +29,7 @@ public interface StringRepresentable {
             }
 
             public <T> DataResult<Pair<E, T>> decode(DynamicOps<T> dynamicOps, T object) {
-                return dynamicOps.compressMaps() ? dynamicOps.getNumberValue(object).flatMap((number) -> Optional.ofNullable((StringRepresentable)intFunction.apply(number.intValue())).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element id: " + number))).map((stringRepresentable) -> Pair.of(stringRepresentable, dynamicOps.empty())) : dynamicOps.getStringValue(object).flatMap((s) -> Optional.ofNullable((StringRepresentable)function.apply(s)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element name: " + s))).map((stringRepresentable) -> Pair.of(stringRepresentable, dynamicOps.empty()));
+                return dynamicOps.compressMaps() ? dynamicOps.getNumberValue(object).flatMap((number) -> Optional.ofNullable((StringRepresentable)intFunction.apply(number.intValue())).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element id: " + number))).map((stringRepresentable) -> Pair.of((E) stringRepresentable, dynamicOps.empty())) : dynamicOps.getStringValue(object).flatMap((s) -> Optional.ofNullable((StringRepresentable)function.apply(s)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element name: " + s))).map((stringRepresentable) -> Pair.of((E) stringRepresentable, dynamicOps.empty()));
             }
 
             public String toString() {
diff --git a/src/main/java/net/minecraft/util/datafix/DataFixers.java b/src/main/java/net/minecraft/util/datafix/DataFixers.java
index cb4ccfe39437b6ac658d57dc35a03b1b83a32b61..cff678f5f5f57649fb75f368ac74b9db3a7c4c6a 100644
--- a/src/main/java/net/minecraft/util/datafix/DataFixers.java
+++ b/src/main/java/net/minecraft/util/datafix/DataFixers.java
@@ -562,17 +562,17 @@ public class DataFixers {
         dataFixerBuilder.addFixer(new AddNewChoices(schema131, "Added Glow Squid", References.ENTITY));
         dataFixerBuilder.addFixer(new AddNewChoices(schema131, "Added Glow Item Frame", References.ENTITY));
         Schema schema132 = dataFixerBuilder.addSchema(2690, SAME_NAMESPACED);
-        ImmutableMap<String, String> immutableMap = ImmutableMap.builder().put("minecraft:weathered_copper_block", "minecraft:oxidized_copper_block").put("minecraft:semi_weathered_copper_block", "minecraft:weathered_copper_block").put("minecraft:lightly_weathered_copper_block", "minecraft:exposed_copper_block").put("minecraft:weathered_cut_copper", "minecraft:oxidized_cut_copper").put("minecraft:semi_weathered_cut_copper", "minecraft:weathered_cut_copper").put("minecraft:lightly_weathered_cut_copper", "minecraft:exposed_cut_copper").put("minecraft:weathered_cut_copper_stairs", "minecraft:oxidized_cut_copper_stairs").put("minecraft:semi_weathered_cut_copper_stairs", "minecraft:weathered_cut_copper_stairs").put("minecraft:lightly_weathered_cut_copper_stairs", "minecraft:exposed_cut_copper_stairs").put("minecraft:weathered_cut_copper_slab", "minecraft:oxidized_cut_copper_slab").put("minecraft:semi_weathered_cut_copper_slab", "minecraft:weathered_cut_copper_slab").put("minecraft:lightly_weathered_cut_copper_slab", "minecraft:exposed_cut_copper_slab").put("minecraft:waxed_semi_weathered_copper", "minecraft:waxed_weathered_copper").put("minecraft:waxed_lightly_weathered_copper", "minecraft:waxed_exposed_copper").put("minecraft:waxed_semi_weathered_cut_copper", "minecraft:waxed_weathered_cut_copper").put("minecraft:waxed_lightly_weathered_cut_copper", "minecraft:waxed_exposed_cut_copper").put("minecraft:waxed_semi_weathered_cut_copper_stairs", "minecraft:waxed_weathered_cut_copper_stairs").put("minecraft:waxed_lightly_weathered_cut_copper_stairs", "minecraft:waxed_exposed_cut_copper_stairs").put("minecraft:waxed_semi_weathered_cut_copper_slab", "minecraft:waxed_weathered_cut_copper_slab").put("minecraft:waxed_lightly_weathered_cut_copper_slab", "minecraft:waxed_exposed_cut_copper_slab").build();
+        ImmutableMap<String, String> immutableMap = ImmutableMap.<String, String>builder().put("minecraft:weathered_copper_block", "minecraft:oxidized_copper_block").put("minecraft:semi_weathered_copper_block", "minecraft:weathered_copper_block").put("minecraft:lightly_weathered_copper_block", "minecraft:exposed_copper_block").put("minecraft:weathered_cut_copper", "minecraft:oxidized_cut_copper").put("minecraft:semi_weathered_cut_copper", "minecraft:weathered_cut_copper").put("minecraft:lightly_weathered_cut_copper", "minecraft:exposed_cut_copper").put("minecraft:weathered_cut_copper_stairs", "minecraft:oxidized_cut_copper_stairs").put("minecraft:semi_weathered_cut_copper_stairs", "minecraft:weathered_cut_copper_stairs").put("minecraft:lightly_weathered_cut_copper_stairs", "minecraft:exposed_cut_copper_stairs").put("minecraft:weathered_cut_copper_slab", "minecraft:oxidized_cut_copper_slab").put("minecraft:semi_weathered_cut_copper_slab", "minecraft:weathered_cut_copper_slab").put("minecraft:lightly_weathered_cut_copper_slab", "minecraft:exposed_cut_copper_slab").put("minecraft:waxed_semi_weathered_copper", "minecraft:waxed_weathered_copper").put("minecraft:waxed_lightly_weathered_copper", "minecraft:waxed_exposed_copper").put("minecraft:waxed_semi_weathered_cut_copper", "minecraft:waxed_weathered_cut_copper").put("minecraft:waxed_lightly_weathered_cut_copper", "minecraft:waxed_exposed_cut_copper").put("minecraft:waxed_semi_weathered_cut_copper_stairs", "minecraft:waxed_weathered_cut_copper_stairs").put("minecraft:waxed_lightly_weathered_cut_copper_stairs", "minecraft:waxed_exposed_cut_copper_stairs").put("minecraft:waxed_semi_weathered_cut_copper_slab", "minecraft:waxed_weathered_cut_copper_slab").put("minecraft:waxed_lightly_weathered_cut_copper_slab", "minecraft:waxed_exposed_cut_copper_slab").build();
         dataFixerBuilder.addFixer(ItemRenameFix.create(schema132, "Renamed copper block items to new oxidized terms", createRenamer(immutableMap)));
         dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema132, "Renamed copper blocks to new oxidized terms", createRenamer(immutableMap)));
         Schema schema133 = dataFixerBuilder.addSchema(2691, SAME_NAMESPACED);
-        ImmutableMap<String, String> immutableMap2 = ImmutableMap.builder().put("minecraft:waxed_copper", "minecraft:waxed_copper_block").put("minecraft:oxidized_copper_block", "minecraft:oxidized_copper").put("minecraft:weathered_copper_block", "minecraft:weathered_copper").put("minecraft:exposed_copper_block", "minecraft:exposed_copper").build();
+        ImmutableMap<String, String> immutableMap2 = ImmutableMap.<String, String>builder().put("minecraft:waxed_copper", "minecraft:waxed_copper_block").put("minecraft:oxidized_copper_block", "minecraft:oxidized_copper").put("minecraft:weathered_copper_block", "minecraft:weathered_copper").put("minecraft:exposed_copper_block", "minecraft:exposed_copper").build();
         dataFixerBuilder.addFixer(ItemRenameFix.create(schema133, "Rename copper item suffixes", createRenamer(immutableMap2)));
         dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema133, "Rename copper blocks suffixes", createRenamer(immutableMap2)));
         Schema schema134 = dataFixerBuilder.addSchema(2693, SAME_NAMESPACED);
         dataFixerBuilder.addFixer(new AddFlagIfNotPresentFix(schema134, References.WORLD_GEN_SETTINGS, "has_increased_height_already", false));
         Schema schema135 = dataFixerBuilder.addSchema(2696, SAME_NAMESPACED);
-        ImmutableMap<String, String> immutableMap3 = ImmutableMap.builder().put("minecraft:grimstone", "minecraft:deepslate").put("minecraft:grimstone_slab", "minecraft:cobbled_deepslate_slab").put("minecraft:grimstone_stairs", "minecraft:cobbled_deepslate_stairs").put("minecraft:grimstone_wall", "minecraft:cobbled_deepslate_wall").put("minecraft:polished_grimstone", "minecraft:polished_deepslate").put("minecraft:polished_grimstone_slab", "minecraft:polished_deepslate_slab").put("minecraft:polished_grimstone_stairs", "minecraft:polished_deepslate_stairs").put("minecraft:polished_grimstone_wall", "minecraft:polished_deepslate_wall").put("minecraft:grimstone_tiles", "minecraft:deepslate_tiles").put("minecraft:grimstone_tile_slab", "minecraft:deepslate_tile_slab").put("minecraft:grimstone_tile_stairs", "minecraft:deepslate_tile_stairs").put("minecraft:grimstone_tile_wall", "minecraft:deepslate_tile_wall").put("minecraft:grimstone_bricks", "minecraft:deepslate_bricks").put("minecraft:grimstone_brick_slab", "minecraft:deepslate_brick_slab").put("minecraft:grimstone_brick_stairs", "minecraft:deepslate_brick_stairs").put("minecraft:grimstone_brick_wall", "minecraft:deepslate_brick_wall").put("minecraft:chiseled_grimstone", "minecraft:chiseled_deepslate").build();
+        ImmutableMap<String, String> immutableMap3 = ImmutableMap.<String, String>builder().put("minecraft:grimstone", "minecraft:deepslate").put("minecraft:grimstone_slab", "minecraft:cobbled_deepslate_slab").put("minecraft:grimstone_stairs", "minecraft:cobbled_deepslate_stairs").put("minecraft:grimstone_wall", "minecraft:cobbled_deepslate_wall").put("minecraft:polished_grimstone", "minecraft:polished_deepslate").put("minecraft:polished_grimstone_slab", "minecraft:polished_deepslate_slab").put("minecraft:polished_grimstone_stairs", "minecraft:polished_deepslate_stairs").put("minecraft:polished_grimstone_wall", "minecraft:polished_deepslate_wall").put("minecraft:grimstone_tiles", "minecraft:deepslate_tiles").put("minecraft:grimstone_tile_slab", "minecraft:deepslate_tile_slab").put("minecraft:grimstone_tile_stairs", "minecraft:deepslate_tile_stairs").put("minecraft:grimstone_tile_wall", "minecraft:deepslate_tile_wall").put("minecraft:grimstone_bricks", "minecraft:deepslate_bricks").put("minecraft:grimstone_brick_slab", "minecraft:deepslate_brick_slab").put("minecraft:grimstone_brick_stairs", "minecraft:deepslate_brick_stairs").put("minecraft:grimstone_brick_wall", "minecraft:deepslate_brick_wall").put("minecraft:chiseled_grimstone", "minecraft:chiseled_deepslate").build();
         dataFixerBuilder.addFixer(ItemRenameFix.create(schema135, "Renamed grimstone block items to deepslate", createRenamer(immutableMap3)));
         dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema135, "Renamed grimstone blocks to deepslate", createRenamer(immutableMap3)));
         Schema schema136 = dataFixerBuilder.addSchema(2700, SAME_NAMESPACED);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
index 6e7c7aaea9cf33ef280f2bca4480cf36ae940ae8..23f0ed04bdb9bf679fa525f7be8c93708071d318 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
@@ -45,10 +45,10 @@ public abstract class AbstractUUIDFix extends DataFix {
 
     protected static Optional<Dynamic<?>> createUUIDFromString(Dynamic<?> dynamic, String s) {
         return dynamic.get(s).result().flatMap((dynamic2) -> {
-            String s = dynamic2.asString((String)null);
-            if (s != null) {
+            String str = dynamic2.asString((String)null);
+            if (str != null) {
                 try {
-                    UUID uuid = UUID.fromString(s);
+                    UUID uuid = UUID.fromString(str);
                     return createUUIDTag(dynamic, uuid.getMostSignificantBits(), uuid.getLeastSignificantBits());
                 } catch (IllegalArgumentException var4) {
                 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java b/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
index 3ab0439256147535debf786cbe8ee81ccc5015c8..c97af610debc491cb5da67734b752f5a446fe36f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
@@ -27,10 +27,10 @@ public class AddNewChoices extends DataFix {
             throw new IllegalStateException("Could not inject: key type is not the same");
         } else {
             return this.fixTypeEverywhere(s, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
-                    if (!taggedChoiceType2.hasType(pair.getFirst())) {
+                    if (!((TaggedChoiceType) taggedChoiceType2).hasType(pair.getFirst())) {
                         throw new IllegalArgumentException(String.format("Unknown type %s in %s ", pair.getFirst(), this.type));
                     } else {
-                        return pair;
+                        return (com.mojang.datafixers.util.Pair) pair;
                     }
                 });
         }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
index 168660cdeb3d1bff72d2ff36d3a9f09ec2839400..e583ad6e2a14e268a5f9b14ac757145033891872 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
@@ -5,7 +5,7 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class AdvancementsFix extends AdvancementsRenameFix {
-    private static final Map<String, String> RENAMES = ImmutableMap.builder().put("minecraft:recipes/brewing/speckled_melon", "minecraft:recipes/brewing/glistering_melon_slice").put("minecraft:recipes/building_blocks/black_stained_hardened_clay", "minecraft:recipes/building_blocks/black_terracotta").put("minecraft:recipes/building_blocks/blue_stained_hardened_clay", "minecraft:recipes/building_blocks/blue_terracotta").put("minecraft:recipes/building_blocks/brown_stained_hardened_clay", "minecraft:recipes/building_blocks/brown_terracotta").put("minecraft:recipes/building_blocks/cyan_stained_hardened_clay", "minecraft:recipes/building_blocks/cyan_terracotta").put("minecraft:recipes/building_blocks/gray_stained_hardened_clay", "minecraft:recipes/building_blocks/gray_terracotta").put("minecraft:recipes/building_blocks/green_stained_hardened_clay", "minecraft:recipes/building_blocks/green_terracotta").put("minecraft:recipes/building_blocks/light_blue_stained_hardened_clay", "minecraft:recipes/building_blocks/light_blue_terracotta").put("minecraft:recipes/building_blocks/light_gray_stained_hardened_clay", "minecraft:recipes/building_blocks/light_gray_terracotta").put("minecraft:recipes/building_blocks/lime_stained_hardened_clay", "minecraft:recipes/building_blocks/lime_terracotta").put("minecraft:recipes/building_blocks/magenta_stained_hardened_clay", "minecraft:recipes/building_blocks/magenta_terracotta").put("minecraft:recipes/building_blocks/orange_stained_hardened_clay", "minecraft:recipes/building_blocks/orange_terracotta").put("minecraft:recipes/building_blocks/pink_stained_hardened_clay", "minecraft:recipes/building_blocks/pink_terracotta").put("minecraft:recipes/building_blocks/purple_stained_hardened_clay", "minecraft:recipes/building_blocks/purple_terracotta").put("minecraft:recipes/building_blocks/red_stained_hardened_clay", "minecraft:recipes/building_blocks/red_terracotta").put("minecraft:recipes/building_blocks/white_stained_hardened_clay", "minecraft:recipes/building_blocks/white_terracotta").put("minecraft:recipes/building_blocks/yellow_stained_hardened_clay", "minecraft:recipes/building_blocks/yellow_terracotta").put("minecraft:recipes/building_blocks/acacia_wooden_slab", "minecraft:recipes/building_blocks/acacia_slab").put("minecraft:recipes/building_blocks/birch_wooden_slab", "minecraft:recipes/building_blocks/birch_slab").put("minecraft:recipes/building_blocks/dark_oak_wooden_slab", "minecraft:recipes/building_blocks/dark_oak_slab").put("minecraft:recipes/building_blocks/jungle_wooden_slab", "minecraft:recipes/building_blocks/jungle_slab").put("minecraft:recipes/building_blocks/oak_wooden_slab", "minecraft:recipes/building_blocks/oak_slab").put("minecraft:recipes/building_blocks/spruce_wooden_slab", "minecraft:recipes/building_blocks/spruce_slab").put("minecraft:recipes/building_blocks/brick_block", "minecraft:recipes/building_blocks/bricks").put("minecraft:recipes/building_blocks/chiseled_stonebrick", "minecraft:recipes/building_blocks/chiseled_stone_bricks").put("minecraft:recipes/building_blocks/end_bricks", "minecraft:recipes/building_blocks/end_stone_bricks").put("minecraft:recipes/building_blocks/lit_pumpkin", "minecraft:recipes/building_blocks/jack_o_lantern").put("minecraft:recipes/building_blocks/magma", "minecraft:recipes/building_blocks/magma_block").put("minecraft:recipes/building_blocks/melon_block", "minecraft:recipes/building_blocks/melon").put("minecraft:recipes/building_blocks/mossy_stonebrick", "minecraft:recipes/building_blocks/mossy_stone_bricks").put("minecraft:recipes/building_blocks/nether_brick", "minecraft:recipes/building_blocks/nether_bricks").put("minecraft:recipes/building_blocks/pillar_quartz_block", "minecraft:recipes/building_blocks/quartz_pillar").put("minecraft:recipes/building_blocks/red_nether_brick", "minecraft:recipes/building_blocks/red_nether_bricks").put("minecraft:recipes/building_blocks/snow", "minecraft:recipes/building_blocks/snow_block").put("minecraft:recipes/building_blocks/smooth_red_sandstone", "minecraft:recipes/building_blocks/cut_red_sandstone").put("minecraft:recipes/building_blocks/smooth_sandstone", "minecraft:recipes/building_blocks/cut_sandstone").put("minecraft:recipes/building_blocks/stonebrick", "minecraft:recipes/building_blocks/stone_bricks").put("minecraft:recipes/building_blocks/stone_stairs", "minecraft:recipes/building_blocks/cobblestone_stairs").put("minecraft:recipes/building_blocks/string_to_wool", "minecraft:recipes/building_blocks/white_wool_from_string").put("minecraft:recipes/decorations/fence", "minecraft:recipes/decorations/oak_fence").put("minecraft:recipes/decorations/purple_shulker_box", "minecraft:recipes/decorations/shulker_box").put("minecraft:recipes/decorations/slime", "minecraft:recipes/decorations/slime_block").put("minecraft:recipes/decorations/snow_layer", "minecraft:recipes/decorations/snow").put("minecraft:recipes/misc/bone_meal_from_block", "minecraft:recipes/misc/bone_meal_from_bone_block").put("minecraft:recipes/misc/bone_meal_from_bone", "minecraft:recipes/misc/bone_meal").put("minecraft:recipes/misc/gold_ingot_from_block", "minecraft:recipes/misc/gold_ingot_from_gold_block").put("minecraft:recipes/misc/iron_ingot_from_block", "minecraft:recipes/misc/iron_ingot_from_iron_block").put("minecraft:recipes/redstone/fence_gate", "minecraft:recipes/redstone/oak_fence_gate").put("minecraft:recipes/redstone/noteblock", "minecraft:recipes/redstone/note_block").put("minecraft:recipes/redstone/trapdoor", "minecraft:recipes/redstone/oak_trapdoor").put("minecraft:recipes/redstone/wooden_button", "minecraft:recipes/redstone/oak_button").put("minecraft:recipes/redstone/wooden_door", "minecraft:recipes/redstone/oak_door").put("minecraft:recipes/redstone/wooden_pressure_plate", "minecraft:recipes/redstone/oak_pressure_plate").put("minecraft:recipes/transportation/boat", "minecraft:recipes/transportation/oak_boat").put("minecraft:recipes/transportation/golden_rail", "minecraft:recipes/transportation/powered_rail").build();
+    private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("minecraft:recipes/brewing/speckled_melon", "minecraft:recipes/brewing/glistering_melon_slice").put("minecraft:recipes/building_blocks/black_stained_hardened_clay", "minecraft:recipes/building_blocks/black_terracotta").put("minecraft:recipes/building_blocks/blue_stained_hardened_clay", "minecraft:recipes/building_blocks/blue_terracotta").put("minecraft:recipes/building_blocks/brown_stained_hardened_clay", "minecraft:recipes/building_blocks/brown_terracotta").put("minecraft:recipes/building_blocks/cyan_stained_hardened_clay", "minecraft:recipes/building_blocks/cyan_terracotta").put("minecraft:recipes/building_blocks/gray_stained_hardened_clay", "minecraft:recipes/building_blocks/gray_terracotta").put("minecraft:recipes/building_blocks/green_stained_hardened_clay", "minecraft:recipes/building_blocks/green_terracotta").put("minecraft:recipes/building_blocks/light_blue_stained_hardened_clay", "minecraft:recipes/building_blocks/light_blue_terracotta").put("minecraft:recipes/building_blocks/light_gray_stained_hardened_clay", "minecraft:recipes/building_blocks/light_gray_terracotta").put("minecraft:recipes/building_blocks/lime_stained_hardened_clay", "minecraft:recipes/building_blocks/lime_terracotta").put("minecraft:recipes/building_blocks/magenta_stained_hardened_clay", "minecraft:recipes/building_blocks/magenta_terracotta").put("minecraft:recipes/building_blocks/orange_stained_hardened_clay", "minecraft:recipes/building_blocks/orange_terracotta").put("minecraft:recipes/building_blocks/pink_stained_hardened_clay", "minecraft:recipes/building_blocks/pink_terracotta").put("minecraft:recipes/building_blocks/purple_stained_hardened_clay", "minecraft:recipes/building_blocks/purple_terracotta").put("minecraft:recipes/building_blocks/red_stained_hardened_clay", "minecraft:recipes/building_blocks/red_terracotta").put("minecraft:recipes/building_blocks/white_stained_hardened_clay", "minecraft:recipes/building_blocks/white_terracotta").put("minecraft:recipes/building_blocks/yellow_stained_hardened_clay", "minecraft:recipes/building_blocks/yellow_terracotta").put("minecraft:recipes/building_blocks/acacia_wooden_slab", "minecraft:recipes/building_blocks/acacia_slab").put("minecraft:recipes/building_blocks/birch_wooden_slab", "minecraft:recipes/building_blocks/birch_slab").put("minecraft:recipes/building_blocks/dark_oak_wooden_slab", "minecraft:recipes/building_blocks/dark_oak_slab").put("minecraft:recipes/building_blocks/jungle_wooden_slab", "minecraft:recipes/building_blocks/jungle_slab").put("minecraft:recipes/building_blocks/oak_wooden_slab", "minecraft:recipes/building_blocks/oak_slab").put("minecraft:recipes/building_blocks/spruce_wooden_slab", "minecraft:recipes/building_blocks/spruce_slab").put("minecraft:recipes/building_blocks/brick_block", "minecraft:recipes/building_blocks/bricks").put("minecraft:recipes/building_blocks/chiseled_stonebrick", "minecraft:recipes/building_blocks/chiseled_stone_bricks").put("minecraft:recipes/building_blocks/end_bricks", "minecraft:recipes/building_blocks/end_stone_bricks").put("minecraft:recipes/building_blocks/lit_pumpkin", "minecraft:recipes/building_blocks/jack_o_lantern").put("minecraft:recipes/building_blocks/magma", "minecraft:recipes/building_blocks/magma_block").put("minecraft:recipes/building_blocks/melon_block", "minecraft:recipes/building_blocks/melon").put("minecraft:recipes/building_blocks/mossy_stonebrick", "minecraft:recipes/building_blocks/mossy_stone_bricks").put("minecraft:recipes/building_blocks/nether_brick", "minecraft:recipes/building_blocks/nether_bricks").put("minecraft:recipes/building_blocks/pillar_quartz_block", "minecraft:recipes/building_blocks/quartz_pillar").put("minecraft:recipes/building_blocks/red_nether_brick", "minecraft:recipes/building_blocks/red_nether_bricks").put("minecraft:recipes/building_blocks/snow", "minecraft:recipes/building_blocks/snow_block").put("minecraft:recipes/building_blocks/smooth_red_sandstone", "minecraft:recipes/building_blocks/cut_red_sandstone").put("minecraft:recipes/building_blocks/smooth_sandstone", "minecraft:recipes/building_blocks/cut_sandstone").put("minecraft:recipes/building_blocks/stonebrick", "minecraft:recipes/building_blocks/stone_bricks").put("minecraft:recipes/building_blocks/stone_stairs", "minecraft:recipes/building_blocks/cobblestone_stairs").put("minecraft:recipes/building_blocks/string_to_wool", "minecraft:recipes/building_blocks/white_wool_from_string").put("minecraft:recipes/decorations/fence", "minecraft:recipes/decorations/oak_fence").put("minecraft:recipes/decorations/purple_shulker_box", "minecraft:recipes/decorations/shulker_box").put("minecraft:recipes/decorations/slime", "minecraft:recipes/decorations/slime_block").put("minecraft:recipes/decorations/snow_layer", "minecraft:recipes/decorations/snow").put("minecraft:recipes/misc/bone_meal_from_block", "minecraft:recipes/misc/bone_meal_from_bone_block").put("minecraft:recipes/misc/bone_meal_from_bone", "minecraft:recipes/misc/bone_meal").put("minecraft:recipes/misc/gold_ingot_from_block", "minecraft:recipes/misc/gold_ingot_from_gold_block").put("minecraft:recipes/misc/iron_ingot_from_block", "minecraft:recipes/misc/iron_ingot_from_iron_block").put("minecraft:recipes/redstone/fence_gate", "minecraft:recipes/redstone/oak_fence_gate").put("minecraft:recipes/redstone/noteblock", "minecraft:recipes/redstone/note_block").put("minecraft:recipes/redstone/trapdoor", "minecraft:recipes/redstone/oak_trapdoor").put("minecraft:recipes/redstone/wooden_button", "minecraft:recipes/redstone/oak_button").put("minecraft:recipes/redstone/wooden_door", "minecraft:recipes/redstone/oak_door").put("minecraft:recipes/redstone/wooden_pressure_plate", "minecraft:recipes/redstone/oak_pressure_plate").put("minecraft:recipes/transportation/boat", "minecraft:recipes/transportation/oak_boat").put("minecraft:recipes/transportation/golden_rail", "minecraft:recipes/transportation/powered_rail").build();
 
     public AdvancementsFix(Schema schema, boolean flag) {
         super(schema, flag, "AdvancementsFix", (s) -> (String)RENAMES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java b/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
index 84e34e10e7adc02746a439c5e5a0455300e4dc4f..daf42bdafcab9dc6d8f79c5fb1ff35a21bccf8cb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
@@ -13,7 +13,7 @@ import com.mojang.serialization.Dynamic;
 import java.util.Map;
 
 public class AttributesRename extends DataFix {
-    private static final Map<String, String> RENAMES = ImmutableMap.builder().put("generic.maxHealth", "generic.max_health").put("Max Health", "generic.max_health").put("zombie.spawnReinforcements", "zombie.spawn_reinforcements").put("Spawn Reinforcements Chance", "zombie.spawn_reinforcements").put("horse.jumpStrength", "horse.jump_strength").put("Jump Strength", "horse.jump_strength").put("generic.followRange", "generic.follow_range").put("Follow Range", "generic.follow_range").put("generic.knockbackResistance", "generic.knockback_resistance").put("Knockback Resistance", "generic.knockback_resistance").put("generic.movementSpeed", "generic.movement_speed").put("Movement Speed", "generic.movement_speed").put("generic.flyingSpeed", "generic.flying_speed").put("Flying Speed", "generic.flying_speed").put("generic.attackDamage", "generic.attack_damage").put("generic.attackKnockback", "generic.attack_knockback").put("generic.attackSpeed", "generic.attack_speed").put("generic.armorToughness", "generic.armor_toughness").build();
+    private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("generic.maxHealth", "generic.max_health").put("Max Health", "generic.max_health").put("zombie.spawnReinforcements", "zombie.spawn_reinforcements").put("Spawn Reinforcements Chance", "zombie.spawn_reinforcements").put("horse.jumpStrength", "horse.jump_strength").put("Jump Strength", "horse.jump_strength").put("generic.followRange", "generic.follow_range").put("Follow Range", "generic.follow_range").put("generic.knockbackResistance", "generic.knockback_resistance").put("Knockback Resistance", "generic.knockback_resistance").put("generic.movementSpeed", "generic.movement_speed").put("Movement Speed", "generic.movement_speed").put("generic.flyingSpeed", "generic.flying_speed").put("Flying Speed", "generic.flying_speed").put("generic.attackDamage", "generic.attack_damage").put("generic.attackKnockback", "generic.attack_knockback").put("generic.attackSpeed", "generic.attack_speed").put("generic.armorToughness", "generic.armor_toughness").build();
 
     public AttributesRename(Schema schema) {
         super(schema, false);
@@ -30,10 +30,10 @@ public class AttributesRename extends DataFix {
     }
 
     private static Typed<?> fixItemStackTag(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("AttributeModifiers", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> dynamic.update("AttributeName", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("AttributeModifiers", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicIn) -> dynamicIn.update("AttributeName", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
     }
 
     private static Typed<?> fixEntity(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Attributes", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> dynamic.update("Name", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Attributes", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicIn) -> dynamicIn.update("Name", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
index 04fec0c98753679661a17c2dd33f8839bb204124..be972e0b8e6bdfe19a4e47dbdc95de7498d0f4fe 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
@@ -5,7 +5,7 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class BiomeFix extends RenameBiomesFix {
-    public static final Map<String, String> BIOMES = ImmutableMap.builder().put("minecraft:extreme_hills", "minecraft:mountains").put("minecraft:swampland", "minecraft:swamp").put("minecraft:hell", "minecraft:nether_wastes").put("minecraft:sky", "minecraft:the_end").put("minecraft:ice_flats", "minecraft:snowy_tundra").put("minecraft:ice_mountains", "minecraft:snowy_mountains").put("minecraft:mushroom_island", "minecraft:mushroom_fields").put("minecraft:mushroom_island_shore", "minecraft:mushroom_field_shore").put("minecraft:beaches", "minecraft:beach").put("minecraft:forest_hills", "minecraft:wooded_hills").put("minecraft:smaller_extreme_hills", "minecraft:mountain_edge").put("minecraft:stone_beach", "minecraft:stone_shore").put("minecraft:cold_beach", "minecraft:snowy_beach").put("minecraft:roofed_forest", "minecraft:dark_forest").put("minecraft:taiga_cold", "minecraft:snowy_taiga").put("minecraft:taiga_cold_hills", "minecraft:snowy_taiga_hills").put("minecraft:redwood_taiga", "minecraft:giant_tree_taiga").put("minecraft:redwood_taiga_hills", "minecraft:giant_tree_taiga_hills").put("minecraft:extreme_hills_with_trees", "minecraft:wooded_mountains").put("minecraft:savanna_rock", "minecraft:savanna_plateau").put("minecraft:mesa", "minecraft:badlands").put("minecraft:mesa_rock", "minecraft:wooded_badlands_plateau").put("minecraft:mesa_clear_rock", "minecraft:badlands_plateau").put("minecraft:sky_island_low", "minecraft:small_end_islands").put("minecraft:sky_island_medium", "minecraft:end_midlands").put("minecraft:sky_island_high", "minecraft:end_highlands").put("minecraft:sky_island_barren", "minecraft:end_barrens").put("minecraft:void", "minecraft:the_void").put("minecraft:mutated_plains", "minecraft:sunflower_plains").put("minecraft:mutated_desert", "minecraft:desert_lakes").put("minecraft:mutated_extreme_hills", "minecraft:gravelly_mountains").put("minecraft:mutated_forest", "minecraft:flower_forest").put("minecraft:mutated_taiga", "minecraft:taiga_mountains").put("minecraft:mutated_swampland", "minecraft:swamp_hills").put("minecraft:mutated_ice_flats", "minecraft:ice_spikes").put("minecraft:mutated_jungle", "minecraft:modified_jungle").put("minecraft:mutated_jungle_edge", "minecraft:modified_jungle_edge").put("minecraft:mutated_birch_forest", "minecraft:tall_birch_forest").put("minecraft:mutated_birch_forest_hills", "minecraft:tall_birch_hills").put("minecraft:mutated_roofed_forest", "minecraft:dark_forest_hills").put("minecraft:mutated_taiga_cold", "minecraft:snowy_taiga_mountains").put("minecraft:mutated_redwood_taiga", "minecraft:giant_spruce_taiga").put("minecraft:mutated_redwood_taiga_hills", "minecraft:giant_spruce_taiga_hills").put("minecraft:mutated_extreme_hills_with_trees", "minecraft:modified_gravelly_mountains").put("minecraft:mutated_savanna", "minecraft:shattered_savanna").put("minecraft:mutated_savanna_rock", "minecraft:shattered_savanna_plateau").put("minecraft:mutated_mesa", "minecraft:eroded_badlands").put("minecraft:mutated_mesa_rock", "minecraft:modified_wooded_badlands_plateau").put("minecraft:mutated_mesa_clear_rock", "minecraft:modified_badlands_plateau").put("minecraft:warm_deep_ocean", "minecraft:deep_warm_ocean").put("minecraft:lukewarm_deep_ocean", "minecraft:deep_lukewarm_ocean").put("minecraft:cold_deep_ocean", "minecraft:deep_cold_ocean").put("minecraft:frozen_deep_ocean", "minecraft:deep_frozen_ocean").build();
+    public static final Map<String, String> BIOMES = ImmutableMap.<String, String>builder().put("minecraft:extreme_hills", "minecraft:mountains").put("minecraft:swampland", "minecraft:swamp").put("minecraft:hell", "minecraft:nether_wastes").put("minecraft:sky", "minecraft:the_end").put("minecraft:ice_flats", "minecraft:snowy_tundra").put("minecraft:ice_mountains", "minecraft:snowy_mountains").put("minecraft:mushroom_island", "minecraft:mushroom_fields").put("minecraft:mushroom_island_shore", "minecraft:mushroom_field_shore").put("minecraft:beaches", "minecraft:beach").put("minecraft:forest_hills", "minecraft:wooded_hills").put("minecraft:smaller_extreme_hills", "minecraft:mountain_edge").put("minecraft:stone_beach", "minecraft:stone_shore").put("minecraft:cold_beach", "minecraft:snowy_beach").put("minecraft:roofed_forest", "minecraft:dark_forest").put("minecraft:taiga_cold", "minecraft:snowy_taiga").put("minecraft:taiga_cold_hills", "minecraft:snowy_taiga_hills").put("minecraft:redwood_taiga", "minecraft:giant_tree_taiga").put("minecraft:redwood_taiga_hills", "minecraft:giant_tree_taiga_hills").put("minecraft:extreme_hills_with_trees", "minecraft:wooded_mountains").put("minecraft:savanna_rock", "minecraft:savanna_plateau").put("minecraft:mesa", "minecraft:badlands").put("minecraft:mesa_rock", "minecraft:wooded_badlands_plateau").put("minecraft:mesa_clear_rock", "minecraft:badlands_plateau").put("minecraft:sky_island_low", "minecraft:small_end_islands").put("minecraft:sky_island_medium", "minecraft:end_midlands").put("minecraft:sky_island_high", "minecraft:end_highlands").put("minecraft:sky_island_barren", "minecraft:end_barrens").put("minecraft:void", "minecraft:the_void").put("minecraft:mutated_plains", "minecraft:sunflower_plains").put("minecraft:mutated_desert", "minecraft:desert_lakes").put("minecraft:mutated_extreme_hills", "minecraft:gravelly_mountains").put("minecraft:mutated_forest", "minecraft:flower_forest").put("minecraft:mutated_taiga", "minecraft:taiga_mountains").put("minecraft:mutated_swampland", "minecraft:swamp_hills").put("minecraft:mutated_ice_flats", "minecraft:ice_spikes").put("minecraft:mutated_jungle", "minecraft:modified_jungle").put("minecraft:mutated_jungle_edge", "minecraft:modified_jungle_edge").put("minecraft:mutated_birch_forest", "minecraft:tall_birch_forest").put("minecraft:mutated_birch_forest_hills", "minecraft:tall_birch_hills").put("minecraft:mutated_roofed_forest", "minecraft:dark_forest_hills").put("minecraft:mutated_taiga_cold", "minecraft:snowy_taiga_mountains").put("minecraft:mutated_redwood_taiga", "minecraft:giant_spruce_taiga").put("minecraft:mutated_redwood_taiga_hills", "minecraft:giant_spruce_taiga_hills").put("minecraft:mutated_extreme_hills_with_trees", "minecraft:modified_gravelly_mountains").put("minecraft:mutated_savanna", "minecraft:shattered_savanna").put("minecraft:mutated_savanna_rock", "minecraft:shattered_savanna_plateau").put("minecraft:mutated_mesa", "minecraft:eroded_badlands").put("minecraft:mutated_mesa_rock", "minecraft:modified_wooded_badlands_plateau").put("minecraft:mutated_mesa_clear_rock", "minecraft:modified_badlands_plateau").put("minecraft:warm_deep_ocean", "minecraft:deep_warm_ocean").put("minecraft:lukewarm_deep_ocean", "minecraft:deep_lukewarm_ocean").put("minecraft:cold_deep_ocean", "minecraft:deep_cold_ocean").put("minecraft:frozen_deep_ocean", "minecraft:deep_frozen_ocean").build();
 
     public BiomeFix(Schema schema, boolean flag) {
         super(schema, flag, "Biomes fix", BIOMES);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
index 31344fb9159f61033eabd823aa86a4c249d6098b..bb5ea649d9be4e832af6f5145e5aada2cf352b37 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
@@ -40,13 +40,13 @@ public class BitStorageAlignFix extends DataFix {
     }
 
     private Typed<?> updateHeightmaps(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Heightmaps", (dynamic2) -> dynamic2.updateMapValues((pair) -> pair.mapSecond((dynamic2) -> updateBitStorage(dynamic, dynamic2, 256, 9)))));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Heightmaps", (dynamic2) -> dynamic2.updateMapValues((pair) -> pair.mapSecond((dynamicIn2) -> updateBitStorage(dynamic, dynamicIn2, 256, 9)))));
     }
 
     private static Typed<?> updateSections(OpticFinder<?> opticFinder, OpticFinder<?> opticFinder2, OpticFinder<List<Pair<String, Dynamic<?>>>> opticFinder3, Typed<?> typed) {
-        return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> {
-                int i = typed.getOptional(opticFinder3).map((list) -> Math.max(4, DataFixUtils.ceillog2(list.size()))).orElse(0);
-                return i != 0 && !Mth.isPowerOfTwo(i) ? typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("BlockStates", (dynamic2) -> updateBitStorage(dynamic, dynamic2, 4096, i))) : typed;
+        return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> {
+                int i = typedIn.getOptional(opticFinder3).map((list) -> Math.max(4, DataFixUtils.ceillog2(list.size()))).orElse(0);
+                return i != 0 && !Mth.isPowerOfTwo(i) ? typedIn.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("BlockStates", (dynamic2) -> updateBitStorage(dynamic, dynamic2, 4096, i))) : typedIn;
             }));
     }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
index c1287656922f0182ea234ae79453b66e1969b3fb..e74a7b50cbdf15015fcb6fc00a21386d9175bcf9 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
@@ -13,7 +13,7 @@ public class BlockEntityBannerColorFix extends NamedEntityFix {
 
     public Dynamic<?> fixTag(Dynamic<?> dynamic) {
         dynamic = dynamic.update("Base", (dynamicx) -> dynamicx.createInt(15 - dynamicx.asInt(0)));
-        return dynamic.update("Patterns", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.update("Color", (dynamicx) -> dynamicx.createInt(15 - dynamicx.asInt(0))))).map(dynamicx::createList).result(), dynamicx));
+        return dynamic.update("Patterns", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamicIn) -> dynamicIn.update("Color", (dynamicIn2) -> dynamicIn2.createInt(15 - dynamicIn2.asInt(0))))).map(dynamicx::createList).result(), dynamicx));
     }
 
     protected Typed<?> fix(Typed<?> typed) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
index 5c8781febffe89c501141800da2b160a2d5d93dd..47ccd0ca23170c3cd862478730a8fda33ba1b766 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
@@ -43,8 +43,8 @@ public class BlockEntityIdFix extends DataFix {
     public TypeRewriteRule makeRule() {
         Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
         Type<?> type2 = this.getOutputSchema().getType(References.ITEM_STACK);
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY);
         return TypeRewriteRule.seq(this.convertUnchecked("item stack block entity name hook converter", type, type2), this.fixTypeEverywhere("BlockEntityIdFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> (String)ID_MAP.getOrDefault(s, s))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
index 3ea9ec7648de70bc3e0c0c6f65418407c1d3b6a9..8c6676f045fb6a5086a71e60fc71a6a2752610bf 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
@@ -17,7 +17,7 @@ public class BlockEntityUUIDFix extends AbstractUUIDFix {
     }
 
     private Dynamic<?> updateSkull(Dynamic<?> dynamic) {
-        return dynamic.get("Owner").get().map((dynamicx) -> replaceUUIDString(dynamicx, "Id", "Id").orElse(dynamicx)).map((dynamic2) -> dynamic.remove("Owner").set("SkullOwner", dynamic2)).result().orElse(dynamic);
+        return dynamic.get("Owner").get().map((dynamicx) -> replaceUUIDString(dynamicx, "Id", "Id").orElse(dynamicx)).map((dynamic2) -> dynamic.remove("Owner").set("SkullOwner", dynamic2)).result().orElse((Dynamic) dynamic);
     }
 
     private Dynamic<?> updateConduit(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
index cc453beff9635ae1389f86d40201d88f0163cb8e..f6891a378a35892a02d295993a0239676f70ce63 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
@@ -22,10 +22,10 @@ public abstract class BlockRenameFixWithJigsaw extends BlockRenameFix {
         TypeReference typeReference = References.BLOCK_ENTITY;
         String s = "minecraft:jigsaw";
         OpticFinder<?> opticFinder = DSL.namedChoice("minecraft:jigsaw", this.getInputSchema().getChoiceType(typeReference, "minecraft:jigsaw"));
-        TypeRewriteRule typeRewriteRule = this.fixTypeEverywhereTyped(this.name + " for jigsaw state", this.getInputSchema().getType(typeReference), this.getOutputSchema().getType(typeReference), (typed) -> typed.updateTyped(opticFinder, this.getOutputSchema().getChoiceType(typeReference, "minecraft:jigsaw"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("final_state", (dynamic2) -> DataFixUtils.orElse(dynamic2.asString().result().map((s) -> {
-                            int i = s.indexOf(91);
-                            int i2 = s.indexOf(123);
-                            int i3 = s.length();
+        TypeRewriteRule typeRewriteRule = this.fixTypeEverywhereTyped(this.name + " for jigsaw state", this.getInputSchema().getType(typeReference), this.getOutputSchema().getType(typeReference), (typed) -> typed.updateTyped(opticFinder, this.getOutputSchema().getChoiceType(typeReference, "minecraft:jigsaw"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("final_state", (dynamic2) -> DataFixUtils.orElse(dynamic2.asString().result().map((str) -> {
+                            int i = str.indexOf(91);
+                            int i2 = str.indexOf(123);
+                            int i3 = str.length();
                             if (i > 0) {
                                 i3 = Math.min(i3, i);
                             }
@@ -34,9 +34,9 @@ public abstract class BlockRenameFixWithJigsaw extends BlockRenameFix {
                                 i3 = Math.min(i3, i2);
                             }
 
-                            String s2 = s.substring(0, i3);
+                            String s2 = str.substring(0, i3);
                             String s3 = this.fixBlock(s2);
-                            return s3 + s.substring(i3);
+                            return s3 + str.substring(i3);
                         }).map(dynamic::createString), dynamic2)))));
         return TypeRewriteRule.seq(super.makeRule(), typeRewriteRule);
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java b/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java
index d6aa74de191db9769783d9ce280f2ddb1825a592..55e188467327ddd0d720fd3670e2acdfc885e4ea 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java
@@ -3,7 +3,7 @@ package net.minecraft.util.datafix.fixes;
 import com.google.common.collect.ImmutableMap;
 
 public final class CavesAndCliffsRenames {
-    public static final ImmutableMap<String, String> RENAMES = ImmutableMap.builder().put("minecraft:badlands_plateau", "minecraft:badlands").put("minecraft:bamboo_jungle_hills", "minecraft:bamboo_jungle").put("minecraft:birch_forest_hills", "minecraft:birch_forest").put("minecraft:dark_forest_hills", "minecraft:dark_forest").put("minecraft:desert_hills", "minecraft:desert").put("minecraft:desert_lakes", "minecraft:desert").put("minecraft:giant_spruce_taiga_hills", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_spruce_taiga", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_tree_taiga_hills", "minecraft:old_growth_pine_taiga").put("minecraft:giant_tree_taiga", "minecraft:old_growth_pine_taiga").put("minecraft:gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:jungle_edge", "minecraft:sparse_jungle").put("minecraft:jungle_hills", "minecraft:jungle").put("minecraft:modified_badlands_plateau", "minecraft:badlands").put("minecraft:modified_gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:modified_jungle_edge", "minecraft:sparse_jungle").put("minecraft:modified_jungle", "minecraft:jungle").put("minecraft:modified_wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:mountain_edge", "minecraft:windswept_hills").put("minecraft:mountains", "minecraft:windswept_hills").put("minecraft:mushroom_field_shore", "minecraft:mushroom_fields").put("minecraft:shattered_savanna", "minecraft:windswept_savanna").put("minecraft:shattered_savanna_plateau", "minecraft:windswept_savanna").put("minecraft:snowy_mountains", "minecraft:snowy_plains").put("minecraft:snowy_taiga_hills", "minecraft:snowy_taiga").put("minecraft:snowy_taiga_mountains", "minecraft:snowy_taiga").put("minecraft:snowy_tundra", "minecraft:snowy_plains").put("minecraft:stone_shore", "minecraft:stony_shore").put("minecraft:swamp_hills", "minecraft:swamp").put("minecraft:taiga_hills", "minecraft:taiga").put("minecraft:taiga_mountains", "minecraft:taiga").put("minecraft:tall_birch_forest", "minecraft:old_growth_birch_forest").put("minecraft:tall_birch_hills", "minecraft:old_growth_birch_forest").put("minecraft:wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:wooded_hills", "minecraft:forest").put("minecraft:wooded_mountains", "minecraft:windswept_forest").put("minecraft:lofty_peaks", "minecraft:jagged_peaks").put("minecraft:snowcapped_peaks", "minecraft:frozen_peaks").build();
+    public static final ImmutableMap<String, String> RENAMES = ImmutableMap.<String, String>builder().put("minecraft:badlands_plateau", "minecraft:badlands").put("minecraft:bamboo_jungle_hills", "minecraft:bamboo_jungle").put("minecraft:birch_forest_hills", "minecraft:birch_forest").put("minecraft:dark_forest_hills", "minecraft:dark_forest").put("minecraft:desert_hills", "minecraft:desert").put("minecraft:desert_lakes", "minecraft:desert").put("minecraft:giant_spruce_taiga_hills", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_spruce_taiga", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_tree_taiga_hills", "minecraft:old_growth_pine_taiga").put("minecraft:giant_tree_taiga", "minecraft:old_growth_pine_taiga").put("minecraft:gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:jungle_edge", "minecraft:sparse_jungle").put("minecraft:jungle_hills", "minecraft:jungle").put("minecraft:modified_badlands_plateau", "minecraft:badlands").put("minecraft:modified_gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:modified_jungle_edge", "minecraft:sparse_jungle").put("minecraft:modified_jungle", "minecraft:jungle").put("minecraft:modified_wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:mountain_edge", "minecraft:windswept_hills").put("minecraft:mountains", "minecraft:windswept_hills").put("minecraft:mushroom_field_shore", "minecraft:mushroom_fields").put("minecraft:shattered_savanna", "minecraft:windswept_savanna").put("minecraft:shattered_savanna_plateau", "minecraft:windswept_savanna").put("minecraft:snowy_mountains", "minecraft:snowy_plains").put("minecraft:snowy_taiga_hills", "minecraft:snowy_taiga").put("minecraft:snowy_taiga_mountains", "minecraft:snowy_taiga").put("minecraft:snowy_tundra", "minecraft:snowy_plains").put("minecraft:stone_shore", "minecraft:stony_shore").put("minecraft:swamp_hills", "minecraft:swamp").put("minecraft:taiga_hills", "minecraft:taiga").put("minecraft:taiga_mountains", "minecraft:taiga").put("minecraft:tall_birch_forest", "minecraft:old_growth_birch_forest").put("minecraft:tall_birch_hills", "minecraft:old_growth_birch_forest").put("minecraft:wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:wooded_hills", "minecraft:forest").put("minecraft:wooded_mountains", "minecraft:windswept_forest").put("minecraft:lofty_peaks", "minecraft:jagged_peaks").put("minecraft:snowcapped_peaks", "minecraft:frozen_peaks").build();
 
     private CavesAndCliffsRenames() {
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java
index b2e42841c2df2ea282a1b940375499103ac6ae8d..bd36d76e52ce6bf90b26e4518f7a50eb5244fb2c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java
@@ -12,6 +12,8 @@ import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.types.templates.List.ListType;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Dynamic;
+
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
@@ -39,11 +41,11 @@ public class ChunkBedBlockEntityInjecterFix extends DataFix {
         OpticFinder<?> opticFinder = DSL.fieldFinder("Level", type);
         OpticFinder<List<TE>> opticFinder2 = DSL.fieldFinder("TileEntities", listType);
         int i = 416;
-        return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), (dynamicOps) -> (pair) -> pair), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), (typed) -> {
+        return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), (dynamicOps) -> (pair) -> (Pair) pair), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), (typed) -> {
             Typed<?> typed2 = typed.getTyped(opticFinder);
             Dynamic<?> dynamic = typed2.get(DSL.remainderFinder());
-            int i = dynamic.get("xPos").asInt(0);
-            int i2 = dynamic.get("zPos").asInt(0);
+            int xPos = dynamic.get("xPos").asInt(0);
+            int zPos = dynamic.get("zPos").asInt(0);
             List<TE> list = Lists.newArrayList((Iterable)typed2.getOrCreate(opticFinder2));
             List<? extends Dynamic<?>> list2 = dynamic.get("Sections").asList(Function.identity());
 
@@ -53,16 +55,17 @@ public class ChunkBedBlockEntityInjecterFix extends DataFix {
                 Stream<Integer> stream = dynamic2.get("Blocks").asStream().map((dynamicx) -> dynamicx.asInt(0));
                 int i5 = 0;
 
-                for(int i6 : stream::iterator) {
+                for (Iterator<Integer> it = stream.iterator(); it.hasNext(); ) {
+                    int i6 = it.next();
                     if (416 == (i6 & 255) << 4) {
                         int i7 = i5 & 15;
                         int i8 = i5 >> 8 & 15;
                         int i9 = i5 >> 4 & 15;
                         Map<Dynamic<?>, Dynamic<?>> map = Maps.newHashMap();
                         map.put(dynamic2.createString("id"), dynamic2.createString("minecraft:bed"));
-                        map.put(dynamic2.createString("x"), dynamic2.createInt(i7 + (i << 4)));
+                        map.put(dynamic2.createString("x"), dynamic2.createInt(i7 + (xPos << 4)));
                         map.put(dynamic2.createString("y"), dynamic2.createInt(i8 + (i4 << 4)));
-                        map.put(dynamic2.createString("z"), dynamic2.createInt(i9 + (i2 << 4)));
+                        map.put(dynamic2.createString("z"), dynamic2.createInt(i9 + (zPos << 4)));
                         map.put(dynamic2.createString("color"), dynamic2.createShort((short)14));
                         list.add((type2.read(dynamic2.createMap(map)).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created bed block entity."))).getFirst());
                     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java
index 2e0b21f588fb7f29b8bec040f99a56edd821bc18..1f8b2cc3a9e8199f34284d9ec4d9741f71af503a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java
@@ -75,13 +75,13 @@ public class ChunkHeightAndBiomeFix extends DataFix {
                 int i = flag ? -4 : 0;
                 Dynamic<?>[] dynamics = getBiomeContainers(dynamic, flag, i, mutableBoolean);
                 Dynamic<?> dynamic2 = makePalettedContainer(dynamic.createList(Stream.of(dynamic.createMap(ImmutableMap.of(dynamic.createString("Name"), dynamic.createString("minecraft:air"))))));
-                MutableObject<Supplier<ChunkProtoTickListFix.PoorMansPalettedContainer>> mutableObject = new MutableObject(() -> null);
+                MutableObject<Supplier<ChunkProtoTickListFix.PoorMansPalettedContainer>> mutableObject = new MutableObject<>(() -> null);
                 typed2 = typed2.updateTyped(opticFinder2, type4, (typedx) -> {
                     IntSet intSet = new IntOpenHashSet();
                     Dynamic<?> dynamic3 = typedx.write().result().orElseThrow(() -> new IllegalStateException("Malformed Chunk.Level.Sections"));
                     List<Dynamic<?>> list = dynamic3.asStream().map((dynamic2x) -> {
                         int i2 = dynamic2x.get("Y").asInt(0);
-                        Dynamic<?> dynamic3 = DataFixUtils.orElse(dynamic2x.get("Palette").result().flatMap((dynamic2xx) -> dynamic2x.get("BlockStates").result().map((dynamic2) -> makeOptimizedPalettedContainer(dynamic2xx, dynamic2))), dynamic2);
+                        Dynamic<?> dynamic3In = DataFixUtils.orElse(dynamic2x.get("Palette").result().flatMap((dynamic2xx) -> dynamic2x.get("BlockStates").result().map((dynamic2In) -> makeOptimizedPalettedContainer(dynamic2xx, dynamic2In))), dynamic2);
                         Dynamic<?> dynamic4 = dynamic2x;
                         int i3 = i2 - i;
                         if (i3 >= 0 && i3 < dynamics.length) {
@@ -91,13 +91,13 @@ public class ChunkHeightAndBiomeFix extends DataFix {
                         intSet.add(i2);
                         if (dynamic2x.get("Y").asInt(Integer.MAX_VALUE) == 0) {
                             mutableObject.setValue(() -> {
-                                List<? extends Dynamic<?>> list = dynamic3.get("palette").asList(Function.identity());
-                                long[] longs = dynamic3.get("data").asLongStream().toArray();
-                                return new ChunkProtoTickListFix.PoorMansPalettedContainer(list, longs);
+                                List<? extends Dynamic<?>> listIn = dynamic3In.get("palette").asList(Function.identity());
+                                long[] longs = dynamic3In.get("data").asLongStream().toArray();
+                                return new ChunkProtoTickListFix.PoorMansPalettedContainer(listIn, longs);
                             });
                         }
 
-                        return dynamic4.set("block_states", dynamic3).remove("Palette").remove("BlockStates");
+                        return dynamic4.set("block_states", dynamic3In).remove("Palette").remove("BlockStates");
                     }).collect(Collectors.toCollection(ArrayList::new));
 
                     for(int i2 = 0; i2 < dynamics.length; ++i2) {
@@ -124,12 +124,13 @@ public class ChunkHeightAndBiomeFix extends DataFix {
             mutableBoolean.setValue(ints.length == 1536);
             if (mutableBoolean.booleanValue()) {
                 for(int i2 = 0; i2 < 24; ++i2) {
-                    dynamics[i2] = makeBiomeContainer(dynamic, (i2) -> ints[i2 * 64 + i2]);
+                    dynamics[i2] = makeBiomeContainer(dynamic, (i2In) -> ints[i2In * 64 + i2In]);
                 }
             } else {
                 for(int i4 = 0; i4 < 16; ++i4) {
                     int i5 = i4 - i;
-                    dynamics[i5] = makeBiomeContainer(dynamic, (i2) -> ints[i4 * 64 + i2]);
+                    int finalI = i4;
+                    dynamics[i5] = makeBiomeContainer(dynamic, (i2) -> ints[finalI * 64 + i2]);
                 }
 
                 if (flag) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
index bbf296da4c7d6b6db0826b942ab664f3c2d10f8e..325f85d4fe6c2ee36e2369f414c81825fa6116a0 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
@@ -561,19 +561,19 @@ public class ChunkPalettedStorageFix extends DataFix {
             this.level = dynamic;
             this.x = dynamic.get("xPos").asInt(0) << 4;
             this.z = dynamic.get("zPos").asInt(0) << 4;
-            dynamic.get("TileEntities").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamic) -> {
-                    int i = dynamic.get("x").asInt(0) - this.x & 15;
-                    int i2 = dynamic.get("y").asInt(0);
-                    int i3 = dynamic.get("z").asInt(0) - this.z & 15;
+            dynamic.get("TileEntities").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamicIn) -> {
+                    int i = dynamicIn.get("x").asInt(0) - this.x & 15;
+                    int i2 = dynamicIn.get("y").asInt(0);
+                    int i3 = dynamicIn.get("z").asInt(0) - this.z & 15;
                     int i4 = i2 << 8 | i3 << 4 | i;
-                    if (this.blockEntities.put(i4, dynamic) != null) {
+                    if (this.blockEntities.put(i4, dynamicIn) != null) {
                         ChunkPalettedStorageFix.LOGGER.warn("In chunk: {}x{} found a duplicate block entity at position: [{}, {}, {}]", this.x, this.z, i, i2, i3);
                     }
 
                 }));
             boolean flag = dynamic.get("convertedFromAlphaFormat").asBoolean(false);
-            dynamic.get("Sections").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamic) -> {
-                    ChunkPalettedStorageFix.Section section = new ChunkPalettedStorageFix.Section(dynamic);
+            dynamic.get("Sections").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamicIn) -> {
+                    ChunkPalettedStorageFix.Section section = new ChunkPalettedStorageFix.Section(dynamicIn);
                     this.sides = section.upgrade(this.sides);
                     this.sections[section.y] = section;
                 }));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java
index fde49a4e077b72007a3cc1dc7de3ea57a39798f0..7d6237b1a6c8a7b20130f29e37674dfcd2d569af 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java
@@ -47,23 +47,23 @@ public class ChunkProtoTickListFix extends DataFix {
                 Dynamic<?> dynamic = typedx.get(DSL.remainderFinder());
                 MutableInt mutableInt = new MutableInt();
                 Int2ObjectMap<Supplier<ChunkProtoTickListFix.PoorMansPalettedContainer>> int2ObjectMap = new Int2ObjectArrayMap();
-                typedx.getOptionalTyped(opticFinder2).ifPresent((typed) -> typed.getAllTyped(opticFinder3).forEach((typedx) -> {
-                        Dynamic<?> dynamic = typedx.get(DSL.remainderFinder());
-                        int i = dynamic.get("Y").asInt(Integer.MAX_VALUE);
+                typedx.getOptionalTyped(opticFinder2).ifPresent((typedIn) -> typedIn.getAllTyped(opticFinder3).forEach((typedIn2) -> {
+                        Dynamic<?> dynamicIn = typedIn2.get(DSL.remainderFinder());
+                        int i = dynamicIn.get("Y").asInt(Integer.MAX_VALUE);
                         if (i != Integer.MAX_VALUE) {
-                            if (typedx.getOptionalTyped(opticFinder5).isPresent()) {
+                            if (typedIn2.getOptionalTyped(opticFinder5).isPresent()) {
                                 mutableInt.setValue(Math.min(i, mutableInt.getValue()));
                             }
 
-                            typedx.getOptionalTyped(opticFinder4).ifPresent((typed) -> int2ObjectMap.put(i, Suppliers.memoize(() -> {
-                                    List<? extends Dynamic<?>> list = typed.getOptionalTyped(opticFinder6).map((typedx) -> typedx.write().result().map((dynamic) -> dynamic.asList(Function.identity())).orElse(Collections.emptyList())).orElse(Collections.emptyList());
-                                    long[] longs = (typed.get(DSL.remainderFinder())).get("data").asLongStream().toArray();
+                            typedIn2.getOptionalTyped(opticFinder4).ifPresent((typedIn3) -> int2ObjectMap.put(i, Suppliers.memoize(() -> {
+                                    List<? extends Dynamic<?>> list = typedIn3.getOptionalTyped(opticFinder6).map((typedIn4) -> typedIn4.write().result().map((dynamicIn2) -> dynamicIn2.asList(Function.identity())).orElse(Collections.emptyList())).orElse(Collections.emptyList());
+                                    long[] longs = (typedIn3.get(DSL.remainderFinder())).get("data").asLongStream().toArray();
                                     return new ChunkProtoTickListFix.PoorMansPalettedContainer(list, longs);
                                 })));
                         }
                     }));
                 byte b = mutableInt.getValue().byteValue();
-                typedx = typedx.update(DSL.remainderFinder(), (dynamicx) -> dynamicx.update("yPos", (dynamic) -> dynamic.createByte(b)));
+                typedx = typedx.update(DSL.remainderFinder(), (dynamicx) -> dynamicx.update("yPos", (dynamicIn) -> dynamicIn.createByte(b)));
                 if (!typedx.getOptionalTyped(opticFinder7).isPresent() && !dynamic.get("fluid_ticks").result().isPresent()) {
                     int i = dynamic.get("xPos").asInt(0);
                     int i2 = dynamic.get("zPos").asInt(0);
@@ -119,7 +119,7 @@ public class ChunkProtoTickListFix extends DataFix {
         int i6 = i4 >>> 4 & 15;
         int i7 = i4 >>> 8 & 15;
         String s = (String)function.apply(supplier != null ? ((ChunkProtoTickListFix.PoorMansPalettedContainer)supplier.get()).get(i5, i6, i7) : null);
-        return dynamic.createMap(ImmutableMap.builder().put(dynamic.createString("i"), dynamic.createString(s)).put(dynamic.createString("x"), dynamic.createInt(i * 16 + i5)).put(dynamic.createString("y"), dynamic.createInt(i2 * 16 + i6)).put(dynamic.createString("z"), dynamic.createInt(i3 * 16 + i7)).put(dynamic.createString("t"), dynamic.createInt(0)).put(dynamic.createString("p"), dynamic.createInt(0)).build());
+        return dynamic.createMap(ImmutableMap.<Dynamic<?>, Dynamic<?>>builder().put(dynamic.createString("i"), dynamic.createString(s)).put(dynamic.createString("x"), dynamic.createInt(i * 16 + i5)).put(dynamic.createString("y"), dynamic.createInt(i2 * 16 + i6)).put(dynamic.createString("z"), dynamic.createInt(i3 * 16 + i7)).put(dynamic.createString("t"), dynamic.createInt(0)).put(dynamic.createString("p"), dynamic.createInt(0)).build());
     }
 
     public static final class PoorMansPalettedContainer {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
index ab7931e277bfef1a6dfcb1acdb8995e8a951622b..28aebc40b4a980e0817e54882b915fe225251242 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
@@ -12,7 +12,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class ChunkStatusFix2 extends DataFix {
-    private static final Map<String, String> RENAMES_AND_DOWNGRADES = ImmutableMap.builder().put("structure_references", "empty").put("biomes", "empty").put("base", "surface").put("carved", "carvers").put("liquid_carved", "liquid_carvers").put("decorated", "features").put("lighted", "light").put("mobs_spawned", "spawn").put("finalized", "heightmaps").put("fullchunk", "full").build();
+    private static final Map<String, String> RENAMES_AND_DOWNGRADES = ImmutableMap.<String, String>builder().put("structure_references", "empty").put("biomes", "empty").put("base", "surface").put("carved", "carvers").put("liquid_carved", "liquid_carvers").put("decorated", "features").put("lighted", "light").put("mobs_spawned", "spawn").put("finalized", "heightmaps").put("fullchunk", "full").build();
 
     public ChunkStatusFix2(Schema schema, boolean flag) {
         super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
index fd900527afb969760c70feda9885d5b7cc050dcb..d9f5eeba5c135a2512ea2737aad81407e8e7029e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
@@ -11,7 +11,7 @@ import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Dynamic;
 
 public class ChunkStructuresTemplateRenameFix extends DataFix {
-    private static final ImmutableMap<String, Pair<String, ImmutableMap<String, String>>> RENAMES = ImmutableMap.builder().put("EndCity", Pair.of("ECP", ImmutableMap.builder().put("second_floor", "second_floor_1").put("third_floor", "third_floor_1").put("third_floor_c", "third_floor_2").build())).put("Mansion", Pair.of("WMP", ImmutableMap.builder().put("carpet_south", "carpet_south_1").put("carpet_west", "carpet_west_1").put("indoors_door", "indoors_door_1").put("indoors_wall", "indoors_wall_1").build())).put("Igloo", Pair.of("Iglu", ImmutableMap.builder().put("minecraft:igloo/igloo_bottom", "minecraft:igloo/bottom").put("minecraft:igloo/igloo_middle", "minecraft:igloo/middle").put("minecraft:igloo/igloo_top", "minecraft:igloo/top").build())).put("Ocean_Ruin", Pair.of("ORP", ImmutableMap.builder().put("minecraft:ruin/big_ruin1_brick", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_ruin2_brick", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_ruin3_brick", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_ruin8_brick", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_ruin1_cracked", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_ruin2_cracked", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_ruin3_cracked", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_ruin8_cracked", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_ruin1_mossy", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_ruin2_mossy", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_ruin3_mossy", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_ruin8_mossy", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_ruin_warm4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_ruin_warm5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_ruin_warm6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_ruin_warm7", "minecraft:underwater_ruin/big_warm_7").put("minecraft:ruin/ruin1_brick", "minecraft:underwater_ruin/brick_1").put("minecraft:ruin/ruin2_brick", "minecraft:underwater_ruin/brick_2").put("minecraft:ruin/ruin3_brick", "minecraft:underwater_ruin/brick_3").put("minecraft:ruin/ruin4_brick", "minecraft:underwater_ruin/brick_4").put("minecraft:ruin/ruin5_brick", "minecraft:underwater_ruin/brick_5").put("minecraft:ruin/ruin6_brick", "minecraft:underwater_ruin/brick_6").put("minecraft:ruin/ruin7_brick", "minecraft:underwater_ruin/brick_7").put("minecraft:ruin/ruin8_brick", "minecraft:underwater_ruin/brick_8").put("minecraft:ruin/ruin1_cracked", "minecraft:underwater_ruin/cracked_1").put("minecraft:ruin/ruin2_cracked", "minecraft:underwater_ruin/cracked_2").put("minecraft:ruin/ruin3_cracked", "minecraft:underwater_ruin/cracked_3").put("minecraft:ruin/ruin4_cracked", "minecraft:underwater_ruin/cracked_4").put("minecraft:ruin/ruin5_cracked", "minecraft:underwater_ruin/cracked_5").put("minecraft:ruin/ruin6_cracked", "minecraft:underwater_ruin/cracked_6").put("minecraft:ruin/ruin7_cracked", "minecraft:underwater_ruin/cracked_7").put("minecraft:ruin/ruin8_cracked", "minecraft:underwater_ruin/cracked_8").put("minecraft:ruin/ruin1_mossy", "minecraft:underwater_ruin/mossy_1").put("minecraft:ruin/ruin2_mossy", "minecraft:underwater_ruin/mossy_2").put("minecraft:ruin/ruin3_mossy", "minecraft:underwater_ruin/mossy_3").put("minecraft:ruin/ruin4_mossy", "minecraft:underwater_ruin/mossy_4").put("minecraft:ruin/ruin5_mossy", "minecraft:underwater_ruin/mossy_5").put("minecraft:ruin/ruin6_mossy", "minecraft:underwater_ruin/mossy_6").put("minecraft:ruin/ruin7_mossy", "minecraft:underwater_ruin/mossy_7").put("minecraft:ruin/ruin8_mossy", "minecraft:underwater_ruin/mossy_8").put("minecraft:ruin/ruin_warm1", "minecraft:underwater_ruin/warm_1").put("minecraft:ruin/ruin_warm2", "minecraft:underwater_ruin/warm_2").put("minecraft:ruin/ruin_warm3", "minecraft:underwater_ruin/warm_3").put("minecraft:ruin/ruin_warm4", "minecraft:underwater_ruin/warm_4").put("minecraft:ruin/ruin_warm5", "minecraft:underwater_ruin/warm_5").put("minecraft:ruin/ruin_warm6", "minecraft:underwater_ruin/warm_6").put("minecraft:ruin/ruin_warm7", "minecraft:underwater_ruin/warm_7").put("minecraft:ruin/ruin_warm8", "minecraft:underwater_ruin/warm_8").put("minecraft:ruin/big_brick_1", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_brick_2", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_brick_3", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_brick_8", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_mossy_1", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_mossy_2", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_mossy_3", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_mossy_8", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_cracked_1", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_cracked_2", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_cracked_3", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_cracked_8", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_warm_4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_warm_5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_warm_6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_warm_7", "minecraft:underwater_ruin/big_warm_7").build())).build();
+    private static final ImmutableMap<String, Pair<String, ImmutableMap<String, String>>> RENAMES = ImmutableMap.<String, Pair<String, ImmutableMap<String, String>>>builder().put("EndCity", Pair.of("ECP", ImmutableMap.<String, String>builder().put("second_floor", "second_floor_1").put("third_floor", "third_floor_1").put("third_floor_c", "third_floor_2").build())).put("Mansion", Pair.of("WMP", ImmutableMap.<String, String>builder().put("carpet_south", "carpet_south_1").put("carpet_west", "carpet_west_1").put("indoors_door", "indoors_door_1").put("indoors_wall", "indoors_wall_1").build())).put("Igloo", Pair.of("Iglu", ImmutableMap.<String, String>builder().put("minecraft:igloo/igloo_bottom", "minecraft:igloo/bottom").put("minecraft:igloo/igloo_middle", "minecraft:igloo/middle").put("minecraft:igloo/igloo_top", "minecraft:igloo/top").build())).put("Ocean_Ruin", Pair.of("ORP", ImmutableMap.<String, String>builder().put("minecraft:ruin/big_ruin1_brick", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_ruin2_brick", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_ruin3_brick", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_ruin8_brick", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_ruin1_cracked", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_ruin2_cracked", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_ruin3_cracked", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_ruin8_cracked", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_ruin1_mossy", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_ruin2_mossy", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_ruin3_mossy", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_ruin8_mossy", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_ruin_warm4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_ruin_warm5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_ruin_warm6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_ruin_warm7", "minecraft:underwater_ruin/big_warm_7").put("minecraft:ruin/ruin1_brick", "minecraft:underwater_ruin/brick_1").put("minecraft:ruin/ruin2_brick", "minecraft:underwater_ruin/brick_2").put("minecraft:ruin/ruin3_brick", "minecraft:underwater_ruin/brick_3").put("minecraft:ruin/ruin4_brick", "minecraft:underwater_ruin/brick_4").put("minecraft:ruin/ruin5_brick", "minecraft:underwater_ruin/brick_5").put("minecraft:ruin/ruin6_brick", "minecraft:underwater_ruin/brick_6").put("minecraft:ruin/ruin7_brick", "minecraft:underwater_ruin/brick_7").put("minecraft:ruin/ruin8_brick", "minecraft:underwater_ruin/brick_8").put("minecraft:ruin/ruin1_cracked", "minecraft:underwater_ruin/cracked_1").put("minecraft:ruin/ruin2_cracked", "minecraft:underwater_ruin/cracked_2").put("minecraft:ruin/ruin3_cracked", "minecraft:underwater_ruin/cracked_3").put("minecraft:ruin/ruin4_cracked", "minecraft:underwater_ruin/cracked_4").put("minecraft:ruin/ruin5_cracked", "minecraft:underwater_ruin/cracked_5").put("minecraft:ruin/ruin6_cracked", "minecraft:underwater_ruin/cracked_6").put("minecraft:ruin/ruin7_cracked", "minecraft:underwater_ruin/cracked_7").put("minecraft:ruin/ruin8_cracked", "minecraft:underwater_ruin/cracked_8").put("minecraft:ruin/ruin1_mossy", "minecraft:underwater_ruin/mossy_1").put("minecraft:ruin/ruin2_mossy", "minecraft:underwater_ruin/mossy_2").put("minecraft:ruin/ruin3_mossy", "minecraft:underwater_ruin/mossy_3").put("minecraft:ruin/ruin4_mossy", "minecraft:underwater_ruin/mossy_4").put("minecraft:ruin/ruin5_mossy", "minecraft:underwater_ruin/mossy_5").put("minecraft:ruin/ruin6_mossy", "minecraft:underwater_ruin/mossy_6").put("minecraft:ruin/ruin7_mossy", "minecraft:underwater_ruin/mossy_7").put("minecraft:ruin/ruin8_mossy", "minecraft:underwater_ruin/mossy_8").put("minecraft:ruin/ruin_warm1", "minecraft:underwater_ruin/warm_1").put("minecraft:ruin/ruin_warm2", "minecraft:underwater_ruin/warm_2").put("minecraft:ruin/ruin_warm3", "minecraft:underwater_ruin/warm_3").put("minecraft:ruin/ruin_warm4", "minecraft:underwater_ruin/warm_4").put("minecraft:ruin/ruin_warm5", "minecraft:underwater_ruin/warm_5").put("minecraft:ruin/ruin_warm6", "minecraft:underwater_ruin/warm_6").put("minecraft:ruin/ruin_warm7", "minecraft:underwater_ruin/warm_7").put("minecraft:ruin/ruin_warm8", "minecraft:underwater_ruin/warm_8").put("minecraft:ruin/big_brick_1", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_brick_2", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_brick_3", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_brick_8", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_mossy_1", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_mossy_2", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_mossy_3", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_mossy_8", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_cracked_1", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_cracked_2", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_cracked_3", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_cracked_8", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_warm_4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_warm_5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_warm_6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_warm_7", "minecraft:underwater_ruin/big_warm_7").build())).build();
 
     public ChunkStructuresTemplateRenameFix(Schema schema, boolean flag) {
         super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkToProtochunkFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkToProtochunkFix.java
index 2d6a80b797c27c7fc7bdec466e74acaf6cecfd68..e4bc4a57f3ce49c496bac83750fb48a189c693dc 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkToProtochunkFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkToProtochunkFix.java
@@ -36,7 +36,7 @@ public class ChunkToProtochunkFix extends DataFix {
         OpticFinder<?> opticFinder = DSL.fieldFinder("Level", type3);
         OpticFinder<?> opticFinder2 = DSL.fieldFinder("TileTicks", type5);
         return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("ChunkToProtoChunkFix", type, this.getOutputSchema().getType(References.CHUNK), (typed) -> typed.updateTyped(opticFinder, type4, (typedx) -> {
-                Optional<? extends Stream<? extends Dynamic<?>>> optional = typedx.getOptionalTyped(opticFinder2).flatMap((typed) -> typed.write().result()).flatMap((dynamicx) -> dynamicx.asStreamOpt().result());
+                Optional<? extends Stream<? extends Dynamic<?>>> optional = typedx.getOptionalTyped(opticFinder2).flatMap((typedIn) -> typedIn.write().result()).flatMap((dynamicx) -> dynamicx.asStreamOpt().result());
                 Dynamic<?> dynamic = typedx.get(DSL.remainderFinder());
                 boolean flag = dynamic.get("TerrainPopulated").asBoolean(false) && (!dynamic.get("LightPopulated").asNumber().result().isPresent() || dynamic.get("LightPopulated").asBoolean(false));
                 dynamic = dynamic.set("Status", dynamic.createString(flag ? "mobs_spawned" : "empty"));
@@ -60,7 +60,7 @@ public class ChunkToProtochunkFix extends DataFix {
                     Dynamic<?> dynamic2 = dynamic;
                     List<ShortList> list = IntStream.range(0, 16).mapToObj((ix) -> new ShortArrayList()).collect(Collectors.toList());
                     if (optional.isPresent()) {
-                        ((Stream)optional.get()).forEach((dynamicx) -> {
+                        optional.get().forEach((dynamicx) -> {
                             int i = dynamicx.get("x").asInt(0);
                             int i2 = dynamicx.get("y").asInt(0);
                             int i3 = dynamicx.get("z").asInt(0);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
index 4ab4d69d5c574bd93515975ee8dfa8fdaf232f27..e28af5a88e772514f8962487e0a4fabdffd04637 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
@@ -4,5 +4,5 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class DyeItemRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:cactus_green", "minecraft:green_dye").put("minecraft:rose_red", "minecraft:red_dye").put("minecraft:dandelion_yellow", "minecraft:yellow_dye").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:cactus_green", "minecraft:green_dye").put("minecraft:rose_red", "minecraft:red_dye").put("minecraft:dandelion_yellow", "minecraft:yellow_dye").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
index 92158735b92e2909780e3fede25bf1ae8de1e675..af73844c1130dd7ef042bcb7bca4d78dc01e53a8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
@@ -319,7 +319,7 @@ public class EntityBlockStateFix extends DataFix {
         Type<Either<Pair<String, Dynamic<?>>, Unit>> type2 = DSL.optional(DSL.field("BlockState", DSL.named(References.BLOCK_STATE.typeName(), DSL.remainderType())));
         Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
         return typed.update(type.finder(), type2, (either) -> {
-            int i = either.map((pair) -> (Integer)((Either)pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId), (unit) -> {
+            int i = either.map((pair) -> (Integer)pair.getSecond().map((integer) -> integer, EntityBlockStateFix::getBlockId), (unit) -> {
                 Optional<Number> optional = dynamic.get("TileID").asNumber().result();
                 return (Integer)optional.map(Number::intValue).orElseGet(() -> dynamic.get("Tile").asByte((byte)0) & 255);
             });
@@ -333,7 +333,7 @@ public class EntityBlockStateFix extends DataFix {
         Type<Pair<String, Dynamic<?>>> type2 = DSL.field(s3, DSL.named(References.BLOCK_STATE.typeName(), DSL.remainderType()));
         Dynamic<?> dynamic = typed.getOrCreate(DSL.remainderFinder());
         return typed.update(type.finder(), type2, (pair) -> {
-            int i = ((Either)pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId);
+            int i = pair.getSecond().map((integer) -> integer, EntityBlockStateFix::getBlockId);
             int i2 = dynamic.get(s2).asInt(0) & 15;
             return Pair.of(References.BLOCK_STATE.typeName(), BlockStateData.getTag(i << 4 | i2));
         }).set(DSL.remainderFinder(), dynamic.remove(s2));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
index 18834f82dd1bbdec870ffb20ff204006625c0c4f..aaf599a4ede02e6640d5ec2112854b0025f3eba7 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
@@ -5,8 +5,8 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class EntityCodSalmonFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:salmon_mob", "minecraft:salmon").put("minecraft:cod_mob", "minecraft:cod").build();
-    public static final Map<String, String> RENAMED_EGG_IDS = ImmutableMap.builder().put("minecraft:salmon_mob_spawn_egg", "minecraft:salmon_spawn_egg").put("minecraft:cod_mob_spawn_egg", "minecraft:cod_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:salmon_mob", "minecraft:salmon").put("minecraft:cod_mob", "minecraft:cod").build();
+    public static final Map<String, String> RENAMED_EGG_IDS = ImmutableMap.<String, String>builder().put("minecraft:salmon_mob_spawn_egg", "minecraft:salmon_spawn_egg").put("minecraft:cod_mob_spawn_egg", "minecraft:cod_spawn_egg").build();
 
     public EntityCodSalmonFix(Schema schema, boolean flag) {
         super("EntityCodSalmonFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
index 80d4719f1a85aaebe8ab6358123def4c020a6cae..86b6ad5421f251aca626d20f99b9e853e890b1ce 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
@@ -39,11 +39,11 @@ public class EntityEquipmentToArmorAndHandFix extends DataFix {
                 List<IS> list = optional.get();
                 IS object = (IS)(type.read(dynamic.emptyMap()).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created empty itemstack."))).getFirst();
                 if (!list.isEmpty()) {
-                    either = Either.left(Lists.newArrayList(new Object[]{list.get(0), object}));
+                    either = Either.left(Lists.newArrayList(list.get(0), object));
                 }
 
                 if (list.size() > 1) {
-                    List<IS> list2 = Lists.newArrayList(new Object[]{object, object, object, object});
+                    List<IS> list2 = Lists.newArrayList(object, object, object, object);
 
                     for(int i = 1; i < Math.min(list.size(), 5); ++i) {
                         list2.set(i - 1, list.get(i));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
index a8fbfef3f6afdadf5545e8062d42db06f4b42250..bf9b029315f830538729572fca53127624f3603e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
@@ -93,8 +93,8 @@ public class EntityIdFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
         Type<?> type2 = this.getOutputSchema().getType(References.ITEM_STACK);
         return TypeRewriteRule.seq(this.convertUnchecked("item stack entity name hook converter", type, type2), this.fixTypeEverywhere("EntityIdFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> (String)ID_MAP.getOrDefault(s, s))));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
index 75e58f5058a9ff1d5079b7eacab15b5b51776597..399b21112aadb2309d60237294fe6c72601d46eb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
@@ -22,8 +22,8 @@ public class EntityMinecartIdentifiersFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         return this.fixTypeEverywhere("EntityMinecartIdentifiersFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
                 if (!Objects.equals(pair.getFirst(), "Minecart")) {
                     return pair;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
index 453b2647c3cdeebc1d50ef77537ef0af9a9e8293..1d530a7013cd99c3e50bc4968416cbc5c3fccbff 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
@@ -6,7 +6,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityPufferfishRenameFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:puffer_fish_spawn_egg", "minecraft:pufferfish_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:puffer_fish_spawn_egg", "minecraft:pufferfish_spawn_egg").build();
 
     public EntityPufferfishRenameFix(Schema schema, boolean flag) {
         super("EntityPufferfishRenameFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
index 477a371e3a3c19aa1387832b89a86bcec2a1513e..a3d6ed68db43948cb432183519b2225abfbd4394 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
@@ -6,7 +6,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityRavagerRenameFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:illager_beast_spawn_egg", "minecraft:ravager_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:illager_beast_spawn_egg", "minecraft:ravager_spawn_egg").build();
 
     public EntityRavagerRenameFix(Schema schema, boolean flag) {
         super("EntityRavagerRenameFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
index c139b1927129ce0d6cde4a4db030b991a7a7a305..602387b1833ef806557776bc3136b891dc0c72e0 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
@@ -18,8 +18,8 @@ public abstract class EntityRenameFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         return this.fixTypeEverywhere(this.name, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
                 String s = (String)pair.getFirst();
                 Type<?> type = (Type)taggedChoiceType.types().get(s);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
index 2787bf3945ae8d9f58b38f4062987d09eeabcca8..6cf2aedb2fa7e5d583b9a176f1b9654f064a1e79 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
@@ -61,7 +61,7 @@ public class EntityRidingToPassengersFix extends DataFix {
                             return optional.orElseThrow(() -> new IllegalStateException("Should always have an entity tree here"));
                         }
 
-                        pair2 = (new Typed(type, dynamicOps, optional2.get())).getOptional(opticFinder).orElseThrow(() -> new IllegalStateException("Should always have an entity here"));
+                        pair2 = (new Typed<>(type, dynamicOps, optional2.get())).getOptional(opticFinder).orElseThrow(() -> new IllegalStateException("Should always have an entity here"));
                     }
                 }), this.writeAndRead("player RootVehicle injecter", type8, type9));
         }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
index 99f3abf08cd8d6118a8f05f16c3753ec8c68eb2f..3aa084bfaedb9633727b54fa6001ee407e2bb456 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
@@ -5,9 +5,9 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class EntityTheRenameningFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:commandblock_minecart", "minecraft:command_block_minecart").put("minecraft:ender_crystal", "minecraft:end_crystal").put("minecraft:snowman", "minecraft:snow_golem").put("minecraft:evocation_illager", "minecraft:evoker").put("minecraft:evocation_fangs", "minecraft:evoker_fangs").put("minecraft:illusion_illager", "minecraft:illusioner").put("minecraft:vindication_illager", "minecraft:vindicator").put("minecraft:villager_golem", "minecraft:iron_golem").put("minecraft:xp_orb", "minecraft:experience_orb").put("minecraft:xp_bottle", "minecraft:experience_bottle").put("minecraft:eye_of_ender_signal", "minecraft:eye_of_ender").put("minecraft:fireworks_rocket", "minecraft:firework_rocket").build();
-    public static final Map<String, String> RENAMED_BLOCKS = ImmutableMap.builder().put("minecraft:portal", "minecraft:nether_portal").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:stripped_oak_bark", "minecraft:stripped_oak_wood").put("minecraft:stripped_spruce_bark", "minecraft:stripped_spruce_wood").put("minecraft:stripped_birch_bark", "minecraft:stripped_birch_wood").put("minecraft:stripped_jungle_bark", "minecraft:stripped_jungle_wood").put("minecraft:stripped_acacia_bark", "minecraft:stripped_acacia_wood").put("minecraft:stripped_dark_oak_bark", "minecraft:stripped_dark_oak_wood").put("minecraft:mob_spawner", "minecraft:spawner").build();
-    public static final Map<String, String> RENAMED_ITEMS = ImmutableMap.builder().putAll(RENAMED_BLOCKS).put("minecraft:clownfish", "minecraft:tropical_fish").put("minecraft:chorus_fruit_popped", "minecraft:popped_chorus_fruit").put("minecraft:evocation_illager_spawn_egg", "minecraft:evoker_spawn_egg").put("minecraft:vindication_illager_spawn_egg", "minecraft:vindicator_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:commandblock_minecart", "minecraft:command_block_minecart").put("minecraft:ender_crystal", "minecraft:end_crystal").put("minecraft:snowman", "minecraft:snow_golem").put("minecraft:evocation_illager", "minecraft:evoker").put("minecraft:evocation_fangs", "minecraft:evoker_fangs").put("minecraft:illusion_illager", "minecraft:illusioner").put("minecraft:vindication_illager", "minecraft:vindicator").put("minecraft:villager_golem", "minecraft:iron_golem").put("minecraft:xp_orb", "minecraft:experience_orb").put("minecraft:xp_bottle", "minecraft:experience_bottle").put("minecraft:eye_of_ender_signal", "minecraft:eye_of_ender").put("minecraft:fireworks_rocket", "minecraft:firework_rocket").build();
+    public static final Map<String, String> RENAMED_BLOCKS = ImmutableMap.<String, String>builder().put("minecraft:portal", "minecraft:nether_portal").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:stripped_oak_bark", "minecraft:stripped_oak_wood").put("minecraft:stripped_spruce_bark", "minecraft:stripped_spruce_wood").put("minecraft:stripped_birch_bark", "minecraft:stripped_birch_wood").put("minecraft:stripped_jungle_bark", "minecraft:stripped_jungle_wood").put("minecraft:stripped_acacia_bark", "minecraft:stripped_acacia_wood").put("minecraft:stripped_dark_oak_bark", "minecraft:stripped_dark_oak_wood").put("minecraft:mob_spawner", "minecraft:spawner").build();
+    public static final Map<String, String> RENAMED_ITEMS = ImmutableMap.<String, String>builder().putAll(RENAMED_BLOCKS).put("minecraft:clownfish", "minecraft:tropical_fish").put("minecraft:chorus_fruit_popped", "minecraft:popped_chorus_fruit").put("minecraft:evocation_illager_spawn_egg", "minecraft:evoker_spawn_egg").put("minecraft:vindication_illager_spawn_egg", "minecraft:vindicator_spawn_egg").build();
     private static final String MINECRAFT_BRED = "minecraft:bred_";
 
     public EntityTheRenameningFix(Schema schema, boolean flag) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
index 1e3c6a8bec464897179899ca60d78a86b43ba243..1f832f5bc9db42a618e789cacb6d2d32b1c2107c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
@@ -62,9 +62,9 @@ public class EntityUUIDFix extends AbstractUUIDFix {
     }
 
     private static Dynamic<?> updatePiglin(Dynamic<?> dynamic) {
-        return dynamic.update("Brain", (dynamicx) -> dynamicx.update("memories", (dynamic) -> dynamic.update("minecraft:angry_at", (dynamicx) -> replaceUUIDString(dynamicx, "value", "value").orElseGet(() -> {
+        return dynamic.update("Brain", (dynamicx) -> dynamicx.update("memories", (dynamicIn) -> dynamicIn.update("minecraft:angry_at", (dynamicIn2) -> replaceUUIDString(dynamicIn2, "value", "value").orElseGet(() -> {
                         LOGGER.warn("angry_at has no value.");
-                        return dynamicx;
+                        return dynamicIn2;
                     }))));
     }
 
@@ -117,7 +117,7 @@ public class EntityUUIDFix extends AbstractUUIDFix {
     }
 
     public static Dynamic<?> updateLivingEntity(Dynamic<?> dynamic) {
-        return dynamic.update("Attributes", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> dynamicx.update("Modifiers", (dynamic2) -> dynamicx.createList(dynamic2.asStream().map((dynamic) -> replaceUUIDLeastMost(dynamic, "UUID", "UUID").orElse(dynamic)))))));
+        return dynamic.update("Attributes", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> dynamicx.update("Modifiers", (dynamicIn2) -> dynamicx.createList(dynamicIn2.asStream().map((dynamicIn3) -> replaceUUIDLeastMost(dynamicIn3, "UUID", "UUID").orElse(dynamicIn3)))))));
     }
 
     private static Dynamic<?> updateProjectile(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
index 474d047f94a638d026010f7b19ad3b1c14f66e41..86b7ab5bb3b298948ed8578d2eb8fb7dc7f5ff31 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
@@ -6,7 +6,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityZombifiedPiglinRenameFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:zombie_pigman_spawn_egg", "minecraft:zombified_piglin_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:zombie_pigman_spawn_egg", "minecraft:zombified_piglin_spawn_egg").build();
 
     public EntityZombifiedPiglinRenameFix(Schema schema) {
         super("EntityZombifiedPiglinRenameFix", schema, true);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java b/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
index 7b3b50ba4d430b200f791b8c41392e9d7b9b0981..731f5c89fba9dd9e5e595e0370ecfe79b30160cb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
@@ -24,6 +24,6 @@ public class ForcePoiRebuild extends DataFix {
     }
 
     private static <T> Dynamic<T> cap(Dynamic<T> dynamic) {
-        return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.remove("Valid"))));
+        return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond(((dynamicIn) -> dynamicIn.remove("Valid")))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
index 29a0c27bad66157a3b6f92bf08c7c8b40f046826..2f4aeef113caa0aba4e30c3dd29cbd445f4b3c21 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
@@ -50,8 +50,8 @@ public class FurnaceRecipeFix extends DataFix {
             int i3 = dynamic.get(s2).asInt(0);
             if (i3 > 0) {
                 optional.ifPresent((dynamicx) -> {
-                    Optional<? extends Pair<R, ? extends Dynamic<?>>> optional = type.read(dynamicx).result();
-                    optional.ifPresent((pair) -> list.add(Pair.of(pair.getFirst(), i3)));
+                    Optional<? extends Pair<R, ? extends Dynamic<?>>> optionalIn = type.read(dynamicx).result();
+                    optionalIn.ifPresent((pair) -> list.add(Pair.of(pair.getFirst(), i3)));
                 });
             }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
index 52e51a0a76a5b73f0d9daa7dae770dbf56d26c6f..d496524f3cc41951a463691a7df6a5e43a3fd57a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
@@ -12,6 +12,6 @@ public class GossipUUIDFix extends NamedEntityFix {
     }
 
     protected Typed<?> fix(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Gossips", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> AbstractUUIDFix.replaceUUIDLeastMost(dynamic, "Target", "Target").orElse(dynamic))).map(dynamicx::createList), dynamicx)));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Gossips", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicIn) -> AbstractUUIDFix.replaceUUIDLeastMost(dynamicIn, "Target", "Target").orElse(dynamicIn))).map(dynamicx::createList), dynamicx)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java b/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
index 83e7f2c00601fb69c078a2e5e3eb288b0091a11f..9c32be3cf3f20efbafa565b3d6f593702e324aa5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
@@ -23,7 +23,7 @@ public class IglooMetadataRemovalFix extends DataFix {
     }
 
     private static <T> Dynamic<T> removeIglooPieces(Dynamic<T> dynamic) {
-        return dynamic.asStreamOpt().map((stream) -> stream.filter((dynamic) -> !isIglooPiece(dynamic))).map(dynamic::createList).result().orElse(dynamic);
+        return dynamic.asStreamOpt().map((stream) -> stream.filter((dynamicIn) -> !isIglooPiece(dynamicIn))).map(dynamic::createList).result().orElse(dynamic);
     }
 
     private static boolean isIglooPiece(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
index 0162f7fc0c14fccdf7637ef439daafe8100e9c21..e13739ff6eda2fa20e9bcf718296cec8f1b66a37 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
@@ -20,7 +20,7 @@ public class ItemLoreFix extends DataFix {
     protected TypeRewriteRule makeRule() {
         Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
         OpticFinder<?> opticFinder = type.findField("tag");
-        return this.fixTypeEverywhereTyped("Item Lore componentize", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("display", (dynamicx) -> dynamicx.update("Lore", (dynamic) -> DataFixUtils.orElse(dynamic.asStreamOpt().map(ItemLoreFix::fixLoreList).map(dynamic::createList).result(), dynamic))))));
+        return this.fixTypeEverywhereTyped("Item Lore componentize", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("display", (dynamicx) -> dynamicx.update("Lore", (dynamicIn) -> DataFixUtils.orElse(dynamicIn.asStreamOpt().map(ItemLoreFix::fixLoreList).map(dynamicIn::createList).result(), dynamicIn))))));
     }
 
     private static <T> Stream<Dynamic<T>> fixLoreList(Stream<Dynamic<T>> stream) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
index c407f82326ff631ac1fb1344a41a5a87e6e07d0f..fed9a916b296910074bea760c4ba5991c0df47fe 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
@@ -61,11 +61,11 @@ public class ItemStackEnchantmentNamesFix extends DataFix {
     }
 
     private Dynamic<?> fixTag(Dynamic<?> dynamic) {
-        Optional<? extends Dynamic<?>> optional = dynamic.get("ench").asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.set("id", dynamic.createString((String)MAP.getOrDefault(dynamic.get("id").asInt(0), "null"))))).map(dynamic::createList).result();
+        Optional<? extends Dynamic<?>> optional = dynamic.get("ench").asStreamOpt().map((stream) -> stream.map((dynamicIn) -> dynamicIn.set("id", dynamicIn.createString((String)MAP.getOrDefault(dynamicIn.get("id").asInt(0), "null"))))).map(dynamic::createList).result();
         if (optional.isPresent()) {
             dynamic = dynamic.remove("ench").set("Enchantments", optional.get());
         }
 
-        return dynamic.update("StoredEnchantments", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.set("id", dynamic.createString((String)MAP.getOrDefault(dynamic.get("id").asInt(0), "null"))))).map(dynamicx::createList).result(), dynamicx));
+        return dynamic.update("StoredEnchantments", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamicIn) -> dynamicIn.set("id", dynamicIn.createString((String)MAP.getOrDefault(dynamicIn.get("id").asInt(0), "null"))))).map(dynamicx::createList).result(), dynamicx));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
index d9af7f13a6f4c9c8667106280b5477dd27618ddd..60fd953c79035011d1641902450c1db3e4230a7d 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
@@ -20,11 +20,11 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix {
     }
 
     public Dynamic<?> fixTag(Dynamic<?> dynamic) {
-        return dynamic.update("pages", (dynamic2) -> DataFixUtils.orElse(dynamic2.asStreamOpt().map((stream) -> stream.map((dynamic) -> {
-                    if (!dynamic.asString().result().isPresent()) {
-                        return dynamic;
+        return dynamic.update("pages", (dynamic2) -> DataFixUtils.orElse(dynamic2.asStreamOpt().map((stream) -> stream.map((dynamicIn) -> {
+                    if (!dynamicIn.asString().result().isPresent()) {
+                        return dynamicIn;
                     } else {
-                        String s = dynamic.asString("");
+                        String s = dynamicIn.asString("");
                         Component component = null;
                         if (!"null".equals(s) && !StringUtils.isEmpty(s)) {
                             if (s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"' || s.charAt(0) == '{' && s.charAt(s.length() - 1) == '}') {
@@ -60,7 +60,7 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix {
                             component = TextComponent.EMPTY;
                         }
 
-                        return dynamic.createString(Component.Serializer.toJson(component));
+                        return dynamicIn.createString(Component.Serializer.toJson(component));
                     }
                 })).map(dynamic::createList).result(), dynamic.emptyList()));
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java b/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
index c3c2e1e17d000e76d818807ad112dde8c21347f6..0cb5d6f58b66472a555479a7c66912f43371c10f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
@@ -10,7 +10,7 @@ import java.util.Map;
 import java.util.Optional;
 
 public class JigsawRotationFix extends DataFix {
-    private static final Map<String, String> RENAMES = ImmutableMap.builder().put("down", "down_south").put("up", "up_north").put("north", "north_up").put("south", "south_up").put("west", "west_up").put("east", "east_up").build();
+    private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("down", "down_south").put("up", "up_north").put("north", "north_up").put("south", "south_up").put("west", "west_up").put("east", "east_up").build();
 
     public JigsawRotationFix(Schema schema, boolean flag) {
         super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
index 7183ae5fb148fe4efd42af474ffe16bc437cb277..629cc5e62d2c1d3b4a21851c54f3b66fe0409232 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
@@ -73,10 +73,10 @@ public class LeavesFix extends DataFix {
             OpticFinder<?> opticFinder3 = DSL.typeFinder(type3);
             return this.fixTypeEverywhereTyped("Leaves fix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> {
                     int[] ints = new int[]{0};
-                    Typed<?> typed2 = typedx.updateTyped(opticFinder2, (typed) -> {
-                        Int2ObjectMap<LeavesFix.LeavesSection> int2ObjectMap = new Int2ObjectOpenHashMap(typed.getAllTyped(opticFinder3).stream().map((typedx) -> new LeavesFix.LeavesSection(typedx, this.getInputSchema())).collect(Collectors.toMap(LeavesFix.Section::getIndex, (leavesSection) -> leavesSection)));
+                    Typed<?> typed2 = typedx.updateTyped(opticFinder2, (typedIn) -> {
+                        Int2ObjectMap<LeavesFix.LeavesSection> int2ObjectMap = new Int2ObjectOpenHashMap(typedIn.getAllTyped(opticFinder3).stream().map((typedIn2) -> new LeavesFix.LeavesSection(typedIn2, this.getInputSchema())).collect(Collectors.toMap(LeavesFix.Section::getIndex, (leavesSection) -> leavesSection)));
                         if (int2ObjectMap.values().stream().allMatch(LeavesFix.Section::isSkippable)) {
-                            return typed;
+                            return typedIn;
                         } else {
                             List<IntSet> list = Lists.newArrayList();
 
@@ -135,7 +135,7 @@ public class LeavesFix extends DataFix {
                                 }
                             }
 
-                            return typed.updateTyped(opticFinder3, (typedx) -> ((LeavesFix.LeavesSection)int2ObjectMap.get((typedx.get(DSL.remainderFinder())).get("Y").asInt(0))).write(typedx));
+                            return typedIn.updateTyped(opticFinder3, (typedIn2) -> ((LeavesFix.LeavesSection)int2ObjectMap.get((typedIn2.get(DSL.remainderFinder())).get("Y").asInt(0))).write(typedIn2));
                         }
                     });
                     if (ints[0] != 0) {
@@ -295,7 +295,7 @@ public class LeavesFix extends DataFix {
                 throw new IllegalStateException("Block state type is not what was expected.");
             } else {
                 Optional<List<Pair<String, Dynamic<?>>>> optional = typed.getOptional(this.paletteFinder);
-                this.palette = optional.map((list) -> list.stream().map(Pair::getSecond).collect(Collectors.toList())).orElse(ImmutableList.of());
+                this.palette = (List) optional.map((list) -> list.stream().map(Pair::getSecond).collect(Collectors.toList())).orElse(ImmutableList.of());
                 Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
                 this.index = dynamic.get("Y").asInt(0);
                 this.readStorage(dynamic);
@@ -314,7 +314,7 @@ public class LeavesFix extends DataFix {
         }
 
         public Typed<?> write(Typed<?> typed) {
-            return this.isSkippable() ? typed : typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.set("BlockStates", dynamic.createLongList(Arrays.stream(this.storage.getRaw())))).set(this.paletteFinder, this.palette.stream().map((dynamic) -> Pair.of(References.BLOCK_STATE.typeName(), dynamic)).collect(Collectors.toList()));
+            return this.isSkippable() ? typed : typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.set("BlockStates", dynamic.createLongList(Arrays.stream(this.storage.getRaw())))).set((OpticFinder) this.paletteFinder, this.palette.stream().map((dynamic) -> Pair.of(References.BLOCK_STATE.typeName(), dynamic)).collect(Collectors.toList()));
         }
 
         public boolean isSkippable() {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
index fbe410a9a98f78629775a235198bfb4bb940eb2b..6463d3f3efe1aeb27bb6b941180829a23f82b35e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
@@ -59,16 +59,16 @@ public class LevelFlatGeneratorInfoFix extends DataFix {
                 stringBuilder.append((String)StreamSupport.stream(LAYER_SPLITTER.split(s3).spliterator(), false).map((sx) -> {
                     List<String> list = splitter.splitToList(sx);
                     int i2;
-                    String s2;
+                    String s2In;
                     if (list.size() == 2) {
                         i2 = NumberUtils.toInt((String)list.get(0));
-                        s2 = (String)list.get(1);
+                        s2In = (String)list.get(1);
                     } else {
                         i2 = 1;
-                        s2 = (String)list.get(0);
+                        s2In = (String)list.get(0);
                     }
 
-                    List<String> list2 = BLOCK_SPLITTER.splitToList(s2);
+                    List<String> list2 = BLOCK_SPLITTER.splitToList(s2In);
                     int i4 = ((String)list2.get(0)).equals("minecraft") ? 1 : 0;
                     String s4 = (String)list2.get(i4);
                     int i5 = i == 3 ? EntityBlockStateFix.getBlockId("minecraft:" + s4) : NumberUtils.toInt(s4, 0);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
index e589cb8e7ce5bfc97142ba3cedc2463b562e8562..f4d575c95d73718613a3513e69189d89d0bff9e5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
@@ -23,13 +23,13 @@ public class LevelUUIDFix extends AbstractUUIDFix {
     }
 
     private Dynamic<?> updateDragonFight(Dynamic<?> dynamic) {
-        return dynamic.update("DimensionData", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("DragonFight", (dynamicx) -> replaceUUIDLeastMost(dynamicx, "DragonUUID", "Dragon").orElse(dynamicx)))));
+        return dynamic.update("DimensionData", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicIn) -> dynamicIn.update("DragonFight", (dynamicIn2) -> replaceUUIDLeastMost(dynamicIn2, "DragonUUID", "Dragon").orElse(dynamicIn2)))));
     }
 
     private Dynamic<?> updateCustomBossEvents(Dynamic<?> dynamic) {
-        return dynamic.update("CustomBossEvents", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("Players", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> createUUIDFromML(dynamicx).orElseGet(() -> {
+        return dynamic.update("CustomBossEvents", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicIn) -> dynamicIn.update("Players", (dynamic2) -> dynamicIn.createList(dynamic2.asStream().map((dynamicIn2) -> createUUIDFromML(dynamicIn2).orElseGet(() -> {
                                 LOGGER.warn("CustomBossEvents contains invalid UUIDs.");
-                                return dynamicx;
+                                return dynamicIn2;
                             })))))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java b/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
index d968b56338b5c1fb7489c64edfbbd8085fad9ca3..1acbabaf3703a9308a2756f4bfdecab593c28544 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
@@ -50,7 +50,7 @@ public class MissingDimensionFix extends DataFix {
             return this.fixTypeEverywhereTyped("MissingDimensionFix", type2, (typed) -> typed.updateTyped(fieldFinder, (typed2) -> typed2.updateTyped(opticFinder, (typed2x) -> {
                         if (!(typed2x.getValue() instanceof List)) {
                             throw new IllegalStateException("List exptected");
-                        } else if ((typed2x.getValue()).isEmpty()) {
+                        } else if (((List)typed2x.getValue()).isEmpty()) {
                             Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
                             Dynamic<?> dynamic2 = this.recreateSettings(dynamic);
                             return DataFixUtils.orElse(compoundListType.readTyped(dynamic2).result().map(Pair::getFirst), typed2x);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
index f46a0e0129201aee7bc227b03d90c9c6a8daf54c..06281588fa5e6fcc640fbea4bfb942d8d26fa1b5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
@@ -32,10 +32,10 @@ public class MobSpawnerEntityIdentifiersFix extends DataFix {
 
             Optional<? extends Stream<? extends Dynamic<?>>> optional2 = dynamic.get("SpawnPotentials").asStreamOpt().result();
             if (optional2.isPresent()) {
-                dynamic = dynamic.set("SpawnPotentials", dynamic.createList(((Stream)optional2.get()).map((dynamicx) -> {
-                    Optional<String> optional = dynamicx.get("Type").asString().result();
-                    if (optional.isPresent()) {
-                        Dynamic<?> dynamic2 = (DataFixUtils.orElse(dynamicx.get("Properties").result(), dynamicx.emptyMap())).set("id", dynamicx.createString((String)optional.get()));
+                dynamic = dynamic.set("SpawnPotentials", dynamic.createList((optional2.get()).map((dynamicx) -> {
+                    Optional<String> optionalIn = dynamicx.get("Type").asString().result();
+                    if (optionalIn.isPresent()) {
+                        Dynamic<?> dynamic2 = (DataFixUtils.orElse(dynamicx.get("Properties").result(), dynamicx.emptyMap())).set("id", dynamicx.createString((String)optionalIn.get()));
                         return dynamicx.set("Entity", dynamic2).remove("Type").remove("Properties");
                     } else {
                         return dynamicx;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java b/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
index 69695f1d64c4a3da5f758e280bf676ddfb9a2149..5c016485c545b2970ad736777a03f8129f04355f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
@@ -34,7 +34,7 @@ public class NewVillageFix extends DataFix {
         OpticFinder<?> opticFinder2 = opticFinder.type().findField("Structures");
         OpticFinder<?> opticFinder3 = opticFinder2.type().findField("Starts");
         OpticFinder<List<Pair<String, SF>>> opticFinder4 = compoundListType.finder();
-        return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("NewVillageFix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.updateTyped(opticFinder3, (typedx) -> typedx.update(opticFinder4, (list) -> list.stream().filter((pair) -> !Objects.equals(pair.getFirst(), "Village")).map((pair) -> pair.mapFirst((s) -> s.equals("New_Village") ? "Village" : s)).collect(Collectors.toList()))).update(DSL.remainderFinder(), (dynamic) -> dynamic.update("References", (dynamicx) -> {
+        return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("NewVillageFix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.updateTyped(opticFinder3, (typedIn2) -> typedIn2.update(opticFinder4, (list) -> list.stream().filter((pair) -> !Objects.equals(pair.getFirst(), "Village")).map((pair) -> pair.mapFirst((s) -> s.equals("New_Village") ? "Village" : s)).collect(Collectors.toList()))).update(DSL.remainderFinder(), (dynamic) -> dynamic.update("References", (dynamicx) -> {
                             Optional<? extends Dynamic<?>> optional = dynamicx.get("New_Village").result();
                             return (DataFixUtils.orElse(optional.map((dynamic2) -> dynamicx.remove("New_Village").set("Village", dynamic2)), dynamicx)).remove("Village");
                         }))))), this.fixTypeEverywhereTyped("NewVillageStartFix", type2, (typed) -> typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("id", (dynamicx) -> Objects.equals(NamespacedSchema.ensureNamespaced(dynamicx.asString("")), "minecraft:new_village") ? dynamicx.createString("minecraft:village") : dynamicx))));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
index 62fcad9c9abd9ef77737352ccb57c6085b0bcf7c..9045fe84651448810f62d8a4f40fbcc43f27c4f2 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
@@ -158,6 +158,6 @@ public class OptionsKeyLwjgl3Fix extends DataFix {
                         } else {
                             return Pair.of(entry.getKey(), entry.getValue());
                         }
-                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse(dynamic)));
+                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse((Dynamic) dynamic)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java
index 518c64d127f65bbb8f9d1bebfd38ee43bd11ec83..002e4b17d647cbdef70d1e0b275de9a4aa6592b9 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java
@@ -24,6 +24,6 @@ public class OptionsKeyTranslationFix extends DataFix {
                         }
 
                         return Pair.of(entry.getKey(), entry.getValue());
-                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse(dynamic)));
+                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse((Dynamic) dynamic)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java b/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java
index a38fc4a8565c6290d0f81eee7bf3b9ff6b76bb30..d1c0b71c12f072177115c66895ecfe808996169d 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java
@@ -26,11 +26,11 @@ public abstract class PoiTypeRename extends DataFix {
     }
 
     private <T> Dynamic<T> cap(Dynamic<T> dynamic) {
-        return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("Records", (dynamicx) -> DataFixUtils.orElse(this.renameRecords(dynamicx), dynamicx)))));
+        return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicIn) -> dynamicIn.update("Records", (dynamicIn2) -> DataFixUtils.orElse(this.renameRecords(dynamicIn2), dynamicIn2)))));
     }
 
     private <T> Optional<Dynamic<T>> renameRecords(Dynamic<T> dynamic) {
-        return dynamic.asStreamOpt().map((stream) -> dynamic.createList(stream.map((dynamicx) -> dynamicx.update("type", (dynamic) -> DataFixUtils.orElse(dynamic.asString().map(this::rename).map(dynamic::createString).result(), dynamic))))).result();
+        return dynamic.asStreamOpt().map((stream) -> dynamic.createList(stream.map((dynamicx) -> dynamicx.update("type", (dynamicIn) -> DataFixUtils.orElse(dynamicIn.asString().map(this::rename).map(dynamicIn::createString).result(), dynamicIn))))).result();
     }
 
     protected abstract String rename(String var1);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
index cb0fee86cdcf2b29d51c3a95001a903d5b199a71..4a3a0310c3f44e002633d3f72109fdc19c9e947c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
@@ -5,7 +5,7 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class RecipesFix extends RecipesRenameFix {
-    private static final Map<String, String> RECIPES = ImmutableMap.builder().put("minecraft:acacia_wooden_slab", "minecraft:acacia_slab").put("minecraft:birch_wooden_slab", "minecraft:birch_slab").put("minecraft:black_stained_hardened_clay", "minecraft:black_terracotta").put("minecraft:blue_stained_hardened_clay", "minecraft:blue_terracotta").put("minecraft:boat", "minecraft:oak_boat").put("minecraft:bone_meal_from_block", "minecraft:bone_meal_from_bone_block").put("minecraft:bone_meal_from_bone", "minecraft:bone_meal").put("minecraft:brick_block", "minecraft:bricks").put("minecraft:brown_stained_hardened_clay", "minecraft:brown_terracotta").put("minecraft:chiseled_stonebrick", "minecraft:chiseled_stone_bricks").put("minecraft:cyan_stained_hardened_clay", "minecraft:cyan_terracotta").put("minecraft:dark_oak_wooden_slab", "minecraft:dark_oak_slab").put("minecraft:end_bricks", "minecraft:end_stone_bricks").put("minecraft:fence_gate", "minecraft:oak_fence_gate").put("minecraft:fence", "minecraft:oak_fence").put("minecraft:golden_rail", "minecraft:powered_rail").put("minecraft:gold_ingot_from_block", "minecraft:gold_ingot_from_gold_block").put("minecraft:gray_stained_hardened_clay", "minecraft:gray_terracotta").put("minecraft:green_stained_hardened_clay", "minecraft:green_terracotta").put("minecraft:iron_ingot_from_block", "minecraft:iron_ingot_from_iron_block").put("minecraft:jungle_wooden_slab", "minecraft:jungle_slab").put("minecraft:light_blue_stained_hardened_clay", "minecraft:light_blue_terracotta").put("minecraft:light_gray_stained_hardened_clay", "minecraft:light_gray_terracotta").put("minecraft:lime_stained_hardened_clay", "minecraft:lime_terracotta").put("minecraft:lit_pumpkin", "minecraft:jack_o_lantern").put("minecraft:magenta_stained_hardened_clay", "minecraft:magenta_terracotta").put("minecraft:magma", "minecraft:magma_block").put("minecraft:melon_block", "minecraft:melon").put("minecraft:mossy_stonebrick", "minecraft:mossy_stone_bricks").put("minecraft:noteblock", "minecraft:note_block").put("minecraft:oak_wooden_slab", "minecraft:oak_slab").put("minecraft:orange_stained_hardened_clay", "minecraft:orange_terracotta").put("minecraft:pillar_quartz_block", "minecraft:quartz_pillar").put("minecraft:pink_stained_hardened_clay", "minecraft:pink_terracotta").put("minecraft:purple_shulker_box", "minecraft:shulker_box").put("minecraft:purple_stained_hardened_clay", "minecraft:purple_terracotta").put("minecraft:red_nether_brick", "minecraft:red_nether_bricks").put("minecraft:red_stained_hardened_clay", "minecraft:red_terracotta").put("minecraft:slime", "minecraft:slime_block").put("minecraft:smooth_red_sandstone", "minecraft:cut_red_sandstone").put("minecraft:smooth_sandstone", "minecraft:cut_sandstone").put("minecraft:snow_layer", "minecraft:snow").put("minecraft:snow", "minecraft:snow_block").put("minecraft:speckled_melon", "minecraft:glistering_melon_slice").put("minecraft:spruce_wooden_slab", "minecraft:spruce_slab").put("minecraft:stonebrick", "minecraft:stone_bricks").put("minecraft:stone_stairs", "minecraft:cobblestone_stairs").put("minecraft:string_to_wool", "minecraft:white_wool_from_string").put("minecraft:trapdoor", "minecraft:oak_trapdoor").put("minecraft:white_stained_hardened_clay", "minecraft:white_terracotta").put("minecraft:wooden_button", "minecraft:oak_button").put("minecraft:wooden_door", "minecraft:oak_door").put("minecraft:wooden_pressure_plate", "minecraft:oak_pressure_plate").put("minecraft:yellow_stained_hardened_clay", "minecraft:yellow_terracotta").build();
+    private static final Map<String, String> RECIPES = ImmutableMap.<String, String>builder().put("minecraft:acacia_wooden_slab", "minecraft:acacia_slab").put("minecraft:birch_wooden_slab", "minecraft:birch_slab").put("minecraft:black_stained_hardened_clay", "minecraft:black_terracotta").put("minecraft:blue_stained_hardened_clay", "minecraft:blue_terracotta").put("minecraft:boat", "minecraft:oak_boat").put("minecraft:bone_meal_from_block", "minecraft:bone_meal_from_bone_block").put("minecraft:bone_meal_from_bone", "minecraft:bone_meal").put("minecraft:brick_block", "minecraft:bricks").put("minecraft:brown_stained_hardened_clay", "minecraft:brown_terracotta").put("minecraft:chiseled_stonebrick", "minecraft:chiseled_stone_bricks").put("minecraft:cyan_stained_hardened_clay", "minecraft:cyan_terracotta").put("minecraft:dark_oak_wooden_slab", "minecraft:dark_oak_slab").put("minecraft:end_bricks", "minecraft:end_stone_bricks").put("minecraft:fence_gate", "minecraft:oak_fence_gate").put("minecraft:fence", "minecraft:oak_fence").put("minecraft:golden_rail", "minecraft:powered_rail").put("minecraft:gold_ingot_from_block", "minecraft:gold_ingot_from_gold_block").put("minecraft:gray_stained_hardened_clay", "minecraft:gray_terracotta").put("minecraft:green_stained_hardened_clay", "minecraft:green_terracotta").put("minecraft:iron_ingot_from_block", "minecraft:iron_ingot_from_iron_block").put("minecraft:jungle_wooden_slab", "minecraft:jungle_slab").put("minecraft:light_blue_stained_hardened_clay", "minecraft:light_blue_terracotta").put("minecraft:light_gray_stained_hardened_clay", "minecraft:light_gray_terracotta").put("minecraft:lime_stained_hardened_clay", "minecraft:lime_terracotta").put("minecraft:lit_pumpkin", "minecraft:jack_o_lantern").put("minecraft:magenta_stained_hardened_clay", "minecraft:magenta_terracotta").put("minecraft:magma", "minecraft:magma_block").put("minecraft:melon_block", "minecraft:melon").put("minecraft:mossy_stonebrick", "minecraft:mossy_stone_bricks").put("minecraft:noteblock", "minecraft:note_block").put("minecraft:oak_wooden_slab", "minecraft:oak_slab").put("minecraft:orange_stained_hardened_clay", "minecraft:orange_terracotta").put("minecraft:pillar_quartz_block", "minecraft:quartz_pillar").put("minecraft:pink_stained_hardened_clay", "minecraft:pink_terracotta").put("minecraft:purple_shulker_box", "minecraft:shulker_box").put("minecraft:purple_stained_hardened_clay", "minecraft:purple_terracotta").put("minecraft:red_nether_brick", "minecraft:red_nether_bricks").put("minecraft:red_stained_hardened_clay", "minecraft:red_terracotta").put("minecraft:slime", "minecraft:slime_block").put("minecraft:smooth_red_sandstone", "minecraft:cut_red_sandstone").put("minecraft:smooth_sandstone", "minecraft:cut_sandstone").put("minecraft:snow_layer", "minecraft:snow").put("minecraft:snow", "minecraft:snow_block").put("minecraft:speckled_melon", "minecraft:glistering_melon_slice").put("minecraft:spruce_wooden_slab", "minecraft:spruce_slab").put("minecraft:stonebrick", "minecraft:stone_bricks").put("minecraft:stone_stairs", "minecraft:cobblestone_stairs").put("minecraft:string_to_wool", "minecraft:white_wool_from_string").put("minecraft:trapdoor", "minecraft:oak_trapdoor").put("minecraft:white_stained_hardened_clay", "minecraft:white_terracotta").put("minecraft:wooden_button", "minecraft:oak_button").put("minecraft:wooden_door", "minecraft:oak_door").put("minecraft:wooden_pressure_plate", "minecraft:oak_pressure_plate").put("minecraft:yellow_stained_hardened_clay", "minecraft:yellow_terracotta").build();
 
     public RecipesFix(Schema schema, boolean flag) {
         super(schema, flag, "Recipes fix", (s) -> (String)RECIPES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
index 2c1190d423d75f809a88b28c4a472026482b171d..958847faa5883e3435ba9baf4240d7b9dbc58965 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
@@ -5,7 +5,7 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class RecipesRenameningFix extends RecipesRenameFix {
-    private static final Map<String, String> RECIPES = ImmutableMap.builder().put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").build();
+    private static final Map<String, String> RECIPES = ImmutableMap.<String, String>builder().put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").build();
 
     public RecipesRenameningFix(Schema schema, boolean flag) {
         super(schema, flag, "Recipes renamening fix", (s) -> (String)RECIPES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
index fe9ccf1b7bfece293d5c3df8a299629e1cdf4e4a..f6715f7bfa1103aed8946ae4c690f94f9b91fc1b 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
@@ -23,13 +23,13 @@ public class RedstoneWireConnectionsFix extends DataFix {
             String s2 = dynamicx.get("west").asString("none");
             String s3 = dynamicx.get("north").asString("none");
             String s4 = dynamicx.get("south").asString("none");
-            boolean flag = isConnected(s) || isConnected(s2);
+            boolean flagIn = isConnected(s) || isConnected(s2);
             boolean flag2 = isConnected(s3) || isConnected(s4);
             String s5 = !isConnected(s) && !flag2 ? "side" : s;
             String s6 = !isConnected(s2) && !flag2 ? "side" : s2;
-            String s7 = !isConnected(s3) && !flag ? "side" : s3;
-            String s8 = !isConnected(s4) && !flag ? "side" : s4;
-            return dynamicx.update("east", (dynamic) -> dynamic.createString(s5)).update("west", (dynamic) -> dynamic.createString(s6)).update("north", (dynamic) -> dynamic.createString(s7)).update("south", (dynamic) -> dynamic.createString(s8));
+            String s7 = !isConnected(s3) && !flagIn ? "side" : s3;
+            String s8 = !isConnected(s4) && !flagIn ? "side" : s4;
+            return dynamicx.update("east", (dynamicIn) -> dynamicIn.createString(s5)).update("west", (dynamicIn2) -> dynamicIn2.createString(s6)).update("north", (dynamicIn3) -> dynamicIn3.createString(s7)).update("south", (dynamicIn4) -> dynamicIn4.createString(s8));
         });
     }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
index d3f00a724eed7b30be7715efb72ad96b5b054280..a50273f8c740d3d55567ee0ce7a59f65d68a258c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
@@ -4,5 +4,5 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class RenamedCoralFansFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:tube_coral_fan", "minecraft:tube_coral_wall_fan").put("minecraft:brain_coral_fan", "minecraft:brain_coral_wall_fan").put("minecraft:bubble_coral_fan", "minecraft:bubble_coral_wall_fan").put("minecraft:fire_coral_fan", "minecraft:fire_coral_wall_fan").put("minecraft:horn_coral_fan", "minecraft:horn_coral_wall_fan").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:tube_coral_fan", "minecraft:tube_coral_wall_fan").put("minecraft:brain_coral_fan", "minecraft:brain_coral_wall_fan").put("minecraft:bubble_coral_fan", "minecraft:bubble_coral_wall_fan").put("minecraft:fire_coral_fan", "minecraft:fire_coral_wall_fan").put("minecraft:horn_coral_fan", "minecraft:horn_coral_wall_fan").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
index c233f609568e42e10939e3d990805a74dcf735e3..defba40c27926c5e9b9a8b6b8c55711495fcc51e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
@@ -4,5 +4,5 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class RenamedCoralFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:blue_coral", "minecraft:tube_coral_block").put("minecraft:pink_coral", "minecraft:brain_coral_block").put("minecraft:purple_coral", "minecraft:bubble_coral_block").put("minecraft:red_coral", "minecraft:fire_coral_block").put("minecraft:yellow_coral", "minecraft:horn_coral_block").put("minecraft:blue_coral_plant", "minecraft:tube_coral").put("minecraft:pink_coral_plant", "minecraft:brain_coral").put("minecraft:purple_coral_plant", "minecraft:bubble_coral").put("minecraft:red_coral_plant", "minecraft:fire_coral").put("minecraft:yellow_coral_plant", "minecraft:horn_coral").put("minecraft:blue_coral_fan", "minecraft:tube_coral_fan").put("minecraft:pink_coral_fan", "minecraft:brain_coral_fan").put("minecraft:purple_coral_fan", "minecraft:bubble_coral_fan").put("minecraft:red_coral_fan", "minecraft:fire_coral_fan").put("minecraft:yellow_coral_fan", "minecraft:horn_coral_fan").put("minecraft:blue_dead_coral", "minecraft:dead_tube_coral").put("minecraft:pink_dead_coral", "minecraft:dead_brain_coral").put("minecraft:purple_dead_coral", "minecraft:dead_bubble_coral").put("minecraft:red_dead_coral", "minecraft:dead_fire_coral").put("minecraft:yellow_dead_coral", "minecraft:dead_horn_coral").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:blue_coral", "minecraft:tube_coral_block").put("minecraft:pink_coral", "minecraft:brain_coral_block").put("minecraft:purple_coral", "minecraft:bubble_coral_block").put("minecraft:red_coral", "minecraft:fire_coral_block").put("minecraft:yellow_coral", "minecraft:horn_coral_block").put("minecraft:blue_coral_plant", "minecraft:tube_coral").put("minecraft:pink_coral_plant", "minecraft:brain_coral").put("minecraft:purple_coral_plant", "minecraft:bubble_coral").put("minecraft:red_coral_plant", "minecraft:fire_coral").put("minecraft:yellow_coral_plant", "minecraft:horn_coral").put("minecraft:blue_coral_fan", "minecraft:tube_coral_fan").put("minecraft:pink_coral_fan", "minecraft:brain_coral_fan").put("minecraft:purple_coral_fan", "minecraft:bubble_coral_fan").put("minecraft:red_coral_fan", "minecraft:fire_coral_fan").put("minecraft:yellow_coral_fan", "minecraft:horn_coral_fan").put("minecraft:blue_dead_coral", "minecraft:dead_tube_coral").put("minecraft:pink_dead_coral", "minecraft:dead_brain_coral").put("minecraft:purple_dead_coral", "minecraft:dead_bubble_coral").put("minecraft:red_dead_coral", "minecraft:dead_fire_coral").put("minecraft:yellow_dead_coral", "minecraft:dead_horn_coral").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
index e08b92d89ecdc550b26b4414edcd549435eb2061..329f612e473a5feebabbd7175af574b51c0b2e9e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
@@ -11,9 +11,9 @@ public class SavedDataUUIDFix extends AbstractUUIDFix {
     }
 
     protected TypeRewriteRule makeRule() {
-        return this.fixTypeEverywhereTyped("SavedDataUUIDFix", this.getInputSchema().getType(this.typeReference), (typed) -> typed.updateTyped(typed.getType().findField("data"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Raids", (dynamicx) -> dynamicx.createList(dynamicx.asStream().map((dynamic) -> dynamic.update("HeroesOfTheVillage", (dynamicx) -> dynamicx.createList(dynamicx.asStream().map((dynamic) -> createUUIDFromLongs(dynamic, "UUIDMost", "UUIDLeast").orElseGet(() -> {
+        return this.fixTypeEverywhereTyped("SavedDataUUIDFix", this.getInputSchema().getType(this.typeReference), (typed) -> typed.updateTyped(typed.getType().findField("data"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Raids", (dynamicx) -> dynamicx.createList(dynamicx.asStream().map((dynamicIn) -> dynamicIn.update("HeroesOfTheVillage", (dynamicIn2) -> dynamicIn2.createList(dynamicIn2.asStream().map((dynamicIn3) -> createUUIDFromLongs(dynamicIn3, "UUIDMost", "UUIDLeast").orElseGet(() -> {
                                         LOGGER.warn("HeroesOfTheVillage contained invalid UUIDs.");
-                                        return dynamic;
+                                        return dynamicIn3;
                                     }))))))))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
index 38e587bf513c6f0d5ccccb2c518062ca1beb6067..b8069c15c86b2c206bce82789e519e55fca824b6 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
@@ -19,18 +19,18 @@ public abstract class SimplestEntityRenameFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         Type<Pair<String, String>> type = DSL.named(References.ENTITY_NAME.typeName(), NamespacedSchema.namespacedString());
         if (!Objects.equals(this.getOutputSchema().getType(References.ENTITY_NAME), type)) {
             throw new IllegalStateException("Entity name type is not what was expected.");
         } else {
             return TypeRewriteRule.seq(this.fixTypeEverywhere(this.name, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> {
                         String s2 = this.rename(s);
-                        Type<?> type = (Type)taggedChoiceType.types().get(s);
+                        Type<?> typeIn = (Type)taggedChoiceType.types().get(s);
                         Type<?> type2 = (Type)taggedChoiceType2.types().get(s2);
-                        if (!type2.equals(type, true, true)) {
-                            throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", type2, type));
+                        if (!type2.equals(typeIn, true, true)) {
+                            throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", type2, typeIn));
                         } else {
                             return s2;
                         }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java
index aa4662d680f8b34eeb07d3482bf1b2f35462dc90..8a7fb02d27218dad6110b2e667cb3ab423f0d4fb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java
@@ -33,9 +33,9 @@ public class SpawnerDataFix extends DataFix {
 
     private <T> Typed<T> wrapSpawnPotentialsToWeightedEntries(Type<T> type, Typed<?> typed) {
         DynamicOps<?> dynamicOps = typed.getOps();
-        List<?> list = typed.getValue();
+        List<?> list = (List<?>) typed.getValue();
         List<?> list2 = list.stream().map((object) -> {
-            Pair<Object, Dynamic<?>> pair = object;
+            Pair<Object, Dynamic<?>> pair = (Pair<Object, Dynamic<?>>) object;
             int i = ((Number)(pair.getSecond()).get("Weight").asNumber().result().orElse(1)).intValue();
             Dynamic<?> dynamic = new Dynamic(dynamicOps);
             dynamic = dynamic.set("weight", dynamic.createInt(i));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
index 722ebc760c66bbb16a685ddc570f7f48f3dacaec..eadeb3095028999e42b011efce4106d98e2e95ca 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
@@ -20,13 +20,13 @@ import javax.annotation.Nullable;
 import org.apache.commons.lang3.StringUtils;
 
 public class StatsCounterFix extends DataFix {
-    private static final Set<String> SKIP = ImmutableSet.builder().add("stat.craftItem.minecraft.spawn_egg").add("stat.useItem.minecraft.spawn_egg").add("stat.breakItem.minecraft.spawn_egg").add("stat.pickup.minecraft.spawn_egg").add("stat.drop.minecraft.spawn_egg").build();
-    private static final Map<String, String> CUSTOM_MAP = ImmutableMap.builder().put("stat.leaveGame", "minecraft:leave_game").put("stat.playOneMinute", "minecraft:play_one_minute").put("stat.timeSinceDeath", "minecraft:time_since_death").put("stat.sneakTime", "minecraft:sneak_time").put("stat.walkOneCm", "minecraft:walk_one_cm").put("stat.crouchOneCm", "minecraft:crouch_one_cm").put("stat.sprintOneCm", "minecraft:sprint_one_cm").put("stat.swimOneCm", "minecraft:swim_one_cm").put("stat.fallOneCm", "minecraft:fall_one_cm").put("stat.climbOneCm", "minecraft:climb_one_cm").put("stat.flyOneCm", "minecraft:fly_one_cm").put("stat.diveOneCm", "minecraft:dive_one_cm").put("stat.minecartOneCm", "minecraft:minecart_one_cm").put("stat.boatOneCm", "minecraft:boat_one_cm").put("stat.pigOneCm", "minecraft:pig_one_cm").put("stat.horseOneCm", "minecraft:horse_one_cm").put("stat.aviateOneCm", "minecraft:aviate_one_cm").put("stat.jump", "minecraft:jump").put("stat.drop", "minecraft:drop").put("stat.damageDealt", "minecraft:damage_dealt").put("stat.damageTaken", "minecraft:damage_taken").put("stat.deaths", "minecraft:deaths").put("stat.mobKills", "minecraft:mob_kills").put("stat.animalsBred", "minecraft:animals_bred").put("stat.playerKills", "minecraft:player_kills").put("stat.fishCaught", "minecraft:fish_caught").put("stat.talkedToVillager", "minecraft:talked_to_villager").put("stat.tradedWithVillager", "minecraft:traded_with_villager").put("stat.cakeSlicesEaten", "minecraft:eat_cake_slice").put("stat.cauldronFilled", "minecraft:fill_cauldron").put("stat.cauldronUsed", "minecraft:use_cauldron").put("stat.armorCleaned", "minecraft:clean_armor").put("stat.bannerCleaned", "minecraft:clean_banner").put("stat.brewingstandInteraction", "minecraft:interact_with_brewingstand").put("stat.beaconInteraction", "minecraft:interact_with_beacon").put("stat.dropperInspected", "minecraft:inspect_dropper").put("stat.hopperInspected", "minecraft:inspect_hopper").put("stat.dispenserInspected", "minecraft:inspect_dispenser").put("stat.noteblockPlayed", "minecraft:play_noteblock").put("stat.noteblockTuned", "minecraft:tune_noteblock").put("stat.flowerPotted", "minecraft:pot_flower").put("stat.trappedChestTriggered", "minecraft:trigger_trapped_chest").put("stat.enderchestOpened", "minecraft:open_enderchest").put("stat.itemEnchanted", "minecraft:enchant_item").put("stat.recordPlayed", "minecraft:play_record").put("stat.furnaceInteraction", "minecraft:interact_with_furnace").put("stat.craftingTableInteraction", "minecraft:interact_with_crafting_table").put("stat.chestOpened", "minecraft:open_chest").put("stat.sleepInBed", "minecraft:sleep_in_bed").put("stat.shulkerBoxOpened", "minecraft:open_shulker_box").build();
+    private static final Set<String> SKIP = ImmutableSet.<String>builder().add("stat.craftItem.minecraft.spawn_egg").add("stat.useItem.minecraft.spawn_egg").add("stat.breakItem.minecraft.spawn_egg").add("stat.pickup.minecraft.spawn_egg").add("stat.drop.minecraft.spawn_egg").build();
+    private static final Map<String, String> CUSTOM_MAP = ImmutableMap.<String, String>builder().put("stat.leaveGame", "minecraft:leave_game").put("stat.playOneMinute", "minecraft:play_one_minute").put("stat.timeSinceDeath", "minecraft:time_since_death").put("stat.sneakTime", "minecraft:sneak_time").put("stat.walkOneCm", "minecraft:walk_one_cm").put("stat.crouchOneCm", "minecraft:crouch_one_cm").put("stat.sprintOneCm", "minecraft:sprint_one_cm").put("stat.swimOneCm", "minecraft:swim_one_cm").put("stat.fallOneCm", "minecraft:fall_one_cm").put("stat.climbOneCm", "minecraft:climb_one_cm").put("stat.flyOneCm", "minecraft:fly_one_cm").put("stat.diveOneCm", "minecraft:dive_one_cm").put("stat.minecartOneCm", "minecraft:minecart_one_cm").put("stat.boatOneCm", "minecraft:boat_one_cm").put("stat.pigOneCm", "minecraft:pig_one_cm").put("stat.horseOneCm", "minecraft:horse_one_cm").put("stat.aviateOneCm", "minecraft:aviate_one_cm").put("stat.jump", "minecraft:jump").put("stat.drop", "minecraft:drop").put("stat.damageDealt", "minecraft:damage_dealt").put("stat.damageTaken", "minecraft:damage_taken").put("stat.deaths", "minecraft:deaths").put("stat.mobKills", "minecraft:mob_kills").put("stat.animalsBred", "minecraft:animals_bred").put("stat.playerKills", "minecraft:player_kills").put("stat.fishCaught", "minecraft:fish_caught").put("stat.talkedToVillager", "minecraft:talked_to_villager").put("stat.tradedWithVillager", "minecraft:traded_with_villager").put("stat.cakeSlicesEaten", "minecraft:eat_cake_slice").put("stat.cauldronFilled", "minecraft:fill_cauldron").put("stat.cauldronUsed", "minecraft:use_cauldron").put("stat.armorCleaned", "minecraft:clean_armor").put("stat.bannerCleaned", "minecraft:clean_banner").put("stat.brewingstandInteraction", "minecraft:interact_with_brewingstand").put("stat.beaconInteraction", "minecraft:interact_with_beacon").put("stat.dropperInspected", "minecraft:inspect_dropper").put("stat.hopperInspected", "minecraft:inspect_hopper").put("stat.dispenserInspected", "minecraft:inspect_dispenser").put("stat.noteblockPlayed", "minecraft:play_noteblock").put("stat.noteblockTuned", "minecraft:tune_noteblock").put("stat.flowerPotted", "minecraft:pot_flower").put("stat.trappedChestTriggered", "minecraft:trigger_trapped_chest").put("stat.enderchestOpened", "minecraft:open_enderchest").put("stat.itemEnchanted", "minecraft:enchant_item").put("stat.recordPlayed", "minecraft:play_record").put("stat.furnaceInteraction", "minecraft:interact_with_furnace").put("stat.craftingTableInteraction", "minecraft:interact_with_crafting_table").put("stat.chestOpened", "minecraft:open_chest").put("stat.sleepInBed", "minecraft:sleep_in_bed").put("stat.shulkerBoxOpened", "minecraft:open_shulker_box").build();
     private static final String BLOCK_KEY = "stat.mineBlock";
     private static final String NEW_BLOCK_KEY = "minecraft:mined";
-    private static final Map<String, String> ITEM_KEYS = ImmutableMap.builder().put("stat.craftItem", "minecraft:crafted").put("stat.useItem", "minecraft:used").put("stat.breakItem", "minecraft:broken").put("stat.pickup", "minecraft:picked_up").put("stat.drop", "minecraft:dropped").build();
-    private static final Map<String, String> ENTITY_KEYS = ImmutableMap.builder().put("stat.entityKilledBy", "minecraft:killed_by").put("stat.killEntity", "minecraft:killed").build();
-    private static final Map<String, String> ENTITIES = ImmutableMap.builder().put("Bat", "minecraft:bat").put("Blaze", "minecraft:blaze").put("CaveSpider", "minecraft:cave_spider").put("Chicken", "minecraft:chicken").put("Cow", "minecraft:cow").put("Creeper", "minecraft:creeper").put("Donkey", "minecraft:donkey").put("ElderGuardian", "minecraft:elder_guardian").put("Enderman", "minecraft:enderman").put("Endermite", "minecraft:endermite").put("EvocationIllager", "minecraft:evocation_illager").put("Ghast", "minecraft:ghast").put("Guardian", "minecraft:guardian").put("Horse", "minecraft:horse").put("Husk", "minecraft:husk").put("Llama", "minecraft:llama").put("LavaSlime", "minecraft:magma_cube").put("MushroomCow", "minecraft:mooshroom").put("Mule", "minecraft:mule").put("Ozelot", "minecraft:ocelot").put("Parrot", "minecraft:parrot").put("Pig", "minecraft:pig").put("PolarBear", "minecraft:polar_bear").put("Rabbit", "minecraft:rabbit").put("Sheep", "minecraft:sheep").put("Shulker", "minecraft:shulker").put("Silverfish", "minecraft:silverfish").put("SkeletonHorse", "minecraft:skeleton_horse").put("Skeleton", "minecraft:skeleton").put("Slime", "minecraft:slime").put("Spider", "minecraft:spider").put("Squid", "minecraft:squid").put("Stray", "minecraft:stray").put("Vex", "minecraft:vex").put("Villager", "minecraft:villager").put("VindicationIllager", "minecraft:vindication_illager").put("Witch", "minecraft:witch").put("WitherSkeleton", "minecraft:wither_skeleton").put("Wolf", "minecraft:wolf").put("ZombieHorse", "minecraft:zombie_horse").put("PigZombie", "minecraft:zombie_pigman").put("ZombieVillager", "minecraft:zombie_villager").put("Zombie", "minecraft:zombie").build();
+    private static final Map<String, String> ITEM_KEYS = ImmutableMap.<String, String>builder().put("stat.craftItem", "minecraft:crafted").put("stat.useItem", "minecraft:used").put("stat.breakItem", "minecraft:broken").put("stat.pickup", "minecraft:picked_up").put("stat.drop", "minecraft:dropped").build();
+    private static final Map<String, String> ENTITY_KEYS = ImmutableMap.<String, String>builder().put("stat.entityKilledBy", "minecraft:killed_by").put("stat.killEntity", "minecraft:killed").build();
+    private static final Map<String, String> ENTITIES = ImmutableMap.<String, String>builder().put("Bat", "minecraft:bat").put("Blaze", "minecraft:blaze").put("CaveSpider", "minecraft:cave_spider").put("Chicken", "minecraft:chicken").put("Cow", "minecraft:cow").put("Creeper", "minecraft:creeper").put("Donkey", "minecraft:donkey").put("ElderGuardian", "minecraft:elder_guardian").put("Enderman", "minecraft:enderman").put("Endermite", "minecraft:endermite").put("EvocationIllager", "minecraft:evocation_illager").put("Ghast", "minecraft:ghast").put("Guardian", "minecraft:guardian").put("Horse", "minecraft:horse").put("Husk", "minecraft:husk").put("Llama", "minecraft:llama").put("LavaSlime", "minecraft:magma_cube").put("MushroomCow", "minecraft:mooshroom").put("Mule", "minecraft:mule").put("Ozelot", "minecraft:ocelot").put("Parrot", "minecraft:parrot").put("Pig", "minecraft:pig").put("PolarBear", "minecraft:polar_bear").put("Rabbit", "minecraft:rabbit").put("Sheep", "minecraft:sheep").put("Shulker", "minecraft:shulker").put("Silverfish", "minecraft:silverfish").put("SkeletonHorse", "minecraft:skeleton_horse").put("Skeleton", "minecraft:skeleton").put("Slime", "minecraft:slime").put("Spider", "minecraft:spider").put("Squid", "minecraft:squid").put("Stray", "minecraft:stray").put("Vex", "minecraft:vex").put("Villager", "minecraft:villager").put("VindicationIllager", "minecraft:vindication_illager").put("Witch", "minecraft:witch").put("WitherSkeleton", "minecraft:wither_skeleton").put("Wolf", "minecraft:wolf").put("ZombieHorse", "minecraft:zombie_horse").put("PigZombie", "minecraft:zombie_pigman").put("ZombieVillager", "minecraft:zombie_villager").put("Zombie", "minecraft:zombie").build();
     private static final String NEW_CUSTOM_KEY = "minecraft:custom";
 
     public StatsCounterFix(Schema schema, boolean flag) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
index 8237b1eac30fc214bbbe7951286360d86b2a931c..157e31cc84e3aba07fd2a7fc0f42064a71e0c0da 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
@@ -35,7 +35,7 @@ public class StatsRenameFix extends DataFix {
         } else {
             OpticFinder<?> opticFinder2 = DSL.namedChoice("minecraft:custom", type3);
             OpticFinder<String> opticFinder3 = DSL.fieldFinder("id", NamespacedSchema.namespacedString());
-            return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
+            return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
         }
     }
 
@@ -45,6 +45,6 @@ public class StatsRenameFix extends DataFix {
         OpticFinder<?> opticFinder = type2.findField("stats");
         OpticFinder<?> opticFinder2 = opticFinder.type().findField("minecraft:custom");
         OpticFinder<String> opticFinder3 = NamespacedSchema.namespacedString().finder();
-        return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
+        return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java b/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
index e0e127b61356bd6d318fe571483d798f53b5ba92..27ffae56403e601857c6b5b595d14addc4662853 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
@@ -69,19 +69,19 @@ public class TrappedChestBlockEntityFix extends DataFix {
                             Dynamic<?> dynamic = typedx.get(DSL.remainderFinder());
                             int i3 = dynamic.get("xPos").asInt(0);
                             int i4 = dynamic.get("zPos").asInt(0);
-                            TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
-                            return typedx.updateTyped(opticFinder, (typed) -> typed.updateTyped(taggedChoiceType.finder(), (typedx) -> {
-                                    Dynamic<?> dynamic = typedx.getOrCreate(DSL.remainderFinder());
-                                    int i3 = dynamic.get("x").asInt(0) - (i3 << 4);
-                                    int i4 = dynamic.get("y").asInt(0);
-                                    int i5 = dynamic.get("z").asInt(0) - (i4 << 4);
-                                    return intSet.contains(LeavesFix.getIndex(i3, i4, i5)) ? typedx.update(taggedChoiceType.finder(), (pair) -> pair.mapFirst((s) -> {
+                            TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
+                            return typedx.updateTyped(opticFinder, (typedIn) -> typedIn.updateTyped(taggedChoiceType.finder(), (typedIn2) -> {
+                                    Dynamic<?> dynamicIn = typedIn2.getOrCreate(DSL.remainderFinder());
+                                    int x = dynamicIn.get("x").asInt(0) - (i3 << 4);
+                                    int y = dynamicIn.get("y").asInt(0);
+                                    int z = dynamicIn.get("z").asInt(0) - (i4 << 4);
+                                    return intSet.contains(LeavesFix.getIndex(x, y, z)) ? typedIn2.update(taggedChoiceType.finder(), (pair) -> pair.mapFirst((s) -> {
                                             if (!Objects.equals(s, "minecraft:chest")) {
                                                 LOGGER.warn("Block Entity was expected to be a chest");
                                             }
 
                                             return "minecraft:trapped_chest";
-                                        })) : typedx;
+                                        })) : typedIn2;
                                 }));
                         }
                     })));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
index 020f2b6dae6e255960c4743060793a54c66eab5e..938b5e6cfdc7019e3099f3834f7136f720e81682 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
@@ -37,7 +37,7 @@ public class VillagerRebuildLevelAndXpFix extends DataFix {
                 int i = dynamic.get("VillagerData").get("level").asInt(0);
                 Typed<?> typed2 = typedx;
                 if (i == 0 || i == 1) {
-                    int i2 = typedx.getOptionalTyped(opticFinder2).flatMap((typed) -> typed.getOptionalTyped(opticFinder3)).map((typed) -> typed.getAllTyped(opticFinder4).size()).orElse(0);
+                    int i2 = typedx.getOptionalTyped(opticFinder2).flatMap((typedIn) -> typedIn.getOptionalTyped(opticFinder3)).map((typedIn) -> typedIn.getAllTyped(opticFinder4).size()).orElse(0);
                     i = Mth.clamp(i2 / 2, 1, 5);
                     if (i > 1) {
                         typed2 = addLevel(typedx, i);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
index 815ea87dd01a4ff81becf0803303d6b723fffc1e..c6ef560b029993b909e47fb537452f39b126f3b1 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
@@ -31,7 +31,7 @@ public class VillagerTradeFix extends NamedEntityFix {
             OpticFinder<?> opticFinder6 = type2.findField("sell");
             OpticFinder<Pair<String, String>> opticFinder7 = DSL.fieldFinder("id", DSL.named(References.ITEM_NAME.typeName(), NamespacedSchema.namespacedString()));
             Function<Typed<?>, Typed<?>> function = (typedx) -> this.updateItemStack(opticFinder7, typedx);
-            return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.updateTyped(opticFinder3, (typedx) -> typedx.updateTyped(opticFinder4, function).updateTyped(opticFinder5, function).updateTyped(opticFinder6, function))));
+            return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.updateTyped(opticFinder3, (typedIn2) -> typedIn2.updateTyped(opticFinder4, function).updateTyped(opticFinder5, function).updateTyped(opticFinder6, function))));
         }
     }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java
index 94b062fd846f2561fd4ad92dd228b537d532c555..acc7f88b2b3b351ab2d38b9494a762681cb91580 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java
@@ -16,7 +16,7 @@ public class WorldGenSettingsDisallowOldCustomWorldsFix extends DataFix {
         OpticFinder<?> opticFinder = type.findField("dimensions");
         return this.fixTypeEverywhereTyped("WorldGenSettingsDisallowOldCustomWorldsFix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> {
                 typedx.write().map((dynamic) -> dynamic.getMapValues().map((map) -> {
-                        map.forEach((dynamic, dynamic2) -> {
+                        map.forEach((dynamicIn, dynamic2) -> {
                             if (dynamic2.get("type").asString().result().isEmpty()) {
                                 throw new IllegalStateException("Unable load old custom worlds.");
                             }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
index bd6d5f28c53e57b7f9448622d3e74565b33aa311..4cfd68e37af0e7d3ed16feb9ca083671da550cf8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
@@ -33,7 +33,7 @@ public class WorldGenSettingsFix extends DataFix {
     private static final String END_CITY = "minecraft:endcity";
     private static final String WOODLAND_MANSION = "minecraft:mansion";
     private static final String OCEAN_MONUMENT = "minecraft:monument";
-    private static final ImmutableMap<String, WorldGenSettingsFix.StructureFeatureConfiguration> DEFAULTS = ImmutableMap.builder().put("minecraft:village", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 10387312)).put("minecraft:desert_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357617)).put("minecraft:igloo", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357618)).put("minecraft:jungle_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357619)).put("minecraft:swamp_hut", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357620)).put("minecraft:pillager_outpost", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 165745296)).put("minecraft:monument", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 5, 10387313)).put("minecraft:endcity", new WorldGenSettingsFix.StructureFeatureConfiguration(20, 11, 10387313)).put("minecraft:mansion", new WorldGenSettingsFix.StructureFeatureConfiguration(80, 20, 10387319)).build();
+    private static final ImmutableMap<String, WorldGenSettingsFix.StructureFeatureConfiguration> DEFAULTS = ImmutableMap.<String, WorldGenSettingsFix.StructureFeatureConfiguration>builder().put("minecraft:village", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 10387312)).put("minecraft:desert_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357617)).put("minecraft:igloo", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357618)).put("minecraft:jungle_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357619)).put("minecraft:swamp_hut", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357620)).put("minecraft:pillager_outpost", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 165745296)).put("minecraft:monument", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 5, 10387313)).put("minecraft:endcity", new WorldGenSettingsFix.StructureFeatureConfiguration(20, 11, 10387313)).put("minecraft:mansion", new WorldGenSettingsFix.StructureFeatureConfiguration(80, 20, 10387319)).build();
 
     public WorldGenSettingsFix(Schema schema) {
         super(schema, true);
@@ -48,7 +48,7 @@ public class WorldGenSettingsFix extends DataFix {
     }
 
     private static <T> Dynamic<T> vanillaBiomeSource(Dynamic<T> dynamic, long l, boolean flag, boolean flag2) {
-        Builder<Dynamic<T>, Dynamic<T>> builder = ImmutableMap.builder().put(dynamic.createString("type"), dynamic.createString("minecraft:vanilla_layered")).put(dynamic.createString("seed"), dynamic.createLong(l)).put(dynamic.createString("large_biomes"), dynamic.createBoolean(flag2));
+        Builder<Dynamic<T>, Dynamic<T>> builder = ImmutableMap.<Dynamic<T>, Dynamic<T>>builder().put(dynamic.createString("type"), dynamic.createString("minecraft:vanilla_layered")).put(dynamic.createString("seed"), dynamic.createLong(l)).put(dynamic.createString("large_biomes"), dynamic.createBoolean(flag2));
         if (flag) {
             builder.put(dynamic.createString("legacy_biome_init_layer"), dynamic.createBoolean(flag));
         }
@@ -143,9 +143,9 @@ public class WorldGenSettingsFix extends DataFix {
             map.put("minecraft:village", (WorldGenSettingsFix.StructureFeatureConfiguration)DEFAULTS.get("minecraft:village"));
         }
 
-        optionalDynamic.get("structures").flatMap(Dynamic::getMapValues).result().ifPresent((map2) -> map2.forEach((dynamic, dynamic2) -> dynamic2.getMapValues().result().ifPresent((map2) -> map2.forEach((dynamic2, dynamic3) -> {
+        optionalDynamic.get("structures").flatMap(Dynamic::getMapValues).result().ifPresent((map2) -> map2.forEach((dynamic, dynamic2) -> dynamic2.getMapValues().result().ifPresent((map2In) -> map2In.forEach((dynamic2In, dynamic3) -> {
                         String s = dynamic.asString("");
-                        String s2 = dynamic2.asString("");
+                        String s2 = dynamic2In.asString("");
                         String s3 = dynamic3.asString("");
                         if ("stronghold".equals(s)) {
                             mutableBoolean.setTrue();
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java
index f3e0ff57a11be7b0d2976db3428b365256e3e8bc..30dddc944504e53261ac9bd930c03a08059f09f8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java
@@ -33,27 +33,27 @@ public class WorldGenSettingsHeightAndBiomeFix extends DataFix {
             boolean flag2 = optionalDynamic.asBoolean(true);
             return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.remove("has_increased_height_already")).updateTyped(opticFinder, type3, (typedx) -> {
                 Dynamic<?> dynamic = typedx.write().result().orElseThrow(() -> new IllegalStateException("Malformed WorldGenSettings.dimensions"));
-                dynamic = dynamic.update("minecraft:overworld", (dynamicx) -> dynamicx.update("generator", (dynamic) -> {
-                        String s = dynamic.get("type").asString("");
+                dynamic = dynamic.update("minecraft:overworld", (dynamicx) -> dynamicx.update("generator", (dynamicIn) -> {
+                        String s = dynamicIn.get("type").asString("");
                         if ("minecraft:noise".equals(s)) {
                             MutableBoolean mutableBoolean = new MutableBoolean();
-                            dynamic = dynamic.update("biome_source", (dynamicx) -> {
-                                String s = dynamicx.get("type").asString("");
-                                if ("minecraft:vanilla_layered".equals(s) || flag && "minecraft:multi_noise".equals(s)) {
-                                    if (dynamicx.get("large_biomes").asBoolean(false)) {
+                            dynamicIn = dynamicIn.update("biome_source", (dynamicxIn2) -> {
+                                String typeIn = dynamicxIn2.get("type").asString("");
+                                if ("minecraft:vanilla_layered".equals(typeIn) || flag && "minecraft:multi_noise".equals(typeIn)) {
+                                    if (dynamicxIn2.get("large_biomes").asBoolean(false)) {
                                         mutableBoolean.setTrue();
                                     }
 
-                                    return dynamicx.createMap(ImmutableMap.of(dynamicx.createString("preset"), dynamicx.createString("minecraft:overworld"), dynamicx.createString("type"), dynamicx.createString("minecraft:multi_noise")));
+                                    return dynamicxIn2.createMap(ImmutableMap.of(dynamicxIn2.createString("preset"), dynamicxIn2.createString("minecraft:overworld"), dynamicxIn2.createString("type"), dynamicxIn2.createString("minecraft:multi_noise")));
                                 } else {
-                                    return dynamicx;
+                                    return dynamicxIn2;
                                 }
                             });
-                            return mutableBoolean.booleanValue() ? dynamic.update("settings", (dynamicx) -> "minecraft:overworld".equals(dynamicx.asString("")) ? dynamicx.createString("minecraft:large_biomes") : dynamicx) : dynamic;
+                            return mutableBoolean.booleanValue() ? dynamicIn.update("settings", (dynamicxIn3) -> "minecraft:overworld".equals(dynamicxIn3.asString("")) ? dynamicxIn3.createString("minecraft:large_biomes") : dynamicxIn3) : dynamicIn;
                         } else if ("minecraft:flat".equals(s)) {
-                            return flag2 ? dynamic : dynamic.update("settings", (dynamicx) -> dynamicx.update("layers", WorldGenSettingsHeightAndBiomeFix::updateLayers));
+                            return flag2 ? dynamicIn : dynamicIn.update("settings", (dynamicxIn4) -> dynamicxIn4.update("layers", WorldGenSettingsHeightAndBiomeFix::updateLayers));
                         } else {
-                            return dynamic;
+                            return dynamicIn;
                         }
                     }));
                 return (type3.readTyped(dynamic).result().orElseThrow(() -> new IllegalStateException("WorldGenSettingsHeightAndBiomeFix failed."))).getFirst();
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java b/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
index 0d2da421f69fb3253a097761e990034616eab28b..0956a7e5fa04296758ed52fb357ceec7db9cb54d 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
@@ -46,11 +46,11 @@ public class V1451_6 extends NamespacedSchema {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
             Dynamic<T> dynamic = new Dynamic(dynamicOps, object);
             Optional<Dynamic<T>> optional = dynamic.get("CriteriaType").get().get().left().flatMap((dynamic2) -> {
-                Optional<String> optional = dynamic2.get("type").asString().get().left();
-                Optional<String> optional2 = dynamic2.get("id").asString().get().left();
-                if (optional.isPresent() && optional2.isPresent()) {
-                    String s = (String)optional.get();
-                    return s.equals("_special") ? Optional.of(dynamic.createString((String)optional2.get())) : Optional.of(dynamic2.createString(this.packWithDot(s) + ":" + this.packWithDot((String)optional2.get())));
+                Optional<String> typeOptional = dynamic2.get("type").asString().get().left();
+                Optional<String> idOptional = dynamic2.get("id").asString().get().left();
+                if (typeOptional.isPresent() && idOptional.isPresent()) {
+                    String s = (String)typeOptional.get();
+                    return s.equals("_special") ? Optional.of(dynamic.createString((String)idOptional.get())) : Optional.of(dynamic2.createString(this.packWithDot(s) + ":" + this.packWithDot((String)idOptional.get())));
                 } else {
                     return Optional.empty();
                 }
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V704.java b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
index 9cfda62a5341f052d46b97f32927c3c5f1921189..00ba7dd4d61b91cba0866e69d2d016fff678c342 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V704.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
@@ -138,7 +138,7 @@ public class V704 extends Schema {
     });
     protected static final HookFunction ADD_NAMES = new HookFunction() {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-            return V99.addNames(new Dynamic(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "ArmorStand");
+            return V99.addNames(new Dynamic<>(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "ArmorStand");
         }
     };
 
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V705.java b/src/main/java/net/minecraft/util/datafix/schemas/V705.java
index 4c5f62c5b60826da77f9e71170d83bd1174c8831..d112911d628e7abffec2805dec315764f27ccc11 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V705.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V705.java
@@ -14,7 +14,7 @@ import net.minecraft.util.datafix.fixes.References;
 public class V705 extends NamespacedSchema {
     protected static final HookFunction ADD_NAMES = new HookFunction() {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-            return V99.addNames(new Dynamic(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "minecraft:armor_stand");
+            return V99.addNames(new Dynamic<>(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "minecraft:armor_stand");
         }
     };
 
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V99.java b/src/main/java/net/minecraft/util/datafix/schemas/V99.java
index f064673a2dc00ef9c5d4380082d0caec9db033a2..679e4154c7690cb139a4371ba4fd4f77c54489a0 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V99.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V99.java
@@ -54,7 +54,7 @@ public class V99 extends Schema {
     });
     protected static final HookFunction ADD_NAMES = new HookFunction() {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-            return V99.addNames(new Dynamic(dynamicOps, object), V99.ITEM_TO_BLOCKENTITY, "ArmorStand");
+            return V99.addNames(new Dynamic<>(dynamicOps, object), V99.ITEM_TO_BLOCKENTITY, "ArmorStand");
         }
     };
 
@@ -206,14 +206,14 @@ public class V99 extends Schema {
 
     protected static <T> T addNames(Dynamic<T> dynamic, Map<String, String> map, String s) {
         return (T)dynamic.update("tag", (dynamic2) -> dynamic2.update("BlockEntityTag", (dynamic2x) -> {
-                String s = (String)dynamic.get("id").asString().result().map(NamespacedSchema::ensureNamespaced).orElse("minecraft:air");
-                if (!"minecraft:air".equals(s)) {
-                    String s2 = (String)map.get(s);
+                String id = (String)dynamic.get("id").asString().result().map(NamespacedSchema::ensureNamespaced).orElse("minecraft:air");
+                if (!"minecraft:air".equals(id)) {
+                    String s2 = (String)map.get(id);
                     if (s2 != null) {
                         return dynamic2x.set("id", dynamic.createString(s2));
                     }
 
-                    LOGGER.warn("Unable to resolve BlockEntity for ItemStack: {}", s);
+                    LOGGER.warn("Unable to resolve BlockEntity for ItemStack: {}", id);
                 }
 
                 return dynamic2x;
diff --git a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
index 6936faa16ec6cdda640428e27ca1f12befa9fefa..6495d793744822484f21b420f0022d8f83c2963c 100644
--- a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
+++ b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
@@ -43,7 +43,7 @@ public class FilledProfileResults implements ProfileResults {
         }
     };
     private static final Splitter SPLITTER = Splitter.on('\u001e');
-    private static final Comparator<Entry<String, FilledProfileResults.CounterCollector>> COUNTER_ENTRY_COMPARATOR = Entry.comparingByValue(Comparator.comparingLong((counterCollector) -> counterCollector.totalValue)).reversed();
+    private static final Comparator<Entry<String, FilledProfileResults.CounterCollector>> COUNTER_ENTRY_COMPARATOR = Entry.<String, CounterCollector>comparingByValue(Comparator.comparingLong((counterCollector) -> counterCollector.totalValue)).reversed();
     private final Map<String, ? extends ProfilerPathEntry> entries;
     private final long startTimeNano;
     private final int startTimeTicks;
@@ -124,7 +124,7 @@ public class FilledProfileResults implements ProfileResults {
             Object2LongMap<String> object2LongMap = profilerPathEntry.getCounters();
             if (!object2LongMap.isEmpty()) {
                 List<String> list = SPLITTER.splitToList(s);
-                object2LongMap.forEach((sx, l) -> ((FilledProfileResults.CounterCollector)map.computeIfAbsent(sx, (s) -> new FilledProfileResults.CounterCollector())).addValue(list.iterator(), l));
+                object2LongMap.forEach((sx, l) -> ((FilledProfileResults.CounterCollector)map.computeIfAbsent(sx, (str) -> new FilledProfileResults.CounterCollector())).addValue(list.iterator(), l));
             }
 
         });
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java b/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java
index bd15cc0f8c6a1a34e1f72e5855c41853f80074cd..445aca154f262388be61217fcd9de2c3c78a9a88 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java
@@ -20,32 +20,12 @@ import net.minecraft.util.profiling.jfr.stats.TimedStatSummary;
 import net.minecraft.world.level.chunk.ChunkStatus;
 
 public record JfrStatsResult(Instant recordingStarted, Instant recordingEnded, Duration recordingDuration, Duration worldCreationDuration, List<TickTimeStat> tickTimes, List<CpuLoadStat> cpuLoadStats, GcHeapStat.Summary heapSummary, ThreadAllocationStat.Summary threadAllocationSummary, NetworkPacketSummary receivedPacketsSummary, NetworkPacketSummary sentPacketsSummary, FileIOStat.Summary fileWrites, FileIOStat.Summary fileReads, List<ChunkGenStat> chunkGenStats) {
-    @Nullable
-
-    public JfrStatsResult(Instant instant, Instant instant2, Duration duration, @Nullable Duration duration2, List<TickTimeStat> list, List<CpuLoadStat> list2, GcHeapStat.Summary summary, ThreadAllocationStat.Summary summary2, NetworkPacketSummary networkPacketSummary, NetworkPacketSummary networkPacketSummary2, FileIOStat.Summary summary3, FileIOStat.Summary summary4, List<ChunkGenStat> list3) {
-        this.recordingStarted = instant;
-        this.recordingEnded = instant2;
-        this.recordingDuration = duration;
-        this.worldCreationDuration = duration2;
-        this.tickTimes = list;
-        this.cpuLoadStats = list2;
-        this.heapSummary = summary;
-        this.threadAllocationSummary = summary2;
-        this.receivedPacketsSummary = networkPacketSummary;
-        this.sentPacketsSummary = networkPacketSummary2;
-        this.fileWrites = summary3;
-        this.fileReads = summary4;
-        this.chunkGenStats = list3;
-    }
-
     public List<Pair<ChunkStatus, TimedStatSummary<ChunkGenStat>>> chunkGenSummary() {
         Map<ChunkStatus, List<ChunkGenStat>> map = this.chunkGenStats.stream().collect(Collectors.groupingBy(ChunkGenStat::status));
-        return map.entrySet().stream().map((entry) -> Pair.of((ChunkStatus)entry.getKey(), TimedStatSummary.summary(entry.getValue()))).sorted(Comparator.comparing((pair) -> ((TimedStatSummary)pair.getSecond()).totalDuration()).reversed()).toList();
+        return map.entrySet().stream().map((entry) -> Pair.of((ChunkStatus)entry.getKey(), TimedStatSummary.summary(entry.getValue()))).sorted(Comparator.<Pair<ChunkStatus, TimedStatSummary<ChunkGenStat>>, Duration>comparing((pair) -> pair.getSecond().totalDuration()).reversed()).toList();
     }
 
     public String asJson() {
         return (new JfrResultJsonSerializer()).format(this);
     }
-
-    @Nullable
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java b/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java
index c33abb25520b7436b5c21dd80fbb8fc086e3fcc5..f1a50e3895e9a1290fee5583bf06d2abd1df05a0 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java
@@ -81,14 +81,14 @@ public class JfrResultJsonSerializer {
             JsonObject jsonObject3 = Util.make(new JsonObject(), (jsonObject2x) -> jsonObject2.add("durationNanosPercentiles", jsonObject2x));
             timedStatSummary.percentilesNanos().forEach((integer, d) -> jsonObject3.addProperty("p" + integer, d));
             Function<ChunkGenStat, JsonElement> function = (chunkGenStat) -> {
-                JsonObject jsonObject = new JsonObject();
-                jsonObject.addProperty("durationNanos", chunkGenStat.duration().toNanos());
-                jsonObject.addProperty("level", chunkGenStat.level());
-                jsonObject.addProperty("chunkPosX", chunkGenStat.chunkPos().x);
-                jsonObject.addProperty("chunkPosZ", chunkGenStat.chunkPos().z);
-                jsonObject.addProperty("worldPosX", chunkGenStat.worldPos().x);
-                jsonObject.addProperty("worldPosZ", chunkGenStat.worldPos().z);
-                return jsonObject;
+                JsonObject jsonObjectIn = new JsonObject();
+                jsonObjectIn.addProperty("durationNanos", chunkGenStat.duration().toNanos());
+                jsonObjectIn.addProperty("level", chunkGenStat.level());
+                jsonObjectIn.addProperty("chunkPosX", chunkGenStat.chunkPos().x);
+                jsonObjectIn.addProperty("chunkPosZ", chunkGenStat.chunkPos().z);
+                jsonObjectIn.addProperty("worldPosX", chunkGenStat.worldPos().x);
+                jsonObjectIn.addProperty("worldPosZ", chunkGenStat.worldPos().z);
+                return jsonObjectIn;
             };
             jsonObject2.add("fastest", (JsonElement)function.apply((ChunkGenStat)timedStatSummary.fastest()));
             jsonObject2.add("slowest", (JsonElement)function.apply((ChunkGenStat)timedStatSummary.slowest()));
@@ -139,10 +139,10 @@ public class JfrResultJsonSerializer {
         JsonArray jsonArray = new JsonArray();
         jsonObject.add("topContributors", jsonArray);
         summary.topTenContributorsByTotalBytes().forEach((pair) -> {
-            JsonObject jsonObject = new JsonObject();
-            jsonArray.add(jsonObject);
-            jsonObject.addProperty("path", (String)pair.getFirst());
-            jsonObject.addProperty("totalBytes", (Number)pair.getSecond());
+            JsonObject jsonObjectIn = new JsonObject();
+            jsonArray.add(jsonObjectIn);
+            jsonObjectIn.addProperty("path", (String)pair.getFirst());
+            jsonObjectIn.addProperty("totalBytes", (Number)pair.getSecond());
         });
         return jsonObject;
     }
@@ -163,15 +163,15 @@ public class JfrResultJsonSerializer {
         JsonArray jsonArray = new JsonArray();
         jsonObject.add("topContributors", jsonArray);
         networkPacketSummary.largestSizeContributors().forEach((pair) -> {
-            JsonObject jsonObject = new JsonObject();
-            jsonArray.add(jsonObject);
+            JsonObject jsonObjectIn = new JsonObject();
+            jsonArray.add(jsonObjectIn);
             NetworkPacketSummary.PacketIdentification packetIdentification = (NetworkPacketSummary.PacketIdentification)pair.getFirst();
             NetworkPacketSummary.PacketCountAndSize packetCountAndSize = (NetworkPacketSummary.PacketCountAndSize)pair.getSecond();
-            jsonObject.addProperty("protocolId", packetIdentification.protocolId());
-            jsonObject.addProperty("packetId", packetIdentification.packetId());
-            jsonObject.addProperty("packetName", packetIdentification.packetName());
-            jsonObject.addProperty("totalBytes", packetCountAndSize.totalSize());
-            jsonObject.addProperty("count", packetCountAndSize.totalCount());
+            jsonObjectIn.addProperty("protocolId", packetIdentification.protocolId());
+            jsonObjectIn.addProperty("packetId", packetIdentification.packetId());
+            jsonObjectIn.addProperty("packetName", packetIdentification.packetName());
+            jsonObjectIn.addProperty("totalBytes", packetCountAndSize.totalSize());
+            jsonObjectIn.addProperty("count", packetCountAndSize.totalCount());
         });
         return jsonObject;
     }
@@ -179,12 +179,12 @@ public class JfrResultJsonSerializer {
     private JsonElement cpu(List<CpuLoadStat> list) {
         JsonObject jsonObject = new JsonObject();
         BiFunction<List<CpuLoadStat>, ToDoubleFunction<CpuLoadStat>, JsonObject> biFunction = (listx, toDoubleFunction) -> {
-            JsonObject jsonObject = new JsonObject();
+            JsonObject jsonObjectIn = new JsonObject();
             DoubleSummaryStatistics doubleSummaryStatistics = listx.stream().mapToDouble(toDoubleFunction).summaryStatistics();
-            jsonObject.addProperty("min", doubleSummaryStatistics.getMin());
-            jsonObject.addProperty("average", doubleSummaryStatistics.getAverage());
-            jsonObject.addProperty("max", doubleSummaryStatistics.getMax());
-            return jsonObject;
+            jsonObjectIn.addProperty("min", doubleSummaryStatistics.getMin());
+            jsonObjectIn.addProperty("average", doubleSummaryStatistics.getAverage());
+            jsonObjectIn.addProperty("max", doubleSummaryStatistics.getMax());
+            return jsonObjectIn;
         };
         jsonObject.add("jvm", (JsonElement)biFunction.apply(list, CpuLoadStat::jvm));
         jsonObject.add("userJvm", (JsonElement)biFunction.apply(list, CpuLoadStat::userJvm));
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java
index e092ad4605bcfaeed220789204152958681bc1d0..9994a85a762a4d0ad71372b19a16f6ac7d8c939e 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java
@@ -9,21 +9,11 @@ import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 
 public record FileIOStat(Duration duration, String path, long bytes) {
-    @Nullable
-
-    public FileIOStat(Duration duration, @Nullable String s, long l) {
-        this.duration = duration;
-        this.path = s;
-        this.bytes = l;
-    }
-
     public static FileIOStat.Summary summary(Duration duration, List<FileIOStat> list) {
         long l = list.stream().mapToLong((fileIOStat) -> fileIOStat.bytes).sum();
-        return new FileIOStat.Summary(l, (double)l / (double)duration.getSeconds(), (long)list.size(), (double)list.size() / (double)duration.getSeconds(), (Duration)list.stream().map(FileIOStat::duration).reduce(Duration.ZERO, Duration::plus), (list.stream().filter((fileIOStat) -> fileIOStat.path != null).collect(Collectors.groupingBy((fileIOStat) -> fileIOStat.path, Collectors.summingLong((fileIOStat) -> fileIOStat.bytes)))).entrySet().stream().sorted(Entry.comparingByValue().reversed()).map((entry) -> Pair.of((String)entry.getKey(), (Long)entry.getValue())).limit(10L).toList());
+        return new FileIOStat.Summary(l, (double)l / (double)duration.getSeconds(), (long)list.size(), (double)list.size() / (double)duration.getSeconds(), (Duration)list.stream().map(FileIOStat::duration).reduce(Duration.ZERO, Duration::plus), (list.stream().filter((fileIOStat) -> fileIOStat.path != null).collect(Collectors.groupingBy((fileIOStat) -> fileIOStat.path, Collectors.summingLong((fileIOStat) -> fileIOStat.bytes)))).entrySet().stream().sorted(Entry.<String, Long>comparingByValue().reversed()).map((entry) -> Pair.of((String)entry.getKey(), (Long)entry.getValue())).limit(10L).toList());
     }
 
-    @Nullable
-
     public static record Summary(long totalBytes, double bytesPerSecond, long counts, double countsPerSecond, Duration timeSpentInIO, List<Pair<String, Long>> topTenContributorsByTotalBytes) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java
index 3357f49076ba94fba3df1e3ffcfb927ca4806614..d20a296b1ee615668de627542373eaa22900e39f 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java
@@ -7,18 +7,7 @@ import java.util.Map;
 import javax.annotation.Nullable;
 import net.minecraft.util.profiling.jfr.Percentiles;
 
-public record TimedStatSummary(T fastest, T slowest, T secondSlowest, int count, Map<Integer, Double> percentilesNanos, Duration totalDuration) {
-    @Nullable
-
-    public TimedStatSummary(T timedStat, T timedStat2, @Nullable T timedStat3, int i, Map<Integer, Double> map, Duration duration) {
-        this.fastest = timedStat;
-        this.slowest = timedStat2;
-        this.secondSlowest = timedStat3;
-        this.count = i;
-        this.percentilesNanos = map;
-        this.totalDuration = duration;
-    }
-
+public record TimedStatSummary<T extends TimedStat>(T fastest, T slowest, T secondSlowest, int count, Map<Integer, Double> percentilesNanos, Duration totalDuration) {
     public static <T extends TimedStat> TimedStatSummary<T> summary(List<T> list) {
         if (list.isEmpty()) {
             throw new IllegalArgumentException("No values");
@@ -33,6 +22,4 @@ public record TimedStatSummary(T fastest, T slowest, T secondSlowest, int count,
             return new TimedStatSummary(timedStat, timedStat2, timedStat3, i, map, duration);
         }
     }
-
-    @Nullable
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/random/WeightedRandom.java b/src/main/java/net/minecraft/util/random/WeightedRandom.java
index c2eb3eaed8d492ce6cb96f329268873ff3e2f25f..a1070f874ac950610a8e83faff064bbc1d8ca580 100644
--- a/src/main/java/net/minecraft/util/random/WeightedRandom.java
+++ b/src/main/java/net/minecraft/util/random/WeightedRandom.java
@@ -25,7 +25,7 @@ public class WeightedRandom {
 
     public static <T extends WeightedEntry> Optional<T> getRandomItem(Random random, List<T> list, int i) {
         if (i < 0) {
-            throw (IllegalArgumentException)Util.pauseInIde((T)(new IllegalArgumentException("Negative total weight in getRandomItem")));
+            throw (IllegalArgumentException)Util.pauseInIde((new IllegalArgumentException("Negative total weight in getRandomItem")));
         } else if (i == 0) {
             return Optional.empty();
         } else {
diff --git a/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java b/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
index 21e6b79ffdb005cf1307d0d425d4269e7746f7f6..33192849afacc3d656b0f2aa6dbe3ccc5850f93c 100644
--- a/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
@@ -7,7 +7,7 @@ import java.util.Random;
 import java.util.function.Function;
 
 public class BiasedToBottomInt extends IntProvider {
-    public static final Codec<BiasedToBottomInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.maxInclusive)).apply(instance, BiasedToBottomInt::new)).comapFlatMap((biasedToBottomInt) -> biasedToBottomInt.maxInclusive < biasedToBottomInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + biasedToBottomInt.minInclusive + ", max_inclusive: " + biasedToBottomInt.maxInclusive) : DataResult.success(biasedToBottomInt), Function.identity());
+    public static final Codec<BiasedToBottomInt> CODEC = RecordCodecBuilder.<BiasedToBottomInt>create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.maxInclusive)).apply(instance, BiasedToBottomInt::new)).comapFlatMap((biasedToBottomInt) -> biasedToBottomInt.maxInclusive < biasedToBottomInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + biasedToBottomInt.minInclusive + ", max_inclusive: " + biasedToBottomInt.maxInclusive) : DataResult.success(biasedToBottomInt), Function.identity());
     private final int minInclusive;
     private final int maxInclusive;
 
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java b/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
index 2e361052cc294c8319953d45013fc20554c102d5..a44a2b1b0bfebd9020db49c4b0f29043417c3c2f 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
@@ -8,7 +8,7 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class ClampedInt extends IntProvider {
-    public static final Codec<ClampedInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(IntProvider.CODEC.fieldOf("source").forGetter((clampedInt) -> clampedInt.source), Codec.INT.fieldOf("min_inclusive").forGetter((clampedInt) -> clampedInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedInt) -> clampedInt.maxInclusive)).apply(instance, ClampedInt::new)).comapFlatMap((clampedInt) -> clampedInt.maxInclusive < clampedInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + clampedInt.minInclusive + ", max_inclusive: " + clampedInt.maxInclusive) : DataResult.success(clampedInt), Function.identity());
+    public static final Codec<ClampedInt> CODEC = RecordCodecBuilder.<ClampedInt>create((instance) -> instance.group(IntProvider.CODEC.fieldOf("source").forGetter((clampedInt) -> clampedInt.source), Codec.INT.fieldOf("min_inclusive").forGetter((clampedInt) -> clampedInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedInt) -> clampedInt.maxInclusive)).apply(instance, ClampedInt::new)).comapFlatMap((clampedInt) -> clampedInt.maxInclusive < clampedInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + clampedInt.minInclusive + ", max_inclusive: " + clampedInt.maxInclusive) : DataResult.success(clampedInt), Function.identity());
     private final IntProvider source;
     private int minInclusive;
     private int maxInclusive;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
index af89f06330d1d636fefa9d9bf026170d10605460..3cd8af08c5eeae31c229d5d8f927c35e9414978e 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
@@ -8,7 +8,7 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class ClampedNormalFloat extends FloatProvider {
-    public static final Codec<ClampedNormalFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalFloat) -> clampedNormalFloat.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalFloat) -> clampedNormalFloat.deviation), Codec.FLOAT.fieldOf("min").forGetter((clampedNormalFloat) -> clampedNormalFloat.min), Codec.FLOAT.fieldOf("max").forGetter((clampedNormalFloat) -> clampedNormalFloat.max)).apply(instance, ClampedNormalFloat::new)).comapFlatMap((clampedNormalFloat) -> clampedNormalFloat.max < clampedNormalFloat.min ? DataResult.error("Max must be larger than min: [" + clampedNormalFloat.min + ", " + clampedNormalFloat.max + "]") : DataResult.success(clampedNormalFloat), Function.identity());
+    public static final Codec<ClampedNormalFloat> CODEC = RecordCodecBuilder.<ClampedNormalFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalFloat) -> clampedNormalFloat.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalFloat) -> clampedNormalFloat.deviation), Codec.FLOAT.fieldOf("min").forGetter((clampedNormalFloat) -> clampedNormalFloat.min), Codec.FLOAT.fieldOf("max").forGetter((clampedNormalFloat) -> clampedNormalFloat.max)).apply(instance, ClampedNormalFloat::new)).comapFlatMap((clampedNormalFloat) -> clampedNormalFloat.max < clampedNormalFloat.min ? DataResult.error("Max must be larger than min: [" + clampedNormalFloat.min + ", " + clampedNormalFloat.max + "]") : DataResult.success(clampedNormalFloat), Function.identity());
     private float mean;
     private float deviation;
     private float min;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java
index c6022b1bfed0c050e6981ec6e0e879e4b1755814..87c84bb18364a0ba6a77815c3b7f3ce34915f97d 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java
@@ -8,7 +8,7 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class ClampedNormalInt extends IntProvider {
-    public static final Codec<ClampedNormalInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalInt) -> clampedNormalInt.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalInt) -> clampedNormalInt.deviation), Codec.INT.fieldOf("min_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.min_inclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.max_inclusive)).apply(instance, ClampedNormalInt::new)).comapFlatMap((clampedNormalInt) -> clampedNormalInt.max_inclusive < clampedNormalInt.min_inclusive ? DataResult.error("Max must be larger than min: [" + clampedNormalInt.min_inclusive + ", " + clampedNormalInt.max_inclusive + "]") : DataResult.success(clampedNormalInt), Function.identity());
+    public static final Codec<ClampedNormalInt> CODEC = RecordCodecBuilder.<ClampedNormalInt>create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalInt) -> clampedNormalInt.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalInt) -> clampedNormalInt.deviation), Codec.INT.fieldOf("min_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.min_inclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.max_inclusive)).apply(instance, ClampedNormalInt::new)).comapFlatMap((clampedNormalInt) -> clampedNormalInt.max_inclusive < clampedNormalInt.min_inclusive ? DataResult.error("Max must be larger than min: [" + clampedNormalInt.min_inclusive + ", " + clampedNormalInt.max_inclusive + "]") : DataResult.success(clampedNormalInt), Function.identity());
     private float mean;
     private float deviation;
     private int min_inclusive;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java b/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
index 3e9465d88d25fba69ca39257aeec519819be898f..c503580f6ff76239a26846222cb3bbfe4106e047 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
@@ -7,7 +7,7 @@ import java.util.Random;
 
 public class ConstantFloat extends FloatProvider {
     public static final ConstantFloat ZERO = new ConstantFloat(0.0F);
-    public static final Codec<ConstantFloat> CODEC = Codec.either(Codec.FLOAT, RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("value").forGetter((constantFloat) -> constantFloat.value)).apply(instance, ConstantFloat::new))).xmap((either) -> (ConstantFloat)either.map(ConstantFloat::of, (constantFloat) -> constantFloat), (constantFloat) -> Either.left(constantFloat.value));
+    public static final Codec<ConstantFloat> CODEC = Codec.either(Codec.FLOAT, RecordCodecBuilder.<ConstantFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("value").forGetter((constantFloat) -> constantFloat.value)).apply(instance, ConstantFloat::new))).xmap((either) -> (ConstantFloat)either.map(ConstantFloat::of, (constantFloat) -> constantFloat), (constantFloat) -> Either.left(constantFloat.value));
     private final float value;
 
     public static ConstantFloat of(float f) {
diff --git a/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java b/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
index 1f993dbadef01649c00a7fc5a07538b444cf8ce1..dd291b74ecdc1615e34d02dad58845f72d79fcc1 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
@@ -7,7 +7,7 @@ import java.util.Random;
 
 public class ConstantInt extends IntProvider {
     public static final ConstantInt ZERO = new ConstantInt(0);
-    public static final Codec<ConstantInt> CODEC = Codec.either(Codec.INT, RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("value").forGetter((constantInt) -> constantInt.value)).apply(instance, ConstantInt::new))).xmap((either) -> (ConstantInt)either.map(ConstantInt::of, (constantInt) -> constantInt), (constantInt) -> Either.left(constantInt.value));
+    public static final Codec<ConstantInt> CODEC = Codec.<Integer, ConstantInt>either(Codec.INT, RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("value").forGetter((constantInt) -> constantInt.value)).apply(instance, ConstantInt::new))).xmap((either) -> (ConstantInt)either.map(ConstantInt::of, (constantInt) -> constantInt), (constantInt) -> Either.left(constantInt.value));
     private final int value;
 
     public static ConstantInt of(int i) {
diff --git a/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java b/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
index 1978569738dd5ae322c016dcdf1743f761903d62..23384a1d1169d8d2a37ee3d5db149ffb6fa6b2c1 100644
--- a/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
@@ -7,7 +7,7 @@ import java.util.Random;
 import java.util.function.Function;
 
 public class TrapezoidFloat extends FloatProvider {
-    public static final Codec<TrapezoidFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("min").forGetter((trapezoidFloat) -> trapezoidFloat.min), Codec.FLOAT.fieldOf("max").forGetter((trapezoidFloat) -> trapezoidFloat.max), Codec.FLOAT.fieldOf("plateau").forGetter((trapezoidFloat) -> trapezoidFloat.plateau)).apply(instance, TrapezoidFloat::new)).comapFlatMap((trapezoidFloat) -> {
+    public static final Codec<TrapezoidFloat> CODEC = RecordCodecBuilder.<TrapezoidFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("min").forGetter((trapezoidFloat) -> trapezoidFloat.min), Codec.FLOAT.fieldOf("max").forGetter((trapezoidFloat) -> trapezoidFloat.max), Codec.FLOAT.fieldOf("plateau").forGetter((trapezoidFloat) -> trapezoidFloat.plateau)).apply(instance, TrapezoidFloat::new)).comapFlatMap((trapezoidFloat) -> {
         if (trapezoidFloat.max < trapezoidFloat.min) {
             return DataResult.error("Max must be larger than min: [" + trapezoidFloat.min + ", " + trapezoidFloat.max + "]");
         } else {
diff --git a/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java b/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
index b8970c65778b8152cad872c7355bf8a7f04f9563..55de71abf7e8f19a82643a963dfdbd799b17d918 100644
--- a/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
@@ -8,7 +8,7 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class UniformFloat extends FloatProvider {
-    public static final Codec<UniformFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("min_inclusive").forGetter((uniformFloat) -> uniformFloat.minInclusive), Codec.FLOAT.fieldOf("max_exclusive").forGetter((uniformFloat) -> uniformFloat.maxExclusive)).apply(instance, UniformFloat::new)).comapFlatMap((uniformFloat) -> uniformFloat.maxExclusive <= uniformFloat.minInclusive ? DataResult.error("Max must be larger than min, min_inclusive: " + uniformFloat.minInclusive + ", max_exclusive: " + uniformFloat.maxExclusive) : DataResult.success(uniformFloat), Function.identity());
+    public static final Codec<UniformFloat> CODEC = RecordCodecBuilder.<UniformFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("min_inclusive").forGetter((uniformFloat) -> uniformFloat.minInclusive), Codec.FLOAT.fieldOf("max_exclusive").forGetter((uniformFloat) -> uniformFloat.maxExclusive)).apply(instance, UniformFloat::new)).comapFlatMap((uniformFloat) -> uniformFloat.maxExclusive <= uniformFloat.minInclusive ? DataResult.error("Max must be larger than min, min_inclusive: " + uniformFloat.minInclusive + ", max_exclusive: " + uniformFloat.maxExclusive) : DataResult.success(uniformFloat), Function.identity());
     private final float minInclusive;
     private final float maxExclusive;
 
diff --git a/src/main/java/net/minecraft/util/valueproviders/UniformInt.java b/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
index 26fd1c29d10cd770c468f8b3e6ac7a0f1fc9bebe..92522bfbdb47b3561e5b50793e564b82f375848a 100644
--- a/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
@@ -8,7 +8,7 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class UniformInt extends IntProvider {
-    public static final Codec<UniformInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((uniformInt) -> uniformInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((uniformInt) -> uniformInt.maxInclusive)).apply(instance, UniformInt::new)).comapFlatMap((uniformInt) -> uniformInt.maxInclusive < uniformInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + uniformInt.minInclusive + ", max_inclusive: " + uniformInt.maxInclusive) : DataResult.success(uniformInt), Function.identity());
+    public static final Codec<UniformInt> CODEC = RecordCodecBuilder.<UniformInt>create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((uniformInt) -> uniformInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((uniformInt) -> uniformInt.maxInclusive)).apply(instance, UniformInt::new)).comapFlatMap((uniformInt) -> uniformInt.maxInclusive < uniformInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + uniformInt.minInclusive + ", max_inclusive: " + uniformInt.maxInclusive) : DataResult.success(uniformInt), Function.identity());
     private final int minInclusive;
     private final int maxInclusive;
 
diff --git a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
index 9f50016fc2004bffc27029cb014d5ff0d7f9b75d..d8a3c704954b102a7624c3358956dff8befe0060 100644
--- a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
+++ b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
@@ -106,7 +106,7 @@ public class WorldUpgrader {
                 builder2.put(resourceKey2, new ChunkStorage(new File(file, "region"), this.dataFixer, true));
             }
 
-            ImmutableMap<ResourceKey<Level>, ChunkStorage> immutableMap2 = builder2.build();
+            ImmutableMap<ResourceKey<Level>, ChunkStorage> immutableMap2In = builder2.build();
             long l = Util.getMillis();
             this.status = new TranslatableComponent("optimizeWorld.stage.upgrading");
 
@@ -118,7 +118,7 @@ public class WorldUpgrader {
                 for(UnmodifiableIterator iOException2 = immutableSet.iterator(); iOException2.hasNext(); f2 += f3) {
                     ResourceKey<Level> resourceKey3 = (ResourceKey)iOException2.next();
                     ListIterator<ChunkPos> listIterator = (ListIterator)immutableMap.get(resourceKey3);
-                    ChunkStorage chunkStorage = (ChunkStorage)immutableMap2.get(resourceKey3);
+                    ChunkStorage chunkStorage = (ChunkStorage)immutableMap2In.get(resourceKey3);
                     if (listIterator.hasNext()) {
                         ChunkPos chunkPos = (ChunkPos)listIterator.next();
                         boolean flag2 = false;
@@ -178,7 +178,7 @@ public class WorldUpgrader {
             }
 
             this.status = new TranslatableComponent("optimizeWorld.stage.finished");
-            UnmodifiableIterator var32 = immutableMap2.values().iterator();
+            UnmodifiableIterator var32 = immutableMap2In.values().iterator();
 
             while(var32.hasNext()) {
                 ChunkStorage chunkStorage2 = (ChunkStorage)var32.next();
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index b68a97c94aca26b2a81c76e473683ba42312af70..4829086d94e3ed676e8d834c2d09ed7665e7a204 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -1058,7 +1058,7 @@ public abstract class Mob extends LivingEntity {
             if (itemStack.getItem() instanceof SpawnEggItem) {
                 if (this.level instanceof ServerLevel) {
                     SpawnEggItem spawnEggItem = (SpawnEggItem)itemStack.getItem();
-                    Optional<Mob> optional = spawnEggItem.spawnOffspringFromSpawnEgg(player, this, this.getType(), (ServerLevel)this.level, this.position(), itemStack);
+                    Optional<Mob> optional = spawnEggItem.spawnOffspringFromSpawnEgg(player, this, (EntityType) this.getType(), (ServerLevel)this.level, this.position(), itemStack);
                     optional.ifPresent((mob) -> this.onOffspringSpawnedFromEgg(player, mob));
                     return optional.isPresent() ? InteractionResult.SUCCESS : InteractionResult.PASS;
                 } else {
diff --git a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
index e3c4a1e49703c0220c3c74ac163be1011adc428f..ae472a139eed4967c9ba4d1353e5436bfb58a156 100644
--- a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
+++ b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
@@ -60,7 +60,7 @@ public class SpawnPlacements {
 
     public static <T extends Entity> boolean checkSpawnRules(EntityType<T> entityType, ServerLevelAccessor serverLevelAccessor, MobSpawnType mobSpawnType, BlockPos blockPos, Random random) {
         SpawnPlacements.Data data = (SpawnPlacements.Data)DATA_BY_TYPE.get(entityType);
-        return data == null || data.predicate.test(entityType, serverLevelAccessor, mobSpawnType, blockPos, random);
+        return data == null || data.predicate.test((EntityType) entityType, serverLevelAccessor, mobSpawnType, blockPos, random);
     }
 
     static {
diff --git a/src/main/java/net/minecraft/world/entity/ai/Brain.java b/src/main/java/net/minecraft/world/entity/ai/Brain.java
index cc067d0bd86b149d694aba4a3f4da046548160b8..0ce05e34f18d35691f3f0eb909afca611bef2155 100644
--- a/src/main/java/net/minecraft/world/entity/ai/Brain.java
+++ b/src/main/java/net/minecraft/world/entity/ai/Brain.java
@@ -69,14 +69,14 @@ public class Brain<E extends LivingEntity> {
             }
 
             public <T> DataResult<Brain<E>> decode(DynamicOps<T> dynamicOps, MapLike<T> mapLike) {
-                MutableObject<DataResult<Builder<Brain.MemoryValue<?>>>> mutableObject = new MutableObject(DataResult.success(ImmutableList.builder()));
+                MutableObject<DataResult<Builder<Brain.MemoryValue<?>>>> mutableObjectIn = new MutableObject<>(DataResult.success(ImmutableList.builder()));
                 mapLike.entries().forEach((pair) -> {
                     DataResult<MemoryModuleType<?>> dataResult = Registry.MEMORY_MODULE_TYPE.parse(dynamicOps, pair.getFirst());
                     DataResult<? extends Brain.MemoryValue<?>> dataResult2 = dataResult.flatMap((memoryModuleType) -> this.captureRead(memoryModuleType, dynamicOps, (T)pair.getSecond()));
-                    mutableObject.setValue((mutableObject.getValue()).apply2(Builder::add, dataResult2));
+                    mutableObjectIn.setValue((mutableObjectIn.getValue()).apply2(Builder::add, dataResult2));
                 });
-                ImmutableList<Brain.MemoryValue<?>> immutableList = (ImmutableList)(mutableObject.getValue()).resultOrPartial(Brain.LOGGER::error).map(Builder::build).orElseGet(ImmutableList::of);
-                return DataResult.success(new Brain(collection, collection2, immutableList, mutableObject::getValue));
+                ImmutableList<Brain.MemoryValue<?>> immutableList = mutableObjectIn.getValue().resultOrPartial(Brain.LOGGER::error).map(Builder::build).orElseGet(ImmutableList::of);
+                return DataResult.success(new Brain<>(collection, collection2, immutableList, mutableObject::getValue));
             }
 
             private <T, U> DataResult<Brain.MemoryValue<U>> captureRead(MemoryModuleType<U> memoryModuleType, DynamicOps<T> dynamicOps, T object) {
@@ -157,7 +157,7 @@ public class Brain<E extends LivingEntity> {
     }
 
     public <U> Optional<U> getMemory(MemoryModuleType<U> memoryModuleType) {
-        return (this.memories.get(memoryModuleType)).map(ExpirableValue::getValue);
+        return (Optional<U>) (this.memories.get(memoryModuleType)).map(ExpirableValue::getValue);
     }
 
     public <U> long getTimeUntilExpiry(MemoryModuleType<U> memoryModuleType) {
@@ -318,7 +318,7 @@ public class Brain<E extends LivingEntity> {
         UnmodifiableIterator var5 = immutableList.iterator();
 
         while(var5.hasNext()) {
-            Pair<Integer, ? extends Behavior<? super E>> pair = var5.next();
+            Pair<Integer, ? extends Behavior<? super E>> pair = (Pair) var5.next();
             ((this.availableBehaviorsByPriority.computeIfAbsent((Integer)pair.getFirst(), (integer) -> Maps.newHashMap())).computeIfAbsent(activity, (activityx) -> Sets.newLinkedHashSet())).add((Behavior)pair.getSecond());
         }
 
@@ -426,7 +426,7 @@ public class Brain<E extends LivingEntity> {
     }
 
     private boolean isEmptyCollection(Object object) {
-        return object instanceof Collection && (object).isEmpty();
+        return object instanceof Collection && ((Collection) object).isEmpty();
     }
 
     ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>> createPriorityPairs(int i, ImmutableList<? extends Behavior<? super E>> immutableList) {
@@ -447,7 +447,7 @@ public class Brain<E extends LivingEntity> {
         private final Optional<? extends ExpirableValue<U>> value;
 
         static <U> Brain.MemoryValue<U> createUnchecked(MemoryModuleType<U> memoryModuleType, Optional<? extends ExpirableValue<?>> optional) {
-            return new Brain.MemoryValue<>(memoryModuleType, optional);
+            return new Brain.MemoryValue(memoryModuleType, optional);
         }
 
         MemoryValue(MemoryModuleType<U> memoryModuleType, Optional<? extends ExpirableValue<U>> optional) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
index 0094171f239125d85017a263efff2f12f1d4bc7f..94022132fd18849a6bdad9809238058f4435c315 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
@@ -74,7 +74,7 @@ import org.apache.logging.log4j.Logger;
 
 public class DefaultAttributes {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final Map<EntityType<? extends LivingEntity>, AttributeSupplier> SUPPLIERS = ImmutableMap.builder().put(EntityType.ARMOR_STAND, LivingEntity.createLivingAttributes().build()).put(EntityType.AXOLOTL, Axolotl.createAttributes().build()).put(EntityType.BAT, Bat.createAttributes().build()).put(EntityType.BEE, Bee.createAttributes().build()).put(EntityType.BLAZE, Blaze.createAttributes().build()).put(EntityType.CAT, Cat.createAttributes().build()).put(EntityType.CAVE_SPIDER, CaveSpider.createCaveSpider().build()).put(EntityType.CHICKEN, Chicken.createAttributes().build()).put(EntityType.COD, AbstractFish.createAttributes().build()).put(EntityType.COW, Cow.createAttributes().build()).put(EntityType.CREEPER, Creeper.createAttributes().build()).put(EntityType.DOLPHIN, Dolphin.createAttributes().build()).put(EntityType.DONKEY, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.DROWNED, Zombie.createAttributes().build()).put(EntityType.ELDER_GUARDIAN, ElderGuardian.createAttributes().build()).put(EntityType.ENDERMAN, EnderMan.createAttributes().build()).put(EntityType.ENDERMITE, Endermite.createAttributes().build()).put(EntityType.ENDER_DRAGON, EnderDragon.createAttributes().build()).put(EntityType.EVOKER, Evoker.createAttributes().build()).put(EntityType.FOX, Fox.createAttributes().build()).put(EntityType.GHAST, Ghast.createAttributes().build()).put(EntityType.GIANT, Giant.createAttributes().build()).put(EntityType.GLOW_SQUID, GlowSquid.createAttributes().build()).put(EntityType.GOAT, Goat.createAttributes().build()).put(EntityType.GUARDIAN, Guardian.createAttributes().build()).put(EntityType.HOGLIN, Hoglin.createAttributes().build()).put(EntityType.HORSE, AbstractHorse.createBaseHorseAttributes().build()).put(EntityType.HUSK, Zombie.createAttributes().build()).put(EntityType.ILLUSIONER, Illusioner.createAttributes().build()).put(EntityType.IRON_GOLEM, IronGolem.createAttributes().build()).put(EntityType.LLAMA, Llama.createAttributes().build()).put(EntityType.MAGMA_CUBE, MagmaCube.createAttributes().build()).put(EntityType.MOOSHROOM, Cow.createAttributes().build()).put(EntityType.MULE, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.OCELOT, Ocelot.createAttributes().build()).put(EntityType.PANDA, Panda.createAttributes().build()).put(EntityType.PARROT, Parrot.createAttributes().build()).put(EntityType.PHANTOM, Monster.createMonsterAttributes().build()).put(EntityType.PIG, Pig.createAttributes().build()).put(EntityType.PIGLIN, Piglin.createAttributes().build()).put(EntityType.PIGLIN_BRUTE, PiglinBrute.createAttributes().build()).put(EntityType.PILLAGER, Pillager.createAttributes().build()).put(EntityType.PLAYER, Player.createAttributes().build()).put(EntityType.POLAR_BEAR, PolarBear.createAttributes().build()).put(EntityType.PUFFERFISH, AbstractFish.createAttributes().build()).put(EntityType.RABBIT, Rabbit.createAttributes().build()).put(EntityType.RAVAGER, Ravager.createAttributes().build()).put(EntityType.SALMON, AbstractFish.createAttributes().build()).put(EntityType.SHEEP, Sheep.createAttributes().build()).put(EntityType.SHULKER, Shulker.createAttributes().build()).put(EntityType.SILVERFISH, Silverfish.createAttributes().build()).put(EntityType.SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.SKELETON_HORSE, SkeletonHorse.createAttributes().build()).put(EntityType.SLIME, Monster.createMonsterAttributes().build()).put(EntityType.SNOW_GOLEM, SnowGolem.createAttributes().build()).put(EntityType.SPIDER, Spider.createAttributes().build()).put(EntityType.SQUID, Squid.createAttributes().build()).put(EntityType.STRAY, AbstractSkeleton.createAttributes().build()).put(EntityType.STRIDER, Strider.createAttributes().build()).put(EntityType.TRADER_LLAMA, Llama.createAttributes().build()).put(EntityType.TROPICAL_FISH, AbstractFish.createAttributes().build()).put(EntityType.TURTLE, Turtle.createAttributes().build()).put(EntityType.VEX, Vex.createAttributes().build()).put(EntityType.VILLAGER, Villager.createAttributes().build()).put(EntityType.VINDICATOR, Vindicator.createAttributes().build()).put(EntityType.WANDERING_TRADER, Mob.createMobAttributes().build()).put(EntityType.WITCH, Witch.createAttributes().build()).put(EntityType.WITHER, WitherBoss.createAttributes().build()).put(EntityType.WITHER_SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.WOLF, Wolf.createAttributes().build()).put(EntityType.ZOGLIN, Zoglin.createAttributes().build()).put(EntityType.ZOMBIE, Zombie.createAttributes().build()).put(EntityType.ZOMBIE_HORSE, ZombieHorse.createAttributes().build()).put(EntityType.ZOMBIE_VILLAGER, Zombie.createAttributes().build()).put(EntityType.ZOMBIFIED_PIGLIN, ZombifiedPiglin.createAttributes().build()).build();
+    private static final Map<EntityType<? extends LivingEntity>, AttributeSupplier> SUPPLIERS = ImmutableMap.<EntityType<? extends LivingEntity>, AttributeSupplier>builder().put(EntityType.ARMOR_STAND, LivingEntity.createLivingAttributes().build()).put(EntityType.AXOLOTL, Axolotl.createAttributes().build()).put(EntityType.BAT, Bat.createAttributes().build()).put(EntityType.BEE, Bee.createAttributes().build()).put(EntityType.BLAZE, Blaze.createAttributes().build()).put(EntityType.CAT, Cat.createAttributes().build()).put(EntityType.CAVE_SPIDER, CaveSpider.createCaveSpider().build()).put(EntityType.CHICKEN, Chicken.createAttributes().build()).put(EntityType.COD, AbstractFish.createAttributes().build()).put(EntityType.COW, Cow.createAttributes().build()).put(EntityType.CREEPER, Creeper.createAttributes().build()).put(EntityType.DOLPHIN, Dolphin.createAttributes().build()).put(EntityType.DONKEY, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.DROWNED, Zombie.createAttributes().build()).put(EntityType.ELDER_GUARDIAN, ElderGuardian.createAttributes().build()).put(EntityType.ENDERMAN, EnderMan.createAttributes().build()).put(EntityType.ENDERMITE, Endermite.createAttributes().build()).put(EntityType.ENDER_DRAGON, EnderDragon.createAttributes().build()).put(EntityType.EVOKER, Evoker.createAttributes().build()).put(EntityType.FOX, Fox.createAttributes().build()).put(EntityType.GHAST, Ghast.createAttributes().build()).put(EntityType.GIANT, Giant.createAttributes().build()).put(EntityType.GLOW_SQUID, GlowSquid.createAttributes().build()).put(EntityType.GOAT, Goat.createAttributes().build()).put(EntityType.GUARDIAN, Guardian.createAttributes().build()).put(EntityType.HOGLIN, Hoglin.createAttributes().build()).put(EntityType.HORSE, AbstractHorse.createBaseHorseAttributes().build()).put(EntityType.HUSK, Zombie.createAttributes().build()).put(EntityType.ILLUSIONER, Illusioner.createAttributes().build()).put(EntityType.IRON_GOLEM, IronGolem.createAttributes().build()).put(EntityType.LLAMA, Llama.createAttributes().build()).put(EntityType.MAGMA_CUBE, MagmaCube.createAttributes().build()).put(EntityType.MOOSHROOM, Cow.createAttributes().build()).put(EntityType.MULE, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.OCELOT, Ocelot.createAttributes().build()).put(EntityType.PANDA, Panda.createAttributes().build()).put(EntityType.PARROT, Parrot.createAttributes().build()).put(EntityType.PHANTOM, Monster.createMonsterAttributes().build()).put(EntityType.PIG, Pig.createAttributes().build()).put(EntityType.PIGLIN, Piglin.createAttributes().build()).put(EntityType.PIGLIN_BRUTE, PiglinBrute.createAttributes().build()).put(EntityType.PILLAGER, Pillager.createAttributes().build()).put(EntityType.PLAYER, Player.createAttributes().build()).put(EntityType.POLAR_BEAR, PolarBear.createAttributes().build()).put(EntityType.PUFFERFISH, AbstractFish.createAttributes().build()).put(EntityType.RABBIT, Rabbit.createAttributes().build()).put(EntityType.RAVAGER, Ravager.createAttributes().build()).put(EntityType.SALMON, AbstractFish.createAttributes().build()).put(EntityType.SHEEP, Sheep.createAttributes().build()).put(EntityType.SHULKER, Shulker.createAttributes().build()).put(EntityType.SILVERFISH, Silverfish.createAttributes().build()).put(EntityType.SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.SKELETON_HORSE, SkeletonHorse.createAttributes().build()).put(EntityType.SLIME, Monster.createMonsterAttributes().build()).put(EntityType.SNOW_GOLEM, SnowGolem.createAttributes().build()).put(EntityType.SPIDER, Spider.createAttributes().build()).put(EntityType.SQUID, Squid.createAttributes().build()).put(EntityType.STRAY, AbstractSkeleton.createAttributes().build()).put(EntityType.STRIDER, Strider.createAttributes().build()).put(EntityType.TRADER_LLAMA, Llama.createAttributes().build()).put(EntityType.TROPICAL_FISH, AbstractFish.createAttributes().build()).put(EntityType.TURTLE, Turtle.createAttributes().build()).put(EntityType.VEX, Vex.createAttributes().build()).put(EntityType.VILLAGER, Villager.createAttributes().build()).put(EntityType.VINDICATOR, Vindicator.createAttributes().build()).put(EntityType.WANDERING_TRADER, Mob.createMobAttributes().build()).put(EntityType.WITCH, Witch.createAttributes().build()).put(EntityType.WITHER, WitherBoss.createAttributes().build()).put(EntityType.WITHER_SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.WOLF, Wolf.createAttributes().build()).put(EntityType.ZOGLIN, Zoglin.createAttributes().build()).put(EntityType.ZOMBIE, Zombie.createAttributes().build()).put(EntityType.ZOMBIE_HORSE, ZombieHorse.createAttributes().build()).put(EntityType.ZOMBIE_VILLAGER, Zombie.createAttributes().build()).put(EntityType.ZOMBIFIED_PIGLIN, ZombifiedPiglin.createAttributes().build()).build();
 
     public static AttributeSupplier getSupplier(EntityType<? extends LivingEntity> entityType) {
         return (AttributeSupplier)SUPPLIERS.get(entityType);
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java b/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
index a7809ce5b9155264b9b9e907ef75470683b99319..aa34389bfcd09ece11cbaeae8cd6cceeca8f267c 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
@@ -139,15 +139,11 @@ public class BehaviorUtils {
     public static Optional<LivingEntity> getLivingEntityFromUUIDMemory(LivingEntity livingEntity, MemoryModuleType<UUID> memoryModuleType) {
         Optional<UUID> optional = livingEntity.getBrain().getMemory(memoryModuleType);
         return optional.map((uuid) -> ((ServerLevel)livingEntity.level).getEntity(uuid)).map((entity) -> {
-            LivingEntity var10000;
             if (entity instanceof LivingEntity) {
-                LivingEntity livingEntity = (LivingEntity)entity;
-                var10000 = livingEntity;
+                return (LivingEntity) entity;
             } else {
-                var10000 = null;
+                return null;
             }
-
-            return var10000;
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java b/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java
index c9ecbb36d36f7290706e37947c4efe5a7614c847..7bfcec6e1a71a8fe25392736081cb486ce580377 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java
@@ -32,8 +32,8 @@ public class EntityTracker implements PositionTracker {
             if (!livingEntity2.isAlive()) {
                 return false;
             } else {
-                Optional<NearestVisibleLivingEntities> optional = livingEntity.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
-                return optional.isPresent() && ((NearestVisibleLivingEntities)optional.get()).contains(livingEntity2);
+                Optional<NearestVisibleLivingEntities> optionalIn = livingEntity.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
+                return optionalIn.isPresent() && ((NearestVisibleLivingEntities)optionalIn.get()).contains(livingEntity2);
             }
         } else {
             return true;
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
index 8642044cacb367f3068241344c62a151938ab8c0..b41d1963ff3e6a7d3efe69c67ff37ac7656e6ec4 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
@@ -50,7 +50,7 @@ public class InteractWith<E extends LivingEntity, T extends LivingEntity> extend
     }
 
     private boolean isTargetValid(LivingEntity livingEntity) {
-        return this.type.equals(livingEntity.getType()) && this.targetFilter.test(livingEntity);
+        return this.type.equals(livingEntity.getType()) && this.targetFilter.test((T) livingEntity);
     }
 
     protected void start(ServerLevel serverLevel, E livingEntity, long l) {
@@ -67,6 +67,6 @@ public class InteractWith<E extends LivingEntity, T extends LivingEntity> extend
     }
 
     private boolean canInteract(E livingEntity, LivingEntity livingEntity2) {
-        return this.type.equals(livingEntity2.getType()) && livingEntity2.distanceToSqr(livingEntity) <= (double)this.interactionRangeSqr && this.targetFilter.test(livingEntity2);
+        return this.type.equals(livingEntity2.getType()) && livingEntity2.distanceToSqr(livingEntity) <= (double)this.interactionRangeSqr && this.targetFilter.test((T) livingEntity2);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java b/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
index b28687daf30f72a039cba0b9edc4d3037bcabd0b..323178b8626b6333a597c3b50c75ac484f6611cc 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
@@ -50,13 +50,13 @@ public class SetClosestHomeAsWalkTarget extends Behavior<LivingEntity> {
         PathfinderMob pathfinderMob = (PathfinderMob)livingEntity;
         PoiManager poiManager = serverLevel.getPoiManager();
         Predicate<BlockPos> predicate = (blockPosx) -> {
-            long l = blockPosx.asLong();
-            if (this.batchCache.containsKey(l)) {
+            long pos = blockPosx.asLong();
+            if (this.batchCache.containsKey(pos)) {
                 return false;
             } else if (++this.triedCount >= 5) {
                 return false;
             } else {
-                this.batchCache.put(l, this.lastUpdate + 40L);
+                this.batchCache.put(pos, this.lastUpdate + 40L);
                 return true;
             }
         };
diff --git a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
index da4bd7b4c6eae20c47888a5054809c490d5e0023..999564610b92e013500eb865c1495772ceb0c6ab 100644
--- a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
+++ b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
@@ -91,9 +91,9 @@ public class GossipContainer {
     public void transferFrom(GossipContainer gossipContainer, Random random, int i) {
         Collection<GossipContainer.GossipEntry> collection = gossipContainer.selectGossipsForTransfer(random, i);
         collection.forEach((gossipEntry) -> {
-            int i = gossipEntry.value - gossipEntry.type.decayPerTransfer;
-            if (i >= 2) {
-                this.getOrCreate(gossipEntry.target).entries.mergeInt(gossipEntry.type, i, GossipContainer::mergeValuesForTransfer);
+            int iIn = gossipEntry.value - gossipEntry.type.decayPerTransfer;
+            if (iIn >= 2) {
+                this.getOrCreate(gossipEntry.target).entries.mergeInt(gossipEntry.type, iIn, GossipContainer::mergeValuesForTransfer);
             }
 
         });
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
index 3d9d3ff8dae4e73450df432844c3a2d8ed2748f2..e2c5665188966a2975004fd5a23d73c4bf3100de 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
@@ -6,7 +6,7 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 
 public class VillagerHostilesSensor extends NearestVisibleLivingEntitySensor {
-    private static final ImmutableMap<EntityType<?>, Float> ACCEPTABLE_DISTANCE_FROM_HOSTILES = ImmutableMap.builder().put(EntityType.DROWNED, 8.0F).put(EntityType.EVOKER, 12.0F).put(EntityType.HUSK, 8.0F).put(EntityType.ILLUSIONER, 12.0F).put(EntityType.PILLAGER, 15.0F).put(EntityType.RAVAGER, 12.0F).put(EntityType.VEX, 8.0F).put(EntityType.VINDICATOR, 10.0F).put(EntityType.ZOGLIN, 10.0F).put(EntityType.ZOMBIE, 8.0F).put(EntityType.ZOMBIE_VILLAGER, 8.0F).build();
+    private static final ImmutableMap<EntityType<?>, Float> ACCEPTABLE_DISTANCE_FROM_HOSTILES = ImmutableMap.<EntityType<?>, Float>builder().put(EntityType.DROWNED, 8.0F).put(EntityType.EVOKER, 12.0F).put(EntityType.HUSK, 8.0F).put(EntityType.ILLUSIONER, 12.0F).put(EntityType.PILLAGER, 15.0F).put(EntityType.RAVAGER, 12.0F).put(EntityType.VEX, 8.0F).put(EntityType.VINDICATOR, 10.0F).put(EntityType.ZOGLIN, 10.0F).put(EntityType.ZOMBIE, 8.0F).put(EntityType.ZOMBIE_VILLAGER, 8.0F).build();
 
     protected boolean isMatchingEntity(LivingEntity livingEntity, LivingEntity livingEntity2) {
         return this.isHostile(livingEntity2) && this.isClose(livingEntity, livingEntity2);
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
index 4424a697f8d1489d16a87471bd39443e6a4be186..4e0d1351902dd54f25fff57f8f89560e7922a16e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -31,7 +31,7 @@ public class PoiSection {
     private boolean isValid;
 
     public static Codec<PoiSection> codec(Runnable runnable) {
-        return RecordCodecBuilder.create((instance) -> instance.group(RecordCodecBuilder.point(runnable), Codec.BOOL.optionalFieldOf("Valid", false).forGetter((poiSection) -> poiSection.isValid), PoiRecord.codec(runnable).listOf().fieldOf("Records").forGetter((poiSection) -> ImmutableList.copyOf(poiSection.records.values()))).apply(instance, PoiSection::new)).orElseGet(Util.prefix("Failed to read POI section: ", LOGGER::error), () -> new PoiSection(runnable, false, ImmutableList.of()));
+        return RecordCodecBuilder.<PoiSection>create((instance) -> instance.group(RecordCodecBuilder.point(runnable), Codec.BOOL.optionalFieldOf("Valid", false).forGetter((poiSection) -> poiSection.isValid), PoiRecord.codec(runnable).listOf().fieldOf("Records").forGetter((poiSection) -> ImmutableList.copyOf(poiSection.records.values()))).apply(instance, PoiSection::new)).orElseGet(Util.prefix("Failed to read POI section: ", LOGGER::error), () -> new PoiSection(runnable, false, ImmutableList.of()));
     }
 
     public PoiSection(Runnable runnable) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
index 4f2768f40bff55acc05068a2a8c4243516f4b8f0..3dd2b31e3f31b01d58260169144b02fdb463373e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
@@ -85,7 +85,7 @@ public abstract class AbstractFish extends WaterAnimal implements Bucketable {
     protected void registerGoals() {
         super.registerGoals();
         this.goalSelector.addGoal(0, new PanicGoal(this, 1.25D));
-        this.goalSelector.addGoal(2, new AvoidEntityGoal(this, Player.class, 8.0F, 1.6D, 1.4D, EntitySelector.NO_SPECTATORS::test));
+        this.goalSelector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0F, 1.6D, 1.4D, EntitySelector.NO_SPECTATORS::test));
         this.goalSelector.addGoal(4, new AbstractFish.FishSwimGoal(this));
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index 80005069525b14d243a9478e9d132fd138a8fd27..f7c8070ac9232f4e16eae52c6798b4a4130df2c1 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -147,9 +147,9 @@ public class Fox extends Animal {
         this.goalSelector.addGoal(1, new Fox.FaceplantGoal());
         this.goalSelector.addGoal(2, new Fox.FoxPanicGoal(2.2D));
         this.goalSelector.addGoal(3, new Fox.FoxBreedGoal(1.0D));
-        this.goalSelector.addGoal(4, new AvoidEntityGoal(this, Player.class, 16.0F, 1.6D, 1.4D, (livingEntity) -> AVOID_PLAYERS.test(livingEntity) && !this.trusts(livingEntity.getUUID()) && !this.isDefending()));
-        this.goalSelector.addGoal(4, new AvoidEntityGoal(this, Wolf.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !((Wolf)livingEntity).isTame() && !this.isDefending()));
-        this.goalSelector.addGoal(4, new AvoidEntityGoal(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !this.isDefending()));
+        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Player.class, 16.0F, 1.6D, 1.4D, (livingEntity) -> AVOID_PLAYERS.test(livingEntity) && !this.trusts(livingEntity.getUUID()) && !this.isDefending()));
+        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Wolf.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !((Wolf)livingEntity).isTame() && !this.isDefending()));
+        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !this.isDefending()));
         this.goalSelector.addGoal(5, new Fox.StalkPreyGoal());
         this.goalSelector.addGoal(6, new Fox.FoxPounceGoal());
         this.goalSelector.addGoal(6, new Fox.SeekShelterGoal(1.25D));
diff --git a/src/main/java/net/minecraft/world/entity/animal/Sheep.java b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
index ca067e3e4bc146d0326ba14b686cd680635ec7a8..808878b013cfbae80d124b670046e734ffca77d6 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Sheep.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
@@ -81,7 +81,7 @@ public class Sheep extends Animal implements Shearable {
         enumMap.put(DyeColor.RED, Blocks.RED_WOOL);
         enumMap.put(DyeColor.BLACK, Blocks.BLACK_WOOL);
     });
-    private static final Map<DyeColor, float[]> COLORARRAY_BY_COLOR = Maps.newEnumMap(Arrays.stream(DyeColor.values()).collect(Collectors.toMap((dyeColor) -> dyeColor, Sheep::createSheepColor)));
+    private static final Map<DyeColor, float[]> COLORARRAY_BY_COLOR = Maps.<DyeColor, float[]>newEnumMap(Arrays.stream(DyeColor.values()).collect(Collectors.toMap((dyeColor) -> dyeColor, Sheep::createSheepColor)));
     private int eatAnimationTick;
     private EatBlockGoal eatBlockGoal;
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index d432c3b91ad909912603a8b0e9e1c048379f7629..bb6baf151198f7333ab322a2a37880f8b5c85381 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -67,7 +67,7 @@ import net.minecraft.world.phys.Vec3;
 public class Axolotl extends Animal implements LerpingModel, Bucketable {
     public static final int TOTAL_PLAYDEAD_TIME = 200;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Axolotl>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.AXOLOTL_ATTACKABLES, SensorType.AXOLOTL_TEMPTATIONS);
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN});
+    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN});
     private static final EntityDataAccessor<Integer> DATA_VARIANT = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_PLAYING_DEAD = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> FROM_BUCKET = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
@@ -410,7 +410,7 @@ public class Axolotl extends Animal implements LerpingModel, Bucketable {
     }
 
     public Brain<Axolotl> getBrain() {
-        return super.getBrain();
+        return (Brain<Axolotl>) super.getBrain();
     }
 
     protected void sendDebugPackets() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index 68f61fde5914dbd75cb6f38dc026f9f58913ca6a..827a660db844df706252c2e5b3f335a3f1b3d1db 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -124,7 +124,7 @@ public class Goat extends Animal {
     }
 
     public Brain<Goat> getBrain() {
-        return super.getBrain();
+        return (Brain<Goat>) super.getBrain();
     }
 
     protected void customServerAiStep() {
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 72720f5507f7a825453168f9919ef93879c52164..86914d46ef4ded48a77282b32143c45788e4b267 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -482,11 +482,11 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
     }
 
     public int getAlternativeTarget(int i) {
-        return this.entityData.get((EntityDataAccessor)DATA_TARGETS.get(i));
+        return this.entityData.get(DATA_TARGETS.get(i));
     }
 
     public void setAlternativeTarget(int i, int i2) {
-        this.entityData.set((EntityDataAccessor)DATA_TARGETS.get(i), i2);
+        this.entityData.set(DATA_TARGETS.get(i), i2);
     }
 
     public boolean isPowered() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index 973d7691c41e8ea78f3d8f45a61e0e9b9378502c..7323aa3c110f0ed370016d9835f9b60239561144 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -218,7 +218,7 @@ public class Phantom extends FlyingMob implements Enemy {
                 this.nextScanTick = reducedTickDelay(60);
                 List<Player> list = Phantom.this.level.getNearbyPlayers(this.attackTargeting, Phantom.this, Phantom.this.getBoundingBox().inflate(16.0D, 64.0D, 16.0D));
                 if (!list.isEmpty()) {
-                    list.sort(Comparator.comparing(Entity::getY).reversed());
+                    list.sort(Comparator.<Entity, Double>comparing(Entity::getY).reversed());
 
                     for(Player player : list) {
                         if (Phantom.this.canAttack(player, TargetingConditions.DEFAULT)) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index 0ef928611b05af20100f7ccfb970969cb04e48bb..daa95e5e760ceeedc7e29b56c03f52e0c7f15874 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -171,7 +171,7 @@ public class Slime extends Mob implements Enemy {
     }
 
     public EntityType<? extends Slime> getType() {
-        return super.getType();
+        return (EntityType<? extends Slime>) super.getType();
     }
 
     public void remove(Entity.RemovalReason removalReason) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
index 37f628bb5fed5f4afa8f9e415a86bd2a90380194..5d6671325f009d2abccae4e5647e89b946fbe7e3 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
@@ -173,7 +173,7 @@ public class Zoglin extends Monster implements Enemy, HoglinBase {
     }
 
     public Brain<Zoglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Zoglin>) super.getBrain();
     }
 
     protected void updateActivity() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index 70b381778fffe83dd126f6df4d32cb354a10e279..822469fe3abc434d85bc4aa83000387176d537ec 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -60,7 +60,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
     private int timeInOverworld;
     private boolean cannotBeHunted;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Hoglin>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ADULT, SensorType.HOGLIN_SPECIFIC_SENSOR);
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED});
+    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED});
 
     public Hoglin(EntityType<? extends Hoglin> entityType, Level level) {
         super(entityType, level);
@@ -116,7 +116,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
     }
 
     public Brain<Hoglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Hoglin>) super.getBrain();
     }
 
     protected void customServerAiStep() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index 23f1fced7ea7c2094b3a25905a2f0fba7d967c26..22de08794bd877174cf18b13b844ada0f24f4355 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -191,7 +191,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
     }
 
     public Brain<Piglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Piglin>) super.getBrain();
     }
 
     public InteractionResult mobInteract(Player player, InteractionHand interactionHand) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
index 96d9d46a35dfd42d09c6b512ece03fac2a351ad9..4c7b6d33114d6e1162195661ce51710a2c11b0d8 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
@@ -144,7 +144,7 @@ public class PiglinAi {
     }
 
     private static void initAdmireItemActivity(Brain<Piglin> brain) {
-        brain.addActivityAndRemoveMemoryWhenStopped(Activity.ADMIRE_ITEM, 10, ImmutableList.of(new GoToWantedItem<>(PiglinAi::isNotHoldingLovedItemInOffHand, 1.0F, true, 9), new StopAdmiringIfItemTooFarAway(9), new StopAdmiringIfTiredOfTryingToReachItem<>(200, 200)), MemoryModuleType.ADMIRING_ITEM);
+        brain.addActivityAndRemoveMemoryWhenStopped(Activity.ADMIRE_ITEM, 10, ImmutableList.<net.minecraft.world.entity.ai.behavior.Behavior<Piglin>>of(new GoToWantedItem<>(PiglinAi::isNotHoldingLovedItemInOffHand, 1.0F, true, 9), new StopAdmiringIfItemTooFarAway(9), new StopAdmiringIfTiredOfTryingToReachItem<>(200, 200)), MemoryModuleType.ADMIRING_ITEM);
     }
 
     private static void initRetreatActivity(Brain<Piglin> brain) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
index d3b6b56fee09304ff6b69cf85adb489c6708b782..671f56e22b7d2c77e95b147b7d8eb135add23623 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
@@ -64,7 +64,7 @@ public class PiglinBrute extends AbstractPiglin {
     }
 
     public Brain<PiglinBrute> getBrain() {
-        return super.getBrain();
+        return (Brain<PiglinBrute>) super.getBrain();
     }
 
     public boolean canHunt() {
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 8be0408c1f9272fefb42d3063b28314945c88872..b4572b08d244f0170a4f0b951f5da8da31f1024a 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -132,7 +132,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
 
     public Brain<Villager> getBrain() {
-        return super.getBrain();
+        return (Brain<Villager>) super.getBrain();
     }
 
     protected Brain.Provider<Villager> brainProvider() {
@@ -553,12 +553,12 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
 
     private void tellWitnessesThatIWasMurdered(Entity entity) {
-        Level optional = this.level;
-        if (optional instanceof ServerLevel) {
-            ServerLevel serverLevel = (ServerLevel)optional;
-            Optional<NearestVisibleLivingEntities> optional = this.brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
-            if (!optional.isEmpty()) {
-                ((NearestVisibleLivingEntities)optional.get()).findAll(ReputationEventHandler.class::isInstance).forEach((livingEntity) -> serverLevel.onReputationEvent(ReputationEventType.VILLAGER_KILLED, entity, (ReputationEventHandler)livingEntity));
+        Level level = this.level;
+        if (level instanceof ServerLevel) {
+            ServerLevel serverLevel = (ServerLevel)level;
+            Optional<NearestVisibleLivingEntities> optionalIn = this.brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
+            if (!optionalIn.isEmpty()) {
+                ((NearestVisibleLivingEntities)optionalIn.get()).findAll(ReputationEventHandler.class::isInstance).forEach((livingEntity) -> serverLevel.onReputationEvent(ReputationEventType.VILLAGER_KILLED, entity, (ReputationEventHandler)livingEntity));
             }
         }
     }
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
index 6d2f4d61b5b35e151caf85b7880647ad5362cba2..34363197b004de9821a39942674bc26142e274ae 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
@@ -61,10 +61,10 @@ public class VillagerTrades {
     private static final float HIGH_TIER_PRICE_MULTIPLIER = 0.2F;
     public static final Map<VillagerProfession, Int2ObjectMap<VillagerTrades.ItemListing[]>> TRADES = Util.make(Maps.newHashMap(), (hashMap) -> {
         hashMap.put(VillagerProfession.FARMER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHEAT, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.POTATO, 26, 16, 2), new VillagerTrades.EmeraldForItems(Items.CARROT, 22, 16, 2), new VillagerTrades.EmeraldForItems(Items.BEETROOT, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.BREAD, 1, 6, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.PUMPKIN, 6, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN_PIE, 1, 4, 5), new VillagerTrades.ItemsForEmeralds(Items.APPLE, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.COOKIE, 3, 18, 10), new VillagerTrades.EmeraldForItems(Blocks.MELON, 4, 12, 20)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Blocks.CAKE, 1, 1, 12, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.NIGHT_VISION, 100, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.JUMP, 160, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.WEAKNESS, 140, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.BLINDNESS, 120, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.POISON, 280, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.SATURATION, 7, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GOLDEN_CARROT, 3, 3, 30), new VillagerTrades.ItemsForEmeralds(Items.GLISTERING_MELON_SLICE, 4, 3, 30)})));
-        hashMap.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, ImmutableMap.builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
+        hashMap.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, ImmutableMap.<VillagerType, Item>builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
         hashMap.put(VillagerProfession.SHEPHERD, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.WHITE_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BROWN_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BLACK_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.GRAY_WOOL, 18, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.SHEARS, 2, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHITE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.GRAY_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.BLACK_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIGHT_BLUE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIME_DYE, 12, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_CARPET, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.YELLOW_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.LIGHT_GRAY_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.ORANGE_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.RED_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.PINK_DYE, 12, 16, 20), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.RED_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_BED, 3, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BROWN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.PURPLE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.BLUE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.GREEN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.MAGENTA_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.CYAN_DYE, 12, 16, 30), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 12, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.PAINTING, 2, 3, 30)})));
         hashMap.put(VillagerProfession.FLETCHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STICK, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.ARROW, 1, 16, 1), new VillagerTrades.ItemsAndEmeraldsToItems(Blocks.GRAVEL, 10, Items.FLINT, 10, 12, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FLINT, 26, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.BOW, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 14, 16, 20), new VillagerTrades.ItemsForEmeralds(Items.CROSSBOW, 3, 1, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FEATHER, 24, 16, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.BOW, 2, 3, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TRIPWIRE_HOOK, 8, 12, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.CROSSBOW, 3, 3, 15), new VillagerTrades.TippedArrowForItemsAndEmeralds(Items.ARROW, 5, Items.TIPPED_ARROW, 5, 2, 12, 30)})));
-        hashMap.put(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
+        hashMap.put(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.<Integer, ItemListing[]>builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
         hashMap.put(VillagerProfession.CARTOGRAPHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.MAP, 7, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GLASS_PANE, 11, 16, 10), new VillagerTrades.TreasureMapForEmeralds(13, StructureFeature.OCEAN_MONUMENT, MapDecoration.Type.MONUMENT, 12, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COMPASS, 1, 12, 20), new VillagerTrades.TreasureMapForEmeralds(14, StructureFeature.WOODLAND_MANSION, MapDecoration.Type.MANSION, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.ITEM_FRAME, 7, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GLOBE_BANNER_PATTERN, 8, 1, 30)})));
         hashMap.put(VillagerProfession.CLERIC, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.ROTTEN_FLESH, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.REDSTONE, 1, 2, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GOLD_INGOT, 3, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.LAPIS_LAZULI, 1, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.RABBIT_FOOT, 2, 12, 20), new VillagerTrades.ItemsForEmeralds(Blocks.GLOWSTONE, 4, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SCUTE, 4, 12, 30), new VillagerTrades.EmeraldForItems(Items.GLASS_BOTTLE, 9, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.ENDER_PEARL, 5, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.NETHER_WART, 22, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.EXPERIENCE_BOTTLE, 3, 1, 30)})));
         hashMap.put(VillagerProfession.ARMORER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_LEGGINGS), 7, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_BOOTS), 4, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_HELMET), 5, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_CHESTPLATE), 9, 1, 12, 1, 0.2F)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_BOOTS), 1, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_LEGGINGS), 3, 1, 12, 5, 0.2F)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.LAVA_BUCKET, 1, 12, 20), new VillagerTrades.EmeraldForItems(Items.DIAMOND, 1, 12, 20), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_HELMET), 1, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_CHESTPLATE), 4, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.SHIELD), 5, 1, 12, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_LEGGINGS, 14, 3, 15, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_BOOTS, 8, 3, 15, 0.2F)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_HELMET, 8, 3, 30, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_CHESTPLATE, 16, 3, 30, 0.2F)})));
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index aa85792c119eb6695f7326540f925938c7ab96da..8f476e41dc10b4b6b7ac177939ca20303bf914d5 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -122,7 +122,7 @@ public abstract class Player extends LivingEntity {
     public static final float SWIMMING_BB_HEIGHT = 0.6F;
     public static final float DEFAULT_EYE_HEIGHT = 1.62F;
     public static final EntityDimensions STANDING_DIMENSIONS = EntityDimensions.scalable(0.6F, 1.8F);
-    private static final Map<Pose, EntityDimensions> POSES = ImmutableMap.builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
+    private static final Map<Pose, EntityDimensions> POSES = ImmutableMap.<Pose, EntityDimensions>builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
     private static final int FLY_ACHIEVEMENT_SPEED = 25;
     private static final EntityDataAccessor<Float> DATA_PLAYER_ABSORPTION_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.FLOAT);
     private static final EntityDataAccessor<Integer> DATA_SCORE_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.INT);
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index 5ccbd5a146b45e071b6097fed790ff66671331c3..1ed97b03ba7261f69228b926f37b8f0ff2efa1ec 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -163,7 +163,7 @@ public abstract class AbstractMinecart extends Entity {
                 UnmodifiableIterator d3 = ((ImmutableList)POSE_DISMOUNT_HEIGHTS.get(pose)).iterator();
 
                 while(d3.hasNext()) {
-                    int i2 = d3.next();
+                    int i2 = (int) d3.next();
 
                     for(int[] ints : i) {
                         mutableBlockPos.set(blockPos.getX() + ints[0], blockPos.getY() + i2, blockPos.getZ() + ints[1]);
@@ -180,16 +180,16 @@ public abstract class AbstractMinecart extends Entity {
                 }
             }
 
-            double d2 = this.getBoundingBox().maxY;
-            mutableBlockPos.set((double)blockPos.getX(), d2, (double)blockPos.getZ());
+            double maxY = this.getBoundingBox().maxY;
+            mutableBlockPos.set((double)blockPos.getX(), maxY, (double)blockPos.getZ());
             UnmodifiableIterator var22 = immutableList.iterator();
 
             while(var22.hasNext()) {
                 Pose pose2 = (Pose)var22.next();
                 double d3 = (double)livingEntity.getDimensions(pose2).height;
-                int i3 = Mth.ceil(d2 - (double)mutableBlockPos.getY() + d3);
+                int i3 = Mth.ceil(maxY - (double)mutableBlockPos.getY() + d3);
                 double d4 = DismountHelper.findCeilingFrom(mutableBlockPos, i3, (blockPosx) -> this.level.getBlockState(blockPosx).getCollisionShape(this.level, blockPosx));
-                if (d2 + d3 <= d4) {
+                if (maxY + d3 <= d4) {
                     livingEntity.setPose(pose2);
                     break;
                 }
diff --git a/src/main/java/net/minecraft/world/inventory/DataSlot.java b/src/main/java/net/minecraft/world/inventory/DataSlot.java
index 00799f62cea61878d885ee25341129632cad29a5..4b9dd0554d4002ec5c4995dfbdf22f28c12b74ff 100644
--- a/src/main/java/net/minecraft/world/inventory/DataSlot.java
+++ b/src/main/java/net/minecraft/world/inventory/DataSlot.java
@@ -10,7 +10,7 @@ public abstract class DataSlot {
             }
 
             public void set(int ix) {
-                containerData.set(i, i);
+                containerData.set(i, ix);
             }
         };
     }
@@ -22,7 +22,7 @@ public abstract class DataSlot {
             }
 
             public void set(int ix) {
-                ints[i] = i;
+                ints[i] = ix;
             }
         };
     }
diff --git a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
index d55b1a0b77cd0e8904b7db6b4b02dcfdeff11b4e..6d7ebb7757e1a89e23856974045ce12a20d0b8ad 100644
--- a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
@@ -12,7 +12,7 @@ public abstract class RecipeBookMenu<C extends Container> extends AbstractContai
     }
 
     public void handlePlacement(boolean flag, Recipe<?> recipe, ServerPlayer serverPlayer) {
-        (new ServerPlaceRecipe<>(this)).recipeClicked(serverPlayer, recipe, flag);
+        (new ServerPlaceRecipe<>(this)).recipeClicked(serverPlayer, (Recipe<C>) recipe, flag);
     }
 
     public abstract void fillCraftSlotsStackedContents(StackedContents var1);
diff --git a/src/main/java/net/minecraft/world/item/HoneycombItem.java b/src/main/java/net/minecraft/world/item/HoneycombItem.java
index 856f5f2b9893173ba61804865dff51f57754959a..5b6dfe58b340eef792917fd5a2dce74709a20f95 100644
--- a/src/main/java/net/minecraft/world/item/HoneycombItem.java
+++ b/src/main/java/net/minecraft/world/item/HoneycombItem.java
@@ -17,7 +17,7 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class HoneycombItem extends Item {
-    public static final Supplier<BiMap<Block, Block>> WAXABLES = Suppliers.memoize(() -> ImmutableBiMap.builder().put(Blocks.COPPER_BLOCK, Blocks.WAXED_COPPER_BLOCK).put(Blocks.EXPOSED_COPPER, Blocks.WAXED_EXPOSED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.WAXED_WEATHERED_COPPER).put(Blocks.OXIDIZED_COPPER, Blocks.WAXED_OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.WAXED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WAXED_EXPOSED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.WAXED_WEATHERED_CUT_COPPER).put(Blocks.OXIDIZED_CUT_COPPER, Blocks.WAXED_OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB).put(Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS).put(Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS).build());
+    public static final Supplier<BiMap<Block, Block>> WAXABLES = Suppliers.memoize(() -> ImmutableBiMap.<Block, Block>builder().put(Blocks.COPPER_BLOCK, Blocks.WAXED_COPPER_BLOCK).put(Blocks.EXPOSED_COPPER, Blocks.WAXED_EXPOSED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.WAXED_WEATHERED_COPPER).put(Blocks.OXIDIZED_COPPER, Blocks.WAXED_OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.WAXED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WAXED_EXPOSED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.WAXED_WEATHERED_CUT_COPPER).put(Blocks.OXIDIZED_CUT_COPPER, Blocks.WAXED_OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB).put(Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS).put(Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS).build());
     public static final Supplier<BiMap<Block, Block>> WAX_OFF_BY_BLOCK = Suppliers.memoize(() -> ((BiMap)WAXABLES.get()).inverse());
 
     public HoneycombItem(Item.Properties properties) {
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index 24c168f72e8fa6d195953a8f20e67ad346527687..8a8cfcc46680dc7afeb3332c73d8b070e0972570 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -71,7 +71,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
     }
 
     public <C extends Container, T extends Recipe<C>> List<T> getAllRecipesFor(RecipeType<T> recipeType) {
-        return this.byType(recipeType).values().stream().map((recipe) -> recipe).collect(Collectors.toList());
+        return this.byType(recipeType).values().stream().map((recipe) -> (T) recipe).collect(Collectors.toList());
     }
 
     public <C extends Container, T extends Recipe<C>> List<T> getRecipesFor(RecipeType<T> recipeType, C container, Level level) {
@@ -79,7 +79,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
     }
 
     private <C extends Container, T extends Recipe<C>> Map<ResourceLocation, Recipe<C>> byType(RecipeType<T> recipeType) {
-        return this.recipes.getOrDefault(recipeType, Collections.emptyMap());
+        return (Map) this.recipes.getOrDefault(recipeType, Collections.emptyMap());
     }
 
     public <C extends Container, T extends Recipe<C>> NonNullList<ItemStack> getRemainingItemsFor(RecipeType<T> recipeType, C container, Level level) {
@@ -98,7 +98,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
     }
 
     public Optional<? extends Recipe<?>> byKey(ResourceLocation resourceLocation) {
-        return this.recipes.values().stream().map((map) -> (Recipe)map.get(resourceLocation)).filter(Objects::nonNull).findFirst();
+        return this.recipes.values().stream().map((map) -> (Recipe<?>)map.get(resourceLocation)).filter(Objects::nonNull).findFirst();
     }
 
     public Collection<Recipe<?>> getRecipes() {
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeType.java b/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
index 4da077647c46444466e476682672f77981b36856..df3de9d3f7176dcba7f175103eac3af015433537 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
@@ -24,6 +24,6 @@ public interface RecipeType<T extends Recipe<?>> {
     }
 
     default <C extends Container> Optional<T> tryMatch(Recipe<C> recipe, Level level, C container) {
-        return recipe.matches(container, level) ? Optional.of(recipe) : Optional.empty();
+        return recipe.matches(container, level) ? Optional.of((T) recipe) : Optional.empty();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/BlockGetter.java b/src/main/java/net/minecraft/world/level/BlockGetter.java
index 53d772f066d3f0e84b59ac8c727033535aa7186a..ec5501be91d303eca9e5088913e5842b99194bb5 100644
--- a/src/main/java/net/minecraft/world/level/BlockGetter.java
+++ b/src/main/java/net/minecraft/world/level/BlockGetter.java
@@ -24,7 +24,7 @@ public interface BlockGetter extends LevelHeightAccessor {
 
     default <T extends BlockEntity> Optional<T> getBlockEntity(BlockPos blockPos, BlockEntityType<T> blockEntityType) {
         BlockEntity blockEntity = this.getBlockEntity(blockPos);
-        return blockEntity != null && blockEntity.getType() == blockEntityType ? Optional.of(blockEntity) : Optional.empty();
+        return blockEntity != null && blockEntity.getType() == blockEntityType ? Optional.of((T) blockEntity) : Optional.empty();
     }
 
     BlockState getBlockState(BlockPos var1);
diff --git a/src/main/java/net/minecraft/world/level/CollisionGetter.java b/src/main/java/net/minecraft/world/level/CollisionGetter.java
index fc2eb6ab497cc2f29ee5ff5e14a1d78cd97c1a91..9d2ad54fe8898b698754e866611d15769ed19906 100644
--- a/src/main/java/net/minecraft/world/level/CollisionGetter.java
+++ b/src/main/java/net/minecraft/world/level/CollisionGetter.java
@@ -73,7 +73,7 @@ public interface CollisionGetter extends BlockGetter {
     }
 
     @Nullable
-    private default VoxelShape borderCollision(Entity entity, AABB aabb) {
+    default VoxelShape borderCollision(Entity entity, AABB aabb) {
         WorldBorder worldBorder = this.getWorldBorder();
         return worldBorder.isInsideCloseToBorder(entity, aabb) ? worldBorder.getCollisionShape() : null;
     }
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 32914d98dbb1f55b45f5522fa0d994b060ed5d8c..fe98af3e49242ae3405a0519bb2823d068ce7bb0 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -262,7 +262,7 @@ public class Explosion {
             ObjectListIterator var12 = objectArrayList.iterator();
 
             while(var12.hasNext()) {
-                Pair<ItemStack, BlockPos> pair = var12.next();
+                Pair<ItemStack, BlockPos> pair = (Pair<ItemStack, BlockPos>) var12.next();
                 Block.popResource(this.level, (BlockPos)pair.getSecond(), (ItemStack)pair.getFirst());
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/GameRules.java b/src/main/java/net/minecraft/world/level/GameRules.java
index 6f503f858b1d5d9d9ea5922f32d4bc3764ed8ca7..68be4820135396354fb9d90cbf8bcaec8fbf31ff 100644
--- a/src/main/java/net/minecraft/world/level/GameRules.java
+++ b/src/main/java/net/minecraft/world/level/GameRules.java
@@ -124,8 +124,8 @@ public class GameRules {
     }
 
     private static <T extends GameRules.Value<T>> void callVisitorCap(GameRules.GameRuleTypeVisitor gameRuleTypeVisitor, GameRules.Key<?> key, GameRules.Type<?> type) {
-        gameRuleTypeVisitor.visit(key, type);
-        type.callVisitor(gameRuleTypeVisitor, key);
+        gameRuleTypeVisitor.visit((Key) key, type);
+        type.callVisitor(gameRuleTypeVisitor, (Key) key);
     }
 
     public void assignFrom(GameRules gameRules, @Nullable MinecraftServer minecraftServer) {
diff --git a/src/main/java/net/minecraft/world/level/LevelAccessor.java b/src/main/java/net/minecraft/world/level/LevelAccessor.java
index 7cce24ef2ae66001f2d53b8afbdf48ce04e5233f..249620d0ef6e1b94e4edc8cd296e66a298f3e2ab 100644
--- a/src/main/java/net/minecraft/world/level/LevelAccessor.java
+++ b/src/main/java/net/minecraft/world/level/LevelAccessor.java
@@ -29,11 +29,11 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
 
     LevelTickAccess<Block> getBlockTicks();
 
-    private default <T> ScheduledTick<T> createTick(BlockPos blockPos, T object, int i, TickPriority tickPriority) {
+    default <T> ScheduledTick<T> createTick(BlockPos blockPos, T object, int i, TickPriority tickPriority) {
         return new ScheduledTick(object, blockPos, this.getLevelData().getGameTime() + (long)i, tickPriority, this.nextSubTickCount());
     }
 
-    private default <T> ScheduledTick<T> createTick(BlockPos blockPos, T object, int i) {
+    default <T> ScheduledTick<T> createTick(BlockPos blockPos, T object, int i) {
         return new ScheduledTick(object, blockPos, this.getLevelData().getGameTime() + (long)i, this.nextSubTickCount());
     }
 
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index a5ff0de8da25a5a0b88aec672325b4b101e6d432..4c42f34321b8da1d7bdb38e2fa07cc6e5a49def8 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -80,13 +80,14 @@ public final class NaturalSpawner {
             MobCategory mobCategory = entity.getType().getCategory();
             if (mobCategory != MobCategory.MISC) {
                 BlockPos blockPos = entity.blockPosition();
+                Entity finalEntity = entity;
                 chunkGetter.query(ChunkPos.asLong(blockPos), (levelChunk) -> {
-                    MobSpawnSettings.MobSpawnCost mobSpawnCost = getRoughBiome(blockPos, levelChunk).getMobSettings().getMobSpawnCost(entity.getType());
+                    MobSpawnSettings.MobSpawnCost mobSpawnCost = getRoughBiome(blockPos, levelChunk).getMobSettings().getMobSpawnCost(finalEntity.getType());
                     if (mobSpawnCost != null) {
-                        potentialCalculator.addCharge(entity.blockPosition(), mobSpawnCost.getCharge());
+                        potentialCalculator.addCharge(finalEntity.blockPosition(), mobSpawnCost.getCharge());
                     }
 
-                    if (entity instanceof Mob) {
+                    if (finalEntity instanceof Mob) {
                         localMobCapCalculator.addMob(levelChunk.getPos(), mobCategory);
                     }
 
diff --git a/src/main/java/net/minecraft/world/level/biome/Biome.java b/src/main/java/net/minecraft/world/level/biome/Biome.java
index cd3ab3f2df085f7d1caa690c2775919b3ed2c332..93ca6e6d807adf8d03fa0fb9ff5d850e4636fdd8 100644
--- a/src/main/java/net/minecraft/world/level/biome/Biome.java
+++ b/src/main/java/net/minecraft/world/level/biome/Biome.java
@@ -39,8 +39,8 @@ import org.apache.logging.log4j.Logger;
 
 public final class Biome {
     public static final Logger LOGGER = LogManager.getLogger();
-    public static final Codec<Biome> DIRECT_CODEC;
-    public static final Codec<Biome> NETWORK_CODEC;
+    public static final Codec<Biome> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects), BiomeGenerationSettings.CODEC.forGetter((biome) -> biome.generationSettings), MobSpawnSettings.CODEC.forGetter((biome) -> biome.mobSettings)).apply(instance, Biome::new));
+    public static final Codec<Biome> NETWORK_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects)).apply(instance, (climateSettings, biomeCategory, biomeSpecialEffects) -> new Biome(climateSettings, biomeCategory, biomeSpecialEffects, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY)));
     public static final Codec<Supplier<Biome>> CODEC = RegistryFileCodec.create(Registry.BIOME_REGISTRY, DIRECT_CODEC);
     public static final Codec<List<Supplier<Biome>>> LIST_CODEC = RegistryFileCodec.homogeneousList(Registry.BIOME_REGISTRY, DIRECT_CODEC);
     private static final PerlinSimplexNoise TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(new LegacyRandomSource(1234L)), ImmutableList.of(0));
@@ -236,11 +236,6 @@ public final class Biome {
         return resourceLocation == null ? super.toString() : resourceLocation.toString();
     }
 
-    static {
-        DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects), BiomeGenerationSettings.CODEC.forGetter((biome) -> biome.generationSettings), MobSpawnSettings.CODEC.forGetter((biome) -> biome.mobSettings)).apply(instance, Biome::new));
-        NETWORK_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects)).apply(instance, (climateSettings, biomeCategory, biomeSpecialEffects) -> new Biome(climateSettings, biomeCategory, biomeSpecialEffects, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY)));
-    }
-
     public static class BiomeBuilder {
         @Nullable
         public Biome.Precipitation precipitation;
diff --git a/src/main/java/net/minecraft/world/level/biome/BiomeSource.java b/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
index 939486781391955dd3f3644795f5f8e3900515b5..34658f6f3a048f75532754f339be1ad6a1673c78 100644
--- a/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
@@ -46,9 +46,6 @@ public abstract class BiomeSource {
         Map<FeatureData, Set<FeatureData>> map = new TreeMap(comparator);
         int i = 0;
 
-        record FeatureData(int featureIndex, int step, ConfiguredFeature<?, ?> feature) {
-        }
-
         for(Biome biome : list) {
             List<FeatureData> list2 = Lists.newArrayList();
             List<List<Supplier<ConfiguredFeature<?, ?>>>> list3 = biome.getGenerationSettings().features();
@@ -73,12 +70,12 @@ public abstract class BiomeSource {
         Set<FeatureData> set3 = new TreeSet(comparator);
         List<FeatureData> list4 = Lists.newArrayList();
 
-        for(FeatureData 1FeatureData : map.keySet()) {
+        for(FeatureData featureData : map.keySet()) {
             if (!set3.isEmpty()) {
                 throw new IllegalStateException("You somehow broke the universe; DFS bork (iteration finished with non-empty in-progress vertex set");
             }
 
-            if (!set2.contains(1FeatureData) && Graph.depthFirstSearch(map, set2, set3, list4::add, 1FeatureData)) {
+            if (!set2.contains(featureData) && Graph.depthFirstSearch(map, set2, set3, list4::add, featureData)) {
                 Collections.reverse(list4);
                 throw new IllegalStateException("Feature order cycle found: " + (String)list4.stream().filter(set3::contains).map(Object::toString).collect(Collectors.joining(", ")));
             }
@@ -190,4 +187,7 @@ public abstract class BiomeSource {
         Registry.register(Registry.BIOME_SOURCE, "checkerboard", CheckerboardColumnBiomeSource.CODEC);
         Registry.register(Registry.BIOME_SOURCE, "the_end", TheEndBiomeSource.CODEC);
     }
+
+    record FeatureData(int featureIndex, int step, ConfiguredFeature<?, ?> feature) {
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/biome/Climate.java b/src/main/java/net/minecraft/world/level/biome/Climate.java
index 79656d030f32373ac386d3d8a306b448c2fc668d..f4cd073e0cd3ec386e2e88b56efbd29f19e121b2 100644
--- a/src/main/java/net/minecraft/world/level/biome/Climate.java
+++ b/src/main/java/net/minecraft/world/level/biome/Climate.java
@@ -54,14 +54,9 @@ public class Climate {
         long distance(Climate.RTree.Node<T> var1, long[] var2);
     }
 
-    public static record Parameter(long min, long max, List<Pair<Climate.ParameterPoint, Supplier<T>>> biomes, Climate.RTree<T> index) {
+    public static record Parameter(long min, long max) {
         public static final Codec<Climate.Parameter> CODEC = ExtraCodecs.intervalCodec(Codec.floatRange(-2.0F, 2.0F), "min", "max", (f, f2) -> f.compareTo(f2) > 0 ? DataResult.error("Cannon construct interval, min > max (" + f + " > " + f2 + ")") : DataResult.success(new Climate.Parameter(Climate.quantizeCoord(f), Climate.quantizeCoord(f2))), (parameter) -> Climate.unquantizeCoord(parameter.min()), (parameter) -> Climate.unquantizeCoord(parameter.max()));
 
-        public Parameter(long l, long l2) {
-            this.min = l;
-            this.max = l2;
-        }
-
         public static Climate.Parameter point(float f) {
             return span(f, f);
         }
@@ -103,11 +98,9 @@ public class Climate {
         }
     }
 
-    public static class ParameterList<T> {
-
+    public static record ParameterList<T>(List<Pair<Climate.ParameterPoint, Supplier<T>>> biomes, Climate.RTree<T> index) {
         public ParameterList(List<Pair<Climate.ParameterPoint, Supplier<T>>> list) {
-            this.biomes = list;
-            this.index = Climate.RTree.create(list);
+            this(list, Climate.RTree.create(list));
         }
 
         public T findBiome(Climate.TargetPoint targetPoint, Supplier<T> supplier) {
@@ -139,19 +132,9 @@ public class Climate {
         }
     }
 
-    public static record ParameterPoint(Climate.Parameter temperature, Climate.Parameter humidity, Climate.Parameter continentalness, Climate.Parameter erosion, Climate.Parameter depth, Climate.Parameter weirdness, long offset, Climate.RTree.Node<T> root, Supplier<T> biome, Climate.RTree.Node<T>[] children) {
+    public static record ParameterPoint(Climate.Parameter temperature, Climate.Parameter humidity, Climate.Parameter continentalness, Climate.Parameter erosion, Climate.Parameter depth, Climate.Parameter weirdness, long offset) {
         public static final Codec<Climate.ParameterPoint> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Climate.Parameter.CODEC.fieldOf("temperature").forGetter((parameterPoint) -> parameterPoint.temperature), Climate.Parameter.CODEC.fieldOf("humidity").forGetter((parameterPoint) -> parameterPoint.humidity), Climate.Parameter.CODEC.fieldOf("continentalness").forGetter((parameterPoint) -> parameterPoint.continentalness), Climate.Parameter.CODEC.fieldOf("erosion").forGetter((parameterPoint) -> parameterPoint.erosion), Climate.Parameter.CODEC.fieldOf("depth").forGetter((parameterPoint) -> parameterPoint.depth), Climate.Parameter.CODEC.fieldOf("weirdness").forGetter((parameterPoint) -> parameterPoint.weirdness), Codec.floatRange(0.0F, 1.0F).fieldOf("offset").xmap(Climate::quantizeCoord, Climate::unquantizeCoord).forGetter((parameterPoint) -> parameterPoint.offset)).apply(instance, Climate.ParameterPoint::new));
 
-        public ParameterPoint(Climate.Parameter parameter, Climate.Parameter parameter2, Climate.Parameter parameter3, Climate.Parameter parameter4, Climate.Parameter parameter5, Climate.Parameter parameter6, long l) {
-            this.temperature = parameter;
-            this.humidity = parameter2;
-            this.continentalness = parameter3;
-            this.erosion = parameter4;
-            this.depth = parameter5;
-            this.weirdness = parameter6;
-            this.offset = l;
-        }
-
         long fitness(Climate.TargetPoint targetPoint) {
             return Mth.square(this.temperature.distance(targetPoint.temperature)) + Mth.square(this.humidity.distance(targetPoint.humidity)) + Mth.square(this.continentalness.distance(targetPoint.continentalness)) + Mth.square(this.erosion.distance(targetPoint.erosion)) + Mth.square(this.depth.distance(targetPoint.depth)) + Mth.square(this.weirdness.distance(targetPoint.weirdness)) + Mth.square(this.offset);
         }
@@ -163,6 +146,7 @@ public class Climate {
 
     protected static final class RTree<T> {
         private static final int CHILDREN_PER_NODE = 10;
+        Climate.RTree.Node<T> root;
         private final ThreadLocal<Climate.RTree.Leaf<T>> lastResult = new ThreadLocal();
 
         private RTree(Climate.RTree.Node<T> node) {
@@ -177,7 +161,7 @@ public class Climate {
                 if (i != 7) {
                     throw new IllegalStateException("Expecting parameter space to be 7, got " + i);
                 } else {
-                    List<Climate.RTree.Leaf<T>> list2 = list.stream().map((pair) -> new Climate.RTree.Leaf((Climate.ParameterPoint)pair.getFirst(), pair.getSecond())).collect(Collectors.toCollection(ArrayList::new));
+                    List<Climate.RTree.Leaf<T>> list2 = list.stream().map((pair) -> new Climate.RTree.Leaf<>(pair.getFirst(), pair.getSecond())).collect(Collectors.toCollection(ArrayList::new));
                     return new Climate.RTree<>(build(i, list2));
                 }
             }
@@ -303,6 +287,7 @@ public class Climate {
         }
 
         static final class Leaf<T> extends Climate.RTree.Node<T> {
+            final Supplier<T> biome;
 
             Leaf(Climate.ParameterPoint parameterPoint, Supplier<T> supplier) {
                 super(parameterPoint.parameterSpace());
@@ -339,6 +324,7 @@ public class Climate {
         }
 
         static final class SubTree<T> extends Climate.RTree.Node<T> {
+            final Climate.RTree.Node<T>[] children;
 
             protected SubTree(List<? extends Climate.RTree.Node<T>> list) {
                 this(Climate.RTree.buildParameterSpace(list), list);
diff --git a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
index 0f484d3c598d5b9c1ede80a1705be207f79662c4..177b08448fc0580124ed74c8ff9547006d831373 100644
--- a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
@@ -28,7 +28,7 @@ import net.minecraft.world.level.levelgen.TerrainInfo;
 import net.minecraft.world.level.levelgen.blending.Blender;
 
 public class MultiNoiseBiomeSource extends BiomeSource {
-    public static final MapCodec<MultiNoiseBiomeSource> DIRECT_CODEC;
+    public static final MapCodec<MultiNoiseBiomeSource> DIRECT_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(RecordCodecBuilder.<Pair<Climate.ParameterPoint, Supplier<Biome>>>create((instancex) -> instancex.group(Climate.ParameterPoint.CODEC.fieldOf("parameters").forGetter(Pair<Climate.ParameterPoint, Supplier<Biome>>::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair<Climate.ParameterPoint, Supplier<Biome>>::getSecond)).apply(instancex, Pair::of)).listOf().xmap(Climate.ParameterList::new, Climate.ParameterList::biomes).fieldOf("biomes").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.parameters)).apply(instance, MultiNoiseBiomeSource::new));
     public static final Codec<MultiNoiseBiomeSource> CODEC = Codec.mapEither(MultiNoiseBiomeSource.PresetInstance.CODEC, DIRECT_CODEC).xmap((either) -> (MultiNoiseBiomeSource)either.map(MultiNoiseBiomeSource.PresetInstance::biomeSource, Function.identity()), (multiNoiseBiomeSource) -> (Either)multiNoiseBiomeSource.preset().map(Either::left).orElseGet(() -> Either.right(multiNoiseBiomeSource))).codec();
     private final Climate.ParameterList<Biome> parameters;
     private final Optional<Pair<Registry<Biome>, MultiNoiseBiomeSource.Preset>> preset;
@@ -90,10 +90,6 @@ public class MultiNoiseBiomeSource extends BiomeSource {
         }
     }
 
-    static {
-        DIRECT_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(RecordCodecBuilder.create((instancex) -> instancex.group(Climate.ParameterPoint.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair::getSecond)).apply(instancex, Pair::of)).listOf().xmap(Climate.ParameterList::new, Climate.ParameterList::biomes).fieldOf("biomes").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.parameters)).apply(instance, MultiNoiseBiomeSource::new));
-    }
-
     public static class Preset {
         static final Map<ResourceLocation, MultiNoiseBiomeSource.Preset> BY_NAME = Maps.newHashMap();
         public static final MultiNoiseBiomeSource.Preset NETHER = new MultiNoiseBiomeSource.Preset(new ResourceLocation("nether"), (preset, registry) -> new MultiNoiseBiomeSource(new Climate.ParameterList<>(ImmutableList.of(Pair.of(Climate.parameters(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F), () -> registry.getOrThrow(Biomes.NETHER_WASTES)), Pair.of(Climate.parameters(0.0F, -0.5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F), () -> registry.getOrThrow(Biomes.SOUL_SAND_VALLEY)), Pair.of(Climate.parameters(0.4F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F), () -> registry.getOrThrow(Biomes.CRIMSON_FOREST)), Pair.of(Climate.parameters(0.0F, 0.5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.375F), () -> registry.getOrThrow(Biomes.WARPED_FOREST)), Pair.of(Climate.parameters(-0.5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.175F), () -> registry.getOrThrow(Biomes.BASALT_DELTAS)))), Optional.of(Pair.of(registry, preset))));
diff --git a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
index f36aeb222dcf0648d626f423d9ba26ca0a2f3be3..6d688bc0d308f09cc21b0f01476ba387c0c390cb 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
@@ -33,6 +33,6 @@ public abstract class BaseEntityBlock extends Block implements EntityBlock {
 
     @Nullable
     protected static <E extends BlockEntity, A extends BlockEntity> BlockEntityTicker<A> createTickerHelper(BlockEntityType<A> blockEntityType, BlockEntityType<E> blockEntityType2, BlockEntityTicker<? super E> blockEntityTicker) {
-        return blockEntityType2 == blockEntityType ? blockEntityTicker : null;
+        return blockEntityType2 == blockEntityType ? (BlockEntityTicker<A>) blockEntityTicker : null;
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
index 94198785a875a18d134a5e6102bb73846933111e..9c4ca39dbda2362460bd31732a4a31307b7137e0 100644
--- a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
@@ -55,7 +55,7 @@ public class IronBarsBlock extends CrossCollisionBlock {
                 return true;
             }
 
-            if (blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction)) && blockState2.getValue((Property)PROPERTY_BY_DIRECTION.get(direction.getOpposite()))) {
+            if (blockState.getValue(PROPERTY_BY_DIRECTION.get(direction)) && blockState2.getValue(PROPERTY_BY_DIRECTION.get(direction.getOpposite()))) {
                 return true;
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/PipeBlock.java b/src/main/java/net/minecraft/world/level/block/PipeBlock.java
index 4186147b04fa1a6e286969cd3484a4f9ec864f8e..432a87a9d892212697585a0a59e29aad76c0bf99 100644
--- a/src/main/java/net/minecraft/world/level/block/PipeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PipeBlock.java
@@ -79,7 +79,7 @@ public class PipeBlock extends Block {
         int i = 0;
 
         for(int i2 = 0; i2 < DIRECTIONS.length; ++i2) {
-            if (blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(DIRECTIONS[i2]))) {
+            if (blockState.getValue(PROPERTY_BY_DIRECTION.get(DIRECTIONS[i2]))) {
                 i |= 1 << i2;
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index 47e53ae2cd1e4c09a226f12eb8113c5ad9dba2e6..3e8551bce2f2107e87a644871a1771e5b15d63c4 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -85,7 +85,7 @@ public class RedStoneWireBlock extends Block {
         VoxelShape voxelShape = SHAPE_DOT;
 
         for(Direction direction : Direction.Plane.HORIZONTAL) {
-            RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+            RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction));
             if (redstoneSide == RedstoneSide.SIDE) {
                 voxelShape = Shapes.or(voxelShape, (VoxelShape)SHAPES_FLOOR.get(direction));
             } else if (redstoneSide == RedstoneSide.UP) {
@@ -172,7 +172,7 @@ public class RedStoneWireBlock extends Block {
         BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
 
         for(Direction direction : Direction.Plane.HORIZONTAL) {
-            RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+            RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction));
             if (redstoneSide != RedstoneSide.NONE && !levelAccessor.getBlockState(mutableBlockPos.setWithOffset(blockPos, direction)).is(this)) {
                 mutableBlockPos.move(Direction.DOWN);
                 BlockState blockState2 = levelAccessor.getBlockState(mutableBlockPos);
@@ -396,7 +396,7 @@ public class RedStoneWireBlock extends Block {
         int i = blockState.getValue(POWER);
         if (i != 0) {
             for(Direction direction : Direction.Plane.HORIZONTAL) {
-                RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+                RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction));
                 switch(redstoneSide) {
                 case UP:
                     this.spawnParticlesAlongLine(level, random, blockPos, COLORS[i], direction, Direction.UP, -0.5F, 0.5F);
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
index 42b6ea6f07acc5811e2e4c2c938906638ce5bbb3..cb839f61945e33542f5ac60160dd833b9cc8c458 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
@@ -8,7 +8,7 @@ import java.util.function.Supplier;
 import net.minecraft.world.level.block.state.BlockState;
 
 public interface WeatheringCopper extends ChangeOverTimeBlock<WeatheringCopper.WeatherState> {
-    Supplier<BiMap<Block, Block>> NEXT_BY_BLOCK = Suppliers.memoize(() -> ImmutableBiMap.builder().put(Blocks.COPPER_BLOCK, Blocks.EXPOSED_COPPER).put(Blocks.EXPOSED_COPPER, Blocks.WEATHERED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.EXPOSED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WEATHERED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.OXIDIZED_CUT_COPPER_STAIRS).build());
+    Supplier<BiMap<Block, Block>> NEXT_BY_BLOCK = Suppliers.memoize(() -> ImmutableBiMap.<Block, Block>builder().put(Blocks.COPPER_BLOCK, Blocks.EXPOSED_COPPER).put(Blocks.EXPOSED_COPPER, Blocks.WEATHERED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.EXPOSED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WEATHERED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.OXIDIZED_CUT_COPPER_STAIRS).build());
     Supplier<BiMap<Block, Block>> PREVIOUS_BY_BLOCK = Suppliers.memoize(() -> ((BiMap)NEXT_BY_BLOCK.get()).inverse());
 
     static Optional<Block> getPrevious(Block block) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
index e5be49043a30aa9f75bf2487ea6e0f87927372a2..7e7a6144c0b245218cce23c9e0cea0182726cb3b 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
@@ -265,12 +265,12 @@ public class StructureBlockEntity extends BlockEntity {
             BlockPos blockPos3 = new BlockPos(blockPos.getX() + 80, this.level.getMaxBuildHeight() - 1, blockPos.getZ() + 80);
             Stream<BlockPos> stream = this.getRelatedCorners(blockPos2, blockPos3);
             return calculateEnclosingBoundingBox(blockPos, stream).filter((boundingBox) -> {
-                int i = boundingBox.maxX() - boundingBox.minX();
+                int ix = boundingBox.maxX() - boundingBox.minX();
                 int i2 = boundingBox.maxY() - boundingBox.minY();
                 int i3 = boundingBox.maxZ() - boundingBox.minZ();
-                if (i > 1 && i2 > 1 && i3 > 1) {
+                if (ix > 1 && i2 > 1 && i3 > 1) {
                     this.structurePos = new BlockPos(boundingBox.minX() - blockPos.getX() + 1, boundingBox.minY() - blockPos.getY() + 1, boundingBox.minZ() - blockPos.getZ() + 1);
-                    this.structureSize = new Vec3i(i - 1, i2 - 1, i3 - 1);
+                    this.structureSize = new Vec3i(ix - 1, i2 - 1, i3 - 1);
                     this.setChanged();
                     BlockState blockState = this.level.getBlockState(blockPos);
                     this.level.sendBlockUpdated(blockPos, blockState, blockState, 3);
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
index 1e07de2b3263c22f2942899ab2d82593af62583a..496a061eba13ba89bb689ebef4d1fac661ddb257 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.block.state;
 
 import com.google.common.base.MoreObjects;
+import com.google.common.collect.ImmutableCollection;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSortedMap;
@@ -34,7 +35,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
     protected StateDefinition(Function<O, S> function, O object, StateDefinition.Factory<O, S> factory, Map<String, Property<?>> map) {
         this.owner = object;
         this.propertiesByName = ImmutableSortedMap.copyOf(map);
-        Supplier<S> supplier = () -> (StateHolder)function.apply(object);
+        Supplier<S> supplier = () -> (S) function.apply(object);
         MapCodec<S> mapCodec = MapCodec.of(Encoder.empty(), Decoder.unit(supplier));
 
         Entry<String, Property<?>> entry;
@@ -47,13 +48,12 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
         List<S> list = Lists.newArrayList();
         Stream<List<Pair<Property<?>, Comparable<?>>>> stream = Stream.of(Collections.emptyList());
 
-        Property<?> property;
-        for(UnmodifiableIterator var11 = this.propertiesByName.values().iterator(); var11.hasNext(); stream = stream.flatMap((listx) -> property.getPossibleValues().stream().map((comparable) -> {
-                List<Pair<Property<?>, Comparable<?>>> list2 = Lists.newArrayList(listx);
-                list2.add(Pair.of(property, comparable));
-                return list2;
-            }))) {
-            property = (Property)var11.next();
+        for(Property<?> property : this.propertiesByName.values()) {
+            stream = stream.flatMap((l) -> property.getPossibleValues().stream().map((o) -> {
+                List<Pair<Property<?>, Comparable<?>>> list1 = Lists.newArrayList(l);
+                list1.add(Pair.of(property, o));
+                return list1;
+            }));
         }
 
         stream.forEach((list2) -> {
@@ -72,7 +72,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
 
     private static <S extends StateHolder<?, S>, T extends Comparable<T>> MapCodec<S> appendPropertyCodec(MapCodec<S> mapCodec, Supplier<S> supplier, String s, Property<T> property) {
         return Codec.mapPair(mapCodec, property.valueCodec().fieldOf(s).orElseGet((sx) -> {
-        }, () -> property.value((StateHolder)supplier.get()))).xmap((pair) -> (StateHolder)((StateHolder)pair.getFirst()).setValue(property, ((Property.Value)pair.getSecond()).value()), (stateHolder) -> Pair.of(stateHolder, property.value(stateHolder)));
+        }, () -> property.value(supplier.get()))).xmap((pair) -> pair.getFirst().setValue(property, pair.getSecond().value()), (stateHolder) -> Pair.of(stateHolder, property.value(stateHolder)));
     }
 
     public ImmutableList<S> getPossibleStates() {
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
index 8c87e11f9f15006bdf7bfbed0b6f3d78a24dc59a..9c7f21e2d82c94fcd23d8ff1ccf5d0c3be6e441a 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
@@ -98,7 +98,7 @@ public abstract class StateHolder<O, S> {
 
     public <T extends Comparable<T>> Optional<T> getOptionalValue(Property<T> property) {
         Comparable<?> comparable = (Comparable)this.values.get(property);
-        return comparable == null ? Optional.empty() : Optional.of((Comparable)property.getValueClass().cast(comparable));
+        return comparable == null ? Optional.empty() : Optional.of(property.getValueClass().cast(comparable));
     }
 
     public <T extends Comparable<T>, V extends T> S setValue(Property<T> property, V comparable) {
@@ -150,9 +150,9 @@ public abstract class StateHolder<O, S> {
     }
 
     protected static <O, S extends StateHolder<O, S>> Codec<S> codec(Codec<O> codec, Function<O, S> function) {
-        return codec.dispatch("Name", (stateHolder) -> stateHolder.owner, (object) -> {
+        return codec.<S>dispatch("Name", (stateHolder) -> stateHolder.owner, (object) -> {
             S stateHolder = (S)(function.apply(object));
-            return stateHolder.getValues().isEmpty() ? Codec.unit(stateHolder) : stateHolder.propertiesCodec.codec().optionalFieldOf("Properties").xmap((optional) -> (StateHolder)optional.orElse(stateHolder), Optional::of).codec();
+            return stateHolder.getValues().isEmpty() ? Codec.unit(stateHolder) : stateHolder.propertiesCodec.codec().optionalFieldOf("Properties").xmap((optional) -> optional.orElse(stateHolder), Optional::of).codec();
         });
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
index 8c44f10310d942ac0ad9d6c312c8c4dbf90e675f..90c0f7e4815c59f8b2a52cf471f209c8eeed0007 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
@@ -35,7 +35,7 @@ public class EnumProperty<T extends Enum<T> & StringRepresentable> extends Prope
     }
 
     public Optional<T> getValue(String s) {
-        return Optional.ofNullable((Enum)this.names.get(s));
+        return Optional.ofNullable(this.names.get(s));
     }
 
     public String getName(T enum_) {
@@ -64,7 +64,7 @@ public class EnumProperty<T extends Enum<T> & StringRepresentable> extends Prope
     }
 
     public static <T extends Enum<T> & StringRepresentable> EnumProperty<T> create(String s, Class<T> clazz, Predicate<T> predicate) {
-        return create(s, clazz, Arrays.stream((Enum[])clazz.getEnumConstants()).filter(predicate).collect(Collectors.toList()));
+        return create(s, clazz, Arrays.stream(clazz.getEnumConstants()).filter(predicate).collect(Collectors.toList()));
     }
 
     public static <T extends Enum<T> & StringRepresentable> EnumProperty<T> create(String s, Class<T> clazz, T... enums) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
index 1ed51ee91f9d051a6bb70d462b8ab8edf3cce6f6..568a8e0584c248908a3633017948233d7b92442c 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
@@ -89,12 +89,7 @@ public abstract class Property<T extends Comparable<T>> {
         return dataResult.map((comparable) -> stateHolder.setValue(this, comparable)).setPartial(stateHolder);
     }
 
-    public static record Value(Property<T> property, T value) { else {
-                this.property = property;
-                this.value = comparable;
-            }
-        }
-
+    public static record Value<T extends Comparable<T>>(Property<T> property, T value) {
         public String toString() {
             return this.property.getName() + "=" + this.property.getName(this.value);
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
index ecade33cb2e9839ff1b2ac404c137448da8e4900..369780f33f5727f50556bae47b516f8a609fc961 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -309,7 +309,7 @@ public abstract class ChunkGenerator implements BiomeManager.NoiseBiomeSource {
 
                     while(var15.hasNext()) {
                         Entry<ConfiguredStructureFeature<?, ?>, Collection<ResourceKey<Biome>>> entry = (Entry)var15.next();
-                        StructureStart<?> structureStart2 = ((ConfiguredStructureFeature)entry.getKey()).generate(registryAccess, this, this.biomeSource, structureManager, l, chunkPos, i, structureFeatureConfiguration2, chunkAccess, (biome) -> this.validBiome(registry, (entry.getValue())::contains, biome));
+                        StructureStart<?> structureStart2 = entry.getKey().generate(registryAccess, this, this.biomeSource, structureManager, l, chunkPos, i, structureFeatureConfiguration2, chunkAccess, (biome) -> this.validBiome(registry, (entry.getValue())::contains, biome));
                         if (structureStart2.isValid()) {
                             structureFeatureManager.setStartForFeature(sectionPos, structureFeature, structureStart2, chunkAccess);
                             continue label39;
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
index e75111df497b3e7170bc2341585b67744df15816..895110e56d2e29a94334b028c8632334ca7a5b21 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
@@ -40,7 +40,9 @@ public class ChunkStatus {
     };
     public static final ChunkStatus EMPTY = registerSimple("empty", (ChunkStatus)null, -1, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkStatus, serverLevel, chunkGenerator, list, chunkAccess) -> {
     });
-    public static final ChunkStatus STRUCTURE_STARTS = register("structure_starts", EMPTY, 0, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkStatus, executor, serverLevel, chunkGenerator, structureManager, threadedLevelLightEngine, function, list, chunkAccess, flag) -> {
+    public static final ChunkStatus STRUCTURE_STARTS = register("structure_starts", EMPTY, 0, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, new GenerationTask() {
+        @Override
+        public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> doWork(ChunkStatus chunkStatus, Executor executor, ServerLevel serverLevel, ChunkGenerator chunkGenerator, StructureManager structureManager, ThreadedLevelLightEngine threadedLevelLightEngine, Function<ChunkAccess, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> chunkAccessCompletableFutureFunction, List<ChunkAccess> list, ChunkAccess chunkAccess, boolean var10) {
         if (!chunkAccess.getStatus().isOrAfter(chunkStatus)) {
             if (serverLevel.getServer().getWorldData().worldGenSettings().generateFeatures()) {
                 chunkGenerator.createStructures(serverLevel.registryAccess(), serverLevel.structureFeatureManager(), chunkAccess, structureManager, serverLevel.getSeed());
@@ -53,6 +55,7 @@ public class ChunkStatus {
         }
 
         return CompletableFuture.completedFuture(Either.left(chunkAccess));
+        }
     });
     public static final ChunkStatus STRUCTURE_REFERENCES = registerSimple("structure_references", STRUCTURE_STARTS, 8, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkStatus, serverLevel, chunkGenerator, list, chunkAccess) -> {
         WorldGenRegion worldGenRegion = new WorldGenRegion(serverLevel, list, chunkStatus, -1);
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index fb2b18dd050839051c56a63803b49292da4716d3..4d7dc415834290417630d23294fde8e240f9b345 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -561,7 +561,7 @@ public class LevelChunk extends ChunkAccess {
 
     private <T extends BlockEntity> void updateBlockEntityTicker(T blockEntity) {
         BlockState blockState = blockEntity.getBlockState();
-        BlockEntityTicker<T> blockEntityTicker = blockState.getTicker(this.level, blockEntity.getType());
+        BlockEntityTicker<T> blockEntityTicker = (BlockEntityTicker<T>) blockState.getTicker(this.level, blockEntity.getType());
         if (blockEntityTicker == null) {
             this.removeBlockEntityTicker(blockEntity.getBlockPos());
         } else {
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
index cf9f8ed0174acc02e6bf9c4d13c56316bb161e2f..54f06f22d726d0ce5b29d8ff22a957c08541a04c 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -37,7 +37,7 @@ public class PalettedContainer<T> implements PaletteResize<T> {
     public void acquire() {
         if (this.traces != null) {
             Thread thread = Thread.currentThread();
-            this.traces.push((T)Pair.of(thread, thread.getStackTrace()));
+            this.traces.push(Pair.of(thread, thread.getStackTrace()));
         }
 
         ThreadingDetector.checkAndLock(this.lock, this.traces, "PalettedContainer");
@@ -48,7 +48,7 @@ public class PalettedContainer<T> implements PaletteResize<T> {
     }
 
     public static <T> Codec<PalettedContainer<T>> codec(IdMap<T> idMap, Codec<T> codec, PalettedContainer.Strategy strategy, T object) {
-        return RecordCodecBuilder.create((instance) -> instance.group(codec.mapResult(ExtraCodecs.orElsePartial(object)).listOf().fieldOf("palette").forGetter(PalettedContainer.DiscData::paletteEntries), Codec.LONG_STREAM.optionalFieldOf("data").forGetter(PalettedContainer.DiscData::storage)).apply(instance, PalettedContainer.DiscData::new)).comapFlatMap((discData) -> read(idMap, strategy, discData), (palettedContainer) -> palettedContainer.write(idMap, strategy));
+        return RecordCodecBuilder.<DiscData<T>>create((instance) -> instance.group(codec.mapResult(ExtraCodecs.orElsePartial(object)).listOf().fieldOf("palette").forGetter(PalettedContainer.DiscData<T>::paletteEntries), Codec.LONG_STREAM.optionalFieldOf("data").forGetter(PalettedContainer.DiscData<T>::storage)).apply(instance, PalettedContainer.DiscData<T>::new)).comapFlatMap((discData) -> read(idMap, strategy, discData), (palettedContainer) -> palettedContainer.write(idMap, strategy));
     }
 
     public PalettedContainer(IdMap<T> idMap, PalettedContainer.Strategy strategy, PalettedContainer.Configuration<T> configuration, BitStorage bitStorage, List<T> list) {
@@ -243,12 +243,6 @@ public class PalettedContainer<T> implements PaletteResize<T> {
     }
 
     static record Configuration<T>(Palette.Factory factory, int bits) {
-
-        Configuration(Palette.Factory factory, int i) {
-            this.factory = factory;
-            this.bits = i;
-        }
-
         public PalettedContainer.Data<T> createData(IdMap<T> idMap, PaletteResize<T> paletteResize, int i) {
             BitStorage bitStorage = (BitStorage)(this.bits == 0 ? new ZeroBitStorage(i) : new SimpleBitStorage(this.bits, i));
             Palette<T> palette = this.factory.create(this.bits, idMap, paletteResize, List.of());
@@ -261,7 +255,7 @@ public class PalettedContainer<T> implements PaletteResize<T> {
         void accept(T var1, int var2);
     }
 
-    static record Data(PalettedContainer.Configuration<T> configuration, BitStorage storage, Palette<T> palette) {
+    static record Data<T>(PalettedContainer.Configuration<T> configuration, BitStorage storage, Palette<T> palette) {
 
         public void copyFrom(Palette<T> palette, BitStorage bitStorage) {
             for(int i = 0; i < bitStorage.getSize(); ++i) {
@@ -285,12 +279,7 @@ public class PalettedContainer<T> implements PaletteResize<T> {
         }
     }
 
-    static record DiscData(List<T> paletteEntries, Optional<LongStream> storage, int sizeBits) {
-
-        DiscData(List<T> list, Optional<LongStream> optional) {
-            this.paletteEntries = list;
-            this.storage = optional;
-        }
+    static record DiscData<T>(List<T> paletteEntries, Optional<LongStream> storage) {
     }
 
     public abstract static class Strategy {
@@ -343,6 +332,8 @@ public class PalettedContainer<T> implements PaletteResize<T> {
             }
         };
 
+        private final int sizeBits;
+
         Strategy(int i) {
             this.sizeBits = i;
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 221795e5ada454b5daa73e123d82ac22291138d0..e104f77f346b3aa326e0f3e590a3de09ede6ae3c 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -139,7 +139,7 @@ public class ChunkSerializer {
             chunkAccess = protoChunk;
             protoChunk.setInhabitedTime(l);
             if (compoundTag.contains("below_zero_retrogen", 10)) {
-                BelowZeroRetrogen.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("below_zero_retrogen"))).resultOrPartial(LOGGER::error).ifPresent(protoChunk::setBelowZeroRetrogen);
+                BelowZeroRetrogen.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("below_zero_retrogen"))).resultOrPartial(LOGGER::error).ifPresent(protoChunk::setBelowZeroRetrogen);
             }
 
             ChunkStatus chunkStatus = ChunkStatus.byName(compoundTag.getString("Status"));
diff --git a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
index 36fa61f63ccede3944e42193aa7a60c86394c837..ae6a9c251c8ba23fb84327e3fc01003ef205fed5 100644
--- a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
+++ b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
@@ -41,7 +41,7 @@ public class DimensionType {
     public static final ResourceLocation OVERWORLD_EFFECTS = new ResourceLocation("overworld");
     public static final ResourceLocation NETHER_EFFECTS = new ResourceLocation("the_nether");
     public static final ResourceLocation END_EFFECTS = new ResourceLocation("the_end");
-    public static final Codec<DimensionType> DIRECT_CODEC;
+    public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.<DimensionType>create((instance) -> instance.group(Codec.LONG.optionalFieldOf("fixed_time").xmap((optional) -> (OptionalLong)optional.map(OptionalLong::of).orElseGet(OptionalLong::empty), (optionalLong) -> optionalLong.isPresent() ? Optional.of(optionalLong.getAsLong()) : Optional.empty()).forGetter((dimensionType) -> dimensionType.fixedTime), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange((double)1.0E-5F, 3.0E7D).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange(MIN_Y, MAX_Y).fieldOf("min_y").forGetter(DimensionType::minY), Codec.intRange(16, Y_SIZE).fieldOf("height").forGetter(DimensionType::height), Codec.intRange(0, Y_SIZE).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter((dimensionType) -> dimensionType.infiniburn), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter((dimensionType) -> dimensionType.effectsLocation), Codec.FLOAT.fieldOf("ambient_light").forGetter((dimensionType) -> dimensionType.ambientLight)).apply(instance, DimensionType::new)).comapFlatMap(DimensionType::guardY, Function.identity());
     private static final int MOON_PHASES = 8;
     public static final float[] MOON_BRIGHTNESS_PER_PHASE = new float[]{1.0F, 0.75F, 0.5F, 0.25F, 0.0F, 0.25F, 0.5F, 0.75F};
     public static final ResourceKey<DimensionType> OVERWORLD_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld"));
@@ -280,8 +280,4 @@ public class DimensionType {
             return this.hasSkylight == dimensionType.hasSkylight && this.hasCeiling == dimensionType.hasCeiling && this.ultraWarm == dimensionType.ultraWarm && this.natural == dimensionType.natural && this.coordinateScale == dimensionType.coordinateScale && this.createDragonFight == dimensionType.createDragonFight && this.piglinSafe == dimensionType.piglinSafe && this.bedWorks == dimensionType.bedWorks && this.respawnAnchorWorks == dimensionType.respawnAnchorWorks && this.hasRaids == dimensionType.hasRaids && this.minY == dimensionType.minY && this.height == dimensionType.height && this.logicalHeight == dimensionType.logicalHeight && Float.compare(dimensionType.ambientLight, this.ambientLight) == 0 && this.fixedTime.equals(dimensionType.fixedTime) && this.infiniburn.equals(dimensionType.infiniburn) && this.effectsLocation.equals(dimensionType.effectsLocation);
         }
     }
-
-    static {
-        DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.LONG.optionalFieldOf("fixed_time").xmap((optional) -> (OptionalLong)optional.map(OptionalLong::of).orElseGet(OptionalLong::empty), (optionalLong) -> optionalLong.isPresent() ? Optional.of(optionalLong.getAsLong()) : Optional.empty()).forGetter((dimensionType) -> dimensionType.fixedTime), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange((double)1.0E-5F, 3.0E7D).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange(MIN_Y, MAX_Y).fieldOf("min_y").forGetter(DimensionType::minY), Codec.intRange(16, Y_SIZE).fieldOf("height").forGetter(DimensionType::height), Codec.intRange(0, Y_SIZE).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter((dimensionType) -> dimensionType.infiniburn), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter((dimensionType) -> dimensionType.effectsLocation), Codec.FLOAT.fieldOf("ambient_light").forGetter((dimensionType) -> dimensionType.ambientLight)).apply(instance, DimensionType::new)).comapFlatMap(DimensionType::guardY, Function.identity());
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
index cd5fd40ecffdf5ab98232b2cf47de6ec4d07d991..0820ef76bd959536d3d4835fed2deb36133910e1 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
@@ -104,7 +104,7 @@ public class EntitySectionStorage<T extends EntityAccess> {
 
     public LongSet getAllChunksWithExistingSections() {
         LongSet longSet = new LongOpenHashSet();
-        this.sections.keySet().forEach((l) -> longSet.add(getChunkKeyFromSectionKey(l)));
+        this.sections.keySet().forEach((java.util.function.LongConsumer) (l) -> longSet.add(getChunkKeyFromSectionKey(l)));
         return longSet;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
index 36eea12c8ba27654a0d6c739fac0e21c352cc6f3..0e57d738d89ecbb8b3c8c68e9b6f92055e6c6a7f 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
@@ -25,9 +25,9 @@ public class EntityTickList {
                 this.passive.put(entry.getIntKey(), (Entity)entry.getValue());
             }
 
-            Int2ObjectMap<Entity> int2ObjectMap = this.active;
+            Int2ObjectMap<Entity> originalMap = this.active;
             this.active = this.passive;
-            this.passive = int2ObjectMap;
+            this.passive = originalMap;
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
index b1250e4a1b7771b78481759d49161d8e8f952cb5..cf590c7e623756f46281bfdbf3da4d074dd0656e 100644
--- a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -223,7 +223,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
     }
 
     private void processUnloads() {
-        this.chunksToUnload.removeIf((l) -> this.chunkVisibility.get(l) != Visibility.HIDDEN ? true : this.processChunkUnload(l));
+        this.chunksToUnload.removeIf((java.util.function.LongPredicate) (l) -> this.chunkVisibility.get(l) != Visibility.HIDDEN ? true : this.processChunkUnload(l));
     }
 
     private void processPendingLoads() {
@@ -255,7 +255,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
     }
 
     public void autoSave() {
-        this.getAllChunksToSave().forEach((l) -> {
+        this.getAllChunksToSave().forEach((java.util.function.LongConsumer) (l) -> {
             boolean flag = this.chunkVisibility.get(l) == Visibility.HIDDEN;
             if (flag) {
                 this.processChunkUnload(l);
@@ -273,7 +273,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
         while(!longSet.isEmpty()) {
             this.permanentStorage.flush(false);
             this.processPendingLoads();
-            longSet.removeIf((l) -> {
+            longSet.removeIf((java.util.function.LongPredicate) (l) -> {
                 boolean flag = this.chunkVisibility.get(l) == Visibility.HIDDEN;
                 return flag ? this.processChunkUnload(l) : this.storeChunkSections(l, (entityAccess) -> {
                 });
@@ -310,7 +310,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
 
     public void dumpSections(Writer writer) throws IOException {
         CsvOutput csvOutput = CsvOutput.builder().addColumn("x").addColumn("y").addColumn("z").addColumn("visibility").addColumn("load_status").addColumn("entity_count").build(writer);
-        this.sectionStorage.getAllChunksWithExistingSections().forEach((l) -> {
+        this.sectionStorage.getAllChunksWithExistingSections().forEach((java.util.function.LongConsumer) (l) -> {
             PersistentEntitySectionManager.ChunkLoadStatus chunkLoadStatus = (PersistentEntitySectionManager.ChunkLoadStatus)this.chunkLoadStatuses.get(l);
             this.sectionStorage.getExistingSectionPositionsInChunk(l).forEach((lx) -> {
                 EntitySection<T> entitySection = this.sectionStorage.getSection(lx);
diff --git a/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java b/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
index c565b92b29154ace6ab6119aa4ee73aacbf5ede2..7b3cb0b82ed5e543f7593beabd61391854b8ad74 100644
--- a/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
+++ b/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
@@ -26,6 +26,6 @@ public interface PositionSourceType<T extends PositionSource> {
 
     static <T extends PositionSource> void toNetwork(T positionSource, FriendlyByteBuf friendlyByteBuf) {
         friendlyByteBuf.writeResourceLocation(Registry.POSITION_SOURCE_TYPE.getKey(positionSource.getType()));
-        positionSource.getType().write(friendlyByteBuf, positionSource);
+        ((PositionSourceType) positionSource.getType()).write(friendlyByteBuf, positionSource);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
index 6cefb1cfaa426f50f4fbaf88d0e21dfe2e5417ec..fe697cf0ee7e2bd2b1d582d5547ec0a9ec2c5788 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
@@ -21,7 +21,7 @@ import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.feature.configurations.StructureFeatureConfiguration;
 
 public final class NoiseGeneratorSettings {
-    public static final Codec<NoiseGeneratorSettings> DIRECT_CODEC;
+    public static final Codec<NoiseGeneratorSettings> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(StructureSettings.CODEC.fieldOf("structures").forGetter(NoiseGeneratorSettings::structureSettings), NoiseSettings.CODEC.fieldOf("noise").forGetter(NoiseGeneratorSettings::noiseSettings), BlockState.CODEC.fieldOf("default_block").forGetter(NoiseGeneratorSettings::getDefaultBlock), BlockState.CODEC.fieldOf("default_fluid").forGetter(NoiseGeneratorSettings::getDefaultFluid), SurfaceRules.RuleSource.CODEC.fieldOf("surface_rule").forGetter(NoiseGeneratorSettings::surfaceRule), Codec.INT.fieldOf("sea_level").forGetter(NoiseGeneratorSettings::seaLevel), Codec.BOOL.fieldOf("disable_mob_generation").forGetter(NoiseGeneratorSettings::disableMobGeneration), Codec.BOOL.fieldOf("aquifers_enabled").forGetter(NoiseGeneratorSettings::isAquifersEnabled), Codec.BOOL.fieldOf("noise_caves_enabled").forGetter(NoiseGeneratorSettings::isNoiseCavesEnabled), Codec.BOOL.fieldOf("ore_veins_enabled").forGetter(NoiseGeneratorSettings::isOreVeinsEnabled), Codec.BOOL.fieldOf("noodle_caves_enabled").forGetter(NoiseGeneratorSettings::isNoodleCavesEnabled), Codec.BOOL.fieldOf("legacy_random_source").forGetter(NoiseGeneratorSettings::useLegacyRandomSource)).apply(instance, NoiseGeneratorSettings::new));
     public static final Codec<Supplier<NoiseGeneratorSettings>> CODEC = RegistryFileCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, DIRECT_CODEC);
     private final WorldgenRandom.Algorithm randomSource;
     private final StructureSettings structureSettings;
@@ -144,7 +144,6 @@ public final class NoiseGeneratorSettings {
     }
 
     static {
-        DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(StructureSettings.CODEC.fieldOf("structures").forGetter(NoiseGeneratorSettings::structureSettings), NoiseSettings.CODEC.fieldOf("noise").forGetter(NoiseGeneratorSettings::noiseSettings), BlockState.CODEC.fieldOf("default_block").forGetter(NoiseGeneratorSettings::getDefaultBlock), BlockState.CODEC.fieldOf("default_fluid").forGetter(NoiseGeneratorSettings::getDefaultFluid), SurfaceRules.RuleSource.CODEC.fieldOf("surface_rule").forGetter(NoiseGeneratorSettings::surfaceRule), Codec.INT.fieldOf("sea_level").forGetter(NoiseGeneratorSettings::seaLevel), Codec.BOOL.fieldOf("disable_mob_generation").forGetter(NoiseGeneratorSettings::disableMobGeneration), Codec.BOOL.fieldOf("aquifers_enabled").forGetter(NoiseGeneratorSettings::isAquifersEnabled), Codec.BOOL.fieldOf("noise_caves_enabled").forGetter(NoiseGeneratorSettings::isNoiseCavesEnabled), Codec.BOOL.fieldOf("ore_veins_enabled").forGetter(NoiseGeneratorSettings::isOreVeinsEnabled), Codec.BOOL.fieldOf("noodle_caves_enabled").forGetter(NoiseGeneratorSettings::isNoodleCavesEnabled), Codec.BOOL.fieldOf("legacy_random_source").forGetter(NoiseGeneratorSettings::useLegacyRandomSource)).apply(instance, NoiseGeneratorSettings::new));
         register(LARGE_BIOMES, overworld(new StructureSettings(true), false, true));
         register(AMPLIFIED, overworld(new StructureSettings(true), true, false));
         register(NETHER, netherLikePreset(new StructureSettings(false), Blocks.NETHERRACK.defaultBlockState(), Blocks.LAVA.defaultBlockState()));
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSampler.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSampler.java
index e68dccf776f4d24c2c993e34d8e65a0f74f84d88..f8c231e6425d139a4bc2b4a58e3c413fe18ad741 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSampler.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSampler.java
@@ -97,7 +97,7 @@ public class NoiseSampler implements Climate.Sampler {
         int i4 = noiseSettings.minY();
         this.minCellY = Mth.intFloorDiv(i4, i2);
         this.isNoiseCavesEnabled = flag;
-        this.baseNoise = (noiseChunk) -> noiseChunk.createNoiseInterpolator((i, i2, i3) -> this.calculateBaseNoise(i, i2, i3, noiseChunk.noiseData(QuartPos.fromBlock(i), QuartPos.fromBlock(i3)).terrainInfo(), noiseChunk.getBlender()));
+        this.baseNoise = (noiseChunk) -> noiseChunk.createNoiseInterpolator((iIn, i2In, i3In) -> this.calculateBaseNoise(iIn, i2In, i3In, noiseChunk.noiseData(QuartPos.fromBlock(iIn), QuartPos.fromBlock(i3In)).terrainInfo(), noiseChunk.getBlender()));
         if (noiseSettings.islandNoiseOverride()) {
             RandomSource randomSource = algorithm.newInstance(l);
             randomSource.consumeCount(17292);
@@ -522,16 +522,7 @@ public class NoiseSampler implements Climate.Sampler {
         }
     }
 
-    public static record FlatNoiseData(double shiftedX, double shiftedZ, double continentalness, double weirdness, double erosion, TerrainInfo terrainInfo, BlockState ore, BlockState rawOreBlock, BlockState filler, int minY, int maxY) {
-
-        public FlatNoiseData(double d, double d2, double d3, double d4, double d5, TerrainInfo terrainInfo) {
-            this.shiftedX = d;
-            this.shiftedZ = d2;
-            this.continentalness = d3;
-            this.weirdness = d4;
-            this.erosion = d5;
-            this.terrainInfo = terrainInfo;
-        }
+    public static record FlatNoiseData(double shiftedX, double shiftedZ, double continentalness, double weirdness, double erosion, TerrainInfo terrainInfo) {
     }
 
     static final class QuantizedSpaghettiRarity {
@@ -565,6 +556,12 @@ public class NoiseSampler implements Climate.Sampler {
         COPPER(Blocks.COPPER_ORE.defaultBlockState(), Blocks.RAW_COPPER_BLOCK.defaultBlockState(), Blocks.GRANITE.defaultBlockState(), 0, 50),
         IRON(Blocks.DEEPSLATE_IRON_ORE.defaultBlockState(), Blocks.RAW_IRON_BLOCK.defaultBlockState(), Blocks.TUFF.defaultBlockState(), -60, -8);
 
+        final BlockState ore;
+        final BlockState rawOreBlock;
+        final BlockState filler;
+        final int minY;
+        final int maxY;
+
         private VeinType(BlockState blockState, BlockState blockState2, BlockState blockState3, int i, int i2) {
             this.ore = blockState;
             this.rawOreBlock = blockState2;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
index 3bc0bc5b843847a0ed21cd27bbf8172d35d8db81..b148b058d7c1a6a7a51d25b47a3159bd74f6f2bf 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
@@ -9,7 +9,7 @@ import net.minecraft.world.level.biome.TerrainShaper;
 import net.minecraft.world.level.dimension.DimensionType;
 
 public record NoiseSettings(int minY, int height, NoiseSamplingSettings noiseSamplingSettings, NoiseSlider topSlideSettings, NoiseSlider bottomSlideSettings, int noiseSizeHorizontal, int noiseSizeVertical, boolean islandNoiseOverride, boolean isAmplified, boolean largeBiomes, TerrainShaper terrainShaper) {
-    public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY), Codec.intRange(0, DimensionType.Y_SIZE).fieldOf("height").forGetter(NoiseSettings::height), NoiseSamplingSettings.CODEC.fieldOf("sampling").forGetter(NoiseSettings::noiseSamplingSettings), NoiseSlider.CODEC.fieldOf("top_slide").forGetter(NoiseSettings::topSlideSettings), NoiseSlider.CODEC.fieldOf("bottom_slide").forGetter(NoiseSettings::bottomSlideSettings), Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal), Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical), Codec.BOOL.optionalFieldOf("island_noise_override", false, Lifecycle.experimental()).forGetter(NoiseSettings::islandNoiseOverride), Codec.BOOL.optionalFieldOf("amplified", false, Lifecycle.experimental()).forGetter(NoiseSettings::isAmplified), Codec.BOOL.optionalFieldOf("large_biomes", false, Lifecycle.experimental()).forGetter(NoiseSettings::largeBiomes), TerrainShaper.CODEC.fieldOf("terrain_shaper").forGetter(NoiseSettings::terrainShaper)).apply(instance, NoiseSettings::new)).comapFlatMap(NoiseSettings::guardY, Function.identity());
+    public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.<NoiseSettings>create((instance) -> instance.group(Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY), Codec.intRange(0, DimensionType.Y_SIZE).fieldOf("height").forGetter(NoiseSettings::height), NoiseSamplingSettings.CODEC.fieldOf("sampling").forGetter(NoiseSettings::noiseSamplingSettings), NoiseSlider.CODEC.fieldOf("top_slide").forGetter(NoiseSettings::topSlideSettings), NoiseSlider.CODEC.fieldOf("bottom_slide").forGetter(NoiseSettings::bottomSlideSettings), Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal), Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical), Codec.BOOL.optionalFieldOf("island_noise_override", false, Lifecycle.experimental()).forGetter(NoiseSettings::islandNoiseOverride), Codec.BOOL.optionalFieldOf("amplified", false, Lifecycle.experimental()).forGetter(NoiseSettings::isAmplified), Codec.BOOL.optionalFieldOf("large_biomes", false, Lifecycle.experimental()).forGetter(NoiseSettings::largeBiomes), TerrainShaper.CODEC.fieldOf("terrain_shaper").forGetter(NoiseSettings::terrainShaper)).apply(instance, NoiseSettings::new)).comapFlatMap(NoiseSettings::guardY, Function.identity());
 
     private static DataResult<NoiseSettings> guardY(NoiseSettings noiseSettings) {
         if (noiseSettings.minY() + noiseSettings.height() > DimensionType.MAX_Y + 1) {
@@ -28,10 +28,4 @@ public record NoiseSettings(int minY, int height, NoiseSamplingSettings noiseSam
         });
         return noiseSettings;
     }
-
-    @Deprecated
-
-    @Deprecated
-
-    @Deprecated
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java b/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java
index 3b2f916eaf7f7e558725f33cbcb942d9ce19093f..1c5747aa9682134e547afcf54e8f78ddbf5c7327 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java
@@ -23,7 +23,7 @@ import net.minecraft.world.level.levelgen.feature.configurations.StructureFeatur
 
 public class StructureSettings {
     public static final Codec<StructureSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(StrongholdConfiguration.CODEC.optionalFieldOf("stronghold").forGetter((structureSettings) -> Optional.ofNullable(structureSettings.stronghold)), Codec.simpleMap(Registry.STRUCTURE_FEATURE, StructureFeatureConfiguration.CODEC, Registry.STRUCTURE_FEATURE).fieldOf("structures").forGetter((structureSettings) -> structureSettings.structureConfig)).apply(instance, StructureSettings::new));
-    public static final ImmutableMap<StructureFeature<?>, StructureFeatureConfiguration> DEFAULTS = ImmutableMap.builder().put(StructureFeature.VILLAGE, new StructureFeatureConfiguration(34, 8, 10387312)).put(StructureFeature.DESERT_PYRAMID, new StructureFeatureConfiguration(32, 8, 14357617)).put(StructureFeature.IGLOO, new StructureFeatureConfiguration(32, 8, 14357618)).put(StructureFeature.JUNGLE_TEMPLE, new StructureFeatureConfiguration(32, 8, 14357619)).put(StructureFeature.SWAMP_HUT, new StructureFeatureConfiguration(32, 8, 14357620)).put(StructureFeature.PILLAGER_OUTPOST, new StructureFeatureConfiguration(32, 8, 165745296)).put(StructureFeature.STRONGHOLD, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.OCEAN_MONUMENT, new StructureFeatureConfiguration(32, 5, 10387313)).put(StructureFeature.END_CITY, new StructureFeatureConfiguration(20, 11, 10387313)).put(StructureFeature.WOODLAND_MANSION, new StructureFeatureConfiguration(80, 20, 10387319)).put(StructureFeature.BURIED_TREASURE, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.MINESHAFT, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.RUINED_PORTAL, new StructureFeatureConfiguration(40, 15, 34222645)).put(StructureFeature.SHIPWRECK, new StructureFeatureConfiguration(24, 4, 165745295)).put(StructureFeature.OCEAN_RUIN, new StructureFeatureConfiguration(20, 8, 14357621)).put(StructureFeature.BASTION_REMNANT, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_BRIDGE, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_FOSSIL, new StructureFeatureConfiguration(2, 1, 14357921)).build();
+    public static final ImmutableMap<StructureFeature<?>, StructureFeatureConfiguration> DEFAULTS = ImmutableMap.<StructureFeature<?>, StructureFeatureConfiguration>builder().put(StructureFeature.VILLAGE, new StructureFeatureConfiguration(34, 8, 10387312)).put(StructureFeature.DESERT_PYRAMID, new StructureFeatureConfiguration(32, 8, 14357617)).put(StructureFeature.IGLOO, new StructureFeatureConfiguration(32, 8, 14357618)).put(StructureFeature.JUNGLE_TEMPLE, new StructureFeatureConfiguration(32, 8, 14357619)).put(StructureFeature.SWAMP_HUT, new StructureFeatureConfiguration(32, 8, 14357620)).put(StructureFeature.PILLAGER_OUTPOST, new StructureFeatureConfiguration(32, 8, 165745296)).put(StructureFeature.STRONGHOLD, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.OCEAN_MONUMENT, new StructureFeatureConfiguration(32, 5, 10387313)).put(StructureFeature.END_CITY, new StructureFeatureConfiguration(20, 11, 10387313)).put(StructureFeature.WOODLAND_MANSION, new StructureFeatureConfiguration(80, 20, 10387319)).put(StructureFeature.BURIED_TREASURE, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.MINESHAFT, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.RUINED_PORTAL, new StructureFeatureConfiguration(40, 15, 34222645)).put(StructureFeature.SHIPWRECK, new StructureFeatureConfiguration(24, 4, 165745295)).put(StructureFeature.OCEAN_RUIN, new StructureFeatureConfiguration(20, 8, 14357621)).put(StructureFeature.BASTION_REMNANT, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_BRIDGE, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_FOSSIL, new StructureFeatureConfiguration(2, 1, 14357921)).build();
     public static final StrongholdConfiguration DEFAULT_STRONGHOLD;
     private final Map<StructureFeature<?>, StructureFeatureConfiguration> structureConfig;
     private final ImmutableMap<StructureFeature<?>, ImmutableMultimap<ConfiguredStructureFeature<?, ?>, ResourceKey<Biome>>> configuredStructures;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java b/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java
index d726ca7fe905aa7facf85eb266504c1d6237d456..83404cb4f54fa07d2d884beefb5f1766416868bb 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java
@@ -137,22 +137,27 @@ public class SurfaceRules {
         }
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
-            // $FF: Couldn't be decompiled
+            final Set<ResourceKey<Biome>> biomeSet = Set.copyOf(this.biomes);
+            class BiomeCondition extends SurfaceRules.LazyYCondition {
+                protected BiomeCondition(Context context) {
+                    super(context);
+                }
+
+                protected boolean compute() {
+                    return biomeSet.contains(this.context.biomeKey.get());
+                }
+            }
+            return new BiomeCondition(context);
         }
     }
 
-    static record BlockRuleSource(BlockState resultState, SurfaceRules.StateRule rule, SurfaceSystem system, ChunkAccess chunk, Function<BlockPos, Biome> biomeGetter, Registry<Biome> biomes, WorldGenerationContext context) implements SurfaceRules.RuleSource {
+    static record BlockRuleSource(BlockState resultState, SurfaceRules.StateRule rule) implements SurfaceRules.RuleSource {
         static final Codec<SurfaceRules.BlockRuleSource> CODEC = BlockState.CODEC.xmap(SurfaceRules.BlockRuleSource::new, SurfaceRules.BlockRuleSource::resultState).fieldOf("result_state").codec();
 
         BlockRuleSource(BlockState blockState) {
             this(blockState, new SurfaceRules.StateRule(blockState));
         }
 
-        private BlockRuleSource(BlockState blockState, SurfaceRules.StateRule stateRule) {
-            this.resultState = blockState;
-            this.rule = stateRule;
-        }
-
         public Codec<? extends SurfaceRules.RuleSource> codec() {
             return CODEC;
         }
@@ -192,6 +197,11 @@ public class SurfaceRules {
         final SurfaceRules.Condition steep = new SurfaceRules.Context.SteepMaterialCondition(this);
         final SurfaceRules.Condition hole = new SurfaceRules.Context.HoleCondition(this);
         final SurfaceRules.Condition abovePreliminarySurface = new SurfaceRules.Context.AbovePreliminarySurfaceCondition();
+        final SurfaceSystem system;
+        final ChunkAccess chunk;
+        final Function<BlockPos, Biome> biomeGetter;
+        final Registry<Biome> biomes;
+        final WorldGenerationContext context;
         long lastUpdateXZ = -9223372036854775807L;
         int blockX;
         int blockZ;
@@ -358,7 +368,18 @@ public class SurfaceRules {
         }
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
-            // $FF: Couldn't be decompiled
+            final NormalNoise noise = context.system.getOrCreateNoise(this.noise);
+            class NoiseThresholdCondition extends SurfaceRules.LazyXZCondition {
+                NoiseThresholdCondition(Context context) {
+                    super(context);
+                }
+
+                protected boolean compute() {
+                    double d = noise.getValue(this.context.blockX, 0.0D, this.context.blockZ);
+                    return (d >= SurfaceRules.NoiseThresholdConditionSource.this.minThreshold && d <= SurfaceRules.NoiseThresholdConditionSource.this.maxThreshold);
+                }
+            };
+            return new NoiseThresholdCondition(context);
         }
     }
 
@@ -461,7 +482,17 @@ public class SurfaceRules {
         }
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
-            // $FF: Couldn't be decompiled
+            final boolean ceiling = (this.surfaceType == CaveSurface.CEILING);
+            class StoneDepthCondition extends SurfaceRules.LazyYCondition {
+                StoneDepthCondition(Context context) {
+                    super(context);
+                }
+
+                protected boolean compute() {
+                    return ((ceiling ? this.context.stoneDepthBelow : this.context.stoneDepthAbove) <= 1 + (SurfaceRules.StoneDepthCheck.this.addRunDepth ? this.context.runDepth : 0));
+                }
+            };
+            return new StoneDepthCondition(context);
         }
     }
 
@@ -512,7 +543,26 @@ public class SurfaceRules {
         }
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
-            // $FF: Couldn't be decompiled
+            final int trueAtAndBelow = trueAtAndBelow().resolveY(context.context);
+            final int falseAtAndAbove = falseAtAndAbove().resolveY(context.context);
+            final PositionalRandomFactory randomFactory = context.system.getOrCreateRandomFactory(randomName());
+            class VerticalGradientCondition extends SurfaceRules.LazyYCondition {
+                VerticalGradientCondition(Context context) {
+                    super(context);
+                }
+
+                protected boolean compute() {
+                    int i = this.context.blockY;
+                    if (i <= trueAtAndBelow)
+                        return true;
+                    if (i >= falseAtAndAbove)
+                        return false;
+                    double d = net.minecraft.util.Mth.map(i, trueAtAndBelow, falseAtAndAbove, 1.0D, 0.0D);
+                    RandomSource randomSource = randomFactory.at(this.context.blockX, i, this.context.blockZ);
+                    return (randomSource.nextFloat() < d);
+                }
+            };
+            return new VerticalGradientCondition(context);
         }
     }
 
@@ -524,7 +574,16 @@ public class SurfaceRules {
         }
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
-            // $FF: Couldn't be decompiled
+            class WaterCondition extends SurfaceRules.LazyYCondition {
+                WaterCondition(Context context) {
+                    super(context);
+                }
+
+                protected boolean compute() {
+                    return (this.context.waterHeight == Integer.MIN_VALUE || this.context.blockY + (SurfaceRules.WaterConditionSource.this.addStoneDepth ? this.context.stoneDepthAbove : 0) >= this.context.waterHeight + SurfaceRules.WaterConditionSource.this.offset + this.context.runDepth * SurfaceRules.WaterConditionSource.this.runDepthMultiplier);
+                }
+            };
+            return new WaterCondition(context);
         }
     }
 
@@ -536,7 +595,16 @@ public class SurfaceRules {
         }
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
-            // $FF: Couldn't be decompiled
+            class YCondition extends SurfaceRules.LazyYCondition {
+                YCondition(Context context) {
+                    super(context);
+                }
+
+                protected boolean compute() {
+                    return (this.context.blockY + (SurfaceRules.YConditionSource.this.addStoneDepth ? this.context.stoneDepthAbove : 0) >= SurfaceRules.YConditionSource.this.anchor.resolveY(this.context.context) + this.context.runDepth * SurfaceRules.YConditionSource.this.runDepthMultiplier);
+                }
+            };
+            return new YCondition(context);
         }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
index aabe2759852e50bae989e9fd0eecee3288483596..a5ce11556fd7bdd49d9765759147d7752e5e5508 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -35,7 +35,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class WorldGenSettings {
-    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((worldGenSettings) -> worldGenSettings.legacyCustomOptions)).apply(instance, instance.stable(WorldGenSettings::new))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
+    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.<WorldGenSettings>create((instance) -> instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((worldGenSettings) -> worldGenSettings.legacyCustomOptions)).apply(instance, instance.stable(WorldGenSettings::new))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
     private static final Logger LOGGER = LogManager.getLogger();
     private final long seed;
     private final boolean generateFeatures;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
index 45c53e2dc4e567f2928e99a95c03133c985edf00..b26b831953e2a7817375d095bc38183aad27723d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
@@ -108,7 +108,7 @@ public class StructureFeature<C extends FeatureConfiguration> {
     @Nullable
     public static StructureStart<?> loadStaticStart(StructurePieceSerializationContext structurePieceSerializationContext, CompoundTag compoundTag, long l) {
         String s = compoundTag.getString("id");
-        if ("INVALID".equals(s)) {
+        if (StructureStart.INVALID_START_ID.equals(s)) {
             return StructureStart.INVALID_START;
         } else {
             StructureFeature<?> structureFeature = Registry.STRUCTURE_FEATURE.get(new ResourceLocation(s.toLowerCase(Locale.ROOT)));
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
index 937a7d10ca492302eb44a76da3d8482e6f2300f7..1c438c1c47e0ae375bf040b3cff40e22326412c4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
@@ -10,7 +10,7 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.material.FluidState;
 
 public class SpringConfiguration implements FeatureConfiguration {
-    public static final Codec<SpringConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(FluidState.CODEC.fieldOf("state").forGetter((springConfiguration) -> springConfiguration.state), Codec.BOOL.fieldOf("requires_block_below").orElse(true).forGetter((springConfiguration) -> springConfiguration.requiresBlockBelow), Codec.INT.fieldOf("rock_count").orElse(4).forGetter((springConfiguration) -> springConfiguration.rockCount), Codec.INT.fieldOf("hole_count").orElse(1).forGetter((springConfiguration) -> springConfiguration.holeCount), Registry.BLOCK.listOf().fieldOf("valid_blocks").xmap(ImmutableSet::copyOf, ImmutableList::copyOf).forGetter((springConfiguration) -> springConfiguration.validBlocks)).apply(instance, SpringConfiguration::new));
+    public static final Codec<SpringConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(FluidState.CODEC.fieldOf("state").forGetter((springConfiguration) -> springConfiguration.state), Codec.BOOL.fieldOf("requires_block_below").orElse(true).forGetter((springConfiguration) -> springConfiguration.requiresBlockBelow), Codec.INT.fieldOf("rock_count").orElse(4).forGetter((springConfiguration) -> springConfiguration.rockCount), Codec.INT.fieldOf("hole_count").orElse(1).forGetter((springConfiguration) -> springConfiguration.holeCount), Registry.BLOCK.listOf().fieldOf("valid_blocks").xmap(ImmutableSet::copyOf, ImmutableList::copyOf).forGetter((springConfiguration) -> (ImmutableSet<Block>) springConfiguration.validBlocks)).apply(instance, SpringConfiguration::new));
     public final FluidState state;
     public final boolean requiresBlockBelow;
     public final int rockCount;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java
index 0a2be0889855d5806bef38cb06d90dd6eab9c0e0..e54c793aa5f95bb1f784bcbcf0517a917a24c82f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java
@@ -7,7 +7,7 @@ import java.util.function.Function;
 import net.minecraft.util.ExtraCodecs;
 
 public class StructureFeatureConfiguration {
-    public static final Codec<StructureFeatureConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.intRange(0, 4096).fieldOf("spacing").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.spacing), Codec.intRange(0, 4096).fieldOf("separation").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.separation), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("salt").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.salt)).apply(instance, StructureFeatureConfiguration::new)).comapFlatMap((structureFeatureConfiguration) -> structureFeatureConfiguration.spacing <= structureFeatureConfiguration.separation ? DataResult.error("Spacing has to be larger than separation") : DataResult.success(structureFeatureConfiguration), Function.identity());
+    public static final Codec<StructureFeatureConfiguration> CODEC = RecordCodecBuilder.<StructureFeatureConfiguration>create((instance) -> instance.group(Codec.intRange(0, 4096).fieldOf("spacing").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.spacing), Codec.intRange(0, 4096).fieldOf("separation").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.separation), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("salt").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.salt)).apply(instance, StructureFeatureConfiguration::new)).comapFlatMap((structureFeatureConfiguration) -> structureFeatureConfiguration.spacing <= structureFeatureConfiguration.separation ? DataResult.error("Spacing has to be larger than separation") : DataResult.success(structureFeatureConfiguration), Function.identity());
     private final int spacing;
     private final int separation;
     private final int salt;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
index 32df4b5a34fd09ea37929c8da72242e69ef1508c..559a09e5b1800f73b5033482fdf849246fd1dbae 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
@@ -182,12 +182,12 @@ public class JigsawPlacement {
                                         if (!boundingBox2.isInside(structureBlockInfox.pos.relative(JigsawBlock.getFrontFacing(structureBlockInfox.state)))) {
                                             return 0;
                                         } else {
-                                            ResourceLocation resourceLocation = new ResourceLocation(structureBlockInfox.nbt.getString("pool"));
-                                            Optional<StructureTemplatePool> optional = this.pools.getOptional(resourceLocation);
-                                            Optional<StructureTemplatePool> optional2 = optional.flatMap((structureTemplatePool) -> this.pools.getOptional(structureTemplatePool.getFallback()));
-                                            int i = optional.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
-                                            int i2 = optional2.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
-                                            return Math.max(i, i2);
+                                            ResourceLocation resourceLocationIn = new ResourceLocation(structureBlockInfox.nbt.getString("pool"));
+                                            Optional<StructureTemplatePool> optionalIn = this.pools.getOptional(resourceLocationIn);
+                                            Optional<StructureTemplatePool> optionalIn2 = optionalIn.flatMap((structureTemplatePool) -> this.pools.getOptional(structureTemplatePool.getFallback()));
+                                            int ix = optionalIn.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
+                                            int i2x = optionalIn2.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
+                                            return Math.max(ix, i2x);
                                         }
                                     }).max().orElse(0);
                                 } else {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
index f55893ecc5ff1b1e69cb68da5e23e056d1177809..6c9fddc1d7ffc1bcb3ce2d980679c665925935af 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
@@ -29,7 +29,7 @@ import org.apache.logging.log4j.Logger;
 public class StructureTemplatePool {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final int SIZE_UNSET = Integer.MIN_VALUE;
-    public static final Codec<StructureTemplatePool> DIRECT_CODEC;
+    public static final Codec<StructureTemplatePool> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName), ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback), Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.intRange(1, 150).fieldOf("weight")).codec().listOf().fieldOf("elements").forGetter((structureTemplatePool) -> structureTemplatePool.rawTemplates)).apply(instance, StructureTemplatePool::new));
     public static final Codec<Supplier<StructureTemplatePool>> CODEC = RegistryFileCodec.create(Registry.TEMPLATE_POOL_REGISTRY, DIRECT_CODEC);
     private final ResourceLocation name;
     private final List<Pair<StructurePoolElement, Integer>> rawTemplates;
@@ -98,10 +98,6 @@ public class StructureTemplatePool {
         return this.templates.size();
     }
 
-    static {
-        DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName), ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback), Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.intRange(1, 150).fieldOf("weight")).codec().listOf().fieldOf("elements").forGetter((structureTemplatePool) -> structureTemplatePool.rawTemplates)).apply(instance, StructureTemplatePool::new));
-    }
-
     public static enum Projection implements StringRepresentable {
         TERRAIN_MATCHING("terrain_matching", ImmutableList.of(new GravityProcessor(Heightmap.Types.WORLD_SURFACE_WG, -1))),
         RIGID("rigid", ImmutableList.of());
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
index fb9f76cb35a02900d075889de14b18925250493e..d49af1bfd6acdc963f49ddaf5c9b357ecb87fba1 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
@@ -31,7 +31,7 @@ public class AlterGroundDecorator extends TreeDecorator {
                 this.placeCircle(levelSimulatedReader, biConsumer, random, blockPos.west().south(2));
                 this.placeCircle(levelSimulatedReader, biConsumer, random, blockPos.east(2).south(2));
 
-                for(int i = 0; i < 5; ++i) {
+                for(int ix = 0; ix < 5; ++ix) {
                     int i2 = random.nextInt(64);
                     int i3 = i2 % 8;
                     int i4 = i2 / 8;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
index f27cb19cf6942aed7049aaeb7dbde728983891a7..ad7d16c8b81842d6a74c46d4d90fae7ca1feadc6 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
@@ -40,9 +40,9 @@ public class BeehiveDecorator extends TreeDecorator {
                 if (Feature.isAir(levelSimulatedReader, blockPos2) && Feature.isAir(levelSimulatedReader, blockPos2.relative(Direction.SOUTH))) {
                     biConsumer.accept(blockPos2, Blocks.BEE_NEST.defaultBlockState().setValue(BeehiveBlock.FACING, Direction.SOUTH));
                     levelSimulatedReader.getBlockEntity(blockPos2, BlockEntityType.BEEHIVE).ifPresent((beehiveBlockEntity) -> {
-                        int i = 2 + random.nextInt(2);
+                        int iIn = 2 + random.nextInt(2);
 
-                        for(int i2 = 0; i2 < i; ++i2) {
+                        for(int i2 = 0; i2 < iIn; ++i2) {
                             CompoundTag compoundTag = new CompoundTag();
                             compoundTag.putString("id", Registry.ENTITY_TYPE.getKey(EntityType.BEE).toString());
                             beehiveBlockEntity.storeBee(compoundTag, random.nextInt(599), false);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
index a1f9f8fffe8bd26e526fece15e4c74f79616b9d9..d70e21abf009a782bab8bd0c809c17214592285f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
@@ -32,7 +32,7 @@ import org.apache.logging.log4j.Logger;
 
 public class FlatLevelGeneratorSettings {
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final Codec<FlatLevelGeneratorSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.biomes), StructureSettings.CODEC.fieldOf("structures").forGetter(FlatLevelGeneratorSettings::structureSettings), FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter(FlatLevelGeneratorSettings::getLayersInfo), Codec.BOOL.fieldOf("lakes").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.addLakes), Codec.BOOL.fieldOf("features").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.decoration), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter((flatLevelGeneratorSettings) -> Optional.of(flatLevelGeneratorSettings.biome))).apply(instance, FlatLevelGeneratorSettings::new)).comapFlatMap(FlatLevelGeneratorSettings::validateHeight, Function.identity()).stable();
+    public static final Codec<FlatLevelGeneratorSettings> CODEC = RecordCodecBuilder.<FlatLevelGeneratorSettings>create((instance) -> instance.group(RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.biomes), StructureSettings.CODEC.fieldOf("structures").forGetter(FlatLevelGeneratorSettings::structureSettings), FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter(FlatLevelGeneratorSettings::getLayersInfo), Codec.BOOL.fieldOf("lakes").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.addLakes), Codec.BOOL.fieldOf("features").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.decoration), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter((flatLevelGeneratorSettings) -> Optional.of(flatLevelGeneratorSettings.biome))).apply(instance, FlatLevelGeneratorSettings::new)).comapFlatMap(FlatLevelGeneratorSettings::validateHeight, Function.identity()).stable();
     private final Registry<Biome> biomes;
     private final StructureSettings structureSettings;
     private final List<FlatLayerInfo> layersInfo = Lists.newArrayList();
diff --git a/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java b/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
index fd194708d1fb7ad7a17098776afa6d46311fb348..6043701b98811623d50ca47a987ee211daaeef6d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
@@ -9,7 +9,7 @@ import net.minecraft.world.level.levelgen.WorldGenerationContext;
 
 public class ConstantHeight extends HeightProvider {
     public static final ConstantHeight ZERO = new ConstantHeight(VerticalAnchor.absolute(0));
-    public static final Codec<ConstantHeight> CODEC = Codec.either(VerticalAnchor.CODEC, RecordCodecBuilder.create((instance) -> instance.group(VerticalAnchor.CODEC.fieldOf("value").forGetter((constantHeight) -> constantHeight.value)).apply(instance, ConstantHeight::new))).xmap((either) -> (ConstantHeight)either.map(ConstantHeight::of, (constantHeight) -> constantHeight), (constantHeight) -> Either.left(constantHeight.value));
+    public static final Codec<ConstantHeight> CODEC = Codec.either(VerticalAnchor.CODEC, RecordCodecBuilder.<ConstantHeight>create((instance) -> instance.group(VerticalAnchor.CODEC.fieldOf("value").forGetter((constantHeight) -> constantHeight.value)).apply(instance, ConstantHeight::new))).xmap((either) -> (ConstantHeight)either.map(ConstantHeight::of, (constantHeight) -> constantHeight), (constantHeight) -> Either.left(constantHeight.value));
     private final VerticalAnchor value;
 
     public static ConstantHeight of(VerticalAnchor verticalAnchor) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java b/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
index 63dd2c443efe85be88c4e9eef2dd2e8915424d0b..efaed4bd304b39d78c20b8577484d818c32effb2 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
@@ -1314,7 +1314,7 @@ public class OceanMonumentPieces {
         protected static final BlockState LAMP_BLOCK = Blocks.SEA_LANTERN.defaultBlockState();
         protected static final boolean DO_FILL = true;
         protected static final BlockState FILL_BLOCK = Blocks.WATER.defaultBlockState();
-        protected static final Set<Block> FILL_KEEP = ImmutableSet.builder().add(Blocks.ICE).add(Blocks.PACKED_ICE).add(Blocks.BLUE_ICE).add(FILL_BLOCK.getBlock()).build();
+        protected static final Set<Block> FILL_KEEP = ImmutableSet.<Block>builder().add(Blocks.ICE).add(Blocks.PACKED_ICE).add(Blocks.BLUE_ICE).add(FILL_BLOCK.getBlock()).build();
         protected static final int GRIDROOM_WIDTH = 8;
         protected static final int GRIDROOM_DEPTH = 8;
         protected static final int GRIDROOM_HEIGHT = 4;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
index 5e3231fcb5abae537a142bceac311f0ddd179aa2..39944dd846cd91e9ae05fb919b0a003d7d3d80ba 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
@@ -47,7 +47,7 @@ public abstract class StructurePiece {
     private Rotation rotation;
     protected int genDepth;
     private final StructurePieceType type;
-    private static final Set<Block> SHAPE_CHECK_BLOCKS = ImmutableSet.builder().add(Blocks.NETHER_BRICK_FENCE).add(Blocks.TORCH).add(Blocks.WALL_TORCH).add(Blocks.OAK_FENCE).add(Blocks.SPRUCE_FENCE).add(Blocks.DARK_OAK_FENCE).add(Blocks.ACACIA_FENCE).add(Blocks.BIRCH_FENCE).add(Blocks.JUNGLE_FENCE).add(Blocks.LADDER).add(Blocks.IRON_BARS).build();
+    private static final Set<Block> SHAPE_CHECK_BLOCKS = ImmutableSet.<Block>builder().add(Blocks.NETHER_BRICK_FENCE).add(Blocks.TORCH).add(Blocks.WALL_TORCH).add(Blocks.OAK_FENCE).add(Blocks.SPRUCE_FENCE).add(Blocks.DARK_OAK_FENCE).add(Blocks.ACACIA_FENCE).add(Blocks.BIRCH_FENCE).add(Blocks.JUNGLE_FENCE).add(Blocks.LADDER).add(Blocks.IRON_BARS).build();
 
     protected StructurePiece(StructurePieceType structurePieceType, int i, BoundingBox boundingBox) {
         this.type = structurePieceType;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java
index c7c8fcc0922f64929287dd5ae67d2c2a3e0d1b5e..49fd6fd51b553834062dfcda22099f19d6339dfd 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java
@@ -17,7 +17,7 @@ import net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSeriali
 
 public final class StructureStart<C extends FeatureConfiguration> {
     public static final String INVALID_START_ID = "INVALID";
-    public static final StructureStart<?> INVALID_START = new StructureStart((StructureFeature<C>)null, new ChunkPos(0, 0), 0, new PiecesContainer(List.of()));
+    public static final StructureStart<?> INVALID_START = new StructureStart(null, new ChunkPos(0, 0), 0, new PiecesContainer(List.of()));
     private final StructureFeature<C> feature;
     private final PiecesContainer pieceContainer;
     private final ChunkPos chunkPos;
@@ -69,7 +69,7 @@ public final class StructureStart<C extends FeatureConfiguration> {
             compoundTag.put("Children", this.pieceContainer.save(structurePieceSerializationContext));
             return compoundTag;
         } else {
-            compoundTag.putString("id", "INVALID");
+            compoundTag.putString("id", INVALID_START_ID);
             return compoundTag;
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java
index 68eaafe2c5a241adc1039fcc9f1247b6cbb9ec0a..73b457e351136d701bd76477791cbbaf7a4cbd28 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java
@@ -20,7 +20,7 @@ import org.apache.logging.log4j.Logger;
 public record PiecesContainer(List<StructurePiece> pieces) {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final ResourceLocation JIGSAW_RENAME = new ResourceLocation("jigsaw");
-    private static final Map<ResourceLocation, ResourceLocation> RENAMES = ImmutableMap.builder().put(new ResourceLocation("nvi"), JIGSAW_RENAME).put(new ResourceLocation("pcp"), JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), JIGSAW_RENAME).put(new ResourceLocation("runtime"), JIGSAW_RENAME).build();
+    private static final Map<ResourceLocation, ResourceLocation> RENAMES = ImmutableMap.<ResourceLocation, ResourceLocation>builder().put(new ResourceLocation("nvi"), JIGSAW_RENAME).put(new ResourceLocation("pcp"), JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), JIGSAW_RENAME).put(new ResourceLocation("runtime"), JIGSAW_RENAME).build();
 
     public boolean isEmpty() {
         return this.pieces.isEmpty();
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
index 3622092c7fb3b1b551e4b3924bd45d304b57779a..523a25ab40146eb36bc5150f567b1531206274ab 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -130,7 +130,7 @@ public class StructureTemplate {
     }
 
     private static List<StructureTemplate.StructureBlockInfo> buildInfoList(List<StructureTemplate.StructureBlockInfo> list, List<StructureTemplate.StructureBlockInfo> list2, List<StructureTemplate.StructureBlockInfo> list3) {
-        Comparator<StructureTemplate.StructureBlockInfo> comparator = Comparator.comparingInt((structureBlockInfo) -> structureBlockInfo.pos.getY()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getX()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getZ());
+        Comparator<StructureTemplate.StructureBlockInfo> comparator = Comparator.<StructureBlockInfo>comparingInt((structureBlockInfo) -> structureBlockInfo.pos.getY()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getX()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getZ());
         list.sort(comparator);
         list3.sort(comparator);
         list2.sort(comparator);
diff --git a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
index fd9bed60f07038c1b5bd9340d2e203b65505cdf1..a4d4751b3500deea050139fe6bcff5744cad4258 100644
--- a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
+++ b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
@@ -85,13 +85,13 @@ public abstract class DynamicGraphMinFixedPoint {
 
     public void removeIf(LongPredicate longPredicate) {
         LongList longList = new LongArrayList();
-        this.computedLevels.keySet().forEach((l) -> {
+        this.computedLevels.keySet().forEach((java.util.function.LongConsumer) (l) -> {
             if (longPredicate.test(l)) {
                 longList.add(l);
             }
 
         });
-        longList.forEach(this::removeFromQueue);
+        longList.forEach((java.util.function.LongConsumer) this::removeFromQueue);
     }
 
     private void dequeue(long l, int i, int i2, boolean flag) {
diff --git a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
index 01affcff66f0be0476da1baa1106c20382911cf1..d04c7790ca81ac9b74456345056dba171b6e7c6b 100644
--- a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
@@ -193,10 +193,10 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
 
             this.toRemove.clear();
             this.hasToRemove = false;
-            ObjectIterator<Entry<DataLayer>> objectIterator = this.queuedSections.long2ObjectEntrySet().iterator();
+            ObjectIterator<Entry<DataLayer>> objectIteratorIn = this.queuedSections.long2ObjectEntrySet().iterator();
 
-            while(objectIterator.hasNext()) {
-                Entry<DataLayer> entry = (Entry)objectIterator.next();
+            while(objectIteratorIn.hasNext()) {
+                Entry<DataLayer> entry = objectIteratorIn.next();
                 long l3 = entry.getLongKey();
                 if (this.storingLightForSection(l3)) {
                     DataLayer dataLayer3 = (DataLayer)entry.getValue();
@@ -226,13 +226,13 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
             }
 
             this.untrustedSections.clear();
-            objectIterator = this.queuedSections.long2ObjectEntrySet().iterator();
+            objectIteratorIn = this.queuedSections.long2ObjectEntrySet().iterator();
 
-            while(objectIterator.hasNext()) {
-                Entry<DataLayer> entry2 = (Entry)objectIterator.next();
+            while(objectIteratorIn.hasNext()) {
+                Entry<DataLayer> entry2 = (Entry)objectIteratorIn.next();
                 long l6 = entry2.getLongKey();
                 if (this.storingLightForSection(l6)) {
-                    objectIterator.remove();
+                    objectIteratorIn.remove();
                 }
             }
 
diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index 8cef607e91cae47d58eda965bbfff7332a9007f2..d14fb555951bf480db03af9bc3088c0102eb472c 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -262,16 +262,16 @@ public abstract class FlowingFluid extends Fluid {
                 BlockPos blockPos3 = blockPos.relative(direction2);
                 short s = getCacheKey(blockPos2, blockPos3);
                 Pair<BlockState, FluidState> pair = short2ObjectMap.computeIfAbsent(s, (sx) -> {
-                    BlockState blockState = levelReader.getBlockState(blockPos3);
-                    return Pair.of(blockState, blockState.getFluidState());
+                    BlockState blockStateIn = levelReader.getBlockState(blockPos3);
+                    return Pair.of(blockStateIn, blockStateIn.getFluidState());
                 });
                 BlockState blockState2 = (BlockState)pair.getFirst();
                 FluidState fluidState = (FluidState)pair.getSecond();
                 if (this.canPassThrough(levelReader, this.getFlowing(), blockPos, blockState, direction2, blockPos3, blockState2, fluidState)) {
                     boolean flag = short2BooleanMap.computeIfAbsent(s, (sx) -> {
-                        BlockPos blockPos2 = blockPos3.below();
-                        BlockState blockState2 = levelReader.getBlockState(blockPos2);
-                        return this.isWaterHole(levelReader, this.getFlowing(), blockPos3, blockState2, blockPos2, blockState2);
+                        BlockPos blockPos2In = blockPos3.below();
+                        BlockState blockState2In = levelReader.getBlockState(blockPos2In);
+                        return this.isWaterHole(levelReader, this.getFlowing(), blockPos3, blockState2, blockPos2In, blockState2In);
                     });
                     if (flag) {
                         return i;
@@ -332,8 +332,8 @@ public abstract class FlowingFluid extends Fluid {
             BlockPos blockPos2 = blockPos.relative(direction);
             short s = getCacheKey(blockPos, blockPos2);
             Pair<BlockState, FluidState> pair = short2ObjectMap.computeIfAbsent(s, (sx) -> {
-                BlockState blockState = levelReader.getBlockState(blockPos2);
-                return Pair.of(blockState, blockState.getFluidState());
+                BlockState blockStateIn = levelReader.getBlockState(blockPos2);
+                return Pair.of(blockStateIn, blockStateIn.getFluidState());
             });
             BlockState blockState2 = (BlockState)pair.getFirst();
             FluidState fluidState = (FluidState)pair.getSecond();
@@ -341,8 +341,8 @@ public abstract class FlowingFluid extends Fluid {
             if (this.canPassThrough(levelReader, fluidState2.getType(), blockPos, blockState, direction, blockPos2, blockState2, fluidState)) {
                 BlockPos blockPos3 = blockPos2.below();
                 boolean flag = short2BooleanMap.computeIfAbsent(s, (sx) -> {
-                    BlockState blockState2 = levelReader.getBlockState(blockPos3);
-                    return this.isWaterHole(levelReader, this.getFlowing(), blockPos2, blockState2, blockPos3, blockState2);
+                    BlockState blockState2In = levelReader.getBlockState(blockPos3);
+                    return this.isWaterHole(levelReader, this.getFlowing(), blockPos2, blockState2, blockPos3, blockState2In);
                 });
                 int i2;
                 if (flag) {
diff --git a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
index 95a9620d9e6b8ec54f14014a9c7e4d6ef93a5626..bf4782eaf340b3ff6e58471fb57e954e763e1069 100644
--- a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
+++ b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
@@ -43,12 +43,12 @@ public class PortalForcer {
         PoiManager poiManager = this.level.getPoiManager();
         int i = flag ? 16 : 128;
         poiManager.ensureLoadedAndValid(this.level, blockPos, i);
-        Optional<PoiRecord> optional = poiManager.getInSquare((poiType) -> poiType == PoiType.NETHER_PORTAL, blockPos, i, PoiManager.Occupancy.ANY).sorted(Comparator.comparingDouble((poiRecord) -> poiRecord.getPos().distSqr(blockPos)).thenComparingInt((poiRecord) -> poiRecord.getPos().getY())).filter((poiRecord) -> this.level.getBlockState(poiRecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS)).findFirst();
+        Optional<PoiRecord> optional = poiManager.getInSquare((poiType) -> poiType == PoiType.NETHER_PORTAL, blockPos, i, PoiManager.Occupancy.ANY).sorted(Comparator.<PoiRecord>comparingDouble((poiRecord) -> poiRecord.getPos().distSqr(blockPos)).thenComparingInt((poiRecord) -> poiRecord.getPos().getY())).filter((poiRecord) -> this.level.getBlockState(poiRecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS)).findFirst();
         return optional.map((poiRecord) -> {
-            BlockPos blockPos = poiRecord.getPos();
-            this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(blockPos), 3, blockPos);
-            BlockState blockState = this.level.getBlockState(blockPos);
-            return BlockUtil.getLargestRectangleAround(blockPos, blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockPosx) -> this.level.getBlockState(blockPosx) == blockState);
+            BlockPos pos = poiRecord.getPos();
+            this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(pos), 3, pos);
+            BlockState blockState = this.level.getBlockState(pos);
+            return BlockUtil.getLargestRectangleAround(pos, blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockPosx) -> this.level.getBlockState(blockPosx) == blockState);
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index 9cd2dd6868e2754766f420371226e5e34c8026c3..580bbbe940e77331940359ec0d5b0ae05116f1e3 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -83,20 +83,20 @@ public class LevelStorageSource {
 
     private static <T> Pair<WorldGenSettings, Lifecycle> readWorldGenSettings(Dynamic<T> dynamic, DataFixer dataFixer, int i) {
         Dynamic<T> dynamic2 = dynamic.get("WorldGenSettings").orElseEmptyMap();
-        UnmodifiableIterator dynamic3 = OLD_SETTINGS_KEYS.iterator();
+        UnmodifiableIterator this_is_not_dynamic = OLD_SETTINGS_KEYS.iterator();
 
-        while(dynamic3.hasNext()) {
-            String s = (String)dynamic3.next();
+        while(this_is_not_dynamic.hasNext()) {
+            String s = (String)this_is_not_dynamic.next();
             Optional<? extends Dynamic<?>> optional = dynamic.get(s).result();
             if (optional.isPresent()) {
                 dynamic2 = dynamic2.set(s, optional.get());
             }
         }
 
-        Dynamic<T> dynamic3 = dataFixer.update(References.WORLD_GEN_SETTINGS, dynamic2, i, SharedConstants.getCurrentVersion().getWorldVersion());
-        DataResult<WorldGenSettings> dataResult = WorldGenSettings.CODEC.parse(dynamic3);
+        Dynamic<T> dynamic3In = dataFixer.update(References.WORLD_GEN_SETTINGS, dynamic2, i, SharedConstants.getCurrentVersion().getWorldVersion());
+        DataResult<WorldGenSettings> dataResult = WorldGenSettings.CODEC.parse(dynamic3In);
         return Pair.of((WorldGenSettings)dataResult.resultOrPartial(Util.prefix("WorldGenSettings: ", LOGGER::error)).orElseGet(() -> {
-            RegistryAccess registryAccess = RegistryAccess.RegistryHolder.readFromDisk(dynamic3);
+            RegistryAccess registryAccess = RegistryAccess.RegistryHolder.readFromDisk(dynamic3In);
             return WorldGenSettings.makeDefault(registryAccess);
         }), dataResult.lifecycle());
     }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java b/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
index d4de70655e0c38754598ae3d89e19ee5e00c8204..e43e4f5127b065c3be86439cef25738e8f305cf9 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
@@ -111,7 +111,7 @@ public class GsonAdapterFactory {
             } else {
                 JsonObject jsonObject = new JsonObject();
                 jsonObject.addProperty(this.typeKey, this.registry.getKey(serializerType).toString());
-                serializerType.getSerializer().serialize(jsonObject, object, jsonSerializationContext);
+                ((Serializer) serializerType.getSerializer()).serialize(jsonObject, object, jsonSerializationContext);
                 return jsonObject;
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java b/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
index 96e168fa3dc2abad90e1061d511b38061ceef994..e43914bad2c13a75a1868f452d1a54e6a2112004 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
@@ -53,12 +53,12 @@ public class ValidationContext {
     }
 
     public ValidationContext enterTable(String s, ResourceLocation resourceLocation) {
-        ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.builder().addAll(this.visitedTables).add(resourceLocation).build();
+        ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.<ResourceLocation>builder().addAll(this.visitedTables).add(resourceLocation).build();
         return new ValidationContext(this.problems, () -> this.getContext() + s, this.params, this.conditionResolver, this.visitedConditions, this.tableResolver, immutableSet);
     }
 
     public ValidationContext enterCondition(String s, ResourceLocation resourceLocation) {
-        ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.builder().addAll(this.visitedConditions).add(resourceLocation).build();
+        ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.<ResourceLocation>builder().addAll(this.visitedConditions).add(resourceLocation).build();
         return new ValidationContext(this.problems, () -> this.getContext() + s, this.params, this.conditionResolver, immutableSet, this.tableResolver, this.visitedTables);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
index 595502c2cbc893dec5666131b1a1224a5c695a55..2c1ca826c513cbeb11188bcd5ddc318730356104 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
@@ -29,8 +29,8 @@ public class EntryGroup extends CompositeEntryBase {
             };
         default:
             return (lootContext, consumer) -> {
-                for(ComposableEntryContainer composableEntryContainer : composableEntryContainers) {
-                    composableEntryContainer.expand(lootContext, consumer);
+                for(ComposableEntryContainer composableEntryContainerIn : composableEntryContainers) {
+                    composableEntryContainerIn.expand(lootContext, consumer);
                 }
 
                 return true;
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
index aef3f37a8af7680c2cfb0e76f835f02ecd9d588c..96742404c21ae2fd4f3a72c11e7ed9aa9b7540ed 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
@@ -47,7 +47,7 @@ public class EnchantRandomlyFunction extends LootItemConditionalFunction {
         Enchantment enchantment;
         if (this.enchantments.isEmpty()) {
             boolean flag = itemStack.is(Items.BOOK);
-            List<Enchantment> list = Registry.ENCHANTMENT.stream().filter(Enchantment::isDiscoverable).filter((enchantment) -> flag || enchantment.canEnchant(itemStack)).collect(Collectors.toList());
+            List<Enchantment> list = Registry.ENCHANTMENT.stream().filter(Enchantment::isDiscoverable).filter((enchantmentIn) -> flag || enchantmentIn.canEnchant(itemStack)).collect(Collectors.toList());
             if (list.isEmpty()) {
                 LOGGER.warn("Couldn't find a compatible enchantment for {}", itemStack);
                 return itemStack;
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
index cd8d2f792f8af7b1a2a7aad16c8fb42a94fd9a9e..e1b7a6f2fff504345910c0856b10d0dba923b053 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
@@ -55,8 +55,8 @@ public class LootItemFunctions {
             return (itemStack, lootContext) -> (ItemStack)biFunction2.apply((ItemStack)biFunction.apply(itemStack, lootContext), lootContext);
         default:
             return (itemStack, lootContext) -> {
-                for(BiFunction<ItemStack, LootContext, ItemStack> biFunction : biFunctions) {
-                    itemStack = (ItemStack)biFunction.apply(itemStack, lootContext);
+                for(BiFunction<ItemStack, LootContext, ItemStack> biFunctionIn : biFunctions) {
+                    itemStack = (ItemStack)biFunctionIn.apply(itemStack, lootContext);
                 }
 
                 return itemStack;
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
index e6ca1917505a7163ba288c431f927d23972b37b7..2f21f574c2ae5f60ce798e9681445fe06bca2026 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
@@ -86,10 +86,10 @@ public class SetBannerPatternFunction extends LootItemConditionalFunction {
             super.serialize(jsonObject, setBannerPatternFunction, jsonSerializationContext);
             JsonArray jsonArray = new JsonArray();
             setBannerPatternFunction.patterns.forEach((pair) -> {
-                JsonObject jsonObject = new JsonObject();
-                jsonObject.addProperty("pattern", ((BannerPattern)pair.getFirst()).getFilename());
-                jsonObject.addProperty("color", ((DyeColor)pair.getSecond()).getName());
-                jsonArray.add(jsonObject);
+                JsonObject jsonObjectIn = new JsonObject();
+                jsonObjectIn.addProperty("pattern", ((BannerPattern)pair.getFirst()).getFilename());
+                jsonObjectIn.addProperty("color", ((DyeColor)pair.getSecond()).getName());
+                jsonArray.add(jsonObjectIn);
             });
             jsonObject.add("patterns", jsonArray);
             jsonObject.addProperty("append", setBannerPatternFunction.append);
diff --git a/src/main/java/net/minecraft/world/level/timers/TimerQueue.java b/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
index 251bad05e5aa60e4e3db45f6c8f71bdccec6f414..ca61c096b945773414748ed9bcd0bf9c83ce5aa6 100644
--- a/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
+++ b/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
@@ -28,7 +28,7 @@ public class TimerQueue<T> {
     private final Table<String, Long, TimerQueue.Event<T>> events = HashBasedTable.create();
 
     private static <T> Comparator<TimerQueue.Event<T>> createComparator() {
-        return Comparator.comparingLong((event) -> event.triggerTime).thenComparing((event) -> event.sequentialId);
+        return Comparator.<Event<T>>comparingLong((event) -> event.triggerTime).thenComparing((event) -> event.sequentialId);
     }
 
     public TimerQueue(TimerCallbacks<T> timerCallbacks, Stream<Dynamic<Tag>> stream) {
diff --git a/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java b/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java
index 1454d50ade65cac9c90a31eaf85014a66f7697e0..eacb549cb0c2fcd0bfe03cd561e3bbeadedf143a 100644
--- a/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java
+++ b/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java
@@ -33,10 +33,10 @@ public class BlackholeTickAccess {
     };
 
     public static <T> TickContainerAccess<T> emptyContainer() {
-        return CONTAINER_BLACKHOLE;
+        return (TickContainerAccess<T>) CONTAINER_BLACKHOLE;
     }
 
     public static <T> LevelTickAccess<T> emptyLevelList() {
-        return LEVEL_BLACKHOLE;
+        return (LevelTickAccess<T>) LEVEL_BLACKHOLE;
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/ticks/LevelTicks.java b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
index 6be0ac66a9aec8947a3a4d23851a6b899b64f2fb..6955773c3fd5ee38b3b843619ba6d8191f459705 100644
--- a/src/main/java/net/minecraft/world/ticks/LevelTicks.java
+++ b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
@@ -75,7 +75,7 @@ public class LevelTicks<T> implements LevelTickAccess<T> {
         long l = ChunkPos.asLong(scheduledTick.pos());
         LevelChunkTicks<T> levelChunkTicks = (LevelChunkTicks)this.allContainers.get(l);
         if (levelChunkTicks == null) {
-            Util.pauseInIde((T)(new IllegalStateException("Trying to schedule tick in not loaded position " + scheduledTick.pos())));
+            Util.pauseInIde((new IllegalStateException("Trying to schedule tick in not loaded position " + scheduledTick.pos())));
         } else {
             levelChunkTicks.schedule(scheduledTick);
         }
diff --git a/src/main/java/net/minecraft/world/ticks/SavedTick.java b/src/main/java/net/minecraft/world/ticks/SavedTick.java
index 991d8b974866d6358afdbe8c16c6e4c10f48938f..43e618365794ef6d57e3ef7a2a823cbc40c9f372 100644
--- a/src/main/java/net/minecraft/world/ticks/SavedTick.java
+++ b/src/main/java/net/minecraft/world/ticks/SavedTick.java
@@ -10,7 +10,7 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.world.level.ChunkPos;
 
-record SavedTick(T type, BlockPos pos, int delay, TickPriority priority) {
+record SavedTick<T>(T type, BlockPos pos, int delay, TickPriority priority) {
     private static final String TAG_ID = "i";
     private static final String TAG_X = "x";
     private static final String TAG_Y = "y";
diff --git a/src/main/java/net/minecraft/world/ticks/ScheduledTick.java b/src/main/java/net/minecraft/world/ticks/ScheduledTick.java
index 04b26d2ac445779e4baa77f60a0a2a49c650e7bd..bba05a1ba77aec409bfa2bbdbc334dab5f0c22d9 100644
--- a/src/main/java/net/minecraft/world/ticks/ScheduledTick.java
+++ b/src/main/java/net/minecraft/world/ticks/ScheduledTick.java
@@ -5,7 +5,7 @@ import java.util.Comparator;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 
-public record ScheduledTick(T type, BlockPos pos, long triggerTick, TickPriority priority, long subTickOrder) {
+public record ScheduledTick<T>(T type, BlockPos pos, long triggerTick, TickPriority priority, long subTickOrder) {
     public static final Comparator<ScheduledTick<?>> DRAIN_ORDER = (scheduledTick, scheduledTick2) -> {
         int i = Long.compare(scheduledTick.triggerTick, scheduledTick2.triggerTick);
         if (i != 0) {
diff --git a/src/main/resources/META-INF/MANIFEST.MF b/src/main/resources/META-INF/MANIFEST.MF
index 54f165d5b7667fdf8dc7d999ef532ab39eda546f..d43ed607295b14c114a19860f02ed5a38e7b3c87 100644
--- a/src/main/resources/META-INF/MANIFEST.MF
+++ b/src/main/resources/META-INF/MANIFEST.MF
@@ -1,3 +1,3 @@
 Manifest-Version: 1.0
 Main-Class: net.minecraft.client.main.Main
-
+Multi-Release: true
