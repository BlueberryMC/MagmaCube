From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <ilyy@outlook.jp>
Date: Sun, 10 Jan 2021 20:40:08 +0900
Subject: [PATCH] decompile fix


diff --git a/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java b/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
index 58f3cb413fd6919532593b192eead243087dbbe5..85f3fdde24283bf475d5380382bde56a7cb4488b 100644
--- a/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
+++ b/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
@@ -190,7 +190,7 @@ public class OggAudioStream implements AudioStream {
             memoryStack.close();
          }
 
-         return (boolean)i;
+         return false;
       }
    }
 
diff --git a/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java b/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
index 4e25050a61e87bad37d5cf5f0d52fa59d9d8f1f5..6e90fa0d1fa35dcbc832b29ef795742819f9a84f 100644
--- a/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
+++ b/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
@@ -85,10 +85,10 @@ public class TrueTypeGlyphProvider implements GlyphProvider {
                   int i3 = intBuffer3.get(0) - intBuffer.get(0);
                   int i4 = intBuffer4.get(0) - intBuffer2.get(0);
                   if (i3 > 0 && i4 > 0) {
-                     IntBuffer intBuffer5 = memoryStack.mallocInt(1);
+                     IntBuffer intBuffer5In = memoryStack.mallocInt(1);
                      IntBuffer intBuffer6 = memoryStack.mallocInt(1);
-                     STBTruetype.stbtt_GetGlyphHMetrics(this.font, i2, intBuffer5, intBuffer6);
-                     var12 = new TrueTypeGlyphProvider.Glyph(intBuffer.get(0), intBuffer3.get(0), -intBuffer2.get(0), -intBuffer4.get(0), (float)intBuffer5.get(0) * this.pointScale, (float)intBuffer6.get(0) * this.pointScale, i2);
+                     STBTruetype.stbtt_GetGlyphHMetrics(this.font, i2, intBuffer5In, intBuffer6);
+                     var12 = new TrueTypeGlyphProvider.Glyph(intBuffer.get(0), intBuffer3.get(0), -intBuffer2.get(0), -intBuffer4.get(0), (float)intBuffer5In.get(0) * this.pointScale, (float)intBuffer6.get(0) * this.pointScale, i2);
                      break label62;
                   }
 
diff --git a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
index 950e2648f73ca96651677a58f424dcabfc3b91cb..584f93e43cdf64c7a2a8563a1153da7341d2b0c2 100644
--- a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
+++ b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
@@ -198,7 +198,7 @@ public class InputConstants {
 
    public static boolean isRawMouseInputSupported() {
       try {
-         return GLFW_RAW_MOUSE_MOTION_SUPPORTED != null && GLFW_RAW_MOUSE_MOTION_SUPPORTED.invokeExact();
+         return GLFW_RAW_MOUSE_MOTION_SUPPORTED != null && (boolean) GLFW_RAW_MOUSE_MOTION_SUPPORTED.invokeExact(); // MagmaCube - decompile error
       } catch (Throwable var1) {
          throw new RuntimeException(var1);
       }
@@ -220,7 +220,7 @@ public class InputConstants {
       try {
          methodHandle = lookup.findStatic(GLFW.class, "glfwRawMouseMotionSupported", methodType);
          MethodHandle methodHandle2 = lookup.findStaticGetter(GLFW.class, "GLFW_RAW_MOUSE_MOTION", Integer.TYPE);
-         i = methodHandle2.invokeExact();
+         i = (int) methodHandle2.invokeExact(); // MagmaCube - decompile error
       } catch (NoSuchFieldException | NoSuchMethodException var5) {
       } catch (Throwable var6) {
          throw new RuntimeException(var6);
diff --git a/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java b/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java
index ec965dc5c5423fb8eb4b393ee1e4e5278ed24d26..3525be3f7996c0dd5de3658798a817ebbb515b16 100644
--- a/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java
+++ b/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java
@@ -18,7 +18,7 @@ public class MacosUtil {
    }
 
    private static boolean isInKioskMode(NSObject nSObject) {
-      return (nSObject.sendRaw("styleMask", new Object[0]) & 16384L) == 16384L;
+      return ((int) nSObject.sendRaw("styleMask", new Object[0]) & 16384L) == 16384L;
    }
 
    private static void toggleFullscreen(NSObject nSObject) {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java b/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
index 46223ce90b44655b74e649867c48907913b46915..eedce933c698ae4a16b13819e5e7384ef6f39b25 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
@@ -11,18 +11,20 @@ public class DefaultVertexFormat {
    public static final VertexFormatElement ELEMENT_NORMAL = new VertexFormatElement(0, VertexFormatElement.Type.BYTE, VertexFormatElement.Usage.NORMAL, 3);
    public static final VertexFormatElement ELEMENT_PADDING = new VertexFormatElement(0, VertexFormatElement.Type.BYTE, VertexFormatElement.Usage.PADDING, 1);
    public static final VertexFormatElement ELEMENT_UV = ELEMENT_UV0;
-   public static final VertexFormat BLIT_SCREEN = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV", ELEMENT_UV).put("Color", ELEMENT_COLOR).build());
-   public static final VertexFormat BLOCK = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-   public static final VertexFormat NEW_ENTITY = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV1", ELEMENT_UV1).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-   public static final VertexFormat PARTICLE = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
-   public static final VertexFormat POSITION = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).build());
-   public static final VertexFormat POSITION_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).build());
-   public static final VertexFormat POSITION_COLOR_NORMAL = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-   public static final VertexFormat POSITION_COLOR_LIGHTMAP = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
-   public static final VertexFormat POSITION_TEX = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).build());
-   public static final VertexFormat POSITION_COLOR_TEX = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).build());
-   public static final VertexFormat POSITION_TEX_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).build());
-   public static final VertexFormat POSITION_COLOR_TEX_LIGHTMAP = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).build());
-   public static final VertexFormat POSITION_TEX_LIGHTMAP_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Color", ELEMENT_COLOR).build());
-   public static final VertexFormat POSITION_TEX_COLOR_NORMAL = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+   // MagmaCube start - decompile error
+   public static final VertexFormat BLIT_SCREEN = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV", ELEMENT_UV).put("Color", ELEMENT_COLOR).build());
+   public static final VertexFormat BLOCK = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+   public static final VertexFormat NEW_ENTITY = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV1", ELEMENT_UV1).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+   public static final VertexFormat PARTICLE = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
+   public static final VertexFormat POSITION = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).build());
+   public static final VertexFormat POSITION_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).build());
+   public static final VertexFormat POSITION_COLOR_NORMAL = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+   public static final VertexFormat POSITION_COLOR_LIGHTMAP = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
+   public static final VertexFormat POSITION_TEX = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).build());
+   public static final VertexFormat POSITION_COLOR_TEX = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).build());
+   public static final VertexFormat POSITION_TEX_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).build());
+   public static final VertexFormat POSITION_COLOR_TEX_LIGHTMAP = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).build());
+   public static final VertexFormat POSITION_TEX_LIGHTMAP_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Color", ELEMENT_COLOR).build());
+   public static final VertexFormat POSITION_TEX_COLOR_NORMAL = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+   // MagmaCube end - decompile error
 }
\ No newline at end of file
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
index 13b6e40a69b7b48f11182f6c46fcd3ba2931aad6..8e3c255d906bce7160363df2c8e7a198e03ffaf6 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
@@ -75,7 +75,7 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
          boolean flag = i != this.serverData.activeSlot || this.serverData.worldType == RealmsServer.WorldType.MINIGAME;
          Button button;
          if (flag) {
-            button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.play"), (button) -> {
+            button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.play"), (buttonIn) -> {
                if (((RealmsWorldOptions)this.serverData.slots.get(i)).empty) {
                   RealmsResetWorldScreen realmsResetWorldScreen = new RealmsResetWorldScreen(this, this.serverData, new TranslatableComponent("mco.configure.world.switch.slot"), new TranslatableComponent("mco.configure.world.switch.slot.subtitle"), 10526880, CommonComponents.GUI_CANCEL, this::doSwitchOrReset, () -> {
                      this.minecraft.setScreen(this);
@@ -90,11 +90,11 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
 
             });
          } else {
-            button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.download"), (button) -> {
+            button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.download"), (buttonIn) -> {
                Component component = new TranslatableComponent("mco.configure.world.restore.download.question.line1");
                Component component2 = new TranslatableComponent("mco.configure.world.restore.download.question.line2");
-               this.minecraft.setScreen(new RealmsLongConfirmationScreen((flag) -> {
-                  if (flag) {
+               this.minecraft.setScreen(new RealmsLongConfirmationScreen((flagIn) -> {
+                  if (flagIn) {
                      this.downloadWorld(i);
                   } else {
                      this.minecraft.setScreen(this);
@@ -110,7 +110,7 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
          }
 
          this.addRenderableWidget(button);
-         this.addRenderableWidget(new Button(this.getFramePositionX(i), row(10), 80, 20, new TranslatableComponent("mco.brokenworld.reset"), (button) -> {
+         this.addRenderableWidget(new Button(this.getFramePositionX(i), row(10), 80, 20, new TranslatableComponent("mco.brokenworld.reset"), (buttonIn) -> {
             RealmsResetWorldScreen realmsResetWorldScreen = new RealmsResetWorldScreen(this, this.serverData, this::doSwitchOrReset, () -> {
                this.minecraft.setScreen(this);
                this.doSwitchOrReset();
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
index 81614b63f539c6ccc228472de9865a89623287c8..66b15ef413d02ca15bd9466cbd2cb6a42801c74d 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
@@ -189,40 +189,42 @@ public class RealmsSelectWorldTemplateScreen extends RealmsScreen {
    private void fetchTemplatesAsync(final WorldTemplatePaginatedList worldTemplatePaginatedList) {
       (new Thread("realms-template-fetcher") {
          public void run() {
-            WorldTemplatePaginatedList worldTemplatePaginatedList = worldTemplatePaginatedList;
-
-            Either<WorldTemplatePaginatedList, String> either;
-            for(RealmsClient realmsClient = RealmsClient.create(); worldTemplatePaginatedList != null; worldTemplatePaginatedList = (WorldTemplatePaginatedList)RealmsSelectWorldTemplateScreen.this.minecraft.submit(() -> {
-               if (either.right().isPresent()) {
-                  RealmsSelectWorldTemplateScreen.LOGGER.error("Couldn't fetch templates: {}", either.right().get());
-                  if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
-                     RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(I18n.get("mco.template.select.failure"));
-                  }
-
-                  return null;
-               } else {
-                  WorldTemplatePaginatedList worldTemplatePaginatedList = (WorldTemplatePaginatedList)either.left().get();
-
-                  for(WorldTemplate worldTemplate : worldTemplatePaginatedList.templates) {
-                     RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.addEntry(worldTemplate);
-                  }
-
-                  if (worldTemplatePaginatedList.templates.isEmpty()) {
+            // MagmaCube start - decompile error
+            WorldTemplatePaginatedList worldtemplatepaginatedlist = worldTemplatePaginatedList;
+
+            RealmsClient realmsclient = RealmsClient.create();
+            while (worldtemplatepaginatedlist != null) {
+               Either<WorldTemplatePaginatedList, String> either = RealmsSelectWorldTemplateScreen.this.fetchTemplates(worldtemplatepaginatedlist, realmsclient);
+               worldtemplatepaginatedlist = RealmsSelectWorldTemplateScreen.this.minecraft.submit(() -> {
+                  if (either.right().isPresent()) {
+                     RealmsSelectWorldTemplateScreen.LOGGER.error("Couldn't fetch templates: {}", either.right().get());
                      if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
-                        String s = I18n.get("mco.template.select.none", "%link");
-                        TextRenderingUtils.LineSegment lineSegment = TextRenderingUtils.LineSegment.link(I18n.get("mco.template.select.none.linkTitle"), "https://aka.ms/MinecraftRealmsContentCreator");
-                        RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(s, lineSegment);
+                        RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(I18n.get("mco.template.select.failure"));
                      }
 
                      return null;
                   } else {
-                     return worldTemplatePaginatedList;
+                     WorldTemplatePaginatedList worldtemplatepaginatedlist1 = either.left().get();
+
+                     for(WorldTemplate worldtemplate : worldtemplatepaginatedlist1.templates) {
+                        RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.addEntry(worldtemplate);
+                     }
+
+                     if (worldtemplatepaginatedlist1.templates.isEmpty()) {
+                        if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
+                           String s = I18n.get("mco.template.select.none", "%link");
+                           TextRenderingUtils.LineSegment textrenderingutils$linesegment = TextRenderingUtils.LineSegment.link(I18n.get("mco.template.select.none.linkTitle"), "https://aka.ms/MinecraftRealmsContentCreator");
+                           RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(s, textrenderingutils$linesegment);
+                        }
+
+                        return null;
+                     } else {
+                        return worldtemplatepaginatedlist1;
+                     }
                   }
-               }
-            }).join()) {
-               either = RealmsSelectWorldTemplateScreen.this.fetchTemplates(worldTemplatePaginatedList, realmsClient);
+               }).join();
+               // MagmaCube end - decompile error
             }
-
          }
       }).start();
    }
diff --git a/src/main/java/net/minecraft/SharedConstants.java b/src/main/java/net/minecraft/SharedConstants.java
index 6755fae27431474c7171c2faf8295dc071173824..6e00f8f77f4e77e05d2ac93cf17e2c5e7a018d78 100644
--- a/src/main/java/net/minecraft/SharedConstants.java
+++ b/src/main/java/net/minecraft/SharedConstants.java
@@ -161,7 +161,7 @@ public class SharedConstants {
 
    static {
       ResourceLeakDetector.setLevel(NETTY_LEAK_DETECTION);
-      CommandSyntaxException.ENABLE_COMMAND_STACK_TRACES = false;
+      CommandSyntaxException.ENABLE_COMMAND_STACK_TRACES = COMMAND_STACK_TRACES; // MagmaCube - SharedConstants
       CommandSyntaxException.BUILT_IN_EXCEPTIONS = new BrigadierExceptions();
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index e91084b7262cdc3516cbd57ceef54ff825b99932..5ab0cb8d0ebbdbb0523edbca081a7af1a9a6c377 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -24,6 +24,7 @@ import java.nio.file.Path;
 import java.nio.file.spi.FileSystemProvider;
 import java.security.AccessController;
 import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 import java.time.Instant;
 import java.util.Arrays;
 import java.util.Iterator;
@@ -299,18 +300,18 @@ public class Util {
    }
 
    public static <K> Strategy<K> identityStrategy() {
-      return Util.IdentityStrategy.INSTANCE;
+      return (Strategy<K>) IdentityStrategy.INSTANCE;
    }
 
    public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<? extends V>> list) {
-      return list.stream().reduce(CompletableFuture.completedFuture(Lists.newArrayList()), (completableFuture, completableFuture2) -> completableFuture2.thenCombine(completableFuture, (object, list) -> {
-            List<V> list2 = Lists.newArrayListWithCapacity(list.size() + 1);
-            list2.addAll(list);
+      return list.stream().reduce(CompletableFuture.completedFuture(Lists.newArrayList()), (completableFuture, completableFuture2) -> completableFuture2.thenCombine(completableFuture, (object, listx) -> {
+            List<V> list2 = Lists.newArrayListWithCapacity(listx.size() + 1);
+            list2.addAll(listx);
             list2.add(object);
             return list2;
-         }), (completableFuture, completableFuture2) -> completableFuture.thenCombine(completableFuture2, (list, list2) -> {
-            List<V> list3 = Lists.newArrayListWithCapacity(list.size() + list2.size());
-            list3.addAll(list);
+         }), (completableFuture, completableFuture2) -> completableFuture.thenCombine(completableFuture2, (listx, list2) -> {
+            List<V> list3 = Lists.newArrayListWithCapacity(listx.size() + list2.size());
+            list3.addAll(listx);
             list3.addAll(list2);
             return list3;
          }));
@@ -629,7 +630,7 @@ public class Util {
 
       public void openUrl(URL url) {
          try {
-            Process process = (Process)AccessController.doPrivileged(() -> Runtime.getRuntime().exec(this.getOpenUrlArguments(url)));
+            Process process = (Process)AccessController.doPrivileged((PrivilegedExceptionAction<Process>) () -> Runtime.getRuntime().exec(this.getOpenUrlArguments(url)));
 
             for(String s : IOUtils.readLines(process.getErrorStream())) {
                Util.LOGGER.error(s);
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java b/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java
index b719256a38dc4e909022aeb63c71dcb960b305f7..8e8d3df8e540fb78237e7242005f0b28235f50d9 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java
@@ -36,7 +36,7 @@ public abstract class EntityTypePredicate {
          String s = GsonHelper.convertToString(jsonElement, "type");
          if (s.startsWith("#")) {
             ResourceLocation resourceLocation = new ResourceLocation(s.substring(1));
-            return new EntityTypePredicate.TagPredicate(SerializationTags.getInstance().getTagOrThrow(Registry.ENTITY_TYPE_REGISTRY, resourceLocation, (resourceLocation) -> new JsonSyntaxException("Unknown entity tag '" + resourceLocation + "'")));
+            return new EntityTypePredicate.TagPredicate(SerializationTags.getInstance().getTagOrThrow(Registry.ENTITY_TYPE_REGISTRY, resourceLocation, (resourceLocationx) -> new JsonSyntaxException("Unknown entity tag '" + resourceLocationx + "'"))); // MagmaCube - decompile error
          } else {
             ResourceLocation resourceLocation2 = new ResourceLocation(s);
             EntityType<?> entityType = (EntityType)Registry.ENTITY_TYPE.getOptional(resourceLocation2).orElseThrow(() -> new JsonSyntaxException("Unknown entity type '" + resourceLocation2 + "', valid types are: " + COMMA_JOINER.join(Registry.ENTITY_TYPE.keySet())));
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java b/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
index 7a32a715f197aeeef267064cc29becc92f9acbe8..d0d095d99db9c5c8b8d64227b2d02310951df408 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
@@ -209,11 +209,13 @@ public class PlayerPredicate {
          if (!this.stats.isEmpty()) {
             JsonArray jsonArray = new JsonArray();
             this.stats.forEach((stat, ints) -> {
-               JsonObject jsonObject = new JsonObject();
-               jsonObject.addProperty("type", Registry.STAT_TYPE.getKey(stat.getType()).toString());
-               jsonObject.addProperty("stat", getStatValueId(stat).toString());
-               jsonObject.add("value", ints.serializeToJson());
-               jsonArray.add(jsonObject);
+               // MagmaCube start - decompile error
+               JsonObject jsonObjectx = new JsonObject();
+               jsonObjectx.addProperty("type", Registry.STAT_TYPE.getKey(stat.getType()).toString());
+               jsonObjectx.addProperty("stat", getStatValueId(stat).toString());
+               jsonObjectx.add("value", ints.serializeToJson());
+               jsonArray.add(jsonObjectx);
+               // MagmaCube end - decompile error
             });
             jsonObject.add("stats", jsonArray);
          }
diff --git a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
index 65fbdba028735ea74d02f6487b30323e3a7fb6e1..51087bfc48ce26091e5ae08d781212a3d3666f61 100644
--- a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
@@ -137,7 +137,7 @@ public class StatePropertiesPredicate {
       protected <T extends Comparable<T>> boolean match(StateHolder<?, ?> stateHolder, Property<T> property) {
          T comparable = stateHolder.getValue(property);
          Optional<T> optional = property.getValue(this.value);
-         return optional.isPresent() && comparable.compareTo((Comparable)optional.get()) == 0;
+         return optional.isPresent() && comparable.compareTo(optional.get()) == 0;
       }
 
       public JsonElement toJson() {
@@ -190,14 +190,14 @@ public class StatePropertiesPredicate {
          T comparable = stateHolder.getValue(property);
          if (this.minValue != null) {
             Optional<T> optional = property.getValue(this.minValue);
-            if (!optional.isPresent() || comparable.compareTo((Comparable)optional.get()) < 0) {
+            if (!optional.isPresent() || comparable.compareTo(optional.get()) < 0) {
                return false;
             }
          }
 
          if (this.maxValue != null) {
             Optional<T> optional2 = property.getValue(this.maxValue);
-            if (!optional2.isPresent() || comparable.compareTo((Comparable)optional2.get()) > 0) {
+            if (!optional2.isPresent() || comparable.compareTo(optional2.get()) > 0) {
                return false;
             }
          }
diff --git a/src/main/java/net/minecraft/client/CycleOption.java b/src/main/java/net/minecraft/client/CycleOption.java
index 8b25f2551433fffbbe1b88d5a5f8d7b625290257..139d3c5d14d544741afc5f2c92e2f8e450df43fe 100644
--- a/src/main/java/net/minecraft/client/CycleOption.java
+++ b/src/main/java/net/minecraft/client/CycleOption.java
@@ -61,7 +61,7 @@ public class CycleOption<T> extends Option {
 
    public AbstractWidget createButton(Options options, int i, int i2, int i3) {
       CycleButton.TooltipSupplier<T> tooltipSupplier = (CycleButton.TooltipSupplier)this.tooltip.apply(Minecraft.getInstance());
-      return ((CycleButton.Builder)this.buttonSetup.get()).withTooltip(tooltipSupplier).withInitialValue((T)this.getter.apply(options)).create(i, i2, i3, 20, this.getCaption(), (cycleButton, object) -> {
+      return this.buttonSetup.get().withTooltip(tooltipSupplier).withInitialValue((T)this.getter.apply(options)).create(i, i2, i3, 20, this.getCaption(), (cycleButton, object) -> { // MagmaCube - decompile error
          this.setter.accept(options, this, object);
          options.save();
       });
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index 83a1946cc921e653ab69321af07fb397414f8efe..a0473f5101beb1a0e2738fc156866d3aff00b9d5 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -2211,9 +2211,9 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
       systemReport.setDetail("GL debug messages", (Supplier<String>)(() -> GlDebug.isDebugEnabled() ? String.join("\n", GlDebug.getLastOpenGlDebugMessages()) : "<disabled>"));
       systemReport.setDetail("Using VBOs", (Supplier<String>)(() -> "Yes"));
       systemReport.setDetail("Is Modded", (Supplier<String>)(() -> {
-         String s = ClientBrandRetriever.getClientModName();
-         if (!"vanilla".equals(s)) {
-            return "Definitely; Client brand changed to '" + s + "'";
+         String clientModName = ClientBrandRetriever.getClientModName();
+         if (!"vanilla".equals(clientModName)) {
+            return "Definitely; Client brand changed to '" + clientModName + "'";
          } else {
             return Minecraft.class.getSigners() == null ? "Very likely; Jar signature invalidated" : "Probably not. Jar signature remains and client brand is untouched.";
          }
@@ -2231,13 +2231,13 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
          systemReport.setDetail("Resource Packs", (Supplier<String>)(() -> {
             StringBuilder stringBuilder = new StringBuilder();
 
-            for(String s : options.resourcePacks) {
+            for(String resourcePack : options.resourcePacks) {
                if (stringBuilder.length() > 0) {
                   stringBuilder.append(", ");
                }
 
-               stringBuilder.append(s);
-               if (options.incompatibleResourcePacks.contains(s)) {
+               stringBuilder.append(resourcePack);
+               if (options.incompatibleResourcePacks.contains(resourcePack)) {
                   stringBuilder.append(" (incompatible)");
                }
             }
@@ -2259,7 +2259,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
    }
 
    public CompletableFuture<Void> delayTextureReload() {
-      return this.submit(this::reloadResourcePacks).thenCompose((completableFuture) -> completableFuture);
+      return this.submit((Supplier<CompletableFuture<Void>>) this::reloadResourcePacks).thenCompose((completableFuture) -> completableFuture);
    }
 
    public void populateSnooper(Snooper snooper) {
diff --git a/src/main/java/net/minecraft/client/Options.java b/src/main/java/net/minecraft/client/Options.java
index f6ce25657cdd19ac1b8bc8efe97550099335cd2f..93afc473e9d660942f7f29c0a6536fdfdbd85fd9 100644
--- a/src/main/java/net/minecraft/client/Options.java
+++ b/src/main/java/net/minecraft/client/Options.java
@@ -281,7 +281,7 @@ public class Options {
       }
 
       for(SoundSource soundSource : SoundSource.values()) {
-         this.sourceVolumes.computeFloat(soundSource, (soundSource, f) -> fieldAccess.process("soundCategory_" + soundSource.getName(), f != null ? f : 1.0F));
+         this.sourceVolumes.computeFloat(soundSource, (soundSourcex, f) -> fieldAccess.process("soundCategory_" + soundSourcex.getName(), f != null ? f : 1.0F)); // MagmaCube - decompile error
       }
 
       for(PlayerModelPart playerModelPart : PlayerModelPart.values()) {
@@ -309,7 +309,7 @@ public class Options {
                try {
                   Iterator<String> iterator = OPTION_SPLITTER.split(s).iterator();
                   compoundTag.putString((String)iterator.next(), (String)iterator.next());
-               } catch (Exception var3) {
+               } catch (Exception var4) { // MagmaCube - decompile error
                   LOGGER.warn("Skipping bad option: {}", s);
                }
 
@@ -670,7 +670,7 @@ public class Options {
    }
 
    public String dumpOptionsForReport() {
-      ImmutableList<Pair<String, String>> immutableList = ImmutableList.builder().add(Pair.of("ao", String.valueOf(this.ambientOcclusion))).add(Pair.of("biomeBlendRadius", String.valueOf(this.biomeBlendRadius))).add(Pair.of("enableVsync", String.valueOf(this.enableVsync))).add(Pair.of("entityDistanceScaling", String.valueOf(this.entityDistanceScaling))).add(Pair.of("entityShadows", String.valueOf(this.entityShadows))).add(Pair.of("forceUnicodeFont", String.valueOf(this.forceUnicodeFont))).add(Pair.of("fov", String.valueOf(this.fov))).add(Pair.of("fovEffectScale", String.valueOf(this.fovEffectScale))).add(Pair.of("fullscreen", String.valueOf(this.fullscreen))).add(Pair.of("fullscreenResolution", String.valueOf(this.fullscreenVideoModeString))).add(Pair.of("gamma", String.valueOf(this.gamma))).add(Pair.of("glDebugVerbosity", String.valueOf(this.glDebugVerbosity))).add(Pair.of("graphicsMode", String.valueOf(this.graphicsMode))).add(Pair.of("guiScale", String.valueOf(this.guiScale))).add(Pair.of("maxFps", String.valueOf(this.framerateLimit))).add(Pair.of("mipmapLevels", String.valueOf(this.mipmapLevels))).add(Pair.of("narrator", String.valueOf(this.narratorStatus))).add(Pair.of("overrideHeight", String.valueOf(this.overrideHeight))).add(Pair.of("overrideWidth", String.valueOf(this.overrideWidth))).add(Pair.of("particles", String.valueOf(this.particles))).add(Pair.of("reducedDebugInfo", String.valueOf(this.reducedDebugInfo))).add(Pair.of("renderClouds", String.valueOf(this.renderClouds))).add(Pair.of("renderDistance", String.valueOf(this.renderDistance))).add(Pair.of("resourcePacks", String.valueOf(this.resourcePacks))).add(Pair.of("screenEffectScale", String.valueOf(this.screenEffectScale))).add(Pair.of("syncChunkWrites", String.valueOf(this.syncWrites))).add(Pair.of("useNativeTransport", String.valueOf(this.useNativeTransport))).build();
+      ImmutableList<Pair<String, String>> immutableList = ImmutableList.<Pair<String, String>>builder().add(Pair.of("ao", String.valueOf(this.ambientOcclusion))).add(Pair.of("biomeBlendRadius", String.valueOf(this.biomeBlendRadius))).add(Pair.of("enableVsync", String.valueOf(this.enableVsync))).add(Pair.of("entityDistanceScaling", String.valueOf(this.entityDistanceScaling))).add(Pair.of("entityShadows", String.valueOf(this.entityShadows))).add(Pair.of("forceUnicodeFont", String.valueOf(this.forceUnicodeFont))).add(Pair.of("fov", String.valueOf(this.fov))).add(Pair.of("fovEffectScale", String.valueOf(this.fovEffectScale))).add(Pair.of("fullscreen", String.valueOf(this.fullscreen))).add(Pair.of("fullscreenResolution", String.valueOf(this.fullscreenVideoModeString))).add(Pair.of("gamma", String.valueOf(this.gamma))).add(Pair.of("glDebugVerbosity", String.valueOf(this.glDebugVerbosity))).add(Pair.of("graphicsMode", String.valueOf(this.graphicsMode))).add(Pair.of("guiScale", String.valueOf(this.guiScale))).add(Pair.of("maxFps", String.valueOf(this.framerateLimit))).add(Pair.of("mipmapLevels", String.valueOf(this.mipmapLevels))).add(Pair.of("narrator", String.valueOf(this.narratorStatus))).add(Pair.of("overrideHeight", String.valueOf(this.overrideHeight))).add(Pair.of("overrideWidth", String.valueOf(this.overrideWidth))).add(Pair.of("particles", String.valueOf(this.particles))).add(Pair.of("reducedDebugInfo", String.valueOf(this.reducedDebugInfo))).add(Pair.of("renderClouds", String.valueOf(this.renderClouds))).add(Pair.of("renderDistance", String.valueOf(this.renderDistance))).add(Pair.of("resourcePacks", String.valueOf(this.resourcePacks))).add(Pair.of("screenEffectScale", String.valueOf(this.screenEffectScale))).add(Pair.of("syncChunkWrites", String.valueOf(this.syncWrites))).add(Pair.of("useNativeTransport", String.valueOf(this.useNativeTransport))).build();
       return (String)immutableList.stream().map((pair) -> (String)pair.getFirst() + ": " + (String)pair.getSecond()).collect(Collectors.joining(System.lineSeparator()));
    }
 
diff --git a/src/main/java/net/minecraft/client/gui/Font.java b/src/main/java/net/minecraft/client/gui/Font.java
index c0847fd8c441d8d2eb67430961fe51211abf50e4..7341707d0de32adedc0aae1129c159db04fd5b07 100644
--- a/src/main/java/net/minecraft/client/gui/Font.java
+++ b/src/main/java/net/minecraft/client/gui/Font.java
@@ -130,14 +130,14 @@ public class Font {
                float[] floats = new float[]{f};
                int i7 = i5;
                int i8 = i6;
-               formattedCharSequence.accept((i4x, style, i5) -> {
+               formattedCharSequence.accept((i4x, style, i5x) -> {
                   boolean flag = style.isBold();
                   FontSet fontSet = this.getFontSet(style.getFont());
-                  GlyphInfo glyphInfo = fontSet.getGlyphInfo(i5);
+                  GlyphInfo glyphInfo = fontSet.getGlyphInfo(i5x);
                   stringRenderOutput.x = floats[0] + (float)i7 * glyphInfo.getShadowOffset();
                   stringRenderOutput.y = f2 + (float)i8 * glyphInfo.getShadowOffset();
                   floats[0] += glyphInfo.getAdvance(flag);
-                  return stringRenderOutput.accept(i4x, style.withColor(i4), i5);
+                  return stringRenderOutput.accept(i4x, style.withColor(i4), i5x);
                });
             }
          }
diff --git a/src/main/java/net/minecraft/client/gui/components/CycleButton.java b/src/main/java/net/minecraft/client/gui/components/CycleButton.java
index 6aefba8072ef1d227e82512f0d1ca1fad6354fa7..2675f35397f4dd05647233b6d1fa91f8a290bc6f 100644
--- a/src/main/java/net/minecraft/client/gui/components/CycleButton.java
+++ b/src/main/java/net/minecraft/client/gui/components/CycleButton.java
@@ -132,15 +132,15 @@ public class CycleButton<T> extends AbstractButton implements TooltipAccessor {
    }
 
    public static CycleButton.Builder<Boolean> booleanBuilder(Component component, Component component2) {
-      return (new CycleButton.Builder((flag) -> flag ? component : component2)).withValues(BOOLEAN_OPTIONS);
+      return (new CycleButton.Builder<Boolean>((flag) -> flag ? component : component2)).withValues(BOOLEAN_OPTIONS); // MagmaCube - decompile error
    }
 
    public static CycleButton.Builder<Boolean> onOffBuilder() {
-      return (new CycleButton.Builder((flag) -> flag ? CommonComponents.OPTION_ON : CommonComponents.OPTION_OFF)).withValues(BOOLEAN_OPTIONS);
+      return (new CycleButton.Builder<Boolean>((flag) -> flag ? CommonComponents.OPTION_ON : CommonComponents.OPTION_OFF)).withValues(BOOLEAN_OPTIONS); // MagmaCube - decompile error
    }
 
    public static CycleButton.Builder<Boolean> onOffBuilder(boolean flag) {
-      return onOffBuilder().withInitialValue((T)flag);
+      return onOffBuilder().withInitialValue(flag); // MagmaCube - decompile error
    }
 
    public static class Builder<T> {
diff --git a/src/main/java/net/minecraft/client/gui/font/FontManager.java b/src/main/java/net/minecraft/client/gui/font/FontManager.java
index 1ca066963924c5d28bfcfba4c392826e92ef0b76..408568f24ddc2be537e1365d8f7f044798aab663 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontManager.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontManager.java
@@ -18,6 +18,7 @@ import java.io.Reader;
 import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Map;
+import java.util.function.IntConsumer; // MagmaCube
 import net.minecraft.Util;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.font.providers.GlyphProviderBuilderType;
@@ -129,7 +130,7 @@ public class FontManager implements AutoCloseable {
                intSet.addAll(glyphProvider2.getSupportedGlyphs());
             }
 
-            intSet.forEach((ix) -> {
+            intSet.forEach((IntConsumer) (ix) -> { // MagmaCube - decompile error
                if (ix != 32) {
                   for(GlyphProvider glyphProvider : Lists.reverse(list)) {
                      if (glyphProvider.getGlyph(ix) != null) {
diff --git a/src/main/java/net/minecraft/client/gui/font/FontSet.java b/src/main/java/net/minecraft/client/gui/font/FontSet.java
index ad4513ed5b7b2e64bae04e93200e4e61df157a0b..75b18ea002d33c061d06883fdd0dc60ae0989ea8 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontSet.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontSet.java
@@ -14,6 +14,7 @@ import it.unimi.dsi.fastutil.ints.IntSet;
 import java.util.List;
 import java.util.Random;
 import java.util.Set;
+import java.util.function.IntConsumer; // MagmaCube
 import net.minecraft.client.gui.font.glyphs.BakedGlyph;
 import net.minecraft.client.gui.font.glyphs.EmptyGlyph;
 import net.minecraft.client.gui.font.glyphs.MissingGlyph;
@@ -56,7 +57,7 @@ public class FontSet implements AutoCloseable {
       }
 
       Set<GlyphProvider> set = Sets.newHashSet();
-      intSet.forEach((i) -> {
+      intSet.forEach((IntConsumer) (i) -> { // MagmaCube - decompile error
          for(GlyphProvider glyphProvider : list) {
             GlyphInfo glyphInfo = (GlyphInfo)(i == 32 ? SPACE_INFO : glyphProvider.getGlyph(i));
             if (glyphInfo != null) {
diff --git a/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java b/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
index 029f86db7f5c53e2b5df17a3788ae02ad0bf5ba7..4cb7e01960b21e6446dac50c1fca3d35f7b547db 100644
--- a/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
+++ b/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
@@ -9,7 +9,7 @@ import net.minecraft.util.Unit;
 public class NarrationThunk<T> {
    private final T contents;
    private final BiConsumer<Consumer<String>, T> converter;
-   public static final NarrationThunk<?> EMPTY = new NarrationThunk((T)Unit.INSTANCE, (consumer, unit) -> {
+   public static final NarrationThunk<?> EMPTY = new NarrationThunk<>(Unit.INSTANCE, (consumer, unit) -> {
    });
 
    private NarrationThunk(T object, BiConsumer<Consumer<String>, T> biConsumer) {
@@ -17,16 +17,16 @@ public class NarrationThunk<T> {
       this.converter = biConsumer;
    }
 
-   public static NarrationThunk<?> from(String s) {
-      return new NarrationThunk((T)s, Consumer::accept);
+   public static NarrationThunk<String> from(String s) {
+      return new NarrationThunk<>(s, Consumer::accept);
    }
 
-   public static NarrationThunk<?> from(Component component) {
+   public static NarrationThunk<Component> from(Component component) {
       return new NarrationThunk<>(component, (consumer, componentx) -> consumer.accept(componentx.getContents()));
    }
 
-   public static NarrationThunk<?> from(List<Component> list) {
-      return new NarrationThunk((T)list, (consumer, list2) -> list.stream().map(Component::getString).forEach(consumer));
+   public static NarrationThunk<List<Component>> from(List<Component> list) {
+      return new NarrationThunk<>(list, (consumer, list2) -> list.stream().map(Component::getString).forEach(consumer));
    }
 
    public void getText(Consumer<String> consumer) {
diff --git a/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java b/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
index 97eac87b3211c9e657967329757fae08ec558824..47437e75f7335955a0c240b8db81907ec6a7b342 100644
--- a/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
+++ b/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
@@ -7,7 +7,7 @@ import java.util.function.Consumer;
 
 public class ScreenNarrationCollector {
    int generation;
-   final Map<ScreenNarrationCollector.EntryKey, ScreenNarrationCollector.NarrationEntry> entries = Maps.newTreeMap(Comparator.comparing((entryKey) -> entryKey.type).thenComparing((entryKey) -> entryKey.depth));
+   final Map<ScreenNarrationCollector.EntryKey, ScreenNarrationCollector.NarrationEntry> entries = Maps.newTreeMap(Comparator.<EntryKey, NarratedElementType>comparing((entryKey) -> entryKey.type).thenComparing((entryKey) -> entryKey.depth));
 
    public void update(Consumer<NarrationElementOutput> consumer) {
       ++this.generation;
diff --git a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
index ab3e9f9758c00bb4bb2ea02a4f63f14af092ac93..b23c10e7c069dce98343552d9d086f7e88ec07e6 100644
--- a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
@@ -431,11 +431,11 @@ public class StatsScreen extends Screen implements StatsUpdateListener {
                i = 0;
                i2 = 0;
             } else if (ItemStatisticsList.this.blockColumns.contains(ItemStatisticsList.this.sortColumn)) {
-               StatType<Block> statType = ItemStatisticsList.this.sortColumn;
+               StatType<Block> statType = (StatType<Block>) ItemStatisticsList.this.sortColumn;
                i = item instanceof BlockItem ? StatsScreen.this.stats.getValue(statType, ((BlockItem)item).getBlock()) : -1;
                i2 = item2 instanceof BlockItem ? StatsScreen.this.stats.getValue(statType, ((BlockItem)item2).getBlock()) : -1;
             } else {
-               StatType<Item> statType2 = ItemStatisticsList.this.sortColumn;
+               StatType<Item> statType2 = (StatType<Item>) ItemStatisticsList.this.sortColumn;
                i = StatsScreen.this.stats.getValue(statType2, item);
                i2 = StatsScreen.this.stats.getValue(statType2, item2);
             }
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
index 5710a19ab1e8d1ab3455536dcdd071a041ce5066..195c00f9f9e60a16874e082b699e99d5b0f076fd 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
@@ -31,7 +31,7 @@ public class CommandBlockEditScreen extends AbstractCommandBlockEditScreen {
 
    protected void init() {
       super.init();
-      this.modeButton = this.addRenderableWidget(CycleButton.builder((mode) -> {
+      this.modeButton = this.addRenderableWidget(CycleButton.<CommandBlockEntity.Mode>builder((mode) -> {
          switch(mode) {
          case SEQUENCE:
             return new TranslatableComponent("advMode.mode.sequence");
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
index 54a16a72e9fd4f2ddb6efde34d753e18de0b1516..b5ca19a26f1827c953522c54121101c5b742f10d 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
@@ -125,7 +125,7 @@ public class StructureBlockEditScreen extends Screen {
          }
 
       }));
-      this.addRenderableWidget(CycleButton.builder((structureMode) -> new TranslatableComponent("structure_block.mode." + structureMode.getSerializedName())).withValues(DEFAULT_MODES, ALL_MODES).displayOnlyValue().withInitialValue(this.initialMode).create(this.width / 2 - 4 - 150, 185, 50, 20, new TextComponent("MODE"), (cycleButton, structureMode) -> {
+      this.addRenderableWidget(CycleButton.<StructureMode>builder((structureMode) -> new TranslatableComponent("structure_block.mode." + structureMode.getSerializedName())).withValues(DEFAULT_MODES, ALL_MODES).displayOnlyValue().withInitialValue(this.initialMode).create(this.width / 2 - 4 - 150, 185, 50, 20, new TextComponent("MODE"), (cycleButton, structureMode) -> {
          this.structure.setMode(structureMode);
          this.updateMode(structureMode);
       }));
diff --git a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
index ec179f91dbcd770351a094d440cb85894b17edc5..6dbc9798cc2d9e9c351b539034e7a5d227455fc7 100644
--- a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
@@ -219,8 +219,8 @@ public class PackSelectionScreen extends Screen {
                label86: {
                   try {
                      if (inputStream != null) {
-                        String s = pack.getId();
-                        ResourceLocation resourceLocation = new ResourceLocation("minecraft", "pack/" + Util.sanitizeName(s, ResourceLocation::validPathChar) + "/" + Hashing.sha1().hashUnencodedChars(s) + "/icon");
+                        String packId = pack.getId();
+                        ResourceLocation resourceLocation = new ResourceLocation("minecraft", "pack/" + Util.sanitizeName(packId, ResourceLocation::validPathChar) + "/" + Hashing.sha1().hashUnencodedChars(packId) + "/icon");
                         NativeImage nativeImage = NativeImage.read(inputStream);
                         textureManager.register(resourceLocation, new DynamicTexture(nativeImage));
                         var8 = resourceLocation;
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
index 100efddd0f5854454d9b251832633dd9f53427dd..70de717a7d7ffbc63315299a48fc3e757493b9d5 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
@@ -414,8 +414,10 @@ public class CreateWorldScreen extends Screen {
                stream.sorted(Comparator.reverseOrder()).forEach((path) -> {
                   try {
                      Files.delete(path);
-                  } catch (IOException var2) {
-                     LOGGER.warn("Failed to remove temporary file {}", path, var2);
+                     // MagmaCube start - decompile error
+                  } catch (IOException ex) {
+                     LOGGER.warn("Failed to remove temporary file {}", path, ex);
+                     // MagmaCube end - decompile error
                   }
 
                });
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
index a5354396e7c1f344403567662cef9382f1ddf45b..cdd3a6f7046706fbb1f5fd9e10a304c80dc58f34 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
@@ -234,7 +234,7 @@ public class EditGameRulesScreen extends Screen {
                List<FormattedCharSequence> list;
                String s3;
                if (I18n.exists(s2)) {
-                  Builder<FormattedCharSequence> builder = ImmutableList.builder().add(component2.getVisualOrderText());
+                  Builder<FormattedCharSequence> builder = ImmutableList.<FormattedCharSequence>builder().add(component2.getVisualOrderText());
                   Component component4 = new TranslatableComponent(s2);
                   EditGameRulesScreen.this.font.split(component4, 150).forEach(builder::add);
                   list = builder.add(component3.getVisualOrderText()).build();
@@ -244,12 +244,12 @@ public class EditGameRulesScreen extends Screen {
                   s3 = component3.getString();
                }
 
-               ((Map)map.computeIfAbsent(key.getCategory(), (category) -> Maps.newHashMap())).put(key, entryFactory.create(component, list, s3, value));
+               map.computeIfAbsent(key.getCategory(), (category) -> Maps.newHashMap()).put(key, entryFactory.create(component, list, s3, value));
             }
          });
          map.entrySet().stream().sorted(java.util.Map.Entry.comparingByKey()).forEach((entry) -> {
             this.addEntry(EditGameRulesScreen.this.new CategoryRuleEntry((new TranslatableComponent(((GameRules.Category)entry.getKey()).getDescriptionId())).withStyle(new ChatFormatting[]{ChatFormatting.BOLD, ChatFormatting.YELLOW})));
-            ((Map)entry.getValue()).entrySet().stream().sorted(java.util.Map.Entry.comparingByKey(Comparator.comparing(GameRules.Key::getId))).forEach((entryx) -> this.addEntry((EditGameRulesScreen.RuleEntry)entryx.getValue()));
+            entry.getValue().entrySet().stream().sorted(java.util.Map.Entry.comparingByKey(Comparator.comparing(GameRules.Key::getId))).forEach((entryx) -> this.addEntry((EditGameRulesScreen.RuleEntry)entryx.getValue()));
          });
       }
 
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
index 7a156f3c10af52056881faa00bfc0b934bf2b3a4..40fa5df6a3d035d22c3b599b623b3176c8704eae 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
@@ -275,10 +275,10 @@ public class WorldSelectionList extends ObjectSelectionList<WorldSelectionList.W
                Component component = new TranslatableComponent(s2, this.summary.getWorldVersionName(), SharedConstants.getCurrentVersion().getName());
                this.minecraft.setScreen(new BackupConfirmScreen(this.screen, (flag, flag2) -> {
                   if (flag) {
-                     String s = this.summary.getLevelId();
+                     String levelId = this.summary.getLevelId();
 
                      try {
-                        LevelStorageSource.LevelStorageAccess levelStorageAccess = this.minecraft.getLevelSource().createAccess(s);
+                        LevelStorageSource.LevelStorageAccess levelStorageAccess = this.minecraft.getLevelSource().createAccess(levelId);
 
                         try {
                            EditWorldScreen.makeBackupAndShowToast(levelStorageAccess);
@@ -298,8 +298,8 @@ public class WorldSelectionList extends ObjectSelectionList<WorldSelectionList.W
                            levelStorageAccess.close();
                         }
                      } catch (IOException var9) {
-                        SystemToast.onWorldAccessFailure(this.minecraft, s);
-                        WorldSelectionList.LOGGER.error("Failed to backup level {}", s, var9);
+                        SystemToast.onWorldAccessFailure(this.minecraft, levelId);
+                        WorldSelectionList.LOGGER.error("Failed to backup level {}", levelId, var9);
                      }
                   }
 
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index 5c27669c0f3be737e8bfe68cba6334eab3d1fae3..dfb037593bfb43631ca9e0aeecdf01bec60c7e43 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -510,7 +510,7 @@ public class ClientPacketListener implements ClientGamePacketListener {
 
    public void handleRemoveEntities(ClientboundRemoveEntitiesPacket clientboundRemoveEntitiesPacket) {
       PacketUtils.ensureRunningOnSameThread(clientboundRemoveEntitiesPacket, this, this.minecraft);
-      clientboundRemoveEntitiesPacket.getEntityIds().forEach((i) -> this.level.removeEntity(i, Entity.RemovalReason.DISCARDED));
+      clientboundRemoveEntitiesPacket.getEntityIds().forEach((java.util.function.IntConsumer) (ix) -> this.level.removeEntity(ix, Entity.RemovalReason.DISCARDED));
    }
 
    public void handleMovePlayer(ClientboundPlayerPositionPacket clientboundPlayerPositionPacket) {
@@ -1453,11 +1453,13 @@ public class ClientPacketListener implements ClientGamePacketListener {
             } else {
                this.minecraft.execute(() -> this.minecraft.setScreen(new ConfirmScreen((flag2) -> {
                      this.minecraft.setScreen((Screen)null);
-                     ServerData serverData = this.minecraft.getCurrentServer();
+                     ServerData serverDatax = this.minecraft.getCurrentServer(); // MagmaCube - decompile error
                      if (flag2) {
-                        if (serverData != null) {
-                           serverData.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
+                        // MagmaCube start - decompile error
+                        if (serverDatax != null) {
+                           serverDatax.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
                         }
+                        // MagmaCube end - decompile error
 
                         this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
                         this.downloadCallback(this.minecraft.getClientPackSource().downloadAndSelectResourcePack(s, s2, true));
@@ -1465,14 +1467,18 @@ public class ClientPacketListener implements ClientGamePacketListener {
                         this.send(ServerboundResourcePackPacket.Action.DECLINED);
                         if (flag) {
                            this.connection.disconnect(new TranslatableComponent("multiplayer.requiredTexturePrompt.disconnect"));
-                        } else if (serverData != null) {
-                           serverData.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
+                           // MagmaCube start - decompile error
+                        } else if (serverDatax != null) {
+                           serverDatax.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
+                           // MagmaCube end - decompile error
                         }
                      }
 
-                     if (serverData != null) {
-                        ServerList.saveSingleServer(serverData);
+                     // MagmaCube start - decompile error
+                     if (serverDatax != null) {
+                        ServerList.saveSingleServer(serverDatax);
                      }
+                     // MagmaCube end - decompile error
 
                   }, flag ? new TranslatableComponent("multiplayer.requiredTexturePrompt.line1") : new TranslatableComponent("multiplayer.texturePrompt.line1"), preparePackPrompt((Component)(flag ? (new TranslatableComponent("multiplayer.requiredTexturePrompt.line2")).withStyle(new ChatFormatting[]{ChatFormatting.YELLOW, ChatFormatting.BOLD}) : new TranslatableComponent("multiplayer.texturePrompt.line2")), clientboundResourcePackPacket.getPrompt()), flag ? CommonComponents.GUI_PROCEED : CommonComponents.GUI_YES, (Component)(flag ? new TranslatableComponent("menu.disconnect") : CommonComponents.GUI_NO))));
             }
diff --git a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
index 8d36697f81712fdc2b87e36abd06a15653748c02..95f80cef373a02f5f7bf03a058449708f07bfcbd 100644
--- a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
@@ -92,7 +92,7 @@ public class BlockEntityWithoutLevelRenderer implements ResourceManagerReloadLis
                } else if (compoundTag.contains("SkullOwner", 8) && !StringUtils.isBlank(compoundTag.getString("SkullOwner"))) {
                   gameProfile = new GameProfile((UUID)null, compoundTag.getString("SkullOwner"));
                   compoundTag.remove("SkullOwner");
-                  SkullBlockEntity.updateGameprofile(gameProfile, (gameProfile) -> compoundTag.put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), gameProfile)));
+                  SkullBlockEntity.updateGameprofile(gameProfile, (gameProfileIn) -> compoundTag.put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), gameProfileIn)));
                }
             }
 
diff --git a/src/main/java/net/minecraft/client/renderer/RenderType.java b/src/main/java/net/minecraft/client/renderer/RenderType.java
index 2126f7854d588d0ae7f6588dda553f3676169c9e..2d4b4d87e39cc2b88d933162158356691f2badb2 100644
--- a/src/main/java/net/minecraft/client/renderer/RenderType.java
+++ b/src/main/java/net/minecraft/client/renderer/RenderType.java
@@ -40,11 +40,11 @@ public abstract class RenderType extends RenderStateShard {
       RenderType.CompositeState compositeState = RenderType.CompositeState.builder().setShaderState(RENDERTYPE_ENTITY_CUTOUT_SHADER).setTextureState(new RenderStateShard.TextureStateShard(resourceLocation, false, false)).setTransparencyState(NO_TRANSPARENCY).setLightmapState(LIGHTMAP).setOverlayState(OVERLAY).createCompositeState(true);
       return create("entity_cutout", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 256, true, false, compositeState);
    }));
-   private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_CUTOUT_NO_CULL = Util.memoize((BiFunction)((resourceLocation, flag) -> {
+   private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_CUTOUT_NO_CULL = Util.memoize(((resourceLocation, flag) -> { // MagmaCube - decompile error
       RenderType.CompositeState compositeState = RenderType.CompositeState.builder().setShaderState(RENDERTYPE_ENTITY_CUTOUT_NO_CULL_SHADER).setTextureState(new RenderStateShard.TextureStateShard(resourceLocation, false, false)).setTransparencyState(NO_TRANSPARENCY).setCullState(NO_CULL).setLightmapState(LIGHTMAP).setOverlayState(OVERLAY).createCompositeState(flag);
       return create("entity_cutout_no_cull", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 256, true, false, compositeState);
    }));
-   private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_CUTOUT_NO_CULL_Z_OFFSET = Util.memoize((BiFunction)((resourceLocation, flag) -> {
+   private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_CUTOUT_NO_CULL_Z_OFFSET = Util.memoize(((resourceLocation, flag) -> { // MagmaCube - decompile error
       RenderType.CompositeState compositeState = RenderType.CompositeState.builder().setShaderState(RENDERTYPE_ENTITY_CUTOUT_NO_CULL_Z_OFFSET_SHADER).setTextureState(new RenderStateShard.TextureStateShard(resourceLocation, false, false)).setTransparencyState(NO_TRANSPARENCY).setCullState(NO_CULL).setLightmapState(LIGHTMAP).setOverlayState(OVERLAY).setLayeringState(VIEW_OFFSET_Z_LAYERING).createCompositeState(flag);
       return create("entity_cutout_no_cull_z_offset", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 256, true, false, compositeState);
    }));
@@ -56,7 +56,7 @@ public abstract class RenderType extends RenderStateShard {
       RenderType.CompositeState compositeState = RenderType.CompositeState.builder().setShaderState(RENDERTYPE_ENTITY_TRANSLUCENT_CULL_SHADER).setTextureState(new RenderStateShard.TextureStateShard(resourceLocation, false, false)).setTransparencyState(TRANSLUCENT_TRANSPARENCY).setLightmapState(LIGHTMAP).setOverlayState(OVERLAY).createCompositeState(true);
       return create("entity_translucent_cull", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 256, true, true, compositeState);
    }));
-   private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_TRANSLUCENT = Util.memoize((BiFunction)((resourceLocation, flag) -> {
+   private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_TRANSLUCENT = Util.memoize(((resourceLocation, flag) -> { // MagmaCube - decompile error
       RenderType.CompositeState compositeState = RenderType.CompositeState.builder().setShaderState(RENDERTYPE_ENTITY_TRANSLUCENT_SHADER).setTextureState(new RenderStateShard.TextureStateShard(resourceLocation, false, false)).setTransparencyState(TRANSLUCENT_TRANSPARENCY).setCullState(NO_CULL).setLightmapState(LIGHTMAP).setOverlayState(OVERLAY).createCompositeState(flag);
       return create("entity_translucent", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 256, true, true, compositeState);
    }));
@@ -64,7 +64,7 @@ public abstract class RenderType extends RenderStateShard {
       RenderType.CompositeState compositeState = RenderType.CompositeState.builder().setShaderState(RENDERTYPE_ENTITY_SMOOTH_CUTOUT_SHADER).setTextureState(new RenderStateShard.TextureStateShard(resourceLocation, false, false)).setCullState(NO_CULL).setLightmapState(LIGHTMAP).createCompositeState(true);
       return create("entity_smooth_cutout", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 256, compositeState);
    }));
-   private static final BiFunction<ResourceLocation, Boolean, RenderType> BEACON_BEAM = Util.memoize((BiFunction)((resourceLocation, flag) -> {
+   private static final BiFunction<ResourceLocation, Boolean, RenderType> BEACON_BEAM = Util.memoize(((resourceLocation, flag) -> { // MagmaCube - decompile error
       RenderType.CompositeState compositeState = RenderType.CompositeState.builder().setShaderState(RENDERTYPE_BEACON_BEAM_SHADER).setTextureState(new RenderStateShard.TextureStateShard(resourceLocation, false, false)).setTransparencyState(flag ? TRANSLUCENT_TRANSPARENCY : NO_TRANSPARENCY).setWriteMaskState(flag ? COLOR_WRITE : COLOR_DEPTH_WRITE).createCompositeState(false);
       return create("beacon_beam", DefaultVertexFormat.BLOCK, VertexFormat.Mode.QUADS, 256, false, true, compositeState);
    }));
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java b/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
index d24c932832394c5bf9506fc43ebe3ca0e2597720..5bcc83513fdab0dd9099371e4132b964a6d6e2da 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
@@ -41,7 +41,7 @@ public class KeyValueCondition implements Condition {
                predicate = this.getBlockStatePredicate(stateDefinition, property, s);
             } else {
                List<Predicate<BlockState>> list2 = list.stream().map((sx) -> this.getBlockStatePredicate(stateDefinition, property, sx)).collect(Collectors.toList());
-               predicate = (blockState) -> list2.stream().anyMatch((predicate) -> predicate.test(blockState));
+               predicate = (blockState) -> list2.stream().anyMatch((predicateIn) -> predicateIn.test(blockState));
             }
 
             return flag ? predicate.negate() : predicate;
diff --git a/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
index 523e831ea3c33a31df5024b8ae76533b290944ec..a9cd65cfa181c0504227526a6c0a64dcc37fdb61 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
@@ -112,17 +112,17 @@ public class ChunkDebugRenderer implements DebugRenderer.SimpleDebugRenderer {
             if (serverLevel == null) {
                return ImmutableMap.of();
             } else {
-               Builder<ChunkPos, String> builder = ImmutableMap.builder();
+               Builder<ChunkPos, String> builders = ImmutableMap.builder(); // MagmaCube - decompile error
                ServerChunkCache serverChunkCache = serverLevel.getChunkSource();
 
                for(int i3 = i - 12; i3 <= i + 12; ++i3) {
                   for(int i4 = i2 - 12; i4 <= i2 + 12; ++i4) {
                      ChunkPos chunkPos = new ChunkPos(i3, i4);
-                     builder.put(chunkPos, "Server: " + serverChunkCache.getChunkDebugData(chunkPos));
+                     builders.put(chunkPos, "Server: " + serverChunkCache.getChunkDebugData(chunkPos)); // MagmaCube - decompile error
                   }
                }
 
-               return builder.build();
+               return builders.build(); // MagmaCube - decompile error
             }
          });
       }
diff --git a/src/main/java/net/minecraft/client/renderer/debug/CollisionBoxRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/CollisionBoxRenderer.java
index dff0a8303f417dbe385963d4b1f8a215170cd4d8..065f5dd063ffd917db6c3259f2ddd3dd8d29e979 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/CollisionBoxRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/CollisionBoxRenderer.java
@@ -27,7 +27,7 @@ public class CollisionBoxRenderer implements DebugRenderer.SimpleDebugRenderer {
       if (d4 - this.lastUpdateTime > 1.0E8D) {
          this.lastUpdateTime = d4;
          Entity entity = this.minecraft.gameRenderer.getMainCamera().getEntity();
-         this.shapes = entity.level.getCollisions(entity, entity.getBoundingBox().inflate(6.0D), (entity) -> true).collect(Collectors.toList());
+         this.shapes = entity.level.getCollisions(entity, entity.getBoundingBox().inflate(6.0D), (entityIn) -> true).collect(Collectors.toList());
       }
 
       VertexConsumer vertexConsumer = multiBufferSource.getBuffer(RenderType.lines());
diff --git a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
index 2b25d23da938ac9118b9d437d76cda3c0147d73c..ef159d7fa3a0fed354d80bb484066b4981caf433 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
@@ -41,11 +41,13 @@ public class GoalSelectorDebugRenderer implements DebugRenderer.SimpleDebugRende
          for(int i = 0; i < list.size(); ++i) {
             GoalSelectorDebugRenderer.DebugGoal debugGoal = (GoalSelectorDebugRenderer.DebugGoal)list.get(i);
             if (blockPos.closerThan(debugGoal.pos, 160.0D)) {
-               double d = (double)debugGoal.pos.getX() + 0.5D;
-               double d2 = (double)debugGoal.pos.getY() + 2.0D + (double)i * 0.25D;
-               double d3 = (double)debugGoal.pos.getZ() + 0.5D;
+               // MagmaCube start - decompile error
+               double dx = (double)debugGoal.pos.getX() + 0.5D;
+               double d2x = (double)debugGoal.pos.getY() + 2.0D + (double)i * 0.25D;
+               double d3x = (double)debugGoal.pos.getZ() + 0.5D;
+               // MagmaCube end - decompile error
                int i2 = debugGoal.isRunning ? -16711936 : -3355444;
-               DebugRenderer.renderFloatingText(debugGoal.name, d, d2, d3, i2);
+               DebugRenderer.renderFloatingText(debugGoal.name, dx, d2x, d3x, i2); // MagmaCube - decompile error
             }
          }
 
diff --git a/src/main/java/net/minecraft/client/renderer/debug/StructureRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/StructureRenderer.java
index 8e775b266a19b3d52a150bab5330e47caa46db7b..c9d62c872f32e69ad9db903e3980147dd09fad31 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/StructureRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/StructureRenderer.java
@@ -34,7 +34,7 @@ public class StructureRenderer implements DebugRenderer.SimpleDebugRenderer {
       BlockPos blockPos = new BlockPos(camera.getPosition().x, 0.0D, camera.getPosition().z);
       VertexConsumer vertexConsumer = multiBufferSource.getBuffer(RenderType.lines());
       if (this.postMainBoxes.containsKey(dimensionType)) {
-         for(BoundingBox boundingBox : ((Map)this.postMainBoxes.get(dimensionType)).values()) {
+         for(BoundingBox boundingBox : (this.postMainBoxes.get(dimensionType)).values()) { // MagmaCube - decompile error
             if (blockPos.closerThan(boundingBox.getCenter(), 500.0D)) {
                LevelRenderer.renderLineBox(poseStack, vertexConsumer, (double)boundingBox.minX() - d, (double)boundingBox.minY() - d2, (double)boundingBox.minZ() - d3, (double)(boundingBox.maxX() + 1) - d, (double)(boundingBox.maxY() + 1) - d2, (double)(boundingBox.maxZ() + 1) - d3, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
             }
@@ -42,7 +42,7 @@ public class StructureRenderer implements DebugRenderer.SimpleDebugRenderer {
       }
 
       if (this.postPiecesBoxes.containsKey(dimensionType)) {
-         for(Entry<String, BoundingBox> entry : ((Map)this.postPiecesBoxes.get(dimensionType)).entrySet()) {
+         for(Entry<String, BoundingBox> entry : (this.postPiecesBoxes.get(dimensionType)).entrySet()) { // MagmaCube - decompile error
             String s = (String)entry.getKey();
             BoundingBox boundingBox2 = (BoundingBox)entry.getValue();
             Boolean flag = (Boolean)((Map)this.startPiecesMap.get(dimensionType)).get(s);
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
index 36c1f09e5d368faffb3ac732aef0d3f356ae8389..5c840c9270ad2bcaa707406dcc0c352d584a958e 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
@@ -79,7 +79,7 @@ public class EntityRenderDispatcher implements ResourceManagerReloadListener {
       if (entity instanceof AbstractClientPlayer) {
          String s = ((AbstractClientPlayer)entity).getModelName();
          EntityRenderer<? extends Player> entityRenderer = (EntityRenderer)this.playerRenderers.get(s);
-         return entityRenderer != null ? entityRenderer : (EntityRenderer)this.playerRenderers.get("default");
+         return entityRenderer != null ? (EntityRenderer) entityRenderer : (EntityRenderer)this.playerRenderers.get("default"); // MagmaCube - decompile error
       } else {
          return (EntityRenderer)this.renderers.get(entity.getType());
       }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
index 929ed058326b0c8bab0fc9c33b814ce88f973659..a989cd079d8b047d7914dbc1c4dc9d6c8f005a85 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
@@ -19,7 +19,7 @@ public class EntityRenderers {
    private static final Logger LOGGER = LogManager.getLogger();
    public static final String DEFAULT_PLAYER_MODEL = "default";
    private static final Map<EntityType<?>, EntityRendererProvider<?>> PROVIDERS = Maps.newHashMap();
-   private static final Map<String, EntityRendererProvider<AbstractClientPlayer>> PLAYER_PROVIDERS = ImmutableMap.of("default", (EntityRendererProvider<>)(context) -> new PlayerRenderer(context, false), "slim", (EntityRendererProvider<>)(context) -> new PlayerRenderer(context, true));
+   private static final Map<String, EntityRendererProvider<AbstractClientPlayer>> PLAYER_PROVIDERS = ImmutableMap.of("default", (EntityRendererProvider)(context) -> new PlayerRenderer(context, false), "slim", (EntityRendererProvider)(context) -> new PlayerRenderer(context, true)); // MagmaCube - decompile error
 
    private static <T extends Entity> void register(EntityType<? extends T> entityType, EntityRendererProvider<T> entityRendererProvider) {
       PROVIDERS.put(entityType, entityRendererProvider);
diff --git a/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java b/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
index e9487dbbe33be76197e20fdd2249ae22951e4867..fcf7d8ad1b9c1b3f97325b34bff531d22eef983d 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
@@ -108,10 +108,12 @@ public class HttpTexture extends SimpleTexture {
                      }
 
                      Minecraft.getInstance().execute(() -> {
-                        NativeImage nativeImage = this.load(inputStream);
-                        if (nativeImage != null) {
-                           this.loadCallback(nativeImage);
+                        // MagmaCube start - decompile error
+                        NativeImage nativeImage1 = this.load(inputStream);
+                        if (nativeImage1 != null) {
+                           this.loadCallback(nativeImage1);
                         }
+                        // MagmaCube end - decompile error
 
                      });
                      return;
diff --git a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
index 581f33ecf5192735bfa29a8ceee80964b6e54d95..a7123ba58afe0d3ca149ec3c560ca03394f6e981 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
@@ -11,7 +11,8 @@ import java.util.function.Consumer;
 import net.minecraft.util.Mth;
 
 public class Stitcher {
-   private static final Comparator<Stitcher.Holder> HOLDER_COMPARATOR = Comparator.comparing((holder) -> -holder.height).thenComparing((holder) -> -holder.width).thenComparing((holder) -> holder.spriteInfo.name());
+   // MagmaCube - decompile error
+   private static final Comparator<Stitcher.Holder> HOLDER_COMPARATOR = Comparator.<Holder, Integer>comparing((holder) -> -holder.height).thenComparing((holder) -> -holder.width).thenComparing((holder) -> holder.spriteInfo.name());
    private final int mipLevel;
    private final Set<Stitcher.Holder> texturesToBeStitched = Sets.newHashSetWithExpectedSize(256);
    private final List<Stitcher.Region> storage = Lists.newArrayListWithCapacity(256);
diff --git a/src/main/java/net/minecraft/client/resources/ClientPackSource.java b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
index 31f07ebe0a7489959489c98b7eb7650ee105f01e..8b2c20f798c6d7209284b0a07966dbc7907a7036 100644
--- a/src/main/java/net/minecraft/client/resources/ClientPackSource.java
+++ b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
@@ -143,8 +143,10 @@ public class ClientPackSource implements RepositorySource {
                LOGGER.warn("Pack application failed: {}, deleting file {}", throwable.getMessage(), file);
                deleteQuietly(file);
                Minecraft minecraft = Minecraft.getInstance();
-               minecraft.execute(() -> minecraft.setScreen(new ConfirmScreen((flag) -> {
-                     if (flag) {
+               // MagmaCube start - decompile error
+               minecraft.execute(() -> minecraft.setScreen(new ConfirmScreen((flagx) -> {
+                     if (flagx) {
+                        // MagmaCube end - decompile error
                         minecraft.setScreen((Screen)null);
                      } else {
                         ClientPacketListener clientPacketListener = minecraft.getConnection();
diff --git a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
index 9aa0666475ab75509068b0deeacd281d7a373902..39cb5afa601692cf8851583933b8f3ed24eaf0f1 100644
--- a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
+++ b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
@@ -326,7 +326,7 @@ public class ModelBakery {
                      try {
                         InputStream inputStream = resource.getInputStream();
 
-                        Pair var3;
+                        Pair<String, BlockModelDefinition> var3;
                         try {
                            var3 = Pair.of(resource.getSourceName(), BlockModelDefinition.fromStream(this.context, new InputStreamReader(inputStream, StandardCharsets.UTF_8)));
                         } catch (Throwable var6) {
@@ -369,10 +369,10 @@ public class ModelBakery {
                   blockModelDefinition.getVariants().forEach((s, multiVariant) -> {
                      try {
                         immutableList.stream().filter(predicate(stateDefinition, s)).forEach((blockState) -> {
-                           Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair2 = map4.put(blockState, Pair.of(multiVariant, () -> ModelBakery.ModelGroupKey.create(blockState, multiVariant, list)));
-                           if (pair2 != null && pair2.getFirst() != multiPart) {
+                           Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair2In = map4.put(blockState, Pair.of(multiVariant, () -> ModelBakery.ModelGroupKey.create(blockState, multiVariant, list)));
+                           if (pair2In != null && pair2In.getFirst() != multiPart) {
                               map4.put(blockState, pair);
-                              throw new RuntimeException("Overlapping definition with: " + (String)((Entry)blockModelDefinition.getVariants().entrySet().stream().filter((entry) -> entry.getValue() == pair2.getFirst()).findFirst().get()).getKey());
+                              throw new RuntimeException("Overlapping definition with: " + (String)((Entry)blockModelDefinition.getVariants().entrySet().stream().filter((entry) -> entry.getValue() == pair2In.getFirst()).findFirst().get()).getKey());
                            }
                         });
                      } catch (Exception var12) {
@@ -388,7 +388,7 @@ public class ModelBakery {
             } catch (Exception var27) {
                throw new ModelBakery.BlockStateDefinitionException(String.format("Exception loading blockstate definition: '%s': %s", resourceLocation4, var27));
             } finally {
-               HashMap map6 = Maps.newHashMap();
+               HashMap<ModelGroupKey, Set<BlockState>> map6 = Maps.newHashMap();
                map.forEach((modelResourceLocationx, blockState) -> {
                   Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair2 = map2.get(blockState);
                   if (pair2 == null) {
@@ -399,8 +399,8 @@ public class ModelBakery {
                   this.cacheAndQueueDependencies(modelResourceLocationx, (UnbakedModel)pair2.getFirst());
 
                   try {
-                     ModelBakery.ModelGroupKey modelGroupKey = (ModelBakery.ModelGroupKey)(pair2.getSecond()).get();
-                     (map6.computeIfAbsent(modelGroupKey, (modelGroupKey) -> Sets.newIdentityHashSet())).add(blockState);
+                     ModelBakery.ModelGroupKey modelGroupKeyIn = (ModelBakery.ModelGroupKey)(pair2.getSecond()).get();
+                     (map6.computeIfAbsent(modelGroupKeyIn, (modelGroupKeyInIn) -> Sets.newIdentityHashSet())).add(blockState);
                   } catch (Exception var9) {
                      LOGGER.warn("Exception evaluating model definition: '{}'", modelResourceLocationx, var9);
                   }
diff --git a/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java b/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java
index ff62df207a4b43e03559d294a302b50e6906d8cb..a8d3626c180f0f5a10401d0858f529647169445e 100644
--- a/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java
+++ b/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java
@@ -49,7 +49,7 @@ public class ReloadableIdSearchTree<T> implements MutableSearchTree<T> {
    }
 
    protected void index(T object) {
-      ((Stream)this.idGetter.apply(object)).forEach((resourceLocation) -> {
+      (this.idGetter.apply(object)).forEach((resourceLocation) -> { // MagmaCube - decompile error
          this.namespaceTree.add(object, resourceLocation.getNamespace().toLowerCase(Locale.ROOT));
          this.pathTree.add(object, resourceLocation.getPath().toLowerCase(Locale.ROOT));
       });
@@ -67,7 +67,7 @@ public class ReloadableIdSearchTree<T> implements MutableSearchTree<T> {
          List<T> list = this.namespaceTree.search(s.substring(0, i).trim());
          String s2 = s.substring(i + 1).trim();
          List<T> list2 = this.pathTree.search(s2);
-         return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator(list.iterator(), list2.iterator(), this::comparePosition));
+         return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator<>(list.iterator(), list2.iterator(), this::comparePosition)); // MagmaCube - decompile error
       }
    }
 
diff --git a/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java b/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java
index 39490f5d1ee4048ca44c1759f141cb274d0419c9..efee6bd626ee10014a108f10c7e501efe16b9bc6 100644
--- a/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java
+++ b/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java
@@ -29,7 +29,7 @@ public class ReloadableSearchTree<T> extends ReloadableIdSearchTree<T> {
 
    protected void index(T object) {
       super.index(object);
-      ((Stream)this.filler.apply(object)).forEach((s) -> this.tree.add(object, s.toLowerCase(Locale.ROOT)));
+      (this.filler.apply(object)).forEach((s) -> this.tree.add(object, s.toLowerCase(Locale.ROOT))); // MagmaCube - decompile error
    }
 
    public List<T> search(String s) {
@@ -41,7 +41,7 @@ public class ReloadableSearchTree<T> extends ReloadableIdSearchTree<T> {
          String s2 = s.substring(i + 1).trim();
          List<T> list2 = this.pathTree.search(s2);
          List<T> list3 = this.tree.search(s2);
-         return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator(list.iterator(), new ReloadableSearchTree.MergingUniqueIterator<T>(list2.iterator(), list3.iterator(), this::comparePosition), this::comparePosition));
+         return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator<>(list.iterator(), new ReloadableSearchTree.MergingUniqueIterator<T>(list2.iterator(), list3.iterator(), this::comparePosition), this::comparePosition)); // MagmaCube - decompile error
       }
    }
 
diff --git a/src/main/java/net/minecraft/client/sounds/SoundEngine.java b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
index 0d46e6cd262f6d536e0101c4b510a7a4f87e528b..a4bca0a74480875b8ee154e00a9a395169638528 100644
--- a/src/main/java/net/minecraft/client/sounds/SoundEngine.java
+++ b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
@@ -108,12 +108,12 @@ public class SoundEngine {
             this.listener.setGain(f);
          } else {
             this.instanceToChannel.forEach((soundInstance, channelHandle) -> {
-               float f = this.calculateVolume(soundInstance);
+               float f1 = this.calculateVolume(soundInstance); // MagmaCube - decompile error
                channelHandle.execute((channel) -> {
-                  if (f <= 0.0F) {
+                  if (f1 <= 0.0F) { // MagmaCube - decompile error
                      channel.stop();
                   } else {
-                     channel.setVolume(f);
+                     channel.setVolume(f1); // MagmaCube - decompile error
                   }
 
                });
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 9079507326cad93894a205481132ec243b75d2db..5a4dd71694333cf4e15a1c234b50a2c76fe43c65 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -267,7 +267,7 @@ public class Commands {
    private void fillUsableCommands(CommandNode<CommandSourceStack> commandNode, CommandNode<SharedSuggestionProvider> commandNode2, CommandSourceStack commandSourceStack, Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map) {
       for(CommandNode<CommandSourceStack> commandNode3 : commandNode.getChildren()) {
          if (commandNode3.canUse(commandSourceStack)) {
-            ArgumentBuilder<SharedSuggestionProvider, ?> argumentBuilder = commandNode3.createBuilder();
+            ArgumentBuilder<SharedSuggestionProvider, ?> argumentBuilder = (ArgumentBuilder) commandNode3.createBuilder(); // MagmaCube - type
             argumentBuilder.requires((sharedSuggestionProvider) -> true);
             if (argumentBuilder.getCommand() != null) {
                argumentBuilder.executes((commandContext) -> 0);
@@ -284,7 +284,7 @@ public class Commands {
                argumentBuilder.redirect((CommandNode)map.get(argumentBuilder.getRedirect()));
             }
 
-            CommandNode<SharedSuggestionProvider> commandNode4 = argumentBuilder.build();
+            CommandNode<SharedSuggestionProvider> commandNode4 = (CommandNode) argumentBuilder.build(); // MagmaCube - decompile error
             map.put(commandNode3, commandNode4);
             commandNode2.addChild(commandNode4);
             if (!commandNode3.getChildren().isEmpty()) {
diff --git a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
index 306c9399682328192b29e82240d7d5c0e114bc36..eaf4cf66c7e7ddc0b26e4542078d039b70b42706 100644
--- a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
@@ -60,7 +60,7 @@ public class ObjectiveArgument implements ArgumentType<String> {
          return SharedSuggestionProvider.suggest(((CommandSourceStack)commandContext.getSource()).getServer().getScoreboard().getObjectiveNames(), suggestionsBuilder);
       } else if (commandContext.getSource() instanceof SharedSuggestionProvider) {
          SharedSuggestionProvider sharedSuggestionProvider = (SharedSuggestionProvider)commandContext.getSource();
-         return sharedSuggestionProvider.customSuggestion(commandContext, suggestionsBuilder);
+         return sharedSuggestionProvider.customSuggestion((CommandContext<SharedSuggestionProvider>) commandContext, suggestionsBuilder); // MagmaCube - decompile error
       } else {
          return Suggestions.empty();
       }
diff --git a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
index c317020443e2eca9270c452d0b4f5b2b6fde6e08..a0fe74f0ad8292e584246896d48dce952d311b46 100644
--- a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
@@ -52,7 +52,7 @@ public class OperationArgument implements ArgumentType<OperationArgument.Operati
    }
 
    private static OperationArgument.Operation getOperation(String s) throws CommandSyntaxException {
-      return (OperationArgument.Operation)(s.equals("><") ? (score, score2) -> {
+      return (s.equals("><") ? (score, score2) -> { // MagmaCube - decompile error
          int i = score.getScore();
          score.setScore(score2.getScore());
          score2.setScore(i);
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
index 9f1cbf3c3cc1289a11915f42031873f8d8761ec9..df38ed3689ebd7dd9e12f0afafc0212b11e08cfa 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
@@ -204,7 +204,7 @@ public class BlockStateParser {
    private static <T extends Comparable<T>> SuggestionsBuilder addSuggestions(SuggestionsBuilder suggestionsBuilder, Property<T> property) {
       for(T comparable : property.getPossibleValues()) {
          if (comparable instanceof Integer) {
-            suggestionsBuilder.suggest(comparable);
+            suggestionsBuilder.suggest((Integer) comparable);
          } else {
             suggestionsBuilder.suggest(property.getName(comparable));
          }
@@ -444,8 +444,8 @@ public class BlockStateParser {
    private <T extends Comparable<T>> void setValue(Property<T> property, String s, int i) throws CommandSyntaxException {
       Optional<T> optional = property.getValue(s);
       if (optional.isPresent()) {
-         this.state = this.state.setValue(property, (Comparable)optional.get());
-         this.properties.put(property, (Comparable)optional.get());
+         this.state = this.state.setValue(property, optional.get());
+         this.properties.put(property, optional.get());
       } else {
          this.reader.setCursor(i);
          throw ERROR_INVALID_VALUE.createWithContext(this.reader, this.id.toString(), property.getName(), s);
diff --git a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
index 98e19d7e069195e03e5e4a385f8891808d59e9e6..b3c2b2c65bfc874909dd7f4633ac10afd94f0f16 100644
--- a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
+++ b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
@@ -136,7 +136,7 @@ public class ArgumentTypes {
    }
 
    public static <T extends ArgumentType<?>> void serialize(FriendlyByteBuf friendlyByteBuf, T argumentType) {
-      ArgumentTypes.Entry<T> entry = get(argumentType);
+      ArgumentTypes.Entry<T> entry = (Entry<T>) get(argumentType); // MagmaCube - decompile error
       if (entry == null) {
          LOGGER.error("Could not serialize {} ({}) - will not be sent to client!", argumentType, argumentType.getClass());
          friendlyByteBuf.writeResourceLocation(new ResourceLocation(""));
@@ -159,7 +159,7 @@ public class ArgumentTypes {
    }
 
    private static <T extends ArgumentType<?>> void serializeToJson(JsonObject jsonObject, T argumentType) {
-      ArgumentTypes.Entry<T> entry = get(argumentType);
+      ArgumentTypes.Entry<T> entry = (Entry<T>) get(argumentType); // MagmaCube - decompile error
       if (entry == null) {
          LOGGER.error("Could not serialize argument {} ({})!", argumentType, argumentType.getClass());
          jsonObject.addProperty("type", "unknown");
diff --git a/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java b/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
index 6e9bc8a6228c64451f80668b779614aaf1443f62..f32dee406b42a55178bbc05fcfe2eefa9dc71520 100644
--- a/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
+++ b/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
@@ -30,7 +30,7 @@ public class SuggestionProviders {
          throw new IllegalArgumentException("A command suggestion provider is already registered with the name " + resourceLocation);
       } else {
          PROVIDERS_BY_NAME.put(resourceLocation, suggestionProvider);
-         return new SuggestionProviders.Wrapper(resourceLocation, suggestionProvider);
+         return (SuggestionProvider<S>) new Wrapper(resourceLocation, suggestionProvider); // MagmaCube - decompile error
       }
    }
 
diff --git a/src/main/java/net/minecraft/core/BlockPos.java b/src/main/java/net/minecraft/core/BlockPos.java
index fb589b6bc556ebb46dab3785cfe681d88231745a..897ac4dc8d24e34da810a552a6303010b4ab6d02 100644
--- a/src/main/java/net/minecraft/core/BlockPos.java
+++ b/src/main/java/net/minecraft/core/BlockPos.java
@@ -276,13 +276,15 @@ public class BlockPos extends Vec3i {
                         this.y = -this.maxY;
                      }
 
-                     int i = this.x;
-                     int i2 = this.y;
-                     int i3 = this.currentDepth - Math.abs(i) - Math.abs(i2);
-                     if (i3 <= i3) {
-                        this.zMirror = i3 != 0;
-                        blockPos = this.cursor.set(i5 + i, i6 + i2, i7 + i3);
+                     // MagmaCube start - decompile error
+                     int ix = this.x;
+                     int i2x = this.y;
+                     int i3x = this.currentDepth - Math.abs(ix) - Math.abs(i2x);
+                     if (i3x <= i3) {
+                        this.zMirror = i3x != 0;
+                        blockPos = this.cursor.set(i5 + ix, i6 + i2x, i7 + i3x);
                      }
+                     // MagmaCube end - decompile error
                   }
 
                   return blockPos;
@@ -332,12 +334,14 @@ public class BlockPos extends Vec3i {
                if (this.index == i10) {
                   return (BlockPos)this.endOfData();
                } else {
-                  int i = this.index % i7;
-                  int i2 = this.index / i7;
-                  int i3 = i2 % i8;
-                  int i4 = i2 / i8;
+                  // MagmaCube start - decompile error
+                  int iIn = this.index % i7;
+                  int i2In = this.index / i7;
+                  int i3In = i2In % i8;
+                  int i4In = i2In / i8;
                   ++this.index;
-                  return this.cursor.set(i + i, i2 + i3, i3 + i4);
+                  return this.cursor.set(i + iIn, i2 + i3In, i3 + i4In);
+                  // MagmaCube end - decompile error
                }
             }
          };
diff --git a/src/main/java/net/minecraft/core/NonNullList.java b/src/main/java/net/minecraft/core/NonNullList.java
index 8fb0b280d5d8197753908eec71b517a07306e297..eaa26f2135e645fc64c768411e0b4fc8ecc2d728 100644
--- a/src/main/java/net/minecraft/core/NonNullList.java
+++ b/src/main/java/net/minecraft/core/NonNullList.java
@@ -25,7 +25,7 @@ public class NonNullList<E> extends AbstractList<E> {
       Validate.notNull(object);
       Object[] objects = new Object[i];
       Arrays.fill(objects, object);
-      return new NonNullList<>(Arrays.asList(objects), object);
+      return new NonNullList(Arrays.asList(objects), object); // MagmaCube - decompile error
    }
 
    @SafeVarargs
diff --git a/src/main/java/net/minecraft/core/Registry.java b/src/main/java/net/minecraft/core/Registry.java
index 4948976280715cb76e79b2c0a662aecd0689de15..07945b2e5b16f30ca5fbfb838afc76ae0f58f42f 100644
--- a/src/main/java/net/minecraft/core/Registry.java
+++ b/src/main/java/net/minecraft/core/Registry.java
@@ -270,8 +270,8 @@ public abstract class Registry<T> implements Codec<T>, Keyable, IdMap<T> {
    private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> resourceKey, R writableRegistry, Supplier<T> supplier, Lifecycle lifecycle) {
       ResourceLocation resourceLocation = resourceKey.location();
       LOADERS.put(resourceLocation, supplier);
-      WritableRegistry<R> writableRegistry2 = WRITABLE_REGISTRY;
-      return writableRegistry2.register(resourceKey, writableRegistry, lifecycle);
+      WritableRegistry<R> writableRegistry2 = (WritableRegistry<R>) WRITABLE_REGISTRY; // MagmaCube - decompile error
+      return (R) writableRegistry2.register((ResourceKey) resourceKey, writableRegistry, lifecycle); // MagmaCube - decompile error
    }
 
    protected Registry(ResourceKey<? extends Registry<T>> resourceKey, Lifecycle lifecycle) {
@@ -289,13 +289,15 @@ public abstract class Registry<T> implements Codec<T>, Keyable, IdMap<T> {
    }
 
    public <U> DataResult<Pair<T, U>> decode(DynamicOps<U> dynamicOps, U object) {
+      // MagmaCube start - decompile error
       return dynamicOps.compressMaps() ? dynamicOps.getNumberValue(object).flatMap((number) -> {
-         T object = this.byId(number.intValue());
-         return object == null ? DataResult.error("Unknown registry id: " + number) : DataResult.success(object, this.lifecycle(object));
+         T o = this.byId(number.intValue());
+         return o == null ? DataResult.error("Unknown registry id: " + number) : DataResult.success(o, this.lifecycle(o));
       }).map((objectx) -> Pair.of(objectx, dynamicOps.empty())) : ResourceLocation.CODEC.decode(dynamicOps, object).flatMap((pair) -> {
-         T object = this.get((ResourceLocation)pair.getFirst());
-         return object == null ? DataResult.error("Unknown registry key: " + pair.getFirst()) : DataResult.success(Pair.of(object, pair.getSecond()), this.lifecycle(object));
+         T o = this.get((ResourceLocation)pair.getFirst());
+         return o == null ? DataResult.error("Unknown registry key: " + pair.getFirst()) : DataResult.success(Pair.of(o, pair.getSecond()), this.lifecycle(o));
       });
+      // MagmaCube end - decompile error
    }
 
    public <U> DataResult<U> encode(T object, DynamicOps<U> dynamicOps, U object2) {
@@ -317,6 +319,7 @@ public abstract class Registry<T> implements Codec<T>, Keyable, IdMap<T> {
    public abstract Optional<ResourceKey<T>> getResourceKey(T var1);
 
    public abstract int getId(@Nullable T var1);
+   public int getIdObject(@Nullable Object var1) { return getId((T) var1); } // MagmaCube - workaround
 
    @Nullable
    public abstract T get(@Nullable ResourceKey<T> var1);
@@ -365,11 +368,11 @@ public abstract class Registry<T> implements Codec<T>, Keyable, IdMap<T> {
    }
 
    public static <V, T extends V> T register(Registry<V> registry, ResourceLocation resourceLocation, T object) {
-      return ((WritableRegistry)registry).register(ResourceKey.create(registry.key, resourceLocation), object, Lifecycle.stable());
+      return ((WritableRegistry<V>)registry).register(ResourceKey.create(registry.key, resourceLocation), object, Lifecycle.stable()); // MagmaCube - decompile error
    }
 
    public static <V, T extends V> T registerMapping(Registry<V> registry, int i, String s, T object) {
-      return ((WritableRegistry)registry).registerMapping(i, ResourceKey.create(registry.key, new ResourceLocation(s)), object, Lifecycle.stable());
+      return ((WritableRegistry<V>)registry).registerMapping(i, ResourceKey.create(registry.key, new ResourceLocation(s)), object, Lifecycle.stable()); // MagmaCube - decompile error
    }
 
    static {
diff --git a/src/main/java/net/minecraft/core/RegistryAccess.java b/src/main/java/net/minecraft/core/RegistryAccess.java
index 055a69b1dc659964424a27c6cce369dc1dce2ac4..122ba65568fca09852abcbd26f618d4a28bc56a1 100644
--- a/src/main/java/net/minecraft/core/RegistryAccess.java
+++ b/src/main/java/net/minecraft/core/RegistryAccess.java
@@ -61,7 +61,7 @@ public abstract class RegistryAccess {
 
    public <E> Optional<? extends Registry<E>> registry(ResourceKey<? extends Registry<? extends E>> resourceKey) {
       Optional<? extends Registry<E>> optional = this.ownedRegistry(resourceKey);
-      return optional.isPresent() ? optional : Registry.REGISTRY.getOptional(resourceKey.location());
+      return optional.isPresent() ? optional : ((Registry<? extends Registry<E>>) Registry.REGISTRY).getOptional(resourceKey.location());
    }
 
    public <E> Registry<E> registryOrThrow(ResourceKey<? extends Registry<? extends E>> resourceKey) {
@@ -107,7 +107,7 @@ public abstract class RegistryAccess {
    }
 
    private static <R extends Registry<?>> void copyBuiltin(RegistryAccess.RegistryHolder registryHolder, ResourceKey<R> resourceKey) {
-      Registry<R> registry = BuiltinRegistries.REGISTRY;
+      Registry<R> registry = (Registry<R>) BuiltinRegistries.REGISTRY;
       Registry<?> registry2 = registry.getOrThrow(resourceKey);
       copy(registryHolder, registry2);
    }
@@ -174,7 +174,7 @@ public abstract class RegistryAccess {
 
       private static <E> Codec<RegistryAccess.RegistryHolder> makeNetworkCodec() {
          Codec<ResourceKey<? extends Registry<E>>> codec = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location);
-         Codec<MappedRegistry<E>> codec2 = codec.partialDispatch("type", (mappedRegistry) -> DataResult.success(mappedRegistry.key()), (resourceKey) -> getNetworkCodec(resourceKey).map((codec) -> MappedRegistry.networkCodec(resourceKey, Lifecycle.experimental(), codec)));
+         Codec<MappedRegistry<E>> codec2 = codec.partialDispatch("type", (mappedRegistry) -> DataResult.success(mappedRegistry.key()), (resourceKey) -> getNetworkCodec(resourceKey).map((codecx) -> MappedRegistry.networkCodec(resourceKey, Lifecycle.experimental(), codecx)));
          UnboundedMapCodec<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> unboundedMapCodec = Codec.unboundedMap(codec, codec2);
          return captureMap(unboundedMapCodec);
       }
@@ -184,19 +184,19 @@ public abstract class RegistryAccess {
       }
 
       private static <E> DataResult<? extends Codec<E>> getNetworkCodec(ResourceKey<? extends Registry<E>> resourceKey) {
-         return Optional.ofNullable((RegistryAccess.RegistryData)RegistryAccess.REGISTRIES.get(resourceKey)).map((registryData) -> registryData.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown or not serializable registry: " + resourceKey));
+         return (DataResult) Optional.ofNullable(RegistryAccess.REGISTRIES.get(resourceKey)).map((registryData) -> registryData.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown or not serializable registry: " + resourceKey));
       }
 
       public RegistryHolder() {
-         this((Map)RegistryAccess.REGISTRIES.keySet().stream().collect(Collectors.toMap(Function.identity(), RegistryAccess.RegistryHolder::createRegistry)));
+         this(RegistryAccess.REGISTRIES.keySet().stream().collect(Collectors.toMap(Function.identity(), RegistryAccess.RegistryHolder::createRegistry)));
       }
 
       private RegistryHolder(Map<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> map) {
          this.registries = map;
       }
 
-      private static <E> MappedRegistry<?> createRegistry(ResourceKey<? extends Registry<?>> resourceKey) {
-         return new MappedRegistry<>(resourceKey, Lifecycle.stable());
+      private static <E> MappedRegistry<E> createRegistry(ResourceKey<? extends Registry<?>> resourceKey) {
+         return new MappedRegistry<>((ResourceKey<? extends Registry<E>>) resourceKey, Lifecycle.stable());
       }
 
       public <E> Optional<WritableRegistry<E>> ownedRegistry(ResourceKey<? extends Registry<? extends E>> resourceKey) {
diff --git a/src/main/java/net/minecraft/core/particles/ParticleTypes.java b/src/main/java/net/minecraft/core/particles/ParticleTypes.java
index 19582b04627d3166d5276b8aa9612e15a8d300cd..0a7f94622519b0ea6a0b22bac1aac679655f5f0a 100644
--- a/src/main/java/net/minecraft/core/particles/ParticleTypes.java
+++ b/src/main/java/net/minecraft/core/particles/ParticleTypes.java
@@ -20,8 +20,8 @@ public class ParticleTypes {
    public static final SimpleParticleType LANDING_LAVA = register("landing_lava", false);
    public static final SimpleParticleType DRIPPING_WATER = register("dripping_water", false);
    public static final SimpleParticleType FALLING_WATER = register("falling_water", false);
-   public static final ParticleType<DustParticleOptions> DUST;
-   public static final ParticleType<DustColorTransitionOptions> DUST_COLOR_TRANSITION;
+   public static final ParticleType<DustParticleOptions> DUST = register("dust", DustParticleOptions.DESERIALIZER, (particleType) -> DustParticleOptions.CODEC);
+   public static final ParticleType<DustColorTransitionOptions> DUST_COLOR_TRANSITION = register("dust_color_transition", DustColorTransitionOptions.DESERIALIZER, (particleType) -> DustColorTransitionOptions.CODEC);
    public static final SimpleParticleType EFFECT = register("effect", false);
    public static final SimpleParticleType ELDER_GUARDIAN = register("elder_guardian", true);
    public static final SimpleParticleType ENCHANTED_HIT = register("enchanted_hit", false);
@@ -42,7 +42,7 @@ public class ParticleTypes {
    public static final SimpleParticleType HEART = register("heart", false);
    public static final SimpleParticleType INSTANT_EFFECT = register("instant_effect", false);
    public static final ParticleType<ItemParticleOption> ITEM = register("item", ItemParticleOption.DESERIALIZER, ItemParticleOption::codec);
-   public static final ParticleType<VibrationParticleOption> VIBRATION;
+   public static final ParticleType<VibrationParticleOption> VIBRATION = register("vibration", VibrationParticleOption.DESERIALIZER, (particleType) -> VibrationParticleOption.CODEC);
    public static final SimpleParticleType ITEM_SLIME = register("item_slime", false);
    public static final SimpleParticleType ITEM_SNOWBALL = register("item_snowball", false);
    public static final SimpleParticleType LARGE_SMOKE = register("large_smoke", false);
@@ -107,10 +107,4 @@ public class ParticleTypes {
          }
       });
    }
-
-   static {
-      DUST = register("dust", DustParticleOptions.DESERIALIZER, (particleType) -> DustParticleOptions.CODEC);
-      DUST_COLOR_TRANSITION = register("dust_color_transition", DustColorTransitionOptions.DESERIALIZER, (particleType) -> DustColorTransitionOptions.CODEC);
-      VIBRATION = register("vibration", VibrationParticleOption.DESERIALIZER, (particleType) -> VibrationParticleOption.CODEC);
-   }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/BuiltinRegistries.java b/src/main/java/net/minecraft/data/BuiltinRegistries.java
index 927c74c5cdf10b2b14a26bc615d374a65f208f35..a2f50d6c6e1e2fc44e8a1a645564cdd3ffcb69f1 100644
--- a/src/main/java/net/minecraft/data/BuiltinRegistries.java
+++ b/src/main/java/net/minecraft/data/BuiltinRegistries.java
@@ -52,8 +52,8 @@ public class BuiltinRegistries {
    private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> resourceKey, R writableRegistry, Supplier<T> supplier, Lifecycle lifecycle) {
       ResourceLocation resourceLocation = resourceKey.location();
       LOADERS.put(resourceLocation, supplier);
-      WritableRegistry<R> writableRegistry2 = WRITABLE_REGISTRY;
-      return writableRegistry2.register(resourceKey, writableRegistry, lifecycle);
+      WritableRegistry<R> writableRegistry2 = (WritableRegistry<R>) WRITABLE_REGISTRY; // MagmaCube - decompile error
+      return (R) writableRegistry2.register((ResourceKey) resourceKey, writableRegistry, lifecycle); // MagmaCube - decompile error
    }
 
    public static <T> T register(Registry<? super T> registry, String s, T object) {
@@ -61,11 +61,11 @@ public class BuiltinRegistries {
    }
 
    public static <V, T extends V> T register(Registry<V> registry, ResourceLocation resourceLocation, T object) {
-      return ((WritableRegistry)registry).register(ResourceKey.create(registry.key(), resourceLocation), object, Lifecycle.stable());
+      return ((WritableRegistry<T>)registry).register((ResourceKey<T>) ResourceKey.create(registry.key(), resourceLocation), object, Lifecycle.stable()); // MagmaCube - decompile error
    }
 
    public static <V, T extends V> T registerMapping(Registry<V> registry, int i, ResourceKey<V> resourceKey, T object) {
-      return ((WritableRegistry)registry).registerMapping(i, resourceKey, object, Lifecycle.stable());
+      return ((WritableRegistry<T>)registry).registerMapping(i, (ResourceKey<T>) resourceKey, object, Lifecycle.stable()); // MagmaCube - decompile error
    }
 
    public static void bootstrap() {
diff --git a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
index b0ec9df703183f1d9099994d3886ab1e7aeb7953..1ff1bc20d1d9c608974a48608ad00fe42d3a135d 100644
--- a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
+++ b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
@@ -35,7 +35,7 @@ public class RegistryDumpReport implements DataProvider {
          jsonObject.addProperty("default", resourceLocation.toString());
       }
 
-      int i = Registry.REGISTRY.getId(registry);
+      int i = Registry.REGISTRY.getIdObject(registry); // MagmaCube - workaround
       jsonObject.addProperty("protocol_id", i);
       JsonObject jsonObject2 = new JsonObject();
 
diff --git a/src/main/java/net/minecraft/data/models/BlockModelGenerators.java b/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
index ad8db422e55a626e29482b357d7ab9625c35474c..070cd3d79aa5dcd5d0c43cd4addc46409599a8a7 100644
--- a/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
+++ b/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
@@ -69,15 +69,15 @@ public class BlockModelGenerators {
    final BiConsumer<ResourceLocation, Supplier<JsonElement>> modelOutput;
    private final Consumer<Item> skippedAutoModelsOutput;
    final List<Block> nonOrientableTrapdoor = ImmutableList.of(Blocks.OAK_TRAPDOOR, Blocks.DARK_OAK_TRAPDOOR, Blocks.IRON_TRAPDOOR);
-   final Map<Block, BlockModelGenerators.BlockStateGeneratorSupplier> fullBlockModelCustomGenerators = ImmutableMap.builder().put(Blocks.STONE, BlockModelGenerators::createMirroredCubeGenerator).put(Blocks.DEEPSLATE, BlockModelGenerators::createMirroredColumnGenerator).build();
-   final Map<Block, TexturedModel> texturedModels = ImmutableMap.builder().put(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.SANDSTONE)).put(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.RED_SANDSTONE)).put(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).put(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).put(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_SANDSTONE)))).put(Blocks.CUT_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.RED_SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_RED_SANDSTONE)))).put(Blocks.QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.QUARTZ_BLOCK)).put(Blocks.SMOOTH_QUARTZ, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.QUARTZ_BLOCK, "_bottom"))).put(Blocks.BLACKSTONE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.BLACKSTONE)).put(Blocks.DEEPSLATE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.DEEPSLATE)).put(Blocks.CHISELED_QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.CHISELED_QUARTZ_BLOCK).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_QUARTZ_BLOCK)))).put(Blocks.CHISELED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_SANDSTONE).updateTextures((textureMapping) -> {
+   final Map<Block, BlockModelGenerators.BlockStateGeneratorSupplier> fullBlockModelCustomGenerators = ImmutableMap.<Block, BlockModelGenerators.BlockStateGeneratorSupplier>builder().put(Blocks.STONE, BlockModelGenerators::createMirroredCubeGenerator).put(Blocks.DEEPSLATE, BlockModelGenerators::createMirroredColumnGenerator).build();
+   final Map<Block, TexturedModel> texturedModels = ImmutableMap.<Block, TexturedModel>builder().put(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.SANDSTONE)).put(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.RED_SANDSTONE)).put(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).put(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).put(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_SANDSTONE)))).put(Blocks.CUT_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.RED_SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_RED_SANDSTONE)))).put(Blocks.QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.QUARTZ_BLOCK)).put(Blocks.SMOOTH_QUARTZ, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.QUARTZ_BLOCK, "_bottom"))).put(Blocks.BLACKSTONE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.BLACKSTONE)).put(Blocks.DEEPSLATE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.DEEPSLATE)).put(Blocks.CHISELED_QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.CHISELED_QUARTZ_BLOCK).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_QUARTZ_BLOCK)))).put(Blocks.CHISELED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_SANDSTONE).updateTextures((textureMapping) -> {
       textureMapping.put(TextureSlot.END, TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"));
       textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_SANDSTONE));
    })).put(Blocks.CHISELED_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_RED_SANDSTONE).updateTextures((textureMapping) -> {
       textureMapping.put(TextureSlot.END, TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"));
       textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_RED_SANDSTONE));
    })).build();
-   static final Map<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>> SHAPE_CONSUMERS = ImmutableMap.builder().put(BlockFamily.Variant.BUTTON, BlockModelGenerators.BlockFamilyProvider::button).put(BlockFamily.Variant.DOOR, BlockModelGenerators.BlockFamilyProvider::door).put(BlockFamily.Variant.CHISELED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CRACKED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.FENCE, BlockModelGenerators.BlockFamilyProvider::fence).put(BlockFamily.Variant.FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::fenceGate).put(BlockFamily.Variant.SIGN, BlockModelGenerators.BlockFamilyProvider::sign).put(BlockFamily.Variant.SLAB, BlockModelGenerators.BlockFamilyProvider::slab).put(BlockFamily.Variant.STAIRS, BlockModelGenerators.BlockFamilyProvider::stairs).put(BlockFamily.Variant.PRESSURE_PLATE, BlockModelGenerators.BlockFamilyProvider::pressurePlate).put(BlockFamily.Variant.TRAPDOOR, BlockModelGenerators.BlockFamilyProvider::trapdoor).put(BlockFamily.Variant.WALL, BlockModelGenerators.BlockFamilyProvider::wall).build();
+   static final Map<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>> SHAPE_CONSUMERS = ImmutableMap.<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>>builder().put(BlockFamily.Variant.BUTTON, BlockModelGenerators.BlockFamilyProvider::button).put(BlockFamily.Variant.DOOR, BlockModelGenerators.BlockFamilyProvider::door).put(BlockFamily.Variant.CHISELED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CRACKED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.FENCE, BlockModelGenerators.BlockFamilyProvider::fence).put(BlockFamily.Variant.FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::fenceGate).put(BlockFamily.Variant.SIGN, BlockModelGenerators.BlockFamilyProvider::sign).put(BlockFamily.Variant.SLAB, BlockModelGenerators.BlockFamilyProvider::slab).put(BlockFamily.Variant.STAIRS, BlockModelGenerators.BlockFamilyProvider::stairs).put(BlockFamily.Variant.PRESSURE_PLATE, BlockModelGenerators.BlockFamilyProvider::pressurePlate).put(BlockFamily.Variant.TRAPDOOR, BlockModelGenerators.BlockFamilyProvider::trapdoor).put(BlockFamily.Variant.WALL, BlockModelGenerators.BlockFamilyProvider::wall).build();
    public static final Map<BooleanProperty, Function<ResourceLocation, Variant>> MULTIFACE_GENERATOR = Util.make(Maps.newHashMap(), (hashMap) -> {
       hashMap.put(BlockStateProperties.NORTH, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation));
       hashMap.put(BlockStateProperties.EAST, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true));
diff --git a/src/main/java/net/minecraft/data/models/blockstates/Selector.java b/src/main/java/net/minecraft/data/models/blockstates/Selector.java
index a4aed8c318544d577d9403eb83f6b266761a968e..65756f09b8d99e36bbc6cecaa1d0227b85980cab 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/Selector.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/Selector.java
@@ -12,11 +12,11 @@ public final class Selector {
    private final List<Property.Value<?>> values;
 
    public Selector extend(Property.Value<?> value) {
-      return new Selector(ImmutableList.builder().addAll(this.values).add(value).build());
+      return new Selector((List) ImmutableList.builder().addAll(this.values).add(value).build()); // MagmaCube - decompile error
    }
 
    public Selector extend(Selector selector) {
-      return new Selector(ImmutableList.builder().addAll(this.values).addAll(selector.values).build());
+      return new Selector((List) ImmutableList.builder().addAll(this.values).addAll(selector.values).build()); // MagmaCube - decompile error
    }
 
    private Selector(List<Property.Value<?>> list) {
diff --git a/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java b/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
index cd42e5ad6f89520879001b3e4d52367fdeda3dfc..4827fa97b9f7f332e784f4d6fa6661c43aa5316f 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
@@ -4,11 +4,13 @@ import com.google.gson.JsonPrimitive;
 import net.minecraft.resources.ResourceLocation;
 
 public class VariantProperties {
-   public static final VariantProperty<VariantProperties.Rotation> X_ROT = new VariantProperty("x", (rotation) -> new JsonPrimitive(rotation.value));
-   public static final VariantProperty<VariantProperties.Rotation> Y_ROT = new VariantProperty("y", (rotation) -> new JsonPrimitive(rotation.value));
+   // MagmaCube start - decompile error
+   public static final VariantProperty<VariantProperties.Rotation> X_ROT = new VariantProperty<>("x", (rotation) -> new JsonPrimitive(rotation.value));
+   public static final VariantProperty<VariantProperties.Rotation> Y_ROT = new VariantProperty<>("y", (rotation) -> new JsonPrimitive(rotation.value));
    public static final VariantProperty<ResourceLocation> MODEL = new VariantProperty<>("model", (resourceLocation) -> new JsonPrimitive(resourceLocation.toString()));
-   public static final VariantProperty<Boolean> UV_LOCK = new VariantProperty("uvlock", JsonPrimitive::new);
-   public static final VariantProperty<Integer> WEIGHT = new VariantProperty("weight", JsonPrimitive::new);
+   public static final VariantProperty<Boolean> UV_LOCK = new VariantProperty<>("uvlock", JsonPrimitive::new);
+   public static final VariantProperty<Integer> WEIGHT = new VariantProperty<>("weight", JsonPrimitive::new);
+   // MagmaCube end - decompile error
 
    public static enum Rotation {
       R0(0),
diff --git a/src/main/java/net/minecraft/data/models/model/ModelTemplate.java b/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
index 360d0cf2f85c6d3ef6758155d2ba127010f51f60..7a78ad253ab0ab425dc4550c1af65f82332a081d 100644
--- a/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
+++ b/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
@@ -42,10 +42,10 @@ public class ModelTemplate {
       Map<TextureSlot, ResourceLocation> map = this.createMap(textureMapping);
       biConsumer.accept(resourceLocation, () -> {
          JsonObject jsonObject = new JsonObject();
-         this.model.ifPresent((resourceLocation) -> jsonObject.addProperty("parent", resourceLocation.toString()));
+         this.model.ifPresent((resourceLocationx) -> jsonObject.addProperty("parent", resourceLocationx.toString())); // MagmaCube - decompile error
          if (!map.isEmpty()) {
             JsonObject jsonObject2 = new JsonObject();
-            map.forEach((textureSlot, resourceLocation) -> jsonObject2.addProperty(textureSlot.getId(), resourceLocation.toString()));
+            map.forEach((textureSlot, resourceLocationx) -> jsonObject2.addProperty(textureSlot.getId(), resourceLocationx.toString())); // MagmaCube - decompile error
             jsonObject.add("textures", jsonObject2);
          }
 
diff --git a/src/main/java/net/minecraft/data/recipes/RecipeProvider.java b/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
index 148815dd082d0c7b29528a00e279c6b140f1f7a6..8026d3b72611b7b5e244a21157112d27adc7f1e0 100644
--- a/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
+++ b/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
@@ -60,7 +60,8 @@ public class RecipeProvider implements DataProvider {
    private static final ImmutableList<ItemLike> REDSTONE_SMELTABLES = ImmutableList.of(Items.REDSTONE_ORE, Items.DEEPSLATE_REDSTONE_ORE);
    private static final ImmutableList<ItemLike> EMERALD_SMELTABLES = ImmutableList.of(Items.EMERALD_ORE, Items.DEEPSLATE_EMERALD_ORE);
    private final DataGenerator generator;
-   private static final Map<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>> shapeBuilders = ImmutableMap.builder().put(BlockFamily.Variant.BUTTON, (BiFunction)(itemLike, itemLike2) -> buttonBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CHISELED, (BiFunction)(itemLike, itemLike2) -> chiseledBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUT, (BiFunction)(itemLike, itemLike2) -> cutBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.DOOR, (BiFunction)(itemLike, itemLike2) -> doorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE, (BiFunction)(itemLike, itemLike2) -> fenceBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE_GATE, (BiFunction)(itemLike, itemLike2) -> fenceGateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SIGN, (BiFunction)(itemLike, itemLike2) -> signBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SLAB, (BiFunction)(itemLike, itemLike2) -> slabBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.STAIRS, (BiFunction)(itemLike, itemLike2) -> stairBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.PRESSURE_PLATE, (BiFunction)(itemLike, itemLike2) -> pressurePlateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.POLISHED, (BiFunction)(itemLike, itemLike2) -> polishedBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.TRAPDOOR, (BiFunction)(itemLike, itemLike2) -> trapdoorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.WALL, (BiFunction)(itemLike, itemLike2) -> wallBuilder(itemLike, Ingredient.of(itemLike2))).build();
+   // MagmaCube - decompile error
+   private static final Map<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>> shapeBuilders = ImmutableMap.<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>>builder().put(BlockFamily.Variant.BUTTON, (itemLike, itemLike2) -> buttonBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CHISELED, (itemLike, itemLike2) -> chiseledBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUT, (itemLike, itemLike2) -> cutBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.DOOR, (itemLike, itemLike2) -> doorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE, (itemLike, itemLike2) -> fenceBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE_GATE, (itemLike, itemLike2) -> fenceGateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SIGN, (itemLike, itemLike2) -> signBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SLAB, (itemLike, itemLike2) -> slabBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.STAIRS, (itemLike, itemLike2) -> stairBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.PRESSURE_PLATE, (itemLike, itemLike2) -> pressurePlateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.POLISHED, (itemLike, itemLike2) -> polishedBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.TRAPDOOR, (itemLike, itemLike2) -> trapdoorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.WALL, (itemLike, itemLike2) -> wallBuilder(itemLike, Ingredient.of(itemLike2))).build();
 
    public RecipeProvider(DataGenerator dataGenerator) {
       this.generator = dataGenerator;
@@ -1169,7 +1170,7 @@ public class RecipeProvider implements DataProvider {
    }
 
    private static void waxRecipes(Consumer<FinishedRecipe> consumer) {
-      ((BiMap)HoneycombItem.WAXABLES.get()).forEach((block, block2) -> ShapelessRecipeBuilder.shapeless(block2).requires(block).requires(Items.HONEYCOMB).group(getItemName(block2)).unlockedBy(getHasName(block), has(block)).save(consumer, getConversionRecipeName(block2, Items.HONEYCOMB)));
+      (HoneycombItem.WAXABLES.get()).forEach((block, block2) -> ShapelessRecipeBuilder.shapeless(block2).requires(block).requires(Items.HONEYCOMB).group(getItemName(block2)).unlockedBy(getHasName(block), has(block)).save(consumer, getConversionRecipeName(block2, Items.HONEYCOMB)));
    }
 
    private static void generateRecipes(Consumer<FinishedRecipe> consumer, BlockFamily blockFamily) {
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java b/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
index 715e8cbd4ec3a8fb1f9d02f07af0e7e6220c5dac..5a0002065e3b0849c8b4f65c0be8a65d238888d0 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
@@ -31,8 +31,8 @@ public class GameTestBatchRunner {
       this.testTicker = gameTestTicker;
       this.testsPerRow = i;
       this.batches = collection.stream().map((gameTestBatch) -> {
-         Collection<GameTestInfo> collection = gameTestBatch.getTestFunctions().stream().map((testFunction) -> new GameTestInfo(testFunction, rotation, serverLevel)).collect(ImmutableList.toImmutableList());
-         return Pair.of(gameTestBatch, collection);
+         Collection<GameTestInfo> collectionIn = gameTestBatch.getTestFunctions().stream().map((testFunction) -> new GameTestInfo(testFunction, rotation, serverLevel)).collect(ImmutableList.toImmutableList());
+         return Pair.of(gameTestBatch, collectionIn);
       }).collect(ImmutableList.toImmutableList());
       this.allTestInfos = this.batches.stream().flatMap((pair) -> (pair.getSecond()).stream()).collect(ImmutableList.toImmutableList());
    }
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java b/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
index 64c4d76273abc894a1e29e1de76d980db0839e8a..2dbc9f7d90abca26f938cd106b7508a0f3b2b958 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
@@ -51,7 +51,7 @@ public class GameTestRegistry {
       T annotation = method.getAnnotation(clazz);
       if (annotation != null) {
          String s = (String)function.apply(annotation);
-         Consumer<ServerLevel> consumer = map.putIfAbsent(s, turnMethodIntoConsumer(method));
+         Consumer<ServerLevel> consumer = map.putIfAbsent(s, (Consumer<ServerLevel>) turnMethodIntoConsumer(method));
          if (consumer != null) {
             throw new RuntimeException("Hey, there should only be one " + clazz + " method per batch. Batch '" + s + "' has more than one!");
          }
@@ -101,7 +101,7 @@ public class GameTestRegistry {
    private static Collection<TestFunction> useTestGeneratorMethod(Method method) {
       try {
          Object object = method.getDeclaringClass().newInstance();
-         return method.invoke(object);
+         return (Collection<TestFunction>) method.invoke(object);
       } catch (ReflectiveOperationException var2) {
          throw new RuntimeException(var2);
       }
@@ -115,7 +115,7 @@ public class GameTestRegistry {
       String s4 = gameTest.template().isEmpty() ? s3 : s2 + "." + gameTest.template();
       String s5 = gameTest.batch();
       Rotation rotation = StructureUtils.getRotationForRotationSteps(gameTest.rotationSteps());
-      return new TestFunction(s5, s3, s4, rotation, gameTest.timeoutTicks(), gameTest.setupTicks(), gameTest.required(), gameTest.requiredSuccesses(), gameTest.attempts(), turnMethodIntoConsumer(method));
+      return new TestFunction(s5, s3, s4, rotation, gameTest.timeoutTicks(), gameTest.setupTicks(), gameTest.required(), gameTest.requiredSuccesses(), gameTest.attempts(), (Consumer<GameTestHelper>) turnMethodIntoConsumer(method));
    }
 
    private static Consumer<?> turnMethodIntoConsumer(Method method) {
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
index 541dc581ac131e3d429bd7b566d06929357ad68a..89a631957a3431d0aef5efd87266e2c12d79a92c 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
@@ -48,8 +48,8 @@ public class GameTestRunner {
          Consumer<ServerLevel> consumer = GameTestRegistry.getBeforeBatchFunction(s);
          Consumer<ServerLevel> consumer2 = GameTestRegistry.getAfterBatchFunction(s);
          MutableInt mutableInt = new MutableInt();
-         Collection<TestFunction> collection = entry.getValue();
-         return Streams.stream(Iterables.partition(collection, 100)).map((list) -> new GameTestBatch(s + ":" + mutableInt.incrementAndGet(), ImmutableList.copyOf(list), consumer, consumer2));
+         Collection<TestFunction> collectionIn = entry.getValue();
+         return Streams.stream(Iterables.partition(collectionIn, 100)).map((list) -> new GameTestBatch(s + ":" + mutableInt.incrementAndGet(), ImmutableList.copyOf(list), consumer, consumer2));
       }).collect(ImmutableList.toImmutableList());
    }
 
@@ -59,9 +59,9 @@ public class GameTestRunner {
       BlockPos blockPos3 = blockPos.offset(i, 0, i);
       BlockPos.betweenClosedStream(blockPos2, blockPos3).filter((blockPosx) -> serverLevel.getBlockState(blockPosx).is(Blocks.STRUCTURE_BLOCK)).forEach((blockPosx) -> {
          StructureBlockEntity structureBlockEntity = (StructureBlockEntity)serverLevel.getBlockEntity(blockPosx);
-         BlockPos blockPos2 = structureBlockEntity.getBlockPos();
+         BlockPos blockPos2In = structureBlockEntity.getBlockPos();
          BoundingBox boundingBox = StructureUtils.getStructureBoundingBox(structureBlockEntity);
-         StructureUtils.clearSpaceForStructure(boundingBox, blockPos2.getY(), serverLevel);
+         StructureUtils.clearSpaceForStructure(boundingBox, blockPos2In.getY(), serverLevel);
       });
    }
 
diff --git a/src/main/java/net/minecraft/nbt/NbtOps.java b/src/main/java/net/minecraft/nbt/NbtOps.java
index a1e1e0babbe00c06a719cc21f79ab881aa034fde..d5596fc6fa4c70f887c0e41d389fe4814b58c21b 100644
--- a/src/main/java/net/minecraft/nbt/NbtOps.java
+++ b/src/main/java/net/minecraft/nbt/NbtOps.java
@@ -127,19 +127,19 @@ public class NbtOps implements DynamicOps<Tag> {
    private static <T extends Tag> void fillOne(CollectionTag<T> collectionTag, Tag tag, Tag tag2) {
       if (tag instanceof CollectionTag) {
          CollectionTag<?> collectionTag2 = (CollectionTag)tag;
-         collectionTag2.forEach((tagx) -> collectionTag.add(tagx));
+         collectionTag2.forEach((tagx) -> collectionTag.add((T) tagx)); // MagmaCube - decompile error
       }
 
-      collectionTag.add(tag2);
+      collectionTag.add((T) tag2); // MagmaCube - decompile error
    }
 
    private static <T extends Tag> void fillMany(CollectionTag<T> collectionTag, Tag tag, List<Tag> list) {
       if (tag instanceof CollectionTag) {
          CollectionTag<?> collectionTag2 = (CollectionTag)tag;
-         collectionTag2.forEach((tagx) -> collectionTag.add(tagx));
+         collectionTag2.forEach((tagx) -> collectionTag.add((T) tagx)); // MagmaCube - decompile error
       }
 
-      list.forEach((tagx) -> collectionTag.add(tagx));
+      list.forEach((tagx) -> collectionTag.add((T) tagx)); // MagmaCube - decompile error
    }
 
    public DataResult<Tag> mergeToList(Tag tag, Tag tag2) {
@@ -191,11 +191,13 @@ public class NbtOps implements DynamicOps<Tag> {
 
          List<Tag> list = Lists.newArrayList();
          mapLike.entries().forEach((pair) -> {
-            Tag tag = (Tag)pair.getFirst();
-            if (!(tag instanceof StringTag)) {
-               list.add(tag);
+            // MagmaCube start - decompile error
+            Tag tagx = (Tag)pair.getFirst();
+            if (!(tagx instanceof StringTag)) {
+               list.add(tagx);
             } else {
-               compoundTag.put(tag.getAsString(), (Tag)pair.getSecond());
+               compoundTag.put(tagx.getAsString(), (Tag)pair.getSecond());
+               // MagmaCube end - decompile error
             }
          });
          return !list.isEmpty() ? DataResult.error("some keys are not strings: " + list, compoundTag) : DataResult.success(compoundTag);
@@ -216,6 +218,7 @@ public class NbtOps implements DynamicOps<Tag> {
          return DataResult.error("Not a map: " + tag);
       } else {
          CompoundTag compoundTag = (CompoundTag)tag;
+         // MagmaCube - decompile error
          return DataResult.success((biConsumer) -> compoundTag.getAllKeys().forEach((s) -> biConsumer.accept(this.createString(s), compoundTag.get(s))));
       }
    }
@@ -267,7 +270,7 @@ public class NbtOps implements DynamicOps<Tag> {
    }
 
    public DataResult<ByteBuffer> getByteBuffer(Tag tag) {
-      return tag instanceof ByteArrayTag ? DataResult.success(ByteBuffer.wrap(((ByteArrayTag)tag).getAsByteArray())) : super.getByteBuffer(tag);
+      return tag instanceof ByteArrayTag ? DataResult.success(ByteBuffer.wrap(((ByteArrayTag)tag).getAsByteArray())) : DynamicOps.super.getByteBuffer(tag); // MagmaCube - decompile error
    }
 
    public Tag createByteList(ByteBuffer byteBuffer) {
@@ -275,7 +278,7 @@ public class NbtOps implements DynamicOps<Tag> {
    }
 
    public DataResult<IntStream> getIntStream(Tag tag) {
-      return tag instanceof IntArrayTag ? DataResult.success(Arrays.stream(((IntArrayTag)tag).getAsIntArray())) : super.getIntStream(tag);
+      return tag instanceof IntArrayTag ? DataResult.success(Arrays.stream(((IntArrayTag)tag).getAsIntArray())) : DynamicOps.super.getIntStream(tag); // MagmaCube - decompile error
    }
 
    public Tag createIntList(IntStream intStream) {
@@ -283,7 +286,7 @@ public class NbtOps implements DynamicOps<Tag> {
    }
 
    public DataResult<LongStream> getLongStream(Tag tag) {
-      return tag instanceof LongArrayTag ? DataResult.success(Arrays.stream(((LongArrayTag)tag).getAsLongArray())) : super.getLongStream(tag);
+      return tag instanceof LongArrayTag ? DataResult.success(Arrays.stream(((LongArrayTag)tag).getAsLongArray())) : DynamicOps.super.getLongStream(tag); // MagmaCube - decompile error
    }
 
    public Tag createLongList(LongStream longStream) {
diff --git a/src/main/java/net/minecraft/nbt/NbtUtils.java b/src/main/java/net/minecraft/nbt/NbtUtils.java
index 170344016040bbed857ebbe1d2641026ff967997..a55191287d64c9c90fe42b881debf528145456bf 100644
--- a/src/main/java/net/minecraft/nbt/NbtUtils.java
+++ b/src/main/java/net/minecraft/nbt/NbtUtils.java
@@ -41,8 +41,10 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public final class NbtUtils {
-   private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.comparingInt((listTag) -> listTag.getInt(1)).thenComparingInt((listTag) -> listTag.getInt(0)).thenComparingInt((listTag) -> listTag.getInt(2));
-   private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.comparingDouble((listTag) -> listTag.getDouble(1)).thenComparingDouble((listTag) -> listTag.getDouble(0)).thenComparingDouble((listTag) -> listTag.getDouble(2));
+   // MagmaCube start - decompile error
+   private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.<ListTag>comparingInt((listTag) -> listTag.getInt(1)).thenComparingInt((listTag) -> listTag.getInt(0)).thenComparingInt((listTag) -> listTag.getInt(2));
+   private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.<ListTag>comparingDouble((listTag) -> listTag.getDouble(1)).thenComparingDouble((listTag) -> listTag.getDouble(0)).thenComparingDouble((listTag) -> listTag.getDouble(2));
+   // MagmaCube end - decompile error
    public static final String SNBT_DATA_TAG = "data";
    private static final char PROPERTIES_START = '{';
    private static final char PROPERTIES_END = '}';
@@ -234,7 +236,7 @@ public final class NbtUtils {
    private static <S extends StateHolder<?, S>, T extends Comparable<T>> S setValueHelper(S stateHolder, Property<T> property, String s, CompoundTag compoundTag, CompoundTag compoundTag2) {
       Optional<T> optional = property.getValue(compoundTag.getString(s));
       if (optional.isPresent()) {
-         return stateHolder.setValue(property, (Comparable)optional.get());
+         return stateHolder.setValue(property, optional.get()); // MagmaCube - decompile error
       } else {
          LOGGER.warn("Unable to read property: {} with value: {} for blockstate: {}", s, compoundTag.getString(s), compoundTag2.toString());
          return stateHolder;
@@ -519,13 +521,13 @@ public final class NbtUtils {
          ListTag listTag4 = new ListTag();
          ListTag listTag5 = compoundTag.getList("palettes", 9);
          listTag5.stream().map(ListTag.class::cast).forEach((listTag3x) -> {
-            CompoundTag compoundTag = new CompoundTag();
+            CompoundTag compoundTagx = new CompoundTag(); // MagmaCube - decompile error
 
             for(int i = 0; i < listTag3x.size(); ++i) {
-               compoundTag.putString(listTag3.getString(i), packBlockState(listTag3x.getCompound(i)));
+               compoundTagx.putString(listTag3.getString(i), packBlockState(listTag3x.getCompound(i))); // MagmaCube - decompile error
             }
 
-            listTag4.add(compoundTag);
+            listTag4.add(compoundTagx); // MagmaCube - decompile error
          });
          compoundTag.put("palettes", listTag4);
       }
@@ -603,8 +605,8 @@ public final class NbtUtils {
          CompoundTag compoundTag2 = new CompoundTag();
          if (i + 2 <= s.length()) {
             String s3 = s.substring(i + 1, s.indexOf(125, i));
-            COMMA_SPLITTER.split(s3).forEach((s2) -> {
-               List<String> list = COLON_SPLITTER.splitToList(s2);
+            COMMA_SPLITTER.split(s3).forEach((s2x) -> { // MagmaCube - decompile error
+               List<String> list = COLON_SPLITTER.splitToList(s2x); // MagmaCube - decompile error
                if (list.size() == 2) {
                   compoundTag2.putString((String)list.get(0), (String)list.get(1));
                } else {
diff --git a/src/main/java/net/minecraft/nbt/TagParser.java b/src/main/java/net/minecraft/nbt/TagParser.java
index 6abb70845770012fe7b6e6adfdb1830085e116d0..386d439c76eeb89f455b8647e51b0008cf6aa9d5 100644
--- a/src/main/java/net/minecraft/nbt/TagParser.java
+++ b/src/main/java/net/minecraft/nbt/TagParser.java
@@ -235,11 +235,11 @@ public class TagParser {
             }
 
             if (tagType2 == ByteTag.TYPE) {
-               list.add(((NumericTag)tag).getAsByte());
+               list.add((T)(Object)((NumericTag)tag).getAsByte()); // MagmaCube - decompile error
             } else if (tagType2 == LongTag.TYPE) {
-               list.add(((NumericTag)tag).getAsLong());
+               list.add((T)(Object)((NumericTag)tag).getAsLong()); // MagmaCube - decompile error
             } else {
-               list.add(((NumericTag)tag).getAsInt());
+               list.add((T)(Object)((NumericTag)tag).getAsInt()); // MagmaCube - decompile error
             }
 
             if (this.hasElementSeparator()) {
diff --git a/src/main/java/net/minecraft/network/ConnectionProtocol.java b/src/main/java/net/minecraft/network/ConnectionProtocol.java
index fe6580c03dd01f221c0f19296a5972c595d5e161..7fd9e4257eda60348477759fee9340a6956c040b 100644
--- a/src/main/java/net/minecraft/network/ConnectionProtocol.java
+++ b/src/main/java/net/minecraft/network/ConnectionProtocol.java
@@ -12,6 +12,7 @@ import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket;
 import net.minecraft.network.protocol.game.ClientboundAddMobPacket;
@@ -113,6 +114,7 @@ import net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket;
+import net.minecraft.network.protocol.game.ServerGamePacketListener;
 import net.minecraft.network.protocol.game.ServerboundAcceptTeleportationPacket;
 import net.minecraft.network.protocol.game.ServerboundBlockEntityTagQuery;
 import net.minecraft.network.protocol.game.ServerboundChangeDifficultyPacket;
@@ -159,25 +161,30 @@ import net.minecraft.network.protocol.game.ServerboundTeleportToEntityPacket;
 import net.minecraft.network.protocol.game.ServerboundUseItemOnPacket;
 import net.minecraft.network.protocol.game.ServerboundUseItemPacket;
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
+import net.minecraft.network.protocol.handshake.ServerHandshakePacketListener;
+import net.minecraft.network.protocol.login.ClientLoginPacketListener;
 import net.minecraft.network.protocol.login.ClientboundCustomQueryPacket;
 import net.minecraft.network.protocol.login.ClientboundGameProfilePacket;
 import net.minecraft.network.protocol.login.ClientboundHelloPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginCompressionPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
+import net.minecraft.network.protocol.login.ServerLoginPacketListener;
 import net.minecraft.network.protocol.login.ServerboundCustomQueryPacket;
 import net.minecraft.network.protocol.login.ServerboundHelloPacket;
 import net.minecraft.network.protocol.login.ServerboundKeyPacket;
+import net.minecraft.network.protocol.status.ClientStatusPacketListener;
 import net.minecraft.network.protocol.status.ClientboundPongResponsePacket;
 import net.minecraft.network.protocol.status.ClientboundStatusResponsePacket;
+import net.minecraft.network.protocol.status.ServerStatusPacketListener;
 import net.minecraft.network.protocol.status.ServerboundPingRequestPacket;
 import net.minecraft.network.protocol.status.ServerboundStatusRequestPacket;
 import org.apache.logging.log4j.LogManager;
 
 public enum ConnectionProtocol {
-   HANDSHAKING(-1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
-   PLAY(0, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddMobPacket.class, ClientboundAddMobPacket::new).addPacket(ClientboundAddPaintingPacket.class, ClientboundAddPaintingPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAddVibrationSignalPacket.class, ClientboundAddVibrationSignalPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockBreakAckPacket.class, ClientboundBlockBreakAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPacket.class, ClientboundChatPacket::new).addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkPacket.class, ClientboundLevelChunkPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new).addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new).addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new).addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new).addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new).addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new).addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new).addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new).addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read).addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
-   STATUS(1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
-   LOGIN(2, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
+   HANDSHAKING(-1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerHandshakePacketListener>()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
+   PLAY(0, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientGamePacketListener>()).addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddMobPacket.class, ClientboundAddMobPacket::new).addPacket(ClientboundAddPaintingPacket.class, ClientboundAddPaintingPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAddVibrationSignalPacket.class, ClientboundAddVibrationSignalPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockBreakAckPacket.class, ClientboundBlockBreakAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPacket.class, ClientboundChatPacket::new).addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkPacket.class, ClientboundLevelChunkPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new).addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new).addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new).addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new).addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new).addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new).addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new).addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new).addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerGamePacketListener>()).addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read).addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
+   STATUS(1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerStatusPacketListener>()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientStatusPacketListener>()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
+   LOGIN(2, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientLoginPacketListener>()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerLoginPacketListener>()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
 
    private static final int MIN_PROTOCOL_ID = -1;
    private static final int MAX_PROTOCOL_ID = 2;
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index fffc35d0b3f15184f026e32b05c646f1921269c1..4c0fffac057a6302fab4fc8943bd965650dd8f64 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -148,7 +148,7 @@ public class FriendlyByteBuf extends ByteBuf {
 
    public void writeIntIdList(IntList intList) {
       this.writeVarInt(intList.size());
-      intList.forEach(this::writeVarInt);
+      intList.forEach((java.util.function.IntConsumer) this::writeVarInt); // MagmaCube - decompile error
    }
 
    public <K, V, M extends Map<K, V>> M readMap(IntFunction<M> intFunction, Function<FriendlyByteBuf, K> function, Function<FriendlyByteBuf, V> function2) {
diff --git a/src/main/java/net/minecraft/network/chat/ComponentUtils.java b/src/main/java/net/minecraft/network/chat/ComponentUtils.java
index 7408fb4c7e0eca209eef78bc5a271e7bc4a519a3..73930ad75c1d8071b3a38186b43e76a069cccbe6 100644
--- a/src/main/java/net/minecraft/network/chat/ComponentUtils.java
+++ b/src/main/java/net/minecraft/network/chat/ComponentUtils.java
@@ -79,7 +79,7 @@ public class ComponentUtils {
       if (collection.isEmpty()) {
          return TextComponent.EMPTY;
       } else if (collection.size() == 1) {
-         return (Component)function.apply((Comparable)collection.iterator().next());
+         return (Component)function.apply(collection.iterator().next());
       } else {
          List<T> list = Lists.newArrayList(collection);
          list.sort(Comparable::compareTo);
diff --git a/src/main/java/net/minecraft/network/chat/NbtComponent.java b/src/main/java/net/minecraft/network/chat/NbtComponent.java
index b09f7cf57cbf92c1e64474e7ac64baa05e6f51da..a11296e9f73512d4efde4190464e61b145b5f4ff 100644
--- a/src/main/java/net/minecraft/network/chat/NbtComponent.java
+++ b/src/main/java/net/minecraft/network/chat/NbtComponent.java
@@ -85,7 +85,8 @@ public abstract class NbtComponent extends BaseComponent implements ContextAware
                }
             }).reduce((mutableComponent, mutableComponent2) -> mutableComponent.append(component).append(mutableComponent2)).orElseGet(() -> new TextComponent(""));
          } else {
-            return (MutableComponent)ComponentUtils.updateForEntity(commandSourceStack, this.separator, entity, i).map((mutableComponent) -> (MutableComponent)stream.map((s) -> new TextComponent(s)).reduce((mutableComponent2, mutableComponent3) -> mutableComponent2.append(mutableComponent).append(mutableComponent3)).orElseGet(() -> new TextComponent(""))).orElseGet(() -> new TextComponent((String)stream.collect(Collectors.joining(", "))));
+            // MagmaCube - decompile error
+            return (MutableComponent)ComponentUtils.updateForEntity(commandSourceStack, this.separator, entity, i).map((mutableComponent) -> (MutableComponent)stream.<MutableComponent>map((s) -> new TextComponent(s)).reduce((mutableComponent2, mutableComponent3) -> mutableComponent2.append(mutableComponent).append(mutableComponent3)).orElseGet(() -> new TextComponent(""))).orElseGet(() -> new TextComponent((String)stream.collect(Collectors.joining(", "))));
          }
       } else {
          return new TextComponent("");
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
index cbaf1fba1daaaf19a7c93adff8aca3f7cd1a9406..3fe3a5812a26f3c6b1ab9d5d45d3f97ab7d86077 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
@@ -31,7 +31,7 @@ public class ClientboundUpdateAttributesPacket implements Packet<ClientGamePacke
          ResourceLocation resourceLocation = friendlyByteBufx.readResourceLocation();
          Attribute attribute = Registry.ATTRIBUTE.get(resourceLocation);
          double d = friendlyByteBufx.readDouble();
-         List<AttributeModifier> list = friendlyByteBufx.readList((friendlyByteBuf) -> new AttributeModifier(friendlyByteBuf.readUUID(), "Unknown synced attribute modifier", friendlyByteBuf.readDouble(), AttributeModifier.Operation.fromValue(friendlyByteBuf.readByte())));
+         List<AttributeModifier> list = friendlyByteBufx.readList((friendlyByteBufxx) -> new AttributeModifier(friendlyByteBufxx.readUUID(), "Unknown synced attribute modifier", friendlyByteBufxx.readDouble(), AttributeModifier.Operation.fromValue(friendlyByteBufxx.readByte()))); // MagmaCube - decompile error
          return new ClientboundUpdateAttributesPacket.AttributeSnapshot(attribute, d, list);
       });
    }
@@ -41,11 +41,13 @@ public class ClientboundUpdateAttributesPacket implements Packet<ClientGamePacke
       friendlyByteBuf.writeCollection(this.attributes, (friendlyByteBufx, attributeSnapshot) -> {
          friendlyByteBufx.writeResourceLocation(Registry.ATTRIBUTE.getKey(attributeSnapshot.getAttribute()));
          friendlyByteBufx.writeDouble(attributeSnapshot.getBase());
-         friendlyByteBufx.writeCollection(attributeSnapshot.getModifiers(), (friendlyByteBuf, attributeModifier) -> {
-            friendlyByteBuf.writeUUID(attributeModifier.getId());
-            friendlyByteBuf.writeDouble(attributeModifier.getAmount());
-            friendlyByteBuf.writeByte(attributeModifier.getOperation().toValue());
+         // MagmaCube start - decompile error
+         friendlyByteBufx.writeCollection(attributeSnapshot.getModifiers(), (friendlyByteBufxx, attributeModifier) -> {
+            friendlyByteBufxx.writeUUID(attributeModifier.getId());
+            friendlyByteBufxx.writeDouble(attributeModifier.getAmount());
+            friendlyByteBufxx.writeByte(attributeModifier.getOperation().toValue());
          });
+         // MagmaCube end - decompile error
       });
    }
 
diff --git a/src/main/java/net/minecraft/resources/RegistryFileCodec.java b/src/main/java/net/minecraft/resources/RegistryFileCodec.java
index 63fb3383ebe082289aef3cf72da83c71d0cc045b..987939069ceb8c1293d3c03cfb0026199d650c1a 100644
--- a/src/main/java/net/minecraft/resources/RegistryFileCodec.java
+++ b/src/main/java/net/minecraft/resources/RegistryFileCodec.java
@@ -19,7 +19,7 @@ public final class RegistryFileCodec<E> implements Codec<Supplier<E>> {
    }
 
    public static <E> Codec<List<Supplier<E>>> homogeneousList(ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec) {
-      return Codec.either(create(resourceKey, codec, false).listOf(), codec.xmap((object) -> () -> object, Supplier::get).listOf()).xmap((either) -> either.map((list) -> list, (list) -> list), Either::left);
+      return Codec.either(create(resourceKey, codec, false).listOf(), codec.xmap((object) -> (Supplier<E>) () -> object, Supplier::get).listOf()).xmap((either) -> either.map((list) -> list, (list) -> list), Either::left);
    }
 
    private static <E> RegistryFileCodec<E> create(ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec, boolean flag) {
@@ -37,7 +37,7 @@ public final class RegistryFileCodec<E> implements Codec<Supplier<E>> {
    }
 
    public <T> DataResult<Pair<Supplier<E>, T>> decode(DynamicOps<T> dynamicOps, T object) {
-      return dynamicOps instanceof RegistryReadOps ? ((RegistryReadOps)dynamicOps).decodeElement(object, this.registryKey, this.elementCodec, this.allowInline) : this.elementCodec.decode(dynamicOps, object).map((pair) -> pair.mapFirst((object) -> () -> object));
+      return dynamicOps instanceof RegistryReadOps ? ((RegistryReadOps)dynamicOps).decodeElement(object, this.registryKey, this.elementCodec, this.allowInline) : this.elementCodec.decode(dynamicOps, object).map((pair) -> pair.mapFirst((objectIn) -> () -> objectIn));
    }
 
    public String toString() {
diff --git a/src/main/java/net/minecraft/resources/RegistryReadOps.java b/src/main/java/net/minecraft/resources/RegistryReadOps.java
index 8cb1e4abef10b119b6a111318691cdbe3788fabe..d38e4a9b3bc88014debff6bc673aa5613479953f 100644
--- a/src/main/java/net/minecraft/resources/RegistryReadOps.java
+++ b/src/main/java/net/minecraft/resources/RegistryReadOps.java
@@ -69,7 +69,7 @@ public class RegistryReadOps<T> extends DelegatingOps<T> {
       this.resources = resourceAccess;
       this.registryAccess = registryAccess;
       this.readCache = identityHashMap;
-      this.jsonOps = dynamicOps == JsonOps.INSTANCE ? this : new RegistryReadOps(JsonOps.INSTANCE, resourceAccess, registryAccess, identityHashMap);
+      this.jsonOps = dynamicOps == JsonOps.INSTANCE ? (RegistryReadOps<JsonElement>) this : new RegistryReadOps(JsonOps.INSTANCE, resourceAccess, registryAccess, identityHashMap);
    }
 
    protected <E> DataResult<Pair<Supplier<E>, T>> decodeElement(T object, ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec, boolean flag) {
@@ -80,7 +80,7 @@ public class RegistryReadOps<T> extends DelegatingOps<T> {
          WritableRegistry<E> writableRegistry = (WritableRegistry)optional.get();
          DataResult<Pair<ResourceLocation, T>> dataResult = ResourceLocation.CODEC.decode(this.delegate, object);
          if (!dataResult.result().isPresent()) {
-            return !flag ? DataResult.error("Inline definitions not allowed here") : codec.decode(this, object).map((pairx) -> pairx.mapFirst((object) -> () -> object));
+            return !flag ? DataResult.error("Inline definitions not allowed here") : codec.decode(this, object).map((pairx) -> pairx.mapFirst((objecta) -> () -> objecta)); // MagmaCube - decompile error
          } else {
             Pair<ResourceLocation, T> pair = dataResult.result().get();
             ResourceLocation resourceLocation = (ResourceLocation)pair.getFirst();
@@ -159,7 +159,7 @@ public class RegistryReadOps<T> extends DelegatingOps<T> {
    }
 
    protected <E> DataResult<Registry<E>> registry(ResourceKey<? extends Registry<E>> resourceKey) {
-      return this.registryAccess.ownedRegistry(resourceKey).map((writableRegistry) -> DataResult.success(writableRegistry, writableRegistry.elementsLifecycle())).orElseGet(() -> DataResult.error("Unknown registry: " + resourceKey));
+      return this.registryAccess.ownedRegistry(resourceKey).map((writableRegistry) -> DataResult.success((Registry<E>) writableRegistry, writableRegistry.elementsLifecycle())).orElseGet(() -> DataResult.error("Unknown registry: " + resourceKey));
    }
 
    static final class ReadCache<E> {
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 70795bb4c5d5256ebb3a1a787c888c5bc53d9d56..790f8487f264435e82868eede38a089acc9987c0 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -164,17 +164,18 @@ public class Main {
          levelStorageAccess.saveDataTag(registryHolder, worldData);
          WorldData worldData2 = worldData;
          final DedicatedServer dedicatedServer = MinecraftServer.spin((threadx) -> {
-            DedicatedServer dedicatedServer = new DedicatedServer(threadx, registryHolder, levelStorageAccess, packRepository, serverResources, worldData2, dedicatedServerSettings, DataFixers.getDataFixer(), minecraftSessionService, gameProfileRepository, gameProfileCache, LoggerChunkProgressListener::new);
-            dedicatedServer.setSingleplayerName((String)optionSet.valueOf(optionSpec9));
-            dedicatedServer.setPort(optionSet.valueOf(optionSpec12));
-            dedicatedServer.setDemo(optionSet.has(optionSpec3));
-            dedicatedServer.setId((String)optionSet.valueOf(optionSpec13));
-            boolean flag = !optionSet.has(optionSpec) && !optionSet.valuesOf(optionSpec14).contains("nogui");
-            if (flag && !GraphicsEnvironment.isHeadless()) {
-               dedicatedServer.showGui();
+            // MagmaCube start - decompile error
+            DedicatedServer dedicatedServerx = new DedicatedServer(threadx, registryHolder, levelStorageAccess, packRepository, serverResources, worldData2, dedicatedServerSettings, DataFixers.getDataFixer(), minecraftSessionService, gameProfileRepository, gameProfileCache, LoggerChunkProgressListener::new);
+            dedicatedServerx.setSingleplayerName((String)optionSet.valueOf(optionSpec9));
+            dedicatedServerx.setPort(optionSet.valueOf(optionSpec12));
+            dedicatedServerx.setDemo(optionSet.has(optionSpec3));
+            dedicatedServerx.setId((String)optionSet.valueOf(optionSpec13));
+            boolean flagx = !optionSet.has(optionSpec) && !optionSet.valuesOf(optionSpec14).contains("nogui");
+            if (flagx && !GraphicsEnvironment.isHeadless()) {
+               dedicatedServerx.showGui();
             }
-
-            return dedicatedServer;
+            return dedicatedServerx;
+            // MagmaCube end - decompile error
          });
          Thread thread = new Thread("Server Shutdown Thread") {
             public void run() {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b34b3ffb1e44ed60cccde59868ffb46c7f68b9ee..21db712c7bedf63551e70e11c86b81a4535962ce 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -750,7 +750,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
       }
    }
 
-   protected void doRunTask(TickTask tickTask) {
+   // MagmaCube - protected -> public
+   public void doRunTask(TickTask tickTask) {
       this.getProfiler().incrementCounter("runTask");
       super.doRunTask(tickTask);
    }
@@ -1283,7 +1284,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
    }
 
    public CompletableFuture<Void> reloadResources(Collection<String> collection) {
-      CompletableFuture<Void> completableFuture = CompletableFuture.supplyAsync(() -> (ImmutableList)collection.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()), this).thenCompose((immutableList) -> ServerResources.loadResources(immutableList, this.registryHolder, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this)).thenAcceptAsync((serverResources) -> {
+      CompletableFuture<Void> completableFuture = CompletableFuture.supplyAsync(() -> collection.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()), this).thenCompose((immutableList) -> ServerResources.loadResources(immutableList, this.registryHolder, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this)).thenAcceptAsync((serverResources) -> {
          this.resources.close();
          this.resources = serverResources;
          this.packRepository.setSelected(collection);
diff --git a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
index 967a1915efc7515f1264c2c3ef8e16c002c474fc..653a65fc53c2b04a277b93a1d16e0ad9e874852b 100644
--- a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
+++ b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
@@ -86,7 +86,7 @@ public class ServerFunctionLibrary implements PreparableReloadListener {
       return completableFuture.thenCombine(completableFuture2, Pair::of).thenCompose(preparationBarrier::wait).thenAcceptAsync((pair) -> {
          Map<ResourceLocation, CompletableFuture<CommandFunction>> map = (Map)pair.getSecond();
          Builder<ResourceLocation, CommandFunction> builder = ImmutableMap.builder();
-         map.forEach((resourceLocation, completableFuture) -> completableFuture.handle((commandFunction, throwable) -> {
+         map.forEach((resourceLocation, completableFuturex) -> completableFuturex.handle((commandFunction, throwable) -> { // MagmaCube - decompile error
                if (throwable != null) {
                   LOGGER.error("Failed to load function {}", resourceLocation, throwable);
                } else {
diff --git a/src/main/java/net/minecraft/server/commands/EmoteCommands.java b/src/main/java/net/minecraft/server/commands/EmoteCommands.java
index 0bcc52ab3cb60301791e1dad104f782e1fa8e0db..434b352b331724a5e9a6ca4e7cca2237f9d21416 100644
--- a/src/main/java/net/minecraft/server/commands/EmoteCommands.java
+++ b/src/main/java/net/minecraft/server/commands/EmoteCommands.java
@@ -24,8 +24,10 @@ public class EmoteCommands {
             if (entity instanceof ServerPlayer) {
                ServerPlayer serverPlayer = (ServerPlayer)entity;
                serverPlayer.getTextFilter().processStreamMessage(s).thenAcceptAsync((filteredText) -> {
-                  String s = filteredText.getFiltered();
-                  Component component = s.isEmpty() ? null : createMessage(commandContext, s);
+                  // MagmaCube start - decompile error
+                  String sx = filteredText.getFiltered();
+                  Component component = sx.isEmpty() ? null : createMessage(commandContext, sx);
+                  // MagmaCube end - decompile error
                   Component component2 = createMessage(commandContext, filteredText.getRaw());
                   minecraftServer.getPlayerList().broadcastMessage(component2, (serverPlayer2) -> serverPlayer.shouldFilterMessageTo(serverPlayer2) ? component : component2, ChatType.CHAT, entity.getUUID());
                }, minecraftServer);
diff --git a/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java b/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java
index 139aeae1b8830bd26ee86892d9926efe34f91b68..96119244d4a2588578d6820da27b73b0d4a5bce9 100644
--- a/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java
@@ -20,6 +20,8 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
 
+import java.util.function.LongConsumer;
+
 public class ForceLoadCommand {
    private static final int MAX_CHUNK_LIMIT = 256;
    private static final Dynamic2CommandExceptionType ERROR_TOO_MANY_CHUNKS = new Dynamic2CommandExceptionType((object, object2) -> new TranslatableComponent("commands.forceload.toobig", object, object2));
@@ -67,7 +69,7 @@ public class ForceLoadCommand {
       ServerLevel serverLevel = commandSourceStack.getLevel();
       ResourceKey<Level> resourceKey = serverLevel.dimension();
       LongSet longSet = serverLevel.getForcedChunks();
-      longSet.forEach((l) -> serverLevel.setChunkForced(ChunkPos.getX(l), ChunkPos.getZ(l), false));
+      longSet.forEach((LongConsumer) (l) -> serverLevel.setChunkForced(ChunkPos.getX(l), ChunkPos.getZ(l), false)); // MagmaCube - decompile error
       commandSourceStack.sendSuccess(new TranslatableComponent("commands.forceload.removed.all", resourceKey.location()), true);
       return 0;
    }
diff --git a/src/main/java/net/minecraft/server/commands/ScheduleCommand.java b/src/main/java/net/minecraft/server/commands/ScheduleCommand.java
index b46cd7b309802e517e5a33f10bafac8dde9884e1..959233dee1ff00115318aecd42eb96201ebe7a8b 100644
--- a/src/main/java/net/minecraft/server/commands/ScheduleCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ScheduleCommand.java
@@ -58,7 +58,7 @@ public class ScheduleCommand {
             timerQueue.schedule(s, l, new FunctionTagCallback(resourceLocation));
             commandSourceStack.sendSuccess(new TranslatableComponent("commands.schedule.created.tag", resourceLocation, i, l), true);
          });
-         return Math.floorMod(l, Integer.MAX_VALUE);
+         return (int) Math.floorMod(l, Integer.MAX_VALUE);
       }
    }
 
diff --git a/src/main/java/net/minecraft/server/commands/data/DataCommands.java b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
index 5056c4790e3dbcc8be58dd13e5a8e20bfeb4daad..d79dc2de8bd897ee1e83d40e5dc156f56d8776ca 100644
--- a/src/main/java/net/minecraft/server/commands/data/DataCommands.java
+++ b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
@@ -119,7 +119,7 @@ public class DataCommands {
             ArgumentBuilder<CommandSourceStack, ?> argumentBuilder2 = Commands.argument("targetPath", NbtPathArgument.nbtPath());
 
             for(DataCommands.DataProvider dataProvider2 : SOURCE_PROVIDERS) {
-               biConsumer.accept(argumentBuilder2, (DataCommands.DataManipulatorDecorator)(dataManipulator) -> dataProvider2.wrap(Commands.literal("from"), (argumentBuilder) -> argumentBuilder.executes((commandContext) -> {
+               biConsumer.accept(argumentBuilder2, (DataCommands.DataManipulatorDecorator)(dataManipulator) -> dataProvider2.wrap(Commands.literal("from"), (argumentBuilderx) -> argumentBuilderx.executes((commandContext) -> { // MagmaCube - decompile error
                         List<Tag> list = Collections.singletonList(dataProvider2.access(commandContext).getData());
                         return manipulateData(commandContext, dataProvider, dataManipulator, list);
                      }).then(Commands.argument("sourcePath", NbtPathArgument.nbtPath()).executes((commandContext) -> {
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index 838c08461b00a1a8d04a0ab6e0de313e62f3ca99..201b1e546c2a39b6ca16fa2c0e1876935ce1fa3d 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -85,7 +85,7 @@ public abstract class Settings<T extends Settings<T>> {
    private static <V extends Number> Function<String, V> wrapNumberDeserializer(Function<String, V> function) {
       return (s) -> {
          try {
-            return (Number)function.apply(s);
+            return function.apply(s); // MagmaCube - decompile error
          } catch (NumberFormatException var3) {
             return null;
          }
@@ -129,13 +129,15 @@ public abstract class Settings<T extends Settings<T>> {
       String s2 = this.getStringRaw(s);
       V object2 = (V)MoreObjects.firstNonNull(s2 != null ? function.apply(s2) : null, object);
       this.properties.put(s, function2.apply(object2));
-      return new Settings.MutableValue<>(s, object2, function2);
+      return new Settings.MutableValue(s, object2, function2); // MagmaCube - decompile error
    }
 
    protected <V> V get(String s, Function<String, V> function, UnaryOperator<V> unaryOperator, Function<V, String> function2, V object) {
       return this.get(s, (sx) -> {
-         V object = (V)function.apply(sx);
-         return object != null ? unaryOperator.apply(object) : null;
+         // MagmaCube start - decompile error
+         V obj = (V)function.apply(sx);
+         return obj != null ? unaryOperator.apply(obj) : null;
+         // MagmaCube end - decompile error
       }, function2, object);
    }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index aa0627c8f546d3a45115a13a16ae26346e1c67e9..8751158a75fbaf7053be77f3161fc7ee189e6035 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -496,9 +496,9 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
       Executor executor = (runnable) -> this.worldgenMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkHolder, runnable));
       return completableFuture.thenComposeAsync((either) -> (CompletionStage)either.map((list) -> {
             try {
-               CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture = chunkStatus.generate(executor, this.level, this.generator, this.structureManager, this.lightEngine, (chunkAccess) -> this.protoChunkToFullChunk(chunkHolder), list);
+               CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuturex = chunkStatus.generate(executor, this.level, this.generator, this.structureManager, this.lightEngine, (chunkAccess) -> this.protoChunkToFullChunk(chunkHolder), list);
                this.progressListener.onStatusChange(chunkPos, chunkStatus);
-               return completableFuture;
+               return completableFuturex;
             } catch (Exception var9) {
                var9.getStackTrace();
                CrashReport crashReport = CrashReport.forThrowable(var9, "Exception generating new chunk");
@@ -547,7 +547,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             if (protoChunk instanceof ImposterProtoChunk) {
                levelChunk = ((ImposterProtoChunk)protoChunk).getWrapped();
             } else {
-               levelChunk = new LevelChunk(this.level, protoChunk, (levelChunk) -> postLoadProtoChunk(this.level, protoChunk.getEntities()));
+               levelChunk = new LevelChunk(this.level, protoChunk, (levelChunkIn) -> postLoadProtoChunk(this.level, protoChunk.getEntities()));
                chunkHolder.replaceProtoChunk(new ImposterProtoChunk(levelChunk));
             }
 
@@ -659,9 +659,9 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             ChunkPos chunkPos = chunkHolder.getPos();
             Packet<?>[] packets = new Packet[2];
             this.getPlayers(chunkPos, false).forEach((serverPlayer) -> {
-               int i2 = checkerboardDistance(chunkPos, serverPlayer, true);
-               boolean flag = i2 <= i3;
-               boolean flag2 = i2 <= this.viewDistance;
+               int i2In = checkerboardDistance(chunkPos, serverPlayer, true);
+               boolean flag = i2In <= i3;
+               boolean flag2 = i2In <= this.viewDistance;
                this.updateChunkTracking(serverPlayer, chunkPos, packets, flag, flag2);
             });
          }
@@ -790,7 +790,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
          }
       }
 
-      int i = SectionPos.blockToSectionCoord(serverPlayer.getBlockX());
+      int ix = SectionPos.blockToSectionCoord(serverPlayer.getBlockX());
       int i2 = SectionPos.blockToSectionCoord(serverPlayer.getBlockZ());
       SectionPos sectionPos = serverPlayer.getLastSectionPos();
       SectionPos sectionPos2 = SectionPos.of(serverPlayer);
@@ -824,17 +824,17 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
       int i3 = sectionPos.x();
       int i4 = sectionPos.z();
-      if (Math.abs(i3 - i) <= this.viewDistance * 2 && Math.abs(i4 - i2) <= this.viewDistance * 2) {
-         int i5 = Math.min(i, i3) - this.viewDistance;
+      if (Math.abs(i3 - ix) <= this.viewDistance * 2 && Math.abs(i4 - i2) <= this.viewDistance * 2) {
+         int i5 = Math.min(ix, i3) - this.viewDistance;
          int i6 = Math.min(i2, i4) - this.viewDistance;
-         int i7 = Math.max(i, i3) + this.viewDistance;
+         int i7 = Math.max(ix, i3) + this.viewDistance;
          int i8 = Math.max(i2, i4) + this.viewDistance;
 
          for(int i9 = i5; i9 <= i7; ++i9) {
             for(int i10 = i6; i10 <= i8; ++i10) {
                ChunkPos chunkPos = new ChunkPos(i9, i10);
                boolean flag4 = checkerboardDistance(chunkPos, i3, i4) <= this.viewDistance;
-               boolean flag5 = checkerboardDistance(chunkPos, i, i2) <= this.viewDistance;
+               boolean flag5 = checkerboardDistance(chunkPos, ix, i2) <= this.viewDistance;
                this.updateChunkTracking(serverPlayer, chunkPos, new Packet[2], flag4, flag5);
             }
          }
@@ -848,7 +848,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             }
          }
 
-         for(int i13 = i - this.viewDistance; i13 <= i + this.viewDistance; ++i13) {
+         for(int i13 = ix - this.viewDistance; i13 <= ix + this.viewDistance; ++i13) {
             for(int i14 = i2 - this.viewDistance; i14 <= i2 + this.viewDistance; ++i14) {
                ChunkPos chunkPos3 = new ChunkPos(i13, i14);
                boolean flag8 = false;
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
index 806aa55736e5d305eeb8f4aeb8140e3038cfdf28..3a4153b0c73d1a4bf7a406ec7dd67fdad72fd336 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
@@ -16,7 +16,7 @@ import net.minecraft.world.level.ChunkPos;
 
 public class ChunkTaskPriorityQueue<T> {
    public static final int PRIORITY_LEVEL_COUNT = ChunkMap.MAX_CHUNK_DISTANCE + 2;
-   private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue = IntStream.range(0, PRIORITY_LEVEL_COUNT).mapToObj((ix) -> new Long2ObjectLinkedOpenHashMap()).collect(Collectors.toList());
+   private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue = IntStream.range(0, PRIORITY_LEVEL_COUNT).mapToObj((ix) -> new Long2ObjectLinkedOpenHashMap<List<Optional<T>>>()).collect(Collectors.toList());
    private volatile int firstQueue = PRIORITY_LEVEL_COUNT;
    private final String name;
    private final LongSet acquired = new LongOpenHashSet();
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
index 173a3e25ab4d68172e852c5f222026f3e159639a..6fcaf47a04ea0aa11d83fe38d906b924bacc7428 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
@@ -40,7 +40,7 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
    }
 
    public static ChunkTaskPriorityQueueSorter.Message<Runnable> message(Runnable runnable, long l, IntSupplier intSupplier) {
-      return new ChunkTaskPriorityQueueSorter.Message((processorHandle) -> () -> {
+      return new ChunkTaskPriorityQueueSorter.Message<>((processorHandle) -> () -> { // MagmaCube - decompile error
             runnable.run();
             processorHandle.tell(Unit.INSTANCE);
          }, l, intSupplier);
@@ -59,14 +59,15 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
    }
 
    public <T> ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<T>> getProcessor(ProcessorHandle<T> processorHandle, boolean flag) {
-      return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> {
+      return this.mailbox.<ProcessorHandle<Message<T>>>ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> { // MagmaCube - decompile error
             this.getQueue(processorHandle);
             processorHandle2.tell(ProcessorHandle.of("chunk priority sorter around " + processorHandle.name(), (message) -> this.submit(processorHandle, message.task, message.pos, message.level, flag)));
          })).join();
    }
 
    public ProcessorHandle<ChunkTaskPriorityQueueSorter.Release> getReleaseProcessor(ProcessorHandle<Runnable> processorHandle) {
-      return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> processorHandle2.tell(ProcessorHandle.of("chunk priority sorter around " + processorHandle.name(), (release) -> this.release(processorHandle, release.pos, release.task, release.clearQueue))))).join();
+      // MagmaCube - decompile error
+      return this.mailbox.<ProcessorHandle<ChunkTaskPriorityQueueSorter.Release>>ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> processorHandle2.tell(ProcessorHandle.of("chunk priority sorter around " + processorHandle.name(), (release) -> this.release(processorHandle, release.pos, release.task, release.clearQueue))))).join();
    }
 
    public void onLevelChange(ChunkPos chunkPos, IntSupplier intSupplier, int i, IntConsumer intConsumer) {
@@ -123,9 +124,9 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
    private <T> ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>> getQueue(ProcessorHandle<T> processorHandle) {
       ChunkTaskPriorityQueue<? extends Function<ProcessorHandle<Unit>, ?>> chunkTaskPriorityQueue = (ChunkTaskPriorityQueue)this.queues.get(processorHandle);
       if (chunkTaskPriorityQueue == null) {
-         throw (IllegalArgumentException)Util.pauseInIde((T)(new IllegalArgumentException("No queue for: " + processorHandle)));
+         throw (IllegalArgumentException)Util.pauseInIde((new IllegalArgumentException("No queue for: " + processorHandle))); // MagmaCube - decompile error
       } else {
-         return chunkTaskPriorityQueue;
+         return (ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>>) chunkTaskPriorityQueue; // MagmaCube - decompile error
       }
    }
 
diff --git a/src/main/java/net/minecraft/server/level/DistanceManager.java b/src/main/java/net/minecraft/server/level/DistanceManager.java
index 175233fe515ef821431ef2400f7f5ffc2f3e7493..feaa3f5a52833e506e2e0ae592386f892f08ae6e 100644
--- a/src/main/java/net/minecraft/server/level/DistanceManager.java
+++ b/src/main/java/net/minecraft/server/level/DistanceManager.java
@@ -67,7 +67,7 @@ public abstract class DistanceManager {
 
       while(objectIterator.hasNext()) {
          Entry<SortedArraySet<Ticket<?>>> entry = (Entry)objectIterator.next();
-         if (((SortedArraySet)entry.getValue()).removeIf((ticket) -> ticket.timedOut(this.ticketTickCounter))) {
+         if ((entry.getValue()).removeIf((ticket) -> ticket.timedOut(this.ticketTickCounter))) { // MagmaCube - decompile error
             this.ticketTracker.update(entry.getLongKey(), getTicketLevelAt((SortedArraySet)entry.getValue()), false);
          }
 
@@ -242,7 +242,7 @@ public abstract class DistanceManager {
                Entry<SortedArraySet<Ticket<?>>> entry = (Entry)var3.next();
                ChunkPos chunkPos = new ChunkPos(entry.getLongKey());
 
-               for(Ticket<?> ticket : (SortedArraySet)entry.getValue()) {
+               for(Ticket<?> ticket : entry.getValue()) { // MagmaCube - decompile error
                   fileOutputStream.write(("" + chunkPos.x + "\t" + chunkPos.z + "\t" + ticket.getType() + "\t" + ticket.getTicketLevel() + "\t\n").getBytes(StandardCharsets.UTF_8));
                }
             }
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 21ca4fe618aaad4c1780a5e508948fb906734d4b..6587ea401c5b039d922709a10a91f4b5f6bcdb21 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -188,7 +188,7 @@ public class ServerChunkCache extends ChunkSource {
          completableFuture = this.getChunkFutureMainThread(i, i2, chunkStatus, flag);
          this.mainThreadProcessor.managedBlock(completableFuture::isDone);
       } else {
-         completableFuture = CompletableFuture.supplyAsync(() -> this.getChunkFutureMainThread(i, i2, chunkStatus, flag), this.mainThreadProcessor).thenCompose((completableFuture) -> completableFuture);
+         completableFuture = CompletableFuture.supplyAsync(() -> this.getChunkFutureMainThread(i, i2, chunkStatus, flag), this.mainThreadProcessor).thenCompose((completableFuturex) -> completableFuturex); // MagmaCube - decompile error
       }
 
       return completableFuture;
@@ -345,7 +345,7 @@ public class ServerChunkCache extends ChunkSource {
          }
 
          this.level.getProfiler().popPush("broadcast");
-         list.forEach((chunkHolder) -> ((Either)chunkHolder.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK)).left().ifPresent(chunkHolder::broadcastChanges));
+         list.forEach((chunkHolder) -> (chunkHolder.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK)).left().ifPresent(chunkHolder::broadcastChanges));
          this.level.getProfiler().pop();
          this.level.getProfiler().pop();
       }
@@ -483,7 +483,8 @@ public class ServerChunkCache extends ChunkSource {
          super.doRunTask(runnable);
       }
 
-      protected boolean pollTask() {
+      // MagmaCube - protected -> public
+      public boolean pollTask() {
          if (ServerChunkCache.this.runDistanceManagerUpdates()) {
             return true;
          } else {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index f52450d8a01107aa976a18d307c3da9843427163..af525a55b6c8ac8ab950893bc63f5d0b3aaa61c7 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1305,7 +1305,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             object2IntOpenHashMap.addTo(s, 1);
          }
 
-         return (String)object2IntOpenHashMap.object2IntEntrySet().stream().sorted(Comparator.comparing(Entry::getIntValue).reversed()).limit(5L).map((entry) -> (String)entry.getKey() + ":" + entry.getIntValue()).collect(Collectors.joining(","));
+         return (String)object2IntOpenHashMap.object2IntEntrySet().stream().sorted(Comparator.comparing(Entry<String>::getIntValue).reversed()).limit(5L).map((entry) -> (String)entry.getKey() + ":" + entry.getIntValue()).collect(Collectors.joining(","));
       } catch (Exception var6) {
          return "";
       }
diff --git a/src/main/java/net/minecraft/server/level/Ticket.java b/src/main/java/net/minecraft/server/level/Ticket.java
index 7ad7acc50748c421c6a522112de2d8792f0530ed..dd4a1e3395d47fc663cd90418f1a18f1a712413d 100644
--- a/src/main/java/net/minecraft/server/level/Ticket.java
+++ b/src/main/java/net/minecraft/server/level/Ticket.java
@@ -20,7 +20,7 @@ public final class Ticket<T> implements Comparable<Ticket<?>> {
          return i;
       } else {
          int i2 = Integer.compare(System.identityHashCode(this.type), System.identityHashCode(ticket.type));
-         return i2 != 0 ? i2 : this.type.getComparator().compare(this.key, ticket.key);
+         return i2 != 0 ? i2 : this.type.getComparator().compare(this.key, (T) ticket.key); // MagmaCube - decompile error
       }
    }
 
diff --git a/src/main/java/net/minecraft/server/packs/FolderPackResources.java b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
index fb1c3a44b341f12675852b181cde42a07fe98c35..1d8c6c7c9f110198314af75753d78123b2ea6d0b 100644
--- a/src/main/java/net/minecraft/server/packs/FolderPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
@@ -4,6 +4,7 @@ import com.google.common.base.CharMatcher;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import java.io.File;
+import java.io.FileFilter; // MagmaCube
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -67,7 +68,7 @@ public class FolderPackResources extends AbstractPackResources {
    public Set<String> getNamespaces(PackType packType) {
       Set<String> set = Sets.newHashSet();
       File file = new File(this.file, packType.getDirectory());
-      File[] files = file.listFiles(DirectoryFileFilter.DIRECTORY);
+      File[] files = file.listFiles((FileFilter) DirectoryFileFilter.DIRECTORY); // MagmaCube - decompile error
       if (files != null) {
          for(File file2 : files) {
             String s = getRelativePath(file, file2);
diff --git a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
index e8ccb2b758cab2b18da34a8f6a6bc40dc336d98c..18001ab860942e0ce1edd90c1439f2fb36337c94 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
@@ -23,7 +23,7 @@ public class ProfiledReloadInstance extends SimpleReloadInstance<ProfiledReloadI
          AtomicLong atomicLong2 = new AtomicLong();
          ActiveProfiler activeProfiler = new ActiveProfiler(Util.timeSource, () -> 0, false);
          ActiveProfiler activeProfiler2 = new ActiveProfiler(Util.timeSource, () -> 0, false);
-         CompletableFuture<Void> completableFuture = preparableReloadListener.reload(preparationBarrier, resourceManagerx, activeProfiler, activeProfiler2, (runnable) -> executor2x.execute(() -> {
+         CompletableFuture<Void> completableFuturex = preparableReloadListener.reload(preparationBarrier, resourceManagerx, activeProfiler, activeProfiler2, (runnable) -> executor2x.execute(() -> { // MagmaCube - decompile error
                long l = Util.getNanos();
                runnable.run();
                atomicLong.addAndGet(Util.getNanos() - l);
@@ -32,7 +32,7 @@ public class ProfiledReloadInstance extends SimpleReloadInstance<ProfiledReloadI
                runnable.run();
                atomicLong2.addAndGet(Util.getNanos() - l);
             }));
-         return completableFuture.thenApplyAsync((void_) -> new ProfiledReloadInstance.State(preparableReloadListener.getName(), activeProfiler.getResults(), activeProfiler2.getResults(), atomicLong, atomicLong2), executor2);
+         return completableFuturex.thenApplyAsync((void_) -> new ProfiledReloadInstance.State(preparableReloadListener.getName(), activeProfiler.getResults(), activeProfiler2.getResults(), atomicLong, atomicLong2), executor2); // MagmaCube - decompile error
       }, completableFuture);
       this.total.start();
       this.allDone.thenAcceptAsync(this::finish, executor2);
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 7fd264e3649e7e9158bd06b0dec69a39463d5a3c..c12d7c3ad49fe7bca6e240d6748ab8c3c7c13162 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -317,7 +317,7 @@ public abstract class PlayerList {
          if (entity.hasExactlyOnePlayerPassenger()) {
             LOGGER.debug("Removing player mount");
             serverPlayer.stopRiding();
-            entity.getPassengersAndSelf().forEach((entity) -> entity.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER));
+            entity.getPassengersAndSelf().forEach((entityx) -> entityx.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER)); // MagmaCube - decompile error
          }
       }
 
diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index 978e25cccce3b881e5994403e7ea90dd84f38bd6..6bdb9e6097aac6b150b066a1530650fa45bf8103 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -142,7 +142,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
                JsonObject jsonObject = GsonHelper.convertToJsonObject(jsonElement, "entry");
                StoredUserEntry<K> storedUserEntry = this.createEntry(jsonObject);
                if (storedUserEntry.getUser() != null) {
-                  this.map.put(this.getKeyForUser(storedUserEntry.getUser()), storedUserEntry);
+                  this.map.put(this.getKeyForUser(storedUserEntry.getUser()), (V) storedUserEntry); // MagmaCube - decompile error
                }
             }
          } catch (Throwable var8) {
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index 0451d40fd3a2a35b06a68f96e6e183a042fe331d..bdac5437045fe1b2ddd422a368e17ce04bd32253 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -106,13 +106,13 @@ public class ServerStatsCounter extends StatsCounter {
                      String s2 = (String)var7.next();
                      if (compoundTag2.contains(s2, 10)) {
                         Util.ifElse(Registry.STAT_TYPE.getOptional(new ResourceLocation(s2)), (statType) -> {
-                           CompoundTag compoundTag2 = compoundTag2.getCompound(s2);
+                           CompoundTag compoundTag2x = compoundTag2.getCompound(s2);
 
-                           for(String s2 : compoundTag2.getAllKeys()) {
-                              if (compoundTag2.contains(s2, 99)) {
-                                 Util.ifElse(this.getStat(statType, s2), (stat) -> this.stats.put(stat, compoundTag2.getInt(s2)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, s2));
+                           for(String s2x : compoundTag2x.getAllKeys()) {
+                              if (compoundTag2x.contains(s2x, 99)) {
+                                 Util.ifElse(this.getStat(statType, s2x), (stat) -> this.stats.put(stat, compoundTag2x.getInt(s2x)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, s2x));
                               } else {
-                                 LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", this.file, compoundTag2.get(s2), s2);
+                                 LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", this.file, compoundTag2x.get(s2x), s2x);
                               }
                            }
 
@@ -175,14 +175,14 @@ public class ServerStatsCounter extends StatsCounter {
          ((JsonObject)map.computeIfAbsent(stat.getType(), (statType) -> new JsonObject())).addProperty(getKey(stat).toString(), entry.getIntValue());
       }
 
-      JsonObject jsonObject = new JsonObject();
+      JsonObject jsonObjectIn = new JsonObject();
 
       for(Entry<StatType<?>, JsonObject> entry2 : map.entrySet()) {
-         jsonObject.add(Registry.STAT_TYPE.getKey((StatType)entry2.getKey()).toString(), (JsonElement)entry2.getValue());
+         jsonObjectIn.add(Registry.STAT_TYPE.getKey(entry2.getKey()).toString(), entry2.getValue());
       }
 
       JsonObject jsonObject2 = new JsonObject();
-      jsonObject2.add("stats", jsonObject);
+      jsonObject2.add("stats", jsonObjectIn);
       jsonObject2.addProperty("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
       return jsonObject2.toString();
    }
diff --git a/src/main/java/net/minecraft/tags/Tag.java b/src/main/java/net/minecraft/tags/Tag.java
index d61bf4d7ec070b8f96d2e4bd60d39b2d1d86d619..0953cfd3fb14874015b8e60cf5deb9578de5d7d7 100644
--- a/src/main/java/net/minecraft/tags/Tag.java
+++ b/src/main/java/net/minecraft/tags/Tag.java
@@ -23,7 +23,7 @@ import net.minecraft.util.GsonHelper;
 
 public interface Tag<T> {
    static <T> Codec<Tag<T>> codec(Supplier<TagCollection<T>> supplier) {
-      return ResourceLocation.CODEC.flatXmap((resourceLocation) -> Optional.ofNullable(((TagCollection)supplier.get()).getTag(resourceLocation)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + resourceLocation)), (tag) -> Optional.ofNullable(((TagCollection)supplier.get()).getId(tag)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + tag)));
+      return ResourceLocation.CODEC.flatXmap((resourceLocation) -> Optional.ofNullable(supplier.get().getTag(resourceLocation)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + resourceLocation)), (tag) -> Optional.ofNullable(supplier.get().getId(tag)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + tag)));
    }
 
    boolean contains(T var1);
diff --git a/src/main/java/net/minecraft/tags/TagContainer.java b/src/main/java/net/minecraft/tags/TagContainer.java
index 5fe0d0daa1300aceed335389b79e8b7c2f6bc393..89f178397125c6ecd679693632a493b1e4732c58 100644
--- a/src/main/java/net/minecraft/tags/TagContainer.java
+++ b/src/main/java/net/minecraft/tags/TagContainer.java
@@ -36,11 +36,11 @@ public class TagContainer {
    public <T, E extends Exception> Tag<T> getTagOrThrow(ResourceKey<? extends Registry<T>> resourceKey, ResourceLocation resourceLocation, Function<ResourceLocation, E> function) throws E {
       TagCollection<T> tagCollection = this.get(resourceKey);
       if (tagCollection == null) {
-         throw (Exception)function.apply(resourceLocation);
+         throw function.apply(resourceLocation); // MagmaCube - decompile error
       } else {
          Tag<T> tag = tagCollection.getTag(resourceLocation);
          if (tag == null) {
-            throw (Exception)function.apply(resourceLocation);
+            throw function.apply(resourceLocation); // MagmaCube - decompile error
          } else {
             return tag;
          }
@@ -50,11 +50,11 @@ public class TagContainer {
    public <T, E extends Exception> ResourceLocation getIdOrThrow(ResourceKey<? extends Registry<T>> resourceKey, Tag<T> tag, Supplier<E> supplier) throws E {
       TagCollection<T> tagCollection = this.get(resourceKey);
       if (tagCollection == null) {
-         throw (Exception)supplier.get();
+         throw supplier.get(); // MagmaCube - decompile error
       } else {
          ResourceLocation resourceLocation = tagCollection.getId(tag);
          if (resourceLocation == null) {
-            throw (Exception)supplier.get();
+            throw supplier.get(); // MagmaCube - decompile error
          } else {
             return resourceLocation;
          }
@@ -62,10 +62,10 @@ public class TagContainer {
    }
 
    public void getAll(TagContainer.CollectionConsumer collectionConsumer) {
-      this.collections.forEach((resourceKey, tagCollection) -> acceptCap(collectionConsumer, resourceKey, tagCollection));
+      this.collections.forEach((resourceKey, tagCollection) -> acceptCap(collectionConsumer, (ResourceKey) resourceKey, (TagCollection) tagCollection)); // MagmaCube - decompile error
    }
 
-   private static <T> void acceptCap(TagContainer.CollectionConsumer collectionConsumer, ResourceKey<? extends Registry<?>> resourceKey, TagCollection<?> tagCollection) {
+   private static <T> void acceptCap(TagContainer.CollectionConsumer collectionConsumer, ResourceKey<? extends Registry<T>> resourceKey, TagCollection<T> tagCollection) { // MagmaCube - decompile error
       collectionConsumer.accept(resourceKey, tagCollection);
    }
 
diff --git a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
index 4cfbba31a23c8cadf67d561c542a5fc461409ede..ba9f0a905d75f38aa7a4c6c9ab8676ccfe6516fa 100644
--- a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
+++ b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
@@ -57,7 +57,7 @@ public class ClassInstanceMultiMap<T> extends AbstractCollection<T> {
          throw new IllegalArgumentException("Don't know how to search for " + clazz);
       } else {
          List<? extends T> list = this.byClass.computeIfAbsent(clazz, (clazzx) -> this.allInstances.stream().filter(clazzx::isInstance).collect(Collectors.toList()));
-         return Collections.unmodifiableCollection(list);
+         return (Collection<S>) Collections.unmodifiableCollection(list);
       }
    }
 
diff --git a/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java b/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
index c227e7d6c3335146526d3fa04c4b42fdb5f4bddc..16eb72512980759474dd09e58665b95b1f9e98e5 100644
--- a/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
+++ b/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
@@ -16,7 +16,7 @@ import javax.annotation.Nullable;
 public class LowerCaseEnumTypeAdapterFactory implements TypeAdapterFactory {
    @Nullable
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
-      Class<T> clazz = typeToken.getRawType();
+      Class<T> clazz = (Class<T>) typeToken.getRawType(); // MagmaCube - decompile error
       if (!clazz.isEnum()) {
          return null;
       } else {
diff --git a/src/main/java/net/minecraft/util/StringRepresentable.java b/src/main/java/net/minecraft/util/StringRepresentable.java
index dd6fa82c026c1e6c7507266d9ba890831c240ef1..413e940005c6e3700348bd26730d5e486cea32c3 100644
--- a/src/main/java/net/minecraft/util/StringRepresentable.java
+++ b/src/main/java/net/minecraft/util/StringRepresentable.java
@@ -18,8 +18,8 @@ public interface StringRepresentable {
    String getSerializedName();
 
    static <E extends Enum<E> & StringRepresentable> Codec<E> fromEnum(Supplier<E[]> supplier, Function<? super String, ? extends E> function) {
-      E[] enums = (Enum[])supplier.get();
-      return fromStringResolver((object) -> ((Enum)object).ordinal(), (i) -> enums[i], function);
+      E[] enums = supplier.get();
+      return fromStringResolver(Enum::ordinal, (i) -> enums[i], function);
    }
 
    static <E extends StringRepresentable> Codec<E> fromStringResolver(final ToIntFunction<E> toIntFunction, final IntFunction<E> intFunction, final Function<? super String, ? extends E> function) {
@@ -29,7 +29,7 @@ public interface StringRepresentable {
          }
 
          public <T> DataResult<Pair<E, T>> decode(DynamicOps<T> dynamicOps, T object) {
-            return dynamicOps.compressMaps() ? dynamicOps.getNumberValue(object).flatMap((number) -> Optional.ofNullable((StringRepresentable)intFunction.apply(number.intValue())).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element id: " + number))).map((stringRepresentable) -> Pair.of(stringRepresentable, dynamicOps.empty())) : dynamicOps.getStringValue(object).flatMap((s) -> Optional.ofNullable((StringRepresentable)function.apply(s)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element name: " + s))).map((stringRepresentable) -> Pair.of(stringRepresentable, dynamicOps.empty()));
+            return dynamicOps.compressMaps() ? dynamicOps.getNumberValue(object).flatMap((number) -> Optional.ofNullable((StringRepresentable)intFunction.apply(number.intValue())).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element id: " + number))).map((stringRepresentable) -> Pair.of((E) stringRepresentable, dynamicOps.empty())) : dynamicOps.getStringValue(object).flatMap((s) -> Optional.ofNullable((StringRepresentable)function.apply(s)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element name: " + s))).map((stringRepresentable) -> Pair.of((E) stringRepresentable, dynamicOps.empty()));
          }
 
          public String toString() {
diff --git a/src/main/java/net/minecraft/util/WeighedRandom.java b/src/main/java/net/minecraft/util/WeighedRandom.java
index 6c400d7de15bb835d15ec64ea082cfd3828550de..f476c34604c1682543056b6b5e86987615d5f101 100644
--- a/src/main/java/net/minecraft/util/WeighedRandom.java
+++ b/src/main/java/net/minecraft/util/WeighedRandom.java
@@ -27,7 +27,7 @@ public class WeighedRandom {
 
    public static <T extends WeighedRandom.WeighedRandomItem> Optional<T> getRandomItem(Random random, List<T> list, int i) {
       if (i < 0) {
-         throw (IllegalArgumentException)Util.pauseInIde((T)(new IllegalArgumentException("Negative total weight in getRandomItem")));
+         throw (IllegalArgumentException)Util.pauseInIde((new IllegalArgumentException("Negative total weight in getRandomItem"))); // MagmaCube - decompile error
       } else if (i == 0) {
          return Optional.empty();
       } else {
diff --git a/src/main/java/net/minecraft/util/datafix/DataFixers.java b/src/main/java/net/minecraft/util/datafix/DataFixers.java
index 8189add2db3536f67845ac60db3adac66ee87e89..c2c06df18ba5317c750a4e48eeefc1d97cbdd9a7 100644
--- a/src/main/java/net/minecraft/util/datafix/DataFixers.java
+++ b/src/main/java/net/minecraft/util/datafix/DataFixers.java
@@ -551,15 +551,18 @@ public class DataFixers {
       dataFixerBuilder.addFixer(new AddNewChoices(schema131, "Added Glow Squid", References.ENTITY));
       dataFixerBuilder.addFixer(new AddNewChoices(schema131, "Added Glow Item Frame", References.ENTITY));
       Schema schema132 = dataFixerBuilder.addSchema(2690, SAME_NAMESPACED);
-      ImmutableMap<String, String> immutableMap = ImmutableMap.builder().put("minecraft:weathered_copper_block", "minecraft:oxidized_copper_block").put("minecraft:semi_weathered_copper_block", "minecraft:weathered_copper_block").put("minecraft:lightly_weathered_copper_block", "minecraft:exposed_copper_block").put("minecraft:weathered_cut_copper", "minecraft:oxidized_cut_copper").put("minecraft:semi_weathered_cut_copper", "minecraft:weathered_cut_copper").put("minecraft:lightly_weathered_cut_copper", "minecraft:exposed_cut_copper").put("minecraft:weathered_cut_copper_stairs", "minecraft:oxidized_cut_copper_stairs").put("minecraft:semi_weathered_cut_copper_stairs", "minecraft:weathered_cut_copper_stairs").put("minecraft:lightly_weathered_cut_copper_stairs", "minecraft:exposed_cut_copper_stairs").put("minecraft:weathered_cut_copper_slab", "minecraft:oxidized_cut_copper_slab").put("minecraft:semi_weathered_cut_copper_slab", "minecraft:weathered_cut_copper_slab").put("minecraft:lightly_weathered_cut_copper_slab", "minecraft:exposed_cut_copper_slab").put("minecraft:waxed_semi_weathered_copper", "minecraft:waxed_weathered_copper").put("minecraft:waxed_lightly_weathered_copper", "minecraft:waxed_exposed_copper").put("minecraft:waxed_semi_weathered_cut_copper", "minecraft:waxed_weathered_cut_copper").put("minecraft:waxed_lightly_weathered_cut_copper", "minecraft:waxed_exposed_cut_copper").put("minecraft:waxed_semi_weathered_cut_copper_stairs", "minecraft:waxed_weathered_cut_copper_stairs").put("minecraft:waxed_lightly_weathered_cut_copper_stairs", "minecraft:waxed_exposed_cut_copper_stairs").put("minecraft:waxed_semi_weathered_cut_copper_slab", "minecraft:waxed_weathered_cut_copper_slab").put("minecraft:waxed_lightly_weathered_cut_copper_slab", "minecraft:waxed_exposed_cut_copper_slab").build();
+      // MagmaCube - decompile error
+      ImmutableMap<String, String> immutableMap = ImmutableMap.<String, String>builder().put("minecraft:weathered_copper_block", "minecraft:oxidized_copper_block").put("minecraft:semi_weathered_copper_block", "minecraft:weathered_copper_block").put("minecraft:lightly_weathered_copper_block", "minecraft:exposed_copper_block").put("minecraft:weathered_cut_copper", "minecraft:oxidized_cut_copper").put("minecraft:semi_weathered_cut_copper", "minecraft:weathered_cut_copper").put("minecraft:lightly_weathered_cut_copper", "minecraft:exposed_cut_copper").put("minecraft:weathered_cut_copper_stairs", "minecraft:oxidized_cut_copper_stairs").put("minecraft:semi_weathered_cut_copper_stairs", "minecraft:weathered_cut_copper_stairs").put("minecraft:lightly_weathered_cut_copper_stairs", "minecraft:exposed_cut_copper_stairs").put("minecraft:weathered_cut_copper_slab", "minecraft:oxidized_cut_copper_slab").put("minecraft:semi_weathered_cut_copper_slab", "minecraft:weathered_cut_copper_slab").put("minecraft:lightly_weathered_cut_copper_slab", "minecraft:exposed_cut_copper_slab").put("minecraft:waxed_semi_weathered_copper", "minecraft:waxed_weathered_copper").put("minecraft:waxed_lightly_weathered_copper", "minecraft:waxed_exposed_copper").put("minecraft:waxed_semi_weathered_cut_copper", "minecraft:waxed_weathered_cut_copper").put("minecraft:waxed_lightly_weathered_cut_copper", "minecraft:waxed_exposed_cut_copper").put("minecraft:waxed_semi_weathered_cut_copper_stairs", "minecraft:waxed_weathered_cut_copper_stairs").put("minecraft:waxed_lightly_weathered_cut_copper_stairs", "minecraft:waxed_exposed_cut_copper_stairs").put("minecraft:waxed_semi_weathered_cut_copper_slab", "minecraft:waxed_weathered_cut_copper_slab").put("minecraft:waxed_lightly_weathered_cut_copper_slab", "minecraft:waxed_exposed_cut_copper_slab").build();
       dataFixerBuilder.addFixer(ItemRenameFix.create(schema132, "Renamed copper block items to new oxidized terms", createRenamer(immutableMap)));
       dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema132, "Renamed copper blocks to new oxidized terms", createRenamer(immutableMap)));
       Schema schema133 = dataFixerBuilder.addSchema(2691, SAME_NAMESPACED);
-      ImmutableMap<String, String> immutableMap2 = ImmutableMap.builder().put("minecraft:waxed_copper", "minecraft:waxed_copper_block").put("minecraft:oxidized_copper_block", "minecraft:oxidized_copper").put("minecraft:weathered_copper_block", "minecraft:weathered_copper").put("minecraft:exposed_copper_block", "minecraft:exposed_copper").build();
+      // MagmaCube - decompile error
+      ImmutableMap<String, String> immutableMap2 = ImmutableMap.<String, String>builder().put("minecraft:waxed_copper", "minecraft:waxed_copper_block").put("minecraft:oxidized_copper_block", "minecraft:oxidized_copper").put("minecraft:weathered_copper_block", "minecraft:weathered_copper").put("minecraft:exposed_copper_block", "minecraft:exposed_copper").build();
       dataFixerBuilder.addFixer(ItemRenameFix.create(schema133, "Rename copper item suffixes", createRenamer(immutableMap2)));
       dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema133, "Rename copper blocks suffixes", createRenamer(immutableMap2)));
       Schema schema134 = dataFixerBuilder.addSchema(2696, SAME_NAMESPACED);
-      ImmutableMap<String, String> immutableMap3 = ImmutableMap.builder().put("minecraft:grimstone", "minecraft:deepslate").put("minecraft:grimstone_slab", "minecraft:cobbled_deepslate_slab").put("minecraft:grimstone_stairs", "minecraft:cobbled_deepslate_stairs").put("minecraft:grimstone_wall", "minecraft:cobbled_deepslate_wall").put("minecraft:polished_grimstone", "minecraft:polished_deepslate").put("minecraft:polished_grimstone_slab", "minecraft:polished_deepslate_slab").put("minecraft:polished_grimstone_stairs", "minecraft:polished_deepslate_stairs").put("minecraft:polished_grimstone_wall", "minecraft:polished_deepslate_wall").put("minecraft:grimstone_tiles", "minecraft:deepslate_tiles").put("minecraft:grimstone_tile_slab", "minecraft:deepslate_tile_slab").put("minecraft:grimstone_tile_stairs", "minecraft:deepslate_tile_stairs").put("minecraft:grimstone_tile_wall", "minecraft:deepslate_tile_wall").put("minecraft:grimstone_bricks", "minecraft:deepslate_bricks").put("minecraft:grimstone_brick_slab", "minecraft:deepslate_brick_slab").put("minecraft:grimstone_brick_stairs", "minecraft:deepslate_brick_stairs").put("minecraft:grimstone_brick_wall", "minecraft:deepslate_brick_wall").put("minecraft:chiseled_grimstone", "minecraft:chiseled_deepslate").build();
+      // MagmaCube - decompile error
+      ImmutableMap<String, String> immutableMap3 = ImmutableMap.<String, String>builder().put("minecraft:grimstone", "minecraft:deepslate").put("minecraft:grimstone_slab", "minecraft:cobbled_deepslate_slab").put("minecraft:grimstone_stairs", "minecraft:cobbled_deepslate_stairs").put("minecraft:grimstone_wall", "minecraft:cobbled_deepslate_wall").put("minecraft:polished_grimstone", "minecraft:polished_deepslate").put("minecraft:polished_grimstone_slab", "minecraft:polished_deepslate_slab").put("minecraft:polished_grimstone_stairs", "minecraft:polished_deepslate_stairs").put("minecraft:polished_grimstone_wall", "minecraft:polished_deepslate_wall").put("minecraft:grimstone_tiles", "minecraft:deepslate_tiles").put("minecraft:grimstone_tile_slab", "minecraft:deepslate_tile_slab").put("minecraft:grimstone_tile_stairs", "minecraft:deepslate_tile_stairs").put("minecraft:grimstone_tile_wall", "minecraft:deepslate_tile_wall").put("minecraft:grimstone_bricks", "minecraft:deepslate_bricks").put("minecraft:grimstone_brick_slab", "minecraft:deepslate_brick_slab").put("minecraft:grimstone_brick_stairs", "minecraft:deepslate_brick_stairs").put("minecraft:grimstone_brick_wall", "minecraft:deepslate_brick_wall").put("minecraft:chiseled_grimstone", "minecraft:chiseled_deepslate").build();
       dataFixerBuilder.addFixer(ItemRenameFix.create(schema134, "Renamed grimstone block items to deepslate", createRenamer(immutableMap3)));
       dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema134, "Renamed grimstone blocks to deepslate", createRenamer(immutableMap3)));
       Schema schema135 = dataFixerBuilder.addSchema(2700, SAME_NAMESPACED);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
index 8723c43558d8695df659140bd4e936218d4dca0b..3327d6d923c708e2a23638c77288e9fb842fb2ce 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
@@ -45,10 +45,12 @@ public abstract class AbstractUUIDFix extends DataFix {
 
    protected static Optional<Dynamic<?>> createUUIDFromString(Dynamic<?> dynamic, String s) {
       return dynamic.get(s).result().flatMap((dynamic2) -> {
-         String s = dynamic2.asString((String)null);
-         if (s != null) {
+         // MagmaCube start - decompile error
+         String ss = dynamic2.asString((String)null);
+         if (ss != null) {
+            // MagmaCube end - decompile error
             try {
-               UUID uuid = UUID.fromString(s);
+               UUID uuid = UUID.fromString(ss); // MagmaCube - decompile error
                return createUUIDTag(dynamic, uuid.getMostSignificantBits(), uuid.getLeastSignificantBits());
             } catch (IllegalArgumentException var4) {
             }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java b/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
index 663088a5091c259cb6144092a41381c103d99f2d..9f35661ac0541a9668c5d43061b743ce9fc8e3f3 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
@@ -5,6 +5,7 @@ import com.mojang.datafixers.TypeRewriteRule;
 import com.mojang.datafixers.DSL.TypeReference;
 import com.mojang.datafixers.schemas.Schema;
 import com.mojang.datafixers.types.templates.TaggedChoice.TaggedChoiceType;
+import com.mojang.datafixers.util.Pair;
 
 public class AddNewChoices extends DataFix {
    private final String name;
@@ -27,10 +28,10 @@ public class AddNewChoices extends DataFix {
          throw new IllegalStateException("Could not inject: key type is not the same");
       } else {
          return this.fixTypeEverywhere(s, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
-               if (!taggedChoiceType2.hasType(pair.getFirst())) {
+               if (!((TaggedChoiceType) taggedChoiceType2).hasType(pair.getFirst())) { // MagmaCube - decompile error
                   throw new IllegalArgumentException(String.format("Unknown type %s in %s ", pair.getFirst(), this.type));
                } else {
-                  return pair;
+                  return (Pair) pair; // MagmaCube - decompile error
                }
             });
       }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
index 52051f8a614f029b740f5e62a1e8b95965a3e987..be5d66be76daa7c0ca2d77aa79ee44626d979377 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
@@ -5,7 +5,8 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class AdvancementsFix extends AdvancementsRenameFix {
-   private static final Map<String, String> RENAMES = ImmutableMap.builder().put("minecraft:recipes/brewing/speckled_melon", "minecraft:recipes/brewing/glistering_melon_slice").put("minecraft:recipes/building_blocks/black_stained_hardened_clay", "minecraft:recipes/building_blocks/black_terracotta").put("minecraft:recipes/building_blocks/blue_stained_hardened_clay", "minecraft:recipes/building_blocks/blue_terracotta").put("minecraft:recipes/building_blocks/brown_stained_hardened_clay", "minecraft:recipes/building_blocks/brown_terracotta").put("minecraft:recipes/building_blocks/cyan_stained_hardened_clay", "minecraft:recipes/building_blocks/cyan_terracotta").put("minecraft:recipes/building_blocks/gray_stained_hardened_clay", "minecraft:recipes/building_blocks/gray_terracotta").put("minecraft:recipes/building_blocks/green_stained_hardened_clay", "minecraft:recipes/building_blocks/green_terracotta").put("minecraft:recipes/building_blocks/light_blue_stained_hardened_clay", "minecraft:recipes/building_blocks/light_blue_terracotta").put("minecraft:recipes/building_blocks/light_gray_stained_hardened_clay", "minecraft:recipes/building_blocks/light_gray_terracotta").put("minecraft:recipes/building_blocks/lime_stained_hardened_clay", "minecraft:recipes/building_blocks/lime_terracotta").put("minecraft:recipes/building_blocks/magenta_stained_hardened_clay", "minecraft:recipes/building_blocks/magenta_terracotta").put("minecraft:recipes/building_blocks/orange_stained_hardened_clay", "minecraft:recipes/building_blocks/orange_terracotta").put("minecraft:recipes/building_blocks/pink_stained_hardened_clay", "minecraft:recipes/building_blocks/pink_terracotta").put("minecraft:recipes/building_blocks/purple_stained_hardened_clay", "minecraft:recipes/building_blocks/purple_terracotta").put("minecraft:recipes/building_blocks/red_stained_hardened_clay", "minecraft:recipes/building_blocks/red_terracotta").put("minecraft:recipes/building_blocks/white_stained_hardened_clay", "minecraft:recipes/building_blocks/white_terracotta").put("minecraft:recipes/building_blocks/yellow_stained_hardened_clay", "minecraft:recipes/building_blocks/yellow_terracotta").put("minecraft:recipes/building_blocks/acacia_wooden_slab", "minecraft:recipes/building_blocks/acacia_slab").put("minecraft:recipes/building_blocks/birch_wooden_slab", "minecraft:recipes/building_blocks/birch_slab").put("minecraft:recipes/building_blocks/dark_oak_wooden_slab", "minecraft:recipes/building_blocks/dark_oak_slab").put("minecraft:recipes/building_blocks/jungle_wooden_slab", "minecraft:recipes/building_blocks/jungle_slab").put("minecraft:recipes/building_blocks/oak_wooden_slab", "minecraft:recipes/building_blocks/oak_slab").put("minecraft:recipes/building_blocks/spruce_wooden_slab", "minecraft:recipes/building_blocks/spruce_slab").put("minecraft:recipes/building_blocks/brick_block", "minecraft:recipes/building_blocks/bricks").put("minecraft:recipes/building_blocks/chiseled_stonebrick", "minecraft:recipes/building_blocks/chiseled_stone_bricks").put("minecraft:recipes/building_blocks/end_bricks", "minecraft:recipes/building_blocks/end_stone_bricks").put("minecraft:recipes/building_blocks/lit_pumpkin", "minecraft:recipes/building_blocks/jack_o_lantern").put("minecraft:recipes/building_blocks/magma", "minecraft:recipes/building_blocks/magma_block").put("minecraft:recipes/building_blocks/melon_block", "minecraft:recipes/building_blocks/melon").put("minecraft:recipes/building_blocks/mossy_stonebrick", "minecraft:recipes/building_blocks/mossy_stone_bricks").put("minecraft:recipes/building_blocks/nether_brick", "minecraft:recipes/building_blocks/nether_bricks").put("minecraft:recipes/building_blocks/pillar_quartz_block", "minecraft:recipes/building_blocks/quartz_pillar").put("minecraft:recipes/building_blocks/red_nether_brick", "minecraft:recipes/building_blocks/red_nether_bricks").put("minecraft:recipes/building_blocks/snow", "minecraft:recipes/building_blocks/snow_block").put("minecraft:recipes/building_blocks/smooth_red_sandstone", "minecraft:recipes/building_blocks/cut_red_sandstone").put("minecraft:recipes/building_blocks/smooth_sandstone", "minecraft:recipes/building_blocks/cut_sandstone").put("minecraft:recipes/building_blocks/stonebrick", "minecraft:recipes/building_blocks/stone_bricks").put("minecraft:recipes/building_blocks/stone_stairs", "minecraft:recipes/building_blocks/cobblestone_stairs").put("minecraft:recipes/building_blocks/string_to_wool", "minecraft:recipes/building_blocks/white_wool_from_string").put("minecraft:recipes/decorations/fence", "minecraft:recipes/decorations/oak_fence").put("minecraft:recipes/decorations/purple_shulker_box", "minecraft:recipes/decorations/shulker_box").put("minecraft:recipes/decorations/slime", "minecraft:recipes/decorations/slime_block").put("minecraft:recipes/decorations/snow_layer", "minecraft:recipes/decorations/snow").put("minecraft:recipes/misc/bone_meal_from_block", "minecraft:recipes/misc/bone_meal_from_bone_block").put("minecraft:recipes/misc/bone_meal_from_bone", "minecraft:recipes/misc/bone_meal").put("minecraft:recipes/misc/gold_ingot_from_block", "minecraft:recipes/misc/gold_ingot_from_gold_block").put("minecraft:recipes/misc/iron_ingot_from_block", "minecraft:recipes/misc/iron_ingot_from_iron_block").put("minecraft:recipes/redstone/fence_gate", "minecraft:recipes/redstone/oak_fence_gate").put("minecraft:recipes/redstone/noteblock", "minecraft:recipes/redstone/note_block").put("minecraft:recipes/redstone/trapdoor", "minecraft:recipes/redstone/oak_trapdoor").put("minecraft:recipes/redstone/wooden_button", "minecraft:recipes/redstone/oak_button").put("minecraft:recipes/redstone/wooden_door", "minecraft:recipes/redstone/oak_door").put("minecraft:recipes/redstone/wooden_pressure_plate", "minecraft:recipes/redstone/oak_pressure_plate").put("minecraft:recipes/transportation/boat", "minecraft:recipes/transportation/oak_boat").put("minecraft:recipes/transportation/golden_rail", "minecraft:recipes/transportation/powered_rail").build();
+   // MagmaCube - decompile error
+   private static final Map<String, String> RENAMES = (Map) ImmutableMap.builder().put("minecraft:recipes/brewing/speckled_melon", "minecraft:recipes/brewing/glistering_melon_slice").put("minecraft:recipes/building_blocks/black_stained_hardened_clay", "minecraft:recipes/building_blocks/black_terracotta").put("minecraft:recipes/building_blocks/blue_stained_hardened_clay", "minecraft:recipes/building_blocks/blue_terracotta").put("minecraft:recipes/building_blocks/brown_stained_hardened_clay", "minecraft:recipes/building_blocks/brown_terracotta").put("minecraft:recipes/building_blocks/cyan_stained_hardened_clay", "minecraft:recipes/building_blocks/cyan_terracotta").put("minecraft:recipes/building_blocks/gray_stained_hardened_clay", "minecraft:recipes/building_blocks/gray_terracotta").put("minecraft:recipes/building_blocks/green_stained_hardened_clay", "minecraft:recipes/building_blocks/green_terracotta").put("minecraft:recipes/building_blocks/light_blue_stained_hardened_clay", "minecraft:recipes/building_blocks/light_blue_terracotta").put("minecraft:recipes/building_blocks/light_gray_stained_hardened_clay", "minecraft:recipes/building_blocks/light_gray_terracotta").put("minecraft:recipes/building_blocks/lime_stained_hardened_clay", "minecraft:recipes/building_blocks/lime_terracotta").put("minecraft:recipes/building_blocks/magenta_stained_hardened_clay", "minecraft:recipes/building_blocks/magenta_terracotta").put("minecraft:recipes/building_blocks/orange_stained_hardened_clay", "minecraft:recipes/building_blocks/orange_terracotta").put("minecraft:recipes/building_blocks/pink_stained_hardened_clay", "minecraft:recipes/building_blocks/pink_terracotta").put("minecraft:recipes/building_blocks/purple_stained_hardened_clay", "minecraft:recipes/building_blocks/purple_terracotta").put("minecraft:recipes/building_blocks/red_stained_hardened_clay", "minecraft:recipes/building_blocks/red_terracotta").put("minecraft:recipes/building_blocks/white_stained_hardened_clay", "minecraft:recipes/building_blocks/white_terracotta").put("minecraft:recipes/building_blocks/yellow_stained_hardened_clay", "minecraft:recipes/building_blocks/yellow_terracotta").put("minecraft:recipes/building_blocks/acacia_wooden_slab", "minecraft:recipes/building_blocks/acacia_slab").put("minecraft:recipes/building_blocks/birch_wooden_slab", "minecraft:recipes/building_blocks/birch_slab").put("minecraft:recipes/building_blocks/dark_oak_wooden_slab", "minecraft:recipes/building_blocks/dark_oak_slab").put("minecraft:recipes/building_blocks/jungle_wooden_slab", "minecraft:recipes/building_blocks/jungle_slab").put("minecraft:recipes/building_blocks/oak_wooden_slab", "minecraft:recipes/building_blocks/oak_slab").put("minecraft:recipes/building_blocks/spruce_wooden_slab", "minecraft:recipes/building_blocks/spruce_slab").put("minecraft:recipes/building_blocks/brick_block", "minecraft:recipes/building_blocks/bricks").put("minecraft:recipes/building_blocks/chiseled_stonebrick", "minecraft:recipes/building_blocks/chiseled_stone_bricks").put("minecraft:recipes/building_blocks/end_bricks", "minecraft:recipes/building_blocks/end_stone_bricks").put("minecraft:recipes/building_blocks/lit_pumpkin", "minecraft:recipes/building_blocks/jack_o_lantern").put("minecraft:recipes/building_blocks/magma", "minecraft:recipes/building_blocks/magma_block").put("minecraft:recipes/building_blocks/melon_block", "minecraft:recipes/building_blocks/melon").put("minecraft:recipes/building_blocks/mossy_stonebrick", "minecraft:recipes/building_blocks/mossy_stone_bricks").put("minecraft:recipes/building_blocks/nether_brick", "minecraft:recipes/building_blocks/nether_bricks").put("minecraft:recipes/building_blocks/pillar_quartz_block", "minecraft:recipes/building_blocks/quartz_pillar").put("minecraft:recipes/building_blocks/red_nether_brick", "minecraft:recipes/building_blocks/red_nether_bricks").put("minecraft:recipes/building_blocks/snow", "minecraft:recipes/building_blocks/snow_block").put("minecraft:recipes/building_blocks/smooth_red_sandstone", "minecraft:recipes/building_blocks/cut_red_sandstone").put("minecraft:recipes/building_blocks/smooth_sandstone", "minecraft:recipes/building_blocks/cut_sandstone").put("minecraft:recipes/building_blocks/stonebrick", "minecraft:recipes/building_blocks/stone_bricks").put("minecraft:recipes/building_blocks/stone_stairs", "minecraft:recipes/building_blocks/cobblestone_stairs").put("minecraft:recipes/building_blocks/string_to_wool", "minecraft:recipes/building_blocks/white_wool_from_string").put("minecraft:recipes/decorations/fence", "minecraft:recipes/decorations/oak_fence").put("minecraft:recipes/decorations/purple_shulker_box", "minecraft:recipes/decorations/shulker_box").put("minecraft:recipes/decorations/slime", "minecraft:recipes/decorations/slime_block").put("minecraft:recipes/decorations/snow_layer", "minecraft:recipes/decorations/snow").put("minecraft:recipes/misc/bone_meal_from_block", "minecraft:recipes/misc/bone_meal_from_bone_block").put("minecraft:recipes/misc/bone_meal_from_bone", "minecraft:recipes/misc/bone_meal").put("minecraft:recipes/misc/gold_ingot_from_block", "minecraft:recipes/misc/gold_ingot_from_gold_block").put("minecraft:recipes/misc/iron_ingot_from_block", "minecraft:recipes/misc/iron_ingot_from_iron_block").put("minecraft:recipes/redstone/fence_gate", "minecraft:recipes/redstone/oak_fence_gate").put("minecraft:recipes/redstone/noteblock", "minecraft:recipes/redstone/note_block").put("minecraft:recipes/redstone/trapdoor", "minecraft:recipes/redstone/oak_trapdoor").put("minecraft:recipes/redstone/wooden_button", "minecraft:recipes/redstone/oak_button").put("minecraft:recipes/redstone/wooden_door", "minecraft:recipes/redstone/oak_door").put("minecraft:recipes/redstone/wooden_pressure_plate", "minecraft:recipes/redstone/oak_pressure_plate").put("minecraft:recipes/transportation/boat", "minecraft:recipes/transportation/oak_boat").put("minecraft:recipes/transportation/golden_rail", "minecraft:recipes/transportation/powered_rail").build();
 
    public AdvancementsFix(Schema schema, boolean flag) {
       super(schema, flag, "AdvancementsFix", (s) -> (String)RENAMES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java b/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
index e59675d9f3753e9f76817109a6caa542759730fe..61a2a24400f515d2f5bd2dea0d7c668d8c7ffac4 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
@@ -13,7 +13,7 @@ import com.mojang.serialization.Dynamic;
 import java.util.Map;
 
 public class AttributesRename extends DataFix {
-   private static final Map<String, String> RENAMES = ImmutableMap.builder().put("generic.maxHealth", "generic.max_health").put("Max Health", "generic.max_health").put("zombie.spawnReinforcements", "zombie.spawn_reinforcements").put("Spawn Reinforcements Chance", "zombie.spawn_reinforcements").put("horse.jumpStrength", "horse.jump_strength").put("Jump Strength", "horse.jump_strength").put("generic.followRange", "generic.follow_range").put("Follow Range", "generic.follow_range").put("generic.knockbackResistance", "generic.knockback_resistance").put("Knockback Resistance", "generic.knockback_resistance").put("generic.movementSpeed", "generic.movement_speed").put("Movement Speed", "generic.movement_speed").put("generic.flyingSpeed", "generic.flying_speed").put("Flying Speed", "generic.flying_speed").put("generic.attackDamage", "generic.attack_damage").put("generic.attackKnockback", "generic.attack_knockback").put("generic.attackSpeed", "generic.attack_speed").put("generic.armorToughness", "generic.armor_toughness").build();
+   private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("generic.maxHealth", "generic.max_health").put("Max Health", "generic.max_health").put("zombie.spawnReinforcements", "zombie.spawn_reinforcements").put("Spawn Reinforcements Chance", "zombie.spawn_reinforcements").put("horse.jumpStrength", "horse.jump_strength").put("Jump Strength", "horse.jump_strength").put("generic.followRange", "generic.follow_range").put("Follow Range", "generic.follow_range").put("generic.knockbackResistance", "generic.knockback_resistance").put("Knockback Resistance", "generic.knockback_resistance").put("generic.movementSpeed", "generic.movement_speed").put("Movement Speed", "generic.movement_speed").put("generic.flyingSpeed", "generic.flying_speed").put("Flying Speed", "generic.flying_speed").put("generic.attackDamage", "generic.attack_damage").put("generic.attackKnockback", "generic.attack_knockback").put("generic.attackSpeed", "generic.attack_speed").put("generic.armorToughness", "generic.armor_toughness").build();
 
    public AttributesRename(Schema schema) {
       super(schema, false);
@@ -30,10 +30,10 @@ public class AttributesRename extends DataFix {
    }
 
    private static Typed<?> fixItemStackTag(Typed<?> typed) {
-      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("AttributeModifiers", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> dynamic.update("AttributeName", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
+      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("AttributeModifiers", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicIn) -> dynamicIn.update("AttributeName", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
    }
 
    private static Typed<?> fixEntity(Typed<?> typed) {
-      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Attributes", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> dynamic.update("Name", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
+      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Attributes", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicIn) -> dynamicIn.update("Name", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java b/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java
index e7f54c5bcaf0cdf0514b0957b784ae16f0661ee4..f015d380dfc0b1fe68e4c3c1111ea7d1e47454fd 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java
@@ -12,6 +12,8 @@ import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.types.templates.List.ListType;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Dynamic;
+
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
@@ -39,31 +41,31 @@ public class BedBlockEntityInjecter extends DataFix {
       OpticFinder<?> opticFinder = DSL.fieldFinder("Level", type);
       OpticFinder<List<TE>> opticFinder2 = DSL.fieldFinder("TileEntities", listType);
       int i = 416;
-      return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), (dynamicOps) -> (pair) -> pair), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), (typed) -> {
+      return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), (dynamicOps) -> (pair) -> (Pair) pair), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), (typed) -> {
          Typed<?> typed2 = typed.getTyped(opticFinder);
          Dynamic<?> dynamic = typed2.get(DSL.remainderFinder());
-         int i = dynamic.get("xPos").asInt(0);
+         int iIn = dynamic.get("xPos").asInt(0);
          int i2 = dynamic.get("zPos").asInt(0);
-         List<TE> list = Lists.newArrayList((Iterable)typed2.getOrCreate(opticFinder2));
+         List<TE> list = Lists.newArrayList(typed2.getOrCreate(opticFinder2));
          List<? extends Dynamic<?>> list2 = dynamic.get("Sections").asList(Function.identity());
 
-         for(int i3 = 0; i3 < list2.size(); ++i3) {
-            Dynamic<?> dynamic2 = list2.get(i3);
+         for (Dynamic<?> dynamic2 : list2) {
             int i4 = dynamic2.get("Y").asInt(0);
             Stream<Integer> stream = dynamic2.get("Blocks").asStream().map((dynamicx) -> dynamicx.asInt(0));
             int i5 = 0;
 
-            for(int i6 : stream::iterator) {
-               if (416 == (i6 & 255) << 4) {
+            for (Iterator<Integer> it = stream.iterator(); it.hasNext(); ) {
+               int i6 = it.next();
+               if (i == (i6 & 255) << 4) {
                   int i7 = i5 & 15;
                   int i8 = i5 >> 8 & 15;
                   int i9 = i5 >> 4 & 15;
                   Map<Dynamic<?>, Dynamic<?>> map = Maps.newHashMap();
                   map.put(dynamic2.createString("id"), dynamic2.createString("minecraft:bed"));
-                  map.put(dynamic2.createString("x"), dynamic2.createInt(i7 + (i << 4)));
+                  map.put(dynamic2.createString("x"), dynamic2.createInt(i7 + (iIn << 4)));
                   map.put(dynamic2.createString("y"), dynamic2.createInt(i8 + (i4 << 4)));
                   map.put(dynamic2.createString("z"), dynamic2.createInt(i9 + (i2 << 4)));
-                  map.put(dynamic2.createString("color"), dynamic2.createShort((short)14));
+                  map.put(dynamic2.createString("color"), dynamic2.createShort((short) 14));
                   list.add((type2.read(dynamic2.createMap(map)).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created bed block entity."))).getFirst());
                }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
index 3f0e83df46778be093bb5c2112abbd61a13f9aa2..1d73848f78cb94d38afd23cf229ce49d36abe268 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
@@ -5,7 +5,8 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class BiomeFix extends RenameBiomesFix {
-   public static final Map<String, String> BIOMES = ImmutableMap.builder().put("minecraft:extreme_hills", "minecraft:mountains").put("minecraft:swampland", "minecraft:swamp").put("minecraft:hell", "minecraft:nether_wastes").put("minecraft:sky", "minecraft:the_end").put("minecraft:ice_flats", "minecraft:snowy_tundra").put("minecraft:ice_mountains", "minecraft:snowy_mountains").put("minecraft:mushroom_island", "minecraft:mushroom_fields").put("minecraft:mushroom_island_shore", "minecraft:mushroom_field_shore").put("minecraft:beaches", "minecraft:beach").put("minecraft:forest_hills", "minecraft:wooded_hills").put("minecraft:smaller_extreme_hills", "minecraft:mountain_edge").put("minecraft:stone_beach", "minecraft:stone_shore").put("minecraft:cold_beach", "minecraft:snowy_beach").put("minecraft:roofed_forest", "minecraft:dark_forest").put("minecraft:taiga_cold", "minecraft:snowy_taiga").put("minecraft:taiga_cold_hills", "minecraft:snowy_taiga_hills").put("minecraft:redwood_taiga", "minecraft:giant_tree_taiga").put("minecraft:redwood_taiga_hills", "minecraft:giant_tree_taiga_hills").put("minecraft:extreme_hills_with_trees", "minecraft:wooded_mountains").put("minecraft:savanna_rock", "minecraft:savanna_plateau").put("minecraft:mesa", "minecraft:badlands").put("minecraft:mesa_rock", "minecraft:wooded_badlands_plateau").put("minecraft:mesa_clear_rock", "minecraft:badlands_plateau").put("minecraft:sky_island_low", "minecraft:small_end_islands").put("minecraft:sky_island_medium", "minecraft:end_midlands").put("minecraft:sky_island_high", "minecraft:end_highlands").put("minecraft:sky_island_barren", "minecraft:end_barrens").put("minecraft:void", "minecraft:the_void").put("minecraft:mutated_plains", "minecraft:sunflower_plains").put("minecraft:mutated_desert", "minecraft:desert_lakes").put("minecraft:mutated_extreme_hills", "minecraft:gravelly_mountains").put("minecraft:mutated_forest", "minecraft:flower_forest").put("minecraft:mutated_taiga", "minecraft:taiga_mountains").put("minecraft:mutated_swampland", "minecraft:swamp_hills").put("minecraft:mutated_ice_flats", "minecraft:ice_spikes").put("minecraft:mutated_jungle", "minecraft:modified_jungle").put("minecraft:mutated_jungle_edge", "minecraft:modified_jungle_edge").put("minecraft:mutated_birch_forest", "minecraft:tall_birch_forest").put("minecraft:mutated_birch_forest_hills", "minecraft:tall_birch_hills").put("minecraft:mutated_roofed_forest", "minecraft:dark_forest_hills").put("minecraft:mutated_taiga_cold", "minecraft:snowy_taiga_mountains").put("minecraft:mutated_redwood_taiga", "minecraft:giant_spruce_taiga").put("minecraft:mutated_redwood_taiga_hills", "minecraft:giant_spruce_taiga_hills").put("minecraft:mutated_extreme_hills_with_trees", "minecraft:modified_gravelly_mountains").put("minecraft:mutated_savanna", "minecraft:shattered_savanna").put("minecraft:mutated_savanna_rock", "minecraft:shattered_savanna_plateau").put("minecraft:mutated_mesa", "minecraft:eroded_badlands").put("minecraft:mutated_mesa_rock", "minecraft:modified_wooded_badlands_plateau").put("minecraft:mutated_mesa_clear_rock", "minecraft:modified_badlands_plateau").put("minecraft:warm_deep_ocean", "minecraft:deep_warm_ocean").put("minecraft:lukewarm_deep_ocean", "minecraft:deep_lukewarm_ocean").put("minecraft:cold_deep_ocean", "minecraft:deep_cold_ocean").put("minecraft:frozen_deep_ocean", "minecraft:deep_frozen_ocean").build();
+   // MagmaCube - decompile error
+   public static final Map<String, String> BIOMES = (Map) ImmutableMap.builder().put("minecraft:extreme_hills", "minecraft:mountains").put("minecraft:swampland", "minecraft:swamp").put("minecraft:hell", "minecraft:nether_wastes").put("minecraft:sky", "minecraft:the_end").put("minecraft:ice_flats", "minecraft:snowy_tundra").put("minecraft:ice_mountains", "minecraft:snowy_mountains").put("minecraft:mushroom_island", "minecraft:mushroom_fields").put("minecraft:mushroom_island_shore", "minecraft:mushroom_field_shore").put("minecraft:beaches", "minecraft:beach").put("minecraft:forest_hills", "minecraft:wooded_hills").put("minecraft:smaller_extreme_hills", "minecraft:mountain_edge").put("minecraft:stone_beach", "minecraft:stone_shore").put("minecraft:cold_beach", "minecraft:snowy_beach").put("minecraft:roofed_forest", "minecraft:dark_forest").put("minecraft:taiga_cold", "minecraft:snowy_taiga").put("minecraft:taiga_cold_hills", "minecraft:snowy_taiga_hills").put("minecraft:redwood_taiga", "minecraft:giant_tree_taiga").put("minecraft:redwood_taiga_hills", "minecraft:giant_tree_taiga_hills").put("minecraft:extreme_hills_with_trees", "minecraft:wooded_mountains").put("minecraft:savanna_rock", "minecraft:savanna_plateau").put("minecraft:mesa", "minecraft:badlands").put("minecraft:mesa_rock", "minecraft:wooded_badlands_plateau").put("minecraft:mesa_clear_rock", "minecraft:badlands_plateau").put("minecraft:sky_island_low", "minecraft:small_end_islands").put("minecraft:sky_island_medium", "minecraft:end_midlands").put("minecraft:sky_island_high", "minecraft:end_highlands").put("minecraft:sky_island_barren", "minecraft:end_barrens").put("minecraft:void", "minecraft:the_void").put("minecraft:mutated_plains", "minecraft:sunflower_plains").put("minecraft:mutated_desert", "minecraft:desert_lakes").put("minecraft:mutated_extreme_hills", "minecraft:gravelly_mountains").put("minecraft:mutated_forest", "minecraft:flower_forest").put("minecraft:mutated_taiga", "minecraft:taiga_mountains").put("minecraft:mutated_swampland", "minecraft:swamp_hills").put("minecraft:mutated_ice_flats", "minecraft:ice_spikes").put("minecraft:mutated_jungle", "minecraft:modified_jungle").put("minecraft:mutated_jungle_edge", "minecraft:modified_jungle_edge").put("minecraft:mutated_birch_forest", "minecraft:tall_birch_forest").put("minecraft:mutated_birch_forest_hills", "minecraft:tall_birch_hills").put("minecraft:mutated_roofed_forest", "minecraft:dark_forest_hills").put("minecraft:mutated_taiga_cold", "minecraft:snowy_taiga_mountains").put("minecraft:mutated_redwood_taiga", "minecraft:giant_spruce_taiga").put("minecraft:mutated_redwood_taiga_hills", "minecraft:giant_spruce_taiga_hills").put("minecraft:mutated_extreme_hills_with_trees", "minecraft:modified_gravelly_mountains").put("minecraft:mutated_savanna", "minecraft:shattered_savanna").put("minecraft:mutated_savanna_rock", "minecraft:shattered_savanna_plateau").put("minecraft:mutated_mesa", "minecraft:eroded_badlands").put("minecraft:mutated_mesa_rock", "minecraft:modified_wooded_badlands_plateau").put("minecraft:mutated_mesa_clear_rock", "minecraft:modified_badlands_plateau").put("minecraft:warm_deep_ocean", "minecraft:deep_warm_ocean").put("minecraft:lukewarm_deep_ocean", "minecraft:deep_lukewarm_ocean").put("minecraft:cold_deep_ocean", "minecraft:deep_cold_ocean").put("minecraft:frozen_deep_ocean", "minecraft:deep_frozen_ocean").build();
 
    public BiomeFix(Schema schema, boolean flag) {
       super(schema, flag, "Biomes fix", BIOMES);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
index 7f32def79449adeb593a5a420b7d4388d2e8da42..bb7d543911c6eeb18d95e4031ccac01685ef8899 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
@@ -40,13 +40,15 @@ public class BitStorageAlignFix extends DataFix {
    }
 
    private Typed<?> updateHeightmaps(Typed<?> typed) {
-      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Heightmaps", (dynamic2) -> dynamic2.updateMapValues((pair) -> pair.mapSecond((dynamic2) -> updateBitStorage(dynamic, dynamic2, 256, 9)))));
+      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Heightmaps", (dynamic2) -> dynamic2.updateMapValues((pair) -> pair.mapSecond((dynamic2c) -> updateBitStorage(dynamic, dynamic2c, 256, 9))))); // MagmaCube - decompile error
    }
 
    private static Typed<?> updateSections(OpticFinder<?> opticFinder, OpticFinder<?> opticFinder2, OpticFinder<List<Pair<String, Dynamic<?>>>> opticFinder3, Typed<?> typed) {
-      return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> {
-            int i = typed.getOptional(opticFinder3).map((list) -> Math.max(4, DataFixUtils.ceillog2(list.size()))).orElse(0);
-            return i != 0 && !Mth.isPowerOfTwo(i) ? typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("BlockStates", (dynamic2) -> updateBitStorage(dynamic, dynamic2, 4096, i))) : typed;
+      // MagmaCube start - decompile error
+      return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedc) -> {
+            int i = typedc.getOptional(opticFinder3).map((list) -> Math.max(4, DataFixUtils.ceillog2(list.size()))).orElse(0);
+            return i != 0 && !Mth.isPowerOfTwo(i) ? typedc.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("BlockStates", (dynamic2) -> updateBitStorage(dynamic, dynamic2, 4096, i))) : typedc;
+           // MagmaCube end - decompile error
          }));
    }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
index f8f86c48ec1f3fe72006a1d7395fa27c0eeb0c06..822509189afb43830632317e69e34c52674a816b 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
@@ -13,7 +13,7 @@ public class BlockEntityBannerColorFix extends NamedEntityFix {
 
    public Dynamic<?> fixTag(Dynamic<?> dynamic) {
       dynamic = dynamic.update("Base", (dynamicx) -> dynamicx.createInt(15 - dynamicx.asInt(0)));
-      return dynamic.update("Patterns", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.update("Color", (dynamicx) -> dynamicx.createInt(15 - dynamicx.asInt(0))))).map(dynamicx::createList).result(), dynamicx));
+      return dynamic.update("Patterns", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamicIn) -> dynamicIn.update("Color", (dynamicxIn) -> dynamicxIn.createInt(15 - dynamicxIn.asInt(0))))).map(dynamicx::createList).result(), dynamicx));
    }
 
    protected Typed<?> fix(Typed<?> typed) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
index 29a83f1ce7ded6ed1fe3c4add1d706647814050e..4eb590108caf55630498ca8bd03021205ce1d621 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
@@ -43,8 +43,10 @@ public class BlockEntityIdFix extends DataFix {
    public TypeRewriteRule makeRule() {
       Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
       Type<?> type2 = this.getOutputSchema().getType(References.ITEM_STACK);
-      TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
-      TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY);
+      // MagmaCube start - decompile error
+      TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
+      TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY);
+      // MagmaCube end - decompile error
       return TypeRewriteRule.seq(this.convertUnchecked("item stack block entity name hook converter", type, type2), this.fixTypeEverywhere("BlockEntityIdFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> (String)ID_MAP.getOrDefault(s, s))));
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
index 6dd0a98f6693b0a4d44f7bdbbe64b1df194cfcae..0ecdb32e9628132cd9ff22795f0ad6cd907c8e27 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
@@ -17,7 +17,7 @@ public class BlockEntityUUIDFix extends AbstractUUIDFix {
    }
 
    private Dynamic<?> updateSkull(Dynamic<?> dynamic) {
-      return dynamic.get("Owner").get().map((dynamicx) -> replaceUUIDString(dynamicx, "Id", "Id").orElse(dynamicx)).map((dynamic2) -> dynamic.remove("Owner").set("SkullOwner", dynamic2)).result().orElse(dynamic);
+      return dynamic.get("Owner").get().map((dynamicx) -> replaceUUIDString(dynamicx, "Id", "Id").orElse(dynamicx)).map((dynamic2) -> dynamic.remove("Owner").set("SkullOwner", dynamic2)).result().orElse((Dynamic) dynamic);
    }
 
    private Dynamic<?> updateConduit(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
index b3a220a659024bac14694a966708bc7124b63bb0..4615d4a0cf6f230e1e9de49e17489e4bb9cd8be8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
@@ -20,12 +20,12 @@ public abstract class BlockRenameFixWithJigsaw extends BlockRenameFix {
 
    public TypeRewriteRule makeRule() {
       TypeReference typeReference = References.BLOCK_ENTITY;
-      String s = "minecraft:jigsaw";
-      OpticFinder<?> opticFinder = DSL.namedChoice("minecraft:jigsaw", this.getInputSchema().getChoiceType(typeReference, "minecraft:jigsaw"));
-      TypeRewriteRule typeRewriteRule = this.fixTypeEverywhereTyped(this.name + " for jigsaw state", this.getInputSchema().getType(typeReference), this.getOutputSchema().getType(typeReference), (typed) -> typed.updateTyped(opticFinder, this.getOutputSchema().getChoiceType(typeReference, "minecraft:jigsaw"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("final_state", (dynamic2) -> DataFixUtils.orElse(dynamic2.asString().result().map((s) -> {
-                     int i = s.indexOf(91);
-                     int i2 = s.indexOf(123);
-                     int i3 = s.length();
+      String choiceName = "minecraft:jigsaw";
+      OpticFinder<?> opticFinder = DSL.namedChoice(choiceName, this.getInputSchema().getChoiceType(typeReference, choiceName));
+      TypeRewriteRule typeRewriteRule = this.fixTypeEverywhereTyped(this.name + " for jigsaw state", this.getInputSchema().getType(typeReference), this.getOutputSchema().getType(typeReference), (typed) -> typed.updateTyped(opticFinder, this.getOutputSchema().getChoiceType(typeReference, choiceName), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("final_state", (dynamic2) -> DataFixUtils.orElse(dynamic2.asString().result().map((ss) -> {
+                     int i = ss.indexOf(91);
+                     int i2 = ss.indexOf(123);
+                     int i3 = ss.length();
                      if (i > 0) {
                         i3 = Math.min(i3, i);
                      }
@@ -34,9 +34,9 @@ public abstract class BlockRenameFixWithJigsaw extends BlockRenameFix {
                         i3 = Math.min(i3, i2);
                      }
 
-                     String s2 = s.substring(0, i3);
+                     String s2 = ss.substring(0, i3);
                      String s3 = this.fixBlock(s2);
-                     return s3 + s.substring(i3);
+                     return s3 + ss.substring(i3);
                   }).map(dynamic::createString), dynamic2)))));
       return TypeRewriteRule.seq(super.makeRule(), typeRewriteRule);
    }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
index bc02e4099ea9efc759981d988c110e56a0332b41..613112348f85af0ddff2a8cd3053832f498f59d1 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
@@ -53,7 +53,7 @@ public class ChunkPalettedStorageFix extends DataFix {
    static final Dynamic<?> UPPER_LARGE_FERN = BlockStateData.parse("{Name:'minecraft:large_fern',Properties:{half:'upper'}}");
    static final Dynamic<?> UPPER_ROSE_BUSH = BlockStateData.parse("{Name:'minecraft:rose_bush',Properties:{half:'upper'}}");
    static final Dynamic<?> UPPER_PEONY = BlockStateData.parse("{Name:'minecraft:peony',Properties:{half:'upper'}}");
-   static final Map<String, Dynamic<?>> FLOWER_POT_MAP = (Map)DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
+   static final Map<String, Dynamic<?>> FLOWER_POT_MAP = DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
       hashMap.put("minecraft:air0", BlockStateData.parse("{Name:'minecraft:flower_pot'}"));
       hashMap.put("minecraft:red_flower0", BlockStateData.parse("{Name:'minecraft:potted_poppy'}"));
       hashMap.put("minecraft:red_flower1", BlockStateData.parse("{Name:'minecraft:potted_blue_orchid'}"));
@@ -77,7 +77,7 @@ public class ChunkPalettedStorageFix extends DataFix {
       hashMap.put("minecraft:tallgrass2", BlockStateData.parse("{Name:'minecraft:potted_fern'}"));
       hashMap.put("minecraft:cactus0", BlockStateData.getTag(2240));
    });
-   static final Map<String, Dynamic<?>> SKULL_MAP = (Map)DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
+   static final Map<String, Dynamic<?>> SKULL_MAP = DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
       mapSkull(hashMap, 0, "skeleton", "skull");
       mapSkull(hashMap, 1, "wither_skeleton", "skull");
       mapSkull(hashMap, 2, "zombie", "head");
@@ -85,7 +85,7 @@ public class ChunkPalettedStorageFix extends DataFix {
       mapSkull(hashMap, 4, "creeper", "head");
       mapSkull(hashMap, 5, "dragon", "head");
    });
-   static final Map<String, Dynamic<?>> DOOR_MAP = (Map)DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
+   static final Map<String, Dynamic<?>> DOOR_MAP = DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
       mapDoor(hashMap, "oak_door", 1024);
       mapDoor(hashMap, "iron_door", 1136);
       mapDoor(hashMap, "spruce_door", 3088);
@@ -94,7 +94,7 @@ public class ChunkPalettedStorageFix extends DataFix {
       mapDoor(hashMap, "acacia_door", 3136);
       mapDoor(hashMap, "dark_oak_door", 3152);
    });
-   static final Map<String, Dynamic<?>> NOTE_BLOCK_MAP = (Map)DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
+   static final Map<String, Dynamic<?>> NOTE_BLOCK_MAP = DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
       for(int i = 0; i < 26; ++i) {
          hashMap.put("true" + i, BlockStateData.parse("{Name:'minecraft:note_block',Properties:{powered:'true',note:'" + i + "'}}"));
          hashMap.put("false" + i, BlockStateData.parse("{Name:'minecraft:note_block',Properties:{powered:'false',note:'" + i + "'}}"));
@@ -119,7 +119,7 @@ public class ChunkPalettedStorageFix extends DataFix {
       int2ObjectOpenHashMap.put(14, "red");
       int2ObjectOpenHashMap.put(15, "black");
    });
-   static final Map<String, Dynamic<?>> BED_BLOCK_MAP = (Map)DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
+   static final Map<String, Dynamic<?>> BED_BLOCK_MAP = DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
       ObjectIterator var1 = DYE_COLOR_MAP.int2ObjectEntrySet().iterator();
 
       while(var1.hasNext()) {
@@ -130,7 +130,7 @@ public class ChunkPalettedStorageFix extends DataFix {
       }
 
    });
-   static final Map<String, Dynamic<?>> BANNER_BLOCK_MAP = (Map)DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
+   static final Map<String, Dynamic<?>> BANNER_BLOCK_MAP = DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
       ObjectIterator var1 = DYE_COLOR_MAP.int2ObjectEntrySet().iterator();
 
       while(var1.hasNext()) {
@@ -561,19 +561,19 @@ public class ChunkPalettedStorageFix extends DataFix {
          this.level = dynamic;
          this.x = dynamic.get("xPos").asInt(0) << 4;
          this.z = dynamic.get("zPos").asInt(0) << 4;
-         dynamic.get("TileEntities").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamic) -> {
-               int i = dynamic.get("x").asInt(0) - this.x & 15;
-               int i2 = dynamic.get("y").asInt(0);
-               int i3 = dynamic.get("z").asInt(0) - this.z & 15;
+         dynamic.get("TileEntities").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamicIn) -> {
+               int i = dynamicIn.get("x").asInt(0) - this.x & 15;
+               int i2 = dynamicIn.get("y").asInt(0);
+               int i3 = dynamicIn.get("z").asInt(0) - this.z & 15;
                int i4 = i2 << 8 | i3 << 4 | i;
-               if (this.blockEntities.put(i4, dynamic) != null) {
+               if (this.blockEntities.put(i4, dynamicIn) != null) {
                   ChunkPalettedStorageFix.LOGGER.warn("In chunk: {}x{} found a duplicate block entity at position: [{}, {}, {}]", this.x, this.z, i, i2, i3);
                }
 
             }));
          boolean flag = dynamic.get("convertedFromAlphaFormat").asBoolean(false);
-         dynamic.get("Sections").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamic) -> {
-               ChunkPalettedStorageFix.Section section = new ChunkPalettedStorageFix.Section(dynamic);
+         dynamic.get("Sections").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamicIn) -> {
+               ChunkPalettedStorageFix.Section section = new ChunkPalettedStorageFix.Section(dynamicIn);
                this.sides = section.upgrade(this.sides);
                this.sections[section.y] = section;
             }));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
index ef031f9706910cf7d2438f2c3e01b579c526e1cc..fce7b1000c585163e628432a90f064981bcc735b 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
@@ -12,7 +12,8 @@ import java.util.Map;
 import java.util.Objects;
 
 public class ChunkStatusFix2 extends DataFix {
-   private static final Map<String, String> RENAMES_AND_DOWNGRADES = ImmutableMap.builder().put("structure_references", "empty").put("biomes", "empty").put("base", "surface").put("carved", "carvers").put("liquid_carved", "liquid_carvers").put("decorated", "features").put("lighted", "light").put("mobs_spawned", "spawn").put("finalized", "heightmaps").put("fullchunk", "full").build();
+   // MagmaCube - decompile error
+   private static final Map<String, String> RENAMES_AND_DOWNGRADES = (Map) ImmutableMap.builder().put("structure_references", "empty").put("biomes", "empty").put("base", "surface").put("carved", "carvers").put("liquid_carved", "liquid_carvers").put("decorated", "features").put("lighted", "light").put("mobs_spawned", "spawn").put("finalized", "heightmaps").put("fullchunk", "full").build();
 
    public ChunkStatusFix2(Schema schema, boolean flag) {
       super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
index fd4ce87467213717a8516e38f8ec1380e7d5c895..e3648ffc46474f3030d758ba13b21c392880d357 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
@@ -11,7 +11,8 @@ import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Dynamic;
 
 public class ChunkStructuresTemplateRenameFix extends DataFix {
-   private static final ImmutableMap<String, Pair<String, ImmutableMap<String, String>>> RENAMES = ImmutableMap.builder().put("EndCity", Pair.of("ECP", ImmutableMap.builder().put("second_floor", "second_floor_1").put("third_floor", "third_floor_1").put("third_floor_c", "third_floor_2").build())).put("Mansion", Pair.of("WMP", ImmutableMap.builder().put("carpet_south", "carpet_south_1").put("carpet_west", "carpet_west_1").put("indoors_door", "indoors_door_1").put("indoors_wall", "indoors_wall_1").build())).put("Igloo", Pair.of("Iglu", ImmutableMap.builder().put("minecraft:igloo/igloo_bottom", "minecraft:igloo/bottom").put("minecraft:igloo/igloo_middle", "minecraft:igloo/middle").put("minecraft:igloo/igloo_top", "minecraft:igloo/top").build())).put("Ocean_Ruin", Pair.of("ORP", ImmutableMap.builder().put("minecraft:ruin/big_ruin1_brick", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_ruin2_brick", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_ruin3_brick", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_ruin8_brick", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_ruin1_cracked", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_ruin2_cracked", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_ruin3_cracked", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_ruin8_cracked", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_ruin1_mossy", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_ruin2_mossy", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_ruin3_mossy", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_ruin8_mossy", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_ruin_warm4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_ruin_warm5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_ruin_warm6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_ruin_warm7", "minecraft:underwater_ruin/big_warm_7").put("minecraft:ruin/ruin1_brick", "minecraft:underwater_ruin/brick_1").put("minecraft:ruin/ruin2_brick", "minecraft:underwater_ruin/brick_2").put("minecraft:ruin/ruin3_brick", "minecraft:underwater_ruin/brick_3").put("minecraft:ruin/ruin4_brick", "minecraft:underwater_ruin/brick_4").put("minecraft:ruin/ruin5_brick", "minecraft:underwater_ruin/brick_5").put("minecraft:ruin/ruin6_brick", "minecraft:underwater_ruin/brick_6").put("minecraft:ruin/ruin7_brick", "minecraft:underwater_ruin/brick_7").put("minecraft:ruin/ruin8_brick", "minecraft:underwater_ruin/brick_8").put("minecraft:ruin/ruin1_cracked", "minecraft:underwater_ruin/cracked_1").put("minecraft:ruin/ruin2_cracked", "minecraft:underwater_ruin/cracked_2").put("minecraft:ruin/ruin3_cracked", "minecraft:underwater_ruin/cracked_3").put("minecraft:ruin/ruin4_cracked", "minecraft:underwater_ruin/cracked_4").put("minecraft:ruin/ruin5_cracked", "minecraft:underwater_ruin/cracked_5").put("minecraft:ruin/ruin6_cracked", "minecraft:underwater_ruin/cracked_6").put("minecraft:ruin/ruin7_cracked", "minecraft:underwater_ruin/cracked_7").put("minecraft:ruin/ruin8_cracked", "minecraft:underwater_ruin/cracked_8").put("minecraft:ruin/ruin1_mossy", "minecraft:underwater_ruin/mossy_1").put("minecraft:ruin/ruin2_mossy", "minecraft:underwater_ruin/mossy_2").put("minecraft:ruin/ruin3_mossy", "minecraft:underwater_ruin/mossy_3").put("minecraft:ruin/ruin4_mossy", "minecraft:underwater_ruin/mossy_4").put("minecraft:ruin/ruin5_mossy", "minecraft:underwater_ruin/mossy_5").put("minecraft:ruin/ruin6_mossy", "minecraft:underwater_ruin/mossy_6").put("minecraft:ruin/ruin7_mossy", "minecraft:underwater_ruin/mossy_7").put("minecraft:ruin/ruin8_mossy", "minecraft:underwater_ruin/mossy_8").put("minecraft:ruin/ruin_warm1", "minecraft:underwater_ruin/warm_1").put("minecraft:ruin/ruin_warm2", "minecraft:underwater_ruin/warm_2").put("minecraft:ruin/ruin_warm3", "minecraft:underwater_ruin/warm_3").put("minecraft:ruin/ruin_warm4", "minecraft:underwater_ruin/warm_4").put("minecraft:ruin/ruin_warm5", "minecraft:underwater_ruin/warm_5").put("minecraft:ruin/ruin_warm6", "minecraft:underwater_ruin/warm_6").put("minecraft:ruin/ruin_warm7", "minecraft:underwater_ruin/warm_7").put("minecraft:ruin/ruin_warm8", "minecraft:underwater_ruin/warm_8").put("minecraft:ruin/big_brick_1", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_brick_2", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_brick_3", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_brick_8", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_mossy_1", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_mossy_2", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_mossy_3", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_mossy_8", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_cracked_1", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_cracked_2", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_cracked_3", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_cracked_8", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_warm_4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_warm_5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_warm_6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_warm_7", "minecraft:underwater_ruin/big_warm_7").build())).build();
+   // MagmaCube - decompile error
+   private static final ImmutableMap<String, Pair<String, ImmutableMap<String, String>>> RENAMES = (ImmutableMap) ImmutableMap.builder().put("EndCity", Pair.of("ECP", ImmutableMap.builder().put("second_floor", "second_floor_1").put("third_floor", "third_floor_1").put("third_floor_c", "third_floor_2").build())).put("Mansion", Pair.of("WMP", ImmutableMap.builder().put("carpet_south", "carpet_south_1").put("carpet_west", "carpet_west_1").put("indoors_door", "indoors_door_1").put("indoors_wall", "indoors_wall_1").build())).put("Igloo", Pair.of("Iglu", ImmutableMap.builder().put("minecraft:igloo/igloo_bottom", "minecraft:igloo/bottom").put("minecraft:igloo/igloo_middle", "minecraft:igloo/middle").put("minecraft:igloo/igloo_top", "minecraft:igloo/top").build())).put("Ocean_Ruin", Pair.of("ORP", ImmutableMap.builder().put("minecraft:ruin/big_ruin1_brick", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_ruin2_brick", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_ruin3_brick", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_ruin8_brick", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_ruin1_cracked", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_ruin2_cracked", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_ruin3_cracked", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_ruin8_cracked", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_ruin1_mossy", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_ruin2_mossy", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_ruin3_mossy", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_ruin8_mossy", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_ruin_warm4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_ruin_warm5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_ruin_warm6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_ruin_warm7", "minecraft:underwater_ruin/big_warm_7").put("minecraft:ruin/ruin1_brick", "minecraft:underwater_ruin/brick_1").put("minecraft:ruin/ruin2_brick", "minecraft:underwater_ruin/brick_2").put("minecraft:ruin/ruin3_brick", "minecraft:underwater_ruin/brick_3").put("minecraft:ruin/ruin4_brick", "minecraft:underwater_ruin/brick_4").put("minecraft:ruin/ruin5_brick", "minecraft:underwater_ruin/brick_5").put("minecraft:ruin/ruin6_brick", "minecraft:underwater_ruin/brick_6").put("minecraft:ruin/ruin7_brick", "minecraft:underwater_ruin/brick_7").put("minecraft:ruin/ruin8_brick", "minecraft:underwater_ruin/brick_8").put("minecraft:ruin/ruin1_cracked", "minecraft:underwater_ruin/cracked_1").put("minecraft:ruin/ruin2_cracked", "minecraft:underwater_ruin/cracked_2").put("minecraft:ruin/ruin3_cracked", "minecraft:underwater_ruin/cracked_3").put("minecraft:ruin/ruin4_cracked", "minecraft:underwater_ruin/cracked_4").put("minecraft:ruin/ruin5_cracked", "minecraft:underwater_ruin/cracked_5").put("minecraft:ruin/ruin6_cracked", "minecraft:underwater_ruin/cracked_6").put("minecraft:ruin/ruin7_cracked", "minecraft:underwater_ruin/cracked_7").put("minecraft:ruin/ruin8_cracked", "minecraft:underwater_ruin/cracked_8").put("minecraft:ruin/ruin1_mossy", "minecraft:underwater_ruin/mossy_1").put("minecraft:ruin/ruin2_mossy", "minecraft:underwater_ruin/mossy_2").put("minecraft:ruin/ruin3_mossy", "minecraft:underwater_ruin/mossy_3").put("minecraft:ruin/ruin4_mossy", "minecraft:underwater_ruin/mossy_4").put("minecraft:ruin/ruin5_mossy", "minecraft:underwater_ruin/mossy_5").put("minecraft:ruin/ruin6_mossy", "minecraft:underwater_ruin/mossy_6").put("minecraft:ruin/ruin7_mossy", "minecraft:underwater_ruin/mossy_7").put("minecraft:ruin/ruin8_mossy", "minecraft:underwater_ruin/mossy_8").put("minecraft:ruin/ruin_warm1", "minecraft:underwater_ruin/warm_1").put("minecraft:ruin/ruin_warm2", "minecraft:underwater_ruin/warm_2").put("minecraft:ruin/ruin_warm3", "minecraft:underwater_ruin/warm_3").put("minecraft:ruin/ruin_warm4", "minecraft:underwater_ruin/warm_4").put("minecraft:ruin/ruin_warm5", "minecraft:underwater_ruin/warm_5").put("minecraft:ruin/ruin_warm6", "minecraft:underwater_ruin/warm_6").put("minecraft:ruin/ruin_warm7", "minecraft:underwater_ruin/warm_7").put("minecraft:ruin/ruin_warm8", "minecraft:underwater_ruin/warm_8").put("minecraft:ruin/big_brick_1", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_brick_2", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_brick_3", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_brick_8", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_mossy_1", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_mossy_2", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_mossy_3", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_mossy_8", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_cracked_1", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_cracked_2", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_cracked_3", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_cracked_8", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_warm_4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_warm_5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_warm_6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_warm_7", "minecraft:underwater_ruin/big_warm_7").build())).build();
 
    public ChunkStructuresTemplateRenameFix(Schema schema, boolean flag) {
       super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkToProtochunkFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkToProtochunkFix.java
index 43fcf13508c9132355d1cb28ffbf41797806b636..5f1f7e5150ebdbd762bb6bd62bd80e2a6c808ecd 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkToProtochunkFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkToProtochunkFix.java
@@ -36,7 +36,7 @@ public class ChunkToProtochunkFix extends DataFix {
       OpticFinder<?> opticFinder = DSL.fieldFinder("Level", type3);
       OpticFinder<?> opticFinder2 = DSL.fieldFinder("TileTicks", type5);
       return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("ChunkToProtoChunkFix", type, this.getOutputSchema().getType(References.CHUNK), (typed) -> typed.updateTyped(opticFinder, type4, (typedx) -> {
-            Optional<? extends Stream<? extends Dynamic<?>>> optional = typedx.getOptionalTyped(opticFinder2).flatMap((typed) -> typed.write().result()).flatMap((dynamicx) -> dynamicx.asStreamOpt().result());
+            Optional<? extends Stream<? extends Dynamic<?>>> optional = typedx.getOptionalTyped(opticFinder2).flatMap((typedIn) -> typedIn.write().result()).flatMap((dynamicx) -> dynamicx.asStreamOpt().result());
             Dynamic<?> dynamic = typedx.get(DSL.remainderFinder());
             boolean flag = dynamic.get("TerrainPopulated").asBoolean(false) && (!dynamic.get("LightPopulated").asNumber().result().isPresent() || dynamic.get("LightPopulated").asBoolean(false));
             dynamic = dynamic.set("Status", dynamic.createString(flag ? "mobs_spawned" : "empty"));
@@ -60,7 +60,7 @@ public class ChunkToProtochunkFix extends DataFix {
                Dynamic<?> dynamic2 = dynamic;
                List<ShortList> list = IntStream.range(0, 16).mapToObj((ix) -> new ShortArrayList()).collect(Collectors.toList());
                if (optional.isPresent()) {
-                  ((Stream)optional.get()).forEach((dynamicx) -> {
+                  optional.get().forEach((dynamicx) -> {
                      int i = dynamicx.get("x").asInt(0);
                      int i2 = dynamicx.get("y").asInt(0);
                      int i3 = dynamicx.get("z").asInt(0);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
index eb5f60bc362f0d553c84a4289fe31903e48ae9da..685e1d6b5d52b60460e5ad2e5a042e452d6c2e2d 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
@@ -4,5 +4,6 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class DyeItemRenameFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:cactus_green", "minecraft:green_dye").put("minecraft:rose_red", "minecraft:red_dye").put("minecraft:dandelion_yellow", "minecraft:yellow_dye").build();
+   // MagmaCube - decompile error
+   public static final Map<String, String> RENAMED_IDS = (Map) ImmutableMap.builder().put("minecraft:cactus_green", "minecraft:green_dye").put("minecraft:rose_red", "minecraft:red_dye").put("minecraft:dandelion_yellow", "minecraft:yellow_dye").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
index 732ef8de96700e104602546fda25abf5c2ea17f2..e3433eaffe90ada26867896a95ce0b39462fce3a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
@@ -18,7 +18,7 @@ import java.util.function.Function;
 import net.minecraft.util.datafix.schemas.NamespacedSchema;
 
 public class EntityBlockStateFix extends DataFix {
-   private static final Map<String, Integer> MAP = (Map)DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
+   private static final Map<String, Integer> MAP = DataFixUtils.make(Maps.newHashMap(), (hashMap) -> { // MagmaCube - type
       hashMap.put("minecraft:air", 0);
       hashMap.put("minecraft:stone", 1);
       hashMap.put("minecraft:grass", 2);
@@ -319,7 +319,7 @@ public class EntityBlockStateFix extends DataFix {
       Type<Either<Pair<String, Dynamic<?>>, Unit>> type2 = DSL.optional(DSL.field("BlockState", DSL.named(References.BLOCK_STATE.typeName(), DSL.remainderType())));
       Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
       return typed.update(type.finder(), type2, (either) -> {
-         int i = either.map((pair) -> (Integer)((Either)pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId), (unit) -> {
+         int i = either.map((pair) -> (Integer)(pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId), (unit) -> { // MagmaCube - decompile error
             Optional<Number> optional = dynamic.get("TileID").asNumber().result();
             return (Integer)optional.map(Number::intValue).orElseGet(() -> dynamic.get("Tile").asByte((byte)0) & 255);
          });
@@ -333,7 +333,7 @@ public class EntityBlockStateFix extends DataFix {
       Type<Pair<String, Dynamic<?>>> type2 = DSL.field(s3, DSL.named(References.BLOCK_STATE.typeName(), DSL.remainderType()));
       Dynamic<?> dynamic = typed.getOrCreate(DSL.remainderFinder());
       return typed.update(type.finder(), type2, (pair) -> {
-         int i = ((Either)pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId);
+         int i = (pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId); // MagmaCube - decompile error
          int i2 = dynamic.get(s2).asInt(0) & 15;
          return Pair.of(References.BLOCK_STATE.typeName(), BlockStateData.getTag(i << 4 | i2));
       }).set(DSL.remainderFinder(), dynamic.remove(s2));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
index 35b5f4a293d0b2a91ca84e1f73cfcb2061debdce..98cfd816fa1b73bd303ecdd4436debf37d8d794d 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
@@ -5,8 +5,10 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class EntityCodSalmonFix extends SimplestEntityRenameFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:salmon_mob", "minecraft:salmon").put("minecraft:cod_mob", "minecraft:cod").build();
-   public static final Map<String, String> RENAMED_EGG_IDS = ImmutableMap.builder().put("minecraft:salmon_mob_spawn_egg", "minecraft:salmon_spawn_egg").put("minecraft:cod_mob_spawn_egg", "minecraft:cod_spawn_egg").build();
+   // MagmaCube start - decompile error
+   public static final Map<String, String> RENAMED_IDS = (Map) ImmutableMap.builder().put("minecraft:salmon_mob", "minecraft:salmon").put("minecraft:cod_mob", "minecraft:cod").build();
+   public static final Map<String, String> RENAMED_EGG_IDS = (Map) ImmutableMap.builder().put("minecraft:salmon_mob_spawn_egg", "minecraft:salmon_spawn_egg").put("minecraft:cod_mob_spawn_egg", "minecraft:cod_spawn_egg").build();
+   // MagmaCube end - decompile error
 
    public EntityCodSalmonFix(Schema schema, boolean flag) {
       super("EntityCodSalmonFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
index 7476bf9358a6be2807ddf7a75d65d34f2f354548..893faf22faf8b23ef2545eaef9eecccf33ee068d 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
@@ -39,11 +39,11 @@ public class EntityEquipmentToArmorAndHandFix extends DataFix {
             List<IS> list = optional.get();
             IS object = (IS)(type.read(dynamic.emptyMap()).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created empty itemstack."))).getFirst();
             if (!list.isEmpty()) {
-               either = Either.left(Lists.newArrayList(new Object[]{list.get(0), object}));
+               either = Either.left((List<IS>) Lists.newArrayList(new Object[]{list.get(0), object})); // MagmaCube - decompile error
             }
 
             if (list.size() > 1) {
-               List<IS> list2 = Lists.newArrayList(new Object[]{object, object, object, object});
+               List<IS> list2 = (List<IS>) Lists.newArrayList(new Object[]{object, object, object, object}); // MagmaCube - decompile error
 
                for(int i = 1; i < Math.min(list.size(), 5); ++i) {
                   list2.set(i - 1, list.get(i));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
index c99abb0768d4d18160a05dfc9cf4f9c80865ebd8..caa037ceb5e99fd40cef90473c18295d946ff0cf 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
@@ -93,8 +93,10 @@ public class EntityIdFix extends DataFix {
    }
 
    public TypeRewriteRule makeRule() {
-      TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-      TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+      // MagmaCube start - decompile error
+      TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+      TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
+      // MagmaCube end - decompile error
       Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
       Type<?> type2 = this.getOutputSchema().getType(References.ITEM_STACK);
       return TypeRewriteRule.seq(this.convertUnchecked("item stack entity name hook converter", type, type2), this.fixTypeEverywhere("EntityIdFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> (String)ID_MAP.getOrDefault(s, s))));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
index ea3792159d52352066094fd4b9d03e9f48875bc5..138624138ee89ff1faa5776f35dd7076c87318f7 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
@@ -22,8 +22,10 @@ public class EntityMinecartIdentifiersFix extends DataFix {
    }
 
    public TypeRewriteRule makeRule() {
-      TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-      TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+      // MagmaCube start - decompile error
+      TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+      TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
+      // MagmaCube end - decompile error
       return this.fixTypeEverywhere("EntityMinecartIdentifiersFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
             if (!Objects.equals(pair.getFirst(), "Minecart")) {
                return pair;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
index 70d6216db5e6a12edb40e2bf4b36e9430ae11a41..508d96d4741634095a0d1b00eae17d4884d64455 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
@@ -6,7 +6,8 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityPufferfishRenameFix extends SimplestEntityRenameFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:puffer_fish_spawn_egg", "minecraft:pufferfish_spawn_egg").build();
+   // MagmaCube - decompile error
+   public static final Map<String, String> RENAMED_IDS = (Map) ImmutableMap.builder().put("minecraft:puffer_fish_spawn_egg", "minecraft:pufferfish_spawn_egg").build();
 
    public EntityPufferfishRenameFix(Schema schema, boolean flag) {
       super("EntityPufferfishRenameFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
index 18845b17a8cfbfc7eeacc9c7ecbf50d7b1bac7b1..a2a9682058ebf7909370bc450fba541c2800e1f0 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
@@ -6,7 +6,8 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityRavagerRenameFix extends SimplestEntityRenameFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:illager_beast_spawn_egg", "minecraft:ravager_spawn_egg").build();
+   // MagmaCube - decompile error
+   public static final Map<String, String> RENAMED_IDS = (Map) ImmutableMap.builder().put("minecraft:illager_beast_spawn_egg", "minecraft:ravager_spawn_egg").build();
 
    public EntityRavagerRenameFix(Schema schema, boolean flag) {
       super("EntityRavagerRenameFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
index ec474ce34fa8e2f8c930a78fcf1e1d076d93df82..d81ff74539c5d5ab3c68ffaade9697142a4fb6cd 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
@@ -18,8 +18,10 @@ public abstract class EntityRenameFix extends DataFix {
    }
 
    public TypeRewriteRule makeRule() {
-      TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-      TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+       // MagmaCube start - decompile error
+      TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+      TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
+       // MagmaCube end - decompile error
       return this.fixTypeEverywhere(this.name, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
             String s = (String)pair.getFirst();
             Type<?> type = (Type)taggedChoiceType.types().get(s);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
index 561a29ef674c3f38630eaaa9fd12d20f93349200..03598987df017dad1c15068b73e85d7ec38cfcdf 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
@@ -61,7 +61,7 @@ public class EntityRidingToPassengersFix extends DataFix {
                      return optional.orElseThrow(() -> new IllegalStateException("Should always have an entity tree here"));
                   }
 
-                  pair2 = (new Typed(type, dynamicOps, optional2.get())).getOptional(opticFinder).orElseThrow(() -> new IllegalStateException("Should always have an entity here"));
+                  pair2 = (new Typed<>(type, dynamicOps, optional2.get())).getOptional(opticFinder).orElseThrow(() -> new IllegalStateException("Should always have an entity here"));
                }
             }), this.writeAndRead("player RootVehicle injecter", type8, type9));
       }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
index 5f32eccdd34a9d07c2b6b7b190570bbbb566df32..9813965411bc5703ede0792778727b8f56b133f6 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
@@ -5,9 +5,11 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class EntityTheRenameningFix extends SimplestEntityRenameFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:commandblock_minecart", "minecraft:command_block_minecart").put("minecraft:ender_crystal", "minecraft:end_crystal").put("minecraft:snowman", "minecraft:snow_golem").put("minecraft:evocation_illager", "minecraft:evoker").put("minecraft:evocation_fangs", "minecraft:evoker_fangs").put("minecraft:illusion_illager", "minecraft:illusioner").put("minecraft:vindication_illager", "minecraft:vindicator").put("minecraft:villager_golem", "minecraft:iron_golem").put("minecraft:xp_orb", "minecraft:experience_orb").put("minecraft:xp_bottle", "minecraft:experience_bottle").put("minecraft:eye_of_ender_signal", "minecraft:eye_of_ender").put("minecraft:fireworks_rocket", "minecraft:firework_rocket").build();
-   public static final Map<String, String> RENAMED_BLOCKS = ImmutableMap.builder().put("minecraft:portal", "minecraft:nether_portal").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:stripped_oak_bark", "minecraft:stripped_oak_wood").put("minecraft:stripped_spruce_bark", "minecraft:stripped_spruce_wood").put("minecraft:stripped_birch_bark", "minecraft:stripped_birch_wood").put("minecraft:stripped_jungle_bark", "minecraft:stripped_jungle_wood").put("minecraft:stripped_acacia_bark", "minecraft:stripped_acacia_wood").put("minecraft:stripped_dark_oak_bark", "minecraft:stripped_dark_oak_wood").put("minecraft:mob_spawner", "minecraft:spawner").build();
-   public static final Map<String, String> RENAMED_ITEMS = ImmutableMap.builder().putAll(RENAMED_BLOCKS).put("minecraft:clownfish", "minecraft:tropical_fish").put("minecraft:chorus_fruit_popped", "minecraft:popped_chorus_fruit").put("minecraft:evocation_illager_spawn_egg", "minecraft:evoker_spawn_egg").put("minecraft:vindication_illager_spawn_egg", "minecraft:vindicator_spawn_egg").build();
+   // MagmaCube start - decompile error
+   public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:commandblock_minecart", "minecraft:command_block_minecart").put("minecraft:ender_crystal", "minecraft:end_crystal").put("minecraft:snowman", "minecraft:snow_golem").put("minecraft:evocation_illager", "minecraft:evoker").put("minecraft:evocation_fangs", "minecraft:evoker_fangs").put("minecraft:illusion_illager", "minecraft:illusioner").put("minecraft:vindication_illager", "minecraft:vindicator").put("minecraft:villager_golem", "minecraft:iron_golem").put("minecraft:xp_orb", "minecraft:experience_orb").put("minecraft:xp_bottle", "minecraft:experience_bottle").put("minecraft:eye_of_ender_signal", "minecraft:eye_of_ender").put("minecraft:fireworks_rocket", "minecraft:firework_rocket").build();
+   public static final Map<String, String> RENAMED_BLOCKS = ImmutableMap.<String, String>builder().put("minecraft:portal", "minecraft:nether_portal").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:stripped_oak_bark", "minecraft:stripped_oak_wood").put("minecraft:stripped_spruce_bark", "minecraft:stripped_spruce_wood").put("minecraft:stripped_birch_bark", "minecraft:stripped_birch_wood").put("minecraft:stripped_jungle_bark", "minecraft:stripped_jungle_wood").put("minecraft:stripped_acacia_bark", "minecraft:stripped_acacia_wood").put("minecraft:stripped_dark_oak_bark", "minecraft:stripped_dark_oak_wood").put("minecraft:mob_spawner", "minecraft:spawner").build();
+   public static final Map<String, String> RENAMED_ITEMS = ImmutableMap.<String, String>builder().putAll(RENAMED_BLOCKS).put("minecraft:clownfish", "minecraft:tropical_fish").put("minecraft:chorus_fruit_popped", "minecraft:popped_chorus_fruit").put("minecraft:evocation_illager_spawn_egg", "minecraft:evoker_spawn_egg").put("minecraft:vindication_illager_spawn_egg", "minecraft:vindicator_spawn_egg").build();
+   // MagmaCube end - decompile error
    private static final String MINECRAFT_BRED = "minecraft:bred_";
 
    public EntityTheRenameningFix(Schema schema, boolean flag) {
@@ -15,8 +17,10 @@ public class EntityTheRenameningFix extends SimplestEntityRenameFix {
    }
 
    protected String rename(String s) {
-      if (s.startsWith("minecraft:bred_")) {
-         s = "minecraft:" + s.substring("minecraft:bred_".length());
+      // MagmaCube start - use constant field
+      if (s.startsWith(MINECRAFT_BRED)) {
+         s = "minecraft:" + s.substring(MINECRAFT_BRED.length());
+         // MagmaCube end - use constant field
       }
 
       return (String)RENAMED_IDS.getOrDefault(s, s);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
index fd44ce4d6a6b7778765c5dff87fc8ed620b2c448..a7246bb0215cecef859d86fa0a0afc327e8563b5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
@@ -62,9 +62,9 @@ public class EntityUUIDFix extends AbstractUUIDFix {
    }
 
    private static Dynamic<?> updatePiglin(Dynamic<?> dynamic) {
-      return dynamic.update("Brain", (dynamicx) -> dynamicx.update("memories", (dynamic) -> dynamic.update("minecraft:angry_at", (dynamicx) -> replaceUUIDString(dynamicx, "value", "value").orElseGet(() -> {
+      return dynamic.update("Brain", (dynamicx) -> dynamicx.update("memories", (dynamicIn) -> dynamicIn.update("minecraft:angry_at", (dynamicxIn) -> replaceUUIDString(dynamicxIn, "value", "value").orElseGet(() -> {
                   LOGGER.warn("angry_at has no value.");
-                  return dynamicx;
+                  return dynamicxIn;
                }))));
    }
 
@@ -117,7 +117,7 @@ public class EntityUUIDFix extends AbstractUUIDFix {
    }
 
    public static Dynamic<?> updateLivingEntity(Dynamic<?> dynamic) {
-      return dynamic.update("Attributes", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> dynamicx.update("Modifiers", (dynamic2) -> dynamicx.createList(dynamic2.asStream().map((dynamic) -> replaceUUIDLeastMost(dynamic, "UUID", "UUID").orElse(dynamic)))))));
+      return dynamic.update("Attributes", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> dynamicx.update("Modifiers", (dynamic2In) -> dynamicx.createList(dynamic2In.asStream().map((dynamicIn) -> replaceUUIDLeastMost(dynamicIn, "UUID", "UUID").orElse(dynamicIn)))))));
    }
 
    private static Dynamic<?> updateProjectile(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
index 2c071b40fc38e16226d4e9ef75279038ccb40f65..c61c37cdd7401ab5d3e6010c6b7c187ab02885a0 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
@@ -6,7 +6,8 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityZombifiedPiglinRenameFix extends SimplestEntityRenameFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:zombie_pigman_spawn_egg", "minecraft:zombified_piglin_spawn_egg").build();
+   // MagmaCube - decompile error
+   public static final Map<String, String> RENAMED_IDS = (Map) ImmutableMap.builder().put("minecraft:zombie_pigman_spawn_egg", "minecraft:zombified_piglin_spawn_egg").build();
 
    public EntityZombifiedPiglinRenameFix(Schema schema) {
       super("EntityZombifiedPiglinRenameFix", schema, true);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java b/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
index 0e2ca91305c38cf924cbbd0922a6f4d574802008..a80df0b04dc6b462a93b7c7d0c097ba8f31504c5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
@@ -24,6 +24,6 @@ public class ForcePoiRebuild extends DataFix {
    }
 
    private static <T> Dynamic<T> cap(Dynamic<T> dynamic) {
-      return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.remove("Valid"))));
+      return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicz) -> dynamicz.remove("Valid")))); // MagmaCube - decompile error
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
index a65b340a155a13c45b191470d7034f024ce63b7d..160a55217033290e63a0a3d3a002d283ce9de353 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
@@ -50,8 +50,10 @@ public class FurnaceRecipeFix extends DataFix {
          int i3 = dynamic.get(s2).asInt(0);
          if (i3 > 0) {
             optional.ifPresent((dynamicx) -> {
-               Optional<? extends Pair<R, ? extends Dynamic<?>>> optional = type.read(dynamicx).result();
-               optional.ifPresent((pair) -> list.add(Pair.of(pair.getFirst(), i3)));
+               // MagmaCube start - decompile error
+               Optional<? extends Pair<R, ? extends Dynamic<?>>> optionalx = type.read(dynamicx).result();
+               optionalx.ifPresent((pair) -> list.add(Pair.of(pair.getFirst(), i3)));
+               // MagmaCube end - decompile error
             });
          }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
index 7a949863f2c208846a45cce32b651c86c2716d7d..4e160179f2074ac33c7d2a37d3eb9a7d89c2e2af 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
@@ -12,6 +12,6 @@ public class GossipUUIDFix extends NamedEntityFix {
    }
 
    protected Typed<?> fix(Typed<?> typed) {
-      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Gossips", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> AbstractUUIDFix.replaceUUIDLeastMost(dynamic, "Target", "Target").orElse(dynamic))).map(dynamicx::createList), dynamicx)));
+      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Gossips", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicIn) -> AbstractUUIDFix.replaceUUIDLeastMost(dynamicIn, "Target", "Target").orElse(dynamicIn))).map(dynamicx::createList), dynamicx)));
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java b/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
index b839a4acd3d3eb0aca5703369bb654b6fa81c306..58855da3be2e1df9c806e9cd1117385ce803a7fa 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
@@ -23,7 +23,7 @@ public class IglooMetadataRemovalFix extends DataFix {
    }
 
    private static <T> Dynamic<T> removeIglooPieces(Dynamic<T> dynamic) {
-      return dynamic.asStreamOpt().map((stream) -> stream.filter((dynamic) -> !isIglooPiece(dynamic))).map(dynamic::createList).result().orElse(dynamic);
+      return dynamic.asStreamOpt().map((stream) -> stream.filter((dynamicIn) -> !isIglooPiece(dynamicIn))).map(dynamic::createList).result().orElse(dynamic);
    }
 
    private static boolean isIglooPiece(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
index 794ab398b7a06db5ce3e4d38906644bad65cad67..1ea58f3a32680bf23738795975c0586ba763e4f5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
@@ -20,7 +20,7 @@ public class ItemLoreFix extends DataFix {
    protected TypeRewriteRule makeRule() {
       Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
       OpticFinder<?> opticFinder = type.findField("tag");
-      return this.fixTypeEverywhereTyped("Item Lore componentize", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("display", (dynamicx) -> dynamicx.update("Lore", (dynamic) -> DataFixUtils.orElse(dynamic.asStreamOpt().map(ItemLoreFix::fixLoreList).map(dynamic::createList).result(), dynamic))))));
+      return this.fixTypeEverywhereTyped("Item Lore componentize", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("display", (dynamicx) -> dynamicx.update("Lore", (dynamicIn) -> DataFixUtils.orElse(dynamicIn.asStreamOpt().map(ItemLoreFix::fixLoreList).map(dynamicIn::createList).result(), dynamicIn))))));
    }
 
    private static <T> Stream<Dynamic<T>> fixLoreList(Stream<Dynamic<T>> stream) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
index 384d7390aad51fb1ef7582b6b11b5b0d87ab1f71..46e22f372cfebd24caa809a704819f0a013caa16 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
@@ -13,7 +13,7 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import java.util.Optional;
 
 public class ItemStackEnchantmentNamesFix extends DataFix {
-   private static final Int2ObjectMap<String> MAP = (Int2ObjectMap)DataFixUtils.make(new Int2ObjectOpenHashMap(), (int2ObjectOpenHashMap) -> {
+   private static final Int2ObjectMap<String> MAP = DataFixUtils.make(new Int2ObjectOpenHashMap<>(), (int2ObjectOpenHashMap) -> {
       int2ObjectOpenHashMap.put(0, "minecraft:protection");
       int2ObjectOpenHashMap.put(1, "minecraft:fire_protection");
       int2ObjectOpenHashMap.put(2, "minecraft:feather_falling");
@@ -61,11 +61,11 @@ public class ItemStackEnchantmentNamesFix extends DataFix {
    }
 
    private Dynamic<?> fixTag(Dynamic<?> dynamic) {
-      Optional<? extends Dynamic<?>> optional = dynamic.get("ench").asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.set("id", dynamic.createString((String)MAP.getOrDefault(dynamic.get("id").asInt(0), "null"))))).map(dynamic::createList).result();
+      Optional<? extends Dynamic<?>> optional = dynamic.get("ench").asStreamOpt().map((stream) -> stream.map((dynamicIn) -> dynamicIn.set("id", dynamicIn.createString((String)MAP.getOrDefault(dynamicIn.get("id").asInt(0), "null"))))).map(dynamic::createList).result();
       if (optional.isPresent()) {
          dynamic = dynamic.remove("ench").set("Enchantments", optional.get());
       }
 
-      return dynamic.update("StoredEnchantments", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.set("id", dynamic.createString((String)MAP.getOrDefault(dynamic.get("id").asInt(0), "null"))))).map(dynamicx::createList).result(), dynamicx));
+      return dynamic.update("StoredEnchantments", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamicIn) -> dynamicIn.set("id", dynamicIn.createString((String)MAP.getOrDefault(dynamicIn.get("id").asInt(0), "null"))))).map(dynamicx::createList).result(), dynamicx));
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
index 503d5f23d5b3a232d834f93d979118d6fe6b744d..a09a223a9fa0ef84224edc356e26f11979d376ef 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
@@ -20,11 +20,11 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix {
    }
 
    public Dynamic<?> fixTag(Dynamic<?> dynamic) {
-      return dynamic.update("pages", (dynamic2) -> DataFixUtils.orElse(dynamic2.asStreamOpt().map((stream) -> stream.map((dynamic) -> {
-               if (!dynamic.asString().result().isPresent()) {
-                  return dynamic;
+      return dynamic.update("pages", (dynamic2) -> DataFixUtils.orElse(dynamic2.asStreamOpt().map((stream) -> stream.map((dynamicIn) -> {
+               if (!dynamicIn.asString().result().isPresent()) {
+                  return dynamicIn;
                } else {
-                  String s = dynamic.asString("");
+                  String s = dynamicIn.asString("");
                   Component component = null;
                   if (!"null".equals(s) && !StringUtils.isEmpty(s)) {
                      if (s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"' || s.charAt(0) == '{' && s.charAt(s.length() - 1) == '}') {
@@ -60,7 +60,7 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix {
                      component = TextComponent.EMPTY;
                   }
 
-                  return dynamic.createString(Component.Serializer.toJson(component));
+                  return dynamicIn.createString(Component.Serializer.toJson(component));
                }
             })).map(dynamic::createList).result(), dynamic.emptyList()));
    }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java b/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
index 34bb35a059a41c24be484c839b98c328b254a70a..f0ee7e6dc1f0073c44097613be46c0ca6e586d9d 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
@@ -10,7 +10,7 @@ import java.util.Map;
 import java.util.Optional;
 
 public class JigsawRotationFix extends DataFix {
-   private static final Map<String, String> RENAMES = ImmutableMap.builder().put("down", "down_south").put("up", "up_north").put("north", "north_up").put("south", "south_up").put("west", "west_up").put("east", "east_up").build();
+   private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("down", "down_south").put("up", "up_north").put("north", "north_up").put("south", "south_up").put("west", "west_up").put("east", "east_up").build(); // MagmaCube - decompile error
 
    public JigsawRotationFix(Schema schema, boolean flag) {
       super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
index 3303e626a7ff9ca834227d07de7127570c21b35a..6df1a64ce2fd5eb6ecb24cbc9c82b2dbd1502b71 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
@@ -73,10 +73,10 @@ public class LeavesFix extends DataFix {
          OpticFinder<?> opticFinder3 = DSL.typeFinder(type3);
          return this.fixTypeEverywhereTyped("Leaves fix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> {
                int[] ints = new int[]{0};
-               Typed<?> typed2 = typedx.updateTyped(opticFinder2, (typed) -> {
-                  Int2ObjectMap<LeavesFix.LeavesSection> int2ObjectMap = new Int2ObjectOpenHashMap((Map)typed.getAllTyped(opticFinder3).stream().map((typedx) -> new LeavesFix.LeavesSection(typedx, this.getInputSchema())).collect(Collectors.toMap(LeavesFix.Section::getIndex, (leavesSection) -> leavesSection)));
+               Typed<?> typed2 = typedx.updateTyped(opticFinder2, (typedIn) -> {
+                  Int2ObjectMap<LeavesFix.LeavesSection> int2ObjectMap = new Int2ObjectOpenHashMap((Map)typedIn.getAllTyped(opticFinder3).stream().map((typedxIn) -> new LeavesFix.LeavesSection(typedxIn, this.getInputSchema())).collect(Collectors.toMap(LeavesFix.Section::getIndex, (leavesSection) -> leavesSection)));
                   if (int2ObjectMap.values().stream().allMatch(LeavesFix.Section::isSkippable)) {
-                     return typed;
+                     return typedIn;
                   } else {
                      List<IntSet> list = Lists.newArrayList();
 
@@ -135,7 +135,7 @@ public class LeavesFix extends DataFix {
                         }
                      }
 
-                     return typed.updateTyped(opticFinder3, (typedx) -> ((LeavesFix.LeavesSection)int2ObjectMap.get((typedx.get(DSL.remainderFinder())).get("Y").asInt(0))).write(typedx));
+                     return typedIn.updateTyped(opticFinder3, (typedxIn) -> ((LeavesFix.LeavesSection)int2ObjectMap.get((typedxIn.get(DSL.remainderFinder())).get("Y").asInt(0))).write(typedxIn));
                   }
                });
                if (ints[0] != 0) {
@@ -295,7 +295,7 @@ public class LeavesFix extends DataFix {
             throw new IllegalStateException("Block state type is not what was expected.");
          } else {
             Optional<List<Pair<String, Dynamic<?>>>> optional = typed.getOptional(this.paletteFinder);
-            this.palette = optional.map((list) -> list.stream().map(Pair::getSecond).collect(Collectors.toList())).orElse(ImmutableList.of());
+            this.palette = (List) optional.map((list) -> list.stream().map(Pair::getSecond).collect(Collectors.toList())).orElse(ImmutableList.of());
             Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
             this.index = dynamic.get("Y").asInt(0);
             this.readStorage(dynamic);
@@ -314,7 +314,7 @@ public class LeavesFix extends DataFix {
       }
 
       public Typed<?> write(Typed<?> typed) {
-         return this.isSkippable() ? typed : typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.set("BlockStates", dynamic.createLongList(Arrays.stream(this.storage.getRaw())))).set(this.paletteFinder, this.palette.stream().map((dynamic) -> Pair.of(References.BLOCK_STATE.typeName(), dynamic)).collect(Collectors.toList()));
+         return this.isSkippable() ? typed : typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.set("BlockStates", dynamic.createLongList(Arrays.stream(this.storage.getRaw())))).set(this.paletteFinder, (List) this.palette.stream().map((dynamic) -> Pair.of(References.BLOCK_STATE.typeName(), dynamic)).collect(Collectors.toList()));
       }
 
       public boolean isSkippable() {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java
index f4f0cbea2bc23f7d5147640b672cd56c818ccf9c..71539d0e5a9514ac7e50f636b31b5def8dc14bbc 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java
@@ -170,7 +170,8 @@ public class LevelDataGeneratorOptionsFix extends DataFix {
       }
 
       T object = (T)dynamicOps.createList(list.stream().map((pair) -> dynamicOps.createMap(ImmutableMap.of(dynamicOps.createString("height"), dynamicOps.createInt(pair.getFirst()), dynamicOps.createString("block"), dynamicOps.createString((String)pair.getSecond())))));
-      T object2 = (T)dynamicOps.createMap((Map)map.entrySet().stream().map((entry) -> Pair.of(dynamicOps.createString(((String)entry.getKey()).toLowerCase(Locale.ROOT)), dynamicOps.createMap((Map)((Map)entry.getValue()).entrySet().stream().map((entryx) -> Pair.of(dynamicOps.createString((String)entryx.getKey()), dynamicOps.createString((String)entryx.getValue()))).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond))))).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)));
+      // MagmaCube - decompile error
+      T object2 = (T)dynamicOps.createMap(map.entrySet().stream().map((entry) -> Pair.of(dynamicOps.createString(((String)entry.getKey()).toLowerCase(Locale.ROOT)), dynamicOps.createMap((entry.getValue()).entrySet().stream().map((entryx) -> Pair.of(dynamicOps.createString((String)entryx.getKey()), dynamicOps.createString((String)entryx.getValue()))).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond))))).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)));
       return new Dynamic(dynamicOps, dynamicOps.createMap(ImmutableMap.of(dynamicOps.createString("layers"), object, dynamicOps.createString("biome"), dynamicOps.createString(s2), dynamicOps.createString("structures"), object2)));
    }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
index 94e97dd93f8a0063a91249a3720ada322b4a251b..85d106afadb5f636cec30749d4bfcddec33587c8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
@@ -59,16 +59,16 @@ public class LevelFlatGeneratorInfoFix extends DataFix {
             stringBuilder.append((String)StreamSupport.stream(LAYER_SPLITTER.split(s3).spliterator(), false).map((sx) -> {
                List<String> list = splitter.splitToList(sx);
                int i2;
-               String s2;
+               String s2x; // MagmaCube - decompile error
                if (list.size() == 2) {
                   i2 = NumberUtils.toInt((String)list.get(0));
-                  s2 = (String)list.get(1);
+                  s2x = (String)list.get(1); // MagmaCube - decompile error
                } else {
                   i2 = 1;
-                  s2 = (String)list.get(0);
+                  s2x = (String)list.get(0); // MagmaCube - decompile error
                }
 
-               List<String> list2 = BLOCK_SPLITTER.splitToList(s2);
+               List<String> list2 = BLOCK_SPLITTER.splitToList(s2x); // MagmaCube - decompile error
                int i4 = ((String)list2.get(0)).equals("minecraft") ? 1 : 0;
                String s4 = (String)list2.get(i4);
                int i5 = i == 3 ? EntityBlockStateFix.getBlockId("minecraft:" + s4) : NumberUtils.toInt(s4, 0);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
index 3abc26264f0f8a341bf2bcc0c70469b78c2e8855..b8d115313e5bfca437796daad9c8babb740e8ada 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
@@ -23,13 +23,13 @@ public class LevelUUIDFix extends AbstractUUIDFix {
    }
 
    private Dynamic<?> updateDragonFight(Dynamic<?> dynamic) {
-      return dynamic.update("DimensionData", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("DragonFight", (dynamicx) -> replaceUUIDLeastMost(dynamicx, "DragonUUID", "Dragon").orElse(dynamicx)))));
+      return dynamic.update("DimensionData", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicIn) -> dynamicIn.update("DragonFight", (dynamicxIn) -> replaceUUIDLeastMost(dynamicxIn, "DragonUUID", "Dragon").orElse(dynamicxIn)))));
    }
 
    private Dynamic<?> updateCustomBossEvents(Dynamic<?> dynamic) {
-      return dynamic.update("CustomBossEvents", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("Players", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> createUUIDFromML(dynamicx).orElseGet(() -> {
+      return dynamic.update("CustomBossEvents", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicIn) -> dynamicIn.update("Players", (dynamic2) -> dynamicIn.createList(dynamic2.asStream().map((dynamicxIn) -> createUUIDFromML(dynamicxIn).orElseGet(() -> {
                         LOGGER.warn("CustomBossEvents contains invalid UUIDs.");
-                        return dynamicx;
+                        return dynamicxIn;
                      })))))));
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java b/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
index 8b2352b7aff870eec3c7aa12e32180249bdd54b5..40024a55aadf056db3ac7a60f6f8b1950c1ebba6 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
@@ -50,7 +50,7 @@ public class MissingDimensionFix extends DataFix {
          return this.fixTypeEverywhereTyped("MissingDimensionFix", type2, (typed) -> typed.updateTyped(fieldFinder, (typed2) -> typed2.updateTyped(opticFinder, (typed2x) -> {
                   if (!(typed2x.getValue() instanceof List)) {
                      throw new IllegalStateException("List exptected");
-                  } else if ((typed2x.getValue()).isEmpty()) {
+                  } else if (((List<?>) typed2x.getValue()).isEmpty()) {
                      Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
                      Dynamic<?> dynamic2 = this.recreateSettings(dynamic);
                      return DataFixUtils.orElse(compoundListType.readTyped(dynamic2).result().map(Pair::getFirst), typed2x);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
index d559136f77515816a85fea05cc261d8eb8fcd42b..74f97ba52e8a71a56da20fd7a1b9313d83a27e3d 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
@@ -32,10 +32,10 @@ public class MobSpawnerEntityIdentifiersFix extends DataFix {
 
          Optional<? extends Stream<? extends Dynamic<?>>> optional2 = dynamic.get("SpawnPotentials").asStreamOpt().result();
          if (optional2.isPresent()) {
-            dynamic = dynamic.set("SpawnPotentials", dynamic.createList(((Stream)optional2.get()).map((dynamicx) -> {
-               Optional<String> optional = dynamicx.get("Type").asString().result();
-               if (optional.isPresent()) {
-                  Dynamic<?> dynamic2 = (DataFixUtils.orElse(dynamicx.get("Properties").result(), dynamicx.emptyMap())).set("id", dynamicx.createString((String)optional.get()));
+            dynamic = dynamic.set("SpawnPotentials", dynamic.createList(optional2.get().map((dynamicx) -> {
+               Optional<String> optionalIn = dynamicx.get("Type").asString().result();
+               if (optionalIn.isPresent()) {
+                  Dynamic<?> dynamic2 = (DataFixUtils.orElse(dynamicx.get("Properties").result(), dynamicx.emptyMap())).set("id", dynamicx.createString((String)optionalIn.get()));
                   return dynamicx.set("Entity", dynamic2).remove("Type").remove("Properties");
                } else {
                   return dynamicx;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java b/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
index 818c99ae8ab994f42c1db3f3be954392a49ee138..fd6e160075d02ddd54190a895bc33137c6ff5bf1 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
@@ -34,7 +34,7 @@ public class NewVillageFix extends DataFix {
       OpticFinder<?> opticFinder2 = opticFinder.type().findField("Structures");
       OpticFinder<?> opticFinder3 = opticFinder2.type().findField("Starts");
       OpticFinder<List<Pair<String, SF>>> opticFinder4 = compoundListType.finder();
-      return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("NewVillageFix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.updateTyped(opticFinder3, (typedx) -> typedx.update(opticFinder4, (list) -> list.stream().filter((pair) -> !Objects.equals(pair.getFirst(), "Village")).map((pair) -> pair.mapFirst((s) -> s.equals("New_Village") ? "Village" : s)).collect(Collectors.toList()))).update(DSL.remainderFinder(), (dynamic) -> dynamic.update("References", (dynamicx) -> {
+      return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("NewVillageFix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.updateTyped(opticFinder3, (typedxIn) -> typedxIn.update(opticFinder4, (list) -> list.stream().filter((pair) -> !Objects.equals(pair.getFirst(), "Village")).map((pair) -> pair.mapFirst((s) -> s.equals("New_Village") ? "Village" : s)).collect(Collectors.toList()))).update(DSL.remainderFinder(), (dynamic) -> dynamic.update("References", (dynamicx) -> {
                      Optional<? extends Dynamic<?>> optional = dynamicx.get("New_Village").result();
                      return (DataFixUtils.orElse(optional.map((dynamic2) -> dynamicx.remove("New_Village").set("Village", dynamic2)), dynamicx)).remove("Village");
                   }))))), this.fixTypeEverywhereTyped("NewVillageStartFix", type2, (typed) -> typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("id", (dynamicx) -> Objects.equals(NamespacedSchema.ensureNamespaced(dynamicx.asString("")), "minecraft:new_village") ? dynamicx.createString("minecraft:village") : dynamicx))));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
index a6c0cb9d9b0e06305f23843b76c697161a87c595..deac157776f05c9debfd8fd46435e2817b5b4eb2 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
@@ -14,7 +14,7 @@ import java.util.stream.Collectors;
 
 public class OptionsKeyLwjgl3Fix extends DataFix {
    public static final String KEY_UNKNOWN = "key.unknown";
-   private static final Int2ObjectMap<String> MAP = (Int2ObjectMap)DataFixUtils.make(new Int2ObjectOpenHashMap(), (int2ObjectOpenHashMap) -> {
+   private static final Int2ObjectMap<String> MAP = DataFixUtils.make(new Int2ObjectOpenHashMap<>(), (int2ObjectOpenHashMap) -> {
       int2ObjectOpenHashMap.put(0, "key.unknown");
       int2ObjectOpenHashMap.put(11, "key.0");
       int2ObjectOpenHashMap.put(2, "key.1");
@@ -134,7 +134,7 @@ public class OptionsKeyLwjgl3Fix extends DataFix {
    }
 
    public TypeRewriteRule makeRule() {
-      return this.fixTypeEverywhereTyped("OptionsKeyLwjgl3Fix", this.getInputSchema().getType(References.OPTIONS), (typed) -> typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.getMapValues().map((map) -> dynamic.createMap((Map)map.entrySet().stream().map((entry) -> {
+      return this.fixTypeEverywhereTyped("OptionsKeyLwjgl3Fix", this.getInputSchema().getType(References.OPTIONS), (typed) -> typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.getMapValues().map((map) -> dynamic.createMap(map.entrySet().stream().map((entry) -> {
                   if ((entry.getKey()).asString("").startsWith("key_")) {
                      int i = Integer.parseInt((entry.getValue()).asString(""));
                      if (i < 0) {
@@ -158,6 +158,6 @@ public class OptionsKeyLwjgl3Fix extends DataFix {
                   } else {
                      return Pair.of(entry.getKey(), entry.getValue());
                   }
-               }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse(dynamic)));
+               }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse((Dynamic) dynamic)));
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java
index 8cfbdf6345d34c5bb996ded2d68c0ea3cf626a3d..965b007b584336e50c4d8ac21919aa33e11778dc 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java
@@ -15,7 +15,7 @@ public class OptionsKeyTranslationFix extends DataFix {
    }
 
    public TypeRewriteRule makeRule() {
-      return this.fixTypeEverywhereTyped("OptionsKeyTranslationFix", this.getInputSchema().getType(References.OPTIONS), (typed) -> typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.getMapValues().map((map) -> dynamic.createMap((Map)map.entrySet().stream().map((entry) -> {
+      return this.fixTypeEverywhereTyped("OptionsKeyTranslationFix", this.getInputSchema().getType(References.OPTIONS), (typed) -> typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.getMapValues().map((map) -> dynamic.createMap(map.entrySet().stream().map((entry) -> {
                   if ((entry.getKey()).asString("").startsWith("key_")) {
                      String s = (entry.getValue()).asString("");
                      if (!s.startsWith("key.mouse") && !s.startsWith("scancode.")) {
@@ -24,6 +24,6 @@ public class OptionsKeyTranslationFix extends DataFix {
                   }
 
                   return Pair.of(entry.getKey(), entry.getValue());
-               }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse(dynamic)));
+               }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse((Dynamic) dynamic)));
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java b/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java
index d07c3ce96c033a5aa6614454c68493c329e165b8..f8e4c8e38e4dcab45e8b565b49bcc80fc6425ebf 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java
@@ -26,11 +26,11 @@ public abstract class PoiTypeRename extends DataFix {
    }
 
    private <T> Dynamic<T> cap(Dynamic<T> dynamic) {
-      return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("Records", (dynamicx) -> DataFixUtils.orElse(this.renameRecords(dynamicx), dynamicx)))));
+      return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicIn) -> dynamicIn.update("Records", (dynamicxIn) -> DataFixUtils.orElse(this.renameRecords(dynamicxIn), dynamicxIn)))));
    }
 
    private <T> Optional<Dynamic<T>> renameRecords(Dynamic<T> dynamic) {
-      return dynamic.asStreamOpt().map((stream) -> dynamic.createList(stream.map((dynamicx) -> dynamicx.update("type", (dynamic) -> DataFixUtils.orElse(dynamic.asString().map(this::rename).map(dynamic::createString).result(), dynamic))))).result();
+      return dynamic.asStreamOpt().map((stream) -> dynamic.createList(stream.map((dynamicx) -> dynamicx.update("type", (dynamicIn) -> DataFixUtils.orElse(dynamicIn.asString().map(this::rename).map(dynamicIn::createString).result(), dynamicIn))))).result();
    }
 
    protected abstract String rename(String var1);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
index 5eb9e18387724ad6537acf44433ec372743dc81f..7232968ed615931d532fd7bf28137fddf13b9160 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
@@ -5,7 +5,8 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class RecipesFix extends RecipesRenameFix {
-   private static final Map<String, String> RECIPES = ImmutableMap.builder().put("minecraft:acacia_wooden_slab", "minecraft:acacia_slab").put("minecraft:birch_wooden_slab", "minecraft:birch_slab").put("minecraft:black_stained_hardened_clay", "minecraft:black_terracotta").put("minecraft:blue_stained_hardened_clay", "minecraft:blue_terracotta").put("minecraft:boat", "minecraft:oak_boat").put("minecraft:bone_meal_from_block", "minecraft:bone_meal_from_bone_block").put("minecraft:bone_meal_from_bone", "minecraft:bone_meal").put("minecraft:brick_block", "minecraft:bricks").put("minecraft:brown_stained_hardened_clay", "minecraft:brown_terracotta").put("minecraft:chiseled_stonebrick", "minecraft:chiseled_stone_bricks").put("minecraft:cyan_stained_hardened_clay", "minecraft:cyan_terracotta").put("minecraft:dark_oak_wooden_slab", "minecraft:dark_oak_slab").put("minecraft:end_bricks", "minecraft:end_stone_bricks").put("minecraft:fence_gate", "minecraft:oak_fence_gate").put("minecraft:fence", "minecraft:oak_fence").put("minecraft:golden_rail", "minecraft:powered_rail").put("minecraft:gold_ingot_from_block", "minecraft:gold_ingot_from_gold_block").put("minecraft:gray_stained_hardened_clay", "minecraft:gray_terracotta").put("minecraft:green_stained_hardened_clay", "minecraft:green_terracotta").put("minecraft:iron_ingot_from_block", "minecraft:iron_ingot_from_iron_block").put("minecraft:jungle_wooden_slab", "minecraft:jungle_slab").put("minecraft:light_blue_stained_hardened_clay", "minecraft:light_blue_terracotta").put("minecraft:light_gray_stained_hardened_clay", "minecraft:light_gray_terracotta").put("minecraft:lime_stained_hardened_clay", "minecraft:lime_terracotta").put("minecraft:lit_pumpkin", "minecraft:jack_o_lantern").put("minecraft:magenta_stained_hardened_clay", "minecraft:magenta_terracotta").put("minecraft:magma", "minecraft:magma_block").put("minecraft:melon_block", "minecraft:melon").put("minecraft:mossy_stonebrick", "minecraft:mossy_stone_bricks").put("minecraft:noteblock", "minecraft:note_block").put("minecraft:oak_wooden_slab", "minecraft:oak_slab").put("minecraft:orange_stained_hardened_clay", "minecraft:orange_terracotta").put("minecraft:pillar_quartz_block", "minecraft:quartz_pillar").put("minecraft:pink_stained_hardened_clay", "minecraft:pink_terracotta").put("minecraft:purple_shulker_box", "minecraft:shulker_box").put("minecraft:purple_stained_hardened_clay", "minecraft:purple_terracotta").put("minecraft:red_nether_brick", "minecraft:red_nether_bricks").put("minecraft:red_stained_hardened_clay", "minecraft:red_terracotta").put("minecraft:slime", "minecraft:slime_block").put("minecraft:smooth_red_sandstone", "minecraft:cut_red_sandstone").put("minecraft:smooth_sandstone", "minecraft:cut_sandstone").put("minecraft:snow_layer", "minecraft:snow").put("minecraft:snow", "minecraft:snow_block").put("minecraft:speckled_melon", "minecraft:glistering_melon_slice").put("minecraft:spruce_wooden_slab", "minecraft:spruce_slab").put("minecraft:stonebrick", "minecraft:stone_bricks").put("minecraft:stone_stairs", "minecraft:cobblestone_stairs").put("minecraft:string_to_wool", "minecraft:white_wool_from_string").put("minecraft:trapdoor", "minecraft:oak_trapdoor").put("minecraft:white_stained_hardened_clay", "minecraft:white_terracotta").put("minecraft:wooden_button", "minecraft:oak_button").put("minecraft:wooden_door", "minecraft:oak_door").put("minecraft:wooden_pressure_plate", "minecraft:oak_pressure_plate").put("minecraft:yellow_stained_hardened_clay", "minecraft:yellow_terracotta").build();
+   // MagmaCube - decompile error
+   private static final Map<String, String> RECIPES = (Map) ImmutableMap.builder().put("minecraft:acacia_wooden_slab", "minecraft:acacia_slab").put("minecraft:birch_wooden_slab", "minecraft:birch_slab").put("minecraft:black_stained_hardened_clay", "minecraft:black_terracotta").put("minecraft:blue_stained_hardened_clay", "minecraft:blue_terracotta").put("minecraft:boat", "minecraft:oak_boat").put("minecraft:bone_meal_from_block", "minecraft:bone_meal_from_bone_block").put("minecraft:bone_meal_from_bone", "minecraft:bone_meal").put("minecraft:brick_block", "minecraft:bricks").put("minecraft:brown_stained_hardened_clay", "minecraft:brown_terracotta").put("minecraft:chiseled_stonebrick", "minecraft:chiseled_stone_bricks").put("minecraft:cyan_stained_hardened_clay", "minecraft:cyan_terracotta").put("minecraft:dark_oak_wooden_slab", "minecraft:dark_oak_slab").put("minecraft:end_bricks", "minecraft:end_stone_bricks").put("minecraft:fence_gate", "minecraft:oak_fence_gate").put("minecraft:fence", "minecraft:oak_fence").put("minecraft:golden_rail", "minecraft:powered_rail").put("minecraft:gold_ingot_from_block", "minecraft:gold_ingot_from_gold_block").put("minecraft:gray_stained_hardened_clay", "minecraft:gray_terracotta").put("minecraft:green_stained_hardened_clay", "minecraft:green_terracotta").put("minecraft:iron_ingot_from_block", "minecraft:iron_ingot_from_iron_block").put("minecraft:jungle_wooden_slab", "minecraft:jungle_slab").put("minecraft:light_blue_stained_hardened_clay", "minecraft:light_blue_terracotta").put("minecraft:light_gray_stained_hardened_clay", "minecraft:light_gray_terracotta").put("minecraft:lime_stained_hardened_clay", "minecraft:lime_terracotta").put("minecraft:lit_pumpkin", "minecraft:jack_o_lantern").put("minecraft:magenta_stained_hardened_clay", "minecraft:magenta_terracotta").put("minecraft:magma", "minecraft:magma_block").put("minecraft:melon_block", "minecraft:melon").put("minecraft:mossy_stonebrick", "minecraft:mossy_stone_bricks").put("minecraft:noteblock", "minecraft:note_block").put("minecraft:oak_wooden_slab", "minecraft:oak_slab").put("minecraft:orange_stained_hardened_clay", "minecraft:orange_terracotta").put("minecraft:pillar_quartz_block", "minecraft:quartz_pillar").put("minecraft:pink_stained_hardened_clay", "minecraft:pink_terracotta").put("minecraft:purple_shulker_box", "minecraft:shulker_box").put("minecraft:purple_stained_hardened_clay", "minecraft:purple_terracotta").put("minecraft:red_nether_brick", "minecraft:red_nether_bricks").put("minecraft:red_stained_hardened_clay", "minecraft:red_terracotta").put("minecraft:slime", "minecraft:slime_block").put("minecraft:smooth_red_sandstone", "minecraft:cut_red_sandstone").put("minecraft:smooth_sandstone", "minecraft:cut_sandstone").put("minecraft:snow_layer", "minecraft:snow").put("minecraft:snow", "minecraft:snow_block").put("minecraft:speckled_melon", "minecraft:glistering_melon_slice").put("minecraft:spruce_wooden_slab", "minecraft:spruce_slab").put("minecraft:stonebrick", "minecraft:stone_bricks").put("minecraft:stone_stairs", "minecraft:cobblestone_stairs").put("minecraft:string_to_wool", "minecraft:white_wool_from_string").put("minecraft:trapdoor", "minecraft:oak_trapdoor").put("minecraft:white_stained_hardened_clay", "minecraft:white_terracotta").put("minecraft:wooden_button", "minecraft:oak_button").put("minecraft:wooden_door", "minecraft:oak_door").put("minecraft:wooden_pressure_plate", "minecraft:oak_pressure_plate").put("minecraft:yellow_stained_hardened_clay", "minecraft:yellow_terracotta").build();
 
    public RecipesFix(Schema schema, boolean flag) {
       super(schema, flag, "Recipes fix", (s) -> (String)RECIPES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
index 7a25f9b0dba907cdc044c0708fd3a7ced30e2f51..a11368fc75c50dcb80fc4334c44f421d32bdc616 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
@@ -5,7 +5,8 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class RecipesRenameningFix extends RecipesRenameFix {
-   private static final Map<String, String> RECIPES = ImmutableMap.builder().put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").build();
+   // MagmaCube - decompile error
+   private static final Map<String, String> RECIPES = (Map) ImmutableMap.builder().put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").build();
 
    public RecipesRenameningFix(Schema schema, boolean flag) {
       super(schema, flag, "Recipes renamening fix", (s) -> (String)RECIPES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
index 40f4ffc61f3fd425504adf84b708449f1a54abab..3e774005abada6de388000d5dcfdca6939215716 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
@@ -23,13 +23,15 @@ public class RedstoneWireConnectionsFix extends DataFix {
          String s2 = dynamicx.get("west").asString("none");
          String s3 = dynamicx.get("north").asString("none");
          String s4 = dynamicx.get("south").asString("none");
-         boolean flag = isConnected(s) || isConnected(s2);
+         boolean flagx = isConnected(s) || isConnected(s2); // MagmaCube - decompile error
          boolean flag2 = isConnected(s3) || isConnected(s4);
          String s5 = !isConnected(s) && !flag2 ? "side" : s;
          String s6 = !isConnected(s2) && !flag2 ? "side" : s2;
-         String s7 = !isConnected(s3) && !flag ? "side" : s3;
-         String s8 = !isConnected(s4) && !flag ? "side" : s4;
-         return dynamicx.update("east", (dynamic) -> dynamic.createString(s5)).update("west", (dynamic) -> dynamic.createString(s6)).update("north", (dynamic) -> dynamic.createString(s7)).update("south", (dynamic) -> dynamic.createString(s8));
+         // MagmaCube start - decompile error
+         String s7 = !isConnected(s3) && !flagx ? "side" : s3;
+         String s8 = !isConnected(s4) && !flagx ? "side" : s4;
+         // MagmaCube end - decompile error
+         return dynamicx.update("east", (dynamicxx) -> dynamicxx.createString(s5)).update("west", (dynamicxxx) -> dynamicxxx.createString(s6)).update("north", (dynamicxxxx) -> dynamicxxxx.createString(s7)).update("south", (dynamicz) -> dynamicz.createString(s8)); // MagmaCube - decompile error
       });
    }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
index af2b366d45e5e6cc4a8a1a80ca30316b8f0065e0..4d321917b291be237b78f4c7c13b63adefc71c12 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
@@ -4,5 +4,6 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class RenamedCoralFansFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:tube_coral_fan", "minecraft:tube_coral_wall_fan").put("minecraft:brain_coral_fan", "minecraft:brain_coral_wall_fan").put("minecraft:bubble_coral_fan", "minecraft:bubble_coral_wall_fan").put("minecraft:fire_coral_fan", "minecraft:fire_coral_wall_fan").put("minecraft:horn_coral_fan", "minecraft:horn_coral_wall_fan").build();
+   // MagmaCube - decompile error
+   public static final Map<String, String> RENAMED_IDS = (Map) ImmutableMap.builder().put("minecraft:tube_coral_fan", "minecraft:tube_coral_wall_fan").put("minecraft:brain_coral_fan", "minecraft:brain_coral_wall_fan").put("minecraft:bubble_coral_fan", "minecraft:bubble_coral_wall_fan").put("minecraft:fire_coral_fan", "minecraft:fire_coral_wall_fan").put("minecraft:horn_coral_fan", "minecraft:horn_coral_wall_fan").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
index 7a2b7c0f70942a884ff5c8660018e6658b9030ea..14894884cbbe931b3ac216b301a35f3ea1784e7f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
@@ -4,5 +4,6 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class RenamedCoralFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:blue_coral", "minecraft:tube_coral_block").put("minecraft:pink_coral", "minecraft:brain_coral_block").put("minecraft:purple_coral", "minecraft:bubble_coral_block").put("minecraft:red_coral", "minecraft:fire_coral_block").put("minecraft:yellow_coral", "minecraft:horn_coral_block").put("minecraft:blue_coral_plant", "minecraft:tube_coral").put("minecraft:pink_coral_plant", "minecraft:brain_coral").put("minecraft:purple_coral_plant", "minecraft:bubble_coral").put("minecraft:red_coral_plant", "minecraft:fire_coral").put("minecraft:yellow_coral_plant", "minecraft:horn_coral").put("minecraft:blue_coral_fan", "minecraft:tube_coral_fan").put("minecraft:pink_coral_fan", "minecraft:brain_coral_fan").put("minecraft:purple_coral_fan", "minecraft:bubble_coral_fan").put("minecraft:red_coral_fan", "minecraft:fire_coral_fan").put("minecraft:yellow_coral_fan", "minecraft:horn_coral_fan").put("minecraft:blue_dead_coral", "minecraft:dead_tube_coral").put("minecraft:pink_dead_coral", "minecraft:dead_brain_coral").put("minecraft:purple_dead_coral", "minecraft:dead_bubble_coral").put("minecraft:red_dead_coral", "minecraft:dead_fire_coral").put("minecraft:yellow_dead_coral", "minecraft:dead_horn_coral").build();
+   // MagmaCube - decompile error
+   public static final Map<String, String> RENAMED_IDS = (Map) ImmutableMap.builder().put("minecraft:blue_coral", "minecraft:tube_coral_block").put("minecraft:pink_coral", "minecraft:brain_coral_block").put("minecraft:purple_coral", "minecraft:bubble_coral_block").put("minecraft:red_coral", "minecraft:fire_coral_block").put("minecraft:yellow_coral", "minecraft:horn_coral_block").put("minecraft:blue_coral_plant", "minecraft:tube_coral").put("minecraft:pink_coral_plant", "minecraft:brain_coral").put("minecraft:purple_coral_plant", "minecraft:bubble_coral").put("minecraft:red_coral_plant", "minecraft:fire_coral").put("minecraft:yellow_coral_plant", "minecraft:horn_coral").put("minecraft:blue_coral_fan", "minecraft:tube_coral_fan").put("minecraft:pink_coral_fan", "minecraft:brain_coral_fan").put("minecraft:purple_coral_fan", "minecraft:bubble_coral_fan").put("minecraft:red_coral_fan", "minecraft:fire_coral_fan").put("minecraft:yellow_coral_fan", "minecraft:horn_coral_fan").put("minecraft:blue_dead_coral", "minecraft:dead_tube_coral").put("minecraft:pink_dead_coral", "minecraft:dead_brain_coral").put("minecraft:purple_dead_coral", "minecraft:dead_bubble_coral").put("minecraft:red_dead_coral", "minecraft:dead_fire_coral").put("minecraft:yellow_dead_coral", "minecraft:dead_horn_coral").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
index a0b30dec7214b13b79a427f15d606766da769cf2..b56edd52c312b67ec703e01e5026551705ea0e0c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
@@ -11,9 +11,35 @@ public class SavedDataUUIDFix extends AbstractUUIDFix {
    }
 
    protected TypeRewriteRule makeRule() {
-      return this.fixTypeEverywhereTyped("SavedDataUUIDFix", this.getInputSchema().getType(this.typeReference), (typed) -> typed.updateTyped(typed.getType().findField("data"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Raids", (dynamicx) -> dynamicx.createList(dynamicx.asStream().map((dynamic) -> dynamic.update("HeroesOfTheVillage", (dynamicx) -> dynamicx.createList(dynamicx.asStream().map((dynamic) -> createUUIDFromLongs(dynamic, "UUIDMost", "UUIDLeast").orElseGet(() -> {
-                              LOGGER.warn("HeroesOfTheVillage contained invalid UUIDs.");
-                              return dynamic;
-                           }))))))))));
+       // MagmaCube start - literally unreadable :tm:
+       return this.fixTypeEverywhereTyped(
+               "SavedDataUUIDFix",
+               this.getInputSchema().getType(this.typeReference),
+               (typed) -> typed.updateTyped(
+                       typed.getType().findField("data"),
+                       (typedx) -> typedx.update(
+                               DSL.remainderFinder(),
+                               (dynamic) -> dynamic.update("Raids",
+                                       (dynamicx) -> dynamicx.createList(
+                                               dynamicx.asStream().map(
+                                                       (dynamicIn) -> dynamicIn.update("HeroesOfTheVillage",
+                                                               (dynamicxIn) -> dynamicxIn.createList(
+                                                                       dynamicxIn.asStream().map(
+                                                                               (dynamicInIn) -> createUUIDFromLongs(
+                                                                                       dynamicInIn, "UUIDMost", "UUIDLeast"
+                                                                               ).orElseGet(() -> {
+                                                                                   LOGGER.warn("HeroesOfTheVillage contained invalid UUIDs.");
+                                                                                   return dynamicInIn;
+                                                                               })
+                                                                       )
+                                                               )
+                                                       )
+                                               )
+                                       )
+                               )
+                       )
+               )
+       );
+       // MagmaCube end
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
index 2a6eea8efa0c4b81b09aafb4b4d05510e0aed25f..9a4592254202c8a96704bec8d06c891958671610 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
@@ -19,18 +19,22 @@ public abstract class SimplestEntityRenameFix extends DataFix {
    }
 
    public TypeRewriteRule makeRule() {
-      TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-      TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+       // MagmaCube start - decompile error
+      TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+      TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
+       // MagmaCube end - decompile error
       Type<Pair<String, String>> type = DSL.named(References.ENTITY_NAME.typeName(), NamespacedSchema.namespacedString());
       if (!Objects.equals(this.getOutputSchema().getType(References.ENTITY_NAME), type)) {
          throw new IllegalStateException("Entity name type is not what was expected.");
       } else {
          return TypeRewriteRule.seq(this.fixTypeEverywhere(this.name, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> {
                   String s2 = this.rename(s);
-                  Type<?> type = (Type)taggedChoiceType.types().get(s);
+                  Type<?> typel = (Type)taggedChoiceType.types().get(s); // MagmaCube - decompile error
                   Type<?> type2 = (Type)taggedChoiceType2.types().get(s2);
-                  if (!type2.equals(type, true, true)) {
-                     throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", type2, type));
+                  // MagmaCube start - decompile error
+                  if (!type2.equals(typel, true, true)) {
+                     throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", type2, typel));
+                      // MagmaCube end - decompile error
                   } else {
                      return s2;
                   }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
index 466e64eb74216b27f99ebeb1920508e748a4902a..34d654bc17e6d677d96297041f5d009269b8eebc 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
@@ -20,13 +20,17 @@ import javax.annotation.Nullable;
 import org.apache.commons.lang3.StringUtils;
 
 public class StatsCounterFix extends DataFix {
-   private static final Set<String> SKIP = ImmutableSet.builder().add("stat.craftItem.minecraft.spawn_egg").add("stat.useItem.minecraft.spawn_egg").add("stat.breakItem.minecraft.spawn_egg").add("stat.pickup.minecraft.spawn_egg").add("stat.drop.minecraft.spawn_egg").build();
-   private static final Map<String, String> CUSTOM_MAP = ImmutableMap.builder().put("stat.leaveGame", "minecraft:leave_game").put("stat.playOneMinute", "minecraft:play_one_minute").put("stat.timeSinceDeath", "minecraft:time_since_death").put("stat.sneakTime", "minecraft:sneak_time").put("stat.walkOneCm", "minecraft:walk_one_cm").put("stat.crouchOneCm", "minecraft:crouch_one_cm").put("stat.sprintOneCm", "minecraft:sprint_one_cm").put("stat.swimOneCm", "minecraft:swim_one_cm").put("stat.fallOneCm", "minecraft:fall_one_cm").put("stat.climbOneCm", "minecraft:climb_one_cm").put("stat.flyOneCm", "minecraft:fly_one_cm").put("stat.diveOneCm", "minecraft:dive_one_cm").put("stat.minecartOneCm", "minecraft:minecart_one_cm").put("stat.boatOneCm", "minecraft:boat_one_cm").put("stat.pigOneCm", "minecraft:pig_one_cm").put("stat.horseOneCm", "minecraft:horse_one_cm").put("stat.aviateOneCm", "minecraft:aviate_one_cm").put("stat.jump", "minecraft:jump").put("stat.drop", "minecraft:drop").put("stat.damageDealt", "minecraft:damage_dealt").put("stat.damageTaken", "minecraft:damage_taken").put("stat.deaths", "minecraft:deaths").put("stat.mobKills", "minecraft:mob_kills").put("stat.animalsBred", "minecraft:animals_bred").put("stat.playerKills", "minecraft:player_kills").put("stat.fishCaught", "minecraft:fish_caught").put("stat.talkedToVillager", "minecraft:talked_to_villager").put("stat.tradedWithVillager", "minecraft:traded_with_villager").put("stat.cakeSlicesEaten", "minecraft:eat_cake_slice").put("stat.cauldronFilled", "minecraft:fill_cauldron").put("stat.cauldronUsed", "minecraft:use_cauldron").put("stat.armorCleaned", "minecraft:clean_armor").put("stat.bannerCleaned", "minecraft:clean_banner").put("stat.brewingstandInteraction", "minecraft:interact_with_brewingstand").put("stat.beaconInteraction", "minecraft:interact_with_beacon").put("stat.dropperInspected", "minecraft:inspect_dropper").put("stat.hopperInspected", "minecraft:inspect_hopper").put("stat.dispenserInspected", "minecraft:inspect_dispenser").put("stat.noteblockPlayed", "minecraft:play_noteblock").put("stat.noteblockTuned", "minecraft:tune_noteblock").put("stat.flowerPotted", "minecraft:pot_flower").put("stat.trappedChestTriggered", "minecraft:trigger_trapped_chest").put("stat.enderchestOpened", "minecraft:open_enderchest").put("stat.itemEnchanted", "minecraft:enchant_item").put("stat.recordPlayed", "minecraft:play_record").put("stat.furnaceInteraction", "minecraft:interact_with_furnace").put("stat.craftingTableInteraction", "minecraft:interact_with_crafting_table").put("stat.chestOpened", "minecraft:open_chest").put("stat.sleepInBed", "minecraft:sleep_in_bed").put("stat.shulkerBoxOpened", "minecraft:open_shulker_box").build();
+   // MagmaCube start - decompile error
+   private static final Set<String> SKIP = ImmutableSet.<String>builder().add("stat.craftItem.minecraft.spawn_egg").add("stat.useItem.minecraft.spawn_egg").add("stat.breakItem.minecraft.spawn_egg").add("stat.pickup.minecraft.spawn_egg").add("stat.drop.minecraft.spawn_egg").build();
+   private static final Map<String, String> CUSTOM_MAP = ImmutableMap.<String, String>builder().put("stat.leaveGame", "minecraft:leave_game").put("stat.playOneMinute", "minecraft:play_one_minute").put("stat.timeSinceDeath", "minecraft:time_since_death").put("stat.sneakTime", "minecraft:sneak_time").put("stat.walkOneCm", "minecraft:walk_one_cm").put("stat.crouchOneCm", "minecraft:crouch_one_cm").put("stat.sprintOneCm", "minecraft:sprint_one_cm").put("stat.swimOneCm", "minecraft:swim_one_cm").put("stat.fallOneCm", "minecraft:fall_one_cm").put("stat.climbOneCm", "minecraft:climb_one_cm").put("stat.flyOneCm", "minecraft:fly_one_cm").put("stat.diveOneCm", "minecraft:dive_one_cm").put("stat.minecartOneCm", "minecraft:minecart_one_cm").put("stat.boatOneCm", "minecraft:boat_one_cm").put("stat.pigOneCm", "minecraft:pig_one_cm").put("stat.horseOneCm", "minecraft:horse_one_cm").put("stat.aviateOneCm", "minecraft:aviate_one_cm").put("stat.jump", "minecraft:jump").put("stat.drop", "minecraft:drop").put("stat.damageDealt", "minecraft:damage_dealt").put("stat.damageTaken", "minecraft:damage_taken").put("stat.deaths", "minecraft:deaths").put("stat.mobKills", "minecraft:mob_kills").put("stat.animalsBred", "minecraft:animals_bred").put("stat.playerKills", "minecraft:player_kills").put("stat.fishCaught", "minecraft:fish_caught").put("stat.talkedToVillager", "minecraft:talked_to_villager").put("stat.tradedWithVillager", "minecraft:traded_with_villager").put("stat.cakeSlicesEaten", "minecraft:eat_cake_slice").put("stat.cauldronFilled", "minecraft:fill_cauldron").put("stat.cauldronUsed", "minecraft:use_cauldron").put("stat.armorCleaned", "minecraft:clean_armor").put("stat.bannerCleaned", "minecraft:clean_banner").put("stat.brewingstandInteraction", "minecraft:interact_with_brewingstand").put("stat.beaconInteraction", "minecraft:interact_with_beacon").put("stat.dropperInspected", "minecraft:inspect_dropper").put("stat.hopperInspected", "minecraft:inspect_hopper").put("stat.dispenserInspected", "minecraft:inspect_dispenser").put("stat.noteblockPlayed", "minecraft:play_noteblock").put("stat.noteblockTuned", "minecraft:tune_noteblock").put("stat.flowerPotted", "minecraft:pot_flower").put("stat.trappedChestTriggered", "minecraft:trigger_trapped_chest").put("stat.enderchestOpened", "minecraft:open_enderchest").put("stat.itemEnchanted", "minecraft:enchant_item").put("stat.recordPlayed", "minecraft:play_record").put("stat.furnaceInteraction", "minecraft:interact_with_furnace").put("stat.craftingTableInteraction", "minecraft:interact_with_crafting_table").put("stat.chestOpened", "minecraft:open_chest").put("stat.sleepInBed", "minecraft:sleep_in_bed").put("stat.shulkerBoxOpened", "minecraft:open_shulker_box").build();
+   // MagmaCube end - decompile error
    private static final String BLOCK_KEY = "stat.mineBlock";
    private static final String NEW_BLOCK_KEY = "minecraft:mined";
-   private static final Map<String, String> ITEM_KEYS = ImmutableMap.builder().put("stat.craftItem", "minecraft:crafted").put("stat.useItem", "minecraft:used").put("stat.breakItem", "minecraft:broken").put("stat.pickup", "minecraft:picked_up").put("stat.drop", "minecraft:dropped").build();
-   private static final Map<String, String> ENTITY_KEYS = ImmutableMap.builder().put("stat.entityKilledBy", "minecraft:killed_by").put("stat.killEntity", "minecraft:killed").build();
-   private static final Map<String, String> ENTITIES = ImmutableMap.builder().put("Bat", "minecraft:bat").put("Blaze", "minecraft:blaze").put("CaveSpider", "minecraft:cave_spider").put("Chicken", "minecraft:chicken").put("Cow", "minecraft:cow").put("Creeper", "minecraft:creeper").put("Donkey", "minecraft:donkey").put("ElderGuardian", "minecraft:elder_guardian").put("Enderman", "minecraft:enderman").put("Endermite", "minecraft:endermite").put("EvocationIllager", "minecraft:evocation_illager").put("Ghast", "minecraft:ghast").put("Guardian", "minecraft:guardian").put("Horse", "minecraft:horse").put("Husk", "minecraft:husk").put("Llama", "minecraft:llama").put("LavaSlime", "minecraft:magma_cube").put("MushroomCow", "minecraft:mooshroom").put("Mule", "minecraft:mule").put("Ozelot", "minecraft:ocelot").put("Parrot", "minecraft:parrot").put("Pig", "minecraft:pig").put("PolarBear", "minecraft:polar_bear").put("Rabbit", "minecraft:rabbit").put("Sheep", "minecraft:sheep").put("Shulker", "minecraft:shulker").put("Silverfish", "minecraft:silverfish").put("SkeletonHorse", "minecraft:skeleton_horse").put("Skeleton", "minecraft:skeleton").put("Slime", "minecraft:slime").put("Spider", "minecraft:spider").put("Squid", "minecraft:squid").put("Stray", "minecraft:stray").put("Vex", "minecraft:vex").put("Villager", "minecraft:villager").put("VindicationIllager", "minecraft:vindication_illager").put("Witch", "minecraft:witch").put("WitherSkeleton", "minecraft:wither_skeleton").put("Wolf", "minecraft:wolf").put("ZombieHorse", "minecraft:zombie_horse").put("PigZombie", "minecraft:zombie_pigman").put("ZombieVillager", "minecraft:zombie_villager").put("Zombie", "minecraft:zombie").build();
+   // MagmaCube start - decompile error
+   private static final Map<String, String> ITEM_KEYS = ImmutableMap.<String, String>builder().put("stat.craftItem", "minecraft:crafted").put("stat.useItem", "minecraft:used").put("stat.breakItem", "minecraft:broken").put("stat.pickup", "minecraft:picked_up").put("stat.drop", "minecraft:dropped").build();
+   private static final Map<String, String> ENTITY_KEYS = ImmutableMap.<String, String>builder().put("stat.entityKilledBy", "minecraft:killed_by").put("stat.killEntity", "minecraft:killed").build();
+   private static final Map<String, String> ENTITIES = ImmutableMap.<String, String>builder().put("Bat", "minecraft:bat").put("Blaze", "minecraft:blaze").put("CaveSpider", "minecraft:cave_spider").put("Chicken", "minecraft:chicken").put("Cow", "minecraft:cow").put("Creeper", "minecraft:creeper").put("Donkey", "minecraft:donkey").put("ElderGuardian", "minecraft:elder_guardian").put("Enderman", "minecraft:enderman").put("Endermite", "minecraft:endermite").put("EvocationIllager", "minecraft:evocation_illager").put("Ghast", "minecraft:ghast").put("Guardian", "minecraft:guardian").put("Horse", "minecraft:horse").put("Husk", "minecraft:husk").put("Llama", "minecraft:llama").put("LavaSlime", "minecraft:magma_cube").put("MushroomCow", "minecraft:mooshroom").put("Mule", "minecraft:mule").put("Ozelot", "minecraft:ocelot").put("Parrot", "minecraft:parrot").put("Pig", "minecraft:pig").put("PolarBear", "minecraft:polar_bear").put("Rabbit", "minecraft:rabbit").put("Sheep", "minecraft:sheep").put("Shulker", "minecraft:shulker").put("Silverfish", "minecraft:silverfish").put("SkeletonHorse", "minecraft:skeleton_horse").put("Skeleton", "minecraft:skeleton").put("Slime", "minecraft:slime").put("Spider", "minecraft:spider").put("Squid", "minecraft:squid").put("Stray", "minecraft:stray").put("Vex", "minecraft:vex").put("Villager", "minecraft:villager").put("VindicationIllager", "minecraft:vindication_illager").put("Witch", "minecraft:witch").put("WitherSkeleton", "minecraft:wither_skeleton").put("Wolf", "minecraft:wolf").put("ZombieHorse", "minecraft:zombie_horse").put("PigZombie", "minecraft:zombie_pigman").put("ZombieVillager", "minecraft:zombie_villager").put("Zombie", "minecraft:zombie").build();
+   // MagmaCube end - decompile error
    private static final String NEW_CUSTOM_KEY = "minecraft:custom";
 
    public StatsCounterFix(Schema schema, boolean flag) {
@@ -56,7 +60,7 @@ public class StatsCounterFix extends DataFix {
                      String s = (entry.getKey()).asString("");
                      if (!SKIP.contains(s)) {
                         if (CUSTOM_MAP.containsKey(s)) {
-                           s2 = "minecraft:custom";
+                           s2 = NEW_CUSTOM_KEY; // MagmaCube - use constant field
                            s3 = (String)CUSTOM_MAP.get(s);
                            break;
                         }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
index 60d985e6165e3a0db0275e24e205c3f7fc92053c..f930a486880b73371bc3944a308091d0d54eed5f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
@@ -35,7 +35,7 @@ public class StatsRenameFix extends DataFix {
       } else {
          OpticFinder<?> opticFinder2 = DSL.namedChoice("minecraft:custom", type3);
          OpticFinder<String> opticFinder3 = DSL.fieldFinder("id", NamespacedSchema.namespacedString());
-         return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
+         return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
       }
    }
 
@@ -45,6 +45,6 @@ public class StatsRenameFix extends DataFix {
       OpticFinder<?> opticFinder = type2.findField("stats");
       OpticFinder<?> opticFinder2 = opticFinder.type().findField("minecraft:custom");
       OpticFinder<String> opticFinder3 = NamespacedSchema.namespacedString().finder();
-      return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
+      return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java b/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
index cdd32ce2fd4381835b4598747e4c950b8bb63129..ad180a197b8f44189261b52542cdbb615b6adea5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
@@ -69,19 +69,19 @@ public class TrappedChestBlockEntityFix extends DataFix {
                      Dynamic<?> dynamic = typedx.get(DSL.remainderFinder());
                      int i3 = dynamic.get("xPos").asInt(0);
                      int i4 = dynamic.get("zPos").asInt(0);
-                     TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
-                     return typedx.updateTyped(opticFinder, (typed) -> typed.updateTyped(taggedChoiceType.finder(), (typedx) -> {
-                           Dynamic<?> dynamic = typedx.getOrCreate(DSL.remainderFinder());
-                           int i3 = dynamic.get("x").asInt(0) - (i3 << 4);
-                           int i4 = dynamic.get("y").asInt(0);
-                           int i5 = dynamic.get("z").asInt(0) - (i4 << 4);
-                           return intSet.contains(LeavesFix.getIndex(i3, i4, i5)) ? typedx.update(taggedChoiceType.finder(), (pair) -> pair.mapFirst((s) -> {
+                     TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
+                     return typedx.updateTyped(opticFinder, (typedIn) -> typedIn.updateTyped(taggedChoiceType.finder(), (typedxIn) -> {
+                           Dynamic<?> dynamicIn = typedxIn.getOrCreate(DSL.remainderFinder());
+                           int i3In = dynamicIn.get("x").asInt(0) - (i3 << 4);
+                           int i4In = dynamicIn.get("y").asInt(0);
+                           int i5In = dynamicIn.get("z").asInt(0) - (i4 << 4);
+                           return intSet.contains(LeavesFix.getIndex(i3In, i4In, i5In)) ? typedxIn.update(taggedChoiceType.finder(), (pair) -> pair.mapFirst((s) -> {
                                  if (!Objects.equals(s, "minecraft:chest")) {
                                     LOGGER.warn("Block Entity was expected to be a chest");
                                  }
 
                                  return "minecraft:trapped_chest";
-                              })) : typedx;
+                              })) : typedxIn;
                         }));
                   }
                })));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
index 33999d36503be9648385294f29759725ab3d8e40..159ec78fbf6643788e836281761760d1d06fb9ea 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
@@ -37,7 +37,8 @@ public class VillagerRebuildLevelAndXpFix extends DataFix {
             int i = dynamic.get("VillagerData").get("level").asInt(0);
             Typed<?> typed2 = typedx;
             if (i == 0 || i == 1) {
-               int i2 = typedx.getOptionalTyped(opticFinder2).flatMap((typed) -> typed.getOptionalTyped(opticFinder3)).map((typed) -> typed.getAllTyped(opticFinder4).size()).orElse(0);
+                // MagmaCube - decompile error
+               int i2 = typedx.getOptionalTyped(opticFinder2).flatMap((typedxx) -> typedxx.getOptionalTyped(opticFinder3)).map((typedxxx) -> typedxxx.getAllTyped(opticFinder4).size()).orElse(0);
                i = Mth.clamp(i2 / 2, 1, 5);
                if (i > 1) {
                   typed2 = addLevel(typedx, i);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
index 2ae2d1cee21e477566aa41a028f531a34aeee61a..7719b6a3bf922ae2378266dfad77490bf033a550 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
@@ -31,7 +31,7 @@ public class VillagerTradeFix extends NamedEntityFix {
          OpticFinder<?> opticFinder6 = type2.findField("sell");
          OpticFinder<Pair<String, String>> opticFinder7 = DSL.fieldFinder("id", DSL.named(References.ITEM_NAME.typeName(), NamespacedSchema.namespacedString()));
          Function<Typed<?>, Typed<?>> function = (typedx) -> this.updateItemStack(opticFinder7, typedx);
-         return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.updateTyped(opticFinder3, (typedx) -> typedx.updateTyped(opticFinder4, function).updateTyped(opticFinder5, function).updateTyped(opticFinder6, function))));
+         return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedxxx) -> typedxxx.updateTyped(opticFinder3, (typedxz) -> typedxz.updateTyped(opticFinder4, function).updateTyped(opticFinder5, function).updateTyped(opticFinder6, function)))); // MagmaCube - decompile error
       }
    }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
index 3c52d5ce572b8be031a38169dd3b9b94e4ebea8f..7f15b358dfd7977c8f877dc120f85db199706269 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
@@ -33,7 +33,7 @@ public class WorldGenSettingsFix extends DataFix {
    private static final String END_CITY = "minecraft:endcity";
    private static final String WOODLAND_MANSION = "minecraft:mansion";
    private static final String OCEAN_MONUMENT = "minecraft:monument";
-   private static final ImmutableMap<String, WorldGenSettingsFix.StructureFeatureConfiguration> DEFAULTS = ImmutableMap.builder().put("minecraft:village", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 10387312)).put("minecraft:desert_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357617)).put("minecraft:igloo", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357618)).put("minecraft:jungle_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357619)).put("minecraft:swamp_hut", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357620)).put("minecraft:pillager_outpost", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 165745296)).put("minecraft:monument", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 5, 10387313)).put("minecraft:endcity", new WorldGenSettingsFix.StructureFeatureConfiguration(20, 11, 10387313)).put("minecraft:mansion", new WorldGenSettingsFix.StructureFeatureConfiguration(80, 20, 10387319)).build();
+   private static final ImmutableMap<String, WorldGenSettingsFix.StructureFeatureConfiguration> DEFAULTS = ImmutableMap.<String, WorldGenSettingsFix.StructureFeatureConfiguration>builder().put("minecraft:village", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 10387312)).put("minecraft:desert_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357617)).put("minecraft:igloo", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357618)).put("minecraft:jungle_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357619)).put("minecraft:swamp_hut", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357620)).put("minecraft:pillager_outpost", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 165745296)).put("minecraft:monument", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 5, 10387313)).put("minecraft:endcity", new WorldGenSettingsFix.StructureFeatureConfiguration(20, 11, 10387313)).put("minecraft:mansion", new WorldGenSettingsFix.StructureFeatureConfiguration(80, 20, 10387319)).build();
 
    public WorldGenSettingsFix(Schema schema) {
       super(schema, true);
@@ -48,7 +48,7 @@ public class WorldGenSettingsFix extends DataFix {
    }
 
    private static <T> Dynamic<T> vanillaBiomeSource(Dynamic<T> dynamic, long l, boolean flag, boolean flag2) {
-      Builder<Dynamic<T>, Dynamic<T>> builder = ImmutableMap.builder().put(dynamic.createString("type"), dynamic.createString("minecraft:vanilla_layered")).put(dynamic.createString("seed"), dynamic.createLong(l)).put(dynamic.createString("large_biomes"), dynamic.createBoolean(flag2));
+      Builder<Dynamic<T>, Dynamic<T>> builder = ImmutableMap.<Dynamic<T>, Dynamic<T>>builder().put(dynamic.createString("type"), dynamic.createString("minecraft:vanilla_layered")).put(dynamic.createString("seed"), dynamic.createLong(l)).put(dynamic.createString("large_biomes"), dynamic.createBoolean(flag2));
       if (flag) {
          builder.put(dynamic.createString("legacy_biome_init_layer"), dynamic.createBoolean(flag));
       }
@@ -143,9 +143,9 @@ public class WorldGenSettingsFix extends DataFix {
          map.put("minecraft:village", (WorldGenSettingsFix.StructureFeatureConfiguration)DEFAULTS.get("minecraft:village"));
       }
 
-      optionalDynamic.get("structures").flatMap(Dynamic::getMapValues).result().ifPresent((map2) -> map2.forEach((dynamic, dynamic2) -> dynamic2.getMapValues().result().ifPresent((map2) -> map2.forEach((dynamic2, dynamic3) -> {
+      optionalDynamic.get("structures").flatMap(Dynamic::getMapValues).result().ifPresent((map2) -> map2.forEach((dynamic, dynamic2) -> dynamic2.getMapValues().result().ifPresent((map2In) -> map2In.forEach((dynamic2In, dynamic3) -> {
                   String s = dynamic.asString("");
-                  String s2 = dynamic2.asString("");
+                  String s2 = dynamic2In.asString("");
                   String s3 = dynamic3.asString("");
                   if ("stronghold".equals(s)) {
                      mutableBoolean.setTrue();
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java b/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
index 88a862466175ac346fb70a92ca2e0ee9daf1833a..eafb46e7a99702a8af70ae5d677c575834fd62cc 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
@@ -46,10 +46,10 @@ public class V1451_6 extends NamespacedSchema {
       public <T> T apply(DynamicOps<T> dynamicOps, T object) {
          Dynamic<T> dynamic = new Dynamic(dynamicOps, object);
          Optional<Dynamic<T>> optional = dynamic.get("CriteriaType").get().get().left().flatMap((dynamic2) -> {
-            Optional<String> optional = dynamic2.get("type").asString().get().left();
+            Optional<String> optionalIn = dynamic2.get("type").asString().get().left();
             Optional<String> optional2 = dynamic2.get("id").asString().get().left();
-            if (optional.isPresent() && optional2.isPresent()) {
-               String s = (String)optional.get();
+            if (optionalIn.isPresent() && optional2.isPresent()) {
+               String s = (String)optionalIn.get();
                return s.equals("_special") ? Optional.of(dynamic.createString((String)optional2.get())) : Optional.of(dynamic2.createString(this.packWithDot(s) + ":" + this.packWithDot((String)optional2.get())));
             } else {
                return Optional.empty();
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V704.java b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
index ab341702c16a00bc9443bc11e7a75224bfd83744..2d0252f8e792361e8815976038e0271f14285d39 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V704.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
@@ -138,7 +138,7 @@ public class V704 extends Schema {
    });
    protected static final HookFunction ADD_NAMES = new HookFunction() {
       public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-         return V99.addNames(new Dynamic(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "ArmorStand");
+         return V99.addNames(new Dynamic<>(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "ArmorStand"); // MagmaCube - decompile error
       }
    };
 
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V705.java b/src/main/java/net/minecraft/util/datafix/schemas/V705.java
index e07452fff7ba8f2449965da6e64d1ea502d32eac..6218ddf6dde28971f6cf1ae5f0cdaec4aa55bbb3 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V705.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V705.java
@@ -14,7 +14,7 @@ import net.minecraft.util.datafix.fixes.References;
 public class V705 extends NamespacedSchema {
    protected static final HookFunction ADD_NAMES = new HookFunction() {
       public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-         return V99.addNames(new Dynamic(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "minecraft:armor_stand");
+         return V99.addNames(new Dynamic<>(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "minecraft:armor_stand"); // MagmaCube - decompile error
       }
    };
 
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V99.java b/src/main/java/net/minecraft/util/datafix/schemas/V99.java
index 4bfd4373521c1db4dded44bbe050d5cf67a0d1e8..052c5304e221c9a42594297fc94432163cde2eb9 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V99.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V99.java
@@ -54,7 +54,7 @@ public class V99 extends Schema {
    });
    protected static final HookFunction ADD_NAMES = new HookFunction() {
       public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-         return V99.addNames(new Dynamic(dynamicOps, object), V99.ITEM_TO_BLOCKENTITY, "ArmorStand");
+         return V99.addNames(new Dynamic<>(dynamicOps, object), V99.ITEM_TO_BLOCKENTITY, "ArmorStand"); // MagmaCube - decompile error
       }
    };
 
@@ -206,14 +206,16 @@ public class V99 extends Schema {
 
    protected static <T> T addNames(Dynamic<T> dynamic, Map<String, String> map, String s) {
       return (T)dynamic.update("tag", (dynamic2) -> dynamic2.update("BlockEntityTag", (dynamic2x) -> {
-            String s = (String)dynamic.get("id").asString().result().map(NamespacedSchema::ensureNamespaced).orElse("minecraft:air");
-            if (!"minecraft:air".equals(s)) {
-               String s2 = (String)map.get(s);
+            // MagmaCube start - decompile error
+            String sx = (String)dynamic.get("id").asString().result().map(NamespacedSchema::ensureNamespaced).orElse("minecraft:air");
+            if (!"minecraft:air".equals(sx)) {
+               String s2 = (String)map.get(sx);
+               // MagmaCube end - decompile error
                if (s2 != null) {
                   return dynamic2x.set("id", dynamic.createString(s2));
                }
 
-               LOGGER.warn("Unable to resolve BlockEntity for ItemStack: {}", s);
+               LOGGER.warn("Unable to resolve BlockEntity for ItemStack: {}", sx); // MagmaCube - decompile error
             }
 
             return dynamic2x;
diff --git a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
index d1293cc474424584aa834254128f99f160c1aac7..86a2f2464ea5ec9847ff1b1bca8d2491f16d40d5 100644
--- a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
+++ b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
@@ -43,7 +43,7 @@ public class FilledProfileResults implements ProfileResults {
       }
    };
    private static final Splitter SPLITTER = Splitter.on('\u001e');
-   private static final Comparator<Entry<String, FilledProfileResults.CounterCollector>> COUNTER_ENTRY_COMPARATOR = Entry.comparingByValue(Comparator.comparingLong((counterCollector) -> counterCollector.totalValue)).reversed();
+   private static final Comparator<Entry<String, FilledProfileResults.CounterCollector>> COUNTER_ENTRY_COMPARATOR = Entry.<String, CounterCollector>comparingByValue(Comparator.comparingLong((counterCollector) -> counterCollector.totalValue)).reversed(); // MagmaCube - decompile error
    private final Map<String, ? extends ProfilerPathEntry> entries;
    private final long startTimeNano;
    private final int startTimeTicks;
@@ -124,7 +124,7 @@ public class FilledProfileResults implements ProfileResults {
          Object2LongMap<String> object2LongMap = profilerPathEntry.getCounters();
          if (!object2LongMap.isEmpty()) {
             List<String> list = SPLITTER.splitToList(s);
-            object2LongMap.forEach((sx, l) -> ((FilledProfileResults.CounterCollector)map.computeIfAbsent(sx, (s) -> new FilledProfileResults.CounterCollector())).addValue(list.iterator(), l));
+            object2LongMap.forEach((sx, l) -> ((FilledProfileResults.CounterCollector)map.computeIfAbsent(sx, (s1) -> new FilledProfileResults.CounterCollector())).addValue(list.iterator(), l)); // MagmaCube - decompile error
          }
 
       });
diff --git a/src/main/java/net/minecraft/util/random/WeightedRandom.java b/src/main/java/net/minecraft/util/random/WeightedRandom.java
index 8786ae422e8ca0923cee55b0d979bb29d6f0527e..823e5d0a1d5162531b9f45ae83bedd9893255970 100644
--- a/src/main/java/net/minecraft/util/random/WeightedRandom.java
+++ b/src/main/java/net/minecraft/util/random/WeightedRandom.java
@@ -25,7 +25,7 @@ public class WeightedRandom {
 
    public static <T extends WeightedEntry> Optional<T> getRandomItem(Random random, List<T> list, int i) {
       if (i < 0) {
-         throw (IllegalArgumentException)Util.pauseInIde((T)(new IllegalArgumentException("Negative total weight in getRandomItem")));
+         throw (IllegalArgumentException)Util.pauseInIde((new IllegalArgumentException("Negative total weight in getRandomItem"))); // MagmaCube - decompile error
       } else if (i == 0) {
          return Optional.empty();
       } else {
diff --git a/src/main/java/net/minecraft/util/thread/StrictQueue.java b/src/main/java/net/minecraft/util/thread/StrictQueue.java
index 2cec2f8c18c4428b16e2b21427fec517e54d1b69..8424653e7f2956712fd303a09fe46b36b4ad3fd6 100644
--- a/src/main/java/net/minecraft/util/thread/StrictQueue.java
+++ b/src/main/java/net/minecraft/util/thread/StrictQueue.java
@@ -22,7 +22,7 @@ public interface StrictQueue<T, F> {
       private final List<Queue<Runnable>> queueList;
 
       public FixedPriorityQueue(int i) {
-         this.queueList = IntStream.range(0, i).mapToObj((ix) -> Queues.newConcurrentLinkedQueue()).collect(Collectors.toList());
+         this.queueList = IntStream.range(0, i).mapToObj((ix) -> Queues.<Runnable>newConcurrentLinkedQueue()).collect(Collectors.toList());
       }
 
       @Nullable
diff --git a/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java b/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
index a8379b97972428e5cc9615e8ffa09119ee1b4dff..578d096cb74bfd557bfc3ff33753687138527316 100644
--- a/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
@@ -7,7 +7,8 @@ import java.util.Random;
 import java.util.function.Function;
 
 public class BiasedToBottomInt extends IntProvider {
-   public static final Codec<BiasedToBottomInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.maxInclusive)).apply(instance, BiasedToBottomInt::new)).comapFlatMap((biasedToBottomInt) -> biasedToBottomInt.maxInclusive < biasedToBottomInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + biasedToBottomInt.minInclusive + ", max_inclusive: " + biasedToBottomInt.maxInclusive) : DataResult.success(biasedToBottomInt), Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<BiasedToBottomInt> CODEC = RecordCodecBuilder.<BiasedToBottomInt>create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.maxInclusive)).apply(instance, BiasedToBottomInt::new)).comapFlatMap((biasedToBottomInt) -> biasedToBottomInt.maxInclusive < biasedToBottomInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + biasedToBottomInt.minInclusive + ", max_inclusive: " + biasedToBottomInt.maxInclusive) : DataResult.success(biasedToBottomInt), Function.identity());
    private final int minInclusive;
    private final int maxInclusive;
 
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java b/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
index 75cd652c82d58533e3841a8fa21d0a2c23367af6..0c3bbc64a997ba56a384ed6829d5a15043769436 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
@@ -8,7 +8,8 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class ClampedInt extends IntProvider {
-   public static final Codec<ClampedInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(IntProvider.CODEC.fieldOf("source").forGetter((clampedInt) -> clampedInt.source), Codec.INT.fieldOf("min_inclusive").forGetter((clampedInt) -> clampedInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedInt) -> clampedInt.maxInclusive)).apply(instance, ClampedInt::new)).comapFlatMap((clampedInt) -> clampedInt.maxInclusive < clampedInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + clampedInt.minInclusive + ", max_inclusive: " + clampedInt.maxInclusive) : DataResult.success(clampedInt), Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<ClampedInt> CODEC = RecordCodecBuilder.<ClampedInt>create((instance) -> instance.group(IntProvider.CODEC.fieldOf("source").forGetter((clampedInt) -> clampedInt.source), Codec.INT.fieldOf("min_inclusive").forGetter((clampedInt) -> clampedInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedInt) -> clampedInt.maxInclusive)).apply(instance, ClampedInt::new)).comapFlatMap((clampedInt) -> clampedInt.maxInclusive < clampedInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + clampedInt.minInclusive + ", max_inclusive: " + clampedInt.maxInclusive) : DataResult.success(clampedInt), Function.identity());
    private final IntProvider source;
    private int minInclusive;
    private int maxInclusive;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
index 5aa73592ba1cedccbc12402b93076569b4cda137..f8d10cbcaff169b530f311088cc260bdf97650ef 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
@@ -8,7 +8,8 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class ClampedNormalFloat extends FloatProvider {
-   public static final Codec<ClampedNormalFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalFloat) -> clampedNormalFloat.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalFloat) -> clampedNormalFloat.deviation), Codec.FLOAT.fieldOf("min").forGetter((clampedNormalFloat) -> clampedNormalFloat.min), Codec.FLOAT.fieldOf("max").forGetter((clampedNormalFloat) -> clampedNormalFloat.max)).apply(instance, ClampedNormalFloat::new)).comapFlatMap((clampedNormalFloat) -> clampedNormalFloat.max < clampedNormalFloat.min ? DataResult.error("Max must be larger than min: [" + clampedNormalFloat.min + ", " + clampedNormalFloat.max + "]") : DataResult.success(clampedNormalFloat), Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<ClampedNormalFloat> CODEC = RecordCodecBuilder.<ClampedNormalFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalFloat) -> clampedNormalFloat.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalFloat) -> clampedNormalFloat.deviation), Codec.FLOAT.fieldOf("min").forGetter((clampedNormalFloat) -> clampedNormalFloat.min), Codec.FLOAT.fieldOf("max").forGetter((clampedNormalFloat) -> clampedNormalFloat.max)).apply(instance, ClampedNormalFloat::new)).comapFlatMap((clampedNormalFloat) -> clampedNormalFloat.max < clampedNormalFloat.min ? DataResult.error("Max must be larger than min: [" + clampedNormalFloat.min + ", " + clampedNormalFloat.max + "]") : DataResult.success(clampedNormalFloat), Function.identity());
    private float mean;
    private float deviation;
    private float min;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java b/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
index d115770d7e2ed5022c2ce4b88470ff91098f7a77..8290f781ba8b1b1c5476d5bbcecedc643234d364 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
@@ -7,7 +7,8 @@ import java.util.Random;
 
 public class ConstantFloat extends FloatProvider {
    public static final ConstantFloat ZERO = new ConstantFloat(0.0F);
-   public static final Codec<ConstantFloat> CODEC = Codec.either(Codec.FLOAT, RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("value").forGetter((constantFloat) -> constantFloat.value)).apply(instance, ConstantFloat::new))).xmap((either) -> (ConstantFloat)either.map(ConstantFloat::of, (constantFloat) -> constantFloat), (constantFloat) -> Either.left(constantFloat.value));
+   // MagmaCube - decompile error
+   public static final Codec<ConstantFloat> CODEC = Codec.either(Codec.FLOAT, RecordCodecBuilder.<ConstantFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("value").forGetter((constantFloat) -> constantFloat.value)).apply(instance, ConstantFloat::new))).xmap((either) -> (ConstantFloat)either.map(ConstantFloat::of, (constantFloat) -> constantFloat), (constantFloat) -> Either.left(constantFloat.value));
    private final float value;
 
    public static ConstantFloat of(float f) {
diff --git a/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java b/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
index 863af563965676442a604c01978ed533b44a7722..189f2bedd404acf297435a528f9d1afa48479bb6 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
@@ -7,7 +7,8 @@ import java.util.Random;
 
 public class ConstantInt extends IntProvider {
    public static final ConstantInt ZERO = new ConstantInt(0);
-   public static final Codec<ConstantInt> CODEC = Codec.either(Codec.INT, RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("value").forGetter((constantInt) -> constantInt.value)).apply(instance, ConstantInt::new))).xmap((either) -> (ConstantInt)either.map(ConstantInt::of, (constantInt) -> constantInt), (constantInt) -> Either.left(constantInt.value));
+   // MagmaCube - decompile error
+   public static final Codec<ConstantInt> CODEC = Codec.either(Codec.INT, RecordCodecBuilder.<ConstantInt>create((instance) -> instance.group(Codec.INT.fieldOf("value").forGetter((constantInt) -> constantInt.value)).apply(instance, ConstantInt::new))).xmap((either) -> (ConstantInt)either.map(ConstantInt::of, (constantInt) -> constantInt), (constantInt) -> Either.left(constantInt.value));
    private final int value;
 
    public static ConstantInt of(int i) {
diff --git a/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java b/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
index a741a2dcd0b073428657cb0542abc62e0ff74971..27ca1c0a4988de55ca04b800a1a2e22915e2ae02 100644
--- a/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
@@ -7,7 +7,8 @@ import java.util.Random;
 import java.util.function.Function;
 
 public class TrapezoidFloat extends FloatProvider {
-   public static final Codec<TrapezoidFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("min").forGetter((trapezoidFloat) -> trapezoidFloat.min), Codec.FLOAT.fieldOf("max").forGetter((trapezoidFloat) -> trapezoidFloat.max), Codec.FLOAT.fieldOf("plateau").forGetter((trapezoidFloat) -> trapezoidFloat.plateau)).apply(instance, TrapezoidFloat::new)).comapFlatMap((trapezoidFloat) -> {
+   // MagmaCube - decompile error
+   public static final Codec<TrapezoidFloat> CODEC = RecordCodecBuilder.<TrapezoidFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("min").forGetter((trapezoidFloat) -> trapezoidFloat.min), Codec.FLOAT.fieldOf("max").forGetter((trapezoidFloat) -> trapezoidFloat.max), Codec.FLOAT.fieldOf("plateau").forGetter((trapezoidFloat) -> trapezoidFloat.plateau)).apply(instance, TrapezoidFloat::new)).comapFlatMap((trapezoidFloat) -> {
       if (trapezoidFloat.max < trapezoidFloat.min) {
          return DataResult.error("Max must be larger than min: [" + trapezoidFloat.min + ", " + trapezoidFloat.max + "]");
       } else {
diff --git a/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java b/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
index 5a60211933af1bad40d8364b7669c071626193cc..02a40af7e098ced5a9fe11563d6454be0cdecced 100644
--- a/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
@@ -8,7 +8,8 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class UniformFloat extends FloatProvider {
-   public static final Codec<UniformFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("min_inclusive").forGetter((uniformFloat) -> uniformFloat.minInclusive), Codec.FLOAT.fieldOf("max_exclusive").forGetter((uniformFloat) -> uniformFloat.maxExclusive)).apply(instance, UniformFloat::new)).comapFlatMap((uniformFloat) -> uniformFloat.maxExclusive <= uniformFloat.minInclusive ? DataResult.error("Max must be larger than min, min_inclusive: " + uniformFloat.minInclusive + ", max_exclusive: " + uniformFloat.maxExclusive) : DataResult.success(uniformFloat), Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<UniformFloat> CODEC = RecordCodecBuilder.<UniformFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("min_inclusive").forGetter((uniformFloat) -> uniformFloat.minInclusive), Codec.FLOAT.fieldOf("max_exclusive").forGetter((uniformFloat) -> uniformFloat.maxExclusive)).apply(instance, UniformFloat::new)).comapFlatMap((uniformFloat) -> uniformFloat.maxExclusive <= uniformFloat.minInclusive ? DataResult.error("Max must be larger than min, min_inclusive: " + uniformFloat.minInclusive + ", max_exclusive: " + uniformFloat.maxExclusive) : DataResult.success(uniformFloat), Function.identity());
    private final float minInclusive;
    private final float maxExclusive;
 
diff --git a/src/main/java/net/minecraft/util/valueproviders/UniformInt.java b/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
index d9f7470ad395e803bf0ed52e53e740800398b6ba..0152bf488b79d7a79496de1495bc1a6200eedbc0 100644
--- a/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
@@ -8,7 +8,8 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class UniformInt extends IntProvider {
-   public static final Codec<UniformInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((uniformInt) -> uniformInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((uniformInt) -> uniformInt.maxInclusive)).apply(instance, UniformInt::new)).comapFlatMap((uniformInt) -> uniformInt.maxInclusive < uniformInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + uniformInt.minInclusive + ", max_inclusive: " + uniformInt.maxInclusive) : DataResult.success(uniformInt), Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<UniformInt> CODEC = RecordCodecBuilder.<UniformInt>create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((uniformInt) -> uniformInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((uniformInt) -> uniformInt.maxInclusive)).apply(instance, UniformInt::new)).comapFlatMap((uniformInt) -> uniformInt.maxInclusive < uniformInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + uniformInt.minInclusive + ", max_inclusive: " + uniformInt.maxInclusive) : DataResult.success(uniformInt), Function.identity());
    private final int minInclusive;
    private final int maxInclusive;
 
diff --git a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
index 59fe7ef11c45efe8e37a741e9c7fb7056548bd7e..de1d18fc1c0a0832b50b383e43e144324971e781 100644
--- a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
+++ b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
@@ -103,7 +103,7 @@ public class WorldUpgrader {
             builder2.put(resourceKey2, new ChunkStorage(new File(file, "region"), this.dataFixer, true));
          }
 
-         ImmutableMap<ResourceKey<Level>, ChunkStorage> immutableMap2 = builder2.build();
+         ImmutableMap<ResourceKey<Level>, ChunkStorage> immutableMap2xz = builder2.build(); // MagmaCube - decompile error
          long l = Util.getMillis();
          this.status = new TranslatableComponent("optimizeWorld.stage.upgrading");
 
@@ -115,7 +115,7 @@ public class WorldUpgrader {
             for(UnmodifiableIterator iOException2 = this.levels.iterator(); iOException2.hasNext(); f2 += f3) {
                ResourceKey<Level> resourceKey3 = (ResourceKey)iOException2.next();
                ListIterator<ChunkPos> listIterator = (ListIterator)immutableMap.get(resourceKey3);
-               ChunkStorage chunkStorage = (ChunkStorage)immutableMap2.get(resourceKey3);
+               ChunkStorage chunkStorage = (ChunkStorage)immutableMap2xz.get(resourceKey3); // MagmaCube - decompile error
                if (listIterator.hasNext()) {
                   ChunkPos chunkPos = (ChunkPos)listIterator.next();
                   boolean flag2 = false;
@@ -175,7 +175,7 @@ public class WorldUpgrader {
          }
 
          this.status = new TranslatableComponent("optimizeWorld.stage.finished");
-         UnmodifiableIterator var31 = immutableMap2.values().iterator();
+         UnmodifiableIterator var31 = immutableMap2xz.values().iterator(); // MagmaCube - decompile error
 
          while(var31.hasNext()) {
             ChunkStorage chunkStorage2 = (ChunkStorage)var31.next();
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index ed8ed9c042c68dcac1b1f4cfd0c2eae04f682111..5b5545e65243e31a39ef8890b4029824b757ac92 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -234,7 +234,7 @@ public abstract class LivingEntity extends Entity {
       this.yHeadRot = this.getYRot();
       this.maxUpStep = 0.6F;
       NbtOps nbtOps = NbtOps.INSTANCE;
-      this.brain = this.makeBrain(new Dynamic(nbtOps, (Tag)nbtOps.createMap(ImmutableMap.of(nbtOps.createString("memories"), (Tag)nbtOps.emptyMap()))));
+      this.brain = this.makeBrain(new Dynamic<>(nbtOps, (Tag)nbtOps.createMap(ImmutableMap.of(nbtOps.createString("memories"), (Tag)nbtOps.emptyMap()))));
    }
 
    public Brain<?> getBrain() {
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 0f5b8d437cb7d369d61dd1c77701c6545fcb1809..bbd321c455ec4e69fa5894b629a5c1737a45c38a 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -1043,7 +1043,7 @@ public abstract class Mob extends LivingEntity {
          if (itemStack.getItem() instanceof SpawnEggItem) {
             if (this.level instanceof ServerLevel) {
                SpawnEggItem spawnEggItem = (SpawnEggItem)itemStack.getItem();
-               Optional<Mob> optional = spawnEggItem.spawnOffspringFromSpawnEgg(player, this, this.getType(), (ServerLevel)this.level, this.position(), itemStack);
+               Optional<Mob> optional = spawnEggItem.spawnOffspringFromSpawnEgg(player, this, (EntityType<? extends Mob>) this.getType(), (ServerLevel)this.level, this.position(), itemStack); // MagmaCube - decompile error
                optional.ifPresent((mob) -> this.onOffspringSpawnedFromEgg(player, mob));
                return optional.isPresent() ? InteractionResult.SUCCESS : InteractionResult.PASS;
             } else {
diff --git a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
index 00b403644290df1e4e866bf9ea3010660ef336de..8530cefb48f530e36d1a0856dcc8bc7f8a325481 100644
--- a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
+++ b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
@@ -58,7 +58,7 @@ public class SpawnPlacements {
 
    public static <T extends Entity> boolean checkSpawnRules(EntityType<T> entityType, ServerLevelAccessor serverLevelAccessor, MobSpawnType mobSpawnType, BlockPos blockPos, Random random) {
       SpawnPlacements.Data data = (SpawnPlacements.Data)DATA_BY_TYPE.get(entityType);
-      return data == null || data.predicate.test(entityType, serverLevelAccessor, mobSpawnType, blockPos, random);
+      return data == null || data.predicate.test((EntityType) entityType, serverLevelAccessor, mobSpawnType, blockPos, random); // MagmaCube - decompile error
    }
 
    static {
diff --git a/src/main/java/net/minecraft/world/entity/ai/Brain.java b/src/main/java/net/minecraft/world/entity/ai/Brain.java
index 7fbe1fbce4ed4e0aab4924184216538d70b43e64..c419d3c7bb821b6670f105aa130998983069e968 100644
--- a/src/main/java/net/minecraft/world/entity/ai/Brain.java
+++ b/src/main/java/net/minecraft/world/entity/ai/Brain.java
@@ -69,14 +69,14 @@ public class Brain<E extends LivingEntity> {
          }
 
          public <T> DataResult<Brain<E>> decode(DynamicOps<T> dynamicOps, MapLike<T> mapLike) {
-            MutableObject<DataResult<Builder<Brain.MemoryValue<?>>>> mutableObject = new MutableObject(DataResult.success(ImmutableList.builder()));
+            MutableObject<DataResult<Builder<Brain.MemoryValue<?>>>> mutableObjectIn = new MutableObject<>(DataResult.success(ImmutableList.builder()));
             mapLike.entries().forEach((pair) -> {
                DataResult<MemoryModuleType<?>> dataResult = Registry.MEMORY_MODULE_TYPE.parse(dynamicOps, pair.getFirst());
                DataResult<? extends Brain.MemoryValue<?>> dataResult2 = dataResult.flatMap((memoryModuleType) -> this.captureRead(memoryModuleType, dynamicOps, (T)pair.getSecond()));
-               mutableObject.setValue((mutableObject.getValue()).apply2(Builder::add, dataResult2));
+               mutableObjectIn.setValue(mutableObjectIn.getValue().apply2(Builder::add, dataResult2));
             });
-            ImmutableList<Brain.MemoryValue<?>> immutableList = (ImmutableList)(mutableObject.getValue()).resultOrPartial(Brain.LOGGER::error).map(Builder::build).orElseGet(ImmutableList::of);
-            return DataResult.success(new Brain(collection, collection2, immutableList, mutableObject::getValue));
+            ImmutableList<Brain.MemoryValue<?>> immutableList = mutableObjectIn.getValue().resultOrPartial(Brain.LOGGER::error).map(Builder::build).orElseGet(ImmutableList::of);
+            return DataResult.success(new Brain<>(collection, collection2, immutableList, mutableObject::getValue));
          }
 
          private <T, U> DataResult<Brain.MemoryValue<U>> captureRead(MemoryModuleType<U> memoryModuleType, DynamicOps<T> dynamicOps, T object) {
@@ -157,7 +157,7 @@ public class Brain<E extends LivingEntity> {
    }
 
    public <U> Optional<U> getMemory(MemoryModuleType<U> memoryModuleType) {
-      return (this.memories.get(memoryModuleType)).map(ExpirableValue::getValue);
+      return (Optional<U>) (this.memories.get(memoryModuleType)).map(ExpirableValue::getValue);
    }
 
    public <U> long getTimeUntilExpiry(MemoryModuleType<U> memoryModuleType) {
@@ -315,11 +315,8 @@ public class Brain<E extends LivingEntity> {
          this.activityMemoriesToEraseWhenStopped.put(activity, set2);
       }
 
-      UnmodifiableIterator var5 = immutableList.iterator();
-
-      while(var5.hasNext()) {
-         Pair<Integer, ? extends Behavior<? super E>> pair = var5.next();
-         (((Map)this.availableBehaviorsByPriority.computeIfAbsent((Integer)pair.getFirst(), (integer) -> Maps.newHashMap())).computeIfAbsent(activity, (activityx) -> Sets.newLinkedHashSet())).add((Behavior)pair.getSecond());
+      for (Pair<Integer, ? extends Behavior<? super E>> pair : immutableList) {
+         (this.availableBehaviorsByPriority.computeIfAbsent((Integer) pair.getFirst(), (integer) -> Maps.newHashMap()).computeIfAbsent(activity, (activityx) -> Sets.newLinkedHashSet())).add(pair.getSecond());
       }
 
    }
@@ -426,16 +423,15 @@ public class Brain<E extends LivingEntity> {
    }
 
    private boolean isEmptyCollection(Object object) {
-      return object instanceof Collection && (object).isEmpty();
+      return object instanceof Collection && ((Collection<?>) object).isEmpty();
    }
 
    ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>> createPriorityPairs(int i, ImmutableList<? extends Behavior<? super E>> immutableList) {
       int i2 = i;
       Builder<Pair<Integer, ? extends Behavior<? super E>>> builder = ImmutableList.builder();
-      UnmodifiableIterator var5 = immutableList.iterator();
 
-      while(var5.hasNext()) {
-         Behavior<? super E> behavior = (Behavior)var5.next();
+      for (Behavior<? super E> value : immutableList) {
+         Behavior<? super E> behavior = (Behavior) value;
          builder.add(Pair.of(i2++, behavior));
       }
 
@@ -447,7 +443,7 @@ public class Brain<E extends LivingEntity> {
       private final Optional<? extends ExpirableValue<U>> value;
 
       static <U> Brain.MemoryValue<U> createUnchecked(MemoryModuleType<U> memoryModuleType, Optional<? extends ExpirableValue<?>> optional) {
-         return new Brain.MemoryValue<>(memoryModuleType, optional);
+         return new Brain.MemoryValue(memoryModuleType, optional);
       }
 
       MemoryValue(MemoryModuleType<U> memoryModuleType, Optional<? extends ExpirableValue<U>> optional) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
index b8755f7546520cd494b4e62b3868763b169a7576..e67f92196cd313555def10666be8223eac4b834e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
@@ -74,7 +74,8 @@ import org.apache.logging.log4j.Logger;
 
 public class DefaultAttributes {
    private static final Logger LOGGER = LogManager.getLogger();
-   private static final Map<EntityType<? extends LivingEntity>, AttributeSupplier> SUPPLIERS = ImmutableMap.builder().put(EntityType.ARMOR_STAND, LivingEntity.createLivingAttributes().build()).put(EntityType.AXOLOTL, Axolotl.createAttributes().build()).put(EntityType.BAT, Bat.createAttributes().build()).put(EntityType.BEE, Bee.createAttributes().build()).put(EntityType.BLAZE, Blaze.createAttributes().build()).put(EntityType.CAT, Cat.createAttributes().build()).put(EntityType.CAVE_SPIDER, CaveSpider.createCaveSpider().build()).put(EntityType.CHICKEN, Chicken.createAttributes().build()).put(EntityType.COD, AbstractFish.createAttributes().build()).put(EntityType.COW, Cow.createAttributes().build()).put(EntityType.CREEPER, Creeper.createAttributes().build()).put(EntityType.DOLPHIN, Dolphin.createAttributes().build()).put(EntityType.DONKEY, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.DROWNED, Zombie.createAttributes().build()).put(EntityType.ELDER_GUARDIAN, ElderGuardian.createAttributes().build()).put(EntityType.ENDERMAN, EnderMan.createAttributes().build()).put(EntityType.ENDERMITE, Endermite.createAttributes().build()).put(EntityType.ENDER_DRAGON, EnderDragon.createAttributes().build()).put(EntityType.EVOKER, Evoker.createAttributes().build()).put(EntityType.FOX, Fox.createAttributes().build()).put(EntityType.GHAST, Ghast.createAttributes().build()).put(EntityType.GIANT, Giant.createAttributes().build()).put(EntityType.GLOW_SQUID, GlowSquid.createAttributes().build()).put(EntityType.GOAT, Goat.createAttributes().build()).put(EntityType.GUARDIAN, Guardian.createAttributes().build()).put(EntityType.HOGLIN, Hoglin.createAttributes().build()).put(EntityType.HORSE, AbstractHorse.createBaseHorseAttributes().build()).put(EntityType.HUSK, Zombie.createAttributes().build()).put(EntityType.ILLUSIONER, Illusioner.createAttributes().build()).put(EntityType.IRON_GOLEM, IronGolem.createAttributes().build()).put(EntityType.LLAMA, Llama.createAttributes().build()).put(EntityType.MAGMA_CUBE, MagmaCube.createAttributes().build()).put(EntityType.MOOSHROOM, Cow.createAttributes().build()).put(EntityType.MULE, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.OCELOT, Ocelot.createAttributes().build()).put(EntityType.PANDA, Panda.createAttributes().build()).put(EntityType.PARROT, Parrot.createAttributes().build()).put(EntityType.PHANTOM, Monster.createMonsterAttributes().build()).put(EntityType.PIG, Pig.createAttributes().build()).put(EntityType.PIGLIN, Piglin.createAttributes().build()).put(EntityType.PIGLIN_BRUTE, PiglinBrute.createAttributes().build()).put(EntityType.PILLAGER, Pillager.createAttributes().build()).put(EntityType.PLAYER, Player.createAttributes().build()).put(EntityType.POLAR_BEAR, PolarBear.createAttributes().build()).put(EntityType.PUFFERFISH, AbstractFish.createAttributes().build()).put(EntityType.RABBIT, Rabbit.createAttributes().build()).put(EntityType.RAVAGER, Ravager.createAttributes().build()).put(EntityType.SALMON, AbstractFish.createAttributes().build()).put(EntityType.SHEEP, Sheep.createAttributes().build()).put(EntityType.SHULKER, Shulker.createAttributes().build()).put(EntityType.SILVERFISH, Silverfish.createAttributes().build()).put(EntityType.SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.SKELETON_HORSE, SkeletonHorse.createAttributes().build()).put(EntityType.SLIME, Monster.createMonsterAttributes().build()).put(EntityType.SNOW_GOLEM, SnowGolem.createAttributes().build()).put(EntityType.SPIDER, Spider.createAttributes().build()).put(EntityType.SQUID, Squid.createAttributes().build()).put(EntityType.STRAY, AbstractSkeleton.createAttributes().build()).put(EntityType.STRIDER, Strider.createAttributes().build()).put(EntityType.TRADER_LLAMA, Llama.createAttributes().build()).put(EntityType.TROPICAL_FISH, AbstractFish.createAttributes().build()).put(EntityType.TURTLE, Turtle.createAttributes().build()).put(EntityType.VEX, Vex.createAttributes().build()).put(EntityType.VILLAGER, Villager.createAttributes().build()).put(EntityType.VINDICATOR, Vindicator.createAttributes().build()).put(EntityType.WANDERING_TRADER, Mob.createMobAttributes().build()).put(EntityType.WITCH, Witch.createAttributes().build()).put(EntityType.WITHER, WitherBoss.createAttributes().build()).put(EntityType.WITHER_SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.WOLF, Wolf.createAttributes().build()).put(EntityType.ZOGLIN, Zoglin.createAttributes().build()).put(EntityType.ZOMBIE, Zombie.createAttributes().build()).put(EntityType.ZOMBIE_HORSE, ZombieHorse.createAttributes().build()).put(EntityType.ZOMBIE_VILLAGER, Zombie.createAttributes().build()).put(EntityType.ZOMBIFIED_PIGLIN, ZombifiedPiglin.createAttributes().build()).build();
+   // MagmaCube - decompile error
+   private static final Map<EntityType<? extends LivingEntity>, AttributeSupplier> SUPPLIERS = ImmutableMap.<EntityType<? extends LivingEntity>, AttributeSupplier>builder().put(EntityType.ARMOR_STAND, LivingEntity.createLivingAttributes().build()).put(EntityType.AXOLOTL, Axolotl.createAttributes().build()).put(EntityType.BAT, Bat.createAttributes().build()).put(EntityType.BEE, Bee.createAttributes().build()).put(EntityType.BLAZE, Blaze.createAttributes().build()).put(EntityType.CAT, Cat.createAttributes().build()).put(EntityType.CAVE_SPIDER, CaveSpider.createCaveSpider().build()).put(EntityType.CHICKEN, Chicken.createAttributes().build()).put(EntityType.COD, AbstractFish.createAttributes().build()).put(EntityType.COW, Cow.createAttributes().build()).put(EntityType.CREEPER, Creeper.createAttributes().build()).put(EntityType.DOLPHIN, Dolphin.createAttributes().build()).put(EntityType.DONKEY, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.DROWNED, Zombie.createAttributes().build()).put(EntityType.ELDER_GUARDIAN, ElderGuardian.createAttributes().build()).put(EntityType.ENDERMAN, EnderMan.createAttributes().build()).put(EntityType.ENDERMITE, Endermite.createAttributes().build()).put(EntityType.ENDER_DRAGON, EnderDragon.createAttributes().build()).put(EntityType.EVOKER, Evoker.createAttributes().build()).put(EntityType.FOX, Fox.createAttributes().build()).put(EntityType.GHAST, Ghast.createAttributes().build()).put(EntityType.GIANT, Giant.createAttributes().build()).put(EntityType.GLOW_SQUID, GlowSquid.createAttributes().build()).put(EntityType.GOAT, Goat.createAttributes().build()).put(EntityType.GUARDIAN, Guardian.createAttributes().build()).put(EntityType.HOGLIN, Hoglin.createAttributes().build()).put(EntityType.HORSE, AbstractHorse.createBaseHorseAttributes().build()).put(EntityType.HUSK, Zombie.createAttributes().build()).put(EntityType.ILLUSIONER, Illusioner.createAttributes().build()).put(EntityType.IRON_GOLEM, IronGolem.createAttributes().build()).put(EntityType.LLAMA, Llama.createAttributes().build()).put(EntityType.MAGMA_CUBE, MagmaCube.createAttributes().build()).put(EntityType.MOOSHROOM, Cow.createAttributes().build()).put(EntityType.MULE, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.OCELOT, Ocelot.createAttributes().build()).put(EntityType.PANDA, Panda.createAttributes().build()).put(EntityType.PARROT, Parrot.createAttributes().build()).put(EntityType.PHANTOM, Monster.createMonsterAttributes().build()).put(EntityType.PIG, Pig.createAttributes().build()).put(EntityType.PIGLIN, Piglin.createAttributes().build()).put(EntityType.PIGLIN_BRUTE, PiglinBrute.createAttributes().build()).put(EntityType.PILLAGER, Pillager.createAttributes().build()).put(EntityType.PLAYER, Player.createAttributes().build()).put(EntityType.POLAR_BEAR, PolarBear.createAttributes().build()).put(EntityType.PUFFERFISH, AbstractFish.createAttributes().build()).put(EntityType.RABBIT, Rabbit.createAttributes().build()).put(EntityType.RAVAGER, Ravager.createAttributes().build()).put(EntityType.SALMON, AbstractFish.createAttributes().build()).put(EntityType.SHEEP, Sheep.createAttributes().build()).put(EntityType.SHULKER, Shulker.createAttributes().build()).put(EntityType.SILVERFISH, Silverfish.createAttributes().build()).put(EntityType.SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.SKELETON_HORSE, SkeletonHorse.createAttributes().build()).put(EntityType.SLIME, Monster.createMonsterAttributes().build()).put(EntityType.SNOW_GOLEM, SnowGolem.createAttributes().build()).put(EntityType.SPIDER, Spider.createAttributes().build()).put(EntityType.SQUID, Squid.createAttributes().build()).put(EntityType.STRAY, AbstractSkeleton.createAttributes().build()).put(EntityType.STRIDER, Strider.createAttributes().build()).put(EntityType.TRADER_LLAMA, Llama.createAttributes().build()).put(EntityType.TROPICAL_FISH, AbstractFish.createAttributes().build()).put(EntityType.TURTLE, Turtle.createAttributes().build()).put(EntityType.VEX, Vex.createAttributes().build()).put(EntityType.VILLAGER, Villager.createAttributes().build()).put(EntityType.VINDICATOR, Vindicator.createAttributes().build()).put(EntityType.WANDERING_TRADER, Mob.createMobAttributes().build()).put(EntityType.WITCH, Witch.createAttributes().build()).put(EntityType.WITHER, WitherBoss.createAttributes().build()).put(EntityType.WITHER_SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.WOLF, Wolf.createAttributes().build()).put(EntityType.ZOGLIN, Zoglin.createAttributes().build()).put(EntityType.ZOMBIE, Zombie.createAttributes().build()).put(EntityType.ZOMBIE_HORSE, ZombieHorse.createAttributes().build()).put(EntityType.ZOMBIE_VILLAGER, Zombie.createAttributes().build()).put(EntityType.ZOMBIFIED_PIGLIN, ZombifiedPiglin.createAttributes().build()).build();
 
    public static AttributeSupplier getSupplier(EntityType<? extends LivingEntity> entityType) {
       return (AttributeSupplier)SUPPLIERS.get(entityType);
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
index 99e428406660860d2bdcb86dabff5aad999ea5c0..74a32ee8a3544d701d18e577b2368af2eddf038c 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
@@ -49,12 +49,15 @@ public class InteractWith<E extends LivingEntity, T extends LivingEntity> extend
    }
 
    private boolean isTargetValid(LivingEntity livingEntity) {
-      return this.type.equals(livingEntity.getType()) && this.targetFilter.test(livingEntity);
+      return this.type.equals(livingEntity.getType()) && this.targetFilter.test((T) livingEntity); // MagmaCube - decompile error
    }
 
    protected void start(ServerLevel serverLevel, E livingEntity, long l) {
       Brain<?> brain = livingEntity.getBrain();
-      brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).ifPresent((list) -> list.stream().filter((livingEntityx) -> this.type.equals(livingEntityx.getType())).map((livingEntityx) -> livingEntityx).filter((livingEntity2) -> livingEntity2.distanceToSqr(livingEntity) <= (double)this.interactionRangeSqr).filter(this.targetFilter).findFirst().ifPresent((livingEntityx) -> {
+      // MagmaCube start - decompile error
+      brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).ifPresent((list) -> list.stream().filter((livingEntityx) -> this.type.equals(livingEntityx.getType())).map((livingEntityx) -> livingEntityx).filter((livingEntity2) -> livingEntity2.distanceToSqr(livingEntity) <= (double)this.interactionRangeSqr).filter((Predicate) this.targetFilter).findFirst().ifPresent((livingEntityxx) -> {
+            LivingEntity livingEntityx = (LivingEntity) livingEntityxx;
+            // MagmaCube end - decompile error
             brain.setMemory(this.memory, (T)livingEntityx);
             brain.setMemory(MemoryModuleType.LOOK_TARGET, new EntityTracker(livingEntityx, true));
             brain.setMemory(MemoryModuleType.WALK_TARGET, new WalkTarget(new EntityTracker(livingEntityx, false), this.speedModifier, this.maxDist));
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java b/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
index dbf22d779712a6e850941a68bd11695e928eaf56..989f728e6c3d4caac56b68b68ffa0ada4da20c40 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
@@ -50,13 +50,15 @@ public class SetClosestHomeAsWalkTarget extends Behavior<LivingEntity> {
       PathfinderMob pathfinderMob = (PathfinderMob)livingEntity;
       PoiManager poiManager = serverLevel.getPoiManager();
       Predicate<BlockPos> predicate = (blockPosx) -> {
-         long l = blockPosx.asLong();
-         if (this.batchCache.containsKey(l)) {
+         // MagmaCube start - decompile error
+         long lx = blockPosx.asLong();
+         if (this.batchCache.containsKey(lx)) {
+            // MagmaCube end - decompile error
             return false;
          } else if (++this.triedCount >= 5) {
             return false;
          } else {
-            this.batchCache.put(l, this.lastUpdate + 40L);
+            this.batchCache.put(lx, this.lastUpdate + 40L); // MagmaCube - decompile error
             return true;
          }
       };
diff --git a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
index b1d40ce55e3ab20efe11161be039acd6eb70a887..ee636f7665537aa3e2293a045e859f9d99563108 100644
--- a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
+++ b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
@@ -91,10 +91,12 @@ public class GossipContainer {
    public void transferFrom(GossipContainer gossipContainer, Random random, int i) {
       Collection<GossipContainer.GossipEntry> collection = gossipContainer.selectGossipsForTransfer(random, i);
       collection.forEach((gossipEntry) -> {
-         int i = gossipEntry.value - gossipEntry.type.decayPerTransfer;
-         if (i >= 2) {
-            this.getOrCreate(gossipEntry.target).entries.mergeInt(gossipEntry.type, i, GossipContainer::mergeValuesForTransfer);
+         // MagmaCube start - decompile error
+         int i1 = gossipEntry.value - gossipEntry.type.decayPerTransfer;
+         if (i1 >= 2) {
+            this.getOrCreate(gossipEntry.target).entries.mergeInt(gossipEntry.type, i1, GossipContainer::mergeValuesForTransfer);
          }
+         // MagmaCube end - decompile error
 
       });
    }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
index 94aa3579c6ddfaff0b04b32e98b8789e4c0f55f0..04eeafb542b355e42d5ab5607c2b59817a3e4711 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
@@ -6,7 +6,8 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 
 public class VillagerHostilesSensor extends NearestVisibleLivingEntitySensor {
-   private static final ImmutableMap<EntityType<?>, Float> ACCEPTABLE_DISTANCE_FROM_HOSTILES = ImmutableMap.builder().put(EntityType.DROWNED, 8.0F).put(EntityType.EVOKER, 12.0F).put(EntityType.HUSK, 8.0F).put(EntityType.ILLUSIONER, 12.0F).put(EntityType.PILLAGER, 15.0F).put(EntityType.RAVAGER, 12.0F).put(EntityType.VEX, 8.0F).put(EntityType.VINDICATOR, 10.0F).put(EntityType.ZOGLIN, 10.0F).put(EntityType.ZOMBIE, 8.0F).put(EntityType.ZOMBIE_VILLAGER, 8.0F).build();
+   // MagmaCube - decompile error
+   private static final ImmutableMap<EntityType<?>, Float> ACCEPTABLE_DISTANCE_FROM_HOSTILES = ImmutableMap.<EntityType<?>, Float>builder().put(EntityType.DROWNED, 8.0F).put(EntityType.EVOKER, 12.0F).put(EntityType.HUSK, 8.0F).put(EntityType.ILLUSIONER, 12.0F).put(EntityType.PILLAGER, 15.0F).put(EntityType.RAVAGER, 12.0F).put(EntityType.VEX, 8.0F).put(EntityType.VINDICATOR, 10.0F).put(EntityType.ZOGLIN, 10.0F).put(EntityType.ZOMBIE, 8.0F).put(EntityType.ZOMBIE_VILLAGER, 8.0F).build();
 
    protected boolean isMatchingEntity(LivingEntity livingEntity, LivingEntity livingEntity2) {
       return this.isHostile(livingEntity2) && this.isClose(livingEntity, livingEntity2);
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
index 2fbcd56a538b6a1e366e09d72fbc67f1a1565448..a429503b82f58aaa0fd42e39447a89a6790083f3 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -31,7 +31,7 @@ public class PoiSection {
    private boolean isValid;
 
    public static Codec<PoiSection> codec(Runnable runnable) {
-      return RecordCodecBuilder.create((instance) -> instance.group(RecordCodecBuilder.point(runnable), Codec.BOOL.optionalFieldOf("Valid", false).forGetter((poiSection) -> poiSection.isValid), PoiRecord.codec(runnable).listOf().fieldOf("Records").forGetter((poiSection) -> ImmutableList.copyOf(poiSection.records.values()))).apply(instance, PoiSection::new)).orElseGet(Util.prefix("Failed to read POI section: ", LOGGER::error), () -> new PoiSection(runnable, false, ImmutableList.of()));
+      return RecordCodecBuilder.<PoiSection>create((instance) -> instance.group(RecordCodecBuilder.point(runnable), Codec.BOOL.optionalFieldOf("Valid", false).forGetter((poiSection) -> poiSection.isValid), PoiRecord.codec(runnable).listOf().fieldOf("Records").forGetter((poiSection) -> ImmutableList.copyOf(poiSection.records.values()))).apply(instance, PoiSection::new)).orElseGet(Util.prefix("Failed to read POI section: ", LOGGER::error), () -> new PoiSection(runnable, false, ImmutableList.of()));
    }
 
    public PoiSection(Runnable runnable) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
index ab72eb8cfc43f1c9bdb07537d13320cd004394c2..2bed798e35e56e7080c469b078f31681d2dbc93e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
@@ -93,7 +93,7 @@ public abstract class AbstractFish extends WaterAnimal implements Bucketable {
    protected void registerGoals() {
       super.registerGoals();
       this.goalSelector.addGoal(0, new PanicGoal(this, 1.25D));
-      this.goalSelector.addGoal(2, new AvoidEntityGoal(this, Player.class, 8.0F, 1.6D, 1.4D, EntitySelector.NO_SPECTATORS::test));
+      this.goalSelector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0F, 1.6D, 1.4D, EntitySelector.NO_SPECTATORS::test)); // MagmaCube - decompile error
       this.goalSelector.addGoal(4, new AbstractFish.FishSwimGoal(this));
    }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index 78c6d3281b43d5e5091431f2a50dcbeb48f9f9e4..abb465e6d05befffd430468edb8c016256fbaec6 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -144,7 +144,7 @@ public class Fox extends Animal {
       this.goalSelector.addGoal(1, new Fox.FaceplantGoal());
       this.goalSelector.addGoal(2, new Fox.FoxPanicGoal(2.2D));
       this.goalSelector.addGoal(3, new Fox.FoxBreedGoal(1.0D));
-      this.goalSelector.addGoal(4, new AvoidEntityGoal(this, Player.class, 16.0F, 1.6D, 1.4D, (livingEntity) -> AVOID_PLAYERS.test(livingEntity) && !this.trusts(livingEntity.getUUID()) && !this.isDefending()));
+      this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Player.class, 16.0F, 1.6D, 1.4D, (livingEntity) -> AVOID_PLAYERS.test(livingEntity) && !this.trusts(livingEntity.getUUID()) && !this.isDefending()));
       this.goalSelector.addGoal(4, new AvoidEntityGoal(this, Wolf.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !((Wolf)livingEntity).isTame() && !this.isDefending()));
       this.goalSelector.addGoal(4, new AvoidEntityGoal(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !this.isDefending()));
       this.goalSelector.addGoal(5, new Fox.StalkPreyGoal());
diff --git a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
index bd35389dd5e8e62e0fd20b60506a74bda30ab349..e46f7fd53029c5a68694ebdbc25a7f2fc0fca2a9 100644
--- a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
@@ -77,8 +77,8 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
       this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
       this.targetSelector.addGoal(1, new DefendVillageTargetGoal(this));
       this.targetSelector.addGoal(2, new HurtByTargetGoal(this));
-      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, this::isAngryAt));
-      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Mob.class, 5, false, false, (livingEntity) -> livingEntity instanceof Enemy && !(livingEntity instanceof Creeper)));
+      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt)); // MagmaCube - decompile error
+      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Mob.class, 5, false, false, (livingEntity) -> livingEntity instanceof Enemy && !(livingEntity instanceof Creeper))); // MagmaCube - decompile error
       this.targetSelector.addGoal(4, new ResetUniversalAngerTargetGoal<>(this, false));
    }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
index d931ff96a108c76fe0b435a150215d22f55092f2..685940ef536878d0db3d2311e41be9d198ae40b2 100644
--- a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
+++ b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
@@ -85,8 +85,8 @@ public class PolarBear extends Animal implements NeutralMob {
       this.goalSelector.addGoal(7, new RandomLookAroundGoal(this));
       this.targetSelector.addGoal(1, new PolarBear.PolarBearHurtByTargetGoal());
       this.targetSelector.addGoal(2, new PolarBear.PolarBearAttackPlayersGoal());
-      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, this::isAngryAt));
-      this.targetSelector.addGoal(4, new NearestAttackableTargetGoal(this, Fox.class, 10, true, true, (Predicate<LivingEntity>)null));
+      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt)); // MagmaCube - decompile error
+      this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Fox.class, 10, true, true, (Predicate<LivingEntity>)null)); // MagmaCube - decompile error
       this.targetSelector.addGoal(5, new ResetUniversalAngerTargetGoal<>(this, false));
    }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index 3e2abf841133d2e7f0b5ffeb121ae7c421a1004f..2b81fb877a7caf11f2fee2b8f373c8ba8c51acc8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -102,10 +102,12 @@ public class Wolf extends TamableAnimal implements NeutralMob {
       this.targetSelector.addGoal(1, new OwnerHurtByTargetGoal(this));
       this.targetSelector.addGoal(2, new OwnerHurtTargetGoal(this));
       this.targetSelector.addGoal(3, (new HurtByTargetGoal(this)).setAlertOthers());
-      this.targetSelector.addGoal(4, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, this::isAngryAt));
-      this.targetSelector.addGoal(5, new NonTameRandomTargetGoal(this, Animal.class, false, PREY_SELECTOR));
-      this.targetSelector.addGoal(6, new NonTameRandomTargetGoal(this, Turtle.class, false, Turtle.BABY_ON_LAND_SELECTOR));
-      this.targetSelector.addGoal(7, new NearestAttackableTargetGoal(this, AbstractSkeleton.class, false));
+      // MagmaCube start - decompile error
+      this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt));
+      this.targetSelector.addGoal(5, new NonTameRandomTargetGoal<>(this, Animal.class, false, PREY_SELECTOR));
+      this.targetSelector.addGoal(6, new NonTameRandomTargetGoal<>(this, Turtle.class, false, Turtle.BABY_ON_LAND_SELECTOR));
+      this.targetSelector.addGoal(7, new NearestAttackableTargetGoal<>(this, AbstractSkeleton.class, false));
+      // MagmaCube end - decompile error
       this.targetSelector.addGoal(8, new ResetUniversalAngerTargetGoal<>(this, true));
    }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index f20abd065de23881f675c909923aa33ede35ada6..cbbd40f202ef9363622ad9958564d5e5ea520aee 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -66,7 +66,7 @@ import net.minecraft.world.phys.Vec3;
 public class Axolotl extends Animal implements LerpingModel, Bucketable {
    public static final int TOTAL_PLAYDEAD_TIME = 200;
    protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Axolotl>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.AXOLOTL_ATTACKABLES, SensorType.AXOLOTL_TEMPTATIONS);
-   protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN});
+   protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN});
    private static final EntityDataAccessor<Integer> DATA_VARIANT = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.INT);
    private static final EntityDataAccessor<Boolean> DATA_PLAYING_DEAD = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
    private static final EntityDataAccessor<Boolean> FROM_BUCKET = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
@@ -409,7 +409,7 @@ public class Axolotl extends Animal implements LerpingModel, Bucketable {
    }
 
    public Brain<Axolotl> getBrain() {
-      return super.getBrain();
+      return (Brain<Axolotl>) super.getBrain();
    }
 
    protected void sendDebugPackets() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/AxolotlAi.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/AxolotlAi.java
index 6a5517342acf407de716c0a8b071dd8ccb3802f6..bb7901f9bb11a39b52e51fbf869a1cf60e88d441 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/AxolotlAi.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/AxolotlAi.java
@@ -72,7 +72,7 @@ public class AxolotlAi {
    }
 
    private static void initIdleActivity(Brain<Axolotl> brain) {
-      brain.addActivity(Activity.IDLE, ImmutableList.of(Pair.of(0, new RunSometimes<>(new SetEntityLookTarget(EntityType.PLAYER, 6.0F), UniformInt.of(30, 60))), Pair.of(1, new AnimalMakeLove(EntityType.AXOLOTL, 0.2F)), Pair.of(2, new RunOne<>(ImmutableList.of(Pair.of(new FollowTemptation(AxolotlAi::getSpeedModifier), 1), Pair.of(new BabyFollowAdult<>(ADULT_FOLLOW_RANGE, AxolotlAi::getSpeedModifierFollowingAdult), 1)))), Pair.of(3, new StartAttacking<>(AxolotlAi::findNearestValidAttackTarget)), Pair.of(3, new TryFindWater(6, 0.15F)), Pair.of(4, new GateBehavior(ImmutableMap.of(MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT), ImmutableSet.of(), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.TRY_ALL, ImmutableList.of(Pair.of(new RandomSwim(0.5F), 2), Pair.of(new RandomStroll(0.15F, false), 2), Pair.of(new SetWalkTargetFromLookTarget(AxolotlAi::canSetWalkTargetFromLookTarget, AxolotlAi::getSpeedModifier, 3), 3), Pair.of(new RunIf<>(Entity::isInWaterOrBubble, new DoNothing(30, 60)), 5), Pair.of(new RunIf<>(Entity::isOnGround, new DoNothing(200, 400)), 5))))));
+      brain.addActivity(Activity.IDLE, ImmutableList.of(Pair.of(0, new RunSometimes<>(new SetEntityLookTarget(EntityType.PLAYER, 6.0F), UniformInt.of(30, 60))), Pair.of(1, new AnimalMakeLove(EntityType.AXOLOTL, 0.2F)), Pair.of(2, new RunOne<>(ImmutableList.of(Pair.of(new FollowTemptation(AxolotlAi::getSpeedModifier), 1), Pair.of(new BabyFollowAdult<>(ADULT_FOLLOW_RANGE, AxolotlAi::getSpeedModifierFollowingAdult), 1)))), Pair.of(3, new StartAttacking<>(AxolotlAi::findNearestValidAttackTarget)), Pair.of(3, new TryFindWater(6, 0.15F)), Pair.of(4, new GateBehavior<>(ImmutableMap.of(MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT), ImmutableSet.of(), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.TRY_ALL, ImmutableList.of(Pair.of(new RandomSwim(0.5F), 2), Pair.of(new RandomStroll(0.15F, false), 2), Pair.of(new SetWalkTargetFromLookTarget(AxolotlAi::canSetWalkTargetFromLookTarget, AxolotlAi::getSpeedModifier, 3), 3), Pair.of(new RunIf<>(Entity::isInWaterOrBubble, new DoNothing(30, 60)), 5), Pair.of(new RunIf<>(Entity::isOnGround, new DoNothing(200, 400)), 5))))));
    }
 
    private static boolean canSetWalkTargetFromLookTarget(LivingEntity livingEntity) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index 66778c894dd688e90e5a26edc644055f6ea70ff5..082da4970225d7a30d143c26db3e59d4c317d2e6 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -121,7 +121,7 @@ public class Goat extends Animal {
    }
 
    public Brain<Goat> getBrain() {
-      return super.getBrain();
+      return (Brain<Goat>) super.getBrain(); // MagmaCube - decompile error
    }
 
    protected void customServerAiStep() {
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 649addbf10ad13119055385b144f4e3127ec743d..fee974d84b014b886944435af9ee6572b25e307e 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -472,11 +472,11 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
    }
 
    public int getAlternativeTarget(int i) {
-      return this.entityData.get((EntityDataAccessor)DATA_TARGETS.get(i));
+      return this.entityData.get(DATA_TARGETS.get(i)); // MagmaCube - decompile error
    }
 
    public void setAlternativeTarget(int i, int i2) {
-      this.entityData.set((EntityDataAccessor)DATA_TARGETS.get(i), i2);
+      this.entityData.set(DATA_TARGETS.get(i), i2); // MagmaCube - decompile error
    }
 
    public boolean isPowered() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Drowned.java b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
index 942ebb485927e260b1da4239d3534dc7847be58b..6d396e51c46713e9df5b60ee8a53c4b17948c980 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Drowned.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
@@ -77,7 +77,7 @@ public class Drowned extends Zombie implements RangedAttackMob {
       this.goalSelector.addGoal(6, new Drowned.DrownedSwimUpGoal(this, 1.0D, this.level.getSeaLevel()));
       this.goalSelector.addGoal(7, new RandomStrollGoal(this, 1.0D));
       this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, Drowned.class)).setAlertOthers(ZombifiedPiglin.class));
-      this.targetSelector.addGoal(2, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, this::okTarget));
+      this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::okTarget)); // MagmaCube - decompile error
       this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, AbstractVillager.class, false));
       this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, IronGolem.class, true));
       this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Axolotl.class, true, false));
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ghast.java b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
index 93dd8aa4396c910d9524ffe6b9d54b99576971b0..2d5838fbb76936aad139dea6a3746f2bccc76aa0 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ghast.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
@@ -46,7 +46,7 @@ public class Ghast extends FlyingMob implements Enemy {
       this.goalSelector.addGoal(5, new Ghast.RandomFloatAroundGoal(this));
       this.goalSelector.addGoal(7, new Ghast.GhastLookGoal(this));
       this.goalSelector.addGoal(7, new Ghast.GhastShootFireballGoal(this));
-      this.targetSelector.addGoal(1, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, (livingEntity) -> Math.abs(livingEntity.getY() - this.getY()) <= 4.0D));
+      this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, (livingEntity) -> Math.abs(livingEntity.getY() - this.getY()) <= 4.0D)); // MagmaCube - decompile error
    }
 
    public boolean isCharging() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index ae84ab7e3100e38b7a919e4290c8ca02850c10a3..7781176073aca1c469efc274b8930a6ad998c68d 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -218,7 +218,7 @@ public class Phantom extends FlyingMob implements Enemy {
             this.nextScanTick = 60;
             List<Player> list = Phantom.this.level.getNearbyPlayers(this.attackTargeting, Phantom.this, Phantom.this.getBoundingBox().inflate(16.0D, 64.0D, 16.0D));
             if (!list.isEmpty()) {
-               list.sort(Comparator.comparing(Entity::getY).reversed());
+               list.sort(Comparator.<Entity, Double>comparing(Entity::getY).reversed()); // MagmaCube - decompile error
 
                for(Player player : list) {
                   if (Phantom.this.canAttack(player, TargetingConditions.DEFAULT)) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index f49cc4da12a6c1d8274d3d044e6ebaf59a51d4a0..a4f76b3c6bc135bda8c4b0cf01615a3a0268b468 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -64,8 +64,8 @@ public class Slime extends Mob implements Enemy {
       this.goalSelector.addGoal(2, new Slime.SlimeAttackGoal(this));
       this.goalSelector.addGoal(3, new Slime.SlimeRandomDirectionGoal(this));
       this.goalSelector.addGoal(5, new Slime.SlimeKeepOnJumpingGoal(this));
-      this.targetSelector.addGoal(1, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, (livingEntity) -> Math.abs(livingEntity.getY() - this.getY()) <= 4.0D));
-      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, IronGolem.class, true));
+      this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, (livingEntity) -> Math.abs(livingEntity.getY() - this.getY()) <= 4.0D)); // MagmaCube - decompile error
+      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true)); // MagmaCube - decompile error
    }
 
    protected void defineSynchedData() {
@@ -171,7 +171,7 @@ public class Slime extends Mob implements Enemy {
    }
 
    public EntityType<? extends Slime> getType() {
-      return super.getType();
+      return (EntityType<? extends Slime>) super.getType(); // MagmaCube - decompile error
    }
 
    public void remove(Entity.RemovalReason removalReason) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
index fe717770f9ca8e57d6ff7f8a90dd0ea67273e004..ca4a29b5478cd6508dea0033f0e398064838b4c3 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
@@ -173,7 +173,7 @@ public class Zoglin extends Monster implements Enemy, HoglinBase {
    }
 
    public Brain<Zoglin> getBrain() {
-      return super.getBrain();
+      return (Brain<Zoglin>) super.getBrain();
    }
 
    protected void updateActivity() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
index b7d22f80868f12c958e70a6ed63f0dea0a6d716f..15ea5f61d892890c8fbffdf525de1e9c1a254c1c 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
@@ -67,7 +67,7 @@ public class ZombifiedPiglin extends Zombie implements NeutralMob {
       this.goalSelector.addGoal(2, new ZombieAttackGoal(this, 1.0D, false));
       this.goalSelector.addGoal(7, new WaterAvoidingRandomStrollGoal(this, 1.0D));
       this.targetSelector.addGoal(1, (new HurtByTargetGoal(this)).setAlertOthers());
-      this.targetSelector.addGoal(2, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, this::isAngryAt));
+      this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt)); // MagmaCube - decompile error
       this.targetSelector.addGoal(3, new ResetUniversalAngerTargetGoal<>(this, true));
    }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index b9a645db0a12a7cc02640e6626b4c923b80b292b..4d1396953a4f327cfe5824dcad6a2f5c4f52669b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -60,7 +60,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
    private int timeInOverworld;
    private boolean cannotBeHunted;
    protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Hoglin>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ADULT, SensorType.HOGLIN_SPECIFIC_SENSOR);
-   protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED});
+   protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED});
 
    public Hoglin(EntityType<? extends Hoglin> entityType, Level level) {
       super(entityType, level);
@@ -116,7 +116,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
    }
 
    public Brain<Hoglin> getBrain() {
-      return super.getBrain();
+      return (Brain<Hoglin>) super.getBrain();
    }
 
    protected void customServerAiStep() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index 484b920313ddd7778e0ed39c1815119517820aa8..2e95bfaebb85136c94541ea0b61c5d906f6c9c81 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -191,7 +191,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
    }
 
    public Brain<Piglin> getBrain() {
-      return super.getBrain();
+      return (Brain<Piglin>) super.getBrain(); // MagmaCube - decompile error
    }
 
    public InteractionResult mobInteract(Player player, InteractionHand interactionHand) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
index 1290a1bf248ae3a5d2dedebe85a7b4b21a995047..fa5674a81ac1c7f0e7bb8438b766452b79dc312e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
@@ -144,7 +144,7 @@ public class PiglinAi {
    }
 
    private static void initAdmireItemActivity(Brain<Piglin> brain) {
-      brain.addActivityAndRemoveMemoryWhenStopped(Activity.ADMIRE_ITEM, 10, ImmutableList.of(new GoToWantedItem<>(PiglinAi::isNotHoldingLovedItemInOffHand, 1.0F, true, 9), new StopAdmiringIfItemTooFarAway(9), new StopAdmiringIfTiredOfTryingToReachItem<>(200, 200)), MemoryModuleType.ADMIRING_ITEM);
+      brain.addActivityAndRemoveMemoryWhenStopped(Activity.ADMIRE_ITEM, 10, ImmutableList.of(new GoToWantedItem<>(PiglinAi::isNotHoldingLovedItemInOffHand, 1.0F, true, 9), new StopAdmiringIfItemTooFarAway<>(9), new StopAdmiringIfTiredOfTryingToReachItem<>(200, 200)), MemoryModuleType.ADMIRING_ITEM);
    }
 
    private static void initRetreatActivity(Brain<Piglin> brain) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
index 8ef2f2675cd2d139164a401e543c2d6755ba2962..0c5d0f3f7d264adb7f00591a9284267a4d4a915f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
@@ -64,7 +64,7 @@ public class PiglinBrute extends AbstractPiglin {
    }
 
    public Brain<PiglinBrute> getBrain() {
-      return super.getBrain();
+      return (Brain<PiglinBrute>) super.getBrain(); // MagmaCube - decompile error
    }
 
    public boolean canHunt() {
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 2707c9c3ff057fd77c76cbbcc35f4d673cc257ab..076537f8e017ee13edabf9e498a14e5d4e73065d 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -116,7 +116,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
    private boolean assignProfessionWhenSpawned;
    private static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.WALK_TARGET, new MemoryModuleType[]{MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, MemoryModuleType.PATH, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.LAST_SLEPT, MemoryModuleType.LAST_WOKEN, MemoryModuleType.LAST_WORKED_AT_POI, MemoryModuleType.GOLEM_DETECTED_RECENTLY});
    private static final ImmutableList<SensorType<? extends Sensor<? super Villager>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_BED, SensorType.HURT_BY, SensorType.VILLAGER_HOSTILES, SensorType.VILLAGER_BABIES, SensorType.SECONDARY_POIS, SensorType.GOLEM_DETECTED);
-   public static final Map<MemoryModuleType<GlobalPos>, BiPredicate<Villager, PoiType>> POI_MEMORIES = ImmutableMap.of(MemoryModuleType.HOME, (BiPredicate)(villager, poiType) -> poiType == PoiType.HOME, MemoryModuleType.JOB_SITE, (BiPredicate)(villager, poiType) -> villager.getVillagerData().getProfession().getJobPoiType() == poiType, MemoryModuleType.POTENTIAL_JOB_SITE, (BiPredicate)(villager, poiType) -> PoiType.ALL_JOBS.test(poiType), MemoryModuleType.MEETING_POINT, (BiPredicate)(villager, poiType) -> poiType == PoiType.MEETING);
+   public static final Map<MemoryModuleType<GlobalPos>, BiPredicate<Villager, PoiType>> POI_MEMORIES = ImmutableMap.of(MemoryModuleType.HOME, (villager, poiType) -> poiType == PoiType.HOME, MemoryModuleType.JOB_SITE, (villager, poiType) -> villager.getVillagerData().getProfession().getJobPoiType() == poiType, MemoryModuleType.POTENTIAL_JOB_SITE, (villager, poiType) -> PoiType.ALL_JOBS.test(poiType), MemoryModuleType.MEETING_POINT, (villager, poiType) -> poiType == PoiType.MEETING); // MagmaCube - decompile error
 
    public Villager(EntityType<? extends Villager> entityType, Level level) {
       this(entityType, level, VillagerType.PLAINS);
@@ -131,7 +131,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
    }
 
    public Brain<Villager> getBrain() {
-      return super.getBrain();
+      return (Brain<Villager>) super.getBrain(); // MagmaCube - decompile error
    }
 
    protected Brain.Provider<Villager> brainProvider() {
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
index 17c1aa78620fa2e6c1de482f9fdf97e5f0e8b64a..13cba003ccaa8e13f1cc99c88d3655ce11c5433a 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
@@ -61,10 +61,12 @@ public class VillagerTrades {
    private static final float HIGH_TIER_PRICE_MULTIPLIER = 0.2F;
    public static final Map<VillagerProfession, Int2ObjectMap<VillagerTrades.ItemListing[]>> TRADES = Util.make(Maps.newHashMap(), (hashMap) -> {
       hashMap.put(VillagerProfession.FARMER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHEAT, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.POTATO, 26, 16, 2), new VillagerTrades.EmeraldForItems(Items.CARROT, 22, 16, 2), new VillagerTrades.EmeraldForItems(Items.BEETROOT, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.BREAD, 1, 6, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.PUMPKIN, 6, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN_PIE, 1, 4, 5), new VillagerTrades.ItemsForEmeralds(Items.APPLE, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.COOKIE, 3, 18, 10), new VillagerTrades.EmeraldForItems(Blocks.MELON, 4, 12, 20)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Blocks.CAKE, 1, 1, 12, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.NIGHT_VISION, 100, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.JUMP, 160, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.WEAKNESS, 140, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.BLINDNESS, 120, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.POISON, 280, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.SATURATION, 7, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GOLDEN_CARROT, 3, 3, 30), new VillagerTrades.ItemsForEmeralds(Items.GLISTERING_MELON_SLICE, 4, 3, 30)})));
-      hashMap.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, ImmutableMap.builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
+      // MagmaCube - decompile error
+      hashMap.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, (Map) ImmutableMap.builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
       hashMap.put(VillagerProfession.SHEPHERD, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.WHITE_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BROWN_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BLACK_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.GRAY_WOOL, 18, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.SHEARS, 2, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHITE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.GRAY_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.BLACK_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIGHT_BLUE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIME_DYE, 12, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_CARPET, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.YELLOW_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.LIGHT_GRAY_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.ORANGE_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.RED_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.PINK_DYE, 12, 16, 20), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.RED_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_BED, 3, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BROWN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.PURPLE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.BLUE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.GREEN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.MAGENTA_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.CYAN_DYE, 12, 16, 30), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 12, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.PAINTING, 2, 3, 30)})));
       hashMap.put(VillagerProfession.FLETCHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STICK, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.ARROW, 1, 16, 1), new VillagerTrades.ItemsAndEmeraldsToItems(Blocks.GRAVEL, 10, Items.FLINT, 10, 12, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FLINT, 26, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.BOW, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 14, 16, 20), new VillagerTrades.ItemsForEmeralds(Items.CROSSBOW, 3, 1, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FEATHER, 24, 16, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.BOW, 2, 3, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TRIPWIRE_HOOK, 8, 12, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.CROSSBOW, 3, 3, 15), new VillagerTrades.TippedArrowForItemsAndEmeralds(Items.ARROW, 5, Items.TIPPED_ARROW, 5, 2, 12, 30)})));
-      hashMap.put(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
+      // MagmaCube - decompile error
+      hashMap.put(VillagerProfession.LIBRARIAN, toIntMap((ImmutableMap) ImmutableMap.builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
       hashMap.put(VillagerProfession.CARTOGRAPHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.MAP, 7, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GLASS_PANE, 11, 16, 10), new VillagerTrades.TreasureMapForEmeralds(13, StructureFeature.OCEAN_MONUMENT, MapDecoration.Type.MONUMENT, 12, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COMPASS, 1, 12, 20), new VillagerTrades.TreasureMapForEmeralds(14, StructureFeature.WOODLAND_MANSION, MapDecoration.Type.MANSION, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.ITEM_FRAME, 7, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GLOBE_BANNER_PATTER, 8, 1, 30)})));
       hashMap.put(VillagerProfession.CLERIC, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.ROTTEN_FLESH, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.REDSTONE, 1, 2, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GOLD_INGOT, 3, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.LAPIS_LAZULI, 1, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.RABBIT_FOOT, 2, 12, 20), new VillagerTrades.ItemsForEmeralds(Blocks.GLOWSTONE, 4, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SCUTE, 4, 12, 30), new VillagerTrades.EmeraldForItems(Items.GLASS_BOTTLE, 9, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.ENDER_PEARL, 5, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.NETHER_WART, 22, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.EXPERIENCE_BOTTLE, 3, 1, 30)})));
       hashMap.put(VillagerProfession.ARMORER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_LEGGINGS), 7, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_BOOTS), 4, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_HELMET), 5, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_CHESTPLATE), 9, 1, 12, 1, 0.2F)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_BOOTS), 1, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_LEGGINGS), 3, 1, 12, 5, 0.2F)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.LAVA_BUCKET, 1, 12, 20), new VillagerTrades.EmeraldForItems(Items.DIAMOND, 1, 12, 20), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_HELMET), 1, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_CHESTPLATE), 4, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.SHIELD), 5, 1, 12, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_LEGGINGS, 14, 3, 15, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_BOOTS, 8, 3, 15, 0.2F)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_HELMET, 8, 3, 30, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_CHESTPLATE, 16, 3, 30, 0.2F)})));
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 7cd7a42306f80b4ab99f50aedeb70a0adea4be83..bae7899497019c315c2767453aeb647ba63e5c0a 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -122,7 +122,7 @@ public abstract class Player extends LivingEntity {
    public static final float SWIMMING_BB_HEIGHT = 0.6F;
    public static final float DEFAULT_EYE_HEIGHT = 1.62F;
    public static final EntityDimensions STANDING_DIMENSIONS = EntityDimensions.scalable(0.6F, 1.8F);
-   private static final Map<Pose, EntityDimensions> POSES = ImmutableMap.builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
+   private static final Map<Pose, EntityDimensions> POSES = ImmutableMap.<Pose, EntityDimensions>builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build(); // MagmaCube - decompile error
    private static final int FLY_ACHIEVEMENT_SPEED = 25;
    private static final EntityDataAccessor<Float> DATA_PLAYER_ABSORPTION_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.FLOAT);
    private static final EntityDataAccessor<Integer> DATA_SCORE_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.INT);
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index adff579442906c626499dc106aef1d0cf10ad066..b309e1e32530b58bb6014193a5cfe7763ba63d3c 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -163,7 +163,7 @@ public abstract class AbstractMinecart extends Entity {
             UnmodifiableIterator d3 = ((ImmutableList)POSE_DISMOUNT_HEIGHTS.get(pose)).iterator();
 
             while(d3.hasNext()) {
-               int i2 = d3.next();
+               int i2 = (int) d3.next(); // MagmaCube - decompile error
 
                for(int[] ints : i) {
                   mutableBlockPos.set(blockPos.getX() + ints[0], blockPos.getY() + i2, blockPos.getZ() + ints[1]);
@@ -180,16 +180,16 @@ public abstract class AbstractMinecart extends Entity {
             }
          }
 
-         double d2 = this.getBoundingBox().maxY;
-         mutableBlockPos.set((double)blockPos.getX(), d2, (double)blockPos.getZ());
+         double d2x = this.getBoundingBox().maxY; // MagmaCube - decompile error
+         mutableBlockPos.set((double)blockPos.getX(), d2x, (double)blockPos.getZ()); // MagmaCube - decompile error
          UnmodifiableIterator var22 = immutableList.iterator();
 
          while(var22.hasNext()) {
             Pose pose2 = (Pose)var22.next();
             double d3 = (double)livingEntity.getDimensions(pose2).height;
-            int i3 = Mth.ceil(d2 - (double)mutableBlockPos.getY() + d3);
+            int i3 = Mth.ceil(d2x - (double)mutableBlockPos.getY() + d3); // MagmaCube - decompile error
             double d4 = DismountHelper.findCeilingFrom(mutableBlockPos, i3, (blockPosx) -> this.level.getBlockState(blockPosx).getCollisionShape(this.level, blockPosx));
-            if (d2 + d3 <= d4) {
+            if (d2x + d3 <= d4) { // MagmaCube - decompile error
                livingEntity.setPose(pose2);
                break;
             }
diff --git a/src/main/java/net/minecraft/world/inventory/DataSlot.java b/src/main/java/net/minecraft/world/inventory/DataSlot.java
index 2fe5d7f9842d6f41051c35780eeb617d018eaa44..3de393c561683a53154896636deeae2dd5db07f0 100644
--- a/src/main/java/net/minecraft/world/inventory/DataSlot.java
+++ b/src/main/java/net/minecraft/world/inventory/DataSlot.java
@@ -10,7 +10,7 @@ public abstract class DataSlot {
          }
 
          public void set(int ix) {
-            containerData.set(i, i);
+            containerData.set(i, ix); // MagmaCube - decompile error
          }
       };
    }
@@ -22,7 +22,7 @@ public abstract class DataSlot {
          }
 
          public void set(int ix) {
-            ints[i] = i;
+            ints[i] = ix; // MagmaCube - decompile error
          }
       };
    }
diff --git a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
index 696f55bc66dd2f390f5e5f8dbb443af4f6978cb2..c20f54632ee3cc86dc6fc1c8ffc3b369b65327c3 100644
--- a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
@@ -12,7 +12,7 @@ public abstract class RecipeBookMenu<C extends Container> extends AbstractContai
    }
 
    public void handlePlacement(boolean flag, Recipe<?> recipe, ServerPlayer serverPlayer) {
-      (new ServerPlaceRecipe<>(this)).recipeClicked(serverPlayer, recipe, flag);
+      (new ServerPlaceRecipe<>(this)).recipeClicked(serverPlayer, (Recipe) recipe, flag); // MagmaCube - decompile error
    }
 
    public abstract void fillCraftSlotsStackedContents(StackedContents var1);
diff --git a/src/main/java/net/minecraft/world/item/HoneycombItem.java b/src/main/java/net/minecraft/world/item/HoneycombItem.java
index 9735c0223eb33a08b1a4dc0ddcae67894c9e0f3b..80eb5dfc9f673eb561e1f2a3bbd962eea9b17c03 100644
--- a/src/main/java/net/minecraft/world/item/HoneycombItem.java
+++ b/src/main/java/net/minecraft/world/item/HoneycombItem.java
@@ -17,7 +17,7 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class HoneycombItem extends Item {
-   public static final Supplier<BiMap<Block, Block>> WAXABLES = Suppliers.memoize(() -> ImmutableBiMap.builder().put(Blocks.COPPER_BLOCK, Blocks.WAXED_COPPER_BLOCK).put(Blocks.EXPOSED_COPPER, Blocks.WAXED_EXPOSED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.WAXED_WEATHERED_COPPER).put(Blocks.OXIDIZED_COPPER, Blocks.WAXED_OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.WAXED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WAXED_EXPOSED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.WAXED_WEATHERED_CUT_COPPER).put(Blocks.OXIDIZED_CUT_COPPER, Blocks.WAXED_OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB).put(Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS).put(Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS).build());
+   public static final Supplier<BiMap<Block, Block>> WAXABLES = Suppliers.memoize(() -> ImmutableBiMap.<Block, Block>builder().put(Blocks.COPPER_BLOCK, Blocks.WAXED_COPPER_BLOCK).put(Blocks.EXPOSED_COPPER, Blocks.WAXED_EXPOSED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.WAXED_WEATHERED_COPPER).put(Blocks.OXIDIZED_COPPER, Blocks.WAXED_OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.WAXED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WAXED_EXPOSED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.WAXED_WEATHERED_CUT_COPPER).put(Blocks.OXIDIZED_CUT_COPPER, Blocks.WAXED_OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB).put(Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS).put(Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS).build());
    public static final Supplier<BiMap<Block, Block>> WAX_OFF_BY_BLOCK = Suppliers.memoize(() -> ((BiMap)WAXABLES.get()).inverse());
 
    public HoneycombItem(Item.Properties properties) {
diff --git a/src/main/java/net/minecraft/world/item/Items.java b/src/main/java/net/minecraft/world/item/Items.java
index 62b26ddb7436350d0a14693ff7e109f603c98b7f..025cad27f541fdc794575c1cedc8d04d67c83328 100644
--- a/src/main/java/net/minecraft/world/item/Items.java
+++ b/src/main/java/net/minecraft/world/item/Items.java
@@ -1117,7 +1117,7 @@ public class Items {
    public static final Item POINTED_DRIPSTONE = registerBlock(Blocks.POINTED_DRIPSTONE, CreativeModeTab.TAB_DECORATIONS);
 
    private static <T> Optional<T> ifPart2(T object) {
-      return Optional.empty();
+      return net.minecraft.SharedConstants.CNC_PART_2_ITEMS_AND_BLOCKS ? Optional.ofNullable(object) : Optional.empty(); // MagmaCube - SharedConstants
    }
 
    private static Item registerBlock(Block block) {
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index 7f5c2cde1abd22945d699da0a533cd1a9adac748..2d5fed89eba686ec4fd6117bb7dee01a2e742780 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -71,7 +71,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
    }
 
    public <C extends Container, T extends Recipe<C>> List<T> getAllRecipesFor(RecipeType<T> recipeType) {
-      return this.byType(recipeType).values().stream().map((recipe) -> recipe).collect(Collectors.toList());
+      return this.byType(recipeType).values().stream().map((recipe) -> (T) recipe).collect(Collectors.toList());
    }
 
    public <C extends Container, T extends Recipe<C>> List<T> getRecipesFor(RecipeType<T> recipeType, C container, Level level) {
@@ -98,7 +98,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
    }
 
    public Optional<? extends Recipe<?>> byKey(ResourceLocation resourceLocation) {
-      return this.recipes.values().stream().map((map) -> (Recipe)map.get(resourceLocation)).filter(Objects::nonNull).findFirst();
+      return this.recipes.values().stream().map((map) -> map.get(resourceLocation)).filter(Objects::nonNull).findFirst(); // MagmaCube - decompile error
    }
 
    public Collection<Recipe<?>> getRecipes() {
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeSerializer.java b/src/main/java/net/minecraft/world/item/crafting/RecipeSerializer.java
index 32f4a63b476720dbb93c97857f08744cc5f386c8..beb3ca5093329d921e41e578d9706c737880e683 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeSerializer.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeSerializer.java
@@ -33,6 +33,7 @@ public interface RecipeSerializer<T extends Recipe<?>> {
    T fromNetwork(ResourceLocation var1, FriendlyByteBuf var2);
 
    void toNetwork(FriendlyByteBuf var1, T var2);
+   default void toNetwork(FriendlyByteBuf var1, Object var2) { toNetwork(var1, (T) var2); } // MagmaCube - workaround
 
    static <S extends RecipeSerializer<T>, T extends Recipe<?>> S register(String s, S recipeSerializer) {
       return Registry.register(Registry.RECIPE_SERIALIZER, s, recipeSerializer);
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeType.java b/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
index 252e0f5f695ae36b42e51fa9a8891510b2fab110..92defe451c70af91bcaa54599fcf79dda60f5a4e 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
@@ -24,6 +24,6 @@ public interface RecipeType<T extends Recipe<?>> {
    }
 
    default <C extends Container> Optional<T> tryMatch(Recipe<C> recipe, Level level, C container) {
-      return recipe.matches(container, level) ? Optional.of(recipe) : Optional.empty();
+      return recipe.matches(container, level) ? Optional.of((T) recipe) : Optional.empty(); // MagmaCube - decompile error
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/BlockGetter.java b/src/main/java/net/minecraft/world/level/BlockGetter.java
index e24656a6756410e7386bf7e4fe4a35435817a618..a5776ac9ff121d51e3113d98b172c31ad8fe356b 100644
--- a/src/main/java/net/minecraft/world/level/BlockGetter.java
+++ b/src/main/java/net/minecraft/world/level/BlockGetter.java
@@ -24,7 +24,7 @@ public interface BlockGetter extends LevelHeightAccessor {
 
    default <T extends BlockEntity> Optional<T> getBlockEntity(BlockPos blockPos, BlockEntityType<T> blockEntityType) {
       BlockEntity blockEntity = this.getBlockEntity(blockPos);
-      return blockEntity != null && blockEntity.getType() == blockEntityType ? Optional.of(blockEntity) : Optional.empty();
+      return blockEntity != null && blockEntity.getType() == blockEntityType ? Optional.of((T) blockEntity) : Optional.empty(); // MagmaCube - decompile error
    }
 
    BlockState getBlockState(BlockPos var1);
diff --git a/src/main/java/net/minecraft/world/level/EmptyTickList.java b/src/main/java/net/minecraft/world/level/EmptyTickList.java
index 27a8a666e5440cc4a1d485c82df87ea00330e8e1..7f1c0b039e50949424139598d28b263bae02ae88 100644
--- a/src/main/java/net/minecraft/world/level/EmptyTickList.java
+++ b/src/main/java/net/minecraft/world/level/EmptyTickList.java
@@ -6,7 +6,7 @@ public class EmptyTickList<T> implements TickList<T> {
    private static final EmptyTickList<Object> INSTANCE = new EmptyTickList<>();
 
    public static <T> EmptyTickList<T> empty() {
-      return INSTANCE;
+      return (EmptyTickList<T>) INSTANCE; // MagmaCube - decompile error
    }
 
    public boolean hasScheduledTick(BlockPos blockPos, T object) {
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 1259cf9dc80feb2f5d82af18cbfb9e1f2e775170..2c49b1994d7cd053a0ba85bd550f15dc2cde2649 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -259,11 +259,8 @@ public class Explosion {
             }
          }
 
-         ObjectListIterator var12 = objectArrayList.iterator();
-
-         while(var12.hasNext()) {
-            Pair<ItemStack, BlockPos> pair = var12.next();
-            Block.popResource(this.level, (BlockPos)pair.getSecond(), (ItemStack)pair.getFirst());
+         for (Pair<ItemStack, BlockPos> pair : objectArrayList) {
+            Block.popResource(this.level, (BlockPos) pair.getSecond(), (ItemStack) pair.getFirst());
          }
       }
 
diff --git a/src/main/java/net/minecraft/world/level/GameRules.java b/src/main/java/net/minecraft/world/level/GameRules.java
index e88dc2f9982375b085fb5ad30783c1f726a7f17e..b91349e33c6b8f5371f930af677ce3d955184f14 100644
--- a/src/main/java/net/minecraft/world/level/GameRules.java
+++ b/src/main/java/net/minecraft/world/level/GameRules.java
@@ -124,8 +124,8 @@ public class GameRules {
    }
 
    private static <T extends GameRules.Value<T>> void callVisitorCap(GameRules.GameRuleTypeVisitor gameRuleTypeVisitor, GameRules.Key<?> key, GameRules.Type<?> type) {
-      gameRuleTypeVisitor.visit(key, type);
-      type.callVisitor(gameRuleTypeVisitor, key);
+      gameRuleTypeVisitor.visit((Key) key, type); // MagmaCube - decompile error
+      type.callVisitor(gameRuleTypeVisitor, (Key) key); // MagmaCube - decompile error
    }
 
    public void assignFrom(GameRules gameRules, @Nullable MinecraftServer minecraftServer) {
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index 481a770c5d221a10af52c2549b6b9da77452a92b..4895887f3880be282aa9b7a9de4161574c7f7a5e 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -81,10 +81,11 @@ public final class NaturalSpawner {
          if (mobCategory != MobCategory.MISC) {
             BlockPos blockPos = entity.blockPosition();
             long l = ChunkPos.asLong(SectionPos.blockToSectionCoord(blockPos.getX()), SectionPos.blockToSectionCoord(blockPos.getZ()));
+            Entity finalEntity = entity; // MagmaCube - decompile error
             chunkGetter.query(l, (levelChunk) -> {
-               MobSpawnSettings.MobSpawnCost mobSpawnCost = getRoughBiome(blockPos, levelChunk).getMobSettings().getMobSpawnCost(entity.getType());
+               MobSpawnSettings.MobSpawnCost mobSpawnCost = getRoughBiome(blockPos, levelChunk).getMobSettings().getMobSpawnCost(finalEntity.getType()); // MagmaCube - decompile error
                if (mobSpawnCost != null) {
-                  potentialCalculator.addCharge(entity.blockPosition(), mobSpawnCost.getCharge());
+                  potentialCalculator.addCharge(finalEntity.blockPosition(), mobSpawnCost.getCharge()); // MagmaCube - decompile error
                }
 
                object2IntOpenHashMap.addTo(mobCategory, 1);
diff --git a/src/main/java/net/minecraft/world/level/TickNextTickData.java b/src/main/java/net/minecraft/world/level/TickNextTickData.java
index 6584c0435e6989d35f2dde94b69e2b70fc7f5317..c7334458a02fc6850706d99e3e85f313b5d02194 100644
--- a/src/main/java/net/minecraft/world/level/TickNextTickData.java
+++ b/src/main/java/net/minecraft/world/level/TickNextTickData.java
@@ -37,7 +37,8 @@ public class TickNextTickData<T> {
    }
 
    public static <T> Comparator<TickNextTickData<T>> createTimeComparator() {
-      return Comparator.comparingLong((tickNextTickData) -> tickNextTickData.triggerTick).thenComparing((tickNextTickData) -> tickNextTickData.priority).thenComparingLong((tickNextTickData) -> tickNextTickData.c);
+      // MagmaCube - decompile error
+      return Comparator.<TickNextTickData<T>>comparingLong((tickNextTickData) -> tickNextTickData.triggerTick).thenComparing((tickNextTickData) -> tickNextTickData.priority).thenComparingLong((tickNextTickData) -> tickNextTickData.c);
    }
 
    public String toString() {
diff --git a/src/main/java/net/minecraft/world/level/biome/Biome.java b/src/main/java/net/minecraft/world/level/biome/Biome.java
index 397d571b8f8a51986bc2c357d416412b26aa3446..ea61a8cf77cfd0c4699d5480941b155b79a0b1cc 100644
--- a/src/main/java/net/minecraft/world/level/biome/Biome.java
+++ b/src/main/java/net/minecraft/world/level/biome/Biome.java
@@ -53,8 +53,8 @@ import org.apache.logging.log4j.Logger;
 
 public final class Biome {
    public static final Logger LOGGER = LogManager.getLogger();
-   public static final Codec<Biome> DIRECT_CODEC;
-   public static final Codec<Biome> NETWORK_CODEC;
+   public static final Codec<Biome> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), Codec.FLOAT.fieldOf("depth").forGetter((biome) -> biome.depth), Codec.FLOAT.fieldOf("scale").forGetter((biome) -> biome.scale), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects), BiomeGenerationSettings.CODEC.forGetter((biome) -> biome.generationSettings), MobSpawnSettings.CODEC.forGetter((biome) -> biome.mobSettings)).apply(instance, Biome::new));
+   public static final Codec<Biome> NETWORK_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), Codec.FLOAT.fieldOf("depth").forGetter((biome) -> biome.depth), Codec.FLOAT.fieldOf("scale").forGetter((biome) -> biome.scale), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects)).apply(instance, (climateSettings, biomeCategory, f, f2, biomeSpecialEffects) -> new Biome(climateSettings, biomeCategory, f, f2, biomeSpecialEffects, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY)));
    public static final Codec<Supplier<Biome>> CODEC = RegistryFileCodec.create(Registry.BIOME_REGISTRY, DIRECT_CODEC);
    public static final Codec<List<Supplier<Biome>>> LIST_CODEC = RegistryFileCodec.homogeneousList(Registry.BIOME_REGISTRY, DIRECT_CODEC);
    private final Map<Integer, List<StructureFeature<?>>> structuresByStep = (Map)Registry.STRUCTURE_FEATURE.stream().collect(Collectors.groupingBy((structureFeature) -> structureFeature.step().ordinal()));
@@ -324,11 +324,6 @@ public final class Biome {
       return resourceLocation == null ? super.toString() : resourceLocation.toString();
    }
 
-   static {
-      DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), Codec.FLOAT.fieldOf("depth").forGetter((biome) -> biome.depth), Codec.FLOAT.fieldOf("scale").forGetter((biome) -> biome.scale), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects), BiomeGenerationSettings.CODEC.forGetter((biome) -> biome.generationSettings), MobSpawnSettings.CODEC.forGetter((biome) -> biome.mobSettings)).apply(instance, Biome::new));
-      NETWORK_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), Codec.FLOAT.fieldOf("depth").forGetter((biome) -> biome.depth), Codec.FLOAT.fieldOf("scale").forGetter((biome) -> biome.scale), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects)).apply(instance, (climateSettings, biomeCategory, f, f2, biomeSpecialEffects) -> new Biome(climateSettings, biomeCategory, f, f2, biomeSpecialEffects, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY)));
-   }
-
    public static class BiomeBuilder {
       @Nullable
       public Biome.Precipitation precipitation;
diff --git a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
index 07d46d4330a11071f6d5d01d1a1bb24fbec10be9..31e78ac5d4944ba86aefa1ba844f4ac9372522e3 100644
--- a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
@@ -26,7 +26,7 @@ import net.minecraft.world.level.levelgen.synth.NormalNoise;
 
 public class MultiNoiseBiomeSource extends BiomeSource {
    private static final MultiNoiseBiomeSource.NoiseParameters DEFAULT_NOISE_PARAMETERS = new MultiNoiseBiomeSource.NoiseParameters(-7, (List<Double>)ImmutableList.of(1.0D, 1.0D));
-   public static final MapCodec<MultiNoiseBiomeSource> DIRECT_CODEC;
+   public static final MapCodec<MultiNoiseBiomeSource> DIRECT_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.LONG.fieldOf("seed").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.seed), RecordCodecBuilder.<Pair<Biome.ClimateParameters, Supplier<Biome>>>create((instancex) -> instancex.group(Biome.ClimateParameters.CODEC.fieldOf("parameters").forGetter(Pair<Biome.ClimateParameters, Supplier<Biome>>::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair<Biome.ClimateParameters, Supplier<Biome>>::getSecond)).apply(instancex, Pair::of)).listOf().fieldOf("biomes").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.parameters), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("temperature_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.temperatureParams), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("humidity_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.humidityParams), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("altitude_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.altitudeParams), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("weirdness_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.weirdnessParams)).apply(instance, MultiNoiseBiomeSource::new));
    public static final Codec<MultiNoiseBiomeSource> CODEC = Codec.mapEither(MultiNoiseBiomeSource.PresetInstance.CODEC, DIRECT_CODEC).xmap((either) -> (MultiNoiseBiomeSource)either.map(MultiNoiseBiomeSource.PresetInstance::biomeSource, Function.identity()), (multiNoiseBiomeSource) -> (Either)multiNoiseBiomeSource.preset().map(Either::left).orElseGet(() -> Either.right(multiNoiseBiomeSource))).codec();
    private final MultiNoiseBiomeSource.NoiseParameters temperatureParams;
    private final MultiNoiseBiomeSource.NoiseParameters humidityParams;
@@ -104,10 +104,6 @@ public class MultiNoiseBiomeSource extends BiomeSource {
       return this.seed == l && this.preset.isPresent() && Objects.equals((this.preset.get()).getSecond(), MultiNoiseBiomeSource.Preset.NETHER);
    }
 
-   static {
-      DIRECT_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.LONG.fieldOf("seed").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.seed), RecordCodecBuilder.create((instancex) -> instancex.group(Biome.ClimateParameters.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair::getSecond)).apply(instancex, Pair::of)).listOf().fieldOf("biomes").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.parameters), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("temperature_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.temperatureParams), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("humidity_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.humidityParams), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("altitude_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.altitudeParams), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("weirdness_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.weirdnessParams)).apply(instance, MultiNoiseBiomeSource::new));
-   }
-
    static class NoiseParameters {
       private final int firstOctave;
       private final DoubleList amplitudes;
diff --git a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
index 6514c0879f800bfee2f8d2920b89ce3cf63f7595..e10a3de8318c01ae31ed67750505a483d5c24c0d 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
@@ -33,6 +33,6 @@ public abstract class BaseEntityBlock extends Block implements EntityBlock {
 
    @Nullable
    protected static <E extends BlockEntity, A extends BlockEntity> BlockEntityTicker<A> createTickerHelper(BlockEntityType<A> blockEntityType, BlockEntityType<E> blockEntityType2, BlockEntityTicker<? super E> blockEntityTicker) {
-      return blockEntityType2 == blockEntityType ? blockEntityTicker : null;
+      return blockEntityType2 == blockEntityType ? (BlockEntityTicker<A>) blockEntityTicker : null; // MagmaCube - decompile error
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
index 4e2a8a1fa2350e95bf84adf8c63e71449661cd70..5e0059acc7444dd55d6821ffd5ce012830bb28b4 100644
--- a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
@@ -55,7 +55,7 @@ public class IronBarsBlock extends CrossCollisionBlock {
             return true;
          }
 
-         if (blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction)) && blockState2.getValue((Property)PROPERTY_BY_DIRECTION.get(direction.getOpposite()))) {
+         if (blockState.getValue(PROPERTY_BY_DIRECTION.get(direction)) && blockState2.getValue(PROPERTY_BY_DIRECTION.get(direction.getOpposite()))) { // MagmaCube - decompile error
             return true;
          }
       }
diff --git a/src/main/java/net/minecraft/world/level/block/PipeBlock.java b/src/main/java/net/minecraft/world/level/block/PipeBlock.java
index 959f3e8517a1309b7155005c3c0219b0471c486f..37e3284a0d99b5c5127458c39cac1dc1f1e56f6d 100644
--- a/src/main/java/net/minecraft/world/level/block/PipeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PipeBlock.java
@@ -79,7 +79,7 @@ public class PipeBlock extends Block {
       int i = 0;
 
       for(int i2 = 0; i2 < DIRECTIONS.length; ++i2) {
-         if (blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(DIRECTIONS[i2]))) {
+         if (blockState.getValue(PROPERTY_BY_DIRECTION.get(DIRECTIONS[i2]))) { // MagmaCube - decompile error
             i |= 1 << i2;
          }
       }
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index 41be77db50cfad835648b1fc3cc9461ddab6a85b..914a7d7ccfe7841be7246d32d635458a124c4315 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -85,7 +85,7 @@ public class RedStoneWireBlock extends Block {
       VoxelShape voxelShape = SHAPE_DOT;
 
       for(Direction direction : Direction.Plane.HORIZONTAL) {
-         RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+         RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction)); // MagmaCube - decompile error
          if (redstoneSide == RedstoneSide.SIDE) {
             voxelShape = Shapes.or(voxelShape, (VoxelShape)SHAPES_FLOOR.get(direction));
          } else if (redstoneSide == RedstoneSide.UP) {
@@ -172,7 +172,7 @@ public class RedStoneWireBlock extends Block {
       BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
 
       for(Direction direction : Direction.Plane.HORIZONTAL) {
-         RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+         RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction)); // MagmaCube - decompile error
          if (redstoneSide != RedstoneSide.NONE && !levelAccessor.getBlockState(mutableBlockPos.setWithOffset(blockPos, direction)).is(this)) {
             mutableBlockPos.move(Direction.DOWN);
             BlockState blockState2 = levelAccessor.getBlockState(mutableBlockPos);
@@ -396,7 +396,7 @@ public class RedStoneWireBlock extends Block {
       int i = blockState.getValue(POWER);
       if (i != 0) {
          for(Direction direction : Direction.Plane.HORIZONTAL) {
-            RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+            RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction)); // MagmaCube - decompile error
             switch(redstoneSide) {
             case UP:
                this.spawnParticlesAlongLine(level, random, blockPos, COLORS[i], direction, Direction.UP, -0.5F, 0.5F);
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
index aa6d136b9019a11109109ded3e06896eb2201143..dc4fe411692c6cb0b2f9050b646c870cfbdd2704 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
@@ -8,7 +8,7 @@ import java.util.function.Supplier;
 import net.minecraft.world.level.block.state.BlockState;
 
 public interface WeatheringCopper extends ChangeOverTimeBlock<WeatheringCopper.WeatherState> {
-   Supplier<BiMap<Block, Block>> NEXT_BY_BLOCK = Suppliers.memoize(() -> ImmutableBiMap.builder().put(Blocks.COPPER_BLOCK, Blocks.EXPOSED_COPPER).put(Blocks.EXPOSED_COPPER, Blocks.WEATHERED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.EXPOSED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WEATHERED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.OXIDIZED_CUT_COPPER_STAIRS).build());
+   Supplier<BiMap<Block, Block>> NEXT_BY_BLOCK = Suppliers.memoize(() -> ImmutableBiMap.<Block, Block>builder().put(Blocks.COPPER_BLOCK, Blocks.EXPOSED_COPPER).put(Blocks.EXPOSED_COPPER, Blocks.WEATHERED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.EXPOSED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WEATHERED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.OXIDIZED_CUT_COPPER_STAIRS).build());
    Supplier<BiMap<Block, Block>> PREVIOUS_BY_BLOCK = Suppliers.memoize(() -> ((BiMap)NEXT_BY_BLOCK.get()).inverse());
 
    static Optional<Block> getPrevious(Block block) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
index d27705d6856cbbba4199063689cc4d09955c59c1..cf440773d6bee76f928579bcfca9029b0ecf7598 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
@@ -267,12 +267,12 @@ public class StructureBlockEntity extends BlockEntity {
          BlockPos blockPos3 = new BlockPos(blockPos.getX() + 80, this.level.getMaxBuildHeight() - 1, blockPos.getZ() + 80);
          Stream<BlockPos> stream = this.getRelatedCorners(blockPos2, blockPos3);
          return calculateEnclosingBoundingBox(blockPos, stream).filter((boundingBox) -> {
-            int i = boundingBox.maxX() - boundingBox.minX();
+            int ix = boundingBox.maxX() - boundingBox.minX(); // MagmaCube - decompile error
             int i2 = boundingBox.maxY() - boundingBox.minY();
             int i3 = boundingBox.maxZ() - boundingBox.minZ();
-            if (i > 1 && i2 > 1 && i3 > 1) {
+            if (ix > 1 && i2 > 1 && i3 > 1) { // MagmaCube - decompile error
                this.structurePos = new BlockPos(boundingBox.minX() - blockPos.getX() + 1, boundingBox.minY() - blockPos.getY() + 1, boundingBox.minZ() - blockPos.getZ() + 1);
-               this.structureSize = new Vec3i(i - 1, i2 - 1, i3 - 1);
+               this.structureSize = new Vec3i(ix - 1, i2 - 1, i3 - 1); // MagmaCube - decompile error
                this.setChanged();
                BlockState blockState = this.level.getBlockState(blockPos);
                this.level.sendBlockUpdated(blockPos, blockState, blockState, 3);
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
index 6cbb76927e1c387e713f75e2853cc92039ea5ecd..9233a0b048747dc9995fc4d815857fb2d0535b9c 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
@@ -34,7 +34,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
    protected StateDefinition(Function<O, S> function, O object, StateDefinition.Factory<O, S> factory, Map<String, Property<?>> map) {
       this.owner = object;
       this.propertiesByName = ImmutableSortedMap.copyOf(map);
-      Supplier<S> supplier = () -> (StateHolder)function.apply(object);
+      Supplier<S> supplier = () -> function.apply(object); // MagmaCube - decompile error
       MapCodec<S> mapCodec = MapCodec.of(Encoder.empty(), Decoder.unit(supplier));
 
       Entry<String, Property<?>> entry;
@@ -47,13 +47,16 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
       List<S> list = Lists.newArrayList();
       Stream<List<Pair<Property<?>, Comparable<?>>>> stream = Stream.of(Collections.emptyList());
 
-      Property<?> property;
-      for(UnmodifiableIterator var11 = this.propertiesByName.values().iterator(); var11.hasNext(); stream = stream.flatMap((listx) -> property.getPossibleValues().stream().map((comparable) -> {
-            List<Pair<Property<?>, Comparable<?>>> list2 = Lists.newArrayList(listx);
-            list2.add(Pair.of(property, comparable));
-            return list2;
-         }))) {
-         property = (Property)var11.next();
+      // MagmaCube start - decompile error
+      for(Property<?> property : this.propertiesByName.values()) {
+         stream = stream.flatMap((p_200999_1_) -> {
+            return property.getPossibleValues().stream().map((p_200998_2_) -> {
+               List<Pair<Property<?>, Comparable<?>>> list1 = Lists.newArrayList(p_200999_1_);
+               list1.add(Pair.of(property, p_200998_2_));
+               return list1;
+            });
+         });
+         // MagmaCube end - decompile error
       }
 
       stream.forEach((list2) -> {
@@ -71,7 +74,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
    }
 
    private static <S extends StateHolder<?, S>, T extends Comparable<T>> MapCodec<S> appendPropertyCodec(MapCodec<S> mapCodec, Supplier<S> supplier, String s, Property<T> property) {
-      return Codec.mapPair(mapCodec, property.valueCodec().fieldOf(s).setPartial(() -> property.value((StateHolder)supplier.get()))).xmap((pair) -> (StateHolder)((StateHolder)pair.getFirst()).setValue(property, ((Property.Value)pair.getSecond()).value()), (stateHolder) -> Pair.of(stateHolder, property.value(stateHolder)));
+      return Codec.mapPair(mapCodec, property.valueCodec().fieldOf(s).setPartial(() -> property.value((StateHolder)supplier.get()))).xmap((pair) -> (pair.getFirst()).setValue(property, (pair.getSecond()).value()), (stateHolder) -> Pair.of(stateHolder, property.value(stateHolder))); // MagmaCube - decompile error
    }
 
    public ImmutableList<S> getPossibleStates() {
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
index dd7aabdc7f73c4a420832b2554f8a380931e5331..a5acc031a2f1961d5166aa87a81a8a33638a9b1a 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
@@ -98,7 +98,7 @@ public abstract class StateHolder<O, S> {
 
    public <T extends Comparable<T>> Optional<T> getOptionalValue(Property<T> property) {
       Comparable<?> comparable = (Comparable)this.values.get(property);
-      return comparable == null ? Optional.empty() : Optional.of((Comparable)property.getValueClass().cast(comparable));
+      return comparable == null ? Optional.empty() : Optional.of(property.getValueClass().cast(comparable));
    }
 
    public <T extends Comparable<T>, V extends T> S setValue(Property<T> property, V comparable) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
index df9c275f131a664bc9b713416385e33471d6f6f3..562e3770fb42432cba35b3b0d4d4645502e8e20e 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
@@ -36,7 +36,7 @@ public class EnumProperty<T extends Enum<T> & StringRepresentable> extends Prope
    }
 
    public Optional<T> getValue(String s) {
-      return Optional.ofNullable((Enum)this.names.get(s));
+      return Optional.ofNullable(this.names.get(s));
    }
 
    public String getName(T enum_) {
@@ -65,7 +65,7 @@ public class EnumProperty<T extends Enum<T> & StringRepresentable> extends Prope
    }
 
    public static <T extends Enum<T> & StringRepresentable> EnumProperty<T> create(String s, Class<T> clazz, Predicate<T> predicate) {
-      return create(s, clazz, Arrays.stream((Enum[])clazz.getEnumConstants()).filter(predicate).collect(Collectors.toList()));
+      return create(s, clazz, Arrays.stream(clazz.getEnumConstants()).filter(predicate).collect(Collectors.toList()));
    }
 
    public static <T extends Enum<T> & StringRepresentable> EnumProperty<T> create(String s, Class<T> clazz, T... enums) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 9337766db1c124dc15c922619830200c74219b1e..cabee835848bb73209d5118e83da519e65973d13 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -689,7 +689,7 @@ public class LevelChunk implements ChunkAccess {
 
    public void unpackTicks() {
       if (this.blockTicks instanceof ProtoTickList) {
-         ((ProtoTickList)this.blockTicks).copyOut(this.level.getBlockTicks(), (blockPos) -> this.getBlockState(blockPos).getBlock());
+         ((ProtoTickList<Block>)this.blockTicks).copyOut(this.level.getBlockTicks(), (blockPos) -> this.getBlockState(blockPos).getBlock()); // MagmaCube - decompile error
          this.blockTicks = EmptyTickList.empty();
       } else if (this.blockTicks instanceof ChunkTickList) {
          ((ChunkTickList)this.blockTicks).copyOut(this.level.getBlockTicks());
@@ -697,7 +697,7 @@ public class LevelChunk implements ChunkAccess {
       }
 
       if (this.liquidTicks instanceof ProtoTickList) {
-         ((ProtoTickList)this.liquidTicks).copyOut(this.level.getLiquidTicks(), (blockPos) -> this.getFluidState(blockPos).getType());
+         ((ProtoTickList<Fluid>)this.liquidTicks).copyOut(this.level.getLiquidTicks(), (blockPos) -> this.getFluidState(blockPos).getType()); // MagmaCube - decompile error
          this.liquidTicks = EmptyTickList.empty();
       } else if (this.liquidTicks instanceof ChunkTickList) {
          ((ChunkTickList)this.liquidTicks).copyOut(this.level.getLiquidTicks());
@@ -707,12 +707,12 @@ public class LevelChunk implements ChunkAccess {
    }
 
    public void packTicks(ServerLevel serverLevel) {
-      if (this.blockTicks == EmptyTickList.empty()) {
+      if (this.blockTicks.equals(EmptyTickList.empty())) { // MagmaCube - decompile error
          this.blockTicks = new ChunkTickList<>(Registry.BLOCK::getKey, serverLevel.getBlockTicks().fetchTicksInChunk(this.chunkPos, true, false), serverLevel.getGameTime());
          this.setUnsaved(true);
       }
 
-      if (this.liquidTicks == EmptyTickList.empty()) {
+      if (this.liquidTicks.equals(EmptyTickList.empty())) { // MagmaCube - decompile error
          this.liquidTicks = new ChunkTickList<>(Registry.FLUID::getKey, serverLevel.getLiquidTicks().fetchTicksInChunk(this.chunkPos, true, false), serverLevel.getGameTime());
          this.setUnsaved(true);
       }
@@ -775,7 +775,7 @@ public class LevelChunk implements ChunkAccess {
 
    private <T extends BlockEntity> void updateBlockEntityTicker(T blockEntity) {
       BlockState blockState = blockEntity.getBlockState();
-      BlockEntityTicker<T> blockEntityTicker = blockState.getTicker(this.level, blockEntity.getType());
+      BlockEntityTicker<T> blockEntityTicker = (BlockEntityTicker<T>) blockState.getTicker(this.level, blockEntity.getType()); // MagmaCube - decompile error
       if (blockEntityTicker == null) {
          this.removeBlockEntityTicker(blockEntity.getBlockPos());
       } else {
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
index 3c5154635f7b7d004372d2d7f0d759ccb80bc5e9..9d5ef98e1c675beedabcaa7c6f1210d833f4049c 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -36,7 +36,7 @@ public class PalettedContainer<T> implements PaletteResize<T> {
    public void acquire() {
       if (this.traces != null) {
          Thread thread = Thread.currentThread();
-         this.traces.push((T)Pair.of(thread, thread.getStackTrace()));
+         this.traces.push(Pair.of(thread, thread.getStackTrace())); // MagmaCube - decompile error
       }
 
       ThreadingDetector.checkAndLock(this.lock, this.traces, "PalettedContainer");
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index bb316dcfdae7a6bccce0324c89895231f589f92b..38231380a04a3e8f78e2abfedac77b968150dd9d 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -237,7 +237,7 @@ public class ChunkSerializer {
 
       for(int i = levelLightEngine.getMinLightSection(); i < levelLightEngine.getMaxLightSection(); ++i) {
          int i2 = i;
-         LevelChunkSection levelChunkSection = (LevelChunkSection)Arrays.stream(levelChunkSections).filter((levelChunkSection) -> levelChunkSection != null && SectionPos.blockToSectionCoord(levelChunkSection.bottomBlockY()) == i2).findFirst().orElse(LevelChunk.EMPTY_SECTION);
+         LevelChunkSection levelChunkSection = (LevelChunkSection)Arrays.stream(levelChunkSections).filter((levelChunkSectionx) -> levelChunkSectionx != null && SectionPos.blockToSectionCoord(levelChunkSectionx.bottomBlockY()) == i2).findFirst().orElse(LevelChunk.EMPTY_SECTION); // MagmaCube - decompile error
          DataLayer dataLayer = levelLightEngine.getLayerListener(LightLayer.BLOCK).getDataLayerData(SectionPos.of(chunkPos, i2));
          DataLayer dataLayer2 = levelLightEngine.getLayerListener(LightLayer.SKY).getDataLayerData(SectionPos.of(chunkPos, i2));
          if (levelChunkSection != LevelChunk.EMPTY_SECTION || dataLayer != null || dataLayer2 != null) {
diff --git a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
index f05b4097d6a9a3e835f52a665ca0da1e0a4536fb..1f85f1473516fcda9849d4d6970f8ba2f97c400a 100644
--- a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
+++ b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
@@ -42,7 +42,8 @@ public class DimensionType {
    public static final ResourceLocation OVERWORLD_EFFECTS = new ResourceLocation("overworld");
    public static final ResourceLocation NETHER_EFFECTS = new ResourceLocation("the_nether");
    public static final ResourceLocation END_EFFECTS = new ResourceLocation("the_end");
-   public static final Codec<DimensionType> DIRECT_CODEC;
+   // MagmaCube - decompile error
+   public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.<DimensionType>create((instance) -> instance.group(Codec.LONG.optionalFieldOf("fixed_time").xmap((optional) -> (OptionalLong)optional.map(OptionalLong::of).orElseGet(OptionalLong::empty), (optionalLong) -> optionalLong.isPresent() ? Optional.of(optionalLong.getAsLong()) : Optional.empty()).forGetter((dimensionType) -> dimensionType.fixedTime), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange((double)1.0E-5F, 3.0E7D).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange(MIN_Y, MAX_Y).fieldOf("min_y").forGetter(DimensionType::minY), Codec.intRange(16, Y_SIZE).fieldOf("height").forGetter(DimensionType::height), Codec.intRange(0, Y_SIZE).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter((dimensionType) -> dimensionType.infiniburn), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter((dimensionType) -> dimensionType.effectsLocation), Codec.FLOAT.fieldOf("ambient_light").forGetter((dimensionType) -> dimensionType.ambientLight)).apply(instance, DimensionType::new)).comapFlatMap(DimensionType::guardY, Function.identity());
    private static final int MOON_PHASES = 8;
    public static final float[] MOON_BRIGHTNESS_PER_PHASE = new float[]{1.0F, 0.75F, 0.5F, 0.25F, 0.0F, 0.25F, 0.5F, 0.75F};
    public static final ResourceKey<DimensionType> OVERWORLD_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld"));
@@ -291,8 +292,4 @@ public class DimensionType {
          return this.hasSkylight == dimensionType.hasSkylight && this.hasCeiling == dimensionType.hasCeiling && this.ultraWarm == dimensionType.ultraWarm && this.natural == dimensionType.natural && this.coordinateScale == dimensionType.coordinateScale && this.createDragonFight == dimensionType.createDragonFight && this.piglinSafe == dimensionType.piglinSafe && this.bedWorks == dimensionType.bedWorks && this.respawnAnchorWorks == dimensionType.respawnAnchorWorks && this.hasRaids == dimensionType.hasRaids && this.minY == dimensionType.minY && this.height == dimensionType.height && this.logicalHeight == dimensionType.logicalHeight && Float.compare(dimensionType.ambientLight, this.ambientLight) == 0 && this.fixedTime.equals(dimensionType.fixedTime) && this.biomeZoomer.equals(dimensionType.biomeZoomer) && this.infiniburn.equals(dimensionType.infiniburn) && this.effectsLocation.equals(dimensionType.effectsLocation);
       }
    }
-
-   static {
-      DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.LONG.optionalFieldOf("fixed_time").xmap((optional) -> (OptionalLong)optional.map(OptionalLong::of).orElseGet(OptionalLong::empty), (optionalLong) -> optionalLong.isPresent() ? Optional.of(optionalLong.getAsLong()) : Optional.empty()).forGetter((dimensionType) -> dimensionType.fixedTime), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange((double)1.0E-5F, 3.0E7D).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange(MIN_Y, MAX_Y).fieldOf("min_y").forGetter(DimensionType::minY), Codec.intRange(16, Y_SIZE).fieldOf("height").forGetter(DimensionType::height), Codec.intRange(0, Y_SIZE).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter((dimensionType) -> dimensionType.infiniburn), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter((dimensionType) -> dimensionType.effectsLocation), Codec.FLOAT.fieldOf("ambient_light").forGetter((dimensionType) -> dimensionType.ambientLight)).apply(instance, DimensionType::new)).comapFlatMap(DimensionType::guardY, Function.identity());
-   }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
index 5b6508696efbdf2300a18425c1a30b71d1c9bcf1..460492de95570f56072b734f180acd5eabd37750 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
@@ -105,7 +105,7 @@ public class EntitySectionStorage<T extends EntityAccess> {
 
    public LongSet getAllChunksWithExistingSections() {
       LongSet longSet = new LongOpenHashSet();
-      this.sections.keySet().forEach((l) -> longSet.add(getChunkKeyFromSectionKey(l)));
+      this.sections.keySet().forEach((java.util.function.LongConsumer) (l) -> longSet.add(getChunkKeyFromSectionKey(l))); // MagmaCube - decompile error
       return longSet;
    }
 
diff --git a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
index 4c291e72c18e478288e4e6dd7dd740da96b9cc61..2e578db9384d3d4b87b65abf98b93c92cc222858 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
@@ -25,9 +25,9 @@ public class EntityTickList {
             this.passive.put(entry.getIntKey(), (Entity)entry.getValue());
          }
 
-         Int2ObjectMap<Entity> int2ObjectMap = this.active;
+         Int2ObjectMap<Entity> int2ObjectMapx = this.active; // MagmaCube - decompile error
          this.active = this.passive;
-         this.passive = int2ObjectMap;
+         this.passive = int2ObjectMapx; // MagmaCube - decompile error
       }
 
    }
diff --git a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
index 9852e5c3004a3681c4d4afee0f8dc3414564da47..d8a1cca1c3e72e34b4175124daf2fe8e6d68ab06 100644
--- a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -223,7 +223,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
    }
 
    private void processUnloads() {
-      this.chunksToUnload.removeIf((l) -> this.chunkVisibility.get(l) != Visibility.HIDDEN ? true : this.processChunkUnload(l));
+      this.chunksToUnload.removeIf((java.util.function.LongPredicate) (l) -> this.chunkVisibility.get(l) != Visibility.HIDDEN ? true : this.processChunkUnload(l)); // MagmaCube - decompile error
    }
 
    private void processPendingLoads() {
@@ -255,7 +255,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
    }
 
    public void autoSave() {
-      this.getAllChunksToSave().forEach((l) -> {
+      this.getAllChunksToSave().forEach((java.util.function.Consumer<? super Long>) (l) -> { // MagmaCube - decompile error
          boolean flag = this.chunkVisibility.get(l) == Visibility.HIDDEN;
          if (flag) {
             this.processChunkUnload(l);
@@ -273,7 +273,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
       while(!longSet.isEmpty()) {
          this.permanentStorage.flush(false);
          this.processPendingLoads();
-         longSet.removeIf((l) -> {
+         longSet.removeIf((java.util.function.LongPredicate) (l) -> { // MagmaCube - decompile error
             boolean flag = this.chunkVisibility.get(l) == Visibility.HIDDEN;
             return flag ? this.processChunkUnload(l) : this.storeChunkSections(l, (entityAccess) -> {
             });
@@ -310,7 +310,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
 
    public void dumpSections(Writer writer) throws IOException {
       CsvOutput csvOutput = CsvOutput.builder().addColumn("x").addColumn("y").addColumn("z").addColumn("visibility").addColumn("load_status").addColumn("entity_count").build(writer);
-      this.sectionStorage.getAllChunksWithExistingSections().forEach((l) -> {
+      this.sectionStorage.getAllChunksWithExistingSections().forEach((java.util.function.Consumer<? super Long>) (l) -> { // MagmaCube - decompile error
          PersistentEntitySectionManager.ChunkLoadStatus chunkLoadStatus = (PersistentEntitySectionManager.ChunkLoadStatus)this.chunkLoadStatuses.get(l);
          this.sectionStorage.getExistingSectionPositionsInChunk(l).forEach((lx) -> {
             EntitySection<T> entitySection = this.sectionStorage.getSection(lx);
diff --git a/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java b/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
index ee1ceef5b25b5938b8dd7ece90ee4e72189106fa..abf7fd0b94bc9e95778edacd75494365ea83caed 100644
--- a/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
+++ b/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
@@ -26,6 +26,6 @@ public interface PositionSourceType<T extends PositionSource> {
 
    static <T extends PositionSource> void toNetwork(T positionSource, FriendlyByteBuf friendlyByteBuf) {
       friendlyByteBuf.writeResourceLocation(Registry.POSITION_SOURCE_TYPE.getKey(positionSource.getType()));
-      positionSource.getType().write(friendlyByteBuf, positionSource);
+      ((PositionSourceType) positionSource.getType()).write(friendlyByteBuf, positionSource); // MagmaCube - decompile error
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
index 45aa2ae35d079446b332433f6f9afb4d66a4bf08..69213cf6197ffd94981e436517973357c14ecabf 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -301,8 +301,8 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
 
             ChunkAccess var16;
             try {
-               for(int i5 = i5; i5 >= i6; --i5) {
-                  LevelChunkSection levelChunkSection = chunkAccess.getOrCreateSection(i5);
+               for(int i5In = i5; i5In >= i6; --i5In) {
+                  LevelChunkSection levelChunkSection = chunkAccess.getOrCreateSection(i5In);
                   levelChunkSection.acquire();
                   set.add(levelChunkSection);
                }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
index 543fa4d56a3d738dcc16daa941415b41267a96c8..a9b68302ddb09e7530510546f4b855933ab61f90 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
@@ -18,7 +18,8 @@ import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.feature.configurations.StructureFeatureConfiguration;
 
 public final class NoiseGeneratorSettings {
-   public static final Codec<NoiseGeneratorSettings> DIRECT_CODEC;
+   // MagmaCube - decompile error
+   public static final Codec<NoiseGeneratorSettings> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(StructureSettings.CODEC.fieldOf("structures").forGetter(NoiseGeneratorSettings::structureSettings), NoiseSettings.CODEC.fieldOf("noise").forGetter(NoiseGeneratorSettings::noiseSettings), BlockState.CODEC.fieldOf("default_block").forGetter(NoiseGeneratorSettings::getDefaultBlock), BlockState.CODEC.fieldOf("default_fluid").forGetter(NoiseGeneratorSettings::getDefaultFluid), Codec.INT.fieldOf("bedrock_roof_position").forGetter(NoiseGeneratorSettings::getBedrockRoofPosition), Codec.INT.fieldOf("bedrock_floor_position").forGetter(NoiseGeneratorSettings::getBedrockFloorPosition), Codec.INT.fieldOf("sea_level").forGetter(NoiseGeneratorSettings::seaLevel), Codec.INT.fieldOf("min_surface_level").forGetter(NoiseGeneratorSettings::getMinSurfaceLevel), Codec.BOOL.fieldOf("disable_mob_generation").forGetter(NoiseGeneratorSettings::disableMobGeneration), Codec.BOOL.fieldOf("aquifers_enabled").forGetter(NoiseGeneratorSettings::isAquifersEnabled), Codec.BOOL.fieldOf("noise_caves_enabled").forGetter(NoiseGeneratorSettings::isNoiseCavesEnabled), Codec.BOOL.fieldOf("deepslate_enabled").forGetter(NoiseGeneratorSettings::isDeepslateEnabled), Codec.BOOL.fieldOf("ore_veins_enabled").forGetter(NoiseGeneratorSettings::isOreVeinsEnabled), Codec.BOOL.fieldOf("noodle_caves_enabled").forGetter(NoiseGeneratorSettings::isOreVeinsEnabled)).apply(instance, NoiseGeneratorSettings::new));
    public static final Codec<Supplier<NoiseGeneratorSettings>> CODEC = RegistryFileCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, DIRECT_CODEC);
    private final StructureSettings structureSettings;
    private final NoiseSettings noiseSettings;
@@ -145,7 +146,6 @@ public final class NoiseGeneratorSettings {
    }
 
    static {
-      DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(StructureSettings.CODEC.fieldOf("structures").forGetter(NoiseGeneratorSettings::structureSettings), NoiseSettings.CODEC.fieldOf("noise").forGetter(NoiseGeneratorSettings::noiseSettings), BlockState.CODEC.fieldOf("default_block").forGetter(NoiseGeneratorSettings::getDefaultBlock), BlockState.CODEC.fieldOf("default_fluid").forGetter(NoiseGeneratorSettings::getDefaultFluid), Codec.INT.fieldOf("bedrock_roof_position").forGetter(NoiseGeneratorSettings::getBedrockRoofPosition), Codec.INT.fieldOf("bedrock_floor_position").forGetter(NoiseGeneratorSettings::getBedrockFloorPosition), Codec.INT.fieldOf("sea_level").forGetter(NoiseGeneratorSettings::seaLevel), Codec.INT.fieldOf("min_surface_level").forGetter(NoiseGeneratorSettings::getMinSurfaceLevel), Codec.BOOL.fieldOf("disable_mob_generation").forGetter(NoiseGeneratorSettings::disableMobGeneration), Codec.BOOL.fieldOf("aquifers_enabled").forGetter(NoiseGeneratorSettings::isAquifersEnabled), Codec.BOOL.fieldOf("noise_caves_enabled").forGetter(NoiseGeneratorSettings::isNoiseCavesEnabled), Codec.BOOL.fieldOf("deepslate_enabled").forGetter(NoiseGeneratorSettings::isDeepslateEnabled), Codec.BOOL.fieldOf("ore_veins_enabled").forGetter(NoiseGeneratorSettings::isOreVeinsEnabled), Codec.BOOL.fieldOf("noodle_caves_enabled").forGetter(NoiseGeneratorSettings::isOreVeinsEnabled)).apply(instance, NoiseGeneratorSettings::new));
       register(AMPLIFIED, overworld(new StructureSettings(true), true));
       register(NETHER, netherLikePreset(new StructureSettings(false), Blocks.NETHERRACK.defaultBlockState(), Blocks.LAVA.defaultBlockState()));
       register(END, endLikePreset(new StructureSettings(false), Blocks.END_STONE.defaultBlockState(), Blocks.AIR.defaultBlockState(), true, true));
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
index 00f4eaec644ccb9734fc0bc5fba592af51c4b582..5e474d0dd772e6cfadd39cd8795083a749009a67 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
@@ -8,7 +8,8 @@ import java.util.function.Function;
 import net.minecraft.world.level.dimension.DimensionType;
 
 public class NoiseSettings {
-   public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY), Codec.intRange(0, DimensionType.Y_SIZE).fieldOf("height").forGetter(NoiseSettings::height), NoiseSamplingSettings.CODEC.fieldOf("sampling").forGetter(NoiseSettings::noiseSamplingSettings), NoiseSlideSettings.CODEC.fieldOf("top_slide").forGetter(NoiseSettings::topSlideSettings), NoiseSlideSettings.CODEC.fieldOf("bottom_slide").forGetter(NoiseSettings::bottomSlideSettings), Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal), Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical), Codec.DOUBLE.fieldOf("density_factor").forGetter(NoiseSettings::densityFactor), Codec.DOUBLE.fieldOf("density_offset").forGetter(NoiseSettings::densityOffset), Codec.BOOL.fieldOf("simplex_surface_noise").forGetter(NoiseSettings::useSimplexSurfaceNoise), Codec.BOOL.optionalFieldOf("random_density_offset", false, Lifecycle.experimental()).forGetter(NoiseSettings::randomDensityOffset), Codec.BOOL.optionalFieldOf("island_noise_override", false, Lifecycle.experimental()).forGetter(NoiseSettings::islandNoiseOverride), Codec.BOOL.optionalFieldOf("amplified", false, Lifecycle.experimental()).forGetter(NoiseSettings::isAmplified)).apply(instance, NoiseSettings::new)).comapFlatMap(NoiseSettings::guardY, Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.<NoiseSettings>create((instance) -> instance.group(Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY), Codec.intRange(0, DimensionType.Y_SIZE).fieldOf("height").forGetter(NoiseSettings::height), NoiseSamplingSettings.CODEC.fieldOf("sampling").forGetter(NoiseSettings::noiseSamplingSettings), NoiseSlideSettings.CODEC.fieldOf("top_slide").forGetter(NoiseSettings::topSlideSettings), NoiseSlideSettings.CODEC.fieldOf("bottom_slide").forGetter(NoiseSettings::bottomSlideSettings), Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal), Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical), Codec.DOUBLE.fieldOf("density_factor").forGetter(NoiseSettings::densityFactor), Codec.DOUBLE.fieldOf("density_offset").forGetter(NoiseSettings::densityOffset), Codec.BOOL.fieldOf("simplex_surface_noise").forGetter(NoiseSettings::useSimplexSurfaceNoise), Codec.BOOL.optionalFieldOf("random_density_offset", false, Lifecycle.experimental()).forGetter(NoiseSettings::randomDensityOffset), Codec.BOOL.optionalFieldOf("island_noise_override", false, Lifecycle.experimental()).forGetter(NoiseSettings::islandNoiseOverride), Codec.BOOL.optionalFieldOf("amplified", false, Lifecycle.experimental()).forGetter(NoiseSettings::isAmplified)).apply(instance, NoiseSettings::new)).comapFlatMap(NoiseSettings::guardY, Function.identity());
    private final int minY;
    private final int height;
    private final NoiseSamplingSettings noiseSamplingSettings;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java b/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java
index c8fda0e59d5e79b4d9ec5587b94ce5e8bfcfef92..633e4e666c93542eced3146249e18e00a291870a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java
@@ -14,7 +14,8 @@ import net.minecraft.world.level.levelgen.feature.configurations.StructureFeatur
 
 public class StructureSettings {
    public static final Codec<StructureSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(StrongholdConfiguration.CODEC.optionalFieldOf("stronghold").forGetter((structureSettings) -> Optional.ofNullable(structureSettings.stronghold)), Codec.simpleMap(Registry.STRUCTURE_FEATURE, StructureFeatureConfiguration.CODEC, Registry.STRUCTURE_FEATURE).fieldOf("structures").forGetter((structureSettings) -> structureSettings.structureConfig)).apply(instance, StructureSettings::new));
-   public static final ImmutableMap<StructureFeature<?>, StructureFeatureConfiguration> DEFAULTS = ImmutableMap.builder().put(StructureFeature.VILLAGE, new StructureFeatureConfiguration(32, 8, 10387312)).put(StructureFeature.DESERT_PYRAMID, new StructureFeatureConfiguration(32, 8, 14357617)).put(StructureFeature.IGLOO, new StructureFeatureConfiguration(32, 8, 14357618)).put(StructureFeature.JUNGLE_TEMPLE, new StructureFeatureConfiguration(32, 8, 14357619)).put(StructureFeature.SWAMP_HUT, new StructureFeatureConfiguration(32, 8, 14357620)).put(StructureFeature.PILLAGER_OUTPOST, new StructureFeatureConfiguration(32, 8, 165745296)).put(StructureFeature.STRONGHOLD, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.OCEAN_MONUMENT, new StructureFeatureConfiguration(32, 5, 10387313)).put(StructureFeature.END_CITY, new StructureFeatureConfiguration(20, 11, 10387313)).put(StructureFeature.WOODLAND_MANSION, new StructureFeatureConfiguration(80, 20, 10387319)).put(StructureFeature.BURIED_TREASURE, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.MINESHAFT, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.RUINED_PORTAL, new StructureFeatureConfiguration(40, 15, 34222645)).put(StructureFeature.SHIPWRECK, new StructureFeatureConfiguration(24, 4, 165745295)).put(StructureFeature.OCEAN_RUIN, new StructureFeatureConfiguration(20, 8, 14357621)).put(StructureFeature.BASTION_REMNANT, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_BRIDGE, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_FOSSIL, new StructureFeatureConfiguration(2, 1, 14357921)).build();
+   // MagmaCube - decompile error
+   public static final ImmutableMap<StructureFeature<?>, StructureFeatureConfiguration> DEFAULTS = (ImmutableMap) ImmutableMap.builder().put(StructureFeature.VILLAGE, new StructureFeatureConfiguration(32, 8, 10387312)).put(StructureFeature.DESERT_PYRAMID, new StructureFeatureConfiguration(32, 8, 14357617)).put(StructureFeature.IGLOO, new StructureFeatureConfiguration(32, 8, 14357618)).put(StructureFeature.JUNGLE_TEMPLE, new StructureFeatureConfiguration(32, 8, 14357619)).put(StructureFeature.SWAMP_HUT, new StructureFeatureConfiguration(32, 8, 14357620)).put(StructureFeature.PILLAGER_OUTPOST, new StructureFeatureConfiguration(32, 8, 165745296)).put(StructureFeature.STRONGHOLD, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.OCEAN_MONUMENT, new StructureFeatureConfiguration(32, 5, 10387313)).put(StructureFeature.END_CITY, new StructureFeatureConfiguration(20, 11, 10387313)).put(StructureFeature.WOODLAND_MANSION, new StructureFeatureConfiguration(80, 20, 10387319)).put(StructureFeature.BURIED_TREASURE, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.MINESHAFT, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.RUINED_PORTAL, new StructureFeatureConfiguration(40, 15, 34222645)).put(StructureFeature.SHIPWRECK, new StructureFeatureConfiguration(24, 4, 165745295)).put(StructureFeature.OCEAN_RUIN, new StructureFeatureConfiguration(20, 8, 14357621)).put(StructureFeature.BASTION_REMNANT, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_BRIDGE, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_FOSSIL, new StructureFeatureConfiguration(2, 1, 14357921)).build();
    public static final StrongholdConfiguration DEFAULT_STRONGHOLD;
    private final Map<StructureFeature<?>, StructureFeatureConfiguration> structureConfig;
    @Nullable
diff --git a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
index 0286b1aedddb316d268c34143538d234d5b567b7..3ac0179f92750beb73862e78fb637c6faaa1eba9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -35,7 +35,8 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class WorldGenSettings {
-   public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((worldGenSettings) -> worldGenSettings.legacyCustomOptions)).apply(instance, instance.stable(WorldGenSettings::new))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.<WorldGenSettings>create((instance) -> instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((worldGenSettings) -> worldGenSettings.legacyCustomOptions)).apply(instance, instance.stable(WorldGenSettings::new))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
    private static final Logger LOGGER = LogManager.getLogger();
    private final long seed;
    private final boolean generateFeatures;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
index 1d689a21d8a831a05c723a002ff3521cf037e0ae..0d06bba407765b808c53d8dd03827b2d5284d5eb 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
@@ -73,7 +73,7 @@ public abstract class StructureFeature<C extends FeatureConfiguration> {
    public static final StructureFeature<JigsawConfiguration> BASTION_REMNANT = register("Bastion_Remnant", new BastionFeature(JigsawConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
    public static final List<StructureFeature<?>> NOISE_AFFECTING_FEATURES = ImmutableList.of(PILLAGER_OUTPOST, VILLAGE, NETHER_FOSSIL, STRONGHOLD);
    private static final ResourceLocation JIGSAW_RENAME = new ResourceLocation("jigsaw");
-   private static final Map<ResourceLocation, ResourceLocation> RENAMES = ImmutableMap.builder().put(new ResourceLocation("nvi"), JIGSAW_RENAME).put(new ResourceLocation("pcp"), JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), JIGSAW_RENAME).put(new ResourceLocation("runtime"), JIGSAW_RENAME).build();
+   private static final Map<ResourceLocation, ResourceLocation> RENAMES = ImmutableMap.<ResourceLocation, ResourceLocation>builder().put(new ResourceLocation("nvi"), JIGSAW_RENAME).put(new ResourceLocation("pcp"), JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), JIGSAW_RENAME).put(new ResourceLocation("runtime"), JIGSAW_RENAME).build(); // MagmaCube - decompile error
    public static final int MAX_STRUCTURE_RANGE = 8;
    private final Codec<ConfiguredStructureFeature<C, StructureFeature<C>>> configuredStructureCodec;
 
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/GlowLichenConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/GlowLichenConfiguration.java
index b9d8817076d4e540125e8f0acd4eb1c4e04cd556..2840d76c9326ae30ab7abd5817b455981dcf4518 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/GlowLichenConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/GlowLichenConfiguration.java
@@ -11,7 +11,8 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class GlowLichenConfiguration implements FeatureConfiguration {
-   public static final Codec<GlowLichenConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.intRange(1, 64).fieldOf("search_range").orElse(10).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.searchRange), Codec.BOOL.fieldOf("can_place_on_floor").orElse(false).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.canPlaceOnFloor), Codec.BOOL.fieldOf("can_place_on_ceiling").orElse(false).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.canPlaceOnCeiling), Codec.BOOL.fieldOf("can_place_on_wall").orElse(false).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.canPlaceOnWall), Codec.floatRange(0.0F, 1.0F).fieldOf("chance_of_spreading").orElse(0.5F).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.chanceOfSpreading), BlockState.CODEC.listOf().fieldOf("can_be_placed_on").forGetter((glowLichenConfiguration) -> new ArrayList(glowLichenConfiguration.canBePlacedOn))).apply(instance, GlowLichenConfiguration::new));
+   // MagmaCube - decompile error
+   public static final Codec<GlowLichenConfiguration> CODEC = RecordCodecBuilder.<GlowLichenConfiguration>create((instance) -> instance.group(Codec.intRange(1, 64).fieldOf("search_range").orElse(10).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.searchRange), Codec.BOOL.fieldOf("can_place_on_floor").orElse(false).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.canPlaceOnFloor), Codec.BOOL.fieldOf("can_place_on_ceiling").orElse(false).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.canPlaceOnCeiling), Codec.BOOL.fieldOf("can_place_on_wall").orElse(false).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.canPlaceOnWall), Codec.floatRange(0.0F, 1.0F).fieldOf("chance_of_spreading").orElse(0.5F).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.chanceOfSpreading), BlockState.CODEC.listOf().fieldOf("can_be_placed_on").forGetter((glowLichenConfiguration) -> new ArrayList<>(glowLichenConfiguration.canBePlacedOn))).apply(instance, GlowLichenConfiguration::new));
    public final int searchRange;
    public final boolean canPlaceOnFloor;
    public final boolean canPlaceOnCeiling;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
index 0a5e0c865ba1cfb9ac1985b0291d9f158eb91a01..15bb9e5abe661cdce005702a4ea6ddf19b2c3fae 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
@@ -10,7 +10,8 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.material.FluidState;
 
 public class SpringConfiguration implements FeatureConfiguration {
-   public static final Codec<SpringConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(FluidState.CODEC.fieldOf("state").forGetter((springConfiguration) -> springConfiguration.state), Codec.BOOL.fieldOf("requires_block_below").orElse(true).forGetter((springConfiguration) -> springConfiguration.requiresBlockBelow), Codec.INT.fieldOf("rock_count").orElse(4).forGetter((springConfiguration) -> springConfiguration.rockCount), Codec.INT.fieldOf("hole_count").orElse(1).forGetter((springConfiguration) -> springConfiguration.holeCount), Registry.BLOCK.listOf().fieldOf("valid_blocks").xmap(ImmutableSet::copyOf, ImmutableList::copyOf).forGetter((springConfiguration) -> springConfiguration.validBlocks)).apply(instance, SpringConfiguration::new));
+   // MagmaCube - decompile error
+   public static final Codec<SpringConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(FluidState.CODEC.fieldOf("state").forGetter((springConfiguration) -> springConfiguration.state), Codec.BOOL.fieldOf("requires_block_below").orElse(true).forGetter((springConfiguration) -> springConfiguration.requiresBlockBelow), Codec.INT.fieldOf("rock_count").orElse(4).forGetter((springConfiguration) -> springConfiguration.rockCount), Codec.INT.fieldOf("hole_count").orElse(1).forGetter((springConfiguration) -> springConfiguration.holeCount), Registry.BLOCK.listOf().fieldOf("valid_blocks").xmap(ImmutableSet::copyOf, ImmutableList::copyOf).forGetter((springConfiguration) -> (ImmutableSet<Block>) springConfiguration.validBlocks)).apply(instance, SpringConfiguration::new));
    public final FluidState state;
    public final boolean requiresBlockBelow;
    public final int rockCount;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java
index bb1f9b8936b0cee08f26e8d229afc00815d1fd8d..b1fa868894eb3221e52ac59c93f5d7d04b2b6e24 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java
@@ -7,7 +7,8 @@ import java.util.function.Function;
 import net.minecraft.util.ExtraCodecs;
 
 public class StructureFeatureConfiguration {
-   public static final Codec<StructureFeatureConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.intRange(0, 4096).fieldOf("spacing").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.spacing), Codec.intRange(0, 4096).fieldOf("separation").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.separation), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("salt").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.salt)).apply(instance, StructureFeatureConfiguration::new)).comapFlatMap((structureFeatureConfiguration) -> structureFeatureConfiguration.spacing <= structureFeatureConfiguration.separation ? DataResult.error("Spacing has to be smaller than separation") : DataResult.success(structureFeatureConfiguration), Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<StructureFeatureConfiguration> CODEC = RecordCodecBuilder.<StructureFeatureConfiguration>create((instance) -> instance.group(Codec.intRange(0, 4096).fieldOf("spacing").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.spacing), Codec.intRange(0, 4096).fieldOf("separation").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.separation), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("salt").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.salt)).apply(instance, StructureFeatureConfiguration::new)).comapFlatMap((structureFeatureConfiguration) -> structureFeatureConfiguration.spacing <= structureFeatureConfiguration.separation ? DataResult.error("Spacing has to be smaller than separation") : DataResult.success(structureFeatureConfiguration), Function.identity());
    private final int spacing;
    private final int separation;
    private final int salt;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
index 41370ef484faf62f5f88cc0e9238f46d9ee8fa27..4ece5c0d4d82fc795cae7062ce8f8307e97d78a6 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
@@ -182,12 +182,14 @@ public class JigsawPlacement {
                               if (!boundingBox2.isInside(structureBlockInfox.pos.relative(JigsawBlock.getFrontFacing(structureBlockInfox.state)))) {
                                  return 0;
                               } else {
-                                 ResourceLocation resourceLocation = new ResourceLocation(structureBlockInfox.nbt.getString("pool"));
-                                 Optional<StructureTemplatePool> optional = this.pools.getOptional(resourceLocation);
-                                 Optional<StructureTemplatePool> optional2 = optional.flatMap((structureTemplatePool) -> this.pools.getOptional(structureTemplatePool.getFallback()));
-                                 int i = optional.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
-                                 int i2 = optional2.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
-                                 return Math.max(i, i2);
+                                 // MagmaCube start - decompile error
+                                 ResourceLocation resourceLocationx = new ResourceLocation(structureBlockInfox.nbt.getString("pool"));
+                                 Optional<StructureTemplatePool> optx = this.pools.getOptional(resourceLocationx);
+                                 Optional<StructureTemplatePool> optional2x = optx.flatMap((structureTemplatePool) -> this.pools.getOptional(structureTemplatePool.getFallback()));
+                                 int ix = optx.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
+                                 int i2x = optional2x.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
+                                 return Math.max(ix, i2x);
+                                 // MagmaCube end - decompile error
                               }
                            }).max().orElse(0);
                         } else {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
index ced18185802e5f8897c8785ebe3bcc95400a3fd5..d2535ce04508919efc4a4d3b36c93c9bbd20528b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
@@ -29,7 +29,7 @@ import org.apache.logging.log4j.Logger;
 public class StructureTemplatePool {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final int SIZE_UNSET = Integer.MIN_VALUE;
-   public static final Codec<StructureTemplatePool> DIRECT_CODEC;
+   public static final Codec<StructureTemplatePool> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName), ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback), Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.intRange(1, 150).fieldOf("weight")).codec().listOf().fieldOf("elements").forGetter((structureTemplatePool) -> structureTemplatePool.rawTemplates)).apply(instance, StructureTemplatePool::new));
    public static final Codec<Supplier<StructureTemplatePool>> CODEC = RegistryFileCodec.create(Registry.TEMPLATE_POOL_REGISTRY, DIRECT_CODEC);
    private final ResourceLocation name;
    private final List<Pair<StructurePoolElement, Integer>> rawTemplates;
@@ -98,10 +98,6 @@ public class StructureTemplatePool {
       return this.templates.size();
    }
 
-   static {
-      DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName), ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback), Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.intRange(1, 150).fieldOf("weight")).codec().listOf().fieldOf("elements").forGetter((structureTemplatePool) -> structureTemplatePool.rawTemplates)).apply(instance, StructureTemplatePool::new));
-   }
-
    public static enum Projection implements StringRepresentable {
       TERRAIN_MATCHING("terrain_matching", ImmutableList.of(new GravityProcessor(Heightmap.Types.WORLD_SURFACE_WG, -1))),
       RIGID("rigid", ImmutableList.of());
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
index 70389e1e073335a8ad33479e5d1b84665aa1a9d5..4c551a4c61b08a1f85aee6a939ca96b7c3c0deda 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
@@ -31,7 +31,7 @@ public class AlterGroundDecorator extends TreeDecorator {
             this.placeCircle(levelSimulatedReader, biConsumer, random, blockPos.west().south(2));
             this.placeCircle(levelSimulatedReader, biConsumer, random, blockPos.east(2).south(2));
 
-            for(int i = 0; i < 5; ++i) {
+         for(int il = 0; il < 5; ++il) { // MagmaCube - decompile error
                int i2 = random.nextInt(64);
                int i3 = i2 % 8;
                int i4 = i2 / 8;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
index 19e5b9d671647aaf95c8b3620bb0027cf2a9c598..40e090fe794e25ff087739a3ed245e41cf8ed0de 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
@@ -40,9 +40,9 @@ public class BeehiveDecorator extends TreeDecorator {
             if (Feature.isAir(levelSimulatedReader, blockPos2) && Feature.isAir(levelSimulatedReader, blockPos2.relative(Direction.SOUTH))) {
                biConsumer.accept(blockPos2, Blocks.BEE_NEST.defaultBlockState().setValue(BeehiveBlock.FACING, Direction.SOUTH));
                levelSimulatedReader.getBlockEntity(blockPos2, BlockEntityType.BEEHIVE).ifPresent((beehiveBlockEntity) -> {
-                  int i = 2 + random.nextInt(2);
+                  int ix = 2 + random.nextInt(2); // MagmaCube - decompile error
 
-                  for(int i2 = 0; i2 < i; ++i2) {
+                  for(int i2 = 0; i2 < ix; ++i2) { // MagmaCube - decompile error
                      CompoundTag compoundTag = new CompoundTag();
                      compoundTag.putString("id", Registry.ENTITY_TYPE.getKey(EntityType.BEE).toString());
                      beehiveBlockEntity.storeBee(compoundTag, random.nextInt(599), false);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
index 942e3c352cf8b84e7b2421ae5c86e7c859ac32b4..eea67edc2bf33c8ce00c9da35d58a5463b7be318 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
@@ -37,7 +37,7 @@ import org.apache.logging.log4j.Logger;
 
 public class FlatLevelGeneratorSettings {
    private static final Logger LOGGER = LogManager.getLogger();
-   public static final Codec<FlatLevelGeneratorSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.biomes), StructureSettings.CODEC.fieldOf("structures").forGetter(FlatLevelGeneratorSettings::structureSettings), FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter(FlatLevelGeneratorSettings::getLayersInfo), Codec.BOOL.fieldOf("lakes").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.addLakes), Codec.BOOL.fieldOf("features").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.decoration), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter((flatLevelGeneratorSettings) -> Optional.of(flatLevelGeneratorSettings.biome))).apply(instance, FlatLevelGeneratorSettings::new)).comapFlatMap(FlatLevelGeneratorSettings::validateHeight, Function.identity()).stable();
+   public static final Codec<FlatLevelGeneratorSettings> CODEC = RecordCodecBuilder.<FlatLevelGeneratorSettings>create((instance) -> instance.group(RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.biomes), StructureSettings.CODEC.fieldOf("structures").forGetter(FlatLevelGeneratorSettings::structureSettings), FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter(FlatLevelGeneratorSettings::getLayersInfo), Codec.BOOL.fieldOf("lakes").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.addLakes), Codec.BOOL.fieldOf("features").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.decoration), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter((flatLevelGeneratorSettings) -> Optional.of(flatLevelGeneratorSettings.biome))).apply(instance, FlatLevelGeneratorSettings::new)).comapFlatMap(FlatLevelGeneratorSettings::validateHeight, Function.identity()).stable();
    private static final Map<StructureFeature<?>, ConfiguredStructureFeature<?, ?>> STRUCTURE_FEATURES = Util.make(Maps.newHashMap(), (hashMap) -> {
       hashMap.put(StructureFeature.MINESHAFT, StructureFeatures.MINESHAFT);
       hashMap.put(StructureFeature.VILLAGE, StructureFeatures.VILLAGE_PLAINS);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java b/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
index 624e948278b7048883a5abacce800e3c2e40f2c8..4b959aa6ac128bdb8b4a85d8d7239d1b76abff44 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
@@ -9,7 +9,8 @@ import net.minecraft.world.level.levelgen.WorldGenerationContext;
 
 public class ConstantHeight extends HeightProvider {
    public static final ConstantHeight ZERO = new ConstantHeight(VerticalAnchor.absolute(0));
-   public static final Codec<ConstantHeight> CODEC = Codec.either(VerticalAnchor.CODEC, RecordCodecBuilder.create((instance) -> instance.group(VerticalAnchor.CODEC.fieldOf("value").forGetter((constantHeight) -> constantHeight.value)).apply(instance, ConstantHeight::new))).xmap((either) -> (ConstantHeight)either.map(ConstantHeight::of, (constantHeight) -> constantHeight), (constantHeight) -> Either.left(constantHeight.value));
+   // MagmaCube - decompile error
+   public static final Codec<ConstantHeight> CODEC = Codec.either(VerticalAnchor.CODEC, RecordCodecBuilder.<ConstantHeight>create((instance) -> instance.group(VerticalAnchor.CODEC.fieldOf("value").forGetter((constantHeight) -> constantHeight.value)).apply(instance, ConstantHeight::new))).xmap((either) -> (ConstantHeight)either.map(ConstantHeight::of, (constantHeight) -> constantHeight), (constantHeight) -> Either.left(constantHeight.value));
    private final VerticalAnchor value;
 
    public static ConstantHeight of(VerticalAnchor verticalAnchor) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java b/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
index 3961c01c84b7b7e52b009bd254db189de6c1ae24..95544898ff460397ef1bdc26a4beaec6a5142b39 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
@@ -1323,7 +1323,7 @@ public class OceanMonumentPieces {
       protected static final BlockState LAMP_BLOCK = Blocks.SEA_LANTERN.defaultBlockState();
       protected static final boolean DO_FILL = true;
       protected static final BlockState FILL_BLOCK = Blocks.WATER.defaultBlockState();
-      protected static final Set<Block> FILL_KEEP = ImmutableSet.builder().add(Blocks.ICE).add(Blocks.PACKED_ICE).add(Blocks.BLUE_ICE).add(FILL_BLOCK.getBlock()).build();
+      protected static final Set<Block> FILL_KEEP = ImmutableSet.<Block>builder().add(Blocks.ICE).add(Blocks.PACKED_ICE).add(Blocks.BLUE_ICE).add(FILL_BLOCK.getBlock()).build(); // MagmaCube - decompile error
       protected static final int GRIDROOM_WIDTH = 8;
       protected static final int GRIDROOM_DEPTH = 8;
       protected static final int GRIDROOM_HEIGHT = 4;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
index 71fc52884b5fea7b83456064f3188f8d7967f56b..c08297510972f1ea51ba4ed063dcbb35a15f214c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
@@ -45,7 +45,8 @@ public abstract class StructurePiece {
    private Rotation rotation;
    protected int genDepth;
    private final StructurePieceType type;
-   private static final Set<Block> SHAPE_CHECK_BLOCKS = ImmutableSet.builder().add(Blocks.NETHER_BRICK_FENCE).add(Blocks.TORCH).add(Blocks.WALL_TORCH).add(Blocks.OAK_FENCE).add(Blocks.SPRUCE_FENCE).add(Blocks.DARK_OAK_FENCE).add(Blocks.ACACIA_FENCE).add(Blocks.BIRCH_FENCE).add(Blocks.JUNGLE_FENCE).add(Blocks.LADDER).add(Blocks.IRON_BARS).build();
+   // MagmaCube - decompile error
+   private static final Set<Block> SHAPE_CHECK_BLOCKS = (Set) ImmutableSet.builder().add(Blocks.NETHER_BRICK_FENCE).add(Blocks.TORCH).add(Blocks.WALL_TORCH).add(Blocks.OAK_FENCE).add(Blocks.SPRUCE_FENCE).add(Blocks.DARK_OAK_FENCE).add(Blocks.ACACIA_FENCE).add(Blocks.BIRCH_FENCE).add(Blocks.JUNGLE_FENCE).add(Blocks.LADDER).add(Blocks.IRON_BARS).build();
 
    protected StructurePiece(StructurePieceType structurePieceType, int i, BoundingBox boundingBox) {
       this.type = structurePieceType;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
index 92870b66f6a6659ed8bd481ca8a01a37c334def8..9b96c266fd5e2f10aed298d619347c9679585208 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -134,7 +134,7 @@ public class StructureTemplate {
    }
 
    private static List<StructureTemplate.StructureBlockInfo> buildInfoList(List<StructureTemplate.StructureBlockInfo> list, List<StructureTemplate.StructureBlockInfo> list2, List<StructureTemplate.StructureBlockInfo> list3) {
-      Comparator<StructureTemplate.StructureBlockInfo> comparator = Comparator.comparingInt((structureBlockInfo) -> structureBlockInfo.pos.getY()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getX()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getZ());
+      Comparator<StructureTemplate.StructureBlockInfo> comparator = Comparator.<StructureBlockInfo>comparingInt((structureBlockInfo) -> structureBlockInfo.pos.getY()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getX()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getZ()); // MagmaCube - decompile error
       list.sort(comparator);
       list3.sort(comparator);
       list2.sort(comparator);
diff --git a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
index d7616ca3dfb499ea8cf4ce71386959a9443cebf1..6e55b9b8aff65a967b4d3f43ddb5cc065e0a4225 100644
--- a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
+++ b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
@@ -5,6 +5,8 @@ import it.unimi.dsi.fastutil.longs.Long2ByteOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongArrayList;
 import it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongList;
+
+import java.util.function.LongConsumer;
 import java.util.function.LongPredicate;
 import net.minecraft.util.Mth;
 
@@ -85,13 +87,13 @@ public abstract class DynamicGraphMinFixedPoint {
 
    public void removeIf(LongPredicate longPredicate) {
       LongList longList = new LongArrayList();
-      this.computedLevels.keySet().forEach((l) -> {
+      this.computedLevels.keySet().forEach((LongConsumer) (l) -> { // MagmaCube - decompile error
          if (longPredicate.test(l)) {
             longList.add(l);
          }
 
       });
-      longList.forEach(this::removeFromQueue);
+      longList.forEach((LongConsumer) this::removeFromQueue); // MagmaCube - decompile error
    }
 
    private void dequeue(long l, int i, int i2, boolean flag) {
diff --git a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
index 6daa6646979eb43bf7841d154cf5c0c2bf1b357b..448e1f627f8a7e9abfa3af2e5d9fae2f5f228adb 100644
--- a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
@@ -206,10 +206,11 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
 
          this.toRemove.clear();
          this.hasToRemove = false;
-         ObjectIterator<Entry<DataLayer>> objectIterator = this.queuedSections.long2ObjectEntrySet().iterator();
-
-         while(objectIterator.hasNext()) {
-            Entry<DataLayer> entry = (Entry)objectIterator.next();
+         // MagmaCube start - decompile error
+         ObjectIterator<Entry<DataLayer>> objectIteratorx = this.queuedSections.long2ObjectEntrySet().iterator();
+         while(objectIteratorx.hasNext()) {
+            Entry<DataLayer> entry = (Entry)objectIteratorx.next();
+            // MagmaCube end - decompile error
             long l3 = entry.getLongKey();
             if (this.storingLightForSection(l3)) {
                DataLayer dataLayer3 = (DataLayer)entry.getValue();
@@ -239,13 +240,13 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
          }
 
          this.untrustedSections.clear();
-         objectIterator = this.queuedSections.long2ObjectEntrySet().iterator();
+         objectIteratorx = this.queuedSections.long2ObjectEntrySet().iterator();
 
-         while(objectIterator.hasNext()) {
-            Entry<DataLayer> entry2 = (Entry)objectIterator.next();
+         while(objectIteratorx.hasNext()) {
+            Entry<DataLayer> entry2 = (Entry)objectIteratorx.next();
             long l6 = entry2.getLongKey();
             if (this.storingLightForSection(l6)) {
-               objectIterator.remove();
+               objectIteratorx.remove();
             }
          }
 
diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index 278c7e3d8f7a492d2b687d209efd1b59a2cd3c00..199cf18552357dcf0ecadf947e696bf2c6faf12a 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -262,16 +262,16 @@ public abstract class FlowingFluid extends Fluid {
             BlockPos blockPos3 = blockPos.relative(direction2);
             short s = getCacheKey(blockPos2, blockPos3);
             Pair<BlockState, FluidState> pair = short2ObjectMap.computeIfAbsent(s, (ix) -> {
-               BlockState blockState = levelReader.getBlockState(blockPos3);
-               return Pair.of(blockState, blockState.getFluidState());
+               BlockState blockStateIn = levelReader.getBlockState(blockPos3);
+               return Pair.of(blockStateIn, blockStateIn.getFluidState());
             });
             BlockState blockState2 = (BlockState)pair.getFirst();
             FluidState fluidState = (FluidState)pair.getSecond();
             if (this.canPassThrough(levelReader, this.getFlowing(), blockPos, blockState, direction2, blockPos3, blockState2, fluidState)) {
                boolean flag = short2BooleanMap.computeIfAbsent(s, (ix) -> {
-                  BlockPos blockPos2 = blockPos3.below();
-                  BlockState blockState2 = levelReader.getBlockState(blockPos2);
-                  return this.isWaterHole(levelReader, this.getFlowing(), blockPos3, blockState2, blockPos2, blockState2);
+                  BlockPos blockPos2In = blockPos3.below();
+                  BlockState blockState2In = levelReader.getBlockState(blockPos2In);
+                  return this.isWaterHole(levelReader, this.getFlowing(), blockPos3, blockState2In, blockPos2In, blockState2In);
                });
                if (flag) {
                   return i;
@@ -332,8 +332,8 @@ public abstract class FlowingFluid extends Fluid {
          BlockPos blockPos2 = blockPos.relative(direction);
          short s = getCacheKey(blockPos, blockPos2);
          Pair<BlockState, FluidState> pair = short2ObjectMap.computeIfAbsent(s, (ix) -> {
-            BlockState blockState = levelReader.getBlockState(blockPos2);
-            return Pair.of(blockState, blockState.getFluidState());
+            BlockState blockStateIn = levelReader.getBlockState(blockPos2);
+            return Pair.of(blockStateIn, blockStateIn.getFluidState());
          });
          BlockState blockState2 = (BlockState)pair.getFirst();
          FluidState fluidState = (FluidState)pair.getSecond();
@@ -341,8 +341,8 @@ public abstract class FlowingFluid extends Fluid {
          if (this.canPassThrough(levelReader, fluidState2.getType(), blockPos, blockState, direction, blockPos2, blockState2, fluidState)) {
             BlockPos blockPos3 = blockPos2.below();
             boolean flag = short2BooleanMap.computeIfAbsent(s, (ix) -> {
-               BlockState blockState2 = levelReader.getBlockState(blockPos3);
-               return this.isWaterHole(levelReader, this.getFlowing(), blockPos2, blockState2, blockPos3, blockState2);
+               BlockState blockState2In = levelReader.getBlockState(blockPos3);
+               return this.isWaterHole(levelReader, this.getFlowing(), blockPos2, blockState2In, blockPos3, blockState2In);
             });
             int i2;
             if (flag) {
diff --git a/src/main/java/net/minecraft/world/level/newbiome/context/LazyAreaContext.java b/src/main/java/net/minecraft/world/level/newbiome/context/LazyAreaContext.java
index 8c1e9838f771dda3fa7f025f761691fbff58fd02..1be8bfa3a3effd90bfdf7b5cfb27872caf50e245 100644
--- a/src/main/java/net/minecraft/world/level/newbiome/context/LazyAreaContext.java
+++ b/src/main/java/net/minecraft/world/level/newbiome/context/LazyAreaContext.java
@@ -45,7 +45,7 @@ public class LazyAreaContext implements BigContext<LazyArea> {
    }
 
    public int nextRandom(int i) {
-      int i2 = Math.floorMod(this.rval >> 24, i);
+      int i2 = (int) Math.floorMod(this.rval >> 24, i);
       this.rval = LinearCongruentialGenerator.next(this.rval, this.seed);
       return i2;
    }
diff --git a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
index 477d9ac80868246d445deff934872c3ba92cf656..9e1390ab79afcfb20782d7c05529cfb9cf68aad0 100644
--- a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
+++ b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
@@ -43,12 +43,14 @@ public class PortalForcer {
       PoiManager poiManager = this.level.getPoiManager();
       int i = flag ? 16 : 128;
       poiManager.ensureLoadedAndValid(this.level, blockPos, i);
-      Optional<PoiRecord> optional = poiManager.getInSquare((poiType) -> poiType == PoiType.NETHER_PORTAL, blockPos, i, PoiManager.Occupancy.ANY).sorted(Comparator.comparingDouble((poiRecord) -> poiRecord.getPos().distSqr(blockPos)).thenComparingInt((poiRecord) -> poiRecord.getPos().getY())).filter((poiRecord) -> this.level.getBlockState(poiRecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS)).findFirst();
+      Optional<PoiRecord> optional = poiManager.getInSquare((poiType) -> poiType == PoiType.NETHER_PORTAL, blockPos, i, PoiManager.Occupancy.ANY).sorted(Comparator.<PoiRecord>comparingDouble((poiRecord) -> poiRecord.getPos().distSqr(blockPos)).thenComparingInt((poiRecord) -> poiRecord.getPos().getY())).filter((poiRecord) -> this.level.getBlockState(poiRecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS)).findFirst(); // MagmaCube - decompile error
       return optional.map((poiRecord) -> {
-         BlockPos blockPos = poiRecord.getPos();
-         this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(blockPos), 3, blockPos);
-         BlockState blockState = this.level.getBlockState(blockPos);
-         return BlockUtil.getLargestRectangleAround(blockPos, blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockPosx) -> this.level.getBlockState(blockPosx) == blockState);
+         // MagmaCube start - decompile error
+         BlockPos blockPosx = poiRecord.getPos();
+         this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(blockPosx), 3, blockPosx);
+         BlockState blockState = this.level.getBlockState(blockPosx);
+         return BlockUtil.getLargestRectangleAround(blockPosx, blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockPosxx) -> this.level.getBlockState(blockPosxx) == blockState);
+         // MagmaCube end - decompile error
       });
    }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index 96f04747dbb4e9d4c23cfa54dcb57cdf4a690ef3..51bda5d259aa1f2ed4edfc70851b0d9a7002ae10 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -98,12 +98,12 @@ public class LevelStorageSource {
          }
       }
 
-      Dynamic<T> dynamic3 = dataFixer.update(References.WORLD_GEN_SETTINGS, dynamic2, i, SharedConstants.getCurrentVersion().getWorldVersion());
-      DataResult<WorldGenSettings> dataResult = WorldGenSettings.CODEC.parse(dynamic3);
+      Dynamic<T> dynamic3x = dataFixer.update(References.WORLD_GEN_SETTINGS, dynamic2, i, SharedConstants.getCurrentVersion().getWorldVersion());
+      DataResult<WorldGenSettings> dataResult = WorldGenSettings.CODEC.parse(dynamic3x);
       return Pair.of((WorldGenSettings)dataResult.resultOrPartial(Util.prefix("WorldGenSettings: ", LOGGER::error)).orElseGet(() -> {
-         Registry<DimensionType> registry = (Registry)RegistryLookupCodec.create(Registry.DIMENSION_TYPE_REGISTRY).codec().parse(dynamic3).resultOrPartial(Util.prefix("Dimension type registry: ", LOGGER::error)).orElseThrow(() -> new IllegalStateException("Failed to get dimension registry"));
-         Registry<Biome> registry2 = (Registry)RegistryLookupCodec.create(Registry.BIOME_REGISTRY).codec().parse(dynamic3).resultOrPartial(Util.prefix("Biome registry: ", LOGGER::error)).orElseThrow(() -> new IllegalStateException("Failed to get biome registry"));
-         Registry<NoiseGeneratorSettings> registry3 = (Registry)RegistryLookupCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY).codec().parse(dynamic3).resultOrPartial(Util.prefix("Noise settings registry: ", LOGGER::error)).orElseThrow(() -> new IllegalStateException("Failed to get noise settings registry"));
+         Registry<DimensionType> registry = (Registry)RegistryLookupCodec.create(Registry.DIMENSION_TYPE_REGISTRY).codec().parse(dynamic3x).resultOrPartial(Util.prefix("Dimension type registry: ", LOGGER::error)).orElseThrow(() -> new IllegalStateException("Failed to get dimension registry"));
+         Registry<Biome> registry2 = (Registry)RegistryLookupCodec.create(Registry.BIOME_REGISTRY).codec().parse(dynamic3x).resultOrPartial(Util.prefix("Biome registry: ", LOGGER::error)).orElseThrow(() -> new IllegalStateException("Failed to get biome registry"));
+         Registry<NoiseGeneratorSettings> registry3 = (Registry)RegistryLookupCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY).codec().parse(dynamic3x).resultOrPartial(Util.prefix("Noise settings registry: ", LOGGER::error)).orElseThrow(() -> new IllegalStateException("Failed to get noise settings registry"));
          return WorldGenSettings.makeDefault(registry, registry2, registry3);
       }), dataResult.lifecycle());
    }
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelSummary.java b/src/main/java/net/minecraft/world/level/storage/LevelSummary.java
index b521a5fc7811fa6a7cf5279e9d97446a0807ed34..c13d4036c1e35af8d5f97680c5f911ad984ecffa 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelSummary.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelSummary.java
@@ -111,7 +111,7 @@ public class LevelSummary implements Comparable<LevelSummary> {
    public boolean isIncompatibleWorldHeight() {
       int i = this.levelVersion.minecraftVersion();
       boolean flag = i > 2692 && i <= 2706;
-      return flag;
+      return !net.minecraft.SharedConstants.ALLOW_INCOMPATIBLE_WORLD_HEIGHT && flag; // MagmaCube - SharedConstants
    }
 
    public boolean isDisabled() {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java b/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
index 895808e75f6a050bd1b2ea3e0f0b697ad017ae00..244dbd0afa4cc49d077ec73e268bcbb8f9d66d5c 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
@@ -111,7 +111,7 @@ public class GsonAdapterFactory {
          } else {
             JsonObject jsonObject = new JsonObject();
             jsonObject.addProperty(this.typeKey, this.registry.getKey(serializerType).toString());
-            serializerType.getSerializer().serialize(jsonObject, object, jsonSerializationContext);
+            ((Serializer) serializerType.getSerializer()).serialize(jsonObject, object, jsonSerializationContext); // MagmaCube - decompile error
             return jsonObject;
          }
       }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java b/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
index 022d7d3364ac27290bc34ca9c373901035b95a7c..7430f890b36c75cc3f5b014367307c6e81467a37 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
@@ -53,12 +53,12 @@ public class ValidationContext {
    }
 
    public ValidationContext enterTable(String s, ResourceLocation resourceLocation) {
-      ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.builder().addAll(this.visitedTables).add(resourceLocation).build();
+      ImmutableSet<ResourceLocation> immutableSet = (ImmutableSet) ImmutableSet.builder().addAll(this.visitedTables).add(resourceLocation).build(); // MagmaCube - decompile error
       return new ValidationContext(this.problems, () -> this.getContext() + s, this.params, this.conditionResolver, this.visitedConditions, this.tableResolver, immutableSet);
    }
 
    public ValidationContext enterCondition(String s, ResourceLocation resourceLocation) {
-      ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.builder().addAll(this.visitedConditions).add(resourceLocation).build();
+      ImmutableSet<ResourceLocation> immutableSet = (ImmutableSet) ImmutableSet.builder().addAll(this.visitedConditions).add(resourceLocation).build(); // MagmaCube - decompile error
       return new ValidationContext(this.problems, () -> this.getContext() + s, this.params, this.conditionResolver, immutableSet, this.tableResolver, this.visitedTables);
    }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
index fcf7289211d8ca3a882331eb02bebf06cf465f7a..1daec89653bc2c821db98a6d93f7762e9ddec39f 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
@@ -29,9 +29,11 @@ public class EntryGroup extends CompositeEntryBase {
          };
       default:
          return (lootContext, consumer) -> {
-            for(ComposableEntryContainer composableEntryContainer : composableEntryContainers) {
-               composableEntryContainer.expand(lootContext, consumer);
+            // MagmaCube start - decompile error
+            for(ComposableEntryContainer composableEntryContainerz : composableEntryContainers) {
+               composableEntryContainerz.expand(lootContext, consumer);
             }
+            // MagmaCube end - decompile error
 
             return true;
          };
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
index 88586d1a0e053e8c3fc27b7230b22b8076c7ce2c..5a21ad1be713ec1133187f8897a44bd603b4c631 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
@@ -47,7 +47,7 @@ public class EnchantRandomlyFunction extends LootItemConditionalFunction {
       Enchantment enchantment;
       if (this.enchantments.isEmpty()) {
          boolean flag = itemStack.is(Items.BOOK);
-         List<Enchantment> list = Registry.ENCHANTMENT.stream().filter(Enchantment::isDiscoverable).filter((enchantment) -> flag || enchantment.canEnchant(itemStack)).collect(Collectors.toList());
+         List<Enchantment> list = Registry.ENCHANTMENT.stream().filter(Enchantment::isDiscoverable).filter((enchantmentIn) -> flag || enchantmentIn.canEnchant(itemStack)).collect(Collectors.toList());
          if (list.isEmpty()) {
             LOGGER.warn("Couldn't find a compatible enchantment for {}", itemStack);
             return itemStack;
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
index b0324457587507084a3046b329289215b059b660..1fd0b614b2872a901205c5bea58fd9d3d0689ea6 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
@@ -54,9 +54,11 @@ public class LootItemFunctions {
          return (itemStack, lootContext) -> (ItemStack)biFunction2.apply((ItemStack)biFunction.apply(itemStack, lootContext), lootContext);
       default:
          return (itemStack, lootContext) -> {
-            for(BiFunction<ItemStack, LootContext, ItemStack> biFunction : biFunctions) {
-               itemStack = (ItemStack)biFunction.apply(itemStack, lootContext);
+            // MagmaCube start - decompile error
+            for(BiFunction<ItemStack, LootContext, ItemStack> biFunctionx : biFunctions) {
+               itemStack = (ItemStack)biFunctionx.apply(itemStack, lootContext);
             }
+            // MagmaCube end - decompile error
 
             return itemStack;
          };
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
index 1b35fa2d4a7ba63177a60f63dd9ebe7e8824515d..2c519bac73c1562ad033ad62b0e2467260bbdb48 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
@@ -79,10 +79,12 @@ public class SetBannerPatternFunction extends LootItemConditionalFunction {
          super.serialize(jsonObject, setBannerPatternFunction, jsonSerializationContext);
          JsonArray jsonArray = new JsonArray();
          setBannerPatternFunction.patterns.forEach((pair) -> {
-            JsonObject jsonObject = new JsonObject();
-            jsonObject.addProperty("pattern", ((BannerPattern)pair.getFirst()).getFilename());
-            jsonObject.addProperty("color", ((DyeColor)pair.getSecond()).getName());
-            jsonArray.add(jsonObject);
+            // MagmaCube start - decompile error
+            JsonObject jsonObjectx = new JsonObject();
+            jsonObjectx.addProperty("pattern", ((BannerPattern)pair.getFirst()).getFilename());
+            jsonObjectx.addProperty("color", ((DyeColor)pair.getSecond()).getName());
+            jsonArray.add(jsonObjectx);
+            // MagmaCube end - decompile error
          });
          jsonObject.add("patterns", jsonArray);
          jsonObject.addProperty("append", setBannerPatternFunction.append);
diff --git a/src/main/java/net/minecraft/world/level/timers/TimerQueue.java b/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
index 7a8521c8afe1588c9344c5e17a3806753761981e..05144ef9c4b6be1938d7a767af16703937f464ea 100644
--- a/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
+++ b/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
@@ -28,7 +28,7 @@ public class TimerQueue<T> {
    private final Table<String, Long, TimerQueue.Event<T>> events = HashBasedTable.create();
 
    private static <T> Comparator<TimerQueue.Event<T>> createComparator() {
-      return Comparator.comparingLong((event) -> event.triggerTime).thenComparing((event) -> event.sequentialId);
+      return Comparator.<Event<T>>comparingLong((event) -> event.triggerTime).thenComparing((event) -> event.sequentialId); // MagmaCube - decompile error
    }
 
    public TimerQueue(TimerCallbacks<T> timerCallbacks, Stream<Dynamic<Tag>> stream) {
