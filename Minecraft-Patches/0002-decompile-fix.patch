From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <ilyy@outlook.jp>
Date: Sun, 10 Jan 2021 20:40:08 +0900
Subject: [PATCH] decompile fix


diff --git a/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java b/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
index e28b207911540b882697530e38f4a73d7dae59b4..2cda5b3dcad35972d029649c683735b99f39f540 100644
--- a/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
+++ b/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
@@ -190,7 +190,7 @@ public class OggAudioStream implements AudioStream {
             memoryStack.close();
          }
 
-         return (boolean)i;
+         return false;
       }
    }
 
diff --git a/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java b/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
index c8274d215a575334f551fef1ae66f2aad31b7677..cfa253923faa372606f31c3936cd5c69c0f69d20 100644
--- a/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
+++ b/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
@@ -85,10 +85,10 @@ public class TrueTypeGlyphProvider implements GlyphProvider {
                   int i3 = intBuffer3.get(0) - intBuffer.get(0);
                   int i4 = intBuffer4.get(0) - intBuffer2.get(0);
                   if (i3 > 0 && i4 > 0) {
-                     IntBuffer intBuffer5 = memoryStack.mallocInt(1);
+                     IntBuffer intBuffer5In = memoryStack.mallocInt(1);
                      IntBuffer intBuffer6 = memoryStack.mallocInt(1);
-                     STBTruetype.stbtt_GetGlyphHMetrics(this.font, i2, intBuffer5, intBuffer6);
-                     var12 = new TrueTypeGlyphProvider.Glyph(intBuffer.get(0), intBuffer3.get(0), -intBuffer2.get(0), -intBuffer4.get(0), (float)intBuffer5.get(0) * this.pointScale, (float)intBuffer6.get(0) * this.pointScale, i2);
+                     STBTruetype.stbtt_GetGlyphHMetrics(this.font, i2, intBuffer5In, intBuffer6);
+                     var12 = new TrueTypeGlyphProvider.Glyph(intBuffer.get(0), intBuffer3.get(0), -intBuffer2.get(0), -intBuffer4.get(0), (float)intBuffer5In.get(0) * this.pointScale, (float)intBuffer6.get(0) * this.pointScale, i2);
                      break label62;
                   }
 
diff --git a/src/main/java/com/mojang/blaze3d/platform/GlStateManager.java b/src/main/java/com/mojang/blaze3d/platform/GlStateManager.java
index 5d9f43e5587373126ce0aee0ed4c5e02b974beba..57c73658f5c3db8a12280288cfceb7ff329bfc89 100644
--- a/src/main/java/com/mojang/blaze3d/platform/GlStateManager.java
+++ b/src/main/java/com/mojang/blaze3d/platform/GlStateManager.java
@@ -506,8 +506,10 @@ public class GlStateManager {
 
    public static void _activeTexture(int i) {
       RenderSystem.assertThread(RenderSystem::isOnRenderThread);
-      if (activeTexture != i - '闢�') {
-         activeTexture = i - '闢�';
+      // MagmaCube start - decompile error
+      if (activeTexture != i - '\u84c0') {
+         activeTexture = i - '\u84c0';
+         // MagmaCube end - decompile error
          glActiveTexture(i);
       }
 
@@ -588,7 +590,7 @@ public class GlStateManager {
    }
 
    public static int _getActiveTexture() {
-      return activeTexture + '闢�';
+      return activeTexture + '\u84c0'; // MagmaCube - decompile error
    }
 
    public static void _texImage2D(int i, int i2, int i3, int i4, int i5, int i6, int i7, int i8, @Nullable IntBuffer intBuffer) {
diff --git a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
index 2f4b3448da5060376e4590c46a9ce9830a000787..8480fe012013eb06c2c6b7ba15b0325954a8a558 100644
--- a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
+++ b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
@@ -198,7 +198,7 @@ public class InputConstants {
 
    public static boolean isRawMouseInputSupported() {
       try {
-         return GLFW_RAW_MOUSE_MOTION_SUPPORTED != null && GLFW_RAW_MOUSE_MOTION_SUPPORTED.invokeExact();
+         return GLFW_RAW_MOUSE_MOTION_SUPPORTED != null && (boolean) GLFW_RAW_MOUSE_MOTION_SUPPORTED.invokeExact(); // MagmaCube - decompile error
       } catch (Throwable var1) {
          throw new RuntimeException(var1);
       }
@@ -220,7 +220,7 @@ public class InputConstants {
       try {
          methodHandle = lookup.findStatic(GLFW.class, "glfwRawMouseMotionSupported", methodType);
          MethodHandle methodHandle2 = lookup.findStaticGetter(GLFW.class, "GLFW_RAW_MOUSE_MOTION", Integer.TYPE);
-         i = methodHandle2.invokeExact();
+         i = (int) methodHandle2.invokeExact(); // MagmaCube - decompile error
       } catch (NoSuchFieldException | NoSuchMethodException var5) {
       } catch (Throwable var6) {
          throw new RuntimeException(var6);
diff --git a/src/main/java/com/mojang/blaze3d/shaders/BlendMode.java b/src/main/java/com/mojang/blaze3d/shaders/BlendMode.java
index 47ede6ddd3ab577430ee98f4976b7f2cd9fce6ed..ef3fb05e427549ccdcb48445b23026215947b227 100644
--- a/src/main/java/com/mojang/blaze3d/shaders/BlendMode.java
+++ b/src/main/java/com/mojang/blaze3d/shaders/BlendMode.java
@@ -109,7 +109,7 @@ public class BlendMode {
       } else if ("min".equals(s2)) {
          return 32775;
       } else {
-         return "max".equals(s2) ? '閠�' : '閠�';
+         return "max".equals(s2) ? '\u8008' : '\u8006'; // MagmaCube - decompile error
       }
    }
 
diff --git a/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java b/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
index fa940282ef3397cb16222cbe3a744763c231176c..609c6d8eff0ea81ae986379e8d6babda458bb6d4 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
@@ -11,18 +11,20 @@ public class DefaultVertexFormat {
    public static final VertexFormatElement ELEMENT_NORMAL = new VertexFormatElement(0, VertexFormatElement.Type.BYTE, VertexFormatElement.Usage.NORMAL, 3);
    public static final VertexFormatElement ELEMENT_PADDING = new VertexFormatElement(0, VertexFormatElement.Type.BYTE, VertexFormatElement.Usage.PADDING, 1);
    public static final VertexFormatElement ELEMENT_UV = ELEMENT_UV0;
-   public static final VertexFormat BLIT_SCREEN = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV", ELEMENT_UV).put("Color", ELEMENT_COLOR).build());
-   public static final VertexFormat BLOCK = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-   public static final VertexFormat NEW_ENTITY = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV1", ELEMENT_UV1).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-   public static final VertexFormat PARTICLE = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
-   public static final VertexFormat POSITION = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).build());
-   public static final VertexFormat POSITION_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).build());
-   public static final VertexFormat POSITION_COLOR_NORMAL = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-   public static final VertexFormat POSITION_COLOR_LIGHTMAP = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
-   public static final VertexFormat POSITION_TEX = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).build());
-   public static final VertexFormat POSITION_COLOR_TEX = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).build());
-   public static final VertexFormat POSITION_TEX_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).build());
-   public static final VertexFormat POSITION_COLOR_TEX_LIGHTMAP = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).build());
-   public static final VertexFormat POSITION_TEX_LIGHTMAP_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Color", ELEMENT_COLOR).build());
-   public static final VertexFormat POSITION_TEX_COLOR_NORMAL = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+   // MagmaCube start - decompile error
+   public static final VertexFormat BLIT_SCREEN = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV", ELEMENT_UV).put("Color", ELEMENT_COLOR).build());
+   public static final VertexFormat BLOCK = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+   public static final VertexFormat NEW_ENTITY = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV1", ELEMENT_UV1).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+   public static final VertexFormat PARTICLE = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
+   public static final VertexFormat POSITION = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).build());
+   public static final VertexFormat POSITION_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).build());
+   public static final VertexFormat POSITION_COLOR_NORMAL = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+   public static final VertexFormat POSITION_COLOR_LIGHTMAP = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
+   public static final VertexFormat POSITION_TEX = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).build());
+   public static final VertexFormat POSITION_COLOR_TEX = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).build());
+   public static final VertexFormat POSITION_TEX_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).build());
+   public static final VertexFormat POSITION_COLOR_TEX_LIGHTMAP = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).build());
+   public static final VertexFormat POSITION_TEX_LIGHTMAP_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Color", ELEMENT_COLOR).build());
+   public static final VertexFormat POSITION_TEX_COLOR_NORMAL = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+   // MagmaCube end - decompile error
 }
\ No newline at end of file
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
index 7ca9bc35e2bfec4bf4581a445f0c8ed557b04c7f..213d5ba2f086561d1759f1038504c8fecf7123a1 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
@@ -75,7 +75,7 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
          boolean flag = i != this.serverData.activeSlot || this.serverData.worldType == RealmsServer.WorldType.MINIGAME;
          Button button;
          if (flag) {
-            button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.play"), (button) -> {
+            button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.play"), (buttonIn) -> {
                if (((RealmsWorldOptions)this.serverData.slots.get(i)).empty) {
                   RealmsResetWorldScreen realmsResetWorldScreen = new RealmsResetWorldScreen(this, this.serverData, new TranslatableComponent("mco.configure.world.switch.slot"), new TranslatableComponent("mco.configure.world.switch.slot.subtitle"), 10526880, CommonComponents.GUI_CANCEL, this::doSwitchOrReset, () -> {
                      this.minecraft.setScreen(this);
@@ -90,11 +90,11 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
 
             });
          } else {
-            button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.download"), (button) -> {
+            button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.download"), (buttonIn) -> {
                Component component = new TranslatableComponent("mco.configure.world.restore.download.question.line1");
                Component component2 = new TranslatableComponent("mco.configure.world.restore.download.question.line2");
-               this.minecraft.setScreen(new RealmsLongConfirmationScreen((flag) -> {
-                  if (flag) {
+               this.minecraft.setScreen(new RealmsLongConfirmationScreen((flagIn) -> {
+                  if (flagIn) {
                      this.downloadWorld(i);
                   } else {
                      this.minecraft.setScreen(this);
@@ -110,7 +110,7 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
          }
 
          this.addRenderableWidget(button);
-         this.addRenderableWidget(new Button(this.getFramePositionX(i), row(10), 80, 20, new TranslatableComponent("mco.brokenworld.reset"), (button) -> {
+         this.addRenderableWidget(new Button(this.getFramePositionX(i), row(10), 80, 20, new TranslatableComponent("mco.brokenworld.reset"), (buttonIn) -> {
             RealmsResetWorldScreen realmsResetWorldScreen = new RealmsResetWorldScreen(this, this.serverData, this::doSwitchOrReset, () -> {
                this.minecraft.setScreen(this);
                this.doSwitchOrReset();
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
index 9095d4d2ad04390ab0830c3fd084d786655d273b..37887fddf1727beb25076badc1108cbedd402747 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
@@ -189,40 +189,42 @@ public class RealmsSelectWorldTemplateScreen extends RealmsScreen {
    private void fetchTemplatesAsync(final WorldTemplatePaginatedList worldTemplatePaginatedList) {
       (new Thread("realms-template-fetcher") {
          public void run() {
-            WorldTemplatePaginatedList worldTemplatePaginatedList = worldTemplatePaginatedList;
-
-            Either<WorldTemplatePaginatedList, String> either;
-            for(RealmsClient realmsClient = RealmsClient.create(); worldTemplatePaginatedList != null; worldTemplatePaginatedList = (WorldTemplatePaginatedList)RealmsSelectWorldTemplateScreen.this.minecraft.submit(() -> {
-               if (either.right().isPresent()) {
-                  RealmsSelectWorldTemplateScreen.LOGGER.error("Couldn't fetch templates: {}", either.right().get());
-                  if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
-                     RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(I18n.get("mco.template.select.failure"));
-                  }
-
-                  return null;
-               } else {
-                  WorldTemplatePaginatedList worldTemplatePaginatedList = (WorldTemplatePaginatedList)either.left().get();
-
-                  for(WorldTemplate worldTemplate : worldTemplatePaginatedList.templates) {
-                     RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.addEntry(worldTemplate);
-                  }
-
-                  if (worldTemplatePaginatedList.templates.isEmpty()) {
+            // MagmaCube start - decompile error
+            WorldTemplatePaginatedList worldtemplatepaginatedlist = worldTemplatePaginatedList;
+
+            RealmsClient realmsclient = RealmsClient.create();
+            while (worldtemplatepaginatedlist != null) {
+               Either<WorldTemplatePaginatedList, String> either = RealmsSelectWorldTemplateScreen.this.fetchTemplates(worldtemplatepaginatedlist, realmsclient);
+               worldtemplatepaginatedlist = RealmsSelectWorldTemplateScreen.this.minecraft.submit(() -> {
+                  if (either.right().isPresent()) {
+                     RealmsSelectWorldTemplateScreen.LOGGER.error("Couldn't fetch templates: {}", either.right().get());
                      if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
-                        String s = I18n.get("mco.template.select.none", "%link");
-                        TextRenderingUtils.LineSegment lineSegment = TextRenderingUtils.LineSegment.link(I18n.get("mco.template.select.none.linkTitle"), "https://aka.ms/MinecraftRealmsContentCreator");
-                        RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(s, lineSegment);
+                        RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(I18n.get("mco.template.select.failure"));
                      }
 
                      return null;
                   } else {
-                     return worldTemplatePaginatedList;
+                     WorldTemplatePaginatedList worldtemplatepaginatedlist1 = either.left().get();
+
+                     for(WorldTemplate worldtemplate : worldtemplatepaginatedlist1.templates) {
+                        RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.addEntry(worldtemplate);
+                     }
+
+                     if (worldtemplatepaginatedlist1.templates.isEmpty()) {
+                        if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
+                           String s = I18n.get("mco.template.select.none", "%link");
+                           TextRenderingUtils.LineSegment textrenderingutils$linesegment = TextRenderingUtils.LineSegment.link(I18n.get("mco.template.select.none.linkTitle"), "https://aka.ms/MinecraftRealmsContentCreator");
+                           RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(s, textrenderingutils$linesegment);
+                        }
+
+                        return null;
+                     } else {
+                        return worldtemplatepaginatedlist1;
+                     }
                   }
-               }
-            }).join()) {
-               either = RealmsSelectWorldTemplateScreen.this.fetchTemplates(worldTemplatePaginatedList, realmsClient);
+               }).join();
+               // MagmaCube end - decompile error
             }
-
          }
       }).start();
    }
diff --git a/src/main/java/net/minecraft/ChatFormatting.java b/src/main/java/net/minecraft/ChatFormatting.java
index 972a8f608980d75d640e2dc1a1cfa0d61d4086f6..b3ae2018ecddab18a81addd895aec85a27384720 100644
--- a/src/main/java/net/minecraft/ChatFormatting.java
+++ b/src/main/java/net/minecraft/ChatFormatting.java
@@ -34,9 +34,9 @@ public enum ChatFormatting {
    ITALIC("ITALIC", 'o', true),
    RESET("RESET", 'r', -1, (Integer)null);
 
-   public static final char PREFIX_CODE = 'ﾂｧ';
+   public static final char PREFIX_CODE = '\u00a7';
    private static final Map<String, ChatFormatting> FORMATTING_BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap((chatFormatting) -> cleanName(chatFormatting.name), (chatFormatting) -> chatFormatting));
-   private static final Pattern STRIP_FORMATTING_PATTERN = Pattern.compile("(?i)ﾂｧ[0-9A-FK-OR]");
+   private static final Pattern STRIP_FORMATTING_PATTERN = Pattern.compile("(?i)\u00a7[0-9A-FK-OR]");
    private final String name;
    private final char code;
    private final boolean isFormat;
@@ -63,7 +63,7 @@ public enum ChatFormatting {
       this.isFormat = flag;
       this.id = i;
       this.color = integer;
-      this.toString = "ﾂｧ" + c;
+      this.toString = "\u00a7" + c;
    }
 
    public char getChar() {
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index d5a08cedc6b182ee368dfdadc7ab26a0bdc6128a..60398b5ec17f0e0c78a19900b0e3e8674f17a798 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -24,6 +24,7 @@ import java.nio.file.Path;
 import java.nio.file.spi.FileSystemProvider;
 import java.security.AccessController;
 import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 import java.time.Instant;
 import java.util.Arrays;
 import java.util.Iterator;
@@ -299,18 +300,18 @@ public class Util {
    }
 
    public static <K> Strategy<K> identityStrategy() {
-      return Util.IdentityStrategy.INSTANCE;
+      return (Strategy<K>) IdentityStrategy.INSTANCE;
    }
 
    public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<? extends V>> list) {
-      return (CompletableFuture)list.stream().reduce(CompletableFuture.completedFuture(Lists.newArrayList()), (completableFuture, completableFuture2) -> completableFuture2.thenCombine(completableFuture, (object, list) -> {
-            List<V> list2 = Lists.newArrayListWithCapacity(list.size() + 1);
-            list2.addAll(list);
+      return list.stream().reduce(CompletableFuture.completedFuture(Lists.newArrayList()), (completableFuture, completableFuture2) -> completableFuture2.thenCombine(completableFuture, (object, listx) -> {
+            List<V> list2 = Lists.newArrayListWithCapacity(listx.size() + 1);
+            list2.addAll(listx);
             list2.add(object);
             return list2;
-         }), (completableFuture, completableFuture2) -> completableFuture.thenCombine(completableFuture2, (list, list2) -> {
-            List<V> list3 = Lists.newArrayListWithCapacity(list.size() + list2.size());
-            list3.addAll(list);
+         }), (completableFuture, completableFuture2) -> completableFuture.thenCombine(completableFuture2, (listx, list2) -> {
+            List<V> list3 = Lists.newArrayListWithCapacity(listx.size() + list2.size());
+            list3.addAll(listx);
             list3.addAll(list2);
             return list3;
          }));
@@ -629,7 +630,7 @@ public class Util {
 
       public void openUrl(URL url) {
          try {
-            Process process = (Process)AccessController.doPrivileged(() -> Runtime.getRuntime().exec(this.getOpenUrlArguments(url)));
+            Process process = (Process)AccessController.doPrivileged((PrivilegedExceptionAction<Process>) () -> Runtime.getRuntime().exec(this.getOpenUrlArguments(url)));
 
             for(String s : IOUtils.readLines(process.getErrorStream())) {
                Util.LOGGER.error(s);
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java b/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java
index 3105ea934112b5e3bada0dc7bae0ddb9a1323fef..da2bfbe3830788c272b3c244e62c4fc537b52f44 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java
@@ -36,7 +36,7 @@ public abstract class EntityTypePredicate {
          String s = GsonHelper.convertToString(jsonElement, "type");
          if (s.startsWith("#")) {
             ResourceLocation resourceLocation = new ResourceLocation(s.substring(1));
-            return new EntityTypePredicate.TagPredicate(SerializationTags.getInstance().getTagOrThrow(Registry.ENTITY_TYPE_REGISTRY, resourceLocation, (resourceLocation) -> new JsonSyntaxException("Unknown entity tag '" + resourceLocation + "'")));
+            return new EntityTypePredicate.TagPredicate(SerializationTags.getInstance().getTagOrThrow(Registry.ENTITY_TYPE_REGISTRY, resourceLocation, (resourceLocationx) -> new JsonSyntaxException("Unknown entity tag '" + resourceLocationx + "'"))); // MagmaCube - decompile error
          } else {
             ResourceLocation resourceLocation2 = new ResourceLocation(s);
             EntityType<?> entityType = (EntityType)Registry.ENTITY_TYPE.getOptional(resourceLocation2).orElseThrow(() -> new JsonSyntaxException("Unknown entity type '" + resourceLocation2 + "', valid types are: " + COMMA_JOINER.join(Registry.ENTITY_TYPE.keySet())));
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java b/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
index 331641ad7295243adb3464bbd0da40fb93dcd23c..e1a305225602ca62abb560f7a4b84735a2807aea 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
@@ -209,11 +209,13 @@ public class PlayerPredicate {
          if (!this.stats.isEmpty()) {
             JsonArray jsonArray = new JsonArray();
             this.stats.forEach((stat, ints) -> {
-               JsonObject jsonObject = new JsonObject();
-               jsonObject.addProperty("type", Registry.STAT_TYPE.getKey(stat.getType()).toString());
-               jsonObject.addProperty("stat", getStatValueId(stat).toString());
-               jsonObject.add("value", ints.serializeToJson());
-               jsonArray.add(jsonObject);
+               // MagmaCube start - decompile error
+               JsonObject jsonObjectx = new JsonObject();
+               jsonObjectx.addProperty("type", Registry.STAT_TYPE.getKey(stat.getType()).toString());
+               jsonObjectx.addProperty("stat", getStatValueId(stat).toString());
+               jsonObjectx.add("value", ints.serializeToJson());
+               jsonArray.add(jsonObjectx);
+               // MagmaCube end - decompile error
             });
             jsonObject.add("stats", jsonArray);
          }
diff --git a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
index 3e02ef33f82f81129e3177c4717ab62c57bcc94a..9f04fc013f10c99bf2cfcf23d4b793948a188a51 100644
--- a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
@@ -137,7 +137,7 @@ public class StatePropertiesPredicate {
       protected <T extends Comparable<T>> boolean match(StateHolder<?, ?> stateHolder, Property<T> property) {
          T comparable = stateHolder.getValue(property);
          Optional<T> optional = property.getValue(this.value);
-         return optional.isPresent() && comparable.compareTo((Comparable)optional.get()) == 0;
+         return optional.isPresent() && comparable.compareTo(optional.get()) == 0;
       }
 
       public JsonElement toJson() {
@@ -190,14 +190,14 @@ public class StatePropertiesPredicate {
          T comparable = stateHolder.getValue(property);
          if (this.minValue != null) {
             Optional<T> optional = property.getValue(this.minValue);
-            if (!optional.isPresent() || comparable.compareTo((Comparable)optional.get()) < 0) {
+            if (!optional.isPresent() || comparable.compareTo(optional.get()) < 0) {
                return false;
             }
          }
 
          if (this.maxValue != null) {
             Optional<T> optional2 = property.getValue(this.maxValue);
-            if (!optional2.isPresent() || comparable.compareTo((Comparable)optional2.get()) > 0) {
+            if (!optional2.isPresent() || comparable.compareTo(optional2.get()) > 0) {
                return false;
             }
          }
diff --git a/src/main/java/net/minecraft/client/CycleOption.java b/src/main/java/net/minecraft/client/CycleOption.java
index 1557bd730c4f7b1ca5a0ab3770d61766639bc457..2895ce15725debc8e4164a620d496ee6752bd112 100644
--- a/src/main/java/net/minecraft/client/CycleOption.java
+++ b/src/main/java/net/minecraft/client/CycleOption.java
@@ -61,7 +61,7 @@ public class CycleOption<T> extends Option {
 
    public AbstractWidget createButton(Options options, int i, int i2, int i3) {
       CycleButton.TooltipSupplier<T> tooltipSupplier = (CycleButton.TooltipSupplier)this.tooltip.apply(Minecraft.getInstance());
-      return ((CycleButton.Builder)this.buttonSetup.get()).withTooltip(tooltipSupplier).withInitialValue((T)this.getter.apply(options)).create(i, i2, i3, 20, this.getCaption(), (cycleButton, object) -> {
+      return this.buttonSetup.get().withTooltip(tooltipSupplier).withInitialValue((T)this.getter.apply(options)).create(i, i2, i3, 20, this.getCaption(), (cycleButton, object) -> { // MagmaCube - decompile error
          this.setter.accept(options, this, object);
          options.save();
       });
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index 104fd5172f9243af1734ec765b6823e36b8f74a3..588e70f50737d384c3106baf8bc3036f88350d48 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -2202,9 +2202,9 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
       systemReport.setDetail("GL debug messages", (Supplier<String>)(() -> GlDebug.isDebugEnabled() ? String.join("\n", GlDebug.getLastOpenGlDebugMessages()) : "<disabled>"));
       systemReport.setDetail("Using VBOs", (Supplier<String>)(() -> "Yes"));
       systemReport.setDetail("Is Modded", (Supplier<String>)(() -> {
-         String s = ClientBrandRetriever.getClientModName();
-         if (!"vanilla".equals(s)) {
-            return "Definitely; Client brand changed to '" + s + "'";
+         String clientModName = ClientBrandRetriever.getClientModName();
+         if (!"vanilla".equals(clientModName)) {
+            return "Definitely; Client brand changed to '" + clientModName + "'";
          } else {
             return Minecraft.class.getSigners() == null ? "Very likely; Jar signature invalidated" : "Probably not. Jar signature remains and client brand is untouched.";
          }
@@ -2222,13 +2222,13 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
          systemReport.setDetail("Resource Packs", (Supplier<String>)(() -> {
             StringBuilder stringBuilder = new StringBuilder();
 
-            for(String s : options.resourcePacks) {
+            for(String resourcePack : options.resourcePacks) {
                if (stringBuilder.length() > 0) {
                   stringBuilder.append(", ");
                }
 
-               stringBuilder.append(s);
-               if (options.incompatibleResourcePacks.contains(s)) {
+               stringBuilder.append(resourcePack);
+               if (options.incompatibleResourcePacks.contains(resourcePack)) {
                   stringBuilder.append(" (incompatible)");
                }
             }
@@ -2250,7 +2250,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
    }
 
    public CompletableFuture<Void> delayTextureReload() {
-      return this.submit(this::reloadResourcePacks).thenCompose((completableFuture) -> completableFuture);
+      return this.submit((Supplier<CompletableFuture<Void>>) this::reloadResourcePacks).thenCompose((completableFuture) -> completableFuture);
    }
 
    public void populateSnooper(Snooper snooper) {
diff --git a/src/main/java/net/minecraft/client/Option.java b/src/main/java/net/minecraft/client/Option.java
index d34904dd4492f4747f53c151a89b4fd2e0004479..ffd59bd50226d7175b9c995cdb2eaaf9218b282b 100644
--- a/src/main/java/net/minecraft/client/Option.java
+++ b/src/main/java/net/minecraft/client/Option.java
@@ -155,7 +155,7 @@ public abstract class Option {
    private static final Component GRAPHICS_TOOLTIP_FAST = new TranslatableComponent("options.graphics.fast.tooltip");
    private static final Component GRAPHICS_TOOLTIP_FABULOUS = new TranslatableComponent("options.graphics.fabulous.tooltip", (new TranslatableComponent("options.graphics.fabulous")).withStyle(ChatFormatting.ITALIC));
    private static final Component GRAPHICS_TOOLTIP_FANCY = new TranslatableComponent("options.graphics.fancy.tooltip");
-   public static final CycleOption<GraphicsStatus> GRAPHICS = CycleOption.create("options.graphics", Arrays.asList(GraphicsStatus.values()), (List)Stream.of(GraphicsStatus.values()).filter((graphicsStatus) -> graphicsStatus != GraphicsStatus.FABULOUS).collect(Collectors.toList()), () -> Minecraft.getInstance().getGpuWarnlistManager().isSkippingFabulous(), (graphicsStatus) -> {
+   public static final CycleOption<GraphicsStatus> GRAPHICS = CycleOption.create("options.graphics", Arrays.asList(GraphicsStatus.values()), Stream.of(GraphicsStatus.values()).filter((graphicsStatus) -> graphicsStatus != GraphicsStatus.FABULOUS).collect(Collectors.toList()), () -> Minecraft.getInstance().getGpuWarnlistManager().isSkippingFabulous(), (graphicsStatus) -> {
       MutableComponent mutableComponent = new TranslatableComponent(graphicsStatus.getKey());
       return graphicsStatus == GraphicsStatus.FABULOUS ? mutableComponent.withStyle(ChatFormatting.ITALIC) : mutableComponent;
    }, (options) -> options.graphicsMode, (options, option, graphicsStatus) -> {
diff --git a/src/main/java/net/minecraft/client/Options.java b/src/main/java/net/minecraft/client/Options.java
index 74d2587524010477174b0ab257d62142c8d09bc2..ef3920890beed1a9ec1f9e96ec45e4c19bbe14fa 100644
--- a/src/main/java/net/minecraft/client/Options.java
+++ b/src/main/java/net/minecraft/client/Options.java
@@ -281,7 +281,7 @@ public class Options {
       }
 
       for(SoundSource soundSource : SoundSource.values()) {
-         this.sourceVolumes.computeFloat(soundSource, (soundSource, f) -> fieldAccess.process("soundCategory_" + soundSource.getName(), f != null ? f : 1.0F));
+         this.sourceVolumes.computeFloat(soundSource, (soundSourcex, f) -> fieldAccess.process("soundCategory_" + soundSourcex.getName(), f != null ? f : 1.0F)); // MagmaCube - decompile error
       }
 
       for(PlayerModelPart playerModelPart : PlayerModelPart.values()) {
@@ -309,7 +309,7 @@ public class Options {
                try {
                   Iterator<String> iterator = OPTION_SPLITTER.split(s).iterator();
                   compoundTag.putString((String)iterator.next(), (String)iterator.next());
-               } catch (Exception var3) {
+               } catch (Exception var4) { // MagmaCube - decompile error
                   LOGGER.warn("Skipping bad option: {}", s);
                }
 
@@ -670,7 +670,7 @@ public class Options {
    }
 
    public String dumpOptionsForReport() {
-      ImmutableList<Pair<String, String>> immutableList = ImmutableList.builder().add(Pair.of("ao", String.valueOf(this.ambientOcclusion))).add(Pair.of("biomeBlendRadius", String.valueOf(this.biomeBlendRadius))).add(Pair.of("enableVsync", String.valueOf(this.enableVsync))).add(Pair.of("entityDistanceScaling", String.valueOf(this.entityDistanceScaling))).add(Pair.of("entityShadows", String.valueOf(this.entityShadows))).add(Pair.of("forceUnicodeFont", String.valueOf(this.forceUnicodeFont))).add(Pair.of("fov", String.valueOf(this.fov))).add(Pair.of("fovEffectScale", String.valueOf(this.fovEffectScale))).add(Pair.of("fullscreen", String.valueOf(this.fullscreen))).add(Pair.of("fullscreenResolution", String.valueOf(this.fullscreenVideoModeString))).add(Pair.of("gamma", String.valueOf(this.gamma))).add(Pair.of("glDebugVerbosity", String.valueOf(this.glDebugVerbosity))).add(Pair.of("graphicsMode", String.valueOf(this.graphicsMode))).add(Pair.of("guiScale", String.valueOf(this.guiScale))).add(Pair.of("maxFps", String.valueOf(this.framerateLimit))).add(Pair.of("mipmapLevels", String.valueOf(this.mipmapLevels))).add(Pair.of("narrator", String.valueOf(this.narratorStatus))).add(Pair.of("overrideHeight", String.valueOf(this.overrideHeight))).add(Pair.of("overrideWidth", String.valueOf(this.overrideWidth))).add(Pair.of("particles", String.valueOf(this.particles))).add(Pair.of("reducedDebugInfo", String.valueOf(this.reducedDebugInfo))).add(Pair.of("renderClouds", String.valueOf(this.renderClouds))).add(Pair.of("renderDistance", String.valueOf(this.renderDistance))).add(Pair.of("resourcePacks", String.valueOf(this.resourcePacks))).add(Pair.of("screenEffectScale", String.valueOf(this.screenEffectScale))).add(Pair.of("syncChunkWrites", String.valueOf(this.syncWrites))).add(Pair.of("useNativeTransport", String.valueOf(this.useNativeTransport))).build();
+      ImmutableList<Pair<String, String>> immutableList = ImmutableList.<Pair<String, String>>builder().add(Pair.of("ao", String.valueOf(this.ambientOcclusion))).add(Pair.of("biomeBlendRadius", String.valueOf(this.biomeBlendRadius))).add(Pair.of("enableVsync", String.valueOf(this.enableVsync))).add(Pair.of("entityDistanceScaling", String.valueOf(this.entityDistanceScaling))).add(Pair.of("entityShadows", String.valueOf(this.entityShadows))).add(Pair.of("forceUnicodeFont", String.valueOf(this.forceUnicodeFont))).add(Pair.of("fov", String.valueOf(this.fov))).add(Pair.of("fovEffectScale", String.valueOf(this.fovEffectScale))).add(Pair.of("fullscreen", String.valueOf(this.fullscreen))).add(Pair.of("fullscreenResolution", String.valueOf(this.fullscreenVideoModeString))).add(Pair.of("gamma", String.valueOf(this.gamma))).add(Pair.of("glDebugVerbosity", String.valueOf(this.glDebugVerbosity))).add(Pair.of("graphicsMode", String.valueOf(this.graphicsMode))).add(Pair.of("guiScale", String.valueOf(this.guiScale))).add(Pair.of("maxFps", String.valueOf(this.framerateLimit))).add(Pair.of("mipmapLevels", String.valueOf(this.mipmapLevels))).add(Pair.of("narrator", String.valueOf(this.narratorStatus))).add(Pair.of("overrideHeight", String.valueOf(this.overrideHeight))).add(Pair.of("overrideWidth", String.valueOf(this.overrideWidth))).add(Pair.of("particles", String.valueOf(this.particles))).add(Pair.of("reducedDebugInfo", String.valueOf(this.reducedDebugInfo))).add(Pair.of("renderClouds", String.valueOf(this.renderClouds))).add(Pair.of("renderDistance", String.valueOf(this.renderDistance))).add(Pair.of("resourcePacks", String.valueOf(this.resourcePacks))).add(Pair.of("screenEffectScale", String.valueOf(this.screenEffectScale))).add(Pair.of("syncChunkWrites", String.valueOf(this.syncWrites))).add(Pair.of("useNativeTransport", String.valueOf(this.useNativeTransport))).build();
       return (String)immutableList.stream().map((pair) -> (String)pair.getFirst() + ": " + (String)pair.getSecond()).collect(Collectors.joining(System.lineSeparator()));
    }
 
diff --git a/src/main/java/net/minecraft/client/gui/Font.java b/src/main/java/net/minecraft/client/gui/Font.java
index 3e8508572a21f5f020e28edddc433535dea52adc..a33ab5bcd68fe24ad1afe24672fe6de4b1df1c74 100644
--- a/src/main/java/net/minecraft/client/gui/Font.java
+++ b/src/main/java/net/minecraft/client/gui/Font.java
@@ -130,14 +130,14 @@ public class Font {
                float[] floats = new float[]{f};
                int i7 = i5;
                int i8 = i6;
-               formattedCharSequence.accept((i4x, style, i5) -> {
+               formattedCharSequence.accept((i4x, style, i5x) -> {
                   boolean flag = style.isBold();
                   FontSet fontSet = this.getFontSet(style.getFont());
-                  GlyphInfo glyphInfo = fontSet.getGlyphInfo(i5);
+                  GlyphInfo glyphInfo = fontSet.getGlyphInfo(i5x);
                   stringRenderOutput.x = floats[0] + (float)i7 * glyphInfo.getShadowOffset();
                   stringRenderOutput.y = f2 + (float)i8 * glyphInfo.getShadowOffset();
                   floats[0] += glyphInfo.getAdvance(flag);
-                  return stringRenderOutput.accept(i4x, style.withColor(i4), i5);
+                  return stringRenderOutput.accept(i4x, style.withColor(i4), i5x);
                });
             }
          }
diff --git a/src/main/java/net/minecraft/client/gui/Gui.java b/src/main/java/net/minecraft/client/gui/Gui.java
index 0b7562a422b0328e5f3bca7c5f6d7ff79da54f5f..1807e02a54e0674b2937a40970a70b2214963d9c 100644
--- a/src/main/java/net/minecraft/client/gui/Gui.java
+++ b/src/main/java/net/minecraft/client/gui/Gui.java
@@ -1189,7 +1189,7 @@ public class Gui extends GuiComponent {
    public void handleChat(ChatType chatType, Component component, UUID uuid) {
       if (!this.minecraft.isBlocked(uuid)) {
          if (!this.minecraft.options.hideMatchedNames || !this.minecraft.isBlocked(this.guessChatUUID(component))) {
-            for(ChatListener chatListener : (List)this.chatListeners.get(chatType)) {
+            for(ChatListener chatListener : this.chatListeners.get(chatType)) { // MagmaCube - decompile error
                chatListener.handle(chatType, component, uuid);
             }
 
diff --git a/src/main/java/net/minecraft/client/gui/components/CycleButton.java b/src/main/java/net/minecraft/client/gui/components/CycleButton.java
index 040b3db9598dfe360e96a12b214f5521605ec2a2..79ec9f5962444100bcdeafd06cfb911a850f6b23 100644
--- a/src/main/java/net/minecraft/client/gui/components/CycleButton.java
+++ b/src/main/java/net/minecraft/client/gui/components/CycleButton.java
@@ -132,15 +132,15 @@ public class CycleButton<T> extends AbstractButton implements TooltipAccessor {
    }
 
    public static CycleButton.Builder<Boolean> booleanBuilder(Component component, Component component2) {
-      return (new CycleButton.Builder((flag) -> flag ? component : component2)).withValues(BOOLEAN_OPTIONS);
+      return (new CycleButton.Builder<Boolean>((flag) -> flag ? component : component2)).withValues(BOOLEAN_OPTIONS); // MagmaCube - decompile error
    }
 
    public static CycleButton.Builder<Boolean> onOffBuilder() {
-      return (new CycleButton.Builder((flag) -> flag ? CommonComponents.OPTION_ON : CommonComponents.OPTION_OFF)).withValues(BOOLEAN_OPTIONS);
+      return (new CycleButton.Builder<Boolean>((flag) -> flag ? CommonComponents.OPTION_ON : CommonComponents.OPTION_OFF)).withValues(BOOLEAN_OPTIONS); // MagmaCube - decompile error
    }
 
    public static CycleButton.Builder<Boolean> onOffBuilder(boolean flag) {
-      return onOffBuilder().withInitialValue((T)flag);
+      return onOffBuilder().withInitialValue(flag); // MagmaCube - decompile error
    }
 
    public static class Builder<T> {
diff --git a/src/main/java/net/minecraft/client/gui/font/FontManager.java b/src/main/java/net/minecraft/client/gui/font/FontManager.java
index c3f6a256e186ba10939749dfe64010be59209cb4..197724b6fbff00a8e892b4fff643c9d73787d7d1 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontManager.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontManager.java
@@ -18,6 +18,7 @@ import java.io.Reader;
 import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Map;
+import java.util.function.IntConsumer; // MagmaCube
 import net.minecraft.Util;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.font.providers.GlyphProviderBuilderType;
@@ -129,7 +130,7 @@ public class FontManager implements AutoCloseable {
                intSet.addAll(glyphProvider2.getSupportedGlyphs());
             }
 
-            intSet.forEach((ix) -> {
+            intSet.forEach((IntConsumer) (ix) -> { // MagmaCube - decompile error
                if (ix != 32) {
                   for(GlyphProvider glyphProvider : Lists.reverse(list)) {
                      if (glyphProvider.getGlyph(ix) != null) {
diff --git a/src/main/java/net/minecraft/client/gui/font/FontSet.java b/src/main/java/net/minecraft/client/gui/font/FontSet.java
index 8183d90d5733a150fe216e246ad97f6d08221c69..538de0a9e06413228f4c8b6a71452a52d1f42661 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontSet.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontSet.java
@@ -14,6 +14,7 @@ import it.unimi.dsi.fastutil.ints.IntSet;
 import java.util.List;
 import java.util.Random;
 import java.util.Set;
+import java.util.function.IntConsumer; // MagmaCube
 import net.minecraft.client.gui.font.glyphs.BakedGlyph;
 import net.minecraft.client.gui.font.glyphs.EmptyGlyph;
 import net.minecraft.client.gui.font.glyphs.MissingGlyph;
@@ -56,7 +57,7 @@ public class FontSet implements AutoCloseable {
       }
 
       Set<GlyphProvider> set = Sets.newHashSet();
-      intSet.forEach((i) -> {
+      intSet.forEach((IntConsumer) (i) -> { // MagmaCube - decompile error
          for(GlyphProvider glyphProvider : list) {
             GlyphInfo glyphInfo = (GlyphInfo)(i == 32 ? SPACE_INFO : glyphProvider.getGlyph(i));
             if (glyphInfo != null) {
diff --git a/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java b/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
index 232d9360753f50d3a5e11ad21036b0e19418bf30..3b90429656ad626a601fbbc17e1b050637d35454 100644
--- a/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
+++ b/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
@@ -9,7 +9,7 @@ import net.minecraft.util.Unit;
 public class NarrationThunk<T> {
    private final T contents;
    private final BiConsumer<Consumer<String>, T> converter;
-   public static final NarrationThunk<?> EMPTY = new NarrationThunk((T)Unit.INSTANCE, (consumer, unit) -> {
+   public static final NarrationThunk<?> EMPTY = new NarrationThunk<>(Unit.INSTANCE, (consumer, unit) -> {
    });
 
    private NarrationThunk(T object, BiConsumer<Consumer<String>, T> biConsumer) {
@@ -17,16 +17,16 @@ public class NarrationThunk<T> {
       this.converter = biConsumer;
    }
 
-   public static NarrationThunk<?> from(String s) {
-      return new NarrationThunk((T)s, Consumer::accept);
+   public static NarrationThunk<String> from(String s) {
+      return new NarrationThunk<>(s, Consumer::accept);
    }
 
-   public static NarrationThunk<?> from(Component component) {
+   public static NarrationThunk<Component> from(Component component) {
       return new NarrationThunk<>(component, (consumer, componentx) -> consumer.accept(componentx.getContents()));
    }
 
-   public static NarrationThunk<?> from(List<Component> list) {
-      return new NarrationThunk((T)list, (consumer, list2) -> list.stream().map(Component::getString).forEach(consumer));
+   public static NarrationThunk<List<Component>> from(List<Component> list) {
+      return new NarrationThunk<>(list, (consumer, list2) -> list.stream().map(Component::getString).forEach(consumer));
    }
 
    public void getText(Consumer<String> consumer) {
diff --git a/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java b/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
index cce329a0bb87fa7d9923bee85fadd031bd333e96..ca11622a30ec55aacbf1c89fc8d309af1cd82a01 100644
--- a/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
+++ b/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
@@ -7,7 +7,7 @@ import java.util.function.Consumer;
 
 public class ScreenNarrationCollector {
    int generation;
-   final Map<ScreenNarrationCollector.EntryKey, ScreenNarrationCollector.NarrationEntry> entries = Maps.newTreeMap(Comparator.comparing((entryKey) -> entryKey.type).thenComparing((entryKey) -> entryKey.depth));
+   final Map<ScreenNarrationCollector.EntryKey, ScreenNarrationCollector.NarrationEntry> entries = Maps.newTreeMap(Comparator.<EntryKey, NarratedElementType>comparing((entryKey) -> entryKey.type).thenComparing((entryKey) -> entryKey.depth));
 
    public void update(Consumer<NarrationElementOutput> consumer) {
       ++this.generation;
diff --git a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
index 9a3f699dcf545430ebb44bc34b76e2a4cc6d6a54..2889556f90e645308c622fa89cca843224a9a6d7 100644
--- a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
@@ -431,11 +431,11 @@ public class StatsScreen extends Screen implements StatsUpdateListener {
                i = 0;
                i2 = 0;
             } else if (ItemStatisticsList.this.blockColumns.contains(ItemStatisticsList.this.sortColumn)) {
-               StatType<Block> statType = ItemStatisticsList.this.sortColumn;
+               StatType<Block> statType = (StatType<Block>) ItemStatisticsList.this.sortColumn;
                i = item instanceof BlockItem ? StatsScreen.this.stats.getValue(statType, ((BlockItem)item).getBlock()) : -1;
                i2 = item2 instanceof BlockItem ? StatsScreen.this.stats.getValue(statType, ((BlockItem)item2).getBlock()) : -1;
             } else {
-               StatType<Item> statType2 = ItemStatisticsList.this.sortColumn;
+               StatType<Item> statType2 = (StatType<Item>) ItemStatisticsList.this.sortColumn;
                i = StatsScreen.this.stats.getValue(statType2, item);
                i2 = StatsScreen.this.stats.getValue(statType2, item2);
             }
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
index 3f0322c44868847b592d765e086098f7377c69da..5c857648f04cb6b46f57c9f581f6089e84f2394c 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
@@ -31,7 +31,7 @@ public class CommandBlockEditScreen extends AbstractCommandBlockEditScreen {
 
    protected void init() {
       super.init();
-      this.modeButton = this.addRenderableWidget(CycleButton.builder((mode) -> {
+      this.modeButton = this.addRenderableWidget(CycleButton.<CommandBlockEntity.Mode>builder((mode) -> {
          switch(mode) {
          case SEQUENCE:
             return new TranslatableComponent("advMode.mode.sequence");
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
index 986e58382c9829029726c4b1ca39c5ff803dd929..f304c8a815204373d112288be1026798f709413b 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
@@ -125,7 +125,7 @@ public class StructureBlockEditScreen extends Screen {
          }
 
       }));
-      this.addRenderableWidget(CycleButton.builder((structureMode) -> new TranslatableComponent("structure_block.mode." + structureMode.getSerializedName())).withValues(DEFAULT_MODES, ALL_MODES).displayOnlyValue().withInitialValue(this.initialMode).create(this.width / 2 - 4 - 150, 185, 50, 20, new TextComponent("MODE"), (cycleButton, structureMode) -> {
+      this.addRenderableWidget(CycleButton.<StructureMode>builder((structureMode) -> new TranslatableComponent("structure_block.mode." + structureMode.getSerializedName())).withValues(DEFAULT_MODES, ALL_MODES).displayOnlyValue().withInitialValue(this.initialMode).create(this.width / 2 - 4 - 150, 185, 50, 20, new TextComponent("MODE"), (cycleButton, structureMode) -> {
          this.structure.setMode(structureMode);
          this.updateMode(structureMode);
       }));
diff --git a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
index d49e6995dbce5290dfb8968a0bf320946fbf966f..a6f41f96fe0e408a4b3ecc31851da8767e36fdf9 100644
--- a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
@@ -219,8 +219,8 @@ public class PackSelectionScreen extends Screen {
                label86: {
                   try {
                      if (inputStream != null) {
-                        String s = pack.getId();
-                        ResourceLocation resourceLocation = new ResourceLocation("minecraft", "pack/" + Util.sanitizeName(s, ResourceLocation::validPathChar) + "/" + Hashing.sha1().hashUnencodedChars(s) + "/icon");
+                        String packId = pack.getId();
+                        ResourceLocation resourceLocation = new ResourceLocation("minecraft", "pack/" + Util.sanitizeName(packId, ResourceLocation::validPathChar) + "/" + Hashing.sha1().hashUnencodedChars(packId) + "/icon");
                         NativeImage nativeImage = NativeImage.read(inputStream);
                         textureManager.register(resourceLocation, new DynamicTexture(nativeImage));
                         var8 = resourceLocation;
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
index f80c6fca9c87344ee15ac13bbb7fd9d6c6f0c85f..32a754b9e09d8ef85b5052f8a6ba4f7576bb62ac 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
@@ -414,8 +414,10 @@ public class CreateWorldScreen extends Screen {
                stream.sorted(Comparator.reverseOrder()).forEach((path) -> {
                   try {
                      Files.delete(path);
-                  } catch (IOException var2) {
-                     LOGGER.warn("Failed to remove temporary file {}", path, var2);
+                     // MagmaCube start - decompile error
+                  } catch (IOException ex) {
+                     LOGGER.warn("Failed to remove temporary file {}", path, ex);
+                     // MagmaCube end - decompile error
                   }
 
                });
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
index 965dafd8237c7785000e0f918c0dcd329f463434..70ba5f26f291385ed4c9944c7eb0387709c92285 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
@@ -234,7 +234,7 @@ public class EditGameRulesScreen extends Screen {
                List<FormattedCharSequence> list;
                String s3;
                if (I18n.exists(s2)) {
-                  Builder<FormattedCharSequence> builder = ImmutableList.builder().add(component2.getVisualOrderText());
+                  Builder<FormattedCharSequence> builder = ImmutableList.<FormattedCharSequence>builder().add(component2.getVisualOrderText());
                   Component component4 = new TranslatableComponent(s2);
                   EditGameRulesScreen.this.font.split(component4, 150).forEach(builder::add);
                   list = builder.add(component3.getVisualOrderText()).build();
@@ -244,12 +244,12 @@ public class EditGameRulesScreen extends Screen {
                   s3 = component3.getString();
                }
 
-               ((Map)map.computeIfAbsent(key.getCategory(), (category) -> Maps.newHashMap())).put(key, entryFactory.create(component, list, s3, value));
+               map.computeIfAbsent(key.getCategory(), (category) -> Maps.newHashMap()).put(key, entryFactory.create(component, list, s3, value));
             }
          });
          map.entrySet().stream().sorted(java.util.Map.Entry.comparingByKey()).forEach((entry) -> {
             this.addEntry(EditGameRulesScreen.this.new CategoryRuleEntry((new TranslatableComponent(((GameRules.Category)entry.getKey()).getDescriptionId())).withStyle(new ChatFormatting[]{ChatFormatting.BOLD, ChatFormatting.YELLOW})));
-            ((Map)entry.getValue()).entrySet().stream().sorted(java.util.Map.Entry.comparingByKey(Comparator.comparing(GameRules.Key::getId))).forEach((entryx) -> this.addEntry((EditGameRulesScreen.RuleEntry)entryx.getValue()));
+            entry.getValue().entrySet().stream().sorted(java.util.Map.Entry.comparingByKey(Comparator.comparing(GameRules.Key::getId))).forEach((entryx) -> this.addEntry((EditGameRulesScreen.RuleEntry)entryx.getValue()));
          });
       }
 
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
index 485b6634a2b5bd76c6066be713ba0c93ddf1dc73..9d3e5dd6a63a6d571c2c7f751102ff1991e34f7e 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldGenSettingsComponent.java
@@ -91,7 +91,7 @@ public class WorldGenSettingsComponent implements Widget {
       int i2 = this.width / 2 + 5;
       this.featuresButton = createWorldScreen.addRenderableWidget(CycleButton.onOffBuilder(this.settings.generateFeatures()).withCustomNarration((cycleButton) -> CommonComponents.joinForNarration(cycleButton.createDefaultNarrationMessage(), new TranslatableComponent("selectWorld.mapFeatures.info"))).create(i, 100, 150, 20, new TranslatableComponent("selectWorld.mapFeatures"), (cycleButton, flag) -> this.settings = this.settings.withFeaturesToggled()));
       this.featuresButton.visible = false;
-      this.typeButton = createWorldScreen.addRenderableWidget(CycleButton.<WorldPreset>builder(WorldPreset::description).withValues((List)WorldPreset.PRESETS.stream().filter(WorldPreset::isVisibleByDefault).collect(Collectors.toList()), WorldPreset.PRESETS).withCustomNarration((cycleButton) -> cycleButton.getValue() == WorldPreset.AMPLIFIED ? CommonComponents.joinForNarration(cycleButton.createDefaultNarrationMessage(), AMPLIFIED_HELP_TEXT) : cycleButton.createDefaultNarrationMessage()).create(i2, 100, 150, 20, new TranslatableComponent("selectWorld.mapType"), (cycleButton, worldPreset) -> {
+      this.typeButton = createWorldScreen.addRenderableWidget(CycleButton.<WorldPreset>builder(WorldPreset::description).withValues(WorldPreset.PRESETS.stream().filter(WorldPreset::isVisibleByDefault).collect(Collectors.toList()), WorldPreset.PRESETS).withCustomNarration((cycleButton) -> cycleButton.getValue() == WorldPreset.AMPLIFIED ? CommonComponents.joinForNarration(cycleButton.createDefaultNarrationMessage(), AMPLIFIED_HELP_TEXT) : cycleButton.createDefaultNarrationMessage()).create(i2, 100, 150, 20, new TranslatableComponent("selectWorld.mapType"), (cycleButton, worldPreset) -> {
          this.preset = Optional.of(worldPreset);
          this.settings = worldPreset.create(this.registryHolder, this.settings.seed(), this.settings.generateFeatures(), this.settings.generateBonusChest());
          createWorldScreen.refreshWorldGenSettingsVisibility();
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
index c912fd0d7ee9b1d8c7a8a7b0b319d4994d959ccc..93439baf1c2cab15fdb1b870affe1f4a4581a540 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
@@ -275,10 +275,10 @@ public class WorldSelectionList extends ObjectSelectionList<WorldSelectionList.W
                Component component = new TranslatableComponent(s2, this.summary.getWorldVersionName(), SharedConstants.getCurrentVersion().getName());
                this.minecraft.setScreen(new BackupConfirmScreen(this.screen, (flag, flag2) -> {
                   if (flag) {
-                     String s = this.summary.getLevelId();
+                     String levelId = this.summary.getLevelId();
 
                      try {
-                        LevelStorageSource.LevelStorageAccess levelStorageAccess = this.minecraft.getLevelSource().createAccess(s);
+                        LevelStorageSource.LevelStorageAccess levelStorageAccess = this.minecraft.getLevelSource().createAccess(levelId);
 
                         try {
                            EditWorldScreen.makeBackupAndShowToast(levelStorageAccess);
@@ -298,8 +298,8 @@ public class WorldSelectionList extends ObjectSelectionList<WorldSelectionList.W
                            levelStorageAccess.close();
                         }
                      } catch (IOException var9) {
-                        SystemToast.onWorldAccessFailure(this.minecraft, s);
-                        WorldSelectionList.LOGGER.error("Failed to backup level {}", s, var9);
+                        SystemToast.onWorldAccessFailure(this.minecraft, levelId);
+                        WorldSelectionList.LOGGER.error("Failed to backup level {}", levelId, var9);
                      }
                   }
 
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index 673819ba6cb55cc0459067ac952809adad397f33..cc2b6bc04414f2193d759952ff19fbbd03b4a8f0 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -1454,11 +1454,13 @@ public class ClientPacketListener implements ClientGamePacketListener {
             } else {
                this.minecraft.execute(() -> this.minecraft.setScreen(new ConfirmScreen((flag2) -> {
                      this.minecraft.setScreen((Screen)null);
-                     ServerData serverData = this.minecraft.getCurrentServer();
+                     ServerData serverDatax = this.minecraft.getCurrentServer(); // MagmaCube - decompile error
                      if (flag2) {
-                        if (serverData != null) {
-                           serverData.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
+                        // MagmaCube start - decompile error
+                        if (serverDatax != null) {
+                           serverDatax.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
                         }
+                        // MagmaCube end - decompile error
 
                         this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
                         this.downloadCallback(this.minecraft.getClientPackSource().downloadAndSelectResourcePack(s, s2, true));
@@ -1466,14 +1468,18 @@ public class ClientPacketListener implements ClientGamePacketListener {
                         this.send(ServerboundResourcePackPacket.Action.DECLINED);
                         if (flag) {
                            this.connection.disconnect(new TranslatableComponent("multiplayer.requiredTexturePrompt.disconnect"));
-                        } else if (serverData != null) {
-                           serverData.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
+                           // MagmaCube start - decompile error
+                        } else if (serverDatax != null) {
+                           serverDatax.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
+                           // MagmaCube end - decompile error
                         }
                      }
 
-                     if (serverData != null) {
-                        ServerList.saveSingleServer(serverData);
+                     // MagmaCube start - decompile error
+                     if (serverDatax != null) {
+                        ServerList.saveSingleServer(serverDatax);
                      }
+                     // MagmaCube end - decompile error
 
                   }, flag ? new TranslatableComponent("multiplayer.requiredTexturePrompt.line1") : new TranslatableComponent("multiplayer.texturePrompt.line1"), preparePackPrompt((Component)(flag ? (new TranslatableComponent("multiplayer.requiredTexturePrompt.line2")).withStyle(new ChatFormatting[]{ChatFormatting.YELLOW, ChatFormatting.BOLD}) : new TranslatableComponent("multiplayer.texturePrompt.line2")), clientboundResourcePackPacket.getPrompt()), flag ? CommonComponents.GUI_PROCEED : CommonComponents.GUI_YES, (Component)(flag ? new TranslatableComponent("menu.disconnect") : CommonComponents.GUI_NO))));
             }
diff --git a/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java b/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
index 607e5a5a3e63335d8e3a43962166b036753a6208..4aefd6a09cda6da701180a225c2241aadbb70608 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
@@ -212,7 +212,7 @@ public class ServerStatusPinger {
                   if (s == 255) {
                      String s2 = new String(byteBuf.readBytes(byteBuf.readShort() * 2).array(), StandardCharsets.UTF_16BE);
                      String[] strings = (String[])Iterables.toArray(ServerStatusPinger.SPLITTER.split(s2), String.class);
-                     if ("ﾂｧ1".equals(strings[0])) {
+                     if ("\u00a71".equals(strings[0])) {
                         int i = Mth.getInt(strings[1], 0);
                         String s3 = strings[2];
                         String s4 = strings[3];
diff --git a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
index 9695d8c5a50ad1ff028d5ce3346c53f083e27290..8f4a3327ce0e953dd5666c1fc781b9071f71924c 100644
--- a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
@@ -92,7 +92,7 @@ public class BlockEntityWithoutLevelRenderer implements ResourceManagerReloadLis
                } else if (compoundTag.contains("SkullOwner", 8) && !StringUtils.isBlank(compoundTag.getString("SkullOwner"))) {
                   gameProfile = new GameProfile((UUID)null, compoundTag.getString("SkullOwner"));
                   compoundTag.remove("SkullOwner");
-                  SkullBlockEntity.updateGameprofile(gameProfile, (gameProfile) -> compoundTag.put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), gameProfile)));
+                  SkullBlockEntity.updateGameprofile(gameProfile, (gameProfileIn) -> compoundTag.put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), gameProfileIn)));
                }
             }
 
diff --git a/src/main/java/net/minecraft/client/renderer/EffectInstance.java b/src/main/java/net/minecraft/client/renderer/EffectInstance.java
index ec59f878b6c155bc538b264f331766a09ec51d68..aa0639bce84edb67426aefea15fb348e34ccb726 100644
--- a/src/main/java/net/minecraft/client/renderer/EffectInstance.java
+++ b/src/main/java/net/minecraft/client/renderer/EffectInstance.java
@@ -248,7 +248,7 @@ public class EffectInstance implements Effect, AutoCloseable {
 
       for(int i = 0; i < this.samplerLocations.size(); ++i) {
          if (this.samplerMap.get(this.samplerNames.get(i)) != null) {
-            GlStateManager._activeTexture('闢�' + i);
+            GlStateManager._activeTexture('\u84c0' + i); // MagmaCube - decompile error
             GlStateManager._disableTexture();
             GlStateManager._bindTexture(0);
          }
@@ -270,7 +270,7 @@ public class EffectInstance implements Effect, AutoCloseable {
          String s = (String)this.samplerNames.get(i);
          IntSupplier intSupplier = (IntSupplier)this.samplerMap.get(s);
          if (intSupplier != null) {
-            RenderSystem.activeTexture('闢�' + i);
+            RenderSystem.activeTexture('\u84c0' + i); // MagmaCube - decompile error
             RenderSystem.enableTexture();
             int i2 = intSupplier.getAsInt();
             if (i2 != -1) {
diff --git a/src/main/java/net/minecraft/client/renderer/GameRenderer.java b/src/main/java/net/minecraft/client/renderer/GameRenderer.java
index 6c952888183c38d8eaf668c564e65b81717ffbb8..52351fe99154b0ffb458c5424483a1f04bdb2f2e 100644
--- a/src/main/java/net/minecraft/client/renderer/GameRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/GameRenderer.java
@@ -373,60 +373,60 @@ public class GameRenderer implements ResourceManagerReloadListener, AutoCloseabl
       List<Pair<ShaderInstance, Consumer<ShaderInstance>>> list2 = Lists.newArrayListWithCapacity(this.shaders.size());
 
       try {
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "block", DefaultVertexFormat.BLOCK), (Consumer)(shaderInstance) -> blockShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "new_entity", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> newEntityShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "particle", DefaultVertexFormat.PARTICLE), (Consumer)(shaderInstance) -> particleShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "position", DefaultVertexFormat.POSITION), (Consumer)(shaderInstance) -> positionShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_color", DefaultVertexFormat.POSITION_COLOR), (Consumer)(shaderInstance) -> positionColorShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_color_lightmap", DefaultVertexFormat.POSITION_COLOR_LIGHTMAP), (Consumer)(shaderInstance) -> positionColorLightmapShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_color_tex", DefaultVertexFormat.POSITION_COLOR_TEX), (Consumer)(shaderInstance) -> positionColorTexShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_color_tex_lightmap", DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), (Consumer)(shaderInstance) -> positionColorTexLightmapShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_tex", DefaultVertexFormat.POSITION_TEX), (Consumer)(shaderInstance) -> positionTexShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_tex_color", DefaultVertexFormat.POSITION_TEX_COLOR), (Consumer)(shaderInstance) -> positionTexColorShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_tex_color_normal", DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL), (Consumer)(shaderInstance) -> positionTexColorNormalShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_tex_lightmap_color", DefaultVertexFormat.POSITION_TEX_LIGHTMAP_COLOR), (Consumer)(shaderInstance) -> positionTexLightmapColorShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_solid", DefaultVertexFormat.BLOCK), (Consumer)(shaderInstance) -> rendertypeSolidShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_cutout_mipped", DefaultVertexFormat.BLOCK), (Consumer)(shaderInstance) -> rendertypeCutoutMippedShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_cutout", DefaultVertexFormat.BLOCK), (Consumer)(shaderInstance) -> rendertypeCutoutShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_translucent", DefaultVertexFormat.BLOCK), (Consumer)(shaderInstance) -> rendertypeTranslucentShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_translucent_moving_block", DefaultVertexFormat.BLOCK), (Consumer)(shaderInstance) -> rendertypeTranslucentMovingBlockShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_translucent_no_crumbling", DefaultVertexFormat.BLOCK), (Consumer)(shaderInstance) -> rendertypeTranslucentNoCrumblingShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_armor_cutout_no_cull", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> rendertypeArmorCutoutNoCullShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_solid", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> rendertypeEntitySolidShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_cutout", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> rendertypeEntityCutoutShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_cutout_no_cull", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> rendertypeEntityCutoutNoCullShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_cutout_no_cull_z_offset", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> rendertypeEntityCutoutNoCullZOffsetShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_item_entity_translucent_cull", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> rendertypeItemEntityTranslucentCullShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_translucent_cull", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> rendertypeEntityTranslucentCullShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_translucent", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> rendertypeEntityTranslucentShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_smooth_cutout", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> rendertypeEntitySmoothCutoutShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_beacon_beam", DefaultVertexFormat.BLOCK), (Consumer)(shaderInstance) -> rendertypeBeaconBeamShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_decal", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> rendertypeEntityDecalShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_no_outline", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> rendertypeEntityNoOutlineShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_shadow", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> rendertypeEntityShadowShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_alpha", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> rendertypeEntityAlphaShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_eyes", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> rendertypeEyesShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_energy_swirl", DefaultVertexFormat.NEW_ENTITY), (Consumer)(shaderInstance) -> rendertypeEnergySwirlShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_leash", DefaultVertexFormat.POSITION_COLOR_LIGHTMAP), (Consumer)(shaderInstance) -> rendertypeLeashShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_water_mask", DefaultVertexFormat.POSITION), (Consumer)(shaderInstance) -> rendertypeWaterMaskShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_outline", DefaultVertexFormat.POSITION_COLOR_TEX), (Consumer)(shaderInstance) -> rendertypeOutlineShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_armor_glint", DefaultVertexFormat.POSITION_TEX), (Consumer)(shaderInstance) -> rendertypeArmorGlintShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_armor_entity_glint", DefaultVertexFormat.POSITION_TEX), (Consumer)(shaderInstance) -> rendertypeArmorEntityGlintShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_glint_translucent", DefaultVertexFormat.POSITION_TEX), (Consumer)(shaderInstance) -> rendertypeGlintTranslucentShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_glint", DefaultVertexFormat.POSITION_TEX), (Consumer)(shaderInstance) -> rendertypeGlintShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_glint_direct", DefaultVertexFormat.POSITION_TEX), (Consumer)(shaderInstance) -> rendertypeGlintDirectShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_glint", DefaultVertexFormat.POSITION_TEX), (Consumer)(shaderInstance) -> rendertypeEntityGlintShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_glint_direct", DefaultVertexFormat.POSITION_TEX), (Consumer)(shaderInstance) -> rendertypeEntityGlintDirectShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_text", DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), (Consumer)(shaderInstance) -> rendertypeTextShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_text_intensity", DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), (Consumer)(shaderInstance) -> rendertypeTextIntensityShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_text_see_through", DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), (Consumer)(shaderInstance) -> rendertypeTextSeeThroughShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_text_intensity_see_through", DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), (Consumer)(shaderInstance) -> rendertypeTextIntensitySeeThroughShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_lightning", DefaultVertexFormat.POSITION_COLOR), (Consumer)(shaderInstance) -> rendertypeLightningShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_tripwire", DefaultVertexFormat.BLOCK), (Consumer)(shaderInstance) -> rendertypeTripwireShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_end_portal", DefaultVertexFormat.POSITION), (Consumer)(shaderInstance) -> rendertypeEndPortalShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_end_gateway", DefaultVertexFormat.POSITION), (Consumer)(shaderInstance) -> rendertypeEndGatewayShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_lines", DefaultVertexFormat.POSITION_COLOR_NORMAL), (Consumer)(shaderInstance) -> rendertypeLinesShader = shaderInstance));
-         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_crumbling", DefaultVertexFormat.BLOCK), (Consumer)(shaderInstance) -> rendertypeCrumblingShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "block", DefaultVertexFormat.BLOCK), (shaderInstance) -> blockShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "new_entity", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> newEntityShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "particle", DefaultVertexFormat.PARTICLE), (shaderInstance) -> particleShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "position", DefaultVertexFormat.POSITION), (shaderInstance) -> positionShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_color", DefaultVertexFormat.POSITION_COLOR), (shaderInstance) -> positionColorShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_color_lightmap", DefaultVertexFormat.POSITION_COLOR_LIGHTMAP), (shaderInstance) -> positionColorLightmapShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_color_tex", DefaultVertexFormat.POSITION_COLOR_TEX), (shaderInstance) -> positionColorTexShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_color_tex_lightmap", DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), (shaderInstance) -> positionColorTexLightmapShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_tex", DefaultVertexFormat.POSITION_TEX), (shaderInstance) -> positionTexShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_tex_color", DefaultVertexFormat.POSITION_TEX_COLOR), (shaderInstance) -> positionTexColorShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_tex_color_normal", DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL), (shaderInstance) -> positionTexColorNormalShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "position_tex_lightmap_color", DefaultVertexFormat.POSITION_TEX_LIGHTMAP_COLOR), (shaderInstance) -> positionTexLightmapColorShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_solid", DefaultVertexFormat.BLOCK), (shaderInstance) -> rendertypeSolidShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_cutout_mipped", DefaultVertexFormat.BLOCK), (shaderInstance) -> rendertypeCutoutMippedShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_cutout", DefaultVertexFormat.BLOCK), (shaderInstance) -> rendertypeCutoutShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_translucent", DefaultVertexFormat.BLOCK), (shaderInstance) -> rendertypeTranslucentShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_translucent_moving_block", DefaultVertexFormat.BLOCK), (shaderInstance) -> rendertypeTranslucentMovingBlockShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_translucent_no_crumbling", DefaultVertexFormat.BLOCK), (shaderInstance) -> rendertypeTranslucentNoCrumblingShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_armor_cutout_no_cull", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> rendertypeArmorCutoutNoCullShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_solid", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> rendertypeEntitySolidShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_cutout", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> rendertypeEntityCutoutShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_cutout_no_cull", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> rendertypeEntityCutoutNoCullShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_cutout_no_cull_z_offset", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> rendertypeEntityCutoutNoCullZOffsetShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_item_entity_translucent_cull", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> rendertypeItemEntityTranslucentCullShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_translucent_cull", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> rendertypeEntityTranslucentCullShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_translucent", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> rendertypeEntityTranslucentShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_smooth_cutout", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> rendertypeEntitySmoothCutoutShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_beacon_beam", DefaultVertexFormat.BLOCK), (shaderInstance) -> rendertypeBeaconBeamShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_decal", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> rendertypeEntityDecalShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_no_outline", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> rendertypeEntityNoOutlineShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_shadow", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> rendertypeEntityShadowShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_alpha", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> rendertypeEntityAlphaShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_eyes", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> rendertypeEyesShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_energy_swirl", DefaultVertexFormat.NEW_ENTITY), (shaderInstance) -> rendertypeEnergySwirlShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_leash", DefaultVertexFormat.POSITION_COLOR_LIGHTMAP), (shaderInstance) -> rendertypeLeashShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_water_mask", DefaultVertexFormat.POSITION), (shaderInstance) -> rendertypeWaterMaskShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_outline", DefaultVertexFormat.POSITION_COLOR_TEX), (shaderInstance) -> rendertypeOutlineShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_armor_glint", DefaultVertexFormat.POSITION_TEX), (shaderInstance) -> rendertypeArmorGlintShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_armor_entity_glint", DefaultVertexFormat.POSITION_TEX), (shaderInstance) -> rendertypeArmorEntityGlintShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_glint_translucent", DefaultVertexFormat.POSITION_TEX), (shaderInstance) -> rendertypeGlintTranslucentShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_glint", DefaultVertexFormat.POSITION_TEX), (shaderInstance) -> rendertypeGlintShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_glint_direct", DefaultVertexFormat.POSITION_TEX), (shaderInstance) -> rendertypeGlintDirectShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_glint", DefaultVertexFormat.POSITION_TEX), (shaderInstance) -> rendertypeEntityGlintShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_entity_glint_direct", DefaultVertexFormat.POSITION_TEX), (shaderInstance) -> rendertypeEntityGlintDirectShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_text", DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), (shaderInstance) -> rendertypeTextShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_text_intensity", DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), (shaderInstance) -> rendertypeTextIntensityShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_text_see_through", DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), (shaderInstance) -> rendertypeTextSeeThroughShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_text_intensity_see_through", DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), (shaderInstance) -> rendertypeTextIntensitySeeThroughShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_lightning", DefaultVertexFormat.POSITION_COLOR), (shaderInstance) -> rendertypeLightningShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_tripwire", DefaultVertexFormat.BLOCK), (shaderInstance) -> rendertypeTripwireShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_end_portal", DefaultVertexFormat.POSITION), (shaderInstance) -> rendertypeEndPortalShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_end_gateway", DefaultVertexFormat.POSITION), (shaderInstance) -> rendertypeEndGatewayShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_lines", DefaultVertexFormat.POSITION_COLOR_NORMAL), (shaderInstance) -> rendertypeLinesShader = shaderInstance));
+         list2.add(Pair.of(new ShaderInstance(resourceManager, "rendertype_crumbling", DefaultVertexFormat.BLOCK), (shaderInstance) -> rendertypeCrumblingShader = shaderInstance));
       } catch (IOException var5) {
          list2.forEach((pair) -> ((ShaderInstance)pair.getFirst()).close());
          throw new RuntimeException("could not reload shaders", var5);
@@ -436,7 +436,7 @@ public class GameRenderer implements ResourceManagerReloadListener, AutoCloseabl
       list2.forEach((pair) -> {
          ShaderInstance shaderInstance = (ShaderInstance)pair.getFirst();
          this.shaders.put(shaderInstance.getName(), shaderInstance);
-         ((Consumer)pair.getSecond()).accept(shaderInstance);
+         (pair.getSecond()).accept(shaderInstance);
       });
    }
 
diff --git a/src/main/java/net/minecraft/client/renderer/RenderType.java b/src/main/java/net/minecraft/client/renderer/RenderType.java
index dea3382b0cf1bd2371af4cc487a001b743db0f68..06eafb538296dbb910c7fcb2f14c50077017a181 100644
--- a/src/main/java/net/minecraft/client/renderer/RenderType.java
+++ b/src/main/java/net/minecraft/client/renderer/RenderType.java
@@ -40,11 +40,11 @@ public abstract class RenderType extends RenderStateShard {
       RenderType.CompositeState compositeState = RenderType.CompositeState.builder().setShaderState(RENDERTYPE_ENTITY_CUTOUT_SHADER).setTextureState(new RenderStateShard.TextureStateShard(resourceLocation, false, false)).setTransparencyState(NO_TRANSPARENCY).setLightmapState(LIGHTMAP).setOverlayState(OVERLAY).createCompositeState(true);
       return create("entity_cutout", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 256, true, false, compositeState);
    }));
-   private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_CUTOUT_NO_CULL = Util.memoize((BiFunction)((resourceLocation, flag) -> {
+   private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_CUTOUT_NO_CULL = Util.memoize(((resourceLocation, flag) -> { // MagmaCube - decompile error
       RenderType.CompositeState compositeState = RenderType.CompositeState.builder().setShaderState(RENDERTYPE_ENTITY_CUTOUT_NO_CULL_SHADER).setTextureState(new RenderStateShard.TextureStateShard(resourceLocation, false, false)).setTransparencyState(NO_TRANSPARENCY).setCullState(NO_CULL).setLightmapState(LIGHTMAP).setOverlayState(OVERLAY).createCompositeState(flag);
       return create("entity_cutout_no_cull", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 256, true, false, compositeState);
    }));
-   private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_CUTOUT_NO_CULL_Z_OFFSET = Util.memoize((BiFunction)((resourceLocation, flag) -> {
+   private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_CUTOUT_NO_CULL_Z_OFFSET = Util.memoize(((resourceLocation, flag) -> { // MagmaCube - decompile error
       RenderType.CompositeState compositeState = RenderType.CompositeState.builder().setShaderState(RENDERTYPE_ENTITY_CUTOUT_NO_CULL_Z_OFFSET_SHADER).setTextureState(new RenderStateShard.TextureStateShard(resourceLocation, false, false)).setTransparencyState(NO_TRANSPARENCY).setCullState(NO_CULL).setLightmapState(LIGHTMAP).setOverlayState(OVERLAY).setLayeringState(VIEW_OFFSET_Z_LAYERING).createCompositeState(flag);
       return create("entity_cutout_no_cull_z_offset", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 256, true, false, compositeState);
    }));
@@ -56,7 +56,7 @@ public abstract class RenderType extends RenderStateShard {
       RenderType.CompositeState compositeState = RenderType.CompositeState.builder().setShaderState(RENDERTYPE_ENTITY_TRANSLUCENT_CULL_SHADER).setTextureState(new RenderStateShard.TextureStateShard(resourceLocation, false, false)).setTransparencyState(TRANSLUCENT_TRANSPARENCY).setLightmapState(LIGHTMAP).setOverlayState(OVERLAY).createCompositeState(true);
       return create("entity_translucent_cull", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 256, true, true, compositeState);
    }));
-   private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_TRANSLUCENT = Util.memoize((BiFunction)((resourceLocation, flag) -> {
+   private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_TRANSLUCENT = Util.memoize(((resourceLocation, flag) -> { // MagmaCube - decompile error
       RenderType.CompositeState compositeState = RenderType.CompositeState.builder().setShaderState(RENDERTYPE_ENTITY_TRANSLUCENT_SHADER).setTextureState(new RenderStateShard.TextureStateShard(resourceLocation, false, false)).setTransparencyState(TRANSLUCENT_TRANSPARENCY).setCullState(NO_CULL).setLightmapState(LIGHTMAP).setOverlayState(OVERLAY).createCompositeState(flag);
       return create("entity_translucent", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 256, true, true, compositeState);
    }));
@@ -64,7 +64,7 @@ public abstract class RenderType extends RenderStateShard {
       RenderType.CompositeState compositeState = RenderType.CompositeState.builder().setShaderState(RENDERTYPE_ENTITY_SMOOTH_CUTOUT_SHADER).setTextureState(new RenderStateShard.TextureStateShard(resourceLocation, false, false)).setCullState(NO_CULL).setLightmapState(LIGHTMAP).createCompositeState(true);
       return create("entity_smooth_cutout", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 256, compositeState);
    }));
-   private static final BiFunction<ResourceLocation, Boolean, RenderType> BEACON_BEAM = Util.memoize((BiFunction)((resourceLocation, flag) -> {
+   private static final BiFunction<ResourceLocation, Boolean, RenderType> BEACON_BEAM = Util.memoize(((resourceLocation, flag) -> { // MagmaCube - decompile error
       RenderType.CompositeState compositeState = RenderType.CompositeState.builder().setShaderState(RENDERTYPE_BEACON_BEAM_SHADER).setTextureState(new RenderStateShard.TextureStateShard(resourceLocation, false, false)).setTransparencyState(flag ? TRANSLUCENT_TRANSPARENCY : NO_TRANSPARENCY).setWriteMaskState(flag ? COLOR_WRITE : COLOR_DEPTH_WRITE).createCompositeState(false);
       return create("beacon_beam", DefaultVertexFormat.BLOCK, VertexFormat.Mode.QUADS, 256, false, true, compositeState);
    }));
diff --git a/src/main/java/net/minecraft/client/renderer/ShaderInstance.java b/src/main/java/net/minecraft/client/renderer/ShaderInstance.java
index bd1fa55fc297d66171dd4ecab2df3107e6b9fc1a..cf69fec3a8ad483dd438ae69f166ebd092df46a5 100644
--- a/src/main/java/net/minecraft/client/renderer/ShaderInstance.java
+++ b/src/main/java/net/minecraft/client/renderer/ShaderInstance.java
@@ -330,7 +330,7 @@ public class ShaderInstance implements Shader, AutoCloseable {
 
       for(int i2 = 0; i2 < this.samplerLocations.size(); ++i2) {
          if (this.samplerMap.get(this.samplerNames.get(i2)) != null) {
-            GlStateManager._activeTexture('闢�' + i2);
+            GlStateManager._activeTexture('\u84c0' + i2); // MagmaCube - decompile error
             GlStateManager._bindTexture(0);
          }
       }
@@ -355,7 +355,7 @@ public class ShaderInstance implements Shader, AutoCloseable {
          if (this.samplerMap.get(s) != null) {
             int i3 = Uniform.glGetUniformLocation(this.programId, s);
             Uniform.uploadInteger(i3, i2);
-            RenderSystem.activeTexture('闢�' + i2);
+            RenderSystem.activeTexture('\u84c0' + i2); // MagmaCube - decompile error
             RenderSystem.enableTexture();
             Object object = this.samplerMap.get(s);
             int i4 = -1;
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java b/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
index d1d1c0fd08f4ff8684e254e13e6b9a1fd47f4087..c88f2b6e56524fb8d6cadc16e12dfe7e8807fd96 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
@@ -41,7 +41,7 @@ public class KeyValueCondition implements Condition {
                predicate = this.getBlockStatePredicate(stateDefinition, property, s);
             } else {
                List<Predicate<BlockState>> list2 = (List)list.stream().map((sx) -> this.getBlockStatePredicate(stateDefinition, property, sx)).collect(Collectors.toList());
-               predicate = (blockState) -> list2.stream().anyMatch((predicate) -> predicate.test(blockState));
+               predicate = (blockState) -> list2.stream().anyMatch((predicatex) -> predicatex.test(blockState)); // MagmaCube - decompile error
             }
 
             return flag ? predicate.negate() : predicate;
diff --git a/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
index fb98e45850eb064b9825190ccd4ed335bff456a6..69ec49474f2dc43529426740295b99280e6a8ef4 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
@@ -112,17 +112,17 @@ public class ChunkDebugRenderer implements DebugRenderer.SimpleDebugRenderer {
             if (serverLevel == null) {
                return ImmutableMap.of();
             } else {
-               Builder<ChunkPos, String> builder = ImmutableMap.builder();
+               Builder<ChunkPos, String> builders = ImmutableMap.builder(); // MagmaCube - decompile error
                ServerChunkCache serverChunkCache = serverLevel.getChunkSource();
 
                for(int i3 = i - 12; i3 <= i + 12; ++i3) {
                   for(int i4 = i2 - 12; i4 <= i2 + 12; ++i4) {
                      ChunkPos chunkPos = new ChunkPos(i3, i4);
-                     builder.put(chunkPos, "Server: " + serverChunkCache.getChunkDebugData(chunkPos));
+                     builders.put(chunkPos, "Server: " + serverChunkCache.getChunkDebugData(chunkPos)); // MagmaCube - decompile error
                   }
                }
 
-               return builder.build();
+               return builders.build(); // MagmaCube - decompile error
             }
          });
       }
diff --git a/src/main/java/net/minecraft/client/renderer/debug/CollisionBoxRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/CollisionBoxRenderer.java
index ce30fe6568d3c5a1e9a388b24ce1fecd22e8178c..f61a483f5fbd5e9046bddffe571b854d4ec757d9 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/CollisionBoxRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/CollisionBoxRenderer.java
@@ -27,7 +27,7 @@ public class CollisionBoxRenderer implements DebugRenderer.SimpleDebugRenderer {
       if (d4 - this.lastUpdateTime > 1.0E8D) {
          this.lastUpdateTime = d4;
          Entity entity = this.minecraft.gameRenderer.getMainCamera().getEntity();
-         this.shapes = (List)entity.level.getCollisions(entity, entity.getBoundingBox().inflate(6.0D), (entity) -> true).collect(Collectors.toList());
+         this.shapes = (List)entity.level.getCollisions(entity, entity.getBoundingBox().inflate(6.0D), (entityx) -> true).collect(Collectors.toList()); // MagmaCube - decompile error
       }
 
       VertexConsumer vertexConsumer = multiBufferSource.getBuffer(RenderType.lines());
diff --git a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
index 70f0b7c767c99be82f0c62e4e94a50184273e00b..b568fc8cf79cbdde4962e38154ca3cdcb6e02cc5 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
@@ -41,11 +41,13 @@ public class GoalSelectorDebugRenderer implements DebugRenderer.SimpleDebugRende
          for(int i = 0; i < list.size(); ++i) {
             GoalSelectorDebugRenderer.DebugGoal debugGoal = (GoalSelectorDebugRenderer.DebugGoal)list.get(i);
             if (blockPos.closerThan(debugGoal.pos, 160.0D)) {
-               double d = (double)debugGoal.pos.getX() + 0.5D;
-               double d2 = (double)debugGoal.pos.getY() + 2.0D + (double)i * 0.25D;
-               double d3 = (double)debugGoal.pos.getZ() + 0.5D;
+               // MagmaCube start - decompile error
+               double dx = (double)debugGoal.pos.getX() + 0.5D;
+               double d2x = (double)debugGoal.pos.getY() + 2.0D + (double)i * 0.25D;
+               double d3x = (double)debugGoal.pos.getZ() + 0.5D;
+               // MagmaCube end - decompile error
                int i2 = debugGoal.isRunning ? -16711936 : -3355444;
-               DebugRenderer.renderFloatingText(debugGoal.name, d, d2, d3, i2);
+               DebugRenderer.renderFloatingText(debugGoal.name, dx, d2x, d3x, i2); // MagmaCube - decompile error
             }
          }
 
diff --git a/src/main/java/net/minecraft/client/renderer/debug/StructureRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/StructureRenderer.java
index 68694770fe5935fb01d108bef061e776cdd87198..105b7c3553760e6a9c1a890eea8c44d1d107b724 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/StructureRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/StructureRenderer.java
@@ -34,7 +34,7 @@ public class StructureRenderer implements DebugRenderer.SimpleDebugRenderer {
       BlockPos blockPos = new BlockPos(camera.getPosition().x, 0.0D, camera.getPosition().z);
       VertexConsumer vertexConsumer = multiBufferSource.getBuffer(RenderType.lines());
       if (this.postMainBoxes.containsKey(dimensionType)) {
-         for(BoundingBox boundingBox : ((Map)this.postMainBoxes.get(dimensionType)).values()) {
+         for(BoundingBox boundingBox : (this.postMainBoxes.get(dimensionType)).values()) { // MagmaCube - decompile error
             if (blockPos.closerThan(boundingBox.getCenter(), 500.0D)) {
                LevelRenderer.renderLineBox(poseStack, vertexConsumer, (double)boundingBox.minX() - d, (double)boundingBox.minY() - d2, (double)boundingBox.minZ() - d3, (double)(boundingBox.maxX() + 1) - d, (double)(boundingBox.maxY() + 1) - d2, (double)(boundingBox.maxZ() + 1) - d3, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
             }
@@ -42,7 +42,7 @@ public class StructureRenderer implements DebugRenderer.SimpleDebugRenderer {
       }
 
       if (this.postPiecesBoxes.containsKey(dimensionType)) {
-         for(Entry<String, BoundingBox> entry : ((Map)this.postPiecesBoxes.get(dimensionType)).entrySet()) {
+         for(Entry<String, BoundingBox> entry : (this.postPiecesBoxes.get(dimensionType)).entrySet()) { // MagmaCube - decompile error
             String s = (String)entry.getKey();
             BoundingBox boundingBox2 = (BoundingBox)entry.getValue();
             Boolean flag = (Boolean)((Map)this.startPiecesMap.get(dimensionType)).get(s);
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
index b1dd0f16ef410eee4e5d83484375d6b10827208c..7ad26608282fae880ccdf6bc82225fa96b65d4de 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
@@ -79,7 +79,7 @@ public class EntityRenderDispatcher implements ResourceManagerReloadListener {
       if (entity instanceof AbstractClientPlayer) {
          String s = ((AbstractClientPlayer)entity).getModelName();
          EntityRenderer<? extends Player> entityRenderer = (EntityRenderer)this.playerRenderers.get(s);
-         return entityRenderer != null ? entityRenderer : (EntityRenderer)this.playerRenderers.get("default");
+         return entityRenderer != null ? (EntityRenderer) entityRenderer : (EntityRenderer)this.playerRenderers.get("default"); // MagmaCube - decompile error
       } else {
          return (EntityRenderer)this.renderers.get(entity.getType());
       }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
index 10d53367bf200fab6ddf579469cde49a7574e9d9..93233d1e9857a391a6963c2f2a22bf26cda515e2 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
@@ -19,7 +19,7 @@ public class EntityRenderers {
    private static final Logger LOGGER = LogManager.getLogger();
    public static final String DEFAULT_PLAYER_MODEL = "default";
    private static final Map<EntityType<?>, EntityRendererProvider<?>> PROVIDERS = Maps.newHashMap();
-   private static final Map<String, EntityRendererProvider<AbstractClientPlayer>> PLAYER_PROVIDERS = ImmutableMap.of("default", (EntityRendererProvider<>)(context) -> new PlayerRenderer(context, false), "slim", (EntityRendererProvider<>)(context) -> new PlayerRenderer(context, true));
+   private static final Map<String, EntityRendererProvider<AbstractClientPlayer>> PLAYER_PROVIDERS = ImmutableMap.of("default", (EntityRendererProvider)(context) -> new PlayerRenderer(context, false), "slim", (EntityRendererProvider)(context) -> new PlayerRenderer(context, true)); // MagmaCube - decompile error
 
    private static <T extends Entity> void register(EntityType<? extends T> entityType, EntityRendererProvider<T> entityRendererProvider) {
       PROVIDERS.put(entityType, entityRendererProvider);
diff --git a/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java b/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
index 4ffd253e605bbe6d29efa88c3ddc70ccd35f6e58..a44f2a9509f7a37106d4ae2ed06e2854de2883c0 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
@@ -105,10 +105,12 @@ public class HttpTexture extends SimpleTexture {
                      }
 
                      Minecraft.getInstance().execute(() -> {
-                        NativeImage nativeImage = this.load(inputStream);
-                        if (nativeImage != null) {
-                           this.loadCallback(nativeImage);
+                        // MagmaCube start - decompile error
+                        NativeImage nativeImage1 = this.load(inputStream);
+                        if (nativeImage1 != null) {
+                           this.loadCallback(nativeImage1);
                         }
+                        // MagmaCube end - decompile error
 
                      });
                      return;
diff --git a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
index 75ac89298aa6fb260fcbbbd5ce89baba5db7b185..5070bc09b79f7418646337a0927186c8e0761083 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
@@ -11,7 +11,8 @@ import java.util.function.Consumer;
 import net.minecraft.util.Mth;
 
 public class Stitcher {
-   private static final Comparator<Stitcher.Holder> HOLDER_COMPARATOR = Comparator.comparing((holder) -> -holder.height).thenComparing((holder) -> -holder.width).thenComparing((holder) -> holder.spriteInfo.name());
+   // MagmaCube - decompile error
+   private static final Comparator<Stitcher.Holder> HOLDER_COMPARATOR = Comparator.<Holder, Integer>comparing((holder) -> -holder.height).thenComparing((holder) -> -holder.width).thenComparing((holder) -> holder.spriteInfo.name());
    private final int mipLevel;
    private final Set<Stitcher.Holder> texturesToBeStitched = Sets.newHashSetWithExpectedSize(256);
    private final List<Stitcher.Region> storage = Lists.newArrayListWithCapacity(256);
diff --git a/src/main/java/net/minecraft/client/resources/ClientPackSource.java b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
index 1bcfe2abba135e41e227748cac070f98435c2e47..edccb5713177835fb5965082c7f6304e406bf7cb 100644
--- a/src/main/java/net/minecraft/client/resources/ClientPackSource.java
+++ b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
@@ -143,8 +143,10 @@ public class ClientPackSource implements RepositorySource {
                LOGGER.warn("Pack application failed: {}, deleting file {}", throwable.getMessage(), file);
                deleteQuietly(file);
                Minecraft minecraft = Minecraft.getInstance();
-               minecraft.execute(() -> minecraft.setScreen(new ConfirmScreen((flag) -> {
-                     if (flag) {
+               // MagmaCube start - decompile error
+               minecraft.execute(() -> minecraft.setScreen(new ConfirmScreen((flagx) -> {
+                     if (flagx) {
+                        // MagmaCube end - decompile error
                         minecraft.setScreen((Screen)null);
                      } else {
                         ClientPacketListener clientPacketListener = minecraft.getConnection();
diff --git a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
index a8a390036fbd220814d32f822595eb926e0d8167..05b0ce8c23634b21edf66be496c5dbb2dc05a9d9 100644
--- a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
+++ b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
@@ -182,7 +182,7 @@ public class ModelBakery {
 
       for(Entry<ResourceLocation, List<Material>> entry : map.entrySet()) {
          TextureAtlas textureAtlas = new TextureAtlas((ResourceLocation)entry.getKey());
-         TextureAtlas.Preparations preparations = textureAtlas.prepareToStitch(this.resourceManager, ((List)entry.getValue()).stream().map(Material::texture), profilerFiller, i);
+         TextureAtlas.Preparations preparations = textureAtlas.prepareToStitch(this.resourceManager, entry.getValue().stream().map(Material::texture), profilerFiller, i);
          this.atlasPreparations.put((ResourceLocation)entry.getKey(), Pair.of(textureAtlas, preparations));
       }
 
@@ -369,10 +369,10 @@ public class ModelBakery {
                   blockModelDefinition.getVariants().forEach((s, multiVariant) -> {
                      try {
                         immutableList.stream().filter(predicate(stateDefinition, s)).forEach((blockState) -> {
-                           Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair2 = (Pair)map4.put(blockState, Pair.of(multiVariant, (Supplier)() -> ModelBakery.ModelGroupKey.create(blockState, multiVariant, list)));
-                           if (pair2 != null && pair2.getFirst() != multiPart) {
+                           Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair2x = map4.put(blockState, Pair.of(multiVariant, () -> ModelBakery.ModelGroupKey.create(blockState, multiVariant, list)));
+                           if (pair2x != null && pair2x.getFirst() != multiPart) {
                               map4.put(blockState, pair);
-                              throw new RuntimeException("Overlapping definition with: " + (String)((Entry)blockModelDefinition.getVariants().entrySet().stream().filter((entry) -> entry.getValue() == pair2.getFirst()).findFirst().get()).getKey());
+                              throw new RuntimeException("Overlapping definition with: " + (String)((Entry)blockModelDefinition.getVariants().entrySet().stream().filter((entry) -> entry.getValue() == pair2x.getFirst()).findFirst().get()).getKey());
                            }
                         });
                      } catch (Exception var12) {
@@ -388,7 +388,7 @@ public class ModelBakery {
             } catch (Exception var27) {
                throw new ModelBakery.BlockStateDefinitionException(String.format("Exception loading blockstate definition: '%s': %s", resourceLocation4, var27));
             } finally {
-               HashMap map6 = Maps.newHashMap();
+               HashMap<ModelGroupKey, Set<BlockState>> map6 = Maps.newHashMap();
                map.forEach((modelResourceLocationx, blockState) -> {
                   Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair2 = (Pair)map2.get(blockState);
                   if (pair2 == null) {
@@ -399,8 +399,8 @@ public class ModelBakery {
                   this.cacheAndQueueDependencies(modelResourceLocationx, (UnbakedModel)pair2.getFirst());
 
                   try {
-                     ModelBakery.ModelGroupKey modelGroupKey = (ModelBakery.ModelGroupKey)((Supplier)pair2.getSecond()).get();
-                     ((Set)map6.computeIfAbsent(modelGroupKey, (modelGroupKey) -> Sets.newIdentityHashSet())).add(blockState);
+                     ModelBakery.ModelGroupKey modelGroupKeyx = pair2.getSecond().get();
+                     map6.computeIfAbsent(modelGroupKeyx, (modelGroupKeyxx) -> Sets.newIdentityHashSet()).add(blockState);
                   } catch (Exception var9) {
                      LOGGER.warn("Exception evaluating model definition: '{}'", modelResourceLocationx, var9);
                   }
diff --git a/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java b/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java
index ae094822705efebd706dd8dfcbeeab8f4ab2c5c5..0348129c423b12b50fdb22622750f900d8036df7 100644
--- a/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java
+++ b/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java
@@ -49,7 +49,7 @@ public class ReloadableIdSearchTree<T> implements MutableSearchTree<T> {
    }
 
    protected void index(T object) {
-      ((Stream)this.idGetter.apply(object)).forEach((resourceLocation) -> {
+      (this.idGetter.apply(object)).forEach((resourceLocation) -> { // MagmaCube - decompile error
          this.namespaceTree.add(object, resourceLocation.getNamespace().toLowerCase(Locale.ROOT));
          this.pathTree.add(object, resourceLocation.getPath().toLowerCase(Locale.ROOT));
       });
@@ -67,7 +67,7 @@ public class ReloadableIdSearchTree<T> implements MutableSearchTree<T> {
          List<T> list = this.namespaceTree.search(s.substring(0, i).trim());
          String s2 = s.substring(i + 1).trim();
          List<T> list2 = this.pathTree.search(s2);
-         return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator(list.iterator(), list2.iterator(), this::comparePosition));
+         return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator<>(list.iterator(), list2.iterator(), this::comparePosition)); // MagmaCube - decompile error
       }
    }
 
diff --git a/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java b/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java
index 0d1356736e15f2c7699f3b677a09c3f3e85feab6..808477bff4d19524a3c7277fe1a4d0b483d1ab9c 100644
--- a/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java
+++ b/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java
@@ -29,7 +29,7 @@ public class ReloadableSearchTree<T> extends ReloadableIdSearchTree<T> {
 
    protected void index(T object) {
       super.index(object);
-      ((Stream)this.filler.apply(object)).forEach((s) -> this.tree.add(object, s.toLowerCase(Locale.ROOT)));
+      (this.filler.apply(object)).forEach((s) -> this.tree.add(object, s.toLowerCase(Locale.ROOT))); // MagmaCube - decompile error
    }
 
    public List<T> search(String s) {
@@ -41,7 +41,7 @@ public class ReloadableSearchTree<T> extends ReloadableIdSearchTree<T> {
          String s2 = s.substring(i + 1).trim();
          List<T> list2 = this.pathTree.search(s2);
          List<T> list3 = this.tree.search(s2);
-         return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator(list.iterator(), new ReloadableSearchTree.MergingUniqueIterator<T>(list2.iterator(), list3.iterator(), this::comparePosition), this::comparePosition));
+         return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator<>(list.iterator(), new ReloadableSearchTree.MergingUniqueIterator<T>(list2.iterator(), list3.iterator(), this::comparePosition), this::comparePosition)); // MagmaCube - decompile error
       }
    }
 
diff --git a/src/main/java/net/minecraft/client/sounds/SoundEngine.java b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
index d6e8dc16dafa241a2c6b526d0707abc95573c590..82642776668d2a34e47b24766cc4f8e65c990acf 100644
--- a/src/main/java/net/minecraft/client/sounds/SoundEngine.java
+++ b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
@@ -108,12 +108,12 @@ public class SoundEngine {
             this.listener.setGain(f);
          } else {
             this.instanceToChannel.forEach((soundInstance, channelHandle) -> {
-               float f = this.calculateVolume(soundInstance);
+               float f1 = this.calculateVolume(soundInstance); // MagmaCube - decompile error
                channelHandle.execute((channel) -> {
-                  if (f <= 0.0F) {
+                  if (f1 <= 0.0F) { // MagmaCube - decompile error
                      channel.stop();
                   } else {
-                     channel.setVolume(f);
+                     channel.setVolume(f1); // MagmaCube - decompile error
                   }
 
                });
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 9813284a8081f9d9820a6ac8513809ee60bbf2c7..af842f5ae17032b61ce56cfb9a91b7e8fc8bc56f 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -267,7 +267,7 @@ public class Commands {
    private void fillUsableCommands(CommandNode<CommandSourceStack> commandNode, CommandNode<SharedSuggestionProvider> commandNode2, CommandSourceStack commandSourceStack, Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map) {
       for(CommandNode<CommandSourceStack> commandNode3 : commandNode.getChildren()) {
          if (commandNode3.canUse(commandSourceStack)) {
-            ArgumentBuilder<SharedSuggestionProvider, ?> argumentBuilder = commandNode3.createBuilder();
+            ArgumentBuilder<SharedSuggestionProvider, ?> argumentBuilder = (ArgumentBuilder) commandNode3.createBuilder(); // MagmaCube - type
             argumentBuilder.requires((sharedSuggestionProvider) -> true);
             if (argumentBuilder.getCommand() != null) {
                argumentBuilder.executes((commandContext) -> 0);
@@ -284,7 +284,7 @@ public class Commands {
                argumentBuilder.redirect((CommandNode)map.get(argumentBuilder.getRedirect()));
             }
 
-            CommandNode<SharedSuggestionProvider> commandNode4 = argumentBuilder.build();
+            CommandNode<SharedSuggestionProvider> commandNode4 = (CommandNode) argumentBuilder.build(); // MagmaCube - decompile error
             map.put(commandNode3, commandNode4);
             commandNode2.addChild(commandNode4);
             if (!commandNode3.getChildren().isEmpty()) {
diff --git a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
index f3f244455c8488c53a754d73fa9aa635a9ec1881..d073663555ecd18c391dd36b77d54130559bc7cf 100644
--- a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
@@ -60,7 +60,7 @@ public class ObjectiveArgument implements ArgumentType<String> {
          return SharedSuggestionProvider.suggest(((CommandSourceStack)commandContext.getSource()).getServer().getScoreboard().getObjectiveNames(), suggestionsBuilder);
       } else if (commandContext.getSource() instanceof SharedSuggestionProvider) {
          SharedSuggestionProvider sharedSuggestionProvider = (SharedSuggestionProvider)commandContext.getSource();
-         return sharedSuggestionProvider.customSuggestion(commandContext, suggestionsBuilder);
+         return sharedSuggestionProvider.customSuggestion((CommandContext<SharedSuggestionProvider>) commandContext, suggestionsBuilder); // MagmaCube - decompile error
       } else {
          return Suggestions.empty();
       }
diff --git a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
index 2e3dbe6272ed6b8938dcd6a745cfc0f4c5aae791..22571d89bbc6be9f22f094186bad6072b61be44d 100644
--- a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
@@ -52,7 +52,7 @@ public class OperationArgument implements ArgumentType<OperationArgument.Operati
    }
 
    private static OperationArgument.Operation getOperation(String s) throws CommandSyntaxException {
-      return (OperationArgument.Operation)(s.equals("><") ? (score, score2) -> {
+      return (s.equals("><") ? (score, score2) -> { // MagmaCube - decompile error
          int i = score.getScore();
          score.setScore(score2.getScore());
          score2.setScore(i);
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
index a6f89d9fc25753690035b45bd2977eae7f29ecb6..81c21061fdb3211b70e3cd15aaa7af5c6b6fc703 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
@@ -204,7 +204,7 @@ public class BlockStateParser {
    private static <T extends Comparable<T>> SuggestionsBuilder addSuggestions(SuggestionsBuilder suggestionsBuilder, Property<T> property) {
       for(T comparable : property.getPossibleValues()) {
          if (comparable instanceof Integer) {
-            suggestionsBuilder.suggest(comparable);
+            suggestionsBuilder.suggest((Integer) comparable);
          } else {
             suggestionsBuilder.suggest(property.getName(comparable));
          }
@@ -444,8 +444,8 @@ public class BlockStateParser {
    private <T extends Comparable<T>> void setValue(Property<T> property, String s, int i) throws CommandSyntaxException {
       Optional<T> optional = property.getValue(s);
       if (optional.isPresent()) {
-         this.state = this.state.setValue(property, (Comparable)optional.get());
-         this.properties.put(property, (Comparable)optional.get());
+         this.state = this.state.setValue(property, optional.get());
+         this.properties.put(property, optional.get());
       } else {
          this.reader.setCursor(i);
          throw ERROR_INVALID_VALUE.createWithContext(this.reader, this.id.toString(), property.getName(), s);
diff --git a/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java b/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
index 36fb5c237fc0c3de9d05ecdf80de14508c08befe..d3f2d3b9160e78ab77b66669661c0eefd0701049 100644
--- a/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
+++ b/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
@@ -387,7 +387,7 @@ public class EntitySelectorOptions {
                      stringReader.expect('=');
                      stringReader.skipWhitespace();
                      boolean flag = stringReader.readBoolean();
-                     map2.put(s, (Predicate)(criterionProgress) -> criterionProgress.isDone() == flag);
+                     map2.put(s, (criterionProgress) -> criterionProgress.isDone() == flag); // MagmaCube - decompile error
                      stringReader.skipWhitespace();
                      if (stringReader.canRead() && stringReader.peek() == ',') {
                         stringReader.skip();
@@ -397,7 +397,7 @@ public class EntitySelectorOptions {
                   stringReader.skipWhitespace();
                   stringReader.expect('}');
                   stringReader.skipWhitespace();
-                  map.put(resourceLocation, (Predicate)(advancementProgress) -> {
+                  map.put(resourceLocation, (advancementProgress) -> { // MagmaCube - decompile error
                      for(Entry<String, Predicate<CriterionProgress>> entry : map2.entrySet()) {
                         CriterionProgress criterionProgress = advancementProgress.getCriterion((String)entry.getKey());
                         if (criterionProgress == null || !((Predicate)entry.getValue()).test(criterionProgress)) {
@@ -409,7 +409,7 @@ public class EntitySelectorOptions {
                   });
                } else {
                   boolean flag2 = stringReader.readBoolean();
-                  map.put(resourceLocation, (Predicate)(advancementProgress) -> advancementProgress.isDone() == flag2);
+                  map.put(resourceLocation, (advancementProgress) -> advancementProgress.isDone() == flag2); // MagmaCube - decompile error
                }
 
                stringReader.skipWhitespace();
diff --git a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
index 3cb2804e76ece78191e0180c5af059a34dcbe884..789228a63e33db0eca591e81a44039eea9b479d2 100644
--- a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
+++ b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
@@ -136,7 +136,7 @@ public class ArgumentTypes {
    }
 
    public static <T extends ArgumentType<?>> void serialize(FriendlyByteBuf friendlyByteBuf, T argumentType) {
-      ArgumentTypes.Entry<T> entry = get(argumentType);
+      ArgumentTypes.Entry<T> entry = (Entry<T>) get(argumentType); // MagmaCube - decompile error
       if (entry == null) {
          LOGGER.error("Could not serialize {} ({}) - will not be sent to client!", argumentType, argumentType.getClass());
          friendlyByteBuf.writeResourceLocation(new ResourceLocation(""));
@@ -159,7 +159,7 @@ public class ArgumentTypes {
    }
 
    private static <T extends ArgumentType<?>> void serializeToJson(JsonObject jsonObject, T argumentType) {
-      ArgumentTypes.Entry<T> entry = get(argumentType);
+      ArgumentTypes.Entry<T> entry = (Entry<T>) get(argumentType); // MagmaCube - decompile error
       if (entry == null) {
          LOGGER.error("Could not serialize argument {} ({})!", argumentType, argumentType.getClass());
          jsonObject.addProperty("type", "unknown");
diff --git a/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java b/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
index a612a2ed82ac21535a6eed27d8f7b5ed7c3ccb7c..ccb37dae3b6d6ce0e476bc4b9f01b380bdf2e51e 100644
--- a/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
+++ b/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
@@ -30,7 +30,7 @@ public class SuggestionProviders {
          throw new IllegalArgumentException("A command suggestion provider is already registered with the name " + resourceLocation);
       } else {
          PROVIDERS_BY_NAME.put(resourceLocation, suggestionProvider);
-         return new SuggestionProviders.Wrapper(resourceLocation, suggestionProvider);
+         return (SuggestionProvider<S>) new Wrapper(resourceLocation, suggestionProvider); // MagmaCube - decompile error
       }
    }
 
diff --git a/src/main/java/net/minecraft/core/BlockPos.java b/src/main/java/net/minecraft/core/BlockPos.java
index 4e737da83a271c155482a82fa7344d328a6a1834..6dcfc1a32befe3de46d5013d3b9767df76100508 100644
--- a/src/main/java/net/minecraft/core/BlockPos.java
+++ b/src/main/java/net/minecraft/core/BlockPos.java
@@ -276,13 +276,15 @@ public class BlockPos extends Vec3i {
                         this.y = -this.maxY;
                      }
 
-                     int i = this.x;
-                     int i2 = this.y;
-                     int i3 = this.currentDepth - Math.abs(i) - Math.abs(i2);
-                     if (i3 <= i3) {
-                        this.zMirror = i3 != 0;
-                        blockPos = this.cursor.set(i5 + i, i6 + i2, i7 + i3);
+                     // MagmaCube start - decompile error
+                     int ix = this.x;
+                     int i2x = this.y;
+                     int i3x = this.currentDepth - Math.abs(ix) - Math.abs(i2x);
+                     if (i3x <= i3) {
+                        this.zMirror = i3x != 0;
+                        blockPos = this.cursor.set(i5 + ix, i6 + i2x, i7 + i3x);
                      }
+                     // MagmaCube end - decompile error
                   }
 
                   return blockPos;
@@ -332,12 +334,14 @@ public class BlockPos extends Vec3i {
                if (this.index == i10) {
                   return (BlockPos)this.endOfData();
                } else {
-                  int i = this.index % i7;
-                  int i2 = this.index / i7;
-                  int i3 = i2 % i8;
-                  int i4 = i2 / i8;
+                  // MagmaCube start - decompile error
+                  int iIn = this.index % i7;
+                  int i2In = this.index / i7;
+                  int i3In = i2In % i8;
+                  int i4In = i2In / i8;
                   ++this.index;
-                  return this.cursor.set(i + i, i2 + i3, i3 + i4);
+                  return this.cursor.set(i + iIn, i2 + i3In, i3 + i4In);
+                  // MagmaCube end - decompile error
                }
             }
          };
diff --git a/src/main/java/net/minecraft/core/NonNullList.java b/src/main/java/net/minecraft/core/NonNullList.java
index 2fbf20ca2c568a0f1c49d9cd44e94b900a1fbf7f..10b0c4c0e5723db4191c4bb4451432f130de758a 100644
--- a/src/main/java/net/minecraft/core/NonNullList.java
+++ b/src/main/java/net/minecraft/core/NonNullList.java
@@ -20,7 +20,7 @@ public class NonNullList<E> extends AbstractList<E> {
       Validate.notNull(object);
       Object[] objects = new Object[i];
       Arrays.fill(objects, object);
-      return new NonNullList<>(Arrays.asList(objects), object);
+      return new NonNullList(Arrays.asList(objects), object); // MagmaCube - decompile error
    }
 
    @SafeVarargs
diff --git a/src/main/java/net/minecraft/core/Registry.java b/src/main/java/net/minecraft/core/Registry.java
index 9f20e31144df67a2f20a54bce6862ae2719e1098..b55207b4d98d9433b9d11c938fa775e09b44027c 100644
--- a/src/main/java/net/minecraft/core/Registry.java
+++ b/src/main/java/net/minecraft/core/Registry.java
@@ -270,8 +270,8 @@ public abstract class Registry<T> implements Codec<T>, Keyable, IdMap<T> {
    private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> resourceKey, R writableRegistry, Supplier<T> supplier, Lifecycle lifecycle) {
       ResourceLocation resourceLocation = resourceKey.location();
       LOADERS.put(resourceLocation, supplier);
-      WritableRegistry<R> writableRegistry2 = WRITABLE_REGISTRY;
-      return writableRegistry2.register(resourceKey, writableRegistry, lifecycle);
+      WritableRegistry<R> writableRegistry2 = (WritableRegistry<R>) WRITABLE_REGISTRY; // MagmaCube - decompile error
+      return (R) writableRegistry2.register((ResourceKey) resourceKey, writableRegistry, lifecycle); // MagmaCube - decompile error
    }
 
    protected Registry(ResourceKey<? extends Registry<T>> resourceKey, Lifecycle lifecycle) {
@@ -289,13 +289,15 @@ public abstract class Registry<T> implements Codec<T>, Keyable, IdMap<T> {
    }
 
    public <U> DataResult<Pair<T, U>> decode(DynamicOps<U> dynamicOps, U object) {
+      // MagmaCube start - decompile error
       return dynamicOps.compressMaps() ? dynamicOps.getNumberValue(object).flatMap((number) -> {
-         T object = this.byId(number.intValue());
-         return object == null ? DataResult.error("Unknown registry id: " + number) : DataResult.success(object, this.lifecycle(object));
+         T o = this.byId(number.intValue());
+         return o == null ? DataResult.error("Unknown registry id: " + number) : DataResult.success(o, this.lifecycle(o));
       }).map((objectx) -> Pair.of(objectx, dynamicOps.empty())) : ResourceLocation.CODEC.decode(dynamicOps, object).flatMap((pair) -> {
-         T object = this.get((ResourceLocation)pair.getFirst());
-         return object == null ? DataResult.error("Unknown registry key: " + pair.getFirst()) : DataResult.success(Pair.of(object, pair.getSecond()), this.lifecycle(object));
+         T o = this.get((ResourceLocation)pair.getFirst());
+         return o == null ? DataResult.error("Unknown registry key: " + pair.getFirst()) : DataResult.success(Pair.of(o, pair.getSecond()), this.lifecycle(o));
       });
+      // MagmaCube end - decompile error
    }
 
    public <U> DataResult<U> encode(T object, DynamicOps<U> dynamicOps, U object2) {
@@ -317,6 +319,7 @@ public abstract class Registry<T> implements Codec<T>, Keyable, IdMap<T> {
    public abstract Optional<ResourceKey<T>> getResourceKey(T var1);
 
    public abstract int getId(@Nullable T var1);
+   public int getIdObject(@Nullable Object var1) { return getId((T) var1); } // MagmaCube - workaround
 
    @Nullable
    public abstract T get(@Nullable ResourceKey<T> var1);
@@ -365,11 +368,11 @@ public abstract class Registry<T> implements Codec<T>, Keyable, IdMap<T> {
    }
 
    public static <V, T extends V> T register(Registry<V> registry, ResourceLocation resourceLocation, T object) {
-      return ((WritableRegistry)registry).register(ResourceKey.create(registry.key, resourceLocation), object, Lifecycle.stable());
+      return ((WritableRegistry<V>)registry).register(ResourceKey.create(registry.key, resourceLocation), object, Lifecycle.stable()); // MagmaCube - decompile error
    }
 
    public static <V, T extends V> T registerMapping(Registry<V> registry, int i, String s, T object) {
-      return ((WritableRegistry)registry).registerMapping(i, ResourceKey.create(registry.key, new ResourceLocation(s)), object, Lifecycle.stable());
+      return ((WritableRegistry<V>)registry).registerMapping(i, ResourceKey.create(registry.key, new ResourceLocation(s)), object, Lifecycle.stable()); // MagmaCube - decompile error
    }
 
    static {
diff --git a/src/main/java/net/minecraft/core/RegistryAccess.java b/src/main/java/net/minecraft/core/RegistryAccess.java
index c3794dfd93e3c5a7d766fa0155274b488342b54d..3512b0416e516616b49862a292717f1e495e7544 100644
--- a/src/main/java/net/minecraft/core/RegistryAccess.java
+++ b/src/main/java/net/minecraft/core/RegistryAccess.java
@@ -61,7 +61,7 @@ public abstract class RegistryAccess {
 
    public <E> Optional<? extends Registry<E>> registry(ResourceKey<? extends Registry<? extends E>> resourceKey) {
       Optional<? extends Registry<E>> optional = this.ownedRegistry(resourceKey);
-      return optional.isPresent() ? optional : Registry.REGISTRY.getOptional(resourceKey.location());
+      return optional.isPresent() ? optional : ((Registry<? extends Registry<E>>) Registry.REGISTRY).getOptional(resourceKey.location());
    }
 
    public <E> Registry<E> registryOrThrow(ResourceKey<? extends Registry<? extends E>> resourceKey) {
@@ -107,7 +107,7 @@ public abstract class RegistryAccess {
    }
 
    private static <R extends Registry<?>> void copyBuiltin(RegistryAccess.RegistryHolder registryHolder, ResourceKey<R> resourceKey) {
-      Registry<R> registry = BuiltinRegistries.REGISTRY;
+      Registry<R> registry = (Registry<R>) BuiltinRegistries.REGISTRY;
       Registry<?> registry2 = registry.getOrThrow(resourceKey);
       copy(registryHolder, registry2);
    }
@@ -174,7 +174,7 @@ public abstract class RegistryAccess {
 
       private static <E> Codec<RegistryAccess.RegistryHolder> makeNetworkCodec() {
          Codec<ResourceKey<? extends Registry<E>>> codec = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location);
-         Codec<MappedRegistry<E>> codec2 = codec.partialDispatch("type", (mappedRegistry) -> DataResult.success(mappedRegistry.key()), (resourceKey) -> getNetworkCodec(resourceKey).map((codec) -> MappedRegistry.networkCodec(resourceKey, Lifecycle.experimental(), codec)));
+         Codec<MappedRegistry<E>> codec2 = codec.partialDispatch("type", (mappedRegistry) -> DataResult.success(mappedRegistry.key()), (resourceKey) -> getNetworkCodec(resourceKey).map((codecx) -> MappedRegistry.networkCodec(resourceKey, Lifecycle.experimental(), codecx)));
          UnboundedMapCodec<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> unboundedMapCodec = Codec.unboundedMap(codec, codec2);
          return captureMap(unboundedMapCodec);
       }
@@ -188,15 +188,15 @@ public abstract class RegistryAccess {
       }
 
       public RegistryHolder() {
-         this((Map)RegistryAccess.REGISTRIES.keySet().stream().collect(Collectors.toMap(Function.identity(), RegistryAccess.RegistryHolder::createRegistry)));
+         this(RegistryAccess.REGISTRIES.keySet().stream().collect(Collectors.toMap(Function.identity(), RegistryAccess.RegistryHolder::createRegistry)));
       }
 
       private RegistryHolder(Map<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> map) {
          this.registries = map;
       }
 
-      private static <E> MappedRegistry<?> createRegistry(ResourceKey<? extends Registry<?>> resourceKey) {
-         return new MappedRegistry<>(resourceKey, Lifecycle.stable());
+      private static <E> MappedRegistry<E> createRegistry(ResourceKey<? extends Registry<?>> resourceKey) {
+         return new MappedRegistry<>((ResourceKey<? extends Registry<E>>) resourceKey, Lifecycle.stable());
       }
 
       public <E> Optional<WritableRegistry<E>> ownedRegistry(ResourceKey<? extends Registry<? extends E>> resourceKey) {
diff --git a/src/main/java/net/minecraft/data/BuiltinRegistries.java b/src/main/java/net/minecraft/data/BuiltinRegistries.java
index fc2fc78302685e79feeadced8ede594a395ed18b..ba488d2a7ad499467a0c8b50596f8d912ef6a395 100644
--- a/src/main/java/net/minecraft/data/BuiltinRegistries.java
+++ b/src/main/java/net/minecraft/data/BuiltinRegistries.java
@@ -52,8 +52,8 @@ public class BuiltinRegistries {
    private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> resourceKey, R writableRegistry, Supplier<T> supplier, Lifecycle lifecycle) {
       ResourceLocation resourceLocation = resourceKey.location();
       LOADERS.put(resourceLocation, supplier);
-      WritableRegistry<R> writableRegistry2 = WRITABLE_REGISTRY;
-      return writableRegistry2.register(resourceKey, writableRegistry, lifecycle);
+      WritableRegistry<R> writableRegistry2 = (WritableRegistry<R>) WRITABLE_REGISTRY; // MagmaCube - decompile error
+      return (R) writableRegistry2.register((ResourceKey) resourceKey, writableRegistry, lifecycle); // MagmaCube - decompile error
    }
 
    public static <T> T register(Registry<? super T> registry, String s, T object) {
@@ -61,11 +61,11 @@ public class BuiltinRegistries {
    }
 
    public static <V, T extends V> T register(Registry<V> registry, ResourceLocation resourceLocation, T object) {
-      return ((WritableRegistry)registry).register(ResourceKey.create(registry.key(), resourceLocation), object, Lifecycle.stable());
+      return ((WritableRegistry<T>)registry).register((ResourceKey<T>) ResourceKey.create(registry.key(), resourceLocation), object, Lifecycle.stable()); // MagmaCube - decompile error
    }
 
    public static <V, T extends V> T registerMapping(Registry<V> registry, int i, ResourceKey<V> resourceKey, T object) {
-      return ((WritableRegistry)registry).registerMapping(i, resourceKey, object, Lifecycle.stable());
+      return ((WritableRegistry<T>)registry).registerMapping(i, (ResourceKey<T>) resourceKey, object, Lifecycle.stable()); // MagmaCube - decompile error
    }
 
    public static void bootstrap() {
diff --git a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
index 80b4da85a12ffee47546363ff593b64734028363..e1209076f3ada6bcb9e44cd72466314add3c4f97 100644
--- a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
+++ b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
@@ -35,7 +35,7 @@ public class RegistryDumpReport implements DataProvider {
          jsonObject.addProperty("default", resourceLocation.toString());
       }
 
-      int i = Registry.REGISTRY.getId(registry);
+      int i = Registry.REGISTRY.getIdObject(registry); // MagmaCube - workaround
       jsonObject.addProperty("protocol_id", i);
       JsonObject jsonObject2 = new JsonObject();
 
diff --git a/src/main/java/net/minecraft/data/loot/LootTableProvider.java b/src/main/java/net/minecraft/data/loot/LootTableProvider.java
index 51d14d0cf26d188f8fbb5292617b9882eebdfcfd..ec52d76e9ca5a334569ae5c4ba33deed32c56e38 100644
--- a/src/main/java/net/minecraft/data/loot/LootTableProvider.java
+++ b/src/main/java/net/minecraft/data/loot/LootTableProvider.java
@@ -40,7 +40,7 @@ public class LootTableProvider implements DataProvider {
    public void run(HashCache hashCache) {
       Path path = this.generator.getOutputFolder();
       Map<ResourceLocation, LootTable> map = Maps.newHashMap();
-      this.subProviders.forEach((pair) -> ((Consumer)((Supplier)pair.getFirst()).get()).accept((BiConsumer)(resourceLocation, builder) -> {
+      this.subProviders.forEach((pair) -> ((pair.getFirst()).get()).accept((resourceLocation, builder) -> { // MagmaCube - decompile error
             if (map.put(resourceLocation, builder.setParamSet((LootContextParamSet)pair.getSecond()).build()) != null) {
                throw new IllegalStateException("Duplicate loot table " + resourceLocation);
             }
diff --git a/src/main/java/net/minecraft/data/models/BlockModelGenerators.java b/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
index f6d125af650270051d23e8be906b8332c4e6d020..4150426bc759ae100f616221a25760780115e528 100644
--- a/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
+++ b/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
@@ -69,22 +69,22 @@ public class BlockModelGenerators {
    final BiConsumer<ResourceLocation, Supplier<JsonElement>> modelOutput;
    private final Consumer<Item> skippedAutoModelsOutput;
    final List<Block> nonOrientableTrapdoor = ImmutableList.of(Blocks.OAK_TRAPDOOR, Blocks.DARK_OAK_TRAPDOOR, Blocks.IRON_TRAPDOOR);
-   final Map<Block, BlockModelGenerators.BlockStateGeneratorSupplier> fullBlockModelCustomGenerators = ImmutableMap.builder().put(Blocks.STONE, BlockModelGenerators::createMirroredCubeGenerator).put(Blocks.DEEPSLATE, BlockModelGenerators::createMirroredColumnGenerator).build();
-   final Map<Block, TexturedModel> texturedModels = ImmutableMap.builder().put(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.SANDSTONE)).put(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.RED_SANDSTONE)).put(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).put(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).put(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_SANDSTONE)))).put(Blocks.CUT_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.RED_SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_RED_SANDSTONE)))).put(Blocks.QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.QUARTZ_BLOCK)).put(Blocks.SMOOTH_QUARTZ, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.QUARTZ_BLOCK, "_bottom"))).put(Blocks.BLACKSTONE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.BLACKSTONE)).put(Blocks.DEEPSLATE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.DEEPSLATE)).put(Blocks.CHISELED_QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.CHISELED_QUARTZ_BLOCK).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_QUARTZ_BLOCK)))).put(Blocks.CHISELED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_SANDSTONE).updateTextures((textureMapping) -> {
+   final Map<Block, BlockModelGenerators.BlockStateGeneratorSupplier> fullBlockModelCustomGenerators = ImmutableMap.<Block, BlockModelGenerators.BlockStateGeneratorSupplier>builder().put(Blocks.STONE, BlockModelGenerators::createMirroredCubeGenerator).put(Blocks.DEEPSLATE, BlockModelGenerators::createMirroredColumnGenerator).build();
+   final Map<Block, TexturedModel> texturedModels = ImmutableMap.<Block, TexturedModel>builder().put(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.SANDSTONE)).put(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.RED_SANDSTONE)).put(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).put(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).put(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_SANDSTONE)))).put(Blocks.CUT_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.RED_SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_RED_SANDSTONE)))).put(Blocks.QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.QUARTZ_BLOCK)).put(Blocks.SMOOTH_QUARTZ, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.QUARTZ_BLOCK, "_bottom"))).put(Blocks.BLACKSTONE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.BLACKSTONE)).put(Blocks.DEEPSLATE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.DEEPSLATE)).put(Blocks.CHISELED_QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.CHISELED_QUARTZ_BLOCK).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_QUARTZ_BLOCK)))).put(Blocks.CHISELED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_SANDSTONE).updateTextures((textureMapping) -> {
       textureMapping.put(TextureSlot.END, TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"));
       textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_SANDSTONE));
    })).put(Blocks.CHISELED_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_RED_SANDSTONE).updateTextures((textureMapping) -> {
       textureMapping.put(TextureSlot.END, TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"));
       textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_RED_SANDSTONE));
    })).build();
-   static final Map<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>> SHAPE_CONSUMERS = ImmutableMap.builder().put(BlockFamily.Variant.BUTTON, BlockModelGenerators.BlockFamilyProvider::button).put(BlockFamily.Variant.DOOR, BlockModelGenerators.BlockFamilyProvider::door).put(BlockFamily.Variant.CHISELED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CRACKED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.FENCE, BlockModelGenerators.BlockFamilyProvider::fence).put(BlockFamily.Variant.FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::fenceGate).put(BlockFamily.Variant.SIGN, BlockModelGenerators.BlockFamilyProvider::sign).put(BlockFamily.Variant.SLAB, BlockModelGenerators.BlockFamilyProvider::slab).put(BlockFamily.Variant.STAIRS, BlockModelGenerators.BlockFamilyProvider::stairs).put(BlockFamily.Variant.PRESSURE_PLATE, BlockModelGenerators.BlockFamilyProvider::pressurePlate).put(BlockFamily.Variant.TRAPDOOR, BlockModelGenerators.BlockFamilyProvider::trapdoor).put(BlockFamily.Variant.WALL, BlockModelGenerators.BlockFamilyProvider::wall).build();
+   static final Map<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>> SHAPE_CONSUMERS = ImmutableMap.<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>>builder().put(BlockFamily.Variant.BUTTON, BlockModelGenerators.BlockFamilyProvider::button).put(BlockFamily.Variant.DOOR, BlockModelGenerators.BlockFamilyProvider::door).put(BlockFamily.Variant.CHISELED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CRACKED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.FENCE, BlockModelGenerators.BlockFamilyProvider::fence).put(BlockFamily.Variant.FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::fenceGate).put(BlockFamily.Variant.SIGN, BlockModelGenerators.BlockFamilyProvider::sign).put(BlockFamily.Variant.SLAB, BlockModelGenerators.BlockFamilyProvider::slab).put(BlockFamily.Variant.STAIRS, BlockModelGenerators.BlockFamilyProvider::stairs).put(BlockFamily.Variant.PRESSURE_PLATE, BlockModelGenerators.BlockFamilyProvider::pressurePlate).put(BlockFamily.Variant.TRAPDOOR, BlockModelGenerators.BlockFamilyProvider::trapdoor).put(BlockFamily.Variant.WALL, BlockModelGenerators.BlockFamilyProvider::wall).build();
    public static final Map<BooleanProperty, Function<ResourceLocation, Variant>> MULTIFACE_GENERATOR = Util.make(Maps.newHashMap(), (hashMap) -> {
-      hashMap.put(BlockStateProperties.NORTH, (Function)(resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation));
-      hashMap.put(BlockStateProperties.EAST, (Function)(resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true));
-      hashMap.put(BlockStateProperties.SOUTH, (Function)(resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true));
-      hashMap.put(BlockStateProperties.WEST, (Function)(resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true));
-      hashMap.put(BlockStateProperties.UP, (Function)(resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.X_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true));
-      hashMap.put(BlockStateProperties.DOWN, (Function)(resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true));
+      hashMap.put(BlockStateProperties.NORTH, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation));
+      hashMap.put(BlockStateProperties.EAST, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true));
+      hashMap.put(BlockStateProperties.SOUTH, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true));
+      hashMap.put(BlockStateProperties.WEST, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true));
+      hashMap.put(BlockStateProperties.UP, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.X_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true));
+      hashMap.put(BlockStateProperties.DOWN, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true));
    });
 
    private static BlockStateGenerator createMirroredCubeGenerator(Block block, ResourceLocation resourceLocation, TextureMapping textureMapping, BiConsumer<ResourceLocation, Supplier<JsonElement>> biConsumer) {
diff --git a/src/main/java/net/minecraft/data/models/blockstates/Selector.java b/src/main/java/net/minecraft/data/models/blockstates/Selector.java
index 674315e0afc7dfa9594c903599471ce0a86454a5..59fdf53c529548ad80debaf4f1947d4abd6cee0b 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/Selector.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/Selector.java
@@ -12,11 +12,11 @@ public final class Selector {
    private final List<Property.Value<?>> values;
 
    public Selector extend(Property.Value<?> value) {
-      return new Selector(ImmutableList.builder().addAll(this.values).add(value).build());
+      return new Selector((List) ImmutableList.builder().addAll(this.values).add(value).build()); // MagmaCube - decompile error
    }
 
    public Selector extend(Selector selector) {
-      return new Selector(ImmutableList.builder().addAll(this.values).addAll(selector.values).build());
+      return new Selector((List) ImmutableList.builder().addAll(this.values).addAll(selector.values).build()); // MagmaCube - decompile error
    }
 
    private Selector(List<Property.Value<?>> list) {
diff --git a/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java b/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
index a195aa990712a0894305b3a3ecc3c561184b11e9..5c3af847a6f46ac1aeee102ed3cf3efc3c49016a 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
@@ -4,11 +4,13 @@ import com.google.gson.JsonPrimitive;
 import net.minecraft.resources.ResourceLocation;
 
 public class VariantProperties {
-   public static final VariantProperty<VariantProperties.Rotation> X_ROT = new VariantProperty("x", (rotation) -> new JsonPrimitive(rotation.value));
-   public static final VariantProperty<VariantProperties.Rotation> Y_ROT = new VariantProperty("y", (rotation) -> new JsonPrimitive(rotation.value));
+   // MagmaCube start - decompile error
+   public static final VariantProperty<VariantProperties.Rotation> X_ROT = new VariantProperty<>("x", (rotation) -> new JsonPrimitive(rotation.value));
+   public static final VariantProperty<VariantProperties.Rotation> Y_ROT = new VariantProperty<>("y", (rotation) -> new JsonPrimitive(rotation.value));
    public static final VariantProperty<ResourceLocation> MODEL = new VariantProperty<>("model", (resourceLocation) -> new JsonPrimitive(resourceLocation.toString()));
-   public static final VariantProperty<Boolean> UV_LOCK = new VariantProperty("uvlock", JsonPrimitive::new);
-   public static final VariantProperty<Integer> WEIGHT = new VariantProperty("weight", JsonPrimitive::new);
+   public static final VariantProperty<Boolean> UV_LOCK = new VariantProperty<>("uvlock", JsonPrimitive::new);
+   public static final VariantProperty<Integer> WEIGHT = new VariantProperty<>("weight", JsonPrimitive::new);
+   // MagmaCube end - decompile error
 
    public static enum Rotation {
       R0(0),
diff --git a/src/main/java/net/minecraft/data/models/model/ModelTemplate.java b/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
index b8ec5d93f2be8cc799ba9f5d2e181fb2153ffc12..e1950ce7a29aeaf8e0432e497f306bae309de43e 100644
--- a/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
+++ b/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
@@ -42,10 +42,10 @@ public class ModelTemplate {
       Map<TextureSlot, ResourceLocation> map = this.createMap(textureMapping);
       biConsumer.accept(resourceLocation, (Supplier)() -> {
          JsonObject jsonObject = new JsonObject();
-         this.model.ifPresent((resourceLocation) -> jsonObject.addProperty("parent", resourceLocation.toString()));
+         this.model.ifPresent((resourceLocationx) -> jsonObject.addProperty("parent", resourceLocationx.toString())); // MagmaCube - decompile error
          if (!map.isEmpty()) {
             JsonObject jsonObject2 = new JsonObject();
-            map.forEach((textureSlot, resourceLocation) -> jsonObject2.addProperty(textureSlot.getId(), resourceLocation.toString()));
+            map.forEach((textureSlot, resourceLocationx) -> jsonObject2.addProperty(textureSlot.getId(), resourceLocationx.toString())); // MagmaCube - decompile error
             jsonObject.add("textures", jsonObject2);
          }
 
diff --git a/src/main/java/net/minecraft/data/recipes/RecipeProvider.java b/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
index 7149b66494120846521a73ade545f37ed43a7548..26be451fd9b907a762102eb970113d2a049551e2 100644
--- a/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
+++ b/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
@@ -60,7 +60,8 @@ public class RecipeProvider implements DataProvider {
    private static final ImmutableList<ItemLike> REDSTONE_SMELTABLES = ImmutableList.of(Items.REDSTONE_ORE, Items.DEEPSLATE_REDSTONE_ORE);
    private static final ImmutableList<ItemLike> EMERALD_SMELTABLES = ImmutableList.of(Items.EMERALD_ORE, Items.DEEPSLATE_EMERALD_ORE);
    private final DataGenerator generator;
-   private static final Map<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>> shapeBuilders = ImmutableMap.builder().put(BlockFamily.Variant.BUTTON, (BiFunction)(itemLike, itemLike2) -> buttonBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CHISELED, (BiFunction)(itemLike, itemLike2) -> chiseledBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUT, (BiFunction)(itemLike, itemLike2) -> cutBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.DOOR, (BiFunction)(itemLike, itemLike2) -> doorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE, (BiFunction)(itemLike, itemLike2) -> fenceBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE_GATE, (BiFunction)(itemLike, itemLike2) -> fenceGateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SIGN, (BiFunction)(itemLike, itemLike2) -> signBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SLAB, (BiFunction)(itemLike, itemLike2) -> slabBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.STAIRS, (BiFunction)(itemLike, itemLike2) -> stairBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.PRESSURE_PLATE, (BiFunction)(itemLike, itemLike2) -> pressurePlateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.POLISHED, (BiFunction)(itemLike, itemLike2) -> polishedBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.TRAPDOOR, (BiFunction)(itemLike, itemLike2) -> trapdoorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.WALL, (BiFunction)(itemLike, itemLike2) -> wallBuilder(itemLike, Ingredient.of(itemLike2))).build();
+   // MagmaCube - decompile error
+   private static final Map<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>> shapeBuilders = ImmutableMap.<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>>builder().put(BlockFamily.Variant.BUTTON, (itemLike, itemLike2) -> buttonBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CHISELED, (itemLike, itemLike2) -> chiseledBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUT, (itemLike, itemLike2) -> cutBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.DOOR, (itemLike, itemLike2) -> doorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE, (itemLike, itemLike2) -> fenceBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE_GATE, (itemLike, itemLike2) -> fenceGateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SIGN, (itemLike, itemLike2) -> signBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SLAB, (itemLike, itemLike2) -> slabBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.STAIRS, (itemLike, itemLike2) -> stairBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.PRESSURE_PLATE, (itemLike, itemLike2) -> pressurePlateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.POLISHED, (itemLike, itemLike2) -> polishedBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.TRAPDOOR, (itemLike, itemLike2) -> trapdoorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.WALL, (itemLike, itemLike2) -> wallBuilder(itemLike, Ingredient.of(itemLike2))).build();
 
    public RecipeProvider(DataGenerator dataGenerator) {
       this.generator = dataGenerator;
@@ -1169,7 +1170,7 @@ public class RecipeProvider implements DataProvider {
    }
 
    private static void waxRecipes(Consumer<FinishedRecipe> consumer) {
-      ((BiMap)HoneycombItem.WAXABLES.get()).forEach((block, block2) -> ShapelessRecipeBuilder.shapeless(block2).requires(block).requires(Items.HONEYCOMB).group(getItemName(block2)).unlockedBy(getHasName(block), has(block)).save(consumer, getConversionRecipeName(block2, Items.HONEYCOMB)));
+      (HoneycombItem.WAXABLES.get()).forEach((block, block2) -> ShapelessRecipeBuilder.shapeless(block2).requires(block).requires(Items.HONEYCOMB).group(getItemName(block2)).unlockedBy(getHasName(block), has(block)).save(consumer, getConversionRecipeName(block2, Items.HONEYCOMB)));
    }
 
    private static void generateRecipes(Consumer<FinishedRecipe> consumer, BlockFamily blockFamily) {
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java b/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
index 2ac54b3a762f3854efdedc02c8ad81731ba4541d..e9e882528c9bd7ecdce292d051238f8677b3e88d 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
@@ -31,8 +31,10 @@ public class GameTestBatchRunner {
       this.testTicker = gameTestTicker;
       this.testsPerRow = i;
       this.batches = (List)collection.stream().map((gameTestBatch) -> {
-         Collection<GameTestInfo> collection = (Collection)gameTestBatch.getTestFunctions().stream().map((testFunction) -> new GameTestInfo(testFunction, rotation, serverLevel)).collect(ImmutableList.toImmutableList());
-         return Pair.of(gameTestBatch, collection);
+         // MagmaCube start - decompile error
+         Collection<GameTestInfo> collectionx = (Collection)gameTestBatch.getTestFunctions().stream().map((testFunction) -> new GameTestInfo(testFunction, rotation, serverLevel)).collect(ImmutableList.toImmutableList());
+         return Pair.of(gameTestBatch, collectionx);
+         // MagmaCube end - decompile error
       }).collect(ImmutableList.toImmutableList());
       this.allTestInfos = (List)this.batches.stream().flatMap((pair) -> ((Collection)pair.getSecond()).stream()).collect(ImmutableList.toImmutableList());
    }
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java b/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
index 97798eeb59733687fbb20385254377b17c87a191..3129f64326d8a1e5cea1a33726f0914f37327664 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
@@ -51,7 +51,7 @@ public class GameTestRegistry {
       T annotation = method.getAnnotation(clazz);
       if (annotation != null) {
          String s = (String)function.apply(annotation);
-         Consumer<ServerLevel> consumer = (Consumer)map.putIfAbsent(s, turnMethodIntoConsumer(method));
+         Consumer<ServerLevel> consumer = (Consumer)map.putIfAbsent(s, (Consumer<ServerLevel>) turnMethodIntoConsumer(method)); // MagmaCube - decompile error
          if (consumer != null) {
             throw new RuntimeException("Hey, there should only be one " + clazz + " method per batch. Batch '" + s + "' has more than one!");
          }
@@ -115,7 +115,7 @@ public class GameTestRegistry {
       String s4 = gameTest.template().isEmpty() ? s3 : s2 + "." + gameTest.template();
       String s5 = gameTest.batch();
       Rotation rotation = StructureUtils.getRotationForRotationSteps(gameTest.rotationSteps());
-      return new TestFunction(s5, s3, s4, rotation, gameTest.timeoutTicks(), gameTest.setupTicks(), gameTest.required(), gameTest.requiredSuccesses(), gameTest.attempts(), turnMethodIntoConsumer(method));
+      return new TestFunction(s5, s3, s4, rotation, gameTest.timeoutTicks(), gameTest.setupTicks(), gameTest.required(), gameTest.requiredSuccesses(), gameTest.attempts(), (Consumer<GameTestHelper>) turnMethodIntoConsumer(method)); // MagmaCube - decompile error
    }
 
    private static Consumer<?> turnMethodIntoConsumer(Method method) {
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
index 1d99fa1948e95c43b87b02a7b2769189d010168f..38abc5a13f375855b655386894b82fbdeb020128 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
@@ -48,8 +48,10 @@ public class GameTestRunner {
          Consumer<ServerLevel> consumer = GameTestRegistry.getBeforeBatchFunction(s);
          Consumer<ServerLevel> consumer2 = GameTestRegistry.getAfterBatchFunction(s);
          MutableInt mutableInt = new MutableInt();
-         Collection<TestFunction> collection = (Collection)entry.getValue();
-         return Streams.stream(Iterables.partition(collection, 100)).map((list) -> new GameTestBatch(s + ":" + mutableInt.incrementAndGet(), ImmutableList.copyOf(list), consumer, consumer2));
+         // MagmaCube start - decompile error
+         Collection<TestFunction> collectionc = (Collection)entry.getValue();
+         return Streams.stream(Iterables.partition(collectionc, 100)).map((list) -> new GameTestBatch(s + ":" + mutableInt.incrementAndGet(), ImmutableList.copyOf(list), consumer, consumer2));
+         // MagmaCube end - decompile error
       }).collect(ImmutableList.toImmutableList());
    }
 
@@ -59,9 +61,9 @@ public class GameTestRunner {
       BlockPos blockPos3 = blockPos.offset(i, 0, i);
       BlockPos.betweenClosedStream(blockPos2, blockPos3).filter((blockPosx) -> serverLevel.getBlockState(blockPosx).is(Blocks.STRUCTURE_BLOCK)).forEach((blockPosx) -> {
          StructureBlockEntity structureBlockEntity = (StructureBlockEntity)serverLevel.getBlockEntity(blockPosx);
-         BlockPos blockPos2 = structureBlockEntity.getBlockPos();
+         BlockPos blockPos2x = structureBlockEntity.getBlockPos(); // MagmaCube - decompile error
          BoundingBox boundingBox = StructureUtils.getStructureBoundingBox(structureBlockEntity);
-         StructureUtils.clearSpaceForStructure(boundingBox, blockPos2.getY(), serverLevel);
+         StructureUtils.clearSpaceForStructure(boundingBox, blockPos2x.getY(), serverLevel); // MagmaCube - decompile error
       });
    }
 
diff --git a/src/main/java/net/minecraft/nbt/NbtOps.java b/src/main/java/net/minecraft/nbt/NbtOps.java
index 874b54256b78a2b844e052a00f92285e7480c770..482f527c6fa5fc07f71ab1655c91435bb7e6314c 100644
--- a/src/main/java/net/minecraft/nbt/NbtOps.java
+++ b/src/main/java/net/minecraft/nbt/NbtOps.java
@@ -127,19 +127,19 @@ public class NbtOps implements DynamicOps<Tag> {
    private static <T extends Tag> void fillOne(CollectionTag<T> collectionTag, Tag tag, Tag tag2) {
       if (tag instanceof CollectionTag) {
          CollectionTag<?> collectionTag2 = (CollectionTag)tag;
-         collectionTag2.forEach((tagx) -> collectionTag.add(tagx));
+         collectionTag2.forEach((tagx) -> collectionTag.add((T) tagx)); // MagmaCube - decompile error
       }
 
-      collectionTag.add(tag2);
+      collectionTag.add((T) tag2); // MagmaCube - decompile error
    }
 
    private static <T extends Tag> void fillMany(CollectionTag<T> collectionTag, Tag tag, List<Tag> list) {
       if (tag instanceof CollectionTag) {
          CollectionTag<?> collectionTag2 = (CollectionTag)tag;
-         collectionTag2.forEach((tagx) -> collectionTag.add(tagx));
+         collectionTag2.forEach((tagx) -> collectionTag.add((T) tagx)); // MagmaCube - decompile error
       }
 
-      list.forEach((tagx) -> collectionTag.add(tagx));
+      list.forEach((tagx) -> collectionTag.add((T) tagx)); // MagmaCube - decompile error
    }
 
    public DataResult<Tag> mergeToList(Tag tag, Tag tag2) {
@@ -191,11 +191,13 @@ public class NbtOps implements DynamicOps<Tag> {
 
          List<Tag> list = Lists.newArrayList();
          mapLike.entries().forEach((pair) -> {
-            Tag tag = (Tag)pair.getFirst();
-            if (!(tag instanceof StringTag)) {
-               list.add(tag);
+            // MagmaCube start - decompile error
+            Tag tagx = (Tag)pair.getFirst();
+            if (!(tagx instanceof StringTag)) {
+               list.add(tagx);
             } else {
-               compoundTag.put(tag.getAsString(), (Tag)pair.getSecond());
+               compoundTag.put(tagx.getAsString(), (Tag)pair.getSecond());
+               // MagmaCube end - decompile error
             }
          });
          return !list.isEmpty() ? DataResult.error("some keys are not strings: " + list, compoundTag) : DataResult.success(compoundTag);
@@ -216,7 +218,8 @@ public class NbtOps implements DynamicOps<Tag> {
          return DataResult.error("Not a map: " + tag);
       } else {
          CompoundTag compoundTag = (CompoundTag)tag;
-         return DataResult.success((Consumer)(biConsumer) -> compoundTag.getAllKeys().forEach((s) -> biConsumer.accept(this.createString(s), compoundTag.get(s))));
+         // MagmaCube - decompile error
+         return DataResult.success((biConsumer) -> compoundTag.getAllKeys().forEach((s) -> biConsumer.accept(this.createString(s), compoundTag.get(s))));
       }
    }
 
@@ -267,7 +270,7 @@ public class NbtOps implements DynamicOps<Tag> {
    }
 
    public DataResult<ByteBuffer> getByteBuffer(Tag tag) {
-      return tag instanceof ByteArrayTag ? DataResult.success(ByteBuffer.wrap(((ByteArrayTag)tag).getAsByteArray())) : super.getByteBuffer(tag);
+      return tag instanceof ByteArrayTag ? DataResult.success(ByteBuffer.wrap(((ByteArrayTag)tag).getAsByteArray())) : DynamicOps.super.getByteBuffer(tag); // MagmaCube - decompile error
    }
 
    public Tag createByteList(ByteBuffer byteBuffer) {
@@ -275,7 +278,7 @@ public class NbtOps implements DynamicOps<Tag> {
    }
 
    public DataResult<IntStream> getIntStream(Tag tag) {
-      return tag instanceof IntArrayTag ? DataResult.success(Arrays.stream(((IntArrayTag)tag).getAsIntArray())) : super.getIntStream(tag);
+      return tag instanceof IntArrayTag ? DataResult.success(Arrays.stream(((IntArrayTag)tag).getAsIntArray())) : DynamicOps.super.getIntStream(tag); // MagmaCube - decompile error
    }
 
    public Tag createIntList(IntStream intStream) {
@@ -283,7 +286,7 @@ public class NbtOps implements DynamicOps<Tag> {
    }
 
    public DataResult<LongStream> getLongStream(Tag tag) {
-      return tag instanceof LongArrayTag ? DataResult.success(Arrays.stream(((LongArrayTag)tag).getAsLongArray())) : super.getLongStream(tag);
+      return tag instanceof LongArrayTag ? DataResult.success(Arrays.stream(((LongArrayTag)tag).getAsLongArray())) : DynamicOps.super.getLongStream(tag); // MagmaCube - decompile error
    }
 
    public Tag createLongList(LongStream longStream) {
diff --git a/src/main/java/net/minecraft/nbt/NbtUtils.java b/src/main/java/net/minecraft/nbt/NbtUtils.java
index 029d38dac01acbf5e04902ba438fb7fbad452814..6a967cb6ab9a708a6c12c75ed82f74dd3f3c6873 100644
--- a/src/main/java/net/minecraft/nbt/NbtUtils.java
+++ b/src/main/java/net/minecraft/nbt/NbtUtils.java
@@ -41,8 +41,10 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public final class NbtUtils {
-   private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.comparingInt((listTag) -> listTag.getInt(1)).thenComparingInt((listTag) -> listTag.getInt(0)).thenComparingInt((listTag) -> listTag.getInt(2));
-   private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.comparingDouble((listTag) -> listTag.getDouble(1)).thenComparingDouble((listTag) -> listTag.getDouble(0)).thenComparingDouble((listTag) -> listTag.getDouble(2));
+   // MagmaCube start - decompile error
+   private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.<ListTag>comparingInt((listTag) -> listTag.getInt(1)).thenComparingInt((listTag) -> listTag.getInt(0)).thenComparingInt((listTag) -> listTag.getInt(2));
+   private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.<ListTag>comparingDouble((listTag) -> listTag.getDouble(1)).thenComparingDouble((listTag) -> listTag.getDouble(0)).thenComparingDouble((listTag) -> listTag.getDouble(2));
+   // MagmaCube end - decompile error
    public static final String SNBT_DATA_TAG = "data";
    private static final char PROPERTIES_START = '{';
    private static final char PROPERTIES_END = '}';
@@ -234,7 +236,7 @@ public final class NbtUtils {
    private static <S extends StateHolder<?, S>, T extends Comparable<T>> S setValueHelper(S stateHolder, Property<T> property, String s, CompoundTag compoundTag, CompoundTag compoundTag2) {
       Optional<T> optional = property.getValue(compoundTag.getString(s));
       if (optional.isPresent()) {
-         return stateHolder.setValue(property, (Comparable)optional.get());
+         return stateHolder.setValue(property, optional.get()); // MagmaCube - decompile error
       } else {
          LOGGER.warn("Unable to read property: {} with value: {} for blockstate: {}", s, compoundTag.getString(s), compoundTag2.toString());
          return stateHolder;
@@ -519,13 +521,13 @@ public final class NbtUtils {
          ListTag listTag4 = new ListTag();
          ListTag listTag5 = compoundTag.getList("palettes", 9);
          listTag5.stream().map(ListTag.class::cast).forEach((listTag3x) -> {
-            CompoundTag compoundTag = new CompoundTag();
+            CompoundTag compoundTagx = new CompoundTag(); // MagmaCube - decompile error
 
             for(int i = 0; i < listTag3x.size(); ++i) {
-               compoundTag.putString(listTag3.getString(i), packBlockState(listTag3x.getCompound(i)));
+               compoundTagx.putString(listTag3.getString(i), packBlockState(listTag3x.getCompound(i))); // MagmaCube - decompile error
             }
 
-            listTag4.add(compoundTag);
+            listTag4.add(compoundTagx); // MagmaCube - decompile error
          });
          compoundTag.put("palettes", listTag4);
       }
@@ -603,8 +605,8 @@ public final class NbtUtils {
          CompoundTag compoundTag2 = new CompoundTag();
          if (i + 2 <= s.length()) {
             String s3 = s.substring(i + 1, s.indexOf(125, i));
-            COMMA_SPLITTER.split(s3).forEach((s2) -> {
-               List<String> list = COLON_SPLITTER.splitToList(s2);
+            COMMA_SPLITTER.split(s3).forEach((s2x) -> { // MagmaCube - decompile error
+               List<String> list = COLON_SPLITTER.splitToList(s2x); // MagmaCube - decompile error
                if (list.size() == 2) {
                   compoundTag2.putString((String)list.get(0), (String)list.get(1));
                } else {
diff --git a/src/main/java/net/minecraft/nbt/TagParser.java b/src/main/java/net/minecraft/nbt/TagParser.java
index 56cee538f47a43b03a8026b30d6d41fcfeab0586..3a8609f10ad6ccbdfa991f18caa0c1b6df432e7c 100644
--- a/src/main/java/net/minecraft/nbt/TagParser.java
+++ b/src/main/java/net/minecraft/nbt/TagParser.java
@@ -235,11 +235,11 @@ public class TagParser {
             }
 
             if (tagType2 == ByteTag.TYPE) {
-               list.add(((NumericTag)tag).getAsByte());
+               list.add((T)(Object)((NumericTag)tag).getAsByte()); // MagmaCube - decompile error
             } else if (tagType2 == LongTag.TYPE) {
-               list.add(((NumericTag)tag).getAsLong());
+               list.add((T)(Object)((NumericTag)tag).getAsLong()); // MagmaCube - decompile error
             } else {
-               list.add(((NumericTag)tag).getAsInt());
+               list.add((T)(Object)((NumericTag)tag).getAsInt()); // MagmaCube - decompile error
             }
 
             if (this.hasElementSeparator()) {
diff --git a/src/main/java/net/minecraft/network/ConnectionProtocol.java b/src/main/java/net/minecraft/network/ConnectionProtocol.java
index 1c23947d160790400d0cd995d2f13da0d6a3474b..076d1ae868e155fbb0abfa2eceb8208a219cbb9d 100644
--- a/src/main/java/net/minecraft/network/ConnectionProtocol.java
+++ b/src/main/java/net/minecraft/network/ConnectionProtocol.java
@@ -12,6 +12,7 @@ import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket;
 import net.minecraft.network.protocol.game.ClientboundAddMobPacket;
@@ -113,6 +114,7 @@ import net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket;
+import net.minecraft.network.protocol.game.ServerGamePacketListener;
 import net.minecraft.network.protocol.game.ServerboundAcceptTeleportationPacket;
 import net.minecraft.network.protocol.game.ServerboundBlockEntityTagQuery;
 import net.minecraft.network.protocol.game.ServerboundChangeDifficultyPacket;
@@ -159,25 +161,30 @@ import net.minecraft.network.protocol.game.ServerboundTeleportToEntityPacket;
 import net.minecraft.network.protocol.game.ServerboundUseItemOnPacket;
 import net.minecraft.network.protocol.game.ServerboundUseItemPacket;
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
+import net.minecraft.network.protocol.handshake.ServerHandshakePacketListener;
+import net.minecraft.network.protocol.login.ClientLoginPacketListener;
 import net.minecraft.network.protocol.login.ClientboundCustomQueryPacket;
 import net.minecraft.network.protocol.login.ClientboundGameProfilePacket;
 import net.minecraft.network.protocol.login.ClientboundHelloPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginCompressionPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
+import net.minecraft.network.protocol.login.ServerLoginPacketListener;
 import net.minecraft.network.protocol.login.ServerboundCustomQueryPacket;
 import net.minecraft.network.protocol.login.ServerboundHelloPacket;
 import net.minecraft.network.protocol.login.ServerboundKeyPacket;
+import net.minecraft.network.protocol.status.ClientStatusPacketListener;
 import net.minecraft.network.protocol.status.ClientboundPongResponsePacket;
 import net.minecraft.network.protocol.status.ClientboundStatusResponsePacket;
+import net.minecraft.network.protocol.status.ServerStatusPacketListener;
 import net.minecraft.network.protocol.status.ServerboundPingRequestPacket;
 import net.minecraft.network.protocol.status.ServerboundStatusRequestPacket;
 import org.apache.logging.log4j.LogManager;
 
 public enum ConnectionProtocol {
-   HANDSHAKING(-1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
-   PLAY(0, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddMobPacket.class, ClientboundAddMobPacket::new).addPacket(ClientboundAddPaintingPacket.class, ClientboundAddPaintingPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAddVibrationSignalPacket.class, ClientboundAddVibrationSignalPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockBreakAckPacket.class, ClientboundBlockBreakAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPacket.class, ClientboundChatPacket::new).addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkPacket.class, ClientboundLevelChunkPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new).addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new).addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntityPacket.class, ClientboundRemoveEntityPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new).addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new).addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new).addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new).addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new).addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new).addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read).addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
-   STATUS(1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
-   LOGIN(2, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
+   HANDSHAKING(-1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerHandshakePacketListener>()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
+   PLAY(0, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientGamePacketListener>()).addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddMobPacket.class, ClientboundAddMobPacket::new).addPacket(ClientboundAddPaintingPacket.class, ClientboundAddPaintingPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAddVibrationSignalPacket.class, ClientboundAddVibrationSignalPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockBreakAckPacket.class, ClientboundBlockBreakAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPacket.class, ClientboundChatPacket::new).addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkPacket.class, ClientboundLevelChunkPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new).addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new).addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntityPacket.class, ClientboundRemoveEntityPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new).addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new).addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new).addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new).addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new).addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new).addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerGamePacketListener>()).addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read).addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
+   STATUS(1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerStatusPacketListener>()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientStatusPacketListener>()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
+   LOGIN(2, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientLoginPacketListener>()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerLoginPacketListener>()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
 
    private static final int MIN_PROTOCOL_ID = -1;
    private static final int MAX_PROTOCOL_ID = 2;
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 84547191c69f82b690cbf334d1ce197d81b108f6..a48a8502949b1c957a48d70307cb01daf819cbdb 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -137,7 +137,7 @@ public class FriendlyByteBuf extends ByteBuf {
 
    public void writeIntIdList(IntList intList) {
       this.writeVarInt(intList.size());
-      intList.forEach(this::writeVarInt);
+      intList.forEach((java.util.function.IntConsumer) this::writeVarInt); // MagmaCube - decompile error
    }
 
    public <K, V, M extends Map<K, V>> M readMap(IntFunction<M> intFunction, Function<FriendlyByteBuf, K> function, Function<FriendlyByteBuf, V> function2) {
diff --git a/src/main/java/net/minecraft/network/chat/ComponentUtils.java b/src/main/java/net/minecraft/network/chat/ComponentUtils.java
index 7d307027e9aae9670bc205462f7dbeacfcc7962c..dbf93308d08b8645ca3d6fbbe24038db12e15c22 100644
--- a/src/main/java/net/minecraft/network/chat/ComponentUtils.java
+++ b/src/main/java/net/minecraft/network/chat/ComponentUtils.java
@@ -79,7 +79,7 @@ public class ComponentUtils {
       if (collection.isEmpty()) {
          return TextComponent.EMPTY;
       } else if (collection.size() == 1) {
-         return (Component)function.apply((Comparable)collection.iterator().next());
+         return (Component)function.apply(collection.iterator().next());
       } else {
          List<T> list = Lists.newArrayList(collection);
          list.sort(Comparable::compareTo);
diff --git a/src/main/java/net/minecraft/network/chat/NbtComponent.java b/src/main/java/net/minecraft/network/chat/NbtComponent.java
index 5b372c40d6b3a2ffeb1e75f96fa466eadf2cc3ef..f568c94dad22fb3e20ceb6804a3c0dd09b7ae81f 100644
--- a/src/main/java/net/minecraft/network/chat/NbtComponent.java
+++ b/src/main/java/net/minecraft/network/chat/NbtComponent.java
@@ -85,7 +85,8 @@ public abstract class NbtComponent extends BaseComponent implements ContextAware
                }
             }).reduce((mutableComponent, mutableComponent2) -> mutableComponent.append(component).append(mutableComponent2)).orElseGet(() -> new TextComponent(""));
          } else {
-            return (MutableComponent)ComponentUtils.updateForEntity(commandSourceStack, this.separator, entity, i).map((mutableComponent) -> (MutableComponent)stream.map((s) -> new TextComponent(s)).reduce((mutableComponent2, mutableComponent3) -> mutableComponent2.append(mutableComponent).append(mutableComponent3)).orElseGet(() -> new TextComponent(""))).orElseGet(() -> new TextComponent((String)stream.collect(Collectors.joining(", "))));
+            // MagmaCube - decompile error
+            return (MutableComponent)ComponentUtils.updateForEntity(commandSourceStack, this.separator, entity, i).map((mutableComponent) -> (MutableComponent)stream.<MutableComponent>map((s) -> new TextComponent(s)).reduce((mutableComponent2, mutableComponent3) -> mutableComponent2.append(mutableComponent).append(mutableComponent3)).orElseGet(() -> new TextComponent(""))).orElseGet(() -> new TextComponent((String)stream.collect(Collectors.joining(", "))));
          }
       } else {
          return new TextComponent("");
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
index 34bd1c017865496a0aaaff82f756253a5e3e1020..673e80ed5a4421ff304040c60994c953eaa73024 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
@@ -31,7 +31,7 @@ public class ClientboundUpdateAttributesPacket implements Packet<ClientGamePacke
          ResourceLocation resourceLocation = friendlyByteBufx.readResourceLocation();
          Attribute attribute = Registry.ATTRIBUTE.get(resourceLocation);
          double d = friendlyByteBufx.readDouble();
-         List<AttributeModifier> list = friendlyByteBufx.readList((friendlyByteBuf) -> new AttributeModifier(friendlyByteBuf.readUUID(), "Unknown synced attribute modifier", friendlyByteBuf.readDouble(), AttributeModifier.Operation.fromValue(friendlyByteBuf.readByte())));
+         List<AttributeModifier> list = friendlyByteBufx.readList((friendlyByteBufxx) -> new AttributeModifier(friendlyByteBufxx.readUUID(), "Unknown synced attribute modifier", friendlyByteBufxx.readDouble(), AttributeModifier.Operation.fromValue(friendlyByteBufxx.readByte()))); // MagmaCube - decompile error
          return new ClientboundUpdateAttributesPacket.AttributeSnapshot(attribute, d, list);
       });
    }
@@ -41,11 +41,13 @@ public class ClientboundUpdateAttributesPacket implements Packet<ClientGamePacke
       friendlyByteBuf.writeCollection(this.attributes, (friendlyByteBufx, attributeSnapshot) -> {
          friendlyByteBufx.writeResourceLocation(Registry.ATTRIBUTE.getKey(attributeSnapshot.getAttribute()));
          friendlyByteBufx.writeDouble(attributeSnapshot.getBase());
-         friendlyByteBufx.writeCollection(attributeSnapshot.getModifiers(), (friendlyByteBuf, attributeModifier) -> {
-            friendlyByteBuf.writeUUID(attributeModifier.getId());
-            friendlyByteBuf.writeDouble(attributeModifier.getAmount());
-            friendlyByteBuf.writeByte(attributeModifier.getOperation().toValue());
+         // MagmaCube start - decompile error
+         friendlyByteBufx.writeCollection(attributeSnapshot.getModifiers(), (friendlyByteBufxx, attributeModifier) -> {
+            friendlyByteBufxx.writeUUID(attributeModifier.getId());
+            friendlyByteBufxx.writeDouble(attributeModifier.getAmount());
+            friendlyByteBufxx.writeByte(attributeModifier.getOperation().toValue());
          });
+         // MagmaCube end - decompile error
       });
    }
 
diff --git a/src/main/java/net/minecraft/resources/RegistryFileCodec.java b/src/main/java/net/minecraft/resources/RegistryFileCodec.java
index 2957286aa9e7c266d678c13744fe2d781958bf44..3a7e9ccff0af8df062fb3ddf9543f2761de66aaa 100644
--- a/src/main/java/net/minecraft/resources/RegistryFileCodec.java
+++ b/src/main/java/net/minecraft/resources/RegistryFileCodec.java
@@ -6,6 +6,7 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.DynamicOps;
 import java.util.List;
+import java.util.function.Function;
 import java.util.function.Supplier;
 import net.minecraft.core.Registry;
 
@@ -19,7 +20,7 @@ public final class RegistryFileCodec<E> implements Codec<Supplier<E>> {
    }
 
    public static <E> Codec<List<Supplier<E>>> homogeneousList(ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec) {
-      return Codec.either(create(resourceKey, codec, false).listOf(), codec.xmap((object) -> () -> object, Supplier::get).listOf()).xmap((either) -> (List)either.map((list) -> list, (list) -> list), Either::left);
+      return Codec.either(create(resourceKey, codec, false).listOf(), codec.xmap((Function<? super E, Supplier<E>>) (object) -> () -> object, Supplier::get).listOf()).xmap((either) -> either.map((list) -> list, (list) -> list), Either::left); // MagmaCube - decompile error
    }
 
    private static <E> RegistryFileCodec<E> create(ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec, boolean flag) {
@@ -37,7 +38,7 @@ public final class RegistryFileCodec<E> implements Codec<Supplier<E>> {
    }
 
    public <T> DataResult<Pair<Supplier<E>, T>> decode(DynamicOps<T> dynamicOps, T object) {
-      return dynamicOps instanceof RegistryReadOps ? ((RegistryReadOps)dynamicOps).decodeElement(object, this.registryKey, this.elementCodec, this.allowInline) : this.elementCodec.decode(dynamicOps, object).map((pair) -> pair.mapFirst((object) -> () -> object));
+      return dynamicOps instanceof RegistryReadOps ? ((RegistryReadOps)dynamicOps).decodeElement(object, this.registryKey, this.elementCodec, this.allowInline) : this.elementCodec.decode(dynamicOps, object).map((pair) -> pair.mapFirst((objectx) -> () -> objectx)); // MagmaCube - decompile error
    }
 
    public String toString() {
diff --git a/src/main/java/net/minecraft/resources/RegistryReadOps.java b/src/main/java/net/minecraft/resources/RegistryReadOps.java
index 4c701133b4306395b69f96829959947f24f20cef..98e1c24a9ed29603222d551b9fdd787a73803d34 100644
--- a/src/main/java/net/minecraft/resources/RegistryReadOps.java
+++ b/src/main/java/net/minecraft/resources/RegistryReadOps.java
@@ -69,7 +69,7 @@ public class RegistryReadOps<T> extends DelegatingOps<T> {
       this.resources = resourceAccess;
       this.registryAccess = registryAccess;
       this.readCache = identityHashMap;
-      this.jsonOps = dynamicOps == JsonOps.INSTANCE ? this : new RegistryReadOps(JsonOps.INSTANCE, resourceAccess, registryAccess, identityHashMap);
+      this.jsonOps = dynamicOps == JsonOps.INSTANCE ? (RegistryReadOps<JsonElement>) this : new RegistryReadOps(JsonOps.INSTANCE, resourceAccess, registryAccess, identityHashMap);
    }
 
    protected <E> DataResult<Pair<Supplier<E>, T>> decodeElement(T object, ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec, boolean flag) {
@@ -80,7 +80,7 @@ public class RegistryReadOps<T> extends DelegatingOps<T> {
          WritableRegistry<E> writableRegistry = (WritableRegistry)optional.get();
          DataResult<Pair<ResourceLocation, T>> dataResult = ResourceLocation.CODEC.decode(this.delegate, object);
          if (!dataResult.result().isPresent()) {
-            return !flag ? DataResult.error("Inline definitions not allowed here") : codec.decode(this, object).map((pairx) -> pairx.mapFirst((object) -> () -> object));
+            return !flag ? DataResult.error("Inline definitions not allowed here") : codec.decode(this, object).map((pairx) -> pairx.mapFirst((objecta) -> () -> objecta)); // MagmaCube - decompile error
          } else {
             Pair<ResourceLocation, T> pair = (Pair)dataResult.result().get();
             ResourceLocation resourceLocation = (ResourceLocation)pair.getFirst();
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index c120eb5ce619c07fe0c0960aafc7381e6f6608ed..4fe4d19727a6aef988cf280e98626831efe9f174 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -164,17 +164,18 @@ public class Main {
          levelStorageAccess.saveDataTag(registryHolder, worldData);
          WorldData worldData2 = worldData;
          final DedicatedServer dedicatedServer = MinecraftServer.spin((threadx) -> {
-            DedicatedServer dedicatedServer = new DedicatedServer(threadx, registryHolder, levelStorageAccess, packRepository, serverResources, worldData2, dedicatedServerSettings, DataFixers.getDataFixer(), minecraftSessionService, gameProfileRepository, gameProfileCache, LoggerChunkProgressListener::new);
-            dedicatedServer.setSingleplayerName((String)optionSet.valueOf(optionSpec9));
-            dedicatedServer.setPort(optionSet.valueOf(optionSpec12));
-            dedicatedServer.setDemo(optionSet.has(optionSpec3));
-            dedicatedServer.setId((String)optionSet.valueOf(optionSpec13));
-            boolean flag = !optionSet.has(optionSpec) && !optionSet.valuesOf(optionSpec14).contains("nogui");
-            if (flag && !GraphicsEnvironment.isHeadless()) {
-               dedicatedServer.showGui();
+            // MagmaCube start - decompile error
+            DedicatedServer dedicatedServerx = new DedicatedServer(threadx, registryHolder, levelStorageAccess, packRepository, serverResources, worldData2, dedicatedServerSettings, DataFixers.getDataFixer(), minecraftSessionService, gameProfileRepository, gameProfileCache, LoggerChunkProgressListener::new);
+            dedicatedServerx.setSingleplayerName((String)optionSet.valueOf(optionSpec9));
+            dedicatedServerx.setPort(optionSet.valueOf(optionSpec12));
+            dedicatedServerx.setDemo(optionSet.has(optionSpec3));
+            dedicatedServerx.setId((String)optionSet.valueOf(optionSpec13));
+            boolean flagx = !optionSet.has(optionSpec) && !optionSet.valuesOf(optionSpec14).contains("nogui");
+            if (flagx && !GraphicsEnvironment.isHeadless()) {
+               dedicatedServerx.showGui();
             }
-
-            return dedicatedServer;
+            return dedicatedServerx;
+            // MagmaCube end - decompile error
          });
          Thread thread = new Thread("Server Shutdown Thread") {
             public void run() {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 263fe48b5790786733090c397bc9a2a26ce1c586..94b93523b8908acc93f78d813b29c70843594a95 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -746,7 +746,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
       }
    }
 
-   protected void doRunTask(TickTask tickTask) {
+   // MagmaCube - protected -> public
+   public void doRunTask(TickTask tickTask) {
       this.getProfiler().incrementCounter("runTask");
       super.doRunTask(tickTask);
    }
@@ -1287,7 +1288,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
    }
 
    public CompletableFuture<Void> reloadResources(Collection<String> collection) {
-      CompletableFuture<Void> completableFuture = CompletableFuture.supplyAsync(() -> (ImmutableList)collection.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()), this).thenCompose((immutableList) -> ServerResources.loadResources(immutableList, this.registryHolder, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this)).thenAcceptAsync((serverResources) -> {
+      CompletableFuture<Void> completableFuture = CompletableFuture.supplyAsync(() -> collection.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()), this).thenCompose((immutableList) -> ServerResources.loadResources(immutableList, this.registryHolder, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this)).thenAcceptAsync((serverResources) -> {
          this.resources.close();
          this.resources = serverResources;
          this.packRepository.setSelected(collection);
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index 2205e3e4c70b16c69241a74ea8db216a666fa583..847c2bdede8304828503a976cabde1bc769e64df 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -154,7 +154,7 @@ public class PlayerAdvancements {
 
                Stream<Entry<ResourceLocation, AdvancementProgress>> stream = map.entrySet().stream().sorted(Comparator.comparing(Entry::getValue));
 
-               for(Entry<ResourceLocation, AdvancementProgress> entry : (List)stream.collect(Collectors.toList())) {
+               for(Entry<ResourceLocation, AdvancementProgress> entry : stream.collect(Collectors.toList())) { // MagmaCube - decompile error
                   Advancement advancement = serverAdvancementManager.getAdvancement((ResourceLocation)entry.getKey());
                   if (advancement == null) {
                      LOGGER.warn("Ignored advancement '{}' in progress file {} - it doesn't exist anymore?", entry.getKey(), this.file);
diff --git a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
index 78d968863997286a70748cc922f54c40d175b544..98f01b7ca0ed75a6bc0e1e3ffaf25acee10633f8 100644
--- a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
+++ b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
@@ -86,7 +86,7 @@ public class ServerFunctionLibrary implements PreparableReloadListener {
       return completableFuture.thenCombine(completableFuture2, Pair::of).thenCompose(preparationBarrier::wait).thenAcceptAsync((pair) -> {
          Map<ResourceLocation, CompletableFuture<CommandFunction>> map = (Map)pair.getSecond();
          Builder<ResourceLocation, CommandFunction> builder = ImmutableMap.builder();
-         map.forEach((resourceLocation, completableFuture) -> completableFuture.handle((commandFunction, throwable) -> {
+         map.forEach((resourceLocation, completableFuturex) -> completableFuturex.handle((commandFunction, throwable) -> { // MagmaCube - decompile error
                if (throwable != null) {
                   LOGGER.error("Failed to load function {}", resourceLocation, throwable);
                } else {
diff --git a/src/main/java/net/minecraft/server/commands/EmoteCommands.java b/src/main/java/net/minecraft/server/commands/EmoteCommands.java
index 831aa0d2bb2eea47f7f0f381e479bedce16a128c..251f9a3c71863b873c5b9a3c27e11f32ed4f9994 100644
--- a/src/main/java/net/minecraft/server/commands/EmoteCommands.java
+++ b/src/main/java/net/minecraft/server/commands/EmoteCommands.java
@@ -24,8 +24,10 @@ public class EmoteCommands {
             if (entity instanceof ServerPlayer) {
                ServerPlayer serverPlayer = (ServerPlayer)entity;
                serverPlayer.getTextFilter().processStreamMessage(s).thenAcceptAsync((filteredText) -> {
-                  String s = filteredText.getFiltered();
-                  Component component = s.isEmpty() ? null : createMessage(commandContext, s);
+                  // MagmaCube start - decompile error
+                  String sx = filteredText.getFiltered();
+                  Component component = sx.isEmpty() ? null : createMessage(commandContext, sx);
+                  // MagmaCube end - decompile error
                   Component component2 = createMessage(commandContext, filteredText.getRaw());
                   minecraftServer.getPlayerList().broadcastMessage(component2, (serverPlayer2) -> serverPlayer.shouldFilterMessageTo(serverPlayer2) ? component : component2, ChatType.CHAT, entity.getUUID());
                }, minecraftServer);
diff --git a/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java b/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java
index ddeba1a8ecd288c42bd3962c1a477ae505b597c3..fe8bec0c8f06c71055781c11e3dc06057905d63f 100644
--- a/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java
@@ -20,6 +20,8 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
 
+import java.util.function.LongConsumer;
+
 public class ForceLoadCommand {
    private static final int MAX_CHUNK_LIMIT = 256;
    private static final Dynamic2CommandExceptionType ERROR_TOO_MANY_CHUNKS = new Dynamic2CommandExceptionType((object, object2) -> new TranslatableComponent("commands.forceload.toobig", object, object2));
@@ -67,7 +69,7 @@ public class ForceLoadCommand {
       ServerLevel serverLevel = commandSourceStack.getLevel();
       ResourceKey<Level> resourceKey = serverLevel.dimension();
       LongSet longSet = serverLevel.getForcedChunks();
-      longSet.forEach((l) -> serverLevel.setChunkForced(ChunkPos.getX(l), ChunkPos.getZ(l), false));
+      longSet.forEach((LongConsumer) (l) -> serverLevel.setChunkForced(ChunkPos.getX(l), ChunkPos.getZ(l), false)); // MagmaCube - decompile error
       commandSourceStack.sendSuccess(new TranslatableComponent("commands.forceload.removed.all", resourceKey.location()), true);
       return 0;
    }
diff --git a/src/main/java/net/minecraft/server/commands/ScheduleCommand.java b/src/main/java/net/minecraft/server/commands/ScheduleCommand.java
index 7b205f86d71be59612c0b1c034e6c20029a8be25..d11a4fec784fd7072cae972acb3e2cc461fa8446 100644
--- a/src/main/java/net/minecraft/server/commands/ScheduleCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ScheduleCommand.java
@@ -58,7 +58,7 @@ public class ScheduleCommand {
             timerQueue.schedule(s, l, new FunctionTagCallback(resourceLocation));
             commandSourceStack.sendSuccess(new TranslatableComponent("commands.schedule.created.tag", resourceLocation, i, l), true);
          });
-         return Math.floorMod(l, Integer.MAX_VALUE);
+         return (int) Math.floorMod(l, Integer.MAX_VALUE);
       }
    }
 
diff --git a/src/main/java/net/minecraft/server/commands/data/DataCommands.java b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
index d3bbce1f009f978da2cf1249106152bc38fffc3f..881074f35aa0068b02628ab5809756ae39305c22 100644
--- a/src/main/java/net/minecraft/server/commands/data/DataCommands.java
+++ b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
@@ -119,7 +119,7 @@ public class DataCommands {
             ArgumentBuilder<CommandSourceStack, ?> argumentBuilder2 = Commands.argument("targetPath", NbtPathArgument.nbtPath());
 
             for(DataCommands.DataProvider dataProvider2 : SOURCE_PROVIDERS) {
-               biConsumer.accept(argumentBuilder2, (DataCommands.DataManipulatorDecorator)(dataManipulator) -> dataProvider2.wrap(Commands.literal("from"), (argumentBuilder) -> argumentBuilder.executes((commandContext) -> {
+               biConsumer.accept(argumentBuilder2, (DataCommands.DataManipulatorDecorator)(dataManipulator) -> dataProvider2.wrap(Commands.literal("from"), (argumentBuilderx) -> argumentBuilderx.executes((commandContext) -> { // MagmaCube - decompile error
                         List<Tag> list = Collections.singletonList(dataProvider2.access(commandContext).getData());
                         return manipulateData(commandContext, dataProvider, dataManipulator, list);
                      }).then(Commands.argument("sourcePath", NbtPathArgument.nbtPath()).executes((commandContext) -> {
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index dec3cc6d55fbe8cecf5c827326955ec3979babba..7f57513f882dba63a4164085353c0d0bc7cc8c22 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -85,7 +85,7 @@ public abstract class Settings<T extends Settings<T>> {
    private static <V extends Number> Function<String, V> wrapNumberDeserializer(Function<String, V> function) {
       return (s) -> {
          try {
-            return (Number)function.apply(s);
+            return function.apply(s); // MagmaCube - decompile error
          } catch (NumberFormatException var3) {
             return null;
          }
@@ -129,13 +129,15 @@ public abstract class Settings<T extends Settings<T>> {
       String s2 = this.getStringRaw(s);
       V object2 = (V)MoreObjects.firstNonNull(s2 != null ? function.apply(s2) : null, object);
       this.properties.put(s, function2.apply(object2));
-      return new Settings.MutableValue<>(s, object2, function2);
+      return new Settings.MutableValue(s, object2, function2); // MagmaCube - decompile error
    }
 
    protected <V> V get(String s, Function<String, V> function, UnaryOperator<V> unaryOperator, Function<V, String> function2, V object) {
       return this.get(s, (sx) -> {
-         V object = (V)function.apply(sx);
-         return object != null ? unaryOperator.apply(object) : null;
+         // MagmaCube start - decompile error
+         V obj = (V)function.apply(sx);
+         return obj != null ? unaryOperator.apply(obj) : null;
+         // MagmaCube end - decompile error
       }, function2, object);
    }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index a5cf9b3411806d49fa095a5c99a419384c9c94d7..807e50094352608439a0aabea711caa1b91536f5 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -496,9 +496,9 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
       Executor executor = (runnable) -> this.worldgenMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkHolder, runnable));
       return completableFuture.thenComposeAsync((either) -> (CompletionStage)either.map((list) -> {
             try {
-               CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture = chunkStatus.generate(executor, this.level, this.generator, this.structureManager, this.lightEngine, (chunkAccess) -> this.protoChunkToFullChunk(chunkHolder), list);
+               CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuturex = chunkStatus.generate(executor, this.level, this.generator, this.structureManager, this.lightEngine, (chunkAccess) -> this.protoChunkToFullChunk(chunkHolder), list);
                this.progressListener.onStatusChange(chunkPos, chunkStatus);
-               return completableFuture;
+               return completableFuturex;
             } catch (Exception var9) {
                var9.getStackTrace();
                CrashReport crashReport = CrashReport.forThrowable(var9, "Exception generating new chunk");
@@ -547,7 +547,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             if (protoChunk instanceof ImposterProtoChunk) {
                levelChunk = ((ImposterProtoChunk)protoChunk).getWrapped();
             } else {
-               levelChunk = new LevelChunk(this.level, protoChunk, (levelChunk) -> postLoadProtoChunk(this.level, protoChunk.getEntities()));
+               levelChunk = new LevelChunk(this.level, protoChunk, (levelChunkIn) -> postLoadProtoChunk(this.level, protoChunk.getEntities()));
                chunkHolder.replaceProtoChunk(new ImposterProtoChunk(levelChunk));
             }
 
@@ -659,9 +659,9 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             ChunkPos chunkPos = chunkHolder.getPos();
             Packet<?>[] packets = new Packet[2];
             this.getPlayers(chunkPos, false).forEach((serverPlayer) -> {
-               int i2 = checkerboardDistance(chunkPos, serverPlayer, true);
-               boolean flag = i2 <= i3;
-               boolean flag2 = i2 <= this.viewDistance;
+               int i2In = checkerboardDistance(chunkPos, serverPlayer, true);
+               boolean flag = i2In <= i3;
+               boolean flag2 = i2In <= this.viewDistance;
                this.updateChunkTracking(serverPlayer, chunkPos, packets, flag, flag2);
             });
          }
@@ -790,7 +790,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
          }
       }
 
-      int i = SectionPos.blockToSectionCoord(serverPlayer.getBlockX());
+      int ix = SectionPos.blockToSectionCoord(serverPlayer.getBlockX());
       int i2 = SectionPos.blockToSectionCoord(serverPlayer.getBlockZ());
       SectionPos sectionPos = serverPlayer.getLastSectionPos();
       SectionPos sectionPos2 = SectionPos.of(serverPlayer);
@@ -824,17 +824,17 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
       int i3 = sectionPos.x();
       int i4 = sectionPos.z();
-      if (Math.abs(i3 - i) <= this.viewDistance * 2 && Math.abs(i4 - i2) <= this.viewDistance * 2) {
-         int i5 = Math.min(i, i3) - this.viewDistance;
+      if (Math.abs(i3 - ix) <= this.viewDistance * 2 && Math.abs(i4 - i2) <= this.viewDistance * 2) {
+         int i5 = Math.min(ix, i3) - this.viewDistance;
          int i6 = Math.min(i2, i4) - this.viewDistance;
-         int i7 = Math.max(i, i3) + this.viewDistance;
+         int i7 = Math.max(ix, i3) + this.viewDistance;
          int i8 = Math.max(i2, i4) + this.viewDistance;
 
          for(int i9 = i5; i9 <= i7; ++i9) {
             for(int i10 = i6; i10 <= i8; ++i10) {
                ChunkPos chunkPos = new ChunkPos(i9, i10);
                boolean flag4 = checkerboardDistance(chunkPos, i3, i4) <= this.viewDistance;
-               boolean flag5 = checkerboardDistance(chunkPos, i, i2) <= this.viewDistance;
+               boolean flag5 = checkerboardDistance(chunkPos, ix, i2) <= this.viewDistance;
                this.updateChunkTracking(serverPlayer, chunkPos, new Packet[2], flag4, flag5);
             }
          }
@@ -848,7 +848,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             }
          }
 
-         for(int i13 = i - this.viewDistance; i13 <= i + this.viewDistance; ++i13) {
+         for(int i13 = ix - this.viewDistance; i13 <= ix + this.viewDistance; ++i13) {
             for(int i14 = i2 - this.viewDistance; i14 <= i2 + this.viewDistance; ++i14) {
                ChunkPos chunkPos3 = new ChunkPos(i13, i14);
                boolean flag8 = false;
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
index c164286084410cb633881bc5d2976e8c98cd8635..9815cace8c018e39e1dde14476173b3807ad4aa7 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
@@ -40,7 +40,7 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
    }
 
    public static ChunkTaskPriorityQueueSorter.Message<Runnable> message(Runnable runnable, long l, IntSupplier intSupplier) {
-      return new ChunkTaskPriorityQueueSorter.Message((processorHandle) -> () -> {
+      return new ChunkTaskPriorityQueueSorter.Message<>((processorHandle) -> () -> { // MagmaCube - decompile error
             runnable.run();
             processorHandle.tell(Unit.INSTANCE);
          }, l, intSupplier);
@@ -59,14 +59,15 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
    }
 
    public <T> ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<T>> getProcessor(ProcessorHandle<T> processorHandle, boolean flag) {
-      return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> {
+      return this.mailbox.<ProcessorHandle<Message<T>>>ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> { // MagmaCube - decompile error
             this.getQueue(processorHandle);
             processorHandle2.tell(ProcessorHandle.of("chunk priority sorter around " + processorHandle.name(), (message) -> this.submit(processorHandle, message.task, message.pos, message.level, flag)));
          })).join();
    }
 
    public ProcessorHandle<ChunkTaskPriorityQueueSorter.Release> getReleaseProcessor(ProcessorHandle<Runnable> processorHandle) {
-      return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> processorHandle2.tell(ProcessorHandle.of("chunk priority sorter around " + processorHandle.name(), (release) -> this.release(processorHandle, release.pos, release.task, release.clearQueue))))).join();
+      // MagmaCube - decompile error
+      return this.mailbox.<ProcessorHandle<ChunkTaskPriorityQueueSorter.Release>>ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> processorHandle2.tell(ProcessorHandle.of("chunk priority sorter around " + processorHandle.name(), (release) -> this.release(processorHandle, release.pos, release.task, release.clearQueue))))).join();
    }
 
    public void onLevelChange(ChunkPos chunkPos, IntSupplier intSupplier, int i, IntConsumer intConsumer) {
@@ -123,9 +124,9 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
    private <T> ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>> getQueue(ProcessorHandle<T> processorHandle) {
       ChunkTaskPriorityQueue<? extends Function<ProcessorHandle<Unit>, ?>> chunkTaskPriorityQueue = (ChunkTaskPriorityQueue)this.queues.get(processorHandle);
       if (chunkTaskPriorityQueue == null) {
-         throw (IllegalArgumentException)Util.pauseInIde((T)(new IllegalArgumentException("No queue for: " + processorHandle)));
+         throw (IllegalArgumentException)Util.pauseInIde((new IllegalArgumentException("No queue for: " + processorHandle))); // MagmaCube - decompile error
       } else {
-         return chunkTaskPriorityQueue;
+         return (ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>>) chunkTaskPriorityQueue; // MagmaCube - decompile error
       }
    }
 
diff --git a/src/main/java/net/minecraft/server/level/DistanceManager.java b/src/main/java/net/minecraft/server/level/DistanceManager.java
index 1a5a7cd6511f02a2b36efc4ea03f49215ecd1cad..3748dad2c9888d8095a71986e833c6da1be47570 100644
--- a/src/main/java/net/minecraft/server/level/DistanceManager.java
+++ b/src/main/java/net/minecraft/server/level/DistanceManager.java
@@ -67,7 +67,7 @@ public abstract class DistanceManager {
 
       while(objectIterator.hasNext()) {
          Entry<SortedArraySet<Ticket<?>>> entry = (Entry)objectIterator.next();
-         if (((SortedArraySet)entry.getValue()).removeIf((ticket) -> ticket.timedOut(this.ticketTickCounter))) {
+         if ((entry.getValue()).removeIf((ticket) -> ticket.timedOut(this.ticketTickCounter))) { // MagmaCube - decompile error
             this.ticketTracker.update(entry.getLongKey(), getTicketLevelAt((SortedArraySet)entry.getValue()), false);
          }
 
@@ -242,7 +242,7 @@ public abstract class DistanceManager {
                Entry<SortedArraySet<Ticket<?>>> entry = (Entry)var3.next();
                ChunkPos chunkPos = new ChunkPos(entry.getLongKey());
 
-               for(Ticket<?> ticket : (SortedArraySet)entry.getValue()) {
+               for(Ticket<?> ticket : entry.getValue()) { // MagmaCube - decompile error
                   fileOutputStream.write(("" + chunkPos.x + "\t" + chunkPos.z + "\t" + ticket.getType() + "\t" + ticket.getTicketLevel() + "\t\n").getBytes(StandardCharsets.UTF_8));
                }
             }
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 25762163b716fc59b678e5186780155ef587adc6..07125fac412453f4665c42a3b6af4688673a692b 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -188,7 +188,7 @@ public class ServerChunkCache extends ChunkSource {
          completableFuture = this.getChunkFutureMainThread(i, i2, chunkStatus, flag);
          this.mainThreadProcessor.managedBlock(completableFuture::isDone);
       } else {
-         completableFuture = CompletableFuture.supplyAsync(() -> this.getChunkFutureMainThread(i, i2, chunkStatus, flag), this.mainThreadProcessor).thenCompose((completableFuture) -> completableFuture);
+         completableFuture = CompletableFuture.supplyAsync(() -> this.getChunkFutureMainThread(i, i2, chunkStatus, flag), this.mainThreadProcessor).thenCompose((completableFuturex) -> completableFuturex); // MagmaCube - decompile error
       }
 
       return completableFuture;
@@ -484,7 +484,8 @@ public class ServerChunkCache extends ChunkSource {
          super.doRunTask(runnable);
       }
 
-      protected boolean pollTask() {
+      // MagmaCube - protected -> public
+      public boolean pollTask() {
          if (ServerChunkCache.this.runDistanceManagerUpdates()) {
             return true;
          } else {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 6fe8d32d0923351d52cb1c3f9e83b24abfa50931..c47936ca30d511fd59e418e1be758aa899067d16 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -413,7 +413,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
    private void wakeUpAllPlayers() {
       this.sleepStatus.removeAllSleepers();
-      ((List)this.players.stream().filter(LivingEntity::isSleeping).collect(Collectors.toList())).forEach((serverPlayer) -> serverPlayer.stopSleepInBed(false, false));
+      this.players.stream().filter(LivingEntity::isSleeping).collect(Collectors.toList()).forEach((serverPlayer) -> serverPlayer.stopSleepInBed(false, false));
    }
 
    public void tickChunk(LevelChunk levelChunk, int i) {
@@ -1305,7 +1305,13 @@ public class ServerLevel extends Level implements WorldGenLevel {
             object2IntOpenHashMap.addTo(s, 1);
          }
 
-         return (String)object2IntOpenHashMap.object2IntEntrySet().stream().sorted(Comparator.comparing(Entry::getIntValue).reversed()).limit(5L).map((entry) -> (String)entry.getKey() + ":" + entry.getIntValue()).collect(Collectors.joining(","));
+         return object2IntOpenHashMap
+                 .object2IntEntrySet()
+                 .stream()
+                 .sorted(Comparator.comparing(Entry<String>::getIntValue).reversed())
+                 .limit(5L)
+                 .map((entry) -> entry.getKey() + ":" + entry.getIntValue())
+                 .collect(Collectors.joining(","));
       } catch (Exception var6) {
          return "";
       }
diff --git a/src/main/java/net/minecraft/server/level/Ticket.java b/src/main/java/net/minecraft/server/level/Ticket.java
index 871755edc0f37226f9a4e1577cc617c6abc606a9..b0867baf435be943d9e632cc6515344a414d3118 100644
--- a/src/main/java/net/minecraft/server/level/Ticket.java
+++ b/src/main/java/net/minecraft/server/level/Ticket.java
@@ -20,7 +20,7 @@ public final class Ticket<T> implements Comparable<Ticket<?>> {
          return i;
       } else {
          int i2 = Integer.compare(System.identityHashCode(this.type), System.identityHashCode(ticket.type));
-         return i2 != 0 ? i2 : this.type.getComparator().compare(this.key, ticket.key);
+         return i2 != 0 ? i2 : this.type.getComparator().compare(this.key, (T) ticket.key); // MagmaCube - decompile error
       }
    }
 
diff --git a/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java b/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java
index 53782b39260e8036fe7b0e35930db04b1e1a813e..73f394871a0a9b4db4f17edb398d01a048b57ddf 100644
--- a/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java
+++ b/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java
@@ -33,7 +33,7 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
             switch(i) {
             case 0:
                LOGGER.debug("Ping: (<1.3.x) from {}:{}", inetSocketAddress.getAddress(), inetSocketAddress.getPort());
-               String s = String.format("%sﾂｧ%dﾂｧ%d", minecraftServer.getMotd(), minecraftServer.getPlayerCount(), minecraftServer.getMaxPlayers());
+               String s = String.format("%s\u00a7%d\u00a7%d", minecraftServer.getMotd(), minecraftServer.getPlayerCount(), minecraftServer.getMaxPlayers());
                this.sendFlushAndClose(channelHandlerContext, this.createReply(s));
                break;
             case 1:
@@ -42,7 +42,7 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
                }
 
                LOGGER.debug("Ping: (1.4-1.5.x) from {}:{}", inetSocketAddress.getAddress(), inetSocketAddress.getPort());
-               String s2 = String.format("ﾂｧ1\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", 127, minecraftServer.getServerVersion(), minecraftServer.getMotd(), minecraftServer.getPlayerCount(), minecraftServer.getMaxPlayers());
+               String s2 = String.format("\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", 127, minecraftServer.getServerVersion(), minecraftServer.getMotd(), minecraftServer.getPlayerCount(), minecraftServer.getMaxPlayers());
                this.sendFlushAndClose(channelHandlerContext, this.createReply(s2));
                break;
             default:
@@ -59,7 +59,7 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
                }
 
                LOGGER.debug("Ping: (1.6) from {}:{}", inetSocketAddress.getAddress(), inetSocketAddress.getPort());
-               String s3 = String.format("ﾂｧ1\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", 127, minecraftServer.getServerVersion(), minecraftServer.getMotd(), minecraftServer.getPlayerCount(), minecraftServer.getMaxPlayers());
+               String s3 = String.format("\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", 127, minecraftServer.getServerVersion(), minecraftServer.getMotd(), minecraftServer.getPlayerCount(), minecraftServer.getMaxPlayers());
                ByteBuf byteBuf2 = this.createReply(s3);
 
                try {
diff --git a/src/main/java/net/minecraft/server/packs/FolderPackResources.java b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
index ebfd5b0b7cb3613934f226f6b8f49204dacfd229..9b765a802cffdd13a048e2796d302710212aeff6 100644
--- a/src/main/java/net/minecraft/server/packs/FolderPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
@@ -4,6 +4,7 @@ import com.google.common.base.CharMatcher;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import java.io.File;
+import java.io.FileFilter; // MagmaCube
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -67,7 +68,7 @@ public class FolderPackResources extends AbstractPackResources {
    public Set<String> getNamespaces(PackType packType) {
       Set<String> set = Sets.newHashSet();
       File file = new File(this.file, packType.getDirectory());
-      File[] files = file.listFiles(DirectoryFileFilter.DIRECTORY);
+      File[] files = file.listFiles((FileFilter) DirectoryFileFilter.DIRECTORY); // MagmaCube - decompile error
       if (files != null) {
          for(File file2 : files) {
             String s = getRelativePath(file, file2);
diff --git a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
index d1f2f6931c365ca5ca9592fa3318bcb33faac6af..e0444dfcaa90e9ecb1b22220c835f0e6005117e6 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
@@ -23,7 +23,7 @@ public class ProfiledReloadInstance extends SimpleReloadInstance<ProfiledReloadI
          AtomicLong atomicLong2 = new AtomicLong();
          ActiveProfiler activeProfiler = new ActiveProfiler(Util.timeSource, () -> 0, false);
          ActiveProfiler activeProfiler2 = new ActiveProfiler(Util.timeSource, () -> 0, false);
-         CompletableFuture<Void> completableFuture = preparableReloadListener.reload(preparationBarrier, resourceManagerx, activeProfiler, activeProfiler2, (runnable) -> executor2x.execute(() -> {
+         CompletableFuture<Void> completableFuturex = preparableReloadListener.reload(preparationBarrier, resourceManagerx, activeProfiler, activeProfiler2, (runnable) -> executor2x.execute(() -> { // MagmaCube - decompile error
                long l = Util.getNanos();
                runnable.run();
                atomicLong.addAndGet(Util.getNanos() - l);
@@ -32,7 +32,7 @@ public class ProfiledReloadInstance extends SimpleReloadInstance<ProfiledReloadI
                runnable.run();
                atomicLong2.addAndGet(Util.getNanos() - l);
             }));
-         return completableFuture.thenApplyAsync((void_) -> new ProfiledReloadInstance.State(preparableReloadListener.getName(), activeProfiler.getResults(), activeProfiler2.getResults(), atomicLong, atomicLong2), executor2);
+         return completableFuturex.thenApplyAsync((void_) -> new ProfiledReloadInstance.State(preparableReloadListener.getName(), activeProfiler.getResults(), activeProfiler2.getResults(), atomicLong, atomicLong2), executor2); // MagmaCube - decompile error
       }, completableFuture);
       this.total.start();
       this.allDone.thenAcceptAsync(this::finish, executor2);
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 8bc247020f77d9b40cbb4a57d000b40e4132b25e..841458bd622d062958143de3e83b929993b871b6 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -315,7 +315,7 @@ public abstract class PlayerList {
          if (entity.hasExactlyOnePlayerPassenger()) {
             LOGGER.debug("Removing player mount");
             serverPlayer.stopRiding();
-            entity.getPassengersAndSelf().forEach((entity) -> entity.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER));
+            entity.getPassengersAndSelf().forEach((entityx) -> entityx.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER)); // MagmaCube - decompile error
          }
       }
 
diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index b9638a3413871e11752948cb4394838c493b2393..d51e15db2d9702c89a6767603e814215ec832986 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -142,7 +142,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
                JsonObject jsonObject = GsonHelper.convertToJsonObject(jsonElement, "entry");
                StoredUserEntry<K> storedUserEntry = this.createEntry(jsonObject);
                if (storedUserEntry.getUser() != null) {
-                  this.map.put(this.getKeyForUser(storedUserEntry.getUser()), storedUserEntry);
+                  this.map.put(this.getKeyForUser(storedUserEntry.getUser()), (V) storedUserEntry); // MagmaCube - decompile error
                }
             }
          } catch (Throwable var8) {
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index 1a413c235818546f783c3652f30c11cedac50088..de6fec64bc9e1cca0d26062db499a395992a1d69 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -106,13 +106,13 @@ public class ServerStatsCounter extends StatsCounter {
                      String s2 = (String)var7.next();
                      if (compoundTag2.contains(s2, 10)) {
                         Util.ifElse(Registry.STAT_TYPE.getOptional(new ResourceLocation(s2)), (statType) -> {
-                           CompoundTag compoundTag2 = compoundTag2.getCompound(s2);
+                           CompoundTag compoundTag2x = compoundTag2.getCompound(s2);
 
-                           for(String s2 : compoundTag2.getAllKeys()) {
-                              if (compoundTag2.contains(s2, 99)) {
-                                 Util.ifElse(this.getStat(statType, s2), (stat) -> this.stats.put(stat, compoundTag2.getInt(s2)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, s2));
+                           for(String s2x : compoundTag2x.getAllKeys()) {
+                              if (compoundTag2x.contains(s2x, 99)) {
+                                 Util.ifElse(this.getStat(statType, s2x), (stat) -> this.stats.put(stat, compoundTag2x.getInt(s2x)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, s2x));
                               } else {
-                                 LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", this.file, compoundTag2.get(s2), s2);
+                                 LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", this.file, compoundTag2x.get(s2x), s2x);
                               }
                            }
 
@@ -175,14 +175,14 @@ public class ServerStatsCounter extends StatsCounter {
          ((JsonObject)map.computeIfAbsent(stat.getType(), (statType) -> new JsonObject())).addProperty(getKey(stat).toString(), entry.getIntValue());
       }
 
-      JsonObject jsonObject = new JsonObject();
+      JsonObject jsonObjectIn = new JsonObject();
 
       for(Entry<StatType<?>, JsonObject> entry2 : map.entrySet()) {
-         jsonObject.add(Registry.STAT_TYPE.getKey((StatType)entry2.getKey()).toString(), (JsonElement)entry2.getValue());
+         jsonObjectIn.add(Registry.STAT_TYPE.getKey(entry2.getKey()).toString(), entry2.getValue());
       }
 
       JsonObject jsonObject2 = new JsonObject();
-      jsonObject2.add("stats", jsonObject);
+      jsonObject2.add("stats", jsonObjectIn);
       jsonObject2.addProperty("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
       return jsonObject2.toString();
    }
diff --git a/src/main/java/net/minecraft/tags/Tag.java b/src/main/java/net/minecraft/tags/Tag.java
index edb88bd5ef2a649326297f57988f4f094a70bf56..1ad7f8c6d2f3b3d964b3f9a7835b211e0927705f 100644
--- a/src/main/java/net/minecraft/tags/Tag.java
+++ b/src/main/java/net/minecraft/tags/Tag.java
@@ -23,7 +23,8 @@ import net.minecraft.util.GsonHelper;
 
 public interface Tag<T> {
    static <T> Codec<Tag<T>> codec(Supplier<TagCollection<T>> supplier) {
-      return ResourceLocation.CODEC.flatXmap((resourceLocation) -> (DataResult)Optional.ofNullable(((TagCollection)supplier.get()).getTag(resourceLocation)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + resourceLocation)), (tag) -> (DataResult)Optional.ofNullable(((TagCollection)supplier.get()).getId(tag)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + tag)));
+      // MagmaCube - decompile error
+      return ResourceLocation.CODEC.flatXmap((resourceLocation) -> Optional.ofNullable((supplier.get()).getTag(resourceLocation)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + resourceLocation)), (tag) -> Optional.ofNullable((supplier.get()).getId(tag)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + tag)));
    }
 
    boolean contains(T var1);
diff --git a/src/main/java/net/minecraft/tags/TagContainer.java b/src/main/java/net/minecraft/tags/TagContainer.java
index cddf156c94744440647c931db2b5c4dedc07ed5a..7eeba31ded2b9793bd9ace40a1add67ed80d9f79 100644
--- a/src/main/java/net/minecraft/tags/TagContainer.java
+++ b/src/main/java/net/minecraft/tags/TagContainer.java
@@ -36,11 +36,11 @@ public class TagContainer {
    public <T, E extends Exception> Tag<T> getTagOrThrow(ResourceKey<? extends Registry<T>> resourceKey, ResourceLocation resourceLocation, Function<ResourceLocation, E> function) throws E {
       TagCollection<T> tagCollection = this.get(resourceKey);
       if (tagCollection == null) {
-         throw (Exception)function.apply(resourceLocation);
+         throw function.apply(resourceLocation); // MagmaCube - decompile error
       } else {
          Tag<T> tag = tagCollection.getTag(resourceLocation);
          if (tag == null) {
-            throw (Exception)function.apply(resourceLocation);
+            throw function.apply(resourceLocation); // MagmaCube - decompile error
          } else {
             return tag;
          }
@@ -50,11 +50,11 @@ public class TagContainer {
    public <T, E extends Exception> ResourceLocation getIdOrThrow(ResourceKey<? extends Registry<T>> resourceKey, Tag<T> tag, Supplier<E> supplier) throws E {
       TagCollection<T> tagCollection = this.get(resourceKey);
       if (tagCollection == null) {
-         throw (Exception)supplier.get();
+         throw supplier.get(); // MagmaCube - decompile error
       } else {
          ResourceLocation resourceLocation = tagCollection.getId(tag);
          if (resourceLocation == null) {
-            throw (Exception)supplier.get();
+            throw supplier.get(); // MagmaCube - decompile error
          } else {
             return resourceLocation;
          }
@@ -62,10 +62,10 @@ public class TagContainer {
    }
 
    public void getAll(TagContainer.CollectionConsumer collectionConsumer) {
-      this.collections.forEach((resourceKey, tagCollection) -> acceptCap(collectionConsumer, resourceKey, tagCollection));
+      this.collections.forEach((resourceKey, tagCollection) -> acceptCap(collectionConsumer, (ResourceKey) resourceKey, (TagCollection) tagCollection)); // MagmaCube - decompile error
    }
 
-   private static <T> void acceptCap(TagContainer.CollectionConsumer collectionConsumer, ResourceKey<? extends Registry<?>> resourceKey, TagCollection<?> tagCollection) {
+   private static <T> void acceptCap(TagContainer.CollectionConsumer collectionConsumer, ResourceKey<? extends Registry<T>> resourceKey, TagCollection<T> tagCollection) { // MagmaCube - decompile error
       collectionConsumer.accept(resourceKey, tagCollection);
    }
 
diff --git a/src/main/java/net/minecraft/tags/TagLoader.java b/src/main/java/net/minecraft/tags/TagLoader.java
index 2ac0a3ac416920e57c7a16bea8f32d7ef0cc1439..1959fc90288bf7081e36a8406e1808b9089e4964 100644
--- a/src/main/java/net/minecraft/tags/TagLoader.java
+++ b/src/main/java/net/minecraft/tags/TagLoader.java
@@ -129,7 +129,7 @@ public class TagLoader<T> {
    public TagCollection<T> build(Map<ResourceLocation, Tag.Builder> map) {
       Map<ResourceLocation, Tag<T>> map2 = Maps.newHashMap();
       Function<ResourceLocation, Tag<T>> function = map2::get;
-      Function<ResourceLocation, T> function2 = (resourceLocation) -> ((Optional)this.idToValue.apply(resourceLocation)).orElse(null);
+      Function<ResourceLocation, T> function2 = (resourceLocation) -> this.idToValue.apply(resourceLocation).orElse(null); // MagmaCube - decompile error
       Multimap<ResourceLocation, ResourceLocation> multimap = HashMultimap.create();
       map.forEach((resourceLocation, builder) -> builder.visitRequiredDependencies((resourceLocation2) -> addDependencyIfNotCyclic(multimap, resourceLocation, resourceLocation2)));
       map.forEach((resourceLocation, builder) -> builder.visitOptionalDependencies((resourceLocation2) -> addDependencyIfNotCyclic(multimap, resourceLocation, resourceLocation2)));
diff --git a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
index 925ea9047a30f5f94d792d641a3b307226958332..d77fc6457d7e6d5185e026837ebb5b0148d8910f 100644
--- a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
+++ b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
@@ -57,7 +57,7 @@ public class ClassInstanceMultiMap<T> extends AbstractCollection<T> {
          throw new IllegalArgumentException("Don't know how to search for " + clazz);
       } else {
          List<? extends T> list = (List)this.byClass.computeIfAbsent(clazz, (clazzx) -> (List)this.allInstances.stream().filter(clazzx::isInstance).collect(Collectors.toList()));
-         return Collections.unmodifiableCollection(list);
+         return (Collection<S>) Collections.unmodifiableCollection(list); // MagmaCube - decompile error
       }
    }
 
diff --git a/src/main/java/net/minecraft/util/FileZipper.java b/src/main/java/net/minecraft/util/FileZipper.java
index cfcfee53b57b79cd5f83b4b3da6fdf3241328eac..dfa2b83b0e837c023fc328c73d4086a00ed57f7d 100644
--- a/src/main/java/net/minecraft/util/FileZipper.java
+++ b/src/main/java/net/minecraft/util/FileZipper.java
@@ -68,7 +68,7 @@ public class FileZipper implements Closeable {
             Stream<Path> stream = Files.find(path, Integer.MAX_VALUE, (pathx, basicFileAttributes) -> basicFileAttributes.isRegularFile(), new FileVisitOption[0]);
 
             try {
-               for(Path path4 : (List)stream.collect(Collectors.toList())) {
+               for(Path path4 : stream.collect(Collectors.toList())) {
                   Path path5 = path2.resolve(path.relativize(path4).toString());
                   Files.createDirectories(path5.getParent());
                   Files.copy(path4, path5);
diff --git a/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java b/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
index 845b8193da2fdc1016a8da5c7f6d3dc037edf093..bb55a2f08bfa76fec05eeb7069e910c3b98ec2c5 100644
--- a/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
+++ b/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
@@ -16,7 +16,7 @@ import javax.annotation.Nullable;
 public class LowerCaseEnumTypeAdapterFactory implements TypeAdapterFactory {
    @Nullable
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
-      Class<T> clazz = typeToken.getRawType();
+      Class<T> clazz = (Class<T>) typeToken.getRawType(); // MagmaCube - decompile error
       if (!clazz.isEnum()) {
          return null;
       } else {
diff --git a/src/main/java/net/minecraft/util/StringDecomposer.java b/src/main/java/net/minecraft/util/StringDecomposer.java
index 23ab977bc5f4d1cac87a2a3ff4b05b7de37759b0..ac46762e071b4330364237341c2c5acc15135b2f 100644
--- a/src/main/java/net/minecraft/util/StringDecomposer.java
+++ b/src/main/java/net/minecraft/util/StringDecomposer.java
@@ -6,7 +6,7 @@ import net.minecraft.network.chat.FormattedText;
 import net.minecraft.network.chat.Style;
 
 public class StringDecomposer {
-   private static final char REPLACEMENT_CHAR = '�ｿｽ';
+   private static final char REPLACEMENT_CHAR = '\ufffd'; // TODO: is it correct?
    private static final Optional<Object> STOP_ITERATION = Optional.of(Unit.INSTANCE);
 
    private static boolean feedChar(Style style, FormattedCharSink formattedCharSink, int i, char c) {
diff --git a/src/main/java/net/minecraft/util/StringRepresentable.java b/src/main/java/net/minecraft/util/StringRepresentable.java
index 5a7c62e42847eee3aadf8153081e62807bcbd36d..a68fe3a43a37b6c93c987aa8e414606c2624e811 100644
--- a/src/main/java/net/minecraft/util/StringRepresentable.java
+++ b/src/main/java/net/minecraft/util/StringRepresentable.java
@@ -18,8 +18,8 @@ public interface StringRepresentable {
    String getSerializedName();
 
    static <E extends Enum<E> & StringRepresentable> Codec<E> fromEnum(Supplier<E[]> supplier, Function<? super String, ? extends E> function) {
-      E[] enums = (Enum[])supplier.get();
-      return fromStringResolver((object) -> ((Enum)object).ordinal(), (i) -> enums[i], function);
+      E[] enums = supplier.get();
+      return fromStringResolver(Enum::ordinal, (i) -> enums[i], function);
    }
 
    static <E extends StringRepresentable> Codec<E> fromStringResolver(final ToIntFunction<E> toIntFunction, final IntFunction<E> intFunction, final Function<? super String, ? extends E> function) {
@@ -29,7 +29,7 @@ public interface StringRepresentable {
          }
 
          public <T> DataResult<Pair<E, T>> decode(DynamicOps<T> dynamicOps, T object) {
-            return dynamicOps.compressMaps() ? dynamicOps.getNumberValue(object).flatMap((number) -> (DataResult)Optional.ofNullable((StringRepresentable)intFunction.apply(number.intValue())).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element id: " + number))).map((stringRepresentable) -> Pair.of(stringRepresentable, dynamicOps.empty())) : dynamicOps.getStringValue(object).flatMap((s) -> (DataResult)Optional.ofNullable((StringRepresentable)function.apply(s)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element name: " + s))).map((stringRepresentable) -> Pair.of(stringRepresentable, dynamicOps.empty()));
+            return dynamicOps.compressMaps() ? dynamicOps.getNumberValue(object).flatMap((number) -> Optional.ofNullable((StringRepresentable)intFunction.apply(number.intValue())).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element id: " + number))).map((stringRepresentable) -> Pair.of((E) stringRepresentable, dynamicOps.empty())) : dynamicOps.getStringValue(object).flatMap((s) -> Optional.ofNullable((StringRepresentable)function.apply(s)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element name: " + s))).map((stringRepresentable) -> Pair.of((E) stringRepresentable, dynamicOps.empty()));
          }
 
          public String toString() {
diff --git a/src/main/java/net/minecraft/util/WeighedRandom.java b/src/main/java/net/minecraft/util/WeighedRandom.java
index 0247fe2daf3a7d1b969dce8b1f1e54b640aef345..1433b8cd0aea5f4bdbcba97081caa1c43225f377 100644
--- a/src/main/java/net/minecraft/util/WeighedRandom.java
+++ b/src/main/java/net/minecraft/util/WeighedRandom.java
@@ -27,7 +27,7 @@ public class WeighedRandom {
 
    public static <T extends WeighedRandom.WeighedRandomItem> Optional<T> getRandomItem(Random random, List<T> list, int i) {
       if (i < 0) {
-         throw (IllegalArgumentException)Util.pauseInIde((T)(new IllegalArgumentException("Negative total weight in getRandomItem")));
+         throw (IllegalArgumentException)Util.pauseInIde((new IllegalArgumentException("Negative total weight in getRandomItem"))); // MagmaCube - decompile error
       } else if (i == 0) {
          return Optional.empty();
       } else {
diff --git a/src/main/java/net/minecraft/util/datafix/DataFixers.java b/src/main/java/net/minecraft/util/datafix/DataFixers.java
index d51f500f909a39322ccc99a074b8df91938dd298..a18b77e02219ebcda329dc0a53234af83dafc581 100644
--- a/src/main/java/net/minecraft/util/datafix/DataFixers.java
+++ b/src/main/java/net/minecraft/util/datafix/DataFixers.java
@@ -551,15 +551,18 @@ public class DataFixers {
       dataFixerBuilder.addFixer(new AddNewChoices(schema131, "Added Glow Squid", References.ENTITY));
       dataFixerBuilder.addFixer(new AddNewChoices(schema131, "Added Glow Item Frame", References.ENTITY));
       Schema schema132 = dataFixerBuilder.addSchema(2690, SAME_NAMESPACED);
-      ImmutableMap<String, String> immutableMap = ImmutableMap.builder().put("minecraft:weathered_copper_block", "minecraft:oxidized_copper_block").put("minecraft:semi_weathered_copper_block", "minecraft:weathered_copper_block").put("minecraft:lightly_weathered_copper_block", "minecraft:exposed_copper_block").put("minecraft:weathered_cut_copper", "minecraft:oxidized_cut_copper").put("minecraft:semi_weathered_cut_copper", "minecraft:weathered_cut_copper").put("minecraft:lightly_weathered_cut_copper", "minecraft:exposed_cut_copper").put("minecraft:weathered_cut_copper_stairs", "minecraft:oxidized_cut_copper_stairs").put("minecraft:semi_weathered_cut_copper_stairs", "minecraft:weathered_cut_copper_stairs").put("minecraft:lightly_weathered_cut_copper_stairs", "minecraft:exposed_cut_copper_stairs").put("minecraft:weathered_cut_copper_slab", "minecraft:oxidized_cut_copper_slab").put("minecraft:semi_weathered_cut_copper_slab", "minecraft:weathered_cut_copper_slab").put("minecraft:lightly_weathered_cut_copper_slab", "minecraft:exposed_cut_copper_slab").put("minecraft:waxed_semi_weathered_copper", "minecraft:waxed_weathered_copper").put("minecraft:waxed_lightly_weathered_copper", "minecraft:waxed_exposed_copper").put("minecraft:waxed_semi_weathered_cut_copper", "minecraft:waxed_weathered_cut_copper").put("minecraft:waxed_lightly_weathered_cut_copper", "minecraft:waxed_exposed_cut_copper").put("minecraft:waxed_semi_weathered_cut_copper_stairs", "minecraft:waxed_weathered_cut_copper_stairs").put("minecraft:waxed_lightly_weathered_cut_copper_stairs", "minecraft:waxed_exposed_cut_copper_stairs").put("minecraft:waxed_semi_weathered_cut_copper_slab", "minecraft:waxed_weathered_cut_copper_slab").put("minecraft:waxed_lightly_weathered_cut_copper_slab", "minecraft:waxed_exposed_cut_copper_slab").build();
+      // MagmaCube - decompile error
+      ImmutableMap<String, String> immutableMap = ImmutableMap.<String, String>builder().put("minecraft:weathered_copper_block", "minecraft:oxidized_copper_block").put("minecraft:semi_weathered_copper_block", "minecraft:weathered_copper_block").put("minecraft:lightly_weathered_copper_block", "minecraft:exposed_copper_block").put("minecraft:weathered_cut_copper", "minecraft:oxidized_cut_copper").put("minecraft:semi_weathered_cut_copper", "minecraft:weathered_cut_copper").put("minecraft:lightly_weathered_cut_copper", "minecraft:exposed_cut_copper").put("minecraft:weathered_cut_copper_stairs", "minecraft:oxidized_cut_copper_stairs").put("minecraft:semi_weathered_cut_copper_stairs", "minecraft:weathered_cut_copper_stairs").put("minecraft:lightly_weathered_cut_copper_stairs", "minecraft:exposed_cut_copper_stairs").put("minecraft:weathered_cut_copper_slab", "minecraft:oxidized_cut_copper_slab").put("minecraft:semi_weathered_cut_copper_slab", "minecraft:weathered_cut_copper_slab").put("minecraft:lightly_weathered_cut_copper_slab", "minecraft:exposed_cut_copper_slab").put("minecraft:waxed_semi_weathered_copper", "minecraft:waxed_weathered_copper").put("minecraft:waxed_lightly_weathered_copper", "minecraft:waxed_exposed_copper").put("minecraft:waxed_semi_weathered_cut_copper", "minecraft:waxed_weathered_cut_copper").put("minecraft:waxed_lightly_weathered_cut_copper", "minecraft:waxed_exposed_cut_copper").put("minecraft:waxed_semi_weathered_cut_copper_stairs", "minecraft:waxed_weathered_cut_copper_stairs").put("minecraft:waxed_lightly_weathered_cut_copper_stairs", "minecraft:waxed_exposed_cut_copper_stairs").put("minecraft:waxed_semi_weathered_cut_copper_slab", "minecraft:waxed_weathered_cut_copper_slab").put("minecraft:waxed_lightly_weathered_cut_copper_slab", "minecraft:waxed_exposed_cut_copper_slab").build();
       dataFixerBuilder.addFixer(ItemRenameFix.create(schema132, "Renamed copper block items to new oxidized terms", createRenamer(immutableMap)));
       dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema132, "Renamed copper blocks to new oxidized terms", createRenamer(immutableMap)));
       Schema schema133 = dataFixerBuilder.addSchema(2691, SAME_NAMESPACED);
-      ImmutableMap<String, String> immutableMap2 = ImmutableMap.builder().put("minecraft:waxed_copper", "minecraft:waxed_copper_block").put("minecraft:oxidized_copper_block", "minecraft:oxidized_copper").put("minecraft:weathered_copper_block", "minecraft:weathered_copper").put("minecraft:exposed_copper_block", "minecraft:exposed_copper").build();
+      // MagmaCube - decompile error
+      ImmutableMap<String, String> immutableMap2 = ImmutableMap.<String, String>builder().put("minecraft:waxed_copper", "minecraft:waxed_copper_block").put("minecraft:oxidized_copper_block", "minecraft:oxidized_copper").put("minecraft:weathered_copper_block", "minecraft:weathered_copper").put("minecraft:exposed_copper_block", "minecraft:exposed_copper").build();
       dataFixerBuilder.addFixer(ItemRenameFix.create(schema133, "Rename copper item suffixes", createRenamer(immutableMap2)));
       dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema133, "Rename copper blocks suffixes", createRenamer(immutableMap2)));
       Schema schema134 = dataFixerBuilder.addSchema(2696, SAME_NAMESPACED);
-      ImmutableMap<String, String> immutableMap3 = ImmutableMap.builder().put("minecraft:grimstone", "minecraft:deepslate").put("minecraft:grimstone_slab", "minecraft:cobbled_deepslate_slab").put("minecraft:grimstone_stairs", "minecraft:cobbled_deepslate_stairs").put("minecraft:grimstone_wall", "minecraft:cobbled_deepslate_wall").put("minecraft:polished_grimstone", "minecraft:polished_deepslate").put("minecraft:polished_grimstone_slab", "minecraft:polished_deepslate_slab").put("minecraft:polished_grimstone_stairs", "minecraft:polished_deepslate_stairs").put("minecraft:polished_grimstone_wall", "minecraft:polished_deepslate_wall").put("minecraft:grimstone_tiles", "minecraft:deepslate_tiles").put("minecraft:grimstone_tile_slab", "minecraft:deepslate_tile_slab").put("minecraft:grimstone_tile_stairs", "minecraft:deepslate_tile_stairs").put("minecraft:grimstone_tile_wall", "minecraft:deepslate_tile_wall").put("minecraft:grimstone_bricks", "minecraft:deepslate_bricks").put("minecraft:grimstone_brick_slab", "minecraft:deepslate_brick_slab").put("minecraft:grimstone_brick_stairs", "minecraft:deepslate_brick_stairs").put("minecraft:grimstone_brick_wall", "minecraft:deepslate_brick_wall").put("minecraft:chiseled_grimstone", "minecraft:chiseled_deepslate").build();
+      // MagmaCube - decompile error
+      ImmutableMap<String, String> immutableMap3 = ImmutableMap.<String, String>builder().put("minecraft:grimstone", "minecraft:deepslate").put("minecraft:grimstone_slab", "minecraft:cobbled_deepslate_slab").put("minecraft:grimstone_stairs", "minecraft:cobbled_deepslate_stairs").put("minecraft:grimstone_wall", "minecraft:cobbled_deepslate_wall").put("minecraft:polished_grimstone", "minecraft:polished_deepslate").put("minecraft:polished_grimstone_slab", "minecraft:polished_deepslate_slab").put("minecraft:polished_grimstone_stairs", "minecraft:polished_deepslate_stairs").put("minecraft:polished_grimstone_wall", "minecraft:polished_deepslate_wall").put("minecraft:grimstone_tiles", "minecraft:deepslate_tiles").put("minecraft:grimstone_tile_slab", "minecraft:deepslate_tile_slab").put("minecraft:grimstone_tile_stairs", "minecraft:deepslate_tile_stairs").put("minecraft:grimstone_tile_wall", "minecraft:deepslate_tile_wall").put("minecraft:grimstone_bricks", "minecraft:deepslate_bricks").put("minecraft:grimstone_brick_slab", "minecraft:deepslate_brick_slab").put("minecraft:grimstone_brick_stairs", "minecraft:deepslate_brick_stairs").put("minecraft:grimstone_brick_wall", "minecraft:deepslate_brick_wall").put("minecraft:chiseled_grimstone", "minecraft:chiseled_deepslate").build();
       dataFixerBuilder.addFixer(ItemRenameFix.create(schema134, "Renamed grimstone block items to deepslate", createRenamer(immutableMap3)));
       dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema134, "Renamed grimstone blocks to deepslate", createRenamer(immutableMap3)));
       Schema schema135 = dataFixerBuilder.addSchema(2700, SAME_NAMESPACED);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
index 50ed45f86b78b0010e43f33cc99c55fe1c677b62..c8be39a824d87d04cf5ca31322f84d33ce69258c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
@@ -45,10 +45,12 @@ public abstract class AbstractUUIDFix extends DataFix {
 
    protected static Optional<Dynamic<?>> createUUIDFromString(Dynamic<?> dynamic, String s) {
       return dynamic.get(s).result().flatMap((dynamic2) -> {
-         String s = dynamic2.asString((String)null);
-         if (s != null) {
+         // MagmaCube start - decompile error
+         String ss = dynamic2.asString((String)null);
+         if (ss != null) {
+            // MagmaCube end - decompile error
             try {
-               UUID uuid = UUID.fromString(s);
+               UUID uuid = UUID.fromString(ss); // MagmaCube - decompile error
                return createUUIDTag(dynamic, uuid.getMostSignificantBits(), uuid.getLeastSignificantBits());
             } catch (IllegalArgumentException var4) {
             }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java b/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
index 2f45fd7161f4cdc65209e7303925d46df9427b25..858a31ce8e6a031b0b072bbccac4749e39a536c9 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
@@ -5,6 +5,7 @@ import com.mojang.datafixers.TypeRewriteRule;
 import com.mojang.datafixers.DSL.TypeReference;
 import com.mojang.datafixers.schemas.Schema;
 import com.mojang.datafixers.types.templates.TaggedChoice.TaggedChoiceType;
+import com.mojang.datafixers.util.Pair;
 
 public class AddNewChoices extends DataFix {
    private final String name;
@@ -27,10 +28,10 @@ public class AddNewChoices extends DataFix {
          throw new IllegalStateException("Could not inject: key type is not the same");
       } else {
          return this.fixTypeEverywhere(s, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
-               if (!taggedChoiceType2.hasType(pair.getFirst())) {
+               if (!((TaggedChoiceType) taggedChoiceType2).hasType(pair.getFirst())) { // MagmaCube - decompile error
                   throw new IllegalArgumentException(String.format("Unknown type %s in %s ", pair.getFirst(), this.type));
                } else {
-                  return pair;
+                  return (Pair) pair; // MagmaCube - decompile error
                }
             });
       }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
index bf7776741bfcf0fd2ca2dec863384fd9e9a798f6..243471ca50bba48dc287429d521a7c74ee745ed0 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
@@ -5,7 +5,8 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class AdvancementsFix extends AdvancementsRenameFix {
-   private static final Map<String, String> RENAMES = ImmutableMap.builder().put("minecraft:recipes/brewing/speckled_melon", "minecraft:recipes/brewing/glistering_melon_slice").put("minecraft:recipes/building_blocks/black_stained_hardened_clay", "minecraft:recipes/building_blocks/black_terracotta").put("minecraft:recipes/building_blocks/blue_stained_hardened_clay", "minecraft:recipes/building_blocks/blue_terracotta").put("minecraft:recipes/building_blocks/brown_stained_hardened_clay", "minecraft:recipes/building_blocks/brown_terracotta").put("minecraft:recipes/building_blocks/cyan_stained_hardened_clay", "minecraft:recipes/building_blocks/cyan_terracotta").put("minecraft:recipes/building_blocks/gray_stained_hardened_clay", "minecraft:recipes/building_blocks/gray_terracotta").put("minecraft:recipes/building_blocks/green_stained_hardened_clay", "minecraft:recipes/building_blocks/green_terracotta").put("minecraft:recipes/building_blocks/light_blue_stained_hardened_clay", "minecraft:recipes/building_blocks/light_blue_terracotta").put("minecraft:recipes/building_blocks/light_gray_stained_hardened_clay", "minecraft:recipes/building_blocks/light_gray_terracotta").put("minecraft:recipes/building_blocks/lime_stained_hardened_clay", "minecraft:recipes/building_blocks/lime_terracotta").put("minecraft:recipes/building_blocks/magenta_stained_hardened_clay", "minecraft:recipes/building_blocks/magenta_terracotta").put("minecraft:recipes/building_blocks/orange_stained_hardened_clay", "minecraft:recipes/building_blocks/orange_terracotta").put("minecraft:recipes/building_blocks/pink_stained_hardened_clay", "minecraft:recipes/building_blocks/pink_terracotta").put("minecraft:recipes/building_blocks/purple_stained_hardened_clay", "minecraft:recipes/building_blocks/purple_terracotta").put("minecraft:recipes/building_blocks/red_stained_hardened_clay", "minecraft:recipes/building_blocks/red_terracotta").put("minecraft:recipes/building_blocks/white_stained_hardened_clay", "minecraft:recipes/building_blocks/white_terracotta").put("minecraft:recipes/building_blocks/yellow_stained_hardened_clay", "minecraft:recipes/building_blocks/yellow_terracotta").put("minecraft:recipes/building_blocks/acacia_wooden_slab", "minecraft:recipes/building_blocks/acacia_slab").put("minecraft:recipes/building_blocks/birch_wooden_slab", "minecraft:recipes/building_blocks/birch_slab").put("minecraft:recipes/building_blocks/dark_oak_wooden_slab", "minecraft:recipes/building_blocks/dark_oak_slab").put("minecraft:recipes/building_blocks/jungle_wooden_slab", "minecraft:recipes/building_blocks/jungle_slab").put("minecraft:recipes/building_blocks/oak_wooden_slab", "minecraft:recipes/building_blocks/oak_slab").put("minecraft:recipes/building_blocks/spruce_wooden_slab", "minecraft:recipes/building_blocks/spruce_slab").put("minecraft:recipes/building_blocks/brick_block", "minecraft:recipes/building_blocks/bricks").put("minecraft:recipes/building_blocks/chiseled_stonebrick", "minecraft:recipes/building_blocks/chiseled_stone_bricks").put("minecraft:recipes/building_blocks/end_bricks", "minecraft:recipes/building_blocks/end_stone_bricks").put("minecraft:recipes/building_blocks/lit_pumpkin", "minecraft:recipes/building_blocks/jack_o_lantern").put("minecraft:recipes/building_blocks/magma", "minecraft:recipes/building_blocks/magma_block").put("minecraft:recipes/building_blocks/melon_block", "minecraft:recipes/building_blocks/melon").put("minecraft:recipes/building_blocks/mossy_stonebrick", "minecraft:recipes/building_blocks/mossy_stone_bricks").put("minecraft:recipes/building_blocks/nether_brick", "minecraft:recipes/building_blocks/nether_bricks").put("minecraft:recipes/building_blocks/pillar_quartz_block", "minecraft:recipes/building_blocks/quartz_pillar").put("minecraft:recipes/building_blocks/red_nether_brick", "minecraft:recipes/building_blocks/red_nether_bricks").put("minecraft:recipes/building_blocks/snow", "minecraft:recipes/building_blocks/snow_block").put("minecraft:recipes/building_blocks/smooth_red_sandstone", "minecraft:recipes/building_blocks/cut_red_sandstone").put("minecraft:recipes/building_blocks/smooth_sandstone", "minecraft:recipes/building_blocks/cut_sandstone").put("minecraft:recipes/building_blocks/stonebrick", "minecraft:recipes/building_blocks/stone_bricks").put("minecraft:recipes/building_blocks/stone_stairs", "minecraft:recipes/building_blocks/cobblestone_stairs").put("minecraft:recipes/building_blocks/string_to_wool", "minecraft:recipes/building_blocks/white_wool_from_string").put("minecraft:recipes/decorations/fence", "minecraft:recipes/decorations/oak_fence").put("minecraft:recipes/decorations/purple_shulker_box", "minecraft:recipes/decorations/shulker_box").put("minecraft:recipes/decorations/slime", "minecraft:recipes/decorations/slime_block").put("minecraft:recipes/decorations/snow_layer", "minecraft:recipes/decorations/snow").put("minecraft:recipes/misc/bone_meal_from_block", "minecraft:recipes/misc/bone_meal_from_bone_block").put("minecraft:recipes/misc/bone_meal_from_bone", "minecraft:recipes/misc/bone_meal").put("minecraft:recipes/misc/gold_ingot_from_block", "minecraft:recipes/misc/gold_ingot_from_gold_block").put("minecraft:recipes/misc/iron_ingot_from_block", "minecraft:recipes/misc/iron_ingot_from_iron_block").put("minecraft:recipes/redstone/fence_gate", "minecraft:recipes/redstone/oak_fence_gate").put("minecraft:recipes/redstone/noteblock", "minecraft:recipes/redstone/note_block").put("minecraft:recipes/redstone/trapdoor", "minecraft:recipes/redstone/oak_trapdoor").put("minecraft:recipes/redstone/wooden_button", "minecraft:recipes/redstone/oak_button").put("minecraft:recipes/redstone/wooden_door", "minecraft:recipes/redstone/oak_door").put("minecraft:recipes/redstone/wooden_pressure_plate", "minecraft:recipes/redstone/oak_pressure_plate").put("minecraft:recipes/transportation/boat", "minecraft:recipes/transportation/oak_boat").put("minecraft:recipes/transportation/golden_rail", "minecraft:recipes/transportation/powered_rail").build();
+   // MagmaCube - decompile error
+   private static final Map<String, String> RENAMES = (Map) ImmutableMap.builder().put("minecraft:recipes/brewing/speckled_melon", "minecraft:recipes/brewing/glistering_melon_slice").put("minecraft:recipes/building_blocks/black_stained_hardened_clay", "minecraft:recipes/building_blocks/black_terracotta").put("minecraft:recipes/building_blocks/blue_stained_hardened_clay", "minecraft:recipes/building_blocks/blue_terracotta").put("minecraft:recipes/building_blocks/brown_stained_hardened_clay", "minecraft:recipes/building_blocks/brown_terracotta").put("minecraft:recipes/building_blocks/cyan_stained_hardened_clay", "minecraft:recipes/building_blocks/cyan_terracotta").put("minecraft:recipes/building_blocks/gray_stained_hardened_clay", "minecraft:recipes/building_blocks/gray_terracotta").put("minecraft:recipes/building_blocks/green_stained_hardened_clay", "minecraft:recipes/building_blocks/green_terracotta").put("minecraft:recipes/building_blocks/light_blue_stained_hardened_clay", "minecraft:recipes/building_blocks/light_blue_terracotta").put("minecraft:recipes/building_blocks/light_gray_stained_hardened_clay", "minecraft:recipes/building_blocks/light_gray_terracotta").put("minecraft:recipes/building_blocks/lime_stained_hardened_clay", "minecraft:recipes/building_blocks/lime_terracotta").put("minecraft:recipes/building_blocks/magenta_stained_hardened_clay", "minecraft:recipes/building_blocks/magenta_terracotta").put("minecraft:recipes/building_blocks/orange_stained_hardened_clay", "minecraft:recipes/building_blocks/orange_terracotta").put("minecraft:recipes/building_blocks/pink_stained_hardened_clay", "minecraft:recipes/building_blocks/pink_terracotta").put("minecraft:recipes/building_blocks/purple_stained_hardened_clay", "minecraft:recipes/building_blocks/purple_terracotta").put("minecraft:recipes/building_blocks/red_stained_hardened_clay", "minecraft:recipes/building_blocks/red_terracotta").put("minecraft:recipes/building_blocks/white_stained_hardened_clay", "minecraft:recipes/building_blocks/white_terracotta").put("minecraft:recipes/building_blocks/yellow_stained_hardened_clay", "minecraft:recipes/building_blocks/yellow_terracotta").put("minecraft:recipes/building_blocks/acacia_wooden_slab", "minecraft:recipes/building_blocks/acacia_slab").put("minecraft:recipes/building_blocks/birch_wooden_slab", "minecraft:recipes/building_blocks/birch_slab").put("minecraft:recipes/building_blocks/dark_oak_wooden_slab", "minecraft:recipes/building_blocks/dark_oak_slab").put("minecraft:recipes/building_blocks/jungle_wooden_slab", "minecraft:recipes/building_blocks/jungle_slab").put("minecraft:recipes/building_blocks/oak_wooden_slab", "minecraft:recipes/building_blocks/oak_slab").put("minecraft:recipes/building_blocks/spruce_wooden_slab", "minecraft:recipes/building_blocks/spruce_slab").put("minecraft:recipes/building_blocks/brick_block", "minecraft:recipes/building_blocks/bricks").put("minecraft:recipes/building_blocks/chiseled_stonebrick", "minecraft:recipes/building_blocks/chiseled_stone_bricks").put("minecraft:recipes/building_blocks/end_bricks", "minecraft:recipes/building_blocks/end_stone_bricks").put("minecraft:recipes/building_blocks/lit_pumpkin", "minecraft:recipes/building_blocks/jack_o_lantern").put("minecraft:recipes/building_blocks/magma", "minecraft:recipes/building_blocks/magma_block").put("minecraft:recipes/building_blocks/melon_block", "minecraft:recipes/building_blocks/melon").put("minecraft:recipes/building_blocks/mossy_stonebrick", "minecraft:recipes/building_blocks/mossy_stone_bricks").put("minecraft:recipes/building_blocks/nether_brick", "minecraft:recipes/building_blocks/nether_bricks").put("minecraft:recipes/building_blocks/pillar_quartz_block", "minecraft:recipes/building_blocks/quartz_pillar").put("minecraft:recipes/building_blocks/red_nether_brick", "minecraft:recipes/building_blocks/red_nether_bricks").put("minecraft:recipes/building_blocks/snow", "minecraft:recipes/building_blocks/snow_block").put("minecraft:recipes/building_blocks/smooth_red_sandstone", "minecraft:recipes/building_blocks/cut_red_sandstone").put("minecraft:recipes/building_blocks/smooth_sandstone", "minecraft:recipes/building_blocks/cut_sandstone").put("minecraft:recipes/building_blocks/stonebrick", "minecraft:recipes/building_blocks/stone_bricks").put("minecraft:recipes/building_blocks/stone_stairs", "minecraft:recipes/building_blocks/cobblestone_stairs").put("minecraft:recipes/building_blocks/string_to_wool", "minecraft:recipes/building_blocks/white_wool_from_string").put("minecraft:recipes/decorations/fence", "minecraft:recipes/decorations/oak_fence").put("minecraft:recipes/decorations/purple_shulker_box", "minecraft:recipes/decorations/shulker_box").put("minecraft:recipes/decorations/slime", "minecraft:recipes/decorations/slime_block").put("minecraft:recipes/decorations/snow_layer", "minecraft:recipes/decorations/snow").put("minecraft:recipes/misc/bone_meal_from_block", "minecraft:recipes/misc/bone_meal_from_bone_block").put("minecraft:recipes/misc/bone_meal_from_bone", "minecraft:recipes/misc/bone_meal").put("minecraft:recipes/misc/gold_ingot_from_block", "minecraft:recipes/misc/gold_ingot_from_gold_block").put("minecraft:recipes/misc/iron_ingot_from_block", "minecraft:recipes/misc/iron_ingot_from_iron_block").put("minecraft:recipes/redstone/fence_gate", "minecraft:recipes/redstone/oak_fence_gate").put("minecraft:recipes/redstone/noteblock", "minecraft:recipes/redstone/note_block").put("minecraft:recipes/redstone/trapdoor", "minecraft:recipes/redstone/oak_trapdoor").put("minecraft:recipes/redstone/wooden_button", "minecraft:recipes/redstone/oak_button").put("minecraft:recipes/redstone/wooden_door", "minecraft:recipes/redstone/oak_door").put("minecraft:recipes/redstone/wooden_pressure_plate", "minecraft:recipes/redstone/oak_pressure_plate").put("minecraft:recipes/transportation/boat", "minecraft:recipes/transportation/oak_boat").put("minecraft:recipes/transportation/golden_rail", "minecraft:recipes/transportation/powered_rail").build();
 
    public AdvancementsFix(Schema schema, boolean flag) {
       super(schema, flag, "AdvancementsFix", (s) -> (String)RENAMES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java b/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
index d9422fc8ee09c791acd1a7a0902a88ee0582e94b..92d9fe8c727aa5127a92c8e1e20e27779ca7a8a4 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
@@ -13,7 +13,8 @@ import com.mojang.serialization.Dynamic;
 import java.util.Map;
 
 public class AttributesRename extends DataFix {
-   private static final Map<String, String> RENAMES = ImmutableMap.builder().put("generic.maxHealth", "generic.max_health").put("Max Health", "generic.max_health").put("zombie.spawnReinforcements", "zombie.spawn_reinforcements").put("Spawn Reinforcements Chance", "zombie.spawn_reinforcements").put("horse.jumpStrength", "horse.jump_strength").put("Jump Strength", "horse.jump_strength").put("generic.followRange", "generic.follow_range").put("Follow Range", "generic.follow_range").put("generic.knockbackResistance", "generic.knockback_resistance").put("Knockback Resistance", "generic.knockback_resistance").put("generic.movementSpeed", "generic.movement_speed").put("Movement Speed", "generic.movement_speed").put("generic.flyingSpeed", "generic.flying_speed").put("Flying Speed", "generic.flying_speed").put("generic.attackDamage", "generic.attack_damage").put("generic.attackKnockback", "generic.attack_knockback").put("generic.attackSpeed", "generic.attack_speed").put("generic.armorToughness", "generic.armor_toughness").build();
+   // MagmaCube - decompile error
+   private static final Map<String, String> RENAMES = (Map) ImmutableMap.builder().put("generic.maxHealth", "generic.max_health").put("Max Health", "generic.max_health").put("zombie.spawnReinforcements", "zombie.spawn_reinforcements").put("Spawn Reinforcements Chance", "zombie.spawn_reinforcements").put("horse.jumpStrength", "horse.jump_strength").put("Jump Strength", "horse.jump_strength").put("generic.followRange", "generic.follow_range").put("Follow Range", "generic.follow_range").put("generic.knockbackResistance", "generic.knockback_resistance").put("Knockback Resistance", "generic.knockback_resistance").put("generic.movementSpeed", "generic.movement_speed").put("Movement Speed", "generic.movement_speed").put("generic.flyingSpeed", "generic.flying_speed").put("Flying Speed", "generic.flying_speed").put("generic.attackDamage", "generic.attack_damage").put("generic.attackKnockback", "generic.attack_knockback").put("generic.attackSpeed", "generic.attack_speed").put("generic.armorToughness", "generic.armor_toughness").build();
 
    public AttributesRename(Schema schema) {
       super(schema, false);
@@ -30,10 +31,10 @@ public class AttributesRename extends DataFix {
    }
 
    private static Typed<?> fixItemStackTag(Typed<?> typed) {
-      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("AttributeModifiers", (dynamicx) -> (Dynamic)DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> dynamic.update("AttributeName", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
+      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("AttributeModifiers", (dynamicx) -> (Dynamic)DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicz) -> dynamicz.update("AttributeName", AttributesRename::fixName))).map(dynamicx::createList), dynamicx))); // MagmaCube - decompile error
    }
 
    private static Typed<?> fixEntity(Typed<?> typed) {
-      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Attributes", (dynamicx) -> (Dynamic)DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> dynamic.update("Name", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
+      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Attributes", (dynamicx) -> (Dynamic)DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicc) -> dynamicc.update("Name", AttributesRename::fixName))).map(dynamicx::createList), dynamicx))); // MagmaCube - decompile error
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java b/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java
index 6de42aaf8b256b296675b7b8a50e817ac996f252..d4875c0e0af6e43dc0f9f3363ec5b5553e3c012c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BedBlockEntityInjecter.java
@@ -12,6 +12,8 @@ import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.types.templates.List.ListType;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Dynamic;
+
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
@@ -39,11 +41,14 @@ public class BedBlockEntityInjecter extends DataFix {
       OpticFinder<?> opticFinder = DSL.fieldFinder("Level", type);
       OpticFinder<List<TE>> opticFinder2 = DSL.fieldFinder("TileEntities", listType);
       int i = 416;
-      return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), (dynamicOps) -> (pair) -> pair), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), (typed) -> {
+      // MagmaCube - decompile error
+      return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), (dynamicOps) -> (pair) -> (Pair) pair), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), (typed) -> {
          Typed<?> typed2 = typed.getTyped(opticFinder);
          Dynamic<?> dynamic = (Dynamic)typed2.get(DSL.remainderFinder());
-         int i = dynamic.get("xPos").asInt(0);
-         int i2 = dynamic.get("zPos").asInt(0);
+         // MagmaCube start - decompile error
+         int xPos = dynamic.get("xPos").asInt(0);
+         int zPos = dynamic.get("zPos").asInt(0);
+         // MagmaCube end - decompile error
          List<TE> list = Lists.newArrayList((Iterable)typed2.getOrCreate(opticFinder2));
          List<? extends Dynamic<?>> list2 = dynamic.get("Sections").asList(Function.identity());
 
@@ -53,18 +58,21 @@ public class BedBlockEntityInjecter extends DataFix {
             Stream<Integer> stream = dynamic2.get("Blocks").asStream().map((dynamicx) -> dynamicx.asInt(0));
             int i5 = 0;
 
-            for(int i6 : stream::iterator) {
+            // MagmaCube start - decompile error
+            for (Iterator<Integer> it = stream.iterator(); it.hasNext(); ) {
+               int i6 = it.next();
+               // MagmaCube end - decompile error
                if (416 == (i6 & 255) << 4) {
                   int i7 = i5 & 15;
                   int i8 = i5 >> 8 & 15;
                   int i9 = i5 >> 4 & 15;
                   Map<Dynamic<?>, Dynamic<?>> map = Maps.newHashMap();
                   map.put(dynamic2.createString("id"), dynamic2.createString("minecraft:bed"));
-                  map.put(dynamic2.createString("x"), dynamic2.createInt(i7 + (i << 4)));
+                  map.put(dynamic2.createString("x"), dynamic2.createInt(i7 + (xPos << 4))); // MagmaCube - decompile error
                   map.put(dynamic2.createString("y"), dynamic2.createInt(i8 + (i4 << 4)));
-                  map.put(dynamic2.createString("z"), dynamic2.createInt(i9 + (i2 << 4)));
+                  map.put(dynamic2.createString("z"), dynamic2.createInt(i9 + (zPos << 4))); // MagmaCube - decompile error
                   map.put(dynamic2.createString("color"), dynamic2.createShort((short)14));
-                  list.add(((Pair)type2.read(dynamic2.createMap(map)).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created bed block entity."))).getFirst());
+                  list.add((type2.read(dynamic2.createMap(map)).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created bed block entity."))).getFirst()); // MagmaCube - decompile error
                }
 
                ++i5;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
index 307982714196e3c3986f38ac079afcbfeb4a1749..15c259dda0abecb1bb88a76e06b9441a515fb347 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
@@ -5,7 +5,8 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class BiomeFix extends RenameBiomesFix {
-   public static final Map<String, String> BIOMES = ImmutableMap.builder().put("minecraft:extreme_hills", "minecraft:mountains").put("minecraft:swampland", "minecraft:swamp").put("minecraft:hell", "minecraft:nether_wastes").put("minecraft:sky", "minecraft:the_end").put("minecraft:ice_flats", "minecraft:snowy_tundra").put("minecraft:ice_mountains", "minecraft:snowy_mountains").put("minecraft:mushroom_island", "minecraft:mushroom_fields").put("minecraft:mushroom_island_shore", "minecraft:mushroom_field_shore").put("minecraft:beaches", "minecraft:beach").put("minecraft:forest_hills", "minecraft:wooded_hills").put("minecraft:smaller_extreme_hills", "minecraft:mountain_edge").put("minecraft:stone_beach", "minecraft:stone_shore").put("minecraft:cold_beach", "minecraft:snowy_beach").put("minecraft:roofed_forest", "minecraft:dark_forest").put("minecraft:taiga_cold", "minecraft:snowy_taiga").put("minecraft:taiga_cold_hills", "minecraft:snowy_taiga_hills").put("minecraft:redwood_taiga", "minecraft:giant_tree_taiga").put("minecraft:redwood_taiga_hills", "minecraft:giant_tree_taiga_hills").put("minecraft:extreme_hills_with_trees", "minecraft:wooded_mountains").put("minecraft:savanna_rock", "minecraft:savanna_plateau").put("minecraft:mesa", "minecraft:badlands").put("minecraft:mesa_rock", "minecraft:wooded_badlands_plateau").put("minecraft:mesa_clear_rock", "minecraft:badlands_plateau").put("minecraft:sky_island_low", "minecraft:small_end_islands").put("minecraft:sky_island_medium", "minecraft:end_midlands").put("minecraft:sky_island_high", "minecraft:end_highlands").put("minecraft:sky_island_barren", "minecraft:end_barrens").put("minecraft:void", "minecraft:the_void").put("minecraft:mutated_plains", "minecraft:sunflower_plains").put("minecraft:mutated_desert", "minecraft:desert_lakes").put("minecraft:mutated_extreme_hills", "minecraft:gravelly_mountains").put("minecraft:mutated_forest", "minecraft:flower_forest").put("minecraft:mutated_taiga", "minecraft:taiga_mountains").put("minecraft:mutated_swampland", "minecraft:swamp_hills").put("minecraft:mutated_ice_flats", "minecraft:ice_spikes").put("minecraft:mutated_jungle", "minecraft:modified_jungle").put("minecraft:mutated_jungle_edge", "minecraft:modified_jungle_edge").put("minecraft:mutated_birch_forest", "minecraft:tall_birch_forest").put("minecraft:mutated_birch_forest_hills", "minecraft:tall_birch_hills").put("minecraft:mutated_roofed_forest", "minecraft:dark_forest_hills").put("minecraft:mutated_taiga_cold", "minecraft:snowy_taiga_mountains").put("minecraft:mutated_redwood_taiga", "minecraft:giant_spruce_taiga").put("minecraft:mutated_redwood_taiga_hills", "minecraft:giant_spruce_taiga_hills").put("minecraft:mutated_extreme_hills_with_trees", "minecraft:modified_gravelly_mountains").put("minecraft:mutated_savanna", "minecraft:shattered_savanna").put("minecraft:mutated_savanna_rock", "minecraft:shattered_savanna_plateau").put("minecraft:mutated_mesa", "minecraft:eroded_badlands").put("minecraft:mutated_mesa_rock", "minecraft:modified_wooded_badlands_plateau").put("minecraft:mutated_mesa_clear_rock", "minecraft:modified_badlands_plateau").put("minecraft:warm_deep_ocean", "minecraft:deep_warm_ocean").put("minecraft:lukewarm_deep_ocean", "minecraft:deep_lukewarm_ocean").put("minecraft:cold_deep_ocean", "minecraft:deep_cold_ocean").put("minecraft:frozen_deep_ocean", "minecraft:deep_frozen_ocean").build();
+   // MagmaCube - decompile error
+   public static final Map<String, String> BIOMES = (Map) ImmutableMap.builder().put("minecraft:extreme_hills", "minecraft:mountains").put("minecraft:swampland", "minecraft:swamp").put("minecraft:hell", "minecraft:nether_wastes").put("minecraft:sky", "minecraft:the_end").put("minecraft:ice_flats", "minecraft:snowy_tundra").put("minecraft:ice_mountains", "minecraft:snowy_mountains").put("minecraft:mushroom_island", "minecraft:mushroom_fields").put("minecraft:mushroom_island_shore", "minecraft:mushroom_field_shore").put("minecraft:beaches", "minecraft:beach").put("minecraft:forest_hills", "minecraft:wooded_hills").put("minecraft:smaller_extreme_hills", "minecraft:mountain_edge").put("minecraft:stone_beach", "minecraft:stone_shore").put("minecraft:cold_beach", "minecraft:snowy_beach").put("minecraft:roofed_forest", "minecraft:dark_forest").put("minecraft:taiga_cold", "minecraft:snowy_taiga").put("minecraft:taiga_cold_hills", "minecraft:snowy_taiga_hills").put("minecraft:redwood_taiga", "minecraft:giant_tree_taiga").put("minecraft:redwood_taiga_hills", "minecraft:giant_tree_taiga_hills").put("minecraft:extreme_hills_with_trees", "minecraft:wooded_mountains").put("minecraft:savanna_rock", "minecraft:savanna_plateau").put("minecraft:mesa", "minecraft:badlands").put("minecraft:mesa_rock", "minecraft:wooded_badlands_plateau").put("minecraft:mesa_clear_rock", "minecraft:badlands_plateau").put("minecraft:sky_island_low", "minecraft:small_end_islands").put("minecraft:sky_island_medium", "minecraft:end_midlands").put("minecraft:sky_island_high", "minecraft:end_highlands").put("minecraft:sky_island_barren", "minecraft:end_barrens").put("minecraft:void", "minecraft:the_void").put("minecraft:mutated_plains", "minecraft:sunflower_plains").put("minecraft:mutated_desert", "minecraft:desert_lakes").put("minecraft:mutated_extreme_hills", "minecraft:gravelly_mountains").put("minecraft:mutated_forest", "minecraft:flower_forest").put("minecraft:mutated_taiga", "minecraft:taiga_mountains").put("minecraft:mutated_swampland", "minecraft:swamp_hills").put("minecraft:mutated_ice_flats", "minecraft:ice_spikes").put("minecraft:mutated_jungle", "minecraft:modified_jungle").put("minecraft:mutated_jungle_edge", "minecraft:modified_jungle_edge").put("minecraft:mutated_birch_forest", "minecraft:tall_birch_forest").put("minecraft:mutated_birch_forest_hills", "minecraft:tall_birch_hills").put("minecraft:mutated_roofed_forest", "minecraft:dark_forest_hills").put("minecraft:mutated_taiga_cold", "minecraft:snowy_taiga_mountains").put("minecraft:mutated_redwood_taiga", "minecraft:giant_spruce_taiga").put("minecraft:mutated_redwood_taiga_hills", "minecraft:giant_spruce_taiga_hills").put("minecraft:mutated_extreme_hills_with_trees", "minecraft:modified_gravelly_mountains").put("minecraft:mutated_savanna", "minecraft:shattered_savanna").put("minecraft:mutated_savanna_rock", "minecraft:shattered_savanna_plateau").put("minecraft:mutated_mesa", "minecraft:eroded_badlands").put("minecraft:mutated_mesa_rock", "minecraft:modified_wooded_badlands_plateau").put("minecraft:mutated_mesa_clear_rock", "minecraft:modified_badlands_plateau").put("minecraft:warm_deep_ocean", "minecraft:deep_warm_ocean").put("minecraft:lukewarm_deep_ocean", "minecraft:deep_lukewarm_ocean").put("minecraft:cold_deep_ocean", "minecraft:deep_cold_ocean").put("minecraft:frozen_deep_ocean", "minecraft:deep_frozen_ocean").build();
 
    public BiomeFix(Schema schema, boolean flag) {
       super(schema, flag, "Biomes fix", BIOMES);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
index b174f577377ce0e0ed070c8f379e671906a9c2eb..fe9b9d0969116f9c1a1705abf85f780689b2cbbe 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
@@ -40,13 +40,15 @@ public class BitStorageAlignFix extends DataFix {
    }
 
    private Typed<?> updateHeightmaps(Typed<?> typed) {
-      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Heightmaps", (dynamic2) -> dynamic2.updateMapValues((pair) -> pair.mapSecond((dynamic2) -> updateBitStorage(dynamic, dynamic2, 256, 9)))));
+      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Heightmaps", (dynamic2) -> dynamic2.updateMapValues((pair) -> pair.mapSecond((dynamic2c) -> updateBitStorage(dynamic, dynamic2c, 256, 9))))); // MagmaCube - decompile error
    }
 
    private static Typed<?> updateSections(OpticFinder<?> opticFinder, OpticFinder<?> opticFinder2, OpticFinder<List<Pair<String, Dynamic<?>>>> opticFinder3, Typed<?> typed) {
-      return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> {
-            int i = typed.getOptional(opticFinder3).map((list) -> Math.max(4, DataFixUtils.ceillog2(list.size()))).orElse(0);
-            return i != 0 && !Mth.isPowerOfTwo(i) ? typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("BlockStates", (dynamic2) -> updateBitStorage(dynamic, dynamic2, 4096, i))) : typed;
+      // MagmaCube start - decompile error
+      return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedc) -> {
+            int i = typedc.getOptional(opticFinder3).map((list) -> Math.max(4, DataFixUtils.ceillog2(list.size()))).orElse(0);
+            return i != 0 && !Mth.isPowerOfTwo(i) ? typedc.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("BlockStates", (dynamic2) -> updateBitStorage(dynamic, dynamic2, 4096, i))) : typedc;
+           // MagmaCube end - decompile error
          }));
    }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
index b4fc639576d1540b779b0aa9016e6c37540505bd..d60d1f4d82d07d416aba1a0aecf50204dfa5315f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
@@ -13,7 +13,8 @@ public class BlockEntityBannerColorFix extends NamedEntityFix {
 
    public Dynamic<?> fixTag(Dynamic<?> dynamic) {
       dynamic = dynamic.update("Base", (dynamicx) -> dynamicx.createInt(15 - dynamicx.asInt(0)));
-      return dynamic.update("Patterns", (dynamicx) -> (Dynamic)DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.update("Color", (dynamicx) -> dynamicx.createInt(15 - dynamicx.asInt(0))))).map(dynamicx::createList).result(), dynamicx));
+      // MagmaCube - decompile error
+      return dynamic.update("Patterns", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamicxxx) -> dynamicxxx.update("Color", (dynamicxx) -> dynamicxx.createInt(15 - dynamicxx.asInt(0))))).map(dynamicx::createList).result(), dynamicx));
    }
 
    protected Typed<?> fix(Typed<?> typed) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
index cae7d91528685155da92cf152016ff4626262106..01f80f608158cf2f5d118dfa95e7081c3e43cfa5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
@@ -43,8 +43,10 @@ public class BlockEntityIdFix extends DataFix {
    public TypeRewriteRule makeRule() {
       Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
       Type<?> type2 = this.getOutputSchema().getType(References.ITEM_STACK);
-      TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
-      TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY);
+      // MagmaCube start - decompile error
+      TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
+      TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY);
+      // MagmaCube end - decompile error
       return TypeRewriteRule.seq(this.convertUnchecked("item stack block entity name hook converter", type, type2), this.fixTypeEverywhere("BlockEntityIdFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> (String)ID_MAP.getOrDefault(s, s))));
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
index d5c39edc934d7e4d0eec340f07fbc7a2d5979cc1..57279bb9b9c0fd192fcbac93ac7477f3ff0aba90 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
@@ -17,7 +17,7 @@ public class BlockEntityUUIDFix extends AbstractUUIDFix {
    }
 
    private Dynamic<?> updateSkull(Dynamic<?> dynamic) {
-      return (Dynamic)dynamic.get("Owner").get().map((dynamicx) -> (Dynamic)replaceUUIDString(dynamicx, "Id", "Id").orElse(dynamicx)).map((dynamic2) -> dynamic.remove("Owner").set("SkullOwner", dynamic2)).result().orElse(dynamic);
+      return (Dynamic)dynamic.get("Owner").get().map((dynamicx) -> (Dynamic)replaceUUIDString(dynamicx, "Id", "Id").orElse(dynamicx)).map((dynamic2) -> dynamic.remove("Owner").set("SkullOwner", dynamic2)).result().orElse((Dynamic) dynamic); // MagmaCube - decompile error
    }
 
    private Dynamic<?> updateConduit(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
index eb6dfae15a7fbbbf2ee8f0fdf04f835480cecd33..db821a3f08a55fa257452800a72939b702435b36 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
@@ -22,10 +22,12 @@ public abstract class BlockRenameFixWithJigsaw extends BlockRenameFix {
       TypeReference typeReference = References.BLOCK_ENTITY;
       String s = "minecraft:jigsaw";
       OpticFinder<?> opticFinder = DSL.namedChoice("minecraft:jigsaw", this.getInputSchema().getChoiceType(typeReference, "minecraft:jigsaw"));
-      TypeRewriteRule typeRewriteRule = this.fixTypeEverywhereTyped(this.name + " for jigsaw state", this.getInputSchema().getType(typeReference), this.getOutputSchema().getType(typeReference), (typed) -> typed.updateTyped(opticFinder, this.getOutputSchema().getChoiceType(typeReference, "minecraft:jigsaw"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("final_state", (dynamic2) -> (Dynamic)DataFixUtils.orElse(dynamic2.asString().result().map((s) -> {
-                     int i = s.indexOf(91);
-                     int i2 = s.indexOf(123);
-                     int i3 = s.length();
+       // MagmaCube start - decompile error
+      TypeRewriteRule typeRewriteRule = this.fixTypeEverywhereTyped(this.name + " for jigsaw state", this.getInputSchema().getType(typeReference), this.getOutputSchema().getType(typeReference), (typed) -> typed.updateTyped(opticFinder, this.getOutputSchema().getChoiceType(typeReference, "minecraft:jigsaw"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("final_state", (dynamic2) -> (Dynamic)DataFixUtils.orElse(dynamic2.asString().result().map((sx) -> {
+                     int i = sx.indexOf(91);
+                     int i2 = sx.indexOf(123);
+                     int i3 = sx.length();
+                     // MagmaCube end - decompile error
                      if (i > 0) {
                         i3 = Math.min(i3, i);
                      }
@@ -34,9 +36,9 @@ public abstract class BlockRenameFixWithJigsaw extends BlockRenameFix {
                         i3 = Math.min(i3, i2);
                      }
 
-                     String s2 = s.substring(0, i3);
+                     String s2 = sx.substring(0, i3); // MagmaCube - decompile error
                      String s3 = this.fixBlock(s2);
-                     return s3 + s.substring(i3);
+                     return s3 + sx.substring(i3); // MagmaCube - decompile error
                   }).map(dynamic::createString), dynamic2)))));
       return TypeRewriteRule.seq(super.makeRule(), typeRewriteRule);
    }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
index ff550b6159a0b96369f62e3412cc73fe2889af91..5ad971fecbc178d1a082a403dfe7913f12f311c3 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
@@ -53,7 +53,7 @@ public class ChunkPalettedStorageFix extends DataFix {
    static final Dynamic<?> UPPER_LARGE_FERN = BlockStateData.parse("{Name:'minecraft:large_fern',Properties:{half:'upper'}}");
    static final Dynamic<?> UPPER_ROSE_BUSH = BlockStateData.parse("{Name:'minecraft:rose_bush',Properties:{half:'upper'}}");
    static final Dynamic<?> UPPER_PEONY = BlockStateData.parse("{Name:'minecraft:peony',Properties:{half:'upper'}}");
-   static final Map<String, Dynamic<?>> FLOWER_POT_MAP = (Map)DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
+   static final Map<String, Dynamic<?>> FLOWER_POT_MAP = DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
       hashMap.put("minecraft:air0", BlockStateData.parse("{Name:'minecraft:flower_pot'}"));
       hashMap.put("minecraft:red_flower0", BlockStateData.parse("{Name:'minecraft:potted_poppy'}"));
       hashMap.put("minecraft:red_flower1", BlockStateData.parse("{Name:'minecraft:potted_blue_orchid'}"));
@@ -77,7 +77,7 @@ public class ChunkPalettedStorageFix extends DataFix {
       hashMap.put("minecraft:tallgrass2", BlockStateData.parse("{Name:'minecraft:potted_fern'}"));
       hashMap.put("minecraft:cactus0", BlockStateData.getTag(2240));
    });
-   static final Map<String, Dynamic<?>> SKULL_MAP = (Map)DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
+   static final Map<String, Dynamic<?>> SKULL_MAP = DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
       mapSkull(hashMap, 0, "skeleton", "skull");
       mapSkull(hashMap, 1, "wither_skeleton", "skull");
       mapSkull(hashMap, 2, "zombie", "head");
@@ -85,7 +85,7 @@ public class ChunkPalettedStorageFix extends DataFix {
       mapSkull(hashMap, 4, "creeper", "head");
       mapSkull(hashMap, 5, "dragon", "head");
    });
-   static final Map<String, Dynamic<?>> DOOR_MAP = (Map)DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
+   static final Map<String, Dynamic<?>> DOOR_MAP = DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
       mapDoor(hashMap, "oak_door", 1024);
       mapDoor(hashMap, "iron_door", 1136);
       mapDoor(hashMap, "spruce_door", 3088);
@@ -94,7 +94,7 @@ public class ChunkPalettedStorageFix extends DataFix {
       mapDoor(hashMap, "acacia_door", 3136);
       mapDoor(hashMap, "dark_oak_door", 3152);
    });
-   static final Map<String, Dynamic<?>> NOTE_BLOCK_MAP = (Map)DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
+   static final Map<String, Dynamic<?>> NOTE_BLOCK_MAP = DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
       for(int i = 0; i < 26; ++i) {
          hashMap.put("true" + i, BlockStateData.parse("{Name:'minecraft:note_block',Properties:{powered:'true',note:'" + i + "'}}"));
          hashMap.put("false" + i, BlockStateData.parse("{Name:'minecraft:note_block',Properties:{powered:'false',note:'" + i + "'}}"));
@@ -119,7 +119,7 @@ public class ChunkPalettedStorageFix extends DataFix {
       int2ObjectOpenHashMap.put(14, "red");
       int2ObjectOpenHashMap.put(15, "black");
    });
-   static final Map<String, Dynamic<?>> BED_BLOCK_MAP = (Map)DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
+   static final Map<String, Dynamic<?>> BED_BLOCK_MAP = DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
       ObjectIterator var1 = DYE_COLOR_MAP.int2ObjectEntrySet().iterator();
 
       while(var1.hasNext()) {
@@ -130,7 +130,7 @@ public class ChunkPalettedStorageFix extends DataFix {
       }
 
    });
-   static final Map<String, Dynamic<?>> BANNER_BLOCK_MAP = (Map)DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
+   static final Map<String, Dynamic<?>> BANNER_BLOCK_MAP = DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
       ObjectIterator var1 = DYE_COLOR_MAP.int2ObjectEntrySet().iterator();
 
       while(var1.hasNext()) {
@@ -561,19 +561,19 @@ public class ChunkPalettedStorageFix extends DataFix {
          this.level = dynamic;
          this.x = dynamic.get("xPos").asInt(0) << 4;
          this.z = dynamic.get("zPos").asInt(0) << 4;
-         dynamic.get("TileEntities").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamic) -> {
-               int i = dynamic.get("x").asInt(0) - this.x & 15;
-               int i2 = dynamic.get("y").asInt(0);
-               int i3 = dynamic.get("z").asInt(0) - this.z & 15;
+         dynamic.get("TileEntities").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamicIn) -> {
+               int i = dynamicIn.get("x").asInt(0) - this.x & 15;
+               int i2 = dynamicIn.get("y").asInt(0);
+               int i3 = dynamicIn.get("z").asInt(0) - this.z & 15;
                int i4 = i2 << 8 | i3 << 4 | i;
-               if (this.blockEntities.put(i4, dynamic) != null) {
+               if (this.blockEntities.put(i4, dynamicIn) != null) {
                   ChunkPalettedStorageFix.LOGGER.warn("In chunk: {}x{} found a duplicate block entity at position: [{}, {}, {}]", this.x, this.z, i, i2, i3);
                }
 
             }));
          boolean flag = dynamic.get("convertedFromAlphaFormat").asBoolean(false);
-         dynamic.get("Sections").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamic) -> {
-               ChunkPalettedStorageFix.Section section = new ChunkPalettedStorageFix.Section(dynamic);
+         dynamic.get("Sections").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamicIn) -> {
+               ChunkPalettedStorageFix.Section section = new ChunkPalettedStorageFix.Section(dynamicIn);
                this.sides = section.upgrade(this.sides);
                this.sections[section.y] = section;
             }));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
index 33e06cbcc84137b45cb496fd7081fcd40618bec1..ff247ffe178bcb26237aeb2845121b8b06bccba8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
@@ -12,7 +12,8 @@ import java.util.Map;
 import java.util.Objects;
 
 public class ChunkStatusFix2 extends DataFix {
-   private static final Map<String, String> RENAMES_AND_DOWNGRADES = ImmutableMap.builder().put("structure_references", "empty").put("biomes", "empty").put("base", "surface").put("carved", "carvers").put("liquid_carved", "liquid_carvers").put("decorated", "features").put("lighted", "light").put("mobs_spawned", "spawn").put("finalized", "heightmaps").put("fullchunk", "full").build();
+   // MagmaCube - decompile error
+   private static final Map<String, String> RENAMES_AND_DOWNGRADES = (Map) ImmutableMap.builder().put("structure_references", "empty").put("biomes", "empty").put("base", "surface").put("carved", "carvers").put("liquid_carved", "liquid_carvers").put("decorated", "features").put("lighted", "light").put("mobs_spawned", "spawn").put("finalized", "heightmaps").put("fullchunk", "full").build();
 
    public ChunkStatusFix2(Schema schema, boolean flag) {
       super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
index dafa29a7a8cde2a1a4704b8e88370d2e8188e97f..4eaa5c6214747ace636ee2f69f8596a52732e55c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
@@ -11,7 +11,8 @@ import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Dynamic;
 
 public class ChunkStructuresTemplateRenameFix extends DataFix {
-   private static final ImmutableMap<String, Pair<String, ImmutableMap<String, String>>> RENAMES = ImmutableMap.builder().put("EndCity", Pair.of("ECP", ImmutableMap.builder().put("second_floor", "second_floor_1").put("third_floor", "third_floor_1").put("third_floor_c", "third_floor_2").build())).put("Mansion", Pair.of("WMP", ImmutableMap.builder().put("carpet_south", "carpet_south_1").put("carpet_west", "carpet_west_1").put("indoors_door", "indoors_door_1").put("indoors_wall", "indoors_wall_1").build())).put("Igloo", Pair.of("Iglu", ImmutableMap.builder().put("minecraft:igloo/igloo_bottom", "minecraft:igloo/bottom").put("minecraft:igloo/igloo_middle", "minecraft:igloo/middle").put("minecraft:igloo/igloo_top", "minecraft:igloo/top").build())).put("Ocean_Ruin", Pair.of("ORP", ImmutableMap.builder().put("minecraft:ruin/big_ruin1_brick", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_ruin2_brick", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_ruin3_brick", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_ruin8_brick", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_ruin1_cracked", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_ruin2_cracked", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_ruin3_cracked", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_ruin8_cracked", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_ruin1_mossy", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_ruin2_mossy", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_ruin3_mossy", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_ruin8_mossy", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_ruin_warm4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_ruin_warm5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_ruin_warm6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_ruin_warm7", "minecraft:underwater_ruin/big_warm_7").put("minecraft:ruin/ruin1_brick", "minecraft:underwater_ruin/brick_1").put("minecraft:ruin/ruin2_brick", "minecraft:underwater_ruin/brick_2").put("minecraft:ruin/ruin3_brick", "minecraft:underwater_ruin/brick_3").put("minecraft:ruin/ruin4_brick", "minecraft:underwater_ruin/brick_4").put("minecraft:ruin/ruin5_brick", "minecraft:underwater_ruin/brick_5").put("minecraft:ruin/ruin6_brick", "minecraft:underwater_ruin/brick_6").put("minecraft:ruin/ruin7_brick", "minecraft:underwater_ruin/brick_7").put("minecraft:ruin/ruin8_brick", "minecraft:underwater_ruin/brick_8").put("minecraft:ruin/ruin1_cracked", "minecraft:underwater_ruin/cracked_1").put("minecraft:ruin/ruin2_cracked", "minecraft:underwater_ruin/cracked_2").put("minecraft:ruin/ruin3_cracked", "minecraft:underwater_ruin/cracked_3").put("minecraft:ruin/ruin4_cracked", "minecraft:underwater_ruin/cracked_4").put("minecraft:ruin/ruin5_cracked", "minecraft:underwater_ruin/cracked_5").put("minecraft:ruin/ruin6_cracked", "minecraft:underwater_ruin/cracked_6").put("minecraft:ruin/ruin7_cracked", "minecraft:underwater_ruin/cracked_7").put("minecraft:ruin/ruin8_cracked", "minecraft:underwater_ruin/cracked_8").put("minecraft:ruin/ruin1_mossy", "minecraft:underwater_ruin/mossy_1").put("minecraft:ruin/ruin2_mossy", "minecraft:underwater_ruin/mossy_2").put("minecraft:ruin/ruin3_mossy", "minecraft:underwater_ruin/mossy_3").put("minecraft:ruin/ruin4_mossy", "minecraft:underwater_ruin/mossy_4").put("minecraft:ruin/ruin5_mossy", "minecraft:underwater_ruin/mossy_5").put("minecraft:ruin/ruin6_mossy", "minecraft:underwater_ruin/mossy_6").put("minecraft:ruin/ruin7_mossy", "minecraft:underwater_ruin/mossy_7").put("minecraft:ruin/ruin8_mossy", "minecraft:underwater_ruin/mossy_8").put("minecraft:ruin/ruin_warm1", "minecraft:underwater_ruin/warm_1").put("minecraft:ruin/ruin_warm2", "minecraft:underwater_ruin/warm_2").put("minecraft:ruin/ruin_warm3", "minecraft:underwater_ruin/warm_3").put("minecraft:ruin/ruin_warm4", "minecraft:underwater_ruin/warm_4").put("minecraft:ruin/ruin_warm5", "minecraft:underwater_ruin/warm_5").put("minecraft:ruin/ruin_warm6", "minecraft:underwater_ruin/warm_6").put("minecraft:ruin/ruin_warm7", "minecraft:underwater_ruin/warm_7").put("minecraft:ruin/ruin_warm8", "minecraft:underwater_ruin/warm_8").put("minecraft:ruin/big_brick_1", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_brick_2", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_brick_3", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_brick_8", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_mossy_1", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_mossy_2", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_mossy_3", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_mossy_8", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_cracked_1", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_cracked_2", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_cracked_3", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_cracked_8", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_warm_4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_warm_5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_warm_6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_warm_7", "minecraft:underwater_ruin/big_warm_7").build())).build();
+   // MagmaCube - decompile error
+   private static final ImmutableMap<String, Pair<String, ImmutableMap<String, String>>> RENAMES = (ImmutableMap) ImmutableMap.builder().put("EndCity", Pair.of("ECP", ImmutableMap.builder().put("second_floor", "second_floor_1").put("third_floor", "third_floor_1").put("third_floor_c", "third_floor_2").build())).put("Mansion", Pair.of("WMP", ImmutableMap.builder().put("carpet_south", "carpet_south_1").put("carpet_west", "carpet_west_1").put("indoors_door", "indoors_door_1").put("indoors_wall", "indoors_wall_1").build())).put("Igloo", Pair.of("Iglu", ImmutableMap.builder().put("minecraft:igloo/igloo_bottom", "minecraft:igloo/bottom").put("minecraft:igloo/igloo_middle", "minecraft:igloo/middle").put("minecraft:igloo/igloo_top", "minecraft:igloo/top").build())).put("Ocean_Ruin", Pair.of("ORP", ImmutableMap.builder().put("minecraft:ruin/big_ruin1_brick", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_ruin2_brick", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_ruin3_brick", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_ruin8_brick", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_ruin1_cracked", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_ruin2_cracked", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_ruin3_cracked", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_ruin8_cracked", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_ruin1_mossy", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_ruin2_mossy", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_ruin3_mossy", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_ruin8_mossy", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_ruin_warm4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_ruin_warm5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_ruin_warm6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_ruin_warm7", "minecraft:underwater_ruin/big_warm_7").put("minecraft:ruin/ruin1_brick", "minecraft:underwater_ruin/brick_1").put("minecraft:ruin/ruin2_brick", "minecraft:underwater_ruin/brick_2").put("minecraft:ruin/ruin3_brick", "minecraft:underwater_ruin/brick_3").put("minecraft:ruin/ruin4_brick", "minecraft:underwater_ruin/brick_4").put("minecraft:ruin/ruin5_brick", "minecraft:underwater_ruin/brick_5").put("minecraft:ruin/ruin6_brick", "minecraft:underwater_ruin/brick_6").put("minecraft:ruin/ruin7_brick", "minecraft:underwater_ruin/brick_7").put("minecraft:ruin/ruin8_brick", "minecraft:underwater_ruin/brick_8").put("minecraft:ruin/ruin1_cracked", "minecraft:underwater_ruin/cracked_1").put("minecraft:ruin/ruin2_cracked", "minecraft:underwater_ruin/cracked_2").put("minecraft:ruin/ruin3_cracked", "minecraft:underwater_ruin/cracked_3").put("minecraft:ruin/ruin4_cracked", "minecraft:underwater_ruin/cracked_4").put("minecraft:ruin/ruin5_cracked", "minecraft:underwater_ruin/cracked_5").put("minecraft:ruin/ruin6_cracked", "minecraft:underwater_ruin/cracked_6").put("minecraft:ruin/ruin7_cracked", "minecraft:underwater_ruin/cracked_7").put("minecraft:ruin/ruin8_cracked", "minecraft:underwater_ruin/cracked_8").put("minecraft:ruin/ruin1_mossy", "minecraft:underwater_ruin/mossy_1").put("minecraft:ruin/ruin2_mossy", "minecraft:underwater_ruin/mossy_2").put("minecraft:ruin/ruin3_mossy", "minecraft:underwater_ruin/mossy_3").put("minecraft:ruin/ruin4_mossy", "minecraft:underwater_ruin/mossy_4").put("minecraft:ruin/ruin5_mossy", "minecraft:underwater_ruin/mossy_5").put("minecraft:ruin/ruin6_mossy", "minecraft:underwater_ruin/mossy_6").put("minecraft:ruin/ruin7_mossy", "minecraft:underwater_ruin/mossy_7").put("minecraft:ruin/ruin8_mossy", "minecraft:underwater_ruin/mossy_8").put("minecraft:ruin/ruin_warm1", "minecraft:underwater_ruin/warm_1").put("minecraft:ruin/ruin_warm2", "minecraft:underwater_ruin/warm_2").put("minecraft:ruin/ruin_warm3", "minecraft:underwater_ruin/warm_3").put("minecraft:ruin/ruin_warm4", "minecraft:underwater_ruin/warm_4").put("minecraft:ruin/ruin_warm5", "minecraft:underwater_ruin/warm_5").put("minecraft:ruin/ruin_warm6", "minecraft:underwater_ruin/warm_6").put("minecraft:ruin/ruin_warm7", "minecraft:underwater_ruin/warm_7").put("minecraft:ruin/ruin_warm8", "minecraft:underwater_ruin/warm_8").put("minecraft:ruin/big_brick_1", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_brick_2", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_brick_3", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_brick_8", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_mossy_1", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_mossy_2", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_mossy_3", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_mossy_8", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_cracked_1", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_cracked_2", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_cracked_3", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_cracked_8", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_warm_4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_warm_5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_warm_6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_warm_7", "minecraft:underwater_ruin/big_warm_7").build())).build();
 
    public ChunkStructuresTemplateRenameFix(Schema schema, boolean flag) {
       super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkToProtochunkFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkToProtochunkFix.java
index 77130f13339c96a3d1938734d287ff8cfa216f5b..c29d32b8ec18cb5690a2cfc44ee50530ce277371 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkToProtochunkFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkToProtochunkFix.java
@@ -36,7 +36,7 @@ public class ChunkToProtochunkFix extends DataFix {
       OpticFinder<?> opticFinder = DSL.fieldFinder("Level", type3);
       OpticFinder<?> opticFinder2 = DSL.fieldFinder("TileTicks", type5);
       return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("ChunkToProtoChunkFix", type, this.getOutputSchema().getType(References.CHUNK), (typed) -> typed.updateTyped(opticFinder, type4, (typedx) -> {
-            Optional<? extends Stream<? extends Dynamic<?>>> optional = typedx.getOptionalTyped(opticFinder2).flatMap((typed) -> typed.write().result()).flatMap((dynamicx) -> dynamicx.asStreamOpt().result());
+            Optional<? extends Stream<? extends Dynamic<?>>> optional = typedx.getOptionalTyped(opticFinder2).flatMap((typedz) -> typedz.write().result()).flatMap((dynamicx) -> dynamicx.asStreamOpt().result()); // MagmaCube - decompile error
             Dynamic<?> dynamic = (Dynamic)typedx.get(DSL.remainderFinder());
             boolean flag = dynamic.get("TerrainPopulated").asBoolean(false) && (!dynamic.get("LightPopulated").asNumber().result().isPresent() || dynamic.get("LightPopulated").asBoolean(false));
             dynamic = dynamic.set("Status", dynamic.createString(flag ? "mobs_spawned" : "empty"));
@@ -60,7 +60,7 @@ public class ChunkToProtochunkFix extends DataFix {
                Dynamic<?> dynamic2 = dynamic;
                List<ShortList> list = (List)IntStream.range(0, 16).mapToObj((ix) -> new ShortArrayList()).collect(Collectors.toList());
                if (optional.isPresent()) {
-                  ((Stream)optional.get()).forEach((dynamicx) -> {
+                  (optional.get()).forEach((dynamicx) -> { // MagmaCube - decompile error
                      int i = dynamicx.get("x").asInt(0);
                      int i2 = dynamicx.get("y").asInt(0);
                      int i3 = dynamicx.get("z").asInt(0);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
index 8a5a740a554ad109a5569b6824b32a8697d588f2..970e5c8035eadaf233c90db547afa7cfc8c112c5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
@@ -4,5 +4,6 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class DyeItemRenameFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:cactus_green", "minecraft:green_dye").put("minecraft:rose_red", "minecraft:red_dye").put("minecraft:dandelion_yellow", "minecraft:yellow_dye").build();
+   // MagmaCube - decompile error
+   public static final Map<String, String> RENAMED_IDS = (Map) ImmutableMap.builder().put("minecraft:cactus_green", "minecraft:green_dye").put("minecraft:rose_red", "minecraft:red_dye").put("minecraft:dandelion_yellow", "minecraft:yellow_dye").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
index c312eed007be49bf0b5f0cb70c9c581f6afce04a..4d90e6f41e24b9aed0573ca5e0599a6c6136c51d 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
@@ -18,7 +18,7 @@ import java.util.function.Function;
 import net.minecraft.util.datafix.schemas.NamespacedSchema;
 
 public class EntityBlockStateFix extends DataFix {
-   private static final Map<String, Integer> MAP = (Map)DataFixUtils.make(Maps.newHashMap(), (hashMap) -> {
+   private static final Map<String, Integer> MAP = DataFixUtils.make(Maps.newHashMap(), (hashMap) -> { // MagmaCube - type
       hashMap.put("minecraft:air", 0);
       hashMap.put("minecraft:stone", 1);
       hashMap.put("minecraft:grass", 2);
@@ -319,7 +319,7 @@ public class EntityBlockStateFix extends DataFix {
       Type<Either<Pair<String, Dynamic<?>>, Unit>> type2 = DSL.optional(DSL.field("BlockState", DSL.named(References.BLOCK_STATE.typeName(), DSL.remainderType())));
       Dynamic<?> dynamic = (Dynamic)typed.get(DSL.remainderFinder());
       return typed.update(type.finder(), type2, (either) -> {
-         int i = either.map((pair) -> (Integer)((Either)pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId), (unit) -> {
+         int i = either.map((pair) -> (Integer)(pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId), (unit) -> { // MagmaCube - decompile error
             Optional<Number> optional = dynamic.get("TileID").asNumber().result();
             return (Integer)optional.map(Number::intValue).orElseGet(() -> dynamic.get("Tile").asByte((byte)0) & 255);
          });
@@ -333,7 +333,7 @@ public class EntityBlockStateFix extends DataFix {
       Type<Pair<String, Dynamic<?>>> type2 = DSL.field(s3, DSL.named(References.BLOCK_STATE.typeName(), DSL.remainderType()));
       Dynamic<?> dynamic = (Dynamic)typed.getOrCreate(DSL.remainderFinder());
       return typed.update(type.finder(), type2, (pair) -> {
-         int i = ((Either)pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId);
+         int i = (pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId); // MagmaCube - decompile error
          int i2 = dynamic.get(s2).asInt(0) & 15;
          return Pair.of(References.BLOCK_STATE.typeName(), BlockStateData.getTag(i << 4 | i2));
       }).set(DSL.remainderFinder(), dynamic.remove(s2));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
index 17696e5a243fb4dda3db5a4c6b36e6e5c0f9a532..1153c091acc1a3bd6f102da75d54ffd33fb9b06e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
@@ -5,8 +5,10 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class EntityCodSalmonFix extends SimplestEntityRenameFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:salmon_mob", "minecraft:salmon").put("minecraft:cod_mob", "minecraft:cod").build();
-   public static final Map<String, String> RENAMED_EGG_IDS = ImmutableMap.builder().put("minecraft:salmon_mob_spawn_egg", "minecraft:salmon_spawn_egg").put("minecraft:cod_mob_spawn_egg", "minecraft:cod_spawn_egg").build();
+   // MagmaCube start - decompile error
+   public static final Map<String, String> RENAMED_IDS = (Map) ImmutableMap.builder().put("minecraft:salmon_mob", "minecraft:salmon").put("minecraft:cod_mob", "minecraft:cod").build();
+   public static final Map<String, String> RENAMED_EGG_IDS = (Map) ImmutableMap.builder().put("minecraft:salmon_mob_spawn_egg", "minecraft:salmon_spawn_egg").put("minecraft:cod_mob_spawn_egg", "minecraft:cod_spawn_egg").build();
+   // MagmaCube end - decompile error
 
    public EntityCodSalmonFix(Schema schema, boolean flag) {
       super("EntityCodSalmonFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
index 479b1ddd19745778b5956c87dd27d3ce9e1b4911..aab1050b2a5fc706ff1935ddb977a6e07320b6a6 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
@@ -39,11 +39,11 @@ public class EntityEquipmentToArmorAndHandFix extends DataFix {
             List<IS> list = (List)optional.get();
             IS object = (IS)((Pair)type.read(dynamic.emptyMap()).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created empty itemstack."))).getFirst();
             if (!list.isEmpty()) {
-               either = Either.left(Lists.newArrayList(new Object[]{list.get(0), object}));
+               either = Either.left((List<IS>) Lists.newArrayList(new Object[]{list.get(0), object})); // MagmaCube - decompile error
             }
 
             if (list.size() > 1) {
-               List<IS> list2 = Lists.newArrayList(new Object[]{object, object, object, object});
+               List<IS> list2 = (List<IS>) Lists.newArrayList(new Object[]{object, object, object, object}); // MagmaCube - decompile error
 
                for(int i = 1; i < Math.min(list.size(), 5); ++i) {
                   list2.set(i - 1, list.get(i));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
index 9a3705beb956c42aff5ab9642c7f40d904da986f..fdb7fbe8fd6dfaed77d76bce79442fb0aa8e6a1c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
@@ -93,8 +93,10 @@ public class EntityIdFix extends DataFix {
    }
 
    public TypeRewriteRule makeRule() {
-      TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-      TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+      // MagmaCube start - decompile error
+      TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+      TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
+      // MagmaCube end - decompile error
       Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
       Type<?> type2 = this.getOutputSchema().getType(References.ITEM_STACK);
       return TypeRewriteRule.seq(this.convertUnchecked("item stack entity name hook converter", type, type2), this.fixTypeEverywhere("EntityIdFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> (String)ID_MAP.getOrDefault(s, s))));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
index 91025435e11776b9ae65e2b014efea0ab35d20df..dd6399c06de65fe81e6d839828dbbe53ffa7b6a7 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
@@ -22,8 +22,10 @@ public class EntityMinecartIdentifiersFix extends DataFix {
    }
 
    public TypeRewriteRule makeRule() {
-      TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-      TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+      // MagmaCube start - decompile error
+      TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+      TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
+      // MagmaCube end - decompile error
       return this.fixTypeEverywhere("EntityMinecartIdentifiersFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
             if (!Objects.equals(pair.getFirst(), "Minecart")) {
                return pair;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
index a30f7be56f133fda9873a4e2f5b4159697425d5a..8194dc5cf51e484f0e6e4c9632db776fd8bc68c8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
@@ -6,7 +6,8 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityPufferfishRenameFix extends SimplestEntityRenameFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:puffer_fish_spawn_egg", "minecraft:pufferfish_spawn_egg").build();
+   // MagmaCube - decompile error
+   public static final Map<String, String> RENAMED_IDS = (Map) ImmutableMap.builder().put("minecraft:puffer_fish_spawn_egg", "minecraft:pufferfish_spawn_egg").build();
 
    public EntityPufferfishRenameFix(Schema schema, boolean flag) {
       super("EntityPufferfishRenameFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
index 36aa280142557b2f08c771abb5f4d950ed001b6f..e26993da953f5a612c4c5d28c12f82b96130b1f6 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
@@ -6,7 +6,8 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityRavagerRenameFix extends SimplestEntityRenameFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:illager_beast_spawn_egg", "minecraft:ravager_spawn_egg").build();
+   // MagmaCube - decompile error
+   public static final Map<String, String> RENAMED_IDS = (Map) ImmutableMap.builder().put("minecraft:illager_beast_spawn_egg", "minecraft:ravager_spawn_egg").build();
 
    public EntityRavagerRenameFix(Schema schema, boolean flag) {
       super("EntityRavagerRenameFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
index 133593614d27b30106f7334e363415846afc94b7..0d5d1026f8af45b523b4985830e294e41a5f708a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
@@ -18,8 +18,10 @@ public abstract class EntityRenameFix extends DataFix {
    }
 
    public TypeRewriteRule makeRule() {
-      TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-      TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+       // MagmaCube start - decompile error
+      TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+      TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
+       // MagmaCube end - decompile error
       return this.fixTypeEverywhere(this.name, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
             String s = (String)pair.getFirst();
             Type<?> type = (Type)taggedChoiceType.types().get(s);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
index da0a80f926bff0081068e19f5408b28378fad37c..19e0c56a9ea31e09e91a4a03c73d01c9f54855b2 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
@@ -55,13 +55,13 @@ public class EntityRidingToPassengersFix extends DataFix {
                      NewEntityTree object = (NewEntityTree)typed.set(opticFinder2, pairx).getOptional(opticFinder3).orElseThrow(() -> new IllegalStateException("Should always have an entity tree here"));
                      return Either.left(ImmutableList.of(object));
                   }), Either.right(DSL.unit()));
-                  optional = Optional.of(Pair.of(References.ENTITY_TREE.typeName(), Pair.of(either, ((Pair)pair2.getSecond()).getSecond())));
+                  optional = Optional.of(Pair.of(References.ENTITY_TREE.typeName(), Pair.of(either, (pair2.getSecond()).getSecond()))); // MagmaCube - decompile error
                   Optional<OldEntityTree> optional2 = ((Either)((Pair)pair2.getSecond()).getFirst()).left();
                   if (!optional2.isPresent()) {
                      return (Pair)optional.orElseThrow(() -> new IllegalStateException("Should always have an entity tree here"));
                   }
 
-                  pair2 = (Pair)(new Typed(type, dynamicOps, optional2.get())).getOptional(opticFinder).orElseThrow(() -> new IllegalStateException("Should always have an entity here"));
+                  pair2 = (new Typed<>(type, dynamicOps, optional2.get())).getOptional(opticFinder).orElseThrow(() -> new IllegalStateException("Should always have an entity here")); // MagmaCube - decompile error
                }
             }), this.writeAndRead("player RootVehicle injecter", type8, type9));
       }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
index 09289f29b8bbe8c2ccbcdbdea8ee7b395815ae61..1cd8055b1ae9084d95a65fde97602f317461d27a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
@@ -5,9 +5,11 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class EntityTheRenameningFix extends SimplestEntityRenameFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:commandblock_minecart", "minecraft:command_block_minecart").put("minecraft:ender_crystal", "minecraft:end_crystal").put("minecraft:snowman", "minecraft:snow_golem").put("minecraft:evocation_illager", "minecraft:evoker").put("minecraft:evocation_fangs", "minecraft:evoker_fangs").put("minecraft:illusion_illager", "minecraft:illusioner").put("minecraft:vindication_illager", "minecraft:vindicator").put("minecraft:villager_golem", "minecraft:iron_golem").put("minecraft:xp_orb", "minecraft:experience_orb").put("minecraft:xp_bottle", "minecraft:experience_bottle").put("minecraft:eye_of_ender_signal", "minecraft:eye_of_ender").put("minecraft:fireworks_rocket", "minecraft:firework_rocket").build();
-   public static final Map<String, String> RENAMED_BLOCKS = ImmutableMap.builder().put("minecraft:portal", "minecraft:nether_portal").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:stripped_oak_bark", "minecraft:stripped_oak_wood").put("minecraft:stripped_spruce_bark", "minecraft:stripped_spruce_wood").put("minecraft:stripped_birch_bark", "minecraft:stripped_birch_wood").put("minecraft:stripped_jungle_bark", "minecraft:stripped_jungle_wood").put("minecraft:stripped_acacia_bark", "minecraft:stripped_acacia_wood").put("minecraft:stripped_dark_oak_bark", "minecraft:stripped_dark_oak_wood").put("minecraft:mob_spawner", "minecraft:spawner").build();
-   public static final Map<String, String> RENAMED_ITEMS = ImmutableMap.builder().putAll(RENAMED_BLOCKS).put("minecraft:clownfish", "minecraft:tropical_fish").put("minecraft:chorus_fruit_popped", "minecraft:popped_chorus_fruit").put("minecraft:evocation_illager_spawn_egg", "minecraft:evoker_spawn_egg").put("minecraft:vindication_illager_spawn_egg", "minecraft:vindicator_spawn_egg").build();
+   // MagmaCube start - decompile error
+   public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:commandblock_minecart", "minecraft:command_block_minecart").put("minecraft:ender_crystal", "minecraft:end_crystal").put("minecraft:snowman", "minecraft:snow_golem").put("minecraft:evocation_illager", "minecraft:evoker").put("minecraft:evocation_fangs", "minecraft:evoker_fangs").put("minecraft:illusion_illager", "minecraft:illusioner").put("minecraft:vindication_illager", "minecraft:vindicator").put("minecraft:villager_golem", "minecraft:iron_golem").put("minecraft:xp_orb", "minecraft:experience_orb").put("minecraft:xp_bottle", "minecraft:experience_bottle").put("minecraft:eye_of_ender_signal", "minecraft:eye_of_ender").put("minecraft:fireworks_rocket", "minecraft:firework_rocket").build();
+   public static final Map<String, String> RENAMED_BLOCKS = ImmutableMap.<String, String>builder().put("minecraft:portal", "minecraft:nether_portal").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:stripped_oak_bark", "minecraft:stripped_oak_wood").put("minecraft:stripped_spruce_bark", "minecraft:stripped_spruce_wood").put("minecraft:stripped_birch_bark", "minecraft:stripped_birch_wood").put("minecraft:stripped_jungle_bark", "minecraft:stripped_jungle_wood").put("minecraft:stripped_acacia_bark", "minecraft:stripped_acacia_wood").put("minecraft:stripped_dark_oak_bark", "minecraft:stripped_dark_oak_wood").put("minecraft:mob_spawner", "minecraft:spawner").build();
+   public static final Map<String, String> RENAMED_ITEMS = ImmutableMap.<String, String>builder().putAll(RENAMED_BLOCKS).put("minecraft:clownfish", "minecraft:tropical_fish").put("minecraft:chorus_fruit_popped", "minecraft:popped_chorus_fruit").put("minecraft:evocation_illager_spawn_egg", "minecraft:evoker_spawn_egg").put("minecraft:vindication_illager_spawn_egg", "minecraft:vindicator_spawn_egg").build();
+   // MagmaCube end - decompile error
    private static final String MINECRAFT_BRED = "minecraft:bred_";
 
    public EntityTheRenameningFix(Schema schema, boolean flag) {
@@ -15,8 +17,10 @@ public class EntityTheRenameningFix extends SimplestEntityRenameFix {
    }
 
    protected String rename(String s) {
-      if (s.startsWith("minecraft:bred_")) {
-         s = "minecraft:" + s.substring("minecraft:bred_".length());
+      // MagmaCube start - use constant field
+      if (s.startsWith(MINECRAFT_BRED)) {
+         s = "minecraft:" + s.substring(MINECRAFT_BRED.length());
+         // MagmaCube end - use constant field
       }
 
       return (String)RENAMED_IDS.getOrDefault(s, s);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
index 89afdbe310f85a61ab5e6dbedae0183c9caa35ea..c34c976f5d2ce974016a20ed3fa14d0fa664a08c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
@@ -62,9 +62,10 @@ public class EntityUUIDFix extends AbstractUUIDFix {
    }
 
    private static Dynamic<?> updatePiglin(Dynamic<?> dynamic) {
-      return dynamic.update("Brain", (dynamicx) -> dynamicx.update("memories", (dynamic) -> dynamic.update("minecraft:angry_at", (dynamicx) -> (Dynamic)replaceUUIDString(dynamicx, "value", "value").orElseGet(() -> {
+      // MagmaCube - decompile error
+      return dynamic.update("Brain", (dynamicx) -> dynamicx.update("memories", (dynamicxxx) -> dynamicxxx.update("minecraft:angry_at", (dynamicxx) -> (Dynamic)replaceUUIDString(dynamicxx, "value", "value").orElseGet(() -> {
                   LOGGER.warn("angry_at has no value.");
-                  return dynamicx;
+                  return dynamicxx;
                }))));
    }
 
@@ -91,7 +92,7 @@ public class EntityUUIDFix extends AbstractUUIDFix {
    }
 
    private static Dynamic<?> updateFox(Dynamic<?> dynamic) {
-      Optional<Dynamic<?>> optional = dynamic.get("TrustedUUIDs").result().map((dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> (Dynamic)createUUIDFromML(dynamicx).orElseGet(() -> {
+      Optional<Dynamic<?>> optional = dynamic.get("TrustedUUIDs").result().map((dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> createUUIDFromML(dynamicx).orElseGet(() -> { // MagmaCube - decompile error
                LOGGER.warn("Trusted contained invalid data.");
                return dynamicx;
             }))));
@@ -117,7 +118,8 @@ public class EntityUUIDFix extends AbstractUUIDFix {
    }
 
    public static Dynamic<?> updateLivingEntity(Dynamic<?> dynamic) {
-      return dynamic.update("Attributes", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> dynamicx.update("Modifiers", (dynamic2) -> dynamicx.createList(dynamic2.asStream().map((dynamic) -> (Dynamic)replaceUUIDLeastMost(dynamic, "UUID", "UUID").orElse(dynamic)))))));
+      // MagmaCube - decompile error
+      return dynamic.update("Attributes", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> dynamicx.update("Modifiers", (dynamic2x) -> dynamicx.createList(dynamic2x.asStream().map((dynamicxx) -> replaceUUIDLeastMost(dynamicxx, "UUID", "UUID").orElse(dynamicxx))))))); // MagmaCube - decompile error
    }
 
    private static Dynamic<?> updateProjectile(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
index 0f6eb2098c44a97c4fd3675402c37cbdaca34b71..58aae7e26b5152fd623e4e4650ab27358a3b3d30 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
@@ -6,7 +6,8 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityZombifiedPiglinRenameFix extends SimplestEntityRenameFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:zombie_pigman_spawn_egg", "minecraft:zombified_piglin_spawn_egg").build();
+   // MagmaCube - decompile error
+   public static final Map<String, String> RENAMED_IDS = (Map) ImmutableMap.builder().put("minecraft:zombie_pigman_spawn_egg", "minecraft:zombified_piglin_spawn_egg").build();
 
    public EntityZombifiedPiglinRenameFix(Schema schema) {
       super("EntityZombifiedPiglinRenameFix", schema, true);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java b/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
index d84b8e77458acab89b25a170d1fcf97635d03af9..b28994a9acf0777e2613811c642c752f56035f9e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
@@ -24,6 +24,6 @@ public class ForcePoiRebuild extends DataFix {
    }
 
    private static <T> Dynamic<T> cap(Dynamic<T> dynamic) {
-      return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.remove("Valid"))));
+      return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicz) -> dynamicz.remove("Valid")))); // MagmaCube - decompile error
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
index e34988489a7eb08fad5f3de730938f1576ca1f68..07d5552b1cb6d02f76bdb4cb493e8381bd0bff45 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
@@ -50,8 +50,10 @@ public class FurnaceRecipeFix extends DataFix {
          int i3 = dynamic.get(s2).asInt(0);
          if (i3 > 0) {
             optional.ifPresent((dynamicx) -> {
-               Optional<? extends Pair<R, ? extends Dynamic<?>>> optional = type.read(dynamicx).result();
-               optional.ifPresent((pair) -> list.add(Pair.of(pair.getFirst(), i3)));
+               // MagmaCube start - decompile error
+               Optional<? extends Pair<R, ? extends Dynamic<?>>> optionalx = type.read(dynamicx).result();
+               optionalx.ifPresent((pair) -> list.add(Pair.of(pair.getFirst(), i3)));
+               // MagmaCube end - decompile error
             });
          }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
index 4eb76706d6386bee940798d1d9edd171b03d242f..9af3d966cf4ce61495682d1e526103e0d3d57560 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
@@ -12,6 +12,6 @@ public class GossipUUIDFix extends NamedEntityFix {
    }
 
    protected Typed<?> fix(Typed<?> typed) {
-      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Gossips", (dynamicx) -> (Dynamic)DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> (Dynamic)AbstractUUIDFix.replaceUUIDLeastMost(dynamic, "Target", "Target").orElse(dynamic))).map(dynamicx::createList), dynamicx)));
+      return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Gossips", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicc) -> AbstractUUIDFix.replaceUUIDLeastMost(dynamicc, "Target", "Target").orElse(dynamicc))).map(dynamicx::createList), dynamicx))); // MagmaCube - decompile error
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java b/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
index 0a1384caa2959b261d213cbee09b4ea511c004af..dedba4284298f06649a6c7ed1dee648f5f870aba 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
@@ -23,7 +23,7 @@ public class IglooMetadataRemovalFix extends DataFix {
    }
 
    private static <T> Dynamic<T> removeIglooPieces(Dynamic<T> dynamic) {
-      return (Dynamic)dynamic.asStreamOpt().map((stream) -> stream.filter((dynamic) -> !isIglooPiece(dynamic))).map(dynamic::createList).result().orElse(dynamic);
+      return (Dynamic)dynamic.asStreamOpt().map((stream) -> stream.filter((dynamicx) -> !isIglooPiece(dynamicx))).map(dynamic::createList).result().orElse(dynamic); // MagmaCube - decompile error
    }
 
    private static boolean isIglooPiece(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
index ef2f2a0b8b4a3e37361fb6b460e47f126028cd2d..2c97eb0752d8ab22c385b795bdade135753833f9 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
@@ -20,7 +20,7 @@ public class ItemLoreFix extends DataFix {
    protected TypeRewriteRule makeRule() {
       Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
       OpticFinder<?> opticFinder = type.findField("tag");
-      return this.fixTypeEverywhereTyped("Item Lore componentize", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("display", (dynamicx) -> dynamicx.update("Lore", (dynamic) -> (Dynamic)DataFixUtils.orElse(dynamic.asStreamOpt().map(ItemLoreFix::fixLoreList).map(dynamic::createList).result(), dynamic))))));
+      return this.fixTypeEverywhereTyped("Item Lore componentize", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("display", (dynamicx) -> dynamicx.update("Lore", (dynamicc) -> (Dynamic)DataFixUtils.orElse(dynamicc.asStreamOpt().map(ItemLoreFix::fixLoreList).map(dynamicc::createList).result(), dynamicc)))))); // MagmaCube - decompile error
    }
 
    private static <T> Stream<Dynamic<T>> fixLoreList(Stream<Dynamic<T>> stream) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
index 52bcf0beb8253a14b3a74008742826fbf1fcd54c..2244c3be773db61663297a6c06761a7de6f4411a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
@@ -61,11 +61,13 @@ public class ItemStackEnchantmentNamesFix extends DataFix {
    }
 
    private Dynamic<?> fixTag(Dynamic<?> dynamic) {
-      Optional<? extends Dynamic<?>> optional = dynamic.get("ench").asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.set("id", dynamic.createString((String)MAP.getOrDefault(dynamic.get("id").asInt(0), "null"))))).map(dynamic::createList).result();
+      // MagmaCube - decompile error
+      Optional<? extends Dynamic<?>> optional = dynamic.get("ench").asStreamOpt().map((stream) -> stream.map((dynamicx) -> dynamicx.set("id", dynamicx.createString((String)MAP.getOrDefault(dynamicx.get("id").asInt(0), "null"))))).map(dynamic::createList).result();
       if (optional.isPresent()) {
          dynamic = dynamic.remove("ench").set("Enchantments", (Dynamic)optional.get());
       }
 
-      return dynamic.update("StoredEnchantments", (dynamicx) -> (Dynamic)DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.set("id", dynamic.createString((String)MAP.getOrDefault(dynamic.get("id").asInt(0), "null"))))).map(dynamicx::createList).result(), dynamicx));
+      // MagmaCube - decompile error
+      return dynamic.update("StoredEnchantments", (dynamicx) -> (Dynamic)DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamicxx) -> dynamicxx.set("id", dynamicxx.createString((String)MAP.getOrDefault(dynamicxx.get("id").asInt(0), "null"))))).map(dynamicx::createList).result(), dynamicx));
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackUUIDFix.java
index 5e152911fb9f49b78860570fce3bb801bbabc216..d6ea9a018749b3a9a0037c3364dda8df0d5e1b4c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackUUIDFix.java
@@ -29,10 +29,10 @@ public class ItemStackUUIDFix extends AbstractUUIDFix {
    }
 
    private Dynamic<?> updateAttributeModifiers(Dynamic<?> dynamic) {
-      return dynamic.update("AttributeModifiers", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> (Dynamic)replaceUUIDLeastMost(dynamicx, "UUID", "UUID").orElse(dynamicx))));
+      return dynamic.update("AttributeModifiers", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> replaceUUIDLeastMost(dynamicx, "UUID", "UUID").orElse(dynamicx)))); // MagmaCube - decompile error
    }
 
    private Dynamic<?> updateSkullOwner(Dynamic<?> dynamic) {
-      return dynamic.update("SkullOwner", (dynamicx) -> (Dynamic)replaceUUIDString(dynamicx, "Id", "Id").orElse(dynamicx));
+      return dynamic.update("SkullOwner", (dynamicx) -> replaceUUIDString(dynamicx, "Id", "Id").orElse(dynamicx)); // MagmaCube - decompile error
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
index 6e6645b084e2626b4d80143ea0a7a37560132709..dadb565ca085c0ba09fc688f85ef0a7678c20f7a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
@@ -20,11 +20,13 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix {
    }
 
    public Dynamic<?> fixTag(Dynamic<?> dynamic) {
-      return dynamic.update("pages", (dynamic2) -> (Dynamic)DataFixUtils.orElse(dynamic2.asStreamOpt().map((stream) -> stream.map((dynamic) -> {
-               if (!dynamic.asString().result().isPresent()) {
-                  return dynamic;
+      // MagmaCube - decompile error
+      return dynamic.update("pages", (dynamic2) -> (Dynamic)DataFixUtils.orElse(dynamic2.asStreamOpt().map((stream) -> stream.map((dynamicx) -> {
+               if (!dynamicx.asString().result().isPresent()) {
+                  return dynamicx;
+                  // MagmaCube end - decompile error
                } else {
-                  String s = dynamic.asString("");
+                  String s = dynamicx.asString(""); // MagmaCube - decompile error
                   Component component = null;
                   if (!"null".equals(s) && !StringUtils.isEmpty(s)) {
                      if (s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"' || s.charAt(0) == '{' && s.charAt(s.length() - 1) == '}') {
@@ -60,7 +62,7 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix {
                      component = TextComponent.EMPTY;
                   }
 
-                  return dynamic.createString(Component.Serializer.toJson(component));
+                  return dynamicx.createString(Component.Serializer.toJson(component));
                }
             })).map(dynamic::createList).result(), dynamic.emptyList()));
    }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java b/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
index f9012e8862ffdf2768fb06b5c7b000c782661ad0..1f1acc9b26bd69e5a0dc6aa4e116fe8c6307566c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
@@ -10,7 +10,7 @@ import java.util.Map;
 import java.util.Optional;
 
 public class JigsawRotationFix extends DataFix {
-   private static final Map<String, String> RENAMES = ImmutableMap.builder().put("down", "down_south").put("up", "up_north").put("north", "north_up").put("south", "south_up").put("west", "west_up").put("east", "east_up").build();
+   private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("down", "down_south").put("up", "up_north").put("north", "north_up").put("south", "south_up").put("west", "west_up").put("east", "east_up").build(); // MagmaCube - decompile error
 
    public JigsawRotationFix(Schema schema, boolean flag) {
       super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
index 5c2d8de0a41dd5e733fb0a8d5fb9af9602d12a2c..45b48c0ca67c649ee0701a818554588b35909ec3 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
@@ -73,10 +73,10 @@ public class LeavesFix extends DataFix {
          OpticFinder<?> opticFinder3 = DSL.typeFinder(type3);
          return this.fixTypeEverywhereTyped("Leaves fix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> {
                int[] ints = new int[]{0};
-               Typed<?> typed2 = typedx.updateTyped(opticFinder2, (typed) -> {
-                  Int2ObjectMap<LeavesFix.LeavesSection> int2ObjectMap = new Int2ObjectOpenHashMap((Map)typed.getAllTyped(opticFinder3).stream().map((typedx) -> new LeavesFix.LeavesSection(typedx, this.getInputSchema())).collect(Collectors.toMap(LeavesFix.Section::getIndex, (leavesSection) -> leavesSection)));
+               Typed<?> typed2 = typedx.updateTyped(opticFinder2, (typedIn) -> {
+                  Int2ObjectMap<LeavesFix.LeavesSection> int2ObjectMap = new Int2ObjectOpenHashMap<>(typedIn.getAllTyped(opticFinder3).stream().map((typedxIn) -> new LeavesFix.LeavesSection(typedxIn, this.getInputSchema())).collect(Collectors.toMap(LeavesFix.Section::getIndex, (leavesSection) -> leavesSection)));
                   if (int2ObjectMap.values().stream().allMatch(LeavesFix.Section::isSkippable)) {
-                     return typed;
+                     return typedIn;
                   } else {
                      List<IntSet> list = Lists.newArrayList();
 
@@ -135,7 +135,7 @@ public class LeavesFix extends DataFix {
                         }
                      }
 
-                     return typed.updateTyped(opticFinder3, (typedx) -> ((LeavesFix.LeavesSection)int2ObjectMap.get(((Dynamic)typedx.get(DSL.remainderFinder())).get("Y").asInt(0))).write(typedx));
+                     return typedIn.updateTyped(opticFinder3, (typedxIn) -> ((LeavesFix.LeavesSection)int2ObjectMap.get(((Dynamic)typedxIn.get(DSL.remainderFinder())).get("Y").asInt(0))).write(typedxIn));
                   }
                });
                if (ints[0] != 0) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java
index 70021d3eeeb477062c694eadaa40ba48f0cb48de..69905100bbcea85050f52c31175278fbf4750ce6 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java
@@ -170,7 +170,8 @@ public class LevelDataGeneratorOptionsFix extends DataFix {
       }
 
       T object = (T)dynamicOps.createList(list.stream().map((pair) -> dynamicOps.createMap(ImmutableMap.of(dynamicOps.createString("height"), dynamicOps.createInt(pair.getFirst()), dynamicOps.createString("block"), dynamicOps.createString((String)pair.getSecond())))));
-      T object2 = (T)dynamicOps.createMap((Map)map.entrySet().stream().map((entry) -> Pair.of(dynamicOps.createString(((String)entry.getKey()).toLowerCase(Locale.ROOT)), dynamicOps.createMap((Map)((Map)entry.getValue()).entrySet().stream().map((entryx) -> Pair.of(dynamicOps.createString((String)entryx.getKey()), dynamicOps.createString((String)entryx.getValue()))).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond))))).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)));
+      // MagmaCube - decompile error
+      T object2 = (T)dynamicOps.createMap(map.entrySet().stream().map((entry) -> Pair.of(dynamicOps.createString(((String)entry.getKey()).toLowerCase(Locale.ROOT)), dynamicOps.createMap((entry.getValue()).entrySet().stream().map((entryx) -> Pair.of(dynamicOps.createString((String)entryx.getKey()), dynamicOps.createString((String)entryx.getValue()))).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond))))).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)));
       return new Dynamic(dynamicOps, dynamicOps.createMap(ImmutableMap.of(dynamicOps.createString("layers"), object, dynamicOps.createString("biome"), dynamicOps.createString(s2), dynamicOps.createString("structures"), object2)));
    }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
index c1af20a042b34e1dd62a14ed87b23353d81d4f41..3d77d480722a2b1e9e8beabb6b51178149fe225f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
@@ -59,16 +59,16 @@ public class LevelFlatGeneratorInfoFix extends DataFix {
             stringBuilder.append((String)StreamSupport.stream(LAYER_SPLITTER.split(s3).spliterator(), false).map((sx) -> {
                List<String> list = splitter.splitToList(sx);
                int i2;
-               String s2;
+               String s2x; // MagmaCube - decompile error
                if (list.size() == 2) {
                   i2 = NumberUtils.toInt((String)list.get(0));
-                  s2 = (String)list.get(1);
+                  s2x = (String)list.get(1); // MagmaCube - decompile error
                } else {
                   i2 = 1;
-                  s2 = (String)list.get(0);
+                  s2x = (String)list.get(0); // MagmaCube - decompile error
                }
 
-               List<String> list2 = BLOCK_SPLITTER.splitToList(s2);
+               List<String> list2 = BLOCK_SPLITTER.splitToList(s2x); // MagmaCube - decompile error
                int i4 = ((String)list2.get(0)).equals("minecraft") ? 1 : 0;
                String s4 = (String)list2.get(i4);
                int i5 = i == 3 ? EntityBlockStateFix.getBlockId("minecraft:" + s4) : NumberUtils.toInt(s4, 0);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
index 8ad7dbf7565794780950c22ddd348c7bf6e8b551..b741ab4e146491e31df8de60ba453ca777b6ac11 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
@@ -23,13 +23,13 @@ public class LevelUUIDFix extends AbstractUUIDFix {
    }
 
    private Dynamic<?> updateDragonFight(Dynamic<?> dynamic) {
-      return dynamic.update("DimensionData", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("DragonFight", (dynamicx) -> (Dynamic)replaceUUIDLeastMost(dynamicx, "DragonUUID", "Dragon").orElse(dynamicx)))));
+      return dynamic.update("DimensionData", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicz) -> dynamicz.update("DragonFight", (dynamicxc) -> (Dynamic)replaceUUIDLeastMost(dynamicxc, "DragonUUID", "Dragon").orElse(dynamicxc))))); // MagmaCube - decompile error
    }
 
    private Dynamic<?> updateCustomBossEvents(Dynamic<?> dynamic) {
-      return dynamic.update("CustomBossEvents", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("Players", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> (Dynamic)createUUIDFromML(dynamicx).orElseGet(() -> {
+      return dynamic.update("CustomBossEvents", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicz) -> dynamicz.update("Players", (dynamic2) -> dynamicz.createList(dynamic2.asStream().map((dynamicxc) -> createUUIDFromML(dynamicxc).orElseGet(() -> { // MagmaCube - decompile error
                         LOGGER.warn("CustomBossEvents contains invalid UUIDs.");
-                        return dynamicx;
+                        return dynamicxc; // MagmaCube - decompile error
                      })))))));
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
index 26c1e8ab25ca7fea441d24fdde334de6d58b0ea3..9ae448b28936f98ce51af143f376238a4a1bff5f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
@@ -32,10 +32,12 @@ public class MobSpawnerEntityIdentifiersFix extends DataFix {
 
          Optional<? extends Stream<? extends Dynamic<?>>> optional2 = dynamic.get("SpawnPotentials").asStreamOpt().result();
          if (optional2.isPresent()) {
-            dynamic = dynamic.set("SpawnPotentials", dynamic.createList(((Stream)optional2.get()).map((dynamicx) -> {
-               Optional<String> optional = dynamicx.get("Type").asString().result();
-               if (optional.isPresent()) {
-                  Dynamic<?> dynamic2 = ((Dynamic)DataFixUtils.orElse(dynamicx.get("Properties").result(), dynamicx.emptyMap())).set("id", dynamicx.createString((String)optional.get()));
+            // MagmaCube start - decompile error
+            dynamic = dynamic.set("SpawnPotentials", dynamic.createList((optional2.get()).map((dynamicx) -> {
+               Optional<String> optionalx = dynamicx.get("Type").asString().result();
+               if (optionalx.isPresent()) {
+                  Dynamic<?> dynamic2 = (DataFixUtils.orElse(dynamicx.get("Properties").result(), dynamicx.emptyMap())).set("id", dynamicx.createString((String)optionalx.get()));
+                  // MagmaCube end - decompile error
                   return dynamicx.set("Entity", dynamic2).remove("Type").remove("Properties");
                } else {
                   return dynamicx;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java b/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
index 338495a46e3a0e30debeab9707885059cc2a3c84..0960498b8668060c83e23d7397054aac64063947 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
@@ -34,7 +34,7 @@ public class NewVillageFix extends DataFix {
       OpticFinder<?> opticFinder2 = opticFinder.type().findField("Structures");
       OpticFinder<?> opticFinder3 = opticFinder2.type().findField("Starts");
       OpticFinder<List<Pair<String, SF>>> opticFinder4 = compoundListType.finder();
-      return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("NewVillageFix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.updateTyped(opticFinder3, (typedx) -> typedx.update(opticFinder4, (list) -> (List)list.stream().filter((pair) -> !Objects.equals(pair.getFirst(), "Village")).map((pair) -> pair.mapFirst((s) -> s.equals("New_Village") ? "Village" : s)).collect(Collectors.toList()))).update(DSL.remainderFinder(), (dynamic) -> dynamic.update("References", (dynamicx) -> {
+      return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("NewVillageFix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedz) -> typedz.updateTyped(opticFinder3, (typedxd) -> typedxd.update(opticFinder4, (list) -> list.stream().filter((pair) -> !Objects.equals(pair.getFirst(), "Village")).map((pair) -> pair.mapFirst((s) -> s.equals("New_Village") ? "Village" : s)).collect(Collectors.toList()))).update(DSL.remainderFinder(), (dynamic) -> dynamic.update("References", (dynamicx) -> { // MagmaCube - decompile error
                      Optional<? extends Dynamic<?>> optional = dynamicx.get("New_Village").result();
                      return ((Dynamic)DataFixUtils.orElse(optional.map((dynamic2) -> dynamicx.remove("New_Village").set("Village", dynamic2)), dynamicx)).remove("Village");
                   }))))), this.fixTypeEverywhereTyped("NewVillageStartFix", type2, (typed) -> typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("id", (dynamicx) -> Objects.equals(NamespacedSchema.ensureNamespaced(dynamicx.asString("")), "minecraft:new_village") ? dynamicx.createString("minecraft:village") : dynamicx))));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java b/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java
index 46621b69a5e869d49b6d22bc9770664e12998295..2d253bbd0a2e07b18a80c6a76b1f63a182c0ea31 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java
@@ -26,11 +26,11 @@ public abstract class PoiTypeRename extends DataFix {
    }
 
    private <T> Dynamic<T> cap(Dynamic<T> dynamic) {
-      return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("Records", (dynamicx) -> (Dynamic)DataFixUtils.orElse(this.renameRecords(dynamicx), dynamicx)))));
+      return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicxxx) -> dynamicxxx.update("Records", (dynamicxx) -> (Dynamic)DataFixUtils.orElse(this.renameRecords(dynamicxx), dynamicxx))))); // MagmaCube - decompile error
    }
 
    private <T> Optional<Dynamic<T>> renameRecords(Dynamic<T> dynamic) {
-      return dynamic.asStreamOpt().map((stream) -> dynamic.createList(stream.map((dynamicx) -> dynamicx.update("type", (dynamic) -> (Dynamic)DataFixUtils.orElse(dynamic.asString().map(this::rename).map(dynamic::createString).result(), dynamic))))).result();
+      return dynamic.asStreamOpt().map((stream) -> dynamic.createList(stream.map((dynamicx) -> dynamicx.update("type", (dynamicxxx) -> (Dynamic)DataFixUtils.orElse(dynamicxxx.asString().map(this::rename).map(dynamicxxx::createString).result(), dynamicxxx))))).result(); // MagmaCube - decompile error
    }
 
    protected abstract String rename(String var1);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
index f85e8176ca0f04248919d84a26411df88bc48bfb..6dc08319f678c081e3868780bd5273b86e73cd25 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
@@ -5,7 +5,8 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class RecipesFix extends RecipesRenameFix {
-   private static final Map<String, String> RECIPES = ImmutableMap.builder().put("minecraft:acacia_wooden_slab", "minecraft:acacia_slab").put("minecraft:birch_wooden_slab", "minecraft:birch_slab").put("minecraft:black_stained_hardened_clay", "minecraft:black_terracotta").put("minecraft:blue_stained_hardened_clay", "minecraft:blue_terracotta").put("minecraft:boat", "minecraft:oak_boat").put("minecraft:bone_meal_from_block", "minecraft:bone_meal_from_bone_block").put("minecraft:bone_meal_from_bone", "minecraft:bone_meal").put("minecraft:brick_block", "minecraft:bricks").put("minecraft:brown_stained_hardened_clay", "minecraft:brown_terracotta").put("minecraft:chiseled_stonebrick", "minecraft:chiseled_stone_bricks").put("minecraft:cyan_stained_hardened_clay", "minecraft:cyan_terracotta").put("minecraft:dark_oak_wooden_slab", "minecraft:dark_oak_slab").put("minecraft:end_bricks", "minecraft:end_stone_bricks").put("minecraft:fence_gate", "minecraft:oak_fence_gate").put("minecraft:fence", "minecraft:oak_fence").put("minecraft:golden_rail", "minecraft:powered_rail").put("minecraft:gold_ingot_from_block", "minecraft:gold_ingot_from_gold_block").put("minecraft:gray_stained_hardened_clay", "minecraft:gray_terracotta").put("minecraft:green_stained_hardened_clay", "minecraft:green_terracotta").put("minecraft:iron_ingot_from_block", "minecraft:iron_ingot_from_iron_block").put("minecraft:jungle_wooden_slab", "minecraft:jungle_slab").put("minecraft:light_blue_stained_hardened_clay", "minecraft:light_blue_terracotta").put("minecraft:light_gray_stained_hardened_clay", "minecraft:light_gray_terracotta").put("minecraft:lime_stained_hardened_clay", "minecraft:lime_terracotta").put("minecraft:lit_pumpkin", "minecraft:jack_o_lantern").put("minecraft:magenta_stained_hardened_clay", "minecraft:magenta_terracotta").put("minecraft:magma", "minecraft:magma_block").put("minecraft:melon_block", "minecraft:melon").put("minecraft:mossy_stonebrick", "minecraft:mossy_stone_bricks").put("minecraft:noteblock", "minecraft:note_block").put("minecraft:oak_wooden_slab", "minecraft:oak_slab").put("minecraft:orange_stained_hardened_clay", "minecraft:orange_terracotta").put("minecraft:pillar_quartz_block", "minecraft:quartz_pillar").put("minecraft:pink_stained_hardened_clay", "minecraft:pink_terracotta").put("minecraft:purple_shulker_box", "minecraft:shulker_box").put("minecraft:purple_stained_hardened_clay", "minecraft:purple_terracotta").put("minecraft:red_nether_brick", "minecraft:red_nether_bricks").put("minecraft:red_stained_hardened_clay", "minecraft:red_terracotta").put("minecraft:slime", "minecraft:slime_block").put("minecraft:smooth_red_sandstone", "minecraft:cut_red_sandstone").put("minecraft:smooth_sandstone", "minecraft:cut_sandstone").put("minecraft:snow_layer", "minecraft:snow").put("minecraft:snow", "minecraft:snow_block").put("minecraft:speckled_melon", "minecraft:glistering_melon_slice").put("minecraft:spruce_wooden_slab", "minecraft:spruce_slab").put("minecraft:stonebrick", "minecraft:stone_bricks").put("minecraft:stone_stairs", "minecraft:cobblestone_stairs").put("minecraft:string_to_wool", "minecraft:white_wool_from_string").put("minecraft:trapdoor", "minecraft:oak_trapdoor").put("minecraft:white_stained_hardened_clay", "minecraft:white_terracotta").put("minecraft:wooden_button", "minecraft:oak_button").put("minecraft:wooden_door", "minecraft:oak_door").put("minecraft:wooden_pressure_plate", "minecraft:oak_pressure_plate").put("minecraft:yellow_stained_hardened_clay", "minecraft:yellow_terracotta").build();
+   // MagmaCube - decompile error
+   private static final Map<String, String> RECIPES = (Map) ImmutableMap.builder().put("minecraft:acacia_wooden_slab", "minecraft:acacia_slab").put("minecraft:birch_wooden_slab", "minecraft:birch_slab").put("minecraft:black_stained_hardened_clay", "minecraft:black_terracotta").put("minecraft:blue_stained_hardened_clay", "minecraft:blue_terracotta").put("minecraft:boat", "minecraft:oak_boat").put("minecraft:bone_meal_from_block", "minecraft:bone_meal_from_bone_block").put("minecraft:bone_meal_from_bone", "minecraft:bone_meal").put("minecraft:brick_block", "minecraft:bricks").put("minecraft:brown_stained_hardened_clay", "minecraft:brown_terracotta").put("minecraft:chiseled_stonebrick", "minecraft:chiseled_stone_bricks").put("minecraft:cyan_stained_hardened_clay", "minecraft:cyan_terracotta").put("minecraft:dark_oak_wooden_slab", "minecraft:dark_oak_slab").put("minecraft:end_bricks", "minecraft:end_stone_bricks").put("minecraft:fence_gate", "minecraft:oak_fence_gate").put("minecraft:fence", "minecraft:oak_fence").put("minecraft:golden_rail", "minecraft:powered_rail").put("minecraft:gold_ingot_from_block", "minecraft:gold_ingot_from_gold_block").put("minecraft:gray_stained_hardened_clay", "minecraft:gray_terracotta").put("minecraft:green_stained_hardened_clay", "minecraft:green_terracotta").put("minecraft:iron_ingot_from_block", "minecraft:iron_ingot_from_iron_block").put("minecraft:jungle_wooden_slab", "minecraft:jungle_slab").put("minecraft:light_blue_stained_hardened_clay", "minecraft:light_blue_terracotta").put("minecraft:light_gray_stained_hardened_clay", "minecraft:light_gray_terracotta").put("minecraft:lime_stained_hardened_clay", "minecraft:lime_terracotta").put("minecraft:lit_pumpkin", "minecraft:jack_o_lantern").put("minecraft:magenta_stained_hardened_clay", "minecraft:magenta_terracotta").put("minecraft:magma", "minecraft:magma_block").put("minecraft:melon_block", "minecraft:melon").put("minecraft:mossy_stonebrick", "minecraft:mossy_stone_bricks").put("minecraft:noteblock", "minecraft:note_block").put("minecraft:oak_wooden_slab", "minecraft:oak_slab").put("minecraft:orange_stained_hardened_clay", "minecraft:orange_terracotta").put("minecraft:pillar_quartz_block", "minecraft:quartz_pillar").put("minecraft:pink_stained_hardened_clay", "minecraft:pink_terracotta").put("minecraft:purple_shulker_box", "minecraft:shulker_box").put("minecraft:purple_stained_hardened_clay", "minecraft:purple_terracotta").put("minecraft:red_nether_brick", "minecraft:red_nether_bricks").put("minecraft:red_stained_hardened_clay", "minecraft:red_terracotta").put("minecraft:slime", "minecraft:slime_block").put("minecraft:smooth_red_sandstone", "minecraft:cut_red_sandstone").put("minecraft:smooth_sandstone", "minecraft:cut_sandstone").put("minecraft:snow_layer", "minecraft:snow").put("minecraft:snow", "minecraft:snow_block").put("minecraft:speckled_melon", "minecraft:glistering_melon_slice").put("minecraft:spruce_wooden_slab", "minecraft:spruce_slab").put("minecraft:stonebrick", "minecraft:stone_bricks").put("minecraft:stone_stairs", "minecraft:cobblestone_stairs").put("minecraft:string_to_wool", "minecraft:white_wool_from_string").put("minecraft:trapdoor", "minecraft:oak_trapdoor").put("minecraft:white_stained_hardened_clay", "minecraft:white_terracotta").put("minecraft:wooden_button", "minecraft:oak_button").put("minecraft:wooden_door", "minecraft:oak_door").put("minecraft:wooden_pressure_plate", "minecraft:oak_pressure_plate").put("minecraft:yellow_stained_hardened_clay", "minecraft:yellow_terracotta").build();
 
    public RecipesFix(Schema schema, boolean flag) {
       super(schema, flag, "Recipes fix", (s) -> (String)RECIPES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
index fe8f9ddd5ff0a82f2ea2383dcfc146dc1900a22a..d2537536b4a6e4956b18d97b3ab837644a0b657c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
@@ -5,7 +5,8 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class RecipesRenameningFix extends RecipesRenameFix {
-   private static final Map<String, String> RECIPES = ImmutableMap.builder().put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").build();
+   // MagmaCube - decompile error
+   private static final Map<String, String> RECIPES = (Map) ImmutableMap.builder().put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").build();
 
    public RecipesRenameningFix(Schema schema, boolean flag) {
       super(schema, flag, "Recipes renamening fix", (s) -> (String)RECIPES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
index 48446f3bdd3ec221085e35ae9f39f6e7895621e9..91b7e1a73dacc6275c34b2d0a7c55c11c8d6ae12 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
@@ -23,13 +23,15 @@ public class RedstoneWireConnectionsFix extends DataFix {
          String s2 = dynamicx.get("west").asString("none");
          String s3 = dynamicx.get("north").asString("none");
          String s4 = dynamicx.get("south").asString("none");
-         boolean flag = isConnected(s) || isConnected(s2);
+         boolean flagx = isConnected(s) || isConnected(s2); // MagmaCube - decompile error
          boolean flag2 = isConnected(s3) || isConnected(s4);
          String s5 = !isConnected(s) && !flag2 ? "side" : s;
          String s6 = !isConnected(s2) && !flag2 ? "side" : s2;
-         String s7 = !isConnected(s3) && !flag ? "side" : s3;
-         String s8 = !isConnected(s4) && !flag ? "side" : s4;
-         return dynamicx.update("east", (dynamic) -> dynamic.createString(s5)).update("west", (dynamic) -> dynamic.createString(s6)).update("north", (dynamic) -> dynamic.createString(s7)).update("south", (dynamic) -> dynamic.createString(s8));
+         // MagmaCube start - decompile error
+         String s7 = !isConnected(s3) && !flagx ? "side" : s3;
+         String s8 = !isConnected(s4) && !flagx ? "side" : s4;
+         // MagmaCube end - decompile error
+         return dynamicx.update("east", (dynamicxx) -> dynamicxx.createString(s5)).update("west", (dynamicxxx) -> dynamicxxx.createString(s6)).update("north", (dynamicxxxx) -> dynamicxxxx.createString(s7)).update("south", (dynamicz) -> dynamicz.createString(s8)); // MagmaCube - decompile error
       });
    }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
index 841b13607f9f3b2a357af1ab5de1ebb7c64f460a..6f4ada71e2dae32290557e2a0daf4ac96062e583 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
@@ -4,5 +4,6 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class RenamedCoralFansFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:tube_coral_fan", "minecraft:tube_coral_wall_fan").put("minecraft:brain_coral_fan", "minecraft:brain_coral_wall_fan").put("minecraft:bubble_coral_fan", "minecraft:bubble_coral_wall_fan").put("minecraft:fire_coral_fan", "minecraft:fire_coral_wall_fan").put("minecraft:horn_coral_fan", "minecraft:horn_coral_wall_fan").build();
+   // MagmaCube - decompile error
+   public static final Map<String, String> RENAMED_IDS = (Map) ImmutableMap.builder().put("minecraft:tube_coral_fan", "minecraft:tube_coral_wall_fan").put("minecraft:brain_coral_fan", "minecraft:brain_coral_wall_fan").put("minecraft:bubble_coral_fan", "minecraft:bubble_coral_wall_fan").put("minecraft:fire_coral_fan", "minecraft:fire_coral_wall_fan").put("minecraft:horn_coral_fan", "minecraft:horn_coral_wall_fan").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
index 9c5c2d02b62f1c9a34fa5760921a8f4aeb5848e9..59fd37819244c7065a24b1b00f466422b8c418e6 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
@@ -4,5 +4,6 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class RenamedCoralFix {
-   public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:blue_coral", "minecraft:tube_coral_block").put("minecraft:pink_coral", "minecraft:brain_coral_block").put("minecraft:purple_coral", "minecraft:bubble_coral_block").put("minecraft:red_coral", "minecraft:fire_coral_block").put("minecraft:yellow_coral", "minecraft:horn_coral_block").put("minecraft:blue_coral_plant", "minecraft:tube_coral").put("minecraft:pink_coral_plant", "minecraft:brain_coral").put("minecraft:purple_coral_plant", "minecraft:bubble_coral").put("minecraft:red_coral_plant", "minecraft:fire_coral").put("minecraft:yellow_coral_plant", "minecraft:horn_coral").put("minecraft:blue_coral_fan", "minecraft:tube_coral_fan").put("minecraft:pink_coral_fan", "minecraft:brain_coral_fan").put("minecraft:purple_coral_fan", "minecraft:bubble_coral_fan").put("minecraft:red_coral_fan", "minecraft:fire_coral_fan").put("minecraft:yellow_coral_fan", "minecraft:horn_coral_fan").put("minecraft:blue_dead_coral", "minecraft:dead_tube_coral").put("minecraft:pink_dead_coral", "minecraft:dead_brain_coral").put("minecraft:purple_dead_coral", "minecraft:dead_bubble_coral").put("minecraft:red_dead_coral", "minecraft:dead_fire_coral").put("minecraft:yellow_dead_coral", "minecraft:dead_horn_coral").build();
+   // MagmaCube - decompile error
+   public static final Map<String, String> RENAMED_IDS = (Map) ImmutableMap.builder().put("minecraft:blue_coral", "minecraft:tube_coral_block").put("minecraft:pink_coral", "minecraft:brain_coral_block").put("minecraft:purple_coral", "minecraft:bubble_coral_block").put("minecraft:red_coral", "minecraft:fire_coral_block").put("minecraft:yellow_coral", "minecraft:horn_coral_block").put("minecraft:blue_coral_plant", "minecraft:tube_coral").put("minecraft:pink_coral_plant", "minecraft:brain_coral").put("minecraft:purple_coral_plant", "minecraft:bubble_coral").put("minecraft:red_coral_plant", "minecraft:fire_coral").put("minecraft:yellow_coral_plant", "minecraft:horn_coral").put("minecraft:blue_coral_fan", "minecraft:tube_coral_fan").put("minecraft:pink_coral_fan", "minecraft:brain_coral_fan").put("minecraft:purple_coral_fan", "minecraft:bubble_coral_fan").put("minecraft:red_coral_fan", "minecraft:fire_coral_fan").put("minecraft:yellow_coral_fan", "minecraft:horn_coral_fan").put("minecraft:blue_dead_coral", "minecraft:dead_tube_coral").put("minecraft:pink_dead_coral", "minecraft:dead_brain_coral").put("minecraft:purple_dead_coral", "minecraft:dead_bubble_coral").put("minecraft:red_dead_coral", "minecraft:dead_fire_coral").put("minecraft:yellow_dead_coral", "minecraft:dead_horn_coral").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
index 8429a1bc9932dfcecd81fda59f750218f641e5e5..b9c7f553b5b1467ede78229d45124e6b69d1d6ec 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
@@ -11,9 +11,10 @@ public class SavedDataUUIDFix extends AbstractUUIDFix {
    }
 
    protected TypeRewriteRule makeRule() {
-      return this.fixTypeEverywhereTyped("SavedDataUUIDFix", this.getInputSchema().getType(this.typeReference), (typed) -> typed.updateTyped(typed.getType().findField("data"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Raids", (dynamicx) -> dynamicx.createList(dynamicx.asStream().map((dynamic) -> dynamic.update("HeroesOfTheVillage", (dynamicx) -> dynamicx.createList(dynamicx.asStream().map((dynamic) -> (Dynamic)createUUIDFromLongs(dynamic, "UUIDMost", "UUIDLeast").orElseGet(() -> {
+       // MagmaCube - decompile error
+      return this.fixTypeEverywhereTyped("SavedDataUUIDFix", this.getInputSchema().getType(this.typeReference), (typed) -> typed.updateTyped(typed.getType().findField("data"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Raids", (dynamicx) -> dynamicx.createList(dynamicx.asStream().map((dynamicxx) -> dynamicxx.update("HeroesOfTheVillage", (dynamicxxxxx) -> dynamicxxxxx.createList(dynamicxxxxx.asStream().map((dynamicxxx) -> createUUIDFromLongs(dynamicxxx, "UUIDMost", "UUIDLeast").orElseGet(() -> {
                               LOGGER.warn("HeroesOfTheVillage contained invalid UUIDs.");
-                              return dynamic;
+                              return dynamicxxx; // MagmaCube - decompile error
                            }))))))))));
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
index cc0e938ff7ece95e1137d8cba1961daff47059e6..b10df31cd4749337bbbd53421b8c12ce83d2190c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
@@ -19,18 +19,22 @@ public abstract class SimplestEntityRenameFix extends DataFix {
    }
 
    public TypeRewriteRule makeRule() {
-      TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-      TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+       // MagmaCube start - decompile error
+      TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+      TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
+       // MagmaCube end - decompile error
       Type<Pair<String, String>> type = DSL.named(References.ENTITY_NAME.typeName(), NamespacedSchema.namespacedString());
       if (!Objects.equals(this.getOutputSchema().getType(References.ENTITY_NAME), type)) {
          throw new IllegalStateException("Entity name type is not what was expected.");
       } else {
          return TypeRewriteRule.seq(this.fixTypeEverywhere(this.name, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> {
                   String s2 = this.rename(s);
-                  Type<?> type = (Type)taggedChoiceType.types().get(s);
+                  Type<?> typel = (Type)taggedChoiceType.types().get(s); // MagmaCube - decompile error
                   Type<?> type2 = (Type)taggedChoiceType2.types().get(s2);
-                  if (!type2.equals(type, true, true)) {
-                     throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", type2, type));
+                  // MagmaCube start - decompile error
+                  if (!type2.equals(typel, true, true)) {
+                     throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", type2, typel));
+                      // MagmaCube end - decompile error
                   } else {
                      return s2;
                   }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
index 2d373ac0a50b72adc6ccf816dff2e74eaa6d4dbf..09db24dca24ccc3eef7a5fdec02018fec38911bb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
@@ -20,13 +20,17 @@ import javax.annotation.Nullable;
 import org.apache.commons.lang3.StringUtils;
 
 public class StatsCounterFix extends DataFix {
-   private static final Set<String> SKIP = ImmutableSet.builder().add("stat.craftItem.minecraft.spawn_egg").add("stat.useItem.minecraft.spawn_egg").add("stat.breakItem.minecraft.spawn_egg").add("stat.pickup.minecraft.spawn_egg").add("stat.drop.minecraft.spawn_egg").build();
-   private static final Map<String, String> CUSTOM_MAP = ImmutableMap.builder().put("stat.leaveGame", "minecraft:leave_game").put("stat.playOneMinute", "minecraft:play_one_minute").put("stat.timeSinceDeath", "minecraft:time_since_death").put("stat.sneakTime", "minecraft:sneak_time").put("stat.walkOneCm", "minecraft:walk_one_cm").put("stat.crouchOneCm", "minecraft:crouch_one_cm").put("stat.sprintOneCm", "minecraft:sprint_one_cm").put("stat.swimOneCm", "minecraft:swim_one_cm").put("stat.fallOneCm", "minecraft:fall_one_cm").put("stat.climbOneCm", "minecraft:climb_one_cm").put("stat.flyOneCm", "minecraft:fly_one_cm").put("stat.diveOneCm", "minecraft:dive_one_cm").put("stat.minecartOneCm", "minecraft:minecart_one_cm").put("stat.boatOneCm", "minecraft:boat_one_cm").put("stat.pigOneCm", "minecraft:pig_one_cm").put("stat.horseOneCm", "minecraft:horse_one_cm").put("stat.aviateOneCm", "minecraft:aviate_one_cm").put("stat.jump", "minecraft:jump").put("stat.drop", "minecraft:drop").put("stat.damageDealt", "minecraft:damage_dealt").put("stat.damageTaken", "minecraft:damage_taken").put("stat.deaths", "minecraft:deaths").put("stat.mobKills", "minecraft:mob_kills").put("stat.animalsBred", "minecraft:animals_bred").put("stat.playerKills", "minecraft:player_kills").put("stat.fishCaught", "minecraft:fish_caught").put("stat.talkedToVillager", "minecraft:talked_to_villager").put("stat.tradedWithVillager", "minecraft:traded_with_villager").put("stat.cakeSlicesEaten", "minecraft:eat_cake_slice").put("stat.cauldronFilled", "minecraft:fill_cauldron").put("stat.cauldronUsed", "minecraft:use_cauldron").put("stat.armorCleaned", "minecraft:clean_armor").put("stat.bannerCleaned", "minecraft:clean_banner").put("stat.brewingstandInteraction", "minecraft:interact_with_brewingstand").put("stat.beaconInteraction", "minecraft:interact_with_beacon").put("stat.dropperInspected", "minecraft:inspect_dropper").put("stat.hopperInspected", "minecraft:inspect_hopper").put("stat.dispenserInspected", "minecraft:inspect_dispenser").put("stat.noteblockPlayed", "minecraft:play_noteblock").put("stat.noteblockTuned", "minecraft:tune_noteblock").put("stat.flowerPotted", "minecraft:pot_flower").put("stat.trappedChestTriggered", "minecraft:trigger_trapped_chest").put("stat.enderchestOpened", "minecraft:open_enderchest").put("stat.itemEnchanted", "minecraft:enchant_item").put("stat.recordPlayed", "minecraft:play_record").put("stat.furnaceInteraction", "minecraft:interact_with_furnace").put("stat.craftingTableInteraction", "minecraft:interact_with_crafting_table").put("stat.chestOpened", "minecraft:open_chest").put("stat.sleepInBed", "minecraft:sleep_in_bed").put("stat.shulkerBoxOpened", "minecraft:open_shulker_box").build();
+   // MagmaCube start - decompile error
+   private static final Set<String> SKIP = ImmutableSet.<String>builder().add("stat.craftItem.minecraft.spawn_egg").add("stat.useItem.minecraft.spawn_egg").add("stat.breakItem.minecraft.spawn_egg").add("stat.pickup.minecraft.spawn_egg").add("stat.drop.minecraft.spawn_egg").build();
+   private static final Map<String, String> CUSTOM_MAP = ImmutableMap.<String, String>builder().put("stat.leaveGame", "minecraft:leave_game").put("stat.playOneMinute", "minecraft:play_one_minute").put("stat.timeSinceDeath", "minecraft:time_since_death").put("stat.sneakTime", "minecraft:sneak_time").put("stat.walkOneCm", "minecraft:walk_one_cm").put("stat.crouchOneCm", "minecraft:crouch_one_cm").put("stat.sprintOneCm", "minecraft:sprint_one_cm").put("stat.swimOneCm", "minecraft:swim_one_cm").put("stat.fallOneCm", "minecraft:fall_one_cm").put("stat.climbOneCm", "minecraft:climb_one_cm").put("stat.flyOneCm", "minecraft:fly_one_cm").put("stat.diveOneCm", "minecraft:dive_one_cm").put("stat.minecartOneCm", "minecraft:minecart_one_cm").put("stat.boatOneCm", "minecraft:boat_one_cm").put("stat.pigOneCm", "minecraft:pig_one_cm").put("stat.horseOneCm", "minecraft:horse_one_cm").put("stat.aviateOneCm", "minecraft:aviate_one_cm").put("stat.jump", "minecraft:jump").put("stat.drop", "minecraft:drop").put("stat.damageDealt", "minecraft:damage_dealt").put("stat.damageTaken", "minecraft:damage_taken").put("stat.deaths", "minecraft:deaths").put("stat.mobKills", "minecraft:mob_kills").put("stat.animalsBred", "minecraft:animals_bred").put("stat.playerKills", "minecraft:player_kills").put("stat.fishCaught", "minecraft:fish_caught").put("stat.talkedToVillager", "minecraft:talked_to_villager").put("stat.tradedWithVillager", "minecraft:traded_with_villager").put("stat.cakeSlicesEaten", "minecraft:eat_cake_slice").put("stat.cauldronFilled", "minecraft:fill_cauldron").put("stat.cauldronUsed", "minecraft:use_cauldron").put("stat.armorCleaned", "minecraft:clean_armor").put("stat.bannerCleaned", "minecraft:clean_banner").put("stat.brewingstandInteraction", "minecraft:interact_with_brewingstand").put("stat.beaconInteraction", "minecraft:interact_with_beacon").put("stat.dropperInspected", "minecraft:inspect_dropper").put("stat.hopperInspected", "minecraft:inspect_hopper").put("stat.dispenserInspected", "minecraft:inspect_dispenser").put("stat.noteblockPlayed", "minecraft:play_noteblock").put("stat.noteblockTuned", "minecraft:tune_noteblock").put("stat.flowerPotted", "minecraft:pot_flower").put("stat.trappedChestTriggered", "minecraft:trigger_trapped_chest").put("stat.enderchestOpened", "minecraft:open_enderchest").put("stat.itemEnchanted", "minecraft:enchant_item").put("stat.recordPlayed", "minecraft:play_record").put("stat.furnaceInteraction", "minecraft:interact_with_furnace").put("stat.craftingTableInteraction", "minecraft:interact_with_crafting_table").put("stat.chestOpened", "minecraft:open_chest").put("stat.sleepInBed", "minecraft:sleep_in_bed").put("stat.shulkerBoxOpened", "minecraft:open_shulker_box").build();
+   // MagmaCube end - decompile error
    private static final String BLOCK_KEY = "stat.mineBlock";
    private static final String NEW_BLOCK_KEY = "minecraft:mined";
-   private static final Map<String, String> ITEM_KEYS = ImmutableMap.builder().put("stat.craftItem", "minecraft:crafted").put("stat.useItem", "minecraft:used").put("stat.breakItem", "minecraft:broken").put("stat.pickup", "minecraft:picked_up").put("stat.drop", "minecraft:dropped").build();
-   private static final Map<String, String> ENTITY_KEYS = ImmutableMap.builder().put("stat.entityKilledBy", "minecraft:killed_by").put("stat.killEntity", "minecraft:killed").build();
-   private static final Map<String, String> ENTITIES = ImmutableMap.builder().put("Bat", "minecraft:bat").put("Blaze", "minecraft:blaze").put("CaveSpider", "minecraft:cave_spider").put("Chicken", "minecraft:chicken").put("Cow", "minecraft:cow").put("Creeper", "minecraft:creeper").put("Donkey", "minecraft:donkey").put("ElderGuardian", "minecraft:elder_guardian").put("Enderman", "minecraft:enderman").put("Endermite", "minecraft:endermite").put("EvocationIllager", "minecraft:evocation_illager").put("Ghast", "minecraft:ghast").put("Guardian", "minecraft:guardian").put("Horse", "minecraft:horse").put("Husk", "minecraft:husk").put("Llama", "minecraft:llama").put("LavaSlime", "minecraft:magma_cube").put("MushroomCow", "minecraft:mooshroom").put("Mule", "minecraft:mule").put("Ozelot", "minecraft:ocelot").put("Parrot", "minecraft:parrot").put("Pig", "minecraft:pig").put("PolarBear", "minecraft:polar_bear").put("Rabbit", "minecraft:rabbit").put("Sheep", "minecraft:sheep").put("Shulker", "minecraft:shulker").put("Silverfish", "minecraft:silverfish").put("SkeletonHorse", "minecraft:skeleton_horse").put("Skeleton", "minecraft:skeleton").put("Slime", "minecraft:slime").put("Spider", "minecraft:spider").put("Squid", "minecraft:squid").put("Stray", "minecraft:stray").put("Vex", "minecraft:vex").put("Villager", "minecraft:villager").put("VindicationIllager", "minecraft:vindication_illager").put("Witch", "minecraft:witch").put("WitherSkeleton", "minecraft:wither_skeleton").put("Wolf", "minecraft:wolf").put("ZombieHorse", "minecraft:zombie_horse").put("PigZombie", "minecraft:zombie_pigman").put("ZombieVillager", "minecraft:zombie_villager").put("Zombie", "minecraft:zombie").build();
+   // MagmaCube start - decompile error
+   private static final Map<String, String> ITEM_KEYS = ImmutableMap.<String, String>builder().put("stat.craftItem", "minecraft:crafted").put("stat.useItem", "minecraft:used").put("stat.breakItem", "minecraft:broken").put("stat.pickup", "minecraft:picked_up").put("stat.drop", "minecraft:dropped").build();
+   private static final Map<String, String> ENTITY_KEYS = ImmutableMap.<String, String>builder().put("stat.entityKilledBy", "minecraft:killed_by").put("stat.killEntity", "minecraft:killed").build();
+   private static final Map<String, String> ENTITIES = ImmutableMap.<String, String>builder().put("Bat", "minecraft:bat").put("Blaze", "minecraft:blaze").put("CaveSpider", "minecraft:cave_spider").put("Chicken", "minecraft:chicken").put("Cow", "minecraft:cow").put("Creeper", "minecraft:creeper").put("Donkey", "minecraft:donkey").put("ElderGuardian", "minecraft:elder_guardian").put("Enderman", "minecraft:enderman").put("Endermite", "minecraft:endermite").put("EvocationIllager", "minecraft:evocation_illager").put("Ghast", "minecraft:ghast").put("Guardian", "minecraft:guardian").put("Horse", "minecraft:horse").put("Husk", "minecraft:husk").put("Llama", "minecraft:llama").put("LavaSlime", "minecraft:magma_cube").put("MushroomCow", "minecraft:mooshroom").put("Mule", "minecraft:mule").put("Ozelot", "minecraft:ocelot").put("Parrot", "minecraft:parrot").put("Pig", "minecraft:pig").put("PolarBear", "minecraft:polar_bear").put("Rabbit", "minecraft:rabbit").put("Sheep", "minecraft:sheep").put("Shulker", "minecraft:shulker").put("Silverfish", "minecraft:silverfish").put("SkeletonHorse", "minecraft:skeleton_horse").put("Skeleton", "minecraft:skeleton").put("Slime", "minecraft:slime").put("Spider", "minecraft:spider").put("Squid", "minecraft:squid").put("Stray", "minecraft:stray").put("Vex", "minecraft:vex").put("Villager", "minecraft:villager").put("VindicationIllager", "minecraft:vindication_illager").put("Witch", "minecraft:witch").put("WitherSkeleton", "minecraft:wither_skeleton").put("Wolf", "minecraft:wolf").put("ZombieHorse", "minecraft:zombie_horse").put("PigZombie", "minecraft:zombie_pigman").put("ZombieVillager", "minecraft:zombie_villager").put("Zombie", "minecraft:zombie").build();
+   // MagmaCube end - decompile error
    private static final String NEW_CUSTOM_KEY = "minecraft:custom";
 
    public StatsCounterFix(Schema schema, boolean flag) {
@@ -56,7 +60,7 @@ public class StatsCounterFix extends DataFix {
                      String s = ((Dynamic)entry.getKey()).asString("");
                      if (!SKIP.contains(s)) {
                         if (CUSTOM_MAP.containsKey(s)) {
-                           s2 = "minecraft:custom";
+                           s2 = NEW_CUSTOM_KEY; // MagmaCube - use constant field
                            s3 = (String)CUSTOM_MAP.get(s);
                            break;
                         }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
index e769c66d48bd5e36e562114da81cbbcd6485a4e6..c6913c8944f78e34e338533bd72a0b4ec87cf53f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
@@ -35,7 +35,7 @@ public class StatsRenameFix extends DataFix {
       } else {
          OpticFinder<?> opticFinder2 = DSL.namedChoice("minecraft:custom", type3);
          OpticFinder<String> opticFinder3 = DSL.fieldFinder("id", NamespacedSchema.namespacedString());
-         return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
+         return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
       }
    }
 
@@ -45,6 +45,6 @@ public class StatsRenameFix extends DataFix {
       OpticFinder<?> opticFinder = type2.findField("stats");
       OpticFinder<?> opticFinder2 = opticFinder.type().findField("minecraft:custom");
       OpticFinder<String> opticFinder3 = NamespacedSchema.namespacedString().finder();
-      return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
+      return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java b/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
index b3d9ffd4d6591d72cd3a457af2b396ecf942d253..5f807d8e27bc25a61e670865575f1fb3cc6b137a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
@@ -69,19 +69,21 @@ public class TrappedChestBlockEntityFix extends DataFix {
                      Dynamic<?> dynamic = (Dynamic)typedx.get(DSL.remainderFinder());
                      int i3 = dynamic.get("xPos").asInt(0);
                      int i4 = dynamic.get("zPos").asInt(0);
-                     TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
-                     return typedx.updateTyped(opticFinder, (typed) -> typed.updateTyped(taggedChoiceType.finder(), (typedx) -> {
-                           Dynamic<?> dynamic = (Dynamic)typedx.getOrCreate(DSL.remainderFinder());
-                           int i3 = dynamic.get("x").asInt(0) - (i3 << 4);
-                           int i4 = dynamic.get("y").asInt(0);
-                           int i5 = dynamic.get("z").asInt(0) - (i4 << 4);
-                           return intSet.contains(LeavesFix.getIndex(i3, i4, i5)) ? typedx.update(taggedChoiceType.finder(), (pair) -> pair.mapFirst((s) -> {
+                     // MagmaCube start - decompile error
+                     TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.BLOCK_ENTITY); // MagmaCube - decompile error
+                     return typedx.updateTyped(opticFinder, (typedxz) -> typedxz.updateTyped(taggedChoiceType.finder(), (typedxc) -> {
+                           Dynamic<?> dynamicd = (Dynamic)typedxc.getOrCreate(DSL.remainderFinder());
+                           int i3re = dynamicd.get("x").asInt(0) - (i3 << 4);
+                           int i4rf = dynamicd.get("y").asInt(0);
+                           int i5 = dynamicd.get("z").asInt(0) - (i4 << 4);
+                           return intSet.contains(LeavesFix.getIndex(i3re, i4rf, i5)) ? typedxc.update(taggedChoiceType.finder(), (pair) -> pair.mapFirst((s) -> {
+                              // MagmaCube end - decompile error
                                  if (!Objects.equals(s, "minecraft:chest")) {
                                     LOGGER.warn("Block Entity was expected to be a chest");
                                  }
 
                                  return "minecraft:trapped_chest";
-                              })) : typedx;
+                              })) : typedxc;
                         }));
                   }
                })));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerDataFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerDataFix.java
index e48e72cd68e79595179015432d345442c3dfe7fb..445e72e4b06dd25b4ead284c688723fb954dcdc2 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerDataFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerDataFix.java
@@ -14,7 +14,7 @@ public class VillagerDataFix extends NamedEntityFix {
 
    protected Typed<?> fix(Typed<?> typed) {
       Dynamic<?> dynamic = (Dynamic)typed.get(DSL.remainderFinder());
-      return typed.set(DSL.remainderFinder(), dynamic.remove("Profession").remove("Career").remove("CareerLevel").set("VillagerData", dynamic.createMap(ImmutableMap.of(dynamic.createString("type"), dynamic.createString("minecraft:plains"), dynamic.createString("profession"), dynamic.createString(upgradeData(dynamic.get("Profession").asInt(0), dynamic.get("Career").asInt(0))), dynamic.createString("level"), (Dynamic)DataFixUtils.orElse(dynamic.get("CareerLevel").result(), dynamic.createInt(1))))));
+      return typed.set(DSL.remainderFinder(), dynamic.remove("Profession").remove("Career").remove("CareerLevel").set("VillagerData", dynamic.createMap(ImmutableMap.<Dynamic<?>, Dynamic<?>>of(dynamic.createString("type"), dynamic.createString("minecraft:plains"), dynamic.createString("profession"), dynamic.createString(upgradeData(dynamic.get("Profession").asInt(0), dynamic.get("Career").asInt(0))), dynamic.createString("level"), (Dynamic)DataFixUtils.orElse(dynamic.get("CareerLevel").result(), dynamic.createInt(1))))));
    }
 
    private static String upgradeData(int i, int i2) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
index 54d9ac9bbea8eca81320250186481f95620740d5..e6cad022010a4a9f16112c80e9d477e93c067d75 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
@@ -37,7 +37,8 @@ public class VillagerRebuildLevelAndXpFix extends DataFix {
             int i = dynamic.get("VillagerData").get("level").asInt(0);
             Typed<?> typed2 = typedx;
             if (i == 0 || i == 1) {
-               int i2 = typedx.getOptionalTyped(opticFinder2).flatMap((typed) -> typed.getOptionalTyped(opticFinder3)).map((typed) -> typed.getAllTyped(opticFinder4).size()).orElse(0);
+                // MagmaCube - decompile error
+               int i2 = typedx.getOptionalTyped(opticFinder2).flatMap((typedxx) -> typedxx.getOptionalTyped(opticFinder3)).map((typedxxx) -> typedxxx.getAllTyped(opticFinder4).size()).orElse(0);
                i = Mth.clamp(i2 / 2, 1, 5);
                if (i > 1) {
                   typed2 = addLevel(typedx, i);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
index 2944abe4bfd10027e67935413c46107c9f91bc58..7e8e35b35d87ee920b35d9c27c2a18910653eeb7 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
@@ -31,7 +31,7 @@ public class VillagerTradeFix extends NamedEntityFix {
          OpticFinder<?> opticFinder6 = type2.findField("sell");
          OpticFinder<Pair<String, String>> opticFinder7 = DSL.fieldFinder("id", DSL.named(References.ITEM_NAME.typeName(), NamespacedSchema.namespacedString()));
          Function<Typed<?>, Typed<?>> function = (typedx) -> this.updateItemStack(opticFinder7, typedx);
-         return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.updateTyped(opticFinder3, (typedx) -> typedx.updateTyped(opticFinder4, function).updateTyped(opticFinder5, function).updateTyped(opticFinder6, function))));
+         return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedxxx) -> typedxxx.updateTyped(opticFinder3, (typedxz) -> typedxz.updateTyped(opticFinder4, function).updateTyped(opticFinder5, function).updateTyped(opticFinder6, function)))); // MagmaCube - decompile error
       }
    }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
index cc6cf68b69306c22eb901d929e511ce9d9aa07da..fdbf32f7bff0c2acc2bdba66dbe4afe66e66be9d 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
@@ -33,7 +33,8 @@ public class WorldGenSettingsFix extends DataFix {
    private static final String END_CITY = "minecraft:endcity";
    private static final String WOODLAND_MANSION = "minecraft:mansion";
    private static final String OCEAN_MONUMENT = "minecraft:monument";
-   private static final ImmutableMap<String, WorldGenSettingsFix.StructureFeatureConfiguration> DEFAULTS = ImmutableMap.builder().put("minecraft:village", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 10387312)).put("minecraft:desert_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357617)).put("minecraft:igloo", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357618)).put("minecraft:jungle_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357619)).put("minecraft:swamp_hut", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357620)).put("minecraft:pillager_outpost", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 165745296)).put("minecraft:monument", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 5, 10387313)).put("minecraft:endcity", new WorldGenSettingsFix.StructureFeatureConfiguration(20, 11, 10387313)).put("minecraft:mansion", new WorldGenSettingsFix.StructureFeatureConfiguration(80, 20, 10387319)).build();
+   // MagmaCube - decompile error
+   private static final ImmutableMap<String, WorldGenSettingsFix.StructureFeatureConfiguration> DEFAULTS = ImmutableMap.<String, WorldGenSettingsFix.StructureFeatureConfiguration>builder().put("minecraft:village", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 10387312)).put("minecraft:desert_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357617)).put("minecraft:igloo", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357618)).put("minecraft:jungle_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357619)).put("minecraft:swamp_hut", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357620)).put("minecraft:pillager_outpost", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 165745296)).put("minecraft:monument", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 5, 10387313)).put("minecraft:endcity", new WorldGenSettingsFix.StructureFeatureConfiguration(20, 11, 10387313)).put("minecraft:mansion", new WorldGenSettingsFix.StructureFeatureConfiguration(80, 20, 10387319)).build();
 
    public WorldGenSettingsFix(Schema schema) {
       super(schema, true);
@@ -48,7 +49,8 @@ public class WorldGenSettingsFix extends DataFix {
    }
 
    private static <T> Dynamic<T> vanillaBiomeSource(Dynamic<T> dynamic, long l, boolean flag, boolean flag2) {
-      Builder<Dynamic<T>, Dynamic<T>> builder = ImmutableMap.builder().put(dynamic.createString("type"), dynamic.createString("minecraft:vanilla_layered")).put(dynamic.createString("seed"), dynamic.createLong(l)).put(dynamic.createString("large_biomes"), dynamic.createBoolean(flag2));
+      // MagmaCube - decompile error
+      Builder<Dynamic<T>, Dynamic<T>> builder = ImmutableMap.<Dynamic<T>, Dynamic<T>>builder().put(dynamic.createString("type"), dynamic.createString("minecraft:vanilla_layered")).put(dynamic.createString("seed"), dynamic.createLong(l)).put(dynamic.createString("large_biomes"), dynamic.createBoolean(flag2));
       if (flag) {
          builder.put(dynamic.createString("legacy_biome_init_layer"), dynamic.createBoolean(flag));
       }
@@ -73,7 +75,7 @@ public class WorldGenSettingsFix extends DataFix {
          case "flat":
             OptionalDynamic<T> optionalDynamic = dynamic.get("generatorOptions");
             Map<Dynamic<T>, Dynamic<T>> map = fixFlatStructures(dynamicOps, optionalDynamic);
-            dynamic2 = dynamic.createMap(ImmutableMap.of(dynamic.createString("type"), dynamic.createString("minecraft:flat"), dynamic.createString("settings"), dynamic.createMap(ImmutableMap.of(dynamic.createString("structures"), dynamic.createMap(map), dynamic.createString("layers"), (Dynamic)optionalDynamic.get("layers").result().orElseGet(() -> dynamic.createList(Stream.of(dynamic.createMap(ImmutableMap.of(dynamic.createString("height"), dynamic.createInt(1), dynamic.createString("block"), dynamic.createString("minecraft:bedrock"))), dynamic.createMap(ImmutableMap.of(dynamic.createString("height"), dynamic.createInt(2), dynamic.createString("block"), dynamic.createString("minecraft:dirt"))), dynamic.createMap(ImmutableMap.of(dynamic.createString("height"), dynamic.createInt(1), dynamic.createString("block"), dynamic.createString("minecraft:grass_block")))))), dynamic.createString("biome"), dynamic.createString(optionalDynamic.get("biome").asString("minecraft:plains"))))));
+            dynamic2 = dynamic.createMap(ImmutableMap.of(dynamic.createString("type"), dynamic.createString("minecraft:flat"), dynamic.createString("settings"), dynamic.createMap(ImmutableMap.<Dynamic<?>, Dynamic<?>>of(dynamic.createString("structures"), dynamic.createMap(map), dynamic.createString("layers"), (Dynamic)optionalDynamic.get("layers").result().orElseGet(() -> dynamic.createList(Stream.of(dynamic.createMap(ImmutableMap.of(dynamic.createString("height"), dynamic.createInt(1), dynamic.createString("block"), dynamic.createString("minecraft:bedrock"))), dynamic.createMap(ImmutableMap.of(dynamic.createString("height"), dynamic.createInt(2), dynamic.createString("block"), dynamic.createString("minecraft:dirt"))), dynamic.createMap(ImmutableMap.of(dynamic.createString("height"), dynamic.createInt(1), dynamic.createString("block"), dynamic.createString("minecraft:grass_block")))))), dynamic.createString("biome"), dynamic.createString(optionalDynamic.get("biome").asString("minecraft:plains"))))));
             break;
          case "debug_all_block_states":
             dynamic2 = dynamic.createMap(ImmutableMap.of(dynamic.createString("type"), dynamic.createString("minecraft:debug")));
@@ -143,9 +145,9 @@ public class WorldGenSettingsFix extends DataFix {
          map.put("minecraft:village", (WorldGenSettingsFix.StructureFeatureConfiguration)DEFAULTS.get("minecraft:village"));
       }
 
-      optionalDynamic.get("structures").flatMap(Dynamic::getMapValues).result().ifPresent((map2) -> map2.forEach((dynamic, dynamic2) -> dynamic2.getMapValues().result().ifPresent((map2) -> map2.forEach((dynamic2, dynamic3) -> {
+      optionalDynamic.get("structures").flatMap(Dynamic::getMapValues).result().ifPresent((map2) -> map2.forEach((dynamic, dynamic2) -> dynamic2.getMapValues().result().ifPresent((map2x) -> map2x.forEach((dynamic2x, dynamic3) -> { // MagmaCube - decompile error
                   String s = dynamic.asString("");
-                  String s2 = dynamic2.asString("");
+                  String s2 = dynamic2x.asString(""); // MagmaCube - decompile error
                   String s3 = dynamic3.asString("");
                   if ("stronghold".equals(s)) {
                      mutableBoolean.setTrue();
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java b/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
index ff7f5124433153c557779c32e9d1f537bdd4ec87..9b96e231267b376140d4a5adbaa03f6081d951e8 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
@@ -46,10 +46,10 @@ public class V1451_6 extends NamespacedSchema {
       public <T> T apply(DynamicOps<T> dynamicOps, T object) {
          Dynamic<T> dynamic = new Dynamic(dynamicOps, object);
          Optional<Dynamic<T>> optional = dynamic.get("CriteriaType").get().get().left().flatMap((dynamic2) -> {
-            Optional<String> optional = dynamic2.get("type").asString().get().left();
+            Optional<String> optionalIn = dynamic2.get("type").asString().get().left();
             Optional<String> optional2 = dynamic2.get("id").asString().get().left();
-            if (optional.isPresent() && optional2.isPresent()) {
-               String s = (String)optional.get();
+            if (optionalIn.isPresent() && optional2.isPresent()) {
+               String s = (String)optionalIn.get();
                return s.equals("_special") ? Optional.of(dynamic.createString((String)optional2.get())) : Optional.of(dynamic2.createString(this.packWithDot(s) + ":" + this.packWithDot((String)optional2.get())));
             } else {
                return Optional.empty();
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V704.java b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
index d13d9f12ee4bd6a91ddf98a904a863aadaefd337..8313900a1aa14f097ab7d9f3c35f505805a7a14b 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V704.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
@@ -136,7 +136,7 @@ public class V704 extends Schema {
    });
    protected static final HookFunction ADD_NAMES = new HookFunction() {
       public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-         return V99.addNames(new Dynamic(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "ArmorStand");
+         return V99.addNames(new Dynamic<>(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "ArmorStand"); // MagmaCube - decompile error
       }
    };
 
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V705.java b/src/main/java/net/minecraft/util/datafix/schemas/V705.java
index da8d193a677a99ad44b4cc6c3296bf04edea8167..2976a0bb7d50d247959afdb185d19a5d882d0533 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V705.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V705.java
@@ -14,7 +14,7 @@ import net.minecraft.util.datafix.fixes.References;
 public class V705 extends NamespacedSchema {
    protected static final HookFunction ADD_NAMES = new HookFunction() {
       public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-         return V99.addNames(new Dynamic(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "minecraft:armor_stand");
+         return V99.addNames(new Dynamic<>(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "minecraft:armor_stand"); // MagmaCube - decompile error
       }
    };
 
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V99.java b/src/main/java/net/minecraft/util/datafix/schemas/V99.java
index c17b2c44eedb55c345265d9e610cbc1ca63341a6..082d88f64c499017105d765c9510f68f50f9becd 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V99.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V99.java
@@ -54,7 +54,7 @@ public class V99 extends Schema {
    });
    protected static final HookFunction ADD_NAMES = new HookFunction() {
       public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-         return V99.addNames(new Dynamic(dynamicOps, object), V99.ITEM_TO_BLOCKENTITY, "ArmorStand");
+         return V99.addNames(new Dynamic<>(dynamicOps, object), V99.ITEM_TO_BLOCKENTITY, "ArmorStand"); // MagmaCube - decompile error
       }
    };
 
@@ -206,14 +206,16 @@ public class V99 extends Schema {
 
    protected static <T> T addNames(Dynamic<T> dynamic, Map<String, String> map, String s) {
       return (T)dynamic.update("tag", (dynamic2) -> dynamic2.update("BlockEntityTag", (dynamic2x) -> {
-            String s = (String)dynamic.get("id").asString().result().map(NamespacedSchema::ensureNamespaced).orElse("minecraft:air");
-            if (!"minecraft:air".equals(s)) {
-               String s2 = (String)map.get(s);
+            // MagmaCube start - decompile error
+            String sx = (String)dynamic.get("id").asString().result().map(NamespacedSchema::ensureNamespaced).orElse("minecraft:air");
+            if (!"minecraft:air".equals(sx)) {
+               String s2 = (String)map.get(sx);
+               // MagmaCube end - decompile error
                if (s2 != null) {
                   return dynamic2x.set("id", dynamic.createString(s2));
                }
 
-               LOGGER.warn("Unable to resolve BlockEntity for ItemStack: {}", s);
+               LOGGER.warn("Unable to resolve BlockEntity for ItemStack: {}", sx); // MagmaCube - decompile error
             }
 
             return dynamic2x;
diff --git a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
index 79ceda1254d2f4494cf49764ebccb28feda944f3..b029dd3bc9ddc76f9abaac8009ca73057c4c060c 100644
--- a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
+++ b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
@@ -43,7 +43,7 @@ public class FilledProfileResults implements ProfileResults {
       }
    };
    private static final Splitter SPLITTER = Splitter.on('\u001e');
-   private static final Comparator<Entry<String, FilledProfileResults.CounterCollector>> COUNTER_ENTRY_COMPARATOR = Entry.comparingByValue(Comparator.comparingLong((counterCollector) -> counterCollector.totalValue)).reversed();
+   private static final Comparator<Entry<String, FilledProfileResults.CounterCollector>> COUNTER_ENTRY_COMPARATOR = Entry.<String, CounterCollector>comparingByValue(Comparator.comparingLong((counterCollector) -> counterCollector.totalValue)).reversed(); // MagmaCube - decompile error
    private final Map<String, ? extends ProfilerPathEntry> entries;
    private final long startTimeNano;
    private final int startTimeTicks;
@@ -124,7 +124,7 @@ public class FilledProfileResults implements ProfileResults {
          Object2LongMap<String> object2LongMap = profilerPathEntry.getCounters();
          if (!object2LongMap.isEmpty()) {
             List<String> list = SPLITTER.splitToList(s);
-            object2LongMap.forEach((sx, l) -> ((FilledProfileResults.CounterCollector)map.computeIfAbsent(sx, (s) -> new FilledProfileResults.CounterCollector())).addValue(list.iterator(), l));
+            object2LongMap.forEach((sx, l) -> ((FilledProfileResults.CounterCollector)map.computeIfAbsent(sx, (s1) -> new FilledProfileResults.CounterCollector())).addValue(list.iterator(), l)); // MagmaCube - decompile error
          }
 
       });
diff --git a/src/main/java/net/minecraft/util/random/WeightedRandom.java b/src/main/java/net/minecraft/util/random/WeightedRandom.java
index dae91eef8dd089d72eee52357e3b40f5ce00da75..10572f0c05e723833be8ae34587bb3d9235a59f2 100644
--- a/src/main/java/net/minecraft/util/random/WeightedRandom.java
+++ b/src/main/java/net/minecraft/util/random/WeightedRandom.java
@@ -25,7 +25,7 @@ public class WeightedRandom {
 
    public static <T extends WeightedEntry> Optional<T> getRandomItem(Random random, List<T> list, int i) {
       if (i < 0) {
-         throw (IllegalArgumentException)Util.pauseInIde((T)(new IllegalArgumentException("Negative total weight in getRandomItem")));
+         throw (IllegalArgumentException)Util.pauseInIde((new IllegalArgumentException("Negative total weight in getRandomItem"))); // MagmaCube - decompile error
       } else if (i == 0) {
          return Optional.empty();
       } else {
diff --git a/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java b/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
index a1f05a9b553bea92d73c71baf97629be81cb0a1a..c4c8cc3272e1fbe375b64f5964533b9dc8924e04 100644
--- a/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
@@ -7,7 +7,8 @@ import java.util.Random;
 import java.util.function.Function;
 
 public class BiasedToBottomInt extends IntProvider {
-   public static final Codec<BiasedToBottomInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.maxInclusive)).apply(instance, BiasedToBottomInt::new)).comapFlatMap((biasedToBottomInt) -> biasedToBottomInt.maxInclusive < biasedToBottomInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + biasedToBottomInt.minInclusive + ", max_inclusive: " + biasedToBottomInt.maxInclusive) : DataResult.success(biasedToBottomInt), Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<BiasedToBottomInt> CODEC = RecordCodecBuilder.<BiasedToBottomInt>create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.maxInclusive)).apply(instance, BiasedToBottomInt::new)).comapFlatMap((biasedToBottomInt) -> biasedToBottomInt.maxInclusive < biasedToBottomInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + biasedToBottomInt.minInclusive + ", max_inclusive: " + biasedToBottomInt.maxInclusive) : DataResult.success(biasedToBottomInt), Function.identity());
    private final int minInclusive;
    private final int maxInclusive;
 
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java b/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
index 90d33376bc3135fb92c0a70660f6a9d5ca345869..5b3e4b6eed037d1865382716a7ede74648497caa 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
@@ -8,7 +8,8 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class ClampedInt extends IntProvider {
-   public static final Codec<ClampedInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(IntProvider.CODEC.fieldOf("source").forGetter((clampedInt) -> clampedInt.source), Codec.INT.fieldOf("min_inclusive").forGetter((clampedInt) -> clampedInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedInt) -> clampedInt.maxInclusive)).apply(instance, ClampedInt::new)).comapFlatMap((clampedInt) -> clampedInt.maxInclusive < clampedInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + clampedInt.minInclusive + ", max_inclusive: " + clampedInt.maxInclusive) : DataResult.success(clampedInt), Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<ClampedInt> CODEC = RecordCodecBuilder.<ClampedInt>create((instance) -> instance.group(IntProvider.CODEC.fieldOf("source").forGetter((clampedInt) -> clampedInt.source), Codec.INT.fieldOf("min_inclusive").forGetter((clampedInt) -> clampedInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedInt) -> clampedInt.maxInclusive)).apply(instance, ClampedInt::new)).comapFlatMap((clampedInt) -> clampedInt.maxInclusive < clampedInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + clampedInt.minInclusive + ", max_inclusive: " + clampedInt.maxInclusive) : DataResult.success(clampedInt), Function.identity());
    private final IntProvider source;
    private int minInclusive;
    private int maxInclusive;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
index 434780d2a381f0a2754ecef58c0b4ece74bb6b21..2a05512022a9b60ae8c1cc39df1cfb64fb9c2b96 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
@@ -8,7 +8,8 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class ClampedNormalFloat extends FloatProvider {
-   public static final Codec<ClampedNormalFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalFloat) -> clampedNormalFloat.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalFloat) -> clampedNormalFloat.deviation), Codec.FLOAT.fieldOf("min").forGetter((clampedNormalFloat) -> clampedNormalFloat.min), Codec.FLOAT.fieldOf("max").forGetter((clampedNormalFloat) -> clampedNormalFloat.max)).apply(instance, ClampedNormalFloat::new)).comapFlatMap((clampedNormalFloat) -> clampedNormalFloat.max < clampedNormalFloat.min ? DataResult.error("Max must be larger than min: [" + clampedNormalFloat.min + ", " + clampedNormalFloat.max + "]") : DataResult.success(clampedNormalFloat), Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<ClampedNormalFloat> CODEC = RecordCodecBuilder.<ClampedNormalFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalFloat) -> clampedNormalFloat.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalFloat) -> clampedNormalFloat.deviation), Codec.FLOAT.fieldOf("min").forGetter((clampedNormalFloat) -> clampedNormalFloat.min), Codec.FLOAT.fieldOf("max").forGetter((clampedNormalFloat) -> clampedNormalFloat.max)).apply(instance, ClampedNormalFloat::new)).comapFlatMap((clampedNormalFloat) -> clampedNormalFloat.max < clampedNormalFloat.min ? DataResult.error("Max must be larger than min: [" + clampedNormalFloat.min + ", " + clampedNormalFloat.max + "]") : DataResult.success(clampedNormalFloat), Function.identity());
    private float mean;
    private float deviation;
    private float min;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java b/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
index 715071ff179cf4e233c7d05740c204b1ee767922..c994dcc130ae99d888b0d19f010d503fbcf729cc 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
@@ -7,7 +7,8 @@ import java.util.Random;
 
 public class ConstantFloat extends FloatProvider {
    public static final ConstantFloat ZERO = new ConstantFloat(0.0F);
-   public static final Codec<ConstantFloat> CODEC = Codec.either(Codec.FLOAT, RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("value").forGetter((constantFloat) -> constantFloat.value)).apply(instance, ConstantFloat::new))).xmap((either) -> (ConstantFloat)either.map(ConstantFloat::of, (constantFloat) -> constantFloat), (constantFloat) -> Either.left(constantFloat.value));
+   // MagmaCube - decompile error
+   public static final Codec<ConstantFloat> CODEC = Codec.either(Codec.FLOAT, RecordCodecBuilder.<ConstantFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("value").forGetter((constantFloat) -> constantFloat.value)).apply(instance, ConstantFloat::new))).xmap((either) -> (ConstantFloat)either.map(ConstantFloat::of, (constantFloat) -> constantFloat), (constantFloat) -> Either.left(constantFloat.value));
    private final float value;
 
    public static ConstantFloat of(float f) {
diff --git a/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java b/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
index d5ba6a8b80bbc1248f92f63a3851c66e30d2e1f2..e7fe8563f12dd9ba6f7bd909287aaba388a9bf21 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
@@ -7,7 +7,8 @@ import java.util.Random;
 
 public class ConstantInt extends IntProvider {
    public static final ConstantInt ZERO = new ConstantInt(0);
-   public static final Codec<ConstantInt> CODEC = Codec.either(Codec.INT, RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("value").forGetter((constantInt) -> constantInt.value)).apply(instance, ConstantInt::new))).xmap((either) -> (ConstantInt)either.map(ConstantInt::of, (constantInt) -> constantInt), (constantInt) -> Either.left(constantInt.value));
+   // MagmaCube - decompile error
+   public static final Codec<ConstantInt> CODEC = Codec.either(Codec.INT, RecordCodecBuilder.<ConstantInt>create((instance) -> instance.group(Codec.INT.fieldOf("value").forGetter((constantInt) -> constantInt.value)).apply(instance, ConstantInt::new))).xmap((either) -> (ConstantInt)either.map(ConstantInt::of, (constantInt) -> constantInt), (constantInt) -> Either.left(constantInt.value));
    private final int value;
 
    public static ConstantInt of(int i) {
diff --git a/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java b/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
index 3ed88d1665492633a12089da9935127aebc28fd2..d4691dcfa92f387def98c3203cad94976336b911 100644
--- a/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
@@ -7,7 +7,8 @@ import java.util.Random;
 import java.util.function.Function;
 
 public class TrapezoidFloat extends FloatProvider {
-   public static final Codec<TrapezoidFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("min").forGetter((trapezoidFloat) -> trapezoidFloat.min), Codec.FLOAT.fieldOf("max").forGetter((trapezoidFloat) -> trapezoidFloat.max), Codec.FLOAT.fieldOf("plateau").forGetter((trapezoidFloat) -> trapezoidFloat.plateau)).apply(instance, TrapezoidFloat::new)).comapFlatMap((trapezoidFloat) -> {
+   // MagmaCube - decompile error
+   public static final Codec<TrapezoidFloat> CODEC = RecordCodecBuilder.<TrapezoidFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("min").forGetter((trapezoidFloat) -> trapezoidFloat.min), Codec.FLOAT.fieldOf("max").forGetter((trapezoidFloat) -> trapezoidFloat.max), Codec.FLOAT.fieldOf("plateau").forGetter((trapezoidFloat) -> trapezoidFloat.plateau)).apply(instance, TrapezoidFloat::new)).comapFlatMap((trapezoidFloat) -> {
       if (trapezoidFloat.max < trapezoidFloat.min) {
          return DataResult.error("Max must be larger than min: [" + trapezoidFloat.min + ", " + trapezoidFloat.max + "]");
       } else {
diff --git a/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java b/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
index 8a6cac67f31cce51597371d2c4922b722b978367..d60e5ae441af1e4c6587bf6040d2b06304105a95 100644
--- a/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
@@ -8,7 +8,8 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class UniformFloat extends FloatProvider {
-   public static final Codec<UniformFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("min_inclusive").forGetter((uniformFloat) -> uniformFloat.minInclusive), Codec.FLOAT.fieldOf("max_exclusive").forGetter((uniformFloat) -> uniformFloat.maxExclusive)).apply(instance, UniformFloat::new)).comapFlatMap((uniformFloat) -> uniformFloat.maxExclusive <= uniformFloat.minInclusive ? DataResult.error("Max must be larger than min, min_inclusive: " + uniformFloat.minInclusive + ", max_exclusive: " + uniformFloat.maxExclusive) : DataResult.success(uniformFloat), Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<UniformFloat> CODEC = RecordCodecBuilder.<UniformFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("min_inclusive").forGetter((uniformFloat) -> uniformFloat.minInclusive), Codec.FLOAT.fieldOf("max_exclusive").forGetter((uniformFloat) -> uniformFloat.maxExclusive)).apply(instance, UniformFloat::new)).comapFlatMap((uniformFloat) -> uniformFloat.maxExclusive <= uniformFloat.minInclusive ? DataResult.error("Max must be larger than min, min_inclusive: " + uniformFloat.minInclusive + ", max_exclusive: " + uniformFloat.maxExclusive) : DataResult.success(uniformFloat), Function.identity());
    private final float minInclusive;
    private final float maxExclusive;
 
diff --git a/src/main/java/net/minecraft/util/valueproviders/UniformInt.java b/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
index 7b72ddae19c47aea3e7bd39ea1441ef27c62abb3..2f0c728512a135d8e2da4e97c6777b7ae561ce4b 100644
--- a/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
@@ -8,7 +8,8 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class UniformInt extends IntProvider {
-   public static final Codec<UniformInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((uniformInt) -> uniformInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((uniformInt) -> uniformInt.maxInclusive)).apply(instance, UniformInt::new)).comapFlatMap((uniformInt) -> uniformInt.maxInclusive < uniformInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + uniformInt.minInclusive + ", max_inclusive: " + uniformInt.maxInclusive) : DataResult.success(uniformInt), Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<UniformInt> CODEC = RecordCodecBuilder.<UniformInt>create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((uniformInt) -> uniformInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((uniformInt) -> uniformInt.maxInclusive)).apply(instance, UniformInt::new)).comapFlatMap((uniformInt) -> uniformInt.maxInclusive < uniformInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + uniformInt.minInclusive + ", max_inclusive: " + uniformInt.maxInclusive) : DataResult.success(uniformInt), Function.identity());
    private final int minInclusive;
    private final int maxInclusive;
 
diff --git a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
index d1b4f508c7dfae7b940d337ec7f1559eea0139ea..ddf643269494d4f4f8507b3b3bd019de779ef734 100644
--- a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
+++ b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
@@ -103,7 +103,7 @@ public class WorldUpgrader {
             builder2.put(resourceKey2, new ChunkStorage(new File(file, "region"), this.dataFixer, true));
          }
 
-         ImmutableMap<ResourceKey<Level>, ChunkStorage> immutableMap2 = builder2.build();
+         ImmutableMap<ResourceKey<Level>, ChunkStorage> immutableMap2xz = builder2.build(); // MagmaCube - decompile error
          long l = Util.getMillis();
          this.status = new TranslatableComponent("optimizeWorld.stage.upgrading");
 
@@ -115,7 +115,7 @@ public class WorldUpgrader {
             for(UnmodifiableIterator iOException2 = this.levels.iterator(); iOException2.hasNext(); f2 += f3) {
                ResourceKey<Level> resourceKey3 = (ResourceKey)iOException2.next();
                ListIterator<ChunkPos> listIterator = (ListIterator)immutableMap.get(resourceKey3);
-               ChunkStorage chunkStorage = (ChunkStorage)immutableMap2.get(resourceKey3);
+               ChunkStorage chunkStorage = (ChunkStorage)immutableMap2xz.get(resourceKey3); // MagmaCube - decompile error
                if (listIterator.hasNext()) {
                   ChunkPos chunkPos = (ChunkPos)listIterator.next();
                   boolean flag2 = false;
@@ -175,7 +175,7 @@ public class WorldUpgrader {
          }
 
          this.status = new TranslatableComponent("optimizeWorld.stage.finished");
-         UnmodifiableIterator var31 = immutableMap2.values().iterator();
+         UnmodifiableIterator var31 = immutableMap2xz.values().iterator(); // MagmaCube - decompile error
 
          while(var31.hasNext()) {
             ChunkStorage chunkStorage2 = (ChunkStorage)var31.next();
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 03410b4524bac1d78abc3f1b81851d1ac14dd8d6..2fa07f53a7d630728afc532cd6e22a7e067b0145 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -234,7 +234,7 @@ public abstract class LivingEntity extends Entity {
       this.yHeadRot = this.getYRot();
       this.maxUpStep = 0.6F;
       NbtOps nbtOps = NbtOps.INSTANCE;
-      this.brain = this.makeBrain(new Dynamic(nbtOps, (Tag)nbtOps.createMap(ImmutableMap.of(nbtOps.createString("memories"), (Tag)nbtOps.emptyMap()))));
+      this.brain = this.makeBrain(new Dynamic<>(nbtOps, (Tag)nbtOps.createMap(ImmutableMap.of(nbtOps.createString("memories"), (Tag)nbtOps.emptyMap()))));
    }
 
    public Brain<?> getBrain() {
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 5382ada950ea1de2ac016caae32f03e13b93740d..b9d66672b52d7b88c3625fbd746beffda2ccd33a 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -1042,7 +1042,7 @@ public abstract class Mob extends LivingEntity {
          if (itemStack.getItem() instanceof SpawnEggItem) {
             if (this.level instanceof ServerLevel) {
                SpawnEggItem spawnEggItem = (SpawnEggItem)itemStack.getItem();
-               Optional<Mob> optional = spawnEggItem.spawnOffspringFromSpawnEgg(player, this, this.getType(), (ServerLevel)this.level, this.position(), itemStack);
+               Optional<Mob> optional = spawnEggItem.spawnOffspringFromSpawnEgg(player, this, (EntityType<? extends Mob>) this.getType(), (ServerLevel)this.level, this.position(), itemStack); // MagmaCube - decompile error
                optional.ifPresent((mob) -> this.onOffspringSpawnedFromEgg(player, mob));
                return optional.isPresent() ? InteractionResult.SUCCESS : InteractionResult.PASS;
             } else {
diff --git a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
index 5eb3006130588d69395a9343313a2a6e1f798a80..1192a03a15a151fbc491444540e258c6ae67e3be 100644
--- a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
+++ b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
@@ -58,7 +58,7 @@ public class SpawnPlacements {
 
    public static <T extends Entity> boolean checkSpawnRules(EntityType<T> entityType, ServerLevelAccessor serverLevelAccessor, MobSpawnType mobSpawnType, BlockPos blockPos, Random random) {
       SpawnPlacements.Data data = (SpawnPlacements.Data)DATA_BY_TYPE.get(entityType);
-      return data == null || data.predicate.test(entityType, serverLevelAccessor, mobSpawnType, blockPos, random);
+      return data == null || data.predicate.test((EntityType) entityType, serverLevelAccessor, mobSpawnType, blockPos, random); // MagmaCube - decompile error
    }
 
    static {
diff --git a/src/main/java/net/minecraft/world/entity/ai/Brain.java b/src/main/java/net/minecraft/world/entity/ai/Brain.java
index e746e524066f0a6818ea9fbc1b94a573c6b2492c..8c67b9bfdf9e50ef4b04d5f06e91c52d0d0bd60d 100644
--- a/src/main/java/net/minecraft/world/entity/ai/Brain.java
+++ b/src/main/java/net/minecraft/world/entity/ai/Brain.java
@@ -73,14 +73,14 @@ public class Brain<E extends LivingEntity> {
             mapLike.entries().forEach((pair) -> {
                DataResult<MemoryModuleType<?>> dataResult = Registry.MEMORY_MODULE_TYPE.parse(dynamicOps, pair.getFirst());
                DataResult<? extends Brain.MemoryValue<?>> dataResult2 = dataResult.flatMap((memoryModuleType) -> this.captureRead(memoryModuleType, dynamicOps, (T)pair.getSecond()));
-               mutableObject.setValue(((DataResult)mutableObject.getValue()).apply2(Builder::add, dataResult2));
+               mutableObject.setValue(mutableObject.getValue().apply2(Builder::add, dataResult2));
             });
-            ImmutableList<Brain.MemoryValue<?>> immutableList = (ImmutableList)((DataResult)mutableObject.getValue()).resultOrPartial(Brain.LOGGER::error).map(Builder::build).orElseGet(ImmutableList::of);
-            return DataResult.success(new Brain(collection, collection2, immutableList, mutableObject::getValue));
+            ImmutableList<Brain.MemoryValue<?>> immutableList = mutableObject.getValue().resultOrPartial(Brain.LOGGER::error).map(Builder::build).orElseGet(ImmutableList::of);
+            return DataResult.success(new Brain(collection, collection2, immutableList, mutableObject::getValue)); // TODO: check mutableObject's type
          }
 
          private <T, U> DataResult<Brain.MemoryValue<U>> captureRead(MemoryModuleType<U> memoryModuleType, DynamicOps<T> dynamicOps, T object) {
-            return ((DataResult)memoryModuleType.getCodec().map(DataResult::success).orElseGet(() -> DataResult.error("No codec for memory: " + memoryModuleType))).flatMap((codec) -> codec.parse(dynamicOps, object)).map((expirableValue) -> new Brain.MemoryValue<>(memoryModuleType, Optional.of(expirableValue)));
+            return memoryModuleType.getCodec().map(DataResult::success).orElseGet(() -> DataResult.error("No codec for memory: " + memoryModuleType)).flatMap((codec) -> codec.parse(dynamicOps, object)).map((expirableValue) -> new Brain.MemoryValue<>(memoryModuleType, Optional.of(expirableValue)));
          }
 
          public <T> RecordBuilder<T> encode(Brain<E> brain, DynamicOps<T> dynamicOps, RecordBuilder<T> recordBuilder) {
@@ -122,7 +122,7 @@ public class Brain<E extends LivingEntity> {
    }
 
    Stream<Brain.MemoryValue<?>> memories() {
-      return this.memories.entrySet().stream().map((entry) -> Brain.MemoryValue.createUnchecked((MemoryModuleType)entry.getKey(), (Optional)entry.getValue()));
+      return this.memories.entrySet().stream().map((entry) -> Brain.MemoryValue.createUnchecked(entry.getKey(), entry.getValue()));
    }
 
    public boolean hasMemoryValue(MemoryModuleType<?> memoryModuleType) {
@@ -157,7 +157,7 @@ public class Brain<E extends LivingEntity> {
    }
 
    public <U> Optional<U> getMemory(MemoryModuleType<U> memoryModuleType) {
-      return ((Optional)this.memories.get(memoryModuleType)).map(ExpirableValue::getValue);
+      return (Optional<U>) this.memories.get(memoryModuleType).map(ExpirableValue::getValue);
    }
 
    public <U> long getTimeUntilExpiry(MemoryModuleType<U> memoryModuleType) {
@@ -389,7 +389,7 @@ public class Brain<E extends LivingEntity> {
          for(Entry<Activity, Set<Behavior<? super E>>> entry : map.entrySet()) {
             Activity activity = (Activity)entry.getKey();
             if (this.activeActivities.contains(activity)) {
-               for(Behavior<? super E> behavior : (Set)entry.getValue()) {
+               for(Behavior<? super E> behavior : entry.getValue()) {
                   if (behavior.getStatus() == Behavior.Status.STOPPED) {
                      behavior.tryStart(serverLevel, livingEntity, l);
                   }
@@ -413,9 +413,9 @@ public class Brain<E extends LivingEntity> {
       if (!this.activityRequirements.containsKey(activity)) {
          return false;
       } else {
-         for(Pair<MemoryModuleType<?>, MemoryStatus> pair : (Set)this.activityRequirements.get(activity)) {
-            MemoryModuleType<?> memoryModuleType = (MemoryModuleType)pair.getFirst();
-            MemoryStatus memoryStatus = (MemoryStatus)pair.getSecond();
+         for(Pair<MemoryModuleType<?>, MemoryStatus> pair : this.activityRequirements.get(activity)) {
+            MemoryModuleType<?> memoryModuleType = pair.getFirst();
+            MemoryStatus memoryStatus = pair.getSecond();
             if (!this.checkMemory(memoryModuleType, memoryStatus)) {
                return false;
             }
@@ -447,7 +447,7 @@ public class Brain<E extends LivingEntity> {
       private final Optional<? extends ExpirableValue<U>> value;
 
       static <U> Brain.MemoryValue<U> createUnchecked(MemoryModuleType<U> memoryModuleType, Optional<? extends ExpirableValue<?>> optional) {
-         return new Brain.MemoryValue<>(memoryModuleType, optional);
+         return new Brain.MemoryValue(memoryModuleType, optional);
       }
 
       MemoryValue(MemoryModuleType<U> memoryModuleType, Optional<? extends ExpirableValue<U>> optional) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
index e2f85f042e2d10a9edeee1447619069691f55e53..2d3c27bb5578bd4af0afa6074476b82bbf43e35b 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
@@ -74,7 +74,8 @@ import org.apache.logging.log4j.Logger;
 
 public class DefaultAttributes {
    private static final Logger LOGGER = LogManager.getLogger();
-   private static final Map<EntityType<? extends LivingEntity>, AttributeSupplier> SUPPLIERS = ImmutableMap.builder().put(EntityType.ARMOR_STAND, LivingEntity.createLivingAttributes().build()).put(EntityType.AXOLOTL, Axolotl.createAttributes().build()).put(EntityType.BAT, Bat.createAttributes().build()).put(EntityType.BEE, Bee.createAttributes().build()).put(EntityType.BLAZE, Blaze.createAttributes().build()).put(EntityType.CAT, Cat.createAttributes().build()).put(EntityType.CAVE_SPIDER, CaveSpider.createCaveSpider().build()).put(EntityType.CHICKEN, Chicken.createAttributes().build()).put(EntityType.COD, AbstractFish.createAttributes().build()).put(EntityType.COW, Cow.createAttributes().build()).put(EntityType.CREEPER, Creeper.createAttributes().build()).put(EntityType.DOLPHIN, Dolphin.createAttributes().build()).put(EntityType.DONKEY, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.DROWNED, Zombie.createAttributes().build()).put(EntityType.ELDER_GUARDIAN, ElderGuardian.createAttributes().build()).put(EntityType.ENDERMAN, EnderMan.createAttributes().build()).put(EntityType.ENDERMITE, Endermite.createAttributes().build()).put(EntityType.ENDER_DRAGON, EnderDragon.createAttributes().build()).put(EntityType.EVOKER, Evoker.createAttributes().build()).put(EntityType.FOX, Fox.createAttributes().build()).put(EntityType.GHAST, Ghast.createAttributes().build()).put(EntityType.GIANT, Giant.createAttributes().build()).put(EntityType.GLOW_SQUID, GlowSquid.createAttributes().build()).put(EntityType.GOAT, Goat.createAttributes().build()).put(EntityType.GUARDIAN, Guardian.createAttributes().build()).put(EntityType.HOGLIN, Hoglin.createAttributes().build()).put(EntityType.HORSE, AbstractHorse.createBaseHorseAttributes().build()).put(EntityType.HUSK, Zombie.createAttributes().build()).put(EntityType.ILLUSIONER, Illusioner.createAttributes().build()).put(EntityType.IRON_GOLEM, IronGolem.createAttributes().build()).put(EntityType.LLAMA, Llama.createAttributes().build()).put(EntityType.MAGMA_CUBE, MagmaCube.createAttributes().build()).put(EntityType.MOOSHROOM, Cow.createAttributes().build()).put(EntityType.MULE, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.OCELOT, Ocelot.createAttributes().build()).put(EntityType.PANDA, Panda.createAttributes().build()).put(EntityType.PARROT, Parrot.createAttributes().build()).put(EntityType.PHANTOM, Monster.createMonsterAttributes().build()).put(EntityType.PIG, Pig.createAttributes().build()).put(EntityType.PIGLIN, Piglin.createAttributes().build()).put(EntityType.PIGLIN_BRUTE, PiglinBrute.createAttributes().build()).put(EntityType.PILLAGER, Pillager.createAttributes().build()).put(EntityType.PLAYER, Player.createAttributes().build()).put(EntityType.POLAR_BEAR, PolarBear.createAttributes().build()).put(EntityType.PUFFERFISH, AbstractFish.createAttributes().build()).put(EntityType.RABBIT, Rabbit.createAttributes().build()).put(EntityType.RAVAGER, Ravager.createAttributes().build()).put(EntityType.SALMON, AbstractFish.createAttributes().build()).put(EntityType.SHEEP, Sheep.createAttributes().build()).put(EntityType.SHULKER, Shulker.createAttributes().build()).put(EntityType.SILVERFISH, Silverfish.createAttributes().build()).put(EntityType.SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.SKELETON_HORSE, SkeletonHorse.createAttributes().build()).put(EntityType.SLIME, Monster.createMonsterAttributes().build()).put(EntityType.SNOW_GOLEM, SnowGolem.createAttributes().build()).put(EntityType.SPIDER, Spider.createAttributes().build()).put(EntityType.SQUID, Squid.createAttributes().build()).put(EntityType.STRAY, AbstractSkeleton.createAttributes().build()).put(EntityType.STRIDER, Strider.createAttributes().build()).put(EntityType.TRADER_LLAMA, Llama.createAttributes().build()).put(EntityType.TROPICAL_FISH, AbstractFish.createAttributes().build()).put(EntityType.TURTLE, Turtle.createAttributes().build()).put(EntityType.VEX, Vex.createAttributes().build()).put(EntityType.VILLAGER, Villager.createAttributes().build()).put(EntityType.VINDICATOR, Vindicator.createAttributes().build()).put(EntityType.WANDERING_TRADER, Mob.createMobAttributes().build()).put(EntityType.WITCH, Witch.createAttributes().build()).put(EntityType.WITHER, WitherBoss.createAttributes().build()).put(EntityType.WITHER_SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.WOLF, Wolf.createAttributes().build()).put(EntityType.ZOGLIN, Zoglin.createAttributes().build()).put(EntityType.ZOMBIE, Zombie.createAttributes().build()).put(EntityType.ZOMBIE_HORSE, ZombieHorse.createAttributes().build()).put(EntityType.ZOMBIE_VILLAGER, Zombie.createAttributes().build()).put(EntityType.ZOMBIFIED_PIGLIN, ZombifiedPiglin.createAttributes().build()).build();
+   // MagmaCube - decompile error
+   private static final Map<EntityType<? extends LivingEntity>, AttributeSupplier> SUPPLIERS = ImmutableMap.<EntityType<? extends LivingEntity>, AttributeSupplier>builder().put(EntityType.ARMOR_STAND, LivingEntity.createLivingAttributes().build()).put(EntityType.AXOLOTL, Axolotl.createAttributes().build()).put(EntityType.BAT, Bat.createAttributes().build()).put(EntityType.BEE, Bee.createAttributes().build()).put(EntityType.BLAZE, Blaze.createAttributes().build()).put(EntityType.CAT, Cat.createAttributes().build()).put(EntityType.CAVE_SPIDER, CaveSpider.createCaveSpider().build()).put(EntityType.CHICKEN, Chicken.createAttributes().build()).put(EntityType.COD, AbstractFish.createAttributes().build()).put(EntityType.COW, Cow.createAttributes().build()).put(EntityType.CREEPER, Creeper.createAttributes().build()).put(EntityType.DOLPHIN, Dolphin.createAttributes().build()).put(EntityType.DONKEY, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.DROWNED, Zombie.createAttributes().build()).put(EntityType.ELDER_GUARDIAN, ElderGuardian.createAttributes().build()).put(EntityType.ENDERMAN, EnderMan.createAttributes().build()).put(EntityType.ENDERMITE, Endermite.createAttributes().build()).put(EntityType.ENDER_DRAGON, EnderDragon.createAttributes().build()).put(EntityType.EVOKER, Evoker.createAttributes().build()).put(EntityType.FOX, Fox.createAttributes().build()).put(EntityType.GHAST, Ghast.createAttributes().build()).put(EntityType.GIANT, Giant.createAttributes().build()).put(EntityType.GLOW_SQUID, GlowSquid.createAttributes().build()).put(EntityType.GOAT, Goat.createAttributes().build()).put(EntityType.GUARDIAN, Guardian.createAttributes().build()).put(EntityType.HOGLIN, Hoglin.createAttributes().build()).put(EntityType.HORSE, AbstractHorse.createBaseHorseAttributes().build()).put(EntityType.HUSK, Zombie.createAttributes().build()).put(EntityType.ILLUSIONER, Illusioner.createAttributes().build()).put(EntityType.IRON_GOLEM, IronGolem.createAttributes().build()).put(EntityType.LLAMA, Llama.createAttributes().build()).put(EntityType.MAGMA_CUBE, MagmaCube.createAttributes().build()).put(EntityType.MOOSHROOM, Cow.createAttributes().build()).put(EntityType.MULE, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.OCELOT, Ocelot.createAttributes().build()).put(EntityType.PANDA, Panda.createAttributes().build()).put(EntityType.PARROT, Parrot.createAttributes().build()).put(EntityType.PHANTOM, Monster.createMonsterAttributes().build()).put(EntityType.PIG, Pig.createAttributes().build()).put(EntityType.PIGLIN, Piglin.createAttributes().build()).put(EntityType.PIGLIN_BRUTE, PiglinBrute.createAttributes().build()).put(EntityType.PILLAGER, Pillager.createAttributes().build()).put(EntityType.PLAYER, Player.createAttributes().build()).put(EntityType.POLAR_BEAR, PolarBear.createAttributes().build()).put(EntityType.PUFFERFISH, AbstractFish.createAttributes().build()).put(EntityType.RABBIT, Rabbit.createAttributes().build()).put(EntityType.RAVAGER, Ravager.createAttributes().build()).put(EntityType.SALMON, AbstractFish.createAttributes().build()).put(EntityType.SHEEP, Sheep.createAttributes().build()).put(EntityType.SHULKER, Shulker.createAttributes().build()).put(EntityType.SILVERFISH, Silverfish.createAttributes().build()).put(EntityType.SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.SKELETON_HORSE, SkeletonHorse.createAttributes().build()).put(EntityType.SLIME, Monster.createMonsterAttributes().build()).put(EntityType.SNOW_GOLEM, SnowGolem.createAttributes().build()).put(EntityType.SPIDER, Spider.createAttributes().build()).put(EntityType.SQUID, Squid.createAttributes().build()).put(EntityType.STRAY, AbstractSkeleton.createAttributes().build()).put(EntityType.STRIDER, Strider.createAttributes().build()).put(EntityType.TRADER_LLAMA, Llama.createAttributes().build()).put(EntityType.TROPICAL_FISH, AbstractFish.createAttributes().build()).put(EntityType.TURTLE, Turtle.createAttributes().build()).put(EntityType.VEX, Vex.createAttributes().build()).put(EntityType.VILLAGER, Villager.createAttributes().build()).put(EntityType.VINDICATOR, Vindicator.createAttributes().build()).put(EntityType.WANDERING_TRADER, Mob.createMobAttributes().build()).put(EntityType.WITCH, Witch.createAttributes().build()).put(EntityType.WITHER, WitherBoss.createAttributes().build()).put(EntityType.WITHER_SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.WOLF, Wolf.createAttributes().build()).put(EntityType.ZOGLIN, Zoglin.createAttributes().build()).put(EntityType.ZOMBIE, Zombie.createAttributes().build()).put(EntityType.ZOMBIE_HORSE, ZombieHorse.createAttributes().build()).put(EntityType.ZOMBIE_VILLAGER, Zombie.createAttributes().build()).put(EntityType.ZOMBIFIED_PIGLIN, ZombifiedPiglin.createAttributes().build()).build();
 
    public static AttributeSupplier getSupplier(EntityType<? extends LivingEntity> entityType) {
       return (AttributeSupplier)SUPPLIERS.get(entityType);
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalMakeLove.java b/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalMakeLove.java
index 729a95284a114a0cbcbbcc5ce63c6f0e4cdd87b4..dc64a91a5d5ce7f4230245a43d270230cdfa9c8c 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalMakeLove.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalMakeLove.java
@@ -77,6 +77,6 @@ public class AnimalMakeLove extends Behavior<Animal> {
    }
 
    private Optional<? extends Animal> findValidBreedPartner(Animal animal) {
-      return ((List)animal.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).get()).stream().filter((livingEntity) -> livingEntity.getType() == this.partnerType).map((livingEntity) -> (Animal)livingEntity).filter(animal::canMate).findFirst();
+      return (animal.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).get()).stream().filter((livingEntity) -> livingEntity.getType() == this.partnerType).map((livingEntity) -> (Animal)livingEntity).filter(animal::canMate).findFirst(); // MagmaCube - decompile error
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
index 84b3f8d869acb84f0bf0543159ade674dfd79633..6c352f8ef5ecdaab1367c2785f62d8ffd2a2fc61 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
@@ -49,12 +49,15 @@ public class InteractWith<E extends LivingEntity, T extends LivingEntity> extend
    }
 
    private boolean isTargetValid(LivingEntity livingEntity) {
-      return this.type.equals(livingEntity.getType()) && this.targetFilter.test(livingEntity);
+      return this.type.equals(livingEntity.getType()) && this.targetFilter.test((T) livingEntity); // MagmaCube - decompile error
    }
 
    protected void start(ServerLevel serverLevel, E livingEntity, long l) {
       Brain<?> brain = livingEntity.getBrain();
-      brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).ifPresent((list) -> list.stream().filter((livingEntityx) -> this.type.equals(livingEntityx.getType())).map((livingEntityx) -> livingEntityx).filter((livingEntity2) -> livingEntity2.distanceToSqr(livingEntity) <= (double)this.interactionRangeSqr).filter(this.targetFilter).findFirst().ifPresent((livingEntityx) -> {
+      // MagmaCube start - decompile error
+      brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).ifPresent((list) -> list.stream().filter((livingEntityx) -> this.type.equals(livingEntityx.getType())).map((livingEntityx) -> livingEntityx).filter((livingEntity2) -> livingEntity2.distanceToSqr(livingEntity) <= (double)this.interactionRangeSqr).filter((Predicate) this.targetFilter).findFirst().ifPresent((livingEntityxx) -> {
+            LivingEntity livingEntityx = (LivingEntity) livingEntityxx;
+            // MagmaCube end - decompile error
             brain.setMemory(this.memory, (T)livingEntityx);
             brain.setMemory(MemoryModuleType.LOOK_TARGET, new EntityTracker(livingEntityx, true));
             brain.setMemory(MemoryModuleType.WALK_TARGET, new WalkTarget(new EntityTracker(livingEntityx, false), this.speedModifier, this.maxDist));
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWithDoor.java b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWithDoor.java
index 5ce9f507dd19388b2e36032eb8fb88a98c109b5d..0697bcac4ad18dbcb250d116f63c279fe41cca85 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWithDoor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWithDoor.java
@@ -114,7 +114,8 @@ public class InteractWithDoor extends Behavior<LivingEntity> {
 
    private static boolean areOtherMobsComingThroughDoor(ServerLevel serverLevel, LivingEntity livingEntity, BlockPos blockPos) {
       Brain<?> brain = livingEntity.getBrain();
-      return !brain.hasMemoryValue(MemoryModuleType.NEAREST_LIVING_ENTITIES) ? false : ((List)brain.getMemory(MemoryModuleType.NEAREST_LIVING_ENTITIES).get()).stream().filter((livingEntity2) -> livingEntity2.getType() == livingEntity.getType()).filter((livingEntityx) -> blockPos.closerThan(livingEntityx.position(), 2.0D)).anyMatch((livingEntityx) -> isMobComingThroughDoor(serverLevel, livingEntityx, blockPos));
+      // MagmaCube - decompile error
+      return !brain.hasMemoryValue(MemoryModuleType.NEAREST_LIVING_ENTITIES) ? false : (brain.getMemory(MemoryModuleType.NEAREST_LIVING_ENTITIES).get()).stream().filter((livingEntity2) -> livingEntity2.getType() == livingEntity.getType()).filter((livingEntityx) -> blockPos.closerThan(livingEntityx.position(), 2.0D)).anyMatch((livingEntityx) -> isMobComingThroughDoor(serverLevel, livingEntityx, blockPos));
    }
 
    private static boolean isMobComingThroughDoor(ServerLevel serverLevel, LivingEntity livingEntity, BlockPos blockPos) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/PlayTagWithOtherKids.java b/src/main/java/net/minecraft/world/entity/ai/behavior/PlayTagWithOtherKids.java
index 4cfd804aa060a0b8e82bd38ef989484ed3897250..06e2b28c366bb2b21f14d83a04490ec32ede2eff 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/PlayTagWithOtherKids.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/PlayTagWithOtherKids.java
@@ -92,7 +92,7 @@ public class PlayTagWithOtherKids extends Behavior<PathfinderMob> {
 
    @Nullable
    private LivingEntity seeIfSomeoneIsChasingMe(LivingEntity livingEntity) {
-      return (LivingEntity)((List)livingEntity.getBrain().getMemory(MemoryModuleType.VISIBLE_VILLAGER_BABIES).get()).stream().filter((livingEntity2) -> this.isFriendChasingMe(livingEntity, livingEntity2)).findAny().orElse(null);
+      return (LivingEntity)(livingEntity.getBrain().getMemory(MemoryModuleType.VISIBLE_VILLAGER_BABIES).get()).stream().filter((livingEntity2) -> this.isFriendChasingMe(livingEntity, livingEntity2)).findAny().orElse(null); // MagmaCube - decompile error
    }
 
    private boolean isChasingSomeone(LivingEntity livingEntity) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java b/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
index 808a6c5c7fda0e1cfdb5f7b8f8e16e12ecaff3cd..3aea92b50229cd6b44dc7a256a1ddb370adf3299 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
@@ -50,13 +50,15 @@ public class SetClosestHomeAsWalkTarget extends Behavior<LivingEntity> {
       PathfinderMob pathfinderMob = (PathfinderMob)livingEntity;
       PoiManager poiManager = serverLevel.getPoiManager();
       Predicate<BlockPos> predicate = (blockPosx) -> {
-         long l = blockPosx.asLong();
-         if (this.batchCache.containsKey(l)) {
+         // MagmaCube start - decompile error
+         long lx = blockPosx.asLong();
+         if (this.batchCache.containsKey(lx)) {
+            // MagmaCube end - decompile error
             return false;
          } else if (++this.triedCount >= 5) {
             return false;
          } else {
-            this.batchCache.put(l, this.lastUpdate + 40L);
+            this.batchCache.put(lx, this.lastUpdate + 40L); // MagmaCube - decompile error
             return true;
          }
       };
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/SocializeAtBell.java b/src/main/java/net/minecraft/world/entity/ai/behavior/SocializeAtBell.java
index 631f78476d6c091d2def1661aff3cc4db0662c08..7a8a603b6714a105b541ef14b3b526789c0be9b5 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/SocializeAtBell.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/SocializeAtBell.java
@@ -22,7 +22,8 @@ public class SocializeAtBell extends Behavior<LivingEntity> {
    protected boolean checkExtraStartConditions(ServerLevel serverLevel, LivingEntity livingEntity) {
       Brain<?> brain = livingEntity.getBrain();
       Optional<GlobalPos> optional = brain.getMemory(MemoryModuleType.MEETING_POINT);
-      return serverLevel.getRandom().nextInt(100) == 0 && optional.isPresent() && serverLevel.dimension() == ((GlobalPos)optional.get()).dimension() && ((GlobalPos)optional.get()).pos().closerThan(livingEntity.position(), 4.0D) && ((List)brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).get()).stream().anyMatch((livingEntityx) -> EntityType.VILLAGER.equals(livingEntityx.getType()));
+      // MagmaCube - decompile error
+      return serverLevel.getRandom().nextInt(100) == 0 && optional.isPresent() && serverLevel.dimension() == ((GlobalPos)optional.get()).dimension() && ((GlobalPos)optional.get()).pos().closerThan(livingEntity.position(), 4.0D) && (brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).get()).stream().anyMatch((livingEntityx) -> EntityType.VILLAGER.equals(livingEntityx.getType()));
    }
 
    protected void start(ServerLevel serverLevel, LivingEntity livingEntity, long l) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/StartAttacking.java b/src/main/java/net/minecraft/world/entity/ai/behavior/StartAttacking.java
index 9c515cc15b4b580086f3d9d4d0ae2e0151e4f00c..e1e38690b684da5ddb80ed9fd5aa5ebf7b82aff7 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/StartAttacking.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/StartAttacking.java
@@ -34,7 +34,7 @@ public class StartAttacking<E extends Mob> extends Behavior<E> {
    }
 
    protected void start(ServerLevel serverLevel, E mob, long l) {
-      ((Optional)this.targetFinderFunction.apply(mob)).ifPresent((livingEntity) -> this.setAttackTarget(mob, livingEntity));
+      (this.targetFinderFunction.apply(mob)).ifPresent((livingEntity) -> this.setAttackTarget(mob, livingEntity)); // MagmaCube - decompile error
    }
 
    private void setAttackTarget(E mob, LivingEntity livingEntity) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
index aa2c17bc39b4fa658ae9c30e14be46a610f75aed..77c0be672ce28dc584314ac41caf0bce9cba2082 100644
--- a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
+++ b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
@@ -91,10 +91,12 @@ public class GossipContainer {
    public void transferFrom(GossipContainer gossipContainer, Random random, int i) {
       Collection<GossipContainer.GossipEntry> collection = gossipContainer.selectGossipsForTransfer(random, i);
       collection.forEach((gossipEntry) -> {
-         int i = gossipEntry.value - gossipEntry.type.decayPerTransfer;
-         if (i >= 2) {
-            this.getOrCreate(gossipEntry.target).entries.mergeInt(gossipEntry.type, i, GossipContainer::mergeValuesForTransfer);
+         // MagmaCube start - decompile error
+         int i1 = gossipEntry.value - gossipEntry.type.decayPerTransfer;
+         if (i1 >= 2) {
+            this.getOrCreate(gossipEntry.target).entries.mergeInt(gossipEntry.type, i1, GossipContainer::mergeValuesForTransfer);
          }
+         // MagmaCube end - decompile error
 
       });
    }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/GolemSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/GolemSensor.java
index cdef387734c25700d17dadd2017772f1ba45ef16..54aea67a9b3c7e15637b54f06dd387b2099ada18 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/GolemSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/GolemSensor.java
@@ -32,7 +32,7 @@ public class GolemSensor extends Sensor<LivingEntity> {
    public static void checkForNearbyGolem(LivingEntity livingEntity) {
       Optional<List<LivingEntity>> optional = livingEntity.getBrain().getMemory(MemoryModuleType.NEAREST_LIVING_ENTITIES);
       if (optional.isPresent()) {
-         boolean flag = ((List)optional.get()).stream().anyMatch((livingEntityx) -> livingEntityx.getType().equals(EntityType.IRON_GOLEM));
+         boolean flag = (optional.get()).stream().anyMatch((livingEntityx) -> livingEntityx.getType().equals(EntityType.IRON_GOLEM)); // MagmaCube - decompile error
          if (flag) {
             golemDetected(livingEntity);
          }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/HoglinSpecificSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/HoglinSpecificSensor.java
index 356a6b0b072dd14310957389a2422663267775e8..64c53d226ef22957d993490a061229e1a15f34d6 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/HoglinSpecificSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/HoglinSpecificSensor.java
@@ -26,7 +26,7 @@ public class HoglinSpecificSensor extends Sensor<Hoglin> {
       int i = 0;
       List<Hoglin> list = Lists.newArrayList();
 
-      for(LivingEntity livingEntity : (List)brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).orElse(Lists.newArrayList())) {
+      for(LivingEntity livingEntity : brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).orElse(Lists.newArrayList())) { // MagmaCube - decompile error
          if (livingEntity instanceof Piglin && !livingEntity.isBaby()) {
             ++i;
             if (!optional.isPresent()) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinBruteSpecificSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinBruteSpecificSensor.java
index f2b84eb74b9f25eda2ae10e44fa33bf28fecb540..3a83d333470bdbb0e6218ad268bd35eb1614a9b8 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinBruteSpecificSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinBruteSpecificSensor.java
@@ -25,14 +25,14 @@ public class PiglinBruteSpecificSensor extends Sensor<LivingEntity> {
       Optional<Mob> optional = Optional.empty();
       List<AbstractPiglin> list = Lists.newArrayList();
 
-      for(LivingEntity livingEntity2 : (List)brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).orElse(ImmutableList.of())) {
+      for(LivingEntity livingEntity2 : brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).orElse(ImmutableList.of())) { // MagmaCube - decompile error
          if (livingEntity2 instanceof WitherSkeleton || livingEntity2 instanceof WitherBoss) {
             optional = Optional.of((Mob)livingEntity2);
             break;
          }
       }
 
-      for(LivingEntity livingEntity3 : (List)brain.getMemory(MemoryModuleType.NEAREST_LIVING_ENTITIES).orElse(ImmutableList.of())) {
+      for(LivingEntity livingEntity3 : brain.getMemory(MemoryModuleType.NEAREST_LIVING_ENTITIES).orElse(ImmutableList.of())) { // MagmaCube - decompile error
          if (livingEntity3 instanceof AbstractPiglin && ((AbstractPiglin)livingEntity3).isAdult()) {
             list.add((AbstractPiglin)livingEntity3);
          }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinSpecificSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinSpecificSensor.java
index 3f0c36618ceac71e813d9963a28f1e3356e635c0..a889339d03f2d9ed2c01bd97d3d6dcc8cd62c0b7 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinSpecificSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/PiglinSpecificSensor.java
@@ -44,7 +44,7 @@ public class PiglinSpecificSensor extends Sensor<LivingEntity> {
       List<AbstractPiglin> list = Lists.newArrayList();
       List<AbstractPiglin> list2 = Lists.newArrayList();
 
-      for(LivingEntity livingEntity2 : (List)brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).orElse(ImmutableList.of())) {
+      for(LivingEntity livingEntity2 : brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).orElse(ImmutableList.of())) { // MagmaCube - decompile error
          if (livingEntity2 instanceof Hoglin) {
             Hoglin hoglin = (Hoglin)livingEntity2;
             if (hoglin.isBaby() && !optional3.isPresent()) {
@@ -82,7 +82,7 @@ public class PiglinSpecificSensor extends Sensor<LivingEntity> {
          }
       }
 
-      for(LivingEntity livingEntity3 : (List)brain.getMemory(MemoryModuleType.NEAREST_LIVING_ENTITIES).orElse(ImmutableList.of())) {
+      for(LivingEntity livingEntity3 : brain.getMemory(MemoryModuleType.NEAREST_LIVING_ENTITIES).orElse(ImmutableList.of())) { // MagmaCube - decompile error
          if (livingEntity3 instanceof AbstractPiglin && ((AbstractPiglin)livingEntity3).isAdult()) {
             list2.add((AbstractPiglin)livingEntity3);
          }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
index e18b62352325d8eb7d2eb7c983aad198cd8b1197..a8e3a50947edf9b9912f4a1bcb8633721ce599fb 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
@@ -6,7 +6,8 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 
 public class VillagerHostilesSensor extends NearestVisibleLivingEntitySensor {
-   private static final ImmutableMap<EntityType<?>, Float> ACCEPTABLE_DISTANCE_FROM_HOSTILES = ImmutableMap.builder().put(EntityType.DROWNED, 8.0F).put(EntityType.EVOKER, 12.0F).put(EntityType.HUSK, 8.0F).put(EntityType.ILLUSIONER, 12.0F).put(EntityType.PILLAGER, 15.0F).put(EntityType.RAVAGER, 12.0F).put(EntityType.VEX, 8.0F).put(EntityType.VINDICATOR, 10.0F).put(EntityType.ZOGLIN, 10.0F).put(EntityType.ZOMBIE, 8.0F).put(EntityType.ZOMBIE_VILLAGER, 8.0F).build();
+   // MagmaCube - decompile error
+   private static final ImmutableMap<EntityType<?>, Float> ACCEPTABLE_DISTANCE_FROM_HOSTILES = ImmutableMap.<EntityType<?>, Float>builder().put(EntityType.DROWNED, 8.0F).put(EntityType.EVOKER, 12.0F).put(EntityType.HUSK, 8.0F).put(EntityType.ILLUSIONER, 12.0F).put(EntityType.PILLAGER, 15.0F).put(EntityType.RAVAGER, 12.0F).put(EntityType.VEX, 8.0F).put(EntityType.VINDICATOR, 10.0F).put(EntityType.ZOGLIN, 10.0F).put(EntityType.ZOMBIE, 8.0F).put(EntityType.ZOMBIE_VILLAGER, 8.0F).build();
 
    protected boolean isMatchingEntity(LivingEntity livingEntity, LivingEntity livingEntity2) {
       return this.isHostile(livingEntity2) && this.isClose(livingEntity, livingEntity2);
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
index 2c7c2eaf7c2051850a5e5352c845e5838f0c0b51..e6500d3b37f2b5539877e31f61ad2b99cad5d68a 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -180,7 +180,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
    }
 
    public void ensureLoadedAndValid(LevelReader levelReader, BlockPos blockPos, int i) {
-      SectionPos.aroundChunk(new ChunkPos(blockPos), Math.floorDiv(i, 16), this.levelHeightAccessor.getMinSection(), this.levelHeightAccessor.getMaxSection()).map((sectionPos) -> Pair.of(sectionPos, this.getOrLoad(sectionPos.asLong()))).filter((pair) -> !((Optional)pair.getSecond()).map(PoiSection::isValid).orElse(false)).map((pair) -> ((SectionPos)pair.getFirst()).chunk()).filter((chunkPos) -> this.loadedChunks.add(chunkPos.toLong())).forEach((chunkPos) -> levelReader.getChunk(chunkPos.x, chunkPos.z, ChunkStatus.EMPTY));
+      SectionPos.aroundChunk(new ChunkPos(blockPos), Math.floorDiv(i, 16), this.levelHeightAccessor.getMinSection(), this.levelHeightAccessor.getMaxSection()).map((sectionPos) -> Pair.of(sectionPos, this.getOrLoad(sectionPos.asLong()))).filter((pair) -> !pair.getSecond().map(PoiSection::isValid).orElse(false)).map((pair) -> ((SectionPos)pair.getFirst()).chunk()).filter((chunkPos) -> this.loadedChunks.add(chunkPos.toLong())).forEach((chunkPos) -> levelReader.getChunk(chunkPos.x, chunkPos.z, ChunkStatus.EMPTY)); // MagmaCube - decompile error
    }
 
    final class DistanceTracker extends SectionTracker {
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
index 310f39c008d2fc9a29c70e557a67ccd17fe74c3a..0823c8ae9953c3eb7002ba8c9208a3cf38b390ad 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -31,7 +31,8 @@ public class PoiSection {
    private boolean isValid;
 
    public static Codec<PoiSection> codec(Runnable runnable) {
-      return RecordCodecBuilder.create((instance) -> instance.group(RecordCodecBuilder.point(runnable), Codec.BOOL.optionalFieldOf("Valid", false).forGetter((poiSection) -> poiSection.isValid), PoiRecord.codec(runnable).listOf().fieldOf("Records").forGetter((poiSection) -> ImmutableList.copyOf(poiSection.records.values()))).apply(instance, PoiSection::new)).orElseGet(Util.prefix("Failed to read POI section: ", LOGGER::error), () -> new PoiSection(runnable, false, ImmutableList.of()));
+      // MagmaCube - decompile error
+      return RecordCodecBuilder.<PoiSection>create((instance) -> instance.group(RecordCodecBuilder.point(runnable), Codec.BOOL.optionalFieldOf("Valid", false).forGetter((poiSection) -> poiSection.isValid), PoiRecord.codec(runnable).listOf().fieldOf("Records").forGetter((poiSection) -> ImmutableList.copyOf(poiSection.records.values()))).apply(instance, PoiSection::new)).orElseGet(Util.prefix("Failed to read POI section: ", LOGGER::error), () -> new PoiSection(runnable, false, ImmutableList.of()));
    }
 
    public PoiSection(Runnable runnable) {
@@ -118,7 +119,7 @@ public class PoiSection {
       if (!this.isValid) {
          Short2ObjectMap<PoiRecord> short2ObjectMap = new Short2ObjectOpenHashMap(this.records);
          this.clear();
-         consumer.accept((BiConsumer)(blockPos, poiType) -> {
+         consumer.accept((blockPos, poiType) -> { // MagmaCube - decompile error
             short s = SectionPos.sectionRelativePos(blockPos);
             PoiRecord poiRecord = (PoiRecord)short2ObjectMap.computeIfAbsent(s, (i) -> new PoiRecord(blockPos, poiType, this.setDirty));
             this.add(poiRecord);
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
index 318f43fb019e29a4d62ef38baa0d7a689f677c6e..92d6b0ae8555c5a3c34f0a7cc2e5cbe99332df38 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
@@ -93,7 +93,7 @@ public abstract class AbstractFish extends WaterAnimal implements Bucketable {
    protected void registerGoals() {
       super.registerGoals();
       this.goalSelector.addGoal(0, new PanicGoal(this, 1.25D));
-      this.goalSelector.addGoal(2, new AvoidEntityGoal(this, Player.class, 8.0F, 1.6D, 1.4D, EntitySelector.NO_SPECTATORS::test));
+      this.goalSelector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0F, 1.6D, 1.4D, EntitySelector.NO_SPECTATORS::test)); // MagmaCube - decompile error
       this.goalSelector.addGoal(4, new AbstractFish.FishSwimGoal(this));
    }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index 453945b2c8b89530ffa624f02f7a6e8d5e7d9a8e..53634992abb31505305494c061c4b83bed63d339 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -144,7 +144,7 @@ public class Fox extends Animal {
       this.goalSelector.addGoal(1, new Fox.FaceplantGoal());
       this.goalSelector.addGoal(2, new Fox.FoxPanicGoal(2.2D));
       this.goalSelector.addGoal(3, new Fox.FoxBreedGoal(1.0D));
-      this.goalSelector.addGoal(4, new AvoidEntityGoal(this, Player.class, 16.0F, 1.6D, 1.4D, (livingEntity) -> AVOID_PLAYERS.test(livingEntity) && !this.trusts(livingEntity.getUUID()) && !this.isDefending()));
+      this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Player.class, 16.0F, 1.6D, 1.4D, (livingEntity) -> AVOID_PLAYERS.test(livingEntity) && !this.trusts(livingEntity.getUUID()) && !this.isDefending()));
       this.goalSelector.addGoal(4, new AvoidEntityGoal(this, Wolf.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !((Wolf)livingEntity).isTame() && !this.isDefending()));
       this.goalSelector.addGoal(4, new AvoidEntityGoal(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !this.isDefending()));
       this.goalSelector.addGoal(5, new Fox.StalkPreyGoal());
diff --git a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
index 73c0e2156f586b505c6ae087c08a4ba6a34e6ace..2f96a4a00c9454448c03d4052b9c0c924d4746f3 100644
--- a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
@@ -77,8 +77,8 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
       this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
       this.targetSelector.addGoal(1, new DefendVillageTargetGoal(this));
       this.targetSelector.addGoal(2, new HurtByTargetGoal(this));
-      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, this::isAngryAt));
-      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Mob.class, 5, false, false, (livingEntity) -> livingEntity instanceof Enemy && !(livingEntity instanceof Creeper)));
+      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt)); // MagmaCube - decompile error
+      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Mob.class, 5, false, false, (livingEntity) -> livingEntity instanceof Enemy && !(livingEntity instanceof Creeper))); // MagmaCube - decompile error
       this.targetSelector.addGoal(4, new ResetUniversalAngerTargetGoal<>(this, false));
    }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
index 4f38db0843689efde733881355b1d41b99ba4d58..31cbbe0ae1774cf81864d399af13c4493c31819c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
+++ b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
@@ -85,8 +85,8 @@ public class PolarBear extends Animal implements NeutralMob {
       this.goalSelector.addGoal(7, new RandomLookAroundGoal(this));
       this.targetSelector.addGoal(1, new PolarBear.PolarBearHurtByTargetGoal());
       this.targetSelector.addGoal(2, new PolarBear.PolarBearAttackPlayersGoal());
-      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, this::isAngryAt));
-      this.targetSelector.addGoal(4, new NearestAttackableTargetGoal(this, Fox.class, 10, true, true, (Predicate<LivingEntity>)null));
+      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt)); // MagmaCube - decompile error
+      this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Fox.class, 10, true, true, (Predicate<LivingEntity>)null)); // MagmaCube - decompile error
       this.targetSelector.addGoal(5, new ResetUniversalAngerTargetGoal<>(this, false));
    }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index e43436bf0ec10bf6f7b2489daf79c5d60192c190..9310108e52cc0294597cc712b0f616d24eb22016 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -102,10 +102,12 @@ public class Wolf extends TamableAnimal implements NeutralMob {
       this.targetSelector.addGoal(1, new OwnerHurtByTargetGoal(this));
       this.targetSelector.addGoal(2, new OwnerHurtTargetGoal(this));
       this.targetSelector.addGoal(3, (new HurtByTargetGoal(this)).setAlertOthers());
-      this.targetSelector.addGoal(4, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, this::isAngryAt));
-      this.targetSelector.addGoal(5, new NonTameRandomTargetGoal(this, Animal.class, false, PREY_SELECTOR));
-      this.targetSelector.addGoal(6, new NonTameRandomTargetGoal(this, Turtle.class, false, Turtle.BABY_ON_LAND_SELECTOR));
-      this.targetSelector.addGoal(7, new NearestAttackableTargetGoal(this, AbstractSkeleton.class, false));
+      // MagmaCube start - decompile error
+      this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt));
+      this.targetSelector.addGoal(5, new NonTameRandomTargetGoal<>(this, Animal.class, false, PREY_SELECTOR));
+      this.targetSelector.addGoal(6, new NonTameRandomTargetGoal<>(this, Turtle.class, false, Turtle.BABY_ON_LAND_SELECTOR));
+      this.targetSelector.addGoal(7, new NearestAttackableTargetGoal<>(this, AbstractSkeleton.class, false));
+      // MagmaCube end - decompile error
       this.targetSelector.addGoal(8, new ResetUniversalAngerTargetGoal<>(this, true));
    }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index a1ac1715e3e6d06cf72a45c65b3759d1cbf3d3ec..69a220b34bdf4a850b7b767e082502f4d2d0fce2 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -66,7 +66,7 @@ import net.minecraft.world.phys.Vec3;
 public class Axolotl extends Animal implements LerpingModel, Bucketable {
    public static final int TOTAL_PLAYDEAD_TIME = 200;
    protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Axolotl>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.AXOLOTL_ATTACKABLES, SensorType.AXOLOTL_TEMPTATIONS);
-   protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN});
+   protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN});
    private static final EntityDataAccessor<Integer> DATA_VARIANT = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.INT);
    private static final EntityDataAccessor<Boolean> DATA_PLAYING_DEAD = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
    private static final EntityDataAccessor<Boolean> FROM_BUCKET = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
@@ -413,7 +413,7 @@ public class Axolotl extends Animal implements LerpingModel, Bucketable {
    }
 
    public Brain<Axolotl> getBrain() {
-      return super.getBrain();
+      return (Brain<Axolotl>) super.getBrain();
    }
 
    protected void sendDebugPackets() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/AxolotlAi.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/AxolotlAi.java
index 329b213eb3dbf332f3f6361ef21d5803c83d91ce..19ccd7a0300663453e0b337faecd6cdbf62e341e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/AxolotlAi.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/AxolotlAi.java
@@ -57,11 +57,11 @@ public class AxolotlAi {
    }
 
    private static void initPlayDeadActivity(Brain<Axolotl> brain) {
-      brain.addActivityAndRemoveMemoriesWhenStopped(Activity.PLAY_DEAD, ImmutableList.of(Pair.of(0, new PlayDead()), Pair.of(1, new EraseMemoryIf(AxolotlAi::isBreeding, MemoryModuleType.PLAY_DEAD_TICKS))), ImmutableSet.of(Pair.of(MemoryModuleType.PLAY_DEAD_TICKS, MemoryStatus.VALUE_PRESENT)), ImmutableSet.of(MemoryModuleType.PLAY_DEAD_TICKS));
+      brain.addActivityAndRemoveMemoriesWhenStopped(Activity.PLAY_DEAD, ImmutableList.of(Pair.of(0, new PlayDead()), Pair.of(1, new EraseMemoryIf<>(AxolotlAi::isBreeding, MemoryModuleType.PLAY_DEAD_TICKS))), ImmutableSet.of(Pair.of(MemoryModuleType.PLAY_DEAD_TICKS, MemoryStatus.VALUE_PRESENT)), ImmutableSet.of(MemoryModuleType.PLAY_DEAD_TICKS)); // MagmaCube - decompile error
    }
 
    private static void initFightActivity(Brain<Axolotl> brain) {
-      brain.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 0, ImmutableList.of(new StopAttackingIfTargetInvalid(Axolotl::onStopAttacking), new SetWalkTargetFromAttackTargetIfTargetOutOfReach(AxolotlAi::getSpeedModifierChasing), new MeleeAttack(20), new EraseMemoryIf(AxolotlAi::isBreeding, MemoryModuleType.ATTACK_TARGET)), MemoryModuleType.ATTACK_TARGET);
+      brain.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 0, ImmutableList.of(new StopAttackingIfTargetInvalid<>(Axolotl::onStopAttacking), new SetWalkTargetFromAttackTargetIfTargetOutOfReach(AxolotlAi::getSpeedModifierChasing), new MeleeAttack(20), new EraseMemoryIf<>(AxolotlAi::isBreeding, MemoryModuleType.ATTACK_TARGET)), MemoryModuleType.ATTACK_TARGET); // MagmaCube - decompile error
    }
 
    private static void initCoreActivity(Brain<Axolotl> brain) {
@@ -69,7 +69,7 @@ public class AxolotlAi {
    }
 
    private static void initIdleActivity(Brain<Axolotl> brain) {
-      brain.addActivity(Activity.IDLE, ImmutableList.of(Pair.of(0, new RunSometimes<>(new SetEntityLookTarget(EntityType.PLAYER, 6.0F), UniformInt.of(30, 60))), Pair.of(1, new AnimalMakeLove(EntityType.AXOLOTL, 0.2F)), Pair.of(2, new RunOne(ImmutableList.of(Pair.of(new FollowTemptation(AxolotlAi::getSpeedModifier), 1), Pair.of(new BabyFollowAdult(ADULT_FOLLOW_RANGE, AxolotlAi::getSpeedModifierFollowingAdult), 1)))), Pair.of(3, new StartAttacking(AxolotlAi::findNearestValidAttackTarget)), Pair.of(3, new TryFindWater(6, 0.15F)), Pair.of(4, new GateBehavior(ImmutableMap.of(MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT), ImmutableSet.of(), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.TRY_ALL, ImmutableList.of(Pair.of(new RandomSwim(0.5F), 2), Pair.of(new RandomStroll(0.15F), 2), Pair.of(new SetWalkTargetFromLookTarget(AxolotlAi::getSpeedModifier, 3), 3), Pair.of(new RunIf<>(Entity::isInWaterOrBubble, new DoNothing(30, 60)), 5), Pair.of(new RunIf<>(Entity::isOnGround, new DoNothing(200, 400)), 5))))));
+      brain.addActivity(Activity.IDLE, ImmutableList.of(Pair.of(0, new RunSometimes<>(new SetEntityLookTarget(EntityType.PLAYER, 6.0F), UniformInt.of(30, 60))), Pair.of(1, new AnimalMakeLove(EntityType.AXOLOTL, 0.2F)), Pair.of(2, new RunOne<>(ImmutableList.of(Pair.of(new FollowTemptation(AxolotlAi::getSpeedModifier), 1), Pair.of(new BabyFollowAdult<>(ADULT_FOLLOW_RANGE, AxolotlAi::getSpeedModifierFollowingAdult), 1)))), Pair.of(3, new StartAttacking<>(AxolotlAi::findNearestValidAttackTarget)), Pair.of(3, new TryFindWater(6, 0.15F)), Pair.of(4, new GateBehavior<>(ImmutableMap.of(MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT), ImmutableSet.of(), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.TRY_ALL, ImmutableList.of(Pair.of(new RandomSwim(0.5F), 2), Pair.of(new RandomStroll(0.15F), 2), Pair.of(new SetWalkTargetFromLookTarget(AxolotlAi::getSpeedModifier, 3), 3), Pair.of(new RunIf<>(Entity::isInWaterOrBubble, new DoNothing(30, 60)), 5), Pair.of(new RunIf<>(Entity::isOnGround, new DoNothing(200, 400)), 5)))))); // MagmaCube - decompile error
    }
 
    public static void updateActivity(Axolotl axolotl) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index 2505de07e006561b812ea9e0e2d2dd1f7220628c..a41caf1c892d7a6c956025082e8405cdd16ede8e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -109,7 +109,7 @@ public class Goat extends Animal {
    }
 
    public Brain<Goat> getBrain() {
-      return super.getBrain();
+      return (Brain<Goat>) super.getBrain(); // MagmaCube - decompile error
    }
 
    protected void customServerAiStep() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/GoatAi.java b/src/main/java/net/minecraft/world/entity/animal/goat/GoatAi.java
index edb85ea6d90dc80825702033bc4f57b1066e2520..48e87361aac48d73cf7dfc66d3abfd565f709dec 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/GoatAi.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/GoatAi.java
@@ -77,15 +77,18 @@ public class GoatAi {
    }
 
    private static void initIdleActivity(Brain<Goat> brain) {
-      brain.addActivityWithConditions(Activity.IDLE, ImmutableList.of(Pair.of(0, new RunSometimes<>(new SetEntityLookTarget(EntityType.PLAYER, 6.0F), UniformInt.of(30, 60))), Pair.of(0, new AnimalMakeLove(EntityType.GOAT, 1.0F)), Pair.of(1, new FollowTemptation((livingEntity) -> 1.25F)), Pair.of(2, new BabyFollowAdult(ADULT_FOLLOW_RANGE, 1.25F)), Pair.of(3, new RunOne(ImmutableList.of(Pair.of(new RandomStroll(1.0F), 2), Pair.of(new SetWalkTargetFromLookTarget(1.0F, 3), 2), Pair.of(new DoNothing(30, 60), 1))))), ImmutableSet.of(Pair.of(MemoryModuleType.RAM_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryStatus.VALUE_ABSENT)));
+      // MagmaCube - decompile error
+      brain.addActivityWithConditions(Activity.IDLE, ImmutableList.of(Pair.of(0, new RunSometimes<>(new SetEntityLookTarget(EntityType.PLAYER, 6.0F), UniformInt.of(30, 60))), Pair.of(0, new AnimalMakeLove(EntityType.GOAT, 1.0F)), Pair.of(1, new FollowTemptation((livingEntity) -> 1.25F)), Pair.of(2, new BabyFollowAdult<>(ADULT_FOLLOW_RANGE, 1.25F)), Pair.of(3, new RunOne<>(ImmutableList.of(Pair.of(new RandomStroll(1.0F), 2), Pair.of(new SetWalkTargetFromLookTarget(1.0F, 3), 2), Pair.of(new DoNothing(30, 60), 1))))), ImmutableSet.of(Pair.of(MemoryModuleType.RAM_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryStatus.VALUE_ABSENT)));
    }
 
    private static void initLongJumpActivity(Brain<Goat> brain) {
-      brain.addActivityWithConditions(Activity.LONG_JUMP, ImmutableList.of(Pair.of(0, new LongJumpMidJump(TIME_BETWEEN_LONG_JUMPS, SoundEvents.GOAT_STEP)), Pair.of(1, new LongJumpToRandomPos(TIME_BETWEEN_LONG_JUMPS, 5, 5, 1.5F, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_LONG_JUMP : SoundEvents.GOAT_LONG_JUMP))), ImmutableSet.of(Pair.of(MemoryModuleType.TEMPTING_PLAYER, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryStatus.VALUE_ABSENT)));
+      // MagmaCube - decompile error
+      brain.addActivityWithConditions(Activity.LONG_JUMP, ImmutableList.of(Pair.of(0, new LongJumpMidJump(TIME_BETWEEN_LONG_JUMPS, SoundEvents.GOAT_STEP)), Pair.of(1, new LongJumpToRandomPos<>(TIME_BETWEEN_LONG_JUMPS, 5, 5, 1.5F, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_LONG_JUMP : SoundEvents.GOAT_LONG_JUMP))), ImmutableSet.of(Pair.of(MemoryModuleType.TEMPTING_PLAYER, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryStatus.VALUE_ABSENT)));
    }
 
    private static void initRamActivity(Brain<Goat> brain) {
-      brain.addActivityWithConditions(Activity.RAM, ImmutableList.of(Pair.of(0, new RamTarget((goat) -> goat.isScreamingGoat() ? TIME_BETWEEN_RAMS_SCREAMER : TIME_BETWEEN_RAMS, RAM_TARGET_CONDITIONS, (goat) -> goat.isBaby() ? 1 : 2, 3.0F, (goat) -> goat.isBaby() ? 1.0D : 2.5D, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_RAM_IMPACT : SoundEvents.GOAT_RAM_IMPACT)), Pair.of(1, new PrepareRamNearestTarget((goat) -> goat.isScreamingGoat() ? TIME_BETWEEN_RAMS_SCREAMER.getMinValue() : TIME_BETWEEN_RAMS.getMinValue(), 4, 7, 1.25F, RAM_TARGET_CONDITIONS, 20, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_PREPARE_RAM : SoundEvents.GOAT_PREPARE_RAM))), ImmutableSet.of(Pair.of(MemoryModuleType.TEMPTING_PLAYER, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.RAM_COOLDOWN_TICKS, MemoryStatus.VALUE_ABSENT)));
+      // MagmaCube - decompile error
+      brain.addActivityWithConditions(Activity.RAM, ImmutableList.of(Pair.of(0, new RamTarget<>((goat) -> goat.isScreamingGoat() ? TIME_BETWEEN_RAMS_SCREAMER : TIME_BETWEEN_RAMS, RAM_TARGET_CONDITIONS, (goat) -> goat.isBaby() ? 1 : 2, 3.0F, (goat) -> goat.isBaby() ? 1.0D : 2.5D, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_RAM_IMPACT : SoundEvents.GOAT_RAM_IMPACT)), Pair.of(1, new PrepareRamNearestTarget<>((goat) -> goat.isScreamingGoat() ? TIME_BETWEEN_RAMS_SCREAMER.getMinValue() : TIME_BETWEEN_RAMS.getMinValue(), 4, 7, 1.25F, RAM_TARGET_CONDITIONS, 20, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_PREPARE_RAM : SoundEvents.GOAT_PREPARE_RAM))), ImmutableSet.of(Pair.of(MemoryModuleType.TEMPTING_PLAYER, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.RAM_COOLDOWN_TICKS, MemoryStatus.VALUE_ABSENT)));
    }
 
    public static void updateActivity(Goat goat) {
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 62cfa22a75bc5e5700779bd6ebda14c8a7203fc0..1c56f4e52bdd3a848fe351b661fef9935c9007c8 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -472,11 +472,11 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
    }
 
    public int getAlternativeTarget(int i) {
-      return this.entityData.get((EntityDataAccessor)DATA_TARGETS.get(i));
+      return this.entityData.get(DATA_TARGETS.get(i)); // MagmaCube - decompile error
    }
 
    public void setAlternativeTarget(int i, int i2) {
-      this.entityData.set((EntityDataAccessor)DATA_TARGETS.get(i), i2);
+      this.entityData.set(DATA_TARGETS.get(i), i2); // MagmaCube - decompile error
    }
 
    public boolean isPowered() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Drowned.java b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
index 900c81295470d7363d122fb9276f477858ea9f02..461a081256ae5062f8e23043960edca070b26d66 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Drowned.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
@@ -77,7 +77,7 @@ public class Drowned extends Zombie implements RangedAttackMob {
       this.goalSelector.addGoal(6, new Drowned.DrownedSwimUpGoal(this, 1.0D, this.level.getSeaLevel()));
       this.goalSelector.addGoal(7, new RandomStrollGoal(this, 1.0D));
       this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, Drowned.class)).setAlertOthers(ZombifiedPiglin.class));
-      this.targetSelector.addGoal(2, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, this::okTarget));
+      this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::okTarget)); // MagmaCube - decompile error
       this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, AbstractVillager.class, false));
       this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, IronGolem.class, true));
       this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, Axolotl.class, true, false));
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ghast.java b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
index 61c5f6006f65db94db4507f492a74cd514d08172..028aaf7ff6c05bdcc909b1b058f90913fa3f7744 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ghast.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
@@ -46,7 +46,7 @@ public class Ghast extends FlyingMob implements Enemy {
       this.goalSelector.addGoal(5, new Ghast.RandomFloatAroundGoal(this));
       this.goalSelector.addGoal(7, new Ghast.GhastLookGoal(this));
       this.goalSelector.addGoal(7, new Ghast.GhastShootFireballGoal(this));
-      this.targetSelector.addGoal(1, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, (livingEntity) -> Math.abs(livingEntity.getY() - this.getY()) <= 4.0D));
+      this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, (livingEntity) -> Math.abs(livingEntity.getY() - this.getY()) <= 4.0D)); // MagmaCube - decompile error
    }
 
    public boolean isCharging() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index e7307d857127e01935dcbbb4fe740470a45804b5..cae07ccf395f73cd7d15eb4612cde70f1e772ecc 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -218,7 +218,7 @@ public class Phantom extends FlyingMob implements Enemy {
             this.nextScanTick = 60;
             List<Player> list = Phantom.this.level.getNearbyPlayers(this.attackTargeting, Phantom.this, Phantom.this.getBoundingBox().inflate(16.0D, 64.0D, 16.0D));
             if (!list.isEmpty()) {
-               list.sort(Comparator.comparing(Entity::getY).reversed());
+               list.sort(Comparator.<Entity, Double>comparing(Entity::getY).reversed()); // MagmaCube - decompile error
 
                for(Player player : list) {
                   if (Phantom.this.canAttack(player, TargetingConditions.DEFAULT)) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index bb40edd352e8e786e4345711e48e584da37c9267..2a3385d4637b883214f6193b4d75d28b08a28af6 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -64,8 +64,8 @@ public class Slime extends Mob implements Enemy {
       this.goalSelector.addGoal(2, new Slime.SlimeAttackGoal(this));
       this.goalSelector.addGoal(3, new Slime.SlimeRandomDirectionGoal(this));
       this.goalSelector.addGoal(5, new Slime.SlimeKeepOnJumpingGoal(this));
-      this.targetSelector.addGoal(1, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, (livingEntity) -> Math.abs(livingEntity.getY() - this.getY()) <= 4.0D));
-      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal(this, IronGolem.class, true));
+      this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, (livingEntity) -> Math.abs(livingEntity.getY() - this.getY()) <= 4.0D)); // MagmaCube - decompile error
+      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true)); // MagmaCube - decompile error
    }
 
    protected void defineSynchedData() {
@@ -171,7 +171,7 @@ public class Slime extends Mob implements Enemy {
    }
 
    public EntityType<? extends Slime> getType() {
-      return super.getType();
+      return (EntityType<? extends Slime>) super.getType(); // MagmaCube - decompile error
    }
 
    public void remove(Entity.RemovalReason removalReason) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
index 21be3d0a2d8e62752b6f3e3ec0c5d9b884fc7c03..0bebf488755f3c22ce7b0817b5a85b6bc678b807 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
@@ -88,15 +88,15 @@ public class Zoglin extends Monster implements Enemy, HoglinBase {
    }
 
    private static void initIdleActivity(Brain<Zoglin> brain) {
-      brain.addActivity(Activity.IDLE, 10, ImmutableList.of(new StartAttacking(Zoglin::findNearestValidAttackTarget), new RunSometimes<>(new SetEntityLookTarget(8.0F), UniformInt.of(30, 60)), new RunOne(ImmutableList.of(Pair.of(new RandomStroll(0.4F), 2), Pair.of(new SetWalkTargetFromLookTarget(0.4F, 3), 2), Pair.of(new DoNothing(30, 60), 1)))));
+      brain.addActivity(Activity.IDLE, 10, ImmutableList.of(new StartAttacking<>(Zoglin::findNearestValidAttackTarget), new RunSometimes<>(new SetEntityLookTarget(8.0F), UniformInt.of(30, 60)), new RunOne<>(ImmutableList.of(Pair.of(new RandomStroll(0.4F), 2), Pair.of(new SetWalkTargetFromLookTarget(0.4F, 3), 2), Pair.of(new DoNothing(30, 60), 1)))));
    }
 
    private static void initFightActivity(Brain<Zoglin> brain) {
-      brain.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0F), new RunIf<>(Zoglin::isAdult, new MeleeAttack(40)), new RunIf<>(Zoglin::isBaby, new MeleeAttack(15)), new StopAttackingIfTargetInvalid()), MemoryModuleType.ATTACK_TARGET);
+      brain.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0F), new RunIf<>(Zoglin::isAdult, new MeleeAttack(40)), new RunIf<>(Zoglin::isBaby, new MeleeAttack(15)), new StopAttackingIfTargetInvalid<>()), MemoryModuleType.ATTACK_TARGET);
    }
 
    private Optional<? extends LivingEntity> findNearestValidAttackTarget() {
-      return ((List)this.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).orElse(ImmutableList.of())).stream().filter(this::isTargetable).findFirst();
+      return this.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).orElse(ImmutableList.of()).stream().filter(this::isTargetable).findFirst();
    }
 
    private boolean isTargetable(LivingEntity livingEntity) {
@@ -173,7 +173,7 @@ public class Zoglin extends Monster implements Enemy, HoglinBase {
    }
 
    public Brain<Zoglin> getBrain() {
-      return super.getBrain();
+      return (Brain<Zoglin>) super.getBrain();
    }
 
    protected void updateActivity() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
index a87bb5c2048fa87db925048c7835e7712bae5426..1825d0ff3cd973902808745c0149b698428e59c7 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
@@ -67,7 +67,7 @@ public class ZombifiedPiglin extends Zombie implements NeutralMob {
       this.goalSelector.addGoal(2, new ZombieAttackGoal(this, 1.0D, false));
       this.goalSelector.addGoal(7, new WaterAvoidingRandomStrollGoal(this, 1.0D));
       this.targetSelector.addGoal(1, (new HurtByTargetGoal(this)).setAlertOthers());
-      this.targetSelector.addGoal(2, new NearestAttackableTargetGoal(this, Player.class, 10, true, false, this::isAngryAt));
+      this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt)); // MagmaCube - decompile error
       this.targetSelector.addGoal(3, new ResetUniversalAngerTargetGoal<>(this, true));
    }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index 847a077885f078b08ba2150051afc4d95443d2be..bb619dbf291b0ddd3bb40c972c61bcc8ede99253 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -60,7 +60,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
    private int timeInOverworld;
    private boolean cannotBeHunted;
    protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Hoglin>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ADULT, SensorType.HOGLIN_SPECIFIC_SENSOR);
-   protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED});
+   protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED});
 
    public Hoglin(EntityType<? extends Hoglin> entityType, Level level) {
       super(entityType, level);
@@ -116,7 +116,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
    }
 
    public Brain<Hoglin> getBrain() {
-      return super.getBrain();
+      return (Brain<Hoglin>) super.getBrain();
    }
 
    protected void customServerAiStep() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/HoglinAi.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/HoglinAi.java
index 49129b2c323bffb3369eea7c6bed49f17a2bd0a8..57600521e79724cda3b1395ad2ea3391eb6396c6 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/HoglinAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/HoglinAi.java
@@ -70,15 +70,15 @@ public class HoglinAi {
    }
 
    private static void initIdleActivity(Brain<Hoglin> brain) {
-      brain.addActivity(Activity.IDLE, 10, ImmutableList.of(new BecomePassiveIfMemoryPresent(MemoryModuleType.NEAREST_REPELLENT, 200), new AnimalMakeLove(EntityType.HOGLIN, 0.6F), SetWalkTargetAwayFrom.pos(MemoryModuleType.NEAREST_REPELLENT, 1.0F, 8, true), new StartAttacking(HoglinAi::findNearestValidAttackTarget), new RunIf<>(Hoglin::isAdult, SetWalkTargetAwayFrom.entity(MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, 0.4F, 8, false)), new RunSometimes<>(new SetEntityLookTarget(8.0F), UniformInt.of(30, 60)), new BabyFollowAdult(ADULT_FOLLOW_RANGE, 0.6F), createIdleMovementBehaviors()));
+      brain.addActivity(Activity.IDLE, 10, ImmutableList.of(new BecomePassiveIfMemoryPresent(MemoryModuleType.NEAREST_REPELLENT, 200), new AnimalMakeLove(EntityType.HOGLIN, 0.6F), SetWalkTargetAwayFrom.pos(MemoryModuleType.NEAREST_REPELLENT, 1.0F, 8, true), new StartAttacking<>(HoglinAi::findNearestValidAttackTarget), new RunIf<>(Hoglin::isAdult, SetWalkTargetAwayFrom.entity(MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, 0.4F, 8, false)), new RunSometimes<>(new SetEntityLookTarget(8.0F), UniformInt.of(30, 60)), new BabyFollowAdult<>(ADULT_FOLLOW_RANGE, 0.6F), createIdleMovementBehaviors())); // MagmaCube - decompile error
    }
 
    private static void initFightActivity(Brain<Hoglin> brain) {
-      brain.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(new BecomePassiveIfMemoryPresent(MemoryModuleType.NEAREST_REPELLENT, 200), new AnimalMakeLove(EntityType.HOGLIN, 0.6F), new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0F), new RunIf<>(Hoglin::isAdult, new MeleeAttack(40)), new RunIf<>(AgeableMob::isBaby, new MeleeAttack(15)), new StopAttackingIfTargetInvalid(), new EraseMemoryIf(HoglinAi::isBreeding, MemoryModuleType.ATTACK_TARGET)), MemoryModuleType.ATTACK_TARGET);
+      brain.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(new BecomePassiveIfMemoryPresent(MemoryModuleType.NEAREST_REPELLENT, 200), new AnimalMakeLove(EntityType.HOGLIN, 0.6F), new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0F), new RunIf<>(Hoglin::isAdult, new MeleeAttack(40)), new RunIf<>(AgeableMob::isBaby, new MeleeAttack(15)), new StopAttackingIfTargetInvalid<>(), new EraseMemoryIf<>(HoglinAi::isBreeding, MemoryModuleType.ATTACK_TARGET)), MemoryModuleType.ATTACK_TARGET); // MagmaCube - decompile error
    }
 
    private static void initRetreatActivity(Brain<Hoglin> brain) {
-      brain.addActivityAndRemoveMemoryWhenStopped(Activity.AVOID, 10, ImmutableList.of(SetWalkTargetAwayFrom.entity(MemoryModuleType.AVOID_TARGET, 1.3F, 15, false), createIdleMovementBehaviors(), new RunSometimes<>(new SetEntityLookTarget(8.0F), UniformInt.of(30, 60)), new EraseMemoryIf(HoglinAi::wantsToStopFleeing, MemoryModuleType.AVOID_TARGET)), MemoryModuleType.AVOID_TARGET);
+      brain.addActivityAndRemoveMemoryWhenStopped(Activity.AVOID, 10, ImmutableList.of(SetWalkTargetAwayFrom.entity(MemoryModuleType.AVOID_TARGET, 1.3F, 15, false), createIdleMovementBehaviors(), new RunSometimes<>(new SetEntityLookTarget(8.0F), UniformInt.of(30, 60)), new EraseMemoryIf<>(HoglinAi::wantsToStopFleeing, MemoryModuleType.AVOID_TARGET)), MemoryModuleType.AVOID_TARGET); // MagmaCube - decompile error
    }
 
    private static RunOne<Hoglin> createIdleMovementBehaviors() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index e12e53254ab92978a5f055cf21ee01b443540206..44681e25de1fbc26dafe238ca434e5ef3fee0c77 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -191,7 +191,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
    }
 
    public Brain<Piglin> getBrain() {
-      return super.getBrain();
+      return (Brain<Piglin>) super.getBrain(); // MagmaCube - decompile error
    }
 
    public InteractionResult mobInteract(Player player, InteractionHand interactionHand) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
index ac0e167c2924521e9461e7b174ae13bbbc86de8d..b2f2fb1a2de54f4a7b3c8fbf554127210baf2f47 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
@@ -128,31 +128,31 @@ public class PiglinAi {
    }
 
    private static void initCoreActivity(Brain<Piglin> brain) {
-      brain.addActivity(Activity.CORE, 0, ImmutableList.of(new LookAtTargetSink(45, 90), new MoveToTargetSink(), new InteractWithDoor(), babyAvoidNemesis(), avoidZombified(), new StopHoldingItemIfNoLongerAdmiring(), new StartAdmiringItemIfSeen(120), new StartCelebratingIfTargetDead(300, PiglinAi::wantsToDance), new StopBeingAngryIfTargetDead()));
+      brain.addActivity(Activity.CORE, 0, ImmutableList.of(new LookAtTargetSink(45, 90), new MoveToTargetSink(), new InteractWithDoor(), babyAvoidNemesis(), avoidZombified(), new StopHoldingItemIfNoLongerAdmiring<>(), new StartAdmiringItemIfSeen<>(120), new StartCelebratingIfTargetDead(300, PiglinAi::wantsToDance), new StopBeingAngryIfTargetDead<>())); // MagmaCube - decompile error
    }
 
    private static void initIdleActivity(Brain<Piglin> brain) {
-      brain.addActivity(Activity.IDLE, 10, ImmutableList.of(new SetEntityLookTarget(PiglinAi::isPlayerHoldingLovedItem, 14.0F), new StartAttacking(AbstractPiglin::isAdult, PiglinAi::findNearestValidAttackTarget), new RunIf(Piglin::canHunt, new StartHuntingHoglin()), avoidRepellent(), babySometimesRideBabyHoglin(), createIdleLookBehaviors(), createIdleMovementBehaviors(), new SetLookAndInteract(EntityType.PLAYER, 4)));
+      brain.addActivity(Activity.IDLE, 10, ImmutableList.of(new SetEntityLookTarget(PiglinAi::isPlayerHoldingLovedItem, 14.0F), new StartAttacking<>(AbstractPiglin::isAdult, PiglinAi::findNearestValidAttackTarget), new RunIf<>(Piglin::canHunt, new StartHuntingHoglin<>()), avoidRepellent(), babySometimesRideBabyHoglin(), createIdleLookBehaviors(), createIdleMovementBehaviors(), new SetLookAndInteract(EntityType.PLAYER, 4))); // MagmaCube - decompile error
    }
 
    private static void initFightActivity(Piglin piglin, Brain<Piglin> brain) {
-      brain.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(new StopAttackingIfTargetInvalid((Predicate<LivingEntity>)((livingEntity) -> !isNearestValidAttackTarget(piglin, livingEntity))), new RunIf(PiglinAi::hasCrossbow, new BackUpIfTooClose(5, 0.75F)), new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0F), new MeleeAttack(20), new CrossbowAttack(), new RememberIfHoglinWasKilled(), new EraseMemoryIf(PiglinAi::isNearZombified, MemoryModuleType.ATTACK_TARGET)), MemoryModuleType.ATTACK_TARGET);
+      brain.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(new StopAttackingIfTargetInvalid<>((Predicate<LivingEntity>)((livingEntity) -> !isNearestValidAttackTarget(piglin, livingEntity))), new RunIf<>(PiglinAi::hasCrossbow, new BackUpIfTooClose<>(5, 0.75F)), new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0F), new MeleeAttack(20), new CrossbowAttack<>(), new RememberIfHoglinWasKilled<>(), new EraseMemoryIf<>(PiglinAi::isNearZombified, MemoryModuleType.ATTACK_TARGET)), MemoryModuleType.ATTACK_TARGET); // MagmaCube - decompile error
    }
 
    private static void initCelebrateActivity(Brain<Piglin> brain) {
-      brain.addActivityAndRemoveMemoryWhenStopped(Activity.CELEBRATE, 10, ImmutableList.of(avoidRepellent(), new SetEntityLookTarget(PiglinAi::isPlayerHoldingLovedItem, 14.0F), new StartAttacking(AbstractPiglin::isAdult, PiglinAi::findNearestValidAttackTarget), new RunIf((Predicate)((piglin) -> !piglin.isDancing()), new GoToCelebrateLocation(2, 1.0F)), new RunIf(Piglin::isDancing, new GoToCelebrateLocation(4, 0.6F)), new RunOne(ImmutableList.of(Pair.of(new SetEntityLookTarget(EntityType.PIGLIN, 8.0F), 1), Pair.of(new RandomStroll(0.6F, 2, 1), 1), Pair.of(new DoNothing(10, 20), 1)))), MemoryModuleType.CELEBRATE_LOCATION);
+      brain.addActivityAndRemoveMemoryWhenStopped(Activity.CELEBRATE, 10, ImmutableList.of(avoidRepellent(), new SetEntityLookTarget(PiglinAi::isPlayerHoldingLovedItem, 14.0F), new StartAttacking<>(AbstractPiglin::isAdult, PiglinAi::findNearestValidAttackTarget), new RunIf<>((piglin) -> !piglin.isDancing(), new GoToCelebrateLocation<>(2, 1.0F)), new RunIf<>(Piglin::isDancing, new GoToCelebrateLocation<>(4, 0.6F)), new RunOne<>(ImmutableList.of(Pair.of(new SetEntityLookTarget(EntityType.PIGLIN, 8.0F), 1), Pair.of(new RandomStroll(0.6F, 2, 1), 1), Pair.of(new DoNothing(10, 20), 1)))), MemoryModuleType.CELEBRATE_LOCATION); // MagmaCube - decompile error
    }
 
    private static void initAdmireItemActivity(Brain<Piglin> brain) {
-      brain.addActivityAndRemoveMemoryWhenStopped(Activity.ADMIRE_ITEM, 10, ImmutableList.of(new GoToWantedItem(PiglinAi::isNotHoldingLovedItemInOffHand, 1.0F, true, 9), new StopAdmiringIfItemTooFarAway(9), new StopAdmiringIfTiredOfTryingToReachItem(200, 200)), MemoryModuleType.ADMIRING_ITEM);
+      brain.addActivityAndRemoveMemoryWhenStopped(Activity.ADMIRE_ITEM, 10, ImmutableList.of(new GoToWantedItem<>(PiglinAi::isNotHoldingLovedItemInOffHand, 1.0F, true, 9), new StopAdmiringIfItemTooFarAway<>(9), new StopAdmiringIfTiredOfTryingToReachItem<>(200, 200)), MemoryModuleType.ADMIRING_ITEM); // MagmaCube - decompile error
    }
 
    private static void initRetreatActivity(Brain<Piglin> brain) {
-      brain.addActivityAndRemoveMemoryWhenStopped(Activity.AVOID, 10, ImmutableList.of(SetWalkTargetAwayFrom.entity(MemoryModuleType.AVOID_TARGET, 1.0F, 12, true), createIdleLookBehaviors(), createIdleMovementBehaviors(), new EraseMemoryIf(PiglinAi::wantsToStopFleeing, MemoryModuleType.AVOID_TARGET)), MemoryModuleType.AVOID_TARGET);
+      brain.addActivityAndRemoveMemoryWhenStopped(Activity.AVOID, 10, ImmutableList.of(SetWalkTargetAwayFrom.entity(MemoryModuleType.AVOID_TARGET, 1.0F, 12, true), createIdleLookBehaviors(), createIdleMovementBehaviors(), new EraseMemoryIf<>(PiglinAi::wantsToStopFleeing, MemoryModuleType.AVOID_TARGET)), MemoryModuleType.AVOID_TARGET); // MagmaCube - decompile error
    }
 
    private static void initRideHoglinActivity(Brain<Piglin> brain) {
-      brain.addActivityAndRemoveMemoryWhenStopped(Activity.RIDE, 10, ImmutableList.of(new Mount(0.8F), new SetEntityLookTarget(PiglinAi::isPlayerHoldingLovedItem, 8.0F), new RunIf<>(Entity::isPassenger, createIdleLookBehaviors()), new DismountOrSkipMounting(8, PiglinAi::wantsToStopRiding)), MemoryModuleType.RIDE_TARGET);
+      brain.addActivityAndRemoveMemoryWhenStopped(Activity.RIDE, 10, ImmutableList.of(new Mount<>(0.8F), new SetEntityLookTarget(PiglinAi::isPlayerHoldingLovedItem, 8.0F), new RunIf<>(Entity::isPassenger, createIdleLookBehaviors()), new DismountOrSkipMounting<>(8, PiglinAi::wantsToStopRiding)), MemoryModuleType.RIDE_TARGET); // MagmaCube - decompile error
    }
 
    private static RunOne<Piglin> createIdleLookBehaviors() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
index 124933e7d03240171dcd0cfa89fa036a2591eb65..5401e00ca5515d3e00b7565f4d575462a5140502 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
@@ -64,7 +64,7 @@ public class PiglinBrute extends AbstractPiglin {
    }
 
    public Brain<PiglinBrute> getBrain() {
-      return super.getBrain();
+      return (Brain<PiglinBrute>) super.getBrain(); // MagmaCube - decompile error
    }
 
    public boolean canHunt() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBruteAi.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBruteAi.java
index 129d6599ff4c8788a4692819a35de943bcb906ce..30119b93907906cb25b0cb28855df2385d9c1b3b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBruteAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBruteAi.java
@@ -58,15 +58,15 @@ public class PiglinBruteAi {
    }
 
    private static void initCoreActivity(PiglinBrute piglinBrute, Brain<PiglinBrute> brain) {
-      brain.addActivity(Activity.CORE, 0, ImmutableList.of(new LookAtTargetSink(45, 90), new MoveToTargetSink(), new InteractWithDoor(), new StopBeingAngryIfTargetDead()));
+      brain.addActivity(Activity.CORE, 0, ImmutableList.of(new LookAtTargetSink(45, 90), new MoveToTargetSink(), new InteractWithDoor(), new StopBeingAngryIfTargetDead<>())); // MagmaCube - decompile error
    }
 
    private static void initIdleActivity(PiglinBrute piglinBrute, Brain<PiglinBrute> brain) {
-      brain.addActivity(Activity.IDLE, 10, ImmutableList.of(new StartAttacking(PiglinBruteAi::findNearestValidAttackTarget), createIdleLookBehaviors(), createIdleMovementBehaviors(), new SetLookAndInteract(EntityType.PLAYER, 4)));
+      brain.addActivity(Activity.IDLE, 10, ImmutableList.of(new StartAttacking<>(PiglinBruteAi::findNearestValidAttackTarget), createIdleLookBehaviors(), createIdleMovementBehaviors(), new SetLookAndInteract(EntityType.PLAYER, 4))); // MagmaCube - decompile error
    }
 
    private static void initFightActivity(PiglinBrute piglinBrute, Brain<PiglinBrute> brain) {
-      brain.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(new StopAttackingIfTargetInvalid((Predicate<LivingEntity>)((livingEntity) -> !isNearestValidAttackTarget(piglinBrute, livingEntity))), new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0F), new MeleeAttack(20)), MemoryModuleType.ATTACK_TARGET);
+      brain.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(new StopAttackingIfTargetInvalid<>((Predicate<LivingEntity>)((livingEntity) -> !isNearestValidAttackTarget(piglinBrute, livingEntity))), new SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0F), new MeleeAttack(20)), MemoryModuleType.ATTACK_TARGET); // MagmaCube - decompile error
    }
 
    private static RunOne<PiglinBrute> createIdleLookBehaviors() {
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 46b5a4eb2add47dc45a5da436c99ce3350d6a2a1..e4b192121fdb51fe6c5545ad3745f408642b7343 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -116,7 +116,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
    private boolean assignProfessionWhenSpawned;
    private static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.WALK_TARGET, new MemoryModuleType[]{MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, MemoryModuleType.PATH, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.LAST_SLEPT, MemoryModuleType.LAST_WOKEN, MemoryModuleType.LAST_WORKED_AT_POI, MemoryModuleType.GOLEM_DETECTED_RECENTLY});
    private static final ImmutableList<SensorType<? extends Sensor<? super Villager>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_BED, SensorType.HURT_BY, SensorType.VILLAGER_HOSTILES, SensorType.VILLAGER_BABIES, SensorType.SECONDARY_POIS, SensorType.GOLEM_DETECTED);
-   public static final Map<MemoryModuleType<GlobalPos>, BiPredicate<Villager, PoiType>> POI_MEMORIES = ImmutableMap.of(MemoryModuleType.HOME, (BiPredicate)(villager, poiType) -> poiType == PoiType.HOME, MemoryModuleType.JOB_SITE, (BiPredicate)(villager, poiType) -> villager.getVillagerData().getProfession().getJobPoiType() == poiType, MemoryModuleType.POTENTIAL_JOB_SITE, (BiPredicate)(villager, poiType) -> PoiType.ALL_JOBS.test(poiType), MemoryModuleType.MEETING_POINT, (BiPredicate)(villager, poiType) -> poiType == PoiType.MEETING);
+   public static final Map<MemoryModuleType<GlobalPos>, BiPredicate<Villager, PoiType>> POI_MEMORIES = ImmutableMap.of(MemoryModuleType.HOME, (villager, poiType) -> poiType == PoiType.HOME, MemoryModuleType.JOB_SITE, (villager, poiType) -> villager.getVillagerData().getProfession().getJobPoiType() == poiType, MemoryModuleType.POTENTIAL_JOB_SITE, (villager, poiType) -> PoiType.ALL_JOBS.test(poiType), MemoryModuleType.MEETING_POINT, (villager, poiType) -> poiType == PoiType.MEETING); // MagmaCube - decompile error
 
    public Villager(EntityType<? extends Villager> entityType, Level level) {
       this(entityType, level, VillagerType.PLAINS);
@@ -131,7 +131,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
    }
 
    public Brain<Villager> getBrain() {
-      return super.getBrain();
+      return (Brain<Villager>) super.getBrain(); // MagmaCube - decompile error
    }
 
    protected Brain.Provider<Villager> brainProvider() {
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
index 9ef4930086311377bda7cb3ca67c9fcbe2ccecaa..a195e8700dfab3babd88f685d2885540ab7b6ac0 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
@@ -61,10 +61,12 @@ public class VillagerTrades {
    private static final float HIGH_TIER_PRICE_MULTIPLIER = 0.2F;
    public static final Map<VillagerProfession, Int2ObjectMap<VillagerTrades.ItemListing[]>> TRADES = Util.make(Maps.newHashMap(), (hashMap) -> {
       hashMap.put(VillagerProfession.FARMER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHEAT, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.POTATO, 26, 16, 2), new VillagerTrades.EmeraldForItems(Items.CARROT, 22, 16, 2), new VillagerTrades.EmeraldForItems(Items.BEETROOT, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.BREAD, 1, 6, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.PUMPKIN, 6, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN_PIE, 1, 4, 5), new VillagerTrades.ItemsForEmeralds(Items.APPLE, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.COOKIE, 3, 18, 10), new VillagerTrades.EmeraldForItems(Blocks.MELON, 4, 12, 20)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Blocks.CAKE, 1, 1, 12, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.NIGHT_VISION, 100, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.JUMP, 160, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.WEAKNESS, 140, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.BLINDNESS, 120, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.POISON, 280, 15), new VillagerTrades.SuspisciousStewForEmerald(MobEffects.SATURATION, 7, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GOLDEN_CARROT, 3, 3, 30), new VillagerTrades.ItemsForEmeralds(Items.GLISTERING_MELON_SLICE, 4, 3, 30)})));
-      hashMap.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, ImmutableMap.builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
+      // MagmaCube - decompile error
+      hashMap.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, (Map) ImmutableMap.builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
       hashMap.put(VillagerProfession.SHEPHERD, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.WHITE_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BROWN_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BLACK_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.GRAY_WOOL, 18, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.SHEARS, 2, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHITE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.GRAY_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.BLACK_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIGHT_BLUE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIME_DYE, 12, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_CARPET, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.YELLOW_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.LIGHT_GRAY_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.ORANGE_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.RED_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.PINK_DYE, 12, 16, 20), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.RED_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_BED, 3, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BROWN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.PURPLE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.BLUE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.GREEN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.MAGENTA_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.CYAN_DYE, 12, 16, 30), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 12, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.PAINTING, 2, 3, 30)})));
       hashMap.put(VillagerProfession.FLETCHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STICK, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.ARROW, 1, 16, 1), new VillagerTrades.ItemsAndEmeraldsToItems(Blocks.GRAVEL, 10, Items.FLINT, 10, 12, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FLINT, 26, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.BOW, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 14, 16, 20), new VillagerTrades.ItemsForEmeralds(Items.CROSSBOW, 3, 1, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FEATHER, 24, 16, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.BOW, 2, 3, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TRIPWIRE_HOOK, 8, 12, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.CROSSBOW, 3, 3, 15), new VillagerTrades.TippedArrowForItemsAndEmeralds(Items.ARROW, 5, Items.TIPPED_ARROW, 5, 2, 12, 30)})));
-      hashMap.put(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
+      // MagmaCube - decompile error
+      hashMap.put(VillagerProfession.LIBRARIAN, toIntMap((ImmutableMap) ImmutableMap.builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
       hashMap.put(VillagerProfession.CARTOGRAPHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.MAP, 7, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GLASS_PANE, 11, 16, 10), new VillagerTrades.TreasureMapForEmeralds(13, StructureFeature.OCEAN_MONUMENT, MapDecoration.Type.MONUMENT, 12, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COMPASS, 1, 12, 20), new VillagerTrades.TreasureMapForEmeralds(14, StructureFeature.WOODLAND_MANSION, MapDecoration.Type.MANSION, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.ITEM_FRAME, 7, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GLOBE_BANNER_PATTER, 8, 1, 30)})));
       hashMap.put(VillagerProfession.CLERIC, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.ROTTEN_FLESH, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.REDSTONE, 1, 2, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GOLD_INGOT, 3, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.LAPIS_LAZULI, 1, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.RABBIT_FOOT, 2, 12, 20), new VillagerTrades.ItemsForEmeralds(Blocks.GLOWSTONE, 4, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SCUTE, 4, 12, 30), new VillagerTrades.EmeraldForItems(Items.GLASS_BOTTLE, 9, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.ENDER_PEARL, 5, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.NETHER_WART, 22, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.EXPERIENCE_BOTTLE, 3, 1, 30)})));
       hashMap.put(VillagerProfession.ARMORER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_LEGGINGS), 7, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_BOOTS), 4, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_HELMET), 5, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_CHESTPLATE), 9, 1, 12, 1, 0.2F)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_BOOTS), 1, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_LEGGINGS), 3, 1, 12, 5, 0.2F)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.LAVA_BUCKET, 1, 12, 20), new VillagerTrades.EmeraldForItems(Items.DIAMOND, 1, 12, 20), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_HELMET), 1, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_CHESTPLATE), 4, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.SHIELD), 5, 1, 12, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_LEGGINGS, 14, 3, 15, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_BOOTS, 8, 3, 15, 0.2F)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_HELMET, 8, 3, 30, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_CHESTPLATE, 16, 3, 30, 0.2F)})));
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 14dce6cdab5a7da73302e3c25e75aa66ec767805..45956375eb259b52952b036d41c2e16e2c19e925 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -122,7 +122,7 @@ public abstract class Player extends LivingEntity {
    public static final float SWIMMING_BB_HEIGHT = 0.6F;
    public static final float DEFAULT_EYE_HEIGHT = 1.62F;
    public static final EntityDimensions STANDING_DIMENSIONS = EntityDimensions.scalable(0.6F, 1.8F);
-   private static final Map<Pose, EntityDimensions> POSES = ImmutableMap.builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
+   private static final Map<Pose, EntityDimensions> POSES = ImmutableMap.<Pose, EntityDimensions>builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build(); // MagmaCube - decompile error
    private static final int FLY_ACHIEVEMENT_SPEED = 25;
    private static final EntityDataAccessor<Float> DATA_PLAYER_ABSORPTION_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.FLOAT);
    private static final EntityDataAccessor<Integer> DATA_SCORE_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.INT);
diff --git a/src/main/java/net/minecraft/world/entity/schedule/ScheduleBuilder.java b/src/main/java/net/minecraft/world/entity/schedule/ScheduleBuilder.java
index 8ef2825c57e01b5d82fb1833ddc72aa8d7b5f128..57e9a9eb815dbdb6a462e357f3af7315b3384de0 100644
--- a/src/main/java/net/minecraft/world/entity/schedule/ScheduleBuilder.java
+++ b/src/main/java/net/minecraft/world/entity/schedule/ScheduleBuilder.java
@@ -19,7 +19,8 @@ public class ScheduleBuilder {
    }
 
    public Schedule build() {
-      ((Set)this.transitions.stream().map(ScheduleBuilder.ActivityTransition::getActivity).collect(Collectors.toSet())).forEach(this.schedule::ensureTimelineExistsFor);
+      // MagmaCube - decompile error
+      (this.transitions.stream().map(ScheduleBuilder.ActivityTransition::getActivity).collect(Collectors.toSet())).forEach(this.schedule::ensureTimelineExistsFor);
       this.transitions.forEach((activityTransition) -> {
          Activity activity = activityTransition.getActivity();
          this.schedule.getAllTimelinesExceptFor(activity).forEach((timeline) -> timeline.addKeyframe(activityTransition.getTime(), 0.0F));
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index ba30243a7c36a1034cffcbd092be0a003236ef25..db43a5f56d07de7701a937cd453a308903df3f9e 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -163,7 +163,7 @@ public abstract class AbstractMinecart extends Entity {
             UnmodifiableIterator d3 = ((ImmutableList)POSE_DISMOUNT_HEIGHTS.get(pose)).iterator();
 
             while(d3.hasNext()) {
-               int i2 = d3.next();
+               int i2 = (int) d3.next(); // MagmaCube - decompile error
 
                for(int[] ints : i) {
                   mutableBlockPos.set(blockPos.getX() + ints[0], blockPos.getY() + i2, blockPos.getZ() + ints[1]);
@@ -180,16 +180,16 @@ public abstract class AbstractMinecart extends Entity {
             }
          }
 
-         double d2 = this.getBoundingBox().maxY;
-         mutableBlockPos.set((double)blockPos.getX(), d2, (double)blockPos.getZ());
+         double d2x = this.getBoundingBox().maxY; // MagmaCube - decompile error
+         mutableBlockPos.set((double)blockPos.getX(), d2x, (double)blockPos.getZ()); // MagmaCube - decompile error
          UnmodifiableIterator var22 = immutableList.iterator();
 
          while(var22.hasNext()) {
             Pose pose2 = (Pose)var22.next();
             double d3 = (double)livingEntity.getDimensions(pose2).height;
-            int i3 = Mth.ceil(d2 - (double)mutableBlockPos.getY() + d3);
+            int i3 = Mth.ceil(d2x - (double)mutableBlockPos.getY() + d3); // MagmaCube - decompile error
             double d4 = DismountHelper.findCeilingFrom(mutableBlockPos, i3, (blockPosx) -> this.level.getBlockState(blockPosx).getCollisionShape(this.level, blockPosx));
-            if (d2 + d3 <= d4) {
+            if (d2x + d3 <= d4) { // MagmaCube - decompile error
                livingEntity.setPose(pose2);
                break;
             }
diff --git a/src/main/java/net/minecraft/world/inventory/DataSlot.java b/src/main/java/net/minecraft/world/inventory/DataSlot.java
index 3308d5a6a5ac1abf206d3289393f2f703bdba38b..f644c898325a15cf50d91dc111b5652e61a0239f 100644
--- a/src/main/java/net/minecraft/world/inventory/DataSlot.java
+++ b/src/main/java/net/minecraft/world/inventory/DataSlot.java
@@ -10,7 +10,7 @@ public abstract class DataSlot {
          }
 
          public void set(int ix) {
-            containerData.set(i, i);
+            containerData.set(i, ix); // MagmaCube - decompile error
          }
       };
    }
@@ -22,7 +22,7 @@ public abstract class DataSlot {
          }
 
          public void set(int ix) {
-            ints[i] = i;
+            ints[i] = ix; // MagmaCube - decompile error
          }
       };
    }
diff --git a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
index 48a92d2d5cfe50cacb52871aad238934c3229e7b..14ac9085732248b5c210b2fe55fea5011edea847 100644
--- a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
@@ -12,7 +12,7 @@ public abstract class RecipeBookMenu<C extends Container> extends AbstractContai
    }
 
    public void handlePlacement(boolean flag, Recipe<?> recipe, ServerPlayer serverPlayer) {
-      (new ServerPlaceRecipe<>(this)).recipeClicked(serverPlayer, recipe, flag);
+      (new ServerPlaceRecipe<>(this)).recipeClicked(serverPlayer, (Recipe) recipe, flag); // MagmaCube - decompile error
    }
 
    public abstract void fillCraftSlotsStackedContents(StackedContents var1);
diff --git a/src/main/java/net/minecraft/world/item/HoneycombItem.java b/src/main/java/net/minecraft/world/item/HoneycombItem.java
index 2252610bc3e334b6b3040d516d358034a4ed8496..a2aacc11c1a728f6597b01c06791315f7a827c7a 100644
--- a/src/main/java/net/minecraft/world/item/HoneycombItem.java
+++ b/src/main/java/net/minecraft/world/item/HoneycombItem.java
@@ -17,7 +17,7 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class HoneycombItem extends Item {
-   public static final Supplier<BiMap<Block, Block>> WAXABLES = Suppliers.memoize(() -> ImmutableBiMap.builder().put(Blocks.COPPER_BLOCK, Blocks.WAXED_COPPER_BLOCK).put(Blocks.EXPOSED_COPPER, Blocks.WAXED_EXPOSED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.WAXED_WEATHERED_COPPER).put(Blocks.OXIDIZED_COPPER, Blocks.WAXED_OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.WAXED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WAXED_EXPOSED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.WAXED_WEATHERED_CUT_COPPER).put(Blocks.OXIDIZED_CUT_COPPER, Blocks.WAXED_OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB).put(Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS).put(Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS).build());
+   public static final Supplier<BiMap<Block, Block>> WAXABLES = Suppliers.memoize(() -> ImmutableBiMap.<Block, Block>builder().put(Blocks.COPPER_BLOCK, Blocks.WAXED_COPPER_BLOCK).put(Blocks.EXPOSED_COPPER, Blocks.WAXED_EXPOSED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.WAXED_WEATHERED_COPPER).put(Blocks.OXIDIZED_COPPER, Blocks.WAXED_OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.WAXED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WAXED_EXPOSED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.WAXED_WEATHERED_CUT_COPPER).put(Blocks.OXIDIZED_CUT_COPPER, Blocks.WAXED_OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB).put(Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS).put(Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS).build());
    public static final Supplier<BiMap<Block, Block>> WAX_OFF_BY_BLOCK = Suppliers.memoize(() -> ((BiMap)WAXABLES.get()).inverse());
 
    public HoneycombItem(Item.Properties properties) {
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index 2848cbc2474f5f69f151cecaf45f464c2817e240..a18d0623a9d3e41354f83123c150af34d2c0a048 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -98,7 +98,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
    }
 
    public Optional<? extends Recipe<?>> byKey(ResourceLocation resourceLocation) {
-      return this.recipes.values().stream().map((map) -> (Recipe)map.get(resourceLocation)).filter(Objects::nonNull).findFirst();
+      return this.recipes.values().stream().map((map) -> map.get(resourceLocation)).filter(Objects::nonNull).findFirst(); // MagmaCube - decompile error
    }
 
    public Collection<Recipe<?>> getRecipes() {
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeSerializer.java b/src/main/java/net/minecraft/world/item/crafting/RecipeSerializer.java
index 76653cdd329591cd44def092a9d3ff7419cb1bbf..0ab2e7a35d693fb1873755f9be3ec585fa1490a7 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeSerializer.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeSerializer.java
@@ -33,6 +33,7 @@ public interface RecipeSerializer<T extends Recipe<?>> {
    T fromNetwork(ResourceLocation var1, FriendlyByteBuf var2);
 
    void toNetwork(FriendlyByteBuf var1, T var2);
+   default void toNetwork(FriendlyByteBuf var1, Object var2) { toNetwork(var1, (T) var2); } // MagmaCube - workaround
 
    static <S extends RecipeSerializer<T>, T extends Recipe<?>> S register(String s, S recipeSerializer) {
       return Registry.register(Registry.RECIPE_SERIALIZER, s, recipeSerializer);
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeType.java b/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
index d7353426afc438c2b03f51722afdeae656674e80..ac6fe829980f49b25f1752c3b85f2bcd8eed798c 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
@@ -24,6 +24,6 @@ public interface RecipeType<T extends Recipe<?>> {
    }
 
    default <C extends Container> Optional<T> tryMatch(Recipe<C> recipe, Level level, C container) {
-      return recipe.matches(container, level) ? Optional.of(recipe) : Optional.empty();
+      return recipe.matches(container, level) ? Optional.of((T) recipe) : Optional.empty(); // MagmaCube - decompile error
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/BlockGetter.java b/src/main/java/net/minecraft/world/level/BlockGetter.java
index 89f56eb3d20bb0f159d4ab7310b323f2f9da98f2..84c622709aee9710d624c363f3e8538651c90450 100644
--- a/src/main/java/net/minecraft/world/level/BlockGetter.java
+++ b/src/main/java/net/minecraft/world/level/BlockGetter.java
@@ -24,7 +24,7 @@ public interface BlockGetter extends LevelHeightAccessor {
 
    default <T extends BlockEntity> Optional<T> getBlockEntity(BlockPos blockPos, BlockEntityType<T> blockEntityType) {
       BlockEntity blockEntity = this.getBlockEntity(blockPos);
-      return blockEntity != null && blockEntity.getType() == blockEntityType ? Optional.of(blockEntity) : Optional.empty();
+      return blockEntity != null && blockEntity.getType() == blockEntityType ? Optional.of((T) blockEntity) : Optional.empty(); // MagmaCube - decompile error
    }
 
    BlockState getBlockState(BlockPos var1);
diff --git a/src/main/java/net/minecraft/world/level/EmptyTickList.java b/src/main/java/net/minecraft/world/level/EmptyTickList.java
index 720320bc38603f767e3a00977dbc909425538559..ee3bae880ea295146adef814da98afcc1ca6518d 100644
--- a/src/main/java/net/minecraft/world/level/EmptyTickList.java
+++ b/src/main/java/net/minecraft/world/level/EmptyTickList.java
@@ -6,7 +6,7 @@ public class EmptyTickList<T> implements TickList<T> {
    private static final EmptyTickList<Object> INSTANCE = new EmptyTickList<>();
 
    public static <T> EmptyTickList<T> empty() {
-      return INSTANCE;
+      return (EmptyTickList<T>) INSTANCE; // MagmaCube - decompile error
    }
 
    public boolean hasScheduledTick(BlockPos blockPos, T object) {
diff --git a/src/main/java/net/minecraft/world/level/GameRules.java b/src/main/java/net/minecraft/world/level/GameRules.java
index dcf72352c5a31202f33c9776729206e4dd7e6e95..8fde9b36c159b2a6107fee86d225bcfdbce3cdab 100644
--- a/src/main/java/net/minecraft/world/level/GameRules.java
+++ b/src/main/java/net/minecraft/world/level/GameRules.java
@@ -124,8 +124,8 @@ public class GameRules {
    }
 
    private static <T extends GameRules.Value<T>> void callVisitorCap(GameRules.GameRuleTypeVisitor gameRuleTypeVisitor, GameRules.Key<?> key, GameRules.Type<?> type) {
-      gameRuleTypeVisitor.visit(key, type);
-      type.callVisitor(gameRuleTypeVisitor, key);
+      gameRuleTypeVisitor.visit((Key) key, type); // MagmaCube - decompile error
+      type.callVisitor(gameRuleTypeVisitor, (Key) key); // MagmaCube - decompile error
    }
 
    public void assignFrom(GameRules gameRules, @Nullable MinecraftServer minecraftServer) {
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index b1361ba237ffc8075da840798b6434e8a14b957a..172f8de15655d37fbc2d22bf5dce4560360bb6e0 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -81,10 +81,11 @@ public final class NaturalSpawner {
          if (mobCategory != MobCategory.MISC) {
             BlockPos blockPos = entity.blockPosition();
             long l = ChunkPos.asLong(SectionPos.blockToSectionCoord(blockPos.getX()), SectionPos.blockToSectionCoord(blockPos.getZ()));
+            Entity finalEntity = entity; // MagmaCube - decompile error
             chunkGetter.query(l, (levelChunk) -> {
-               MobSpawnSettings.MobSpawnCost mobSpawnCost = getRoughBiome(blockPos, levelChunk).getMobSettings().getMobSpawnCost(entity.getType());
+               MobSpawnSettings.MobSpawnCost mobSpawnCost = getRoughBiome(blockPos, levelChunk).getMobSettings().getMobSpawnCost(finalEntity.getType()); // MagmaCube - decompile error
                if (mobSpawnCost != null) {
-                  potentialCalculator.addCharge(entity.blockPosition(), mobSpawnCost.getCharge());
+                  potentialCalculator.addCharge(finalEntity.blockPosition(), mobSpawnCost.getCharge()); // MagmaCube - decompile error
                }
 
                object2IntOpenHashMap.addTo(mobCategory, 1);
diff --git a/src/main/java/net/minecraft/world/level/TickNextTickData.java b/src/main/java/net/minecraft/world/level/TickNextTickData.java
index 33ca065b9abafeb2f1671b06be60d10588731519..f7cf52a42bf58e26d963ee52f52e379a6e517205 100644
--- a/src/main/java/net/minecraft/world/level/TickNextTickData.java
+++ b/src/main/java/net/minecraft/world/level/TickNextTickData.java
@@ -37,7 +37,8 @@ public class TickNextTickData<T> {
    }
 
    public static <T> Comparator<TickNextTickData<T>> createTimeComparator() {
-      return Comparator.comparingLong((tickNextTickData) -> tickNextTickData.triggerTick).thenComparing((tickNextTickData) -> tickNextTickData.priority).thenComparingLong((tickNextTickData) -> tickNextTickData.c);
+      // MagmaCube - decompile error
+      return Comparator.<TickNextTickData<T>>comparingLong((tickNextTickData) -> tickNextTickData.triggerTick).thenComparing((tickNextTickData) -> tickNextTickData.priority).thenComparingLong((tickNextTickData) -> tickNextTickData.c);
    }
 
    public String toString() {
diff --git a/src/main/java/net/minecraft/world/level/biome/Biome.java b/src/main/java/net/minecraft/world/level/biome/Biome.java
index 87184677f37df860b5b32a5038f3f6bcffc7c96a..cf4e0e4c6dd40e027e214d139978d7e5928b7929 100644
--- a/src/main/java/net/minecraft/world/level/biome/Biome.java
+++ b/src/main/java/net/minecraft/world/level/biome/Biome.java
@@ -53,11 +53,11 @@ import org.apache.logging.log4j.Logger;
 
 public final class Biome {
    public static final Logger LOGGER = LogManager.getLogger();
-   public static final Codec<Biome> DIRECT_CODEC;
-   public static final Codec<Biome> NETWORK_CODEC;
+   public static final Codec<Biome> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), Codec.FLOAT.fieldOf("depth").forGetter((biome) -> biome.depth), Codec.FLOAT.fieldOf("scale").forGetter((biome) -> biome.scale), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects), BiomeGenerationSettings.CODEC.forGetter((biome) -> biome.generationSettings), MobSpawnSettings.CODEC.forGetter((biome) -> biome.mobSettings)).apply(instance, Biome::new));
+   public static final Codec<Biome> NETWORK_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), Codec.FLOAT.fieldOf("depth").forGetter((biome) -> biome.depth), Codec.FLOAT.fieldOf("scale").forGetter((biome) -> biome.scale), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects)).apply(instance, (climateSettings, biomeCategory, f, f2, biomeSpecialEffects) -> new Biome(climateSettings, biomeCategory, f, f2, biomeSpecialEffects, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY)));
    public static final Codec<Supplier<Biome>> CODEC = RegistryFileCodec.create(Registry.BIOME_REGISTRY, DIRECT_CODEC);
    public static final Codec<List<Supplier<Biome>>> LIST_CODEC = RegistryFileCodec.homogeneousList(Registry.BIOME_REGISTRY, DIRECT_CODEC);
-   private final Map<Integer, List<StructureFeature<?>>> structuresByStep = (Map)Registry.STRUCTURE_FEATURE.stream().collect(Collectors.groupingBy((structureFeature) -> structureFeature.step().ordinal()));
+   private final Map<Integer, List<StructureFeature<?>>> structuresByStep = Registry.STRUCTURE_FEATURE.stream().collect(Collectors.groupingBy((structureFeature) -> structureFeature.step().ordinal()));
    private static final PerlinSimplexNoise TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(1234L), ImmutableList.of(0));
    static final PerlinSimplexNoise FROZEN_TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(3456L), ImmutableList.of(-2, -1, 0));
    public static final PerlinSimplexNoise BIOME_INFO_NOISE = new PerlinSimplexNoise(new WorldgenRandom(2345L), ImmutableList.of(0));
@@ -190,7 +190,7 @@ public final class Biome {
       for(int i2 = 0; i2 < i; ++i2) {
          int i3 = 0;
          if (structureFeatureManager.shouldGenerateFeatures()) {
-            for(StructureFeature<?> structureFeature : (List)this.structuresByStep.getOrDefault(i2, Collections.emptyList())) {
+            for(StructureFeature<?> structureFeature : this.structuresByStep.getOrDefault(i2, Collections.emptyList())) {
                worldgenRandom.setFeatureSeed(l, i3, i2);
                int i4 = SectionPos.blockToSectionCoord(blockPos.getX());
                int i5 = SectionPos.blockToSectionCoord(blockPos.getZ());
@@ -214,8 +214,8 @@ public final class Biome {
          }
 
          if (list.size() > i2) {
-            for(Supplier<ConfiguredFeature<?, ?>> supplier2 : (List)list.get(i2)) {
-               ConfiguredFeature<?, ?> configuredFeature = (ConfiguredFeature)supplier2.get();
+            for(Supplier<ConfiguredFeature<?, ?>> supplier2 : list.get(i2)) {
+               ConfiguredFeature<?, ?> configuredFeature = supplier2.get();
                Supplier<String> supplier3 = () -> (String)registry.getResourceKey(configuredFeature).map(Object::toString).orElseGet(configuredFeature::toString);
                worldgenRandom.setFeatureSeed(l, i3, i2);
 
@@ -324,11 +324,6 @@ public final class Biome {
       return resourceLocation == null ? super.toString() : resourceLocation.toString();
    }
 
-   static {
-      DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), Codec.FLOAT.fieldOf("depth").forGetter((biome) -> biome.depth), Codec.FLOAT.fieldOf("scale").forGetter((biome) -> biome.scale), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects), BiomeGenerationSettings.CODEC.forGetter((biome) -> biome.generationSettings), MobSpawnSettings.CODEC.forGetter((biome) -> biome.mobSettings)).apply(instance, Biome::new));
-      NETWORK_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), Codec.FLOAT.fieldOf("depth").forGetter((biome) -> biome.depth), Codec.FLOAT.fieldOf("scale").forGetter((biome) -> biome.scale), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects)).apply(instance, (climateSettings, biomeCategory, f, f2, biomeSpecialEffects) -> new Biome(climateSettings, biomeCategory, f, f2, biomeSpecialEffects, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY)));
-   }
-
    public static class BiomeBuilder {
       @Nullable
       public Biome.Precipitation precipitation;
diff --git a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
index 6e47f86eea79fffb82379224ea7073bc9cdccc53..f1013355dadd43d34b1a072a363a9a78e20c9dda 100644
--- a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
@@ -26,7 +26,7 @@ import net.minecraft.world.level.levelgen.synth.NormalNoise;
 
 public class MultiNoiseBiomeSource extends BiomeSource {
    private static final MultiNoiseBiomeSource.NoiseParameters DEFAULT_NOISE_PARAMETERS = new MultiNoiseBiomeSource.NoiseParameters(-7, (List<Double>)ImmutableList.of(1.0D, 1.0D));
-   public static final MapCodec<MultiNoiseBiomeSource> DIRECT_CODEC;
+   public static final MapCodec<MultiNoiseBiomeSource> DIRECT_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.LONG.fieldOf("seed").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.seed), RecordCodecBuilder.<Pair<Biome.ClimateParameters, Supplier<Biome>>>create((instancex) -> instancex.group(Biome.ClimateParameters.CODEC.fieldOf("parameters").forGetter(Pair<Biome.ClimateParameters, Supplier<Biome>>::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair<Biome.ClimateParameters, Supplier<Biome>>::getSecond)).apply(instancex, Pair::of)).listOf().fieldOf("biomes").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.parameters), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("temperature_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.temperatureParams), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("humidity_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.humidityParams), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("altitude_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.altitudeParams), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("weirdness_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.weirdnessParams)).apply(instance, MultiNoiseBiomeSource::new));
    public static final Codec<MultiNoiseBiomeSource> CODEC = Codec.mapEither(MultiNoiseBiomeSource.PresetInstance.CODEC, DIRECT_CODEC).xmap((either) -> (MultiNoiseBiomeSource)either.map(MultiNoiseBiomeSource.PresetInstance::biomeSource, Function.identity()), (multiNoiseBiomeSource) -> (Either)multiNoiseBiomeSource.preset().map(Either::left).orElseGet(() -> Either.right(multiNoiseBiomeSource))).codec();
    private final MultiNoiseBiomeSource.NoiseParameters temperatureParams;
    private final MultiNoiseBiomeSource.NoiseParameters humidityParams;
@@ -104,10 +104,6 @@ public class MultiNoiseBiomeSource extends BiomeSource {
       return this.seed == l && this.preset.isPresent() && Objects.equals(((Pair)this.preset.get()).getSecond(), MultiNoiseBiomeSource.Preset.NETHER);
    }
 
-   static {
-      DIRECT_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.LONG.fieldOf("seed").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.seed), RecordCodecBuilder.create((instancex) -> instancex.group(Biome.ClimateParameters.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair::getSecond)).apply(instancex, Pair::of)).listOf().fieldOf("biomes").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.parameters), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("temperature_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.temperatureParams), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("humidity_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.humidityParams), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("altitude_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.altitudeParams), MultiNoiseBiomeSource.NoiseParameters.CODEC.fieldOf("weirdness_noise").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.weirdnessParams)).apply(instance, MultiNoiseBiomeSource::new));
-   }
-
    static class NoiseParameters {
       private final int firstOctave;
       private final DoubleList amplitudes;
@@ -150,7 +146,7 @@ public class MultiNoiseBiomeSource extends BiomeSource {
    }
 
    static final class PresetInstance {
-      public static final MapCodec<MultiNoiseBiomeSource.PresetInstance> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ResourceLocation.CODEC.flatXmap((resourceLocation) -> (DataResult)Optional.ofNullable((MultiNoiseBiomeSource.Preset)MultiNoiseBiomeSource.Preset.BY_NAME.get(resourceLocation)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown preset: " + resourceLocation)), (preset) -> DataResult.success(preset.name)).fieldOf("preset").stable().forGetter(MultiNoiseBiomeSource.PresetInstance::preset), RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter(MultiNoiseBiomeSource.PresetInstance::biomes), Codec.LONG.fieldOf("seed").stable().forGetter(MultiNoiseBiomeSource.PresetInstance::seed)).apply(instance, instance.stable(MultiNoiseBiomeSource.PresetInstance::new)));
+      public static final MapCodec<MultiNoiseBiomeSource.PresetInstance> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ResourceLocation.CODEC.flatXmap((resourceLocation) -> Optional.ofNullable(MultiNoiseBiomeSource.Preset.BY_NAME.get(resourceLocation)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown preset: " + resourceLocation)), (preset) -> DataResult.success(preset.name)).fieldOf("preset").stable().forGetter(MultiNoiseBiomeSource.PresetInstance::preset), RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter(MultiNoiseBiomeSource.PresetInstance::biomes), Codec.LONG.fieldOf("seed").stable().forGetter(MultiNoiseBiomeSource.PresetInstance::seed)).apply(instance, instance.stable(MultiNoiseBiomeSource.PresetInstance::new)));
       private final MultiNoiseBiomeSource.Preset preset;
       private final Registry<Biome> biomes;
       private final long seed;
diff --git a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
index 884cefdb38ba9597a12d2b6351b9b3bd463aad02..7c9f9b787c52532311b743e6a467cea394118329 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
@@ -33,6 +33,6 @@ public abstract class BaseEntityBlock extends Block implements EntityBlock {
 
    @Nullable
    protected static <E extends BlockEntity, A extends BlockEntity> BlockEntityTicker<A> createTickerHelper(BlockEntityType<A> blockEntityType, BlockEntityType<E> blockEntityType2, BlockEntityTicker<? super E> blockEntityTicker) {
-      return blockEntityType2 == blockEntityType ? blockEntityTicker : null;
+      return blockEntityType2 == blockEntityType ? (BlockEntityTicker<A>) blockEntityTicker : null; // MagmaCube - decompile error
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
index bcca628680079a8b6cc0051e8da5fbd4323b89ab..288a432b24c6ee110ceed32a5d83819ef6c26ac5 100644
--- a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
@@ -55,7 +55,7 @@ public class IronBarsBlock extends CrossCollisionBlock {
             return true;
          }
 
-         if (blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction)) && blockState2.getValue((Property)PROPERTY_BY_DIRECTION.get(direction.getOpposite()))) {
+         if (blockState.getValue(PROPERTY_BY_DIRECTION.get(direction)) && blockState2.getValue(PROPERTY_BY_DIRECTION.get(direction.getOpposite()))) { // MagmaCube - decompile error
             return true;
          }
       }
diff --git a/src/main/java/net/minecraft/world/level/block/PipeBlock.java b/src/main/java/net/minecraft/world/level/block/PipeBlock.java
index 1f38a4b05aa780f36f10181165d6d24fd3fc658c..7f6e51b645b03eeb3a56342c9dba15904f52c4c8 100644
--- a/src/main/java/net/minecraft/world/level/block/PipeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PipeBlock.java
@@ -79,7 +79,7 @@ public class PipeBlock extends Block {
       int i = 0;
 
       for(int i2 = 0; i2 < DIRECTIONS.length; ++i2) {
-         if (blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(DIRECTIONS[i2]))) {
+         if (blockState.getValue(PROPERTY_BY_DIRECTION.get(DIRECTIONS[i2]))) { // MagmaCube - decompile error
             i |= 1 << i2;
          }
       }
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index 92dd6f11ec7710900ab5cf64c24d2818c03f78da..3607b334135b84c9033b1d585fa31df59e8d4a01 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -85,7 +85,7 @@ public class RedStoneWireBlock extends Block {
       VoxelShape voxelShape = SHAPE_DOT;
 
       for(Direction direction : Direction.Plane.HORIZONTAL) {
-         RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+         RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction)); // MagmaCube - decompile error
          if (redstoneSide == RedstoneSide.SIDE) {
             voxelShape = Shapes.or(voxelShape, (VoxelShape)SHAPES_FLOOR.get(direction));
          } else if (redstoneSide == RedstoneSide.UP) {
@@ -172,7 +172,7 @@ public class RedStoneWireBlock extends Block {
       BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
 
       for(Direction direction : Direction.Plane.HORIZONTAL) {
-         RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+         RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction)); // MagmaCube - decompile error
          if (redstoneSide != RedstoneSide.NONE && !levelAccessor.getBlockState(mutableBlockPos.setWithOffset(blockPos, direction)).is(this)) {
             mutableBlockPos.move(Direction.DOWN);
             BlockState blockState2 = levelAccessor.getBlockState(mutableBlockPos);
@@ -396,7 +396,7 @@ public class RedStoneWireBlock extends Block {
       int i = blockState.getValue(POWER);
       if (i != 0) {
          for(Direction direction : Direction.Plane.HORIZONTAL) {
-            RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+            RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction)); // MagmaCube - decompile error
             switch(redstoneSide) {
             case UP:
                this.spawnParticlesAlongLine(level, random, blockPos, COLORS[i], direction, Direction.UP, -0.5F, 0.5F);
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
index 7881d20a959f465bfd592b5ac14a8856730d2836..28875a12d9921bd65dfb3ea5d57041b7942ad5e3 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
@@ -8,7 +8,7 @@ import java.util.function.Supplier;
 import net.minecraft.world.level.block.state.BlockState;
 
 public interface WeatheringCopper extends ChangeOverTimeBlock<WeatheringCopper.WeatherState> {
-   Supplier<BiMap<Block, Block>> NEXT_BY_BLOCK = Suppliers.memoize(() -> ImmutableBiMap.builder().put(Blocks.COPPER_BLOCK, Blocks.EXPOSED_COPPER).put(Blocks.EXPOSED_COPPER, Blocks.WEATHERED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.EXPOSED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WEATHERED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.OXIDIZED_CUT_COPPER_STAIRS).build());
+   Supplier<BiMap<Block, Block>> NEXT_BY_BLOCK = Suppliers.memoize(() -> ImmutableBiMap.<Block, Block>builder().put(Blocks.COPPER_BLOCK, Blocks.EXPOSED_COPPER).put(Blocks.EXPOSED_COPPER, Blocks.WEATHERED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.EXPOSED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WEATHERED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.OXIDIZED_CUT_COPPER_STAIRS).build());
    Supplier<BiMap<Block, Block>> PREVIOUS_BY_BLOCK = Suppliers.memoize(() -> ((BiMap)NEXT_BY_BLOCK.get()).inverse());
 
    static Optional<Block> getPrevious(Block block) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
index d74e9dabeceed139236a3082f6a26a653bc945aa..f702524a50a8ec224f0bd7da2a745db7032da1a7 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
@@ -267,12 +267,12 @@ public class StructureBlockEntity extends BlockEntity {
          BlockPos blockPos3 = new BlockPos(blockPos.getX() + 80, this.level.getMaxBuildHeight() - 1, blockPos.getZ() + 80);
          Stream<BlockPos> stream = this.getRelatedCorners(blockPos2, blockPos3);
          return calculateEnclosingBoundingBox(blockPos, stream).filter((boundingBox) -> {
-            int i = boundingBox.maxX() - boundingBox.minX();
+            int ix = boundingBox.maxX() - boundingBox.minX(); // MagmaCube - decompile error
             int i2 = boundingBox.maxY() - boundingBox.minY();
             int i3 = boundingBox.maxZ() - boundingBox.minZ();
-            if (i > 1 && i2 > 1 && i3 > 1) {
+            if (ix > 1 && i2 > 1 && i3 > 1) { // MagmaCube - decompile error
                this.structurePos = new BlockPos(boundingBox.minX() - blockPos.getX() + 1, boundingBox.minY() - blockPos.getY() + 1, boundingBox.minZ() - blockPos.getZ() + 1);
-               this.structureSize = new Vec3i(i - 1, i2 - 1, i3 - 1);
+               this.structureSize = new Vec3i(ix - 1, i2 - 1, i3 - 1); // MagmaCube - decompile error
                this.setChanged();
                BlockState blockState = this.level.getBlockState(blockPos);
                this.level.sendBlockUpdated(blockPos, blockState, blockState, 3);
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
index 9def66c0e52892d17faae6325df5c501a4a8294c..b150064fcb4602f4d0171d6660a8a18de48dd452 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
@@ -34,7 +34,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
    protected StateDefinition(Function<O, S> function, O object, StateDefinition.Factory<O, S> factory, Map<String, Property<?>> map) {
       this.owner = object;
       this.propertiesByName = ImmutableSortedMap.copyOf(map);
-      Supplier<S> supplier = () -> (StateHolder)function.apply(object);
+      Supplier<S> supplier = () -> function.apply(object); // MagmaCube - decompile error
       MapCodec<S> mapCodec = MapCodec.of(Encoder.empty(), Decoder.unit(supplier));
 
       Entry<String, Property<?>> entry;
@@ -47,13 +47,16 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
       List<S> list = Lists.newArrayList();
       Stream<List<Pair<Property<?>, Comparable<?>>>> stream = Stream.of(Collections.emptyList());
 
-      Property<?> property;
-      for(UnmodifiableIterator var11 = this.propertiesByName.values().iterator(); var11.hasNext(); stream = stream.flatMap((listx) -> property.getPossibleValues().stream().map((comparable) -> {
-            List<Pair<Property<?>, Comparable<?>>> list2 = Lists.newArrayList(listx);
-            list2.add(Pair.of(property, comparable));
-            return list2;
-         }))) {
-         property = (Property)var11.next();
+      // MagmaCube start - decompile error
+      for(Property<?> property : this.propertiesByName.values()) {
+         stream = stream.flatMap((p_200999_1_) -> {
+            return property.getPossibleValues().stream().map((p_200998_2_) -> {
+               List<Pair<Property<?>, Comparable<?>>> list1 = Lists.newArrayList(p_200999_1_);
+               list1.add(Pair.of(property, p_200998_2_));
+               return list1;
+            });
+         });
+         // MagmaCube end - decompile error
       }
 
       stream.forEach((list2) -> {
@@ -71,7 +74,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
    }
 
    private static <S extends StateHolder<?, S>, T extends Comparable<T>> MapCodec<S> appendPropertyCodec(MapCodec<S> mapCodec, Supplier<S> supplier, String s, Property<T> property) {
-      return Codec.mapPair(mapCodec, property.valueCodec().fieldOf(s).setPartial(() -> property.value((StateHolder)supplier.get()))).xmap((pair) -> (StateHolder)((StateHolder)pair.getFirst()).setValue(property, ((Property.Value)pair.getSecond()).value()), (stateHolder) -> Pair.of(stateHolder, property.value(stateHolder)));
+      return Codec.mapPair(mapCodec, property.valueCodec().fieldOf(s).setPartial(() -> property.value((StateHolder)supplier.get()))).xmap((pair) -> (pair.getFirst()).setValue(property, (pair.getSecond()).value()), (stateHolder) -> Pair.of(stateHolder, property.value(stateHolder))); // MagmaCube - decompile error
    }
 
    public ImmutableList<S> getPossibleStates() {
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
index 36bd06f4ffbc7f74b372128863168307e5f06707..0d4faa6e67892bc905e11ba45744feb266529222 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
@@ -98,7 +98,7 @@ public abstract class StateHolder<O, S> {
 
    public <T extends Comparable<T>> Optional<T> getOptionalValue(Property<T> property) {
       Comparable<?> comparable = (Comparable)this.values.get(property);
-      return comparable == null ? Optional.empty() : Optional.of((Comparable)property.getValueClass().cast(comparable));
+      return comparable == null ? Optional.empty() : Optional.of(property.getValueClass().cast(comparable));
    }
 
    public <T extends Comparable<T>, V extends T> S setValue(Property<T> property, V comparable) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
index d0c9b8bd5689f0f7db23ea6f4a638c5220d47885..f0b561d1c3d8f9e0f52f8f8dac8dddda1710be43 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
@@ -36,7 +36,7 @@ public class EnumProperty<T extends Enum<T> & StringRepresentable> extends Prope
    }
 
    public Optional<T> getValue(String s) {
-      return Optional.ofNullable((Enum)this.names.get(s));
+      return Optional.ofNullable(this.names.get(s));
    }
 
    public String getName(T enum_) {
@@ -65,7 +65,7 @@ public class EnumProperty<T extends Enum<T> & StringRepresentable> extends Prope
    }
 
    public static <T extends Enum<T> & StringRepresentable> EnumProperty<T> create(String s, Class<T> clazz, Predicate<T> predicate) {
-      return create(s, clazz, (Collection)Arrays.stream((Enum[])clazz.getEnumConstants()).filter(predicate).collect(Collectors.toList()));
+      return create(s, clazz, Arrays.stream(clazz.getEnumConstants()).filter(predicate).collect(Collectors.toList()));
    }
 
    public static <T extends Enum<T> & StringRepresentable> EnumProperty<T> create(String s, Class<T> clazz, T... enums) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
index 020e6e58d2e0ebc00fe95034f77a6b3eca4898b8..6c5f40732463cd112f07f65e3adf9299dc5106d0 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
@@ -13,7 +13,8 @@ public abstract class Property<T extends Comparable<T>> {
    private final Class<T> clazz;
    private final String name;
    private Integer hashCode;
-   private final Codec<T> codec = Codec.STRING.comapFlatMap((sx) -> (DataResult)this.getValue(sx).map(DataResult::success).orElseGet(() -> DataResult.error("Unable to read property: " + this + " with value: " + sx)), this::getName);
+   // MagmaCube - decompile error
+   private final Codec<T> codec = Codec.STRING.comapFlatMap((sx) -> this.getValue(sx).map(DataResult::success).orElseGet(() -> DataResult.error("Unable to read property: " + this + " with value: " + sx)), this::getName);
    private final Codec<Property.Value<T>> valueCodec = this.codec.xmap(this::value, Property.Value::value);
 
    protected Property(String s, Class<T> clazz) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index dcac6f3a746d9f8358d29d0ea2fb57b323e0852c..75e4670295e7195d93addb15fb3c274b58cf1780 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -689,7 +689,7 @@ public class LevelChunk implements ChunkAccess {
 
    public void unpackTicks() {
       if (this.blockTicks instanceof ProtoTickList) {
-         ((ProtoTickList)this.blockTicks).copyOut(this.level.getBlockTicks(), (blockPos) -> this.getBlockState(blockPos).getBlock());
+         ((ProtoTickList<Block>)this.blockTicks).copyOut(this.level.getBlockTicks(), (blockPos) -> this.getBlockState(blockPos).getBlock()); // MagmaCube - decompile error
          this.blockTicks = EmptyTickList.empty();
       } else if (this.blockTicks instanceof ChunkTickList) {
          ((ChunkTickList)this.blockTicks).copyOut(this.level.getBlockTicks());
@@ -697,7 +697,7 @@ public class LevelChunk implements ChunkAccess {
       }
 
       if (this.liquidTicks instanceof ProtoTickList) {
-         ((ProtoTickList)this.liquidTicks).copyOut(this.level.getLiquidTicks(), (blockPos) -> this.getFluidState(blockPos).getType());
+         ((ProtoTickList<Fluid>)this.liquidTicks).copyOut(this.level.getLiquidTicks(), (blockPos) -> this.getFluidState(blockPos).getType()); // MagmaCube - decompile error
          this.liquidTicks = EmptyTickList.empty();
       } else if (this.liquidTicks instanceof ChunkTickList) {
          ((ChunkTickList)this.liquidTicks).copyOut(this.level.getLiquidTicks());
@@ -707,12 +707,12 @@ public class LevelChunk implements ChunkAccess {
    }
 
    public void packTicks(ServerLevel serverLevel) {
-      if (this.blockTicks == EmptyTickList.empty()) {
+      if (this.blockTicks.equals(EmptyTickList.empty())) { // MagmaCube - decompile error
          this.blockTicks = new ChunkTickList<>(Registry.BLOCK::getKey, serverLevel.getBlockTicks().fetchTicksInChunk(this.chunkPos, true, false), serverLevel.getGameTime());
          this.setUnsaved(true);
       }
 
-      if (this.liquidTicks == EmptyTickList.empty()) {
+      if (this.liquidTicks.equals(EmptyTickList.empty())) { // MagmaCube - decompile error
          this.liquidTicks = new ChunkTickList<>(Registry.FLUID::getKey, serverLevel.getLiquidTicks().fetchTicksInChunk(this.chunkPos, true, false), serverLevel.getGameTime());
          this.setUnsaved(true);
       }
@@ -775,7 +775,7 @@ public class LevelChunk implements ChunkAccess {
 
    private <T extends BlockEntity> void updateBlockEntityTicker(T blockEntity) {
       BlockState blockState = blockEntity.getBlockState();
-      BlockEntityTicker<T> blockEntityTicker = blockState.getTicker(this.level, blockEntity.getType());
+      BlockEntityTicker<T> blockEntityTicker = (BlockEntityTicker<T>) blockState.getTicker(this.level, blockEntity.getType()); // MagmaCube - decompile error
       if (blockEntityTicker == null) {
          this.removeBlockEntityTicker(blockEntity.getBlockPos());
       } else {
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
index 2f33299226278cb41238df568f8eeca221bf08e1..fc4c89c8106ff6ab98211bb0a4fd78336dcef8c9 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -36,7 +36,7 @@ public class PalettedContainer<T> implements PaletteResize<T> {
    public void acquire() {
       if (this.traces != null) {
          Thread thread = Thread.currentThread();
-         this.traces.push((T)Pair.of(thread, thread.getStackTrace()));
+         this.traces.push(Pair.of(thread, thread.getStackTrace())); // MagmaCube - decompile error
       }
 
       ThreadingDetector.checkAndLock(this.lock, this.traces, "PalettedContainer");
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 639033308e0f8de5d8fdfb0ac58bf3f6ccf669d5..e19b3f81d6b333eec5927f8490c28137d14289c5 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -237,7 +237,7 @@ public class ChunkSerializer {
 
       for(int i = levelLightEngine.getMinLightSection(); i < levelLightEngine.getMaxLightSection(); ++i) {
          int i2 = i;
-         LevelChunkSection levelChunkSection = (LevelChunkSection)Arrays.stream(levelChunkSections).filter((levelChunkSection) -> levelChunkSection != null && SectionPos.blockToSectionCoord(levelChunkSection.bottomBlockY()) == i2).findFirst().orElse(LevelChunk.EMPTY_SECTION);
+         LevelChunkSection levelChunkSection = (LevelChunkSection)Arrays.stream(levelChunkSections).filter((levelChunkSectionx) -> levelChunkSectionx != null && SectionPos.blockToSectionCoord(levelChunkSectionx.bottomBlockY()) == i2).findFirst().orElse(LevelChunk.EMPTY_SECTION); // MagmaCube - decompile error
          DataLayer dataLayer = levelLightEngine.getLayerListener(LightLayer.BLOCK).getDataLayerData(SectionPos.of(chunkPos, i2));
          DataLayer dataLayer2 = levelLightEngine.getLayerListener(LightLayer.SKY).getDataLayerData(SectionPos.of(chunkPos, i2));
          if (levelChunkSection != LevelChunk.EMPTY_SECTION || dataLayer != null || dataLayer2 != null) {
diff --git a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
index 3748a9afe8cb543522e25b0018278e5559961836..194b9ab26042a1d766e9bf453eb5e5d1d798e3ce 100644
--- a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
+++ b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
@@ -42,7 +42,8 @@ public class DimensionType {
    public static final ResourceLocation OVERWORLD_EFFECTS = new ResourceLocation("overworld");
    public static final ResourceLocation NETHER_EFFECTS = new ResourceLocation("the_nether");
    public static final ResourceLocation END_EFFECTS = new ResourceLocation("the_end");
-   public static final Codec<DimensionType> DIRECT_CODEC;
+   // MagmaCube - decompile error
+   public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.<DimensionType>create((instance) -> instance.group(Codec.LONG.optionalFieldOf("fixed_time").xmap((optional) -> (OptionalLong)optional.map(OptionalLong::of).orElseGet(OptionalLong::empty), (optionalLong) -> optionalLong.isPresent() ? Optional.of(optionalLong.getAsLong()) : Optional.empty()).forGetter((dimensionType) -> dimensionType.fixedTime), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange((double)1.0E-5F, 3.0E7D).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange(MIN_Y, MAX_Y).fieldOf("min_y").forGetter(DimensionType::minY), Codec.intRange(16, Y_SIZE).fieldOf("height").forGetter(DimensionType::height), Codec.intRange(0, Y_SIZE).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter((dimensionType) -> dimensionType.infiniburn), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter((dimensionType) -> dimensionType.effectsLocation), Codec.FLOAT.fieldOf("ambient_light").forGetter((dimensionType) -> dimensionType.ambientLight)).apply(instance, DimensionType::new)).comapFlatMap(DimensionType::guardY, Function.identity());
    private static final int MOON_PHASES = 8;
    public static final float[] MOON_BRIGHTNESS_PER_PHASE = new float[]{1.0F, 0.75F, 0.5F, 0.25F, 0.0F, 0.25F, 0.5F, 0.75F};
    public static final ResourceKey<DimensionType> OVERWORLD_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld"));
@@ -291,8 +292,4 @@ public class DimensionType {
          return this.hasSkylight == dimensionType.hasSkylight && this.hasCeiling == dimensionType.hasCeiling && this.ultraWarm == dimensionType.ultraWarm && this.natural == dimensionType.natural && this.coordinateScale == dimensionType.coordinateScale && this.createDragonFight == dimensionType.createDragonFight && this.piglinSafe == dimensionType.piglinSafe && this.bedWorks == dimensionType.bedWorks && this.respawnAnchorWorks == dimensionType.respawnAnchorWorks && this.hasRaids == dimensionType.hasRaids && this.minY == dimensionType.minY && this.height == dimensionType.height && this.logicalHeight == dimensionType.logicalHeight && Float.compare(dimensionType.ambientLight, this.ambientLight) == 0 && this.fixedTime.equals(dimensionType.fixedTime) && this.biomeZoomer.equals(dimensionType.biomeZoomer) && this.infiniburn.equals(dimensionType.infiniburn) && this.effectsLocation.equals(dimensionType.effectsLocation);
       }
    }
-
-   static {
-      DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.LONG.optionalFieldOf("fixed_time").xmap((optional) -> (OptionalLong)optional.map(OptionalLong::of).orElseGet(OptionalLong::empty), (optionalLong) -> optionalLong.isPresent() ? Optional.of(optionalLong.getAsLong()) : Optional.empty()).forGetter((dimensionType) -> dimensionType.fixedTime), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange((double)1.0E-5F, 3.0E7D).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange(MIN_Y, MAX_Y).fieldOf("min_y").forGetter(DimensionType::minY), Codec.intRange(16, Y_SIZE).fieldOf("height").forGetter(DimensionType::height), Codec.intRange(0, Y_SIZE).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter((dimensionType) -> dimensionType.infiniburn), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter((dimensionType) -> dimensionType.effectsLocation), Codec.FLOAT.fieldOf("ambient_light").forGetter((dimensionType) -> dimensionType.ambientLight)).apply(instance, DimensionType::new)).comapFlatMap(DimensionType::guardY, Function.identity());
-   }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
index f2ecc4086c1490b2ad2f406a68422ae0360192d9..86c22824cf758ebb8435e381b48cda65bde9c8f7 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
@@ -105,7 +105,7 @@ public class EntitySectionStorage<T extends EntityAccess> {
 
    public LongSet getAllChunksWithExistingSections() {
       LongSet longSet = new LongOpenHashSet();
-      this.sections.keySet().forEach((l) -> longSet.add(getChunkKeyFromSectionKey(l)));
+      this.sections.keySet().forEach((java.util.function.LongConsumer) (l) -> longSet.add(getChunkKeyFromSectionKey(l))); // MagmaCube - decompile error
       return longSet;
    }
 
diff --git a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
index f99c040ea84e8412c5ed277058e15bfcee898ec0..5af8fff18728f60e18138e2091ddccb936de2d3a 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
@@ -25,9 +25,9 @@ public class EntityTickList {
             this.passive.put(entry.getIntKey(), (Entity)entry.getValue());
          }
 
-         Int2ObjectMap<Entity> int2ObjectMap = this.active;
+         Int2ObjectMap<Entity> int2ObjectMapx = this.active; // MagmaCube - decompile error
          this.active = this.passive;
-         this.passive = int2ObjectMap;
+         this.passive = int2ObjectMapx; // MagmaCube - decompile error
       }
 
    }
diff --git a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
index 7f2f93449ff82993d038a79c0c088e92783bffad..3468293e5a3c67b22831c10cdcee4aac2c43b5a5 100644
--- a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -223,7 +223,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
    }
 
    private void processUnloads() {
-      this.chunksToUnload.removeIf((l) -> this.chunkVisibility.get(l) != Visibility.HIDDEN ? true : this.processChunkUnload(l));
+      this.chunksToUnload.removeIf((java.util.function.LongPredicate) (l) -> this.chunkVisibility.get(l) != Visibility.HIDDEN ? true : this.processChunkUnload(l)); // MagmaCube - decompile error
    }
 
    private void processPendingLoads() {
@@ -255,7 +255,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
    }
 
    public void autoSave() {
-      this.getAllChunksToSave().forEach((l) -> {
+      this.getAllChunksToSave().forEach((java.util.function.Consumer<? super Long>) (l) -> { // MagmaCube - decompile error
          boolean flag = this.chunkVisibility.get(l) == Visibility.HIDDEN;
          if (flag) {
             this.processChunkUnload(l);
@@ -273,7 +273,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
       while(!longSet.isEmpty()) {
          this.permanentStorage.flush();
          this.processPendingLoads();
-         longSet.removeIf((l) -> {
+         longSet.removeIf((java.util.function.LongPredicate) (l) -> { // MagmaCube - decompile error
             boolean flag = this.chunkVisibility.get(l) == Visibility.HIDDEN;
             return flag ? this.processChunkUnload(l) : this.storeChunkSections(l, (entityAccess) -> {
             });
@@ -309,7 +309,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
 
    public void dumpSections(Writer writer) throws IOException {
       CsvOutput csvOutput = CsvOutput.builder().addColumn("x").addColumn("y").addColumn("z").addColumn("visibility").addColumn("load_status").addColumn("entity_count").build(writer);
-      this.sectionStorage.getAllChunksWithExistingSections().forEach((l) -> {
+      this.sectionStorage.getAllChunksWithExistingSections().forEach((java.util.function.Consumer<? super Long>) (l) -> { // MagmaCube - decompile error
          PersistentEntitySectionManager.ChunkLoadStatus chunkLoadStatus = (PersistentEntitySectionManager.ChunkLoadStatus)this.chunkLoadStatuses.get(l);
          this.sectionStorage.getExistingSectionPositionsInChunk(l).forEach((lx) -> {
             EntitySection<T> entitySection = this.sectionStorage.getSection(lx);
diff --git a/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java b/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
index 85683fb9a8b468de35995b0d80ffdfb27a87199a..d9e950dfeb9c616a91367764cb8e711047a44986 100644
--- a/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
+++ b/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
@@ -26,6 +26,6 @@ public interface PositionSourceType<T extends PositionSource> {
 
    static <T extends PositionSource> void toNetwork(T positionSource, FriendlyByteBuf friendlyByteBuf) {
       friendlyByteBuf.writeResourceLocation(Registry.POSITION_SOURCE_TYPE.getKey(positionSource.getType()));
-      positionSource.getType().write(friendlyByteBuf, positionSource);
+      ((PositionSourceType) positionSource.getType()).write(friendlyByteBuf, positionSource); // MagmaCube - decompile error
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
index 60fbf146d158ab9f37da310d59faf0783292c46d..f53be85c5ce50b0223758064e3c8bd050681bb0b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -301,8 +301,8 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
 
             ChunkAccess var16;
             try {
-               for(int i5 = i5; i5 >= i6; --i5) {
-                  LevelChunkSection levelChunkSection = chunkAccess.getOrCreateSection(i5);
+               for(int i5In = i5; i5In >= i6; --i5In) {
+                  LevelChunkSection levelChunkSection = chunkAccess.getOrCreateSection(i5In);
                   levelChunkSection.acquire();
                   set.add(levelChunkSection);
                }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
index 15e57857308be3bebbc0f30af673eb89792c346b..1ea13128119127da8665c12ee531ae254329e440 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
@@ -18,7 +18,8 @@ import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.feature.configurations.StructureFeatureConfiguration;
 
 public final class NoiseGeneratorSettings {
-   public static final Codec<NoiseGeneratorSettings> DIRECT_CODEC;
+   // MagmaCube - decompile error
+   public static final Codec<NoiseGeneratorSettings> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(StructureSettings.CODEC.fieldOf("structures").forGetter(NoiseGeneratorSettings::structureSettings), NoiseSettings.CODEC.fieldOf("noise").forGetter(NoiseGeneratorSettings::noiseSettings), BlockState.CODEC.fieldOf("default_block").forGetter(NoiseGeneratorSettings::getDefaultBlock), BlockState.CODEC.fieldOf("default_fluid").forGetter(NoiseGeneratorSettings::getDefaultFluid), Codec.INT.fieldOf("bedrock_roof_position").forGetter(NoiseGeneratorSettings::getBedrockRoofPosition), Codec.INT.fieldOf("bedrock_floor_position").forGetter(NoiseGeneratorSettings::getBedrockFloorPosition), Codec.INT.fieldOf("sea_level").forGetter(NoiseGeneratorSettings::seaLevel), Codec.INT.fieldOf("min_surface_level").forGetter(NoiseGeneratorSettings::getMinSurfaceLevel), Codec.BOOL.fieldOf("disable_mob_generation").forGetter(NoiseGeneratorSettings::disableMobGeneration), Codec.BOOL.fieldOf("aquifers_enabled").forGetter(NoiseGeneratorSettings::isAquifersEnabled), Codec.BOOL.fieldOf("noise_caves_enabled").forGetter(NoiseGeneratorSettings::isNoiseCavesEnabled), Codec.BOOL.fieldOf("deepslate_enabled").forGetter(NoiseGeneratorSettings::isDeepslateEnabled), Codec.BOOL.fieldOf("ore_veins_enabled").forGetter(NoiseGeneratorSettings::isOreVeinsEnabled), Codec.BOOL.fieldOf("noodle_caves_enabled").forGetter(NoiseGeneratorSettings::isOreVeinsEnabled)).apply(instance, NoiseGeneratorSettings::new));
    public static final Codec<Supplier<NoiseGeneratorSettings>> CODEC = RegistryFileCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, DIRECT_CODEC);
    private final StructureSettings structureSettings;
    private final NoiseSettings noiseSettings;
@@ -145,7 +146,6 @@ public final class NoiseGeneratorSettings {
    }
 
    static {
-      DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(StructureSettings.CODEC.fieldOf("structures").forGetter(NoiseGeneratorSettings::structureSettings), NoiseSettings.CODEC.fieldOf("noise").forGetter(NoiseGeneratorSettings::noiseSettings), BlockState.CODEC.fieldOf("default_block").forGetter(NoiseGeneratorSettings::getDefaultBlock), BlockState.CODEC.fieldOf("default_fluid").forGetter(NoiseGeneratorSettings::getDefaultFluid), Codec.INT.fieldOf("bedrock_roof_position").forGetter(NoiseGeneratorSettings::getBedrockRoofPosition), Codec.INT.fieldOf("bedrock_floor_position").forGetter(NoiseGeneratorSettings::getBedrockFloorPosition), Codec.INT.fieldOf("sea_level").forGetter(NoiseGeneratorSettings::seaLevel), Codec.INT.fieldOf("min_surface_level").forGetter(NoiseGeneratorSettings::getMinSurfaceLevel), Codec.BOOL.fieldOf("disable_mob_generation").forGetter(NoiseGeneratorSettings::disableMobGeneration), Codec.BOOL.fieldOf("aquifers_enabled").forGetter(NoiseGeneratorSettings::isAquifersEnabled), Codec.BOOL.fieldOf("noise_caves_enabled").forGetter(NoiseGeneratorSettings::isNoiseCavesEnabled), Codec.BOOL.fieldOf("deepslate_enabled").forGetter(NoiseGeneratorSettings::isDeepslateEnabled), Codec.BOOL.fieldOf("ore_veins_enabled").forGetter(NoiseGeneratorSettings::isOreVeinsEnabled), Codec.BOOL.fieldOf("noodle_caves_enabled").forGetter(NoiseGeneratorSettings::isOreVeinsEnabled)).apply(instance, NoiseGeneratorSettings::new));
       register(AMPLIFIED, overworld(new StructureSettings(true), true));
       register(NETHER, netherLikePreset(new StructureSettings(false), Blocks.NETHERRACK.defaultBlockState(), Blocks.LAVA.defaultBlockState()));
       register(END, endLikePreset(new StructureSettings(false), Blocks.END_STONE.defaultBlockState(), Blocks.AIR.defaultBlockState(), true, true));
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
index 01a54d54c04c474880ba2c1a00166b72cf42b9f9..dbf024a76ad32200e28f6c940a9c2a48858dae90 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
@@ -8,7 +8,8 @@ import java.util.function.Function;
 import net.minecraft.world.level.dimension.DimensionType;
 
 public class NoiseSettings {
-   public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY), Codec.intRange(0, DimensionType.Y_SIZE).fieldOf("height").forGetter(NoiseSettings::height), NoiseSamplingSettings.CODEC.fieldOf("sampling").forGetter(NoiseSettings::noiseSamplingSettings), NoiseSlideSettings.CODEC.fieldOf("top_slide").forGetter(NoiseSettings::topSlideSettings), NoiseSlideSettings.CODEC.fieldOf("bottom_slide").forGetter(NoiseSettings::bottomSlideSettings), Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal), Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical), Codec.DOUBLE.fieldOf("density_factor").forGetter(NoiseSettings::densityFactor), Codec.DOUBLE.fieldOf("density_offset").forGetter(NoiseSettings::densityOffset), Codec.BOOL.fieldOf("simplex_surface_noise").forGetter(NoiseSettings::useSimplexSurfaceNoise), Codec.BOOL.optionalFieldOf("random_density_offset", false, Lifecycle.experimental()).forGetter(NoiseSettings::randomDensityOffset), Codec.BOOL.optionalFieldOf("island_noise_override", false, Lifecycle.experimental()).forGetter(NoiseSettings::islandNoiseOverride), Codec.BOOL.optionalFieldOf("amplified", false, Lifecycle.experimental()).forGetter(NoiseSettings::isAmplified)).apply(instance, NoiseSettings::new)).comapFlatMap(NoiseSettings::guardY, Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.<NoiseSettings>create((instance) -> instance.group(Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY), Codec.intRange(0, DimensionType.Y_SIZE).fieldOf("height").forGetter(NoiseSettings::height), NoiseSamplingSettings.CODEC.fieldOf("sampling").forGetter(NoiseSettings::noiseSamplingSettings), NoiseSlideSettings.CODEC.fieldOf("top_slide").forGetter(NoiseSettings::topSlideSettings), NoiseSlideSettings.CODEC.fieldOf("bottom_slide").forGetter(NoiseSettings::bottomSlideSettings), Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal), Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical), Codec.DOUBLE.fieldOf("density_factor").forGetter(NoiseSettings::densityFactor), Codec.DOUBLE.fieldOf("density_offset").forGetter(NoiseSettings::densityOffset), Codec.BOOL.fieldOf("simplex_surface_noise").forGetter(NoiseSettings::useSimplexSurfaceNoise), Codec.BOOL.optionalFieldOf("random_density_offset", false, Lifecycle.experimental()).forGetter(NoiseSettings::randomDensityOffset), Codec.BOOL.optionalFieldOf("island_noise_override", false, Lifecycle.experimental()).forGetter(NoiseSettings::islandNoiseOverride), Codec.BOOL.optionalFieldOf("amplified", false, Lifecycle.experimental()).forGetter(NoiseSettings::isAmplified)).apply(instance, NoiseSettings::new)).comapFlatMap(NoiseSettings::guardY, Function.identity());
    private final int minY;
    private final int height;
    private final NoiseSamplingSettings noiseSamplingSettings;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java b/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java
index b8f7261d7a00f2f9c0e4bddd4b13410214836d67..829140075a0518d2c90b88ebdaf8afbd0ab1accc 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/StructureSettings.java
@@ -14,7 +14,8 @@ import net.minecraft.world.level.levelgen.feature.configurations.StructureFeatur
 
 public class StructureSettings {
    public static final Codec<StructureSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(StrongholdConfiguration.CODEC.optionalFieldOf("stronghold").forGetter((structureSettings) -> Optional.ofNullable(structureSettings.stronghold)), Codec.simpleMap(Registry.STRUCTURE_FEATURE, StructureFeatureConfiguration.CODEC, Registry.STRUCTURE_FEATURE).fieldOf("structures").forGetter((structureSettings) -> structureSettings.structureConfig)).apply(instance, StructureSettings::new));
-   public static final ImmutableMap<StructureFeature<?>, StructureFeatureConfiguration> DEFAULTS = ImmutableMap.builder().put(StructureFeature.VILLAGE, new StructureFeatureConfiguration(32, 8, 10387312)).put(StructureFeature.DESERT_PYRAMID, new StructureFeatureConfiguration(32, 8, 14357617)).put(StructureFeature.IGLOO, new StructureFeatureConfiguration(32, 8, 14357618)).put(StructureFeature.JUNGLE_TEMPLE, new StructureFeatureConfiguration(32, 8, 14357619)).put(StructureFeature.SWAMP_HUT, new StructureFeatureConfiguration(32, 8, 14357620)).put(StructureFeature.PILLAGER_OUTPOST, new StructureFeatureConfiguration(32, 8, 165745296)).put(StructureFeature.STRONGHOLD, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.OCEAN_MONUMENT, new StructureFeatureConfiguration(32, 5, 10387313)).put(StructureFeature.END_CITY, new StructureFeatureConfiguration(20, 11, 10387313)).put(StructureFeature.WOODLAND_MANSION, new StructureFeatureConfiguration(80, 20, 10387319)).put(StructureFeature.BURIED_TREASURE, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.MINESHAFT, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.RUINED_PORTAL, new StructureFeatureConfiguration(40, 15, 34222645)).put(StructureFeature.SHIPWRECK, new StructureFeatureConfiguration(24, 4, 165745295)).put(StructureFeature.OCEAN_RUIN, new StructureFeatureConfiguration(20, 8, 14357621)).put(StructureFeature.BASTION_REMNANT, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_BRIDGE, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_FOSSIL, new StructureFeatureConfiguration(2, 1, 14357921)).build();
+   // MagmaCube - decompile error
+   public static final ImmutableMap<StructureFeature<?>, StructureFeatureConfiguration> DEFAULTS = (ImmutableMap) ImmutableMap.builder().put(StructureFeature.VILLAGE, new StructureFeatureConfiguration(32, 8, 10387312)).put(StructureFeature.DESERT_PYRAMID, new StructureFeatureConfiguration(32, 8, 14357617)).put(StructureFeature.IGLOO, new StructureFeatureConfiguration(32, 8, 14357618)).put(StructureFeature.JUNGLE_TEMPLE, new StructureFeatureConfiguration(32, 8, 14357619)).put(StructureFeature.SWAMP_HUT, new StructureFeatureConfiguration(32, 8, 14357620)).put(StructureFeature.PILLAGER_OUTPOST, new StructureFeatureConfiguration(32, 8, 165745296)).put(StructureFeature.STRONGHOLD, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.OCEAN_MONUMENT, new StructureFeatureConfiguration(32, 5, 10387313)).put(StructureFeature.END_CITY, new StructureFeatureConfiguration(20, 11, 10387313)).put(StructureFeature.WOODLAND_MANSION, new StructureFeatureConfiguration(80, 20, 10387319)).put(StructureFeature.BURIED_TREASURE, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.MINESHAFT, new StructureFeatureConfiguration(1, 0, 0)).put(StructureFeature.RUINED_PORTAL, new StructureFeatureConfiguration(40, 15, 34222645)).put(StructureFeature.SHIPWRECK, new StructureFeatureConfiguration(24, 4, 165745295)).put(StructureFeature.OCEAN_RUIN, new StructureFeatureConfiguration(20, 8, 14357621)).put(StructureFeature.BASTION_REMNANT, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_BRIDGE, new StructureFeatureConfiguration(27, 4, 30084232)).put(StructureFeature.NETHER_FOSSIL, new StructureFeatureConfiguration(2, 1, 14357921)).build();
    public static final StrongholdConfiguration DEFAULT_STRONGHOLD;
    private final Map<StructureFeature<?>, StructureFeatureConfiguration> structureConfig;
    @Nullable
diff --git a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
index 329d132b15469b911501a5aa3cd75f3ff069efef..6cf950106c56ffbc400568504b156cdf53d25c46 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -35,7 +35,8 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class WorldGenSettings {
-   public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((worldGenSettings) -> worldGenSettings.legacyCustomOptions)).apply(instance, instance.stable(WorldGenSettings::new))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.<WorldGenSettings>create((instance) -> instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((worldGenSettings) -> worldGenSettings.legacyCustomOptions)).apply(instance, instance.stable(WorldGenSettings::new))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
    private static final Logger LOGGER = LogManager.getLogger();
    private final long seed;
    private final boolean generateFeatures;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
index 71828b854b8295be20e4f202824f64cdf9abe707..d043e54d3fbf56b64690ae29a0f4bf8f529959bc 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
@@ -73,7 +73,7 @@ public abstract class StructureFeature<C extends FeatureConfiguration> {
    public static final StructureFeature<JigsawConfiguration> BASTION_REMNANT = register("Bastion_Remnant", new BastionFeature(JigsawConfiguration.CODEC), GenerationStep.Decoration.SURFACE_STRUCTURES);
    public static final List<StructureFeature<?>> NOISE_AFFECTING_FEATURES = ImmutableList.of(PILLAGER_OUTPOST, VILLAGE, NETHER_FOSSIL, STRONGHOLD);
    private static final ResourceLocation JIGSAW_RENAME = new ResourceLocation("jigsaw");
-   private static final Map<ResourceLocation, ResourceLocation> RENAMES = ImmutableMap.builder().put(new ResourceLocation("nvi"), JIGSAW_RENAME).put(new ResourceLocation("pcp"), JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), JIGSAW_RENAME).put(new ResourceLocation("runtime"), JIGSAW_RENAME).build();
+   private static final Map<ResourceLocation, ResourceLocation> RENAMES = ImmutableMap.<ResourceLocation, ResourceLocation>builder().put(new ResourceLocation("nvi"), JIGSAW_RENAME).put(new ResourceLocation("pcp"), JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), JIGSAW_RENAME).put(new ResourceLocation("runtime"), JIGSAW_RENAME).build(); // MagmaCube - decompile error
    public static final int MAX_STRUCTURE_RANGE = 8;
    private final Codec<ConfiguredStructureFeature<C, StructureFeature<C>>> configuredStructureCodec;
 
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/GlowLichenConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/GlowLichenConfiguration.java
index bfe8dad0170f79183d5f053ed89928b3a18469f1..129842d1085891db34a0e81714a52175bd995aa1 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/GlowLichenConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/GlowLichenConfiguration.java
@@ -11,7 +11,8 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class GlowLichenConfiguration implements FeatureConfiguration {
-   public static final Codec<GlowLichenConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.intRange(1, 64).fieldOf("search_range").orElse(10).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.searchRange), Codec.BOOL.fieldOf("can_place_on_floor").orElse(false).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.canPlaceOnFloor), Codec.BOOL.fieldOf("can_place_on_ceiling").orElse(false).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.canPlaceOnCeiling), Codec.BOOL.fieldOf("can_place_on_wall").orElse(false).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.canPlaceOnWall), Codec.floatRange(0.0F, 1.0F).fieldOf("chance_of_spreading").orElse(0.5F).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.chanceOfSpreading), BlockState.CODEC.listOf().fieldOf("can_be_placed_on").forGetter((glowLichenConfiguration) -> new ArrayList(glowLichenConfiguration.canBePlacedOn))).apply(instance, GlowLichenConfiguration::new));
+   // MagmaCube - decompile error
+   public static final Codec<GlowLichenConfiguration> CODEC = RecordCodecBuilder.<GlowLichenConfiguration>create((instance) -> instance.group(Codec.intRange(1, 64).fieldOf("search_range").orElse(10).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.searchRange), Codec.BOOL.fieldOf("can_place_on_floor").orElse(false).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.canPlaceOnFloor), Codec.BOOL.fieldOf("can_place_on_ceiling").orElse(false).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.canPlaceOnCeiling), Codec.BOOL.fieldOf("can_place_on_wall").orElse(false).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.canPlaceOnWall), Codec.floatRange(0.0F, 1.0F).fieldOf("chance_of_spreading").orElse(0.5F).forGetter((glowLichenConfiguration) -> glowLichenConfiguration.chanceOfSpreading), BlockState.CODEC.listOf().fieldOf("can_be_placed_on").forGetter((glowLichenConfiguration) -> new ArrayList<>(glowLichenConfiguration.canBePlacedOn))).apply(instance, GlowLichenConfiguration::new));
    public final int searchRange;
    public final boolean canPlaceOnFloor;
    public final boolean canPlaceOnCeiling;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
index eea8527b4b67131844f4a547468da3a7b34b4355..3a54720b94c797ef4140752de92c849eab2f5daf 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration.java
@@ -10,7 +10,8 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.material.FluidState;
 
 public class SpringConfiguration implements FeatureConfiguration {
-   public static final Codec<SpringConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(FluidState.CODEC.fieldOf("state").forGetter((springConfiguration) -> springConfiguration.state), Codec.BOOL.fieldOf("requires_block_below").orElse(true).forGetter((springConfiguration) -> springConfiguration.requiresBlockBelow), Codec.INT.fieldOf("rock_count").orElse(4).forGetter((springConfiguration) -> springConfiguration.rockCount), Codec.INT.fieldOf("hole_count").orElse(1).forGetter((springConfiguration) -> springConfiguration.holeCount), Registry.BLOCK.listOf().fieldOf("valid_blocks").xmap(ImmutableSet::copyOf, ImmutableList::copyOf).forGetter((springConfiguration) -> springConfiguration.validBlocks)).apply(instance, SpringConfiguration::new));
+   // MagmaCube - decompile error
+   public static final Codec<SpringConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(FluidState.CODEC.fieldOf("state").forGetter((springConfiguration) -> springConfiguration.state), Codec.BOOL.fieldOf("requires_block_below").orElse(true).forGetter((springConfiguration) -> springConfiguration.requiresBlockBelow), Codec.INT.fieldOf("rock_count").orElse(4).forGetter((springConfiguration) -> springConfiguration.rockCount), Codec.INT.fieldOf("hole_count").orElse(1).forGetter((springConfiguration) -> springConfiguration.holeCount), Registry.BLOCK.listOf().fieldOf("valid_blocks").xmap(ImmutableSet::copyOf, ImmutableList::copyOf).forGetter((springConfiguration) -> (ImmutableSet<Block>) springConfiguration.validBlocks)).apply(instance, SpringConfiguration::new));
    public final FluidState state;
    public final boolean requiresBlockBelow;
    public final int rockCount;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java
index 1d2aab0f82a790ca98ce3655b91160b4192b6dcc..7cb352ff514d505e1d3c3a0fdadc15dcd19215bf 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/StructureFeatureConfiguration.java
@@ -7,7 +7,8 @@ import java.util.function.Function;
 import net.minecraft.util.ExtraCodecs;
 
 public class StructureFeatureConfiguration {
-   public static final Codec<StructureFeatureConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.intRange(0, 4096).fieldOf("spacing").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.spacing), Codec.intRange(0, 4096).fieldOf("separation").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.separation), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("salt").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.salt)).apply(instance, StructureFeatureConfiguration::new)).comapFlatMap((structureFeatureConfiguration) -> structureFeatureConfiguration.spacing <= structureFeatureConfiguration.separation ? DataResult.error("Spacing has to be smaller than separation") : DataResult.success(structureFeatureConfiguration), Function.identity());
+   // MagmaCube - decompile error
+   public static final Codec<StructureFeatureConfiguration> CODEC = RecordCodecBuilder.<StructureFeatureConfiguration>create((instance) -> instance.group(Codec.intRange(0, 4096).fieldOf("spacing").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.spacing), Codec.intRange(0, 4096).fieldOf("separation").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.separation), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("salt").forGetter((structureFeatureConfiguration) -> structureFeatureConfiguration.salt)).apply(instance, StructureFeatureConfiguration::new)).comapFlatMap((structureFeatureConfiguration) -> structureFeatureConfiguration.spacing <= structureFeatureConfiguration.separation ? DataResult.error("Spacing has to be smaller than separation") : DataResult.success(structureFeatureConfiguration), Function.identity());
    private final int spacing;
    private final int separation;
    private final int salt;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
index 8722cd03b792c39acd079fb87f01e46404f9a4c3..691f8d0330ef8313c5b737745173177d87c2a79b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
@@ -182,12 +182,14 @@ public class JigsawPlacement {
                               if (!boundingBox2.isInside(structureBlockInfox.pos.relative(JigsawBlock.getFrontFacing(structureBlockInfox.state)))) {
                                  return 0;
                               } else {
-                                 ResourceLocation resourceLocation = new ResourceLocation(structureBlockInfox.nbt.getString("pool"));
-                                 Optional<StructureTemplatePool> optional = this.pools.getOptional(resourceLocation);
-                                 Optional<StructureTemplatePool> optional2 = optional.flatMap((structureTemplatePool) -> this.pools.getOptional(structureTemplatePool.getFallback()));
-                                 int i = optional.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
-                                 int i2 = optional2.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
-                                 return Math.max(i, i2);
+                                 // MagmaCube start - decompile error
+                                 ResourceLocation resourceLocationx = new ResourceLocation(structureBlockInfox.nbt.getString("pool"));
+                                 Optional<StructureTemplatePool> optx = this.pools.getOptional(resourceLocationx);
+                                 Optional<StructureTemplatePool> optional2x = optx.flatMap((structureTemplatePool) -> this.pools.getOptional(structureTemplatePool.getFallback()));
+                                 int ix = optx.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
+                                 int i2x = optional2x.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
+                                 return Math.max(ix, i2x);
+                                 // MagmaCube end - decompile error
                               }
                            }).max().orElse(0);
                         } else {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
index 99fecb0bf244599b81553f81721f3d98c5b17f4f..0932e155e17fa94625eb8f1eb153632afb07e389 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
@@ -29,7 +29,7 @@ import org.apache.logging.log4j.Logger;
 public class StructureTemplatePool {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final int SIZE_UNSET = Integer.MIN_VALUE;
-   public static final Codec<StructureTemplatePool> DIRECT_CODEC;
+   public static final Codec<StructureTemplatePool> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName), ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback), Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.intRange(1, 150).fieldOf("weight")).codec().listOf().fieldOf("elements").forGetter((structureTemplatePool) -> structureTemplatePool.rawTemplates)).apply(instance, StructureTemplatePool::new));
    public static final Codec<Supplier<StructureTemplatePool>> CODEC = RegistryFileCodec.create(Registry.TEMPLATE_POOL_REGISTRY, DIRECT_CODEC);
    private final ResourceLocation name;
    private final List<Pair<StructurePoolElement, Integer>> rawTemplates;
@@ -98,10 +98,6 @@ public class StructureTemplatePool {
       return this.templates.size();
    }
 
-   static {
-      DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName), ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback), Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.intRange(1, 150).fieldOf("weight")).codec().listOf().fieldOf("elements").forGetter((structureTemplatePool) -> structureTemplatePool.rawTemplates)).apply(instance, StructureTemplatePool::new));
-   }
-
    public static enum Projection implements StringRepresentable {
       TERRAIN_MATCHING("terrain_matching", ImmutableList.of(new GravityProcessor(Heightmap.Types.WORLD_SURFACE_WG, -1))),
       RIGID("rigid", ImmutableList.of());
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
index 052a3ec40de1dd83fe4032e00c65bf8a2f38c6ae..2c3eee747ca8d364dd63b356e8b43ed8a46e535d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
@@ -30,7 +30,7 @@ public class AlterGroundDecorator extends TreeDecorator {
          this.placeCircle(levelSimulatedReader, biConsumer, random, blockPos.west().south(2));
          this.placeCircle(levelSimulatedReader, biConsumer, random, blockPos.east(2).south(2));
 
-         for(int i = 0; i < 5; ++i) {
+         for(int il = 0; il < 5; ++il) { // MagmaCube - decompile error
             int i2 = random.nextInt(64);
             int i3 = i2 % 8;
             int i4 = i2 / 8;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
index b1ccc0b6dfd518dfade4c7dfe9c150db01dcc5ec..81c6e385cd1dd36690107a420e907dd2e3ea2774 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
@@ -40,9 +40,9 @@ public class BeehiveDecorator extends TreeDecorator {
             if (Feature.isAir(levelSimulatedReader, blockPos2) && Feature.isAir(levelSimulatedReader, blockPos2.relative(Direction.SOUTH))) {
                biConsumer.accept(blockPos2, Blocks.BEE_NEST.defaultBlockState().setValue(BeehiveBlock.FACING, Direction.SOUTH));
                levelSimulatedReader.getBlockEntity(blockPos2, BlockEntityType.BEEHIVE).ifPresent((beehiveBlockEntity) -> {
-                  int i = 2 + random.nextInt(2);
+                  int ix = 2 + random.nextInt(2); // MagmaCube - decompile error
 
-                  for(int i2 = 0; i2 < i; ++i2) {
+                  for(int i2 = 0; i2 < ix; ++i2) { // MagmaCube - decompile error
                      CompoundTag compoundTag = new CompoundTag();
                      compoundTag.putString("id", Registry.ENTITY_TYPE.getKey(EntityType.BEE).toString());
                      beehiveBlockEntity.storeBee(compoundTag, random.nextInt(599), false);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
index a99fd9de6864b86b06f32366256e3a6ef37a4b93..aa1e6e687dd92fc4a37a8193b860e8fe577cec7d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
@@ -37,7 +37,8 @@ import org.apache.logging.log4j.Logger;
 
 public class FlatLevelGeneratorSettings {
    private static final Logger LOGGER = LogManager.getLogger();
-   public static final Codec<FlatLevelGeneratorSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.biomes), StructureSettings.CODEC.fieldOf("structures").forGetter(FlatLevelGeneratorSettings::structureSettings), FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter(FlatLevelGeneratorSettings::getLayersInfo), Codec.BOOL.fieldOf("lakes").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.addLakes), Codec.BOOL.fieldOf("features").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.decoration), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter((flatLevelGeneratorSettings) -> Optional.of(flatLevelGeneratorSettings.biome))).apply(instance, FlatLevelGeneratorSettings::new)).comapFlatMap(FlatLevelGeneratorSettings::validateHeight, Function.identity()).stable();
+   // MagmaCube - decompile error
+   public static final Codec<FlatLevelGeneratorSettings> CODEC = RecordCodecBuilder.<FlatLevelGeneratorSettings>create((instance) -> instance.group(RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.biomes), StructureSettings.CODEC.fieldOf("structures").forGetter(FlatLevelGeneratorSettings::structureSettings), FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter(FlatLevelGeneratorSettings::getLayersInfo), Codec.BOOL.fieldOf("lakes").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.addLakes), Codec.BOOL.fieldOf("features").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.decoration), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter((flatLevelGeneratorSettings) -> Optional.of(flatLevelGeneratorSettings.biome))).apply(instance, FlatLevelGeneratorSettings::new)).comapFlatMap(FlatLevelGeneratorSettings::validateHeight, Function.identity()).stable();
    private static final Map<StructureFeature<?>, ConfiguredStructureFeature<?, ?>> STRUCTURE_FEATURES = Util.make(Maps.newHashMap(), (hashMap) -> {
       hashMap.put(StructureFeature.MINESHAFT, StructureFeatures.MINESHAFT);
       hashMap.put(StructureFeature.VILLAGE, StructureFeatures.VILLAGE_PLAINS);
@@ -149,7 +150,7 @@ public class FlatLevelGeneratorSettings {
 
          for(int i = 0; i < list.size(); ++i) {
             if (i != GenerationStep.Decoration.UNDERGROUND_STRUCTURES.ordinal() && i != GenerationStep.Decoration.SURFACE_STRUCTURES.ordinal()) {
-               for(Supplier<ConfiguredFeature<?, ?>> supplier : (List)list.get(i)) {
+               for(Supplier<ConfiguredFeature<?, ?>> supplier : list.get(i)) { // MagmaCube - decompile error
                   builder.addFeature(i, supplier);
                }
             }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java b/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
index 670613a86bb1fe88412c71b4f91186f1719a745f..60b7c6fa85fc29524d77fe849d0cc5d70a9ad3b3 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
@@ -9,7 +9,8 @@ import net.minecraft.world.level.levelgen.WorldGenerationContext;
 
 public class ConstantHeight extends HeightProvider {
    public static final ConstantHeight ZERO = new ConstantHeight(VerticalAnchor.absolute(0));
-   public static final Codec<ConstantHeight> CODEC = Codec.either(VerticalAnchor.CODEC, RecordCodecBuilder.create((instance) -> instance.group(VerticalAnchor.CODEC.fieldOf("value").forGetter((constantHeight) -> constantHeight.value)).apply(instance, ConstantHeight::new))).xmap((either) -> (ConstantHeight)either.map(ConstantHeight::of, (constantHeight) -> constantHeight), (constantHeight) -> Either.left(constantHeight.value));
+   // MagmaCube - decompile error
+   public static final Codec<ConstantHeight> CODEC = Codec.either(VerticalAnchor.CODEC, RecordCodecBuilder.<ConstantHeight>create((instance) -> instance.group(VerticalAnchor.CODEC.fieldOf("value").forGetter((constantHeight) -> constantHeight.value)).apply(instance, ConstantHeight::new))).xmap((either) -> (ConstantHeight)either.map(ConstantHeight::of, (constantHeight) -> constantHeight), (constantHeight) -> Either.left(constantHeight.value));
    private final VerticalAnchor value;
 
    public static ConstantHeight of(VerticalAnchor verticalAnchor) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java b/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
index 9e87e79d5e55a7ddcb9db024827b66c461581991..81bd3498c47e857ca79910da6edb9440d05be957 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
@@ -1323,7 +1323,7 @@ public class OceanMonumentPieces {
       protected static final BlockState LAMP_BLOCK = Blocks.SEA_LANTERN.defaultBlockState();
       protected static final boolean DO_FILL = true;
       protected static final BlockState FILL_BLOCK = Blocks.WATER.defaultBlockState();
-      protected static final Set<Block> FILL_KEEP = ImmutableSet.builder().add(Blocks.ICE).add(Blocks.PACKED_ICE).add(Blocks.BLUE_ICE).add(FILL_BLOCK.getBlock()).build();
+      protected static final Set<Block> FILL_KEEP = ImmutableSet.<Block>builder().add(Blocks.ICE).add(Blocks.PACKED_ICE).add(Blocks.BLUE_ICE).add(FILL_BLOCK.getBlock()).build(); // MagmaCube - decompile error
       protected static final int GRIDROOM_WIDTH = 8;
       protected static final int GRIDROOM_DEPTH = 8;
       protected static final int GRIDROOM_HEIGHT = 4;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
index 8e1756b8669404b40a08b50c0e18fcf293035395..672d5954c7f782cf21eacfe5b00c8e931462db77 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
@@ -45,7 +45,8 @@ public abstract class StructurePiece {
    private Rotation rotation;
    protected int genDepth;
    private final StructurePieceType type;
-   private static final Set<Block> SHAPE_CHECK_BLOCKS = ImmutableSet.builder().add(Blocks.NETHER_BRICK_FENCE).add(Blocks.TORCH).add(Blocks.WALL_TORCH).add(Blocks.OAK_FENCE).add(Blocks.SPRUCE_FENCE).add(Blocks.DARK_OAK_FENCE).add(Blocks.ACACIA_FENCE).add(Blocks.BIRCH_FENCE).add(Blocks.JUNGLE_FENCE).add(Blocks.LADDER).add(Blocks.IRON_BARS).build();
+   // MagmaCube - decompile error
+   private static final Set<Block> SHAPE_CHECK_BLOCKS = (Set) ImmutableSet.builder().add(Blocks.NETHER_BRICK_FENCE).add(Blocks.TORCH).add(Blocks.WALL_TORCH).add(Blocks.OAK_FENCE).add(Blocks.SPRUCE_FENCE).add(Blocks.DARK_OAK_FENCE).add(Blocks.ACACIA_FENCE).add(Blocks.BIRCH_FENCE).add(Blocks.JUNGLE_FENCE).add(Blocks.LADDER).add(Blocks.IRON_BARS).build();
 
    protected StructurePiece(StructurePieceType structurePieceType, int i, BoundingBox boundingBox) {
       this.type = structurePieceType;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
index a627e5410a902ae8600428f6754c1fff635ddbfb..2f083f6a35112e1defa0612882a82c7b60cf4d9c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -134,7 +134,7 @@ public class StructureTemplate {
    }
 
    private static List<StructureTemplate.StructureBlockInfo> buildInfoList(List<StructureTemplate.StructureBlockInfo> list, List<StructureTemplate.StructureBlockInfo> list2, List<StructureTemplate.StructureBlockInfo> list3) {
-      Comparator<StructureTemplate.StructureBlockInfo> comparator = Comparator.comparingInt((structureBlockInfo) -> structureBlockInfo.pos.getY()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getX()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getZ());
+      Comparator<StructureTemplate.StructureBlockInfo> comparator = Comparator.<StructureBlockInfo>comparingInt((structureBlockInfo) -> structureBlockInfo.pos.getY()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getX()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getZ()); // MagmaCube - decompile error
       list.sort(comparator);
       list3.sort(comparator);
       list2.sort(comparator);
diff --git a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
index 5665250407885a3be2be0c1419f7c5b313c43b3d..798db73233b1e953079eda63d6c00a681ec8b5f6 100644
--- a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
+++ b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
@@ -5,6 +5,8 @@ import it.unimi.dsi.fastutil.longs.Long2ByteOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongArrayList;
 import it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongList;
+
+import java.util.function.LongConsumer;
 import java.util.function.LongPredicate;
 import net.minecraft.util.Mth;
 
@@ -85,13 +87,13 @@ public abstract class DynamicGraphMinFixedPoint {
 
    public void removeIf(LongPredicate longPredicate) {
       LongList longList = new LongArrayList();
-      this.computedLevels.keySet().forEach((l) -> {
+      this.computedLevels.keySet().forEach((LongConsumer) (l) -> { // MagmaCube - decompile error
          if (longPredicate.test(l)) {
             longList.add(l);
          }
 
       });
-      longList.forEach(this::removeFromQueue);
+      longList.forEach((LongConsumer) this::removeFromQueue); // MagmaCube - decompile error
    }
 
    private void dequeue(long l, int i, int i2, boolean flag) {
diff --git a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
index 35efa1486104acb188b69a23bf6478161d213e52..94bba1217e753a4d75e523e39d565f9e7f8cf7e0 100644
--- a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
@@ -206,10 +206,11 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
 
          this.toRemove.clear();
          this.hasToRemove = false;
-         ObjectIterator<Entry<DataLayer>> objectIterator = this.queuedSections.long2ObjectEntrySet().iterator();
-
-         while(objectIterator.hasNext()) {
-            Entry<DataLayer> entry = (Entry)objectIterator.next();
+         // MagmaCube start - decompile error
+         ObjectIterator<Entry<DataLayer>> objectIteratorx = this.queuedSections.long2ObjectEntrySet().iterator();
+         while(objectIteratorx.hasNext()) {
+            Entry<DataLayer> entry = (Entry)objectIteratorx.next();
+            // MagmaCube end - decompile error
             long l3 = entry.getLongKey();
             if (this.storingLightForSection(l3)) {
                DataLayer dataLayer3 = (DataLayer)entry.getValue();
@@ -239,13 +240,13 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
          }
 
          this.untrustedSections.clear();
-         objectIterator = this.queuedSections.long2ObjectEntrySet().iterator();
+         objectIteratorx = this.queuedSections.long2ObjectEntrySet().iterator();
 
-         while(objectIterator.hasNext()) {
-            Entry<DataLayer> entry2 = (Entry)objectIterator.next();
+         while(objectIteratorx.hasNext()) {
+            Entry<DataLayer> entry2 = (Entry)objectIteratorx.next();
             long l6 = entry2.getLongKey();
             if (this.storingLightForSection(l6)) {
-               objectIterator.remove();
+               objectIteratorx.remove();
             }
          }
 
diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index 7b869a58392ed6c524ed5b3214e470224f5bb00b..3324bb153b915d90047653682746473620a3734b 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -262,16 +262,18 @@ public abstract class FlowingFluid extends Fluid {
             BlockPos blockPos3 = blockPos.relative(direction2);
             short s = getCacheKey(blockPos2, blockPos3);
             Pair<BlockState, FluidState> pair = (Pair)short2ObjectMap.computeIfAbsent(s, (ix) -> {
-               BlockState blockState = levelReader.getBlockState(blockPos3);
-               return Pair.of(blockState, blockState.getFluidState());
+               BlockState blockStatex = levelReader.getBlockState(blockPos3); // MagmaCube - decompile error
+               return Pair.of(blockStatex, blockStatex.getFluidState()); // MagmaCube - decompile error
             });
             BlockState blockState2 = (BlockState)pair.getFirst();
             FluidState fluidState = (FluidState)pair.getSecond();
             if (this.canPassThrough(levelReader, this.getFlowing(), blockPos, blockState, direction2, blockPos3, blockState2, fluidState)) {
                boolean flag = short2BooleanMap.computeIfAbsent(s, (ix) -> {
-                  BlockPos blockPos2 = blockPos3.below();
-                  BlockState blockState2 = levelReader.getBlockState(blockPos2);
-                  return this.isWaterHole(levelReader, this.getFlowing(), blockPos3, blockState2, blockPos2, blockState2);
+                  // MagmaCube start - decompile error
+                  BlockPos blockPos2x = blockPos3.below();
+                  BlockState blockState2x = levelReader.getBlockState(blockPos2x);
+                  return this.isWaterHole(levelReader, this.getFlowing(), blockPos3, blockState2x, blockPos2x, blockState2x);
+                  // MagmaCube end - decompile error
                });
                if (flag) {
                   return i;
@@ -332,8 +334,8 @@ public abstract class FlowingFluid extends Fluid {
          BlockPos blockPos2 = blockPos.relative(direction);
          short s = getCacheKey(blockPos, blockPos2);
          Pair<BlockState, FluidState> pair = (Pair)short2ObjectMap.computeIfAbsent(s, (ix) -> {
-            BlockState blockState = levelReader.getBlockState(blockPos2);
-            return Pair.of(blockState, blockState.getFluidState());
+            BlockState blockStatex = levelReader.getBlockState(blockPos2); // MagmaCube - decompile error
+            return Pair.of(blockStatex, blockStatex.getFluidState()); // MagmaCube - decompile error
          });
          BlockState blockState2 = (BlockState)pair.getFirst();
          FluidState fluidState = (FluidState)pair.getSecond();
@@ -341,8 +343,10 @@ public abstract class FlowingFluid extends Fluid {
          if (this.canPassThrough(levelReader, fluidState2.getType(), blockPos, blockState, direction, blockPos2, blockState2, fluidState)) {
             BlockPos blockPos3 = blockPos2.below();
             boolean flag = short2BooleanMap.computeIfAbsent(s, (ix) -> {
-               BlockState blockState2 = levelReader.getBlockState(blockPos3);
-               return this.isWaterHole(levelReader, this.getFlowing(), blockPos2, blockState2, blockPos3, blockState2);
+               // MagmaCube start - decompile error
+               BlockState blockState2x = levelReader.getBlockState(blockPos3);
+               return this.isWaterHole(levelReader, this.getFlowing(), blockPos2, blockState2x, blockPos3, blockState2x);
+               // MagmaCube end - decompile error
             });
             int i2;
             if (flag) {
diff --git a/src/main/java/net/minecraft/world/level/newbiome/context/LazyAreaContext.java b/src/main/java/net/minecraft/world/level/newbiome/context/LazyAreaContext.java
index 076bd59b9b688cca955a0e626ab748e152c92427..dcc989405554b511a515af7bd9453dca10ce2576 100644
--- a/src/main/java/net/minecraft/world/level/newbiome/context/LazyAreaContext.java
+++ b/src/main/java/net/minecraft/world/level/newbiome/context/LazyAreaContext.java
@@ -45,7 +45,7 @@ public class LazyAreaContext implements BigContext<LazyArea> {
    }
 
    public int nextRandom(int i) {
-      int i2 = Math.floorMod(this.rval >> 24, i);
+      int i2 = (int) Math.floorMod(this.rval >> 24, i);
       this.rval = LinearCongruentialGenerator.next(this.rval, this.seed);
       return i2;
    }
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/Node.java b/src/main/java/net/minecraft/world/level/pathfinder/Node.java
index 0df18a5f648db1facd48e2236b8fc39c44864448..2a171a2690fccb772fb882d55effd2aa7640feec 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/Node.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/Node.java
@@ -42,7 +42,7 @@ public class Node {
    }
 
    public static int createHash(int i, int i2, int i3) {
-      return i2 & 255 | (i & 32767) << 8 | (i3 & 32767) << 24 | (i < 0 ? Integer.MIN_VALUE : 0) | (i3 < 0 ? '閠�' : 0);
+      return i2 & 255 | (i & 32767) << 8 | (i3 & 32767) << 24 | (i < 0 ? Integer.MIN_VALUE : 0) | (i3 < 0 ? '\u8000' : 0); // MagmaCube - decompile error
    }
 
    public float distanceTo(Node node) {
diff --git a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
index 81993f152534d59817af0a43f2bc10b7f62200cb..9dbc3e2f74749f97a0f16db481f98af9a9d8cf7c 100644
--- a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
+++ b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
@@ -43,12 +43,14 @@ public class PortalForcer {
       PoiManager poiManager = this.level.getPoiManager();
       int i = flag ? 16 : 128;
       poiManager.ensureLoadedAndValid(this.level, blockPos, i);
-      Optional<PoiRecord> optional = poiManager.getInSquare((poiType) -> poiType == PoiType.NETHER_PORTAL, blockPos, i, PoiManager.Occupancy.ANY).sorted(Comparator.comparingDouble((poiRecord) -> poiRecord.getPos().distSqr(blockPos)).thenComparingInt((poiRecord) -> poiRecord.getPos().getY())).filter((poiRecord) -> this.level.getBlockState(poiRecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS)).findFirst();
+      Optional<PoiRecord> optional = poiManager.getInSquare((poiType) -> poiType == PoiType.NETHER_PORTAL, blockPos, i, PoiManager.Occupancy.ANY).sorted(Comparator.<PoiRecord>comparingDouble((poiRecord) -> poiRecord.getPos().distSqr(blockPos)).thenComparingInt((poiRecord) -> poiRecord.getPos().getY())).filter((poiRecord) -> this.level.getBlockState(poiRecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS)).findFirst(); // MagmaCube - decompile error
       return optional.map((poiRecord) -> {
-         BlockPos blockPos = poiRecord.getPos();
-         this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(blockPos), 3, blockPos);
-         BlockState blockState = this.level.getBlockState(blockPos);
-         return BlockUtil.getLargestRectangleAround(blockPos, blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockPosx) -> this.level.getBlockState(blockPosx) == blockState);
+         // MagmaCube start - decompile error
+         BlockPos blockPosx = poiRecord.getPos();
+         this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(blockPosx), 3, blockPosx);
+         BlockState blockState = this.level.getBlockState(blockPosx);
+         return BlockUtil.getLargestRectangleAround(blockPosx, blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockPosxx) -> this.level.getBlockState(blockPosxx) == blockState);
+         // MagmaCube end - decompile error
       });
    }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index 73391f53d694dc6b57cb89e319d0d1cba3e20a64..ed73eef532dc8c1f64bb0548d57ec65f6f0e50c0 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -97,12 +97,12 @@ public class LevelStorageSource {
          }
       }
 
-      Dynamic<T> dynamic3 = dataFixer.update(References.WORLD_GEN_SETTINGS, dynamic2, i, SharedConstants.getCurrentVersion().getWorldVersion());
-      DataResult<WorldGenSettings> dataResult = WorldGenSettings.CODEC.parse(dynamic3);
+      Dynamic<T> dynamic3x = dataFixer.update(References.WORLD_GEN_SETTINGS, dynamic2, i, SharedConstants.getCurrentVersion().getWorldVersion());
+      DataResult<WorldGenSettings> dataResult = WorldGenSettings.CODEC.parse(dynamic3x);
       return Pair.of((WorldGenSettings)dataResult.resultOrPartial(Util.prefix("WorldGenSettings: ", LOGGER::error)).orElseGet(() -> {
-         Registry<DimensionType> registry = (Registry)RegistryLookupCodec.create(Registry.DIMENSION_TYPE_REGISTRY).codec().parse(dynamic3).resultOrPartial(Util.prefix("Dimension type registry: ", LOGGER::error)).orElseThrow(() -> new IllegalStateException("Failed to get dimension registry"));
-         Registry<Biome> registry2 = (Registry)RegistryLookupCodec.create(Registry.BIOME_REGISTRY).codec().parse(dynamic3).resultOrPartial(Util.prefix("Biome registry: ", LOGGER::error)).orElseThrow(() -> new IllegalStateException("Failed to get biome registry"));
-         Registry<NoiseGeneratorSettings> registry3 = (Registry)RegistryLookupCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY).codec().parse(dynamic3).resultOrPartial(Util.prefix("Noise settings registry: ", LOGGER::error)).orElseThrow(() -> new IllegalStateException("Failed to get noise settings registry"));
+         Registry<DimensionType> registry = (Registry)RegistryLookupCodec.create(Registry.DIMENSION_TYPE_REGISTRY).codec().parse(dynamic3x).resultOrPartial(Util.prefix("Dimension type registry: ", LOGGER::error)).orElseThrow(() -> new IllegalStateException("Failed to get dimension registry"));
+         Registry<Biome> registry2 = (Registry)RegistryLookupCodec.create(Registry.BIOME_REGISTRY).codec().parse(dynamic3x).resultOrPartial(Util.prefix("Biome registry: ", LOGGER::error)).orElseThrow(() -> new IllegalStateException("Failed to get biome registry"));
+         Registry<NoiseGeneratorSettings> registry3 = (Registry)RegistryLookupCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY).codec().parse(dynamic3x).resultOrPartial(Util.prefix("Noise settings registry: ", LOGGER::error)).orElseThrow(() -> new IllegalStateException("Failed to get noise settings registry"));
          return WorldGenSettings.makeDefault(registry, registry2, registry3);
       }), dataResult.lifecycle());
    }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java b/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
index 230f66a5111fe568e37860e972948dbae918b990..a0626e404666495fab6695862e85401a1fc35e60 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
@@ -111,7 +111,7 @@ public class GsonAdapterFactory {
          } else {
             JsonObject jsonObject = new JsonObject();
             jsonObject.addProperty(this.typeKey, this.registry.getKey(serializerType).toString());
-            serializerType.getSerializer().serialize(jsonObject, object, jsonSerializationContext);
+            ((Serializer) serializerType.getSerializer()).serialize(jsonObject, object, jsonSerializationContext); // MagmaCube - decompile error
             return jsonObject;
          }
       }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java b/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
index 6ef90331265031adaa56530c50cdeb87e93933b9..61c4da69de29e10fa0355919cad96373d140a09b 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
@@ -53,12 +53,12 @@ public class ValidationContext {
    }
 
    public ValidationContext enterTable(String s, ResourceLocation resourceLocation) {
-      ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.builder().addAll(this.visitedTables).add(resourceLocation).build();
+      ImmutableSet<ResourceLocation> immutableSet = (ImmutableSet) ImmutableSet.builder().addAll(this.visitedTables).add(resourceLocation).build(); // MagmaCube - decompile error
       return new ValidationContext(this.problems, () -> this.getContext() + s, this.params, this.conditionResolver, this.visitedConditions, this.tableResolver, immutableSet);
    }
 
    public ValidationContext enterCondition(String s, ResourceLocation resourceLocation) {
-      ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.builder().addAll(this.visitedConditions).add(resourceLocation).build();
+      ImmutableSet<ResourceLocation> immutableSet = (ImmutableSet) ImmutableSet.builder().addAll(this.visitedConditions).add(resourceLocation).build(); // MagmaCube - decompile error
       return new ValidationContext(this.problems, () -> this.getContext() + s, this.params, this.conditionResolver, immutableSet, this.tableResolver, this.visitedTables);
    }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
index 8d0c96f9671216ef6f4ecb0a2c47d7c7fee1a74c..886aa51cd5dce4eccebd44f464048c8b99a6b788 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
@@ -29,9 +29,11 @@ public class EntryGroup extends CompositeEntryBase {
          };
       default:
          return (lootContext, consumer) -> {
-            for(ComposableEntryContainer composableEntryContainer : composableEntryContainers) {
-               composableEntryContainer.expand(lootContext, consumer);
+            // MagmaCube start - decompile error
+            for(ComposableEntryContainer composableEntryContainerz : composableEntryContainers) {
+               composableEntryContainerz.expand(lootContext, consumer);
             }
+            // MagmaCube end - decompile error
 
             return true;
          };
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
index cf326b9b5a22662a4533fd07fc399015eef9707c..05fa400f91896fa5fe1e6b41a64bcd1c277e0db8 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
@@ -47,7 +47,7 @@ public class EnchantRandomlyFunction extends LootItemConditionalFunction {
       Enchantment enchantment;
       if (this.enchantments.isEmpty()) {
          boolean flag = itemStack.is(Items.BOOK);
-         List<Enchantment> list = (List)Registry.ENCHANTMENT.stream().filter(Enchantment::isDiscoverable).filter((enchantment) -> flag || enchantment.canEnchant(itemStack)).collect(Collectors.toList());
+         List<Enchantment> list = (List)Registry.ENCHANTMENT.stream().filter(Enchantment::isDiscoverable).filter((enchantmentx) -> flag || enchantmentx.canEnchant(itemStack)).collect(Collectors.toList()); // MagmaCube - decompile error
          if (list.isEmpty()) {
             LOGGER.warn("Couldn't find a compatible enchantment for {}", itemStack);
             return itemStack;
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
index 1de1778d0a159793dcc38faa08b61c8efc337895..172eb3f347d225ef99eb62535e70f27ec016101e 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
@@ -54,9 +54,11 @@ public class LootItemFunctions {
          return (itemStack, lootContext) -> (ItemStack)biFunction2.apply((ItemStack)biFunction.apply(itemStack, lootContext), lootContext);
       default:
          return (itemStack, lootContext) -> {
-            for(BiFunction<ItemStack, LootContext, ItemStack> biFunction : biFunctions) {
-               itemStack = (ItemStack)biFunction.apply(itemStack, lootContext);
+            // MagmaCube start - decompile error
+            for(BiFunction<ItemStack, LootContext, ItemStack> biFunctionx : biFunctions) {
+               itemStack = (ItemStack)biFunctionx.apply(itemStack, lootContext);
             }
+            // MagmaCube end - decompile error
 
             return itemStack;
          };
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
index f49f1231e6a5fcdf35aa328a3ea22fabf966a0e2..2e68b62f7e809c3d01318f337a539b28e0dfa094 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
@@ -79,10 +79,12 @@ public class SetBannerPatternFunction extends LootItemConditionalFunction {
          super.serialize(jsonObject, setBannerPatternFunction, jsonSerializationContext);
          JsonArray jsonArray = new JsonArray();
          setBannerPatternFunction.patterns.forEach((pair) -> {
-            JsonObject jsonObject = new JsonObject();
-            jsonObject.addProperty("pattern", ((BannerPattern)pair.getFirst()).getFilename());
-            jsonObject.addProperty("color", ((DyeColor)pair.getSecond()).getName());
-            jsonArray.add(jsonObject);
+            // MagmaCube start - decompile error
+            JsonObject jsonObjectx = new JsonObject();
+            jsonObjectx.addProperty("pattern", ((BannerPattern)pair.getFirst()).getFilename());
+            jsonObjectx.addProperty("color", ((DyeColor)pair.getSecond()).getName());
+            jsonArray.add(jsonObjectx);
+            // MagmaCube end - decompile error
          });
          jsonObject.add("patterns", jsonArray);
          jsonObject.addProperty("append", setBannerPatternFunction.append);
diff --git a/src/main/java/net/minecraft/world/level/timers/TimerQueue.java b/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
index 3768e44d9d46753ab3cbcbae52e3932aeef2b3f6..f73df59eda996a43b4132c13cce618a3304a4296 100644
--- a/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
+++ b/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
@@ -28,7 +28,7 @@ public class TimerQueue<T> {
    private final Table<String, Long, TimerQueue.Event<T>> events = HashBasedTable.create();
 
    private static <T> Comparator<TimerQueue.Event<T>> createComparator() {
-      return Comparator.comparingLong((event) -> event.triggerTime).thenComparing((event) -> event.sequentialId);
+      return Comparator.<Event<T>>comparingLong((event) -> event.triggerTime).thenComparing((event) -> event.sequentialId); // MagmaCube - decompile error
    }
 
    public TimerQueue(TimerCallbacks<T> timerCallbacks, Stream<Dynamic<Tag>> stream) {
diff --git a/src/main/java/net/minecraft/world/scores/Scoreboard.java b/src/main/java/net/minecraft/world/scores/Scoreboard.java
index a69558a90182b9ded5f656a7d30c7a8ea5177567..50060b7ef8165e02d79209f89dcde0e58232ef61 100644
--- a/src/main/java/net/minecraft/world/scores/Scoreboard.java
+++ b/src/main/java/net/minecraft/world/scores/Scoreboard.java
@@ -60,7 +60,7 @@ public class Scoreboard {
    }
 
    public final void forAllObjectives(ObjectiveCriteria objectiveCriteria, String s, Consumer<Score> consumer) {
-      ((List)this.objectivesByCriteria.getOrDefault(objectiveCriteria, Collections.emptyList())).forEach((objective) -> consumer.accept(this.getOrCreatePlayerScore(s, objective)));
+      ((List)this.objectivesByCriteria.getOrDefault(objectiveCriteria, Collections.emptyList())).forEach((objective) -> consumer.accept(this.getOrCreatePlayerScore(s, (Objective) objective))); // MagmaCube - decompile error
    }
 
    public boolean hasPlayerScore(String s, Objective objective) {
