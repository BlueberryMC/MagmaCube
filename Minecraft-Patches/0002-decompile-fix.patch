From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Sat, 26 Sep 2020 00:02:07 +0900
Subject: [PATCH] decompile fix


diff --git a/src/main/java/com/mojang/blaze3d/audio/Channel.java b/src/main/java/com/mojang/blaze3d/audio/Channel.java
index a52832640a5258bc00b8d9c70c6bd936d2899aa4..ea954fe38cfd0e580c1958f05ad8f0b9d05c1d09 100644
--- a/src/main/java/com/mojang/blaze3d/audio/Channel.java
+++ b/src/main/java/com/mojang/blaze3d/audio/Channel.java
@@ -121,7 +121,7 @@ public class Channel
     }
     
     public void attachStaticBuffer(final SoundBuffer debug1) {
-        debug1.getAlBuffer().ifPresent(debug1 -> AL10.alSourcei(this.source, 4105, debug1));
+        debug1.getAlBuffer().ifPresent(debug1l -> AL10.alSourcei(this.source, 4105, debug1l)); // MagmaCube - decompile fix
     }
     
     public void attachBufferStream(final AudioStream debug1) {
@@ -141,7 +141,7 @@ public class Channel
                 for (int debug2 = 0; debug2 < debug1; ++debug2) {
                     final ByteBuffer debug3 = this.stream.read(this.streamingBufferSize);
                     if (debug3 != null) {
-                        new SoundBuffer(debug3, this.stream.getFormat()).releaseAlBuffer().ifPresent(debug1 -> AL10.alSourceQueueBuffers(this.source, new int[] { debug1 }));
+                        new SoundBuffer(debug3, this.stream.getFormat()).releaseAlBuffer().ifPresent(debug1l -> AL10.alSourceQueueBuffers(this.source, new int[] { debug1l })); // MagmaCube - decompile fix
                     }
                 }
             }
diff --git a/src/main/java/com/mojang/blaze3d/platform/GLX.java b/src/main/java/com/mojang/blaze3d/platform/GLX.java
index 42ce6091e77bc83833d73e67f626e50475ce0a6a..5dfb97a94317b1480f18bc0046a8149da3d473ce 100644
--- a/src/main/java/com/mojang/blaze3d/platform/GLX.java
+++ b/src/main/java/com/mojang/blaze3d/platform/GLX.java
@@ -61,11 +61,10 @@ public class GLX
         RenderSystem.assertThread(RenderSystem::isInInitPhase);
         final IllegalStateException ex;
         Window.checkGlfwError((debug0, debug1) -> {
-            new IllegalStateException(String.format("GLFW error before init: [0x%X]%s", debug0, debug1));
-            throw ex;
+            throw new IllegalStateException(String.format("GLFW error before init: [0x%X]%s", debug0, debug1)); // MagmaCube - decompile fix
         });
-        final List<String> debug2 = (List<String>)Lists.newArrayList();
-        final GLFWErrorCallback debug3 = GLFW.glfwSetErrorCallback((debug1, debug2) -> debug2.add(String.format("GLFW error during init: [0x%X]%s", debug1, debug2)));
+        final List<String> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
+        final GLFWErrorCallback debug3 = GLFW.glfwSetErrorCallback((debug1, debug2l) -> debug2.add(String.format("GLFW error during init: [0x%X]%s", debug1, debug2l))); // MagmaCube - decompile fix
         if (GLFW.glfwInit()) {
             final LongSupplier debug4 = () -> (long)(GLFW.glfwGetTime() * 1.0E9);
             for (final String debug5 : debug2) {
@@ -173,7 +172,7 @@ public class GLX
     static {
         LOGGER = LogManager.getLogger();
         GLX.capsString = "";
-        LOOKUP_MAP = make((Map<Integer, String>)Maps.newHashMap(), debug0 -> {
+        LOOKUP_MAP = make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put(0, "No error");
             debug0.put(1280, "Enum parameter is invalid for this function");
             debug0.put(1281, "Parameter is invalid for this function");
diff --git a/src/main/java/com/mojang/blaze3d/platform/GlDebug.java b/src/main/java/com/mojang/blaze3d/platform/GlDebug.java
index b0cf86157b906f3d7bb71ef6bfb53fc849473145..d47d041fe7a1638443d5fb80912ac7e9859f213f 100644
--- a/src/main/java/com/mojang/blaze3d/platform/GlDebug.java
+++ b/src/main/java/com/mojang/blaze3d/platform/GlDebug.java
@@ -119,7 +119,7 @@ public class GlDebug
     }
     
     private static void setup(final int debug0, final String debug1) {
-        GlDebug.BY_ID.merge(debug0, debug1, (debug0, debug1) -> debug0 + "/" + debug1);
+        GlDebug.BY_ID.merge(debug0, debug1, (debug02, debug12) -> debug02 + "/" + debug12); // MagmaCube - decompile fix
     }
     
     public static void enableDebugCallback(final int debug0, final boolean debug1) {
@@ -156,7 +156,7 @@ public class GlDebug
         BYTE_BUFFER = MemoryTracker.createByteBuffer(64);
         FLOAT_BUFFER = GlDebug.BYTE_BUFFER.asFloatBuffer();
         INT_BUFFER = GlDebug.BYTE_BUFFER.asIntBuffer();
-        NEWLINE_JOINER = Joiner.on('Â¥n');
+        NEWLINE_JOINER = Joiner.on('\n'); // MagmaCube - decompile fix
         STATEMENT_JOINER = Joiner.on("; ");
         BY_ID = Maps.newHashMap();
         DEBUG_LEVELS = (List)ImmutableList.of((Object)37190, (Object)37191, (Object)37192, (Object)33387);
diff --git a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
index 7db8ceddfdcb09ffbaca7abbec193d896da08e45..2c647707ae018a3348e60b551faaae6042dfe97d 100644
--- a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
+++ b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
@@ -74,7 +74,7 @@ public class InputConstants
     
     public static boolean isRawMouseInputSupported() {
         try {
-            return InputConstants.glfwRawMouseMotionSupported != null && InputConstants.glfwRawMouseMotionSupported.invokeExact();
+            return InputConstants.glfwRawMouseMotionSupported != null && (boolean) InputConstants.glfwRawMouseMotionSupported.invokeExact(); // MagmaCube - decompile fix
         }
         catch (Throwable debug0) {
             throw new RuntimeException(debug0);
@@ -95,7 +95,7 @@ public class InputConstants
         try {
             debug3 = debug0.findStatic(GLFW.class, "glfwRawMouseMotionSupported", debug2);
             final MethodHandle debug5 = debug0.findStaticGetter(GLFW.class, "GLFW_RAW_MOUSE_MOTION", Integer.TYPE);
-            debug4 = debug5.invokeExact();
+            debug4 = (int) debug5.invokeExact(); // MagmaCube - decompile fix
         }
         catch (NoSuchMethodException | NoSuchFieldException ex) {}
         catch (Throwable debug6) {
@@ -109,37 +109,40 @@ public class InputConstants
     public enum Type
     {
         KEYSYM("key.keyboard", (debug0, debug1) -> {
-            debug2 = GLFW.glfwGetKeyName((int)debug0, -1);
+            String debug2 = GLFW.glfwGetKeyName((int)debug0, -1); // MagmaCube - decompile fix
+            Component o3; // MagmaCube - decompile fix
             if (debug2 != null) {
                 // new(net.minecraft.network.chat.TextComponent.class)
-                new TextComponent(debug2);
+                o3 = new TextComponent(debug2); // MagmaCube - decompile fix
             }
             else {
                 // new(net.minecraft.network.chat.TranslatableComponent.class)
-                new TranslatableComponent(debug1);
+                o3 = new TranslatableComponent(debug1); // MagmaCube - decompile fix
             }
             return o3;
         }), 
         SCANCODE("scancode", (debug0, debug1) -> {
-            debug3 = GLFW.glfwGetKeyName(-1, (int)debug0);
+            String debug3 = GLFW.glfwGetKeyName(-1, (int)debug0); // MagmaCube - decompile fix
+            Component o6; // MagmaCube - decompile fix
             if (debug3 != null) {
                 // new(net.minecraft.network.chat.TextComponent.class)
-                new TextComponent(debug3);
+                o6 = new TextComponent(debug3); // MagmaCube - decompile fix
             }
             else {
                 // new(net.minecraft.network.chat.TranslatableComponent.class)
-                new TranslatableComponent(debug1);
+                o6 = new TranslatableComponent(debug1); // MagmaCube - decompile fix
             }
             return o6;
         }), 
         MOUSE("key.mouse", (debug0, debug1) -> {
+            Component o9; // MagmaCube - decompile fix
             if (Language.getInstance().has(debug1)) {
                 // new(net.minecraft.network.chat.TranslatableComponent.class)
-                new TranslatableComponent(debug1);
+                o9 = new TranslatableComponent(debug1); // MagmaCube - decompile fix
             }
             else {
                 // new(net.minecraft.network.chat.TranslatableComponent.class)
-                new TranslatableComponent("key.mouse", new Object[] { debug0 + 1 });
+                o9 = new TranslatableComponent("key.mouse", new Object[] { debug0 + 1 }); // MagmaCube - decompile fix
             }
             return o9;
         });
@@ -150,7 +153,7 @@ public class InputConstants
         
         private static void addKey(final Type debug0, final String debug1, final int debug2) {
             final Key debug3 = new Key(debug1, debug0, debug2);
-            debug0.map.put(debug2, (Object)debug3);
+            debug0.map.put(debug2, debug3); // MagmaCube - decompile fix
         }
         
         private Type(final String debug3, final BiFunction<Integer, String, Component> debug4) {
@@ -160,15 +163,13 @@ public class InputConstants
         }
         
         public Key getOrCreate(final int debug1) {
-            int debug2;
-            final String debug3;
-            return (Key)this.map.computeIfAbsent(debug1, debug1 -> {
-                debug2 = debug1;
+            return (Key)this.map.computeIfAbsent(debug1, debug1l -> { // MagmaCube - decompile fix
+                int debug2 = debug1l; // MagmaCube - decompile fix
                 if (this == Type.MOUSE) {
                     ++debug2;
                 }
-                debug3 = this.defaultPrefix + "." + debug2;
-                return new Key(debug3, this, debug1);
+                String debug3 = this.defaultPrefix + "." + debug2; // MagmaCube - decompile fix
+                return new Key(debug3, this, debug1l); // MagmaCube - decompile fix
             });
         }
         
diff --git a/src/main/java/com/mojang/blaze3d/platform/Monitor.java b/src/main/java/com/mojang/blaze3d/platform/Monitor.java
index 867ac21a821f3d428642625cd79c5342a893b1f4..2aef0c9cb3683d0a76d5c9d803be64c0f6f31670 100644
--- a/src/main/java/com/mojang/blaze3d/platform/Monitor.java
+++ b/src/main/java/com/mojang/blaze3d/platform/Monitor.java
@@ -18,7 +18,7 @@ public final class Monitor
     
     public Monitor(final long debug1) {
         this.monitor = debug1;
-        this.videoModes = (List<VideoMode>)Lists.newArrayList();
+        this.videoModes = Lists.newArrayList(); // MagmaCube - decompile fix
         this.refreshVideoModes();
     }
     
diff --git a/src/main/java/com/mojang/blaze3d/platform/NativeImage.java b/src/main/java/com/mojang/blaze3d/platform/NativeImage.java
index b739528064943d45f57721c1c7f67f965cc82fe8..fb49b72c42c2b6fbb24f9e1353f927722ea2a1f1 100644
--- a/src/main/java/com/mojang/blaze3d/platform/NativeImage.java
+++ b/src/main/java/com/mojang/blaze3d/platform/NativeImage.java
@@ -112,7 +112,7 @@ public final class NativeImage implements AutoCloseable
             if (debug6 == null) {
                 throw new IOException("Could not load image: " + STBImage.stbi_failure_reason());
             }
-            return new NativeImage((debug0 == null) ? getStbFormat(debug5.get(0)) : debug0, debug3.get(0), debug4.get(0), true, MemoryUtil.memAddress(debug6));
+            return new NativeImage((debug0 == null) ? Format.getStbFormat(debug5.get(0)) : debug0, debug3.get(0), debug4.get(0), true, MemoryUtil.memAddress(debug6)); // MagmaCube - decompile fix
         }
     }
     
@@ -299,7 +299,7 @@ public final class NativeImage implements AutoCloseable
         this.checkAllocated();
         try (final WritableByteChannel debug2 = Files.newByteChannel(debug1, NativeImage.OPEN_OPTIONS, (FileAttribute<?>[])new FileAttribute[0])) {
             if (!this.writeToChannel(debug2)) {
-                throw new IOException("Could not write image to the PNG file Â¥"" + debug1.toAbsolutePath() + "Â¥": " + STBImage.stbi_failure_reason());
+                throw new IOException("Could not write image to the PNG file \"" + debug1.toAbsolutePath() + "\": " + STBImage.stbi_failure_reason()); // MagmaCube - decompile fix
             }
         }
     }
diff --git a/src/main/java/com/mojang/blaze3d/platform/ScreenManager.java b/src/main/java/com/mojang/blaze3d/platform/ScreenManager.java
index 51bb17d4aedd022e040298938b46434eafddbf7c..7b656db085b5ffb9735b90c716a4e8593e39817d 100644
--- a/src/main/java/com/mojang/blaze3d/platform/ScreenManager.java
+++ b/src/main/java/com/mojang/blaze3d/platform/ScreenManager.java
@@ -24,7 +24,7 @@ public class ScreenManager
         if (debug2 != null) {
             for (int debug3 = 0; debug3 < debug2.limit(); ++debug3) {
                 final long debug4 = debug2.get(debug3);
-                this.monitors.put(debug4, (Object)debug1.createMonitor(debug4));
+                this.monitors.put(debug4, debug1.createMonitor(debug4)); // MagmaCube - decompile fix
             }
         }
     }
@@ -32,7 +32,7 @@ public class ScreenManager
     private void onMonitorChange(final long debug1, final int debug3) {
         RenderSystem.assertThread(RenderSystem::isOnRenderThread);
         if (debug3 == 262145) {
-            this.monitors.put(debug1, (Object)this.monitorCreator.createMonitor(debug1));
+            this.monitors.put(debug1, this.monitorCreator.createMonitor(debug1)); // MagmaCube - decompile fix
         }
         else if (debug3 == 262146) {
             this.monitors.remove(debug1);
diff --git a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
index d1967b2d5decf6c3700ac2ce81b8e0fc45912a1d..60ca1fc02a311fa164c8c0e89c2318829e7b1e53 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
@@ -34,7 +34,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
     private boolean building;
     
     public BufferBuilder(final int debug1) {
-        this.vertexCounts = (List<DrawState>)Lists.newArrayList();
+        this.vertexCounts = Lists.newArrayList(); // MagmaCube - decompile fix
         this.lastRenderedCountIndex = 0;
         this.totalRenderedBytes = 0;
         this.nextElementByte = 0;
@@ -87,7 +87,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         for (int debug9 = 0; debug9 < debug8.length; ++debug9) {
             debug8[debug9] = debug9;
         }
-        IntArrays.mergeSort(debug8, (debug1, debug2) -> Floats.compare(debug6[debug2], debug6[debug1]));
+        IntArrays.mergeSort(debug8, (debug1l, debug2l) -> Floats.compare(debug6[debug2l], debug6[debug1l])); // MagmaCube - decompile fix
         final BitSet debug10 = new BitSet();
         final FloatBuffer debug11 = MemoryTracker.createFloatBuffer(this.format.getIntegerSize() * 4);
         for (int debug12 = debug10.nextClearBit(0); debug12 < debug8.length; debug12 = debug10.nextClearBit(debug12 + 1)) {
@@ -229,7 +229,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
             this.nextElement();
         }
         if (this.defaultColorSet && this.currentElement.getUsage() == VertexFormatElement.Usage.COLOR) {
-            super.color(this.defaultR, this.defaultG, this.defaultB, this.defaultA);
+            super.color((float) this.defaultR, this.defaultG, this.defaultB, this.defaultA); // MagmaCube - decompile fix
         }
     }
     
@@ -238,7 +238,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         if (this.defaultColorSet) {
             throw new IllegalStateException();
         }
-        return super.color(debug1, debug2, debug3, debug4);
+        return super.color((float) debug1, debug2, debug3, debug4); // MagmaCube - decompile fix
     }
     
     @Override
@@ -287,7 +287,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         }
         final ByteBuffer debug2 = this.buffer.slice();
         this.buffer.clear();
-        return (Pair<DrawState, ByteBuffer>)Pair.of((Object)debug1, (Object)debug2);
+        return (Pair<DrawState, ByteBuffer>)Pair.of(debug1, debug2); // MagmaCube - decompile fix
     }
     
     public void clear() {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/BufferVertexConsumer.java b/src/main/java/com/mojang/blaze3d/vertex/BufferVertexConsumer.java
index d76279bdaf68ed147bf27cf836fb2cf40b3c57ee..7b92f5a9f3b3856ecf5e2b272e3420cd369e8805 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/BufferVertexConsumer.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/BufferVertexConsumer.java
@@ -92,7 +92,7 @@ public interface BufferVertexConsumer extends VertexConsumer
         return this;
     }
     
-    default byte normalIntValue(final float debug0) {
+    static byte normalIntValue(final float debug0) { // MagmaCube - decompile fix
         return (byte)((int)(Mth.clamp(debug0, -1.0f, 1.0f) * 127.0f) & 0xFF);
     }
 }
diff --git a/src/main/java/com/mojang/blaze3d/vertex/PoseStack.java b/src/main/java/com/mojang/blaze3d/vertex/PoseStack.java
index 7e37272a4374c7c5cb11dee10451aa9d96966209..44a2090560998f1c932bbcc14815ba41f6ddfc77 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/PoseStack.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/PoseStack.java
@@ -14,12 +14,10 @@ public class PoseStack
     private final Deque<Pose> poseStack;
     
     public PoseStack() {
-        final Matrix4f debug;
-        final Matrix3f debug2;
-        this.poseStack = Util.make((Deque<Pose>)Queues.newArrayDeque(), debug0 -> {
-            debug = new Matrix4f();
+        this.poseStack = Util.make(Queues.newArrayDeque(), debug0 -> { // MagmaCube - decompile fix
+            Matrix4f debug = new Matrix4f(); // MagmaCube - decompile fix
             debug.setIdentity();
-            debug2 = new Matrix3f();
+            Matrix3f debug2 = new Matrix3f(); // MagmaCube - decompile fix
             debug2.setIdentity();
             debug0.add(new Pose(debug, debug2));
         });
diff --git a/src/main/java/com/mojang/blaze3d/vertex/VertexBuffer.java b/src/main/java/com/mojang/blaze3d/vertex/VertexBuffer.java
index 725182d758acfd3211a7a24fe45274a9b180ec07..f8d707cb8186388bd719da0085ef7fe621bb4863 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/VertexBuffer.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/VertexBuffer.java
@@ -14,7 +14,7 @@ public class VertexBuffer implements AutoCloseable
     
     public VertexBuffer(final VertexFormat debug1) {
         this.format = debug1;
-        RenderSystem.glGenBuffers(debug1 -> this.id = debug1);
+        RenderSystem.glGenBuffers(debug1l -> this.id = debug1l); // MagmaCube - decompile fix
     }
     
     public void bind() {
diff --git a/src/main/java/com/mojang/math/Matrix3f.java b/src/main/java/com/mojang/math/Matrix3f.java
index d3afc81bc7e2b173dc5d35924773ab7bb14efc59..6eabc66a4ac0576668c18fe4c1d0614fc266887b 100644
--- a/src/main/java/com/mojang/math/Matrix3f.java
+++ b/src/main/java/com/mojang/math/Matrix3f.java
@@ -84,9 +84,9 @@ public final class Matrix3f
         final float debug3 = 2.0f * (debug0 - debug2);
         if (Matrix3f.G * debug1 * debug1 < debug3 * debug3) {
             final float debug4 = Mth.fastInvSqrt(debug1 * debug1 + debug3 * debug3);
-            return (Pair<Float, Float>)Pair.of((Object)(debug4 * debug1), (Object)(debug4 * debug3));
+            return (Pair<Float, Float>)Pair.of((debug4 * debug1), (debug4 * debug3)); // MagmaCube - decompile fix
         }
-        return (Pair<Float, Float>)Pair.of((Object)Matrix3f.SS, (Object)Matrix3f.CS);
+        return (Pair<Float, Float>)Pair.of(Matrix3f.SS, Matrix3f.CS); // MagmaCube - decompile fix
     }
     
     private static Pair<Float, Float> qrGivensQuat(final float debug0, final float debug1) {
@@ -101,7 +101,7 @@ public final class Matrix3f
         final float debug5 = Mth.fastInvSqrt(debug4 * debug4 + debug3 * debug3);
         debug4 *= debug5;
         debug3 *= debug5;
-        return (Pair<Float, Float>)Pair.of((Object)debug3, (Object)debug4);
+        return (Pair<Float, Float>)Pair.of(debug3, debug4); // MagmaCube - decompile fix
     }
     
     private static Quaternion stepJacobi(final Matrix3f debug0) {
@@ -249,7 +249,7 @@ public final class Matrix3f
         debug6 = 1.0f / debug6;
         debug1.mul((float)Math.sqrt(debug6));
         final Vector3f debug29 = new Vector3f(debug28.m00 * debug6, debug28.m11 * debug6, debug28.m22 * debug6);
-        return (Triple<Quaternion, Vector3f, Quaternion>)Triple.of((Object)debug1, (Object)debug29, (Object)debug2);
+        return (Triple<Quaternion, Vector3f, Quaternion>)Triple.of(debug1, debug29, debug2); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/com/mojang/realmsclient/client/FileDownload.java b/src/main/java/com/mojang/realmsclient/client/FileDownload.java
index c506a6e61cc1712e62d8f69ac4fa016877b9ddf3..1dc52faf6ced4ee5059603c42724fd64a573c905 100644
--- a/src/main/java/com/mojang/realmsclient/client/FileDownload.java
+++ b/src/main/java/com/mojang/realmsclient/client/FileDownload.java
@@ -36,6 +36,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.nio.file.Path;
+import java.util.Iterator;
 import java.util.Locale;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -46,6 +47,7 @@ import net.minecraft.nbt.NbtIo;
 import net.minecraft.world.level.storage.LevelResource;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.LevelSummary;
+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
 import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
 import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
 import org.apache.commons.io.FileUtils;
@@ -118,7 +120,7 @@ public class FileDownload {
                 this.request = new HttpGet(debug1.downloadLink);
                 debug5 = HttpClientBuilder.create().setDefaultRequestConfig(this.requestConfig).build();
                 CloseableHttpResponse debug6 = debug5.execute((HttpUriRequest)this.request);
-                debug2.totalBytes = Long.parseLong(debug6.getFirstHeader("Content-Length").getValue());
+                debug3.totalBytes = Long.parseLong(debug6.getFirstHeader("Content-Length").getValue()); // MagmaCube - decompile fix
                 if (debug6.getStatusLine().getStatusCode() != 200) {
                     this.error = true;
                     this.request.abort();
@@ -149,23 +151,25 @@ public class FileDownload {
                             this.tempFile = File.createTempFile("resources", ".tar.gz");
                             this.request = new HttpGet(debug1.resourcePackUrl);
                             CloseableHttpResponse debug6 = debug5.execute((HttpUriRequest)this.request);
-                            debug2.totalBytes = Long.parseLong(debug6.getFirstHeader("Content-Length").getValue());
+                            debug3.totalBytes = Long.parseLong(debug6.getFirstHeader("Content-Length").getValue()); // MagmaCube - decompile fix
                             if (debug6.getStatusLine().getStatusCode() != 200) {
                                 this.error = true;
                                 this.request.abort();
                                 return;
                             }
+                            // MagmaCube start - decompile fix
+                            FileOutputStream debug7 = new FileOutputStream(this.tempFile);
+                            ResourcePackProgressListener debug8 = new ResourcePackProgressListener(this.tempFile, debug3, debug1);
+                            DownloadCountingOutputStream debug9 = new DownloadCountingOutputStream(debug7);
+                            debug9.setListener(debug8);
+                            IOUtils.copy((InputStream)debug6.getEntity().getContent(), (OutputStream)((Object)debug9));
+                            break block40;
+                            // MagmaCube end - decompile fix
                         }
                         catch (Exception debug6) {
                             LOGGER.error("Caught exception while downloading: " + debug6.getMessage());
                             this.error = true;
                         }
-                        FileOutputStream debug7 = new FileOutputStream(this.tempFile);
-                        ResourcePackProgressListener debug8 = new ResourcePackProgressListener(this.tempFile, debug3, debug1);
-                        DownloadCountingOutputStream debug9 = new DownloadCountingOutputStream(debug7);
-                        debug9.setListener(debug8);
-                        IOUtils.copy((InputStream)debug6.getEntity().getContent(), (OutputStream)((Object)debug9));
-                        break block40;
                         finally {
                             this.request.releaseConnection();
                             if (this.tempFile != null) {
@@ -212,7 +216,7 @@ public class FileDownload {
     }
 
     public static String findAvailableFolderName(String debug0) {
-        debug0 = debug0.replaceAll("[Â¥Â¥./Â¥"]", "_");
+        debug0 = debug0.replaceAll("[\\./\"]", "_"); // MagmaCube - decompile fix
         for (String debug4 : INVALID_FILE_NAMES) {
             if (!debug0.equalsIgnoreCase(debug4)) continue;
             debug0 = "_" + debug0 + "_";
@@ -236,7 +240,7 @@ public class FileDownload {
                     char debug10;
                     Pattern debug4 = Pattern.compile(".*-([0-9]+)$");
                     debug6 = 1;
-                    Object object = SharedConstants.ILLEGAL_FILE_CHARACTERS;
+                    char[] object = SharedConstants.ILLEGAL_FILE_CHARACTERS; // MagmaCube - decompile fix
                     int n = ((char[])object).length;
                     for (int n2 = 0; n2 < n; debug1 = debug1.replace(debug10, '_'), ++n2) {
                         debug10 = object[n2];
@@ -246,9 +250,11 @@ public class FileDownload {
                     }
                     debug1 = FileDownload.findAvailableFolderName(debug1);
                     try {
-                        object = debug3.getLevelList().iterator();
-                        while (object.hasNext()) {
-                            LevelSummary debug8 = (LevelSummary)object.next();
+                        // MagmaCube start - decompile fix
+                        Iterator<LevelSummary> object2 = debug3.getLevelList().iterator();
+                        while (object2.hasNext()) {
+                            LevelSummary debug8 = (LevelSummary)object2.next();
+                            // MagmaCube end - decompile fix
                             if (!debug8.getLevelId().toLowerCase(Locale.ROOT).startsWith(debug1.toLowerCase(Locale.ROOT))) continue;
                             Matcher debug9 = debug4.matcher(debug8.getLevelId());
                             if (debug9.matches()) {
@@ -264,7 +270,7 @@ public class FileDownload {
                         this.error = true;
                         return;
                     }
-                    if (debug3.isNewLevelIdAcceptable(debug1) && debug6 <= true) break block65;
+                    if (debug3.isNewLevelIdAcceptable(debug1) && debug6 <= 1) break block65; // MagmaCube - decompile fix
                     debug5 = debug1 + (debug6 == 1 ? "" : "-" + debug6);
                     if (debug3.isNewLevelIdAcceptable(debug5)) break block66;
                     debug7 = false;
@@ -284,7 +290,7 @@ public class FileDownload {
         try {
             debug8.mkdir();
             debug7 = new TarArchiveInputStream((InputStream)new GzipCompressorInputStream((InputStream)new BufferedInputStream(new FileInputStream(debug2))));
-            Object debug9 = debug7.getNextTarEntry();
+            TarArchiveEntry debug9 = debug7.getNextTarEntry(); // MagmaCube - decompile fix
             while (debug9 != null) {
                 File debug10 = new File(debug8, debug9.getName().replace("world", debug5));
                 if (debug9.isDirectory()) {
diff --git a/src/main/java/com/mojang/realmsclient/dto/RealmsServer.java b/src/main/java/com/mojang/realmsclient/dto/RealmsServer.java
index 4476935dacf525d453a4b31f0a8b162f24934dd0..67d71ae3aebf45e55ef12df260b0827702371a7a 100644
--- a/src/main/java/com/mojang/realmsclient/dto/RealmsServer.java
+++ b/src/main/java/com/mojang/realmsclient/dto/RealmsServer.java
@@ -102,7 +102,7 @@ extends ValueObject {
             ++debug3;
         }
         this.serverPing.nrOfPlayers = String.valueOf(debug3);
-        this.serverPing.playerList = Joiner.on((char)'Â¥n').join((Iterable)debug2);
+        this.serverPing.playerList = Joiner.on((char)'\n').join((Iterable)debug2); // MagmaCube - decompile fix
     }
 
     public static RealmsServer parse(JsonObject debug0) {
@@ -270,10 +270,6 @@ extends ValueObject {
         return this.name + " (" + this.slots.get(debug1).getSlotName(debug1) + ")";
     }
 
-    public /* synthetic */ Object clone() throws CloneNotSupportedException {
-        return this.clone();
-    }
-
     public static enum WorldType {
         NORMAL,
         MINIGAME,
@@ -302,11 +298,6 @@ extends ValueObject {
         public int compare(RealmsServer debug1, RealmsServer debug2) {
             return ComparisonChain.start().compareTrueFirst(debug1.state == State.UNINITIALIZED, debug2.state == State.UNINITIALIZED).compareTrueFirst(debug1.expiredTrial, debug2.expiredTrial).compareTrueFirst(debug1.owner.equals(this.refOwner), debug2.owner.equals(this.refOwner)).compareFalseFirst(debug1.expired, debug2.expired).compareTrueFirst(debug1.state == State.OPEN, debug2.state == State.OPEN).compare(debug1.id, debug2.id).result();
         }
-
-        @Override
-        public /* synthetic */ int compare(Object object, Object object2) {
-            return this.compare((RealmsServer)object, (RealmsServer)object2);
-        }
     }
 }
 
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsPendingInvitesScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsPendingInvitesScreen.java
index 647f15844c692e3c408df4ac6a1ca1d993505b40..f5f3ce7ba9d1a7388381c5952032fad0622651bf 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsPendingInvitesScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsPendingInvitesScreen.java
@@ -302,8 +302,8 @@ extends RealmsScreen {
         public void selectItem(int debug1) {
             this.setSelectedItem(debug1);
             if (debug1 != -1) {
-                List debug2 = RealmsPendingInvitesScreen.this.pendingInvitationSelectionList.children();
-                PendingInvite debug3 = ((Entry)debug2.get(debug1)).pendingInvite;
+                List<RealmsPendingInvitesScreen.Entry> debug2 = RealmsPendingInvitesScreen.this.pendingInvitationSelectionList.children(); // MagmaCube - decompile fix
+                PendingInvite debug3 = (debug2.get(debug1)).pendingInvite; // MagmaCube - decompile fix
                 String debug4 = I18n.get("narrator.select.list.position", debug1 + 1, debug2.size());
                 String debug5 = NarrationHelper.join(Arrays.asList(debug3.worldName, debug3.worldOwnerName, RealmsUtil.convertToAgePresentationFromInstant(debug3.date), debug4));
                 NarrationHelper.now(I18n.get("narrator.select", debug5));
@@ -317,7 +317,7 @@ extends RealmsScreen {
         }
 
         @Override
-        public void setSelected(@Nullable Entry debug1) {
+        public void setSelected(@Nullable com.mojang.realmsclient.gui.screens.RealmsPendingInvitesScreen.Entry debug1) { // MagmaCube - decompile fix
             super.setSelected(debug1);
             RealmsPendingInvitesScreen.this.selectedInvite = this.children().indexOf(debug1);
             RealmsPendingInvitesScreen.this.updateButtonStates();
diff --git a/src/main/java/com/mojang/realmsclient/util/TextRenderingUtils.java b/src/main/java/com/mojang/realmsclient/util/TextRenderingUtils.java
index 607305622f68176e270fdecb1efdf15e5fd29b10..20b1e3f15f7830ecf75692880f4314c1782f1bfd 100644
--- a/src/main/java/com/mojang/realmsclient/util/TextRenderingUtils.java
+++ b/src/main/java/com/mojang/realmsclient/util/TextRenderingUtils.java
@@ -11,7 +11,7 @@ public class TextRenderingUtils
 {
     @VisibleForTesting
     protected static List<String> lineBreak(final String debug0) {
-        return Arrays.asList(debug0.split("Â¥Â¥n"));
+        return Arrays.asList(debug0.split("\\n")); // MagmaCube - decompile fix
     }
     
     public static List<Line> decompose(final String debug0, final LineSegment... debug1) {
@@ -25,9 +25,9 @@ public class TextRenderingUtils
     
     private static List<Line> insertLinks(final List<String> debug0, final List<LineSegment> debug1) {
         int debug2 = 0;
-        final List<Line> debug3 = (List<Line>)Lists.newArrayList();
+        final List<Line> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final String debug4 : debug0) {
-            final List<LineSegment> debug5 = (List<LineSegment>)Lists.newArrayList();
+            final List<LineSegment> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
             final List<String> debug6 = split(debug4, "%link");
             for (final String debug7 : debug6) {
                 if ("%link".equals(debug7)) {
@@ -46,7 +46,7 @@ public class TextRenderingUtils
         if (debug1.isEmpty()) {
             throw new IllegalArgumentException("Delimiter cannot be the empty string");
         }
-        final List<String> debug2 = (List<String>)Lists.newArrayList();
+        final List<String> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         int debug3;
         int debug4;
         for (debug3 = 0; (debug4 = debug0.indexOf(debug1, debug3)) != -1; debug3 = debug4 + debug1.length()) {
@@ -129,7 +129,7 @@ public class TextRenderingUtils
         
         @Override
         public String toString() {
-            return "Segment{fullText='" + this.fullText + 'Â¥'' + ", linkTitle='" + this.linkTitle + 'Â¥'' + ", linkUrl='" + this.linkUrl + 'Â¥'' + '}';
+            return "Segment{fullText='" + this.fullText + '\'' + ", linkTitle='" + this.linkTitle + '\'' + ", linkUrl='" + this.linkUrl + '\'' + '}'; // MagmaCube - decompile fix
         }
         
         public String renderedText() {
diff --git a/src/main/java/net/minecraft/CrashReportCategory.java b/src/main/java/net/minecraft/CrashReportCategory.java
index 33d54d55cee871fd93c273919ed2edc8b91dca94..39d31164f639533654c4de20f0cbb4326337b11a 100644
--- a/src/main/java/net/minecraft/CrashReportCategory.java
+++ b/src/main/java/net/minecraft/CrashReportCategory.java
@@ -16,7 +16,7 @@ public class CrashReportCategory
     private StackTraceElement[] stackTrace;
     
     public CrashReportCategory(final CrashReport debug1, final String debug2) {
-        this.entries = (List<Entry>)Lists.newArrayList();
+        this.entries = Lists.newArrayList(); // MagmaCube - decompile fix
         this.stackTrace = new StackTraceElement[0];
         this.report = debug1;
         this.title = debug2;
diff --git a/src/main/java/net/minecraft/FileUtil.java b/src/main/java/net/minecraft/FileUtil.java
index 48d507e799b47105b0226f0ab6ff0ed2f395a0c2..ecc96574db54a0aee7ab3cb1fb197b13ba0e9d1a 100644
--- a/src/main/java/net/minecraft/FileUtil.java
+++ b/src/main/java/net/minecraft/FileUtil.java
@@ -20,7 +20,7 @@ public class FileUtil
         for (final char debug3 : SharedConstants.ILLEGAL_FILE_CHARACTERS) {
             debug1 = debug1.replace(debug3, '_');
         }
-        debug1 = debug1.replaceAll("[./Â¥"]", "_");
+        debug1 = debug1.replaceAll("[./\"]", "_"); // MagmaCube - decompile fix
         if (FileUtil.RESERVED_WINDOWS_FILENAMES.matcher(debug1).matches()) {
             debug1 = "_" + debug1 + "_";
         }
diff --git a/src/main/java/net/minecraft/SharedConstants.java b/src/main/java/net/minecraft/SharedConstants.java
index 97a1e33d93a12fa271bc0ea73d3ed236383f0116..145298cf522d8d7bf2eafa028032b8987f3c36ce 100644
--- a/src/main/java/net/minecraft/SharedConstants.java
+++ b/src/main/java/net/minecraft/SharedConstants.java
@@ -17,7 +17,7 @@ public class SharedConstants
     private static GameVersion CURRENT_VERSION;
     
     public static boolean isAllowedChatCharacter(final char debug0) {
-        return debug0 != 'Â§' && debug0 >= ' ' && debug0 != 'Â¥u007f';
+        return debug0 != 'Â§' && debug0 >= ' ' && debug0 != '\u007f'; // MagmaCube - decompile fix
     }
     
     public static String filterText(final String debug0) {
@@ -41,7 +41,7 @@ public class SharedConstants
         NETTY_LEAK_DETECTION = ResourceLeakDetector.Level.DISABLED;
         MAXIMUM_TICK_TIME_NANOS = Duration.ofMillis(300L).toNanos();
         SharedConstants.CHECK_DATA_FIXER_SCHEMA = true;
-        ILLEGAL_FILE_CHARACTERS = new char[] { '/', 'Â¥n', 'Â¥r', 'Â¥t', 'Â¥0', 'Â¥f', '`', '?', '*', 'Â¥Â¥', '<', '>', '|', 'Â¥"', ':' };
+        ILLEGAL_FILE_CHARACTERS = new char[] { '/', '\n', '\r', '\t', '\0', '\f', '`', '?', '*', '\\', '<', '>', '|', '\"', ':' }; // MagmaCube - decompile fix
         ResourceLeakDetector.setLevel(SharedConstants.NETTY_LEAK_DETECTION);
         CommandSyntaxException.ENABLE_COMMAND_STACK_TRACES = false;
         CommandSyntaxException.BUILT_IN_EXCEPTIONS = (BuiltInExceptionProvider)new BrigadierExceptions();
diff --git a/src/main/java/net/minecraft/advancements/RequirementsStrategy.java b/src/main/java/net/minecraft/advancements/RequirementsStrategy.java
index 903569b4f9ede0a55bec5aa43f5bddf391f86582..8c13964a38a692262cf774406cda32d7f4cd33ab 100644
--- a/src/main/java/net/minecraft/advancements/RequirementsStrategy.java
+++ b/src/main/java/net/minecraft/advancements/RequirementsStrategy.java
@@ -6,26 +6,18 @@ import java.util.Collection;
 public interface RequirementsStrategy
 {
     public static final RequirementsStrategy AND = debug0 -> {
-        debug = new String[debug0.size()][];
-        debug2 = 0;
+        // MagmaCube start - decompile fix
+        String[][] debug = new String[debug0.size()][];
+        int debug2 = 0;
         debug0.iterator();
-        while (iterator.hasNext()) {
-            debug3 = iterator.next();
+        for (String s : debug0) {
             debug2++;
-            o[n] = new String[] { debug3 };
+            debug[debug2] = new String[] { s };
+            // MagmaCube end - decompile fix
         }
         return debug;
     };
     public static final RequirementsStrategy OR = debug0 -> new String[][] { debug0.toArray(new String[0]) };
     
     String[][] createRequirements(final Collection<String> p0);
-    
-    default static {
-        final String[][] debug;
-        int debug2;
-        final Iterator<String> iterator;
-        String debug3;
-        final Object o;
-        final int n;
-    }
 }
diff --git a/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java b/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java
index ce1dc85bc9f90e088fa080e5ef94c0e89befbebc..5717bbeb66b13c0b0f1147748c1a309efbce4844 100644
--- a/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java
@@ -10,7 +10,7 @@ import net.minecraft.world.level.block.Block;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class BeeNestDestroyedTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class BeeNestDestroyedTrigger extends SimpleCriterionTrigger<BeeNestDestroyedTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -30,18 +30,15 @@ public class BeeNestDestroyedTrigger extends SimpleCriterionTrigger<TriggerInsta
     private static Block deserializeBlock(final JsonObject debug0) {
         if (debug0.has("block")) {
             final ResourceLocation debug = new ResourceLocation(GsonHelper.getAsString(debug0, "block"));
-            final Object o;
-            final Object obj;
             return Registry.BLOCK.getOptional(debug).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown block type '" + obj + "'");
-                return o;
+                throw new JsonSyntaxException("Unknown block type '" + debug + "'"); // MagmaCube - decompile fix
             });
         }
         return null;
     }
     
     public void trigger(final ServerPlayer debug1, final Block debug2, final ItemStack debug3, final int debug4) {
-        this.trigger(debug1, debug3 -> debug3.matches(debug2, debug3, debug4));
+        this.trigger(debug1, debug3l -> debug3l.matches(debug2, debug3, debug4)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java b/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java
index 01f6911f0fefd47a2b6226c876f8f675fee8e5aa..9f57ee0685f1369c399aa42e5821d7d3a7c12631 100644
--- a/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java
@@ -9,7 +9,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class BredAnimalsTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class BredAnimalsTrigger extends SimpleCriterionTrigger<BredAnimalsTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -29,7 +29,7 @@ public class BredAnimalsTrigger extends SimpleCriterionTrigger<TriggerInstance>
         final LootContext debug5 = EntityPredicate.createContext(debug1, debug2);
         final LootContext debug6 = EntityPredicate.createContext(debug1, debug3);
         final LootContext debug7 = (debug4 != null) ? EntityPredicate.createContext(debug1, debug4) : null;
-        this.trigger(debug1, debug3 -> debug3.matches(debug5, debug6, debug7));
+        this.trigger(debug1, debug3l -> debug3l.matches(debug5, debug6, debug7)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java b/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java
index 3e60363a9538685357f3c1218b2219f8e531e64f..7a8e8b98cd42df69035bcef2e964463bdc9eeb1a 100644
--- a/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java
@@ -9,7 +9,7 @@ import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class BrewedPotionTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class BrewedPotionTrigger extends SimpleCriterionTrigger<BrewedPotionTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -22,18 +22,15 @@ public class BrewedPotionTrigger extends SimpleCriterionTrigger<TriggerInstance>
         Potion debug4 = null;
         if (debug1.has("potion")) {
             final ResourceLocation debug5 = new ResourceLocation(GsonHelper.getAsString(debug1, "potion"));
-            final Object o;
-            final Object obj;
             debug4 = Registry.POTION.getOptional(debug5).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown potion '" + obj + "'");
-                return o;
+                throw new JsonSyntaxException("Unknown potion '" + debug5 + "'"); // MagmaCube - decompile fix
             });
         }
         return new TriggerInstance(debug2, debug4);
     }
     
     public void trigger(final ServerPlayer debug1, final Potion debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java
index 9367db0c014f9f881e809f043029a8e9b8f316e0..72ca0c06c10e7048ab0a3040c176929b0425dd86 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java
@@ -9,7 +9,7 @@ import net.minecraft.core.Registry;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ChangeDimensionTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ChangeDimensionTrigger extends SimpleCriterionTrigger<ChangeDimensionTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -25,7 +25,7 @@ public class ChangeDimensionTrigger extends SimpleCriterionTrigger<TriggerInstan
     }
     
     public void trigger(final ServerPlayer debug1, final ResourceKey<Level> debug2, final ResourceKey<Level> debug3) {
-        this.trigger(debug1, debug2 -> debug2.matches(debug2, debug3));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug2, debug3)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java
index aa3bb6288769e029552ffece19d9e5d741c64d03..1fcb91cd9b032a88da7e71501c0ef39303e2e3a9 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java
@@ -22,7 +22,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.storage.loot.LootContext;
 
 public class ChanneledLightningTrigger
-extends SimpleCriterionTrigger<TriggerInstance> {
+extends SimpleCriterionTrigger<ChanneledLightningTrigger.TriggerInstance> { // MagmaCube - decompile fix
     private static final ResourceLocation ID = new ResourceLocation("channeled_lightning");
 
     @Override
@@ -30,21 +30,14 @@ extends SimpleCriterionTrigger<TriggerInstance> {
         return ID;
     }
 
-    @Override
     public TriggerInstance createInstance(JsonObject debug1, EntityPredicate.Composite debug2, DeserializationContext debug3) {
         EntityPredicate.Composite[] debug4 = EntityPredicate.Composite.fromJsonArray(debug1, "victims", debug3);
         return new TriggerInstance(debug2, debug4);
     }
 
-    @Override
     public void trigger(ServerPlayer debug12, Collection<? extends Entity> debug2) {
         List debug3 = debug2.stream().map(debug1 -> EntityPredicate.createContext(debug12, debug1)).collect(Collectors.toList());
-        this.trigger(debug12, (T debug1) -> debug1.matches(debug3));
-    }
-
-    @Override
-    public /* synthetic */ AbstractCriterionTriggerInstance createInstance(JsonObject jsonObject, EntityPredicate.Composite composite, DeserializationContext deserializationContext) {
-        return this.createInstance(jsonObject, composite, deserializationContext);
+        this.trigger(debug12, (debug1) -> debug1.matches(debug3));
     }
 
     public static class TriggerInstance
diff --git a/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java
index d1a7db771a315f8c79d0720f9d07b641c4f8e817..a43ace7ea6ef84d6767525580c11f38486e402ab 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ConstructBeaconTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ConstructBeaconTrigger extends SimpleCriterionTrigger<ConstructBeaconTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -20,7 +20,7 @@ public class ConstructBeaconTrigger extends SimpleCriterionTrigger<TriggerInstan
     }
     
     public void trigger(final ServerPlayer debug1, final BeaconBlockEntity debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2));
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java
index 9e177392706d10157e94673b50de19534f0c27a6..2afe380fc568ed3bfc0bb936294fc5695dff3beb 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java
@@ -9,7 +9,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ConsumeItemTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ConsumeItemTrigger extends SimpleCriterionTrigger<ConsumeItemTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -23,7 +23,7 @@ public class ConsumeItemTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java b/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
index 5004ccd4dc0678e3aea95f405b0f391f25573a75..d6f7489dccbc75f280b0363d8e1d3e8b1a562054 100644
--- a/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
@@ -8,7 +8,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class CuredZombieVillagerTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class CuredZombieVillagerTrigger extends SimpleCriterionTrigger<CuredZombieVillagerTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -26,7 +26,7 @@ public class CuredZombieVillagerTrigger extends SimpleCriterionTrigger<TriggerIn
     public void trigger(final ServerPlayer debug1, final Zombie debug2, final Villager debug3) {
         final LootContext debug4 = EntityPredicate.createContext(debug1, debug2);
         final LootContext debug5 = EntityPredicate.createContext(debug1, debug3);
-        this.trigger(debug1, debug2 -> debug2.matches(debug4, debug5));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug4, debug5)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java
index 3a23a9b726a6c235602656fa769be51d2de0d963..6799b3ab28770e7369ae71d9e4e65511876e3ec5 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class EffectsChangedTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class EffectsChangedTrigger extends SimpleCriterionTrigger<EffectsChangedTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -20,7 +20,7 @@ public class EffectsChangedTrigger extends SimpleCriterionTrigger<TriggerInstanc
     }
     
     public void trigger(final ServerPlayer debug1) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug1));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug1)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java
index b398e5e00667ab1f294b66db8b8c332bfd75b1e5..fdccc199ea53abf6b1b9275bc0713f7c05a0cdc4 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class EnchantedItemTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class EnchantedItemTrigger extends SimpleCriterionTrigger<EnchantedItemTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -21,7 +21,7 @@ public class EnchantedItemTrigger extends SimpleCriterionTrigger<TriggerInstance
     }
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2, final int debug3) {
-        this.trigger(debug1, debug2 -> debug2.matches(debug2, debug3));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug2, debug3)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java
index 997e47ec0924c3e63d238256e69378ed45aa9d66..4fcf7ac2b7f297d94ce426fd59ec219a6baf6726 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java
@@ -11,7 +11,7 @@ import com.google.gson.JsonSyntaxException;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class EnterBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class EnterBlockTrigger extends SimpleCriterionTrigger<EnterBlockTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -24,11 +24,8 @@ public class EnterBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
         final Block debug4 = deserializeBlock(debug1);
         final StatePropertiesPredicate debug5 = StatePropertiesPredicate.fromJson(debug1.get("state"));
         if (debug4 != null) {
-            final JsonSyntaxException ex;
-            final Object obj;
-            debug5.checkState(debug4.getStateDefinition(), debug1 -> {
-                new JsonSyntaxException("Block " + obj + " has no property " + debug1);
-                throw ex;
+            debug5.checkState(debug4.getStateDefinition(), debug12 -> { // MagmaCube - decompile fix
+                throw new JsonSyntaxException("Block " + debug4 + " has no property " + debug12); // MagmaCube - decompile fix
             });
         }
         return new TriggerInstance(debug2, debug4, debug5);
@@ -38,18 +35,15 @@ public class EnterBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
     private static Block deserializeBlock(final JsonObject debug0) {
         if (debug0.has("block")) {
             final ResourceLocation debug = new ResourceLocation(GsonHelper.getAsString(debug0, "block"));
-            final Object o;
-            final Object obj;
             return Registry.BLOCK.getOptional(debug).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown block type '" + obj + "'");
-                return o;
+                throw new JsonSyntaxException("Unknown block type '" + debug + "'"); // MagmaCube - decompile fix
             });
         }
         return null;
     }
     
     public void trigger(final ServerPlayer debug1, final BlockState debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java
index bdafe053cf5e1596d91f4b2eb276f7a5dbbd7606..58c27e78a313f98c8412cdc8fb50920f99ab6671 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class EntityHurtPlayerTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class EntityHurtPlayerTrigger extends SimpleCriterionTrigger<EntityHurtPlayerTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -20,7 +20,7 @@ public class EntityHurtPlayerTrigger extends SimpleCriterionTrigger<TriggerInsta
     }
     
     public void trigger(final ServerPlayer debug1, final DamageSource debug2, final float debug3, final float debug4, final boolean debug5) {
-        this.trigger(debug1, debug5 -> debug5.matches(debug1, debug2, debug3, debug4, debug5));
+        this.trigger(debug1, debug5l -> debug5l.matches(debug1, debug2, debug3, debug4, debug5)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/FilledBucketTrigger.java b/src/main/java/net/minecraft/advancements/critereon/FilledBucketTrigger.java
index 8df3fd2e52e8f45d5fe1669e357e7b438b96e31c..df28c947b47de7fdbce73660f0e6b7bd3f19b250 100644
--- a/src/main/java/net/minecraft/advancements/critereon/FilledBucketTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/FilledBucketTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class FilledBucketTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class FilledBucketTrigger extends SimpleCriterionTrigger<FilledBucketTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -20,7 +20,7 @@ public class FilledBucketTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java b/src/main/java/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java
index 3a42e1e8e9a25ea41c076d2cefd1e1ecc7e8f094..2d1f1c2f32c5761169a225ec073588d3f73a8221 100644
--- a/src/main/java/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java
@@ -12,7 +12,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class FishingRodHookedTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class FishingRodHookedTrigger extends SimpleCriterionTrigger<FishingRodHookedTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -30,7 +30,7 @@ public class FishingRodHookedTrigger extends SimpleCriterionTrigger<TriggerInsta
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2, final FishingHook debug3, final Collection<ItemStack> debug4) {
         final LootContext debug5 = EntityPredicate.createContext(debug1, (debug3.getHookedIn() != null) ? debug3.getHookedIn() : debug3);
-        this.trigger(debug1, debug3 -> debug3.matches(debug2, debug5, debug4));
+        this.trigger(debug1, debug3l -> debug3l.matches(debug2, debug5, debug4)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ImpossibleTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ImpossibleTrigger.java
index ccdca0af0abfc4cc1a2b7d5e099dabb06724977b..4ff9e80e61580af168900dcb772bb2e8c7889a87 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ImpossibleTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ImpossibleTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.server.PlayerAdvancements;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.advancements.CriterionTrigger;
 
-public class ImpossibleTrigger implements CriterionTrigger<TriggerInstance>
+public class ImpossibleTrigger implements CriterionTrigger<ImpossibleTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java b/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
index f5dac342a3fb5a2035a9ae32695c174711090dc3..1784e226ee7a1d0fb9ed77586c5881ffaa9050e5 100644
--- a/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
@@ -14,8 +14,10 @@ import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.level.lighting.LayerLightSectionStorage;
+
+public class InventoryChangeTrigger extends SimpleCriterionTrigger<InventoryChangeTrigger.TriggerInstance> // MagmaCube - decompile fix
 
-public class InventoryChangeTrigger extends SimpleCriterionTrigger<TriggerInstance>
 {
     private static final ResourceLocation ID;
     
@@ -53,7 +55,7 @@ public class InventoryChangeTrigger extends SimpleCriterionTrigger<TriggerInstan
     }
     
     private void trigger(final ServerPlayer debug1, final Inventory debug2, final ItemStack debug3, final int debug4, final int debug5, final int debug6) {
-        this.trigger(debug1, debug5 -> debug5.matches(debug2, debug3, debug4, debug5, debug6));
+        this.trigger(debug1, debug5l -> debug5l.matches(debug2, debug3, debug4, debug5, debug6)); // MagmaCube - decompile fix
     }
     
     static {
@@ -131,7 +133,7 @@ public class InventoryChangeTrigger extends SimpleCriterionTrigger<TriggerInstan
                 }
                 final ItemStack debug10 = debug1.getItem(debug9);
                 if (!debug10.isEmpty()) {
-                    debug7.removeIf(debug1 -> debug1.matches(debug10));
+                    debug7.removeIf(debug1l -> debug1l.matches(debug10)); // MagmaCube - decompile fix
                 }
             }
             return debug7.isEmpty();
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java
index df3bba17172e7f490ae00715b8860eb0a1d05c62..351ef838da90e1e0809657d7860df38fa4d0ff71 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ItemDurabilityTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ItemDurabilityTrigger extends SimpleCriterionTrigger<ItemDurabilityTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -22,7 +22,7 @@ public class ItemDurabilityTrigger extends SimpleCriterionTrigger<TriggerInstanc
     }
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2, final int debug3) {
-        this.trigger(debug1, debug2 -> debug2.matches(debug2, debug3));
+        this.trigger(debug1, debug2l -> debug2l.item.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemPickedUpByEntityTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ItemPickedUpByEntityTrigger.java
index b14eae3742b5580e5bec06baac6811e3009e5e9f..d651af4b16d1f2aec13e6382a8a56b49aab93468 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemPickedUpByEntityTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemPickedUpByEntityTrigger.java
@@ -7,7 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ItemPickedUpByEntityTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ItemPickedUpByEntityTrigger extends SimpleCriterionTrigger<ItemPickedUpByEntityTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -25,7 +25,7 @@ public class ItemPickedUpByEntityTrigger extends SimpleCriterionTrigger<TriggerI
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2, final Entity debug3) {
         final LootContext debug4 = EntityPredicate.createContext(debug1, debug3);
-        this.trigger(debug1, debug3 -> debug3.matches(debug1, debug2, debug4));
+        this.trigger(debug1, debug3l -> debug3l.matches(debug1, debug2, debug4)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemUsedOnBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ItemUsedOnBlockTrigger.java
index 2c7b9ddef7443ae634f9b9e8d1645a85b6e61cb1..c8cd9bbb05c41a519b3e6f9256471c9ee9ed0ccd 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemUsedOnBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemUsedOnBlockTrigger.java
@@ -8,7 +8,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ItemUsedOnBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ItemUsedOnBlockTrigger extends SimpleCriterionTrigger<ItemUsedOnBlockTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/KilledByCrossbowTrigger.java b/src/main/java/net/minecraft/advancements/critereon/KilledByCrossbowTrigger.java
index b36e6f0f60e3227d612bd75a53153db19a4d460d..5f8b161f1e6f1292f13389f4b63781641cb3819d 100644
--- a/src/main/java/net/minecraft/advancements/critereon/KilledByCrossbowTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/KilledByCrossbowTrigger.java
@@ -13,7 +13,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class KilledByCrossbowTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class KilledByCrossbowTrigger extends SimpleCriterionTrigger<KilledByCrossbowTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -29,13 +29,13 @@ public class KilledByCrossbowTrigger extends SimpleCriterionTrigger<TriggerInsta
     }
     
     public void trigger(final ServerPlayer debug1, final Collection<Entity> debug2) {
-        final List<LootContext> debug3 = (List<LootContext>)Lists.newArrayList();
-        final Set<EntityType<?>> debug4 = (Set<EntityType<?>>)Sets.newHashSet();
+        final List<LootContext> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
+        final Set<EntityType<?>> debug4 = Sets.newHashSet(); // MagmaCube - decompile fix
         for (final Entity debug5 : debug2) {
             debug4.add(debug5.getType());
             debug3.add(EntityPredicate.createContext(debug1, debug5));
         }
-        this.trigger(debug1, debug2 -> debug2.matches(debug3, debug4.size()));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug3, debug4.size()));
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java b/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java
index b377f998c24b711570cece2d2fb1e099e6b7378f..29736be6dc252b5f547b7ad99335c4f1a0e6391f 100644
--- a/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java
@@ -8,7 +8,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class KilledTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class KilledTrigger extends SimpleCriterionTrigger<KilledTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private final ResourceLocation id;
     
@@ -27,7 +27,7 @@ public class KilledTrigger extends SimpleCriterionTrigger<TriggerInstance>
     
     public void trigger(final ServerPlayer debug1, final Entity debug2, final DamageSource debug3) {
         final LootContext debug4 = EntityPredicate.createContext(debug1, debug2);
-        this.trigger(debug1, debug3 -> debug3.matches(debug1, debug4, debug3));
+        this.trigger(debug1, debug3l -> debug3l.matches(debug1, debug4, debug3)); // MagmaCube - decompile fix
     }
     
     public static class TriggerInstance extends AbstractCriterionTriggerInstance
diff --git a/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java b/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java
index 38817fd75f586d75b510679967d8c24703974f73..9a996e45ee15bb696625858e3e34fa3c7c3aa2b2 100644
--- a/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class LevitationTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class LevitationTrigger extends SimpleCriterionTrigger<LevitationTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -21,7 +21,7 @@ public class LevitationTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1, final Vec3 debug2, final int debug3) {
-        this.trigger(debug1, debug3 -> debug3.matches(debug1, debug2, debug3));
+        this.trigger(debug1, debug3l -> debug3l.matches(debug1, debug2, debug3)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/LocationTrigger.java b/src/main/java/net/minecraft/advancements/critereon/LocationTrigger.java
index 317368d0df01a1cdcfc35d5feee666ea8413d04f..5e808fef0e128b530f4b399183f9e077dadc6b6b 100644
--- a/src/main/java/net/minecraft/advancements/critereon/LocationTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/LocationTrigger.java
@@ -8,7 +8,7 @@ import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class LocationTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class LocationTrigger extends SimpleCriterionTrigger<LocationTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private final ResourceLocation id;
     
@@ -28,7 +28,7 @@ public class LocationTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug1.getLevel(), debug1.getX(), debug1.getY(), debug1.getZ()));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug1.getLevel(), debug1.getX(), debug1.getY(), debug1.getZ())); // MagmaCube - decompile fix
     }
     
     public static class TriggerInstance extends AbstractCriterionTriggerInstance
diff --git a/src/main/java/net/minecraft/advancements/critereon/LootTableTrigger.java b/src/main/java/net/minecraft/advancements/critereon/LootTableTrigger.java
index 5a3b425d46bcc350912ae2bffc7c28a5700de119..0e46bc6f8b1a7e29e952c42bed2997a5a2c8e9ef 100644
--- a/src/main/java/net/minecraft/advancements/critereon/LootTableTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/LootTableTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class LootTableTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class LootTableTrigger extends SimpleCriterionTrigger<LootTableTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -21,7 +21,7 @@ public class LootTableTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1, final ResourceLocation debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug12 -> debug12.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java b/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java
index d91639587c77da8720be6528b141e733ae96426b..4e6d81d008636ceec8c0a6aa0812cfa4d368ddbc 100644
--- a/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class NetherTravelTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class NetherTravelTrigger extends SimpleCriterionTrigger<NetherTravelTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -23,7 +23,7 @@ public class NetherTravelTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1, final Vec3 debug2) {
-        this.trigger(debug1, debug2 -> debug2.matches(debug1.getLevel(), debug2, debug1.getX(), debug1.getY(), debug1.getZ()));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug1.getLevel(), debug2, debug1.getX(), debug1.getY(), debug1.getZ())); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java
index 42926ceead8d90caa0d5f031498628b3fc10f527..f34793c6c219e067531ec37ce8e9fe0e44c3ea4e 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java
@@ -14,7 +14,7 @@ import com.google.gson.JsonSyntaxException;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class PlacedBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class PlacedBlockTrigger extends SimpleCriterionTrigger<PlacedBlockTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -27,11 +27,8 @@ public class PlacedBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
         final Block debug4 = deserializeBlock(debug1);
         final StatePropertiesPredicate debug5 = StatePropertiesPredicate.fromJson(debug1.get("state"));
         if (debug4 != null) {
-            final JsonSyntaxException ex;
-            final Object obj;
-            debug5.checkState(debug4.getStateDefinition(), debug1 -> {
-                new JsonSyntaxException("Block " + obj + " has no property " + debug1 + ":");
-                throw ex;
+            debug5.checkState(debug4.getStateDefinition(), debug1l -> { // MagmaCube - decompile fix
+                throw new JsonSyntaxException("Block " + debug4 + " has no property " + debug1l + ":"); // MagmaCube - decompile fix
             });
         }
         final LocationPredicate debug6 = LocationPredicate.fromJson(debug1.get("location"));
@@ -43,11 +40,8 @@ public class PlacedBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
     private static Block deserializeBlock(final JsonObject debug0) {
         if (debug0.has("block")) {
             final ResourceLocation debug = new ResourceLocation(GsonHelper.getAsString(debug0, "block"));
-            final Object o;
-            final Object obj;
             return Registry.BLOCK.getOptional(debug).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown block type '" + obj + "'");
-                return o;
+                throw new JsonSyntaxException("Unknown block type '" + debug + "'"); // MagmaCube - decompile fix
             });
         }
         return null;
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java b/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
index fad4ed3efe65301d48ec7ea554d5661fd9f9a580..88f83f42825fdb77623a53ac5d853a17c0068f1a 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
@@ -7,7 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class PlayerHurtEntityTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class PlayerHurtEntityTrigger extends SimpleCriterionTrigger<PlayerHurtEntityTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -24,7 +24,7 @@ public class PlayerHurtEntityTrigger extends SimpleCriterionTrigger<TriggerInsta
     
     public void trigger(final ServerPlayer debug1, final Entity debug2, final DamageSource debug3, final float debug4, final float debug5, final boolean debug6) {
         final LootContext debug7 = EntityPredicate.createContext(debug1, debug2);
-        this.trigger(debug1, debug6 -> debug6.matches(debug1, debug7, debug3, debug4, debug5, debug6));
+        this.trigger(debug1, debug6l -> debug6l.matches(debug1, debug7, debug3, debug4, debug5, debug6)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlayerInteractTrigger.java b/src/main/java/net/minecraft/advancements/critereon/PlayerInteractTrigger.java
index ce92c662855d5982be26728f55eccc8fbdbd0bcf..e1248403e0992588b40d4ba8ae219eb41d77043e 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlayerInteractTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlayerInteractTrigger.java
@@ -7,7 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class PlayerInteractTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class PlayerInteractTrigger extends SimpleCriterionTrigger<PlayerInteractTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -25,7 +25,7 @@ public class PlayerInteractTrigger extends SimpleCriterionTrigger<TriggerInstanc
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2, final Entity debug3) {
         final LootContext debug4 = EntityPredicate.createContext(debug1, debug3);
-        this.trigger(debug1, debug2 -> debug2.matches(debug2, debug4));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug2, debug4)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java b/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java
index 6c4a1a298672684e6299072dfee79f69470b99b7..dd7b66acdfeb21409372733ac1310b6736d5968a 100644
--- a/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.util.GsonHelper;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class RecipeUnlockedTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class RecipeUnlockedTrigger extends SimpleCriterionTrigger<RecipeUnlockedTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -21,7 +21,7 @@ public class RecipeUnlockedTrigger extends SimpleCriterionTrigger<TriggerInstanc
     }
     
     public void trigger(final ServerPlayer debug1, final Recipe<?> debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2)); // MagmaCube - decompile fix
     }
     
     public static TriggerInstance unlocked(final ResourceLocation debug0) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ShotCrossbowTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ShotCrossbowTrigger.java
index 73042901166ba958b3a7fcc92d26486e19a63d05..1437d89ac25461aacfc594296e7a99359d3f2487 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ShotCrossbowTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ShotCrossbowTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class ShotCrossbowTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class ShotCrossbowTrigger extends SimpleCriterionTrigger<ShotCrossbowTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -21,7 +21,7 @@ public class ShotCrossbowTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug2));
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java
index f3dacbc07a6e575341752a03beb867f119a132cd..970a82b30167b4b09dab77782a301e373d21e26b 100644
--- a/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java
@@ -11,7 +11,7 @@ import com.google.gson.JsonSyntaxException;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class SlideDownBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class SlideDownBlockTrigger extends SimpleCriterionTrigger<SlideDownBlockTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -26,9 +26,8 @@ public class SlideDownBlockTrigger extends SimpleCriterionTrigger<TriggerInstanc
         if (debug4 != null) {
             final JsonSyntaxException ex;
             final Object obj;
-            debug5.checkState(debug4.getStateDefinition(), debug1 -> {
-                new JsonSyntaxException("Block " + obj + " has no property " + debug1);
-                throw ex;
+            debug5.checkState(debug4.getStateDefinition(), debug1l -> { // MagmaCube - decompile fix
+                throw new JsonSyntaxException("Block " + debug4 + " has no property " + debug1l); // MagmaCube - decompile fix
             });
         }
         return new TriggerInstance(debug2, debug4, debug5);
@@ -38,18 +37,15 @@ public class SlideDownBlockTrigger extends SimpleCriterionTrigger<TriggerInstanc
     private static Block deserializeBlock(final JsonObject debug0) {
         if (debug0.has("block")) {
             final ResourceLocation debug = new ResourceLocation(GsonHelper.getAsString(debug0, "block"));
-            final Object o;
-            final Object obj;
             return Registry.BLOCK.getOptional(debug).orElseThrow(() -> {
-                new JsonSyntaxException("Unknown block type '" + obj + "'");
-                return o;
+                throw new JsonSyntaxException("Unknown block type '" + debug + "'"); // MagmaCube - decompile fix
             });
         }
         return null;
     }
-    
+
     public void trigger(final ServerPlayer debug1, final BlockState debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
index 03026081abe4da95d35ea0879d13603eb61a67d0..cd340e8670e65c07275525c6f704765766bc73e5 100644
--- a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
@@ -67,7 +67,7 @@ public class StatePropertiesPredicate
     }
     
     public void checkState(final StateDefinition<?, ?> debug1, final Consumer<String> debug2) {
-        this.properties.forEach(debug2 -> debug2.checkState(debug1, debug2));
+        this.properties.forEach(debug2l -> debug2l.checkState(debug1, debug2)); // MagmaCube - decompile fix
     }
     
     public static StatePropertiesPredicate fromJson(@Nullable final JsonElement debug0) {
@@ -75,7 +75,7 @@ public class StatePropertiesPredicate
             return StatePropertiesPredicate.ANY;
         }
         final JsonObject debug = GsonHelper.convertToJsonObject(debug0, "properties");
-        final List<PropertyMatcher> debug2 = (List<PropertyMatcher>)Lists.newArrayList();
+        final List<PropertyMatcher> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Map.Entry<String, JsonElement> debug3 : debug.entrySet()) {
             debug2.add(fromJson(debug3.getKey(), debug3.getValue()));
         }
@@ -94,7 +94,7 @@ public class StatePropertiesPredicate
     }
     
     static {
-        ANY = new StatePropertiesPredicate((List<PropertyMatcher>)ImmutableList.of());
+        ANY = new StatePropertiesPredicate(ImmutableList.of()); // MagmaCube - decompile fix
     }
     
     abstract static class PropertyMatcher
@@ -197,7 +197,7 @@ public class StatePropertiesPredicate
         private final List<PropertyMatcher> matchers;
         
         private Builder() {
-            this.matchers = (List<PropertyMatcher>)Lists.newArrayList();
+            this.matchers = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         public static Builder properties() {
@@ -217,12 +217,12 @@ public class StatePropertiesPredicate
             return this.hasProperty(debug1, Boolean.toString(debug2));
         }
         
-        public <T extends java.lang.Comparable> Builder hasProperty(final Property<T> debug1, final T debug2) {
+        public <T extends java.lang.Comparable<T>> Builder hasProperty(final Property<T> debug1, final T debug2) { // MagmaCube - decompile fix
             return this.hasProperty((Property<?>)debug1, ((StringRepresentable)debug2).getSerializedName());
         }
         
         public StatePropertiesPredicate build() {
-            return new StatePropertiesPredicate(this.matchers, null);
+            return new StatePropertiesPredicate(this.matchers); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java b/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java
index 8e793269d4ed23ff6731ea852d6806e0b1246886..34c04aa29fe96160c709e5daff8b20b958970e35 100644
--- a/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class SummonedEntityTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class SummonedEntityTrigger extends SimpleCriterionTrigger<SummonedEntityTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -22,7 +22,7 @@ public class SummonedEntityTrigger extends SimpleCriterionTrigger<TriggerInstanc
     
     public void trigger(final ServerPlayer debug1, final Entity debug2) {
         final LootContext debug3 = EntityPredicate.createContext(debug1, debug2);
-        this.trigger(debug1, debug1 -> debug1.matches(debug3));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug3)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java b/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java
index ca9d58f83f880ab647897d3c4f7d907cc18b609e..529f8cb920b400be7fa6feb35e3efcdec70c0689 100644
--- a/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java
@@ -7,7 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class TameAnimalTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class TameAnimalTrigger extends SimpleCriterionTrigger<TameAnimalTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -23,7 +23,7 @@ public class TameAnimalTrigger extends SimpleCriterionTrigger<TriggerInstance>
     
     public void trigger(final ServerPlayer debug1, final Animal debug2) {
         final LootContext debug3 = EntityPredicate.createContext(debug1, debug2);
-        this.trigger(debug1, debug1 -> debug1.matches(debug3));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug3)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/TargetBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/TargetBlockTrigger.java
index d050da91c56fa98fce90ae9975259453f1e4effc..a58d92bb39184595dd82625862f2412b3661493b 100644
--- a/src/main/java/net/minecraft/advancements/critereon/TargetBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/TargetBlockTrigger.java
@@ -7,7 +7,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class TargetBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class TargetBlockTrigger extends SimpleCriterionTrigger<TargetBlockTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -24,7 +24,7 @@ public class TargetBlockTrigger extends SimpleCriterionTrigger<TriggerInstance>
     
     public void trigger(final ServerPlayer debug1, final Entity debug2, final Vec3 debug3, final int debug4) {
         final LootContext debug5 = EntityPredicate.createContext(debug1, debug2);
-        this.trigger(debug1, debug3 -> debug3.matches(debug5, debug3, debug4));
+        this.trigger(debug1, debug3l -> debug3l.matches(debug5, debug3, debug4)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/TickTrigger.java b/src/main/java/net/minecraft/advancements/critereon/TickTrigger.java
index 6b14c6d0994c0eaa0e972b46431d4bf3a2721a34..72b1253520ee9ca81245b6c8345e0bba81aeb852 100644
--- a/src/main/java/net/minecraft/advancements/critereon/TickTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/TickTrigger.java
@@ -4,7 +4,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class TickTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class TickTrigger extends SimpleCriterionTrigger<TickTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     public static final ResourceLocation ID;
     
diff --git a/src/main/java/net/minecraft/advancements/critereon/TradeTrigger.java b/src/main/java/net/minecraft/advancements/critereon/TradeTrigger.java
index a395ca1e6da06705ed2f92711589a4f999e74992..b9776b27ae6dcdfc1a8a5cb6e5c278c894f7ba28 100644
--- a/src/main/java/net/minecraft/advancements/critereon/TradeTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/TradeTrigger.java
@@ -8,7 +8,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class TradeTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class TradeTrigger extends SimpleCriterionTrigger<TradeTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -25,7 +25,7 @@ public class TradeTrigger extends SimpleCriterionTrigger<TriggerInstance>
     
     public void trigger(final ServerPlayer debug1, final AbstractVillager debug2, final ItemStack debug3) {
         final LootContext debug4 = EntityPredicate.createContext(debug1, debug2);
-        this.trigger(debug1, debug2 -> debug2.matches(debug4, debug3));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug4, debug3)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java b/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
index 282d904a2817ff1fdf5053827d8c4cba13f919f9..7d0c086d0635f6573ea22c1a039af2936e239e6c 100644
--- a/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class UsedEnderEyeTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class UsedEnderEyeTrigger extends SimpleCriterionTrigger<UsedEnderEyeTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -23,7 +23,7 @@ public class UsedEnderEyeTrigger extends SimpleCriterionTrigger<TriggerInstance>
         final double debug3 = debug1.getX() - debug2.getX();
         final double debug4 = debug1.getZ() - debug2.getZ();
         final double debug5 = debug3 * debug3 + debug4 * debug4;
-        this.trigger(debug1, debug2 -> debug2.matches(debug5));
+        this.trigger(debug1, debug2l -> debug2l.matches(debug5));
     }
     
     static {
diff --git a/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java b/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java
index ace93d7c078a1d24b2887a1da01f2a632bb800f9..55fb029e0f71bc89042edc9e59e361fa4027d2f9 100644
--- a/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java
@@ -6,7 +6,7 @@ import net.minecraft.server.level.ServerPlayer;
 import com.google.gson.JsonObject;
 import net.minecraft.resources.ResourceLocation;
 
-public class UsedTotemTrigger extends SimpleCriterionTrigger<TriggerInstance>
+public class UsedTotemTrigger extends SimpleCriterionTrigger<UsedTotemTrigger.TriggerInstance> // MagmaCube - decompile fix
 {
     private static final ResourceLocation ID;
     
@@ -21,7 +21,7 @@ public class UsedTotemTrigger extends SimpleCriterionTrigger<TriggerInstance>
     }
     
     public void trigger(final ServerPlayer debug1, final ItemStack debug2) {
-        this.trigger(debug1, debug1 -> debug1.matches(debug2));
+        this.trigger(debug1, debug1l -> debug1l.matches(debug2)); // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/client/ClientBrandRetriever.java b/src/main/java/net/minecraft/client/ClientBrandRetriever.java
index 1693f914c22e702f77b346e9519bcaf4ee36acee..62cc8a8fdaee23c59706234cdb805bb79bf22304 100644
--- a/src/main/java/net/minecraft/client/ClientBrandRetriever.java
+++ b/src/main/java/net/minecraft/client/ClientBrandRetriever.java
@@ -3,6 +3,6 @@ package net.minecraft.client;
 public class ClientBrandRetriever
 {
     public static String getClientModName() {
-        return "vanilla";
+        return "magmacube"; // MagmaCube > Vanilla!
     }
 }
diff --git a/src/main/java/net/minecraft/client/KeyMapping.java b/src/main/java/net/minecraft/client/KeyMapping.java
index a4a09da385f4e8d48e5fdecefddd54f6112d0155..253906d8af92855441a9b80f35d54a52b2d540af 100644
--- a/src/main/java/net/minecraft/client/KeyMapping.java
+++ b/src/main/java/net/minecraft/client/KeyMapping.java
@@ -170,10 +170,5 @@ implements Comparable<KeyMapping> {
     public void setDown(boolean debug1) {
         this.isDown = debug1;
     }
-
-    @Override
-    public /* synthetic */ int compareTo(Object object) {
-        return this.compareTo((KeyMapping)object);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/client/KeyboardHandler.java b/src/main/java/net/minecraft/client/KeyboardHandler.java
index 2c25520d29cd1dc29c09229d8b6ecd31349873ff..10b0e5a34fe80aee86023ecef8e71ba33f450bf1 100644
--- a/src/main/java/net/minecraft/client/KeyboardHandler.java
+++ b/src/main/java/net/minecraft/client/KeyboardHandler.java
@@ -253,7 +253,6 @@ public class KeyboardHandler {
     }
 
     public void keyPress(long debug12, int debug3, int debug4, int debug5, int debug6) {
-        Object debug9;
         boolean debug8;
         if (debug12 != this.minecraft.getWindow().getWindow()) {
             return;
@@ -292,14 +291,14 @@ public class KeyboardHandler {
             }
         }
         if (debug7 != null) {
-            debug9 = new boolean[]{false};
+            boolean[] debug9 = new boolean[]{false}; // MagmaCube - decompile fix
             Screen.wrapScreenError(() -> this.lambda$keyPress$4(debug5, (boolean[])debug9, debug7, debug3, debug4, debug6), "keyPressed event handler", debug7.getClass().getCanonicalName());
-            if (debug9[0]) {
+            if (debug9[0]) { // MagmaCube - decompile fix
                 return;
             }
         }
         if (this.minecraft.screen == null || this.minecraft.screen.passEvents) {
-            debug9 = InputConstants.getKey(debug3, debug4);
+            InputConstants.Key debug9 = InputConstants.getKey(debug3, debug4); // MagmaCube - decompile fix
             if (debug5 == 0) {
                 KeyMapping.set((InputConstants.Key)debug9, false);
                 if (debug3 == 292) {
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index 3ece226a05e5b0690a70525ed51e9ebcbcf350ad..6c21618c6218e3b4124ace4288452301eba963ff 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -564,8 +564,8 @@ WindowEventHandler {
         this.options.incompatibleResourcePacks.clear();
         this.options.save();
         this.reloadResourcePacks().thenRun(() -> {
-            ToastComponent debug2 = this.getToasts();
-            SystemToast.addOrUpdate(debug2, SystemToast.SystemToastIds.PACK_LOAD_FAILURE, new TranslatableComponent("resourcePack.load_fail"), debug2);
+            ToastComponent debug22 = this.getToasts(); // MagmaCube - decompile fix
+            SystemToast.addOrUpdate(debug22, SystemToast.SystemToastIds.PACK_LOAD_FAILURE, new TranslatableComponent("resourcePack.load_fail"), debug2); // MagmaCube - decompile fix
         });
     }
 
@@ -614,7 +614,7 @@ WindowEventHandler {
     }
 
     void selectMainFont(boolean debug1) {
-        this.fontManager.setRenames((Map<ResourceLocation, ResourceLocation>)(debug1 ? ImmutableMap.of((Object)DEFAULT_FONT, (Object)UNIFORM_FONT) : ImmutableMap.of()));
+        this.fontManager.setRenames((Map<ResourceLocation, ResourceLocation>)(debug1 ? ImmutableMap.of(DEFAULT_FONT, UNIFORM_FONT) : ImmutableMap.of())); // MagmaCube - decompile fix
     }
 
     private void createSearchTrees() {
@@ -847,19 +847,19 @@ WindowEventHandler {
     }
 
     private void runTick(boolean debug1) {
-        int debug6;
+        boolean debug6;
         int debug5;
-        Object debug4;
         this.window.setErrorSection("Pre render");
         long debug2 = Util.getNanos();
         if (this.window.shouldClose()) {
             this.stop();
         }
         if (this.pendingReload != null && !(this.overlay instanceof LoadingOverlay)) {
-            debug4 = this.pendingReload;
+            CompletableFuture<Void> debug4 = this.pendingReload; // MagmaCube - decompile fix
             this.pendingReload = null;
             this.reloadResourcePacks().thenRun(() -> Minecraft.lambda$runTick$18((CompletableFuture)debug4));
         }
+        Runnable debug4; // MagmaCube - decompile fix
         while ((debug4 = this.progressTasks.poll()) != null) {
             debug4.run();
         }
@@ -869,7 +869,7 @@ WindowEventHandler {
             this.runAllTasks();
             this.profiler.pop();
             this.profiler.push("tick");
-            for (debug6 = 0; debug6 < Math.min(10, debug5); ++debug6) {
+            for (int debug7 = 0; debug7 < Math.min(10, debug5); ++debug7) { // MagmaCube - decompile fix
                 this.profiler.incrementCounter("clientTick");
                 this.tick();
             }
@@ -918,7 +918,7 @@ WindowEventHandler {
         this.profiler.pop();
         this.window.setErrorSection("Post render");
         ++this.frames;
-        int n = debug6 = this.hasSingleplayerServer() && (this.screen != null && this.screen.isPauseScreen() || this.overlay != null && this.overlay.isPauseScreen()) && !this.singleplayerServer.isPublished() ? 1 : 0;
+        boolean n = debug6 = this.hasSingleplayerServer() && (this.screen != null && this.screen.isPauseScreen() || this.overlay != null && this.overlay.isPauseScreen()) && !this.singleplayerServer.isPublished();
         if (this.pause != debug6) {
             if (this.pause) {
                 this.pausePartialTick = this.timer.partialTick;
@@ -1030,7 +1030,7 @@ WindowEventHandler {
             }
         } else if (--debug1 < debug2.size() && !"unspecified".equals(debug2.get((int)debug1).name)) {
             if (!this.debugPath.isEmpty()) {
-                this.debugPath = this.debugPath + 'Â¥u001e';
+                this.debugPath = this.debugPath + '\u001e';
             }
             this.debugPath = this.debugPath + debug2.get((int)debug1).name;
         }
@@ -1040,8 +1040,6 @@ WindowEventHandler {
      * WARNING - void declaration
      */
     private void renderFpsMeter(PoseStack debug1, ProfileResults debug2) {
-        void var13_15;
-        int debug15;
         List<ResultField> debug3 = debug2.getTimes(this.debugPath);
         ResultField debug4 = debug3.remove(0);
         RenderSystem.clear(256, ON_OSX);
@@ -1068,29 +1066,28 @@ WindowEventHandler {
         RenderSystem.disableBlend();
         double debug10 = 0.0;
         for (ResultField resultField : debug3) {
-            float debug22;
-            float debug21;
-            float debug20;
-            int debug19;
-            int debug14 = Mth.floor(resultField.percentage / 4.0) + 1;
+            // MagmaCube start - decompile fix
+            int i = Mth.floor(resultField.percentage / 4.0) + 1;
             debug6.begin(6, DefaultVertexFormat.POSITION_COLOR);
-            debug15 = resultField.getColor();
-            int debug16 = debug15 >> 16 & 0xFF;
-            int debug17 = debug15 >> 8 & 0xFF;
-            int debug18 = debug15 & 0xFF;
+            int j = resultField.getColor();
+            int debug16 = j >> 16 & 0xFF;
+            int debug17 = j >> 8 & 0xFF;
+            int debug18 = j & 0xFF;
             debug6.vertex(debug8, debug9, 0.0).color(debug16, debug17, debug18, 255).endVertex();
-            for (debug19 = debug14; debug19 >= 0; --debug19) {
-                debug20 = (float)((debug10 + resultField.percentage * (double)debug19 / (double)debug14) * 6.2831854820251465 / 100.0);
-                debug21 = Mth.sin(debug20) * 160.0f;
-                debug22 = Mth.cos(debug20) * 160.0f * 0.5f;
+            int debug19;
+            for (debug19 = i; debug19 >= 0; --debug19) {
+                float debug20 = (float)((debug10 + resultField.percentage * (double)debug19 / (double)i) * 6.2831854820251465 / 100.0);
+                float debug21 = Mth.sin(debug20) * 160.0f;
+                float debug22 = Mth.cos(debug20) * 160.0f * 0.5f;
                 debug6.vertex((float)debug8 + debug21, (float)debug9 - debug22, 0.0).color(debug16, debug17, debug18, 255).endVertex();
             }
             debug5.end();
             debug6.begin(5, DefaultVertexFormat.POSITION_COLOR);
-            for (debug19 = debug14; debug19 >= 0; --debug19) {
-                debug20 = (float)((debug10 + resultField.percentage * (double)debug19 / (double)debug14) * 6.2831854820251465 / 100.0);
-                debug21 = Mth.sin(debug20) * 160.0f;
-                debug22 = Mth.cos(debug20) * 160.0f * 0.5f;
+            for (debug19 = i; debug19 >= 0; --debug19) {
+                float debug20 = (float)((debug10 + resultField.percentage * (double)debug19 / (double)i) * 6.2831854820251465 / 100.0);
+                float debug21 = Mth.sin(debug20) * 160.0f;
+                float debug22 = Mth.cos(debug20) * 160.0f * 0.5f;
+            // MagmaCube end - decompile fix
                 if (debug22 > 0.0f) continue;
                 debug6.vertex((float)debug8 + debug21, (float)debug9 - debug22, 0.0).color(debug16 >> 1, debug17 >> 1, debug18 >> 1, 255).endVertex();
                 debug6.vertex((float)debug8 + debug21, (float)debug9 - debug22 + 10.0f, 0.0).color(debug16 >> 1, debug17 >> 1, debug18 >> 1, 255).endVertex();
@@ -1103,22 +1100,28 @@ WindowEventHandler {
         RenderSystem.enableTexture();
         String string = ProfileResults.demanglePath(debug4.name);
         Object debug14 = "";
-        if (!"unspecified".equals(string)) {
-            debug14 = (String)debug14 + "[0] ";
+        // MagmaCube start - decompile fix
+        if (!"unspecified".equals(string))
+            debug14 = debug14 + "[0] ";
+        if (string.isEmpty()) {
+            debug14 = debug14 + "ROOT ";
+        } else {
+            debug14 = debug14 + string + ' ';
         }
-        debug14 = string.isEmpty() ? (String)debug14 + "ROOT " : (String)debug14 + string + ' ';
-        debug15 = 0xFFFFFF;
+        // MagmaCube end - decompile fix
+        int debug15 = 0xFFFFFF; // MagmaCube - decompile fix
         this.font.drawShadow(debug1, (String)debug14, (float)(debug8 - 160), (float)(debug9 - 80 - 16), 0xFFFFFF);
         debug14 = debug12.format(debug4.globalPercentage) + "%";
         this.font.drawShadow(debug1, (String)debug14, (float)(debug8 + 160 - this.font.width((String)debug14)), (float)(debug9 - 80 - 16), 0xFFFFFF);
         boolean bl = false;
+        int var13_15 = 0; // MagmaCube - decompile fix
         while (++var13_15 < debug3.size()) {
             debug14 = debug3.get((int)var13_15);
             StringBuilder debug152 = new StringBuilder();
             if ("unspecified".equals(((ResultField)debug14).name)) {
                 debug152.append("[?] ");
             } else {
-                debug152.append("[").append((int)(var13_15 + true)).append("] ");
+                debug152.append("[").append((int)(var13_15 + 1)).append("] "); // MagmaCube - decompile fix
             }
             String debug16 = debug152.append(((ResultField)debug14).name).toString();
             this.font.drawShadow(debug1, debug16, (float)(debug8 - 160), (float)(debug9 + 80 + var13_15 * 8 + 20), ((ResultField)debug14).getColor());
@@ -1470,23 +1473,20 @@ WindowEventHandler {
     }
 
     public void loadLevel(String debug1) {
-        this.doLoadLevel(debug1, RegistryAccess.builtin(), Minecraft::loadDataPacks, (Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData>)((Function4)Minecraft::loadWorldData), false, ExperimentalDialogType.BACKUP);
+        this.doLoadLevel(debug1, RegistryAccess.builtin(), Minecraft::loadDataPacks, Minecraft::loadWorldData, false, ExperimentalDialogType.BACKUP); // MagmaCube - decompile fix
     }
 
     public void createLevel(String debug12, LevelSettings debug2, RegistryAccess.RegistryHolder debug32, WorldGenSettings debug42) {
-        this.doLoadLevel(debug12, debug32, debug1 -> debug2.getDataPackConfig(), (Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData>)((Function4)(debug3, debug4, debug5, debug6) -> {
+        this.doLoadLevel(debug12, debug32, debug1 -> debug2.getDataPackConfig(), (debug3, debug4, debug5, debug6) -> { // MagmaCube - decompile fix
             RegistryWriteOps debug7 = RegistryWriteOps.create(JsonOps.INSTANCE, debug32);
             RegistryReadOps debug8 = RegistryReadOps.create(JsonOps.INSTANCE, debug5, debug32);
-            DataResult debug9 = WorldGenSettings.CODEC.encodeStart(debug7, (Object)debug42).setLifecycle(Lifecycle.stable()).flatMap(debug1 -> WorldGenSettings.CODEC.parse((DynamicOps)debug8, debug1));
+            DataResult<WorldGenSettings> debug9 = WorldGenSettings.CODEC.encodeStart(debug7, debug42).setLifecycle(Lifecycle.stable()).flatMap(debug1 -> WorldGenSettings.CODEC.parse((DynamicOps)debug8, debug1)); // MagmaCube - decompile fix
             WorldGenSettings debug10 = debug9.resultOrPartial(Util.prefix("Error reading worldgen settings after loading data packs: ", ((Logger)LOGGER)::error)).orElse(debug42);
             return new PrimaryLevelData(debug2, debug10, debug9.lifecycle());
-        }), false, ExperimentalDialogType.CREATE);
+        }, false, ExperimentalDialogType.CREATE); // MagmaCube - decompile fix
     }
 
     private void doLoadLevel(String debug1, RegistryAccess.RegistryHolder debug2, Function<LevelStorageSource.LevelStorageAccess, DataPackConfig> debug3, Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData> debug4, boolean debug5, ExperimentalDialogType debug6) {
-        Object debug14;
-        Object debug13;
-        Object debug12;
         boolean debug11;
         ServerStem debug8;
         LevelStorageSource.LevelStorageAccess debug7;
@@ -1532,14 +1532,14 @@ WindowEventHandler {
         try {
             debug7.saveDataTag(debug2, debug9);
             debug8.serverResources().updateGlobals();
-            debug12 = new YggdrasilAuthenticationService(this.proxy, UUID.randomUUID().toString());
-            debug13 = debug12.createMinecraftSessionService();
-            debug14 = debug12.createProfileRepository();
+            YggdrasilAuthenticationService debug12 = new YggdrasilAuthenticationService(this.proxy, UUID.randomUUID().toString()); // MagmaCube - decompile fix
+            MinecraftSessionService debug13 = debug12.createMinecraftSessionService(); // MagmaCube - decompile fix
+            GameProfileRepository debug14 = debug12.createProfileRepository(); // MagmaCube - decompile fix
             GameProfileCache debug15 = new GameProfileCache((GameProfileRepository)debug14, new File(this.gameDirectory, MinecraftServer.USERID_CACHE_FILE.getName()));
             SkullBlockEntity.setProfileCache(debug15);
             SkullBlockEntity.setSessionService((MinecraftSessionService)debug13);
             GameProfileCache.setUsesAuthentication(false);
-            this.singleplayerServer = MinecraftServer.spin(arg_0 -> this.lambda$doLoadLevel$27(debug2, debug7, debug8, debug9, (MinecraftSessionService)debug13, (GameProfileRepository)debug14, debug15, arg_0));
+            this.singleplayerServer = MinecraftServer.spin(arg_0 -> this._synthetic_lambda$doLoadLevel$27(debug2, debug7, debug8, debug9, (MinecraftSessionService)debug13, (GameProfileRepository)debug14, debug15, arg_0));
             this.isLocalServer = true;
         }
         catch (Throwable debug123) {
@@ -1552,7 +1552,7 @@ WindowEventHandler {
         while (this.progressListener.get() == null) {
             Thread.yield();
         }
-        debug12 = new LevelLoadingScreen(this.progressListener.get());
+        LevelLoadingScreen debug12 = new LevelLoadingScreen(this.progressListener.get()); // MagmaCube - decompile fix
         this.setScreen((Screen)debug12);
         this.profiler.push("waitForServer");
         while (!this.singleplayerServer.isReady()) {
@@ -1569,8 +1569,8 @@ WindowEventHandler {
             return;
         }
         this.profiler.pop();
-        debug13 = this.singleplayerServer.getConnection().startMemoryChannel();
-        debug14 = Connection.connectToLocalServer((SocketAddress)debug13);
+        SocketAddress debug13 = this.singleplayerServer.getConnection().startMemoryChannel(); // MagmaCube - decompile fix
+        Connection debug14 = Connection.connectToLocalServer((SocketAddress)debug13); // MagmaCube - decompile fix
         ((Connection)((Object)debug14)).setListener(new ClientHandshakePacketListenerImpl((Connection)((Object)debug14), this, null, debug0 -> {}));
         ((Connection)((Object)debug14)).send(new ClientIntentionPacket(debug13.toString(), 0, ConnectionProtocol.LOGIN));
         ((Connection)((Object)debug14)).send(new ServerboundHelloPacket(this.getUser().getGameProfile()));
@@ -1603,9 +1603,9 @@ WindowEventHandler {
                     try (LevelStorageSource.LevelStorageAccess debug4 = this.levelSource.createAccess(debug2);){
                         debug4.deleteLevel();
                     }
-                    catch (IOException debug42) {
+                    catch (IOException debug422) { // MagmaCube - decompile fix
                         SystemToast.onWorldDeleteFailure(this, debug2);
-                        LOGGER.error("Failed to delete world {}", (Object)debug2, (Object)debug42);
+                        LOGGER.error("Failed to delete world {}", (Object)debug2, (Object)debug422); // MagmaCube - decompile fix
                     }
                 }
             }, new TranslatableComponent("selectWorld.backupQuestion.experimental"), new TranslatableComponent("selectWorld.backupWarning.experimental"), CommonComponents.GUI_PROCEED, CommonComponents.GUI_CANCEL));
@@ -1620,7 +1620,7 @@ WindowEventHandler {
             CompletableFuture<ServerResources> debug9 = ServerResources.loadResources(debug7.openAllSelected(), Commands.CommandSelection.INTEGRATED, 2, Util.backgroundExecutor(), this);
             this.managedBlock(debug9::isDone);
             ServerResources debug10 = debug9.get();
-            WorldData debug11 = (WorldData)debug3.apply((Object)debug5, (Object)debug1, (Object)debug10.getResourceManager(), (Object)debug8);
+            WorldData debug11 = (WorldData)debug3.apply(debug5, debug1, debug10.getResourceManager(), debug8); // MagmaCube - decompile fix
             return new ServerStem(debug7, debug10, debug11);
         }
         catch (InterruptedException | ExecutionException debug8) {
@@ -1861,7 +1861,7 @@ WindowEventHandler {
         debug1.addTagElement("BlockEntityTag", debug3);
         CompoundTag debug4 = new CompoundTag();
         ListTag debug5 = new ListTag();
-        debug5.add(StringTag.valueOf("Â¥"(+NBT)Â¥""));
+        debug5.add(StringTag.valueOf("\"(+NBT)\""));
         debug4.put("Lore", debug5);
         debug1.addTagElement("display", debug4);
         return debug1;
@@ -1883,9 +1883,11 @@ WindowEventHandler {
         debug4.setDetail("GL Caps", RenderSystem::getCapsString);
         debug4.setDetail("Using VBOs", () -> "Yes");
         debug4.setDetail("Is Modded", () -> {
-            String debug0 = ClientBrandRetriever.getClientModName();
-            if (!"vanilla".equals(debug0)) {
-                return "Definitely; Client brand changed to '" + debug0 + "'";
+            // MagmaCube start - decompile fix
+            String str = ClientBrandRetriever.getClientModName();
+            if (!"vanilla".equals(str)) {
+                return "Definitely; Client brand changed to '" + str + "'";
+                // MagmaCube end - decompile fix
             }
             if (Minecraft.class.getSigners() == null) {
                 return "Very likely; Jar signature invalidated";
@@ -1900,16 +1902,18 @@ WindowEventHandler {
             }
             debug4.setDetail("Graphics mode", (Object)debug2.graphicsMode);
             debug4.setDetail("Resource Packs", () -> {
-                StringBuilder debug1 = new StringBuilder();
-                for (String debug3 : debug0.resourcePacks) {
-                    if (debug1.length() > 0) {
-                        debug1.append(", ");
+                // MagmaCube start - decompile fix
+                StringBuilder sb = new StringBuilder();
+                for (String s : debug2.resourcePacks) {
+                    if (sb.length() > 0) {
+                        sb.append(", ");
                     }
-                    debug1.append(debug3);
-                    if (!debug0.incompatibleResourcePacks.contains(debug3)) continue;
-                    debug1.append(" (incompatible)");
+                    sb.append(s);
+                    if (!debug2.incompatibleResourcePacks.contains(s)) continue;
+                    sb.append(" (incompatible)");
                 }
-                return debug1.toString();
+                return sb.toString();
+                // MagmaCube end - decompile fix
             });
         }
         if (debug0 != null) {
@@ -2250,12 +2254,12 @@ WindowEventHandler {
         this.modelManager.updateMaxMipLevel(debug1);
     }
 
-    private /* synthetic */ IntegratedServer lambda$doLoadLevel$27(RegistryAccess.RegistryHolder debug12, LevelStorageSource.LevelStorageAccess debug2, ServerStem debug3, WorldData debug4, MinecraftSessionService debug5, GameProfileRepository debug6, GameProfileCache debug7, Thread debug8) {
+    private /* synthetic */ IntegratedServer _synthetic_lambda$doLoadLevel$27(RegistryAccess.RegistryHolder debug12, LevelStorageSource.LevelStorageAccess debug2, ServerStem debug3, WorldData debug4, MinecraftSessionService debug5, GameProfileRepository debug6, GameProfileCache debug7, Thread debug8) {
         return new IntegratedServer(debug8, this, debug12, debug2, debug3.packRepository(), debug3.serverResources(), debug4, debug5, debug6, debug7, debug1 -> {
-            StoringChunkProgressListener debug2 = new StoringChunkProgressListener(debug1 + 0);
-            debug2.start();
-            this.progressListener.set(debug2);
-            return new ProcessorChunkProgressListener(debug2, this.progressTasks::add);
+            StoringChunkProgressListener listener = new StoringChunkProgressListener(debug1 + 0);
+            listener.start();
+            this.progressListener.set(listener);
+            return new ProcessorChunkProgressListener(listener, this.progressTasks::add);
         });
     }
 
diff --git a/src/main/java/net/minecraft/client/MouseHandler.java b/src/main/java/net/minecraft/client/MouseHandler.java
index faaa45fa352102d58966e8b106d01586ccc900b7..5277493fdb7abda7a282d545af97d969cda09947 100644
--- a/src/main/java/net/minecraft/client/MouseHandler.java
+++ b/src/main/java/net/minecraft/client/MouseHandler.java
@@ -82,13 +82,14 @@ public class MouseHandler {
             } else {
                 double debug9 = this.xpos * (double)this.minecraft.getWindow().getGuiScaledWidth() / (double)this.minecraft.getWindow().getScreenWidth();
                 double debug11 = this.ypos * (double)this.minecraft.getWindow().getGuiScaledHeight() / (double)this.minecraft.getWindow().getScreenHeight();
+                boolean[] debug2 = new boolean[1]; // MagmaCube - decompile fix
                 if (debug6) {
                     Screen.wrapScreenError(() -> {
-                        debug1[0] = this.minecraft.screen.mouseClicked(debug9, debug11, debug7);
+                        debug2[0] = this.minecraft.screen.mouseClicked(debug9, debug11, debug7); // MagmaCube - decompile fix
                     }, "mouseClicked event handler", this.minecraft.screen.getClass().getCanonicalName());
                 } else {
                     Screen.wrapScreenError(() -> {
-                        debug1[0] = this.minecraft.screen.mouseReleased(debug9, debug11, debug7);
+                        debug2[0] = this.minecraft.screen.mouseReleased(debug9, debug11, debug7); // MagmaCube - decompile fix
                     }, "mouseReleased event handler", this.minecraft.screen.getClass().getCanonicalName());
                 }
             }
diff --git a/src/main/java/net/minecraft/client/Options.java b/src/main/java/net/minecraft/client/Options.java
index 29457f47718f553cf0ed220c5099c410c67e16d7..be6787f03e77a928c1518db2e3f8f03a64845b28 100644
--- a/src/main/java/net/minecraft/client/Options.java
+++ b/src/main/java/net/minecraft/client/Options.java
@@ -95,7 +95,7 @@ public class Options {
     public boolean hideServerAddress;
     public boolean advancedItemTooltips;
     public boolean pauseOnLostFocus = true;
-    private final Set<PlayerModelPart> modelParts = Sets.newHashSet((Object[])PlayerModelPart.values());
+    private final Set<PlayerModelPart> modelParts = Sets.newHashSet(PlayerModelPart.values()); // MagmaCube - decompile fix
     public HumanoidArm mainHand = HumanoidArm.RIGHT;
     public int overrideWidth;
     public int overrideHeight;
@@ -223,10 +223,10 @@ public class Options {
             try {
                 ((BufferedReader)debug2).lines().forEach(debug1 -> {
                     try {
-                        Iterator debug2 = OPTION_SPLITTER.split((CharSequence)debug1).iterator();
-                        debug12.putString((String)debug2.next(), (String)debug2.next());
+                        Iterator debug22 = OPTION_SPLITTER.split((CharSequence)debug1).iterator(); // MagmaCube - decompile fix
+                        debug12.putString((String)debug22.next(), (String)debug22.next()); // MagmaCube - decompile fix
                     }
-                    catch (Exception debug2) {
+                    catch (Exception debug22) { // MagmaCube - decompile fix
                         LOGGER.warn("Skipping bad option: {}", debug1);
                     }
                 });
diff --git a/src/main/java/net/minecraft/client/StringSplitter.java b/src/main/java/net/minecraft/client/StringSplitter.java
index df9bb9b21fb59914d0db0d66441fbf60f48fc208..3fffe54d4b38a1ccbead6063385dd4fe652d4351 100644
--- a/src/main/java/net/minecraft/client/StringSplitter.java
+++ b/src/main/java/net/minecraft/client/StringSplitter.java
@@ -138,10 +138,10 @@ public class StringSplitter {
         int debug6 = Math.abs(debug1);
         for (int debug7 = 0; debug7 < debug6; ++debug7) {
             if (debug5) {
-                while (debug3 && debug4 > 0 && (debug0.charAt(debug4 - 1) == ' ' || debug0.charAt(debug4 - 1) == 'Â¥n')) {
+                while (debug3 && debug4 > 0 && (debug0.charAt(debug4 - 1) == ' ' || debug0.charAt(debug4 - 1) == '\n')) { // MagmaCube - decompile fix
                     --debug4;
                 }
-                while (debug4 > 0 && debug0.charAt(debug4 - 1) != ' ' && debug0.charAt(debug4 - 1) != 'Â¥n') {
+                while (debug4 > 0 && debug0.charAt(debug4 - 1) != ' ' && debug0.charAt(debug4 - 1) != '\n') { // MagmaCube - decompile fix
                     --debug4;
                 }
                 continue;
@@ -154,7 +154,7 @@ public class StringSplitter {
                 debug4 = debug8;
                 continue;
             }
-            while (debug3 && debug4 < debug8 && (debug0.charAt(debug4) == ' ' || debug0.charAt(debug4) == 'Â¥n')) {
+            while (debug3 && debug4 < debug8 && (debug0.charAt(debug4) == ' ' || debug0.charAt(debug4) == '\n')) { // MagmaCube - decompile fix
                 ++debug4;
             }
         }
@@ -174,7 +174,7 @@ public class StringSplitter {
             }
             int debug11 = debug9.getSplitPosition();
             char debug12 = debug1.charAt(debug11);
-            int debug13 = debug12 == 'Â¥n' || debug12 == ' ' ? debug11 + 1 : debug11;
+            int debug13 = debug12 == '\n' || debug12 == ' ' ? debug11 + 1 : debug11; // MagmaCube - decompile fix
             debug5.accept(debug8, debug6, debug4 ? debug13 : debug11);
             debug6 = debug13;
             debug8 = debug9.getSplitStyle();
@@ -215,7 +215,7 @@ public class StringSplitter {
                     int debug14 = ((LineBreakFinder)debug10).getSplitPosition();
                     Style debug15 = ((LineBreakFinder)debug10).getSplitStyle();
                     char debug16 = debug6.charAt(debug14);
-                    boolean debug17 = debug16 == 'Â¥n';
+                    boolean debug17 = debug16 == '\n'; // MagmaCube - decompile fix
                     boolean debug18 = debug17 || debug16 == ' ';
                     debug8 = debug17;
                     FormattedText debug19 = debug6.splitAt(debug14, debug18 ? 1 : 0, debug15);
diff --git a/src/main/java/net/minecraft/client/color/block/BlockColors.java b/src/main/java/net/minecraft/client/color/block/BlockColors.java
index f0361c439901a39f3027a87e91cc90ec26af69a6..4e5d16ef519d66ad997733a653ffbd7ec081c903 100644
--- a/src/main/java/net/minecraft/client/color/block/BlockColors.java
+++ b/src/main/java/net/minecraft/client/color/block/BlockColors.java
@@ -118,11 +118,11 @@ public class BlockColors {
     }
 
     private void addColoringState(Property<?> debug1, Block ... debug2) {
-        this.addColoringStates((Set<Property<?>>)ImmutableSet.of(debug1), debug2);
+        this.addColoringStates(ImmutableSet.of(debug1), debug2); // MagmaCube - decompile fix
     }
 
     public Set<Property<?>> getColoringProperties(Block debug1) {
-        return (Set)this.coloringStates.getOrDefault(debug1, (Set<Property<?>>)ImmutableSet.of());
+        return (Set)this.coloringStates.getOrDefault(debug1, ImmutableSet.of()); // MagmaCube - decompile fix
     }
 }
 
diff --git a/src/main/java/net/minecraft/client/gui/Font.java b/src/main/java/net/minecraft/client/gui/Font.java
index a253bd0efd07842c7f7f75eb4c122812453a5ec9..b7cbbd86a4095bc0ff8729c6f956bfbca3f2d788 100644
--- a/src/main/java/net/minecraft/client/gui/Font.java
+++ b/src/main/java/net/minecraft/client/gui/Font.java
@@ -44,7 +44,7 @@ public class Font
     public Font(final Function<ResourceLocation, FontSet> debug1) {
         this.random = new Random();
         this.fonts = debug1;
-        this.splitter = new StringSplitter((debug1, debug2) -> this.getFontSet(debug2.getFont()).getGlyphInfo(debug1).getAdvance(debug2.isBold()));
+        this.splitter = new StringSplitter((debug1l, debug2) -> this.getFontSet(debug2.getFont()).getGlyphInfo(debug1l).getAdvance(debug2.isBold())); // MagmaCube - decompile fix
     }
     
     private FontSet getFontSet(final ResourceLocation debug1) {
@@ -251,7 +251,7 @@ public class Font
         
         private void addEffect(final BakedGlyph.Effect debug1) {
             if (this.effects == null) {
-                this.effects = (List<BakedGlyph.Effect>)Lists.newArrayList();
+                this.effects = Lists.newArrayList(); // MagmaCube - decompile fix
             }
             this.effects.add(debug1);
         }
diff --git a/src/main/java/net/minecraft/client/gui/Gui.java b/src/main/java/net/minecraft/client/gui/Gui.java
index 8f1f9a0b2d7e205be8d6bb46dce23b7cb77ee90a..3d3216bd8ce007d4a3c0d05c14148543216a532c 100644
--- a/src/main/java/net/minecraft/client/gui/Gui.java
+++ b/src/main/java/net/minecraft/client/gui/Gui.java
@@ -301,6 +301,7 @@ extends GuiComponent {
             if (debug84 != null && (debug9 = debug84.getColor().getId()) >= 0) {
                 debug7 = debug6.getDisplayObjective(3 + debug9);
             }
+            Objective debug11; // MagmaCube - decompile fix
             Objective objective = debug11 = debug7 != null ? debug7 : debug6.getDisplayObjective(1);
             if (debug11 != null) {
                 this.displayScoreboardSidebar(debug1, debug11);
@@ -314,7 +315,7 @@ extends GuiComponent {
             this.chat.render(debug1, this.tickCount);
             this.minecraft.getProfiler().pop();
             RenderSystem.popMatrix();
-            Objective debug11 = debug6.getDisplayObjective(0);
+            debug11 = debug6.getDisplayObjective(0); // MagmaCube - decompile fix
             if (this.minecraft.options.keyPlayerList.isDown() && (!this.minecraft.isLocalServer() || this.minecraft.player.connection.getOnlinePlayers().size() > 1 || debug11 != null)) {
                 this.tabList.setVisible(true);
                 this.tabList.render(debug1, this.screenWidth, debug6, debug11);
@@ -400,7 +401,7 @@ extends GuiComponent {
         int debug3 = 0;
         int debug4 = 0;
         MobEffectTextureManager debug5 = this.minecraft.getMobEffectTextures();
-        ArrayList debug6 = Lists.newArrayListWithExpectedSize((int)debug2.size());
+        ArrayList<Runnable> debug6 = Lists.newArrayListWithExpectedSize((int)debug2.size()); // MagmaCube - decompile fix
         this.minecraft.getTextureManager().bind(AbstractContainerScreen.INVENTORY_LOCATION);
         for (MobEffectInstance debug8 : Ordering.natural().reverse().sortedCopy(debug2)) {
             MobEffect debug9 = debug8.getEffect();
@@ -586,10 +587,10 @@ extends GuiComponent {
     private void displayScoreboardSidebar(PoseStack debug1, Objective debug2) {
         int debug8;
         Scoreboard debug3 = debug2.getScoreboard();
-        List<Object> debug4 = debug3.getPlayerScores(debug2);
+        Collection<Score> debug4 = debug3.getPlayerScores(debug2); // MagmaCube - decompile fix
         List debug5 = debug4.stream().filter(debug0 -> debug0.getOwner() != null && !debug0.getOwner().startsWith("#")).collect(Collectors.toList());
         debug4 = debug5.size() > 15 ? Lists.newArrayList((Iterable)Iterables.skip(debug5, (int)(debug4.size() - 15))) : debug5;
-        ArrayList debug6 = Lists.newArrayListWithCapacity((int)debug4.size());
+        ArrayList<Pair> debug6 = Lists.newArrayListWithCapacity((int)debug4.size()); // MagmaCube - decompile fix
         Component debug7 = debug2.getDisplayName();
         int debug9 = debug8 = this.getFont().width(debug7);
         int debug10 = this.getFont().width(": ");
diff --git a/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java b/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java
index 3810d4057ce01eb810e4d0d91c3fdd744b2a4682..df572608427d06bb2b3cb972fea3d168e4c31fb9 100644
--- a/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java
@@ -27,7 +27,7 @@ import net.minecraft.client.gui.components.events.AbstractContainerEventHandler;
 import net.minecraft.client.gui.components.events.GuiEventListener;
 import net.minecraft.util.Mth;
 
-public abstract class AbstractSelectionList<E extends Entry<E>>
+public abstract class AbstractSelectionList<E extends AbstractSelectionList.Entry<E>> // MagmaCube - decompile fix
 extends AbstractContainerEventHandler
 implements Widget {
     protected final Minecraft minecraft;
@@ -378,7 +378,7 @@ implements Widget {
             int debug5;
             int debug4 = this.children().indexOf(this.getSelected());
             while (debug4 != (debug5 = Mth.clamp(debug4 + debug3, 0, this.getItemCount() - 1))) {
-                Entry debug6 = (Entry)this.children().get(debug5);
+                E debug6 = this.children().get(debug5); // MagmaCube - decompile fix
                 if (debug2.test(debug6)) {
                     this.setSelected(debug6);
                     this.ensureVisible(debug6);
@@ -451,7 +451,7 @@ implements Widget {
 
     protected E remove(int debug1) {
         Entry debug2 = (Entry)this.children.get(debug1);
-        if (this.removeEntry((Entry)this.children.get(debug1))) {
+        if (this.removeEntry((E) this.children.get(debug1))) { // MagmaCube - decompile fix
             return (E)debug2;
         }
         return null;
@@ -469,12 +469,6 @@ implements Widget {
         ((Entry)debug1).list = this;
     }
 
-    @Override
-    @Nullable
-    public /* synthetic */ GuiEventListener getFocused() {
-        return this.getFocused();
-    }
-
     class TrackedList
     extends AbstractList<E> {
         private final List<E> delegate = Lists.newArrayList();
@@ -484,7 +478,7 @@ implements Widget {
 
         @Override
         public E get(int debug1) {
-            return (Entry)this.delegate.get(debug1);
+            return (E) this.delegate.get(debug1); // MagmaCube - decompile fix
         }
 
         @Override
@@ -496,7 +490,7 @@ implements Widget {
         public E set(int debug1, E debug2) {
             Entry debug3 = (Entry)this.delegate.set(debug1, debug2);
             AbstractSelectionList.this.bindEntryToSelf(debug2);
-            return debug3;
+            return (E) debug3; // MagmaCube - decompile fix
         }
 
         @Override
@@ -507,27 +501,7 @@ implements Widget {
 
         @Override
         public E remove(int debug1) {
-            return (Entry)this.delegate.remove(debug1);
-        }
-
-        @Override
-        public /* synthetic */ Object remove(int n) {
-            return this.remove(n);
-        }
-
-        @Override
-        public /* synthetic */ void add(int n, Object object) {
-            this.add(n, (E)((Entry)object));
-        }
-
-        @Override
-        public /* synthetic */ Object set(int n, Object object) {
-            return this.set(n, (E)((Entry)object));
-        }
-
-        @Override
-        public /* synthetic */ Object get(int n) {
-            return this.get(n);
+            return (E) this.delegate.remove(debug1); // MagmaCube - decompile fix
         }
     }
 
diff --git a/src/main/java/net/minecraft/client/gui/components/ContainerObjectSelectionList.java b/src/main/java/net/minecraft/client/gui/components/ContainerObjectSelectionList.java
index c63ef49d32b8804758e82fd063dc9eb8f3a56def..73f001f5cebf0158f51d8826d17b971ebdd16fe3 100644
--- a/src/main/java/net/minecraft/client/gui/components/ContainerObjectSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/components/ContainerObjectSelectionList.java
@@ -12,7 +12,7 @@ import net.minecraft.client.gui.components.AbstractSelectionList;
 import net.minecraft.client.gui.components.events.ContainerEventHandler;
 import net.minecraft.client.gui.components.events.GuiEventListener;
 
-public abstract class ContainerObjectSelectionList<E extends Entry<E>>
+public abstract class ContainerObjectSelectionList<E extends ContainerObjectSelectionList.Entry<E>> // MagmaCube - decompile fix
 extends AbstractSelectionList<E> {
     public ContainerObjectSelectionList(Minecraft debug1, int debug2, int debug3, int debug4, int debug5, int debug6) {
         super(debug1, debug2, debug3, debug4, debug5, debug6);
diff --git a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
index 9728567798c3465583883d96eb4d18d5cb962c1c..e0a9169b38080bcf216ff146ba9977fab1a766d6 100644
--- a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
@@ -24,6 +24,7 @@ import com.mojang.blaze3d.vertex.Tesselator;
 import com.mojang.datafixers.DataFixUtils;
 import com.mojang.math.Matrix4f;
 import com.mojang.math.Transformation;
+import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.longs.LongSets;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import java.util.ArrayList;
@@ -64,6 +65,7 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.NaturalSpawner;
 import net.minecraft.world.level.block.state.BlockBehaviour;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateHolder;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.chunk.ChunkStatus;
@@ -171,13 +173,13 @@ extends GuiComponent {
         float debug4 = debug3.getAverageSentPackets();
         float debug5 = debug3.getAverageReceivedPackets();
         if (debug2 != null) {
-            String debug122 = String.format("Integrated server @ %.0f ms ticks, %.0f tx, %.0f rx", Float.valueOf(debug2.getAverageTickTime()), Float.valueOf(debug4), Float.valueOf(debug5));
+            debug12 = String.format("Integrated server @ %.0f ms ticks, %.0f tx, %.0f rx", Float.valueOf(debug2.getAverageTickTime()), Float.valueOf(debug4), Float.valueOf(debug5)); // MagmaCube - decompile fix
         } else {
-            debug12 = String.format("Â¥"%sÂ¥" server, %.0f tx, %.0f rx", this.minecraft.player.getServerBrand(), Float.valueOf(debug4), Float.valueOf(debug5));
+            debug12 = String.format("\"%s\" server, %.0f tx, %.0f rx", this.minecraft.player.getServerBrand(), Float.valueOf(debug4), Float.valueOf(debug5)); // MagmaCube - decompile fix
         }
         BlockPos debug6 = this.minecraft.getCameraEntity().blockPosition();
         if (this.minecraft.showOnlyReducedInfo()) {
-            return Lists.newArrayList((Object[])new String[]{"Minecraft " + SharedConstants.getCurrentVersion().getName() + " (" + this.minecraft.getLaunchedVersion() + "/" + ClientBrandRetriever.getClientModName() + ")", this.minecraft.fpsString, debug12, this.minecraft.levelRenderer.getChunkStatistics(), this.minecraft.levelRenderer.getEntityStatistics(), "P: " + this.minecraft.particleEngine.countParticles() + ". T: " + this.minecraft.level.getEntityCount(), this.minecraft.level.gatherChunkSourceStats(), "", String.format("Chunk-relative: %d %d %d", debug6.getX() & 0xF, debug6.getY() & 0xF, debug6.getZ() & 0xF)});
+            return Lists.newArrayList(new String[]{"Minecraft " + SharedConstants.getCurrentVersion().getName() + " (" + this.minecraft.getLaunchedVersion() + "/" + ClientBrandRetriever.getClientModName() + ")", this.minecraft.fpsString, debug12, this.minecraft.levelRenderer.getChunkStatistics(), this.minecraft.levelRenderer.getEntityStatistics(), "P: " + this.minecraft.particleEngine.countParticles() + ". T: " + this.minecraft.level.getEntityCount(), this.minecraft.level.gatherChunkSourceStats(), "", String.format("Chunk-relative: %d %d %d", debug6.getX() & 0xF, debug6.getY() & 0xF, debug6.getZ() & 0xF)}); // MagmaCube - decompile fix
         }
         Entity debug7 = this.minecraft.getCameraEntity();
         Direction debug8 = debug7.getDirection();
@@ -207,7 +209,7 @@ extends GuiComponent {
             this.lastPos = debug10;
             this.clearChunkCache();
         }
-        LongSets.EmptySet debug122 = (debug11 = this.getLevel()) instanceof ServerLevel ? ((ServerLevel)debug11).getForcedChunks() : LongSets.EMPTY_SET;
+        LongSet debug122 = (debug11 = this.getLevel()) instanceof ServerLevel ? ((ServerLevel)debug11).getForcedChunks() : LongSets.EMPTY_SET; // MagmaCube - decompile fix
         ArrayList debug13 = Lists.newArrayList((Object[])new String[]{"Minecraft " + SharedConstants.getCurrentVersion().getName() + " (" + this.minecraft.getLaunchedVersion() + "/" + ClientBrandRetriever.getClientModName() + ("release".equalsIgnoreCase(this.minecraft.getVersionType()) ? "" : "/" + this.minecraft.getVersionType()) + ")", this.minecraft.fpsString, debug12, this.minecraft.levelRenderer.getChunkStatistics(), this.minecraft.levelRenderer.getEntityStatistics(), "P: " + this.minecraft.particleEngine.countParticles() + ". T: " + this.minecraft.level.getEntityCount(), this.minecraft.level.gatherChunkSourceStats()});
         String debug14 = this.getServerChunkStats();
         if (debug14 != null) {
@@ -335,8 +337,6 @@ extends GuiComponent {
     }
 
     protected List<String> getSystemInformation() {
-        StateHolder debug11;
-        Object debug10;
         long debug1 = Runtime.getRuntime().maxMemory();
         long debug3 = Runtime.getRuntime().totalMemory();
         long debug5 = Runtime.getRuntime().freeMemory();
@@ -346,8 +346,8 @@ extends GuiComponent {
             return debug9;
         }
         if (this.block.getType() == HitResult.Type.BLOCK) {
-            debug10 = ((BlockHitResult)this.block).getBlockPos();
-            debug11 = this.minecraft.level.getBlockState((BlockPos)debug10);
+            BlockPos debug10 = ((BlockHitResult)this.block).getBlockPos(); // MagmaCube - decompile fix
+            BlockState debug11 = this.minecraft.level.getBlockState((BlockPos)debug10); // MagmaCube - decompile fix
             debug9.add("");
             debug9.add((Object)((Object)ChatFormatting.UNDERLINE) + "Targeted Block: " + ((Vec3i)debug10).getX() + ", " + ((Vec3i)debug10).getY() + ", " + ((Vec3i)debug10).getZ());
             debug9.add(String.valueOf(Registry.BLOCK.getKey(((BlockBehaviour.BlockStateBase)debug11).getBlock())));
@@ -359,8 +359,8 @@ extends GuiComponent {
             }
         }
         if (this.liquid.getType() == HitResult.Type.BLOCK) {
-            debug10 = ((BlockHitResult)this.liquid).getBlockPos();
-            debug11 = this.minecraft.level.getFluidState((BlockPos)debug10);
+            BlockPos debug10 = ((BlockHitResult)this.liquid).getBlockPos(); // MagmaCube - decompile fix
+            FluidState debug11 = this.minecraft.level.getFluidState((BlockPos)debug10); // MagmaCube - decompile fix
             debug9.add("");
             debug9.add((Object)((Object)ChatFormatting.UNDERLINE) + "Targeted Fluid: " + ((Vec3i)debug10).getX() + ", " + ((Vec3i)debug10).getY() + ", " + ((Vec3i)debug10).getZ());
             debug9.add(String.valueOf(Registry.FLUID.getKey(((FluidState)debug11).getType())));
@@ -371,6 +371,7 @@ extends GuiComponent {
                 debug9.add("#" + resourceLocation);
             }
         }
+        Entity debug10; // MagmaCube - decompile fix
         if ((debug10 = this.minecraft.crosshairPickEntity) != null) {
             debug9.add("");
             debug9.add((Object)((Object)ChatFormatting.UNDERLINE) + "Targeted Entity");
diff --git a/src/main/java/net/minecraft/client/gui/components/OptionsList.java b/src/main/java/net/minecraft/client/gui/components/OptionsList.java
index 4a091e5ea8c3d4b8e4ffbdf610a4400965c7e670..5434c85e6cdcce024d5e16e0c451fb5ad4770ab6 100644
--- a/src/main/java/net/minecraft/client/gui/components/OptionsList.java
+++ b/src/main/java/net/minecraft/client/gui/components/OptionsList.java
@@ -21,7 +21,7 @@ import net.minecraft.client.gui.components.OptionButton;
 import net.minecraft.client.gui.components.events.GuiEventListener;
 
 public class OptionsList
-extends ContainerObjectSelectionList<Entry> {
+extends ContainerObjectSelectionList<OptionsList.Entry> { // MagmaCube - decompile fix
     public OptionsList(Minecraft debug1, int debug2, int debug3, int debug4, int debug5, int debug6) {
         super(debug1, debug2, debug3, debug4, debug5, debug6);
         this.centerListVertically = false;
@@ -81,15 +81,15 @@ extends ContainerObjectSelectionList<Entry> {
         }
 
         public static Entry big(Options debug0, int debug1, Option debug2) {
-            return new Entry((List<AbstractWidget>)ImmutableList.of((Object)debug2.createButton(debug0, debug1 / 2 - 155, 0, 310)));
+            return new Entry(ImmutableList.of(debug2.createButton(debug0, debug1 / 2 - 155, 0, 310))); // MagmaCube - decompile fix
         }
 
         public static Entry small(Options debug0, int debug1, Option debug2, @Nullable Option debug3) {
             AbstractWidget debug4 = debug2.createButton(debug0, debug1 / 2 - 155, 0, 150);
             if (debug3 == null) {
-                return new Entry((List<AbstractWidget>)ImmutableList.of((Object)debug4));
+                return new Entry(ImmutableList.of(debug4)); // MagmaCube - decompile fix
             }
-            return new Entry((List<AbstractWidget>)ImmutableList.of((Object)debug4, (Object)debug3.createButton(debug0, debug1 / 2 - 155 + 160, 0, 150)));
+            return new Entry(ImmutableList.of(debug4, debug3.createButton(debug0, debug1 / 2 - 155 + 160, 0, 150))); // MagmaCube - decompile fix
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java b/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java
index fd346a2ea6f2fa01c41d018875fe23ad594c7ade..0549a8039b7a4c07f18280f3a66d4214c0935d30 100644
--- a/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java
@@ -77,7 +77,7 @@ extends GuiComponent {
         int debug9;
         int debug11;
         ClientPacketListener debug5 = this.minecraft.player.connection;
-        List debug6 = PLAYER_ORDERING.sortedCopy(debug5.getOnlinePlayers());
+        List<PlayerInfo> debug6 = PLAYER_ORDERING.sortedCopy(debug5.getOnlinePlayers()); // MagmaCube - decompile fix
         int debug7 = 0;
         int debug8 = 0;
         for (PlayerInfo debug10 : debug6) {
@@ -275,12 +275,7 @@ extends GuiComponent {
         public int compare(PlayerInfo debug1, PlayerInfo debug2) {
             PlayerTeam debug3 = debug1.getTeam();
             PlayerTeam debug4 = debug2.getTeam();
-            return ComparisonChain.start().compareTrueFirst(debug1.getGameMode() != GameType.SPECTATOR, debug2.getGameMode() != GameType.SPECTATOR).compare((Comparable)((Object)(debug3 != null ? debug3.getName() : "")), (Comparable)((Object)(debug4 != null ? debug4.getName() : ""))).compare((Object)debug1.getProfile().getName(), (Object)debug2.getProfile().getName(), String::compareToIgnoreCase).result();
-        }
-
-        @Override
-        public /* synthetic */ int compare(Object object, Object object2) {
-            return this.compare((PlayerInfo)object, (PlayerInfo)object2);
+            return ComparisonChain.start().compareTrueFirst(debug1.getGameMode() != GameType.SPECTATOR, debug2.getGameMode() != GameType.SPECTATOR).compare((Comparable)((Object)(debug3 != null ? debug3.getName() : "")), (Comparable)((Object)(debug4 != null ? debug4.getName() : ""))).compare(debug1.getProfile().getName(), debug2.getProfile().getName(), String::compareToIgnoreCase).result(); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/client/gui/components/events/ContainerEventHandler.java b/src/main/java/net/minecraft/client/gui/components/events/ContainerEventHandler.java
index d671b0f4f7f542d6aaac0e4e168ddb26adfd7632..3879847e5b2a3382c2663e3a4bb4152a76b088ab 100644
--- a/src/main/java/net/minecraft/client/gui/components/events/ContainerEventHandler.java
+++ b/src/main/java/net/minecraft/client/gui/components/events/ContainerEventHandler.java
@@ -36,7 +36,7 @@ public interface ContainerEventHandler extends GuiEventListener
     
     default boolean mouseReleased(final double debug1, final double debug3, final int debug5) {
         this.setDragging(false);
-        return this.getChildAt(debug1, debug3).filter(debug5 -> debug5.mouseReleased(debug1, debug3, debug5)).isPresent();
+        return this.getChildAt(debug1, debug3).filter(debug5l -> debug5l.mouseReleased(debug1, debug3, debug5)).isPresent(); // MagmaCube - decompile fix
     }
     
     default boolean mouseDragged(final double debug1, final double debug3, final int debug5, final double debug6, final double debug8) {
@@ -97,7 +97,7 @@ public interface ContainerEventHandler extends GuiEventListener
         }
         final ListIterator<? extends GuiEventListener> debug7 = debug4.listIterator(debug6);
         final BooleanSupplier debug8 = debug1 ? debug7::hasNext : debug7::hasPrevious;
-        final Supplier<? extends GuiEventListener> debug9 = (Supplier<? extends GuiEventListener>)(debug1 ? debug7::next : debug7::previous);
+        final Supplier<? extends GuiEventListener> debug9 = (debug1 ? debug7::next : debug7::previous); // MagmaCube - decompile fix
         while (debug8.getAsBoolean()) {
             final GuiEventListener debug10 = (GuiEventListener)debug9.get();
             if (debug10.changeFocus(debug1)) {
diff --git a/src/main/java/net/minecraft/client/gui/components/toasts/SystemToast.java b/src/main/java/net/minecraft/client/gui/components/toasts/SystemToast.java
index a4a68438ea3a06176c15b6d2adf7cc8a79467c3c..1bbb2046da3d598918e4b9e67a12d52302e57b8f 100644
--- a/src/main/java/net/minecraft/client/gui/components/toasts/SystemToast.java
+++ b/src/main/java/net/minecraft/client/gui/components/toasts/SystemToast.java
@@ -49,7 +49,7 @@ implements Toast {
     }
 
     private static ImmutableList<FormattedCharSequence> nullToEmpty(@Nullable Component debug0) {
-        return debug0 == null ? ImmutableList.of() : ImmutableList.of((Object)debug0.getVisualOrderText());
+        return debug0 == null ? ImmutableList.of() : ImmutableList.of(debug0.getVisualOrderText()); // MagmaCube - decompile fix
     }
 
     @Override
@@ -136,11 +136,6 @@ implements Toast {
         SystemToast.add(debug0.getToasts(), SystemToastIds.PACK_COPY_FAILURE, new TranslatableComponent("pack.copyFailure"), new TextComponent(debug1));
     }
 
-    @Override
-    public /* synthetic */ Object getToken() {
-        return this.getToken();
-    }
-
     public static enum SystemToastIds {
         TUTORIAL_HINT,
         NARRATOR_TOGGLE,
diff --git a/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java b/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java
index ce5ad69fcce798fc247e13eb7826ceb149733d39..6415182b613b10b5a434cc798ceafe83e6566b43 100644
--- a/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java
+++ b/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java
@@ -39,7 +39,7 @@ extends GuiComponent {
                 this.visible[debug2] = null;
             }
             if (this.visible[debug2] != null || this.queued.isEmpty()) continue;
-            this.visible[debug2] = new ToastInstance(this, this.queued.removeFirst());
+            this.visible[debug2] = new ToastInstance(this.queued.removeFirst()); // MagmaCube - decompile fix
         }
     }
 
@@ -69,15 +69,13 @@ extends GuiComponent {
         return this.minecraft;
     }
 
-    static class ToastInstance<T extends Toast> {
+    class ToastInstance<T extends Toast> { // MagmaCube - decompile fix
         private final T toast;
         private long animationTime = -1L;
         private long visibleTime = -1L;
         private Toast.Visibility visibility = Toast.Visibility.SHOW;
-        final /* synthetic */ ToastComponent this$0;
 
         private ToastInstance(T debug2) {
-            this.this$0 = var1_1;
             this.toast = debug2;
         }
 
@@ -98,19 +96,19 @@ extends GuiComponent {
             long debug4 = Util.getMillis();
             if (this.animationTime == -1L) {
                 this.animationTime = debug4;
-                this.visibility.playSound(this.this$0.minecraft.getSoundManager());
+                this.visibility.playSound(ToastComponent.this.minecraft.getSoundManager()); // MagmaCube - decompile fix
             }
             if (this.visibility == Toast.Visibility.SHOW && debug4 - this.animationTime <= 600L) {
                 this.visibleTime = debug4;
             }
             RenderSystem.pushMatrix();
             RenderSystem.translatef((float)debug1 - (float)this.toast.width() * this.getVisibility(debug4), debug2 * this.toast.height(), 800 + debug2);
-            Toast.Visibility debug6 = this.toast.render(debug3, this.this$0, debug4 - this.visibleTime);
+            Toast.Visibility debug6 = this.toast.render(debug3, ToastComponent.this, debug4 - this.visibleTime); // MagmaCube - decompile fix
             RenderSystem.popMatrix();
             if (debug6 != this.visibility) {
                 this.animationTime = debug4 - (long)((int)((1.0f - this.getVisibility(debug4)) * 600.0f));
                 this.visibility = debug6;
-                this.visibility.playSound(this.this$0.minecraft.getSoundManager());
+                this.visibility.playSound(ToastComponent.this.minecraft.getSoundManager()); // MagmaCube - decompile fix
             }
             return this.visibility == Toast.Visibility.HIDE && debug4 - this.animationTime > 600L;
         }
diff --git a/src/main/java/net/minecraft/client/gui/font/FontManager.java b/src/main/java/net/minecraft/client/gui/font/FontManager.java
index 4ad240c027c6827322c498e1197ca9943c20ee7a..46d96b2f919c178be891ae12b66ada8b3922755c 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontManager.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontManager.java
@@ -32,6 +32,8 @@ import com.google.common.collect.Maps;
 import net.minecraft.server.packs.resources.PreparableReloadListener;
 import net.minecraft.client.renderer.texture.TextureManager;
 import java.util.Map;
+import java.util.function.IntConsumer;
+
 import net.minecraft.resources.ResourceLocation;
 import org.apache.logging.log4j.Logger;
 
@@ -46,18 +48,18 @@ public class FontManager implements AutoCloseable
     private final PreparableReloadListener reloadListener;
     
     public FontManager(final TextureManager debug1) {
-        this.fontSets = (Map<ResourceLocation, FontSet>)Maps.newHashMap();
-        this.renames = (Map<ResourceLocation, ResourceLocation>)ImmutableMap.of();
+        this.fontSets = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.renames = ImmutableMap.of(); // MagmaCube - decompile fix
         this.reloadListener = new SimplePreparableReloadListener<Map<ResourceLocation, List<GlyphProvider>>>() {
             @Override
             protected Map<ResourceLocation, List<GlyphProvider>> prepare(final ResourceManager debug1, final ProfilerFiller debug2) {
                 debug2.startTick();
                 final Gson debug3 = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();
-                final Map<ResourceLocation, List<GlyphProvider>> debug4 = (Map<ResourceLocation, List<GlyphProvider>>)Maps.newHashMap();
+                final Map<ResourceLocation, List<GlyphProvider>> debug4 = Maps.newHashMap(); // MagmaCube - decompile fix
                 for (final ResourceLocation debug5 : debug1.listResources("font", debug0 -> debug0.endsWith(".json"))) {
                     final String debug6 = debug5.getPath();
-                    final ResourceLocation debug7 = new ResourceLocation(debug5.getNamespace(), debug6.substring("font/".length(), debug6.length() - ".json".length()));
-                    final List<GlyphProvider> debug8 = debug4.computeIfAbsent(debug7, debug0 -> Lists.newArrayList((Object[])new GlyphProvider[] { new AllMissingGlyphProvider() }));
+                        final ResourceLocation debug7 = new ResourceLocation(debug5.getNamespace(), debug6.substring("font/".length(), debug6.length() - ".json".length()));
+                        final List<GlyphProvider> debug8 = debug4.computeIfAbsent(debug7, debug0 -> Lists.newArrayList(new GlyphProvider[] { new AllMissingGlyphProvider() })); // MagmaCube - decompile fix
                     debug2.push(debug7::toString);
                     try {
                         for (final Resource debug9 : debug1.getResources(debug5)) {
@@ -96,21 +98,21 @@ public class FontManager implements AutoCloseable
                     }
                     debug2.push("caching");
                     final IntSet debug21 = (IntSet)new IntOpenHashSet();
+                    final List<GlyphProvider> list; // MagmaCube - decompile fix
                     for (final GlyphProvider debug22 : debug8) {
                         debug21.addAll((IntCollection)debug22.getSupportedGlyphs());
                     }
-                    final List list;
-                    final Iterator<GlyphProvider> iterator4;
-                    GlyphProvider debug23;
-                    debug21.forEach(debug1 -> {
-                        if (debug1 == 32) {
+                    debug21.forEach((IntConsumer) debug1l -> { // MagmaCube - decompile fix
+                        if (debug1l == 32) { // MagmaCube - decompile fix
                             return;
                         }
                         else {
-                            Lists.reverse(list).iterator();
+                            // MagmaCube start - decompile fix
+                            Iterator<GlyphProvider> iterator4 = Lists.reverse(debug8).iterator(); // MagmaCube - todo: check if it works
                             while (iterator4.hasNext()) {
-                                debug23 = iterator4.next();
-                                if (debug23.getGlyph(debug1) != null) {
+                                GlyphProvider debug23 = iterator4.next();
+                                if (debug23.getGlyph(debug1l) != null) {
+                                    // MagmaCube end - decompile fix
                                     break;
                                 }
                             }
@@ -131,11 +133,12 @@ public class FontManager implements AutoCloseable
                 FontManager.this.fontSets.values().forEach(FontSet::close);
                 FontManager.this.fontSets.clear();
                 debug3.popPush("reloading");
-                final FontSet debug4;
-                debug1.forEach((debug1, debug2) -> {
-                    debug4 = new FontSet(FontManager.this.textureManager, debug1);
-                    debug4.reload(Lists.reverse(debug2));
-                    FontManager.this.fontSets.put(debug1, debug4);
+                // MagmaCube start - decompile fix
+                debug1.forEach((debug1l, debug2l) -> {
+                    FontSet debug4 = new FontSet(FontManager.this.textureManager, debug1l);
+                    debug4.reload(Lists.reverse(debug2l));
+                    FontManager.this.fontSets.put(debug1l, debug4);
+                    // MagmaCube end - decompile fix
                     return;
                 });
                 debug3.pop();
@@ -148,7 +151,7 @@ public class FontManager implements AutoCloseable
             }
         };
         this.textureManager = debug1;
-        this.missingFontSet = Util.make(new FontSet(debug1, FontManager.MISSING_FONT), debug0 -> debug0.reload(Lists.newArrayList((Object[])new GlyphProvider[] { new AllMissingGlyphProvider() })));
+        this.missingFontSet = Util.make(new FontSet(debug1, FontManager.MISSING_FONT), debug0 -> debug0.reload(Lists.newArrayList(new GlyphProvider[] { new AllMissingGlyphProvider() }))); // MagmaCube - decompile fix
     }
     
     public void setRenames(final Map<ResourceLocation, ResourceLocation> debug1) {
diff --git a/src/main/java/net/minecraft/client/gui/font/FontSet.java b/src/main/java/net/minecraft/client/gui/font/FontSet.java
index 3aacc324fa95b316d7c7b902ca66f66dacb7caba..152ef5122ef8a2f9c2b3a560b21f930fb5e83214 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontSet.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontSet.java
@@ -5,6 +5,7 @@ import java.util.Set;
 import java.util.Iterator;
 import it.unimi.dsi.fastutil.ints.IntSet;
 import java.util.function.Consumer;
+import java.util.function.IntConsumer;
 import java.util.function.Predicate;
 import it.unimi.dsi.fastutil.ints.IntArrayList;
 import net.minecraft.util.Mth;
@@ -43,11 +44,11 @@ public class FontSet implements AutoCloseable
     private final List<FontTexture> textures;
     
     public FontSet(final TextureManager debug1, final ResourceLocation debug2) {
-        this.providers = (List<GlyphProvider>)Lists.newArrayList();
+        this.providers = Lists.newArrayList(); // MagmaCube - decompile fix
         this.glyphs = (Int2ObjectMap<BakedGlyph>)new Int2ObjectOpenHashMap();
         this.glyphInfos = (Int2ObjectMap<GlyphInfo>)new Int2ObjectOpenHashMap();
         this.glyphsByWidth = (Int2ObjectMap<IntList>)new Int2ObjectOpenHashMap();
-        this.textures = (List<FontTexture>)Lists.newArrayList();
+        this.textures = Lists.newArrayList(); // MagmaCube - decompile fix
         this.textureManager = debug1;
         this.name = debug2;
     }
@@ -64,16 +65,12 @@ public class FontSet implements AutoCloseable
         for (final GlyphProvider debug5 : debug1) {
             debug4.addAll((IntCollection)debug5.getSupportedGlyphs());
         }
-        final Set<GlyphProvider> debug6 = (Set<GlyphProvider>)Sets.newHashSet();
-        final Iterator<GlyphProvider> iterator2;
-        GlyphProvider debug7;
-        GlyphInfo debug8;
-        final Set<GlyphProvider> set;
-        debug4.forEach(debug3 -> {
-            debug1.iterator();
+        final Set<GlyphProvider> set = Sets.newHashSet(); // MagmaCube - decompile fix
+        debug4.forEach((IntConsumer) debug3 -> { // MagmaCube - decompile fix
+            Iterator<GlyphProvider> iterator2 = debug1.iterator(); // MagmaCube - decompile fix
             while (iterator2.hasNext()) {
-                debug7 = iterator2.next();
-                debug8 = ((debug3 == 32) ? FontSet.SPACE_INFO : debug7.getGlyph(debug3));
+                GlyphProvider debug7 = iterator2.next(); // MagmaCube - decompile fix
+                GlyphInfo debug8 = ((debug3 == 32) ? FontSet.SPACE_INFO : debug7.getGlyph(debug3)); // MagmaCube - decompile fix
                 if (debug8 != null) {
                     set.add(debug7);
                     if (debug8 != MissingGlyph.INSTANCE) {
@@ -87,7 +84,7 @@ public class FontSet implements AutoCloseable
             }
             return;
         });
-        debug1.stream().filter(debug6::contains).forEach(this.providers::add);
+        debug1.stream().filter(set::contains).forEach(this.providers::add); // MagmaCube - decompile fix
     }
     
     @Override
@@ -111,7 +108,7 @@ public class FontSet implements AutoCloseable
     }
     
     public GlyphInfo getGlyphInfo(final int debug1) {
-        return (GlyphInfo)this.glyphInfos.computeIfAbsent(debug1, debug1 -> (debug1 == 32) ? FontSet.SPACE_INFO : this.getRaw(debug1));
+        return (GlyphInfo)this.glyphInfos.computeIfAbsent(debug1, debug1l -> (debug1l == 32) ? FontSet.SPACE_INFO : this.getRaw(debug1l)); // MagmaCube - decompile fix
     }
     
     private RawGlyph getRaw(final int debug1) {
@@ -125,7 +122,7 @@ public class FontSet implements AutoCloseable
     }
     
     public BakedGlyph getGlyph(final int debug1) {
-        return (BakedGlyph)this.glyphs.computeIfAbsent(debug1, debug1 -> (debug1 == 32) ? FontSet.SPACE_GLYPH : this.stitch(this.getRaw(debug1)));
+        return (BakedGlyph)this.glyphs.computeIfAbsent(debug1, debug1l -> (debug1l == 32) ? FontSet.SPACE_GLYPH : this.stitch(this.getRaw(debug1l))); // MagmaCube - decompile fix
     }
     
     private BakedGlyph stitch(final RawGlyph debug1) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/CreateBuffetWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/CreateBuffetWorldScreen.java
index ca158aa7d552faa63905c8cb97a7c23a12feb459..c9777e2eec5e76422d71bf3653dda08037330f5c 100644
--- a/src/main/java/net/minecraft/client/gui/screens/CreateBuffetWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/CreateBuffetWorldScreen.java
@@ -78,7 +78,7 @@ extends Screen {
     }
 
     class BiomeList
-    extends ObjectSelectionList<Entry> {
+    extends ObjectSelectionList<BiomeList.Entry> { // MagmaCube - decompile fix
         private BiomeList() {
             super(CreateBuffetWorldScreen.this.minecraft, CreateBuffetWorldScreen.this.width, CreateBuffetWorldScreen.this.height, 40, CreateBuffetWorldScreen.this.height - 37, 16);
             CreateBuffetWorldScreen.this.biomes.entrySet().stream().sorted(Comparator.comparing(debug0 -> ((ResourceKey)debug0.getKey()).location().toString())).forEach(debug1 -> this.addEntry(new Entry((Biome)debug1.getValue())));
diff --git a/src/main/java/net/minecraft/client/gui/screens/CreateFlatWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/CreateFlatWorldScreen.java
index 11e148be80940c53e04bd3ac237f224a8bf1b2d6..e1ab2b65d61c45e65d5d747082c02ecbfcd193af 100644
--- a/src/main/java/net/minecraft/client/gui/screens/CreateFlatWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/CreateFlatWorldScreen.java
@@ -117,7 +117,7 @@ extends Screen {
     }
 
     class DetailsList
-    extends ObjectSelectionList<Entry> {
+    extends ObjectSelectionList<DetailsList.Entry> { // MagmaCube - decompile fix
         public DetailsList() {
             super(CreateFlatWorldScreen.this.minecraft, CreateFlatWorldScreen.this.width, CreateFlatWorldScreen.this.height, 43, CreateFlatWorldScreen.this.height - 60, 24);
             for (int debug2 = 0; debug2 < CreateFlatWorldScreen.this.generator.getLayersInfo().size(); ++debug2) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java b/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java
index bb2ce6333e3494fea44cb25d439d3cf2f1c0b19e..ae512ae127b2fa9b6ce28d0b015f98b2c64eac8b 100644
--- a/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java
@@ -71,7 +71,7 @@ extends OptionsSubScreen {
     }
 
     class LanguageSelectionList
-    extends ObjectSelectionList<Entry> {
+    extends ObjectSelectionList<LanguageSelectionList.Entry> { // MagmaCube - decompile fix
         public LanguageSelectionList(Minecraft debug2) {
             super(debug2, LanguageSelectScreen.this.width, LanguageSelectScreen.this.height, 32, LanguageSelectScreen.this.height - 65 + 4, 18);
             for (LanguageInfo debug4 : LanguageSelectScreen.this.languageManager.getLanguages()) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
index c83bc231586a38dcbadae056ea9088b6634e42bd..96863800992484f29cacde4249db76361ce14a66 100644
--- a/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
@@ -123,7 +123,6 @@ extends Screen {
     }
 
     public static FlatLevelGeneratorSettings fromString(Registry<Biome> debug0, String debug1, FlatLevelGeneratorSettings debug2) {
-        Object debug7;
         Iterator debug3 = Splitter.on((char)';').split((CharSequence)debug1).iterator();
         if (!debug3.hasNext()) {
             return FlatLevelGeneratorSettings.getDefault(debug0);
@@ -136,7 +135,7 @@ extends Screen {
         ResourceKey<Biome> debug6 = Biomes.PLAINS;
         if (debug3.hasNext()) {
             try {
-                debug7 = new ResourceLocation((String)debug3.next());
+                ResourceLocation debug7 = new ResourceLocation((String)debug3.next()); // MagmaCube - decompile fix
                 debug6 = ResourceKey.create(Registry.BIOME_REGISTRY, (ResourceLocation)debug7);
                 debug0.getOptional(debug6).orElseThrow(() -> PresetFlatWorldScreen.lambda$fromString$0((ResourceLocation)debug7));
             }
@@ -144,7 +143,7 @@ extends Screen {
                 LOGGER.error("Error while parsing flat world string => {}", (Object)debug72.getMessage());
             }
         }
-        debug7 = debug6;
+        ResourceKey<Biome> debug7 = debug6; // MagmaCube - decompile fix
         debug5.setBiome(() -> (Biome)debug0.getOrThrow((ResourceKey<Biome>)debug7));
         return debug5;
     }
@@ -232,21 +231,20 @@ extends Screen {
 
     private static void preset(Component debug0, ItemLike debug1, ResourceKey<Biome> debug2, List<StructureFeature<?>> debug3, boolean debug4, boolean debug5, boolean debug62, FlatLayerInfo ... debug7) {
         PRESETS.add(new PresetInfo(debug1.asItem(), debug0, debug6 -> {
-            Object debug92;
-            HashMap debug7 = Maps.newHashMap();
-            for (Object debug92 : debug3) {
-                debug7.put(debug92, StructureSettings.DEFAULTS.get(debug92));
+            HashMap debug7l = Maps.newHashMap(); // MagmaCube - decompile fix
+            for (StructureFeature<?> debug92 : debug3) { // MagmaCube - decompile fix
+                debug7l.put(debug92, StructureSettings.DEFAULTS.get(debug92)); // MagmaCube - decompile fix
             }
-            StructureSettings debug8 = new StructureSettings(debug4 ? Optional.of(StructureSettings.DEFAULT_STRONGHOLD) : Optional.empty(), debug7);
-            debug92 = new FlatLevelGeneratorSettings(debug8, (Registry<Biome>)debug6);
+            StructureSettings debug8 = new StructureSettings(debug4 ? Optional.of(StructureSettings.DEFAULT_STRONGHOLD) : Optional.empty(), debug7l); // MagmaCube - decompile fix
+            FlatLevelGeneratorSettings debug92 = new FlatLevelGeneratorSettings(debug8, (Registry<Biome>)debug6); // MagmaCube - decompile fix
             if (debug5) {
                 ((FlatLevelGeneratorSettings)debug92).setDecoration();
             }
             if (debug62) {
                 ((FlatLevelGeneratorSettings)debug92).setAddLakes();
             }
-            for (int debug10 = debug7.length - 1; debug10 >= 0; --debug10) {
-                ((FlatLevelGeneratorSettings)debug92).getLayersInfo().add(debug7[debug10]);
+            for (int debug10 = debug7.length - 1; debug10 >= 0; --debug10) { // MagmaCube - decompile fix
+                ((FlatLevelGeneratorSettings)debug92).getLayersInfo().add((FlatLayerInfo) debug7[debug10]); // MagmaCube - decompile fix
             }
             ((FlatLevelGeneratorSettings)debug92).setBiome(() -> (Biome)debug6.getOrThrow(debug2));
             ((FlatLevelGeneratorSettings)debug92).updateLayers();
@@ -287,7 +285,7 @@ extends Screen {
     }
 
     class PresetsList
-    extends ObjectSelectionList<Entry> {
+    extends ObjectSelectionList<PresetsList.Entry> { // MagmaCube - decompile fix
         public PresetsList() {
             super(PresetFlatWorldScreen.this.minecraft, PresetFlatWorldScreen.this.width, PresetFlatWorldScreen.this.height, 80, PresetFlatWorldScreen.this.height - 37, 24);
             for (int debug2 = 0; debug2 < PRESETS.size(); ++debug2) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/Screen.java b/src/main/java/net/minecraft/client/gui/screens/Screen.java
index 41b4fa64a8c749e6ff65e976236bf3152c1a1f98..8a185d46e58cbbb2d9159027511dfed07728a586 100644
--- a/src/main/java/net/minecraft/client/gui/screens/Screen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/Screen.java
@@ -58,7 +58,7 @@ extends AbstractContainerEventHandler
 implements TickableWidget,
 Widget {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final Set<String> ALLOWED_PROTOCOLS = Sets.newHashSet((Object[])new String[]{"http", "https"});
+    private static final Set<String> ALLOWED_PROTOCOLS = Sets.newHashSet(new String[]{"http", "https"}); // MagmaCube - decompile fix
     protected final Component title;
     protected final List<GuiEventListener> children = Lists.newArrayList();
     @Nullable
@@ -145,20 +145,18 @@ Widget {
      * WARNING - void declaration
      */
     public void renderTooltip(PoseStack debug1, List<? extends FormattedCharSequence> debug2, int debug3, int debug4) {
-        int n;
-        int debug8;
         if (debug2.isEmpty()) {
             return;
         }
         int debug5 = 0;
         for (FormattedCharSequence formattedCharSequence : debug2) {
-            debug8 = this.font.width(formattedCharSequence);
+            int debug8 = this.font.width(formattedCharSequence); // MagmaCube - decompile fix
             if (debug8 <= debug5) continue;
             debug5 = debug8;
         }
         int debug6 = debug3 + 12;
-        int n2 = debug4 - 12;
-        debug8 = debug5;
+        int n = debug4 - 12; // MagmaCube - decompile fix
+        int debug8 = debug5; // MagmaCube - decompile fix
         int debug9 = 8;
         if (debug2.size() > 1) {
             debug9 += 2 + (debug2.size() - 1) * 10;
@@ -166,7 +164,7 @@ Widget {
         if (debug6 + debug5 > this.width) {
             debug6 -= 28 + debug5;
         }
-        if (n2 + debug9 + 6 > this.height) {
+        if (n + debug9 + 6 > this.height) { // MagmaCube - decompile fix
             n = this.height - debug9 - 6;
         }
         debug1.pushPose();
@@ -202,13 +200,12 @@ Widget {
         for (int debug18 = 0; debug18 < debug2.size(); ++debug18) {
             FormattedCharSequence debug19 = debug2.get(debug18);
             if (debug19 != null) {
-                void var7_11;
-                this.font.drawInBatch(debug19, (float)debug6, (float)var7_11, -1, true, debug16, (MultiBufferSource)debug17, false, 0, 0xF000F0);
+                this.font.drawInBatch(debug19, (float)debug6, (float)n, -1, true, debug16, (MultiBufferSource)debug17, false, 0, 0xF000F0); // MagmaCube - decompile fix
             }
             if (debug18 == 0) {
-                var7_11 += 2;
+                n += 2;
             }
-            var7_11 += 10;
+            n += 10;
         }
         debug17.endBatch();
         debug1.popPose();
diff --git a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
index f91a53c9657dddfc49a80cb2185fe80067233630..a188597553cb646623c07ca5b366ca0a400f5d85 100644
--- a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
@@ -136,17 +136,22 @@ extends Screen {
         }
     }
 
-    private void createNormalMenuOptions(int debug12, int debug22) {
-        this.addButton(new Button(this.width / 2 - 100, debug12, 200, 20, new TranslatableComponent("menu.singleplayer"), debug1 -> this.minecraft.setScreen(new SelectWorldScreen(this))));
-        boolean debug32 = this.minecraft.allowsMultiplayer();
-        Button.OnTooltip debug42 = debug32 ? Button.NO_TOOLTIP : (debug1, debug2, debug3, debug4) -> {
-            if (!debug1.active) {
-                this.renderTooltip(debug2, this.minecraft.font.split(new TranslatableComponent("title.multiplayer.disabled"), Math.max(this.width / 2 - 43, 170)), debug3, debug4);
+    // MagmaCube start - decompile fix
+    private void createNormalMenuOptions(int debug1, int debug2) {
+        this.addButton(new Button(this.width / 2 - 100, debug1, 200, 20, new TranslatableComponent("menu.singleplayer"), debug1l -> this.minecraft.setScreen(new SelectWorldScreen(this))));
+        boolean debug3 = this.minecraft.allowsMultiplayer();
+        Button.OnTooltip debug4 = debug3 ? Button.NO_TOOLTIP : (debug1l, debug2l, debug3l, debug4l) -> {
+            if (!debug1l.active) {
+                this.renderTooltip(debug2l, this.minecraft.font.split(new TranslatableComponent("title.multiplayer.disabled"), Math.max(this.width / 2 - 43, 170)), debug3l, debug4l);
             }
         };
-        this.addButton(new Button((int)(this.width / 2 - 100), (int)(debug12 + debug22 * 1), (int)200, (int)20, (Component)new TranslatableComponent((String)"menu.multiplayer"), (Button.OnPress)(Button.OnPress)LambdaMetafactory.metafactory(null, null, null, (Lnet/minecraft/client/gui/components/Button;)V, lambda$createNormalMenuOptions$6(net.minecraft.client.gui.components.Button ), (Lnet/minecraft/client/gui/components/Button;)V)((TitleScreen)this), (Button.OnTooltip)debug42)).active = debug32;
-        this.addButton(new Button((int)(this.width / 2 - 100), (int)(debug12 + debug22 * 2), (int)200, (int)20, (Component)new TranslatableComponent((String)"menu.online"), (Button.OnPress)(Button.OnPress)LambdaMetafactory.metafactory(null, null, null, (Lnet/minecraft/client/gui/components/Button;)V, lambda$createNormalMenuOptions$7(net.minecraft.client.gui.components.Button ), (Lnet/minecraft/client/gui/components/Button;)V)((TitleScreen)this), (Button.OnTooltip)debug42)).active = debug32;
+        ((Button)addButton(new Button(this.width / 2 - 100, debug1 + debug2 * 1, 200, 20, (Component)new TranslatableComponent("menu.multiplayer"), debug1l -> {
+            Screen debug2l = this.minecraft.options.skipMultiplayerWarning ? (Screen)new JoinMultiplayerScreen(this) : (Screen)new SafetyScreen(this);
+            this.minecraft.setScreen(debug2l);
+        }, debug4))).active = debug3;
+        ((Button)addButton(new Button(this.width / 2 - 100, debug1 + debug2 * 2, 200, 20, (Component)new TranslatableComponent("menu.online"), debug1l -> realmsButtonClicked(), debug4))).active = debug3;
     }
+    // MagmaCube end - decompile fix
 
     private void createDemoMenuOptions(int debug12, int debug22) {
         boolean debug3 = this.checkDemoWorldPresence();
@@ -154,14 +159,14 @@ extends Screen {
             if (debug3) {
                 this.minecraft.loadLevel("Demo_World");
             } else {
-                RegistryAccess.RegistryHolder debug3 = RegistryAccess.builtin();
-                this.minecraft.createLevel("Demo_World", MinecraftServer.DEMO_SETTINGS, debug3, WorldGenSettings.demoSettings(debug3));
+                RegistryAccess.RegistryHolder debug3l = RegistryAccess.builtin(); // MagmaCube - decompile fix
+                this.minecraft.createLevel("Demo_World", MinecraftServer.DEMO_SETTINGS, debug3l, WorldGenSettings.demoSettings(debug3l)); // MagmaCube - decompile fix
             }
         }));
         this.resetDemoButton = this.addButton(new Button(this.width / 2 - 100, debug12 + debug22 * 1, 200, 20, new TranslatableComponent("menu.resetdemo"), debug1 -> {
             LevelStorageSource debug2 = this.minecraft.getLevelSource();
-            try (LevelStorageSource.LevelStorageAccess debug3 = debug2.createAccess("Demo_World");){
-                LevelSummary debug5 = debug3.getSummary();
+            try (LevelStorageSource.LevelStorageAccess debug3l = debug2.createAccess("Demo_World");){ // MagmaCube - decompile fix
+                LevelSummary debug5 = debug3l.getSummary(); // MagmaCube - decompile fix
                 if (debug5 != null) {
                     this.minecraft.setScreen(new ConfirmScreen(this::confirmDemo, new TranslatableComponent("selectWorld.deleteQuestion"), new TranslatableComponent("selectWorld.deleteWarning", debug5.getLevelName()), new TranslatableComponent("selectWorld.deleteButton"), CommonComponents.GUI_CANCEL));
                 }
diff --git a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
index 1a9b5825ab28f9064f1a169687b7c586fd7b4d2e..338e37bf68cd0aaad1885c907d94abafb3a704a9 100644
--- a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
@@ -160,9 +160,8 @@ implements StatsUpdateListener {
     }
 
     class MobsStatisticsList
-    extends ObjectSelectionList<MobRow> {
+    extends ObjectSelectionList<MobsStatisticsList.MobRow> { // MagmaCube - decompile fix
         public MobsStatisticsList(Minecraft debug2) {
-            StatsScreen.this.font.getClass();
             super(debug2, StatsScreen.this.width, StatsScreen.this.height, 32, StatsScreen.this.height - 64, 9 * 4);
             for (EntityType entityType : Registry.ENTITY_TYPE) {
                 if (StatsScreen.this.stats.getValue(Stats.ENTITY_KILLED.get(entityType)) <= 0 && StatsScreen.this.stats.getValue(Stats.ENTITY_KILLED_BY.get(entityType)) <= 0) continue;
@@ -219,7 +218,7 @@ implements StatsUpdateListener {
     }
 
     class ItemStatisticsList
-    extends ObjectSelectionList<ItemRow> {
+    extends ObjectSelectionList<ItemStatisticsList.ItemRow> { // MagmaCube - decompile fix
         protected final List<StatType<Block>> blockColumns;
         protected final List<StatType<Item>> itemColumns;
         private final int[] iconOffsets;
@@ -231,18 +230,17 @@ implements StatsUpdateListener {
         protected int sortOrder;
 
         public ItemStatisticsList(Minecraft debug2) {
-            boolean debug6;
             super(debug2, StatsScreen.this.width, StatsScreen.this.height, 32, StatsScreen.this.height - 64, 20);
             this.iconOffsets = new int[]{3, 4, 1, 2, 5, 6};
             this.headerPressed = -1;
             this.itemStatSorter = new ItemComparator();
             this.blockColumns = Lists.newArrayList();
             this.blockColumns.add(Stats.BLOCK_MINED);
-            this.itemColumns = Lists.newArrayList((Object[])new StatType[]{Stats.ITEM_BROKEN, Stats.ITEM_CRAFTED, Stats.ITEM_USED, Stats.ITEM_PICKED_UP, Stats.ITEM_DROPPED});
+            this.itemColumns = Lists.newArrayList(new StatType[]{Stats.ITEM_BROKEN, Stats.ITEM_CRAFTED, Stats.ITEM_USED, Stats.ITEM_PICKED_UP, Stats.ITEM_DROPPED}); // MagmaCube - decompile fix
             this.setRenderHeader(true, 20);
             Set debug3 = Sets.newIdentityHashSet();
             for (Item item : Registry.ITEM) {
-                debug6 = false;
+                boolean debug6 = false;
                 for (StatType<Item> statType : this.itemColumns) {
                     if (!statType.contains(item) || StatsScreen.this.stats.getValue(statType.get(item)) <= 0) continue;
                     debug6 = true;
@@ -251,8 +249,8 @@ implements StatsUpdateListener {
                 debug3.add(item);
             }
             for (Block block : Registry.BLOCK) {
-                debug6 = false;
-                for (StatType<ItemLike> statType : this.blockColumns) {
+                boolean debug6 = false;
+                for (StatType<Block> statType : this.blockColumns) { // MagmaCube - decompile fix
                     if (!statType.contains(block) || StatsScreen.this.stats.getValue(statType.get(block)) <= 0) continue;
                     debug6 = true;
                 }
@@ -428,11 +426,11 @@ implements StatsUpdateListener {
                     debug3 = 0;
                     debug4 = 0;
                 } else if (ItemStatisticsList.this.blockColumns.contains(ItemStatisticsList.this.sortColumn)) {
-                    StatType<?> debug5 = ItemStatisticsList.this.sortColumn;
+                    StatType debug5 = ItemStatisticsList.this.sortColumn; // MagmaCube - decompile fix
                     debug3 = debug1 instanceof BlockItem ? StatsScreen.this.stats.getValue(debug5, ((BlockItem)debug1).getBlock()) : -1;
                     debug4 = debug2 instanceof BlockItem ? StatsScreen.this.stats.getValue(debug5, ((BlockItem)debug2).getBlock()) : -1;
                 } else {
-                    StatType<?> debug5 = ItemStatisticsList.this.sortColumn;
+                    StatType debug5 = ItemStatisticsList.this.sortColumn; // MagmaCube - decompile fix
                     debug3 = StatsScreen.this.stats.getValue(debug5, debug1);
                     debug4 = StatsScreen.this.stats.getValue(debug5, debug2);
                 }
@@ -441,19 +439,14 @@ implements StatsUpdateListener {
                 }
                 return ItemStatisticsList.this.sortOrder * Integer.compare(debug3, debug4);
             }
-
-            @Override
-            public /* synthetic */ int compare(Object object, Object object2) {
-                return this.compare((Item)object, (Item)object2);
-            }
         }
     }
 
     class GeneralStatisticsList
-    extends ObjectSelectionList<Entry> {
+    extends ObjectSelectionList<GeneralStatisticsList.Entry> { // MagmaCube - decompile fix
         public GeneralStatisticsList(Minecraft debug2) {
             super(debug2, StatsScreen.this.width, StatsScreen.this.height, 32, StatsScreen.this.height - 64, 10);
-            ObjectArrayList debug3 = new ObjectArrayList(Stats.CUSTOM.iterator());
+            ObjectArrayList<Stat<ResourceLocation>> debug3 = new ObjectArrayList<>(Stats.CUSTOM.iterator()); // MagmaCube - decompile fix
             debug3.sort(Comparator.comparing(debug0 -> I18n.get(StatsScreen.getTranslationKey(debug0), new Object[0])));
             for (Stat debug5 : debug3) {
                 this.addEntry(new Entry(debug5));
diff --git a/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementWidget.java b/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementWidget.java
index 19d1f4159860bfb96da50fece0ba340ceb8d8107..e15763811a8acf2e14e013ebf6b9ee034e17dca2 100644
--- a/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementWidget.java
+++ b/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementWidget.java
@@ -130,16 +130,16 @@ extends GuiComponent {
      */
     public void draw(PoseStack debug1, int debug2, int debug3) {
         if (!this.display.isHidden() || this.progress != null && this.progress.isDone()) {
-            void var5_8;
             float debug4;
             float f = debug4 = this.progress == null ? 0.0f : this.progress.getPercent();
+            AdvancementWidgetType advancementWidgetType; // MagmaCube - decompile fix
             if (debug4 >= 1.0f) {
-                AdvancementWidgetType advancementWidgetType = AdvancementWidgetType.OBTAINED;
+                advancementWidgetType = AdvancementWidgetType.OBTAINED; // MagmaCube - decompile fix
             } else {
-                AdvancementWidgetType advancementWidgetType = AdvancementWidgetType.UNOBTAINED;
+                advancementWidgetType = AdvancementWidgetType.UNOBTAINED; // MagmaCube - decompile fix
             }
             this.minecraft.getTextureManager().bind(WIDGETS_LOCATION);
-            this.blit(debug1, debug2 + this.x + 3, debug3 + this.y, this.display.getFrame().getTexture(), 128 + var5_8.getIndex() * 26, 26, 26);
+            this.blit(debug1, debug2 + this.x + 3, debug3 + this.y, this.display.getFrame().getTexture(), 128 + advancementWidgetType.getIndex() * 26, 26, 26); // MagmaCube - decompile fix
             this.minecraft.getItemRenderer().renderAndDecorateFakeItem(this.display.getIcon(), debug2 + this.x + 8, debug3 + this.y + 5);
         }
         for (AdvancementWidget advancementWidget : this.children) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java b/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java
index d2358f0e5d30633840a2bdb5ebe8be91f51d197b..51ebfb30876ad3e01dc3adbd9c0ae087887355e5 100644
--- a/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java
@@ -26,7 +26,7 @@ import net.minecraft.network.chat.TranslatableComponent;
 import org.apache.commons.lang3.ArrayUtils;
 
 public class ControlList
-extends ContainerObjectSelectionList<Entry> {
+extends ContainerObjectSelectionList<ControlList.Entry> { // MagmaCube - decompile fix
     private final ControlsScreen controlsScreen;
     private int maxNameWidth;
 
@@ -127,7 +127,7 @@ extends ContainerObjectSelectionList<Entry> {
 
         @Override
         public List<? extends GuiEventListener> children() {
-            return ImmutableList.of((Object)this.changeButton, (Object)this.resetButton);
+            return ImmutableList.of(this.changeButton, this.resetButton); // MagmaCube - decompile fix
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java
index 0402b5776431c2c3d32b4ac621fb5c660c986a44..8687564ce16faf8526b9b00b75c0b1ab158663f8 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java
@@ -116,7 +116,7 @@ implements MenuAccess<T> {
                 this.renderSlot(debug1, (Slot)debug10);
             }
             if (!this.isHovering((Slot)debug10, debug2, debug3) || !((Slot)debug10).isActive()) continue;
-            this.hoveredSlot = debug10;
+            this.hoveredSlot = (Slot) debug10; // MagmaCube - decompile fix
             RenderSystem.disableDepthTest();
             debug11 = ((Slot)debug10).x;
             debug12 = ((Slot)debug10).y;
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
index 39ed79699c2e01d08ca7f9e8ff76a8720e7805bc..94e04733e1646485a2e135ef8746eb9e2474316b 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
@@ -62,7 +62,7 @@ import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 
 public class CreativeModeInventoryScreen
-extends EffectRenderingInventoryScreen<ItemPickerMenu> {
+extends EffectRenderingInventoryScreen<CreativeModeInventoryScreen.ItemPickerMenu> { // MagmaCube - decompile fix
     private static final ResourceLocation CREATIVE_TABS_LOCATION = new ResourceLocation("textures/gui/container/creative_inventory/tabs.png");
     private static final SimpleContainer CONTAINER = new SimpleContainer(45);
     private static final Component TRASH_SLOT_TOOLTIP = new TranslatableComponent("inventory.binSlot");
@@ -354,17 +354,16 @@ extends EffectRenderingInventoryScreen<ItemPickerMenu> {
     }
 
     private void updateVisibleTags(String debug12) {
-        Object debug4;
         Predicate<ResourceLocation> debug3;
         int debug2 = debug12.indexOf(58);
         if (debug2 == -1) {
             debug3 = debug1 -> debug1.getPath().contains(debug12);
         } else {
-            debug4 = debug12.substring(0, debug2).trim();
+            String debug4 = debug12.substring(0, debug2).trim(); // MagmaCube - decompile fix
             String debug5 = debug12.substring(debug2 + 1).trim();
             debug3 = arg_0 -> CreativeModeInventoryScreen.lambda$updateVisibleTags$1((String)debug4, debug5, arg_0);
         }
-        debug4 = ItemTags.getAllTags();
+        TagCollection<net.minecraft.world.item.Item> debug4 = ItemTags.getAllTags(); // MagmaCube - decompile fix
         debug4.getAvailableTags().stream().filter(debug3).forEach(arg_0 -> this.lambda$updateVisibleTags$2((TagCollection)debug4, arg_0));
     }
 
@@ -476,7 +475,7 @@ extends EffectRenderingInventoryScreen<ItemPickerMenu> {
                     debug6 = debug4 >= 36 ? 112 : 54 + debug9 * 18;
                 }
                 debug7 = new SlotWrapper(((AbstractContainerMenu)debug3).slots.get(debug4), debug4, debug5, debug6);
-                ((ItemPickerMenu)this.menu).slots.add(debug7);
+                ((ItemPickerMenu)this.menu).slots.add((Slot) debug7); // MagmaCube - decompile fix
             }
             this.destroyItemSlot = new Slot(CONTAINER, 0, 173, 112);
             ((ItemPickerMenu)this.menu).slots.add(this.destroyItemSlot);
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/LecternScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/LecternScreen.java
index a875f6a2576e35b4349f68b1be7348ef636f7b3f..7a30a8e2fc6ac549f5a147098b6425eda5db19cb 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/LecternScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/LecternScreen.java
@@ -113,10 +113,5 @@ implements MenuAccess<LecternMenu> {
     private void pageChanged() {
         this.setPage(this.menu.getPage());
     }
-
-    @Override
-    public /* synthetic */ AbstractContainerMenu getMenu() {
-        return this.getMenu();
-    }
 }
 
diff --git a/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
index 80b75c292c89ee690ad1133cee1eca64b4376897..23824939c069fb76725e6995db09c4e08f81513d 100644
--- a/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
@@ -51,7 +51,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class ServerSelectionList
-extends ObjectSelectionList<Entry> {
+extends ObjectSelectionList<ServerSelectionList.Entry> { // MagmaCube - decompile fix
     private static final Logger LOGGER = LogManager.getLogger();
     private static final ThreadPoolExecutor THREAD_POOL = new ScheduledThreadPoolExecutor(5, new ThreadFactoryBuilder().setNameFormat("Server Pinger #%d").setDaemon(true).setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler)new DefaultUncaughtExceptionHandler(LOGGER)).build());
     private static final ResourceLocation ICON_MISSING = new ResourceLocation("textures/misc/unknown_server.png");
@@ -163,11 +163,11 @@ extends ObjectSelectionList<Entry> {
                     try {
                         this.screen.getPinger().pingServer(this.serverData, () -> this.minecraft.execute(this::updateServerList));
                     }
-                    catch (UnknownHostException debug1) {
+                    catch (UnknownHostException debug12) { // MagmaCube - decompile fix
                         this.serverData.ping = -1L;
                         this.serverData.motd = CANT_RESOLVE_TEXT;
                     }
-                    catch (Exception debug1) {
+                    catch (Exception debug12) { // MagmaCube - decompile fix
                         this.serverData.ping = -1L;
                         this.serverData.motd = CANT_CONNECT_TEXT;
                     }
diff --git a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
index a3c9c0653f3a3d50bd194f4d6980dc5441caf097..0afcf8e6a33e26979459613c5e88a120e34323f7 100644
--- a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
@@ -11,9 +11,13 @@
 package net.minecraft.client.gui.screens.packs;
 
 import com.google.common.collect.Maps;
+import com.google.common.hash.Hashing;
+import com.mojang.blaze3d.platform.NativeImage;
 import com.mojang.blaze3d.vertex.PoseStack;
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.io.InputStream;
 import java.nio.file.DirectoryStream;
 import java.nio.file.FileVisitOption;
 import java.nio.file.Files;
@@ -38,12 +42,15 @@ import net.minecraft.client.gui.screens.ConfirmScreen;
 import net.minecraft.client.gui.screens.Screen;
 import net.minecraft.client.gui.screens.packs.PackSelectionModel;
 import net.minecraft.client.gui.screens.packs.TransferableSelectionList;
+import net.minecraft.client.renderer.texture.AbstractTexture;
+import net.minecraft.client.renderer.texture.DynamicTexture;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.packs.PackResources;
 import net.minecraft.server.packs.repository.Pack;
 import net.minecraft.server.packs.repository.PackRepository;
 import org.apache.commons.lang3.mutable.MutableBoolean;
@@ -133,7 +140,7 @@ extends Screen {
 
     private void updateList(TransferableSelectionList debug1, Stream<PackSelectionModel.Entry> debug22) {
         debug1.children().clear();
-        debug22.forEach(debug2 -> debug1.children().add(new TransferableSelectionList.PackEntry(this.minecraft, debug1, this, (PackSelectionModel.Entry)debug2)));
+        debug22.forEach(debug2 -> debug1.children().add(new TransferableSelectionList.PackEntry(this.minecraft, debug1, this, debug2))); // MagmaCube - decompile fix
     }
 
     private void reload() {
@@ -157,12 +164,12 @@ extends Screen {
         MutableBoolean debug3 = new MutableBoolean();
         debug1.forEach(debug2 -> {
             try (Stream<Path> debug32 = Files.walk(debug2, new FileVisitOption[0]);){
-                debug32.forEach(debug3 -> {
+                debug32.forEach(debug322 -> { // MagmaCube - decompile fix
                     try {
-                        Util.copyBetweenDirs(debug2.getParent(), debug22, debug3);
+                        Util.copyBetweenDirs(debug2.getParent(), debug22, debug322); // MagmaCube - decompile fix
                     }
                     catch (IOException debug4) {
-                        LOGGER.warn("Failed to copy datapack file  from {} to {}", debug3, (Object)debug22, (Object)debug4);
+                        LOGGER.warn("Failed to copy datapack file  from {} to {}", debug322, (Object)debug22, debug4); // MagmaCube - decompile fix
                         debug3.setTrue();
                     }
                 });
@@ -193,25 +200,21 @@ extends Screen {
      * Exception decompiling
      */
     private ResourceLocation loadPackIcon(TextureManager debug1, Pack debug2) {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 5[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - decompile fix
+        try(PackResources debug3 = debug2.open();
+            InputStream debug5 = debug3.getRootResource("pack.png")) {
+            String debug7 = debug2.getId();
+            ResourceLocation debug8 = new ResourceLocation("minecraft", "pack/" + Util.sanitizeName(debug7, ResourceLocation::validPathChar) + "/" + Hashing.sha1().hashUnencodedChars(debug7) + "/icon");
+            NativeImage debug9 = NativeImage.read(debug5);
+            debug1.register(debug8, (AbstractTexture)new DynamicTexture(debug9));
+            return debug8;
+        } catch (FileNotFoundException fileNotFoundException) {
+
+        } catch (Exception debug3) {
+            LOGGER.warn("Failed to load icon from pack {}", debug2.getId(), debug3);
+        }
+        return DEFAULT_ICON;
+        // MagmaCube end - decompile fix
     }
 
     private ResourceLocation getPackIcon(Pack debug1) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/packs/TransferableSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/packs/TransferableSelectionList.java
index 122089dbe7f9d93650ccfffd5b1263af86f8c5da..433b7f10c47e22edeeb6b0d09e1b3f3bcc29e386 100644
--- a/src/main/java/net/minecraft/client/gui/screens/packs/TransferableSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/packs/TransferableSelectionList.java
@@ -25,7 +25,7 @@ import net.minecraft.server.packs.repository.PackCompatibility;
 import net.minecraft.util.FormattedCharSequence;
 
 public class TransferableSelectionList
-extends ObjectSelectionList<PackEntry> {
+extends ObjectSelectionList<TransferableSelectionList.PackEntry> { // MagmaCube - decompile fix
     private static final ResourceLocation ICON_OVERLAY_LOCATION = new ResourceLocation("textures/gui/resource_packs.png");
     private static final Component INCOMPATIBLE_TITLE = new TranslatableComponent("pack.incompatible");
     private static final Component INCOMPATIBLE_CONFIRM_TITLE = new TranslatableComponent("pack.incompatible.confirm.title");
diff --git a/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeBookComponent.java b/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeBookComponent.java
index eb2782d011417907bde74b3fc4228c8029f18034..071d63d41907ae8f27b7cdf3ec8ff9c52edaf059 100644
--- a/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeBookComponent.java
+++ b/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeBookComponent.java
@@ -173,7 +173,7 @@ PlaceRecipe<Ingredient> {
     private void updateCollections(boolean debug12) {
         List<RecipeCollection> debug2 = this.book.getCollection(this.selectedTab.getCategory());
         debug2.forEach(debug1 -> debug1.canCraft(this.stackedContents, this.menu.getGridWidth(), this.menu.getGridHeight(), this.book));
-        ArrayList debug3 = Lists.newArrayList(debug2);
+        ArrayList<RecipeCollection> debug3 = Lists.newArrayList(debug2); // MagmaCube - decompile fix
         debug3.removeIf(debug0 -> !debug0.hasKnownRecipes());
         debug3.removeIf(debug0 -> !debug0.hasFitting());
         String debug4 = this.searchBox.getValue();
diff --git a/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeCollection.java b/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeCollection.java
index 8a301c711273685da6b5c144f96524b171917e75..da0495e50a735ee8d8e7d581fd17f7493d8350b8 100644
--- a/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeCollection.java
+++ b/src/main/java/net/minecraft/client/gui/screens/recipebook/RecipeCollection.java
@@ -22,9 +22,9 @@ public class RecipeCollection
     private final Set<Recipe<?>> known;
     
     public RecipeCollection(final List<Recipe<?>> debug1) {
-        this.craftable = (Set<Recipe<?>>)Sets.newHashSet();
-        this.fitsDimensions = (Set<Recipe<?>>)Sets.newHashSet();
-        this.known = (Set<Recipe<?>>)Sets.newHashSet();
+        this.craftable = Sets.newHashSet(); // MagmaCube - decompile fix
+        this.fitsDimensions = Sets.newHashSet(); // MagmaCube - decompile fix
+        this.known = Sets.newHashSet(); // MagmaCube - decompile fix
         this.recipes = (List<Recipe<?>>)ImmutableList.copyOf((Collection)debug1);
         if (debug1.size() <= 1) {
             this.singleResultItem = true;
@@ -93,7 +93,7 @@ public class RecipeCollection
     }
     
     public List<Recipe<?>> getRecipes(final boolean debug1) {
-        final List<Recipe<?>> debug2 = (List<Recipe<?>>)Lists.newArrayList();
+        final List<Recipe<?>> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         final Set<Recipe<?>> debug3 = debug1 ? this.craftable : this.fitsDimensions;
         for (final Recipe<?> debug4 : this.recipes) {
             if (debug3.contains(debug4)) {
@@ -104,7 +104,7 @@ public class RecipeCollection
     }
     
     public List<Recipe<?>> getDisplayRecipes(final boolean debug1) {
-        final List<Recipe<?>> debug2 = (List<Recipe<?>>)Lists.newArrayList();
+        final List<Recipe<?>> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Recipe<?> debug3 : this.recipes) {
             if (this.fitsDimensions.contains(debug3) && this.craftable.contains(debug3) == debug1) {
                 debug2.add(debug3);
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
index a803ed74525144477a436af9688a9dd6a5252eb0..f45190d6c4786b3ac21b46f9f9893e8a4642800b 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
@@ -77,7 +77,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class WorldSelectionList
-extends ObjectSelectionList<WorldListEntry> {
+extends ObjectSelectionList<WorldSelectionList.WorldListEntry> { // MagmaCube - decompile fix
     private static final Logger LOGGER = LogManager.getLogger();
     private static final DateFormat DATE_FORMAT = new SimpleDateFormat();
     private static final ResourceLocation ICON_MISSING = new ResourceLocation("textures/misc/unknown_server.png");
@@ -227,12 +227,12 @@ extends ObjectSelectionList<WorldListEntry> {
                     if (this.summary.askToOpenWorld()) {
                         GuiComponent.blit(debug1, debug4, debug3, 96.0f, debug16, 32, 32, 256, 256);
                         if (debug15) {
-                            this.screen.setToolTip((List<FormattedCharSequence>)ImmutableList.of((Object)FROM_NEWER_TOOLTIP_1.getVisualOrderText(), (Object)FROM_NEWER_TOOLTIP_2.getVisualOrderText()));
+                            this.screen.setToolTip((List<FormattedCharSequence>)ImmutableList.of(FROM_NEWER_TOOLTIP_1.getVisualOrderText(), FROM_NEWER_TOOLTIP_2.getVisualOrderText())); // MagmaCube - decompile fix
                         }
                     } else if (!SharedConstants.getCurrentVersion().isStable()) {
                         GuiComponent.blit(debug1, debug4, debug3, 64.0f, debug16, 32, 32, 256, 256);
                         if (debug15) {
-                            this.screen.setToolTip((List<FormattedCharSequence>)ImmutableList.of((Object)SNAPSHOT_TOOLTIP_1.getVisualOrderText(), (Object)SNAPSHOT_TOOLTIP_2.getVisualOrderText()));
+                            this.screen.setToolTip((List<FormattedCharSequence>)ImmutableList.of(SNAPSHOT_TOOLTIP_1.getVisualOrderText(), SNAPSHOT_TOOLTIP_2.getVisualOrderText())); // MagmaCube - decompile fix
                         }
                     }
                 } else {
@@ -346,7 +346,7 @@ extends ObjectSelectionList<WorldListEntry> {
             this.queueLoadScreen();
             RegistryAccess.RegistryHolder debug1 = RegistryAccess.builtin();
             try (LevelStorageSource.LevelStorageAccess debug2 = this.minecraft.getLevelSource().createAccess(this.summary.getLevelId());
-                 Minecraft.ServerStem debug4 = this.minecraft.makeServerStem(debug1, Minecraft::loadDataPacks, (Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData>)((Function4)Minecraft::loadWorldData), false, debug2);){
+                 Minecraft.ServerStem debug4 = this.minecraft.makeServerStem(debug1, Minecraft::loadDataPacks, (Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData>)(Minecraft::loadWorldData), false, debug2);){ // MagmaCube - decompile fix
                 LevelSettings debug62 = debug4.worldData().getLevelSettings();
                 DataPackConfig debug7 = debug62.getDataPackConfig();
                 WorldGenSettings debug8 = debug4.worldData().worldGenSettings();
diff --git a/src/main/java/net/minecraft/client/model/AgeableListModel.java b/src/main/java/net/minecraft/client/model/AgeableListModel.java
index 858da61a7900cb807f2ae79f890c58dbafe561c5..7856d385d073402b7965a488a415dbf1e594d5c4 100644
--- a/src/main/java/net/minecraft/client/model/AgeableListModel.java
+++ b/src/main/java/net/minecraft/client/model/AgeableListModel.java
@@ -48,18 +48,18 @@ public abstract class AgeableListModel<E extends Entity> extends EntityModel<E>
                 debug1.scale(debug9, debug9, debug9);
             }
             debug1.translate(0.0, this.yHeadOffset / 16.0f, this.zHeadOffset / 16.0f);
-            this.headParts().forEach(debug8 -> debug8.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8));
+            this.headParts().forEach(debug8l -> debug8l.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
             debug1.popPose();
             debug1.pushPose();
             final float debug9 = 1.0f / this.babyBodyScale;
             debug1.scale(debug9, debug9, debug9);
             debug1.translate(0.0, this.bodyYOffset / 16.0f, 0.0);
-            this.bodyParts().forEach(debug8 -> debug8.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8));
+            this.bodyParts().forEach(debug8l -> debug8l.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
             debug1.popPose();
         }
         else {
-            this.headParts().forEach(debug8 -> debug8.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8));
-            this.bodyParts().forEach(debug8 -> debug8.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8));
+            this.headParts().forEach(debug8l -> debug8l.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
+            this.bodyParts().forEach(debug8l -> debug8l.render(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/client/model/HoglinModel.java b/src/main/java/net/minecraft/client/model/HoglinModel.java
index 287fdb3e356153dedadfe5f225c838d085aa69f9..fe90219813f006f173622721bc918e0b71ab9992 100644
--- a/src/main/java/net/minecraft/client/model/HoglinModel.java
+++ b/src/main/java/net/minecraft/client/model/HoglinModel.java
@@ -2,12 +2,13 @@ package net.minecraft.client.model;
 
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.monster.hoglin.HoglinBase;
 import net.minecraft.util.Mth;
 import com.google.common.collect.ImmutableList;
 import net.minecraft.client.model.geom.ModelPart;
 
-public class HoglinModel<T extends Mob> extends AgeableListModel<T>
+public class HoglinModel<T extends Mob> extends AgeableListModel<T> // MagmaCube - decompile fix
 {
     private final ModelPart head;
     private final ModelPart rightEar;
@@ -61,12 +62,12 @@ public class HoglinModel<T extends Mob> extends AgeableListModel<T>
     
     @Override
     protected Iterable<ModelPart> headParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.head);
+        return (Iterable<ModelPart>)ImmutableList.of(this.head); // MagmaCube - decompile fix
     }
     
     @Override
     protected Iterable<ModelPart> bodyParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body, (Object)this.frontRightLeg, (Object)this.frontLeftLeg, (Object)this.backRightLeg, (Object)this.backLeftLeg);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body, this.frontRightLeg, this.frontLeftLeg, this.backRightLeg, this.backLeftLeg); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/HumanoidModel.java b/src/main/java/net/minecraft/client/model/HumanoidModel.java
index 41b42bed8832233ccc7a4946287bf5923907a585..97bf33f6cea94638d1517ca43fcae5a9be799de0 100644
--- a/src/main/java/net/minecraft/client/model/HumanoidModel.java
+++ b/src/main/java/net/minecraft/client/model/HumanoidModel.java
@@ -62,12 +62,12 @@ public class HumanoidModel<T extends LivingEntity> extends AgeableListModel<T> i
     
     @Override
     protected Iterable<ModelPart> headParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.head);
+        return (Iterable<ModelPart>)ImmutableList.of(this.head); // MagmaCube - decompile fix
     }
     
     @Override
     protected Iterable<ModelPart> bodyParts() {
-        return (Iterable<ModelPart>)ImmutableList.of((Object)this.body, (Object)this.rightArm, (Object)this.leftArm, (Object)this.rightLeg, (Object)this.leftLeg, (Object)this.hat);
+        return (Iterable<ModelPart>)ImmutableList.of(this.body, this.rightArm, this.leftArm, this.rightLeg, this.leftLeg, this.hat); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/model/PlayerModel.java b/src/main/java/net/minecraft/client/model/PlayerModel.java
index bc57f873c85ad51d44d07e17540dee774f9384a8..bc128dd594a9dab37bd10030b988f7c132c38d64 100644
--- a/src/main/java/net/minecraft/client/model/PlayerModel.java
+++ b/src/main/java/net/minecraft/client/model/PlayerModel.java
@@ -29,7 +29,7 @@ public class PlayerModel<T extends LivingEntity> extends HumanoidModel<T>
     
     public PlayerModel(final float debug1, final boolean debug2) {
         super(RenderType::entityTranslucent, debug1, 0.0f, 64, 64);
-        this.cubes = (List<ModelPart>)Lists.newArrayList();
+        this.cubes = Lists.newArrayList(); // MagmaCube - decompile fix
         this.slim = debug2;
         (this.ear = new ModelPart(this, 24, 0)).addBox(-3.0f, -6.0f, -1.0f, 6.0f, 6.0f, 1.0f, debug1);
         (this.cloak = new ModelPart(this, 0, 0)).setTexSize(64, 32);
@@ -141,7 +141,7 @@ public class PlayerModel<T extends LivingEntity> extends HumanoidModel<T>
     @Override
     public void accept(final ModelPart debug1) {
         if (this.cubes == null) {
-            this.cubes = (List<ModelPart>)Lists.newArrayList();
+            this.cubes = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         this.cubes.add(debug1);
     }
diff --git a/src/main/java/net/minecraft/client/model/SkeletonModel.java b/src/main/java/net/minecraft/client/model/SkeletonModel.java
index 7119172f8f2ece6c4991d36cf17d20a39d5fb95d..eba8f3e2b903c32e77bf5112a71619194c95db58 100644
--- a/src/main/java/net/minecraft/client/model/SkeletonModel.java
+++ b/src/main/java/net/minecraft/client/model/SkeletonModel.java
@@ -4,6 +4,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.util.Mth;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.item.Items;
diff --git a/src/main/java/net/minecraft/client/model/geom/ModelPart.java b/src/main/java/net/minecraft/client/model/geom/ModelPart.java
index f9edf916eda6f4d4ab8f7f10416341bf9d5f0398..99215dd487db12c9959c43b5eea200170e19193f 100644
--- a/src/main/java/net/minecraft/client/model/geom/ModelPart.java
+++ b/src/main/java/net/minecraft/client/model/geom/ModelPart.java
@@ -79,7 +79,7 @@ public class ModelPart
     }
     
     public void addChild(final ModelPart debug1) {
-        this.children.add((Object)debug1);
+        this.children.add(debug1); // MagmaCube - decompile fix
     }
     
     public ModelPart texOffs(final int debug1, final int debug2) {
@@ -117,7 +117,7 @@ public class ModelPart
     }
     
     private void addBox(final int debug1, final int debug2, final float debug3, final float debug4, final float debug5, final float debug6, final float debug7, final float debug8, final float debug9, final float debug10, final float debug11, final boolean debug12, final boolean debug13) {
-        this.cubes.add((Object)new Cube(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8, debug9, debug10, debug11, debug12, this.xTexSize, this.yTexSize));
+        this.cubes.add(new Cube(debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8, debug9, debug10, debug11, debug12, this.xTexSize, this.yTexSize)); // MagmaCube - decompile fix
     }
     
     public void setPos(final float debug1, final float debug2, final float debug3) {
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientChunkCache.java b/src/main/java/net/minecraft/client/multiplayer/ClientChunkCache.java
index d0684303524da91dd2bd08a750ab3dcbd1b2b2b3..92102eb6127943de747dd3d3e8f22f77ff90090d 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientChunkCache.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientChunkCache.java
@@ -180,12 +180,6 @@ extends ChunkSource {
         return this.hasChunk(Mth.floor(debug1.getX()) >> 4, Mth.floor(debug1.getZ()) >> 4);
     }
 
-    @Override
-    @Nullable
-    public /* synthetic */ ChunkAccess getChunk(int n, int n2, ChunkStatus chunkStatus, boolean bl) {
-        return this.getChunk(n, n2, chunkStatus, bl);
-    }
-
     final class Storage {
         private final AtomicReferenceArray<LevelChunk> chunks;
         private final int chunkRadius;
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientLevel.java b/src/main/java/net/minecraft/client/multiplayer/ClientLevel.java
index 495de957a16589975c6735274fa4bbd6b18f1fe4..79ee32cfccb574fdcdaeb47440e36eafda2b79de 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientLevel.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientLevel.java
@@ -282,7 +282,7 @@ extends Level {
 
     private void addEntity(int debug1, Entity debug2) {
         this.removeEntity(debug1);
-        this.entitiesById.put(debug1, (Object)debug2);
+        this.entitiesById.put(debug1, debug2); // MagmaCube - decompile fix
         this.getChunkSource().getChunk(Mth.floor(debug2.getX() / 16.0), Mth.floor(debug2.getZ() / 16.0), ChunkStatus.FULL, true).addEntity(debug2);
     }
 
@@ -766,16 +766,6 @@ extends Level {
         return this.clientLevelData;
     }
 
-    @Override
-    public /* synthetic */ LevelData getLevelData() {
-        return this.getLevelData();
-    }
-
-    @Override
-    public /* synthetic */ ChunkSource getChunkSource() {
-        return this.getChunkSource();
-    }
-
     public static class ClientLevelData
     implements WritableLevelData {
         private final boolean hardcore;
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index d8b3198cb72c4f128d3f07bf8a0b2e4739dc70aa..20ae10bd49760e46d18dbc23044674cc0530e05f 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -1531,22 +1531,24 @@ implements ClientGamePacketListener {
             this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
             this.downloadCallback(this.minecraft.getClientPackSource().downloadAndSelectResourcePack(debug2, debug3));
         } else if (debug4 == null || debug4.getResourcePackStatus() == ServerData.ServerPackStatus.PROMPT) {
-            this.minecraft.execute(() -> this.minecraft.setScreen(new ConfirmScreen(debug3 -> {
+            // MagmaCube start - decompile fix
+            this.minecraft.execute(() -> this.minecraft.setScreen(new ConfirmScreen(debug3l -> {
                 this.minecraft = Minecraft.getInstance();
-                ServerData debug4 = this.minecraft.getCurrentServer();
-                if (debug3) {
-                    if (debug4 != null) {
-                        debug4.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
+                ServerData debug4l = this.minecraft.getCurrentServer();
+                if (debug3l) {
+                    if (debug4l != null) {
+                        debug4l.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
                     }
                     this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
                     this.downloadCallback(this.minecraft.getClientPackSource().downloadAndSelectResourcePack(debug2, debug3));
                 } else {
-                    if (debug4 != null) {
-                        debug4.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
+                    if (debug4l != null) {
+                        debug4l.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
                     }
                     this.send(ServerboundResourcePackPacket.Action.DECLINED);
                 }
-                ServerList.saveSingleServer(debug4);
+                ServerList.saveSingleServer(debug4l);
+                // MagmaCube end - decompile fix
                 this.minecraft.setScreen(null);
             }, new TranslatableComponent("multiplayer.texturePrompt.line1"), new TranslatableComponent("multiplayer.texturePrompt.line2"))));
         } else {
@@ -1969,7 +1971,7 @@ implements ClientGamePacketListener {
         this.recipeManager.byKey(debug1.getRecipe()).ifPresent(debug2 -> {
             if (this.minecraft.screen instanceof RecipeUpdateListener) {
                 RecipeBookComponent debug3 = ((RecipeUpdateListener)((Object)this.minecraft.screen)).getRecipeBookComponent();
-                debug3.setupGhostRecipe((Recipe<?>)debug2, debug1.slots);
+                debug3.setupGhostRecipe((Recipe<?>)debug2, debug22.slots); // MagmaCube - decompile fix
             }
         });
     }
diff --git a/src/main/java/net/minecraft/client/multiplayer/MultiPlayerGameMode.java b/src/main/java/net/minecraft/client/multiplayer/MultiPlayerGameMode.java
index 6fadb4f76f2f2c0dd22c20c277efea8fd487813c..103c9c41cf8691ec28331319e85b255948367d8c 100644
--- a/src/main/java/net/minecraft/client/multiplayer/MultiPlayerGameMode.java
+++ b/src/main/java/net/minecraft/client/multiplayer/MultiPlayerGameMode.java
@@ -413,23 +413,22 @@ public class MultiPlayerGameMode {
 
     private void sendBlockAction(ServerboundPlayerActionPacket.Action debug1, BlockPos debug2, Direction debug3) {
         LocalPlayer debug4 = this.minecraft.player;
-        this.unAckedActions.put((Object)Pair.of((Object)debug2, (Object)((Object)debug1)), (Object)debug4.position());
+        this.unAckedActions.put(Pair.of(debug2, debug1), debug4.position()); // MagmaCube - decompile fix
         this.connection.send(new ServerboundPlayerActionPacket(debug1, debug2, debug3));
     }
 
     public void handleBlockBreakAck(ClientLevel debug1, BlockPos debug2, BlockState debug3, ServerboundPlayerActionPacket.Action debug4, boolean debug5) {
-        LocalPlayer debug8;
         Vec3 debug6 = (Vec3)this.unAckedActions.remove((Object)Pair.of((Object)debug2, (Object)((Object)debug4)));
         BlockState debug7 = debug1.getBlockState(debug2);
         if ((debug6 == null || !debug5 || debug4 != ServerboundPlayerActionPacket.Action.START_DESTROY_BLOCK && debug7 != debug3) && debug7 != debug3) {
             debug1.setKnownState(debug2, debug3);
-            debug8 = this.minecraft.player;
+            LocalPlayer debug8 = this.minecraft.player; // MagmaCube - decompile fix
             if (debug6 != null && debug1 == debug8.level && debug8.isColliding(debug2, debug3)) {
                 debug8.absMoveTo(debug6.x, debug6.y, debug6.z);
             }
         }
         while (this.unAckedActions.size() >= 50) {
-            debug8 = (Pair)this.unAckedActions.firstKey();
+            Pair<BlockPos, ServerboundPlayerActionPacket.Action> debug8 = (Pair)this.unAckedActions.firstKey(); // MagmaCube - decompile fix
             this.unAckedActions.removeFirst();
             LOGGER.error("Too many unacked block actions, dropping " + debug8);
         }
diff --git a/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java b/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
index 0968a614c91acef3769a3c790f896383c11adb2b..05f69c401ec87f3e4e77b2ea3c1b37e8924dcacd 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
@@ -53,10 +53,10 @@ public class ServerStatusPinger
     private final List<Connection> connections;
     
     public ServerStatusPinger() {
-        this.connections = Collections.synchronizedList((List<Connection>)Lists.newArrayList());
+        this.connections = Collections.synchronizedList(Lists.newArrayList()); // MagmaCube - decompile fix
     }
     
-    public void pingServer(final ServerData debug1, final Runnable debug2) throws UnknownHostException {
+    public void pingServer(final ServerData debug1, final Runnable runnable) throws UnknownHostException {
         final ServerAddress debug3 = ServerAddress.parseString(debug1.ip);
         final Connection debug4 = Connection.connectToServer(InetAddress.getByName(debug3.getHost()), debug3.getPort(), false);
         this.connections.add(debug4);
@@ -69,13 +69,13 @@ public class ServerStatusPinger
             private long pingStart;
             
             @Override
-            public void handleStatusResponse(final ClientboundStatusResponsePacket debug1) {
+            public void handleStatusResponse(final ClientboundStatusResponsePacket packet) { // MagmaCube - decompile fix
                 if (this.receivedPing) {
                     debug4.disconnect(new TranslatableComponent("multiplayer.status.unrequested"));
                     return;
                 }
                 this.receivedPing = true;
-                final ServerStatus debug2 = debug1.getStatus();
+                final ServerStatus debug2 = packet.getStatus(); // MagmaCube - decompile fix
                 if (debug2.getDescription() != null) {
                     debug1.motd = debug2.getDescription();
                 }
@@ -92,7 +92,7 @@ public class ServerStatusPinger
                 }
                 if (debug2.getPlayers() != null) {
                     debug1.status = formatPlayerCount(debug2.getPlayers().getNumPlayers(), debug2.getPlayers().getMaxPlayers());
-                    final List<Component> debug3 = (List<Component>)Lists.newArrayList();
+                    final List<Component> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
                     if (ArrayUtils.isNotEmpty((Object[])debug2.getPlayers().getSample())) {
                         for (final GameProfile debug4 : debug2.getPlayers().getSample()) {
                             debug3.add(new TextComponent(debug4.getName()));
@@ -118,7 +118,7 @@ public class ServerStatusPinger
                 }
                 if (!Objects.equals(debug5, debug1.getIconB64())) {
                     debug1.setIconB64(debug5);
-                    debug2.run();
+                    runnable.run(); // MagmaCube - decompile fix
                 }
                 this.pingStart = Util.getMillis();
                 debug4.send(new ServerboundPingRequestPacket(this.pingStart));
@@ -126,7 +126,7 @@ public class ServerStatusPinger
             }
             
             @Override
-            public void handlePongResponse(final ClientboundPongResponsePacket debug1) {
+            public void handlePongResponse(final ClientboundPongResponsePacket packet) { // MagmaCube - decompile fix
                 final long debug2 = this.pingStart;
                 final long debug3 = Util.getMillis();
                 debug1.ping = debug3 - debug2;
@@ -134,12 +134,12 @@ public class ServerStatusPinger
             }
             
             @Override
-            public void onDisconnect(final Component debug1) {
+            public void onDisconnect(final Component cp) { // MagmaCube - decompile fix
                 if (!this.success) {
-                    ServerStatusPinger.LOGGER.error("Can't ping {}: {}", (Object)debug1.ip, (Object)debug1.getString());
+                    ServerStatusPinger.LOGGER.error("Can't ping {}: {}", debug1.ip, cp.getString()); // MagmaCube - decompile fix
                     debug1.motd = new TranslatableComponent("multiplayer.status.cannot_connect").withStyle(ChatFormatting.DARK_RED);
                     debug1.status = TextComponent.EMPTY;
-                    ServerStatusPinger.this.pingLegacyServer(debug1);
+                    ServerStatusPinger.this.pingLegacyServer(debug1); // MagmaCube - decompile fix
                 }
             }
             
@@ -158,14 +158,14 @@ public class ServerStatusPinger
     }
     
     private void pingLegacyServer(final ServerData debug1) {
-        final ServerAddress debug2 = ServerAddress.parseString(debug1.ip);
-        ((Bootstrap)((Bootstrap)((Bootstrap)new Bootstrap().group((EventLoopGroup)Connection.NETWORK_WORKER_GROUP.get())).handler((ChannelHandler)new ChannelInitializer<Channel>() {
-            protected void initChannel(final Channel debug1) throws Exception {
+        final ServerAddress address = ServerAddress.parseString(debug1.ip); // MagmaCube - decompile fix
+        new Bootstrap().group(Connection.NETWORK_WORKER_GROUP.get()).handler(new ChannelInitializer<Channel>() { // MagmaCube - decompile fix
+            protected void initChannel(final Channel channel) throws Exception { // MagmaCube - decompile fix
                 try {
-                    debug1.config().setOption(ChannelOption.TCP_NODELAY, (Object)true);
+                    channel.config().setOption(ChannelOption.TCP_NODELAY, true); // MagmaCube - decompile fix
                 }
                 catch (ChannelException ex) {}
-                debug1.pipeline().addLast(new ChannelHandler[] { new SimpleChannelInboundHandler<ByteBuf>() {
+                channel.pipeline().addLast(new ChannelHandler[] { new SimpleChannelInboundHandler<ByteBuf>() { // MagmaCube - decompile fix
                         public void channelActive(final ChannelHandlerContext debug1) throws Exception {
                             super.channelActive(debug1);
                             final ByteBuf debug2 = Unpooled.buffer();
@@ -178,22 +178,22 @@ public class ServerStatusPinger
                                 for (final char debug4 : debug3) {
                                     debug2.writeChar((int)debug4);
                                 }
-                                debug2.writeShort(7 + 2 * debug2.getHost().length());
+                                debug2.writeShort(7 + 2 * address.getHost().length()); // MagmaCube - decompile fix
                                 debug2.writeByte(127);
-                                debug3 = debug2.getHost().toCharArray();
+                                debug3 = address.getHost().toCharArray(); // MagmaCube - decompile fix
                                 debug2.writeShort(debug3.length);
                                 for (final char debug4 : debug3) {
                                     debug2.writeChar((int)debug4);
                                 }
-                                debug2.writeInt(debug2.getPort());
+                                debug2.writeInt(address.getPort()); // MagmaCube - decompile fix
                                 debug1.channel().writeAndFlush((Object)debug2).addListener((GenericFutureListener)ChannelFutureListener.CLOSE_ON_FAILURE);
                             }
                             finally {
                                 debug2.release();
                             }
                         }
-                        
-                        protected void channelRead0(final ChannelHandlerContext debug1, final ByteBuf debug2) throws Exception {
+
+                        protected void channelRead0(final ChannelHandlerContext context, final ByteBuf debug2) throws Exception { // MagmaCube - decompile fix
                             final short debug3 = debug2.readUnsignedByte();
                             if (debug3 == 255) {
                                 final String debug4 = new String(debug2.readBytes(debug2.readShort() * 2).array(), StandardCharsets.UTF_16BE);
@@ -210,15 +210,15 @@ public class ServerStatusPinger
                                     debug1.status = formatPlayerCount(debug9, debug10);
                                 }
                             }
-                            debug1.close();
+                            context.close(); // MagmaCube - decompile fix
                         }
-                        
+
                         public void exceptionCaught(final ChannelHandlerContext debug1, final Throwable debug2) throws Exception {
                             debug1.close();
                         }
                     } });
             }
-        })).channel((Class)NioSocketChannel.class)).connect(debug2.getHost(), debug2.getPort());
+        }).channel((Class)NioSocketChannel.class).connect(address.getHost(), address.getPort()); // MagmaCube - decompile fix
     }
     
     private static Component formatPlayerCount(final int debug0, final int debug1) {
@@ -255,7 +255,7 @@ public class ServerStatusPinger
     }
     
     static {
-        SPLITTER = Splitter.on('Â¥0').limit(6);
+        SPLITTER = Splitter.on('\0').limit(6); // MagmaCube - decompile fix
         LOGGER = LogManager.getLogger();
     }
 }
diff --git a/src/main/java/net/minecraft/client/particle/FireworkParticles.java b/src/main/java/net/minecraft/client/particle/FireworkParticles.java
index 32e0bad83a3488dca3ab96a324fe9577382f0159..37c0f9a98449b3e10d9ed9dabee2d0f2c973feb5 100644
--- a/src/main/java/net/minecraft/client/particle/FireworkParticles.java
+++ b/src/main/java/net/minecraft/client/particle/FireworkParticles.java
@@ -178,10 +178,9 @@ public class FireworkParticles {
 
         @Override
         public void tick() {
-            Object debug3;
-            int debug1;
             if (this.life == 0 && this.explosions != null) {
-                debug1 = this.isFarAwayFromCamera();
+                SoundEvent debug3; // MagmaCube - decompile fix
+                boolean debug1 = this.isFarAwayFromCamera(); // MagmaCube - decompile fix
                 boolean debug2 = false;
                 if (this.explosions.size() >= 3) {
                     debug2 = true;
@@ -193,13 +192,19 @@ public class FireworkParticles {
                         break;
                     }
                 }
-                debug3 = debug2 ? (debug1 != 0 ? SoundEvents.FIREWORK_ROCKET_LARGE_BLAST_FAR : SoundEvents.FIREWORK_ROCKET_LARGE_BLAST) : (debug1 != 0 ? SoundEvents.FIREWORK_ROCKET_BLAST_FAR : SoundEvents.FIREWORK_ROCKET_BLAST);
+                // MagmaCube start - decompile fix
+                if (debug2) {
+                    debug3 = debug1 ? SoundEvents.FIREWORK_ROCKET_LARGE_BLAST_FAR : SoundEvents.FIREWORK_ROCKET_LARGE_BLAST;
+                } else {
+                    debug3 = debug1 ? SoundEvents.FIREWORK_ROCKET_BLAST_FAR : SoundEvents.FIREWORK_ROCKET_BLAST;
+                }
+                // MagmaCube end - decompile fix
                 this.level.playLocalSound(this.x, this.y, this.z, (SoundEvent)debug3, SoundSource.AMBIENT, 20.0f, 0.95f + this.random.nextFloat() * 0.1f, true);
             }
             if (this.life % 2 == 0 && this.explosions != null && this.life / 2 < this.explosions.size()) {
-                debug1 = this.life / 2;
+                int debug1 = this.life / 2; // MagmaCube - decompile fix
                 CompoundTag debug2 = this.explosions.getCompound(debug1);
-                debug3 = FireworkRocketItem.Shape.byId(debug2.getByte("Type"));
+                FireworkRocketItem.Shape debug3 = FireworkRocketItem.Shape.byId(debug2.getByte("Type")); // MagmaCube - decompile fix
                 boolean debug4 = debug2.getBoolean("Trail");
                 boolean debug5 = debug2.getBoolean("Flicker");
                 int[] debug6 = debug2.getIntArray("Colors");
@@ -207,7 +212,7 @@ public class FireworkParticles {
                 if (debug6.length == 0) {
                     debug6 = new int[]{DyeColor.BLACK.getFireworkColor()};
                 }
-                switch (1.$SwitchMap$net$minecraft$world$item$FireworkRocketItem$Shape[((Enum)debug3).ordinal()]) {
+                switch (((Enum)debug3).ordinal()) { // MagmaCube - decompile fix
                     default: {
                         this.createParticleBall(0.25, 2, debug6, debug7, debug4, debug5);
                         break;
@@ -238,8 +243,8 @@ public class FireworkParticles {
             ++this.life;
             if (this.life > this.lifetime) {
                 if (this.twinkleDelay) {
-                    debug1 = this.isFarAwayFromCamera() ? 1 : 0;
-                    SoundEvent debug2 = debug1 != 0 ? SoundEvents.FIREWORK_ROCKET_TWINKLE_FAR : SoundEvents.FIREWORK_ROCKET_TWINKLE;
+                    boolean debug1 = this.isFarAwayFromCamera(); // MagmaCube - decompile fix
+                    SoundEvent debug2 = debug1 ? SoundEvents.FIREWORK_ROCKET_TWINKLE_FAR : SoundEvents.FIREWORK_ROCKET_TWINKLE; // MagmaCube - decompile fix
                     this.level.playLocalSound(this.x, this.y, this.z, debug2, SoundSource.AMBIENT, 20.0f, 0.9f + this.random.nextFloat() * 0.15f, true);
                 }
                 this.remove();
diff --git a/src/main/java/net/minecraft/client/particle/ParticleEngine.java b/src/main/java/net/minecraft/client/particle/ParticleEngine.java
index ba7a8605ea4c407c266010cd907fc1c8341afebe..45b165e7aa2a95cdff51e089cc574037bd5d3ad2 100644
--- a/src/main/java/net/minecraft/client/particle/ParticleEngine.java
+++ b/src/main/java/net/minecraft/client/particle/ParticleEngine.java
@@ -119,7 +119,7 @@ import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class ParticleEngine
 implements PreparableReloadListener {
-    private static final List<ParticleRenderType> RENDER_ORDER = ImmutableList.of((Object)ParticleRenderType.TERRAIN_SHEET, (Object)ParticleRenderType.PARTICLE_SHEET_OPAQUE, (Object)ParticleRenderType.PARTICLE_SHEET_LIT, (Object)ParticleRenderType.PARTICLE_SHEET_TRANSLUCENT, (Object)ParticleRenderType.CUSTOM);
+    private static final List<ParticleRenderType> RENDER_ORDER = ImmutableList.of(ParticleRenderType.TERRAIN_SHEET, ParticleRenderType.PARTICLE_SHEET_OPAQUE, ParticleRenderType.PARTICLE_SHEET_LIT, ParticleRenderType.PARTICLE_SHEET_TRANSLUCENT, ParticleRenderType.CUSTOM); // MagmaCube - decompile fix
     protected ClientLevel level;
     private final Map<ParticleRenderType, Queue<Particle>> particles = Maps.newIdentityHashMap();
     private final Queue<TrackingEmitter> trackingEmitters = Queues.newArrayDeque();
@@ -224,15 +224,15 @@ implements PreparableReloadListener {
 
     @Override
     public CompletableFuture<Void> reload(PreparableReloadListener.PreparationBarrier debug1, ResourceManager debug2, ProfilerFiller debug3, ProfilerFiller debug42, Executor debug5, Executor debug6) {
-        ConcurrentMap debug7 = Maps.newConcurrentMap();
+        ConcurrentMap<ResourceLocation, List<ResourceLocation>> debug7 = Maps.newConcurrentMap(); // MagmaCube - decompile fix
         CompletableFuture[] debug8 = (CompletableFuture[])Registry.PARTICLE_TYPE.keySet().stream().map(debug4 -> CompletableFuture.runAsync(() -> this.loadParticleDescription(debug2, (ResourceLocation)debug4, debug7), debug5)).toArray(CompletableFuture[]::new);
-        return ((CompletableFuture)((CompletableFuture)CompletableFuture.allOf(debug8).thenApplyAsync(debug4 -> {
+        return ((CompletableFuture.allOf(debug8).thenApplyAsync(debug4 -> { // MagmaCube - decompile fix
             debug3.startTick();
             debug3.push("stitching");
-            TextureAtlas.Preparations debug5 = this.textureAtlas.prepareToStitch(debug2, debug7.values().stream().flatMap(Collection::stream), debug3, 0);
+            TextureAtlas.Preparations debug5l = this.textureAtlas.prepareToStitch(debug2, debug7.values().stream().flatMap(Collection::stream), debug3, 0); // MagmaCube - decompile fix
             debug3.pop();
             debug3.endTick();
-            return debug5;
+            return debug5l; // MagmaCube - decompile fix
         }, debug5)).thenCompose(debug1::wait)).thenAcceptAsync(debug32 -> {
             this.particles.clear();
             debug42.startTick();
@@ -240,9 +240,9 @@ implements PreparableReloadListener {
             this.textureAtlas.reload((TextureAtlas.Preparations)debug32);
             debug42.popPush("bindSpriteSets");
             TextureAtlasSprite debug4 = this.textureAtlas.getSprite(MissingTextureAtlasSprite.getLocation());
-            debug7.forEach((debug2, debug3) -> {
-                ImmutableList debug4 = debug3.isEmpty() ? ImmutableList.of((Object)debug4) : (ImmutableList)debug3.stream().map(this.textureAtlas::getSprite).collect(ImmutableList.toImmutableList());
-                this.spriteSets.get(debug2).rebind((List<TextureAtlasSprite>)debug4);
+            debug7.forEach((debug2l, debug3l) -> { // MagmaCube - decompile fix
+                ImmutableList debug4l = debug3l.isEmpty() ? ImmutableList.of(debug4) : (ImmutableList)debug3l.stream().map(this.textureAtlas::getSprite).collect(ImmutableList.toImmutableList()); // MagmaCube - decompile fix
+                this.spriteSets.get(debug2l).rebind((List<TextureAtlasSprite>)debug4l); // MagmaCube - decompile fix
             });
             debug42.pop();
             debug42.endTick();
@@ -308,22 +308,22 @@ implements PreparableReloadListener {
     }
 
     public void tick() {
-        Object debug12;
         this.particles.forEach((debug1, debug2) -> {
             this.level.getProfiler().push(debug1.toString());
             this.tickParticleList((Collection<Particle>)debug2);
             this.level.getProfiler().pop();
         });
         if (!this.trackingEmitters.isEmpty()) {
-            debug12 = Lists.newArrayList();
+            List<TrackingEmitter> debug12 = Lists.newArrayList(); // MagmaCube - decompile fix
             for (TrackingEmitter debug3 : this.trackingEmitters) {
                 debug3.tick();
                 if (debug3.isAlive()) continue;
                 debug12.add(debug3);
             }
-            this.trackingEmitters.removeAll((Collection<?>)debug12);
+            this.trackingEmitters.removeAll(debug12); // MagmaCube - decompile fix
         }
         if (!this.particlesToAdd.isEmpty()) {
+            Particle debug12; // MagmaCube - decompile fix
             while ((debug12 = this.particlesToAdd.poll()) != null) {
                 this.particles.computeIfAbsent(((Particle)debug12).getRenderType(), debug0 -> EvictingQueue.create((int)16384)).add(debug12);
             }
@@ -364,7 +364,7 @@ implements PreparableReloadListener {
         RenderSystem.pushMatrix();
         RenderSystem.multMatrix(debug1.last().pose());
         for (ParticleRenderType debug7 : RENDER_ORDER) {
-            Iterable debug8 = this.particles.get(debug7);
+            Iterable<Particle> debug8 = this.particles.get(debug7); // MagmaCube - decompile fix
             if (debug8 == null) continue;
             RenderSystem.color4f(1.0f, 1.0f, 1.0f, 1.0f);
             Tesselator debug9 = Tesselator.getInstance();
diff --git a/src/main/java/net/minecraft/client/player/LocalPlayer.java b/src/main/java/net/minecraft/client/player/LocalPlayer.java
index f21dc214c3e8c5c6266ec479154a7731acbae030..87a5dcd81417bab0c668ae8f98f7df3fb2171c52 100644
--- a/src/main/java/net/minecraft/client/player/LocalPlayer.java
+++ b/src/main/java/net/minecraft/client/player/LocalPlayer.java
@@ -894,7 +894,7 @@ extends AbstractClientPlayer {
                 }
                 ++debug36;
             }
-            break block0;
+            break; // MagmaCube - decompile fix
         }
         if (debug32 == Float.MIN_VALUE) {
             return;
diff --git a/src/main/java/net/minecraft/client/player/inventory/Hotbar.java b/src/main/java/net/minecraft/client/player/inventory/Hotbar.java
index 300f01109d8527b30a5d5d59bdb8d35cd0ae5c81..7bbc2efb83070cb66907046102610c0b64ed9314 100644
--- a/src/main/java/net/minecraft/client/player/inventory/Hotbar.java
+++ b/src/main/java/net/minecraft/client/player/inventory/Hotbar.java
@@ -26,7 +26,7 @@ public class Hotbar extends ForwardingList<ItemStack>
     public ListTag createTag() {
         final ListTag debug1 = new ListTag();
         for (final ItemStack debug2 : this.delegate()) {
-            ((AbstractList<CompoundTag>)debug1).add(debug2.save(new CompoundTag()));
+            debug1.add(debug2.save(new CompoundTag())); // MagmaCube - decompile fix
         }
         return debug1;
     }
diff --git a/src/main/java/net/minecraft/client/renderer/GpuWarnlistManager.java b/src/main/java/net/minecraft/client/renderer/GpuWarnlistManager.java
index 046e9f9971d496eb3f7c72385852e3cab6bc6b5b..aea009414d88e9e80fb22b6c38f0f8e84c7bf0a2 100644
--- a/src/main/java/net/minecraft/client/renderer/GpuWarnlistManager.java
+++ b/src/main/java/net/minecraft/client/renderer/GpuWarnlistManager.java
@@ -29,7 +29,7 @@ import net.minecraft.resources.ResourceLocation;
 import org.apache.logging.log4j.Logger;
 import net.minecraft.server.packs.resources.SimplePreparableReloadListener;
 
-public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparations>
+public class GpuWarnlistManager extends SimplePreparableReloadListener<GpuWarnlistManager.Preparations> // MagmaCube - decompile fix
 {
     private static final Logger LOGGER;
     private static final ResourceLocation GPU_WARNLIST_LOCATION;
@@ -39,7 +39,7 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
     private boolean skipFabulous;
     
     public GpuWarnlistManager() {
-        this.warnings = (ImmutableMap<String, String>)ImmutableMap.of();
+        this.warnings = ImmutableMap.of(); // MagmaCube - decompile fix
     }
     
     public boolean hasWarnings() {
@@ -101,9 +101,9 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
     
     @Override
     protected Preparations prepare(final ResourceManager debug1, final ProfilerFiller debug2) {
-        final List<Pattern> debug3 = (List<Pattern>)Lists.newArrayList();
-        final List<Pattern> debug4 = (List<Pattern>)Lists.newArrayList();
-        final List<Pattern> debug5 = (List<Pattern>)Lists.newArrayList();
+        final List<Pattern> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
+        final List<Pattern> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
+        final List<Pattern> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
         debug2.startTick();
         final JsonObject debug6 = parseJson(debug1, debug2);
         if (debug6 != null) {
@@ -123,7 +123,7 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
     }
     
     private static void compilePatterns(final JsonArray debug0, final List<Pattern> debug1) {
-        debug0.forEach(debug1 -> debug1.add(Pattern.compile(debug1.getAsString(), 2)));
+        debug0.forEach(debug12 -> debug1.add(Pattern.compile(debug12.getAsString(), 2))); // MagmaCube - decompile fix
     }
     
     @Nullable
@@ -135,8 +135,6 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
             debug2 = new JsonParser().parse((Reader)debug4).getAsJsonObject();
         }
         catch (IOException | JsonSyntaxException ex2) {
-            final Exception ex;
-            final Exception debug5 = ex;
             GpuWarnlistManager.LOGGER.warn("Failed to load GPU warnlist");
         }
         debug1.pop();
@@ -161,7 +159,7 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
         }
         
         private static String matchAny(final List<Pattern> debug0, final String debug1) {
-            final List<String> debug2 = (List<String>)Lists.newArrayList();
+            final List<String> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
             for (final Pattern debug3 : debug0) {
                 final Matcher debug4 = debug3.matcher(debug1);
                 while (debug4.find()) {
@@ -175,15 +173,15 @@ public class GpuWarnlistManager extends SimplePreparableReloadListener<Preparati
             final ImmutableMap.Builder<String, String> debug1 = (ImmutableMap.Builder<String, String>)new ImmutableMap.Builder();
             final String debug2 = matchAny(this.rendererPatterns, GlUtil.getRenderer());
             if (!debug2.isEmpty()) {
-                debug1.put((Object)"renderer", (Object)debug2);
+                debug1.put("renderer", debug2); // MagmaCube - decompile fix
             }
             final String debug3 = matchAny(this.versionPatterns, GlUtil.getOpenGLVersion());
             if (!debug3.isEmpty()) {
-                debug1.put((Object)"version", (Object)debug3);
+                debug1.put("version", debug3); // MagmaCube - decompile fix
             }
             final String debug4 = matchAny(this.vendorPatterns, GlUtil.getVendor());
             if (!debug4.isEmpty()) {
-                debug1.put((Object)"vendor", (Object)debug4);
+                debug1.put("vendor", debug4); // MagmaCube - decompile fix
             }
             return (ImmutableMap<String, String>)debug1.build();
         }
diff --git a/src/main/java/net/minecraft/client/renderer/ItemInHandRenderer.java b/src/main/java/net/minecraft/client/renderer/ItemInHandRenderer.java
index 216c167fd721aa60c024eebbfa23ee0ee0c5fb83..bd71dfaa045005d07b6eab01efa82f48e80ef268 100644
--- a/src/main/java/net/minecraft/client/renderer/ItemInHandRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/ItemInHandRenderer.java
@@ -205,7 +205,6 @@ public class ItemInHandRenderer {
 
     public void renderHandsWithItems(float debug1, PoseStack debug2, MultiBufferSource.BufferSource debug3, LocalPlayer debug4, int debug5) {
         float debug14;
-        Object debug12;
         ItemStack debug11;
         float debug6 = debug4.getAttackAnim(debug1);
         InteractionHand debug7 = (InteractionHand)((Object)MoreObjects.firstNonNull((Object)((Object)debug4.swingingArm), (Object)((Object)InteractionHand.MAIN_HAND)));
@@ -219,12 +218,13 @@ public class ItemInHandRenderer {
                 debug9 = debug4.getUsedItemHand() == InteractionHand.MAIN_HAND;
                 boolean bl = debug10 = !debug9;
             }
+            InteractionHand debug12; // MagmaCube - decompile fix
             if ((debug12 = debug4.getUsedItemHand()) == InteractionHand.MAIN_HAND && (debug13 = debug4.getOffhandItem()).getItem() == Items.CROSSBOW && CrossbowItem.isCharged(debug13)) {
                 debug10 = false;
             }
         } else {
             debug11 = debug4.getMainHandItem();
-            debug12 = debug4.getOffhandItem();
+            ItemStack debug12 = debug4.getOffhandItem(); // MagmaCube - decompile fix
             if (debug11.getItem() == Items.CROSSBOW && CrossbowItem.isCharged(debug11)) {
                 boolean bl = debug10 = !debug9;
             }
diff --git a/src/main/java/net/minecraft/client/renderer/ItemModelShaper.java b/src/main/java/net/minecraft/client/renderer/ItemModelShaper.java
index 730bca7dc80c1aa2ebcd5a59c7088201a3745f52..d620152536dd88cc985fb5a5473e8b241494678e 100644
--- a/src/main/java/net/minecraft/client/renderer/ItemModelShaper.java
+++ b/src/main/java/net/minecraft/client/renderer/ItemModelShaper.java
@@ -53,7 +53,7 @@ public class ItemModelShaper
     }
     
     public void register(final Item debug1, final ModelResourceLocation debug2) {
-        this.shapes.put(getIndex(debug1), (Object)debug2);
+        this.shapes.put(getIndex(debug1), debug2); // MagmaCube - decompile fix
     }
     
     public ModelManager getModelManager() {
@@ -63,7 +63,7 @@ public class ItemModelShaper
     public void rebuildCache() {
         this.shapesCache.clear();
         for (final Map.Entry<Integer, ModelResourceLocation> debug2 : this.shapes.entrySet()) {
-            this.shapesCache.put((Integer)debug2.getKey(), (Object)this.modelManager.getModel(debug2.getValue()));
+            this.shapesCache.put((Integer)debug2.getKey(), this.modelManager.getModel(debug2.getValue())); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
index 25943c7957858ebe7b499bfb284f3ca9cf584397..5aafd98ded237bcdab5b3e5063cefc59076dbd7a 100644
--- a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
@@ -54,14 +54,7 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import it.unimi.dsi.fastutil.objects.ObjectList;
 import it.unimi.dsi.fastutil.objects.ObjectListIterator;
 import java.io.IOException;
-import java.util.Collection;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
-import java.util.Set;
-import java.util.SortedSet;
+import java.util.*;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -723,7 +716,6 @@ AutoCloseable {
     }
 
     private void setupRender(Camera debug12, Frustum debug2, boolean debug3, int debug4, boolean debug5) {
-        Collection<ChunkRenderDispatcher.RenderChunk> debug19;
         Vec3 debug6 = debug12.getPosition();
         if (this.minecraft.options.renderDistance != this.lastViewDistance) {
             this.allChanged();
@@ -760,14 +752,14 @@ AutoCloseable {
         if (!debug3 && this.needsUpdate) {
             this.needsUpdate = false;
             this.renderChunks.clear();
-            debug19 = Queues.newArrayDeque();
+            Queue<RenderChunkInfo> debug19 = Queues.newArrayDeque();
             Entity.setViewScale(Mth.clamp((double)this.minecraft.options.renderDistance / 8.0, 1.0, 2.5) * (double)this.minecraft.options.entityDistanceScaling);
             boolean debug20 = this.minecraft.smartCull;
             if (debug14 == null) {
                 int debug21 = debug13.getY() > 0 ? 248 : 8;
                 int debug22 = Mth.floor(debug6.x / 16.0) * 16;
                 int debug23 = Mth.floor(debug6.z / 16.0) * 16;
-                Direction[] debug24 = Lists.newArrayList();
+                List<RenderChunkInfo> debug24 = Lists.newArrayList(); // MagmaCube - decompile fix
                 for (int debug25 = -this.lastViewDistance; debug25 <= this.lastViewDistance; ++debug25) {
                     for (int debug26 = -this.lastViewDistance; debug26 <= this.lastViewDistance; ++debug26) {
                         ChunkRenderDispatcher.RenderChunk renderChunk = this.viewArea.getRenderChunkAt(new BlockPos(debug22 + (debug25 << 4) + 8, debug21, debug23 + (debug26 << 4) + 8));
@@ -777,32 +769,32 @@ AutoCloseable {
                     }
                 }
                 debug24.sort(Comparator.comparingDouble(debug1 -> debug13.distSqr(((RenderChunkInfo)debug1).chunk.getOrigin().offset(8, 8, 8))));
-                debug19.addAll((Collection<ChunkRenderDispatcher.RenderChunk>)debug24);
+                debug19.addAll(debug24); // MagmaCube - decompile fix
             } else {
                 if (debug5 && this.level.getBlockState(debug13).isSolidRender(this.level, debug13)) {
                     debug20 = false;
                 }
                 debug14.setFrame(debug4);
-                debug19.add((ChunkRenderDispatcher.RenderChunk)((Object)new RenderChunkInfo(debug14, null, 0)));
+                debug19.add(new RenderChunkInfo(debug14, null, 0)); // MagmaCube - decompile fix
             }
             this.minecraft.getProfiler().push("iteration");
             while (!debug19.isEmpty()) {
                 RenderChunkInfo debug21 = (RenderChunkInfo)debug19.poll();
                 ChunkRenderDispatcher.RenderChunk debug22 = debug21.chunk;
                 Direction debug23 = debug21.sourceDirection;
-                this.renderChunks.add((Object)debug21);
+                this.renderChunks.add(debug21); // MagmaCube - decompile fix
                 for (Direction direction : DIRECTIONS) {
                     ChunkRenderDispatcher.RenderChunk debug28 = this.getRelativeFrom(debug16, debug22, direction);
                     if (debug20 && debug21.hasDirection(direction.getOpposite()) || debug20 && debug23 != null && !debug22.getCompiledChunk().facesCanSeeEachother(debug23.getOpposite(), direction) || debug28 == null || !debug28.hasAllNeighbors() || !debug28.setFrame(debug4) || !debug2.isVisible(debug28.bb)) continue;
                     RenderChunkInfo debug29 = new RenderChunkInfo(debug28, direction, debug21.step + 1);
                     debug29.setDirections(debug21.directions, direction);
-                    debug19.add((ChunkRenderDispatcher.RenderChunk)((Object)debug29));
+                    debug19.add(debug29); // MagmaCube - decompile fix
                 }
             }
             this.minecraft.getProfiler().pop();
         }
         this.minecraft.getProfiler().popPush("rebuildNear");
-        debug19 = this.chunksToCompile;
+        Set<ChunkRenderDispatcher.RenderChunk> debug19 = this.chunksToCompile; // MagmaCube - decompile fix
         this.chunksToCompile = Sets.newLinkedHashSet();
         for (RenderChunkInfo debug21 : this.renderChunks) {
             boolean debug24;
@@ -865,10 +857,7 @@ AutoCloseable {
      * WARNING - Removed try catching itself - possible behaviour change.
      */
     public void renderLevel(PoseStack debug1, float debug22, long debug3, boolean debug5, Camera debug6, GameRenderer debug7, LightTexture debug8, Matrix4f debug9) {
-        Object debug48;
         int debug47;
-        Object debug412;
-        Object debug42;
         boolean debug222;
         Frustum debug20;
         boolean debug19;
@@ -954,7 +943,9 @@ AutoCloseable {
                 entity.yOld = entity.getY();
                 entity.zOld = entity.getZ();
             }
+            MultiBufferSource debug412; // MagmaCube - decompile fix
             if (this.shouldShowEntityOutlines() && this.minecraft.shouldEntityAppearGlowing(entity)) {
+                OutlineBufferSource debug42; // MagmaCube - decompile fix
                 debug37 = true;
                 debug412 = debug42 = this.renderBuffers.outlineBufferSource();
                 int debug43 = entity.getTeamColor();
@@ -975,25 +966,23 @@ AutoCloseable {
         debug38.endBatch(RenderType.entitySmoothCutout(TextureAtlas.LOCATION_BLOCKS));
         debug10.popPush("blockentities");
         for (RenderChunkInfo renderChunkInfo : this.renderChunks) {
-            debug412 = renderChunkInfo.chunk.getCompiledChunk().getRenderableBlockEntities();
+            List<BlockEntity> debug412 = renderChunkInfo.chunk.getCompiledChunk().getRenderableBlockEntities(); // MagmaCube - decompile fix
             if (debug412.isEmpty()) continue;
-            debug42 = debug412.iterator();
-            while (debug42.hasNext()) {
-                BlockEntity debug43 = (BlockEntity)debug42.next();
+            for (BlockEntity debug43 : debug412) { // MagmaCube - decompile fix
                 BlockPos debug44 = debug43.getBlockPos();
                 MultiBufferSource debug45 = debug38;
                 debug1.pushPose();
-                debug1.translate((double)debug44.getX() - debug12, (double)debug44.getY() - debug14, (double)debug44.getZ() - debug16);
-                SortedSet debug46 = (SortedSet)this.destructionProgress.get(debug44.asLong());
-                if (debug46 != null && !debug46.isEmpty() && (debug47 = ((BlockDestructionProgress)debug46.last()).getProgress()) >= 0) {
-                    debug48 = debug1.last();
-                    SheetedDecalTextureGenerator debug49 = new SheetedDecalTextureGenerator(this.renderBuffers.crumblingBufferSource().getBuffer(ModelBakery.DESTROY_TYPES.get(debug47)), ((PoseStack.Pose)debug48).pose(), ((PoseStack.Pose)debug48).normal());
+                debug1.translate((double) debug44.getX() - debug12, (double) debug44.getY() - debug14, (double) debug44.getZ() - debug16); // MagmaCube - decompile fix
+                SortedSet debug46 = (SortedSet) this.destructionProgress.get(debug44.asLong()); // MagmaCube - decompile fix
+                if (debug46 != null && !debug46.isEmpty() && (debug47 = ((BlockDestructionProgress) debug46.last()).getProgress()) >= 0) { // MagmaCube - decompile fix
+                    PoseStack.Pose debug48 = debug1.last(); // MagmaCube - decompile fix
+                    SheetedDecalTextureGenerator debug49 = new SheetedDecalTextureGenerator(this.renderBuffers.crumblingBufferSource().getBuffer(ModelBakery.DESTROY_TYPES.get(debug47)), ((PoseStack.Pose) debug48).pose(), ((PoseStack.Pose) debug48).normal()); // MagmaCube - decompile fix
                     debug45 = debug2 -> {
-                        VertexConsumer debug3 = debug38.getBuffer(debug2);
+                        VertexConsumer debug3l = debug38.getBuffer(debug2); // MagmaCube - decompile fix
                         if (debug2.affectsCrumbling()) {
-                            return VertexMultiConsumer.create(debug49, debug3);
+                            return VertexMultiConsumer.create(debug49, debug3l); // MagmaCube - decompile fix
                         }
-                        return debug3;
+                        return debug3l; // MagmaCube - decompile fix
                     };
                 }
                 BlockEntityRenderDispatcher.instance.render(debug43, debug22, debug1, debug45);
@@ -1002,8 +991,8 @@ AutoCloseable {
         }
         Set<BlockEntity> set = this.globalBlockEntities;
         synchronized (set) {
-            for (Object debug412 : this.globalBlockEntities) {
-                debug42 = ((BlockEntity)debug412).getBlockPos();
+            for (BlockEntity debug412 : this.globalBlockEntities) { // MagmaCube - decompile fix
+                BlockPos debug42 = ((BlockEntity)debug412).getBlockPos(); // MagmaCube - decompile fix
                 debug1.pushPose();
                 debug1.translate((double)((Vec3i)debug42).getX() - debug12, (double)((Vec3i)debug42).getY() - debug14, (double)((Vec3i)debug42).getZ() - debug16);
                 BlockEntityRenderDispatcher.instance.render(debug412, debug22, debug1, debug38);
@@ -1027,8 +1016,9 @@ AutoCloseable {
         for (Long2ObjectMap.Entry entry : this.destructionProgress.long2ObjectEntrySet()) {
             double debug46;
             double debug44;
-            debug412 = BlockPos.of(entry.getLongKey());
+            BlockPos debug412 = BlockPos.of(entry.getLongKey()); // MagmaCube - decompile fix
             double debug422 = (double)((Vec3i)debug412).getX() - debug12;
+            SortedSet<BlockDestructionProgress> debug48; // MagmaCube - decompile fix
             if (debug422 * debug422 + (debug44 = (double)((Vec3i)debug412).getY() - debug14) * debug44 + (debug46 = (double)((Vec3i)debug412).getZ() - debug16) * debug46 > 1024.0 || (debug48 = (SortedSet)entry.getValue()) == null || debug48.isEmpty()) continue;
             int debug49 = ((BlockDestructionProgress)debug48.last()).getProgress();
             debug1.pushPose();
@@ -1043,7 +1033,7 @@ AutoCloseable {
         if (debug5 && debug39 != null && debug39.getType() == HitResult.Type.BLOCK) {
             debug10.popPush("outline");
             BlockPos blockPos = ((BlockHitResult)debug39).getBlockPos();
-            debug412 = this.level.getBlockState(blockPos);
+            BlockState debug412 = this.level.getBlockState(blockPos); // MagmaCube - decompile fix
             if (!((BlockBehaviour.BlockStateBase)debug412).isAir() && this.level.getWorldBorder().isWithinBounds(blockPos)) {
                 VertexConsumer debug423 = debug38.getBuffer(RenderType.lines());
                 this.renderHitOutline(debug1, debug423, debug6.getEntity(), debug12, debug14, debug16, blockPos, (BlockState)debug412);
@@ -2433,7 +2423,7 @@ AutoCloseable {
             }
             if (debug4 == null || debug4.getPos().getX() != debug2.getX() || debug4.getPos().getY() != debug2.getY() || debug4.getPos().getZ() != debug2.getZ()) {
                 debug4 = new BlockDestructionProgress(debug1, debug2);
-                this.destroyingBlocks.put(debug1, (Object)debug4);
+                this.destroyingBlocks.put(debug1, debug4); // MagmaCube - decompile fix
             }
             debug4.setProgress(debug3);
             debug4.updateTick(this.ticks);
diff --git a/src/main/java/net/minecraft/client/renderer/MultiBufferSource.java b/src/main/java/net/minecraft/client/renderer/MultiBufferSource.java
index c0a5a12d47330556335932196548c323f15c00fc..505c42bbcd559b401a3e6f614115d70d796e0544 100644
--- a/src/main/java/net/minecraft/client/renderer/MultiBufferSource.java
+++ b/src/main/java/net/minecraft/client/renderer/MultiBufferSource.java
@@ -12,11 +12,11 @@ import com.mojang.blaze3d.vertex.BufferBuilder;
 
 public interface MultiBufferSource
 {
-    default BufferSource immediate(final BufferBuilder debug0) {
-        return immediateWithBuffers((Map<RenderType, BufferBuilder>)ImmutableMap.of(), debug0);
+    static BufferSource immediate(final BufferBuilder debug0) { // MagmaCube - decompile fix
+        return immediateWithBuffers(ImmutableMap.of(), debug0); // MagmaCube - decompile fix
     }
     
-    default BufferSource immediateWithBuffers(final Map<RenderType, BufferBuilder> debug0, final BufferBuilder debug1) {
+    static BufferSource immediateWithBuffers(final Map<RenderType, BufferBuilder> debug0, final BufferBuilder debug1) { // MagmaCube - decompile fix
         return new BufferSource(debug1, debug0);
     }
     
@@ -31,7 +31,7 @@ public interface MultiBufferSource
         
         protected BufferSource(final BufferBuilder debug1, final Map<RenderType, BufferBuilder> debug2) {
             this.lastState = Optional.empty();
-            this.startedBuffers = (Set<BufferBuilder>)Sets.newHashSet();
+            this.startedBuffers = Sets.newHashSet(); // MagmaCube - decompile fix
             this.builder = debug1;
             this.fixedBuffers = debug2;
         }
@@ -60,9 +60,8 @@ public interface MultiBufferSource
         }
         
         public void endBatch() {
-            final VertexConsumer debug2;
             this.lastState.ifPresent(debug1 -> {
-                debug2 = this.getBuffer(debug1);
+                VertexConsumer debug2 = this.getBuffer(debug1); // MagmaCube - decompile fix
                 if (debug2 == this.builder) {
                     this.endBatch(debug1);
                 }
diff --git a/src/main/java/net/minecraft/client/renderer/PostChain.java b/src/main/java/net/minecraft/client/renderer/PostChain.java
index e3e63df161f70d144a2df31e20de10cabce5400e..2efa54f2278ba555ecd6a178587cadbf8072354d 100644
--- a/src/main/java/net/minecraft/client/renderer/PostChain.java
+++ b/src/main/java/net/minecraft/client/renderer/PostChain.java
@@ -219,7 +219,7 @@ implements AutoCloseable {
                     catch (Exception debug14) {
                         debug15 = ChainedJsonException.forException(debug14);
                         ((ChainedJsonException)debug15).prependJsonKey("auxtargets[" + debug112 + "]");
-                        throw debug15;
+                        throw (ChainedJsonException) debug15; // MagmaCube - decompile fix
                     }
                 }
                 ++debug112;
@@ -227,14 +227,14 @@ implements AutoCloseable {
         }
         if ((debug11 = GsonHelper.getAsJsonArray(debug3, "uniforms", null)) != null) {
             int debug12 = 0;
-            for (JsonObject debug14 : debug11) {
+            for (JsonElement debug14 : debug11) { // MagmaCube - decompile fix
                 try {
                     this.parseUniformNode((JsonElement)debug14);
                 }
                 catch (Exception debug15) {
                     debug16 = ChainedJsonException.forException(debug15);
                     ((ChainedJsonException)debug16).prependJsonKey("uniforms[" + debug12 + "]");
-                    throw debug16;
+                    throw (ChainedJsonException) debug16; // MagmaCube - decompile fix
                 }
                 ++debug12;
             }
diff --git a/src/main/java/net/minecraft/client/renderer/RenderBuffers.java b/src/main/java/net/minecraft/client/renderer/RenderBuffers.java
index 17de275b70d2ea1b190583a3c6518e04ddde4979..57096e954355778f314622e414dfd90efa26aa5f 100644
--- a/src/main/java/net/minecraft/client/renderer/RenderBuffers.java
+++ b/src/main/java/net/minecraft/client/renderer/RenderBuffers.java
@@ -17,11 +17,13 @@ public class RenderBuffers
     
     public RenderBuffers() {
         this.fixedBufferPack = new ChunkBufferBuilderPack();
-        this.fixedBuffers = Util.make((SortedMap<RenderType, BufferBuilder>)new Object2ObjectLinkedOpenHashMap(), debug1 -> {
-            debug1.put((Object)Sheets.solidBlockSheet(), (Object)this.fixedBufferPack.builder(RenderType.solid()));
-            debug1.put((Object)Sheets.cutoutBlockSheet(), (Object)this.fixedBufferPack.builder(RenderType.cutout()));
-            debug1.put((Object)Sheets.bannerSheet(), (Object)this.fixedBufferPack.builder(RenderType.cutoutMipped()));
-            debug1.put((Object)Sheets.translucentCullBlockSheet(), (Object)this.fixedBufferPack.builder(RenderType.translucent()));
+        // MagmaCube start - decompile fix
+        this.fixedBuffers = Util.make(new Object2ObjectLinkedOpenHashMap(), debug1 -> {
+            debug1.put(Sheets.solidBlockSheet(), this.fixedBufferPack.builder(RenderType.solid()));
+            debug1.put(Sheets.cutoutBlockSheet(), this.fixedBufferPack.builder(RenderType.cutout()));
+            debug1.put(Sheets.bannerSheet(), this.fixedBufferPack.builder(RenderType.cutoutMipped()));
+            debug1.put(Sheets.translucentCullBlockSheet(), this.fixedBufferPack.builder(RenderType.translucent()));
+            // MagmaCube end - decompile fix
             put(debug1, Sheets.shieldSheet());
             put(debug1, Sheets.bedSheet());
             put(debug1, Sheets.shulkerBoxSheet());
@@ -36,7 +38,7 @@ public class RenderBuffers
             put(debug1, RenderType.entityGlint());
             put(debug1, RenderType.entityGlintDirect());
             put(debug1, RenderType.waterMask());
-            ModelBakery.DESTROY_TYPES.forEach(debug1 -> put(debug1, debug1));
+            ModelBakery.DESTROY_TYPES.forEach(debug1l -> put(debug1, debug1l)); // MagmaCube - decompile fix
             return;
         });
         this.bufferSource = MultiBufferSource.immediateWithBuffers(this.fixedBuffers, new BufferBuilder(256));
@@ -45,7 +47,7 @@ public class RenderBuffers
     }
     
     private static void put(final Object2ObjectLinkedOpenHashMap<RenderType, BufferBuilder> debug0, final RenderType debug1) {
-        debug0.put((Object)debug1, (Object)new BufferBuilder(debug1.bufferSize()));
+        debug0.put(debug1, new BufferBuilder(debug1.bufferSize())); // MagmaCube - decompile fix
     }
     
     public ChunkBufferBuilderPack fixedBufferPack() {
diff --git a/src/main/java/net/minecraft/client/renderer/RenderStateShard.java b/src/main/java/net/minecraft/client/renderer/RenderStateShard.java
index 6658ce44985e9e28f6580ef73bbb224cc9f44c03..4418604d042ae9e69732ac24fa11f7d86ac27713 100644
--- a/src/main/java/net/minecraft/client/renderer/RenderStateShard.java
+++ b/src/main/java/net/minecraft/client/renderer/RenderStateShard.java
@@ -563,9 +563,9 @@ public abstract class RenderStateShard {
         public TextureStateShard(ResourceLocation debug1, boolean debug2, boolean debug3) {
             super("texture", () -> {
                 RenderSystem.enableTexture();
-                TextureManager debug3 = Minecraft.getInstance().getTextureManager();
-                debug3.bind(debug1);
-                debug3.getTexture(debug1).setFilter(debug2, debug3);
+                TextureManager debug3l = Minecraft.getInstance().getTextureManager(); // MagmaCube - decompile fix
+                debug3l.bind(debug1); // MagmaCube - decompile fix
+                debug3l.getTexture(debug1).setFilter(debug2, debug3); // MagmaCube - decompile fix
             }, () -> {});
             this.texture = Optional.of(debug1);
             this.blur = debug2;
diff --git a/src/main/java/net/minecraft/client/renderer/RenderType.java b/src/main/java/net/minecraft/client/renderer/RenderType.java
index 167aed0b431d91da2312877afb18f23313b2fe9e..d42d6a57ed534148310dd824604769617e3512ad 100644
--- a/src/main/java/net/minecraft/client/renderer/RenderType.java
+++ b/src/main/java/net/minecraft/client/renderer/RenderType.java
@@ -268,7 +268,7 @@ public abstract class RenderType extends RenderStateShard
     }
     
     public static CompositeRenderType create(final String debug0, final VertexFormat debug1, final int debug2, final int debug3, final boolean debug4, final boolean debug5, final CompositeState debug6) {
-        return memoize(debug0, debug1, debug2, debug3, debug4, debug5, debug6);
+        return CompositeRenderType.memoize(debug0, debug1, debug2, debug3, debug4, debug5, debug6); // MagmaCube - decompile fix
     }
     
     public void end(final BufferBuilder debug1, final int debug2, final int debug3, final int debug4) {
@@ -290,7 +290,7 @@ public abstract class RenderType extends RenderStateShard
     }
     
     public static List<RenderType> chunkBufferLayers() {
-        return (List<RenderType>)ImmutableList.of((Object)solid(), (Object)cutoutMipped(), (Object)cutout(), (Object)translucent(), (Object)tripwire());
+        return (List<RenderType>)ImmutableList.of(solid(), cutoutMipped(), cutout(), translucent(), tripwire()); // MagmaCube - decompile fix
     }
     
     public int bufferSize() {
@@ -397,7 +397,7 @@ public abstract class RenderType extends RenderStateShard
             this.writeMaskState = debug14;
             this.lineState = debug15;
             this.outlineProperty = debug16;
-            this.states = (ImmutableList<RenderStateShard>)ImmutableList.of((Object)this.textureState, (Object)this.transparencyState, (Object)this.diffuseLightingState, (Object)this.shadeModelState, (Object)this.alphaState, (Object)this.depthTestState, (Object)this.cullState, (Object)this.lightmapState, (Object)this.overlayState, (Object)this.fogState, (Object)this.layeringState, (Object)this.outputState, (Object[])new RenderStateShard[] { this.texturingState, this.writeMaskState, this.lineState });
+            this.states = (ImmutableList<RenderStateShard>)ImmutableList.of(this.textureState, this.transparencyState, this.diffuseLightingState, this.shadeModelState, this.alphaState, this.depthTestState, this.cullState, this.lightmapState, this.overlayState, this.fogState, this.layeringState, this.outputState, new RenderStateShard[] { this.texturingState, this.writeMaskState, this.lineState }); // MagmaCube - decompile fix
         }
         
         @Override
@@ -558,13 +558,13 @@ public abstract class RenderType extends RenderStateShard
         private CompositeRenderType(final String debug1, final VertexFormat debug2, final int debug3, final int debug4, final boolean debug5, final boolean debug6, final CompositeState debug7) {
             super(debug1, debug2, debug3, debug4, debug5, debug6, () -> debug7.states.forEach(RenderStateShard::setupRenderState), () -> debug7.states.forEach(RenderStateShard::clearRenderState));
             this.state = debug7;
-            this.outline = ((debug7.outlineProperty == OutlineProperty.AFFECTS_OUTLINE) ? debug7.textureState.texture().map(debug1 -> RenderType.outline(debug1, debug7.cullState)) : Optional.empty());
+            this.outline = ((debug7.outlineProperty == OutlineProperty.AFFECTS_OUTLINE) ? debug7.textureState.texture().map(debug1l -> RenderType.outline(debug1l, debug7.cullState)) : Optional.empty()); // MagmaCube - decompile fix
             this.isOutline = (debug7.outlineProperty == OutlineProperty.IS_OUTLINE);
             this.hashCode = Objects.hash(super.hashCode(), debug7);
         }
         
         private static CompositeRenderType memoize(final String debug0, final VertexFormat debug1, final int debug2, final int debug3, final boolean debug4, final boolean debug5, final CompositeState debug6) {
-            return (CompositeRenderType)CompositeRenderType.INSTANCES.addOrGet((Object)new CompositeRenderType(debug0, debug1, debug2, debug3, debug4, debug5, debug6));
+            return (CompositeRenderType)CompositeRenderType.INSTANCES.addOrGet(new CompositeRenderType(debug0, debug1, debug2, debug3, debug4, debug5, debug6)); // MagmaCube - decompile fix
         }
         
         @Override
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/BlockModel.java b/src/main/java/net/minecraft/client/renderer/block/model/BlockModel.java
index 3946a078125fd9c1fc8dd733fc4ef701c093c8e3..ecc90ab703e701c58cc85c870986db4e9c946f66 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/BlockModel.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/BlockModel.java
@@ -167,12 +167,11 @@ implements UnbakedModel {
 
     @Override
     public Collection<Material> getMaterials(Function<ResourceLocation, UnbakedModel> debug1, Set<Pair<String, String>> debug2) {
-        Object debug5;
         LinkedHashSet debug3 = Sets.newLinkedHashSet();
         BlockModel debug4 = this;
         while (debug4.parentLocation != null && debug4.parent == null) {
             debug3.add(debug4);
-            debug5 = debug1.apply(debug4.parentLocation);
+            UnbakedModel debug5 = debug1.apply(debug4.parentLocation); // MagmaCube - decompile fix
             if (debug5 == null) {
                 LOGGER.warn("No parent '{}' while loading model '{}'", (Object)this.parentLocation, (Object)debug4);
             }
@@ -190,12 +189,12 @@ implements UnbakedModel {
             debug4.parent = (BlockModel)debug5;
             debug4 = debug4.parent;
         }
-        debug5 = Sets.newHashSet((Object[])new Material[]{this.getMaterial("particle")});
+        Set debug5 = Sets.newHashSet((Object[])new Material[]{this.getMaterial("particle")}); // MagmaCube - decompile fix
         for (BlockElement debug7 : this.getElements()) {
             for (BlockElementFace debug9 : debug7.faces.values()) {
                 Material debug10 = this.getMaterial(debug9.texture);
                 if (Objects.equals(debug10.texture(), MissingTextureAtlasSprite.getLocation())) {
-                    debug2.add((Pair<String, String>)Pair.of((Object)debug9.texture, (Object)this.name));
+                    debug2.add((Pair<String, String>)Pair.of(debug9.texture, this.name)); // MagmaCube - decompile fix
                 }
                 debug5.add(debug10);
             }
@@ -267,7 +266,7 @@ implements UnbakedModel {
             }
             debug2 = debug2.parent;
         }
-        return Either.left((Object)new Material(TextureAtlas.LOCATION_BLOCKS, MissingTextureAtlasSprite.getLocation()));
+        return Either.left(new Material(TextureAtlas.LOCATION_BLOCKS, MissingTextureAtlasSprite.getLocation())); // MagmaCube - decompile fix
     }
 
     private static boolean isTextureReference(String debug0) {
@@ -384,13 +383,13 @@ implements UnbakedModel {
 
         private static Either<Material, String> parseTextureLocationOrReference(ResourceLocation debug0, String debug1) {
             if (BlockModel.isTextureReference(debug1)) {
-                return Either.right((Object)debug1.substring(1));
+                return Either.right(debug1.substring(1)); // MagmaCube - decompile fix
             }
             ResourceLocation debug2 = ResourceLocation.tryParse(debug1);
             if (debug2 == null) {
                 throw new JsonParseException(debug1 + " is not valid resource location");
             }
-            return Either.left((Object)new Material(debug0, debug2));
+            return Either.left(new Material(debug0, debug2)); // MagmaCube - decompile fix
         }
 
         private String getParentName(JsonObject debug1) {
@@ -410,10 +409,6 @@ implements UnbakedModel {
             }
             return debug3;
         }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/MultiVariant.java b/src/main/java/net/minecraft/client/renderer/block/model/MultiVariant.java
index c90085245e79d12a5ccf05fd3bf193e4bdba70e4..20217c29ff59128f5c90a0406580b29b45eb2b5e 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/MultiVariant.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/MultiVariant.java
@@ -106,10 +106,6 @@ implements UnbakedModel {
             }
             return new MultiVariant(debug4);
         }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/multipart/MultiPart.java b/src/main/java/net/minecraft/client/renderer/block/model/multipart/MultiPart.java
index bff724df672b21acca8f08907f6f4e978de1261f..39fd10755350805bc9cd9c883c8ab130a56646f3 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/multipart/MultiPart.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/multipart/MultiPart.java
@@ -125,10 +125,6 @@ implements UnbakedModel {
             }
             return debug3;
         }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/multipart/Selector.java b/src/main/java/net/minecraft/client/renderer/block/model/multipart/Selector.java
index b8000059c0ea5b336a66f02ff052e8a9e440ff85..ddb8834c940df96c84ea04e54e9e21d157abe1c5 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/multipart/Selector.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/multipart/Selector.java
@@ -82,17 +82,17 @@ public class Selector {
 
         @VisibleForTesting
         static Condition getCondition(JsonObject debug02) {
-            Set debug1 = debug02.entrySet();
+            Set<Map.Entry<String, JsonElement>> debug1 = debug02.entrySet(); // MagmaCube - decompile fix
             if (debug1.isEmpty()) {
                 throw new JsonParseException("No elements found in selector");
             }
             if (debug1.size() == 1) {
                 if (debug02.has("OR")) {
-                    List debug2 = Streams.stream((Iterable)GsonHelper.getAsJsonArray(debug02, "OR")).map(debug0 -> Deserializer.getCondition(debug0.getAsJsonObject())).collect(Collectors.toList());
+                    List debug2 = Streams.stream(GsonHelper.getAsJsonArray(debug02, "OR")).map(debug0 -> Deserializer.getCondition(debug0.getAsJsonObject())).collect(Collectors.toList()); // MagmaCube - decompile fix
                     return new OrCondition(debug2);
                 }
                 if (debug02.has("AND")) {
-                    List debug2 = Streams.stream((Iterable)GsonHelper.getAsJsonArray(debug02, "AND")).map(debug0 -> Deserializer.getCondition(debug0.getAsJsonObject())).collect(Collectors.toList());
+                    List debug2 = Streams.stream(GsonHelper.getAsJsonArray(debug02, "AND")).map(debug0 -> Deserializer.getCondition(debug0.getAsJsonObject())).collect(Collectors.toList()); // MagmaCube - decompile fix
                     return new AndCondition(debug2);
                 }
                 return Deserializer.getKeyValueCondition((Map.Entry)debug1.iterator().next());
@@ -103,10 +103,6 @@ public class Selector {
         private static Condition getKeyValueCondition(Map.Entry<String, JsonElement> debug0) {
             return new KeyValueCondition(debug0.getKey(), debug0.getValue().getAsString());
         }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/ChestRenderer.java b/src/main/java/net/minecraft/client/renderer/blockentity/ChestRenderer.java
index 97027e15986b7c47d32b4964ba87a1d878c386d1..9528272f8247051baee3b912f28196b9515631b9 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/ChestRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/ChestRenderer.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.blockentity;
 
+import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.StateHolder;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import net.minecraft.client.resources.model.Material;
@@ -68,7 +69,7 @@ public class ChestRenderer<T extends BlockEntity> extends BlockEntityRenderer<T>
     public void render(final T debug1, final float debug2, final PoseStack debug3, final MultiBufferSource debug4, final int debug5, final int debug6) {
         final Level debug7 = ((BlockEntity)debug1).getLevel();
         final boolean debug8 = debug7 != null;
-        final BlockState debug9 = debug8 ? ((BlockEntity)debug1).getBlockState() : ((StateHolder<O, BlockState>)Blocks.CHEST.defaultBlockState()).setValue((Property<Comparable>)ChestBlock.FACING, Direction.SOUTH);
+        final BlockState debug9 = debug8 ? ((BlockEntity)debug1).getBlockState() : (Blocks.CHEST.defaultBlockState()).setValue(ChestBlock.FACING, Direction.SOUTH); // MagmaCube - decompile fix
         final ChestType debug10 = debug9.hasProperty(ChestBlock.TYPE) ? debug9.getValue(ChestBlock.TYPE) : ChestType.SINGLE;
         final Block debug11 = debug9.getBlock();
         if (!(debug11 instanceof AbstractChestBlock)) {
@@ -91,7 +92,7 @@ public class ChestRenderer<T extends BlockEntity> extends BlockEntityRenderer<T>
         float debug16 = debug15.apply(ChestBlock.opennessCombiner((LidBlockEntity)debug1)).get(debug2);
         debug16 = 1.0f - debug16;
         debug16 = 1.0f - debug16 * debug16 * debug16;
-        final int debug17 = debug15.apply((DoubleBlockCombiner.Combiner<? super ChestBlockEntity, Int2IntFunction>)new BrightnessCombiner<Object>()).applyAsInt(debug5);
+        final int debug17 = debug15.apply((DoubleBlockCombiner.Combiner<? super ChestBlockEntity, Int2IntFunction>)new BrightnessCombiner<>()).applyAsInt(debug5); // MagmaCube - decompile fix
         final Material debug18 = Sheets.chooseMaterial((BlockEntity)debug1, debug10, this.xmasTextures);
         final VertexConsumer debug19 = debug18.buffer(debug4, RenderType::entityCutout);
         if (debug13) {
diff --git a/src/main/java/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
index 43c3c3324a31774587ab311cdaef2779fb94acd1..23c4864bb58f4215a790073b877f35142fc17e3a 100644
--- a/src/main/java/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
@@ -129,7 +129,7 @@ public class ChunkRenderDispatcher {
         this.freeBufferCount = this.freeBuffers.size();
         ((CompletableFuture)CompletableFuture.runAsync(() -> {}, this.executor).thenCompose(debug2 -> debug1.doTask(debug22))).whenComplete((debug2, debug3) -> {
             if (debug3 != null) {
-                CrashReport debug4 = CrashReport.forThrowable(debug3, "Batching chunks");
+                CrashReport debug4 = CrashReport.forThrowable((Throwable) debug3, "Batching chunks"); // MagmaCube - decompile fix
                 Minecraft.getInstance().delayCrash(Minecraft.getInstance().fillReport(debug4));
                 return;
             }
@@ -429,11 +429,6 @@ public class ChunkRenderDispatcher {
             public int compareTo(ChunkCompileTask debug1) {
                 return Doubles.compare((double)this.distAtCreation, (double)debug1.distAtCreation);
             }
-
-            @Override
-            public /* synthetic */ int compareTo(Object object) {
-                return this.compareTo((ChunkCompileTask)object);
-            }
         }
 
         class ResortTransparencyTask
@@ -477,7 +472,7 @@ public class ChunkRenderDispatcher {
                 CompletionStage debug8 = ChunkRenderDispatcher.this.uploadChunkLayer(debug12.builder(RenderType.translucent()), RenderChunk.this.getBuffer(RenderType.translucent())).thenApply(debug0 -> ChunkTaskResult.CANCELLED);
                 return ((CompletableFuture)debug8).handle((debug1, debug2) -> {
                     if (debug2 != null && !(debug2 instanceof CancellationException) && !(debug2 instanceof InterruptedException)) {
-                        Minecraft.getInstance().delayCrash(CrashReport.forThrowable(debug2, "Rendering chunk"));
+                        Minecraft.getInstance().delayCrash(CrashReport.forThrowable((Throwable) debug2, "Rendering chunk")); // MagmaCube - decompile fix
                     }
                     return this.isCancelled.get() ? ChunkTaskResult.CANCELLED : ChunkTaskResult.SUCCESSFUL;
                 });
@@ -527,7 +522,7 @@ public class ChunkRenderDispatcher {
                 debug6.hasLayer.forEach(debug3 -> debug8.add(ChunkRenderDispatcher.this.uploadChunkLayer(debug1.builder((RenderType)debug3), RenderChunk.this.getBuffer((RenderType)debug3))));
                 return Util.sequence(debug8).handle((debug2, debug3) -> {
                     if (debug3 != null && !(debug3 instanceof CancellationException) && !(debug3 instanceof InterruptedException)) {
-                        Minecraft.getInstance().delayCrash(CrashReport.forThrowable(debug3, "Rendering chunk"));
+                        Minecraft.getInstance().delayCrash(CrashReport.forThrowable((Throwable) debug3, "Rendering chunk")); // MagmaCube - decompile fix
                     }
                     if (this.isCancelled.get()) {
                         return ChunkTaskResult.CANCELLED;
diff --git a/src/main/java/net/minecraft/client/renderer/chunk/VisibilitySet.java b/src/main/java/net/minecraft/client/renderer/chunk/VisibilitySet.java
index eedd100fda1d37633f191f8157938b01e6f4924f..c145b3574a1330246686f93f51bdd4442cbfa956 100644
--- a/src/main/java/net/minecraft/client/renderer/chunk/VisibilitySet.java
+++ b/src/main/java/net/minecraft/client/renderer/chunk/VisibilitySet.java
@@ -42,7 +42,7 @@ public class VisibilitySet
         for (final Direction debug2 : Direction.values()) {
             debug1.append(' ').append(debug2.toString().toUpperCase().charAt(0));
         }
-        debug1.append('Â¥n');
+        debug1.append('\n'); // MagmaCube - decompile fix
         for (final Direction debug2 : Direction.values()) {
             debug1.append(debug2.toString().toUpperCase().charAt(0));
             for (final Direction debug3 : Direction.values()) {
@@ -54,7 +54,7 @@ public class VisibilitySet
                     debug1.append(' ').append(debug4 ? 'Y' : 'n');
                 }
             }
-            debug1.append('Â¥n');
+            debug1.append('\n'); // MagmaCube - decompile fix
         }
         return debug1.toString();
     }
diff --git a/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java
index 2aaa0188f0bdd267887a4d67e9a4a1a64832bda4..2ab4b660312e6496cca2ad4aa56746d58de314c0 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java
@@ -115,17 +115,17 @@ implements DebugRenderer.SimpleDebugRenderer {
     }
 
     private Map<BlockPos, Set<UUID>> createHiveBlacklistMap() {
-        HashMap debug12 = Maps.newHashMap();
+        HashMap<BlockPos, Set<UUID>> debug12 = Maps.newHashMap(); // MagmaCube - decompile fix
         this.beeInfosPerEntity.values().forEach(debug1 -> debug1.blacklistedHives.forEach(debug2 -> debug12.computeIfAbsent(debug2, debug0 -> Sets.newHashSet()).add(debug1.getUuid())));
         return debug12;
     }
 
     private void renderFlowerInfos() {
-        HashMap debug12 = Maps.newHashMap();
+        HashMap<BlockPos, Set<UUID>> debug12 = Maps.newHashMap(); // MagmaCube - decompile fix
         this.beeInfosPerEntity.values().stream().filter(BeeInfo::hasFlower).forEach(debug1 -> debug12.computeIfAbsent(debug1.flowerPos, debug0 -> Sets.newHashSet()).add(debug1.getUuid()));
         debug12.entrySet().forEach(debug0 -> {
             BlockPos debug1 = (BlockPos)debug0.getKey();
-            Set debug2 = (Set)debug0.getValue();
+            Set<UUID> debug2 = (Set)debug0.getValue(); // MagmaCube - decompile fix
             Set debug3 = debug2.stream().map(DebugEntityNameGenerator::getEntityName).collect(Collectors.toSet());
             int debug4 = 1;
             BeeDebugRenderer.renderTextOverPos(debug3.toString(), debug1, debug4++, -256);
@@ -263,7 +263,7 @@ implements DebugRenderer.SimpleDebugRenderer {
     }
 
     private Map<BlockPos, List<String>> getGhostHives() {
-        HashMap debug1 = Maps.newHashMap();
+        HashMap<BlockPos, List<String>> debug1 = Maps.newHashMap(); // MagmaCube - decompile fix
         for (BeeInfo debug3 : this.beeInfosPerEntity.values()) {
             if (debug3.hivePos == null || this.hives.containsKey(debug3.hivePos)) continue;
             debug1.computeIfAbsent(debug3.hivePos, debug0 -> Lists.newArrayList()).add(debug3.getName());
diff --git a/src/main/java/net/minecraft/client/renderer/debug/BrainDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/BrainDebugRenderer.java
index 7797187093eae1fed301a866eab7c3682ddfbaa1..38c2d91d3d6b519a92862af2521feab4fa0e05ee 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/BrainDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/BrainDebugRenderer.java
@@ -277,7 +277,7 @@ implements DebugRenderer.SimpleDebugRenderer {
     }
 
     private Map<BlockPos, List<String>> getGhostPois() {
-        HashMap debug1 = Maps.newHashMap();
+        HashMap<BlockPos, List<String>> debug1 = Maps.newHashMap(); // MagmaCube - decompile fix
         for (BrainDump debug3 : this.brainDumpsPerEntity.values()) {
             for (BlockPos debug5 : Iterables.concat(debug3.pois, debug3.potentialPois)) {
                 if (this.pois.containsKey(debug5)) continue;
diff --git a/src/main/java/net/minecraft/client/renderer/debug/CaveDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/CaveDebugRenderer.java
index 490afa0b7beacc946ef25293f1813c40136f0930..074b84ce8df57f56ea302d936feb18ed4110b6aa 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/CaveDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/CaveDebugRenderer.java
@@ -22,9 +22,9 @@ public class CaveDebugRenderer implements DebugRenderer.SimpleDebugRenderer
     private final List<BlockPos> startPoses;
     
     public CaveDebugRenderer() {
-        this.tunnelsList = (Map<BlockPos, BlockPos>)Maps.newHashMap();
-        this.thicknessMap = (Map<BlockPos, Float>)Maps.newHashMap();
-        this.startPoses = (List<BlockPos>)Lists.newArrayList();
+        this.tunnelsList = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.thicknessMap = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.startPoses = Lists.newArrayList(); // MagmaCube - decompile fix
     }
     
     public void addTunnel(final BlockPos debug1, final List<BlockPos> debug2, final List<Float> debug3) {
diff --git a/src/main/java/net/minecraft/client/renderer/debug/GameTestDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/GameTestDebugRenderer.java
index f05fcb707c36280131b34a3828de413b64047d99..e4cbb688809279f14b5bab12ec0849c6f3f198e4 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/GameTestDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/GameTestDebugRenderer.java
@@ -15,7 +15,7 @@ public class GameTestDebugRenderer implements DebugRenderer.SimpleDebugRenderer
     private final Map<BlockPos, Marker> markers;
     
     public GameTestDebugRenderer() {
-        this.markers = (Map<BlockPos, Marker>)Maps.newHashMap();
+        this.markers = Maps.newHashMap(); // MagmaCube - decompile fix
     }
     
     public void addMarker(final BlockPos debug1, final int debug2, final String debug3, final int debug4) {
@@ -30,7 +30,7 @@ public class GameTestDebugRenderer implements DebugRenderer.SimpleDebugRenderer
     @Override
     public void render(final PoseStack debug1, final MultiBufferSource debug2, final double debug3, final double debug5, final double debug7) {
         final long debug8 = Util.getMillis();
-        this.markers.entrySet().removeIf(debug2 -> debug8 > debug2.getValue().removeAtTime);
+        this.markers.entrySet().removeIf(debug2l -> debug8 > debug2l.getValue().removeAtTime); // MagmaCube - decompile fix
         this.markers.forEach(this::renderMarker);
     }
     
diff --git a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
index cb63007254a3020461b13f7767fc5bf506bc8886..bc9712baa88f91814cda9b491c78777dc5f523fd 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
@@ -44,14 +44,14 @@ implements DebugRenderer.SimpleDebugRenderer {
         RenderSystem.disableTexture();
         BlockPos debug10 = new BlockPos(debug9.getPosition().x, 0.0, debug9.getPosition().z);
         this.goalSelectors.forEach((debug1, debug2) -> {
-            for (int debug3 = 0; debug3 < debug2.size(); ++debug3) {
-                DebugGoal debug4 = (DebugGoal)debug2.get(debug3);
+            for (int debug3l = 0; debug3l < debug2.size(); ++debug3l) { // MagmaCube - decompile fix
+                DebugGoal debug4 = (DebugGoal)debug2.get(debug3l); // MagmaCube - decompile fix
                 if (!debug10.closerThan(debug4.pos, 160.0)) continue;
-                double debug5 = (double)debug4.pos.getX() + 0.5;
-                double debug7 = (double)debug4.pos.getY() + 2.0 + (double)debug3 * 0.25;
-                double debug9 = (double)debug4.pos.getZ() + 0.5;
+                double debug5l = (double)debug4.pos.getX() + 0.5; // MagmaCube - decompile fix
+                double debug7l = (double)debug4.pos.getY() + 2.0 + (double)debug3l * 0.25; // MagmaCube - decompile fix
+                double debug9l = (double)debug4.pos.getZ() + 0.5; // MagmaCube - decompile fix
                 int debug11 = debug4.isRunning ? -16711936 : -3355444;
-                DebugRenderer.renderFloatingText(debug4.name, debug5, debug7, debug9, debug11);
+                DebugRenderer.renderFloatingText(debug4.name, debug5l, debug7l, debug9l, debug11); // MagmaCube - decompile fix
             }
         });
         RenderSystem.enableDepthTest();
diff --git a/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java
index cc58307b2ad2a2262391f19d502b192bf33dd40b..25bee9af2983c12ec50ff717de94601bf6df4bfb 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java
@@ -24,9 +24,9 @@ public class PathfindingRenderer implements DebugRenderer.SimpleDebugRenderer
     private final Map<Integer, Long> creationMap;
     
     public PathfindingRenderer() {
-        this.pathMap = (Map<Integer, Path>)Maps.newHashMap();
-        this.pathMaxDist = (Map<Integer, Float>)Maps.newHashMap();
-        this.creationMap = (Map<Integer, Long>)Maps.newHashMap();
+        this.pathMap = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.pathMaxDist = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.creationMap = Maps.newHashMap(); // MagmaCube - decompile fix
     }
     
     public void addPath(final int debug1, final Path debug2, final float debug3) {
diff --git a/src/main/java/net/minecraft/client/renderer/debug/VillageSectionsDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/VillageSectionsDebugRenderer.java
index d86e1c3351e4db551bf7200159327d48abd40420..c7ad763d123359abad7b7f47ba9e8c81dee46342 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/VillageSectionsDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/VillageSectionsDebugRenderer.java
@@ -14,7 +14,7 @@ public class VillageSectionsDebugRenderer implements DebugRenderer.SimpleDebugRe
     private final Set<SectionPos> villageSections;
     
     VillageSectionsDebugRenderer() {
-        this.villageSections = (Set<SectionPos>)Sets.newHashSet();
+        this.villageSections = Sets.newHashSet(); // MagmaCube - decompile fix
     }
     
     @Override
@@ -44,9 +44,9 @@ public class VillageSectionsDebugRenderer implements DebugRenderer.SimpleDebugRe
     
     private void doRender(final double debug1, final double debug3, final double debug5) {
         final BlockPos debug6 = new BlockPos(debug1, debug3, debug5);
-        this.villageSections.forEach(debug1 -> {
-            if (debug6.closerThan(debug1.center(), 60.0)) {
-                highlightVillageSection(debug1);
+        this.villageSections.forEach(debug1k -> { // MagmaCube - decompile fix
+            if (debug6.closerThan(debug1k.center(), 60.0)) { // MagmaCube - decompile fix
+                highlightVillageSection(debug1k); // MagmaCube - decompile fix
             }
         });
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
index 9df7fd019447473c143281edeb5a622594837244..cfb63cd2186227f2186f4b7e7daeb8b367e51917 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
@@ -296,11 +296,11 @@ public class EntityRenderDispatcher {
             String debug2 = ((AbstractClientPlayer)debug1).getModelName();
             PlayerRenderer debug3 = this.playerRenderers.get(debug2);
             if (debug3 != null) {
-                return debug3;
+                return (EntityRenderer<? super T>) debug3; // MagmaCube - decompile fix
             }
-            return this.defaultPlayerRenderer;
+            return (EntityRenderer<? super T>) this.defaultPlayerRenderer; // MagmaCube - decompile fix
         }
-        return this.renderers.get(debug1.getType());
+        return (EntityRenderer<? super T>) this.renderers.get(debug1.getType()); // MagmaCube - decompile fix
     }
 
     public void prepare(Level debug1, Camera debug2, Entity debug3) {
@@ -327,12 +327,12 @@ public class EntityRenderDispatcher {
     }
 
     public <E extends Entity> boolean shouldRender(E debug1, Frustum debug2, double debug3, double debug5, double debug7) {
-        EntityRenderer<E> debug9 = this.getRenderer(debug1);
+        EntityRenderer<E> debug9 = (EntityRenderer<E>) this.getRenderer(debug1); // MagmaCube - decompile fix
         return debug9.shouldRender(debug1, debug2, debug3, debug5, debug7);
     }
 
     public <E extends Entity> void render(E debug1, double debug2, double debug4, double debug6, float debug8, float debug9, PoseStack debug10, MultiBufferSource debug11, int debug12) {
-        EntityRenderer<E> debug13 = this.getRenderer(debug1);
+        EntityRenderer<E> debug13 = (EntityRenderer<E>) this.getRenderer(debug1); // MagmaCube - decompile fix
         try {
             double debug21;
             float debug23;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
index 1492101edb2e89c148ae2203fc123f4c1a8c9b3d..57b9300bd867a85f7c9118999594416c2d7894cf 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
@@ -62,7 +62,7 @@ import net.minecraft.world.level.block.StainedGlassPaneBlock;
 public class ItemRenderer
 implements ResourceManagerReloadListener {
     public static final ResourceLocation ENCHANT_GLINT_LOCATION = new ResourceLocation("textures/misc/enchanted_item_glint.png");
-    private static final Set<Item> IGNORED = Sets.newHashSet((Object[])new Item[]{Items.AIR});
+    private static final Set<Item> IGNORED = Sets.newHashSet(new Item[]{Items.AIR}); // MagmaCube - decompile fix
     public float blitOffset;
     private final ItemModelShaper itemModelShaper;
     private final TextureManager textureManager;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ThrownItemRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ThrownItemRenderer.java
index 13918d1ce9aa2c096753cdb40f976a17f23027b3..3384e3d0c953143d3f178fc516227a6f66d6ac5e 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ThrownItemRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ThrownItemRenderer.java
@@ -4,6 +4,7 @@ import net.minecraft.client.renderer.texture.TextureAtlas;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.renderer.texture.OverlayTexture;
 import net.minecraft.client.renderer.block.model.ItemTransforms;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.projectile.ItemSupplier;
 import com.mojang.math.Vector3f;
 import net.minecraft.client.renderer.MultiBufferSource;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/EnergySwirlLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/EnergySwirlLayer.java
index 61ca6d0c583712f33431b74876d11ba7bc74e904..3448eb97a773082b69548f626b7d1b5b589de530 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/EnergySwirlLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/EnergySwirlLayer.java
@@ -4,13 +4,14 @@ import net.minecraft.resources.ResourceLocation;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import net.minecraft.client.renderer.texture.OverlayTexture;
 import net.minecraft.client.renderer.RenderType;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.PowerableMob;
 import net.minecraft.client.renderer.MultiBufferSource;
 import com.mojang.blaze3d.vertex.PoseStack;
 import net.minecraft.client.renderer.entity.RenderLayerParent;
 import net.minecraft.client.model.EntityModel;
 
-public abstract class EnergySwirlLayer<T extends Entity, M extends EntityModel<T>> extends RenderLayer<T, M>
+public abstract class EnergySwirlLayer<T extends Entity, M extends EntityModel<T>> extends RenderLayer<T, M> // MagmaCube - decompile fix
 {
     public EnergySwirlLayer(final RenderLayerParent<T, M> debug1) {
         super(debug1);
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/SaddleLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/SaddleLayer.java
index b9accd6cc9e163e9d0ae0e0f97118400bd925ba6..b6e883f1c0d547d7509cddb76d06da239f2806de 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/SaddleLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/SaddleLayer.java
@@ -3,6 +3,7 @@ package net.minecraft.client.renderer.entity.layers;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import net.minecraft.client.renderer.texture.OverlayTexture;
 import net.minecraft.client.renderer.RenderType;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.Saddleable;
 import net.minecraft.client.renderer.MultiBufferSource;
 import com.mojang.blaze3d.vertex.PoseStack;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/StrayClothingLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/StrayClothingLayer.java
index fef19029556a622b1cab551eafed9c8b86bcf833..c20616b6f059b88147c9149930bbf3a5c8423140 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/StrayClothingLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/StrayClothingLayer.java
@@ -7,6 +7,7 @@ import net.minecraft.client.renderer.entity.RenderLayerParent;
 import net.minecraft.client.model.SkeletonModel;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.client.model.EntityModel;
+import net.minecraft.world.entity.Mob;
 
 public class StrayClothingLayer<T extends Mob, M extends EntityModel<T>> extends RenderLayer<T, M>
 {
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java
index 1d12284c0af87c058ea00fdc58bc239786eac207..8f2984e00c6d13771b2a1a706acba44814043337 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java
@@ -2,12 +2,14 @@ package net.minecraft.client.renderer.entity.layers;
 
 import net.minecraft.Util;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import net.minecraft.client.model.EntityModel;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.server.packs.resources.Resource;
 import java.io.IOException;
 import net.minecraft.server.packs.metadata.MetadataSectionSerializer;
 import net.minecraft.core.DefaultedRegistry;
+import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.npc.VillagerData;
 import net.minecraft.util.Mth;
 import net.minecraft.client.model.VillagerHeadModel;
@@ -27,7 +29,7 @@ import net.minecraft.resources.ResourceLocation;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import net.minecraft.server.packs.resources.ResourceManagerReloadListener;
 
-public class VillagerProfessionLayer<T extends LivingEntity, M extends EntityModel> extends RenderLayer<T, M> implements ResourceManagerReloadListener
+public class VillagerProfessionLayer<T extends LivingEntity, M extends EntityModel<T>> extends RenderLayer<T, M> implements ResourceManagerReloadListener // MagmaCube - decompile fix
 {
     private static final Int2ObjectMap<ResourceLocation> LEVEL_LOCATIONS;
     private final Object2ObjectMap<VillagerType, VillagerMetaDataSection.Hat> typeHatCache;
@@ -74,22 +76,18 @@ public class VillagerProfessionLayer<T extends LivingEntity, M extends EntityMod
     }
     
     public <K> VillagerMetaDataSection.Hat getHatData(final Object2ObjectMap<K, VillagerMetaDataSection.Hat> debug1, final String debug2, final DefaultedRegistry<K> debug3, final K debug4) {
-        Resource debug5;
-        VillagerMetaDataSection debug6;
-        final VillagerMetaDataSection.Hat hat;
-        final Throwable t2;
-        return (VillagerMetaDataSection.Hat)debug1.computeIfAbsent((Object)debug4, debug4 -> {
+        return (VillagerMetaDataSection.Hat)debug1.computeIfAbsent(debug4, debug4l -> { // MagmaCube - decompile fix
+            Throwable t2 = null; // MagmaCube - decompile fix
             try {
-                debug5 = this.resourceManager.getResource(this.getResourceLocation(debug2, debug3.getKey(debug4)));
+                Resource debug5 = this.resourceManager.getResource(this.getResourceLocation(debug2, debug3.getKey(debug4l))); // MagmaCube - decompile fix
                 try {
-                    debug6 = debug5.getMetadata((MetadataSectionSerializer<VillagerMetaDataSection>)VillagerMetaDataSection.SERIALIZER);
+                    VillagerMetaDataSection debug6 = debug5.getMetadata((MetadataSectionSerializer<VillagerMetaDataSection>)VillagerMetaDataSection.SERIALIZER); // MagmaCube - decompile fix
                     if (debug6 != null) {
-                        debug6.getHat();
-                        return hat;
+                        return debug6.getHat(); // MagmaCube - decompile fix
                     }
                 }
                 catch (Throwable t) {
-                    throw t;
+                    t2 = t; // MagmaCube - decompile fix
                 }
                 finally {
                     if (debug5 != null) {
diff --git a/src/main/java/net/minecraft/client/renderer/entity/player/PlayerRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/player/PlayerRenderer.java
index 2a41d3d6aca44c6451367c728a5853d33f40d16f..59b148ad0fbeb7b56943dc5841b890326814a41e 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/player/PlayerRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/player/PlayerRenderer.java
@@ -50,15 +50,15 @@ public class PlayerRenderer extends LivingEntityRenderer<AbstractClientPlayer, P
     
     public PlayerRenderer(final EntityRenderDispatcher debug1, final boolean debug2) {
         super(debug1, new PlayerModel(0.0f, debug2), 0.5f);
-        this.addLayer((RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>)new HumanoidArmorLayer((RenderLayerParent<LivingEntity, HumanoidModel>)this, new HumanoidModel(0.5f), new HumanoidModel(1.0f)));
+        this.addLayer((RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>)new HumanoidArmorLayer(this, new HumanoidModel(0.5f), new HumanoidModel(1.0f))); // MagmaCube - decompile fix
         this.addLayer(new ItemInHandLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>(this));
         this.addLayer(new ArrowLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>(this));
         this.addLayer(new Deadmau5EarsLayer(this));
         this.addLayer(new CapeLayer(this));
         this.addLayer(new CustomHeadLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>(this));
         this.addLayer(new ElytraLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>(this));
-        this.addLayer((RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>)new ParrotOnShoulderLayer((RenderLayerParent<Player, PlayerModel<Player>>)this));
-        this.addLayer((RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>)new SpinAttackEffectLayer((RenderLayerParent<LivingEntity, PlayerModel<LivingEntity>>)this));
+        this.addLayer((RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>)new ParrotOnShoulderLayer(this)); // MagmaCube - decompile fix
+        this.addLayer((RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>)new SpinAttackEffectLayer(this)); // MagmaCube - decompile fix
         this.addLayer(new BeeStingerLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>>(this));
     }
     
@@ -72,11 +72,11 @@ public class PlayerRenderer extends LivingEntityRenderer<AbstractClientPlayer, P
         if (debug1.isCrouching()) {
             return new Vec3(0.0, -0.125, 0.0);
         }
-        return super.getRenderOffset((T)debug1, debug2);
+        return super.getRenderOffset(debug1, debug2); // MagmaCube - decompile fix
     }
     
     private void setModelProperties(final AbstractClientPlayer debug1) {
-        final PlayerModel<AbstractClientPlayer> debug2 = ((LivingEntityRenderer<T, PlayerModel<AbstractClientPlayer>>)this).getModel();
+        final PlayerModel<AbstractClientPlayer> debug2 = this.getModel(); // MagmaCube - decompile fix
         if (debug1.isSpectator()) {
             debug2.setAllVisible(false);
             debug2.head.visible = true;
@@ -152,13 +152,13 @@ public class PlayerRenderer extends LivingEntityRenderer<AbstractClientPlayer, P
             final Objective debug8 = debug7.getDisplayObjective(2);
             if (debug8 != null) {
                 final Score debug9 = debug7.getOrCreatePlayerScore(debug1.getScoreboardName(), debug8);
-                super.renderNameTag((T)debug1, new TextComponent(Integer.toString(debug9.getScore())).append(" ").append(debug8.getDisplayName()), debug3, debug4, debug5);
+                super.renderNameTag(debug1, new TextComponent(Integer.toString(debug9.getScore())).append(" ").append(debug8.getDisplayName()), debug3, debug4, debug5); // MagmaCube - decompile fix
                 final double debug10 = 0.0;
                 this.getFont().getClass();
                 debug3.translate(debug10, 9.0f * 1.15f * 0.025f, 0.0);
             }
         }
-        super.renderNameTag((T)debug1, debug2, debug3, debug4, debug5);
+        super.renderNameTag(debug1, debug2, debug3, debug4, debug5); // MagmaCube - decompile fix
         debug3.popPose();
     }
     
@@ -171,7 +171,7 @@ public class PlayerRenderer extends LivingEntityRenderer<AbstractClientPlayer, P
     }
     
     private void renderHand(final PoseStack debug1, final MultiBufferSource debug2, final int debug3, final AbstractClientPlayer debug4, final ModelPart debug5, final ModelPart debug6) {
-        final PlayerModel<AbstractClientPlayer> debug7 = ((LivingEntityRenderer<T, PlayerModel<AbstractClientPlayer>>)this).getModel();
+        final PlayerModel<AbstractClientPlayer> debug7 = this.getModel(); // MagmaCube - decompile fix
         this.setModelProperties(debug4);
         debug7.attackTime = 0.0f;
         debug7.crouching = false;
diff --git a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java
index f7314e790873cee77f5c6c759f4b60fa596850b7..ed6fdbee71010a123b2a55f03bf1982f6ec9fffa 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java
@@ -147,16 +147,18 @@ implements Tickable {
     }
 
     private Collection<TextureAtlasSprite.Info> getBasicSpriteInfos(ResourceManager debug1, Set<ResourceLocation> debug2) {
-        ArrayList debug3 = Lists.newArrayList();
+        ArrayList<CompletableFuture> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
         ConcurrentLinkedQueue<TextureAtlasSprite.Info> debug4 = new ConcurrentLinkedQueue<TextureAtlasSprite.Info>();
         for (ResourceLocation debug6 : debug2) {
             if (MissingTextureAtlasSprite.getLocation().equals(debug6)) continue;
             debug3.add(CompletableFuture.runAsync(() -> {
                 TextureAtlasSprite.Info debug5;
-                ResourceLocation debug4 = this.getResourceLocation(debug6);
-                try (Resource debug6 = debug1.getResource(debug4);){
-                    PngInfo debug8 = new PngInfo(debug6.toString(), debug6.getInputStream());
-                    AnimationMetadataSection debug9 = debug6.getMetadata(AnimationMetadataSection.SERIALIZER);
+                // MagmaCube start - decompile fix
+                ResourceLocation debug4l = this.getResourceLocation(debug6);
+                try (Resource debug6l = debug1.getResource(debug4l);){
+                    PngInfo debug8 = new PngInfo(debug6l.toString(), debug6l.getInputStream());
+                    AnimationMetadataSection debug9 = debug6l.getMetadata(AnimationMetadataSection.SERIALIZER);
+                    // MagmaCube end - decompile fix
                     if (debug9 == null) {
                         debug9 = AnimationMetadataSection.EMPTY;
                     }
@@ -164,14 +166,14 @@ implements Tickable {
                     debug5 = new TextureAtlasSprite.Info(debug6, (Integer)debug10.getFirst(), (Integer)debug10.getSecond(), debug9);
                 }
                 catch (RuntimeException debug62) {
-                    LOGGER.error("Unable to parse metadata from {} : {}", (Object)debug4, (Object)debug62);
+                    LOGGER.error("Unable to parse metadata from {} : {}", (Object)debug4l, (Object)debug62); // MagmaCube - decompile fix
                     return;
                 }
                 catch (IOException debug63) {
-                    LOGGER.error("Using missing texture, unable to load {} : {}", (Object)debug4, (Object)debug63);
+                    LOGGER.error("Using missing texture, unable to load {} : {}", (Object)debug4l, (Object)debug63); // MagmaCube - decompile fix
                     return;
                 }
-                debug4.add(debug5);
+                debug4.add(debug5); // MagmaCube - decompile fix
             }, Util.backgroundExecutor()));
         }
         CompletableFuture.allOf(debug3.toArray(new CompletableFuture[0])).join();
@@ -180,16 +182,16 @@ implements Tickable {
 
     private List<TextureAtlasSprite> getLoadedSprites(ResourceManager debug1, Stitcher debug2, int debug3) {
         ConcurrentLinkedQueue debug4 = new ConcurrentLinkedQueue();
-        ArrayList debug52 = Lists.newArrayList();
+        ArrayList<CompletableFuture> debug52 = Lists.newArrayList(); // MagmaCube - decompile fix
         debug2.gatherSprites((debug5, debug6, debug7, debug8, debug9) -> {
             if (debug5 == MissingTextureAtlasSprite.info()) {
                 MissingTextureAtlasSprite debug10 = MissingTextureAtlasSprite.newInstance(this, debug3, debug6, debug7, debug8, debug9);
                 debug4.add(debug10);
             } else {
                 debug52.add(CompletableFuture.runAsync(() -> {
-                    int debug9 = this.load(debug1, debug5, debug6, debug7, debug3, debug8, debug9);
-                    if (debug9 != null) {
-                        debug4.add(debug9);
+                    TextureAtlasSprite debug9l = this.load(debug1, debug5, debug6, debug7, debug3, debug8, debug9); // MagmaCube - decompile fix
+                    if (debug9l != null) { // MagmaCube - decompile fix
+                        debug4.add(debug9l); // MagmaCube - decompile fix
                     }
                 }, Util.backgroundExecutor()));
             }
diff --git a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
index a4b130697d4691e429a600fd7700fa1e8a8f32dd..2f92c58a96538b0dda0638d825e75865f5c6a8ab 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
@@ -69,7 +69,7 @@ public class TextureAtlasSprite implements AutoCloseable
             }
         }
         else {
-            final List<AnimationFrame> debug18 = (List<AnimationFrame>)Lists.newArrayList();
+            final List<AnimationFrame> debug18 = Lists.newArrayList(); // MagmaCube - decompile fix
             final int debug19 = debug12 * debug13;
             this.framesX = new int[debug19];
             this.framesY = new int[debug19];
@@ -92,9 +92,8 @@ public class TextureAtlasSprite implements AutoCloseable
             catch (Throwable debug21) {
                 final CrashReport debug20 = CrashReport.forThrowable(debug21, "Generating mipmaps for frame");
                 final CrashReportCategory debug22 = debug20.addCategory("Frame being iterated");
-                final StringBuilder debug23;
                 debug22.setDetail("First frame", () -> {
-                    debug23 = new StringBuilder();
+                    StringBuilder debug23 = new StringBuilder(); // MagmaCube - decompile fix
                     if (debug23.length() > 0) {
                         debug23.append(", ");
                     }
@@ -194,7 +193,7 @@ public class TextureAtlasSprite implements AutoCloseable
     @Override
     public String toString() {
         final int debug1 = this.framesX.length;
-        return "TextureAtlasSprite{name='" + this.info.name + 'Â¥'' + ", frameCount=" + debug1 + ", x=" + this.x + ", y=" + this.y + ", height=" + this.info.height + ", width=" + this.info.width + ", u0=" + this.u0 + ", u1=" + this.u1 + ", v0=" + this.v0 + ", v1=" + this.v1 + '}';
+        return "TextureAtlasSprite{name='" + this.info.name + '\'' + ", frameCount=" + debug1 + ", x=" + this.x + ", y=" + this.y + ", height=" + this.info.height + ", width=" + this.info.width + ", u0=" + this.u0 + ", u1=" + this.u1 + ", v0=" + this.v0 + ", v1=" + this.v1 + '}'; // MagmaCube - decompile fix
     }
     
     public boolean isTransparent(final int debug1, final int debug2, final int debug3) {
diff --git a/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java b/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java
index 950c1c1418f71530d5af5f0abd8e6ef17333f73e..74b2a25144b99de9bf5aaea352782a5f3136c3f5 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java
@@ -177,16 +177,18 @@ AutoCloseable {
         return ((CompletableFuture)CompletableFuture.allOf(TitleScreen.preloadResources(this, debug5), this.preload(AbstractWidget.WIDGETS_LOCATION, debug5)).thenCompose(debug1::wait)).thenAcceptAsync(debug3 -> {
             MissingTextureAtlasSprite.getTexture();
             RealmsMainScreen.updateTeaserImages(this.resourceManager);
-            Iterator<Map.Entry<ResourceLocation, AbstractTexture>> debug4 = this.byPath.entrySet().iterator();
-            while (debug4.hasNext()) {
-                Map.Entry<ResourceLocation, AbstractTexture> debug5 = debug4.next();
-                ResourceLocation debug6 = debug5.getKey();
-                AbstractTexture debug7 = debug5.getValue();
-                if (debug7 == MissingTextureAtlasSprite.getTexture() && !debug6.equals(MissingTextureAtlasSprite.getLocation())) {
-                    debug4.remove();
+            // MagmaCube start - decompile fix
+            Iterator<Map.Entry<ResourceLocation, AbstractTexture>> debug4l = this.byPath.entrySet().iterator();
+            while (debug4l.hasNext()) {
+                Map.Entry<ResourceLocation, AbstractTexture> debug5l = debug4l.next();
+                ResourceLocation debug6l = debug5l.getKey();
+                AbstractTexture debug7 = debug5l.getValue();
+                if (debug7 == MissingTextureAtlasSprite.getTexture() && !debug6l.equals(MissingTextureAtlasSprite.getLocation())) {
+                    debug4l.remove();
                     continue;
                 }
-                debug7.reset(this, debug2, debug6, debug6);
+                debug7.reset(this, debug2, debug6l, debug6);
+                // MagmaCube end - decompile fix
             }
         }, debug0 -> RenderSystem.recordRenderCall(debug0::run));
     }
diff --git a/src/main/java/net/minecraft/client/resources/AssetIndex.java b/src/main/java/net/minecraft/client/resources/AssetIndex.java
index 466190ac1450075709695c4e52e29130fbcc5a62..7b1f63f0e60777a26261e35f9a64a9ad53a8bfc7 100644
--- a/src/main/java/net/minecraft/client/resources/AssetIndex.java
+++ b/src/main/java/net/minecraft/client/resources/AssetIndex.java
@@ -91,8 +91,8 @@ public class AssetIndex {
 
     public Collection<ResourceLocation> getFiles(String debug1, String debug2, int debug32, Predicate<String> debug4) {
         return this.namespacedFiles.keySet().stream().filter(debug3 -> {
-            String debug4 = debug3.getPath();
-            return debug3.getNamespace().equals(debug2) && !debug4.endsWith(".mcmeta") && debug4.startsWith(debug1 + "/") && debug4.test(debug4);
+            String debug4l = debug3.getPath(); // MagmaCube - decompile fix
+            return debug3.getNamespace().equals(debug2) && !debug4l.endsWith(".mcmeta") && debug4l.startsWith(debug1 + "/") && debug4.test(debug4l); // MagmaCube - decompile fix
         }).collect(Collectors.toList());
     }
 }
diff --git a/src/main/java/net/minecraft/client/resources/ClientPackSource.java b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
index 67a805e1395f44bded1d00d7294543f436af5051..2ca37167516e1bcc8a7ffdfcf93a7777a6bd080c 100644
--- a/src/main/java/net/minecraft/client/resources/ClientPackSource.java
+++ b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
@@ -115,7 +115,7 @@ implements RepositorySource {
         String debug4 = SHA1.matcher(debug22).matches() ? debug22 : "";
         this.downloadLock.lock();
         try {
-            CompletableFuture<String> debug6;
+            CompletableFuture<?> debug6; // MagmaCube - decompile fix
             this.clearServerPack();
             this.clearOldDownloads();
             File debug5 = new File(this.serverPackDir, debug32);
@@ -135,7 +135,7 @@ implements RepositorySource {
                 return this.setServerPack(debug5, PackSource.SERVER);
             })).whenComplete((debug1, debug2) -> {
                 if (debug2 != null) {
-                    LOGGER.warn("Pack application failed: {}, deleting file {}", (Object)debug2.getMessage(), (Object)debug5);
+                    LOGGER.warn("Pack application failed: {}, deleting file {}", ((Throwable) debug2).getMessage(), (Object)debug5); // MagmaCube - decompile fix
                     ClientPackSource.deleteQuietly(debug5);
                 }
             });
@@ -196,7 +196,7 @@ implements RepositorySource {
 
     private void clearOldDownloads() {
         try {
-            ArrayList debug1 = Lists.newArrayList((Iterable)FileUtils.listFiles((File)this.serverPackDir, (IOFileFilter)TrueFileFilter.TRUE, null));
+            ArrayList<File> debug1 = Lists.newArrayList((Iterable)FileUtils.listFiles((File)this.serverPackDir, (IOFileFilter)TrueFileFilter.TRUE, null)); // MagmaCube - decompile fix
             debug1.sort(LastModifiedFileComparator.LASTMODIFIED_REVERSE);
             int debug2 = 0;
             for (File debug4 : debug1) {
diff --git a/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java b/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java
index 89e42f1984734fcb31f37051a4256e0c75cd0604..cccf2921a763c1be7b053695c9c10e1240752c57 100644
--- a/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java
+++ b/src/main/java/net/minecraft/client/resources/PackResourcesAdapterV4.java
@@ -44,7 +44,7 @@ implements PackResources {
         debug0.put("textures/entity/chest/christmas.png", new Pair((Object)ChestType.SINGLE, (Object)new ResourceLocation("textures/entity/chest/christmas.png")));
         debug0.put("textures/entity/chest/ender.png", new Pair((Object)ChestType.SINGLE, (Object)new ResourceLocation("textures/entity/chest/ender.png")));
     });
-    private static final List<String> PATTERNS = Lists.newArrayList((Object[])new String[]{"base", "border", "bricks", "circle", "creeper", "cross", "curly_border", "diagonal_left", "diagonal_right", "diagonal_up_left", "diagonal_up_right", "flower", "globe", "gradient", "gradient_up", "half_horizontal", "half_horizontal_bottom", "half_vertical", "half_vertical_right", "mojang", "rhombus", "skull", "small_stripes", "square_bottom_left", "square_bottom_right", "square_top_left", "square_top_right", "straight_cross", "stripe_bottom", "stripe_center", "stripe_downleft", "stripe_downright", "stripe_left", "stripe_middle", "stripe_right", "stripe_top", "triangle_bottom", "triangle_top", "triangles_bottom", "triangles_top"});
+    private static final List<String> PATTERNS = Lists.newArrayList(new String[]{"base", "border", "bricks", "circle", "creeper", "cross", "curly_border", "diagonal_left", "diagonal_right", "diagonal_up_left", "diagonal_up_right", "flower", "globe", "gradient", "gradient_up", "half_horizontal", "half_horizontal_bottom", "half_vertical", "half_vertical_right", "mojang", "rhombus", "skull", "small_stripes", "square_bottom_left", "square_bottom_right", "square_top_left", "square_top_right", "straight_cross", "stripe_bottom", "stripe_center", "stripe_downleft", "stripe_downright", "stripe_left", "stripe_middle", "stripe_right", "stripe_top", "triangle_bottom", "triangle_top", "triangles_bottom", "triangles_top"}); // MagmaCube - decompile fix
     private static final Set<String> SHIELDS = PATTERNS.stream().map(debug0 -> "textures/entity/shield/" + debug0 + ".png").collect(Collectors.toSet());
     private static final Set<String> BANNERS = PATTERNS.stream().map(debug0 -> "textures/entity/banner/" + debug0 + ".png").collect(Collectors.toSet());
     public static final ResourceLocation SHIELD_BASE = new ResourceLocation("textures/entity/shield_base.png");
@@ -150,12 +150,12 @@ implements PackResources {
     public static InputStream fixPattern(InputStream debug0, InputStream debug1, int debug2, int debug3, int debug4, int debug5, int debug6) throws IOException {
         try (NativeImage debug7 = NativeImage.read(debug0);){
             Throwable throwable = null;
-            try (NativeImage debug9 = NativeImage.read(debug1);){
+            try (NativeImage debug9 = NativeImage.read(debug1);) { // MagmaCube - decompile fix
                 int debug11 = debug7.getWidth();
                 int debug12 = debug7.getHeight();
                 if (debug11 == debug9.getWidth()) {
                     if (debug12 == debug9.getHeight()) {
-                        try (NativeImage debug13 = new NativeImage(debug11, debug12, true);){
+                        try (NativeImage debug13 = new NativeImage(debug11, debug12, true);) { // MagmaCube - decompile fix
                             int debug15 = debug11 / debug2;
                             for (int debug16 = debug4 * debug15; debug16 < debug6 * debug15; ++debug16) {
                                 for (int debug17 = debug3 * debug15; debug17 < debug5 * debug15; ++debug17) {
@@ -169,117 +169,61 @@ implements PackResources {
                         }
                     }
                 }
-                {
-                    catch (Throwable throwable2) {
-                        throwable = throwable2;
-                        throw throwable2;
-                    }
-                    catch (Throwable throwable3) {
-                        throw throwable3;
-                    }
-                }
             }
         }
+        return null; // MagmaCube - decompile fix
     }
 
     /*
      * Exception decompiling
      */
     public static InputStream fixConduitEyeTexture(InputStream debug0) throws IOException {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [0[TRYBLOCK]], but top level block is 4[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - decompile fix
+        try (NativeImage debug1 = NativeImage.read(debug0)) {
+            int debug3 = debug1.getWidth();
+            int debug4 = debug1.getHeight();
+        }
+        return debug0; // todo: fix code
+        // MagmaCube end - decompile fix
     }
 
     /*
      * Exception decompiling
      */
     public static InputStream fixLeftChest(InputStream debug0) throws IOException {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [0[TRYBLOCK]], but top level block is 4[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - decompile fix
+        try (NativeImage debug1 = NativeImage.read(debug0)) {
+            int debug3 = debug1.getWidth();
+            int debug4 = debug1.getHeight();
+        }
+        return debug0; // todo: fix code
+        // MagmaCube end - decompile fix
     }
 
     /*
      * Exception decompiling
      */
     public static InputStream fixRightChest(InputStream debug0) throws IOException {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [0[TRYBLOCK]], but top level block is 4[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - decompile fix
+        try (NativeImage debug1 = NativeImage.read(debug0)) {
+            int debug3 = debug1.getWidth();
+            int debug4 = debug1.getHeight();
+        }
+        return debug0; // todo: fix code
+        // MagmaCube end - decompile fix
     }
 
     /*
      * Exception decompiling
      */
     public static InputStream fixSingleChest(InputStream debug0) throws IOException {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [0[TRYBLOCK]], but top level block is 4[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - decompile fix
+        try (NativeImage debug1 = NativeImage.read(debug0)) {
+            int debug3 = debug1.getWidth();
+            int debug4 = debug1.getHeight();
+        }
+        return debug0; // todo: fix code
+        // MagmaCube end - decompile fix
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/client/resources/PaintingTextureManager.java b/src/main/java/net/minecraft/client/resources/PaintingTextureManager.java
index 94edd26606b7b4931a2fcd53164eb7df0f2008ea..9511f4dba7cf0e951b1be5c21c9f5f13b4c814ca 100644
--- a/src/main/java/net/minecraft/client/resources/PaintingTextureManager.java
+++ b/src/main/java/net/minecraft/client/resources/PaintingTextureManager.java
@@ -17,7 +17,7 @@ public class PaintingTextureManager extends TextureAtlasHolder
     
     @Override
     protected Stream<ResourceLocation> getResourcesToLoad() {
-        return Stream.concat(Registry.MOTIVE.keySet().stream(), (Stream<? extends ResourceLocation>)Stream.of((T)PaintingTextureManager.BACK_SPRITE_LOCATION));
+        return Stream.concat(Registry.MOTIVE.keySet().stream(), (Stream<? extends ResourceLocation>)Stream.of(PaintingTextureManager.BACK_SPRITE_LOCATION)); // MagmaCube - decompile fix
     }
     
     public TextureAtlasSprite get(final Motive debug1) {
diff --git a/src/main/java/net/minecraft/client/resources/SkinManager.java b/src/main/java/net/minecraft/client/resources/SkinManager.java
index 03905b54d692eed731fe6a4fad9c8d58b45e7de7..5aa9a1413d184ca89452c73a0958b65e4744ec53 100644
--- a/src/main/java/net/minecraft/client/resources/SkinManager.java
+++ b/src/main/java/net/minecraft/client/resources/SkinManager.java
@@ -59,11 +59,11 @@ public class SkinManager {
         this.textureManager = debug1;
         this.skinsDirectory = debug2;
         this.sessionService = debug3;
-        this.insecureSkinCache = CacheBuilder.newBuilder().expireAfterAccess(15L, TimeUnit.SECONDS).build((CacheLoader)new CacheLoader<String, Map<MinecraftProfileTexture.Type, MinecraftProfileTexture>>(){
+        this.insecureSkinCache = CacheBuilder.newBuilder().expireAfterAccess(15L, TimeUnit.SECONDS).build(new CacheLoader<String, Map<MinecraftProfileTexture.Type, MinecraftProfileTexture>>(){ // MagmaCube - decompile fix
 
             public Map<MinecraftProfileTexture.Type, MinecraftProfileTexture> load(String debug1) {
                 GameProfile debug2 = new GameProfile(null, "dummy_mcdummyface");
-                debug2.getProperties().put((Object)"textures", (Object)new Property("textures", debug1, ""));
+                debug2.getProperties().put("textures", new Property("textures", debug1, "")); // MagmaCube - decompile fix
                 try {
                     return debug3.getTextures(debug2, false);
                 }
@@ -71,10 +71,6 @@ public class SkinManager {
                     return ImmutableMap.of();
                 }
             }
-
-            public /* synthetic */ Object load(Object object) throws Exception {
-                return this.load((String)object);
-            }
         });
     }
 
@@ -105,31 +101,31 @@ public class SkinManager {
 
     public void registerSkins(GameProfile debug1, SkinTextureCallback debug2, boolean debug3) {
         Runnable debug4 = () -> {
-            HashMap debug4 = Maps.newHashMap();
+            HashMap debug4l = Maps.newHashMap(); // MagmaCube - decompile fix
             try {
-                debug4.putAll(this.sessionService.getTextures(debug1, debug3));
+                debug4l.putAll(this.sessionService.getTextures(debug1, debug3)); // MagmaCube - decompile fix
             }
             catch (InsecureTextureException insecureTextureException) {
                 // empty catch block
             }
-            if (debug4.isEmpty()) {
+            if (debug4l.isEmpty()) { // MagmaCube - decompile fix
                 debug1.getProperties().clear();
                 if (debug1.getId().equals(Minecraft.getInstance().getUser().getGameProfile().getId())) {
                     debug1.getProperties().putAll((Multimap)Minecraft.getInstance().getProfileProperties());
-                    debug4.putAll(this.sessionService.getTextures(debug1, false));
+                    debug4l.putAll(this.sessionService.getTextures(debug1, false)); // MagmaCube - decompile fix
                 } else {
                     this.sessionService.fillProfileProperties(debug1, debug3);
                     try {
-                        debug4.putAll(this.sessionService.getTextures(debug1, debug3));
+                        debug4l.putAll(this.sessionService.getTextures(debug1, debug3)); // MagmaCube - decompile fix
                     }
                     catch (InsecureTextureException insecureTextureException) {
                         // empty catch block
                     }
                 }
             }
-            Minecraft.getInstance().execute(() -> RenderSystem.recordRenderCall(() -> ImmutableList.of((Object)MinecraftProfileTexture.Type.SKIN, (Object)MinecraftProfileTexture.Type.CAPE).forEach(debug3 -> {
-                if (debug4.containsKey(debug3)) {
-                    this.registerTexture((MinecraftProfileTexture)debug4.get(debug3), (MinecraftProfileTexture.Type)debug3, debug2);
+            Minecraft.getInstance().execute(() -> RenderSystem.recordRenderCall(() -> ImmutableList.of(MinecraftProfileTexture.Type.SKIN, MinecraftProfileTexture.Type.CAPE).forEach(debug3l -> { // MagmaCube - decompile fix
+                if (debug4l.containsKey(debug3l)) { // MagmaCube - decompile fix
+                    this.registerTexture((MinecraftProfileTexture)debug4l.get(debug3l), (MinecraftProfileTexture.Type)debug3l, debug2); // MagmaCube - decompile fix
                 }
             })));
         };
@@ -137,11 +133,11 @@ public class SkinManager {
     }
 
     public Map<MinecraftProfileTexture.Type, MinecraftProfileTexture> getInsecureSkinInformation(GameProfile debug1) {
-        Property debug2 = (Property)Iterables.getFirst((Iterable)debug1.getProperties().get((Object)"textures"), null);
+        Property debug2 = (Property)Iterables.getFirst((Iterable)debug1.getProperties().get("textures"), null); // MagmaCube - decompile fix
         if (debug2 == null) {
             return ImmutableMap.of();
         }
-        return (Map)this.insecureSkinCache.getUnchecked((Object)debug2.getValue());
+        return (Map)this.insecureSkinCache.getUnchecked(debug2.getValue()); // MagmaCube - decompile fix
     }
 
     public static interface SkinTextureCallback {
diff --git a/src/main/java/net/minecraft/client/resources/SplashManager.java b/src/main/java/net/minecraft/client/resources/SplashManager.java
index d002d83a198db2d699357b29172eebccca922591..0f3d5947d53c3e785adb2b04165e4fbdf6376832 100644
--- a/src/main/java/net/minecraft/client/resources/SplashManager.java
+++ b/src/main/java/net/minecraft/client/resources/SplashManager.java
@@ -8,14 +8,19 @@
 package net.minecraft.client.resources;
 
 import com.google.common.collect.Lists;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.List;
-import java.util.Locale;
-import java.util.Random;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
+import java.util.*;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+
+import net.minecraft.client.Minecraft;
 import net.minecraft.client.User;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.packs.resources.Resource;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.server.packs.resources.SimplePreparableReloadListener;
 import net.minecraft.util.profiling.ProfilerFiller;
@@ -36,25 +41,14 @@ extends SimplePreparableReloadListener<List<String>> {
      */
     @Override
     protected List<String> prepare(ResourceManager debug1, ProfilerFiller debug2) {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 5[TRYBLOCK]
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - decompile fix
+        try(Resource debug3 = Minecraft.getInstance().getResourceManager().getResource(SPLASHES_LOCATION);
+            BufferedReader debug5 = new BufferedReader(new InputStreamReader(debug3.getInputStream(), StandardCharsets.UTF_8))) {
+            return (List)debug5.lines().map(String::trim).filter(debug0 -> (debug0.hashCode() != 125780783)).collect(Collectors.toList());
+        } catch (IOException debug3) {
+            return Collections.emptyList();
+        }
+        // MagmaCube end - decompile fix
     }
 
     @Override
@@ -85,12 +79,7 @@ extends SimplePreparableReloadListener<List<String>> {
         return this.splashes.get(RANDOM.nextInt(this.splashes.size()));
     }
 
-    @Override
-    protected /* synthetic */ Object prepare(ResourceManager resourceManager, ProfilerFiller profilerFiller) {
-        return this.prepare(resourceManager, profilerFiller);
-    }
-
-    private static /* synthetic */ boolean lambda$prepare$0(String debug0) {
+    private static /* synthetic */ boolean _lambda$prepare$0(String debug0) {
         return debug0.hashCode() != 125780783;
     }
 }
diff --git a/src/main/java/net/minecraft/client/resources/language/LanguageManager.java b/src/main/java/net/minecraft/client/resources/language/LanguageManager.java
index 6aecc2ac62c5e9285e1290b87479f76ecf07be3c..0ff3639fa130ff34d2e9043a73fceb4355415bc3 100644
--- a/src/main/java/net/minecraft/client/resources/language/LanguageManager.java
+++ b/src/main/java/net/minecraft/client/resources/language/LanguageManager.java
@@ -28,37 +28,30 @@ public class LanguageManager implements ResourceManagerReloadListener
     private LanguageInfo currentLanguage;
     
     public LanguageManager(final String debug1) {
-        this.languages = (Map<String, LanguageInfo>)ImmutableMap.of((Object)"en_us", (Object)LanguageManager.DEFAULT_LANGUAGE);
+        this.languages = (Map<String, LanguageInfo>)ImmutableMap.of("en_us", LanguageManager.DEFAULT_LANGUAGE); // MagmaCube - decompile fix
         this.currentLanguage = LanguageManager.DEFAULT_LANGUAGE;
         this.currentCode = debug1;
     }
     
     private static Map<String, LanguageInfo> extractLanguages(final Stream<PackResources> debug0) {
-        final Map<String, LanguageInfo> debug2 = (Map<String, LanguageInfo>)Maps.newHashMap();
-        LanguageMetadataSection debug3;
-        final Iterator<LanguageInfo> iterator;
-        LanguageInfo debug4;
-        final Map<String, LanguageInfo> map;
-        final Exception ex;
-        Exception debug5;
+        final Map<String, LanguageInfo> map = Maps.newHashMap(); // MagmaCube - decompile fix
         debug0.forEach(debug1 -> {
             try {
-                debug3 = debug1.getMetadataSection((MetadataSectionSerializer<LanguageMetadataSection>)LanguageMetadataSection.SERIALIZER);
+                LanguageMetadataSection debug3 = debug1.getMetadataSection((MetadataSectionSerializer<LanguageMetadataSection>)LanguageMetadataSection.SERIALIZER); // MagmaCube - decompile fix
                 if (debug3 != null) {
-                    debug3.getLanguages().iterator();
+                    Iterator<LanguageInfo> iterator = debug3.getLanguages().iterator(); // MagmaCube - decompile fix
                     while (iterator.hasNext()) {
-                        debug4 = iterator.next();
+                        LanguageInfo debug4 = iterator.next(); // MagmaCube - decompile fix
                         map.putIfAbsent(debug4.getCode(), debug4);
                     }
                 }
             }
             catch (RuntimeException | IOException ex2) {
-                debug5 = ex;
-                LanguageManager.LOGGER.warn("Unable to parse language metadata section of resourcepack: {}", (Object)debug1.getName(), (Object)debug5);
+                LanguageManager.LOGGER.warn("Unable to parse language metadata section of resourcepack: {}", (Object)debug1.getName(), ex2); // MagmaCube - decompile fix
             }
             return;
         });
-        return (Map<String, LanguageInfo>)ImmutableMap.copyOf((Map)debug2);
+        return (Map<String, LanguageInfo>)ImmutableMap.copyOf(map); // MagmaCube - decompile fix
     }
     
     @Override
@@ -66,7 +59,7 @@ public class LanguageManager implements ResourceManagerReloadListener
         this.languages = extractLanguages(debug1.listPacks());
         final LanguageInfo debug2 = this.languages.getOrDefault("en_us", LanguageManager.DEFAULT_LANGUAGE);
         this.currentLanguage = this.languages.getOrDefault(this.currentCode, debug2);
-        final List<LanguageInfo> debug3 = (List<LanguageInfo>)Lists.newArrayList((Object[])new LanguageInfo[] { debug2 });
+        final List<LanguageInfo> debug3 = (List<LanguageInfo>)Lists.newArrayList(new LanguageInfo[] { debug2 }); // MagmaCube - decompile fix
         if (this.currentLanguage != debug2) {
             debug3.add(this.currentLanguage);
         }
diff --git a/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSection.java b/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSection.java
index 5b62383708ac8f34f6f69ad947e8e07643e51bbb..c820a5a19dd79125294f47fd13b39a8a5225815a 100644
--- a/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSection.java
+++ b/src/main/java/net/minecraft/client/resources/metadata/animation/AnimationMetadataSection.java
@@ -42,16 +42,16 @@ public class AnimationMetadataSection
     private Pair<Integer, Integer> calculateFrameSize(final int debug1, final int debug2) {
         if (this.frameWidth != -1) {
             if (this.frameHeight != -1) {
-                return (Pair<Integer, Integer>)Pair.of((Object)this.frameWidth, (Object)this.frameHeight);
+                return (Pair<Integer, Integer>)Pair.of(this.frameWidth, this.frameHeight); // MagmaCube - decompile fix
             }
-            return (Pair<Integer, Integer>)Pair.of((Object)this.frameWidth, (Object)debug2);
+            return (Pair<Integer, Integer>)Pair.of(this.frameWidth, debug2); // MagmaCube - decompile fix
         }
         else {
             if (this.frameHeight != -1) {
-                return (Pair<Integer, Integer>)Pair.of((Object)debug1, (Object)this.frameHeight);
+                return (Pair<Integer, Integer>)Pair.of(debug1, this.frameHeight); // MagmaCube - decompile fix
             }
             final int debug3 = Math.min(debug1, debug2);
-            return (Pair<Integer, Integer>)Pair.of((Object)debug3, (Object)debug3);
+            return (Pair<Integer, Integer>)Pair.of(debug3, debug3); // MagmaCube - decompile fix
         }
     }
     
@@ -92,7 +92,7 @@ public class AnimationMetadataSection
     }
     
     public Set<Integer> getUniqueFrameIndices() {
-        final Set<Integer> debug1 = (Set<Integer>)Sets.newHashSet();
+        final Set<Integer> debug1 = Sets.newHashSet(); // MagmaCube - decompile fix
         for (final AnimationFrame debug2 : this.frames) {
             debug1.add(debug2.getIndex());
         }
@@ -104,7 +104,7 @@ public class AnimationMetadataSection
         EMPTY = new AnimationMetadataSection(Lists.newArrayList(), -1, -1, 1, false) {
             @Override
             public Pair<Integer, Integer> getFrameSize(final int debug1, final int debug2) {
-                return (Pair<Integer, Integer>)Pair.of((Object)debug1, (Object)debug2);
+                return (Pair<Integer, Integer>)Pair.of(debug1, debug2); // MagmaCube - decompile fix
             }
         };
     }
diff --git a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
index 8208ea3fadd38e09b2726b8f234a24a5b261a3e6..b40895e102ef36e230208b0f5b4c5cac228966e0 100644
--- a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
+++ b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
@@ -137,19 +137,19 @@ public class ModelBakery {
     public static final ModelResourceLocation MISSING_MODEL_LOCATION = new ModelResourceLocation("builtin/missing", "missing");
     private static final String MISSING_MODEL_LOCATION_STRING = MISSING_MODEL_LOCATION.toString();
     @VisibleForTesting
-    public static final String MISSING_MODEL_MESH = ("{    'textures': {       'particle': '" + MissingTextureAtlasSprite.getLocation().getPath() + "',       'missingno': '" + MissingTextureAtlasSprite.getLocation().getPath() + "'    },    'elements': [         {  'from': [ 0, 0, 0 ],            'to': [ 16, 16, 16 ],            'faces': {                'down':  { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'down',  'texture': '#missingno' },                'up':    { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'up',    'texture': '#missingno' },                'north': { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'north', 'texture': '#missingno' },                'south': { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'south', 'texture': '#missingno' },                'west':  { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'west',  'texture': '#missingno' },                'east':  { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'east',  'texture': '#missingno' }            }        }    ]}").replace('Â¥'', 'Â¥"');
+    public static final String MISSING_MODEL_MESH = ("{    'textures': {       'particle': '" + MissingTextureAtlasSprite.getLocation().getPath() + "',       'missingno': '" + MissingTextureAtlasSprite.getLocation().getPath() + "'    },    'elements': [         {  'from': [ 0, 0, 0 ],            'to': [ 16, 16, 16 ],            'faces': {                'down':  { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'down',  'texture': '#missingno' },                'up':    { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'up',    'texture': '#missingno' },                'north': { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'north', 'texture': '#missingno' },                'south': { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'south', 'texture': '#missingno' },                'west':  { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'west',  'texture': '#missingno' },                'east':  { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'east',  'texture': '#missingno' }            }        }    ]}").replace('\'', '\"');
     private static final Map<String, String> BUILTIN_MODELS = Maps.newHashMap((Map)ImmutableMap.of((Object)"missing", (Object)MISSING_MODEL_MESH));
     private static final Splitter COMMA_SPLITTER = Splitter.on((char)',');
     private static final Splitter EQUAL_SPLITTER = Splitter.on((char)'=').limit(2);
-    public static final BlockModel GENERATION_MARKER = Util.make(BlockModel.fromString("{Â¥"gui_lightÂ¥": Â¥"frontÂ¥"}"), debug0 -> {
+    public static final BlockModel GENERATION_MARKER = Util.make(BlockModel.fromString("{\"gui_light\": \"front\"}"), debug0 -> {
         debug0.name = "generation marker";
     });
-    public static final BlockModel BLOCK_ENTITY_MARKER = Util.make(BlockModel.fromString("{Â¥"gui_lightÂ¥": Â¥"sideÂ¥"}"), debug0 -> {
+    public static final BlockModel BLOCK_ENTITY_MARKER = Util.make(BlockModel.fromString("{\"gui_light\": \"side\"}"), debug0 -> {
         debug0.name = "block entity marker";
     });
-    private static final StateDefinition<Block, BlockState> ITEM_FRAME_FAKE_DEFINITION = new StateDefinition.Builder(Blocks.AIR).add(BooleanProperty.create("map")).create(Block::defaultBlockState, BlockState::new);
+    private static final StateDefinition<Block, BlockState> ITEM_FRAME_FAKE_DEFINITION = new StateDefinition.Builder<Block, BlockState>(Blocks.AIR).add(new Property[]{BooleanProperty.create("map")}).create(Block::defaultBlockState, BlockState::new); // MagmaCube - decompile fix
     private static final ItemModelGenerator ITEM_MODEL_GENERATOR = new ItemModelGenerator();
-    private static final Map<ResourceLocation, StateDefinition<Block, BlockState>> STATIC_DEFINITIONS = ImmutableMap.of((Object)new ResourceLocation("item_frame"), ITEM_FRAME_FAKE_DEFINITION);
+    private static final Map<ResourceLocation, StateDefinition<Block, BlockState>> STATIC_DEFINITIONS = ImmutableMap.of(new ResourceLocation("item_frame"), ITEM_FRAME_FAKE_DEFINITION); // MagmaCube - decompile fix
     private final ResourceManager resourceManager;
     @Nullable
     private AtlasSet atlasSet;
@@ -189,8 +189,8 @@ public class ModelBakery {
         debug3.popPush("special");
         this.loadTopLevel(new ModelResourceLocation("minecraft:trident_in_hand#inventory"));
         debug3.popPush("textures");
-        LinkedHashSet debug5 = Sets.newLinkedHashSet();
-        Set set = this.topLevelModels.values().stream().flatMap(debug2 -> debug2.getMaterials(this::getModel, debug5).stream()).collect(Collectors.toSet());
+        Set<Pair<String, String>> debug5 = Sets.newLinkedHashSet(); // MagmaCube - decompile fix
+        Set<Material> set = this.topLevelModels.values().stream().flatMap(debug2 -> debug2.getMaterials(this::getModel, debug5).stream()).collect(Collectors.toSet()); // MagmaCube - decompile fix
         set.addAll(UNREFERENCED_TEXTURES);
         debug5.stream().filter(debug0 -> !((String)debug0.getSecond()).equals(MISSING_MODEL_LOCATION_STRING)).forEach(debug0 -> LOGGER.warn("Unable to resolve texture reference: {} in {}", debug0.getFirst(), debug0.getSecond()));
         Map<ResourceLocation, List<Material>> debug7 = set.stream().collect(Collectors.groupingBy(Material::atlasLocation));
@@ -199,7 +199,7 @@ public class ModelBakery {
         for (Map.Entry<ResourceLocation, List<Material>> debug9 : debug7.entrySet()) {
             TextureAtlas debug10 = new TextureAtlas(debug9.getKey());
             TextureAtlas.Preparations debug11 = debug10.prepareToStitch(this.resourceManager, debug9.getValue().stream().map(Material::texture), debug3, debug4);
-            this.atlasPreparations.put(debug9.getKey(), (Pair<TextureAtlas, TextureAtlas.Preparations>)Pair.of((Object)debug10, (Object)debug11));
+            this.atlasPreparations.put(debug9.getKey(), (Pair<TextureAtlas, TextureAtlas.Preparations>)Pair.of(debug10, debug11)); // MagmaCube - decompile fix
         }
         debug3.pop();
     }
@@ -217,15 +217,15 @@ public class ModelBakery {
         this.atlasSet = new AtlasSet(this.atlasPreparations.values().stream().map(Pair::getFirst).collect(Collectors.toList()));
         debug2.popPush("baking");
         this.topLevelModels.keySet().forEach(debug1 -> {
-            BakedModel debug2 = null;
+            BakedModel debug22 = null; // MagmaCube - decompile fix
             try {
-                debug2 = this.bake((ResourceLocation)debug1, BlockModelRotation.X0_Y0);
+                debug22 = this.bake((ResourceLocation)debug1, BlockModelRotation.X0_Y0); // MagmaCube - decompile fix
             }
             catch (Exception debug3) {
                 LOGGER.warn("Unable to bake model: '{}': {}", debug1, (Object)debug3);
             }
-            if (debug2 != null) {
-                this.bakedTopLevelModels.put((ResourceLocation)debug1, debug2);
+            if (debug22 != null) { // MagmaCube - decompile fix
+                this.bakedTopLevelModels.put((ResourceLocation)debug1, debug22); // MagmaCube - decompile fix
             }
         });
         debug2.pop();
@@ -233,7 +233,7 @@ public class ModelBakery {
     }
 
     private static Predicate<BlockState> predicate(StateDefinition<Block, BlockState> debug0, String debug1) {
-        HashMap debug22 = Maps.newHashMap();
+        Map<Property<?>, Comparable<?>> debug22 = Maps.newHashMap(); // MagmaCube - decompile fix
         for (String debug4 : COMMA_SPLITTER.split((CharSequence)debug1)) {
             Iterator debug5 = EQUAL_SPLITTER.split((CharSequence)debug4).iterator();
             if (!debug5.hasNext()) continue;
@@ -241,7 +241,7 @@ public class ModelBakery {
             Property<?> debug7 = debug0.getProperty(debug6);
             if (debug7 != null && debug5.hasNext()) {
                 String debug8 = (String)debug5.next();
-                Object debug9 = ModelBakery.getValueHelper(debug7, debug8);
+                Comparable<?> debug9 = ModelBakery.getValueHelper(debug7, debug8); // MagmaCube - decompile fix
                 if (debug9 != null) {
                     debug22.put(debug7, debug9);
                     continue;
@@ -318,14 +318,14 @@ public class ModelBakery {
             StateDefinition debug4 = Optional.ofNullable(STATIC_DEFINITIONS.get(debug3)).orElseGet(() -> Registry.BLOCK.get(debug3).getStateDefinition());
             this.context.setDefinition(debug4);
             ImmutableList debug52 = ImmutableList.copyOf(this.blockColors.getColoringProperties((Block)debug4.getOwner()));
-            ImmutableList debug62 = debug4.getPossibleStates();
-            HashMap debug7 = Maps.newHashMap();
+            ImmutableList<BlockState> debug62 = debug4.getPossibleStates(); // MagmaCube - decompile fix
+            HashMap<ModelResourceLocation, BlockState> debug7 = Maps.newHashMap(); // MagmaCube - decompile fix
             debug62.forEach(debug2 -> debug7.put(BlockModelShaper.stateToModelLocation(debug3, debug2), debug2));
             HashMap debug8 = Maps.newHashMap();
             ResourceLocation debug9 = new ResourceLocation(debug12.getNamespace(), "blockstates/" + debug12.getPath() + ".json");
             UnbakedModel debug10 = this.unbakedCache.get(MISSING_MODEL_LOCATION);
-            ModelGroupKey debug11 = new ModelGroupKey((List<UnbakedModel>)ImmutableList.of((Object)debug10), (List<Object>)ImmutableList.of());
-            Pair debug122 = Pair.of((Object)debug10, () -> debug11);
+            ModelGroupKey debug11 = new ModelGroupKey((List<UnbakedModel>)ImmutableList.of(debug10), (List<Object>)ImmutableList.of()); // MagmaCube - decompile fix
+            Pair<UnbakedModel, Supplier<ModelGroupKey>> debug122 = Pair.of(debug10, () -> debug11); // MagmaCube - decompile fix
             try {
                 List debug13;
                 try {
@@ -334,36 +334,38 @@ public class ModelBakery {
                             Pair pair = Pair.of((Object)debug1.getSourceName(), (Object)BlockModelDefinition.fromStream(this.context, new InputStreamReader(debug2, StandardCharsets.UTF_8)));
                             return pair;
                         }
-                        catch (Exception debug22) {
-                            throw new BlockStateDefinitionException(String.format("Exception loading blockstate definition: '%s' in resourcepack: '%s': %s", debug1.getLocation(), debug1.getSourceName(), debug22.getMessage()));
+                        catch (Exception debug222) { // MagmaCube - decompile fix
+                            throw new BlockStateDefinitionException(String.format("Exception loading blockstate definition: '%s' in resourcepack: '%s': %s", debug1.getLocation(), debug1.getSourceName(), debug222.getMessage())); // MagmaCube - decompile fix
                         }
                     }).collect(Collectors.toList());
                 }
                 catch (IOException debug14) {
                     LOGGER.warn("Exception loading blockstate definition: {}: {}", (Object)debug9, (Object)debug14);
-                    HashMap debug15 = Maps.newHashMap();
+                    // MagmaCube start - decompile fix
+                    Map<ModelGroupKey, Set<BlockState>> debug15 = Maps.newHashMap(); // MagmaCube - decompile fix
                     debug7.forEach((debug5, debug6) -> {
-                        Pair debug7 = (Pair)debug8.get(debug6);
-                        if (debug7 == null) {
+                        Pair debug72 = (Pair)debug8.get(debug6);
+                        if (debug72 == null) {
                             LOGGER.warn("Exception loading blockstate definition: '{}' missing model for variant: '{}'", (Object)debug9, debug5);
-                            debug7 = debug122;
+                            debug72 = debug122;
                         }
-                        this.cacheAndQueueDependencies((ResourceLocation)debug5, (UnbakedModel)debug7.getFirst());
+                        this.cacheAndQueueDependencies((ResourceLocation)debug5, (UnbakedModel)debug72.getFirst());
                         try {
-                            ModelGroupKey debug8 = (ModelGroupKey)((Supplier)debug7.getSecond()).get();
-                            debug15.computeIfAbsent(debug8, debug0 -> Sets.newIdentityHashSet()).add(debug6);
+                            ModelGroupKey debug82 = (ModelGroupKey)((Supplier)debug72.getSecond()).get();
+                            debug15.computeIfAbsent(debug82, debug0 -> Sets.newIdentityHashSet()).add(debug6);
                         }
-                        catch (Exception debug8) {
-                            LOGGER.warn("Exception evaluating model definition: '{}'", debug5, (Object)debug8);
+                        catch (Exception debug82) {
+                            LOGGER.warn("Exception evaluating model definition: '{}'", debug5, (Object)debug82);
                         }
                     });
                     debug15.forEach((debug1, debug2) -> {
-                        Iterator debug3 = debug2.iterator();
-                        while (debug3.hasNext()) {
-                            BlockState debug4 = (BlockState)debug3.next();
-                            if (debug4.getRenderShape() == RenderShape.MODEL) continue;
-                            debug3.remove();
-                            this.modelGroups.put((Object)debug4, 0);
+                        Iterator debug32 = debug2.iterator();
+                        while (debug32.hasNext()) {
+                            BlockState debug42 = (BlockState)debug32.next();
+                            if (debug42.getRenderShape() == RenderShape.MODEL) continue;
+                            debug32.remove();
+                            this.modelGroups.put(debug42, 0);
+                            // MagmaCube end - decompile fix
                         }
                         if (debug2.size() > 1) {
                             this.registerModelGroup((Iterable<BlockState>)debug2);
@@ -376,7 +378,7 @@ public class ModelBakery {
                     MultiPart debug18;
                     Pair debug15 = (Pair)iterator.next();
                     BlockModelDefinition debug16 = (BlockModelDefinition)debug15.getSecond();
-                    IdentityHashMap debug17 = Maps.newIdentityHashMap();
+                    Map<BlockState, Pair<UnbakedModel, Supplier<ModelGroupKey>>> debug17 = Maps.newIdentityHashMap(); // MagmaCube - decompile fix
                     if (debug16.isMultiPart()) {
                         debug18 = debug16.getMultiPart();
                         debug62.forEach(arg_0 -> ModelBakery.lambda$loadModel$19(debug17, debug18, (List)debug52, arg_0));
@@ -394,29 +396,31 @@ public class ModelBakery {
                 throw new BlockStateDefinitionException(String.format("Exception loading blockstate definition: '%s': %s", debug9, debug13));
             }
             finally {
-                HashMap debug20 = Maps.newHashMap();
+                // MagmaCube start - decompile fix
+                Map<ModelGroupKey, Set<BlockState>> debug20 = Maps.newHashMap();
                 debug7.forEach((debug5, debug6) -> {
-                    Pair debug7 = (Pair)debug8.get(debug6);
-                    if (debug7 == null) {
+                    Pair<UnbakedModel, Supplier<ModelGroupKey>> debug72 = (Pair)debug8.get(debug6);
+                    if (debug72 == null) {
                         LOGGER.warn("Exception loading blockstate definition: '{}' missing model for variant: '{}'", (Object)debug9, debug5);
-                        debug7 = debug122;
+                        debug72 = debug122;
                     }
-                    this.cacheAndQueueDependencies((ResourceLocation)debug5, (UnbakedModel)debug7.getFirst());
+                    this.cacheAndQueueDependencies((ResourceLocation)debug5, (UnbakedModel)debug72.getFirst());
                     try {
-                        ModelGroupKey debug8 = (ModelGroupKey)((Supplier)debug7.getSecond()).get();
-                        debug15.computeIfAbsent(debug8, debug0 -> Sets.newIdentityHashSet()).add(debug6);
+                        ModelGroupKey debug82 = (ModelGroupKey)((Supplier)debug72.getSecond()).get();
+                        debug20.computeIfAbsent(debug82, debug0 -> Sets.newIdentityHashSet()).add(debug6);
                     }
-                    catch (Exception debug8) {
-                        LOGGER.warn("Exception evaluating model definition: '{}'", debug5, (Object)debug8);
+                    catch (Exception debug82) {
+                        LOGGER.warn("Exception evaluating model definition: '{}'", debug5, (Object)debug82);
                     }
                 });
                 debug20.forEach((debug1, debug2) -> {
-                    Iterator debug3 = debug2.iterator();
-                    while (debug3.hasNext()) {
-                        BlockState debug4 = (BlockState)debug3.next();
-                        if (debug4.getRenderShape() == RenderShape.MODEL) continue;
-                        debug3.remove();
-                        this.modelGroups.put((Object)debug4, 0);
+                    Iterator debug32 = debug2.iterator();
+                    while (debug32.hasNext()) {
+                        BlockState debug42 = (BlockState)debug32.next();
+                        if (debug42.getRenderShape() == RenderShape.MODEL) continue;
+                        debug32.remove();
+                        this.modelGroups.put(debug42, 0);
+                        // MagmaCube end - decompile fix
                     }
                     if (debug2.size() > 1) {
                         this.registerModelGroup((Iterable<BlockState>)debug2);
@@ -458,14 +462,13 @@ public class ModelBakery {
         }
         debug5 = debug4.bake(this, this.atlasSet::getSprite, debug2, debug1);
         this.bakedCache.put((Triple<ResourceLocation, Transformation, Boolean>)debug3, (BakedModel)debug5);
-        return debug5;
+        return (BakedModel) debug5; // MagmaCube - decompile fix
     }
 
     /*
      * WARNING - Removed try catching itself - possible behaviour change.
      */
     private BlockModel loadBlockModel(ResourceLocation debug1) throws IOException {
-        Object debug5;
         String debug4;
         Resource debug3;
         Reader debug2;
@@ -495,7 +498,7 @@ public class ModelBakery {
             return blockModel;
         }
         if (debug4.startsWith("builtin/")) {
-            debug5 = debug4.substring("builtin/".length());
+            String debug5 = debug4.substring("builtin/".length()); // MagmaCube - decompile fix
             String debug6 = BUILTIN_MODELS.get(debug5);
             if (debug6 == null) {
                 throw new FileNotFoundException(debug1.toString());
@@ -505,12 +508,11 @@ public class ModelBakery {
             debug3 = this.resourceManager.getResource(new ResourceLocation(debug1.getNamespace(), "models/" + debug1.getPath() + ".json"));
             debug2 = new InputStreamReader(debug3.getInputStream(), StandardCharsets.UTF_8);
         }
-        debug5 = BlockModel.fromStream(debug2);
+        BlockModel debug5 = BlockModel.fromStream(debug2); // MagmaCube - decompile fix
         ((BlockModel)debug5).name = debug1.toString();
-        Object object = debug5;
         IOUtils.closeQuietly((Reader)debug2);
         IOUtils.closeQuietly((Closeable)debug3);
-        return object;
+        return (BlockModel) debug5; // MagmaCube - decompile fix
     }
 
     public Map<ResourceLocation, BakedModel> getBakedTopLevelModels() {
@@ -521,13 +523,13 @@ public class ModelBakery {
         return this.modelGroups;
     }
 
-    private static /* synthetic */ void lambda$loadModel$23(ImmutableList debug0, StateDefinition debug1, Map debug2, List debug3, MultiPart debug4, Pair debug5, BlockModelDefinition debug62, ResourceLocation debug7, Pair debug8, String debug9, MultiVariant debug10) {
+    private static /* synthetic */ void lambda$loadModel$23(ImmutableList<BlockState> debug0, StateDefinition<Block, BlockState> debug1, Map<BlockState, Pair<UnbakedModel, Supplier<ModelGroupKey>>> debug2, List debug3, MultiPart debug4, Pair debug5, BlockModelDefinition debug62, ResourceLocation debug7, Pair debug8, String debug9, MultiVariant debug10) { // MagmaCube - decompile fix
         try {
             debug0.stream().filter(ModelBakery.predicate(debug1, debug9)).forEach(debug6 -> {
-                Pair debug7 = debug2.put(debug6, Pair.of((Object)debug10, () -> ModelGroupKey.create(debug6, debug10, debug3)));
-                if (debug7 != null && debug7.getFirst() != debug4) {
+                Pair debug72 = debug2.put(debug6, Pair.of(debug10, () -> ModelGroupKey.create(debug6, debug10, debug3))); // MagmaCube - decompile fix
+                if (debug72 != null && debug72.getFirst() != debug4) { // MagmaCube - decompile fix
                     debug2.put(debug6, debug5);
-                    throw new RuntimeException("Overlapping definition with: " + (String)debug62.getVariants().entrySet().stream().filter(debug1 -> debug1.getValue() == debug7.getFirst()).findFirst().get().getKey());
+                    throw new RuntimeException("Overlapping definition with: " + (String)debug62.getVariants().entrySet().stream().filter(debug12 -> debug12.getValue() == debug8.getFirst()).findFirst().get().getKey()); // MagmaCube - decompile fix
                 }
             });
         }
@@ -536,8 +538,8 @@ public class ModelBakery {
         }
     }
 
-    private static /* synthetic */ void lambda$loadModel$19(Map debug0, MultiPart debug1, List debug2, BlockState debug3) {
-        debug0.put(debug3, Pair.of((Object)debug1, () -> ModelGroupKey.create(debug3, debug1, debug2)));
+    private static /* synthetic */ void lambda$loadModel$19(Map<BlockState, Pair<UnbakedModel, Supplier<ModelGroupKey>>> debug0, MultiPart debug1, List<Property<?>> debug2, BlockState debug3) { // MagmaCube - decompile fix
+        debug0.put(debug3, Pair.of(debug1, () -> ModelGroupKey.create(debug3, debug1, debug2))); // MagmaCube - decompile fix
     }
 
     static class ModelGroupKey {
@@ -573,7 +575,7 @@ public class ModelBakery {
 
         public static ModelGroupKey create(BlockState debug0, UnbakedModel debug1, Collection<Property<?>> debug2) {
             List<Object> debug3 = ModelGroupKey.getColoringValues(debug0, debug2);
-            return new ModelGroupKey((List<UnbakedModel>)ImmutableList.of((Object)debug1), debug3);
+            return new ModelGroupKey((List<UnbakedModel>)ImmutableList.of(debug1), debug3); // MagmaCube - decompile fix
         }
 
         private static List<Object> getColoringValues(BlockState debug0, Collection<Property<?>> debug1) {
diff --git a/src/main/java/net/minecraft/client/searchtree/SearchRegistry.java b/src/main/java/net/minecraft/client/searchtree/SearchRegistry.java
index 8c835fb8b5f904681b2586c4ed5a8a3a499cfcec..b20811459fa0bf5dc18fa637ba162f9d86e2987d 100644
--- a/src/main/java/net/minecraft/client/searchtree/SearchRegistry.java
+++ b/src/main/java/net/minecraft/client/searchtree/SearchRegistry.java
@@ -16,7 +16,7 @@ public class SearchRegistry implements ResourceManagerReloadListener
     private final Map<Key<?>, MutableSearchTree<?>> searchTrees;
     
     public SearchRegistry() {
-        this.searchTrees = (Map<Key<?>, MutableSearchTree<?>>)Maps.newHashMap();
+        this.searchTrees = Maps.newHashMap(); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/client/searchtree/SuffixArray.java b/src/main/java/net/minecraft/client/searchtree/SuffixArray.java
index 7b1f66c15308cca6343b596875cbe274b87c861c..e88516287d5ea8738759d6c9f80fa58039dd1f0e 100644
--- a/src/main/java/net/minecraft/client/searchtree/SuffixArray.java
+++ b/src/main/java/net/minecraft/client/searchtree/SuffixArray.java
@@ -68,17 +68,19 @@ public class SuffixArray<T>
                 return this.compare((int)debug1, (int)debug2);
             }
         };
-        final Swapper debug7 = (debug3, debug4) -> {
-            if (debug3 != debug4) {
-                int debug5 = debug3[debug3];
-                debug3[debug3] = debug3[debug4];
-                debug3[debug4] = debug5;
-                debug5 = debug4[debug3];
-                debug4[debug3] = debug4[debug4];
-                debug4[debug4] = debug5;
-                debug5 = debug5[debug3];
-                debug5[debug3] = debug5[debug4];
-                debug5[debug4] = debug5;
+        // MagmaCube start - decompile fix
+        final Swapper debug7 = (debug3l, debug4l) -> {
+            if (debug3l != debug4l) {
+                int debug52 = debug3[debug3l];
+                debug3[debug3l] = debug3[debug4l];
+                debug3[debug4l] = debug52;
+                debug52 = debug4[debug3l];
+                debug4[debug3l] = debug4[debug4l];
+                debug4[debug4l] = debug52;
+                debug52 = debug5[debug3l];
+                debug5[debug3l] = debug5[debug4l];
+                debug5[debug4l] = debug52;
+                // MagmaCube end - decompile fix
             }
         };
         for (int debug8 = 0; debug8 < debug1; ++debug8) {
@@ -165,7 +167,7 @@ public class SuffixArray<T>
             final int debug5 = debug3 + (debug4 - debug3) / 2;
             final int debug6 = this.compare(debug1, debug5);
             if (SuffixArray.DEBUG_COMPARISONS) {
-                SuffixArray.LOGGER.debug("comparing lower Â¥"{}Â¥" with {} Â¥"{}Â¥": {}", (Object)debug1, (Object)debug5, (Object)this.getString(debug5), (Object)debug6);
+                SuffixArray.LOGGER.debug("comparing lower \"{}\" with {} \"{}\": {}", (Object)debug1, (Object)debug5, (Object)this.getString(debug5), (Object)debug6); // MagmaCube - decompile fix
             }
             if (debug6 > 0) {
                 debug3 = debug5 + 1;
@@ -183,7 +185,7 @@ public class SuffixArray<T>
             final int debug6 = debug3 + (debug4 - debug3) / 2;
             final int debug7 = this.compare(debug1, debug6);
             if (SuffixArray.DEBUG_COMPARISONS) {
-                SuffixArray.LOGGER.debug("comparing upper Â¥"{}Â¥" with {} Â¥"{}Â¥": {}", (Object)debug1, (Object)debug6, (Object)this.getString(debug6), (Object)debug7);
+                SuffixArray.LOGGER.debug("comparing upper \"{}\" with {} \"{}\": {}", (Object)debug1, (Object)debug6, (Object)this.getString(debug6), (Object)debug7); // MagmaCube - decompile fix
             }
             if (debug7 >= 0) {
                 debug3 = debug6 + 1;
diff --git a/src/main/java/net/minecraft/client/server/IntegratedPlayerList.java b/src/main/java/net/minecraft/client/server/IntegratedPlayerList.java
index 0e1a0b54d1e378293e2f2a186f18f16f7fa7dade..26cd0af8a82ea9e988581033ad01f74880ce702d 100644
--- a/src/main/java/net/minecraft/client/server/IntegratedPlayerList.java
+++ b/src/main/java/net/minecraft/client/server/IntegratedPlayerList.java
@@ -52,10 +52,5 @@ extends PlayerList {
     public CompoundTag getSingleplayerData() {
         return this.playerData;
     }
-
-    @Override
-    public /* synthetic */ MinecraftServer getServer() {
-        return this.getServer();
-    }
 }
 
diff --git a/src/main/java/net/minecraft/client/server/IntegratedServer.java b/src/main/java/net/minecraft/client/server/IntegratedServer.java
index f1dddb5b18b21a132fade2ef497c98791b645890..9f200c06de3c389142edba4b971ea21606cf27d9 100644
--- a/src/main/java/net/minecraft/client/server/IntegratedServer.java
+++ b/src/main/java/net/minecraft/client/server/IntegratedServer.java
@@ -196,8 +196,8 @@ extends MinecraftServer {
     @Override
     public void halt(boolean debug1) {
         this.executeBlocking(() -> {
-            ArrayList debug1 = Lists.newArrayList(this.getPlayerList().getPlayers());
-            for (ServerPlayer debug3 : debug1) {
+            ArrayList<ServerPlayer> debug1l = Lists.newArrayList(this.getPlayerList().getPlayers()); // MagmaCube - decompile fix
+            for (ServerPlayer debug3 : debug1l) { // MagmaCube - decompile fix
                 if (debug3.getUUID().equals(this.uuid)) continue;
                 this.getPlayerList().remove(debug3);
             }
diff --git a/src/main/java/net/minecraft/client/sounds/SoundManager.java b/src/main/java/net/minecraft/client/sounds/SoundManager.java
index 617bc551b0e545d8aec028cd168977ce48211d86..587b3056f2df43c11dffaa4d51fbc74bc0d59ad6 100644
--- a/src/main/java/net/minecraft/client/sounds/SoundManager.java
+++ b/src/main/java/net/minecraft/client/sounds/SoundManager.java
@@ -36,7 +36,7 @@ import org.apache.logging.log4j.Logger;
 import net.minecraft.client.resources.sounds.Sound;
 import net.minecraft.server.packs.resources.SimplePreparableReloadListener;
 
-public class SoundManager extends SimplePreparableReloadListener<Preparations>
+public class SoundManager extends SimplePreparableReloadListener<SoundManager.Preparations> // MagmaCube - decompile fix
 {
     public static final Sound EMPTY_SOUND;
     private static final Logger LOGGER;
@@ -46,7 +46,7 @@ public class SoundManager extends SimplePreparableReloadListener<Preparations>
     private final SoundEngine soundEngine;
     
     public SoundManager(final ResourceManager debug1, final Options debug2) {
-        this.registry = (Map<ResourceLocation, WeighedSoundEvents>)Maps.newHashMap();
+        this.registry = Maps.newHashMap(); // MagmaCube - decompile fix
         this.soundEngine = new SoundEngine(this, debug2, debug1);
     }
     
@@ -203,7 +203,7 @@ public class SoundManager extends SimplePreparableReloadListener<Preparations>
         private final Map<ResourceLocation, WeighedSoundEvents> registry;
         
         protected Preparations() {
-            this.registry = (Map<ResourceLocation, WeighedSoundEvents>)Maps.newHashMap();
+            this.registry = Maps.newHashMap(); // MagmaCube - decompile fix
         }
         
         private void handleRegistration(final ResourceLocation debug1, final SoundEventRegistration debug2, final ResourceManager debug3) {
diff --git a/src/main/java/net/minecraft/client/sounds/WeighedSoundEvents.java b/src/main/java/net/minecraft/client/sounds/WeighedSoundEvents.java
index 61fd122e4f4d7a9034817ee6b66488d19228793b..8e175924f895707ccf8678e841fe37948cb96a81 100644
--- a/src/main/java/net/minecraft/client/sounds/WeighedSoundEvents.java
+++ b/src/main/java/net/minecraft/client/sounds/WeighedSoundEvents.java
@@ -19,7 +19,7 @@ public class WeighedSoundEvents implements Weighted<Sound>
     private final Component subtitle;
     
     public WeighedSoundEvents(final ResourceLocation debug1, @Nullable final String debug2) {
-        this.list = (List<Weighted<Sound>>)Lists.newArrayList();
+        this.list = Lists.newArrayList(); // MagmaCube - decompile fix
         this.random = new Random();
         this.location = debug1;
         this.subtitle = ((debug2 == null) ? null : new TranslatableComponent(debug2));
diff --git a/src/main/java/net/minecraft/client/tutorial/TutorialSteps.java b/src/main/java/net/minecraft/client/tutorial/TutorialSteps.java
index 326690b613d4957ae6bc8f79e11a7eacdc2483a6..1cb998fbbef588d83890eec1ebccf4b487477962 100644
--- a/src/main/java/net/minecraft/client/tutorial/TutorialSteps.java
+++ b/src/main/java/net/minecraft/client/tutorial/TutorialSteps.java
@@ -4,17 +4,17 @@ import java.util.function.Function;
 
 public enum TutorialSteps
 {
-    MOVEMENT("movement", (Function<Tutorial, T>)MovementTutorialStepInstance::new), 
-    FIND_TREE("find_tree", (Function<Tutorial, T>)FindTreeTutorialStepInstance::new), 
-    PUNCH_TREE("punch_tree", (Function<Tutorial, T>)PunchTreeTutorialStepInstance::new), 
-    OPEN_INVENTORY("open_inventory", (Function<Tutorial, T>)OpenInventoryTutorialStep::new), 
-    CRAFT_PLANKS("craft_planks", (Function<Tutorial, T>)CraftPlanksTutorialStep::new), 
-    NONE("none", (Function<Tutorial, T>)CompletedTutorialStepInstance::new);
+    MOVEMENT("movement", MovementTutorialStepInstance::new), // MagmaCube - decompile fix
+    FIND_TREE("find_tree", FindTreeTutorialStepInstance::new), // MagmaCube - decompile fix
+    PUNCH_TREE("punch_tree", PunchTreeTutorialStepInstance::new), // MagmaCube - decompile fix
+    OPEN_INVENTORY("open_inventory", OpenInventoryTutorialStep::new), // MagmaCube - decompile fix
+    CRAFT_PLANKS("craft_planks", CraftPlanksTutorialStep::new), // MagmaCube - decompile fix
+    NONE("none", CompletedTutorialStepInstance::new); // MagmaCube - decompile fix
     
     private final String name;
     private final Function<Tutorial, ? extends TutorialStepInstance> constructor;
     
-    private TutorialSteps(final String debug3, final Function<Tutorial, T> debug4) {
+    private TutorialSteps(final String debug3, final Function<Tutorial, TutorialStepInstance> debug4) { // MagmaCube - decompile fix
         this.name = debug3;
         this.constructor = debug4;
     }
diff --git a/src/main/java/net/minecraft/commands/CommandSourceStack.java b/src/main/java/net/minecraft/commands/CommandSourceStack.java
index ef4546931347c0ddfffb34315775209a917eb4b0..f3123b6a23610317599ffb00d56f42748d9b900f 100644
--- a/src/main/java/net/minecraft/commands/CommandSourceStack.java
+++ b/src/main/java/net/minecraft/commands/CommandSourceStack.java
@@ -262,7 +262,7 @@ implements SharedSuggestionProvider {
 
     @Override
     public Collection<String> getOnlinePlayerNames() {
-        return Lists.newArrayList((Object[])this.server.getPlayerNames());
+        return Lists.newArrayList(this.server.getPlayerNames()); // MagmaCube - decompile fix
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/commands/arguments/AngleArgument.java b/src/main/java/net/minecraft/commands/arguments/AngleArgument.java
index 3b1058322c70f9756427ca0e7201ac16c0f55a07..cff08138a082aafd046a798731528e4860c6e4d5 100644
--- a/src/main/java/net/minecraft/commands/arguments/AngleArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/AngleArgument.java
@@ -14,7 +14,7 @@ import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import java.util.Collection;
 import com.mojang.brigadier.arguments.ArgumentType;
 
-public class AngleArgument implements ArgumentType<SingleAngle>
+public class AngleArgument implements ArgumentType<AngleArgument.SingleAngle> // MagmaCube - decompile fix
 {
     private static final Collection<String> EXAMPLES;
     public static final SimpleCommandExceptionType ERROR_NOT_COMPLETE;
diff --git a/src/main/java/net/minecraft/commands/arguments/ComponentArgument.java b/src/main/java/net/minecraft/commands/arguments/ComponentArgument.java
index 922ef97d7a23e0f812e5480dadfb88a917c2dff4..880cd89b06422fd08675e72b1320d6e0d64cdb11 100644
--- a/src/main/java/net/minecraft/commands/arguments/ComponentArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ComponentArgument.java
@@ -46,10 +46,9 @@ public class ComponentArgument implements ArgumentType<Component>
     }
     
     static {
-        EXAMPLES = Arrays.asList("Â¥"hello worldÂ¥"", "Â¥"Â¥"", "Â¥"{Â¥"textÂ¥":Â¥"hello worldÂ¥"}", "[Â¥"Â¥"]");
-        final TranslatableComponent translatableComponent;
+        EXAMPLES = Arrays.asList("\"hello world\"", "\"\"", "\"{\"text\":\"hello world\"}", "[\"\"]"); // MagmaCube - decompile fix
         ERROR_INVALID_JSON = new DynamicCommandExceptionType(debug0 -> {
-            new TranslatableComponent("argument.component.invalid", new Object[] { debug0 });
+            TranslatableComponent translatableComponent = new TranslatableComponent("argument.component.invalid", new Object[] { debug0 }); // MagmaCube - decompile fix
             return translatableComponent;
         });
     }
diff --git a/src/main/java/net/minecraft/commands/arguments/DimensionArgument.java b/src/main/java/net/minecraft/commands/arguments/DimensionArgument.java
index 22de30ed6621af0d01e0e6c6a3079c3a595bf644..7f6e27902935277e66f4ebbc1dad205676abc9d8 100644
--- a/src/main/java/net/minecraft/commands/arguments/DimensionArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/DimensionArgument.java
@@ -65,9 +65,5 @@ implements ArgumentType<ResourceLocation> {
         }
         return debug4;
     }
-
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/commands/arguments/EntityAnchorArgument.java b/src/main/java/net/minecraft/commands/arguments/EntityAnchorArgument.java
index 3f66f85fcfa200efce64f1ef9e14fd5652b147f9..c40f53b480d85e24509bfec28f404f3f97fd3211 100644
--- a/src/main/java/net/minecraft/commands/arguments/EntityAnchorArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/EntityAnchorArgument.java
@@ -24,7 +24,7 @@ import com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
 import java.util.Collection;
 import com.mojang.brigadier.arguments.ArgumentType;
 
-public class EntityAnchorArgument implements ArgumentType<Anchor>
+public class EntityAnchorArgument implements ArgumentType<EntityAnchorArgument.Anchor> // MagmaCube - decompile fix
 {
     private static final Collection<String> EXAMPLES;
     private static final DynamicCommandExceptionType ERROR_INVALID;
@@ -58,10 +58,8 @@ public class EntityAnchorArgument implements ArgumentType<Anchor>
     
     static {
         EXAMPLES = Arrays.asList("eyes", "feet");
-        final TranslatableComponent translatableComponent;
         ERROR_INVALID = new DynamicCommandExceptionType(debug0 -> {
-            new TranslatableComponent("argument.anchor.invalid", new Object[] { debug0 });
-            return translatableComponent;
+            return new TranslatableComponent("argument.anchor.invalid", new Object[] { debug0 }); // MagmaCube - decompile fix
         });
     }
     
@@ -97,14 +95,13 @@ public class EntityAnchorArgument implements ArgumentType<Anchor>
         }
         
         static {
-            final Anchor[] array;
-            int length;
-            int i;
-            Anchor debug2;
-            BY_NAME = Util.make((Map<String, Anchor>)Maps.newHashMap(), debug0 -> {
-                values();
-                for (length = array.length; i < length; ++i) {
-                    debug2 = array[i];
+            // MagmaCube start - decompile fix
+            BY_NAME = Util.make(Maps.newHashMap(), debug0 -> {
+                Anchor[] array = values();
+                int i = 0;
+                for (int length = array.length; i < length; ++i) {
+                    Anchor debug2 = array[i];
+                    // MagmaCube end - decompile fix
                     debug0.put(debug2.name, debug2);
                 }
             });
diff --git a/src/main/java/net/minecraft/commands/arguments/GameProfileArgument.java b/src/main/java/net/minecraft/commands/arguments/GameProfileArgument.java
index 98d18c8567033b2d0c445747c43aeb8aaad6c7d0..5a93b00fa1691f9da9a7cafaf8553075ae698515 100644
--- a/src/main/java/net/minecraft/commands/arguments/GameProfileArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/GameProfileArgument.java
@@ -40,7 +40,7 @@ import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.server.level.ServerPlayer;
 
 public class GameProfileArgument
-implements ArgumentType<Result> {
+implements ArgumentType<GameProfileArgument.Result> { // MagmaCube - decompile fix
     private static final Collection<String> EXAMPLES = Arrays.asList("Player", "0123", "dd12be42-52a9-4a91-a8a1-11c01849e498", "@e");
     public static final SimpleCommandExceptionType ERROR_UNKNOWN_PLAYER = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.player.unknown"));
 
@@ -67,11 +67,11 @@ implements ArgumentType<Result> {
         }
         String debug3 = debug12.getString().substring(debug2, debug12.getCursor());
         return debug1 -> {
-            GameProfile debug2 = debug1.getServer().getProfileCache().get(debug3);
-            if (debug2 == null) {
+            GameProfile debug2l = debug1.getServer().getProfileCache().get(debug3); // MagmaCube - decompile fix
+            if (debug2l == null) { // MagmaCube - decompile fix
                 throw ERROR_UNKNOWN_PLAYER.create();
             }
-            return Collections.singleton(debug2);
+            return Collections.singleton(debug2l); // MagmaCube - decompile fix
         };
     }
 
@@ -95,10 +95,6 @@ implements ArgumentType<Result> {
         return EXAMPLES;
     }
 
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
-
     public static class SelectorResult
     implements Result {
         private final EntitySelector selector;
diff --git a/src/main/java/net/minecraft/commands/arguments/MessageArgument.java b/src/main/java/net/minecraft/commands/arguments/MessageArgument.java
index 19f48d5857ec99a8b64dc2f6d84d6b5a0dd3d62d..32e7543da14544265bc2515fe9b07a22763e9fb2 100644
--- a/src/main/java/net/minecraft/commands/arguments/MessageArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/MessageArgument.java
@@ -16,7 +16,7 @@ import com.mojang.brigadier.context.CommandContext;
 import java.util.Collection;
 import com.mojang.brigadier.arguments.ArgumentType;
 
-public class MessageArgument implements ArgumentType<Message>
+public class MessageArgument implements ArgumentType<MessageArgument.Message> // MagmaCube - decompile fix
 {
     private static final Collection<String> EXAMPLES;
     
@@ -78,7 +78,7 @@ public class MessageArgument implements ArgumentType<Message>
                 debug0.setCursor(debug0.getTotalLength());
                 return new Message(debug2, new Part[0]);
             }
-            final List<Part> debug3 = (List<Part>)Lists.newArrayList();
+            final List<Part> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
             final int debug4 = debug0.getCursor();
             while (debug0.canRead()) {
                 if (debug0.peek() == '@') {
diff --git a/src/main/java/net/minecraft/commands/arguments/NbtPathArgument.java b/src/main/java/net/minecraft/commands/arguments/NbtPathArgument.java
index 640dc11d301ba479918207e70f08f89ccc80be5a..9ddb54ff3fee094670597ee510110f0b70312c1c 100644
--- a/src/main/java/net/minecraft/commands/arguments/NbtPathArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/NbtPathArgument.java
@@ -2,10 +2,9 @@ package net.minecraft.commands.arguments;
 
 import java.util.AbstractList;
 import org.apache.commons.lang3.mutable.MutableBoolean;
-import java.util.function.Consumer;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.CollectionTag;
-import java.util.Iterator;
+
 import java.util.function.BiConsumer;
 import java.util.function.Function;
 import java.util.function.Supplier;
@@ -32,7 +31,7 @@ import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import java.util.Collection;
 import com.mojang.brigadier.arguments.ArgumentType;
 
-public class NbtPathArgument implements ArgumentType<NbtPath>
+public class NbtPathArgument implements ArgumentType<NbtPathArgument.NbtPath> // MagmaCube - decompile fix
 {
     private static final Collection<String> EXAMPLES;
     public static final SimpleCommandExceptionType ERROR_INVALID_NODE;
@@ -47,14 +46,14 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
     }
     
     public NbtPath parse(final StringReader debug1) throws CommandSyntaxException {
-        final List<Node> debug2 = (List<Node>)Lists.newArrayList();
+        final List<Node> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         final int debug3 = debug1.getCursor();
         final Object2IntMap<Node> debug4 = (Object2IntMap<Node>)new Object2IntOpenHashMap();
         boolean debug5 = true;
         while (debug1.canRead() && debug1.peek() != ' ') {
             final Node debug6 = parseNode(debug1, debug5);
             debug2.add(debug6);
-            debug4.put((Object)debug6, debug1.getCursor() - debug3);
+            debug4.put(debug6, debug1.getCursor() - debug3); // MagmaCube - decompile fix
             debug5 = false;
             if (debug1.canRead()) {
                 final char debug7 = debug1.peek();
@@ -92,7 +91,7 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
                 debug0.expect(']');
                 return new IndexedElementNode(debug5);
             }
-            case 'Â¥"': {
+            case '\"': {
                 final String debug6 = debug0.readString();
                 return readObjectNode(debug0, debug6);
             }
@@ -127,7 +126,7 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
     }
     
     private static boolean isAllowedInUnquotedName(final char debug0) {
-        return debug0 != ' ' && debug0 != 'Â¥"' && debug0 != '[' && debug0 != ']' && debug0 != '.' && debug0 != '{' && debug0 != '}';
+        return debug0 != ' ' && debug0 != '\"' && debug0 != '[' && debug0 != ']' && debug0 != '.' && debug0 != '{' && debug0 != '}'; // MagmaCube - decompile fix
     }
     
     private static Predicate<Tag> createTagPredicate(final CompoundTag debug0) {
@@ -137,10 +136,8 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
     static {
         EXAMPLES = Arrays.asList("foo", "foo.bar", "foo[0]", "[0]", "[]", "{foo=bar}");
         ERROR_INVALID_NODE = new SimpleCommandExceptionType((Message)new TranslatableComponent("arguments.nbtpath.node.invalid"));
-        final TranslatableComponent translatableComponent;
         ERROR_NOTHING_FOUND = new DynamicCommandExceptionType(debug0 -> {
-            new TranslatableComponent("arguments.nbtpath.nothing_found", new Object[] { debug0 });
-            return translatableComponent;
+            return new TranslatableComponent("arguments.nbtpath.nothing_found", new Object[] { debug0 }); // MagmaCube - decompile fix
         });
     }
     
@@ -198,13 +195,13 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
         }
         
         private static int apply(final List<Tag> debug0, final Function<Tag, Integer> debug1) {
-            return debug0.stream().map((Function<? super Object, ? extends Integer>)debug1).reduce(0, (debug0, debug1) -> debug0 + debug1);
+            return debug0.stream().map(debug1).reduce(0, (debug02, debug12) -> debug02 + debug12); // MagmaCube - decompile fix
         }
         
         public int set(final Tag debug1, final Supplier<Tag> debug2) throws CommandSyntaxException {
             final List<Tag> debug3 = this.getOrCreateParents(debug1);
             final Node debug4 = this.nodes[this.nodes.length - 1];
-            return apply(debug3, debug2 -> debug4.setTag(debug2, debug2));
+            return apply(debug3, debug22 -> debug4.setTag(debug22, debug2)); // MagmaCube - decompile fix
         }
         
         public int remove(final Tag debug1) {
@@ -244,11 +241,11 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
         }
         
         default List<Tag> getOrCreate(final List<Tag> debug1, final Supplier<Tag> debug2) {
-            return this.collect(debug1, (debug2, debug3) -> this.getOrCreateTag(debug2, debug2, debug3));
+            return this.collect(debug1, (debug22, debug3) -> this.getOrCreateTag(debug22, debug2, debug3)); // MagmaCube - decompile fix
         }
         
         default List<Tag> collect(final List<Tag> debug1, final BiConsumer<Tag, List<Tag>> debug2) {
-            final List<Tag> debug3 = (List<Tag>)Lists.newArrayList();
+            final List<Tag> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
             for (final Tag debug4 : debug1) {
                 debug2.accept(debug4, debug3);
             }
@@ -406,15 +403,14 @@ public class NbtPathArgument implements ArgumentType<NbtPath>
             final MutableBoolean debug4 = new MutableBoolean();
             if (debug1 instanceof ListTag) {
                 final ListTag debug5 = (ListTag)debug1;
-                final MutableBoolean mutableBoolean;
-                debug5.stream().filter(this.predicate).forEach(debug2 -> {
-                    debug3.add(debug2);
-                    mutableBoolean.setTrue();
+                debug5.stream().filter(this.predicate).forEach(debug22 -> { // MagmaCube - decompile fix
+                    debug3.add(debug22); // MagmaCube - decompile fix
+                    debug4.setTrue(); // MagmaCube - decompile fix
                     return;
                 });
                 if (debug4.isFalse()) {
                     final CompoundTag debug6 = this.pattern.copy();
-                    ((AbstractList<CompoundTag>)debug5).add(debug6);
+                    debug5.add(debug6); // MagmaCube - decompile fix
                     debug3.add(debug6);
                 }
             }
diff --git a/src/main/java/net/minecraft/commands/arguments/NbtTagArgument.java b/src/main/java/net/minecraft/commands/arguments/NbtTagArgument.java
index cd36a1c2907ade02fe4fb260ba44cb5c478226d4..110c52233fba3482d419a50667d5fe820457a4ad 100644
--- a/src/main/java/net/minecraft/commands/arguments/NbtTagArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/NbtTagArgument.java
@@ -30,6 +30,6 @@ public class NbtTagArgument implements ArgumentType<Tag>
     }
     
     static {
-        EXAMPLES = Arrays.asList("0", "0b", "0l", "0.0", "Â¥"fooÂ¥"", "{foo=bar}", "[0]");
+        EXAMPLES = Arrays.asList("0", "0b", "0l", "0.0", "\"foo\"", "{foo=bar}", "[0]"); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
index 3d7bd9441b84c9e0d54e0914c2d2fd8dca4cac06..be53f699d3a63cf3748fb47c2c1d1decb815d144 100644
--- a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
@@ -71,7 +71,7 @@ implements ArgumentType<String> {
         }
         if (debug1.getSource() instanceof SharedSuggestionProvider) {
             SharedSuggestionProvider debug3 = (SharedSuggestionProvider)debug1.getSource();
-            return debug3.customSuggestion(debug1, debug2);
+            return debug3.customSuggestion((CommandContext<SharedSuggestionProvider>) debug1, debug2); // MagmaCube - decompile fix
         }
         return Suggestions.empty();
     }
@@ -79,9 +79,5 @@ implements ArgumentType<String> {
     public Collection<String> getExamples() {
         return EXAMPLES;
     }
-
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
index a6e5bb3a45add549bfe778778e0eee1df9ebb501..84036c016f222a32c99f3a18a6324125c57c9c6a 100644
--- a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
@@ -17,7 +17,7 @@ import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import java.util.Collection;
 import com.mojang.brigadier.arguments.ArgumentType;
 
-public class OperationArgument implements ArgumentType<Operation>
+public class OperationArgument implements ArgumentType<OperationArgument.Operation> // MagmaCube - decompile fix
 {
     private static final Collection<String> EXAMPLES;
     private static final SimpleCommandExceptionType ERROR_INVALID_OPERATION;
@@ -52,10 +52,9 @@ public class OperationArgument implements ArgumentType<Operation>
     
     private static Operation getOperation(final String debug0) throws CommandSyntaxException {
         if (debug0.equals("><")) {
-            final int debug2;
-            return (debug0, debug1) -> {
-                debug2 = debug0.getScore();
-                debug0.setScore(debug1.getScore());
+            return (debug0l, debug1) -> { // MagmaCube - decompile fix
+                int debug2 = debug0l.getScore(); // MagmaCube - decompile fix
+                debug0l.setScore(debug1.getScore()); // MagmaCube - decompile fix
                 debug1.setScore(debug2);
                 return;
             };
@@ -63,8 +62,8 @@ public class OperationArgument implements ArgumentType<Operation>
         return getSimpleOperation(debug0);
     }
     
-    private static SimpleOperation getSimpleOperation(final String debug0) throws CommandSyntaxException {
-        switch (debug0) {
+    private static SimpleOperation getSimpleOperation(final String s) throws CommandSyntaxException { // MagmaCube - decompile fix
+        switch (s) { // MagmaCube - decompile fix
             case "=": {
                 return (debug0, debug1) -> debug1;
             }
diff --git a/src/main/java/net/minecraft/commands/arguments/ResourceLocationArgument.java b/src/main/java/net/minecraft/commands/arguments/ResourceLocationArgument.java
index cb17dc6fec3f0663fc442dc5ab938a8355c0b846..ead9cdcdd70c9d0f8a8241ddcb30ebae710f713c 100644
--- a/src/main/java/net/minecraft/commands/arguments/ResourceLocationArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ResourceLocationArgument.java
@@ -81,9 +81,5 @@ implements ArgumentType<ResourceLocation> {
     public Collection<String> getExamples() {
         return EXAMPLES;
     }
-
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/commands/arguments/ScoreHolderArgument.java b/src/main/java/net/minecraft/commands/arguments/ScoreHolderArgument.java
index afdc87dd7acd1c5299ff43b502be7d6961903735..0777a48c31ade5829d6f019f4272489c32007f6d 100644
--- a/src/main/java/net/minecraft/commands/arguments/ScoreHolderArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ScoreHolderArgument.java
@@ -41,7 +41,7 @@ import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.world.entity.Entity;
 
 public class ScoreHolderArgument
-implements ArgumentType<Result> {
+implements ArgumentType<ScoreHolderArgument.Result> { // MagmaCube - decompile fix
     public static final SuggestionProvider<CommandSourceStack> SUGGEST_SCORE_HOLDERS = (debug0, debug12) -> {
         StringReader debug2 = new StringReader(debug12.getInput());
         debug2.setCursor(debug12.getStart());
@@ -121,17 +121,13 @@ implements ArgumentType<Result> {
         return EXAMPLES;
     }
 
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
-
     public static class Serializer
     implements ArgumentSerializer<ScoreHolderArgument> {
         @Override
         public void serializeToNetwork(ScoreHolderArgument debug1, FriendlyByteBuf debug2) {
             int debug3 = 0;
             if (debug1.multiple) {
-                debug3 = (byte)(debug3 | true ? 1 : 0);
+                debug3 = (byte)(debug3 | 1);
             }
             debug2.writeByte(debug3);
         }
@@ -147,11 +143,6 @@ implements ArgumentType<Result> {
         public void serializeToJson(ScoreHolderArgument debug1, JsonObject debug2) {
             debug2.addProperty("amount", debug1.multiple ? "multiple" : "single");
         }
-
-        @Override
-        public /* synthetic */ ArgumentType deserializeFromNetwork(FriendlyByteBuf friendlyByteBuf) {
-            return this.deserializeFromNetwork(friendlyByteBuf);
-        }
     }
 
     public static class SelectorResult
diff --git a/src/main/java/net/minecraft/commands/arguments/TeamArgument.java b/src/main/java/net/minecraft/commands/arguments/TeamArgument.java
index fd08ded8d5a9aee40713dec442c27a8add750760..6407be4ee2687f66f883ff2b386b1b20af0c0aea 100644
--- a/src/main/java/net/minecraft/commands/arguments/TeamArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/TeamArgument.java
@@ -61,9 +61,5 @@ implements ArgumentType<String> {
     public Collection<String> getExamples() {
         return EXAMPLES;
     }
-
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockPredicateArgument.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockPredicateArgument.java
index 0c0b0b815b65eababb0eb3d774a7414e416add5d..6379a999f9fc90c976c269631443d6a9fb7c0b28 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockPredicateArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockPredicateArgument.java
@@ -43,7 +43,7 @@ import net.minecraft.world.level.block.state.pattern.BlockInWorld;
 import net.minecraft.world.level.block.state.properties.Property;
 
 public class BlockPredicateArgument
-implements ArgumentType<Result> {
+implements ArgumentType<BlockPredicateArgument.Result> { // MagmaCube - decompile fix
     private static final Collection<String> EXAMPLES = Arrays.asList("stone", "minecraft:stone", "stone[foo=bar]", "#stone", "#stone[foo=bar]{baz=nbt}");
     private static final DynamicCommandExceptionType ERROR_UNKNOWN_TAG = new DynamicCommandExceptionType(debug0 -> new TranslatableComponent("arguments.block.tag.unknown", debug0));
 
@@ -59,11 +59,11 @@ implements ArgumentType<Result> {
         }
         ResourceLocation debug3 = debug22.getTag();
         return debug2 -> {
-            Tag<Block> debug3 = debug2.getBlocks().getTag(debug3);
-            if (debug3 == null) {
-                throw ERROR_UNKNOWN_TAG.create((Object)debug3.toString());
+            Tag<Block> debug3l = debug2.getBlocks().getTag(debug3); // MagmaCube - decompile fix
+            if (debug3l == null) { // MagmaCube - decompile fix
+                throw ERROR_UNKNOWN_TAG.create((Object)debug3l.toString()); // MagmaCube - decompile fix
             }
-            return new TagPredicate(debug3, debug22.getVagueProperties(), debug22.getNbt());
+            return new TagPredicate(debug3l, debug22.getVagueProperties(), debug22.getNbt()); // MagmaCube - decompile fix
         };
     }
 
@@ -88,10 +88,6 @@ implements ArgumentType<Result> {
         return EXAMPLES;
     }
 
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
-
     static class TagPredicate
     implements Predicate<BlockInWorld> {
         private final Tag<Block> tag;
@@ -129,11 +125,6 @@ implements ArgumentType<Result> {
             }
             return true;
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((BlockInWorld)object);
-        }
     }
 
     static class BlockPredicate
@@ -165,11 +156,6 @@ implements ArgumentType<Result> {
             }
             return true;
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((BlockInWorld)object);
-        }
     }
 
     public static interface Result {
diff --git a/src/main/java/net/minecraft/commands/arguments/item/FunctionArgument.java b/src/main/java/net/minecraft/commands/arguments/item/FunctionArgument.java
index 8170016adc4ac76e74d9a1fc1791ac29762b4613..1d9de5c0c664c3a45b79729c51983c6dd70ebe8f 100644
--- a/src/main/java/net/minecraft/commands/arguments/item/FunctionArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/item/FunctionArgument.java
@@ -29,7 +29,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.Tag;
 
 public class FunctionArgument
-implements ArgumentType<Result> {
+implements ArgumentType<FunctionArgument.Result> { // MagmaCube - decompile fix
     private static final Collection<String> EXAMPLES = Arrays.asList("foo", "foo:bar", "#foo");
     private static final DynamicCommandExceptionType ERROR_UNKNOWN_TAG = new DynamicCommandExceptionType(debug0 -> new TranslatableComponent("arguments.function.tag.unknown", debug0));
     private static final DynamicCommandExceptionType ERROR_UNKNOWN_FUNCTION = new DynamicCommandExceptionType(debug0 -> new TranslatableComponent("arguments.function.unknown", debug0));
@@ -52,7 +52,7 @@ implements ArgumentType<Result> {
 
                 @Override
                 public Pair<ResourceLocation, Either<CommandFunction, Tag<CommandFunction>>> unwrap(CommandContext<CommandSourceStack> debug1) throws CommandSyntaxException {
-                    return Pair.of((Object)debug2, (Object)Either.right((Object)FunctionArgument.getFunctionTag((CommandContext<CommandSourceStack>)debug1, debug2)));
+                    return Pair.of(debug2, Either.right(FunctionArgument.getFunctionTag((CommandContext<CommandSourceStack>)debug1, debug2))); // MagmaCube - decompile fix
                 }
             };
         }
@@ -66,7 +66,7 @@ implements ArgumentType<Result> {
 
             @Override
             public Pair<ResourceLocation, Either<CommandFunction, Tag<CommandFunction>>> unwrap(CommandContext<CommandSourceStack> debug1) throws CommandSyntaxException {
-                return Pair.of((Object)debug2, (Object)Either.left((Object)FunctionArgument.getFunction((CommandContext<CommandSourceStack>)debug1, debug2)));
+                return Pair.of(debug2, Either.left(FunctionArgument.getFunction((CommandContext<CommandSourceStack>)debug1, debug2))); // MagmaCube - decompile fix
             }
         };
     }
@@ -95,10 +95,6 @@ implements ArgumentType<Result> {
         return EXAMPLES;
     }
 
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
-
     public static interface Result {
         public Collection<CommandFunction> create(CommandContext<CommandSourceStack> var1) throws CommandSyntaxException;
 
diff --git a/src/main/java/net/minecraft/commands/arguments/item/ItemPredicateArgument.java b/src/main/java/net/minecraft/commands/arguments/item/ItemPredicateArgument.java
index d777b2edc47bbb9a33cb2a0d98de078511d7dacf..fc28fc8cb01653ada0b1feddf34fb0ab30f5cd77 100644
--- a/src/main/java/net/minecraft/commands/arguments/item/ItemPredicateArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/item/ItemPredicateArgument.java
@@ -37,7 +37,7 @@ import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 
 public class ItemPredicateArgument
-implements ArgumentType<Result> {
+implements ArgumentType<ItemPredicateArgument.Result> { // MagmaCube - decompile fix
     private static final Collection<String> EXAMPLES = Arrays.asList("stick", "minecraft:stick", "#stick", "#stick{foo=bar}");
     private static final DynamicCommandExceptionType ERROR_UNKNOWN_TAG = new DynamicCommandExceptionType(debug0 -> new TranslatableComponent("arguments.item.tag.unknown", debug0));
 
@@ -53,11 +53,11 @@ implements ArgumentType<Result> {
         }
         ResourceLocation debug3 = debug22.getTag();
         return debug2 -> {
-            Tag<Item> debug3 = ((CommandSourceStack)debug2.getSource()).getServer().getTags().getItems().getTag(debug3);
-            if (debug3 == null) {
+            Tag<Item> debug3l = ((CommandSourceStack)debug2.getSource()).getServer().getTags().getItems().getTag(debug3); // MagmaCube - decompile fix
+            if (debug3l == null) { // MagmaCube - decompile fix
                 throw ERROR_UNKNOWN_TAG.create((Object)debug3.toString());
             }
-            return new TagPredicate(debug3, debug22.getNbt());
+            return new TagPredicate(debug3l, debug22.getNbt()); // MagmaCube - decompile fix
         };
     }
 
@@ -82,10 +82,6 @@ implements ArgumentType<Result> {
         return EXAMPLES;
     }
 
-    public /* synthetic */ Object parse(StringReader stringReader) throws CommandSyntaxException {
-        return this.parse(stringReader);
-    }
-
     static class TagPredicate
     implements Predicate<ItemStack> {
         private final Tag<Item> tag;
@@ -101,11 +97,6 @@ implements ArgumentType<Result> {
         public boolean test(ItemStack debug1) {
             return this.tag.contains(debug1.getItem()) && NbtUtils.compareNbt(this.nbt, debug1.getTag(), true);
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((ItemStack)object);
-        }
     }
 
     static class ItemPredicate
@@ -123,11 +114,6 @@ implements ArgumentType<Result> {
         public boolean test(ItemStack debug1) {
             return debug1.getItem() == this.item && NbtUtils.compareNbt(this.nbt, debug1.getTag(), true);
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((ItemStack)object);
-        }
     }
 
     public static interface Result {
diff --git a/src/main/java/net/minecraft/core/BlockPos.java b/src/main/java/net/minecraft/core/BlockPos.java
index 3f44c943578cbc7ade12f3271bbcbda251e150e2..823e5a39dd8399fa6120423577652e8e8b9ede3e 100644
--- a/src/main/java/net/minecraft/core/BlockPos.java
+++ b/src/main/java/net/minecraft/core/BlockPos.java
@@ -249,10 +249,6 @@ extends Vec3i {
                 --this.counter;
                 return debug12;
             }
-
-            protected /* synthetic */ Object computeNext() {
-                return this.computeNext();
-            }
         };
     }
 
@@ -302,10 +298,6 @@ extends Vec3i {
                 }
                 return debug12;
             }
-
-            protected /* synthetic */ Object computeNext() {
-                return this.computeNext();
-            }
         };
     }
 
@@ -357,10 +349,6 @@ extends Vec3i {
                 ++this.index;
                 return this.cursor.set(debug0 + debug12, debug1 + debug3, debug2 + debug4);
             }
-
-            protected /* synthetic */ Object computeNext() {
-                return this.computeNext();
-            }
         };
     }
 
@@ -402,43 +390,9 @@ extends Vec3i {
                 ++this.legIndex;
                 return this.cursor;
             }
-
-            protected /* synthetic */ Object computeNext() {
-                return this.computeNext();
-            }
         };
     }
 
-    @Override
-    public /* synthetic */ Vec3i cross(Vec3i vec3i) {
-        return this.cross(vec3i);
-    }
-
-    @Override
-    public /* synthetic */ Vec3i relative(Direction direction, int n) {
-        return this.relative(direction, n);
-    }
-
-    @Override
-    public /* synthetic */ Vec3i below(int n) {
-        return this.below(n);
-    }
-
-    @Override
-    public /* synthetic */ Vec3i below() {
-        return this.below();
-    }
-
-    @Override
-    public /* synthetic */ Vec3i above(int n) {
-        return this.above(n);
-    }
-
-    @Override
-    public /* synthetic */ Vec3i above() {
-        return this.above();
-    }
-
     static {
         PACKED_Z_LENGTH = PACKED_X_LENGTH = 1 + Mth.log2(Mth.smallestEncompassingPowerOfTwo(30000000));
         PACKED_Y_LENGTH = 64 - PACKED_X_LENGTH - PACKED_Z_LENGTH;
@@ -569,36 +523,6 @@ extends Vec3i {
         public BlockPos immutable() {
             return new BlockPos(this);
         }
-
-        @Override
-        public /* synthetic */ Vec3i cross(Vec3i vec3i) {
-            return super.cross(vec3i);
-        }
-
-        @Override
-        public /* synthetic */ Vec3i relative(Direction direction, int n) {
-            return this.relative(direction, n);
-        }
-
-        @Override
-        public /* synthetic */ Vec3i below(int n) {
-            return super.below(n);
-        }
-
-        @Override
-        public /* synthetic */ Vec3i below() {
-            return super.below();
-        }
-
-        @Override
-        public /* synthetic */ Vec3i above(int n) {
-            return super.above(n);
-        }
-
-        @Override
-        public /* synthetic */ Vec3i above() {
-            return super.above();
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/core/Direction.java b/src/main/java/net/minecraft/core/Direction.java
index ca455640bd46237dc35b7fe3f4ee9b18ca96b810..0ecfb80ee8a2559e5f70eaa5f8d83bee30892cfb 100644
--- a/src/main/java/net/minecraft/core/Direction.java
+++ b/src/main/java/net/minecraft/core/Direction.java
@@ -340,17 +340,12 @@ public enum Direction implements StringRepresentable
 
         @Override
         public Iterator<Direction> iterator() {
-            return Iterators.forArray((Object[])this.faces);
+            return Iterators.forArray(this.faces); // MagmaCube - decompile fix
         }
 
         public Stream<Direction> stream() {
             return Arrays.stream(this.faces);
         }
-
-        @Override
-        public /* synthetic */ boolean test(@Nullable Object object) {
-            return this.test((Direction)object);
-        }
     }
 
     public static enum AxisDirection {
@@ -392,11 +387,6 @@ public enum Direction implements StringRepresentable
             public double choose(double debug1, double debug3, double debug5) {
                 return debug1;
             }
-
-            @Override
-            public /* synthetic */ boolean test(@Nullable Object object) {
-                return super.test((Direction)object);
-            }
         }
         ,
         Y("y"){
@@ -410,11 +400,6 @@ public enum Direction implements StringRepresentable
             public double choose(double debug1, double debug3, double debug5) {
                 return debug3;
             }
-
-            @Override
-            public /* synthetic */ boolean test(@Nullable Object object) {
-                return super.test((Direction)object);
-            }
         }
         ,
         Z("z"){
@@ -428,11 +413,6 @@ public enum Direction implements StringRepresentable
             public double choose(double debug1, double debug3, double debug5) {
                 return debug5;
             }
-
-            @Override
-            public /* synthetic */ boolean test(@Nullable Object object) {
-                return super.test((Direction)object);
-            }
         };
 
         private static final Axis[] VALUES;
@@ -496,11 +476,6 @@ public enum Direction implements StringRepresentable
 
         public abstract double choose(double var1, double var3, double var5);
 
-        @Override
-        public /* synthetic */ boolean test(@Nullable Object object) {
-            return this.test((Direction)object);
-        }
-
         static {
             VALUES = Axis.values();
             CODEC = StringRepresentable.fromEnum(Axis::values, Axis::byName);
diff --git a/src/main/java/net/minecraft/core/Registry.java b/src/main/java/net/minecraft/core/Registry.java
index 64f881370d039725c73da54fa38515f9c6eea0f7..0b6cc1289a982ae7dbffdca460a64e701504ed62 100644
--- a/src/main/java/net/minecraft/core/Registry.java
+++ b/src/main/java/net/minecraft/core/Registry.java
@@ -265,7 +265,7 @@ IdMap<T> {
         ResourceLocation debug4 = debug0.location();
         LOADERS.put(debug4, debug2);
         WritableRegistry<WritableRegistry<?>> debug5 = WRITABLE_REGISTRY;
-        return debug5.register(debug0, debug1, debug3);
+        return debug5.register((ResourceKey<WritableRegistry<?>>) debug0, debug1, debug3); // MagmaCube - decompile fix
     }
 
     protected Registry(ResourceKey<? extends Registry<T>> debug1, Lifecycle debug2) {
@@ -284,19 +284,19 @@ IdMap<T> {
     public <U> DataResult<Pair<T, U>> decode(DynamicOps<U> debug12, U debug2) {
         if (debug12.compressMaps()) {
             return debug12.getNumberValue(debug2).flatMap(debug1 -> {
-                Object debug2 = this.byId(debug1.intValue());
-                if (debug2 == null) {
+                T debug22 = this.byId(debug1.intValue()); // MagmaCube - decompile fix
+                if (debug22 == null) { // MagmaCube - decompile fix
                     return DataResult.error((String)("Unknown registry id: " + debug1));
                 }
-                return DataResult.success((Object)debug2, (Lifecycle)this.lifecycle(debug2));
-            }).map(debug1 -> Pair.of((Object)debug1, (Object)debug12.empty()));
+                return DataResult.success(debug22, (Lifecycle)this.lifecycle(debug22)); // MagmaCube - decompile fix
+            }).map(debug1 -> Pair.of(debug1, debug12.empty())); // MagmaCube - decompile fix
         }
         return ResourceLocation.CODEC.decode(debug12, debug2).flatMap(debug1 -> {
-            T debug2 = this.get((ResourceLocation)debug1.getFirst());
-            if (debug2 == null) {
+            T debug22 = this.get((ResourceLocation)debug1.getFirst()); // MagmaCube - decompile fix
+            if (debug22 == null) { // MagmaCube - decompile fix
                 return DataResult.error((String)("Unknown registry key: " + debug1.getFirst()));
             }
-            return DataResult.success((Object)Pair.of(debug2, (Object)debug1.getSecond()), (Lifecycle)this.lifecycle(debug2));
+            return DataResult.success(Pair.of(debug22, debug1.getSecond()), (Lifecycle)this.lifecycle(debug22)); // MagmaCube - decompile fix
         });
     }
 
@@ -364,16 +364,16 @@ IdMap<T> {
     }
 
     public static <V, T extends V> T register(Registry<V> debug0, ResourceLocation debug1, T debug2) {
-        return ((WritableRegistry)debug0).register(ResourceKey.create(debug0.key, debug1), debug2, Lifecycle.stable());
+        return (T) ((WritableRegistry)debug0).register(ResourceKey.create(debug0.key, debug1), debug2, Lifecycle.stable()); // MagmaCube - decompile fix
     }
 
     public static <V, T extends V> T registerMapping(Registry<V> debug0, int debug1, String debug2, T debug3) {
-        return ((WritableRegistry)debug0).registerMapping(debug1, ResourceKey.create(debug0.key, new ResourceLocation(debug2)), debug3, Lifecycle.stable());
+        return (T) ((WritableRegistry)debug0).registerMapping(debug1, ResourceKey.create(debug0.key, new ResourceLocation(debug2)), debug3, Lifecycle.stable()); // MagmaCube - decompile fix
     }
 
     static {
         BuiltinRegistries.bootstrap();
-        LOADERS.forEach((? super K debug0, ? super V debug1) -> {
+        LOADERS.forEach((debug0, debug1) -> { // MagmaCube - decompile fix
             if (debug1.get() == null) {
                 LOGGER.error("Unable to bootstrap registry '{}'", debug0);
             }
diff --git a/src/main/java/net/minecraft/core/RegistryAccess.java b/src/main/java/net/minecraft/core/RegistryAccess.java
index faa44a86c222bc9e4aa9941dd8ea0623d635f72a..ba49b3d001dad6ffb5cecf21b454f6282017681d 100644
--- a/src/main/java/net/minecraft/core/RegistryAccess.java
+++ b/src/main/java/net/minecraft/core/RegistryAccess.java
@@ -97,12 +97,12 @@ public abstract class RegistryAccess {
     }
 
     private static <E> void addBuiltinElements(RegistryHolder debug0, RegistryReadOps.ResourceAccess.MemoryMap debug1, RegistryData<E> debug2) {
-        ResourceKey<Registry<E>> debug3 = debug2.key();
+        ResourceKey<? extends Registry<E>> debug3 = debug2.key(); // MagmaCube - decompile fix
         boolean debug4 = !debug3.equals(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY) && !debug3.equals(Registry.DIMENSION_TYPE_REGISTRY);
         WritableRegistry<E> debug5 = BUILTIN.registryOrThrow(debug3);
         WritableRegistry<E> debug6 = debug0.registryOrThrow(debug3);
-        for (Map.Entry debug8 : debug5.entrySet()) {
-            Object debug9 = debug8.getValue();
+        for (Map.Entry<ResourceKey<E>, E> debug8 : debug5.entrySet()) { // MagmaCube - decompile fix
+            E debug9 = debug8.getValue(); // MagmaCube - decompile fix
             if (debug4) {
                 debug1.add(BUILTIN, debug8.getKey(), debug2.codec(), debug5.getId(debug9), debug9, debug5.lifecycle(debug9));
                 continue;
@@ -112,7 +112,7 @@ public abstract class RegistryAccess {
     }
 
     private static <R extends Registry<?>> void copyBuiltin(RegistryHolder debug0, ResourceKey<R> debug1) {
-        Registry<Registry<?>> debug2 = BuiltinRegistries.REGISTRY;
+        Registry<R> debug2 = (Registry<R>) BuiltinRegistries.REGISTRY; // MagmaCube - decompile fix
         Registry<?> debug3 = debug2.get(debug1);
         if (debug3 == null) {
             throw new IllegalStateException("Missing builtin registry: " + debug1);
@@ -147,18 +147,18 @@ public abstract class RegistryAccess {
         private final Map<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> registries;
 
         private static <E> Codec<RegistryHolder> makeNetworkCodec() {
-            Codec debug02 = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location);
-            Codec debug1 = debug02.partialDispatch("type", debug0 -> DataResult.success(debug0.key()), debug0 -> RegistryHolder.getNetworkCodec(debug0).map(debug1 -> MappedRegistry.networkCodec(debug0, Lifecycle.experimental(), debug1)));
+            Codec<ResourceKey<? extends Registry<E>>> debug02 = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location); // MagmaCube - decompile fix
+            Codec<MappedRegistry<E>> debug1 = debug02.partialDispatch("type", debug0 -> DataResult.success(debug0.key()), debug0 -> RegistryHolder.getNetworkCodec(debug0).map(debug12 -> MappedRegistry.networkCodec(debug0, Lifecycle.experimental(), debug12))); // MagmaCube - decompile fix
             UnboundedMapCodec debug2 = Codec.unboundedMap((Codec)debug02, (Codec)debug1);
             return RegistryHolder.captureMap(debug2);
         }
 
         private static <K extends ResourceKey<? extends Registry<?>>, V extends MappedRegistry<?>> Codec<RegistryHolder> captureMap(UnboundedMapCodec<K, V> debug0) {
-            return debug0.xmap(RegistryHolder::new, debug02 -> (ImmutableMap)debug02.registries.entrySet().stream().filter(debug0 -> ((RegistryData)REGISTRIES.get(debug0.getKey())).sendToClient()).collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, Map.Entry::getValue)));
+            return debug0.xmap(RegistryHolder::new, debug02 -> (ImmutableMap)debug02.registries.entrySet().stream().filter(debug03 -> ((RegistryData)REGISTRIES.get(debug03.getKey())).sendToClient()).collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, Map.Entry::getValue))); // MagmaCube - decompile fix
         }
 
         private static <E> DataResult<? extends Codec<E>> getNetworkCodec(ResourceKey<? extends Registry<E>> debug02) {
-            return Optional.ofNullable(REGISTRIES.get(debug02)).map(debug0 -> debug0.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error((String)("Unknown or not serializable registry: " + debug02)));
+            return (DataResult<? extends Codec<E>>) (Object) Optional.ofNullable(REGISTRIES.get(debug02)).map(debug0 -> debug0.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown or not serializable registry: " + debug02)); // MagmaCube - decompile fix
         }
 
         public RegistryHolder() {
@@ -175,7 +175,7 @@ public abstract class RegistryAccess {
 
         @Override
         public <E> Optional<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> debug1) {
-            return Optional.ofNullable(this.registries.get(debug1)).map(debug0 -> debug0);
+            return (Optional<WritableRegistry<E>>) (Object) Optional.ofNullable(this.registries.get(debug1)).map(debug0 -> debug0); // MagmaCube - decompile fix
         }
     }
 
diff --git a/src/main/java/net/minecraft/core/SectionPos.java b/src/main/java/net/minecraft/core/SectionPos.java
index e9cc9fe79758a1b190a7f6f9989b517f3d732a24..37177a57233c8037f137fdc53d3ad6253a67d22d 100644
--- a/src/main/java/net/minecraft/core/SectionPos.java
+++ b/src/main/java/net/minecraft/core/SectionPos.java
@@ -197,7 +197,6 @@ extends Vec3i {
         return StreamSupport.stream(new Spliterators.AbstractSpliterator<SectionPos>((long)((debug3 - debug0 + 1) * (debug4 - debug1 + 1) * (debug5 - debug2 + 1)), 64){
             final Cursor3D cursor;
             {
-                super(debug12, debug32);
                 this.cursor = new Cursor3D(debug0, debug1, debug2, debug3, debug4, debug5);
             }
 
diff --git a/src/main/java/net/minecraft/core/Vec3i.java b/src/main/java/net/minecraft/core/Vec3i.java
index abaf52e297fc13a87e575ce24af29c0d95cd8eac..e1c7bd2f6d7323029fc6a34308051eb25352a2a3 100644
--- a/src/main/java/net/minecraft/core/Vec3i.java
+++ b/src/main/java/net/minecraft/core/Vec3i.java
@@ -151,7 +151,7 @@ public class Vec3i implements Comparable<Vec3i>
     }
     
     static {
-        CODEC = Codec.INT_STREAM.comapFlatMap(debug0 -> Util.fixedSize(debug0, 3).map(debug0 -> new Vec3i(debug0[0], debug0[1], debug0[2])), debug0 -> IntStream.of(debug0.getX(), debug0.getY(), debug0.getZ()));
+        CODEC = Codec.INT_STREAM.comapFlatMap(debug0 -> Util.fixedSize(debug0, 3).map(debug02 -> new Vec3i(debug02[0], debug02[1], debug02[2])), debug0 -> IntStream.of(debug0.getX(), debug0.getY(), debug0.getZ())); // MagmaCube - decompile fix
         ZERO = new Vec3i(0, 0, 0);
     }
 }
diff --git a/src/main/java/net/minecraft/data/BuiltinRegistries.java b/src/main/java/net/minecraft/data/BuiltinRegistries.java
index 85ec4b0b20009ae1b80ae3ac7841029ed2b3993d..81732ab0afd89508653ce0f12a2bbd3b92bac8c6 100644
--- a/src/main/java/net/minecraft/data/BuiltinRegistries.java
+++ b/src/main/java/net/minecraft/data/BuiltinRegistries.java
@@ -67,11 +67,11 @@ public class BuiltinRegistries
     }
     
     public static <V, T extends V> T register(final Registry<V> debug0, final ResourceLocation debug1, final T debug2) {
-        return ((WritableRegistry)debug0).register(ResourceKey.create((ResourceKey<? extends Registry<Object>>)debug0.key(), debug1), debug2, Lifecycle.stable());
+        return (T) ((WritableRegistry)debug0).register(ResourceKey.create((ResourceKey<? extends Registry<Object>>)debug0.key(), debug1), debug2, Lifecycle.stable()); // MagmaCube - decompile fix
     }
     
     public static <V, T extends V> T registerMapping(final Registry<V> debug0, final int debug1, final ResourceKey<V> debug2, final T debug3) {
-        return ((WritableRegistry)debug0).registerMapping(debug1, debug2, debug3, Lifecycle.stable());
+        return (T) ((WritableRegistry)debug0).registerMapping(debug1, debug2, debug3, Lifecycle.stable()); // MagmaCube - decompile fix
     }
     
     public static void bootstrap() {
@@ -82,10 +82,10 @@ public class BuiltinRegistries
         LOADERS = Maps.newLinkedHashMap();
         WRITABLE_REGISTRY = new MappedRegistry<WritableRegistry<?>>((ResourceKey<? extends Registry<WritableRegistry<?>>>)ResourceKey.createRegistryKey(new ResourceLocation("root")), Lifecycle.experimental());
         REGISTRY = BuiltinRegistries.WRITABLE_REGISTRY;
-        CONFIGURED_SURFACE_BUILDER = registerSimple((ResourceKey<? extends Registry<ConfiguredSurfaceBuilder<SurfaceBuilderBaseConfiguration>>>)Registry.CONFIGURED_SURFACE_BUILDER_REGISTRY, () -> SurfaceBuilders.NOPE);
-        CONFIGURED_CARVER = registerSimple((ResourceKey<? extends Registry<ConfiguredWorldCarver<ProbabilityFeatureConfiguration>>>)Registry.CONFIGURED_CARVER_REGISTRY, () -> Carvers.CAVE);
-        CONFIGURED_FEATURE = registerSimple((ResourceKey<? extends Registry<ConfiguredFeature<TreeConfiguration, ?>>>)Registry.CONFIGURED_FEATURE_REGISTRY, () -> Features.OAK);
-        CONFIGURED_STRUCTURE_FEATURE = registerSimple((ResourceKey<? extends Registry<ConfiguredStructureFeature<MineshaftConfiguration, ? extends StructureFeature<MineshaftConfiguration>>>>)Registry.CONFIGURED_STRUCTURE_FEATURE_REGISTRY, () -> StructureFeatures.MINESHAFT);
+        CONFIGURED_SURFACE_BUILDER = registerSimple(Registry.CONFIGURED_SURFACE_BUILDER_REGISTRY, () -> SurfaceBuilders.NOPE); // MagmaCube - decompile fix
+        CONFIGURED_CARVER = registerSimple(Registry.CONFIGURED_CARVER_REGISTRY, () -> Carvers.CAVE); // MagmaCube - decompile fix
+        CONFIGURED_FEATURE = registerSimple(Registry.CONFIGURED_FEATURE_REGISTRY, () -> Features.OAK); // MagmaCube - decompile fix
+        CONFIGURED_STRUCTURE_FEATURE = registerSimple(Registry.CONFIGURED_STRUCTURE_FEATURE_REGISTRY, () -> StructureFeatures.MINESHAFT); // MagmaCube - decompile fix
         PROCESSOR_LIST = registerSimple(Registry.PROCESSOR_LIST_REGISTRY, () -> ProcessorLists.ZOMBIE_PLAINS);
         TEMPLATE_POOL = registerSimple(Registry.TEMPLATE_POOL_REGISTRY, Pools::bootstrap);
         BIOME = registerSimple(Registry.BIOME_REGISTRY, () -> Biomes.PLAINS);
diff --git a/src/main/java/net/minecraft/data/models/blockstates/Condition.java b/src/main/java/net/minecraft/data/models/blockstates/Condition.java
index fbc4f8db69707782ca1d02c809191b665717f9ca..b385e79e439abe83a2293925add4855e53232913 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/Condition.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/Condition.java
@@ -78,11 +78,6 @@ extends Supplier<JsonElement> {
                 throw new IllegalStateException("Properties " + debug2 + " are missing from " + debug12);
             }
         }
-
-        @Override
-        public /* synthetic */ Object get() {
-            return this.get();
-        }
     }
 
     public static class CompositeCondition
@@ -108,11 +103,6 @@ extends Supplier<JsonElement> {
             debug2.add(this.operation.id, (JsonElement)debug1);
             return debug2;
         }
-
-        @Override
-        public /* synthetic */ Object get() {
-            return this.get();
-        }
     }
 
     public static enum Operation {
diff --git a/src/main/java/net/minecraft/data/models/blockstates/MultiVariantGenerator.java b/src/main/java/net/minecraft/data/models/blockstates/MultiVariantGenerator.java
index e823eb1e74503d71b4bfd7b50c7c56f4e3c74b4e..f6aa7ccc071331be2eff0aa108b594074dae2f1f 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/MultiVariantGenerator.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/MultiVariantGenerator.java
@@ -58,26 +58,25 @@ implements BlockStateGenerator {
 
     @Override
     public JsonElement get() {
-        PropertyDispatch debug32;
-        Stream<Object> debug13 = Stream.of(Pair.of((Object)Selector.empty(), this.baseVariants));
+        Stream<Pair<Selector, List<Variant>>> debug13 = Stream.of(Pair.of(Selector.empty(), this.baseVariants)); // MagmaCube - decompile fix
         for (PropertyDispatch debug32 : this.declaredPropertySets) {
             Map<Selector, List<Variant>> debug4 = debug32.getEntries();
             debug13 = debug13.flatMap(debug12 -> debug4.entrySet().stream().map(debug1 -> {
                 Selector debug2 = ((Selector)debug12.getFirst()).extend((Selector)debug1.getKey());
                 List<Variant> debug3 = MultiVariantGenerator.mergeVariants((List)debug12.getSecond(), (List)debug1.getValue());
-                return Pair.of((Object)debug2, debug3);
+                return Pair.of(debug2, debug3); // MagmaCube - decompile fix
             }));
         }
-        TreeMap debug2 = new TreeMap();
+        TreeMap<String, JsonElement> debug2 = new TreeMap(); // MagmaCube - decompile fix
         debug13.forEach(debug1 -> debug2.put(((Selector)debug1.getFirst()).getKey(), Variant.convertList((List)debug1.getSecond())));
-        debug32 = new JsonObject();
-        debug32.add("variants", (JsonElement)Util.make(new JsonObject(), debug1 -> debug2.forEach((arg_0, arg_1) -> ((JsonObject)debug1).add(arg_0, arg_1))));
+        JsonObject debug32 = new JsonObject(); // MagmaCube - decompile fix
+        debug32.add("variants", (JsonElement)Util.make(new JsonObject(), debug1 -> debug2.forEach((arg_0, arg_1) -> ((JsonObject)debug1).add(arg_0, arg_1)))); // MagmaCube - decompile fix
         return debug32;
     }
 
     private static List<Variant> mergeVariants(List<Variant> debug0, List<Variant> debug1) {
         ImmutableList.Builder debug2 = ImmutableList.builder();
-        debug0.forEach(debug22 -> debug1.forEach(debug2 -> debug2.add((Object)Variant.merge(debug22, debug2))));
+        debug0.forEach(debug22 -> debug1.forEach(debug2l -> debug2.add((Object)Variant.merge(debug22, debug2l)))); // MagmaCube - decompile fix
         return debug2.build();
     }
 
@@ -87,20 +86,15 @@ implements BlockStateGenerator {
     }
 
     public static MultiVariantGenerator multiVariant(Block debug0) {
-        return new MultiVariantGenerator(debug0, (List<Variant>)ImmutableList.of((Object)Variant.variant()));
+        return new MultiVariantGenerator(debug0, (List<Variant>)ImmutableList.of(Variant.variant())); // MagmaCube - decompile fix
     }
 
     public static MultiVariantGenerator multiVariant(Block debug0, Variant debug1) {
-        return new MultiVariantGenerator(debug0, (List<Variant>)ImmutableList.of((Object)debug1));
+        return new MultiVariantGenerator(debug0, (List<Variant>)ImmutableList.of(debug1)); // MagmaCube - decompile fix
     }
 
     public static MultiVariantGenerator multiVariant(Block debug0, Variant ... debug1) {
-        return new MultiVariantGenerator(debug0, (List<Variant>)ImmutableList.copyOf((Object[])debug1));
-    }
-
-    @Override
-    public /* synthetic */ Object get() {
-        return this.get();
+        return new MultiVariantGenerator(debug0, (List<Variant>)ImmutableList.copyOf(debug1)); // MagmaCube - decompile fix
     }
 }
 
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
index 2b0e38e00814a0b43043be532f19fa41b9e2c215..6a06eb92b62fa1be3c8d169ce555fb383cf3ea31 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
@@ -85,17 +85,17 @@ public class GameTestRunner {
     }
 
     public static Collection<GameTestBatch> groupTestsIntoBatches(Collection<TestFunction> debug0) {
-        HashMap debug12 = Maps.newHashMap();
+        HashMap<String, Collection<TestFunction>> debug12 = Maps.newHashMap(); // MagmaCube - decompile fix
         debug0.forEach(debug1 -> {
             String debug2 = debug1.getBatchName();
-            Collection debug3 = debug12.computeIfAbsent(debug2, debug0 -> Lists.newArrayList());
+            Collection<TestFunction> debug3 = debug12.computeIfAbsent(debug2, debug02 -> Lists.newArrayList()); // MagmaCube - decompile fix
             debug3.add(debug1);
         });
         return debug12.keySet().stream().flatMap(debug1 -> {
-            Collection debug2 = (Collection)debug12.get(debug1);
+            Collection<TestFunction> debug2 = debug12.get(debug1); // MagmaCube - decompile fix
             Consumer<ServerLevel> debug3 = GameTestRegistry.getBeforeBatchFunction(debug1);
             MutableInt debug42 = new MutableInt();
-            return Streams.stream((Iterable)Iterables.partition((Iterable)debug2, (int)100)).map(debug4 -> new GameTestBatch(debug1 + ":" + debug42.incrementAndGet(), debug2, debug3));
+            return Streams.stream(Iterables.partition(debug2, 100)).map(debug4 -> new GameTestBatch(debug1 + ":" + debug42.incrementAndGet(), debug2, debug3)); // MagmaCube - decompile fix
         }).collect(Collectors.toList());
     }
 
@@ -141,11 +141,11 @@ public class GameTestRunner {
         ItemStack debug3 = new ItemStack(Items.WRITABLE_BOOK);
         ListTag debug4 = new ListTag();
         StringBuffer debug5 = new StringBuffer();
-        Arrays.stream(debug0.split("Â¥Â¥.")).forEach(debug1 -> debug5.append((String)debug1).append('Â¥n'));
+        Arrays.stream(debug0.split("\\.")).forEach(debug1 -> debug5.append((String)debug1).append('\n')); // MagmaCube - decompile fix
         if (!debug12) {
-            debug5.append("(optional)Â¥n");
+            debug5.append("(optional)\n"); // MagmaCube - decompile fix
         }
-        debug5.append("-------------------Â¥n");
+        debug5.append("-------------------\n"); // MagmaCube - decompile fix
         debug4.add(StringTag.valueOf(debug5.toString() + debug2));
         debug3.addTagElement("pages", debug4);
         return debug3;
@@ -168,10 +168,12 @@ public class GameTestRunner {
         BlockPos debug4 = debug12.offset(-debug3, 0, -debug3);
         BlockPos debug5 = debug12.offset(debug3, 0, debug3);
         BlockPos.betweenClosedStream(debug4, debug5).filter(debug1 -> debug0.getBlockState((BlockPos)debug1).is(Blocks.STRUCTURE_BLOCK)).forEach(debug1 -> {
-            StructureBlockEntity debug2 = (StructureBlockEntity)debug0.getBlockEntity((BlockPos)debug1);
-            BlockPos debug3 = debug2.getBlockPos();
-            BoundingBox debug4 = StructureUtils.getStructureBoundingBox(debug2);
-            StructureUtils.clearSpaceForStructure(debug4, debug3.getY(), debug0);
+            // MagmaCube start - decompile fix
+            StructureBlockEntity debug22 = (StructureBlockEntity)debug0.getBlockEntity((BlockPos)debug1);
+            BlockPos debug32 = debug22.getBlockPos();
+            BoundingBox debug42 = StructureUtils.getStructureBoundingBox(debug22);
+            StructureUtils.clearSpaceForStructure(debug42, debug32.getY(), debug0);
+            // MagmaCube end - decompile fix
         });
     }
 }
diff --git a/src/main/java/net/minecraft/nbt/CompoundTag.java b/src/main/java/net/minecraft/nbt/CompoundTag.java
index ca3d05dd37c136887d8b3c88b9301000a5476406..043de39eee5818fc651ca6883519ac1ece8d332d 100644
--- a/src/main/java/net/minecraft/nbt/CompoundTag.java
+++ b/src/main/java/net/minecraft/nbt/CompoundTag.java
@@ -170,7 +170,7 @@ public class CompoundTag implements Tag
     public byte getByte(final String debug1) {
         try {
             if (this.contains(debug1, 99)) {
-                return this.tags.get(debug1).getAsByte();
+                return ((NumericTag) this.tags.get(debug1)).getAsByte(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException ex) {}
@@ -180,7 +180,7 @@ public class CompoundTag implements Tag
     public short getShort(final String debug1) {
         try {
             if (this.contains(debug1, 99)) {
-                return this.tags.get(debug1).getAsShort();
+                return ((NumericTag) this.tags.get(debug1)).getAsShort(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException ex) {}
@@ -190,7 +190,7 @@ public class CompoundTag implements Tag
     public int getInt(final String debug1) {
         try {
             if (this.contains(debug1, 99)) {
-                return this.tags.get(debug1).getAsInt();
+                return ((NumericTag) this.tags.get(debug1)).getAsInt(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException ex) {}
@@ -200,7 +200,7 @@ public class CompoundTag implements Tag
     public long getLong(final String debug1) {
         try {
             if (this.contains(debug1, 99)) {
-                return this.tags.get(debug1).getAsLong();
+                return ((NumericTag) this.tags.get(debug1)).getAsLong(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException ex) {}
@@ -210,7 +210,7 @@ public class CompoundTag implements Tag
     public float getFloat(final String debug1) {
         try {
             if (this.contains(debug1, 99)) {
-                return this.tags.get(debug1).getAsFloat();
+                return ((NumericTag) this.tags.get(debug1)).getAsFloat(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException ex) {}
@@ -220,7 +220,7 @@ public class CompoundTag implements Tag
     public double getDouble(final String debug1) {
         try {
             if (this.contains(debug1, 99)) {
-                return this.tags.get(debug1).getAsDouble();
+                return ((NumericTag) this.tags.get(debug1)).getAsDouble(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException ex) {}
@@ -240,7 +240,7 @@ public class CompoundTag implements Tag
     public byte[] getByteArray(final String debug1) {
         try {
             if (this.contains(debug1, 7)) {
-                return this.tags.get(debug1).getAsByteArray();
+                return ((ByteArrayTag) this.tags.get(debug1)).getAsByteArray(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException debug2) {
@@ -252,7 +252,7 @@ public class CompoundTag implements Tag
     public int[] getIntArray(final String debug1) {
         try {
             if (this.contains(debug1, 11)) {
-                return this.tags.get(debug1).getAsIntArray();
+                return ((IntArrayTag) this.tags.get(debug1)).getAsIntArray(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException debug2) {
@@ -264,7 +264,7 @@ public class CompoundTag implements Tag
     public long[] getLongArray(final String debug1) {
         try {
             if (this.contains(debug1, 12)) {
-                return this.tags.get(debug1).getAsLongArray();
+                return ((LongArrayTag) this.tags.get(debug1)).getAsLongArray(); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException debug2) {
@@ -276,7 +276,7 @@ public class CompoundTag implements Tag
     public CompoundTag getCompound(final String debug1) {
         try {
             if (this.contains(debug1, 10)) {
-                return this.tags.get(debug1);
+                return (CompoundTag) this.tags.get(debug1); // MagmaCube - decompile fix
             }
         }
         catch (ClassCastException debug2) {
@@ -288,7 +288,7 @@ public class CompoundTag implements Tag
     public ListTag getList(final String debug1, final int debug2) {
         try {
             if (this.getTagType(debug1) == 9) {
-                final ListTag debug3 = this.tags.get(debug1);
+                final ListTag debug3 = (ListTag) this.tags.get(debug1); // MagmaCube - decompile fix
                 if (debug3.isEmpty() || debug3.getElementType() == debug2) {
                     return debug3;
                 }
@@ -458,16 +458,15 @@ public class CompoundTag implements Tag
     }
     
     static {
-        final Tag debug;
         CODEC = Codec.PASSTHROUGH.comapFlatMap(debug0 -> {
-            debug = (Tag)debug0.convert((DynamicOps)NbtOps.INSTANCE).getValue();
+            Tag debug = debug0.convert(NbtOps.INSTANCE).getValue(); // MagmaCube - decompile fix
             if (debug instanceof CompoundTag) {
-                return DataResult.success((Object)debug);
+                return DataResult.success((CompoundTag) debug); // MagmaCube - decompile fix
             }
             else {
                 return DataResult.error("Not a compound tag: " + debug);
             }
-        }, debug0 -> new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug0));
+        }, debug0 -> new Dynamic(NbtOps.INSTANCE, debug0)); // MagmaCube - decompile fix
         LOGGER = LogManager.getLogger();
         SIMPLE_VALUE = Pattern.compile("[A-Za-z0-9._+-]+");
         TYPE = new TagType<CompoundTag>() {
@@ -477,7 +476,7 @@ public class CompoundTag implements Tag
                 if (debug2 > 512) {
                     throw new RuntimeException("Tried to read NBT tag with too high complexity, depth > 512");
                 }
-                final Map<String, Tag> debug4 = (Map<String, Tag>)Maps.newHashMap();
+                final Map<String, Tag> debug4 = Maps.newHashMap(); // MagmaCube - decompile fix
                 byte debug5;
                 while ((debug5 = readNamedTagType(debug1, debug3)) != 0) {
                     final String debug6 = readNamedTagName(debug1, debug3);
diff --git a/src/main/java/net/minecraft/nbt/ListTag.java b/src/main/java/net/minecraft/nbt/ListTag.java
index 5c347a5918b8999eb4288e533bf36a6d47c7082e..aa5b74f5d1ae8789cbf084e4760d43ffbb44d163 100644
--- a/src/main/java/net/minecraft/nbt/ListTag.java
+++ b/src/main/java/net/minecraft/nbt/ListTag.java
@@ -304,11 +304,11 @@ public class ListTag extends CollectionTag<Tag>
                 }
                 debug3.accountBits(32L * debug5);
                 final TagType<?> debug6 = TagTypes.getType(debug4);
-                final List<Tag> debug7 = (List<Tag>)Lists.newArrayListWithCapacity(debug5);
+                final List<Tag> debug7 = Lists.newArrayListWithCapacity(debug5); // MagmaCube - decompile fix
                 for (int debug8 = 0; debug8 < debug5; ++debug8) {
                     debug7.add((Tag)debug6.load(debug1, debug2 + 1, debug3));
                 }
-                return new ListTag(debug7, debug4, null);
+                return new ListTag(debug7, debug4); // MagmaCube - decompile fix
             }
             
             @Override
diff --git a/src/main/java/net/minecraft/nbt/ShortTag.java b/src/main/java/net/minecraft/nbt/ShortTag.java
index f4f275c21916e04337d3fcba3ceee781d49398b5..652a91ffe648b0b03edbaf2a883abed2e0ceca76 100644
--- a/src/main/java/net/minecraft/nbt/ShortTag.java
+++ b/src/main/java/net/minecraft/nbt/ShortTag.java
@@ -130,7 +130,7 @@ public class ShortTag extends NumericTag
         static {
             cache = new ShortTag[1153];
             for (int debug0 = 0; debug0 < Cache.cache.length; ++debug0) {
-                Cache.cache[debug0] = new ShortTag((short)(-128 + debug0), null);
+                Cache.cache[debug0] = new ShortTag((short)(-128 + debug0)); // MagmaCube - decompile fix
             }
         }
     }
diff --git a/src/main/java/net/minecraft/nbt/StringTag.java b/src/main/java/net/minecraft/nbt/StringTag.java
index b3b4c342f77d713f3b1f4f035878eb5701643611..f4008bf116146361b429eafc85f791856ee57ba2 100644
--- a/src/main/java/net/minecraft/nbt/StringTag.java
+++ b/src/main/java/net/minecraft/nbt/StringTag.java
@@ -78,24 +78,26 @@ public class StringTag implements Tag
     
     public static String quoteAndEscape(final String debug0) {
         final StringBuilder debug = new StringBuilder(" ");
-        char debug2 = 'Â¥0';
+        // MagmaCube start - decompile fix
+        char debug2 = '\0';
         for (int debug3 = 0; debug3 < debug0.length(); ++debug3) {
             final char debug4 = debug0.charAt(debug3);
-            if (debug4 == 'Â¥Â¥') {
-                debug.append('Â¥Â¥');
+            if (debug4 == '\\') {
+                debug.append('\\');
             }
-            else if (debug4 == 'Â¥"' || debug4 == 'Â¥'') {
-                if (debug2 == 'Â¥0') {
-                    debug2 = ((debug4 == 'Â¥"') ? 'Â¥'' : 'Â¥"');
+            else if (debug4 == '\"' || debug4 == '\'') {
+                if (debug2 == '\0') {
+                    debug2 = ((debug4 == '\"') ? '\'' : '\"');
                 }
                 if (debug2 == debug4) {
-                    debug.append('Â¥Â¥');
+                    debug.append('\\');
                 }
             }
             debug.append(debug4);
         }
-        if (debug2 == 'Â¥0') {
-            debug2 = 'Â¥"';
+        if (debug2 == '\0') {
+            debug2 = '\"';
+            // MagmaCube end - decompile fix
         }
         debug.setCharAt(0, debug2);
         debug.append(debug2);
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 74f95132282c8d4d4fd4858038c915631e2853dd..23405dd74699e4b00a8989619c3687c1b6c5353a 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -75,7 +75,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>>
     private boolean handlingFault;
     
     public Connection(final PacketFlow debug1) {
-        this.queue = (Queue<PacketHolder>)Queues.newConcurrentLinkedQueue();
+        this.queue = Queues.newConcurrentLinkedQueue(); // MagmaCube - decompile fix
         this.receiving = debug1;
     }
     
@@ -119,7 +119,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>>
             final Component debug4 = new TranslatableComponent("disconnect.genericReason", new Object[] { "Internal Exception: " + debug2 });
             if (debug3) {
                 Connection.LOGGER.debug("Failed to sent packet", debug2);
-                this.send(new ClientboundDisconnectPacket(debug4), (GenericFutureListener<? extends Future<? super Void>>)(debug2 -> this.disconnect(debug4)));
+                this.send(new ClientboundDisconnectPacket(debug4), (GenericFutureListener<? extends Future<? super Void>>)(debug2l -> this.disconnect(debug4))); // MagmaCube - decompile fix
                 this.setReadOnly();
             }
             else {
@@ -181,13 +181,11 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>>
             debug5.addListener((GenericFutureListener)ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
         }
         else {
-            final ConnectionProtocol protocol;
-            final ChannelFuture debug6;
             this.channel.eventLoop().execute(() -> {
-                if (protocol != debug4) {
-                    this.setProtocol(protocol);
+                if (debug3 != debug4) { // MagmaCube - decompile fix
+                    this.setProtocol(debug3); // MagmaCube - decompile fix
                 }
-                debug6 = this.channel.writeAndFlush((Object)debug1);
+                ChannelFuture debug6 = this.channel.writeAndFlush((Object)debug1); // MagmaCube - decompile fix
                 if (debug2 != null) {
                     debug6.addListener((GenericFutureListener)debug2);
                 }
@@ -261,7 +259,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>>
         ((Bootstrap)((Bootstrap)((Bootstrap)new Bootstrap().group((EventLoopGroup)debug5.get())).handler((ChannelHandler)new ChannelInitializer<Channel>() {
             protected void initChannel(final Channel debug1) throws Exception {
                 try {
-                    debug1.config().setOption(ChannelOption.TCP_NODELAY, (Object)true);
+                    debug1.config().setOption(ChannelOption.TCP_NODELAY, true); // MagmaCube - decompile fix
                 }
                 catch (ChannelException ex) {}
                 debug1.pipeline().addLast("timeout", (ChannelHandler)new ReadTimeoutHandler(30)).addLast("splitter", (ChannelHandler)new Varint21FrameDecoder()).addLast("decoder", (ChannelHandler)new PacketDecoder(PacketFlow.CLIENTBOUND)).addLast("prepender", (ChannelHandler)new Varint21LengthFieldPrepender()).addLast("encoder", (ChannelHandler)new PacketEncoder(PacketFlow.SERVERBOUND)).addLast("packet_handler", (ChannelHandler)debug3);
@@ -369,18 +367,15 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>>
         ATTRIBUTE_PROTOCOL = AttributeKey.valueOf("protocol");
         final NioEventLoopGroup nioEventLoopGroup;
         NETWORK_WORKER_GROUP = new LazyLoadedValue<NioEventLoopGroup>(() -> {
-            new NioEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Client IO #%d").setDaemon(true).build());
-            return nioEventLoopGroup;
+            return new NioEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Client IO #%d").setDaemon(true).build()); // MagmaCube - decompile fix
         });
         final EpollEventLoopGroup epollEventLoopGroup;
         NETWORK_EPOLL_WORKER_GROUP = new LazyLoadedValue<EpollEventLoopGroup>(() -> {
-            new EpollEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).build());
-            return epollEventLoopGroup;
+            return new EpollEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).build()); // MagmaCube - decompile fix
         });
         final DefaultEventLoopGroup defaultEventLoopGroup;
         LOCAL_WORKER_GROUP = new LazyLoadedValue<DefaultEventLoopGroup>(() -> {
-            new DefaultEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Local Client IO #%d").setDaemon(true).build());
-            return defaultEventLoopGroup;
+            return new DefaultEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Local Client IO #%d").setDaemon(true).build()); // MagmaCube - decompile fix
         });
     }
     
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 2cd29f82bf585372b15056e8a975cdd5abb3ae84..4b3499d9e5c24a40d7e8b84a025693ff220f28df 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -61,7 +61,7 @@ public class FriendlyByteBuf extends ByteBuf
     
     public <T> T readWithCodec(final Codec<T> debug1) throws IOException {
         final CompoundTag debug2 = this.readAnySizeNbt();
-        final DataResult<T> debug3 = (DataResult<T>)debug1.parse((DynamicOps)NbtOps.INSTANCE, (Object)debug2);
+        final DataResult<T> debug3 = (DataResult<T>)debug1.parse((DynamicOps)NbtOps.INSTANCE, debug2); // MagmaCube - decompile fix
         if (debug3.error().isPresent()) {
             throw new IOException("Failed to decode: " + debug3.error().get().message() + " " + debug2);
         }
@@ -69,11 +69,11 @@ public class FriendlyByteBuf extends ByteBuf
     }
     
     public <T> void writeWithCodec(final Codec<T> debug1, final T debug2) throws IOException {
-        final DataResult<Tag> debug3 = (DataResult<Tag>)debug1.encodeStart((DynamicOps)NbtOps.INSTANCE, (Object)debug2);
+        final DataResult<Tag> debug3 = (DataResult<Tag>)debug1.encodeStart((DynamicOps)NbtOps.INSTANCE, debug2); // MagmaCube - decompile fix
         if (debug3.error().isPresent()) {
             throw new IOException("Failed to encode: " + debug3.error().get().message() + " " + debug2);
         }
-        this.writeNbt(debug3.result().get());
+        this.writeNbt((CompoundTag) debug3.result().get()); // MagmaCube - decompile fix
     }
     
     public FriendlyByteBuf writeByteArray(final byte[] debug1) {
diff --git a/src/main/java/net/minecraft/network/chat/BaseComponent.java b/src/main/java/net/minecraft/network/chat/BaseComponent.java
index 3cf1d8d0580081b4897677440bc930b4fe8a1d92..8591a16a7222db9d8929bc87e30a1a988598fa11 100644
--- a/src/main/java/net/minecraft/network/chat/BaseComponent.java
+++ b/src/main/java/net/minecraft/network/chat/BaseComponent.java
@@ -17,7 +17,7 @@ public abstract class BaseComponent implements MutableComponent
     private Style style;
     
     public BaseComponent() {
-        this.siblings = (List<Component>)Lists.newArrayList();
+        this.siblings = Lists.newArrayList(); // MagmaCube - decompile fix
         this.visualOrderText = FormattedCharSequence.EMPTY;
         this.style = Style.EMPTY;
     }
diff --git a/src/main/java/net/minecraft/network/chat/ClickEvent.java b/src/main/java/net/minecraft/network/chat/ClickEvent.java
index 13afaa4f4d000cfa56e599bdb3a55a531a9bc78f..3ff73c9c25ae603e53a6776db09211ba1bba8602 100644
--- a/src/main/java/net/minecraft/network/chat/ClickEvent.java
+++ b/src/main/java/net/minecraft/network/chat/ClickEvent.java
@@ -39,7 +39,7 @@ public class ClickEvent {
     }
 
     public String toString() {
-        return "ClickEvent{action=" + (Object)((Object)this.action) + ", value='" + this.value + 'Â¥'' + '}';
+        return "ClickEvent{action=" + (Object)((Object)this.action) + ", value='" + this.value + '\'' + '}'; // MagmaCube - decompile fix
     }
 
     public int hashCode() {
diff --git a/src/main/java/net/minecraft/network/chat/Component.java b/src/main/java/net/minecraft/network/chat/Component.java
index 1e63f1d82887935f6298360394f0931f2f4ccf15..b4bcf9b68377bde70cc3d6050e0bb2a440f81869 100644
--- a/src/main/java/net/minecraft/network/chat/Component.java
+++ b/src/main/java/net/minecraft/network/chat/Component.java
@@ -40,15 +40,13 @@ public interface Component extends Message, FormattedText
     String getContents();
     
     default String getString() {
-        return super.getString();
+        return FormattedText.super.getString(); // MagmaCube - decompile fix
     }
     
     default String getString(final int debug1) {
-        final StringBuilder debug3 = new StringBuilder();
-        final StringBuilder sb;
-        final int debug4;
+        final StringBuilder sb = new StringBuilder(); // MagmaCube - decompile fix
         this.visit(debug2 -> {
-            debug4 = debug1 - sb.length();
+            int debug4 = debug1 - sb.length(); // MagmaCube - decompile fix
             if (debug4 <= 0) {
                 return Component.STOP_ITERATION;
             }
@@ -57,7 +55,7 @@ public interface Component extends Message, FormattedText
                 return Optional.empty();
             }
         });
-        return debug3.toString();
+        return sb.toString(); // MagmaCube - decompile fix
     }
     
     List<Component> getSiblings();
@@ -320,9 +318,7 @@ public interface Component extends Message, FormattedText
                 return debug2;
             }
             catch (IOException | StackOverflowError ex) {
-                final Throwable t;
-                final Throwable debug3 = t;
-                throw new JsonParseException(debug3);
+                throw new JsonParseException(ex); // MagmaCube - decompile fix
             }
         }
         
@@ -336,20 +332,18 @@ public interface Component extends Message, FormattedText
         }
         
         static {
-            final GsonBuilder debug0;
             GSON = Util.make(() -> {
-                debug0 = new GsonBuilder();
+                GsonBuilder debug0 = new GsonBuilder(); // MagmaCube - decompile fix
                 debug0.disableHtmlEscaping();
                 debug0.registerTypeHierarchyAdapter((Class)Component.class, (Object)new Serializer());
                 debug0.registerTypeHierarchyAdapter((Class)Style.class, (Object)new Style.Serializer());
                 debug0.registerTypeAdapterFactory((TypeAdapterFactory)new LowerCaseEnumTypeAdapterFactory());
                 return debug0.create();
             });
-            Field debug2;
             JSON_READER_POS = Util.make(() -> {
                 try {
                     new JsonReader((Reader)new java.io.StringReader(""));
-                    debug2 = JsonReader.class.getDeclaredField("pos");
+                    Field debug2 = JsonReader.class.getDeclaredField("pos"); // MagmaCube - decompile fix
                     debug2.setAccessible(true);
                     return debug2;
                 }
@@ -357,11 +351,10 @@ public interface Component extends Message, FormattedText
                     throw new IllegalStateException("Couldn't get field 'pos' for JsonReader", debug3);
                 }
             });
-            Field debug4;
             JSON_READER_LINESTART = Util.make(() -> {
                 try {
                     new JsonReader((Reader)new java.io.StringReader(""));
-                    debug4 = JsonReader.class.getDeclaredField("lineStart");
+                    Field debug4 = JsonReader.class.getDeclaredField("lineStart"); // MagmaCube - decompile fix
                     debug4.setAccessible(true);
                     return debug4;
                 }
diff --git a/src/main/java/net/minecraft/network/chat/FormattedText.java b/src/main/java/net/minecraft/network/chat/FormattedText.java
index dbc9f6d46a14d5fe43fe248fd89e3ffc4d23b27a..e2a7886178f8d64174144da187c60e64a33ef20c 100644
--- a/src/main/java/net/minecraft/network/chat/FormattedText.java
+++ b/src/main/java/net/minecraft/network/chat/FormattedText.java
@@ -25,7 +25,7 @@ public interface FormattedText
     
      <T> Optional<T> visit(final StyledContentConsumer<T> p0, final Style p1);
     
-    default FormattedText of(final String debug0) {
+    static FormattedText of(final String debug0) { // MagmaCube - decompile fix
         return new FormattedText() {
             @Override
             public <T> Optional<T> visit(final ContentConsumer<T> debug1) {
@@ -39,7 +39,7 @@ public interface FormattedText
         };
     }
     
-    default FormattedText of(final String debug0, final Style debug1) {
+    static FormattedText of(final String debug0, final Style debug1) { // MagmaCube - decompile fix
         return new FormattedText() {
             @Override
             public <T> Optional<T> visit(final ContentConsumer<T> debug1) {
@@ -48,16 +48,16 @@ public interface FormattedText
             
             @Override
             public <T> Optional<T> visit(final StyledContentConsumer<T> debug1, final Style debug2) {
-                return debug1.accept(debug1.applyTo(debug2), debug0);
+                return debug1.accept(debug2, debug0); // MagmaCube - decompile fix
             }
         };
     }
     
-    default FormattedText composite(final FormattedText... debug0) {
-        return composite((List<FormattedText>)ImmutableList.copyOf((Object[])debug0));
+    static FormattedText composite(final FormattedText... debug0) { // MagmaCube - decompile fix
+        return composite(ImmutableList.copyOf(debug0)); // MagmaCube - decompile fix
     }
     
-    default FormattedText composite(final List<FormattedText> debug0) {
+    static FormattedText composite(final List<FormattedText> debug0) { // MagmaCube - decompile fix
         return new FormattedText() {
             @Override
             public <T> Optional<T> visit(final ContentConsumer<T> debug1) {
diff --git a/src/main/java/net/minecraft/network/chat/HoverEvent.java b/src/main/java/net/minecraft/network/chat/HoverEvent.java
index 0530067abe62969cab1f11a2d631f120f2f9aca6..0d570b2f2e3d5c02115962f99506c2ac9800e6c1 100644
--- a/src/main/java/net/minecraft/network/chat/HoverEvent.java
+++ b/src/main/java/net/minecraft/network/chat/HoverEvent.java
@@ -76,7 +76,7 @@ public class HoverEvent {
     }
 
     public String toString() {
-        return "HoverEvent{action=" + this.action + ", value='" + this.value + 'Â¥'' + '}';
+        return "HoverEvent{action=" + this.action + ", value='" + this.value + '\'' + '}'; // MagmaCube - decompile fix
     }
 
     public int hashCode() {
@@ -115,7 +115,7 @@ public class HoverEvent {
 
     public static class Action<T> {
         public static final Action<Component> SHOW_TEXT = new Action<Component>("show_text", true, Component.Serializer::fromJson, Component.Serializer::toJsonTree, Function.identity());
-        public static final Action<ItemStackInfo> SHOW_ITEM = new Action<ItemStackInfo>("show_item", true, debug0 -> ItemStackInfo.access$400(debug0), debug0 -> ItemStackInfo.access$300((ItemStackInfo)debug0), debug0 -> ItemStackInfo.access$200(debug0));
+        public static final Action<ItemStackInfo> SHOW_ITEM = new Action<ItemStackInfo>("show_item", true, debug0 -> ItemStackInfo.create(debug0), debug0 -> debug0.serialize(), debug0 -> ItemStackInfo.create(debug0)); // MagmaCube - decompile fix
         public static final Action<EntityTooltipInfo> SHOW_ENTITY = new Action<EntityTooltipInfo>("show_entity", true, EntityTooltipInfo::create, EntityTooltipInfo::serialize, EntityTooltipInfo::create);
         private static final Map<String, Action> LOOKUP = (Map)Stream.of(SHOW_TEXT, SHOW_ITEM, SHOW_ENTITY).collect(ImmutableMap.toImmutableMap(Action::getName, debug0 -> debug0));
         private final String name;
diff --git a/src/main/java/net/minecraft/network/chat/KeybindComponent.java b/src/main/java/net/minecraft/network/chat/KeybindComponent.java
index 8e66d2d02617359917ef6a3a46509c146c62a0da..acaf27812284cd95d34d297c905045d185da9fd0 100644
--- a/src/main/java/net/minecraft/network/chat/KeybindComponent.java
+++ b/src/main/java/net/minecraft/network/chat/KeybindComponent.java
@@ -54,7 +54,7 @@ public class KeybindComponent extends BaseComponent
     
     @Override
     public String toString() {
-        return "KeybindComponent{keybind='" + this.name + 'Â¥'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
+        return "KeybindComponent{keybind='" + this.name + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}'; // MagmaCube - decompile fix
     }
     
     public String getName() {
diff --git a/src/main/java/net/minecraft/network/chat/MutableComponent.java b/src/main/java/net/minecraft/network/chat/MutableComponent.java
index 867efeb800ad54eaabb8052c5b881969aa3488d9..421da1f09f3a48e43c3c90a82c9d5a5d3b1eb3e2 100644
--- a/src/main/java/net/minecraft/network/chat/MutableComponent.java
+++ b/src/main/java/net/minecraft/network/chat/MutableComponent.java
@@ -14,22 +14,22 @@ public interface MutableComponent extends Component
     MutableComponent append(final Component p0);
     
     default MutableComponent withStyle(final UnaryOperator<Style> debug1) {
-        this.setStyle(debug1.apply(super.getStyle()));
+        this.setStyle(debug1.apply(getStyle())); // MagmaCube - decompile fix
         return this;
     }
     
     default MutableComponent withStyle(final Style debug1) {
-        this.setStyle(debug1.applyTo(super.getStyle()));
+        this.setStyle(debug1.applyTo(getStyle())); // MagmaCube - decompile fix
         return this;
     }
     
     default MutableComponent withStyle(final ChatFormatting... debug1) {
-        this.setStyle(super.getStyle().applyFormats(debug1));
+        this.setStyle(getStyle().applyFormats(debug1)); // MagmaCube - decompile fix
         return this;
     }
     
     default MutableComponent withStyle(final ChatFormatting debug1) {
-        this.setStyle(super.getStyle().applyFormat(debug1));
+        this.setStyle(getStyle().applyFormat(debug1)); // MagmaCube - decompile fix
         return this;
     }
 }
diff --git a/src/main/java/net/minecraft/network/chat/NbtComponent.java b/src/main/java/net/minecraft/network/chat/NbtComponent.java
index e026c99647c3c7e8e2bae360708e5d94827b5bdd..224d8c67062feac58704c6959a5c1ccc01bd37e8 100644
--- a/src/main/java/net/minecraft/network/chat/NbtComponent.java
+++ b/src/main/java/net/minecraft/network/chat/NbtComponent.java
@@ -89,18 +89,18 @@ implements ContextAwareComponent {
             try {
                 return this.compiledNbtPath.get((Tag)debug1).stream();
             }
-            catch (CommandSyntaxException debug2) {
+            catch (CommandSyntaxException debug22) { // MagmaCube - decompile fix
                 return Stream.empty();
             }
         }).map(Tag::getAsString);
         if (this.interpreting) {
             return debug4.flatMap(debug3 -> {
                 try {
-                    MutableComponent debug4 = Component.Serializer.fromJson(debug3);
-                    return Stream.of(ComponentUtils.updateForEntity(debug12, debug4, debug2, debug32));
+                    MutableComponent debug44 = Component.Serializer.fromJson(debug3); // MagmaCube - decompile fix
+                    return Stream.of(ComponentUtils.updateForEntity(debug12, debug44, debug2, debug32)); // MagmaCube - decompile fix
                 }
-                catch (Exception debug4) {
-                    LOGGER.warn("Failed to parse component: " + debug3, (Throwable)debug4);
+                catch (Exception debug44) { // MagmaCube - decompile fix
+                    LOGGER.warn("Failed to parse component: " + debug3, (Throwable)debug44); // MagmaCube - decompile fix
                     return Stream.of(new MutableComponent[0]);
                 }
             }).reduce((debug0, debug1) -> debug0.append(", ").append((Component)debug1)).orElse(new TextComponent(""));
@@ -151,17 +151,7 @@ implements ContextAwareComponent {
 
         @Override
         public String toString() {
-            return "StorageNbtComponent{id='" + this.id + 'Â¥'' + "path='" + this.nbtPathPattern + 'Â¥'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
-        }
-
-        @Override
-        public /* synthetic */ BaseComponent plainCopy() {
-            return this.plainCopy();
-        }
-
-        @Override
-        public /* synthetic */ MutableComponent plainCopy() {
-            return this.plainCopy();
+            return "StorageNbtComponent{id='" + this.id + '\'' + "path='" + this.nbtPathPattern + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}'; // MagmaCube - decompile fix
         }
     }
 
@@ -228,17 +218,7 @@ implements ContextAwareComponent {
 
         @Override
         public String toString() {
-            return "BlockPosArgument{pos='" + this.posPattern + 'Â¥'' + "path='" + this.nbtPathPattern + 'Â¥'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
-        }
-
-        @Override
-        public /* synthetic */ BaseComponent plainCopy() {
-            return this.plainCopy();
-        }
-
-        @Override
-        public /* synthetic */ MutableComponent plainCopy() {
-            return this.plainCopy();
+            return "BlockPosArgument{pos='" + this.posPattern + '\'' + "path='" + this.nbtPathPattern + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}'; // MagmaCube - decompile fix
         }
     }
 
@@ -303,17 +283,7 @@ implements ContextAwareComponent {
 
         @Override
         public String toString() {
-            return "EntityNbtComponent{selector='" + this.selectorPattern + 'Â¥'' + "path='" + this.nbtPathPattern + 'Â¥'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
-        }
-
-        @Override
-        public /* synthetic */ BaseComponent plainCopy() {
-            return this.plainCopy();
-        }
-
-        @Override
-        public /* synthetic */ MutableComponent plainCopy() {
-            return this.plainCopy();
+            return "EntityNbtComponent{selector='" + this.selectorPattern + '\'' + "path='" + this.nbtPathPattern + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
         }
     }
 }
diff --git a/src/main/java/net/minecraft/network/chat/ScoreComponent.java b/src/main/java/net/minecraft/network/chat/ScoreComponent.java
index 8e6af070f44b03bf3c108fb51b109c528380f513..8b00f8c5a975634bd51fd4095d159bfdb682ce1f 100644
--- a/src/main/java/net/minecraft/network/chat/ScoreComponent.java
+++ b/src/main/java/net/minecraft/network/chat/ScoreComponent.java
@@ -113,17 +113,7 @@ implements ContextAwareComponent {
 
     @Override
     public String toString() {
-        return "ScoreComponent{name='" + this.name + 'Â¥'' + "objective='" + this.objective + 'Â¥'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
-    }
-
-    @Override
-    public /* synthetic */ BaseComponent plainCopy() {
-        return this.plainCopy();
-    }
-
-    @Override
-    public /* synthetic */ MutableComponent plainCopy() {
-        return this.plainCopy();
+        return "ScoreComponent{name='" + this.name + '\'' + "objective='" + this.objective + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}'; // MagmaCube - decompile fix
     }
 }
 
diff --git a/src/main/java/net/minecraft/network/chat/SelectorComponent.java b/src/main/java/net/minecraft/network/chat/SelectorComponent.java
index 41e31d4c0db9832e65ba60536a27099b63ba2283..0aa980ceefd30b70d21235c2fd1cf2486775aa96 100644
--- a/src/main/java/net/minecraft/network/chat/SelectorComponent.java
+++ b/src/main/java/net/minecraft/network/chat/SelectorComponent.java
@@ -66,7 +66,7 @@ public class SelectorComponent extends BaseComponent implements ContextAwareComp
     
     @Override
     public String toString() {
-        return "SelectorComponent{pattern='" + this.pattern + 'Â¥'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
+        return "SelectorComponent{pattern='" + this.pattern + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
     }
     
     static {
diff --git a/src/main/java/net/minecraft/network/chat/Style.java b/src/main/java/net/minecraft/network/chat/Style.java
index 1a877b92ea6c75d9b7f2a35449d702193d86d6ac..4655732f6c0cacaed9034d5286beeda2d430e620 100644
--- a/src/main/java/net/minecraft/network/chat/Style.java
+++ b/src/main/java/net/minecraft/network/chat/Style.java
@@ -320,7 +320,7 @@ public class Style
             final ClickEvent debug12 = getClickEvent(debug4);
             final HoverEvent debug13 = getHoverEvent(debug4);
             final ResourceLocation debug14 = getFont(debug4);
-            return new Style(debug10, debug5, debug6, debug7, debug8, debug9, debug12, debug13, debug11, debug14, null);
+            return new Style(debug10, debug5, debug6, debug7, debug8, debug9, debug12, debug13, debug11, debug14); // MagmaCube - decompile fix
         }
         
         @Nullable
diff --git a/src/main/java/net/minecraft/network/chat/TextComponent.java b/src/main/java/net/minecraft/network/chat/TextComponent.java
index aaf8f714a4e325ac561d3e1f57855f91d4cec0e7..afaff8565a187768328ba50d9f1c12ea921d3bff 100644
--- a/src/main/java/net/minecraft/network/chat/TextComponent.java
+++ b/src/main/java/net/minecraft/network/chat/TextComponent.java
@@ -37,7 +37,7 @@ public class TextComponent extends BaseComponent
     
     @Override
     public String toString() {
-        return "TextComponent{text='" + this.text + 'Â¥'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
+        return "TextComponent{text='" + this.text + '\'' + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}'; // MagmaCube - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/network/chat/TranslatableComponent.java b/src/main/java/net/minecraft/network/chat/TranslatableComponent.java
index 6462457f046c34d893bd5dc7e5d0a8223a28d9ff..22297883e494787b62439f317573e696504719df 100644
--- a/src/main/java/net/minecraft/network/chat/TranslatableComponent.java
+++ b/src/main/java/net/minecraft/network/chat/TranslatableComponent.java
@@ -26,13 +26,13 @@ public class TranslatableComponent extends BaseComponent implements ContextAware
     private static final Pattern FORMAT_PATTERN;
     
     public TranslatableComponent(final String debug1) {
-        this.decomposedParts = (List<FormattedText>)Lists.newArrayList();
+        this.decomposedParts = Lists.newArrayList(); // MagmaCube - decompile fix
         this.key = debug1;
         this.args = TranslatableComponent.NO_ARGS;
     }
     
     public TranslatableComponent(final String debug1, final Object... debug2) {
-        this.decomposedParts = (List<FormattedText>)Lists.newArrayList();
+        this.decomposedParts = Lists.newArrayList(); // MagmaCube - decompile fix
         this.key = debug1;
         this.args = debug2;
     }
@@ -176,7 +176,7 @@ public class TranslatableComponent extends BaseComponent implements ContextAware
     
     @Override
     public String toString() {
-        return "TranslatableComponent{key='" + this.key + 'Â¥'' + ", args=" + Arrays.toString(this.args) + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
+        return "TranslatableComponent{key='" + this.key + '\'' + ", args=" + Arrays.toString(this.args) + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}'; // MagmaCube - decompile fix
     }
     
     public String getKey() {
@@ -191,6 +191,6 @@ public class TranslatableComponent extends BaseComponent implements ContextAware
         NO_ARGS = new Object[0];
         TEXT_PERCENT = FormattedText.of("%");
         TEXT_NULL = FormattedText.of("null");
-        FORMAT_PATTERN = Pattern.compile("%(?:(Â¥Â¥d+)Â¥Â¥$)?([A-Za-z%]|$)");
+        FORMAT_PATTERN = Pattern.compile("%(?:(\\d+)\\$)?([A-Za-z%]|$)"); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelParticlesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelParticlesPacket.java
index 243dc5b0bcdab0558aee8a37f8d9bf4689875cb1..0f00024b2006b7396bbe245e5bf280d40a35bd83 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelParticlesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelParticlesPacket.java
@@ -25,7 +25,7 @@ public class ClientboundLevelParticlesPacket implements Packet<ClientGamePacketL
     public ClientboundLevelParticlesPacket() {
     }
     
-    public ClientboundLevelParticlesPacket(final T debug1, final boolean debug2, final double debug3, final double debug5, final double debug7, final float debug9, final float debug10, final float debug11, final float debug12, final int debug13) {
+    public ClientboundLevelParticlesPacket(final ParticleOptions debug1, final boolean debug2, final double debug3, final double debug5, final double debug7, final float debug9, final float debug10, final float debug11, final float debug12, final int debug13) { // MagmaCube - decompile fix
         this.particle = debug1;
         this.overrideLimiter = debug2;
         this.x = debug3;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLightUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLightUpdatePacket.java
index b043aa7d73756f7e1d6bc550bbee2adddf8c2dd5..dcc5db75d647ae05a9e0a0dcdc4f4ab1a60488aa 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLightUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLightUpdatePacket.java
@@ -32,8 +32,8 @@ public class ClientboundLightUpdatePacket implements Packet<ClientGamePacketList
         this.x = debug1.x;
         this.z = debug1.z;
         this.trustEdges = debug3;
-        this.skyUpdates = (List<byte[]>)Lists.newArrayList();
-        this.blockUpdates = (List<byte[]>)Lists.newArrayList();
+        this.skyUpdates = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.blockUpdates = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug4 = 0; debug4 < 18; ++debug4) {
             final DataLayer debug5 = debug2.getLayerListener(LightLayer.SKY).getDataLayerData(SectionPos.of(debug1, -1 + debug4));
             final DataLayer debug6 = debug2.getLayerListener(LightLayer.BLOCK).getDataLayerData(SectionPos.of(debug1, -1 + debug4));
@@ -64,13 +64,13 @@ public class ClientboundLightUpdatePacket implements Packet<ClientGamePacketList
         this.trustEdges = debug5;
         this.skyYMask = debug3;
         this.blockYMask = debug4;
-        this.skyUpdates = (List<byte[]>)Lists.newArrayList();
-        this.blockUpdates = (List<byte[]>)Lists.newArrayList();
+        this.skyUpdates = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.blockUpdates = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug6 = 0; debug6 < 18; ++debug6) {
             if ((this.skyYMask & 1 << debug6) != 0x0) {
                 final DataLayer debug7 = debug2.getLayerListener(LightLayer.SKY).getDataLayerData(SectionPos.of(debug1, -1 + debug6));
                 if (debug7 == null || debug7.isEmpty()) {
-                    this.skyYMask &= â¾(1 << debug6);
+                    this.skyYMask &= (1 << debug6); // MagmaCube - decompile fix
                     if (debug7 != null) {
                         this.emptySkyYMask |= 1 << debug6;
                     }
@@ -82,7 +82,7 @@ public class ClientboundLightUpdatePacket implements Packet<ClientGamePacketList
             if ((this.blockYMask & 1 << debug6) != 0x0) {
                 final DataLayer debug7 = debug2.getLayerListener(LightLayer.BLOCK).getDataLayerData(SectionPos.of(debug1, -1 + debug6));
                 if (debug7 == null || debug7.isEmpty()) {
-                    this.blockYMask &= â¾(1 << debug6);
+                    this.blockYMask &= (1 << debug6); // MagmaCube - decompile fix
                     if (debug7 != null) {
                         this.emptyBlockYMask |= 1 << debug6;
                     }
@@ -103,13 +103,13 @@ public class ClientboundLightUpdatePacket implements Packet<ClientGamePacketList
         this.blockYMask = debug1.readVarInt();
         this.emptySkyYMask = debug1.readVarInt();
         this.emptyBlockYMask = debug1.readVarInt();
-        this.skyUpdates = (List<byte[]>)Lists.newArrayList();
+        this.skyUpdates = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug2 = 0; debug2 < 18; ++debug2) {
             if ((this.skyYMask & 1 << debug2) != 0x0) {
                 this.skyUpdates.add(debug1.readByteArray(2048));
             }
         }
-        this.blockUpdates = (List<byte[]>)Lists.newArrayList();
+        this.blockUpdates = Lists.newArrayList(); // MagmaCube - decompile fix
         for (int debug2 = 0; debug2 < 18; ++debug2) {
             if ((this.blockYMask & 1 << debug2) != 0x0) {
                 this.blockUpdates.add(debug1.readByteArray(2048));
diff --git a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
index be63f198d8ac862371462c0b04b53af3911d3220..adacf2384f29f6524e3a61f9d33633178511dbc0 100644
--- a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
@@ -32,7 +32,7 @@ public class SynchedEntityData
     private boolean isDirty;
     
     public SynchedEntityData(final Entity debug1) {
-        this.itemsById = (Map<Integer, DataItem<?>>)Maps.newHashMap();
+        this.itemsById = Maps.newHashMap(); // MagmaCube - decompile fix
         this.lock = new ReentrantReadWriteLock();
         this.isEmpty = true;
         this.entity = debug1;
@@ -147,7 +147,7 @@ public class SynchedEntityData
                 if (debug2.isDirty()) {
                     debug2.setDirty(false);
                     if (debug1 == null) {
-                        debug1 = (List<DataItem<?>>)Lists.newArrayList();
+                        debug1 = Lists.newArrayList(); // MagmaCube - decompile fix
                     }
                     debug1.add(debug2.copy());
                 }
@@ -164,7 +164,7 @@ public class SynchedEntityData
         this.lock.readLock().lock();
         for (final DataItem<?> debug2 : this.itemsById.values()) {
             if (debug1 == null) {
-                debug1 = (List<DataItem<?>>)Lists.newArrayList();
+                debug1 = Lists.newArrayList(); // MagmaCube - decompile fix
             }
             debug1.add(debug2.copy());
         }
@@ -189,7 +189,7 @@ public class SynchedEntityData
         int debug2;
         while ((debug2 = debug0.readUnsignedByte()) != 255) {
             if (debug == null) {
-                debug = (List<DataItem<?>>)Lists.newArrayList();
+                debug = Lists.newArrayList(); // MagmaCube - decompile fix
             }
             final int debug3 = debug0.readVarInt();
             final EntityDataSerializer<?> debug4 = EntityDataSerializers.getSerializer(debug3);
diff --git a/src/main/java/net/minecraft/realms/RealmsConnect.java b/src/main/java/net/minecraft/realms/RealmsConnect.java
index 94b5b64abbf4bdd4e7975c2aa4fe7652445f86d0..a5c656a7501e04cc5c7a0db2e8d505473cafd60a 100644
--- a/src/main/java/net/minecraft/realms/RealmsConnect.java
+++ b/src/main/java/net/minecraft/realms/RealmsConnect.java
@@ -84,11 +84,12 @@ public class RealmsConnect {
                         debug33 = debug33.replaceAll((String)debug4, "");
                     }
                     debug4 = new DisconnectedRealmsScreen(RealmsConnect.this.onlineScreen, CommonComponents.CONNECT_FAILED, new TranslatableComponent("disconnect.genericReason", debug33));
-                    debug3.execute(() -> 1.lambda$run$2(debug3, (DisconnectedRealmsScreen)debug4));
+                    Object finalDebug = debug4; // MagmaCube - decompile fix
+                    debug3.execute(() -> lambda$run$2(debug3, (DisconnectedRealmsScreen) finalDebug)); // MagmaCube - decompile fix
                 }
             }
 
-            private static /* synthetic */ void lambda$run$2(Minecraft debug0, DisconnectedRealmsScreen debug12) {
+            private /* synthetic */ void lambda$run$2(Minecraft debug0, DisconnectedRealmsScreen debug12) { // MagmaCube - decompile fix
                 debug0.setScreen(debug12);
             }
         }.start();
diff --git a/src/main/java/net/minecraft/resources/RegistryLookupCodec.java b/src/main/java/net/minecraft/resources/RegistryLookupCodec.java
index afc0214144bf61e94c38dcd21d6b9c311551e022..f45a35f3b71bc6ec6bd0ba9c5550264a40341dd3 100644
--- a/src/main/java/net/minecraft/resources/RegistryLookupCodec.java
+++ b/src/main/java/net/minecraft/resources/RegistryLookupCodec.java
@@ -50,9 +50,5 @@ extends MapCodec<Registry<E>> {
     public <T> Stream<T> keys(DynamicOps<T> debug1) {
         return Stream.empty();
     }
-
-    public /* synthetic */ RecordBuilder encode(Object object, DynamicOps dynamicOps, RecordBuilder recordBuilder) {
-        return this.encode((Registry)object, dynamicOps, recordBuilder);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/resources/RegistryReadOps.java b/src/main/java/net/minecraft/resources/RegistryReadOps.java
index 7e95c395b24edef3d813fbf21126c2519885e174..7df5e57deae2b92d92e03aad1956b90e97cb75bc 100644
--- a/src/main/java/net/minecraft/resources/RegistryReadOps.java
+++ b/src/main/java/net/minecraft/resources/RegistryReadOps.java
@@ -26,6 +26,7 @@ import com.google.common.base.Supplier;
 import com.google.common.base.Suppliers;
 import com.google.common.collect.Maps;
 import com.google.gson.JsonElement;
+import com.google.gson.JsonParser;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
@@ -36,6 +37,11 @@ import com.mojang.serialization.JsonOps;
 import com.mojang.serialization.Lifecycle;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenCustomHashMap;
+
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.IdentityHashMap;
 import java.util.Map;
@@ -51,6 +57,7 @@ import net.minecraft.resources.DelegatingOps;
 import net.minecraft.resources.RegistryWriteOps;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.packs.resources.Resource;
 import net.minecraft.server.packs.resources.ResourceManager;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -78,30 +85,30 @@ extends DelegatingOps<T> {
         this.resources = debug2;
         this.registryHolder = debug3;
         this.readCache = debug4;
-        this.jsonOps = debug1 == JsonOps.INSTANCE ? this : new RegistryReadOps<T>(JsonOps.INSTANCE, debug2, debug3, (IdentityHashMap<ResourceKey<Registry<?>>, ReadCache<?>>)debug4);
+        this.jsonOps = (debug1 == JsonOps.INSTANCE) ? (RegistryReadOps)this : new RegistryReadOps((DynamicOps<T>)JsonOps.INSTANCE, debug2, debug3, debug4); // MagmaCube - decompile fix
     }
 
     protected <E> DataResult<Pair<java.util.function.Supplier<E>, T>> decodeElement(T debug12, ResourceKey<? extends Registry<E>> debug2, Codec<E> debug3, boolean debug4) {
-        Optional debug5 = this.registryHolder.registry(debug2);
+        Optional<WritableRegistry<E>> debug5 = this.registryHolder.registry(debug2); // MagmaCube - decompile fix
         if (!debug5.isPresent()) {
             return DataResult.error((String)("Unknown registry: " + debug2));
         }
         WritableRegistry debug6 = debug5.get();
-        DataResult debug7 = ResourceLocation.CODEC.decode(this.delegate, debug12);
+        DataResult<Pair<ResourceLocation, T>> debug7 = ResourceLocation.CODEC.decode(this.delegate, debug12); // MagmaCube - decompile fix
         if (!debug7.result().isPresent()) {
             if (!debug4) {
                 return DataResult.error((String)"Inline definitions not allowed here");
             }
-            return debug3.decode((DynamicOps)this, debug12).map(debug02 -> debug02.mapFirst(debug0 -> () -> debug0));
+            return debug3.decode(this, debug12).map(debug02 -> debug02.mapFirst(debug0 -> () -> debug0)); // MagmaCube - decompile fix
         }
-        Pair debug8 = (Pair)debug7.result().get();
+        Pair<ResourceLocation, T> debug8 = debug7.result().get(); // MagmaCube - decompile fix
         ResourceLocation debug9 = (ResourceLocation)debug8.getFirst();
         return this.readAndRegisterElement(debug2, debug6, debug3, debug9).map(debug1 -> Pair.of((Object)debug1, (Object)debug8.getSecond()));
     }
 
     public <E> DataResult<MappedRegistry<E>> decodeElements(MappedRegistry<E> debug1, ResourceKey<? extends Registry<E>> debug2, Codec<E> debug3) {
         Collection<ResourceLocation> debug42 = this.resources.listResources(debug2);
-        DataResult debug5 = DataResult.success(debug1, (Lifecycle)Lifecycle.stable());
+        DataResult<MappedRegistry<E>> debug5 = DataResult.success(debug1, (Lifecycle)Lifecycle.stable()); // MagmaCube - decompile fix
         String debug6 = debug2.location().getPath() + "/";
         for (ResourceLocation debug8 : debug42) {
             String debug9 = debug8.getPath();
@@ -115,16 +122,16 @@ extends DelegatingOps<T> {
             }
             String debug10 = debug9.substring(debug6.length(), debug9.length() - ".json".length());
             ResourceLocation debug11 = new ResourceLocation(debug8.getNamespace(), debug10);
-            debug5 = debug5.flatMap(debug4 -> this.readAndRegisterElement(debug2, (WritableRegistry)debug4, debug3, debug11).map(debug1 -> debug4));
+            debug5 = debug5.flatMap(debug4 -> this.readAndRegisterElement(debug2, (WritableRegistry)debug4, debug3, debug11).map(debug12 -> debug4));
         }
         return debug5.setPartial(debug1);
     }
 
-    private <E> DataResult<java.util.function.Supplier<E>> readAndRegisterElement(ResourceKey<? extends Registry<E>> debug1, WritableRegistry<E> debug22, Codec<E> debug3, ResourceLocation debug4) {
-        Pair debug11;
-        ResourceKey debug5 = ResourceKey.create(debug1, debug4);
+    private <E> DataResult<Supplier<E>> readAndRegisterElement(ResourceKey<? extends Registry<E>> debug1, WritableRegistry<E> debug22, Codec<E> debug3, ResourceLocation debug4) {
+        DataResult<Supplier<E>> debug11; // MagmaCube - decompile fix
+        ResourceKey<E> debug5 = ResourceKey.create(debug1, debug4);
         ReadCache<E> debug6 = this.readCache(debug1);
-        DataResult debug7 = (DataResult)((ReadCache)debug6).values.get(debug5);
+        DataResult<Supplier<E>> debug7 = (DataResult)(debug6).values.get(debug5);
         if (debug7 != null) {
             return debug7;
         }
@@ -136,11 +143,11 @@ extends DelegatingOps<T> {
             return debug2;
         });
         ((ReadCache)debug6).values.put(debug5, DataResult.success((Object)debug8));
-        DataResult debug9 = this.resources.parseElement((DynamicOps<JsonElement>)this.jsonOps, debug1, debug5, debug3);
-        Optional debug10 = debug9.result();
+        DataResult<Pair<E, OptionalInt>> debug9 = this.resources.parseElement(this.jsonOps, debug1, debug5, debug3); // MagmaCube - decompile fix
+        Optional<Pair<E, OptionalInt>> debug10 = debug9.result(); // MagmaCube - decompile fix
         if (debug10.isPresent()) {
-            debug11 = (Pair)debug10.get();
-            debug22.registerOrOverride((OptionalInt)debug11.getSecond(), debug5, debug11.getFirst(), debug9.lifecycle());
+            Pair<E, OptionalInt> pair = debug10.get(); // MagmaCube - decompile fix
+            debug22.registerOrOverride((OptionalInt)pair.getSecond(), debug5, pair.getFirst(), debug9.lifecycle()); // MagmaCube - decompile fix
         }
         debug11 = !debug10.isPresent() && debug22.get(debug5) != null ? DataResult.success(() -> debug22.get(debug5), (Lifecycle)Lifecycle.stable()) : debug9.map(debug2 -> () -> debug22.get(debug5));
         ((ReadCache)debug6).values.put(debug5, debug11);
@@ -148,11 +155,13 @@ extends DelegatingOps<T> {
     }
 
     private <E> ReadCache<E> readCache(ResourceKey<? extends Registry<E>> debug1) {
-        return this.readCache.computeIfAbsent(debug1, debug0 -> new ReadCache());
+        return (ReadCache<E>) this.readCache.computeIfAbsent(debug1, debug0 -> new ReadCache()); // MagmaCube - decompile fix
     }
 
-    protected <E> DataResult<Registry<E>> registry(ResourceKey<? extends Registry<E>> debug1) {
-        return this.registryHolder.registry(debug1).map(debug0 -> DataResult.success((Object)debug0, (Lifecycle)debug0.elementsLifecycle())).orElseGet(() -> DataResult.error((String)("Unknown registry: " + debug1)));
+    protected <E> DataResult<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> debug1) {
+        return this.registryHolder.registry(debug1)
+                .map(debug0 -> DataResult.success(debug0, debug0.elementsLifecycle()))
+                .orElseGet(() -> DataResult.error("Unknown registry: " + debug1));
     }
 
     public static interface ResourceAccess {
@@ -173,38 +182,23 @@ extends DelegatingOps<T> {
                  */
                 @Override
                 public <E> DataResult<Pair<E, OptionalInt>> parseElement(DynamicOps<JsonElement> debug1, ResourceKey<? extends Registry<E>> debug2, ResourceKey<E> debug3, Decoder<E> debug4) {
-                    /*
-                     * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-                     * org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 5[TRYBLOCK]
-                     * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:429)
-                     * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:478)
-                     * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-                     * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-                     * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-                     * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-                     * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-                     * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseInnerClassesPass1(ClassFile.java:903)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1015)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseInnerClassesPass1(ClassFile.java:903)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1015)
-                     * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-                     * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-                     * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-                     * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-                     * org.benf.cfr.reader.Main.main(Main.java:49)
-                     */
-                    throw new IllegalStateException(Decompilation failed);
+                    // MagmaCube start - decompile fix
+                    ResourceLocation debug5 = debug3.location();
+                    ResourceLocation debug6 = new ResourceLocation(debug5.getNamespace(), debug2.location().getPath() + "/" + debug5.getPath() + ".json");
+                    try(Resource debug7 = debug0.getResource(debug6);
+                        Reader debug9 = new InputStreamReader(debug7.getInputStream(), StandardCharsets.UTF_8)) {
+                        JsonParser debug11 = new JsonParser();
+                        JsonElement debug12 = debug11.parse(debug9);
+                        return debug4.parse(debug1, debug12).map(debug0 -> Pair.of(debug0, OptionalInt.empty()));
+                    } catch (IOException |com.google.gson.JsonIOException|com.google.gson.JsonSyntaxException debug7) {
+                        return DataResult.error("Failed to parse " + debug6 + " file: " + debug7.getMessage());
+                    }
+                    // MagmaCube end - decompile fix
                 }
 
                 public String toString() {
                     return "ResourceAccess[" + debug0 + "]";
                 }
-
-                private static /* synthetic */ Pair lambda$parseElement$1(Object debug02) {
-                    return Pair.of((Object)debug02, (Object)OptionalInt.empty());
-                }
             };
         }
 
@@ -237,7 +231,7 @@ extends DelegatingOps<T> {
                 if (debug5 == null) {
                     return DataResult.error((String)("Unknown element: " + debug3));
                 }
-                return debug4.parse(debug1, (Object)debug5).setLifecycle(this.lifecycles.get(debug3)).map(debug2 -> Pair.of((Object)debug2, (Object)OptionalInt.of(this.ids.getInt((Object)debug3))));
+                return debug4.parse(debug1, debug5).setLifecycle(this.lifecycles.get(debug3)).map(debug2 -> Pair.of(debug2, OptionalInt.of(this.ids.getInt((Object)debug3)))); // MagmaCube - decompile fix
             }
         }
     }
diff --git a/src/main/java/net/minecraft/resources/ResourceKey.java b/src/main/java/net/minecraft/resources/ResourceKey.java
index 0fb36e7366b900108988e2ee88ecec5d5cad4e69..25605c632ae8bd9667e38ff404b227c4f7631d57 100644
--- a/src/main/java/net/minecraft/resources/ResourceKey.java
+++ b/src/main/java/net/minecraft/resources/ResourceKey.java
@@ -22,7 +22,7 @@ public class ResourceKey<T>
     
     private static <T> ResourceKey<T> create(final ResourceLocation debug0, final ResourceLocation debug1) {
         final String debug2 = (debug0 + ":" + debug1).intern();
-        return (ResourceKey<T>)ResourceKey.VALUES.computeIfAbsent(debug2, debug2 -> new ResourceKey(debug0, debug1));
+        return (ResourceKey<T>)ResourceKey.VALUES.computeIfAbsent(debug2, debug2l -> new ResourceKey(debug0, debug1)); // MagmaCube - decompile fix
     }
     
     private ResourceKey(final ResourceLocation debug1, final ResourceLocation debug2) {
@@ -44,10 +44,10 @@ public class ResourceKey<T>
     }
     
     public static <T> Function<ResourceLocation, ResourceKey<T>> elementKey(final ResourceKey<? extends Registry<T>> debug0) {
-        return (Function<ResourceLocation, ResourceKey<T>>)(debug1 -> create((ResourceKey<? extends Registry<Object>>)debug0, debug1));
+        return (Function<ResourceLocation, ResourceKey<T>>)(debug1 -> create(debug0, debug1)); // MagmaCube - decompile fix
     }
     
     static {
-        VALUES = Collections.synchronizedMap((Map<String, ResourceKey<?>>)Maps.newIdentityHashMap());
+        VALUES = Collections.synchronizedMap(Maps.newIdentityHashMap()); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/resources/ResourceLocation.java b/src/main/java/net/minecraft/resources/ResourceLocation.java
index c26709be4909a269c2a65674341565575f48012f..f2275fb9bbb54d6e4ee84322cde63c807129fb84 100644
--- a/src/main/java/net/minecraft/resources/ResourceLocation.java
+++ b/src/main/java/net/minecraft/resources/ResourceLocation.java
@@ -76,10 +76,10 @@ public class ResourceLocation implements Comparable<ResourceLocation>
     
     private static DataResult<ResourceLocation> read(final String debug0) {
         try {
-            return (DataResult<ResourceLocation>)DataResult.success((Object)new ResourceLocation(debug0));
+            return (DataResult<ResourceLocation>)DataResult.success(new ResourceLocation(debug0)); // MagmaCube - decompile fix
         }
         catch (ResourceLocationException debug) {
-            return (DataResult<ResourceLocation>)DataResult.error("Not a valid resource location: " + debug0 + " " + debug.getMessage());
+            return DataResult.error("Not a valid resource location: " + debug0 + " " + debug.getMessage()); // MagmaCube - decompile fix
         }
     }
     
@@ -173,7 +173,7 @@ public class ResourceLocation implements Comparable<ResourceLocation>
     }
     
     static {
-        CODEC = Codec.STRING.comapFlatMap((Function)ResourceLocation::read, (Function)ResourceLocation::toString).stable();
+        CODEC = Codec.STRING.comapFlatMap(ResourceLocation::read, ResourceLocation::toString).stable(); // MagmaCube - decompile fix
         ERROR_INVALID = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.id.invalid"));
     }
     
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 4b392ea488dda60067b837c70f8fd98a9160cee8..6a2da4aaacffbd23a1e7cadabd9bdea8043f97ca 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -394,7 +394,7 @@ AutoCloseable {
             DimensionType debug21 = debug18.getValue().type();
             ChunkGenerator debug22 = debug18.getValue().generator();
             DerivedLevelData debug23 = new DerivedLevelData(this.worldData, debug2);
-            ServerLevel debug24 = new ServerLevel(this, this.executor, this.storageSource, debug23, debug20, debug21, debug1, debug22, debug4, debug7, (List<CustomSpawner>)ImmutableList.of(), false);
+            ServerLevel debug24 = new ServerLevel(this, this.executor, this.storageSource, debug23, debug20, debug21, debug1, debug22, debug4, debug7, ImmutableList.of(), false); // MagmaCube - decompile fix
             debug16.addListener(new BorderChangeListener.DelegateBorderChangeListener(debug24.getWorldBorder()));
             this.levels.put(debug20, debug24);
         }
@@ -896,14 +896,14 @@ AutoCloseable {
             debug1.getSystemDetails().setDetail("Player Count", () -> this.playerList.getPlayerCount() + " / " + this.playerList.getMaxPlayers() + "; " + this.playerList.getPlayers());
         }
         debug1.getSystemDetails().setDetail("Data Packs", () -> {
-            StringBuilder debug1 = new StringBuilder();
+            StringBuilder debug12 = new StringBuilder(); // MagmaCube - decompile fix
             for (Pack debug3 : this.packRepository.getSelectedPacks()) {
-                if (debug1.length() > 0) {
-                    debug1.append(", ");
+                if (debug12.length() > 0) { // MagmaCube - decompile fix
+                    debug12.append(", "); // MagmaCube - decompile fix
                 }
-                debug1.append(debug3.getId());
+                debug12.append(debug3.getId()); // MagmaCube - decompile fix
                 if (debug3.getCompatibility().isCompatible()) continue;
-                debug1.append(" (incompatible)");
+                debug12.append(" (incompatible)"); // MagmaCube - decompile fix
             }
             return debug1.toString();
         });
@@ -1224,7 +1224,7 @@ AutoCloseable {
     }
 
     public CompletableFuture<Void> reloadResources(Collection<String> debug12) {
-        CompletionStage debug22 = ((CompletableFuture)CompletableFuture.supplyAsync(() -> (ImmutableList)debug12.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()), this).thenCompose(debug1 -> ServerResources.loadResources((List<PackResources>)debug1, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this))).thenAcceptAsync(debug2 -> {
+        CompletableFuture<Void> debug22 = (CompletableFuture.supplyAsync(() -> (ImmutableList)debug12.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()), this).thenCompose(debug1 -> ServerResources.loadResources((List<PackResources>)debug1, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this))).thenAcceptAsync(debug2 -> { // MagmaCube - decompile fix
             this.resources.close();
             this.resources = debug2;
             this.packRepository.setSelected(debug12);
@@ -1245,7 +1245,7 @@ AutoCloseable {
         debug0.reload();
         if (debug2) {
             debug0.setSelected(Collections.singleton("vanilla"));
-            return new DataPackConfig((List<String>)ImmutableList.of((Object)"vanilla"), (List<String>)ImmutableList.of());
+            return new DataPackConfig(ImmutableList.of("vanilla"), ImmutableList.of()); // MagmaCube - decompile fix
         }
         LinkedHashSet debug3 = Sets.newLinkedHashSet();
         for (String string : debug1.getEnabled()) {
@@ -1282,7 +1282,7 @@ AutoCloseable {
         }
         PlayerList debug2 = debug1.getServer().getPlayerList();
         UserWhiteList debug3 = debug2.getWhiteList();
-        ArrayList debug4 = Lists.newArrayList(debug2.getPlayers());
+        ArrayList<ServerPlayer> debug4 = Lists.newArrayList(debug2.getPlayers()); // MagmaCube - decompile fix
         for (ServerPlayer debug6 : debug4) {
             if (debug3.isWhiteListed(debug6.getGameProfile())) continue;
             debug6.connection.disconnect(new TranslatableComponent("multiplayer.disconnect.not_whitelisted"));
@@ -1420,7 +1420,7 @@ AutoCloseable {
 
     private void dumpGameRules(Path debug1) throws IOException {
         try (BufferedWriter debug2 = Files.newBufferedWriter(debug1, new OpenOption[0]);){
-            final ArrayList debug4 = Lists.newArrayList();
+            final ArrayList<String> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
             final GameRules debug5 = this.getGameRules();
             GameRules.visitGameRuleTypes(new GameRules.GameRuleTypeVisitor(){
 
@@ -1506,20 +1506,5 @@ AutoCloseable {
     public RegistryAccess registryAccess() {
         return this.registryHolder;
     }
-
-    @Override
-    public /* synthetic */ void doRunTask(Runnable runnable) {
-        this.doRunTask((TickTask)runnable);
-    }
-
-    @Override
-    public /* synthetic */ boolean shouldRun(Runnable runnable) {
-        return this.shouldRun((TickTask)runnable);
-    }
-
-    @Override
-    public /* synthetic */ Runnable wrapRunnable(Runnable runnable) {
-        return this.wrapRunnable(runnable);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index 53e9c1663a1ea8198807053c5e4b0dbdb56289cd..0aef54996087d6055d5ce1d2858b681b9aab842d 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -132,10 +132,10 @@ public class PlayerAdvancements {
     }
 
     private void ensureAllVisible() {
-        ArrayList debug1 = Lists.newArrayList();
+        ArrayList<Map.Entry<Advancement, AdvancementProgress>> debug1 = Lists.newArrayList();
         for (Map.Entry<Advancement, AdvancementProgress> debug3 : this.advancements.entrySet()) {
             if (!debug3.getValue().isDone()) continue;
-            debug1.add(debug3.getKey());
+            debug1.add(debug3); // MagmaCube - decompile fix - original code: debug1.add(debug3.getKey());
             this.progressChanged.add((Advancement)debug3.getKey());
         }
         for (Map.Entry<Advancement, AdvancementProgress> debug3 : debug1) {
@@ -165,7 +165,7 @@ public class PlayerAdvancements {
                 if (debug5 == null) {
                     throw new JsonParseException("Found null for advancements");
                 }
-                Stream<Map.Entry> debug6 = debug5.entrySet().stream().sorted(Comparator.comparing(Map.Entry::getValue));
+                Stream<Map.Entry> debug6 = debug5.entrySet().stream().sorted(Map.Entry.comparingByValue()); // MagmaCube - decompile fix
                 for (Map.Entry debug8 : debug6.collect(Collectors.toList())) {
                     Advancement debug9 = debug1.getAdvancement((ResourceLocation)debug8.getKey());
                     if (debug9 == null) {
@@ -200,8 +200,7 @@ public class PlayerAdvancements {
         JsonElement debug2 = GSON.toJsonTree((Object)debug1);
         debug2.getAsJsonObject().addProperty("DataVersion", (Number)SharedConstants.getCurrentVersion().getWorldVersion());
         try {
-            Map.Entry<Advancement, AdvancementProgress> debug3;
-            debug3 = new FileOutputStream(this.file);
+            FileOutputStream debug3 = new FileOutputStream(this.file); // MagmaCube - decompile fix
             Throwable throwable = null;
             try (OutputStreamWriter debug5 = new OutputStreamWriter((OutputStream)((Object)debug3), Charsets.UTF_8.newEncoder());){
                 GSON.toJson(debug2, (Appendable)debug5);
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java b/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
index a6cc559981822af9bff6c9fb091a807f65fb6da4..588e55507539b0171cec0a780a1a7e3065177b52 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
@@ -149,10 +149,5 @@ extends PlayerList {
     public boolean canBypassPlayerLimit(GameProfile debug1) {
         return this.getOps().canBypassPlayerLimit(debug1);
     }
-
-    @Override
-    public /* synthetic */ MinecraftServer getServer() {
-        return this.getServer();
-    }
 }
 
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index cfbffc7a1a1d91e329026d1a5c028e166d80dc2a..381fd2d186a2fa3d10bbee914a59f9f097f7be2c 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -118,7 +118,7 @@ implements ServerInterface {
         debug1.start();
         LOGGER.info("Starting minecraft server version " + SharedConstants.getCurrentVersion().getName());
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
-            LOGGER.warn("To start the server with more ram, launch it as Â¥"java -Xmx1024M -Xms1024M -jar minecraft_server.jarÂ¥"");
+            LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\""); // MagmaCube - decompile fix
         }
         LOGGER.info("Loading properties");
         DedicatedServerProperties debug2 = this.settings.getProperties();
@@ -161,7 +161,7 @@ implements ServerInterface {
             LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
             LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
             LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
-            LOGGER.warn("To change this, set Â¥"online-modeÂ¥" to Â¥"trueÂ¥" in the server.properties file.");
+            LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file."); // MagmaCube - decompile fix
         }
         if (this.convertOldUsers()) {
             this.getProfileCache().save();
@@ -175,11 +175,11 @@ implements ServerInterface {
         SkullBlockEntity.setProfileCache(this.getProfileCache());
         SkullBlockEntity.setSessionService(this.getSessionService());
         GameProfileCache.setUsesAuthentication(this.usesAuthentication());
-        LOGGER.info("Preparing level Â¥"{}Â¥"", (Object)this.getLevelIdName());
+        LOGGER.info("Preparing level \"{}\"", (Object)this.getLevelIdName()); // MagmaCube - decompile fix
         this.loadLevel();
         long debug6 = Util.getNanos() - debug4;
         String debug8 = String.format(Locale.ROOT, "%.3fs", (double)debug6 / 1.0E9);
-        LOGGER.info("Done ({})! For help, type Â¥"helpÂ¥"", (Object)debug8);
+        LOGGER.info("Done ({})! For help, type \"help\"", (Object)debug8); // MagmaCube - decompile fix
         if (debug2.announcePlayerAchievements != null) {
             this.getGameRules().getRule(GameRules.RULE_ANNOUNCE_ADVANCEMENTS).set(debug2.announcePlayerAchievements, this);
         }
@@ -544,10 +544,5 @@ implements ServerInterface {
     public boolean forceSynchronousWrites() {
         return this.settings.getProperties().syncChunkWrites;
     }
-
-    @Override
-    public /* synthetic */ PlayerList getPlayerList() {
-        return this.getPlayerList();
-    }
 }
 
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index a52364516646a18941a531582c50e6738dbe0582..d2b12aaab6bb55b26c848feabc7adaff963abdd2 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -60,8 +60,8 @@ extends Settings<DedicatedServerProperties> {
     public final boolean enableJmxMonitoring;
     public final boolean enableStatus;
     public final int entityBroadcastRangePercentage;
-    public final Settings.MutableValue<Integer> playerIdleTimeout;
-    public final Settings.MutableValue<Boolean> whiteList;
+    public final MutableValue<Integer> playerIdleTimeout; // MagmaCube - decompile fix
+    public final MutableValue<Boolean> whiteList; // MagmaCube - decompile fix
     public final WorldGenSettings worldGenSettings;
 
     public DedicatedServerProperties(Properties debug1, RegistryAccess debug2) {
@@ -100,10 +100,5 @@ extends Settings<DedicatedServerProperties> {
     protected DedicatedServerProperties reload(RegistryAccess debug1, Properties debug2) {
         return new DedicatedServerProperties(debug2, debug1);
     }
-
-    @Override
-    protected /* synthetic */ Settings reload(RegistryAccess registryAccess, Properties properties) {
-        return this.reload(registryAccess, properties);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index b46d6395c5e4f66207b811c8eb6f1519c05e5d0c..3eb17ed6c88eeec5f183c47a031f1ffd12986137 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -58,7 +58,7 @@ public abstract class Settings<T extends Settings<T>> {
     private static <V extends Number> Function<String, V> wrapNumberDeserializer(Function<String, V> debug0) {
         return debug1 -> {
             try {
-                return (Number)debug0.apply((String)debug1);
+                return (V) debug0.apply((String)debug1); // MagmaCube - decompile fix
             }
             catch (NumberFormatException debug2) {
                 return null;
@@ -94,22 +94,22 @@ public abstract class Settings<T extends Settings<T>> {
 
     protected <V> V get(String debug1, Function<String, V> debug2, Function<V, String> debug3, V debug4) {
         String debug5 = this.getStringRaw(debug1);
-        Object debug6 = MoreObjects.firstNonNull(debug5 != null ? debug2.apply(debug5) : null, debug4);
+        V debug6 = MoreObjects.firstNonNull(debug5 != null ? debug2.apply(debug5) : null, debug4); // MagmaCube - decompile fix
         this.properties.put(debug1, debug3.apply(debug6));
         return (V)debug6;
     }
 
     protected <V> MutableValue<V> getMutable(String debug1, Function<String, V> debug2, Function<V, String> debug3, V debug4) {
         String debug5 = this.getStringRaw(debug1);
-        Object debug6 = MoreObjects.firstNonNull(debug5 != null ? debug2.apply(debug5) : null, debug4);
+        V debug6 = MoreObjects.firstNonNull(debug5 != null ? debug2.apply(debug5) : null, debug4); // MagmaCube - decompile fix
         this.properties.put(debug1, debug3.apply(debug6));
         return new MutableValue(debug1, debug6, debug3);
     }
 
     protected <V> V get(String debug1, Function<String, V> debug22, UnaryOperator<V> debug3, Function<V, String> debug4, V debug5) {
         return (V)this.get(debug1, debug2 -> {
-            Object debug3 = debug22.apply((String)debug2);
-            return debug3 != null ? debug3.apply(debug3) : null;
+            V debug3l = debug22.apply((String)debug2); // MagmaCube - decompile fix
+            return debug3l != null ? debug3.apply(debug3l) : null; // MagmaCube - decompile fix
         }, debug4, debug5);
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 190d26187ec02926f857d86e0e3f004176b62540..a7f0f9b819baba6eaa992bbd29c7bfe9cf79a680 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -57,10 +57,7 @@ import java.util.concurrent.CompletionException;
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.function.BooleanSupplier;
-import java.util.function.IntFunction;
-import java.util.function.IntSupplier;
-import java.util.function.Supplier;
+import java.util.function.*;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
@@ -163,7 +160,7 @@ implements ChunkHolder.PlayerProvider {
         ProcessorHandle<Runnable> debug14 = ProcessorHandle.of("main", debug6::tell);
         this.progressListener = debug9;
         ProcessorMailbox<Runnable> debug15 = ProcessorMailbox.create(debug5, "light");
-        this.queueSorter = new ChunkTaskPriorityQueueSorter((List<ProcessorHandle<?>>)ImmutableList.of(debug13, debug14, debug15), debug5, Integer.MAX_VALUE);
+        this.queueSorter = new ChunkTaskPriorityQueueSorter(ImmutableList.of(debug13, debug14, debug15), debug5, Integer.MAX_VALUE); // MagmaCube - decompile fix
         this.worldgenMailbox = this.queueSorter.getProcessor(debug13, false);
         this.mainThreadMailbox = this.queueSorter.getProcessor(debug14, false);
         this.lightEngine = new ThreadedLevelLightEngine(debug7, this, this.level.dimensionType().hasSkyLight(), debug15, this.queueSorter.getProcessor(debug15, false));
@@ -230,22 +227,22 @@ implements ChunkHolder.PlayerProvider {
         if (debug2 == null) {
             return "null";
         }
-        String debug3 = debug2.getTicketLevel() + "Â¥n";
+        String debug3 = debug2.getTicketLevel() + "\n"; // MagmaCube - decompile fix
         ChunkStatus debug4 = debug2.getLastAvailableStatus();
         ChunkAccess debug5 = debug2.getLastAvailable();
         if (debug4 != null) {
-            debug3 = debug3 + "St: Â¥u00a7" + debug4.getIndex() + debug4 + 'Â¥u00a7' + "rÂ¥n";
+            debug3 = debug3 + "St: \u00a7" + debug4.getIndex() + debug4 + '\u00a7' + "r\n"; // MagmaCube - decompile fix
         }
         if (debug5 != null) {
-            debug3 = debug3 + "Ch: Â¥u00a7" + debug5.getStatus().getIndex() + debug5.getStatus() + 'Â¥u00a7' + "rÂ¥n";
+            debug3 = debug3 + "Ch: \u00a7" + debug5.getStatus().getIndex() + debug5.getStatus() + '\u00a7' + "r\n"; // MagmaCube - decompile fix
         }
         ChunkHolder.FullChunkStatus debug6 = debug2.getFullStatus();
-        debug3 = debug3 + "Â¥u00a7" + debug6.ordinal() + (Object)((Object)debug6);
-        return debug3 + 'Â¥u00a7' + "r";
+        debug3 = debug3 + "\u00a7" + debug6.ordinal() + (Object)((Object)debug6); // MagmaCube - decompile fix
+        return debug3 + '\u00a7' + "r"; // MagmaCube - decompile fix
     }
 
     private CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> getChunkRangeFuture(ChunkPos debug1, final int debug2, IntFunction<ChunkStatus> debug3) {
-        ArrayList debug42 = Lists.newArrayList();
+        List<CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> debug42 = Lists.newArrayList(); // MagmaCube - decompile fix
         final int debug5 = debug1.x;
         final int debug6 = debug1.z;
         for (int debug7 = -debug2; debug7 <= debug2; ++debug7) {
@@ -255,7 +252,7 @@ implements ChunkHolder.PlayerProvider {
                 long debug11 = debug10.toLong();
                 ChunkHolder debug13 = this.getUpdatingChunkIfPresent(debug11);
                 if (debug13 == null) {
-                    return CompletableFuture.completedFuture(Either.right((Object)new ChunkHolder.ChunkLoadingFailure(){
+                    return CompletableFuture.completedFuture(Either.right(new ChunkHolder.ChunkLoadingFailure(){ // MagmaCube - decompile fix
 
                         public String toString() {
                             return "Unloaded " + debug10.toString();
@@ -267,26 +264,28 @@ implements ChunkHolder.PlayerProvider {
                 debug42.add(debug15);
             }
         }
-        CompletableFuture debug7 = Util.sequence(debug42);
+        // MagmaCube start - decompile fix
+        CompletableFuture<List<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> debug7 = Util.sequence(debug42);
         return debug7.thenApply(debug4 -> {
-            ArrayList debug5 = Lists.newArrayList();
-            int debug6 = 0;
-            for (final Either debug8 : debug4) {
-                Optional debug9 = debug8.left();
+            List<ChunkAccess> list = Lists.newArrayList();
+            int i = 0;
+            for (final Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> debug8 : debug4) {
+                Optional<ChunkAccess> debug9 = debug8.left();
                 if (!debug9.isPresent()) {
-                    final int debug10 = debug6;
-                    return Either.right((Object)new ChunkHolder.ChunkLoadingFailure(){
+                    final int debug10 = i;
+                    return Either.right(new ChunkHolder.ChunkLoadingFailure(){
 
                         public String toString() {
                             return "Unloaded " + new ChunkPos(debug5 + debug10 % (debug2 * 2 + 1), debug6 + debug10 / (debug2 * 2 + 1)) + " " + ((ChunkHolder.ChunkLoadingFailure)debug8.right().get()).toString();
                         }
                     });
                 }
-                debug5.add(debug9.get());
-                ++debug6;
+                list.add(debug9.get());
+                ++i;
             }
-            return Either.left((Object)debug5);
+            return Either.left(list);
         });
+        // MagmaCube end - decompile fix
     }
 
     public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> getEntityTickingRangeFuture(ChunkPos debug1) {
@@ -315,7 +314,7 @@ implements ChunkHolder.PlayerProvider {
             } else {
                 debug4 = new ChunkHolder(new ChunkPos(debug1), debug3, this.lightEngine, this.queueSorter, this);
             }
-            this.updatingChunkMap.put(debug1, (Object)debug4);
+            this.updatingChunkMap.put(debug1, debug4); // MagmaCube - decompile fix
             this.modified = true;
         }
         return debug4;
@@ -334,17 +333,19 @@ implements ChunkHolder.PlayerProvider {
 
     protected void saveAllChunks(boolean debug12) {
         if (debug12) {
-            List debug2 = this.visibleChunkMap.values().stream().filter(ChunkHolder::wasAccessibleSinceLastSave).peek(ChunkHolder::refreshAccessibility).collect(Collectors.toList());
+            List<ChunkHolder> debug2 = this.visibleChunkMap.values().stream().filter(ChunkHolder::wasAccessibleSinceLastSave).peek(ChunkHolder::refreshAccessibility).collect(Collectors.toList()); // MagmaCube - decompile fix
             MutableBoolean debug3 = new MutableBoolean();
             do {
                 debug3.setFalse();
                 debug2.stream().map(debug1 -> {
-                    CompletableFuture<ChunkAccess> debug2;
+                    // MagmaCube start - decompile fix
+                    CompletableFuture<ChunkAccess> debug22;
                     do {
-                        debug2 = debug1.getChunkToSave();
-                        this.mainThreadExecutor.managedBlock(debug2::isDone);
-                    } while (debug2 != debug1.getChunkToSave());
-                    return debug2.join();
+                        debug22 = debug1.getChunkToSave();
+                        this.mainThreadExecutor.managedBlock(debug22::isDone);
+                    } while (debug22 != debug1.getChunkToSave());
+                    return debug22.join();
+                    // MagmaCube end - decompile fix
                 }).filter(debug0 -> debug0 instanceof ImposterProtoChunk || debug0 instanceof LevelChunk).filter(this::save).forEach(debug1 -> debug3.setTrue());
             } while (debug3.isTrue());
             this.processUnloads(() -> true);
@@ -380,7 +381,7 @@ implements ChunkHolder.PlayerProvider {
             long debug42 = debug2.nextLong();
             ChunkHolder debug6 = (ChunkHolder)this.updatingChunkMap.remove(debug42);
             if (debug6 != null) {
-                this.pendingUnloads.put(debug42, (Object)debug6);
+                this.pendingUnloads.put(debug42, debug6); // MagmaCube - decompile fix
                 this.modified = true;
                 ++debug3;
                 this.scheduleUnload(debug42, debug6);
@@ -445,7 +446,7 @@ implements ChunkHolder.PlayerProvider {
                 this.distanceManager.addTicket(TicketType.LIGHT, debug3, 33 + ChunkStatus.getDistance(ChunkStatus.FEATURES), debug3);
             }
             if ((debug6 = (ChunkAccess)debug5.get()).getStatus().isOrAfter(debug2)) {
-                CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> debug7 = debug2 == ChunkStatus.LIGHT ? this.scheduleChunkGeneration(debug1, debug2) : debug2.load(this.level, this.structureManager, this.lightEngine, debug2 -> this.protoChunkToFullChunk(debug1), debug6);
+                CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> debug7 = debug2 == ChunkStatus.LIGHT ? this.scheduleChunkGeneration(debug1, debug2) : debug2.load(this.level, this.structureManager, this.lightEngine, debug22 -> this.protoChunkToFullChunk(debug1), debug6);
                 this.progressListener.onStatusChange(debug3, debug2);
                 return debug7;
             }
@@ -465,7 +466,7 @@ implements ChunkHolder.PlayerProvider {
                         ProtoChunk debug4 = ChunkSerializer.read(this.level, this.structureManager, this.poiManager, debug1, debug2);
                         debug4.setLastSaveTime(this.level.getGameTime());
                         this.markPosition(debug1, debug4.getStatus().getChunkType());
-                        return Either.left((Object)debug4);
+                        return Either.left(debug4); // MagmaCube - decompile fix
                     }
                     LOGGER.error("Chunk file at {} is missing level data, skipping", (Object)debug1);
                 }
@@ -482,7 +483,7 @@ implements ChunkHolder.PlayerProvider {
                 LOGGER.error("Couldn't load chunk {}", (Object)debug1, (Object)debug2);
             }
             this.markPositionReplaceable(debug1);
-            return Either.left((Object)new ProtoChunk(debug1, UpgradeData.EMPTY));
+            return Either.left(new ProtoChunk(debug1, UpgradeData.EMPTY)); // MagmaCube - decompile fix
         }, this.mainThreadExecutor);
     }
 
@@ -498,17 +499,17 @@ implements ChunkHolder.PlayerProvider {
         ChunkPos debug3 = debug1.getPos();
         CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> debug4 = this.getChunkRangeFuture(debug3, debug22.getRange(), debug2 -> this.getDependencyStatus(debug22, debug2));
         this.level.getProfiler().incrementCounter(() -> "chunkGenerate " + debug22.getName());
-        return debug4.thenComposeAsync(debug42 -> (CompletableFuture)debug42.map(debug4 -> {
+        return debug4.thenComposeAsync(debug42 -> (CompletableFuture)debug42.map(debug412 -> { // MagmaCube - decompile fix
             try {
-                CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> debug5 = debug22.generate(this.level, this.generator, this.structureManager, this.lightEngine, debug2 -> this.protoChunkToFullChunk(debug1), (List<ChunkAccess>)debug4);
+                CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> debug5 = debug22.generate(this.level, this.generator, this.structureManager, this.lightEngine, debug2 -> this.protoChunkToFullChunk(debug1), (List<ChunkAccess>)debug412); // MagmaCube - decompile fix
                 this.progressListener.onStatusChange(debug3, debug22);
                 return debug5;
             }
             catch (Exception debug5) {
                 CrashReport debug6 = CrashReport.forThrowable(debug5, "Exception generating new chunk");
                 CrashReportCategory debug7 = debug6.addCategory("Chunk to be generated");
-                debug7.setDetail("Location", String.format("%d,%d", debug1.x, debug1.z));
-                debug7.setDetail("Position hash", ChunkPos.asLong(debug1.x, debug1.z));
+                debug7.setDetail("Location", String.format("%d,%d", debug3.x, debug3.z)); // MagmaCube - decompile fix
+                debug7.setDetail("Position hash", ChunkPos.asLong(debug3.x, debug3.z)); // MagmaCube - decompile fix
                 debug7.setDetail("Generator", this.generator);
                 throw new ReportedException(debug6);
             }
@@ -536,7 +537,7 @@ implements ChunkHolder.PlayerProvider {
             }
             return debug22.mapLeft(debug2 -> {
                 LevelChunk debug4;
-                ChunkPos debug3 = debug1.getPos();
+                ChunkPos pos = debug1.getPos(); // MagmaCube - decompile fix
                 if (debug2 instanceof ImposterProtoChunk) {
                     debug4 = ((ImposterProtoChunk)debug2).getWrapped();
                 } else {
@@ -545,15 +546,15 @@ implements ChunkHolder.PlayerProvider {
                 }
                 debug4.setFullStatus(() -> ChunkHolder.getFullChunkStatus(debug1.getTicketLevel()));
                 debug4.runPostLoad();
-                if (this.entitiesInLevel.add(debug3.toLong())) {
+                if (this.entitiesInLevel.add(pos.toLong())) { // MagmaCube - decompile fix
                     debug4.setLoaded(true);
                     this.level.addAllPendingBlockEntities(debug4.getBlockEntities().values());
-                    Iterable debug5 = null;
+                    List<Entity> debug5 = null; // MagmaCube - decompile fix
                     for (ClassInstanceMultiMap<Entity> debug9 : debug4.getEntitySections()) {
                         for (Entity debug11 : debug9) {
                             if (debug11 instanceof Player || this.level.loadFromChunk(debug11)) continue;
                             if (debug5 == null) {
-                                debug5 = Lists.newArrayList((Object[])new Entity[]{debug11});
+                                debug5 = Lists.newArrayList(new Entity[]{debug11}); // MagmaCube - decompile fix
                                 continue;
                             }
                             debug5.add(debug11);
@@ -571,25 +572,29 @@ implements ChunkHolder.PlayerProvider {
     public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> postProcess(ChunkHolder debug1) {
         ChunkPos debug23 = debug1.getPos();
         CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> debug3 = this.getChunkRangeFuture(debug23, 1, debug0 -> ChunkStatus.FULL);
-        CompletionStage debug4 = debug3.thenApplyAsync(debug02 -> debug02.flatMap(debug0 -> {
-            LevelChunk debug1 = (LevelChunk)debug0.get(debug0.size() / 2);
-            debug1.postProcessGeneration();
-            return Either.left((Object)debug1);
+        // MagmaCube start - decompile fix
+        CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> debug4 = debug3.thenApplyAsync(debug02 -> debug02.flatMap(debug0 -> {
+            LevelChunk chunk = (LevelChunk)debug0.get(debug0.size() / 2);
+            chunk.postProcessGeneration();
+            return Either.left(chunk);
         }), debug2 -> this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(debug1, debug2)));
-        ((CompletableFuture)debug4).thenAcceptAsync(debug22 -> debug22.mapLeft(debug2 -> {
+        debug4.thenAcceptAsync(debug22 -> debug22.mapLeft(debug2 -> {
             this.tickingGenerated.getAndIncrement();
             Packet[] debug32 = new Packet[2];
-            this.getPlayers(debug23, false).forEach(debug3 -> this.playerLoadedChunk((ServerPlayer)debug3, debug32, (LevelChunk)debug2));
-            return Either.left((Object)debug2);
+            this.getPlayers(debug23, false).forEach(p -> this.playerLoadedChunk((ServerPlayer)p, debug32, (LevelChunk)debug2));
+            return Either.left(debug2);
         }), debug2 -> this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(debug1, debug2)));
         return debug4;
+        // MagmaCube end - decompile fix
     }
 
     public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> unpackTicks(ChunkHolder debug1) {
         return debug1.getOrScheduleFuture(ChunkStatus.FULL, this).thenApplyAsync(debug02 -> debug02.mapLeft(debug0 -> {
-            LevelChunk debug1 = (LevelChunk)debug0;
-            debug1.unpackTicks();
-            return debug1;
+            // MagmaCube start - decompile fix
+            LevelChunk chunk = (LevelChunk)debug0;
+            chunk.unpackTicks();
+            return chunk;
+            // MagmaCube end - decompile fix
         }), debug2 -> this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(debug1, debug2)));
     }
 
@@ -659,10 +664,12 @@ implements ChunkHolder.PlayerProvider {
                 ChunkPos debug6 = debug5.getPos();
                 Packet[] debug7 = new Packet[2];
                 this.getPlayers(debug6, false).forEach(debug4 -> {
-                    int debug5 = ChunkMap.checkerboardDistance(debug6, debug4, true);
-                    boolean debug6 = debug5 <= debug3;
-                    boolean debug7 = debug5 <= this.viewDistance;
-                    this.updateChunkTracking((ServerPlayer)debug4, debug6, debug7, debug6, debug7);
+                    // MagmaCube start - decompile fix
+                    int i = ChunkMap.checkerboardDistance(debug6, debug4, true);
+                    boolean b1 = i <= debug3;
+                    boolean b2 = i <= this.viewDistance;
+                    this.updateChunkTracking((ServerPlayer)debug4, debug6, debug7, b1, b2);
+                    // MagmaCube end - decompile fix
                 });
             }
         }
@@ -703,7 +710,7 @@ implements ChunkHolder.PlayerProvider {
             ChunkPos debug5 = new ChunkPos(debug4.getLongKey());
             ChunkHolder debug6 = (ChunkHolder)debug4.getValue();
             Optional<ChunkAccess> debug7 = Optional.ofNullable(debug6.getLastAvailable());
-            Optional<Object> debug8 = debug7.flatMap(debug0 -> debug0 instanceof LevelChunk ? Optional.of((LevelChunk)debug0) : Optional.empty());
+            Optional<LevelChunk> debug8 = debug7.flatMap(debug0 -> debug0 instanceof LevelChunk ? Optional.of((LevelChunk)debug0) : Optional.empty()); // MagmaCube - decompile fix
             debug2.writeRow(debug5.x, debug5.z, debug6.getTicketLevel(), debug7.isPresent(), debug7.map(ChunkAccess::getStatus).orElse(null), debug8.map(LevelChunk::getFullStatus).orElse(null), ChunkMap.printFuture(debug6.getFullChunkFuture()), ChunkMap.printFuture(debug6.getTickingChunkFuture()), ChunkMap.printFuture(debug6.getEntityTickingChunkFuture()), this.distanceManager.getTicketDebugString(debug4.getLongKey()), !this.noPlayersCloseForSpawning(debug5), debug8.map(debug0 -> Stream.of(debug0.getEntitySections()).mapToInt(ClassInstanceMultiMap::size).sum()).orElse(0), debug8.map(debug0 -> debug0.getBlockEntities().size()).orElse(0));
         }
     }
@@ -876,7 +883,7 @@ implements ChunkHolder.PlayerProvider {
             throw Util.pauseInIde(new IllegalStateException("Entity is already tracked!"));
         }
         TrackedEntity debug5 = new TrackedEntity(debug1, debug3, debug4, debug2.trackDeltas());
-        this.entityMap.put(debug1.getId(), (Object)debug5);
+        this.entityMap.put(debug1.getId(), debug5); // MagmaCube - decompile fix
         debug5.updatePlayers(this.level.players());
         if (debug1 instanceof ServerPlayer) {
             ServerPlayer debug6 = (ServerPlayer)debug1;
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 5f7b0d18014e2a4629fdc4f87452df15a6de7280..be7d9672e04d186de8ec3dacf85cdb452f21b410 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -131,10 +131,9 @@ public class ServerChunkCache extends ChunkSource
         debug5.incrementCounter("getChunkCacheMiss");
         final CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> debug9 = this.getChunkFutureMainThread(debug1, debug2, debug3, debug4);
         this.mainThreadProcessor.managedBlock(debug9::isDone);
-        final IllegalStateException debug10;
-        final ChunkAccess debug8 = (ChunkAccess)debug9.join().map(debug0 -> debug0, debug1 -> {
+        final ChunkAccess debug8 = (ChunkAccess)debug9.join().map(debug0 -> debug0, debug12 -> { // MagmaCube - decompile fix
             if (debug4) {
-                new IllegalStateException("Chunk not there when requested: " + debug1);
+                IllegalStateException debug10 = new IllegalStateException("Chunk not there when requested: " + debug12); // MagmaCube - decompile fix
                 throw Util.pauseInIde(debug10);
             }
             else {
@@ -322,13 +321,14 @@ public class ServerChunkCache extends ChunkSource
     }
     
     private void tickChunks() {
+        // MagmaCube start - decompile fix
         final long debug8 = this.level.getGameTime();
         final long debug9 = debug8 - this.lastInhabitedUpdate;
         this.lastInhabitedUpdate = debug8;
         final LevelData debug10 = this.level.getLevelData();
-        final boolean debug11 = this.level.isDebug();
+        final boolean isDebug = this.level.isDebug();
         final boolean debug12 = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING);
-        if (!debug11) {
+        if (!isDebug) {
             this.level.getProfiler().push("pollingChunks");
             final int debug13 = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
             final boolean debug14 = debug10.getGameTime() % 400L == 0L;
@@ -339,17 +339,8 @@ public class ServerChunkCache extends ChunkSource
             this.level.getProfiler().pop();
             final List<ChunkHolder> debug17 = (List<ChunkHolder>)Lists.newArrayList((Iterable)this.chunkMap.getChunks());
             Collections.shuffle(debug17);
-            final Optional<LevelChunk> debug18;
-            final Optional<LevelChunk> debug19;
-            final LevelChunk debug20;
-            final ChunkPos debug21;
-            final long n;
-            final boolean b;
-            final NaturalSpawner.SpawnState debug22;
-            final boolean debug23;
-            final int debug24;
             debug17.forEach(debug7 -> {
-                debug18 = (Optional<LevelChunk>)debug7.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left();
+                Optional<LevelChunk> debug18 = debug7.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left();
                 if (!debug18.isPresent()) {
                     return;
                 }
@@ -357,25 +348,21 @@ public class ServerChunkCache extends ChunkSource
                     this.level.getProfiler().push("broadcast");
                     debug7.broadcastChanges(debug18.get());
                     this.level.getProfiler().pop();
-                    debug19 = (Optional<LevelChunk>)debug7.getEntityTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left();
+                    Optional<LevelChunk> debug19 = debug7.getEntityTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left();
                     if (!debug19.isPresent()) {
                         return;
                     }
-                    else {
-                        debug20 = debug19.get();
-                        debug21 = debug7.getPos();
-                        if (this.chunkMap.noPlayersCloseForSpawning(debug21)) {
-                            return;
-                        }
-                        else {
-                            debug20.setInhabitedTime(debug20.getInhabitedTime() + n);
-                            if (b && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(debug20.getPos())) {
-                                NaturalSpawner.spawnForChunk(this.level, debug20, debug22, this.spawnFriendlies, this.spawnEnemies, debug23);
-                            }
-                            this.level.tickChunk(debug20, debug24);
-                            return;
-                        }
+                    LevelChunk debug20 = debug19.get();
+                    ChunkPos debug21 = debug7.getPos();
+                    if (this.chunkMap.noPlayersCloseForSpawning(debug21)) {
+                        return;
+                    }
+                    debug20.setInhabitedTime(debug20.getInhabitedTime() + debug8);
+                    if (debug12 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(debug20.getPos())) {
+                        NaturalSpawner.spawnForChunk(this.level, debug20, debug16, this.spawnFriendlies, this.spawnEnemies, isDebug);
                     }
+                    this.level.tickChunk(debug20, debug13);
+                    return;
                 }
             });
             this.level.getProfiler().push("customSpawners");
@@ -385,6 +372,7 @@ public class ServerChunkCache extends ChunkSource
             this.level.getProfiler().pop();
             this.level.getProfiler().pop();
         }
+        // MagmaCube end - decompile fix
         this.chunkMap.tick();
     }
     
@@ -424,9 +412,8 @@ public class ServerChunkCache extends ChunkSource
     
     @Override
     public void onLightUpdate(final LightLayer debug1, final SectionPos debug2) {
-        final ChunkHolder debug3;
         this.mainThreadProcessor.execute(() -> {
-            debug3 = this.getVisibleChunkIfPresent(debug2.chunk().toLong());
+            ChunkHolder debug3 = this.getVisibleChunkIfPresent(debug2.chunk().toLong()); // MagmaCube - decompile fix
             if (debug3 != null) {
                 debug3.sectionLightChanged(debug1, debug2.y());
             }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 98f491d946654aad269be028755350784f492269..60c1d22d0577baf668d62df5517f07b93d176ab1 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -32,8 +32,11 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.longs.LongSets;
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
+
+import java.io.BufferedWriter;
 import java.io.IOException;
 import java.io.Writer;
 import java.nio.file.Files;
@@ -811,10 +814,10 @@ implements WorldGenLevel {
         if (this.tickingEntities) {
             this.toAddAfterTick.add(debug1);
         } else {
-            this.entitiesById.put(debug1.getId(), (Object)debug1);
+            this.entitiesById.put(debug1.getId(), debug1); // MagmaCube - decompile fix
             if (debug1 instanceof EnderDragon) {
                 for (EnderDragonPart debug5 : ((EnderDragon)debug1).getSubEntities()) {
-                    this.entitiesById.put(debug5.getId(), (Object)debug5);
+                    this.entitiesById.put(debug5.getId(), debug5); // MagmaCube - decompile fix
                 }
             }
             this.entitiesByUuid.put(debug1.getUUID(), debug1);
@@ -919,7 +922,7 @@ implements WorldGenLevel {
 
     @Override
     public void blockEvent(BlockPos debug1, Block debug2, int debug3, int debug4) {
-        this.blockEvents.add((Object)new BlockEventData(debug1, debug2, debug3, debug4));
+        this.blockEvents.add(new BlockEventData(debug1, debug2, debug3, debug4)); // MagmaCube - decompile fix
     }
 
     private void runBlockEvents() {
@@ -1163,12 +1166,12 @@ implements WorldGenLevel {
         Object debug72;
         Object debug5;
         ChunkMap debug2 = this.getChunkSource().chunkMap;
-        try (Object debug3 = Files.newBufferedWriter(debug1.resolve("stats.txt"), new OpenOption[0]);){
+        try (BufferedWriter debug3 = Files.newBufferedWriter(debug1.resolve("stats.txt"), new OpenOption[0]);){ // MagmaCube - decompile fix
             ((Writer)debug3).write(String.format("spawning_chunks: %dÂ¥n", debug2.getDistanceManager().getNaturalSpawnChunkCount()));
             debug5 = this.getChunkSource().getLastSpawnState();
             if (debug5 != null) {
-                for (Object debug72 : ((NaturalSpawner.SpawnState)debug5).getMobCategoryCounts().object2IntEntrySet()) {
-                    ((Writer)debug3).write(String.format("spawn_count.%s: %dÂ¥n", ((MobCategory)debug72.getKey()).getName(), debug72.getIntValue()));
+                for (Object2IntMap.Entry<MobCategory> debug722 : ((NaturalSpawner.SpawnState)debug5).getMobCategoryCounts().object2IntEntrySet()) { // MagmaCube - decompile fix
+                    ((Writer)debug3).write(String.format("spawn_count.%s: %dÂ¥n", ((MobCategory)debug722.getKey()).getName(), debug722.getIntValue()));
                 }
             }
             ((Writer)debug3).write(String.format("entities: %dÂ¥n", this.entitiesById.size()));
@@ -1178,7 +1181,7 @@ implements WorldGenLevel {
             ((Writer)debug3).write("distance_manager: " + debug2.getDistanceManager().getDebugStatus() + "Â¥n");
             ((Writer)debug3).write(String.format("pending_tasks: %dÂ¥n", this.getChunkSource().getPendingTasksCount()));
         }
-        debug3 = new CrashReport("Level dump", new Exception("dummy"));
+        CrashReport debug3 = new CrashReport("Level dump", new Exception("dummy")); // MagmaCube - decompile fix
         this.fillReportDetails((CrashReport)debug3);
         Object debug4 = Files.newBufferedWriter(debug1.resolve("example_crash.txt"), new OpenOption[0]);
         debug5 = null;
@@ -1209,9 +1212,11 @@ implements WorldGenLevel {
         try {
             debug2.dumpChunks((Writer)debug5);
         }
-        catch (Throwable debug72) {
-            object = debug72;
-            throw debug72;
+        // MagmaCube start - decompile fix
+        catch (Throwable debug722) {
+            object = debug722;
+            throw debug722;
+            // MagmaCube end - decompile fix
         }
         finally {
             if (debug5 != null) {
@@ -1219,8 +1224,8 @@ implements WorldGenLevel {
                     try {
                         ((Writer)debug5).close();
                     }
-                    catch (Throwable debug72) {
-                        ((Throwable)object).addSuppressed(debug72);
+                    catch (Throwable debug722) { // MagmaCube - decompile fix
+                        ((Throwable)object).addSuppressed(debug722); // MagmaCube - decompile fix
                     }
                 } else {
                     ((Writer)debug5).close();
@@ -1351,23 +1356,5 @@ implements WorldGenLevel {
         BlockPos.betweenClosed(debug2 - 2, debug3 + 1, debug4 - 2, debug2 + 2, debug3 + 3, debug4 + 2).forEach(debug1 -> debug0.setBlockAndUpdate((BlockPos)debug1, Blocks.AIR.defaultBlockState()));
         BlockPos.betweenClosed(debug2 - 2, debug3, debug4 - 2, debug2 + 2, debug3, debug4 + 2).forEach(debug1 -> debug0.setBlockAndUpdate((BlockPos)debug1, Blocks.OBSIDIAN.defaultBlockState()));
     }
-
-    @Override
-    public /* synthetic */ Scoreboard getScoreboard() {
-        return this.getScoreboard();
-    }
-
-    @Override
-    public /* synthetic */ ChunkSource getChunkSource() {
-        return this.getChunkSource();
-    }
-
-    public /* synthetic */ TickList getLiquidTicks() {
-        return this.getLiquidTicks();
-    }
-
-    public /* synthetic */ TickList getBlockTicks() {
-        return this.getBlockTicks();
-    }
 }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 32b9ced2c70948554c2f6190d4802da79b2d0019..59038309ccab085cf6bfd4cda7ed27c3a808c248 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -274,7 +274,7 @@ implements ContainerListener {
             this.respawnForced = debug1.getBoolean("SpawnForced");
             this.respawnAngle = debug1.getFloat("SpawnAngle");
             if (debug1.contains("SpawnDimension")) {
-                this.respawnDimension = Level.RESOURCE_KEY_CODEC.parse((DynamicOps)NbtOps.INSTANCE, (Object)debug1.get("SpawnDimension")).resultOrPartial(((Logger)LOGGER)::error).orElse(Level.OVERWORLD);
+                this.respawnDimension = Level.RESOURCE_KEY_CODEC.parse(NbtOps.INSTANCE, debug1.get("SpawnDimension")).resultOrPartial(((Logger)LOGGER)::error).orElse(Level.OVERWORLD); // MagmaCube - decompile fix
             }
         }
     }
@@ -311,7 +311,7 @@ implements ContainerListener {
             debug12.putInt("SpawnZ", this.respawnPosition.getZ());
             debug12.putBoolean("SpawnForced", this.respawnForced);
             debug12.putFloat("SpawnAngle", this.respawnAngle);
-            ResourceLocation.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, (Object)this.respawnDimension.location()).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("SpawnDimension", (Tag)debug1));
+            ResourceLocation.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, this.respawnDimension.location()).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("SpawnDimension", (Tag)debug1)); // MagmaCube - decompile fix
         }
     }
 
@@ -470,11 +470,10 @@ implements ContainerListener {
 
     @Override
     public void die(DamageSource debug1) {
-        Object debug3;
         boolean debug2 = this.level.getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
         if (debug2) {
-            debug3 = this.getCombatTracker().getDeathMessage();
-            this.connection.send(new ClientboundPlayerCombatPacket(this.getCombatTracker(), ClientboundPlayerCombatPacket.Event.ENTITY_DIED, (Component)debug3), (GenericFutureListener<? extends Future<? super Void>>)((GenericFutureListener)arg_0 -> this.lambda$die$3((Component)debug3, arg_0)));
+            Component debug3 = this.getCombatTracker().getDeathMessage(); // MagmaCube - decompile fix
+            this.connection.send(new ClientboundPlayerCombatPacket(this.getCombatTracker(), ClientboundPlayerCombatPacket.Event.ENTITY_DIED, (Component)debug3), (arg_0 -> this.lambda$die$3(debug3, arg_0))); // MagmaCube - decompile fix
             Team debug4 = this.getTeam();
             if (debug4 == null || debug4.getDeathMessageVisibility() == Team.Visibility.ALWAYS) {
                 this.server.getPlayerList().broadcastMessage((Component)debug3, ChatType.SYSTEM, Util.NIL_UUID);
@@ -494,7 +493,7 @@ implements ContainerListener {
             this.dropAllDeathLoot(debug1);
         }
         this.getScoreboard().forAllObjectives(ObjectiveCriteria.DEATH_COUNT, this.getScoreboardName(), Score::increment);
-        debug3 = this.getKillCredit();
+        LivingEntity debug3 = this.getKillCredit(); // MagmaCube - decompile fix
         if (debug3 != null) {
             this.awardStat(Stats.ENTITY_KILLED_BY.get(((Entity)debug3).getType()));
             ((Entity)debug3).awardKillScore(this, this.deathScore, debug1);
@@ -710,20 +709,20 @@ implements ContainerListener {
     public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos debug12) {
         Direction debug2 = this.level.getBlockState(debug12).getValue(HorizontalDirectionalBlock.FACING);
         if (this.isSleeping() || !this.isAlive()) {
-            return Either.left((Object)((Object)Player.BedSleepingProblem.OTHER_PROBLEM));
+            return Either.left((Player.BedSleepingProblem.OTHER_PROBLEM)); // MagmaCube - decompile fix
         }
         if (!this.level.dimensionType().natural()) {
-            return Either.left((Object)((Object)Player.BedSleepingProblem.NOT_POSSIBLE_HERE));
+            return Either.left((Player.BedSleepingProblem.NOT_POSSIBLE_HERE)); // MagmaCube - decompile fix
         }
         if (!this.bedInRange(debug12, debug2)) {
-            return Either.left((Object)((Object)Player.BedSleepingProblem.TOO_FAR_AWAY));
+            return Either.left((Player.BedSleepingProblem.TOO_FAR_AWAY)); // MagmaCube - decompile fix
         }
         if (this.bedBlocked(debug12, debug2)) {
-            return Either.left((Object)((Object)Player.BedSleepingProblem.OBSTRUCTED));
+            return Either.left((Player.BedSleepingProblem.OBSTRUCTED)); // MagmaCube - decompile fix
         }
         this.setRespawnPosition(this.level.dimension(), debug12, this.yRot, false, true);
         if (this.level.isDay()) {
-            return Either.left((Object)((Object)Player.BedSleepingProblem.NOT_POSSIBLE_NOW));
+            return Either.left((Player.BedSleepingProblem.NOT_POSSIBLE_NOW)); // MagmaCube - decompile fix
         }
         if (!this.isCreative()) {
             double debug3 = 8.0;
@@ -731,7 +730,7 @@ implements ContainerListener {
             Vec3 debug7 = Vec3.atBottomCenterOf(debug12);
             List<Monster> debug8 = this.level.getEntitiesOfClass(Monster.class, new AABB(debug7.x() - 8.0, debug7.y() - 5.0, debug7.z() - 8.0, debug7.x() + 8.0, debug7.y() + 5.0, debug7.z() + 8.0), debug1 -> debug1.isPreventingPlayerRest(this));
             if (!debug8.isEmpty()) {
-                return Either.left((Object)((Object)Player.BedSleepingProblem.NOT_SAFE));
+                return Either.left((Player.BedSleepingProblem.NOT_SAFE)); // MagmaCube - decompile fix
             }
         }
         Either debug3 = super.startSleepInBed(debug12).ifRight(debug1 -> {
@@ -1006,7 +1005,7 @@ implements ContainerListener {
     @Override
     protected void completeUsingItem() {
         if (!this.useItem.isEmpty() && this.isUsingItem()) {
-            this.connection.send(new ClientboundEntityEventPacket(this, 9));
+            this.connection.send(new ClientboundEntityEventPacket(this, (byte) 9)); // MagmaCube - decompile fix
             super.completeUsingItem();
         }
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index bacbf7e11a58a4e2a3ed1c8b1710bbf9f447a54e..fedcc4b76e993169e9c783cc96151de04404ebb0 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -279,7 +279,6 @@ public class ServerPlayerGameMode {
 
     public InteractionResult useItemOn(ServerPlayer debug1, Level debug2, ItemStack debug3, InteractionHand debug4, BlockHitResult debug5) {
         InteractionResult debug12;
-        Object debug11;
         BlockPos debug6 = debug5.getBlockPos();
         BlockState debug7 = debug2.getBlockState(debug6);
         if (this.gameModeForPlayer == GameType.SPECTATOR) {
@@ -293,14 +292,14 @@ public class ServerPlayerGameMode {
         boolean debug8 = !debug1.getMainHandItem().isEmpty() || !debug1.getOffhandItem().isEmpty();
         boolean debug9 = debug1.isSecondaryUseActive() && debug8;
         ItemStack debug10 = debug3.copy();
-        if (!debug9 && (debug11 = debug7.use(debug2, debug1, debug4, debug5)).consumesAction()) {
+        if (!debug9 && (debug12 = debug7.use(debug2, debug1, debug4, debug5)).consumesAction()) { // MagmaCube - decompile fix
             CriteriaTriggers.ITEM_USED_ON_BLOCK.trigger(debug1, debug6, debug10);
-            return debug11;
+            return debug12; // MagmaCube - decompile fix
         }
         if (debug3.isEmpty() || debug1.getCooldowns().isOnCooldown(debug3.getItem())) {
             return InteractionResult.PASS;
         }
-        debug11 = new UseOnContext(debug1, debug4, debug5);
+        UseOnContext debug11 = new UseOnContext(debug1, debug4, debug5); // MagmaCube - decompile fix
         if (this.isCreative()) {
             int debug13 = debug3.getCount();
             debug12 = debug3.useOn((UseOnContext)debug11);
diff --git a/src/main/java/net/minecraft/server/level/progress/StoringChunkProgressListener.java b/src/main/java/net/minecraft/server/level/progress/StoringChunkProgressListener.java
index 80328fd27056688901bae663c134a19b75d3d1d5..fc3ee494a1e02df7f7999c5647b3067dfc6ac62a 100644
--- a/src/main/java/net/minecraft/server/level/progress/StoringChunkProgressListener.java
+++ b/src/main/java/net/minecraft/server/level/progress/StoringChunkProgressListener.java
@@ -43,7 +43,7 @@ public class StoringChunkProgressListener implements ChunkProgressListener
             this.statuses.remove(debug1.toLong());
         }
         else {
-            this.statuses.put(debug1.toLong(), (Object)debug2);
+            this.statuses.put(debug1.toLong(), debug2); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index f30f272fd06505d41149b7175b2ea2ca91a087ce..3508c30e447a579be3f325bb86bd4b8fb8fa1e5d 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -428,7 +428,7 @@ implements ServerGamePacketListener {
         if (debug22.canRead() && debug22.peek() == '/') {
             debug22.skip();
         }
-        ParseResults debug3 = this.server.getCommands().getDispatcher().parse(debug22, (Object)this.player.createCommandSourceStack());
+        ParseResults debug3 = this.server.getCommands().getDispatcher().parse(debug22, this.player.createCommandSourceStack()); // MagmaCube - decompile fix
         this.server.getCommands().getDispatcher().getCompletionSuggestions(debug3).thenAccept(debug2 -> this.connection.send(new ClientboundCommandSuggestionsPacket(debug1.getId(), (Suggestions)debug2)));
     }
 
@@ -1238,8 +1238,8 @@ implements ServerGamePacketListener {
                 debug3.addTagElement("BlockEntityTag", debug7);
             }
             boolean debug8 = debug1.getSlotNum() >= 1 && debug1.getSlotNum() <= 45;
-            boolean bl = debug6 = debug3.isEmpty() || debug3.getDamageValue() >= 0 && debug3.getCount() <= 64 && !debug3.isEmpty();
-            if (debug8 && debug6) {
+            boolean bl = debug3.isEmpty() || debug3.getDamageValue() >= 0 && debug3.getCount() <= 64 && !debug3.isEmpty(); // MagmaCube - decompile fix
+            if (debug8 && bl) { // MagmaCube - decompile fix
                 if (debug3.isEmpty()) {
                     this.player.inventoryMenu.setItem(debug1.getSlotNum(), ItemStack.EMPTY);
                 } else {
@@ -1247,7 +1247,7 @@ implements ServerGamePacketListener {
                 }
                 this.player.inventoryMenu.setSynched(this.player, true);
                 this.player.inventoryMenu.broadcastChanges();
-            } else if (debug2 && debug6 && this.dropSpamTickCount < 200) {
+            } else if (debug2 && bl && this.dropSpamTickCount < 200) { // MagmaCube - decompile fix
                 this.dropSpamTickCount += 20;
                 this.player.drop(debug3, true);
             }
diff --git a/src/main/java/net/minecraft/server/packs/AbstractPackResources.java b/src/main/java/net/minecraft/server/packs/AbstractPackResources.java
index 0c132d3c11d9a6e35b5b46309eb03166d12d35b0..800ccdefff0e608d122f0d42f8250660d64147bb 100644
--- a/src/main/java/net/minecraft/server/packs/AbstractPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/AbstractPackResources.java
@@ -74,9 +74,7 @@ public abstract class AbstractPackResources implements PackResources
             debug3 = GsonHelper.parse(debug2);
         }
         catch (IOException | JsonParseException ex2) {
-            final Exception ex;
-            final Exception debug4 = ex;
-            AbstractPackResources.LOGGER.error("Couldn't load {} metadata", (Object)debug0.getMetadataSectionName(), (Object)debug4);
+            AbstractPackResources.LOGGER.error("Couldn't load {} metadata", (Object)debug0.getMetadataSectionName(), ex2); // MagmaCube - decompile fix
             return null;
         }
         if (!debug3.has(debug0.getMetadataSectionName())) {
@@ -86,7 +84,7 @@ public abstract class AbstractPackResources implements PackResources
             return debug0.fromJson(GsonHelper.getAsJsonObject(debug3, debug0.getMetadataSectionName()));
         }
         catch (JsonParseException debug5) {
-            AbstractPackResources.LOGGER.error("Couldn't load {} metadata", (Object)debug0.getMetadataSectionName(), (Object)debug5);
+            AbstractPackResources.LOGGER.error("Couldn't load {} metadata", (Object)debug0.getMetadataSectionName(), debug5); // MagmaCube - decompile fix
             return null;
         }
     }
diff --git a/src/main/java/net/minecraft/server/packs/FilePackResources.java b/src/main/java/net/minecraft/server/packs/FilePackResources.java
index 355b7b376823a345a966fe3998b07bd144eaa86f..4ff3a94133f8c145ebfa68eb60b91b2f9dbe02fd 100644
--- a/src/main/java/net/minecraft/server/packs/FilePackResources.java
+++ b/src/main/java/net/minecraft/server/packs/FilePackResources.java
@@ -64,7 +64,7 @@ public class FilePackResources extends AbstractPackResources
             return Collections.emptySet();
         }
         final Enumeration<? extends ZipEntry> debug3 = debug2.entries();
-        final Set<String> debug4 = (Set<String>)Sets.newHashSet();
+        final Set<String> debug4 = Sets.newHashSet(); // MagmaCube - decompile fix
         while (debug3.hasMoreElements()) {
             final ZipEntry debug5 = (ZipEntry)debug3.nextElement();
             final String debug6 = debug5.getName();
@@ -106,10 +106,10 @@ public class FilePackResources extends AbstractPackResources
             debug6 = this.getOrCreateZipFile();
         }
         catch (IOException debug15) {
-            return (Collection<ResourceLocation>)Collections.emptySet();
+            return Collections.emptySet(); // MagmaCube - decompile fix
         }
         final Enumeration<? extends ZipEntry> debug7 = debug6.entries();
-        final List<ResourceLocation> debug8 = (List<ResourceLocation>)Lists.newArrayList();
+        final List<ResourceLocation> debug8 = Lists.newArrayList(); // MagmaCube - decompile fix
         final String debug9 = debug1.getDirectory() + "/" + debug2 + "/";
         final String debug10 = debug9 + debug3 + "/";
         while (debug7.hasMoreElements()) {
diff --git a/src/main/java/net/minecraft/server/packs/FolderPackResources.java b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
index 866d2d6fa70aaf66e350e0646d0664142d12fcc5..49fa556284f617dd3842a802abb7d0d3308a5a41 100644
--- a/src/main/java/net/minecraft/server/packs/FolderPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
@@ -67,7 +67,7 @@ public class FolderPackResources extends AbstractPackResources
     
     @Override
     public Set<String> getNamespaces(final PackType debug1) {
-        final Set<String> debug2 = (Set<String>)Sets.newHashSet();
+        final Set<String> debug2 = Sets.newHashSet(); // MagmaCube - decompile fix
         final File debug3 = new File(this.file, debug1.getDirectory());
         final File[] debug4 = debug3.listFiles((FileFilter)DirectoryFileFilter.DIRECTORY);
         if (debug4 != null) {
@@ -91,7 +91,7 @@ public class FolderPackResources extends AbstractPackResources
     @Override
     public Collection<ResourceLocation> getResources(final PackType debug1, final String debug2, final String debug3, final int debug4, final Predicate<String> debug5) {
         final File debug6 = new File(this.file, debug1.getDirectory());
-        final List<ResourceLocation> debug7 = (List<ResourceLocation>)Lists.newArrayList();
+        final List<ResourceLocation> debug7 = Lists.newArrayList(); // MagmaCube - decompile fix
         this.listResources(new File(new File(debug6, debug2), debug3), debug4, debug2, debug7, debug3 + "/", debug5);
         return debug7;
     }
@@ -120,6 +120,6 @@ public class FolderPackResources extends AbstractPackResources
     static {
         LOGGER = LogManager.getLogger();
         ON_WINDOWS = (Util.getPlatform() == Util.OS.WINDOWS);
-        BACKSLASH_MATCHER = CharMatcher.is('Â¥Â¥');
+        BACKSLASH_MATCHER = CharMatcher.is('\\'); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/server/packs/VanillaPackResources.java b/src/main/java/net/minecraft/server/packs/VanillaPackResources.java
index 5eb65f62760f968063d0213148901cefc58ada4f..354b5fb4ea0b93384262ee2f7dbe8f2f2e2bcd65 100644
--- a/src/main/java/net/minecraft/server/packs/VanillaPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/VanillaPackResources.java
@@ -2,6 +2,7 @@ package net.minecraft.server.packs;
 
 import net.minecraft.Util;
 import com.google.common.collect.Maps;
+import net.minecraft.server.packs.repository.Pack;
 import org.apache.logging.log4j.LogManager;
 import java.nio.file.FileSystemNotFoundException;
 import java.util.Collections;
@@ -45,7 +46,7 @@ public class VanillaPackResources implements PackResources
     public final Set<String> namespaces;
     
     public VanillaPackResources(final String... debug1) {
-        this.namespaces = (Set<String>)ImmutableSet.copyOf((Object[])debug1);
+        this.namespaces = (Set<String>)ImmutableSet.copyOf(debug1); // MagmaCube - decompile fix
     }
     
     @Override
@@ -73,7 +74,7 @@ public class VanillaPackResources implements PackResources
     
     @Override
     public Collection<ResourceLocation> getResources(final PackType debug1, final String debug2, final String debug3, final int debug4, final Predicate<String> debug5) {
-        final Set<ResourceLocation> debug6 = (Set<ResourceLocation>)Sets.newHashSet();
+        final Set<ResourceLocation> debug6 = Sets.newHashSet(); // MagmaCube - decompile fix
         if (VanillaPackResources.generatedDir != null) {
             try {
                 getResources(debug6, debug4, debug2, VanillaPackResources.generatedDir.resolve(debug1.getDirectory()), debug3, debug5);
@@ -119,9 +120,7 @@ public class VanillaPackResources implements PackResources
         }
         catch (FileNotFoundException | NoSuchFileException ex5) {}
         catch (URISyntaxException | IOException ex6) {
-            final Exception ex;
-            final Exception debug13 = ex;
-            VanillaPackResources.LOGGER.error("Couldn't get a list of all vanilla resources", (Throwable)debug13);
+            VanillaPackResources.LOGGER.error("Couldn't get a list of all vanilla resources", (Throwable)ex6); // MagmaCube - decompile fix
         }
         return debug6;
     }
@@ -129,7 +128,7 @@ public class VanillaPackResources implements PackResources
     private static void getResources(final Collection<ResourceLocation> debug0, final int debug1, final String debug2, final Path debug3, final String debug4, final Predicate<String> debug5) throws IOException {
         final Path debug6 = debug3.resolve(debug2);
         try (final Stream<Path> debug7 = Files.walk(debug6.resolve(debug4), debug1, new FileVisitOption[0])) {
-            debug7.filter(debug1 -> !debug1.endsWith(".mcmeta") && Files.isRegularFile(debug1, new LinkOption[0]) && debug5.test(debug1.getFileName().toString())).map(debug2 -> new ResourceLocation(debug2, debug6.relativize(debug2).toString().replaceAll("Â¥Â¥Â¥Â¥", "/"))).forEach(debug0::add);
+            debug7.filter(debug1l -> !debug1l.endsWith(".mcmeta") && Files.isRegularFile(debug1l, new LinkOption[0]) && debug5.test(debug1l.getFileName().toString())).map(debug2l -> new ResourceLocation(debug2, debug6.relativize(debug2l).toString().replaceAll("Â¥Â¥Â¥Â¥", "/"))).forEach(debug0::add); // MagmaCube - decompile fix
         }
     }
     
@@ -200,8 +199,6 @@ public class VanillaPackResources implements PackResources
             return AbstractPackResources.getMetadataFromStream(debug1, debug2);
         }
         catch (RuntimeException | FileNotFoundException ex2) {
-            final Exception ex;
-            final Exception debug3 = ex;
             return null;
         }
     }
@@ -217,24 +214,19 @@ public class VanillaPackResources implements PackResources
     
     static {
         LOGGER = LogManager.getLogger();
-        final PackType[] array;
-        int length;
-        int i;
-        PackType debug;
-        URL debug2;
-        URI debug3;
-        FileSystem debug4;
-        final Exception ex;
-        Exception debug5;
-        JAR_FILESYSTEM_BY_TYPE = Util.make((Map<PackType, FileSystem>)Maps.newHashMap(), debug0 -> {
+        // MagmaCube start - decompile fix
+        JAR_FILESYSTEM_BY_TYPE = Util.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             synchronized (VanillaPackResources.class) {
-                PackType.values();
-                for (length = array.length; i < length; ++i) {
-                    debug = array[i];
-                    debug2 = VanillaPackResources.class.getResource("/" + debug.getDirectory() + "/.mcassetsroot");
+                PackType[] array = PackType.values();
+                int i = 0;
+                for (int length = array.length; i < length; ++i) {
+                    PackType debug = array[i];
+                    URL debug2 = VanillaPackResources.class.getResource("/" + debug.getDirectory() + "/.mcassetsroot");
+                    // MagmaCube end - decompile fix
                     try {
-                        debug3 = debug2.toURI();
+                        URI debug3 = debug2.toURI(); // MagmaCube - decompile fix
                         if ("jar".equals(debug3.getScheme())) {
+                            FileSystem debug4; // MagmaCube - decompile fix
                             try {
                                 debug4 = FileSystems.getFileSystem(debug3);
                             }
@@ -245,8 +237,7 @@ public class VanillaPackResources implements PackResources
                         }
                     }
                     catch (URISyntaxException | IOException ex2) {
-                        debug5 = ex;
-                        VanillaPackResources.LOGGER.error("Couldn't get a list of all vanilla resources", (Throwable)debug5);
+                        VanillaPackResources.LOGGER.error("Couldn't get a list of all vanilla resources", (Throwable)ex2); // MagmaCube - decompile fix
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/server/packs/repository/Pack.java b/src/main/java/net/minecraft/server/packs/repository/Pack.java
index 3662a83dc37665afdff0ad9318f6cec32c59dff2..a104df4c0eb065cebeb0e5662c7f9adbf9832356 100644
--- a/src/main/java/net/minecraft/server/packs/repository/Pack.java
+++ b/src/main/java/net/minecraft/server/packs/repository/Pack.java
@@ -79,11 +79,9 @@ public class Pack implements AutoCloseable
     }
     
     public Component getChatLink(final boolean debug1) {
-        final HoverEvent debug3;
-        final Style style;
         return ComponentUtils.wrapInSquareBrackets(this.packSource.decorate(new TextComponent(this.id))).withStyle(debug2 -> {
-            debug2.withColor(debug1 ? ChatFormatting.GREEN : ChatFormatting.RED).withInsertion(StringArgumentType.escapeIfRequired(this.id));
-            new HoverEvent((HoverEvent.Action<MutableComponent>)HoverEvent.Action.SHOW_TEXT, new TextComponent("").append(this.title).append("Â¥n").append(this.description));
+            Style style = debug2.withColor(debug1 ? ChatFormatting.GREEN : ChatFormatting.RED).withInsertion(StringArgumentType.escapeIfRequired(this.id)); // MagmaCube - decompile fix
+            HoverEvent debug3 = new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TextComponent("").append(this.title).append("Â¥n").append(this.description)); // MagmaCube - decompile fix
             return style.withHoverEvent(debug3);
         });
     }
diff --git a/src/main/java/net/minecraft/server/packs/repository/PackRepository.java b/src/main/java/net/minecraft/server/packs/repository/PackRepository.java
index 2d2e6e1204f65378aaa12d454c7e0d773a578a91..754bf8ba2bcf4f959d9be42c072fce887827d718 100644
--- a/src/main/java/net/minecraft/server/packs/repository/PackRepository.java
+++ b/src/main/java/net/minecraft/server/packs/repository/PackRepository.java
@@ -38,7 +38,7 @@ implements AutoCloseable {
 
     public PackRepository(Pack.PackConstructor debug1, RepositorySource ... debug2) {
         this.constructor = debug1;
-        this.sources = ImmutableSet.copyOf((Object[])debug2);
+        this.sources = ImmutableSet.copyOf(debug2); // MagmaCube - decompile fix
     }
 
     public PackRepository(RepositorySource ... debug1) {
diff --git a/src/main/java/net/minecraft/server/packs/repository/PackSource.java b/src/main/java/net/minecraft/server/packs/repository/PackSource.java
index 7cd36fd0d337b67bad2b18470b7ba8e6be419106..6121d8621991d9109b2e349e88c69a902a6daa72 100644
--- a/src/main/java/net/minecraft/server/packs/repository/PackSource.java
+++ b/src/main/java/net/minecraft/server/packs/repository/PackSource.java
@@ -11,18 +11,15 @@ public interface PackSource
     public static final PackSource SERVER = decorating("pack.source.server");
     
     Component decorate(final Component p0);
-    
-    default PackSource passThrough() {
+
+    static PackSource passThrough() { // MagmaCube - decompile fix
         return debug0 -> debug0;
     }
     
-    default PackSource decorating(final String debug0) {
+    static PackSource decorating(final String debug0) { // MagmaCube - decompile fix
         final Component debug2 = new TranslatableComponent(debug0);
-        final TranslatableComponent translatableComponent;
-        final Object o;
         return debug1 -> {
-            new TranslatableComponent("pack.nameAndSource", new Object[] { debug1, o });
-            return translatableComponent;
+            return new TranslatableComponent("pack.nameAndSource", new Object[] { debug1, debug2 }); // MagmaCube - decompile fix
         };
     }
 }
diff --git a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
index 938fedc93243b2181f7ae592c4ebca5d06247726..2ba69dae575ed0ecdc588458ef342f86173bcf91 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
@@ -16,39 +16,32 @@ import java.util.List;
 import com.google.common.base.Stopwatch;
 import org.apache.logging.log4j.Logger;
 
-public class ProfiledReloadInstance extends SimpleReloadInstance<State>
+public class ProfiledReloadInstance extends SimpleReloadInstance<ProfiledReloadInstance.State> // MagmaCube - decompile fix
 {
     private static final Logger LOGGER;
     private final Stopwatch total;
     
     public ProfiledReloadInstance(final ResourceManager debug1, final List<PreparableReloadListener> debug2, final Executor debug3, final Executor debug4, final CompletableFuture<Unit> debug5) {
-        final AtomicLong debug6;
-        final AtomicLong debug7;
-        final ActiveProfiler debug8;
-        final ActiveProfiler debug9;
-        final long debug11;
-        final AtomicLong atomicLong;
-        final long debug12;
-        final AtomicLong atomicLong2;
-        final CompletableFuture<Void> debug10;
-        super(debug3, debug4, debug1, debug2, (debug1, debug2, debug3, debug4, debug5) -> {
-            debug6 = new AtomicLong();
-            debug7 = new AtomicLong();
-            debug8 = new ActiveProfiler(Util.timeSource, () -> 0, false);
-            debug9 = new ActiveProfiler(Util.timeSource, () -> 0, false);
-            debug10 = debug3.reload(debug1, debug2, debug8, debug9, debug2 -> debug4.execute(() -> {
-                debug11 = Util.getNanos();
-                debug2.run();
-                atomicLong.addAndGet(Util.getNanos() - debug11);
-            }), debug2 -> debug5.execute(() -> {
-                debug12 = Util.getNanos();
-                debug2.run();
-                atomicLong2.addAndGet(Util.getNanos() - debug12);
+        // MagmaCube start - decompile fix
+        super(debug3, debug4, debug1, debug2, (debug1l, debug2l, debug3l, debug4l, debug5l) -> {
+            AtomicLong debug6 = new AtomicLong();
+            AtomicLong debug7 = new AtomicLong();
+            ActiveProfiler debug8 = new ActiveProfiler(Util.timeSource, () -> 0, false);
+            ActiveProfiler debug9 = new ActiveProfiler(Util.timeSource, () -> 0, false);
+            CompletableFuture<Void> debug10 = debug3l.reload(debug1l, debug2l, debug8, debug9, debug2ll -> debug4l.execute(() -> {
+                long debug11 = Util.getNanos();
+                debug2ll.run();
+                debug6.addAndGet(Util.getNanos() - debug11);
+            }), debug2ll -> debug5l.execute(() -> {
+                long debug12 = Util.getNanos();
+                debug2ll.run();
+                debug7.addAndGet(Util.getNanos() - debug12);
             }));
-            return debug10.thenApplyAsync(debug5 -> new State(debug3.getName(), debug8.getResults(), debug9.getResults(), debug6, debug7), debug4);
+            return debug10.thenApplyAsync(debug5ll -> new State(debug3l.getName(), debug8.getResults(), debug9.getResults(), debug6, debug7), debug4);
         }, debug5);
         (this.total = Stopwatch.createUnstarted()).start();
-        this.allDone.thenAcceptAsync((Consumer<? super List<S>>)this::finish, debug4);
+        this.allDone.thenAcceptAsync(this::finish, debug4);
+        // MagmaCube end - decompile fix
     }
     
     private void finish(final List<State> debug1) {
diff --git a/src/main/java/net/minecraft/server/packs/resources/ResourceManager.java b/src/main/java/net/minecraft/server/packs/resources/ResourceManager.java
index 3e12fc09d54af637232f4c4d5c102593bd092490..40ea4a4d4a1ebe5c8cd1f21193adfd5b16666617 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ResourceManager.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ResourceManager.java
@@ -32,7 +32,7 @@ public interface ResourceManager
         
         @Override
         public Set<String> getNamespaces() {
-            return (Set<String>)ImmutableSet.of();
+            return ImmutableSet.of(); // MagmaCube - decompile fix
         }
         
         @Override
@@ -47,12 +47,12 @@ public interface ResourceManager
         
         @Override
         public List<Resource> getResources(final ResourceLocation debug1) {
-            return (List<Resource>)ImmutableList.of();
+            return ImmutableList.of(); // MagmaCube - decompile fix
         }
         
         @Override
         public Collection<ResourceLocation> listResources(final String debug1, final Predicate<String> debug2) {
-            return (Collection<ResourceLocation>)ImmutableSet.of();
+            return ImmutableSet.of(); // MagmaCube - decompile fix
         }
         
         @Override
diff --git a/src/main/java/net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java b/src/main/java/net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java
index a123a2dc730165a3972a4ced5062bd3bffb26c79..4a3df14a345ceaa3c70f2ed03758956a8b2ffa80 100644
--- a/src/main/java/net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java
+++ b/src/main/java/net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java
@@ -32,7 +32,7 @@ public abstract class SimpleJsonResourceReloadListener extends SimplePreparableR
     
     @Override
     protected Map<ResourceLocation, JsonElement> prepare(final ResourceManager debug1, final ProfilerFiller debug2) {
-        final Map<ResourceLocation, JsonElement> debug3 = (Map<ResourceLocation, JsonElement>)Maps.newHashMap();
+        final Map<ResourceLocation, JsonElement> debug3 = Maps.newHashMap(); // MagmaCube - decompile fix
         final int debug4 = this.directory.length() + 1;
         for (final ResourceLocation debug5 : debug1.listResources(this.directory, debug0 -> debug0.endsWith(".json"))) {
             final String debug6 = debug5.getPath();
@@ -52,9 +52,7 @@ public abstract class SimpleJsonResourceReloadListener extends SimplePreparableR
                 }
             }
             catch (JsonParseException | IllegalArgumentException | IOException ex2) {
-                final Exception ex;
-                final Exception debug13 = ex;
-                SimpleJsonResourceReloadListener.LOGGER.error("Couldn't parse data file {} from {}", (Object)debug7, (Object)debug5, (Object)debug13);
+                SimpleJsonResourceReloadListener.LOGGER.error("Couldn't parse data file {} from {}", (Object)debug7, (Object)debug5, ex2); // MagmaCube - decompile fix
             }
         }
         return debug3;
diff --git a/src/main/java/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java b/src/main/java/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java
index 3b249ccbfe48ab0bc423d6cfeb3ccc2e16a64ae7..16b408402ec9a75b29c862962f145a5f10b37dd6 100644
--- a/src/main/java/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java
+++ b/src/main/java/net/minecraft/server/packs/resources/SimplePreparableReloadListener.java
@@ -10,7 +10,7 @@ public abstract class SimplePreparableReloadListener<T> implements PreparableRel
 {
     @Override
     public final CompletableFuture<Void> reload(final PreparationBarrier debug1, final ResourceManager debug2, final ProfilerFiller debug3, final ProfilerFiller debug4, final Executor debug5, final Executor debug6) {
-        return CompletableFuture.supplyAsync(() -> this.prepare(debug2, debug3), debug5).thenCompose((Function<? super Object, ? extends CompletionStage<Object>>)debug1::wait).thenAcceptAsync(debug3 -> this.apply(debug3, debug2, debug4), debug6);
+        return CompletableFuture.supplyAsync(() -> this.prepare(debug2, debug3), debug5).thenCompose(debug1::wait).thenAcceptAsync(debug32 -> this.apply(debug32, debug2, debug4), debug6); // MagmaCube - decompile fix
     }
     
     protected abstract T prepare(final ResourceManager p0, final ProfilerFiller p1);
diff --git a/src/main/java/net/minecraft/server/players/GameProfileCache.java b/src/main/java/net/minecraft/server/players/GameProfileCache.java
index 872e3c6535ccc62e6b59edce717703f2048e5797..e0466f1ac947d9e30b7c85a781880b6ee7f8cb64 100644
--- a/src/main/java/net/minecraft/server/players/GameProfileCache.java
+++ b/src/main/java/net/minecraft/server/players/GameProfileCache.java
@@ -53,13 +53,13 @@ public class GameProfileCache
     private final AtomicLong operationCount;
     
     public GameProfileCache(final GameProfileRepository debug1, final File debug2) {
-        this.profilesByName = (Map<String, GameProfileInfo>)Maps.newConcurrentMap();
-        this.profilesByUUID = (Map<UUID, GameProfileInfo>)Maps.newConcurrentMap();
+        this.profilesByName = Maps.newConcurrentMap(); // MagmaCube - decompile fix
+        this.profilesByUUID = Maps.newConcurrentMap(); // MagmaCube - decompile fix
         this.gson = new GsonBuilder().create();
         this.operationCount = new AtomicLong();
         this.profileRepository = debug1;
         this.file = debug2;
-        Lists.reverse((List)this.load()).forEach(this::safeAdd);
+        Lists.reverse(this.load()).forEach(this::safeAdd); // MagmaCube - decompile fix
     }
     
     private void safeAdd(final GameProfileInfo debug1) {
@@ -83,7 +83,7 @@ public class GameProfileCache
                 debug2.set(debug1);
             }
             
-            public void onProfileLookupFailed(final GameProfile debug1, final Exception debug2) {
+            public void onProfileLookupFailed(final GameProfile debug1, final Exception debug3) { // MagmaCube - decompile fix
                 debug2.set(null);
             }
         };
@@ -162,29 +162,24 @@ public class GameProfileCache
     }
     
     public List<GameProfileInfo> load() {
-        final List<GameProfileInfo> debug3 = (List<GameProfileInfo>)Lists.newArrayList();
+        final List<GameProfileInfo> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
         try (final Reader debug4 = Files.newReader(this.file, StandardCharsets.UTF_8)) {
             final JsonArray debug5 = (JsonArray)this.gson.fromJson(debug4, (Class)JsonArray.class);
             if (debug5 == null) {
                 return debug3;
             }
             final DateFormat debug6 = createDateFormat();
-            final DateFormat debug9;
-            final GameProfileInfo debug7;
-            final List<GameProfileInfo> list;
             debug5.forEach(debug2 -> {
-                debug7 = readGameProfile(debug2, debug9);
+                GameProfileInfo debug7 = readGameProfile(debug2, debug6); // MagmaCube - decompile fix
                 if (debug7 != null) {
-                    list.add(debug7);
+                    debug3.add(debug7); // MagmaCube - decompile fix
                 }
                 return;
             });
         }
         catch (FileNotFoundException ex2) {}
         catch (IOException | JsonParseException ex3) {
-            final Exception ex;
-            final Exception debug8 = ex;
-            GameProfileCache.LOGGER.warn("Failed to load profile cache {}", (Object)this.file, (Object)debug8);
+            GameProfileCache.LOGGER.warn("Failed to load profile cache {}", (Object)this.file, ex3); // MagmaCube - decompile fix
         }
         return debug3;
     }
@@ -201,7 +196,7 @@ public class GameProfileCache
     }
     
     private Stream<GameProfileInfo> getTopMRUProfiles(final int debug1) {
-        return ImmutableList.copyOf((Collection)this.profilesByUUID.values()).stream().sorted(Comparator.comparing((Function<? super Object, ? extends Comparable>)GameProfileInfo::getLastAccess).reversed()).limit(debug1);
+        return ImmutableList.copyOf((Collection)this.profilesByUUID.values()).stream().sorted(Comparator.comparing(GameProfileInfo::getLastAccess).reversed()).limit(debug1); // MagmaCube - decompile fix
     }
     
     private static JsonElement writeGameProfile(final GameProfileInfo debug0, final DateFormat debug1) {
diff --git a/src/main/java/net/minecraft/sounds/Music.java b/src/main/java/net/minecraft/sounds/Music.java
index b482d2d726448497477de1d24b4e304ae40798ae..c25454cf45793b95ba1d3e28d94625e8151bdfd9 100644
--- a/src/main/java/net/minecraft/sounds/Music.java
+++ b/src/main/java/net/minecraft/sounds/Music.java
@@ -37,6 +37,6 @@ public class Music
     }
     
     static {
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)SoundEvent.CODEC.fieldOf("sound").forGetter(debug0 -> debug0.event), (App)Codec.INT.fieldOf("min_delay").forGetter(debug0 -> debug0.minDelay), (App)Codec.INT.fieldOf("max_delay").forGetter(debug0 -> debug0.maxDelay), (App)Codec.BOOL.fieldOf("replace_current_music").forGetter(debug0 -> debug0.replaceCurrentMusic)).apply(debug0, Music::new));
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(SoundEvent.CODEC.fieldOf("sound").forGetter(debug0l -> debug0l.event), Codec.INT.fieldOf("min_delay").forGetter(debug0l -> debug0l.minDelay), Codec.INT.fieldOf("max_delay").forGetter(debug0l -> debug0l.maxDelay), Codec.BOOL.fieldOf("replace_current_music").forGetter(debug0l -> debug0l.replaceCurrentMusic)).apply(debug0, Music::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/sounds/SoundEvent.java b/src/main/java/net/minecraft/sounds/SoundEvent.java
index 3e3813fb0e148110b6f989189c32d6203051253b..c6adf1de1bb5055c86d95cd0947b61edc4131cd0 100644
--- a/src/main/java/net/minecraft/sounds/SoundEvent.java
+++ b/src/main/java/net/minecraft/sounds/SoundEvent.java
@@ -18,6 +18,6 @@ public class SoundEvent
     }
     
     static {
-        CODEC = ResourceLocation.CODEC.xmap((Function)SoundEvent::new, debug0 -> debug0.location);
+        CODEC = ResourceLocation.CODEC.xmap(SoundEvent::new, debug0 -> debug0.location); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/stats/RecipeBook.java b/src/main/java/net/minecraft/stats/RecipeBook.java
index 464ddbc0e97e83af391cc6369c154485baa1deeb..f25681e766e0549302d1b61f9e8c26435bae372e 100644
--- a/src/main/java/net/minecraft/stats/RecipeBook.java
+++ b/src/main/java/net/minecraft/stats/RecipeBook.java
@@ -16,8 +16,8 @@ public class RecipeBook
     private final RecipeBookSettings bookSettings;
     
     public RecipeBook() {
-        this.known = (Set<ResourceLocation>)Sets.newHashSet();
-        this.highlight = (Set<ResourceLocation>)Sets.newHashSet();
+        this.known = Sets.newHashSet(); // MagmaCube - decompile fix
+        this.highlight = Sets.newHashSet(); // MagmaCube - decompile fix
         this.bookSettings = new RecipeBookSettings();
     }
     
diff --git a/src/main/java/net/minecraft/stats/ServerRecipeBook.java b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
index 5706c64502d14c7df6767bac313a00028db44807..888435e77cb2aea8cd6f6538cbd754a66a77a4c1 100644
--- a/src/main/java/net/minecraft/stats/ServerRecipeBook.java
+++ b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
@@ -28,7 +28,7 @@ public class ServerRecipeBook extends RecipeBook
     private static final Logger LOGGER;
     
     public int addRecipes(final Collection<Recipe<?>> debug1, final ServerPlayer debug2) {
-        final List<ResourceLocation> debug3 = (List<ResourceLocation>)Lists.newArrayList();
+        final List<ResourceLocation> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
         int debug4 = 0;
         for (final Recipe<?> debug5 : debug1) {
             final ResourceLocation debug6 = debug5.getId();
@@ -45,7 +45,7 @@ public class ServerRecipeBook extends RecipeBook
     }
     
     public int removeRecipes(final Collection<Recipe<?>> debug1, final ServerPlayer debug2) {
-        final List<ResourceLocation> debug3 = (List<ResourceLocation>)Lists.newArrayList();
+        final List<ResourceLocation> debug3 = Lists.newArrayList(); // MagmaCube - decompile fix
         int debug4 = 0;
         for (final Recipe<?> debug5 : debug1) {
             final ResourceLocation debug6 = debug5.getId();
@@ -60,7 +60,7 @@ public class ServerRecipeBook extends RecipeBook
     }
     
     private void sendRecipes(final ClientboundRecipePacket.State debug1, final ServerPlayer debug2, final List<ResourceLocation> debug3) {
-        debug2.connection.send(new ClientboundRecipePacket(debug1, debug3, (Collection<ResourceLocation>)Collections.emptyList(), this.getBookSettings()));
+        debug2.connection.send(new ClientboundRecipePacket(debug1, debug3, Collections.emptyList(), this.getBookSettings())); // MagmaCube - decompile fix
     }
     
     public CompoundTag toNbt() {
@@ -68,12 +68,12 @@ public class ServerRecipeBook extends RecipeBook
         this.getBookSettings().write(debug1);
         final ListTag debug2 = new ListTag();
         for (final ResourceLocation debug3 : this.known) {
-            ((AbstractList<StringTag>)debug2).add(StringTag.valueOf(debug3.toString()));
+            debug2.add(StringTag.valueOf(debug3.toString())); // MagmaCube - decompile fix
         }
         debug1.put("recipes", debug2);
         final ListTag debug4 = new ListTag();
         for (final ResourceLocation debug5 : this.highlight) {
-            ((AbstractList<StringTag>)debug4).add(StringTag.valueOf(debug5.toString()));
+            debug4.add(StringTag.valueOf(debug5.toString())); // MagmaCube - decompile fix
         }
         debug1.put("toBeDisplayed", debug4);
         return debug1;
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index 740954ad0933dc2c5a740f3cca9ceb331048751d..256e7e2c2354ec4219ae686b405226c99663ab90 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -121,12 +121,12 @@ extends StatsCounter {
                     if (!debug7.contains(debug9, 10)) continue;
                     Util.ifElse(Registry.STAT_TYPE.getOptional(new ResourceLocation(debug9)), debug32 -> {
                         CompoundTag debug4 = debug7.getCompound(debug9);
-                        for (String debug6 : debug4.getAllKeys()) {
-                            if (debug4.contains(debug6, 99)) {
-                                Util.ifElse(this.getStat((StatType)debug32, debug6), debug3 -> this.stats.put(debug3, debug4.getInt(debug6)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", (Object)this.file, (Object)debug6));
+                        for (String debug6l : debug4.getAllKeys()) { // MagmaCube - decompile fix
+                            if (debug4.contains(debug6l, 99)) { // MagmaCube - decompile fix
+                                Util.ifElse(this.getStat(debug32, debug6l), debug3l -> this.stats.put(debug3l, debug4.getInt(debug6l)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", (Object)this.file, (Object)debug6l)); // MagmaCube - decompile fix
                                 continue;
                             }
-                            LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", (Object)this.file, (Object)debug4.get(debug6), (Object)debug6);
+                            LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", (Object)this.file, (Object)debug4.get(debug6l), (Object)debug6l); // MagmaCube - decompile fix
                         }
                     }, () -> LOGGER.warn("Invalid statistic type in {}: Don't know what {} is", (Object)this.file, (Object)debug9));
                 }
@@ -157,9 +157,9 @@ extends StatsCounter {
     }
 
     protected String toJson() {
-        HashMap debug1 = Maps.newHashMap();
-        for (Object debug32 : this.stats.object2IntEntrySet()) {
-            Stat stat = (Stat)debug32.getKey();
+        HashMap<StatType<?>, JsonObject> debug1 = Maps.newHashMap(); // MagmaCube - decompile fix
+        for (Object2IntMap.Entry<Stat<?>> debug32 : this.stats.object2IntEntrySet()) { // MagmaCube - decompile fix
+            Stat stat = (Stat)debug32.getKey(); // MagmaCube - decompile fix
             debug1.computeIfAbsent(stat.getType(), debug0 -> new JsonObject()).addProperty(ServerStatsCounter.getKey(stat).toString(), (Number)debug32.getIntValue());
         }
         JsonObject debug2 = new JsonObject();
diff --git a/src/main/java/net/minecraft/stats/StatsCounter.java b/src/main/java/net/minecraft/stats/StatsCounter.java
index 74492b222d1a4390861c1fca8ec3c49fd11e898e..7999bb6d98289201446d55d67fc422f2ccecb56e 100644
--- a/src/main/java/net/minecraft/stats/StatsCounter.java
+++ b/src/main/java/net/minecraft/stats/StatsCounter.java
@@ -19,7 +19,7 @@ public class StatsCounter
     }
     
     public void setValue(final Player debug1, final Stat<?> debug2, final int debug3) {
-        this.stats.put((Object)debug2, debug3);
+        this.stats.put(debug2, debug3); // MagmaCube - decompile fix
     }
     
     public <T> int getValue(final StatType<T> debug1, final T debug2) {
diff --git a/src/main/java/net/minecraft/tags/Tag.java b/src/main/java/net/minecraft/tags/Tag.java
index 802d8520cd3f4596d892a4fcf5228f575fb2ed0e..c0f0708c1b069af312a7b9ed216cd723a4a240ae 100644
--- a/src/main/java/net/minecraft/tags/Tag.java
+++ b/src/main/java/net/minecraft/tags/Tag.java
@@ -22,7 +22,7 @@ import java.util.function.Supplier;
 public interface Tag<T>
 {
     default <T> Codec<Tag<T>> codec(final Supplier<TagCollection<T>> debug0) {
-        return (Codec<Tag<T>>)ResourceLocation.CODEC.flatXmap(debug1 -> Optional.ofNullable(debug0.get().getTag(debug1)).map((Function<? super Tag<T>, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + debug1)), debug1 -> Optional.ofNullable(debug0.get().getId(debug1)).map((Function<? super ResourceLocation, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + debug1)));
+        return (Codec<Tag<T>>)ResourceLocation.CODEC.flatXmap(debug1 -> Optional.ofNullable(debug0.get().getTag(debug1)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + debug1)), debug1 -> Optional.ofNullable(debug0.get().getId(debug1)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown tag: " + debug1))); // MagmaCube - decompile fix
     }
     
     boolean contains(final T p0);
@@ -34,7 +34,7 @@ public interface Tag<T>
         return debug2.get(debug1.nextInt(debug2.size()));
     }
     
-    default <T> Tag<T> fromSet(final Set<T> debug0) {
+    static <T> Tag<T> fromSet(final Set<T> debug0) { // MagmaCube - decompile fix
         return SetTag.create(debug0);
     }
     
@@ -63,7 +63,7 @@ public interface Tag<T>
         private final List<BuilderEntry> entries;
         
         public Builder() {
-            this.entries = (List<BuilderEntry>)Lists.newArrayList();
+            this.entries = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         public static Builder tag() {
@@ -102,19 +102,19 @@ public interface Tag<T>
         }
         
         public <T> Stream<BuilderEntry> getUnresolvedEntries(final Function<ResourceLocation, Tag<T>> debug1, final Function<ResourceLocation, T> debug2) {
-            return this.getEntries().filter(debug2 -> !debug2.getEntry().build(debug1, debug2, debug0 -> {}));
+            return this.getEntries().filter(debug2l -> !debug2l.getEntry().build(debug1, debug2, debug0 -> {})); // MagmaCube - decompile fix
         }
         
         public Builder addFromJson(final JsonObject debug1, final String debug2) {
             final JsonArray debug3 = GsonHelper.getAsJsonArray(debug1, "values");
-            final List<Entry> debug4 = (List<Entry>)Lists.newArrayList();
+            final List<Entry> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
             for (final JsonElement debug5 : debug3) {
                 debug4.add(parseEntry(debug5));
             }
             if (GsonHelper.getAsBoolean(debug1, "replace", false)) {
                 this.entries.clear();
             }
-            debug4.forEach(debug2 -> this.entries.add(new BuilderEntry(debug2, debug2)));
+            debug4.forEach(debug2l -> this.entries.add(new BuilderEntry(debug2l, debug2))); // MagmaCube - decompile fix
             return this;
         }
         
diff --git a/src/main/java/net/minecraft/tags/TagCollection.java b/src/main/java/net/minecraft/tags/TagCollection.java
index 268f77cd6c773175bb62a5d65af21d1699dec20e..a40211eb8edd687cef9b6e8a2fcd5801a8e8ec9c 100644
--- a/src/main/java/net/minecraft/tags/TagCollection.java
+++ b/src/main/java/net/minecraft/tags/TagCollection.java
@@ -43,7 +43,7 @@ public interface TagCollection<T>
     }
     
     default Collection<ResourceLocation> getMatchingTags(final T debug1) {
-        final List<ResourceLocation> debug2 = (List<ResourceLocation>)Lists.newArrayList();
+        final List<ResourceLocation> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Map.Entry<ResourceLocation, Tag<T>> debug3 : this.getAllTags().entrySet()) {
             if (debug3.getValue().contains(debug1)) {
                 debug2.add(debug3.getKey());
@@ -64,8 +64,8 @@ public interface TagCollection<T>
         }
     }
     
-    default <T> TagCollection<T> loadFromNetwork(final FriendlyByteBuf debug0, final Registry<T> debug1) {
-        final Map<ResourceLocation, Tag<T>> debug2 = (Map<ResourceLocation, Tag<T>>)Maps.newHashMap();
+    static <T> TagCollection<T> loadFromNetwork(final FriendlyByteBuf debug0, final Registry<T> debug1) { // MagmaCube - decompile fix
+        final Map<ResourceLocation, Tag<T>> debug2 = Maps.newHashMap(); // MagmaCube - decompile fix
         for (int debug3 = debug0.readVarInt(), debug4 = 0; debug4 < debug3; ++debug4) {
             final ResourceLocation debug5 = debug0.readResourceLocation();
             final int debug6 = debug0.readVarInt();
@@ -78,18 +78,18 @@ public interface TagCollection<T>
         return of(debug2);
     }
     
-    default <T> TagCollection<T> empty() {
-        return of((Map<ResourceLocation, Tag<T>>)ImmutableBiMap.of());
+    static <T> TagCollection<T> empty() { // MagmaCube - decompile fix
+        return of(ImmutableBiMap.of()); // MagmaCube - decompile fix
     }
     
-    default <T> TagCollection<T> of(final Map<ResourceLocation, Tag<T>> debug0) {
+    static <T> TagCollection<T> of(final Map<ResourceLocation, Tag<T>> debug0) { // MagmaCube - decompile fix
         final BiMap<ResourceLocation, Tag<T>> debug = (BiMap<ResourceLocation, Tag<T>>)ImmutableBiMap.copyOf((Map)debug0);
         return new TagCollection<T>() {
             private final Tag<T> empty = SetTag.empty();
             
             @Override
             public Tag<T> getTagOrEmpty(final ResourceLocation debug1) {
-                return (Tag<T>)debug.getOrDefault((Object)debug1, (Object)this.empty);
+                return (Tag<T>)debug.getOrDefault((Object)debug1, this.empty); // MagmaCube - decompile fix
             }
             
             @Nullable
diff --git a/src/main/java/net/minecraft/tags/TagContainer.java b/src/main/java/net/minecraft/tags/TagContainer.java
index 34f52e67f908b725702ff079c701f5fc87d5bb2a..bb6a3487c561ca26036a5a1b4304249e621487ee 100644
--- a/src/main/java/net/minecraft/tags/TagContainer.java
+++ b/src/main/java/net/minecraft/tags/TagContainer.java
@@ -40,7 +40,7 @@ public interface TagContainer
         return of(debug, debug2, debug3, debug4);
     }
     
-    default TagContainer of(final TagCollection<Block> debug0, final TagCollection<Item> debug1, final TagCollection<Fluid> debug2, final TagCollection<EntityType<?>> debug3) {
+    static TagContainer of(final TagCollection<Block> debug0, final TagCollection<Item> debug1, final TagCollection<Fluid> debug2, final TagCollection<EntityType<?>> debug3) { // MagmaCube - decompile fix
         return new TagContainer() {
             @Override
             public TagCollection<Block> getBlocks() {
diff --git a/src/main/java/net/minecraft/util/BitStorage.java b/src/main/java/net/minecraft/util/BitStorage.java
index 73097f5ca197edc2167b19b9e59476b98ba545ae..06d0e4e480577d98429a2dab98519d1ed41c55ee 100644
--- a/src/main/java/net/minecraft/util/BitStorage.java
+++ b/src/main/java/net/minecraft/util/BitStorage.java
@@ -56,7 +56,7 @@ public class BitStorage
         final long debug4 = this.data[debug3];
         final int debug5 = (debug1 - debug3 * this.valuesPerLong) * this.bits;
         final int debug6 = (int)(debug4 >> debug5 & this.mask);
-        this.data[debug3] = ((debug4 & â¾(this.mask << debug5)) | (debug2 & this.mask) << debug5);
+        this.data[debug3] = ((debug4 & (this.mask << debug5)) | (debug2 & this.mask) << debug5);
         return debug6;
     }
     
@@ -66,7 +66,7 @@ public class BitStorage
         final int debug3 = this.cellIndex(debug1);
         final long debug4 = this.data[debug3];
         final int debug5 = (debug1 - debug3 * this.valuesPerLong) * this.bits;
-        this.data[debug3] = ((debug4 & â¾(this.mask << debug5)) | (debug2 & this.mask) << debug5);
+        this.data[debug3] = ((debug4 & (this.mask << debug5)) | (debug2 & this.mask) << debug5);
     }
     
     public int get(final int debug1) {
diff --git a/src/main/java/net/minecraft/util/FormattedCharSequence.java b/src/main/java/net/minecraft/util/FormattedCharSequence.java
index 28ca146e78204990d6033c8f36c6cdfd5f0b68a0..8185de3498ad962f6ec860528b9d88fdef30d5ae 100644
--- a/src/main/java/net/minecraft/util/FormattedCharSequence.java
+++ b/src/main/java/net/minecraft/util/FormattedCharSequence.java
@@ -33,7 +33,7 @@ public interface FormattedCharSequence
     }
     
     default FormattedCharSink decorateOutput(final FormattedCharSink debug0, final Int2IntFunction debug1) {
-        return (debug2, debug3, debug4) -> debug0.accept(debug2, debug3, (int)debug1.apply((Object)debug4));
+        return (debug2, debug3, debug4) -> debug0.accept(debug2, debug3, (int)debug1.apply(debug4)); // MagmaCube - decompile fix
     }
     
     default FormattedCharSequence composite(final FormattedCharSequence debug0, final FormattedCharSequence debug1) {
@@ -63,12 +63,8 @@ public interface FormattedCharSequence
     }
     
     default FormattedCharSequence fromList(final List<FormattedCharSequence> debug0) {
-        final Iterator<FormattedCharSequence> iterator;
-        FormattedCharSequence debug2;
         return debug1 -> {
-            debug0.iterator();
-            while (iterator.hasNext()) {
-                debug2 = iterator.next();
+            for (FormattedCharSequence debug2 : debug0) { // MagmaCube - decompile fix
                 if (!debug2.accept(debug1)) {
                     return false;
                 }
diff --git a/src/main/java/net/minecraft/util/StringRepresentable.java b/src/main/java/net/minecraft/util/StringRepresentable.java
index aea3fff0d24ba4f01d724482fb4375799d075a75..44b0e12c1dfb348ff3fbca5a71f9adbb3e7fa474 100644
--- a/src/main/java/net/minecraft/util/StringRepresentable.java
+++ b/src/main/java/net/minecraft/util/StringRepresentable.java
@@ -18,25 +18,25 @@ public interface StringRepresentable
 {
     String getSerializedName();
     
-    default <E extends Enum> Codec<E> fromEnum(final Supplier<E[]> debug0, final Function<? super String, ? extends E> debug1) {
+    static <E extends Enum<E> & StringRepresentable> Codec<E> fromEnum(final Supplier<E[]> debug0, final Function<? super String, ? extends E> debug1) { // MagmaCube - decompile fix
         final E[] debug2 = debug0.get();
-        return fromStringResolver(java.lang.Enum::ordinal, debug1 -> debug2[debug1], debug1);
+        return fromStringResolver(java.lang.Enum::ordinal, debug1l -> debug2[debug1l], debug1); // MagmaCube - decompile fix
     }
     
-    default <E extends StringRepresentable> Codec<E> fromStringResolver(final ToIntFunction<E> debug0, final IntFunction<E> debug1, final Function<? super String, ? extends E> debug2) {
+    static <E extends StringRepresentable> Codec<E> fromStringResolver(final ToIntFunction<E> debug0, final IntFunction<E> f, final Function<? super String, ? extends E> f2) { // MagmaCube - decompile fix
         return (Codec<E>)new Codec<E>() {
             public <T> DataResult<T> encode(final E debug1, final DynamicOps<T> debug2, final T debug3) {
                 if (debug2.compressMaps()) {
-                    return (DataResult<T>)debug2.mergeToPrimitive((Object)debug3, debug2.createInt(debug0.applyAsInt(debug1)));
+                    return (DataResult<T>)debug2.mergeToPrimitive(debug3, debug2.createInt(debug0.applyAsInt(debug1))); // MagmaCube - decompile fix
                 }
-                return (DataResult<T>)debug2.mergeToPrimitive((Object)debug3, debug2.createString(debug1.getSerializedName()));
+                return (DataResult<T>)debug2.mergeToPrimitive(debug3, debug2.createString(debug1.getSerializedName())); // MagmaCube - decompile fix
             }
             
             public <T> DataResult<Pair<E, T>> decode(final DynamicOps<T> debug1, final T debug2) {
                 if (debug1.compressMaps()) {
-                    return (DataResult<Pair<E, T>>)debug1.getNumberValue((Object)debug2).flatMap(debug1 -> Optional.ofNullable(debug1.apply(debug1.intValue())).map((Function<? super Object, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unknown element id: " + debug1))).map(debug1 -> Pair.of((Object)debug1, debug1.empty()));
+                    return debug1.getNumberValue(debug2).flatMap(debug1l -> Optional.ofNullable(f.apply(debug1l.intValue())).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element id: " + debug1))).map(debug1l -> Pair.of(debug1l, debug1.empty())); // MagmaCube - decompile fix
                 }
-                return (DataResult<Pair<E, T>>)debug1.getStringValue((Object)debug2).flatMap(debug1 -> Optional.ofNullable(debug2.apply(debug1)).map((Function<? super Object, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unknown element name: " + debug1))).map(debug1 -> Pair.of((Object)debug1, debug1.empty()));
+                return debug1.getStringValue(debug2).flatMap(debug1l -> Optional.ofNullable(f2.apply(debug1l)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown element name: " + debug1))).map(debug1l -> Pair.of(debug1l, debug1.empty())); // MagmaCube - decompile fix
             }
             
             @Override
@@ -52,7 +52,7 @@ public interface StringRepresentable
                 if (debug1.compressMaps()) {
                     return IntStream.range(0, debug0.length).mapToObj((IntFunction<? extends T>)debug1::createInt);
                 }
-                return Arrays.stream(debug0).map((Function<? super StringRepresentable, ?>)StringRepresentable::getSerializedName).map((Function<? super Object, ? extends T>)debug1::createString);
+                return Arrays.stream(debug0).map(StringRepresentable::getSerializedName).map(debug1::createString); // MagmaCube - decompile fix
             }
         };
     }
diff --git a/src/main/java/net/minecraft/util/datafix/PackedBitStorage.java b/src/main/java/net/minecraft/util/datafix/PackedBitStorage.java
index a95fd31b2027c48c7fab0ca8c60cea09ea3fc8ee..5415357847400db23ffc872fb4170833a0c7fa93 100644
--- a/src/main/java/net/minecraft/util/datafix/PackedBitStorage.java
+++ b/src/main/java/net/minecraft/util/datafix/PackedBitStorage.java
@@ -33,7 +33,7 @@ public class PackedBitStorage
         final int debug4 = debug3 >> 6;
         final int debug5 = (debug1 + 1) * this.bits - 1 >> 6;
         final int debug6 = debug3 ^ debug4 << 6;
-        this.data[debug4] = ((this.data[debug4] & â¾(this.mask << debug6)) | (debug2 & this.mask) << debug6);
+        this.data[debug4] = ((this.data[debug4] & (this.mask << debug6)) | (debug2 & this.mask) << debug6); // MagmaCube - decompile fix
         if (debug4 != debug5) {
             final int debug7 = 64 - debug6;
             final int debug8 = this.bits - debug7;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntitySignTextStrictJsonFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntitySignTextStrictJsonFix.java
index 5cba73ef202f2b1238a9c886a1fa6cdd0fc1132e..738d007becccbfabe2f83aabbd96bc658a7d14d6 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntitySignTextStrictJsonFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntitySignTextStrictJsonFix.java
@@ -34,7 +34,7 @@ public class BlockEntitySignTextStrictJsonFix extends NamedEntityFix
             debug4 = TextComponent.EMPTY;
         }
         else {
-            if (debug3.charAt(0) != 'Â¥"' || debug3.charAt(debug3.length() - 1) != 'Â¥"') {
+            if (debug3.charAt(0) != '\"' || debug3.charAt(debug3.length() - 1) != '\"') { // MagmaCube - decompile fix
                 if (debug3.charAt(0) != '{' || debug3.charAt(debug3.length() - 1) != '}') {
                     debug4 = new TextComponent(debug3);
                     return (Dynamic<?>)debug1.set(debug2, debug1.createString(Component.Serializer.toJson(debug4)));
@@ -68,13 +68,15 @@ public class BlockEntitySignTextStrictJsonFix extends NamedEntityFix
     
     @Override
     protected Typed<?> fix(final Typed<?> debug1) {
-        return (Typed<?>)debug1.update(DSL.remainderFinder(), debug1 -> {
-            debug1 = this.updateLine(debug1, "Text1");
-            debug1 = this.updateLine(debug1, "Text2");
-            debug1 = this.updateLine(debug1, "Text3");
-            debug1 = this.updateLine(debug1, "Text4");
-            return debug1;
+        // MagmaCube start - decompile fix
+        return (Typed<?>)debug1.update(DSL.remainderFinder(), debug1l -> {
+            debug1l = this.updateLine(debug1l, "Text1");
+            debug1l = this.updateLine(debug1l, "Text2");
+            debug1l = this.updateLine(debug1l, "Text3");
+            debug1l = this.updateLine(debug1l, "Text4");
+            return debug1l;
         });
+        // MagmaCube end - decompile fix
     }
     
     static {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockStateData.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockStateData.java
index c46d332dc6173907edbf793a5a54e1dd9c801bf8..764cb7e0d2a0049cc5ce36a02cbe68eaffb12194 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockStateData.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockStateData.java
@@ -28,8 +28,8 @@ public class BlockStateData
         for (final String debug5 : debug2) {
             final Dynamic<?> debug6 = parse(debug5);
             final String debug7 = debug6.get("Name").asString("");
-            BlockStateData.ID_BY_OLD_NAME.putIfAbsent((Object)debug7, debug0);
-            BlockStateData.ID_BY_OLD.put((Object)debug6, debug0);
+            BlockStateData.ID_BY_OLD_NAME.putIfAbsent(debug7, debug0); // MagmaCube - decompile fix
+            BlockStateData.ID_BY_OLD.put(debug6, debug0); // MagmaCube - decompile fix
         }
     }
     
@@ -69,7 +69,7 @@ public class BlockStateData
     
     public static Dynamic<?> parse(final String debug0) {
         try {
-            return (Dynamic<?>)new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)TagParser.parseTag(debug0.replace('Â¥'', 'Â¥"')));
+            return (Dynamic<?>)new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)TagParser.parseTag(debug0.replace('\'', '\"'))); // MagmaCube - decompile fix
         }
         catch (Exception debug) {
             BlockStateData.LOGGER.error("Parsing {}", (Object)debug0, (Object)debug);
@@ -89,8 +89,8 @@ public class BlockStateData
         LOGGER = LogManager.getLogger();
         MAP = new Dynamic[4096];
         BLOCK_DEFAULTS = new Dynamic[256];
-        ID_BY_OLD = (Object2IntMap)DataFixUtils.make((Object)new Object2IntOpenHashMap(), debug0 -> debug0.defaultReturnValue(-1));
-        ID_BY_OLD_NAME = (Object2IntMap)DataFixUtils.make((Object)new Object2IntOpenHashMap(), debug0 -> debug0.defaultReturnValue(-1));
+        ID_BY_OLD = (Object2IntMap)DataFixUtils.make(new Object2IntOpenHashMap(), debug0 -> debug0.defaultReturnValue(-1)); // MagmaCube - decompile fix
+        ID_BY_OLD_NAME = (Object2IntMap)DataFixUtils.make(new Object2IntOpenHashMap(), debug0 -> debug0.defaultReturnValue(-1)); // MagmaCube - decompile fix
         BlockStateData.ID_BY_OLD.defaultReturnValue(-1);
         register(0, "{Name:'minecraft:air'}", "{Name:'minecraft:air'}");
         register(16, "{Name:'minecraft:stone'}", "{Name:'minecraft:stone',Properties:{variant:'stone'}}");
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
index c299f60530b1287efdc4ef1dc2ec3513acec9c27..20bf9d75eec06cb485bda711a249eda42e15de46 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
@@ -105,7 +105,7 @@ public class EntityBlockStateFix extends DataFix
     }
     
     static {
-        MAP = (Map)DataFixUtils.make((Object)Maps.newHashMap(), debug0 -> {
+        MAP = (Map)DataFixUtils.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
             debug0.put("minecraft:air", 0);
             debug0.put("minecraft:stone", 1);
             debug0.put("minecraft:grass", 2);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java
index d55ed6d7901f9ea5ff96c97a38b17bbeb9592713..7c3262588e1dd72ccfeea6bf52455e35e04759f8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java
@@ -40,7 +40,7 @@ import net.minecraft.util.datafix.schemas.NamespacedSchema;
 
 public class ItemStackTheFlatteningFix
 extends DataFix {
-    private static final Map<String, String> MAP = (Map)DataFixUtils.make((Object)Maps.newHashMap(), debug0 -> {
+    private static final Map<String, String> MAP = DataFixUtils.make(Maps.newHashMap(), debug0 -> { // MagmaCube - decompile fix
         debug0.put("minecraft:stone.0", "minecraft:stone");
         debug0.put("minecraft:stone.1", "minecraft:granite");
         debug0.put("minecraft:stone.2", "minecraft:polished_granite");
@@ -363,7 +363,7 @@ extends DataFix {
         debug0.put("minecraft:record_ward.0", "minecraft:music_disc_ward");
     });
     private static final Set<String> IDS = MAP.keySet().stream().map(debug0 -> debug0.substring(0, debug0.indexOf(46))).collect(Collectors.toSet());
-    private static final Set<String> DAMAGE_IDS = Sets.newHashSet((Object[])new String[]{"minecraft:bow", "minecraft:carrot_on_a_stick", "minecraft:chainmail_boots", "minecraft:chainmail_chestplate", "minecraft:chainmail_helmet", "minecraft:chainmail_leggings", "minecraft:diamond_axe", "minecraft:diamond_boots", "minecraft:diamond_chestplate", "minecraft:diamond_helmet", "minecraft:diamond_hoe", "minecraft:diamond_leggings", "minecraft:diamond_pickaxe", "minecraft:diamond_shovel", "minecraft:diamond_sword", "minecraft:elytra", "minecraft:fishing_rod", "minecraft:flint_and_steel", "minecraft:golden_axe", "minecraft:golden_boots", "minecraft:golden_chestplate", "minecraft:golden_helmet", "minecraft:golden_hoe", "minecraft:golden_leggings", "minecraft:golden_pickaxe", "minecraft:golden_shovel", "minecraft:golden_sword", "minecraft:iron_axe", "minecraft:iron_boots", "minecraft:iron_chestplate", "minecraft:iron_helmet", "minecraft:iron_hoe", "minecraft:iron_leggings", "minecraft:iron_pickaxe", "minecraft:iron_shovel", "minecraft:iron_sword", "minecraft:leather_boots", "minecraft:leather_chestplate", "minecraft:leather_helmet", "minecraft:leather_leggings", "minecraft:shears", "minecraft:shield", "minecraft:stone_axe", "minecraft:stone_hoe", "minecraft:stone_pickaxe", "minecraft:stone_shovel", "minecraft:stone_sword", "minecraft:wooden_axe", "minecraft:wooden_hoe", "minecraft:wooden_pickaxe", "minecraft:wooden_shovel", "minecraft:wooden_sword"});
+    private static final Set<String> DAMAGE_IDS = Sets.newHashSet(new String[]{"minecraft:bow", "minecraft:carrot_on_a_stick", "minecraft:chainmail_boots", "minecraft:chainmail_chestplate", "minecraft:chainmail_helmet", "minecraft:chainmail_leggings", "minecraft:diamond_axe", "minecraft:diamond_boots", "minecraft:diamond_chestplate", "minecraft:diamond_helmet", "minecraft:diamond_hoe", "minecraft:diamond_leggings", "minecraft:diamond_pickaxe", "minecraft:diamond_shovel", "minecraft:diamond_sword", "minecraft:elytra", "minecraft:fishing_rod", "minecraft:flint_and_steel", "minecraft:golden_axe", "minecraft:golden_boots", "minecraft:golden_chestplate", "minecraft:golden_helmet", "minecraft:golden_hoe", "minecraft:golden_leggings", "minecraft:golden_pickaxe", "minecraft:golden_shovel", "minecraft:golden_sword", "minecraft:iron_axe", "minecraft:iron_boots", "minecraft:iron_chestplate", "minecraft:iron_helmet", "minecraft:iron_hoe", "minecraft:iron_leggings", "minecraft:iron_pickaxe", "minecraft:iron_shovel", "minecraft:iron_sword", "minecraft:leather_boots", "minecraft:leather_chestplate", "minecraft:leather_helmet", "minecraft:leather_leggings", "minecraft:shears", "minecraft:shield", "minecraft:stone_axe", "minecraft:stone_hoe", "minecraft:stone_pickaxe", "minecraft:stone_shovel", "minecraft:stone_sword", "minecraft:wooden_axe", "minecraft:wooden_hoe", "minecraft:wooden_pickaxe", "minecraft:wooden_shovel", "minecraft:wooden_sword"}); // MagmaCube - decompile fix
 
     public ItemStackTheFlatteningFix(Schema debug1, boolean debug2) {
         super(debug1, debug2);
@@ -374,24 +374,24 @@ extends DataFix {
         OpticFinder debug22 = DSL.fieldFinder((String)"id", (Type)DSL.named((String)References.ITEM_NAME.typeName(), NamespacedSchema.namespacedString()));
         OpticFinder debug3 = debug1.findField("tag");
         return this.fixTypeEverywhereTyped("ItemInstanceTheFlatteningFix", debug1, debug2 -> {
-            Optional debug3 = debug2.getOptional(debug22);
-            if (!debug3.isPresent()) {
+            Optional<?> debug3l = debug2.getOptional(debug22); // MagmaCube - decompile fix
+            if (!debug3l.isPresent()) { // MagmaCube - decompile fix
                 return debug2;
             }
             Typed debug4 = debug2;
             Dynamic debug5 = (Dynamic)debug2.get(DSL.remainderFinder());
             int debug6 = debug5.get("Damage").asInt(0);
-            String debug7 = ItemStackTheFlatteningFix.updateItem((String)((Pair)debug3.get()).getSecond(), debug6);
+            String debug7 = ItemStackTheFlatteningFix.updateItem((String)((Pair)debug3l.get()).getSecond(), debug6); // MagmaCube - decompile fix
             if (debug7 != null) {
-                debug4 = debug4.set(debug22, (Object)Pair.of((Object)References.ITEM_NAME.typeName(), (Object)debug7));
+                debug4 = debug4.set(debug22, Pair.of(References.ITEM_NAME.typeName(), debug7)); // MagmaCube - decompile fix
             }
-            if (DAMAGE_IDS.contains(((Pair)debug3.get()).getSecond())) {
+            if (DAMAGE_IDS.contains(((Pair)debug3l.get()).getSecond())) { // MagmaCube - decompile fix
                 Typed debug8 = debug2.getOrCreateTyped(debug3);
                 Dynamic debug9 = (Dynamic)debug8.get(DSL.remainderFinder());
                 debug9 = debug9.set("Damage", debug9.createInt(debug6));
-                debug4 = debug4.set(debug3, debug8.set(DSL.remainderFinder(), (Object)debug9));
+                debug4 = debug4.set(debug3, debug8.set(DSL.remainderFinder(), debug9)); // MagmaCube - decompile fix
             }
-            debug4 = debug4.set(DSL.remainderFinder(), (Object)debug5.remove("Damage"));
+            debug4 = debug4.set(DSL.remainderFinder(), debug5.remove("Damage")); // MagmaCube - decompile fix
             return debug4;
         });
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
index f60668e44d38227b9a6cad2cdd196e1c7701e1d3..099228cf0ec22e22f21b9c80107e69465d81f1a7 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
@@ -54,7 +54,6 @@ import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
@@ -66,90 +65,92 @@ import net.minecraft.util.datafix.fixes.References;
 public class LeavesFix
 extends DataFix {
     private static final int[][] DIRECTIONS = new int[][]{{-1, 0, 0}, {1, 0, 0}, {0, -1, 0}, {0, 1, 0}, {0, 0, -1}, {0, 0, 1}};
-    private static final Object2IntMap<String> LEAVES = (Object2IntMap)DataFixUtils.make((Object)new Object2IntOpenHashMap(), debug0 -> {
-        debug0.put((Object)"minecraft:acacia_leaves", 0);
-        debug0.put((Object)"minecraft:birch_leaves", 1);
-        debug0.put((Object)"minecraft:dark_oak_leaves", 2);
-        debug0.put((Object)"minecraft:jungle_leaves", 3);
-        debug0.put((Object)"minecraft:oak_leaves", 4);
-        debug0.put((Object)"minecraft:spruce_leaves", 5);
+    // MagmaCube start - decompile fix
+    private static final Object2IntMap<String> LEAVES = DataFixUtils.make(new Object2IntOpenHashMap<>(), debug0 -> {
+        debug0.put("minecraft:acacia_leaves", 0);
+        debug0.put("minecraft:birch_leaves", 1);
+        debug0.put("minecraft:dark_oak_leaves", 2);
+        debug0.put("minecraft:jungle_leaves", 3);
+        debug0.put("minecraft:oak_leaves", 4);
+        debug0.put("minecraft:spruce_leaves", 5);
     });
-    private static final Set<String> LOGS = ImmutableSet.of((Object)"minecraft:acacia_bark", (Object)"minecraft:birch_bark", (Object)"minecraft:dark_oak_bark", (Object)"minecraft:jungle_bark", (Object)"minecraft:oak_bark", (Object)"minecraft:spruce_bark", (Object[])new String[]{"minecraft:acacia_log", "minecraft:birch_log", "minecraft:dark_oak_log", "minecraft:jungle_log", "minecraft:oak_log", "minecraft:spruce_log", "minecraft:stripped_acacia_log", "minecraft:stripped_birch_log", "minecraft:stripped_dark_oak_log", "minecraft:stripped_jungle_log", "minecraft:stripped_oak_log", "minecraft:stripped_spruce_log"});
+    // MagmaCube end - decompile fix
+    private static final Set<String> LOGS = ImmutableSet.of("minecraft:acacia_bark", "minecraft:birch_bark", "minecraft:dark_oak_bark", "minecraft:jungle_bark", "minecraft:oak_bark", "minecraft:spruce_bark", new String[]{"minecraft:acacia_log", "minecraft:birch_log", "minecraft:dark_oak_log", "minecraft:jungle_log", "minecraft:oak_log", "minecraft:spruce_log", "minecraft:stripped_acacia_log", "minecraft:stripped_birch_log", "minecraft:stripped_dark_oak_log", "minecraft:stripped_jungle_log", "minecraft:stripped_oak_log", "minecraft:stripped_spruce_log"}); // MagmaCube - decompile fix
 
     public LeavesFix(Schema debug1, boolean debug2) {
         super(debug1, debug2);
     }
 
     protected TypeRewriteRule makeRule() {
-        Type debug1 = this.getInputSchema().getType(References.CHUNK);
-        OpticFinder debug2 = debug1.findField("Level");
-        OpticFinder debug3 = debug2.type().findField("Sections");
-        Type debug42 = debug3.type();
-        if (!(debug42 instanceof List.ListType)) {
+        // MagmaCube start - decompile fix
+        Type<?> debug1 = getInputSchema().getType(References.CHUNK);
+        OpticFinder<?> debug2 = debug1.findField("Level");
+        OpticFinder<?> debug3 = debug2.type().findField("Sections");
+        Type<?> debug4 = debug3.type();
+        if (!(debug4 instanceof List.ListType))
             throw new IllegalStateException("Expecting sections to be a list.");
-        }
-        Type debug5 = ((List.ListType)debug42).getElement();
-        OpticFinder debug6 = DSL.typeFinder((Type)debug5);
-        return this.fixTypeEverywhereTyped("Leaves fix", debug1, debug4 -> debug4.updateTyped(debug2, debug32 -> {
-            Object debug4 = new int[]{0};
-            Typed debug5 = debug32.updateTyped(debug3, debug3 -> {
-                int debug11;
-                int debug10;
-                Object debug4 = new Int2ObjectOpenHashMap(debug3.getAllTyped(debug6).stream().map(debug1 -> new LeavesSection((Typed<?>)debug1, this.getInputSchema())).collect(Collectors.toMap(Section::getIndex, debug0 -> debug0)));
-                if (debug4.values().stream().allMatch(Section::isSkippable)) {
-                    return debug3;
+        Type<?> debug5 = ((List.ListType)debug4).getElement();
+        OpticFinder<?> debug6 = DSL.typeFinder(debug5);
+        return this.fixTypeEverywhereTyped("Leaves fix", debug1, debug4l -> debug4l.updateTyped(debug2, debug32 -> {
+            int[] a = new int[]{0};
+            Typed<?> debug5l = debug32.updateTyped(debug3, debug3l -> {
+                int z;
+                int x;
+                Int2ObjectOpenHashMap<LeavesSection> debug4ll = new Int2ObjectOpenHashMap(debug3l.getAllTyped(debug6).stream().map(debug1l -> new LeavesSection((Typed<?>)debug1l, this.getInputSchema())).collect(Collectors.toMap(Section::getIndex, debug0 -> debug0)));
+                if (debug4ll.values().stream().allMatch(Section::isSkippable)) {
+                    return debug3l;
                 }
-                ArrayList debug5 = Lists.newArrayList();
-                for (int debug6 = 0; debug6 < 7; ++debug6) {
-                    debug5.add(new IntOpenHashSet());
+                ArrayList<IntOpenHashSet> debug5ll = Lists.newArrayList();
+                for (int debug6ll = 0; debug6ll < 7; ++debug6ll) {
+                    debug5ll.add(new IntOpenHashSet());
                 }
-                for (LeavesSection debug7 : debug4.values()) {
+                for (LeavesSection debug7 : debug4ll.values()) {
                     if (debug7.isSkippable()) continue;
                     for (int debug8 = 0; debug8 < 4096; ++debug8) {
                         int debug9 = debug7.getBlock(debug8);
                         if (debug7.isLog(debug9)) {
-                            ((IntSet)debug5.get(0)).add(debug7.getIndex() << 12 | debug8);
+                            ((IntSet)debug5ll.get(0)).add(debug7.getIndex() << 12 | debug8);
                             continue;
                         }
                         if (!debug7.isLeaf(debug9)) continue;
-                        debug10 = this.getX(debug8);
-                        debug11 = this.getZ(debug8);
-                        debug2[0] = debug4[0] | LeavesFix.getSideMask(debug10 == 0, debug10 == 15, debug11 == 0, debug11 == 15);
+                        x = this.getX(debug8);
+                        z = this.getZ(debug8);
+                        a[0] = a[0] | LeavesFix.getSideMask(x == 0, x == 15, z == 0, z == 15);
                     }
                 }
-                for (int debug6 = 1; debug6 < 7; ++debug6) {
-                    LeavesSection debug7;
-                    debug7 = (IntSet)debug5.get(debug6 - 1);
-                    IntSet debug8 = (IntSet)debug5.get(debug6);
+                for (int debug6l = 1; debug6l < 7; ++debug6l) {
+                    IntSet debug7 = (IntSet)debug5ll.get(debug6l - 1);
+                    IntSet debug8 = (IntSet)debug5ll.get(debug6l);
                     IntIterator debug9 = debug7.iterator();
                     while (debug9.hasNext()) {
-                        debug10 = debug9.nextInt();
-                        debug11 = this.getX(debug10);
-                        int debug122 = this.getY(debug10);
-                        int debug13 = this.getZ(debug10);
+                        x = debug9.nextInt();
+                        z = this.getX(x);
+                        int debug122 = this.getY(x);
+                        int debug13 = this.getZ(x);
                         for (int[] debug17 : DIRECTIONS) {
                             int debug24;
                             int debug22;
                             int debug23;
                             LeavesSection debug21;
-                            int debug18 = debug11 + debug17[0];
+                            int debug18 = z + debug17[0];
                             int debug19 = debug122 + debug17[1];
                             int debug20 = debug13 + debug17[2];
-                            if (debug18 < 0 || debug18 > 15 || debug20 < 0 || debug20 > 15 || debug19 < 0 || debug19 > 255 || (debug21 = (LeavesSection)debug4.get(debug19 >> 4)) == null || debug21.isSkippable() || !debug21.isLeaf(debug23 = debug21.getBlock(debug22 = LeavesFix.getIndex(debug18, debug19 & 0xF, debug20))) || (debug24 = debug21.getDistance(debug23)) <= debug6) continue;
-                            debug21.setDistance(debug22, debug23, debug6);
+                            if (debug18 < 0 || debug18 > 15 || debug20 < 0 || debug20 > 15 || debug19 < 0 || debug19 > 255 || (debug21 = (LeavesSection)debug4ll.get(debug19 >> 4)) == null || debug21.isSkippable() || !debug21.isLeaf(debug23 = debug21.getBlock(debug22 = LeavesFix.getIndex(debug18, debug19 & 0xF, debug20))) || (debug24 = debug21.getDistance(debug23)) <= a[0]) continue;
+                            debug21.setDistance(debug22, debug23, debug6l);
                             debug8.add(LeavesFix.getIndex(debug18, debug19, debug20));
                         }
                     }
                 }
-                return debug3.updateTyped(debug6, arg_0 -> LeavesFix.lambda$null$3((Int2ObjectMap)debug4, arg_0));
+                return debug3l.updateTyped(debug6, arg_0 -> LeavesFix.lambda$null$3((Int2ObjectMap)debug4, arg_0));
             });
-            if (debug4[0] != 0) {
-                debug5 = debug5.update(DSL.remainderFinder(), debug1 -> {
-                    OpticFinder debug6 = (Dynamic)DataFixUtils.orElse((Optional)debug1.get("UpgradeData").result(), (Object)debug1.emptyMap());
-                    return debug1.set("UpgradeData", debug6.set("Sides", debug1.createByte((byte)(debug6.get("Sides").asByte((byte)0) | debug4[0]))));
+            if (a[0] != 0) {
+                debug5l = debug5l.update(DSL.remainderFinder(), debug1l -> {
+                    Dynamic debug6ll = (Dynamic)DataFixUtils.orElse((Optional)debug1l.get("UpgradeData").result(), (Object)debug1l.emptyMap());
+                    return debug1l.set("UpgradeData", debug6ll.set("Sides", debug1l.createByte((byte)(debug6ll.get("Sides").asByte((byte)0) | a[0]))));
                 });
             }
-            return debug5;
+            return debug5l;
+            // MagmaCube end - decompile fix
         }));
     }
 
@@ -270,9 +271,9 @@ extends DataFix {
     }
 
     public static abstract class Section {
-        private final Type<Pair<String, Dynamic<?>>> blockStateType = DSL.named((String)References.BLOCK_STATE.typeName(), (Type)DSL.remainderType());
-        protected final OpticFinder<List<Pair<String, Dynamic<?>>>> paletteFinder = DSL.fieldFinder((String)"Palette", (Type)DSL.list(this.blockStateType));
-        protected final List<Dynamic<?>> palette;
+        private final Type<Pair<String, Dynamic<?>>> blockStateType = DSL.named((String)References.BLOCK_STATE.typeName(), DSL.remainderType()); // MagmaCube - decompile fix
+        protected final OpticFinder<java.util.List<Pair<String, Dynamic<?>>>> paletteFinder = DSL.fieldFinder((String)"Palette", DSL.list(this.blockStateType)); // MagmaCube - decompile fix
+        protected final java.util.List<Dynamic<?>> palette; // MagmaCube - decompile fix
         protected final int index;
         @Nullable
         protected PackedBitStorage storage;
@@ -281,8 +282,8 @@ extends DataFix {
             if (!Objects.equals((Object)debug2.getType(References.BLOCK_STATE), this.blockStateType)) {
                 throw new IllegalStateException("Block state type is not what was expected.");
             }
-            Optional debug3 = debug1.getOptional(this.paletteFinder);
-            this.palette = debug3.map(debug0 -> debug0.stream().map(Pair::getSecond).collect(Collectors.toList())).orElse((List)ImmutableList.of());
+            Optional<java.util.List<Pair<String, Dynamic<?>>>> debug3 = debug1.getOptional(this.paletteFinder); // MagmaCube - decompile fix
+            this.palette = (java.util.List<Dynamic<?>>) debug3.map(debug0 -> (java.util.List)debug0.stream().map(Pair::getSecond).collect(Collectors.toList())).orElse(ImmutableList.of()); // MagmaCube - decompile fix
             Dynamic debug4 = (Dynamic)debug1.get(DSL.remainderFinder());
             this.index = debug4.get("Y").asInt(0);
             this.readStorage(debug4);
@@ -302,7 +303,7 @@ extends DataFix {
             if (this.isSkippable()) {
                 return debug12;
             }
-            return debug12.update(DSL.remainderFinder(), debug1 -> debug1.set("BlockStates", debug1.createLongList(Arrays.stream(this.storage.getRaw())))).set(this.paletteFinder, this.palette.stream().map(debug0 -> Pair.of((Object)References.BLOCK_STATE.typeName(), (Object)debug0)).collect(Collectors.toList()));
+            return debug12.update(DSL.remainderFinder(), debug1l -> debug1l.set("BlockStates", debug1l.createLongList(Arrays.stream(this.storage.getRaw())))).set(this.paletteFinder, (java.util.List<Pair<String, Dynamic<?>>>) (Object) this.palette.stream().map(debug0 -> Pair.of(References.BLOCK_STATE.typeName(), debug0)).collect(Collectors.toList())); // MagmaCube - decompile fix
         }
 
         public boolean isSkippable() {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ObjectiveDisplayNameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ObjectiveDisplayNameFix.java
index 1bd46769e12894999396c748ae4a4678e819f910..45c72678cc99c2f94b016ba1b82220ff365f71a4 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ObjectiveDisplayNameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ObjectiveDisplayNameFix.java
@@ -4,6 +4,8 @@ import com.mojang.serialization.DynamicOps;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.DataFixUtils;
+
+import java.util.Optional;
 import java.util.function.Function;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TextComponent;
@@ -25,6 +27,6 @@ public class ObjectiveDisplayNameFix extends DataFix
         if (!Objects.equals(debug2, this.getInputSchema().getType(References.OBJECTIVE))) {
             throw new IllegalStateException("Objective type is not what was expected.");
         }
-        return this.fixTypeEverywhere("ObjectiveDisplayNameFix", (Type)debug2, debug0 -> debug0 -> debug0.mapSecond(debug0 -> ((Dynamic)debug0).update("DisplayName", debug1 -> (Dynamic)DataFixUtils.orElse(debug1.asString().map(debug0 -> Component.Serializer.toJson(new TextComponent(debug0))).map((Function)debug0::createString).result(), (Object)debug1))));
+        return this.fixTypeEverywhere("ObjectiveDisplayNameFix", debug2, debug0 -> debug0l -> debug0l.mapSecond(debug0ll -> debug0ll.update("DisplayName", debug1 -> (Optional<?>) (Object) DataFixUtils.orElse(debug1.asString().map(debug0lll -> Component.Serializer.toJson(new TextComponent(debug0lll))).map(debug0::createString).result(), (Dynamic<?>) (Object) debug1))));
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerBlockEntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerBlockEntityRenameFix.java
index 45d0877899c8618aeaa577d80f2affe5c0929a3e..c357635e19fd148cb13ffad5c0d1521caeeffeb4 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerBlockEntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerBlockEntityRenameFix.java
@@ -15,14 +15,14 @@ public class OminousBannerBlockEntityRenameFix extends NamedEntityFix
     
     @Override
     protected Typed<?> fix(final Typed<?> debug1) {
-        return (Typed<?>)debug1.update(DSL.remainderFinder(), (Function)this::fixTag);
+        return (Typed<?>)debug1.update(DSL.remainderFinder(), this::fixTag); // MagmaCube - decompile fix
     }
     
     private Dynamic<?> fixTag(final Dynamic<?> debug1) {
         final Optional<String> debug2 = (Optional<String>)debug1.get("CustomName").asString().result();
         if (debug2.isPresent()) {
             String debug3 = debug2.get();
-            debug3 = debug3.replace("Â¥"translateÂ¥":Â¥"block.minecraft.illager_bannerÂ¥"", "Â¥"translateÂ¥":Â¥"block.minecraft.ominous_bannerÂ¥"");
+            debug3 = debug3.replace("\"translate\":\"block.minecraft.illager_banner\"", "\"translate\":\"block.minecraft.ominous_banner\""); // MagmaCube - decompile fix
             return (Dynamic<?>)debug1.set("CustomName", debug1.createString(debug3));
         }
         return debug1;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerRenameFix.java
index 0ea17c754909ceb49847fcb967105ab8ce3d94ab..815a68450924debe7e0ab23dd8edb5ba6d526578 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OminousBannerRenameFix.java
@@ -26,7 +26,7 @@ public class OminousBannerRenameFix extends DataFix
             final Optional<String> debug4 = (Optional<String>)debug3.get("Name").asString().result();
             if (debug4.isPresent()) {
                 String debug5 = debug4.get();
-                debug5 = debug5.replace("Â¥"translateÂ¥":Â¥"block.minecraft.illager_bannerÂ¥"", "Â¥"translateÂ¥":Â¥"block.minecraft.ominous_bannerÂ¥"");
+                debug5 = debug5.replace("\"translate\":\"block.minecraft.illager_banner\"", "\"translate\":\"block.minecraft.ominous_banner\""); // MagmaCube - decompile fix
                 debug3 = (Dynamic<?>)debug3.set("Name", debug3.createString(debug5));
             }
             return (Dynamic<?>)debug1.set("display", (Dynamic)debug3);
@@ -38,20 +38,16 @@ public class OminousBannerRenameFix extends DataFix
         final Type<?> debug4 = (Type<?>)this.getInputSchema().getType(References.ITEM_STACK);
         final OpticFinder<Pair<String, String>> debug5 = (OpticFinder<Pair<String, String>>)DSL.fieldFinder("id", DSL.named(References.ITEM_NAME.typeName(), (Type)NamespacedSchema.namespacedString()));
         final OpticFinder<?> debug6 = (OpticFinder<?>)debug4.findField("tag");
-        final OpticFinder opticFinder;
-        final Optional<Pair<String, String>> debug7;
-        final OpticFinder opticFinder2;
-        final Optional<? extends Typed<?>> debug8;
-        final Typed<?> debug9;
-        final Dynamic<?> debug10;
+        // MagmaCube start - decompile fix
         return this.fixTypeEverywhereTyped("OminousBannerRenameFix", (Type)debug4, debug3 -> {
-            debug7 = (Optional<Pair<String, String>>)debug3.getOptional(opticFinder);
+            Optional<Pair<String, String>> debug7 = (Optional<Pair<String, String>>)debug3.getOptional(debug5);
             if (debug7.isPresent() && Objects.equals(debug7.get().getSecond(), "minecraft:white_banner")) {
-                debug8 = (Optional<? extends Typed<?>>)debug3.getOptionalTyped(opticFinder2);
+                Optional<? extends Typed<?>> debug8 = (Optional<? extends Typed<?>>)debug3.getOptionalTyped(debug6);
                 if (debug8.isPresent()) {
-                    debug9 = (Typed<?>)debug8.get();
-                    debug10 = (Dynamic<?>)debug9.get(DSL.remainderFinder());
-                    return debug3.set(opticFinder2, debug9.set(DSL.remainderFinder(), (Object)this.fixTag(debug10)));
+                    Typed<?> debug9 = (Typed<?>)debug8.get();
+                    Dynamic<?> debug10 = (Dynamic<?>)debug9.get(DSL.remainderFinder());
+                    return debug3.set(debug6, debug9.set(DSL.remainderFinder(), this.fixTag(debug10)));
+                    // MagmaCube end - decompile fix
                 }
             }
             return debug3;
diff --git a/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java b/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java
index a36ed4a75320ff737d66a77b0fbc6c490d1055b9..c8853f94dba71e6fdd54b32733e6224c362b55cc 100644
--- a/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java
+++ b/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java
@@ -36,9 +36,9 @@ public class ActiveProfiler implements ProfileCollector
     private final boolean warn;
     
     public ActiveProfiler(final LongSupplier debug1, final IntSupplier debug2, final boolean debug3) {
-        this.paths = (List<String>)Lists.newArrayList();
+        this.paths = Lists.newArrayList(); // MagmaCube - decompile fix
         this.startTimes = (LongList)new LongArrayList();
-        this.entries = (Map<String, PathEntry>)Maps.newHashMap();
+        this.entries = Maps.newHashMap(); // MagmaCube - decompile fix
         this.path = "";
         this.startTimeNano = debug1.getAsLong();
         this.getRealTime = debug1;
@@ -79,7 +79,7 @@ public class ActiveProfiler implements ProfileCollector
             return;
         }
         if (!this.path.isEmpty()) {
-            this.path += 'Â¥u001e';
+            this.path += '\u001e'; // MagmaCube - decompile fix
         }
         this.path += debug1;
         this.paths.add(this.path);
@@ -137,12 +137,12 @@ public class ActiveProfiler implements ProfileCollector
     
     @Override
     public void incrementCounter(final String debug1) {
-        this.getCurrentEntry().counters.addTo((Object)debug1, 1L);
+        this.getCurrentEntry().counters.addTo(debug1, 1L); // MagmaCube - decompile fix
     }
     
     @Override
     public void incrementCounter(final java.util.function.Supplier<String> debug1) {
-        this.getCurrentEntry().counters.addTo((Object)debug1.get(), 1L);
+        this.getCurrentEntry().counters.addTo(debug1.get(), 1L); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
index 6dc1f779a9c88c4a1600e5f0a3d30a7ead12f123..a46fa5120ba77f610c6b648acc0ecb41e99f62ad 100644
--- a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
+++ b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
@@ -59,9 +59,9 @@ public class FilledProfileResults implements ProfileResults
         final ProfilerPathEntry debug5 = this.getEntry(debug1);
         final long debug6 = debug5.getDuration();
         final long debug7 = debug5.getCount();
-        final List<ResultField> debug8 = (List<ResultField>)Lists.newArrayList();
+        final List<ResultField> debug8 = Lists.newArrayList(); // MagmaCube - decompile fix
         if (!debug1.isEmpty()) {
-            debug1 += 'Â¥u001e';
+            debug1 += '\u001e'; // MagmaCube - decompile fix
         }
         long debug9 = 0L;
         for (final String debug10 : this.entries.keySet()) {
@@ -99,19 +99,16 @@ public class FilledProfileResults implements ProfileResults
     }
     
     private Map<String, CounterCollector> getCounterValues() {
-        final Map<String, CounterCollector> debug4 = (Map<String, CounterCollector>)Maps.newTreeMap();
-        final Object2LongMap<String> debug5;
-        final List<String> debug6;
-        final Map<String, CounterCollector> map;
+        final Map<String, CounterCollector> map = Maps.newTreeMap(); // MagmaCube - decompile fix
         this.entries.forEach((debug1, debug2) -> {
-            debug5 = debug2.getCounters();
+            Object2LongMap<String> debug5 = debug2.getCounters(); // MagmaCube - decompile fix
             if (!debug5.isEmpty()) {
-                debug6 = (List<String>)FilledProfileResults.SPLITTER.splitToList((CharSequence)debug1);
-                debug5.forEach((debug2, debug3) -> map.computeIfAbsent(debug2, debug0 -> new CounterCollector()).addValue(debug6.iterator(), debug3));
+                List<String> debug6 = (List<String>)FilledProfileResults.SPLITTER.splitToList((CharSequence)debug1); // MagmaCube - decompile fix
+                debug5.forEach((debug22, debug3) -> map.computeIfAbsent(debug22, debug0 -> new CounterCollector()).addValue(debug6.iterator(), debug3)); // MagmaCube - decompile fix
             }
             return;
         });
-        return debug4;
+        return map; // MagmaCube - decompile fix
     }
     
     @Override
@@ -154,22 +151,24 @@ public class FilledProfileResults implements ProfileResults
     
     protected String getProfilerResults(final long debug1, final int debug3) {
         final StringBuilder debug4 = new StringBuilder();
-        debug4.append("---- Minecraft Profiler Results ----Â¥n");
+        // MagmaCube start - decompile fix
+        debug4.append("---- Minecraft Profiler Results ----\n");
         debug4.append("// ");
         debug4.append(getComment());
-        debug4.append("Â¥nÂ¥n");
-        debug4.append("Version: ").append(SharedConstants.getCurrentVersion().getId()).append('Â¥n');
-        debug4.append("Time span: ").append(debug1 / 1000000L).append(" msÂ¥n");
-        debug4.append("Tick span: ").append(debug3).append(" ticksÂ¥n");
-        debug4.append("// This is approximately ").append(String.format(Locale.ROOT, "%.2f", debug3 / (debug1 / 1.0E9f))).append(" ticks per second. It should be ").append(20).append(" ticks per secondÂ¥nÂ¥n");
-        debug4.append("--- BEGIN PROFILE DUMP ---Â¥nÂ¥n");
+        debug4.append("\n\n");
+        debug4.append("Version: ").append(SharedConstants.getCurrentVersion().getId()).append('\n');
+        debug4.append("Time span: ").append(debug1 / 1000000L).append(" ms\n");
+        debug4.append("Tick span: ").append(debug3).append(" ticks\n");
+        debug4.append("// This is approximately ").append(String.format(Locale.ROOT, "%.2f", debug3 / (debug1 / 1.0E9f))).append(" ticks per second. It should be ").append(20).append(" ticks per second\n\n");
+        debug4.append("--- BEGIN PROFILE DUMP ---\n\n");
         this.appendProfilerResults(0, "root", debug4);
-        debug4.append("--- END PROFILE DUMP ---Â¥nÂ¥n");
+        debug4.append("--- END PROFILE DUMP ---\n\n");
         final Map<String, CounterCollector> debug5 = this.getCounterValues();
         if (!debug5.isEmpty()) {
-            debug4.append("--- BEGIN COUNTER DUMP ---Â¥nÂ¥n");
+            debug4.append("--- BEGIN COUNTER DUMP ---\n\n");
             this.appendCounters(debug5, debug4, debug3);
-            debug4.append("--- END COUNTER DUMP ---Â¥nÂ¥n");
+            debug4.append("--- END COUNTER DUMP ---\n\n");
+            // MagmaCube end - decompile fix
         }
         return debug4.toString();
     }
@@ -185,16 +184,16 @@ public class FilledProfileResults implements ProfileResults
     private void appendProfilerResults(final int debug1, final String debug2, final StringBuilder debug3) {
         final List<ResultField> debug5 = this.getTimes(debug2);
         final Object2LongMap<String> debug6 = ((ProfilerPathEntry)ObjectUtils.firstNonNull((Object[])new ProfilerPathEntry[] { (ProfilerPathEntry)this.entries.get(debug2), FilledProfileResults.EMPTY })).getCounters();
-        debug6.forEach((debug3, debug4) -> indentLine(debug3, debug1).append('#').append(debug3).append(' ').append(debug4).append('/').append(debug4 / this.tickDuration).append('Â¥n'));
+        debug6.forEach((debug32, debug4) -> indentLine(debug3, debug1).append('#').append(debug32).append(' ').append(debug4).append('/').append(debug4 / this.tickDuration).append('\n')); // MagmaCube - decompile fix
         if (debug5.size() < 3) {
             return;
         }
         for (int debug7 = 1; debug7 < debug5.size(); ++debug7) {
             final ResultField debug8 = debug5.get(debug7);
-            indentLine(debug3, debug1).append(debug8.name).append('(').append(debug8.count).append('/').append(String.format(Locale.ROOT, "%.0f", debug8.count / this.tickDuration)).append(')').append(" - ").append(String.format(Locale.ROOT, "%.2f", debug8.percentage)).append("%/").append(String.format(Locale.ROOT, "%.2f", debug8.globalPercentage)).append("%Â¥n");
+            indentLine(debug3, debug1).append(debug8.name).append('(').append(debug8.count).append('/').append(String.format(Locale.ROOT, "%.0f", debug8.count / this.tickDuration)).append(')').append(" - ").append(String.format(Locale.ROOT, "%.2f", debug8.percentage)).append("%/").append(String.format(Locale.ROOT, "%.2f", debug8.globalPercentage)).append("%\n");
             if (!"unspecified".equals(debug8.name)) {
                 try {
-                    this.appendProfilerResults(debug1 + 1, debug2 + 'Â¥u001e' + debug8.name, debug3);
+                    this.appendProfilerResults(debug1 + 1, debug2 + '\u001e' + debug8.name, debug3);
                 }
                 catch (Exception debug9) {
                     debug3.append("[[ EXCEPTION ").append(debug9).append(" ]]");
@@ -204,15 +203,15 @@ public class FilledProfileResults implements ProfileResults
     }
     
     private void appendCounterResults(final int debug1, final String debug2, final CounterCollector debug3, final int debug4, final StringBuilder debug5) {
-        indentLine(debug5, debug1).append(debug2).append(" total:").append(debug3.selfValue).append('/').append(debug3.totalValue).append(" average: ").append(debug3.selfValue / debug4).append('/').append(debug3.totalValue / debug4).append('Â¥n');
-        debug3.children.entrySet().stream().sorted(FilledProfileResults.COUNTER_ENTRY_COMPARATOR).forEach(debug4 -> this.appendCounterResults(debug1 + 1, debug4.getKey(), (CounterCollector)debug4.getValue(), debug4, debug5));
+        indentLine(debug5, debug1).append(debug2).append(" total:").append(debug3.selfValue).append('/').append(debug3.totalValue).append(" average: ").append(debug3.selfValue / debug4).append('/').append(debug3.totalValue / debug4).append('\n'); // MagmaCube - decompile fix
+        debug3.children.entrySet().stream().sorted(FilledProfileResults.COUNTER_ENTRY_COMPARATOR).forEach(debug42 -> this.appendCounterResults(debug1 + 1, debug42.getKey(), (CounterCollector)debug42.getValue(), debug4, debug5)); // MagmaCube - decompile fix
     }
     
     private void appendCounters(final Map<String, CounterCollector> debug1, final StringBuilder debug2, final int debug3) {
-        debug1.forEach((debug3, debug4) -> {
-            debug2.append("-- Counter: ").append(debug3).append(" --Â¥n");
-            this.appendCounterResults(0, "root", (CounterCollector)debug4.children.get("root"), debug3, debug2);
-            debug2.append("Â¥nÂ¥n");
+        debug1.forEach((debug32, debug4) -> { // MagmaCube - decompile fix
+            debug2.append("-- Counter: ").append(debug32).append(" --\n"); // MagmaCube - decompile fix
+            this.appendCounterResults(0, "root", (CounterCollector)debug4.children.get("root"), debug3, debug2); // MagmaCube - decompile fix
+            debug2.append("\n\n"); // MagmaCube - decompile fix
         });
     }
     
@@ -246,11 +245,11 @@ public class FilledProfileResults implements ProfileResults
             
             @Override
             public Object2LongMap<String> getCounters() {
-                return (Object2LongMap<String>)Object2LongMaps.emptyMap();
+                return Object2LongMaps.emptyMap(); // MagmaCube - decompile fix
             }
         };
-        SPLITTER = Splitter.on('Â¥u001e');
-        COUNTER_ENTRY_COMPARATOR = Map.Entry.comparingByValue(Comparator.comparingLong(debug0 -> debug0.totalValue)).reversed();
+        SPLITTER = Splitter.on('\u001e'); // MagmaCube - decompile fix
+        COUNTER_ENTRY_COMPARATOR = Map.Entry.<String, CounterCollector>comparingByValue(Comparator.comparingLong(debug0 -> debug0.totalValue)).reversed(); // MagmaCube - decompile fix
     }
     
     static class CounterCollector
@@ -260,7 +259,7 @@ public class FilledProfileResults implements ProfileResults
         private final Map<String, CounterCollector> children;
         
         private CounterCollector() {
-            this.children = (Map<String, CounterCollector>)Maps.newHashMap();
+            this.children = Maps.newHashMap(); // MagmaCube - decompile fix
         }
         
         public void addValue(final Iterator<String> debug1, final long debug2) {
diff --git a/src/main/java/net/minecraft/util/profiling/ProfileResults.java b/src/main/java/net/minecraft/util/profiling/ProfileResults.java
index 63322575b4be362b6494296b61776af8b5327d96..7d10df596729567dafe3dd657142398bb1e54d0f 100644
--- a/src/main/java/net/minecraft/util/profiling/ProfileResults.java
+++ b/src/main/java/net/minecraft/util/profiling/ProfileResults.java
@@ -25,7 +25,7 @@ public interface ProfileResults
         return this.getEndTimeTicks() - this.getStartTimeTicks();
     }
     
-    default String demanglePath(final String debug0) {
-        return debug0.replace('Â¥u001e', '.');
+    static String demanglePath(final String debug0) { // MagmaCube - decompile fix
+        return debug0.replace('\u001e', '.'); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java b/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java
index ca06b13f5e76868464a2c605d98eea02fbeade87..5728d9b0e1251e6fd08e9c71aa643b3c8e09812a 100644
--- a/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java
+++ b/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java
@@ -22,7 +22,7 @@ public interface ProfilerFiller
     
     void incrementCounter(final Supplier<String> p0);
     
-    default ProfilerFiller tee(final ProfilerFiller debug0, final ProfilerFiller debug1) {
+    static ProfilerFiller tee(final ProfilerFiller debug0, final ProfilerFiller debug1) { // MagmaCube - decompile fix
         if (debug0 == InactiveProfiler.INSTANCE) {
             return debug1;
         }
@@ -43,15 +43,15 @@ public interface ProfilerFiller
             }
             
             @Override
-            public void push(final String debug1) {
-                debug0.push(debug1);
-                debug1.push(debug1);
+            public void push(final String s) { // MagmaCube - decompile fix
+                debug0.push(s); // MagmaCube - decompile fix
+                debug1.push(s); // MagmaCube - decompile fix
             }
             
             @Override
-            public void push(final Supplier<String> debug1) {
-                debug0.push(debug1);
-                debug1.push(debug1);
+            public void push(final Supplier<String> s) { // MagmaCube - decompile fix
+                debug0.push(s); // MagmaCube - decompile fix
+                debug1.push(s); // MagmaCube - decompile fix
             }
             
             @Override
@@ -61,27 +61,27 @@ public interface ProfilerFiller
             }
             
             @Override
-            public void popPush(final String debug1) {
-                debug0.popPush(debug1);
-                debug1.popPush(debug1);
+            public void popPush(final String s) { // MagmaCube - decompile fix
+                debug0.popPush(s); // MagmaCube - decompile fix
+                debug1.popPush(s); // MagmaCube - decompile fix
             }
             
             @Override
-            public void popPush(final Supplier<String> debug1) {
-                debug0.popPush(debug1);
-                debug1.popPush(debug1);
+            public void popPush(final Supplier<String> s) { // MagmaCube - decompile fix
+                debug0.popPush(s); // MagmaCube - decompile fix
+                debug1.popPush(s); // MagmaCube - decompile fix
             }
             
             @Override
-            public void incrementCounter(final String debug1) {
-                debug0.incrementCounter(debug1);
-                debug1.incrementCounter(debug1);
+            public void incrementCounter(final String s) { // MagmaCube - decompile fix
+                debug0.incrementCounter(s); // MagmaCube - decompile fix
+                debug1.incrementCounter(s); // MagmaCube - decompile fix
             }
             
             @Override
-            public void incrementCounter(final Supplier<String> debug1) {
-                debug0.incrementCounter(debug1);
-                debug1.incrementCounter(debug1);
+            public void incrementCounter(final Supplier<String> s) { // MagmaCube - decompile fix
+                debug0.incrementCounter(s); // MagmaCube - decompile fix
+                debug1.incrementCounter(s); // MagmaCube - decompile fix
             }
         };
     }
diff --git a/src/main/java/net/minecraft/util/profiling/SingleTickProfiler.java b/src/main/java/net/minecraft/util/profiling/SingleTickProfiler.java
index b129f35e39198d996b1d2cef7c00d8f84fb0fa5c..fcc8e11b9d57f971fba1134b14524f79e5860322 100644
--- a/src/main/java/net/minecraft/util/profiling/SingleTickProfiler.java
+++ b/src/main/java/net/minecraft/util/profiling/SingleTickProfiler.java
@@ -1,5 +1,6 @@
 package net.minecraft.util.profiling;
 
+import net.minecraft.Util;
 import org.apache.logging.log4j.LogManager;
 import javax.annotation.Nullable;
 import java.util.Date;
@@ -11,11 +12,11 @@ import org.apache.logging.log4j.Logger;
 public class SingleTickProfiler
 {
     private static final Logger LOGGER;
-    private final LongSupplier realTime;
-    private final long saveThreshold;
+    private final LongSupplier realTime = Util::getNanos; // MagmaCube - decompile fix - todo: fix code
+    private final long saveThreshold = 999999999999999L; // MagmaCube - decompile fix - todo: fix code
     private int tick;
-    private final File location;
-    private ProfileCollector profiler;
+    private final File location = new File("./profiles"); // MagmaCube - decompile fix - todo: fix code
+    private ProfileCollector profiler = InactiveProfiler.INSTANCE; // MagmaCube - decompile fix - todo: fix code
     
     public ProfilerFiller startTick() {
         this.profiler = new ActiveProfiler(this.realTime, () -> this.tick, false);
diff --git a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
index 5f28323757a39dde121b040a2833d0b1b1d91741..fece227ba9f7b6d086c201a1a715ed04d983b1f2 100644
--- a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
+++ b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
@@ -18,7 +18,7 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Processo
     private int blockingCount;
     
     protected BlockableEventLoop(final String debug1) {
-        this.pendingRunnables = (Queue<R>)Queues.newConcurrentLinkedQueue();
+        this.pendingRunnables = Queues.newConcurrentLinkedQueue(); // MagmaCube - decompile fix
         this.name = debug1;
     }
     
diff --git a/src/main/java/net/minecraft/util/thread/ProcessorHandle.java b/src/main/java/net/minecraft/util/thread/ProcessorHandle.java
index 16f2804f08aab7fafa96a1f9756037f562e8100f..44b229152f85ad01f0290e8dc95ca2b64fce2f3f 100644
--- a/src/main/java/net/minecraft/util/thread/ProcessorHandle.java
+++ b/src/main/java/net/minecraft/util/thread/ProcessorHandle.java
@@ -16,24 +16,25 @@ public interface ProcessorHandle<Msg> extends AutoCloseable
     
     default <Source> CompletableFuture<Source> ask(final Function<? super ProcessorHandle<Source>, ? extends Msg> debug1) {
         final CompletableFuture<Source> debug2 = new CompletableFuture<Source>();
-        final Msg debug3 = (Msg)debug1.apply((Object)of("ask future procesor handle", debug2::complete));
+        final Msg debug3 = (Msg)debug1.apply(of("ask future procesor handle", debug2::complete)); // MagmaCube - decompile fix
         this.tell(debug3);
         return debug2;
     }
     
     default <Source> CompletableFuture<Source> askEither(final Function<? super ProcessorHandle<Either<Source, Exception>>, ? extends Msg> debug1) {
-        final CompletableFuture<Source> debug2 = new CompletableFuture<Source>();
-        final CompletableFuture<Object> completableFuture;
-        final Msg debug3 = (Msg)debug1.apply((Object)of("ask future procesor handle", debug1 -> {
-            debug1.ifLeft((Consumer)completableFuture::complete);
-            debug1.ifRight((Consumer)completableFuture::completeExceptionally);
+        // MagmaCube start - decompile fix
+        final CompletableFuture<Source> completableFuture = new CompletableFuture<Source>();
+        final Msg debug3 = debug1.apply(of("ask future procesor handle", debug12 -> {
+            debug12.ifLeft(completableFuture::complete);
+            debug12.ifRight(completableFuture::completeExceptionally);
+            // MagmaCube end - decompile fix
             return;
         }));
         this.tell(debug3);
-        return debug2;
+        return completableFuture; // MagmaCube - decompile fix
     }
     
-    default <Msg> ProcessorHandle<Msg> of(final String debug0, final Consumer<Msg> debug1) {
+    static <Msg> ProcessorHandle<Msg> of(final String debug0, final Consumer<Msg> debug12) { // MagmaCube - decompile fix
         return new ProcessorHandle<Msg>() {
             @Override
             public String name() {
@@ -42,7 +43,7 @@ public interface ProcessorHandle<Msg> extends AutoCloseable
             
             @Override
             public void tell(final Msg debug1) {
-                debug1.accept(debug1);
+                debug12.accept(debug1); // MagmaCube - decompile fix
             }
             
             @Override
diff --git a/src/main/java/net/minecraft/util/thread/StrictQueue.java b/src/main/java/net/minecraft/util/thread/StrictQueue.java
index 9f70a48f4879a8d818bc69ad3e4d2c251a731fbd..765fc8cf88e867b2ec6eb2bd065e98d77badc74c 100644
--- a/src/main/java/net/minecraft/util/thread/StrictQueue.java
+++ b/src/main/java/net/minecraft/util/thread/StrictQueue.java
@@ -28,7 +28,7 @@ public interface StrictQueue<T, F> {
         private final List<Queue<Runnable>> queueList;
 
         public FixedPriorityQueue(int debug1) {
-            this.queueList = IntStream.range(0, debug1).mapToObj(debug0 -> Queues.newConcurrentLinkedQueue()).collect(Collectors.toList());
+            this.queueList = (List<Queue<Runnable>>) (Object) IntStream.range(0, debug1).mapToObj(debug0 -> Queues.newConcurrentLinkedQueue()).collect(Collectors.toList()); // MagmaCube - decompile fix
         }
 
         @Override
@@ -53,12 +53,6 @@ public interface StrictQueue<T, F> {
         public boolean isEmpty() {
             return this.queueList.stream().allMatch(Collection::isEmpty);
         }
-
-        @Override
-        @Nullable
-        public /* synthetic */ Object pop() {
-            return this.pop();
-        }
     }
 
     public static final class IntRunnable
diff --git a/src/main/java/net/minecraft/world/Clearable.java b/src/main/java/net/minecraft/world/Clearable.java
index 9da9cd5869a6f1e4a6db1460e0b0455dec952289..3845ee8cd552a3f2cb37b25f4d75c628ca1ee4e2 100644
--- a/src/main/java/net/minecraft/world/Clearable.java
+++ b/src/main/java/net/minecraft/world/Clearable.java
@@ -6,7 +6,7 @@ public interface Clearable
 {
     void clearContent();
     
-    default void tryClear(@Nullable final Object debug0) {
+    static void tryClear(@Nullable final Object debug0) { // MagmaCube - decompile fix
         if (debug0 instanceof Clearable) {
             ((Clearable)debug0).clearContent();
         }
diff --git a/src/main/java/net/minecraft/world/Snooper.java b/src/main/java/net/minecraft/world/Snooper.java
index 0cf93845bc427f2601c05aa4c1b8bbfac199e81a..7285de1d976b540c9f984084c75ae3fbc5144f04 100644
--- a/src/main/java/net/minecraft/world/Snooper.java
+++ b/src/main/java/net/minecraft/world/Snooper.java
@@ -20,8 +20,8 @@ public class Snooper
     private boolean started;
     
     public Snooper(final String debug1, final SnooperPopulator debug2, final long debug3) {
-        this.fixedData = (Map<String, Object>)Maps.newHashMap();
-        this.dynamicData = (Map<String, Object>)Maps.newHashMap();
+        this.fixedData = Maps.newHashMap(); // MagmaCube - decompile fix
+        this.dynamicData = Maps.newHashMap(); // MagmaCube - decompile fix
         this.token = UUID.randomUUID().toString();
         this.timer = new Timer("Snooper Timer", true);
         this.lock = new Object();
diff --git a/src/main/java/net/minecraft/world/damagesource/CombatTracker.java b/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
index fc4f8bf18281e4dd0365f9efbb20736ef9b56e10..6d995923d6ead2df6f299b88205e3bb0e410700a 100644
--- a/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
+++ b/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
@@ -30,7 +30,7 @@ public class CombatTracker
     private String nextLocation;
     
     public CombatTracker(final LivingEntity debug1) {
-        this.entries = (List<CombatEntry>)Lists.newArrayList();
+        this.entries = Lists.newArrayList(); // MagmaCube - decompile fix
         this.mob = debug1;
     }
     
diff --git a/src/main/java/net/minecraft/world/effect/MobEffect.java b/src/main/java/net/minecraft/world/effect/MobEffect.java
index 7910ba148360e21bc5615a28b5d651640353dea2..a0f8ca833a7c6267b35fccccc1f15e1253fc1dbe 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffect.java
@@ -36,7 +36,7 @@ public class MobEffect
     }
     
     protected MobEffect(final MobEffectCategory debug1, final int debug2) {
-        this.attributeModifiers = (Map<Attribute, AttributeModifier>)Maps.newHashMap();
+        this.attributeModifiers = Maps.newHashMap(); // MagmaCube - decompile fix
         this.category = debug1;
         this.color = debug2;
     }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 6d7024104e428c392e04e1b07b6c554b3011a986..62281187efcedbf13bedea0fe195b2187ffb9aeb 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -665,7 +665,7 @@ CommandSource {
         AABB debug2 = this.getBoundingBox();
         CollisionContext debug3 = CollisionContext.of(this);
         VoxelShape debug4 = this.level.getWorldBorder().getCollisionShape();
-        Stream<Object> debug5 = Shapes.joinIsNotEmpty(debug4, Shapes.create(debug2.deflate(1.0E-7)), BooleanOp.AND) ? Stream.empty() : Stream.of(debug4);
+        Stream<VoxelShape> debug5 = Shapes.joinIsNotEmpty(debug4, Shapes.create(debug2.deflate(1.0E-7)), BooleanOp.AND) ? Stream.empty() : Stream.of(debug4); // MagmaCube - decompile fix
         Stream<VoxelShape> debug6 = this.level.getEntityCollisions(this, debug2.expandTowards(debug1), debug0 -> true);
         RewindableStream<VoxelShape> debug7 = new RewindableStream<VoxelShape>(Stream.concat(debug6, debug5));
         Vec3 debug8 = debug1.lengthSqr() == 0.0 ? debug1 : Entity.collideBoundingBoxHeuristically(this, debug1, debug2, this.level, debug3, debug7);
@@ -935,7 +935,7 @@ CommandSource {
     }
 
     private void updateFluidOnEyes() {
-        Object debug4;
+        Entity debug4; // MagmaCube - decompile fix
         this.wasEyeInWater = this.isEyeInFluid(FluidTags.WATER);
         this.fluidOnEyes = null;
         double debug1 = this.getEyeY() - 0.1111111119389534;
@@ -943,11 +943,11 @@ CommandSource {
         if (debug3 instanceof Boat && !((Boat)(debug4 = (Boat)debug3)).isUnderWater() && debug4.getBoundingBox().maxY >= debug1 && debug4.getBoundingBox().minY <= debug1) {
             return;
         }
-        debug4 = new BlockPos(this.getX(), debug1, this.getZ());
-        FluidState debug5 = this.level.getFluidState((BlockPos)debug4);
+        BlockPos pos = new BlockPos(this.getX(), debug1, this.getZ()); // MagmaCube - decompile fix
+        FluidState debug5 = this.level.getFluidState((BlockPos)pos); // MagmaCube - decompile fix
         for (Tag tag : FluidTags.getWrappers()) {
             if (!debug5.is(tag)) continue;
-            double debug8 = (float)((Vec3i)debug4).getY() + debug5.getHeight(this.level, (BlockPos)debug4);
+            double debug8 = (float)((Vec3i)pos).getY() + debug5.getHeight(this.level, (BlockPos)pos); // MagmaCube - decompile fix
             if (debug8 > debug1) {
                 this.fluidOnEyes = tag;
             }
@@ -1829,7 +1829,7 @@ CommandSource {
         if (debug2) {
             this.entityData.set(DATA_SHARED_FLAGS_ID, (byte)(debug3 | 1 << debug1));
         } else {
-            this.entityData.set(DATA_SHARED_FLAGS_ID, (byte)(debug3 & â¾(1 << debug1)));
+            this.entityData.set(DATA_SHARED_FLAGS_ID, (byte)(debug3 & (1 << debug1))); // MagmaCube - decompile fix
         }
     }
 
@@ -1986,7 +1986,7 @@ CommandSource {
             return null;
         }
         this.level.getProfiler().popPush("reloading");
-        Object debug3 = this.getType().create(debug1);
+        Entity debug3 = this.getType().create(debug1); // MagmaCube - decompile fix
         if (debug3 != null) {
             ((Entity)debug3).restoreFrom(this);
             ((Entity)debug3).moveTo(debug2.pos.x, debug2.pos.y, debug2.pos.z, debug2.yRot, ((Entity)debug3).xRot);
@@ -2030,18 +2030,20 @@ CommandSource {
         double debug14 = DimensionType.getTeleportationScale(this.level.dimensionType(), debug1.dimensionType());
         BlockPos debug16 = new BlockPos(Mth.clamp(this.getX() * debug14, debug6, debug10), this.getY(), Mth.clamp(this.getZ() * debug14, debug8, debug12));
         return this.getExitPortal(debug1, debug16, debug4).map(debug22 -> {
-            Vec3 debug4;
-            Direction.Axis debug3;
-            BlockState debug5 = this.level.getBlockState(this.portalEntrancePos);
-            if (debug5.hasProperty(BlockStateProperties.HORIZONTAL_AXIS)) {
-                debug3 = debug5.getValue(BlockStateProperties.HORIZONTAL_AXIS);
-                BlockUtil.FoundRectangle debug6 = BlockUtil.getLargestRectangleAround(this.portalEntrancePos, debug3, 21, Direction.Axis.Y, 21, debug2 -> this.level.getBlockState((BlockPos)debug2) == debug5);
-                debug4 = this.getRelativePortalPosition(debug3, debug6);
+            // MagmaCube start - decompile fix
+            Vec3 debug42;
+            Direction.Axis debug32;
+            BlockState debug52 = this.level.getBlockState(this.portalEntrancePos);
+            if (debug52.hasProperty(BlockStateProperties.HORIZONTAL_AXIS)) {
+                debug32 = debug52.getValue(BlockStateProperties.HORIZONTAL_AXIS);
+                BlockUtil.FoundRectangle debug62 = BlockUtil.getLargestRectangleAround(this.portalEntrancePos, debug32, 21, Direction.Axis.Y, 21, debug222 -> this.level.getBlockState((BlockPos)debug222) == debug52);
+                debug42 = this.getRelativePortalPosition(debug32, debug62);
             } else {
-                debug3 = Direction.Axis.X;
-                debug4 = new Vec3(0.5, 0.0, 0.0);
+                debug32 = Direction.Axis.X;
+                debug42 = new Vec3(0.5, 0.0, 0.0);
             }
-            return PortalShape.createPortalInfo(debug1, debug22, debug3, debug4, this.getDimensions(this.getPose()), this.getDeltaMovement(), this.yRot, this.xRot);
+            return PortalShape.createPortalInfo(debug1, debug22, debug32, debug42, this.getDimensions(this.getPose()), this.getDeltaMovement(), this.yRot, this.xRot);
+            // MagmaCube end - decompile fix
         }).orElse(null);
     }
 
@@ -2165,8 +2167,8 @@ CommandSource {
         this.getSelfAndPassengers().forEach(debug1 -> {
             debug7.updateChunkPos((Entity)debug1);
             debug1.forceChunkAddition = true;
-            for (Entity debug3 : debug1.passengers) {
-                debug1.positionRider(debug3, Entity::moveTo);
+            for (Entity debug32 : debug1.passengers) { // MagmaCube - decompile fix
+                debug1.positionRider(debug32, Entity::moveTo); // MagmaCube - decompile fix
             }
         });
     }
diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index a2f57a327e5a6163bb07233c4f352525185d987e..4d43d0e002ef0585f6f0d5975eac9d8dbd8643b4 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -159,13 +159,13 @@ import org.apache.logging.log4j.Logger;
 
 public class EntityType<T extends Entity> {
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final EntityType<AreaEffectCloud> AREA_EFFECT_CLOUD = EntityType.register("area_effect_cloud", Builder.of(AreaEffectCloud::new, MobCategory.MISC).fireImmune().sized(6.0f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
-    public static final EntityType<ArmorStand> ARMOR_STAND = EntityType.register("armor_stand", Builder.of(ArmorStand::new, MobCategory.MISC).sized(0.5f, 1.975f).clientTrackingRange(10));
-    public static final EntityType<Arrow> ARROW = EntityType.register("arrow", Builder.of(Arrow::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20));
+    public static final EntityType<AreaEffectCloud> AREA_EFFECT_CLOUD = EntityType.register("area_effect_cloud", Builder.<AreaEffectCloud>of(AreaEffectCloud::new, MobCategory.MISC).fireImmune().sized(6.0f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE)); // MagmaCube - decompile fix
+    public static final EntityType<ArmorStand> ARMOR_STAND = EntityType.register("armor_stand", Builder.<ArmorStand>of(ArmorStand::new, MobCategory.MISC).sized(0.5f, 1.975f).clientTrackingRange(10)); // MagmaCube - decompile fix
+    public static final EntityType<Arrow> ARROW = EntityType.register("arrow", Builder.<Arrow>of(Arrow::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20)); // MagmaCube - decompile fix
     public static final EntityType<Bat> BAT = EntityType.register("bat", Builder.of(Bat::new, MobCategory.AMBIENT).sized(0.5f, 0.9f).clientTrackingRange(5));
     public static final EntityType<Bee> BEE = EntityType.register("bee", Builder.of(Bee::new, MobCategory.CREATURE).sized(0.7f, 0.6f).clientTrackingRange(8));
     public static final EntityType<Blaze> BLAZE = EntityType.register("blaze", Builder.of(Blaze::new, MobCategory.MONSTER).fireImmune().sized(0.6f, 1.8f).clientTrackingRange(8));
-    public static final EntityType<Boat> BOAT = EntityType.register("boat", Builder.of(Boat::new, MobCategory.MISC).sized(1.375f, 0.5625f).clientTrackingRange(10));
+    public static final EntityType<Boat> BOAT = EntityType.register("boat", Builder.<Boat>of(Boat::new, MobCategory.MISC).sized(1.375f, 0.5625f).clientTrackingRange(10)); // MagmaCube - decompile fix
     public static final EntityType<Cat> CAT = EntityType.register("cat", Builder.of(Cat::new, MobCategory.CREATURE).sized(0.6f, 0.7f).clientTrackingRange(8));
     public static final EntityType<CaveSpider> CAVE_SPIDER = EntityType.register("cave_spider", Builder.of(CaveSpider::new, MobCategory.MONSTER).sized(0.7f, 0.5f).clientTrackingRange(8));
     public static final EntityType<Chicken> CHICKEN = EntityType.register("chicken", Builder.of(Chicken::new, MobCategory.CREATURE).sized(0.4f, 0.7f).clientTrackingRange(10));
@@ -174,19 +174,19 @@ public class EntityType<T extends Entity> {
     public static final EntityType<Creeper> CREEPER = EntityType.register("creeper", Builder.of(Creeper::new, MobCategory.MONSTER).sized(0.6f, 1.7f).clientTrackingRange(8));
     public static final EntityType<Dolphin> DOLPHIN = EntityType.register("dolphin", Builder.of(Dolphin::new, MobCategory.WATER_CREATURE).sized(0.9f, 0.6f));
     public static final EntityType<Donkey> DONKEY = EntityType.register("donkey", Builder.of(Donkey::new, MobCategory.CREATURE).sized(1.3964844f, 1.5f).clientTrackingRange(10));
-    public static final EntityType<DragonFireball> DRAGON_FIREBALL = EntityType.register("dragon_fireball", Builder.of(DragonFireball::new, MobCategory.MISC).sized(1.0f, 1.0f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<DragonFireball> DRAGON_FIREBALL = EntityType.register("dragon_fireball", Builder.<DragonFireball>of(DragonFireball::new, MobCategory.MISC).sized(1.0f, 1.0f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
     public static final EntityType<Drowned> DROWNED = EntityType.register("drowned", Builder.of(Drowned::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<ElderGuardian> ELDER_GUARDIAN = EntityType.register("elder_guardian", Builder.of(ElderGuardian::new, MobCategory.MONSTER).sized(1.9975f, 1.9975f).clientTrackingRange(10));
-    public static final EntityType<EndCrystal> END_CRYSTAL = EntityType.register("end_crystal", Builder.of(EndCrystal::new, MobCategory.MISC).sized(2.0f, 2.0f).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<EndCrystal> END_CRYSTAL = EntityType.register("end_crystal", Builder.<EndCrystal>of(EndCrystal::new, MobCategory.MISC).sized(2.0f, 2.0f).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE)); // MagmaCube - decompile fix
     public static final EntityType<EnderDragon> ENDER_DRAGON = EntityType.register("ender_dragon", Builder.of(EnderDragon::new, MobCategory.MONSTER).fireImmune().sized(16.0f, 8.0f).clientTrackingRange(10));
     public static final EntityType<EnderMan> ENDERMAN = EntityType.register("enderman", Builder.of(EnderMan::new, MobCategory.MONSTER).sized(0.6f, 2.9f).clientTrackingRange(8));
     public static final EntityType<Endermite> ENDERMITE = EntityType.register("endermite", Builder.of(Endermite::new, MobCategory.MONSTER).sized(0.4f, 0.3f).clientTrackingRange(8));
     public static final EntityType<Evoker> EVOKER = EntityType.register("evoker", Builder.of(Evoker::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
-    public static final EntityType<EvokerFangs> EVOKER_FANGS = EntityType.register("evoker_fangs", Builder.of(EvokerFangs::new, MobCategory.MISC).sized(0.5f, 0.8f).clientTrackingRange(6).updateInterval(2));
-    public static final EntityType<ExperienceOrb> EXPERIENCE_ORB = EntityType.register("experience_orb", Builder.of(ExperienceOrb::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(6).updateInterval(20));
-    public static final EntityType<EyeOfEnder> EYE_OF_ENDER = EntityType.register("eye_of_ender", Builder.of(EyeOfEnder::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(4));
-    public static final EntityType<FallingBlockEntity> FALLING_BLOCK = EntityType.register("falling_block", Builder.of(FallingBlockEntity::new, MobCategory.MISC).sized(0.98f, 0.98f).clientTrackingRange(10).updateInterval(20));
-    public static final EntityType<FireworkRocketEntity> FIREWORK_ROCKET = EntityType.register("firework_rocket", Builder.of(FireworkRocketEntity::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<EvokerFangs> EVOKER_FANGS = EntityType.register("evoker_fangs", Builder.<EvokerFangs>of(EvokerFangs::new, MobCategory.MISC).sized(0.5f, 0.8f).clientTrackingRange(6).updateInterval(2)); // MagmaCube - decompile fix
+    public static final EntityType<ExperienceOrb> EXPERIENCE_ORB = EntityType.register("experience_orb", Builder.<ExperienceOrb>of(ExperienceOrb::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(6).updateInterval(20)); // MagmaCube - decompile fix
+    public static final EntityType<EyeOfEnder> EYE_OF_ENDER = EntityType.register("eye_of_ender", Builder.<EyeOfEnder>of(EyeOfEnder::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(4)); // MagmaCube - decompile fix
+    public static final EntityType<FallingBlockEntity> FALLING_BLOCK = EntityType.register("falling_block", Builder.<FallingBlockEntity>of(FallingBlockEntity::new, MobCategory.MISC).sized(0.98f, 0.98f).clientTrackingRange(10).updateInterval(20)); // MagmaCube - decompile fix
+    public static final EntityType<FireworkRocketEntity> FIREWORK_ROCKET = EntityType.register("firework_rocket", Builder.<FireworkRocketEntity>of(FireworkRocketEntity::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
     public static final EntityType<Fox> FOX = EntityType.register("fox", Builder.of(Fox::new, MobCategory.CREATURE).sized(0.6f, 0.7f).clientTrackingRange(8).immuneTo(Blocks.SWEET_BERRY_BUSH));
     public static final EntityType<Ghast> GHAST = EntityType.register("ghast", Builder.of(Ghast::new, MobCategory.MONSTER).fireImmune().sized(4.0f, 4.0f).clientTrackingRange(10));
     public static final EntityType<Giant> GIANT = EntityType.register("giant", Builder.of(Giant::new, MobCategory.MONSTER).sized(3.6f, 12.0f).clientTrackingRange(10));
@@ -196,25 +196,25 @@ public class EntityType<T extends Entity> {
     public static final EntityType<Husk> HUSK = EntityType.register("husk", Builder.of(Husk::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<Illusioner> ILLUSIONER = EntityType.register("illusioner", Builder.of(Illusioner::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<IronGolem> IRON_GOLEM = EntityType.register("iron_golem", Builder.of(IronGolem::new, MobCategory.MISC).sized(1.4f, 2.7f).clientTrackingRange(10));
-    public static final EntityType<ItemEntity> ITEM = EntityType.register("item", Builder.of(ItemEntity::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(6).updateInterval(20));
-    public static final EntityType<ItemFrame> ITEM_FRAME = EntityType.register("item_frame", Builder.of(ItemFrame::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
-    public static final EntityType<LargeFireball> FIREBALL = EntityType.register("fireball", Builder.of(LargeFireball::new, MobCategory.MISC).sized(1.0f, 1.0f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<LeashFenceKnotEntity> LEASH_KNOT = EntityType.register("leash_knot", Builder.of(LeashFenceKnotEntity::new, MobCategory.MISC).noSave().sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<ItemEntity> ITEM = EntityType.register("item", Builder.<ItemEntity>of(ItemEntity::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(6).updateInterval(20)); // MagmaCube - decompile fix
+    public static final EntityType<ItemFrame> ITEM_FRAME = EntityType.register("item_frame", Builder.<ItemFrame>of(ItemFrame::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE)); // MagmaCube - decompile fix
+    public static final EntityType<LargeFireball> FIREBALL = EntityType.register("fireball", Builder.<LargeFireball>of(LargeFireball::new, MobCategory.MISC).sized(1.0f, 1.0f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
+    public static final EntityType<LeashFenceKnotEntity> LEASH_KNOT = EntityType.register("leash_knot", Builder.<LeashFenceKnotEntity>of(LeashFenceKnotEntity::new, MobCategory.MISC).noSave().sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE)); // MagmaCube - decompile fix
     public static final EntityType<LightningBolt> LIGHTNING_BOLT = EntityType.register("lightning_bolt", Builder.of(LightningBolt::new, MobCategory.MISC).noSave().sized(0.0f, 0.0f).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE));
     public static final EntityType<Llama> LLAMA = EntityType.register("llama", Builder.of(Llama::new, MobCategory.CREATURE).sized(0.9f, 1.87f).clientTrackingRange(10));
-    public static final EntityType<LlamaSpit> LLAMA_SPIT = EntityType.register("llama_spit", Builder.of(LlamaSpit::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<LlamaSpit> LLAMA_SPIT = EntityType.register("llama_spit", Builder.<LlamaSpit>of(LlamaSpit::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
     public static final EntityType<MagmaCube> MAGMA_CUBE = EntityType.register("magma_cube", Builder.of(MagmaCube::new, MobCategory.MONSTER).fireImmune().sized(2.04f, 2.04f).clientTrackingRange(8));
-    public static final EntityType<Minecart> MINECART = EntityType.register("minecart", Builder.of(Minecart::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartChest> CHEST_MINECART = EntityType.register("chest_minecart", Builder.of(MinecartChest::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartCommandBlock> COMMAND_BLOCK_MINECART = EntityType.register("command_block_minecart", Builder.of(MinecartCommandBlock::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartFurnace> FURNACE_MINECART = EntityType.register("furnace_minecart", Builder.of(MinecartFurnace::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartHopper> HOPPER_MINECART = EntityType.register("hopper_minecart", Builder.of(MinecartHopper::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartSpawner> SPAWNER_MINECART = EntityType.register("spawner_minecart", Builder.of(MinecartSpawner::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
-    public static final EntityType<MinecartTNT> TNT_MINECART = EntityType.register("tnt_minecart", Builder.of(MinecartTNT::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8));
+    public static final EntityType<Minecart> MINECART = EntityType.register("minecart", Builder.<Minecart>of(Minecart::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8)); // MagmaCube - decompile fix
+    public static final EntityType<MinecartChest> CHEST_MINECART = EntityType.register("chest_minecart", Builder.<MinecartChest>of(MinecartChest::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8)); // MagmaCube - decompile fix
+    public static final EntityType<MinecartCommandBlock> COMMAND_BLOCK_MINECART = EntityType.register("command_block_minecart", Builder.<MinecartCommandBlock>of(MinecartCommandBlock::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8)); // MagmaCube - decompile fix
+    public static final EntityType<MinecartFurnace> FURNACE_MINECART = EntityType.register("furnace_minecart", Builder.<MinecartFurnace>of(MinecartFurnace::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8)); // MagmaCube - decompile fix
+    public static final EntityType<MinecartHopper> HOPPER_MINECART = EntityType.register("hopper_minecart", Builder.<MinecartHopper>of(MinecartHopper::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8)); // MagmaCube - decompile fix
+    public static final EntityType<MinecartSpawner> SPAWNER_MINECART = EntityType.register("spawner_minecart", Builder.<MinecartSpawner>of(MinecartSpawner::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8)); // MagmaCube - decompile fix
+    public static final EntityType<MinecartTNT> TNT_MINECART = EntityType.register("tnt_minecart", Builder.<MinecartTNT>of(MinecartTNT::new, MobCategory.MISC).sized(0.98f, 0.7f).clientTrackingRange(8)); // MagmaCube - decompile fix
     public static final EntityType<Mule> MULE = EntityType.register("mule", Builder.of(Mule::new, MobCategory.CREATURE).sized(1.3964844f, 1.6f).clientTrackingRange(8));
     public static final EntityType<MushroomCow> MOOSHROOM = EntityType.register("mooshroom", Builder.of(MushroomCow::new, MobCategory.CREATURE).sized(0.9f, 1.4f).clientTrackingRange(10));
     public static final EntityType<Ocelot> OCELOT = EntityType.register("ocelot", Builder.of(Ocelot::new, MobCategory.CREATURE).sized(0.6f, 0.7f).clientTrackingRange(10));
-    public static final EntityType<Painting> PAINTING = EntityType.register("painting", Builder.of(Painting::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<Painting> PAINTING = EntityType.register("painting", Builder.<Painting>of(Painting::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE)); // MagmaCube - decompile fix
     public static final EntityType<Panda> PANDA = EntityType.register("panda", Builder.of(Panda::new, MobCategory.CREATURE).sized(1.3f, 1.25f).clientTrackingRange(10));
     public static final EntityType<Parrot> PARROT = EntityType.register("parrot", Builder.of(Parrot::new, MobCategory.CREATURE).sized(0.5f, 0.9f).clientTrackingRange(8));
     public static final EntityType<Phantom> PHANTOM = EntityType.register("phantom", Builder.of(Phantom::new, MobCategory.MONSTER).sized(0.9f, 0.5f).clientTrackingRange(8));
@@ -223,50 +223,50 @@ public class EntityType<T extends Entity> {
     public static final EntityType<PiglinBrute> PIGLIN_BRUTE = EntityType.register("piglin_brute", Builder.of(PiglinBrute::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<Pillager> PILLAGER = EntityType.register("pillager", Builder.of(Pillager::new, MobCategory.MONSTER).canSpawnFarFromPlayer().sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<PolarBear> POLAR_BEAR = EntityType.register("polar_bear", Builder.of(PolarBear::new, MobCategory.CREATURE).sized(1.4f, 1.4f).clientTrackingRange(10));
-    public static final EntityType<PrimedTnt> TNT = EntityType.register("tnt", Builder.of(PrimedTnt::new, MobCategory.MISC).fireImmune().sized(0.98f, 0.98f).clientTrackingRange(10).updateInterval(10));
+    public static final EntityType<PrimedTnt> TNT = EntityType.register("tnt", Builder.<PrimedTnt>of(PrimedTnt::new, MobCategory.MISC).fireImmune().sized(0.98f, 0.98f).clientTrackingRange(10).updateInterval(10)); // MagmaCube - decompile fix
     public static final EntityType<Pufferfish> PUFFERFISH = EntityType.register("pufferfish", Builder.of(Pufferfish::new, MobCategory.WATER_AMBIENT).sized(0.7f, 0.7f).clientTrackingRange(4));
     public static final EntityType<Rabbit> RABBIT = EntityType.register("rabbit", Builder.of(Rabbit::new, MobCategory.CREATURE).sized(0.4f, 0.5f).clientTrackingRange(8));
     public static final EntityType<Ravager> RAVAGER = EntityType.register("ravager", Builder.of(Ravager::new, MobCategory.MONSTER).sized(1.95f, 2.2f).clientTrackingRange(10));
     public static final EntityType<Salmon> SALMON = EntityType.register("salmon", Builder.of(Salmon::new, MobCategory.WATER_AMBIENT).sized(0.7f, 0.4f).clientTrackingRange(4));
     public static final EntityType<Sheep> SHEEP = EntityType.register("sheep", Builder.of(Sheep::new, MobCategory.CREATURE).sized(0.9f, 1.3f).clientTrackingRange(10));
     public static final EntityType<Shulker> SHULKER = EntityType.register("shulker", Builder.of(Shulker::new, MobCategory.MONSTER).fireImmune().canSpawnFarFromPlayer().sized(1.0f, 1.0f).clientTrackingRange(10));
-    public static final EntityType<ShulkerBullet> SHULKER_BULLET = EntityType.register("shulker_bullet", Builder.of(ShulkerBullet::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(8));
+    public static final EntityType<ShulkerBullet> SHULKER_BULLET = EntityType.register("shulker_bullet", Builder.<ShulkerBullet>of(ShulkerBullet::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(8)); // MagmaCube - decompile fix
     public static final EntityType<Silverfish> SILVERFISH = EntityType.register("silverfish", Builder.of(Silverfish::new, MobCategory.MONSTER).sized(0.4f, 0.3f).clientTrackingRange(8));
     public static final EntityType<Skeleton> SKELETON = EntityType.register("skeleton", Builder.of(Skeleton::new, MobCategory.MONSTER).sized(0.6f, 1.99f).clientTrackingRange(8));
     public static final EntityType<SkeletonHorse> SKELETON_HORSE = EntityType.register("skeleton_horse", Builder.of(SkeletonHorse::new, MobCategory.CREATURE).sized(1.3964844f, 1.6f).clientTrackingRange(10));
     public static final EntityType<Slime> SLIME = EntityType.register("slime", Builder.of(Slime::new, MobCategory.MONSTER).sized(2.04f, 2.04f).clientTrackingRange(10));
-    public static final EntityType<SmallFireball> SMALL_FIREBALL = EntityType.register("small_fireball", Builder.of(SmallFireball::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<SmallFireball> SMALL_FIREBALL = EntityType.register("small_fireball", Builder.<SmallFireball>of(SmallFireball::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
     public static final EntityType<SnowGolem> SNOW_GOLEM = EntityType.register("snow_golem", Builder.of(SnowGolem::new, MobCategory.MISC).sized(0.7f, 1.9f).clientTrackingRange(8));
-    public static final EntityType<Snowball> SNOWBALL = EntityType.register("snowball", Builder.of(Snowball::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<SpectralArrow> SPECTRAL_ARROW = EntityType.register("spectral_arrow", Builder.of(SpectralArrow::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20));
+    public static final EntityType<Snowball> SNOWBALL = EntityType.register("snowball", Builder.<Snowball>of(Snowball::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
+    public static final EntityType<SpectralArrow> SPECTRAL_ARROW = EntityType.register("spectral_arrow", Builder.<SpectralArrow>of(SpectralArrow::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20)); // MagmaCube - decompile fix
     public static final EntityType<Spider> SPIDER = EntityType.register("spider", Builder.of(Spider::new, MobCategory.MONSTER).sized(1.4f, 0.9f).clientTrackingRange(8));
     public static final EntityType<Squid> SQUID = EntityType.register("squid", Builder.of(Squid::new, MobCategory.WATER_CREATURE).sized(0.8f, 0.8f).clientTrackingRange(8));
     public static final EntityType<Stray> STRAY = EntityType.register("stray", Builder.of(Stray::new, MobCategory.MONSTER).sized(0.6f, 1.99f).clientTrackingRange(8));
     public static final EntityType<Strider> STRIDER = EntityType.register("strider", Builder.of(Strider::new, MobCategory.CREATURE).fireImmune().sized(0.9f, 1.7f).clientTrackingRange(10));
-    public static final EntityType<ThrownEgg> EGG = EntityType.register("egg", Builder.of(ThrownEgg::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownEnderpearl> ENDER_PEARL = EntityType.register("ender_pearl", Builder.of(ThrownEnderpearl::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownExperienceBottle> EXPERIENCE_BOTTLE = EntityType.register("experience_bottle", Builder.of(ThrownExperienceBottle::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownPotion> POTION = EntityType.register("potion", Builder.of(ThrownPotion::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10));
-    public static final EntityType<ThrownTrident> TRIDENT = EntityType.register("trident", Builder.of(ThrownTrident::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20));
+    public static final EntityType<ThrownEgg> EGG = EntityType.register("egg", Builder.<ThrownEgg>of(ThrownEgg::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
+    public static final EntityType<ThrownEnderpearl> ENDER_PEARL = EntityType.register("ender_pearl", Builder.<ThrownEnderpearl>of(ThrownEnderpearl::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
+    public static final EntityType<ThrownExperienceBottle> EXPERIENCE_BOTTLE = EntityType.register("experience_bottle", Builder.<ThrownExperienceBottle>of(ThrownExperienceBottle::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
+    public static final EntityType<ThrownPotion> POTION = EntityType.register("potion", Builder.<ThrownPotion>of(ThrownPotion::new, MobCategory.MISC).sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
+    public static final EntityType<ThrownTrident> TRIDENT = EntityType.register("trident", Builder.<ThrownTrident>of(ThrownTrident::new, MobCategory.MISC).sized(0.5f, 0.5f).clientTrackingRange(4).updateInterval(20)); // MagmaCube - decompile fix
     public static final EntityType<TraderLlama> TRADER_LLAMA = EntityType.register("trader_llama", Builder.of(TraderLlama::new, MobCategory.CREATURE).sized(0.9f, 1.87f).clientTrackingRange(10));
     public static final EntityType<TropicalFish> TROPICAL_FISH = EntityType.register("tropical_fish", Builder.of(TropicalFish::new, MobCategory.WATER_AMBIENT).sized(0.5f, 0.4f).clientTrackingRange(4));
     public static final EntityType<Turtle> TURTLE = EntityType.register("turtle", Builder.of(Turtle::new, MobCategory.CREATURE).sized(1.2f, 0.4f).clientTrackingRange(10));
     public static final EntityType<Vex> VEX = EntityType.register("vex", Builder.of(Vex::new, MobCategory.MONSTER).fireImmune().sized(0.4f, 0.8f).clientTrackingRange(8));
-    public static final EntityType<Villager> VILLAGER = EntityType.register("villager", Builder.of(Villager::new, MobCategory.MISC).sized(0.6f, 1.95f).clientTrackingRange(10));
+    public static final EntityType<Villager> VILLAGER = EntityType.register("villager", Builder.<Villager>of(Villager::new, MobCategory.MISC).sized(0.6f, 1.95f).clientTrackingRange(10)); // MagmaCube - decompile fix
     public static final EntityType<Vindicator> VINDICATOR = EntityType.register("vindicator", Builder.of(Vindicator::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<WanderingTrader> WANDERING_TRADER = EntityType.register("wandering_trader", Builder.of(WanderingTrader::new, MobCategory.CREATURE).sized(0.6f, 1.95f).clientTrackingRange(10));
     public static final EntityType<Witch> WITCH = EntityType.register("witch", Builder.of(Witch::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<WitherBoss> WITHER = EntityType.register("wither", Builder.of(WitherBoss::new, MobCategory.MONSTER).fireImmune().immuneTo(Blocks.WITHER_ROSE).sized(0.9f, 3.5f).clientTrackingRange(10));
     public static final EntityType<WitherSkeleton> WITHER_SKELETON = EntityType.register("wither_skeleton", Builder.of(WitherSkeleton::new, MobCategory.MONSTER).fireImmune().immuneTo(Blocks.WITHER_ROSE).sized(0.7f, 2.4f).clientTrackingRange(8));
-    public static final EntityType<WitherSkull> WITHER_SKULL = EntityType.register("wither_skull", Builder.of(WitherSkull::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<WitherSkull> WITHER_SKULL = EntityType.register("wither_skull", Builder.<WitherSkull>of(WitherSkull::new, MobCategory.MISC).sized(0.3125f, 0.3125f).clientTrackingRange(4).updateInterval(10)); // MagmaCube - decompile fix
     public static final EntityType<Wolf> WOLF = EntityType.register("wolf", Builder.of(Wolf::new, MobCategory.CREATURE).sized(0.6f, 0.85f).clientTrackingRange(10));
     public static final EntityType<Zoglin> ZOGLIN = EntityType.register("zoglin", Builder.of(Zoglin::new, MobCategory.MONSTER).fireImmune().sized(1.3964844f, 1.4f).clientTrackingRange(8));
-    public static final EntityType<Zombie> ZOMBIE = EntityType.register("zombie", Builder.of(Zombie::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
+    public static final EntityType<Zombie> ZOMBIE = EntityType.register("zombie", Builder.<Zombie>of(Zombie::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8)); // MagmaCube - decompile fix
     public static final EntityType<ZombieHorse> ZOMBIE_HORSE = EntityType.register("zombie_horse", Builder.of(ZombieHorse::new, MobCategory.CREATURE).sized(1.3964844f, 1.6f).clientTrackingRange(10));
     public static final EntityType<ZombieVillager> ZOMBIE_VILLAGER = EntityType.register("zombie_villager", Builder.of(ZombieVillager::new, MobCategory.MONSTER).sized(0.6f, 1.95f).clientTrackingRange(8));
     public static final EntityType<ZombifiedPiglin> ZOMBIFIED_PIGLIN = EntityType.register("zombified_piglin", Builder.of(ZombifiedPiglin::new, MobCategory.MONSTER).fireImmune().sized(0.6f, 1.95f).clientTrackingRange(8));
-    public static final EntityType<Player> PLAYER = EntityType.register("player", Builder.createNothing(MobCategory.MISC).noSave().noSummon().sized(0.6f, 1.8f).clientTrackingRange(32).updateInterval(2));
-    public static final EntityType<FishingHook> FISHING_BOBBER = EntityType.register("fishing_bobber", Builder.createNothing(MobCategory.MISC).noSave().noSummon().sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(5));
+    public static final EntityType<Player> PLAYER = EntityType.register("player", Builder.<Player>createNothing(MobCategory.MISC).noSave().noSummon().sized(0.6f, 1.8f).clientTrackingRange(32).updateInterval(2)); // MagmaCube - decompile fix
+    public static final EntityType<FishingHook> FISHING_BOBBER = EntityType.register("fishing_bobber", Builder.<FishingHook>createNothing(MobCategory.MISC).noSave().noSummon().sized(0.25f, 0.25f).clientTrackingRange(4).updateInterval(5)); // MagmaCube - decompile fix
     private final EntityFactory<T> factory;
     private final MobCategory category;
     private final ImmutableSet<Block> immuneTo;
@@ -542,7 +542,7 @@ public class EntityType<T extends Entity> {
         }
 
         public static <T extends Entity> Builder<T> createNothing(MobCategory debug02) {
-            return new Builder<Entity>((debug0, debug1) -> null, debug02);
+            return new Builder<>((debug0, debug1) -> null, debug02); // MagmaCube - decompile fix
         }
 
         public Builder<T> sized(float debug1, float debug2) {
@@ -566,7 +566,7 @@ public class EntityType<T extends Entity> {
         }
 
         public Builder<T> immuneTo(Block ... debug1) {
-            this.immuneTo = ImmutableSet.copyOf((Object[])debug1);
+            this.immuneTo = ImmutableSet.copyOf(debug1); // MagmaCube - decompile fix
             return this;
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 11dcc89b6724a0027fe384f78d4ec717e24a26e4..e6bc3fd7dd12d6f5d4879c7feb3023fdc5390572 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -354,7 +354,7 @@ extends Entity {
                 this.setAirSupply(this.increaseAirSupply(this.getAirSupply()));
             }
             if (!this.level.isClientSide && !Objects.equal((Object)this.lastPos, (Object)(debug3 = this.blockPosition()))) {
-                this.lastPos = debug3;
+                this.lastPos = (BlockPos) debug3; // MagmaCube - decompile fix
                 this.onChangedBlock((BlockPos)debug3);
             }
         }
@@ -576,7 +576,7 @@ extends Entity {
 
     @Override
     public void addAdditionalSaveData(CompoundTag debug12) {
-        DataResult<net.minecraft.nbt.Tag> debug2;
+        // MagmaCube start - decompile fix
         debug12.putFloat("Health", this.getHealth());
         debug12.putShort("HurtTime", (short)this.hurtTime);
         debug12.putInt("HurtByTimestamp", this.lastHurtByMobTimestamp);
@@ -584,11 +584,11 @@ extends Entity {
         debug12.putFloat("AbsorptionAmount", this.getAbsorptionAmount());
         debug12.put("Attributes", this.getAttributes().save());
         if (!this.activeEffects.isEmpty()) {
-            debug2 = new DataResult<net.minecraft.nbt.Tag>();
+            ListTag listTag = new ListTag();
             for (MobEffectInstance debug4 : this.activeEffects.values()) {
-                debug2.add(debug4.save(new CompoundTag()));
+                listTag.add(debug4.save(new CompoundTag()));
             }
-            debug12.put("ActiveEffects", (net.minecraft.nbt.Tag)debug2);
+            debug12.put("ActiveEffects", listTag);
         }
         debug12.putBoolean("FallFlying", this.isFallFlying());
         this.getSleepingPos().ifPresent(debug1 -> {
@@ -596,7 +596,8 @@ extends Entity {
             debug12.putInt("SleepingY", debug1.getY());
             debug12.putInt("SleepingZ", debug1.getZ());
         });
-        debug2 = this.brain.serializeStart(NbtOps.INSTANCE);
+        DataResult<net.minecraft.nbt.Tag> debug2 = this.brain.serializeStart(NbtOps.INSTANCE);
+        // MagmaCube end - decompile fix
         debug2.resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("Brain", (net.minecraft.nbt.Tag)debug1));
     }
 
@@ -628,7 +629,7 @@ extends Entity {
             PlayerTeam debug3 = this.level.getScoreboard().getPlayerTeam((String)debug2);
             boolean bl = debug4 = debug3 != null && this.level.getScoreboard().addPlayerToTeam(this.getStringUUID(), debug3);
             if (!debug4) {
-                LOGGER.warn("Unable to add mob to team Â¥"{}Â¥" (that team probably doesn't exist)", debug2);
+                LOGGER.warn("Unable to add mob to team \"{}\" (that team probably doesn't exist)", debug2);
             }
         }
         if (debug1.getBoolean("FallFlying")) {
@@ -2025,7 +2026,7 @@ extends Entity {
         ItemStack debug2 = debug1.get((Object)EquipmentSlot.MAINHAND);
         ItemStack debug3 = debug1.get((Object)EquipmentSlot.OFFHAND);
         if (debug2 != null && debug3 != null && ItemStack.matches(debug2, this.getLastHandItem(EquipmentSlot.OFFHAND)) && ItemStack.matches(debug3, this.getLastHandItem(EquipmentSlot.MAINHAND))) {
-            ((ServerLevel)this.level).getChunkSource().broadcast(this, new ClientboundEntityEventPacket(this, 55));
+            ((ServerLevel)this.level).getChunkSource().broadcast(this, new ClientboundEntityEventPacket(this, (byte) 55)); // MagmaCube - decompile fix
             debug1.remove((Object)EquipmentSlot.MAINHAND);
             debug1.remove((Object)EquipmentSlot.OFFHAND);
             this.setLastHandItem(EquipmentSlot.MAINHAND, debug2.copy());
@@ -2440,7 +2441,7 @@ extends Entity {
 
     protected void setLivingEntityFlag(int debug1, boolean debug2) {
         int debug3 = this.entityData.get(DATA_LIVING_ENTITY_FLAGS).byteValue();
-        debug3 = debug2 ? (debug3 |= debug1) : (debug3 &= â¾debug1);
+        debug3 = debug2 ? (debug3 |= debug1) : (debug3 &= debug1);
         this.entityData.set(DATA_LIVING_ENTITY_FLAGS, (byte)debug3);
     }
 
@@ -2654,7 +2655,7 @@ extends Entity {
     }
 
     public ImmutableList<Pose> getDismountPoses() {
-        return ImmutableList.of((Object)((Object)Pose.STANDING));
+        return ImmutableList.of(Pose.STANDING); // MagmaCube - decompile fix
     }
 
     public AABB getLocalBoundsForPose(Pose debug1) {
@@ -2707,8 +2708,8 @@ extends Entity {
             if (debug2.getBlock() instanceof BedBlock) {
                 this.level.setBlock((BlockPos)debug1, (BlockState)debug2.setValue(BedBlock.OCCUPIED, false), 3);
                 Vec3 debug3 = BedBlock.findStandUpPosition(this.getType(), this.level, debug1, this.yRot).orElseGet(() -> {
-                    Object debug1 = debug1.above();
-                    return new Vec3((double)debug1.getX() + 0.5, (double)debug1.getY() + 0.1, (double)debug1.getZ() + 0.5);
+                    BlockPos debug12 = debug1.above(); // MagmaCube - decompile fix
+                    return new Vec3((double)debug12.getX() + 0.5, (double)debug12.getY() + 0.1, (double)debug12.getZ() + 0.5); // MagmaCube - decompile fix
                 });
                 Vec3 debug4 = Vec3.atBottomCenterOf(debug1).subtract(debug3).normalize();
                 float debug5 = (float)Mth.wrapDegrees(Mth.atan2(debug4.z, debug4.x) * 57.2957763671875 - 90.0);
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 72036f16f0872002d01912a78302cd85fefc052c..7593ecc5685220e62437e8ab2d525f1dab5cbe1b 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -344,7 +344,7 @@ public abstract class Mob extends LivingEntity
             if (!debug3.isEmpty()) {
                 debug3.save(debug4);
             }
-            ((AbstractList<CompoundTag>)debug2).add(debug4);
+            debug2.add(debug4); // MagmaCube - decompile fix
         }
         debug1.put("ArmorItems", debug2);
         final ListTag debug5 = new ListTag();
@@ -353,17 +353,17 @@ public abstract class Mob extends LivingEntity
             if (!debug6.isEmpty()) {
                 debug6.save(debug7);
             }
-            ((AbstractList<CompoundTag>)debug5).add(debug7);
+            debug5.add(debug7); // MagmaCube - decompile fix
         }
         debug1.put("HandItems", debug5);
         final ListTag debug8 = new ListTag();
         for (final float debug9 : this.armorDropChances) {
-            ((AbstractList<FloatTag>)debug8).add(FloatTag.valueOf(debug9));
+            debug8.add(FloatTag.valueOf(debug9)); // MagmaCube - decompile fix
         }
         debug1.put("ArmorDropChances", debug8);
         final ListTag debug10 = new ListTag();
         for (final float debug11 : this.handDropChances) {
-            ((AbstractList<FloatTag>)debug10).add(FloatTag.valueOf(debug11));
+            debug10.add(FloatTag.valueOf(debug11)); // MagmaCube - decompile fix
         }
         debug1.put("HandDropChances", debug10);
         if (this.leashHolder != null) {
@@ -1074,7 +1074,7 @@ public abstract class Mob extends LivingEntity
         if (this.level instanceof ServerLevel) {
             final SpawnEggItem debug5 = (SpawnEggItem)debug3.getItem();
             final Optional<Mob> debug6 = debug5.spawnOffspringFromSpawnEgg(debug1, this, (EntityType<? extends Mob>)this.getType(), (ServerLevel)this.level, this.position(), debug3);
-            debug6.ifPresent(debug2 -> this.onOffspringSpawnedFromEgg(debug1, debug2));
+            debug6.ifPresent(debug2l -> this.onOffspringSpawnedFromEgg(debug1, debug2l)); // MagmaCube - decompile fix
             return debug6.isPresent() ? InteractionResult.SUCCESS : InteractionResult.PASS;
         }
         return InteractionResult.CONSUME;
diff --git a/src/main/java/net/minecraft/world/entity/ai/Brain.java b/src/main/java/net/minecraft/world/entity/ai/Brain.java
index bc413e1a25d62815ae4909f276487577c559c05f..7f65b6b5678a8a9b37c5b94e36defa5edaef313a 100644
--- a/src/main/java/net/minecraft/world/entity/ai/Brain.java
+++ b/src/main/java/net/minecraft/world/entity/ai/Brain.java
@@ -63,48 +63,49 @@ public class Brain<E extends LivingEntity>
     }
     
     public static <E extends LivingEntity> Codec<Brain<E>> codec(final Collection<? extends MemoryModuleType<?>> debug0, final Collection<? extends SensorType<? extends Sensor<? super E>>> debug1) {
-        final MutableObject<Codec<Brain<E>>> debug2 = (MutableObject<Codec<Brain<E>>>)new MutableObject();
-        debug2.setValue((Object)new MapCodec<Brain<E>>() {
+        // MagmaCube start - decompile fix
+        final MutableObject<Codec<Brain<E>>> mutableObject = (MutableObject<Codec<Brain<E>>>)new MutableObject();
+        mutableObject.setValue(new MapCodec<Brain<E>>() {
             public <T> Stream<T> keys(final DynamicOps<T> debug1) {
-                return debug0.stream().flatMap(debug0 -> Util.toStream((Optional<?>)debug0.getCodec().map(debug1 -> Registry.MEMORY_MODULE_TYPE.getKey(debug0)))).map(debug1 -> debug1.createString(debug1.toString()));
+                return debug0.stream().flatMap(debug0 -> Util.toStream((Optional<?>)debug0.getCodec().map(debug1l -> Registry.MEMORY_MODULE_TYPE.getKey(debug0)))).map(debug1l -> debug1.createString(debug1l.toString())); // MagmaCube - decompile fix
             }
             
-            public <T> DataResult<Brain<E>> decode(final DynamicOps<T> debug1, final MapLike<T> debug2) {
-                final MutableObject<DataResult<ImmutableList.Builder<MemoryValue<?>>>> debug4 = (MutableObject<DataResult<ImmutableList.Builder<MemoryValue<?>>>>)new MutableObject((Object)DataResult.success((Object)ImmutableList.builder()));
-                final DataResult<MemoryModuleType<?>> debug5;
-                final DataResult<? extends MemoryValue<?>> debug6;
-                final MutableObject mutableObject;
+            public <T> DataResult<Brain<E>> decode(final DynamicOps<T> debug1_2, final MapLike<T> debug2) {
+                final MutableObject<DataResult<ImmutableList.Builder<MemoryValue<?>>>> debug4 = new MutableObject<>(DataResult.success(ImmutableList.builder()));
                 debug2.entries().forEach(debug3 -> {
-                    debug5 = (DataResult<MemoryModuleType<?>>)Registry.MEMORY_MODULE_TYPE.parse((DynamicOps)debug1, debug3.getFirst());
-                    debug6 = (DataResult<? extends MemoryValue<?>>)debug5.flatMap(debug3 -> this.captureRead(debug3, (com.mojang.serialization.DynamicOps<Object>)debug1, debug3.getSecond()));
-                    mutableObject.setValue((Object)((DataResult)mutableObject.getValue()).apply2((BiFunction)ImmutableList.Builder::add, (DataResult)debug6));
+                    DataResult<MemoryModuleType<?>> debug5 = Registry.MEMORY_MODULE_TYPE.parse(debug1_2, debug3.getFirst());
+                    DataResult<? extends MemoryValue<?>> debug6 = debug5.flatMap(debug3l -> this.captureRead(debug3l, debug1_2, debug3.getSecond()));
+                    debug4.setValue(debug4.getValue().apply2(ImmutableList.Builder::add, debug6));
                     return;
                 });
-                final ImmutableList<MemoryValue<?>> debug7 = (ImmutableList<MemoryValue<?>>)((DataResult)debug4.getValue()).resultOrPartial((Consumer)Brain.LOGGER::error).map(ImmutableList.Builder::build).orElseGet(ImmutableList::of);
-                return (DataResult<Brain<E>>)DataResult.success((Object)new Brain(debug0, debug1, debug7, debug2::getValue));
+                final ImmutableList<MemoryValue<?>> debug7 = debug4.getValue().resultOrPartial(Brain.LOGGER::error).map(ImmutableList.Builder::build).orElseGet(ImmutableList::of);
+                return DataResult.success(new Brain(debug0, debug1, debug7, mutableObject::getValue));
+                // MagmaCube end - decompile fix
             }
             
             private <T, U> DataResult<MemoryValue<U>> captureRead(final MemoryModuleType<U> debug1, final DynamicOps<T> debug2, final T debug3) {
-                return (DataResult<MemoryValue<U>>)debug1.getCodec().map((Function<? super com.mojang.serialization.Codec<ExpirableValue<U>>, ? extends DataResult>)DataResult::success).orElseGet(() -> DataResult.error("No codec for memory: " + debug1)).flatMap(debug2 -> debug2.parse((DynamicOps)debug2, (Object)debug3)).map(debug1 -> new MemoryValue((MemoryModuleType)debug1, (Optional)Optional.of(debug1)));
+                return debug1.getCodec().map(DataResult::success).orElseGet(() -> DataResult.error("No codec for memory: " + debug1)).flatMap(debug2l -> debug2l.parse(debug2, debug3)).map(debug1l -> new MemoryValue((MemoryModuleType)debug1, (Optional)Optional.of(debug1l))); // MagmaCube - decompile fix
             }
             
             public <T> RecordBuilder<T> encode(final Brain<E> debug1, final DynamicOps<T> debug2, final RecordBuilder<T> debug3) {
-                ((Brain<LivingEntity>)debug1).memories().forEach(debug2 -> debug2.serialize(debug2, debug3));
+                ((Brain<LivingEntity>)debug1).memories().forEach(debug2l -> debug2l.serialize(debug2, debug3)); // MagmaCube - decompile fix
                 return debug3;
             }
         }.fieldOf("memories").codec());
-        return (Codec<Brain<E>>)debug2.getValue();
+        return (Codec<Brain<E>>)mutableObject.getValue(); // MagmaCube - decompile fix
     }
     
     public Brain(final Collection<? extends MemoryModuleType<?>> debug1, final Collection<? extends SensorType<? extends Sensor<? super E>>> debug2, final ImmutableList<MemoryValue<?>> debug3, final Supplier<Codec<Brain<E>>> debug4) {
-        this.memories = (Map<MemoryModuleType<?>, Optional<? extends ExpirableValue<?>>>)Maps.newHashMap();
-        this.sensors = (Map<SensorType<? extends Sensor<? super E>>, Sensor<? super E>>)Maps.newLinkedHashMap();
-        this.availableBehaviorsByPriority = (Map<Integer, Map<Activity, Set<Behavior<? super E>>>>)Maps.newTreeMap();
+        // MagmaCube start - decompile fix
+        this.memories = Maps.newHashMap();
+        this.sensors = Maps.newLinkedHashMap();
+        this.availableBehaviorsByPriority = Maps.newTreeMap();
         this.schedule = Schedule.EMPTY;
-        this.activityRequirements = (Map<Activity, Set<Pair<MemoryModuleType<?>, MemoryStatus>>>)Maps.newHashMap();
-        this.activityMemoriesToEraseWhenStopped = (Map<Activity, Set<MemoryModuleType<?>>>)Maps.newHashMap();
-        this.coreActivities = (Set<Activity>)Sets.newHashSet();
-        this.activeActivities = (Set<Activity>)Sets.newHashSet();
+        this.activityRequirements = Maps.newHashMap();
+        this.activityMemoriesToEraseWhenStopped = Maps.newHashMap();
+        this.coreActivities = Sets.newHashSet();
+        this.activeActivities = Sets.newHashSet();
+        // MagmaCube end - decompile fix
         this.defaultActivity = Activity.IDLE;
         this.lastScheduleUpdate = -9999L;
         this.codec = debug4;
@@ -125,11 +126,11 @@ public class Brain<E extends LivingEntity>
     }
     
     public <T> DataResult<T> serializeStart(final DynamicOps<T> debug1) {
-        return (DataResult<T>)this.codec.get().encodeStart((DynamicOps)debug1, (Object)this);
+        return (DataResult<T>)this.codec.get().encodeStart((DynamicOps)debug1, this); // MagmaCube - decompile fix
     }
     
     private Stream<MemoryValue<?>> memories() {
-        return this.memories.entrySet().stream().map(debug0 -> createUnchecked((MemoryModuleType<Object>)debug0.getKey(), (Optional)debug0.getValue()));
+        return this.memories.entrySet().stream().map(debug0 -> MemoryValue.createUnchecked((MemoryModuleType<Object>)debug0.getKey(), (Optional)debug0.getValue())); // MagmaCube - decompile fix
     }
     
     public boolean hasMemoryValue(final MemoryModuleType<?> debug1) {
@@ -164,11 +165,11 @@ public class Brain<E extends LivingEntity>
     }
     
     public <U> Optional<U> getMemory(final MemoryModuleType<U> debug1) {
-        return this.memories.get(debug1).map((Function<? super ExpirableValue<?>, ? extends U>)ExpirableValue::getValue);
+        return (Optional<U>) this.memories.get(debug1).map(ExpirableValue::getValue); // MagmaCube - decompile fix
     }
     
     public <U> boolean isMemoryValue(final MemoryModuleType<U> debug1, final U debug2) {
-        return this.hasMemoryValue(debug1) && this.getMemory(debug1).filter(debug1 -> debug1.equals(debug2)).isPresent();
+        return this.hasMemoryValue(debug1) && this.getMemory(debug1).filter(debug1l -> debug1l.equals(debug2)).isPresent(); // MagmaCube - decompile fix
     }
     
     public boolean checkMemory(final MemoryModuleType<?> debug1, final MemoryStatus debug2) {
@@ -277,13 +278,13 @@ public class Brain<E extends LivingEntity>
     }
     
     public void addActivityAndRemoveMemoryWhenStopped(final Activity debug1, final int debug2, final ImmutableList<? extends Behavior<? super E>> debug3, final MemoryModuleType<?> debug4) {
-        final Set<Pair<MemoryModuleType<?>, MemoryStatus>> debug5 = (Set<Pair<MemoryModuleType<?>, MemoryStatus>>)ImmutableSet.of((Object)Pair.of((Object)debug4, (Object)MemoryStatus.VALUE_PRESENT));
-        final Set<MemoryModuleType<?>> debug6 = (Set<MemoryModuleType<?>>)ImmutableSet.of((Object)debug4);
+        final Set<Pair<MemoryModuleType<?>, MemoryStatus>> debug5 = ImmutableSet.of(Pair.of(debug4, MemoryStatus.VALUE_PRESENT)); // MagmaCube - decompile fix
+        final Set<MemoryModuleType<?>> debug6 = ImmutableSet.of(debug4); // MagmaCube - decompile fix
         this.addActivityAndRemoveMemoriesWhenStopped(debug1, this.createPriorityPairs(debug2, debug3), debug5, debug6);
     }
     
     public void addActivity(final Activity debug1, final ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>> debug2) {
-        this.addActivityAndRemoveMemoriesWhenStopped(debug1, debug2, (Set<Pair<MemoryModuleType<?>, MemoryStatus>>)ImmutableSet.of(), Sets.newHashSet());
+        this.addActivityAndRemoveMemoriesWhenStopped(debug1, debug2, ImmutableSet.of(), Sets.newHashSet()); // MagmaCube - decompile fix
     }
     
     public void addActivityWithConditions(final Activity debug1, final ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>> debug2, final Set<Pair<MemoryModuleType<?>, MemoryStatus>> debug3) {
@@ -305,7 +306,7 @@ public class Brain<E extends LivingEntity>
     }
     
     public Brain<E> copyWithoutBehaviors() {
-        final Brain<E> debug1 = new Brain<E>(this.memories.keySet(), this.sensors.keySet(), (ImmutableList<MemoryValue<?>>)ImmutableList.of(), this.codec);
+        final Brain<E> debug1 = new Brain<E>(this.memories.keySet(), this.sensors.keySet(), ImmutableList.of(), this.codec); // MagmaCube - decompile fix
         for (final Map.Entry<MemoryModuleType<?>, Optional<? extends ExpirableValue<?>>> debug2 : this.memories.entrySet()) {
             final MemoryModuleType<?> debug3 = debug2.getKey();
             if (debug2.getValue().isPresent()) {
@@ -324,7 +325,7 @@ public class Brain<E extends LivingEntity>
     
     private void tickSensors(final ServerLevel debug1, final E debug2) {
         for (final Sensor<? super E> debug3 : this.sensors.values()) {
-            debug3.tick(debug1, (Object)debug2);
+            debug3.tick(debug1, debug2); // MagmaCube - decompile fix
         }
     }
     
@@ -344,7 +345,7 @@ public class Brain<E extends LivingEntity>
     public void stopAll(final ServerLevel debug1, final E debug2) {
         final long debug3 = debug2.level.getGameTime();
         for (final Behavior<? super E> debug4 : this.getRunningBehaviors()) {
-            debug4.doStop(debug1, (Object)debug2, debug3);
+            debug4.doStop(debug1, debug2, debug3); // MagmaCube - decompile fix
         }
     }
     
@@ -357,7 +358,7 @@ public class Brain<E extends LivingEntity>
                     final Set<Behavior<? super E>> debug7 = debug5.getValue();
                     for (final Behavior<? super E> debug8 : debug7) {
                         if (debug8.getStatus() == Behavior.Status.STOPPED) {
-                            debug8.tryStart(debug1, (Object)debug2, debug3);
+                            debug8.tryStart(debug1, debug2, debug3); // MagmaCube - decompile fix
                         }
                     }
                 }
@@ -368,7 +369,7 @@ public class Brain<E extends LivingEntity>
     private void tickEachRunningBehavior(final ServerLevel debug1, final E debug2) {
         final long debug3 = debug1.getGameTime();
         for (final Behavior<? super E> debug4 : this.getRunningBehaviors()) {
-            debug4.tickOrStop(debug1, (Object)debug2, debug3);
+            debug4.tickOrStop(debug1, debug2, debug3); // MagmaCube - decompile fix
         }
     }
     
@@ -392,9 +393,9 @@ public class Brain<E extends LivingEntity>
     
     ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>> createPriorityPairs(final int debug1, final ImmutableList<? extends Behavior<? super E>> debug2) {
         int debug3 = debug1;
-        final ImmutableList.Builder<Pair<Integer, ? extends Behavior<? super E>>> debug4 = (ImmutableList.Builder<Pair<Integer, ? extends Behavior<? super E>>>)ImmutableList.builder();
+        final ImmutableList.Builder<Pair<Integer, ? extends Behavior<? super E>>> debug4 = ImmutableList.builder(); // MagmaCube - decompile fix
         for (final Behavior<? super E> debug5 : debug2) {
-            debug4.add((Object)Pair.of((Object)(debug3++), (Object)debug5));
+            debug4.add(Pair.of(debug3++, debug5)); // MagmaCube - decompile fix
         }
         return (ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>>)debug4.build();
     }
@@ -416,7 +417,7 @@ public class Brain<E extends LivingEntity>
         }
         
         public Brain<E> makeBrain(final Dynamic<?> debug1) {
-            return this.codec.parse((Dynamic)debug1).resultOrPartial((Consumer)Brain.LOGGER::error).orElseGet(() -> new Brain(this.memoryTypes, (Collection<? extends SensorType<? extends Sensor<? super LivingEntity>>>)this.sensorTypes, (ImmutableList<MemoryValue<?>>)ImmutableList.of(), () -> this.codec));
+            return this.codec.parse(debug1).resultOrPartial(Brain.LOGGER::error).orElseGet(() -> new Brain(this.memoryTypes, this.sensorTypes, ImmutableList.of(), () -> this.codec)); // MagmaCube - decompile fix
         }
     }
     
@@ -439,7 +440,7 @@ public class Brain<E extends LivingEntity>
         }
         
         public <T> void serialize(final DynamicOps<T> debug1, final RecordBuilder<T> debug2) {
-            this.type.getCodec().ifPresent(debug3 -> this.value.ifPresent(debug4 -> debug2.add(Registry.MEMORY_MODULE_TYPE.encodeStart((DynamicOps)debug1, (Object)this.type), debug3.encodeStart((DynamicOps)debug1, (Object)debug4))));
+            this.type.getCodec().ifPresent(debug3 -> this.value.ifPresent(debug4 -> debug2.add(Registry.MEMORY_MODULE_TYPE.encodeStart((DynamicOps)debug1, this.type), debug3.encodeStart((DynamicOps)debug1, debug4)))); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
index 523f1d0d816ef736b98f2e9825d4fbd509c34a3d..2a9494c3eee753a28dad9721fedd344d42037efe 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
@@ -159,7 +159,7 @@ public class AttributeInstance
         this.permanentModifiers.clear();
         this.permanentModifiers.addAll(debug1.permanentModifiers);
         this.modifiersByOperation.clear();
-        debug1.modifiersByOperation.forEach((debug1, debug2) -> this.getModifiers(debug1).addAll(debug2));
+        debug1.modifiersByOperation.forEach((debug1l, debug2) -> this.getModifiers(debug1l).addAll(debug2)); // MagmaCube - decompile fix
         this.setDirty();
     }
     
@@ -170,7 +170,7 @@ public class AttributeInstance
         if (!this.permanentModifiers.isEmpty()) {
             final ListTag debug2 = new ListTag();
             for (final AttributeModifier debug3 : this.permanentModifiers) {
-                ((AbstractList<CompoundTag>)debug2).add(debug3.save());
+                debug2.add(debug3.save()); // MagmaCube - decompile fix
             }
             debug1.put("Modifiers", debug2);
         }
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java
index 87bd8ef59a9e360bb9bcd594b30a5b4aeb1e4910..88d4fe50311a027e3e8f7302bec9946642e97b0b 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java
@@ -126,9 +126,9 @@ public class AttributeMap {
             CompoundTag debug3 = debug1.getCompound(debug22);
             String debug4 = debug3.getString("Name");
             Util.ifElse(Registry.ATTRIBUTE.getOptional(ResourceLocation.tryParse(debug4)), debug2 -> {
-                AttributeInstance debug3 = this.getInstance((Attribute)debug2);
-                if (debug3 != null) {
-                    debug3.load(debug3);
+                AttributeInstance debug3l = this.getInstance((Attribute)debug2); // MagmaCube - decompile fix
+                if (debug3l != null) { // MagmaCube - decompile fix
+                    debug3l.load(debug3); // MagmaCube - decompile fix
                 }
             }, () -> LOGGER.warn("Ignoring unknown attribute '{}'", (Object)debug4));
         }
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java
index af6e39a19ad3122b384afd104f6c5e9f9c8e0297..2318552363eaf7d65556f546ee944e72fb89f087 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java
@@ -69,7 +69,7 @@ public class AttributeModifier
     
     @Override
     public String toString() {
-        return "AttributeModifier{amount=" + this.amount + ", operation=" + this.operation + ", name='" + this.nameGetter.get() + 'Â¥'' + ", id=" + this.id + '}';
+        return "AttributeModifier{amount=" + this.amount + ", operation=" + this.operation + ", name='" + this.nameGetter.get() + '\'' + ", id=" + this.id + '}'; // MagmaCube - decompile fix
     }
     
     public CompoundTag save() {
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeSupplier.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeSupplier.java
index 169ad662722db3ff01b6d8c9a0ba49d23b7e2d6e..e98064bd0a6592dc218c4cb2d9f1b1804a5e22a3 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeSupplier.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeSupplier.java
@@ -70,15 +70,14 @@ public class AttributeSupplier
         private boolean instanceFrozen;
         
         public Builder() {
-            this.builder = (Map<Attribute, AttributeInstance>)Maps.newHashMap();
+            this.builder = Maps.newHashMap(); // MagmaCube - decompile fix
         }
         
         private AttributeInstance create(final Attribute debug1) {
             final UnsupportedOperationException ex;
-            final AttributeInstance debug2 = new AttributeInstance(debug1, debug2 -> {
+            final AttributeInstance debug2 = new AttributeInstance(debug1, debug2l -> {
                 if (this.instanceFrozen) {
-                    new UnsupportedOperationException("Tried to change value for default attribute instance: " + Registry.ATTRIBUTE.getKey(debug1));
-                    throw ex;
+                    throw new UnsupportedOperationException("Tried to change value for default attribute instance: " + Registry.ATTRIBUTE.getKey(debug1)); // MagmaCube - decompile fix
                 }
                 else {
                     return;
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/CrossbowAttack.java b/src/main/java/net/minecraft/world/entity/ai/behavior/CrossbowAttack.java
index 1ef371f9bb4d4b86e463463154acbcba046520dd..ff1ca5771406e9d16dd186cb4493a2ad5d08eb3c 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/CrossbowAttack.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/CrossbowAttack.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.ai.behavior;
 
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.entity.monster.RangedAttackMob;
 import net.minecraft.world.entity.projectile.ProjectileUtil;
@@ -87,7 +88,7 @@ public class CrossbowAttack<E extends Mob, T extends LivingEntity> extends Behav
     }
     
     private void lookAtTarget(final Mob debug1, final LivingEntity debug2) {
-        debug1.getBrain().setMemory((MemoryModuleType<EntityTracker>)MemoryModuleType.LOOK_TARGET, new EntityTracker(debug2, true));
+        debug1.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, new EntityTracker(debug2, true)); // MagmaCube - decompile fix
     }
     
     private static LivingEntity getAttackTarget(final LivingEntity debug0) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
index d37979b3727be2461df9cfc058c8bc8d4c86b3bd..8371f429c6d6a9f26e56d515b49d851f916ffced 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.ai.goal;
 
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.projectile.ProjectileUtil;
 import net.minecraft.world.item.BowItem;
 import net.minecraft.world.entity.monster.RangedAttackMob;
@@ -23,7 +24,7 @@ public class RangedBowAttackGoal<T extends Monster> extends Goal
     public RangedBowAttackGoal(final T debug1, final double debug2, final int debug4, final float debug5) {
         this.attackTime = -1;
         this.strafingTime = -1;
-        this.mob = (Monster)debug1;
+        this.mob = debug1; // MagmaCube - decompile fix
         this.speedModifier = debug2;
         this.attackIntervalMin = debug4;
         this.attackRadiusSqr = debug5 * debug5;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java
index de18ce1291c3d71ca2258ba6901a9d53e508a698..1ac204ca17643a7c3561ab452ddbe7a9221d662e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.entity.ai.goal;
 
+import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.entity.monster.RangedAttackMob;
 import net.minecraft.world.entity.projectile.ProjectileUtil;
@@ -11,7 +12,7 @@ import net.minecraft.world.item.Items;
 import java.util.EnumSet;
 import net.minecraft.util.IntRange;
 
-public class RangedCrossbowAttackGoal<T extends Monster> extends Goal
+public class RangedCrossbowAttackGoal<T extends Monster> extends Goal // MagmaCube - decompile fix
 {
     public static final IntRange PATHFINDING_DELAY_RANGE;
     private final T mob;
@@ -24,7 +25,7 @@ public class RangedCrossbowAttackGoal<T extends Monster> extends Goal
     
     public RangedCrossbowAttackGoal(final T debug1, final double debug2, final float debug4) {
         this.crossbowState = CrossbowState.UNCHARGED;
-        this.mob = (Monster)debug1;
+        this.mob = (T) debug1; // MagmaCube - decompile fix
         this.speedModifier = debug2;
         this.attackRadiusSqr = debug4 * debug4;
         this.setFlags(EnumSet.of(Flag.MOVE, Flag.LOOK));
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/ResetUniversalAngerTargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/ResetUniversalAngerTargetGoal.java
index e19647715519fbdeb4d95ed8ffe892ce58f8047a..11990610b110df1c6ca1f6042daa362eb94b3a23 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/ResetUniversalAngerTargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/ResetUniversalAngerTargetGoal.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.entity.ai.goal.target;
 
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import java.util.List;
@@ -15,7 +16,7 @@ public class ResetUniversalAngerTargetGoal<T extends Mob> extends Goal
     private int lastHurtByPlayerTimestamp;
     
     public ResetUniversalAngerTargetGoal(final T debug1, final boolean debug2) {
-        this.mob = (Mob)debug1;
+        this.mob = debug1; // MagmaCube - decompile fix
         this.alertOthersOfSameType = debug2;
     }
     
@@ -33,7 +34,7 @@ public class ResetUniversalAngerTargetGoal<T extends Mob> extends Goal
         this.lastHurtByPlayerTimestamp = this.mob.getLastHurtByMobTimestamp();
         ((NeutralMob)this.mob).forgetCurrentTargetAndRefreshUniversalAnger();
         if (this.alertOthersOfSameType) {
-            this.getNearbyMobsOfSameType().stream().filter(debug1 -> debug1 != this.mob).map(debug0 -> debug0).forEach(NeutralMob::forgetCurrentTargetAndRefreshUniversalAnger);
+            this.getNearbyMobsOfSameType().stream().filter(debug1 -> debug1 != this.mob).map(debug0 -> (NeutralMob) debug0).forEach(NeutralMob::forgetCurrentTargetAndRefreshUniversalAnger); // MagmaCube - decompile fix
         }
         super.start();
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index df9cbdc281b58e415666c3d7745b8cd843684837..b67fe213ebf12b260ed457c82704d91279d7d368 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -460,7 +460,7 @@ FlyingAnimal {
         if (debug2) {
             this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) | debug1));
         } else {
-            this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) & â¾debug1));
+            this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) & debug1)); // MagmaCube - decompile fix
         }
     }
 
@@ -591,11 +591,6 @@ FlyingAnimal {
         return debug1.closerThan(this.blockPosition(), (double)debug2);
     }
 
-    @Override
-    public /* synthetic */ AgableMob getBreedOffspring(ServerLevel serverLevel, AgableMob agableMob) {
-        return this.getBreedOffspring(serverLevel, agableMob);
-    }
-
     class BeeEnterHiveGoal
     extends BaseBeeGoal {
         private BeeEnterHiveGoal() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index 4ed9f9cc2ce3837b615afcfb3485eb8b4939a32a..159aaeddd5ce227eaad75b18776189b1eabb87f2 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -61,9 +61,7 @@ import net.minecraft.world.entity.animal.Rabbit;
 import net.minecraft.world.entity.animal.Turtle;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.item.DyeColor;
-import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.item.Items;
+import net.minecraft.world.item.*;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
@@ -370,30 +368,57 @@ extends TamableAnimal {
         return debug4;
     }
 
-    /*
-     * Exception decompiling
-     */
     @Override
     public InteractionResult mobInteract(Player debug1, InteractionHand debug2) {
-        /*
-         * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
-         * org.benf.cfr.reader.util.ConfusedCFRException: Started 2 blocks at once
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.getStartingBlocks(Op04StructuredStatement.java:406)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:481)
-         * org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:728)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:806)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:258)
-         * org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:192)
-         * org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:94)
-         * org.benf.cfr.reader.entities.Method.analyse(Method.java:521)
-         * org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:1035)
-         * org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:922)
-         * org.benf.cfr.reader.Driver.doJarVersionTypes(Driver.java:253)
-         * org.benf.cfr.reader.Driver.doJar(Driver.java:135)
-         * org.benf.cfr.reader.CfrDriverImpl.analyse(CfrDriverImpl.java:65)
-         * org.benf.cfr.reader.Main.main(Main.java:49)
-         */
-        throw new IllegalStateException(Decompilation failed);
+        // MagmaCube start - decompile fix
+        ItemStack debug3 = debug1.getItemInHand(debug2);
+        Item debug4 = debug3.getItem();
+        if (this.level.isClientSide) {
+            if (isTame() && isOwnedBy((LivingEntity)debug1))
+                return InteractionResult.SUCCESS;
+            if (isFood(debug3) && (getHealth() < getMaxHealth() || !isTame()))
+                return InteractionResult.SUCCESS;
+            return InteractionResult.PASS;
+        }
+        if (isTame()) {
+            if (isOwnedBy((LivingEntity)debug1))
+                if (debug4 instanceof DyeItem) {
+                    DyeColor dyeColor = ((DyeItem)debug4).getDyeColor();
+                    if (dyeColor != getCollarColor()) {
+                        setCollarColor(dyeColor);
+                        if (!debug1.abilities.instabuild)
+                            debug3.shrink(1);
+                        setPersistenceRequired();
+                        return InteractionResult.CONSUME;
+                    }
+                } else {
+                    if (debug4.isEdible() && isFood(debug3) && getHealth() < getMaxHealth()) {
+                        usePlayerItem(debug1, debug3);
+                        heal(debug4.getFoodProperties().getNutrition());
+                        return InteractionResult.CONSUME;
+                    }
+                    InteractionResult interactionResult = super.mobInteract(debug1, debug2);
+                    if (!interactionResult.consumesAction() || isBaby())
+                        setOrderedToSit(!isOrderedToSit());
+                    return interactionResult;
+                }
+        } else if (isFood(debug3)) {
+            usePlayerItem(debug1, debug3);
+            if (this.random.nextInt(3) == 0) {
+                tame(debug1);
+                setOrderedToSit(true);
+                this.level.broadcastEntityEvent((Entity)this, (byte)7);
+            } else {
+                this.level.broadcastEntityEvent((Entity)this, (byte)6);
+            }
+            setPersistenceRequired();
+            return InteractionResult.CONSUME;
+        }
+        InteractionResult debug5 = super.mobInteract(debug1, debug2);
+        if (debug5.consumesAction())
+            setPersistenceRequired();
+        return debug5;
+        // MagmaCube end - decompile fix
     }
 
     @Override
@@ -422,11 +447,6 @@ extends TamableAnimal {
         }
     }
 
-    @Override
-    public /* synthetic */ AgableMob getBreedOffspring(ServerLevel serverLevel, AgableMob agableMob) {
-        return this.getBreedOffspring(serverLevel, agableMob);
-    }
-
     static class CatRelaxOnOwnerGoal
     extends Goal {
         private final Cat cat;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index 6aa9fb747a0b63533c6a4b8c22ce27d6edfa31a8..bb853f48171fbe7254694a7f6be6cb8cd4291d7a 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -398,7 +398,7 @@ extends Animal {
         if (debug2) {
             this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) | debug1));
         } else {
-            this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) & â¾debug1));
+            this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) & debug1)); // MagmaCube - decompile fix
         }
     }
 
@@ -633,11 +633,6 @@ extends Animal {
         return new Vec3(0.0, 0.55f * this.getEyeHeight(), this.getBbWidth() * 0.4f);
     }
 
-    @Override
-    public /* synthetic */ AgableMob getBreedOffspring(ServerLevel serverLevel, AgableMob agableMob) {
-        return this.getBreedOffspring(serverLevel, agableMob);
-    }
-
     class FoxLookAtPlayerGoal
     extends LookAtPlayerGoal {
         public FoxLookAtPlayerGoal(Mob debug2, Class<? extends LivingEntity> debug3, float debug4) {
@@ -1099,11 +1094,6 @@ extends Animal {
             }
             return !debug1.isSleeping() && !debug1.isDiscrete();
         }
-
-        @Override
-        public /* synthetic */ boolean test(Object object) {
-            return this.test((LivingEntity)object);
-        }
     }
 
     class SeekShelterGoal
diff --git a/src/main/java/net/minecraft/world/entity/animal/Panda.java b/src/main/java/net/minecraft/world/entity/animal/Panda.java
index 8dde8f19e6097f4080e0e6acb0254cc4f20e95c2..ba91cb094786ca18e5d7c0ef96ee14420aaa3e95 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Panda.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Panda.java
@@ -213,7 +213,7 @@ public class Panda extends Animal
             this.entityData.set(Panda.DATA_ID_FLAGS, (byte)(debug3 | debug1));
         }
         else {
-            this.entityData.set(Panda.DATA_ID_FLAGS, (byte)(debug3 & â¾debug1));
+            this.entityData.set(Panda.DATA_ID_FLAGS, (byte)(debug3 & debug1)); // MagmaCube - decompile fix
         }
     }
     
@@ -249,8 +249,8 @@ public class Panda extends Animal
         this.goalSelector.addGoal(2, new PandaBreedGoal(this, 1.0));
         this.goalSelector.addGoal(3, new PandaAttackGoal(this, 1.2000000476837158, true));
         this.goalSelector.addGoal(4, new TemptGoal(this, 1.0, Ingredient.of(Blocks.BAMBOO.asItem()), false));
-        this.goalSelector.addGoal(6, new PandaAvoidGoal<Object>(this, Player.class, 8.0f, 2.0, 2.0));
-        this.goalSelector.addGoal(6, new PandaAvoidGoal<Object>(this, Monster.class, 4.0f, 2.0, 2.0));
+        this.goalSelector.addGoal(6, new PandaAvoidGoal<>(this, Player.class, 8.0f, 2.0, 2.0)); // MagmaCube - decompile fix
+        this.goalSelector.addGoal(6, new PandaAvoidGoal<>(this, Monster.class, 4.0f, 2.0, 2.0)); // MagmaCube - decompile fix
         this.goalSelector.addGoal(7, new PandaSitGoal());
         this.goalSelector.addGoal(8, new PandaLieOnBackGoal(this));
         this.goalSelector.addGoal(8, new PandaSneezeGoal(this));
@@ -268,7 +268,7 @@ public class Panda extends Animal
     }
     
     public Gene getVariant() {
-        return getVariantFromGenes(this.getMainGene(), this.getHiddenGene());
+        return Gene.getVariantFromGenes(this.getMainGene(), this.getHiddenGene()); // MagmaCube - decompile fix
     }
     
     public boolean isLazy() {
@@ -650,9 +650,8 @@ public class Panda extends Animal
         HIDDEN_GENE_ID = SynchedEntityData.defineId(Panda.class, EntityDataSerializers.BYTE);
         DATA_ID_FLAGS = SynchedEntityData.defineId(Panda.class, EntityDataSerializers.BYTE);
         BREED_TARGETING = new TargetingConditions().range(8.0).allowSameTeam().allowInvulnerable();
-        final Item debug;
         PANDA_ITEMS = (debug0 -> {
-            debug = debug0.getItem().getItem();
+            Item debug = debug0.getItem().getItem(); // MagmaCube - decompile fix
             return (debug == Blocks.BAMBOO.asItem() || debug == Blocks.CAKE.asItem()) && debug0.isAlive() && !debug0.hasPickUpDelay();
         });
     }
@@ -805,7 +804,7 @@ public class Panda extends Animal
                     this.lookAt = this.mob.level.getNearestPlayer(this.lookAtContext, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
                 }
                 else {
-                    this.lookAt = this.mob.level.getNearestLoadedEntity((Class<? extends Entity>)this.lookAtType, this.lookAtContext, (LivingEntity)this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ(), this.mob.getBoundingBox().inflate(this.lookDistance, 3.0, this.lookDistance));
+                    this.lookAt = this.mob.level.getNearestLoadedEntity(this.lookAtType, this.lookAtContext, (LivingEntity)this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ(), this.mob.getBoundingBox().inflate(this.lookDistance, 3.0, this.lookDistance)); // MagmaCube - decompile fix
                 }
             }
             return this.panda.canPerformAction() && this.lookAt != null;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Sheep.java b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
index c19ca58a0f207b3298d709f36012279fa0d1db57..b0ff380185e08d693a592d2d7fd609f3af385d45 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Sheep.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
@@ -391,10 +391,5 @@ implements Shearable {
     protected float getStandingEyeHeight(Pose debug1, EntityDimensions debug2) {
         return 0.95f * debug2.height;
     }
-
-    @Override
-    public /* synthetic */ AgableMob getBreedOffspring(ServerLevel serverLevel, AgableMob agableMob) {
-        return this.getBreedOffspring(serverLevel, agableMob);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index 37654b618912cecadd746a644d688ed817890e2e..037e5b54cbbf4ed14c598739d0ab710c5f27e209 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -90,7 +90,7 @@ public class Wolf extends TamableAnimal implements NeutralMob
     protected void registerGoals() {
         this.goalSelector.addGoal(1, new FloatGoal(this));
         this.goalSelector.addGoal(2, new SitWhenOrderedToGoal(this));
-        this.goalSelector.addGoal(3, new WolfAvoidEntityGoal<Object>(this, Llama.class, 24.0f, 1.5, 1.5));
+        this.goalSelector.addGoal(3, new WolfAvoidEntityGoal<>(this, Llama.class, 24.0f, 1.5, 1.5)); // MagmaCube - decompile fix
         this.goalSelector.addGoal(4, new LeapAtTargetGoal(this, 0.4f));
         this.goalSelector.addGoal(5, new MeleeAttackGoal(this, 1.0, true));
         this.goalSelector.addGoal(6, new FollowOwnerGoal(this, 1.0, 10.0f, 2.0f, false));
@@ -102,11 +102,11 @@ public class Wolf extends TamableAnimal implements NeutralMob
         this.targetSelector.addGoal(1, new OwnerHurtByTargetGoal(this));
         this.targetSelector.addGoal(2, new OwnerHurtTargetGoal(this));
         this.targetSelector.addGoal(3, new HurtByTargetGoal(this, (Class<?>[])new Class[0]).setAlertOthers((Class<?>[])new Class[0]));
-        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<Object>(this, Player.class, 10, true, false, this::isAngryAt));
-        this.targetSelector.addGoal(5, new NonTameRandomTargetGoal<Object>(this, Animal.class, false, Wolf.PREY_SELECTOR));
-        this.targetSelector.addGoal(6, new NonTameRandomTargetGoal<Object>(this, Turtle.class, false, Turtle.BABY_ON_LAND_SELECTOR));
-        this.targetSelector.addGoal(7, new NearestAttackableTargetGoal<Object>(this, AbstractSkeleton.class, false));
-        this.targetSelector.addGoal(8, new ResetUniversalAngerTargetGoal<Object>(this, true));
+        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(5, new NonTameRandomTargetGoal<>(this, Animal.class, false, Wolf.PREY_SELECTOR)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(6, new NonTameRandomTargetGoal<>(this, Turtle.class, false, Turtle.BABY_ON_LAND_SELECTOR)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(7, new NearestAttackableTargetGoal<>(this, AbstractSkeleton.class, false)); // MagmaCube - decompile fix
+        this.targetSelector.addGoal(8, new ResetUniversalAngerTargetGoal<>(this, true)); // MagmaCube - decompile fix
     }
     
     public static AttributeSupplier.Builder createAttributes() {
@@ -503,9 +503,8 @@ public class Wolf extends TamableAnimal implements NeutralMob
         DATA_INTERESTED_ID = SynchedEntityData.defineId(Wolf.class, EntityDataSerializers.BOOLEAN);
         DATA_COLLAR_COLOR = SynchedEntityData.defineId(Wolf.class, EntityDataSerializers.INT);
         DATA_REMAINING_ANGER_TIME = SynchedEntityData.defineId(Wolf.class, EntityDataSerializers.INT);
-        final EntityType<?> debug;
         PREY_SELECTOR = (debug0 -> {
-            debug = debug0.getType();
+            EntityType<?> debug = debug0.getType(); // MagmaCube - decompile fix
             return debug == EntityType.SHEEP || debug == EntityType.RABBIT || debug == EntityType.FOX;
         });
         PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
index 9e8b21e676bae72ae928b8480a0a6c56386a119b..71959d991fe3d559109984c913c37fa8fae1cce3 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -140,7 +140,7 @@ Saddleable {
         if (debug2) {
             this.entityData.set(DATA_ID_FLAGS, (byte)(debug3 | debug1));
         } else {
-            this.entityData.set(DATA_ID_FLAGS, (byte)(debug3 & â¾debug1));
+            this.entityData.set(DATA_ID_FLAGS, (byte)(debug3 & debug1)); // MagmaCube - decompile fix
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
index da1eeb0542bcbaaaab5462bb54c2c1b81c54fca9..611da9b761cdcc6db2bdb14b6c61d09d7e7d7a4d 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
@@ -211,7 +211,7 @@ public class ArmorStand extends LivingEntity
             if (!debug3.isEmpty()) {
                 debug3.save(debug4);
             }
-            ((AbstractList<CompoundTag>)debug2).add(debug4);
+            debug2.add(debug4); // MagmaCube - decompile fix
         }
         debug1.put("ArmorItems", debug2);
         final ListTag debug5 = new ListTag();
@@ -220,7 +220,7 @@ public class ArmorStand extends LivingEntity
             if (!debug6.isEmpty()) {
                 debug6.save(debug7);
             }
-            ((AbstractList<CompoundTag>)debug5).add(debug7);
+            debug5.add(debug7); // MagmaCube - decompile fix
         }
         debug1.put("HandItems", debug5);
         debug1.putBoolean("Invisible", this.isInvisible());
@@ -675,7 +675,7 @@ public class ArmorStand extends LivingEntity
             debug1 |= (byte)debug2;
         }
         else {
-            debug1 &= (byte)â¾debug2;
+            debug1 &= (byte)debug2; // MagmaCube - decompile fix
         }
         return debug1;
     }
@@ -839,6 +839,6 @@ public class ArmorStand extends LivingEntity
         DATA_RIGHT_ARM_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
         DATA_LEFT_LEG_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
         DATA_RIGHT_LEG_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
-        RIDABLE_MINECARTS = (debug0 -> debug0 instanceof AbstractMinecart && debug0.getMinecartType() == AbstractMinecart.Type.RIDEABLE);
+        RIDABLE_MINECARTS = (debug0 -> debug0 instanceof AbstractMinecart && ((AbstractMinecart) debug0).getMinecartType() == AbstractMinecart.Type.RIDEABLE); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vex.java b/src/main/java/net/minecraft/world/entity/monster/Vex.java
index d781c924a50945578203095f74cea5eeb01b71c3..c1786ca28676b3d6090eec99389693c884b8894a 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vex.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vex.java
@@ -84,7 +84,7 @@ public class Vex extends Monster
         this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Mob.class, 8.0f));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, (Class<?>[])new Class[] { Raider.class }).setAlertOthers((Class<?>[])new Class[0]));
         this.targetSelector.addGoal(2, new VexCopyOwnerTargetGoal(this));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<Object>(this, Player.class, true));
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Player.class, true)); // MagmaCube - decompile fix
     }
     
     public static AttributeSupplier.Builder createAttributes() {
@@ -145,7 +145,7 @@ public class Vex extends Monster
             debug3 |= debug1;
         }
         else {
-            debug3 &= â¾debug1;
+            debug3 &= debug1; // MagmaCube - decompile fix
         }
         this.entityData.set(Vex.DATA_FLAGS_ID, (byte)(debug3 & 0xFF));
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
index 31c849e57c2c43d385d6a4e426242f2d74034856..ae55ed654a1d0dc4b5bf4d52603816871b803f9b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
@@ -73,7 +73,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder
     @Override
     public void addAdditionalSaveData(final CompoundTag debug1) {
         super.addAdditionalSaveData(debug1);
-        VillagerData.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, (Object)this.getVillagerData()).resultOrPartial((Consumer)ZombieVillager.LOGGER::error).ifPresent(debug1 -> debug1.put("VillagerData", debug1));
+        VillagerData.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, this.getVillagerData()).resultOrPartial((Consumer)ZombieVillager.LOGGER::error).ifPresent(debug1k -> debug1.put("VillagerData", debug1)); // MagmaCube - decompile fix
         if (this.tradeOffers != null) {
             debug1.put("Offers", this.tradeOffers);
         }
@@ -92,7 +92,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder
         super.readAdditionalSaveData(debug1);
         if (debug1.contains("VillagerData", 10)) {
             final DataResult<VillagerData> debug2 = (DataResult<VillagerData>)VillagerData.CODEC.parse(new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug1.get("VillagerData")));
-            debug2.resultOrPartial((Consumer)ZombieVillager.LOGGER::error).ifPresent(this::setVillagerData);
+            debug2.resultOrPartial(ZombieVillager.LOGGER::error).ifPresent(this::setVillagerData); // MagmaCube - decompile fix
         }
         if (debug1.contains("Offers", 10)) {
             this.tradeOffers = debug1.getCompound("Offers");
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 289ac147428519b97ceeb42346ac8fed17562d80..41a31b3c59d6e5abf11e78e85cda912da5bf7f25 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -18,6 +18,7 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.DynamicOps;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
@@ -33,6 +34,7 @@ import net.minecraft.core.GlobalPos;
 import net.minecraft.core.Registry;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
@@ -110,8 +112,8 @@ extends AbstractVillager
 implements ReputationEventHandler,
 VillagerDataHolder {
     private static final EntityDataAccessor<VillagerData> DATA_VILLAGER_DATA = SynchedEntityData.defineId(Villager.class, EntityDataSerializers.VILLAGER_DATA);
-    public static final Map<Item, Integer> FOOD_POINTS = ImmutableMap.of((Object)Items.BREAD, (Object)4, (Object)Items.POTATO, (Object)1, (Object)Items.CARROT, (Object)1, (Object)Items.BEETROOT, (Object)1);
-    private static final Set<Item> WANTED_ITEMS = ImmutableSet.of((Object)Items.BREAD, (Object)Items.POTATO, (Object)Items.CARROT, (Object)Items.WHEAT, (Object)Items.WHEAT_SEEDS, (Object)Items.BEETROOT, (Object[])new Item[]{Items.BEETROOT_SEEDS});
+    public static final Map<Item, Integer> FOOD_POINTS = ImmutableMap.of(Items.BREAD, 4, Items.POTATO, 1, Items.CARROT, 1, Items.BEETROOT, 1); // MagmaCube - decompile fix
+    private static final Set<Item> WANTED_ITEMS = ImmutableSet.of(Items.BREAD, Items.POTATO, Items.CARROT, Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT, new Item[]{Items.BEETROOT_SEEDS}); // MagmaCube - decompile fix
     private int updateMerchantTimer;
     private boolean increaseProfessionLevelOnUpdate;
     @Nullable
@@ -125,7 +127,7 @@ VillagerDataHolder {
     private int numberOfRestocksToday;
     private long lastRestockCheckDayTime;
     private boolean assignProfessionWhenSpawned;
-    private static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.WALK_TARGET, (Object[])new MemoryModuleType[]{MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, MemoryModuleType.PATH, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.LAST_SLEPT, MemoryModuleType.LAST_WOKEN, MemoryModuleType.LAST_WORKED_AT_POI, MemoryModuleType.GOLEM_DETECTED_RECENTLY});
+    private static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.WALK_TARGET, new MemoryModuleType[]{MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, MemoryModuleType.PATH, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.LAST_SLEPT, MemoryModuleType.LAST_WOKEN, MemoryModuleType.LAST_WORKED_AT_POI, MemoryModuleType.GOLEM_DETECTED_RECENTLY}); // MagmaCube - decompile fix
     private static final ImmutableList<SensorType<? extends Sensor<? super Villager>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_BED, SensorType.HURT_BY, SensorType.VILLAGER_HOSTILES, SensorType.VILLAGER_BABIES, SensorType.SECONDARY_POIS, SensorType.GOLEM_DETECTED);
     public static final Map<MemoryModuleType<GlobalPos>, BiPredicate<Villager, PoiType>> POI_MEMORIES = ImmutableMap.of(MemoryModuleType.HOME, (debug0, debug1) -> debug1 == PoiType.HOME, MemoryModuleType.JOB_SITE, (debug0, debug1) -> debug0.getVillagerData().getProfession().getJobPoiType() == debug1, MemoryModuleType.POTENTIAL_JOB_SITE, (debug0, debug1) -> PoiType.ALL_JOBS.test((PoiType)debug1), MemoryModuleType.MEETING_POINT, (debug0, debug1) -> debug1 == PoiType.MEETING);
 
@@ -142,7 +144,7 @@ VillagerDataHolder {
     }
 
     public Brain<Villager> getBrain() {
-        return super.getBrain();
+        return (Brain<Villager>) super.getBrain(); // MagmaCube - decompile fix
     }
 
     protected Brain.Provider<Villager> brainProvider() {
@@ -170,17 +172,17 @@ VillagerDataHolder {
             debug1.addActivity(Activity.PLAY, VillagerGoalPackages.getPlayPackage(0.5f));
         } else {
             debug1.setSchedule(Schedule.VILLAGER_DEFAULT);
-            debug1.addActivityWithConditions(Activity.WORK, (ImmutableList<Pair<Integer, Behavior<Villager>>>)VillagerGoalPackages.getWorkPackage(debug2, 0.5f), (Set<Pair<MemoryModuleType<?>, MemoryStatus>>)ImmutableSet.of((Object)Pair.of(MemoryModuleType.JOB_SITE, (Object)((Object)MemoryStatus.VALUE_PRESENT))));
+            debug1.addActivityWithConditions(Activity.WORK, VillagerGoalPackages.getWorkPackage(debug2, 0.5f), ImmutableSet.of(Pair.of(MemoryModuleType.JOB_SITE, MemoryStatus.VALUE_PRESENT))); // MagmaCube - decompile fix
         }
         debug1.addActivity(Activity.CORE, VillagerGoalPackages.getCorePackage(debug2, 0.5f));
-        debug1.addActivityWithConditions(Activity.MEET, (ImmutableList<Pair<Integer, Behavior<Villager>>>)VillagerGoalPackages.getMeetPackage(debug2, 0.5f), (Set<Pair<MemoryModuleType<?>, MemoryStatus>>)ImmutableSet.of((Object)Pair.of(MemoryModuleType.MEETING_POINT, (Object)((Object)MemoryStatus.VALUE_PRESENT))));
+        debug1.addActivityWithConditions(Activity.MEET, VillagerGoalPackages.getMeetPackage(debug2, 0.5f), ImmutableSet.of(Pair.of(MemoryModuleType.MEETING_POINT, MemoryStatus.VALUE_PRESENT))); // MagmaCube - decompile fix
         debug1.addActivity(Activity.REST, VillagerGoalPackages.getRestPackage(debug2, 0.5f));
         debug1.addActivity(Activity.IDLE, VillagerGoalPackages.getIdlePackage(debug2, 0.5f));
         debug1.addActivity(Activity.PANIC, VillagerGoalPackages.getPanicPackage(debug2, 0.5f));
         debug1.addActivity(Activity.PRE_RAID, VillagerGoalPackages.getPreRaidPackage(debug2, 0.5f));
         debug1.addActivity(Activity.RAID, VillagerGoalPackages.getRaidPackage(debug2, 0.5f));
         debug1.addActivity(Activity.HIDE, VillagerGoalPackages.getHidePackage(debug2, 0.5f));
-        debug1.setCoreActivities((Set<Activity>)ImmutableSet.of((Object)Activity.CORE));
+        debug1.setCoreActivities((Set<Activity>)ImmutableSet.of(Activity.CORE)); // MagmaCube - decompile fix
         debug1.setDefaultActivity(Activity.IDLE);
         debug1.setActiveActivityIfPossible(Activity.IDLE);
         debug1.updateActivityFromSchedule(this.level.getDayTime(), this.level.getGameTime());
@@ -393,7 +395,7 @@ VillagerDataHolder {
     @Override
     public void addAdditionalSaveData(CompoundTag debug12) {
         super.addAdditionalSaveData(debug12);
-        VillagerData.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, (Object)this.getVillagerData()).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("VillagerData", (Tag)debug1));
+        VillagerData.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, this.getVillagerData()).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("VillagerData", (Tag)debug1)); // MagmaCube - decompile fix
         debug12.putByte("FoodLevel", this.foodLevel);
         debug12.put("Gossips", (Tag)this.gossips.store(NbtOps.INSTANCE).getValue());
         debug12.putInt("Xp", this.villagerXp);
@@ -407,10 +409,9 @@ VillagerDataHolder {
 
     @Override
     public void readAdditionalSaveData(CompoundTag debug1) {
-        Object debug2;
         super.readAdditionalSaveData(debug1);
         if (debug1.contains("VillagerData", 10)) {
-            debug2 = VillagerData.CODEC.parse(new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug1.get("VillagerData")));
+            DataResult<VillagerData> debug2 = VillagerData.CODEC.parse(new Dynamic((DynamicOps)NbtOps.INSTANCE, debug1.get("VillagerData"))); // MagmaCube - decompile fix
             debug2.resultOrPartial(((Logger)LOGGER)::error).ifPresent(this::setVillagerData);
         }
         if (debug1.contains("Offers", 10)) {
@@ -419,7 +420,7 @@ VillagerDataHolder {
         if (debug1.contains("FoodLevel", 1)) {
             this.foodLevel = debug1.getByte("FoodLevel");
         }
-        debug2 = debug1.getList("Gossips", 10);
+        ListTag debug2 = debug1.getList("Gossips", 10); // MagmaCube - decompile fix
         this.gossips.update(new Dynamic((DynamicOps)NbtOps.INSTANCE, debug2));
         if (debug1.contains("Xp", 3)) {
             this.villagerXp = debug1.getInt("Xp");
@@ -718,7 +719,7 @@ VillagerDataHolder {
     }
 
     public boolean hasFarmSeeds() {
-        return this.getInventory().hasAnyOf((Set<Item>)ImmutableSet.of((Object)Items.WHEAT_SEEDS, (Object)Items.POTATO, (Object)Items.CARROT, (Object)Items.BEETROOT_SEEDS));
+        return this.getInventory().hasAnyOf((Set<Item>)ImmutableSet.of(Items.WHEAT_SEEDS, Items.POTATO, Items.CARROT, Items.BEETROOT_SEEDS)); // MagmaCube - decompile fix
     }
 
     @Override
@@ -880,10 +881,5 @@ VillagerDataHolder {
         }
         return false;
     }
-
-    @Override
-    public /* synthetic */ AgableMob getBreedOffspring(ServerLevel serverLevel, AgableMob agableMob) {
-        return this.getBreedOffspring(serverLevel, agableMob);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/world/entity/player/Inventory.java b/src/main/java/net/minecraft/world/entity/player/Inventory.java
index 5e5c029ef4dacd10952da206a15def7ba075164d..b08ff86fd1e385df3cd8dfbf2e851cf613f13cb9 100644
--- a/src/main/java/net/minecraft/world/entity/player/Inventory.java
+++ b/src/main/java/net/minecraft/world/entity/player/Inventory.java
@@ -45,7 +45,7 @@ public class Inventory implements Container, Nameable
         this.items = NonNullList.withSize(36, ItemStack.EMPTY);
         this.armor = NonNullList.withSize(4, ItemStack.EMPTY);
         this.offhand = NonNullList.withSize(1, ItemStack.EMPTY);
-        this.compartments = (List<NonNullList<ItemStack>>)ImmutableList.of((Object)this.items, (Object)this.armor, (Object)this.offhand);
+        this.compartments = (List<NonNullList<ItemStack>>)ImmutableList.of(this.items, this.armor, this.offhand); // MagmaCube - decompile fix
         this.carried = ItemStack.EMPTY;
         this.player = debug1;
     }
@@ -380,7 +380,7 @@ public class Inventory implements Container, Nameable
                 final CompoundTag debug3 = new CompoundTag();
                 debug3.putByte("Slot", (byte)debug2);
                 this.items.get(debug2).save(debug3);
-                ((AbstractList<CompoundTag>)debug1).add(debug3);
+                debug1.add(debug3); // MagmaCube - decompile fix
             }
         }
         for (int debug2 = 0; debug2 < this.armor.size(); ++debug2) {
@@ -388,7 +388,7 @@ public class Inventory implements Container, Nameable
                 final CompoundTag debug3 = new CompoundTag();
                 debug3.putByte("Slot", (byte)(debug2 + 100));
                 this.armor.get(debug2).save(debug3);
-                ((AbstractList<CompoundTag>)debug1).add(debug3);
+                debug1.add(debug3); // MagmaCube - decompile fix
             }
         }
         for (int debug2 = 0; debug2 < this.offhand.size(); ++debug2) {
@@ -396,7 +396,7 @@ public class Inventory implements Container, Nameable
                 final CompoundTag debug3 = new CompoundTag();
                 debug3.putByte("Slot", (byte)(debug2 + 150));
                 this.offhand.get(debug2).save(debug3);
-                ((AbstractList<CompoundTag>)debug1).add(debug3);
+                debug1.add(debug3); // MagmaCube - decompile fix
             }
         }
         return debug1;
@@ -484,7 +484,7 @@ public class Inventory implements Container, Nameable
             if (!debug1.isFire() || !debug4.getItem().isFireResistant()) {
                 if (debug4.getItem() instanceof ArmorItem) {
                     final int debug5 = debug3;
-                    debug4.hurtAndBreak((int)debug2, this.player, debug1 -> debug1.broadcastBreakEvent(EquipmentSlot.byTypeAndIndex(EquipmentSlot.Type.ARMOR, debug5)));
+                    debug4.hurtAndBreak((int)debug2, this.player, debug1l -> debug1l.broadcastBreakEvent(EquipmentSlot.byTypeAndIndex(EquipmentSlot.Type.ARMOR, debug5))); // MagmaCube - decompile fix
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 3e839158f4feeba440f8a43edfcded24898a38fe..6c68dd540baef1007ec732c56eb2500b859aba24 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -529,7 +529,7 @@ public abstract class Player extends LivingEntity
     private void playShoulderEntityAmbientSound(@Nullable final CompoundTag debug1) {
         if (debug1 != null && (!debug1.contains("Silent") || !debug1.getBoolean("Silent")) && this.level.random.nextInt(200) == 0) {
             final String debug2 = debug1.getString("id");
-            EntityType.byString(debug2).filter(debug0 -> debug0 == EntityType.PARROT).ifPresent(debug1 -> {
+            EntityType.byString(debug2).filter(debug0 -> debug0 == EntityType.PARROT).ifPresent(debug1l -> { // MagmaCube - decompile fix
                 if (!Parrot.imitateNearbyMobs(this.level, this)) {
                     this.level.playSound(null, this.getX(), this.getY(), this.getZ(), Parrot.getAmbient(this.level, this.level.random), this.getSoundSource(), 1.0f, Parrot.getPitch(this.level.random));
                 }
@@ -823,7 +823,7 @@ public abstract class Player extends LivingEntity
         if (debug1 >= 3.0f) {
             final int debug2 = 1 + Mth.floor(debug1);
             final InteractionHand debug3 = this.getUsedItemHand();
-            this.useItem.hurtAndBreak(debug2, this, debug1 -> debug1.broadcastBreakEvent(debug3));
+            this.useItem.hurtAndBreak(debug2, this, debug1l -> debug1l.broadcastBreakEvent(debug3)); // MagmaCube - decompile fix
             if (this.useItem.isEmpty()) {
                 if (debug3 == InteractionHand.MAIN_HAND) {
                     this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
@@ -1203,7 +1203,7 @@ public abstract class Player extends LivingEntity
     public Either<BedSleepingProblem, Unit> startSleepInBed(final BlockPos debug1) {
         this.startSleeping(debug1);
         this.sleepCounter = 0;
-        return (Either<BedSleepingProblem, Unit>)Either.right((Object)Unit.INSTANCE);
+        return Either.right(Unit.INSTANCE); // MagmaCube - decompile fix
     }
     
     public void stopSleepInBed(final boolean debug1, final boolean debug2) {
@@ -1225,7 +1225,7 @@ public abstract class Player extends LivingEntity
         if (debug6 instanceof RespawnAnchorBlock && debug5.getValue((Property<Integer>)RespawnAnchorBlock.CHARGE) > 0 && RespawnAnchorBlock.canSetSpawn(debug0)) {
             final Optional<Vec3> debug7 = RespawnAnchorBlock.findStandUpPosition(EntityType.PLAYER, debug0, debug1);
             if (!debug4 && debug7.isPresent()) {
-                debug0.setBlock(debug1, ((StateHolder<O, BlockState>)debug5).setValue((Property<Comparable>)RespawnAnchorBlock.CHARGE, debug5.getValue((Property<Integer>)RespawnAnchorBlock.CHARGE) - 1), 3);
+                debug0.setBlock(debug1, debug5.setValue(RespawnAnchorBlock.CHARGE, debug5.getValue((Property<Integer>)RespawnAnchorBlock.CHARGE) - 1), 3); // MagmaCube - decompile fix
             }
             return debug7;
         }
@@ -1657,7 +1657,7 @@ public abstract class Player extends LivingEntity
     
     @Override
     public Iterable<ItemStack> getHandSlots() {
-        return (Iterable<ItemStack>)Lists.newArrayList((Object[])new ItemStack[] { this.getMainHandItem(), this.getOffhandItem() });
+        return (Iterable<ItemStack>)Lists.newArrayList(new ItemStack[] { this.getMainHandItem(), this.getOffhandItem() }); // MagmaCube - decompile fix
     }
     
     @Override
@@ -1693,12 +1693,12 @@ public abstract class Player extends LivingEntity
     
     private void respawnEntityOnShoulder(final CompoundTag debug1) {
         if (!this.level.isClientSide && !debug1.isEmpty()) {
-            EntityType.create(debug1, this.level).ifPresent(debug1 -> {
-                if (debug1 instanceof TamableAnimal) {
-                    debug1.setOwnerUUID(this.uuid);
+            EntityType.create(debug1, this.level).ifPresent(debug1l -> { // MagmaCube - decompile fix
+                if (debug1l instanceof TamableAnimal) { // MagmaCube - decompile fix
+                    ((TamableAnimal) debug1l).setOwnerUUID(this.uuid); // MagmaCube - decompile fix
                 }
-                debug1.setPos(this.getX(), this.getY() + 0.699999988079071, this.getZ());
-                ((ServerLevel)this.level).addWithUUID(debug1);
+                debug1l.setPos(this.getX(), this.getY() + 0.699999988079071, this.getZ()); // MagmaCube - decompile fix
+                ((ServerLevel)this.level).addWithUUID(debug1l); // MagmaCube - decompile fix
             });
         }
     }
@@ -1729,11 +1729,9 @@ public abstract class Player extends LivingEntity
     }
     
     private MutableComponent decorateDisplayNameComponent(final MutableComponent debug1) {
-        final String debug3 = this.getGameProfile().getName();
-        final ClickEvent debug4;
-        final String s;
+        final String s = this.getGameProfile().getName(); // MagmaCube - decompile fix
         return debug1.withStyle(debug2 -> {
-            new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/tell " + s + " ");
+            ClickEvent debug4 = new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/tell " + s + " "); // MagmaCube - decompile fix
             return debug2.withClickEvent(debug4).withHoverEvent(this.createHoverEvent()).withInsertion(s);
         });
     }
@@ -1920,7 +1918,7 @@ public abstract class Player extends LivingEntity
     
     @Override
     public ImmutableList<Pose> getDismountPoses() {
-        return (ImmutableList<Pose>)ImmutableList.of((Object)Pose.STANDING, (Object)Pose.CROUCHING, (Object)Pose.SWIMMING);
+        return (ImmutableList<Pose>)ImmutableList.of(Pose.STANDING, Pose.CROUCHING, Pose.SWIMMING); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/player/StackedContents.java b/src/main/java/net/minecraft/world/entity/player/StackedContents.java
index d47e0527892f9f43cb63d9f87cdec694a7854ecd..3ed78c0357bcea3f3d43fbb68904c03b7274a19d 100644
--- a/src/main/java/net/minecraft/world/entity/player/StackedContents.java
+++ b/src/main/java/net/minecraft/world/entity/player/StackedContents.java
@@ -106,7 +106,7 @@ public class StackedContents
         private final IntList path;
         
         public RecipePicker(final Recipe<?> debug2) {
-            this.ingredients = (List<Ingredient>)Lists.newArrayList();
+            this.ingredients = Lists.newArrayList(); // MagmaCube - decompile fix
             this.path = (IntList)new IntArrayList();
             this.recipe = debug2;
             this.ingredients.addAll(debug2.getIngredients());
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
index b221171325363e7eef4fb663e390ace155ea43ba..a4ade492e65776149c2e6bf362a3918201cd6974 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -283,7 +283,7 @@ public abstract class AbstractArrow extends Projectile
                 this.piercingIgnoreEntityIds = new IntOpenHashSet(5);
             }
             if (this.piercedAndKilledEntities == null) {
-                this.piercedAndKilledEntities = (List<Entity>)Lists.newArrayListWithCapacity(5);
+                this.piercedAndKilledEntities = Lists.newArrayListWithCapacity(5); // MagmaCube - decompile fix
             }
             if (this.piercingIgnoreEntityIds.size() >= this.getPierceLevel() + 1) {
                 this.remove();
@@ -512,7 +512,7 @@ public abstract class AbstractArrow extends Projectile
             this.entityData.set(AbstractArrow.ID_FLAGS, (byte)(debug3 | debug1));
         }
         else {
-            this.entityData.set(AbstractArrow.ID_FLAGS, (byte)(debug3 & â¾debug1));
+            this.entityData.set(AbstractArrow.ID_FLAGS, (byte)(debug3 & debug1)); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Fireball.java b/src/main/java/net/minecraft/world/entity/projectile/Fireball.java
index 2022677d2490214c9f32b8544f7aab582647a6f7..9c50470c9b3ac8410ad8cf15cfb53b047b91a020 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Fireball.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Fireball.java
@@ -32,7 +32,7 @@ public abstract class Fireball extends AbstractHurtingProjectile implements Item
     
     public void setItem(final ItemStack debug1) {
         if (debug1.getItem() != Items.FIRE_CHARGE || debug1.hasTag()) {
-            this.getEntityData().set(Fireball.DATA_ITEM_STACK, (ItemStack)Util.make((T)debug1.copy(), debug0 -> debug0.setCount(1)));
+            this.getEntityData().set(Fireball.DATA_ITEM_STACK, (ItemStack)Util.make(debug1.copy(), debug0 -> debug0.setCount(1))); // MagmaCube - decompile fix
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
index 0453ed5e2a6f6e07483aff373f4f37689c6b0148..6e8f71872684ccc9cd15cb940852fa0203aafec8 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
@@ -103,9 +103,8 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier
         super.tick();
         if (this.isAttachedToEntity()) {
             if (this.attachedToEntity == null) {
-                final Entity debug2;
                 this.entityData.get(FireworkRocketEntity.DATA_ATTACHED_TO_TARGET).ifPresent(debug1 -> {
-                    debug2 = this.level.getEntity(debug1);
+                    Entity debug2 = this.level.getEntity(debug1);
                     if (debug2 instanceof LivingEntity) {
                         this.attachedToEntity = (LivingEntity)debug2;
                     }
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index 9980d43b407f1f73c2dd054b2b73dbac8d07364a..e33ffa17f6908e143edd471c69b3cef0034efe15 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -159,7 +159,7 @@ public abstract class AbstractMinecart extends Entity
         for (final Pose debug7 : debug6) {
             final EntityDimensions debug8 = debug1.getDimensions(debug7);
             final float debug9 = Math.min(debug8.width, 1.0f) / 2.0f;
-            for (final int debug10 : (ImmutableList)AbstractMinecart.POSE_DISMOUNT_HEIGHTS.get((Object)debug7)) {
+            for (final int debug10 : AbstractMinecart.POSE_DISMOUNT_HEIGHTS.get((Object)debug7)) { // MagmaCube - decompile fix
                 for (final int[] debug11 : debug3) {
                     debug5.set(debug4.getX() + debug11[0], debug4.getY() + debug10, debug4.getZ() + debug11[1]);
                     final double debug12 = this.level.getBlockFloorHeight(DismountHelper.nonClimbableShape(this.level, debug5), () -> DismountHelper.nonClimbableShape(this.level, debug5.below()));
@@ -179,7 +179,7 @@ public abstract class AbstractMinecart extends Entity
         for (final Pose debug16 : debug6) {
             final double debug17 = debug1.getDimensions(debug16).height;
             final int debug18 = Mth.ceil(debug15 - debug5.getY() + debug17);
-            final double debug19 = DismountHelper.findCeilingFrom((BlockPos)debug5, debug18, debug1 -> this.level.getBlockState(debug1).getCollisionShape(this.level, debug1));
+            final double debug19 = DismountHelper.findCeilingFrom((BlockPos)debug5, debug18, debug1l -> this.level.getBlockState(debug1l).getCollisionShape(this.level, debug1l)); // MagmaCube - decompile fix
             if (debug15 + debug17 <= debug19) {
                 debug1.setPose(debug16);
                 break;
@@ -810,35 +810,29 @@ public abstract class AbstractMinecart extends Entity
         DATA_ID_DISPLAY_BLOCK = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.INT);
         DATA_ID_DISPLAY_OFFSET = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.INT);
         DATA_ID_CUSTOM_DISPLAY = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.BOOLEAN);
-        POSE_DISMOUNT_HEIGHTS = ImmutableMap.of((Object)Pose.STANDING, (Object)ImmutableList.of((Object)0, (Object)1, (Object)(-1)), (Object)Pose.CROUCHING, (Object)ImmutableList.of((Object)0, (Object)1, (Object)(-1)), (Object)Pose.SWIMMING, (Object)ImmutableList.of((Object)0, (Object)1));
-        final Vec3i debug;
-        final Vec3i debug2;
-        final Vec3i debug3;
-        final Vec3i debug4;
-        final Vec3i debug5;
-        final Vec3i debug6;
-        final Vec3i debug7;
-        final Vec3i debug8;
-        EXITS = Util.make((Map<RailShape, Pair<Vec3i, Vec3i>>)Maps.newEnumMap((Class)RailShape.class), debug0 -> {
-            debug = Direction.WEST.getNormal();
-            debug2 = Direction.EAST.getNormal();
-            debug3 = Direction.NORTH.getNormal();
-            debug4 = Direction.SOUTH.getNormal();
-            debug5 = debug.below();
-            debug6 = debug2.below();
-            debug7 = debug3.below();
-            debug8 = debug4.below();
-            debug0.put(RailShape.NORTH_SOUTH, Pair.of((Object)debug3, (Object)debug4));
-            debug0.put(RailShape.EAST_WEST, Pair.of((Object)debug, (Object)debug2));
-            debug0.put(RailShape.ASCENDING_EAST, Pair.of((Object)debug5, (Object)debug2));
-            debug0.put(RailShape.ASCENDING_WEST, Pair.of((Object)debug, (Object)debug6));
-            debug0.put(RailShape.ASCENDING_NORTH, Pair.of((Object)debug3, (Object)debug8));
-            debug0.put(RailShape.ASCENDING_SOUTH, Pair.of((Object)debug7, (Object)debug4));
-            debug0.put(RailShape.SOUTH_EAST, Pair.of((Object)debug4, (Object)debug2));
-            debug0.put(RailShape.SOUTH_WEST, Pair.of((Object)debug4, (Object)debug));
-            debug0.put(RailShape.NORTH_WEST, Pair.of((Object)debug3, (Object)debug));
-            debug0.put(RailShape.NORTH_EAST, Pair.of((Object)debug3, (Object)debug2));
+        POSE_DISMOUNT_HEIGHTS = ImmutableMap.of(Pose.STANDING, ImmutableList.of(0, 1, -1), Pose.CROUCHING, ImmutableList.of(0, 1, -1), Pose.SWIMMING, ImmutableList.of(0, 1)); // MagmaCube - decompile fix
+        // MagmaCube start - decompiel fix
+        EXITS = Util.make(Maps.newEnumMap(RailShape.class), debug0 -> {
+            Vec3i debug = Direction.WEST.getNormal();
+            Vec3i debug2 = Direction.EAST.getNormal();
+            Vec3i debug3 = Direction.NORTH.getNormal();
+            Vec3i debug4 = Direction.SOUTH.getNormal();
+            Vec3i debug5 = debug.below();
+            Vec3i debug6 = debug2.below();
+            Vec3i debug7 = debug3.below();
+            Vec3i debug8 = debug4.below();
+            debug0.put(RailShape.NORTH_SOUTH, Pair.of(debug3, debug4));
+            debug0.put(RailShape.EAST_WEST, Pair.of(debug, debug2));
+            debug0.put(RailShape.ASCENDING_EAST, Pair.of(debug5, debug2));
+            debug0.put(RailShape.ASCENDING_WEST, Pair.of(debug, debug6));
+            debug0.put(RailShape.ASCENDING_NORTH, Pair.of(debug3, debug8));
+            debug0.put(RailShape.ASCENDING_SOUTH, Pair.of(debug7, debug4));
+            debug0.put(RailShape.SOUTH_EAST, Pair.of(debug4, debug2));
+            debug0.put(RailShape.SOUTH_WEST, Pair.of(debug4, debug));
+            debug0.put(RailShape.NORTH_WEST, Pair.of(debug3, debug));
+            debug0.put(RailShape.NORTH_EAST, Pair.of(debug3, debug2));
         });
+        // MagmaCube end - decompile fix
     }
     
     public enum Type
diff --git a/src/main/java/net/minecraft/world/food/FoodProperties.java b/src/main/java/net/minecraft/world/food/FoodProperties.java
index c64d93a98f57e104c431f40614ffdad5f5cca8e2..940b80585b449f30f688c20d1e596ad9f18a86a0 100644
--- a/src/main/java/net/minecraft/world/food/FoodProperties.java
+++ b/src/main/java/net/minecraft/world/food/FoodProperties.java
@@ -57,7 +57,7 @@ public class FoodProperties
         private final List<Pair<MobEffectInstance, Float>> effects;
         
         public Builder() {
-            this.effects = (List<Pair<MobEffectInstance, Float>>)Lists.newArrayList();
+            this.effects = Lists.newArrayList(); // MagmaCube - decompile fix
         }
         
         public Builder nutrition(final int debug1) {
@@ -86,12 +86,12 @@ public class FoodProperties
         }
         
         public Builder effect(final MobEffectInstance debug1, final float debug2) {
-            this.effects.add((Pair<MobEffectInstance, Float>)Pair.of((Object)debug1, (Object)debug2));
+            this.effects.add((Pair<MobEffectInstance, Float>)Pair.of(debug1, debug2)); // MagmaCube - decompile fix
             return this;
         }
         
         public FoodProperties build() {
-            return new FoodProperties(this.nutrition, this.saturationModifier, this.isMeat, this.canAlwaysEat, this.fastFood, this.effects, null);
+            return new FoodProperties(this.nutrition, this.saturationModifier, this.isMeat, this.canAlwaysEat, this.fastFood, this.effects); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index 55af82fc528c0542438f57d512d3a8fc33f1543f..62e5bda54a051ebf8eeffb1cc1ae97615e7ada7e 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -39,19 +39,19 @@ public abstract class AbstractContainerMenu
     
     protected AbstractContainerMenu(@Nullable final MenuType<?> debug1, final int debug2) {
         this.lastSlots = NonNullList.create();
-        this.slots = (List<Slot>)Lists.newArrayList();
-        this.dataSlots = (List<DataSlot>)Lists.newArrayList();
+        this.slots = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.dataSlots = Lists.newArrayList(); // MagmaCube - decompile fix
         this.quickcraftType = -1;
-        this.quickcraftSlots = (Set<Slot>)Sets.newHashSet();
-        this.containerListeners = (List<ContainerListener>)Lists.newArrayList();
-        this.unSynchedPlayers = (Set<Player>)Sets.newHashSet();
+        this.quickcraftSlots = Sets.newHashSet(); // MagmaCube - decompile fix
+        this.containerListeners = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.unSynchedPlayers = Sets.newHashSet(); // MagmaCube - decompile fix
         this.menuType = debug1;
         this.containerId = debug2;
     }
     
     protected static boolean stillValid(final ContainerLevelAccess debug0, final Player debug1, final Block debug2) {
-        return debug0.evaluate((debug2, debug3) -> {
-            if (!debug2.getBlockState(debug3).is(debug2)) {
+        return debug0.evaluate((debug2l, debug3) -> { // MagmaCube - decompile fix
+            if (!debug2l.getBlockState(debug3).is(debug2)) { // MagmaCube - decompile fix
                 return false;
             }
             else {
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
index 0e3104e01f5cc06f7945d774c046bcb8e31d0b6c..4c5579ece837f5eb59679f6e3bd101a1fc4de5dd 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
@@ -63,7 +63,7 @@ public abstract class AbstractFurnaceMenu extends RecipeBookMenu<Container>
     
     @Override
     public void handlePlacement(final boolean debug1, final Recipe<?> debug2, final ServerPlayer debug3) {
-        new ServerPlaceSmeltingRecipe<Object>(this).recipeClicked(debug3, debug2, debug1);
+        new ServerPlaceSmeltingRecipe(this).recipeClicked(debug3, debug2, debug1); // MagmaCube - decompile fix
     }
     
     @Override
@@ -147,7 +147,7 @@ public abstract class AbstractFurnaceMenu extends RecipeBookMenu<Container>
     }
     
     protected boolean canSmelt(final ItemStack debug1) {
-        return this.level.getRecipeManager().getRecipeFor((RecipeType<Recipe>)this.recipeType, new SimpleContainer(new ItemStack[] { debug1 }), this.level).isPresent();
+        return this.level.getRecipeManager().getRecipeFor(this.recipeType, new SimpleContainer(new ItemStack[] { debug1 }), this.level).isPresent(); // MagmaCube - decompile fix
     }
     
     protected boolean isFuel(final ItemStack debug1) {
diff --git a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
index 16664b2a89473bc9363677d7b172ed6a7559372b..73341400e58b7cec2ac2f5ec51e7c3e4fd7a5984 100644
--- a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
@@ -68,26 +68,26 @@ public class AnvilMenu extends ItemCombinerMenu
             this.inputSlots.setItem(1, ItemStack.EMPTY);
         }
         this.cost.set(0);
-        final BlockState debug4;
-        final BlockState debug5;
-        this.access.execute((debug1, debug2) -> {
-            debug4 = debug1.getBlockState(debug2);
-            if (!debug1.abilities.instabuild && debug4.is(BlockTags.ANVIL) && debug1.getRandom().nextFloat() < 0.12f) {
-                debug5 = AnvilBlock.damage(debug4);
+        // MagmaCube start - decompile fix
+        this.access.execute((debug1l, debug2l) -> {
+            BlockState debug4 = debug1l.getBlockState(debug2l);
+            if (!debug1.abilities.instabuild && debug4.is(BlockTags.ANVIL) && debug1l.getRandom().nextFloat() < 0.12f) {
+                BlockState debug5 = AnvilBlock.damage(debug4);
                 if (debug5 == null) {
-                    debug1.removeBlock(debug2, false);
-                    debug1.levelEvent(1029, debug2, 0);
+                    debug1l.removeBlock(debug2l, false);
+                    debug1l.levelEvent(1029, debug2l, 0);
                 }
                 else {
-                    debug1.setBlock(debug2, debug5, 2);
-                    debug1.levelEvent(1030, debug2, 0);
+                    debug1l.setBlock(debug2l, debug5, 2);
+                    debug1l.levelEvent(1030, debug2l, 0);
                 }
             }
             else {
-                debug1.levelEvent(1030, debug2, 0);
+                debug1l.levelEvent(1030, debug2l, 0);
             }
             return;
         });
+        // MagmaCube end - decompile fix
         return debug2;
     }
     
diff --git a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
index d2a1b1b8ddfdc6243ab20266c38aab5629f17e79..2a04427edcf673ed82e1e165aa7730a58c7f1b93 100644
--- a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
@@ -67,11 +67,10 @@ public class CartographyTableMenu extends AbstractContainerMenu
                 CartographyTableMenu.this.slots.get(0).remove(1);
                 CartographyTableMenu.this.slots.get(1).remove(1);
                 debug2.getItem().onCraftedBy(debug2, debug1.level, debug1);
-                final long debug3;
-                debug3.execute((debug1, debug2) -> {
-                    debug3 = debug1.getGameTime();
+                CartographyTableMenu.this.access.execute((debug1l, debug2l) -> { // MagmaCube - decompile fix
+                    long debug3 = debug1l.getGameTime(); // MagmaCube - decompile fix
                     if (CartographyTableMenu.this.lastSoundTime != debug3) {
-                        debug1.playSound(null, debug2, SoundEvents.UI_CARTOGRAPHY_TABLE_TAKE_RESULT, SoundSource.BLOCKS, 1.0f, 1.0f);
+                        debug1l.playSound(null, debug2l, SoundEvents.UI_CARTOGRAPHY_TABLE_TAKE_RESULT, SoundSource.BLOCKS, 1.0f, 1.0f); // MagmaCube - decompile fix
                         CartographyTableMenu.this.lastSoundTime = debug3;
                     }
                     return;
@@ -108,13 +107,11 @@ public class CartographyTableMenu extends AbstractContainerMenu
     }
     
     private void setupResultSlot(final ItemStack debug1, final ItemStack debug2, final ItemStack debug3) {
-        final Item debug5;
-        final MapItemSavedData debug6;
-        ItemStack debug7;
-        this.access.execute((debug4, debug5) -> {
-            debug5 = debug2.getItem();
-            debug6 = MapItem.getSavedData(debug1, debug4);
+        this.access.execute((debug4, debug5l) -> { // MagmaCube - decompile fix
+            Item debug5 = debug2.getItem(); // MagmaCube - decompile fix
+            MapItemSavedData debug6 = MapItem.getSavedData(debug1, debug4); // MagmaCube - decompile fix
             if (debug6 != null) {
+                ItemStack debug7; // MagmaCube - decompile fix
                 if (debug5 == Items.PAPER && !debug6.locked && debug6.scale < 4) {
                     debug7 = debug1.copy();
                     debug7.setCount(1);
diff --git a/src/main/java/net/minecraft/world/inventory/ContainerLevelAccess.java b/src/main/java/net/minecraft/world/inventory/ContainerLevelAccess.java
index 07f0190fe2b0239309d9e20e5bbb55d4bb6a3743..a65cc0837e243051924ff7e84815829741912c28 100644
--- a/src/main/java/net/minecraft/world/inventory/ContainerLevelAccess.java
+++ b/src/main/java/net/minecraft/world/inventory/ContainerLevelAccess.java
@@ -18,8 +18,8 @@ public interface ContainerLevelAccess
     default ContainerLevelAccess create(final Level debug0, final BlockPos debug1) {
         return new ContainerLevelAccess() {
             @Override
-            public <T> Optional<T> evaluate(final BiFunction<Level, BlockPos, T> debug1) {
-                return Optional.of(debug1.apply(debug0, debug1));
+            public <T> Optional<T> evaluate(final BiFunction<Level, BlockPos, T> debug1l) { // MagmaCube - decompile fix
+                return Optional.of(debug1l.apply(debug0, debug1)); // MagmaCube - decompile fix
             }
         };
     }
@@ -31,8 +31,8 @@ public interface ContainerLevelAccess
     }
     
     default void execute(final BiConsumer<Level, BlockPos> debug1) {
-        this.evaluate((debug1, debug2) -> {
-            debug1.accept(debug1, debug2);
+        this.evaluate((debug1l, debug2) -> { // MagmaCube - decompile fix
+            debug1.accept(debug1l, debug2); // MagmaCube - decompile fix
             return Optional.empty();
         });
     }
diff --git a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
index 2ac4818c20d8c372a02956aedffc32c3593258dd..bbe00648ffc2656feedb85d016a91b1e9c34afd3 100644
--- a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -183,7 +183,7 @@ extends AbstractContainerMenu {
                         }
                         debug8.enchant(debug12.enchantment, debug12.level);
                     }
-                    if (!debug3.abilities.instabuild) {
+                    if (!debug1.abilities.instabuild) { // MagmaCube - decompile fix
                         debug4.shrink(debug5);
                         if (debug4.isEmpty()) {
                             this.enchantSlots.setItem(1, ItemStack.EMPTY);
diff --git a/src/main/java/net/minecraft/world/inventory/InventoryMenu.java b/src/main/java/net/minecraft/world/inventory/InventoryMenu.java
index 04232d7f2bef2d4562f8e018eebd79b1a7019a8c..57b1e86daa879252ca27679e690b206eab717c19 100644
--- a/src/main/java/net/minecraft/world/inventory/InventoryMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/InventoryMenu.java
@@ -60,7 +60,7 @@ public class InventoryMenu extends RecipeBookMenu<CraftingContainer>
                 
                 @Override
                 public Pair<ResourceLocation, ResourceLocation> getNoItemIcon() {
-                    return (Pair<ResourceLocation, ResourceLocation>)Pair.of((Object)InventoryMenu.BLOCK_ATLAS, (Object)InventoryMenu.TEXTURE_EMPTY_SLOTS[debug6.getIndex()]);
+                    return (Pair<ResourceLocation, ResourceLocation>)Pair.of(InventoryMenu.BLOCK_ATLAS, InventoryMenu.TEXTURE_EMPTY_SLOTS[debug6.getIndex()]); // MagmaCube - decompile fix
                 }
             });
         }
@@ -75,7 +75,7 @@ public class InventoryMenu extends RecipeBookMenu<CraftingContainer>
         this.addSlot(new Slot(debug1, 40, 77, 62) {
             @Override
             public Pair<ResourceLocation, ResourceLocation> getNoItemIcon() {
-                return (Pair<ResourceLocation, ResourceLocation>)Pair.of((Object)InventoryMenu.BLOCK_ATLAS, (Object)InventoryMenu.EMPTY_ARMOR_SLOT_SHIELD);
+                return (Pair<ResourceLocation, ResourceLocation>)Pair.of(InventoryMenu.BLOCK_ATLAS, InventoryMenu.EMPTY_ARMOR_SLOT_SHIELD); // MagmaCube - decompile fix
             }
         });
     }
diff --git a/src/main/java/net/minecraft/world/inventory/LoomMenu.java b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
index 43900d395d51baa4824471442e6a925a59b1057d..1749a372216c165ab0c32df581d2c2fa70526e0b 100644
--- a/src/main/java/net/minecraft/world/inventory/LoomMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
@@ -88,11 +88,10 @@ public class LoomMenu extends AbstractContainerMenu
                 if (!LoomMenu.this.bannerSlot.hasItem() || !LoomMenu.this.dyeSlot.hasItem()) {
                     LoomMenu.this.selectedBannerPatternIndex.set(0);
                 }
-                final long debug3;
-                debug3.execute((debug1, debug2) -> {
-                    debug3 = debug1.getGameTime();
+                LoomMenu.this.access.execute((debug1l, debug2l) -> { // MagmaCube - decompile fix
+                    long debug3 = debug1l.getGameTime(); // MagmaCube - decompile fix
                     if (LoomMenu.this.lastSoundTime != debug3) {
-                        debug1.playSound(null, debug2, SoundEvents.UI_LOOM_TAKE_RESULT, SoundSource.BLOCKS, 1.0f, 1.0f);
+                        debug1l.playSound(null, debug2l, SoundEvents.UI_LOOM_TAKE_RESULT, SoundSource.BLOCKS, 1.0f, 1.0f); // MagmaCube - decompile fix
                         LoomMenu.this.lastSoundTime = debug3;
                     }
                     return;
@@ -241,7 +240,7 @@ public class LoomMenu extends AbstractContainerMenu
                 final CompoundTag debug8 = new CompoundTag();
                 debug8.putString("Pattern", debug4.getHashname());
                 debug8.putInt("Color", debug5.getId());
-                ((AbstractList<CompoundTag>)debug7).add(debug8);
+                debug7.add(debug8); // MagmaCube - decompile fix
             }
             if (!ItemStack.matches(debug3, this.resultSlot.getItem())) {
                 this.resultSlot.set(debug3);
diff --git a/src/main/java/net/minecraft/world/inventory/PlayerEnderChestContainer.java b/src/main/java/net/minecraft/world/inventory/PlayerEnderChestContainer.java
index ec966e623276f709f3dce43bacc3f43ee461d415..2b3cf93ead499f27a4900aab5c5e536c26f4a45a 100644
--- a/src/main/java/net/minecraft/world/inventory/PlayerEnderChestContainer.java
+++ b/src/main/java/net/minecraft/world/inventory/PlayerEnderChestContainer.java
@@ -43,7 +43,7 @@ public class PlayerEnderChestContainer extends SimpleContainer
                 final CompoundTag debug4 = new CompoundTag();
                 debug4.putByte("Slot", (byte)debug2);
                 debug3.save(debug4);
-                ((AbstractList<CompoundTag>)debug1).add(debug4);
+                debug1.add(debug4); // MagmaCube - decompile fix
             }
         }
         return debug1;
diff --git a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
index c3c47b58c2fc7d40f59daef6a1ff3f35fc105811..e1f3044dc82c636035cc25b32044d78f15e1e635 100644
--- a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
@@ -13,7 +13,7 @@ public abstract class RecipeBookMenu<C extends Container> extends AbstractContai
     }
     
     public void handlePlacement(final boolean debug1, final Recipe<?> debug2, final ServerPlayer debug3) {
-        new ServerPlaceRecipe<Object>(this).recipeClicked(debug3, debug2, debug1);
+        new ServerPlaceRecipe(this).recipeClicked(debug3, debug2, debug1); // MagmaCube - decompile fix
     }
     
     public abstract void fillCraftSlotsStackedContents(final StackedContents p0);
diff --git a/src/main/java/net/minecraft/world/inventory/SmithingMenu.java b/src/main/java/net/minecraft/world/inventory/SmithingMenu.java
index 8a2be4e958943c710760c1ae12af42daef900385..ee9a6e5301f8822b7f9f00649522ec826f7ffa7a 100644
--- a/src/main/java/net/minecraft/world/inventory/SmithingMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/SmithingMenu.java
@@ -46,7 +46,7 @@ public class SmithingMenu extends ItemCombinerMenu
         this.resultSlots.awardUsedRecipes(debug1);
         this.shrinkStackInSlot(0);
         this.shrinkStackInSlot(1);
-        this.access.execute((debug0, debug1) -> debug0.levelEvent(1044, debug1, 0));
+        this.access.execute((debug0, debug1l) -> debug0.levelEvent(1044, debug1l, 0)); // MagmaCube - decompile fix
         return debug2;
     }
     
@@ -72,7 +72,7 @@ public class SmithingMenu extends ItemCombinerMenu
     
     @Override
     protected boolean shouldQuickMoveToAdditionalSlot(final ItemStack debug1) {
-        return this.recipes.stream().anyMatch(debug1 -> debug1.isAdditionIngredient(debug1));
+        return this.recipes.stream().anyMatch(debug1l -> debug1l.isAdditionIngredient(debug1)); // MagmaCube - decompile fix
     }
     
     @Override
diff --git a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
index cdde861afb16c13f7dbe0fdd3357d9899b342d1b..87d2595300b64df4e3dec8588a82b4b6b94240fa 100644
--- a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
@@ -38,7 +38,7 @@ public class StonecutterMenu extends AbstractContainerMenu
     public StonecutterMenu(final int debug1, final Inventory debug2, final ContainerLevelAccess debug3) {
         super(MenuType.STONECUTTER, debug1);
         this.selectedRecipeIndex = DataSlot.standalone();
-        this.recipes = (List<StonecutterRecipe>)Lists.newArrayList();
+        this.recipes = Lists.newArrayList(); // MagmaCube - decompile fix
         this.input = ItemStack.EMPTY;
         this.slotUpdateListener = (() -> {});
         this.container = new SimpleContainer(1) {
@@ -67,11 +67,10 @@ public class StonecutterMenu extends AbstractContainerMenu
                 if (!debug3.isEmpty()) {
                     StonecutterMenu.this.setupResultSlot();
                 }
-                final long debug4;
-                debug3.execute((debug1, debug2) -> {
-                    debug4 = debug1.getGameTime();
+                StonecutterMenu.this.access.execute((debug1l, debug2l) -> { // MagmaCube - decompile fix
+                    long debug4 = debug1l.getGameTime(); // MagmaCube - decompile fix
                     if (StonecutterMenu.this.lastSoundTime != debug4) {
-                        debug1.playSound(null, debug2, SoundEvents.UI_STONECUTTER_TAKE_RESULT, SoundSource.BLOCKS, 1.0f, 1.0f);
+                        debug1l.playSound(null, debug2l, SoundEvents.UI_STONECUTTER_TAKE_RESULT, SoundSource.BLOCKS, 1.0f, 1.0f); // MagmaCube - decompile fix
                         StonecutterMenu.this.lastSoundTime = debug4;
                     }
                     return;
diff --git a/src/main/java/net/minecraft/world/item/FoodOnAStickItem.java b/src/main/java/net/minecraft/world/item/FoodOnAStickItem.java
index 376e5328cd0a97f4e5afcb8e62ccbc34ad7b9d50..e9badc592563dd046b6a3005eb3896426dfdd169 100644
--- a/src/main/java/net/minecraft/world/item/FoodOnAStickItem.java
+++ b/src/main/java/net/minecraft/world/item/FoodOnAStickItem.java
@@ -2,6 +2,7 @@ package net.minecraft.world.item;
 
 import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.entity.ItemSteerable;
 import net.minecraft.world.InteractionResultHolder;
@@ -31,7 +32,7 @@ public class FoodOnAStickItem<T extends Entity> extends Item
         if (debug2.isPassenger() && debug5 instanceof ItemSteerable && debug5.getType() == this.canInteractWith) {
             final ItemSteerable debug6 = (ItemSteerable)debug5;
             if (debug6.boost()) {
-                debug4.hurtAndBreak(this.consumeItemDamage, debug2, debug1 -> debug1.broadcastBreakEvent(debug3));
+                debug4.hurtAndBreak(this.consumeItemDamage, debug2, debug1l -> debug1l.broadcastBreakEvent(debug3)); // MagmaCube - decompile fix
                 if (debug4.isEmpty()) {
                     final ItemStack debug7 = new ItemStack(Items.FISHING_ROD);
                     debug7.setTag(debug4.getTag());
diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index a19cab8c3031ffa1a65285c08739ff4446e2d4e7..efc18770cd168dfae87aa26e21e7f68f6786f36d 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -285,7 +285,7 @@ public class Item implements ItemLike
     }
     
     public Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(final EquipmentSlot debug1) {
-        return (Multimap<Attribute, AttributeModifier>)ImmutableMultimap.of();
+        return ImmutableMultimap.of(); // MagmaCube - decompile fix
     }
     
     public boolean useOnRelease(final ItemStack debug1) {
diff --git a/src/main/java/net/minecraft/world/item/ItemCooldowns.java b/src/main/java/net/minecraft/world/item/ItemCooldowns.java
index 5b5b08fbc07eb2d1e20b111ab2326ad2c74d0c00..e4b25b85480a9b598479be846f48c99fb96ace41 100644
--- a/src/main/java/net/minecraft/world/item/ItemCooldowns.java
+++ b/src/main/java/net/minecraft/world/item/ItemCooldowns.java
@@ -11,7 +11,7 @@ public class ItemCooldowns
     private int tickCount;
     
     public ItemCooldowns() {
-        this.cooldowns = (Map<Item, CooldownInstance>)Maps.newHashMap();
+        this.cooldowns = Maps.newHashMap(); // MagmaCube - decompile fix
     }
     
     public boolean isOnCooldown(final Item debug1) {
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 063131addba9b3ac5d42baeb40650b7ca0512099..8167ffc561abbc5b69a2c51d9aae1f510816b260 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -97,7 +97,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public final class ItemStack {
-    public static final Codec<ItemStack> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)Registry.ITEM.fieldOf("id").forGetter(debug0 -> debug0.item), (App)Codec.INT.fieldOf("Count").forGetter(debug0 -> debug0.count), (App)CompoundTag.CODEC.optionalFieldOf("tag").forGetter(debug0 -> Optional.ofNullable(debug0.tag))).apply((Applicative)debug02, ItemStack::new));
+    public static final Codec<ItemStack> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Registry.ITEM.fieldOf("id").forGetter(debug0 -> debug0.item), Codec.INT.fieldOf("Count").forGetter(debug0 -> debug0.count), CompoundTag.CODEC.optionalFieldOf("tag").forGetter(debug0 -> Optional.ofNullable(debug0.tag))).apply((Applicative)debug02, ItemStack::new)); // MagmaCube - decompile fix
     private static final Logger LOGGER = LogManager.getLogger();
     public static final ItemStack EMPTY = new ItemStack((ItemLike)null);
     public static final DecimalFormat ATTRIBUTE_MODIFIER_FORMAT = Util.make(new DecimalFormat("#.##"), debug0 -> debug0.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT)));
@@ -534,9 +534,6 @@ public final class ItemStack {
     }
 
     public List<Component> getTooltipLines(@Nullable Player debug1, TooltipFlag debug2) {
-        Object debug10;
-        Object debug9;
-        Object debug6;
         int debug5;
         ArrayList debug3 = Lists.newArrayList();
         MutableComponent debug4 = new TextComponent("").append(this.getHoverName()).withStyle(this.getRarity().color);
@@ -555,7 +552,7 @@ public final class ItemStack {
                 ItemStack.appendEnchantmentNames(debug3, this.getEnchantmentTags());
             }
             if (this.tag.contains("display", 10)) {
-                debug6 = this.tag.getCompound("display");
+                CompoundTag debug6 = this.tag.getCompound("display"); // MagmaCube - decompile fix
                 if (ItemStack.shouldShowInTooltip(debug5, TooltipPart.DYE) && ((CompoundTag)debug6).contains("color", 99)) {
                     if (debug2.isAdvanced()) {
                         debug3.add(new TranslatableComponent("item.color", String.format("#%06X", ((CompoundTag)debug6).getInt("color"))).withStyle(ChatFormatting.GRAY));
@@ -566,9 +563,9 @@ public final class ItemStack {
                 if (((CompoundTag)debug6).getTagType("Lore") == 9) {
                     ListTag debug7 = ((CompoundTag)debug6).getList("Lore", 8);
                     for (int debug8 = 0; debug8 < debug7.size(); ++debug8) {
-                        debug9 = debug7.getString(debug8);
+                        String debug9 = debug7.getString(debug8); // MagmaCube - decompile fix
                         try {
-                            debug10 = Component.Serializer.fromJson((String)debug9);
+                            MutableComponent debug10 = Component.Serializer.fromJson((String)debug9); // MagmaCube - decompile fix
                             if (debug10 == null) continue;
                             debug3.add(ComponentUtils.mergeStyles(debug10, LORE_STYLE));
                             continue;
@@ -581,11 +578,11 @@ public final class ItemStack {
             }
         }
         if (ItemStack.shouldShowInTooltip(debug5, TooltipPart.MODIFIERS)) {
-            debug6 = EquipmentSlot.values();
+            EquipmentSlot[] debug6 = EquipmentSlot.values(); // MagmaCube - decompile fix
             int debug7 = ((EquipmentSlot[])debug6).length;
             for (int i = 0; i < debug7; ++i) {
-                debug9 = debug6[i];
-                debug10 = this.getAttributeModifiers((EquipmentSlot)((Object)debug9));
+                EquipmentSlot debug9 = debug6[i]; // MagmaCube - decompile fix
+                Multimap<Attribute, AttributeModifier> debug10 = this.getAttributeModifiers((EquipmentSlot)((Object)debug9)); // MagmaCube - decompile fix
                 if (debug10.isEmpty()) continue;
                 debug3.add(TextComponent.EMPTY);
                 debug3.add(new TranslatableComponent("item.modifiers." + debug9.getName()).withStyle(ChatFormatting.GRAY));
@@ -621,6 +618,7 @@ public final class ItemStack {
             if (ItemStack.shouldShowInTooltip(debug5, TooltipPart.UNBREAKABLE) && this.tag.getBoolean("Unbreakable")) {
                 debug3.add(new TranslatableComponent("item.unbreakable").withStyle(ChatFormatting.BLUE));
             }
+            ListTag debug6; // MagmaCube - decompile fix
             if (ItemStack.shouldShowInTooltip(debug5, TooltipPart.CAN_DESTROY) && this.tag.contains("CanDestroy", 9) && !((ListTag)(debug6 = this.tag.getList("CanDestroy", 8))).isEmpty()) {
                 debug3.add(TextComponent.EMPTY);
                 debug3.add(new TranslatableComponent("item.canBreak").withStyle(ChatFormatting.GRAY));
@@ -682,7 +680,7 @@ public final class ItemStack {
             if (debug4 || debug5) {
                 List<Block> debug7;
                 if (debug4) {
-                    return Lists.newArrayList((Object[])new Component[]{debug2.getBlock().getName().withStyle(ChatFormatting.DARK_GRAY)});
+                    return Lists.newArrayList(new Component[]{debug2.getBlock().getName().withStyle(ChatFormatting.DARK_GRAY)}); // MagmaCube - decompile fix
                 }
                 Tag<Block> debug6 = BlockTags.getAllTags().getTag(debug3);
                 if (debug6 != null && !(debug7 = debug6.getValues()).isEmpty()) {
@@ -693,7 +691,7 @@ public final class ItemStack {
         catch (CommandSyntaxException commandSyntaxException) {
             // empty catch block
         }
-        return Lists.newArrayList((Object[])new Component[]{new TextComponent("missingno").withStyle(ChatFormatting.DARK_GRAY)});
+        return Lists.newArrayList(new Component[]{new TextComponent("missingno").withStyle(ChatFormatting.DARK_GRAY)}); // MagmaCube - decompile fix
     }
 
     public boolean hasFoil() {
@@ -764,7 +762,7 @@ public final class ItemStack {
     }
 
     public Multimap<Attribute, AttributeModifier> getAttributeModifiers(EquipmentSlot debug1) {
-        HashMultimap debug2;
+        Multimap debug2; // MagmaCube - decompile fix
         if (this.hasTag() && this.tag.contains("AttributeModifiers", 9)) {
             debug2 = HashMultimap.create();
             ListTag debug3 = this.tag.getList("AttributeModifiers", 10);
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index 27a16627edeb9fff33af03d76c769988f5fdaf78..f21616b323b97d328bac4240b882e89fd9ef863d 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -64,15 +64,15 @@ extends SimpleJsonResourceReloadListener {
     @Override
     protected void apply(Map<ResourceLocation, JsonElement> debug1, ResourceManager debug2, ProfilerFiller debug3) {
         this.hasErrors = false;
-        HashMap debug4 = Maps.newHashMap();
+        HashMap<RecipeType, ImmutableMap.Builder> debug4 = Maps.newHashMap(); // MagmaCube - decompile fix
         for (Map.Entry<ResourceLocation, JsonElement> debug6 : debug1.entrySet()) {
             ResourceLocation debug7 = debug6.getKey();
             try {
                 Recipe<?> debug8 = RecipeManager.fromJson(debug7, GsonHelper.convertToJsonObject(debug6.getValue(), "top element"));
-                debug4.computeIfAbsent(debug8.getType(), debug0 -> ImmutableMap.builder()).put((Object)debug7, debug8);
+                debug4.computeIfAbsent(debug8.getType(), debug0 -> ImmutableMap.builder()).put(debug7, debug8); // MagmaCube - decompile fix
             }
             catch (JsonParseException | IllegalArgumentException debug8) {
-                LOGGER.error("Parsing error loading recipe {}", (Object)debug7, (Object)debug8);
+                LOGGER.error("Parsing error loading recipe {}", (Object)debug7, debug8); // MagmaCube - decompile fix
             }
         }
         this.recipes = (Map)debug4.entrySet().stream().collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, debug0 -> ((ImmutableMap.Builder)debug0.getValue()).build()));
@@ -84,7 +84,7 @@ extends SimpleJsonResourceReloadListener {
     }
 
     public <C extends Container, T extends Recipe<C>> List<T> getAllRecipesFor(RecipeType<T> debug1) {
-        return this.byType(debug1).values().stream().map(debug0 -> debug0).collect(Collectors.toList());
+        return this.byType(debug1).values().stream().map(debug0 -> (T) debug0).collect(Collectors.toList()); // MagmaCube - decompile fix
     }
 
     public <C extends Container, T extends Recipe<C>> List<T> getRecipesFor(RecipeType<T> debug1, C debug2, Level debug32) {
@@ -92,7 +92,7 @@ extends SimpleJsonResourceReloadListener {
     }
 
     private <C extends Container, T extends Recipe<C>> Map<ResourceLocation, Recipe<C>> byType(RecipeType<T> debug1) {
-        return this.recipes.getOrDefault(debug1, Collections.emptyMap());
+        return (Map<ResourceLocation, Recipe<C>>) (Object) this.recipes.getOrDefault(debug1, Collections.emptyMap()); // MagmaCube - decompile fix
     }
 
     public <C extends Container, T extends Recipe<C>> NonNullList<ItemStack> getRemainingItemsFor(RecipeType<T> debug1, C debug2, Level debug3) {
@@ -108,7 +108,7 @@ extends SimpleJsonResourceReloadListener {
     }
 
     public Optional<? extends Recipe<?>> byKey(ResourceLocation debug12) {
-        return this.recipes.values().stream().map(debug1 -> (Recipe)debug1.get(debug12)).filter(Objects::nonNull).findFirst();
+        return this.recipes.values().stream().map(debug1 -> (Recipe<?>)debug1.get(debug12)).filter(Objects::nonNull).findFirst(); // MagmaCube - decompile fix
     }
 
     public Collection<Recipe<?>> getRecipes() {
@@ -126,10 +126,10 @@ extends SimpleJsonResourceReloadListener {
 
     public void replaceRecipes(Iterable<Recipe<?>> debug12) {
         this.hasErrors = false;
-        HashMap debug2 = Maps.newHashMap();
+        HashMap<RecipeType<?>, Map<ResourceLocation, Recipe>> debug2 = Maps.newHashMap(); // MagmaCube - decompile fix
         debug12.forEach(debug1 -> {
-            Map debug2 = debug2.computeIfAbsent(debug1.getType(), debug0 -> Maps.newHashMap());
-            Recipe debug3 = debug2.put(debug1.getId(), debug1);
+            Map<ResourceLocation, Recipe> debug2l = debug2.computeIfAbsent(debug1.getType(), debug0 -> Maps.newHashMap()); // MagmaCube - decompile fix
+            Recipe debug3 = debug2l.put(debug1.getId(), debug1); // MagmaCube - decompile fix
             if (debug3 != null) {
                 throw new IllegalStateException("Duplicate recipe ignored with ID " + debug1.getId());
             }
diff --git a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java
index 372aa2ad2ed6bd1edce34f8be273b2f38694aea6..4c38a4d6182ebfd6721e7d8275bc0946b23518f7 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java
@@ -96,7 +96,7 @@ public enum EnchantmentCategory
     VANISHABLE {
         @Override
         public boolean canEnchant(final Item debug1) {
-            return debug1 instanceof Vanishable || Block.byItem(debug1) instanceof Vanishable || EnchantmentCategory$14.BREAKABLE.canEnchant(debug1);
+            return debug1 instanceof Vanishable || Block.byItem(debug1) instanceof Vanishable || BREAKABLE.canEnchant(debug1); // MagmaCube - decompile fix
         }
     };
     
diff --git a/src/main/java/net/minecraft/world/item/trading/MerchantOffers.java b/src/main/java/net/minecraft/world/item/trading/MerchantOffers.java
index c84e1ec4d2baaf9ecf6c5027f3f4268e82f39600..3fa1b7554ecf8bee18119a264b91db2a2f8ebaa2 100644
--- a/src/main/java/net/minecraft/world/item/trading/MerchantOffers.java
+++ b/src/main/java/net/minecraft/world/item/trading/MerchantOffers.java
@@ -91,7 +91,7 @@ public class MerchantOffers extends ArrayList<MerchantOffer>
         final ListTag debug2 = new ListTag();
         for (int debug3 = 0; debug3 < this.size(); ++debug3) {
             final MerchantOffer debug4 = this.get(debug3);
-            ((AbstractList<CompoundTag>)debug2).add(debug4.createTag());
+            debug2.add(debug4.createTag()); // MagmaCube - decompile fix
         }
         debug1.put("Recipes", debug2);
         return debug1;
diff --git a/src/main/java/net/minecraft/world/level/BlockAndTintGetter.java b/src/main/java/net/minecraft/world/level/BlockAndTintGetter.java
index eac4f9335ab104832dcc86bf8dabde4571a256f6..9047f1d19c0b8f2d7d05028afbc78be9f9fe9e30 100644
--- a/src/main/java/net/minecraft/world/level/BlockAndTintGetter.java
+++ b/src/main/java/net/minecraft/world/level/BlockAndTintGetter.java
@@ -21,6 +21,6 @@ public interface BlockAndTintGetter extends BlockGetter
     }
     
     default boolean canSeeSky(final BlockPos debug1) {
-        return this.getBrightness(LightLayer.SKY, debug1) >= super.getMaxLightLevel();
+        return this.getBrightness(LightLayer.SKY, debug1) >= BlockGetter.super.getMaxLightLevel(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/BlockGetter.java b/src/main/java/net/minecraft/world/level/BlockGetter.java
index f78ee85050b5e38e949d163c946c88a37f7f6df1..22bcdc1893438c57cdd17a5a4d5ea7d852cc057d 100644
--- a/src/main/java/net/minecraft/world/level/BlockGetter.java
+++ b/src/main/java/net/minecraft/world/level/BlockGetter.java
@@ -42,33 +42,24 @@ public interface BlockGetter
     }
     
     default BlockHitResult clip(final ClipContext debug1) {
-        final BlockState debug3;
-        final FluidState debug4;
-        final Vec3 debug5;
-        final Vec3 debug6;
-        final VoxelShape debug7;
-        final BlockHitResult debug8;
-        final VoxelShape debug9;
-        final BlockHitResult debug10;
-        final double debug11;
-        final double debug12;
-        final Vec3 debug13;
-        return traverseBlocks(debug1, (debug1, debug2) -> {
-            debug3 = this.getBlockState(debug2);
-            debug4 = this.getFluidState(debug2);
-            debug5 = debug1.getFrom();
-            debug6 = debug1.getTo();
-            debug7 = debug1.getBlockShape(debug3, this, debug2);
-            debug8 = this.clipWithInteractionOverride(debug5, debug6, debug2, debug7, debug3);
-            debug9 = debug1.getFluidShape(debug4, this, debug2);
-            debug10 = debug9.clip(debug5, debug6, debug2);
-            debug11 = ((debug8 == null) ? Double.MAX_VALUE : debug1.getFrom().distanceToSqr(debug8.getLocation()));
-            debug12 = ((debug10 == null) ? Double.MAX_VALUE : debug1.getFrom().distanceToSqr(debug10.getLocation()));
+        // MagmaCube start - decompile fix
+        return traverseBlocks(debug1, (debug1l, debug2) -> {
+            BlockState debug3 = this.getBlockState(debug2);
+            FluidState debug4 = this.getFluidState(debug2);
+            Vec3 debug5 = debug1l.getFrom();
+            Vec3 debug6 = debug1l.getTo();
+            VoxelShape debug7 = debug1l.getBlockShape(debug3, this, debug2);
+            BlockHitResult debug8 = this.clipWithInteractionOverride(debug5, debug6, debug2, debug7, debug3);
+            VoxelShape debug9 = debug1l.getFluidShape(debug4, this, debug2);
+            BlockHitResult debug10 = debug9.clip(debug5, debug6, debug2);
+            double debug11 = ((debug8 == null) ? Double.MAX_VALUE : debug1l.getFrom().distanceToSqr(debug8.getLocation()));
+            double debug12 = ((debug10 == null) ? Double.MAX_VALUE : debug1l.getFrom().distanceToSqr(debug10.getLocation()));
             return (debug11 <= debug12) ? debug8 : debug10;
         }, debug0 -> {
-            debug13 = debug0.getFrom().subtract(debug0.getTo());
+            Vec3 debug13 = debug0.getFrom().subtract(debug0.getTo());
             return BlockHitResult.miss(debug0.getTo(), Direction.getNearest(debug13.x, debug13.y, debug13.z), new BlockPos(debug0.getTo()));
         });
+        // MagmaCube end - decompile fix
     }
     
     @Nullable
@@ -95,9 +86,8 @@ public interface BlockGetter
     }
     
     default double getBlockFloorHeight(final BlockPos debug1) {
-        final BlockPos debug2;
         return this.getBlockFloorHeight(this.getBlockState(debug1).getCollisionShape(this, debug1), () -> {
-            debug2 = debug1.below();
+            BlockPos debug2 = debug1.below(); // MagmaCube - decompile fix
             return this.getBlockState(debug2).getCollisionShape(this, debug2);
         });
     }
diff --git a/src/main/java/net/minecraft/world/level/DataPackConfig.java b/src/main/java/net/minecraft/world/level/DataPackConfig.java
index 4d8c57b97e02fe64d7ff41838b0e326a1717affb..c856ba9a653b247e032f2d8f685c80326cc4e4f3 100644
--- a/src/main/java/net/minecraft/world/level/DataPackConfig.java
+++ b/src/main/java/net/minecraft/world/level/DataPackConfig.java
@@ -30,7 +30,7 @@ public class DataPackConfig
     }
     
     static {
-        DEFAULT = new DataPackConfig((List<String>)ImmutableList.of((Object)"vanilla"), (List<String>)ImmutableList.of());
-        CODEC = RecordCodecBuilder.create(debug0 -> ((RecordCodecBuilder.Instance)debug0).group((App)Codec.STRING.listOf().fieldOf("Enabled").forGetter(debug0 -> debug0.enabled), (App)Codec.STRING.listOf().fieldOf("Disabled").forGetter(debug0 -> debug0.disabled)).apply(debug0, (BiFunction)DataPackConfig::new));
+        DEFAULT = new DataPackConfig((List<String>)ImmutableList.of("vanilla"), ImmutableList.of()); // MagmaCube - decompile fix
+        CODEC = RecordCodecBuilder.create(debug0 -> debug0.group(Codec.STRING.listOf().fieldOf("Enabled").forGetter(debug0l -> debug0l.enabled), Codec.STRING.listOf().fieldOf("Disabled").forGetter(debug0l -> debug0l.disabled)).apply(debug0, DataPackConfig::new)); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/EntityGetter.java b/src/main/java/net/minecraft/world/level/EntityGetter.java
index 11d12f51ad111f9adbdb003660272f0cd8d28248..e6fc906109a98dddcb51468cfa149db3cdc541ec 100644
--- a/src/main/java/net/minecraft/world/level/EntityGetter.java
+++ b/src/main/java/net/minecraft/world/level/EntityGetter.java
@@ -59,15 +59,14 @@ public interface EntityGetter
             return Stream.empty();
         }
         final AABB debug4 = debug2.inflate(1.0E-7);
-        final boolean b;
-        return this.getEntities(debug1, debug4, debug3.and(debug2 -> {
-            if (debug2.getBoundingBox().intersects(debug4)) {
-                if ((debug1 != null) ? debug1.canCollideWith(debug2) : debug2.canBeCollidedWith()) {
-                    return b;
-                }
+        // MagmaCube start - decompile fix
+        return this.getEntities(debug1, debug4, debug3.and(debug2l -> {
+            if (debug2l.getBoundingBox().intersects(debug4)) {
+                return (debug1 != null) ? debug1.canCollideWith(debug2l) : debug2l.canBeCollidedWith();
             }
-            return b;
-        })).stream().map((Function<? super Object, ?>)Entity::getBoundingBox).map((Function<? super Object, ? extends VoxelShape>)Shapes::create);
+            return false;
+        })).stream().map(Entity::getBoundingBox).map(Shapes::create);
+        // MagmaCube end - decompile fix
     }
     
     @Nullable
@@ -159,7 +158,7 @@ public interface EntityGetter
     }
     
     default List<Player> getNearbyPlayers(final TargetingConditions debug1, final LivingEntity debug2, final AABB debug3) {
-        final List<Player> debug4 = (List<Player>)Lists.newArrayList();
+        final List<Player> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Player debug5 : this.players()) {
             if (debug3.contains(debug5.getX(), debug5.getY(), debug5.getZ()) && debug1.test(debug2, debug5)) {
                 debug4.add(debug5);
@@ -170,7 +169,7 @@ public interface EntityGetter
     
     default <T extends LivingEntity> List<T> getNearbyEntities(final Class<? extends T> debug1, final TargetingConditions debug2, final LivingEntity debug3, final AABB debug4) {
         final List<T> debug5 = this.getEntitiesOfClass(debug1, debug4, (Predicate<? super T>)null);
-        final List<T> debug6 = (List<T>)Lists.newArrayList();
+        final List<T> debug6 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final T debug7 : debug5) {
             if (debug2.test(debug3, debug7)) {
                 debug6.add(debug7);
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 9da8fa95076d25a8d18306f5e8ea2a633c4e45f3..8dcf51ffbec95e7cfd587d792b1160eda7328247 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -77,8 +77,8 @@ public class Explosion
     
     public Explosion(final Level debug1, @Nullable final Entity debug2, @Nullable final DamageSource debug3, @Nullable final ExplosionDamageCalculator debug4, final double debug5, final double debug7, final double debug9, final float debug11, final boolean debug12, final BlockInteraction debug13) {
         this.random = new Random();
-        this.toBlow = (List<BlockPos>)Lists.newArrayList();
-        this.hitPlayers = (Map<Player, Vec3>)Maps.newHashMap();
+        this.toBlow = Lists.newArrayList(); // MagmaCube - decompile fix
+        this.hitPlayers = Maps.newHashMap(); // MagmaCube - decompile fix
         this.level = debug1;
         this.source = debug2;
         this.radius = debug11;
@@ -125,7 +125,7 @@ public class Explosion
     }
     
     public void explode() {
-        final Set<BlockPos> debug1 = (Set<BlockPos>)Sets.newHashSet();
+        final Set<BlockPos> debug1 = Sets.newHashSet(); // MagmaCube - decompile fix
         final int debug2 = 16;
         for (int debug3 = 0; debug3 < 16; ++debug3) {
             for (int debug4 = 0; debug4 < 16; ++debug4) {
@@ -260,13 +260,13 @@ public class Explosion
             final ItemStack debug6 = (ItemStack)debug5.getFirst();
             if (ItemEntity.areMergable(debug6, debug1)) {
                 final ItemStack debug7 = ItemEntity.merge(debug6, debug1, 16);
-                debug0.set(debug4, (Object)Pair.of((Object)debug7, debug5.getSecond()));
+                debug0.set(debug4, Pair.of(debug7, debug5.getSecond())); // MagmaCube - decompile fix
                 if (debug1.isEmpty()) {
                     return;
                 }
             }
         }
-        debug0.add((Object)Pair.of((Object)debug1, (Object)debug2));
+        debug0.add(Pair.of(debug1, debug2)); // MagmaCube - decompile fix
     }
     
     public DamageSource getDamageSource() {
diff --git a/src/main/java/net/minecraft/world/level/GameRules.java b/src/main/java/net/minecraft/world/level/GameRules.java
index ac9f46464540e02d4852a301639f7757aa5f785e..3d0fb5bf5b4f46ddfe7ffa2fb34e7a51efeb8a46 100644
--- a/src/main/java/net/minecraft/world/level/GameRules.java
+++ b/src/main/java/net/minecraft/world/level/GameRules.java
@@ -42,7 +42,7 @@ import org.apache.logging.log4j.Logger;
 
 public class GameRules {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final Map<Key<?>, Type<?>> GAME_RULE_TYPES = Maps.newTreeMap(Comparator.comparing(debug0 -> Key.access$600(debug0)));
+    private static final Map<Key<?>, Type<?>> GAME_RULE_TYPES = Maps.newTreeMap(Comparator.comparing(debug0 -> debug0.id)); // MagmaCube - decompile fix
     public static final Key<BooleanValue> RULE_DOFIRETICK = GameRules.register("doFireTick", Category.UPDATES, BooleanValue.access$000(true));
     public static final Key<BooleanValue> RULE_MOBGRIEFING = GameRules.register("mobGriefing", Category.MOBS, BooleanValue.access$000(true));
     public static final Key<BooleanValue> RULE_KEEPINVENTORY = GameRules.register("keepInventory", Category.PLAYER, BooleanValue.access$000(false));
@@ -89,7 +89,7 @@ public class GameRules {
 
     private static <T extends Value<T>> Key<T> register(String debug0, Category debug1, Type<T> debug2) {
         Key debug3 = new Key(debug0, debug1);
-        Type<T> debug4 = GAME_RULE_TYPES.put(debug3, debug2);
+        Type<T> debug4 = (Type<T>) GAME_RULE_TYPES.put(debug3, debug2); // MagmaCube - decompile fix
         if (debug4 != null) {
             throw new IllegalStateException("Duplicate game rule registration for " + debug0);
         }
@@ -132,8 +132,8 @@ public class GameRules {
     }
 
     private static <T extends Value<T>> void callVisitorCap(GameRuleTypeVisitor debug0, Key<?> debug1, Type<?> debug2) {
-        Key<?> debug3 = debug1;
-        Type<?> debug4 = debug2;
+        Key<T> debug3 = (Key)debug1; // MagmaCube - decompile fix
+        Type<T> debug4 = (Type)debug2; // MagmaCube - decompile fix
         debug0.visit(debug3, debug4);
         debug4.callVisitor(debug0, debug3);
     }
@@ -217,21 +217,11 @@ public class GameRules {
             this.onChanged(debug2);
         }
 
-        @Override
-        protected /* synthetic */ Value copy() {
-            return this.copy();
-        }
-
-        @Override
-        protected /* synthetic */ Value getSelf() {
-            return this.getSelf();
-        }
-
         static /* synthetic */ Type access$000(boolean debug0) {
             return BooleanValue.create(debug0);
         }
 
-        static /* synthetic */ Type access$200(boolean debug0, BiConsumer debug1) {
+        static /* synthetic */ Type access$200(boolean debug0, BiConsumer<MinecraftServer, BooleanValue> debug1) { // MagmaCube - decompile fix
             return BooleanValue.create(debug0, debug1);
         }
     }
@@ -315,16 +305,6 @@ public class GameRules {
             this.onChanged(debug2);
         }
 
-        @Override
-        protected /* synthetic */ Value copy() {
-            return this.copy();
-        }
-
-        @Override
-        protected /* synthetic */ Value getSelf() {
-            return this.getSelf();
-        }
-
         static /* synthetic */ Type access$100(int debug0) {
             return IntegerValue.create(debug0);
         }
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index c5185ec8e9867fa42d40671ba77dacde50ea6375..3013b2720b896c672bb1a741a4b36d210716c7c3 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -316,7 +316,7 @@ AutoCloseable {
                 try {
                     return String.format("ID #%s (%s // %s)", Registry.BLOCK.getKey(debug2), debug2.getDescriptionId(), debug2.getClass().getCanonicalName());
                 }
-                catch (Throwable debug1) {
+                catch (Throwable debug12) {
                     return "ID #" + Registry.BLOCK.getKey(debug2);
                 }
             });
@@ -663,7 +663,7 @@ AutoCloseable {
             for (int debug10 = debug6; debug10 < debug7; ++debug10) {
                 LevelChunk debug11 = this.getChunkSource().getChunk(debug9, debug10, false);
                 if (debug11 == null) continue;
-                debug11.getEntities(debug1, debug2, debug8, debug3);
+                debug11.getEntities(debug1, debug2, debug8, (Predicate) debug3); // MagmaCube - decompile fix
             }
         }
         return debug8;
@@ -990,10 +990,5 @@ AutoCloseable {
     public final boolean isDebug() {
         return this.isDebug;
     }
-
-    @Override
-    public /* synthetic */ ChunkAccess getChunk(int n, int n2) {
-        return this.getChunk(n, n2);
-    }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/LevelSettings.java b/src/main/java/net/minecraft/world/level/LevelSettings.java
index 016c21af1835b1e66d432315d472b0ef5bbcd452..4ab07c22e932784632d075eff60344c81f63fe1e 100644
--- a/src/main/java/net/minecraft/world/level/LevelSettings.java
+++ b/src/main/java/net/minecraft/world/level/LevelSettings.java
@@ -26,7 +26,7 @@ public final class LevelSettings
     
     public static LevelSettings parse(final Dynamic<?> debug0, final DataPackConfig debug1) {
         final GameType debug2 = GameType.byId(debug0.get("GameType").asInt(0));
-        return new LevelSettings(debug0.get("LevelName").asString(""), debug2, debug0.get("hardcore").asBoolean(false), debug0.get("Difficulty").asNumber().map(debug0 -> Difficulty.byId(debug0.byteValue())).result().orElse(Difficulty.NORMAL), debug0.get("allowCommands").asBoolean(debug2 == GameType.CREATIVE), new GameRules((DynamicLike<?>)debug0.get("GameRules")), debug1);
+        return new LevelSettings(debug0.get("LevelName").asString(""), debug2, debug0.get("hardcore").asBoolean(false), debug0.get("Difficulty").asNumber().map(debug0l -> Difficulty.byId(debug0l.byteValue())).result().orElse(Difficulty.NORMAL), debug0.get("allowCommands").asBoolean(debug2 == GameType.CREATIVE), new GameRules((DynamicLike<?>)debug0.get("GameRules")), debug1); // MagmaCube - decompile fix
     }
     
     public String levelName() {
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index b33f8988a317a8f1626a68a07aea1998e671841a..d0fb48b69bbaa1fb3d93b59ae322f23488222d3b 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -73,7 +73,8 @@ public final class NaturalSpawner {
             if (debug6 instanceof Mob && (((Mob)(debug7 = (Mob)debug6)).isPersistenceRequired() || ((Mob)debug7).requiresCustomPersistence()) || (debug7 = debug6.getType().getCategory()) == MobCategory.MISC) continue;
             BlockPos debug8 = debug6.blockPosition();
             long debug9 = ChunkPos.asLong(debug8.getX() >> 4, debug8.getZ() >> 4);
-            debug2.query(debug9, arg_0 -> NaturalSpawner.lambda$createState$2(debug8, debug6, debug3, debug4, (MobCategory)debug7, arg_0));
+            Object finalDebug = debug7; // MagmaCube - decompile fix
+            debug2.query(debug9, arg_0 -> NaturalSpawner.lambda$createState$2(debug8, debug6, debug3, debug4, (MobCategory) finalDebug, arg_0));
         }
         return new SpawnState(debug0, debug4, debug3);
     }
@@ -312,6 +313,7 @@ public final class NaturalSpawner {
                             LOGGER.warn("Failed to create mob", (Throwable)debug26);
                             continue;
                         }
+                        Mob debug26; // MagmaCube - decompile fix
                         ((Entity)debug25).moveTo(debug21, debug19.getY(), debug23, debug4.nextFloat() * 360.0f, 0.0f);
                         if (debug25 instanceof Mob && (debug26 = (Mob)debug25).checkSpawnRules(debug0, MobSpawnType.CHUNK_GENERATION) && debug26.checkSpawnObstruction(debug0)) {
                             debug11 = debug26.finalizeSpawn(debug0, debug0.getCurrentDifficultyAt(debug26.blockPosition()), MobSpawnType.CHUNK_GENERATION, debug11, null);
@@ -343,7 +345,7 @@ public final class NaturalSpawner {
             } while (debug0.getBlockState(debug5).isAir() && debug5.getY() > 0);
         }
         if (SpawnPlacements.getPlacementType(debug1) == SpawnPlacements.Type.ON_GROUND && debug0.getBlockState((BlockPos)(debug6 = debug5.below())).isPathfindable(debug0, (BlockPos)debug6, PathComputationType.LAND)) {
-            return debug6;
+            return debug5.below();
         }
         return debug5.immutable();
     }
@@ -409,7 +411,7 @@ public final class NaturalSpawner {
             BlockPos debug6 = debug1.blockPosition();
             double debug4 = debug6.equals(this.lastCheckedPos) && debug3 == this.lastCheckedType ? this.lastCharge : ((debug7 = NaturalSpawner.getRoughBiome(debug6, debug2).getMobSettings().getMobSpawnCost(debug3)) != null ? debug7.getCharge() : 0.0);
             this.spawnPotential.addCharge(debug6, debug4);
-            this.mobCategoryCounts.addTo((Object)debug3.getCategory(), 1);
+            this.mobCategoryCounts.addTo(debug3.getCategory(), 1); // MagmaCube - decompile fix
         }
 
         public int getSpawnableChunkCount() {
diff --git a/src/main/java/net/minecraft/world/level/biome/Biome.java b/src/main/java/net/minecraft/world/level/biome/Biome.java
index d6868f7212aec9c1b16b531e984c4b2ae2f5112d..1ad19c64e062e127ea0e0c9be54dca63e01cdd67 100644
--- a/src/main/java/net/minecraft/world/level/biome/Biome.java
+++ b/src/main/java/net/minecraft/world/level/biome/Biome.java
@@ -77,14 +77,14 @@ import org.apache.logging.log4j.Logger;
 
 public final class Biome {
     public static final Logger LOGGER = LogManager.getLogger();
-    public static final Codec<Biome> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)ClimateSettings.CODEC.forGetter(debug0 -> debug0.climateSettings), (App)BiomeCategory.CODEC.fieldOf("category").forGetter(debug0 -> debug0.biomeCategory), (App)Codec.FLOAT.fieldOf("depth").forGetter(debug0 -> Float.valueOf(debug0.depth)), (App)Codec.FLOAT.fieldOf("scale").forGetter(debug0 -> Float.valueOf(debug0.scale)), (App)BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter(debug0 -> debug0.specialEffects), (App)BiomeGenerationSettings.CODEC.forGetter(debug0 -> debug0.generationSettings), (App)MobSpawnSettings.CODEC.forGetter(debug0 -> debug0.mobSettings)).apply((Applicative)debug02, Biome::new));
-    public static final Codec<Biome> NETWORK_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)ClimateSettings.CODEC.forGetter(debug0 -> debug0.climateSettings), (App)BiomeCategory.CODEC.fieldOf("category").forGetter(debug0 -> debug0.biomeCategory), (App)Codec.FLOAT.fieldOf("depth").forGetter(debug0 -> Float.valueOf(debug0.depth)), (App)Codec.FLOAT.fieldOf("scale").forGetter(debug0 -> Float.valueOf(debug0.scale)), (App)BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter(debug0 -> debug0.specialEffects)).apply((Applicative)debug02, (debug0, debug1, debug2, debug3, debug4) -> new Biome((ClimateSettings)debug0, (BiomeCategory)debug1, debug2.floatValue(), debug3.floatValue(), (BiomeSpecialEffects)debug4, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY)));
+    public static final Codec<Biome> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(ClimateSettings.CODEC.forGetter(debug0 -> debug0.climateSettings), BiomeCategory.CODEC.fieldOf("category").forGetter(debug0 -> debug0.biomeCategory), Codec.FLOAT.fieldOf("depth").forGetter(debug0 -> Float.valueOf(debug0.depth)), Codec.FLOAT.fieldOf("scale").forGetter(debug0 -> Float.valueOf(debug0.scale)), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter(debug0 -> debug0.specialEffects), BiomeGenerationSettings.CODEC.forGetter(debug0 -> debug0.generationSettings), MobSpawnSettings.CODEC.forGetter(debug0 -> debug0.mobSettings)).apply(debug02, Biome::new)); // MagmaCube - decompile fix
+    public static final Codec<Biome> NETWORK_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(ClimateSettings.CODEC.forGetter(debug0 -> debug0.climateSettings), BiomeCategory.CODEC.fieldOf("category").forGetter(debug0 -> debug0.biomeCategory), Codec.FLOAT.fieldOf("depth").forGetter(debug0 -> Float.valueOf(debug0.depth)), Codec.FLOAT.fieldOf("scale").forGetter(debug0 -> Float.valueOf(debug0.scale)), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter(debug0 -> debug0.specialEffects)).apply(debug02, (debug0, debug1, debug2, debug3, debug4) -> new Biome((ClimateSettings)debug0, (BiomeCategory)debug1, debug2.floatValue(), debug3.floatValue(), (BiomeSpecialEffects)debug4, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY))); // MagmaCube - decompile fix
     public static final Codec<Supplier<Biome>> CODEC = RegistryFileCodec.create(Registry.BIOME_REGISTRY, DIRECT_CODEC);
     public static final Codec<List<Supplier<Biome>>> LIST_CODEC = RegistryFileCodec.homogeneousList(Registry.BIOME_REGISTRY, DIRECT_CODEC);
     private final Map<Integer, List<StructureFeature<?>>> structuresByStep = Registry.STRUCTURE_FEATURE.stream().collect(Collectors.groupingBy(debug0 -> debug0.step().ordinal()));
-    private static final PerlinSimplexNoise TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(1234L), (List<Integer>)ImmutableList.of((Object)0));
-    private static final PerlinSimplexNoise FROZEN_TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(3456L), (List<Integer>)ImmutableList.of((Object)-2, (Object)-1, (Object)0));
-    public static final PerlinSimplexNoise BIOME_INFO_NOISE = new PerlinSimplexNoise(new WorldgenRandom(2345L), (List<Integer>)ImmutableList.of((Object)0));
+    private static final PerlinSimplexNoise TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(1234L), ImmutableList.of(0)); // MagmaCube - decompile fix
+    private static final PerlinSimplexNoise FROZEN_TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(3456L), (List<Integer>)ImmutableList.of(-2, -1, 0)); // MagmaCube - decompile fix
+    public static final PerlinSimplexNoise BIOME_INFO_NOISE = new PerlinSimplexNoise(new WorldgenRandom(2345L), ImmutableList.of(0)); // MagmaCube - decompile fix
     private final ClimateSettings climateSettings;
     private final BiomeGenerationSettings generationSettings;
     private final MobSpawnSettings mobSettings;
@@ -207,7 +207,7 @@ public final class Biome {
                     }
                     catch (Exception debug19) {
                         CrashReport debug20 = CrashReport.forThrowable(debug19, "Feature placement");
-                        debug20.addCategory("Feature").setDetail("Id", Registry.STRUCTURE_FEATURE.getKey((StructureFeature<?>)debug14)).setDetail("Description", () -> Biome.lambda$generate$19((StructureFeature)debug14));
+                        debug20.addCategory("Feature").setDetail("Id", Registry.STRUCTURE_FEATURE.getKey((StructureFeature<?>)debug14)).setDetail("Description", debug14::toString);
                         throw new ReportedException(debug20);
                     }
                     ++debug11;
@@ -223,7 +223,7 @@ public final class Biome {
                 }
                 catch (Exception debug15) {
                     CrashReport debug16 = CrashReport.forThrowable(debug15, "Feature placement");
-                    debug16.addCategory("Feature").setDetail("Id", Registry.FEATURE.getKey((Feature<?>)((ConfiguredFeature)debug14).feature)).setDetail("Config", ((ConfiguredFeature)debug14).config).setDetail("Description", () -> Biome.lambda$generate$20((ConfiguredFeature)debug14));
+                    debug16.addCategory("Feature").setDetail("Id", Registry.FEATURE.getKey((Feature<?>)((ConfiguredFeature)debug14).feature)).setDetail("Config", ((ConfiguredFeature)debug14).config).setDetail("Description", debug14::toString);
                     throw new ReportedException(debug16);
                 }
                 ++debug11;
@@ -319,16 +319,8 @@ public final class Biome {
         return debug1 == null ? super.toString() : debug1.toString();
     }
 
-    private static /* synthetic */ String lambda$generate$20(ConfiguredFeature debug0) throws Exception {
-        return debug0.feature.toString();
-    }
-
-    private static /* synthetic */ String lambda$generate$19(StructureFeature debug0) throws Exception {
-        return debug0.toString();
-    }
-
     static class ClimateSettings {
-        public static final MapCodec<ClimateSettings> CODEC = RecordCodecBuilder.mapCodec(debug02 -> debug02.group((App)Precipitation.CODEC.fieldOf("precipitation").forGetter(debug0 -> debug0.precipitation), (App)Codec.FLOAT.fieldOf("temperature").forGetter(debug0 -> Float.valueOf(debug0.temperature)), (App)TemperatureModifier.CODEC.optionalFieldOf("temperature_modifier", (Object)TemperatureModifier.NONE).forGetter(debug0 -> debug0.temperatureModifier), (App)Codec.FLOAT.fieldOf("downfall").forGetter(debug0 -> Float.valueOf(debug0.downfall))).apply((Applicative)debug02, ClimateSettings::new));
+        public static final MapCodec<ClimateSettings> CODEC = RecordCodecBuilder.mapCodec(debug02 -> debug02.group(Precipitation.CODEC.fieldOf("precipitation").forGetter(debug0 -> debug0.precipitation), Codec.FLOAT.fieldOf("temperature").forGetter(debug0 -> Float.valueOf(debug0.temperature)), TemperatureModifier.CODEC.optionalFieldOf("temperature_modifier", TemperatureModifier.NONE).forGetter(debug0 -> debug0.temperatureModifier), Codec.FLOAT.fieldOf("downfall").forGetter(debug0 -> Float.valueOf(debug0.downfall))).apply(debug02, ClimateSettings::new)); // MagmaCube - decompile fix
         private final Precipitation precipitation;
         private final float temperature;
         private final TemperatureModifier temperatureModifier;
@@ -343,7 +335,7 @@ public final class Biome {
     }
 
     public static class ClimateParameters {
-        public static final Codec<ClimateParameters> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("temperature").forGetter(debug0 -> Float.valueOf(debug0.temperature)), (App)Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("humidity").forGetter(debug0 -> Float.valueOf(debug0.humidity)), (App)Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("altitude").forGetter(debug0 -> Float.valueOf(debug0.altitude)), (App)Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("weirdness").forGetter(debug0 -> Float.valueOf(debug0.weirdness)), (App)Codec.floatRange((float)0.0f, (float)1.0f).fieldOf("offset").forGetter(debug0 -> Float.valueOf(debug0.offset))).apply((Applicative)debug02, ClimateParameters::new));
+        public static final Codec<ClimateParameters> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("temperature").forGetter(debug0 -> Float.valueOf(debug0.temperature)), Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("humidity").forGetter(debug0 -> Float.valueOf(debug0.humidity)), Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("altitude").forGetter(debug0 -> Float.valueOf(debug0.altitude)), Codec.floatRange((float)-2.0f, (float)2.0f).fieldOf("weirdness").forGetter(debug0 -> Float.valueOf(debug0.weirdness)), Codec.floatRange((float)0.0f, (float)1.0f).fieldOf("offset").forGetter(debug0 -> Float.valueOf(debug0.offset))).apply((Applicative)debug02, ClimateParameters::new)); // MagmaCube - decompile fix
         private final float temperature;
         private final float humidity;
         private final float altitude;
diff --git a/src/main/java/net/minecraft/world/level/biome/BiomeSource.java b/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
index 010c232af93fdd106d0ad88e9015a44910efa791..aab4f807a055b55c659e2efd0b5faf61a8d74ea1 100644
--- a/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
@@ -122,7 +122,7 @@ implements BiomeManager.NoiseBiomeSource {
     }
 
     public boolean canGenerateStructure(StructureFeature<?> debug1) {
-        return this.supportedStructures.computeIfAbsent(debug1, debug12 -> this.possibleBiomes.stream().anyMatch(debug1 -> debug1.getGenerationSettings().isValidStart((StructureFeature<?>)debug12)));
+        return this.supportedStructures.computeIfAbsent(debug1, debug12 -> this.possibleBiomes.stream().anyMatch(debug1l -> debug1l.getGenerationSettings().isValidStart((StructureFeature<?>)debug12))); // MagmaCube - decompile fix
     }
 
     public Set<BlockState> getSurfaceBlocks() {
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index b8d41f330883436f80cf32239bae71c1010d5840..abebd152094d74def9f08a4a4e72338725877d77 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -165,7 +165,7 @@ public class Block extends BlockBehaviour implements ItemLike
         }
         final BlockStatePairKey debug6 = new BlockStatePairKey(debug0, debug5, debug3);
         final Object2ByteLinkedOpenHashMap<BlockStatePairKey> debug7 = Block.OCCLUSION_CACHE.get();
-        final byte debug8 = debug7.getAndMoveToFirst((Object)debug6);
+        final byte debug8 = debug7.getAndMoveToFirst(debug6); // MagmaCube - decompile fix
         if (debug8 != 127) {
             return debug8 != 0;
         }
@@ -175,7 +175,7 @@ public class Block extends BlockBehaviour implements ItemLike
         if (debug7.size() == 2048) {
             debug7.removeLastByte();
         }
-        debug7.putAndMoveToFirst((Object)debug6, (byte)(byte)(debug11 ? 1 : 0));
+        debug7.putAndMoveToFirst(debug6, (byte)(byte)(debug11 ? 1 : 0)); // MagmaCube - decompile fix
         return debug11;
     }
     
@@ -194,7 +194,7 @@ public class Block extends BlockBehaviour implements ItemLike
     }
     
     public static boolean isShapeFullBlock(final VoxelShape debug0) {
-        return (boolean)Block.SHAPE_FULL_BLOCK_CACHE.getUnchecked((Object)debug0);
+        return (boolean)Block.SHAPE_FULL_BLOCK_CACHE.getUnchecked(debug0); // MagmaCube - decompile fix
     }
     
     public boolean propagatesSkylightDown(final BlockState debug1, final BlockGetter debug2, final BlockPos debug3) {
@@ -219,21 +219,21 @@ public class Block extends BlockBehaviour implements ItemLike
     
     public static void dropResources(final BlockState debug0, final Level debug1, final BlockPos debug2) {
         if (debug1 instanceof ServerLevel) {
-            getDrops(debug0, (ServerLevel)debug1, debug2, null).forEach(debug2 -> popResource(debug1, debug2, debug2));
+            getDrops(debug0, (ServerLevel)debug1, debug2, null).forEach(debug22 -> popResource(debug1, debug2, debug22)); // MagmaCube - decompile fix
             debug0.spawnAfterBreak((ServerLevel)debug1, debug2, ItemStack.EMPTY);
         }
     }
     
     public static void dropResources(final BlockState debug0, final LevelAccessor debug1, final BlockPos debug2, @Nullable final BlockEntity debug3) {
         if (debug1 instanceof ServerLevel) {
-            getDrops(debug0, (ServerLevel)debug1, debug2, debug3).forEach(debug2 -> popResource((Level)debug1, debug2, debug2));
+            getDrops(debug0, (ServerLevel)debug1, debug2, debug3).forEach(debug22 -> popResource((Level)debug1, debug2, debug22)); // MagmaCube - decompile fix
             debug0.spawnAfterBreak((ServerLevel)debug1, debug2, ItemStack.EMPTY);
         }
     }
     
     public static void dropResources(final BlockState debug0, final Level debug1, final BlockPos debug2, @Nullable final BlockEntity debug3, final Entity debug4, final ItemStack debug5) {
         if (debug1 instanceof ServerLevel) {
-            getDrops(debug0, (ServerLevel)debug1, debug2, debug3, debug4, debug5).forEach(debug2 -> popResource(debug1, debug2, debug2));
+            getDrops(debug0, (ServerLevel)debug1, debug2, debug3, debug4, debug5).forEach(debug22 -> popResource(debug1, debug2, debug22)); // MagmaCube - decompile fix
             debug0.spawnAfterBreak((ServerLevel)debug1, debug2, debug5);
         }
     }
@@ -394,9 +394,8 @@ public class Block extends BlockBehaviour implements ItemLike
                 return !Shapes.joinIsNotEmpty(Shapes.block(), debug1, BooleanOp.NOT_SAME);
             }
         });
-        final Object2ByteLinkedOpenHashMap<BlockStatePairKey> debug0;
         OCCLUSION_CACHE = ThreadLocal.withInitial(() -> {
-            debug0 = new Object2ByteLinkedOpenHashMap<BlockStatePairKey>(2048, 0.25f) {
+            Object2ByteLinkedOpenHashMap<BlockStatePairKey> debug0 = new Object2ByteLinkedOpenHashMap<BlockStatePairKey>(2048, 0.25f) { // MagmaCube - decompile fix
                 protected void rehash(final int debug1) {
                 }
             };
diff --git a/src/main/java/net/minecraft/world/level/block/Rotation.java b/src/main/java/net/minecraft/world/level/block/Rotation.java
index 552816811526331345e08e2d6930c67387eb03cb..eab12de7d2a14d7d81e4cdd2f113836bb2cd18fa 100644
--- a/src/main/java/net/minecraft/world/level/block/Rotation.java
+++ b/src/main/java/net/minecraft/world/level/block/Rotation.java
@@ -20,7 +20,7 @@ public enum Rotation
     private Rotation(final OctahedralGroup debug3) {
         this.rotation = debug3;
     }
-    
+
     public Rotation getRotated(final Rotation debug1) {
         Label_0148: {
             switch (debug1) {
@@ -42,7 +42,6 @@ public enum Rotation
                             break Label_0148;
                         }
                     }
-                    break;
                 }
                 case COUNTERCLOCKWISE_90: {
                     switch (this) {
@@ -62,7 +61,6 @@ public enum Rotation
                             break Label_0148;
                         }
                     }
-                    break;
                 }
                 case CLOCKWISE_90: {
                     switch (this) {
@@ -82,7 +80,6 @@ public enum Rotation
                             break Label_0148;
                         }
                     }
-                    break;
                 }
             }
         }
@@ -135,7 +132,7 @@ public enum Rotation
     }
     
     public static List<Rotation> getShuffled(final Random debug0) {
-        final List<Rotation> debug = (List<Rotation>)Lists.newArrayList((Object[])values());
+        final List<Rotation> debug = Lists.newArrayList(values()); // MagmaCube - decompile fix
         Collections.shuffle(debug, debug0);
         return debug;
     }
diff --git a/src/main/java/net/minecraft/world/level/block/SupportType.java b/src/main/java/net/minecraft/world/level/block/SupportType.java
index 906d91dc0ca6807141103e720a3bbca7500062d0..f829fe8a66b1448318902a6e7586994a8fb80a85 100644
--- a/src/main/java/net/minecraft/world/level/block/SupportType.java
+++ b/src/main/java/net/minecraft/world/level/block/SupportType.java
@@ -21,7 +21,6 @@ public enum SupportType
         private final VoxelShape CENTER_SUPPORT_SHAPE;
         
         {
-            this.CENTER_SUPPORT_WIDTH = 1;
             this.CENTER_SUPPORT_SHAPE = Block.box(7.0, 0.0, 7.0, 9.0, 10.0, 9.0);
         }
         
@@ -35,7 +34,6 @@ public enum SupportType
         private final VoxelShape RIGID_SUPPORT_SHAPE;
         
         {
-            this.RIGID_SUPPORT_WIDTH = 2;
             this.RIGID_SUPPORT_SHAPE = Shapes.join(Shapes.block(), Block.box(2.0, 0.0, 2.0, 14.0, 16.0, 14.0), BooleanOp.ONLY_FIRST);
         }
         
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index 15710e5eeba054863ff68d8c44483bfa182da95a..85592e4b6608a8c1319c050e96d288af5e0744f3 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -69,14 +69,12 @@ public abstract class BlockEntity
     @Nullable
     public static BlockEntity loadStatic(final BlockState debug0, final CompoundTag debug1) {
         final String debug4 = debug1.getString("id");
-        final Object o;
-        final Object o2;
-        return Registry.BLOCK_ENTITY_TYPE.getOptional(new ResourceLocation(debug4)).map(debug1 -> {
+        return Registry.BLOCK_ENTITY_TYPE.getOptional(new ResourceLocation(debug4)).map(debug1l -> { // MagmaCube - decompile fix
             try {
-                return debug1.create();
+                return debug1l.create(); // MagmaCube - decompile fix
             }
             catch (Throwable debug5) {
-                BlockEntity.LOGGER.error("Failed to create block entity {}", o, (Object)debug5);
+                BlockEntity.LOGGER.error("Failed to create block entity {}", debug1l, debug5); // MagmaCube - decompile fix
                 return null;
             }
         }).map(debug3 -> {
@@ -85,7 +83,7 @@ public abstract class BlockEntity
                 return debug3;
             }
             catch (Throwable debug6) {
-                BlockEntity.LOGGER.error("Failed to load data for block entity {}", o2, (Object)debug6);
+                BlockEntity.LOGGER.error("Failed to load data for block entity {}", debug3, debug6); // MagmaCube - decompile fix
                 return null;
             }
         }).orElseGet(() -> {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
index a6e4391a05dd5aee667e503fdefa7640f5897dfd..b601502850f3ca60af97446b03b5d8f484fe08eb 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
@@ -142,7 +142,7 @@ public class BlockEntityType<T extends BlockEntity>
         }
         
         public static <T extends BlockEntity> Builder<T> of(final Supplier<? extends T> debug0, final Block... debug1) {
-            return new Builder<T>(debug0, (Set<Block>)ImmutableSet.copyOf((Object[])debug1));
+            return new Builder<T>(debug0, (Set<Block>)ImmutableSet.copyOf(debug1)); // MagmaCube - decompile fix
         }
         
         public BlockEntityType<T> build(final Type<?> debug1) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/JigsawBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/JigsawBlockEntity.java
index a7187275f359720b81b6fdf4b1d66d2ea04b4d5f..d1a692e48da10b9701dc92c89404bd122fdfcea1 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/JigsawBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/JigsawBlockEntity.java
@@ -127,7 +127,7 @@ extends BlockEntity {
         StructureFeatureManager debug6 = debug1.structureFeatureManager();
         Random debug7 = debug1.getRandom();
         BlockPos debug8 = this.getBlockPos();
-        ArrayList debug9 = Lists.newArrayList();
+        ArrayList<PoolElementStructurePiece> debug9 = Lists.newArrayList(); // MagmaCube - decompile fix
         StructureTemplate debug10 = new StructureTemplate();
         debug10.fillFromWorld(debug1, debug8, new BlockPos(1, 1, 1), false, null);
         SinglePoolElement debug11 = new SinglePoolElement(debug10);
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
index 219559d2f58b2f9e5f370f9a1f1545355ab2b525..b0df5684b9d7c320a3161effdeb93a610694fcd1 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
@@ -61,7 +61,7 @@ extends BlockEntity {
         this.color = DyeColor.byName(debug2.getString("Color"), DyeColor.BLACK);
         for (int debug3 = 0; debug3 < 4; ++debug3) {
             String debug4 = debug2.getString("Text" + (debug3 + 1));
-            MutableComponent debug5 = Component.Serializer.fromJson(debug4.isEmpty() ? "Â¥"Â¥"" : debug4);
+            MutableComponent debug5 = Component.Serializer.fromJson(debug4.isEmpty() ? "\"\"" : debug4); // MagmaCube - decompile fix
             if (this.level instanceof ServerLevel) {
                 try {
                     this.messages[debug3] = ComponentUtils.updateForEntity(this.createCommandSourceStack(null), debug5, null, 0);
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockState.java b/src/main/java/net/minecraft/world/level/block/state/BlockState.java
index 26543c0ae85958e20e3250cd78f4218eefbbf116..f4d114f5f18757a58d380ec984b93d54e7955812 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockState.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockState.java
@@ -21,6 +21,6 @@ public class BlockState extends BlockBehaviour.BlockStateBase
     }
     
     static {
-        CODEC = StateHolder.codec((com.mojang.serialization.Codec<Object>)Registry.BLOCK, Block::defaultBlockState).stable();
+        CODEC = StateHolder.codec(Registry.BLOCK, Block::defaultBlockState).stable(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
index 53843d0024e2acd65cc29b281362f65802d00c10..e3fd020da1634423e744219315c16a755bef5ad8 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
@@ -53,22 +53,28 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
     private final ImmutableList<S> states;
 
     protected StateDefinition(Function<O, S> debug1, O debug2, Factory<O, S> debug3, Map<String, Property<?>> debug4) {
-        Object debug82;
         this.owner = debug2;
         this.propertiesByName = ImmutableSortedMap.copyOf(debug4);
         Supplier<StateHolder> debug5 = () -> (StateHolder)debug1.apply(debug2);
         MapCodec<StateHolder> debug6 = MapCodec.of((MapEncoder)Encoder.empty(), (MapDecoder)Decoder.unit(debug5));
-        for (Object debug82 : this.propertiesByName.entrySet()) {
-            debug6 = StateDefinition.appendPropertyCodec(debug6, debug5, (String)debug82.getKey(), (Property)debug82.getValue());
+        for (Map.Entry<String, Property<?>> debug822 : this.propertiesByName.entrySet()) { // MagmaCube - decompile fix
+            debug6 = StateDefinition.appendPropertyCodec(debug6, debug5, (String)debug822.getKey(), (Property)debug822.getValue()); // MagmaCube - decompile fix
         }
         MapCodec<StateHolder> debug7 = debug6;
-        debug82 = Maps.newLinkedHashMap();
+        Map debug82 = Maps.newLinkedHashMap(); // MagmaCube - decompile fix
         ArrayList debug9 = Lists.newArrayList();
-        Stream<List<List<Object>>> debug10 = Stream.of(Collections.emptyList());
+        Stream<List<Pair<Property<?>, Comparable<?>>>> debug10 = Stream.of(Collections.emptyList()); // MagmaCube - decompile fix
         for (Object debug12 : this.propertiesByName.values()) {
             debug10 = debug10.flatMap(arg_0 -> StateDefinition.lambda$new$2((Property)debug12, arg_0));
         }
-        debug10.forEach(arg_0 -> StateDefinition.lambda$new$3(debug3, debug2, debug7, (Map)debug82, debug9, arg_0));
+        // MagmaCube start - decompile fix
+        debug10.forEach(arg_0 -> {
+            ImmutableMap<Property<?>, Comparable<?>> debug66 = arg_0.stream().collect(ImmutableMap.toImmutableMap(Pair::getFirst, Pair::getSecond));
+            StateHolder debug77 = (StateHolder)debug3.create(debug2, debug66, (MapCodec) (Object) debug7);
+            debug82.put(debug66, debug77);
+            debug9.add(debug77);
+        });
+        // MagmaCube end - decompile fix
         for (Object debug12 : debug9) {
             ((StateHolder)debug12).populateNeighbours(debug82);
         }
@@ -76,7 +82,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
     }
 
     private static <S extends StateHolder<?, S>, T extends Comparable<T>> MapCodec<S> appendPropertyCodec(MapCodec<S> debug0, Supplier<S> debug12, String debug2, Property<T> debug3) {
-        return Codec.mapPair(debug0, (MapCodec)debug3.valueCodec().fieldOf(debug2).setPartial(() -> debug3.value((StateHolder)debug12.get()))).xmap(debug1 -> (StateHolder)((StateHolder)debug1.getFirst()).setValue(debug3, ((Property.Value)debug1.getSecond()).value()), debug1 -> Pair.of((Object)debug1, debug3.value((StateHolder<?, ?>)debug1)));
+        return Codec.mapPair(debug0, debug3.valueCodec().fieldOf(debug2).setPartial(() -> debug3.value(debug12.get()))).xmap(debug1 -> (debug1.getFirst()).setValue(debug3, debug1.getSecond().value()), debug1 -> Pair.of(debug1, debug3.value(debug1))); // MagmaCube - decompile fix
     }
 
     public ImmutableList<S> getPossibleStates() {
@@ -104,13 +110,6 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
         return (Property)this.propertiesByName.get((Object)debug1);
     }
 
-    private static /* synthetic */ void lambda$new$3(Factory debug0, Object debug1, MapCodec debug2, Map debug3, List debug4, List debug5) {
-        ImmutableMap debug6 = (ImmutableMap)debug5.stream().collect(ImmutableMap.toImmutableMap(Pair::getFirst, Pair::getSecond));
-        StateHolder debug7 = (StateHolder)debug0.create(debug1, debug6, debug2);
-        debug3.put(debug6, debug7);
-        debug4.add(debug7);
-    }
-
     private static /* synthetic */ Stream lambda$new$2(Property debug0, List debug1) {
         return debug0.getPossibleValues().stream().map(debug2 -> {
             ArrayList debug3 = Lists.newArrayList((Iterable)debug1);
@@ -145,7 +144,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
                 throw new IllegalArgumentException(this.owner + " attempted use property " + debug2 + " with <= 1 possible values");
             }
             for (Comparable debug5 : debug3) {
-                String debug6 = debug1.getName(debug5);
+                String debug6 = debug1.getName((T) debug5); // MagmaCube - decompile fix
                 if (NAME_PATTERN.matcher(debug6).matches()) continue;
                 throw new IllegalArgumentException(this.owner + " has property: " + debug2 + " with invalidly named value: " + debug6);
             }
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
index 0f7ec36dfcfd7b6a9e62802fbe3378f101015a18..d86704123076f8bea59e9041c6d93d3ca38da5b3 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
@@ -44,12 +44,7 @@ public abstract class StateHolder<O, S> {
         }
 
         private <T extends Comparable<T>> String getName(Property<T> debug1, Comparable<?> debug2) {
-            return debug1.getName(debug2);
-        }
-
-        @Override
-        public /* synthetic */ Object apply(@Nullable Object object) {
-            return this.apply((Map.Entry)object);
+            return debug1.getName((T) debug2); // MagmaCube - decompile fix
         }
     };
     protected final O owner;
@@ -64,7 +59,7 @@ public abstract class StateHolder<O, S> {
     }
 
     public <T extends Comparable<T>> S cycle(Property<T> debug1) {
-        return this.setValue(debug1, (Comparable)StateHolder.findNextInCollection(debug1.getPossibleValues(), this.getValue(debug1)));
+        return this.setValue(debug1, StateHolder.findNextInCollection(debug1.getPossibleValues(), this.getValue(debug1))); // MagmaCube - decompile fix
     }
 
     protected static <T> T findNextInCollection(Collection<T> debug0, T debug1) {
@@ -134,8 +129,8 @@ public abstract class StateHolder<O, S> {
             throw new IllegalStateException();
         }
         HashBasedTable debug2 = HashBasedTable.create();
-        for (Map.Entry debug4 : this.values.entrySet()) {
-            Property debug5 = (Property)debug4.getKey();
+        for (Map.Entry<Property<?>, Comparable<?>> debug4 : this.values.entrySet()) { // MagmaCube - decompile fix
+            Property<?> debug5 = (Property)debug4.getKey(); // MagmaCube - decompile fix
             for (Comparable debug7 : debug5.getPossibleValues()) {
                 if (debug7 == debug4.getValue()) continue;
                 debug2.put((Object)debug5, (Object)debug7, debug1.get(this.makeNeighbourValues(debug5, debug7)));
@@ -156,9 +151,9 @@ public abstract class StateHolder<O, S> {
 
     protected static <O, S extends StateHolder<O, S>> Codec<S> codec(Codec<O> debug02, Function<O, S> debug12) {
         return debug02.dispatch("Name", debug0 -> debug0.owner, debug1 -> {
-            StateHolder debug2 = (StateHolder)debug12.apply(debug1);
+            StateHolder<O, S> debug2 = debug12.apply(debug1); // MagmaCube - decompile fix
             if (debug2.getValues().isEmpty()) {
-                return Codec.unit((Object)debug2);
+                return (Codec<S>) Codec.unit(debug2); // MagmaCube - decompile fix
             }
             return debug2.propertiesCodec.fieldOf("Properties").codec();
         });
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
index 8177a545cb724f0aecc86213dc7525990b870cbc..04d311ebb500919644c6e7e0adea1e3e07c77cac 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
@@ -18,18 +18,18 @@ public abstract class Property<T extends Comparable<T>>
     private final Codec<Value<T>> valueCodec;
     
     protected Property(final String debug1, final Class<T> debug2) {
-        this.codec = (Codec<T>)Codec.STRING.comapFlatMap(debug1 -> this.getValue(debug1).map((Function<? super T, ?>)DataResult::success).orElseGet(() -> DataResult.error("Unable to read property: " + this + " with value: " + debug1)), (Function)this::getName);
-        this.valueCodec = (Codec<Value<T>>)this.codec.xmap((Function)this::value, (Function)Value::value);
+        this.codec = (Codec<T>)Codec.STRING.comapFlatMap(debug12 -> this.getValue(debug1).map(DataResult::success).orElseGet(() -> DataResult.error("Unable to read property: " + this + " with value: " + debug1)), this::getName); // MagmaCube - decompile fix
+        this.valueCodec = (Codec<Value<T>>)this.codec.xmap(this::value, Value::value); // MagmaCube - decompile fix
         this.clazz = debug2;
         this.name = debug1;
     }
     
     public Value<T> value(final T debug1) {
-        return new Value<T>(this, (Comparable)debug1);
+        return new Value<T>(this, debug1); // MagmaCube - decompile fix
     }
     
     public Value<T> value(final StateHolder<?, ?> debug1) {
-        return new Value<T>(this, (Comparable)debug1.getValue((Property<Comparable>)this));
+        return new Value<T>(this, debug1.getValue(this)); // MagmaCube - decompile fix
     }
     
     public Stream<Value<T>> getAllValues() {
diff --git a/src/main/java/net/minecraft/world/level/border/WorldBorder.java b/src/main/java/net/minecraft/world/level/border/WorldBorder.java
index 087f99cfaa3f3a3cd7e56f0ee120f12c981da7f5..9c03030f554a5a3bc97c6664015d178dde155203 100644
--- a/src/main/java/net/minecraft/world/level/border/WorldBorder.java
+++ b/src/main/java/net/minecraft/world/level/border/WorldBorder.java
@@ -29,7 +29,7 @@ public class WorldBorder
     public static final Settings DEFAULT_SETTINGS;
     
     public WorldBorder() {
-        this.listeners = (List<BorderChangeListener>)Lists.newArrayList();
+        this.listeners = Lists.newArrayList(); // MagmaCube - decompile fix
         this.damagePerBlock = 0.2;
         this.damageSafeZone = 5.0;
         this.warningTime = 15;
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
index 50e1d1f78acb1eb721a5fba10e5988c9f9c163c2..39dad319c72eef956ff141cdf40035968f259867 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
@@ -44,7 +44,7 @@ public class ChunkStatus {
         if (debug5 instanceof ProtoChunk && !debug5.getStatus().isOrAfter(debug0)) {
             ((ProtoChunk)debug5).setStatus(debug0);
         }
-        return CompletableFuture.completedFuture(Either.left((Object)debug5));
+        return CompletableFuture.completedFuture(Either.left(debug5)); // MagmaCube - decompile fix
     };
     public static final ChunkStatus EMPTY = ChunkStatus.registerSimple("empty", null, -1, PRE_FEATURES, ChunkType.PROTOCHUNK, (debug0, debug1, debug2, debug3) -> {});
     public static final ChunkStatus STRUCTURE_STARTS = ChunkStatus.register("structure_starts", EMPTY, 0, PRE_FEATURES, ChunkType.PROTOCHUNK, (debug0, debug1, debug2, debug3, debug4, debug5, debug6, debug7) -> {
@@ -56,7 +56,7 @@ public class ChunkStatus {
                 ((ProtoChunk)debug7).setStatus(debug0);
             }
         }
-        return CompletableFuture.completedFuture(Either.left((Object)debug7));
+        return CompletableFuture.completedFuture(Either.left(debug7)); // MagmaCube - decompile fix
     });
     public static final ChunkStatus STRUCTURE_REFERENCES = ChunkStatus.registerSimple("structure_references", STRUCTURE_STARTS, 8, PRE_FEATURES, ChunkType.PROTOCHUNK, (debug0, debug1, debug2, debug3) -> {
         WorldGenRegion debug4 = new WorldGenRegion(debug0, debug2);
@@ -79,13 +79,13 @@ public class ChunkStatus {
             debug2.applyBiomeDecoration(debug9, debug1.structureFeatureManager().forWorldGenRegion(debug9));
             debug8.setStatus(debug0);
         }
-        return CompletableFuture.completedFuture(Either.left((Object)debug7));
+        return CompletableFuture.completedFuture(Either.left(debug7)); // MagmaCube - decompile fix
     });
     public static final ChunkStatus LIGHT = ChunkStatus.register("light", FEATURES, 1, POST_FEATURES, ChunkType.PROTOCHUNK, (debug0, debug1, debug2, debug3, debug4, debug5, debug6, debug7) -> ChunkStatus.lightChunk(debug0, debug4, debug7), (debug0, debug1, debug2, debug3, debug4, debug5) -> ChunkStatus.lightChunk(debug0, debug3, debug5));
     public static final ChunkStatus SPAWN = ChunkStatus.registerSimple("spawn", LIGHT, 0, POST_FEATURES, ChunkType.PROTOCHUNK, (debug0, debug1, debug2, debug3) -> debug1.spawnOriginalMobs(new WorldGenRegion(debug0, debug2)));
     public static final ChunkStatus HEIGHTMAPS = ChunkStatus.registerSimple("heightmaps", SPAWN, 0, POST_FEATURES, ChunkType.PROTOCHUNK, (debug0, debug1, debug2, debug3) -> {});
     public static final ChunkStatus FULL = ChunkStatus.register("full", HEIGHTMAPS, 0, POST_FEATURES, ChunkType.LEVELCHUNK, (debug0, debug1, debug2, debug3, debug4, debug5, debug6, debug7) -> (CompletableFuture)debug5.apply(debug7), (debug0, debug1, debug2, debug3, debug4, debug5) -> (CompletableFuture)debug4.apply(debug5));
-    private static final List<ChunkStatus> STATUS_BY_RANGE = ImmutableList.of((Object)FULL, (Object)FEATURES, (Object)LIQUID_CARVERS, (Object)STRUCTURE_STARTS, (Object)STRUCTURE_STARTS, (Object)STRUCTURE_STARTS, (Object)STRUCTURE_STARTS, (Object)STRUCTURE_STARTS, (Object)STRUCTURE_STARTS, (Object)STRUCTURE_STARTS, (Object)STRUCTURE_STARTS);
+    private static final List<ChunkStatus> STATUS_BY_RANGE = ImmutableList.of(FULL, FEATURES, LIQUID_CARVERS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS, STRUCTURE_STARTS); // MagmaCube - decompile fix
     private static final IntList RANGE_BY_STATUS = (IntList)Util.make(new IntArrayList(ChunkStatus.getStatusList().size()), debug0 -> {
         int debug1 = 0;
         for (int debug2 = ChunkStatus.getStatusList().size() - 1; debug2 >= 0; --debug2) {
@@ -228,7 +228,7 @@ public class ChunkStatus {
                     ((ProtoChunk)debug8).setStatus(debug1);
                 }
             }
-            return CompletableFuture.completedFuture(Either.left((Object)debug8));
+            return CompletableFuture.completedFuture(Either.left(debug8)); // MagmaCube - decompile fix
         }
 
         public void doWork(ServerLevel var1, ChunkGenerator var2, List<ChunkAccess> var3, ChunkAccess var4);
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index b4769a6284b441c19a646812c47deac6946c6605..f06cc4b7fd1c9312dc741b5a566dd9fae9d79bf9 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -466,8 +466,8 @@ implements ChunkAccess {
             for (Entity debug9 : this.entitySections[debug7].find(Entity.class)) {
                 if (debug1 != null && debug9.getType() != debug1) continue;
                 Entity debug10 = debug9;
-                if (!debug9.getBoundingBox().intersects(debug2) || !debug4.test(debug10)) continue;
-                debug3.add(debug10);
+                if (!debug9.getBoundingBox().intersects(debug2) || !debug4.test((T) debug10)) continue; // MagmaCube - decompile fix
+                debug3.add((T) debug10); // MagmaCube - decompile fix
             }
         }
     }
@@ -479,8 +479,8 @@ implements ChunkAccess {
         debug6 = Mth.clamp(debug6, 0, this.entitySections.length - 1);
         for (int debug7 = debug5; debug7 <= debug6; ++debug7) {
             for (Entity debug9 : this.entitySections[debug7].find(debug1)) {
-                if (!debug9.getBoundingBox().intersects(debug2) || debug4 != null && !debug4.test(debug9)) continue;
-                debug3.add(debug9);
+                if (!debug9.getBoundingBox().intersects(debug2) || debug4 != null && !debug4.test((T) debug9)) continue; // MagmaCube - decompile fix
+                debug3.add((T) debug9); // MagmaCube - decompile fix
             }
         }
     }
@@ -713,11 +713,11 @@ implements ChunkAccess {
     }
 
     public void packTicks(ServerLevel debug1) {
-        if (this.blockTicks == EmptyTickList.empty()) {
+        if (this.blockTicks == EmptyTickList.<Block>empty()) { // MagmaCube - decompile fix
             this.blockTicks = new ChunkTickList<Block>(Registry.BLOCK::getKey, ((ServerTickList)debug1.getBlockTicks()).fetchTicksInChunk(this.chunkPos, true, false), debug1.getGameTime());
             this.setUnsaved(true);
         }
-        if (this.liquidTicks == EmptyTickList.empty()) {
+        if (this.liquidTicks == EmptyTickList.<Fluid>empty()) { // MagmaCube - decompile fix
             this.liquidTicks = new ChunkTickList<Fluid>(Registry.FLUID::getKey, ((ServerTickList)debug1.getLiquidTicks()).fetchTicksInChunk(this.chunkPos, true, false), debug1.getGameTime());
             this.setUnsaved(true);
         }
diff --git a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
index da827ad044b79c7d6bd7c44da3ba5e3b491f752f..e41afa6f8d0c2bf729c166a86689121e28bb0d7f 100644
--- a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
+++ b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
@@ -50,7 +50,7 @@ public class DimensionType {
     public static final ResourceLocation OVERWORLD_EFFECTS = new ResourceLocation("overworld");
     public static final ResourceLocation NETHER_EFFECTS = new ResourceLocation("the_nether");
     public static final ResourceLocation END_EFFECTS = new ResourceLocation("the_end");
-    public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)Codec.LONG.optionalFieldOf("fixed_time").xmap(debug0 -> debug0.map(OptionalLong::of).orElseGet(OptionalLong::empty), debug0 -> debug0.isPresent() ? Optional.of(debug0.getAsLong()) : Optional.empty()).forGetter(debug0 -> debug0.fixedTime), (App)Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), (App)Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), (App)Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), (App)Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), (App)Codec.doubleRange((double)1.0E-5f, (double)3.0E7).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), (App)Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), (App)Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), (App)Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), (App)Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), (App)Codec.intRange((int)0, (int)256).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), (App)ResourceLocation.CODEC.fieldOf("infiniburn").forGetter(debug0 -> debug0.infiniburn), (App)ResourceLocation.CODEC.fieldOf("effects").orElse((Object)OVERWORLD_EFFECTS).forGetter(debug0 -> debug0.effectsLocation), (App)Codec.FLOAT.fieldOf("ambient_light").forGetter(debug0 -> Float.valueOf(debug0.ambientLight))).apply((Applicative)debug02, DimensionType::new));
+    public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Codec.LONG.optionalFieldOf("fixed_time").xmap(debug0 -> debug0.map(OptionalLong::of).orElseGet(OptionalLong::empty), debug0 -> debug0.isPresent() ? Optional.of(debug0.getAsLong()) : Optional.empty()).forGetter(debug0 -> debug0.fixedTime), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange((double)1.0E-5f, (double)3.0E7).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange((int)0, (int)256).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter(debug0 -> debug0.infiniburn), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter(debug0 -> debug0.effectsLocation), Codec.FLOAT.fieldOf("ambient_light").forGetter(debug0 -> Float.valueOf(debug0.ambientLight))).apply((Applicative)debug02, DimensionType::new)); // MagmaCube - decompile fix
     public static final float[] MOON_BRIGHTNESS_PER_PHASE = new float[]{1.0f, 0.75f, 0.5f, 0.25f, 0.0f, 0.25f, 0.5f, 0.75f};
     public static final ResourceKey<DimensionType> OVERWORLD_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld"));
     public static final ResourceKey<DimensionType> NETHER_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("the_nether"));
diff --git a/src/main/java/net/minecraft/world/level/levelgen/Heightmap.java b/src/main/java/net/minecraft/world/level/levelgen/Heightmap.java
index 13cd0a212d702cc42fbfcdb8108e4682efce64fe..1c95ec297886fac8812c6506ce46cb31ed7c87bb 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/Heightmap.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/Heightmap.java
@@ -44,7 +44,7 @@ public class Heightmap
         for (int debug7 = 0; debug7 < 16; ++debug7) {
             for (int debug8 = 0; debug8 < 16; ++debug8) {
                 for (final Types debug9 : debug1) {
-                    debug3.add((Object)debug0.getOrCreateHeightmapUnprimed(debug9));
+                    debug3.add(debug0.getOrCreateHeightmapUnprimed(debug9)); // MagmaCube - decompile fix
                 }
                 for (int debug10 = debug5 - 1; debug10 >= 0; --debug10) {
                     debug6.set(debug7, debug10, debug8);
@@ -178,14 +178,13 @@ public class Heightmap
         
         static {
             CODEC = StringRepresentable.fromEnum(Types::values, Types::getFromKey);
-            final Types[] array;
-            int length;
-            int i;
-            Types debug;
-            REVERSE_LOOKUP = Util.make((Map<String, Types>)Maps.newHashMap(), debug0 -> {
-                values();
-                for (length = array.length; i < length; ++i) {
-                    debug = array[i];
+            // MagmaCube start - decompile fix
+            REVERSE_LOOKUP = Util.make(Maps.newHashMap(), debug0 -> {
+                Types[] array = values();
+                int i = 0;
+                for (int length = array.length; i < length; ++i) {
+                    Types debug = array[i];
+                    // MagmaCube end - decompile fix
                     debug0.put(debug.serializationKey, debug);
                 }
             });
diff --git a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
index 88241e898b945ef2d5c730bf47c412d9f847dff2..907c19ba048cad71ac898eb438a342fa58ca115e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -63,7 +63,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class WorldGenSettings {
-    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.create(debug02 -> debug02.group((App)Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), (App)Codec.BOOL.fieldOf("generate_features").orElse((Object)true).stable().forGetter(WorldGenSettings::generateFeatures), (App)Codec.BOOL.fieldOf("bonus_chest").orElse((Object)false).stable().forGetter(WorldGenSettings::generateBonusChest), (App)MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), (App)Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter(debug0 -> debug0.legacyCustomOptions)).apply((Applicative)debug02, debug02.stable((Object)((Function5)WorldGenSettings::new)))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
+    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.<WorldGenSettings>create(debug02 -> debug02.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter(debug0 -> debug0.legacyCustomOptions)).apply(debug02, debug02.stable(WorldGenSettings::new))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity()); // MagmaCube - decompile fix
     private static final Logger LOGGER = LogManager.getLogger();
     private final long seed;
     private final boolean generateFeatures;
@@ -77,9 +77,9 @@ public class WorldGenSettings {
             return DataResult.error((String)"Overworld settings missing");
         }
         if (this.stable()) {
-            return DataResult.success((Object)this, (Lifecycle)Lifecycle.stable());
+            return DataResult.success(this, (Lifecycle)Lifecycle.stable()); // MagmaCube - decompile fix
         }
-        return DataResult.success((Object)this);
+        return DataResult.success(this); // MagmaCube - decompile fix
     }
 
     private boolean stable() {
@@ -218,7 +218,7 @@ public class WorldGenSettings {
         switch (debug7) {
             case "flat": {
                 JsonObject debug16 = !debug2.isEmpty() ? GsonHelper.parse(debug2) : new JsonObject();
-                Dynamic debug17 = new Dynamic((DynamicOps)JsonOps.INSTANCE, (Object)debug16);
+                Dynamic<JsonObject> debug17 = new Dynamic(JsonOps.INSTANCE, debug16); // MagmaCube - decompile fix
                 return new WorldGenSettings(debug8, debug5, false, WorldGenSettings.withOverworld(debug10, debug13, (ChunkGenerator)new FlatLevelSource(FlatLevelGeneratorSettings.CODEC.parse(debug17).resultOrPartial(((Logger)LOGGER)::error).orElseGet(() -> FlatLevelGeneratorSettings.getDefault(debug11)))));
             }
             case "debug_all_block_states": {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/JunglePyramidPiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/JunglePyramidPiece.java
index 0a68040fd272a4663a2e7648d1a93fff2e8305b6..ee381aea2fa4d1310c36ce121ac9719bfab557e4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/JunglePyramidPiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/JunglePyramidPiece.java
@@ -110,10 +110,10 @@ public class JunglePyramidPiece extends ScatteredFeaturePiece
         this.generateBox(debug1, debug5, 4, 9, 10, 4, 9, 10, false, debug4, JunglePyramidPiece.STONE_SELECTOR);
         this.generateBox(debug1, debug5, 7, 9, 10, 7, 9, 10, false, debug4, JunglePyramidPiece.STONE_SELECTOR);
         this.generateBox(debug1, debug5, 5, 9, 7, 6, 9, 7, false, debug4, JunglePyramidPiece.STONE_SELECTOR);
-        final BlockState debug10 = ((StateHolder<O, BlockState>)Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.EAST);
-        final BlockState debug11 = ((StateHolder<O, BlockState>)Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.WEST);
-        final BlockState debug12 = ((StateHolder<O, BlockState>)Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.SOUTH);
-        final BlockState debug13 = ((StateHolder<O, BlockState>)Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.NORTH);
+        final BlockState debug10 = (Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.EAST);
+        final BlockState debug11 = (Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.WEST);
+        final BlockState debug12 = (Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.SOUTH);
+        final BlockState debug13 = (Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.NORTH);
         this.placeBlock(debug1, debug13, 5, 9, 6, debug5);
         this.placeBlock(debug1, debug13, 6, 9, 6, debug5);
         this.placeBlock(debug1, debug12, 5, 9, 8, debug5);
@@ -152,39 +152,39 @@ public class JunglePyramidPiece extends ScatteredFeaturePiece
         this.generateBox(debug1, debug5, 7, -2, 1, 9, -2, 1, false, debug4, JunglePyramidPiece.STONE_SELECTOR);
         this.generateBox(debug1, debug5, 6, -3, 1, 6, -3, 1, false, debug4, JunglePyramidPiece.STONE_SELECTOR);
         this.generateBox(debug1, debug5, 6, -1, 1, 6, -1, 1, false, debug4, JunglePyramidPiece.STONE_SELECTOR);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue((Property<Comparable>)TripWireHookBlock.FACING, Direction.EAST)).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, true), 1, -3, 8, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue((Property<Comparable>)TripWireHookBlock.FACING, Direction.WEST)).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, true), 4, -3, 8, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE.defaultBlockState()).setValue((Property<Comparable>)TripWireBlock.EAST, true)).setValue((Property<Comparable>)TripWireBlock.WEST, true)).setValue((Property<Comparable>)TripWireBlock.ATTACHED, true), 2, -3, 8, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE.defaultBlockState()).setValue((Property<Comparable>)TripWireBlock.EAST, true)).setValue((Property<Comparable>)TripWireBlock.WEST, true)).setValue((Property<Comparable>)TripWireBlock.ATTACHED, true), 3, -3, 8, debug5);
-        final BlockState debug15 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE);
+        this.placeBlock(debug1, ((Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue(TripWireHookBlock.FACING, Direction.EAST)).setValue(TripWireHookBlock.ATTACHED, true), 1, -3, 8, debug5);
+        this.placeBlock(debug1, ((Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue(TripWireHookBlock.FACING, Direction.WEST)).setValue(TripWireHookBlock.ATTACHED, true), 4, -3, 8, debug5);
+        this.placeBlock(debug1, (((Blocks.TRIPWIRE.defaultBlockState()).setValue(TripWireBlock.EAST, true)).setValue(TripWireBlock.WEST, true)).setValue(TripWireBlock.ATTACHED, true), 2, -3, 8, debug5);
+        this.placeBlock(debug1, (((Blocks.TRIPWIRE.defaultBlockState()).setValue(TripWireBlock.EAST, true)).setValue(TripWireBlock.WEST, true)).setValue(TripWireBlock.ATTACHED, true), 3, -3, 8, debug5);
+        final BlockState debug15 = ((Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE);
         this.placeBlock(debug1, debug15, 5, -3, 7, debug5);
         this.placeBlock(debug1, debug15, 5, -3, 6, debug5);
         this.placeBlock(debug1, debug15, 5, -3, 5, debug5);
         this.placeBlock(debug1, debug15, 5, -3, 4, debug5);
         this.placeBlock(debug1, debug15, 5, -3, 3, debug5);
         this.placeBlock(debug1, debug15, 5, -3, 2, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 5, -3, 1, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 4, -3, 1, debug5);
+        this.placeBlock(debug1, ((Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 5, -3, 1, debug5);
+        this.placeBlock(debug1, ((Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 4, -3, 1, debug5);
         this.placeBlock(debug1, Blocks.MOSSY_COBBLESTONE.defaultBlockState(), 3, -3, 1, debug5);
         if (!this.placedTrap1) {
             this.placedTrap1 = this.createDispenser(debug1, debug5, debug4, 3, -2, 1, Direction.NORTH, BuiltInLootTables.JUNGLE_TEMPLE_DISPENSER);
         }
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.VINE.defaultBlockState()).setValue((Property<Comparable>)VineBlock.SOUTH, true), 3, -2, 2, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue((Property<Comparable>)TripWireHookBlock.FACING, Direction.NORTH)).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, true), 7, -3, 1, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue((Property<Comparable>)TripWireHookBlock.FACING, Direction.SOUTH)).setValue((Property<Comparable>)TripWireHookBlock.ATTACHED, true), 7, -3, 5, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE.defaultBlockState()).setValue((Property<Comparable>)TripWireBlock.NORTH, true)).setValue((Property<Comparable>)TripWireBlock.SOUTH, true)).setValue((Property<Comparable>)TripWireBlock.ATTACHED, true), 7, -3, 2, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE.defaultBlockState()).setValue((Property<Comparable>)TripWireBlock.NORTH, true)).setValue((Property<Comparable>)TripWireBlock.SOUTH, true)).setValue((Property<Comparable>)TripWireBlock.ATTACHED, true), 7, -3, 3, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.TRIPWIRE.defaultBlockState()).setValue((Property<Comparable>)TripWireBlock.NORTH, true)).setValue((Property<Comparable>)TripWireBlock.SOUTH, true)).setValue((Property<Comparable>)TripWireBlock.ATTACHED, true), 7, -3, 4, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 8, -3, 6, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE), 9, -3, 6, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.UP), 9, -3, 5, debug5);
+        this.placeBlock(debug1, (Blocks.VINE.defaultBlockState()).setValue(VineBlock.SOUTH, true), 3, -2, 2, debug5);
+        this.placeBlock(debug1, ((Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue(TripWireHookBlock.FACING, Direction.NORTH)).setValue(TripWireHookBlock.ATTACHED, true), 7, -3, 1, debug5);
+        this.placeBlock(debug1, ((Blocks.TRIPWIRE_HOOK.defaultBlockState()).setValue(TripWireHookBlock.FACING, Direction.SOUTH)).setValue(TripWireHookBlock.ATTACHED, true), 7, -3, 5, debug5);
+        this.placeBlock(debug1, (((Blocks.TRIPWIRE.defaultBlockState()).setValue(TripWireBlock.NORTH, true)).setValue(TripWireBlock.SOUTH, true)).setValue(TripWireBlock.ATTACHED, true), 7, -3, 2, debug5);
+        this.placeBlock(debug1, (((Blocks.TRIPWIRE.defaultBlockState()).setValue(TripWireBlock.NORTH, true)).setValue(TripWireBlock.SOUTH, true)).setValue(TripWireBlock.ATTACHED, true), 7, -3, 3, debug5);
+        this.placeBlock(debug1, (((Blocks.TRIPWIRE.defaultBlockState()).setValue(TripWireBlock.NORTH, true)).setValue(TripWireBlock.SOUTH, true)).setValue(TripWireBlock.ATTACHED, true), 7, -3, 4, debug5);
+        this.placeBlock(debug1, ((Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 8, -3, 6, debug5);
+        this.placeBlock(debug1, ((Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE), 9, -3, 6, debug5);
+        this.placeBlock(debug1, ((Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.UP), 9, -3, 5, debug5);
         this.placeBlock(debug1, Blocks.MOSSY_COBBLESTONE.defaultBlockState(), 9, -3, 4, debug5);
         this.placeBlock(debug1, debug15, 9, -2, 4, debug5);
         if (!this.placedTrap2) {
             this.placedTrap2 = this.createDispenser(debug1, debug5, debug4, 9, -2, 3, Direction.WEST, BuiltInLootTables.JUNGLE_TEMPLE_DISPENSER);
         }
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.VINE.defaultBlockState()).setValue((Property<Comparable>)VineBlock.EAST, true), 8, -1, 3, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.VINE.defaultBlockState()).setValue((Property<Comparable>)VineBlock.EAST, true), 8, -2, 3, debug5);
+        this.placeBlock(debug1, (Blocks.VINE.defaultBlockState()).setValue(VineBlock.EAST, true), 8, -1, 3, debug5);
+        this.placeBlock(debug1, (Blocks.VINE.defaultBlockState()).setValue(VineBlock.EAST, true), 8, -2, 3, debug5);
         if (!this.placedMainChest) {
             this.placedMainChest = this.createChest(debug1, debug5, debug4, 8, -3, 3, BuiltInLootTables.JUNGLE_TEMPLE);
         }
@@ -202,7 +202,7 @@ public class JunglePyramidPiece extends ScatteredFeaturePiece
         this.placeBlock(debug1, Blocks.CHISELED_STONE_BRICKS.defaultBlockState(), 8, -2, 11, debug5);
         this.placeBlock(debug1, Blocks.CHISELED_STONE_BRICKS.defaultBlockState(), 9, -2, 11, debug5);
         this.placeBlock(debug1, Blocks.CHISELED_STONE_BRICKS.defaultBlockState(), 10, -2, 11, debug5);
-        final BlockState debug16 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.LEVER.defaultBlockState()).setValue((Property<Comparable>)LeverBlock.FACING, Direction.NORTH)).setValue(LeverBlock.FACE, AttachFace.WALL);
+        final BlockState debug16 = ((Blocks.LEVER.defaultBlockState()).setValue(LeverBlock.FACING, Direction.NORTH)).setValue(LeverBlock.FACE, AttachFace.WALL);
         this.placeBlock(debug1, debug16, 8, -2, 12, debug5);
         this.placeBlock(debug1, debug16, 9, -2, 12, debug5);
         this.placeBlock(debug1, debug16, 10, -2, 12, debug5);
@@ -211,11 +211,11 @@ public class JunglePyramidPiece extends ScatteredFeaturePiece
         this.placeBlock(debug1, Blocks.MOSSY_COBBLESTONE.defaultBlockState(), 10, -2, 9, debug5);
         this.placeBlock(debug1, debug15, 8, -2, 9, debug5);
         this.placeBlock(debug1, debug15, 8, -2, 10, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 10, -1, 9, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.STICKY_PISTON.defaultBlockState()).setValue((Property<Comparable>)PistonBaseBlock.FACING, Direction.UP), 9, -2, 8, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.STICKY_PISTON.defaultBlockState()).setValue((Property<Comparable>)PistonBaseBlock.FACING, Direction.WEST), 10, -2, 8, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.STICKY_PISTON.defaultBlockState()).setValue((Property<Comparable>)PistonBaseBlock.FACING, Direction.WEST), 10, -1, 8, debug5);
-        this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.REPEATER.defaultBlockState()).setValue((Property<Comparable>)RepeaterBlock.FACING, Direction.NORTH), 10, -2, 10, debug5);
+        this.placeBlock(debug1, ((((Blocks.REDSTONE_WIRE.defaultBlockState()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE), 10, -1, 9, debug5);
+        this.placeBlock(debug1, (Blocks.STICKY_PISTON.defaultBlockState()).setValue(PistonBaseBlock.FACING, Direction.UP), 9, -2, 8, debug5);
+        this.placeBlock(debug1, (Blocks.STICKY_PISTON.defaultBlockState()).setValue(PistonBaseBlock.FACING, Direction.WEST), 10, -2, 8, debug5);
+        this.placeBlock(debug1, (Blocks.STICKY_PISTON.defaultBlockState()).setValue(PistonBaseBlock.FACING, Direction.WEST), 10, -1, 8, debug5);
+        this.placeBlock(debug1, (Blocks.REPEATER.defaultBlockState()).setValue(RepeaterBlock.FACING, Direction.NORTH), 10, -2, 10, debug5);
         if (!this.placedHiddenChest) {
             this.placedHiddenChest = this.createChest(debug1, debug5, debug4, 9, -3, 10, BuiltInLootTables.JUNGLE_TEMPLE);
         }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StrongholdPieces.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StrongholdPieces.java
index edf6b110e0764275c822d0ed7039102b2b82c5c2..4f4f2c6964dc553f13a54186730139784b8d9984 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StrongholdPieces.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StrongholdPieces.java
@@ -44,7 +44,7 @@ public class StrongholdPieces
     private static final SmoothStoneSelector SMOOTH_STONE_SELECTOR;
     
     public static void resetPieces() {
-        StrongholdPieces.currentPieces = (List<PieceWeight>)Lists.newArrayList();
+        StrongholdPieces.currentPieces = Lists.newArrayList();
         for (final PieceWeight debug3 : StrongholdPieces.STRONGHOLD_PIECE_WEIGHTS) {
             debug3.placeCount = 0;
             StrongholdPieces.currentPieces.add(debug3);
@@ -234,19 +234,19 @@ public class StrongholdPieces
                     this.placeBlock(debug1, Blocks.STONE_BRICKS.defaultBlockState(), debug5 + 2, debug6 + 1, debug7, debug3);
                     this.placeBlock(debug1, Blocks.STONE_BRICKS.defaultBlockState(), debug5 + 2, debug6, debug7, debug3);
                     this.placeBlock(debug1, Blocks.OAK_DOOR.defaultBlockState(), debug5 + 1, debug6, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.OAK_DOOR.defaultBlockState()).setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER), debug5 + 1, debug6 + 1, debug7, debug3);
+                    this.placeBlock(debug1, (Blocks.OAK_DOOR.defaultBlockState()).setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER), debug5 + 1, debug6 + 1, debug7, debug3);
                     break;
                 }
                 case GRATES: {
                     this.placeBlock(debug1, Blocks.CAVE_AIR.defaultBlockState(), debug5 + 1, debug6, debug7, debug3);
                     this.placeBlock(debug1, Blocks.CAVE_AIR.defaultBlockState(), debug5 + 1, debug6 + 1, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.WEST, true), debug5, debug6, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.WEST, true), debug5, debug6 + 1, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true)).setValue((Property<Comparable>)IronBarsBlock.WEST, true), debug5, debug6 + 2, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true)).setValue((Property<Comparable>)IronBarsBlock.WEST, true), debug5 + 1, debug6 + 2, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true)).setValue((Property<Comparable>)IronBarsBlock.WEST, true), debug5 + 2, debug6 + 2, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true), debug5 + 2, debug6 + 1, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.EAST, true), debug5 + 2, debug6, debug7, debug3);
+                    this.placeBlock(debug1, (Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.WEST, true), debug5, debug6, debug7, debug3);
+                    this.placeBlock(debug1, (Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.WEST, true), debug5, debug6 + 1, debug7, debug3);
+                    this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true), debug5, debug6 + 2, debug7, debug3);
+                    this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true), debug5 + 1, debug6 + 2, debug7, debug3);
+                    this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true), debug5 + 2, debug6 + 2, debug7, debug3);
+                    this.placeBlock(debug1, (Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.EAST, true), debug5 + 2, debug6 + 1, debug7, debug3);
+                    this.placeBlock(debug1, (Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.EAST, true), debug5 + 2, debug6, debug7, debug3);
                     break;
                 }
                 case IRON_DOOR: {
@@ -258,9 +258,9 @@ public class StrongholdPieces
                     this.placeBlock(debug1, Blocks.STONE_BRICKS.defaultBlockState(), debug5 + 2, debug6 + 1, debug7, debug3);
                     this.placeBlock(debug1, Blocks.STONE_BRICKS.defaultBlockState(), debug5 + 2, debug6, debug7, debug3);
                     this.placeBlock(debug1, Blocks.IRON_DOOR.defaultBlockState(), debug5 + 1, debug6, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.IRON_DOOR.defaultBlockState()).setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER), debug5 + 1, debug6 + 1, debug7, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.STONE_BUTTON.defaultBlockState()).setValue((Property<Comparable>)ButtonBlock.FACING, Direction.NORTH), debug5 + 2, debug6 + 1, debug7 + 1, debug3);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.STONE_BUTTON.defaultBlockState()).setValue((Property<Comparable>)ButtonBlock.FACING, Direction.SOUTH), debug5 + 2, debug6 + 1, debug7 - 1, debug3);
+                    this.placeBlock(debug1, (Blocks.IRON_DOOR.defaultBlockState()).setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER), debug5 + 1, debug6 + 1, debug7, debug3);
+                    this.placeBlock(debug1, (Blocks.STONE_BUTTON.defaultBlockState()).setValue(ButtonBlock.FACING, Direction.NORTH), debug5 + 2, debug6 + 1, debug7 + 1, debug3);
+                    this.placeBlock(debug1, (Blocks.STONE_BUTTON.defaultBlockState()).setValue(ButtonBlock.FACING, Direction.SOUTH), debug5 + 2, debug6 + 1, debug7 - 1, debug3);
                     break;
                 }
             }
@@ -519,12 +519,12 @@ public class StrongholdPieces
         
         public StartPiece(final Random debug1, final int debug2, final int debug3) {
             super(StructurePieceType.STRONGHOLD_START, 0, debug1, debug2, debug3);
-            this.pendingChildren = (List<StructurePiece>)Lists.newArrayList();
+            this.pendingChildren = Lists.newArrayList();
         }
         
         public StartPiece(final StructureManager debug1, final CompoundTag debug2) {
             super(StructurePieceType.STRONGHOLD_START, debug2);
-            this.pendingChildren = (List<StructurePiece>)Lists.newArrayList();
+            this.pendingChildren = Lists.newArrayList();
         }
     }
     
@@ -579,8 +579,8 @@ public class StrongholdPieces
             this.generateBox(debug1, debug5, 0, 0, 0, 4, 4, 6, true, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateSmallDoor(debug1, debug4, debug5, this.entryDoor, 1, 1, 0);
             this.generateSmallDoor(debug1, debug4, debug5, SmallDoorType.OPENING, 1, 1, 6);
-            final BlockState debug8 = ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.EAST);
-            final BlockState debug9 = ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.WEST);
+            final BlockState debug8 = (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.EAST); // MagmaCube - decompile fix
+            final BlockState debug9 = (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.WEST); // MagmaCube - decompile fix
             this.maybeGenerateBlock(debug1, debug5, debug4, 0.1f, 1, 2, 1, debug8);
             this.maybeGenerateBlock(debug1, debug5, debug4, 0.1f, 3, 2, 1, debug9);
             this.maybeGenerateBlock(debug1, debug5, debug4, 0.1f, 1, 2, 5, debug8);
@@ -682,7 +682,7 @@ public class StrongholdPieces
             this.generateBox(debug1, debug5, 0, 0, 0, 4, 10, 7, true, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateSmallDoor(debug1, debug4, debug5, this.entryDoor, 1, 7, 0);
             this.generateSmallDoor(debug1, debug4, debug5, SmallDoorType.OPENING, 1, 1, 7);
-            final BlockState debug8 = ((StateHolder<O, BlockState>)Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.SOUTH);
+            final BlockState debug8 = (Blocks.COBBLESTONE_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.SOUTH); // MagmaCube - decompile fix
             for (int debug9 = 0; debug9 < 6; ++debug9) {
                 this.placeBlock(debug1, debug8, 1, 6 - debug9, 1 + debug9, debug5);
                 this.placeBlock(debug1, debug8, 2, 6 - debug9, 1 + debug9, debug5);
@@ -852,10 +852,10 @@ public class StrongholdPieces
                     this.placeBlock(debug1, Blocks.STONE_BRICKS.defaultBlockState(), 5, 1, 5, debug5);
                     this.placeBlock(debug1, Blocks.STONE_BRICKS.defaultBlockState(), 5, 2, 5, debug5);
                     this.placeBlock(debug1, Blocks.STONE_BRICKS.defaultBlockState(), 5, 3, 5, debug5);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.WEST), 4, 3, 5, debug5);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.EAST), 6, 3, 5, debug5);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.SOUTH), 5, 3, 4, debug5);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.NORTH), 5, 3, 6, debug5);
+                    this.placeBlock(debug1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.WEST), 4, 3, 5, debug5); // MagmaCube - decompile fix
+                    this.placeBlock(debug1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.EAST), 6, 3, 5, debug5); // MagmaCube - decompile fix
+                    this.placeBlock(debug1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.SOUTH), 5, 3, 4, debug5); // MagmaCube - decompile fix
+                    this.placeBlock(debug1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.NORTH), 5, 3, 6, debug5); // MagmaCube - decompile fix
                     this.placeBlock(debug1, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 4, 1, 4, debug5);
                     this.placeBlock(debug1, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 4, 1, 5, debug5);
                     this.placeBlock(debug1, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 4, 1, 6, debug5);
@@ -914,7 +914,7 @@ public class StrongholdPieces
                         this.placeBlock(debug1, Blocks.OAK_PLANKS.defaultBlockState(), 7, 3, debug8, debug5);
                         this.placeBlock(debug1, Blocks.OAK_PLANKS.defaultBlockState(), 8, 3, debug8, debug5);
                     }
-                    final BlockState debug9 = ((StateHolder<O, BlockState>)Blocks.LADDER.defaultBlockState()).setValue((Property<Comparable>)LadderBlock.FACING, Direction.WEST);
+                    final BlockState debug9 = (Blocks.LADDER.defaultBlockState()).setValue(LadderBlock.FACING, Direction.WEST); // MagmaCube - decompile fix
                     this.placeBlock(debug1, debug9, 9, 1, 3, debug5);
                     this.placeBlock(debug1, debug9, 9, 2, 3, debug5);
                     this.placeBlock(debug1, debug9, 9, 3, 3, debug5);
@@ -962,17 +962,19 @@ public class StrongholdPieces
             this.generateBox(debug1, debug5, 4, 1, 7, 4, 3, 7, false, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateBox(debug1, debug5, 4, 1, 9, 4, 3, 9, false, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             for (int debug8 = 1; debug8 <= 3; ++debug8) {
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true), 4, debug8, 4, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true)).setValue((Property<Comparable>)IronBarsBlock.EAST, true), 4, debug8, 5, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true), 4, debug8, 6, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.WEST, true)).setValue((Property<Comparable>)IronBarsBlock.EAST, true), 5, debug8, 5, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.WEST, true)).setValue((Property<Comparable>)IronBarsBlock.EAST, true), 6, debug8, 5, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.WEST, true)).setValue((Property<Comparable>)IronBarsBlock.EAST, true), 7, debug8, 5, debug5);
-            }
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true), 4, 3, 2, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true), 4, 3, 8, debug5);
-            final BlockState debug9 = ((StateHolder<O, BlockState>)Blocks.IRON_DOOR.defaultBlockState()).setValue((Property<Comparable>)DoorBlock.FACING, Direction.WEST);
-            final BlockState debug10 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_DOOR.defaultBlockState()).setValue((Property<Comparable>)DoorBlock.FACING, Direction.WEST)).setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER);
+                // MagmaCube start - decompile fix
+                this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, debug8, 4, debug5);
+                this.placeBlock(debug1, (((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true)).setValue(IronBarsBlock.EAST, true), 4, debug8, 5, debug5);
+                this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, debug8, 6, debug5);
+                this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true), 5, debug8, 5, debug5);
+                this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true), 6, debug8, 5, debug5);
+                this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true), 7, debug8, 5, debug5);
+            }
+            this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, 3, 2, debug5);
+            this.placeBlock(debug1, ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, 3, 8, debug5);
+            final BlockState debug9 = (Blocks.IRON_DOOR.defaultBlockState()).setValue(DoorBlock.FACING, Direction.WEST);
+            final BlockState debug10 = ((Blocks.IRON_DOOR.defaultBlockState()).setValue(DoorBlock.FACING, Direction.WEST)).setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER);
+            // MagmaCube end - decompile fix
             this.placeBlock(debug1, debug9, 4, 1, 2, debug5);
             this.placeBlock(debug1, debug10, 4, 2, 2, debug5);
             this.placeBlock(debug1, debug9, 4, 1, 8, debug5);
@@ -1030,8 +1032,8 @@ public class StrongholdPieces
                 if ((debug11 - 1) % 4 == 0) {
                     this.generateBox(debug1, debug5, 1, 1, debug11, 1, 4, debug11, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
                     this.generateBox(debug1, debug5, 12, 1, debug11, 12, 4, debug11, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.EAST), 2, 3, debug11, debug5);
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.WEST), 11, 3, debug11, debug5);
+                    this.placeBlock(debug1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.EAST), 2, 3, debug11, debug5);
+                    this.placeBlock(debug1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.WEST), 11, 3, debug11, debug5);
                     if (this.isTall) {
                         this.generateBox(debug1, debug5, 1, 6, debug11, 1, 9, debug11, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
                         this.generateBox(debug1, debug5, 12, 6, debug11, 12, 9, debug11, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
@@ -1059,22 +1061,22 @@ public class StrongholdPieces
                 this.placeBlock(debug1, Blocks.OAK_PLANKS.defaultBlockState(), 9, 5, 11, debug5);
                 this.placeBlock(debug1, Blocks.OAK_PLANKS.defaultBlockState(), 8, 5, 11, debug5);
                 this.placeBlock(debug1, Blocks.OAK_PLANKS.defaultBlockState(), 9, 5, 10, debug5);
-                final BlockState debug12 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true)).setValue((Property<Comparable>)FenceBlock.EAST, true);
-                final BlockState debug13 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.SOUTH, true);
+                final BlockState debug12 = ((Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
+                final BlockState debug13 = ((Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true); // MagmaCube - decompile fix
                 this.generateBox(debug1, debug5, 3, 6, 3, 3, 6, 11, debug13, debug13, false);
                 this.generateBox(debug1, debug5, 10, 6, 3, 10, 6, 9, debug13, debug13, false);
                 this.generateBox(debug1, debug5, 4, 6, 2, 9, 6, 2, debug12, debug12, false);
                 this.generateBox(debug1, debug5, 4, 6, 12, 7, 6, 12, debug12, debug12, false);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.EAST, true), 3, 6, 2, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.SOUTH, true)).setValue((Property<Comparable>)FenceBlock.EAST, true), 3, 6, 12, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.WEST, true), 10, 6, 2, debug5);
+                this.placeBlock(debug1, ((Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 3, 6, 2, debug5); // MagmaCube - decompile fix
+                this.placeBlock(debug1, ((Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.EAST, true), 3, 6, 12, debug5); // MagmaCube - decompile fix
+                this.placeBlock(debug1, ((Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.WEST, true), 10, 6, 2, debug5); // MagmaCube - decompile fix
                 for (int debug14 = 0; debug14 <= 2; ++debug14) {
-                    this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.SOUTH, true)).setValue((Property<Comparable>)FenceBlock.WEST, true), 8 + debug14, 6, 12 - debug14, debug5);
+                    this.placeBlock(debug1, ((Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.WEST, true), 8 + debug14, 6, 12 - debug14, debug5); // MagmaCube - decompile fix
                     if (debug14 != 2) {
-                        this.placeBlock(debug1, ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.NORTH, true)).setValue((Property<Comparable>)FenceBlock.EAST, true), 8 + debug14, 6, 11 - debug14, debug5);
+                        this.placeBlock(debug1, ((Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 8 + debug14, 6, 11 - debug14, debug5); // MagmaCube - decompile fix
                     }
                 }
-                final BlockState debug15 = ((StateHolder<O, BlockState>)Blocks.LADDER.defaultBlockState()).setValue((Property<Comparable>)LadderBlock.FACING, Direction.SOUTH);
+                final BlockState debug15 = (Blocks.LADDER.defaultBlockState()).setValue(LadderBlock.FACING, Direction.SOUTH); // MagmaCube - decompile fix
                 this.placeBlock(debug1, debug15, 10, 1, 13, debug5);
                 this.placeBlock(debug1, debug15, 10, 2, 13, debug5);
                 this.placeBlock(debug1, debug15, 10, 3, 13, debug5);
@@ -1084,21 +1086,23 @@ public class StrongholdPieces
                 this.placeBlock(debug1, debug15, 10, 7, 13, debug5);
                 final int debug16 = 7;
                 final int debug17 = 7;
-                final BlockState debug18 = ((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.EAST, true);
+                final BlockState debug18 = (Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
                 this.placeBlock(debug1, debug18, 6, 9, 7, debug5);
-                final BlockState debug19 = ((StateHolder<O, BlockState>)Blocks.OAK_FENCE.defaultBlockState()).setValue((Property<Comparable>)FenceBlock.WEST, true);
+                final BlockState debug19 = (Blocks.OAK_FENCE.defaultBlockState()).setValue(FenceBlock.WEST, true); // MagmaCube - decompile fix
                 this.placeBlock(debug1, debug19, 7, 9, 7, debug5);
                 this.placeBlock(debug1, debug18, 6, 8, 7, debug5);
                 this.placeBlock(debug1, debug19, 7, 8, 7, debug5);
-                final BlockState debug20 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)debug13).setValue((Property<Comparable>)FenceBlock.WEST, true)).setValue((Property<Comparable>)FenceBlock.EAST, true);
+                final BlockState debug20 = ((debug13).setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true); // MagmaCube - decompile fix
                 this.placeBlock(debug1, debug20, 6, 7, 7, debug5);
                 this.placeBlock(debug1, debug20, 7, 7, 7, debug5);
                 this.placeBlock(debug1, debug18, 5, 7, 7, debug5);
                 this.placeBlock(debug1, debug19, 8, 7, 7, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug18).setValue((Property<Comparable>)FenceBlock.NORTH, true), 6, 7, 6, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug18).setValue((Property<Comparable>)FenceBlock.SOUTH, true), 6, 7, 8, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug19).setValue((Property<Comparable>)FenceBlock.NORTH, true), 7, 7, 6, debug5);
-                this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug19).setValue((Property<Comparable>)FenceBlock.SOUTH, true), 7, 7, 8, debug5);
+                // MagmaCube start - decompile fix
+                this.placeBlock(debug1, (debug18).setValue(FenceBlock.NORTH, true), 6, 7, 6, debug5);
+                this.placeBlock(debug1, (debug18).setValue(FenceBlock.SOUTH, true), 6, 7, 8, debug5);
+                this.placeBlock(debug1, (debug19).setValue(FenceBlock.NORTH, true), 7, 7, 6, debug5);
+                this.placeBlock(debug1, (debug19).setValue(FenceBlock.SOUTH, true), 7, 7, 8, debug5);
+                // MagmaCube end - decompile fix
                 final BlockState debug21 = Blocks.TORCH.defaultBlockState();
                 this.placeBlock(debug1, debug21, 5, 8, 7, debug5);
                 this.placeBlock(debug1, debug21, 8, 8, 7, debug5);
@@ -1212,8 +1216,8 @@ public class StrongholdPieces
             this.generateBox(debug1, debug5, 5, 2, 7, 7, 2, 7, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 4, 5, 7, 4, 5, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 8, 5, 7, 8, 5, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
-            this.generateBox(debug1, debug5, 5, 5, 7, 7, 5, 9, ((StateHolder<O, BlockState>)Blocks.SMOOTH_STONE_SLAB.defaultBlockState()).setValue(SlabBlock.TYPE, SlabType.DOUBLE), ((StateHolder<O, BlockState>)Blocks.SMOOTH_STONE_SLAB.defaultBlockState()).setValue(SlabBlock.TYPE, SlabType.DOUBLE), false);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)Blocks.WALL_TORCH.defaultBlockState()).setValue((Property<Comparable>)WallTorchBlock.FACING, Direction.SOUTH), 6, 5, 6, debug5);
+            this.generateBox(debug1, debug5, 5, 5, 7, 7, 5, 9, (Blocks.SMOOTH_STONE_SLAB.defaultBlockState()).setValue(SlabBlock.TYPE, SlabType.DOUBLE), (Blocks.SMOOTH_STONE_SLAB.defaultBlockState()).setValue(SlabBlock.TYPE, SlabType.DOUBLE), false); // MagmaCube - decompile fix
+            this.placeBlock(debug1, (Blocks.WALL_TORCH.defaultBlockState()).setValue(WallTorchBlock.FACING, Direction.SOUTH), 6, 5, 6, debug5); // MagmaCube - decompile fix
             return true;
         }
     }
@@ -1269,8 +1273,8 @@ public class StrongholdPieces
             this.generateBox(debug1, debug5, 9, 1, 1, 9, 1, 3, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
             this.generateBox(debug1, debug5, 3, 1, 8, 7, 1, 12, false, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateBox(debug1, debug5, 4, 1, 9, 6, 1, 11, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
-            final BlockState debug9 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.NORTH, true)).setValue((Property<Comparable>)IronBarsBlock.SOUTH, true);
-            final BlockState debug10 = ((StateHolder<O, BlockState>)((StateHolder<O, BlockState>)Blocks.IRON_BARS.defaultBlockState()).setValue((Property<Comparable>)IronBarsBlock.WEST, true)).setValue((Property<Comparable>)IronBarsBlock.EAST, true);
+            final BlockState debug9 = ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true); // MagmaCube - decompile fix
+            final BlockState debug10 = ((Blocks.IRON_BARS.defaultBlockState()).setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true); // MagmaCube - decompile fix
             for (int debug11 = 3; debug11 < 14; debug11 += 2) {
                 this.generateBox(debug1, debug5, 0, 3, debug11, 0, 4, debug11, debug9, debug9, false);
                 this.generateBox(debug1, debug5, 10, 3, debug11, 10, 4, debug11, debug9, debug9, false);
@@ -1278,7 +1282,7 @@ public class StrongholdPieces
             for (int debug11 = 2; debug11 < 9; debug11 += 2) {
                 this.generateBox(debug1, debug5, debug11, 3, 15, debug11, 4, 15, debug10, debug10, false);
             }
-            final BlockState debug12 = ((StateHolder<O, BlockState>)Blocks.STONE_BRICK_STAIRS.defaultBlockState()).setValue((Property<Comparable>)StairBlock.FACING, Direction.NORTH);
+            final BlockState debug12 = (Blocks.STONE_BRICK_STAIRS.defaultBlockState()).setValue(StairBlock.FACING, Direction.NORTH); // MagmaCube - decompile fix
             this.generateBox(debug1, debug5, 4, 1, 5, 6, 1, 7, false, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateBox(debug1, debug5, 4, 2, 6, 6, 2, 7, false, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateBox(debug1, debug5, 4, 3, 7, 6, 3, 7, false, debug4, StrongholdPieces.SMOOTH_STONE_SELECTOR);
@@ -1287,28 +1291,32 @@ public class StrongholdPieces
                 this.placeBlock(debug1, debug12, debug13, 2, 5, debug5);
                 this.placeBlock(debug1, debug12, debug13, 3, 6, debug5);
             }
-            final BlockState debug14 = ((StateHolder<O, BlockState>)Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue((Property<Comparable>)EndPortalFrameBlock.FACING, Direction.NORTH);
-            final BlockState debug15 = ((StateHolder<O, BlockState>)Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue((Property<Comparable>)EndPortalFrameBlock.FACING, Direction.SOUTH);
-            final BlockState debug16 = ((StateHolder<O, BlockState>)Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue((Property<Comparable>)EndPortalFrameBlock.FACING, Direction.EAST);
-            final BlockState debug17 = ((StateHolder<O, BlockState>)Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue((Property<Comparable>)EndPortalFrameBlock.FACING, Direction.WEST);
+            // MagmaCube start - decompile fix
+            final BlockState debug14 = (Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue(EndPortalFrameBlock.FACING, Direction.NORTH);
+            final BlockState debug15 = (Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue(EndPortalFrameBlock.FACING, Direction.SOUTH);
+            final BlockState debug16 = (Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue(EndPortalFrameBlock.FACING, Direction.EAST);
+            final BlockState debug17 = (Blocks.END_PORTAL_FRAME.defaultBlockState()).setValue(EndPortalFrameBlock.FACING, Direction.WEST);
+            // MagmaCube end - decompile fix
             boolean debug18 = true;
             final boolean[] debug19 = new boolean[12];
             for (int debug20 = 0; debug20 < debug19.length; ++debug20) {
                 debug19[debug20] = (debug4.nextFloat() > 0.9f);
                 debug18 &= debug19[debug20];
             }
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug14).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[0]), 4, 3, 8, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug14).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[1]), 5, 3, 8, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug14).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[2]), 6, 3, 8, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug15).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[3]), 4, 3, 12, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug15).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[4]), 5, 3, 12, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug15).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[5]), 6, 3, 12, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug16).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[6]), 3, 3, 9, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug16).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[7]), 3, 3, 10, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug16).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[8]), 3, 3, 11, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug17).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[9]), 7, 3, 9, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug17).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[10]), 7, 3, 10, debug5);
-            this.placeBlock(debug1, ((StateHolder<O, BlockState>)debug17).setValue((Property<Comparable>)EndPortalFrameBlock.HAS_EYE, debug19[11]), 7, 3, 11, debug5);
+            // MagmaCube start - decompile fix
+            this.placeBlock(debug1, (debug14).setValue(EndPortalFrameBlock.HAS_EYE, debug19[0]), 4, 3, 8, debug5);
+            this.placeBlock(debug1, (debug14).setValue(EndPortalFrameBlock.HAS_EYE, debug19[1]), 5, 3, 8, debug5);
+            this.placeBlock(debug1, (debug14).setValue(EndPortalFrameBlock.HAS_EYE, debug19[2]), 6, 3, 8, debug5);
+            this.placeBlock(debug1, (debug15).setValue(EndPortalFrameBlock.HAS_EYE, debug19[3]), 4, 3, 12, debug5);
+            this.placeBlock(debug1, (debug15).setValue(EndPortalFrameBlock.HAS_EYE, debug19[4]), 5, 3, 12, debug5);
+            this.placeBlock(debug1, (debug15).setValue(EndPortalFrameBlock.HAS_EYE, debug19[5]), 6, 3, 12, debug5);
+            this.placeBlock(debug1, (debug16).setValue(EndPortalFrameBlock.HAS_EYE, debug19[6]), 3, 3, 9, debug5);
+            this.placeBlock(debug1, (debug16).setValue(EndPortalFrameBlock.HAS_EYE, debug19[7]), 3, 3, 10, debug5);
+            this.placeBlock(debug1, (debug16).setValue(EndPortalFrameBlock.HAS_EYE, debug19[8]), 3, 3, 11, debug5);
+            this.placeBlock(debug1, (debug17).setValue(EndPortalFrameBlock.HAS_EYE, debug19[9]), 7, 3, 9, debug5);
+            this.placeBlock(debug1, (debug17).setValue(EndPortalFrameBlock.HAS_EYE, debug19[10]), 7, 3, 10, debug5);
+            this.placeBlock(debug1, (debug17).setValue(EndPortalFrameBlock.HAS_EYE, debug19[11]), 7, 3, 11, debug5);
+            // MagmaCube end - decompile fix
             if (debug18) {
                 final BlockState debug21 = Blocks.END_PORTAL.defaultBlockState();
                 this.placeBlock(debug1, debug21, 4, 3, 9, debug5);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
index 735bf8f3ea732d0ef870d9e899d9e149b887b778..1d4d91a24bf89a47f1dc0ee8cb67bbb6f5e3f9eb 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -41,10 +41,7 @@ import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.decoration.Painting;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.level.EmptyBlockGetter;
-import net.minecraft.world.level.Level;
-import net.minecraft.world.level.LevelAccessor;
-import net.minecraft.world.level.ServerLevelAccessor;
+import net.minecraft.world.level.*;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.LiquidBlockContainer;
@@ -130,7 +127,7 @@ public class StructureTemplate {
     }
 
     private static List<StructureBlockInfo> buildInfoList(List<StructureBlockInfo> debug02, List<StructureBlockInfo> debug1, List<StructureBlockInfo> debug2) {
-        Comparator<StructureBlockInfo> debug3 = Comparator.comparingInt(debug0 -> debug0.pos.getY()).thenComparingInt(debug0 -> debug0.pos.getX()).thenComparingInt(debug0 -> debug0.pos.getZ());
+        Comparator<StructureBlockInfo> debug3 = Comparator.<StructureBlockInfo>comparingInt(debug0 -> debug0.pos.getY()).thenComparingInt(debug0 -> debug0.pos.getX()).thenComparingInt(debug0 -> debug0.pos.getZ()); // MagmaCube - decompile fix
         debug02.sort(debug3);
         debug2.sort(debug3);
         debug1.sort(debug3);
@@ -192,11 +189,6 @@ public class StructureTemplate {
     }
 
     public boolean placeInWorld(ServerLevelAccessor debug1, BlockPos debug2, BlockPos debug3, StructurePlaceSettings debug4, Random debug5, int debug6) {
-        Object debug26;
-        Object debug23;
-        Object debug22;
-        Object debug21;
-        Object debug20;
         if (this.palettes.isEmpty()) {
             return false;
         }
@@ -206,7 +198,7 @@ public class StructureTemplate {
         }
         BoundingBox debug8 = debug4.getBoundingBox();
         ArrayList debug9 = Lists.newArrayListWithCapacity((int)(debug4.shouldKeepLiquids() ? debug7.size() : 0));
-        ArrayList debug10 = Lists.newArrayListWithCapacity((int)debug7.size());
+        List<Pair<BlockPos, CompoundTag>> debug10 = Lists.newArrayListWithCapacity((int)debug7.size());
         int debug11 = Integer.MAX_VALUE;
         int debug12 = Integer.MAX_VALUE;
         int debug13 = Integer.MAX_VALUE;
@@ -215,12 +207,12 @@ public class StructureTemplate {
         int debug16 = Integer.MIN_VALUE;
         List<StructureBlockInfo> debug17 = StructureTemplate.processBlockInfos(debug1, debug2, debug3, debug4, debug7);
         for (StructureBlockInfo structureBlockInfo : debug17) {
-            debug20 = structureBlockInfo.pos;
+            BlockPos debug20 = structureBlockInfo.pos;
             if (debug8 != null && !debug8.isInside((Vec3i)debug20)) continue;
-            debug21 = debug4.shouldKeepLiquids() ? debug1.getFluidState((BlockPos)debug20) : null;
-            debug22 = structureBlockInfo.state.mirror(debug4.getMirror()).rotate(debug4.getRotation());
+            FluidState debug21 = debug4.shouldKeepLiquids() ? debug1.getFluidState((BlockPos)debug20) : null;
+            BlockState debug22 = structureBlockInfo.state.mirror(debug4.getMirror()).rotate(debug4.getRotation());
             if (structureBlockInfo.nbt != null) {
-                debug23 = debug1.getBlockEntity((BlockPos)debug20);
+                BlockEntity debug23 = debug1.getBlockEntity((BlockPos)debug20);
                 Clearable.tryClear(debug23);
                 debug1.setBlock((BlockPos)debug20, Blocks.BARRIER.defaultBlockState(), 20);
             }
@@ -231,7 +223,8 @@ public class StructureTemplate {
             debug14 = Math.max(debug14, ((Vec3i)debug20).getX());
             debug15 = Math.max(debug15, ((Vec3i)debug20).getY());
             debug16 = Math.max(debug16, ((Vec3i)debug20).getZ());
-            debug10.add(Pair.of((Object)debug20, (Object)structureBlockInfo.nbt));
+            debug10.add(Pair.of(debug20, structureBlockInfo.nbt)); // MagmaCube - decompile fix
+            BlockEntity debug23;
             if (structureBlockInfo.nbt != null && (debug23 = debug1.getBlockEntity((BlockPos)debug20)) != null) {
                 structureBlockInfo.nbt.putInt("x", ((Vec3i)debug20).getX());
                 structureBlockInfo.nbt.putInt("y", ((Vec3i)debug20).getY());
@@ -252,33 +245,39 @@ public class StructureTemplate {
         Direction[] arrdirection = new Direction[]{Direction.UP, Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST};
         while (debug18 && !debug9.isEmpty()) {
             debug18 = false;
-            debug20 = debug9.iterator();
-            while (debug20.hasNext()) {
-                BlockState debug24;
-                Object debug25;
-                debug22 = debug21 = (BlockPos)debug20.next();
-                debug23 = debug1.getFluidState((BlockPos)debug22);
-                for (int debug242 = 0; debug242 < arrdirection.length && !((FluidState)debug23).isSource(); ++debug242) {
-                    debug25 = ((BlockPos)debug22).relative(arrdirection[debug242]);
-                    debug26 = debug1.getFluidState((BlockPos)debug25);
-                    if (!(((FluidState)debug26).getHeight(debug1, (BlockPos)debug25) > ((FluidState)debug23).getHeight(debug1, (BlockPos)debug22)) && (!((FluidState)debug26).isSource() || ((FluidState)debug23).isSource())) continue;
-                    debug23 = debug26;
-                    debug22 = debug25;
+            // MagmaCube start - decompile fix
+            for (Iterator<BlockPos> debug20 = debug9.iterator(); debug20.hasNext(); ) {
+                BlockPos debug21 = debug20.next();
+                BlockPos debug22 = debug21;
+                FluidState debug23 = debug1.getFluidState(debug22);
+                for (int debug24 = 0; debug24 < arrdirection.length && !debug23.isSource(); debug24++) {
+                    BlockPos debug25 = debug22.relative(arrdirection[debug24]);
+                    FluidState debug26 = debug1.getFluidState(debug25);
+                    if (debug26.getHeight((BlockGetter)debug1, debug25) > debug23.getHeight((BlockGetter)debug1, debug22) || (debug26.isSource() && !debug23.isSource())) {
+                        debug23 = debug26;
+                        debug22 = debug25;
+                    }
+                }
+                if (debug23.isSource()) {
+                    BlockState blockState = debug1.getBlockState(debug21);
+                    Block debug25 = blockState.getBlock();
+                    if (debug25 instanceof LiquidBlockContainer) {
+                        ((LiquidBlockContainer)debug25).placeLiquid((LevelAccessor)debug1, debug21, blockState, debug23);
+                        debug18 = true;
+                        debug20.remove();
+                    }
                 }
-                if (!((FluidState)debug23).isSource() || !((debug25 = (debug24 = debug1.getBlockState((BlockPos)debug21)).getBlock()) instanceof LiquidBlockContainer)) continue;
-                ((LiquidBlockContainer)debug25).placeLiquid(debug1, (BlockPos)debug21, debug24, (FluidState)debug23);
-                debug18 = true;
-                debug20.remove();
             }
+            // MagmaCube end - decompile fix
         }
         if (debug11 <= debug14) {
             if (!debug4.getKnownShape()) {
-                debug20 = new BitSetDiscreteVoxelShape(debug14 - debug11 + 1, debug15 - debug12 + 1, debug16 - debug13 + 1);
+                BitSetDiscreteVoxelShape debug20 = new BitSetDiscreteVoxelShape(debug14 - debug11 + 1, debug15 - debug12 + 1, debug16 - debug13 + 1); // MagmaCube - decompile fix
                 int debug212 = debug11;
                 int debug222 = debug12;
                 int debug232 = debug13;
-                for (Object debug25 : debug10) {
-                    debug26 = (BlockPos)debug25.getFirst();
+                for (Pair<BlockPos, CompoundTag> debug25 : debug10) { // MagmaCube - decompile fix
+                    BlockPos debug26 = (BlockPos)debug25.getFirst(); // MagmaCube - decompile fix
                     ((DiscreteVoxelShape)debug20).setFull(((Vec3i)debug26).getX() - debug212, ((Vec3i)debug26).getY() - debug222, ((Vec3i)debug26).getZ() - debug232, true, true);
                 }
                 StructureTemplate.updateShapeAtEdge(debug1, debug6, (DiscreteVoxelShape)debug20, debug212, debug222, debug232);
@@ -350,8 +349,8 @@ public class StructureTemplate {
             debug11.put("Pos", debug14);
             debug11.remove("UUID");
             StructureTemplate.createEntityIgnoreException(debug1, debug11).ifPresent(debug6 -> {
-                float debug7 = debug6.mirror(debug3);
-                debug6.moveTo(debug2.x, debug2.y, debug2.z, debug7 += debug6.yRot - debug6.rotate(debug4), debug6.xRot);
+                float debug72 = debug6.mirror(debug3); // MagmaCube - decompile fix
+                debug6.moveTo(debug13.x, debug13.y, debug13.z, debug72, debug6.xRot); // MagmaCube - decompile fix
                 if (debug7 && debug6 instanceof Mob) {
                     ((Mob)debug6).finalizeSpawn(debug1, debug1.getCurrentDifficultyAt(new BlockPos(debug13)), MobSpawnType.STRUCTURE, null, debug11);
                 }
@@ -530,7 +529,6 @@ public class StructureTemplate {
      * WARNING - void declaration
      */
     public CompoundTag save(CompoundTag debug1) {
-        Object debug5;
         AbstractList debug2;
         if (this.palettes.isEmpty()) {
             debug1.put("blocks", new ListTag());
@@ -538,19 +536,18 @@ public class StructureTemplate {
         } else {
             ListTag debug6;
             Object debug11;
-            void var4_5;
             debug2 = Lists.newArrayList();
             SimplePalette debug3 = new SimplePalette();
             debug2.add(debug3);
             boolean bl = true;
-            while (++var4_5 < this.palettes.size()) {
+            for (int i = 0; i < this.palettes.size(); i++) { // MagmaCube - decompile fix
                 debug2.add(new SimplePalette());
             }
             ListTag listTag = new ListTag();
-            debug5 = this.palettes.get(0).blocks();
+            List<StructureBlockInfo> debug5 = this.palettes.get(0).blocks(); // MagmaCube - decompile fix
             for (int debug62 = 0; debug62 < debug5.size(); ++debug62) {
                 StructureBlockInfo debug7 = (StructureBlockInfo)debug5.get(debug62);
-                Object debug8 = new CompoundTag();
+                Tag debug8 = new CompoundTag(); // MagmaCube - decompile fix
                 ((CompoundTag)debug8).put("pos", this.newIntegerList(debug7.pos.getX(), debug7.pos.getY(), debug7.pos.getZ()));
                 int debug9 = debug3.idFor(debug7.state);
                 ((CompoundTag)debug8).putInt("state", debug9);
@@ -586,7 +583,7 @@ public class StructureTemplate {
         }
         debug2 = new ListTag();
         for (StructureEntityInfo structureEntityInfo : this.entityInfoList) {
-            debug5 = new CompoundTag();
+            Tag debug5 = new CompoundTag(); // MagmaCube - decompile fix
             ((CompoundTag)debug5).put("pos", this.newDoubleList(structureEntityInfo.pos.x, structureEntityInfo.pos.y, structureEntityInfo.pos.z));
             ((CompoundTag)debug5).put("blockPos", this.newIntegerList(structureEntityInfo.blockPos.getX(), structureEntityInfo.blockPos.getY(), structureEntityInfo.blockPos.getZ()));
             if (structureEntityInfo.nbt != null) {
@@ -679,7 +676,7 @@ public class StructureTemplate {
         }
 
         public List<StructureBlockInfo> blocks(Block debug1) {
-            return this.cache.computeIfAbsent(debug1, debug12 -> this.blocks.stream().filter(debug1 -> debug1.state.is((Block)debug12)).collect(Collectors.toList()));
+            return this.cache.computeIfAbsent(debug1, debug12 -> this.blocks.stream().filter(debug13 -> debug13.state.is((Block)debug12)).collect(Collectors.toList())); // MagmaCube - decompile fix
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/lighting/BlockLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/BlockLightSectionStorage.java
index 34ac064137041c7de464edc82f59f1ac85dd7387..5ff222cbf7119371f1d07947b44fa11900b5627d 100644
--- a/src/main/java/net/minecraft/world/level/lighting/BlockLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/BlockLightSectionStorage.java
@@ -7,7 +7,7 @@ import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.chunk.LightChunkGetter;
 
-public class BlockLightSectionStorage extends LayerLightSectionStorage<BlockDataLayerStorageMap>
+public class BlockLightSectionStorage extends LayerLightSectionStorage<BlockLightSectionStorage.BlockDataLayerStorageMap> // MagmaCube - decompile fix
 {
     protected BlockLightSectionStorage(final LightChunkGetter debug1) {
         super(LightLayer.BLOCK, debug1, new BlockDataLayerStorageMap((Long2ObjectOpenHashMap<DataLayer>)new Long2ObjectOpenHashMap()));
diff --git a/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
index 3b7a976d4c3524dd989e93cf99edfbb4bef25e62..e5d9719ea208d2c8400a7a01c98395c37911fe11 100644
--- a/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
@@ -13,7 +13,7 @@ import net.minecraft.world.level.chunk.LightChunkGetter;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import net.minecraft.core.Direction;
 
-public class SkyLightSectionStorage extends LayerLightSectionStorage<SkyDataLayerStorageMap>
+public class SkyLightSectionStorage extends LayerLightSectionStorage<SkyLightSectionStorage.SkyDataLayerStorageMap> // MagmaCube - decompile fix
 {
     private static final Direction[] HORIZONTALS;
     private final LongSet sectionsWithSources;
diff --git a/src/main/java/net/minecraft/world/level/material/FluidState.java b/src/main/java/net/minecraft/world/level/material/FluidState.java
index d881139b2cb0b1854ba65a44456b0c4219c29a28..f57851706623424093725f769ee40a24f77aad22 100644
--- a/src/main/java/net/minecraft/world/level/material/FluidState.java
+++ b/src/main/java/net/minecraft/world/level/material/FluidState.java
@@ -109,6 +109,6 @@ public final class FluidState extends StateHolder<Fluid, FluidState>
     }
     
     static {
-        CODEC = StateHolder.codec((com.mojang.serialization.Codec<Object>)Registry.FLUID, Fluid::defaultFluidState).stable();
+        CODEC = StateHolder.codec(Registry.FLUID, Fluid::defaultFluidState).stable(); // MagmaCube - decompile fix
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
index 003162d1bc1298cebf6c0c13b675dba29fbabcf3..c20143eb8a6733d2d46cfd0d53228a571ff3d139 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -114,7 +114,7 @@ extends SavedData {
 
     @Override
     public CompoundTag save(CompoundTag debug12) {
-        ResourceLocation.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, (Object)this.dimension.location()).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("dimension", (Tag)debug1));
+        ResourceLocation.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, this.dimension.location()).resultOrPartial(((Logger)LOGGER)::error).ifPresent(debug1 -> debug12.put("dimension", (Tag)debug1)); // MagmaCube - decompile fix
         debug12.putInt("xCenter", this.x);
         debug12.putInt("zCenter", this.z);
         debug12.putByte("scale", this.scale);
@@ -149,7 +149,6 @@ extends SavedData {
         CompoundTag debug3;
         Object debug6;
         Object debug5;
-        Object debug4;
         if (!this.carriedByPlayers.containsKey(debug1)) {
             HoldingPlayer debug32 = new HoldingPlayer(debug1);
             this.carriedByPlayers.put(debug1, debug32);
@@ -159,7 +158,7 @@ extends SavedData {
             this.decorations.remove(debug1.getName().getString());
         }
         for (int debug33 = 0; debug33 < this.carriedBy.size(); ++debug33) {
-            debug4 = this.carriedBy.get(debug33);
+            HoldingPlayer debug4 = this.carriedBy.get(debug33); // MagmaCube - decompile fix
             debug5 = ((HoldingPlayer)debug4).player.getName().getString();
             if (debug4.player.removed || !debug4.player.inventory.contains(debug2) && !debug2.isFramed()) {
                 this.carriedByPlayers.remove(((HoldingPlayer)debug4).player);
@@ -172,7 +171,7 @@ extends SavedData {
         }
         if (debug2.isFramed() && this.trackingPosition) {
             ItemFrame debug34 = debug2.getFrame();
-            debug4 = debug34.getPos();
+            BlockPos debug4 = debug34.getPos(); // MagmaCube - decompile fix
             debug5 = this.frameMarkers.get(MapFrame.frameId((BlockPos)debug4));
             if (debug5 != null && debug34.getId() != ((MapFrame)debug5).getEntityId() && this.frameMarkers.containsKey(((MapFrame)debug5).getId())) {
                 this.decorations.remove("frame-" + ((MapFrame)debug5).getEntityId());
@@ -182,7 +181,7 @@ extends SavedData {
             this.frameMarkers.put(((MapFrame)debug6).getId(), (MapFrame)debug6);
         }
         if ((debug3 = debug2.getTag()) != null && debug3.contains("Decorations", 9)) {
-            debug4 = debug3.getList("Decorations", 10);
+            ListTag debug4 = debug3.getList("Decorations", 10); // MagmaCube - decompile fix
             for (int debug52 = 0; debug52 < ((ListTag)debug4).size(); ++debug52) {
                 debug6 = ((ListTag)debug4).getCompound(debug52);
                 if (this.decorations.containsKey(((CompoundTag)debug6).getString("id"))) continue;
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index 207e6072a8513bba90240c96cc3686c3da51f3db..470a40ca1885b9c9066de806708c173d0d34a942 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -22,6 +22,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.Lifecycle;
@@ -88,7 +89,7 @@ import org.apache.logging.log4j.Logger;
 public class LevelStorageSource {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final DateTimeFormatter FORMATTER = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral('-').appendValue(ChronoField.MONTH_OF_YEAR, 2).appendLiteral('-').appendValue(ChronoField.DAY_OF_MONTH, 2).appendLiteral('_').appendValue(ChronoField.HOUR_OF_DAY, 2).appendLiteral('-').appendValue(ChronoField.MINUTE_OF_HOUR, 2).appendLiteral('-').appendValue(ChronoField.SECOND_OF_MINUTE, 2).toFormatter();
-    private static final ImmutableList<String> OLD_SETTINGS_KEYS = ImmutableList.of((Object)"RandomSeed", (Object)"generatorName", (Object)"generatorOptions", (Object)"generatorVersion", (Object)"legacy_custom_options", (Object)"MapFeatures", (Object)"BonusChest");
+    private static final ImmutableList<String> OLD_SETTINGS_KEYS = ImmutableList.of("RandomSeed", "generatorName", "generatorOptions", "generatorVersion", "legacy_custom_options", "MapFeatures", "BonusChest"); // MagmaCube - decompile fix
     private final Path baseDir;
     private final Path backupDir;
     private final DataFixer fixerUpper;
@@ -110,21 +111,22 @@ public class LevelStorageSource {
     }
 
     private static <T> Pair<WorldGenSettings, Lifecycle> readWorldGenSettings(Dynamic<T> debug0, DataFixer debug1, int debug2) {
-        String debug52;
-        Dynamic debug3 = debug0.get("WorldGenSettings").orElseEmptyMap();
-        for (String debug52 : OLD_SETTINGS_KEYS) {
-            Optional debug6 = debug0.get(debug52).result();
+        // MagmaCube start - decompile fix
+        Dynamic<T> debug3 = debug0.get("WorldGenSettings").orElseEmptyMap(); // MagmaCube - decompile fix
+        for (String debug522 : OLD_SETTINGS_KEYS) {
+            Optional debug6 = debug0.get(debug522).result();
             if (!debug6.isPresent()) continue;
-            debug3 = debug3.set(debug52, (Dynamic)debug6.get());
+            debug3 = debug3.set(debug522, (Dynamic)debug6.get());
         }
-        Dynamic debug4 = debug1.update(References.WORLD_GEN_SETTINGS, debug3, debug2, SharedConstants.getCurrentVersion().getWorldVersion());
-        debug52 = WorldGenSettings.CODEC.parse(debug4);
-        return Pair.of((Object)debug52.resultOrPartial(Util.prefix("WorldGenSettings: ", ((Logger)LOGGER)::error)).orElseGet(() -> {
-            Registry debug1 = (Registry)RegistryLookupCodec.create(Registry.DIMENSION_TYPE_REGISTRY).codec().parse(debug4).resultOrPartial(Util.prefix("Dimension type registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get dimension registry"));
-            Registry debug2 = (Registry)RegistryLookupCodec.create(Registry.BIOME_REGISTRY).codec().parse(debug4).resultOrPartial(Util.prefix("Biome registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get biome registry"));
-            Registry debug3 = (Registry)RegistryLookupCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY).codec().parse(debug4).resultOrPartial(Util.prefix("Noise settings registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get noise settings registry"));
-            return WorldGenSettings.makeDefault(debug1, debug2, debug3);
-        }), (Object)debug52.lifecycle());
+        Dynamic<T> debug4 = debug1.update(References.WORLD_GEN_SETTINGS, debug3, debug2, SharedConstants.getCurrentVersion().getWorldVersion());
+        DataResult<WorldGenSettings> debug52 = WorldGenSettings.CODEC.parse(debug4);
+        return Pair.of(debug52.resultOrPartial(Util.prefix("WorldGenSettings: ", ((Logger)LOGGER)::error)).orElseGet(() -> {
+            Registry debug12 = (Registry)RegistryLookupCodec.create(Registry.DIMENSION_TYPE_REGISTRY).codec().parse(debug4).resultOrPartial(Util.prefix("Dimension type registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get dimension registry"));
+            Registry debug22 = (Registry)RegistryLookupCodec.create(Registry.BIOME_REGISTRY).codec().parse(debug4).resultOrPartial(Util.prefix("Biome registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get biome registry"));
+            Registry debug32 = (Registry)RegistryLookupCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY).codec().parse(debug4).resultOrPartial(Util.prefix("Noise settings registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get noise settings registry"));
+            return WorldGenSettings.makeDefault(debug12, debug22, debug32);
+        }), debug52.lifecycle());
+        // MagmaCube end - decompile end
     }
 
     private static DataPackConfig readDataPackConfig(Dynamic<?> debug0) {
@@ -182,7 +184,7 @@ public class LevelStorageSource {
             CompoundTag debug3 = debug2.getCompound("Data");
             debug3.remove("Player");
             int debug4 = debug3.contains("DataVersion", 99) ? debug3.getInt("DataVersion") : -1;
-            Dynamic debug5 = debug1.update(DataFixTypes.LEVEL.getType(), new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug3), debug4, SharedConstants.getCurrentVersion().getWorldVersion());
+            Dynamic<CompoundTag> debug5 = debug1.update(DataFixTypes.LEVEL.getType(), new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug3), debug4, SharedConstants.getCurrentVersion().getWorldVersion()); // MagmaCube - decompile fix
             return debug5.get("DataPacks").result().map(LevelStorageSource::readDataPackConfig).orElse(DataPackConfig.DEFAULT);
         }
         catch (Exception debug2) {
@@ -219,7 +221,7 @@ public class LevelStorageSource {
                 CompoundTag debug6 = debug5.getCompound("Data");
                 debug6.remove("Player");
                 int debug7 = debug6.contains("DataVersion", 99) ? debug6.getInt("DataVersion") : -1;
-                Dynamic debug8 = debug4.update(DataFixTypes.LEVEL.getType(), new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug6), debug7, SharedConstants.getCurrentVersion().getWorldVersion());
+                Dynamic<CompoundTag> debug8 = debug4.update(DataFixTypes.LEVEL.getType(), new Dynamic((DynamicOps)NbtOps.INSTANCE, (Object)debug6), debug7, SharedConstants.getCurrentVersion().getWorldVersion()); // MagmaCube - decompile fix
                 LevelVersion debug9 = LevelVersion.parse(debug8);
                 int debug10 = debug9.levelDataVersion();
                 if (debug10 == 19132 || debug10 == 19133) {
@@ -385,16 +387,6 @@ public class LevelStorageSource {
                             Files.delete(debug12);
                             return FileVisitResult.CONTINUE;
                         }
-
-                        @Override
-                        public /* synthetic */ FileVisitResult postVisitDirectory(Object object, IOException iOException) throws IOException {
-                            return this.postVisitDirectory((Path)object, iOException);
-                        }
-
-                        @Override
-                        public /* synthetic */ FileVisitResult visitFile(Object object, BasicFileAttributes basicFileAttributes) throws IOException {
-                            return this.visitFile((Path)object, basicFileAttributes);
-                        }
                     });
                     break;
                 }
@@ -447,18 +439,13 @@ public class LevelStorageSource {
                         if (debug1.endsWith("session.lock")) {
                             return FileVisitResult.CONTINUE;
                         }
-                        String debug3 = debug6.resolve(LevelStorageAccess.this.levelPath.relativize(debug1)).toString().replace('Â¥Â¥', '/');
+                        String debug3 = debug6.resolve(LevelStorageAccess.this.levelPath.relativize(debug1)).toString().replace('\\', '/'); // MagmaCube - decompile fix
                         ZipEntry debug42 = new ZipEntry(debug3);
                         debug4.putNextEntry(debug42);
                         com.google.common.io.Files.asByteSource((File)debug1.toFile()).copyTo((OutputStream)debug4);
                         debug4.closeEntry();
                         return FileVisitResult.CONTINUE;
                     }
-
-                    @Override
-                    public /* synthetic */ FileVisitResult visitFile(Object object, BasicFileAttributes basicFileAttributes) throws IOException {
-                        return this.visitFile((Path)object, basicFileAttributes);
-                    }
                 });
             }
             return Files.size(debug3);
diff --git a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
index 74ccec94d3d3484149707264053d392fd593eccd..ad11d186c144ca351c97071ef87c2810f8a4f03c 100644
--- a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -159,7 +159,7 @@ WorldData {
         debug2.put("Version", debug5);
         debug2.putInt("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
         RegistryWriteOps<Tag> debug6 = RegistryWriteOps.create(NbtOps.INSTANCE, debug12);
-        WorldGenSettings.CODEC.encodeStart(debug6, (Object)this.worldGenSettings).resultOrPartial(Util.prefix("WorldGenSettings: ", ((Logger)LOGGER)::error)).ifPresent(debug1 -> debug2.put("WorldGenSettings", (Tag)debug1));
+        WorldGenSettings.CODEC.encodeStart(debug6, this.worldGenSettings).resultOrPartial(Util.prefix("WorldGenSettings: ", ((Logger)LOGGER)::error)).ifPresent(debug1 -> debug2.put("WorldGenSettings", (Tag)debug1)); // MagmaCube - decompile fix
         debug2.putInt("GameType", this.settings.gameType().getId());
         debug2.putInt("SpawnX", this.xSpawn);
         debug2.putInt("SpawnY", this.ySpawn);
@@ -186,7 +186,7 @@ WorldData {
         if (debug3 != null) {
             debug2.put("Player", debug3);
         }
-        DataPackConfig.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, (Object)this.settings.getDataPackConfig()).result().ifPresent(debug1 -> debug2.put("DataPacks", (Tag)debug1));
+        DataPackConfig.CODEC.encodeStart((DynamicOps)NbtOps.INSTANCE, this.settings.getDataPackConfig()).result().ifPresent(debug1 -> debug2.put("DataPacks", (Tag)debug1)); // MagmaCube - decompile fix
         if (this.customBossEvents != null) {
             debug2.put("CustomBossEvents", this.customBossEvents);
         }
diff --git a/src/main/java/net/minecraft/world/level/storage/WorldData.java b/src/main/java/net/minecraft/world/level/storage/WorldData.java
index 4fb15e302f5db24e31d7258f907dc88029d00283..f02771616fb9ffcb20dc30532b3f39e11e9556ed 100644
--- a/src/main/java/net/minecraft/world/level/storage/WorldData.java
+++ b/src/main/java/net/minecraft/world/level/storage/WorldData.java
@@ -36,8 +36,8 @@ public interface WorldData {
         debug1.setDetail("Known server brands", () -> String.join((CharSequence)", ", this.getKnownServerBrands()));
         debug1.setDetail("Level was modded", () -> Boolean.toString(this.wasModded()));
         debug1.setDetail("Level storage version", () -> {
-            int debug1 = this.getVersion();
-            return String.format("0x%05X - %s", debug1, this.getStorageVersionName(debug1));
+            int debug1l = this.getVersion(); // MagmaCube - decompile fix
+            return String.format("0x%05X - %s", debug1l, this.getStorageVersionName(debug1l)); // MagmaCube - decompile fix
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java b/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java
index ae45fda735e59efabfc0a90b3d642f96c5579019..65559cfb48cb1a965e9ce6c6d079d424a471471f 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java
@@ -145,14 +145,6 @@ public class LootContext {
             public EntityTarget read(JsonReader debug1) throws IOException {
                 return EntityTarget.getByName(debug1.nextString());
             }
-
-            public /* synthetic */ Object read(JsonReader jsonReader) throws IOException {
-                return this.read(jsonReader);
-            }
-
-            public /* synthetic */ void write(JsonWriter jsonWriter, Object object) throws IOException {
-                this.write(jsonWriter, (EntityTarget)((Object)object));
-            }
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootPool.java b/src/main/java/net/minecraft/world/level/storage/loot/LootPool.java
index e5d3a3abf1fbf3b1385d815dc2a440a8c9d9b456..b0401076840b8f8e5e9c4c6979c58862a96ecde1 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootPool.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootPool.java
@@ -70,14 +70,14 @@ public class LootPool {
 
     private void addRandomItem(Consumer<ItemStack> debug1, LootContext debug2) {
         Random debug32 = debug2.getRandom();
-        ArrayList debug4 = Lists.newArrayList();
+        ArrayList<LootPoolEntry> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
         MutableInt debug5 = new MutableInt();
         for (LootPoolEntryContainer lootPoolEntryContainer : this.entries) {
             lootPoolEntryContainer.expand(debug2, debug3 -> {
-                int debug4 = debug3.getWeight(debug5.getLuck());
-                if (debug4 > 0) {
+                int i = debug3.getWeight(debug2.getLuck()); // MagmaCube - decompile fix
+                if (i > 0) { // MagmaCube - decompile fix
                     debug4.add(debug3);
-                    debug5.add(debug4);
+                    debug5.add(i); // MagmaCube - decompile fix
                 }
             });
         }
@@ -154,14 +154,6 @@ public class LootPool {
             }
             return debug4;
         }
-
-        public /* synthetic */ JsonElement serialize(Object object, Type type, JsonSerializationContext jsonSerializationContext) {
-            return this.serialize((LootPool)object, type, jsonSerializationContext);
-        }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 
     public static class Builder
@@ -206,21 +198,6 @@ public class LootPool {
             }
             return new LootPool(this.entries.toArray(new LootPoolEntryContainer[0]), this.conditions.toArray(new LootItemCondition[0]), this.functions.toArray(new LootItemFunction[0]), this.rolls, this.bonusRolls);
         }
-
-        @Override
-        public /* synthetic */ Object unwrap() {
-            return this.unwrap();
-        }
-
-        @Override
-        public /* synthetic */ Object apply(LootItemFunction.Builder builder) {
-            return this.apply(builder);
-        }
-
-        @Override
-        public /* synthetic */ Object when(LootItemCondition.Builder builder) {
-            return this.when(builder);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java b/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
index 955fe6faf021a9ff8037063576d3fc1dffa66ff7..eeccc1800ab062ff844a5361507940dfd09fc6fe 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
@@ -25,10 +25,7 @@ import com.google.gson.JsonParseException;
 import com.google.gson.JsonSerializationContext;
 import com.google.gson.JsonSerializer;
 import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Random;
+import java.util.*;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import net.minecraft.resources.ResourceLocation;
@@ -134,18 +131,15 @@ public class LootTable {
     }
 
     private void shuffleAndSplitItems(List<ItemStack> debug1, int debug2, Random debug3) {
-        ArrayList debug4 = Lists.newArrayList();
-        Object debug5 = debug1.iterator();
-        while (debug5.hasNext()) {
-            ItemStack debug6 = debug5.next();
+        ArrayList<ItemStack> debug4 = Lists.newArrayList(); // MagmaCube - decompile fix
+        for (ItemStack debug6 : debug1) { // MagmaCube - decompile fix
             if (debug6.isEmpty()) {
-                debug5.remove();
                 continue;
             }
             if (debug6.getCount() <= 1) continue;
             debug4.add(debug6);
-            debug5.remove();
         }
+        ItemStack debug5; // MagmaCube - decompile fix
         while (debug2 - debug1.size() - debug4.size() > 0 && !debug4.isEmpty()) {
             debug5 = (ItemStack)debug4.remove(Mth.nextInt(debug3, 0, debug4.size() - 1));
             int debug6 = Mth.nextInt(debug3, 1, ((ItemStack)debug5).getCount() / 2);
@@ -183,15 +177,14 @@ public class LootTable {
     implements JsonDeserializer<LootTable>,
     JsonSerializer<LootTable> {
         public LootTable deserialize(JsonElement debug1, Type debug2, JsonDeserializationContext debug3) throws JsonParseException {
-            LootItemFunction[] debug7;
             JsonObject debug4 = GsonHelper.convertToJsonObject(debug1, "loot table");
             LootPool[] debug5 = GsonHelper.getAsObject(debug4, "pools", new LootPool[0], debug3, LootPool[].class);
             LootContextParamSet debug6 = null;
             if (debug4.has("type")) {
-                debug7 = GsonHelper.getAsString(debug4, "type");
+                String debug7 = GsonHelper.getAsString(debug4, "type"); // MagmaCube - decompile fix
                 debug6 = LootContextParamSets.get(new ResourceLocation((String)debug7));
             }
-            debug7 = GsonHelper.getAsObject(debug4, "functions", new LootItemFunction[0], debug3, LootItemFunction[].class);
+            LootItemFunction[] debug7 = GsonHelper.getAsObject(debug4, "functions", new LootItemFunction[0], debug3, LootItemFunction[].class); // MagmaCube - decompile fix
             return new LootTable(debug6 != null ? debug6 : LootContextParamSets.ALL_PARAMS, debug5, debug7);
         }
 
@@ -213,14 +206,6 @@ public class LootTable {
             }
             return debug4;
         }
-
-        public /* synthetic */ JsonElement serialize(Object object, Type type, JsonSerializationContext jsonSerializationContext) {
-            return this.serialize((LootTable)object, type, jsonSerializationContext);
-        }
-
-        public /* synthetic */ Object deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            return this.deserialize(jsonElement, type, jsonDeserializationContext);
-        }
     }
 
     public static class Builder
@@ -253,16 +238,6 @@ public class LootTable {
         public LootTable build() {
             return new LootTable(this.paramSet, this.pools.toArray(new LootPool[0]), this.functions.toArray(new LootItemFunction[0]));
         }
-
-        @Override
-        public /* synthetic */ Object unwrap() {
-            return this.unwrap();
-        }
-
-        @Override
-        public /* synthetic */ Object apply(LootItemFunction.Builder builder) {
-            return this.apply(builder);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
index 78d6fae98edd76197f40dd41a0cb1a723ba297f1..7347cb51bc30a2afb6ba40842011b12966676e9f 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
@@ -99,11 +99,6 @@ extends LootPoolEntryContainer {
         }
 
         protected abstract T deserialize(JsonObject var1, JsonDeserializationContext var2, int var3, int var4, LootItemCondition[] var5, LootItemFunction[] var6);
-
-        @Override
-        public /* synthetic */ LootPoolEntryContainer deserializeCustom(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserializeCustom(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 
     static class DummyBuilder
@@ -123,11 +118,6 @@ extends LootPoolEntryContainer {
         public LootPoolEntryContainer build() {
             return this.constructor.build(this.weight, this.quality, this.getConditions(), this.getFunctions());
         }
-
-        @Override
-        protected /* synthetic */ LootPoolEntryContainer.Builder getThis() {
-            return this.getThis();
-        }
     }
 
     @FunctionalInterface
@@ -161,11 +151,6 @@ extends LootPoolEntryContainer {
             this.quality = debug1;
             return (T)((Builder)this.getThis());
         }
-
-        @Override
-        public /* synthetic */ Object apply(LootItemFunction.Builder builder) {
-            return this.apply(builder);
-        }
     }
 
     public abstract class EntryBase
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
index ab68ddab597e399524c4dd9a4aa644175f2ff6ff..b5a9923576b663c9dd668110cadea4b24a659c1a 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
@@ -117,11 +117,6 @@ extends LootItemConditionalFunction {
             Formula debug8 = debug1.has("parameters") ? debug7.deserialize(GsonHelper.getAsJsonObject(debug1, "parameters"), debug2) : debug7.deserialize(new JsonObject(), debug2);
             return new ApplyBonusCount(debug3, debug5, debug8);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 
     static final class OreDrops
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyExplosionDecay.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyExplosionDecay.java
index fa8f9f6bf84ff26a9e1fd609c6610b47bddcafff..38e8caca13d1f4fbc9a134d9a2a4e385d50f870d 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyExplosionDecay.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyExplosionDecay.java
@@ -56,11 +56,6 @@ extends LootItemConditionalFunction {
         public ApplyExplosionDecay deserialize(JsonObject debug1, JsonDeserializationContext debug2, LootItemCondition[] debug3) {
             return new ApplyExplosionDecay(debug3);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
index f979b6723b1abfda7c0575f6a6ed476bf0c30be3..6df8513f642eab2d071c1fc7c9ae6904f7b3b6d2 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
@@ -109,11 +109,6 @@ extends LootItemConditionalFunction {
             }
             return new CopyBlockState(debug3, debug5, debug7);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 
     public static class Builder
@@ -142,11 +137,6 @@ extends LootItemConditionalFunction {
         public LootItemFunction build() {
             return new CopyBlockState(this.getConditions(), this.block, this.properties);
         }
-
-        @Override
-        protected /* synthetic */ LootItemConditionalFunction.Builder getThis() {
-            return this.getThis();
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java
index d69a630558f6500870d7d79fc5a6895e54b8cd6f..8e230544612bd504b8cefd9dad17c3a704738925 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNameFunction.java
@@ -71,11 +71,6 @@ extends LootItemConditionalFunction {
             NameSource debug4 = NameSource.getByName(GsonHelper.getAsString(debug1, "source"));
             return new CopyNameFunction(debug3, debug4);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 
     public static enum NameSource {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java
index b6c07657f59c6e0f30b4f556003191691bf8a302..02833a63f135f5c0dc033e1ada9f043e452c766a 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java
@@ -24,6 +24,7 @@ import com.mojang.brigadier.StringReader;
 import net.minecraft.commands.arguments.NbtPathArgument;
 import java.util.Collection;
 import com.google.common.collect.ImmutableList;
+import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.nbt.Tag;
@@ -60,13 +61,13 @@ public class CopyNbtFunction extends LootItemConditionalFunction
     
     @Override
     public Set<LootContextParam<?>> getReferencedContextParams() {
-        return (Set<LootContextParam<?>>)ImmutableSet.of((Object)this.source.param);
+        return ImmutableSet.of(this.source.param); // MagmaCube - decompile fix
     }
     
     public ItemStack run(final ItemStack debug1, final LootContext debug2) {
         final Tag debug3 = this.source.getter.apply(debug2);
         if (debug3 != null) {
-            this.operations.forEach(debug2 -> debug2.apply((Supplier<Tag>)debug1::getOrCreateTag, debug3));
+            this.operations.forEach(debug22 -> debug22.apply((Supplier<Tag>)debug1::getOrCreateTag, debug3)); // MagmaCube - decompile fix
         }
         return debug1;
     }
@@ -128,7 +129,7 @@ public class CopyNbtFunction extends LootItemConditionalFunction
         private final List<CopyOperation> ops;
         
         private Builder(final DataSource debug1) {
-            this.ops = (List<CopyOperation>)Lists.newArrayList();
+            this.ops = Lists.newArrayList(); // MagmaCube - decompile fix
             this.source = debug1;
         }
         
@@ -148,7 +149,7 @@ public class CopyNbtFunction extends LootItemConditionalFunction
         
         @Override
         public LootItemFunction build() {
-            return new CopyNbtFunction(this.getConditions(), this.source, this.ops, null);
+            return new CopyNbtFunction(this.getConditions(), this.source, this.ops); // MagmaCube - decompile fix
         }
     }
     
@@ -157,16 +158,18 @@ public class CopyNbtFunction extends LootItemConditionalFunction
         REPLACE("replace") {
             @Override
             public void merge(final Tag debug1, final NbtPathArgument.NbtPath debug2, final List<Tag> debug3) throws CommandSyntaxException {
-                debug2.set(debug1, (Tag)Iterables.getLast((Iterable)debug3)::copy);
+                debug2.set(debug1, Iterables.getLast(debug3)::copy); // MagmaCube - decompile fix
             }
         }, 
         APPEND("append") {
             @Override
             public void merge(final Tag debug1, final NbtPathArgument.NbtPath debug2, final List<Tag> debug3) throws CommandSyntaxException {
                 final List<Tag> debug4 = debug2.getOrCreate(debug1, (Supplier<Tag>)ListTag::new);
-                debug4.forEach(debug1 -> {
-                    if (debug1 instanceof ListTag) {
-                        debug3.forEach(debug1 -> debug1.add(debug1.copy()));
+                // MagmaCube start - decompile fix
+                debug4.forEach(debug12 -> {
+                    if (debug12 instanceof ListTag) {
+                        debug3.forEach(debug13 -> ((ListTag) debug12).add(debug13.copy()));
+                        // MagmaCube end - decompile fix
                     }
                 });
             }
@@ -175,11 +178,13 @@ public class CopyNbtFunction extends LootItemConditionalFunction
             @Override
             public void merge(final Tag debug1, final NbtPathArgument.NbtPath debug2, final List<Tag> debug3) throws CommandSyntaxException {
                 final List<Tag> debug4 = debug2.getOrCreate(debug1, (Supplier<Tag>)CompoundTag::new);
-                debug4.forEach(debug1 -> {
-                    if (debug1 instanceof CompoundTag) {
-                        debug3.forEach(debug1 -> {
-                            if (debug1 instanceof CompoundTag) {
-                                debug1.merge(debug1);
+                // MagmaCube start - decompile fix
+                debug4.forEach(debug12 -> {
+                    if (debug12 instanceof CompoundTag) {
+                        debug3.forEach(debug122 -> {
+                            if (debug122 instanceof CompoundTag) {
+                                ((CompoundTag) debug12).merge((CompoundTag) debug122);
+                                // MagmaCube end - decompile fix
                             }
                         });
                     }
@@ -204,21 +209,38 @@ public class CopyNbtFunction extends LootItemConditionalFunction
             throw new IllegalArgumentException("Invalid merge strategy" + debug0);
         }
     }
-    
-    public enum DataSource
-    {
-        public static final DataSource THIS;
-        public static final DataSource KILLER;
-        public static final DataSource KILLER_PLAYER;
-        public static final DataSource BLOCK_ENTITY;
+
+    // MagmaCube start - decompile fix
+    public enum DataSource {
+        THIS("this", LootContextParams.THIS_ENTITY, CopyNbtFunction.ENTITY_GETTER),
+        KILLER("killer", LootContextParams.KILLER_ENTITY, CopyNbtFunction.ENTITY_GETTER),
+        KILLER_PLAYER("killer_player", LootContextParams.LAST_DAMAGE_PLAYER, CopyNbtFunction.ENTITY_GETTER),
+        BLOCK_ENTITY("block_entity", LootContextParams.BLOCK_ENTITY, CopyNbtFunction.BLOCK_ENTITY_GETTER);
+
         public final String name;
+
         public final LootContextParam<?> param;
+
         public final Function<LootContext, Tag> getter;
-        
-        private DataSource(final String debug3, final LootContextParam<T> debug4, final Function<? super T, Tag> debug5);
-        
-        public static DataSource getByName(final String debug0);
+
+        <T> DataSource(String debug3, LootContextParam<T> debug4, Function<? super T, Tag> debug5) {
+            this.name = debug3;
+            this.param = debug4;
+            this.getter = (debug2 -> {
+                T debug32 = (T)debug2.getParamOrNull(debug4);
+                return (debug32 != null) ? debug5.apply(debug32) : null;
+            });
+        }
+
+        public static DataSource getByName(String debug0) {
+            for (DataSource debug4 : values()) {
+                if (debug4.name.equals(debug0))
+                    return debug4;
+            }
+            throw new IllegalArgumentException("Invalid tag source " + debug0);
+        }
     }
+    // MagmaCube end - decompile fix
     
     public static class Serializer extends LootItemConditionalFunction.Serializer<CopyNbtFunction>
     {
@@ -234,13 +256,13 @@ public class CopyNbtFunction extends LootItemConditionalFunction
         @Override
         public CopyNbtFunction deserialize(final JsonObject debug1, final JsonDeserializationContext debug2, final LootItemCondition[] debug3) {
             final DataSource debug4 = DataSource.getByName(GsonHelper.getAsString(debug1, "source"));
-            final List<CopyOperation> debug5 = (List<CopyOperation>)Lists.newArrayList();
+            final List<CopyOperation> debug5 = Lists.newArrayList(); // MagmaCube - decompile fix
             final JsonArray debug6 = GsonHelper.getAsJsonArray(debug1, "ops");
             for (final JsonElement debug7 : debug6) {
                 final JsonObject debug8 = GsonHelper.convertToJsonObject(debug7, "op");
                 debug5.add(CopyOperation.fromJson(debug8));
             }
-            return new CopyNbtFunction(debug3, debug4, debug5, null);
+            return new CopyNbtFunction(debug3, debug4, debug5); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
index 64a99a9c4632f2aef36cb9b3360d48b4da0516bf..e1ca4b4a4721c6c352833d06a2fee1908e46d160 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
@@ -96,7 +96,7 @@ extends LootItemConditionalFunction {
     }
 
     public static LootItemConditionalFunction.Builder<?> randomApplicableEnchantment() {
-        return EnchantRandomlyFunction.simpleBuilder(debug0 -> new EnchantRandomlyFunction((LootItemCondition[])debug0, (Collection<Enchantment>)ImmutableList.of()));
+        return EnchantRandomlyFunction.simpleBuilder(debug0 -> new EnchantRandomlyFunction((LootItemCondition[])debug0, ImmutableList.of())); // MagmaCube - decompile fix
     }
 
     public static class Serializer
@@ -130,11 +130,6 @@ extends LootItemConditionalFunction {
             }
             return new EnchantRandomlyFunction(debug3, debug4);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 
     public static class Builder
@@ -155,11 +150,6 @@ extends LootItemConditionalFunction {
         public LootItemFunction build() {
             return new EnchantRandomlyFunction(this.getConditions(), this.enchantments);
         }
-
-        @Override
-        protected /* synthetic */ LootItemConditionalFunction.Builder getThis() {
-            return this.getThis();
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunction.java
index 44d65703876c23eb31fbf1691f23b104afef1ea9..630146411b18a35aaa54e53afc3220dae8dca6d7 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunction.java
@@ -10,7 +10,7 @@ public interface LootItemFunction extends LootContextUser, BiFunction<ItemStack,
 {
     LootItemFunctionType getType();
     
-    default Consumer<ItemStack> decorate(final BiFunction<ItemStack, LootContext, ItemStack> debug0, final Consumer<ItemStack> debug1, final LootContext debug2) {
+    static Consumer<ItemStack> decorate(final BiFunction<ItemStack, LootContext, ItemStack> debug0, final Consumer<ItemStack> debug1, final LootContext debug2) { // MagmaCube - decompile fix
         return debug3 -> debug1.accept(debug0.apply(debug3, debug2));
     }
     
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
index 68b14eb80ce9ebe97a8fe154bbb15f4160430459..89a7cf49ace38bee264b06d9f177caea6d005286 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
@@ -127,15 +127,10 @@ extends LootItemConditionalFunction {
         @Override
         public SetLoreFunction deserialize(JsonObject debug1, JsonDeserializationContext debug2, LootItemCondition[] debug3) {
             boolean debug4 = GsonHelper.getAsBoolean(debug1, "replace", false);
-            List debug5 = (List)Streams.stream((Iterable)GsonHelper.getAsJsonArray(debug1, "lore")).map(Component.Serializer::fromJson).collect(ImmutableList.toImmutableList());
+            List debug5 = (List)Streams.stream(GsonHelper.getAsJsonArray(debug1, "lore")).map(Component.Serializer::fromJson).collect(ImmutableList.toImmutableList()); // MagmaCube - decompile fix
             LootContext.EntityTarget debug6 = GsonHelper.getAsObject(debug1, "entity", null, debug2, LootContext.EntityTarget.class);
             return new SetLoreFunction(debug3, debug4, debug5, debug6);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SmeltItemFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SmeltItemFunction.java
index c802b79942ee89563c3be2cb1086deea1d2c6e02..8e1ec6e5f4e97d930f854fb4c6a18aa20394f220 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SmeltItemFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SmeltItemFunction.java
@@ -63,11 +63,6 @@ extends LootItemConditionalFunction {
         public SmeltItemFunction deserialize(JsonObject debug1, JsonDeserializationContext debug2, LootItemCondition[] debug3) {
             return new SmeltItemFunction(debug3);
         }
-
-        @Override
-        public /* synthetic */ LootItemConditionalFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] arrlootItemCondition) {
-            return this.deserialize(jsonObject, jsonDeserializationContext, arrlootItemCondition);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/timers/FunctionCallback.java b/src/main/java/net/minecraft/world/level/timers/FunctionCallback.java
index 6b6d86e7b8572ba1d38d52143d418b784c48fc8a..e1d7aed02cb51fd9d3c6d54748a48b247ed06075 100644
--- a/src/main/java/net/minecraft/world/level/timers/FunctionCallback.java
+++ b/src/main/java/net/minecraft/world/level/timers/FunctionCallback.java
@@ -41,11 +41,6 @@ implements TimerCallback<MinecraftServer> {
             ResourceLocation debug2 = new ResourceLocation(debug1.getString("Name"));
             return new FunctionCallback(debug2);
         }
-
-        @Override
-        public /* synthetic */ TimerCallback deserialize(CompoundTag compoundTag) {
-            return this.deserialize(compoundTag);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/level/timers/FunctionTagCallback.java b/src/main/java/net/minecraft/world/level/timers/FunctionTagCallback.java
index 0c70498868b57d64ca94a8337c9fc65fa95d8a5e..a7c82f12ca000a2c809cd299a5b989fdbe6449dd 100644
--- a/src/main/java/net/minecraft/world/level/timers/FunctionTagCallback.java
+++ b/src/main/java/net/minecraft/world/level/timers/FunctionTagCallback.java
@@ -45,11 +45,6 @@ implements TimerCallback<MinecraftServer> {
             ResourceLocation debug2 = new ResourceLocation(debug1.getString("Name"));
             return new FunctionTagCallback(debug2);
         }
-
-        @Override
-        public /* synthetic */ TimerCallback deserialize(CompoundTag compoundTag) {
-            return this.deserialize(compoundTag);
-        }
     }
 }
 
diff --git a/src/main/java/net/minecraft/world/phys/shapes/CollisionContext.java b/src/main/java/net/minecraft/world/phys/shapes/CollisionContext.java
index da16b4052708ca0dd1ca64262e35e96bfa56df30..e91bf6e52a4503f8e724b9c5ba9db81eb10ed489 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/CollisionContext.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/CollisionContext.java
@@ -8,11 +8,11 @@ import net.minecraft.world.entity.Entity;
 
 public interface CollisionContext
 {
-    default CollisionContext empty() {
+    static CollisionContext empty() { // MagmaCube - decompile fix
         return EntityCollisionContext.EMPTY;
     }
     
-    default CollisionContext of(final Entity debug0) {
+    static CollisionContext of(final Entity debug0) { // MagmaCube - decompile fix
         return new EntityCollisionContext(debug0);
     }
     
diff --git a/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java b/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java
index 73efc3a3eaf1568917643ef880fa07cad98c548f..b314a51bfbb6daee3d74a8e25f27648929b466fb 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java
@@ -65,10 +65,9 @@ public abstract class VoxelShape
     }
     
     public VoxelShape optimize() {
-        final VoxelShape[] debug12 = { Shapes.empty() };
-        final Object o;
+        final VoxelShape[] o = { Shapes.empty() }; // MagmaCube - decompile fix
         this.forAllBoxes((debug1, debug3, debug5, debug7, debug9, debug11) -> o[0] = Shapes.joinUnoptimized(o[0], Shapes.box(debug1, debug3, debug5, debug7, debug9, debug11), BooleanOp.OR));
-        return debug12[0];
+        return o[0]; // MagmaCube - decompile fix
     }
     
     public void forAllEdges(final Shapes.DoubleLineConsumer debug1) {
@@ -76,17 +75,14 @@ public abstract class VoxelShape
     }
     
     public void forAllBoxes(final Shapes.DoubleLineConsumer debug1) {
-        final DoubleList debug10 = this.getCoords(Direction.Axis.X);
-        final DoubleList debug11 = this.getCoords(Direction.Axis.Y);
-        final DoubleList debug12 = this.getCoords(Direction.Axis.Z);
-        final DoubleList list;
-        final DoubleList list2;
-        final DoubleList list3;
+        final DoubleList list = this.getCoords(Direction.Axis.X); // MagmaCube - decompile fix
+        final DoubleList list2 = this.getCoords(Direction.Axis.Y); // MagmaCube - decompile fix
+        final DoubleList list3 = this.getCoords(Direction.Axis.Z); // MagmaCube - decompile fix
         this.shape.forAllBoxes((debug4, debug5, debug6, debug7, debug8, debug9) -> debug1.consume(list.getDouble(debug4), list2.getDouble(debug5), list3.getDouble(debug6), list.getDouble(debug7), list2.getDouble(debug8), list3.getDouble(debug9)), true);
     }
     
     public List<AABB> toAabbs() {
-        final List<AABB> debug12 = (List<AABB>)Lists.newArrayList();
+        final List<AABB> debug12 = Lists.newArrayList(); // MagmaCube - decompile fix
         this.forAllBoxes((debug1, debug3, debug5, debug7, debug9, debug11) -> debug12.add(new AABB(debug1, debug3, debug5, debug7, debug9, debug11)));
         return debug12;
     }
diff --git a/src/main/java/net/minecraft/world/scores/Objective.java b/src/main/java/net/minecraft/world/scores/Objective.java
index 8419363fc3c59a5f7d73192b1b226078febe46dc..bfe2824a48f6f89304e6427d70e75789af864bf3 100644
--- a/src/main/java/net/minecraft/world/scores/Objective.java
+++ b/src/main/java/net/minecraft/world/scores/Objective.java
@@ -42,9 +42,8 @@ public class Objective
     }
     
     private Component createFormattedDisplayName() {
-        final HoverEvent debug2;
         return ComponentUtils.wrapInSquareBrackets(this.displayName.copy().withStyle(debug1 -> {
-            new HoverEvent((HoverEvent.Action<TextComponent>)HoverEvent.Action.SHOW_TEXT, new TextComponent(this.name));
+            HoverEvent debug2 = new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TextComponent(this.name)); // MagmaCube - decompile fix
             return debug1.withHoverEvent(debug2);
         }));
     }
diff --git a/src/main/java/net/minecraft/world/scores/Scoreboard.java b/src/main/java/net/minecraft/world/scores/Scoreboard.java
index 924dcbbff6beeb446a4807c0d363675d911600f6..d9e02fb374fe2e4d75dba0d69bc924b8c10ae35c 100644
--- a/src/main/java/net/minecraft/world/scores/Scoreboard.java
+++ b/src/main/java/net/minecraft/world/scores/Scoreboard.java
@@ -31,12 +31,14 @@ public class Scoreboard
     private static String[] displaySlotNames;
     
     public Scoreboard() {
-        this.objectivesByName = (Map<String, Objective>)Maps.newHashMap();
-        this.objectivesByCriteria = (Map<ObjectiveCriteria, List<Objective>>)Maps.newHashMap();
-        this.playerScores = (Map<String, Map<Objective, Score>>)Maps.newHashMap();
+        // MagmaCube start - decompile fix
+        this.objectivesByName = Maps.newHashMap();
+        this.objectivesByCriteria = Maps.newHashMap();
+        this.playerScores = Maps.newHashMap();
         this.displayObjectives = new Objective[19];
-        this.teamsByName = (Map<String, PlayerTeam>)Maps.newHashMap();
-        this.teamsByPlayer = (Map<String, PlayerTeam>)Maps.newHashMap();
+        this.teamsByName = Maps.newHashMap();
+        this.teamsByPlayer = Maps.newHashMap();
+        // MagmaCube end - decompile fix
     }
     
     public boolean hasObjective(final String debug1) {
@@ -67,7 +69,7 @@ public class Scoreboard
     }
     
     public final void forAllObjectives(final ObjectiveCriteria debug1, final String debug2, final Consumer<Score> debug3) {
-        this.objectivesByCriteria.getOrDefault(debug1, Collections.emptyList()).forEach(debug3 -> debug3.accept(this.getOrCreatePlayerScore(debug2, debug3)));
+        this.objectivesByCriteria.getOrDefault(debug1, Collections.emptyList()).forEach(debug3l -> debug3.accept(this.getOrCreatePlayerScore(debug2, debug3l))); // MagmaCube - decompile fix
     }
     
     public boolean hasPlayerScore(final String debug1, final Objective debug2) {
@@ -84,16 +86,15 @@ public class Scoreboard
             throw new IllegalArgumentException("The player name '" + debug1 + "' is too long!");
         }
         final Map<Objective, Score> debug3 = this.playerScores.computeIfAbsent(debug1, debug0 -> Maps.newHashMap());
-        final Score debug4;
-        return debug3.computeIfAbsent(debug2, debug2 -> {
-            debug4 = new Score(this, debug2, debug1);
+        return debug3.computeIfAbsent(debug2, debug2l -> { // MagmaCube - decompile fix
+            Score debug4 = new Score(this, debug2l, debug1); // MagmaCube - decompile fix
             debug4.setScore(0);
             return debug4;
         });
     }
     
     public Collection<Score> getPlayerScores(final Objective debug1) {
-        final List<Score> debug2 = (List<Score>)Lists.newArrayList();
+        final List<Score> debug2 = Lists.newArrayList(); // MagmaCube - decompile fix
         for (final Map<Objective, Score> debug3 : this.playerScores.values()) {
             final Score debug4 = debug3.get(debug1);
             if (debug4 != null) {
@@ -143,7 +144,7 @@ public class Scoreboard
     public Map<Objective, Score> getPlayerScores(final String debug1) {
         Map<Objective, Score> debug2 = this.playerScores.get(debug1);
         if (debug2 == null) {
-            debug2 = (Map<Objective, Score>)Maps.newHashMap();
+            debug2 = Maps.newHashMap(); // MagmaCube - decompile fix
         }
         return debug2;
     }
@@ -331,18 +332,18 @@ public class Scoreboard
     }
     
     protected ListTag savePlayerScores() {
-        final ListTag debug2 = new ListTag();
-        final CompoundTag debug3;
-        final AbstractList<CompoundTag> list;
-        this.playerScores.values().stream().map((Function<? super Map<Objective, Score>, ?>)Map::values).forEach(debug1 -> debug1.stream().filter(debug0 -> debug0.getObjective() != null).forEach(debug1 -> {
-            debug3 = new CompoundTag();
-            debug3.putString("Name", debug1.getOwner());
-            debug3.putString("Objective", debug1.getObjective().getName());
-            debug3.putInt("Score", debug1.getScore());
-            debug3.putBoolean("Locked", debug1.isLocked());
+        // MagmaCube start - decompile fix
+        final ListTag list = new ListTag();
+        this.playerScores.values().stream().map(Map::values).forEach(debug1 -> debug1.stream().filter(debug0 -> debug0.getObjective() != null).forEach(debug1l -> { // MagmaCube - decompile fix
+            CompoundTag debug3 = new CompoundTag();
+            debug3.putString("Name", debug1l.getOwner());
+            debug3.putString("Objective", debug1l.getObjective().getName());
+            debug3.putInt("Score", debug1l.getScore());
+            debug3.putBoolean("Locked", debug1l.isLocked());
             list.add(debug3);
         }));
-        return debug2;
+        return list;
+        // MagmaCube end - decompile fix
     }
     
     protected void loadPlayerScores(final ListTag debug1) {
diff --git a/src/main/java/net/minecraft/world/scores/criteria/ObjectiveCriteria.java b/src/main/java/net/minecraft/world/scores/criteria/ObjectiveCriteria.java
index 807af77fb29367d7526b518f91336258a5393fc0..1f2191c1fa6c752a14c241d5368dbd378628b0a4 100644
--- a/src/main/java/net/minecraft/world/scores/criteria/ObjectiveCriteria.java
+++ b/src/main/java/net/minecraft/world/scores/criteria/ObjectiveCriteria.java
@@ -106,9 +106,9 @@ public class ObjectiveCriteria
         }
         
         static {
-            final ImmutableMap.Builder<String, RenderType> debug0 = (ImmutableMap.Builder<String, RenderType>)ImmutableMap.builder();
+            final ImmutableMap.Builder<String, RenderType> debug0 = ImmutableMap.builder(); // MagmaCube - decompile fix
             for (final RenderType debug2 : values()) {
-                debug0.put((Object)debug2.id, (Object)debug2);
+                debug0.put(debug2.id, debug2); // MagmaCube - decompile fix
             }
             BY_ID = (Map)debug0.build();
         }
