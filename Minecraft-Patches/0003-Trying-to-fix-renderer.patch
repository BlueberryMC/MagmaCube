From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Wed, 30 Sep 2020 15:23:36 +0900
Subject: [PATCH] Trying to fix renderer


diff --git a/src/main/java/com/mojang/blaze3d/systems/RenderSystem.java b/src/main/java/com/mojang/blaze3d/systems/RenderSystem.java
index 90051601eb00584b06a4872117270e31b726c3aa..6970515434160c7438fcbfafec87529329676c37 100644
--- a/src/main/java/com/mojang/blaze3d/systems/RenderSystem.java
+++ b/src/main/java/com/mojang/blaze3d/systems/RenderSystem.java
@@ -62,8 +62,7 @@ public class RenderSystem {
     }
 
     public static void initGameThread(boolean debug0) {
-        boolean debug1;
-        boolean bl = debug1 = renderThread == Thread.currentThread();
+        boolean debug1 = renderThread == Thread.currentThread(); // MagmaCube - decompile fix
         if (gameThread != null || renderThread == null || debug1 == debug0) {
             throw new IllegalStateException("Could not initialize tick thread");
         }
diff --git a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
index 66046fe644937638ccf812ce4bd97c2750146920..def1c901ec09ec24601f9a7abe007304c0247020 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
@@ -18,11 +18,11 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
 {
     private static final Logger LOGGER;
     private ByteBuffer buffer;
-    private final List<DrawState> vertexCounts;
-    private int lastRenderedCountIndex;
-    private int totalRenderedBytes;
-    private int nextElementByte;
-    private int totalUploadedBytes;
+    private final List<DrawState> vertexCounts = Lists.newArrayList(); // MagmaCube - decompile fix
+    private int lastRenderedCountIndex = 0; // MagmaCube - decompile fix
+    private int totalRenderedBytes = 0; // MagmaCube - decompile fix
+    private int nextElementByte = 0; // MagmaCube - decompile fix
+    private int totalUploadedBytes = 0; // MagmaCube - decompile fix
     private int vertices;
     @Nullable
     private VertexFormatElement currentElement;
@@ -34,11 +34,6 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
     private boolean building;
     
     public BufferBuilder(final int debug1) {
-        this.vertexCounts = Lists.newArrayList(); // MagmaCube - decompile fix
-        this.lastRenderedCountIndex = 0;
-        this.totalRenderedBytes = 0;
-        this.nextElementByte = 0;
-        this.totalUploadedBytes = 0;
         this.buffer = MemoryTracker.createByteBuffer(debug1 * 4);
     }
     
@@ -80,8 +75,8 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         final FloatBuffer debug4 = this.buffer.asFloatBuffer();
         final int debug5 = this.vertices / 4;
         final float[] debug6 = new float[debug5];
-        for (int debug7 = 0; debug7 < debug5; ++debug7) {
-            debug6[debug7] = getQuadDistanceFromPlayer(debug4, debug1, debug2, debug3, this.format.getIntegerSize(), this.totalRenderedBytes / 4 + debug7 * this.format.getVertexSize());
+        for (int i = 0; i < debug5; ++i) { // MagmaCube - decompile fix
+            debug6[i] = getQuadDistanceFromPlayer(debug4, debug1, debug2, debug3, this.format.getIntegerSize(), this.totalRenderedBytes / 4 + i * this.format.getVertexSize()); // MagmaCube - decompile fix
         }
         final int[] debug8 = new int[debug5];
         for (int debug9 = 0; debug9 < debug8.length; ++debug9) {
@@ -90,25 +85,33 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         IntArrays.mergeSort(debug8, (debug1l, debug2l) -> Floats.compare(debug6[debug2l], debug6[debug1l])); // MagmaCube - decompile fix
         final BitSet debug10 = new BitSet();
         final FloatBuffer debug11 = MemoryTracker.createFloatBuffer(this.format.getIntegerSize() * 4);
-        for (int debug12 = debug10.nextClearBit(0); debug12 < debug8.length; debug12 = debug10.nextClearBit(debug12 + 1)) {
-            final int debug13 = debug8[debug12];
-            if (debug13 != debug12) {
-                this.limitToVertex(debug4, debug13);
+        // MagmaCube start - decompile fix
+        int debug10l = debug10.nextClearBit(0);
+        while (debug10l < debug8.length) {
+            int debug11l = debug8[debug10l];
+            if (debug11l != debug10l) {
+                limitToVertex(debug4, debug11l);
                 debug11.clear();
                 debug11.put(debug4);
-                for (int debug14 = debug13, debug15 = debug8[debug14]; debug14 != debug12; debug14 = debug15, debug15 = debug8[debug14]) {
-                    this.limitToVertex(debug4, debug15);
-                    final FloatBuffer debug16 = debug4.slice();
-                    this.limitToVertex(debug4, debug14);
-                    debug4.put(debug16);
-                    debug10.set(debug14);
+                int debug12 = debug11l;
+                int debug13 = debug8[debug12];
+                while (debug12 != debug10l) {
+                    limitToVertex(debug4, debug13);
+                    FloatBuffer debug14 = debug4.slice();
+                    limitToVertex(debug4, debug12);
+                    debug4.put(debug14);
+                    debug10.set(debug12);
+                    debug12 = debug13;
+                    debug13 = debug8[debug12];
                 }
-                this.limitToVertex(debug4, debug12);
+                limitToVertex(debug4, debug10l);
                 debug11.flip();
                 debug4.put(debug11);
             }
-            debug10.set(debug12);
+            debug10.set(debug10l);
+            debug10l = debug10.nextClearBit(debug10l + 1);
         }
+        // MagmaCube end - decompile fix
     }
     
     private void limitToVertex(final FloatBuffer debug1, final int debug2) {
@@ -127,22 +130,24 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
     }
     
     private static float getQuadDistanceFromPlayer(final FloatBuffer debug0, final float debug1, final float debug2, final float debug3, final int debug4, final int debug5) {
-        final float debug6 = debug0.get(debug5 + debug4 * 0 + 0);
-        final float debug7 = debug0.get(debug5 + debug4 * 0 + 1);
-        final float debug8 = debug0.get(debug5 + debug4 * 0 + 2);
-        final float debug9 = debug0.get(debug5 + debug4 * 1 + 0);
-        final float debug10 = debug0.get(debug5 + debug4 * 1 + 1);
-        final float debug11 = debug0.get(debug5 + debug4 * 1 + 2);
-        final float debug12 = debug0.get(debug5 + debug4 * 2 + 0);
-        final float debug13 = debug0.get(debug5 + debug4 * 2 + 1);
-        final float debug14 = debug0.get(debug5 + debug4 * 2 + 2);
-        final float debug15 = debug0.get(debug5 + debug4 * 3 + 0);
-        final float debug16 = debug0.get(debug5 + debug4 * 3 + 1);
-        final float debug17 = debug0.get(debug5 + debug4 * 3 + 2);
+        // MagmaCube start - decompile fix? todo: verify
+        final float debug6 = debug0.get(debug5 + debug4 * (0 + 0));
+        final float debug7 = debug0.get(debug5 + debug4 * (0 + 1));
+        final float debug8 = debug0.get(debug5 + debug4 * (0 + 2));
+        final float debug9 = debug0.get(debug5 + debug4 * (1 + 0));
+        final float debug10 = debug0.get(debug5 + debug4 * (1 + 1));
+        final float debug11 = debug0.get(debug5 + debug4 * (1 + 2));
+        final float debug12 = debug0.get(debug5 + debug4 * (2 + 0));
+        final float debug13 = debug0.get(debug5 + debug4 * (2 + 1));
+        final float debug14 = debug0.get(debug5 + debug4 * (2 + 2));
+        final float debug15 = debug0.get(debug5 + debug4 * (3 + 0));
+        final float debug16 = debug0.get(debug5 + debug4 * (3 + 1));
+        final float debug17 = debug0.get(debug5 + debug4 * (3 + 2));
         final float debug18 = (debug6 + debug9 + debug12 + debug15) * 0.25f - debug1;
         final float debug19 = (debug7 + debug10 + debug13 + debug16) * 0.25f - debug2;
         final float debug20 = (debug8 + debug11 + debug14 + debug17) * 0.25f - debug3;
         return debug18 * debug18 + debug19 * debug19 + debug20 * debug20;
+        // MagmaCube end - decompile fix?
     }
     
     public void restoreState(final State debug1) {
@@ -214,7 +219,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         if (this.elementIndex != 0) {
             throw new IllegalStateException("Not filled all elements of the vertex");
         }
-        ++this.vertices;
+        this.vertices++; // MagmaCube - decompile fix
         this.ensureVertexCapacity();
     }
     
@@ -229,7 +234,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
             this.nextElement();
         }
         if (this.defaultColorSet && this.currentElement.getUsage() == VertexFormatElement.Usage.COLOR) {
-            super.color((float) this.defaultR, this.defaultG, this.defaultB, this.defaultA); // MagmaCube - decompile fix
+            BufferVertexConsumer.super.color(this.defaultR, this.defaultG, this.defaultB, this.defaultA); // MagmaCube - decompile fix
         }
     }
     
@@ -250,10 +255,10 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
             this.putFloat(0, debug1);
             this.putFloat(4, debug2);
             this.putFloat(8, debug3);
-            this.putByte(12, (byte)(debug4 * 255.0f));
-            this.putByte(13, (byte)(debug5 * 255.0f));
-            this.putByte(14, (byte)(debug6 * 255.0f));
-            this.putByte(15, (byte)(debug7 * 255.0f));
+            this.putByte(12, (byte)(int)(debug4 * 255.0f)); // MagmaCube - decompile fix
+            this.putByte(13, (byte)(int)(debug5 * 255.0f)); // MagmaCube - decompile fix
+            this.putByte(14, (byte)(int)(debug6 * 255.0f)); // MagmaCube - decompile fix
+            this.putByte(15, (byte)(int)(debug7 * 255.0f)); // MagmaCube - decompile fix
             this.putFloat(16, debug8);
             this.putFloat(20, debug9);
             int debug15;
diff --git a/src/main/java/com/mojang/blaze3d/vertex/DefaultedVertexConsumer.java b/src/main/java/com/mojang/blaze3d/vertex/DefaultedVertexConsumer.java
index fae0a6a7281c006b498db140242e4843bfbc7173..edeb9a595c8e177c99ffee3abc9997233ff0ef09 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/DefaultedVertexConsumer.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/DefaultedVertexConsumer.java
@@ -2,19 +2,11 @@ package com.mojang.blaze3d.vertex;
 
 public abstract class DefaultedVertexConsumer implements VertexConsumer
 {
-    protected boolean defaultColorSet;
-    protected int defaultR;
-    protected int defaultG;
-    protected int defaultB;
-    protected int defaultA;
-    
-    public DefaultedVertexConsumer() {
-        this.defaultColorSet = false;
-        this.defaultR = 255;
-        this.defaultG = 255;
-        this.defaultB = 255;
-        this.defaultA = 255;
-    }
+    protected boolean defaultColorSet = false;
+    protected int defaultR = 255; // MagmaCube - decompile fix
+    protected int defaultG = 255; // MagmaCube - decompile fix
+    protected int defaultB = 255; // MagmaCube - decompile fix
+    protected int defaultA = 255; // MagmaCube - decompile fix
     
     public void defaultColor(final int debug1, final int debug2, final int debug3, final int debug4) {
         this.defaultR = debug1;
diff --git a/src/main/java/com/mojang/blaze3d/vertex/VertexConsumer.java b/src/main/java/com/mojang/blaze3d/vertex/VertexConsumer.java
index ccda4d8dfb21cd63e92e61aaa3541c15d3518388..f8022db2e8c4537013c57e572ac16ad0a27e0e30 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/VertexConsumer.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/VertexConsumer.java
@@ -30,9 +30,9 @@ public interface VertexConsumer
     
     void endVertex();
     
-    default void vertex(final float debug1, final float debug2, final float debug3, final float debug4, final float debug5, final float debug6, final float debug7, final float debug8, final float debug9, final int debug10, final int debug11, final float debug12, final float debug13, final float debug14) {
+    default void vertex(final float debug1, final float debug2, final float debug3, final float red, final float green, final float blue, final float alpha, final float debug8, final float debug9, final int debug10, final int debug11, final float debug12, final float debug13, final float debug14) { // MagmaCube - rename parameter name
         this.vertex(debug1, debug2, debug3);
-        this.color(debug4, debug5, debug6, debug7);
+        this.color(red, green, blue, alpha); // MagmaCube - rename parameter name
         this.uv(debug8, debug9);
         this.overlayCoords(debug10);
         this.uv2(debug11);
@@ -73,28 +73,28 @@ public interface VertexConsumer
                 final float debug20 = debug17.getFloat(0);
                 final float debug21 = debug17.getFloat(4);
                 final float debug22 = debug17.getFloat(8);
-                float debug26;
-                float debug27;
-                float debug28;
+                float red; // MagmaCube - rename
+                float green; // MagmaCube - rename
+                float blue; // MagmaCube - rename
                 if (debug9) {
                     final float debug23 = (debug17.get(12) & 0xFF) / 255.0f;
                     final float debug24 = (debug17.get(13) & 0xFF) / 255.0f;
                     final float debug25 = (debug17.get(14) & 0xFF) / 255.0f;
-                    debug26 = debug23 * debug3[debug19] * debug4;
-                    debug27 = debug24 * debug3[debug19] * debug5;
-                    debug28 = debug25 * debug3[debug19] * debug6;
+                    red = debug23 * debug3[debug19] * debug4; // MagmaCube - rename
+                    green = debug24 * debug3[debug19] * debug5; // MagmaCube - rename
+                    blue = debug25 * debug3[debug19] * debug6; // MagmaCube - rename
                 }
                 else {
-                    debug26 = debug3[debug19] * debug4;
-                    debug27 = debug3[debug19] * debug5;
-                    debug28 = debug3[debug19] * debug6;
+                    red = debug3[debug19] * debug4; // MagmaCube - rename
+                    green = debug3[debug19] * debug5; // MagmaCube - rename
+                    blue = debug3[debug19] * debug6; // MagmaCube - rename
                 }
                 final int debug29 = debug7[debug19];
                 final float debug24 = debug17.getFloat(16);
                 final float debug25 = debug17.getFloat(20);
                 final Vector4f debug30 = new Vector4f(debug20, debug21, debug22, 1.0f);
                 debug30.transform(debug13);
-                this.vertex(debug30.x(), debug30.y(), debug30.z(), debug26, debug27, debug28, 1.0f, debug24, debug25, debug8, debug29, debug12.x(), debug12.y(), debug12.z());
+                this.vertex(debug30.x(), debug30.y(), debug30.z(), red, green, blue, 1.0f, debug24, debug25, debug8, debug29, debug12.x(), debug12.y(), debug12.z()); // MagmaCube - rename
             }
         }
     }
diff --git a/src/main/java/net/minecraft/CrashReport.java b/src/main/java/net/minecraft/CrashReport.java
index 24afb3835c41bac938797422c5627329804c3b58..ecf3a1bceb196e3e610d6616bd19c93a54ca9c0f 100644
--- a/src/main/java/net/minecraft/CrashReport.java
+++ b/src/main/java/net/minecraft/CrashReport.java
@@ -237,7 +237,7 @@ public class CrashReport {
     }
 
     private static String getErrorComment() {
-        String[] debug0 = new String[]{"Who set us up the TNT?", "Everything's going to plan. No, really, that was supposed to happen.", "Uh... Did I do that?", "Oops.", "Why did you do that?", "I feel sad now :(", "My bad.", "I'm sorry, Dave.", "I let you down. Sorry :(", "On the bright side, I bought you a teddy bear!", "Daisy, daisy...", "Oh - I know what I did wrong!", "Hey, that tickles! Hehehe!", "I blame Dinnerbone.", "You should try our sister game, Minceraft!", "Don't be sad. I'll do better next time, I promise!", "Don't be sad, have a hug! <3", "I just don't know what went wrong :(", "Shall we play a game?", "Quite honestly, I wouldn't worry myself about that.", "I bet Cylons wouldn't have this problem.", "Sorry :(", "Surprise! Haha. Well, this is awkward.", "Would you like a cupcake?", "Hi. I'm Minecraft, and I'm a crashaholic.", "Ooh. Shiny.", "This doesn't make any sense!", "Why is it breaking :(", "Don't do that.", "Ouch. That hurt :(", "You're mean.", "This is a token for 1 free hug. Redeem at your nearest Mojangsta: [‾‾HUG‾‾]", "There are four lights!", "But it works on my machine."};
+        String[] debug0 = new String[]{"Who set us up the TNT?", "Everything's going to plan. No, really, that was supposed to happen.", "Uh... Did I do that?", "Oops.", "Why did you do that?", "I feel sad now :(", "My bad.", "I'm sorry, Dave.", "I let you down. Sorry :(", "On the bright side, I bought you a teddy bear!", "Daisy, daisy...", "Oh - I know what I did wrong!", "Hey, that tickles! Hehehe!", "I blame Dinnerbone.", "You should try our sister game, Minceraft!", "Don't be sad. I'll do better next time, I promise!", "Don't be sad, have a hug! <3", "I just don't know what went wrong :(", "Shall we play a game?", "Quite honestly, I wouldn't worry myself about that.", "I bet Cylons wouldn't have this problem.", "Sorry :(", "Surprise! Haha. Well, this is awkward.", "Would you like a cupcake?", "Hi. I'm Minecraft, and I'm a crashaholic.", "Ooh. Shiny.", "This doesn't make any sense!", "Why is it breaking :(", "Don't do that.", "Ouch. That hurt :(", "You're mean.", "This is a token for 1 free hug. Redeem at your nearest Mojangsta: [~~HUG~~]", "There are four lights!", "But it works on my machine."}; // MagmaCube - decompile fix
         try {
             return debug0[(int)(Util.getNanos() % (long)debug0.length)];
         }
diff --git a/src/main/java/net/minecraft/CrashReportCategory.java b/src/main/java/net/minecraft/CrashReportCategory.java
index 96d451e2e714e7d62874fcdba49293e03322f064..b0d0f3befd33fbc4a0e731f881c3ca51ca1feb06 100644
--- a/src/main/java/net/minecraft/CrashReportCategory.java
+++ b/src/main/java/net/minecraft/CrashReportCategory.java
@@ -163,11 +163,11 @@ public class CrashReportCategory
         public Entry(final String debug1, @Nullable final Object debug2) {
             this.key = debug1;
             if (debug2 == null) {
-                this.value = "‾‾NULL‾‾";
+                this.value = "~~NULL~~"; // MagmaCube - decompile fix
             }
             else if (debug2 instanceof Throwable) {
                 final Throwable debug3 = (Throwable)debug2;
-                this.value = "‾‾ERROR‾‾ " + debug3.getClass().getSimpleName() + ": " + debug3.getMessage();
+                this.value = "~~ERROR~~ " + debug3.getClass().getSimpleName() + ": " + debug3.getMessage(); // MagmaCube - decompile fix
             }
             else {
                 this.value = debug2.toString();
diff --git a/src/main/java/net/minecraft/SharedConstants.java b/src/main/java/net/minecraft/SharedConstants.java
index aa6306fa8e272332a0bdf35b3bd9a55b88335d81..e8b0da24138076c9aa61adb64d7c947ab5dc05dd 100644
--- a/src/main/java/net/minecraft/SharedConstants.java
+++ b/src/main/java/net/minecraft/SharedConstants.java
@@ -12,7 +12,7 @@ public class SharedConstants
     public static final ResourceLeakDetector.Level NETTY_LEAK_DETECTION;
     public static final long MAXIMUM_TICK_TIME_NANOS;
     public static boolean CHECK_DATA_FIXER_SCHEMA;
-    public static boolean IS_RUNNING_IN_IDE = true;
+    public static boolean IS_RUNNING_IN_IDE = false;
     public static final char[] ILLEGAL_FILE_CHARACTERS;
     private static GameVersion CURRENT_VERSION;
     
diff --git a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
index e0a9169b38080bcf216ff146ba9977fab1a766d6..f88b99e8ddec4dc5a1abee8b7e91752beb24aca5 100644
--- a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
@@ -210,7 +210,7 @@ extends GuiComponent {
             this.clearChunkCache();
         }
         LongSet debug122 = (debug11 = this.getLevel()) instanceof ServerLevel ? ((ServerLevel)debug11).getForcedChunks() : LongSets.EMPTY_SET; // MagmaCube - decompile fix
-        ArrayList debug13 = Lists.newArrayList((Object[])new String[]{"Minecraft " + SharedConstants.getCurrentVersion().getName() + " (" + this.minecraft.getLaunchedVersion() + "/" + ClientBrandRetriever.getClientModName() + ("release".equalsIgnoreCase(this.minecraft.getVersionType()) ? "" : "/" + this.minecraft.getVersionType()) + ")", this.minecraft.fpsString, debug12, this.minecraft.levelRenderer.getChunkStatistics(), this.minecraft.levelRenderer.getEntityStatistics(), "P: " + this.minecraft.particleEngine.countParticles() + ". T: " + this.minecraft.level.getEntityCount(), this.minecraft.level.gatherChunkSourceStats()});
+        ArrayList<String> debug13 = Lists.newArrayList(new String[]{"Minecraft " + SharedConstants.getCurrentVersion().getName() + " (" + this.minecraft.getLaunchedVersion() + "/" + ClientBrandRetriever.getClientModName() + ("release".equalsIgnoreCase(this.minecraft.getVersionType()) ? "" : "/" + this.minecraft.getVersionType()) + ")", this.minecraft.fpsString, debug12, this.minecraft.levelRenderer.getChunkStatistics(), this.minecraft.levelRenderer.getEntityStatistics(), "P: " + this.minecraft.particleEngine.countParticles() + ". T: " + this.minecraft.level.getEntityCount(), this.minecraft.level.gatherChunkSourceStats()}); // MagmaCube - decompile fix
         String debug14 = this.getServerChunkStats();
         if (debug14 != null) {
             debug13.add(debug14);
@@ -259,6 +259,7 @@ extends GuiComponent {
                     debug13.add(((StringBuilder)debug20).toString());
                     if (debug6.getY() >= 0 && debug6.getY() < 256) {
                         debug13.add("Biome: " + this.minecraft.level.registryAccess().registryOrThrow(Registry.BIOME_REGISTRY).getKey(this.minecraft.level.getBiome(debug6)));
+                        debug13.add("Biome in registry: " + this.minecraft.level.registryAccess().registryOrThrow(Registry.BIOME_REGISTRY).getResourceKey(this.minecraft.level.getBiome(debug6)).orElse(null)); // MagmaCube - debug
                         long debug21 = 0L;
                         float debug23 = 0.0f;
                         if (debug19 != null) {
@@ -290,6 +291,16 @@ extends GuiComponent {
             debug13.add("Shader: " + debug16.getName());
         }
         debug13.add(this.minecraft.getSoundManager().getDebugString() + String.format(" (Mood %d%%)", Math.round(this.minecraft.player.getCurrentMood() * 100.0f)));
+        // MagmaCube start - add debug information
+        debug13.add("");
+        debug13.add("Game Renderer: " + this.minecraft.gameRenderer.getClass().getSimpleName());
+        debug13.add("Level Renderer: " + this.minecraft.levelRenderer.getClass().getSimpleName());
+        debug13.add("Block Renderer: " + this.minecraft.getBlockRenderer().getClass().getSimpleName());
+        debug13.add("Chunk Render Dispatcher: " + this.minecraft.levelRenderer.chunkRenderDispatcher.getClass().getSimpleName());
+        debug13.add("Current Screen: " + (this.minecraft.screen == null ? ChatFormatting.YELLOW + "null" : this.minecraft.screen.getClass().getSimpleName()));
+        debug13.add("Current GUI: " + this.minecraft.gui.getClass().getSimpleName());
+        debug13.add("Current Overlay: " + (this.minecraft.overlay == null ? ChatFormatting.YELLOW + "null" : this.minecraft.overlay.getClass().getSimpleName()));
+        // MagmaCube end - add debug information
         return debug13;
     }
 
@@ -341,7 +352,7 @@ extends GuiComponent {
         long debug3 = Runtime.getRuntime().totalMemory();
         long debug5 = Runtime.getRuntime().freeMemory();
         long debug7 = debug3 - debug5;
-        ArrayList debug9 = Lists.newArrayList((Object[])new String[]{String.format("Java: %s %dbit", System.getProperty("java.version"), this.minecraft.is64Bit() ? 64 : 32), String.format("Mem: % 2d%% %03d/%03dMB", debug7 * 100L / debug1, DebugScreenOverlay.bytesToMegabytes(debug7), DebugScreenOverlay.bytesToMegabytes(debug1)), String.format("Allocated: % 2d%% %03dMB", debug3 * 100L / debug1, DebugScreenOverlay.bytesToMegabytes(debug3)), "", String.format("CPU: %s", GlUtil.getCpuInfo()), "", String.format("Display: %dx%d (%s)", Minecraft.getInstance().getWindow().getWidth(), Minecraft.getInstance().getWindow().getHeight(), GlUtil.getVendor()), GlUtil.getRenderer(), GlUtil.getOpenGLVersion()});
+        ArrayList<String> debug9 = Lists.newArrayList(new String[]{String.format("Java: %s %dbit", System.getProperty("java.version"), this.minecraft.is64Bit() ? 64 : 32), String.format("Mem: % 2d%% %03d/%03dMB", debug7 * 100L / debug1, DebugScreenOverlay.bytesToMegabytes(debug7), DebugScreenOverlay.bytesToMegabytes(debug1)), String.format("Allocated: % 2d%% %03dMB", debug3 * 100L / debug1, DebugScreenOverlay.bytesToMegabytes(debug3)), "", String.format("CPU: %s", GlUtil.getCpuInfo()), "", String.format("Display: %dx%d (%s)", Minecraft.getInstance().getWindow().getWidth(), Minecraft.getInstance().getWindow().getHeight(), GlUtil.getVendor()), GlUtil.getRenderer(), GlUtil.getOpenGLVersion()}); // MagmaCube - decompile fix
         if (this.minecraft.showOnlyReducedInfo()) {
             return debug9;
         }
@@ -357,6 +368,12 @@ extends GuiComponent {
             for (ResourceLocation resourceLocation : this.minecraft.getConnection().getTags().getBlocks().getMatchingTags(((BlockBehaviour.BlockStateBase)debug11).getBlock())) {
                 debug9.add("#" + resourceLocation);
             }
+            debug9.add("");
+            int debug19 = this.minecraft.getBlockColors().getColor(debug11, this.minecraft.player.clientLevel, debug10, 1);
+            float r = (debug19 >> 16 & 0xFF);// / 255.0f; // MagmaCube - decompile fix
+            float g = (debug19 >> 8 & 0xFF);// / 255.0f; // MagmaCube - decompile fix
+            float b = (debug19 & 0xFF);// / 255.0f; // MagmaCube - decompile fix
+            debug9.add("Block RGB: " + r + ", " + g + ", " + b + " (Raw Color: " + debug19 + ")");
         }
         if (this.liquid.getType() == HitResult.Type.BLOCK) {
             BlockPos debug10 = ((BlockHitResult)this.liquid).getBlockPos(); // MagmaCube - decompile fix
@@ -377,6 +394,11 @@ extends GuiComponent {
             debug9.add((Object)((Object)ChatFormatting.UNDERLINE) + "Targeted Entity");
             debug9.add(String.valueOf(Registry.ENTITY_TYPE.getKey(((Entity)debug10).getType())));
         }
+        // MagmaCube start - add debug information
+        debug9.add("");
+        debug9.add("Game Directory: " + this.minecraft.gameDirectory);
+        debug9.add("Resource Packs: " + this.minecraft.getResourcePackRepository().getSelectedIds());
+        // MagmaCube end - add debug information
         return debug9;
     }
 
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index 20ae10bd49760e46d18dbc23044674cc0530e05f..8b8fa52b5aa6b1aa9c2bb154159c689f55b220ed 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -98,6 +98,7 @@ import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.data.BuiltinRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.Connection;
 import net.minecraft.network.FriendlyByteBuf;
@@ -680,7 +681,7 @@ implements ClientGamePacketListener {
         PacketUtils.ensureRunningOnSameThread(debug1, this, this.minecraft);
         int debug2 = debug1.getX();
         int debug3 = debug1.getZ();
-        ChunkBiomeContainer debug4 = debug1.getBiomes() == null ? null : new ChunkBiomeContainer(this.registryAccess.registryOrThrow(Registry.BIOME_REGISTRY), debug1.getBiomes());
+        ChunkBiomeContainer debug4 = debug1.getBiomes() == null ? null : new ChunkBiomeContainer(BuiltinRegistries.BIOME, debug1.getBiomes()); // MagmaCube
         LevelChunk debug5 = this.level.getChunkSource().replaceWithPacketData(debug2, debug3, debug4, debug1.getReadBuffer(), debug1.getHeightmaps(), debug1.getAvailableSections(), debug1.isFullChunk());
         if (debug5 != null && debug1.isFullChunk()) {
             this.level.reAddEntitiesToChunk(debug5);
diff --git a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
index 5aafd98ded237bcdab5b3e5063cefc59076dbd7a..4f17dded99e7f0a83957e1fc6a98e31f34159a43 100644
--- a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
@@ -213,7 +213,7 @@ AutoCloseable {
     private int prevCloudZ = Integer.MIN_VALUE;
     private Vec3 prevCloudColor = Vec3.ZERO;
     private CloudStatus prevCloudsType;
-    private ChunkRenderDispatcher chunkRenderDispatcher;
+    public ChunkRenderDispatcher chunkRenderDispatcher; // MagmaCube - todo: visible for testing
     private final VertexFormat format = DefaultVertexFormat.BLOCK;
     private int lastViewDistance = -1;
     private int renderedEntities;
diff --git a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
index 42f68f116298a3dcf2857f6288d57daa2f3408c7..2beebbcb30266a9e527f94ed312fec835587e1ff 100644
--- a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
@@ -69,201 +69,191 @@ public class LiquidBlockRenderer {
     }
 
     public boolean tesselate(BlockAndTintGetter debug1, BlockPos debug2, VertexConsumer debug3, FluidState debug4) {
-        float debug52;
-        float debug51;
-        float debug60;
-        float debug42;
-        float debug38;
-        float debug41;
-        float debug37;
-        float debug40;
-        float debug36;
-        float debug35;
-        float debug34;
+        // MagmaCube start - rewrite code
         boolean debug5 = debug4.is(FluidTags.LAVA);
         TextureAtlasSprite[] debug6 = debug5 ? this.lavaIcons : this.waterIcons;
         BlockState debug7 = debug1.getBlockState(debug2);
-        int debug8 = debug5 ? 0xFFFFFF : BiomeColors.getAverageWaterColor(debug1, debug2);
-        float debug9 = (float)(debug8 >> 16 & 0xFF) / 255.0f;
-        float debug10 = (float)(debug8 >> 8 & 0xFF) / 255.0f;
-        float debug11 = (float)(debug8 & 0xFF) / 255.0f;
-        boolean debug12 = !LiquidBlockRenderer.isNeighborSameFluid(debug1, debug2, Direction.UP, debug4);
-        boolean debug13 = LiquidBlockRenderer.shouldRenderFace(debug1, debug2, debug4, debug7, Direction.DOWN) && !LiquidBlockRenderer.isFaceOccludedByNeighbor(debug1, debug2, Direction.DOWN, 0.8888889f);
-        boolean debug14 = LiquidBlockRenderer.shouldRenderFace(debug1, debug2, debug4, debug7, Direction.NORTH);
-        boolean debug15 = LiquidBlockRenderer.shouldRenderFace(debug1, debug2, debug4, debug7, Direction.SOUTH);
-        boolean debug16 = LiquidBlockRenderer.shouldRenderFace(debug1, debug2, debug4, debug7, Direction.WEST);
-        boolean debug17 = LiquidBlockRenderer.shouldRenderFace(debug1, debug2, debug4, debug7, Direction.EAST);
-        if (!(debug12 || debug13 || debug17 || debug16 || debug14 || debug15)) {
+        int debug8 = debug5 ? 16777215 : BiomeColors.getAverageWaterColor(debug1, debug2);
+        float debug9 = (debug8 >> 16 & 0xFF) / 255.0F;
+        float debug10 = (debug8 >> 8 & 0xFF) / 255.0F;
+        float debug11 = (debug8 & 0xFF) / 255.0F;
+        boolean debug12 = !isNeighborSameFluid((BlockGetter)debug1, debug2, Direction.UP, debug4);
+        boolean debug13 = (shouldRenderFace(debug1, debug2, debug4, debug7, Direction.DOWN) && !isFaceOccludedByNeighbor((BlockGetter)debug1, debug2, Direction.DOWN, 0.8888889F));
+        boolean debug14 = shouldRenderFace(debug1, debug2, debug4, debug7, Direction.NORTH);
+        boolean debug15 = shouldRenderFace(debug1, debug2, debug4, debug7, Direction.SOUTH);
+        boolean debug16 = shouldRenderFace(debug1, debug2, debug4, debug7, Direction.WEST);
+        boolean debug17 = shouldRenderFace(debug1, debug2, debug4, debug7, Direction.EAST);
+        if (!debug12 && !debug13 && !debug17 && !debug16 && !debug14 && !debug15)
             return false;
-        }
         boolean debug18 = false;
         float debug19 = debug1.getShade(Direction.DOWN, true);
         float debug20 = debug1.getShade(Direction.UP, true);
         float debug21 = debug1.getShade(Direction.NORTH, true);
         float debug22 = debug1.getShade(Direction.WEST, true);
-        float debug23 = this.getWaterHeight(debug1, debug2, debug4.getType());
-        float debug24 = this.getWaterHeight(debug1, debug2.south(), debug4.getType());
-        float debug25 = this.getWaterHeight(debug1, debug2.east().south(), debug4.getType());
-        float debug26 = this.getWaterHeight(debug1, debug2.east(), debug4.getType());
-        double debug27 = debug2.getX() & 0xF;
-        double debug29 = debug2.getY() & 0xF;
-        double debug31 = debug2.getZ() & 0xF;
-        float debug33 = 0.001f;
-        float f = debug34 = debug13 ? 0.001f : 0.0f;
-        if (debug12 && !LiquidBlockRenderer.isFaceOccludedByNeighbor(debug1, debug2, Direction.UP, Math.min(Math.min(debug23, debug24), Math.min(debug25, debug26)))) {
-            float debug48;
-            float debug47;
-            float debug46;
-            float debug45;
-            float debug39;
-            TextureAtlasSprite debug44;
+        float debug23 = getWaterHeight((BlockGetter)debug1, debug2, debug4.getType());
+        float debug24 = getWaterHeight((BlockGetter)debug1, debug2.south(), debug4.getType());
+        float debug25 = getWaterHeight((BlockGetter)debug1, debug2.east().south(), debug4.getType());
+        float debug26 = getWaterHeight((BlockGetter)debug1, debug2.east(), debug4.getType());
+        double debug27 = (debug2.getX() & 0xF);
+        double debug29 = (debug2.getY() & 0xF);
+        double debug31 = (debug2.getZ() & 0xF);
+        float debug33 = 0.001F;
+        float debug34 = debug13 ? 0.001F : 0.0F;
+        if (debug12 && !isFaceOccludedByNeighbor((BlockGetter)debug1, debug2, Direction.UP, Math.min(Math.min(debug23, debug24), Math.min(debug25, debug26)))) {
             debug18 = true;
-            debug23 -= 0.001f;
-            debug24 -= 0.001f;
-            debug25 -= 0.001f;
-            debug26 -= 0.001f;
-            Vec3 debug43 = debug4.getFlow(debug1, debug2);
-            if (debug43.x == 0.0 && debug43.z == 0.0) {
-                debug44 = debug6[0];
-                debug35 = debug44.getU(0.0);
-                debug39 = debug44.getV(0.0);
-                debug36 = debug35;
-                debug40 = debug44.getV(16.0);
-                debug37 = debug44.getU(16.0);
+            debug23 -= 0.001F;
+            debug24 -= 0.001F;
+            debug25 -= 0.001F;
+            debug26 -= 0.001F;
+            Vec3 debug43 = debug4.getFlow((BlockGetter)debug1, debug2);
+            float debug36, debug37, debug38, debug39, debug40, debug41, debug42, f1;
+            if (debug43.x == 0.0D && debug43.z == 0.0D) {
+                TextureAtlasSprite textureAtlasSprite = debug6[0];
+                f1 = textureAtlasSprite.getU(0.0D);
+                debug39 = textureAtlasSprite.getV(0.0D);
+                debug36 = f1;
+                debug40 = textureAtlasSprite.getV(16.0D);
+                debug37 = textureAtlasSprite.getU(16.0D);
                 debug41 = debug40;
                 debug38 = debug37;
                 debug42 = debug39;
             } else {
-                debug44 = debug6[1];
-                debug45 = (float)Mth.atan2(debug43.z, debug43.x) - 1.5707964f;
-                debug46 = Mth.sin(debug45) * 0.25f;
-                debug47 = Mth.cos(debug45) * 0.25f;
-                debug48 = 8.0f;
-                debug35 = debug44.getU(8.0f + (-debug47 - debug46) * 16.0f);
-                debug39 = debug44.getV(8.0f + (-debug47 + debug46) * 16.0f);
-                debug36 = debug44.getU(8.0f + (-debug47 + debug46) * 16.0f);
-                debug40 = debug44.getV(8.0f + (debug47 + debug46) * 16.0f);
-                debug37 = debug44.getU(8.0f + (debug47 + debug46) * 16.0f);
-                debug41 = debug44.getV(8.0f + (debug47 - debug46) * 16.0f);
-                debug38 = debug44.getU(8.0f + (debug47 - debug46) * 16.0f);
-                debug42 = debug44.getV(8.0f + (-debug47 - debug46) * 16.0f);
+                TextureAtlasSprite textureAtlasSprite = debug6[1];
+                float f2 = (float)Mth.atan2(debug43.z, debug43.x) - 1.5707964F;
+                float f3 = Mth.sin(f2) * 0.25F;
+                float f4 = Mth.cos(f2) * 0.25F;
+                float f5 = 8.0F;
+                f1 = textureAtlasSprite.getU((8.0F + (-f4 - f3) * 16.0F));
+                debug39 = textureAtlasSprite.getV((8.0F + (-f4 + f3) * 16.0F));
+                debug36 = textureAtlasSprite.getU((8.0F + (-f4 + f3) * 16.0F));
+                debug40 = textureAtlasSprite.getV((8.0F + (f4 + f3) * 16.0F));
+                debug37 = textureAtlasSprite.getU((8.0F + (f4 + f3) * 16.0F));
+                debug41 = textureAtlasSprite.getV((8.0F + (f4 - f3) * 16.0F));
+                debug38 = textureAtlasSprite.getU((8.0F + (f4 - f3) * 16.0F));
+                debug42 = textureAtlasSprite.getV((8.0F + (-f4 - f3) * 16.0F));
             }
-            float debug442 = (debug35 + debug36 + debug37 + debug38) / 4.0f;
-            debug45 = (debug39 + debug40 + debug41 + debug42) / 4.0f;
-            debug46 = (float)debug6[0].getWidth() / (debug6[0].getU1() - debug6[0].getU0());
-            debug47 = (float)debug6[0].getHeight() / (debug6[0].getV1() - debug6[0].getV0());
-            debug48 = 4.0f / Math.max(debug47, debug46);
-            debug35 = Mth.lerp(debug48, debug35, debug442);
-            debug36 = Mth.lerp(debug48, debug36, debug442);
-            debug37 = Mth.lerp(debug48, debug37, debug442);
-            debug38 = Mth.lerp(debug48, debug38, debug442);
-            debug39 = Mth.lerp(debug48, debug39, debug45);
-            debug40 = Mth.lerp(debug48, debug40, debug45);
-            debug41 = Mth.lerp(debug48, debug41, debug45);
-            debug42 = Mth.lerp(debug48, debug42, debug45);
-            int debug49 = this.getLightColor(debug1, debug2);
-            debug60 = debug20 * debug9;
-            debug51 = debug20 * debug10;
-            debug52 = debug20 * debug11;
-            this.vertex(debug3, debug27 + 0.0, debug29 + (double)debug23, debug31 + 0.0, debug60, debug51, debug52, debug35, debug39, debug49);
-            this.vertex(debug3, debug27 + 0.0, debug29 + (double)debug24, debug31 + 1.0, debug60, debug51, debug52, debug36, debug40, debug49);
-            this.vertex(debug3, debug27 + 1.0, debug29 + (double)debug25, debug31 + 1.0, debug60, debug51, debug52, debug37, debug41, debug49);
-            this.vertex(debug3, debug27 + 1.0, debug29 + (double)debug26, debug31 + 0.0, debug60, debug51, debug52, debug38, debug42, debug49);
-            if (debug4.shouldRenderBackwardUpFace(debug1, debug2.above())) {
-                this.vertex(debug3, debug27 + 0.0, debug29 + (double)debug23, debug31 + 0.0, debug60, debug51, debug52, debug35, debug39, debug49);
-                this.vertex(debug3, debug27 + 1.0, debug29 + (double)debug26, debug31 + 0.0, debug60, debug51, debug52, debug38, debug42, debug49);
-                this.vertex(debug3, debug27 + 1.0, debug29 + (double)debug25, debug31 + 1.0, debug60, debug51, debug52, debug37, debug41, debug49);
-                this.vertex(debug3, debug27 + 0.0, debug29 + (double)debug24, debug31 + 1.0, debug60, debug51, debug52, debug36, debug40, debug49);
+            float debug44 = (f1 + debug36 + debug37 + debug38) / 4.0F;
+            float debug45 = (debug39 + debug40 + debug41 + debug42) / 4.0F;
+            float debug46 = debug6[0].getWidth() / (debug6[0].getU1() - debug6[0].getU0());
+            float debug47 = debug6[0].getHeight() / (debug6[0].getV1() - debug6[0].getV0());
+            float debug48 = 4.0F / Math.max(debug47, debug46);
+            float f1l = Mth.lerp(debug48, f1, debug44);
+            float debug36l = Mth.lerp(debug48, debug36, debug44);
+            float debug37l = Mth.lerp(debug48, debug37, debug44);
+            float debug38l = Mth.lerp(debug48, debug38, debug44);
+            float debug39l = Mth.lerp(debug48, debug39, debug45);
+            float debug40l = Mth.lerp(debug48, debug40, debug45);
+            float debug41l = Mth.lerp(debug48, debug41, debug45);
+            float debug42l = Mth.lerp(debug48, debug42, debug45);
+            int debug49 = getLightColor(debug1, debug2);
+            float debug50 = debug20 * debug9;
+            float debug51 = debug20 * debug10;
+            float debug52 = debug20 * debug11;
+            vertex(debug3, debug27 + 0.0D, debug29 + debug23, debug31 + 0.0D, debug50, debug51, debug52, f1l, debug39l, debug49);
+            vertex(debug3, debug27 + 0.0D, debug29 + debug24, debug31 + 1.0D, debug50, debug51, debug52, debug36l, debug40l, debug49);
+            vertex(debug3, debug27 + 1.0D, debug29 + debug25, debug31 + 1.0D, debug50, debug51, debug52, debug37l, debug41l, debug49);
+            vertex(debug3, debug27 + 1.0D, debug29 + debug26, debug31 + 0.0D, debug50, debug51, debug52, debug38l, debug42l, debug49);
+            if (debug4.shouldRenderBackwardUpFace((BlockGetter)debug1, debug2.above())) {
+                vertex(debug3, debug27 + 0.0D, debug29 + debug23, debug31 + 0.0D, debug50, debug51, debug52, f1l, debug39l, debug49);
+                vertex(debug3, debug27 + 1.0D, debug29 + debug26, debug31 + 0.0D, debug50, debug51, debug52, debug38l, debug42l, debug49);
+                vertex(debug3, debug27 + 1.0D, debug29 + debug25, debug31 + 1.0D, debug50, debug51, debug52, debug37l, debug41l, debug49);
+                vertex(debug3, debug27 + 0.0D, debug29 + debug24, debug31 + 1.0D, debug50, debug51, debug52, debug36l, debug40l, debug49);
             }
         }
         if (debug13) {
-            debug35 = debug6[0].getU0();
-            debug36 = debug6[0].getU1();
-            debug37 = debug6[0].getV0();
-            debug38 = debug6[0].getV1();
-            int debug39 = this.getLightColor(debug1, debug2.below());
-            debug40 = debug19 * debug9;
-            debug41 = debug19 * debug10;
-            debug42 = debug19 * debug11;
-            this.vertex(debug3, debug27, debug29 + (double)debug34, debug31 + 1.0, debug40, debug41, debug42, debug35, debug38, debug39);
-            this.vertex(debug3, debug27, debug29 + (double)debug34, debug31, debug40, debug41, debug42, debug35, debug37, debug39);
-            this.vertex(debug3, debug27 + 1.0, debug29 + (double)debug34, debug31, debug40, debug41, debug42, debug36, debug37, debug39);
-            this.vertex(debug3, debug27 + 1.0, debug29 + (double)debug34, debug31 + 1.0, debug40, debug41, debug42, debug36, debug38, debug39);
+            float f1 = debug6[0].getU0();
+            float debug36 = debug6[0].getU1();
+            float debug37 = debug6[0].getV0();
+            float debug38 = debug6[0].getV1();
+            int debug39 = getLightColor(debug1, debug2.below());
+            float debug40 = debug19 * debug9;
+            float debug41 = debug19 * debug10;
+            float debug42 = debug19 * debug11;
+            vertex(debug3, debug27, debug29 + debug34, debug31 + 1.0D, debug40, debug41, debug42, f1, debug38, debug39);
+            vertex(debug3, debug27, debug29 + debug34, debug31, debug40, debug41, debug42, f1, debug37, debug39);
+            vertex(debug3, debug27 + 1.0D, debug29 + debug34, debug31, debug40, debug41, debug42, debug36, debug37, debug39);
+            vertex(debug3, debug27 + 1.0D, debug29 + debug34, debug31 + 1.0D, debug40, debug41, debug42, debug36, debug38, debug39);
             debug18 = true;
         }
-        for (int debug352 = 0; debug352 < 4; ++debug352) {
-            Block debug50;
-            boolean debug47;
-            Direction debug46;
+        for (int debug35 = 0; debug35 < 4; debug35++) {
+            float debug36;
+            float debug37;
+            double debug38;
+            double debug40;
+            double debug42;
             double debug44;
-            double debug402;
-            double debug422;
-            double debug382;
-            if (debug352 == 0) {
+            Direction debug46;
+            boolean debug47;
+            if (debug35 == 0) {
                 debug36 = debug23;
                 debug37 = debug26;
-                debug382 = debug27;
-                debug422 = debug27 + 1.0;
-                debug402 = debug31 + (double)0.001f;
-                debug44 = debug31 + (double)0.001f;
+                debug38 = debug27;
+                debug42 = debug27 + 1.0D;
+                debug40 = debug31 + 0.0010000000474974513D;
+                debug44 = debug31 + 0.0010000000474974513D;
                 debug46 = Direction.NORTH;
                 debug47 = debug14;
-            } else if (debug352 == 1) {
+            } else if (debug35 == 1) {
                 debug36 = debug25;
                 debug37 = debug24;
-                debug382 = debug27 + 1.0;
-                debug422 = debug27;
-                debug402 = debug31 + 1.0 - (double)0.001f;
-                debug44 = debug31 + 1.0 - (double)0.001f;
+                debug38 = debug27 + 1.0D;
+                debug42 = debug27;
+                debug40 = debug31 + 1.0D - 0.0010000000474974513D;
+                debug44 = debug31 + 1.0D - 0.0010000000474974513D;
                 debug46 = Direction.SOUTH;
                 debug47 = debug15;
-            } else if (debug352 == 2) {
+            } else if (debug35 == 2) {
                 debug36 = debug24;
                 debug37 = debug23;
-                debug382 = debug27 + (double)0.001f;
-                debug422 = debug27 + (double)0.001f;
-                debug402 = debug31 + 1.0;
+                debug38 = debug27 + 0.0010000000474974513D;
+                debug42 = debug27 + 0.0010000000474974513D;
+                debug40 = debug31 + 1.0D;
                 debug44 = debug31;
                 debug46 = Direction.WEST;
                 debug47 = debug16;
             } else {
                 debug36 = debug26;
                 debug37 = debug25;
-                debug382 = debug27 + 1.0 - (double)0.001f;
-                debug422 = debug27 + 1.0 - (double)0.001f;
-                debug402 = debug31;
-                debug44 = debug31 + 1.0;
+                debug38 = debug27 + 1.0D - 0.0010000000474974513D;
+                debug42 = debug27 + 1.0D - 0.0010000000474974513D;
+                debug40 = debug31;
+                debug44 = debug31 + 1.0D;
                 debug46 = Direction.EAST;
                 debug47 = debug17;
             }
-            if (!debug47 || LiquidBlockRenderer.isFaceOccludedByNeighbor(debug1, debug2, debug46, Math.max(debug36, debug37))) continue;
-            debug18 = true;
-            BlockPos debug48 = debug2.relative(debug46);
-            TextureAtlasSprite debug49 = debug6[1];
-            if (!debug5 && ((debug50 = debug1.getBlockState(debug48).getBlock()) instanceof HalfTransparentBlock || debug50 instanceof LeavesBlock)) {
-                debug49 = this.waterOverlay;
+            if (debug47 && !isFaceOccludedByNeighbor((BlockGetter)debug1, debug2, debug46, Math.max(debug36, debug37))) {
+                debug18 = true;
+                BlockPos debug48 = debug2.relative(debug46);
+                TextureAtlasSprite debug49 = debug6[1];
+                if (!debug5) {
+                    Block block = debug1.getBlockState(debug48).getBlock();
+                    if (block instanceof net.minecraft.world.level.block.HalfTransparentBlock || block instanceof net.minecraft.world.level.block.LeavesBlock)
+                        debug49 = this.waterOverlay;
+                }
+                float debug50 = debug49.getU(0.0D);
+                float debug51 = debug49.getU(8.0D);
+                float debug52 = debug49.getV(((1.0F - debug36) * 16.0F * 0.5F));
+                float debug53 = debug49.getV(((1.0F - debug37) * 16.0F * 0.5F));
+                float debug54 = debug49.getV(8.0D);
+                int debug55 = getLightColor(debug1, debug48);
+                float debug56 = (debug35 < 2) ? debug21 : debug22;
+                float debug57 = debug20 * debug56 * debug9;
+                float debug58 = debug20 * debug56 * debug10;
+                float debug59 = debug20 * debug56 * debug11;
+                vertex(debug3, debug38, debug29 + debug36, debug40, debug57, debug58, debug59, debug50, debug52, debug55);
+                vertex(debug3, debug42, debug29 + debug37, debug44, debug57, debug58, debug59, debug51, debug53, debug55);
+                vertex(debug3, debug42, debug29 + debug34, debug44, debug57, debug58, debug59, debug51, debug54, debug55);
+                vertex(debug3, debug38, debug29 + debug34, debug40, debug57, debug58, debug59, debug50, debug54, debug55);
+                if (debug49 != this.waterOverlay) {
+                    vertex(debug3, debug38, debug29 + debug34, debug40, debug57, debug58, debug59, debug50, debug54, debug55);
+                    vertex(debug3, debug42, debug29 + debug34, debug44, debug57, debug58, debug59, debug51, debug54, debug55);
+                    vertex(debug3, debug42, debug29 + debug37, debug44, debug57, debug58, debug59, debug51, debug53, debug55);
+                    vertex(debug3, debug38, debug29 + debug36, debug40, debug57, debug58, debug59, debug50, debug52, debug55);
+                }
             }
-            debug60 = debug49.getU(0.0);
-            debug51 = debug49.getU(8.0);
-            debug52 = debug49.getV((1.0f - debug36) * 16.0f * 0.5f);
-            float debug53 = debug49.getV((1.0f - debug37) * 16.0f * 0.5f);
-            float debug54 = debug49.getV(8.0);
-            int debug55 = this.getLightColor(debug1, debug48);
-            float debug56 = debug352 < 2 ? debug21 : debug22;
-            float debug57 = debug20 * debug56 * debug9;
-            float debug58 = debug20 * debug56 * debug10;
-            float debug59 = debug20 * debug56 * debug11;
-            this.vertex(debug3, debug382, debug29 + (double)debug36, debug402, debug57, debug58, debug59, debug60, debug52, debug55);
-            this.vertex(debug3, debug422, debug29 + (double)debug37, debug44, debug57, debug58, debug59, debug51, debug53, debug55);
-            this.vertex(debug3, debug422, debug29 + (double)debug34, debug44, debug57, debug58, debug59, debug51, debug54, debug55);
-            this.vertex(debug3, debug382, debug29 + (double)debug34, debug402, debug57, debug58, debug59, debug60, debug54, debug55);
-            if (debug49 == this.waterOverlay) continue;
-            this.vertex(debug3, debug382, debug29 + (double)debug34, debug402, debug57, debug58, debug59, debug60, debug54, debug55);
-            this.vertex(debug3, debug422, debug29 + (double)debug34, debug44, debug57, debug58, debug59, debug51, debug54, debug55);
-            this.vertex(debug3, debug422, debug29 + (double)debug37, debug44, debug57, debug58, debug59, debug51, debug53, debug55);
-            this.vertex(debug3, debug382, debug29 + (double)debug36, debug402, debug57, debug58, debug59, debug60, debug52, debug55);
         }
         return debug18;
+        // MagmaCube end - rewrite code
     }
 
     private void vertex(VertexConsumer debug1, double debug2, double debug4, double debug6, float debug8, float debug9, float debug10, float debug11, float debug12, int debug13) {
diff --git a/src/main/java/net/minecraft/client/renderer/block/ModelBlockRenderer.java b/src/main/java/net/minecraft/client/renderer/block/ModelBlockRenderer.java
index e4c3e820e54c464713e62b2dd39642aa7a7dfec8..60b5418b4e63210a1ec7e798e5d549f3a36ed923 100644
--- a/src/main/java/net/minecraft/client/renderer/block/ModelBlockRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/block/ModelBlockRenderer.java
@@ -68,9 +68,10 @@ public class ModelBlockRenderer {
         for (Direction debug19 : Direction.values()) {
             debug8.setSeed(debug9);
             List<BakedQuad> debug20 = debug2.getQuads(debug3, debug19, debug8);
-            if (debug20.isEmpty() || debug7 && !Block.shouldRenderFace(debug3, debug1, debug4, debug19)) continue;
-            this.renderModelFaceAO(debug1, debug3, debug4, debug5, debug6, debug20, debug13, debug14, debug15, debug11);
-            debug12 = true;
+            if (!debug7 || Block.shouldRenderFace(debug3, debug1, debug4, debug19)) { // MagmaCube - decompile fix
+                renderModelFaceAO(debug1, debug3, debug4, debug5, debug6, debug20, debug13, debug14, debug15, debug11); // MagmaCube - decompile fix
+                debug12 = true; // MagmaCube - decompile fix
+            } // MagmaCube - decompile fix
         }
         debug8.setSeed(debug9);
         List<BakedQuad> debug16 = debug2.getQuads(debug3, null, debug8);
@@ -115,9 +116,9 @@ public class ModelBlockRenderer {
         float debug16;
         if (debug6.isTinted()) {
             int debug19 = this.blockColors.getColor(debug2, debug1, debug3, debug6.getTintIndex());
-            debug16 = (float)(debug19 >> 16 & 0xFF) / 255.0f;
-            debug17 = (float)(debug19 >> 8 & 0xFF) / 255.0f;
-            debug18 = (float)(debug19 & 0xFF) / 255.0f;
+            debug16 = (debug19 >> 16 & 0xFF) / 255.0f; // MagmaCube - decompile fix
+            debug17 = (debug19 >> 8 & 0xFF) / 255.0f; // MagmaCube - decompile fix
+            debug18 = (debug19 & 0xFF) / 255.0f; // MagmaCube - decompile fix
         } else {
             debug16 = 1.0f;
             debug17 = 1.0f;
@@ -312,145 +313,131 @@ public class ModelBlockRenderer {
         private final int[] lightmap = new int[4];
 
         public void calculate(BlockAndTintGetter debug1, BlockState debug2, BlockPos debug3, Direction debug4, float[] debug5, BitSet debug6, boolean debug7) {
-            float debug43;
-            float debug42;
-            float debug41;
-            float debug40;
-            int debug35;
-            float debug31;
-            int debug34;
-            float debug30;
-            int debug33;
-            float debug29;
-            int debug32;
-            float debug28;
-            BlockState debug36;
-            boolean debug27;
+            // MagmaCube start - rewrite code
+            float debug28, debug29, debug30, debug31;
+            int debug32, debug33, debug34, debug35;
             BlockPos debug8 = debug6.get(0) ? debug3.relative(debug4) : debug3;
-            AdjacencyInfo debug9 = AdjacencyInfo.fromFacing(debug4);
+            ModelBlockRenderer.AdjacencyInfo debug9 = ModelBlockRenderer.AdjacencyInfo.fromFacing(debug4);
             BlockPos.MutableBlockPos debug10 = new BlockPos.MutableBlockPos();
-            Cache debug11 = (Cache)CACHE.get();
+            ModelBlockRenderer.Cache debug11 = ModelBlockRenderer.CACHE.get();
             debug10.setWithOffset(debug8, debug9.corners[0]);
-            BlockState debug12 = debug1.getBlockState(debug10);
-            int debug13 = debug11.getLightColor(debug12, debug1, debug10);
-            float debug14 = debug11.getShadeBrightness(debug12, debug1, debug10);
+            BlockState debug12 = debug1.getBlockState((BlockPos)debug10);
+            int debug13 = debug11.getLightColor(debug12, debug1, (BlockPos)debug10);
+            float debug14 = debug11.getShadeBrightness(debug12, debug1, (BlockPos)debug10);
             debug10.setWithOffset(debug8, debug9.corners[1]);
-            BlockState debug15 = debug1.getBlockState(debug10);
-            int debug16 = debug11.getLightColor(debug15, debug1, debug10);
-            float debug17 = debug11.getShadeBrightness(debug15, debug1, debug10);
+            BlockState debug15 = debug1.getBlockState((BlockPos)debug10);
+            int debug16 = debug11.getLightColor(debug15, debug1, (BlockPos)debug10);
+            float debug17 = debug11.getShadeBrightness(debug15, debug1, (BlockPos)debug10);
             debug10.setWithOffset(debug8, debug9.corners[2]);
-            BlockState debug18 = debug1.getBlockState(debug10);
-            int debug19 = debug11.getLightColor(debug18, debug1, debug10);
-            float debug20 = debug11.getShadeBrightness(debug18, debug1, debug10);
+            BlockState debug18 = debug1.getBlockState((BlockPos)debug10);
+            int debug19 = debug11.getLightColor(debug18, debug1, (BlockPos)debug10);
+            float debug20 = debug11.getShadeBrightness(debug18, debug1, (BlockPos)debug10);
             debug10.setWithOffset(debug8, debug9.corners[3]);
-            BlockState debug21 = debug1.getBlockState(debug10);
-            int debug22 = debug11.getLightColor(debug21, debug1, debug10);
-            float debug23 = debug11.getShadeBrightness(debug21, debug1, debug10);
+            BlockState debug21 = debug1.getBlockState((BlockPos)debug10);
+            int debug22 = debug11.getLightColor(debug21, debug1, (BlockPos)debug10);
+            float debug23 = debug11.getShadeBrightness(debug21, debug1, (BlockPos)debug10);
             debug10.setWithOffset(debug8, debug9.corners[0]).move(debug4);
-            boolean debug24 = debug1.getBlockState(debug10).getLightBlock(debug1, debug10) == 0;
+            boolean debug24 = (debug1.getBlockState((BlockPos)debug10).getLightBlock(debug1, (BlockPos)debug10) == 0);
             debug10.setWithOffset(debug8, debug9.corners[1]).move(debug4);
-            boolean debug25 = debug1.getBlockState(debug10).getLightBlock(debug1, debug10) == 0;
+            boolean debug25 = (debug1.getBlockState((BlockPos)debug10).getLightBlock(debug1, (BlockPos)debug10) == 0);
             debug10.setWithOffset(debug8, debug9.corners[2]).move(debug4);
-            boolean debug26 = debug1.getBlockState(debug10).getLightBlock(debug1, debug10) == 0;
+            boolean debug26 = (debug1.getBlockState((BlockPos)debug10).getLightBlock(debug1, (BlockPos)debug10) == 0);
             debug10.setWithOffset(debug8, debug9.corners[3]).move(debug4);
-            boolean bl = debug27 = debug1.getBlockState(debug10).getLightBlock(debug1, debug10) == 0;
+            boolean debug27 = (debug1.getBlockState((BlockPos)debug10).getLightBlock(debug1, (BlockPos)debug10) == 0);
             if (debug26 || debug24) {
                 debug10.setWithOffset(debug8, debug9.corners[0]).move(debug9.corners[2]);
-                debug36 = debug1.getBlockState(debug10);
-                debug28 = debug11.getShadeBrightness(debug36, debug1, debug10);
-                debug32 = debug11.getLightColor(debug36, debug1, debug10);
+                BlockState blockState = debug1.getBlockState((BlockPos)debug10);
+                debug28 = debug11.getShadeBrightness(blockState, debug1, (BlockPos)debug10);
+                debug32 = debug11.getLightColor(blockState, debug1, (BlockPos)debug10);
             } else {
                 debug28 = debug14;
                 debug32 = debug13;
             }
             if (debug27 || debug24) {
                 debug10.setWithOffset(debug8, debug9.corners[0]).move(debug9.corners[3]);
-                debug36 = debug1.getBlockState(debug10);
-                debug29 = debug11.getShadeBrightness(debug36, debug1, debug10);
-                debug33 = debug11.getLightColor(debug36, debug1, debug10);
+                BlockState blockState = debug1.getBlockState((BlockPos)debug10);
+                debug29 = debug11.getShadeBrightness(blockState, debug1, (BlockPos)debug10);
+                debug33 = debug11.getLightColor(blockState, debug1, (BlockPos)debug10);
             } else {
                 debug29 = debug14;
                 debug33 = debug13;
             }
             if (debug26 || debug25) {
                 debug10.setWithOffset(debug8, debug9.corners[1]).move(debug9.corners[2]);
-                debug36 = debug1.getBlockState(debug10);
-                debug30 = debug11.getShadeBrightness(debug36, debug1, debug10);
-                debug34 = debug11.getLightColor(debug36, debug1, debug10);
+                BlockState blockState = debug1.getBlockState((BlockPos)debug10);
+                debug30 = debug11.getShadeBrightness(blockState, debug1, (BlockPos)debug10);
+                debug34 = debug11.getLightColor(blockState, debug1, (BlockPos)debug10);
             } else {
                 debug30 = debug14;
                 debug34 = debug13;
             }
             if (debug27 || debug25) {
                 debug10.setWithOffset(debug8, debug9.corners[1]).move(debug9.corners[3]);
-                debug36 = debug1.getBlockState(debug10);
-                debug31 = debug11.getShadeBrightness(debug36, debug1, debug10);
-                debug35 = debug11.getLightColor(debug36, debug1, debug10);
+                BlockState blockState = debug1.getBlockState((BlockPos)debug10);
+                debug31 = debug11.getShadeBrightness(blockState, debug1, (BlockPos)debug10);
+                debug35 = debug11.getLightColor(blockState, debug1, (BlockPos)debug10);
             } else {
                 debug31 = debug14;
                 debug35 = debug13;
             }
-            int debug362 = debug11.getLightColor(debug2, debug1, debug3);
+            int debug36 = debug11.getLightColor(debug2, debug1, debug3);
             debug10.setWithOffset(debug3, debug4);
-            BlockState debug37 = debug1.getBlockState(debug10);
-            if (debug6.get(0) || !debug37.isSolidRender(debug1, debug10)) {
-                debug362 = debug11.getLightColor(debug37, debug1, debug10);
-            }
+            BlockState debug37 = debug1.getBlockState((BlockPos)debug10);
+            if (debug6.get(0) || !debug37.isSolidRender(debug1, (BlockPos)debug10))
+                debug36 = debug11.getLightColor(debug37, debug1, (BlockPos)debug10);
             float debug38 = debug6.get(0) ? debug11.getShadeBrightness(debug1.getBlockState(debug8), debug1, debug8) : debug11.getShadeBrightness(debug1.getBlockState(debug3), debug1, debug3);
-            AmbientVertexRemap debug39 = AmbientVertexRemap.fromFacing(debug4);
+            ModelBlockRenderer.AmbientVertexRemap debug39 = ModelBlockRenderer.AmbientVertexRemap.fromFacing(debug4);
             if (!debug6.get(1) || !debug9.doNonCubicWeight) {
-                debug40 = (debug23 + debug14 + debug29 + debug38) * 0.25f;
-                debug41 = (debug20 + debug14 + debug28 + debug38) * 0.25f;
-                debug42 = (debug20 + debug17 + debug30 + debug38) * 0.25f;
-                debug43 = (debug23 + debug17 + debug31 + debug38) * 0.25f;
-                this.lightmap[((AmbientVertexRemap)debug39).vert0] = this.blend(debug22, debug13, debug33, debug362);
-                this.lightmap[((AmbientVertexRemap)debug39).vert1] = this.blend(debug19, debug13, debug32, debug362);
-                this.lightmap[((AmbientVertexRemap)debug39).vert2] = this.blend(debug19, debug16, debug34, debug362);
-                this.lightmap[((AmbientVertexRemap)debug39).vert3] = this.blend(debug22, debug16, debug35, debug362);
-                this.brightness[((AmbientVertexRemap)debug39).vert0] = debug40;
-                this.brightness[((AmbientVertexRemap)debug39).vert1] = debug41;
-                this.brightness[((AmbientVertexRemap)debug39).vert2] = debug42;
-                this.brightness[((AmbientVertexRemap)debug39).vert3] = debug43;
+                float f1 = (debug23 + debug14 + debug29 + debug38) * 0.25F;
+                float f2 = (debug20 + debug14 + debug28 + debug38) * 0.25F;
+                float debug42 = (debug20 + debug17 + debug30 + debug38) * 0.25F;
+                float debug43 = (debug23 + debug17 + debug31 + debug38) * 0.25F;
+                this.lightmap[debug39.vert0] = blend(debug22, debug13, debug33, debug36);
+                this.lightmap[debug39.vert1] = blend(debug19, debug13, debug32, debug36);
+                this.lightmap[debug39.vert2] = blend(debug19, debug16, debug34, debug36);
+                this.lightmap[debug39.vert3] = blend(debug22, debug16, debug35, debug36);
+                this.brightness[debug39.vert0] = f1;
+                this.brightness[debug39.vert1] = f2;
+                this.brightness[debug39.vert2] = debug42;
+                this.brightness[debug39.vert3] = debug43;
             } else {
-                debug40 = (debug23 + debug14 + debug29 + debug38) * 0.25f;
-                debug41 = (debug20 + debug14 + debug28 + debug38) * 0.25f;
-                debug42 = (debug20 + debug17 + debug30 + debug38) * 0.25f;
-                debug43 = (debug23 + debug17 + debug31 + debug38) * 0.25f;
-                float debug44 = debug5[debug9.vert0Weights[0].shape] * debug5[debug9.vert0Weights[1].shape];
-                float debug45 = debug5[debug9.vert0Weights[2].shape] * debug5[debug9.vert0Weights[3].shape];
-                float debug46 = debug5[debug9.vert0Weights[4].shape] * debug5[debug9.vert0Weights[5].shape];
-                float debug47 = debug5[debug9.vert0Weights[6].shape] * debug5[debug9.vert0Weights[7].shape];
-                float debug48 = debug5[debug9.vert1Weights[0].shape] * debug5[debug9.vert1Weights[1].shape];
-                float debug49 = debug5[debug9.vert1Weights[2].shape] * debug5[debug9.vert1Weights[3].shape];
-                float debug50 = debug5[debug9.vert1Weights[4].shape] * debug5[debug9.vert1Weights[5].shape];
-                float debug51 = debug5[debug9.vert1Weights[6].shape] * debug5[debug9.vert1Weights[7].shape];
-                float debug52 = debug5[debug9.vert2Weights[0].shape] * debug5[debug9.vert2Weights[1].shape];
-                float debug53 = debug5[debug9.vert2Weights[2].shape] * debug5[debug9.vert2Weights[3].shape];
-                float debug54 = debug5[debug9.vert2Weights[4].shape] * debug5[debug9.vert2Weights[5].shape];
-                float debug55 = debug5[debug9.vert2Weights[6].shape] * debug5[debug9.vert2Weights[7].shape];
-                float debug56 = debug5[debug9.vert3Weights[0].shape] * debug5[debug9.vert3Weights[1].shape];
-                float debug57 = debug5[debug9.vert3Weights[2].shape] * debug5[debug9.vert3Weights[3].shape];
-                float debug58 = debug5[debug9.vert3Weights[4].shape] * debug5[debug9.vert3Weights[5].shape];
-                float debug59 = debug5[debug9.vert3Weights[6].shape] * debug5[debug9.vert3Weights[7].shape];
-                this.brightness[((AmbientVertexRemap)debug39).vert0] = debug40 * debug44 + debug41 * debug45 + debug42 * debug46 + debug43 * debug47;
-                this.brightness[((AmbientVertexRemap)debug39).vert1] = debug40 * debug48 + debug41 * debug49 + debug42 * debug50 + debug43 * debug51;
-                this.brightness[((AmbientVertexRemap)debug39).vert2] = debug40 * debug52 + debug41 * debug53 + debug42 * debug54 + debug43 * debug55;
-                this.brightness[((AmbientVertexRemap)debug39).vert3] = debug40 * debug56 + debug41 * debug57 + debug42 * debug58 + debug43 * debug59;
-                int debug60 = this.blend(debug22, debug13, debug33, debug362);
-                int debug61 = this.blend(debug19, debug13, debug32, debug362);
-                int debug62 = this.blend(debug19, debug16, debug34, debug362);
-                int debug63 = this.blend(debug22, debug16, debug35, debug362);
-                this.lightmap[((AmbientVertexRemap)debug39).vert0] = this.blend(debug60, debug61, debug62, debug63, debug44, debug45, debug46, debug47);
-                this.lightmap[((AmbientVertexRemap)debug39).vert1] = this.blend(debug60, debug61, debug62, debug63, debug48, debug49, debug50, debug51);
-                this.lightmap[((AmbientVertexRemap)debug39).vert2] = this.blend(debug60, debug61, debug62, debug63, debug52, debug53, debug54, debug55);
-                this.lightmap[((AmbientVertexRemap)debug39).vert3] = this.blend(debug60, debug61, debug62, debug63, debug56, debug57, debug58, debug59);
-            }
-            debug40 = debug1.getShade(debug4, debug7);
-            int debug412 = 0;
-            while (debug412 < this.brightness.length) {
-                int n = debug412++;
-                this.brightness[n] = this.brightness[n] * debug40;
+                float f1 = (debug23 + debug14 + debug29 + debug38) * 0.25F;
+                float f2 = (debug20 + debug14 + debug28 + debug38) * 0.25F;
+                float debug42 = (debug20 + debug17 + debug30 + debug38) * 0.25F;
+                float debug43 = (debug23 + debug17 + debug31 + debug38) * 0.25F;
+                float debug44 = debug5[(debug9.vert0Weights[0]).shape] * debug5[(debug9.vert0Weights[1]).shape];
+                float debug45 = debug5[(debug9.vert0Weights[2]).shape] * debug5[(debug9.vert0Weights[3]).shape];
+                float debug46 = debug5[(debug9.vert0Weights[4]).shape] * debug5[(debug9.vert0Weights[5]).shape];
+                float debug47 = debug5[(debug9.vert0Weights[6]).shape] * debug5[(debug9.vert0Weights[7]).shape];
+                float debug48 = debug5[(debug9.vert1Weights[0]).shape] * debug5[(debug9.vert1Weights[1]).shape];
+                float debug49 = debug5[(debug9.vert1Weights[2]).shape] * debug5[(debug9.vert1Weights[3]).shape];
+                float debug50 = debug5[(debug9.vert1Weights[4]).shape] * debug5[(debug9.vert1Weights[5]).shape];
+                float debug51 = debug5[(debug9.vert1Weights[6]).shape] * debug5[(debug9.vert1Weights[7]).shape];
+                float debug52 = debug5[(debug9.vert2Weights[0]).shape] * debug5[(debug9.vert2Weights[1]).shape];
+                float debug53 = debug5[(debug9.vert2Weights[2]).shape] * debug5[(debug9.vert2Weights[3]).shape];
+                float debug54 = debug5[(debug9.vert2Weights[4]).shape] * debug5[(debug9.vert2Weights[5]).shape];
+                float debug55 = debug5[(debug9.vert2Weights[6]).shape] * debug5[(debug9.vert2Weights[7]).shape];
+                float debug56 = debug5[(debug9.vert3Weights[0]).shape] * debug5[(debug9.vert3Weights[1]).shape];
+                float debug57 = debug5[(debug9.vert3Weights[2]).shape] * debug5[(debug9.vert3Weights[3]).shape];
+                float debug58 = debug5[(debug9.vert3Weights[4]).shape] * debug5[(debug9.vert3Weights[5]).shape];
+                float debug59 = debug5[(debug9.vert3Weights[6]).shape] * debug5[(debug9.vert3Weights[7]).shape];
+                this.brightness[debug39.vert0] = f1 * debug44 + f2 * debug45 + debug42 * debug46 + debug43 * debug47;
+                this.brightness[debug39.vert1] = f1 * debug48 + f2 * debug49 + debug42 * debug50 + debug43 * debug51;
+                this.brightness[debug39.vert2] = f1 * debug52 + f2 * debug53 + debug42 * debug54 + debug43 * debug55;
+                this.brightness[debug39.vert3] = f1 * debug56 + f2 * debug57 + debug42 * debug58 + debug43 * debug59;
+                int debug60 = blend(debug22, debug13, debug33, debug36);
+                int debug61 = blend(debug19, debug13, debug32, debug36);
+                int debug62 = blend(debug19, debug16, debug34, debug36);
+                int debug63 = blend(debug22, debug16, debug35, debug36);
+                this.lightmap[debug39.vert0] = blend(debug60, debug61, debug62, debug63, debug44, debug45, debug46, debug47);
+                this.lightmap[debug39.vert1] = blend(debug60, debug61, debug62, debug63, debug48, debug49, debug50, debug51);
+                this.lightmap[debug39.vert2] = blend(debug60, debug61, debug62, debug63, debug52, debug53, debug54, debug55);
+                this.lightmap[debug39.vert3] = blend(debug60, debug61, debug62, debug63, debug56, debug57, debug58, debug59);
             }
+            float debug40 = debug1.getShade(debug4, debug7);
+            for (int debug41 = 0; debug41 < this.brightness.length; debug41++)
+                this.brightness[debug41] = this.brightness[debug41] * debug40;
+            // MagmaCube end - rewrite code
         }
 
         private int blend(int debug1, int debug2, int debug3, int debug4) {
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
index 57b9300bd867a85f7c9118999594416c2d7894cf..55189833defa456d57f1128d4bcdd9abe701f7f4 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
@@ -94,12 +94,11 @@ implements ResourceManagerReloadListener {
     }
 
     public void render(ItemStack debug1, ItemTransforms.TransformType debug2, boolean debug3, PoseStack debug4, MultiBufferSource debug5, int debug6, int debug7, BakedModel debug8) {
-        boolean debug9;
         if (debug1.isEmpty()) {
             return;
         }
         debug4.pushPose();
-        boolean bl = debug9 = debug2 == ItemTransforms.TransformType.GUI || debug2 == ItemTransforms.TransformType.GROUND || debug2 == ItemTransforms.TransformType.FIXED;
+        boolean debug9 = debug2 == ItemTransforms.TransformType.GUI || debug2 == ItemTransforms.TransformType.GROUND || debug2 == ItemTransforms.TransformType.FIXED;
         if (debug1.getItem() == Items.TRIDENT && debug9) {
             debug8 = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:trident#inventory"));
         }
diff --git a/src/main/java/net/minecraft/commands/SharedSuggestionProvider.java b/src/main/java/net/minecraft/commands/SharedSuggestionProvider.java
index 1333b241353976301e7e2b59dab7eea1ae6a2db5..5f4a12de4877f4d946728427a91194cd1e2719c4 100644
--- a/src/main/java/net/minecraft/commands/SharedSuggestionProvider.java
+++ b/src/main/java/net/minecraft/commands/SharedSuggestionProvider.java
@@ -213,7 +213,7 @@ public interface SharedSuggestionProvider {
 
     public static class TextCoordinates {
         public static final TextCoordinates DEFAULT_LOCAL = new TextCoordinates("^", "^", "^");
-        public static final TextCoordinates DEFAULT_GLOBAL = new TextCoordinates("‾", "‾", "‾");
+        public static final TextCoordinates DEFAULT_GLOBAL = new TextCoordinates("~", "~", "~"); // MagmaCube - decompile fix
         public final String x;
         public final String y;
         public final String z;
diff --git a/src/main/java/net/minecraft/commands/arguments/AngleArgument.java b/src/main/java/net/minecraft/commands/arguments/AngleArgument.java
index cff08138a082aafd046a798731528e4860c6e4d5..76a973dbb0dfc014a05b9d44932a627a678990de 100644
--- a/src/main/java/net/minecraft/commands/arguments/AngleArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/AngleArgument.java
@@ -41,7 +41,7 @@ public class AngleArgument implements ArgumentType<AngleArgument.SingleAngle> //
     }
     
     static {
-        EXAMPLES = Arrays.asList("0", "‾", "‾-5");
+        EXAMPLES = Arrays.asList("0", "~", "~-5"); // MagmaCube - decompile fix
         ERROR_NOT_COMPLETE = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.angle.incomplete"));
     }
     
diff --git a/src/main/java/net/minecraft/commands/arguments/coordinates/BlockPosArgument.java b/src/main/java/net/minecraft/commands/arguments/coordinates/BlockPosArgument.java
index 3bd157d78f06d98104055148b33acb147e892d22..0e3be1923205cf278434828d6011b6aa86193e85 100644
--- a/src/main/java/net/minecraft/commands/arguments/coordinates/BlockPosArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/coordinates/BlockPosArgument.java
@@ -72,7 +72,7 @@ public class BlockPosArgument implements ArgumentType<Coordinates>
     }
     
     static {
-        EXAMPLES = Arrays.asList("0 0 0", "‾ ‾ ‾", "^ ^ ^", "^1 ^ ^-5", "‾0.5 ‾1 ‾-5");
+        EXAMPLES = Arrays.asList("0 0 0", "~ ~ ~", "^ ^ ^", "^1 ^ ^-5", "~0.5 ~1 ~-5"); // MagmaCube - decompile fix
         ERROR_NOT_LOADED = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.pos.unloaded"));
         ERROR_OUT_OF_WORLD = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.pos.outofworld"));
     }
diff --git a/src/main/java/net/minecraft/commands/arguments/coordinates/ColumnPosArgument.java b/src/main/java/net/minecraft/commands/arguments/coordinates/ColumnPosArgument.java
index 5a148d6d7fe08b99ba7dc5f349d599e97f173289..a0fc42c6ad530f052445af5fe1c383252827ff02 100644
--- a/src/main/java/net/minecraft/commands/arguments/coordinates/ColumnPosArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/coordinates/ColumnPosArgument.java
@@ -69,7 +69,7 @@ public class ColumnPosArgument implements ArgumentType<Coordinates>
     }
     
     static {
-        EXAMPLES = Arrays.asList("0 0", "‾ ‾", "‾1 ‾-2", "^ ^", "^-1 ^0");
+        EXAMPLES = Arrays.asList("0 0", "~ ~", "~1 ~-2", "^ ^", "^-1 ^0"); // MagmaCube - decompile fix
         ERROR_NOT_COMPLETE = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.pos2d.incomplete"));
     }
 }
diff --git a/src/main/java/net/minecraft/commands/arguments/coordinates/RotationArgument.java b/src/main/java/net/minecraft/commands/arguments/coordinates/RotationArgument.java
index 290d1ae7c87f23ee71db370a4b718f08b2870927..de626c383841e2fec74ead9dd5581a9a64b8e73f 100644
--- a/src/main/java/net/minecraft/commands/arguments/coordinates/RotationArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/coordinates/RotationArgument.java
@@ -45,7 +45,7 @@ public class RotationArgument implements ArgumentType<Coordinates>
     }
     
     static {
-        EXAMPLES = Arrays.asList("0 0", "‾ ‾", "‾-5 ‾5");
+        EXAMPLES = Arrays.asList("0 0", "~ ~", "~-5 ~5");
         ERROR_NOT_COMPLETE = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.rotation.incomplete"));
     }
 }
diff --git a/src/main/java/net/minecraft/commands/arguments/coordinates/Vec2Argument.java b/src/main/java/net/minecraft/commands/arguments/coordinates/Vec2Argument.java
index fc0f4c0e3c7367103a7f407f8d65f045011a4047..e3f5cb0d0d5a6ed26f7847f4c68f36b7929a93c5 100644
--- a/src/main/java/net/minecraft/commands/arguments/coordinates/Vec2Argument.java
+++ b/src/main/java/net/minecraft/commands/arguments/coordinates/Vec2Argument.java
@@ -74,7 +74,7 @@ public class Vec2Argument implements ArgumentType<Coordinates>
     }
     
     static {
-        EXAMPLES = Arrays.asList("0 0", "‾ ‾", "0.1 -0.5", "‾1 ‾-2");
+        EXAMPLES = Arrays.asList("0 0", "~ ~", "0.1 -0.5", "~1 ~-2"); // MagmaCube - decompile fix
         ERROR_NOT_COMPLETE = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.pos2d.incomplete"));
     }
 }
diff --git a/src/main/java/net/minecraft/commands/arguments/coordinates/Vec3Argument.java b/src/main/java/net/minecraft/commands/arguments/coordinates/Vec3Argument.java
index dc935c3c75e9b0c29a7a6f52caba02e339808812..d77fbd4d7f5a41fb7ceec251fe88e4d644ca6c5e 100644
--- a/src/main/java/net/minecraft/commands/arguments/coordinates/Vec3Argument.java
+++ b/src/main/java/net/minecraft/commands/arguments/coordinates/Vec3Argument.java
@@ -72,7 +72,7 @@ public class Vec3Argument implements ArgumentType<Coordinates>
     }
     
     static {
-        EXAMPLES = Arrays.asList("0 0 0", "‾ ‾ ‾", "^ ^ ^", "^1 ^ ^-5", "0.1 -0.5 .9", "‾0.5 ‾1 ‾-5");
+        EXAMPLES = Arrays.asList("0 0 0", "~ ~ ~", "^ ^ ^", "^1 ^ ^-5", "0.1 -0.5 .9", "~0.5 ~1 ~-5"); // MagmaCube - decompile fix
         ERROR_NOT_COMPLETE = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.pos3d.incomplete"));
         ERROR_MIXED_TYPE = new SimpleCommandExceptionType((Message)new TranslatableComponent("argument.pos.mixed"));
     }
diff --git a/src/main/java/net/minecraft/commands/arguments/coordinates/WorldCoordinate.java b/src/main/java/net/minecraft/commands/arguments/coordinates/WorldCoordinate.java
index e34249a613ae0f27e45623b6dd9450da758c6dd8..75f7ff791d20aa92c3738ac9ef95a843117ab04d 100644
--- a/src/main/java/net/minecraft/commands/arguments/coordinates/WorldCoordinate.java
+++ b/src/main/java/net/minecraft/commands/arguments/coordinates/WorldCoordinate.java
@@ -66,7 +66,7 @@ public class WorldCoordinate
     
     public static boolean isRelative(final StringReader debug0) {
         boolean debug;
-        if (debug0.peek() == '‾') {
+        if (debug0.peek() == '~') { // MagmaCube - decompile fix
             debug = true;
             debug0.skip();
         }
diff --git a/src/main/java/net/minecraft/core/RegistryAccess.java b/src/main/java/net/minecraft/core/RegistryAccess.java
index ba49b3d001dad6ffb5cecf21b454f6282017681d..f94543b5ab1662d2ab3011590a7d5b0bfb8eba85 100644
--- a/src/main/java/net/minecraft/core/RegistryAccess.java
+++ b/src/main/java/net/minecraft/core/RegistryAccess.java
@@ -175,6 +175,7 @@ public abstract class RegistryAccess {
 
         @Override
         public <E> Optional<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> debug1) {
+            if (debug1.equals(Registry.BIOME_REGISTRY)) return (Optional) Optional.of(BuiltinRegistries.BIOME); // MagmaCube
             return (Optional<WritableRegistry<E>>) (Object) Optional.ofNullable(this.registries.get(debug1)).map(debug0 -> debug0); // MagmaCube - decompile fix
         }
     }
diff --git a/src/main/java/net/minecraft/data/recipes/RecipeProvider.java b/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
index 774854c7b5d670dc604d41d1fbb4d16e9f89f115..338e9c75065584729735c2db7be260a428e7b6cb 100644
--- a/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
+++ b/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
@@ -447,7 +447,7 @@ implements DataProvider {
         ShapedRecipeBuilder.shaped(Items.COMPASS).define(Character.valueOf('#'), Items.IRON_INGOT).define(Character.valueOf('X'), Items.REDSTONE).pattern(" # ").pattern("#X#").pattern(" # ").unlockedBy("has_redstone", RecipeProvider.has(Items.REDSTONE)).save(debug0);
         ShapedRecipeBuilder.shaped(Items.COOKIE, 8).define(Character.valueOf('#'), Items.WHEAT).define(Character.valueOf('X'), Items.COCOA_BEANS).pattern("#X#").unlockedBy("has_cocoa", RecipeProvider.has(Items.COCOA_BEANS)).save(debug0);
         ShapedRecipeBuilder.shaped(Blocks.CRAFTING_TABLE).define(Character.valueOf('#'), ItemTags.PLANKS).pattern("##").pattern("##").unlockedBy("has_planks", RecipeProvider.has(ItemTags.PLANKS)).save(debug0);
-        ShapedRecipeBuilder.shaped(Items.CROSSBOW).define(Character.valueOf('‾'), Items.STRING).define(Character.valueOf('#'), Items.STICK).define(Character.valueOf('&'), Items.IRON_INGOT).define(Character.valueOf('$'), Blocks.TRIPWIRE_HOOK).pattern("#&#").pattern("‾$‾").pattern(" # ").unlockedBy("has_string", RecipeProvider.has(Items.STRING)).unlockedBy("has_stick", RecipeProvider.has(Items.STICK)).unlockedBy("has_iron_ingot", RecipeProvider.has(Items.IRON_INGOT)).unlockedBy("has_tripwire_hook", RecipeProvider.has(Blocks.TRIPWIRE_HOOK)).save(debug0);
+        ShapedRecipeBuilder.shaped(Items.CROSSBOW).define(Character.valueOf('~'), Items.STRING).define(Character.valueOf('#'), Items.STICK).define(Character.valueOf('&'), Items.IRON_INGOT).define(Character.valueOf('$'), Blocks.TRIPWIRE_HOOK).pattern("#&#").pattern("~$~").pattern(" # ").unlockedBy("has_string", RecipeProvider.has(Items.STRING)).unlockedBy("has_stick", RecipeProvider.has(Items.STICK)).unlockedBy("has_iron_ingot", RecipeProvider.has(Items.IRON_INGOT)).unlockedBy("has_tripwire_hook", RecipeProvider.has(Blocks.TRIPWIRE_HOOK)).save(debug0); // MagmaCube - decompile fix
         ShapedRecipeBuilder.shaped(Blocks.LOOM).define(Character.valueOf('#'), ItemTags.PLANKS).define(Character.valueOf('@'), Items.STRING).pattern("@@").pattern("##").unlockedBy("has_string", RecipeProvider.has(Items.STRING)).save(debug0);
         ShapedRecipeBuilder.shaped(Blocks.CHISELED_RED_SANDSTONE).define(Character.valueOf('#'), Blocks.RED_SANDSTONE_SLAB).pattern("#").pattern("#").unlockedBy("has_red_sandstone", RecipeProvider.has(Blocks.RED_SANDSTONE)).unlockedBy("has_chiseled_red_sandstone", RecipeProvider.has(Blocks.CHISELED_RED_SANDSTONE)).unlockedBy("has_cut_red_sandstone", RecipeProvider.has(Blocks.CUT_RED_SANDSTONE)).save(debug0);
         ShapedRecipeBuilder.shaped(Blocks.CHISELED_SANDSTONE).define(Character.valueOf('#'), Blocks.SANDSTONE_SLAB).pattern("#").pattern("#").unlockedBy("has_stone_slab", RecipeProvider.has(Blocks.SANDSTONE_SLAB)).save(debug0);
@@ -536,7 +536,7 @@ implements DataProvider {
         ShapedRecipeBuilder.shaped(Blocks.LADDER, 3).define(Character.valueOf('#'), Items.STICK).pattern("# #").pattern("###").pattern("# #").unlockedBy("has_stick", RecipeProvider.has(Items.STICK)).save(debug0);
         ShapedRecipeBuilder.shaped(Blocks.LAPIS_BLOCK).define(Character.valueOf('#'), Items.LAPIS_LAZULI).pattern("###").pattern("###").pattern("###").unlockedBy("has_lapis", RecipeProvider.has(Items.LAPIS_LAZULI)).save(debug0);
         ShapelessRecipeBuilder.shapeless(Items.LAPIS_LAZULI, 9).requires(Blocks.LAPIS_BLOCK).unlockedBy("has_lapis_block", RecipeProvider.has(Blocks.LAPIS_BLOCK)).save(debug0);
-        ShapedRecipeBuilder.shaped(Items.LEAD, 2).define(Character.valueOf('‾'), Items.STRING).define(Character.valueOf('O'), Items.SLIME_BALL).pattern("‾‾ ").pattern("‾O ").pattern("  ‾").unlockedBy("has_slime_ball", RecipeProvider.has(Items.SLIME_BALL)).save(debug0);
+        ShapedRecipeBuilder.shaped(Items.LEAD, 2).define(Character.valueOf('~'), Items.STRING).define(Character.valueOf('O'), Items.SLIME_BALL).pattern("~~ ").pattern("~O ").pattern("  ~").unlockedBy("has_slime_ball", RecipeProvider.has(Items.SLIME_BALL)).save(debug0); // MagmaCube - decompile fix
         ShapedRecipeBuilder.shaped(Items.LEATHER).define(Character.valueOf('#'), Items.RABBIT_HIDE).pattern("##").pattern("##").unlockedBy("has_rabbit_hide", RecipeProvider.has(Items.RABBIT_HIDE)).save(debug0);
         ShapedRecipeBuilder.shaped(Items.LEATHER_BOOTS).define(Character.valueOf('X'), Items.LEATHER).pattern("X X").pattern("X X").unlockedBy("has_leather", RecipeProvider.has(Items.LEATHER)).save(debug0);
         ShapedRecipeBuilder.shaped(Items.LEATHER_CHESTPLATE).define(Character.valueOf('X'), Items.LEATHER).pattern("X X").pattern("XXX").pattern("XXX").unlockedBy("has_leather", RecipeProvider.has(Items.LEATHER)).save(debug0);
@@ -727,7 +727,7 @@ implements DataProvider {
         ShapelessRecipeBuilder.shapeless(Items.SKULL_BANNER_PATTERN).requires(Items.PAPER).requires(Items.WITHER_SKELETON_SKULL).unlockedBy("has_wither_skeleton_skull", RecipeProvider.has(Items.WITHER_SKELETON_SKULL)).save(debug0);
         ShapelessRecipeBuilder.shapeless(Items.FLOWER_BANNER_PATTERN).requires(Items.PAPER).requires(Blocks.OXEYE_DAISY).unlockedBy("has_oxeye_daisy", RecipeProvider.has(Blocks.OXEYE_DAISY)).save(debug0);
         ShapelessRecipeBuilder.shapeless(Items.MOJANG_BANNER_PATTERN).requires(Items.PAPER).requires(Items.ENCHANTED_GOLDEN_APPLE).unlockedBy("has_enchanted_golden_apple", RecipeProvider.has(Items.ENCHANTED_GOLDEN_APPLE)).save(debug0);
-        ShapedRecipeBuilder.shaped(Blocks.SCAFFOLDING, 6).define(Character.valueOf('‾'), Items.STRING).define(Character.valueOf('I'), Blocks.BAMBOO).pattern("I‾I").pattern("I I").pattern("I I").unlockedBy("has_bamboo", RecipeProvider.has(Blocks.BAMBOO)).save(debug0);
+        ShapedRecipeBuilder.shaped(Blocks.SCAFFOLDING, 6).define(Character.valueOf('~'), Items.STRING).define(Character.valueOf('I'), Blocks.BAMBOO).pattern("I~I").pattern("I I").pattern("I I").unlockedBy("has_bamboo", RecipeProvider.has(Blocks.BAMBOO)).save(debug0); // MagmaCube - decompile fix
         ShapedRecipeBuilder.shaped(Blocks.GRINDSTONE).define(Character.valueOf('I'), Items.STICK).define(Character.valueOf('-'), Blocks.STONE_SLAB).define(Character.valueOf('#'), ItemTags.PLANKS).pattern("I-I").pattern("# #").unlockedBy("has_stone_slab", RecipeProvider.has(Blocks.STONE_SLAB)).save(debug0);
         ShapedRecipeBuilder.shaped(Blocks.BLAST_FURNACE).define(Character.valueOf('#'), Blocks.SMOOTH_STONE).define(Character.valueOf('X'), Blocks.FURNACE).define(Character.valueOf('I'), Items.IRON_INGOT).pattern("III").pattern("IXI").pattern("###").unlockedBy("has_smooth_stone", RecipeProvider.has(Blocks.SMOOTH_STONE)).save(debug0);
         ShapedRecipeBuilder.shaped(Blocks.SMOKER).define(Character.valueOf('#'), ItemTags.LOGS).define(Character.valueOf('X'), Blocks.FURNACE).pattern(" # ").pattern("#X#").pattern(" # ").unlockedBy("has_furnace", RecipeProvider.has(Blocks.FURNACE)).save(debug0);
diff --git a/src/main/java/net/minecraft/server/commands/LocateCommand.java b/src/main/java/net/minecraft/server/commands/LocateCommand.java
index fe436d7b48e0b34c659567fe5e80508fdc899318..d8154438dadd9253f87a387e27b97b97063012aa 100644
--- a/src/main/java/net/minecraft/server/commands/LocateCommand.java
+++ b/src/main/java/net/minecraft/server/commands/LocateCommand.java
@@ -44,9 +44,9 @@ public class LocateCommand
     
     public static int showLocateResult(final CommandSourceStack debug0, final String debug1, final BlockPos debug2, final BlockPos debug3, final String debug4) {
         final int debug5 = Mth.floor(dist(debug2.getX(), debug2.getZ(), debug3.getX(), debug3.getZ()));
-        final Component debug6 = ComponentUtils.wrapInSquareBrackets(new TranslatableComponent("chat.coordinates", new Object[] { debug3.getX(), "‾", debug3.getZ() })).withStyle(debug1ll -> { // MagmaCube - decompile fix
+        final Component debug6 = ComponentUtils.wrapInSquareBrackets(new TranslatableComponent("chat.coordinates", new Object[] { debug3.getX(), "~", debug3.getZ() })).withStyle(debug1ll -> { // MagmaCube - decompile fix
             Style style = debug1ll.withColor(ChatFormatting.GREEN); // MagmaCube - decompile fix
-            ClickEvent debug7 = new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/tp @s " + debug3.getX() + " ‾ " + debug3.getZ()); // MagmaCube - decompile fix
+            ClickEvent debug7 = new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/tp @s " + debug3.getX() + " ~ " + debug3.getZ()); // MagmaCube - decompile fix
             style.withClickEvent(debug7); // MagmaCube - decompile fix
             HoverEvent debug8 = new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TranslatableComponent("chat.coordinates.tooltip")); // MagmaCube - decompile fix
             return style.withHoverEvent(debug8);
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 62281187efcedbf13bedea0fe195b2187ffb9aeb..47768d49e9642467626aeed5ae8e6226073cfcd8 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1946,7 +1946,7 @@ CommandSource {
     }
 
     public String toString() {
-        return String.format(Locale.ROOT, "%s['%s'/%d, l='%s', x=%.2f, y=%.2f, z=%.2f]", this.getClass().getSimpleName(), this.getName().getString(), this.id, this.level == null ? "‾NULL‾" : this.level.toString(), this.getX(), this.getY(), this.getZ());
+        return String.format(Locale.ROOT, "%s['%s'/%d, l='%s', x=%.2f, y=%.2f, z=%.2f]", this.getClass().getSimpleName(), this.getName().getString(), this.id, this.level == null ? "~NULL~" : this.level.toString(), this.getX(), this.getY(), this.getZ()); // MagmaCube - decompile fix
     }
 
     public boolean isInvulnerableTo(DamageSource debug1) {
diff --git a/src/main/java/net/minecraft/world/level/block/CarvedPumpkinBlock.java b/src/main/java/net/minecraft/world/level/block/CarvedPumpkinBlock.java
index 8d7654662707fe0009159c9f7ae364f12c9c1662..a3c8331e4a1578863505678e8170449c5b6fa9e9 100644
--- a/src/main/java/net/minecraft/world/level/block/CarvedPumpkinBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CarvedPumpkinBlock.java
@@ -132,14 +132,14 @@ public class CarvedPumpkinBlock extends HorizontalDirectionalBlock implements We
     
     private BlockPattern getOrCreateIronGolemBase() {
         if (this.ironGolemBase == null) {
-            this.ironGolemBase = BlockPatternBuilder.start().aisle("‾ ‾", "###", "‾#‾").where('#', BlockInWorld.hasState(BlockStatePredicate.forBlock(Blocks.IRON_BLOCK))).where('‾', BlockInWorld.hasState(BlockMaterialPredicate.forMaterial(Material.AIR))).build();
+            this.ironGolemBase = BlockPatternBuilder.start().aisle("~ ~", "###", "~#~").where('#', BlockInWorld.hasState(BlockStatePredicate.forBlock(Blocks.IRON_BLOCK))).where('~', BlockInWorld.hasState(BlockMaterialPredicate.forMaterial(Material.AIR))).build(); // MagmaCube - decompile fix
         }
         return this.ironGolemBase;
     }
     
     private BlockPattern getOrCreateIronGolemFull() {
         if (this.ironGolemFull == null) {
-            this.ironGolemFull = BlockPatternBuilder.start().aisle("‾^‾", "###", "‾#‾").where('^', BlockInWorld.hasState(CarvedPumpkinBlock.PUMPKINS_PREDICATE)).where('#', BlockInWorld.hasState(BlockStatePredicate.forBlock(Blocks.IRON_BLOCK))).where('‾', BlockInWorld.hasState(BlockMaterialPredicate.forMaterial(Material.AIR))).build();
+            this.ironGolemFull = BlockPatternBuilder.start().aisle("~^~", "###", "~#~").where('^', BlockInWorld.hasState(CarvedPumpkinBlock.PUMPKINS_PREDICATE)).where('#', BlockInWorld.hasState(BlockStatePredicate.forBlock(Blocks.IRON_BLOCK))).where('~', BlockInWorld.hasState(BlockMaterialPredicate.forMaterial(Material.AIR))).build(); // MagmaCube - decompile fix
         }
         return this.ironGolemFull;
     }
diff --git a/src/main/java/net/minecraft/world/level/block/WitherSkullBlock.java b/src/main/java/net/minecraft/world/level/block/WitherSkullBlock.java
index d3563c56689c38dffa61f6181b06a0f10af36deb..8d5aae43f9e4e0967c4fb913f67cf94b22b33076 100644
--- a/src/main/java/net/minecraft/world/level/block/WitherSkullBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WitherSkullBlock.java
@@ -92,14 +92,14 @@ public class WitherSkullBlock extends SkullBlock
     
     private static BlockPattern getOrCreateWitherFull() {
         if (WitherSkullBlock.witherPatternFull == null) {
-            WitherSkullBlock.witherPatternFull = BlockPatternBuilder.start().aisle("^^^", "###", "‾#‾").where('#', debug0 -> debug0.getState().is(BlockTags.WITHER_SUMMON_BASE_BLOCKS)).where('^', BlockInWorld.hasState(BlockStatePredicate.forBlock(Blocks.WITHER_SKELETON_SKULL).or(BlockStatePredicate.forBlock(Blocks.WITHER_SKELETON_WALL_SKULL)))).where('‾', BlockInWorld.hasState(BlockMaterialPredicate.forMaterial(Material.AIR))).build();
+            WitherSkullBlock.witherPatternFull = BlockPatternBuilder.start().aisle("^^^", "###", "~#~").where('#', debug0 -> debug0.getState().is(BlockTags.WITHER_SUMMON_BASE_BLOCKS)).where('^', BlockInWorld.hasState(BlockStatePredicate.forBlock(Blocks.WITHER_SKELETON_SKULL).or(BlockStatePredicate.forBlock(Blocks.WITHER_SKELETON_WALL_SKULL)))).where('~', BlockInWorld.hasState(BlockMaterialPredicate.forMaterial(Material.AIR))).build(); // MagmaCube - decompile fix
         }
         return WitherSkullBlock.witherPatternFull;
     }
     
     private static BlockPattern getOrCreateWitherBase() {
         if (WitherSkullBlock.witherPatternBase == null) {
-            WitherSkullBlock.witherPatternBase = BlockPatternBuilder.start().aisle("   ", "###", "‾#‾").where('#', debug0 -> debug0.getState().is(BlockTags.WITHER_SUMMON_BASE_BLOCKS)).where('‾', BlockInWorld.hasState(BlockMaterialPredicate.forMaterial(Material.AIR))).build();
+            WitherSkullBlock.witherPatternBase = BlockPatternBuilder.start().aisle("   ", "###", "~#~").where('#', debug0 -> debug0.getState().is(BlockTags.WITHER_SUMMON_BASE_BLOCKS)).where('~', BlockInWorld.hasState(BlockMaterialPredicate.forMaterial(Material.AIR))).build(); // MagmaCube - decompile fix
         }
         return WitherSkullBlock.witherPatternBase;
     }
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index 470a40ca1885b9c9066de806708c173d0d34a942..3e1e962601adcaa8abf637b9ebfb11e7c7721091 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -58,6 +58,7 @@ import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
+import net.minecraft.data.BuiltinRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtIo;
 import net.minecraft.nbt.NbtOps;
@@ -124,7 +125,7 @@ public class LevelStorageSource {
             Registry debug12 = (Registry)RegistryLookupCodec.create(Registry.DIMENSION_TYPE_REGISTRY).codec().parse(debug4).resultOrPartial(Util.prefix("Dimension type registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get dimension registry"));
             Registry debug22 = (Registry)RegistryLookupCodec.create(Registry.BIOME_REGISTRY).codec().parse(debug4).resultOrPartial(Util.prefix("Biome registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get biome registry"));
             Registry debug32 = (Registry)RegistryLookupCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY).codec().parse(debug4).resultOrPartial(Util.prefix("Noise settings registry: ", ((Logger)LOGGER)::error)).orElseThrow(() -> new IllegalStateException("Failed to get noise settings registry"));
-            return WorldGenSettings.makeDefault(debug12, debug22, debug32);
+            return WorldGenSettings.makeDefault(debug12, BuiltinRegistries.BIOME, debug32); // MagmaCube
         }), debug52.lifecycle());
         // MagmaCube end - decompile end
     }
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index 4d156f225141165e5dca26becdde59f089e98649..aea01980678d1a4f74982b0c08f42456d557b124 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -16,7 +16,7 @@
         </RollingRandomAccessFile>
     </Appenders>
     <Loggers>
-        <Root level="info">
+        <Root level="debug">
             <filters>
                 <MarkerFilter marker="NETWORK_PACKETS" onMatch="DENY" onMismatch="NEUTRAL" />
             </filters>
