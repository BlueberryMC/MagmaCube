From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Thu, 12 Nov 2020 00:26:33 +0900
Subject: [PATCH] deobf / 1.16.4 decomp fix


diff --git a/pom.xml b/pom.xml
index edd0529aef61ba76fb8b95743c92c89a79f9d969..de593c93dab1a8b749dd88aa77a38852f07981b9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -5,12 +5,13 @@
     <parent>
         <artifactId>minecraft-parent</artifactId>
         <groupId>xyz.acrylicstyle.minecraft</groupId>
-        <version>1.16.3</version>
+        <version>1.16.4</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
     
     <properties>
         <log4j.version>2.12.1</log4j.version>
+        <lwjgl.version>3.2.2</lwjgl.version>
     </properties>
 
     <artifactId>Minecraft</artifactId>
@@ -126,162 +127,162 @@
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-openal</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-opengl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-jemalloc</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-jemalloc</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-jemalloc</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-jemalloc</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-openal</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-openal</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-openal</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-opengl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-opengl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-opengl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-glfw</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-glfw</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-glfw</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-glfw</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-stb</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-stb</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-stb</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-stb</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-tinyfd</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-tinyfd</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-tinyfd</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-tinyfd</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
diff --git a/src/main/java/magmacube/DebugMain.java b/src/main/java/magmacube/DebugMain.java
new file mode 100644
index 0000000000000000000000000000000000000000..be5bfeed686ea2114a96edb21e12998ed86a3b13
--- /dev/null
+++ b/src/main/java/magmacube/DebugMain.java
@@ -0,0 +1,11 @@
+package magmacube;
+
+import net.minecraft.SharedConstants;
+import net.minecraft.client.main.Main;
+
+public class DebugMain {
+    public static void main(String[] args) {
+        SharedConstants.IS_RUNNING_IN_IDE = true;
+        Main.main(args);
+    }
+}
diff --git a/src/main/java/net/minecraft/CrashReport.java b/src/main/java/net/minecraft/CrashReport.java
index ecf3a1bceb196e3e610d6616bd19c93a54ca9c0f..e4e66f1d5eaf8ef7ccc45f2bb1ab58fc152e1359 100644
--- a/src/main/java/net/minecraft/CrashReport.java
+++ b/src/main/java/net/minecraft/CrashReport.java
@@ -24,10 +24,20 @@ import java.util.Date;
 import java.util.List;
 import java.util.concurrent.CompletionException;
 import java.util.stream.Collectors;
+
+import com.mojang.serialization.Lifecycle;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
+import net.minecraft.core.Registry;
+import net.minecraft.core.RegistryAccess;
+import net.minecraft.core.WritableRegistry;
+import net.minecraft.data.BuiltinRegistries;
+import net.minecraft.data.worldgen.biome.VanillaBiomes;
+import net.minecraft.world.effect.MobEffects;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.biome.Biomes;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.logging.log4j.LogManager;
@@ -43,9 +53,9 @@ public class CrashReport {
     private boolean trackingStackTrace = true;
     private StackTraceElement[] uncategorizedStackTrace = new StackTraceElement[0];
 
-    public CrashReport(String debug1, Throwable debug2) {
-        this.title = debug1;
-        this.exception = debug2;
+    public CrashReport(String title, Throwable exception) {
+        this.title = title;
+        this.exception = exception;
         this.initDetails();
     }
 
@@ -56,19 +66,19 @@ public class CrashReport {
         this.systemDetails.setDetail("Java Version", () -> System.getProperty("java.version") + ", " + System.getProperty("java.vendor"));
         this.systemDetails.setDetail("Java VM Version", () -> System.getProperty("java.vm.name") + " (" + System.getProperty("java.vm.info") + "), " + System.getProperty("java.vm.vendor"));
         this.systemDetails.setDetail("Memory", () -> {
-            Runtime debug0 = Runtime.getRuntime();
-            long debug1 = debug0.maxMemory();
-            long debug3 = debug0.totalMemory();
-            long debug5 = debug0.freeMemory();
-            long debug7 = debug1 / 1024L / 1024L;
-            long debug9 = debug3 / 1024L / 1024L;
-            long debug11 = debug5 / 1024L / 1024L;
-            return debug5 + " bytes (" + debug11 + " MB) / " + debug3 + " bytes (" + debug9 + " MB) up to " + debug1 + " bytes (" + debug7 + " MB)";
+            Runtime runtime = Runtime.getRuntime();
+            long maxMemory = runtime.maxMemory();
+            long totalMemory = runtime.totalMemory();
+            long freeMemory = runtime.freeMemory();
+            long maxMemoryMB = maxMemory / 1024L / 1024L;
+            long totalMemoryMB = totalMemory / 1024L / 1024L;
+            long freeMemoryMB = freeMemory / 1024L / 1024L;
+            return freeMemory + " bytes (" + freeMemoryMB + " MB) / " + totalMemory + " bytes (" + totalMemoryMB + " MB) up to " + maxMemory + " bytes (" + maxMemoryMB + " MB)";
         });
         this.systemDetails.setDetail("CPUs", Runtime.getRuntime().availableProcessors());
         this.systemDetails.setDetail("JVM Flags", () -> {
-            List debug0 = Util.getVmArguments().collect(Collectors.toList());
-            return String.format("%d total; %s", debug0.size(), debug0.stream().collect(Collectors.joining(" ")));
+            List<String> arguments = Util.getVmArguments().collect(Collectors.toList());
+            return String.format("%d total; %s", arguments.size(), arguments.stream().collect(Collectors.joining(" ")));
         });
     }
 
@@ -80,25 +90,25 @@ public class CrashReport {
         return this.exception;
     }
 
-    public void getDetails(StringBuilder debug1) {
+    public void getDetails(StringBuilder sb) {
         if (!(this.uncategorizedStackTrace != null && this.uncategorizedStackTrace.length > 0 || this.details.isEmpty())) {
             this.uncategorizedStackTrace = (StackTraceElement[])ArrayUtils.subarray((Object[])this.details.get(0).getStacktrace(), (int)0, (int)1);
         }
         if (this.uncategorizedStackTrace != null && this.uncategorizedStackTrace.length > 0) {
-            debug1.append("-- Head --\n");
-            debug1.append("Thread: ").append(Thread.currentThread().getName()).append("\n");
-            debug1.append("Stacktrace:\n");
-            for (StackTraceElement debug5 : this.uncategorizedStackTrace) {
-                debug1.append("\t").append("at ").append(debug5);
-                debug1.append("\n");
+            sb.append("-- Head --\n");
+            sb.append("Thread: ").append(Thread.currentThread().getName()).append("\n");
+            sb.append("Stacktrace:\n");
+            for (StackTraceElement element : this.uncategorizedStackTrace) {
+                sb.append("\t").append("at ").append(element);
+                sb.append("\n");
             }
-            debug1.append("\n");
+            sb.append("\n");
         }
-        for (CrashReportCategory debug3 : this.details) {
-            debug3.getDetails(debug1);
-            debug1.append("\n\n");
+        for (CrashReportCategory category : this.details) {
+            category.getDetails(sb);
+            sb.append("\n\n");
         }
-        this.systemDetails.getDetails(debug1);
+        this.systemDetails.getDetails(sb);
     }
 
     /*
@@ -106,55 +116,53 @@ public class CrashReport {
      */
     public String getExceptionMessage() {
         String string;
-        StringWriter debug1 = null;
-        PrintWriter debug2 = null;
-        Throwable debug3 = this.exception;
-        if (debug3.getMessage() == null) {
-            if (debug3 instanceof NullPointerException) {
-                debug3 = new NullPointerException(this.title);
-            } else if (debug3 instanceof StackOverflowError) {
-                debug3 = new StackOverflowError(this.title);
-            } else if (debug3 instanceof OutOfMemoryError) {
-                debug3 = new OutOfMemoryError(this.title);
+        StringWriter stringWriter = null;
+        PrintWriter printWriter = null;
+        Throwable throwable = this.exception;
+        if (throwable.getMessage() == null) {
+            if (throwable instanceof NullPointerException) {
+                throwable = new NullPointerException(this.title);
+            } else if (throwable instanceof StackOverflowError) {
+                throwable = new StackOverflowError(this.title);
+            } else if (throwable instanceof OutOfMemoryError) {
+                throwable = new OutOfMemoryError(this.title);
             }
-            debug3.setStackTrace(this.exception.getStackTrace());
+            throwable.setStackTrace(this.exception.getStackTrace());
         }
         try {
-            debug1 = new StringWriter();
-            debug2 = new PrintWriter(debug1);
-            debug3.printStackTrace(debug2);
-            string = debug1.toString();
+            stringWriter = new StringWriter();
+            printWriter = new PrintWriter(stringWriter);
+            throwable.printStackTrace(printWriter);
+            string = stringWriter.toString();
         }
-        catch (Throwable throwable) {
-            IOUtils.closeQuietly((Writer)debug1);
-            IOUtils.closeQuietly(debug2);
-            throw throwable;
+        catch (Throwable ex) {
+            IOUtils.closeQuietly((Writer)stringWriter);
+            IOUtils.closeQuietly(printWriter);
+            throw ex;
         }
-        IOUtils.closeQuietly((Writer)debug1);
-        IOUtils.closeQuietly((Writer)debug2);
+        IOUtils.closeQuietly((Writer)stringWriter);
+        IOUtils.closeQuietly((Writer)printWriter);
         return string;
     }
 
     public String getFriendlyReport() {
-        StringBuilder debug1 = new StringBuilder();
-        debug1.append("---- Minecraft Crash Report ----\n");
-        debug1.append("// ");
-        debug1.append(CrashReport.getErrorComment());
-        debug1.append("\n\n");
-        debug1.append("Time: ");
-        debug1.append(new SimpleDateFormat().format(new Date()));
-        debug1.append("\n");
-        debug1.append("Description: ");
-        debug1.append(this.title);
-        debug1.append("\n\n");
-        debug1.append(this.getExceptionMessage());
-        debug1.append("\n\nA detailed walkthrough of the error, its code path and all known details is as follows:\n");
-        for (int debug2 = 0; debug2 < 87; ++debug2) {
-            debug1.append("-");
-        }
-        debug1.append("\n\n");
-        this.getDetails(debug1);
-        return debug1.toString();
+        StringBuilder sb = new StringBuilder();
+        sb.append("---- Minecraft Crash Report ----\n");
+        sb.append("// ");
+        sb.append(CrashReport.getErrorComment());
+        sb.append("\n\n");
+        sb.append("Time: ");
+        sb.append(new SimpleDateFormat().format(new Date()));
+        sb.append("\n");
+        sb.append("Description: ");
+        sb.append(this.title);
+        sb.append("\n\n");
+        sb.append(this.getExceptionMessage());
+        sb.append("\n\nA detailed walkthrough of the error, its code path and all known details is as follows:\n");
+        for (int i = 0; i < 87; ++i) sb.append("-");
+        sb.append("\n\n");
+        this.getDetails(sb);
+        return sb.toString();
     }
 
     public File getSaveFile() {
@@ -164,94 +172,92 @@ public class CrashReport {
     /*
      * WARNING - Removed try catching itself - possible behaviour change.
      */
-    public boolean saveToFile(File debug1) {
-        boolean bl;
+    public boolean saveToFile(File file) {
+        boolean saved;
         if (this.saveFile != null) {
             return false;
         }
-        if (debug1.getParentFile() != null) {
-            debug1.getParentFile().mkdirs();
+        if (file.getParentFile() != null) {
+            file.getParentFile().mkdirs();
         }
-        OutputStreamWriter debug2 = null;
+        OutputStreamWriter outputStreamWriter = null;
         try {
-            debug2 = new OutputStreamWriter((OutputStream)new FileOutputStream(debug1), StandardCharsets.UTF_8);
-            debug2.write(this.getFriendlyReport());
-            this.saveFile = debug1;
-            bl = true;
+            outputStreamWriter = new OutputStreamWriter((OutputStream)new FileOutputStream(file), StandardCharsets.UTF_8);
+            outputStreamWriter.write(this.getFriendlyReport());
+            this.saveFile = file;
+            saved = true;
         }
         catch (Throwable debug3) {
-            boolean bl2;
             try {
-                LOGGER.error("Could not save crash report to {}", (Object)debug1, (Object)debug3);
-                bl2 = false;
+                LOGGER.error("Could not save crash report to {}", (Object)file, (Object)debug3);
+                saved = false;
             }
             catch (Throwable throwable) {
-                IOUtils.closeQuietly(debug2);
+                IOUtils.closeQuietly(outputStreamWriter);
                 throw throwable;
             }
-            IOUtils.closeQuietly((Writer)debug2);
-            return bl2;
+            IOUtils.closeQuietly((Writer)outputStreamWriter);
+            return saved;
         }
-        IOUtils.closeQuietly((Writer)debug2);
-        return bl;
+        IOUtils.closeQuietly((Writer)outputStreamWriter);
+        return saved;
     }
 
     public CrashReportCategory getSystemDetails() {
         return this.systemDetails;
     }
 
-    public CrashReportCategory addCategory(String debug1) {
-        return this.addCategory(debug1, 1);
+    public CrashReportCategory addCategory(String title) {
+        return this.addCategory(title, 1);
     }
 
-    public CrashReportCategory addCategory(String debug1, int debug2) {
-        CrashReportCategory debug3 = new CrashReportCategory(this, debug1);
+    public CrashReportCategory addCategory(String title, int debug2) {
+        CrashReportCategory category = new CrashReportCategory(this, title);
         if (this.trackingStackTrace) {
-            int debug4 = debug3.fillInStackTrace(debug2);
-            StackTraceElement[] debug5 = this.exception.getStackTrace();
-            StackTraceElement debug6 = null;
-            StackTraceElement debug7 = null;
-            int debug8 = debug5.length - debug4;
-            if (debug8 < 0) {
-                System.out.println("Negative index in crash report handler (" + debug5.length + "/" + debug4 + ")");
+            int l = category.fillInStackTrace(debug2);
+            StackTraceElement[] elements = this.exception.getStackTrace();
+            StackTraceElement el1 = null;
+            StackTraceElement el2 = null;
+            int index = elements.length - l;
+            if (index < 0) {
+                System.out.println("Negative index in crash report handler (" + elements.length + "/" + l + ")");
             }
-            if (debug5 != null && 0 <= debug8 && debug8 < debug5.length) {
-                debug6 = debug5[debug8];
-                if (debug5.length + 1 - debug4 < debug5.length) {
-                    debug7 = debug5[debug5.length + 1 - debug4];
+            if (elements != null && 0 <= index && index < elements.length) {
+                el1 = elements[index];
+                if (elements.length + 1 - l < elements.length) {
+                    el2 = elements[elements.length + 1 - l];
                 }
             }
-            this.trackingStackTrace = debug3.validateStackTrace(debug6, debug7);
-            if (debug4 > 0 && !this.details.isEmpty()) {
+            this.trackingStackTrace = category.validateStackTrace(el1, el2);
+            if (l > 0 && !this.details.isEmpty()) {
                 CrashReportCategory debug9 = this.details.get(this.details.size() - 1);
-                debug9.trimStacktrace(debug4);
-            } else if (debug5 != null && debug5.length >= debug4 && 0 <= debug8 && debug8 < debug5.length) {
-                this.uncategorizedStackTrace = new StackTraceElement[debug8];
-                System.arraycopy(debug5, 0, this.uncategorizedStackTrace, 0, this.uncategorizedStackTrace.length);
+                debug9.trimStacktrace(l);
+            } else if (elements != null && elements.length >= l && 0 <= index && index < elements.length) {
+                this.uncategorizedStackTrace = new StackTraceElement[index];
+                System.arraycopy(elements, 0, this.uncategorizedStackTrace, 0, this.uncategorizedStackTrace.length);
             } else {
                 this.trackingStackTrace = false;
             }
         }
-        this.details.add(debug3);
-        return debug3;
+        this.details.add(category);
+        return category;
     }
 
     private static String getErrorComment() {
-        String[] debug0 = new String[]{"Who set us up the TNT?", "Everything's going to plan. No, really, that was supposed to happen.", "Uh... Did I do that?", "Oops.", "Why did you do that?", "I feel sad now :(", "My bad.", "I'm sorry, Dave.", "I let you down. Sorry :(", "On the bright side, I bought you a teddy bear!", "Daisy, daisy...", "Oh - I know what I did wrong!", "Hey, that tickles! Hehehe!", "I blame Dinnerbone.", "You should try our sister game, Minceraft!", "Don't be sad. I'll do better next time, I promise!", "Don't be sad, have a hug! <3", "I just don't know what went wrong :(", "Shall we play a game?", "Quite honestly, I wouldn't worry myself about that.", "I bet Cylons wouldn't have this problem.", "Sorry :(", "Surprise! Haha. Well, this is awkward.", "Would you like a cupcake?", "Hi. I'm Minecraft, and I'm a crashaholic.", "Ooh. Shiny.", "This doesn't make any sense!", "Why is it breaking :(", "Don't do that.", "Ouch. That hurt :(", "You're mean.", "This is a token for 1 free hug. Redeem at your nearest Mojangsta: [~~HUG~~]", "There are four lights!", "But it works on my machine."}; // MagmaCube - decompile fix
+        String[] messages = new String[]{"Who set us up the TNT?", "Everything's going to plan. No, really, that was supposed to happen.", "Uh... Did I do that?", "Oops.", "Why did you do that?", "I feel sad now :(", "My bad.", "I'm sorry, Dave.", "I let you down. Sorry :(", "On the bright side, I bought you a teddy bear!", "Daisy, daisy...", "Oh - I know what I did wrong!", "Hey, that tickles! Hehehe!", "I blame Dinnerbone.", "You should try our sister game, Minceraft!", "Don't be sad. I'll do better next time, I promise!", "Don't be sad, have a hug! <3", "I just don't know what went wrong :(", "Shall we play a game?", "Quite honestly, I wouldn't worry myself about that.", "I bet Cylons wouldn't have this problem.", "Sorry :(", "Surprise! Haha. Well, this is awkward.", "Would you like a cupcake?", "Hi. I'm Minecraft, and I'm a crashaholic.", "Ooh. Shiny.", "This doesn't make any sense!", "Why is it breaking :(", "Don't do that.", "Ouch. That hurt :(", "You're mean.", "This is a token for 1 free hug. Redeem at your nearest Mojangsta: [~~HUG~~]", "There are four lights!", "But it works on my machine."}; // MagmaCube - decompile fix
         try {
-            return debug0[(int)(Util.getNanos() % (long)debug0.length)];
+            return messages[(int)(Util.getNanos() % (long)messages.length)];
         }
-        catch (Throwable debug1) {
+        catch (Throwable ex) {
             return "Witty comment unavailable :(";
         }
     }
 
-    public static CrashReport forThrowable(Throwable debug0, String debug1) {
-        while (debug0 instanceof CompletionException && debug0.getCause() != null) {
-            debug0 = debug0.getCause();
+    public static CrashReport forThrowable(Throwable throwable, String title) {
+        while (throwable instanceof CompletionException && throwable.getCause() != null) {
+            throwable = throwable.getCause();
         }
-        CrashReport debug2 = debug0 instanceof ReportedException ? ((ReportedException)debug0).getReport() : new CrashReport(debug1, debug0);
-        return debug2;
+        return throwable instanceof ReportedException ? ((ReportedException)throwable).getReport() : new CrashReport(title, throwable);
     }
 
     public static void preload() {
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 8338f6972672a87c0c40336c217501571bbdfa90..d60623fe7cecec3442afaec42e7f527256aff039 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -119,10 +119,10 @@ public class Util {
         return Instant.now().toEpochMilli();
     }
 
-    private static ExecutorService makeExecutor(String debug0) {
+    private static ExecutorService makeExecutor(String name) {
         int debug12 = Mth.clamp(Runtime.getRuntime().availableProcessors() - 1, 1, 7);
-        Object debug2 = debug12 <= 0 ? MoreExecutors.newDirectExecutorService() : new ForkJoinPool(debug12, debug1 -> {
-            ForkJoinWorkerThread debug2l = new ForkJoinWorkerThread(debug1){ // MagmaCube - decompile fix
+        ExecutorService executorService = debug12 <= 0 ? MoreExecutors.newDirectExecutorService() : new ForkJoinPool(debug12, debug1 -> {
+            ForkJoinWorkerThread workerThread = new ForkJoinWorkerThread(debug1){ // MagmaCube - decompile fix
 
                 @Override
                 protected void onTermination(Throwable debug1) {
@@ -134,10 +134,10 @@ public class Util {
                     super.onTermination(debug1);
                 }
             };
-            debug2l.setName("Worker-" + debug0 + "-" + WORKER_COUNT.getAndIncrement()); // MagmaCube - decompile fix
-            return debug2l; // MagmaCube - decompile fix
+            workerThread.setName("Worker-" + name + "-" + WORKER_COUNT.getAndIncrement()); // MagmaCube - decompile fix
+            return workerThread; // MagmaCube - decompile fix
         }, Util::onThreadException, true);
-        return (ExecutorService) debug2; // MagmaCube - decompile fix
+        return (ExecutorService) executorService; // MagmaCube - decompile fix
     }
 
     public static Executor bootstrapExecutor() {
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index 83d5060bc399683d7aa2b4766df3f1d6982da397..ee70970b426562594e8e258e8e46184d6bdc21fa 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -180,6 +180,7 @@ import net.minecraft.core.Direction;
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
+import net.minecraft.data.BuiltinRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
@@ -256,6 +257,7 @@ import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelSettings;
 import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.biome.Biomes;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.RenderShape;
 import net.minecraft.world.level.block.entity.BlockEntity;
@@ -533,6 +535,9 @@ WindowEventHandler {
             }
         }), false));
         System.gc(); // MagmaCube - explicit gc to reduce memory usage
+        System.out.println("Basalt deltas: " + BuiltinRegistries.BIOME.get(Biomes.BASALT_DELTAS));
+        System.out.println("Basalt deltas: " + BuiltinRegistries.BIOME.get(Biomes.BASALT_DELTAS));
+        System.out.println("Basalt deltas 2: " + RegistryAccess.builtin().registryOrThrow(Registry.BIOME_REGISTRY).get(Biomes.BASALT_DELTAS));
     }
 
     public void updateTitle() {
@@ -562,9 +567,9 @@ WindowEventHandler {
         return debug1.toString();
     }
 
-    private SocialInteractionsService createSocialInteractions(YggdrasilAuthenticationService debug1, GameConfig debug2) {
+    private SocialInteractionsService createSocialInteractions(YggdrasilAuthenticationService authenticationService, GameConfig gameConfig) {
         try {
-            return debug1.createSocialInteractionsService(debug2.user.user.getAccessToken());
+            return authenticationService.createSocialInteractionsService(gameConfig.user.user.getAccessToken());
         }
         catch (AuthenticationException debug3) {
             LOGGER.error("Failed to verify authentication", (Throwable)debug3);
diff --git a/src/main/java/net/minecraft/client/NarratorStatus.java b/src/main/java/net/minecraft/client/NarratorStatus.java
index 60fbfcd0e79697ab0326fd4e8d3680043a219b76..f11ede4990b81f6fafede7d80f0cfb4505e2e7ad 100644
--- a/src/main/java/net/minecraft/client/NarratorStatus.java
+++ b/src/main/java/net/minecraft/client/NarratorStatus.java
@@ -17,9 +17,9 @@ public enum NarratorStatus
     private final int id;
     private final Component name;
     
-    private NarratorStatus(final int debug3, final String debug4) {
-        this.id = debug3;
-        this.name = new TranslatableComponent(debug4);
+    private NarratorStatus(final int id, final String message) {
+        this.id = id;
+        this.name = new TranslatableComponent(message);
     }
     
     public int getId() {
@@ -30,8 +30,8 @@ public enum NarratorStatus
         return this.name;
     }
     
-    public static NarratorStatus byId(final int debug0) {
-        return NarratorStatus.BY_ID[Mth.positiveModulo(debug0, NarratorStatus.BY_ID.length)];
+    public static NarratorStatus byId(final int id) {
+        return NarratorStatus.BY_ID[Mth.positiveModulo(id, NarratorStatus.BY_ID.length)];
     }
     
     static {
diff --git a/src/main/java/net/minecraft/client/Screenshot.java b/src/main/java/net/minecraft/client/Screenshot.java
index e9f5fa121ba816beafbb5ada50746e0d1b7ad0d1..25008777ca87d2ed55d876645d3a6aae23f9b3ba 100644
--- a/src/main/java/net/minecraft/client/Screenshot.java
+++ b/src/main/java/net/minecraft/client/Screenshot.java
@@ -37,39 +37,38 @@ public class Screenshot
         }
     }
     
-    private static void _grab(final File debug0, @Nullable final String debug1, final int debug2, final int debug3, final RenderTarget debug4, final Consumer<Component> debug5) {
-        final NativeImage debug6 = takeScreenshot(debug2, debug3, debug4);
-        final File debug7 = new File(debug0, "screenshots");
-        debug7.mkdir();
-        final File debug8; // MagmaCube - decompile fix
-        if (debug1 == null) {
-            debug8 = getFile(debug7); // MagmaCube - decompile fix
+    private static void _grab(final File rootFolder, @Nullable final String name, final int width, final int height, final RenderTarget target, final Consumer<Component> debug5) {
+        final NativeImage nativeImage = takeScreenshot(width, height, target);
+        final File directory = new File(rootFolder, "screenshots");
+        directory.mkdir();
+        final File file; // MagmaCube - decompile fix
+        if (name == null) {
+            file = getFile(directory); // MagmaCube - decompile fix
         }
         else {
-            debug8 = new File(debug7, debug1); // MagmaCube - decompile fix
+            file = new File(directory, name); // MagmaCube - decompile fix
         }
         Util.ioPool().execute(() -> {
             try {
-                debug6.writeToFile(debug8); // MagmaCube - decompile fix
-                Component debug9 = new TextComponent(debug8.getName()).withStyle(ChatFormatting.UNDERLINE).withStyle(debug1l -> debug1l.withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_FILE, debug8.getAbsolutePath()))); // MagmaCube - decompile fix
-                new TranslatableComponent("screenshot.success", new Object[] { debug9 });
-                debug5.accept(debug9); // MagmaCube - decompile fix
+                nativeImage.writeToFile(file); // MagmaCube - decompile fix
+                Component component = new TextComponent(file.getName()).withStyle(ChatFormatting.UNDERLINE).withStyle(style -> style.withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_FILE, file.getAbsolutePath()))); // MagmaCube - decompile fix
+                debug5.accept(new TranslatableComponent("screenshot.success", component)); // MagmaCube - decompile fix
             }
             catch (Exception debug10) {
                 Screenshot.LOGGER.warn("Couldn't save screenshot", (Throwable)debug10);
-                debug5.accept(new TranslatableComponent("screenshot.failure", new Object[] { debug10.getMessage() })); // MagmaCube - decompile fix
+                debug5.accept(new TranslatableComponent("screenshot.failure", debug10.getMessage())); // MagmaCube - decompile fix
             }
             finally {
-                debug6.close(); // MagmaCube - decompile fix
+                nativeImage.close(); // MagmaCube - decompile fix
             }
         });
     }
     
-    public static NativeImage takeScreenshot(int debug0, int debug1, final RenderTarget debug2) {
-        debug0 = debug2.width;
-        debug1 = debug2.height;
-        final NativeImage debug3 = new NativeImage(debug0, debug1, false);
-        RenderSystem.bindTexture(debug2.getColorTextureId());
+    public static NativeImage takeScreenshot(int width, int height, final RenderTarget target) {
+        width = target.width;
+        height = target.height;
+        final NativeImage debug3 = new NativeImage(width, height, false);
+        RenderSystem.bindTexture(target.getColorTextureId());
         debug3.downloadTexture(0, true);
         debug3.flipY();
         return debug3;
diff --git a/src/main/java/net/minecraft/client/Timer.java b/src/main/java/net/minecraft/client/Timer.java
index 7d1b72892d4aa85ab7be43bb5b72347aa1b0365e..1824b12d266068b1e4615530fca94d37b1fee37f 100644
--- a/src/main/java/net/minecraft/client/Timer.java
+++ b/src/main/java/net/minecraft/client/Timer.java
@@ -7,14 +7,14 @@ public class Timer
     private long lastMs;
     private final float msPerTick;
     
-    public Timer(final float debug1, final long debug2) {
+    public Timer(final float debug1, final long ms) {
         this.msPerTick = 1000.0f / debug1;
-        this.lastMs = debug2;
+        this.lastMs = ms;
     }
     
-    public int advanceTime(final long debug1) {
-        this.tickDelta = (debug1 - this.lastMs) / this.msPerTick;
-        this.lastMs = debug1;
+    public int advanceTime(final long ms) {
+        this.tickDelta = (ms - this.lastMs) / this.msPerTick;
+        this.lastMs = ms;
         this.partialTick += this.tickDelta;
         final int debug2 = (int)this.partialTick;
         this.partialTick -= debug2;
diff --git a/src/main/java/net/minecraft/client/gui/screens/social/PlayerEntry.java b/src/main/java/net/minecraft/client/gui/screens/social/PlayerEntry.java
index b1497f4bad67def796b30bd41604c39bdd2efc44..f4fc39059df8aa7fe92b199acce527c912abb60b 100644
--- a/src/main/java/net/minecraft/client/gui/screens/social/PlayerEntry.java
+++ b/src/main/java/net/minecraft/client/gui/screens/social/PlayerEntry.java
@@ -99,7 +99,7 @@ extends ContainerObjectSelectionList.Entry<PlayerEntry> {
             };
             this.showButton.visible = debug62.isHidden(debug32);
             this.hideButton.visible = !this.showButton.visible;
-            this.children = ImmutableList.of((Object)this.hideButton, (Object)this.showButton);
+            this.children = ImmutableList.of(this.hideButton, this.showButton); // MagmaCube - decompile fix
         } else {
             this.children = ImmutableList.of();
         }
diff --git a/src/main/java/net/minecraft/client/gui/screens/social/SocialInteractionsScreen.java b/src/main/java/net/minecraft/client/gui/screens/social/SocialInteractionsScreen.java
index dd75a4c2140eb74fad43b6c8c7cbf5e3ce0b48ab..bb5e10ec44385a54febdab0d8ed99f1178e84173 100644
--- a/src/main/java/net/minecraft/client/gui/screens/social/SocialInteractionsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/social/SocialInteractionsScreen.java
@@ -139,7 +139,7 @@ extends Screen {
     }
 
     private void showPage(Page debug1) {
-        Object debug2;
+        Collection<UUID> debug2; // MagmaCube - decompile fix
         this.page = debug1;
         this.allButton.setMessage(TAB_ALL);
         this.hiddenButton.setMessage(TAB_HIDDEN);
diff --git a/src/main/java/net/minecraft/client/main/Main.java b/src/main/java/net/minecraft/client/main/Main.java
index f738f17fd110394a8fc3760960507a76cd6ca438..7669f9303ba57b2629d18b284fe22e829f808eda 100644
--- a/src/main/java/net/minecraft/client/main/Main.java
+++ b/src/main/java/net/minecraft/client/main/Main.java
@@ -56,189 +56,187 @@ public class Main {
     /*
      * WARNING - Removed try catching itself - possible behaviour change.
      */
-    public static void main(String[] debug0) {
-        Thread debug57;
-        Minecraft debug56;
-        OptionParser debug1 = new OptionParser();
-        debug1.allowsUnrecognizedOptions();
-        debug1.accepts("demo");
-        debug1.accepts("disableMultiplayer");
-        debug1.accepts("disableChat");
-        debug1.accepts("fullscreen");
-        debug1.accepts("checkGlErrors");
-        ArgumentAcceptingOptionSpec debug2 = debug1.accepts("server").withRequiredArg();
-        ArgumentAcceptingOptionSpec debug3 = debug1.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(25565, new Integer[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug4 = debug1.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File("."), new File[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug5 = debug1.accepts("assetsDir").withRequiredArg().ofType(File.class);
-        ArgumentAcceptingOptionSpec debug6 = debug1.accepts("resourcePackDir").withRequiredArg().ofType(File.class);
-        ArgumentAcceptingOptionSpec debug7 = debug1.accepts("dataPackDir").withRequiredArg().ofType(File.class);
-        ArgumentAcceptingOptionSpec debug8 = debug1.accepts("proxyHost").withRequiredArg();
-        ArgumentAcceptingOptionSpec debug9 = debug1.accepts("proxyPort").withRequiredArg().defaultsTo("8080", new String[0]).ofType(Integer.class); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug10 = debug1.accepts("proxyUser").withRequiredArg();
-        ArgumentAcceptingOptionSpec debug11 = debug1.accepts("proxyPass").withRequiredArg();
-        ArgumentAcceptingOptionSpec debug12 = debug1.accepts("username").withRequiredArg().defaultsTo(("Player" + Util.getMillis() % 1000L), new String[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug13 = debug1.accepts("uuid").withRequiredArg();
-        ArgumentAcceptingOptionSpec debug14 = debug1.accepts("accessToken").withRequiredArg().required();
-        ArgumentAcceptingOptionSpec debug15 = debug1.accepts("version").withRequiredArg().required();
-        ArgumentAcceptingOptionSpec debug16 = debug1.accepts("width").withRequiredArg().ofType(Integer.class).defaultsTo(854, new Integer[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug17 = debug1.accepts("height").withRequiredArg().ofType(Integer.class).defaultsTo(480, new Integer[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug18 = debug1.accepts("fullscreenWidth").withRequiredArg().ofType(Integer.class);
-        ArgumentAcceptingOptionSpec debug19 = debug1.accepts("fullscreenHeight").withRequiredArg().ofType(Integer.class);
-        ArgumentAcceptingOptionSpec debug20 = debug1.accepts("userProperties").withRequiredArg().defaultsTo("{}", new String[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug21 = debug1.accepts("profileProperties").withRequiredArg().defaultsTo("{}", new String[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug22 = debug1.accepts("assetIndex").withRequiredArg();
-        ArgumentAcceptingOptionSpec debug23 = debug1.accepts("userType").withRequiredArg().defaultsTo("legacy", new String[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug24 = debug1.accepts("versionType").withRequiredArg().defaultsTo("release", new String[0]); // MagmaCube - decompile fix
-        NonOptionArgumentSpec debug25 = debug1.nonOptions();
-        OptionSet debug26 = debug1.parse(debug0);
-        List debug27 = debug26.valuesOf((OptionSpec)debug25);
-        if (!debug27.isEmpty()) {
-            System.out.println("Completely ignored arguments: " + debug27);
+    public static void main(String[] args) {
+        Thread gameThread;
+        Minecraft minecraft;
+        OptionParser parser = new OptionParser();
+        parser.allowsUnrecognizedOptions();
+        parser.accepts("demo");
+        parser.accepts("disableMultiplayer");
+        parser.accepts("disableChat");
+        parser.accepts("fullscreen");
+        parser.accepts("checkGlErrors");
+        ArgumentAcceptingOptionSpec server = parser.accepts("server").withRequiredArg();
+        ArgumentAcceptingOptionSpec port = parser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(25565, new Integer[0]); // MagmaCube - decompile fix
+        ArgumentAcceptingOptionSpec gameDir = parser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File("."), new File[0]); // MagmaCube - decompile fix
+        ArgumentAcceptingOptionSpec assetsDir = parser.accepts("assetsDir").withRequiredArg().ofType(File.class);
+        ArgumentAcceptingOptionSpec resourcePackDir = parser.accepts("resourcePackDir").withRequiredArg().ofType(File.class);
+        ArgumentAcceptingOptionSpec dataPackDir = parser.accepts("dataPackDir").withRequiredArg().ofType(File.class);
+        ArgumentAcceptingOptionSpec proxyHost = parser.accepts("proxyHost").withRequiredArg();
+        ArgumentAcceptingOptionSpec proxyPort = parser.accepts("proxyPort").withRequiredArg().defaultsTo("8080", new String[0]).ofType(Integer.class); // MagmaCube - decompile fix
+        ArgumentAcceptingOptionSpec proxyUser = parser.accepts("proxyUser").withRequiredArg();
+        ArgumentAcceptingOptionSpec proxyPass = parser.accepts("proxyPass").withRequiredArg();
+        ArgumentAcceptingOptionSpec username = parser.accepts("username").withRequiredArg().defaultsTo(("Player" + Util.getMillis() % 1000L), new String[0]); // MagmaCube - decompile fix
+        ArgumentAcceptingOptionSpec uuid = parser.accepts("uuid").withRequiredArg();
+        ArgumentAcceptingOptionSpec accessToken = parser.accepts("accessToken").withRequiredArg().required();
+        ArgumentAcceptingOptionSpec version = parser.accepts("version").withRequiredArg().required();
+        ArgumentAcceptingOptionSpec width = parser.accepts("width").withRequiredArg().ofType(Integer.class).defaultsTo(854, new Integer[0]); // MagmaCube - decompile fix
+        ArgumentAcceptingOptionSpec height = parser.accepts("height").withRequiredArg().ofType(Integer.class).defaultsTo(480, new Integer[0]); // MagmaCube - decompile fix
+        ArgumentAcceptingOptionSpec fullscreenWidth = parser.accepts("fullscreenWidth").withRequiredArg().ofType(Integer.class);
+        ArgumentAcceptingOptionSpec fullscreenHeight = parser.accepts("fullscreenHeight").withRequiredArg().ofType(Integer.class);
+        ArgumentAcceptingOptionSpec userProperties = parser.accepts("userProperties").withRequiredArg().defaultsTo("{}", new String[0]); // MagmaCube - decompile fix
+        ArgumentAcceptingOptionSpec profileProperties = parser.accepts("profileProperties").withRequiredArg().defaultsTo("{}", new String[0]); // MagmaCube - decompile fix
+        ArgumentAcceptingOptionSpec assetIndex = parser.accepts("assetIndex").withRequiredArg();
+        ArgumentAcceptingOptionSpec userType = parser.accepts("userType").withRequiredArg().defaultsTo("legacy", new String[0]); // MagmaCube - decompile fix
+        ArgumentAcceptingOptionSpec versionType = parser.accepts("versionType").withRequiredArg().defaultsTo("release", new String[0]); // MagmaCube - decompile fix
+        NonOptionArgumentSpec nonOptionArgumentSpec = parser.nonOptions();
+        OptionSet optionSet = parser.parse(args);
+        List nonOptions = optionSet.valuesOf((OptionSpec)nonOptionArgumentSpec);
+        if (!nonOptions.isEmpty()) {
+            System.out.println("Completely ignored arguments: " + nonOptions);
         }
-        String debug28 = (String)Main.parseArgument(debug26, debug8);
-        Proxy debug29 = Proxy.NO_PROXY;
-        if (debug28 != null) {
+        String proxyAddr = (String)Main.parseArgument(optionSet, proxyHost);
+        Proxy proxy = Proxy.NO_PROXY;
+        if (proxyAddr != null) {
             try {
-                debug29 = new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(debug28, (int)((Integer)Main.parseArgument(debug26, debug9))));
+                proxy = new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(proxyAddr, (int)((Integer)Main.parseArgument(optionSet, proxyPort))));
             }
             catch (Exception exception) {
                 // empty catch block
             }
         }
-        final String debug30 = (String)Main.parseArgument(debug26, debug10);
-        final String debug31 = (String)Main.parseArgument(debug26, debug11);
-        if (!debug29.equals(Proxy.NO_PROXY) && Main.stringHasValue(debug30) && Main.stringHasValue(debug31)) {
+        final String proxyUserName = (String)Main.parseArgument(optionSet, proxyUser);
+        final String proxyPassword = (String)Main.parseArgument(optionSet, proxyPass);
+        if (!proxy.equals(Proxy.NO_PROXY) && Main.stringHasValue(proxyUserName) && Main.stringHasValue(proxyPassword)) {
             Authenticator.setDefault(new Authenticator(){
 
                 @Override
                 protected PasswordAuthentication getPasswordAuthentication() {
-                    return new PasswordAuthentication(debug30, debug31.toCharArray());
+                    return new PasswordAuthentication(proxyUserName, proxyPassword.toCharArray());
                 }
             });
         }
-        int debug32 = (Integer)Main.parseArgument(debug26, debug16);
-        int debug33 = (Integer)Main.parseArgument(debug26, debug17);
-        OptionalInt debug34 = Main.ofNullable((Integer)Main.parseArgument(debug26, debug18));
-        OptionalInt debug35 = Main.ofNullable((Integer)Main.parseArgument(debug26, debug19));
-        boolean debug36 = debug26.has("fullscreen");
-        boolean debug37 = debug26.has("demo");
-        boolean debug38 = debug26.has("disableMultiplayer");
-        boolean debug39 = debug26.has("disableChat");
-        String debug40 = (String)Main.parseArgument(debug26, debug15);
-        Gson debug41 = new GsonBuilder().registerTypeAdapter(PropertyMap.class, new PropertyMap.Serializer()).create(); // MagmaCube - decompile fix
-        PropertyMap debug42 = GsonHelper.fromJson(debug41, (String)Main.parseArgument(debug26, debug20), PropertyMap.class);
-        PropertyMap debug43 = GsonHelper.fromJson(debug41, (String)Main.parseArgument(debug26, debug21), PropertyMap.class);
-        String debug44 = (String)Main.parseArgument(debug26, debug24);
-        File debug45 = (File)Main.parseArgument(debug26, debug4);
-        File debug46 = debug26.has((OptionSpec)debug5) ? (File)Main.parseArgument(debug26, debug5) : new File(debug45, "assets/");
-        File debug47 = debug26.has((OptionSpec)debug6) ? (File)Main.parseArgument(debug26, debug6) : new File(debug45, "resourcepacks/");
-        String debug48 = debug26.has((OptionSpec)debug13) ? (String)debug13.value(debug26) : Player.createPlayerUUID((String)debug12.value(debug26)).toString();
-        String debug49 = debug26.has((OptionSpec)debug22) ? (String)debug22.value(debug26) : null;
-        String debug50 = (String)Main.parseArgument(debug26, debug2);
-        Integer debug51 = (Integer)Main.parseArgument(debug26, debug3);
+        int iWidth = (Integer)Main.parseArgument(optionSet, width);
+        int iHeight = (Integer)Main.parseArgument(optionSet, height);
+        OptionalInt fullscrWidth = Main.ofNullable((Integer)Main.parseArgument(optionSet, fullscreenWidth));
+        OptionalInt fullscrHeight = Main.ofNullable((Integer)Main.parseArgument(optionSet, fullscreenHeight));
+        boolean fullscreen = optionSet.has("fullscreen");
+        boolean demo = optionSet.has("demo");
+        boolean disableMultiplayer = optionSet.has("disableMultiplayer");
+        boolean disableChat = optionSet.has("disableChat");
+        String versionString = (String)Main.parseArgument(optionSet, version);
+        Gson properties = new GsonBuilder().registerTypeAdapter(PropertyMap.class, new PropertyMap.Serializer()).create(); // MagmaCube - decompile fix
+        PropertyMap userProp = GsonHelper.fromJson(properties, (String)Main.parseArgument(optionSet, userProperties), PropertyMap.class);
+        PropertyMap profileProp = GsonHelper.fromJson(properties, (String)Main.parseArgument(optionSet, profileProperties), PropertyMap.class);
+        String verType = (String)Main.parseArgument(optionSet, versionType);
+        File gameDirectory = (File)Main.parseArgument(optionSet, gameDir);
+        File assetsDirectory = optionSet.has((OptionSpec)assetsDir) ? (File)Main.parseArgument(optionSet, assetsDir) : new File(gameDirectory, "assets/");
+        File resourcePackDirectory = optionSet.has((OptionSpec)resourcePackDir) ? (File)Main.parseArgument(optionSet, resourcePackDir) : new File(gameDirectory, "resourcepacks/");
+        String playerUUID = optionSet.has((OptionSpec)uuid) ? (String)uuid.value(optionSet) : Player.createPlayerUUID((String)username.value(optionSet)).toString();
+        String assetIndexValue = optionSet.has((OptionSpec)assetIndex) ? (String)assetIndex.value(optionSet) : null;
+        String serverAddress = (String)Main.parseArgument(optionSet, server);
+        Integer serverPort = (Integer)Main.parseArgument(optionSet, port);
         CrashReport.preload();
         Bootstrap.bootStrap();
         Bootstrap.validate();
         Util.startTimerHackThread();
-        User debug52 = new User((String)debug12.value(debug26), debug48, (String)debug14.value(debug26), (String)debug23.value(debug26));
-        GameConfig debug53 = new GameConfig(new GameConfig.UserData(debug52, debug42, debug43, debug29), new DisplayData(debug32, debug33, debug34, debug35, debug36), new GameConfig.FolderData(debug45, debug47, debug46, debug49), new GameConfig.GameData(debug37, debug40, debug44, debug38, debug39), new GameConfig.ServerData(debug50, debug51));
-        Thread debug54 = new Thread("Client Shutdown Thread"){
-
+        User user = new User((String)username.value(optionSet), playerUUID, (String)accessToken.value(optionSet), (String)userType.value(optionSet));
+        GameConfig gameConfig = new GameConfig(new GameConfig.UserData(user, userProp, profileProp, proxy), new DisplayData(iWidth, iHeight, fullscrWidth, fullscrHeight, fullscreen), new GameConfig.FolderData(gameDirectory, resourcePackDirectory, assetsDirectory, assetIndexValue), new GameConfig.GameData(demo, versionString, verType, disableMultiplayer, disableChat), new GameConfig.ServerData(serverAddress, serverPort));
+        Thread clientShutdownThread = new Thread("Client Shutdown Thread"){
             @Override
             public void run() {
-                Minecraft debug1 = Minecraft.getInstance();
-                if (debug1 == null) {
+                Minecraft minecraft = Minecraft.getInstance();
+                if (minecraft == null) {
                     return;
                 }
-                IntegratedServer debug2 = debug1.getSingleplayerServer();
-                if (debug2 != null) {
-                    debug2.halt(true);
+                IntegratedServer integratedServer = minecraft.getSingleplayerServer();
+                if (integratedServer != null) {
+                    integratedServer.halt(true);
                 }
             }
         };
-        debug54.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
-        Runtime.getRuntime().addShutdownHook(debug54);
-        RenderPipeline debug55 = new RenderPipeline();
+        clientShutdownThread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
+        Runtime.getRuntime().addShutdownHook(clientShutdownThread);
+        RenderPipeline renderPipeline = new RenderPipeline();
         try {
             Thread.currentThread().setName("Render thread");
             RenderSystem.initRenderThread();
             RenderSystem.beginInitialization();
-            debug56 = new Minecraft(debug53);
+            minecraft = new Minecraft(gameConfig);
             RenderSystem.finishInitialization();
         }
-        catch (SilentInitException debug572) {
-            LOGGER.warn("Failed to create window: ", (Throwable)debug572);
+        catch (SilentInitException ex) {
+            LOGGER.warn("Failed to create window: ", (Throwable)ex);
             return;
         }
-        catch (Throwable debug573) {
-            CrashReport debug58 = CrashReport.forThrowable(debug573, "Initializing game");
-            debug58.addCategory("Initialization");
-            Minecraft.fillReport(null, debug53.game.launchVersion, null, debug58);
-            Minecraft.crash(debug58);
+        catch (Throwable ex) {
+            CrashReport crashReport = CrashReport.forThrowable(ex, "Initializing game");
+            crashReport.addCategory("Initialization");
+            Minecraft.fillReport(null, gameConfig.game.launchVersion, null, crashReport);
+            Minecraft.crash(crashReport);
             return;
         }
-        if (debug56.renderOnThread()) {
-            debug57 = new Thread("Game thread"){
+        if (minecraft.renderOnThread()) {
+            gameThread = new Thread("Game thread"){
 
                 @Override
                 public void run() {
                     try {
                         RenderSystem.initGameThread(true);
-                        debug56.run();
+                        minecraft.run();
                     }
-                    catch (Throwable debug1) {
-                        LOGGER.error("Exception in client thread", debug1);
+                    catch (Throwable ex) {
+                        LOGGER.error("Exception in client thread", ex);
                     }
                 }
             };
-            debug57.start();
-            while (debug56.isRunning()) {
+            gameThread.start();
+            while (minecraft.isRunning()) {
             }
         } else {
-            debug57 = null;
+            gameThread = null;
             try {
                 RenderSystem.initGameThread(false);
-                debug56.run();
+                minecraft.run();
             }
-            catch (Throwable debug58) {
-                LOGGER.error("Unhandled game exception", debug58);
+            catch (Throwable ex) {
+                LOGGER.error("Unhandled game exception", ex);
             }
         }
         try {
-            debug56.stop();
-            if (debug57 != null) {
-                debug57.join();
+            minecraft.stop();
+            if (gameThread != null) {
+                gameThread.join();
             }
         }
-        catch (InterruptedException debug58) {
-            LOGGER.error("Exception during client thread shutdown", (Throwable)debug58);
+        catch (InterruptedException ex) {
+            LOGGER.error("Exception during client thread shutdown", (Throwable)ex);
         }
         finally {
-            debug56.destroy();
+            minecraft.destroy();
         }
     }
 
-    private static OptionalInt ofNullable(@Nullable Integer debug0) {
-        return debug0 != null ? OptionalInt.of(debug0) : OptionalInt.empty();
+    private static OptionalInt ofNullable(@Nullable Integer integer) {
+        return integer != null ? OptionalInt.of(integer) : OptionalInt.empty();
     }
 
     @Nullable
-    private static <T> T parseArgument(OptionSet debug0, OptionSpec<T> debug1) {
+    private static <T> T parseArgument(OptionSet optionSet, OptionSpec<T> optionSpec) {
         try {
-            return (T)debug0.valueOf(debug1);
+            return optionSet.valueOf(optionSpec);
         }
-        catch (Throwable debug2) {
-            ArgumentAcceptingOptionSpec debug3;
-            List debug4;
-            if (debug1 instanceof ArgumentAcceptingOptionSpec && !(debug4 = (debug3 = (ArgumentAcceptingOptionSpec)debug1).defaultValues()).isEmpty()) {
-                return (T)debug4.get(0);
+        catch (Throwable ex) {
+            List<T> debug4;
+            if (optionSpec instanceof ArgumentAcceptingOptionSpec && !(debug4 = ((ArgumentAcceptingOptionSpec<T>)optionSpec).defaultValues()).isEmpty()) {
+                return debug4.get(0);
             }
-            throw debug2;
+            throw ex;
         }
     }
 
-    private static boolean stringHasValue(@Nullable String debug0) {
-        return debug0 != null && !debug0.isEmpty();
+    private static boolean stringHasValue(@Nullable String s) {
+        return s != null && !s.isEmpty();
     }
 
     static {
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java
index 814761f6a4fe4ab19a732c8db01568e00233de6b..90808e66793c289072ebd97038d4d449ca8aff38 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java
@@ -65,50 +65,50 @@ implements ClientLoginPacketListener {
     private final Connection connection;
     private GameProfile localGameProfile;
 
-    public ClientHandshakePacketListenerImpl(Connection debug1, Minecraft debug2, @Nullable Screen debug3, Consumer<Component> debug4) {
-        this.connection = debug1;
-        this.minecraft = debug2;
-        this.parent = debug3;
-        this.updateStatus = debug4;
+    public ClientHandshakePacketListenerImpl(Connection connection, Minecraft minecraft, @Nullable Screen screen, Consumer<Component> consumer) {
+        this.connection = connection;
+        this.minecraft = minecraft;
+        this.parent = screen;
+        this.updateStatus = consumer;
     }
 
     @Override
-    public void handleHello(ClientboundHelloPacket debug1) {
-        ServerboundKeyPacket debug5;
-        Cipher debug3;
-        Cipher debug2;
-        String debug4;
+    public void handleHello(ClientboundHelloPacket packet) {
+        ServerboundKeyPacket keyPacket;
+        Cipher prepender;
+        Cipher splitter;
+        String serverId;
         try {
-            SecretKey debug6 = Crypt.generateSecretKey();
-            PublicKey debug7 = debug1.getPublicKey();
-            debug4 = new BigInteger(Crypt.digestData(debug1.getServerId(), debug7, debug6)).toString(16);
-            debug2 = Crypt.getCipher(2, debug6);
-            debug3 = Crypt.getCipher(1, debug6);
-            debug5 = new ServerboundKeyPacket(debug6, debug7, debug1.getNonce());
+            SecretKey secretKey = Crypt.generateSecretKey();
+            PublicKey publicKey = packet.getPublicKey();
+            serverId = new BigInteger(Crypt.digestData(packet.getServerId(), publicKey, secretKey)).toString(16);
+            splitter = Crypt.getCipher(2, secretKey);
+            prepender = Crypt.getCipher(1, secretKey);
+            keyPacket = new ServerboundKeyPacket(secretKey, publicKey, packet.getNonce());
         }
-        catch (CryptException debug6) {
-            throw new IllegalStateException("Protocol error", debug6);
+        catch (CryptException ex) {
+            throw new IllegalStateException("Protocol error", ex);
         }
         this.updateStatus.accept(new TranslatableComponent("connect.authorizing"));
         HttpUtil.DOWNLOAD_EXECUTOR.submit(() -> {
-            Component debug5l = this.authenticateServer(debug4);
-            if (debug5l != null) {
+            Component component = this.authenticateServer(serverId);
+            if (component != null) {
                 if (this.minecraft.getCurrentServer() != null && this.minecraft.getCurrentServer().isLan()) {
-                    LOGGER.warn(debug5l.getString());
+                    LOGGER.warn(component.getString());
                 } else {
-                    this.connection.disconnect(debug5l);
+                    this.connection.disconnect(component);
                     return;
                 }
             }
             this.updateStatus.accept(new TranslatableComponent("connect.encrypting"));
-            this.connection.send(debug5, (GenericFutureListener<? extends Future<? super Void>>)((GenericFutureListener)debug3l -> this.connection.setEncryptionKey(debug2, debug3)));
+            this.connection.send(keyPacket, debug3l -> this.connection.setEncryptionKey(splitter, prepender));
         });
     }
 
     @Nullable
-    private Component authenticateServer(String debug1) {
+    private Component authenticateServer(String serverId) {
         try {
-            this.getMinecraftSessionService().joinServer(this.minecraft.getUser().getGameProfile(), this.minecraft.getUser().getAccessToken(), debug1);
+            this.getMinecraftSessionService().joinServer(this.minecraft.getUser().getGameProfile(), this.minecraft.getUser().getAccessToken(), serverId);
         }
         catch (AuthenticationUnavailableException debug2) {
             return new TranslatableComponent("disconnect.loginFailedInfo", new TranslatableComponent("disconnect.loginFailedInfo.serversUnavailable"));
@@ -130,19 +130,19 @@ implements ClientLoginPacketListener {
     }
 
     @Override
-    public void handleGameProfile(ClientboundGameProfilePacket debug1) {
+    public void handleGameProfile(ClientboundGameProfilePacket packet) {
         this.updateStatus.accept(new TranslatableComponent("connect.joining"));
-        this.localGameProfile = debug1.getGameProfile();
+        this.localGameProfile = packet.getGameProfile();
         this.connection.setProtocol(ConnectionProtocol.PLAY);
         this.connection.setListener(new ClientPacketListener(this.minecraft, this.parent, this.connection, this.localGameProfile));
     }
 
     @Override
-    public void onDisconnect(Component debug1) {
+    public void onDisconnect(Component component) {
         if (this.parent != null && this.parent instanceof RealmsScreen) {
-            this.minecraft.setScreen(new DisconnectedRealmsScreen(this.parent, CommonComponents.CONNECT_FAILED, debug1));
+            this.minecraft.setScreen(new DisconnectedRealmsScreen(this.parent, CommonComponents.CONNECT_FAILED, component));
         } else {
-            this.minecraft.setScreen(new DisconnectedScreen(this.parent, CommonComponents.CONNECT_FAILED, debug1));
+            this.minecraft.setScreen(new DisconnectedScreen(this.parent, CommonComponents.CONNECT_FAILED, component));
         }
     }
 
@@ -152,21 +152,21 @@ implements ClientLoginPacketListener {
     }
 
     @Override
-    public void handleDisconnect(ClientboundLoginDisconnectPacket debug1) {
-        this.connection.disconnect(debug1.getReason());
+    public void handleDisconnect(ClientboundLoginDisconnectPacket packet) {
+        this.connection.disconnect(packet.getReason());
     }
 
     @Override
-    public void handleCompression(ClientboundLoginCompressionPacket debug1) {
+    public void handleCompression(ClientboundLoginCompressionPacket packet) {
         if (!this.connection.isMemoryConnection()) {
-            this.connection.setupCompression(debug1.getCompressionThreshold());
+            this.connection.setupCompression(packet.getCompressionThreshold());
         }
     }
 
     @Override
-    public void handleCustomQuery(ClientboundCustomQueryPacket debug1) {
+    public void handleCustomQuery(ClientboundCustomQueryPacket packet) {
         this.updateStatus.accept(new TranslatableComponent("connect.negotiating"));
-        this.connection.send(new ServerboundCustomQueryPacket(debug1.getTransactionId(), null));
+        this.connection.send(new ServerboundCustomQueryPacket(packet.getTransactionId(), null));
     }
 }
 
diff --git a/src/main/java/net/minecraft/core/DefaultedRegistry.java b/src/main/java/net/minecraft/core/DefaultedRegistry.java
index 0d5d4d2c6eb7e67c6cc7aab520562cdec609b8f7..afb98d4344365ef137127d4398d4f6c6f0c5a652 100644
--- a/src/main/java/net/minecraft/core/DefaultedRegistry.java
+++ b/src/main/java/net/minecraft/core/DefaultedRegistry.java
@@ -19,11 +19,11 @@ public class DefaultedRegistry<T> extends MappedRegistry<T>
     }
     
     @Override
-    public <V extends T> V registerMapping(final int debug1, final ResourceKey<T> debug2, final V debug3, final Lifecycle debug4) {
-        if (this.defaultKey.equals(debug2.location())) {
-            this.defaultValue = debug3;
+    public <V extends T> V registerMapping(final int id, final ResourceKey<T> resourceKey, final V instance, final Lifecycle lifecycle) {
+        if (this.defaultKey.equals(resourceKey.location())) {
+            this.defaultValue = instance;
         }
-        return super.registerMapping(debug1, debug2, debug3, debug4);
+        return super.registerMapping(id, resourceKey, instance, lifecycle);
     }
     
     @Override
@@ -41,14 +41,14 @@ public class DefaultedRegistry<T> extends MappedRegistry<T>
     
     @Nonnull
     @Override
-    public T get(@Nullable final ResourceLocation debug1) {
-        final T debug2 = super.get(debug1);
+    public T get(@Nullable final ResourceLocation resourceLocation) {
+        final T debug2 = super.get(resourceLocation);
         return (debug2 == null) ? this.defaultValue : debug2;
     }
     
     @Override
-    public Optional<T> getOptional(@Nullable final ResourceLocation debug1) {
-        return Optional.ofNullable(super.get(debug1));
+    public Optional<T> getOptional(@Nullable final ResourceLocation resourceLocation) {
+        return Optional.ofNullable(super.get(resourceLocation));
     }
     
     @Nonnull
diff --git a/src/main/java/net/minecraft/core/MappedRegistry.java b/src/main/java/net/minecraft/core/MappedRegistry.java
index 780596140bac8bb521c844097c20cda42f984aa4..332d18bfa81607a43485163667f8aee86b91318f 100644
--- a/src/main/java/net/minecraft/core/MappedRegistry.java
+++ b/src/main/java/net/minecraft/core/MappedRegistry.java
@@ -59,61 +59,61 @@ public class MappedRegistry<T> extends WritableRegistry<T>
         this.elementsLifecycle = debug2;
     }
     
-    public static <T> MapCodec<RegistryEntry<T>> withNameAndId(final ResourceKey<? extends Registry<T>> debug0, final MapCodec<T> debug1) {
-        return (MapCodec<RegistryEntry<T>>)RecordCodecBuilder.<RegistryEntry<T>>mapCodec(debug2 -> debug2.group(ResourceLocation.CODEC.xmap(ResourceKey.elementKey(debug0), ResourceKey::location).fieldOf("name").forGetter(debug0l -> debug0l.key), Codec.INT.fieldOf("id").forGetter(debug0l -> debug0l.id), debug1.forGetter(debug0l -> debug0l.value)).apply(debug2, RegistryEntry::new)); // MagmaCube - decompile fix
+    public static <T> MapCodec<RegistryEntry<T>> withNameAndId(final ResourceKey<? extends Registry<T>> registryKey, final MapCodec<T> mapCodec) {
+        return RecordCodecBuilder.mapCodec(builder -> builder.group(ResourceLocation.CODEC.xmap(ResourceKey.elementKey(registryKey), ResourceKey::location).fieldOf("name").forGetter(debug0l -> debug0l.key), Codec.INT.fieldOf("id").forGetter(debug0l -> debug0l.id), mapCodec.forGetter(debug0l -> debug0l.value)).apply(builder, RegistryEntry::new)); // MagmaCube - decompile fix
     }
     
     @Override
-    public <V extends T> V registerMapping(final int debug1, final ResourceKey<T> debug2, final V debug3, final Lifecycle debug4) {
-        return this.registerMapping(debug1, debug2, debug3, debug4, true);
+    public <V extends T> V registerMapping(final int id, final ResourceKey<T> resourceKey, final V instance, final Lifecycle lifecycle) {
+        return this.registerMapping(id, resourceKey, instance, lifecycle, true);
     }
     
-    private <V extends T> V registerMapping(final int debug1, final ResourceKey<T> debug2, final V debug3, final Lifecycle debug4, final boolean debug5) {
-        Validate.notNull((Object)debug2);
-        Validate.notNull((Object)debug3);
-        this.byId.size(Math.max(this.byId.size(), debug1 + 1));
-        this.byId.set(debug1, debug3); // MagmaCube - decompile fix
-        this.toId.put(debug3, debug1); // MagmaCube - decompile fix
+    private <V extends T> V registerMapping(final int id, final ResourceKey<T> registryKey, final V instance, final Lifecycle lifecycle, final boolean logDuplicateKeys) {
+        Validate.notNull((Object)registryKey);
+        Validate.notNull((Object)instance);
+        this.byId.size(Math.max(this.byId.size(), id + 1));
+        this.byId.set(id, instance); // MagmaCube - decompile fix
+        this.toId.put(instance, id); // MagmaCube - decompile fix
         this.randomCache = null;
-        if (debug5 && this.keyStorage.containsKey((Object)debug2)) {
-            MappedRegistry.LOGGER.debug("Adding duplicate key '{}' to registry", (Object)debug2);
+        if (logDuplicateKeys && this.keyStorage.containsKey((Object)registryKey)) {
+            MappedRegistry.LOGGER.debug("Adding duplicate key '{}' to registry", (Object)registryKey);
         }
-        if (this.storage.containsValue(debug3)) { // MagmaCube - decompile fix
-            MappedRegistry.LOGGER.error("Adding duplicate value '{}' to registry", (Object)debug3);
+        if (this.storage.containsValue(instance)) { // MagmaCube - decompile fix
+            MappedRegistry.LOGGER.error("Adding duplicate value '{}' to registry", (Object)instance);
         }
-        this.storage.put(debug2.location(), debug3); // MagmaCube - decompile fix
-        this.keyStorage.put(debug2, debug3); // MagmaCube - decompile fix
-        this.lifecycles.put(debug3, debug4);
-        this.elementsLifecycle = this.elementsLifecycle.add(debug4);
-        if (this.nextId <= debug1) {
-            this.nextId = debug1 + 1;
+        this.storage.put(registryKey.location(), instance); // MagmaCube - decompile fix
+        this.keyStorage.put(registryKey, instance); // MagmaCube - decompile fix
+        this.lifecycles.put(instance, lifecycle);
+        this.elementsLifecycle = this.elementsLifecycle.add(lifecycle);
+        if (this.nextId <= id) {
+            this.nextId = id + 1;
         }
-        return debug3;
+        return instance;
     }
     
     @Override
-    public <V extends T> V register(final ResourceKey<T> debug1, final V debug2, final Lifecycle debug3) {
-        return this.registerMapping(this.nextId, debug1, debug2, debug3);
+    public <V extends T> V register(final ResourceKey<T> resourceKey, final V instance, final Lifecycle lifecycle) {
+        return this.registerMapping(this.nextId, resourceKey, instance, lifecycle);
     }
     
     @Override
-    public <V extends T> V registerOrOverride(final OptionalInt debug1, final ResourceKey<T> debug2, final V debug3, final Lifecycle debug4) {
-        Validate.notNull((Object)debug2);
-        Validate.notNull((Object)debug3);
-        final T debug5 = (T)this.keyStorage.get((Object)debug2);
+    public <V extends T> V registerOrOverride(final OptionalInt optionalInt, final ResourceKey<T> resourceKey, final V value, final Lifecycle lifecycle) {
+        Validate.notNull((Object) resourceKey);
+        Validate.notNull((Object) value);
+        final T debug5 = (T)this.keyStorage.get((Object) resourceKey);
         int debug6;
         if (debug5 == null) {
-            debug6 = (debug1.isPresent() ? debug1.getAsInt() : this.nextId);
+            debug6 = (optionalInt.isPresent() ? optionalInt.getAsInt() : this.nextId);
         }
         else {
             debug6 = this.toId.getInt((Object)debug5);
-            if (debug1.isPresent() && debug1.getAsInt() != debug6) {
+            if (optionalInt.isPresent() && optionalInt.getAsInt() != debug6) {
                 throw new IllegalStateException("ID mismatch");
             }
             this.toId.removeInt((Object)debug5);
             this.lifecycles.remove(debug5);
         }
-        return this.registerMapping(debug6, debug2, debug3, debug4, false);
+        return this.registerMapping(debug6, resourceKey, value, lifecycle, false);
     }
     
     @Nullable
@@ -134,8 +134,8 @@ public class MappedRegistry<T> extends WritableRegistry<T>
     
     @Nullable
     @Override
-    public T get(@Nullable final ResourceKey<T> debug1) {
-        return (T)this.keyStorage.get((Object)debug1);
+    public T get(@Nullable final ResourceKey<T> resourceKey) {
+        return (T)this.keyStorage.get((Object) resourceKey);
     }
     
     @Nullable
@@ -146,8 +146,8 @@ public class MappedRegistry<T> extends WritableRegistry<T>
         return (T)this.byId.get(debug1);
     }
     
-    public Lifecycle lifecycle(final T debug1) {
-        return this.lifecycles.get(debug1);
+    public Lifecycle lifecycle(final T input) {
+        return this.lifecycles.get(input);
     }
     
     @Override
@@ -161,8 +161,8 @@ public class MappedRegistry<T> extends WritableRegistry<T>
     
     @Nullable
     @Override
-    public T get(@Nullable final ResourceLocation debug1) {
-        return (T)this.storage.get((Object)debug1);
+    public T get(@Nullable final ResourceLocation resourceLocation) {
+        return (T)this.storage.get((Object) resourceLocation);
     }
     
     @Override
@@ -188,8 +188,8 @@ public class MappedRegistry<T> extends WritableRegistry<T>
     }
     
     @Override
-    public boolean containsKey(final ResourceLocation debug1) {
-        return this.storage.containsKey((Object)debug1);
+    public boolean containsKey(final ResourceLocation resourceLocation) {
+        return this.storage.containsKey((Object) resourceLocation);
     }
     
     public static <T> Codec<MappedRegistry<T>> networkCodec(final ResourceKey<? extends Registry<T>> debug0, final Lifecycle debug1, final Codec<T> debug2) {
diff --git a/src/main/java/net/minecraft/core/Registry.java b/src/main/java/net/minecraft/core/Registry.java
index b773fbee47ee5541a06041964e51db4c44639faf..f88a596415a582302090f4648daa8cfef2ce5a0f 100644
--- a/src/main/java/net/minecraft/core/Registry.java
+++ b/src/main/java/net/minecraft/core/Registry.java
@@ -322,30 +322,30 @@ IdMap<T> {
 
     @Override
     public abstract int getId(@Nullable T var1);
-    public final int getId(@Nullable Registry var1) { return getId((T) var1); } // MagmaCube - add method to avoid type checks
+    public final int getId(@Nullable Registry registry) { return getId((T) registry); } // MagmaCube - add method to hack around type checks
 
     @Nullable
-    public abstract T get(@Nullable ResourceKey<T> var1);
+    public abstract T get(@Nullable ResourceKey<T> resourceKey);
 
     @Nullable
-    public abstract T get(@Nullable ResourceLocation var1);
+    public abstract T get(@Nullable ResourceLocation resourceLocation);
 
-    protected abstract Lifecycle lifecycle(T var1);
+    protected abstract Lifecycle lifecycle(T input);
 
     public abstract Lifecycle elementsLifecycle();
 
-    public Optional<T> getOptional(@Nullable ResourceLocation debug1) {
-        return Optional.ofNullable(this.get(debug1));
+    public Optional<T> getOptional(@Nullable ResourceLocation resourceLocation) {
+        return Optional.ofNullable(this.get(resourceLocation));
     }
 
-    public Optional<T> getOptional(@Nullable ResourceKey<T> debug1) {
-        return Optional.ofNullable(this.get(debug1));
+    public Optional<T> getOptional(@Nullable ResourceKey<T> resourceKey) {
+        return Optional.ofNullable(this.get(resourceKey));
     }
 
-    public T getOrThrow(ResourceKey<T> debug1) {
-        T debug2 = this.get(debug1);
+    public T getOrThrow(ResourceKey<T> resourceKey) {
+        T debug2 = this.get(resourceKey);
         if (debug2 == null) {
-            throw new IllegalStateException("Missing: " + debug1);
+            throw new IllegalStateException("Missing: " + resourceKey); // todo: figure out why registry doesn't get and/or register
         }
         return debug2;
     }
@@ -358,25 +358,25 @@ IdMap<T> {
         return StreamSupport.stream(this.spliterator(), false);
     }
 
-    public abstract boolean containsKey(ResourceLocation var1);
+    public abstract boolean containsKey(ResourceLocation resourceLocation);
 
-    public static <T> T register(Registry<? super T> debug0, String debug1, T debug2) {
-        return Registry.register(debug0, new ResourceLocation(debug1), debug2);
+    public static <T> T register(Registry<? super T> registry, String location, T input) {
+        return Registry.register(registry, new ResourceLocation(location), input);
     }
 
-    public static <V, T extends V> T register(Registry<V> debug0, ResourceLocation debug1, T debug2) {
-        return (T) ((WritableRegistry)debug0).register(ResourceKey.create(debug0.key, debug1), debug2, Lifecycle.stable()); // MagmaCube - decompile fix
+    public static <V, T extends V> T register(Registry<V> registry, ResourceLocation resourceLocation, T input) {
+        return (T) ((WritableRegistry)registry).register(ResourceKey.create(registry.key, resourceLocation), input, Lifecycle.stable()); // MagmaCube - decompile fix
     }
 
-    public static <V, T extends V> T registerMapping(Registry<V> debug0, int debug1, String debug2, T debug3) {
-        return (T) ((WritableRegistry)debug0).registerMapping(debug1, ResourceKey.create(debug0.key, new ResourceLocation(debug2)), debug3, Lifecycle.stable()); // MagmaCube - decompile fix
+    public static <V, T extends V> T registerMapping(Registry<V> registry, int id, String location, T input) {
+        return (T) ((WritableRegistry)registry).registerMapping(id, ResourceKey.create(registry.key, new ResourceLocation(location)), input, Lifecycle.stable()); // MagmaCube - decompile fix
     }
 
     static {
         BuiltinRegistries.bootstrap();
-        LOADERS.forEach((debug0, debug1) -> { // MagmaCube - decompile fix
-            if (debug1.get() == null) {
-                LOGGER.error("Unable to bootstrap registry '{}'", debug0);
+        LOADERS.forEach((resourceLocation, supplier) -> { // MagmaCube - decompile fix
+            if (supplier.get() == null) {
+                LOGGER.error("Unable to bootstrap registry '{}'", resourceLocation);
             }
         });
         Registry.checkRegistry(WRITABLE_REGISTRY);
diff --git a/src/main/java/net/minecraft/core/RegistryAccess.java b/src/main/java/net/minecraft/core/RegistryAccess.java
index f94543b5ab1662d2ab3011590a7d5b0bfb8eba85..43d924ca37e8fcaa975b80fcacc399780ddea794 100644
--- a/src/main/java/net/minecraft/core/RegistryAccess.java
+++ b/src/main/java/net/minecraft/core/RegistryAccess.java
@@ -48,97 +48,97 @@ import org.apache.logging.log4j.Logger;
 
 public abstract class RegistryAccess {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final Map<ResourceKey<? extends Registry<?>>, RegistryData<?>> REGISTRIES = (Map)Util.make(() -> {
-        ImmutableMap.Builder debug0 = ImmutableMap.builder();
-        RegistryAccess.put(debug0, Registry.DIMENSION_TYPE_REGISTRY, DimensionType.DIRECT_CODEC, DimensionType.DIRECT_CODEC);
-        RegistryAccess.put(debug0, Registry.BIOME_REGISTRY, Biome.DIRECT_CODEC, Biome.NETWORK_CODEC);
-        RegistryAccess.put(debug0, Registry.CONFIGURED_SURFACE_BUILDER_REGISTRY, ConfiguredSurfaceBuilder.DIRECT_CODEC);
-        RegistryAccess.put(debug0, Registry.CONFIGURED_CARVER_REGISTRY, ConfiguredWorldCarver.DIRECT_CODEC);
-        RegistryAccess.put(debug0, Registry.CONFIGURED_FEATURE_REGISTRY, ConfiguredFeature.DIRECT_CODEC);
-        RegistryAccess.put(debug0, Registry.CONFIGURED_STRUCTURE_FEATURE_REGISTRY, ConfiguredStructureFeature.DIRECT_CODEC);
-        RegistryAccess.put(debug0, Registry.PROCESSOR_LIST_REGISTRY, StructureProcessorType.DIRECT_CODEC);
-        RegistryAccess.put(debug0, Registry.TEMPLATE_POOL_REGISTRY, StructureTemplatePool.DIRECT_CODEC);
-        RegistryAccess.put(debug0, Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, NoiseGeneratorSettings.DIRECT_CODEC);
-        return debug0.build();
+    private static final Map<ResourceKey<? extends Registry<?>>, RegistryData<?>> REGISTRIES = Util.make(() -> {
+        ImmutableMap.Builder<ResourceKey<? extends Registry<?>>, RegistryData<?>> builder = ImmutableMap.builder();
+        RegistryAccess.put(builder, Registry.DIMENSION_TYPE_REGISTRY, DimensionType.DIRECT_CODEC, DimensionType.DIRECT_CODEC);
+        RegistryAccess.put(builder, Registry.BIOME_REGISTRY, Biome.DIRECT_CODEC, Biome.NETWORK_CODEC);
+        RegistryAccess.put(builder, Registry.CONFIGURED_SURFACE_BUILDER_REGISTRY, ConfiguredSurfaceBuilder.DIRECT_CODEC);
+        RegistryAccess.put(builder, Registry.CONFIGURED_CARVER_REGISTRY, ConfiguredWorldCarver.DIRECT_CODEC);
+        RegistryAccess.put(builder, Registry.CONFIGURED_FEATURE_REGISTRY, ConfiguredFeature.DIRECT_CODEC);
+        RegistryAccess.put(builder, Registry.CONFIGURED_STRUCTURE_FEATURE_REGISTRY, ConfiguredStructureFeature.DIRECT_CODEC);
+        RegistryAccess.put(builder, Registry.PROCESSOR_LIST_REGISTRY, StructureProcessorType.DIRECT_CODEC);
+        RegistryAccess.put(builder, Registry.TEMPLATE_POOL_REGISTRY, StructureTemplatePool.DIRECT_CODEC);
+        RegistryAccess.put(builder, Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, NoiseGeneratorSettings.DIRECT_CODEC);
+        return builder.build();
     });
     private static final RegistryHolder BUILTIN = Util.make(() -> {
-        RegistryHolder debug02 = new RegistryHolder();
-        DimensionType.registerBuiltin(debug02);
-        REGISTRIES.keySet().stream().filter(debug0 -> !debug0.equals(Registry.DIMENSION_TYPE_REGISTRY)).forEach(debug1 -> RegistryAccess.copyBuiltin(debug02, debug1));
-        return debug02;
+        RegistryHolder registryHolder = new RegistryHolder();
+        DimensionType.registerBuiltin(registryHolder);
+        REGISTRIES.keySet().stream().filter(resourceKey -> !resourceKey.equals(Registry.DIMENSION_TYPE_REGISTRY)).forEach(resourceKey -> RegistryAccess.copyBuiltin(registryHolder, resourceKey));
+        return registryHolder;
     });
 
-    public abstract <E> Optional<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> var1);
+    public abstract <E> Optional<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> resourceKey);
 
-    public <E> WritableRegistry<E> registryOrThrow(ResourceKey<? extends Registry<E>> debug1) {
-        return this.registry(debug1).orElseThrow(() -> new IllegalStateException("Missing registry: " + debug1));
+    public <E> WritableRegistry<E> registryOrThrow(ResourceKey<? extends Registry<E>> resourceKey) {
+        return this.registry(resourceKey).orElseThrow(() -> new IllegalStateException("Missing registry: " + resourceKey));
     }
 
     public Registry<DimensionType> dimensionTypes() {
         return this.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
     }
 
-    private static <E> void put(ImmutableMap.Builder<ResourceKey<? extends Registry<?>>, RegistryData<?>> debug0, ResourceKey<? extends Registry<E>> debug1, Codec<E> debug2) {
-        debug0.put(debug1, new RegistryData<E>(debug1, debug2, null));
+    private static <E> void put(ImmutableMap.Builder<ResourceKey<? extends Registry<?>>, RegistryData<?>> registryDataBuilder, ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec) {
+        registryDataBuilder.put(resourceKey, new RegistryData<E>(resourceKey, codec, null));
     }
 
-    private static <E> void put(ImmutableMap.Builder<ResourceKey<? extends Registry<?>>, RegistryData<?>> debug0, ResourceKey<? extends Registry<E>> debug1, Codec<E> debug2, Codec<E> debug3) {
-        debug0.put(debug1, new RegistryData<E>(debug1, debug2, debug3));
+    private static <E> void put(ImmutableMap.Builder<ResourceKey<? extends Registry<?>>, RegistryData<?>> registryDataBuilder, ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec, Codec<E> networkCodec) {
+        registryDataBuilder.put(resourceKey, new RegistryData<E>(resourceKey, codec, networkCodec));
     }
 
     public static RegistryHolder builtin() {
-        RegistryHolder debug0 = new RegistryHolder();
-        RegistryReadOps.ResourceAccess.MemoryMap debug1 = new RegistryReadOps.ResourceAccess.MemoryMap();
-        for (RegistryData<?> debug3 : REGISTRIES.values()) {
-            RegistryAccess.addBuiltinElements(debug0, debug1, debug3);
+        RegistryHolder registryHolder = new RegistryHolder();
+        RegistryReadOps.ResourceAccess.MemoryMap memoryMap = new RegistryReadOps.ResourceAccess.MemoryMap();
+        for (RegistryData<?> registryData : REGISTRIES.values()) {
+            RegistryAccess.addBuiltinElements(registryHolder, memoryMap, registryData);
         }
-        RegistryReadOps.create(JsonOps.INSTANCE, debug1, debug0);
-        return debug0;
+        RegistryReadOps.create(JsonOps.INSTANCE, memoryMap, registryHolder);
+        return registryHolder;
     }
 
-    private static <E> void addBuiltinElements(RegistryHolder debug0, RegistryReadOps.ResourceAccess.MemoryMap debug1, RegistryData<E> debug2) {
-        ResourceKey<? extends Registry<E>> debug3 = debug2.key(); // MagmaCube - decompile fix
-        boolean debug4 = !debug3.equals(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY) && !debug3.equals(Registry.DIMENSION_TYPE_REGISTRY);
-        WritableRegistry<E> debug5 = BUILTIN.registryOrThrow(debug3);
-        WritableRegistry<E> debug6 = debug0.registryOrThrow(debug3);
-        for (Map.Entry<ResourceKey<E>, E> debug8 : debug5.entrySet()) { // MagmaCube - decompile fix
-            E debug9 = debug8.getValue(); // MagmaCube - decompile fix
-            if (debug4) {
-                debug1.add(BUILTIN, debug8.getKey(), debug2.codec(), debug5.getId(debug9), debug9, debug5.lifecycle(debug9));
+    private static <E> void addBuiltinElements(RegistryHolder registryHolder, RegistryReadOps.ResourceAccess.MemoryMap memoryMap, RegistryData<E> registryData) {
+        ResourceKey<? extends Registry<E>> resourceKey = registryData.key(); // MagmaCube - decompile fix
+        boolean addToMemoryMap = !resourceKey.equals(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY) && !resourceKey.equals(Registry.DIMENSION_TYPE_REGISTRY);
+        WritableRegistry<E> writableRegistry = BUILTIN.registryOrThrow(resourceKey);
+        WritableRegistry<E> objectRegistry = registryHolder.registryOrThrow(resourceKey);
+        for (Map.Entry<ResourceKey<E>, E> entry : writableRegistry.entrySet()) { // MagmaCube - decompile fix
+            E value = entry.getValue(); // MagmaCube - decompile fix
+            if (addToMemoryMap) {
+                memoryMap.add(BUILTIN, entry.getKey(), registryData.codec(), writableRegistry.getId(value), value, writableRegistry.lifecycle(value));
                 continue;
             }
-            debug6.registerMapping(debug5.getId(debug9), debug8.getKey(), debug9, debug5.lifecycle(debug9));
+            objectRegistry.registerMapping(writableRegistry.getId(value), entry.getKey(), value, writableRegistry.lifecycle(value));
         }
     }
 
-    private static <R extends Registry<?>> void copyBuiltin(RegistryHolder debug0, ResourceKey<R> debug1) {
-        Registry<R> debug2 = (Registry<R>) BuiltinRegistries.REGISTRY; // MagmaCube - decompile fix
-        Registry<?> debug3 = debug2.get(debug1);
-        if (debug3 == null) {
-            throw new IllegalStateException("Missing builtin registry: " + debug1);
+    private static <R extends Registry<?>> void copyBuiltin(RegistryHolder registryHolder, ResourceKey<R> resourceKey) {
+        Registry<R> registry = (Registry<R>) BuiltinRegistries.REGISTRY; // MagmaCube - decompile fix
+        Registry<?> objectRegistry = registry.get(resourceKey);
+        if (objectRegistry == null) {
+            throw new IllegalStateException("Missing builtin registry: " + resourceKey);
         }
-        RegistryAccess.copy(debug0, debug3);
+        RegistryAccess.copy(registryHolder, objectRegistry);
     }
 
-    private static <E> void copy(RegistryHolder debug0, Registry<E> debug1) {
-        WritableRegistry<E> debug2 = debug0.registry(debug1.key()).orElseThrow(() -> new IllegalStateException("Missing registry: " + debug1.key()));
-        for (Map.Entry<ResourceKey<E>, E> debug4 : debug1.entrySet()) {
-            E debug5 = debug4.getValue();
-            debug2.registerMapping(debug1.getId(debug5), debug4.getKey(), debug5, debug1.lifecycle(debug5));
+    private static <E> void copy(RegistryHolder registryHolder, Registry<E> registry) {
+        WritableRegistry<E> writableRegistry = registryHolder.registry(registry.key()).orElseThrow(() -> new IllegalStateException("Missing registry: " + registry.key()));
+        for (Map.Entry<ResourceKey<E>, E> entry : registry.entrySet()) {
+            E value = entry.getValue();
+            writableRegistry.registerMapping(registry.getId(value), entry.getKey(), value, registry.lifecycle(value));
         }
     }
 
-    public static void load(RegistryHolder debug0, RegistryReadOps<?> debug1) {
-        for (RegistryData<?> debug3 : REGISTRIES.values()) {
-            RegistryAccess.readRegistry(debug1, debug0, debug3);
+    public static void load(RegistryHolder holder, RegistryReadOps<?> readOps) {
+        for (RegistryData<?> registryData : REGISTRIES.values()) {
+            RegistryAccess.readRegistry(readOps, holder, registryData);
         }
     }
 
-    private static <E> void readRegistry(RegistryReadOps<?> debug02, RegistryHolder debug1, RegistryData<E> debug2) {
-        ResourceKey debug3 = debug2.key();
-        MappedRegistry debug4 = Optional.ofNullable(debug1.registries.get(debug3)).map(debug0 -> debug0).orElseThrow(() -> new IllegalStateException("Missing registry: " + debug3));
-        DataResult<MappedRegistry<E>> debug5 = debug02.decodeElements(debug4, debug2.key(), debug2.codec());
-        debug5.error().ifPresent(debug0 -> LOGGER.error("Error loading registry data: {}", (Object)debug0.message()));
+    private static <E> void readRegistry(RegistryReadOps<?> registryReadOps, RegistryHolder registryHolder, RegistryData<E> registryData) {
+        ResourceKey<?> resourceKey = registryData.key();
+        MappedRegistry<E> mappedRegistry = Optional.ofNullable((MappedRegistry<E>) registryHolder.registries.get(resourceKey)).map(registry -> registry).orElseThrow(() -> new IllegalStateException("Missing registry: " + resourceKey));
+        DataResult<MappedRegistry<E>> dataResult = registryReadOps.decodeElements(mappedRegistry, registryData.key(), registryData.codec());
+        dataResult.error().ifPresent(result -> LOGGER.error("Error loading registry data: {}", (Object)result.message()));
     }
 
     public static final class RegistryHolder
@@ -147,36 +147,36 @@ public abstract class RegistryAccess {
         private final Map<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> registries;
 
         private static <E> Codec<RegistryHolder> makeNetworkCodec() {
-            Codec<ResourceKey<? extends Registry<E>>> debug02 = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location); // MagmaCube - decompile fix
-            Codec<MappedRegistry<E>> debug1 = debug02.partialDispatch("type", debug0 -> DataResult.success(debug0.key()), debug0 -> RegistryHolder.getNetworkCodec(debug0).map(debug12 -> MappedRegistry.networkCodec(debug0, Lifecycle.experimental(), debug12))); // MagmaCube - decompile fix
-            UnboundedMapCodec debug2 = Codec.unboundedMap((Codec)debug02, (Codec)debug1);
-            return RegistryHolder.captureMap(debug2);
+            Codec<ResourceKey<? extends Registry<E>>> codec = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location); // MagmaCube - decompile fix
+            Codec<MappedRegistry<E>> mappedRegistryCodec = codec.partialDispatch("type", mappedRegistry -> DataResult.success(mappedRegistry.key()), resourceKey -> RegistryHolder.getNetworkCodec(resourceKey).map(registryCodec -> MappedRegistry.networkCodec(resourceKey, Lifecycle.experimental(), registryCodec))); // MagmaCube - decompile fix
+            UnboundedMapCodec<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> unboundedMapCodec = Codec.unboundedMap(codec, mappedRegistryCodec);
+            return RegistryHolder.captureMap(unboundedMapCodec);
         }
 
-        private static <K extends ResourceKey<? extends Registry<?>>, V extends MappedRegistry<?>> Codec<RegistryHolder> captureMap(UnboundedMapCodec<K, V> debug0) {
-            return debug0.xmap(RegistryHolder::new, debug02 -> (ImmutableMap)debug02.registries.entrySet().stream().filter(debug03 -> ((RegistryData)REGISTRIES.get(debug03.getKey())).sendToClient()).collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, Map.Entry::getValue))); // MagmaCube - decompile fix
+        private static <K extends ResourceKey<? extends Registry<?>>, V extends MappedRegistry<?>> Codec<RegistryHolder> captureMap(UnboundedMapCodec<K, V> unboundedMapCodec) {
+            return unboundedMapCodec.xmap(RegistryHolder::new, registryHolder -> ((java.util.Set<java.util.Map.Entry<K, V>>) (Object) registryHolder.registries.entrySet()).stream().filter(entry -> (REGISTRIES.get(entry.getKey())).sendToClient()).collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, Map.Entry::getValue))); // MagmaCube - decompile fix
         }
 
-        private static <E> DataResult<? extends Codec<E>> getNetworkCodec(ResourceKey<? extends Registry<E>> debug02) {
-            return (DataResult<? extends Codec<E>>) (Object) Optional.ofNullable(REGISTRIES.get(debug02)).map(debug0 -> debug0.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown or not serializable registry: " + debug02)); // MagmaCube - decompile fix
+        private static <E> DataResult<? extends Codec<E>> getNetworkCodec(ResourceKey<? extends Registry<E>> resourceKey) {
+            return (DataResult<? extends Codec<E>>) (Object) Optional.ofNullable(REGISTRIES.get(resourceKey)).map(registryData -> (Codec) registryData.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown or not serializable registry: " + resourceKey)); // MagmaCube - decompile fix
         }
 
         public RegistryHolder() {
             this(REGISTRIES.keySet().stream().collect(Collectors.toMap(Function.identity(), RegistryHolder::createRegistry)));
         }
 
-        private RegistryHolder(Map<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> debug1) {
-            this.registries = debug1;
+        private RegistryHolder(Map<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> map) {
+            this.registries = map;
         }
 
-        private static <E> MappedRegistry<?> createRegistry(ResourceKey<? extends Registry<?>> debug0) {
-            return new MappedRegistry(debug0, Lifecycle.stable());
+        private static <E> MappedRegistry<?> createRegistry(ResourceKey<? extends Registry<?>> resourceKey) {
+            return new MappedRegistry(resourceKey, Lifecycle.stable());
         }
 
         @Override
-        public <E> Optional<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> debug1) {
-            if (debug1.equals(Registry.BIOME_REGISTRY)) return (Optional) Optional.of(BuiltinRegistries.BIOME); // MagmaCube
-            return (Optional<WritableRegistry<E>>) (Object) Optional.ofNullable(this.registries.get(debug1)).map(debug0 -> debug0); // MagmaCube - decompile fix
+        public <E> Optional<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> resourceKey) {
+            //if (resourceKey.equals(Registry.BIOME_REGISTRY)) return Optional.of((WritableRegistry<E>) BuiltinRegistries.BIOME); // MagmaCube - todo: this is dirty way but it works like wtf
+            return Optional.ofNullable((WritableRegistry<E>) this.registries.get(resourceKey)).map(registry -> registry); // MagmaCube - decompile fix
         }
     }
 
@@ -186,10 +186,10 @@ public abstract class RegistryAccess {
         @Nullable
         private final Codec<E> networkCodec;
 
-        public RegistryData(ResourceKey<? extends Registry<E>> debug1, Codec<E> debug2, @Nullable Codec<E> debug3) {
-            this.key = debug1;
-            this.codec = debug2;
-            this.networkCodec = debug3;
+        public RegistryData(ResourceKey<? extends Registry<E>> key, Codec<E> codec, @Nullable Codec<E> networkCodec) {
+            this.key = key;
+            this.codec = codec;
+            this.networkCodec = networkCodec;
         }
 
         public ResourceKey<? extends Registry<E>> key() {
diff --git a/src/main/java/net/minecraft/core/WritableRegistry.java b/src/main/java/net/minecraft/core/WritableRegistry.java
index 2fc60ea6fb81815cc630765695dc50c9dbd2ffec..5d7f67800d553aad7c824b3fb88c04de8076c07a 100644
--- a/src/main/java/net/minecraft/core/WritableRegistry.java
+++ b/src/main/java/net/minecraft/core/WritableRegistry.java
@@ -6,13 +6,13 @@ import net.minecraft.resources.ResourceKey;
 
 public abstract class WritableRegistry<T> extends Registry<T>
 {
-    public WritableRegistry(final ResourceKey<? extends Registry<T>> debug1, final Lifecycle debug2) {
-        super(debug1, debug2);
+    public WritableRegistry(final ResourceKey<? extends Registry<T>> resourceKey, final Lifecycle lifecycle) {
+        super(resourceKey, lifecycle);
     }
     
-    public abstract <V extends T> V registerMapping(final int p0, final ResourceKey<T> p1, final V p2, final Lifecycle p3);
+    public abstract <V extends T> V registerMapping(final int id, final ResourceKey<T> resourceKey, final V instance, final Lifecycle lifecycle);
     
-    public abstract <V extends T> V register(final ResourceKey<T> p0, final V p1, final Lifecycle p2);
+    public abstract <V extends T> V register(final ResourceKey<T> resourceKey, final V instance, final Lifecycle lifecycle);
     
-    public abstract <V extends T> V registerOrOverride(final OptionalInt p0, final ResourceKey<T> p1, final V p2, final Lifecycle p3);
+    public abstract <V extends T> V registerOrOverride(final OptionalInt optionalInt, final ResourceKey<T> resourceKey, final V value, final Lifecycle lifecycle);
 }
diff --git a/src/main/java/net/minecraft/data/BuiltinRegistries.java b/src/main/java/net/minecraft/data/BuiltinRegistries.java
index 269c9e766895eaeab3543e3baef71a9f0be3dec9..8e56be673dd1408c7a320672129dd12a00892fc7 100644
--- a/src/main/java/net/minecraft/data/BuiltinRegistries.java
+++ b/src/main/java/net/minecraft/data/BuiltinRegistries.java
@@ -47,31 +47,31 @@ public class BuiltinRegistries
     public static final Registry<Biome> BIOME;
     public static final Registry<NoiseGeneratorSettings> NOISE_GENERATOR_SETTINGS;
     
-    private static <T> Registry<T> registerSimple(final ResourceKey<? extends Registry<T>> debug0, final Supplier<T> debug1) {
-        return registerSimple(debug0, Lifecycle.stable(), debug1);
+    private static <T> Registry<T> registerSimple(final ResourceKey<? extends Registry<T>> resourceKey, final Supplier<T> supplier) {
+        return registerSimple(resourceKey, Lifecycle.stable(), supplier);
     }
     
-    private static <T> Registry<T> registerSimple(final ResourceKey<? extends Registry<T>> debug0, final Lifecycle debug1, final Supplier<T> debug2) {
-        return internalRegister(debug0, new MappedRegistry<T>(debug0, debug1), debug2, debug1);
+    private static <T> Registry<T> registerSimple(final ResourceKey<? extends Registry<T>> resourceKey, final Lifecycle lifecycle, final Supplier<T> supplier) {
+        return internalRegister(resourceKey, new MappedRegistry<T>(resourceKey, lifecycle), supplier, lifecycle);
     }
     
-    private static <T, R extends WritableRegistry<T>> R internalRegister(final ResourceKey<? extends Registry<T>> debug0, final R debug1, final Supplier<T> debug2, final Lifecycle debug3) {
-        final ResourceLocation debug4 = debug0.location();
-        BuiltinRegistries.LOADERS.put(debug4, debug2);
-        final WritableRegistry<R> debug5 = (WritableRegistry<R>)BuiltinRegistries.WRITABLE_REGISTRY;
-        return debug5.register((ResourceKey<R>)debug0, debug1, debug3);
+    private static <T, R extends WritableRegistry<T>> R internalRegister(final ResourceKey<? extends Registry<T>> resourceKey, final R input, final Supplier<T> supplier, final Lifecycle lifecycle) {
+        final ResourceLocation resourceLocation = resourceKey.location();
+        BuiltinRegistries.LOADERS.put(resourceLocation, supplier);
+        final WritableRegistry<R> writableRegistry = (WritableRegistry<R>)BuiltinRegistries.WRITABLE_REGISTRY;
+        return writableRegistry.register((ResourceKey<R>)resourceKey, input, lifecycle);
     }
     
-    public static <T> T register(final Registry<? super T> debug0, final String debug1, final T debug2) {
-        return register(debug0, new ResourceLocation(debug1), debug2);
+    public static <T> T register(final Registry<? super T> registry, final String location, final T input) {
+        return register(registry, new ResourceLocation(location), input);
     }
     
-    public static <V, T extends V> T register(final Registry<V> debug0, final ResourceLocation debug1, final T debug2) {
-        return (T) ((WritableRegistry)debug0).register(ResourceKey.create((ResourceKey<? extends Registry<Object>>)debug0.key(), debug1), debug2, Lifecycle.stable()); // MagmaCube - decompile fix
+    public static <V, T extends V> T register(final Registry<V> registry, final ResourceLocation resourceLocation, final T input) {
+        return (T) ((WritableRegistry)registry).register(ResourceKey.create((ResourceKey<? extends Registry<Object>>) registry.key(), resourceLocation), input, Lifecycle.stable()); // MagmaCube - decompile fix
     }
     
-    public static <V, T extends V> T registerMapping(final Registry<V> debug0, final int debug1, final ResourceKey<V> debug2, final T debug3) {
-        return (T) ((WritableRegistry)debug0).registerMapping(debug1, debug2, debug3, Lifecycle.stable()); // MagmaCube - decompile fix
+    public static <V, T extends V> T registerMapping(final Registry<V> registry, final int id, final ResourceKey<V> resourceKey, final T input) {
+        return (T) ((WritableRegistry)registry).registerMapping(id, resourceKey, input, Lifecycle.stable()); // MagmaCube - decompile fix
     }
     
     public static void bootstrap() {
@@ -90,9 +90,9 @@ public class BuiltinRegistries
         TEMPLATE_POOL = registerSimple(Registry.TEMPLATE_POOL_REGISTRY, Pools::bootstrap);
         BIOME = registerSimple(Registry.BIOME_REGISTRY, () -> Biomes.PLAINS);
         NOISE_GENERATOR_SETTINGS = registerSimple(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, NoiseGeneratorSettings::bootstrap);
-        BuiltinRegistries.LOADERS.forEach((debug0, debug1) -> {
-            if (debug1.get() == null) {
-                BuiltinRegistries.LOGGER.error("Unable to bootstrap registry '{}'", (Object)debug0);
+        BuiltinRegistries.LOADERS.forEach((resourceLocation, supplier) -> {
+            if (supplier.get() == null) {
+                BuiltinRegistries.LOGGER.error("Unable to bootstrap registry '{}'", (Object)resourceLocation);
             }
             return;
         });
diff --git a/src/main/java/net/minecraft/data/worldgen/biome/Biomes.java b/src/main/java/net/minecraft/data/worldgen/biome/Biomes.java
index 9ce52bbaeabe7bd679dd7b32875ec44e2b236f10..8654af537f989a3d1f8bbad1521df94a3fc6ef99 100644
--- a/src/main/java/net/minecraft/data/worldgen/biome/Biomes.java
+++ b/src/main/java/net/minecraft/data/worldgen/biome/Biomes.java
@@ -7,101 +7,100 @@ import net.minecraft.world.level.biome.Biome;
 import net.minecraft.resources.ResourceKey;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 
-public abstract class Biomes
+import static net.minecraft.world.level.biome.Biomes.*;
+
+public abstract class Biomes // todo: figure out why basalt deltas is not registering
 {
-    private static final Int2ObjectMap<ResourceKey<Biome>> TO_NAME;
-    public static final Biome PLAINS;
-    public static final Biome THE_VOID;
+    private static final Int2ObjectMap<ResourceKey<Biome>> TO_NAME = new Int2ObjectArrayMap<>();
+    public static final Biome PLAINS = register(1, net.minecraft.world.level.biome.Biomes.PLAINS, VanillaBiomes.plainsBiome(false));
+    public static final Biome THE_VOID = register(127, net.minecraft.world.level.biome.Biomes.THE_VOID, VanillaBiomes.theVoidBiome());
     
-    private static Biome register(final int debug0, final ResourceKey<Biome> debug1, final Biome debug2) {
-        Biomes.TO_NAME.put(debug0, debug1); // MagmaCube - decompile fix
-        return BuiltinRegistries.registerMapping(BuiltinRegistries.BIOME, debug0, debug1, debug2);
+    private static Biome register(final int id, final ResourceKey<Biome> resourceKey, final Biome biome) {
+        Biomes.TO_NAME.put(id, resourceKey); // MagmaCube - decompile fix
+        return BuiltinRegistries.registerMapping(BuiltinRegistries.BIOME, id, resourceKey, biome);
     }
     
     public static ResourceKey<Biome> byId(final int debug0) {
-        return (ResourceKey<Biome>)Biomes.TO_NAME.get(debug0);
+        return Biomes.TO_NAME.get(debug0);
     }
     
     static {
-        TO_NAME = (Int2ObjectMap)new Int2ObjectArrayMap();
-        register(0, net.minecraft.world.level.biome.Biomes.OCEAN, VanillaBiomes.oceanBiome(false));
-        PLAINS = register(1, net.minecraft.world.level.biome.Biomes.PLAINS, VanillaBiomes.plainsBiome(false));
-        register(2, net.minecraft.world.level.biome.Biomes.DESERT, VanillaBiomes.desertBiome(0.125f, 0.05f, true, true, true));
-        register(3, net.minecraft.world.level.biome.Biomes.MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.MOUNTAIN, false));
-        register(4, net.minecraft.world.level.biome.Biomes.FOREST, VanillaBiomes.forestBiome(0.1f, 0.2f));
-        register(5, net.minecraft.world.level.biome.Biomes.TAIGA, VanillaBiomes.taigaBiome(0.2f, 0.2f, false, false, true, false));
-        register(6, net.minecraft.world.level.biome.Biomes.SWAMP, VanillaBiomes.swampBiome(-0.2f, 0.1f, false));
-        register(7, net.minecraft.world.level.biome.Biomes.RIVER, VanillaBiomes.riverBiome(-0.5f, 0.0f, 0.5f, 4159204, false));
-        register(8, net.minecraft.world.level.biome.Biomes.NETHER_WASTES, VanillaBiomes.netherWastesBiome());
-        register(9, net.minecraft.world.level.biome.Biomes.THE_END, VanillaBiomes.theEndBiome());
-        register(10, net.minecraft.world.level.biome.Biomes.FROZEN_OCEAN, VanillaBiomes.frozenOceanBiome(false));
-        register(11, net.minecraft.world.level.biome.Biomes.FROZEN_RIVER, VanillaBiomes.riverBiome(-0.5f, 0.0f, 0.0f, 3750089, true));
-        register(12, net.minecraft.world.level.biome.Biomes.SNOWY_TUNDRA, VanillaBiomes.tundraBiome(0.125f, 0.05f, false, false));
-        register(13, net.minecraft.world.level.biome.Biomes.SNOWY_MOUNTAINS, VanillaBiomes.tundraBiome(0.45f, 0.3f, false, true));
-        register(14, net.minecraft.world.level.biome.Biomes.MUSHROOM_FIELDS, VanillaBiomes.mushroomFieldsBiome(0.2f, 0.3f));
-        register(15, net.minecraft.world.level.biome.Biomes.MUSHROOM_FIELD_SHORE, VanillaBiomes.mushroomFieldsBiome(0.0f, 0.025f));
-        register(16, net.minecraft.world.level.biome.Biomes.BEACH, VanillaBiomes.beachBiome(0.0f, 0.025f, 0.8f, 0.4f, 4159204, false, false));
-        register(17, net.minecraft.world.level.biome.Biomes.DESERT_HILLS, VanillaBiomes.desertBiome(0.45f, 0.3f, false, true, false));
-        register(18, net.minecraft.world.level.biome.Biomes.WOODED_HILLS, VanillaBiomes.forestBiome(0.45f, 0.3f));
-        register(19, net.minecraft.world.level.biome.Biomes.TAIGA_HILLS, VanillaBiomes.taigaBiome(0.45f, 0.3f, false, false, false, false));
-        register(20, net.minecraft.world.level.biome.Biomes.MOUNTAIN_EDGE, VanillaBiomes.mountainBiome(0.8f, 0.3f, SurfaceBuilders.GRASS, true));
-        register(21, net.minecraft.world.level.biome.Biomes.JUNGLE, VanillaBiomes.jungleBiome());
-        register(22, net.minecraft.world.level.biome.Biomes.JUNGLE_HILLS, VanillaBiomes.jungleHillsBiome());
-        register(23, net.minecraft.world.level.biome.Biomes.JUNGLE_EDGE, VanillaBiomes.jungleEdgeBiome());
-        register(24, net.minecraft.world.level.biome.Biomes.DEEP_OCEAN, VanillaBiomes.oceanBiome(true));
-        register(25, net.minecraft.world.level.biome.Biomes.STONE_SHORE, VanillaBiomes.beachBiome(0.1f, 0.8f, 0.2f, 0.3f, 4159204, false, true));
-        register(26, net.minecraft.world.level.biome.Biomes.SNOWY_BEACH, VanillaBiomes.beachBiome(0.0f, 0.025f, 0.05f, 0.3f, 4020182, true, false));
-        register(27, net.minecraft.world.level.biome.Biomes.BIRCH_FOREST, VanillaBiomes.birchForestBiome(0.1f, 0.2f, false));
-        register(28, net.minecraft.world.level.biome.Biomes.BIRCH_FOREST_HILLS, VanillaBiomes.birchForestBiome(0.45f, 0.3f, false));
-        register(29, net.minecraft.world.level.biome.Biomes.DARK_FOREST, VanillaBiomes.darkForestBiome(0.1f, 0.2f, false));
-        register(30, net.minecraft.world.level.biome.Biomes.SNOWY_TAIGA, VanillaBiomes.taigaBiome(0.2f, 0.2f, true, false, false, true));
-        register(31, net.minecraft.world.level.biome.Biomes.SNOWY_TAIGA_HILLS, VanillaBiomes.taigaBiome(0.45f, 0.3f, true, false, false, false));
-        register(32, net.minecraft.world.level.biome.Biomes.GIANT_TREE_TAIGA, VanillaBiomes.giantTreeTaiga(0.2f, 0.2f, 0.3f, false));
-        register(33, net.minecraft.world.level.biome.Biomes.GIANT_TREE_TAIGA_HILLS, VanillaBiomes.giantTreeTaiga(0.45f, 0.3f, 0.3f, false));
-        register(34, net.minecraft.world.level.biome.Biomes.WOODED_MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.GRASS, true));
-        register(35, net.minecraft.world.level.biome.Biomes.SAVANNA, VanillaBiomes.savannaBiome(0.125f, 0.05f, 1.2f, false, false));
-        register(36, net.minecraft.world.level.biome.Biomes.SAVANNA_PLATEAU, VanillaBiomes.savanaPlateauBiome());
-        register(37, net.minecraft.world.level.biome.Biomes.BADLANDS, VanillaBiomes.badlandsBiome(0.1f, 0.2f, false));
-        register(38, net.minecraft.world.level.biome.Biomes.WOODED_BADLANDS_PLATEAU, VanillaBiomes.woodedBadlandsPlateauBiome(1.5f, 0.025f));
-        register(39, net.minecraft.world.level.biome.Biomes.BADLANDS_PLATEAU, VanillaBiomes.badlandsBiome(1.5f, 0.025f, true));
-        register(40, net.minecraft.world.level.biome.Biomes.SMALL_END_ISLANDS, VanillaBiomes.smallEndIslandsBiome());
-        register(41, net.minecraft.world.level.biome.Biomes.END_MIDLANDS, VanillaBiomes.endMidlandsBiome());
-        register(42, net.minecraft.world.level.biome.Biomes.END_HIGHLANDS, VanillaBiomes.endHighlandsBiome());
-        register(43, net.minecraft.world.level.biome.Biomes.END_BARRENS, VanillaBiomes.endBarrensBiome());
-        register(44, net.minecraft.world.level.biome.Biomes.WARM_OCEAN, VanillaBiomes.warmOceanBiome());
-        register(45, net.minecraft.world.level.biome.Biomes.LUKEWARM_OCEAN, VanillaBiomes.lukeWarmOceanBiome(false));
-        register(46, net.minecraft.world.level.biome.Biomes.COLD_OCEAN, VanillaBiomes.coldOceanBiome(false));
-        register(47, net.minecraft.world.level.biome.Biomes.DEEP_WARM_OCEAN, VanillaBiomes.deepWarmOceanBiome());
-        register(48, net.minecraft.world.level.biome.Biomes.DEEP_LUKEWARM_OCEAN, VanillaBiomes.lukeWarmOceanBiome(true));
-        register(49, net.minecraft.world.level.biome.Biomes.DEEP_COLD_OCEAN, VanillaBiomes.coldOceanBiome(true));
-        register(50, net.minecraft.world.level.biome.Biomes.DEEP_FROZEN_OCEAN, VanillaBiomes.frozenOceanBiome(true));
-        THE_VOID = register(127, net.minecraft.world.level.biome.Biomes.THE_VOID, VanillaBiomes.theVoidBiome());
-        register(129, net.minecraft.world.level.biome.Biomes.SUNFLOWER_PLAINS, VanillaBiomes.plainsBiome(true));
-        register(130, net.minecraft.world.level.biome.Biomes.DESERT_LAKES, VanillaBiomes.desertBiome(0.225f, 0.25f, false, false, false));
-        register(131, net.minecraft.world.level.biome.Biomes.GRAVELLY_MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.GRAVELLY_MOUNTAIN, false));
-        register(132, net.minecraft.world.level.biome.Biomes.FLOWER_FOREST, VanillaBiomes.flowerForestBiome());
-        register(133, net.minecraft.world.level.biome.Biomes.TAIGA_MOUNTAINS, VanillaBiomes.taigaBiome(0.3f, 0.4f, false, true, false, false));
-        register(134, net.minecraft.world.level.biome.Biomes.SWAMP_HILLS, VanillaBiomes.swampBiome(-0.1f, 0.3f, true));
-        register(140, net.minecraft.world.level.biome.Biomes.ICE_SPIKES, VanillaBiomes.tundraBiome(0.425f, 0.45000002f, true, false));
-        register(149, net.minecraft.world.level.biome.Biomes.MODIFIED_JUNGLE, VanillaBiomes.modifiedJungleBiome());
-        register(151, net.minecraft.world.level.biome.Biomes.MODIFIED_JUNGLE_EDGE, VanillaBiomes.modifiedJungleEdgeBiome());
-        register(155, net.minecraft.world.level.biome.Biomes.TALL_BIRCH_FOREST, VanillaBiomes.birchForestBiome(0.2f, 0.4f, true));
-        register(156, net.minecraft.world.level.biome.Biomes.TALL_BIRCH_HILLS, VanillaBiomes.birchForestBiome(0.55f, 0.5f, true));
-        register(157, net.minecraft.world.level.biome.Biomes.DARK_FOREST_HILLS, VanillaBiomes.darkForestBiome(0.2f, 0.4f, true));
-        register(158, net.minecraft.world.level.biome.Biomes.SNOWY_TAIGA_MOUNTAINS, VanillaBiomes.taigaBiome(0.3f, 0.4f, true, true, false, false));
-        register(160, net.minecraft.world.level.biome.Biomes.GIANT_SPRUCE_TAIGA, VanillaBiomes.giantTreeTaiga(0.2f, 0.2f, 0.25f, true));
-        register(161, net.minecraft.world.level.biome.Biomes.GIANT_SPRUCE_TAIGA_HILLS, VanillaBiomes.giantTreeTaiga(0.2f, 0.2f, 0.25f, true));
-        register(162, net.minecraft.world.level.biome.Biomes.MODIFIED_GRAVELLY_MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.GRAVELLY_MOUNTAIN, false));
-        register(163, net.minecraft.world.level.biome.Biomes.SHATTERED_SAVANNA, VanillaBiomes.savannaBiome(0.3625f, 1.225f, 1.1f, true, true));
-        register(164, net.minecraft.world.level.biome.Biomes.SHATTERED_SAVANNA_PLATEAU, VanillaBiomes.savannaBiome(1.05f, 1.2125001f, 1.0f, true, true));
-        register(165, net.minecraft.world.level.biome.Biomes.ERODED_BADLANDS, VanillaBiomes.erodedBadlandsBiome());
-        register(166, net.minecraft.world.level.biome.Biomes.MODIFIED_WOODED_BADLANDS_PLATEAU, VanillaBiomes.woodedBadlandsPlateauBiome(0.45f, 0.3f));
-        register(167, net.minecraft.world.level.biome.Biomes.MODIFIED_BADLANDS_PLATEAU, VanillaBiomes.badlandsBiome(0.45f, 0.3f, true));
-        register(168, net.minecraft.world.level.biome.Biomes.BAMBOO_JUNGLE, VanillaBiomes.bambooJungleBiome());
-        register(169, net.minecraft.world.level.biome.Biomes.BAMBOO_JUNGLE_HILLS, VanillaBiomes.bambooJungleHillsBiome());
-        register(170, net.minecraft.world.level.biome.Biomes.SOUL_SAND_VALLEY, VanillaBiomes.soulSandValleyBiome());
-        register(171, net.minecraft.world.level.biome.Biomes.CRIMSON_FOREST, VanillaBiomes.crimsonForestBiome());
-        register(172, net.minecraft.world.level.biome.Biomes.WARPED_FOREST, VanillaBiomes.warpedForestBiome());
-        register(173, net.minecraft.world.level.biome.Biomes.BASALT_DELTAS, VanillaBiomes.basaltDeltasBiome());
+        register(0, OCEAN, VanillaBiomes.oceanBiome(false));
+        register(2, DESERT, VanillaBiomes.desertBiome(0.125f, 0.05f, true, true, true));
+        register(3, MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.MOUNTAIN, false));
+        register(4, FOREST, VanillaBiomes.forestBiome(0.1f, 0.2f));
+        register(5, TAIGA, VanillaBiomes.taigaBiome(0.2f, 0.2f, false, false, true, false));
+        register(6, SWAMP, VanillaBiomes.swampBiome(-0.2f, 0.1f, false));
+        register(7, RIVER, VanillaBiomes.riverBiome(-0.5f, 0.0f, 0.5f, 4159204, false));
+        register(8, NETHER_WASTES, VanillaBiomes.netherWastesBiome());
+        register(9, THE_END, VanillaBiomes.theEndBiome());
+        register(10, FROZEN_OCEAN, VanillaBiomes.frozenOceanBiome(false));
+        register(11, FROZEN_RIVER, VanillaBiomes.riverBiome(-0.5f, 0.0f, 0.0f, 3750089, true));
+        register(12, SNOWY_TUNDRA, VanillaBiomes.tundraBiome(0.125f, 0.05f, false, false));
+        register(13, SNOWY_MOUNTAINS, VanillaBiomes.tundraBiome(0.45f, 0.3f, false, true));
+        register(14, MUSHROOM_FIELDS, VanillaBiomes.mushroomFieldsBiome(0.2f, 0.3f));
+        register(15, MUSHROOM_FIELD_SHORE, VanillaBiomes.mushroomFieldsBiome(0.0f, 0.025f));
+        register(16, BEACH, VanillaBiomes.beachBiome(0.0f, 0.025f, 0.8f, 0.4f, 4159204, false, false));
+        register(17, DESERT_HILLS, VanillaBiomes.desertBiome(0.45f, 0.3f, false, true, false));
+        register(18, WOODED_HILLS, VanillaBiomes.forestBiome(0.45f, 0.3f));
+        register(19, TAIGA_HILLS, VanillaBiomes.taigaBiome(0.45f, 0.3f, false, false, false, false));
+        register(20, MOUNTAIN_EDGE, VanillaBiomes.mountainBiome(0.8f, 0.3f, SurfaceBuilders.GRASS, true));
+        register(21, JUNGLE, VanillaBiomes.jungleBiome());
+        register(22, JUNGLE_HILLS, VanillaBiomes.jungleHillsBiome());
+        register(23, JUNGLE_EDGE, VanillaBiomes.jungleEdgeBiome());
+        register(24, DEEP_OCEAN, VanillaBiomes.oceanBiome(true));
+        register(25, STONE_SHORE, VanillaBiomes.beachBiome(0.1f, 0.8f, 0.2f, 0.3f, 4159204, false, true));
+        register(26, SNOWY_BEACH, VanillaBiomes.beachBiome(0.0f, 0.025f, 0.05f, 0.3f, 4020182, true, false));
+        register(27, BIRCH_FOREST, VanillaBiomes.birchForestBiome(0.1f, 0.2f, false));
+        register(28, BIRCH_FOREST_HILLS, VanillaBiomes.birchForestBiome(0.45f, 0.3f, false));
+        register(29, DARK_FOREST, VanillaBiomes.darkForestBiome(0.1f, 0.2f, false));
+        register(30, SNOWY_TAIGA, VanillaBiomes.taigaBiome(0.2f, 0.2f, true, false, false, true));
+        register(31, SNOWY_TAIGA_HILLS, VanillaBiomes.taigaBiome(0.45f, 0.3f, true, false, false, false));
+        register(32, GIANT_TREE_TAIGA, VanillaBiomes.giantTreeTaiga(0.2f, 0.2f, 0.3f, false));
+        register(33, GIANT_TREE_TAIGA_HILLS, VanillaBiomes.giantTreeTaiga(0.45f, 0.3f, 0.3f, false));
+        register(34, WOODED_MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.GRASS, true));
+        register(35, SAVANNA, VanillaBiomes.savannaBiome(0.125f, 0.05f, 1.2f, false, false));
+        register(36, SAVANNA_PLATEAU, VanillaBiomes.savanaPlateauBiome());
+        register(37, BADLANDS, VanillaBiomes.badlandsBiome(0.1f, 0.2f, false));
+        register(38, WOODED_BADLANDS_PLATEAU, VanillaBiomes.woodedBadlandsPlateauBiome(1.5f, 0.025f));
+        register(39, BADLANDS_PLATEAU, VanillaBiomes.badlandsBiome(1.5f, 0.025f, true));
+        register(40, SMALL_END_ISLANDS, VanillaBiomes.smallEndIslandsBiome());
+        register(41, END_MIDLANDS, VanillaBiomes.endMidlandsBiome());
+        register(42, END_HIGHLANDS, VanillaBiomes.endHighlandsBiome());
+        register(43, END_BARRENS, VanillaBiomes.endBarrensBiome());
+        register(44, WARM_OCEAN, VanillaBiomes.warmOceanBiome());
+        register(45, LUKEWARM_OCEAN, VanillaBiomes.lukeWarmOceanBiome(false));
+        register(46, COLD_OCEAN, VanillaBiomes.coldOceanBiome(false));
+        register(47, DEEP_WARM_OCEAN, VanillaBiomes.deepWarmOceanBiome());
+        register(48, DEEP_LUKEWARM_OCEAN, VanillaBiomes.lukeWarmOceanBiome(true));
+        register(49, DEEP_COLD_OCEAN, VanillaBiomes.coldOceanBiome(true));
+        register(50, DEEP_FROZEN_OCEAN, VanillaBiomes.frozenOceanBiome(true));
+        register(129, SUNFLOWER_PLAINS, VanillaBiomes.plainsBiome(true));
+        register(130, DESERT_LAKES, VanillaBiomes.desertBiome(0.225f, 0.25f, false, false, false));
+        register(131, GRAVELLY_MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.GRAVELLY_MOUNTAIN, false));
+        register(132, FLOWER_FOREST, VanillaBiomes.flowerForestBiome());
+        register(133, TAIGA_MOUNTAINS, VanillaBiomes.taigaBiome(0.3f, 0.4f, false, true, false, false));
+        register(134, SWAMP_HILLS, VanillaBiomes.swampBiome(-0.1f, 0.3f, true));
+        register(140, ICE_SPIKES, VanillaBiomes.tundraBiome(0.425f, 0.45000002f, true, false));
+        register(149, MODIFIED_JUNGLE, VanillaBiomes.modifiedJungleBiome());
+        register(151, MODIFIED_JUNGLE_EDGE, VanillaBiomes.modifiedJungleEdgeBiome());
+        register(155, TALL_BIRCH_FOREST, VanillaBiomes.birchForestBiome(0.2f, 0.4f, true));
+        register(156, TALL_BIRCH_HILLS, VanillaBiomes.birchForestBiome(0.55f, 0.5f, true));
+        register(157, DARK_FOREST_HILLS, VanillaBiomes.darkForestBiome(0.2f, 0.4f, true));
+        register(158, SNOWY_TAIGA_MOUNTAINS, VanillaBiomes.taigaBiome(0.3f, 0.4f, true, true, false, false));
+        register(160, GIANT_SPRUCE_TAIGA, VanillaBiomes.giantTreeTaiga(0.2f, 0.2f, 0.25f, true));
+        register(161, GIANT_SPRUCE_TAIGA_HILLS, VanillaBiomes.giantTreeTaiga(0.2f, 0.2f, 0.25f, true));
+        register(162, MODIFIED_GRAVELLY_MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.GRAVELLY_MOUNTAIN, false));
+        register(163, SHATTERED_SAVANNA, VanillaBiomes.savannaBiome(0.3625f, 1.225f, 1.1f, true, true));
+        register(164, SHATTERED_SAVANNA_PLATEAU, VanillaBiomes.savannaBiome(1.05f, 1.2125001f, 1.0f, true, true));
+        register(165, ERODED_BADLANDS, VanillaBiomes.erodedBadlandsBiome());
+        register(166, MODIFIED_WOODED_BADLANDS_PLATEAU, VanillaBiomes.woodedBadlandsPlateauBiome(0.45f, 0.3f));
+        register(167, MODIFIED_BADLANDS_PLATEAU, VanillaBiomes.badlandsBiome(0.45f, 0.3f, true));
+        register(168, BAMBOO_JUNGLE, VanillaBiomes.bambooJungleBiome());
+        register(169, BAMBOO_JUNGLE_HILLS, VanillaBiomes.bambooJungleHillsBiome());
+        register(170, SOUL_SAND_VALLEY, VanillaBiomes.soulSandValleyBiome());
+        register(171, CRIMSON_FOREST, VanillaBiomes.crimsonForestBiome());
+        register(172, WARPED_FOREST, VanillaBiomes.warpedForestBiome());
+        register(173, BASALT_DELTAS, VanillaBiomes.basaltDeltasBiome());
     }
 }
diff --git a/src/main/java/net/minecraft/data/worldgen/biome/VanillaBiomes.java b/src/main/java/net/minecraft/data/worldgen/biome/VanillaBiomes.java
index dcd50495df69467fd25957fd458291c581c86dc4..51fce0356079ec0cb0d81109b17c2f3b86f6267d 100644
--- a/src/main/java/net/minecraft/data/worldgen/biome/VanillaBiomes.java
+++ b/src/main/java/net/minecraft/data/worldgen/biome/VanillaBiomes.java
@@ -248,41 +248,40 @@ public class VanillaBiomes
     }
     
     public static Biome plainsBiome(final boolean debug0) {
-        final MobSpawnSettings.Builder debug = new MobSpawnSettings.Builder();
-        BiomeDefaultFeatures.plainsSpawns(debug);
+        final MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.plainsSpawns(builder);
         if (!debug0) {
-            debug.setPlayerCanSpawn();
+            builder.setPlayerCanSpawn();
         }
-        final BiomeGenerationSettings.Builder debug2 = new BiomeGenerationSettings.Builder().surfaceBuilder(SurfaceBuilders.GRASS);
+        final BiomeGenerationSettings.Builder surfaceBuilder = new BiomeGenerationSettings.Builder().surfaceBuilder(SurfaceBuilders.GRASS);
         if (!debug0) {
-            debug2.addStructureStart(StructureFeatures.VILLAGE_PLAINS).addStructureStart(StructureFeatures.PILLAGER_OUTPOST);
-        }
-        BiomeDefaultFeatures.addDefaultOverworldLandStructures(debug2);
-        debug2.addStructureStart(StructureFeatures.RUINED_PORTAL_STANDARD);
-        BiomeDefaultFeatures.addDefaultCarvers(debug2);
-        BiomeDefaultFeatures.addDefaultLakes(debug2);
-        BiomeDefaultFeatures.addDefaultMonsterRoom(debug2);
-        BiomeDefaultFeatures.addPlainGrass(debug2);
+            surfaceBuilder.addStructureStart(StructureFeatures.VILLAGE_PLAINS).addStructureStart(StructureFeatures.PILLAGER_OUTPOST);
+        }
+        BiomeDefaultFeatures.addDefaultOverworldLandStructures(surfaceBuilder);
+        surfaceBuilder.addStructureStart(StructureFeatures.RUINED_PORTAL_STANDARD);
+        BiomeDefaultFeatures.addDefaultCarvers(surfaceBuilder);
+        BiomeDefaultFeatures.addDefaultLakes(surfaceBuilder);
+        BiomeDefaultFeatures.addDefaultMonsterRoom(surfaceBuilder);
+        BiomeDefaultFeatures.addPlainGrass(surfaceBuilder);
         if (debug0) {
-            debug2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Features.PATCH_SUNFLOWER);
+            surfaceBuilder.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Features.PATCH_SUNFLOWER);
         }
-        BiomeDefaultFeatures.addDefaultUndergroundVariety(debug2);
-        BiomeDefaultFeatures.addDefaultOres(debug2);
-        BiomeDefaultFeatures.addDefaultSoftDisks(debug2);
-        BiomeDefaultFeatures.addPlainVegetation(debug2);
+        BiomeDefaultFeatures.addDefaultUndergroundVariety(surfaceBuilder);
+        BiomeDefaultFeatures.addDefaultOres(surfaceBuilder);
+        BiomeDefaultFeatures.addDefaultSoftDisks(surfaceBuilder);
+        BiomeDefaultFeatures.addPlainVegetation(surfaceBuilder);
         if (debug0) {
-            debug2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Features.PATCH_SUGAR_CANE);
+            surfaceBuilder.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Features.PATCH_SUGAR_CANE);
         }
-        BiomeDefaultFeatures.addDefaultMushrooms(debug2);
+        BiomeDefaultFeatures.addDefaultMushrooms(surfaceBuilder);
         if (debug0) {
-            debug2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Features.PATCH_PUMPKIN);
+            surfaceBuilder.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Features.PATCH_PUMPKIN);
+        } else {
+            BiomeDefaultFeatures.addDefaultExtraVegetation(surfaceBuilder);
         }
-        else {
-            BiomeDefaultFeatures.addDefaultExtraVegetation(debug2);
-        }
-        BiomeDefaultFeatures.addDefaultSprings(debug2);
-        BiomeDefaultFeatures.addSurfaceFreezing(debug2);
-        return new Biome.BiomeBuilder().precipitation(Biome.Precipitation.RAIN).biomeCategory(Biome.BiomeCategory.PLAINS).depth(0.125f).scale(0.05f).temperature(0.8f).downfall(0.4f).specialEffects(new BiomeSpecialEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).skyColor(calculateSkyColor(0.8f)).ambientMoodSound(AmbientMoodSettings.LEGACY_CAVE_SETTINGS).build()).mobSpawnSettings(debug.build()).generationSettings(debug2.build()).build();
+        BiomeDefaultFeatures.addDefaultSprings(surfaceBuilder);
+        BiomeDefaultFeatures.addSurfaceFreezing(surfaceBuilder);
+        return new Biome.BiomeBuilder().precipitation(Biome.Precipitation.RAIN).biomeCategory(Biome.BiomeCategory.PLAINS).depth(0.125f).scale(0.05f).temperature(0.8f).downfall(0.4f).specialEffects(new BiomeSpecialEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).skyColor(calculateSkyColor(0.8f)).ambientMoodSound(AmbientMoodSettings.LEGACY_CAVE_SETTINGS).build()).mobSpawnSettings(builder.build()).generationSettings(surfaceBuilder.build()).build();
     }
     
     private static Biome baseEndBiome(final BiomeGenerationSettings.Builder debug0) {
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 4b3499d9e5c24a40d7e8b84a025693ff220f28df..102af9e554e681a234c7e27430043225cbdca0b2 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -305,30 +305,30 @@ public class FriendlyByteBuf extends ByteBuf
         return this.readUtf(32767);
     }
     
-    public String readUtf(final int debug1) {
-        final int debug2 = this.readVarInt();
-        if (debug2 > debug1 * 4) {
-            throw new DecoderException("The received encoded string buffer length is longer than maximum allowed (" + debug2 + " > " + debug1 * 4 + ")");
+    public String readUtf(final int max) {
+        final int length = this.readVarInt();
+        if (length > max * 4) {
+            throw new DecoderException("The received encoded string buffer length is longer than maximum allowed (" + length + " > " + max * 4 + ")");
         }
-        if (debug2 < 0) {
+        if (length < 0) {
             throw new DecoderException("The received encoded string buffer length is less than zero! Weird string!");
         }
-        final String debug3 = this.toString(this.readerIndex(), debug2, StandardCharsets.UTF_8);
-        this.readerIndex(this.readerIndex() + debug2);
-        if (debug3.length() > debug1) {
-            throw new DecoderException("The received string length is longer than maximum allowed (" + debug2 + " > " + debug1 + ")");
+        final String string = this.toString(this.readerIndex(), length, StandardCharsets.UTF_8);
+        this.readerIndex(this.readerIndex() + length);
+        if (string.length() > max) {
+            throw new DecoderException("The received string length is longer than maximum allowed (" + length + " > " + max + ")");
         }
-        return debug3;
+        return string;
     }
     
-    public FriendlyByteBuf writeUtf(final String debug1) {
-        return this.writeUtf(debug1, 32767);
+    public FriendlyByteBuf writeUtf(final String s) {
+        return this.writeUtf(s, 32767);
     }
     
-    public FriendlyByteBuf writeUtf(final String debug1, final int debug2) {
-        final byte[] debug3 = debug1.getBytes(StandardCharsets.UTF_8);
-        if (debug3.length > debug2) {
-            throw new EncoderException("String too big (was " + debug3.length + " bytes encoded, max " + debug2 + ")");
+    public FriendlyByteBuf writeUtf(final String s, final int max) {
+        final byte[] debug3 = s.getBytes(StandardCharsets.UTF_8);
+        if (debug3.length > max) {
+            throw new EncoderException("String too big (was " + debug3.length + " bytes encoded, max " + max + ")");
         }
         this.writeVarInt(debug3.length);
         this.writeBytes(debug3);
diff --git a/src/main/java/net/minecraft/network/protocol/login/ClientboundGameProfilePacket.java b/src/main/java/net/minecraft/network/protocol/login/ClientboundGameProfilePacket.java
index ffbc635a765445c7defc18182fe77f5821585e09..401de85bb739edb3cda8977d6b5093521e5d85b7 100644
--- a/src/main/java/net/minecraft/network/protocol/login/ClientboundGameProfilePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/login/ClientboundGameProfilePacket.java
@@ -20,27 +20,27 @@ public class ClientboundGameProfilePacket implements Packet<ClientLoginPacketLis
     }
     
     @Override
-    public void read(final FriendlyByteBuf debug1) throws IOException {
-        final int[] debug2 = new int[4];
-        for (int debug3 = 0; debug3 < debug2.length; ++debug3) {
-            debug2[debug3] = debug1.readInt();
+    public void read(final FriendlyByteBuf byteBuf) throws IOException {
+        final int[] intArray = new int[4];
+        for (int i = 0; i < intArray.length; ++i) {
+            intArray[i] = byteBuf.readInt();
         }
-        final UUID debug4 = SerializableUUID.uuidFromIntArray(debug2);
-        final String debug5 = debug1.readUtf(16);
-        this.gameProfile = new GameProfile(debug4, debug5);
+        final UUID uuid = SerializableUUID.uuidFromIntArray(intArray);
+        final String name = byteBuf.readUtf(16);
+        this.gameProfile = new GameProfile(uuid, name);
     }
     
     @Override
-    public void write(final FriendlyByteBuf debug1) throws IOException {
-        for (final int debug2 : SerializableUUID.uuidToIntArray(this.gameProfile.getId())) {
-            debug1.writeInt(debug2);
+    public void write(final FriendlyByteBuf byteBuf) throws IOException {
+        for (final int uuid : SerializableUUID.uuidToIntArray(this.gameProfile.getId())) {
+            byteBuf.writeInt(uuid);
         }
-        debug1.writeUtf(this.gameProfile.getName());
+        byteBuf.writeUtf(this.gameProfile.getName());
     }
     
     @Override
-    public void handle(final ClientLoginPacketListener debug1) {
-        debug1.handleGameProfile(this);
+    public void handle(final ClientLoginPacketListener packet) {
+        packet.handleGameProfile(this);
     }
     
     public GameProfile getGameProfile() {
diff --git a/src/main/java/net/minecraft/resources/RegistryReadOps.java b/src/main/java/net/minecraft/resources/RegistryReadOps.java
index 7df5e57deae2b92d92e03aad1956b90e97cb75bc..2cf2c09c2fb41c8dd08dc463d8d3b91a3237130a 100644
--- a/src/main/java/net/minecraft/resources/RegistryReadOps.java
+++ b/src/main/java/net/minecraft/resources/RegistryReadOps.java
@@ -70,98 +70,98 @@ extends DelegatingOps<T> {
     private final Map<ResourceKey<? extends Registry<?>>, ReadCache<?>> readCache;
     private final RegistryReadOps<JsonElement> jsonOps;
 
-    public static <T> RegistryReadOps<T> create(DynamicOps<T> debug0, ResourceManager debug1, RegistryAccess.RegistryHolder debug2) {
-        return RegistryReadOps.create(debug0, ResourceAccess.forResourceManager(debug1), debug2);
+    public static <T> RegistryReadOps<T> create(DynamicOps<T> dynamicOps, ResourceManager resourceManager, RegistryAccess.RegistryHolder holder) {
+        return RegistryReadOps.create(dynamicOps, ResourceAccess.forResourceManager(resourceManager), holder);
     }
 
-    public static <T> RegistryReadOps<T> create(DynamicOps<T> debug0, ResourceAccess debug1, RegistryAccess.RegistryHolder debug2) {
-        RegistryReadOps<T> debug3 = new RegistryReadOps<T>(debug0, debug1, debug2, Maps.newIdentityHashMap());
-        RegistryAccess.load(debug2, debug3);
-        return debug3;
+    public static <T> RegistryReadOps<T> create(DynamicOps<T> dynamicOps, ResourceAccess resourceAccess, RegistryAccess.RegistryHolder holder) {
+        RegistryReadOps<T> registryReadOps = new RegistryReadOps<>(dynamicOps, resourceAccess, holder, Maps.newIdentityHashMap());
+        RegistryAccess.load(holder, registryReadOps);
+        return registryReadOps;
     }
 
-    private RegistryReadOps(DynamicOps<T> debug1, ResourceAccess debug2, RegistryAccess.RegistryHolder debug3, IdentityHashMap<ResourceKey<? extends Registry<?>>, ReadCache<?>> debug4) {
-        super(debug1);
-        this.resources = debug2;
-        this.registryHolder = debug3;
-        this.readCache = debug4;
-        this.jsonOps = (debug1 == JsonOps.INSTANCE) ? (RegistryReadOps)this : new RegistryReadOps((DynamicOps<T>)JsonOps.INSTANCE, debug2, debug3, debug4); // MagmaCube - decompile fix
+    private RegistryReadOps(DynamicOps<T> dynamicOps, ResourceAccess resourceAccess, RegistryAccess.RegistryHolder registryHolder, IdentityHashMap<ResourceKey<? extends Registry<?>>, ReadCache<?>> map) {
+        super(dynamicOps);
+        this.resources = resourceAccess;
+        this.registryHolder = registryHolder;
+        this.readCache = map;
+        this.jsonOps = (dynamicOps == JsonOps.INSTANCE) ? (RegistryReadOps<JsonElement>) this : new RegistryReadOps<>(JsonOps.INSTANCE, resourceAccess, registryHolder, map); // MagmaCube - decompile fix
     }
 
-    protected <E> DataResult<Pair<java.util.function.Supplier<E>, T>> decodeElement(T debug12, ResourceKey<? extends Registry<E>> debug2, Codec<E> debug3, boolean debug4) {
-        Optional<WritableRegistry<E>> debug5 = this.registryHolder.registry(debug2); // MagmaCube - decompile fix
-        if (!debug5.isPresent()) {
-            return DataResult.error((String)("Unknown registry: " + debug2));
+    protected <E> DataResult<Pair<java.util.function.Supplier<E>, T>> decodeElement(T input, ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec, boolean allowInlineDefinitions) {
+        Optional<WritableRegistry<E>> optional = this.registryHolder.registry(resourceKey); // MagmaCube - decompile fix
+        if (!optional.isPresent()) {
+            return DataResult.error((String)("Unknown registry: " + resourceKey));
         }
-        WritableRegistry debug6 = debug5.get();
-        DataResult<Pair<ResourceLocation, T>> debug7 = ResourceLocation.CODEC.decode(this.delegate, debug12); // MagmaCube - decompile fix
-        if (!debug7.result().isPresent()) {
-            if (!debug4) {
+        WritableRegistry<E> writableRegistry = optional.get();
+        DataResult<Pair<ResourceLocation, T>> dataResult = ResourceLocation.CODEC.decode(this.delegate, input); // MagmaCube - decompile fix
+        if (!dataResult.result().isPresent()) {
+            if (!allowInlineDefinitions) {
                 return DataResult.error((String)"Inline definitions not allowed here");
             }
-            return debug3.decode(this, debug12).map(debug02 -> debug02.mapFirst(debug0 -> () -> debug0)); // MagmaCube - decompile fix
+            return codec.decode(this, input).map(pair -> pair.mapFirst(instance -> () -> instance)); // MagmaCube - decompile fix
         }
-        Pair<ResourceLocation, T> debug8 = debug7.result().get(); // MagmaCube - decompile fix
-        ResourceLocation debug9 = (ResourceLocation)debug8.getFirst();
-        return this.readAndRegisterElement(debug2, debug6, debug3, debug9).map(debug1 -> Pair.of((Object)debug1, (Object)debug8.getSecond()));
+        Pair<ResourceLocation, T> pair = dataResult.result().get(); // MagmaCube - decompile fix
+        ResourceLocation resourceLocation = (ResourceLocation)pair.getFirst();
+        return this.readAndRegisterElement(resourceKey, writableRegistry, codec, resourceLocation).map(supplier -> Pair.of(supplier, pair.getSecond()));
     }
 
-    public <E> DataResult<MappedRegistry<E>> decodeElements(MappedRegistry<E> debug1, ResourceKey<? extends Registry<E>> debug2, Codec<E> debug3) {
-        Collection<ResourceLocation> debug42 = this.resources.listResources(debug2);
-        DataResult<MappedRegistry<E>> debug5 = DataResult.success(debug1, (Lifecycle)Lifecycle.stable()); // MagmaCube - decompile fix
-        String debug6 = debug2.location().getPath() + "/";
-        for (ResourceLocation debug8 : debug42) {
-            String debug9 = debug8.getPath();
-            if (!debug9.endsWith(".json")) {
-                LOGGER.warn("Skipping resource {} since it is not a json file", (Object)debug8);
+    public <E> DataResult<MappedRegistry<E>> decodeElements(MappedRegistry<E> registry, ResourceKey<? extends Registry<E>> resourceKey, Codec<E> mapCodec) {
+        Collection<ResourceLocation> resources = this.resources.listResources(resourceKey);
+        DataResult<MappedRegistry<E>> dataResult = DataResult.success(registry, (Lifecycle)Lifecycle.stable());
+        String prefix = resourceKey.location().getPath() + "/";
+        for (ResourceLocation location : resources) {
+            String path = location.getPath();
+            if (!path.endsWith(".json")) {
+                LOGGER.warn("Skipping resource {} since it is not a json file", (Object)location);
                 continue;
             }
-            if (!debug9.startsWith(debug6)) {
-                LOGGER.warn("Skipping resource {} since it does not have a registry name prefix", (Object)debug8);
+            if (!path.startsWith(prefix)) {
+                LOGGER.warn("Skipping resource {} since it does not have a registry name prefix", (Object)location);
                 continue;
             }
-            String debug10 = debug9.substring(debug6.length(), debug9.length() - ".json".length());
-            ResourceLocation debug11 = new ResourceLocation(debug8.getNamespace(), debug10);
-            debug5 = debug5.flatMap(debug4 -> this.readAndRegisterElement(debug2, (WritableRegistry)debug4, debug3, debug11).map(debug12 -> debug4));
+            String debug10 = path.substring(prefix.length(), path.length() - ".json".length());
+            ResourceLocation newLocation = new ResourceLocation(location.getNamespace(), debug10);
+            dataResult = dataResult.flatMap(mappedRegistry -> this.readAndRegisterElement(resourceKey, mappedRegistry, mapCodec, newLocation).map(debug12 -> mappedRegistry));
         }
-        return debug5.setPartial(debug1);
+        return dataResult.setPartial(registry);
     }
 
-    private <E> DataResult<Supplier<E>> readAndRegisterElement(ResourceKey<? extends Registry<E>> debug1, WritableRegistry<E> debug22, Codec<E> debug3, ResourceLocation debug4) {
-        DataResult<Supplier<E>> debug11; // MagmaCube - decompile fix
-        ResourceKey<E> debug5 = ResourceKey.create(debug1, debug4);
-        ReadCache<E> debug6 = this.readCache(debug1);
-        DataResult<Supplier<E>> debug7 = (DataResult)(debug6).values.get(debug5);
-        if (debug7 != null) {
-            return debug7;
+    private <E> DataResult<java.util.function.Supplier<E>> readAndRegisterElement(ResourceKey<? extends Registry<E>> key, WritableRegistry<E> writableRegistry, Codec<E> codec, ResourceLocation resourceLocation) {
+        DataResult<java.util.function.Supplier<E>> supplierDataResult; // MagmaCube - decompile fix
+        ResourceKey<E> objectKey = ResourceKey.create(key, resourceLocation);
+        ReadCache<E> cache = this.readCache(key);
+        DataResult<java.util.function.Supplier<E>> dataResult = cache.values.get(objectKey);
+        if (dataResult != null) {
+            return dataResult;
         }
-        Supplier debug8 = Suppliers.memoize(() -> {
-            Object debug2 = debug22.get(debug5);
+        Supplier<E> supplier = Suppliers.memoize(() -> {
+            E debug2 = writableRegistry.get(objectKey);
             if (debug2 == null) {
-                throw new RuntimeException("Error during recursive registry parsing, element resolved too early: " + debug5);
+                throw new RuntimeException("Error during recursive registry parsing, element resolved too early: " + objectKey);
             }
             return debug2;
         });
-        ((ReadCache)debug6).values.put(debug5, DataResult.success((Object)debug8));
-        DataResult<Pair<E, OptionalInt>> debug9 = this.resources.parseElement(this.jsonOps, debug1, debug5, debug3); // MagmaCube - decompile fix
-        Optional<Pair<E, OptionalInt>> debug10 = debug9.result(); // MagmaCube - decompile fix
-        if (debug10.isPresent()) {
-            Pair<E, OptionalInt> pair = debug10.get(); // MagmaCube - decompile fix
-            debug22.registerOrOverride((OptionalInt)pair.getSecond(), debug5, pair.getFirst(), debug9.lifecycle()); // MagmaCube - decompile fix
+        cache.values.put(objectKey, DataResult.success(supplier));
+        DataResult<Pair<E, OptionalInt>> result = this.resources.parseElement(this.jsonOps, key, objectKey, codec); // MagmaCube - decompile fix
+        Optional<Pair<E, OptionalInt>> optionalPair = result.result(); // MagmaCube - decompile fix
+        if (optionalPair.isPresent()) {
+            Pair<E, OptionalInt> pair = optionalPair.get(); // MagmaCube - decompile fix
+            writableRegistry.registerOrOverride((OptionalInt)pair.getSecond(), objectKey, pair.getFirst(), result.lifecycle()); // MagmaCube - decompile fix
         }
-        debug11 = !debug10.isPresent() && debug22.get(debug5) != null ? DataResult.success(() -> debug22.get(debug5), (Lifecycle)Lifecycle.stable()) : debug9.map(debug2 -> () -> debug22.get(debug5));
-        ((ReadCache)debug6).values.put(debug5, debug11);
-        return debug11;
+        supplierDataResult = !optionalPair.isPresent() && writableRegistry.get(objectKey) != null ? DataResult.success(() -> writableRegistry.get(objectKey), (Lifecycle)Lifecycle.stable()) : result.map(debug2 -> () -> writableRegistry.get(objectKey));
+        cache.values.put(objectKey, supplierDataResult);
+        return supplierDataResult;
     }
 
-    private <E> ReadCache<E> readCache(ResourceKey<? extends Registry<E>> debug1) {
-        return (ReadCache<E>) this.readCache.computeIfAbsent(debug1, debug0 -> new ReadCache()); // MagmaCube - decompile fix
+    private <E> ReadCache<E> readCache(ResourceKey<? extends Registry<E>> resourceKey) {
+        return (ReadCache<E>) this.readCache.computeIfAbsent(resourceKey, debug0 -> new ReadCache<>()); // MagmaCube - decompile fix
     }
 
-    protected <E> DataResult<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> debug1) {
-        return this.registryHolder.registry(debug1)
-                .map(debug0 -> DataResult.success(debug0, debug0.elementsLifecycle()))
-                .orElseGet(() -> DataResult.error("Unknown registry: " + debug1));
+    protected <E> DataResult<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> resourceKey) {
+        return this.registryHolder.registry(resourceKey)
+                .map(writableRegistry -> DataResult.success(writableRegistry, writableRegistry.elementsLifecycle()))
+                .orElseGet(() -> DataResult.error("Unknown registry: " + resourceKey));
     }
 
     public static interface ResourceAccess {
@@ -169,35 +169,35 @@ extends DelegatingOps<T> {
 
         public <E> DataResult<Pair<E, OptionalInt>> parseElement(DynamicOps<JsonElement> var1, ResourceKey<? extends Registry<E>> var2, ResourceKey<E> var3, Decoder<E> var4);
 
-        public static ResourceAccess forResourceManager(final ResourceManager debug0) {
+        public static ResourceAccess forResourceManager(final ResourceManager resourceManager) {
             return new ResourceAccess(){
 
                 @Override
                 public Collection<ResourceLocation> listResources(ResourceKey<? extends Registry<?>> debug1) {
-                    return debug0.listResources(debug1.location().getPath(), debug0 -> debug0.endsWith(".json"));
+                    return resourceManager.listResources(debug1.location().getPath(), debug0 -> debug0.endsWith(".json"));
                 }
 
                 /*
                  * Exception decompiling
                  */
                 @Override
-                public <E> DataResult<Pair<E, OptionalInt>> parseElement(DynamicOps<JsonElement> debug1, ResourceKey<? extends Registry<E>> debug2, ResourceKey<E> debug3, Decoder<E> debug4) {
+                public <E> DataResult<Pair<E, OptionalInt>> parseElement(DynamicOps<JsonElement> jsonElementDynamicOps, ResourceKey<? extends Registry<E>> resourceKey, ResourceKey<E> objectKey, Decoder<E> decoder) {
                     // MagmaCube start - decompile fix
-                    ResourceLocation debug5 = debug3.location();
-                    ResourceLocation debug6 = new ResourceLocation(debug5.getNamespace(), debug2.location().getPath() + "/" + debug5.getPath() + ".json");
-                    try(Resource debug7 = debug0.getResource(debug6);
-                        Reader debug9 = new InputStreamReader(debug7.getInputStream(), StandardCharsets.UTF_8)) {
-                        JsonParser debug11 = new JsonParser();
-                        JsonElement debug12 = debug11.parse(debug9);
-                        return debug4.parse(debug1, debug12).map(debug0 -> Pair.of(debug0, OptionalInt.empty()));
-                    } catch (IOException |com.google.gson.JsonIOException|com.google.gson.JsonSyntaxException debug7) {
-                        return DataResult.error("Failed to parse " + debug6 + " file: " + debug7.getMessage());
+                    ResourceLocation objectLocation = objectKey.location();
+                    ResourceLocation resourceLocation = new ResourceLocation(objectLocation.getNamespace(), resourceKey.location().getPath() + "/" + objectLocation.getPath() + ".json");
+                    try(Resource resource = resourceManager.getResource(resourceLocation);
+                        Reader reader = new InputStreamReader(resource.getInputStream(), StandardCharsets.UTF_8)) {
+                        JsonParser parser = new JsonParser();
+                        JsonElement element = parser.parse(reader);
+                        return decoder.parse(jsonElementDynamicOps, element).map(instance -> Pair.of(instance, OptionalInt.empty()));
+                    } catch (IOException |com.google.gson.JsonIOException|com.google.gson.JsonSyntaxException ex) {
+                        return DataResult.error("Failed to parse " + resourceLocation + " file: " + ex.getMessage());
                     }
                     // MagmaCube end - decompile fix
                 }
 
                 public String toString() {
-                    return "ResourceAccess[" + debug0 + "]";
+                    return "ResourceAccess[" + resourceManager + "]";
                 }
             };
         }
@@ -208,30 +208,30 @@ extends DelegatingOps<T> {
             private final Object2IntMap<ResourceKey<?>> ids = new Object2IntOpenCustomHashMap(Util.identityStrategy());
             private final Map<ResourceKey<?>, Lifecycle> lifecycles = Maps.newIdentityHashMap();
 
-            public <E> void add(RegistryAccess.RegistryHolder debug1, ResourceKey<E> debug2, Encoder<E> debug3, int debug4, E debug5, Lifecycle debug6) {
-                DataResult debug7 = debug3.encodeStart(RegistryWriteOps.create(JsonOps.INSTANCE, debug1), debug5);
-                Optional debug8 = debug7.error();
-                if (debug8.isPresent()) {
-                    LOGGER.error("Error adding element: {}", (Object)((DataResult.PartialResult)debug8.get()).message());
+            public <E> void add(RegistryAccess.RegistryHolder registryHolder, ResourceKey<E> resourceKey, Encoder<E> encoder, int id, E instance, Lifecycle lifecycle) {
+                DataResult<JsonElement> dataResult = encoder.encodeStart(RegistryWriteOps.create(JsonOps.INSTANCE, registryHolder), instance);
+                Optional<DataResult.PartialResult<JsonElement>> optional = dataResult.error();
+                if (optional.isPresent()) {
+                    LOGGER.error("Error adding element: {}", optional.get().message());
                     return;
                 }
-                this.data.put(debug2, (JsonElement)debug7.result().get());
-                this.ids.put(debug2, debug4);
-                this.lifecycles.put(debug2, debug6);
+                this.data.put(resourceKey, dataResult.result().get());
+                this.ids.put(resourceKey, id);
+                this.lifecycles.put(resourceKey, lifecycle);
             }
 
             @Override
-            public Collection<ResourceLocation> listResources(ResourceKey<? extends Registry<?>> debug12) {
-                return this.data.keySet().stream().filter(debug1 -> debug1.isFor(debug12)).map(debug1 -> new ResourceLocation(debug1.location().getNamespace(), debug12.location().getPath() + "/" + debug1.location().getPath() + ".json")).collect(Collectors.toList());
+            public Collection<ResourceLocation> listResources(ResourceKey<? extends Registry<?>> resourceKey) {
+                return this.data.keySet().stream().filter(objectKey -> objectKey.isFor(resourceKey)).map(objectKey -> new ResourceLocation(objectKey.location().getNamespace(), resourceKey.location().getPath() + "/" + objectKey.location().getPath() + ".json")).collect(Collectors.toList());
             }
 
             @Override
-            public <E> DataResult<Pair<E, OptionalInt>> parseElement(DynamicOps<JsonElement> debug1, ResourceKey<? extends Registry<E>> debug22, ResourceKey<E> debug3, Decoder<E> debug4) {
-                JsonElement debug5 = this.data.get(debug3);
-                if (debug5 == null) {
-                    return DataResult.error((String)("Unknown element: " + debug3));
+            public <E> DataResult<Pair<E, OptionalInt>> parseElement(DynamicOps<JsonElement> dynamicOps, ResourceKey<? extends Registry<E>> resourceKey, ResourceKey<E> key, Decoder<E> decoder) {
+                JsonElement json = this.data.get(key);
+                if (json == null) {
+                    return DataResult.error((String)("Unknown element: " + key));
                 }
-                return debug4.parse(debug1, debug5).setLifecycle(this.lifecycles.get(debug3)).map(debug2 -> Pair.of(debug2, OptionalInt.of(this.ids.getInt((Object)debug3)))); // MagmaCube - decompile fix
+                return decoder.parse(dynamicOps, json).setLifecycle(this.lifecycles.get(key)).map(instance -> Pair.of(instance, OptionalInt.of(this.ids.getInt(key)))); // MagmaCube - decompile fix
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/commands/EmoteCommands.java b/src/main/java/net/minecraft/server/commands/EmoteCommands.java
index 01877b8844176fb656511a5b46d84eb0e2a8bad6..c1706c27f830ad50fd4e0800d71f0463f4a86df3 100644
--- a/src/main/java/net/minecraft/server/commands/EmoteCommands.java
+++ b/src/main/java/net/minecraft/server/commands/EmoteCommands.java
@@ -34,7 +34,7 @@ public class EmoteCommands {
             if (debug2 != null) {
                 TextFilter debug4;
                 if (debug2 instanceof ServerPlayer && (debug4 = ((ServerPlayer)debug2).getTextFilter()) != null) {
-                    debug4.processStreamMessage(debug1).thenAcceptAsync(debug32 -> debug32.ifPresent(debug3 -> debug3.getPlayerList().broadcastMessage(EmoteCommands.createMessage((CommandContext<CommandSourceStack>)debug0, debug3), ChatType.CHAT, debug2.getUUID())), (Executor)debug3);
+                    debug4.processStreamMessage(debug1).thenAcceptAsync(debug32 -> debug32.ifPresent(debug3l -> debug3.getPlayerList().broadcastMessage(EmoteCommands.createMessage((CommandContext<CommandSourceStack>)debug0, debug3l), ChatType.CHAT, debug2.getUUID())), (Executor)debug3); // MagmaCube - decompile fix
                     return 1;
                 }
                 debug3.getPlayerList().broadcastMessage(EmoteCommands.createMessage((CommandContext<CommandSourceStack>)debug0, debug1), ChatType.CHAT, debug2.getUUID());
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index dce2893bfdee9ba6f9f5fab113524d8841865c83..bfec8f5f65548095337c8b01ec01dd612cf9d9d6 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -315,7 +315,7 @@ implements ServerGamePacketListener {
 
     private <T> void filterTextPacket(T debug12, Consumer<T> debug22, BiFunction<TextFilter, T, CompletableFuture<Optional<T>>> debug3) {
         MinecraftServer debug4 = this.player.getLevel().getServer();
-        Consumer<Object> debug5 = debug2 -> {
+        Consumer<T> debug5 = debug2 -> { // MagmaCube - decompile fix
             if (this.getConnection().isConnected()) {
                 debug22.accept(debug2);
             } else {
@@ -324,7 +324,7 @@ implements ServerGamePacketListener {
         };
         TextFilter debug6 = this.player.getTextFilter();
         if (debug6 != null) {
-            debug3.apply(debug6, (TextFilter)debug12).thenAcceptAsync(debug1 -> debug1.ifPresent(debug5), (Executor)debug4);
+            debug3.apply(debug6, debug12).thenAcceptAsync(debug1 -> debug1.ifPresent(debug5), (Executor)debug4); // MagmaCube - decompile fix
         } else {
             debug4.execute(() -> debug5.accept(debug12));
         }
@@ -706,7 +706,8 @@ implements ServerGamePacketListener {
         if (!Inventory.isHotbarSlot(debug7) && debug7 != 40) {
             return;
         }
-        this.filterTextPacket(debug4, debug5 ? debug2 -> this.signBook((String)debug2.get(0), debug2.subList(1, debug2.size()), debug7) : debug2 -> this.updateBookContents((List<String>)debug2, debug7));
+        int finalDebug = debug7; // MagmaCube - decompile fix
+        this.filterTextPacket(debug4, debug5 ? debug2 -> this.signBook((String)debug2.get(0), debug2.subList(1, debug2.size()), finalDebug) : debug2 -> this.updateBookContents((List<String>)debug2, finalDebug)); // MagmaCube - decompile fix
     }
 
     private void updateBookContents(List<String> debug1, int debug2) {
diff --git a/src/main/java/net/minecraft/server/network/TextFilterClient.java b/src/main/java/net/minecraft/server/network/TextFilterClient.java
index 74be68db987001bb323c42201734afb01063521d..09eb81a17d0f6ecfafd82082fbef8dc17b6f8ea3 100644
--- a/src/main/java/net/minecraft/server/network/TextFilterClient.java
+++ b/src/main/java/net/minecraft/server/network/TextFilterClient.java
@@ -1,6 +1,9 @@
 package net.minecraft.server.network;
 
 import java.util.List;
+
+import com.google.common.collect.ImmutableList;
+import net.minecraft.Util;
 import net.minecraft.util.thread.ProcessorMailbox;
 import org.apache.logging.log4j.LogManager;
 import com.google.gson.JsonElement;
@@ -33,14 +36,14 @@ public class TextFilterClient implements AutoCloseable
     private static final Logger LOGGER;
     private static final AtomicInteger WORKER_COUNT;
     private static final ThreadFactory THREAD_FACTORY;
-    private final URL chatEndpoint;
-    private final URL joinEndpoint;
-    private final URL leaveEndpoint;
-    private final String authKey;
-    private final int ruleId;
-    private final String serverId;
-    private final IgnoreStrategy chatIgnoreStrategy;
-    private final ExecutorService workerPool;
+    private final URL chatEndpoint = null; // MagmaCube - decompile fix
+    private final URL joinEndpoint = null; // MagmaCube - decompile fix
+    private final URL leaveEndpoint = null; // MagmaCube - decompile fix
+    private final String authKey = null; // MagmaCube - decompile fix
+    private final int ruleId = 0; // MagmaCube - decompile fix
+    private final String serverId = null; // MagmaCube - decompile fix
+    private final IgnoreStrategy chatIgnoreStrategy = null; // MagmaCube - decompile fix
+    private final ExecutorService workerPool = null; // MagmaCube - decompile fix
     
     private void processJoinOrLeave(final GameProfile debug1, final URL debug2, final Executor debug3) {
         final JsonObject debug4 = new JsonObject();
@@ -48,10 +51,9 @@ public class TextFilterClient implements AutoCloseable
         debug4.addProperty("room", "Chat");
         debug4.addProperty("user_id", debug1.getId().toString());
         debug4.addProperty("user_display_name", debug1.getName());
-        final JsonObject debug6;
         debug3.execute(() -> {
             try {
-                this.processRequest(debug6, debug2);
+                this.processRequest(debug4, debug2); // MagmaCube - decompile fix
             }
             catch (Exception debug5) {
                 TextFilterClient.LOGGER.warn("Failed to send join/leave packet to {} for player {}", (Object)debug2, (Object)debug1, (Object)debug5);
@@ -70,25 +72,20 @@ public class TextFilterClient implements AutoCloseable
         debug5.addProperty("player", debug1.getId().toString());
         debug5.addProperty("player_display_name", debug1.getName());
         debug5.addProperty("text", debug2);
-        final JsonObject debug11;
-        JsonObject debug6;
-        boolean debug7;
-        String debug8;
-        int debug9;
         return CompletableFuture.supplyAsync(() -> {
             try {
-                debug6 = this.processRequestResponse(debug11, this.chatEndpoint);
-                debug7 = GsonHelper.getAsBoolean(debug6, "response", false);
+                JsonObject debug6 = this.processRequestResponse(debug5, this.chatEndpoint); // MagmaCube - decompile fix
+                boolean debug7 = GsonHelper.getAsBoolean(debug6, "response", false); // MagmaCube - decompile fix
                 if (debug7) {
                     return Optional.of(debug2);
                 }
                 else {
-                    debug8 = GsonHelper.getAsString(debug6, "hashed", null);
+                    String debug8 = GsonHelper.getAsString(debug6, "hashed", null); // MagmaCube - decompile fix
                     if (debug8 == null) {
                         return Optional.empty();
                     }
                     else {
-                        debug9 = GsonHelper.getAsJsonArray(debug6, "hashes").size();
+                        int debug9 = GsonHelper.getAsJsonArray(debug6, "hashes").size(); // MagmaCube - decompile fix
                         return debug3.shouldIgnore(debug8, debug9) ? Optional.empty() : Optional.of(debug8);
                     }
                 }
@@ -162,9 +159,8 @@ public class TextFilterClient implements AutoCloseable
     static {
         LOGGER = LogManager.getLogger();
         WORKER_COUNT = new AtomicInteger(1);
-        final Thread debug;
         THREAD_FACTORY = (debug0 -> {
-            debug = new Thread(debug0);
+            Thread debug = new Thread(debug0); // MagmaCube - decompile fix
             debug.setName("Chat-Filter-Worker-" + TextFilterClient.WORKER_COUNT.getAndIncrement());
             return debug;
         });
@@ -200,103 +196,12 @@ public class TextFilterClient implements AutoCloseable
         
         @Override
         public CompletableFuture<Optional<List<String>>> processMessageBundle(final List<String> debug1) {
-            // 
-            // This method could not be decompiled.
-            // 
-            // Original Bytecode:
-            // 
-            //     1: invokeinterface java/util/List.stream:()Ljava/util/stream/Stream;
-            //     6: aload_0         /* this */
-            //     7: invokedynamic   BootstrapMethod #1, apply:(Lnet/minecraft/server/network/TextFilterClient$PlayerContext;)Ljava/util/function/Function;
-            //    12: invokeinterface java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
-            //    17: invokestatic    com/google/common/collect/ImmutableList.toImmutableList:()invokestatic   !!! ERROR
-            //    20: invokeinterface java/util/stream/Stream.collect:(invokeinterface!!! ERROR
-            //    25: checkcast       Ljava/util/List;
-            //    28: astore_2        /* debug2 */
-            //    29: aload_2         /* debug2 */
-            //    30: invokestatic    net/minecraft/Util.sequence:(Ljava/util/List;)Ljava/util/concurrent/CompletableFuture;
-            //    33: invokedynamic   BootstrapMethod #2, apply:()Ljava/util/function/Function;
-            //    38: invokevirtual   java/util/concurrent/CompletableFuture.thenApply:(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;
-            //    41: invokedynamic   BootstrapMethod #3, apply:()Ljava/util/function/Function;
-            //    46: invokevirtual   java/util/concurrent/CompletableFuture.exceptionally:(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;
-            //    49: areturn        
-            //    Signature:
-            //  (Ljava/util/List<Ljava/lang/String;>;)Ljava/util/concurrent/CompletableFuture<Ljava/util/Optional<Ljava/util/List<Ljava/lang/String;>;>;>;
-            // 
-            // The error that occurred was:
-            // 
-            // java.lang.IllegalArgumentException: Argument 'type' cannot be null.
-            //     at com.strobel.core.VerifyArgument.notNull(VerifyArgument.java:38)
-            //     at com.strobel.assembler.ir.attributes.LocalVariableTableEntry.<init>(LocalVariableTableEntry.java:41)
-            //     at com.strobel.assembler.ir.MetadataReader.readAttributeCore(MetadataReader.java:183)
-            //     at com.strobel.assembler.metadata.ClassFileReader.readAttributeCore(ClassFileReader.java:260)
-            //     at com.strobel.assembler.ir.MetadataReader.readAttribute(MetadataReader.java:50)
-            //     at com.strobel.assembler.ir.MetadataReader.readAttributes(MetadataReader.java:40)
-            //     at com.strobel.assembler.metadata.ClassFileReader.readAttributeCore(ClassFileReader.java:202)
-            //     at com.strobel.assembler.ir.MetadataReader.inflateAttribute(MetadataReader.java:368)
-            //     at com.strobel.assembler.ir.MetadataReader.inflateAttributes(MetadataReader.java:345)
-            //     at com.strobel.assembler.metadata.ClassFileReader.defineMethods(ClassFileReader.java:977)
-            //     at com.strobel.assembler.metadata.ClassFileReader.readClass(ClassFileReader.java:440)
-            //     at com.strobel.assembler.metadata.ClassFileReader.readClass(ClassFileReader.java:376)
-            //     at com.strobel.assembler.metadata.MetadataSystem.resolveType(MetadataSystem.java:124)
-            //     at com.strobel.decompiler.NoRetryMetadataSystem.resolveType(DecompilerDriver.java:482)
-            //     at com.strobel.assembler.metadata.MetadataSystem.resolveCore(MetadataSystem.java:76)
-            //     at com.strobel.assembler.metadata.MetadataResolver.resolve(MetadataResolver.java:104)
-            //     at com.strobel.assembler.metadata.CoreMetadataFactory$UnresolvedType.resolve(CoreMetadataFactory.java:614)
-            //     at com.strobel.assembler.metadata.MetadataResolver.resolve(MetadataResolver.java:91)
-            //     at com.strobel.assembler.metadata.CoreMetadataFactory$UnresolvedType.resolve(CoreMetadataFactory.java:614)
-            //     at com.strobel.assembler.metadata.ClassFileReader.populateNamedInnerTypes(ClassFileReader.java:697)
-            //     at com.strobel.assembler.metadata.ClassFileReader.readClass(ClassFileReader.java:441)
-            //     at com.strobel.assembler.metadata.ClassFileReader.readClass(ClassFileReader.java:376)
-            //     at com.strobel.assembler.metadata.MetadataSystem.resolveType(MetadataSystem.java:124)
-            //     at com.strobel.decompiler.NoRetryMetadataSystem.resolveType(DecompilerDriver.java:482)
-            //     at com.strobel.assembler.metadata.MetadataSystem.resolveCore(MetadataSystem.java:76)
-            //     at com.strobel.assembler.metadata.MetadataResolver.resolve(MetadataResolver.java:104)
-            //     at com.strobel.assembler.metadata.CoreMetadataFactory$UnresolvedType.resolve(CoreMetadataFactory.java:614)
-            //     at com.strobel.assembler.metadata.ParameterizedType.getGenericParameters(ParameterizedType.java:71)
-            //     at com.strobel.assembler.metadata.TypeReference.hasGenericParameters(TypeReference.java:244)
-            //     at com.strobel.assembler.metadata.TypeReference.isGenericType(TypeReference.java:263)
-            //     at com.strobel.assembler.metadata.MetadataHelper.isRawType(MetadataHelper.java:1597)
-            //     at com.strobel.assembler.metadata.MetadataHelper.asSubType(MetadataHelper.java:735)
-            //     at com.strobel.decompiler.ast.TypeAnalysis$AddMappingsForArgumentVisitor.visitParameterizedType(TypeAnalysis.java:3205)
-            //     at com.strobel.decompiler.ast.TypeAnalysis$AddMappingsForArgumentVisitor.visitParameterizedType(TypeAnalysis.java:3116)
-            //     at com.strobel.assembler.metadata.CoreMetadataFactory$UnresolvedGenericType.accept(CoreMetadataFactory.java:651)
-            //     at com.strobel.decompiler.ast.TypeAnalysis$AddMappingsForArgumentVisitor.visit(TypeAnalysis.java:3125)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2512)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:655)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:365)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
-            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
-            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
-            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
-            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:556)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
-            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
-            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
-            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:336)
-            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:257)
-            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
-            // 
-            throw new IllegalStateException("An error occurred while decompiling this method.");
+            // MagmaCube start - decompile fix
+            List<CompletableFuture<Optional<String>>> debug2 = debug1.stream().map(debug1l -> TextFilterClient.this.requestMessageProcessing(this.profile, debug1l, TextFilterClient.this.chatIgnoreStrategy, this.streamExecutor)).collect(ImmutableList.toImmutableList());
+            return Util.sequence(debug2)
+                    .thenApply(debug0 -> Optional.<List<String>>of(debug0.stream().map(o -> o.orElse("")).collect(ImmutableList.toImmutableList())))
+                    .exceptionally(debug0 -> Optional.empty());
+            // MagmaCube end - decompile fix
         }
         
         @Override
diff --git a/src/main/java/net/minecraft/util/StringDecomposer.java b/src/main/java/net/minecraft/util/StringDecomposer.java
index c101ff9822710d21515971b2ed86d3d1317eca82..a38b682961bea63863c7f9d6331abab8745aaad4 100644
--- a/src/main/java/net/minecraft/util/StringDecomposer.java
+++ b/src/main/java/net/minecraft/util/StringDecomposer.java
@@ -85,44 +85,44 @@ public class StringDecomposer
         return iterateFormatted(debug0, debug1, debug2, debug2, debug3);
     }
     
-    public static boolean iterateFormatted(final String debug0, final int debug1, final Style debug2, final Style debug3, final FormattedCharSink debug4) {
+    public static boolean iterateFormatted(final String s, final int a, final Style style, final Style additionalStyle, final FormattedCharSink formattedCharSink) {
         // todo: fix broken legacy color formatting
-        final int debug5 = debug0.length();
-        Style debug6 = debug2;
-        for (int debug7 = debug1; debug7 < debug5; ++debug7) {
-            final char debug8 = debug0.charAt(debug7);
-            if (debug8 == '§') {
-                if (debug7 + 1 >= debug5) {
+        final int length = s.length();
+        Style style1 = style;
+        for (int i = a; i < length; ++i) {
+            final char charAt = s.charAt(i);
+            if (charAt == '§') {
+                if (i + 1 >= length) {
                     break;
                 }
-                final char debug9 = debug0.charAt(debug7 + 1);
-                final ChatFormatting debug10 = ChatFormatting.getByCode(debug9);
-                if (debug10 != null) {
-                    debug6 = ((debug10 == ChatFormatting.RESET) ? debug3 : debug6.applyLegacyFormat(debug10));
+                final char character = s.charAt(i + 1);
+                final ChatFormatting formatting = ChatFormatting.getByCode(character);
+                if (formatting != null) {
+                    style1 = ((formatting == ChatFormatting.RESET) ? additionalStyle : style1.applyLegacyFormat(formatting));
                 }
-                ++debug7;
+                ++i;
             }
-            else if (Character.isHighSurrogate(debug8)) {
-                if (debug7 + 1 >= debug5) {
-                    if (!debug4.accept(debug7, debug6, 65533)) {
+            else if (Character.isHighSurrogate(charAt)) {
+                if (i + 1 >= length) {
+                    if (!formattedCharSink.accept(i, style1, 65533)) {
                         return false;
                     }
                     break;
                 }
                 else {
-                    final char debug9 = debug0.charAt(debug7 + 1);
-                    if (Character.isLowSurrogate(debug9)) {
-                        if (!debug4.accept(debug7, debug6, Character.toCodePoint(debug8, debug9))) {
+                    final char charAt1 = s.charAt(i + 1);
+                    if (Character.isLowSurrogate(charAt1)) {
+                        if (!formattedCharSink.accept(i, style1, Character.toCodePoint(charAt, charAt1))) {
                             return false;
                         }
-                        ++debug7;
+                        ++i;
                     }
-                    else if (!debug4.accept(debug7, debug6, 65533)) {
+                    else if (!formattedCharSink.accept(i, style1, 65533)) {
                         return false;
                     }
                 }
             }
-            else if (!feedChar(debug6, debug4, debug7, debug8)) {
+            else if (!feedChar(style1, formattedCharSink, i, charAt)) {
                 return false;
             }
         }
@@ -142,13 +142,13 @@ public class StringDecomposer
         return debug4.toString();
     }
     
-    public static String getPlainText(final FormattedText debug0) {
-        final StringBuilder debug4 = new StringBuilder();
-        iterateFormatted(debug0, Style.EMPTY, (debug1, debug2, debug3) -> {
-            debug4.appendCodePoint(debug3);
+    public static String getPlainText(final FormattedText formattedText) {
+        final StringBuilder sb = new StringBuilder();
+        iterateFormatted(formattedText, Style.EMPTY, (debug1, debug2, debug3) -> {
+            sb.appendCodePoint(debug3);
             return true;
         });
-        return debug4.toString();
+        return sb.toString();
     }
     
     static {
diff --git a/src/main/java/net/minecraft/world/effect/AbsoptionMobEffect.java b/src/main/java/net/minecraft/world/effect/AbsoptionMobEffect.java
index 2efb601f10041b83a3b2337400afc3d722e3df98..47330378df3b2dc6af3afb3a2b58cb247a0bab24 100644
--- a/src/main/java/net/minecraft/world/effect/AbsoptionMobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/AbsoptionMobEffect.java
@@ -10,14 +10,14 @@ public class AbsoptionMobEffect extends MobEffect
     }
     
     @Override
-    public void removeAttributeModifiers(final LivingEntity debug1, final AttributeMap debug2, final int debug3) {
-        debug1.setAbsorptionAmount(debug1.getAbsorptionAmount() - 4 * (debug3 + 1));
-        super.removeAttributeModifiers(debug1, debug2, debug3);
+    public void removeAttributeModifiers(final LivingEntity livingEntity, final AttributeMap attributeMap, final int amount) {
+        livingEntity.setAbsorptionAmount(livingEntity.getAbsorptionAmount() - 4 * (amount + 1));
+        super.removeAttributeModifiers(livingEntity, attributeMap, amount);
     }
     
     @Override
-    public void addAttributeModifiers(final LivingEntity debug1, final AttributeMap debug2, final int debug3) {
-        debug1.setAbsorptionAmount(debug1.getAbsorptionAmount() + 4 * (debug3 + 1));
-        super.addAttributeModifiers(debug1, debug2, debug3);
+    public void addAttributeModifiers(final LivingEntity livingEntity, final AttributeMap attributeMap, final int amount) {
+        livingEntity.setAbsorptionAmount(livingEntity.getAbsorptionAmount() + 4 * (amount + 1));
+        super.addAttributeModifiers(livingEntity, attributeMap, amount);
     }
 }
diff --git a/src/main/java/net/minecraft/world/effect/AttackDamageMobEffect.java b/src/main/java/net/minecraft/world/effect/AttackDamageMobEffect.java
index c2895ba845fcde1994adc233e266e992783e8505..438243b709ce699d71b6a6101565cc96194374c2 100644
--- a/src/main/java/net/minecraft/world/effect/AttackDamageMobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/AttackDamageMobEffect.java
@@ -12,7 +12,7 @@ public class AttackDamageMobEffect extends MobEffect
     }
     
     @Override
-    public double getAttributeModifierValue(final int debug1, final AttributeModifier debug2) {
-        return this.multiplier * (debug1 + 1);
+    public double getAttributeModifierValue(final int amount, final AttributeModifier attributeModifier) {
+        return this.multiplier * (amount + 1);
     }
 }
diff --git a/src/main/java/net/minecraft/world/effect/HealthBoostMobEffect.java b/src/main/java/net/minecraft/world/effect/HealthBoostMobEffect.java
index a1f11923683a2a7b39b5ea174e5312234fd8f944..658aaab2de7a10b5b4785e26db38b3925303ac24 100644
--- a/src/main/java/net/minecraft/world/effect/HealthBoostMobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/HealthBoostMobEffect.java
@@ -10,10 +10,10 @@ public class HealthBoostMobEffect extends MobEffect
     }
     
     @Override
-    public void removeAttributeModifiers(final LivingEntity debug1, final AttributeMap debug2, final int debug3) {
-        super.removeAttributeModifiers(debug1, debug2, debug3);
-        if (debug1.getHealth() > debug1.getMaxHealth()) {
-            debug1.setHealth(debug1.getMaxHealth());
+    public void removeAttributeModifiers(final LivingEntity livingEntity, final AttributeMap attributeMap, final int amount) {
+        super.removeAttributeModifiers(livingEntity, attributeMap, amount);
+        if (livingEntity.getHealth() > livingEntity.getMaxHealth()) {
+            livingEntity.setHealth(livingEntity.getMaxHealth());
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/effect/MobEffect.java b/src/main/java/net/minecraft/world/effect/MobEffect.java
index a0f8ca833a7c6267b35fccccc1f15e1253fc1dbe..75b626c5c2ba2d6fe5e40f8fdcff3d7503fa5c9b 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffect.java
@@ -27,47 +27,47 @@ public class MobEffect
     private String descriptionId;
     
     @Nullable
-    public static MobEffect byId(final int debug0) {
-        return Registry.MOB_EFFECT.byId(debug0);
+    public static MobEffect byId(final int id) {
+        return Registry.MOB_EFFECT.byId(id);
     }
     
-    public static int getId(final MobEffect debug0) {
-        return Registry.MOB_EFFECT.getId(debug0);
+    public static int getId(final MobEffect mobEffect) {
+        return Registry.MOB_EFFECT.getId(mobEffect);
     }
     
-    protected MobEffect(final MobEffectCategory debug1, final int debug2) {
+    protected MobEffect(final MobEffectCategory mobEffectCategory, final int color) {
         this.attributeModifiers = Maps.newHashMap(); // MagmaCube - decompile fix
-        this.category = debug1;
-        this.color = debug2;
+        this.category = mobEffectCategory;
+        this.color = color;
     }
     
-    public void applyEffectTick(final LivingEntity debug1, final int debug2) {
+    public void applyEffectTick(final LivingEntity livingEntity, final int amplifier) {
         if (this == MobEffects.REGENERATION) {
-            if (debug1.getHealth() < debug1.getMaxHealth()) {
-                debug1.heal(1.0f);
+            if (livingEntity.getHealth() < livingEntity.getMaxHealth()) {
+                livingEntity.heal(1.0f);
             }
         }
         else if (this == MobEffects.POISON) {
-            if (debug1.getHealth() > 1.0f) {
-                debug1.hurt(DamageSource.MAGIC, 1.0f);
+            if (livingEntity.getHealth() > 1.0f) {
+                livingEntity.hurt(DamageSource.MAGIC, 1.0f);
             }
         }
         else if (this == MobEffects.WITHER) {
-            debug1.hurt(DamageSource.WITHER, 1.0f);
+            livingEntity.hurt(DamageSource.WITHER, 1.0f);
         }
-        else if (this == MobEffects.HUNGER && debug1 instanceof Player) {
-            ((Player)debug1).causeFoodExhaustion(0.005f * (debug2 + 1));
+        else if (this == MobEffects.HUNGER && livingEntity instanceof Player) {
+            ((Player)livingEntity).causeFoodExhaustion(0.005f * (amplifier + 1));
         }
-        else if (this == MobEffects.SATURATION && debug1 instanceof Player) {
-            if (!debug1.level.isClientSide) {
-                ((Player)debug1).getFoodData().eat(debug2 + 1, 1.0f);
+        else if (this == MobEffects.SATURATION && livingEntity instanceof Player) {
+            if (!livingEntity.level.isClientSide) {
+                ((Player)livingEntity).getFoodData().eat(amplifier + 1, 1.0f);
             }
         }
-        else if ((this == MobEffects.HEAL && !debug1.isInvertedHealAndHarm()) || (this == MobEffects.HARM && debug1.isInvertedHealAndHarm())) {
-            debug1.heal(Math.max(4 << debug2, 0));
+        else if ((this == MobEffects.HEAL && !livingEntity.isInvertedHealAndHarm()) || (this == MobEffects.HARM && livingEntity.isInvertedHealAndHarm())) {
+            livingEntity.heal(Math.max(4 << amplifier, 0));
         }
-        else if ((this == MobEffects.HARM && !debug1.isInvertedHealAndHarm()) || (this == MobEffects.HEAL && debug1.isInvertedHealAndHarm())) {
-            debug1.hurt(DamageSource.MAGIC, 6 << debug2);
+        else if ((this == MobEffects.HARM && !livingEntity.isInvertedHealAndHarm()) || (this == MobEffects.HEAL && livingEntity.isInvertedHealAndHarm())) {
+            livingEntity.hurt(DamageSource.MAGIC, 6 << amplifier);
         }
     }
     
@@ -133,9 +133,9 @@ public class MobEffect
         return this.color;
     }
     
-    public MobEffect addAttributeModifier(final Attribute debug1, final String debug2, final double debug3, final AttributeModifier.Operation debug5) {
-        final AttributeModifier debug6 = new AttributeModifier(UUID.fromString(debug2), this::getDescriptionId, debug3, debug5);
-        this.attributeModifiers.put(debug1, debug6);
+    public MobEffect addAttributeModifier(final Attribute attribute, final String id, final double amount, final AttributeModifier.Operation operation) {
+        final AttributeModifier attributeModifier = new AttributeModifier(UUID.fromString(id), this::getDescriptionId, amount, operation);
+        this.attributeModifiers.put(attribute, attributeModifier);
         return this;
     }
     
@@ -143,28 +143,28 @@ public class MobEffect
         return this.attributeModifiers;
     }
     
-    public void removeAttributeModifiers(final LivingEntity debug1, final AttributeMap debug2, final int debug3) {
-        for (final Map.Entry<Attribute, AttributeModifier> debug4 : this.attributeModifiers.entrySet()) {
-            final AttributeInstance debug5 = debug2.getInstance(debug4.getKey());
-            if (debug5 != null) {
-                debug5.removeModifier(debug4.getValue());
+    public void removeAttributeModifiers(final LivingEntity livingEntity, final AttributeMap attributeMap, final int amount) {
+        for (final Map.Entry<Attribute, AttributeModifier> attributeModifierEntry : this.attributeModifiers.entrySet()) {
+            final AttributeInstance attributeInstance = attributeMap.getInstance(attributeModifierEntry.getKey());
+            if (attributeInstance != null) {
+                attributeInstance.removeModifier(attributeModifierEntry.getValue());
             }
         }
     }
     
-    public void addAttributeModifiers(final LivingEntity debug1, final AttributeMap debug2, final int debug3) {
-        for (final Map.Entry<Attribute, AttributeModifier> debug4 : this.attributeModifiers.entrySet()) {
-            final AttributeInstance debug5 = debug2.getInstance(debug4.getKey());
-            if (debug5 != null) {
-                final AttributeModifier debug6 = debug4.getValue();
-                debug5.removeModifier(debug6);
-                debug5.addPermanentModifier(new AttributeModifier(debug6.getId(), this.getDescriptionId() + " " + debug3, this.getAttributeModifierValue(debug3, debug6), debug6.getOperation()));
+    public void addAttributeModifiers(final LivingEntity livingEntity, final AttributeMap attributeMap, final int amount) {
+        for (final Map.Entry<Attribute, AttributeModifier> attributeModifierEntry : this.attributeModifiers.entrySet()) {
+            final AttributeInstance attributeInstance = attributeMap.getInstance(attributeModifierEntry.getKey());
+            if (attributeInstance != null) {
+                final AttributeModifier attributeModifier = attributeModifierEntry.getValue();
+                attributeInstance.removeModifier(attributeModifier);
+                attributeInstance.addPermanentModifier(new AttributeModifier(attributeModifier.getId(), this.getDescriptionId() + " " + amount, this.getAttributeModifierValue(amount, attributeModifier), attributeModifier.getOperation()));
             }
         }
     }
     
-    public double getAttributeModifierValue(final int debug1, final AttributeModifier debug2) {
-        return debug2.getAmount() * (debug1 + 1);
+    public double getAttributeModifierValue(final int amount, final AttributeModifier attributeModifier) {
+        return attributeModifier.getAmount() * (amount + 1);
     }
     
     public boolean isBeneficial() {
diff --git a/src/main/java/net/minecraft/world/effect/MobEffects.java b/src/main/java/net/minecraft/world/effect/MobEffects.java
index fcd26312fb7046e45d5590a54dec743b93e0770c..ea4ebe5b87453d79b2b8b71adfaafcef25244413 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffects.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffects.java
@@ -43,8 +43,8 @@ public class MobEffects
     public static final MobEffect BAD_OMEN;
     public static final MobEffect HERO_OF_THE_VILLAGE;
     
-    private static MobEffect register(final int debug0, final String debug1, final MobEffect debug2) {
-        return Registry.registerMapping(Registry.MOB_EFFECT, debug0, debug1, debug2);
+    private static MobEffect register(final int id, final String effectId, final MobEffect instance) {
+        return Registry.registerMapping(Registry.MOB_EFFECT, id, effectId, instance);
     }
     
     static {
@@ -85,15 +85,15 @@ public class MobEffects
             }
             
             @Override
-            public void applyEffectTick(final LivingEntity debug1, final int debug2) {
-                if (debug1 instanceof ServerPlayer && !debug1.isSpectator()) {
-                    final ServerPlayer debug3 = (ServerPlayer)debug1;
-                    final ServerLevel debug4 = debug3.getLevel();
-                    if (debug4.getDifficulty() == Difficulty.PEACEFUL) {
+            public void applyEffectTick(final LivingEntity livingEntity, final int amplifier) {
+                if (livingEntity instanceof ServerPlayer && !livingEntity.isSpectator()) {
+                    final ServerPlayer player = (ServerPlayer)livingEntity;
+                    final ServerLevel level = player.getLevel();
+                    if (level.getDifficulty() == Difficulty.PEACEFUL) {
                         return;
                     }
-                    if (debug4.isVillage(debug1.blockPosition())) {
-                        debug4.getRaids().createOrExtendRaid(debug3);
+                    if (level.isVillage(livingEntity.blockPosition())) {
+                        level.getRaids().createOrExtendRaid(player);
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java
index 2318552363eaf7d65556f546ee944e72fb89f087..87840ebe25631e62f2f019dd75bccbfff6d06927 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java
@@ -19,19 +19,19 @@ public class AttributeModifier
     private final Supplier<String> nameGetter;
     private final UUID id;
     
-    public AttributeModifier(final String debug1, final double debug2, final Operation debug4) {
-        this(Mth.createInsecureUUID((Random)ThreadLocalRandom.current()), () -> debug1, debug2, debug4);
+    public AttributeModifier(final String id, final double amount, final Operation operation) {
+        this(Mth.createInsecureUUID((Random)ThreadLocalRandom.current()), () -> id, amount, operation);
     }
     
-    public AttributeModifier(final UUID debug1, final String debug2, final double debug3, final Operation debug5) {
-        this(debug1, () -> debug2, debug3, debug5);
+    public AttributeModifier(final UUID id, final String name, final double amount, final Operation operation) {
+        this(id, () -> name, amount, operation);
     }
     
-    public AttributeModifier(final UUID debug1, final Supplier<String> debug2, final double debug3, final Operation debug5) {
-        this.id = debug1;
-        this.nameGetter = debug2;
-        this.amount = debug3;
-        this.operation = debug5;
+    public AttributeModifier(final UUID id, final Supplier<String> nameGetter, final double amount, final Operation operation) {
+        this.id = id;
+        this.nameGetter = nameGetter;
+        this.amount = amount;
+        this.operation = operation;
     }
     
     public UUID getId() {
@@ -51,15 +51,15 @@ public class AttributeModifier
     }
     
     @Override
-    public boolean equals(final Object debug1) {
-        if (this == debug1) {
+    public boolean equals(final Object o) {
+        if (this == o) {
             return true;
         }
-        if (debug1 == null || this.getClass() != debug1.getClass()) {
+        if (o == null || this.getClass() != o.getClass()) {
             return false;
         }
-        final AttributeModifier debug2 = (AttributeModifier)debug1;
-        return Objects.equals(this.id, debug2.id);
+        final AttributeModifier that = (AttributeModifier)o;
+        return Objects.equals(this.id, that.id);
     }
     
     @Override
@@ -73,23 +73,23 @@ public class AttributeModifier
     }
     
     public CompoundTag save() {
-        final CompoundTag debug1 = new CompoundTag();
-        debug1.putString("Name", this.getName());
-        debug1.putDouble("Amount", this.amount);
-        debug1.putInt("Operation", this.operation.toValue());
-        debug1.putUUID("UUID", this.id);
-        return debug1;
+        final CompoundTag tag = new CompoundTag();
+        tag.putString("Name", this.getName());
+        tag.putDouble("Amount", this.amount);
+        tag.putInt("Operation", this.operation.toValue());
+        tag.putUUID("UUID", this.id);
+        return tag;
     }
     
     @Nullable
-    public static AttributeModifier load(final CompoundTag debug0) {
+    public static AttributeModifier load(final CompoundTag tag) {
         try {
-            final UUID debug = debug0.getUUID("UUID");
-            final Operation debug2 = Operation.fromValue(debug0.getInt("Operation"));
-            return new AttributeModifier(debug, debug0.getString("Name"), debug0.getDouble("Amount"), debug2);
+            final UUID debug = tag.getUUID("UUID");
+            final Operation debug2 = Operation.fromValue(tag.getInt("Operation"));
+            return new AttributeModifier(debug, tag.getString("Name"), tag.getDouble("Amount"), debug2);
         }
-        catch (Exception debug3) {
-            AttributeModifier.LOGGER.warn("Unable to create attribute: {}", (Object)debug3.getMessage());
+        catch (Exception ex) {
+            AttributeModifier.LOGGER.warn("Unable to create attribute: {}", ex.getMessage());
             return null;
         }
     }
@@ -107,19 +107,19 @@ public class AttributeModifier
         private static final Operation[] OPERATIONS;
         private final int value;
         
-        private Operation(final int debug3) {
-            this.value = debug3;
+        private Operation(final int value) {
+            this.value = value;
         }
         
         public int toValue() {
             return this.value;
         }
         
-        public static Operation fromValue(final int debug0) {
-            if (debug0 < 0 || debug0 >= Operation.OPERATIONS.length) {
-                throw new IllegalArgumentException("No operation with value " + debug0);
+        public static Operation fromValue(final int value) {
+            if (value < 0 || value >= Operation.OPERATIONS.length) {
+                throw new IllegalArgumentException("No operation with value " + value);
             }
-            return Operation.OPERATIONS[debug0];
+            return Operation.OPERATIONS[value];
         }
         
         static {
diff --git a/src/main/java/net/minecraft/world/level/LevelReader.java b/src/main/java/net/minecraft/world/level/LevelReader.java
index 7a822331ed51771ccf3a975ce4ee26a8a4a4e001..ea4830fcc19e0fcb1c459c9ba5698e280af63faa 100644
--- a/src/main/java/net/minecraft/world/level/LevelReader.java
+++ b/src/main/java/net/minecraft/world/level/LevelReader.java
@@ -181,14 +181,14 @@ BiomeManager.NoiseBiomeSource {
     }
 
     @Deprecated
-    default public boolean hasChunksAt(int debug1, int debug2, int debug3, int debug4, int debug5, int debug6) {
-        if (debug5 < 0 || debug2 >= 256) {
+    default public boolean hasChunksAt(int fromX, int fromY, int fromZ, int toX, int toY, int toZ) {
+        if (toY < 0 || fromY >= 256) {
             return false;
         }
-        debug3 >>= 4;
-        debug6 >>= 4;
-        for (int debug7 = debug1 >>= 4; debug7 <= (debug4 >>= 4); ++debug7) {
-            for (int debug8 = debug3; debug8 <= debug6; ++debug8) {
+        fromZ >>= 4;
+        toZ >>= 4;
+        for (int debug7 = fromX >>= 4; debug7 <= (toX >>= 4); ++debug7) {
+            for (int debug8 = fromZ; debug8 <= toZ; ++debug8) {
                 if (this.hasChunk(debug7, debug8)) continue;
                 return false;
             }
diff --git a/src/main/java/net/minecraft/world/level/biome/BiomeSource.java b/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
index aab4f807a055b55c659e2efd0b5faf61a8d74ea1..0a25fdc19a71433d038cf3b1a6b7372c7a8e1edd 100644
--- a/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
@@ -44,7 +44,7 @@ implements BiomeManager.NoiseBiomeSource {
     protected final List<Biome> possibleBiomes;
 
     protected BiomeSource(Stream<Supplier<Biome>> debug1) {
-        this((List)debug1.map(Supplier::get).collect(ImmutableList.toImmutableList()));
+        this(debug1.map(Supplier::get).collect(ImmutableList.toImmutableList()));
     }
 
     protected BiomeSource(List<Biome> debug1) {
@@ -69,7 +69,7 @@ implements BiomeManager.NoiseBiomeSource {
         int debug11 = debug8 - debug5 + 1;
         int debug12 = debug9 - debug6 + 1;
         int debug13 = debug10 - debug7 + 1;
-        HashSet debug14 = Sets.newHashSet();
+        HashSet<Biome> debug14 = Sets.newHashSet();
         for (int debug15 = 0; debug15 < debug13; ++debug15) {
             for (int debug16 = 0; debug16 < debug11; ++debug16) {
                 for (int debug17 = 0; debug17 < debug12; ++debug17) {
@@ -121,8 +121,8 @@ implements BiomeManager.NoiseBiomeSource {
         return debug13;
     }
 
-    public boolean canGenerateStructure(StructureFeature<?> debug1) {
-        return this.supportedStructures.computeIfAbsent(debug1, debug12 -> this.possibleBiomes.stream().anyMatch(debug1l -> debug1l.getGenerationSettings().isValidStart((StructureFeature<?>)debug12))); // MagmaCube - decompile fix
+    public boolean canGenerateStructure(StructureFeature<?> structureFeature) {
+        return this.supportedStructures.computeIfAbsent(structureFeature, debug12 -> this.possibleBiomes.stream().anyMatch(debug1l -> debug1l.getGenerationSettings().isValidStart((StructureFeature<?>)debug12))); // MagmaCube - decompile fix
     }
 
     public Set<BlockState> getSurfaceBlocks() {
diff --git a/src/main/java/net/minecraft/world/level/biome/Biomes.java b/src/main/java/net/minecraft/world/level/biome/Biomes.java
index 3a8d0a098baefbff63e33291f558d42503ac8dcb..482abdffaff7142f11199afa7881902e71e31a18 100644
--- a/src/main/java/net/minecraft/world/level/biome/Biomes.java
+++ b/src/main/java/net/minecraft/world/level/biome/Biomes.java
@@ -6,169 +6,87 @@ import net.minecraft.resources.ResourceKey;
 
 public abstract class Biomes
 {
-    public static final ResourceKey<Biome> OCEAN;
-    public static final ResourceKey<Biome> PLAINS;
-    public static final ResourceKey<Biome> DESERT;
-    public static final ResourceKey<Biome> MOUNTAINS;
-    public static final ResourceKey<Biome> FOREST;
-    public static final ResourceKey<Biome> TAIGA;
-    public static final ResourceKey<Biome> SWAMP;
-    public static final ResourceKey<Biome> RIVER;
-    public static final ResourceKey<Biome> NETHER_WASTES;
-    public static final ResourceKey<Biome> THE_END;
-    public static final ResourceKey<Biome> FROZEN_OCEAN;
-    public static final ResourceKey<Biome> FROZEN_RIVER;
-    public static final ResourceKey<Biome> SNOWY_TUNDRA;
-    public static final ResourceKey<Biome> SNOWY_MOUNTAINS;
-    public static final ResourceKey<Biome> MUSHROOM_FIELDS;
-    public static final ResourceKey<Biome> MUSHROOM_FIELD_SHORE;
-    public static final ResourceKey<Biome> BEACH;
-    public static final ResourceKey<Biome> DESERT_HILLS;
-    public static final ResourceKey<Biome> WOODED_HILLS;
-    public static final ResourceKey<Biome> TAIGA_HILLS;
-    public static final ResourceKey<Biome> MOUNTAIN_EDGE;
-    public static final ResourceKey<Biome> JUNGLE;
-    public static final ResourceKey<Biome> JUNGLE_HILLS;
-    public static final ResourceKey<Biome> JUNGLE_EDGE;
-    public static final ResourceKey<Biome> DEEP_OCEAN;
-    public static final ResourceKey<Biome> STONE_SHORE;
-    public static final ResourceKey<Biome> SNOWY_BEACH;
-    public static final ResourceKey<Biome> BIRCH_FOREST;
-    public static final ResourceKey<Biome> BIRCH_FOREST_HILLS;
-    public static final ResourceKey<Biome> DARK_FOREST;
-    public static final ResourceKey<Biome> SNOWY_TAIGA;
-    public static final ResourceKey<Biome> SNOWY_TAIGA_HILLS;
-    public static final ResourceKey<Biome> GIANT_TREE_TAIGA;
-    public static final ResourceKey<Biome> GIANT_TREE_TAIGA_HILLS;
-    public static final ResourceKey<Biome> WOODED_MOUNTAINS;
-    public static final ResourceKey<Biome> SAVANNA;
-    public static final ResourceKey<Biome> SAVANNA_PLATEAU;
-    public static final ResourceKey<Biome> BADLANDS;
-    public static final ResourceKey<Biome> WOODED_BADLANDS_PLATEAU;
-    public static final ResourceKey<Biome> BADLANDS_PLATEAU;
-    public static final ResourceKey<Biome> SMALL_END_ISLANDS;
-    public static final ResourceKey<Biome> END_MIDLANDS;
-    public static final ResourceKey<Biome> END_HIGHLANDS;
-    public static final ResourceKey<Biome> END_BARRENS;
-    public static final ResourceKey<Biome> WARM_OCEAN;
-    public static final ResourceKey<Biome> LUKEWARM_OCEAN;
-    public static final ResourceKey<Biome> COLD_OCEAN;
-    public static final ResourceKey<Biome> DEEP_WARM_OCEAN;
-    public static final ResourceKey<Biome> DEEP_LUKEWARM_OCEAN;
-    public static final ResourceKey<Biome> DEEP_COLD_OCEAN;
-    public static final ResourceKey<Biome> DEEP_FROZEN_OCEAN;
-    public static final ResourceKey<Biome> THE_VOID;
-    public static final ResourceKey<Biome> SUNFLOWER_PLAINS;
-    public static final ResourceKey<Biome> DESERT_LAKES;
-    public static final ResourceKey<Biome> GRAVELLY_MOUNTAINS;
-    public static final ResourceKey<Biome> FLOWER_FOREST;
-    public static final ResourceKey<Biome> TAIGA_MOUNTAINS;
-    public static final ResourceKey<Biome> SWAMP_HILLS;
-    public static final ResourceKey<Biome> ICE_SPIKES;
-    public static final ResourceKey<Biome> MODIFIED_JUNGLE;
-    public static final ResourceKey<Biome> MODIFIED_JUNGLE_EDGE;
-    public static final ResourceKey<Biome> TALL_BIRCH_FOREST;
-    public static final ResourceKey<Biome> TALL_BIRCH_HILLS;
-    public static final ResourceKey<Biome> DARK_FOREST_HILLS;
-    public static final ResourceKey<Biome> SNOWY_TAIGA_MOUNTAINS;
-    public static final ResourceKey<Biome> GIANT_SPRUCE_TAIGA;
-    public static final ResourceKey<Biome> GIANT_SPRUCE_TAIGA_HILLS;
-    public static final ResourceKey<Biome> MODIFIED_GRAVELLY_MOUNTAINS;
-    public static final ResourceKey<Biome> SHATTERED_SAVANNA;
-    public static final ResourceKey<Biome> SHATTERED_SAVANNA_PLATEAU;
-    public static final ResourceKey<Biome> ERODED_BADLANDS;
-    public static final ResourceKey<Biome> MODIFIED_WOODED_BADLANDS_PLATEAU;
-    public static final ResourceKey<Biome> MODIFIED_BADLANDS_PLATEAU;
-    public static final ResourceKey<Biome> BAMBOO_JUNGLE;
-    public static final ResourceKey<Biome> BAMBOO_JUNGLE_HILLS;
-    public static final ResourceKey<Biome> SOUL_SAND_VALLEY;
-    public static final ResourceKey<Biome> CRIMSON_FOREST;
-    public static final ResourceKey<Biome> WARPED_FOREST;
-    public static final ResourceKey<Biome> BASALT_DELTAS;
+    public static final ResourceKey<Biome> OCEAN = register("ocean");
+    public static final ResourceKey<Biome> PLAINS = register("plains");
+    public static final ResourceKey<Biome> DESERT = register("desert");
+    public static final ResourceKey<Biome> MOUNTAINS = register("mountains");
+    public static final ResourceKey<Biome> FOREST = register("forest");
+    public static final ResourceKey<Biome> TAIGA = register("taiga");
+    public static final ResourceKey<Biome> SWAMP = register("swamp");
+    public static final ResourceKey<Biome> RIVER = register("river");
+    public static final ResourceKey<Biome> NETHER_WASTES = register("nether_wastes");
+    public static final ResourceKey<Biome> THE_END = register("the_end");
+    public static final ResourceKey<Biome> FROZEN_OCEAN = register("frozen_ocean");
+    public static final ResourceKey<Biome> FROZEN_RIVER = register("frozen_river");
+    public static final ResourceKey<Biome> SNOWY_TUNDRA = register("snowy_tundra");
+    public static final ResourceKey<Biome> SNOWY_MOUNTAINS = register("snowy_mountains");
+    public static final ResourceKey<Biome> MUSHROOM_FIELDS = register("mushroom_fields");
+    public static final ResourceKey<Biome> MUSHROOM_FIELD_SHORE = register("mushroom_field_shore");
+    public static final ResourceKey<Biome> BEACH = register("beach");
+    public static final ResourceKey<Biome> DESERT_HILLS = register("desert_hills");
+    public static final ResourceKey<Biome> WOODED_HILLS = register("wooded_hills");
+    public static final ResourceKey<Biome> TAIGA_HILLS = register("taiga_hills");
+    public static final ResourceKey<Biome> MOUNTAIN_EDGE = register("mountain_edge");
+    public static final ResourceKey<Biome> JUNGLE = register("jungle");
+    public static final ResourceKey<Biome> JUNGLE_HILLS = register("jungle_hills");
+    public static final ResourceKey<Biome> JUNGLE_EDGE = register("jungle_edge");
+    public static final ResourceKey<Biome> DEEP_OCEAN = register("deep_ocean");
+    public static final ResourceKey<Biome> STONE_SHORE = register("stone_shore");
+    public static final ResourceKey<Biome> SNOWY_BEACH = register("snowy_beach");
+    public static final ResourceKey<Biome> BIRCH_FOREST = register("birch_forest");
+    public static final ResourceKey<Biome> BIRCH_FOREST_HILLS = register("birch_forest_hills");
+    public static final ResourceKey<Biome> DARK_FOREST = register("dark_forest");
+    public static final ResourceKey<Biome> SNOWY_TAIGA = register("snowy_taiga");
+    public static final ResourceKey<Biome> SNOWY_TAIGA_HILLS = register("snowy_taiga_hills");
+    public static final ResourceKey<Biome> GIANT_TREE_TAIGA = register("giant_tree_taiga");
+    public static final ResourceKey<Biome> GIANT_TREE_TAIGA_HILLS = register("giant_tree_taiga_hills");
+    public static final ResourceKey<Biome> WOODED_MOUNTAINS = register("wooded_mountains");
+    public static final ResourceKey<Biome> SAVANNA = register("savanna");
+    public static final ResourceKey<Biome> SAVANNA_PLATEAU = register("savanna_plateau");
+    public static final ResourceKey<Biome> BADLANDS = register("badlands");
+    public static final ResourceKey<Biome> WOODED_BADLANDS_PLATEAU = register("wooded_badlands_plateau");
+    public static final ResourceKey<Biome> BADLANDS_PLATEAU = register("badlands_plateau");
+    public static final ResourceKey<Biome> SMALL_END_ISLANDS = register("small_end_islands");
+    public static final ResourceKey<Biome> END_MIDLANDS = register("end_midlands");
+    public static final ResourceKey<Biome> END_HIGHLANDS = register("end_highlands");
+    public static final ResourceKey<Biome> END_BARRENS = register("end_barrens");
+    public static final ResourceKey<Biome> WARM_OCEAN = register("warm_ocean");
+    public static final ResourceKey<Biome> LUKEWARM_OCEAN = register("lukewarm_ocean");
+    public static final ResourceKey<Biome> COLD_OCEAN = register("cold_ocean");
+    public static final ResourceKey<Biome> DEEP_WARM_OCEAN = register("deep_warm_ocean");
+    public static final ResourceKey<Biome> DEEP_LUKEWARM_OCEAN = register("deep_lukewarm_ocean");
+    public static final ResourceKey<Biome> DEEP_COLD_OCEAN = register("deep_cold_ocean");
+    public static final ResourceKey<Biome> DEEP_FROZEN_OCEAN = register("deep_frozen_ocean");
+    public static final ResourceKey<Biome> THE_VOID = register("the_void");
+    public static final ResourceKey<Biome> SUNFLOWER_PLAINS = register("sunflower_plains");
+    public static final ResourceKey<Biome> DESERT_LAKES = register("desert_lakes");
+    public static final ResourceKey<Biome> GRAVELLY_MOUNTAINS = register("gravelly_mountains");
+    public static final ResourceKey<Biome> FLOWER_FOREST = register("flower_forest");
+    public static final ResourceKey<Biome> TAIGA_MOUNTAINS = register("taiga_mountains");
+    public static final ResourceKey<Biome> SWAMP_HILLS = register("swamp_hills");
+    public static final ResourceKey<Biome> ICE_SPIKES = register("ice_spikes");
+    public static final ResourceKey<Biome> MODIFIED_JUNGLE = register("modified_jungle");
+    public static final ResourceKey<Biome> MODIFIED_JUNGLE_EDGE = register("modified_jungle_edge");
+    public static final ResourceKey<Biome> TALL_BIRCH_FOREST = register("tall_birch_forest");
+    public static final ResourceKey<Biome> TALL_BIRCH_HILLS = register("tall_birch_hills");
+    public static final ResourceKey<Biome> DARK_FOREST_HILLS = register("dark_forest_hills");
+    public static final ResourceKey<Biome> SNOWY_TAIGA_MOUNTAINS = register("snowy_taiga_mountains");
+    public static final ResourceKey<Biome> GIANT_SPRUCE_TAIGA = register("giant_spruce_taiga");
+    public static final ResourceKey<Biome> GIANT_SPRUCE_TAIGA_HILLS = register("giant_spruce_taiga_hills");
+    public static final ResourceKey<Biome> MODIFIED_GRAVELLY_MOUNTAINS = register("modified_gravelly_mountains");
+    public static final ResourceKey<Biome> SHATTERED_SAVANNA = register("shattered_savanna");
+    public static final ResourceKey<Biome> SHATTERED_SAVANNA_PLATEAU = register("shattered_savanna_plateau");
+    public static final ResourceKey<Biome> ERODED_BADLANDS = register("eroded_badlands");
+    public static final ResourceKey<Biome> MODIFIED_WOODED_BADLANDS_PLATEAU = register("modified_wooded_badlands_plateau");
+    public static final ResourceKey<Biome> MODIFIED_BADLANDS_PLATEAU = register("modified_badlands_plateau");
+    public static final ResourceKey<Biome> BAMBOO_JUNGLE = register("bamboo_jungle");
+    public static final ResourceKey<Biome> BAMBOO_JUNGLE_HILLS = register("bamboo_jungle_hills");
+    public static final ResourceKey<Biome> SOUL_SAND_VALLEY = register("soul_sand_valley");
+    public static final ResourceKey<Biome> CRIMSON_FOREST = register("crimson_forest");
+    public static final ResourceKey<Biome> WARPED_FOREST = register("warped_forest");
+    public static final ResourceKey<Biome> BASALT_DELTAS = register("basalt_deltas");
     
-    private static ResourceKey<Biome> register(final String debug0) {
-        return ResourceKey.create((ResourceKey<? extends Registry<Biome>>)Registry.BIOME_REGISTRY, new ResourceLocation(debug0));
-    }
-    
-    static {
-        OCEAN = register("ocean");
-        PLAINS = register("plains");
-        DESERT = register("desert");
-        MOUNTAINS = register("mountains");
-        FOREST = register("forest");
-        TAIGA = register("taiga");
-        SWAMP = register("swamp");
-        RIVER = register("river");
-        NETHER_WASTES = register("nether_wastes");
-        THE_END = register("the_end");
-        FROZEN_OCEAN = register("frozen_ocean");
-        FROZEN_RIVER = register("frozen_river");
-        SNOWY_TUNDRA = register("snowy_tundra");
-        SNOWY_MOUNTAINS = register("snowy_mountains");
-        MUSHROOM_FIELDS = register("mushroom_fields");
-        MUSHROOM_FIELD_SHORE = register("mushroom_field_shore");
-        BEACH = register("beach");
-        DESERT_HILLS = register("desert_hills");
-        WOODED_HILLS = register("wooded_hills");
-        TAIGA_HILLS = register("taiga_hills");
-        MOUNTAIN_EDGE = register("mountain_edge");
-        JUNGLE = register("jungle");
-        JUNGLE_HILLS = register("jungle_hills");
-        JUNGLE_EDGE = register("jungle_edge");
-        DEEP_OCEAN = register("deep_ocean");
-        STONE_SHORE = register("stone_shore");
-        SNOWY_BEACH = register("snowy_beach");
-        BIRCH_FOREST = register("birch_forest");
-        BIRCH_FOREST_HILLS = register("birch_forest_hills");
-        DARK_FOREST = register("dark_forest");
-        SNOWY_TAIGA = register("snowy_taiga");
-        SNOWY_TAIGA_HILLS = register("snowy_taiga_hills");
-        GIANT_TREE_TAIGA = register("giant_tree_taiga");
-        GIANT_TREE_TAIGA_HILLS = register("giant_tree_taiga_hills");
-        WOODED_MOUNTAINS = register("wooded_mountains");
-        SAVANNA = register("savanna");
-        SAVANNA_PLATEAU = register("savanna_plateau");
-        BADLANDS = register("badlands");
-        WOODED_BADLANDS_PLATEAU = register("wooded_badlands_plateau");
-        BADLANDS_PLATEAU = register("badlands_plateau");
-        SMALL_END_ISLANDS = register("small_end_islands");
-        END_MIDLANDS = register("end_midlands");
-        END_HIGHLANDS = register("end_highlands");
-        END_BARRENS = register("end_barrens");
-        WARM_OCEAN = register("warm_ocean");
-        LUKEWARM_OCEAN = register("lukewarm_ocean");
-        COLD_OCEAN = register("cold_ocean");
-        DEEP_WARM_OCEAN = register("deep_warm_ocean");
-        DEEP_LUKEWARM_OCEAN = register("deep_lukewarm_ocean");
-        DEEP_COLD_OCEAN = register("deep_cold_ocean");
-        DEEP_FROZEN_OCEAN = register("deep_frozen_ocean");
-        THE_VOID = register("the_void");
-        SUNFLOWER_PLAINS = register("sunflower_plains");
-        DESERT_LAKES = register("desert_lakes");
-        GRAVELLY_MOUNTAINS = register("gravelly_mountains");
-        FLOWER_FOREST = register("flower_forest");
-        TAIGA_MOUNTAINS = register("taiga_mountains");
-        SWAMP_HILLS = register("swamp_hills");
-        ICE_SPIKES = register("ice_spikes");
-        MODIFIED_JUNGLE = register("modified_jungle");
-        MODIFIED_JUNGLE_EDGE = register("modified_jungle_edge");
-        TALL_BIRCH_FOREST = register("tall_birch_forest");
-        TALL_BIRCH_HILLS = register("tall_birch_hills");
-        DARK_FOREST_HILLS = register("dark_forest_hills");
-        SNOWY_TAIGA_MOUNTAINS = register("snowy_taiga_mountains");
-        GIANT_SPRUCE_TAIGA = register("giant_spruce_taiga");
-        GIANT_SPRUCE_TAIGA_HILLS = register("giant_spruce_taiga_hills");
-        MODIFIED_GRAVELLY_MOUNTAINS = register("modified_gravelly_mountains");
-        SHATTERED_SAVANNA = register("shattered_savanna");
-        SHATTERED_SAVANNA_PLATEAU = register("shattered_savanna_plateau");
-        ERODED_BADLANDS = register("eroded_badlands");
-        MODIFIED_WOODED_BADLANDS_PLATEAU = register("modified_wooded_badlands_plateau");
-        MODIFIED_BADLANDS_PLATEAU = register("modified_badlands_plateau");
-        BAMBOO_JUNGLE = register("bamboo_jungle");
-        BAMBOO_JUNGLE_HILLS = register("bamboo_jungle_hills");
-        SOUL_SAND_VALLEY = register("soul_sand_valley");
-        CRIMSON_FOREST = register("crimson_forest");
-        WARPED_FOREST = register("warped_forest");
-        BASALT_DELTAS = register("basalt_deltas");
+    private static ResourceKey<Biome> register(final String id) {
+        return ResourceKey.create((ResourceKey<? extends Registry<Biome>>)Registry.BIOME_REGISTRY, new ResourceLocation(id));
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
index c9860d632e88a734ee95c9fee6e6495d1f9242a3..be8d27775508fed5f80325a7125b394c1cb15f48 100644
--- a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
@@ -29,6 +29,9 @@ import java.util.List;
 import net.minecraft.world.level.levelgen.synth.NormalNoise;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
+import org.apache.logging.log4j.LogManager;
+
+import static net.minecraft.world.level.biome.Biomes.*;
 
 public class MultiNoiseBiomeSource extends BiomeSource
 {
@@ -83,7 +86,7 @@ public class MultiNoiseBiomeSource extends BiomeSource
     }
     
     private Optional<PresetInstance> preset() {
-        return this.preset.map(debug1 -> new PresetInstance((Preset)debug1.getSecond(), (Registry)debug1.getFirst(), this.seed));
+        return this.preset.map(pair -> new PresetInstance(pair.getSecond(), pair.getFirst(), this.seed)); // todo: 'biomes' registry here
     }
     
     @Override
@@ -99,8 +102,8 @@ public class MultiNoiseBiomeSource extends BiomeSource
     
     static {
         DEFAULT_NOISE_PARAMETERS = new NoiseParameters(-7, ImmutableList.of(1.0, 1.0)); // MagmaCube - decompile fix
-        DIRECT_CODEC = RecordCodecBuilder.<MultiNoiseBiomeSource>mapCodec(debug0 -> debug0.group(Codec.LONG.fieldOf("seed").forGetter(debug0l -> debug0l.seed), RecordCodecBuilder.<Pair<Biome.ClimateParameters, Supplier<Biome>>>create(debug0l -> debug0l.group(Biome.ClimateParameters.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair::getSecond)).apply(debug0l, Pair::of)).listOf().fieldOf("biomes").forGetter(debug0l -> debug0l.parameters), NoiseParameters.CODEC.fieldOf("temperature_noise").forGetter(debug0l -> debug0l.temperatureParams), NoiseParameters.CODEC.fieldOf("humidity_noise").forGetter(debug0l -> debug0l.humidityParams), NoiseParameters.CODEC.fieldOf("altitude_noise").forGetter(debug0l -> debug0l.altitudeParams), NoiseParameters.CODEC.fieldOf("weirdness_noise").forGetter(debug0l -> debug0l.weirdnessParams)).apply(debug0, MultiNoiseBiomeSource::new)); // MagmaCube - decompile fix
-        CODEC = Codec.mapEither(PresetInstance.CODEC, MultiNoiseBiomeSource.DIRECT_CODEC).xmap(debug0 -> debug0.map(PresetInstance::biomeSource, Function.identity()), debug0l -> debug0l.preset().<Either>map(Either::left).orElseGet(() -> Either.right(debug0l))).codec(); // MagmaCube - decompile fix
+        DIRECT_CODEC = RecordCodecBuilder.mapCodec(debug0 -> debug0.group(Codec.LONG.fieldOf("seed").forGetter(debug0l -> debug0l.seed), RecordCodecBuilder.<Pair<Biome.ClimateParameters, Supplier<Biome>>>create(debug0l -> debug0l.group(Biome.ClimateParameters.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair::getSecond)).apply(debug0l, Pair::of)).listOf().fieldOf("biomes").forGetter(debug0l -> debug0l.parameters), NoiseParameters.CODEC.fieldOf("temperature_noise").forGetter(debug0l -> debug0l.temperatureParams), NoiseParameters.CODEC.fieldOf("humidity_noise").forGetter(debug0l -> debug0l.humidityParams), NoiseParameters.CODEC.fieldOf("altitude_noise").forGetter(debug0l -> debug0l.altitudeParams), NoiseParameters.CODEC.fieldOf("weirdness_noise").forGetter(debug0l -> debug0l.weirdnessParams)).apply(debug0, MultiNoiseBiomeSource::new)); // MagmaCube - decompile fix
+        CODEC = Codec.mapEither(PresetInstance.CODEC, MultiNoiseBiomeSource.DIRECT_CODEC).xmap(either -> either.map(PresetInstance::biomeSource, Function.identity()), multiNoiseBiomeSource -> multiNoiseBiomeSource.preset().<Either>map(Either::left).orElseGet(() -> Either.right(multiNoiseBiomeSource))).codec(); // MagmaCube - decompile fix
     }
     
     static class NoiseParameters
@@ -134,10 +137,10 @@ public class MultiNoiseBiomeSource extends BiomeSource
         private final Registry<Biome> biomes;
         private final long seed;
         
-        private PresetInstance(final Preset debug1, final Registry<Biome> debug2, final long debug3) {
-            this.preset = debug1;
-            this.biomes = debug2;
-            this.seed = debug3;
+        private PresetInstance(final Preset preset, final Registry<Biome> biomeRegistry, final long seed) {
+            this.preset = preset;
+            this.biomes = biomeRegistry;
+            this.seed = seed;
         }
         
         public Preset preset() {
@@ -153,11 +156,12 @@ public class MultiNoiseBiomeSource extends BiomeSource
         }
         
         public MultiNoiseBiomeSource biomeSource() {
+            LogManager.getLogger().info("Reg: " + biomes + " (" + biomes.getClass().getCanonicalName() + ")"); // todo
             return this.preset.biomeSource(this.biomes, this.seed);
         }
         
         static {
-            CODEC = RecordCodecBuilder.mapCodec(debug0 -> debug0.group(ResourceLocation.CODEC.flatXmap(debug0l -> Optional.ofNullable(Preset.BY_NAME.get(debug0l)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown preset: " + debug0l)), debug0l -> DataResult.success(debug0l.name)).fieldOf("preset").stable().forGetter(PresetInstance::preset), RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter(PresetInstance::biomes), Codec.LONG.fieldOf("seed").stable().forGetter(PresetInstance::seed)).apply(debug0, debug0.stable(PresetInstance::new))); // MagmaCube - decompile fix
+            CODEC = RecordCodecBuilder.mapCodec(builder -> builder.group(ResourceLocation.CODEC.flatXmap(resourceLocation -> Optional.ofNullable(Preset.BY_NAME.get(resourceLocation)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown preset: " + resourceLocation)), preset -> DataResult.success(preset.name)).fieldOf("preset").stable().forGetter(PresetInstance::preset), RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter(PresetInstance::biomes), Codec.LONG.fieldOf("seed").stable().forGetter(PresetInstance::seed)).apply(builder, builder.stable(PresetInstance::new))); // MagmaCube - decompile fix
         }
     }
     
@@ -168,19 +172,19 @@ public class MultiNoiseBiomeSource extends BiomeSource
         private final ResourceLocation name;
         private final Function3<Preset, Registry<Biome>, Long, MultiNoiseBiomeSource> biomeSource;
         
-        public Preset(final ResourceLocation debug1, final Function3<Preset, Registry<Biome>, Long, MultiNoiseBiomeSource> debug2) {
-            this.name = debug1;
-            this.biomeSource = debug2;
-            Preset.BY_NAME.put(debug1, this);
+        public Preset(final ResourceLocation biomeLocation, final Function3<Preset, Registry<Biome>, Long, MultiNoiseBiomeSource> function3) {
+            this.name = biomeLocation;
+            this.biomeSource = function3;
+            Preset.BY_NAME.put(biomeLocation, this);
         }
         
-        public MultiNoiseBiomeSource biomeSource(final Registry<Biome> debug1, final long debug2) {
-            return (MultiNoiseBiomeSource)this.biomeSource.apply(this, debug1, debug2); // MagmaCube - decompile fix
+        public MultiNoiseBiomeSource biomeSource(final Registry<Biome> biomeRegistry, final long seed) {
+            return (MultiNoiseBiomeSource)this.biomeSource.apply(this, biomeRegistry, seed); // MagmaCube - decompile fix
         }
         
         static {
             BY_NAME = Maps.newHashMap();
-            NETHER = new Preset(new ResourceLocation("nether"), ((debug0, debug1, debug2) -> new MultiNoiseBiomeSource(debug2, ImmutableList.of(Pair.<Biome.ClimateParameters, Supplier<Biome>>of(new Biome.ClimateParameters(0.0f, 0.0f, 0.0f, 0.0f, 0.0f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.NETHER_WASTES)), Pair.<Biome.ClimateParameters, Supplier<Biome>>of(new Biome.ClimateParameters(0.0f, -0.5f, 0.0f, 0.0f, 0.0f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.SOUL_SAND_VALLEY)), Pair.<Biome.ClimateParameters, Supplier<Biome>>of(new Biome.ClimateParameters(0.4f, 0.0f, 0.0f, 0.0f, 0.0f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.CRIMSON_FOREST)), Pair.<Biome.ClimateParameters, Supplier<Biome>>of(new Biome.ClimateParameters(0.0f, 0.5f, 0.0f, 0.0f, 0.375f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.WARPED_FOREST)), Pair.<Biome.ClimateParameters, Supplier<Biome>>of(new Biome.ClimateParameters(-0.5f, 0.0f, 0.0f, 0.0f, 0.175f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.BASALT_DELTAS))), Optional.of(Pair.of(debug1, debug0))))); // MagmaCube - decompile fix
+            NETHER = new Preset(new ResourceLocation("nether"), ((preset, biomeRegistry, seed) -> new MultiNoiseBiomeSource(seed, ImmutableList.of(Pair.of(new Biome.ClimateParameters(0.0f, 0.0f, 0.0f, 0.0f, 0.0f), () -> biomeRegistry.getOrThrow(NETHER_WASTES)), Pair.of(new Biome.ClimateParameters(0.0f, -0.5f, 0.0f, 0.0f, 0.0f), () -> biomeRegistry.getOrThrow(SOUL_SAND_VALLEY)), Pair.of(new Biome.ClimateParameters(0.4f, 0.0f, 0.0f, 0.0f, 0.0f), () -> biomeRegistry.getOrThrow(CRIMSON_FOREST)), Pair.of(new Biome.ClimateParameters(0.0f, 0.5f, 0.0f, 0.0f, 0.375f), () -> biomeRegistry.getOrThrow(WARPED_FOREST)), Pair.of(new Biome.ClimateParameters(-0.5f, 0.0f, 0.0f, 0.0f, 0.175f), () -> biomeRegistry.getOrThrow(BASALT_DELTAS))), Optional.of(Pair.of(biomeRegistry, preset))))); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java b/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java
index 31ce6e52eab432e5762859bf5221fd935cf3d503..86b6596fde6d4d3d3f5def4ad237bb7cee087cab 100644
--- a/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java
@@ -26,20 +26,20 @@ public class TheEndBiomeSource extends BiomeSource
     private final Biome islands;
     private final Biome barrens;
     
-    public TheEndBiomeSource(final Registry<Biome> debug1, final long debug2) {
-        this(debug1, debug2, debug1.getOrThrow(Biomes.THE_END), debug1.getOrThrow(Biomes.END_HIGHLANDS), debug1.getOrThrow(Biomes.END_MIDLANDS), debug1.getOrThrow(Biomes.SMALL_END_ISLANDS), debug1.getOrThrow(Biomes.END_BARRENS));
+    public TheEndBiomeSource(final Registry<Biome> biomeRegistry, final long seed) {
+        this(biomeRegistry, seed, biomeRegistry.getOrThrow(Biomes.THE_END), biomeRegistry.getOrThrow(Biomes.END_HIGHLANDS), biomeRegistry.getOrThrow(Biomes.END_MIDLANDS), biomeRegistry.getOrThrow(Biomes.SMALL_END_ISLANDS), biomeRegistry.getOrThrow(Biomes.END_BARRENS));
     }
     
-    private TheEndBiomeSource(final Registry<Biome> debug1, final long debug2, final Biome debug4, final Biome debug5, final Biome debug6, final Biome debug7, final Biome debug8) {
-        super((List<Biome>)ImmutableList.of(debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
-        this.biomes = debug1;
-        this.seed = debug2;
-        this.end = debug4;
-        this.highlands = debug5;
-        this.midlands = debug6;
-        this.islands = debug7;
-        this.barrens = debug8;
-        final WorldgenRandom debug9 = new WorldgenRandom(debug2);
+    private TheEndBiomeSource(final Registry<Biome> biomeRegistry, final long seed, final Biome end, final Biome highlands, final Biome midlands, final Biome islands, final Biome barrens) {
+        super(ImmutableList.of(end, highlands, midlands, islands, barrens)); // MagmaCube - decompile fix
+        this.biomes = biomeRegistry;
+        this.seed = seed;
+        this.end = end;
+        this.highlands = highlands;
+        this.midlands = midlands;
+        this.islands = islands;
+        this.barrens = barrens;
+        final WorldgenRandom debug9 = new WorldgenRandom(seed);
         debug9.consumeCount(17292);
         this.islandNoise = new SimplexNoise(debug9);
     }
diff --git a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
index e41afa6f8d0c2bf729c166a86689121e28bb0d7f..03ef333bbd25c5155e93cdf5e8bdfbd4ff65ae0e 100644
--- a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
+++ b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
@@ -50,7 +50,7 @@ public class DimensionType {
     public static final ResourceLocation OVERWORLD_EFFECTS = new ResourceLocation("overworld");
     public static final ResourceLocation NETHER_EFFECTS = new ResourceLocation("the_nether");
     public static final ResourceLocation END_EFFECTS = new ResourceLocation("the_end");
-    public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Codec.LONG.optionalFieldOf("fixed_time").xmap(debug0 -> debug0.map(OptionalLong::of).orElseGet(OptionalLong::empty), debug0 -> debug0.isPresent() ? Optional.of(debug0.getAsLong()) : Optional.empty()).forGetter(debug0 -> debug0.fixedTime), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange((double)1.0E-5f, (double)3.0E7).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange((int)0, (int)256).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter(debug0 -> debug0.infiniburn), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter(debug0 -> debug0.effectsLocation), Codec.FLOAT.fieldOf("ambient_light").forGetter(debug0 -> Float.valueOf(debug0.ambientLight))).apply((Applicative)debug02, DimensionType::new)); // MagmaCube - decompile fix
+    public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Codec.LONG.optionalFieldOf("fixed_time").xmap(debug0 -> debug0.map(OptionalLong::of).orElseGet(OptionalLong::empty), debug0 -> debug0.isPresent() ? Optional.of(debug0.getAsLong()) : Optional.empty()).forGetter(debug0 -> debug0.fixedTime), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange((double)1.0E-5f, (double)3.0E7).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange((int)0, (int)256).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter(debug0 -> debug0.infiniburn), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter(debug0 -> debug0.effectsLocation), Codec.FLOAT.fieldOf("ambient_light").forGetter(debug0 -> debug0.ambientLight)).apply(debug02, DimensionType::new)); // MagmaCube - decompile fix
     public static final float[] MOON_BRIGHTNESS_PER_PHASE = new float[]{1.0f, 0.75f, 0.5f, 0.25f, 0.0f, 0.25f, 0.5f, 0.75f};
     public static final ResourceKey<DimensionType> OVERWORLD_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld"));
     public static final ResourceKey<DimensionType> NETHER_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("the_nether"));
@@ -79,28 +79,28 @@ public class DimensionType {
     private final float ambientLight;
     private final transient float[] brightnessRamp;
 
-    protected DimensionType(OptionalLong debug1, boolean debug2, boolean debug3, boolean debug4, boolean debug5, double debug6, boolean debug8, boolean debug9, boolean debug10, boolean debug11, int debug12, ResourceLocation debug13, ResourceLocation debug14, float debug15) {
-        this(debug1, debug2, debug3, debug4, debug5, debug6, false, debug8, debug9, debug10, debug11, debug12, FuzzyOffsetBiomeZoomer.INSTANCE, debug13, debug14, debug15);
+    protected DimensionType(OptionalLong fixedTime, boolean hasSkylight, boolean hasCeiling, boolean ultraWarm, boolean natural, double coordinateScale, boolean piglinSafe, boolean bedWorks, boolean respawnAnchorWorks, boolean hasRaids, int logicalHeight, ResourceLocation infiniburn, ResourceLocation effectsLocation, float ambientLight) {
+        this(fixedTime, hasSkylight, hasCeiling, ultraWarm, natural, coordinateScale, false, piglinSafe, bedWorks, respawnAnchorWorks, hasRaids, logicalHeight, FuzzyOffsetBiomeZoomer.INSTANCE, infiniburn, effectsLocation, ambientLight);
     }
 
-    protected DimensionType(OptionalLong debug1, boolean debug2, boolean debug3, boolean debug4, boolean debug5, double debug6, boolean debug8, boolean debug9, boolean debug10, boolean debug11, boolean debug12, int debug13, BiomeZoomer debug14, ResourceLocation debug15, ResourceLocation debug16, float debug17) {
-        this.fixedTime = debug1;
-        this.hasSkylight = debug2;
-        this.hasCeiling = debug3;
-        this.ultraWarm = debug4;
-        this.natural = debug5;
-        this.coordinateScale = debug6;
-        this.createDragonFight = debug8;
-        this.piglinSafe = debug9;
-        this.bedWorks = debug10;
-        this.respawnAnchorWorks = debug11;
-        this.hasRaids = debug12;
-        this.logicalHeight = debug13;
-        this.biomeZoomer = debug14;
-        this.infiniburn = debug15;
-        this.effectsLocation = debug16;
-        this.ambientLight = debug17;
-        this.brightnessRamp = DimensionType.fillBrightnessRamp(debug17);
+    protected DimensionType(OptionalLong fixedTime, boolean hasSkylight, boolean hasCeiling, boolean ultraWarm, boolean natural, double coordinateScale, boolean createDragonFight, boolean piglinSafe, boolean bedWorks, boolean respawnAnchorWorks, boolean hasRaids, int logicalHeight, BiomeZoomer biomeZoomer, ResourceLocation infiniburn, ResourceLocation effectsLocation, float ambientLight) {
+        this.fixedTime = fixedTime;
+        this.hasSkylight = hasSkylight;
+        this.hasCeiling = hasCeiling;
+        this.ultraWarm = ultraWarm;
+        this.natural = natural;
+        this.coordinateScale = coordinateScale;
+        this.createDragonFight = createDragonFight;
+        this.piglinSafe = piglinSafe;
+        this.bedWorks = bedWorks;
+        this.respawnAnchorWorks = respawnAnchorWorks;
+        this.hasRaids = hasRaids;
+        this.logicalHeight = logicalHeight;
+        this.biomeZoomer = biomeZoomer;
+        this.infiniburn = infiniburn;
+        this.effectsLocation = effectsLocation;
+        this.ambientLight = ambientLight;
+        this.brightnessRamp = DimensionType.fillBrightnessRamp(ambientLight);
     }
 
     private static float[] fillBrightnessRamp(float debug0) {
@@ -114,50 +114,50 @@ public class DimensionType {
     }
 
     @Deprecated
-    public static DataResult<ResourceKey<Level>> parseLegacy(Dynamic<?> debug0) {
-        Optional debug1 = debug0.asNumber().result();
+    public static DataResult<ResourceKey<Level>> parseLegacy(Dynamic<?> dynamic) {
+        Optional<Number> debug1 = dynamic.asNumber().result();
         if (debug1.isPresent()) {
-            int debug2 = ((Number)debug1.get()).intValue();
-            if (debug2 == -1) {
+            int dimensionId = debug1.get().intValue();
+            if (dimensionId == -1) {
                 return DataResult.success(Level.NETHER);
             }
-            if (debug2 == 0) {
+            if (dimensionId == 0) {
                 return DataResult.success(Level.OVERWORLD);
             }
-            if (debug2 == 1) {
+            if (dimensionId == 1) {
                 return DataResult.success(Level.END);
             }
         }
-        return Level.RESOURCE_KEY_CODEC.parse(debug0);
+        return Level.RESOURCE_KEY_CODEC.parse(dynamic);
     }
 
-    public static RegistryAccess.RegistryHolder registerBuiltin(RegistryAccess.RegistryHolder debug0) {
-        WritableRegistry<DimensionType> debug1 = debug0.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
-        debug1.register(OVERWORLD_LOCATION, DEFAULT_OVERWORLD, Lifecycle.stable());
-        debug1.register(OVERWORLD_CAVES_LOCATION, DEFAULT_OVERWORLD_CAVES, Lifecycle.stable());
-        debug1.register(NETHER_LOCATION, DEFAULT_NETHER, Lifecycle.stable());
-        debug1.register(END_LOCATION, DEFAULT_END, Lifecycle.stable());
-        return debug0;
+    public static RegistryAccess.RegistryHolder registerBuiltin(RegistryAccess.RegistryHolder registryHolder) {
+        WritableRegistry<DimensionType> writableRegistry = registryHolder.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
+        writableRegistry.register(OVERWORLD_LOCATION, DEFAULT_OVERWORLD, Lifecycle.stable());
+        writableRegistry.register(OVERWORLD_CAVES_LOCATION, DEFAULT_OVERWORLD_CAVES, Lifecycle.stable());
+        writableRegistry.register(NETHER_LOCATION, DEFAULT_NETHER, Lifecycle.stable());
+        writableRegistry.register(END_LOCATION, DEFAULT_END, Lifecycle.stable());
+        return registryHolder;
     }
 
-    private static ChunkGenerator defaultEndGenerator(Registry<Biome> debug0, Registry<NoiseGeneratorSettings> debug1, long debug2) {
-        return new NoiseBasedChunkGenerator(new TheEndBiomeSource(debug0, debug2), debug2, () -> debug1.getOrThrow(NoiseGeneratorSettings.END));
+    private static ChunkGenerator defaultEndGenerator(Registry<Biome> biomeRegistry, Registry<NoiseGeneratorSettings> generatorSettings, long seed) {
+        return new NoiseBasedChunkGenerator(new TheEndBiomeSource(biomeRegistry, seed), seed, () -> generatorSettings.getOrThrow(NoiseGeneratorSettings.END));
     }
 
-    private static ChunkGenerator defaultNetherGenerator(Registry<Biome> debug0, Registry<NoiseGeneratorSettings> debug1, long debug2) {
-        return new NoiseBasedChunkGenerator(MultiNoiseBiomeSource.Preset.NETHER.biomeSource(debug0, debug2), debug2, () -> debug1.getOrThrow(NoiseGeneratorSettings.NETHER));
+    private static ChunkGenerator defaultNetherGenerator(Registry<Biome> biomeRegistry, Registry<NoiseGeneratorSettings> generatorSettings, long seed) {
+        return new NoiseBasedChunkGenerator(MultiNoiseBiomeSource.Preset.NETHER.biomeSource(biomeRegistry, seed), seed, () -> generatorSettings.getOrThrow(NoiseGeneratorSettings.NETHER));
     }
 
-    public static MappedRegistry<LevelStem> defaultDimensions(Registry<DimensionType> debug0, Registry<Biome> debug1, Registry<NoiseGeneratorSettings> debug2, long debug3) {
-        MappedRegistry<LevelStem> debug5 = new MappedRegistry<LevelStem>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
-        debug5.register(LevelStem.NETHER, new LevelStem(() -> debug0.getOrThrow(NETHER_LOCATION), DimensionType.defaultNetherGenerator(debug1, debug2, debug3)), Lifecycle.stable());
-        debug5.register(LevelStem.END, new LevelStem(() -> debug0.getOrThrow(END_LOCATION), DimensionType.defaultEndGenerator(debug1, debug2, debug3)), Lifecycle.stable());
-        return debug5;
+    public static MappedRegistry<LevelStem> defaultDimensions(Registry<DimensionType> dimensionTypes, Registry<Biome> biomeRegistry, Registry<NoiseGeneratorSettings> generatorSettings, long seed) {
+        MappedRegistry<LevelStem> mappedRegistry = new MappedRegistry<>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
+        mappedRegistry.register(LevelStem.NETHER, new LevelStem(() -> dimensionTypes.getOrThrow(NETHER_LOCATION), DimensionType.defaultNetherGenerator(biomeRegistry, generatorSettings, seed)), Lifecycle.stable());
+        mappedRegistry.register(LevelStem.END, new LevelStem(() -> dimensionTypes.getOrThrow(END_LOCATION), DimensionType.defaultEndGenerator(biomeRegistry, generatorSettings, seed)), Lifecycle.stable());
+        return mappedRegistry;
     }
 
-    public static double getTeleportationScale(DimensionType debug0, DimensionType debug1) {
-        double debug2 = debug0.coordinateScale();
-        double debug4 = debug1.coordinateScale();
+    public static double getTeleportationScale(DimensionType dimensionType, DimensionType dimensionType1) {
+        double debug2 = dimensionType.coordinateScale();
+        double debug4 = dimensionType1.coordinateScale();
         return debug2 / debug4;
     }
 
@@ -234,14 +234,14 @@ public class DimensionType {
         return this.fixedTime.isPresent();
     }
 
-    public float timeOfDay(long debug1) {
-        double debug3 = Mth.frac((double)this.fixedTime.orElse(debug1) / 24000.0 - 0.25);
+    public float timeOfDay(long dayTime) {
+        double debug3 = Mth.frac((double)this.fixedTime.orElse(dayTime) / 24000.0 - 0.25);
         double debug5 = 0.5 - Math.cos(debug3 * Math.PI) / 2.0;
         return (float)(debug3 * 2.0 + debug5) / 3.0f;
     }
 
-    public int moonPhase(long debug1) {
-        return (int)(debug1 / 24000L % 8L + 8L) % 8;
+    public int moonPhase(long dayTime) {
+        return (int)(dayTime / 24000L % 8L + 8L) % 8;
     }
 
     public float brightness(int debug1) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
index 03b23f8795765883830d543c59c9197ebc5b9a6b..58963a159522c6f09221232c347c442b05b69f76 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
@@ -49,7 +49,7 @@ import org.apache.logging.log4j.Logger;
 
 public class StructureTemplatePool {
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final Codec<StructureTemplatePool> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName), ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback), Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.INT.fieldOf("weight")).codec().listOf().promotePartial(Util.prefix("Pool element: ", ((Logger)LOGGER)::error)).fieldOf("elements").forGetter(debug0 -> debug0.rawTemplates)).apply(debug02, StructureTemplatePool::new)); // MagmaCube - decompile fix
+    public static final Codec<StructureTemplatePool> DIRECT_CODEC = RecordCodecBuilder.create(builder -> builder.group(ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName), ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback), Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.INT.fieldOf("weight")).codec().listOf().promotePartial(Util.prefix("Pool element: ", LOGGER::error)).fieldOf("elements").forGetter(structureTemplatePool -> structureTemplatePool.rawTemplates)).apply(builder, StructureTemplatePool::new)); // MagmaCube - decompile fix
     public static final Codec<Supplier<StructureTemplatePool>> CODEC = RegistryFileCodec.create(Registry.TEMPLATE_POOL_REGISTRY, DIRECT_CODEC);
     private final ResourceLocation name;
     private final List<Pair<StructurePoolElement, Integer>> rawTemplates;
diff --git a/src/main/java/net/minecraft/world/level/material/Fluids.java b/src/main/java/net/minecraft/world/level/material/Fluids.java
index c901646099685199f3e464c47b5641846b49adb7..b03f73347c72b2677a0534d7565bd58ba1fa45b1 100644
--- a/src/main/java/net/minecraft/world/level/material/Fluids.java
+++ b/src/main/java/net/minecraft/world/level/material/Fluids.java
@@ -12,8 +12,8 @@ public class Fluids
     public static final FlowingFluid FLOWING_LAVA;
     public static final FlowingFluid LAVA;
     
-    private static <T extends Fluid> T register(final String debug0, final T debug1) {
-        return Registry.register(Registry.FLUID, debug0, debug1);
+    private static <T extends Fluid> T register(final String id, final T instance) {
+        return Registry.register(Registry.FLUID, id, instance);
     }
     
     static {
@@ -22,9 +22,9 @@ public class Fluids
         WATER = register("water", new WaterFluid.Source());
         FLOWING_LAVA = register("flowing_lava", new LavaFluid.Flowing());
         LAVA = register("lava", new LavaFluid.Source());
-        for (final Fluid debug1 : Registry.FLUID) {
-            for (final FluidState debug2 : debug1.getStateDefinition().getPossibleStates()) {
-                Fluid.FLUID_STATE_REGISTRY.add(debug2);
+        for (final Fluid fluid : Registry.FLUID) {
+            for (final FluidState fluidState : fluid.getStateDefinition().getPossibleStates()) {
+                Fluid.FLUID_STATE_REGISTRY.add(fluidState);
             }
         }
     }
