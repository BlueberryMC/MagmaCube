From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Thu, 12 Nov 2020 00:26:33 +0900
Subject: [PATCH] deobf / 1.16.4 decomp fix


diff --git a/pom.xml b/pom.xml
index edd0529aef61ba76fb8b95743c92c89a79f9d969..5fe4d080892524f152e09f835982a754ef9b6dcc 100644
--- a/pom.xml
+++ b/pom.xml
@@ -5,12 +5,13 @@
     <parent>
         <artifactId>minecraft-parent</artifactId>
         <groupId>xyz.acrylicstyle.minecraft</groupId>
-        <version>1.16.3</version>
+        <version>1.16.4</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
     
     <properties>
         <log4j.version>2.12.1</log4j.version>
+        <lwjgl.version>3.2.2</lwjgl.version>
     </properties>
 
     <artifactId>Minecraft</artifactId>
@@ -126,162 +127,162 @@
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-openal</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-opengl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-jemalloc</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-jemalloc</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-jemalloc</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-jemalloc</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-openal</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-openal</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-openal</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-opengl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-opengl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-opengl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-glfw</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-glfw</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-glfw</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-glfw</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-stb</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-stb</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-stb</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-stb</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-tinyfd</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-tinyfd</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-linux</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-tinyfd</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-macos</classifier>
         </dependency>
         <dependency>
             <groupId>org.lwjgl</groupId>
             <artifactId>lwjgl-tinyfd</artifactId>
-            <version>3.2.2</version>
+            <version>${lwjgl.version}</version>
             <classifier>natives-windows</classifier>
         </dependency>
         <dependency>
@@ -338,6 +339,7 @@
             <groupId>org.apache.logging.log4j</groupId>
             <artifactId>log4j-to-slf4j</artifactId>
             <version>${log4j.version}</version>
+            <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.apache.logging.log4j</groupId>
@@ -348,6 +350,7 @@
             <groupId>org.slf4j</groupId>
             <artifactId>slf4j-log4j12</artifactId>
             <version>1.7.9</version>
+            <scope>provided</scope>
             <exclusions>
                 <exclusion>
                     <groupId>org.apache.logging.log4j</groupId>
diff --git a/src/main/java/com/mojang/blaze3d/pipeline/RenderTarget.java b/src/main/java/com/mojang/blaze3d/pipeline/RenderTarget.java
index 5ca3383ade13048b649e1facfe73cf44929e7142..5fa43a8de4fa156dbcbcaeeca2ecc7b639a9272f 100644
--- a/src/main/java/com/mojang/blaze3d/pipeline/RenderTarget.java
+++ b/src/main/java/com/mojang/blaze3d/pipeline/RenderTarget.java
@@ -236,8 +236,8 @@ public class RenderTarget
         this.bindRead();
         final float debug4 = debug1;
         final float debug5 = debug2;
-        final float debug6 = this.viewWidth / this.width;
-        final float debug7 = this.viewHeight / this.height;
+        final float debug6 = (float)this.viewWidth / (float)this.width;
+        final float debug7 = (float)this.viewHeight / (float)this.height;
         final Tesselator debug8 = RenderSystem.renderThreadTesselator();
         final BufferBuilder debug9 = debug8.getBuilder();
         debug9.begin(7, DefaultVertexFormat.POSITION_TEX_COLOR);
diff --git a/src/main/java/com/mojang/blaze3d/platform/NativeImage.java b/src/main/java/com/mojang/blaze3d/platform/NativeImage.java
index b84feaa13a48570a5373cb0f7cc45c5645ba1f92..bf7b5e282c15a19f0f4fc2e8fbeaa6596770ea19 100644
--- a/src/main/java/com/mojang/blaze3d/platform/NativeImage.java
+++ b/src/main/java/com/mojang/blaze3d/platform/NativeImage.java
@@ -80,16 +80,16 @@ public final class NativeImage implements AutoCloseable
         return read(Format.RGBA, debug0);
     }
     
-    public static NativeImage read(@Nullable final Format debug0, final InputStream debug1) throws IOException {
-        ByteBuffer debug2 = null;
+    public static NativeImage read(@Nullable final Format format, final InputStream inputStream) throws IOException {
+        ByteBuffer byteBuffer = null;
         try {
-            debug2 = TextureUtil.readResource(debug1);
-            debug2.rewind();
-            return read(debug0, debug2);
+            byteBuffer = TextureUtil.readResource(inputStream);
+            byteBuffer.rewind();
+            return read(format, byteBuffer);
         }
         finally {
-            MemoryUtil.memFree((Buffer)debug2);
-            IOUtils.closeQuietly(debug1);
+            MemoryUtil.memFree(byteBuffer);
+            IOUtils.closeQuietly(inputStream);
         }
     }
     
@@ -97,45 +97,43 @@ public final class NativeImage implements AutoCloseable
         return read(Format.RGBA, debug0);
     }
     
-    public static NativeImage read(@Nullable final Format debug0, final ByteBuffer debug1) throws IOException {
-        if (debug0 != null && !debug0.supportedByStb()) {
-            throw new UnsupportedOperationException("Don't know how to read format " + debug0);
+    public static NativeImage read(@Nullable final Format format, final ByteBuffer byteBuffer) throws IOException {
+        if (format != null && !format.supportedByStb()) {
+            throw new UnsupportedOperationException("Don't know how to read format " + format);
         }
-        if (MemoryUtil.memAddress(debug1) == 0L) {
+        if (MemoryUtil.memAddress(byteBuffer) == 0L) {
             throw new IllegalArgumentException("Invalid buffer");
         }
-        try (final MemoryStack debug2 = MemoryStack.stackPush()) {
-            final IntBuffer debug3 = debug2.mallocInt(1);
-            final IntBuffer debug4 = debug2.mallocInt(1);
-            final IntBuffer debug5 = debug2.mallocInt(1);
-            final ByteBuffer debug6 = STBImage.stbi_load_from_memory(debug1, debug3, debug4, debug5, (debug0 == null) ? 0 : debug0.components);
-            if (debug6 == null) {
+        try (final MemoryStack memoryStack = MemoryStack.stackPush()) {
+            final IntBuffer ib1 = memoryStack.mallocInt(1);
+            final IntBuffer ib2 = memoryStack.mallocInt(1);
+            final IntBuffer ib3 = memoryStack.mallocInt(1);
+            final ByteBuffer buffer = STBImage.stbi_load_from_memory(byteBuffer, ib1, ib2, ib3, format == null ? 0 : format.components);
+            if (buffer == null) {
                 throw new IOException("Could not load image: " + STBImage.stbi_failure_reason());
             }
-            return new NativeImage((debug0 == null) ? Format.getStbFormat(debug5.get(0)) : debug0, debug3.get(0), debug4.get(0), true, MemoryUtil.memAddress(debug6)); // MagmaCube - decompile fix
+            return new NativeImage(format == null ? Format.getStbFormat(ib3.get(0)) : format, ib1.get(0), ib2.get(0), true, MemoryUtil.memAddress(buffer)); // MagmaCube - decompile fix
         }
     }
     
-    private static void setClamp(final boolean debug0) {
+    private static void setClamp(final boolean clamp) {
         RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
-        if (debug0) {
+        if (clamp) {
             GlStateManager._texParameter(3553, 10242, 10496);
             GlStateManager._texParameter(3553, 10243, 10496);
-        }
-        else {
+        } else {
             GlStateManager._texParameter(3553, 10242, 10497);
             GlStateManager._texParameter(3553, 10243, 10497);
         }
     }
     
-    private static void setFilter(final boolean debug0, final boolean debug1) {
+    private static void setFilter(final boolean linear, final boolean mipmap) {
         RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
-        if (debug0) {
-            GlStateManager._texParameter(3553, 10241, debug1 ? 9987 : 9729);
+        if (linear) {
+            GlStateManager._texParameter(3553, 10241, mipmap ? 9987 : 9729);
             GlStateManager._texParameter(3553, 10240, 9729);
-        }
-        else {
-            GlStateManager._texParameter(3553, 10241, debug1 ? 9986 : 9728);
+        } else {
+            GlStateManager._texParameter(3553, 10241, mipmap ? 9986 : 9728);
             GlStateManager._texParameter(3553, 10240, 9728);
         }
     }
@@ -151,8 +149,7 @@ public final class NativeImage implements AutoCloseable
         if (this.pixels != 0L) {
             if (this.useStbFree) {
                 STBImage.nstbi_image_free(this.pixels);
-            }
-            else {
+            } else {
                 MemoryUtil.nmemFree(this.pixels);
             }
         }
diff --git a/src/main/java/com/mojang/blaze3d/platform/Window.java b/src/main/java/com/mojang/blaze3d/platform/Window.java
index 23b2a52b0011081aa79921999e8e4ae236d33314..316d7329ce76c637ec045390c8e5e3f124c08445 100644
--- a/src/main/java/com/mojang/blaze3d/platform/Window.java
+++ b/src/main/java/com/mojang/blaze3d/platform/Window.java
@@ -74,7 +74,7 @@ public final class Window implements AutoCloseable
         final boolean isFullscreen = debug3.isFullscreen;
         this.fullscreen = isFullscreen;
         this.actuallyFullscreen = isFullscreen;
-        final Monitor debug7 = debug2.getMonitor(GLFW.glfwGetPrimaryMonitor());
+        final Monitor monitor = debug2.getMonitor(GLFW.glfwGetPrimaryMonitor());
         final int n = (debug3.width > 0) ? debug3.width : 1;
         this.width = n;
         this.windowedWidth = n;
@@ -87,13 +87,13 @@ public final class Window implements AutoCloseable
         GLFW.glfwWindowHint(139266, 2);
         GLFW.glfwWindowHint(139267, 0);
         GLFW.glfwWindowHint(139272, 0);
-        this.window = GLFW.glfwCreateWindow(this.width, this.height, (CharSequence)debug5, (this.fullscreen && debug7 != null) ? debug7.getMonitor() : 0L, 0L);
-        if (debug7 != null) {
-            final VideoMode debug8 = debug7.getPreferredVidMode(this.fullscreen ? this.preferredFullscreenVideoMode : Optional.empty());
-            final int n3 = debug7.getX() + debug8.getWidth() / 2 - this.width / 2;
+        this.window = GLFW.glfwCreateWindow(this.width, this.height, debug5, (this.fullscreen && monitor != null) ? monitor.getMonitor() : 0L, 0L);
+        if (monitor != null) {
+            final VideoMode debug8 = monitor.getPreferredVidMode(this.fullscreen ? this.preferredFullscreenVideoMode : Optional.empty());
+            final int n3 = monitor.getX() + debug8.getWidth() / 2 - this.width / 2;
             this.x = n3;
             this.windowedX = n3;
-            final int n4 = debug7.getY() + debug8.getHeight() / 2 - this.height / 2;
+            final int n4 = monitor.getY() + debug8.getHeight() / 2 - this.height / 2;
             this.y = n4;
             this.windowedY = n4;
         }
@@ -141,63 +141,63 @@ public final class Window implements AutoCloseable
         }
     }
     
-    public void setIcon(final InputStream debug1, final InputStream debug2) {
+    public void setIcon(final InputStream icon_16x16, final InputStream icon_32x32) {
         RenderSystem.assertThread(RenderSystem::isInInitPhase);
-        try (final MemoryStack debug3 = MemoryStack.stackPush()) {
-            if (debug1 == null) {
+        try (final MemoryStack memoryStack = MemoryStack.stackPush()) {
+            if (icon_16x16 == null) {
                 throw new FileNotFoundException("icons/icon_16x16.png");
             }
-            if (debug2 == null) {
+            if (icon_32x32 == null) {
                 throw new FileNotFoundException("icons/icon_32x32.png");
             }
-            final IntBuffer debug4 = debug3.mallocInt(1);
-            final IntBuffer debug5 = debug3.mallocInt(1);
-            final IntBuffer debug6 = debug3.mallocInt(1);
-            final GLFWImage.Buffer debug7 = GLFWImage.mallocStack(2, debug3);
-            final ByteBuffer debug8 = this.readIconPixels(debug1, debug4, debug5, debug6);
-            if (debug8 == null) {
+            final IntBuffer x = memoryStack.mallocInt(1);
+            final IntBuffer y = memoryStack.mallocInt(1);
+            final IntBuffer debug6 = memoryStack.mallocInt(1);
+            final GLFWImage.Buffer buffer = GLFWImage.mallocStack(2, memoryStack);
+            final ByteBuffer byteBuffer = this.readIconPixels(icon_16x16, x, y, debug6);
+            if (byteBuffer == null) {
                 throw new IllegalStateException("Could not load icon: " + STBImage.stbi_failure_reason());
             }
-            debug7.position(0);
-            debug7.width(debug4.get(0));
-            debug7.height(debug5.get(0));
-            debug7.pixels(debug8);
-            final ByteBuffer debug9 = this.readIconPixels(debug2, debug4, debug5, debug6);
-            if (debug9 == null) {
+            buffer.position(0);
+            buffer.width(x.get(0));
+            buffer.height(y.get(0));
+            buffer.pixels(byteBuffer);
+            final ByteBuffer byteBuffer1 = this.readIconPixels(icon_32x32, x, y, debug6);
+            if (byteBuffer1 == null) {
                 throw new IllegalStateException("Could not load icon: " + STBImage.stbi_failure_reason());
             }
-            debug7.position(1);
-            debug7.width(debug4.get(0));
-            debug7.height(debug5.get(0));
-            debug7.pixels(debug9);
-            debug7.position(0);
-            GLFW.glfwSetWindowIcon(this.window, debug7);
-            STBImage.stbi_image_free(debug8);
-            STBImage.stbi_image_free(debug9);
+            buffer.position(1);
+            buffer.width(x.get(0));
+            buffer.height(y.get(0));
+            buffer.pixels(byteBuffer1);
+            buffer.position(0);
+            GLFW.glfwSetWindowIcon(this.window, buffer);
+            STBImage.stbi_image_free(byteBuffer);
+            STBImage.stbi_image_free(byteBuffer1);
         }
-        catch (IOException debug10) {
-            Window.LOGGER.error("Couldn't set icon", (Throwable)debug10);
+        catch (IOException ex) {
+            Window.LOGGER.error("Couldn't set icon", ex);
         }
     }
     
     @Nullable
-    private ByteBuffer readIconPixels(final InputStream debug1, final IntBuffer debug2, final IntBuffer debug3, final IntBuffer debug4) throws IOException {
+    private ByteBuffer readIconPixels(final InputStream resource, final IntBuffer x, final IntBuffer y, final IntBuffer channel) throws IOException {
         RenderSystem.assertThread(RenderSystem::isInInitPhase);
         ByteBuffer debug5 = null;
         try {
-            debug5 = TextureUtil.readResource(debug1);
+            debug5 = TextureUtil.readResource(resource);
             debug5.rewind();
-            return STBImage.stbi_load_from_memory(debug5, debug2, debug3, debug4, 0);
+            return STBImage.stbi_load_from_memory(debug5, x, y, channel, 0);
         }
         finally {
             if (debug5 != null) {
-                MemoryUtil.memFree((Buffer)debug5);
+                MemoryUtil.memFree(debug5);
             }
         }
     }
     
-    public void setErrorSection(final String debug1) {
-        this.errorSection = debug1;
+    public void setErrorSection(final String errorSection) {
+        this.errorSection = errorSection;
     }
     
     private void setBootErrorCallback() {
@@ -205,23 +205,23 @@ public final class Window implements AutoCloseable
         GLFW.glfwSetErrorCallback(Window::bootCrash);
     }
     
-    private static void bootCrash(final int debug0, final long debug1) {
+    private static void bootCrash(final int error, final long address) {
         RenderSystem.assertThread(RenderSystem::isInInitPhase);
-        final String debug2 = "GLFW error " + debug0 + ": " + MemoryUtil.memUTF8(debug1);
-        TinyFileDialogs.tinyfd_messageBox((CharSequence)"Minecraft", (CharSequence)(debug2 + ".\n\nPlease make sure you have up-to-date drivers (see aka.ms/mcdriver for instructions)."), (CharSequence)"ok", (CharSequence)"error", false); // MagmaCube - decompile fix
-        throw new WindowInitFailed(debug2);
+        final String errorMessage = "GLFW error " + error + ": " + MemoryUtil.memUTF8(address);
+        TinyFileDialogs.tinyfd_messageBox("Minecraft", (errorMessage + ".\n\nPlease make sure you have up-to-date drivers (see aka.ms/mcdriver for instructions)."), "ok", "error", false); // MagmaCube - decompile fix
+        throw new WindowInitFailed(errorMessage);
     }
     
-    public void defaultErrorCallback(final int debug1, final long debug2) {
+    public void defaultErrorCallback(final int error, final long address) {
         RenderSystem.assertThread(RenderSystem::isOnRenderThread);
-        final String debug3 = MemoryUtil.memUTF8(debug2);
+        final String message = MemoryUtil.memUTF8(address);
         Window.LOGGER.error("########## GL ERROR ##########");
-        Window.LOGGER.error("@ {}", (Object)this.errorSection);
-        Window.LOGGER.error("{}: {}", (Object)debug1, (Object)debug3);
+        Window.LOGGER.error("@ {}", this.errorSection);
+        Window.LOGGER.error("{}: {}", error, message);
     }
     
     public void setDefaultErrorCallback() {
-        final GLFWErrorCallback debug1 = GLFW.glfwSetErrorCallback((GLFWErrorCallbackI)this.defaultErrorCallback);
+        final GLFWErrorCallback debug1 = GLFW.glfwSetErrorCallback(this.defaultErrorCallback);
         if (debug1 != null) {
             debug1.free();
         }
@@ -229,7 +229,7 @@ public final class Window implements AutoCloseable
     
     public void updateVsync(final boolean debug1) {
         RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
-        GLFW.glfwSwapInterval((int)((this.vsync = debug1) ? 1 : 0));
+        GLFW.glfwSwapInterval((this.vsync = debug1) ? 1 : 0);
     }
     
     @Override
@@ -392,7 +392,7 @@ public final class Window implements AutoCloseable
     }
     
     public void setTitle(final String debug1) {
-        GLFW.glfwSetWindowTitle(this.window, (CharSequence)debug1);
+        GLFW.glfwSetWindowTitle(this.window, debug1);
     }
     
     public long getWindow() {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
index cdace9c04921a3cffc45f7beec1fd047b32224b5..106dd77145081905fc765cc1acbeaf8dc049f29b 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
@@ -130,20 +130,20 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         return new State(debug1, this.format);
     }
     
-    private static float getQuadDistanceFromPlayer(final FloatBuffer debug0, final float debug1, final float debug2, final float debug3, final int debug4, final int debug5) {
-        // MagmaCube start - decompile fix
-        final float debug6 = debug0.get(debug5 + debug4 * 0 + 0);
-        final float debug7 = debug0.get(debug5 + debug4 * 0 + 1);
-        final float debug8 = debug0.get(debug5 + debug4 * 0 + 2);
-        final float debug9 = debug0.get(debug5 + debug4 * 1 + 0);
-        final float debug10 = debug0.get(debug5 + debug4 * 1 + 1);
-        final float debug11 = debug0.get(debug5 + debug4 * 1 + 2);
-        final float debug12 = debug0.get(debug5 + debug4 * 2 + 0);
-        final float debug13 = debug0.get(debug5 + debug4 * 2 + 1);
-        final float debug14 = debug0.get(debug5 + debug4 * 2 + 2);
-        final float debug15 = debug0.get(debug5 + debug4 * 3 + 0);
-        final float debug16 = debug0.get(debug5 + debug4 * 3 + 1);
-        final float debug17 = debug0.get(debug5 + debug4 * 3 + 2);
+    private static float getQuadDistanceFromPlayer(final FloatBuffer floatBuffer, final float debug1, final float debug2, final float debug3, final int debug4, final int debug5) {
+        // MagmaCube start - decompile fix todo: verify
+        final float debug6 = floatBuffer.get(debug5 + debug4 * 0 + 0);
+        final float debug7 = floatBuffer.get(debug5 + debug4 * 0 + 1);
+        final float debug8 = floatBuffer.get(debug5 + debug4 * 0 + 2);
+        final float debug9 = floatBuffer.get(debug5 + debug4 * 1 + 0);
+        final float debug10 = floatBuffer.get(debug5 + debug4 * 1 + 1);
+        final float debug11 = floatBuffer.get(debug5 + debug4 * 1 + 2);
+        final float debug12 = floatBuffer.get(debug5 + debug4 * 2 + 0);
+        final float debug13 = floatBuffer.get(debug5 + debug4 * 2 + 1);
+        final float debug14 = floatBuffer.get(debug5 + debug4 * 2 + 2);
+        final float debug15 = floatBuffer.get(debug5 + debug4 * 3 + 0);
+        final float debug16 = floatBuffer.get(debug5 + debug4 * 3 + 1);
+        final float debug17 = floatBuffer.get(debug5 + debug4 * 3 + 2);
         final float debug18 = (debug6 + debug9 + debug12 + debug15) * 0.25f - debug1;
         final float debug19 = (debug7 + debug10 + debug13 + debug16) * 0.25f - debug2;
         final float debug20 = (debug8 + debug11 + debug14 + debug17) * 0.25f - debug3;
diff --git a/src/main/java/com/mojang/blaze3d/vertex/VertexConsumer.java b/src/main/java/com/mojang/blaze3d/vertex/VertexConsumer.java
index a9321926d5abb1e4980493117094ccb31590625f..ec858ea6e1534221ce6ab9f734248589bc2acf28 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/VertexConsumer.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/VertexConsumer.java
@@ -99,10 +99,10 @@ public interface VertexConsumer
         }
     }
     
-    default VertexConsumer vertex(final Matrix4f debug1, final float debug2, final float debug3, final float debug4) {
-        final Vector4f debug5 = new Vector4f(debug2, debug3, debug4, 1.0f);
-        debug5.transform(debug1);
-        return this.vertex(debug5.x(), debug5.y(), debug5.z());
+    default VertexConsumer vertex(final Matrix4f matrix4f, final float x, final float y, final float z) {
+        final Vector4f vector4f = new Vector4f(x, y, z, 1.0f);
+        vector4f.transform(matrix4f);
+        return this.vertex(vector4f.x(), vector4f.y(), vector4f.z());
     }
     
     default VertexConsumer normal(final Matrix3f debug1, final float debug2, final float debug3, final float debug4) {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/VertexFormat.java b/src/main/java/com/mojang/blaze3d/vertex/VertexFormat.java
index 17bec50c42cccf6580d808f142ba8e5c4afe7a9c..96d0e7584e9da5b56c4e271e55f370d1f0708374 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/VertexFormat.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/VertexFormat.java
@@ -72,7 +72,7 @@ public class VertexFormat {
         int debug3 = this.getVertexSize();
         ImmutableList<VertexFormatElement> debug4 = this.getElements();
         for (int debug5 = 0; debug5 < debug4.size(); ++debug5) {
-            ((VertexFormatElement)debug4.get(debug5)).setupBufferState(debug1 + (long)this.offsets.getInt(debug5), debug3);
+            debug4.get(debug5).setupBufferState(debug1 + (long)this.offsets.getInt(debug5), debug3);
         }
     }
 
diff --git a/src/main/java/com/mojang/realmsclient/RealmsMainScreen.java b/src/main/java/com/mojang/realmsclient/RealmsMainScreen.java
index 2783f6849eddb5842902fa791325d4a4c0496563..ac91f0a3ca4e824b4c82e771c6732808c069850c 100644
--- a/src/main/java/com/mojang/realmsclient/RealmsMainScreen.java
+++ b/src/main/java/com/mojang/realmsclient/RealmsMainScreen.java
@@ -991,7 +991,7 @@ extends RealmsScreen {
         String debug2 = "LOCAL!";
         RenderSystem.color4f(1.0f, 1.0f, 1.0f, 1.0f);
         RenderSystem.pushMatrix();
-        RenderSystem.translatef(this.width / 2 - 25, 20.0f, 0.0f);
+        RenderSystem.translatef((float)this.width / 2.0f - 25, 20.0f, 0.0f);
         RenderSystem.rotatef(-20.0f, 0.0f, 0.0f, 1.0f);
         RenderSystem.scalef(1.5f, 1.5f, 1.5f);
         this.font.draw(debug1, "LOCAL!", 0.0f, 0.0f, 0x7FFF7F);
@@ -1002,7 +1002,7 @@ extends RealmsScreen {
         String debug2 = "STAGE!";
         RenderSystem.color4f(1.0f, 1.0f, 1.0f, 1.0f);
         RenderSystem.pushMatrix();
-        RenderSystem.translatef(this.width / 2 - 25, 20.0f, 0.0f);
+        RenderSystem.translatef((float)this.width / 2.0f - 25, 20.0f, 0.0f);
         RenderSystem.rotatef(-20.0f, 0.0f, 0.0f, 1.0f);
         RenderSystem.scalef(1.5f, 1.5f, 1.5f);
         this.font.draw(debug1, "STAGE!", 0.0f, 0.0f, -256);
@@ -1191,9 +1191,9 @@ extends RealmsScreen {
                 }
                 int debug16 = debug15 ? 2 : 1;
                 GuiComponent.blit(debug2, debug13, debug14, 0.0f, 46 + debug16 * 20, debug11 / 2, 8, 256, 256);
-                GuiComponent.blit(debug2, debug13 + debug11 / 2, debug14, 200 - debug11 / 2, 46 + debug16 * 20, debug11 / 2, 8, 256, 256);
+                GuiComponent.blit(debug2, debug13 + debug11 / 2, debug14, 200 - (float)debug11 / 2.0f, 46 + debug16 * 20, debug11 / 2, 8, 256, 256);
                 GuiComponent.blit(debug2, debug13, debug14 + 8, 0.0f, 46 + debug16 * 20 + 12, debug11 / 2, 8, 256, 256);
-                GuiComponent.blit(debug2, debug13 + debug11 / 2, debug14 + 8, 200 - debug11 / 2, 46 + debug16 * 20 + 12, debug11 / 2, 8, 256, 256);
+                GuiComponent.blit(debug2, debug13 + debug11 / 2, debug14 + 8, 200 - (float)debug11 / 2.0f, 46 + debug16 * 20 + 12, debug11 / 2, 8, 256, 256);
                 RenderSystem.disableBlend();
                 int debug17 = debug4 + 11 + 5;
                 int debug18 = debug15 ? 0xFFFFA0 : 0xFFFFFF;
@@ -1255,7 +1255,7 @@ extends RealmsScreen {
         }
     }
 
-    abstract class Entry
+    abstract static class Entry
     extends ObjectSelectionList.Entry<Entry> {
         private Entry() {
         }
diff --git a/src/main/java/com/mojang/realmsclient/client/FileDownload.java b/src/main/java/com/mojang/realmsclient/client/FileDownload.java
index 1dc52faf6ced4ee5059603c42724fd64a573c905..f2ccd79de259adff6962c2f7420bd0c3cfc2ad91 100644
--- a/src/main/java/com/mojang/realmsclient/client/FileDownload.java
+++ b/src/main/java/com/mojang/realmsclient/client/FileDownload.java
@@ -343,7 +343,7 @@ public class FileDownload {
         }
     }
 
-    class DownloadCountingOutputStream
+    static class DownloadCountingOutputStream
     extends CountingOutputStream {
         private ActionListener listener;
 
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsDownloadLatestWorldScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsDownloadLatestWorldScreen.java
index 1bee4132de6958f2c095f19704a72d1bd9b2a042..262e5ddfee37655f77e9d5d82cead9f55185cdfc 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsDownloadLatestWorldScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsDownloadLatestWorldScreen.java
@@ -179,7 +179,7 @@ extends RealmsScreen {
         Tesselator debug4 = Tesselator.getInstance();
         BufferBuilder debug5 = debug4.getBuilder();
         debug5.begin(7, DefaultVertexFormat.POSITION_COLOR);
-        double debug6 = this.width / 2 - 100;
+        double debug6 = (float)this.width / 2.0f - 100;
         double debug8 = 0.5;
         debug5.vertex(debug6 - 0.5, 95.5, 0.0).color(217, 210, 210, 255).endVertex();
         debug5.vertex(debug6 + 200.0 * debug2 + 0.5, 95.5, 0.0).color(217, 210, 210, 255).endVertex();
@@ -285,7 +285,7 @@ extends RealmsScreen {
         this.status = new TranslatableComponent("mco.download.cancelled");
     }
 
-    public class DownloadStatus {
+    public static class DownloadStatus {
         public volatile long bytesWritten;
         public volatile long totalBytes;
     }
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsUploadScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsUploadScreen.java
index 163411d8931cc7db72ff5cdc70c1e8e7380fd7ea..906b6904046871f93d85206a53c756e53ad6f6be 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsUploadScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsUploadScreen.java
@@ -175,7 +175,7 @@ extends RealmsScreen {
         this.progress = String.format(Locale.ROOT, "%.1f", debug2 * 100.0);
         RenderSystem.color4f(1.0f, 1.0f, 1.0f, 1.0f);
         RenderSystem.disableTexture();
-        double debug4 = this.width / 2 - 100;
+        double debug4 = (float)this.width / 2.0f - 100;
         double debug6 = 0.5;
         Tesselator debug8 = Tesselator.getInstance();
         BufferBuilder debug9 = debug8.getBuilder();
diff --git a/src/main/java/magmacube/DebugMain.java b/src/main/java/magmacube/DebugMain.java
new file mode 100644
index 0000000000000000000000000000000000000000..be5bfeed686ea2114a96edb21e12998ed86a3b13
--- /dev/null
+++ b/src/main/java/magmacube/DebugMain.java
@@ -0,0 +1,11 @@
+package magmacube;
+
+import net.minecraft.SharedConstants;
+import net.minecraft.client.main.Main;
+
+public class DebugMain {
+    public static void main(String[] args) {
+        SharedConstants.IS_RUNNING_IN_IDE = true;
+        Main.main(args);
+    }
+}
diff --git a/src/main/java/net/minecraft/CrashReport.java b/src/main/java/net/minecraft/CrashReport.java
index ecf3a1bceb196e3e610d6616bd19c93a54ca9c0f..e4e66f1d5eaf8ef7ccc45f2bb1ab58fc152e1359 100644
--- a/src/main/java/net/minecraft/CrashReport.java
+++ b/src/main/java/net/minecraft/CrashReport.java
@@ -24,10 +24,20 @@ import java.util.Date;
 import java.util.List;
 import java.util.concurrent.CompletionException;
 import java.util.stream.Collectors;
+
+import com.mojang.serialization.Lifecycle;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
+import net.minecraft.core.Registry;
+import net.minecraft.core.RegistryAccess;
+import net.minecraft.core.WritableRegistry;
+import net.minecraft.data.BuiltinRegistries;
+import net.minecraft.data.worldgen.biome.VanillaBiomes;
+import net.minecraft.world.effect.MobEffects;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.biome.Biomes;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.logging.log4j.LogManager;
@@ -43,9 +53,9 @@ public class CrashReport {
     private boolean trackingStackTrace = true;
     private StackTraceElement[] uncategorizedStackTrace = new StackTraceElement[0];
 
-    public CrashReport(String debug1, Throwable debug2) {
-        this.title = debug1;
-        this.exception = debug2;
+    public CrashReport(String title, Throwable exception) {
+        this.title = title;
+        this.exception = exception;
         this.initDetails();
     }
 
@@ -56,19 +66,19 @@ public class CrashReport {
         this.systemDetails.setDetail("Java Version", () -> System.getProperty("java.version") + ", " + System.getProperty("java.vendor"));
         this.systemDetails.setDetail("Java VM Version", () -> System.getProperty("java.vm.name") + " (" + System.getProperty("java.vm.info") + "), " + System.getProperty("java.vm.vendor"));
         this.systemDetails.setDetail("Memory", () -> {
-            Runtime debug0 = Runtime.getRuntime();
-            long debug1 = debug0.maxMemory();
-            long debug3 = debug0.totalMemory();
-            long debug5 = debug0.freeMemory();
-            long debug7 = debug1 / 1024L / 1024L;
-            long debug9 = debug3 / 1024L / 1024L;
-            long debug11 = debug5 / 1024L / 1024L;
-            return debug5 + " bytes (" + debug11 + " MB) / " + debug3 + " bytes (" + debug9 + " MB) up to " + debug1 + " bytes (" + debug7 + " MB)";
+            Runtime runtime = Runtime.getRuntime();
+            long maxMemory = runtime.maxMemory();
+            long totalMemory = runtime.totalMemory();
+            long freeMemory = runtime.freeMemory();
+            long maxMemoryMB = maxMemory / 1024L / 1024L;
+            long totalMemoryMB = totalMemory / 1024L / 1024L;
+            long freeMemoryMB = freeMemory / 1024L / 1024L;
+            return freeMemory + " bytes (" + freeMemoryMB + " MB) / " + totalMemory + " bytes (" + totalMemoryMB + " MB) up to " + maxMemory + " bytes (" + maxMemoryMB + " MB)";
         });
         this.systemDetails.setDetail("CPUs", Runtime.getRuntime().availableProcessors());
         this.systemDetails.setDetail("JVM Flags", () -> {
-            List debug0 = Util.getVmArguments().collect(Collectors.toList());
-            return String.format("%d total; %s", debug0.size(), debug0.stream().collect(Collectors.joining(" ")));
+            List<String> arguments = Util.getVmArguments().collect(Collectors.toList());
+            return String.format("%d total; %s", arguments.size(), arguments.stream().collect(Collectors.joining(" ")));
         });
     }
 
@@ -80,25 +90,25 @@ public class CrashReport {
         return this.exception;
     }
 
-    public void getDetails(StringBuilder debug1) {
+    public void getDetails(StringBuilder sb) {
         if (!(this.uncategorizedStackTrace != null && this.uncategorizedStackTrace.length > 0 || this.details.isEmpty())) {
             this.uncategorizedStackTrace = (StackTraceElement[])ArrayUtils.subarray((Object[])this.details.get(0).getStacktrace(), (int)0, (int)1);
         }
         if (this.uncategorizedStackTrace != null && this.uncategorizedStackTrace.length > 0) {
-            debug1.append("-- Head --\n");
-            debug1.append("Thread: ").append(Thread.currentThread().getName()).append("\n");
-            debug1.append("Stacktrace:\n");
-            for (StackTraceElement debug5 : this.uncategorizedStackTrace) {
-                debug1.append("\t").append("at ").append(debug5);
-                debug1.append("\n");
+            sb.append("-- Head --\n");
+            sb.append("Thread: ").append(Thread.currentThread().getName()).append("\n");
+            sb.append("Stacktrace:\n");
+            for (StackTraceElement element : this.uncategorizedStackTrace) {
+                sb.append("\t").append("at ").append(element);
+                sb.append("\n");
             }
-            debug1.append("\n");
+            sb.append("\n");
         }
-        for (CrashReportCategory debug3 : this.details) {
-            debug3.getDetails(debug1);
-            debug1.append("\n\n");
+        for (CrashReportCategory category : this.details) {
+            category.getDetails(sb);
+            sb.append("\n\n");
         }
-        this.systemDetails.getDetails(debug1);
+        this.systemDetails.getDetails(sb);
     }
 
     /*
@@ -106,55 +116,53 @@ public class CrashReport {
      */
     public String getExceptionMessage() {
         String string;
-        StringWriter debug1 = null;
-        PrintWriter debug2 = null;
-        Throwable debug3 = this.exception;
-        if (debug3.getMessage() == null) {
-            if (debug3 instanceof NullPointerException) {
-                debug3 = new NullPointerException(this.title);
-            } else if (debug3 instanceof StackOverflowError) {
-                debug3 = new StackOverflowError(this.title);
-            } else if (debug3 instanceof OutOfMemoryError) {
-                debug3 = new OutOfMemoryError(this.title);
+        StringWriter stringWriter = null;
+        PrintWriter printWriter = null;
+        Throwable throwable = this.exception;
+        if (throwable.getMessage() == null) {
+            if (throwable instanceof NullPointerException) {
+                throwable = new NullPointerException(this.title);
+            } else if (throwable instanceof StackOverflowError) {
+                throwable = new StackOverflowError(this.title);
+            } else if (throwable instanceof OutOfMemoryError) {
+                throwable = new OutOfMemoryError(this.title);
             }
-            debug3.setStackTrace(this.exception.getStackTrace());
+            throwable.setStackTrace(this.exception.getStackTrace());
         }
         try {
-            debug1 = new StringWriter();
-            debug2 = new PrintWriter(debug1);
-            debug3.printStackTrace(debug2);
-            string = debug1.toString();
+            stringWriter = new StringWriter();
+            printWriter = new PrintWriter(stringWriter);
+            throwable.printStackTrace(printWriter);
+            string = stringWriter.toString();
         }
-        catch (Throwable throwable) {
-            IOUtils.closeQuietly((Writer)debug1);
-            IOUtils.closeQuietly(debug2);
-            throw throwable;
+        catch (Throwable ex) {
+            IOUtils.closeQuietly((Writer)stringWriter);
+            IOUtils.closeQuietly(printWriter);
+            throw ex;
         }
-        IOUtils.closeQuietly((Writer)debug1);
-        IOUtils.closeQuietly((Writer)debug2);
+        IOUtils.closeQuietly((Writer)stringWriter);
+        IOUtils.closeQuietly((Writer)printWriter);
         return string;
     }
 
     public String getFriendlyReport() {
-        StringBuilder debug1 = new StringBuilder();
-        debug1.append("---- Minecraft Crash Report ----\n");
-        debug1.append("// ");
-        debug1.append(CrashReport.getErrorComment());
-        debug1.append("\n\n");
-        debug1.append("Time: ");
-        debug1.append(new SimpleDateFormat().format(new Date()));
-        debug1.append("\n");
-        debug1.append("Description: ");
-        debug1.append(this.title);
-        debug1.append("\n\n");
-        debug1.append(this.getExceptionMessage());
-        debug1.append("\n\nA detailed walkthrough of the error, its code path and all known details is as follows:\n");
-        for (int debug2 = 0; debug2 < 87; ++debug2) {
-            debug1.append("-");
-        }
-        debug1.append("\n\n");
-        this.getDetails(debug1);
-        return debug1.toString();
+        StringBuilder sb = new StringBuilder();
+        sb.append("---- Minecraft Crash Report ----\n");
+        sb.append("// ");
+        sb.append(CrashReport.getErrorComment());
+        sb.append("\n\n");
+        sb.append("Time: ");
+        sb.append(new SimpleDateFormat().format(new Date()));
+        sb.append("\n");
+        sb.append("Description: ");
+        sb.append(this.title);
+        sb.append("\n\n");
+        sb.append(this.getExceptionMessage());
+        sb.append("\n\nA detailed walkthrough of the error, its code path and all known details is as follows:\n");
+        for (int i = 0; i < 87; ++i) sb.append("-");
+        sb.append("\n\n");
+        this.getDetails(sb);
+        return sb.toString();
     }
 
     public File getSaveFile() {
@@ -164,94 +172,92 @@ public class CrashReport {
     /*
      * WARNING - Removed try catching itself - possible behaviour change.
      */
-    public boolean saveToFile(File debug1) {
-        boolean bl;
+    public boolean saveToFile(File file) {
+        boolean saved;
         if (this.saveFile != null) {
             return false;
         }
-        if (debug1.getParentFile() != null) {
-            debug1.getParentFile().mkdirs();
+        if (file.getParentFile() != null) {
+            file.getParentFile().mkdirs();
         }
-        OutputStreamWriter debug2 = null;
+        OutputStreamWriter outputStreamWriter = null;
         try {
-            debug2 = new OutputStreamWriter((OutputStream)new FileOutputStream(debug1), StandardCharsets.UTF_8);
-            debug2.write(this.getFriendlyReport());
-            this.saveFile = debug1;
-            bl = true;
+            outputStreamWriter = new OutputStreamWriter((OutputStream)new FileOutputStream(file), StandardCharsets.UTF_8);
+            outputStreamWriter.write(this.getFriendlyReport());
+            this.saveFile = file;
+            saved = true;
         }
         catch (Throwable debug3) {
-            boolean bl2;
             try {
-                LOGGER.error("Could not save crash report to {}", (Object)debug1, (Object)debug3);
-                bl2 = false;
+                LOGGER.error("Could not save crash report to {}", (Object)file, (Object)debug3);
+                saved = false;
             }
             catch (Throwable throwable) {
-                IOUtils.closeQuietly(debug2);
+                IOUtils.closeQuietly(outputStreamWriter);
                 throw throwable;
             }
-            IOUtils.closeQuietly((Writer)debug2);
-            return bl2;
+            IOUtils.closeQuietly((Writer)outputStreamWriter);
+            return saved;
         }
-        IOUtils.closeQuietly((Writer)debug2);
-        return bl;
+        IOUtils.closeQuietly((Writer)outputStreamWriter);
+        return saved;
     }
 
     public CrashReportCategory getSystemDetails() {
         return this.systemDetails;
     }
 
-    public CrashReportCategory addCategory(String debug1) {
-        return this.addCategory(debug1, 1);
+    public CrashReportCategory addCategory(String title) {
+        return this.addCategory(title, 1);
     }
 
-    public CrashReportCategory addCategory(String debug1, int debug2) {
-        CrashReportCategory debug3 = new CrashReportCategory(this, debug1);
+    public CrashReportCategory addCategory(String title, int debug2) {
+        CrashReportCategory category = new CrashReportCategory(this, title);
         if (this.trackingStackTrace) {
-            int debug4 = debug3.fillInStackTrace(debug2);
-            StackTraceElement[] debug5 = this.exception.getStackTrace();
-            StackTraceElement debug6 = null;
-            StackTraceElement debug7 = null;
-            int debug8 = debug5.length - debug4;
-            if (debug8 < 0) {
-                System.out.println("Negative index in crash report handler (" + debug5.length + "/" + debug4 + ")");
+            int l = category.fillInStackTrace(debug2);
+            StackTraceElement[] elements = this.exception.getStackTrace();
+            StackTraceElement el1 = null;
+            StackTraceElement el2 = null;
+            int index = elements.length - l;
+            if (index < 0) {
+                System.out.println("Negative index in crash report handler (" + elements.length + "/" + l + ")");
             }
-            if (debug5 != null && 0 <= debug8 && debug8 < debug5.length) {
-                debug6 = debug5[debug8];
-                if (debug5.length + 1 - debug4 < debug5.length) {
-                    debug7 = debug5[debug5.length + 1 - debug4];
+            if (elements != null && 0 <= index && index < elements.length) {
+                el1 = elements[index];
+                if (elements.length + 1 - l < elements.length) {
+                    el2 = elements[elements.length + 1 - l];
                 }
             }
-            this.trackingStackTrace = debug3.validateStackTrace(debug6, debug7);
-            if (debug4 > 0 && !this.details.isEmpty()) {
+            this.trackingStackTrace = category.validateStackTrace(el1, el2);
+            if (l > 0 && !this.details.isEmpty()) {
                 CrashReportCategory debug9 = this.details.get(this.details.size() - 1);
-                debug9.trimStacktrace(debug4);
-            } else if (debug5 != null && debug5.length >= debug4 && 0 <= debug8 && debug8 < debug5.length) {
-                this.uncategorizedStackTrace = new StackTraceElement[debug8];
-                System.arraycopy(debug5, 0, this.uncategorizedStackTrace, 0, this.uncategorizedStackTrace.length);
+                debug9.trimStacktrace(l);
+            } else if (elements != null && elements.length >= l && 0 <= index && index < elements.length) {
+                this.uncategorizedStackTrace = new StackTraceElement[index];
+                System.arraycopy(elements, 0, this.uncategorizedStackTrace, 0, this.uncategorizedStackTrace.length);
             } else {
                 this.trackingStackTrace = false;
             }
         }
-        this.details.add(debug3);
-        return debug3;
+        this.details.add(category);
+        return category;
     }
 
     private static String getErrorComment() {
-        String[] debug0 = new String[]{"Who set us up the TNT?", "Everything's going to plan. No, really, that was supposed to happen.", "Uh... Did I do that?", "Oops.", "Why did you do that?", "I feel sad now :(", "My bad.", "I'm sorry, Dave.", "I let you down. Sorry :(", "On the bright side, I bought you a teddy bear!", "Daisy, daisy...", "Oh - I know what I did wrong!", "Hey, that tickles! Hehehe!", "I blame Dinnerbone.", "You should try our sister game, Minceraft!", "Don't be sad. I'll do better next time, I promise!", "Don't be sad, have a hug! <3", "I just don't know what went wrong :(", "Shall we play a game?", "Quite honestly, I wouldn't worry myself about that.", "I bet Cylons wouldn't have this problem.", "Sorry :(", "Surprise! Haha. Well, this is awkward.", "Would you like a cupcake?", "Hi. I'm Minecraft, and I'm a crashaholic.", "Ooh. Shiny.", "This doesn't make any sense!", "Why is it breaking :(", "Don't do that.", "Ouch. That hurt :(", "You're mean.", "This is a token for 1 free hug. Redeem at your nearest Mojangsta: [~~HUG~~]", "There are four lights!", "But it works on my machine."}; // MagmaCube - decompile fix
+        String[] messages = new String[]{"Who set us up the TNT?", "Everything's going to plan. No, really, that was supposed to happen.", "Uh... Did I do that?", "Oops.", "Why did you do that?", "I feel sad now :(", "My bad.", "I'm sorry, Dave.", "I let you down. Sorry :(", "On the bright side, I bought you a teddy bear!", "Daisy, daisy...", "Oh - I know what I did wrong!", "Hey, that tickles! Hehehe!", "I blame Dinnerbone.", "You should try our sister game, Minceraft!", "Don't be sad. I'll do better next time, I promise!", "Don't be sad, have a hug! <3", "I just don't know what went wrong :(", "Shall we play a game?", "Quite honestly, I wouldn't worry myself about that.", "I bet Cylons wouldn't have this problem.", "Sorry :(", "Surprise! Haha. Well, this is awkward.", "Would you like a cupcake?", "Hi. I'm Minecraft, and I'm a crashaholic.", "Ooh. Shiny.", "This doesn't make any sense!", "Why is it breaking :(", "Don't do that.", "Ouch. That hurt :(", "You're mean.", "This is a token for 1 free hug. Redeem at your nearest Mojangsta: [~~HUG~~]", "There are four lights!", "But it works on my machine."}; // MagmaCube - decompile fix
         try {
-            return debug0[(int)(Util.getNanos() % (long)debug0.length)];
+            return messages[(int)(Util.getNanos() % (long)messages.length)];
         }
-        catch (Throwable debug1) {
+        catch (Throwable ex) {
             return "Witty comment unavailable :(";
         }
     }
 
-    public static CrashReport forThrowable(Throwable debug0, String debug1) {
-        while (debug0 instanceof CompletionException && debug0.getCause() != null) {
-            debug0 = debug0.getCause();
+    public static CrashReport forThrowable(Throwable throwable, String title) {
+        while (throwable instanceof CompletionException && throwable.getCause() != null) {
+            throwable = throwable.getCause();
         }
-        CrashReport debug2 = debug0 instanceof ReportedException ? ((ReportedException)debug0).getReport() : new CrashReport(debug1, debug0);
-        return debug2;
+        return throwable instanceof ReportedException ? ((ReportedException)throwable).getReport() : new CrashReport(title, throwable);
     }
 
     public static void preload() {
diff --git a/src/main/java/net/minecraft/DetectedVersion.java b/src/main/java/net/minecraft/DetectedVersion.java
index 855a785de16f0f61f57a71af0baae640189128cb..1c0b076d24c3b44ecdf3e8666de1efa3f3a6235d 100644
--- a/src/main/java/net/minecraft/DetectedVersion.java
+++ b/src/main/java/net/minecraft/DetectedVersion.java
@@ -37,7 +37,7 @@ public class DetectedVersion implements GameVersion
         this.packVersion = 6;
         this.buildTime = new Date();
         this.releaseTarget = "1.16.4";
-        this.magmaCubeVersion = null; // MagmaCube
+        this.magmaCubeVersion = "debug"; // MagmaCube
     }
     
     private DetectedVersion(final JsonObject debug1) {
@@ -49,17 +49,17 @@ public class DetectedVersion implements GameVersion
         this.protocolVersion = GsonHelper.getAsInt(debug1, "protocol_version");
         this.packVersion = GsonHelper.getAsInt(debug1, "pack_version");
         this.buildTime = Date.from(ZonedDateTime.parse(GsonHelper.getAsString(debug1, "build_time")).toInstant());
-        this.magmaCubeVersion = debug1.has("magmacube_version") ? GsonHelper.getAsString(debug1, "magmacube_version") : null; // MagmaCube
+        this.magmaCubeVersion = debug1.has("magmacube_version") ? GsonHelper.getAsString(debug1, "magmacube_version") : "debug"; // MagmaCube
     }
     
     public static GameVersion tryDetectVersion() {
-        try (final InputStream debug0 = DetectedVersion.class.getResourceAsStream("/version.json")) {
-            if (debug0 == null) {
+        try (final InputStream version = DetectedVersion.class.getResourceAsStream("/version.json")) {
+            if (version == null) {
                 DetectedVersion.LOGGER.warn("Missing version information!");
                 return DetectedVersion.BUILT_IN;
             }
-            try (final InputStreamReader debug2 = new InputStreamReader(debug0)) {
-                return (GameVersion)new DetectedVersion(GsonHelper.parse(debug2));
+            try (final InputStreamReader reader = new InputStreamReader(version)) {
+                return new DetectedVersion(GsonHelper.parse(reader));
             }
         }
         catch (IOException | JsonParseException ex2) {
@@ -101,6 +101,6 @@ public class DetectedVersion implements GameVersion
     
     static {
         LOGGER = LogManager.getLogger();
-        BUILT_IN = (GameVersion)new DetectedVersion();
+        BUILT_IN = new DetectedVersion();
     }
 }
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 8338f6972672a87c0c40336c217501571bbdfa90..d60623fe7cecec3442afaec42e7f527256aff039 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -119,10 +119,10 @@ public class Util {
         return Instant.now().toEpochMilli();
     }
 
-    private static ExecutorService makeExecutor(String debug0) {
+    private static ExecutorService makeExecutor(String name) {
         int debug12 = Mth.clamp(Runtime.getRuntime().availableProcessors() - 1, 1, 7);
-        Object debug2 = debug12 <= 0 ? MoreExecutors.newDirectExecutorService() : new ForkJoinPool(debug12, debug1 -> {
-            ForkJoinWorkerThread debug2l = new ForkJoinWorkerThread(debug1){ // MagmaCube - decompile fix
+        ExecutorService executorService = debug12 <= 0 ? MoreExecutors.newDirectExecutorService() : new ForkJoinPool(debug12, debug1 -> {
+            ForkJoinWorkerThread workerThread = new ForkJoinWorkerThread(debug1){ // MagmaCube - decompile fix
 
                 @Override
                 protected void onTermination(Throwable debug1) {
@@ -134,10 +134,10 @@ public class Util {
                     super.onTermination(debug1);
                 }
             };
-            debug2l.setName("Worker-" + debug0 + "-" + WORKER_COUNT.getAndIncrement()); // MagmaCube - decompile fix
-            return debug2l; // MagmaCube - decompile fix
+            workerThread.setName("Worker-" + name + "-" + WORKER_COUNT.getAndIncrement()); // MagmaCube - decompile fix
+            return workerThread; // MagmaCube - decompile fix
         }, Util::onThreadException, true);
-        return (ExecutorService) debug2; // MagmaCube - decompile fix
+        return (ExecutorService) executorService; // MagmaCube - decompile fix
     }
 
     public static Executor bootstrapExecutor() {
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index 83d5060bc399683d7aa2b4766df3f1d6982da397..02dea8ea4efa7c2413ef2f7fa4b7d2dae96ad907 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -180,6 +180,7 @@ import net.minecraft.core.Direction;
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
+import net.minecraft.data.BuiltinRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
@@ -256,6 +257,7 @@ import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelSettings;
 import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.biome.Biomes;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.RenderShape;
 import net.minecraft.world.level.block.entity.BlockEntity;
@@ -402,7 +404,7 @@ WindowEventHandler {
         super("Client");
         Object debug7;
         int debug5;
-        String debug4;
+        String server;
         instance = this;
         this.gameDirectory = debug12.location.gameDirectory;
         File debug2 = debug12.location.assetDirectory;
@@ -425,10 +427,10 @@ WindowEventHandler {
         this.is64bit = Minecraft.checkIs64Bit();
         this.singleplayerServer = null;
         if (this.allowsMultiplayer() && debug12.server.hostname != null) {
-            debug4 = debug12.server.hostname;
+            server = debug12.server.hostname;
             debug5 = debug12.server.port;
         } else {
-            debug4 = null;
+            server = null;
             debug5 = 0;
         }
         KeybindComponent.setKeyResolver(KeyMapping::createNameSupplier);
@@ -520,8 +522,8 @@ WindowEventHandler {
         this.window.updateRawMouseInput(this.options.rawMouseInput);
         this.window.setDefaultErrorCallback();
         this.resizeDisplay();
-        if (debug4 != null) {
-            this.setScreen(new ConnectScreen(new TitleScreen(), this, debug4, debug5));
+        if (server != null) {
+            this.setScreen(new ConnectScreen(new TitleScreen(), this, server, debug5));
         } else {
             this.setScreen(new TitleScreen(true));
         }
@@ -540,34 +542,34 @@ WindowEventHandler {
     }
 
     private String createTitle() {
-        StringBuilder debug1 = new StringBuilder("Minecraft");
+        StringBuilder sb = new StringBuilder("Minecraft");
         if (this.isProbablyModded()) {
-            debug1.append("*");
+            sb.append("*");
         }
-        debug1.append(" ");
-        debug1.append(SharedConstants.getCurrentVersion().getName());
-        ClientPacketListener debug2 = this.getConnection();
-        if (debug2 != null && debug2.getConnection().isConnected()) {
-            debug1.append(" - ");
+        sb.append(" ");
+        sb.append(SharedConstants.getCurrentVersion().getName());
+        ClientPacketListener clientPacketListener = this.getConnection();
+        if (clientPacketListener != null && clientPacketListener.getConnection().isConnected()) {
+            sb.append(" - ");
             if (this.singleplayerServer != null && !this.singleplayerServer.isPublished()) {
-                debug1.append(I18n.get("title.singleplayer", new Object[0]));
+                sb.append(I18n.get("title.singleplayer"));
             } else if (this.isConnectedToRealms()) {
-                debug1.append(I18n.get("title.multiplayer.realms", new Object[0]));
+                sb.append(I18n.get("title.multiplayer.realms"));
             } else if (this.singleplayerServer != null || this.currentServer != null && this.currentServer.isLan()) {
-                debug1.append(I18n.get("title.multiplayer.lan", new Object[0]));
+                sb.append(I18n.get("title.multiplayer.lan"));
             } else {
-                debug1.append(I18n.get("title.multiplayer.other", new Object[0]));
+                sb.append(I18n.get("title.multiplayer.other"));
             }
         }
-        return debug1.toString();
+        return sb.toString();
     }
 
-    private SocialInteractionsService createSocialInteractions(YggdrasilAuthenticationService debug1, GameConfig debug2) {
+    private SocialInteractionsService createSocialInteractions(YggdrasilAuthenticationService authenticationService, GameConfig gameConfig) {
         try {
-            return debug1.createSocialInteractionsService(debug2.user.user.getAccessToken());
+            return authenticationService.createSocialInteractionsService(gameConfig.user.user.getAccessToken());
         }
-        catch (AuthenticationException debug3) {
-            LOGGER.error("Failed to verify authentication", (Throwable)debug3);
+        catch (AuthenticationException ex) {
+            LOGGER.error("Failed to verify authentication", (Throwable)ex);
             return new OfflineSocialInteractions();
         }
     }
@@ -576,78 +578,78 @@ WindowEventHandler {
         return !"vanilla".equals(ClientBrandRetriever.getClientModName()) || Minecraft.class.getSigners() == null;
     }
 
-    private void rollbackResourcePacks(Throwable debug1) {
+    private void rollbackResourcePacks(Throwable throwable) {
         if (this.resourcePackRepository.getSelectedIds().size() > 1) {
-            TextComponent debug2 = debug1 instanceof SimpleReloadableResourceManager.ResourcePackLoadingFailure ? new TextComponent(((SimpleReloadableResourceManager.ResourcePackLoadingFailure)debug1).getPack().getName()) : null;
-            this.clearResourcePacksOnError(debug1, debug2);
+            TextComponent component = throwable instanceof SimpleReloadableResourceManager.ResourcePackLoadingFailure ? new TextComponent(((SimpleReloadableResourceManager.ResourcePackLoadingFailure)throwable).getPack().getName()) : null;
+            this.clearResourcePacksOnError(throwable, component);
         } else {
-            Util.throwAsRuntime(debug1);
+            Util.throwAsRuntime(throwable);
         }
     }
 
-    public void clearResourcePacksOnError(Throwable debug1, @Nullable Component debug2) {
-        LOGGER.info("Caught error loading resourcepacks, removing all selected resourcepacks", debug1);
+    public void clearResourcePacksOnError(Throwable throwable, @Nullable Component component) {
+        LOGGER.info("Caught error loading resourcepacks, removing all selected resourcepacks", throwable);
         this.resourcePackRepository.setSelected(Collections.emptyList());
         this.options.resourcePacks.clear();
         this.options.incompatibleResourcePacks.clear();
         this.options.save();
         this.reloadResourcePacks().thenRun(() -> {
-            ToastComponent debug22 = this.getToasts(); // MagmaCube - decompile fix
-            SystemToast.addOrUpdate(debug22, SystemToast.SystemToastIds.PACK_LOAD_FAILURE, new TranslatableComponent("resourcePack.load_fail"), debug2); // MagmaCube - decompile fix
+            ToastComponent toastComponent = this.getToasts(); // MagmaCube - decompile fix
+            SystemToast.addOrUpdate(toastComponent, SystemToast.SystemToastIds.PACK_LOAD_FAILURE, new TranslatableComponent("resourcePack.load_fail"), component); // MagmaCube - decompile fix
         });
     }
 
     public void run() {
         this.gameThread = Thread.currentThread();
         try {
-            boolean debug1 = false;
+            boolean handledOutOfMemoryError = false;
             while (this.running) {
                 if (this.delayedCrash != null) {
                     Minecraft.crash(this.delayedCrash);
                     return;
                 }
                 try {
-                    SingleTickProfiler debug2 = SingleTickProfiler.createTickProfiler("Renderer");
-                    boolean debug3 = this.shouldRenderFpsPie();
-                    this.startProfilers(debug3, debug2);
+                    SingleTickProfiler singleTickProfiler = SingleTickProfiler.createTickProfiler("Renderer");
+                    boolean shouldRenderFpsPie = this.shouldRenderFpsPie();
+                    this.startProfilers(shouldRenderFpsPie, singleTickProfiler);
                     this.profiler.startTick();
-                    this.runTick(!debug1);
+                    this.runTick(!handledOutOfMemoryError);
                     this.profiler.endTick();
-                    this.finishProfilers(debug3, debug2);
+                    this.finishProfilers(shouldRenderFpsPie, singleTickProfiler);
                 }
-                catch (OutOfMemoryError debug2) {
-                    if (debug1) {
-                        throw debug2;
+                catch (OutOfMemoryError outOfMemoryError) {
+                    if (handledOutOfMemoryError) {
+                        throw outOfMemoryError;
                     }
                     this.emergencySave();
                     this.setScreen(new OutOfMemoryScreen());
                     System.gc();
-                    LOGGER.fatal("Out of memory", (Throwable)debug2);
-                    debug1 = true;
+                    LOGGER.fatal("Out of memory", outOfMemoryError);
+                    handledOutOfMemoryError = true;
                 }
             }
         }
-        catch (ReportedException debug1) {
-            this.fillReport(debug1.getReport());
+        catch (ReportedException reportedException) {
+            this.fillReport(reportedException.getReport());
             this.emergencySave();
-            LOGGER.fatal("Reported exception thrown!", (Throwable)debug1);
-            Minecraft.crash(debug1.getReport());
+            LOGGER.fatal("Reported exception thrown!", reportedException);
+            Minecraft.crash(reportedException.getReport());
         }
-        catch (Throwable debug1) {
-            CrashReport debug2 = this.fillReport(new CrashReport("Unexpected error", debug1));
-            LOGGER.fatal("Unreported exception thrown!", debug1);
+        catch (Throwable throwable) {
+            CrashReport crashReport = this.fillReport(new CrashReport("Unexpected error", throwable));
+            LOGGER.fatal("Unreported exception thrown!", throwable);
             this.emergencySave();
-            Minecraft.crash(debug2);
+            Minecraft.crash(crashReport);
         }
     }
 
     void selectMainFont(boolean debug1) {
-        this.fontManager.setRenames((Map<ResourceLocation, ResourceLocation>)(debug1 ? ImmutableMap.of(DEFAULT_FONT, UNIFORM_FONT) : ImmutableMap.of())); // MagmaCube - decompile fix
+        this.fontManager.setRenames(debug1 ? ImmutableMap.of(DEFAULT_FONT, UNIFORM_FONT) : ImmutableMap.of()); // MagmaCube - decompile fix
     }
 
     private void createSearchTrees() {
-        ReloadableSearchTree<ItemStack> debug1 = new ReloadableSearchTree<ItemStack>(debug02 -> debug02.getTooltipLines(null, TooltipFlag.Default.NORMAL).stream().map(debug0 -> ChatFormatting.stripFormatting(debug0.getString()).trim()).filter(debug0 -> !debug0.isEmpty()), debug0 -> Stream.of(Registry.ITEM.getKey(debug0.getItem())));
-        ReloadableIdSearchTree<ItemStack> debug22 = new ReloadableIdSearchTree<ItemStack>(debug0 -> ItemTags.getAllTags().getMatchingTags(debug0.getItem()).stream());
+        ReloadableSearchTree<ItemStack> debug1 = new ReloadableSearchTree<>(debug02 -> debug02.getTooltipLines(null, TooltipFlag.Default.NORMAL).stream().map(debug0 -> ChatFormatting.stripFormatting(debug0.getString()).trim()).filter(debug0 -> !debug0.isEmpty()), debug0 -> Stream.of(Registry.ITEM.getKey(debug0.getItem())));
+        ReloadableIdSearchTree<ItemStack> debug22 = new ReloadableIdSearchTree<>(debug0 -> ItemTags.getAllTags().getMatchingTags(debug0.getItem()).stream());
         NonNullList<ItemStack> debug3 = NonNullList.create();
         for (Item debug5 : Registry.ITEM) {
             debug5.fillItemCategory(CreativeModeTab.TAB_SEARCH, debug3);
@@ -998,13 +1000,13 @@ WindowEventHandler {
 
     @Override
     public void resizeDisplay() {
-        int debug1 = this.window.calculateScale(this.options.guiScale, this.isEnforceUnicode());
-        this.window.setGuiScale(debug1);
+        int scale = this.window.calculateScale(this.options.guiScale, this.isEnforceUnicode());
+        this.window.setGuiScale(scale);
         if (this.screen != null) {
             this.screen.resize(this, this.window.getGuiScaledWidth(), this.window.getGuiScaledHeight());
         }
-        RenderTarget debug2 = this.getMainRenderTarget();
-        debug2.resize(this.window.getWidth(), this.window.getHeight(), ON_OSX);
+        RenderTarget renderTarget = this.getMainRenderTarget();
+        renderTarget.resize(this.window.getWidth(), this.window.getHeight(), ON_OSX);
         this.gameRenderer.resize(this.window.getWidth(), this.window.getHeight());
         this.mouseHandler.setIgnoreFirstMove();
     }
diff --git a/src/main/java/net/minecraft/client/MouseHandler.java b/src/main/java/net/minecraft/client/MouseHandler.java
index 5277493fdb7abda7a282d545af97d969cda09947..dbb25794a15ea185d3f4b95251d207ca60bdcb3b 100644
--- a/src/main/java/net/minecraft/client/MouseHandler.java
+++ b/src/main/java/net/minecraft/client/MouseHandler.java
@@ -264,8 +264,8 @@ public class MouseHandler {
             KeyMapping.setAll();
         }
         this.mouseGrabbed = true;
-        this.xpos = this.minecraft.getWindow().getScreenWidth() / 2;
-        this.ypos = this.minecraft.getWindow().getScreenHeight() / 2;
+        this.xpos = (float)this.minecraft.getWindow().getScreenWidth() / 2.0f;
+        this.ypos = (float)this.minecraft.getWindow().getScreenHeight() / 2.0f;
         InputConstants.grabOrReleaseMouse(this.minecraft.getWindow().getWindow(), 212995, this.xpos, this.ypos);
         this.minecraft.setScreen(null);
         this.minecraft.missTime = 10000;
@@ -277,8 +277,8 @@ public class MouseHandler {
             return;
         }
         this.mouseGrabbed = false;
-        this.xpos = this.minecraft.getWindow().getScreenWidth() / 2;
-        this.ypos = this.minecraft.getWindow().getScreenHeight() / 2;
+        this.xpos = (float)this.minecraft.getWindow().getScreenWidth() / 2.0f;
+        this.ypos = (float)this.minecraft.getWindow().getScreenHeight() / 2.0f;
         InputConstants.grabOrReleaseMouse(this.minecraft.getWindow().getWindow(), 212993, this.xpos, this.ypos);
     }
 
diff --git a/src/main/java/net/minecraft/client/NarratorStatus.java b/src/main/java/net/minecraft/client/NarratorStatus.java
index 60fbfcd0e79697ab0326fd4e8d3680043a219b76..f11ede4990b81f6fafede7d80f0cfb4505e2e7ad 100644
--- a/src/main/java/net/minecraft/client/NarratorStatus.java
+++ b/src/main/java/net/minecraft/client/NarratorStatus.java
@@ -17,9 +17,9 @@ public enum NarratorStatus
     private final int id;
     private final Component name;
     
-    private NarratorStatus(final int debug3, final String debug4) {
-        this.id = debug3;
-        this.name = new TranslatableComponent(debug4);
+    private NarratorStatus(final int id, final String message) {
+        this.id = id;
+        this.name = new TranslatableComponent(message);
     }
     
     public int getId() {
@@ -30,8 +30,8 @@ public enum NarratorStatus
         return this.name;
     }
     
-    public static NarratorStatus byId(final int debug0) {
-        return NarratorStatus.BY_ID[Mth.positiveModulo(debug0, NarratorStatus.BY_ID.length)];
+    public static NarratorStatus byId(final int id) {
+        return NarratorStatus.BY_ID[Mth.positiveModulo(id, NarratorStatus.BY_ID.length)];
     }
     
     static {
diff --git a/src/main/java/net/minecraft/client/Screenshot.java b/src/main/java/net/minecraft/client/Screenshot.java
index e9f5fa121ba816beafbb5ada50746e0d1b7ad0d1..25008777ca87d2ed55d876645d3a6aae23f9b3ba 100644
--- a/src/main/java/net/minecraft/client/Screenshot.java
+++ b/src/main/java/net/minecraft/client/Screenshot.java
@@ -37,39 +37,38 @@ public class Screenshot
         }
     }
     
-    private static void _grab(final File debug0, @Nullable final String debug1, final int debug2, final int debug3, final RenderTarget debug4, final Consumer<Component> debug5) {
-        final NativeImage debug6 = takeScreenshot(debug2, debug3, debug4);
-        final File debug7 = new File(debug0, "screenshots");
-        debug7.mkdir();
-        final File debug8; // MagmaCube - decompile fix
-        if (debug1 == null) {
-            debug8 = getFile(debug7); // MagmaCube - decompile fix
+    private static void _grab(final File rootFolder, @Nullable final String name, final int width, final int height, final RenderTarget target, final Consumer<Component> debug5) {
+        final NativeImage nativeImage = takeScreenshot(width, height, target);
+        final File directory = new File(rootFolder, "screenshots");
+        directory.mkdir();
+        final File file; // MagmaCube - decompile fix
+        if (name == null) {
+            file = getFile(directory); // MagmaCube - decompile fix
         }
         else {
-            debug8 = new File(debug7, debug1); // MagmaCube - decompile fix
+            file = new File(directory, name); // MagmaCube - decompile fix
         }
         Util.ioPool().execute(() -> {
             try {
-                debug6.writeToFile(debug8); // MagmaCube - decompile fix
-                Component debug9 = new TextComponent(debug8.getName()).withStyle(ChatFormatting.UNDERLINE).withStyle(debug1l -> debug1l.withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_FILE, debug8.getAbsolutePath()))); // MagmaCube - decompile fix
-                new TranslatableComponent("screenshot.success", new Object[] { debug9 });
-                debug5.accept(debug9); // MagmaCube - decompile fix
+                nativeImage.writeToFile(file); // MagmaCube - decompile fix
+                Component component = new TextComponent(file.getName()).withStyle(ChatFormatting.UNDERLINE).withStyle(style -> style.withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_FILE, file.getAbsolutePath()))); // MagmaCube - decompile fix
+                debug5.accept(new TranslatableComponent("screenshot.success", component)); // MagmaCube - decompile fix
             }
             catch (Exception debug10) {
                 Screenshot.LOGGER.warn("Couldn't save screenshot", (Throwable)debug10);
-                debug5.accept(new TranslatableComponent("screenshot.failure", new Object[] { debug10.getMessage() })); // MagmaCube - decompile fix
+                debug5.accept(new TranslatableComponent("screenshot.failure", debug10.getMessage())); // MagmaCube - decompile fix
             }
             finally {
-                debug6.close(); // MagmaCube - decompile fix
+                nativeImage.close(); // MagmaCube - decompile fix
             }
         });
     }
     
-    public static NativeImage takeScreenshot(int debug0, int debug1, final RenderTarget debug2) {
-        debug0 = debug2.width;
-        debug1 = debug2.height;
-        final NativeImage debug3 = new NativeImage(debug0, debug1, false);
-        RenderSystem.bindTexture(debug2.getColorTextureId());
+    public static NativeImage takeScreenshot(int width, int height, final RenderTarget target) {
+        width = target.width;
+        height = target.height;
+        final NativeImage debug3 = new NativeImage(width, height, false);
+        RenderSystem.bindTexture(target.getColorTextureId());
         debug3.downloadTexture(0, true);
         debug3.flipY();
         return debug3;
diff --git a/src/main/java/net/minecraft/client/Timer.java b/src/main/java/net/minecraft/client/Timer.java
index 7d1b72892d4aa85ab7be43bb5b72347aa1b0365e..1824b12d266068b1e4615530fca94d37b1fee37f 100644
--- a/src/main/java/net/minecraft/client/Timer.java
+++ b/src/main/java/net/minecraft/client/Timer.java
@@ -7,14 +7,14 @@ public class Timer
     private long lastMs;
     private final float msPerTick;
     
-    public Timer(final float debug1, final long debug2) {
+    public Timer(final float debug1, final long ms) {
         this.msPerTick = 1000.0f / debug1;
-        this.lastMs = debug2;
+        this.lastMs = ms;
     }
     
-    public int advanceTime(final long debug1) {
-        this.tickDelta = (debug1 - this.lastMs) / this.msPerTick;
-        this.lastMs = debug1;
+    public int advanceTime(final long ms) {
+        this.tickDelta = (ms - this.lastMs) / this.msPerTick;
+        this.lastMs = ms;
         this.partialTick += this.tickDelta;
         final int debug2 = (int)this.partialTick;
         this.partialTick -= debug2;
diff --git a/src/main/java/net/minecraft/client/gui/Gui.java b/src/main/java/net/minecraft/client/gui/Gui.java
index 7f5f2c57b949c1a546a4de5ecae676a04e14a24c..329bdac464c2765f7e6bfe56f691be605282bb5d 100644
--- a/src/main/java/net/minecraft/client/gui/Gui.java
+++ b/src/main/java/net/minecraft/client/gui/Gui.java
@@ -245,7 +245,7 @@ extends GuiComponent {
                 }
                 if (debug7 > 8) {
                     RenderSystem.pushMatrix();
-                    RenderSystem.translatef(this.screenWidth / 2, this.screenHeight - 68, 0.0f);
+                    RenderSystem.translatef((float)this.screenWidth / 2.0f, this.screenHeight - 68, 0.0f);
                     RenderSystem.enableBlend();
                     RenderSystem.defaultBlendFunc();
                     debug8 = 0xFFFFFF;
@@ -274,7 +274,7 @@ extends GuiComponent {
                 }
                 if ((debug7 = Mth.clamp(debug7, 0, 255)) > 8) {
                     RenderSystem.pushMatrix();
-                    RenderSystem.translatef(this.screenWidth / 2, this.screenHeight / 2, 0.0f);
+                    RenderSystem.translatef((float)this.screenWidth / 2.0f, (float)this.screenHeight / 2.0f, 0.0f);
                     RenderSystem.enableBlend();
                     RenderSystem.defaultBlendFunc();
                     RenderSystem.pushMatrix();
@@ -349,7 +349,7 @@ extends GuiComponent {
         }
         if (debug2.renderDebug && !debug2.hideGui && !this.minecraft.player.isReducedDebugInfo() && !debug2.reducedDebugInfo) {
             RenderSystem.pushMatrix();
-            RenderSystem.translatef(this.screenWidth / 2, this.screenHeight / 2, this.getBlitOffset());
+            RenderSystem.translatef((float)this.screenWidth / 2.0f, (float)this.screenHeight / 2.0f, this.getBlitOffset());
             Camera debug3 = this.minecraft.gameRenderer.getMainCamera();
             RenderSystem.rotatef(debug3.getXRot(), -1.0f, 0.0f, 0.0f);
             RenderSystem.rotatef(debug3.getYRot(), 0.0f, 1.0f, 0.0f);
@@ -629,7 +629,7 @@ extends GuiComponent {
             Gui.fill(debug1, debug23 - 2, debug24 - 9 - 1, debug25, debug24 - 1, debug17);
             Gui.fill(debug1, debug23 - 2, debug24 - 1, debug25, debug24, debug16);
             Font font = this.getFont();
-            float f = debug23 + debug9 / 2 - debug8 / 2;
+            float f = debug23 + (float)debug9 / 2.0f - (float)debug8 / 2.0f;
             this.getFont().getClass();
             font.draw(debug1, debug7, f, (float)(debug24 - 9), -1);
         }
diff --git a/src/main/java/net/minecraft/client/gui/GuiComponent.java b/src/main/java/net/minecraft/client/gui/GuiComponent.java
index 5e7299f628d3b2e1a3b87f3a9705af6da328239b..9d7f5b0756435b136f1f084530acf74bc9faa8e3 100644
--- a/src/main/java/net/minecraft/client/gui/GuiComponent.java
+++ b/src/main/java/net/minecraft/client/gui/GuiComponent.java
@@ -39,11 +39,10 @@ public abstract class GuiComponent
         fill(debug1, debug2, debug3 + 1, debug2 + 1, debug4, debug5);
     }
     
-    public static void fill(final PoseStack debug0, final int debug1, final int debug2, final int debug3, final int debug4, final int debug5) {
-        innerFill(debug0.last().pose(), debug1, debug2, debug3, debug4, debug5);
+    public static void fill(final PoseStack poseStack, final int minX, final int minY, final int maxX, final int maxY, final int color) {
+        innerFill(poseStack.last().pose(), minX, minY, maxX, maxY, color);
     }
 
-    // MagmaCube start - rename parameter and variable
     private static void innerFill(final Matrix4f matrix, int minX, int minY, int maxX, int maxY, final int color) {
         if (minX < maxX) {
             final int x = minX;
@@ -55,65 +54,64 @@ public abstract class GuiComponent
             minY = maxY;
             maxY = y;
         }
-        final float alpha = (color >> 24 & 0xFF) / 255.0f;
-        final float red = (color >> 16 & 0xFF) / 255.0f;
-        final float green = (color >> 8 & 0xFF) / 255.0f;
-        final float blue = (color & 0xFF) / 255.0f;
+        final float alpha = (float)(color >> 24 & 0xFF) / 255.0f;
+        final float red = (float)(color >> 16 & 0xFF) / 255.0f;
+        final float green = (float)(color >> 8 & 0xFF) / 255.0f;
+        final float blue = (float)(color & 0xFF) / 255.0f;
         final BufferBuilder builder = Tesselator.getInstance().getBuilder();
         RenderSystem.enableBlend();
         RenderSystem.disableTexture();
         RenderSystem.defaultBlendFunc();
         builder.begin(7, DefaultVertexFormat.POSITION_COLOR);
-        builder.vertex(matrix, minX, maxY, 0.0f).color(red, green, blue, alpha).endVertex();
-        builder.vertex(matrix, maxX, maxY, 0.0f).color(red, green, blue, alpha).endVertex();
-        builder.vertex(matrix, maxX, minY, 0.0f).color(red, green, blue, alpha).endVertex();
-        builder.vertex(matrix, minX, minY, 0.0f).color(red, green, blue, alpha).endVertex();
+        builder.vertex(matrix, (float)minX, (float)maxY, 0.0f).color(red, green, blue, alpha).endVertex();
+        builder.vertex(matrix, (float)maxX, (float)maxY, 0.0f).color(red, green, blue, alpha).endVertex();
+        builder.vertex(matrix, (float)maxX, (float)minY, 0.0f).color(red, green, blue, alpha).endVertex();
+        builder.vertex(matrix, (float)minX, (float)minY, 0.0f).color(red, green, blue, alpha).endVertex();
         builder.end();
         BufferUploader.end(builder);
         RenderSystem.enableTexture();
         RenderSystem.disableBlend();
     }
-    // MagmaCube end - rename parameter
     
-    protected void fillGradient(final PoseStack debug1, final int debug2, final int debug3, final int debug4, final int debug5, final int debug6, final int debug7) {
+    protected void fillGradient(final PoseStack poseStack, final int x1, final int y1, final int x2, final int y2, final int colorFrom, final int colorTo) {
         RenderSystem.disableTexture();
         RenderSystem.enableBlend();
         RenderSystem.disableAlphaTest();
         RenderSystem.defaultBlendFunc();
         RenderSystem.shadeModel(7425);
-        final Tesselator debug8 = Tesselator.getInstance();
-        final BufferBuilder debug9 = debug8.getBuilder();
-        debug9.begin(7, DefaultVertexFormat.POSITION_COLOR);
-        fillGradient(debug1.last().pose(), debug9, debug2, debug3, debug4, debug5, this.blitOffset, debug6, debug7);
-        debug8.end();
+        final Tesselator tesselator = Tesselator.getInstance();
+        final BufferBuilder bufferBuilder = tesselator.getBuilder();
+        bufferBuilder.begin(7, DefaultVertexFormat.POSITION_COLOR);
+        fillGradient(poseStack.last().pose(), bufferBuilder, x1, y1, x2, y2, this.blitOffset, colorFrom, colorTo);
+        tesselator.end();
         RenderSystem.shadeModel(7424);
         RenderSystem.disableBlend();
         RenderSystem.enableAlphaTest();
         RenderSystem.enableTexture();
     }
     
-    protected static void fillGradient(final Matrix4f debug0, final BufferBuilder debug1, final int debug2, final int debug3, final int debug4, final int debug5, final int debug6, final int debug7, final int debug8) {
-        final float debug9 = (debug7 >> 24 & 0xFF) / 255.0f;
-        final float debug10 = (debug7 >> 16 & 0xFF) / 255.0f;
-        final float debug11 = (debug7 >> 8 & 0xFF) / 255.0f;
-        final float debug12 = (debug7 & 0xFF) / 255.0f;
-        final float debug13 = (debug8 >> 24 & 0xFF) / 255.0f;
-        final float debug14 = (debug8 >> 16 & 0xFF) / 255.0f;
-        final float debug15 = (debug8 >> 8 & 0xFF) / 255.0f;
-        final float debug16 = (debug8 & 0xFF) / 255.0f;
-        debug1.vertex(debug0, debug4, debug3, debug6).color(debug10, debug11, debug12, debug9).endVertex();
-        debug1.vertex(debug0, debug2, debug3, debug6).color(debug10, debug11, debug12, debug9).endVertex();
-        debug1.vertex(debug0, debug2, debug5, debug6).color(debug14, debug15, debug16, debug13).endVertex();
-        debug1.vertex(debug0, debug4, debug5, debug6).color(debug14, debug15, debug16, debug13).endVertex();
+    protected static void fillGradient(final Matrix4f matrix4f, final BufferBuilder bufferBuilder, final int x1, final int y1, final int x2, final int y2, final int z, final int colorA, final int colorB) {
+        final float alphaA = (float)(colorA >> 24 & 0xFF) / 255.0f;
+        final float redA = (float)(colorA >> 16 & 0xFF) / 255.0f;
+        final float greenA = (float)(colorA >> 8 & 0xFF) / 255.0f;
+        final float blueA = (float)(colorA & 0xFF) / 255.0f;
+        final float alphaB = (float)(colorB >> 24 & 0xFF) / 255.0f;
+        final float redB = (float)(colorB >> 16 & 0xFF) / 255.0f;
+        final float greenB = (float)(colorB >> 8 & 0xFF) / 255.0f;
+        final float blueB = (float)(colorB & 0xFF) / 255.0f;
+        bufferBuilder.vertex(matrix4f, (float)x2, (float)y1, (float)z).color(redA, greenA, blueA, alphaA).endVertex();
+        bufferBuilder.vertex(matrix4f, (float)x1, (float)y1, (float)z).color(redA, greenA, blueA, alphaA).endVertex();
+        bufferBuilder.vertex(matrix4f, (float)x1, (float)y2, (float)z).color(redB, greenB, blueB, alphaB).endVertex();
+        bufferBuilder.vertex(matrix4f, (float)x2, (float)y2, (float)z).color(redB, greenB, blueB, alphaB).endVertex();
     }
     
-    public static void drawCenteredString(final PoseStack debug0, final Font debug1, final String debug2, final int debug3, final int debug4, final int debug5) {
-        debug1.drawShadow(debug0, debug2, debug3 - debug1.width(debug2) / 2, debug4, debug5);
+    public static void drawCenteredString(final PoseStack poseStack, final Font theFont, final String font, final int text, final int x, final int y) {
+        theFont.drawShadow(poseStack, font, (float)(text - theFont.width(font) / 2), x, y);
     }
     
-    public static void drawCenteredString(final PoseStack debug0, final Font debug1, final Component debug2, final int debug3, final int debug4, final int debug5) {
-        final FormattedCharSequence debug6 = debug2.getVisualOrderText();
-        debug1.drawShadow(debug0, debug6, debug3 - debug1.width(debug6) / 2, debug4, debug5);
+    public static void drawCenteredString(final PoseStack poseStack, final Font theFont, final Component font, final int text, final int x, final int y) {
+        final FormattedCharSequence debug6 = font.getVisualOrderText();
+        theFont.drawShadow(poseStack, debug6, (float)(text - theFont.width(debug6) / 2), x, y);
     }
     
     public static void drawString(final PoseStack debug0, final Font debug1, final String debug2, final int debug3, final int debug4, final int debug5) {
diff --git a/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java b/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java
index fb30caeb281e8b14106b7e930c204a93ed2b66e8..278771017e17f79f524a1337990eb76700fee8b5 100644
--- a/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/components/AbstractSelectionList.java
@@ -265,7 +265,7 @@ implements Widget {
     }
 
     protected void centerScrollOn(E debug1) {
-        this.setScrollAmount(this.children().indexOf(debug1) * this.itemHeight + this.itemHeight / 2 - (this.y1 - this.y0) / 2);
+        this.setScrollAmount(this.children().indexOf(debug1) * this.itemHeight + (float)this.itemHeight / 2.0F - (float)(this.y1 - this.y0) / 2.0F);
     }
 
     protected void ensureVisible(E debug1) {
diff --git a/src/main/java/net/minecraft/client/gui/components/ChatComponent.java b/src/main/java/net/minecraft/client/gui/components/ChatComponent.java
index 3e8b4064af492975dc29ad2b305d0fc9718ac63c..b67acafcaa9083da123393819c0b15e95fd40842 100644
--- a/src/main/java/net/minecraft/client/gui/components/ChatComponent.java
+++ b/src/main/java/net/minecraft/client/gui/components/ChatComponent.java
@@ -154,7 +154,7 @@ extends GuiComponent {
 
     private void addMessage(Component debug1, int debug2) {
         this.addMessage(debug1, debug2, this.minecraft.gui.getGuiTicks(), false);
-        LOGGER.info("[CHAT] {}", (Object)debug1.getString().replaceAll("\r", "\\\\r").replaceAll("\n", "\\\\n")); // MagmaCube - decompile fix
+        LOGGER.info("[CHAT] {}", debug1.getString().replaceAll("\r", "\\\\r").replaceAll("\n", "\\\\n")); // MagmaCube - decompile fix
     }
 
     private void addMessage(Component debug1, int debug2, int debug3, boolean debug4) {
@@ -169,13 +169,13 @@ extends GuiComponent {
                 this.newMessageSinceScroll = true;
                 this.scrollChat(1.0);
             }
-            this.trimmedMessages.add(0, new GuiMessage<FormattedCharSequence>(debug3, debug9, debug2));
+            this.trimmedMessages.add(0, new GuiMessage<>(debug3, debug9, debug2));
         }
         while (this.trimmedMessages.size() > 100) {
             this.trimmedMessages.remove(this.trimmedMessages.size() - 1);
         }
         if (!debug4) {
-            this.allMessages.add(0, new GuiMessage<Component>(debug3, debug1, debug2));
+            this.allMessages.add(0, new GuiMessage<>(debug3, debug1, debug2));
             while (this.allMessages.size() > 100) {
                 this.allMessages.remove(this.allMessages.size() - 1);
             }
diff --git a/src/main/java/net/minecraft/client/gui/components/CommandSuggestions.java b/src/main/java/net/minecraft/client/gui/components/CommandSuggestions.java
index 0083fc780fa68bae3d54acef283b3a708b98d621..f92a68eb36cf63d5c1b23533ed65d69a028fa183 100644
--- a/src/main/java/net/minecraft/client/gui/components/CommandSuggestions.java
+++ b/src/main/java/net/minecraft/client/gui/components/CommandSuggestions.java
@@ -316,15 +316,15 @@ public class CommandSuggestions {
         return FormattedCharSequence.composite(debug3);
     }
 
-    public void render(PoseStack debug1, int debug2, int debug3) {
+    public void render(PoseStack poseStack, int debug2, int debug3) {
         if (this.suggestions != null) {
-            this.suggestions.render(debug1, debug2, debug3);
+            this.suggestions.render(poseStack, debug2, debug3);
         } else {
             int debug4 = 0;
             for (FormattedCharSequence debug6 : this.commandUsage) {
                 int debug7 = this.anchorToBottom ? this.screen.height - 14 - 13 - 12 * debug4 : 72 + 12 * debug4;
-                GuiComponent.fill(debug1, this.commandUsagePosition - 1, debug7, this.commandUsagePosition + this.commandUsageWidth + 1, debug7 + 12, this.fillColor);
-                this.font.drawShadow(debug1, debug6, (float)this.commandUsagePosition, (float)(debug7 + 2), -1);
+                GuiComponent.fill(poseStack, this.commandUsagePosition - 1, debug7, this.commandUsagePosition + this.commandUsageWidth + 1, debug7 + 12, this.fillColor);
+                this.font.drawShadow(poseStack, debug6, (float)this.commandUsagePosition, (float)(debug7 + 2), -1);
                 ++debug4;
             }
         }
@@ -357,7 +357,7 @@ public class CommandSuggestions {
             this.select(0);
         }
 
-        public void render(PoseStack debug1, int debug2, int debug3) {
+        public void render(PoseStack debuposeStack1, int debug2, int debug3) {
             Message debug11;
             int debug10;
             boolean debug9;
@@ -371,35 +371,35 @@ public class CommandSuggestions {
                 this.lastMouse = new Vec2(debug2, debug3);
             }
             if (debug8) {
-                GuiComponent.fill(debug1, this.rect.getX(), this.rect.getY() - 1, this.rect.getX() + this.rect.getWidth(), this.rect.getY(), CommandSuggestions.this.fillColor);
-                GuiComponent.fill(debug1, this.rect.getX(), this.rect.getY() + this.rect.getHeight(), this.rect.getX() + this.rect.getWidth(), this.rect.getY() + this.rect.getHeight() + 1, CommandSuggestions.this.fillColor);
+                GuiComponent.fill(debuposeStack1, this.rect.getX(), this.rect.getY() - 1, this.rect.getX() + this.rect.getWidth(), this.rect.getY(), CommandSuggestions.this.fillColor);
+                GuiComponent.fill(debuposeStack1, this.rect.getX(), this.rect.getY() + this.rect.getHeight(), this.rect.getX() + this.rect.getWidth(), this.rect.getY() + this.rect.getHeight() + 1, CommandSuggestions.this.fillColor);
                 if (debug6) {
                     for (debug10 = 0; debug10 < this.rect.getWidth(); ++debug10) {
                         if (debug10 % 2 != 0) continue;
-                        GuiComponent.fill(debug1, this.rect.getX() + debug10, this.rect.getY() - 1, this.rect.getX() + debug10 + 1, this.rect.getY(), -1);
+                        GuiComponent.fill(debuposeStack1, this.rect.getX() + debug10, this.rect.getY() - 1, this.rect.getX() + debug10 + 1, this.rect.getY(), -1);
                     }
                 }
                 if (debug7) {
                     for (debug10 = 0; debug10 < this.rect.getWidth(); ++debug10) {
                         if (debug10 % 2 != 0) continue;
-                        GuiComponent.fill(debug1, this.rect.getX() + debug10, this.rect.getY() + this.rect.getHeight(), this.rect.getX() + debug10 + 1, this.rect.getY() + this.rect.getHeight() + 1, -1);
+                        GuiComponent.fill(debuposeStack1, this.rect.getX() + debug10, this.rect.getY() + this.rect.getHeight(), this.rect.getX() + debug10 + 1, this.rect.getY() + this.rect.getHeight() + 1, -1);
                     }
                 }
             }
             debug10 = 0;
             for (int debug112 = 0; debug112 < debug4; ++debug112) {
                 Suggestion debug12 = this.suggestionList.get(debug112 + this.offset);
-                GuiComponent.fill(debug1, this.rect.getX(), this.rect.getY() + 12 * debug112, this.rect.getX() + this.rect.getWidth(), this.rect.getY() + 12 * debug112 + 12, CommandSuggestions.this.fillColor);
+                GuiComponent.fill(debuposeStack1, this.rect.getX(), this.rect.getY() + 12 * debug112, this.rect.getX() + this.rect.getWidth(), this.rect.getY() + 12 * debug112 + 12, CommandSuggestions.this.fillColor);
                 if (debug2 > this.rect.getX() && debug2 < this.rect.getX() + this.rect.getWidth() && debug3 > this.rect.getY() + 12 * debug112 && debug3 < this.rect.getY() + 12 * debug112 + 12) {
                     if (debug9) {
                         this.select(debug112 + this.offset);
                     }
                     debug10 = 1;
                 }
-                CommandSuggestions.this.font.drawShadow(debug1, debug12.getText(), (float)(this.rect.getX() + 1), (float)(this.rect.getY() + 2 + 12 * debug112), debug112 + this.offset == this.current ? -256 : -5592406);
+                CommandSuggestions.this.font.drawShadow(debuposeStack1, debug12.getText(), (float)(this.rect.getX() + 1), (float)(this.rect.getY() + 2 + 12 * debug112), debug112 + this.offset == this.current ? -256 : -5592406);
             }
             if (debug10 != 0 && (debug11 = this.suggestionList.get(this.current).getTooltip()) != null) {
-                CommandSuggestions.this.screen.renderTooltip(debug1, ComponentUtils.fromMessage(debug11), debug2, debug3);
+                CommandSuggestions.this.screen.renderTooltip(debuposeStack1, ComponentUtils.fromMessage(debug11), debug2, debug3);
             }
         }
 
diff --git a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
index 54f017f4286a987170f4126609b2f4c9f7ecf6f6..b6b0f3414f9a4f7764f18efb2d40658fc3a9f4cd 100644
--- a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
@@ -484,7 +484,7 @@ extends GuiComponent {
         float f = debug3 + 2;
         this.font.getClass();
         this.font.drawShadow(debug1, debug20, f, (float)(debug17 - 60 - 9), 0xE0E0E0);
-        float f2 = debug3 + debug12 / 2 - this.font.width(debug21) / 2;
+        float f2 = debug3 + (float)debug12 / 2.0F - (float)this.font.width(debug21) / 2.0F;
         this.font.getClass();
         this.font.drawShadow(debug1, debug21, f2, (float)(debug17 - 60 - 9), 0xE0E0E0);
         float f3 = debug3 + debug12 - this.font.width(debug22);
diff --git a/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java b/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java
index 0549a8039b7a4c07f18280f3a66d4214c0935d30..8b623fc7b360d3068d5af69939aff5787e6bc6dd 100644
--- a/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java
@@ -212,7 +212,7 @@ extends GuiComponent {
             debug6.setRenderVisibilityId(this.visibilityId);
             debug6.setLastHealth(debug8);
             int debug11 = Mth.ceil((float)Math.max(debug8, debug6.getDisplayHealth()) / 2.0f);
-            int debug12 = Math.max(Mth.ceil(debug8 / 2), Math.max(Mth.ceil(debug6.getDisplayHealth() / 2), 10));
+            int debug12 = Math.max(Mth.ceil((float)debug8 / 2.0f), Math.max(Mth.ceil((float)debug6.getDisplayHealth() / 2.0f), 10));
             boolean bl = debug13 = debug6.getHealthBlinkTime() > (long)this.gui.getGuiTicks() && (debug6.getHealthBlinkTime() - (long)this.gui.getGuiTicks()) / 3L % 2L == 1L;
             if (debug11 > 0) {
                 int debug14 = Mth.floor(Math.min((float)(debug5 - debug4 - 4) / (float)debug12, 9.0f));
diff --git a/src/main/java/net/minecraft/client/gui/components/SubtitleOverlay.java b/src/main/java/net/minecraft/client/gui/components/SubtitleOverlay.java
index 5b6aa9e3e6ec3fa5a8117502dfbdda43193dd8dd..d0edaeabbb063954703e4bb907ca14889aa3d400 100644
--- a/src/main/java/net/minecraft/client/gui/components/SubtitleOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/components/SubtitleOverlay.java
@@ -113,7 +113,7 @@ implements SoundEventListener {
         this.subtitles.add(new Subtitle(debug3, new Vec3(debug1.getX(), debug1.getY(), debug1.getZ())));
     }
 
-    public class Subtitle {
+    public static class Subtitle {
         private final Component text;
         private long time;
         private Vec3 location;
diff --git a/src/main/java/net/minecraft/client/gui/font/providers/BitmapProvider.java b/src/main/java/net/minecraft/client/gui/font/providers/BitmapProvider.java
index e6903569920fcd372dce28031b48c0285caa9396..44af3b1d6d91fdc24214ac24609c003a76f1b75c 100644
--- a/src/main/java/net/minecraft/client/gui/font/providers/BitmapProvider.java
+++ b/src/main/java/net/minecraft/client/gui/font/providers/BitmapProvider.java
@@ -100,8 +100,8 @@ public class BitmapProvider implements GlyphProvider
                 final int debug5 = debug3.getHeight();
                 final int debug6 = debug4 / this.chars.get(0).length;
                 final int debug7 = debug5 / this.chars.size();
-                final float debug8 = this.height / debug7;
-                final Int2ObjectMap<Glyph> debug9 = (Int2ObjectMap<Glyph>)new Int2ObjectOpenHashMap();
+                final float debug8 = (float)this.height / (float)debug7;
+                final Int2ObjectMap<Glyph> debug9 = new Int2ObjectOpenHashMap<>();
                 for (int debug10 = 0; debug10 < this.chars.size(); ++debug10) {
                     int debug11 = 0;
                     for (final int debug12 : this.chars.get(debug10)) {
@@ -109,9 +109,9 @@ public class BitmapProvider implements GlyphProvider
                         if (debug12 != 0) {
                             if (debug12 != 32) {
                                 final int debug14 = this.getActualGlyphWidth(debug3, debug6, debug7, debug13, debug10);
-                                final Glyph debug15 = (Glyph)debug9.put(debug12, new Glyph(debug8, debug3, debug13 * debug6, debug10 * debug7, debug6, debug7, (int)(0.5 + debug14 * debug8) + 1, this.ascent)); // MagmaCube - decompile fix
+                                final Glyph debug15 = debug9.put(debug12, new Glyph(debug8, debug3, debug13 * debug6, debug10 * debug7, debug6, debug7, (int)(0.5 + debug14 * debug8) + 1, this.ascent)); // MagmaCube - decompile fix
                                 if (debug15 != null) {
-                                    BitmapProvider.LOGGER.warn("Codepoint '{}' declared multiple times in {}", (Object)Integer.toHexString(debug12), (Object)this.texture);
+                                    BitmapProvider.LOGGER.warn("Codepoint '{}' declared multiple times in {}", Integer.toHexString(debug12), this.texture);
                                 }
                             }
                         }
diff --git a/src/main/java/net/minecraft/client/gui/font/providers/LegacyUnicodeBitmapsProvider.java b/src/main/java/net/minecraft/client/gui/font/providers/LegacyUnicodeBitmapsProvider.java
index 4cbfee9ceac4a67396c2999e44f4ccfd50cf7579..e2d278610c3eef21f2ea2437392eb7cba7d36d05 100644
--- a/src/main/java/net/minecraft/client/gui/font/providers/LegacyUnicodeBitmapsProvider.java
+++ b/src/main/java/net/minecraft/client/gui/font/providers/LegacyUnicodeBitmapsProvider.java
@@ -158,7 +158,7 @@ implements GlyphProvider {
 
         @Override
         public float getAdvance() {
-            return this.width / 2 + 1;
+            return (float)this.width / 2.0f + 1;
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/client/gui/screens/ChatScreen.java b/src/main/java/net/minecraft/client/gui/screens/ChatScreen.java
index 998f547b115a3114e49cd0d048965084e27cdd05..fd39c51df6553e5b7a2f9472b0681fe3025c31f5 100644
--- a/src/main/java/net/minecraft/client/gui/screens/ChatScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/ChatScreen.java
@@ -33,7 +33,7 @@ extends Screen {
     protected void init() {
         this.minecraft.keyboardHandler.setSendRepeatsToGui(true);
         this.historyPos = this.minecraft.gui.getChat().getRecentChat().size();
-        this.input = new EditBox(this.font, 4, this.height - 12, this.width - 4, 12, (Component)new TranslatableComponent("chat.editBox")){
+        this.input = new EditBox(this.font, 4, this.height - 12, this.width - 4, 12, new TranslatableComponent("chat.editBox")){
 
             @Override
             protected MutableComponent createNarrationMessage() {
@@ -182,17 +182,17 @@ extends Screen {
     }
 
     @Override
-    public void render(PoseStack debug1, int debug2, int debug3, float debug4) {
+    public void render(PoseStack poseStack, int debug2, int debug3, float debug4) {
         this.setFocused(this.input);
         this.input.setFocus(true);
-        ChatScreen.fill(debug1, 2, this.height - 14, this.width - 2, this.height - 2, this.minecraft.options.getBackgroundColor(Integer.MIN_VALUE));
-        this.input.render(debug1, debug2, debug3, debug4);
-        this.commandSuggestions.render(debug1, debug2, debug3);
+        ChatScreen.fill(poseStack, 2, this.height - 14, this.width - 2, this.height - 2, this.minecraft.options.getBackgroundColor(Integer.MIN_VALUE));
+        this.input.render(poseStack, debug2, debug3, debug4);
+        this.commandSuggestions.render(poseStack, debug2, debug3);
         Style debug5 = this.minecraft.gui.getChat().getClickedComponentStyleAt(debug2, debug3);
         if (debug5 != null && debug5.getHoverEvent() != null) {
-            this.renderComponentHoverEffect(debug1, debug5, debug2, debug3);
+            this.renderComponentHoverEffect(poseStack, debug5, debug2, debug3);
         }
-        super.render(debug1, debug2, debug3, debug4);
+        super.render(poseStack, debug2, debug3, debug4);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java b/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java
index dd21ccdbb9de1d1dbafb28064106fad62821ee46..fe08835426f2cd63378c654da565b76809ade625 100644
--- a/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/LanguageSelectScreen.java
@@ -125,7 +125,7 @@ extends OptionsSubScreen {
             @Override
             public void render(PoseStack debug1, int debug2, int debug3, int debug4, int debug5, int debug6, int debug7, int debug8, boolean debug9, float debug10) {
                 String debug11 = this.language.toString();
-                LanguageSelectScreen.this.font.drawShadow(debug1, debug11, LanguageSelectionList.this.width / 2 - LanguageSelectScreen.this.font.width(debug11) / 2, debug3 + 1, 0xFFFFFF, true);
+                LanguageSelectScreen.this.font.drawShadow(debug1, debug11, (float)LanguageSelectionList.this.width / 2.0f - (float)LanguageSelectScreen.this.font.width(debug11) / 2.0f, debug3 + 1, 0xFFFFFF, true);
             }
 
             @Override
diff --git a/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java b/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java
index a414d081aac6d99567082321442079e98770fb54..4abb83a4275f499712f2e3f2e74ae05740f4dccf 100644
--- a/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java
@@ -12,7 +12,6 @@ import java.util.Optional;
 import java.util.function.Consumer;
 import net.minecraft.Util;
 import net.minecraft.client.Minecraft;
-import net.minecraft.client.gui.screens.Overlay;
 import net.minecraft.client.renderer.texture.SimpleTexture;
 import net.minecraft.client.resources.metadata.texture.TextureMetadataSection;
 import net.minecraft.resources.ResourceLocation;
@@ -23,8 +22,7 @@ import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.util.FastColor;
 import net.minecraft.util.Mth;
 
-public class LoadingOverlay
-extends Overlay {
+public class LoadingOverlay extends Overlay {
     private static final ResourceLocation MOJANG_STUDIOS_LOGO_LOCATION = new ResourceLocation("textures/gui/title/mojangstudios.png");
     private static final int BRAND_BACKGROUND = FastColor.ARGB32.color(255, 239, 50, 61);
     private static final int BRAND_BACKGROUND_NO_ALPHA = BRAND_BACKGROUND & 0xFFFFFF;
@@ -36,100 +34,95 @@ extends Overlay {
     private long fadeOutStart = -1L;
     private long fadeInStart = -1L;
 
-    // MagmaCube start - rename parameter
     public LoadingOverlay(Minecraft minecraft, ReloadInstance reload, Consumer<Optional<Throwable>> onFinish, boolean fadeIn) {
         this.minecraft = minecraft;
         this.reload = reload;
         this.onFinish = onFinish;
         this.fadeIn = fadeIn;
     }
-    // MagmaCube end - rename parameter
 
     public static void registerTextures(Minecraft debug0) {
         debug0.getTextureManager().register(MOJANG_STUDIOS_LOGO_LOCATION, new LogoTexture());
     }
 
     @Override
-    public void render(PoseStack debug1, int debug2, int debug3, float debug4) {
-        float debug11;
-        int debug12;
-        float debug10;
-        int debug5 = this.minecraft.getWindow().getGuiScaledWidth();
-        int debug6 = this.minecraft.getWindow().getGuiScaledHeight();
-        long debug7 = Util.getMillis();
+    public void render(PoseStack poseStack, int mouseX, int mouseY, float partialTicks) {
+        int scaledWidth = this.minecraft.getWindow().getGuiScaledWidth();
+        int scaledHeight = this.minecraft.getWindow().getGuiScaledHeight();
+        long time = Util.getMillis();
         if (this.fadeIn && (this.reload.isApplying() || this.minecraft.screen != null) && this.fadeInStart == -1L) {
-            this.fadeInStart = debug7;
+            this.fadeInStart = time;
         }
-        float debug9 = this.fadeOutStart > -1L ? (float)(debug7 - this.fadeOutStart) / 1000.0f : -1.0f;
-        float f = debug10 = this.fadeInStart > -1L ? (float)(debug7 - this.fadeInStart) / 500.0f : -1.0f;
-        if (debug9 >= 1.0f) {
+        float f1 = this.fadeOutStart > -1L ? (float)(time - this.fadeOutStart) / 1000.0f : -1.0f;
+        float f2 = this.fadeInStart > -1L ? (float)(time - this.fadeInStart) / 500.0f : -1.0f;
+        float f;
+        if (f1 >= 1.0f) {
             if (this.minecraft.screen != null) {
-                this.minecraft.screen.render(debug1, 0, 0, debug4);
+                this.minecraft.screen.render(poseStack, 0, 0, partialTicks);
             }
-            debug12 = Mth.ceil((1.0f - Mth.clamp(debug9 - 1.0f, 0.0f, 1.0f)) * 255.0f);
-            LoadingOverlay.fill(debug1, 0, 0, debug5, debug6, BRAND_BACKGROUND_NO_ALPHA | debug12 << 24);
-            debug11 = 1.0f - Mth.clamp(debug9 - 1.0f, 0.0f, 1.0f);
+            int l = Mth.ceil((1.0f - Mth.clamp(f1 - 1.0f, 0.0f, 1.0f)) * 255.0f);
+            LoadingOverlay.fill(poseStack, 0, 0, scaledWidth, scaledHeight, BRAND_BACKGROUND_NO_ALPHA | l << 24);
+            f = 1.0f - Mth.clamp(f1 - 1.0f, 0.0f, 1.0f);
         } else if (this.fadeIn) {
-            if (this.minecraft.screen != null && debug10 < 1.0f) {
-                this.minecraft.screen.render(debug1, debug2, debug3, debug4);
+            if (this.minecraft.screen != null && f2 < 1.0f) {
+                this.minecraft.screen.render(poseStack, mouseX, mouseY, partialTicks);
             }
-            debug12 = Mth.ceil(Mth.clamp((double)debug10, 0.15, 1.0) * 255.0);
-            LoadingOverlay.fill(debug1, 0, 0, debug5, debug6, BRAND_BACKGROUND_NO_ALPHA | debug12 << 24);
-            debug11 = Mth.clamp(debug10, 0.0f, 1.0f);
+            int l = Mth.ceil(Mth.clamp((double)f2, 0.15, 1.0) * 255.0);
+            LoadingOverlay.fill(poseStack, 0, 0, scaledWidth, scaledHeight, BRAND_BACKGROUND_NO_ALPHA | l << 24);
+            f = Mth.clamp(f2, 0.0f, 1.0f);
         } else {
-            LoadingOverlay.fill(debug1, 0, 0, debug5, debug6, BRAND_BACKGROUND);
-            debug11 = 1.0f;
+            LoadingOverlay.fill(poseStack, 0, 0, scaledWidth, scaledHeight, BRAND_BACKGROUND);
+            f = 1.0f;
         }
-        debug12 = (int)((double)this.minecraft.getWindow().getGuiScaledWidth() * 0.5);
-        int debug13 = (int)((double)this.minecraft.getWindow().getGuiScaledHeight() * 0.5);
-        double debug14 = Math.min((double)this.minecraft.getWindow().getGuiScaledWidth() * 0.75, (double)this.minecraft.getWindow().getGuiScaledHeight()) * 0.25;
-        int debug16 = (int)(debug14 * 0.5);
-        double debug17 = debug14 * 4.0;
-        int debug19 = (int)(debug17 * 0.5);
+        int width = (int)((double)this.minecraft.getWindow().getGuiScaledWidth() * 0.5);
+        int height = (int)((double)this.minecraft.getWindow().getGuiScaledHeight() * 0.5);
+        double scale = Math.min((double)this.minecraft.getWindow().getGuiScaledWidth() * 0.75, (double)this.minecraft.getWindow().getGuiScaledHeight()) * 0.25;
+        int scaleHalf = (int)(scale * 0.5);
+        double scale4x = scale * 4.0;
+        int scale2x = (int)(scale4x * 0.5);
         this.minecraft.getTextureManager().bind(MOJANG_STUDIOS_LOGO_LOCATION);
         RenderSystem.enableBlend();
         RenderSystem.blendEquation(32774);
         RenderSystem.blendFunc(770, 1);
         RenderSystem.alphaFunc(516, 0.0f);
-        RenderSystem.color4f(1.0f, 1.0f, 1.0f, debug11);
-        LoadingOverlay.blit(debug1, debug12 - debug19, debug13 - debug16, debug19, (int)debug14, -0.0625f, 0.0f, 120, 60, 120, 120);
-        LoadingOverlay.blit(debug1, debug12, debug13 - debug16, debug19, (int)debug14, 0.0625f, 60.0f, 120, 60, 120, 120);
+        RenderSystem.color4f(1.0f, 1.0f, 1.0f, f);
+        LoadingOverlay.blit(poseStack, width - scale2x, height - scaleHalf, scale2x, (int)scale, -0.0625f, 0.0f, 120, 60, 120, 120);
+        LoadingOverlay.blit(poseStack, width, height - scaleHalf, scale2x, (int)scale, 0.0625f, 60.0f, 120, 60, 120, 120);
         RenderSystem.defaultBlendFunc();
         RenderSystem.defaultAlphaFunc();
         RenderSystem.disableBlend();
-        int debug20 = (int)((double)this.minecraft.getWindow().getGuiScaledHeight() * 0.8325);
-        float debug21 = this.reload.getActualProgress();
-        this.currentProgress = Mth.clamp(this.currentProgress * 0.95f + debug21 * 0.050000012f, 0.0f, 1.0f);
-        if (debug9 < 1.0f) {
-            this.drawProgressBar(debug1, debug5 / 2 - debug19, debug20 - 5, debug5 / 2 + debug19, debug20 + 5, 1.0f - Mth.clamp(debug9, 0.0f, 1.0f));
+        int sHeight = (int)((double)this.minecraft.getWindow().getGuiScaledHeight() * 0.8325);
+        float actualProgress = this.reload.getActualProgress();
+        this.currentProgress = Mth.clamp(this.currentProgress * 0.95f + actualProgress * 0.050000012f, 0.0f, 1.0f);
+        if (f1 < 1.0f) {
+            this.drawProgressBar(poseStack, scaledWidth / 2 - scale2x, sHeight - 5, scaledWidth / 2 + scale2x, sHeight + 5, 1.0f - Mth.clamp(f1, 0.0f, 1.0f));
         }
-        if (debug9 >= 2.0f) {
+        if (f1 >= 2.0f) {
             this.minecraft.setOverlay(null);
         }
-        if (this.fadeOutStart == -1L && this.reload.isDone() && (!this.fadeIn || debug10 >= 2.0f)) {
+        if (this.fadeOutStart == -1L && this.reload.isDone() && (!this.fadeIn || f2 >= 2.0f)) {
+            this.fadeOutStart = Util.getMillis();
             try {
                 this.reload.checkExceptions();
                 this.onFinish.accept(Optional.empty());
+            } catch (Throwable ex) {
+                this.onFinish.accept(Optional.of(ex));
             }
-            catch (Throwable debug22) {
-                this.onFinish.accept(Optional.of(debug22));
-            }
-            this.fadeOutStart = Util.getMillis();
             if (this.minecraft.screen != null) {
                 this.minecraft.screen.init(this.minecraft, this.minecraft.getWindow().getGuiScaledWidth(), this.minecraft.getWindow().getGuiScaledHeight());
             }
         }
     }
 
-    private void drawProgressBar(PoseStack debug1, int debug2, int debug3, int debug4, int debug5, float debug6) {
-        int debug7 = Mth.ceil((float)(debug4 - debug2 - 2) * this.currentProgress);
-        int debug8 = Math.round(debug6 * 255.0f);
-        int debug9 = FastColor.ARGB32.color(debug8, 255, 255, 255);
-        LoadingOverlay.fill(debug1, debug2 + 1, debug3, debug4 - 1, debug3 + 1, debug9);
-        LoadingOverlay.fill(debug1, debug2 + 1, debug5, debug4 - 1, debug5 - 1, debug9);
-        LoadingOverlay.fill(debug1, debug2, debug3, debug2 + 1, debug5, debug9);
-        LoadingOverlay.fill(debug1, debug4, debug3, debug4 - 1, debug5, debug9);
-        LoadingOverlay.fill(debug1, debug2 + 2, debug3 + 2, debug2 + debug7, debug5 - 2, debug9);
+    private void drawProgressBar(PoseStack poseStack, int width, int height, int width1, int height1, float f) {
+        int progress = Mth.ceil((float)(width1 - width - 2) * this.currentProgress);
+        int rounded = Math.round(f * 255.0f);
+        int color = FastColor.ARGB32.color(rounded, 255, 255, 255);
+        LoadingOverlay.fill(poseStack, width + 1, height, width1 - 1, height + 1, color);
+        LoadingOverlay.fill(poseStack, width + 1, height1, width1 - 1, height1 - 1, color);
+        LoadingOverlay.fill(poseStack, width, height, width + 1, height1, color);
+        LoadingOverlay.fill(poseStack, width1, height, width1 - 1, height1, color);
+        LoadingOverlay.fill(poseStack, width + 2, height + 2, width + progress, height1 - 2, color);
     }
 
     @Override
@@ -143,20 +136,14 @@ extends Overlay {
             super(MOJANG_STUDIOS_LOGO_LOCATION);
         }
 
-        /*
-         * Enabled aggressive block sorting
-         * Enabled unnecessary exception pruning
-         * Enabled aggressive exception aggregation
-         */
         @Override
         protected SimpleTexture.TextureImage getTextureImage(ResourceManager debug1) {
-            Minecraft debug2 = Minecraft.getInstance();
-            VanillaPackResources debug3 = debug2.getClientPackSource().getVanillaPack();
-            try (InputStream debug4 = debug3.getResource(PackType.CLIENT_RESOURCES, MOJANG_STUDIOS_LOGO_LOCATION);){
-                return new TextureImage(new TextureMetadataSection(true, true), NativeImage.read(debug4)); // MagmaCube - decompile fix
-            }
-            catch (IOException debug42) {
-                return new SimpleTexture.TextureImage(debug42);
+            Minecraft minecraft = Minecraft.getInstance();
+            VanillaPackResources vanillaPackResources = minecraft.getClientPackSource().getVanillaPack();
+            try (InputStream resource = vanillaPackResources.getResource(PackType.CLIENT_RESOURCES, MOJANG_STUDIOS_LOGO_LOCATION);){
+                return new TextureImage(new TextureMetadataSection(true, true), NativeImage.read(resource)); // MagmaCube - decompile fix
+            } catch (IOException ex) {
+                return new SimpleTexture.TextureImage(ex);
             }
         }
     }
diff --git a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
index 2a85c73674475e7629ef25391de71e60cefee735..86f0bc127d3b80a2cd283ea404dd04eb1bbb1f44 100644
--- a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
@@ -244,7 +244,7 @@ extends Screen {
         TitleScreen.blit(debug1, debug7 + 88, 67, 0.0f, 0.0f, 98, 14, 128, 16);
         if (this.splash != null) {
             RenderSystem.pushMatrix();
-            RenderSystem.translatef(this.width / 2 + 90, 70.0f, 0.0f);
+            RenderSystem.translatef((float)this.width / 2.0f + 90, 70.0f, 0.0f);
             RenderSystem.rotatef(-20.0f, 0.0f, 0.0f, 1.0f);
             float debug11 = 1.8f - Mth.abs(Mth.sin((float)(Util.getMillis() % 1000L) / 1000.0f * ((float)Math.PI * 2)) * 0.1f);
             debug11 = debug11 * 100.0f / (float)(this.font.width(this.splash) + 32);
@@ -252,13 +252,13 @@ extends Screen {
             TitleScreen.drawCenteredString(debug1, this.font, this.splash, 0, -8, 0xFFFF00 | debug10);
             RenderSystem.popMatrix();
         }
-        String debug11 = "Minecraft " + SharedConstants.getCurrentVersion().getName();
-        debug11 = this.minecraft.isDemo() ? debug11 + " Demo" : debug11 + ("release".equalsIgnoreCase(this.minecraft.getVersionType()) ? "" : "/" + this.minecraft.getVersionType());
+        String title = "Minecraft " + SharedConstants.getCurrentVersion().getName();
+        title = this.minecraft.isDemo() ? title + " Demo" : title + ("release".equalsIgnoreCase(this.minecraft.getVersionType()) ? "" : "/" + this.minecraft.getVersionType());
         if (this.minecraft.isProbablyModded()) {
-            debug11 = debug11 + I18n.get("menu.modded", new Object[0]);
+            title = title + I18n.get("menu.modded", new Object[0]);
         }
         TitleScreen.drawString(debug1, this.font, "MagmaCube " + ((DetectedVersion) SharedConstants.getCurrentVersion()).magmaCubeVersion, 2, this.height - 20, 0xFFFFFF | debug10); // MagmaCube
-        TitleScreen.drawString(debug1, this.font, debug11, 2, this.height - 10, 0xFFFFFF | debug10);
+        TitleScreen.drawString(debug1, this.font, title, 2, this.height - 10, 0xFFFFFF | debug10);
         TitleScreen.drawString(debug1, this.font, "Copyright Mojang AB. Do not distribute!", this.copyrightX, this.height - 10, 0xFFFFFF | debug10);
         if (debug22 > this.copyrightX && debug22 < this.copyrightX + this.copyrightWidth && debug32 > this.height - 10 && debug32 < this.height) {
             TitleScreen.fill(debug1, this.copyrightX, this.height - 1, this.copyrightX + this.copyrightWidth, this.height, 0xFFFFFF | debug10);
diff --git a/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementTab.java b/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementTab.java
index 57acc837e98fde9a4522a26836dce6173622e0e1..424d762a52c11956f473087f9c1c7e15779b6242 100644
--- a/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementTab.java
+++ b/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementTab.java
@@ -78,8 +78,8 @@ extends GuiComponent {
 
     public void drawContents(PoseStack debug1) {
         if (!this.centered) {
-            this.scrollX = 117 - (this.maxX + this.minX) / 2;
-            this.scrollY = 56 - (this.maxY + this.minY) / 2;
+            this.scrollX = 117 - (float)(this.maxX + this.minX) / 2.0F;
+            this.scrollY = 56 - (float)(this.maxY + this.minY) / 2.0F;
             this.centered = true;
         }
         RenderSystem.pushMatrix();
diff --git a/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java b/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java
index 51ebfb30876ad3e01dc3adbd9c0ae087887355e5..9d0e2099e762ff07ec5a89f6a55cb9ea8ef66556 100644
--- a/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/controls/ControlList.java
@@ -156,9 +156,9 @@ extends ContainerObjectSelectionList<ControlList.Entry> { // MagmaCube - decompi
 
         @Override
         public void render(PoseStack debug1, int debug2, int debug3, int debug4, int debug5, int debug6, int debug7, int debug8, boolean debug9, float debug10) {
-            float f = ((ControlList)ControlList.this).minecraft.screen.width / 2 - this.width / 2;
-            ((ControlList)ControlList.this).minecraft.font.getClass();
-            ((ControlList)ControlList.this).minecraft.font.draw(debug1, this.name, f, (float)(debug3 + debug6 - 9 - 1), 0xFFFFFF);
+            float f = (float)ControlList.this.minecraft.screen.width / 2.0F - (float)this.width / 2.0F;
+            ControlList.this.minecraft.font.getClass();
+            ControlList.this.minecraft.font.draw(debug1, this.name, f, (float)(debug3 + debug6 - 9 - 1), 0xFFFFFF);
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/SignEditScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/SignEditScreen.java
index ad2a55929303b6f21a787b7279c957385f21f794..56cc932a122db1cacf11110605cb3c08e6e703e8 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/SignEditScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/SignEditScreen.java
@@ -119,7 +119,7 @@ extends Screen {
         this.renderBackground(debug1);
         SignEditScreen.drawCenteredString(debug1, this.font, this.title, this.width / 2, 40, 0xFFFFFF);
         debug1.pushPose();
-        debug1.translate(this.width / 2, 0.0, 50.0);
+        debug1.translate((float)this.width / 2.0f, 0.0, 50.0);
         float debug5 = 93.75f;
         debug1.scale(93.75f, -93.75f, 93.75f);
         debug1.translate(0.0, -1.3125, 0.0);
diff --git a/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
index 997b3f83be74a265c9f6a3000327a991c90f9e76..f0710faf89551657bdf0662122217d8938af2809 100644
--- a/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
@@ -423,7 +423,7 @@ extends ObjectSelectionList<ServerSelectionList.Entry> { // MagmaCube - decompil
                     debug12 = "o o O";
                 }
             }
-            float f = this.minecraft.screen.width / 2 - this.minecraft.font.width(debug12) / 2;
+            float f = (float)this.minecraft.screen.width / 2.0f - (float)this.minecraft.font.width(debug12) / 2.0f;
             this.minecraft.font.getClass();
             this.minecraft.font.draw(debug1, debug12, f, (float)(debug11 + 9), 0x808080);
         }
diff --git a/src/main/java/net/minecraft/client/gui/screens/social/PlayerEntry.java b/src/main/java/net/minecraft/client/gui/screens/social/PlayerEntry.java
index b1497f4bad67def796b30bd41604c39bdd2efc44..f4fc39059df8aa7fe92b199acce527c912abb60b 100644
--- a/src/main/java/net/minecraft/client/gui/screens/social/PlayerEntry.java
+++ b/src/main/java/net/minecraft/client/gui/screens/social/PlayerEntry.java
@@ -99,7 +99,7 @@ extends ContainerObjectSelectionList.Entry<PlayerEntry> {
             };
             this.showButton.visible = debug62.isHidden(debug32);
             this.hideButton.visible = !this.showButton.visible;
-            this.children = ImmutableList.of((Object)this.hideButton, (Object)this.showButton);
+            this.children = ImmutableList.of(this.hideButton, this.showButton); // MagmaCube - decompile fix
         } else {
             this.children = ImmutableList.of();
         }
diff --git a/src/main/java/net/minecraft/client/gui/screens/social/SocialInteractionsScreen.java b/src/main/java/net/minecraft/client/gui/screens/social/SocialInteractionsScreen.java
index dd75a4c2140eb74fad43b6c8c7cbf5e3ce0b48ab..bb5e10ec44385a54febdab0d8ed99f1178e84173 100644
--- a/src/main/java/net/minecraft/client/gui/screens/social/SocialInteractionsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/social/SocialInteractionsScreen.java
@@ -139,7 +139,7 @@ extends Screen {
     }
 
     private void showPage(Page debug1) {
-        Object debug2;
+        Collection<UUID> debug2; // MagmaCube - decompile fix
         this.page = debug1;
         this.allButton.setMessage(TAB_ALL);
         this.hiddenButton.setMessage(TAB_HIDDEN);
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
index 9170b044034532019e5b7513fae902f8187ba242..09f9e016792ba5c870843850dc787ab9452a9139 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
@@ -270,7 +270,7 @@ extends Screen {
         }
     }
 
-    public abstract class RuleEntry
+    public abstract static class RuleEntry
     extends ContainerObjectSelectionList.Entry<RuleEntry> {
         @Nullable
         private final List<FormattedCharSequence> tooltip;
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditWorldScreen.java
index a595a5ede9cc08eec87c2b184c4c4b3148a5852b..a8544dea18e57316f2a12343ae89a101c1088397 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditWorldScreen.java
@@ -88,7 +88,7 @@ extends Screen {
     @Override
     protected void init() {
         this.minecraft.keyboardHandler.setSendRepeatsToGui(true);
-        Button debug13 = this.addButton(new Button(this.width / 2 - 100, this.height / 4 + 0 + 5, 200, 20, new TranslatableComponent("selectWorld.edit.resetIcon"), debug1 -> {
+        Button debug13 = this.addButton(new Button(this.width / 2 - 100, (int)((float)this.height / 4.0f + 0 + 5), 200, 20, new TranslatableComponent("selectWorld.edit.resetIcon"), debug1 -> {
             FileUtils.deleteQuietly((File)this.levelAccess.getIconFile());
             debug1.active = false;
         }));
diff --git a/src/main/java/net/minecraft/client/gui/spectator/categories/TeleportToTeamMenuCategory.java b/src/main/java/net/minecraft/client/gui/spectator/categories/TeleportToTeamMenuCategory.java
index 07352ceabe24c4d1fd1691bdaf13a1c75fb6f91e..e3b1b9641f54eec69f765959428fbd23ea2cf9c5 100644
--- a/src/main/java/net/minecraft/client/gui/spectator/categories/TeleportToTeamMenuCategory.java
+++ b/src/main/java/net/minecraft/client/gui/spectator/categories/TeleportToTeamMenuCategory.java
@@ -76,7 +76,7 @@ SpectatorMenuItem {
         return false;
     }
 
-    class TeamSelectionItem
+    static class TeamSelectionItem
     implements SpectatorMenuItem {
         private final PlayerTeam team;
         private final ResourceLocation location;
diff --git a/src/main/java/net/minecraft/client/main/Main.java b/src/main/java/net/minecraft/client/main/Main.java
index f738f17fd110394a8fc3760960507a76cd6ca438..b4dd667ae4e4fee0b677d5216e1f2475aebb3af1 100644
--- a/src/main/java/net/minecraft/client/main/Main.java
+++ b/src/main/java/net/minecraft/client/main/Main.java
@@ -56,189 +56,187 @@ public class Main {
     /*
      * WARNING - Removed try catching itself - possible behaviour change.
      */
-    public static void main(String[] debug0) {
-        Thread debug57;
-        Minecraft debug56;
-        OptionParser debug1 = new OptionParser();
-        debug1.allowsUnrecognizedOptions();
-        debug1.accepts("demo");
-        debug1.accepts("disableMultiplayer");
-        debug1.accepts("disableChat");
-        debug1.accepts("fullscreen");
-        debug1.accepts("checkGlErrors");
-        ArgumentAcceptingOptionSpec debug2 = debug1.accepts("server").withRequiredArg();
-        ArgumentAcceptingOptionSpec debug3 = debug1.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(25565, new Integer[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug4 = debug1.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File("."), new File[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug5 = debug1.accepts("assetsDir").withRequiredArg().ofType(File.class);
-        ArgumentAcceptingOptionSpec debug6 = debug1.accepts("resourcePackDir").withRequiredArg().ofType(File.class);
-        ArgumentAcceptingOptionSpec debug7 = debug1.accepts("dataPackDir").withRequiredArg().ofType(File.class);
-        ArgumentAcceptingOptionSpec debug8 = debug1.accepts("proxyHost").withRequiredArg();
-        ArgumentAcceptingOptionSpec debug9 = debug1.accepts("proxyPort").withRequiredArg().defaultsTo("8080", new String[0]).ofType(Integer.class); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug10 = debug1.accepts("proxyUser").withRequiredArg();
-        ArgumentAcceptingOptionSpec debug11 = debug1.accepts("proxyPass").withRequiredArg();
-        ArgumentAcceptingOptionSpec debug12 = debug1.accepts("username").withRequiredArg().defaultsTo(("Player" + Util.getMillis() % 1000L), new String[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug13 = debug1.accepts("uuid").withRequiredArg();
-        ArgumentAcceptingOptionSpec debug14 = debug1.accepts("accessToken").withRequiredArg().required();
-        ArgumentAcceptingOptionSpec debug15 = debug1.accepts("version").withRequiredArg().required();
-        ArgumentAcceptingOptionSpec debug16 = debug1.accepts("width").withRequiredArg().ofType(Integer.class).defaultsTo(854, new Integer[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug17 = debug1.accepts("height").withRequiredArg().ofType(Integer.class).defaultsTo(480, new Integer[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug18 = debug1.accepts("fullscreenWidth").withRequiredArg().ofType(Integer.class);
-        ArgumentAcceptingOptionSpec debug19 = debug1.accepts("fullscreenHeight").withRequiredArg().ofType(Integer.class);
-        ArgumentAcceptingOptionSpec debug20 = debug1.accepts("userProperties").withRequiredArg().defaultsTo("{}", new String[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug21 = debug1.accepts("profileProperties").withRequiredArg().defaultsTo("{}", new String[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug22 = debug1.accepts("assetIndex").withRequiredArg();
-        ArgumentAcceptingOptionSpec debug23 = debug1.accepts("userType").withRequiredArg().defaultsTo("legacy", new String[0]); // MagmaCube - decompile fix
-        ArgumentAcceptingOptionSpec debug24 = debug1.accepts("versionType").withRequiredArg().defaultsTo("release", new String[0]); // MagmaCube - decompile fix
-        NonOptionArgumentSpec debug25 = debug1.nonOptions();
-        OptionSet debug26 = debug1.parse(debug0);
-        List debug27 = debug26.valuesOf((OptionSpec)debug25);
-        if (!debug27.isEmpty()) {
-            System.out.println("Completely ignored arguments: " + debug27);
+    public static void main(String[] args) {
+        Thread gameThread;
+        Minecraft minecraft;
+        OptionParser parser = new OptionParser();
+        parser.allowsUnrecognizedOptions();
+        parser.accepts("demo");
+        parser.accepts("disableMultiplayer");
+        parser.accepts("disableChat");
+        parser.accepts("fullscreen");
+        parser.accepts("checkGlErrors");
+        ArgumentAcceptingOptionSpec<String> server = parser.accepts("server").withRequiredArg();
+        ArgumentAcceptingOptionSpec<Integer> port = parser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(25565);
+        ArgumentAcceptingOptionSpec<File> gameDir = parser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File("."));
+        ArgumentAcceptingOptionSpec<File> assetsDir = parser.accepts("assetsDir").withRequiredArg().ofType(File.class);
+        ArgumentAcceptingOptionSpec<File> resourcePackDir = parser.accepts("resourcePackDir").withRequiredArg().ofType(File.class);
+        ArgumentAcceptingOptionSpec<File> dataPackDir = parser.accepts("dataPackDir").withRequiredArg().ofType(File.class);
+        ArgumentAcceptingOptionSpec<String> proxyHost = parser.accepts("proxyHost").withRequiredArg();
+        ArgumentAcceptingOptionSpec<Integer> proxyPort = parser.accepts("proxyPort").withRequiredArg().defaultsTo("8080", new String[0]).ofType(Integer.class);
+        ArgumentAcceptingOptionSpec<String> proxyUser = parser.accepts("proxyUser").withRequiredArg();
+        ArgumentAcceptingOptionSpec<String> proxyPass = parser.accepts("proxyPass").withRequiredArg();
+        ArgumentAcceptingOptionSpec<String> username = parser.accepts("username").withRequiredArg().defaultsTo(("Player" + Util.getMillis() % 1000L));
+        ArgumentAcceptingOptionSpec<String> uuid = parser.accepts("uuid").withRequiredArg();
+        ArgumentAcceptingOptionSpec<String> accessToken = parser.accepts("accessToken").withRequiredArg().required();
+        ArgumentAcceptingOptionSpec<String> version = parser.accepts("version").withRequiredArg().required();
+        ArgumentAcceptingOptionSpec<Integer> width = parser.accepts("width").withRequiredArg().ofType(Integer.class).defaultsTo(854);
+        ArgumentAcceptingOptionSpec<Integer> height = parser.accepts("height").withRequiredArg().ofType(Integer.class).defaultsTo(480);
+        ArgumentAcceptingOptionSpec<Integer> fullscreenWidth = parser.accepts("fullscreenWidth").withRequiredArg().ofType(Integer.class);
+        ArgumentAcceptingOptionSpec<Integer> fullscreenHeight = parser.accepts("fullscreenHeight").withRequiredArg().ofType(Integer.class);
+        ArgumentAcceptingOptionSpec<String> userProperties = parser.accepts("userProperties").withRequiredArg().defaultsTo("{}");
+        ArgumentAcceptingOptionSpec<String> profileProperties = parser.accepts("profileProperties").withRequiredArg().defaultsTo("{}");
+        ArgumentAcceptingOptionSpec<String> assetIndex = parser.accepts("assetIndex").withRequiredArg();
+        ArgumentAcceptingOptionSpec<String> userType = parser.accepts("userType").withRequiredArg().defaultsTo("legacy");
+        ArgumentAcceptingOptionSpec<String> versionType = parser.accepts("versionType").withRequiredArg().defaultsTo("release");
+        NonOptionArgumentSpec<String> nonOptionArgumentSpec = parser.nonOptions();
+        OptionSet optionSet = parser.parse(args);
+        List<String> nonOptions = optionSet.valuesOf(nonOptionArgumentSpec);
+        if (!nonOptions.isEmpty()) {
+            System.out.println("Completely ignored arguments: " + nonOptions);
         }
-        String debug28 = (String)Main.parseArgument(debug26, debug8);
-        Proxy debug29 = Proxy.NO_PROXY;
-        if (debug28 != null) {
+        String proxyAddr = Main.parseArgument(optionSet, proxyHost);
+        Proxy proxy = Proxy.NO_PROXY;
+        if (proxyAddr != null) {
             try {
-                debug29 = new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(debug28, (int)((Integer)Main.parseArgument(debug26, debug9))));
+                proxy = new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(proxyAddr, Main.parseArgument(optionSet, proxyPort)));
             }
             catch (Exception exception) {
                 // empty catch block
             }
         }
-        final String debug30 = (String)Main.parseArgument(debug26, debug10);
-        final String debug31 = (String)Main.parseArgument(debug26, debug11);
-        if (!debug29.equals(Proxy.NO_PROXY) && Main.stringHasValue(debug30) && Main.stringHasValue(debug31)) {
+        final String proxyUserName = Main.parseArgument(optionSet, proxyUser);
+        final String proxyPassword = Main.parseArgument(optionSet, proxyPass);
+        if (!proxy.equals(Proxy.NO_PROXY) && Main.stringHasValue(proxyUserName) && Main.stringHasValue(proxyPassword)) {
             Authenticator.setDefault(new Authenticator(){
 
                 @Override
                 protected PasswordAuthentication getPasswordAuthentication() {
-                    return new PasswordAuthentication(debug30, debug31.toCharArray());
+                    return new PasswordAuthentication(proxyUserName, proxyPassword.toCharArray());
                 }
             });
         }
-        int debug32 = (Integer)Main.parseArgument(debug26, debug16);
-        int debug33 = (Integer)Main.parseArgument(debug26, debug17);
-        OptionalInt debug34 = Main.ofNullable((Integer)Main.parseArgument(debug26, debug18));
-        OptionalInt debug35 = Main.ofNullable((Integer)Main.parseArgument(debug26, debug19));
-        boolean debug36 = debug26.has("fullscreen");
-        boolean debug37 = debug26.has("demo");
-        boolean debug38 = debug26.has("disableMultiplayer");
-        boolean debug39 = debug26.has("disableChat");
-        String debug40 = (String)Main.parseArgument(debug26, debug15);
-        Gson debug41 = new GsonBuilder().registerTypeAdapter(PropertyMap.class, new PropertyMap.Serializer()).create(); // MagmaCube - decompile fix
-        PropertyMap debug42 = GsonHelper.fromJson(debug41, (String)Main.parseArgument(debug26, debug20), PropertyMap.class);
-        PropertyMap debug43 = GsonHelper.fromJson(debug41, (String)Main.parseArgument(debug26, debug21), PropertyMap.class);
-        String debug44 = (String)Main.parseArgument(debug26, debug24);
-        File debug45 = (File)Main.parseArgument(debug26, debug4);
-        File debug46 = debug26.has((OptionSpec)debug5) ? (File)Main.parseArgument(debug26, debug5) : new File(debug45, "assets/");
-        File debug47 = debug26.has((OptionSpec)debug6) ? (File)Main.parseArgument(debug26, debug6) : new File(debug45, "resourcepacks/");
-        String debug48 = debug26.has((OptionSpec)debug13) ? (String)debug13.value(debug26) : Player.createPlayerUUID((String)debug12.value(debug26)).toString();
-        String debug49 = debug26.has((OptionSpec)debug22) ? (String)debug22.value(debug26) : null;
-        String debug50 = (String)Main.parseArgument(debug26, debug2);
-        Integer debug51 = (Integer)Main.parseArgument(debug26, debug3);
+        int iWidth = Main.parseArgument(optionSet, width);
+        int iHeight = Main.parseArgument(optionSet, height);
+        OptionalInt fullscrWidth = Main.ofNullable(Main.parseArgument(optionSet, fullscreenWidth));
+        OptionalInt fullscrHeight = Main.ofNullable(Main.parseArgument(optionSet, fullscreenHeight));
+        boolean fullscreen = optionSet.has("fullscreen");
+        boolean demo = optionSet.has("demo");
+        boolean disableMultiplayer = optionSet.has("disableMultiplayer");
+        boolean disableChat = optionSet.has("disableChat");
+        String versionString = Main.parseArgument(optionSet, version);
+        Gson properties = new GsonBuilder().registerTypeAdapter(PropertyMap.class, new PropertyMap.Serializer()).create();
+        PropertyMap userProp = GsonHelper.fromJson(properties, Main.parseArgument(optionSet, userProperties), PropertyMap.class);
+        PropertyMap profileProp = GsonHelper.fromJson(properties, Main.parseArgument(optionSet, profileProperties), PropertyMap.class);
+        String verType = Main.parseArgument(optionSet, versionType);
+        File gameDirectory = Main.parseArgument(optionSet, gameDir);
+        File assetsDirectory = optionSet.has(assetsDir) ? Main.parseArgument(optionSet, assetsDir) : new File(gameDirectory, "assets/");
+        File resourcePackDirectory = optionSet.has(resourcePackDir) ? Main.parseArgument(optionSet, resourcePackDir) : new File(gameDirectory, "resourcepacks/");
+        String playerUUID = optionSet.has(uuid) ? uuid.value(optionSet) : Player.createPlayerUUID(username.value(optionSet)).toString();
+        String assetIndexValue = optionSet.has(assetIndex) ? assetIndex.value(optionSet) : null;
+        String serverAddress = Main.parseArgument(optionSet, server);
+        Integer serverPort = Main.parseArgument(optionSet, port);
         CrashReport.preload();
         Bootstrap.bootStrap();
         Bootstrap.validate();
         Util.startTimerHackThread();
-        User debug52 = new User((String)debug12.value(debug26), debug48, (String)debug14.value(debug26), (String)debug23.value(debug26));
-        GameConfig debug53 = new GameConfig(new GameConfig.UserData(debug52, debug42, debug43, debug29), new DisplayData(debug32, debug33, debug34, debug35, debug36), new GameConfig.FolderData(debug45, debug47, debug46, debug49), new GameConfig.GameData(debug37, debug40, debug44, debug38, debug39), new GameConfig.ServerData(debug50, debug51));
-        Thread debug54 = new Thread("Client Shutdown Thread"){
-
+        User user = new User(username.value(optionSet), playerUUID, accessToken.value(optionSet), userType.value(optionSet));
+        GameConfig gameConfig = new GameConfig(new GameConfig.UserData(user, userProp, profileProp, proxy), new DisplayData(iWidth, iHeight, fullscrWidth, fullscrHeight, fullscreen), new GameConfig.FolderData(gameDirectory, resourcePackDirectory, assetsDirectory, assetIndexValue), new GameConfig.GameData(demo, versionString, verType, disableMultiplayer, disableChat), new GameConfig.ServerData(serverAddress, serverPort));
+        Thread clientShutdownThread = new Thread("Client Shutdown Thread"){
             @Override
             public void run() {
-                Minecraft debug1 = Minecraft.getInstance();
-                if (debug1 == null) {
+                Minecraft minecraft = Minecraft.getInstance();
+                if (minecraft == null) {
                     return;
                 }
-                IntegratedServer debug2 = debug1.getSingleplayerServer();
-                if (debug2 != null) {
-                    debug2.halt(true);
+                IntegratedServer integratedServer = minecraft.getSingleplayerServer();
+                if (integratedServer != null) {
+                    integratedServer.halt(true);
                 }
             }
         };
-        debug54.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
-        Runtime.getRuntime().addShutdownHook(debug54);
-        RenderPipeline debug55 = new RenderPipeline();
+        clientShutdownThread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
+        Runtime.getRuntime().addShutdownHook(clientShutdownThread);
+        RenderPipeline renderPipeline = new RenderPipeline();
         try {
             Thread.currentThread().setName("Render thread");
             RenderSystem.initRenderThread();
             RenderSystem.beginInitialization();
-            debug56 = new Minecraft(debug53);
+            minecraft = new Minecraft(gameConfig);
             RenderSystem.finishInitialization();
         }
-        catch (SilentInitException debug572) {
-            LOGGER.warn("Failed to create window: ", (Throwable)debug572);
+        catch (SilentInitException ex) {
+            LOGGER.warn("Failed to create window: ", ex);
             return;
         }
-        catch (Throwable debug573) {
-            CrashReport debug58 = CrashReport.forThrowable(debug573, "Initializing game");
-            debug58.addCategory("Initialization");
-            Minecraft.fillReport(null, debug53.game.launchVersion, null, debug58);
-            Minecraft.crash(debug58);
+        catch (Throwable ex) {
+            CrashReport crashReport = CrashReport.forThrowable(ex, "Initializing game");
+            crashReport.addCategory("Initialization");
+            Minecraft.fillReport(null, gameConfig.game.launchVersion, null, crashReport);
+            Minecraft.crash(crashReport);
             return;
         }
-        if (debug56.renderOnThread()) {
-            debug57 = new Thread("Game thread"){
+        if (minecraft.renderOnThread()) {
+            gameThread = new Thread("Game thread"){
 
                 @Override
                 public void run() {
                     try {
                         RenderSystem.initGameThread(true);
-                        debug56.run();
+                        minecraft.run();
                     }
-                    catch (Throwable debug1) {
-                        LOGGER.error("Exception in client thread", debug1);
+                    catch (Throwable ex) {
+                        LOGGER.error("Exception in client thread", ex);
                     }
                 }
             };
-            debug57.start();
-            while (debug56.isRunning()) {
+            gameThread.start();
+            while (minecraft.isRunning()) {
             }
         } else {
-            debug57 = null;
+            gameThread = null;
             try {
                 RenderSystem.initGameThread(false);
-                debug56.run();
+                minecraft.run();
             }
-            catch (Throwable debug58) {
-                LOGGER.error("Unhandled game exception", debug58);
+            catch (Throwable ex) {
+                LOGGER.error("Unhandled game exception", ex);
             }
         }
         try {
-            debug56.stop();
-            if (debug57 != null) {
-                debug57.join();
+            minecraft.stop();
+            if (gameThread != null) {
+                gameThread.join();
             }
         }
-        catch (InterruptedException debug58) {
-            LOGGER.error("Exception during client thread shutdown", (Throwable)debug58);
+        catch (InterruptedException ex) {
+            LOGGER.error("Exception during client thread shutdown", ex);
         }
         finally {
-            debug56.destroy();
+            minecraft.destroy();
         }
     }
 
-    private static OptionalInt ofNullable(@Nullable Integer debug0) {
-        return debug0 != null ? OptionalInt.of(debug0) : OptionalInt.empty();
+    private static OptionalInt ofNullable(@Nullable Integer integer) {
+        return integer != null ? OptionalInt.of(integer) : OptionalInt.empty();
     }
 
     @Nullable
-    private static <T> T parseArgument(OptionSet debug0, OptionSpec<T> debug1) {
+    private static <T> T parseArgument(OptionSet optionSet, OptionSpec<T> optionSpec) {
         try {
-            return (T)debug0.valueOf(debug1);
+            return optionSet.valueOf(optionSpec);
         }
-        catch (Throwable debug2) {
-            ArgumentAcceptingOptionSpec debug3;
-            List debug4;
-            if (debug1 instanceof ArgumentAcceptingOptionSpec && !(debug4 = (debug3 = (ArgumentAcceptingOptionSpec)debug1).defaultValues()).isEmpty()) {
-                return (T)debug4.get(0);
+        catch (Throwable ex) {
+            List<T> debug4;
+            if (optionSpec instanceof ArgumentAcceptingOptionSpec && !(debug4 = ((ArgumentAcceptingOptionSpec<T>)optionSpec).defaultValues()).isEmpty()) {
+                return debug4.get(0);
             }
-            throw debug2;
+            throw ex;
         }
     }
 
-    private static boolean stringHasValue(@Nullable String debug0) {
-        return debug0 != null && !debug0.isEmpty();
+    private static boolean stringHasValue(@Nullable String s) {
+        return s != null && !s.isEmpty();
     }
 
     static {
diff --git a/src/main/java/net/minecraft/client/model/GhastModel.java b/src/main/java/net/minecraft/client/model/GhastModel.java
index ae8dc501e9eda65358c7260b45d86fb5dc48f567..497eb7b2cb1e94bfb02bdfa47126cc78f0f38874 100644
--- a/src/main/java/net/minecraft/client/model/GhastModel.java
+++ b/src/main/java/net/minecraft/client/model/GhastModel.java
@@ -21,8 +21,8 @@ public class GhastModel<T extends Entity> extends ListModel<T>
         final Random debug3 = new Random(1660L);
         for (int debug4 = 0; debug4 < this.tentacles.length; ++debug4) {
             this.tentacles[debug4] = new ModelPart(this, 0, 0);
-            final float debug5 = ((debug4 % 3 - debug4 / 3 % 2 * 0.5f + 0.25f) / 2.0f * 2.0f - 1.0f) * 5.0f;
-            final float debug6 = (debug4 / 3 / 2.0f * 2.0f - 1.0f) * 5.0f;
+            final float debug5 = ((debug4 % 3 - (float)debug4 / 3.0f % 2 * 0.5f + 0.25f) / 2.0f * 2.0f - 1.0f) * 5.0f;
+            final float debug6 = ((float)debug4 / 3.0f / 2.0f * 2.0f - 1.0f) * 5.0f;
             final int debug7 = debug3.nextInt(7) + 8;
             this.tentacles[debug4].addBox(-1.0f, 0.0f, -1.0f, 2.0f, debug7, 2.0f);
             this.tentacles[debug4].x = debug5;
diff --git a/src/main/java/net/minecraft/client/model/PandaModel.java b/src/main/java/net/minecraft/client/model/PandaModel.java
index fc02f46fea0560fba748a915698a45f916c734ec..48888096133827b2be9808239cebdd1c6972975e 100644
--- a/src/main/java/net/minecraft/client/model/PandaModel.java
+++ b/src/main/java/net/minecraft/client/model/PandaModel.java
@@ -64,7 +64,7 @@ public class PandaModel<T extends Panda> extends QuadrupedModel<T>
                 this.head.xRot = -0.7853982f * debug9 / 14.0f;
             }
             else if (debug9 < 20) {
-                final float debug12 = (debug9 - 15) / 5;
+                final float debug12 = (float)(debug9 - 15) / 5.0f;
                 this.head.xRot = -0.7853982f + 0.7853982f * debug12;
             }
         }
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java
index 814761f6a4fe4ab19a732c8db01568e00233de6b..90808e66793c289072ebd97038d4d449ca8aff38 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientHandshakePacketListenerImpl.java
@@ -65,50 +65,50 @@ implements ClientLoginPacketListener {
     private final Connection connection;
     private GameProfile localGameProfile;
 
-    public ClientHandshakePacketListenerImpl(Connection debug1, Minecraft debug2, @Nullable Screen debug3, Consumer<Component> debug4) {
-        this.connection = debug1;
-        this.minecraft = debug2;
-        this.parent = debug3;
-        this.updateStatus = debug4;
+    public ClientHandshakePacketListenerImpl(Connection connection, Minecraft minecraft, @Nullable Screen screen, Consumer<Component> consumer) {
+        this.connection = connection;
+        this.minecraft = minecraft;
+        this.parent = screen;
+        this.updateStatus = consumer;
     }
 
     @Override
-    public void handleHello(ClientboundHelloPacket debug1) {
-        ServerboundKeyPacket debug5;
-        Cipher debug3;
-        Cipher debug2;
-        String debug4;
+    public void handleHello(ClientboundHelloPacket packet) {
+        ServerboundKeyPacket keyPacket;
+        Cipher prepender;
+        Cipher splitter;
+        String serverId;
         try {
-            SecretKey debug6 = Crypt.generateSecretKey();
-            PublicKey debug7 = debug1.getPublicKey();
-            debug4 = new BigInteger(Crypt.digestData(debug1.getServerId(), debug7, debug6)).toString(16);
-            debug2 = Crypt.getCipher(2, debug6);
-            debug3 = Crypt.getCipher(1, debug6);
-            debug5 = new ServerboundKeyPacket(debug6, debug7, debug1.getNonce());
+            SecretKey secretKey = Crypt.generateSecretKey();
+            PublicKey publicKey = packet.getPublicKey();
+            serverId = new BigInteger(Crypt.digestData(packet.getServerId(), publicKey, secretKey)).toString(16);
+            splitter = Crypt.getCipher(2, secretKey);
+            prepender = Crypt.getCipher(1, secretKey);
+            keyPacket = new ServerboundKeyPacket(secretKey, publicKey, packet.getNonce());
         }
-        catch (CryptException debug6) {
-            throw new IllegalStateException("Protocol error", debug6);
+        catch (CryptException ex) {
+            throw new IllegalStateException("Protocol error", ex);
         }
         this.updateStatus.accept(new TranslatableComponent("connect.authorizing"));
         HttpUtil.DOWNLOAD_EXECUTOR.submit(() -> {
-            Component debug5l = this.authenticateServer(debug4);
-            if (debug5l != null) {
+            Component component = this.authenticateServer(serverId);
+            if (component != null) {
                 if (this.minecraft.getCurrentServer() != null && this.minecraft.getCurrentServer().isLan()) {
-                    LOGGER.warn(debug5l.getString());
+                    LOGGER.warn(component.getString());
                 } else {
-                    this.connection.disconnect(debug5l);
+                    this.connection.disconnect(component);
                     return;
                 }
             }
             this.updateStatus.accept(new TranslatableComponent("connect.encrypting"));
-            this.connection.send(debug5, (GenericFutureListener<? extends Future<? super Void>>)((GenericFutureListener)debug3l -> this.connection.setEncryptionKey(debug2, debug3)));
+            this.connection.send(keyPacket, debug3l -> this.connection.setEncryptionKey(splitter, prepender));
         });
     }
 
     @Nullable
-    private Component authenticateServer(String debug1) {
+    private Component authenticateServer(String serverId) {
         try {
-            this.getMinecraftSessionService().joinServer(this.minecraft.getUser().getGameProfile(), this.minecraft.getUser().getAccessToken(), debug1);
+            this.getMinecraftSessionService().joinServer(this.minecraft.getUser().getGameProfile(), this.minecraft.getUser().getAccessToken(), serverId);
         }
         catch (AuthenticationUnavailableException debug2) {
             return new TranslatableComponent("disconnect.loginFailedInfo", new TranslatableComponent("disconnect.loginFailedInfo.serversUnavailable"));
@@ -130,19 +130,19 @@ implements ClientLoginPacketListener {
     }
 
     @Override
-    public void handleGameProfile(ClientboundGameProfilePacket debug1) {
+    public void handleGameProfile(ClientboundGameProfilePacket packet) {
         this.updateStatus.accept(new TranslatableComponent("connect.joining"));
-        this.localGameProfile = debug1.getGameProfile();
+        this.localGameProfile = packet.getGameProfile();
         this.connection.setProtocol(ConnectionProtocol.PLAY);
         this.connection.setListener(new ClientPacketListener(this.minecraft, this.parent, this.connection, this.localGameProfile));
     }
 
     @Override
-    public void onDisconnect(Component debug1) {
+    public void onDisconnect(Component component) {
         if (this.parent != null && this.parent instanceof RealmsScreen) {
-            this.minecraft.setScreen(new DisconnectedRealmsScreen(this.parent, CommonComponents.CONNECT_FAILED, debug1));
+            this.minecraft.setScreen(new DisconnectedRealmsScreen(this.parent, CommonComponents.CONNECT_FAILED, component));
         } else {
-            this.minecraft.setScreen(new DisconnectedScreen(this.parent, CommonComponents.CONNECT_FAILED, debug1));
+            this.minecraft.setScreen(new DisconnectedScreen(this.parent, CommonComponents.CONNECT_FAILED, component));
         }
     }
 
@@ -152,21 +152,21 @@ implements ClientLoginPacketListener {
     }
 
     @Override
-    public void handleDisconnect(ClientboundLoginDisconnectPacket debug1) {
-        this.connection.disconnect(debug1.getReason());
+    public void handleDisconnect(ClientboundLoginDisconnectPacket packet) {
+        this.connection.disconnect(packet.getReason());
     }
 
     @Override
-    public void handleCompression(ClientboundLoginCompressionPacket debug1) {
+    public void handleCompression(ClientboundLoginCompressionPacket packet) {
         if (!this.connection.isMemoryConnection()) {
-            this.connection.setupCompression(debug1.getCompressionThreshold());
+            this.connection.setupCompression(packet.getCompressionThreshold());
         }
     }
 
     @Override
-    public void handleCustomQuery(ClientboundCustomQueryPacket debug1) {
+    public void handleCustomQuery(ClientboundCustomQueryPacket packet) {
         this.updateStatus.accept(new TranslatableComponent("connect.negotiating"));
-        this.connection.send(new ServerboundCustomQueryPacket(debug1.getTransactionId(), null));
+        this.connection.send(new ServerboundCustomQueryPacket(packet.getTransactionId(), null));
     }
 }
 
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index 15c213553a597b9f9f840eaf4549bf247d4310db..fdb831460e5e9144925d938bef145963806554c5 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -2027,14 +2027,14 @@ implements ClientGamePacketListener {
         this.minecraft.gameMode.handleBlockBreakAck(this.level, debug1.getPos(), debug1.getState(), debug1.action(), debug1.allGood());
     }
 
-    private void readSectionList(int debug1, int debug2, LevelLightEngine debug3, LightLayer debug4, int debug5, int debug6, Iterator<byte[]> debug7, boolean debug8) {
+    private void readSectionList(int chunkX, int chunkZ, LevelLightEngine levelLightEngine, LightLayer lightLayer, int debug5, int debug6, Iterator<byte[]> byteIterator, boolean debug8) {
         for (int debug9 = 0; debug9 < 18; ++debug9) {
-            int debug10 = -1 + debug9;
-            boolean debug11 = (debug5 & 1 << debug9) != 0;
-            boolean debug12 = (debug6 & 1 << debug9) != 0; // MagmaCube - decompile fix - remove unused var
-            if (!debug11 && !debug12) continue;
-            debug3.queueSectionData(debug4, SectionPos.of(debug1, debug10, debug2), debug11 ? new DataLayer((byte[])debug7.next().clone()) : new DataLayer(), debug8); // todo: NoSuchElementException on debug7#next
-            this.level.setSectionDirtyWithNeighbors(debug1, debug10, debug2);
+            int y = -1 + debug9;
+            boolean flag = (debug5 & 1 << debug9) != 0;
+            boolean flag1 = (debug6 & 1 << debug9) != 0; // MagmaCube - decompile fix - remove unused var
+            if (!flag && !flag1) continue;
+            levelLightEngine.queueSectionData(lightLayer, SectionPos.of(chunkX, y, chunkZ), flag ? new DataLayer(byteIterator.next().clone()) : new DataLayer(), debug8); // todo: NoSuchElementException on debug7#next
+            this.level.setSectionDirtyWithNeighbors(chunkX, y, chunkZ);
         }
     }
 
diff --git a/src/main/java/net/minecraft/client/particle/EnchantmentTableParticle.java b/src/main/java/net/minecraft/client/particle/EnchantmentTableParticle.java
index 6854f4b603a950cba600b8ec646bbcd98f22827a..94c03d65a9e07132f2a3411c730805ac5b3c741d 100644
--- a/src/main/java/net/minecraft/client/particle/EnchantmentTableParticle.java
+++ b/src/main/java/net/minecraft/client/particle/EnchantmentTableParticle.java
@@ -46,7 +46,7 @@ public class EnchantmentTableParticle extends TextureSheetParticle
     
     public int getLightColor(final float debug1) {
         final int debug2 = super.getLightColor(debug1);
-        float debug3 = this.age / this.lifetime;
+        float debug3 = (float)this.age / (float)this.lifetime;
         debug3 *= debug3;
         debug3 *= debug3;
         final int debug4 = debug2 & 0xFF;
@@ -67,7 +67,7 @@ public class EnchantmentTableParticle extends TextureSheetParticle
             this.remove();
             return;
         }
-        float debug1 = this.age / this.lifetime;
+        float debug1 = (float)this.age / (float)this.lifetime;
         debug1 = 1.0f - debug1;
         float debug2 = 1.0f - debug1;
         debug2 *= debug2;
diff --git a/src/main/java/net/minecraft/client/particle/HugeExplosionSeedParticle.java b/src/main/java/net/minecraft/client/particle/HugeExplosionSeedParticle.java
index 8ea1fbc43e7ecd242228674f6c8bb392b9a80a9b..1f73114dcdafd1829085365e3b452e76f5840204 100644
--- a/src/main/java/net/minecraft/client/particle/HugeExplosionSeedParticle.java
+++ b/src/main/java/net/minecraft/client/particle/HugeExplosionSeedParticle.java
@@ -21,7 +21,7 @@ public class HugeExplosionSeedParticle extends NoRenderParticle
             final double debug2 = this.x + (this.random.nextDouble() - this.random.nextDouble()) * 4.0;
             final double debug3 = this.y + (this.random.nextDouble() - this.random.nextDouble()) * 4.0;
             final double debug4 = this.z + (this.random.nextDouble() - this.random.nextDouble()) * 4.0;
-            this.level.addParticle(ParticleTypes.EXPLOSION, debug2, debug3, debug4, this.life / this.lifeTime, 0.0, 0.0);
+            this.level.addParticle(ParticleTypes.EXPLOSION, debug2, debug3, debug4, (float)this.life / (float)this.lifeTime, 0.0, 0.0);
         }
         ++this.life;
         if (this.life == this.lifeTime) {
diff --git a/src/main/java/net/minecraft/client/particle/LavaParticle.java b/src/main/java/net/minecraft/client/particle/LavaParticle.java
index ccaecf7d38e105204de29edec23a601ce55eb488..87669904b0ad682404066304516691cec2ba0a87 100644
--- a/src/main/java/net/minecraft/client/particle/LavaParticle.java
+++ b/src/main/java/net/minecraft/client/particle/LavaParticle.java
@@ -40,7 +40,7 @@ public class LavaParticle extends TextureSheetParticle
         this.xo = this.x;
         this.yo = this.y;
         this.zo = this.z;
-        final float debug1 = this.age / this.lifetime;
+        final float debug1 = (float)this.age / (float)this.lifetime;
         if (this.random.nextFloat() > debug1) {
             this.level.addParticle(ParticleTypes.SMOKE, this.x, this.y, this.z, this.xd, this.yd, this.zd);
         }
diff --git a/src/main/java/net/minecraft/client/particle/ParticleEngine.java b/src/main/java/net/minecraft/client/particle/ParticleEngine.java
index 45b165e7aa2a95cdff51e089cc574037bd5d3ad2..5829cec0ca26448d3ddc94f337e4486c9dc647fb 100644
--- a/src/main/java/net/minecraft/client/particle/ParticleEngine.java
+++ b/src/main/java/net/minecraft/client/particle/ParticleEngine.java
@@ -466,7 +466,7 @@ implements PreparableReloadListener {
         return String.valueOf(this.particles.values().stream().mapToInt(Collection::size).sum());
     }
 
-    class MutableSpriteSet
+    static class MutableSpriteSet
     implements SpriteSet {
         private List<TextureAtlasSprite> sprites;
 
diff --git a/src/main/java/net/minecraft/client/particle/PortalParticle.java b/src/main/java/net/minecraft/client/particle/PortalParticle.java
index 65ad284ccb5e3565f108c68026813878cf5f4bdf..b3d14ba0bd7c84e9bf81b6b8e3d9240e4178f053 100644
--- a/src/main/java/net/minecraft/client/particle/PortalParticle.java
+++ b/src/main/java/net/minecraft/client/particle/PortalParticle.java
@@ -51,7 +51,7 @@ public class PortalParticle extends TextureSheetParticle
     
     public int getLightColor(final float debug1) {
         final int debug2 = super.getLightColor(debug1);
-        float debug3 = this.age / this.lifetime;
+        float debug3 = (float)this.age / (float)this.lifetime;
         debug3 *= debug3;
         debug3 *= debug3;
         final int debug4 = debug2 & 0xFF;
@@ -73,7 +73,7 @@ public class PortalParticle extends TextureSheetParticle
             return;
         }
         final float debug2;
-        float debug1 = debug2 = this.age / this.lifetime;
+        float debug1 = debug2 = (float)this.age / (float)this.lifetime;
         debug1 = -debug1 + debug1 * debug1 * 2.0f;
         debug1 = 1.0f - debug1;
         this.x = this.xStart + this.xd * debug1;
diff --git a/src/main/java/net/minecraft/client/particle/ReversePortalParticle.java b/src/main/java/net/minecraft/client/particle/ReversePortalParticle.java
index 26cc3a7bad72f5987a6f2c6a6f3d5a7b661c33cd..84f4d3a23c137480408d871474c0d07da588a657 100644
--- a/src/main/java/net/minecraft/client/particle/ReversePortalParticle.java
+++ b/src/main/java/net/minecraft/client/particle/ReversePortalParticle.java
@@ -27,7 +27,7 @@ public class ReversePortalParticle extends PortalParticle
             this.remove();
             return;
         }
-        final float debug1 = this.age / this.lifetime;
+        final float debug1 = (float)this.age / (float)this.lifetime;
         this.x += this.xd * debug1;
         this.y += this.yd * debug1;
         this.z += this.zd * debug1;
diff --git a/src/main/java/net/minecraft/client/particle/SimpleAnimatedParticle.java b/src/main/java/net/minecraft/client/particle/SimpleAnimatedParticle.java
index 97cc877584fa9cfe806a0c78753e7bc6348f4a67..8867b77caa91533e39042bfde30b254e401fc3a6 100644
--- a/src/main/java/net/minecraft/client/particle/SimpleAnimatedParticle.java
+++ b/src/main/java/net/minecraft/client/particle/SimpleAnimatedParticle.java
@@ -50,7 +50,7 @@ public class SimpleAnimatedParticle extends TextureSheetParticle
         }
         this.setSpriteFromAge(this.sprites);
         if (this.age > this.lifetime / 2) {
-            this.setAlpha(1.0f - (this.age - this.lifetime / 2) / this.lifetime);
+            this.setAlpha(1.0f - ((float)this.age - (float)this.lifetime / 2.0f) / (float)this.lifetime);
             if (this.hasFade) {
                 this.rCol += (this.fadeR - this.rCol) * 0.2f;
                 this.gCol += (this.fadeG - this.gCol) * 0.2f;
diff --git a/src/main/java/net/minecraft/client/particle/SquidInkParticle.java b/src/main/java/net/minecraft/client/particle/SquidInkParticle.java
index 3cceb524e4def4edef39e2215c2acf103b5c2618..50eb3bf6b55cf17f480d98f917e999eee1691fb3 100644
--- a/src/main/java/net/minecraft/client/particle/SquidInkParticle.java
+++ b/src/main/java/net/minecraft/client/particle/SquidInkParticle.java
@@ -32,7 +32,7 @@ public class SquidInkParticle extends SimpleAnimatedParticle
         }
         this.setSpriteFromAge(this.sprites);
         if (this.age > this.lifetime / 2) {
-            this.setAlpha(1.0f - (this.age - this.lifetime / 2) / this.lifetime);
+            this.setAlpha(1.0f - ((float)this.age - (float)this.lifetime / 2.0f) / (float)this.lifetime);
         }
         this.move(this.xd, this.yd, this.zd);
         if (this.level.getBlockState(new BlockPos(this.x, this.y, this.z)).isAir()) {
diff --git a/src/main/java/net/minecraft/client/renderer/GameRenderer.java b/src/main/java/net/minecraft/client/renderer/GameRenderer.java
index c4be928ee20edef156fe6cdd5fa1e94f02fbfe96..332fb4ffd6ae6c2b7e7843f3f622551f260aaea8 100644
--- a/src/main/java/net/minecraft/client/renderer/GameRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/GameRenderer.java
@@ -411,8 +411,8 @@ AutoCloseable {
         if (this.minecraft.noRender) {
             return;
         }
-        int debug5 = (int)(this.minecraft.mouseHandler.xpos() * (double)this.minecraft.getWindow().getGuiScaledWidth() / (double)this.minecraft.getWindow().getScreenWidth());
-        int debug6 = (int)(this.minecraft.mouseHandler.ypos() * (double)this.minecraft.getWindow().getGuiScaledHeight() / (double)this.minecraft.getWindow().getScreenHeight());
+        int mouseX = (int)(this.minecraft.mouseHandler.xpos() * (double)this.minecraft.getWindow().getGuiScaledWidth() / (double)this.minecraft.getWindow().getScreenWidth());
+        int mouseY = (int)(this.minecraft.mouseHandler.ypos() * (double)this.minecraft.getWindow().getGuiScaledHeight() / (double)this.minecraft.getWindow().getScreenHeight());
         RenderSystem.viewport(0, 0, this.minecraft.getWindow().getWidth(), this.minecraft.getWindow().getHeight());
         if (debug4 && this.minecraft.level != null) {
             this.minecraft.getProfiler().push("level");
@@ -446,7 +446,7 @@ AutoCloseable {
         RenderSystem.loadIdentity();
         RenderSystem.translatef(0.0f, 0.0f, -2000.0f);
         Lighting.setupFor3DItems();
-        PoseStack debug8 = new PoseStack();
+        PoseStack poseStack = new PoseStack();
         if (debug4 && this.minecraft.level != null) {
             float debug9;
             this.minecraft.getProfiler().popPush("gui");
@@ -456,33 +456,30 @@ AutoCloseable {
             if (!this.minecraft.options.hideGui || this.minecraft.screen != null) {
                 RenderSystem.defaultAlphaFunc();
                 this.renderItemActivationAnimation(this.minecraft.getWindow().getGuiScaledWidth(), this.minecraft.getWindow().getGuiScaledHeight(), debug1);
-                this.minecraft.gui.render(debug8, debug1);
+                this.minecraft.gui.render(poseStack, debug1);
                 RenderSystem.clear(256, Minecraft.ON_OSX);
             }
             this.minecraft.getProfiler().pop();
         }
         if (this.minecraft.overlay != null) {
             try {
-                this.minecraft.overlay.render(debug8, debug5, debug6, this.minecraft.getDeltaFrameTime());
+                this.minecraft.overlay.render(poseStack, mouseX, mouseY, this.minecraft.getDeltaFrameTime());
+            } catch (Throwable ex) {
+                CrashReport crashReport = CrashReport.forThrowable(ex, "Rendering overlay");
+                CrashReportCategory category = crashReport.addCategory("Overlay render details");
+                category.setDetail("Overlay name", () -> this.minecraft.overlay.getClass().getCanonicalName());
+                throw new ReportedException(crashReport);
             }
-            catch (Throwable debug9) {
-                CrashReport debug10 = CrashReport.forThrowable(debug9, "Rendering overlay");
-                CrashReportCategory debug11 = debug10.addCategory("Overlay render details");
-                debug11.setDetail("Overlay name", () -> this.minecraft.overlay.getClass().getCanonicalName());
-                throw new ReportedException(debug10);
-            }
-        }
-        if (this.minecraft.screen != null) {
+        } else if (this.minecraft.screen != null) {
             try {
-                this.minecraft.screen.render(debug8, debug5, debug6, this.minecraft.getDeltaFrameTime());
-            }
-            catch (Throwable debug9) {
-                CrashReport debug10 = CrashReport.forThrowable(debug9, "Rendering screen");
-                CrashReportCategory debug11 = debug10.addCategory("Screen render details");
-                debug11.setDetail("Screen name", () -> this.minecraft.screen.getClass().getCanonicalName());
-                debug11.setDetail("Mouse location", () -> String.format(Locale.ROOT, "Scaled: (%d, %d). Absolute: (%f, %f)", debug5, debug6, this.minecraft.mouseHandler.xpos(), this.minecraft.mouseHandler.ypos()));
-                debug11.setDetail("Screen size", () -> String.format(Locale.ROOT, "Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %f", this.minecraft.getWindow().getGuiScaledWidth(), this.minecraft.getWindow().getGuiScaledHeight(), this.minecraft.getWindow().getWidth(), this.minecraft.getWindow().getHeight(), this.minecraft.getWindow().getGuiScale()));
-                throw new ReportedException(debug10);
+                this.minecraft.screen.render(poseStack, mouseX, mouseY, this.minecraft.getDeltaFrameTime());
+            } catch (Throwable ex) {
+                CrashReport crashReport = CrashReport.forThrowable(ex, "Rendering screen");
+                CrashReportCategory category = crashReport.addCategory("Screen render details");
+                category.setDetail("Screen name", () -> this.minecraft.screen.getClass().getCanonicalName());
+                category.setDetail("Mouse location", () -> String.format(Locale.ROOT, "Scaled: (%d, %d). Absolute: (%f, %f)", mouseX, mouseY, this.minecraft.mouseHandler.xpos(), this.minecraft.mouseHandler.ypos()));
+                category.setDetail("Screen size", () -> String.format(Locale.ROOT, "Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %f", this.minecraft.getWindow().getGuiScaledWidth(), this.minecraft.getWindow().getGuiScaledHeight(), this.minecraft.getWindow().getWidth(), this.minecraft.getWindow().getHeight(), this.minecraft.getWindow().getGuiScale()));
+                throw new ReportedException(crashReport);
             }
         }
     }
diff --git a/src/main/java/net/minecraft/client/renderer/ItemModelShaper.java b/src/main/java/net/minecraft/client/renderer/ItemModelShaper.java
index 5b241e1dac09cfc85b9a43c48eaff8a1872b9c9a..d620152536dd88cc985fb5a5473e8b241494678e 100644
--- a/src/main/java/net/minecraft/client/renderer/ItemModelShaper.java
+++ b/src/main/java/net/minecraft/client/renderer/ItemModelShaper.java
@@ -40,7 +40,7 @@ public class ItemModelShaper
     
     public BakedModel getItemModel(final ItemStack debug1) {
         final BakedModel debug2 = this.getItemModel(debug1.getItem());
-        return this.modelManager.getMissingModel(); //(debug2 == null) ? this.modelManager.getMissingModel() : debug2; // MagmaCube - todo: debug
+        return (debug2 == null) ? this.modelManager.getMissingModel() : debug2;
     }
     
     @Nullable
diff --git a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
index 497d1190c558759498a653c6d7e479529cb575b2..4990c1374c0fa9c52739b219c03fc4e2f1a953ae 100644
--- a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
@@ -1830,7 +1830,7 @@ AutoCloseable {
         for (int debug15 = 0; debug15 < debug13.size(); ++debug15) {
             AABB debug16 = debug13.get(debug15);
             float debug17 = ((float)debug15 % (float)debug14 + 1.0f) / (float)debug14;
-            float debug18 = debug15 / debug14;
+            float debug18 = (float)debug15 / (float)debug14;
             float debug19 = debug17 * (float)(debug18 == 0.0f ? 1 : 0);
             float debug20 = debug17 * (float)(debug18 == 1.0f ? 1 : 0);
             float debug21 = debug17 * (float)(debug18 == 2.0f ? 1 : 0);
@@ -2504,7 +2504,7 @@ AutoCloseable {
         }
     }
 
-    class RenderChunkInfo {
+    static class RenderChunkInfo {
         private final ChunkRenderDispatcher.RenderChunk chunk;
         private final Direction sourceDirection;
         private byte directions;
diff --git a/src/main/java/net/minecraft/client/renderer/block/ModelBlockRenderer.java b/src/main/java/net/minecraft/client/renderer/block/ModelBlockRenderer.java
index 81c7bfc5e60fbc7ed3dab6a0d1e14a3c54c705b3..36153572e97ff49b10703e2979be37b474384eec 100644
--- a/src/main/java/net/minecraft/client/renderer/block/ModelBlockRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/block/ModelBlockRenderer.java
@@ -308,7 +308,7 @@ public class ModelBlockRenderer {
         }
     }
 
-    class AmbientOcclusionFace {
+    static class AmbientOcclusionFace {
         private final float[] brightness = new float[4];
         private final int[] lightmap = new int[4];
 
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/SignRenderer.java b/src/main/java/net/minecraft/client/renderer/blockentity/SignRenderer.java
index dea86476dd820d00181d81a52638b05bd9eeab66..844b0a5decce6c842490f4bff7968d29049e0ca8 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/SignRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/SignRenderer.java
@@ -77,7 +77,7 @@ public class SignRenderer extends BlockEntityRenderer<SignBlockEntity>
                 return debug23.isEmpty() ? FormattedCharSequence.EMPTY : debug23.get(0);
             });
             if (debug22 != null) {
-                final float debug24 = -debug12.width(debug22) / 2;
+                final float debug24 = (float)-debug12.width(debug22) / 2.0f;
                 debug12.drawInBatch(debug22, debug24, debug21 * 10 - 20, debug19, false, debug3.last().pose(), debug4, false, 0, debug5);
             }
         }
diff --git a/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java
index 25bee9af2983c12ec50ff717de94601bf6df4bfb..332b9b598b23f47bc42c1e0704f9bd7219f68e5c 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/PathfindingRenderer.java
@@ -111,7 +111,7 @@ public class PathfindingRenderer implements DebugRenderer.SimpleDebugRenderer
         for (int debug8 = 0; debug8 < debug0.getNodeCount(); ++debug8) {
             final Node debug9 = debug0.getNode(debug8);
             if (distanceToCamera(debug9.asBlockPos(), debug1, debug3, debug5) <= 80.0f) {
-                final float debug10 = debug8 / debug0.getNodeCount() * 0.33f;
+                final float debug10 = (float)debug8 / (float)debug0.getNodeCount() * 0.33f;
                 final int debug11 = (debug8 == 0) ? 0 : Mth.hsvToRgb(debug10, 0.9f, 0.9f);
                 final int debug12 = debug11 >> 16 & 0xFF;
                 final int debug13 = debug11 >> 8 & 0xFF;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderer.java
index 66ad9015968451cbf9170c4bd294f784abb5f989..79e0870d82d4fea4f325b94dd89a46e93895f56e 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderer.java
@@ -95,7 +95,7 @@ public abstract class EntityRenderer<T extends Entity> {
         float debug12 = Minecraft.getInstance().options.getBackgroundOpacity(0.25f);
         int debug13 = (int)(debug12 * 255.0f) << 24;
         Font debug14 = this.getFont();
-        float debug15 = -debug14.width(debug2) / 2;
+        float debug15 = (float)-debug14.width(debug2) / 2.0F;
         debug14.drawInBatch(debug2, debug15, (float)debug10, 0x20FFFFFF, false, debug11, debug4, debug8, debug13, debug5);
         if (debug8) {
             debug14.drawInBatch(debug2, debug15, (float)debug10, -1, false, debug11, debug4, false, 0, debug5);
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ExperienceOrbRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ExperienceOrbRenderer.java
index b9ff926d317e9d8af0e4f5a76198c63f1b8b3493..f07750a150afc78139918e8f324cbc4ab8f14d22 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ExperienceOrbRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ExperienceOrbRenderer.java
@@ -34,10 +34,10 @@ public class ExperienceOrbRenderer extends EntityRenderer<ExperienceOrb>
     public void render(final ExperienceOrb debug1, final float debug2, final float debug3, final PoseStack debug4, final MultiBufferSource debug5, final int debug6) {
         debug4.pushPose();
         final int debug7 = debug1.getIcon();
-        final float debug8 = (debug7 % 4 * 16 + 0) / 64.0f;
-        final float debug9 = (debug7 % 4 * 16 + 16) / 64.0f;
-        final float debug10 = (debug7 / 4 * 16 + 0) / 64.0f;
-        final float debug11 = (debug7 / 4 * 16 + 16) / 64.0f;
+        final float debug8 = ((float)debug7 % 4 * 16 + 0) / 64.0f;
+        final float debug9 = ((float)debug7 % 4 * 16 + 16) / 64.0f;
+        final float debug10 = ((float)debug7 / 4.0F * 16 + 0) / 64.0f;
+        final float debug11 = ((float)debug7 / 4.0F * 16 + 16) / 64.0f;
         final float debug12 = 1.0f;
         final float debug13 = 0.5f;
         final float debug14 = 0.25f;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
index 6c210557f965fed48e6860d5d3cd3a99680afc1a..39917af42a01d2745e51f2274b5159028e842198 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
@@ -59,10 +59,9 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.HalfTransparentBlock;
 import net.minecraft.world.level.block.StainedGlassPaneBlock;
 
-public class ItemRenderer
-implements ResourceManagerReloadListener {
+public class ItemRenderer implements ResourceManagerReloadListener {
     public static final ResourceLocation ENCHANT_GLINT_LOCATION = new ResourceLocation("textures/misc/enchanted_item_glint.png");
-    private static final Set<Item> IGNORED = Sets.newHashSet(new Item[]{Items.AIR}); // MagmaCube - decompile fix
+    private static final Set<Item> IGNORED = Sets.newHashSet(Items.AIR); // MagmaCube - decompile fix
     public float blitOffset;
     private final ItemModelShaper itemModelShaper;
     private final TextureManager textureManager;
@@ -82,19 +81,18 @@ implements ResourceManagerReloadListener {
         return this.itemModelShaper;
     }
 
-    private void renderModelLists(BakedModel debug1, ItemStack debug2, int debug3, int debug4, PoseStack debug5, VertexConsumer debug6) {
-        Random debug7 = new Random();
-        long debug8 = 42L;
-        for (Direction debug13 : Direction.values()) {
-            debug7.setSeed(42L);
-            this.renderQuadList(debug5, debug6, debug1.getQuads(null, debug13, debug7), debug2, debug3, debug4);
+    private void renderModelLists(BakedModel bakedModel, ItemStack itemStack, int combinedLight, int combinedOverlay, PoseStack poseStack, VertexConsumer vertexConsumer) {
+        Random random = new Random();
+        long seed = 42L;
+        for (Direction direction : Direction.values()) {
+            random.setSeed(42L);
+            this.renderQuadList(poseStack, vertexConsumer, bakedModel.getQuads(null, direction, random), itemStack, combinedLight, combinedOverlay);
         }
-        debug7.setSeed(42L);
-        this.renderQuadList(debug5, debug6, debug1.getQuads(null, null, debug7), debug2, debug3, debug4);
+        random.setSeed(42L);
+        this.renderQuadList(poseStack, vertexConsumer, bakedModel.getQuads(null, null, random), itemStack, combinedLight, combinedOverlay);
     }
 
-    // MagmaCube start - rename parameters and variables
-    public void render(ItemStack itemStack, ItemTransforms.TransformType transformType, boolean debug3, PoseStack poseStack, MultiBufferSource bufferSource, int debug6, int debug7, BakedModel model) {
+    public void render(ItemStack itemStack, ItemTransforms.TransformType transformType, boolean leftHand, PoseStack poseStack, MultiBufferSource bufferSource, int combinedLight, int combinedOverlay, BakedModel model) {
         if (itemStack.isEmpty()) {
             return;
         }
@@ -103,10 +101,10 @@ implements ResourceManagerReloadListener {
         if (itemStack.getItem() == Items.TRIDENT && debug9) {
             model = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:trident#inventory"));
         }
-        model.getTransforms().getTransform(transformType).apply(debug3, poseStack);
+        model.getTransforms().getTransform(transformType).apply(leftHand, poseStack);
         poseStack.translate(-0.5, -0.5, -0.5);
         if (model.isCustomRenderer() || itemStack.getItem() == Items.TRIDENT && !debug9) {
-            BlockEntityWithoutLevelRenderer.instance.renderByItem(itemStack, transformType, poseStack, bufferSource, debug6, debug7);
+            BlockEntityWithoutLevelRenderer.instance.renderByItem(itemStack, transformType, poseStack, bufferSource, combinedLight, combinedOverlay);
         } else {
             VertexConsumer debug12;
             Object debug11;
@@ -125,11 +123,10 @@ implements ResourceManagerReloadListener {
             } else {
                 debug12 = debug10 ? ItemRenderer.getFoilBufferDirect(bufferSource, (RenderType)debug11, true, itemStack.hasFoil()) : ItemRenderer.getFoilBuffer(bufferSource, (RenderType)debug11, true, itemStack.hasFoil());
             }
-            this.renderModelLists(model, itemStack, debug6, debug7, poseStack, debug12);
+            this.renderModelLists(model, itemStack, combinedLight, combinedOverlay, poseStack, debug12);
         }
         poseStack.popPose();
     }
-    // MagmaCube end - rename parameters and variables
 
     public static VertexConsumer getArmorFoilBuffer(MultiBufferSource debug0, RenderType debug1, boolean debug2, boolean debug3) {
         if (debug3) {
@@ -183,7 +180,7 @@ implements ResourceManagerReloadListener {
         BakedModel debug4 = debug5 == Items.TRIDENT ? this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:trident_in_hand#inventory")) : this.itemModelShaper.getItemModel(debug1);
         ClientLevel debug6 = debug2 instanceof ClientLevel ? (ClientLevel)debug2 : null;
         BakedModel debug7 = debug4.getOverrides().resolve(debug4, debug1, debug6, debug3);
-        return this.itemModelShaper.getModelManager().getMissingModel();//debug7 == null ? this.itemModelShaper.getModelManager().getMissingModel() : debug7; // MagmaCube - todo: debug
+        return debug7 == null ? this.itemModelShaper.getModelManager().getMissingModel() : debug7;
     }
 
     public void renderStatic(ItemStack debug1, ItemTransforms.TransformType debug2, int debug3, int debug4, PoseStack debug5, MultiBufferSource debug6) {
@@ -272,7 +269,6 @@ implements ResourceManagerReloadListener {
 
     public void renderGuiItemDecorations(Font debug1, ItemStack debug2, int debug3, int debug4, @Nullable String debug5) {
         float debug8;
-        Object debug82;
         Object debug7;
         if (debug2.isEmpty()) {
             return;
@@ -281,9 +277,9 @@ implements ResourceManagerReloadListener {
         if (debug2.getCount() != 1 || debug5 != null) {
             debug7 = debug5 == null ? String.valueOf(debug2.getCount()) : debug5;
             debug6.translate(0.0, 0.0, this.blitOffset + 200.0f);
-            debug82 = MultiBufferSource.immediate(Tesselator.getInstance().getBuilder());
+            MultiBufferSource.BufferSource debug82 = MultiBufferSource.immediate(Tesselator.getInstance().getBuilder());
             debug1.drawInBatch((String)debug7, (float)(debug3 + 19 - 2 - debug1.width((String)debug7)), (float)(debug4 + 6 + 3), 0xFFFFFF, true, debug6.last().pose(), (MultiBufferSource)debug82, false, 0, 0xF000F0);
-            ((MultiBufferSource.BufferSource)debug82).endBatch();
+            debug82.endBatch();
         }
         if (debug2.isDamaged()) {
             RenderSystem.disableDepthTest();
@@ -291,14 +287,14 @@ implements ResourceManagerReloadListener {
             RenderSystem.disableAlphaTest();
             RenderSystem.disableBlend();
             debug7 = Tesselator.getInstance();
-            debug82 = ((Tesselator)debug7).getBuilder();
+            BufferBuilder debug82 = ((Tesselator)debug7).getBuilder();
             float debug9 = debug2.getDamageValue();
             float debug10 = debug2.getMaxDamage();
             float debug11 = Math.max(0.0f, (debug10 - debug9) / debug10);
             int debug12 = Math.round(13.0f - debug9 * 13.0f / debug10);
             int debug13 = Mth.hsvToRgb(debug11 / 3.0f, 1.0f, 1.0f);
-            this.fillRect((BufferBuilder)debug82, debug3 + 2, debug4 + 13, 13, 2, 0, 0, 0, 255);
-            this.fillRect((BufferBuilder)debug82, debug3 + 2, debug4 + 13, debug12, 1, debug13 >> 16 & 0xFF, debug13 >> 8 & 0xFF, debug13 & 0xFF, 255);
+            this.fillRect(debug82, debug3 + 2, debug4 + 13, 13, 2, 0, 0, 0, 255);
+            this.fillRect(debug82, debug3 + 2, debug4 + 13, debug12, 1, debug13 >> 16 & 0xFF, debug13 >> 8 & 0xFF, debug13 & 0xFF, 255);
             RenderSystem.enableBlend();
             RenderSystem.enableAlphaTest();
             RenderSystem.enableTexture();
diff --git a/src/main/java/net/minecraft/client/renderer/entity/MobRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/MobRenderer.java
index 4bc35f329e1aa3b9b6f506ccb90d6eaa47839a67..9880133de572dc69e3c3b6858a987016c7795e95 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/MobRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/MobRenderer.java
@@ -97,7 +97,7 @@ public abstract class MobRenderer<T extends Mob, M extends EntityModel<T>> exten
             debug14 *= 0.7f;
             debug15 *= 0.7f;
         }
-        final float debug16 = debug9 / debug8;
+        final float debug16 = (float)debug9 / (float)debug8;
         final float debug17 = debug3 * debug16;
         final float debug18 = (debug4 > 0.0f) ? (debug4 * debug16 * debug16) : (debug4 - debug4 * (1.0f - debug16) * (1.0f - debug16));
         final float debug19 = debug5 * debug16;
diff --git a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
index 2f92c58a96538b0dda0638d825e75865f5c6a8ab..a1b6ccd26be7d1d17b329cd081a277b5ed375b18 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
@@ -46,10 +46,10 @@ public class TextureAtlasSprite implements AutoCloseable
         final int debug11 = debug2.height;
         this.x = debug6;
         this.y = debug7;
-        this.u0 = debug6 / debug4;
-        this.u1 = (debug6 + debug10) / debug4;
-        this.v0 = debug7 / debug5;
-        this.v1 = (debug7 + debug11) / debug5;
+        this.u0 = (float)debug6 / (float)debug4;
+        this.u1 = (float)(debug6 + debug10) / (float)debug4;
+        this.v0 = (float)debug7 / (float)debug5;
+        this.v1 = (float)(debug7 + debug11) / (float)debug5;
         final int debug12 = debug8.getWidth() / debug9.getFrameWidth(debug10);
         final int debug13 = debug8.getHeight() / debug9.getFrameHeight(debug11);
         if (debug9.getFrameCount() > 0) {
@@ -88,8 +88,7 @@ public class TextureAtlasSprite implements AutoCloseable
         try {
             try {
                 this.mainImage = MipmapGenerator.generateMipLevels(debug8, debug3);
-            }
-            catch (Throwable debug21) {
+            } catch (Throwable debug21) {
                 final CrashReport debug20 = CrashReport.forThrowable(debug21, "Generating mipmaps for frame");
                 final CrashReportCategory debug22 = debug20.addCategory("Frame being iterated");
                 debug22.setDetail("First frame", () -> {
@@ -205,8 +204,8 @@ public class TextureAtlasSprite implements AutoCloseable
     }
     
     private float atlasSize() {
-        final float debug1 = this.info.width / (this.u1 - this.u0);
-        final float debug2 = this.info.height / (this.v1 - this.v0);
+        final float debug1 = (float)this.info.width / (this.u1 - this.u0);
+        final float debug2 = (float)this.info.height / (this.v1 - this.v0);
         return Math.max(debug2, debug1);
     }
     
@@ -225,12 +224,10 @@ public class TextureAtlasSprite implements AutoCloseable
             if (debug1 != debug3 && debug3 >= 0 && debug3 < this.getFrameCount()) {
                 this.upload(debug3);
             }
-        }
-        else if (this.interpolationData != null) {
+        } else if (this.interpolationData != null) {
             if (!RenderSystem.isOnRenderThread()) {
                 RenderSystem.recordRenderCall(() -> this.interpolationData.uploadInterpolatedFrame());
-            }
-            else {
+            } else {
                 this.interpolationData.uploadInterpolatedFrame();
             }
         }
@@ -287,14 +284,15 @@ public class TextureAtlasSprite implements AutoCloseable
         }
         
         private void uploadInterpolatedFrame() {
-            final double debug1 = 1.0 - TextureAtlasSprite.this.subFrame / TextureAtlasSprite.this.metadata.getFrameTime(TextureAtlasSprite.this.frame);
+            final double debug1 = 1.0 - (double)TextureAtlasSprite.this.subFrame / (double)TextureAtlasSprite.this.metadata.getFrameTime(TextureAtlasSprite.this.frame);
             final int debug2 = TextureAtlasSprite.this.metadata.getFrameIndex(TextureAtlasSprite.this.frame);
-            final int debug3 = (TextureAtlasSprite.this.metadata.getFrameCount() == 0) ? TextureAtlasSprite.this.getFrameCount() : TextureAtlasSprite.this.metadata.getFrameCount();
+            final int debug3 = TextureAtlasSprite.this.metadata.getFrameCount() == 0 ? TextureAtlasSprite.this.getFrameCount() : TextureAtlasSprite.this.metadata.getFrameCount();
             final int debug4 = TextureAtlasSprite.this.metadata.getFrameIndex((TextureAtlasSprite.this.frame + 1) % debug3);
             if (debug2 != debug4 && debug4 >= 0 && debug4 < TextureAtlasSprite.this.getFrameCount()) {
                 for (int debug5 = 0; debug5 < this.activeFrame.length; ++debug5) {
                     final int debug6 = TextureAtlasSprite.this.info.width >> debug5;
-                    for (int debug7 = TextureAtlasSprite.this.info.height >> debug5, debug8 = 0; debug8 < debug7; ++debug8) {
+                    int debug7 = TextureAtlasSprite.this.info.height >> debug5;
+                    for (int debug8 = 0; debug8 < debug7; ++debug8) {
                         for (int debug9 = 0; debug9 < debug6; ++debug9) {
                             final int debug10 = this.getPixel(debug2, debug5, debug9, debug8);
                             final int debug11 = this.getPixel(debug4, debug5, debug9, debug8);
diff --git a/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java b/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java
index d183a4ca942ba82757594a73c0a333f54e342fcc..fe239572d86e74764b0969fa0f5e81d760b7f7c7 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/TextureManager.java
@@ -73,17 +73,16 @@ AutoCloseable {
         debug2.bind();
     }
 
-    public void register(ResourceLocation debug1, AbstractTexture debug2) {
-        debug2 = this.loadTexture(debug1, debug2); // MagmaCube - decompile fix
-        //LOGGER.debug("Texture of " + debug1 + ": " + debug2); // MagmaCube - todo: debug
-        AbstractTexture debug3 = this.byPath.put(debug1, debug2); // MagmaCube - decompile fix
-        if (debug3 != debug2) {
-            if (debug3 != null && debug3 != MissingTextureAtlasSprite.getTexture()) {
-                this.tickableTextures.remove(debug3);
-                this.safeClose(debug1, debug3);
+    public void register(ResourceLocation resourceLocation, AbstractTexture texture) {
+        texture = this.loadTexture(resourceLocation, texture);
+        AbstractTexture abstractTexture = this.byPath.put(resourceLocation, texture);
+        if (abstractTexture != texture) {
+            if (abstractTexture != null && abstractTexture != MissingTextureAtlasSprite.getTexture()) {
+                this.tickableTextures.remove(abstractTexture);
+                this.safeClose(resourceLocation, abstractTexture);
             }
-            if (debug2 instanceof Tickable) {
-                this.tickableTextures.add((Tickable)((Object)debug2));
+            if (texture instanceof Tickable) {
+                this.tickableTextures.add((Tickable) texture);
             }
         }
     }
@@ -102,7 +101,6 @@ AutoCloseable {
 
     private AbstractTexture loadTexture(ResourceLocation debug1, AbstractTexture debug2) {
         try {
-            //LOGGER.debug("Loading texture " + debug1); // MagmaCube - todo: debug
             debug2.load(this.resourceManager);
             return debug2;
         }
@@ -131,7 +129,7 @@ AutoCloseable {
         if (debug3 == null) {
             debug3 = 1;
         } else {
-            debug3 = debug3 + 1; // MagmaCube - decompile fix
+            debug3 = debug3 + 1;
         }
         this.prefixRegister.put(debug1, debug3);
         ResourceLocation debug4 = new ResourceLocation(String.format("dynamic/%s_%d", debug1, debug3));
diff --git a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
index b40895e102ef36e230208b0f5b4c5cac228966e0..464006ba4d16051d95e9210bedacacfcba01dbc8 100644
--- a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
+++ b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
@@ -138,9 +138,9 @@ public class ModelBakery {
     private static final String MISSING_MODEL_LOCATION_STRING = MISSING_MODEL_LOCATION.toString();
     @VisibleForTesting
     public static final String MISSING_MODEL_MESH = ("{    'textures': {       'particle': '" + MissingTextureAtlasSprite.getLocation().getPath() + "',       'missingno': '" + MissingTextureAtlasSprite.getLocation().getPath() + "'    },    'elements': [         {  'from': [ 0, 0, 0 ],            'to': [ 16, 16, 16 ],            'faces': {                'down':  { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'down',  'texture': '#missingno' },                'up':    { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'up',    'texture': '#missingno' },                'north': { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'north', 'texture': '#missingno' },                'south': { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'south', 'texture': '#missingno' },                'west':  { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'west',  'texture': '#missingno' },                'east':  { 'uv': [ 0, 0, 16, 16 ], 'cullface': 'east',  'texture': '#missingno' }            }        }    ]}").replace('\'', '\"');
-    private static final Map<String, String> BUILTIN_MODELS = Maps.newHashMap((Map)ImmutableMap.of((Object)"missing", (Object)MISSING_MODEL_MESH));
-    private static final Splitter COMMA_SPLITTER = Splitter.on((char)',');
-    private static final Splitter EQUAL_SPLITTER = Splitter.on((char)'=').limit(2);
+    private static final Map<String, String> BUILTIN_MODELS = Maps.newHashMap(ImmutableMap.of("missing", MISSING_MODEL_MESH));
+    private static final Splitter COMMA_SPLITTER = Splitter.on(',');
+    private static final Splitter EQUAL_SPLITTER = Splitter.on('=').limit(2);
     public static final BlockModel GENERATION_MARKER = Util.make(BlockModel.fromString("{\"gui_light\": \"front\"}"), debug0 -> {
         debug0.name = "generation marker";
     });
@@ -162,7 +162,7 @@ public class ModelBakery {
     private final Map<ResourceLocation, BakedModel> bakedTopLevelModels = Maps.newHashMap();
     private final Map<ResourceLocation, Pair<TextureAtlas, TextureAtlas.Preparations>> atlasPreparations;
     private int nextModelGroup = 1;
-    private final Object2IntMap<BlockState> modelGroups = (Object2IntMap)Util.make(new Object2IntOpenHashMap(), debug0 -> debug0.defaultReturnValue(-1));
+    private final Object2IntMap<BlockState> modelGroups = Util.make(new Object2IntOpenHashMap<>(), debug0 -> debug0.defaultReturnValue(-1));
 
     public ModelBakery(ResourceManager debug12, BlockColors debug23, ProfilerFiller debug3, int debug4) {
         this.resourceManager = debug12;
@@ -173,7 +173,7 @@ public class ModelBakery {
             this.loadTopLevel(MISSING_MODEL_LOCATION);
         }
         catch (IOException debug5) {
-            LOGGER.error("Error loading missing model, should never happen :(", (Throwable)debug5);
+            LOGGER.error("Error loading missing model, should never happen :(", debug5);
             throw new RuntimeException(debug5);
         }
         debug3.popPush("static_definitions");
@@ -192,14 +192,14 @@ public class ModelBakery {
         Set<Pair<String, String>> debug5 = Sets.newLinkedHashSet(); // MagmaCube - decompile fix
         Set<Material> set = this.topLevelModels.values().stream().flatMap(debug2 -> debug2.getMaterials(this::getModel, debug5).stream()).collect(Collectors.toSet()); // MagmaCube - decompile fix
         set.addAll(UNREFERENCED_TEXTURES);
-        debug5.stream().filter(debug0 -> !((String)debug0.getSecond()).equals(MISSING_MODEL_LOCATION_STRING)).forEach(debug0 -> LOGGER.warn("Unable to resolve texture reference: {} in {}", debug0.getFirst(), debug0.getSecond()));
+        debug5.stream().filter(debug0 -> !(debug0.getSecond()).equals(MISSING_MODEL_LOCATION_STRING)).forEach(debug0 -> LOGGER.warn("Unable to resolve texture reference: {} in {}", debug0.getFirst(), debug0.getSecond()));
         Map<ResourceLocation, List<Material>> debug7 = set.stream().collect(Collectors.groupingBy(Material::atlasLocation));
         debug3.popPush("stitching");
         this.atlasPreparations = Maps.newHashMap();
         for (Map.Entry<ResourceLocation, List<Material>> debug9 : debug7.entrySet()) {
             TextureAtlas debug10 = new TextureAtlas(debug9.getKey());
             TextureAtlas.Preparations debug11 = debug10.prepareToStitch(this.resourceManager, debug9.getValue().stream().map(Material::texture), debug3, debug4);
-            this.atlasPreparations.put(debug9.getKey(), (Pair<TextureAtlas, TextureAtlas.Preparations>)Pair.of(debug10, debug11)); // MagmaCube - decompile fix
+            this.atlasPreparations.put(debug9.getKey(), Pair.of(debug10, debug11)); // MagmaCube - decompile fix
         }
         debug3.pop();
     }
@@ -207,8 +207,8 @@ public class ModelBakery {
     public AtlasSet uploadTextures(TextureManager debug12, ProfilerFiller debug2) {
         debug2.push("atlas");
         for (Pair<TextureAtlas, TextureAtlas.Preparations> debug4 : this.atlasPreparations.values()) {
-            TextureAtlas debug5 = (TextureAtlas)debug4.getFirst();
-            TextureAtlas.Preparations debug6 = (TextureAtlas.Preparations)debug4.getSecond();
+            TextureAtlas debug5 = debug4.getFirst();
+            TextureAtlas.Preparations debug6 = debug4.getSecond();
             debug5.reload(debug6);
             debug12.register(debug5.location(), debug5);
             debug12.bind(debug5.location());
@@ -219,13 +219,13 @@ public class ModelBakery {
         this.topLevelModels.keySet().forEach(debug1 -> {
             BakedModel debug22 = null; // MagmaCube - decompile fix
             try {
-                debug22 = this.bake((ResourceLocation)debug1, BlockModelRotation.X0_Y0); // MagmaCube - decompile fix
+                debug22 = this.bake(debug1, BlockModelRotation.X0_Y0); // MagmaCube - decompile fix
             }
             catch (Exception debug3) {
-                LOGGER.warn("Unable to bake model: '{}': {}", debug1, (Object)debug3);
+                LOGGER.warn("Unable to bake model: '{}': {}", debug1, debug3);
             }
             if (debug22 != null) { // MagmaCube - decompile fix
-                this.bakedTopLevelModels.put((ResourceLocation)debug1, debug22); // MagmaCube - decompile fix
+                this.bakedTopLevelModels.put(debug1, debug22); // MagmaCube - decompile fix
             }
         });
         debug2.pop();
@@ -234,13 +234,13 @@ public class ModelBakery {
 
     private static Predicate<BlockState> predicate(StateDefinition<Block, BlockState> debug0, String debug1) {
         Map<Property<?>, Comparable<?>> debug22 = Maps.newHashMap(); // MagmaCube - decompile fix
-        for (String debug4 : COMMA_SPLITTER.split((CharSequence)debug1)) {
-            Iterator debug5 = EQUAL_SPLITTER.split((CharSequence)debug4).iterator();
+        for (String debug4 : COMMA_SPLITTER.split(debug1)) {
+            Iterator<String> debug5 = EQUAL_SPLITTER.split(debug4).iterator();
             if (!debug5.hasNext()) continue;
-            String debug6 = (String)debug5.next();
+            String debug6 = debug5.next();
             Property<?> debug7 = debug0.getProperty(debug6);
             if (debug7 != null && debug5.hasNext()) {
-                String debug8 = (String)debug5.next();
+                String debug8 = debug5.next();
                 Comparable<?> debug9 = ModelBakery.getValueHelper(debug7, debug8); // MagmaCube - decompile fix
                 if (debug9 != null) {
                     debug22.put(debug7, debug9);
@@ -256,8 +256,8 @@ public class ModelBakery {
             if (debug2 == null || debug3 != debug2.getBlock()) {
                 return false;
             }
-            for (Map.Entry debug4 : debug22.entrySet()) {
-                if (Objects.equals(debug2.getValue((Property)debug4.getKey()), debug4.getValue())) continue;
+            for (Map.Entry<Property<?>, Comparable<?>> debug4 : debug22.entrySet()) {
+                if (Objects.equals(debug2.getValue(debug4.getKey()), debug4.getValue())) continue;
                 return false;
             }
             return true;
@@ -266,7 +266,7 @@ public class ModelBakery {
 
     @Nullable
     static <T extends Comparable<T>> T getValueHelper(Property<T> debug0, String debug1) {
-        return (T)((Comparable)debug0.getValue(debug1).orElse(null));
+        return debug0.getValue(debug1).orElse(null);
     }
 
     /*
@@ -292,7 +292,7 @@ public class ModelBakery {
                 this.unbakedCache.put(debug3, debug2);
             }
             catch (Exception debug4) {
-                LOGGER.warn("Unable to load model: '{}' referenced from: {}: {}", (Object)debug3, (Object)debug1, (Object)debug4);
+                LOGGER.warn("Unable to load model: '{}' referenced from: {}: {}", debug3, debug1, debug4);
                 this.unbakedCache.put(debug3, debug2);
             }
             finally {
@@ -315,24 +315,23 @@ public class ModelBakery {
             this.unbakedCache.put(debug3, debug4);
         } else {
             ResourceLocation debug3 = new ResourceLocation(debug12.getNamespace(), debug12.getPath());
-            StateDefinition debug4 = Optional.ofNullable(STATIC_DEFINITIONS.get(debug3)).orElseGet(() -> Registry.BLOCK.get(debug3).getStateDefinition());
+            StateDefinition<Block, BlockState> debug4 = Optional.ofNullable(STATIC_DEFINITIONS.get(debug3)).orElseGet(() -> Registry.BLOCK.get(debug3).getStateDefinition());
             this.context.setDefinition(debug4);
-            ImmutableList debug52 = ImmutableList.copyOf(this.blockColors.getColoringProperties((Block)debug4.getOwner()));
+            ImmutableList<Property<?>> debug52 = ImmutableList.copyOf(this.blockColors.getColoringProperties(debug4.getOwner()));
             ImmutableList<BlockState> debug62 = debug4.getPossibleStates(); // MagmaCube - decompile fix
             HashMap<ModelResourceLocation, BlockState> debug7 = Maps.newHashMap(); // MagmaCube - decompile fix
             debug62.forEach(debug2 -> debug7.put(BlockModelShaper.stateToModelLocation(debug3, debug2), debug2));
-            HashMap debug8 = Maps.newHashMap();
+            HashMap<BlockState, Pair<UnbakedModel, Supplier<ModelGroupKey>>> debug8 = Maps.newHashMap();
             ResourceLocation debug9 = new ResourceLocation(debug12.getNamespace(), "blockstates/" + debug12.getPath() + ".json");
             UnbakedModel debug10 = this.unbakedCache.get(MISSING_MODEL_LOCATION);
-            ModelGroupKey debug11 = new ModelGroupKey((List<UnbakedModel>)ImmutableList.of(debug10), (List<Object>)ImmutableList.of()); // MagmaCube - decompile fix
+            ModelGroupKey debug11 = new ModelGroupKey(ImmutableList.of(debug10), ImmutableList.of()); // MagmaCube - decompile fix
             Pair<UnbakedModel, Supplier<ModelGroupKey>> debug122 = Pair.of(debug10, () -> debug11); // MagmaCube - decompile fix
             try {
-                List debug13;
+                List<Pair<String, BlockModelDefinition>> debug13;
                 try {
                     debug13 = this.resourceManager.getResources(debug9).stream().map(debug1 -> {
-                        try (InputStream debug2 = debug1.getInputStream();){
-                            Pair pair = Pair.of((Object)debug1.getSourceName(), (Object)BlockModelDefinition.fromStream(this.context, new InputStreamReader(debug2, StandardCharsets.UTF_8)));
-                            return pair;
+                        try (InputStream debug2 = debug1.getInputStream()){
+                            return Pair.of(debug1.getSourceName(), BlockModelDefinition.fromStream(this.context, new InputStreamReader(debug2, StandardCharsets.UTF_8)));
                         }
                         catch (Exception debug222) { // MagmaCube - decompile fix
                             throw new BlockStateDefinitionException(String.format("Exception loading blockstate definition: '%s' in resourcepack: '%s': %s", debug1.getLocation(), debug1.getSourceName(), debug222.getMessage())); // MagmaCube - decompile fix
@@ -340,52 +339,52 @@ public class ModelBakery {
                     }).collect(Collectors.toList());
                 }
                 catch (IOException debug14) {
-                    LOGGER.warn("Exception loading blockstate definition: {}: {}", (Object)debug9, (Object)debug14);
+                    LOGGER.warn("Exception loading blockstate definition: {}: {}", debug9, debug14);
                     // MagmaCube start - decompile fix
                     Map<ModelGroupKey, Set<BlockState>> debug15 = Maps.newHashMap(); // MagmaCube - decompile fix
                     debug7.forEach((debug5, debug6) -> {
-                        Pair debug72 = (Pair)debug8.get(debug6);
+                        Pair<UnbakedModel, Supplier<ModelGroupKey>> debug72 = debug8.get(debug6);
                         if (debug72 == null) {
-                            LOGGER.warn("Exception loading blockstate definition: '{}' missing model for variant: '{}'", (Object)debug9, debug5);
+                            LOGGER.warn("Exception loading blockstate definition: '{}' missing model for variant: '{}'", debug9, debug5);
                             debug72 = debug122;
                         }
-                        this.cacheAndQueueDependencies((ResourceLocation)debug5, (UnbakedModel)debug72.getFirst());
+                        this.cacheAndQueueDependencies(debug5, debug72.getFirst());
                         try {
-                            ModelGroupKey debug82 = (ModelGroupKey)((Supplier)debug72.getSecond()).get();
+                            ModelGroupKey debug82 = (debug72.getSecond()).get();
                             debug15.computeIfAbsent(debug82, debug0 -> Sets.newIdentityHashSet()).add(debug6);
                         }
                         catch (Exception debug82) {
-                            LOGGER.warn("Exception evaluating model definition: '{}'", debug5, (Object)debug82);
+                            LOGGER.warn("Exception evaluating model definition: '{}'", debug5, debug82);
                         }
                     });
                     debug15.forEach((debug1, debug2) -> {
-                        Iterator debug32 = debug2.iterator();
+                        Iterator<BlockState> debug32 = debug2.iterator();
                         while (debug32.hasNext()) {
-                            BlockState debug42 = (BlockState)debug32.next();
+                            BlockState debug42 = debug32.next();
                             if (debug42.getRenderShape() == RenderShape.MODEL) continue;
                             debug32.remove();
                             this.modelGroups.put(debug42, 0);
                             // MagmaCube end - decompile fix
                         }
                         if (debug2.size() > 1) {
-                            this.registerModelGroup((Iterable<BlockState>)debug2);
+                            this.registerModelGroup(debug2);
                         }
                     });
                     return;
                 }
-                Iterator iterator = debug13.iterator();
+                Iterator<Pair<String, BlockModelDefinition>> iterator = debug13.iterator();
                 while (iterator.hasNext()) {
                     MultiPart debug18;
-                    Pair debug15 = (Pair)iterator.next();
-                    BlockModelDefinition debug16 = (BlockModelDefinition)debug15.getSecond();
+                    Pair<String, BlockModelDefinition> debug15 = iterator.next();
+                    BlockModelDefinition debug16 = debug15.getSecond();
                     Map<BlockState, Pair<UnbakedModel, Supplier<ModelGroupKey>>> debug17 = Maps.newIdentityHashMap(); // MagmaCube - decompile fix
                     if (debug16.isMultiPart()) {
                         debug18 = debug16.getMultiPart();
-                        debug62.forEach(arg_0 -> ModelBakery.lambda$loadModel$19(debug17, debug18, (List)debug52, arg_0));
+                        debug62.forEach(arg_0 -> ModelBakery.lambda$loadModel$19(debug17, debug18, debug52, arg_0));
                     } else {
                         debug18 = null;
                     }
-                    debug16.getVariants().forEach((arg_0, arg_1) -> ModelBakery.lambda$loadModel$23(debug62, debug4, debug17, (List)debug52, debug18, debug122, debug16, debug9, debug15, arg_0, arg_1));
+                    debug16.getVariants().forEach((arg_0, arg_1) -> ModelBakery.lambda$loadModel$23(debug62, debug4, debug17, debug52, debug18, debug122, debug16, debug9, debug15, arg_0, arg_1));
                     debug8.putAll(debug17);
                 }
             }
@@ -399,31 +398,31 @@ public class ModelBakery {
                 // MagmaCube start - decompile fix
                 Map<ModelGroupKey, Set<BlockState>> debug20 = Maps.newHashMap();
                 debug7.forEach((debug5, debug6) -> {
-                    Pair<UnbakedModel, Supplier<ModelGroupKey>> debug72 = (Pair)debug8.get(debug6);
+                    Pair<UnbakedModel, Supplier<ModelGroupKey>> debug72 = debug8.get(debug6);
                     if (debug72 == null) {
-                        LOGGER.warn("Exception loading blockstate definition: '{}' missing model for variant: '{}'", (Object)debug9, debug5);
+                        LOGGER.warn("Exception loading blockstate definition: '{}' missing model for variant: '{}'", debug9, debug5);
                         debug72 = debug122;
                     }
-                    this.cacheAndQueueDependencies((ResourceLocation)debug5, (UnbakedModel)debug72.getFirst());
+                    this.cacheAndQueueDependencies(debug5, debug72.getFirst());
                     try {
-                        ModelGroupKey debug82 = (ModelGroupKey)((Supplier)debug72.getSecond()).get();
+                        ModelGroupKey debug82 = (debug72.getSecond()).get();
                         debug20.computeIfAbsent(debug82, debug0 -> Sets.newIdentityHashSet()).add(debug6);
                     }
                     catch (Exception debug82) {
-                        LOGGER.warn("Exception evaluating model definition: '{}'", debug5, (Object)debug82);
+                        LOGGER.warn("Exception evaluating model definition: '{}'", debug5, debug82);
                     }
                 });
                 debug20.forEach((debug1, debug2) -> {
-                    Iterator debug32 = debug2.iterator();
+                    Iterator<BlockState> debug32 = debug2.iterator();
                     while (debug32.hasNext()) {
-                        BlockState debug42 = (BlockState)debug32.next();
+                        BlockState debug42 = debug32.next();
                         if (debug42.getRenderShape() == RenderShape.MODEL) continue;
                         debug32.remove();
                         this.modelGroups.put(debug42, 0);
                         // MagmaCube end - decompile fix
                     }
                     if (debug2.size() > 1) {
-                        this.registerModelGroup((Iterable<BlockState>)debug2);
+                        this.registerModelGroup(debug2);
                     }
                 });
             }
@@ -450,14 +449,14 @@ public class ModelBakery {
     public BakedModel bake(ResourceLocation debug1, ModelState debug2) {
         Object debug5;
         Triple debug3 = Triple.of((Object)debug1, (Object)debug2.getRotation(), (Object)debug2.isUvLocked());
-        if (this.bakedCache.containsKey((Object)debug3)) {
-            return this.bakedCache.get((Object)debug3);
+        if (this.bakedCache.containsKey(debug3)) {
+            return this.bakedCache.get(debug3);
         }
         if (this.atlasSet == null) {
             throw new IllegalStateException("bake called too early");
         }
         UnbakedModel debug4 = this.getModel(debug1);
-        if (debug4 instanceof BlockModel && ((BlockModel)(debug5 = (BlockModel)debug4)).getRootModel() == GENERATION_MARKER) {
+        if (debug4 instanceof BlockModel && ((BlockModel)(debug5 = debug4)).getRootModel() == GENERATION_MARKER) {
             return ITEM_MODEL_GENERATOR.generateBlockModel(this.atlasSet::getSprite, (BlockModel)debug5).bake(this, (BlockModel)debug5, this.atlasSet::getSprite, debug2, debug1, false);
         }
         debug5 = debug4.bake(this, this.atlasSet::getSprite, debug2, debug1);
@@ -509,10 +508,10 @@ public class ModelBakery {
             debug2 = new InputStreamReader(debug3.getInputStream(), StandardCharsets.UTF_8);
         }
         BlockModel debug5 = BlockModel.fromStream(debug2); // MagmaCube - decompile fix
-        ((BlockModel)debug5).name = debug1.toString();
-        IOUtils.closeQuietly((Reader)debug2);
-        IOUtils.closeQuietly((Closeable)debug3);
-        return (BlockModel) debug5; // MagmaCube - decompile fix
+        debug5.name = debug1.toString();
+        IOUtils.closeQuietly(debug2);
+        IOUtils.closeQuietly(debug3);
+        return debug5; // MagmaCube - decompile fix
     }
 
     public Map<ResourceLocation, BakedModel> getBakedTopLevelModels() {
@@ -529,12 +528,12 @@ public class ModelBakery {
                 Pair debug72 = debug2.put(debug6, Pair.of(debug10, () -> ModelGroupKey.create(debug6, debug10, debug3))); // MagmaCube - decompile fix
                 if (debug72 != null && debug72.getFirst() != debug4) { // MagmaCube - decompile fix
                     debug2.put(debug6, debug5);
-                    throw new RuntimeException("Overlapping definition with: " + (String)debug62.getVariants().entrySet().stream().filter(debug12 -> debug12.getValue() == debug8.getFirst()).findFirst().get().getKey()); // MagmaCube - decompile fix
+                    throw new RuntimeException("Overlapping definition with: " + debug62.getVariants().entrySet().stream().filter(debug12 -> debug12.getValue() == debug8.getFirst()).findFirst().get().getKey()); // MagmaCube - decompile fix
                 }
             });
         }
         catch (Exception debug11) {
-            LOGGER.warn("Exception loading blockstate definition: '{}' in resourcepack: '{}' for variant: '{}': {}", (Object)debug7, debug8.getFirst(), (Object)debug9, (Object)debug11.getMessage());
+            LOGGER.warn("Exception loading blockstate definition: '{}' in resourcepack: '{}' for variant: '{}': {}", debug7, debug8.getFirst(), debug9, debug11.getMessage());
         }
     }
 
@@ -568,18 +567,18 @@ public class ModelBakery {
 
         public static ModelGroupKey create(BlockState debug0, MultiPart debug1, Collection<Property<?>> debug22) {
             StateDefinition<Block, BlockState> debug3 = debug0.getBlock().getStateDefinition();
-            List debug4 = (List)debug1.getSelectors().stream().filter(debug2 -> debug2.getPredicate(debug3).test(debug0)).map(Selector::getVariant).collect(ImmutableList.toImmutableList());
+            List debug4 = debug1.getSelectors().stream().filter(debug2 -> debug2.getPredicate(debug3).test(debug0)).map(Selector::getVariant).collect(ImmutableList.toImmutableList());
             List<Object> debug5 = ModelGroupKey.getColoringValues(debug0, debug22);
             return new ModelGroupKey(debug4, debug5);
         }
 
         public static ModelGroupKey create(BlockState debug0, UnbakedModel debug1, Collection<Property<?>> debug2) {
             List<Object> debug3 = ModelGroupKey.getColoringValues(debug0, debug2);
-            return new ModelGroupKey((List<UnbakedModel>)ImmutableList.of(debug1), debug3); // MagmaCube - decompile fix
+            return new ModelGroupKey(ImmutableList.of(debug1), debug3); // MagmaCube - decompile fix
         }
 
         private static List<Object> getColoringValues(BlockState debug0, Collection<Property<?>> debug1) {
-            return (List)debug1.stream().map(debug0::getValue).collect(ImmutableList.toImmutableList());
+            return debug1.stream().map(debug0::getValue).collect(ImmutableList.toImmutableList());
         }
     }
 
diff --git a/src/main/java/net/minecraft/client/resources/model/ModelManager.java b/src/main/java/net/minecraft/client/resources/model/ModelManager.java
index cf03527be836e1d4e33f85cdda6d77c37da131b6..6acc8d085968ac405df7577bff27ed4419355e1f 100644
--- a/src/main/java/net/minecraft/client/resources/model/ModelManager.java
+++ b/src/main/java/net/minecraft/client/resources/model/ModelManager.java
@@ -34,8 +34,8 @@ public class ModelManager extends SimplePreparableReloadListener<ModelBakery> im
         this.blockModelShaper = new BlockModelShaper(this);
     }
     
-    public BakedModel getModel(final ModelResourceLocation debug1) {
-        return this.bakedRegistry.getOrDefault(debug1, this.missingModel);
+    public BakedModel getModel(final ModelResourceLocation modelResourceLocation) {
+        return this.bakedRegistry.getOrDefault(modelResourceLocation, this.missingModel);
     }
     
     public BakedModel getMissingModel() {
diff --git a/src/main/java/net/minecraft/client/resources/sounds/BiomeAmbientSoundsHandler.java b/src/main/java/net/minecraft/client/resources/sounds/BiomeAmbientSoundsHandler.java
index 7983afbd99bdc24636c7dfc6865d9b4a9bd40c72..3db37aeb34a1de8ea22d3a113509098693e692f9 100644
--- a/src/main/java/net/minecraft/client/resources/sounds/BiomeAmbientSoundsHandler.java
+++ b/src/main/java/net/minecraft/client/resources/sounds/BiomeAmbientSoundsHandler.java
@@ -73,10 +73,10 @@ public class BiomeAmbientSoundsHandler implements AmbientSoundHandler
             BlockPos debug7 = new BlockPos(this.player.getX() + this.random.nextInt(debug6) - debug1.getBlockSearchExtent(), this.player.getEyeY() + this.random.nextInt(debug6) - debug1.getBlockSearchExtent(), this.player.getZ() + this.random.nextInt(debug6) - debug1.getBlockSearchExtent());
             int debug8 = debug5.getBrightness(LightLayer.SKY, debug7);
             if (debug8 > 0) {
-                this.moodiness -= debug8 / debug5.getMaxLightLevel() * 0.001f;
+                this.moodiness -= (float)debug8 / (float)debug5.getMaxLightLevel() * 0.001f;
             }
             else {
-                this.moodiness -= (debug5.getBrightness(LightLayer.BLOCK, debug7) - 1) / debug1.getTickDelay();
+                this.moodiness -= (float)(debug5.getBrightness(LightLayer.BLOCK, debug7) - 1) / (float)debug1.getTickDelay();
             }
             if (this.moodiness >= 1.0f) {
                 double debug9 = debug7.getX() + 0.5;
diff --git a/src/main/java/net/minecraft/core/DefaultedRegistry.java b/src/main/java/net/minecraft/core/DefaultedRegistry.java
index 0d5d4d2c6eb7e67c6cc7aab520562cdec609b8f7..27587ff2cac1a36c65ac85b7ac798db517280195 100644
--- a/src/main/java/net/minecraft/core/DefaultedRegistry.java
+++ b/src/main/java/net/minecraft/core/DefaultedRegistry.java
@@ -19,36 +19,36 @@ public class DefaultedRegistry<T> extends MappedRegistry<T>
     }
     
     @Override
-    public <V extends T> V registerMapping(final int debug1, final ResourceKey<T> debug2, final V debug3, final Lifecycle debug4) {
-        if (this.defaultKey.equals(debug2.location())) {
-            this.defaultValue = debug3;
+    public <V extends T> V registerMapping(final int id, final ResourceKey<T> resourceKey, final V instance, final Lifecycle lifecycle) {
+        if (this.defaultKey.equals(resourceKey.location())) {
+            this.defaultValue = instance;
         }
-        return super.registerMapping(debug1, debug2, debug3, debug4);
+        return super.registerMapping(id, resourceKey, instance, lifecycle);
     }
     
     @Override
-    public int getId(@Nullable final T debug1) {
-        final int debug2 = super.getId(debug1);
+    public int getId(@Nullable final T registry) {
+        final int debug2 = super.getId(registry);
         return (debug2 == -1) ? super.getId(this.defaultValue) : debug2;
     }
     
     @Nonnull
     @Override
-    public ResourceLocation getKey(final T debug1) {
-        final ResourceLocation debug2 = super.getKey(debug1);
+    public ResourceLocation getKey(final T value) {
+        final ResourceLocation debug2 = super.getKey(value);
         return (debug2 == null) ? this.defaultKey : debug2;
     }
     
     @Nonnull
     @Override
-    public T get(@Nullable final ResourceLocation debug1) {
-        final T debug2 = super.get(debug1);
+    public T get(@Nullable final ResourceLocation resourceLocation) {
+        final T debug2 = super.get(resourceLocation);
         return (debug2 == null) ? this.defaultValue : debug2;
     }
     
     @Override
-    public Optional<T> getOptional(@Nullable final ResourceLocation debug1) {
-        return Optional.ofNullable(super.get(debug1));
+    public Optional<T> getOptional(@Nullable final ResourceLocation resourceLocation) {
+        return Optional.ofNullable(super.get(resourceLocation));
     }
     
     @Nonnull
diff --git a/src/main/java/net/minecraft/core/MappedRegistry.java b/src/main/java/net/minecraft/core/MappedRegistry.java
index 780596140bac8bb521c844097c20cda42f984aa4..6388da3c6c900d884d12060cecf90ecc85bf6ead 100644
--- a/src/main/java/net/minecraft/core/MappedRegistry.java
+++ b/src/main/java/net/minecraft/core/MappedRegistry.java
@@ -59,83 +59,83 @@ public class MappedRegistry<T> extends WritableRegistry<T>
         this.elementsLifecycle = debug2;
     }
     
-    public static <T> MapCodec<RegistryEntry<T>> withNameAndId(final ResourceKey<? extends Registry<T>> debug0, final MapCodec<T> debug1) {
-        return (MapCodec<RegistryEntry<T>>)RecordCodecBuilder.<RegistryEntry<T>>mapCodec(debug2 -> debug2.group(ResourceLocation.CODEC.xmap(ResourceKey.elementKey(debug0), ResourceKey::location).fieldOf("name").forGetter(debug0l -> debug0l.key), Codec.INT.fieldOf("id").forGetter(debug0l -> debug0l.id), debug1.forGetter(debug0l -> debug0l.value)).apply(debug2, RegistryEntry::new)); // MagmaCube - decompile fix
+    public static <T> MapCodec<RegistryEntry<T>> withNameAndId(final ResourceKey<? extends Registry<T>> registryKey, final MapCodec<T> mapCodec) {
+        return RecordCodecBuilder.mapCodec(builder -> builder.group(ResourceLocation.CODEC.xmap(ResourceKey.elementKey(registryKey), ResourceKey::location).fieldOf("name").forGetter(debug0l -> debug0l.key), Codec.INT.fieldOf("id").forGetter(debug0l -> debug0l.id), mapCodec.forGetter(debug0l -> debug0l.value)).apply(builder, RegistryEntry::new)); // MagmaCube - decompile fix
     }
     
     @Override
-    public <V extends T> V registerMapping(final int debug1, final ResourceKey<T> debug2, final V debug3, final Lifecycle debug4) {
-        return this.registerMapping(debug1, debug2, debug3, debug4, true);
+    public <V extends T> V registerMapping(final int id, final ResourceKey<T> resourceKey, final V instance, final Lifecycle lifecycle) {
+        return this.registerMapping(id, resourceKey, instance, lifecycle, true);
     }
     
-    private <V extends T> V registerMapping(final int debug1, final ResourceKey<T> debug2, final V debug3, final Lifecycle debug4, final boolean debug5) {
-        Validate.notNull((Object)debug2);
-        Validate.notNull((Object)debug3);
-        this.byId.size(Math.max(this.byId.size(), debug1 + 1));
-        this.byId.set(debug1, debug3); // MagmaCube - decompile fix
-        this.toId.put(debug3, debug1); // MagmaCube - decompile fix
+    private <V extends T> V registerMapping(final int id, final ResourceKey<T> registryKey, final V instance, final Lifecycle lifecycle, final boolean logDuplicateKeys) {
+        Validate.notNull((Object)registryKey);
+        Validate.notNull((Object)instance);
+        this.byId.size(Math.max(this.byId.size(), id + 1));
+        this.byId.set(id, instance); // MagmaCube - decompile fix
+        this.toId.put(instance, id); // MagmaCube - decompile fix
         this.randomCache = null;
-        if (debug5 && this.keyStorage.containsKey((Object)debug2)) {
-            MappedRegistry.LOGGER.debug("Adding duplicate key '{}' to registry", (Object)debug2);
+        if (logDuplicateKeys && this.keyStorage.containsKey((Object)registryKey)) {
+            MappedRegistry.LOGGER.debug("Adding duplicate key '{}' to registry", (Object)registryKey);
         }
-        if (this.storage.containsValue(debug3)) { // MagmaCube - decompile fix
-            MappedRegistry.LOGGER.error("Adding duplicate value '{}' to registry", (Object)debug3);
+        if (this.storage.containsValue(instance)) { // MagmaCube - decompile fix
+            MappedRegistry.LOGGER.error("Adding duplicate value '{}' to registry", (Object)instance);
         }
-        this.storage.put(debug2.location(), debug3); // MagmaCube - decompile fix
-        this.keyStorage.put(debug2, debug3); // MagmaCube - decompile fix
-        this.lifecycles.put(debug3, debug4);
-        this.elementsLifecycle = this.elementsLifecycle.add(debug4);
-        if (this.nextId <= debug1) {
-            this.nextId = debug1 + 1;
+        this.storage.put(registryKey.location(), instance); // MagmaCube - decompile fix
+        this.keyStorage.put(registryKey, instance); // MagmaCube - decompile fix
+        this.lifecycles.put(instance, lifecycle);
+        this.elementsLifecycle = this.elementsLifecycle.add(lifecycle);
+        if (this.nextId <= id) {
+            this.nextId = id + 1;
         }
-        return debug3;
+        return instance;
     }
     
     @Override
-    public <V extends T> V register(final ResourceKey<T> debug1, final V debug2, final Lifecycle debug3) {
-        return this.registerMapping(this.nextId, debug1, debug2, debug3);
+    public <V extends T> V register(final ResourceKey<T> resourceKey, final V instance, final Lifecycle lifecycle) {
+        return this.registerMapping(this.nextId, resourceKey, instance, lifecycle);
     }
     
     @Override
-    public <V extends T> V registerOrOverride(final OptionalInt debug1, final ResourceKey<T> debug2, final V debug3, final Lifecycle debug4) {
-        Validate.notNull((Object)debug2);
-        Validate.notNull((Object)debug3);
-        final T debug5 = (T)this.keyStorage.get((Object)debug2);
+    public <V extends T> V registerOrOverride(final OptionalInt optionalInt, final ResourceKey<T> resourceKey, final V value, final Lifecycle lifecycle) {
+        Validate.notNull((Object) resourceKey);
+        Validate.notNull((Object) value);
+        final T debug5 = (T)this.keyStorage.get((Object) resourceKey);
         int debug6;
         if (debug5 == null) {
-            debug6 = (debug1.isPresent() ? debug1.getAsInt() : this.nextId);
+            debug6 = (optionalInt.isPresent() ? optionalInt.getAsInt() : this.nextId);
         }
         else {
             debug6 = this.toId.getInt((Object)debug5);
-            if (debug1.isPresent() && debug1.getAsInt() != debug6) {
+            if (optionalInt.isPresent() && optionalInt.getAsInt() != debug6) {
                 throw new IllegalStateException("ID mismatch");
             }
             this.toId.removeInt((Object)debug5);
             this.lifecycles.remove(debug5);
         }
-        return this.registerMapping(debug6, debug2, debug3, debug4, false);
+        return this.registerMapping(debug6, resourceKey, value, lifecycle, false);
     }
     
     @Nullable
     @Override
-    public ResourceLocation getKey(final T debug1) {
-        return (ResourceLocation)this.storage.inverse().get((Object)debug1);
+    public ResourceLocation getKey(final T value) {
+        return (ResourceLocation)this.storage.inverse().get((Object) value);
     }
     
     @Override
-    public Optional<ResourceKey<T>> getResourceKey(final T debug1) {
-        return Optional.ofNullable(this.keyStorage.inverse().get((Object)debug1));
+    public Optional<ResourceKey<T>> getResourceKey(final T value) {
+        return Optional.ofNullable(this.keyStorage.inverse().get((Object) value));
     }
     
     @Override
-    public int getId(@Nullable final T debug1) {
-        return this.toId.getInt((Object)debug1);
+    public int getId(@Nullable final T registry) {
+        return this.toId.getInt((Object) registry);
     }
     
     @Nullable
     @Override
-    public T get(@Nullable final ResourceKey<T> debug1) {
-        return (T)this.keyStorage.get((Object)debug1);
+    public T get(@Nullable final ResourceKey<T> resourceKey) {
+        return (T)this.keyStorage.get((Object) resourceKey);
     }
     
     @Nullable
@@ -146,8 +146,8 @@ public class MappedRegistry<T> extends WritableRegistry<T>
         return (T)this.byId.get(debug1);
     }
     
-    public Lifecycle lifecycle(final T debug1) {
-        return this.lifecycles.get(debug1);
+    public Lifecycle lifecycle(final T input) {
+        return this.lifecycles.get(input);
     }
     
     @Override
@@ -161,8 +161,8 @@ public class MappedRegistry<T> extends WritableRegistry<T>
     
     @Nullable
     @Override
-    public T get(@Nullable final ResourceLocation debug1) {
-        return (T)this.storage.get((Object)debug1);
+    public T get(@Nullable final ResourceLocation resourceLocation) {
+        return (T)this.storage.get((Object) resourceLocation);
     }
     
     @Override
@@ -188,8 +188,8 @@ public class MappedRegistry<T> extends WritableRegistry<T>
     }
     
     @Override
-    public boolean containsKey(final ResourceLocation debug1) {
-        return this.storage.containsKey((Object)debug1);
+    public boolean containsKey(final ResourceLocation resourceLocation) {
+        return this.storage.containsKey((Object) resourceLocation);
     }
     
     public static <T> Codec<MappedRegistry<T>> networkCodec(final ResourceKey<? extends Registry<T>> debug0, final Lifecycle debug1, final Codec<T> debug2) {
diff --git a/src/main/java/net/minecraft/core/Registry.java b/src/main/java/net/minecraft/core/Registry.java
index b773fbee47ee5541a06041964e51db4c44639faf..96d95d4b4d2866bc7810fe6276fae4b3d65fb585 100644
--- a/src/main/java/net/minecraft/core/Registry.java
+++ b/src/main/java/net/minecraft/core/Registry.java
@@ -226,51 +226,51 @@ IdMap<T> {
     private final ResourceKey<? extends Registry<T>> key;
     private final Lifecycle lifecycle;
 
-    private static <T> ResourceKey<Registry<T>> createRegistryKey(String debug0) {
-        return ResourceKey.createRegistryKey(new ResourceLocation(debug0));
+    private static <T> ResourceKey<Registry<T>> createRegistryKey(String location) {
+        return ResourceKey.createRegistryKey(new ResourceLocation(location));
     }
 
-    public static <T extends WritableRegistry<?>> void checkRegistry(WritableRegistry<T> debug0) {
-        debug0.forEach(debug1 -> {
-            if (debug1.keySet().isEmpty()) {
-                LOGGER.error("Registry '{}' was empty after loading", (Object)debug0.getKey(debug1));
+    public static <T extends WritableRegistry<?>> void checkRegistry(WritableRegistry<T> registry) {
+        registry.forEach(object -> {
+            if (object.keySet().isEmpty()) {
+                LOGGER.error("Registry '{}' was empty after loading", registry.getKey(object));
                 if (SharedConstants.IS_RUNNING_IN_IDE) {
-                    throw new IllegalStateException("Registry: '" + debug0.getKey(debug1) + "' is empty, not allowed, fix me!");
+                    throw new IllegalStateException("Registry: '" + registry.getKey(object) + "' is empty, not allowed, fix me!");
                 }
             }
-            if (debug1 instanceof DefaultedRegistry) {
-                ResourceLocation debug2 = ((DefaultedRegistry)debug1).getDefaultKey();
-                Validate.notNull(debug1.get(debug2), (String)("Missing default of DefaultedMappedRegistry: " + debug2), (Object[])new Object[0]);
+            if (object instanceof DefaultedRegistry) {
+                ResourceLocation debug2 = ((DefaultedRegistry<?>)object).getDefaultKey();
+                Validate.notNull(object.get(debug2), "Missing default of DefaultedMappedRegistry: " + debug2);
             }
         });
     }
 
-    private static <T> Registry<T> registerSimple(ResourceKey<? extends Registry<T>> debug0, Supplier<T> debug1) {
-        return Registry.registerSimple(debug0, Lifecycle.experimental(), debug1);
+    private static <T> Registry<T> registerSimple(ResourceKey<? extends Registry<T>> resourceKey, Supplier<T> supplier) {
+        return Registry.registerSimple(resourceKey, Lifecycle.experimental(), supplier);
     }
 
-    private static <T> DefaultedRegistry<T> registerDefaulted(ResourceKey<? extends Registry<T>> debug0, String debug1, Supplier<T> debug2) {
-        return Registry.registerDefaulted(debug0, debug1, Lifecycle.experimental(), debug2);
+    private static <T> DefaultedRegistry<T> registerDefaulted(ResourceKey<? extends Registry<T>> resourceKey, String s, Supplier<T> supplier) {
+        return Registry.registerDefaulted(resourceKey, s, Lifecycle.experimental(), supplier);
     }
 
-    private static <T> Registry<T> registerSimple(ResourceKey<? extends Registry<T>> debug0, Lifecycle debug1, Supplier<T> debug2) {
-        return Registry.internalRegister(debug0, new MappedRegistry(debug0, debug1), debug2, debug1);
+    private static <T> Registry<T> registerSimple(ResourceKey<? extends Registry<T>> resourceKey, Lifecycle lifecycle, Supplier<T> supplier) {
+        return Registry.internalRegister(resourceKey, new MappedRegistry<>(resourceKey, lifecycle), supplier, lifecycle);
     }
 
     private static <T> DefaultedRegistry<T> registerDefaulted(ResourceKey<? extends Registry<T>> debug0, String debug1, Lifecycle debug2, Supplier<T> debug3) {
-        return Registry.internalRegister(debug0, new DefaultedRegistry(debug1, debug0, debug2), debug3, debug2);
+        return Registry.internalRegister(debug0, new DefaultedRegistry<>(debug1, debug0, debug2), debug3, debug2);
     }
 
-    private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> debug0, R debug1, Supplier<T> debug2, Lifecycle debug3) {
-        ResourceLocation debug4 = debug0.location();
-        LOADERS.put(debug4, debug2);
-        WritableRegistry<WritableRegistry<?>> debug5 = WRITABLE_REGISTRY;
-        return debug5.register((ResourceKey<WritableRegistry<?>>) (Object) debug0, debug1, debug3); // MagmaCube - decompile fix
+    private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> resourceKey, R instance, Supplier<T> supplier, Lifecycle lifecycle) {
+        ResourceLocation resourceLocation = resourceKey.location();
+        LOADERS.put(resourceLocation, supplier);
+        WritableRegistry<WritableRegistry<?>> writableRegistry = WRITABLE_REGISTRY;
+        return writableRegistry.register((ResourceKey<WritableRegistry<?>>) (Object) resourceKey, instance, lifecycle);
     }
 
-    protected Registry(ResourceKey<? extends Registry<T>> debug1, Lifecycle debug2) {
-        this.key = debug1;
-        this.lifecycle = debug2;
+    protected Registry(ResourceKey<? extends Registry<T>> registryKey, Lifecycle lifecycle) {
+        this.key = registryKey;
+        this.lifecycle = lifecycle;
     }
 
     public ResourceKey<? extends Registry<T>> key() {
@@ -278,74 +278,74 @@ IdMap<T> {
     }
 
     public String toString() {
-        return "Registry[" + this.key + " (" + (Object)this.lifecycle + ")]";
+        return "Registry[" + this.key + " (" + this.lifecycle + ")]";
     }
 
-    public <U> DataResult<Pair<T, U>> decode(DynamicOps<U> debug12, U debug2) {
-        if (debug12.compressMaps()) {
-            return debug12.getNumberValue(debug2).flatMap(debug1 -> {
-                T debug22 = this.byId(debug1.intValue()); // MagmaCube - decompile fix
-                if (debug22 == null) { // MagmaCube - decompile fix
-                    return DataResult.error((String)("Unknown registry id: " + debug1));
+    public <U> DataResult<Pair<T, U>> decode(DynamicOps<U> dynamicOps, U debug2) {
+        if (dynamicOps.compressMaps()) {
+            return dynamicOps.getNumberValue(debug2).flatMap(id -> {
+                T registry = this.byId(id.intValue());
+                if (registry == null) {
+                    return DataResult.error("Unknown registry id: " + id);
                 }
-                return DataResult.success(debug22, (Lifecycle)this.lifecycle(debug22)); // MagmaCube - decompile fix
-            }).map(debug1 -> Pair.of(debug1, debug12.empty())); // MagmaCube - decompile fix
+                return DataResult.success(registry, this.lifecycle(registry));
+            }).map(instance -> Pair.of(instance, dynamicOps.empty()));
         }
-        return ResourceLocation.CODEC.decode(debug12, debug2).flatMap(debug1 -> {
-            T debug22 = this.get((ResourceLocation)debug1.getFirst()); // MagmaCube - decompile fix
-            if (debug22 == null) { // MagmaCube - decompile fix
-                return DataResult.error((String)("Unknown registry key: " + debug1.getFirst()));
+        return ResourceLocation.CODEC.decode(dynamicOps, debug2).flatMap(registryKeyPair -> {
+            T instance = this.get(registryKeyPair.getFirst());
+            if (instance == null) {
+                return DataResult.error("Unknown registry key: " + registryKeyPair.getFirst());
             }
-            return DataResult.success(Pair.of(debug22, debug1.getSecond()), (Lifecycle)this.lifecycle(debug22)); // MagmaCube - decompile fix
+            return DataResult.success(Pair.of(instance, registryKeyPair.getSecond()), this.lifecycle(instance));
         });
     }
 
-    public <U> DataResult<U> encode(T debug1, DynamicOps<U> debug2, U debug3) {
-        ResourceLocation debug4 = this.getKey(debug1);
-        if (debug4 == null) {
-            return DataResult.error((String)("Unknown registry element " + debug1));
+    public <U> DataResult<U> encode(T element, DynamicOps<U> dynamicOps, U instance) {
+        ResourceLocation resourceLocation = this.getKey(element);
+        if (resourceLocation == null) {
+            return DataResult.error("Unknown registry element " + element);
         }
-        if (debug2.compressMaps()) {
-            return debug2.mergeToPrimitive(debug3, debug2.createInt(this.getId(debug1))).setLifecycle(this.lifecycle);
+        if (dynamicOps.compressMaps()) {
+            return dynamicOps.mergeToPrimitive(instance, dynamicOps.createInt(this.getId(element))).setLifecycle(this.lifecycle);
         }
-        return debug2.mergeToPrimitive(debug3, debug2.createString(debug4.toString())).setLifecycle(this.lifecycle);
+        return dynamicOps.mergeToPrimitive(instance, dynamicOps.createString(resourceLocation.toString())).setLifecycle(this.lifecycle);
     }
 
-    public <U> Stream<U> keys(DynamicOps<U> debug12) {
-        return this.keySet().stream().map(debug1 -> debug12.createString(debug1.toString()));
+    public <U> Stream<U> keys(DynamicOps<U> dynamicOps) {
+        return this.keySet().stream().map(debug1 -> dynamicOps.createString(debug1.toString()));
     }
 
     @Nullable
-    public abstract ResourceLocation getKey(T var1);
+    public abstract ResourceLocation getKey(T value);
 
-    public abstract Optional<ResourceKey<T>> getResourceKey(T var1);
+    public abstract Optional<ResourceKey<T>> getResourceKey(T value);
 
     @Override
-    public abstract int getId(@Nullable T var1);
-    public final int getId(@Nullable Registry var1) { return getId((T) var1); } // MagmaCube - add method to avoid type checks
+    public abstract int getId(@Nullable T registry);
+    public final int getId(@Nullable Registry registry) { return getId((T) registry); } // MagmaCube - add method to hack around type checks
 
     @Nullable
-    public abstract T get(@Nullable ResourceKey<T> var1);
+    public abstract T get(@Nullable ResourceKey<T> resourceKey);
 
     @Nullable
-    public abstract T get(@Nullable ResourceLocation var1);
+    public abstract T get(@Nullable ResourceLocation resourceLocation);
 
-    protected abstract Lifecycle lifecycle(T var1);
+    protected abstract Lifecycle lifecycle(T input);
 
     public abstract Lifecycle elementsLifecycle();
 
-    public Optional<T> getOptional(@Nullable ResourceLocation debug1) {
-        return Optional.ofNullable(this.get(debug1));
+    public Optional<T> getOptional(@Nullable ResourceLocation resourceLocation) {
+        return Optional.ofNullable(this.get(resourceLocation));
     }
 
-    public Optional<T> getOptional(@Nullable ResourceKey<T> debug1) {
-        return Optional.ofNullable(this.get(debug1));
+    public Optional<T> getOptional(@Nullable ResourceKey<T> resourceKey) {
+        return Optional.ofNullable(this.get(resourceKey));
     }
 
-    public T getOrThrow(ResourceKey<T> debug1) {
-        T debug2 = this.get(debug1);
+    public T getOrThrow(ResourceKey<T> resourceKey) {
+        T debug2 = this.get(resourceKey);
         if (debug2 == null) {
-            throw new IllegalStateException("Missing: " + debug1);
+            throw new IllegalStateException("Missing: " + resourceKey); // todo: figure out why registry doesn't get and/or register
         }
         return debug2;
     }
@@ -358,25 +358,25 @@ IdMap<T> {
         return StreamSupport.stream(this.spliterator(), false);
     }
 
-    public abstract boolean containsKey(ResourceLocation var1);
+    public abstract boolean containsKey(ResourceLocation resourceLocation);
 
-    public static <T> T register(Registry<? super T> debug0, String debug1, T debug2) {
-        return Registry.register(debug0, new ResourceLocation(debug1), debug2);
+    public static <T> T register(Registry<? super T> registry, String location, T input) {
+        return Registry.register(registry, new ResourceLocation(location), input);
     }
 
-    public static <V, T extends V> T register(Registry<V> debug0, ResourceLocation debug1, T debug2) {
-        return (T) ((WritableRegistry)debug0).register(ResourceKey.create(debug0.key, debug1), debug2, Lifecycle.stable()); // MagmaCube - decompile fix
+    public static <V, T extends V> T register(Registry<V> registry, ResourceLocation resourceLocation, T input) {
+        return (T) ((WritableRegistry)registry).register(ResourceKey.create(registry.key, resourceLocation), input, Lifecycle.stable());
     }
 
-    public static <V, T extends V> T registerMapping(Registry<V> debug0, int debug1, String debug2, T debug3) {
-        return (T) ((WritableRegistry)debug0).registerMapping(debug1, ResourceKey.create(debug0.key, new ResourceLocation(debug2)), debug3, Lifecycle.stable()); // MagmaCube - decompile fix
+    public static <V, T extends V> T registerMapping(Registry<V> registry, int id, String location, T input) {
+        return (T) ((WritableRegistry)registry).registerMapping(id, ResourceKey.create(registry.key, new ResourceLocation(location)), input, Lifecycle.stable());
     }
 
     static {
         BuiltinRegistries.bootstrap();
-        LOADERS.forEach((debug0, debug1) -> { // MagmaCube - decompile fix
-            if (debug1.get() == null) {
-                LOGGER.error("Unable to bootstrap registry '{}'", debug0);
+        LOADERS.forEach((resourceLocation, supplier) -> {
+            if (supplier.get() == null) {
+                LOGGER.error("Unable to bootstrap registry '{}'", resourceLocation);
             }
         });
         Registry.checkRegistry(WRITABLE_REGISTRY);
diff --git a/src/main/java/net/minecraft/core/RegistryAccess.java b/src/main/java/net/minecraft/core/RegistryAccess.java
index f94543b5ab1662d2ab3011590a7d5b0bfb8eba85..43d924ca37e8fcaa975b80fcacc399780ddea794 100644
--- a/src/main/java/net/minecraft/core/RegistryAccess.java
+++ b/src/main/java/net/minecraft/core/RegistryAccess.java
@@ -48,97 +48,97 @@ import org.apache.logging.log4j.Logger;
 
 public abstract class RegistryAccess {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final Map<ResourceKey<? extends Registry<?>>, RegistryData<?>> REGISTRIES = (Map)Util.make(() -> {
-        ImmutableMap.Builder debug0 = ImmutableMap.builder();
-        RegistryAccess.put(debug0, Registry.DIMENSION_TYPE_REGISTRY, DimensionType.DIRECT_CODEC, DimensionType.DIRECT_CODEC);
-        RegistryAccess.put(debug0, Registry.BIOME_REGISTRY, Biome.DIRECT_CODEC, Biome.NETWORK_CODEC);
-        RegistryAccess.put(debug0, Registry.CONFIGURED_SURFACE_BUILDER_REGISTRY, ConfiguredSurfaceBuilder.DIRECT_CODEC);
-        RegistryAccess.put(debug0, Registry.CONFIGURED_CARVER_REGISTRY, ConfiguredWorldCarver.DIRECT_CODEC);
-        RegistryAccess.put(debug0, Registry.CONFIGURED_FEATURE_REGISTRY, ConfiguredFeature.DIRECT_CODEC);
-        RegistryAccess.put(debug0, Registry.CONFIGURED_STRUCTURE_FEATURE_REGISTRY, ConfiguredStructureFeature.DIRECT_CODEC);
-        RegistryAccess.put(debug0, Registry.PROCESSOR_LIST_REGISTRY, StructureProcessorType.DIRECT_CODEC);
-        RegistryAccess.put(debug0, Registry.TEMPLATE_POOL_REGISTRY, StructureTemplatePool.DIRECT_CODEC);
-        RegistryAccess.put(debug0, Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, NoiseGeneratorSettings.DIRECT_CODEC);
-        return debug0.build();
+    private static final Map<ResourceKey<? extends Registry<?>>, RegistryData<?>> REGISTRIES = Util.make(() -> {
+        ImmutableMap.Builder<ResourceKey<? extends Registry<?>>, RegistryData<?>> builder = ImmutableMap.builder();
+        RegistryAccess.put(builder, Registry.DIMENSION_TYPE_REGISTRY, DimensionType.DIRECT_CODEC, DimensionType.DIRECT_CODEC);
+        RegistryAccess.put(builder, Registry.BIOME_REGISTRY, Biome.DIRECT_CODEC, Biome.NETWORK_CODEC);
+        RegistryAccess.put(builder, Registry.CONFIGURED_SURFACE_BUILDER_REGISTRY, ConfiguredSurfaceBuilder.DIRECT_CODEC);
+        RegistryAccess.put(builder, Registry.CONFIGURED_CARVER_REGISTRY, ConfiguredWorldCarver.DIRECT_CODEC);
+        RegistryAccess.put(builder, Registry.CONFIGURED_FEATURE_REGISTRY, ConfiguredFeature.DIRECT_CODEC);
+        RegistryAccess.put(builder, Registry.CONFIGURED_STRUCTURE_FEATURE_REGISTRY, ConfiguredStructureFeature.DIRECT_CODEC);
+        RegistryAccess.put(builder, Registry.PROCESSOR_LIST_REGISTRY, StructureProcessorType.DIRECT_CODEC);
+        RegistryAccess.put(builder, Registry.TEMPLATE_POOL_REGISTRY, StructureTemplatePool.DIRECT_CODEC);
+        RegistryAccess.put(builder, Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, NoiseGeneratorSettings.DIRECT_CODEC);
+        return builder.build();
     });
     private static final RegistryHolder BUILTIN = Util.make(() -> {
-        RegistryHolder debug02 = new RegistryHolder();
-        DimensionType.registerBuiltin(debug02);
-        REGISTRIES.keySet().stream().filter(debug0 -> !debug0.equals(Registry.DIMENSION_TYPE_REGISTRY)).forEach(debug1 -> RegistryAccess.copyBuiltin(debug02, debug1));
-        return debug02;
+        RegistryHolder registryHolder = new RegistryHolder();
+        DimensionType.registerBuiltin(registryHolder);
+        REGISTRIES.keySet().stream().filter(resourceKey -> !resourceKey.equals(Registry.DIMENSION_TYPE_REGISTRY)).forEach(resourceKey -> RegistryAccess.copyBuiltin(registryHolder, resourceKey));
+        return registryHolder;
     });
 
-    public abstract <E> Optional<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> var1);
+    public abstract <E> Optional<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> resourceKey);
 
-    public <E> WritableRegistry<E> registryOrThrow(ResourceKey<? extends Registry<E>> debug1) {
-        return this.registry(debug1).orElseThrow(() -> new IllegalStateException("Missing registry: " + debug1));
+    public <E> WritableRegistry<E> registryOrThrow(ResourceKey<? extends Registry<E>> resourceKey) {
+        return this.registry(resourceKey).orElseThrow(() -> new IllegalStateException("Missing registry: " + resourceKey));
     }
 
     public Registry<DimensionType> dimensionTypes() {
         return this.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
     }
 
-    private static <E> void put(ImmutableMap.Builder<ResourceKey<? extends Registry<?>>, RegistryData<?>> debug0, ResourceKey<? extends Registry<E>> debug1, Codec<E> debug2) {
-        debug0.put(debug1, new RegistryData<E>(debug1, debug2, null));
+    private static <E> void put(ImmutableMap.Builder<ResourceKey<? extends Registry<?>>, RegistryData<?>> registryDataBuilder, ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec) {
+        registryDataBuilder.put(resourceKey, new RegistryData<E>(resourceKey, codec, null));
     }
 
-    private static <E> void put(ImmutableMap.Builder<ResourceKey<? extends Registry<?>>, RegistryData<?>> debug0, ResourceKey<? extends Registry<E>> debug1, Codec<E> debug2, Codec<E> debug3) {
-        debug0.put(debug1, new RegistryData<E>(debug1, debug2, debug3));
+    private static <E> void put(ImmutableMap.Builder<ResourceKey<? extends Registry<?>>, RegistryData<?>> registryDataBuilder, ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec, Codec<E> networkCodec) {
+        registryDataBuilder.put(resourceKey, new RegistryData<E>(resourceKey, codec, networkCodec));
     }
 
     public static RegistryHolder builtin() {
-        RegistryHolder debug0 = new RegistryHolder();
-        RegistryReadOps.ResourceAccess.MemoryMap debug1 = new RegistryReadOps.ResourceAccess.MemoryMap();
-        for (RegistryData<?> debug3 : REGISTRIES.values()) {
-            RegistryAccess.addBuiltinElements(debug0, debug1, debug3);
+        RegistryHolder registryHolder = new RegistryHolder();
+        RegistryReadOps.ResourceAccess.MemoryMap memoryMap = new RegistryReadOps.ResourceAccess.MemoryMap();
+        for (RegistryData<?> registryData : REGISTRIES.values()) {
+            RegistryAccess.addBuiltinElements(registryHolder, memoryMap, registryData);
         }
-        RegistryReadOps.create(JsonOps.INSTANCE, debug1, debug0);
-        return debug0;
+        RegistryReadOps.create(JsonOps.INSTANCE, memoryMap, registryHolder);
+        return registryHolder;
     }
 
-    private static <E> void addBuiltinElements(RegistryHolder debug0, RegistryReadOps.ResourceAccess.MemoryMap debug1, RegistryData<E> debug2) {
-        ResourceKey<? extends Registry<E>> debug3 = debug2.key(); // MagmaCube - decompile fix
-        boolean debug4 = !debug3.equals(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY) && !debug3.equals(Registry.DIMENSION_TYPE_REGISTRY);
-        WritableRegistry<E> debug5 = BUILTIN.registryOrThrow(debug3);
-        WritableRegistry<E> debug6 = debug0.registryOrThrow(debug3);
-        for (Map.Entry<ResourceKey<E>, E> debug8 : debug5.entrySet()) { // MagmaCube - decompile fix
-            E debug9 = debug8.getValue(); // MagmaCube - decompile fix
-            if (debug4) {
-                debug1.add(BUILTIN, debug8.getKey(), debug2.codec(), debug5.getId(debug9), debug9, debug5.lifecycle(debug9));
+    private static <E> void addBuiltinElements(RegistryHolder registryHolder, RegistryReadOps.ResourceAccess.MemoryMap memoryMap, RegistryData<E> registryData) {
+        ResourceKey<? extends Registry<E>> resourceKey = registryData.key(); // MagmaCube - decompile fix
+        boolean addToMemoryMap = !resourceKey.equals(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY) && !resourceKey.equals(Registry.DIMENSION_TYPE_REGISTRY);
+        WritableRegistry<E> writableRegistry = BUILTIN.registryOrThrow(resourceKey);
+        WritableRegistry<E> objectRegistry = registryHolder.registryOrThrow(resourceKey);
+        for (Map.Entry<ResourceKey<E>, E> entry : writableRegistry.entrySet()) { // MagmaCube - decompile fix
+            E value = entry.getValue(); // MagmaCube - decompile fix
+            if (addToMemoryMap) {
+                memoryMap.add(BUILTIN, entry.getKey(), registryData.codec(), writableRegistry.getId(value), value, writableRegistry.lifecycle(value));
                 continue;
             }
-            debug6.registerMapping(debug5.getId(debug9), debug8.getKey(), debug9, debug5.lifecycle(debug9));
+            objectRegistry.registerMapping(writableRegistry.getId(value), entry.getKey(), value, writableRegistry.lifecycle(value));
         }
     }
 
-    private static <R extends Registry<?>> void copyBuiltin(RegistryHolder debug0, ResourceKey<R> debug1) {
-        Registry<R> debug2 = (Registry<R>) BuiltinRegistries.REGISTRY; // MagmaCube - decompile fix
-        Registry<?> debug3 = debug2.get(debug1);
-        if (debug3 == null) {
-            throw new IllegalStateException("Missing builtin registry: " + debug1);
+    private static <R extends Registry<?>> void copyBuiltin(RegistryHolder registryHolder, ResourceKey<R> resourceKey) {
+        Registry<R> registry = (Registry<R>) BuiltinRegistries.REGISTRY; // MagmaCube - decompile fix
+        Registry<?> objectRegistry = registry.get(resourceKey);
+        if (objectRegistry == null) {
+            throw new IllegalStateException("Missing builtin registry: " + resourceKey);
         }
-        RegistryAccess.copy(debug0, debug3);
+        RegistryAccess.copy(registryHolder, objectRegistry);
     }
 
-    private static <E> void copy(RegistryHolder debug0, Registry<E> debug1) {
-        WritableRegistry<E> debug2 = debug0.registry(debug1.key()).orElseThrow(() -> new IllegalStateException("Missing registry: " + debug1.key()));
-        for (Map.Entry<ResourceKey<E>, E> debug4 : debug1.entrySet()) {
-            E debug5 = debug4.getValue();
-            debug2.registerMapping(debug1.getId(debug5), debug4.getKey(), debug5, debug1.lifecycle(debug5));
+    private static <E> void copy(RegistryHolder registryHolder, Registry<E> registry) {
+        WritableRegistry<E> writableRegistry = registryHolder.registry(registry.key()).orElseThrow(() -> new IllegalStateException("Missing registry: " + registry.key()));
+        for (Map.Entry<ResourceKey<E>, E> entry : registry.entrySet()) {
+            E value = entry.getValue();
+            writableRegistry.registerMapping(registry.getId(value), entry.getKey(), value, registry.lifecycle(value));
         }
     }
 
-    public static void load(RegistryHolder debug0, RegistryReadOps<?> debug1) {
-        for (RegistryData<?> debug3 : REGISTRIES.values()) {
-            RegistryAccess.readRegistry(debug1, debug0, debug3);
+    public static void load(RegistryHolder holder, RegistryReadOps<?> readOps) {
+        for (RegistryData<?> registryData : REGISTRIES.values()) {
+            RegistryAccess.readRegistry(readOps, holder, registryData);
         }
     }
 
-    private static <E> void readRegistry(RegistryReadOps<?> debug02, RegistryHolder debug1, RegistryData<E> debug2) {
-        ResourceKey debug3 = debug2.key();
-        MappedRegistry debug4 = Optional.ofNullable(debug1.registries.get(debug3)).map(debug0 -> debug0).orElseThrow(() -> new IllegalStateException("Missing registry: " + debug3));
-        DataResult<MappedRegistry<E>> debug5 = debug02.decodeElements(debug4, debug2.key(), debug2.codec());
-        debug5.error().ifPresent(debug0 -> LOGGER.error("Error loading registry data: {}", (Object)debug0.message()));
+    private static <E> void readRegistry(RegistryReadOps<?> registryReadOps, RegistryHolder registryHolder, RegistryData<E> registryData) {
+        ResourceKey<?> resourceKey = registryData.key();
+        MappedRegistry<E> mappedRegistry = Optional.ofNullable((MappedRegistry<E>) registryHolder.registries.get(resourceKey)).map(registry -> registry).orElseThrow(() -> new IllegalStateException("Missing registry: " + resourceKey));
+        DataResult<MappedRegistry<E>> dataResult = registryReadOps.decodeElements(mappedRegistry, registryData.key(), registryData.codec());
+        dataResult.error().ifPresent(result -> LOGGER.error("Error loading registry data: {}", (Object)result.message()));
     }
 
     public static final class RegistryHolder
@@ -147,36 +147,36 @@ public abstract class RegistryAccess {
         private final Map<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> registries;
 
         private static <E> Codec<RegistryHolder> makeNetworkCodec() {
-            Codec<ResourceKey<? extends Registry<E>>> debug02 = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location); // MagmaCube - decompile fix
-            Codec<MappedRegistry<E>> debug1 = debug02.partialDispatch("type", debug0 -> DataResult.success(debug0.key()), debug0 -> RegistryHolder.getNetworkCodec(debug0).map(debug12 -> MappedRegistry.networkCodec(debug0, Lifecycle.experimental(), debug12))); // MagmaCube - decompile fix
-            UnboundedMapCodec debug2 = Codec.unboundedMap((Codec)debug02, (Codec)debug1);
-            return RegistryHolder.captureMap(debug2);
+            Codec<ResourceKey<? extends Registry<E>>> codec = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location); // MagmaCube - decompile fix
+            Codec<MappedRegistry<E>> mappedRegistryCodec = codec.partialDispatch("type", mappedRegistry -> DataResult.success(mappedRegistry.key()), resourceKey -> RegistryHolder.getNetworkCodec(resourceKey).map(registryCodec -> MappedRegistry.networkCodec(resourceKey, Lifecycle.experimental(), registryCodec))); // MagmaCube - decompile fix
+            UnboundedMapCodec<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> unboundedMapCodec = Codec.unboundedMap(codec, mappedRegistryCodec);
+            return RegistryHolder.captureMap(unboundedMapCodec);
         }
 
-        private static <K extends ResourceKey<? extends Registry<?>>, V extends MappedRegistry<?>> Codec<RegistryHolder> captureMap(UnboundedMapCodec<K, V> debug0) {
-            return debug0.xmap(RegistryHolder::new, debug02 -> (ImmutableMap)debug02.registries.entrySet().stream().filter(debug03 -> ((RegistryData)REGISTRIES.get(debug03.getKey())).sendToClient()).collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, Map.Entry::getValue))); // MagmaCube - decompile fix
+        private static <K extends ResourceKey<? extends Registry<?>>, V extends MappedRegistry<?>> Codec<RegistryHolder> captureMap(UnboundedMapCodec<K, V> unboundedMapCodec) {
+            return unboundedMapCodec.xmap(RegistryHolder::new, registryHolder -> ((java.util.Set<java.util.Map.Entry<K, V>>) (Object) registryHolder.registries.entrySet()).stream().filter(entry -> (REGISTRIES.get(entry.getKey())).sendToClient()).collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, Map.Entry::getValue))); // MagmaCube - decompile fix
         }
 
-        private static <E> DataResult<? extends Codec<E>> getNetworkCodec(ResourceKey<? extends Registry<E>> debug02) {
-            return (DataResult<? extends Codec<E>>) (Object) Optional.ofNullable(REGISTRIES.get(debug02)).map(debug0 -> debug0.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown or not serializable registry: " + debug02)); // MagmaCube - decompile fix
+        private static <E> DataResult<? extends Codec<E>> getNetworkCodec(ResourceKey<? extends Registry<E>> resourceKey) {
+            return (DataResult<? extends Codec<E>>) (Object) Optional.ofNullable(REGISTRIES.get(resourceKey)).map(registryData -> (Codec) registryData.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown or not serializable registry: " + resourceKey)); // MagmaCube - decompile fix
         }
 
         public RegistryHolder() {
             this(REGISTRIES.keySet().stream().collect(Collectors.toMap(Function.identity(), RegistryHolder::createRegistry)));
         }
 
-        private RegistryHolder(Map<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> debug1) {
-            this.registries = debug1;
+        private RegistryHolder(Map<? extends ResourceKey<? extends Registry<?>>, ? extends MappedRegistry<?>> map) {
+            this.registries = map;
         }
 
-        private static <E> MappedRegistry<?> createRegistry(ResourceKey<? extends Registry<?>> debug0) {
-            return new MappedRegistry(debug0, Lifecycle.stable());
+        private static <E> MappedRegistry<?> createRegistry(ResourceKey<? extends Registry<?>> resourceKey) {
+            return new MappedRegistry(resourceKey, Lifecycle.stable());
         }
 
         @Override
-        public <E> Optional<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> debug1) {
-            if (debug1.equals(Registry.BIOME_REGISTRY)) return (Optional) Optional.of(BuiltinRegistries.BIOME); // MagmaCube
-            return (Optional<WritableRegistry<E>>) (Object) Optional.ofNullable(this.registries.get(debug1)).map(debug0 -> debug0); // MagmaCube - decompile fix
+        public <E> Optional<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> resourceKey) {
+            //if (resourceKey.equals(Registry.BIOME_REGISTRY)) return Optional.of((WritableRegistry<E>) BuiltinRegistries.BIOME); // MagmaCube - todo: this is dirty way but it works like wtf
+            return Optional.ofNullable((WritableRegistry<E>) this.registries.get(resourceKey)).map(registry -> registry); // MagmaCube - decompile fix
         }
     }
 
@@ -186,10 +186,10 @@ public abstract class RegistryAccess {
         @Nullable
         private final Codec<E> networkCodec;
 
-        public RegistryData(ResourceKey<? extends Registry<E>> debug1, Codec<E> debug2, @Nullable Codec<E> debug3) {
-            this.key = debug1;
-            this.codec = debug2;
-            this.networkCodec = debug3;
+        public RegistryData(ResourceKey<? extends Registry<E>> key, Codec<E> codec, @Nullable Codec<E> networkCodec) {
+            this.key = key;
+            this.codec = codec;
+            this.networkCodec = networkCodec;
         }
 
         public ResourceKey<? extends Registry<E>> key() {
diff --git a/src/main/java/net/minecraft/core/WritableRegistry.java b/src/main/java/net/minecraft/core/WritableRegistry.java
index 2fc60ea6fb81815cc630765695dc50c9dbd2ffec..5d7f67800d553aad7c824b3fb88c04de8076c07a 100644
--- a/src/main/java/net/minecraft/core/WritableRegistry.java
+++ b/src/main/java/net/minecraft/core/WritableRegistry.java
@@ -6,13 +6,13 @@ import net.minecraft.resources.ResourceKey;
 
 public abstract class WritableRegistry<T> extends Registry<T>
 {
-    public WritableRegistry(final ResourceKey<? extends Registry<T>> debug1, final Lifecycle debug2) {
-        super(debug1, debug2);
+    public WritableRegistry(final ResourceKey<? extends Registry<T>> resourceKey, final Lifecycle lifecycle) {
+        super(resourceKey, lifecycle);
     }
     
-    public abstract <V extends T> V registerMapping(final int p0, final ResourceKey<T> p1, final V p2, final Lifecycle p3);
+    public abstract <V extends T> V registerMapping(final int id, final ResourceKey<T> resourceKey, final V instance, final Lifecycle lifecycle);
     
-    public abstract <V extends T> V register(final ResourceKey<T> p0, final V p1, final Lifecycle p2);
+    public abstract <V extends T> V register(final ResourceKey<T> resourceKey, final V instance, final Lifecycle lifecycle);
     
-    public abstract <V extends T> V registerOrOverride(final OptionalInt p0, final ResourceKey<T> p1, final V p2, final Lifecycle p3);
+    public abstract <V extends T> V registerOrOverride(final OptionalInt optionalInt, final ResourceKey<T> resourceKey, final V value, final Lifecycle lifecycle);
 }
diff --git a/src/main/java/net/minecraft/data/BuiltinRegistries.java b/src/main/java/net/minecraft/data/BuiltinRegistries.java
index 269c9e766895eaeab3543e3baef71a9f0be3dec9..8e56be673dd1408c7a320672129dd12a00892fc7 100644
--- a/src/main/java/net/minecraft/data/BuiltinRegistries.java
+++ b/src/main/java/net/minecraft/data/BuiltinRegistries.java
@@ -47,31 +47,31 @@ public class BuiltinRegistries
     public static final Registry<Biome> BIOME;
     public static final Registry<NoiseGeneratorSettings> NOISE_GENERATOR_SETTINGS;
     
-    private static <T> Registry<T> registerSimple(final ResourceKey<? extends Registry<T>> debug0, final Supplier<T> debug1) {
-        return registerSimple(debug0, Lifecycle.stable(), debug1);
+    private static <T> Registry<T> registerSimple(final ResourceKey<? extends Registry<T>> resourceKey, final Supplier<T> supplier) {
+        return registerSimple(resourceKey, Lifecycle.stable(), supplier);
     }
     
-    private static <T> Registry<T> registerSimple(final ResourceKey<? extends Registry<T>> debug0, final Lifecycle debug1, final Supplier<T> debug2) {
-        return internalRegister(debug0, new MappedRegistry<T>(debug0, debug1), debug2, debug1);
+    private static <T> Registry<T> registerSimple(final ResourceKey<? extends Registry<T>> resourceKey, final Lifecycle lifecycle, final Supplier<T> supplier) {
+        return internalRegister(resourceKey, new MappedRegistry<T>(resourceKey, lifecycle), supplier, lifecycle);
     }
     
-    private static <T, R extends WritableRegistry<T>> R internalRegister(final ResourceKey<? extends Registry<T>> debug0, final R debug1, final Supplier<T> debug2, final Lifecycle debug3) {
-        final ResourceLocation debug4 = debug0.location();
-        BuiltinRegistries.LOADERS.put(debug4, debug2);
-        final WritableRegistry<R> debug5 = (WritableRegistry<R>)BuiltinRegistries.WRITABLE_REGISTRY;
-        return debug5.register((ResourceKey<R>)debug0, debug1, debug3);
+    private static <T, R extends WritableRegistry<T>> R internalRegister(final ResourceKey<? extends Registry<T>> resourceKey, final R input, final Supplier<T> supplier, final Lifecycle lifecycle) {
+        final ResourceLocation resourceLocation = resourceKey.location();
+        BuiltinRegistries.LOADERS.put(resourceLocation, supplier);
+        final WritableRegistry<R> writableRegistry = (WritableRegistry<R>)BuiltinRegistries.WRITABLE_REGISTRY;
+        return writableRegistry.register((ResourceKey<R>)resourceKey, input, lifecycle);
     }
     
-    public static <T> T register(final Registry<? super T> debug0, final String debug1, final T debug2) {
-        return register(debug0, new ResourceLocation(debug1), debug2);
+    public static <T> T register(final Registry<? super T> registry, final String location, final T input) {
+        return register(registry, new ResourceLocation(location), input);
     }
     
-    public static <V, T extends V> T register(final Registry<V> debug0, final ResourceLocation debug1, final T debug2) {
-        return (T) ((WritableRegistry)debug0).register(ResourceKey.create((ResourceKey<? extends Registry<Object>>)debug0.key(), debug1), debug2, Lifecycle.stable()); // MagmaCube - decompile fix
+    public static <V, T extends V> T register(final Registry<V> registry, final ResourceLocation resourceLocation, final T input) {
+        return (T) ((WritableRegistry)registry).register(ResourceKey.create((ResourceKey<? extends Registry<Object>>) registry.key(), resourceLocation), input, Lifecycle.stable()); // MagmaCube - decompile fix
     }
     
-    public static <V, T extends V> T registerMapping(final Registry<V> debug0, final int debug1, final ResourceKey<V> debug2, final T debug3) {
-        return (T) ((WritableRegistry)debug0).registerMapping(debug1, debug2, debug3, Lifecycle.stable()); // MagmaCube - decompile fix
+    public static <V, T extends V> T registerMapping(final Registry<V> registry, final int id, final ResourceKey<V> resourceKey, final T input) {
+        return (T) ((WritableRegistry)registry).registerMapping(id, resourceKey, input, Lifecycle.stable()); // MagmaCube - decompile fix
     }
     
     public static void bootstrap() {
@@ -90,9 +90,9 @@ public class BuiltinRegistries
         TEMPLATE_POOL = registerSimple(Registry.TEMPLATE_POOL_REGISTRY, Pools::bootstrap);
         BIOME = registerSimple(Registry.BIOME_REGISTRY, () -> Biomes.PLAINS);
         NOISE_GENERATOR_SETTINGS = registerSimple(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, NoiseGeneratorSettings::bootstrap);
-        BuiltinRegistries.LOADERS.forEach((debug0, debug1) -> {
-            if (debug1.get() == null) {
-                BuiltinRegistries.LOGGER.error("Unable to bootstrap registry '{}'", (Object)debug0);
+        BuiltinRegistries.LOADERS.forEach((resourceLocation, supplier) -> {
+            if (supplier.get() == null) {
+                BuiltinRegistries.LOGGER.error("Unable to bootstrap registry '{}'", (Object)resourceLocation);
             }
             return;
         });
diff --git a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
index a88fee293e29855bd72cd35af40dfd092279511d..ec07b354f1af09b75ae43cb71c6767b4fd1c4612 100644
--- a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
+++ b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
@@ -37,7 +37,7 @@ public class RegistryDumpReport implements DataProvider
             final ResourceLocation debug2 = ((DefaultedRegistry)debug0).getDefaultKey();
             debug.addProperty("default", debug2.toString());
         }
-        final int debug3 = Registry.REGISTRY.getId((Registry<?>)debug0);
+        final int debug3 = Registry.REGISTRY.getId(debug0);
         debug.addProperty("protocol_id", (Number)debug3);
         final JsonObject debug4 = new JsonObject();
         for (final ResourceLocation debug5 : debug0.keySet()) {
diff --git a/src/main/java/net/minecraft/data/recipes/ShapedRecipeBuilder.java b/src/main/java/net/minecraft/data/recipes/ShapedRecipeBuilder.java
index 7f8a8817e0c46b5cfd8924bd4f20f89fbe0f30fc..dab9bd381b890b11265b6fca4cdd2c3e5d14de9f 100644
--- a/src/main/java/net/minecraft/data/recipes/ShapedRecipeBuilder.java
+++ b/src/main/java/net/minecraft/data/recipes/ShapedRecipeBuilder.java
@@ -138,7 +138,7 @@ public class ShapedRecipeBuilder
         LOGGER = LogManager.getLogger();
     }
     
-    class Result implements FinishedRecipe
+    static class Result implements FinishedRecipe
     {
         private final ResourceLocation id;
         private final Item result;
diff --git a/src/main/java/net/minecraft/data/worldgen/biome/Biomes.java b/src/main/java/net/minecraft/data/worldgen/biome/Biomes.java
index 9ce52bbaeabe7bd679dd7b32875ec44e2b236f10..8d5916403839b5edd3c2b5dad800e16fe6c20d7f 100644
--- a/src/main/java/net/minecraft/data/worldgen/biome/Biomes.java
+++ b/src/main/java/net/minecraft/data/worldgen/biome/Biomes.java
@@ -7,101 +7,99 @@ import net.minecraft.world.level.biome.Biome;
 import net.minecraft.resources.ResourceKey;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 
-public abstract class Biomes
-{
-    private static final Int2ObjectMap<ResourceKey<Biome>> TO_NAME;
-    public static final Biome PLAINS;
-    public static final Biome THE_VOID;
+import static net.minecraft.world.level.biome.Biomes.*;
+
+public abstract class Biomes {
+    private static final Int2ObjectMap<ResourceKey<Biome>> TO_NAME = new Int2ObjectArrayMap<>();
+    public static final Biome PLAINS = register(1, net.minecraft.world.level.biome.Biomes.PLAINS, VanillaBiomes.plainsBiome(false));
+    public static final Biome THE_VOID = register(127, net.minecraft.world.level.biome.Biomes.THE_VOID, VanillaBiomes.theVoidBiome());
     
-    private static Biome register(final int debug0, final ResourceKey<Biome> debug1, final Biome debug2) {
-        Biomes.TO_NAME.put(debug0, debug1); // MagmaCube - decompile fix
-        return BuiltinRegistries.registerMapping(BuiltinRegistries.BIOME, debug0, debug1, debug2);
+    private static Biome register(final int id, final ResourceKey<Biome> resourceKey, final Biome biome) {
+        Biomes.TO_NAME.put(id, resourceKey); // MagmaCube - decompile fix
+        return BuiltinRegistries.registerMapping(BuiltinRegistries.BIOME, id, resourceKey, biome);
     }
     
     public static ResourceKey<Biome> byId(final int debug0) {
-        return (ResourceKey<Biome>)Biomes.TO_NAME.get(debug0);
+        return Biomes.TO_NAME.get(debug0);
     }
     
     static {
-        TO_NAME = (Int2ObjectMap)new Int2ObjectArrayMap();
-        register(0, net.minecraft.world.level.biome.Biomes.OCEAN, VanillaBiomes.oceanBiome(false));
-        PLAINS = register(1, net.minecraft.world.level.biome.Biomes.PLAINS, VanillaBiomes.plainsBiome(false));
-        register(2, net.minecraft.world.level.biome.Biomes.DESERT, VanillaBiomes.desertBiome(0.125f, 0.05f, true, true, true));
-        register(3, net.minecraft.world.level.biome.Biomes.MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.MOUNTAIN, false));
-        register(4, net.minecraft.world.level.biome.Biomes.FOREST, VanillaBiomes.forestBiome(0.1f, 0.2f));
-        register(5, net.minecraft.world.level.biome.Biomes.TAIGA, VanillaBiomes.taigaBiome(0.2f, 0.2f, false, false, true, false));
-        register(6, net.minecraft.world.level.biome.Biomes.SWAMP, VanillaBiomes.swampBiome(-0.2f, 0.1f, false));
-        register(7, net.minecraft.world.level.biome.Biomes.RIVER, VanillaBiomes.riverBiome(-0.5f, 0.0f, 0.5f, 4159204, false));
-        register(8, net.minecraft.world.level.biome.Biomes.NETHER_WASTES, VanillaBiomes.netherWastesBiome());
-        register(9, net.minecraft.world.level.biome.Biomes.THE_END, VanillaBiomes.theEndBiome());
-        register(10, net.minecraft.world.level.biome.Biomes.FROZEN_OCEAN, VanillaBiomes.frozenOceanBiome(false));
-        register(11, net.minecraft.world.level.biome.Biomes.FROZEN_RIVER, VanillaBiomes.riverBiome(-0.5f, 0.0f, 0.0f, 3750089, true));
-        register(12, net.minecraft.world.level.biome.Biomes.SNOWY_TUNDRA, VanillaBiomes.tundraBiome(0.125f, 0.05f, false, false));
-        register(13, net.minecraft.world.level.biome.Biomes.SNOWY_MOUNTAINS, VanillaBiomes.tundraBiome(0.45f, 0.3f, false, true));
-        register(14, net.minecraft.world.level.biome.Biomes.MUSHROOM_FIELDS, VanillaBiomes.mushroomFieldsBiome(0.2f, 0.3f));
-        register(15, net.minecraft.world.level.biome.Biomes.MUSHROOM_FIELD_SHORE, VanillaBiomes.mushroomFieldsBiome(0.0f, 0.025f));
-        register(16, net.minecraft.world.level.biome.Biomes.BEACH, VanillaBiomes.beachBiome(0.0f, 0.025f, 0.8f, 0.4f, 4159204, false, false));
-        register(17, net.minecraft.world.level.biome.Biomes.DESERT_HILLS, VanillaBiomes.desertBiome(0.45f, 0.3f, false, true, false));
-        register(18, net.minecraft.world.level.biome.Biomes.WOODED_HILLS, VanillaBiomes.forestBiome(0.45f, 0.3f));
-        register(19, net.minecraft.world.level.biome.Biomes.TAIGA_HILLS, VanillaBiomes.taigaBiome(0.45f, 0.3f, false, false, false, false));
-        register(20, net.minecraft.world.level.biome.Biomes.MOUNTAIN_EDGE, VanillaBiomes.mountainBiome(0.8f, 0.3f, SurfaceBuilders.GRASS, true));
-        register(21, net.minecraft.world.level.biome.Biomes.JUNGLE, VanillaBiomes.jungleBiome());
-        register(22, net.minecraft.world.level.biome.Biomes.JUNGLE_HILLS, VanillaBiomes.jungleHillsBiome());
-        register(23, net.minecraft.world.level.biome.Biomes.JUNGLE_EDGE, VanillaBiomes.jungleEdgeBiome());
-        register(24, net.minecraft.world.level.biome.Biomes.DEEP_OCEAN, VanillaBiomes.oceanBiome(true));
-        register(25, net.minecraft.world.level.biome.Biomes.STONE_SHORE, VanillaBiomes.beachBiome(0.1f, 0.8f, 0.2f, 0.3f, 4159204, false, true));
-        register(26, net.minecraft.world.level.biome.Biomes.SNOWY_BEACH, VanillaBiomes.beachBiome(0.0f, 0.025f, 0.05f, 0.3f, 4020182, true, false));
-        register(27, net.minecraft.world.level.biome.Biomes.BIRCH_FOREST, VanillaBiomes.birchForestBiome(0.1f, 0.2f, false));
-        register(28, net.minecraft.world.level.biome.Biomes.BIRCH_FOREST_HILLS, VanillaBiomes.birchForestBiome(0.45f, 0.3f, false));
-        register(29, net.minecraft.world.level.biome.Biomes.DARK_FOREST, VanillaBiomes.darkForestBiome(0.1f, 0.2f, false));
-        register(30, net.minecraft.world.level.biome.Biomes.SNOWY_TAIGA, VanillaBiomes.taigaBiome(0.2f, 0.2f, true, false, false, true));
-        register(31, net.minecraft.world.level.biome.Biomes.SNOWY_TAIGA_HILLS, VanillaBiomes.taigaBiome(0.45f, 0.3f, true, false, false, false));
-        register(32, net.minecraft.world.level.biome.Biomes.GIANT_TREE_TAIGA, VanillaBiomes.giantTreeTaiga(0.2f, 0.2f, 0.3f, false));
-        register(33, net.minecraft.world.level.biome.Biomes.GIANT_TREE_TAIGA_HILLS, VanillaBiomes.giantTreeTaiga(0.45f, 0.3f, 0.3f, false));
-        register(34, net.minecraft.world.level.biome.Biomes.WOODED_MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.GRASS, true));
-        register(35, net.minecraft.world.level.biome.Biomes.SAVANNA, VanillaBiomes.savannaBiome(0.125f, 0.05f, 1.2f, false, false));
-        register(36, net.minecraft.world.level.biome.Biomes.SAVANNA_PLATEAU, VanillaBiomes.savanaPlateauBiome());
-        register(37, net.minecraft.world.level.biome.Biomes.BADLANDS, VanillaBiomes.badlandsBiome(0.1f, 0.2f, false));
-        register(38, net.minecraft.world.level.biome.Biomes.WOODED_BADLANDS_PLATEAU, VanillaBiomes.woodedBadlandsPlateauBiome(1.5f, 0.025f));
-        register(39, net.minecraft.world.level.biome.Biomes.BADLANDS_PLATEAU, VanillaBiomes.badlandsBiome(1.5f, 0.025f, true));
-        register(40, net.minecraft.world.level.biome.Biomes.SMALL_END_ISLANDS, VanillaBiomes.smallEndIslandsBiome());
-        register(41, net.minecraft.world.level.biome.Biomes.END_MIDLANDS, VanillaBiomes.endMidlandsBiome());
-        register(42, net.minecraft.world.level.biome.Biomes.END_HIGHLANDS, VanillaBiomes.endHighlandsBiome());
-        register(43, net.minecraft.world.level.biome.Biomes.END_BARRENS, VanillaBiomes.endBarrensBiome());
-        register(44, net.minecraft.world.level.biome.Biomes.WARM_OCEAN, VanillaBiomes.warmOceanBiome());
-        register(45, net.minecraft.world.level.biome.Biomes.LUKEWARM_OCEAN, VanillaBiomes.lukeWarmOceanBiome(false));
-        register(46, net.minecraft.world.level.biome.Biomes.COLD_OCEAN, VanillaBiomes.coldOceanBiome(false));
-        register(47, net.minecraft.world.level.biome.Biomes.DEEP_WARM_OCEAN, VanillaBiomes.deepWarmOceanBiome());
-        register(48, net.minecraft.world.level.biome.Biomes.DEEP_LUKEWARM_OCEAN, VanillaBiomes.lukeWarmOceanBiome(true));
-        register(49, net.minecraft.world.level.biome.Biomes.DEEP_COLD_OCEAN, VanillaBiomes.coldOceanBiome(true));
-        register(50, net.minecraft.world.level.biome.Biomes.DEEP_FROZEN_OCEAN, VanillaBiomes.frozenOceanBiome(true));
-        THE_VOID = register(127, net.minecraft.world.level.biome.Biomes.THE_VOID, VanillaBiomes.theVoidBiome());
-        register(129, net.minecraft.world.level.biome.Biomes.SUNFLOWER_PLAINS, VanillaBiomes.plainsBiome(true));
-        register(130, net.minecraft.world.level.biome.Biomes.DESERT_LAKES, VanillaBiomes.desertBiome(0.225f, 0.25f, false, false, false));
-        register(131, net.minecraft.world.level.biome.Biomes.GRAVELLY_MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.GRAVELLY_MOUNTAIN, false));
-        register(132, net.minecraft.world.level.biome.Biomes.FLOWER_FOREST, VanillaBiomes.flowerForestBiome());
-        register(133, net.minecraft.world.level.biome.Biomes.TAIGA_MOUNTAINS, VanillaBiomes.taigaBiome(0.3f, 0.4f, false, true, false, false));
-        register(134, net.minecraft.world.level.biome.Biomes.SWAMP_HILLS, VanillaBiomes.swampBiome(-0.1f, 0.3f, true));
-        register(140, net.minecraft.world.level.biome.Biomes.ICE_SPIKES, VanillaBiomes.tundraBiome(0.425f, 0.45000002f, true, false));
-        register(149, net.minecraft.world.level.biome.Biomes.MODIFIED_JUNGLE, VanillaBiomes.modifiedJungleBiome());
-        register(151, net.minecraft.world.level.biome.Biomes.MODIFIED_JUNGLE_EDGE, VanillaBiomes.modifiedJungleEdgeBiome());
-        register(155, net.minecraft.world.level.biome.Biomes.TALL_BIRCH_FOREST, VanillaBiomes.birchForestBiome(0.2f, 0.4f, true));
-        register(156, net.minecraft.world.level.biome.Biomes.TALL_BIRCH_HILLS, VanillaBiomes.birchForestBiome(0.55f, 0.5f, true));
-        register(157, net.minecraft.world.level.biome.Biomes.DARK_FOREST_HILLS, VanillaBiomes.darkForestBiome(0.2f, 0.4f, true));
-        register(158, net.minecraft.world.level.biome.Biomes.SNOWY_TAIGA_MOUNTAINS, VanillaBiomes.taigaBiome(0.3f, 0.4f, true, true, false, false));
-        register(160, net.minecraft.world.level.biome.Biomes.GIANT_SPRUCE_TAIGA, VanillaBiomes.giantTreeTaiga(0.2f, 0.2f, 0.25f, true));
-        register(161, net.minecraft.world.level.biome.Biomes.GIANT_SPRUCE_TAIGA_HILLS, VanillaBiomes.giantTreeTaiga(0.2f, 0.2f, 0.25f, true));
-        register(162, net.minecraft.world.level.biome.Biomes.MODIFIED_GRAVELLY_MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.GRAVELLY_MOUNTAIN, false));
-        register(163, net.minecraft.world.level.biome.Biomes.SHATTERED_SAVANNA, VanillaBiomes.savannaBiome(0.3625f, 1.225f, 1.1f, true, true));
-        register(164, net.minecraft.world.level.biome.Biomes.SHATTERED_SAVANNA_PLATEAU, VanillaBiomes.savannaBiome(1.05f, 1.2125001f, 1.0f, true, true));
-        register(165, net.minecraft.world.level.biome.Biomes.ERODED_BADLANDS, VanillaBiomes.erodedBadlandsBiome());
-        register(166, net.minecraft.world.level.biome.Biomes.MODIFIED_WOODED_BADLANDS_PLATEAU, VanillaBiomes.woodedBadlandsPlateauBiome(0.45f, 0.3f));
-        register(167, net.minecraft.world.level.biome.Biomes.MODIFIED_BADLANDS_PLATEAU, VanillaBiomes.badlandsBiome(0.45f, 0.3f, true));
-        register(168, net.minecraft.world.level.biome.Biomes.BAMBOO_JUNGLE, VanillaBiomes.bambooJungleBiome());
-        register(169, net.minecraft.world.level.biome.Biomes.BAMBOO_JUNGLE_HILLS, VanillaBiomes.bambooJungleHillsBiome());
-        register(170, net.minecraft.world.level.biome.Biomes.SOUL_SAND_VALLEY, VanillaBiomes.soulSandValleyBiome());
-        register(171, net.minecraft.world.level.biome.Biomes.CRIMSON_FOREST, VanillaBiomes.crimsonForestBiome());
-        register(172, net.minecraft.world.level.biome.Biomes.WARPED_FOREST, VanillaBiomes.warpedForestBiome());
-        register(173, net.minecraft.world.level.biome.Biomes.BASALT_DELTAS, VanillaBiomes.basaltDeltasBiome());
+        register(0, OCEAN, VanillaBiomes.oceanBiome(false));
+        register(2, DESERT, VanillaBiomes.desertBiome(0.125f, 0.05f, true, true, true));
+        register(3, MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.MOUNTAIN, false));
+        register(4, FOREST, VanillaBiomes.forestBiome(0.1f, 0.2f));
+        register(5, TAIGA, VanillaBiomes.taigaBiome(0.2f, 0.2f, false, false, true, false));
+        register(6, SWAMP, VanillaBiomes.swampBiome(-0.2f, 0.1f, false));
+        register(7, RIVER, VanillaBiomes.riverBiome(-0.5f, 0.0f, 0.5f, 4159204, false));
+        register(8, NETHER_WASTES, VanillaBiomes.netherWastesBiome());
+        register(9, THE_END, VanillaBiomes.theEndBiome());
+        register(10, FROZEN_OCEAN, VanillaBiomes.frozenOceanBiome(false));
+        register(11, FROZEN_RIVER, VanillaBiomes.riverBiome(-0.5f, 0.0f, 0.0f, 3750089, true));
+        register(12, SNOWY_TUNDRA, VanillaBiomes.tundraBiome(0.125f, 0.05f, false, false));
+        register(13, SNOWY_MOUNTAINS, VanillaBiomes.tundraBiome(0.45f, 0.3f, false, true));
+        register(14, MUSHROOM_FIELDS, VanillaBiomes.mushroomFieldsBiome(0.2f, 0.3f));
+        register(15, MUSHROOM_FIELD_SHORE, VanillaBiomes.mushroomFieldsBiome(0.0f, 0.025f));
+        register(16, BEACH, VanillaBiomes.beachBiome(0.0f, 0.025f, 0.8f, 0.4f, 4159204, false, false));
+        register(17, DESERT_HILLS, VanillaBiomes.desertBiome(0.45f, 0.3f, false, true, false));
+        register(18, WOODED_HILLS, VanillaBiomes.forestBiome(0.45f, 0.3f));
+        register(19, TAIGA_HILLS, VanillaBiomes.taigaBiome(0.45f, 0.3f, false, false, false, false));
+        register(20, MOUNTAIN_EDGE, VanillaBiomes.mountainBiome(0.8f, 0.3f, SurfaceBuilders.GRASS, true));
+        register(21, JUNGLE, VanillaBiomes.jungleBiome());
+        register(22, JUNGLE_HILLS, VanillaBiomes.jungleHillsBiome());
+        register(23, JUNGLE_EDGE, VanillaBiomes.jungleEdgeBiome());
+        register(24, DEEP_OCEAN, VanillaBiomes.oceanBiome(true));
+        register(25, STONE_SHORE, VanillaBiomes.beachBiome(0.1f, 0.8f, 0.2f, 0.3f, 4159204, false, true));
+        register(26, SNOWY_BEACH, VanillaBiomes.beachBiome(0.0f, 0.025f, 0.05f, 0.3f, 4020182, true, false));
+        register(27, BIRCH_FOREST, VanillaBiomes.birchForestBiome(0.1f, 0.2f, false));
+        register(28, BIRCH_FOREST_HILLS, VanillaBiomes.birchForestBiome(0.45f, 0.3f, false));
+        register(29, DARK_FOREST, VanillaBiomes.darkForestBiome(0.1f, 0.2f, false));
+        register(30, SNOWY_TAIGA, VanillaBiomes.taigaBiome(0.2f, 0.2f, true, false, false, true));
+        register(31, SNOWY_TAIGA_HILLS, VanillaBiomes.taigaBiome(0.45f, 0.3f, true, false, false, false));
+        register(32, GIANT_TREE_TAIGA, VanillaBiomes.giantTreeTaiga(0.2f, 0.2f, 0.3f, false));
+        register(33, GIANT_TREE_TAIGA_HILLS, VanillaBiomes.giantTreeTaiga(0.45f, 0.3f, 0.3f, false));
+        register(34, WOODED_MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.GRASS, true));
+        register(35, SAVANNA, VanillaBiomes.savannaBiome(0.125f, 0.05f, 1.2f, false, false));
+        register(36, SAVANNA_PLATEAU, VanillaBiomes.savanaPlateauBiome());
+        register(37, BADLANDS, VanillaBiomes.badlandsBiome(0.1f, 0.2f, false));
+        register(38, WOODED_BADLANDS_PLATEAU, VanillaBiomes.woodedBadlandsPlateauBiome(1.5f, 0.025f));
+        register(39, BADLANDS_PLATEAU, VanillaBiomes.badlandsBiome(1.5f, 0.025f, true));
+        register(40, SMALL_END_ISLANDS, VanillaBiomes.smallEndIslandsBiome());
+        register(41, END_MIDLANDS, VanillaBiomes.endMidlandsBiome());
+        register(42, END_HIGHLANDS, VanillaBiomes.endHighlandsBiome());
+        register(43, END_BARRENS, VanillaBiomes.endBarrensBiome());
+        register(44, WARM_OCEAN, VanillaBiomes.warmOceanBiome());
+        register(45, LUKEWARM_OCEAN, VanillaBiomes.lukeWarmOceanBiome(false));
+        register(46, COLD_OCEAN, VanillaBiomes.coldOceanBiome(false));
+        register(47, DEEP_WARM_OCEAN, VanillaBiomes.deepWarmOceanBiome());
+        register(48, DEEP_LUKEWARM_OCEAN, VanillaBiomes.lukeWarmOceanBiome(true));
+        register(49, DEEP_COLD_OCEAN, VanillaBiomes.coldOceanBiome(true));
+        register(50, DEEP_FROZEN_OCEAN, VanillaBiomes.frozenOceanBiome(true));
+        register(129, SUNFLOWER_PLAINS, VanillaBiomes.plainsBiome(true));
+        register(130, DESERT_LAKES, VanillaBiomes.desertBiome(0.225f, 0.25f, false, false, false));
+        register(131, GRAVELLY_MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.GRAVELLY_MOUNTAIN, false));
+        register(132, FLOWER_FOREST, VanillaBiomes.flowerForestBiome());
+        register(133, TAIGA_MOUNTAINS, VanillaBiomes.taigaBiome(0.3f, 0.4f, false, true, false, false));
+        register(134, SWAMP_HILLS, VanillaBiomes.swampBiome(-0.1f, 0.3f, true));
+        register(140, ICE_SPIKES, VanillaBiomes.tundraBiome(0.425f, 0.45000002f, true, false));
+        register(149, MODIFIED_JUNGLE, VanillaBiomes.modifiedJungleBiome());
+        register(151, MODIFIED_JUNGLE_EDGE, VanillaBiomes.modifiedJungleEdgeBiome());
+        register(155, TALL_BIRCH_FOREST, VanillaBiomes.birchForestBiome(0.2f, 0.4f, true));
+        register(156, TALL_BIRCH_HILLS, VanillaBiomes.birchForestBiome(0.55f, 0.5f, true));
+        register(157, DARK_FOREST_HILLS, VanillaBiomes.darkForestBiome(0.2f, 0.4f, true));
+        register(158, SNOWY_TAIGA_MOUNTAINS, VanillaBiomes.taigaBiome(0.3f, 0.4f, true, true, false, false));
+        register(160, GIANT_SPRUCE_TAIGA, VanillaBiomes.giantTreeTaiga(0.2f, 0.2f, 0.25f, true));
+        register(161, GIANT_SPRUCE_TAIGA_HILLS, VanillaBiomes.giantTreeTaiga(0.2f, 0.2f, 0.25f, true));
+        register(162, MODIFIED_GRAVELLY_MOUNTAINS, VanillaBiomes.mountainBiome(1.0f, 0.5f, SurfaceBuilders.GRAVELLY_MOUNTAIN, false));
+        register(163, SHATTERED_SAVANNA, VanillaBiomes.savannaBiome(0.3625f, 1.225f, 1.1f, true, true));
+        register(164, SHATTERED_SAVANNA_PLATEAU, VanillaBiomes.savannaBiome(1.05f, 1.2125001f, 1.0f, true, true));
+        register(165, ERODED_BADLANDS, VanillaBiomes.erodedBadlandsBiome());
+        register(166, MODIFIED_WOODED_BADLANDS_PLATEAU, VanillaBiomes.woodedBadlandsPlateauBiome(0.45f, 0.3f));
+        register(167, MODIFIED_BADLANDS_PLATEAU, VanillaBiomes.badlandsBiome(0.45f, 0.3f, true));
+        register(168, BAMBOO_JUNGLE, VanillaBiomes.bambooJungleBiome());
+        register(169, BAMBOO_JUNGLE_HILLS, VanillaBiomes.bambooJungleHillsBiome());
+        register(170, SOUL_SAND_VALLEY, VanillaBiomes.soulSandValleyBiome());
+        register(171, CRIMSON_FOREST, VanillaBiomes.crimsonForestBiome());
+        register(172, WARPED_FOREST, VanillaBiomes.warpedForestBiome());
+        register(173, BASALT_DELTAS, VanillaBiomes.basaltDeltasBiome());
     }
 }
diff --git a/src/main/java/net/minecraft/data/worldgen/biome/VanillaBiomes.java b/src/main/java/net/minecraft/data/worldgen/biome/VanillaBiomes.java
index dcd50495df69467fd25957fd458291c581c86dc4..51fce0356079ec0cb0d81109b17c2f3b86f6267d 100644
--- a/src/main/java/net/minecraft/data/worldgen/biome/VanillaBiomes.java
+++ b/src/main/java/net/minecraft/data/worldgen/biome/VanillaBiomes.java
@@ -248,41 +248,40 @@ public class VanillaBiomes
     }
     
     public static Biome plainsBiome(final boolean debug0) {
-        final MobSpawnSettings.Builder debug = new MobSpawnSettings.Builder();
-        BiomeDefaultFeatures.plainsSpawns(debug);
+        final MobSpawnSettings.Builder builder = new MobSpawnSettings.Builder();
+        BiomeDefaultFeatures.plainsSpawns(builder);
         if (!debug0) {
-            debug.setPlayerCanSpawn();
+            builder.setPlayerCanSpawn();
         }
-        final BiomeGenerationSettings.Builder debug2 = new BiomeGenerationSettings.Builder().surfaceBuilder(SurfaceBuilders.GRASS);
+        final BiomeGenerationSettings.Builder surfaceBuilder = new BiomeGenerationSettings.Builder().surfaceBuilder(SurfaceBuilders.GRASS);
         if (!debug0) {
-            debug2.addStructureStart(StructureFeatures.VILLAGE_PLAINS).addStructureStart(StructureFeatures.PILLAGER_OUTPOST);
-        }
-        BiomeDefaultFeatures.addDefaultOverworldLandStructures(debug2);
-        debug2.addStructureStart(StructureFeatures.RUINED_PORTAL_STANDARD);
-        BiomeDefaultFeatures.addDefaultCarvers(debug2);
-        BiomeDefaultFeatures.addDefaultLakes(debug2);
-        BiomeDefaultFeatures.addDefaultMonsterRoom(debug2);
-        BiomeDefaultFeatures.addPlainGrass(debug2);
+            surfaceBuilder.addStructureStart(StructureFeatures.VILLAGE_PLAINS).addStructureStart(StructureFeatures.PILLAGER_OUTPOST);
+        }
+        BiomeDefaultFeatures.addDefaultOverworldLandStructures(surfaceBuilder);
+        surfaceBuilder.addStructureStart(StructureFeatures.RUINED_PORTAL_STANDARD);
+        BiomeDefaultFeatures.addDefaultCarvers(surfaceBuilder);
+        BiomeDefaultFeatures.addDefaultLakes(surfaceBuilder);
+        BiomeDefaultFeatures.addDefaultMonsterRoom(surfaceBuilder);
+        BiomeDefaultFeatures.addPlainGrass(surfaceBuilder);
         if (debug0) {
-            debug2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Features.PATCH_SUNFLOWER);
+            surfaceBuilder.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Features.PATCH_SUNFLOWER);
         }
-        BiomeDefaultFeatures.addDefaultUndergroundVariety(debug2);
-        BiomeDefaultFeatures.addDefaultOres(debug2);
-        BiomeDefaultFeatures.addDefaultSoftDisks(debug2);
-        BiomeDefaultFeatures.addPlainVegetation(debug2);
+        BiomeDefaultFeatures.addDefaultUndergroundVariety(surfaceBuilder);
+        BiomeDefaultFeatures.addDefaultOres(surfaceBuilder);
+        BiomeDefaultFeatures.addDefaultSoftDisks(surfaceBuilder);
+        BiomeDefaultFeatures.addPlainVegetation(surfaceBuilder);
         if (debug0) {
-            debug2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Features.PATCH_SUGAR_CANE);
+            surfaceBuilder.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Features.PATCH_SUGAR_CANE);
         }
-        BiomeDefaultFeatures.addDefaultMushrooms(debug2);
+        BiomeDefaultFeatures.addDefaultMushrooms(surfaceBuilder);
         if (debug0) {
-            debug2.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Features.PATCH_PUMPKIN);
+            surfaceBuilder.addFeature(GenerationStep.Decoration.VEGETAL_DECORATION, Features.PATCH_PUMPKIN);
+        } else {
+            BiomeDefaultFeatures.addDefaultExtraVegetation(surfaceBuilder);
         }
-        else {
-            BiomeDefaultFeatures.addDefaultExtraVegetation(debug2);
-        }
-        BiomeDefaultFeatures.addDefaultSprings(debug2);
-        BiomeDefaultFeatures.addSurfaceFreezing(debug2);
-        return new Biome.BiomeBuilder().precipitation(Biome.Precipitation.RAIN).biomeCategory(Biome.BiomeCategory.PLAINS).depth(0.125f).scale(0.05f).temperature(0.8f).downfall(0.4f).specialEffects(new BiomeSpecialEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).skyColor(calculateSkyColor(0.8f)).ambientMoodSound(AmbientMoodSettings.LEGACY_CAVE_SETTINGS).build()).mobSpawnSettings(debug.build()).generationSettings(debug2.build()).build();
+        BiomeDefaultFeatures.addDefaultSprings(surfaceBuilder);
+        BiomeDefaultFeatures.addSurfaceFreezing(surfaceBuilder);
+        return new Biome.BiomeBuilder().precipitation(Biome.Precipitation.RAIN).biomeCategory(Biome.BiomeCategory.PLAINS).depth(0.125f).scale(0.05f).temperature(0.8f).downfall(0.4f).specialEffects(new BiomeSpecialEffects.Builder().waterColor(4159204).waterFogColor(329011).fogColor(12638463).skyColor(calculateSkyColor(0.8f)).ambientMoodSound(AmbientMoodSettings.LEGACY_CAVE_SETTINGS).build()).mobSpawnSettings(builder.build()).generationSettings(surfaceBuilder.build()).build();
     }
     
     private static Biome baseEndBiome(final BiomeGenerationSettings.Builder debug0) {
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 4b3499d9e5c24a40d7e8b84a025693ff220f28df..102af9e554e681a234c7e27430043225cbdca0b2 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -305,30 +305,30 @@ public class FriendlyByteBuf extends ByteBuf
         return this.readUtf(32767);
     }
     
-    public String readUtf(final int debug1) {
-        final int debug2 = this.readVarInt();
-        if (debug2 > debug1 * 4) {
-            throw new DecoderException("The received encoded string buffer length is longer than maximum allowed (" + debug2 + " > " + debug1 * 4 + ")");
+    public String readUtf(final int max) {
+        final int length = this.readVarInt();
+        if (length > max * 4) {
+            throw new DecoderException("The received encoded string buffer length is longer than maximum allowed (" + length + " > " + max * 4 + ")");
         }
-        if (debug2 < 0) {
+        if (length < 0) {
             throw new DecoderException("The received encoded string buffer length is less than zero! Weird string!");
         }
-        final String debug3 = this.toString(this.readerIndex(), debug2, StandardCharsets.UTF_8);
-        this.readerIndex(this.readerIndex() + debug2);
-        if (debug3.length() > debug1) {
-            throw new DecoderException("The received string length is longer than maximum allowed (" + debug2 + " > " + debug1 + ")");
+        final String string = this.toString(this.readerIndex(), length, StandardCharsets.UTF_8);
+        this.readerIndex(this.readerIndex() + length);
+        if (string.length() > max) {
+            throw new DecoderException("The received string length is longer than maximum allowed (" + length + " > " + max + ")");
         }
-        return debug3;
+        return string;
     }
     
-    public FriendlyByteBuf writeUtf(final String debug1) {
-        return this.writeUtf(debug1, 32767);
+    public FriendlyByteBuf writeUtf(final String s) {
+        return this.writeUtf(s, 32767);
     }
     
-    public FriendlyByteBuf writeUtf(final String debug1, final int debug2) {
-        final byte[] debug3 = debug1.getBytes(StandardCharsets.UTF_8);
-        if (debug3.length > debug2) {
-            throw new EncoderException("String too big (was " + debug3.length + " bytes encoded, max " + debug2 + ")");
+    public FriendlyByteBuf writeUtf(final String s, final int max) {
+        final byte[] debug3 = s.getBytes(StandardCharsets.UTF_8);
+        if (debug3.length > max) {
+            throw new EncoderException("String too big (was " + debug3.length + " bytes encoded, max " + max + ")");
         }
         this.writeVarInt(debug3.length);
         this.writeBytes(debug3);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
index 780ce07359ad0a82d585d6b845b32d5907aab2c4..84c90effebd105e26a8b97f8847d6d717e484d61 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
@@ -182,7 +182,7 @@ public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListe
         REMOVE_PLAYER;
     }
     
-    public class PlayerUpdate
+    public static class PlayerUpdate
     {
         private final int latency;
         private final GameType gameMode;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
index 7f0a6839cfb6e5554c19f0e43a0f6599f3cd8e21..7a76d83d6c0fa70aa8164f70d0c9630b78a196d6 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
@@ -77,7 +77,7 @@ public class ClientboundUpdateAttributesPacket implements Packet<ClientGamePacke
         return this.attributes;
     }
     
-    public class AttributeSnapshot
+    public static class AttributeSnapshot
     {
         private final Attribute attribute;
         private final double base;
diff --git a/src/main/java/net/minecraft/network/protocol/login/ClientboundGameProfilePacket.java b/src/main/java/net/minecraft/network/protocol/login/ClientboundGameProfilePacket.java
index ffbc635a765445c7defc18182fe77f5821585e09..401de85bb739edb3cda8977d6b5093521e5d85b7 100644
--- a/src/main/java/net/minecraft/network/protocol/login/ClientboundGameProfilePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/login/ClientboundGameProfilePacket.java
@@ -20,27 +20,27 @@ public class ClientboundGameProfilePacket implements Packet<ClientLoginPacketLis
     }
     
     @Override
-    public void read(final FriendlyByteBuf debug1) throws IOException {
-        final int[] debug2 = new int[4];
-        for (int debug3 = 0; debug3 < debug2.length; ++debug3) {
-            debug2[debug3] = debug1.readInt();
+    public void read(final FriendlyByteBuf byteBuf) throws IOException {
+        final int[] intArray = new int[4];
+        for (int i = 0; i < intArray.length; ++i) {
+            intArray[i] = byteBuf.readInt();
         }
-        final UUID debug4 = SerializableUUID.uuidFromIntArray(debug2);
-        final String debug5 = debug1.readUtf(16);
-        this.gameProfile = new GameProfile(debug4, debug5);
+        final UUID uuid = SerializableUUID.uuidFromIntArray(intArray);
+        final String name = byteBuf.readUtf(16);
+        this.gameProfile = new GameProfile(uuid, name);
     }
     
     @Override
-    public void write(final FriendlyByteBuf debug1) throws IOException {
-        for (final int debug2 : SerializableUUID.uuidToIntArray(this.gameProfile.getId())) {
-            debug1.writeInt(debug2);
+    public void write(final FriendlyByteBuf byteBuf) throws IOException {
+        for (final int uuid : SerializableUUID.uuidToIntArray(this.gameProfile.getId())) {
+            byteBuf.writeInt(uuid);
         }
-        debug1.writeUtf(this.gameProfile.getName());
+        byteBuf.writeUtf(this.gameProfile.getName());
     }
     
     @Override
-    public void handle(final ClientLoginPacketListener debug1) {
-        debug1.handleGameProfile(this);
+    public void handle(final ClientLoginPacketListener packet) {
+        packet.handleGameProfile(this);
     }
     
     public GameProfile getGameProfile() {
diff --git a/src/main/java/net/minecraft/resources/RegistryReadOps.java b/src/main/java/net/minecraft/resources/RegistryReadOps.java
index 7df5e57deae2b92d92e03aad1956b90e97cb75bc..3244b4e24f35ef53b7802727002ed7a4ff6e7385 100644
--- a/src/main/java/net/minecraft/resources/RegistryReadOps.java
+++ b/src/main/java/net/minecraft/resources/RegistryReadOps.java
@@ -62,106 +62,104 @@ import net.minecraft.server.packs.resources.ResourceManager;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class RegistryReadOps<T>
-extends DelegatingOps<T> {
+public class RegistryReadOps<T> extends DelegatingOps<T> {
     private static final Logger LOGGER = LogManager.getLogger();
     private final ResourceAccess resources;
     private final RegistryAccess.RegistryHolder registryHolder;
     private final Map<ResourceKey<? extends Registry<?>>, ReadCache<?>> readCache;
     private final RegistryReadOps<JsonElement> jsonOps;
 
-    public static <T> RegistryReadOps<T> create(DynamicOps<T> debug0, ResourceManager debug1, RegistryAccess.RegistryHolder debug2) {
-        return RegistryReadOps.create(debug0, ResourceAccess.forResourceManager(debug1), debug2);
+    public static <T> RegistryReadOps<T> create(DynamicOps<T> dynamicOps, ResourceManager resourceManager, RegistryAccess.RegistryHolder holder) {
+        return RegistryReadOps.create(dynamicOps, ResourceAccess.forResourceManager(resourceManager), holder);
     }
 
-    public static <T> RegistryReadOps<T> create(DynamicOps<T> debug0, ResourceAccess debug1, RegistryAccess.RegistryHolder debug2) {
-        RegistryReadOps<T> debug3 = new RegistryReadOps<T>(debug0, debug1, debug2, Maps.newIdentityHashMap());
-        RegistryAccess.load(debug2, debug3);
-        return debug3;
+    public static <T> RegistryReadOps<T> create(DynamicOps<T> dynamicOps, ResourceAccess resourceAccess, RegistryAccess.RegistryHolder holder) {
+        RegistryReadOps<T> registryReadOps = new RegistryReadOps<>(dynamicOps, resourceAccess, holder, Maps.newIdentityHashMap());
+        RegistryAccess.load(holder, registryReadOps);
+        return registryReadOps;
     }
 
-    private RegistryReadOps(DynamicOps<T> debug1, ResourceAccess debug2, RegistryAccess.RegistryHolder debug3, IdentityHashMap<ResourceKey<? extends Registry<?>>, ReadCache<?>> debug4) {
-        super(debug1);
-        this.resources = debug2;
-        this.registryHolder = debug3;
-        this.readCache = debug4;
-        this.jsonOps = (debug1 == JsonOps.INSTANCE) ? (RegistryReadOps)this : new RegistryReadOps((DynamicOps<T>)JsonOps.INSTANCE, debug2, debug3, debug4); // MagmaCube - decompile fix
+    private RegistryReadOps(DynamicOps<T> dynamicOps, ResourceAccess resourceAccess, RegistryAccess.RegistryHolder registryHolder, IdentityHashMap<ResourceKey<? extends Registry<?>>, ReadCache<?>> map) {
+        super(dynamicOps);
+        this.resources = resourceAccess;
+        this.registryHolder = registryHolder;
+        this.readCache = map;
+        this.jsonOps = (dynamicOps == JsonOps.INSTANCE) ? (RegistryReadOps<JsonElement>) this : new RegistryReadOps<>(JsonOps.INSTANCE, resourceAccess, registryHolder, map); // MagmaCube - decompile fix
     }
 
-    protected <E> DataResult<Pair<java.util.function.Supplier<E>, T>> decodeElement(T debug12, ResourceKey<? extends Registry<E>> debug2, Codec<E> debug3, boolean debug4) {
-        Optional<WritableRegistry<E>> debug5 = this.registryHolder.registry(debug2); // MagmaCube - decompile fix
-        if (!debug5.isPresent()) {
-            return DataResult.error((String)("Unknown registry: " + debug2));
+    protected <E> DataResult<Pair<java.util.function.Supplier<E>, T>> decodeElement(T input, ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec, boolean allowInlineDefinitions) {
+        Optional<WritableRegistry<E>> optional = this.registryHolder.registry(resourceKey); // MagmaCube - decompile fix
+        if (!optional.isPresent()) {
+            return DataResult.error("Unknown registry: " + resourceKey);
         }
-        WritableRegistry debug6 = debug5.get();
-        DataResult<Pair<ResourceLocation, T>> debug7 = ResourceLocation.CODEC.decode(this.delegate, debug12); // MagmaCube - decompile fix
-        if (!debug7.result().isPresent()) {
-            if (!debug4) {
-                return DataResult.error((String)"Inline definitions not allowed here");
+        WritableRegistry<E> writableRegistry = optional.get();
+        DataResult<Pair<ResourceLocation, T>> dataResult = ResourceLocation.CODEC.decode(this.delegate, input); // MagmaCube - decompile fix
+        if (!dataResult.result().isPresent()) {
+            if (!allowInlineDefinitions) {
+                return DataResult.error("Inline definitions not allowed here");
             }
-            return debug3.decode(this, debug12).map(debug02 -> debug02.mapFirst(debug0 -> () -> debug0)); // MagmaCube - decompile fix
+            return codec.decode(this, input).map(pair -> pair.mapFirst(instance -> () -> instance)); // MagmaCube - decompile fix
         }
-        Pair<ResourceLocation, T> debug8 = debug7.result().get(); // MagmaCube - decompile fix
-        ResourceLocation debug9 = (ResourceLocation)debug8.getFirst();
-        return this.readAndRegisterElement(debug2, debug6, debug3, debug9).map(debug1 -> Pair.of((Object)debug1, (Object)debug8.getSecond()));
+        Pair<ResourceLocation, T> pair = dataResult.result().get(); // MagmaCube - decompile fix
+        ResourceLocation resourceLocation = pair.getFirst();
+        return this.readAndRegisterElement(resourceKey, writableRegistry, codec, resourceLocation).map(supplier -> Pair.of(supplier, pair.getSecond()));
     }
 
-    public <E> DataResult<MappedRegistry<E>> decodeElements(MappedRegistry<E> debug1, ResourceKey<? extends Registry<E>> debug2, Codec<E> debug3) {
-        Collection<ResourceLocation> debug42 = this.resources.listResources(debug2);
-        DataResult<MappedRegistry<E>> debug5 = DataResult.success(debug1, (Lifecycle)Lifecycle.stable()); // MagmaCube - decompile fix
-        String debug6 = debug2.location().getPath() + "/";
-        for (ResourceLocation debug8 : debug42) {
-            String debug9 = debug8.getPath();
-            if (!debug9.endsWith(".json")) {
-                LOGGER.warn("Skipping resource {} since it is not a json file", (Object)debug8);
+    public <E> DataResult<MappedRegistry<E>> decodeElements(MappedRegistry<E> registry, ResourceKey<? extends Registry<E>> resourceKey, Codec<E> mapCodec) {
+        Collection<ResourceLocation> resources = this.resources.listResources(resourceKey);
+        DataResult<MappedRegistry<E>> dataResult = DataResult.success(registry, (Lifecycle)Lifecycle.stable());
+        String prefix = resourceKey.location().getPath() + "/";
+        for (ResourceLocation location : resources) {
+            String path = location.getPath();
+            if (!path.endsWith(".json")) {
+                LOGGER.warn("Skipping resource {} since it is not a json file", (Object)location);
                 continue;
             }
-            if (!debug9.startsWith(debug6)) {
-                LOGGER.warn("Skipping resource {} since it does not have a registry name prefix", (Object)debug8);
+            if (!path.startsWith(prefix)) {
+                LOGGER.warn("Skipping resource {} since it does not have a registry name prefix", (Object)location);
                 continue;
             }
-            String debug10 = debug9.substring(debug6.length(), debug9.length() - ".json".length());
-            ResourceLocation debug11 = new ResourceLocation(debug8.getNamespace(), debug10);
-            debug5 = debug5.flatMap(debug4 -> this.readAndRegisterElement(debug2, (WritableRegistry)debug4, debug3, debug11).map(debug12 -> debug4));
+            String debug10 = path.substring(prefix.length(), path.length() - ".json".length());
+            ResourceLocation newLocation = new ResourceLocation(location.getNamespace(), debug10);
+            dataResult = dataResult.flatMap(mappedRegistry -> this.readAndRegisterElement(resourceKey, mappedRegistry, mapCodec, newLocation).map(debug12 -> mappedRegistry));
         }
-        return debug5.setPartial(debug1);
+        return dataResult.setPartial(registry);
     }
 
-    private <E> DataResult<Supplier<E>> readAndRegisterElement(ResourceKey<? extends Registry<E>> debug1, WritableRegistry<E> debug22, Codec<E> debug3, ResourceLocation debug4) {
-        DataResult<Supplier<E>> debug11; // MagmaCube - decompile fix
-        ResourceKey<E> debug5 = ResourceKey.create(debug1, debug4);
-        ReadCache<E> debug6 = this.readCache(debug1);
-        DataResult<Supplier<E>> debug7 = (DataResult)(debug6).values.get(debug5);
-        if (debug7 != null) {
-            return debug7;
+    private <E> DataResult<java.util.function.Supplier<E>> readAndRegisterElement(ResourceKey<? extends Registry<E>> key, WritableRegistry<E> writableRegistry, Codec<E> codec, ResourceLocation resourceLocation) {
+        ResourceKey<E> objectKey = ResourceKey.create(key, resourceLocation);
+        ReadCache<E> cache = this.readCache(key);
+        DataResult<java.util.function.Supplier<E>> dataResult = cache.values.get(objectKey);
+        if (dataResult != null) {
+            return dataResult;
         }
-        Supplier debug8 = Suppliers.memoize(() -> {
-            Object debug2 = debug22.get(debug5);
+        java.util.function.Supplier<E> supplier = Suppliers.memoize(() -> {
+            E debug2 = writableRegistry.get(objectKey);
             if (debug2 == null) {
-                throw new RuntimeException("Error during recursive registry parsing, element resolved too early: " + debug5);
+                throw new RuntimeException("Error during recursive registry parsing, element resolved too early: " + objectKey);
             }
             return debug2;
         });
-        ((ReadCache)debug6).values.put(debug5, DataResult.success((Object)debug8));
-        DataResult<Pair<E, OptionalInt>> debug9 = this.resources.parseElement(this.jsonOps, debug1, debug5, debug3); // MagmaCube - decompile fix
-        Optional<Pair<E, OptionalInt>> debug10 = debug9.result(); // MagmaCube - decompile fix
-        if (debug10.isPresent()) {
-            Pair<E, OptionalInt> pair = debug10.get(); // MagmaCube - decompile fix
-            debug22.registerOrOverride((OptionalInt)pair.getSecond(), debug5, pair.getFirst(), debug9.lifecycle()); // MagmaCube - decompile fix
+        cache.values.put(objectKey, DataResult.success(supplier));
+        DataResult<Pair<E, OptionalInt>> result = this.resources.parseElement(this.jsonOps, key, objectKey, codec); // MagmaCube - decompile fix
+        Optional<Pair<E, OptionalInt>> optionalPair = result.result(); // MagmaCube - decompile fix
+        if (optionalPair.isPresent()) {
+            Pair<E, OptionalInt> pair = optionalPair.get(); // MagmaCube - decompile fix
+            writableRegistry.registerOrOverride(pair.getSecond(), objectKey, pair.getFirst(), result.lifecycle()); // MagmaCube - decompile fix
         }
-        debug11 = !debug10.isPresent() && debug22.get(debug5) != null ? DataResult.success(() -> debug22.get(debug5), (Lifecycle)Lifecycle.stable()) : debug9.map(debug2 -> () -> debug22.get(debug5));
-        ((ReadCache)debug6).values.put(debug5, debug11);
-        return debug11;
+        DataResult<java.util.function.Supplier<E>> supplierDataResult = !optionalPair.isPresent() && writableRegistry.get(objectKey) != null ? DataResult.success(() -> writableRegistry.get(objectKey), (Lifecycle)Lifecycle.stable()) : result.map(debug2 -> () -> writableRegistry.get(objectKey));
+        cache.values.put(objectKey, supplierDataResult);
+        return supplierDataResult;
     }
 
-    private <E> ReadCache<E> readCache(ResourceKey<? extends Registry<E>> debug1) {
-        return (ReadCache<E>) this.readCache.computeIfAbsent(debug1, debug0 -> new ReadCache()); // MagmaCube - decompile fix
+    private <E> ReadCache<E> readCache(ResourceKey<? extends Registry<E>> resourceKey) {
+        return (ReadCache<E>) this.readCache.computeIfAbsent(resourceKey, debug0 -> new ReadCache<>()); // MagmaCube - decompile fix
     }
 
-    protected <E> DataResult<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> debug1) {
-        return this.registryHolder.registry(debug1)
-                .map(debug0 -> DataResult.success(debug0, debug0.elementsLifecycle()))
-                .orElseGet(() -> DataResult.error("Unknown registry: " + debug1));
+    protected <E> DataResult<WritableRegistry<E>> registry(ResourceKey<? extends Registry<E>> resourceKey) {
+        return this.registryHolder.registry(resourceKey)
+                .map(writableRegistry -> DataResult.success(writableRegistry, writableRegistry.elementsLifecycle()))
+                .orElseGet(() -> DataResult.error("Unknown registry: " + resourceKey));
     }
 
     public static interface ResourceAccess {
@@ -169,35 +167,35 @@ extends DelegatingOps<T> {
 
         public <E> DataResult<Pair<E, OptionalInt>> parseElement(DynamicOps<JsonElement> var1, ResourceKey<? extends Registry<E>> var2, ResourceKey<E> var3, Decoder<E> var4);
 
-        public static ResourceAccess forResourceManager(final ResourceManager debug0) {
+        public static ResourceAccess forResourceManager(final ResourceManager resourceManager) {
             return new ResourceAccess(){
 
                 @Override
                 public Collection<ResourceLocation> listResources(ResourceKey<? extends Registry<?>> debug1) {
-                    return debug0.listResources(debug1.location().getPath(), debug0 -> debug0.endsWith(".json"));
+                    return resourceManager.listResources(debug1.location().getPath(), debug0 -> debug0.endsWith(".json"));
                 }
 
                 /*
                  * Exception decompiling
                  */
                 @Override
-                public <E> DataResult<Pair<E, OptionalInt>> parseElement(DynamicOps<JsonElement> debug1, ResourceKey<? extends Registry<E>> debug2, ResourceKey<E> debug3, Decoder<E> debug4) {
+                public <E> DataResult<Pair<E, OptionalInt>> parseElement(DynamicOps<JsonElement> jsonElementDynamicOps, ResourceKey<? extends Registry<E>> resourceKey, ResourceKey<E> objectKey, Decoder<E> decoder) {
                     // MagmaCube start - decompile fix
-                    ResourceLocation debug5 = debug3.location();
-                    ResourceLocation debug6 = new ResourceLocation(debug5.getNamespace(), debug2.location().getPath() + "/" + debug5.getPath() + ".json");
-                    try(Resource debug7 = debug0.getResource(debug6);
-                        Reader debug9 = new InputStreamReader(debug7.getInputStream(), StandardCharsets.UTF_8)) {
-                        JsonParser debug11 = new JsonParser();
-                        JsonElement debug12 = debug11.parse(debug9);
-                        return debug4.parse(debug1, debug12).map(debug0 -> Pair.of(debug0, OptionalInt.empty()));
-                    } catch (IOException |com.google.gson.JsonIOException|com.google.gson.JsonSyntaxException debug7) {
-                        return DataResult.error("Failed to parse " + debug6 + " file: " + debug7.getMessage());
+                    ResourceLocation objectLocation = objectKey.location();
+                    ResourceLocation resourceLocation = new ResourceLocation(objectLocation.getNamespace(), resourceKey.location().getPath() + "/" + objectLocation.getPath() + ".json");
+                    try(Resource resource = resourceManager.getResource(resourceLocation);
+                        Reader reader = new InputStreamReader(resource.getInputStream(), StandardCharsets.UTF_8)) {
+                        JsonParser parser = new JsonParser();
+                        JsonElement element = parser.parse(reader);
+                        return decoder.parse(jsonElementDynamicOps, element).map(instance -> Pair.of(instance, OptionalInt.empty()));
+                    } catch (IOException |com.google.gson.JsonIOException|com.google.gson.JsonSyntaxException ex) {
+                        return DataResult.error("Failed to parse " + resourceLocation + " file: " + ex.getMessage());
                     }
                     // MagmaCube end - decompile fix
                 }
 
                 public String toString() {
-                    return "ResourceAccess[" + debug0 + "]";
+                    return "ResourceAccess[" + resourceManager + "]";
                 }
             };
         }
@@ -208,30 +206,30 @@ extends DelegatingOps<T> {
             private final Object2IntMap<ResourceKey<?>> ids = new Object2IntOpenCustomHashMap(Util.identityStrategy());
             private final Map<ResourceKey<?>, Lifecycle> lifecycles = Maps.newIdentityHashMap();
 
-            public <E> void add(RegistryAccess.RegistryHolder debug1, ResourceKey<E> debug2, Encoder<E> debug3, int debug4, E debug5, Lifecycle debug6) {
-                DataResult debug7 = debug3.encodeStart(RegistryWriteOps.create(JsonOps.INSTANCE, debug1), debug5);
-                Optional debug8 = debug7.error();
-                if (debug8.isPresent()) {
-                    LOGGER.error("Error adding element: {}", (Object)((DataResult.PartialResult)debug8.get()).message());
+            public <E> void add(RegistryAccess.RegistryHolder registryHolder, ResourceKey<E> resourceKey, Encoder<E> encoder, int id, E instance, Lifecycle lifecycle) {
+                DataResult<JsonElement> dataResult = encoder.encodeStart(RegistryWriteOps.create(JsonOps.INSTANCE, registryHolder), instance);
+                Optional<DataResult.PartialResult<JsonElement>> optional = dataResult.error();
+                if (optional.isPresent()) {
+                    LOGGER.error("Error adding element: {}", optional.get().message());
                     return;
                 }
-                this.data.put(debug2, (JsonElement)debug7.result().get());
-                this.ids.put(debug2, debug4);
-                this.lifecycles.put(debug2, debug6);
+                this.data.put(resourceKey, dataResult.result().get());
+                this.ids.put(resourceKey, id);
+                this.lifecycles.put(resourceKey, lifecycle);
             }
 
             @Override
-            public Collection<ResourceLocation> listResources(ResourceKey<? extends Registry<?>> debug12) {
-                return this.data.keySet().stream().filter(debug1 -> debug1.isFor(debug12)).map(debug1 -> new ResourceLocation(debug1.location().getNamespace(), debug12.location().getPath() + "/" + debug1.location().getPath() + ".json")).collect(Collectors.toList());
+            public Collection<ResourceLocation> listResources(ResourceKey<? extends Registry<?>> resourceKey) {
+                return this.data.keySet().stream().filter(objectKey -> objectKey.isFor(resourceKey)).map(objectKey -> new ResourceLocation(objectKey.location().getNamespace(), resourceKey.location().getPath() + "/" + objectKey.location().getPath() + ".json")).collect(Collectors.toList());
             }
 
             @Override
-            public <E> DataResult<Pair<E, OptionalInt>> parseElement(DynamicOps<JsonElement> debug1, ResourceKey<? extends Registry<E>> debug22, ResourceKey<E> debug3, Decoder<E> debug4) {
-                JsonElement debug5 = this.data.get(debug3);
-                if (debug5 == null) {
-                    return DataResult.error((String)("Unknown element: " + debug3));
+            public <E> DataResult<Pair<E, OptionalInt>> parseElement(DynamicOps<JsonElement> dynamicOps, ResourceKey<? extends Registry<E>> resourceKey, ResourceKey<E> key, Decoder<E> decoder) {
+                JsonElement json = this.data.get(key);
+                if (json == null) {
+                    return DataResult.error("Unknown element: " + key);
                 }
-                return debug4.parse(debug1, debug5).setLifecycle(this.lifecycles.get(debug3)).map(debug2 -> Pair.of(debug2, OptionalInt.of(this.ids.getInt((Object)debug3)))); // MagmaCube - decompile fix
+                return decoder.parse(dynamicOps, json).setLifecycle(this.lifecycles.get(key)).map(instance -> Pair.of(instance, OptionalInt.of(this.ids.getInt(key)))); // MagmaCube - decompile fix
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/bossevents/CustomBossEvent.java b/src/main/java/net/minecraft/server/bossevents/CustomBossEvent.java
index 1b3a9ba63bb7c04f25979d5459505f2493753c66..78dffd408513d2b3d89e0a6d4b953b24018c6c12 100644
--- a/src/main/java/net/minecraft/server/bossevents/CustomBossEvent.java
+++ b/src/main/java/net/minecraft/server/bossevents/CustomBossEvent.java
@@ -73,12 +73,12 @@ public class CustomBossEvent extends ServerBossEvent
     
     public void setValue(final int debug1) {
         this.value = debug1;
-        this.setPercent(Mth.clamp(debug1 / this.max, 0.0f, 1.0f));
+        this.setPercent(Mth.clamp((float)debug1 / (float)this.max, 0.0f, 1.0f));
     }
     
     public void setMax(final int debug1) {
         this.max = debug1;
-        this.setPercent(Mth.clamp(this.value / debug1, 0.0f, 1.0f));
+        this.setPercent(Mth.clamp((float)this.value / (float)debug1, 0.0f, 1.0f));
     }
     
     public final Component getDisplayName() {
diff --git a/src/main/java/net/minecraft/server/commands/EmoteCommands.java b/src/main/java/net/minecraft/server/commands/EmoteCommands.java
index 01877b8844176fb656511a5b46d84eb0e2a8bad6..c1706c27f830ad50fd4e0800d71f0463f4a86df3 100644
--- a/src/main/java/net/minecraft/server/commands/EmoteCommands.java
+++ b/src/main/java/net/minecraft/server/commands/EmoteCommands.java
@@ -34,7 +34,7 @@ public class EmoteCommands {
             if (debug2 != null) {
                 TextFilter debug4;
                 if (debug2 instanceof ServerPlayer && (debug4 = ((ServerPlayer)debug2).getTextFilter()) != null) {
-                    debug4.processStreamMessage(debug1).thenAcceptAsync(debug32 -> debug32.ifPresent(debug3 -> debug3.getPlayerList().broadcastMessage(EmoteCommands.createMessage((CommandContext<CommandSourceStack>)debug0, debug3), ChatType.CHAT, debug2.getUUID())), (Executor)debug3);
+                    debug4.processStreamMessage(debug1).thenAcceptAsync(debug32 -> debug32.ifPresent(debug3l -> debug3.getPlayerList().broadcastMessage(EmoteCommands.createMessage((CommandContext<CommandSourceStack>)debug0, debug3l), ChatType.CHAT, debug2.getUUID())), (Executor)debug3); // MagmaCube - decompile fix
                     return 1;
                 }
                 debug3.getPlayerList().broadcastMessage(EmoteCommands.createMessage((CommandContext<CommandSourceStack>)debug0, debug1), ChatType.CHAT, debug2.getUUID());
diff --git a/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java b/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
index 87bd24ce967f5b51e206fab3f76b70163daa060e..cfd435f50981f2461f5bdd4226a65ac30eefd846 100644
--- a/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
+++ b/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
@@ -48,7 +48,7 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
     }
     
     @Override
-    public int runUpdates(final int debug1, final boolean debug2, final boolean debug3) {
+    public int runUpdates(final int toUpdateCount, final boolean updateSkyLight, final boolean updateBlockLight) {
         throw Util.pauseInIde(new UnsupportedOperationException("Ran authomatically on a different thread!"));
     }
     
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index dce2893bfdee9ba6f9f5fab113524d8841865c83..bfec8f5f65548095337c8b01ec01dd612cf9d9d6 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -315,7 +315,7 @@ implements ServerGamePacketListener {
 
     private <T> void filterTextPacket(T debug12, Consumer<T> debug22, BiFunction<TextFilter, T, CompletableFuture<Optional<T>>> debug3) {
         MinecraftServer debug4 = this.player.getLevel().getServer();
-        Consumer<Object> debug5 = debug2 -> {
+        Consumer<T> debug5 = debug2 -> { // MagmaCube - decompile fix
             if (this.getConnection().isConnected()) {
                 debug22.accept(debug2);
             } else {
@@ -324,7 +324,7 @@ implements ServerGamePacketListener {
         };
         TextFilter debug6 = this.player.getTextFilter();
         if (debug6 != null) {
-            debug3.apply(debug6, (TextFilter)debug12).thenAcceptAsync(debug1 -> debug1.ifPresent(debug5), (Executor)debug4);
+            debug3.apply(debug6, debug12).thenAcceptAsync(debug1 -> debug1.ifPresent(debug5), (Executor)debug4); // MagmaCube - decompile fix
         } else {
             debug4.execute(() -> debug5.accept(debug12));
         }
@@ -706,7 +706,8 @@ implements ServerGamePacketListener {
         if (!Inventory.isHotbarSlot(debug7) && debug7 != 40) {
             return;
         }
-        this.filterTextPacket(debug4, debug5 ? debug2 -> this.signBook((String)debug2.get(0), debug2.subList(1, debug2.size()), debug7) : debug2 -> this.updateBookContents((List<String>)debug2, debug7));
+        int finalDebug = debug7; // MagmaCube - decompile fix
+        this.filterTextPacket(debug4, debug5 ? debug2 -> this.signBook((String)debug2.get(0), debug2.subList(1, debug2.size()), finalDebug) : debug2 -> this.updateBookContents((List<String>)debug2, finalDebug)); // MagmaCube - decompile fix
     }
 
     private void updateBookContents(List<String> debug1, int debug2) {
diff --git a/src/main/java/net/minecraft/server/network/TextFilterClient.java b/src/main/java/net/minecraft/server/network/TextFilterClient.java
index 74be68db987001bb323c42201734afb01063521d..09eb81a17d0f6ecfafd82082fbef8dc17b6f8ea3 100644
--- a/src/main/java/net/minecraft/server/network/TextFilterClient.java
+++ b/src/main/java/net/minecraft/server/network/TextFilterClient.java
@@ -1,6 +1,9 @@
 package net.minecraft.server.network;
 
 import java.util.List;
+
+import com.google.common.collect.ImmutableList;
+import net.minecraft.Util;
 import net.minecraft.util.thread.ProcessorMailbox;
 import org.apache.logging.log4j.LogManager;
 import com.google.gson.JsonElement;
@@ -33,14 +36,14 @@ public class TextFilterClient implements AutoCloseable
     private static final Logger LOGGER;
     private static final AtomicInteger WORKER_COUNT;
     private static final ThreadFactory THREAD_FACTORY;
-    private final URL chatEndpoint;
-    private final URL joinEndpoint;
-    private final URL leaveEndpoint;
-    private final String authKey;
-    private final int ruleId;
-    private final String serverId;
-    private final IgnoreStrategy chatIgnoreStrategy;
-    private final ExecutorService workerPool;
+    private final URL chatEndpoint = null; // MagmaCube - decompile fix
+    private final URL joinEndpoint = null; // MagmaCube - decompile fix
+    private final URL leaveEndpoint = null; // MagmaCube - decompile fix
+    private final String authKey = null; // MagmaCube - decompile fix
+    private final int ruleId = 0; // MagmaCube - decompile fix
+    private final String serverId = null; // MagmaCube - decompile fix
+    private final IgnoreStrategy chatIgnoreStrategy = null; // MagmaCube - decompile fix
+    private final ExecutorService workerPool = null; // MagmaCube - decompile fix
     
     private void processJoinOrLeave(final GameProfile debug1, final URL debug2, final Executor debug3) {
         final JsonObject debug4 = new JsonObject();
@@ -48,10 +51,9 @@ public class TextFilterClient implements AutoCloseable
         debug4.addProperty("room", "Chat");
         debug4.addProperty("user_id", debug1.getId().toString());
         debug4.addProperty("user_display_name", debug1.getName());
-        final JsonObject debug6;
         debug3.execute(() -> {
             try {
-                this.processRequest(debug6, debug2);
+                this.processRequest(debug4, debug2); // MagmaCube - decompile fix
             }
             catch (Exception debug5) {
                 TextFilterClient.LOGGER.warn("Failed to send join/leave packet to {} for player {}", (Object)debug2, (Object)debug1, (Object)debug5);
@@ -70,25 +72,20 @@ public class TextFilterClient implements AutoCloseable
         debug5.addProperty("player", debug1.getId().toString());
         debug5.addProperty("player_display_name", debug1.getName());
         debug5.addProperty("text", debug2);
-        final JsonObject debug11;
-        JsonObject debug6;
-        boolean debug7;
-        String debug8;
-        int debug9;
         return CompletableFuture.supplyAsync(() -> {
             try {
-                debug6 = this.processRequestResponse(debug11, this.chatEndpoint);
-                debug7 = GsonHelper.getAsBoolean(debug6, "response", false);
+                JsonObject debug6 = this.processRequestResponse(debug5, this.chatEndpoint); // MagmaCube - decompile fix
+                boolean debug7 = GsonHelper.getAsBoolean(debug6, "response", false); // MagmaCube - decompile fix
                 if (debug7) {
                     return Optional.of(debug2);
                 }
                 else {
-                    debug8 = GsonHelper.getAsString(debug6, "hashed", null);
+                    String debug8 = GsonHelper.getAsString(debug6, "hashed", null); // MagmaCube - decompile fix
                     if (debug8 == null) {
                         return Optional.empty();
                     }
                     else {
-                        debug9 = GsonHelper.getAsJsonArray(debug6, "hashes").size();
+                        int debug9 = GsonHelper.getAsJsonArray(debug6, "hashes").size(); // MagmaCube - decompile fix
                         return debug3.shouldIgnore(debug8, debug9) ? Optional.empty() : Optional.of(debug8);
                     }
                 }
@@ -162,9 +159,8 @@ public class TextFilterClient implements AutoCloseable
     static {
         LOGGER = LogManager.getLogger();
         WORKER_COUNT = new AtomicInteger(1);
-        final Thread debug;
         THREAD_FACTORY = (debug0 -> {
-            debug = new Thread(debug0);
+            Thread debug = new Thread(debug0); // MagmaCube - decompile fix
             debug.setName("Chat-Filter-Worker-" + TextFilterClient.WORKER_COUNT.getAndIncrement());
             return debug;
         });
@@ -200,103 +196,12 @@ public class TextFilterClient implements AutoCloseable
         
         @Override
         public CompletableFuture<Optional<List<String>>> processMessageBundle(final List<String> debug1) {
-            // 
-            // This method could not be decompiled.
-            // 
-            // Original Bytecode:
-            // 
-            //     1: invokeinterface java/util/List.stream:()Ljava/util/stream/Stream;
-            //     6: aload_0         /* this */
-            //     7: invokedynamic   BootstrapMethod #1, apply:(Lnet/minecraft/server/network/TextFilterClient$PlayerContext;)Ljava/util/function/Function;
-            //    12: invokeinterface java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
-            //    17: invokestatic    com/google/common/collect/ImmutableList.toImmutableList:()invokestatic   !!! ERROR
-            //    20: invokeinterface java/util/stream/Stream.collect:(invokeinterface!!! ERROR
-            //    25: checkcast       Ljava/util/List;
-            //    28: astore_2        /* debug2 */
-            //    29: aload_2         /* debug2 */
-            //    30: invokestatic    net/minecraft/Util.sequence:(Ljava/util/List;)Ljava/util/concurrent/CompletableFuture;
-            //    33: invokedynamic   BootstrapMethod #2, apply:()Ljava/util/function/Function;
-            //    38: invokevirtual   java/util/concurrent/CompletableFuture.thenApply:(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;
-            //    41: invokedynamic   BootstrapMethod #3, apply:()Ljava/util/function/Function;
-            //    46: invokevirtual   java/util/concurrent/CompletableFuture.exceptionally:(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;
-            //    49: areturn        
-            //    Signature:
-            //  (Ljava/util/List<Ljava/lang/String;>;)Ljava/util/concurrent/CompletableFuture<Ljava/util/Optional<Ljava/util/List<Ljava/lang/String;>;>;>;
-            // 
-            // The error that occurred was:
-            // 
-            // java.lang.IllegalArgumentException: Argument 'type' cannot be null.
-            //     at com.strobel.core.VerifyArgument.notNull(VerifyArgument.java:38)
-            //     at com.strobel.assembler.ir.attributes.LocalVariableTableEntry.<init>(LocalVariableTableEntry.java:41)
-            //     at com.strobel.assembler.ir.MetadataReader.readAttributeCore(MetadataReader.java:183)
-            //     at com.strobel.assembler.metadata.ClassFileReader.readAttributeCore(ClassFileReader.java:260)
-            //     at com.strobel.assembler.ir.MetadataReader.readAttribute(MetadataReader.java:50)
-            //     at com.strobel.assembler.ir.MetadataReader.readAttributes(MetadataReader.java:40)
-            //     at com.strobel.assembler.metadata.ClassFileReader.readAttributeCore(ClassFileReader.java:202)
-            //     at com.strobel.assembler.ir.MetadataReader.inflateAttribute(MetadataReader.java:368)
-            //     at com.strobel.assembler.ir.MetadataReader.inflateAttributes(MetadataReader.java:345)
-            //     at com.strobel.assembler.metadata.ClassFileReader.defineMethods(ClassFileReader.java:977)
-            //     at com.strobel.assembler.metadata.ClassFileReader.readClass(ClassFileReader.java:440)
-            //     at com.strobel.assembler.metadata.ClassFileReader.readClass(ClassFileReader.java:376)
-            //     at com.strobel.assembler.metadata.MetadataSystem.resolveType(MetadataSystem.java:124)
-            //     at com.strobel.decompiler.NoRetryMetadataSystem.resolveType(DecompilerDriver.java:482)
-            //     at com.strobel.assembler.metadata.MetadataSystem.resolveCore(MetadataSystem.java:76)
-            //     at com.strobel.assembler.metadata.MetadataResolver.resolve(MetadataResolver.java:104)
-            //     at com.strobel.assembler.metadata.CoreMetadataFactory$UnresolvedType.resolve(CoreMetadataFactory.java:614)
-            //     at com.strobel.assembler.metadata.MetadataResolver.resolve(MetadataResolver.java:91)
-            //     at com.strobel.assembler.metadata.CoreMetadataFactory$UnresolvedType.resolve(CoreMetadataFactory.java:614)
-            //     at com.strobel.assembler.metadata.ClassFileReader.populateNamedInnerTypes(ClassFileReader.java:697)
-            //     at com.strobel.assembler.metadata.ClassFileReader.readClass(ClassFileReader.java:441)
-            //     at com.strobel.assembler.metadata.ClassFileReader.readClass(ClassFileReader.java:376)
-            //     at com.strobel.assembler.metadata.MetadataSystem.resolveType(MetadataSystem.java:124)
-            //     at com.strobel.decompiler.NoRetryMetadataSystem.resolveType(DecompilerDriver.java:482)
-            //     at com.strobel.assembler.metadata.MetadataSystem.resolveCore(MetadataSystem.java:76)
-            //     at com.strobel.assembler.metadata.MetadataResolver.resolve(MetadataResolver.java:104)
-            //     at com.strobel.assembler.metadata.CoreMetadataFactory$UnresolvedType.resolve(CoreMetadataFactory.java:614)
-            //     at com.strobel.assembler.metadata.ParameterizedType.getGenericParameters(ParameterizedType.java:71)
-            //     at com.strobel.assembler.metadata.TypeReference.hasGenericParameters(TypeReference.java:244)
-            //     at com.strobel.assembler.metadata.TypeReference.isGenericType(TypeReference.java:263)
-            //     at com.strobel.assembler.metadata.MetadataHelper.isRawType(MetadataHelper.java:1597)
-            //     at com.strobel.assembler.metadata.MetadataHelper.asSubType(MetadataHelper.java:735)
-            //     at com.strobel.decompiler.ast.TypeAnalysis$AddMappingsForArgumentVisitor.visitParameterizedType(TypeAnalysis.java:3205)
-            //     at com.strobel.decompiler.ast.TypeAnalysis$AddMappingsForArgumentVisitor.visitParameterizedType(TypeAnalysis.java:3116)
-            //     at com.strobel.assembler.metadata.CoreMetadataFactory$UnresolvedGenericType.accept(CoreMetadataFactory.java:651)
-            //     at com.strobel.decompiler.ast.TypeAnalysis$AddMappingsForArgumentVisitor.visit(TypeAnalysis.java:3125)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.inferCall(TypeAnalysis.java:2512)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1029)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:766)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1499)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:770)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:881)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:803)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:672)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:655)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:365)
-            //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:96)
-            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:109)
-            //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
-            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
-            //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:556)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
-            //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
-            //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
-            //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
-            //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:336)
-            //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:257)
-            //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
-            // 
-            throw new IllegalStateException("An error occurred while decompiling this method.");
+            // MagmaCube start - decompile fix
+            List<CompletableFuture<Optional<String>>> debug2 = debug1.stream().map(debug1l -> TextFilterClient.this.requestMessageProcessing(this.profile, debug1l, TextFilterClient.this.chatIgnoreStrategy, this.streamExecutor)).collect(ImmutableList.toImmutableList());
+            return Util.sequence(debug2)
+                    .thenApply(debug0 -> Optional.<List<String>>of(debug0.stream().map(o -> o.orElse("")).collect(ImmutableList.toImmutableList())))
+                    .exceptionally(debug0 -> Optional.empty());
+            // MagmaCube end - decompile fix
         }
         
         @Override
diff --git a/src/main/java/net/minecraft/util/FrameTimer.java b/src/main/java/net/minecraft/util/FrameTimer.java
index 104594b80eaa3d8e24174dfbdd3c11456539811f..c4c14f7a241d6ead86a980421c877e002f20d5a5 100644
--- a/src/main/java/net/minecraft/util/FrameTimer.java
+++ b/src/main/java/net/minecraft/util/FrameTimer.java
@@ -27,7 +27,7 @@ public class FrameTimer
     }
     
     public int scaleSampleTo(final long debug1, final int debug3, final int debug4) {
-        final double debug5 = debug1 / (1000000000L / debug4);
+        final double debug5 = (float)debug1 / (1000000000L / (float)debug4);
         return (int)(debug5 * debug3);
     }
     
diff --git a/src/main/java/net/minecraft/util/Mth.java b/src/main/java/net/minecraft/util/Mth.java
index 6c592893031d9a3ee3956b7b019b6e9ada26934e..359720a442e8ab94c0137b7e95a80e338655ee4e 100644
--- a/src/main/java/net/minecraft/util/Mth.java
+++ b/src/main/java/net/minecraft/util/Mth.java
@@ -9,13 +9,17 @@ import java.util.Random;
 
 public class Mth
 {
-    public static final float SQRT_OF_TWO;
-    private static final float[] SIN;
-    private static final Random RANDOM;
-    private static final int[] MULTIPLY_DE_BRUIJN_BIT_POSITION;
-    private static final double FRAC_BIAS;
-    private static final double[] ASIN_TAB;
-    private static final double[] COS_TAB;
+    public static final float SQRT_OF_TWO = sqrt(2.0f);
+    private static final float[] SIN = Util.make(new float[65536], array -> {
+        for (int i = 0; i < array.length; ++i) { // MagmaCube - decompile fix
+            array[i] = (float)Math.sin((double)i * Math.PI * 2.0D / 65536.0D); // MagmaCube - decompile fix
+        }
+    });
+    private static final Random RANDOM = new Random();
+    private static final int[] MULTIPLY_DE_BRUIJN_BIT_POSITION = new int[] { 0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9 };
+    private static final double FRAC_BIAS = Double.longBitsToDouble(4805340802404319232L);
+    private static final double[] ASIN_TAB = new double[257];
+    private static final double[] COS_TAB = new double[257];
     
     public static float sin(final float debug0) {
         return Mth.SIN[(int)(debug0 * 10430.378f) & 0xFFFF];
@@ -70,24 +74,18 @@ public class Mth
         return (debug0 > debug) ? (debug + 1) : debug;
     }
     
-    public static int clamp(final int debug0, final int debug1, final int debug2) {
-        if (debug0 < debug1) {
-            return debug1;
+    public static int clamp(final int num, final int min, final int max) {
+        if (num < min) {
+            return min;
         }
-        if (debug0 > debug2) {
-            return debug2;
-        }
-        return debug0;
+        return num > max ? max : num;
     }
     
-    public static long clamp(final long debug0, final long debug2, final long debug4) {
-        if (debug0 < debug2) {
-            return debug2;
-        }
-        if (debug0 > debug4) {
-            return debug4;
+    public static long clamp(final long num, final long min, final long max) {
+        if (num < min) {
+            return min;
         }
-        return debug0;
+        return num > max ? max : num;
     }
     
     public static float clamp(final float debug0, final float debug1, final float debug2) {
@@ -160,7 +158,7 @@ public class Mth
         for (final long debug2 : debug0) {
             debug += debug2;
         }
-        return debug / debug0.length;
+        return (float)debug / (float)debug0.length;
     }
     
     public static boolean equal(final float debug0, final float debug1) {
@@ -538,23 +536,11 @@ public class Mth
     }
     
     static {
-        SQRT_OF_TWO = sqrt(2.0f);
-        SIN = Util.make(new float[65536], debug0 -> {
-            for (int debug = 0; debug < debug0.length; ++debug) { // MagmaCube - decompile fix
-                debug0[debug] = (float)Math.sin(debug * Math.PI * 2.0 / 65536.0); // MagmaCube - decompile fix
-            }
-            return;
-        });
-        RANDOM = new Random();
-        MULTIPLY_DE_BRUIJN_BIT_POSITION = new int[] { 0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9 };
-        FRAC_BIAS = Double.longBitsToDouble(4805340802404319232L);
-        ASIN_TAB = new double[257];
-        COS_TAB = new double[257];
-        for (int debug2 = 0; debug2 < 257; ++debug2) {
-            final double debug3 = debug2 / 256.0;
-            final double debug4 = Math.asin(debug3);
-            Mth.COS_TAB[debug2] = Math.cos(debug4);
-            Mth.ASIN_TAB[debug2] = debug4;
+        for (int i = 0; i < 257; ++i) {
+            final double d0 = i / 256.0;
+            final double d1 = Math.asin(d0);
+            Mth.COS_TAB[i] = Math.cos(d1);
+            Mth.ASIN_TAB[i] = d1;
         }
     }
 }
diff --git a/src/main/java/net/minecraft/util/StringDecomposer.java b/src/main/java/net/minecraft/util/StringDecomposer.java
index c101ff9822710d21515971b2ed86d3d1317eca82..a38b682961bea63863c7f9d6331abab8745aaad4 100644
--- a/src/main/java/net/minecraft/util/StringDecomposer.java
+++ b/src/main/java/net/minecraft/util/StringDecomposer.java
@@ -85,44 +85,44 @@ public class StringDecomposer
         return iterateFormatted(debug0, debug1, debug2, debug2, debug3);
     }
     
-    public static boolean iterateFormatted(final String debug0, final int debug1, final Style debug2, final Style debug3, final FormattedCharSink debug4) {
+    public static boolean iterateFormatted(final String s, final int a, final Style style, final Style additionalStyle, final FormattedCharSink formattedCharSink) {
         // todo: fix broken legacy color formatting
-        final int debug5 = debug0.length();
-        Style debug6 = debug2;
-        for (int debug7 = debug1; debug7 < debug5; ++debug7) {
-            final char debug8 = debug0.charAt(debug7);
-            if (debug8 == '§') {
-                if (debug7 + 1 >= debug5) {
+        final int length = s.length();
+        Style style1 = style;
+        for (int i = a; i < length; ++i) {
+            final char charAt = s.charAt(i);
+            if (charAt == '§') {
+                if (i + 1 >= length) {
                     break;
                 }
-                final char debug9 = debug0.charAt(debug7 + 1);
-                final ChatFormatting debug10 = ChatFormatting.getByCode(debug9);
-                if (debug10 != null) {
-                    debug6 = ((debug10 == ChatFormatting.RESET) ? debug3 : debug6.applyLegacyFormat(debug10));
+                final char character = s.charAt(i + 1);
+                final ChatFormatting formatting = ChatFormatting.getByCode(character);
+                if (formatting != null) {
+                    style1 = ((formatting == ChatFormatting.RESET) ? additionalStyle : style1.applyLegacyFormat(formatting));
                 }
-                ++debug7;
+                ++i;
             }
-            else if (Character.isHighSurrogate(debug8)) {
-                if (debug7 + 1 >= debug5) {
-                    if (!debug4.accept(debug7, debug6, 65533)) {
+            else if (Character.isHighSurrogate(charAt)) {
+                if (i + 1 >= length) {
+                    if (!formattedCharSink.accept(i, style1, 65533)) {
                         return false;
                     }
                     break;
                 }
                 else {
-                    final char debug9 = debug0.charAt(debug7 + 1);
-                    if (Character.isLowSurrogate(debug9)) {
-                        if (!debug4.accept(debug7, debug6, Character.toCodePoint(debug8, debug9))) {
+                    final char charAt1 = s.charAt(i + 1);
+                    if (Character.isLowSurrogate(charAt1)) {
+                        if (!formattedCharSink.accept(i, style1, Character.toCodePoint(charAt, charAt1))) {
                             return false;
                         }
-                        ++debug7;
+                        ++i;
                     }
-                    else if (!debug4.accept(debug7, debug6, 65533)) {
+                    else if (!formattedCharSink.accept(i, style1, 65533)) {
                         return false;
                     }
                 }
             }
-            else if (!feedChar(debug6, debug4, debug7, debug8)) {
+            else if (!feedChar(style1, formattedCharSink, i, charAt)) {
                 return false;
             }
         }
@@ -142,13 +142,13 @@ public class StringDecomposer
         return debug4.toString();
     }
     
-    public static String getPlainText(final FormattedText debug0) {
-        final StringBuilder debug4 = new StringBuilder();
-        iterateFormatted(debug0, Style.EMPTY, (debug1, debug2, debug3) -> {
-            debug4.appendCodePoint(debug3);
+    public static String getPlainText(final FormattedText formattedText) {
+        final StringBuilder sb = new StringBuilder();
+        iterateFormatted(formattedText, Style.EMPTY, (debug1, debug2, debug3) -> {
+            sb.appendCodePoint(debug3);
             return true;
         });
-        return debug4.toString();
+        return sb.toString();
     }
     
     static {
diff --git a/src/main/java/net/minecraft/world/effect/AbsoptionMobEffect.java b/src/main/java/net/minecraft/world/effect/AbsoptionMobEffect.java
index 2efb601f10041b83a3b2337400afc3d722e3df98..47330378df3b2dc6af3afb3a2b58cb247a0bab24 100644
--- a/src/main/java/net/minecraft/world/effect/AbsoptionMobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/AbsoptionMobEffect.java
@@ -10,14 +10,14 @@ public class AbsoptionMobEffect extends MobEffect
     }
     
     @Override
-    public void removeAttributeModifiers(final LivingEntity debug1, final AttributeMap debug2, final int debug3) {
-        debug1.setAbsorptionAmount(debug1.getAbsorptionAmount() - 4 * (debug3 + 1));
-        super.removeAttributeModifiers(debug1, debug2, debug3);
+    public void removeAttributeModifiers(final LivingEntity livingEntity, final AttributeMap attributeMap, final int amount) {
+        livingEntity.setAbsorptionAmount(livingEntity.getAbsorptionAmount() - 4 * (amount + 1));
+        super.removeAttributeModifiers(livingEntity, attributeMap, amount);
     }
     
     @Override
-    public void addAttributeModifiers(final LivingEntity debug1, final AttributeMap debug2, final int debug3) {
-        debug1.setAbsorptionAmount(debug1.getAbsorptionAmount() + 4 * (debug3 + 1));
-        super.addAttributeModifiers(debug1, debug2, debug3);
+    public void addAttributeModifiers(final LivingEntity livingEntity, final AttributeMap attributeMap, final int amount) {
+        livingEntity.setAbsorptionAmount(livingEntity.getAbsorptionAmount() + 4 * (amount + 1));
+        super.addAttributeModifiers(livingEntity, attributeMap, amount);
     }
 }
diff --git a/src/main/java/net/minecraft/world/effect/AttackDamageMobEffect.java b/src/main/java/net/minecraft/world/effect/AttackDamageMobEffect.java
index c2895ba845fcde1994adc233e266e992783e8505..438243b709ce699d71b6a6101565cc96194374c2 100644
--- a/src/main/java/net/minecraft/world/effect/AttackDamageMobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/AttackDamageMobEffect.java
@@ -12,7 +12,7 @@ public class AttackDamageMobEffect extends MobEffect
     }
     
     @Override
-    public double getAttributeModifierValue(final int debug1, final AttributeModifier debug2) {
-        return this.multiplier * (debug1 + 1);
+    public double getAttributeModifierValue(final int amount, final AttributeModifier attributeModifier) {
+        return this.multiplier * (amount + 1);
     }
 }
diff --git a/src/main/java/net/minecraft/world/effect/HealthBoostMobEffect.java b/src/main/java/net/minecraft/world/effect/HealthBoostMobEffect.java
index a1f11923683a2a7b39b5ea174e5312234fd8f944..658aaab2de7a10b5b4785e26db38b3925303ac24 100644
--- a/src/main/java/net/minecraft/world/effect/HealthBoostMobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/HealthBoostMobEffect.java
@@ -10,10 +10,10 @@ public class HealthBoostMobEffect extends MobEffect
     }
     
     @Override
-    public void removeAttributeModifiers(final LivingEntity debug1, final AttributeMap debug2, final int debug3) {
-        super.removeAttributeModifiers(debug1, debug2, debug3);
-        if (debug1.getHealth() > debug1.getMaxHealth()) {
-            debug1.setHealth(debug1.getMaxHealth());
+    public void removeAttributeModifiers(final LivingEntity livingEntity, final AttributeMap attributeMap, final int amount) {
+        super.removeAttributeModifiers(livingEntity, attributeMap, amount);
+        if (livingEntity.getHealth() > livingEntity.getMaxHealth()) {
+            livingEntity.setHealth(livingEntity.getMaxHealth());
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/effect/MobEffect.java b/src/main/java/net/minecraft/world/effect/MobEffect.java
index a0f8ca833a7c6267b35fccccc1f15e1253fc1dbe..75b626c5c2ba2d6fe5e40f8fdcff3d7503fa5c9b 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffect.java
@@ -27,47 +27,47 @@ public class MobEffect
     private String descriptionId;
     
     @Nullable
-    public static MobEffect byId(final int debug0) {
-        return Registry.MOB_EFFECT.byId(debug0);
+    public static MobEffect byId(final int id) {
+        return Registry.MOB_EFFECT.byId(id);
     }
     
-    public static int getId(final MobEffect debug0) {
-        return Registry.MOB_EFFECT.getId(debug0);
+    public static int getId(final MobEffect mobEffect) {
+        return Registry.MOB_EFFECT.getId(mobEffect);
     }
     
-    protected MobEffect(final MobEffectCategory debug1, final int debug2) {
+    protected MobEffect(final MobEffectCategory mobEffectCategory, final int color) {
         this.attributeModifiers = Maps.newHashMap(); // MagmaCube - decompile fix
-        this.category = debug1;
-        this.color = debug2;
+        this.category = mobEffectCategory;
+        this.color = color;
     }
     
-    public void applyEffectTick(final LivingEntity debug1, final int debug2) {
+    public void applyEffectTick(final LivingEntity livingEntity, final int amplifier) {
         if (this == MobEffects.REGENERATION) {
-            if (debug1.getHealth() < debug1.getMaxHealth()) {
-                debug1.heal(1.0f);
+            if (livingEntity.getHealth() < livingEntity.getMaxHealth()) {
+                livingEntity.heal(1.0f);
             }
         }
         else if (this == MobEffects.POISON) {
-            if (debug1.getHealth() > 1.0f) {
-                debug1.hurt(DamageSource.MAGIC, 1.0f);
+            if (livingEntity.getHealth() > 1.0f) {
+                livingEntity.hurt(DamageSource.MAGIC, 1.0f);
             }
         }
         else if (this == MobEffects.WITHER) {
-            debug1.hurt(DamageSource.WITHER, 1.0f);
+            livingEntity.hurt(DamageSource.WITHER, 1.0f);
         }
-        else if (this == MobEffects.HUNGER && debug1 instanceof Player) {
-            ((Player)debug1).causeFoodExhaustion(0.005f * (debug2 + 1));
+        else if (this == MobEffects.HUNGER && livingEntity instanceof Player) {
+            ((Player)livingEntity).causeFoodExhaustion(0.005f * (amplifier + 1));
         }
-        else if (this == MobEffects.SATURATION && debug1 instanceof Player) {
-            if (!debug1.level.isClientSide) {
-                ((Player)debug1).getFoodData().eat(debug2 + 1, 1.0f);
+        else if (this == MobEffects.SATURATION && livingEntity instanceof Player) {
+            if (!livingEntity.level.isClientSide) {
+                ((Player)livingEntity).getFoodData().eat(amplifier + 1, 1.0f);
             }
         }
-        else if ((this == MobEffects.HEAL && !debug1.isInvertedHealAndHarm()) || (this == MobEffects.HARM && debug1.isInvertedHealAndHarm())) {
-            debug1.heal(Math.max(4 << debug2, 0));
+        else if ((this == MobEffects.HEAL && !livingEntity.isInvertedHealAndHarm()) || (this == MobEffects.HARM && livingEntity.isInvertedHealAndHarm())) {
+            livingEntity.heal(Math.max(4 << amplifier, 0));
         }
-        else if ((this == MobEffects.HARM && !debug1.isInvertedHealAndHarm()) || (this == MobEffects.HEAL && debug1.isInvertedHealAndHarm())) {
-            debug1.hurt(DamageSource.MAGIC, 6 << debug2);
+        else if ((this == MobEffects.HARM && !livingEntity.isInvertedHealAndHarm()) || (this == MobEffects.HEAL && livingEntity.isInvertedHealAndHarm())) {
+            livingEntity.hurt(DamageSource.MAGIC, 6 << amplifier);
         }
     }
     
@@ -133,9 +133,9 @@ public class MobEffect
         return this.color;
     }
     
-    public MobEffect addAttributeModifier(final Attribute debug1, final String debug2, final double debug3, final AttributeModifier.Operation debug5) {
-        final AttributeModifier debug6 = new AttributeModifier(UUID.fromString(debug2), this::getDescriptionId, debug3, debug5);
-        this.attributeModifiers.put(debug1, debug6);
+    public MobEffect addAttributeModifier(final Attribute attribute, final String id, final double amount, final AttributeModifier.Operation operation) {
+        final AttributeModifier attributeModifier = new AttributeModifier(UUID.fromString(id), this::getDescriptionId, amount, operation);
+        this.attributeModifiers.put(attribute, attributeModifier);
         return this;
     }
     
@@ -143,28 +143,28 @@ public class MobEffect
         return this.attributeModifiers;
     }
     
-    public void removeAttributeModifiers(final LivingEntity debug1, final AttributeMap debug2, final int debug3) {
-        for (final Map.Entry<Attribute, AttributeModifier> debug4 : this.attributeModifiers.entrySet()) {
-            final AttributeInstance debug5 = debug2.getInstance(debug4.getKey());
-            if (debug5 != null) {
-                debug5.removeModifier(debug4.getValue());
+    public void removeAttributeModifiers(final LivingEntity livingEntity, final AttributeMap attributeMap, final int amount) {
+        for (final Map.Entry<Attribute, AttributeModifier> attributeModifierEntry : this.attributeModifiers.entrySet()) {
+            final AttributeInstance attributeInstance = attributeMap.getInstance(attributeModifierEntry.getKey());
+            if (attributeInstance != null) {
+                attributeInstance.removeModifier(attributeModifierEntry.getValue());
             }
         }
     }
     
-    public void addAttributeModifiers(final LivingEntity debug1, final AttributeMap debug2, final int debug3) {
-        for (final Map.Entry<Attribute, AttributeModifier> debug4 : this.attributeModifiers.entrySet()) {
-            final AttributeInstance debug5 = debug2.getInstance(debug4.getKey());
-            if (debug5 != null) {
-                final AttributeModifier debug6 = debug4.getValue();
-                debug5.removeModifier(debug6);
-                debug5.addPermanentModifier(new AttributeModifier(debug6.getId(), this.getDescriptionId() + " " + debug3, this.getAttributeModifierValue(debug3, debug6), debug6.getOperation()));
+    public void addAttributeModifiers(final LivingEntity livingEntity, final AttributeMap attributeMap, final int amount) {
+        for (final Map.Entry<Attribute, AttributeModifier> attributeModifierEntry : this.attributeModifiers.entrySet()) {
+            final AttributeInstance attributeInstance = attributeMap.getInstance(attributeModifierEntry.getKey());
+            if (attributeInstance != null) {
+                final AttributeModifier attributeModifier = attributeModifierEntry.getValue();
+                attributeInstance.removeModifier(attributeModifier);
+                attributeInstance.addPermanentModifier(new AttributeModifier(attributeModifier.getId(), this.getDescriptionId() + " " + amount, this.getAttributeModifierValue(amount, attributeModifier), attributeModifier.getOperation()));
             }
         }
     }
     
-    public double getAttributeModifierValue(final int debug1, final AttributeModifier debug2) {
-        return debug2.getAmount() * (debug1 + 1);
+    public double getAttributeModifierValue(final int amount, final AttributeModifier attributeModifier) {
+        return attributeModifier.getAmount() * (amount + 1);
     }
     
     public boolean isBeneficial() {
diff --git a/src/main/java/net/minecraft/world/effect/MobEffects.java b/src/main/java/net/minecraft/world/effect/MobEffects.java
index fcd26312fb7046e45d5590a54dec743b93e0770c..ea4ebe5b87453d79b2b8b71adfaafcef25244413 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffects.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffects.java
@@ -43,8 +43,8 @@ public class MobEffects
     public static final MobEffect BAD_OMEN;
     public static final MobEffect HERO_OF_THE_VILLAGE;
     
-    private static MobEffect register(final int debug0, final String debug1, final MobEffect debug2) {
-        return Registry.registerMapping(Registry.MOB_EFFECT, debug0, debug1, debug2);
+    private static MobEffect register(final int id, final String effectId, final MobEffect instance) {
+        return Registry.registerMapping(Registry.MOB_EFFECT, id, effectId, instance);
     }
     
     static {
@@ -85,15 +85,15 @@ public class MobEffects
             }
             
             @Override
-            public void applyEffectTick(final LivingEntity debug1, final int debug2) {
-                if (debug1 instanceof ServerPlayer && !debug1.isSpectator()) {
-                    final ServerPlayer debug3 = (ServerPlayer)debug1;
-                    final ServerLevel debug4 = debug3.getLevel();
-                    if (debug4.getDifficulty() == Difficulty.PEACEFUL) {
+            public void applyEffectTick(final LivingEntity livingEntity, final int amplifier) {
+                if (livingEntity instanceof ServerPlayer && !livingEntity.isSpectator()) {
+                    final ServerPlayer player = (ServerPlayer)livingEntity;
+                    final ServerLevel level = player.getLevel();
+                    if (level.getDifficulty() == Difficulty.PEACEFUL) {
                         return;
                     }
-                    if (debug4.isVillage(debug1.blockPosition())) {
-                        debug4.getRaids().createOrExtendRaid(debug3);
+                    if (level.isVillage(livingEntity.blockPosition())) {
+                        level.getRaids().createOrExtendRaid(player);
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/world/entity/ItemSteerable.java b/src/main/java/net/minecraft/world/entity/ItemSteerable.java
index f31cd286e8e0747a360b9e7172514e7ab5d5628b..149a37987293b238d7d676ad108c66e16ab21780 100644
--- a/src/main/java/net/minecraft/world/entity/ItemSteerable.java
+++ b/src/main/java/net/minecraft/world/entity/ItemSteerable.java
@@ -37,7 +37,7 @@ public interface ItemSteerable
         if (debug1.isControlledByLocalInstance()) {
             float debug5 = this.getSteeringSpeed();
             if (debug2.boosting) {
-                debug5 += debug5 * 1.15f * Mth.sin(debug2.boostTime / debug2.boostTimeTotal * 3.1415927f);
+                debug5 += debug5 * 1.15f * Mth.sin((float)debug2.boostTime / (float)debug2.boostTimeTotal * 3.1415927f);
             }
             debug1.setSpeed(debug5);
             this.travelWithInput(new Vec3(0.0, 0.0, 1.0));
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java
index 2318552363eaf7d65556f546ee944e72fb89f087..87840ebe25631e62f2f019dd75bccbfff6d06927 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeModifier.java
@@ -19,19 +19,19 @@ public class AttributeModifier
     private final Supplier<String> nameGetter;
     private final UUID id;
     
-    public AttributeModifier(final String debug1, final double debug2, final Operation debug4) {
-        this(Mth.createInsecureUUID((Random)ThreadLocalRandom.current()), () -> debug1, debug2, debug4);
+    public AttributeModifier(final String id, final double amount, final Operation operation) {
+        this(Mth.createInsecureUUID((Random)ThreadLocalRandom.current()), () -> id, amount, operation);
     }
     
-    public AttributeModifier(final UUID debug1, final String debug2, final double debug3, final Operation debug5) {
-        this(debug1, () -> debug2, debug3, debug5);
+    public AttributeModifier(final UUID id, final String name, final double amount, final Operation operation) {
+        this(id, () -> name, amount, operation);
     }
     
-    public AttributeModifier(final UUID debug1, final Supplier<String> debug2, final double debug3, final Operation debug5) {
-        this.id = debug1;
-        this.nameGetter = debug2;
-        this.amount = debug3;
-        this.operation = debug5;
+    public AttributeModifier(final UUID id, final Supplier<String> nameGetter, final double amount, final Operation operation) {
+        this.id = id;
+        this.nameGetter = nameGetter;
+        this.amount = amount;
+        this.operation = operation;
     }
     
     public UUID getId() {
@@ -51,15 +51,15 @@ public class AttributeModifier
     }
     
     @Override
-    public boolean equals(final Object debug1) {
-        if (this == debug1) {
+    public boolean equals(final Object o) {
+        if (this == o) {
             return true;
         }
-        if (debug1 == null || this.getClass() != debug1.getClass()) {
+        if (o == null || this.getClass() != o.getClass()) {
             return false;
         }
-        final AttributeModifier debug2 = (AttributeModifier)debug1;
-        return Objects.equals(this.id, debug2.id);
+        final AttributeModifier that = (AttributeModifier)o;
+        return Objects.equals(this.id, that.id);
     }
     
     @Override
@@ -73,23 +73,23 @@ public class AttributeModifier
     }
     
     public CompoundTag save() {
-        final CompoundTag debug1 = new CompoundTag();
-        debug1.putString("Name", this.getName());
-        debug1.putDouble("Amount", this.amount);
-        debug1.putInt("Operation", this.operation.toValue());
-        debug1.putUUID("UUID", this.id);
-        return debug1;
+        final CompoundTag tag = new CompoundTag();
+        tag.putString("Name", this.getName());
+        tag.putDouble("Amount", this.amount);
+        tag.putInt("Operation", this.operation.toValue());
+        tag.putUUID("UUID", this.id);
+        return tag;
     }
     
     @Nullable
-    public static AttributeModifier load(final CompoundTag debug0) {
+    public static AttributeModifier load(final CompoundTag tag) {
         try {
-            final UUID debug = debug0.getUUID("UUID");
-            final Operation debug2 = Operation.fromValue(debug0.getInt("Operation"));
-            return new AttributeModifier(debug, debug0.getString("Name"), debug0.getDouble("Amount"), debug2);
+            final UUID debug = tag.getUUID("UUID");
+            final Operation debug2 = Operation.fromValue(tag.getInt("Operation"));
+            return new AttributeModifier(debug, tag.getString("Name"), tag.getDouble("Amount"), debug2);
         }
-        catch (Exception debug3) {
-            AttributeModifier.LOGGER.warn("Unable to create attribute: {}", (Object)debug3.getMessage());
+        catch (Exception ex) {
+            AttributeModifier.LOGGER.warn("Unable to create attribute: {}", ex.getMessage());
             return null;
         }
     }
@@ -107,19 +107,19 @@ public class AttributeModifier
         private static final Operation[] OPERATIONS;
         private final int value;
         
-        private Operation(final int debug3) {
-            this.value = debug3;
+        private Operation(final int value) {
+            this.value = value;
         }
         
         public int toValue() {
             return this.value;
         }
         
-        public static Operation fromValue(final int debug0) {
-            if (debug0 < 0 || debug0 >= Operation.OPERATIONS.length) {
-                throw new IllegalArgumentException("No operation with value " + debug0);
+        public static Operation fromValue(final int value) {
+            if (value < 0 || value >= Operation.OPERATIONS.length) {
+                throw new IllegalArgumentException("No operation with value " + value);
             }
-            return Operation.OPERATIONS[debug0];
+            return Operation.OPERATIONS[value];
         }
         
         static {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index bb853f48171fbe7254694a7f6be6cb8cd4291d7a..f2827d926b02ce064018e6873edc70a6d5de9251 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -650,7 +650,7 @@ extends Animal {
         }
     }
 
-    class FoxFollowParentGoal
+    static class FoxFollowParentGoal
     extends FollowParentGoal {
         private final Fox fox;
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Panda.java b/src/main/java/net/minecraft/world/entity/animal/Panda.java
index ba91cb094786ca18e5d7c0ef96ee14420aaa3e95..5df5779202e863107430eb4a7856541a42d007cd 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Panda.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Panda.java
@@ -889,7 +889,7 @@ public class Panda extends Animal
         }
     }
     
-    class PandaBreedGoal extends BreedGoal
+    static class PandaBreedGoal extends BreedGoal
     {
         private final Panda panda;
         private int unhappyCooldown;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
index 59592b88cf68c8bf2eb379c285bf6977df8129b2..5994aa67ed7cc5d64aa6f216eefc0723be0d2d36 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
@@ -413,7 +413,7 @@ public class Rabbit extends Animal
         }
     }
     
-    public class RabbitJumpControl extends JumpControl
+    public static class RabbitJumpControl extends JumpControl
     {
         private final Rabbit rabbit;
         private boolean canJump;
diff --git a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
index fb369dce44b158d1aa56101b9c9327c74ca099f9..09e0b43819109ed8ef2d1f69b1205b7d3ab10de3 100644
--- a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
@@ -104,9 +104,9 @@ public class SnowGolem extends AbstractGolem implements Shearable, RangedAttackM
             }
             final BlockState debug4 = Blocks.SNOW.defaultBlockState();
             for (int debug5 = 0; debug5 < 4; ++debug5) {
-                debug1 = Mth.floor(this.getX() + (debug5 % 2 * 2 - 1) * 0.25f);
+                debug1 = Mth.floor(this.getX() + ((float)debug5 % 2 * 2 - 1) * 0.25f);
                 debug2 = Mth.floor(this.getY());
-                debug3 = Mth.floor(this.getZ() + (debug5 / 2 % 2 * 2 - 1) * 0.25f);
+                debug3 = Mth.floor(this.getZ() + ((float)debug5 / 2.0f % 2 * 2 - 1) * 0.25f);
                 final BlockPos debug6 = new BlockPos(debug1, debug2, debug3);
                 if (this.level.getBlockState(debug6).isAir() && this.level.getBiome(debug6).getTemperature(debug6) < 0.8f && debug4.canSurvive(this.level, debug6)) {
                     this.level.setBlockAndUpdate(debug6, debug4);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Squid.java b/src/main/java/net/minecraft/world/entity/animal/Squid.java
index 25827508280073b61abb410ad3115b6e69a83350..c4f5b0179b2e48f99cde2de2ae49edcbce1a018f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Squid.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Squid.java
@@ -210,7 +210,7 @@ public class Squid extends WaterAnimal
         return this.tx != 0.0f || this.ty != 0.0f || this.tz != 0.0f;
     }
     
-    class SquidRandomMovementGoal extends Goal
+    static class SquidRandomMovementGoal extends Goal
     {
         private final Squid squid;
         
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
index ef7b187764b2dc7a0df2ac452a8b8a243fe4999b..02c6339761c923c6e4789ebb66cbba0ad19725b7 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
@@ -113,7 +113,7 @@ public class TraderLlama extends Llama
         return super.finalizeSpawn(debug1, debug2, debug3, debug4, debug5);
     }
     
-    public class TraderLlamaDefendWanderingTraderGoal extends TargetGoal
+    public static class TraderLlamaDefendWanderingTraderGoal extends TargetGoal
     {
         private final Llama llama;
         private LivingEntity ownerLastHurtBy;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index 1dcb21e99f2f88eec2b896b570a9bc5b7e68ece3..efb80de18066fa4eeedd7ce59886b1bd8b8e5cfe 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -288,7 +288,7 @@ public class Phantom extends FlyingMob implements Enemy
         }
     }
     
-    class PhantomLookControl extends LookControl
+    static class PhantomLookControl extends LookControl
     {
         public PhantomLookControl(final Mob debug2) {
             super(debug2);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Shulker.java b/src/main/java/net/minecraft/world/entity/monster/Shulker.java
index 5e4f507228238c43a3509dc037a87ebb9ebffc23..67fd7c9526bfccd0a58bf1b24a1491fa344bf0fd 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Shulker.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Shulker.java
@@ -463,7 +463,7 @@ public class Shulker extends AbstractGolem implements Enemy
         DATA_COLOR_ID = SynchedEntityData.defineId(Shulker.class, EntityDataSerializers.BYTE);
     }
     
-    class ShulkerBodyRotationControl extends BodyRotationControl
+    static class ShulkerBodyRotationControl extends BodyRotationControl
     {
         public ShulkerBodyRotationControl(final Mob debug2) {
             super(debug2);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index 699b8a4ee1ba2d89294baeb2aaa65b81b628f10e..fe9708efad410312348c67fea4c5a4d6c83e20b0 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -189,8 +189,8 @@ public class Slime extends Mob implements Enemy
             final float debug4 = debug1 / 4.0f;
             final int debug5 = debug1 / 2;
             for (int debug6 = 2 + this.random.nextInt(3), debug7 = 0; debug7 < debug6; ++debug7) {
-                final float debug8 = (debug7 % 2 - 0.5f) * debug4;
-                final float debug9 = (debug7 / 2 - 0.5f) * debug4;
+                final float debug8 = ((float)debug7 % 2 - 0.5f) * debug4;
+                final float debug9 = ((float)debug7 / 2.0f - 0.5f) * debug4;
                 final Slime debug10 = (Slime)this.getType().create(this.level);
                 if (this.isPersistenceRequired()) {
                     debug10.setPersistenceRequired();
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
index dad66bd0675b3dbd12c1bd70494cb83dc1159393..d3c27979415e9d5841a39ce812ca2348d5c14ea3 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
@@ -187,7 +187,7 @@ public class Vindicator extends AbstractIllager
         DOOR_BREAKING_PREDICATE = (debug0 -> debug0 == Difficulty.NORMAL || debug0 == Difficulty.HARD);
     }
     
-    class VindicatorMeleeAttackGoal extends MeleeAttackGoal
+    static class VindicatorMeleeAttackGoal extends MeleeAttackGoal
     {
         public VindicatorMeleeAttackGoal(final Vindicator debug2) {
             super(debug2, 1.0, false);
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 6c68dd540baef1007ec732c56eb2500b859aba24..4676316755c6f045f2668c99a1ca3ae6b497ab7b 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -1486,7 +1486,7 @@ public abstract class Player extends LivingEntity
     
     public void giveExperiencePoints(final int debug1) {
         this.increaseScore(debug1);
-        this.experienceProgress += debug1 / this.getXpNeededForNextLevel();
+        this.experienceProgress += (float)debug1 / (float)this.getXpNeededForNextLevel();
         this.totalExperience = Mth.clamp(this.totalExperience + debug1, 0, Integer.MAX_VALUE);
         while (this.experienceProgress < 0.0f) {
             final float debug2 = this.experienceProgress * this.getXpNeededForNextLevel();
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raider.java b/src/main/java/net/minecraft/world/entity/raid/Raider.java
index 520ecf3e340b1533b203e95139b27575b6619460..825b58262e773c5b935eea9f11aff2a52e15ad2e 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raider.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raider.java
@@ -289,7 +289,7 @@ public abstract class Raider extends PatrollingMonster
         ALLOWED_ITEMS = (debug0 -> !debug0.hasPickUpDelay() && debug0.isAlive() && ItemStack.matches(debug0.getItem(), Raid.getLeaderBannerInstance()));
     }
     
-    public class ObtainRaidLeaderBannerGoal<T extends Raider> extends Goal
+    public static class ObtainRaidLeaderBannerGoal<T extends Raider> extends Goal
     {
         private final T mob;
         
@@ -364,7 +364,7 @@ public abstract class Raider extends PatrollingMonster
         }
     }
     
-    public class HoldGroundAttackGoal extends Goal
+    public static class HoldGroundAttackGoal extends Goal
     {
         private final Raider mob;
         private final float hostileRadiusSqr;
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index 62e5bda54a051ebf8eeffb1cc1ae97615e7ada7e..666da9d5b1dae66af418b6fc43fc9992acf5f7f0 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -591,7 +591,7 @@ public abstract class AbstractContainerMenu
     public static void getQuickCraftSlotCount(final Set<Slot> debug0, final int debug1, final ItemStack debug2, final int debug3) {
         switch (debug1) {
             case 0: {
-                debug2.setCount(Mth.floor(debug2.getCount() / debug0.size()));
+                debug2.setCount(Mth.floor((float)debug2.getCount() / (float)debug0.size()));
                 break;
             }
             case 1: {
@@ -626,7 +626,7 @@ public abstract class AbstractContainerMenu
         for (int debug3 = 0; debug3 < debug0.getContainerSize(); ++debug3) {
             final ItemStack debug4 = debug0.getItem(debug3);
             if (!debug4.isEmpty()) {
-                debug2 += debug4.getCount() / Math.min(debug0.getMaxStackSize(), debug4.getMaxStackSize());
+                debug2 += (float)debug4.getCount() / (float)Math.min(debug0.getMaxStackSize(), debug4.getMaxStackSize());
                 ++debug;
             }
         }
diff --git a/src/main/java/net/minecraft/world/inventory/BeaconMenu.java b/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
index 7f129f85f2910e472afa956af432158f5eef3744..c3d4178e92268ad73e6c34734e76448f23be62b9 100644
--- a/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
@@ -146,7 +146,7 @@ public class BeaconMenu extends AbstractContainerMenu
         return !this.beacon.getItem(0).isEmpty();
     }
     
-    class PaymentSlot extends Slot
+    static class PaymentSlot extends Slot
     {
         public PaymentSlot(final Container debug2, final int debug3, final int debug4, final int debug5) {
             super(debug2, debug3, debug4, debug5);
diff --git a/src/main/java/net/minecraft/world/item/CrossbowItem.java b/src/main/java/net/minecraft/world/item/CrossbowItem.java
index e7db10b862f2c7e1e2cc4ea52cd6e19f079a440c..cadc5116fec25eedec82edc888239f57cc1b74e9 100644
--- a/src/main/java/net/minecraft/world/item/CrossbowItem.java
+++ b/src/main/java/net/minecraft/world/item/CrossbowItem.java
@@ -277,7 +277,7 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable
             final int debug5 = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.QUICK_CHARGE, debug3);
             final SoundEvent debug6 = this.getStartSound(debug5);
             final SoundEvent debug7 = (debug5 == 0) ? SoundEvents.CROSSBOW_LOADING_MIDDLE : null;
-            final float debug8 = (debug3.getUseDuration() - debug4) / getChargeDuration(debug3);
+            final float debug8 = (float)(debug3.getUseDuration() - debug4) / (float)getChargeDuration(debug3);
             if (debug8 < 0.2f) {
                 this.startSoundPlayed = false;
                 this.midLoadSoundPlayed = false;
diff --git a/src/main/java/net/minecraft/world/item/DyeableLeatherItem.java b/src/main/java/net/minecraft/world/item/DyeableLeatherItem.java
index 7dda509f380622439d9887c3b399e3f3cddc342a..d6626896e9d36d111ef77eb5dcb76f057022a0db 100644
--- a/src/main/java/net/minecraft/world/item/DyeableLeatherItem.java
+++ b/src/main/java/net/minecraft/world/item/DyeableLeatherItem.java
@@ -82,7 +82,7 @@ public interface DyeableLeatherItem
         int debug8 = debug3[0] / debug5;
         int debug17 = debug3[1] / debug5;
         int debug18 = debug3[2] / debug5;
-        final float debug11 = debug4 / debug5;
+        final float debug11 = (float)debug4 / (float)debug5;
         final float debug19 = Math.max(debug8, Math.max(debug17, debug18));
         debug8 = (int)(debug8 * debug11 / debug19);
         debug17 = (int)(debug17 * debug11 / debug19);
diff --git a/src/main/java/net/minecraft/world/item/ItemCooldowns.java b/src/main/java/net/minecraft/world/item/ItemCooldowns.java
index e4b25b85480a9b598479be846f48c99fb96ace41..d8a785e79361141793e0c83397ee390847de5d6c 100644
--- a/src/main/java/net/minecraft/world/item/ItemCooldowns.java
+++ b/src/main/java/net/minecraft/world/item/ItemCooldowns.java
@@ -58,7 +58,7 @@ public class ItemCooldowns
     protected void onCooldownEnded(final Item debug1) {
     }
     
-    class CooldownInstance
+    static class CooldownInstance
     {
         private final int startTime;
         private final int endTime;
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 8dcf51ffbec95e7cfd587d792b1160eda7328247..570ce068c4f4197771cf9e326d817dd5f498d327 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -121,7 +121,7 @@ public class Explosion
                 }
             }
         }
-        return debug8 / debug9;
+        return (float)debug8 / (float)debug9;
     }
     
     public void explode() {
diff --git a/src/main/java/net/minecraft/world/level/LevelReader.java b/src/main/java/net/minecraft/world/level/LevelReader.java
index 7a822331ed51771ccf3a975ce4ee26a8a4a4e001..ea4830fcc19e0fcb1c459c9ba5698e280af63faa 100644
--- a/src/main/java/net/minecraft/world/level/LevelReader.java
+++ b/src/main/java/net/minecraft/world/level/LevelReader.java
@@ -181,14 +181,14 @@ BiomeManager.NoiseBiomeSource {
     }
 
     @Deprecated
-    default public boolean hasChunksAt(int debug1, int debug2, int debug3, int debug4, int debug5, int debug6) {
-        if (debug5 < 0 || debug2 >= 256) {
+    default public boolean hasChunksAt(int fromX, int fromY, int fromZ, int toX, int toY, int toZ) {
+        if (toY < 0 || fromY >= 256) {
             return false;
         }
-        debug3 >>= 4;
-        debug6 >>= 4;
-        for (int debug7 = debug1 >>= 4; debug7 <= (debug4 >>= 4); ++debug7) {
-            for (int debug8 = debug3; debug8 <= debug6; ++debug8) {
+        fromZ >>= 4;
+        toZ >>= 4;
+        for (int debug7 = fromX >>= 4; debug7 <= (toX >>= 4); ++debug7) {
+            for (int debug8 = fromZ; debug8 <= toZ; ++debug8) {
                 if (this.hasChunk(debug7, debug8)) continue;
                 return false;
             }
diff --git a/src/main/java/net/minecraft/world/level/biome/BiomeSource.java b/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
index aab4f807a055b55c659e2efd0b5faf61a8d74ea1..0a25fdc19a71433d038cf3b1a6b7372c7a8e1edd 100644
--- a/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
@@ -44,7 +44,7 @@ implements BiomeManager.NoiseBiomeSource {
     protected final List<Biome> possibleBiomes;
 
     protected BiomeSource(Stream<Supplier<Biome>> debug1) {
-        this((List)debug1.map(Supplier::get).collect(ImmutableList.toImmutableList()));
+        this(debug1.map(Supplier::get).collect(ImmutableList.toImmutableList()));
     }
 
     protected BiomeSource(List<Biome> debug1) {
@@ -69,7 +69,7 @@ implements BiomeManager.NoiseBiomeSource {
         int debug11 = debug8 - debug5 + 1;
         int debug12 = debug9 - debug6 + 1;
         int debug13 = debug10 - debug7 + 1;
-        HashSet debug14 = Sets.newHashSet();
+        HashSet<Biome> debug14 = Sets.newHashSet();
         for (int debug15 = 0; debug15 < debug13; ++debug15) {
             for (int debug16 = 0; debug16 < debug11; ++debug16) {
                 for (int debug17 = 0; debug17 < debug12; ++debug17) {
@@ -121,8 +121,8 @@ implements BiomeManager.NoiseBiomeSource {
         return debug13;
     }
 
-    public boolean canGenerateStructure(StructureFeature<?> debug1) {
-        return this.supportedStructures.computeIfAbsent(debug1, debug12 -> this.possibleBiomes.stream().anyMatch(debug1l -> debug1l.getGenerationSettings().isValidStart((StructureFeature<?>)debug12))); // MagmaCube - decompile fix
+    public boolean canGenerateStructure(StructureFeature<?> structureFeature) {
+        return this.supportedStructures.computeIfAbsent(structureFeature, debug12 -> this.possibleBiomes.stream().anyMatch(debug1l -> debug1l.getGenerationSettings().isValidStart((StructureFeature<?>)debug12))); // MagmaCube - decompile fix
     }
 
     public Set<BlockState> getSurfaceBlocks() {
diff --git a/src/main/java/net/minecraft/world/level/biome/Biomes.java b/src/main/java/net/minecraft/world/level/biome/Biomes.java
index 3a8d0a098baefbff63e33291f558d42503ac8dcb..482abdffaff7142f11199afa7881902e71e31a18 100644
--- a/src/main/java/net/minecraft/world/level/biome/Biomes.java
+++ b/src/main/java/net/minecraft/world/level/biome/Biomes.java
@@ -6,169 +6,87 @@ import net.minecraft.resources.ResourceKey;
 
 public abstract class Biomes
 {
-    public static final ResourceKey<Biome> OCEAN;
-    public static final ResourceKey<Biome> PLAINS;
-    public static final ResourceKey<Biome> DESERT;
-    public static final ResourceKey<Biome> MOUNTAINS;
-    public static final ResourceKey<Biome> FOREST;
-    public static final ResourceKey<Biome> TAIGA;
-    public static final ResourceKey<Biome> SWAMP;
-    public static final ResourceKey<Biome> RIVER;
-    public static final ResourceKey<Biome> NETHER_WASTES;
-    public static final ResourceKey<Biome> THE_END;
-    public static final ResourceKey<Biome> FROZEN_OCEAN;
-    public static final ResourceKey<Biome> FROZEN_RIVER;
-    public static final ResourceKey<Biome> SNOWY_TUNDRA;
-    public static final ResourceKey<Biome> SNOWY_MOUNTAINS;
-    public static final ResourceKey<Biome> MUSHROOM_FIELDS;
-    public static final ResourceKey<Biome> MUSHROOM_FIELD_SHORE;
-    public static final ResourceKey<Biome> BEACH;
-    public static final ResourceKey<Biome> DESERT_HILLS;
-    public static final ResourceKey<Biome> WOODED_HILLS;
-    public static final ResourceKey<Biome> TAIGA_HILLS;
-    public static final ResourceKey<Biome> MOUNTAIN_EDGE;
-    public static final ResourceKey<Biome> JUNGLE;
-    public static final ResourceKey<Biome> JUNGLE_HILLS;
-    public static final ResourceKey<Biome> JUNGLE_EDGE;
-    public static final ResourceKey<Biome> DEEP_OCEAN;
-    public static final ResourceKey<Biome> STONE_SHORE;
-    public static final ResourceKey<Biome> SNOWY_BEACH;
-    public static final ResourceKey<Biome> BIRCH_FOREST;
-    public static final ResourceKey<Biome> BIRCH_FOREST_HILLS;
-    public static final ResourceKey<Biome> DARK_FOREST;
-    public static final ResourceKey<Biome> SNOWY_TAIGA;
-    public static final ResourceKey<Biome> SNOWY_TAIGA_HILLS;
-    public static final ResourceKey<Biome> GIANT_TREE_TAIGA;
-    public static final ResourceKey<Biome> GIANT_TREE_TAIGA_HILLS;
-    public static final ResourceKey<Biome> WOODED_MOUNTAINS;
-    public static final ResourceKey<Biome> SAVANNA;
-    public static final ResourceKey<Biome> SAVANNA_PLATEAU;
-    public static final ResourceKey<Biome> BADLANDS;
-    public static final ResourceKey<Biome> WOODED_BADLANDS_PLATEAU;
-    public static final ResourceKey<Biome> BADLANDS_PLATEAU;
-    public static final ResourceKey<Biome> SMALL_END_ISLANDS;
-    public static final ResourceKey<Biome> END_MIDLANDS;
-    public static final ResourceKey<Biome> END_HIGHLANDS;
-    public static final ResourceKey<Biome> END_BARRENS;
-    public static final ResourceKey<Biome> WARM_OCEAN;
-    public static final ResourceKey<Biome> LUKEWARM_OCEAN;
-    public static final ResourceKey<Biome> COLD_OCEAN;
-    public static final ResourceKey<Biome> DEEP_WARM_OCEAN;
-    public static final ResourceKey<Biome> DEEP_LUKEWARM_OCEAN;
-    public static final ResourceKey<Biome> DEEP_COLD_OCEAN;
-    public static final ResourceKey<Biome> DEEP_FROZEN_OCEAN;
-    public static final ResourceKey<Biome> THE_VOID;
-    public static final ResourceKey<Biome> SUNFLOWER_PLAINS;
-    public static final ResourceKey<Biome> DESERT_LAKES;
-    public static final ResourceKey<Biome> GRAVELLY_MOUNTAINS;
-    public static final ResourceKey<Biome> FLOWER_FOREST;
-    public static final ResourceKey<Biome> TAIGA_MOUNTAINS;
-    public static final ResourceKey<Biome> SWAMP_HILLS;
-    public static final ResourceKey<Biome> ICE_SPIKES;
-    public static final ResourceKey<Biome> MODIFIED_JUNGLE;
-    public static final ResourceKey<Biome> MODIFIED_JUNGLE_EDGE;
-    public static final ResourceKey<Biome> TALL_BIRCH_FOREST;
-    public static final ResourceKey<Biome> TALL_BIRCH_HILLS;
-    public static final ResourceKey<Biome> DARK_FOREST_HILLS;
-    public static final ResourceKey<Biome> SNOWY_TAIGA_MOUNTAINS;
-    public static final ResourceKey<Biome> GIANT_SPRUCE_TAIGA;
-    public static final ResourceKey<Biome> GIANT_SPRUCE_TAIGA_HILLS;
-    public static final ResourceKey<Biome> MODIFIED_GRAVELLY_MOUNTAINS;
-    public static final ResourceKey<Biome> SHATTERED_SAVANNA;
-    public static final ResourceKey<Biome> SHATTERED_SAVANNA_PLATEAU;
-    public static final ResourceKey<Biome> ERODED_BADLANDS;
-    public static final ResourceKey<Biome> MODIFIED_WOODED_BADLANDS_PLATEAU;
-    public static final ResourceKey<Biome> MODIFIED_BADLANDS_PLATEAU;
-    public static final ResourceKey<Biome> BAMBOO_JUNGLE;
-    public static final ResourceKey<Biome> BAMBOO_JUNGLE_HILLS;
-    public static final ResourceKey<Biome> SOUL_SAND_VALLEY;
-    public static final ResourceKey<Biome> CRIMSON_FOREST;
-    public static final ResourceKey<Biome> WARPED_FOREST;
-    public static final ResourceKey<Biome> BASALT_DELTAS;
+    public static final ResourceKey<Biome> OCEAN = register("ocean");
+    public static final ResourceKey<Biome> PLAINS = register("plains");
+    public static final ResourceKey<Biome> DESERT = register("desert");
+    public static final ResourceKey<Biome> MOUNTAINS = register("mountains");
+    public static final ResourceKey<Biome> FOREST = register("forest");
+    public static final ResourceKey<Biome> TAIGA = register("taiga");
+    public static final ResourceKey<Biome> SWAMP = register("swamp");
+    public static final ResourceKey<Biome> RIVER = register("river");
+    public static final ResourceKey<Biome> NETHER_WASTES = register("nether_wastes");
+    public static final ResourceKey<Biome> THE_END = register("the_end");
+    public static final ResourceKey<Biome> FROZEN_OCEAN = register("frozen_ocean");
+    public static final ResourceKey<Biome> FROZEN_RIVER = register("frozen_river");
+    public static final ResourceKey<Biome> SNOWY_TUNDRA = register("snowy_tundra");
+    public static final ResourceKey<Biome> SNOWY_MOUNTAINS = register("snowy_mountains");
+    public static final ResourceKey<Biome> MUSHROOM_FIELDS = register("mushroom_fields");
+    public static final ResourceKey<Biome> MUSHROOM_FIELD_SHORE = register("mushroom_field_shore");
+    public static final ResourceKey<Biome> BEACH = register("beach");
+    public static final ResourceKey<Biome> DESERT_HILLS = register("desert_hills");
+    public static final ResourceKey<Biome> WOODED_HILLS = register("wooded_hills");
+    public static final ResourceKey<Biome> TAIGA_HILLS = register("taiga_hills");
+    public static final ResourceKey<Biome> MOUNTAIN_EDGE = register("mountain_edge");
+    public static final ResourceKey<Biome> JUNGLE = register("jungle");
+    public static final ResourceKey<Biome> JUNGLE_HILLS = register("jungle_hills");
+    public static final ResourceKey<Biome> JUNGLE_EDGE = register("jungle_edge");
+    public static final ResourceKey<Biome> DEEP_OCEAN = register("deep_ocean");
+    public static final ResourceKey<Biome> STONE_SHORE = register("stone_shore");
+    public static final ResourceKey<Biome> SNOWY_BEACH = register("snowy_beach");
+    public static final ResourceKey<Biome> BIRCH_FOREST = register("birch_forest");
+    public static final ResourceKey<Biome> BIRCH_FOREST_HILLS = register("birch_forest_hills");
+    public static final ResourceKey<Biome> DARK_FOREST = register("dark_forest");
+    public static final ResourceKey<Biome> SNOWY_TAIGA = register("snowy_taiga");
+    public static final ResourceKey<Biome> SNOWY_TAIGA_HILLS = register("snowy_taiga_hills");
+    public static final ResourceKey<Biome> GIANT_TREE_TAIGA = register("giant_tree_taiga");
+    public static final ResourceKey<Biome> GIANT_TREE_TAIGA_HILLS = register("giant_tree_taiga_hills");
+    public static final ResourceKey<Biome> WOODED_MOUNTAINS = register("wooded_mountains");
+    public static final ResourceKey<Biome> SAVANNA = register("savanna");
+    public static final ResourceKey<Biome> SAVANNA_PLATEAU = register("savanna_plateau");
+    public static final ResourceKey<Biome> BADLANDS = register("badlands");
+    public static final ResourceKey<Biome> WOODED_BADLANDS_PLATEAU = register("wooded_badlands_plateau");
+    public static final ResourceKey<Biome> BADLANDS_PLATEAU = register("badlands_plateau");
+    public static final ResourceKey<Biome> SMALL_END_ISLANDS = register("small_end_islands");
+    public static final ResourceKey<Biome> END_MIDLANDS = register("end_midlands");
+    public static final ResourceKey<Biome> END_HIGHLANDS = register("end_highlands");
+    public static final ResourceKey<Biome> END_BARRENS = register("end_barrens");
+    public static final ResourceKey<Biome> WARM_OCEAN = register("warm_ocean");
+    public static final ResourceKey<Biome> LUKEWARM_OCEAN = register("lukewarm_ocean");
+    public static final ResourceKey<Biome> COLD_OCEAN = register("cold_ocean");
+    public static final ResourceKey<Biome> DEEP_WARM_OCEAN = register("deep_warm_ocean");
+    public static final ResourceKey<Biome> DEEP_LUKEWARM_OCEAN = register("deep_lukewarm_ocean");
+    public static final ResourceKey<Biome> DEEP_COLD_OCEAN = register("deep_cold_ocean");
+    public static final ResourceKey<Biome> DEEP_FROZEN_OCEAN = register("deep_frozen_ocean");
+    public static final ResourceKey<Biome> THE_VOID = register("the_void");
+    public static final ResourceKey<Biome> SUNFLOWER_PLAINS = register("sunflower_plains");
+    public static final ResourceKey<Biome> DESERT_LAKES = register("desert_lakes");
+    public static final ResourceKey<Biome> GRAVELLY_MOUNTAINS = register("gravelly_mountains");
+    public static final ResourceKey<Biome> FLOWER_FOREST = register("flower_forest");
+    public static final ResourceKey<Biome> TAIGA_MOUNTAINS = register("taiga_mountains");
+    public static final ResourceKey<Biome> SWAMP_HILLS = register("swamp_hills");
+    public static final ResourceKey<Biome> ICE_SPIKES = register("ice_spikes");
+    public static final ResourceKey<Biome> MODIFIED_JUNGLE = register("modified_jungle");
+    public static final ResourceKey<Biome> MODIFIED_JUNGLE_EDGE = register("modified_jungle_edge");
+    public static final ResourceKey<Biome> TALL_BIRCH_FOREST = register("tall_birch_forest");
+    public static final ResourceKey<Biome> TALL_BIRCH_HILLS = register("tall_birch_hills");
+    public static final ResourceKey<Biome> DARK_FOREST_HILLS = register("dark_forest_hills");
+    public static final ResourceKey<Biome> SNOWY_TAIGA_MOUNTAINS = register("snowy_taiga_mountains");
+    public static final ResourceKey<Biome> GIANT_SPRUCE_TAIGA = register("giant_spruce_taiga");
+    public static final ResourceKey<Biome> GIANT_SPRUCE_TAIGA_HILLS = register("giant_spruce_taiga_hills");
+    public static final ResourceKey<Biome> MODIFIED_GRAVELLY_MOUNTAINS = register("modified_gravelly_mountains");
+    public static final ResourceKey<Biome> SHATTERED_SAVANNA = register("shattered_savanna");
+    public static final ResourceKey<Biome> SHATTERED_SAVANNA_PLATEAU = register("shattered_savanna_plateau");
+    public static final ResourceKey<Biome> ERODED_BADLANDS = register("eroded_badlands");
+    public static final ResourceKey<Biome> MODIFIED_WOODED_BADLANDS_PLATEAU = register("modified_wooded_badlands_plateau");
+    public static final ResourceKey<Biome> MODIFIED_BADLANDS_PLATEAU = register("modified_badlands_plateau");
+    public static final ResourceKey<Biome> BAMBOO_JUNGLE = register("bamboo_jungle");
+    public static final ResourceKey<Biome> BAMBOO_JUNGLE_HILLS = register("bamboo_jungle_hills");
+    public static final ResourceKey<Biome> SOUL_SAND_VALLEY = register("soul_sand_valley");
+    public static final ResourceKey<Biome> CRIMSON_FOREST = register("crimson_forest");
+    public static final ResourceKey<Biome> WARPED_FOREST = register("warped_forest");
+    public static final ResourceKey<Biome> BASALT_DELTAS = register("basalt_deltas");
     
-    private static ResourceKey<Biome> register(final String debug0) {
-        return ResourceKey.create((ResourceKey<? extends Registry<Biome>>)Registry.BIOME_REGISTRY, new ResourceLocation(debug0));
-    }
-    
-    static {
-        OCEAN = register("ocean");
-        PLAINS = register("plains");
-        DESERT = register("desert");
-        MOUNTAINS = register("mountains");
-        FOREST = register("forest");
-        TAIGA = register("taiga");
-        SWAMP = register("swamp");
-        RIVER = register("river");
-        NETHER_WASTES = register("nether_wastes");
-        THE_END = register("the_end");
-        FROZEN_OCEAN = register("frozen_ocean");
-        FROZEN_RIVER = register("frozen_river");
-        SNOWY_TUNDRA = register("snowy_tundra");
-        SNOWY_MOUNTAINS = register("snowy_mountains");
-        MUSHROOM_FIELDS = register("mushroom_fields");
-        MUSHROOM_FIELD_SHORE = register("mushroom_field_shore");
-        BEACH = register("beach");
-        DESERT_HILLS = register("desert_hills");
-        WOODED_HILLS = register("wooded_hills");
-        TAIGA_HILLS = register("taiga_hills");
-        MOUNTAIN_EDGE = register("mountain_edge");
-        JUNGLE = register("jungle");
-        JUNGLE_HILLS = register("jungle_hills");
-        JUNGLE_EDGE = register("jungle_edge");
-        DEEP_OCEAN = register("deep_ocean");
-        STONE_SHORE = register("stone_shore");
-        SNOWY_BEACH = register("snowy_beach");
-        BIRCH_FOREST = register("birch_forest");
-        BIRCH_FOREST_HILLS = register("birch_forest_hills");
-        DARK_FOREST = register("dark_forest");
-        SNOWY_TAIGA = register("snowy_taiga");
-        SNOWY_TAIGA_HILLS = register("snowy_taiga_hills");
-        GIANT_TREE_TAIGA = register("giant_tree_taiga");
-        GIANT_TREE_TAIGA_HILLS = register("giant_tree_taiga_hills");
-        WOODED_MOUNTAINS = register("wooded_mountains");
-        SAVANNA = register("savanna");
-        SAVANNA_PLATEAU = register("savanna_plateau");
-        BADLANDS = register("badlands");
-        WOODED_BADLANDS_PLATEAU = register("wooded_badlands_plateau");
-        BADLANDS_PLATEAU = register("badlands_plateau");
-        SMALL_END_ISLANDS = register("small_end_islands");
-        END_MIDLANDS = register("end_midlands");
-        END_HIGHLANDS = register("end_highlands");
-        END_BARRENS = register("end_barrens");
-        WARM_OCEAN = register("warm_ocean");
-        LUKEWARM_OCEAN = register("lukewarm_ocean");
-        COLD_OCEAN = register("cold_ocean");
-        DEEP_WARM_OCEAN = register("deep_warm_ocean");
-        DEEP_LUKEWARM_OCEAN = register("deep_lukewarm_ocean");
-        DEEP_COLD_OCEAN = register("deep_cold_ocean");
-        DEEP_FROZEN_OCEAN = register("deep_frozen_ocean");
-        THE_VOID = register("the_void");
-        SUNFLOWER_PLAINS = register("sunflower_plains");
-        DESERT_LAKES = register("desert_lakes");
-        GRAVELLY_MOUNTAINS = register("gravelly_mountains");
-        FLOWER_FOREST = register("flower_forest");
-        TAIGA_MOUNTAINS = register("taiga_mountains");
-        SWAMP_HILLS = register("swamp_hills");
-        ICE_SPIKES = register("ice_spikes");
-        MODIFIED_JUNGLE = register("modified_jungle");
-        MODIFIED_JUNGLE_EDGE = register("modified_jungle_edge");
-        TALL_BIRCH_FOREST = register("tall_birch_forest");
-        TALL_BIRCH_HILLS = register("tall_birch_hills");
-        DARK_FOREST_HILLS = register("dark_forest_hills");
-        SNOWY_TAIGA_MOUNTAINS = register("snowy_taiga_mountains");
-        GIANT_SPRUCE_TAIGA = register("giant_spruce_taiga");
-        GIANT_SPRUCE_TAIGA_HILLS = register("giant_spruce_taiga_hills");
-        MODIFIED_GRAVELLY_MOUNTAINS = register("modified_gravelly_mountains");
-        SHATTERED_SAVANNA = register("shattered_savanna");
-        SHATTERED_SAVANNA_PLATEAU = register("shattered_savanna_plateau");
-        ERODED_BADLANDS = register("eroded_badlands");
-        MODIFIED_WOODED_BADLANDS_PLATEAU = register("modified_wooded_badlands_plateau");
-        MODIFIED_BADLANDS_PLATEAU = register("modified_badlands_plateau");
-        BAMBOO_JUNGLE = register("bamboo_jungle");
-        BAMBOO_JUNGLE_HILLS = register("bamboo_jungle_hills");
-        SOUL_SAND_VALLEY = register("soul_sand_valley");
-        CRIMSON_FOREST = register("crimson_forest");
-        WARPED_FOREST = register("warped_forest");
-        BASALT_DELTAS = register("basalt_deltas");
+    private static ResourceKey<Biome> register(final String id) {
+        return ResourceKey.create((ResourceKey<? extends Registry<Biome>>)Registry.BIOME_REGISTRY, new ResourceLocation(id));
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
index c9860d632e88a734ee95c9fee6e6495d1f9242a3..0a224f54168ceee982fc3dab1036fbeeb6c56dff 100644
--- a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
@@ -29,6 +29,9 @@ import java.util.List;
 import net.minecraft.world.level.levelgen.synth.NormalNoise;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
+import org.apache.logging.log4j.LogManager;
+
+import static net.minecraft.world.level.biome.Biomes.*;
 
 public class MultiNoiseBiomeSource extends BiomeSource
 {
@@ -83,7 +86,7 @@ public class MultiNoiseBiomeSource extends BiomeSource
     }
     
     private Optional<PresetInstance> preset() {
-        return this.preset.map(debug1 -> new PresetInstance((Preset)debug1.getSecond(), (Registry)debug1.getFirst(), this.seed));
+        return this.preset.map(pair -> new PresetInstance(pair.getSecond(), pair.getFirst(), this.seed));
     }
     
     @Override
@@ -99,8 +102,8 @@ public class MultiNoiseBiomeSource extends BiomeSource
     
     static {
         DEFAULT_NOISE_PARAMETERS = new NoiseParameters(-7, ImmutableList.of(1.0, 1.0)); // MagmaCube - decompile fix
-        DIRECT_CODEC = RecordCodecBuilder.<MultiNoiseBiomeSource>mapCodec(debug0 -> debug0.group(Codec.LONG.fieldOf("seed").forGetter(debug0l -> debug0l.seed), RecordCodecBuilder.<Pair<Biome.ClimateParameters, Supplier<Biome>>>create(debug0l -> debug0l.group(Biome.ClimateParameters.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair::getSecond)).apply(debug0l, Pair::of)).listOf().fieldOf("biomes").forGetter(debug0l -> debug0l.parameters), NoiseParameters.CODEC.fieldOf("temperature_noise").forGetter(debug0l -> debug0l.temperatureParams), NoiseParameters.CODEC.fieldOf("humidity_noise").forGetter(debug0l -> debug0l.humidityParams), NoiseParameters.CODEC.fieldOf("altitude_noise").forGetter(debug0l -> debug0l.altitudeParams), NoiseParameters.CODEC.fieldOf("weirdness_noise").forGetter(debug0l -> debug0l.weirdnessParams)).apply(debug0, MultiNoiseBiomeSource::new)); // MagmaCube - decompile fix
-        CODEC = Codec.mapEither(PresetInstance.CODEC, MultiNoiseBiomeSource.DIRECT_CODEC).xmap(debug0 -> debug0.map(PresetInstance::biomeSource, Function.identity()), debug0l -> debug0l.preset().<Either>map(Either::left).orElseGet(() -> Either.right(debug0l))).codec(); // MagmaCube - decompile fix
+        DIRECT_CODEC = RecordCodecBuilder.mapCodec(debug0 -> debug0.group(Codec.LONG.fieldOf("seed").forGetter(debug0l -> debug0l.seed), RecordCodecBuilder.<Pair<Biome.ClimateParameters, Supplier<Biome>>>create(debug0l -> debug0l.group(Biome.ClimateParameters.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair::getSecond)).apply(debug0l, Pair::of)).listOf().fieldOf("biomes").forGetter(debug0l -> debug0l.parameters), NoiseParameters.CODEC.fieldOf("temperature_noise").forGetter(debug0l -> debug0l.temperatureParams), NoiseParameters.CODEC.fieldOf("humidity_noise").forGetter(debug0l -> debug0l.humidityParams), NoiseParameters.CODEC.fieldOf("altitude_noise").forGetter(debug0l -> debug0l.altitudeParams), NoiseParameters.CODEC.fieldOf("weirdness_noise").forGetter(debug0l -> debug0l.weirdnessParams)).apply(debug0, MultiNoiseBiomeSource::new)); // MagmaCube - decompile fix
+        CODEC = Codec.mapEither(PresetInstance.CODEC, MultiNoiseBiomeSource.DIRECT_CODEC).xmap(either -> either.map(PresetInstance::biomeSource, Function.identity()), multiNoiseBiomeSource -> multiNoiseBiomeSource.preset().<Either>map(Either::left).orElseGet(() -> Either.right(multiNoiseBiomeSource))).codec(); // MagmaCube - decompile fix
     }
     
     static class NoiseParameters
@@ -134,10 +137,10 @@ public class MultiNoiseBiomeSource extends BiomeSource
         private final Registry<Biome> biomes;
         private final long seed;
         
-        private PresetInstance(final Preset debug1, final Registry<Biome> debug2, final long debug3) {
-            this.preset = debug1;
-            this.biomes = debug2;
-            this.seed = debug3;
+        private PresetInstance(final Preset preset, final Registry<Biome> biomeRegistry, final long seed) {
+            this.preset = preset;
+            this.biomes = biomeRegistry;
+            this.seed = seed;
         }
         
         public Preset preset() {
@@ -157,7 +160,7 @@ public class MultiNoiseBiomeSource extends BiomeSource
         }
         
         static {
-            CODEC = RecordCodecBuilder.mapCodec(debug0 -> debug0.group(ResourceLocation.CODEC.flatXmap(debug0l -> Optional.ofNullable(Preset.BY_NAME.get(debug0l)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown preset: " + debug0l)), debug0l -> DataResult.success(debug0l.name)).fieldOf("preset").stable().forGetter(PresetInstance::preset), RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter(PresetInstance::biomes), Codec.LONG.fieldOf("seed").stable().forGetter(PresetInstance::seed)).apply(debug0, debug0.stable(PresetInstance::new))); // MagmaCube - decompile fix
+            CODEC = RecordCodecBuilder.mapCodec(builder -> builder.group(ResourceLocation.CODEC.flatXmap(resourceLocation -> Optional.ofNullable(Preset.BY_NAME.get(resourceLocation)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown preset: " + resourceLocation)), preset -> DataResult.success(preset.name)).fieldOf("preset").stable().forGetter(PresetInstance::preset), RegistryLookupCodec.create(Registry.BIOME_REGISTRY).forGetter(PresetInstance::biomes), Codec.LONG.fieldOf("seed").stable().forGetter(PresetInstance::seed)).apply(builder, builder.stable(PresetInstance::new))); // MagmaCube - decompile fix
         }
     }
     
@@ -168,19 +171,19 @@ public class MultiNoiseBiomeSource extends BiomeSource
         private final ResourceLocation name;
         private final Function3<Preset, Registry<Biome>, Long, MultiNoiseBiomeSource> biomeSource;
         
-        public Preset(final ResourceLocation debug1, final Function3<Preset, Registry<Biome>, Long, MultiNoiseBiomeSource> debug2) {
-            this.name = debug1;
-            this.biomeSource = debug2;
-            Preset.BY_NAME.put(debug1, this);
+        public Preset(final ResourceLocation biomeLocation, final Function3<Preset, Registry<Biome>, Long, MultiNoiseBiomeSource> function3) {
+            this.name = biomeLocation;
+            this.biomeSource = function3;
+            Preset.BY_NAME.put(biomeLocation, this);
         }
         
-        public MultiNoiseBiomeSource biomeSource(final Registry<Biome> debug1, final long debug2) {
-            return (MultiNoiseBiomeSource)this.biomeSource.apply(this, debug1, debug2); // MagmaCube - decompile fix
+        public MultiNoiseBiomeSource biomeSource(final Registry<Biome> biomeRegistry, final long seed) {
+            return (MultiNoiseBiomeSource)this.biomeSource.apply(this, biomeRegistry, seed); // MagmaCube - decompile fix
         }
         
         static {
             BY_NAME = Maps.newHashMap();
-            NETHER = new Preset(new ResourceLocation("nether"), ((debug0, debug1, debug2) -> new MultiNoiseBiomeSource(debug2, ImmutableList.of(Pair.<Biome.ClimateParameters, Supplier<Biome>>of(new Biome.ClimateParameters(0.0f, 0.0f, 0.0f, 0.0f, 0.0f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.NETHER_WASTES)), Pair.<Biome.ClimateParameters, Supplier<Biome>>of(new Biome.ClimateParameters(0.0f, -0.5f, 0.0f, 0.0f, 0.0f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.SOUL_SAND_VALLEY)), Pair.<Biome.ClimateParameters, Supplier<Biome>>of(new Biome.ClimateParameters(0.4f, 0.0f, 0.0f, 0.0f, 0.0f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.CRIMSON_FOREST)), Pair.<Biome.ClimateParameters, Supplier<Biome>>of(new Biome.ClimateParameters(0.0f, 0.5f, 0.0f, 0.0f, 0.375f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.WARPED_FOREST)), Pair.<Biome.ClimateParameters, Supplier<Biome>>of(new Biome.ClimateParameters(-0.5f, 0.0f, 0.0f, 0.0f, 0.175f), () -> debug1.getOrThrow(net.minecraft.world.level.biome.Biomes.BASALT_DELTAS))), Optional.of(Pair.of(debug1, debug0))))); // MagmaCube - decompile fix
+            NETHER = new Preset(new ResourceLocation("nether"), ((preset, biomeRegistry, seed) -> new MultiNoiseBiomeSource(seed, ImmutableList.of(Pair.of(new Biome.ClimateParameters(0.0f, 0.0f, 0.0f, 0.0f, 0.0f), () -> biomeRegistry.getOrThrow(NETHER_WASTES)), Pair.of(new Biome.ClimateParameters(0.0f, -0.5f, 0.0f, 0.0f, 0.0f), () -> biomeRegistry.getOrThrow(SOUL_SAND_VALLEY)), Pair.of(new Biome.ClimateParameters(0.4f, 0.0f, 0.0f, 0.0f, 0.0f), () -> biomeRegistry.getOrThrow(CRIMSON_FOREST)), Pair.of(new Biome.ClimateParameters(0.0f, 0.5f, 0.0f, 0.0f, 0.375f), () -> biomeRegistry.getOrThrow(WARPED_FOREST)), Pair.of(new Biome.ClimateParameters(-0.5f, 0.0f, 0.0f, 0.0f, 0.175f), () -> biomeRegistry.getOrThrow(BASALT_DELTAS))), Optional.of(Pair.of(biomeRegistry, preset))))); // MagmaCube - decompile fix
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java b/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java
index 31ce6e52eab432e5762859bf5221fd935cf3d503..86b6596fde6d4d3d3f5def4ad237bb7cee087cab 100644
--- a/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java
@@ -26,20 +26,20 @@ public class TheEndBiomeSource extends BiomeSource
     private final Biome islands;
     private final Biome barrens;
     
-    public TheEndBiomeSource(final Registry<Biome> debug1, final long debug2) {
-        this(debug1, debug2, debug1.getOrThrow(Biomes.THE_END), debug1.getOrThrow(Biomes.END_HIGHLANDS), debug1.getOrThrow(Biomes.END_MIDLANDS), debug1.getOrThrow(Biomes.SMALL_END_ISLANDS), debug1.getOrThrow(Biomes.END_BARRENS));
+    public TheEndBiomeSource(final Registry<Biome> biomeRegistry, final long seed) {
+        this(biomeRegistry, seed, biomeRegistry.getOrThrow(Biomes.THE_END), biomeRegistry.getOrThrow(Biomes.END_HIGHLANDS), biomeRegistry.getOrThrow(Biomes.END_MIDLANDS), biomeRegistry.getOrThrow(Biomes.SMALL_END_ISLANDS), biomeRegistry.getOrThrow(Biomes.END_BARRENS));
     }
     
-    private TheEndBiomeSource(final Registry<Biome> debug1, final long debug2, final Biome debug4, final Biome debug5, final Biome debug6, final Biome debug7, final Biome debug8) {
-        super((List<Biome>)ImmutableList.of(debug4, debug5, debug6, debug7, debug8)); // MagmaCube - decompile fix
-        this.biomes = debug1;
-        this.seed = debug2;
-        this.end = debug4;
-        this.highlands = debug5;
-        this.midlands = debug6;
-        this.islands = debug7;
-        this.barrens = debug8;
-        final WorldgenRandom debug9 = new WorldgenRandom(debug2);
+    private TheEndBiomeSource(final Registry<Biome> biomeRegistry, final long seed, final Biome end, final Biome highlands, final Biome midlands, final Biome islands, final Biome barrens) {
+        super(ImmutableList.of(end, highlands, midlands, islands, barrens)); // MagmaCube - decompile fix
+        this.biomes = biomeRegistry;
+        this.seed = seed;
+        this.end = end;
+        this.highlands = highlands;
+        this.midlands = midlands;
+        this.islands = islands;
+        this.barrens = barrens;
+        final WorldgenRandom debug9 = new WorldgenRandom(seed);
         debug9.consumeCount(17292);
         this.islandNoise = new SimplexNoise(debug9);
     }
diff --git a/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
index ff2aad689eb65a36a8059573679d7d8ae77718ce..ca479e7e0ade8a589706ccf7caf01781efe24338 100644
--- a/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
@@ -31,7 +31,7 @@ public class WeightedPressurePlateBlock extends BasePressurePlateBlock
     protected int getSignalStrength(final Level debug1, final BlockPos debug2) {
         final int debug3 = Math.min(debug1.getEntitiesOfClass((Class<? extends Entity>)Entity.class, WeightedPressurePlateBlock.TOUCH_AABB.move(debug2)).size(), this.maxWeight);
         if (debug3 > 0) {
-            final float debug4 = Math.min(this.maxWeight, debug3) / this.maxWeight;
+            final float debug4 = Math.min((float)this.maxWeight, debug3) / (float)this.maxWeight;
             return Mth.ceil(debug4 * 15.0f);
         }
         return 0;
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java b/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java
index 1d5b0941b03ff03b4ddeb603a9ef7e1c67b5545f..862433458be758e7aa78c6cb838986711828eae6 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java
@@ -22,12 +22,12 @@ public class IntegerProperty extends Property<Integer>
         for (int debug5 = debug2; debug5 <= debug3; ++debug5) {
             debug4.add(debug5);
         }
-        this.values = (ImmutableSet<Integer>)ImmutableSet.copyOf((Collection)debug4);
+        this.values = ImmutableSet.copyOf(debug4);
     }
     
     @Override
     public Collection<Integer> getPossibleValues() {
-        return (Collection<Integer>)this.values;
+        return this.values;
     }
     
     @Override
@@ -37,7 +37,7 @@ public class IntegerProperty extends Property<Integer>
         }
         if (debug1 instanceof IntegerProperty && super.equals(debug1)) {
             final IntegerProperty debug2 = (IntegerProperty)debug1;
-            return this.values.equals((Object)debug2.values);
+            return this.values.equals(debug2.values);
         }
         return false;
     }
@@ -55,7 +55,7 @@ public class IntegerProperty extends Property<Integer>
     public Optional<Integer> getValue(final String debug1) {
         try {
             final Integer debug2 = Integer.valueOf(debug1);
-            return this.values.contains((Object)debug2) ? Optional.of(debug2) : Optional.empty();
+            return this.values.contains(debug2) ? Optional.of(debug2) : Optional.empty();
         }
         catch (NumberFormatException debug3) {
             return Optional.empty();
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
index 04d311ebb500919644c6e7e0adea1e3e07c77cac..9aa7bdf120bdd6393a7f86cd928fee3d6e94118f 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
@@ -18,12 +18,12 @@ public abstract class Property<T extends Comparable<T>>
     private final Codec<Value<T>> valueCodec;
     
     protected Property(final String debug1, final Class<T> debug2) {
-        this.codec = (Codec<T>)Codec.STRING.comapFlatMap(debug12 -> this.getValue(debug1).map(DataResult::success).orElseGet(() -> DataResult.error("Unable to read property: " + this + " with value: " + debug1)), this::getName); // MagmaCube - decompile fix
+        this.codec = (Codec<T>)Codec.STRING.comapFlatMap(debug12 -> this.getValue(debug12).map(DataResult::success).orElseGet(() -> DataResult.error("Unable to read property: " + this + " with value: " + debug12)), this::getName); // MagmaCube - decompile fix
         this.valueCodec = (Codec<Value<T>>)this.codec.xmap(this::value, Value::value); // MagmaCube - decompile fix
         this.clazz = debug2;
         this.name = debug1;
     }
-    
+
     public Value<T> value(final T debug1) {
         return new Value<T>(this, debug1); // MagmaCube - decompile fix
     }
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
index 10b5428706b865a824bb2c8934e84653a0a81fed..127d7061f648783bf60c5b371db4b50fffef433e 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -85,7 +85,7 @@ public abstract class ChunkGenerator {
         if (debug1 == null || debug1.count() == 0) {
             return;
         }
-        ArrayList debug2 = Lists.newArrayList();
+        ArrayList<Biome> debug2 = Lists.newArrayList();
         for (Biome debug4 : this.biomeSource.possibleBiomes()) {
             if (!debug4.getGenerationSettings().isValidStart(StructureFeature.STRONGHOLD)) continue;
             debug2.add(debug4);
diff --git a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
index e41afa6f8d0c2bf729c166a86689121e28bb0d7f..03ef333bbd25c5155e93cdf5e8bdfbd4ff65ae0e 100644
--- a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
+++ b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
@@ -50,7 +50,7 @@ public class DimensionType {
     public static final ResourceLocation OVERWORLD_EFFECTS = new ResourceLocation("overworld");
     public static final ResourceLocation NETHER_EFFECTS = new ResourceLocation("the_nether");
     public static final ResourceLocation END_EFFECTS = new ResourceLocation("the_end");
-    public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Codec.LONG.optionalFieldOf("fixed_time").xmap(debug0 -> debug0.map(OptionalLong::of).orElseGet(OptionalLong::empty), debug0 -> debug0.isPresent() ? Optional.of(debug0.getAsLong()) : Optional.empty()).forGetter(debug0 -> debug0.fixedTime), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange((double)1.0E-5f, (double)3.0E7).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange((int)0, (int)256).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter(debug0 -> debug0.infiniburn), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter(debug0 -> debug0.effectsLocation), Codec.FLOAT.fieldOf("ambient_light").forGetter(debug0 -> Float.valueOf(debug0.ambientLight))).apply((Applicative)debug02, DimensionType::new)); // MagmaCube - decompile fix
+    public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(Codec.LONG.optionalFieldOf("fixed_time").xmap(debug0 -> debug0.map(OptionalLong::of).orElseGet(OptionalLong::empty), debug0 -> debug0.isPresent() ? Optional.of(debug0.getAsLong()) : Optional.empty()).forGetter(debug0 -> debug0.fixedTime), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange((double)1.0E-5f, (double)3.0E7).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange((int)0, (int)256).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), ResourceLocation.CODEC.fieldOf("infiniburn").forGetter(debug0 -> debug0.infiniburn), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter(debug0 -> debug0.effectsLocation), Codec.FLOAT.fieldOf("ambient_light").forGetter(debug0 -> debug0.ambientLight)).apply(debug02, DimensionType::new)); // MagmaCube - decompile fix
     public static final float[] MOON_BRIGHTNESS_PER_PHASE = new float[]{1.0f, 0.75f, 0.5f, 0.25f, 0.0f, 0.25f, 0.5f, 0.75f};
     public static final ResourceKey<DimensionType> OVERWORLD_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld"));
     public static final ResourceKey<DimensionType> NETHER_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("the_nether"));
@@ -79,28 +79,28 @@ public class DimensionType {
     private final float ambientLight;
     private final transient float[] brightnessRamp;
 
-    protected DimensionType(OptionalLong debug1, boolean debug2, boolean debug3, boolean debug4, boolean debug5, double debug6, boolean debug8, boolean debug9, boolean debug10, boolean debug11, int debug12, ResourceLocation debug13, ResourceLocation debug14, float debug15) {
-        this(debug1, debug2, debug3, debug4, debug5, debug6, false, debug8, debug9, debug10, debug11, debug12, FuzzyOffsetBiomeZoomer.INSTANCE, debug13, debug14, debug15);
+    protected DimensionType(OptionalLong fixedTime, boolean hasSkylight, boolean hasCeiling, boolean ultraWarm, boolean natural, double coordinateScale, boolean piglinSafe, boolean bedWorks, boolean respawnAnchorWorks, boolean hasRaids, int logicalHeight, ResourceLocation infiniburn, ResourceLocation effectsLocation, float ambientLight) {
+        this(fixedTime, hasSkylight, hasCeiling, ultraWarm, natural, coordinateScale, false, piglinSafe, bedWorks, respawnAnchorWorks, hasRaids, logicalHeight, FuzzyOffsetBiomeZoomer.INSTANCE, infiniburn, effectsLocation, ambientLight);
     }
 
-    protected DimensionType(OptionalLong debug1, boolean debug2, boolean debug3, boolean debug4, boolean debug5, double debug6, boolean debug8, boolean debug9, boolean debug10, boolean debug11, boolean debug12, int debug13, BiomeZoomer debug14, ResourceLocation debug15, ResourceLocation debug16, float debug17) {
-        this.fixedTime = debug1;
-        this.hasSkylight = debug2;
-        this.hasCeiling = debug3;
-        this.ultraWarm = debug4;
-        this.natural = debug5;
-        this.coordinateScale = debug6;
-        this.createDragonFight = debug8;
-        this.piglinSafe = debug9;
-        this.bedWorks = debug10;
-        this.respawnAnchorWorks = debug11;
-        this.hasRaids = debug12;
-        this.logicalHeight = debug13;
-        this.biomeZoomer = debug14;
-        this.infiniburn = debug15;
-        this.effectsLocation = debug16;
-        this.ambientLight = debug17;
-        this.brightnessRamp = DimensionType.fillBrightnessRamp(debug17);
+    protected DimensionType(OptionalLong fixedTime, boolean hasSkylight, boolean hasCeiling, boolean ultraWarm, boolean natural, double coordinateScale, boolean createDragonFight, boolean piglinSafe, boolean bedWorks, boolean respawnAnchorWorks, boolean hasRaids, int logicalHeight, BiomeZoomer biomeZoomer, ResourceLocation infiniburn, ResourceLocation effectsLocation, float ambientLight) {
+        this.fixedTime = fixedTime;
+        this.hasSkylight = hasSkylight;
+        this.hasCeiling = hasCeiling;
+        this.ultraWarm = ultraWarm;
+        this.natural = natural;
+        this.coordinateScale = coordinateScale;
+        this.createDragonFight = createDragonFight;
+        this.piglinSafe = piglinSafe;
+        this.bedWorks = bedWorks;
+        this.respawnAnchorWorks = respawnAnchorWorks;
+        this.hasRaids = hasRaids;
+        this.logicalHeight = logicalHeight;
+        this.biomeZoomer = biomeZoomer;
+        this.infiniburn = infiniburn;
+        this.effectsLocation = effectsLocation;
+        this.ambientLight = ambientLight;
+        this.brightnessRamp = DimensionType.fillBrightnessRamp(ambientLight);
     }
 
     private static float[] fillBrightnessRamp(float debug0) {
@@ -114,50 +114,50 @@ public class DimensionType {
     }
 
     @Deprecated
-    public static DataResult<ResourceKey<Level>> parseLegacy(Dynamic<?> debug0) {
-        Optional debug1 = debug0.asNumber().result();
+    public static DataResult<ResourceKey<Level>> parseLegacy(Dynamic<?> dynamic) {
+        Optional<Number> debug1 = dynamic.asNumber().result();
         if (debug1.isPresent()) {
-            int debug2 = ((Number)debug1.get()).intValue();
-            if (debug2 == -1) {
+            int dimensionId = debug1.get().intValue();
+            if (dimensionId == -1) {
                 return DataResult.success(Level.NETHER);
             }
-            if (debug2 == 0) {
+            if (dimensionId == 0) {
                 return DataResult.success(Level.OVERWORLD);
             }
-            if (debug2 == 1) {
+            if (dimensionId == 1) {
                 return DataResult.success(Level.END);
             }
         }
-        return Level.RESOURCE_KEY_CODEC.parse(debug0);
+        return Level.RESOURCE_KEY_CODEC.parse(dynamic);
     }
 
-    public static RegistryAccess.RegistryHolder registerBuiltin(RegistryAccess.RegistryHolder debug0) {
-        WritableRegistry<DimensionType> debug1 = debug0.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
-        debug1.register(OVERWORLD_LOCATION, DEFAULT_OVERWORLD, Lifecycle.stable());
-        debug1.register(OVERWORLD_CAVES_LOCATION, DEFAULT_OVERWORLD_CAVES, Lifecycle.stable());
-        debug1.register(NETHER_LOCATION, DEFAULT_NETHER, Lifecycle.stable());
-        debug1.register(END_LOCATION, DEFAULT_END, Lifecycle.stable());
-        return debug0;
+    public static RegistryAccess.RegistryHolder registerBuiltin(RegistryAccess.RegistryHolder registryHolder) {
+        WritableRegistry<DimensionType> writableRegistry = registryHolder.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
+        writableRegistry.register(OVERWORLD_LOCATION, DEFAULT_OVERWORLD, Lifecycle.stable());
+        writableRegistry.register(OVERWORLD_CAVES_LOCATION, DEFAULT_OVERWORLD_CAVES, Lifecycle.stable());
+        writableRegistry.register(NETHER_LOCATION, DEFAULT_NETHER, Lifecycle.stable());
+        writableRegistry.register(END_LOCATION, DEFAULT_END, Lifecycle.stable());
+        return registryHolder;
     }
 
-    private static ChunkGenerator defaultEndGenerator(Registry<Biome> debug0, Registry<NoiseGeneratorSettings> debug1, long debug2) {
-        return new NoiseBasedChunkGenerator(new TheEndBiomeSource(debug0, debug2), debug2, () -> debug1.getOrThrow(NoiseGeneratorSettings.END));
+    private static ChunkGenerator defaultEndGenerator(Registry<Biome> biomeRegistry, Registry<NoiseGeneratorSettings> generatorSettings, long seed) {
+        return new NoiseBasedChunkGenerator(new TheEndBiomeSource(biomeRegistry, seed), seed, () -> generatorSettings.getOrThrow(NoiseGeneratorSettings.END));
     }
 
-    private static ChunkGenerator defaultNetherGenerator(Registry<Biome> debug0, Registry<NoiseGeneratorSettings> debug1, long debug2) {
-        return new NoiseBasedChunkGenerator(MultiNoiseBiomeSource.Preset.NETHER.biomeSource(debug0, debug2), debug2, () -> debug1.getOrThrow(NoiseGeneratorSettings.NETHER));
+    private static ChunkGenerator defaultNetherGenerator(Registry<Biome> biomeRegistry, Registry<NoiseGeneratorSettings> generatorSettings, long seed) {
+        return new NoiseBasedChunkGenerator(MultiNoiseBiomeSource.Preset.NETHER.biomeSource(biomeRegistry, seed), seed, () -> generatorSettings.getOrThrow(NoiseGeneratorSettings.NETHER));
     }
 
-    public static MappedRegistry<LevelStem> defaultDimensions(Registry<DimensionType> debug0, Registry<Biome> debug1, Registry<NoiseGeneratorSettings> debug2, long debug3) {
-        MappedRegistry<LevelStem> debug5 = new MappedRegistry<LevelStem>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
-        debug5.register(LevelStem.NETHER, new LevelStem(() -> debug0.getOrThrow(NETHER_LOCATION), DimensionType.defaultNetherGenerator(debug1, debug2, debug3)), Lifecycle.stable());
-        debug5.register(LevelStem.END, new LevelStem(() -> debug0.getOrThrow(END_LOCATION), DimensionType.defaultEndGenerator(debug1, debug2, debug3)), Lifecycle.stable());
-        return debug5;
+    public static MappedRegistry<LevelStem> defaultDimensions(Registry<DimensionType> dimensionTypes, Registry<Biome> biomeRegistry, Registry<NoiseGeneratorSettings> generatorSettings, long seed) {
+        MappedRegistry<LevelStem> mappedRegistry = new MappedRegistry<>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
+        mappedRegistry.register(LevelStem.NETHER, new LevelStem(() -> dimensionTypes.getOrThrow(NETHER_LOCATION), DimensionType.defaultNetherGenerator(biomeRegistry, generatorSettings, seed)), Lifecycle.stable());
+        mappedRegistry.register(LevelStem.END, new LevelStem(() -> dimensionTypes.getOrThrow(END_LOCATION), DimensionType.defaultEndGenerator(biomeRegistry, generatorSettings, seed)), Lifecycle.stable());
+        return mappedRegistry;
     }
 
-    public static double getTeleportationScale(DimensionType debug0, DimensionType debug1) {
-        double debug2 = debug0.coordinateScale();
-        double debug4 = debug1.coordinateScale();
+    public static double getTeleportationScale(DimensionType dimensionType, DimensionType dimensionType1) {
+        double debug2 = dimensionType.coordinateScale();
+        double debug4 = dimensionType1.coordinateScale();
         return debug2 / debug4;
     }
 
@@ -234,14 +234,14 @@ public class DimensionType {
         return this.fixedTime.isPresent();
     }
 
-    public float timeOfDay(long debug1) {
-        double debug3 = Mth.frac((double)this.fixedTime.orElse(debug1) / 24000.0 - 0.25);
+    public float timeOfDay(long dayTime) {
+        double debug3 = Mth.frac((double)this.fixedTime.orElse(dayTime) / 24000.0 - 0.25);
         double debug5 = 0.5 - Math.cos(debug3 * Math.PI) / 2.0;
         return (float)(debug3 * 2.0 + debug5) / 3.0f;
     }
 
-    public int moonPhase(long debug1) {
-        return (int)(debug1 / 24000L % 8L + 8L) % 8;
+    public int moonPhase(long dayTime) {
+        return (int)(dayTime / 24000L % 8L + 8L) % 8;
     }
 
     public float brightness(int debug1) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
index 9318ad5664a3ac594db50f98e7c005607afe8b0a..1d156781dbfc5ae75e3f89e34d62add0f7e1dc0b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -279,8 +279,8 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
         final int debug6 = Math.floorDiv(debug2, this.chunkWidth);
         final int debug7 = Math.floorMod(debug1, this.chunkWidth);
         final int debug8 = Math.floorMod(debug2, this.chunkWidth);
-        final double debug9 = debug7 / this.chunkWidth;
-        final double debug10 = debug8 / this.chunkWidth;
+        final double debug9 = (float)debug7 / (float)this.chunkWidth;
+        final double debug10 = (float)debug8 / (float)this.chunkWidth;
         final double[][] debug11 = { this.makeAndFillNoiseColumn(debug5, debug6), this.makeAndFillNoiseColumn(debug5, debug6 + 1), this.makeAndFillNoiseColumn(debug5 + 1, debug6), this.makeAndFillNoiseColumn(debug5 + 1, debug6 + 1) };
         for (int debug12 = this.chunkCountY - 1; debug12 >= 0; --debug12) {
             final double debug13 = debug11[0][debug12];
@@ -292,7 +292,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
             final double debug19 = debug11[2][debug12 + 1];
             final double debug20 = debug11[3][debug12 + 1];
             for (int debug21 = this.chunkHeight - 1; debug21 >= 0; --debug21) {
-                final double debug22 = debug21 / this.chunkHeight;
+                final double debug22 = (float)debug21 / (float)this.chunkHeight;
                 final double debug23 = Mth.lerp3(debug22, debug9, debug10, debug13, debug17, debug15, debug19, debug14, debug18, debug16, debug20);
                 final int debug24 = debug12 * this.chunkHeight + debug21;
                 final BlockState debug25 = this.generateBaseState(debug23, debug24);
@@ -461,7 +461,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
                             debug30 = debug22.getOrCreateSection(debug43);
                             debug30.acquire();
                         }
-                        final double debug44 = debug40 / this.chunkHeight;
+                        final double debug44 = (float)debug40 / (float)this.chunkHeight;
                         final double debug45 = Mth.lerp(debug44, debug32, debug36);
                         final double debug46 = Mth.lerp(debug44, debug34, debug38);
                         final double debug47 = Mth.lerp(debug44, debug33, debug37);
@@ -469,13 +469,13 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator
                         for (int debug49 = 0; debug49 < this.chunkWidth; ++debug49) {
                             final int debug50 = debug11 + debug28 * this.chunkWidth + debug49;
                             final int debug51 = debug50 & 0xF;
-                            final double debug52 = debug49 / this.chunkWidth;
+                            final double debug52 = (float)debug49 / (float)this.chunkWidth;
                             final double debug53 = Mth.lerp(debug52, debug45, debug46);
                             final double debug54 = Mth.lerp(debug52, debug47, debug48);
                             for (int debug55 = 0; debug55 < this.chunkWidth; ++debug55) {
                                 final int debug56 = debug12 + debug29 * this.chunkWidth + debug55;
                                 final int debug57 = debug56 & 0xF;
-                                final double debug58 = debug55 / this.chunkWidth;
+                                final double debug58 = (float)debug55 / (float)this.chunkWidth;
                                 final double debug59 = Mth.lerp(debug58, debug53, debug54);
                                 double debug60 = Mth.clamp(debug59 / 200.0, -1.0, 1.0);
                                 debug60 = debug60 / 2.0 - debug60 * debug60 * debug60 / 24.0;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/Feature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/Feature.java
index a6d33a4402cfe96a4faf08ea4ab61b73ed6ac182..09a01fc4e173fccec97c59b9ca0af869521258c9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/Feature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/Feature.java
@@ -98,7 +98,7 @@ public abstract class Feature<FC extends FeatureConfiguration>
     }
     
     public Feature(final Codec<FC> debug1) {
-        this.configuredCodec = (Codec<ConfiguredFeature<FC, Feature<FC>>>)debug1.fieldOf("config").xmap(debug1l -> new ConfiguredFeature<>(this, debug1l), debug0 -> debug0.config).codec(); // MagmaCube - decompile fix
+        this.configuredCodec = debug1.fieldOf("config").xmap(debug1l -> new ConfiguredFeature<>(this, debug1l), debug0 -> debug0.config).codec(); // MagmaCube - decompile fix
     }
     
     public Codec<ConfiguredFeature<FC, Feature<FC>>> configuredCodec() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/IceSpikeFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/IceSpikeFeature.java
index d61262ea665b5cc0e86fad02da7e060c8bb453cb..c0bcc3974efd85f5f0afbb7813a5b4978f881049 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/IceSpikeFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/IceSpikeFeature.java
@@ -34,7 +34,7 @@ public class IceSpikeFeature extends Feature<NoneFeatureConfiguration>
             debug4 = debug4.above(10 + debug3.nextInt(30));
         }
         for (int debug8 = 0; debug8 < debug6; ++debug8) {
-            final float debug9 = (1.0f - debug8 / debug6) * debug7;
+            final float debug9 = (1.0f - (float)debug8 / (float)debug6) * debug7;
             for (int debug10 = Mth.ceil(debug9), debug11 = -debug10; debug11 <= debug10; ++debug11) {
                 final float debug12 = Mth.abs(debug11) - 0.25f;
                 for (int debug13 = -debug10; debug13 <= debug10; ++debug13) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/OreFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/OreFeature.java
index 74d57796a0e0e7fb9363cf5559869180d353d38e..30a816c63a752ff6b681444f4829b6dd0fb845fe 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/OreFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/OreFeature.java
@@ -52,7 +52,7 @@ public class OreFeature extends Feature<OreConfiguration>
         final int debug24 = debug3.size;
         final double[] debug25 = new double[debug24 * 4];
         for (int debug26 = 0; debug26 < debug24; ++debug26) {
-            final float debug27 = debug26 / debug24;
+            final float debug27 = (float)debug26 / (float)debug24;
             final double debug28 = Mth.lerp(debug27, debug4, debug6);
             final double debug29 = Mth.lerp(debug27, debug12, debug14);
             final double debug30 = Mth.lerp(debug27, debug8, debug10);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaPineFoliagePlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaPineFoliagePlacer.java
index 06267108ec0f0fb995aedee2a727e39a83920d9d..bf93d87f1b5b5e1fa322b8298e8c4d95f778ced0 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaPineFoliagePlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/foliageplacers/MegaPineFoliagePlacer.java
@@ -34,7 +34,7 @@ public class MegaPineFoliagePlacer extends FoliagePlacer
         int debug12 = 0;
         for (int debug13 = debug11.getY() - debug6 + debug9; debug13 <= debug11.getY() + debug9; ++debug13) {
             final int debug14 = debug11.getY() - debug13;
-            final int debug15 = debug7 + debug5.radiusOffset() + Mth.floor(debug14 / debug6 * 3.5f);
+            final int debug15 = debug7 + debug5.radiusOffset() + Mth.floor((float)debug14 / (float)debug6 * 3.5f);
             int debug16;
             if (debug14 > 0 && debug15 == debug12 && (debug13 & 0x1) == 0x0) {
                 debug16 = debug15 + 1;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
index 03b23f8795765883830d543c59c9197ebc5b9a6b..58963a159522c6f09221232c347c442b05b69f76 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/structures/StructureTemplatePool.java
@@ -49,7 +49,7 @@ import org.apache.logging.log4j.Logger;
 
 public class StructureTemplatePool {
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final Codec<StructureTemplatePool> DIRECT_CODEC = RecordCodecBuilder.create(debug02 -> debug02.group(ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName), ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback), Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.INT.fieldOf("weight")).codec().listOf().promotePartial(Util.prefix("Pool element: ", ((Logger)LOGGER)::error)).fieldOf("elements").forGetter(debug0 -> debug0.rawTemplates)).apply(debug02, StructureTemplatePool::new)); // MagmaCube - decompile fix
+    public static final Codec<StructureTemplatePool> DIRECT_CODEC = RecordCodecBuilder.create(builder -> builder.group(ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName), ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback), Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.INT.fieldOf("weight")).codec().listOf().promotePartial(Util.prefix("Pool element: ", LOGGER::error)).fieldOf("elements").forGetter(structureTemplatePool -> structureTemplatePool.rawTemplates)).apply(builder, StructureTemplatePool::new)); // MagmaCube - decompile fix
     public static final Codec<Supplier<StructureTemplatePool>> CODEC = RegistryFileCodec.create(Registry.TEMPLATE_POOL_REGISTRY, DIRECT_CODEC);
     private final ResourceLocation name;
     private final List<Pair<StructurePoolElement, Integer>> rawTemplates;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/FancyTrunkPlacer.java b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/FancyTrunkPlacer.java
index c675ad2b999d0e10e90cd48ed4369172f8af801e..4d14150cdd8dbb7f441b7d7e561fbad8c844ba9c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/FancyTrunkPlacer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/trunkplacers/FancyTrunkPlacer.java
@@ -94,9 +94,9 @@ public class FancyTrunkPlacer extends TrunkPlacer
         }
         final BlockPos debug9 = debug4.offset(-debug3.getX(), -debug3.getY(), -debug3.getZ());
         final int debug10 = this.getSteps(debug9);
-        final float debug11 = debug9.getX() / debug10;
-        final float debug12 = debug9.getY() / debug10;
-        final float debug13 = debug9.getZ() / debug10;
+        final float debug11 = (float)debug9.getX() / (float)debug10;
+        final float debug12 = (float)debug9.getY() / (float)debug10;
+        final float debug13 = (float)debug9.getZ() / (float)debug10;
         for (int debug14 = 0; debug14 <= debug10; ++debug14) {
             final BlockPos debug15 = debug3.offset(0.5f + debug14 * debug11, 0.5f + debug14 * debug12, 0.5f + debug14 * debug13);
             if (debug5) {
diff --git a/src/main/java/net/minecraft/world/level/lighting/BlockLightEngine.java b/src/main/java/net/minecraft/world/level/lighting/BlockLightEngine.java
index 1243242c25c62012ed56c000c7e68d6442e13382..8d14d2fbd03b5f67302bd17db6614970e62c16ca 100644
--- a/src/main/java/net/minecraft/world/level/lighting/BlockLightEngine.java
+++ b/src/main/java/net/minecraft/world/level/lighting/BlockLightEngine.java
@@ -34,35 +34,35 @@ public final class BlockLightEngine extends LayerLightEngine<BlockLightSectionSt
     }
     
     @Override
-    protected int computeLevelFromNeighbor(final long debug1, final long debug3, final int debug5) {
-        if (debug3 == Long.MAX_VALUE) {
+    protected int computeLevelFromNeighbor(final long startPos, final long endPos, final int startLevel) {
+        if (endPos == Long.MAX_VALUE) {
             return 15;
         }
-        if (debug1 == Long.MAX_VALUE) {
-            return debug5 + 15 - this.getLightEmission(debug3);
+        if (startPos == Long.MAX_VALUE) {
+            return startLevel + 15 - this.getLightEmission(endPos);
         }
-        if (debug5 >= 15) {
-            return debug5;
+        if (startLevel >= 15) {
+            return startLevel;
         }
-        final int debug6 = Integer.signum(BlockPos.getX(debug3) - BlockPos.getX(debug1));
-        final int debug7 = Integer.signum(BlockPos.getY(debug3) - BlockPos.getY(debug1));
-        final int debug8 = Integer.signum(BlockPos.getZ(debug3) - BlockPos.getZ(debug1));
+        final int debug6 = Integer.signum(BlockPos.getX(endPos) - BlockPos.getX(startPos));
+        final int debug7 = Integer.signum(BlockPos.getY(endPos) - BlockPos.getY(startPos));
+        final int debug8 = Integer.signum(BlockPos.getZ(endPos) - BlockPos.getZ(startPos));
         final Direction debug9 = Direction.fromNormal(debug6, debug7, debug8);
         if (debug9 == null) {
             return 15;
         }
         final MutableInt debug10 = new MutableInt();
-        final BlockState debug11 = this.getStateAndOpacity(debug3, debug10);
+        final BlockState debug11 = this.getStateAndOpacity(endPos, debug10);
         if (debug10.getValue() >= 15) {
             return 15;
         }
-        final BlockState debug12 = this.getStateAndOpacity(debug1, null);
-        final VoxelShape debug13 = this.getShape(debug12, debug1, debug9);
-        final VoxelShape debug14 = this.getShape(debug11, debug3, debug9.getOpposite());
+        final BlockState debug12 = this.getStateAndOpacity(startPos, null);
+        final VoxelShape debug13 = this.getShape(debug12, startPos, debug9);
+        final VoxelShape debug14 = this.getShape(debug11, endPos, debug9.getOpposite());
         if (Shapes.faceShapeOccludes(debug13, debug14)) {
             return 15;
         }
-        return debug5 + Math.max(1, debug10.getValue());
+        return startLevel + Math.max(1, debug10.getValue());
     }
     
     @Override
@@ -78,10 +78,10 @@ public final class BlockLightEngine extends LayerLightEngine<BlockLightSectionSt
     }
     
     @Override
-    protected int getComputedLevel(final long debug1, final long debug3, final int debug5) {
-        int debug6 = debug5;
-        if (Long.MAX_VALUE != debug3) {
-            final int debug7 = this.computeLevelFromNeighbor(Long.MAX_VALUE, debug1, 0);
+    protected int getComputedLevel(final long pos, final long excludedSourcePos, final int level) {
+        int debug6 = level;
+        if (Long.MAX_VALUE != excludedSourcePos) {
+            final int debug7 = this.computeLevelFromNeighbor(Long.MAX_VALUE, pos, 0);
             if (debug6 > debug7) {
                 debug6 = debug7;
             }
@@ -89,11 +89,11 @@ public final class BlockLightEngine extends LayerLightEngine<BlockLightSectionSt
                 return debug6;
             }
         }
-        final long debug8 = SectionPos.blockToSection(debug1);
+        final long debug8 = SectionPos.blockToSection(pos);
         final DataLayer debug9 = ((BlockLightSectionStorage)this.storage).getDataLayer(debug8, true);
         for (final Direction debug10 : BlockLightEngine.DIRECTIONS) {
-            final long debug11 = BlockPos.offset(debug1, debug10);
-            if (debug11 != debug3) {
+            final long debug11 = BlockPos.offset(pos, debug10);
+            if (debug11 != excludedSourcePos) {
                 final long debug12 = SectionPos.blockToSection(debug11);
                 DataLayer debug13;
                 if (debug8 == debug12) {
@@ -103,7 +103,7 @@ public final class BlockLightEngine extends LayerLightEngine<BlockLightSectionSt
                     debug13 = ((BlockLightSectionStorage)this.storage).getDataLayer(debug12, true);
                 }
                 if (debug13 != null) {
-                    final int debug14 = this.computeLevelFromNeighbor(debug11, debug1, this.getLevel(debug13, debug11));
+                    final int debug14 = this.computeLevelFromNeighbor(debug11, pos, this.getLevel(debug13, debug11));
                     if (debug6 > debug14) {
                         debug6 = debug14;
                     }
diff --git a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
index e2123d4c366dc4567e017208f1d0e288e32d4d90..8f7e30c2c7449ad02600628a54c38a686dcba1a5 100644
--- a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
+++ b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
@@ -18,13 +18,13 @@ public abstract class DynamicGraphMinFixedPoint
     private int firstQueuedLevel;
     private volatile boolean hasWork;
     
-    protected DynamicGraphMinFixedPoint(final int debug1, final int debug2, final int debug3) {
-        if (debug1 >= 254) {
+    protected DynamicGraphMinFixedPoint(final int levelCount, final int debug2, final int debug3) {
+        if (levelCount >= 254) {
             throw new IllegalArgumentException("Level count must be < 254.");
         }
-        this.levelCount = debug1;
-        this.queues = new LongLinkedOpenHashSet[debug1];
-        for (int debug4 = 0; debug4 < debug1; ++debug4) {
+        this.levelCount = levelCount;
+        this.queues = new LongLinkedOpenHashSet[levelCount];
+        for (int debug4 = 0; debug4 < levelCount; ++debug4) {
             this.queues[debug4] = new LongLinkedOpenHashSet(debug2, 0.5f) {
                 protected void rehash(final int debug1) {
                     if (debug1 > debug2) {
@@ -33,75 +33,74 @@ public abstract class DynamicGraphMinFixedPoint
                 }
             };
         }
-        (this.computedLevels = (Long2ByteMap)new Long2ByteOpenHashMap(debug3, 0.5f) {
+        (this.computedLevels = new Long2ByteOpenHashMap(debug3, 0.5f) {
             protected void rehash(final int debug1) {
                 if (debug1 > debug3) {
                     super.rehash(debug1);
                 }
             }
-        }).defaultReturnValue((byte)(-1));
-        this.firstQueuedLevel = debug1;
+        }).defaultReturnValue((byte)-1);
+        this.firstQueuedLevel = levelCount;
     }
     
-    private int getKey(final int debug1, final int debug2) {
-        int debug3 = debug1;
-        if (debug3 > debug2) {
-            debug3 = debug2;
+    private int getKey(final int level1, final int level2) {
+        int i = level1;
+        if (level1 > level2) {
+            i = level2;
         }
-        if (debug3 > this.levelCount - 1) {
-            debug3 = this.levelCount - 1;
+        if (i > this.levelCount - 1) {
+            i = this.levelCount - 1;
         }
-        return debug3;
+        return i;
     }
     
-    private void checkFirstQueuedLevel(final int debug1) {
-        final int debug2 = this.firstQueuedLevel;
-        this.firstQueuedLevel = debug1;
-        for (int debug3 = debug2 + 1; debug3 < debug1; ++debug3) {
-            if (!this.queues[debug3].isEmpty()) {
-                this.firstQueuedLevel = debug3;
+    private void checkFirstQueuedLevel(final int maxLevel) {
+        final int oldValue = this.firstQueuedLevel;
+        this.firstQueuedLevel = maxLevel;
+        for (int i = oldValue + 1; i < maxLevel; ++i) {
+            if (!this.queues[i].isEmpty()) {
+                this.firstQueuedLevel = i;
                 break;
             }
         }
     }
     
-    protected void removeFromQueue(final long debug1) {
-        final int debug2 = this.computedLevels.get(debug1) & 0xFF;
-        if (debug2 == 255) {
+    protected void removeFromQueue(final long position) {
+        final int i = this.computedLevels.get(position) & 0xFF;
+        if (i == 255) {
             return;
         }
-        final int debug3 = this.getLevel(debug1);
-        final int debug4 = this.getKey(debug3, debug2);
-        this.dequeue(debug1, debug4, this.levelCount, true);
-        this.hasWork = (this.firstQueuedLevel < this.levelCount);
+        final int level = this.getLevel(position);
+        final int key = this.getKey(level, i);
+        this.dequeue(position, key, this.levelCount, true);
+        this.hasWork = this.firstQueuedLevel < this.levelCount;
     }
     
-    public void removeIf(final LongPredicate debug1) {
-        final LongList debug3 = (LongList)new LongArrayList();
+    public void removeIf(final LongPredicate predicate) {
+        final LongList list = new LongArrayList();
         this.computedLevels.keySet().forEach((LongConsumer) debug2 -> { // MagmaCube - decompile fix
-            if (debug1.test(debug2)) {
-                debug3.add(debug2); // MagmaCube - decompile fix
+            if (predicate.test(debug2)) {
+                list.add(debug2); // MagmaCube - decompile fix
             }
-            return;
         });
-        debug3.forEach((LongConsumer) this::removeFromQueue); // MagmaCube - decompile fix
+        list.forEach((LongConsumer) this::removeFromQueue); // MagmaCube - decompile fix
     }
     
-    private void dequeue(final long debug1, final int debug3, final int debug4, final boolean debug5) {
-        if (debug5) {
-            this.computedLevels.remove(debug1);
+    private void dequeue(final long pos, final int level, final int maxLevel, final boolean removeAll) {
+        if (removeAll) {
+            this.computedLevels.remove(pos);
         }
-        this.queues[debug3].remove(debug1);
-        if (this.queues[debug3].isEmpty() && this.firstQueuedLevel == debug3) {
-            this.checkFirstQueuedLevel(debug4);
+        this.queues[level].remove(pos);
+        if (this.queues[level].isEmpty() && this.firstQueuedLevel == level) {
+            this.checkFirstQueuedLevel(maxLevel);
         }
     }
     
-    private void enqueue(final long debug1, final int debug3, final int debug4) {
-        this.computedLevels.put(debug1, (byte)debug3);
-        this.queues[debug4].add(debug1);
-        if (this.firstQueuedLevel > debug4) {
-            this.firstQueuedLevel = debug4;
+    private void enqueue(final long pos, final int level, final int updateLevel) {
+        this.computedLevels.put(pos, (byte)level);
+        this.queues[updateLevel].add(pos);
+        if (this.firstQueuedLevel > updateLevel) {
+            this.firstQueuedLevel = updateLevel;
         }
     }
     
@@ -114,59 +113,54 @@ public abstract class DynamicGraphMinFixedPoint
         this.hasWork = (this.firstQueuedLevel < this.levelCount);
     }
     
-    private void checkEdge(final long debug1, final long debug3, int debug5, int debug6, int debug7, final boolean debug8) {
-        if (this.isSource(debug3)) {
+    private void checkEdge(final long fromPos, final long toPos, int newLevel, int previousLevel, int level, final boolean decreasing) {
+        if (this.isSource(toPos)) {
             return;
         }
-        debug5 = Mth.clamp(debug5, 0, this.levelCount - 1);
-        debug6 = Mth.clamp(debug6, 0, this.levelCount - 1);
-        boolean debug9;
-        if (debug7 == 255) {
-            debug9 = true;
-            debug7 = debug6;
-        }
-        else {
-            debug9 = false;
-        }
-        int debug10;
-        if (debug8) {
-            debug10 = Math.min(debug7, debug5);
-        }
-        else {
-            debug10 = Mth.clamp(this.getComputedLevel(debug3, debug1, debug5), 0, this.levelCount - 1);
-        }
-        final int debug11 = this.getKey(debug6, debug7);
-        if (debug6 != debug10) {
-            final int debug12 = this.getKey(debug6, debug10);
-            if (debug11 != debug12 && !debug9) {
-                this.dequeue(debug3, debug11, debug12, false);
+        newLevel = Mth.clamp(newLevel, 0, this.levelCount - 1);
+        previousLevel = Mth.clamp(previousLevel, 0, this.levelCount - 1);
+        boolean flag;
+        if (level == 255) {
+            flag = true;
+            level = previousLevel;
+        } else {
+            flag = false;
+        }
+        int i;
+        if (decreasing) {
+            i = Math.min(level, newLevel);
+        } else {
+            i = Mth.clamp(this.getComputedLevel(toPos, fromPos, newLevel), 0, this.levelCount - 1);
+        }
+        final int j = this.getKey(previousLevel, level);
+        if (previousLevel != i) {
+            final int k = this.getKey(previousLevel, i);
+            if (j != k && !flag) {
+                this.dequeue(toPos, j, k, false);
             }
-            this.enqueue(debug3, debug10, debug12);
-        }
-        else if (!debug9) {
-            this.dequeue(debug3, debug11, this.levelCount, true);
+            this.enqueue(toPos, i, k);
+        } else if (!flag) {
+            this.dequeue(toPos, j, this.levelCount, true);
         }
     }
     
-    protected final void checkNeighbor(final long debug1, final long debug3, final int debug5, final boolean debug6) {
-        final int debug7 = this.computedLevels.get(debug3) & 0xFF;
-        final int debug8 = Mth.clamp(this.computeLevelFromNeighbor(debug1, debug3, debug5), 0, this.levelCount - 1);
-        if (debug6) {
-            this.checkEdge(debug1, debug3, debug8, this.getLevel(debug3), debug7, true);
-        }
-        else {
-            boolean debug9;
-            int debug10;
-            if (debug7 == 255) {
-                debug9 = true;
-                debug10 = Mth.clamp(this.getLevel(debug3), 0, this.levelCount - 1);
-            }
-            else {
-                debug10 = debug7;
-                debug9 = false;
+    protected final void checkNeighbor(final long fromPos, final long toPos, final int level, final boolean decreasing) {
+        final int computedLevel = this.computedLevels.get(toPos) & 0xFF;
+        final int j = Mth.clamp(this.computeLevelFromNeighbor(fromPos, toPos, level), 0, this.levelCount - 1);
+        if (decreasing) {
+            this.checkEdge(fromPos, toPos, j, this.getLevel(toPos), computedLevel, true);
+        } else {
+            boolean flag;
+            int k;
+            if (computedLevel == 255) {
+                flag = true;
+                k = Mth.clamp(this.getLevel(toPos), 0, this.levelCount - 1);
+            } else {
+                k = computedLevel;
+                flag = false;
             }
-            if (debug8 == debug10) {
-                this.checkEdge(debug1, debug3, this.levelCount - 1, debug9 ? debug10 : this.getLevel(debug3), debug7, false);
+            if (j == k) {
+                this.checkEdge(fromPos, toPos, this.levelCount - 1, flag ? k : this.getLevel(toPos), computedLevel, false);
             }
         }
     }
@@ -175,34 +169,33 @@ public abstract class DynamicGraphMinFixedPoint
         return this.hasWork;
     }
     
-    protected final int runUpdates(int debug1) {
+    protected final int runUpdates(int toUpdateCount) {
         if (this.firstQueuedLevel >= this.levelCount) {
-            return debug1;
-        }
-        while (this.firstQueuedLevel < this.levelCount && debug1 > 0) {
-            --debug1;
-            final LongLinkedOpenHashSet debug2 = this.queues[this.firstQueuedLevel];
-            final long debug3 = debug2.removeFirstLong();
-            final int debug4 = Mth.clamp(this.getLevel(debug3), 0, this.levelCount - 1);
-            if (debug2.isEmpty()) {
+            return toUpdateCount;
+        }
+        while (this.firstQueuedLevel < this.levelCount && toUpdateCount > 0) { // todo: fix looping forever
+            --toUpdateCount;
+            final LongLinkedOpenHashSet queue = this.queues[this.firstQueuedLevel];
+            final long level = queue.removeFirstLong();
+            final int j = Mth.clamp(this.getLevel(level), 0, this.levelCount - 1);
+            if (queue.isEmpty()) { // todo: break here if got stuck, and see what's going on (see queues)
                 this.checkFirstQueuedLevel(this.levelCount);
             }
-            final int debug5 = this.computedLevels.remove(debug3) & 0xFF;
-            if (debug5 < debug4) {
-                this.setLevel(debug3, debug5);
-                this.checkNeighborsAfterUpdate(debug3, debug5, true);
-            }
-            else {
-                if (debug5 <= debug4) {
+            final int k = this.computedLevels.remove(level) & 0xFF;
+            if (k < j) {
+                this.setLevel(level, k);
+                this.checkNeighborsAfterUpdate(level, k, true);
+            } else {
+                if (k <= j) {
                     continue;
                 }
-                this.enqueue(debug3, debug5, this.getKey(this.levelCount - 1, debug5));
-                this.setLevel(debug3, this.levelCount - 1);
-                this.checkNeighborsAfterUpdate(debug3, debug4, false);
+                this.enqueue(level, k, this.getKey(this.levelCount - 1, k));
+                this.setLevel(level, this.levelCount - 1);
+                this.checkNeighborsAfterUpdate(level, j, false);
             }
         }
-        this.hasWork = (this.firstQueuedLevel < this.levelCount);
-        return debug1;
+        this.hasWork = this.firstQueuedLevel < this.levelCount;
+        return toUpdateCount;
     }
     
     public int getQueueSize() {
diff --git a/src/main/java/net/minecraft/world/level/lighting/LayerLightEngine.java b/src/main/java/net/minecraft/world/level/lighting/LayerLightEngine.java
index cf408e2ddaaa25c08ae91831241e47e6e307e094..a2972a5bac404138abe4d79af6bdcb83d0257203 100644
--- a/src/main/java/net/minecraft/world/level/lighting/LayerLightEngine.java
+++ b/src/main/java/net/minecraft/world/level/lighting/LayerLightEngine.java
@@ -39,28 +39,28 @@ public abstract class LayerLightEngine<M extends DataLayerStorageMap<M>, S exten
     }
     
     @Override
-    protected void checkNode(final long debug1) {
+    protected void checkNode(final long worldPos) {
         this.storage.runAllUpdates();
-        if (this.storage.storingLightForSection(SectionPos.blockToSection(debug1))) {
-            super.checkNode(debug1);
+        if (this.storage.storingLightForSection(SectionPos.blockToSection(worldPos))) {
+            super.checkNode(worldPos);
         }
     }
     
     @Nullable
-    private BlockGetter getChunk(final int debug1, final int debug2) {
-        final long debug3 = ChunkPos.asLong(debug1, debug2);
-        for (int debug4 = 0; debug4 < 2; ++debug4) {
-            if (debug3 == this.lastChunkPos[debug4]) {
-                return this.lastChunk[debug4];
+    private BlockGetter getChunk(final int chunkX, final int chunkZ) {
+        final long i = ChunkPos.asLong(chunkX, chunkZ);
+        for (int j = 0; j < 2; ++j) {
+            if (i == this.lastChunkPos[j]) {
+                return this.lastChunk[j];
             }
         }
-        final BlockGetter debug5 = this.chunkSource.getChunkForLighting(debug1, debug2);
-        for (int debug6 = 1; debug6 > 0; --debug6) {
-            this.lastChunkPos[debug6] = this.lastChunkPos[debug6 - 1];
-            this.lastChunk[debug6] = this.lastChunk[debug6 - 1];
+        final BlockGetter blockGetter = this.chunkSource.getChunkForLighting(chunkX, chunkZ);
+        for (int k = 1; k > 0; --k) {
+            this.lastChunkPos[k] = this.lastChunkPos[k - 1];
+            this.lastChunk[k] = this.lastChunk[k - 1];
         }
-        this.lastChunkPos[0] = debug3;
-        return this.lastChunk[0] = debug5;
+        this.lastChunkPos[0] = i;
+        return this.lastChunk[0] = blockGetter;
     }
     
     private void clearCache() {
@@ -68,47 +68,47 @@ public abstract class LayerLightEngine<M extends DataLayerStorageMap<M>, S exten
         Arrays.fill(this.lastChunk, null);
     }
     
-    protected BlockState getStateAndOpacity(final long debug1, @Nullable final MutableInt debug3) {
-        if (debug1 == Long.MAX_VALUE) {
-            if (debug3 != null) {
-                debug3.setValue(0);
+    protected BlockState getStateAndOpacity(final long pos, @Nullable final MutableInt opacityOut) {
+        if (pos == Long.MAX_VALUE) {
+            if (opacityOut != null) {
+                opacityOut.setValue(0);
             }
             return Blocks.AIR.defaultBlockState();
         }
-        final int debug4 = SectionPos.blockToSectionCoord(BlockPos.getX(debug1));
-        final int debug5 = SectionPos.blockToSectionCoord(BlockPos.getZ(debug1));
-        final BlockGetter debug6 = this.getChunk(debug4, debug5);
-        if (debug6 == null) {
-            if (debug3 != null) {
-                debug3.setValue(16);
+        final int chunkX = SectionPos.blockToSectionCoord(BlockPos.getX(pos));
+        final int chunkZ = SectionPos.blockToSectionCoord(BlockPos.getZ(pos));
+        final BlockGetter blockGetter = this.getChunk(chunkX, chunkZ);
+        if (blockGetter == null) {
+            if (opacityOut != null) {
+                opacityOut.setValue(16);
             }
             return Blocks.BEDROCK.defaultBlockState();
         }
-        this.pos.set(debug1);
-        final BlockState debug7 = debug6.getBlockState(this.pos);
-        final boolean debug8 = debug7.canOcclude() && debug7.useShapeForLightOcclusion();
-        if (debug3 != null) {
-            debug3.setValue(debug7.getLightBlock(this.chunkSource.getLevel(), this.pos));
+        this.pos.set(pos);
+        final BlockState blockState = blockGetter.getBlockState(this.pos);
+        final boolean flag = blockState.canOcclude() && blockState.useShapeForLightOcclusion();
+        if (opacityOut != null) {
+            opacityOut.setValue(blockState.getLightBlock(this.chunkSource.getLevel(), this.pos));
         }
-        return debug8 ? debug7 : Blocks.AIR.defaultBlockState();
+        return flag ? blockState : Blocks.AIR.defaultBlockState();
     }
     
-    protected VoxelShape getShape(final BlockState debug1, final long debug2, final Direction debug4) {
-        return debug1.canOcclude() ? debug1.getFaceOcclusionShape(this.chunkSource.getLevel(), this.pos.set(debug2), debug4) : Shapes.empty();
+    protected VoxelShape getShape(final BlockState blockState, final long worldPos, final Direction direction) {
+        return blockState.canOcclude() ? blockState.getFaceOcclusionShape(this.chunkSource.getLevel(), this.pos.set(worldPos), direction) : Shapes.empty();
     }
     
-    public static int getLightBlockInto(final BlockGetter debug0, final BlockState debug1, final BlockPos debug2, final BlockState debug3, final BlockPos debug4, final Direction debug5, final int debug6) {
-        final boolean debug7 = debug1.canOcclude() && debug1.useShapeForLightOcclusion();
-        final boolean debug8 = debug3.canOcclude() && debug3.useShapeForLightOcclusion();
-        if (!debug7 && !debug8) {
-            return debug6;
+    public static int getLightBlockInto(final BlockGetter blockGetter, final BlockState blockState, final BlockPos blockPos, final BlockState blockState1, final BlockPos occlusionShape, final Direction direction, final int i) {
+        final boolean flag = blockState.canOcclude() && blockState.useShapeForLightOcclusion();
+        final boolean flag1 = blockState1.canOcclude() && blockState1.useShapeForLightOcclusion();
+        if (!flag && !flag1) {
+            return i;
         }
-        final VoxelShape debug9 = debug7 ? debug1.getOcclusionShape(debug0, debug2) : Shapes.empty();
-        final VoxelShape debug10 = debug8 ? debug3.getOcclusionShape(debug0, debug4) : Shapes.empty();
-        if (Shapes.mergedFaceOccludes(debug9, debug10, debug5)) {
+        final VoxelShape shape = flag ? blockState.getOcclusionShape(blockGetter, blockPos) : Shapes.empty();
+        final VoxelShape shape1 = flag1 ? blockState1.getOcclusionShape(blockGetter, occlusionShape) : Shapes.empty();
+        if (Shapes.mergedFaceOccludes(shape, shape1, direction)) {
             return 16;
         }
-        return debug6;
+        return i;
     }
     
     @Override
@@ -117,29 +117,29 @@ public abstract class LayerLightEngine<M extends DataLayerStorageMap<M>, S exten
     }
     
     @Override
-    protected int getComputedLevel(final long debug1, final long debug3, final int debug5) {
+    protected int getComputedLevel(final long pos, final long excludedSourcePos, final int level) {
         return 0;
     }
     
     @Override
-    protected int getLevel(final long debug1) {
-        if (debug1 == Long.MAX_VALUE) {
+    protected int getLevel(final long sectionPosIn) {
+        if (sectionPosIn == Long.MAX_VALUE) {
             return 0;
         }
-        return 15 - this.storage.getStoredLevel(debug1);
+        return 15 - this.storage.getStoredLevel(sectionPosIn);
     }
     
-    protected int getLevel(final DataLayer debug1, final long debug2) {
-        return 15 - debug1.get(SectionPos.sectionRelative(BlockPos.getX(debug2)), SectionPos.sectionRelative(BlockPos.getY(debug2)), SectionPos.sectionRelative(BlockPos.getZ(debug2)));
+    protected int getLevel(final DataLayer dataLayer, final long worldPos) {
+        return 15 - dataLayer.get(SectionPos.sectionRelative(BlockPos.getX(worldPos)), SectionPos.sectionRelative(BlockPos.getY(worldPos)), SectionPos.sectionRelative(BlockPos.getZ(worldPos)));
     }
     
     @Override
-    protected void setLevel(final long debug1, final int debug3) {
-        this.storage.setStoredLevel(debug1, Math.min(15, 15 - debug3));
+    protected void setLevel(final long sectionPos, final int level) {
+        this.storage.setStoredLevel(sectionPos, Math.min(15, 15 - level));
     }
     
     @Override
-    protected int computeLevelFromNeighbor(final long debug1, final long debug3, final int debug5) {
+    protected int computeLevelFromNeighbor(final long startPos, final long endPos, final int startLevel) {
         return 0;
     }
     
@@ -147,27 +147,27 @@ public abstract class LayerLightEngine<M extends DataLayerStorageMap<M>, S exten
         return this.hasWork() || this.storage.hasWork() || this.storage.hasInconsistencies();
     }
     
-    public int runUpdates(int debug1, final boolean debug2, final boolean debug3) {
+    public int runUpdates(int toUpdateCount, final boolean updateSkyLight, final boolean updateBlockLight) {
         if (!this.runningLightUpdates) {
             if (this.storage.hasWork()) {
-                debug1 = this.storage.runUpdates(debug1);
-                if (debug1 == 0) {
-                    return debug1;
+                toUpdateCount = this.storage.runUpdates(toUpdateCount);
+                if (toUpdateCount == 0) {
+                    return toUpdateCount;
                 }
             }
-            this.storage.markNewInconsistencies(this, debug2, debug3);
+            this.storage.markNewInconsistencies(this, updateSkyLight, updateBlockLight);
         }
         this.runningLightUpdates = true;
         if (this.hasWork()) {
-            debug1 = this.runUpdates(debug1);
+            toUpdateCount = this.runUpdates(toUpdateCount);
             this.clearCache();
-            if (debug1 == 0) {
-                return debug1;
+            if (toUpdateCount == 0) {
+                return toUpdateCount;
             }
         }
         this.runningLightUpdates = false;
         this.storage.swapSectionMap();
-        return debug1;
+        return toUpdateCount;
     }
     
     protected void queueSectionData(final long debug1, @Nullable final DataLayer debug3, final boolean debug4) {
diff --git a/src/main/java/net/minecraft/world/level/lighting/LevelLightEngine.java b/src/main/java/net/minecraft/world/level/lighting/LevelLightEngine.java
index 26d0c4491a26f7a01010b03e02b64de319a79c7a..1b794fb51ee8b07284eb53cfd0b0dac32dc3266c 100644
--- a/src/main/java/net/minecraft/world/level/lighting/LevelLightEngine.java
+++ b/src/main/java/net/minecraft/world/level/lighting/LevelLightEngine.java
@@ -39,25 +39,25 @@ public class LevelLightEngine implements LightEventListener
         return (this.skyEngine != null && this.skyEngine.hasLightWork()) || (this.blockEngine != null && this.blockEngine.hasLightWork());
     }
     
-    public int runUpdates(final int debug1, final boolean debug2, final boolean debug3) {
+    public int runUpdates(final int toUpdateCount, final boolean updateSkyLight, final boolean updateBlockLight) {
         if (this.blockEngine != null && this.skyEngine != null) {
-            final int debug4 = debug1 / 2;
-            final int debug5 = this.blockEngine.runUpdates(debug4, debug2, debug3);
-            final int debug6 = debug1 - debug4 + debug5;
-            final int debug7 = this.skyEngine.runUpdates(debug6, debug2, debug3);
-            if (debug5 == 0 && debug7 > 0) {
-                return this.blockEngine.runUpdates(debug7, debug2, debug3);
+            final int updates = toUpdateCount / 2;
+            final int blockUpdates = this.blockEngine.runUpdates(updates, updateSkyLight, updateBlockLight);
+            final int totalUpdates = toUpdateCount - updates + blockUpdates;
+            final int skyUpdates = this.skyEngine.runUpdates(totalUpdates, updateSkyLight, updateBlockLight);
+            if (blockUpdates == 0 && skyUpdates > 0) {
+                return this.blockEngine.runUpdates(skyUpdates, updateSkyLight, updateBlockLight);
             }
-            return debug7;
+            return skyUpdates;
         }
         else {
             if (this.blockEngine != null) {
-                return this.blockEngine.runUpdates(debug1, debug2, debug3);
+                return this.blockEngine.runUpdates(toUpdateCount, updateSkyLight, updateBlockLight);
             }
             if (this.skyEngine != null) {
-                return this.skyEngine.runUpdates(debug1, debug2, debug3);
+                return this.skyEngine.runUpdates(toUpdateCount, updateSkyLight, updateBlockLight);
             }
-            return debug1;
+            return toUpdateCount;
         }
     }
     
diff --git a/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java b/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java
index 7e917f14075cbe076e4b684a1f0882ba1be9267e..23973ce66c2dfa458d122e136f1958a5aefeab00 100644
--- a/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java
+++ b/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java
@@ -21,118 +21,116 @@ public final class SkyLightEngine extends LayerLightEngine<SkyLightSectionStorag
     }
     
     @Override
-    protected int computeLevelFromNeighbor(final long debug1, final long debug3, int debug5) {
-        if (debug3 == Long.MAX_VALUE) {
+    protected int computeLevelFromNeighbor(final long startPos, final long endPos, int startLevel) {
+        if (endPos == Long.MAX_VALUE) {
             return 15;
         }
-        if (debug1 == Long.MAX_VALUE) {
-            if (!((SkyLightSectionStorage)this.storage).hasLightSource(debug3)) {
+        if (startPos == Long.MAX_VALUE) {
+            if (!this.storage.hasLightSource(endPos)) {
                 return 15;
             }
-            debug5 = 0;
+            startLevel = 0;
         }
-        if (debug5 >= 15) {
-            return debug5;
+        if (startLevel >= 15) {
+            return startLevel;
         }
-        final MutableInt debug6 = new MutableInt();
-        final BlockState debug7 = this.getStateAndOpacity(debug3, debug6);
-        if (debug6.getValue() >= 15) {
+        final MutableInt mutableInt = new MutableInt();
+        final BlockState endBlockState = this.getStateAndOpacity(endPos, mutableInt);
+        if (mutableInt.getValue() >= 15) {
             return 15;
         }
-        final int debug8 = BlockPos.getX(debug1);
-        final int debug9 = BlockPos.getY(debug1);
-        final int debug10 = BlockPos.getZ(debug1);
-        final int debug11 = BlockPos.getX(debug3);
-        final int debug12 = BlockPos.getY(debug3);
-        final int debug13 = BlockPos.getZ(debug3);
-        final boolean debug14 = debug8 == debug11 && debug10 == debug13;
-        final int debug15 = Integer.signum(debug11 - debug8);
-        final int debug16 = Integer.signum(debug12 - debug9);
-        final int debug17 = Integer.signum(debug13 - debug10);
-        Direction debug18;
-        if (debug1 == Long.MAX_VALUE) {
-            debug18 = Direction.DOWN;
-        }
-        else {
-            debug18 = Direction.fromNormal(debug15, debug16, debug17);
-        }
-        final BlockState debug19 = this.getStateAndOpacity(debug1, null);
-        if (debug18 != null) {
-            final VoxelShape debug20 = this.getShape(debug19, debug1, debug18);
-            final VoxelShape debug21 = this.getShape(debug7, debug3, debug18.getOpposite());
-            if (Shapes.faceShapeOccludes(debug20, debug21)) {
+        final int startX = BlockPos.getX(startPos);
+        final int startY = BlockPos.getY(startPos);
+        final int startZ = BlockPos.getZ(startPos);
+        final int endX = BlockPos.getX(endPos);
+        final int endY = BlockPos.getY(endPos);
+        final int endZ = BlockPos.getZ(endPos);
+        final boolean isXZSame = startX == endX && startZ == endZ;
+        final int diffX = Integer.signum(endX - startX);
+        final int diffY = Integer.signum(endY - startY);
+        final int diffZ = Integer.signum(endZ - startZ);
+        Direction direction;
+        if (startPos == Long.MAX_VALUE) {
+            direction = Direction.DOWN;
+        } else {
+            direction = Direction.fromNormal(diffX, diffY, diffZ);
+        }
+        final BlockState startBlockState = this.getStateAndOpacity(startPos, null);
+        if (direction != null) {
+            final VoxelShape startShape = this.getShape(startBlockState, startPos, direction);
+            final VoxelShape endShape = this.getShape(endBlockState, endPos, direction.getOpposite());
+            if (Shapes.faceShapeOccludes(startShape, endShape)) {
                 return 15;
             }
-        }
-        else {
-            final VoxelShape debug20 = this.getShape(debug19, debug1, Direction.DOWN);
-            if (Shapes.faceShapeOccludes(debug20, Shapes.empty())) {
+        } else {
+            final VoxelShape startShape = this.getShape(startBlockState, startPos, Direction.DOWN);
+            if (Shapes.faceShapeOccludes(startShape, Shapes.empty())) {
                 return 15;
             }
-            final int debug22 = debug14 ? -1 : 0;
-            final Direction debug23 = Direction.fromNormal(debug15, debug22, debug17);
-            if (debug23 == null) {
+            final int debug22 = isXZSame ? -1 : 0;
+            final Direction direction1 = Direction.fromNormal(diffX, debug22, diffZ);
+            if (direction1 == null) {
                 return 15;
             }
-            final VoxelShape debug24 = this.getShape(debug7, debug3, debug23.getOpposite());
-            if (Shapes.faceShapeOccludes(Shapes.empty(), debug24)) {
+            final VoxelShape endShape = this.getShape(endBlockState, endPos, direction1.getOpposite());
+            if (Shapes.faceShapeOccludes(Shapes.empty(), endShape)) {
                 return 15;
             }
         }
-        final boolean debug25 = debug1 == Long.MAX_VALUE || (debug14 && debug9 > debug12);
-        if (debug25 && debug5 == 0 && debug6.getValue() == 0) {
+        final boolean flag = startPos == Long.MAX_VALUE || (isXZSame && startY > endY);
+        if (flag && startLevel == 0 && mutableInt.getValue() == 0) {
             return 0;
         }
-        return debug5 + Math.max(1, debug6.getValue());
+        return startLevel + Math.max(1, mutableInt.getValue());
     }
     
     @Override
-    protected void checkNeighborsAfterUpdate(final long debug1, final int debug3, final boolean debug4) {
-        final long debug5 = SectionPos.blockToSection(debug1);
-        final int debug6 = BlockPos.getY(debug1);
-        final int debug7 = SectionPos.sectionRelative(debug6);
-        final int debug8 = SectionPos.blockToSectionCoord(debug6);
-        int debug9;
-        if (debug7 != 0) {
-            debug9 = 0;
-        }
-        else {
-            int debug10;
-            for (debug10 = 0; !((SkyLightSectionStorage)this.storage).storingLightForSection(SectionPos.offset(debug5, 0, -debug10 - 1, 0)) && ((SkyLightSectionStorage)this.storage).hasSectionsBelow(debug8 - debug10 - 1); ++debug10) {}
-            debug9 = debug10;
-        }
-        final long debug11 = BlockPos.offset(debug1, 0, -1 - debug9 * 16, 0);
-        final long debug12 = SectionPos.blockToSection(debug11);
-        if (debug5 == debug12 || ((SkyLightSectionStorage)this.storage).storingLightForSection(debug12)) {
-            this.checkNeighbor(debug1, debug11, debug3, debug4);
-        }
-        final long debug13 = BlockPos.offset(debug1, Direction.UP);
-        final long debug14 = SectionPos.blockToSection(debug13);
-        if (debug5 == debug14 || ((SkyLightSectionStorage)this.storage).storingLightForSection(debug14)) {
-            this.checkNeighbor(debug1, debug13, debug3, debug4);
-        }
-        for (final Direction debug15 : SkyLightEngine.HORIZONTALS) {
-            int debug16 = 0;
-            do {
-                final long debug17 = BlockPos.offset(debug1, debug15.getStepX(), -debug16, debug15.getStepZ());
-                final long debug18 = SectionPos.blockToSection(debug17);
-                if (debug5 == debug18) {
-                    this.checkNeighbor(debug1, debug17, debug3, debug4);
+    protected void checkNeighborsAfterUpdate(final long pos, final int level, final boolean decreasing) {
+        final long section = SectionPos.blockToSection(pos);
+        final int y = BlockPos.getY(pos);
+        final int sectionRelative = SectionPos.sectionRelative(y);
+        final int sectionCoord = SectionPos.blockToSectionCoord(y);
+        int i;
+        if (sectionRelative != 0) {
+            i = 0;
+        } else {
+            int i1;
+            for (i1 = 0; !this.storage.storingLightForSection(SectionPos.offset(section, 0, -i1 - 1, 0)) && this.storage.hasSectionsBelow(sectionCoord - i1 - 1); ++i1) {}
+            i = i1;
+        }
+        final long i1 = BlockPos.offset(pos, 0, -1 - i * 16, 0);
+        final long section1 = SectionPos.blockToSection(i1);
+        if (section == section1 || this.storage.storingLightForSection(section1)) {
+            this.checkNeighbor(pos, i1, level, decreasing);
+        }
+        final long up = BlockPos.offset(pos, Direction.UP);
+        final long upSection = SectionPos.blockToSection(up);
+        if (section == upSection || this.storage.storingLightForSection(upSection)) {
+            this.checkNeighbor(pos, up, level, decreasing);
+        }
+        for (final Direction direction : SkyLightEngine.HORIZONTALS) {
+            int j = 0;
+            while (true) {
+                final long k = BlockPos.offset(pos, direction.getStepX(), -j, direction.getStepZ());
+                final long section2 = SectionPos.blockToSection(k);
+                if (section == section2) {
+                    this.checkNeighbor(pos, k, level, decreasing);
                     break;
                 }
-                if (!((SkyLightSectionStorage)this.storage).storingLightForSection(debug18)) {
-                    continue;
+                if (this.storage.storingLightForSection(section2)) {
+                    this.checkNeighbor(pos, k, level, decreasing);
                 }
-                this.checkNeighbor(debug1, debug17, debug3, debug4);
-            } while (++debug16 <= debug9 * 16);
+                ++j;
+                if (j > i * 16) break;
+            }
         }
     }
     
     @Override
-    protected int getComputedLevel(final long debug1, final long debug3, final int debug5) {
-        int debug6 = debug5;
-        if (Long.MAX_VALUE != debug3) {
-            final int debug7 = this.computeLevelFromNeighbor(Long.MAX_VALUE, debug1, 0);
+    protected int getComputedLevel(final long pos, final long excludedSourcePos, final int level) {
+        int debug6 = level;
+        if (Long.MAX_VALUE != excludedSourcePos) {
+            final int debug7 = this.computeLevelFromNeighbor(Long.MAX_VALUE, pos, 0);
             if (debug6 > debug7) {
                 debug6 = debug7;
             }
@@ -140,21 +138,21 @@ public final class SkyLightEngine extends LayerLightEngine<SkyLightSectionStorag
                 return debug6;
             }
         }
-        final long debug8 = SectionPos.blockToSection(debug1);
-        final DataLayer debug9 = ((SkyLightSectionStorage)this.storage).getDataLayer(debug8, true);
+        final long debug8 = SectionPos.blockToSection(pos);
+        final DataLayer debug9 = this.storage.getDataLayer(debug8, true);
         for (final Direction debug10 : SkyLightEngine.DIRECTIONS) {
-            long debug11 = BlockPos.offset(debug1, debug10);
+            long debug11 = BlockPos.offset(pos, debug10);
             long debug12 = SectionPos.blockToSection(debug11);
             DataLayer debug13;
             if (debug8 == debug12) {
                 debug13 = debug9;
             }
             else {
-                debug13 = ((SkyLightSectionStorage)this.storage).getDataLayer(debug12, true);
+                debug13 = this.storage.getDataLayer(debug12, true);
             }
             if (debug13 != null) {
-                if (debug11 != debug3) {
-                    final int debug14 = this.computeLevelFromNeighbor(debug11, debug1, this.getLevel(debug13, debug11));
+                if (debug11 != excludedSourcePos) {
+                    final int debug14 = this.computeLevelFromNeighbor(debug11, pos, this.getLevel(debug13, debug11));
                     if (debug6 > debug14) {
                         debug6 = debug14;
                     }
@@ -164,15 +162,15 @@ public final class SkyLightEngine extends LayerLightEngine<SkyLightSectionStorag
                 }
             }
             else if (debug10 != Direction.DOWN) {
-                for (debug11 = BlockPos.getFlatIndex(debug11); !((SkyLightSectionStorage)this.storage).storingLightForSection(debug12) && !((SkyLightSectionStorage)this.storage).isAboveData(debug12); debug12 = SectionPos.offset(debug12, Direction.UP), debug11 = BlockPos.offset(debug11, 0, 16, 0)) {}
-                final DataLayer debug15 = ((SkyLightSectionStorage)this.storage).getDataLayer(debug12, true);
-                if (debug11 != debug3) {
+                for (debug11 = BlockPos.getFlatIndex(debug11); !this.storage.storingLightForSection(debug12) && !this.storage.isAboveData(debug12); debug12 = SectionPos.offset(debug12, Direction.UP), debug11 = BlockPos.offset(debug11, 0, 16, 0)) {}
+                final DataLayer debug15 = this.storage.getDataLayer(debug12, true);
+                if (debug11 != excludedSourcePos) {
                     int debug16;
                     if (debug15 != null) {
-                        debug16 = this.computeLevelFromNeighbor(debug11, debug1, this.getLevel(debug15, debug11));
+                        debug16 = this.computeLevelFromNeighbor(debug11, pos, this.getLevel(debug15, debug11));
                     }
                     else {
-                        debug16 = (((SkyLightSectionStorage)this.storage).lightOnInSection(debug12) ? 0 : 15);
+                        debug16 = (this.storage.lightOnInSection(debug12) ? 0 : 15);
                     }
                     if (debug6 > debug16) {
                         debug6 = debug16;
@@ -187,23 +185,23 @@ public final class SkyLightEngine extends LayerLightEngine<SkyLightSectionStorag
     }
     
     @Override
-    protected void checkNode(long debug1) {
-        ((SkyLightSectionStorage)this.storage).runAllUpdates();
-        long debug2 = SectionPos.blockToSection(debug1);
-        if (((SkyLightSectionStorage)this.storage).storingLightForSection(debug2)) {
-            super.checkNode(debug1);
+    protected void checkNode(long worldPos) {
+        this.storage.runAllUpdates();
+        long debug2 = SectionPos.blockToSection(worldPos);
+        if (this.storage.storingLightForSection(debug2)) {
+            super.checkNode(worldPos);
         }
         else {
-            for (debug1 = BlockPos.getFlatIndex(debug1); !((SkyLightSectionStorage)this.storage).storingLightForSection(debug2) && !((SkyLightSectionStorage)this.storage).isAboveData(debug2); debug2 = SectionPos.offset(debug2, Direction.UP), debug1 = BlockPos.offset(debug1, 0, 16, 0)) {}
-            if (((SkyLightSectionStorage)this.storage).storingLightForSection(debug2)) {
-                super.checkNode(debug1);
+            for (worldPos = BlockPos.getFlatIndex(worldPos); !this.storage.storingLightForSection(debug2) && !this.storage.isAboveData(debug2); debug2 = SectionPos.offset(debug2, Direction.UP), worldPos = BlockPos.offset(worldPos, 0, 16, 0)) {}
+            if (this.storage.storingLightForSection(debug2)) {
+                super.checkNode(worldPos);
             }
         }
     }
     
     @Override
     public String getDebugData(final long debug1) {
-        return super.getDebugData(debug1) + (((SkyLightSectionStorage)this.storage).isAboveData(debug1) ? "*" : "");
+        return super.getDebugData(debug1) + (this.storage.isAboveData(debug1) ? "*" : "");
     }
     
     static {
diff --git a/src/main/java/net/minecraft/world/level/material/Fluids.java b/src/main/java/net/minecraft/world/level/material/Fluids.java
index c901646099685199f3e464c47b5641846b49adb7..b03f73347c72b2677a0534d7565bd58ba1fa45b1 100644
--- a/src/main/java/net/minecraft/world/level/material/Fluids.java
+++ b/src/main/java/net/minecraft/world/level/material/Fluids.java
@@ -12,8 +12,8 @@ public class Fluids
     public static final FlowingFluid FLOWING_LAVA;
     public static final FlowingFluid LAVA;
     
-    private static <T extends Fluid> T register(final String debug0, final T debug1) {
-        return Registry.register(Registry.FLUID, debug0, debug1);
+    private static <T extends Fluid> T register(final String id, final T instance) {
+        return Registry.register(Registry.FLUID, id, instance);
     }
     
     static {
@@ -22,9 +22,9 @@ public class Fluids
         WATER = register("water", new WaterFluid.Source());
         FLOWING_LAVA = register("flowing_lava", new LavaFluid.Flowing());
         LAVA = register("lava", new LavaFluid.Source());
-        for (final Fluid debug1 : Registry.FLUID) {
-            for (final FluidState debug2 : debug1.getStateDefinition().getPossibleStates()) {
-                Fluid.FLUID_STATE_REGISTRY.add(debug2);
+        for (final Fluid fluid : Registry.FLUID) {
+            for (final FluidState fluidState : fluid.getStateDefinition().getPossibleStates()) {
+                Fluid.FLUID_STATE_REGISTRY.add(fluidState);
             }
         }
     }
diff --git a/src/main/java/net/minecraft/world/phys/shapes/CubePointRange.java b/src/main/java/net/minecraft/world/phys/shapes/CubePointRange.java
index 6baf33999e5bc1ed11804ebe373739fe7a5a312c..e2962f58af205393d9ef0d87d55e8daa20afb4a5 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/CubePointRange.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/CubePointRange.java
@@ -11,7 +11,7 @@ public class CubePointRange extends AbstractDoubleList
     }
     
     public double getDouble(final int debug1) {
-        return debug1 / this.parts;
+        return (float)debug1 / (float)this.parts;
     }
     
     public int size() {
diff --git a/src/main/resources/log4j2-debug.xml b/src/main/resources/log4j2-debug.xml
new file mode 100644
index 0000000000000000000000000000000000000000..aea01980678d1a4f74982b0c08f42456d557b124
--- /dev/null
+++ b/src/main/resources/log4j2-debug.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configuration status="WARN" packages="com.mojang.util">
+    <Appenders>
+        <Console name="SysOut" target="SYSTEM_OUT">
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %msg%n" />
+        </Console>
+        <Queue name="ServerGuiConsole">
+            <PatternLayout pattern="[%d{HH:mm:ss} %level]: %msg%n" />
+        </Queue>
+        <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %msg%n" />
+            <Policies>
+                <TimeBasedTriggeringPolicy />
+                <OnStartupTriggeringPolicy />
+            </Policies>
+        </RollingRandomAccessFile>
+    </Appenders>
+    <Loggers>
+        <Root level="debug">
+            <filters>
+                <MarkerFilter marker="NETWORK_PACKETS" onMatch="DENY" onMismatch="NEUTRAL" />
+            </filters>
+            <AppenderRef ref="SysOut"/>
+            <AppenderRef ref="File"/>
+            <AppenderRef ref="ServerGuiConsole"/>
+        </Root>
+    </Loggers>
+</Configuration>
\ No newline at end of file
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index aea01980678d1a4f74982b0c08f42456d557b124..4d156f225141165e5dca26becdde59f089e98649 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -16,7 +16,7 @@
         </RollingRandomAccessFile>
     </Appenders>
     <Loggers>
-        <Root level="debug">
+        <Root level="info">
             <filters>
                 <MarkerFilter marker="NETWORK_PACKETS" onMatch="DENY" onMismatch="NEUTRAL" />
             </filters>
