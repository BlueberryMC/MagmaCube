From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Sun, 10 Jan 2021 20:40:08 +0900
Subject: [PATCH] decompile fix


diff --git a/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java b/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
index 8f3f9946dd08ade4b63f84c517eeb2576e7af443..7cb31f32512675d3aeac8ee06266cba30e6d3909 100644
--- a/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
+++ b/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
@@ -190,7 +190,7 @@ public class OggAudioStream implements AudioStream {
                 memoryStack.close();
             }
 
-            return (boolean)i;
+            return false;
         }
     }
 
diff --git a/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java b/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
index 306a0f278616acc53cffec1fad2911fb8bd129a3..f63dbe7714fc4f0ab2573b2566a60f6f56931950 100644
--- a/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
+++ b/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
@@ -85,10 +85,10 @@ public class TrueTypeGlyphProvider implements GlyphProvider {
                         int i3 = intBuffer3.get(0) - intBuffer.get(0);
                         int i4 = intBuffer4.get(0) - intBuffer2.get(0);
                         if (i3 > 0 && i4 > 0) {
-                            IntBuffer intBuffer5 = memoryStack.mallocInt(1);
+                            IntBuffer intBuffer5In = memoryStack.mallocInt(1);
                             IntBuffer intBuffer6 = memoryStack.mallocInt(1);
-                            STBTruetype.stbtt_GetGlyphHMetrics(this.font, i2, intBuffer5, intBuffer6);
-                            var12 = new TrueTypeGlyphProvider.Glyph(intBuffer.get(0), intBuffer3.get(0), -intBuffer2.get(0), -intBuffer4.get(0), (float)intBuffer5.get(0) * this.pointScale, (float)intBuffer6.get(0) * this.pointScale, i2);
+                            STBTruetype.stbtt_GetGlyphHMetrics(this.font, i2, intBuffer5In, intBuffer6);
+                            var12 = new TrueTypeGlyphProvider.Glyph(intBuffer.get(0), intBuffer3.get(0), -intBuffer2.get(0), -intBuffer4.get(0), (float)intBuffer5In.get(0) * this.pointScale, (float)intBuffer6.get(0) * this.pointScale, i2);
                             break label62;
                         }
 
diff --git a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
index 72859efdfc3392f7d34b55b27784a9f488a7ba84..53ee749aca7f17ec1467882d7fe4ae9ebfaa2dd8 100644
--- a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
+++ b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
@@ -198,7 +198,7 @@ public class InputConstants {
 
     public static boolean isRawMouseInputSupported() {
         try {
-            return GLFW_RAW_MOUSE_MOTION_SUPPORTED != null && GLFW_RAW_MOUSE_MOTION_SUPPORTED.invokeExact();
+            return GLFW_RAW_MOUSE_MOTION_SUPPORTED != null && (boolean) GLFW_RAW_MOUSE_MOTION_SUPPORTED.invokeExact();
         } catch (Throwable var1) {
             throw new RuntimeException(var1);
         }
@@ -220,7 +220,7 @@ public class InputConstants {
         try {
             methodHandle = lookup.findStatic(GLFW.class, "glfwRawMouseMotionSupported", methodType);
             MethodHandle methodHandle2 = lookup.findStaticGetter(GLFW.class, "GLFW_RAW_MOUSE_MOTION", Integer.TYPE);
-            i = methodHandle2.invokeExact();
+            i = (int) methodHandle2.invokeExact();
         } catch (NoSuchFieldException | NoSuchMethodException var5) {
         } catch (Throwable var6) {
             throw new RuntimeException(var6);
diff --git a/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java b/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java
index 5d67e82e1e84949675c52f25f655c57cfc0adb6d..be0cd286660a3b104a267603ecf51c79c86a815c 100644
--- a/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java
+++ b/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java
@@ -18,7 +18,7 @@ public class MacosUtil {
     }
 
     private static boolean isInKioskMode(NSObject nSObject) {
-        return (nSObject.sendRaw("styleMask", new Object[0]) & 16384L) == 16384L;
+        return ((long) nSObject.sendRaw("styleMask", new Object[0]) & 16384L) == 16384L;
     }
 
     private static void toggleFullscreen(NSObject nSObject) {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
index 2af5b7e9255c9a2847e3b8b75efb34a71c5ee531..aec550052d87b4efd229723a3f8defa3c1b6b4d5 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
@@ -61,7 +61,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
     }
 
     private static int roundUp(int i) {
-        int i2 = 2097152;
+        int i2 = GROWTH_SIZE;
         if (i == 0) {
             return i2;
         } else {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java b/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
index 00b8353961e5737884435e1a72f6fef37527c918..81b15d782de7485dba613eb60ee5fc4c090e4388 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
@@ -11,18 +11,18 @@ public class DefaultVertexFormat {
     public static final VertexFormatElement ELEMENT_NORMAL = new VertexFormatElement(0, VertexFormatElement.Type.BYTE, VertexFormatElement.Usage.NORMAL, 3);
     public static final VertexFormatElement ELEMENT_PADDING = new VertexFormatElement(0, VertexFormatElement.Type.BYTE, VertexFormatElement.Usage.PADDING, 1);
     public static final VertexFormatElement ELEMENT_UV = ELEMENT_UV0;
-    public static final VertexFormat BLIT_SCREEN = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV", ELEMENT_UV).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat BLOCK = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-    public static final VertexFormat NEW_ENTITY = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV1", ELEMENT_UV1).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-    public static final VertexFormat PARTICLE = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
-    public static final VertexFormat POSITION = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).build());
-    public static final VertexFormat POSITION_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat POSITION_COLOR_NORMAL = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-    public static final VertexFormat POSITION_COLOR_LIGHTMAP = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
-    public static final VertexFormat POSITION_TEX = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).build());
-    public static final VertexFormat POSITION_COLOR_TEX = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).build());
-    public static final VertexFormat POSITION_TEX_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat POSITION_COLOR_TEX_LIGHTMAP = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).build());
-    public static final VertexFormat POSITION_TEX_LIGHTMAP_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat POSITION_TEX_COLOR_NORMAL = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat BLIT_SCREEN = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV", ELEMENT_UV).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat BLOCK = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat NEW_ENTITY = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV1", ELEMENT_UV1).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat PARTICLE = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
+    public static final VertexFormat POSITION = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).build());
+    public static final VertexFormat POSITION_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat POSITION_COLOR_NORMAL = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat POSITION_COLOR_LIGHTMAP = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
+    public static final VertexFormat POSITION_TEX = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).build());
+    public static final VertexFormat POSITION_COLOR_TEX = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).build());
+    public static final VertexFormat POSITION_TEX_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat POSITION_COLOR_TEX_LIGHTMAP = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).build());
+    public static final VertexFormat POSITION_TEX_LIGHTMAP_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat POSITION_TEX_COLOR_NORMAL = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
 }
\ No newline at end of file
diff --git a/src/main/java/com/mojang/realmsclient/client/FileUpload.java b/src/main/java/com/mojang/realmsclient/client/FileUpload.java
index 698735d764d710d351613726a35f7b7ca54415a4..6de8b02512666a9346ff64abd90d3556f7b16167 100644
--- a/src/main/java/com/mojang/realmsclient/client/FileUpload.java
+++ b/src/main/java/com/mojang/realmsclient/client/FileUpload.java
@@ -159,7 +159,7 @@ public class FileUpload {
     }
 
     private long getRetryDelaySeconds(HttpResponse httpResponse) {
-        return Optional.ofNullable(httpResponse.getFirstHeader("Retry-After")).map(NameValuePair::getValue).map(Long::valueOf).orElse(0L);
+        return Optional.ofNullable(httpResponse.getFirstHeader("Retry-After")).map(org.apache.http.Header::getValue).map(Long::valueOf).orElse(0L);
     }
 
     public boolean isFinished() {
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
index aa0d8950b880ba5c985d6a6fcb000d5967cb5649..03027e85bcf562f822e510e467d9937691220c7d 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
@@ -76,7 +76,7 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
             boolean flag = i != this.serverData.activeSlot || this.serverData.worldType == RealmsServer.WorldType.MINIGAME;
             Button button;
             if (flag) {
-                button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.play"), (button) -> {
+                button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.play"), (buttonIn) -> {
                     if (((RealmsWorldOptions)this.serverData.slots.get(i)).empty) {
                         RealmsResetWorldScreen realmsResetWorldScreen = new RealmsResetWorldScreen(this, this.serverData, new TranslatableComponent("mco.configure.world.switch.slot"), new TranslatableComponent("mco.configure.world.switch.slot.subtitle"), 10526880, CommonComponents.GUI_CANCEL, this::doSwitchOrReset, () -> {
                             this.minecraft.setScreen(this);
@@ -91,11 +91,11 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
 
                 });
             } else {
-                button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.download"), (button) -> {
+                button = new Button(this.getFramePositionX(i), row(8), 80, 20, new TranslatableComponent("mco.brokenworld.download"), (buttonIn) -> {
                     Component component = new TranslatableComponent("mco.configure.world.restore.download.question.line1");
                     Component component2 = new TranslatableComponent("mco.configure.world.restore.download.question.line2");
-                    this.minecraft.setScreen(new RealmsLongConfirmationScreen((flag) -> {
-                        if (flag) {
+                    this.minecraft.setScreen(new RealmsLongConfirmationScreen((flagIn) -> {
+                        if (flagIn) {
                             this.downloadWorld(i);
                         } else {
                             this.minecraft.setScreen(this);
@@ -111,7 +111,7 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
             }
 
             this.addRenderableWidget(button);
-            this.addRenderableWidget(new Button(this.getFramePositionX(i), row(10), 80, 20, new TranslatableComponent("mco.brokenworld.reset"), (button) -> {
+            this.addRenderableWidget(new Button(this.getFramePositionX(i), row(10), 80, 20, new TranslatableComponent("mco.brokenworld.reset"), (buttonIn) -> {
                 RealmsResetWorldScreen realmsResetWorldScreen = new RealmsResetWorldScreen(this, this.serverData, this::doSwitchOrReset, () -> {
                     this.minecraft.setScreen(this);
                     this.doSwitchOrReset();
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
index d90f7c57dde46e249780eff56acc552454ab17b5..5141943244bb68e7c0c3efa45ee03f427ba6763a 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
@@ -187,43 +187,43 @@ public class RealmsSelectWorldTemplateScreen extends RealmsScreen {
 
     }
 
-    private void fetchTemplatesAsync(final WorldTemplatePaginatedList worldTemplatePaginatedList) {
+    private void fetchTemplatesAsync(final WorldTemplatePaginatedList worldTemplatePaginatedListParam) {
         (new Thread("realms-template-fetcher") {
             public void run() {
-                WorldTemplatePaginatedList worldTemplatePaginatedList = worldTemplatePaginatedList;
-
-                Either<WorldTemplatePaginatedList, String> either;
-                for(RealmsClient realmsClient = RealmsClient.create(); worldTemplatePaginatedList != null; worldTemplatePaginatedList = (WorldTemplatePaginatedList)RealmsSelectWorldTemplateScreen.this.minecraft.submit(() -> {
-                    if (either.right().isPresent()) {
-                        RealmsSelectWorldTemplateScreen.LOGGER.error("Couldn't fetch templates: {}", either.right().get());
-                        if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
-                            RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(I18n.get("mco.template.select.failure"));
-                        }
-
-                        return null;
-                    } else {
-                        WorldTemplatePaginatedList worldTemplatePaginatedList = (WorldTemplatePaginatedList)either.left().get();
-
-                        for(WorldTemplate worldTemplate : worldTemplatePaginatedList.templates) {
-                            RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.addEntry(worldTemplate);
-                        }
-
-                        if (worldTemplatePaginatedList.templates.isEmpty()) {
+                WorldTemplatePaginatedList worldTemplatePaginatedList = worldTemplatePaginatedListParam;
+
+                RealmsClient realmsClient = RealmsClient.create();
+                while (worldTemplatePaginatedList != null) {
+                    Either<WorldTemplatePaginatedList, String> either = RealmsSelectWorldTemplateScreen.this.fetchTemplates(worldTemplatePaginatedList, realmsClient);
+                    worldTemplatePaginatedList = RealmsSelectWorldTemplateScreen.this.minecraft.submit(() -> {
+                        if (either.right().isPresent()) {
+                            RealmsSelectWorldTemplateScreen.LOGGER.error("Couldn't fetch templates: {}", either.right().get());
                             if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
-                                String s = I18n.get("mco.template.select.none", "%link");
-                                TextRenderingUtils.LineSegment lineSegment = TextRenderingUtils.LineSegment.link(I18n.get("mco.template.select.none.linkTitle"), "https://aka.ms/MinecraftRealmsContentCreator");
-                                RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(s, lineSegment);
+                                RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(I18n.get("mco.template.select.failure"));
                             }
 
                             return null;
                         } else {
-                            return worldTemplatePaginatedList;
+                            WorldTemplatePaginatedList worldTemplatePaginatedListIn = either.left().get();
+
+                            for (WorldTemplate worldTemplate : worldTemplatePaginatedListIn.templates) {
+                                RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.addEntry(worldTemplate);
+                            }
+
+                            if (worldTemplatePaginatedListIn.templates.isEmpty()) {
+                                if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
+                                    String s = I18n.get("mco.template.select.none", "%link");
+                                    TextRenderingUtils.LineSegment lineSegment = TextRenderingUtils.LineSegment.link(I18n.get("mco.template.select.none.linkTitle"), "https://aka.ms/MinecraftRealmsContentCreator");
+                                    RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(s, lineSegment);
+                                }
+
+                                return null;
+                            } else {
+                                return worldTemplatePaginatedListIn;
+                            }
                         }
-                    }
-                }).join()) {
-                    either = RealmsSelectWorldTemplateScreen.this.fetchTemplates(worldTemplatePaginatedList, realmsClient);
+                    }).join();
                 }
-
             }
         }).start();
     }
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 410d4199259938ce53af8acdabf890a3c3c5b6e0..f2e26c169c83f1eb61de9d64fb8dfc024ead0d49 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -26,6 +26,7 @@ import java.nio.file.Path;
 import java.nio.file.spi.FileSystemProvider;
 import java.security.AccessController;
 import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 import java.time.Duration;
 import java.time.Instant;
 import java.util.Arrays;
@@ -134,21 +135,21 @@ public class Util {
     }
 
     private static int getMaxThreads() {
-        String s = System.getProperty("max.bg.threads");
+        String s = System.getProperty(MAX_THREADS_SYSTEM_PROPERTY);
         if (s != null) {
             try {
                 int i = Integer.parseInt(s);
-                if (i >= 1 && i <= 255) {
+                if (i >= 1 && i <= DEFAULT_MAX_THREADS) {
                     return i;
                 }
 
-                LOGGER.error("Wrong {} property value '{}'. Should be an integer value between 1 and {}.", new Object[]{"max.bg.threads", s, 255});
+                LOGGER.error("Wrong {} property value '{}'. Should be an integer value between 1 and {}.", new Object[]{"max.bg.threads", s, DEFAULT_MAX_THREADS});
             } catch (NumberFormatException var2) {
-                LOGGER.error("Could not parse {} property value '{}'. Should be an integer value between 1 and {}.", new Object[]{"max.bg.threads", s, 255});
+                LOGGER.error("Could not parse {} property value '{}'. Should be an integer value between 1 and {}.", new Object[]{"max.bg.threads", s, DEFAULT_MAX_THREADS});
             }
         }
 
-        return 255;
+        return DEFAULT_MAX_THREADS;
     }
 
     public static ExecutorService bootstrapExecutor() {
@@ -259,7 +260,7 @@ public class Util {
             String s2 = thread.getName();
             thread.setName(s);
 
-            Object var4;
+            V var4;
             try {
                 var4 = supplier.get();
             } finally {
@@ -344,7 +345,7 @@ public class Util {
     }
 
     public static <K> Strategy<K> identityStrategy() {
-        return Util.IdentityStrategy.INSTANCE;
+        return (Strategy<K>) IdentityStrategy.INSTANCE;
     }
 
     public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<V>> list) {
@@ -696,7 +697,7 @@ public class Util {
 
         public void openUrl(URL url) {
             try {
-                Process process = (Process)AccessController.doPrivileged(() -> Runtime.getRuntime().exec(this.getOpenUrlArguments(url)));
+                Process process = (Process)AccessController.doPrivileged((PrivilegedExceptionAction<?>) () -> Runtime.getRuntime().exec(this.getOpenUrlArguments(url)));
 
                 for(String s : IOUtils.readLines(process.getErrorStream())) {
                     Util.LOGGER.error(s);
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java b/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
index 7d9776c2660ac8a6dff435842669e820d59032e4..258ba17c8d096374b3c8bc8df808ac4d7b1cc94c 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
@@ -209,11 +209,11 @@ public class PlayerPredicate {
             if (!this.stats.isEmpty()) {
                 JsonArray jsonArray = new JsonArray();
                 this.stats.forEach((stat, ints) -> {
-                    JsonObject jsonObject = new JsonObject();
-                    jsonObject.addProperty("type", Registry.STAT_TYPE.getKey(stat.getType()).toString());
-                    jsonObject.addProperty("stat", getStatValueId(stat).toString());
-                    jsonObject.add("value", ints.serializeToJson());
-                    jsonArray.add(jsonObject);
+                    JsonObject jsonObjectIn = new JsonObject();
+                    jsonObjectIn.addProperty("type", Registry.STAT_TYPE.getKey(stat.getType()).toString());
+                    jsonObjectIn.addProperty("stat", getStatValueId(stat).toString());
+                    jsonObjectIn.add("value", ints.serializeToJson());
+                    jsonArray.add(jsonObjectIn);
                 });
                 jsonObject.add("stats", jsonArray);
             }
diff --git a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
index 37260d9654e733198d03183dbc764d955befd279..06f47884e6d29f5671228f180587df1a17d1ca64 100644
--- a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
@@ -137,7 +137,7 @@ public class StatePropertiesPredicate {
         protected <T extends Comparable<T>> boolean match(StateHolder<?, ?> stateHolder, Property<T> property) {
             T comparable = stateHolder.getValue(property);
             Optional<T> optional = property.getValue(this.value);
-            return optional.isPresent() && comparable.compareTo((Comparable)optional.get()) == 0;
+            return optional.isPresent() && comparable.compareTo(optional.get()) == 0;
         }
 
         public JsonElement toJson() {
@@ -190,14 +190,14 @@ public class StatePropertiesPredicate {
             T comparable = stateHolder.getValue(property);
             if (this.minValue != null) {
                 Optional<T> optional = property.getValue(this.minValue);
-                if (!optional.isPresent() || comparable.compareTo((Comparable)optional.get()) < 0) {
+                if (!optional.isPresent() || comparable.compareTo(optional.get()) < 0) {
                     return false;
                 }
             }
 
             if (this.maxValue != null) {
                 Optional<T> optional2 = property.getValue(this.maxValue);
-                if (!optional2.isPresent() || comparable.compareTo((Comparable)optional2.get()) > 0) {
+                if (!optional2.isPresent() || comparable.compareTo(optional2.get()) > 0) {
                     return false;
                 }
             }
diff --git a/src/main/java/net/minecraft/client/ClientTelemetryManager.java b/src/main/java/net/minecraft/client/ClientTelemetryManager.java
index e9bddbf91e24808cb513b46c40aff0371a26ff6a..10fd0422963da8c6d5c4008ac935c8cb9637c24c 100644
--- a/src/main/java/net/minecraft/client/ClientTelemetryManager.java
+++ b/src/main/java/net/minecraft/client/ClientTelemetryManager.java
@@ -107,47 +107,18 @@ public class ClientTelemetryManager {
 
     }
 
-    static record PlayerInfo(GameType a, boolean b) {
-        private final GameType gameType;
-        private final boolean hardcore;
-
-        PlayerInfo(GameType gameType, boolean flag) {
-            this.gameType = gameType;
-            this.hardcore = flag;
-        }
-
+    static record PlayerInfo(GameType gameType, boolean hardcore) {
         public int getGameModeId() {
             if (this.hardcore && this.gameType == GameType.SURVIVAL) {
                 return 99;
             } else {
-                byte var10000;
-                switch(this.gameType) {
-                case SURVIVAL:
-                    var10000 = 0;
-                    break;
-                case CREATIVE:
-                    var10000 = 1;
-                    break;
-                case ADVENTURE:
-                    var10000 = 2;
-                    break;
-                case SPECTATOR:
-                    var10000 = 6;
-                    break;
-                default:
-                    throw new IncompatibleClassChangeError();
-                }
-
-                return var10000;
+                return switch (this.gameType) {
+                    case SURVIVAL -> 0;
+                    case CREATIVE -> 1;
+                    case ADVENTURE -> 2;
+                    case SPECTATOR -> 6;
+                };
             }
         }
-
-        public GameType gameType() {
-            return this.gameType;
-        }
-
-        public boolean hardcore() {
-            return this.hardcore;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/CycleOption.java b/src/main/java/net/minecraft/client/CycleOption.java
index 762a8b578ac3805a6d251e81b46acc4c3aee24ad..d0a5166e52c93543b8eeecb5018290584c434589 100644
--- a/src/main/java/net/minecraft/client/CycleOption.java
+++ b/src/main/java/net/minecraft/client/CycleOption.java
@@ -61,7 +61,7 @@ public class CycleOption<T> extends Option {
 
     public AbstractWidget createButton(Options options, int i, int i2, int i3) {
         CycleButton.TooltipSupplier<T> tooltipSupplier = (CycleButton.TooltipSupplier)this.tooltip.apply(Minecraft.getInstance());
-        return ((CycleButton.Builder)this.buttonSetup.get()).withTooltip(tooltipSupplier).withInitialValue((T)this.getter.apply(options)).create(i, i2, i3, 20, this.getCaption(), (cycleButton, object) -> {
+        return this.buttonSetup.get().withTooltip(tooltipSupplier).withInitialValue((T)this.getter.apply(options)).create(i, i2, i3, 20, this.getCaption(), (cycleButton, object) -> {
             this.setter.accept(options, this, object);
             options.save();
         });
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index df97e8be70ff0b14dd7946d84fb22bb6a55d6d52..f3d3c06a0db9151641a352e6d6c97d3a26edff30 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -517,7 +517,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
                 this.options.fullscreen = this.window.isFullscreen();
             }
         } else {
-            StringBuilder stringBuilder = new StringBuilder("Recovering from unsupported resolution (" + this.window.getWidth() + "x" + this.window.getHeight() + ").\nPlease make sure you have up-to-date drivers (see aka.ms/mcdriver for instructions).");
+            StringBuilder stringBuilder = new StringBuilder("Recovering from unsupported resolution (" + this.window.getWidth() + "x" + this.window.getHeight() + ").\n" + UPDATE_DRIVERS_ADVICE);
             if (GlDebug.isDebugEnabled()) {
                 stringBuilder.append("\n\nReported GL debug messages:\n").append(String.join("\n", GlDebug.getLastOpenGlDebugMessages()));
             }
@@ -971,7 +971,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
             this.profiler.pop();
             this.profiler.push("tick");
 
-            for(int i2 = 0; i2 < Math.min(10, i); ++i2) {
+            for(int i2 = 0; i2 < Math.min(MAX_TICKS_PER_UPDATE, i); ++i2) {
                 this.profiler.incrementCounter("clientTick");
                 this.tick();
             }
@@ -2232,13 +2232,13 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
             systemReport.setDetail("Resource Packs", (Supplier<String>)(() -> {
                 StringBuilder stringBuilder = new StringBuilder();
 
-                for(String s : options.resourcePacks) {
+                for(String resourcePack : options.resourcePacks) {
                     if (stringBuilder.length() > 0) {
                         stringBuilder.append(", ");
                     }
 
-                    stringBuilder.append(s);
-                    if (options.incompatibleResourcePacks.contains(s)) {
+                    stringBuilder.append(resourcePack);
+                    if (options.incompatibleResourcePacks.contains(resourcePack)) {
                         stringBuilder.append(" (incompatible)");
                     }
                 }
@@ -2260,7 +2260,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
     }
 
     public CompletableFuture<Void> delayTextureReload() {
-        return this.submit(this::reloadResourcePacks).thenCompose((completableFuture) -> completableFuture);
+        return this.submit((Supplier<CompletableFuture<Void>>) this::reloadResourcePacks).thenCompose((completableFuture) -> completableFuture);
     }
 
     public void setCurrentServer(@Nullable ServerData serverData) {
diff --git a/src/main/java/net/minecraft/client/Option.java b/src/main/java/net/minecraft/client/Option.java
index eac1085032dfd9318d7ff470f0cf35f39f1d11e6..a6dbc8b187405d7884d65d66567dec77cdd87266 100644
--- a/src/main/java/net/minecraft/client/Option.java
+++ b/src/main/java/net/minecraft/client/Option.java
@@ -167,24 +167,12 @@ public abstract class Option {
     private static final Component PRIORITIZE_CHUNK_TOOLTIP_NONE = new TranslatableComponent("options.prioritizeChunkUpdates.none.tooltip");
     private static final Component PRIORITIZE_CHUNK_TOOLTIP_PLAYER_AFFECTED = new TranslatableComponent("options.prioritizeChunkUpdates.byPlayer.tooltip");
     private static final Component PRIORITIZE_CHUNK_TOOLTIP_NEARBY = new TranslatableComponent("options.prioritizeChunkUpdates.nearby.tooltip");
-    public static final CycleOption<PrioritizeChunkUpdates> PRIORITIZE_CHUNK_UPDATES = CycleOption.create("options.prioritizeChunkUpdates", PrioritizeChunkUpdates.values(), (prioritizeChunkUpdates) -> new TranslatableComponent(prioritizeChunkUpdates.getKey()), (options) -> options.prioritizeChunkUpdates, (options, option, prioritizeChunkUpdates) -> options.prioritizeChunkUpdates = prioritizeChunkUpdates).setTooltip((minecraft) -> (prioritizeChunkUpdates) -> {
-            Object var10000;
-            switch(prioritizeChunkUpdates) {
-            case NONE:
-                var10000 = minecraft.font.split(PRIORITIZE_CHUNK_TOOLTIP_NONE, 200);
-                break;
-            case PLAYER_AFFECTED:
-                var10000 = minecraft.font.split(PRIORITIZE_CHUNK_TOOLTIP_PLAYER_AFFECTED, 200);
-                break;
-            case NEARBY:
-                var10000 = minecraft.font.split(PRIORITIZE_CHUNK_TOOLTIP_NEARBY, 200);
-                break;
-            default:
-                var10000 = ImmutableList.of();
-            }
-
-            return var10000;
-        });
+    public static final CycleOption<PrioritizeChunkUpdates> PRIORITIZE_CHUNK_UPDATES = CycleOption.create("options.prioritizeChunkUpdates", PrioritizeChunkUpdates.values(), (prioritizeChunkUpdates) -> new TranslatableComponent(prioritizeChunkUpdates.getKey()), (options) -> options.prioritizeChunkUpdates, (options, option, prioritizeChunkUpdates) -> options.prioritizeChunkUpdates = prioritizeChunkUpdates).setTooltip((minecraft) -> (prioritizeChunkUpdates) -> switch (prioritizeChunkUpdates) {
+        case NONE -> minecraft.font.split(PRIORITIZE_CHUNK_TOOLTIP_NONE, 200);
+        case PLAYER_AFFECTED -> minecraft.font.split(PRIORITIZE_CHUNK_TOOLTIP_PLAYER_AFFECTED, 200);
+        case NEARBY -> minecraft.font.split(PRIORITIZE_CHUNK_TOOLTIP_NEARBY, 200);
+        default -> ImmutableList.of();
+    });
     public static final CycleOption<AttackIndicatorStatus> ATTACK_INDICATOR = CycleOption.create("options.attackIndicator", AttackIndicatorStatus.values(), (attackIndicatorStatus) -> new TranslatableComponent(attackIndicatorStatus.getKey()), (options) -> options.attackIndicator, (options, option, attackIndicatorStatus) -> options.attackIndicator = attackIndicatorStatus);
     public static final CycleOption<ChatVisiblity> CHAT_VISIBILITY = CycleOption.create("options.chat.visibility", ChatVisiblity.values(), (chatVisiblity) -> new TranslatableComponent(chatVisiblity.getKey()), (options) -> options.chatVisibility, (options, option, chatVisiblity) -> options.chatVisibility = chatVisiblity);
     private static final Component GRAPHICS_TOOLTIP_FAST = new TranslatableComponent("options.graphics.fast.tooltip");
diff --git a/src/main/java/net/minecraft/client/Options.java b/src/main/java/net/minecraft/client/Options.java
index 0a7045fa802f65b9ee28b7fc51b0aa0feb783e30..77b71788ce7c006d58bb52efb86aa25c13859e83 100644
--- a/src/main/java/net/minecraft/client/Options.java
+++ b/src/main/java/net/minecraft/client/Options.java
@@ -300,7 +300,7 @@ public class Options {
         }
 
         for(SoundSource soundSource : SoundSource.values()) {
-            this.sourceVolumes.computeFloat(soundSource, (soundSource, f) -> fieldAccess.process("soundCategory_" + soundSource.getName(), f != null ? f : 1.0F));
+            this.sourceVolumes.computeFloat(soundSource, (soundSourceIn, f) -> fieldAccess.process("soundCategory_" + soundSourceIn.getName(), f != null ? f : 1.0F));
         }
 
         for(PlayerModelPart playerModelPart : PlayerModelPart.values()) {
@@ -689,7 +689,7 @@ public class Options {
     }
 
     public String dumpOptionsForReport() {
-        ImmutableList<Pair<String, String>> immutableList = ImmutableList.builder().add(Pair.of("ao", String.valueOf(this.ambientOcclusion))).add(Pair.of("biomeBlendRadius", String.valueOf(this.biomeBlendRadius))).add(Pair.of("enableVsync", String.valueOf(this.enableVsync))).add(Pair.of("entityDistanceScaling", String.valueOf(this.entityDistanceScaling))).add(Pair.of("entityShadows", String.valueOf(this.entityShadows))).add(Pair.of("forceUnicodeFont", String.valueOf(this.forceUnicodeFont))).add(Pair.of("fov", String.valueOf(this.fov))).add(Pair.of("fovEffectScale", String.valueOf(this.fovEffectScale))).add(Pair.of("prioritizeChunkUpdates", String.valueOf(this.prioritizeChunkUpdates))).add(Pair.of("fullscreen", String.valueOf(this.fullscreen))).add(Pair.of("fullscreenResolution", String.valueOf(this.fullscreenVideoModeString))).add(Pair.of("gamma", String.valueOf(this.gamma))).add(Pair.of("glDebugVerbosity", String.valueOf(this.glDebugVerbosity))).add(Pair.of("graphicsMode", String.valueOf(this.graphicsMode))).add(Pair.of("guiScale", String.valueOf(this.guiScale))).add(Pair.of("maxFps", String.valueOf(this.framerateLimit))).add(Pair.of("mipmapLevels", String.valueOf(this.mipmapLevels))).add(Pair.of("narrator", String.valueOf(this.narratorStatus))).add(Pair.of("overrideHeight", String.valueOf(this.overrideHeight))).add(Pair.of("overrideWidth", String.valueOf(this.overrideWidth))).add(Pair.of("particles", String.valueOf(this.particles))).add(Pair.of("reducedDebugInfo", String.valueOf(this.reducedDebugInfo))).add(Pair.of("renderClouds", String.valueOf(this.renderClouds))).add(Pair.of("renderDistance", String.valueOf(this.renderDistance))).add(Pair.of("simulationDistance", String.valueOf(this.simulationDistance))).add(Pair.of("resourcePacks", String.valueOf(this.resourcePacks))).add(Pair.of("screenEffectScale", String.valueOf(this.screenEffectScale))).add(Pair.of("syncChunkWrites", String.valueOf(this.syncWrites))).add(Pair.of("useNativeTransport", String.valueOf(this.useNativeTransport))).add(Pair.of("soundDevice", String.valueOf(this.soundDevice))).build();
+        ImmutableList<Pair<String, String>> immutableList = ImmutableList.<Pair<String, String>>builder().add(Pair.of("ao", String.valueOf(this.ambientOcclusion))).add(Pair.of("biomeBlendRadius", String.valueOf(this.biomeBlendRadius))).add(Pair.of("enableVsync", String.valueOf(this.enableVsync))).add(Pair.of("entityDistanceScaling", String.valueOf(this.entityDistanceScaling))).add(Pair.of("entityShadows", String.valueOf(this.entityShadows))).add(Pair.of("forceUnicodeFont", String.valueOf(this.forceUnicodeFont))).add(Pair.of("fov", String.valueOf(this.fov))).add(Pair.of("fovEffectScale", String.valueOf(this.fovEffectScale))).add(Pair.of("prioritizeChunkUpdates", String.valueOf(this.prioritizeChunkUpdates))).add(Pair.of("fullscreen", String.valueOf(this.fullscreen))).add(Pair.of("fullscreenResolution", String.valueOf(this.fullscreenVideoModeString))).add(Pair.of("gamma", String.valueOf(this.gamma))).add(Pair.of("glDebugVerbosity", String.valueOf(this.glDebugVerbosity))).add(Pair.of("graphicsMode", String.valueOf(this.graphicsMode))).add(Pair.of("guiScale", String.valueOf(this.guiScale))).add(Pair.of("maxFps", String.valueOf(this.framerateLimit))).add(Pair.of("mipmapLevels", String.valueOf(this.mipmapLevels))).add(Pair.of("narrator", String.valueOf(this.narratorStatus))).add(Pair.of("overrideHeight", String.valueOf(this.overrideHeight))).add(Pair.of("overrideWidth", String.valueOf(this.overrideWidth))).add(Pair.of("particles", String.valueOf(this.particles))).add(Pair.of("reducedDebugInfo", String.valueOf(this.reducedDebugInfo))).add(Pair.of("renderClouds", String.valueOf(this.renderClouds))).add(Pair.of("renderDistance", String.valueOf(this.renderDistance))).add(Pair.of("simulationDistance", String.valueOf(this.simulationDistance))).add(Pair.of("resourcePacks", String.valueOf(this.resourcePacks))).add(Pair.of("screenEffectScale", String.valueOf(this.screenEffectScale))).add(Pair.of("syncChunkWrites", String.valueOf(this.syncWrites))).add(Pair.of("useNativeTransport", String.valueOf(this.useNativeTransport))).add(Pair.of("soundDevice", String.valueOf(this.soundDevice))).build();
         return (String)immutableList.stream().map((pair) -> (String)pair.getFirst() + ": " + (String)pair.getSecond()).collect(Collectors.joining(System.lineSeparator()));
     }
 
diff --git a/src/main/java/net/minecraft/client/PeriodicNotificationManager.java b/src/main/java/net/minecraft/client/PeriodicNotificationManager.java
index 7d77a35de1466fa8efe9328afce55b8125ea9174..a282f9371ba3e1dbfcaf964006c3c6b4ef6b9845 100644
--- a/src/main/java/net/minecraft/client/PeriodicNotificationManager.java
+++ b/src/main/java/net/minecraft/client/PeriodicNotificationManager.java
@@ -31,7 +31,7 @@ import net.minecraft.util.profiling.ProfilerFiller;
 import org.slf4j.Logger;
 
 public class PeriodicNotificationManager extends SimplePreparableReloadListener<Map<String, List<PeriodicNotificationManager.Notification>>> implements AutoCloseable {
-    private static final Codec<Map<String, List<PeriodicNotificationManager.Notification>>> CODEC = Codec.unboundedMap(Codec.STRING, RecordCodecBuilder.create((instance) -> instance.group(Codec.LONG.optionalFieldOf("delay", 0L).forGetter(PeriodicNotificationManager.Notification::delay), Codec.LONG.fieldOf("period").forGetter(PeriodicNotificationManager.Notification::period), Codec.STRING.fieldOf("title").forGetter(PeriodicNotificationManager.Notification::title), Codec.STRING.fieldOf("message").forGetter(PeriodicNotificationManager.Notification::message)).apply(instance, PeriodicNotificationManager.Notification::new)).listOf());
+    private static final Codec<Map<String, List<PeriodicNotificationManager.Notification>>> CODEC = Codec.unboundedMap(Codec.STRING, RecordCodecBuilder.<PeriodicNotificationManager.Notification>create((instance) -> instance.group(Codec.LONG.optionalFieldOf("delay", 0L).forGetter(PeriodicNotificationManager.Notification::delay), Codec.LONG.fieldOf("period").forGetter(PeriodicNotificationManager.Notification::period), Codec.STRING.fieldOf("title").forGetter(PeriodicNotificationManager.Notification::title), Codec.STRING.fieldOf("message").forGetter(PeriodicNotificationManager.Notification::message)).apply(instance, PeriodicNotificationManager.Notification::new)).listOf());
     private static final Logger LOGGER = LogUtils.getLogger();
     private final ResourceLocation notifications;
     private final Object2BooleanFunction<String> selector;
@@ -135,33 +135,12 @@ public class PeriodicNotificationManager extends SimplePreparableReloadListener<
         return list.stream().mapToLong((notification) -> notification.delay).min().orElse(0L);
     }
 
-    public static record Notification(long a, long b, String c, String d) {
-        final long delay;
-        final long period;
-        final String title;
-        final String message;
-
-        public Notification(long l, long l2, String s, String s2) {
-            this.delay = l != 0L ? l : l2;
-            this.period = l2;
-            this.title = s;
-            this.message = s2;
-        }
-
-        public long delay() {
-            return this.delay;
-        }
-
-        public long period() {
-            return this.period;
-        }
-
-        public String title() {
-            return this.title;
-        }
-
-        public String message() {
-            return this.message;
+    public static record Notification(long delay, long period, String title, String message) {
+        public Notification(long delay, long period, String title, String message) {
+            this.delay = delay != 0L ? delay : period;
+            this.period = period;
+            this.title = title;
+            this.message = message;
         }
     }
 
diff --git a/src/main/java/net/minecraft/client/gui/Font.java b/src/main/java/net/minecraft/client/gui/Font.java
index e6286e22864e1fa019a7ea9eaee238a96aa8e9fd..acd74e224159ef69b6190f59b93c07bffeb2c7fa 100644
--- a/src/main/java/net/minecraft/client/gui/Font.java
+++ b/src/main/java/net/minecraft/client/gui/Font.java
@@ -131,14 +131,14 @@ public class Font {
                     float[] floats = new float[]{f};
                     int i7 = i5;
                     int i8 = i6;
-                    formattedCharSequence.accept((i4x, style, i5) -> {
+                    formattedCharSequence.accept((i4x, style, i5x) -> {
                         boolean flag = style.isBold();
                         FontSet fontSet = this.getFontSet(style.getFont());
-                        GlyphInfo glyphInfo = fontSet.getGlyphInfo(i5);
+                        GlyphInfo glyphInfo = fontSet.getGlyphInfo(i5x);
                         stringRenderOutput.x = floats[0] + (float)i7 * glyphInfo.getShadowOffset();
                         stringRenderOutput.y = f2 + (float)i8 * glyphInfo.getShadowOffset();
                         floats[0] += glyphInfo.getAdvance(flag);
-                        return stringRenderOutput.accept(i4x, style.withColor(i4), i5);
+                        return stringRenderOutput.accept(i4x, style.withColor(i4), i5x);
                     });
                 }
             }
diff --git a/src/main/java/net/minecraft/client/gui/Gui.java b/src/main/java/net/minecraft/client/gui/Gui.java
index ae93c432c9f15df2280a8f0cfe1e5f2428a22cf3..4480fa51be99b24231be0e48a843d81d6c11df5f 100644
--- a/src/main/java/net/minecraft/client/gui/Gui.java
+++ b/src/main/java/net/minecraft/client/gui/Gui.java
@@ -453,7 +453,7 @@ public class Gui extends GuiComponent {
 
             RenderSystem.enableBlend();
             int i = 0;
-            int i2 = 0;
+            int i2In = 0;
             MobEffectTextureManager mobEffectTextureManager = this.minecraft.getMobEffectTextures();
             List<Runnable> list = Lists.newArrayListWithExpectedSize(collection.size());
             RenderSystem.setShaderTexture(0, AbstractContainerScreen.INVENTORY_LOCATION);
@@ -471,8 +471,8 @@ public class Gui extends GuiComponent {
                         ++i;
                         i3 -= 25 * i;
                     } else {
-                        ++i2;
-                        i3 -= 25 * i2;
+                        ++i2In;
+                        i3 -= 25 * i2In;
                         i4 += 26;
                     }
 
diff --git a/src/main/java/net/minecraft/client/gui/components/CycleButton.java b/src/main/java/net/minecraft/client/gui/components/CycleButton.java
index b1affb61c23aea93466c45b1ea21b7afb84a7420..2661c93e79a3775d410a2307ca64d30db8fbffdb 100644
--- a/src/main/java/net/minecraft/client/gui/components/CycleButton.java
+++ b/src/main/java/net/minecraft/client/gui/components/CycleButton.java
@@ -132,15 +132,15 @@ public class CycleButton<T> extends AbstractButton implements TooltipAccessor {
     }
 
     public static CycleButton.Builder<Boolean> booleanBuilder(Component component, Component component2) {
-        return (new CycleButton.Builder((flag) -> flag ? component : component2)).withValues(BOOLEAN_OPTIONS);
+        return (new CycleButton.Builder<Boolean>((flag) -> flag ? component : component2)).withValues(BOOLEAN_OPTIONS);
     }
 
     public static CycleButton.Builder<Boolean> onOffBuilder() {
-        return (new CycleButton.Builder((flag) -> flag ? CommonComponents.OPTION_ON : CommonComponents.OPTION_OFF)).withValues(BOOLEAN_OPTIONS);
+        return (new CycleButton.Builder<Boolean>((flag) -> flag ? CommonComponents.OPTION_ON : CommonComponents.OPTION_OFF)).withValues(BOOLEAN_OPTIONS);
     }
 
     public static CycleButton.Builder<Boolean> onOffBuilder(boolean flag) {
-        return onOffBuilder().withInitialValue((T)flag);
+        return onOffBuilder().withInitialValue(flag);
     }
 
     public static class Builder<T> {
diff --git a/src/main/java/net/minecraft/client/gui/font/FontManager.java b/src/main/java/net/minecraft/client/gui/font/FontManager.java
index 0c1ebab666e43fe6df96809c7a731b5aada7a92a..8cfb498c96d5f2067a4eb3e1939f3217657d3558 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontManager.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontManager.java
@@ -129,7 +129,7 @@ public class FontManager implements AutoCloseable {
                     intSet.addAll(glyphProvider2.getSupportedGlyphs());
                 }
 
-                intSet.forEach((ix) -> {
+                intSet.forEach((java.util.function.IntConsumer) (ix) -> {
                     if (ix != 32) {
                         for(GlyphProvider glyphProvider : Lists.reverse(list)) {
                             if (glyphProvider.getGlyph(ix) != null) {
diff --git a/src/main/java/net/minecraft/client/gui/font/FontSet.java b/src/main/java/net/minecraft/client/gui/font/FontSet.java
index 16595aeffc788248ecbfdcc6e9e5303b4c1f673a..d109e93cac9161fa78d33f0164511158f2e4d03c 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontSet.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontSet.java
@@ -59,7 +59,7 @@ public class FontSet implements AutoCloseable {
         }
 
         Set<GlyphProvider> set = Sets.newHashSet();
-        intSet.forEach((i) -> {
+        intSet.forEach((java.util.function.IntConsumer) (i) -> {
             for(GlyphProvider glyphProvider : list) {
                 GlyphInfo glyphInfo = this.getGlyphInfoForSpace(i);
                 if (glyphInfo == null) {
diff --git a/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java b/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
index d1b34189eb5f13c1f3886acd5ead146244bde0dd..1cc84417f43fcb3584388587298958db00a5c158 100644
--- a/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
+++ b/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
@@ -9,7 +9,7 @@ import net.minecraft.util.Unit;
 public class NarrationThunk<T> {
     private final T contents;
     private final BiConsumer<Consumer<String>, T> converter;
-    public static final NarrationThunk<?> EMPTY = new NarrationThunk((T)Unit.INSTANCE, (consumer, unit) -> {
+    public static final NarrationThunk<?> EMPTY = new NarrationThunk(Unit.INSTANCE, (consumer, unit) -> {
     });
 
     private NarrationThunk(T object, BiConsumer<Consumer<String>, T> biConsumer) {
@@ -18,7 +18,7 @@ public class NarrationThunk<T> {
     }
 
     public static NarrationThunk<?> from(String s) {
-        return new NarrationThunk((T)s, Consumer::accept);
+        return new NarrationThunk<>(s, Consumer::accept);
     }
 
     public static NarrationThunk<?> from(Component component) {
@@ -26,7 +26,7 @@ public class NarrationThunk<T> {
     }
 
     public static NarrationThunk<?> from(List<Component> list) {
-        return new NarrationThunk((T)list, (consumer, list2) -> list.stream().map(Component::getString).forEach(consumer));
+        return new NarrationThunk<>(list, (consumer, list2) -> list.stream().map(Component::getString).forEach(consumer));
     }
 
     public void getText(Consumer<String> consumer) {
diff --git a/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java b/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
index 1f88364b9929dc12f05535dd2297844a0f6efc0f..16189cf8f3ea7941c7aab3ee3eade99f03ce01e0 100644
--- a/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
+++ b/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
@@ -7,7 +7,7 @@ import java.util.function.Consumer;
 
 public class ScreenNarrationCollector {
     int generation;
-    final Map<ScreenNarrationCollector.EntryKey, ScreenNarrationCollector.NarrationEntry> entries = Maps.newTreeMap(Comparator.comparing((entryKey) -> entryKey.type).thenComparing((entryKey) -> entryKey.depth));
+    final Map<ScreenNarrationCollector.EntryKey, ScreenNarrationCollector.NarrationEntry> entries = Maps.newTreeMap(Comparator.<EntryKey, NarratedElementType>comparing((entryKey) -> entryKey.type).thenComparing((entryKey) -> entryKey.depth));
 
     public void update(Consumer<NarrationElementOutput> consumer) {
         ++this.generation;
diff --git a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
index 47ac3fa1ac866085d027bdfe09ed2503645b5206..6b72e301a30fe9ae71f9b2fd468edb7fa587c8c4 100644
--- a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
@@ -396,33 +396,6 @@ public class TitleScreen extends Screen {
         this.minecraft.setScreen(this);
     }
 
-    static record Warning32Bit(MultiLineLabel a, int b, int c, CompletableFuture<Boolean> d) {
-        final MultiLineLabel label;
-        final int x;
-        final int y;
-        final CompletableFuture<Boolean> realmsSubscriptionFuture;
-
-        Warning32Bit(MultiLineLabel multiLineLabel, int i, int i2, CompletableFuture<Boolean> completableFuture) {
-            this.label = multiLineLabel;
-            this.x = i;
-            this.y = i2;
-            this.realmsSubscriptionFuture = completableFuture;
-        }
-
-        public MultiLineLabel label() {
-            return this.label;
-        }
-
-        public int x() {
-            return this.x;
-        }
-
-        public int y() {
-            return this.y;
-        }
-
-        public CompletableFuture<Boolean> realmsSubscriptionFuture() {
-            return this.realmsSubscriptionFuture;
-        }
+    static record Warning32Bit(MultiLineLabel label, int x, int y, CompletableFuture<Boolean> realmsSubscriptionFuture) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
index 3123c52020760508b95b505dd8f2411b2e0af812..5ff27d50841176c1b0a3b71e58c520b19a79ec64 100644
--- a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
@@ -431,11 +431,11 @@ public class StatsScreen extends Screen implements StatsUpdateListener {
                     i = 0;
                     i2 = 0;
                 } else if (ItemStatisticsList.this.blockColumns.contains(ItemStatisticsList.this.sortColumn)) {
-                    StatType<Block> statType = ItemStatisticsList.this.sortColumn;
+                    StatType<Block> statType = (StatType<Block>) ItemStatisticsList.this.sortColumn;
                     i = item instanceof BlockItem ? StatsScreen.this.stats.getValue(statType, ((BlockItem)item).getBlock()) : -1;
                     i2 = item2 instanceof BlockItem ? StatsScreen.this.stats.getValue(statType, ((BlockItem)item2).getBlock()) : -1;
                 } else {
-                    StatType<Item> statType2 = ItemStatisticsList.this.sortColumn;
+                    StatType<Item> statType2 = (StatType<Item>) ItemStatisticsList.this.sortColumn;
                     i = StatsScreen.this.stats.getValue(statType2, item);
                     i2 = StatsScreen.this.stats.getValue(statType2, item2);
                 }
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
index cd316ffe0e676fceb3d2b3d069c0bc5a0d001046..e54ab1d0db391cade918d79fb2ea86cade3a2907 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
@@ -31,7 +31,7 @@ public class CommandBlockEditScreen extends AbstractCommandBlockEditScreen {
 
     protected void init() {
         super.init();
-        this.modeButton = this.addRenderableWidget(CycleButton.builder((mode) -> {
+        this.modeButton = this.addRenderableWidget(CycleButton.<CommandBlockEntity.Mode>builder((mode) -> {
             switch(mode) {
             case SEQUENCE:
                 return new TranslatableComponent("advMode.mode.sequence");
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
index c606c85eba4510e757b35f98fa2ef46ee1178518..606aa7524bcec38055a93d88c764cbcf5f86f7aa 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
@@ -125,7 +125,7 @@ public class StructureBlockEditScreen extends Screen {
             }
 
         }));
-        this.addRenderableWidget(CycleButton.builder((structureMode) -> new TranslatableComponent("structure_block.mode." + structureMode.getSerializedName())).withValues(DEFAULT_MODES, ALL_MODES).displayOnlyValue().withInitialValue(this.initialMode).create(this.width / 2 - 4 - 150, 185, 50, 20, new TextComponent("MODE"), (cycleButton, structureMode) -> {
+        this.addRenderableWidget(CycleButton.<StructureMode>builder((structureMode) -> new TranslatableComponent("structure_block.mode." + structureMode.getSerializedName())).withValues(DEFAULT_MODES, ALL_MODES).displayOnlyValue().withInitialValue(this.initialMode).create(this.width / 2 - 4 - 150, 185, 50, 20, new TextComponent("MODE"), (cycleButton, structureMode) -> {
             this.structure.setMode(structureMode);
             this.updateMode(structureMode);
         }));
diff --git a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
index aafc9a3b88942bb938fc072cd80f87dfc6a1db6a..2735003432aa53cd0da5086c052d5d6691bab54b 100644
--- a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
@@ -219,8 +219,8 @@ public class PackSelectionScreen extends Screen {
                     label86: {
                         try {
                             if (inputStream != null) {
-                                String s = pack.getId();
-                                ResourceLocation resourceLocation = new ResourceLocation("minecraft", "pack/" + Util.sanitizeName(s, ResourceLocation::validPathChar) + "/" + Hashing.sha1().hashUnencodedChars(s) + "/icon");
+                                String packId = pack.getId();
+                                ResourceLocation resourceLocation = new ResourceLocation("minecraft", "pack/" + Util.sanitizeName(packId, ResourceLocation::validPathChar) + "/" + Hashing.sha1().hashUnencodedChars(packId) + "/icon");
                                 NativeImage nativeImage = NativeImage.read(inputStream);
                                 textureManager.register(resourceLocation, new DynamicTexture(nativeImage));
                                 var8 = resourceLocation;
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
index ca140af94b344fad60cd9d9c72ee2e6359947ad7..ef253c9e47a9d3f6e8476f5e41b9d66f1fec72f7 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
@@ -234,7 +234,7 @@ public class EditGameRulesScreen extends Screen {
                     List<FormattedCharSequence> list;
                     String s3;
                     if (I18n.exists(s2)) {
-                        Builder<FormattedCharSequence> builder = ImmutableList.builder().add(component2.getVisualOrderText());
+                        Builder<FormattedCharSequence> builder = ImmutableList.<FormattedCharSequence>builder().add(component2.getVisualOrderText());
                         Component component4 = new TranslatableComponent(s2);
                         EditGameRulesScreen.this.font.split(component4, 150).forEach(builder::add);
                         list = builder.add(component3.getVisualOrderText()).build();
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
index c1076019405069e7463251ad6d6eaf9c9dee831b..afeed0459a66814d3c39bab83ecb8bf95a9b0f0d 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
@@ -272,10 +272,10 @@ public class WorldSelectionList extends ObjectSelectionList<WorldSelectionList.W
                     Component component = new TranslatableComponent(s2, this.summary.getWorldVersionName(), SharedConstants.getCurrentVersion().getName());
                     this.minecraft.setScreen(new BackupConfirmScreen(this.screen, (flag, flag2) -> {
                         if (flag) {
-                            String s = this.summary.getLevelId();
+                            String levelId = this.summary.getLevelId();
 
                             try {
-                                LevelStorageSource.LevelStorageAccess levelStorageAccess = this.minecraft.getLevelSource().createAccess(s);
+                                LevelStorageSource.LevelStorageAccess levelStorageAccess = this.minecraft.getLevelSource().createAccess(levelId);
 
                                 try {
                                     EditWorldScreen.makeBackupAndShowToast(levelStorageAccess);
@@ -295,8 +295,8 @@ public class WorldSelectionList extends ObjectSelectionList<WorldSelectionList.W
                                     levelStorageAccess.close();
                                 }
                             } catch (IOException var9) {
-                                SystemToast.onWorldAccessFailure(this.minecraft, s);
-                                WorldSelectionList.LOGGER.error("Failed to backup level {}", s, var9);
+                                SystemToast.onWorldAccessFailure(this.minecraft, levelId);
+                                WorldSelectionList.LOGGER.error("Failed to backup level {}", levelId, var9);
                             }
                         }
 
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index dc03c3fb98ce21faee13b2124b26b00e1708a55a..24687b88e5b969c139dfe234aa1427f58d23855e 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -510,7 +510,7 @@ public class ClientPacketListener implements ClientGamePacketListener {
 
     public void handleRemoveEntities(ClientboundRemoveEntitiesPacket clientboundRemoveEntitiesPacket) {
         PacketUtils.ensureRunningOnSameThread(clientboundRemoveEntitiesPacket, this, this.minecraft);
-        clientboundRemoveEntitiesPacket.getEntityIds().forEach((i) -> this.level.removeEntity(i, Entity.RemovalReason.DISCARDED));
+        clientboundRemoveEntitiesPacket.getEntityIds().forEach((java.util.function.IntConsumer) (i) -> this.level.removeEntity(i, Entity.RemovalReason.DISCARDED));
     }
 
     public void handleMovePlayer(ClientboundPlayerPositionPacket clientboundPlayerPositionPacket) {
@@ -1255,7 +1255,7 @@ public class ClientPacketListener implements ClientGamePacketListener {
         if (!networkPayload.isEmpty()) {
             Registry<T> registry = (Registry)this.registryAccess.registry(resourceKey).orElseThrow(() -> new IllegalStateException("Unknown registry " + resourceKey));
             Map<TagKey<T>, List<Holder<T>>> map = new HashMap();
-            TagNetworkSerialization.deserializeTagsFromNetwork(resourceKey, registry, networkPayload, map::put);
+            TagNetworkSerialization.deserializeTagsFromNetwork((ResourceKey<? extends Registry<T>>) resourceKey, registry, networkPayload, map::put);
             registry.bindTags(map);
         }
     }
@@ -1482,10 +1482,10 @@ public class ClientPacketListener implements ClientGamePacketListener {
                 } else {
                     this.minecraft.execute(() -> this.minecraft.setScreen(new ConfirmScreen((flag2) -> {
                             this.minecraft.setScreen((Screen)null);
-                            ServerData serverData = this.minecraft.getCurrentServer();
+                            ServerData serverDataIn = this.minecraft.getCurrentServer();
                             if (flag2) {
-                                if (serverData != null) {
-                                    serverData.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
+                                if (serverDataIn != null) {
+                                    serverDataIn.setResourcePackStatus(ServerData.ServerPackStatus.ENABLED);
                                 }
 
                                 this.send(ServerboundResourcePackPacket.Action.ACCEPTED);
@@ -1494,13 +1494,13 @@ public class ClientPacketListener implements ClientGamePacketListener {
                                 this.send(ServerboundResourcePackPacket.Action.DECLINED);
                                 if (flag) {
                                     this.connection.disconnect(new TranslatableComponent("multiplayer.requiredTexturePrompt.disconnect"));
-                                } else if (serverData != null) {
-                                    serverData.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
+                                } else if (serverDataIn != null) {
+                                    serverDataIn.setResourcePackStatus(ServerData.ServerPackStatus.DISABLED);
                                 }
                             }
 
-                            if (serverData != null) {
-                                ServerList.saveSingleServer(serverData);
+                            if (serverDataIn != null) {
+                                ServerList.saveSingleServer(serverDataIn);
                             }
 
                         }, flag ? new TranslatableComponent("multiplayer.requiredTexturePrompt.line1") : new TranslatableComponent("multiplayer.texturePrompt.line1"), preparePackPrompt((Component)(flag ? (new TranslatableComponent("multiplayer.requiredTexturePrompt.line2")).withStyle(new ChatFormatting[]{ChatFormatting.YELLOW, ChatFormatting.BOLD}) : new TranslatableComponent("multiplayer.texturePrompt.line2")), clientboundResourcePackPacket.getPrompt()), flag ? CommonComponents.GUI_PROCEED : CommonComponents.GUI_YES, (Component)(flag ? new TranslatableComponent("menu.disconnect") : CommonComponents.GUI_NO))));
diff --git a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
index 0c453fe5a7b46d307673f5852e3695059e8a5414..35c862ea64f1a918f0ae211003f233ed130259e7 100644
--- a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
@@ -92,7 +92,7 @@ public class BlockEntityWithoutLevelRenderer implements ResourceManagerReloadLis
                     } else if (compoundTag.contains("SkullOwner", 8) && !StringUtils.isBlank(compoundTag.getString("SkullOwner"))) {
                         gameProfile = new GameProfile((UUID)null, compoundTag.getString("SkullOwner"));
                         compoundTag.remove("SkullOwner");
-                        SkullBlockEntity.updateGameprofile(gameProfile, (gameProfile) -> compoundTag.put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), gameProfile)));
+                        SkullBlockEntity.updateGameprofile(gameProfile, (gameProfileIn) -> compoundTag.put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), gameProfileIn)));
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
index 4a2815b8b64321f2234b62530b35df4595308655..1c61ba7c9b844a6cec499c52a2e53001625a0a5f 100644
--- a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
@@ -931,7 +931,7 @@ public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseab
                         ChunkRenderDispatcher.CompiledChunk compiledChunk = renderChunk.getCompiledChunk();
                         boolean flag3 = false;
 
-                        for(int i2 = 0; i2 < DIRECTIONS.length; ++i2) {
+                        for (int i2 = 0; i2 < DIRECTIONS.length; ++i2) {
                             if (renderChunkInfo.hasSourceDirection(i2) && compiledChunk.facesCanSeeEachother(DIRECTIONS[i2].getOpposite(), direction)) {
                                 flag3 = true;
                                 break;
@@ -943,71 +943,44 @@ public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseab
                         }
                     }
 
+                    boolean flag4 = false;
                     if (flag && flag2) {
-                        BlockPos blockPos3;
-                        byte var10001;
-                        label126: {
-                            label125: {
-                                blockPos3 = renderChunk2.getOrigin();
-                                if (direction.getAxis() == Direction.Axis.X) {
-                                    if (blockPos2.getX() > blockPos3.getX()) {
-                                        break label125;
-                                    }
-                                } else if (blockPos2.getX() < blockPos3.getX()) {
-                                    break label125;
-                                }
-
-                                var10001 = 0;
-                                break label126;
+                        BlockPos blockPos3 = renderChunk2.getOrigin();
+                        int offX = 0;
+                        if (direction.getAxis() == Direction.Axis.X) {
+                            if (blockPos2.getX() > blockPos3.getX()) {
+                                offX = 16;
                             }
-
-                            var10001 = 16;
+                        } else if (blockPos2.getX() < blockPos3.getX()) {
+                            offX = 16;
                         }
 
-                        byte var10002;
-                        label118: {
-                            label117: {
-                                if (direction.getAxis() == Direction.Axis.Y) {
-                                    if (blockPos2.getY() > blockPos3.getY()) {
-                                        break label117;
-                                    }
-                                } else if (blockPos2.getY() < blockPos3.getY()) {
-                                    break label117;
-                                }
-
-                                var10002 = 0;
-                                break label118;
+                        int offY = 0;
+                        if (direction.getAxis() == Direction.Axis.Y) {
+                            if (blockPos2.getY() > blockPos3.getY()) {
+                                offY = 16;
                             }
-
-                            var10002 = 16;
+                        } else if (blockPos2.getY() < blockPos3.getY()) {
+                            offY = 16;
                         }
 
-                        byte var10003;
-                        label110: {
-                            label109: {
-                                if (direction.getAxis() == Direction.Axis.Z) {
-                                    if (blockPos2.getZ() > blockPos3.getZ()) {
-                                        break label109;
-                                    }
-                                } else if (blockPos2.getZ() < blockPos3.getZ()) {
-                                    break label109;
-                                }
-
-                                var10003 = 0;
-                                break label110;
+                        int offZ = 0;
+                        if (direction.getAxis() == Direction.Axis.Z) {
+                            if (blockPos2.getZ() > blockPos3.getZ()) {
+                                offZ = 16;
                             }
-
-                            var10003 = 16;
+                        } else if (blockPos2.getZ() < blockPos3.getZ()) {
+                            offZ = 16;
                         }
 
-                        BlockPos blockPos4 = blockPos3.offset(var10001, var10002, var10003);
-                        Vec3 vec32 = new Vec3((double)blockPos4.getX(), (double)blockPos4.getY(), (double)blockPos4.getZ());
+                        BlockPos blockPos4 = blockPos3.offset(offX, offY, offZ);
+                        Vec3 vec32 = new Vec3((double) blockPos4.getX(), (double) blockPos4.getY(), (double) blockPos4.getZ());
                         Vec3 vec33 = vec3.subtract(vec32).normalize().scale(CEILED_SECTION_DIAGONAL);
-                        boolean flag4 = true;
+                        flag4 = true;
 
-                        while(vec3.subtract(vec32).lengthSqr() > 3600.0D) {
+                        while (vec3.subtract(vec32).lengthSqr() > 3600.0D) {
                             vec32 = vec32.add(vec33);
-                            if (vec32.y > (double)this.level.getMaxBuildHeight() || vec32.y < (double)this.level.getMinBuildHeight()) {
+                            if (vec32.y > (double) this.level.getMaxBuildHeight() || vec32.y < (double) this.level.getMinBuildHeight()) {
                                 break;
                             }
 
@@ -1017,10 +990,7 @@ public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseab
                                 break;
                             }
                         }
-
-                        if (!flag4) {
-                            continue;
-                        }
+                        if (!flag4) continue;
                     }
 
                     LevelRenderer.RenderChunkInfo renderChunkInfo2 = renderInfoMap.get(renderChunk2);
@@ -1802,13 +1772,13 @@ public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseab
                 } else if (this.minecraft.level.effects().skyType() == DimensionSpecialEffects.SkyType.NORMAL) {
                     RenderSystem.disableTexture();
                     Vec3 vec3 = this.level.getSkyColor(this.minecraft.gameRenderer.getMainCamera().getPosition(), f);
-                    float f2 = (float)vec3.x;
+                    float f2In = (float)vec3.x;
                     float f3 = (float)vec3.y;
                     float f4 = (float)vec3.z;
                     FogRenderer.levelFogColor();
                     BufferBuilder bufferBuilder = Tesselator.getInstance().getBuilder();
                     RenderSystem.depthMask(false);
-                    RenderSystem.setShaderColor(f2, f3, f4, 1.0F);
+                    RenderSystem.setShaderColor(f2In, f3, f4, 1.0F);
                     ShaderInstance shaderInstance = RenderSystem.getShader();
                     this.skyBuffer.drawWithShader(poseStack.last().pose(), matrix4f, shaderInstance);
                     RenderSystem.enableBlend();
@@ -1900,9 +1870,9 @@ public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseab
                     }
 
                     if (this.level.effects().hasGround()) {
-                        RenderSystem.setShaderColor(f2 * 0.2F + 0.04F, f3 * 0.2F + 0.04F, f4 * 0.6F + 0.1F, 1.0F);
+                        RenderSystem.setShaderColor(f2In * 0.2F + 0.04F, f3 * 0.2F + 0.04F, f4 * 0.6F + 0.1F, 1.0F);
                     } else {
-                        RenderSystem.setShaderColor(f2, f3, f4, 1.0F);
+                        RenderSystem.setShaderColor(f2In, f3, f4, 1.0F);
                     }
 
                     RenderSystem.enableTexture();
diff --git a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
index 5f71b68b41fdbcd07bf5bff98ab7575cbafbe4c1..8f60cece7e8116740d0945394b018760741aac00 100644
--- a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
@@ -321,7 +321,7 @@ public class LiquidBlockRenderer {
             floats[1] += 10.0F;
         } else if (f >= 0.0F) {
             floats[0] += f;
-            int var10002 = floats[1]++;
+            floats[1]++;
         }
 
     }
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java b/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
index d559ca145678cb3127caffd0d92c2c70be8ea2f3..ebd531cd81b8966d0b738bdb6ce9e56df5be9581 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
@@ -41,7 +41,7 @@ public class KeyValueCondition implements Condition {
                     predicate = this.getBlockStatePredicate(stateDefinition, property, s);
                 } else {
                     List<Predicate<BlockState>> list2 = list.stream().map((sx) -> this.getBlockStatePredicate(stateDefinition, property, sx)).collect(Collectors.toList());
-                    predicate = (blockState) -> list2.stream().anyMatch((predicate) -> predicate.test(blockState));
+                    predicate = (blockState) -> list2.stream().anyMatch((predicateIn) -> predicateIn.test(blockState));
                 }
 
                 return flag ? predicate.negate() : predicate;
diff --git a/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
index a3b654a02fa1b7452f804e8df6826c1c5bf85ebe..763da7bba70f626190d7f170d4d93849f6260684 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
@@ -112,17 +112,17 @@ public class ChunkDebugRenderer implements DebugRenderer.SimpleDebugRenderer {
                 if (serverLevel == null) {
                     return ImmutableMap.of();
                 } else {
-                    Builder<ChunkPos, String> builder = ImmutableMap.builder();
+                    Builder<ChunkPos, String> builderIn = ImmutableMap.builder();
                     ServerChunkCache serverChunkCache = serverLevel.getChunkSource();
 
                     for(int i3 = i - 12; i3 <= i + 12; ++i3) {
                         for(int i4 = i2 - 12; i4 <= i2 + 12; ++i4) {
                             ChunkPos chunkPos = new ChunkPos(i3, i4);
-                            builder.put(chunkPos, "Server: " + serverChunkCache.getChunkDebugData(chunkPos));
+                            builderIn.put(chunkPos, "Server: " + serverChunkCache.getChunkDebugData(chunkPos));
                         }
                     }
 
-                    return builder.build();
+                    return builderIn.build();
                 }
             });
         }
diff --git a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
index 132b907e1e6570448624d1cbc4ea98f4daab2e77..52b51021c35d0291e672ca1ca3f0d0c18e4c0747 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
@@ -41,11 +41,11 @@ public class GoalSelectorDebugRenderer implements DebugRenderer.SimpleDebugRende
             for(int i = 0; i < list.size(); ++i) {
                 GoalSelectorDebugRenderer.DebugGoal debugGoal = (GoalSelectorDebugRenderer.DebugGoal)list.get(i);
                 if (blockPos.closerThan(debugGoal.pos, 160.0D)) {
-                    double d = (double)debugGoal.pos.getX() + 0.5D;
-                    double d2 = (double)debugGoal.pos.getY() + 2.0D + (double)i * 0.25D;
-                    double d3 = (double)debugGoal.pos.getZ() + 0.5D;
+                    double dx = (double)debugGoal.pos.getX() + 0.5D;
+                    double d2x = (double)debugGoal.pos.getY() + 2.0D + (double)i * 0.25D;
+                    double d3x = (double)debugGoal.pos.getZ() + 0.5D;
                     int i2 = debugGoal.isRunning ? -16711936 : -3355444;
-                    DebugRenderer.renderFloatingText(debugGoal.name, d, d2, d3, i2);
+                    DebugRenderer.renderFloatingText(debugGoal.name, dx, d2x, d3x, i2);
                 }
             }
 
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
index 511651e2fe3ed53089d6aadb4fda0fc86746e5ce..f4fab756fb817a47ebb0eac70c441d49cb602471 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
@@ -79,7 +79,7 @@ public class EntityRenderDispatcher implements ResourceManagerReloadListener {
         if (entity instanceof AbstractClientPlayer) {
             String s = ((AbstractClientPlayer)entity).getModelName();
             EntityRenderer<? extends Player> entityRenderer = (EntityRenderer)this.playerRenderers.get(s);
-            return entityRenderer != null ? entityRenderer : (EntityRenderer)this.playerRenderers.get("default");
+            return entityRenderer != null ? (EntityRenderer<? super T>) entityRenderer : (EntityRenderer)this.playerRenderers.get("default");
         } else {
             return (EntityRenderer)this.renderers.get(entity.getType());
         }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
index cebb3e465fd263099210589a95775addf52cbeff..853b5f74213fa89f01cd5183efbd77f412760996 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
@@ -19,7 +19,7 @@ public class EntityRenderers {
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final String DEFAULT_PLAYER_MODEL = "default";
     private static final Map<EntityType<?>, EntityRendererProvider<?>> PROVIDERS = Maps.newHashMap();
-    private static final Map<String, EntityRendererProvider<AbstractClientPlayer>> PLAYER_PROVIDERS = ImmutableMap.of("default", (EntityRendererProvider<>)(context) -> new PlayerRenderer(context, false), "slim", (EntityRendererProvider<>)(context) -> new PlayerRenderer(context, true));
+    private static final Map<String, EntityRendererProvider<AbstractClientPlayer>> PLAYER_PROVIDERS = ImmutableMap.of("default", (EntityRendererProvider)(context) -> new PlayerRenderer(context, false), "slim", (EntityRendererProvider)(context) -> new PlayerRenderer(context, true));
 
     private static <T extends Entity> void register(EntityType<? extends T> entityType, EntityRendererProvider<T> entityRendererProvider) {
         PROVIDERS.put(entityType, entityRendererProvider);
diff --git a/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java b/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
index 7ac3160a5c0c7c688a96e15eff0eec6dee816b86..c7e1de2ed533d4327de15aafd45a2eb3fdc997d8 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
@@ -108,9 +108,9 @@ public class HttpTexture extends SimpleTexture {
                             }
 
                             Minecraft.getInstance().execute(() -> {
-                                NativeImage nativeImage = this.load(inputStream);
-                                if (nativeImage != null) {
-                                    this.loadCallback(nativeImage);
+                                NativeImage nativeImageIn = this.load(inputStream);
+                                if (nativeImageIn != null) {
+                                    this.loadCallback(nativeImageIn);
                                 }
 
                             });
diff --git a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
index ce8671a6ea9284aa8327b11cd165834e87ebffa4..64258228cf8133f66afcb67952e592111ba8546c 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
@@ -11,7 +11,7 @@ import java.util.function.Consumer;
 import net.minecraft.util.Mth;
 
 public class Stitcher {
-    private static final Comparator<Stitcher.Holder> HOLDER_COMPARATOR = Comparator.comparing((holder) -> -holder.height).thenComparing((holder) -> -holder.width).thenComparing((holder) -> holder.spriteInfo.name());
+    private static final Comparator<Stitcher.Holder> HOLDER_COMPARATOR = Comparator.<Holder, Integer>comparing((holder) -> -holder.height).thenComparing((holder) -> -holder.width).thenComparing((holder) -> holder.spriteInfo.name());
     private final int mipLevel;
     private final Set<Stitcher.Holder> texturesToBeStitched = Sets.newHashSetWithExpectedSize(256);
     private final List<Stitcher.Region> storage = Lists.newArrayListWithCapacity(256);
diff --git a/src/main/java/net/minecraft/client/resources/ClientPackSource.java b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
index 3cb673f83d3995f0ffa81b9518f629b0bba2a1ed..15818a6845be373ef02fc315d75407103b8751d7 100644
--- a/src/main/java/net/minecraft/client/resources/ClientPackSource.java
+++ b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
@@ -143,8 +143,8 @@ public class ClientPackSource implements RepositorySource {
                     LOGGER.warn("Pack application failed: {}, deleting file {}", throwable.getMessage(), file);
                     deleteQuietly(file);
                     Minecraft minecraft = Minecraft.getInstance();
-                    minecraft.execute(() -> minecraft.setScreen(new ConfirmScreen((flag) -> {
-                            if (flag) {
+                    minecraft.execute(() -> minecraft.setScreen(new ConfirmScreen((flagIn) -> {
+                            if (flagIn) {
                                 minecraft.setScreen((Screen)null);
                             } else {
                                 ClientPacketListener clientPacketListener = minecraft.getConnection();
diff --git a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
index b5f186ab524b670726e03b7bd50aa42e2fa6ef74..7d5cc7daea6bf95279546793d3fe265e30f4cab9 100644
--- a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
+++ b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
@@ -326,7 +326,7 @@ public class ModelBakery {
                             try {
                                 InputStream inputStream = resource.getInputStream();
 
-                                Pair var3;
+                                Pair<String, BlockModelDefinition> var3;
                                 try {
                                     var3 = Pair.of(resource.getSourceName(), BlockModelDefinition.fromStream(this.context, new InputStreamReader(inputStream, StandardCharsets.UTF_8)));
                                 } catch (Throwable var6) {
@@ -369,10 +369,10 @@ public class ModelBakery {
                         blockModelDefinition.getVariants().forEach((s, multiVariant) -> {
                             try {
                                 immutableList.stream().filter(predicate(stateDefinition, s)).forEach((blockState) -> {
-                                    Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair2 = map4.put(blockState, Pair.of(multiVariant, () -> ModelBakery.ModelGroupKey.create(blockState, multiVariant, list)));
-                                    if (pair2 != null && pair2.getFirst() != multiPart) {
+                                    Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair2In = map4.put(blockState, Pair.of(multiVariant, () -> ModelBakery.ModelGroupKey.create(blockState, multiVariant, list)));
+                                    if (pair2In != null && pair2In.getFirst() != multiPart) {
                                         map4.put(blockState, pair);
-                                        throw new RuntimeException("Overlapping definition with: " + (String)((Entry)blockModelDefinition.getVariants().entrySet().stream().filter((entry) -> entry.getValue() == pair2.getFirst()).findFirst().get()).getKey());
+                                        throw new RuntimeException("Overlapping definition with: " + (String)((Entry)blockModelDefinition.getVariants().entrySet().stream().filter((entry) -> entry.getValue() == pair2In.getFirst()).findFirst().get()).getKey());
                                     }
                                 });
                             } catch (Exception var12) {
@@ -388,7 +388,7 @@ public class ModelBakery {
                 } catch (Exception var27) {
                     throw new ModelBakery.BlockStateDefinitionException(String.format("Exception loading blockstate definition: '%s': %s", resourceLocation4, var27));
                 } finally {
-                    HashMap map6 = Maps.newHashMap();
+                    HashMap<ModelGroupKey, Set<BlockState>> map6 = Maps.newHashMap();
                     map.forEach((modelResourceLocationx, blockState) -> {
                         Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair2 = map2.get(blockState);
                         if (pair2 == null) {
@@ -399,8 +399,8 @@ public class ModelBakery {
                         this.cacheAndQueueDependencies(modelResourceLocationx, (UnbakedModel)pair2.getFirst());
 
                         try {
-                            ModelBakery.ModelGroupKey modelGroupKey = (ModelBakery.ModelGroupKey)(pair2.getSecond()).get();
-                            (map6.computeIfAbsent(modelGroupKey, (modelGroupKey) -> Sets.newIdentityHashSet())).add(blockState);
+                            ModelBakery.ModelGroupKey modelGroupKeyIn = (ModelBakery.ModelGroupKey)(pair2.getSecond()).get();
+                            (map6.computeIfAbsent(modelGroupKeyIn, (modelGroupKeyIn2) -> Sets.newIdentityHashSet())).add(blockState);
                         } catch (Exception var9) {
                             LOGGER.warn("Exception evaluating model definition: '{}'", modelResourceLocationx, var9);
                         }
diff --git a/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java b/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java
index eece29da395e8a25348510cf265a31b09a2b5598..95e0036e792e0cac6f5c8611e99be38ec0db1b56 100644
--- a/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java
+++ b/src/main/java/net/minecraft/client/searchtree/ReloadableIdSearchTree.java
@@ -49,7 +49,7 @@ public class ReloadableIdSearchTree<T> implements MutableSearchTree<T> {
     }
 
     protected void index(T object) {
-        ((Stream)this.idGetter.apply(object)).forEach((resourceLocation) -> {
+        (this.idGetter.apply(object)).forEach((resourceLocation) -> {
             this.namespaceTree.add(object, resourceLocation.getNamespace().toLowerCase(Locale.ROOT));
             this.pathTree.add(object, resourceLocation.getPath().toLowerCase(Locale.ROOT));
         });
@@ -67,7 +67,7 @@ public class ReloadableIdSearchTree<T> implements MutableSearchTree<T> {
             List<T> list = this.namespaceTree.search(s.substring(0, i).trim());
             String s2 = s.substring(i + 1).trim();
             List<T> list2 = this.pathTree.search(s2);
-            return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator(list.iterator(), list2.iterator(), this::comparePosition));
+            return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator<>(list.iterator(), list2.iterator(), this::comparePosition));
         }
     }
 
diff --git a/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java b/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java
index c858771f860ed9a00f983d51e470be0438839c13..087eda2aaef1ec6441d35ee11f0b76b7d4e7ec3d 100644
--- a/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java
+++ b/src/main/java/net/minecraft/client/searchtree/ReloadableSearchTree.java
@@ -29,7 +29,7 @@ public class ReloadableSearchTree<T> extends ReloadableIdSearchTree<T> {
 
     protected void index(T object) {
         super.index(object);
-        ((Stream)this.filler.apply(object)).forEach((s) -> this.tree.add(object, s.toLowerCase(Locale.ROOT)));
+        (this.filler.apply(object)).forEach((s) -> this.tree.add(object, s.toLowerCase(Locale.ROOT)));
     }
 
     public List<T> search(String s) {
@@ -41,7 +41,7 @@ public class ReloadableSearchTree<T> extends ReloadableIdSearchTree<T> {
             String s2 = s.substring(i + 1).trim();
             List<T> list2 = this.pathTree.search(s2);
             List<T> list3 = this.tree.search(s2);
-            return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator(list.iterator(), new ReloadableSearchTree.MergingUniqueIterator<T>(list2.iterator(), list3.iterator(), this::comparePosition), this::comparePosition));
+            return Lists.newArrayList(new ReloadableIdSearchTree.IntersectionIterator<>(list.iterator(), new ReloadableSearchTree.MergingUniqueIterator<T>(list2.iterator(), list3.iterator(), this::comparePosition), this::comparePosition));
         }
     }
 
diff --git a/src/main/java/net/minecraft/client/sounds/SoundEngine.java b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
index 195a62743b7bcd0fd6cf1d76e9eaa203ca1ccb3b..d6582935ac2e6da9e31d5a35851e60462dd4d7e1 100644
--- a/src/main/java/net/minecraft/client/sounds/SoundEngine.java
+++ b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
@@ -116,12 +116,12 @@ public class SoundEngine {
                 this.listener.setGain(f);
             } else {
                 this.instanceToChannel.forEach((soundInstance, channelHandle) -> {
-                    float f = this.calculateVolume(soundInstance);
+                    float volume = this.calculateVolume(soundInstance);
                     channelHandle.execute((channel) -> {
-                        if (f <= 0.0F) {
+                        if (volume <= 0.0F) {
                             channel.stop();
                         } else {
-                            channel.setVolume(f);
+                            channel.setVolume(volume);
                         }
 
                     });
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index c2d72a4b2753da2dd002711304f0b8777cf96762..2eb447b33b70a043c6fa22e9343396a7c105b11f 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -275,7 +275,7 @@ public class Commands {
     private void fillUsableCommands(CommandNode<CommandSourceStack> commandNode, CommandNode<SharedSuggestionProvider> commandNode2, CommandSourceStack commandSourceStack, Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map) {
         for(CommandNode<CommandSourceStack> commandNode3 : commandNode.getChildren()) {
             if (commandNode3.canUse(commandSourceStack)) {
-                ArgumentBuilder<SharedSuggestionProvider, ?> argumentBuilder = commandNode3.createBuilder();
+                ArgumentBuilder<SharedSuggestionProvider, ?> argumentBuilder = (ArgumentBuilder) commandNode3.createBuilder();
                 argumentBuilder.requires((sharedSuggestionProvider) -> true);
                 if (argumentBuilder.getCommand() != null) {
                     argumentBuilder.executes((commandContext) -> 0);
diff --git a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
index d8316a9918023eaa9b9d02b7e6655839518f9f2b..48bde4590f87c5ab17afae10ef8120f37dd1627d 100644
--- a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
@@ -56,7 +56,7 @@ public class ObjectiveArgument implements ArgumentType<String> {
             return SharedSuggestionProvider.suggest(commandSourceStack.getServer().getScoreboard().getObjectiveNames(), suggestionsBuilder);
         } else if (object instanceof SharedSuggestionProvider) {
             SharedSuggestionProvider sharedSuggestionProvider = (SharedSuggestionProvider)object;
-            return sharedSuggestionProvider.customSuggestion(commandContext);
+            return sharedSuggestionProvider.customSuggestion((CommandContext<SharedSuggestionProvider>) commandContext);
         } else {
             return Suggestions.empty();
         }
diff --git a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
index 303b74bbea129be5d013b81717eb14658aec838b..a4654a902dd662026d2ad1e39ced28ab7ed3853c 100644
--- a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
@@ -52,7 +52,7 @@ public class OperationArgument implements ArgumentType<OperationArgument.Operati
     }
 
     private static OperationArgument.Operation getOperation(String s) throws CommandSyntaxException {
-        return (OperationArgument.Operation)(s.equals("><") ? (score, score2) -> {
+        return (OperationArgument.Operation)(s.equals("><") ? (Operation) (score, score2) -> {
             int i = score.getScore();
             score.setScore(score2.getScore());
             score2.setScore(i);
diff --git a/src/main/java/net/minecraft/commands/arguments/ResourceOrTagLocationArgument.java b/src/main/java/net/minecraft/commands/arguments/ResourceOrTagLocationArgument.java
index 08af89a1d14ec553169e7e53e50847d806c00f94..2f96563e7505d3e45d943535041761c742d03ba9 100644
--- a/src/main/java/net/minecraft/commands/arguments/ResourceOrTagLocationArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ResourceOrTagLocationArgument.java
@@ -87,13 +87,7 @@ public class ResourceOrTagLocationArgument<T> implements ArgumentType<ResourceOr
         return EXAMPLES;
     }
 
-    static record ResourceResult<T>(ResourceKey<T> a) implements ResourceOrTagLocationArgument.Result<T> {
-        private final ResourceKey<T> key;
-
-        ResourceResult(ResourceKey<T> resourceKey) {
-            this.key = resourceKey;
-        }
-
+    static record ResourceResult<T>(ResourceKey<T> key) implements ResourceOrTagLocationArgument.Result<T> {
         public Either<ResourceKey<T>, TagKey<T>> unwrap() {
             return Either.left(this.key);
         }
@@ -109,10 +103,6 @@ public class ResourceOrTagLocationArgument<T> implements ArgumentType<ResourceOr
         public String asPrintable() {
             return this.key.location().toString();
         }
-
-        public ResourceKey<T> key() {
-            return this.key;
-        }
     }
 
     public interface Result<T> extends Predicate<Holder<T>> {
@@ -138,13 +128,7 @@ public class ResourceOrTagLocationArgument<T> implements ArgumentType<ResourceOr
         }
     }
 
-    static record TagResult<T>(TagKey<T> a) implements ResourceOrTagLocationArgument.Result<T> {
-        private final TagKey<T> key;
-
-        TagResult(TagKey<T> tagKey) {
-            this.key = tagKey;
-        }
-
+    static record TagResult<T>(TagKey<T> key) implements ResourceOrTagLocationArgument.Result<T> {
         public Either<ResourceKey<T>, TagKey<T>> unwrap() {
             return Either.right(this.key);
         }
@@ -160,9 +144,5 @@ public class ResourceOrTagLocationArgument<T> implements ArgumentType<ResourceOr
         public String asPrintable() {
             return "#" + this.key.location();
         }
-
-        public TagKey<T> key() {
-            return this.key;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
index ab7d76f4e2de6323c55e2eb17f84bf91c31c9ef1..9db2c7965bbc414aeb7623fb9d19529fab65fd97 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
@@ -199,7 +199,7 @@ public class BlockStateParser {
     private static <T extends Comparable<T>> SuggestionsBuilder addSuggestions(SuggestionsBuilder suggestionsBuilder, Property<T> property) {
         for(T comparable : property.getPossibleValues()) {
             if (comparable instanceof Integer) {
-                suggestionsBuilder.suggest(comparable);
+                suggestionsBuilder.suggest((Integer) comparable);
             } else {
                 suggestionsBuilder.suggest(property.getName(comparable));
             }
@@ -435,8 +435,8 @@ public class BlockStateParser {
     private <T extends Comparable<T>> void setValue(Property<T> property, String s, int i) throws CommandSyntaxException {
         Optional<T> optional = property.getValue(s);
         if (optional.isPresent()) {
-            this.state = this.state.setValue(property, (Comparable)optional.get());
-            this.properties.put(property, (Comparable)optional.get());
+            this.state = this.state.setValue(property, optional.get());
+            this.properties.put(property, optional.get());
         } else {
             this.reader.setCursor(i);
             throw ERROR_INVALID_VALUE.createWithContext(this.reader, this.id.toString(), property.getName(), s);
diff --git a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
index 7d78577c02ae1f2706d44c83fd71d242e588d824..a9433279e7a2cd0d3889ea73d876f6496cb534b9 100644
--- a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
+++ b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypes.java
@@ -130,7 +130,7 @@ public class ArgumentTypes {
     }
 
     private static <T extends ArgumentType<?>> Class<T> fixClassType(Class<? super T> clazz) {
-        return clazz;
+        return (Class<T>) clazz;
     }
 
     @Nullable
@@ -144,7 +144,7 @@ public class ArgumentTypes {
     }
 
     public static <T extends ArgumentType<?>> void serialize(FriendlyByteBuf friendlyByteBuf, T argumentType) {
-        ArgumentTypes.Entry<T> entry = get(argumentType);
+        ArgumentTypes.Entry<T> entry = (Entry<T>) get(argumentType);
         if (entry == null) {
             LOGGER.error("Could not serialize {} ({}) - will not be sent to client!", argumentType, argumentType.getClass());
             friendlyByteBuf.writeResourceLocation(new ResourceLocation(""));
@@ -167,7 +167,7 @@ public class ArgumentTypes {
     }
 
     private static <T extends ArgumentType<?>> void serializeToJson(JsonObject jsonObject, T argumentType) {
-        ArgumentTypes.Entry<T> entry = get(argumentType);
+        ArgumentTypes.Entry<T> entry = (Entry<T>) get(argumentType);
         if (entry == null) {
             LOGGER.error("Could not serialize argument {} ({})!", argumentType, argumentType.getClass());
             jsonObject.addProperty("type", "unknown");
diff --git a/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java b/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
index 090721f932b65fac0e08a461281a14091a03b76f..63e9679f428ad64e289e77d71762cc8f2caa8c4b 100644
--- a/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
+++ b/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
@@ -29,7 +29,7 @@ public class SuggestionProviders {
             throw new IllegalArgumentException("A command suggestion provider is already registered with the name " + resourceLocation);
         } else {
             PROVIDERS_BY_NAME.put(resourceLocation, suggestionProvider);
-            return new SuggestionProviders.Wrapper(resourceLocation, suggestionProvider);
+            return (SuggestionProvider<S>) new Wrapper(resourceLocation, suggestionProvider);
         }
     }
 
diff --git a/src/main/java/net/minecraft/core/BlockPos.java b/src/main/java/net/minecraft/core/BlockPos.java
index aa193b79798df45973ddef57982e6c51bfb14df2..d399a650b93d87c4984842203bd28f1a6e14ed73 100644
--- a/src/main/java/net/minecraft/core/BlockPos.java
+++ b/src/main/java/net/minecraft/core/BlockPos.java
@@ -238,11 +238,11 @@ public class BlockPos extends Vec3i {
             };
     }
 
-    public static Iterable<BlockPos> withinManhattan(BlockPos blockPos, int i, int i2, int i3) {
-        int i4 = i + i2 + i3;
-        int i5 = blockPos.getX();
-        int i6 = blockPos.getY();
-        int i7 = blockPos.getZ();
+    public static Iterable<BlockPos> withinManhattan(BlockPos blockPos, int originZ, int maxDepth, int reachX) {
+        int reachY = originZ + maxDepth + reachX;
+        int reachZ = blockPos.getX();
+        int originX = blockPos.getY();
+        int originY = blockPos.getZ();
         return () -> new AbstractIterator<BlockPos>() {
                 private final BlockPos.MutableBlockPos cursor = new BlockPos.MutableBlockPos();
                 private int currentDepth;
@@ -255,7 +255,7 @@ public class BlockPos extends Vec3i {
                 protected BlockPos computeNext() {
                     if (this.zMirror) {
                         this.zMirror = false;
-                        this.cursor.setZ(i7 - (this.cursor.getZ() - i7));
+                        this.cursor.setZ(originY - (this.cursor.getZ() - originY));
                         return this.cursor;
                     } else {
                         BlockPos blockPos;
@@ -264,24 +264,24 @@ public class BlockPos extends Vec3i {
                                 ++this.x;
                                 if (this.x > this.maxX) {
                                     ++this.currentDepth;
-                                    if (this.currentDepth > i4) {
+                                    if (this.currentDepth > reachY) {
                                         return (BlockPos)this.endOfData();
                                     }
 
-                                    this.maxX = Math.min(i, this.currentDepth);
+                                    this.maxX = Math.min(originZ, this.currentDepth);
                                     this.x = -this.maxX;
                                 }
 
-                                this.maxY = Math.min(i2, this.currentDepth - Math.abs(this.x));
+                                this.maxY = Math.min(maxDepth, this.currentDepth - Math.abs(this.x));
                                 this.y = -this.maxY;
                             }
 
                             int i = this.x;
                             int i2 = this.y;
                             int i3 = this.currentDepth - Math.abs(i) - Math.abs(i2);
-                            if (i3 <= i3) {
+                            if (i3 <= reachZ) {
                                 this.zMirror = i3 != 0;
-                                blockPos = this.cursor.set(i5 + i, i6 + i2, i7 + i3);
+                                blockPos = this.cursor.set(reachZ + i, originX + i2, originY + i3);
                             }
                         }
 
@@ -325,10 +325,10 @@ public class BlockPos extends Vec3i {
         return StreamSupport.stream(betweenClosed(i, i2, i3, i4, i5, i6).spliterator(), false);
     }
 
-    public static Iterable<BlockPos> betweenClosed(int i, int i2, int i3, int i4, int i5, int i6) {
-        int i7 = i4 - i + 1;
-        int i8 = i5 - i2 + 1;
-        int i9 = i6 - i3 + 1;
+    public static Iterable<BlockPos> betweenClosed(int end, int width, int height, int minX, int minY, int minZ) {
+        int i7 = minX - end + 1;
+        int i8 = minY - width + 1;
+        int i9 = minZ - height + 1;
         int i10 = i7 * i8 * i9;
         return () -> new AbstractIterator<BlockPos>() {
                 private final BlockPos.MutableBlockPos cursor = new BlockPos.MutableBlockPos();
@@ -343,7 +343,7 @@ public class BlockPos extends Vec3i {
                         int i3 = i2 % i8;
                         int i4 = i2 / i8;
                         ++this.index;
-                        return this.cursor.set(i + i, i2 + i3, i3 + i4);
+                        return this.cursor.set(end + i, width + i3, height + i4);
                     }
                 }
             };
diff --git a/src/main/java/net/minecraft/core/Holder.java b/src/main/java/net/minecraft/core/Holder.java
index e8441f102e40efc52902d75cbbd8c5097c46340a..54eff2a92c61da5281d152a6d870b56972967852 100644
--- a/src/main/java/net/minecraft/core/Holder.java
+++ b/src/main/java/net/minecraft/core/Holder.java
@@ -39,16 +39,10 @@ public interface Holder<T> {
     }
 
     static <T> Holder<T> hackyErase(Holder<? extends T> holder) {
-        return holder;
+        return (Holder<T>) holder;
     }
 
-    public static record Direct<T>(T a) implements Holder<T> {
-        private final T value;
-
-        public Direct(T object) {
-            this.value = object;
-        }
-
+    public static record Direct<T>(T value) implements Holder<T> {
         public boolean isBound() {
             return true;
         }
@@ -92,10 +86,6 @@ public interface Holder<T> {
         public Stream<TagKey<T>> tags() {
             return Stream.of();
         }
-
-        public T value() {
-            return this.value;
-        }
     }
 
     public static enum Kind {
diff --git a/src/main/java/net/minecraft/core/MappedRegistry.java b/src/main/java/net/minecraft/core/MappedRegistry.java
index 5405e813c826b59525bb82c34393faf221ce517a..ef71d7e95cf3b46896977aababfd9bcc1321532a 100644
--- a/src/main/java/net/minecraft/core/MappedRegistry.java
+++ b/src/main/java/net/minecraft/core/MappedRegistry.java
@@ -104,13 +104,13 @@ public class MappedRegistry<T> extends WritableRegistry<T> {
 
         Holder.Reference<T> reference;
         if (this.customHolderProvider != null) {
-            reference = (Holder.Reference)this.customHolderProvider.apply(object);
-            Holder.Reference<T> reference2 = (Holder.Reference)this.byKey.put(resourceKey, reference);
+            reference = this.customHolderProvider.apply(object);
+            Holder.Reference<T> reference2 = this.byKey.put(resourceKey, reference);
             if (reference2 != null && reference2 != reference) {
                 throw new IllegalStateException("Invalid holder present for key " + resourceKey);
             }
         } else {
-            reference = (Holder.Reference)this.byKey.computeIfAbsent(resourceKey, (resourceKeyx) -> Holder.Reference.createStandAlone(this, resourceKeyx));
+            reference = this.byKey.computeIfAbsent(resourceKey, (resourceKeyx) -> Holder.Reference.createStandAlone(this, resourceKeyx));
         }
 
         this.byLocation.put(resourceKey.location(), reference);
@@ -128,7 +128,7 @@ public class MappedRegistry<T> extends WritableRegistry<T> {
         this.validateWrite(resourceKey);
         Validate.notNull(resourceKey);
         Validate.notNull(object);
-        Holder<T> holder = (Holder)this.byKey.get(resourceKey);
+        Holder<T> holder = this.byKey.get(resourceKey);
         T object2 = (T)(holder != null && holder.isBound() ? holder.value() : null);
         int i;
         if (object2 == null) {
@@ -149,12 +149,12 @@ public class MappedRegistry<T> extends WritableRegistry<T> {
 
     @Nullable
     public ResourceLocation getKey(T object) {
-        Holder.Reference<T> reference = (Holder.Reference)this.byValue.get(object);
+        Holder.Reference<T> reference = this.byValue.get(object);
         return reference != null ? reference.key().location() : null;
     }
 
     public Optional<ResourceKey<T>> getResourceKey(T object) {
-        return Optional.ofNullable((Holder.Reference)this.byValue.get(object)).map(Holder.Reference::key);
+        return Optional.ofNullable(this.byValue.get(object)).map(Holder.Reference::key);
     }
 
     public int getId(@Nullable T object) {
@@ -163,24 +163,24 @@ public class MappedRegistry<T> extends WritableRegistry<T> {
 
     @Nullable
     public T get(@Nullable ResourceKey<T> resourceKey) {
-        return getValueFromNullable((Holder.Reference)this.byKey.get(resourceKey));
+        return getValueFromNullable(this.byKey.get(resourceKey));
     }
 
     @Nullable
     public T byId(int i) {
-        return (T)(i >= 0 && i < this.byId.size() ? getValueFromNullable((Holder.Reference)this.byId.get(i)) : null);
+        return (T)(i >= 0 && i < this.byId.size() ? getValueFromNullable(this.byId.get(i)) : null);
     }
 
     public Optional<Holder<T>> getHolder(int i) {
-        return i >= 0 && i < this.byId.size() ? Optional.ofNullable((Holder)this.byId.get(i)) : Optional.empty();
+        return i >= 0 && i < this.byId.size() ? Optional.ofNullable(this.byId.get(i)) : Optional.empty();
     }
 
     public Optional<Holder<T>> getHolder(ResourceKey<T> resourceKey) {
-        return Optional.ofNullable((Holder)this.byKey.get(resourceKey));
+        return Optional.ofNullable(this.byKey.get(resourceKey));
     }
 
     public Holder<T> getOrCreateHolder(ResourceKey<T> resourceKey) {
-        return (Holder)this.byKey.computeIfAbsent(resourceKey, (resourceKeyx) -> {
+        return this.byKey.computeIfAbsent(resourceKey, (resourceKeyx) -> {
             if (this.customHolderProvider != null) {
                 throw new IllegalStateException("This registry can't create new holders without value");
             } else {
@@ -208,7 +208,7 @@ public class MappedRegistry<T> extends WritableRegistry<T> {
 
     @Nullable
     public T get(@Nullable ResourceLocation resourceLocation) {
-        Holder.Reference<T> reference = (Holder.Reference)this.byLocation.get(resourceLocation);
+        Holder.Reference<T> reference = this.byLocation.get(resourceLocation);
         return getValueFromNullable(reference);
     }
 
@@ -234,14 +234,14 @@ public class MappedRegistry<T> extends WritableRegistry<T> {
     }
 
     public Stream<Pair<TagKey<T>, HolderSet.Named<T>>> getTags() {
-        return this.tags.entrySet().stream().map((entry) -> Pair.of((TagKey)entry.getKey(), (HolderSet.Named)entry.getValue()));
+        return this.tags.entrySet().stream().map((entry) -> Pair.of(entry.getKey(), entry.getValue()));
     }
 
     public HolderSet.Named<T> getOrCreateTag(TagKey<T> tagKey) {
-        HolderSet.Named<T> named = (HolderSet.Named)this.tags.get(tagKey);
+        HolderSet.Named<T> named = this.tags.get(tagKey);
         if (named == null) {
             named = this.createTag(tagKey);
-            Map<TagKey<T>, HolderSet.Named<T>> map = new IdentityHashMap(this.tags);
+            Map<TagKey<T>, HolderSet.Named<T>> map = new IdentityHashMap<>(this.tags);
             map.put(tagKey, named);
             this.tags = map;
         }
@@ -275,7 +275,7 @@ public class MappedRegistry<T> extends WritableRegistry<T> {
 
     public Registry<T> freeze() {
         this.frozen = true;
-        List<ResourceLocation> list = this.byKey.entrySet().stream().filter((entry) -> !((Holder.Reference)entry.getValue()).isBound()).map((entry) -> ((ResourceKey)entry.getKey()).location()).sorted().toList();
+        List<ResourceLocation> list = this.byKey.entrySet().stream().filter((entry) -> !entry.getValue().isBound()).map((entry) -> ((ResourceKey)entry.getKey()).location()).sorted().toList();
         if (!list.isEmpty()) {
             throw new IllegalStateException("Unbound values in registry " + this.key() + ": " + list);
         } else {
@@ -296,19 +296,19 @@ public class MappedRegistry<T> extends WritableRegistry<T> {
         if (this.customHolderProvider == null) {
             throw new IllegalStateException("This registry can't create intrusive holders");
         } else if (!this.frozen && this.intrusiveHolderCache != null) {
-            return (Holder.Reference)this.intrusiveHolderCache.computeIfAbsent(object, (objectx) -> Holder.Reference.createIntrusive(this, (T)objectx));
+            return this.intrusiveHolderCache.computeIfAbsent(object, (objectx) -> Holder.Reference.createIntrusive(this, (T)objectx));
         } else {
             throw new IllegalStateException("Registry is already frozen");
         }
     }
 
     public Optional<HolderSet.Named<T>> getTag(TagKey<T> tagKey) {
-        return Optional.ofNullable((HolderSet.Named)this.tags.get(tagKey));
+        return Optional.ofNullable(this.tags.get(tagKey));
     }
 
     public void bindTags(Map<TagKey<T>, List<Holder<T>>> map) {
-        Map<Holder.Reference<T>, List<TagKey<T>>> map2 = new IdentityHashMap();
-        this.byKey.values().forEach((reference) -> map2.put(reference, new ArrayList()));
+        Map<Holder.Reference<T>, List<TagKey<T>>> map2 = new IdentityHashMap<>();
+        this.byKey.values().forEach((reference) -> map2.put(reference, new ArrayList<>()));
         map.forEach((tagKey, list) -> {
             for(Holder<T> holder : list) {
                 if (!holder.isValidInRegistry(this)) {
@@ -319,7 +319,7 @@ public class MappedRegistry<T> extends WritableRegistry<T> {
                     throw new IllegalStateException("Found direct holder " + holder + " value in tag " + tagKey);
                 }
 
-                Holder.Reference<T> reference = (Holder.Reference)holder;
+                Holder.Reference<T> reference = (Holder.Reference<T>)holder;
                 (map2.get(reference)).add(tagKey);
             }
 
@@ -329,8 +329,8 @@ public class MappedRegistry<T> extends WritableRegistry<T> {
             LOGGER.warn("Not all defined tags for registry {} are present in data pack: {}", this.key(), set.stream().map((tagKey) -> tagKey.location().toString()).sorted().collect(Collectors.joining(", ")));
         }
 
-        Map<TagKey<T>, HolderSet.Named<T>> map3 = new IdentityHashMap(this.tags);
-        map.forEach((tagKey, list) -> ((HolderSet.Named)map3.computeIfAbsent(tagKey, this::createTag)).bind(list));
+        Map<TagKey<T>, HolderSet.Named<T>> map3 = new IdentityHashMap<>(this.tags);
+        map.forEach((tagKey, list) -> map3.computeIfAbsent(tagKey, this::createTag).bind(list));
         map2.forEach(Holder.Reference::bindTags);
         this.tags = map3;
     }
diff --git a/src/main/java/net/minecraft/core/NonNullList.java b/src/main/java/net/minecraft/core/NonNullList.java
index c2190c60e178443cd0a49d4cf42b0febebc2f346..4460f34e2589d9987affa1f40e0ba4c7e2ba3c4d 100644
--- a/src/main/java/net/minecraft/core/NonNullList.java
+++ b/src/main/java/net/minecraft/core/NonNullList.java
@@ -25,7 +25,7 @@ public class NonNullList<E> extends AbstractList<E> {
         Validate.notNull(object);
         Object[] objects = new Object[i];
         Arrays.fill(objects, object);
-        return new NonNullList<>(Arrays.asList(objects), object);
+        return new NonNullList(Arrays.asList(objects), object);
     }
 
     @SafeVarargs
diff --git a/src/main/java/net/minecraft/core/Registry.java b/src/main/java/net/minecraft/core/Registry.java
index a6552528caabb12648902d56142871ca0c4d8519..53f31f76e7c60398899928c235769e2fd992ba71 100644
--- a/src/main/java/net/minecraft/core/Registry.java
+++ b/src/main/java/net/minecraft/core/Registry.java
@@ -243,8 +243,8 @@ public abstract class Registry<T> implements Keyable, IdMap<T> {
     public static final Registry<TrunkPlacerType<?>> TRUNK_PLACER_TYPES = registerSimple(TRUNK_PLACER_TYPE_REGISTRY, (registry) -> TrunkPlacerType.STRAIGHT_TRUNK_PLACER);
     public static final Registry<TreeDecoratorType<?>> TREE_DECORATOR_TYPES = registerSimple(TREE_DECORATOR_TYPE_REGISTRY, (registry) -> TreeDecoratorType.LEAVE_VINE);
     public static final Registry<FeatureSizeType<?>> FEATURE_SIZE_TYPES = registerSimple(FEATURE_SIZE_TYPE_REGISTRY, (registry) -> FeatureSizeType.TWO_LAYERS_FEATURE_SIZE);
-    public static final Registry<Codec<? extends BiomeSource>> BIOME_SOURCE = registerSimple(BIOME_SOURCE_REGISTRY, Lifecycle.stable(), (registry) -> (T)BiomeSource.CODEC);
-    public static final Registry<Codec<? extends ChunkGenerator>> CHUNK_GENERATOR = registerSimple(CHUNK_GENERATOR_REGISTRY, Lifecycle.stable(), (registry) -> (T)ChunkGenerator.CODEC);
+    public static final Registry<Codec<? extends BiomeSource>> BIOME_SOURCE = registerSimple(BIOME_SOURCE_REGISTRY, Lifecycle.stable(), (registry) -> BiomeSource.CODEC);
+    public static final Registry<Codec<? extends ChunkGenerator>> CHUNK_GENERATOR = registerSimple(CHUNK_GENERATOR_REGISTRY, Lifecycle.stable(), (registry) -> ChunkGenerator.CODEC);
     public static final Registry<Codec<? extends SurfaceRules.ConditionSource>> CONDITION = registerSimple(CONDITION_REGISTRY, SurfaceRules.ConditionSource::bootstrap);
     public static final Registry<Codec<? extends SurfaceRules.RuleSource>> RULE = registerSimple(RULE_REGISTRY, SurfaceRules.RuleSource::bootstrap);
     public static final Registry<Codec<? extends DensityFunction>> DENSITY_FUNCTION_TYPES = registerSimple(DENSITY_FUNCTION_TYPE_REGISTRY, DensityFunctions::bootstrap);
@@ -302,7 +302,7 @@ public abstract class Registry<T> implements Keyable, IdMap<T> {
     private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> resourceKey, R writableRegistry, Registry.RegistryBootstrap<T> registryBootstrap, Lifecycle lifecycle) {
         ResourceLocation resourceLocation = resourceKey.location();
         LOADERS.put(resourceLocation, () -> registryBootstrap.run(writableRegistry));
-        WRITABLE_REGISTRY.register(resourceKey, writableRegistry, lifecycle);
+        WRITABLE_REGISTRY.register((ResourceKey) resourceKey, writableRegistry, lifecycle);
         return writableRegistry;
     }
 
@@ -403,12 +403,12 @@ public abstract class Registry<T> implements Keyable, IdMap<T> {
     }
 
     public static <V, T extends V> T register(Registry<V> registry, ResourceKey<V> resourceKey, T object) {
-        ((WritableRegistry)registry).register(resourceKey, (V)object, Lifecycle.stable());
+        ((WritableRegistry<V>)registry).register(resourceKey, (V)object, Lifecycle.stable());
         return object;
     }
 
     public static <V, T extends V> T registerMapping(Registry<V> registry, int i, String s, T object) {
-        ((WritableRegistry)registry).registerMapping(i, ResourceKey.create(registry.key, new ResourceLocation(s)), (V)object, Lifecycle.stable());
+        ((WritableRegistry<V>)registry).registerMapping(i, ResourceKey.create(registry.key, new ResourceLocation(s)), (V)object, Lifecycle.stable());
         return object;
     }
 
@@ -462,7 +462,7 @@ public abstract class Registry<T> implements Keyable, IdMap<T> {
             }
 
             public Iterator<Holder<T>> iterator() {
-                return Registry.this.holders().map((reference) -> reference).iterator();
+                return Registry.this.holders().map((reference) -> (Holder<T>) reference).iterator();
             }
         };
     }
diff --git a/src/main/java/net/minecraft/core/RegistryAccess.java b/src/main/java/net/minecraft/core/RegistryAccess.java
index e54d07fa051bd386adf73b438c71625716623a26..8d110ac7a140d2351b955eeb0b3db3b065d627b9 100644
--- a/src/main/java/net/minecraft/core/RegistryAccess.java
+++ b/src/main/java/net/minecraft/core/RegistryAccess.java
@@ -44,7 +44,22 @@ import org.slf4j.Logger;
 
 public interface RegistryAccess {
     Logger LOGGER = LogUtils.getLogger();
-    Map<ResourceKey<? extends Registry<?>>, RegistryAccess.RegistryData<?>> REGISTRIES;
+    Map<ResourceKey<? extends Registry<?>>, RegistryAccess.RegistryData<?>> REGISTRIES = Util.make(() -> {
+        Builder<ResourceKey<? extends Registry<?>>, RegistryAccess.RegistryData<?>> builder = ImmutableMap.builder();
+        put(builder, Registry.DIMENSION_TYPE_REGISTRY, DimensionType.DIRECT_CODEC, DimensionType.DIRECT_CODEC);
+        put(builder, Registry.BIOME_REGISTRY, Biome.DIRECT_CODEC, Biome.NETWORK_CODEC);
+        put(builder, Registry.CONFIGURED_CARVER_REGISTRY, ConfiguredWorldCarver.DIRECT_CODEC);
+        put(builder, Registry.CONFIGURED_FEATURE_REGISTRY, ConfiguredFeature.DIRECT_CODEC);
+        put(builder, Registry.PLACED_FEATURE_REGISTRY, PlacedFeature.DIRECT_CODEC);
+        put(builder, Registry.CONFIGURED_STRUCTURE_FEATURE_REGISTRY, ConfiguredStructureFeature.DIRECT_CODEC);
+        put(builder, Registry.STRUCTURE_SET_REGISTRY, StructureSet.DIRECT_CODEC);
+        put(builder, Registry.PROCESSOR_LIST_REGISTRY, StructureProcessorType.DIRECT_CODEC);
+        put(builder, Registry.TEMPLATE_POOL_REGISTRY, StructureTemplatePool.DIRECT_CODEC);
+        put(builder, Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, NoiseGeneratorSettings.DIRECT_CODEC);
+        put(builder, Registry.NOISE_REGISTRY, NormalNoise.NoiseParameters.DIRECT_CODEC);
+        put(builder, Registry.DENSITY_FUNCTION_REGISTRY, DensityFunction.DIRECT_CODEC);
+        return builder.build();
+    });
     Codec<RegistryAccess> NETWORK_CODEC = makeNetworkCodec();
     Supplier<RegistryAccess.Frozen> BUILTIN = Suppliers.memoize(() -> builtinCopy().freeze());
 
@@ -56,7 +71,7 @@ public interface RegistryAccess {
 
     default <E> Optional<? extends Registry<E>> registry(ResourceKey<? extends Registry<? extends E>> resourceKey) {
         Optional<? extends Registry<E>> optional = this.ownedRegistry(resourceKey);
-        return optional.isPresent() ? optional : Registry.REGISTRY.getOptional(resourceKey.location());
+        return optional.isPresent() ? optional : (Optional<? extends Registry<E>>) Registry.REGISTRY.getOptional(resourceKey.location());
     }
 
     default <E> Registry<E> registryOrThrow(ResourceKey<? extends Registry<? extends E>> resourceKey) {
@@ -91,21 +106,21 @@ public interface RegistryAccess {
 
     private static <E> Codec<RegistryAccess> makeNetworkCodec() {
         Codec<ResourceKey<? extends Registry<E>>> codec = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location);
-        Codec<Registry<E>> codec2 = codec.partialDispatch("type", (registry) -> DataResult.success(registry.key()), (resourceKey) -> getNetworkCodec(resourceKey).map((codec) -> RegistryCodecs.networkCodec(resourceKey, Lifecycle.experimental(), codec)));
+        Codec<Registry<E>> codec2 = codec.partialDispatch("type", (registry) -> DataResult.success(registry.key()), (resourceKey) -> getNetworkCodec(resourceKey).map((codecIn) -> RegistryCodecs.networkCodec(resourceKey, Lifecycle.experimental(), codecIn)));
         UnboundedMapCodec<? extends ResourceKey<? extends Registry<?>>, ? extends Registry<?>> unboundedMapCodec = Codec.unboundedMap(codec, codec2);
         return captureMap(unboundedMapCodec);
     }
 
     private static <K extends ResourceKey<? extends Registry<?>>, V extends Registry<?>> Codec<RegistryAccess> captureMap(UnboundedMapCodec<K, V> unboundedMapCodec) {
-        return unboundedMapCodec.xmap(RegistryAccess.ImmutableRegistryAccess::new, (registryAccess) -> registryAccess.ownedNetworkableRegistries().collect(ImmutableMap.toImmutableMap((registryEntry) -> registryEntry.key(), (registryEntry) -> registryEntry.value())));
+        return unboundedMapCodec.xmap(RegistryAccess.ImmutableRegistryAccess::new, (registryAccess) -> registryAccess.ownedNetworkableRegistries().collect(ImmutableMap.toImmutableMap((registryEntry) -> (K) registryEntry.key(), (registryEntry) -> (V) registryEntry.value())));
     }
 
-    private default Stream<RegistryAccess.RegistryEntry<?>> ownedNetworkableRegistries() {
+    default Stream<RegistryAccess.RegistryEntry<?>> ownedNetworkableRegistries() {
         return this.ownedRegistries().filter((registryEntry) -> ((RegistryAccess.RegistryData)REGISTRIES.get(registryEntry.key)).sendToClient());
     }
 
     private static <E> DataResult<? extends Codec<E>> getNetworkCodec(ResourceKey<? extends Registry<E>> resourceKey) {
-        return Optional.ofNullable((RegistryAccess.RegistryData)REGISTRIES.get(resourceKey)).map((registryData) -> registryData.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown or not serializable registry: " + resourceKey));
+        return Optional.ofNullable((RegistryData<E>) REGISTRIES.get(resourceKey)).map((registryData) -> registryData.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown or not serializable registry: " + resourceKey));
     }
 
     private static Map<ResourceKey<? extends Registry<?>>, ? extends WritableRegistry<?>> createFreshRegistries() {
@@ -119,8 +134,7 @@ public interface RegistryAccess {
     static RegistryAccess.Frozen fromRegistryOfRegistries(final Registry<? extends Registry<?>> registry) {
         return new RegistryAccess.Frozen() {
             public <T> Optional<Registry<T>> ownedRegistry(ResourceKey<? extends Registry<? extends T>> resourceKey) {
-                Registry<Registry<T>> registry = registry;
-                return registry.getOptional(resourceKey);
+                return registry.getOptional((ResourceKey) resourceKey);
             }
 
             public Stream<RegistryAccess.RegistryEntry<?>> ownedRegistries() {
@@ -180,7 +194,7 @@ public interface RegistryAccess {
     }
 
     static <E> WritableRegistry<?> createRegistry(ResourceKey<? extends Registry<?>> resourceKey) {
-        return new MappedRegistry<>(resourceKey, Lifecycle.stable(), (Function<?, Holder.Reference<?>>)null);
+        return new MappedRegistry(resourceKey, Lifecycle.stable(), (Function<?, Holder.Reference<?>>)null);
     }
 
     default RegistryAccess.Frozen freeze() {
@@ -191,25 +205,6 @@ public interface RegistryAccess {
         return (Lifecycle)this.ownedRegistries().map((registryEntry) -> registryEntry.value.elementsLifecycle()).reduce(Lifecycle.stable(), Lifecycle::add);
     }
 
-    static {
-        REGISTRIES = Util.make(() -> {
-            Builder<ResourceKey<? extends Registry<?>>, RegistryAccess.RegistryData<?>> builder = ImmutableMap.builder();
-            put(builder, Registry.DIMENSION_TYPE_REGISTRY, DimensionType.DIRECT_CODEC, DimensionType.DIRECT_CODEC);
-            put(builder, Registry.BIOME_REGISTRY, Biome.DIRECT_CODEC, Biome.NETWORK_CODEC);
-            put(builder, Registry.CONFIGURED_CARVER_REGISTRY, ConfiguredWorldCarver.DIRECT_CODEC);
-            put(builder, Registry.CONFIGURED_FEATURE_REGISTRY, ConfiguredFeature.DIRECT_CODEC);
-            put(builder, Registry.PLACED_FEATURE_REGISTRY, PlacedFeature.DIRECT_CODEC);
-            put(builder, Registry.CONFIGURED_STRUCTURE_FEATURE_REGISTRY, ConfiguredStructureFeature.DIRECT_CODEC);
-            put(builder, Registry.STRUCTURE_SET_REGISTRY, StructureSet.DIRECT_CODEC);
-            put(builder, Registry.PROCESSOR_LIST_REGISTRY, StructureProcessorType.DIRECT_CODEC);
-            put(builder, Registry.TEMPLATE_POOL_REGISTRY, StructureTemplatePool.DIRECT_CODEC);
-            put(builder, Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, NoiseGeneratorSettings.DIRECT_CODEC);
-            put(builder, Registry.NOISE_REGISTRY, NormalNoise.NoiseParameters.DIRECT_CODEC);
-            put(builder, Registry.DENSITY_FUNCTION_REGISTRY, DensityFunction.DIRECT_CODEC);
-            return builder.build();
-        });
-    }
-
     public interface Frozen extends RegistryAccess {
         default RegistryAccess.Frozen freeze() {
             return this;
@@ -236,45 +231,13 @@ public interface RegistryAccess {
         }
     }
 
-    public static record RegistryData<E>(ResourceKey<? extends Registry<E>> a, Codec<E> b, @Nullable Codec<E> c) {
-        private final ResourceKey<? extends Registry<E>> key;
-        private final Codec<E> codec;
-        @Nullable
-        private final Codec<E> networkCodec;
-
-        public RegistryData(ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec, @Nullable Codec<E> codec2) {
-            this.key = resourceKey;
-            this.codec = codec;
-            this.networkCodec = codec2;
-        }
-
+    public static record RegistryData<E>(ResourceKey<? extends Registry<E>> key, Codec<E> codec, @Nullable Codec<E> networkCodec) {
         public boolean sendToClient() {
             return this.networkCodec != null;
         }
-
-        public ResourceKey<? extends Registry<E>> key() {
-            return this.key;
-        }
-
-        public Codec<E> codec() {
-            return this.codec;
-        }
-
-        @Nullable
-        public Codec<E> networkCodec() {
-            return this.networkCodec;
-        }
     }
 
-    public static record RegistryEntry<T>(ResourceKey<? extends Registry<T>> a, Registry<T> b) {
-        final ResourceKey<? extends Registry<T>> key;
-        final Registry<T> value;
-
-        public RegistryEntry(ResourceKey<? extends Registry<T>> resourceKey, Registry<T> registry) {
-            this.key = resourceKey;
-            this.value = registry;
-        }
-
+    public static record RegistryEntry<T>(ResourceKey<? extends Registry<T>> key, Registry<T> value) {
         private static <T, R extends Registry<? extends T>> RegistryAccess.RegistryEntry<T> fromMapEntry(Entry<? extends ResourceKey<? extends Registry<?>>, R> entry) {
             return fromUntyped((ResourceKey)entry.getKey(), (Registry)entry.getValue());
         }
@@ -284,20 +247,12 @@ public interface RegistryAccess {
         }
 
         private static <T> RegistryAccess.RegistryEntry<T> fromUntyped(ResourceKey<? extends Registry<?>> resourceKey, Registry<?> registry) {
-            return new RegistryAccess.RegistryEntry<>(resourceKey, registry);
+            return new RegistryAccess.RegistryEntry(resourceKey, registry);
         }
 
         private RegistryAccess.RegistryEntry<T> freeze() {
             return new RegistryAccess.RegistryEntry<>(this.key, this.value.freeze());
         }
-
-        public ResourceKey<? extends Registry<T>> key() {
-            return this.key;
-        }
-
-        public Registry<T> value() {
-            return this.value;
-        }
     }
 
     public interface Writable extends RegistryAccess {
diff --git a/src/main/java/net/minecraft/core/RegistryCodecs.java b/src/main/java/net/minecraft/core/RegistryCodecs.java
index c06326d7140304d38e8d9f5771200540bcc820c2..36c0f9c5550097fb72dbad78776baf553983ac82 100644
--- a/src/main/java/net/minecraft/core/RegistryCodecs.java
+++ b/src/main/java/net/minecraft/core/RegistryCodecs.java
@@ -96,27 +96,6 @@ public class RegistryCodecs {
         return HolderSetCodec.create(resourceKey, RegistryFixedCodec.create(resourceKey), flag);
     }
 
-    static record RegistryEntry<T>(ResourceKey<T> a, int b, T c) {
-        private final ResourceKey<T> key;
-        private final int id;
-        private final T value;
-
-        RegistryEntry(ResourceKey<T> resourceKey, int i, T object) {
-            this.key = resourceKey;
-            this.id = i;
-            this.value = object;
-        }
-
-        public ResourceKey<T> key() {
-            return this.key;
-        }
-
-        public int id() {
-            return this.id;
-        }
-
-        public T value() {
-            return this.value;
-        }
+    static record RegistryEntry<T>(ResourceKey<T> key, int id, T value) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/core/particles/ParticleTypes.java b/src/main/java/net/minecraft/core/particles/ParticleTypes.java
index 3fe23a4976ea5f885a43a70b00ba5f40ac27b518..090ff25a63d34d9f183c94c73ab1c15c0946eac3 100644
--- a/src/main/java/net/minecraft/core/particles/ParticleTypes.java
+++ b/src/main/java/net/minecraft/core/particles/ParticleTypes.java
@@ -19,8 +19,8 @@ public class ParticleTypes {
     public static final SimpleParticleType LANDING_LAVA = register("landing_lava", false);
     public static final SimpleParticleType DRIPPING_WATER = register("dripping_water", false);
     public static final SimpleParticleType FALLING_WATER = register("falling_water", false);
-    public static final ParticleType<DustParticleOptions> DUST;
-    public static final ParticleType<DustColorTransitionOptions> DUST_COLOR_TRANSITION;
+    public static final ParticleType<DustParticleOptions> DUST = register("dust", DustParticleOptions.DESERIALIZER, (particleType) -> DustParticleOptions.CODEC);
+    public static final ParticleType<DustColorTransitionOptions> DUST_COLOR_TRANSITION = register("dust_color_transition", DustColorTransitionOptions.DESERIALIZER, (particleType) -> DustColorTransitionOptions.CODEC);
     public static final SimpleParticleType EFFECT = register("effect", false);
     public static final SimpleParticleType ELDER_GUARDIAN = register("elder_guardian", true);
     public static final SimpleParticleType ENCHANTED_HIT = register("enchanted_hit", false);
@@ -41,7 +41,7 @@ public class ParticleTypes {
     public static final SimpleParticleType HEART = register("heart", false);
     public static final SimpleParticleType INSTANT_EFFECT = register("instant_effect", false);
     public static final ParticleType<ItemParticleOption> ITEM = register("item", ItemParticleOption.DESERIALIZER, ItemParticleOption::codec);
-    public static final ParticleType<VibrationParticleOption> VIBRATION;
+    public static final ParticleType<VibrationParticleOption> VIBRATION = register("vibration", VibrationParticleOption.DESERIALIZER, (particleType) -> VibrationParticleOption.CODEC);
     public static final SimpleParticleType ITEM_SLIME = register("item_slime", false);
     public static final SimpleParticleType ITEM_SNOWBALL = register("item_snowball", false);
     public static final SimpleParticleType LARGE_SMOKE = register("large_smoke", false);
@@ -106,10 +106,4 @@ public class ParticleTypes {
             }
         });
     }
-
-    static {
-        DUST = register("dust", DustParticleOptions.DESERIALIZER, (particleType) -> DustParticleOptions.CODEC);
-        DUST_COLOR_TRANSITION = register("dust_color_transition", DustColorTransitionOptions.DESERIALIZER, (particleType) -> DustColorTransitionOptions.CODEC);
-        VIBRATION = register("vibration", VibrationParticleOption.DESERIALIZER, (particleType) -> VibrationParticleOption.CODEC);
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/BuiltinRegistries.java b/src/main/java/net/minecraft/data/BuiltinRegistries.java
index b4196a574b002c927c38921fb7eab80f1ea6706d..e9b010ee60c625276c6745854d8f35c70e372534 100644
--- a/src/main/java/net/minecraft/data/BuiltinRegistries.java
+++ b/src/main/java/net/minecraft/data/BuiltinRegistries.java
@@ -52,7 +52,7 @@ public class BuiltinRegistries {
     public static final Registry<NormalNoise.NoiseParameters> NOISE = registerSimple(Registry.NOISE_REGISTRY, NoiseData::bootstrap);
     public static final Registry<DensityFunction> DENSITY_FUNCTION = registerSimple(Registry.DENSITY_FUNCTION_REGISTRY, NoiseRouterData::bootstrap);
     public static final Registry<NoiseGeneratorSettings> NOISE_GENERATOR_SETTINGS = registerSimple(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, NoiseGeneratorSettings::bootstrap);
-    public static final RegistryAccess ACCESS = RegistryAccess.fromRegistryOfRegistries(REGISTRY);
+    public static final RegistryAccess ACCESS;
 
     private static <T> Registry<T> registerSimple(ResourceKey<? extends Registry<T>> resourceKey, Supplier<? extends Holder<? extends T>> supplier) {
         return registerSimple(resourceKey, Lifecycle.stable(), supplier);
@@ -65,12 +65,12 @@ public class BuiltinRegistries {
     private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> resourceKey, R writableRegistry, Supplier<? extends Holder<? extends T>> supplier, Lifecycle lifecycle) {
         ResourceLocation resourceLocation = resourceKey.location();
         LOADERS.put(resourceLocation, supplier);
-        WRITABLE_REGISTRY.register(resourceKey, writableRegistry, lifecycle);
+        WRITABLE_REGISTRY.register((ResourceKey) resourceKey, writableRegistry, lifecycle);
         return writableRegistry;
     }
 
     public static <V extends T, T> Holder<V> registerExact(Registry<T> registry, String s, V object) {
-        return register(registry, new ResourceLocation(s), (T)object);
+        return register((Registry) registry, new ResourceLocation(s), (T)object);
     }
 
     public static <T> Holder<T> register(Registry<T> registry, String s, T object) {
@@ -96,5 +96,6 @@ public class BuiltinRegistries {
 
         });
         Registry.checkRegistry(WRITABLE_REGISTRY);
+        ACCESS = RegistryAccess.fromRegistryOfRegistries(REGISTRY);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
index dd07c40b98c2d5e84e240bf5f1f94f3e4fecd06f..37fcd35d96cfb01a8c31174e0685574970a62496 100644
--- a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
+++ b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
@@ -35,14 +35,14 @@ public class RegistryDumpReport implements DataProvider {
             jsonObject.addProperty("default", resourceLocation.toString());
         }
 
-        int i = Registry.REGISTRY.getId(registry);
+        int i = ((Registry) Registry.REGISTRY).getId(registry);
         jsonObject.addProperty("protocol_id", i);
         JsonObject jsonObject2 = new JsonObject();
         registry.holders().forEach((reference) -> {
             T object = (T)reference.value();
-            int i = registry.getId(object);
-            JsonObject jsonObject2 = new JsonObject();
-            jsonObject2.addProperty("protocol_id", i);
+            int iIn = registry.getId(object);
+            JsonObject jsonObject2In = new JsonObject();
+            jsonObject2In.addProperty("protocol_id", iIn);
             jsonObject2.add(reference.key().location().toString(), jsonObject2);
         });
         jsonObject.add("entries", jsonObject2);
diff --git a/src/main/java/net/minecraft/data/models/BlockModelGenerators.java b/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
index b5cae59ce25c648a8c3189fc0727a1e82a565e72..5231a72d8c09766ca41ca596f60672816fb46a1a 100644
--- a/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
+++ b/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
@@ -69,15 +69,15 @@ public class BlockModelGenerators {
     final BiConsumer<ResourceLocation, Supplier<JsonElement>> modelOutput;
     private final Consumer<Item> skippedAutoModelsOutput;
     final List<Block> nonOrientableTrapdoor = ImmutableList.of(Blocks.OAK_TRAPDOOR, Blocks.DARK_OAK_TRAPDOOR, Blocks.IRON_TRAPDOOR);
-    final Map<Block, BlockModelGenerators.BlockStateGeneratorSupplier> fullBlockModelCustomGenerators = ImmutableMap.builder().put(Blocks.STONE, BlockModelGenerators::createMirroredCubeGenerator).put(Blocks.DEEPSLATE, BlockModelGenerators::createMirroredColumnGenerator).build();
-    final Map<Block, TexturedModel> texturedModels = ImmutableMap.builder().put(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.SANDSTONE)).put(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.RED_SANDSTONE)).put(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).put(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).put(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_SANDSTONE)))).put(Blocks.CUT_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.RED_SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_RED_SANDSTONE)))).put(Blocks.QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.QUARTZ_BLOCK)).put(Blocks.SMOOTH_QUARTZ, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.QUARTZ_BLOCK, "_bottom"))).put(Blocks.BLACKSTONE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.BLACKSTONE)).put(Blocks.DEEPSLATE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.DEEPSLATE)).put(Blocks.CHISELED_QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.CHISELED_QUARTZ_BLOCK).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_QUARTZ_BLOCK)))).put(Blocks.CHISELED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_SANDSTONE).updateTextures((textureMapping) -> {
+    final Map<Block, BlockModelGenerators.BlockStateGeneratorSupplier> fullBlockModelCustomGenerators = ImmutableMap.<Block, BlockModelGenerators.BlockStateGeneratorSupplier>builder().put(Blocks.STONE, BlockModelGenerators::createMirroredCubeGenerator).put(Blocks.DEEPSLATE, BlockModelGenerators::createMirroredColumnGenerator).build();
+    final Map<Block, TexturedModel> texturedModels = ImmutableMap.<Block, TexturedModel>builder().put(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.SANDSTONE)).put(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.RED_SANDSTONE)).put(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).put(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).put(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_SANDSTONE)))).put(Blocks.CUT_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.RED_SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_RED_SANDSTONE)))).put(Blocks.QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.QUARTZ_BLOCK)).put(Blocks.SMOOTH_QUARTZ, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.QUARTZ_BLOCK, "_bottom"))).put(Blocks.BLACKSTONE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.BLACKSTONE)).put(Blocks.DEEPSLATE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.DEEPSLATE)).put(Blocks.CHISELED_QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.CHISELED_QUARTZ_BLOCK).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_QUARTZ_BLOCK)))).put(Blocks.CHISELED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_SANDSTONE).updateTextures((textureMapping) -> {
         textureMapping.put(TextureSlot.END, TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"));
         textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_SANDSTONE));
     })).put(Blocks.CHISELED_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_RED_SANDSTONE).updateTextures((textureMapping) -> {
         textureMapping.put(TextureSlot.END, TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"));
         textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_RED_SANDSTONE));
     })).build();
-    static final Map<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>> SHAPE_CONSUMERS = ImmutableMap.builder().put(BlockFamily.Variant.BUTTON, BlockModelGenerators.BlockFamilyProvider::button).put(BlockFamily.Variant.DOOR, BlockModelGenerators.BlockFamilyProvider::door).put(BlockFamily.Variant.CHISELED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CRACKED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.FENCE, BlockModelGenerators.BlockFamilyProvider::fence).put(BlockFamily.Variant.FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::fenceGate).put(BlockFamily.Variant.SIGN, BlockModelGenerators.BlockFamilyProvider::sign).put(BlockFamily.Variant.SLAB, BlockModelGenerators.BlockFamilyProvider::slab).put(BlockFamily.Variant.STAIRS, BlockModelGenerators.BlockFamilyProvider::stairs).put(BlockFamily.Variant.PRESSURE_PLATE, BlockModelGenerators.BlockFamilyProvider::pressurePlate).put(BlockFamily.Variant.TRAPDOOR, BlockModelGenerators.BlockFamilyProvider::trapdoor).put(BlockFamily.Variant.WALL, BlockModelGenerators.BlockFamilyProvider::wall).build();
+    static final Map<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>> SHAPE_CONSUMERS = ImmutableMap.<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>>builder().put(BlockFamily.Variant.BUTTON, BlockModelGenerators.BlockFamilyProvider::button).put(BlockFamily.Variant.DOOR, BlockModelGenerators.BlockFamilyProvider::door).put(BlockFamily.Variant.CHISELED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CRACKED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.FENCE, BlockModelGenerators.BlockFamilyProvider::fence).put(BlockFamily.Variant.FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::fenceGate).put(BlockFamily.Variant.SIGN, BlockModelGenerators.BlockFamilyProvider::sign).put(BlockFamily.Variant.SLAB, BlockModelGenerators.BlockFamilyProvider::slab).put(BlockFamily.Variant.STAIRS, BlockModelGenerators.BlockFamilyProvider::stairs).put(BlockFamily.Variant.PRESSURE_PLATE, BlockModelGenerators.BlockFamilyProvider::pressurePlate).put(BlockFamily.Variant.TRAPDOOR, BlockModelGenerators.BlockFamilyProvider::trapdoor).put(BlockFamily.Variant.WALL, BlockModelGenerators.BlockFamilyProvider::wall).build();
     public static final Map<BooleanProperty, Function<ResourceLocation, Variant>> MULTIFACE_GENERATOR = Util.make(Maps.newHashMap(), (hashMap) -> {
         hashMap.put(BlockStateProperties.NORTH, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation));
         hashMap.put(BlockStateProperties.EAST, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true));
diff --git a/src/main/java/net/minecraft/data/models/blockstates/Selector.java b/src/main/java/net/minecraft/data/models/blockstates/Selector.java
index 1680f2a0b0d799933a7d099426148fe82dc84293..2b033e63fca12eb331bb130f45cc320b06949242 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/Selector.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/Selector.java
@@ -12,11 +12,11 @@ public final class Selector {
     private final List<Property.Value<?>> values;
 
     public Selector extend(Property.Value<?> value) {
-        return new Selector(ImmutableList.builder().addAll(this.values).add(value).build());
+        return new Selector(ImmutableList.<Property.Value<?>>builder().addAll(this.values).add(value).build());
     }
 
     public Selector extend(Selector selector) {
-        return new Selector(ImmutableList.builder().addAll(this.values).addAll(selector.values).build());
+        return new Selector(ImmutableList.<Property.Value<?>>builder().addAll(this.values).addAll(selector.values).build());
     }
 
     private Selector(List<Property.Value<?>> list) {
diff --git a/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java b/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
index 0175fa79e75a6dda6df00ee4f7bcb5d7c762fcc4..1d56e9173bf839b376659f8f24faa785be44ee58 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
@@ -4,11 +4,11 @@ import com.google.gson.JsonPrimitive;
 import net.minecraft.resources.ResourceLocation;
 
 public class VariantProperties {
-    public static final VariantProperty<VariantProperties.Rotation> X_ROT = new VariantProperty("x", (rotation) -> new JsonPrimitive(rotation.value));
-    public static final VariantProperty<VariantProperties.Rotation> Y_ROT = new VariantProperty("y", (rotation) -> new JsonPrimitive(rotation.value));
+    public static final VariantProperty<VariantProperties.Rotation> X_ROT = new VariantProperty<>("x", (rotation) -> new JsonPrimitive(rotation.value));
+    public static final VariantProperty<VariantProperties.Rotation> Y_ROT = new VariantProperty<>("y", (rotation) -> new JsonPrimitive(rotation.value));
     public static final VariantProperty<ResourceLocation> MODEL = new VariantProperty<>("model", (resourceLocation) -> new JsonPrimitive(resourceLocation.toString()));
-    public static final VariantProperty<Boolean> UV_LOCK = new VariantProperty("uvlock", JsonPrimitive::new);
-    public static final VariantProperty<Integer> WEIGHT = new VariantProperty("weight", JsonPrimitive::new);
+    public static final VariantProperty<Boolean> UV_LOCK = new VariantProperty<>("uvlock", JsonPrimitive::new);
+    public static final VariantProperty<Integer> WEIGHT = new VariantProperty<>("weight", JsonPrimitive::new);
 
     public static enum Rotation {
         R0(0),
diff --git a/src/main/java/net/minecraft/data/models/model/ModelTemplate.java b/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
index a90953b62ef3168e4f49cab6eb1fa3ce1f4ee2ad..68ea7b9aedb81b9d9087c7457274bac8a9253168 100644
--- a/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
+++ b/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
@@ -42,10 +42,10 @@ public class ModelTemplate {
         Map<TextureSlot, ResourceLocation> map = this.createMap(textureMapping);
         biConsumer.accept(resourceLocation, () -> {
             JsonObject jsonObject = new JsonObject();
-            this.model.ifPresent((resourceLocation) -> jsonObject.addProperty("parent", resourceLocation.toString()));
+            this.model.ifPresent((resourceLocationIn) -> jsonObject.addProperty("parent", resourceLocationIn.toString()));
             if (!map.isEmpty()) {
                 JsonObject jsonObject2 = new JsonObject();
-                map.forEach((textureSlot, resourceLocation) -> jsonObject2.addProperty(textureSlot.getId(), resourceLocation.toString()));
+                map.forEach((textureSlot, resourceLocationIn) -> jsonObject2.addProperty(textureSlot.getId(), resourceLocationIn.toString()));
                 jsonObject.add("textures", jsonObject2);
             }
 
@@ -55,6 +55,6 @@ public class ModelTemplate {
     }
 
     private Map<TextureSlot, ResourceLocation> createMap(TextureMapping textureMapping) {
-        return Streams.concat(new Stream[]{this.requiredSlots.stream(), textureMapping.getForced()}).collect(ImmutableMap.toImmutableMap(Function.identity(), textureMapping::get));
+        return (Map<TextureSlot, ResourceLocation>) Streams.concat(new Stream[]{this.requiredSlots.stream(), textureMapping.getForced()}).collect(ImmutableMap.toImmutableMap(Function.identity(), textureMapping::get));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/recipes/RecipeProvider.java b/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
index a2a479170b463f98a2742bd1c2ad3320140bffe0..8b9dbad948dcd63b8d12add9cc47503d1f65ac08 100644
--- a/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
+++ b/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
@@ -60,7 +60,7 @@ public class RecipeProvider implements DataProvider {
     private static final ImmutableList<ItemLike> REDSTONE_SMELTABLES = ImmutableList.of(Items.REDSTONE_ORE, Items.DEEPSLATE_REDSTONE_ORE);
     private static final ImmutableList<ItemLike> EMERALD_SMELTABLES = ImmutableList.of(Items.EMERALD_ORE, Items.DEEPSLATE_EMERALD_ORE);
     private final DataGenerator generator;
-    private static final Map<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>> shapeBuilders = ImmutableMap.builder().put(BlockFamily.Variant.BUTTON, (itemLike, itemLike2) -> buttonBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CHISELED, (itemLike, itemLike2) -> chiseledBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUT, (itemLike, itemLike2) -> cutBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.DOOR, (itemLike, itemLike2) -> doorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE, (itemLike, itemLike2) -> fenceBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE_GATE, (itemLike, itemLike2) -> fenceGateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SIGN, (itemLike, itemLike2) -> signBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SLAB, (itemLike, itemLike2) -> slabBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.STAIRS, (itemLike, itemLike2) -> stairBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.PRESSURE_PLATE, (itemLike, itemLike2) -> pressurePlateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.POLISHED, (itemLike, itemLike2) -> polishedBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.TRAPDOOR, (itemLike, itemLike2) -> trapdoorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.WALL, (itemLike, itemLike2) -> wallBuilder(itemLike, Ingredient.of(itemLike2))).build();
+    private static final Map<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>> shapeBuilders = ImmutableMap.<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>>builder().put(BlockFamily.Variant.BUTTON, (itemLike, itemLike2) -> buttonBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CHISELED, (itemLike, itemLike2) -> chiseledBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUT, (itemLike, itemLike2) -> cutBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.DOOR, (itemLike, itemLike2) -> doorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE, (itemLike, itemLike2) -> fenceBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE_GATE, (itemLike, itemLike2) -> fenceGateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SIGN, (itemLike, itemLike2) -> signBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SLAB, (itemLike, itemLike2) -> slabBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.STAIRS, (itemLike, itemLike2) -> stairBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.PRESSURE_PLATE, (itemLike, itemLike2) -> pressurePlateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.POLISHED, (itemLike, itemLike2) -> polishedBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.TRAPDOOR, (itemLike, itemLike2) -> trapdoorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.WALL, (itemLike, itemLike2) -> wallBuilder(itemLike, Ingredient.of(itemLike2))).build();
 
     public RecipeProvider(DataGenerator dataGenerator) {
         this.generator = dataGenerator;
@@ -1169,7 +1169,7 @@ public class RecipeProvider implements DataProvider {
     }
 
     private static void waxRecipes(Consumer<FinishedRecipe> consumer) {
-        ((BiMap)HoneycombItem.WAXABLES.get()).forEach((block, block2) -> ShapelessRecipeBuilder.shapeless(block2).requires(block).requires(Items.HONEYCOMB).group(getItemName(block2)).unlockedBy(getHasName(block), has(block)).save(consumer, getConversionRecipeName(block2, Items.HONEYCOMB)));
+        (HoneycombItem.WAXABLES.get()).forEach((block, block2) -> ShapelessRecipeBuilder.shapeless(block2).requires(block).requires(Items.HONEYCOMB).group(getItemName(block2)).unlockedBy(getHasName(block), has(block)).save(consumer, getConversionRecipeName(block2, Items.HONEYCOMB)));
     }
 
     private static void generateRecipes(Consumer<FinishedRecipe> consumer, BlockFamily blockFamily) {
diff --git a/src/main/java/net/minecraft/data/worldgen/placement/PlacementUtils.java b/src/main/java/net/minecraft/data/worldgen/placement/PlacementUtils.java
index f59634970605295e019f607bf33f3fbf9aca38b0..f57417b184189a4cc3e987b7efe14f48d9428199 100644
--- a/src/main/java/net/minecraft/data/worldgen/placement/PlacementUtils.java
+++ b/src/main/java/net/minecraft/data/worldgen/placement/PlacementUtils.java
@@ -73,7 +73,7 @@ public class PlacementUtils {
     }
 
     public static <FC extends FeatureConfiguration, F extends Feature<FC>> Holder<PlacedFeature> inlinePlaced(F feature, FC featureConfiguration, PlacementModifier... placementModifiers) {
-        return inlinePlaced(Holder.direct(new ConfiguredFeature(feature, featureConfiguration)), placementModifiers);
+        return inlinePlaced(Holder.direct(new ConfiguredFeature<>(feature, featureConfiguration)), placementModifiers);
     }
 
     public static <FC extends FeatureConfiguration, F extends Feature<FC>> Holder<PlacedFeature> onlyWhenEmpty(F feature, FC featureConfiguration) {
diff --git a/src/main/java/net/minecraft/data/worldgen/placement/VegetationPlacements.java b/src/main/java/net/minecraft/data/worldgen/placement/VegetationPlacements.java
index 5fbf4de33492b787d6fdeedeb759cca2076c416f..ff74f9bcce974514745623c3d5dbfc32c6e4b51a 100644
--- a/src/main/java/net/minecraft/data/worldgen/placement/VegetationPlacements.java
+++ b/src/main/java/net/minecraft/data/worldgen/placement/VegetationPlacements.java
@@ -122,7 +122,7 @@ public class VegetationPlacements {
     }
 
     private static Builder<PlacementModifier> treePlacementBase(PlacementModifier placementModifier) {
-        return ImmutableList.builder().add(placementModifier).add(InSquarePlacement.spread()).add(TREE_THRESHOLD).add(PlacementUtils.HEIGHTMAP_OCEAN_FLOOR).add(BiomeFilter.biome());
+        return ImmutableList.<PlacementModifier>builder().add(placementModifier).add(InSquarePlacement.spread()).add(TREE_THRESHOLD).add(PlacementUtils.HEIGHTMAP_OCEAN_FLOOR).add(BiomeFilter.biome());
     }
 
     public static List<PlacementModifier> treePlacement(PlacementModifier placementModifier) {
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java b/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
index 9737a8e7d6eb47221a9c72808942b7359059df05..c5df8bcdf9ad4db8ae05f7cfd46c72b3bf923fd3 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
@@ -31,8 +31,8 @@ public class GameTestBatchRunner {
         this.testTicker = gameTestTicker;
         this.testsPerRow = i;
         this.batches = collection.stream().map((gameTestBatch) -> {
-            Collection<GameTestInfo> collection = gameTestBatch.getTestFunctions().stream().map((testFunction) -> new GameTestInfo(testFunction, rotation, serverLevel)).collect(ImmutableList.toImmutableList());
-            return Pair.of(gameTestBatch, collection);
+            Collection<GameTestInfo> collectionIn = gameTestBatch.getTestFunctions().stream().map((testFunction) -> new GameTestInfo(testFunction, rotation, serverLevel)).collect(ImmutableList.toImmutableList());
+            return Pair.of(gameTestBatch, collectionIn);
         }).collect(ImmutableList.toImmutableList());
         this.allTestInfos = this.batches.stream().flatMap((pair) -> (pair.getSecond()).stream()).collect(ImmutableList.toImmutableList());
     }
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java b/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
index 6cd79453b0c7c1af7b2abee7f7848a9258095ea3..1264dc78c8b4a7f32e85d35aad09c2f9d20cf26d 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
@@ -51,7 +51,7 @@ public class GameTestRegistry {
         T annotation = method.getAnnotation(clazz);
         if (annotation != null) {
             String s = (String)function.apply(annotation);
-            Consumer<ServerLevel> consumer = map.putIfAbsent(s, turnMethodIntoConsumer(method));
+            Consumer<ServerLevel> consumer = map.putIfAbsent(s, (Consumer<ServerLevel>) turnMethodIntoConsumer(method));
             if (consumer != null) {
                 throw new RuntimeException("Hey, there should only be one " + clazz + " method per batch. Batch '" + s + "' has more than one!");
             }
@@ -101,7 +101,7 @@ public class GameTestRegistry {
     private static Collection<TestFunction> useTestGeneratorMethod(Method method) {
         try {
             Object object = method.getDeclaringClass().newInstance();
-            return method.invoke(object);
+            return (Collection<TestFunction>) method.invoke(object);
         } catch (ReflectiveOperationException var2) {
             throw new RuntimeException(var2);
         }
@@ -115,7 +115,7 @@ public class GameTestRegistry {
         String s4 = gameTest.template().isEmpty() ? s3 : s2 + "." + gameTest.template();
         String s5 = gameTest.batch();
         Rotation rotation = StructureUtils.getRotationForRotationSteps(gameTest.rotationSteps());
-        return new TestFunction(s5, s3, s4, rotation, gameTest.timeoutTicks(), gameTest.setupTicks(), gameTest.required(), gameTest.requiredSuccesses(), gameTest.attempts(), turnMethodIntoConsumer(method));
+        return new TestFunction(s5, s3, s4, rotation, gameTest.timeoutTicks(), gameTest.setupTicks(), gameTest.required(), gameTest.requiredSuccesses(), gameTest.attempts(), (Consumer<GameTestHelper>) turnMethodIntoConsumer(method));
     }
 
     private static Consumer<?> turnMethodIntoConsumer(Method method) {
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
index 2ead86691ef5d6df54092762bae1203a3975a9a3..a9abc4457cdf4b25660d2778818face49ca0d3ab 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
@@ -48,8 +48,8 @@ public class GameTestRunner {
             Consumer<ServerLevel> consumer = GameTestRegistry.getBeforeBatchFunction(s);
             Consumer<ServerLevel> consumer2 = GameTestRegistry.getAfterBatchFunction(s);
             MutableInt mutableInt = new MutableInt();
-            Collection<TestFunction> collection = entry.getValue();
-            return Streams.stream(Iterables.partition(collection, 100)).map((list) -> new GameTestBatch(s + ":" + mutableInt.incrementAndGet(), ImmutableList.copyOf(list), consumer, consumer2));
+            Collection<TestFunction> collectionIn = entry.getValue();
+            return Streams.stream(Iterables.partition(collectionIn, 100)).map((list) -> new GameTestBatch(s + ":" + mutableInt.incrementAndGet(), ImmutableList.copyOf(list), consumer, consumer2));
         }).collect(ImmutableList.toImmutableList());
     }
 
@@ -59,9 +59,9 @@ public class GameTestRunner {
         BlockPos blockPos3 = blockPos.offset(i, 0, i);
         BlockPos.betweenClosedStream(blockPos2, blockPos3).filter((blockPosx) -> serverLevel.getBlockState(blockPosx).is(Blocks.STRUCTURE_BLOCK)).forEach((blockPosx) -> {
             StructureBlockEntity structureBlockEntity = (StructureBlockEntity)serverLevel.getBlockEntity(blockPosx);
-            BlockPos blockPos2 = structureBlockEntity.getBlockPos();
+            BlockPos pos = structureBlockEntity.getBlockPos();
             BoundingBox boundingBox = StructureUtils.getStructureBoundingBox(structureBlockEntity);
-            StructureUtils.clearSpaceForStructure(boundingBox, blockPos2.getY(), serverLevel);
+            StructureUtils.clearSpaceForStructure(boundingBox, pos.getY(), serverLevel);
         });
     }
 
diff --git a/src/main/java/net/minecraft/nbt/NbtOps.java b/src/main/java/net/minecraft/nbt/NbtOps.java
index 8ecb1be8754d4ff11ed204c4e8aad7afd77c253f..7076200441c14904b79db40f1a164d284b708ae5 100644
--- a/src/main/java/net/minecraft/nbt/NbtOps.java
+++ b/src/main/java/net/minecraft/nbt/NbtOps.java
@@ -127,19 +127,19 @@ public class NbtOps implements DynamicOps<Tag> {
     private static <T extends Tag> void fillOne(CollectionTag<T> collectionTag, Tag tag, Tag tag2) {
         if (tag instanceof CollectionTag) {
             CollectionTag<?> collectionTag2 = (CollectionTag)tag;
-            collectionTag2.forEach((tagx) -> collectionTag.add(tagx));
+            collectionTag2.forEach((tagx) -> collectionTag.add((T) tagx));
         }
 
-        collectionTag.add(tag2);
+        collectionTag.add((T) tag2);
     }
 
     private static <T extends Tag> void fillMany(CollectionTag<T> collectionTag, Tag tag, List<Tag> list) {
         if (tag instanceof CollectionTag) {
             CollectionTag<?> collectionTag2 = (CollectionTag)tag;
-            collectionTag2.forEach((tagx) -> collectionTag.add(tagx));
+            collectionTag2.forEach((tagx) -> collectionTag.add((T) tagx));
         }
 
-        list.forEach((tagx) -> collectionTag.add(tagx));
+        list.forEach((tagx) -> collectionTag.add((T) tagx));
     }
 
     public DataResult<Tag> mergeToList(Tag tag, Tag tag2) {
@@ -191,11 +191,11 @@ public class NbtOps implements DynamicOps<Tag> {
 
             List<Tag> list = Lists.newArrayList();
             mapLike.entries().forEach((pair) -> {
-                Tag tag = (Tag)pair.getFirst();
-                if (!(tag instanceof StringTag)) {
-                    list.add(tag);
+                Tag tagIn = (Tag)pair.getFirst();
+                if (!(tagIn instanceof StringTag)) {
+                    list.add(tagIn);
                 } else {
-                    compoundTag.put(tag.getAsString(), (Tag)pair.getSecond());
+                    compoundTag.put(tagIn.getAsString(), (Tag)pair.getSecond());
                 }
             });
             return !list.isEmpty() ? DataResult.error("some keys are not strings: " + list, compoundTag) : DataResult.success(compoundTag);
@@ -267,7 +267,7 @@ public class NbtOps implements DynamicOps<Tag> {
     }
 
     public DataResult<ByteBuffer> getByteBuffer(Tag tag) {
-        return tag instanceof ByteArrayTag ? DataResult.success(ByteBuffer.wrap(((ByteArrayTag)tag).getAsByteArray())) : super.getByteBuffer(tag);
+        return tag instanceof ByteArrayTag ? DataResult.success(ByteBuffer.wrap(((ByteArrayTag)tag).getAsByteArray())) : DynamicOps.super.getByteBuffer(tag);
     }
 
     public Tag createByteList(ByteBuffer byteBuffer) {
@@ -275,7 +275,7 @@ public class NbtOps implements DynamicOps<Tag> {
     }
 
     public DataResult<IntStream> getIntStream(Tag tag) {
-        return tag instanceof IntArrayTag ? DataResult.success(Arrays.stream(((IntArrayTag)tag).getAsIntArray())) : super.getIntStream(tag);
+        return tag instanceof IntArrayTag ? DataResult.success(Arrays.stream(((IntArrayTag)tag).getAsIntArray())) : DynamicOps.super.getIntStream(tag);
     }
 
     public Tag createIntList(IntStream intStream) {
@@ -283,7 +283,7 @@ public class NbtOps implements DynamicOps<Tag> {
     }
 
     public DataResult<LongStream> getLongStream(Tag tag) {
-        return tag instanceof LongArrayTag ? DataResult.success(Arrays.stream(((LongArrayTag)tag).getAsLongArray())) : super.getLongStream(tag);
+        return tag instanceof LongArrayTag ? DataResult.success(Arrays.stream(((LongArrayTag)tag).getAsLongArray())) : DynamicOps.super.getLongStream(tag);
     }
 
     public Tag createLongList(LongStream longStream) {
diff --git a/src/main/java/net/minecraft/nbt/NbtUtils.java b/src/main/java/net/minecraft/nbt/NbtUtils.java
index 2f19d0e63f4d2abc5d0f47439aea2aed526625e3..1dc4002fa705a5bfb26c4376a98759bec40364ce 100644
--- a/src/main/java/net/minecraft/nbt/NbtUtils.java
+++ b/src/main/java/net/minecraft/nbt/NbtUtils.java
@@ -41,8 +41,8 @@ import net.minecraft.world.level.material.FluidState;
 import org.slf4j.Logger;
 
 public final class NbtUtils {
-    private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.comparingInt((listTag) -> listTag.getInt(1)).thenComparingInt((listTag) -> listTag.getInt(0)).thenComparingInt((listTag) -> listTag.getInt(2));
-    private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.comparingDouble((listTag) -> listTag.getDouble(1)).thenComparingDouble((listTag) -> listTag.getDouble(0)).thenComparingDouble((listTag) -> listTag.getDouble(2));
+    private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.<ListTag>comparingInt((listTag) -> listTag.getInt(1)).thenComparingInt((listTag) -> listTag.getInt(0)).thenComparingInt((listTag) -> listTag.getInt(2));
+    private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.<ListTag>comparingDouble((listTag) -> listTag.getDouble(1)).thenComparingDouble((listTag) -> listTag.getDouble(0)).thenComparingDouble((listTag) -> listTag.getDouble(2));
     public static final String SNBT_DATA_TAG = "data";
     private static final char PROPERTIES_START = '{';
     private static final char PROPERTIES_END = '}';
@@ -234,7 +234,7 @@ public final class NbtUtils {
     private static <S extends StateHolder<?, S>, T extends Comparable<T>> S setValueHelper(S stateHolder, Property<T> property, String s, CompoundTag compoundTag, CompoundTag compoundTag2) {
         Optional<T> optional = property.getValue(compoundTag.getString(s));
         if (optional.isPresent()) {
-            return stateHolder.setValue(property, (Comparable)optional.get());
+            return stateHolder.setValue(property, optional.get());
         } else {
             LOGGER.warn("Unable to read property: {} with value: {} for blockstate: {}", new Object[]{s, compoundTag.getString(s), compoundTag2.toString()});
             return stateHolder;
@@ -519,13 +519,13 @@ public final class NbtUtils {
             ListTag listTag4 = new ListTag();
             ListTag listTag5 = compoundTag.getList("palettes", 9);
             listTag5.stream().map(ListTag.class::cast).forEach((listTag3x) -> {
-                CompoundTag compoundTag = new CompoundTag();
+                CompoundTag compoundTagIn = new CompoundTag();
 
                 for(int i = 0; i < listTag3x.size(); ++i) {
-                    compoundTag.putString(listTag3.getString(i), packBlockState(listTag3x.getCompound(i)));
+                    compoundTagIn.putString(listTag3.getString(i), packBlockState(listTag3x.getCompound(i)));
                 }
 
-                listTag4.add(compoundTag);
+                listTag4.add(compoundTagIn);
             });
             compoundTag.put("palettes", listTag4);
         }
@@ -603,8 +603,8 @@ public final class NbtUtils {
             CompoundTag compoundTag2 = new CompoundTag();
             if (i + 2 <= s.length()) {
                 String s3 = s.substring(i + 1, s.indexOf(125, i));
-                COMMA_SPLITTER.split(s3).forEach((s2) -> {
-                    List<String> list = COLON_SPLITTER.splitToList(s2);
+                COMMA_SPLITTER.split(s3).forEach((s2x) -> {
+                    List<String> list = COLON_SPLITTER.splitToList(s2x);
                     if (list.size() == 2) {
                         compoundTag2.putString((String)list.get(0), (String)list.get(1));
                     } else {
diff --git a/src/main/java/net/minecraft/nbt/TagParser.java b/src/main/java/net/minecraft/nbt/TagParser.java
index 27590ee3be29818f7b751aa8c245f368abf4cdb6..443fb9f4c58e843d4f4ffe2f1a9321fec363e02d 100644
--- a/src/main/java/net/minecraft/nbt/TagParser.java
+++ b/src/main/java/net/minecraft/nbt/TagParser.java
@@ -235,11 +235,11 @@ public class TagParser {
                 }
 
                 if (tagType2 == ByteTag.TYPE) {
-                    list.add(((NumericTag)tag).getAsByte());
+                    list.add((T) (Object) ((NumericTag)tag).getAsByte());
                 } else if (tagType2 == LongTag.TYPE) {
-                    list.add(((NumericTag)tag).getAsLong());
+                    list.add((T) (Object) ((NumericTag)tag).getAsLong());
                 } else {
-                    list.add(((NumericTag)tag).getAsInt());
+                    list.add((T) (Object) ((NumericTag)tag).getAsInt());
                 }
 
                 if (this.hasElementSeparator()) {
diff --git a/src/main/java/net/minecraft/nbt/visitors/FieldSelector.java b/src/main/java/net/minecraft/nbt/visitors/FieldSelector.java
index f5e6e8671bc69a3a391f1f2be1c8f41ee033f37b..a41772d129801ebeb808640894977a0ca7270853 100644
--- a/src/main/java/net/minecraft/nbt/visitors/FieldSelector.java
+++ b/src/main/java/net/minecraft/nbt/visitors/FieldSelector.java
@@ -3,11 +3,7 @@ package net.minecraft.nbt.visitors;
 import java.util.List;
 import net.minecraft.nbt.TagType;
 
-public record FieldSelector(List<String> a, TagType<?> b, String c) {
-    private final List<String> path;
-    private final TagType<?> type;
-    private final String name;
-
+public record FieldSelector(List<String> path, TagType<?> type, String name) {
     public FieldSelector(TagType<?> type, String name) {
         this(List.of(), type, name);
     }
@@ -19,22 +15,4 @@ public record FieldSelector(List<String> a, TagType<?> b, String c) {
     public FieldSelector(String firstPath, String secondPath, TagType<?> type, String name) {
         this(List.of(firstPath, secondPath), type, name);
     }
-
-    public FieldSelector(List<String> list, TagType<?> tagType, String s) {
-        this.path = list;
-        this.type = tagType;
-        this.name = s;
-    }
-
-    public List<String> path() {
-        return this.path;
-    }
-
-    public TagType<?> type() {
-        return this.type;
-    }
-
-    public String name() {
-        return this.name;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/nbt/visitors/FieldTree.java b/src/main/java/net/minecraft/nbt/visitors/FieldTree.java
index ed868f8bd2b826c108980bd94a2237c27c03694e..e6bc09a5db572da1050de681b5b66b4fa9a59e4a 100644
--- a/src/main/java/net/minecraft/nbt/visitors/FieldTree.java
+++ b/src/main/java/net/minecraft/nbt/visitors/FieldTree.java
@@ -4,19 +4,9 @@ import java.util.HashMap;
 import java.util.Map;
 import net.minecraft.nbt.TagType;
 
-public record FieldTree(int a, Map<String, TagType<?>> b, Map<String, FieldTree> c) {
-    private final int depth;
-    private final Map<String, TagType<?>> selectedFields;
-    private final Map<String, FieldTree> fieldsToRecurse;
-
+public record FieldTree(int depth, Map<String, TagType<?>> selectedFields, Map<String, FieldTree> fieldsToRecurse) {
     private FieldTree(int depth) {
-        this(depth, new HashMap(), new HashMap());
-    }
-
-    public FieldTree(int i, Map<String, TagType<?>> map, Map<String, FieldTree> map2) {
-        this.depth = i;
-        this.selectedFields = map;
-        this.fieldsToRecurse = map2;
+        this(depth, new HashMap<>(), new HashMap<>());
     }
 
     public static FieldTree createRoot() {
@@ -35,16 +25,4 @@ public record FieldTree(int a, Map<String, TagType<?>> b, Map<String, FieldTree>
     public boolean isSelected(TagType<?> tagType, String s) {
         return tagType.equals(this.selectedFields().get(s));
     }
-
-    public int depth() {
-        return this.depth;
-    }
-
-    public Map<String, TagType<?>> selectedFields() {
-        return this.selectedFields;
-    }
-
-    public Map<String, FieldTree> fieldsToRecurse() {
-        return this.fieldsToRecurse;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/ConnectionProtocol.java b/src/main/java/net/minecraft/network/ConnectionProtocol.java
index 426ff47b140aa1ed85d5d3676628377a710c6de1..b066ba2b0403eb9ee5b38f81a3d77ac97244f5d5 100644
--- a/src/main/java/net/minecraft/network/ConnectionProtocol.java
+++ b/src/main/java/net/minecraft/network/ConnectionProtocol.java
@@ -16,6 +16,7 @@ import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket;
 import net.minecraft.network.protocol.game.ClientboundAddMobPacket;
@@ -118,6 +119,7 @@ import net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket;
+import net.minecraft.network.protocol.game.ServerGamePacketListener;
 import net.minecraft.network.protocol.game.ServerboundAcceptTeleportationPacket;
 import net.minecraft.network.protocol.game.ServerboundBlockEntityTagQuery;
 import net.minecraft.network.protocol.game.ServerboundChangeDifficultyPacket;
@@ -164,26 +166,31 @@ import net.minecraft.network.protocol.game.ServerboundTeleportToEntityPacket;
 import net.minecraft.network.protocol.game.ServerboundUseItemOnPacket;
 import net.minecraft.network.protocol.game.ServerboundUseItemPacket;
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
+import net.minecraft.network.protocol.handshake.ServerHandshakePacketListener;
+import net.minecraft.network.protocol.login.ClientLoginPacketListener;
 import net.minecraft.network.protocol.login.ClientboundCustomQueryPacket;
 import net.minecraft.network.protocol.login.ClientboundGameProfilePacket;
 import net.minecraft.network.protocol.login.ClientboundHelloPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginCompressionPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
+import net.minecraft.network.protocol.login.ServerLoginPacketListener;
 import net.minecraft.network.protocol.login.ServerboundCustomQueryPacket;
 import net.minecraft.network.protocol.login.ServerboundHelloPacket;
 import net.minecraft.network.protocol.login.ServerboundKeyPacket;
+import net.minecraft.network.protocol.status.ClientStatusPacketListener;
 import net.minecraft.network.protocol.status.ClientboundPongResponsePacket;
 import net.minecraft.network.protocol.status.ClientboundStatusResponsePacket;
+import net.minecraft.network.protocol.status.ServerStatusPacketListener;
 import net.minecraft.network.protocol.status.ServerboundPingRequestPacket;
 import net.minecraft.network.protocol.status.ServerboundStatusRequestPacket;
 import net.minecraft.util.VisibleForDebug;
 import org.slf4j.Logger;
 
 public enum ConnectionProtocol {
-    HANDSHAKING(-1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
-    PLAY(0, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddMobPacket.class, ClientboundAddMobPacket::new).addPacket(ClientboundAddPaintingPacket.class, ClientboundAddPaintingPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAddVibrationSignalPacket.class, ClientboundAddVibrationSignalPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockBreakAckPacket.class, ClientboundBlockBreakAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPacket.class, ClientboundChatPacket::new).addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkWithLightPacket.class, ClientboundLevelChunkWithLightPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new).addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new).addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new).addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new).addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new).addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new).addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new).addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetSimulationDistancePacket.class, ClientboundSetSimulationDistancePacket::new).addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new).addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read).addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
-    STATUS(1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
-    LOGIN(2, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
+    HANDSHAKING(-1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerHandshakePacketListener>()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
+    PLAY(0, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientGamePacketListener>()).addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAddMobPacket.class, ClientboundAddMobPacket::new).addPacket(ClientboundAddPaintingPacket.class, ClientboundAddPaintingPacket::new).addPacket(ClientboundAddPlayerPacket.class, ClientboundAddPlayerPacket::new).addPacket(ClientboundAddVibrationSignalPacket.class, ClientboundAddVibrationSignalPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockBreakAckPacket.class, ClientboundBlockBreakAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChatPacket.class, ClientboundChatPacket::new).addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundCustomSoundPacket.class, ClientboundCustomSoundPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkWithLightPacket.class, ClientboundLevelChunkWithLightPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new).addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new).addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new).addPacket(ClientboundPlayerInfoPacket.class, ClientboundPlayerInfoPacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new).addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new).addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new).addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new).addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new).addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetSimulationDistancePacket.class, ClientboundSetSimulationDistancePacket::new).addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new).addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerGamePacketListener>()).addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read).addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
+    STATUS(1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerStatusPacketListener>()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientStatusPacketListener>()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
+    LOGIN(2, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientLoginPacketListener>()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerLoginPacketListener>()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
 
     private static final int MIN_PROTOCOL_ID = -1;
     private static final int MAX_PROTOCOL_ID = 2;
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 34e7559b7e05c9752861c544b43ac93caa9b9d21..a8327d87373f23b88a4d471fc145e341a44466e7 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -148,7 +148,7 @@ public class FriendlyByteBuf extends ByteBuf {
 
     public void writeIntIdList(IntList intList) {
         this.writeVarInt(intList.size());
-        intList.forEach(this::writeVarInt);
+        intList.forEach((java.util.function.IntConsumer) this::writeVarInt);
     }
 
     public <K, V, M extends Map<K, V>> M readMap(IntFunction<M> intFunction, Function<FriendlyByteBuf, K> function, Function<FriendlyByteBuf, V> function2) {
diff --git a/src/main/java/net/minecraft/network/chat/ComponentUtils.java b/src/main/java/net/minecraft/network/chat/ComponentUtils.java
index cafc677fb15a93184de892845d45701b2f41bf15..fc4a5039b607c1644c1d715d171b642bd91c71d1 100644
--- a/src/main/java/net/minecraft/network/chat/ComponentUtils.java
+++ b/src/main/java/net/minecraft/network/chat/ComponentUtils.java
@@ -79,7 +79,7 @@ public class ComponentUtils {
         if (collection.isEmpty()) {
             return TextComponent.EMPTY;
         } else if (collection.size() == 1) {
-            return (Component)function.apply((Comparable)collection.iterator().next());
+            return (Component)function.apply(collection.iterator().next());
         } else {
             List<T> list = Lists.newArrayList(collection);
             list.sort(Comparable::compareTo);
diff --git a/src/main/java/net/minecraft/network/chat/NbtComponent.java b/src/main/java/net/minecraft/network/chat/NbtComponent.java
index e29370a3dc6b2f5993238478498f9e2663410788..623bf55a7fc8a03720f794f36ae32bfee9924b42 100644
--- a/src/main/java/net/minecraft/network/chat/NbtComponent.java
+++ b/src/main/java/net/minecraft/network/chat/NbtComponent.java
@@ -85,7 +85,7 @@ public abstract class NbtComponent extends BaseComponent implements ContextAware
                     }
                 }).reduce((mutableComponent, mutableComponent2) -> mutableComponent.append(component).append(mutableComponent2)).orElseGet(() -> new TextComponent(""));
             } else {
-                return (MutableComponent)ComponentUtils.updateForEntity(commandSourceStack, this.separator, entity, i).map((mutableComponent) -> (MutableComponent)stream.map((s) -> new TextComponent(s)).reduce((mutableComponent2, mutableComponent3) -> mutableComponent2.append(mutableComponent).append(mutableComponent3)).orElseGet(() -> new TextComponent(""))).orElseGet(() -> new TextComponent((String)stream.collect(Collectors.joining(", "))));
+                return (MutableComponent)ComponentUtils.updateForEntity(commandSourceStack, this.separator, entity, i).map((mutableComponent) -> stream.<MutableComponent>map(TextComponent::new).reduce((mutableComponent2, mutableComponent3) -> mutableComponent2.append(mutableComponent).append(mutableComponent3)).orElseGet(() -> new TextComponent(""))).orElseGet(() -> new TextComponent((String)stream.collect(Collectors.joining(", "))));
             }
         } else {
             return new TextComponent("");
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockBreakAckPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockBreakAckPacket.java
index df76799cc8474384a45592f2755b5967dc706764..a7ee2c462e0227d3723fe443ac5d03b618f77003 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockBreakAckPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockBreakAckPacket.java
@@ -8,23 +8,18 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import org.slf4j.Logger;
 
-public record ClientboundBlockBreakAckPacket(BlockPos a, BlockState b, ServerboundPlayerActionPacket.Action c, boolean d) implements Packet<ClientGamePacketListener> {
-    private final BlockPos pos;
-    private final BlockState state;
-    private final ServerboundPlayerActionPacket.Action action;
-    private final boolean allGood;
+public record ClientboundBlockBreakAckPacket(BlockPos pos, BlockState state, ServerboundPlayerActionPacket.Action action, boolean allGood) implements Packet<ClientGamePacketListener> {
     private static final Logger LOGGER = LogUtils.getLogger();
 
-    public ClientboundBlockBreakAckPacket(BlockPos blockPos, BlockState blockState, ServerboundPlayerActionPacket.Action action, boolean flag, String s) {
-        this(blockPos, blockState, action, flag);
+    public ClientboundBlockBreakAckPacket(BlockPos pos, BlockState state, ServerboundPlayerActionPacket.Action action, boolean allGood, String s) {
+        this(pos, state, action, allGood);
     }
 
-    public ClientboundBlockBreakAckPacket(BlockPos blockPos, BlockState blockState, ServerboundPlayerActionPacket.Action action, boolean flag) {
-        blockPos = blockPos.immutable();
-        this.pos = blockPos;
-        this.state = blockState;
+    public ClientboundBlockBreakAckPacket(BlockPos pos, BlockState state, ServerboundPlayerActionPacket.Action action, boolean allGood) {
+        this.pos = pos.immutable();
+        this.state = state;
         this.action = action;
-        this.allGood = flag;
+        this.allGood = allGood;
     }
 
     public ClientboundBlockBreakAckPacket(FriendlyByteBuf friendlyByteBuf) {
@@ -41,20 +36,4 @@ public record ClientboundBlockBreakAckPacket(BlockPos a, BlockState b, Serverbou
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleBlockBreakAck(this);
     }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public BlockState state() {
-        return this.state;
-    }
-
-    public ServerboundPlayerActionPacket.Action action() {
-        return this.action;
-    }
-
-    public boolean allGood() {
-        return this.allGood;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java
index 66d12356dcc6cec095b4ceda3681b381ae2232f6..df1e2efa4a3040e782fc051582cec59f97953101 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java
@@ -13,48 +13,11 @@ import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.dimension.DimensionType;
 
-public record ClientboundLoginPacket(int a, boolean b, GameType c, @Nullable GameType d, Set<ResourceKey<Level>> e, RegistryAccess.Frozen f, Holder<DimensionType> g, ResourceKey<Level> h, long i, int j, int k, int l, boolean m, boolean n, boolean o, boolean p) implements Packet<ClientGamePacketListener> {
-    private final int playerId;
-    private final boolean hardcore;
-    private final GameType gameType;
-    @Nullable
-    private final GameType previousGameType;
-    private final Set<ResourceKey<Level>> levels;
-    private final RegistryAccess.Frozen registryHolder;
-    private final Holder<DimensionType> dimensionType;
-    private final ResourceKey<Level> dimension;
-    private final long seed;
-    private final int maxPlayers;
-    private final int chunkRadius;
-    private final int simulationDistance;
-    private final boolean reducedDebugInfo;
-    private final boolean showDeathScreen;
-    private final boolean isDebug;
-    private final boolean isFlat;
-
+public record ClientboundLoginPacket(int playerId, boolean hardcore, GameType gameType, GameType previousGameType, Set<ResourceKey<Level>> levels, RegistryAccess.Frozen registryHolder, Holder<DimensionType> dimensionType, ResourceKey<Level> dimension, long seed, int maxPlayers, int chunkRadius, int simulationDistance, boolean reducedDebugInfo, boolean showDeathScreen, boolean isDebug, boolean isFlat) implements Packet<ClientGamePacketListener> {
     public ClientboundLoginPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readInt(), friendlyByteBuf.readBoolean(), GameType.byId(friendlyByteBuf.readByte()), GameType.byNullableId(friendlyByteBuf.readByte()), friendlyByteBuf.readCollection(Sets::newHashSetWithExpectedSize, (friendlyByteBufx) -> ResourceKey.create(Registry.DIMENSION_REGISTRY, friendlyByteBufx.readResourceLocation())), friendlyByteBuf.<RegistryAccess>readWithCodec(RegistryAccess.NETWORK_CODEC).freeze(), friendlyByteBuf.readWithCodec(DimensionType.CODEC), ResourceKey.create(Registry.DIMENSION_REGISTRY, friendlyByteBuf.readResourceLocation()), friendlyByteBuf.readLong(), friendlyByteBuf.readVarInt(), friendlyByteBuf.readVarInt(), friendlyByteBuf.readVarInt(), friendlyByteBuf.readBoolean(), friendlyByteBuf.readBoolean(), friendlyByteBuf.readBoolean(), friendlyByteBuf.readBoolean());
     }
 
-    public ClientboundLoginPacket(int i, boolean flag, GameType gameType, @Nullable GameType gameType2, Set<ResourceKey<Level>> set, RegistryAccess.Frozen frozen, Holder<DimensionType> holder, ResourceKey<Level> resourceKey, long l, int i2, int i3, int i4, boolean flag2, boolean flag3, boolean flag4, boolean flag5) {
-        this.playerId = i;
-        this.hardcore = flag;
-        this.gameType = gameType;
-        this.previousGameType = gameType2;
-        this.levels = set;
-        this.registryHolder = frozen;
-        this.dimensionType = holder;
-        this.dimension = resourceKey;
-        this.seed = l;
-        this.maxPlayers = i2;
-        this.chunkRadius = i3;
-        this.simulationDistance = i4;
-        this.reducedDebugInfo = flag2;
-        this.showDeathScreen = flag3;
-        this.isDebug = flag4;
-        this.isFlat = flag5;
-    }
-
     public void write(FriendlyByteBuf friendlyByteBuf) {
         friendlyByteBuf.writeInt(this.playerId);
         friendlyByteBuf.writeBoolean(this.hardcore);
@@ -77,69 +40,4 @@ public record ClientboundLoginPacket(int a, boolean b, GameType c, @Nullable Gam
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleLogin(this);
     }
-
-    public int playerId() {
-        return this.playerId;
-    }
-
-    public boolean hardcore() {
-        return this.hardcore;
-    }
-
-    public GameType gameType() {
-        return this.gameType;
-    }
-
-    @Nullable
-    public GameType previousGameType() {
-        return this.previousGameType;
-    }
-
-    public Set<ResourceKey<Level>> levels() {
-        return this.levels;
-    }
-
-    public RegistryAccess.Frozen registryHolder() {
-        return this.registryHolder;
-    }
-
-    public Holder<DimensionType> dimensionType() {
-        return this.dimensionType;
-    }
-
-    public ResourceKey<Level> dimension() {
-        return this.dimension;
-    }
-
-    public long seed() {
-        return this.seed;
-    }
-
-    public int maxPlayers() {
-        return this.maxPlayers;
-    }
-
-    public int chunkRadius() {
-        return this.chunkRadius;
-    }
-
-    public int simulationDistance() {
-        return this.simulationDistance;
-    }
-
-    public boolean reducedDebugInfo() {
-        return this.reducedDebugInfo;
-    }
-
-    public boolean showDeathScreen() {
-        return this.showDeathScreen;
-    }
-
-    public boolean isDebug() {
-        return this.isDebug;
-    }
-
-    public boolean isFlat() {
-        return this.isFlat;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java
index 5c3a1b3f8b20ba9610e194ea3322e06f3f4283b6..5bf2f4e4978a98178802dd71471ecb37685424df 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java
@@ -3,17 +3,11 @@ package net.minecraft.network.protocol.game;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundSetSimulationDistancePacket(int a) implements Packet<ClientGamePacketListener> {
-    private final int simulationDistance;
-
+public record ClientboundSetSimulationDistancePacket(int simulationDistance) implements Packet<ClientGamePacketListener> {
     public ClientboundSetSimulationDistancePacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readVarInt());
     }
 
-    public ClientboundSetSimulationDistancePacket(int i) {
-        this.simulationDistance = i;
-    }
-
     public void write(FriendlyByteBuf friendlyByteBuf) {
         friendlyByteBuf.writeVarInt(this.simulationDistance);
     }
@@ -21,8 +15,4 @@ public record ClientboundSetSimulationDistancePacket(int a) implements Packet<Cl
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleSetSimulationDistance(this);
     }
-
-    public int simulationDistance() {
-        return this.simulationDistance;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
index c387a395af335f2bb7395f068165c4d6b2ac5786..5ad7fd0596c3738dd03a2166ce94b4c39515114a 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
@@ -31,7 +31,7 @@ public class ClientboundUpdateAttributesPacket implements Packet<ClientGamePacke
             ResourceLocation resourceLocation = friendlyByteBufx.readResourceLocation();
             Attribute attribute = Registry.ATTRIBUTE.get(resourceLocation);
             double d = friendlyByteBufx.readDouble();
-            List<AttributeModifier> list = friendlyByteBufx.readList((friendlyByteBuf) -> new AttributeModifier(friendlyByteBuf.readUUID(), "Unknown synced attribute modifier", friendlyByteBuf.readDouble(), AttributeModifier.Operation.fromValue(friendlyByteBuf.readByte())));
+            List<AttributeModifier> list = friendlyByteBufx.readList((friendlyByteBufIn) -> new AttributeModifier(friendlyByteBufIn.readUUID(), "Unknown synced attribute modifier", friendlyByteBufIn.readDouble(), AttributeModifier.Operation.fromValue(friendlyByteBufIn.readByte())));
             return new ClientboundUpdateAttributesPacket.AttributeSnapshot(attribute, d, list);
         });
     }
@@ -41,10 +41,10 @@ public class ClientboundUpdateAttributesPacket implements Packet<ClientGamePacke
         friendlyByteBuf.writeCollection(this.attributes, (friendlyByteBufx, attributeSnapshot) -> {
             friendlyByteBufx.writeResourceLocation(Registry.ATTRIBUTE.getKey(attributeSnapshot.getAttribute()));
             friendlyByteBufx.writeDouble(attributeSnapshot.getBase());
-            friendlyByteBufx.writeCollection(attributeSnapshot.getModifiers(), (friendlyByteBuf, attributeModifier) -> {
-                friendlyByteBuf.writeUUID(attributeModifier.getId());
-                friendlyByteBuf.writeDouble(attributeModifier.getAmount());
-                friendlyByteBuf.writeByte(attributeModifier.getOperation().toValue());
+            friendlyByteBufx.writeCollection(attributeSnapshot.getModifiers(), (friendlyByteBufIn, attributeModifier) -> {
+                friendlyByteBufIn.writeUUID(attributeModifier.getId());
+                friendlyByteBufIn.writeDouble(attributeModifier.getAmount());
+                friendlyByteBufIn.writeByte(attributeModifier.getOperation().toValue());
             });
         });
     }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
index 6b2cffc664aa6729b92e3a4e229684540e692597..af60d0c1be5f61278c34ec3613b6bf49eddfac51 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
@@ -42,6 +42,6 @@ public class ClientboundUpdateRecipesPacket implements Packet<ClientGamePacketLi
     public static <T extends Recipe<?>> void toNetwork(FriendlyByteBuf friendlyByteBuf, T recipe) {
         friendlyByteBuf.writeResourceLocation(Registry.RECIPE_SERIALIZER.getKey(recipe.getSerializer()));
         friendlyByteBuf.writeResourceLocation(recipe.getId());
-        recipe.getSerializer().toNetwork(friendlyByteBuf, recipe);
+        ((RecipeSerializer) recipe.getSerializer()).toNetwork(friendlyByteBuf, recipe);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java
index d0df044b99eb6e6a508cdb999b19453dccb3d283..ee73458e5159ac7cadbd266519447068e05672e7 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java
@@ -5,30 +5,11 @@ import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.player.ChatVisiblity;
 
-public record ServerboundClientInformationPacket(String b, int c, ChatVisiblity d, boolean e, int f, HumanoidArm g, boolean h, boolean i) implements Packet<ServerGamePacketListener> {
-    private final String language;
-    private final int viewDistance;
-    private final ChatVisiblity chatVisibility;
-    private final boolean chatColors;
-    private final int modelCustomisation;
-    private final HumanoidArm mainHand;
-    private final boolean textFilteringEnabled;
-    private final boolean allowsListing;
+public record ServerboundClientInformationPacket(String language, int viewDistance, ChatVisiblity chatVisibility, boolean chatColors, int modelCustomisation, HumanoidArm mainHand, boolean textFilteringEnabled, boolean allowsListing) implements Packet<ServerGamePacketListener> {
     public static final int MAX_LANGUAGE_LENGTH = 16;
 
     public ServerboundClientInformationPacket(FriendlyByteBuf friendlyByteBuf) {
-        this(friendlyByteBuf.readUtf(16), friendlyByteBuf.readByte(), friendlyByteBuf.readEnum(ChatVisiblity.class), friendlyByteBuf.readBoolean(), friendlyByteBuf.readUnsignedByte(), friendlyByteBuf.readEnum(HumanoidArm.class), friendlyByteBuf.readBoolean(), friendlyByteBuf.readBoolean());
-    }
-
-    public ServerboundClientInformationPacket(String s, int i, ChatVisiblity chatVisiblity, boolean flag, int i2, HumanoidArm humanoidArm, boolean flag2, boolean flag3) {
-        this.language = s;
-        this.viewDistance = i;
-        this.chatVisibility = chatVisiblity;
-        this.chatColors = flag;
-        this.modelCustomisation = i2;
-        this.mainHand = humanoidArm;
-        this.textFilteringEnabled = flag2;
-        this.allowsListing = flag3;
+        this(friendlyByteBuf.readUtf(MAX_LANGUAGE_LENGTH), friendlyByteBuf.readByte(), friendlyByteBuf.readEnum(ChatVisiblity.class), friendlyByteBuf.readBoolean(), friendlyByteBuf.readUnsignedByte(), friendlyByteBuf.readEnum(HumanoidArm.class), friendlyByteBuf.readBoolean(), friendlyByteBuf.readBoolean());
     }
 
     public void write(FriendlyByteBuf friendlyByteBuf) {
@@ -45,36 +26,4 @@ public record ServerboundClientInformationPacket(String b, int c, ChatVisiblity
     public void handle(ServerGamePacketListener serverGamePacketListener) {
         serverGamePacketListener.handleClientInformation(this);
     }
-
-    public String language() {
-        return this.language;
-    }
-
-    public int viewDistance() {
-        return this.viewDistance;
-    }
-
-    public ChatVisiblity chatVisibility() {
-        return this.chatVisibility;
-    }
-
-    public boolean chatColors() {
-        return this.chatColors;
-    }
-
-    public int modelCustomisation() {
-        return this.modelCustomisation;
-    }
-
-    public HumanoidArm mainHand() {
-        return this.mainHand;
-    }
-
-    public boolean textFilteringEnabled() {
-        return this.textFilteringEnabled;
-    }
-
-    public boolean allowsListing() {
-        return this.allowsListing;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/resources/RegistryLoader.java b/src/main/java/net/minecraft/resources/RegistryLoader.java
index 3cdaa2262673aa0039d3f0f0468547fe092452ff..5e11c978a510d6632254218fa497dc0b18812366 100644
--- a/src/main/java/net/minecraft/resources/RegistryLoader.java
+++ b/src/main/java/net/minecraft/resources/RegistryLoader.java
@@ -74,15 +74,7 @@ public class RegistryLoader {
         return new RegistryLoader.Bound(writable, this);
     }
 
-    public static record Bound(RegistryAccess.Writable a, RegistryLoader b) {
-        private final RegistryAccess.Writable access;
-        private final RegistryLoader loader;
-
-        public Bound(RegistryAccess.Writable writable, RegistryLoader registryLoader) {
-            this.access = writable;
-            this.loader = registryLoader;
-        }
-
+    public static record Bound(RegistryAccess.Writable access, RegistryLoader loader) {
         public <E> DataResult<? extends Registry<E>> overrideRegistryFromResources(ResourceKey<? extends Registry<E>> resourceKey, Codec<E> codec, DynamicOps<JsonElement> dynamicOps) {
             WritableRegistry<E> writableRegistry = this.access.ownedWritableRegistryOrThrow(resourceKey);
             return this.loader.overrideRegistryFromResources(writableRegistry, resourceKey, codec, dynamicOps);
@@ -92,14 +84,6 @@ public class RegistryLoader {
             WritableRegistry<E> writableRegistry = this.access.ownedWritableRegistryOrThrow(resourceKey);
             return this.loader.overrideElementFromResources(writableRegistry, resourceKey, codec, resourceKey2, dynamicOps);
         }
-
-        public RegistryAccess.Writable access() {
-            return this.access;
-        }
-
-        public RegistryLoader loader() {
-            return this.loader;
-        }
     }
 
     static final class ReadCache<E> {
diff --git a/src/main/java/net/minecraft/resources/RegistryOps.java b/src/main/java/net/minecraft/resources/RegistryOps.java
index 008bf2217680acf83d17883b8a6bcbf75387756b..93c81ad3b73fd17e4192b09881d62b9aaa79fef6 100644
--- a/src/main/java/net/minecraft/resources/RegistryOps.java
+++ b/src/main/java/net/minecraft/resources/RegistryOps.java
@@ -35,7 +35,7 @@ public class RegistryOps<T> extends DelegatingOps<T> {
         super(dynamicOps);
         this.loader = optional;
         this.registryAccess = registryAccess;
-        this.asJson = dynamicOps == JsonOps.INSTANCE ? this : new RegistryOps(JsonOps.INSTANCE, registryAccess, optional);
+        this.asJson = dynamicOps == JsonOps.INSTANCE ? (DynamicOps<JsonElement>) this : new RegistryOps<>(JsonOps.INSTANCE, registryAccess, optional);
     }
 
     public <E> Optional<? extends Registry<E>> registry(ResourceKey<? extends Registry<? extends E>> resourceKey) {
@@ -51,9 +51,9 @@ public class RegistryOps<T> extends DelegatingOps<T> {
     }
 
     public static <E> MapCodec<Registry<E>> retrieveRegistry(ResourceKey<? extends Registry<? extends E>> resourceKey) {
-        return ExtraCodecs.retrieveContext((dynamicOps) -> {
+        return (MapCodec<Registry<E>>) ExtraCodecs.retrieveContext((dynamicOps) -> {
             if (dynamicOps instanceof RegistryOps) {
-                RegistryOps<?> registryOps = (RegistryOps)dynamicOps;
+                RegistryOps<?> registryOps = (RegistryOps<?>) dynamicOps;
                 return registryOps.registry(resourceKey).map((registry) -> DataResult.success(registry, registry.elementsLifecycle())).orElseGet(() -> DataResult.error("Unknown registry: " + resourceKey));
             } else {
                 return DataResult.error("Not a registry ops");
diff --git a/src/main/java/net/minecraft/resources/RegistryResourceAccess.java b/src/main/java/net/minecraft/resources/RegistryResourceAccess.java
index deec0ca1901c57612027f9fef3a00557f0038a9b..417632fb26c148340303b26fcd38b79e37ef55f7 100644
--- a/src/main/java/net/minecraft/resources/RegistryResourceAccess.java
+++ b/src/main/java/net/minecraft/resources/RegistryResourceAccess.java
@@ -134,42 +134,14 @@ public interface RegistryResourceAccess {
 
         public <E> Optional<DataResult<RegistryResourceAccess.ParsedEntry<E>>> parseElement(DynamicOps<JsonElement> dynamicOps, ResourceKey<? extends Registry<E>> resourceKey, ResourceKey<E> resourceKey2, Decoder<E> decoder) {
             RegistryResourceAccess.InMemoryStorage.Entry entry = (RegistryResourceAccess.InMemoryStorage.Entry)this.entries.get(resourceKey2);
-            return entry == null ? Optional.of(DataResult.error("Unknown element: " + resourceKey2)) : Optional.of(decoder.parse(dynamicOps, entry.data).setLifecycle(entry.lifecycle).map((object) -> RegistryResourceAccess.ParsedEntry.createWithId((int)object, entry.id)));
+            return entry == null ? Optional.of(DataResult.error("Unknown element: " + resourceKey2)) : Optional.of(decoder.parse(dynamicOps, entry.data).setLifecycle(entry.lifecycle).map((object) -> ParsedEntry.createWithId(object, entry.id)));
         }
 
-        static record Entry(JsonElement a, int b, Lifecycle c) {
-            final JsonElement data;
-            final int id;
-            final Lifecycle lifecycle;
-
-            Entry(JsonElement jsonElement, int i, Lifecycle lifecycle) {
-                this.data = jsonElement;
-                this.id = i;
-                this.lifecycle = lifecycle;
-            }
-
-            public JsonElement data() {
-                return this.data;
-            }
-
-            public int id() {
-                return this.id;
-            }
-
-            public Lifecycle lifecycle() {
-                return this.lifecycle;
-            }
+        static record Entry(JsonElement data, int id, Lifecycle lifecycle) {
         }
     }
 
-    public static record ParsedEntry<E>(E a, OptionalInt b) {
-        private final E value;
-        private final OptionalInt fixedId;
-
-        public ParsedEntry(E object, OptionalInt optionalInt) {
-            this.value = object;
-            this.fixedId = optionalInt;
-        }
+    public static record ParsedEntry<E>(E value, OptionalInt fixedId) {
 
         public static <E> RegistryResourceAccess.ParsedEntry<E> createWithoutId(E object) {
             return new RegistryResourceAccess.ParsedEntry<>(object, OptionalInt.empty());
@@ -178,13 +150,5 @@ public interface RegistryResourceAccess {
         public static <E> RegistryResourceAccess.ParsedEntry<E> createWithId(E object, int i) {
             return new RegistryResourceAccess.ParsedEntry<>(object, OptionalInt.of(i));
         }
-
-        public E value() {
-            return this.value;
-        }
-
-        public OptionalInt fixedId() {
-            return this.fixedId;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/resources/ResourceKey.java b/src/main/java/net/minecraft/resources/ResourceKey.java
index 4e0028e0c2b1be52899fadc7e889531916976ad2..6208807e35366da82705e35a39b287e0d9ccd497 100644
--- a/src/main/java/net/minecraft/resources/ResourceKey.java
+++ b/src/main/java/net/minecraft/resources/ResourceKey.java
@@ -44,7 +44,7 @@ public class ResourceKey<T> {
     }
 
     public <E> Optional<ResourceKey<E>> cast(ResourceKey<? extends Registry<E>> resourceKey) {
-        return this.isFor(resourceKey) ? Optional.of(this) : Optional.empty();
+        return this.isFor(resourceKey) ? Optional.of((ResourceKey<E>) this) : Optional.empty();
     }
 
     public ResourceLocation location() {
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index d5f079da34464ec8b9e234728a235c8f2f39e320..c4742a0799531fd9f5653d9907e23aba2d8b56f3 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -180,17 +180,17 @@ public class Main {
 
             levelStorageAccess.saveDataTag(frozen, worldData);
             final DedicatedServer dedicatedServer = MinecraftServer.spin((threadx) -> {
-                DedicatedServer dedicatedServer = new DedicatedServer(threadx, levelStorageAccess, packRepository, worldStem, dedicatedServerSettings, DataFixers.getDataFixer(), minecraftSessionService, gameProfileRepository, gameProfileCache, LoggerChunkProgressListener::new);
-                dedicatedServer.setSingleplayerName((String)optionSet.valueOf(optionSpec9));
-                dedicatedServer.setPort(optionSet.valueOf(optionSpec12));
-                dedicatedServer.setDemo(optionSet.has(optionSpec3));
-                dedicatedServer.setId((String)optionSet.valueOf(optionSpec13));
-                boolean flag = !optionSet.has(optionSpec) && !optionSet.valuesOf(optionSpec15).contains("nogui");
-                if (flag && !GraphicsEnvironment.isHeadless()) {
-                    dedicatedServer.showGui();
+                DedicatedServer dedicatedServerIn = new DedicatedServer(threadx, levelStorageAccess, packRepository, worldStem, dedicatedServerSettings, DataFixers.getDataFixer(), minecraftSessionService, gameProfileRepository, gameProfileCache, LoggerChunkProgressListener::new);
+                dedicatedServerIn.setSingleplayerName((String)optionSet.valueOf(optionSpec9));
+                dedicatedServerIn.setPort(optionSet.valueOf(optionSpec12));
+                dedicatedServerIn.setDemo(optionSet.has(optionSpec3));
+                dedicatedServerIn.setId((String)optionSet.valueOf(optionSpec13));
+                boolean nogui = !optionSet.has(optionSpec) && !optionSet.valuesOf(optionSpec15).contains("nogui");
+                if (nogui && !GraphicsEnvironment.isHeadless()) {
+                    dedicatedServerIn.showGui();
                 }
 
-                return dedicatedServer;
+                return dedicatedServerIn;
             });
             Thread thread = new Thread("Server Shutdown Thread") {
                 public void run() {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e7085b66e52c5500cced5194fdfb3bea0cf0f898..1ab884057a1c24e2b7e88758b799efd56e589786 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -772,7 +772,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
 
-    protected void doRunTask(TickTask tickTask) {
+    public void doRunTask(TickTask tickTask) {
         this.getProfiler().incrementCounter("runTask");
         super.doRunTask(tickTask);
     }
@@ -1273,7 +1273,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     public CompletableFuture<Void> reloadResources(Collection<String> collection) {
         RegistryAccess.Frozen frozen = this.registryAccess();
-        CompletableFuture<Void> completableFuture = CompletableFuture.supplyAsync(() -> (ImmutableList)collection.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()), this).thenCompose((immutableList) -> {
+        CompletableFuture<Void> completableFuture = CompletableFuture.supplyAsync(() -> collection.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()), this).thenCompose((immutableList) -> {
             CloseableResourceManager closeableResourceManager = new MultiPackResourceManager(PackType.SERVER_DATA, immutableList);
             return ReloadableServerResources.loadResources(closeableResourceManager, frozen, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this).whenComplete((reloadableServerResources, throwable) -> {
                 if (throwable != null) {
@@ -1755,26 +1755,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
 
-    static record ReloadableResources(CloseableResourceManager a, ReloadableServerResources b) implements AutoCloseable {
-        final CloseableResourceManager resourceManager;
-        final ReloadableServerResources managers;
-
-        ReloadableResources(CloseableResourceManager closeableResourceManager, ReloadableServerResources reloadableServerResources) {
-            this.resourceManager = closeableResourceManager;
-            this.managers = reloadableServerResources;
-        }
-
+    static record ReloadableResources(CloseableResourceManager resourceManager, ReloadableServerResources managers) implements AutoCloseable {
         public void close() {
             this.resourceManager.close();
         }
-
-        public CloseableResourceManager resourceManager() {
-            return this.resourceManager;
-        }
-
-        public ReloadableServerResources managers() {
-            return this.managers;
-        }
     }
 
     static class TimeProfiler {
diff --git a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
index cd54237a02ff0a183fb2d92b38540c540e21db77..edcbaab9e2d0e741d5dbde9532068263c03ca207 100644
--- a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
+++ b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
@@ -85,7 +85,7 @@ public class ServerFunctionLibrary implements PreparableReloadListener {
         return completableFuture.thenCombine(completableFuture2, Pair::of).thenCompose(preparationBarrier::wait).thenAcceptAsync((pair) -> {
             Map<ResourceLocation, CompletableFuture<CommandFunction>> map = pair.getSecond();
             Builder<ResourceLocation, CommandFunction> builder = ImmutableMap.builder();
-            map.forEach((resourceLocation, completableFuture) -> completableFuture.handle((commandFunction, throwable) -> {
+            map.forEach((resourceLocation, completableFutureIn) -> completableFutureIn.handle((commandFunction, throwable) -> {
                     if (throwable != null) {
                         LOGGER.error("Failed to load function {}", resourceLocation, throwable);
                     } else {
diff --git a/src/main/java/net/minecraft/server/WorldStem.java b/src/main/java/net/minecraft/server/WorldStem.java
index df378ee7ebc97f1b0c85cb838971cf6ba8624878..7c21dab8f26e8fe185076debe22306c2f7f8a5e8 100644
--- a/src/main/java/net/minecraft/server/WorldStem.java
+++ b/src/main/java/net/minecraft/server/WorldStem.java
@@ -21,19 +21,12 @@ import net.minecraft.world.level.DataPackConfig;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.WorldData;
 
-public record WorldStem(CloseableResourceManager a, ReloadableServerResources b, RegistryAccess.Frozen c, WorldData d) implements AutoCloseable {
-    private final CloseableResourceManager resourceManager;
-    private final ReloadableServerResources dataPackResources;
-    private final RegistryAccess.Frozen registryAccess;
-    private final WorldData worldData;
-
-    public WorldStem(CloseableResourceManager closeableResourceManager, ReloadableServerResources reloadableServerResources, RegistryAccess.Frozen frozen, WorldData worldData) {
-        this.resourceManager = closeableResourceManager;
-        this.dataPackResources = reloadableServerResources;
-        this.registryAccess = frozen;
-        this.worldData = worldData;
-    }
-
+public record WorldStem(
+        CloseableResourceManager resourceManager,
+        ReloadableServerResources dataPackResources,
+        RegistryAccess.Frozen registryAccess,
+        WorldData worldData
+) implements AutoCloseable {
     public static CompletableFuture<WorldStem> load(WorldStem.InitConfig initConfig, WorldStem.DataPackConfigSupplier dataPackConfigSupplier, WorldStem.WorldDataSupplier worldDataSupplier, Executor executor, Executor executor2) {
         try {
             DataPackConfig dataPackConfig = (DataPackConfig)dataPackConfigSupplier.get();
@@ -62,22 +55,6 @@ public record WorldStem(CloseableResourceManager a, ReloadableServerResources b,
         this.dataPackResources.updateRegistryTags(this.registryAccess);
     }
 
-    public CloseableResourceManager resourceManager() {
-        return this.resourceManager;
-    }
-
-    public ReloadableServerResources dataPackResources() {
-        return this.dataPackResources;
-    }
-
-    public RegistryAccess.Frozen registryAccess() {
-        return this.registryAccess;
-    }
-
-    public WorldData worldData() {
-        return this.worldData;
-    }
-
     @FunctionalInterface
     public interface DataPackConfigSupplier extends Supplier<DataPackConfig> {
         static WorldStem.DataPackConfigSupplier loadFromWorld(LevelStorageSource.LevelStorageAccess levelStorageAccess) {
@@ -92,34 +69,7 @@ public record WorldStem(CloseableResourceManager a, ReloadableServerResources b,
         }
     }
 
-    public static record InitConfig(PackRepository a, Commands.CommandSelection b, int c, boolean d) {
-        private final PackRepository packRepository;
-        private final Commands.CommandSelection commandSelection;
-        private final int functionCompilationLevel;
-        private final boolean safeMode;
-
-        public InitConfig(PackRepository packRepository, Commands.CommandSelection commandSelection, int i, boolean flag) {
-            this.packRepository = packRepository;
-            this.commandSelection = commandSelection;
-            this.functionCompilationLevel = i;
-            this.safeMode = flag;
-        }
-
-        public PackRepository packRepository() {
-            return this.packRepository;
-        }
-
-        public Commands.CommandSelection commandSelection() {
-            return this.commandSelection;
-        }
-
-        public int functionCompilationLevel() {
-            return this.functionCompilationLevel;
-        }
-
-        public boolean safeMode() {
-            return this.safeMode;
-        }
+    public static record InitConfig(PackRepository packRepository, Commands.CommandSelection commandSelection, int functionCompilationLevel, boolean safeMode) {
     }
 
     @FunctionalInterface
diff --git a/src/main/java/net/minecraft/server/chase/ChaseClient.java b/src/main/java/net/minecraft/server/chase/ChaseClient.java
index 09f6ee99ba0c9fa636aa9f40fa3e256912d7405f..a69cfa08ad788d483d31e6f565ea4d88f1876a39 100644
--- a/src/main/java/net/minecraft/server/chase/ChaseClient.java
+++ b/src/main/java/net/minecraft/server/chase/ChaseClient.java
@@ -173,27 +173,5 @@ public class ChaseClient {
         });
     }
 
-    static record TeleportTarget(ResourceKey<Level> a, Vec3 b, Vec2 c) {
-        final ResourceKey<Level> level;
-        final Vec3 pos;
-        final Vec2 rot;
-
-        TeleportTarget(ResourceKey<Level> resourceKey, Vec3 vec3, Vec2 vec2) {
-            this.level = resourceKey;
-            this.pos = vec3;
-            this.rot = vec2;
-        }
-
-        public ResourceKey<Level> level() {
-            return this.level;
-        }
-
-        public Vec3 pos() {
-            return this.pos;
-        }
-
-        public Vec2 rot() {
-            return this.rot;
-        }
-    }
+    static record TeleportTarget(ResourceKey<Level> level, Vec3 pos, Vec2 rot) {}
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/chase/ChaseServer.java b/src/main/java/net/minecraft/server/chase/ChaseServer.java
index 6e3f806940730bef22582606604407fd4d16afbb..a2e6d4a710759c812970bb980e83593347dfc1d6 100644
--- a/src/main/java/net/minecraft/server/chase/ChaseServer.java
+++ b/src/main/java/net/minecraft/server/chase/ChaseServer.java
@@ -142,49 +142,9 @@ public class ChaseServer {
         }
     }
 
-    static record PlayerPosition(String a, double b, double c, double d, float e, float f) {
-        private final String dimensionName;
-        private final double x;
-        private final double y;
-        private final double z;
-        private final float yRot;
-        private final float xRot;
-
-        PlayerPosition(String s, double d, double d2, double d3, float f, float f2) {
-            this.dimensionName = s;
-            this.x = d;
-            this.y = d2;
-            this.z = d3;
-            this.yRot = f;
-            this.xRot = f2;
-        }
-
+    static record PlayerPosition(String dimensionName, double x, double y, double z, float yRot, float xRot) {
         String format() {
             return String.format(Locale.ROOT, "t %s %.2f %.2f %.2f %.2f %.2f\n", this.dimensionName, this.x, this.y, this.z, this.yRot, this.xRot);
         }
-
-        public String dimensionName() {
-            return this.dimensionName;
-        }
-
-        public double x() {
-            return this.x;
-        }
-
-        public double y() {
-            return this.y;
-        }
-
-        public double z() {
-            return this.z;
-        }
-
-        public float yRot() {
-            return this.yRot;
-        }
-
-        public float xRot() {
-            return this.xRot;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/commands/EmoteCommands.java b/src/main/java/net/minecraft/server/commands/EmoteCommands.java
index b2328fb45da35d9074065809af9eab3d19cb79d3..f0ecdb23a104bd26c7f127a80540d40bbdab43a9 100644
--- a/src/main/java/net/minecraft/server/commands/EmoteCommands.java
+++ b/src/main/java/net/minecraft/server/commands/EmoteCommands.java
@@ -24,8 +24,8 @@ public class EmoteCommands {
                 if (entity instanceof ServerPlayer) {
                     ServerPlayer serverPlayer = (ServerPlayer)entity;
                     serverPlayer.getTextFilter().processStreamMessage(s).thenAcceptAsync((filteredText) -> {
-                        String s = filteredText.getFiltered();
-                        Component component = s.isEmpty() ? null : createMessage(commandContext, s);
+                        String textFiltered = filteredText.getFiltered();
+                        Component component = textFiltered.isEmpty() ? null : createMessage(commandContext, textFiltered);
                         Component component2 = createMessage(commandContext, filteredText.getRaw());
                         minecraftServer.getPlayerList().broadcastMessage(component2, (serverPlayer2) -> serverPlayer.shouldFilterMessageTo(serverPlayer2) ? component : component2, ChatType.CHAT, entity.getUUID());
                     }, minecraftServer);
diff --git a/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java b/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java
index 4e3fb0d3cd487a2b7b7d174823dd74c2ac8880b0..6b87533051cd445b4560c9e4bbc52066f4f5644d 100644
--- a/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ForceLoadCommand.java
@@ -67,7 +67,7 @@ public class ForceLoadCommand {
         ServerLevel serverLevel = commandSourceStack.getLevel();
         ResourceKey<Level> resourceKey = serverLevel.dimension();
         LongSet longSet = serverLevel.getForcedChunks();
-        longSet.forEach((l) -> serverLevel.setChunkForced(ChunkPos.getX(l), ChunkPos.getZ(l), false));
+        longSet.forEach((java.util.function.LongConsumer) (l) -> serverLevel.setChunkForced(ChunkPos.getX(l), ChunkPos.getZ(l), false));
         commandSourceStack.sendSuccess(new TranslatableComponent("commands.forceload.removed.all", resourceKey.location()), true);
         return 0;
     }
diff --git a/src/main/java/net/minecraft/server/commands/LocateCommand.java b/src/main/java/net/minecraft/server/commands/LocateCommand.java
index c9f1149be16caa9c61bc00649791be2c038f5ce4..882852860fab7106746f71a3c7741a71c5d18622 100644
--- a/src/main/java/net/minecraft/server/commands/LocateCommand.java
+++ b/src/main/java/net/minecraft/server/commands/LocateCommand.java
@@ -46,7 +46,7 @@ public class LocateCommand {
 
     public static int showLocateResult(CommandSourceStack commandSourceStack, ResourceOrTagLocationArgument.Result<?> result, BlockPos blockPos, Pair<BlockPos, ? extends Holder<?>> pair, String s) {
         BlockPos blockPos2 = (BlockPos)pair.getFirst();
-        String s2 = (String)result.unwrap().map((resourceKey) -> resourceKey.location().toString(), (tagKey) -> "#" + tagKey.location() + " (" + (String)((Holder)pair.getSecond()).unwrapKey().map((resourceKey) -> resourceKey.location().toString()).orElse("[unregistered]") + ")");
+        String s2 = (String)result.unwrap().map((resourceKey) -> resourceKey.location().toString(), (tagKey) -> "#" + tagKey.location() + " (" + pair.getSecond().unwrapKey().map((resourceKey) -> resourceKey.location().toString()).orElse("[unregistered]") + ")");
         int i = Mth.floor(dist(blockPos.getX(), blockPos.getZ(), blockPos2.getX(), blockPos2.getZ()));
         Component component = ComponentUtils.wrapInSquareBrackets(new TranslatableComponent("chat.coordinates", blockPos2.getX(), "~", blockPos2.getZ())).withStyle((style) -> style.withColor(ChatFormatting.GREEN).withClickEvent(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/tp @s " + blockPos2.getX() + " ~ " + blockPos2.getZ())).withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TranslatableComponent("chat.coordinates.tooltip"))));
         commandSourceStack.sendSuccess(new TranslatableComponent(s, s2, component, i), false);
diff --git a/src/main/java/net/minecraft/server/commands/data/DataCommands.java b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
index b4fcb4678ad94bbb293202a31a1015e473117d92..3c5c0b6c60359e459207dd791e9b3cf518ae4336 100644
--- a/src/main/java/net/minecraft/server/commands/data/DataCommands.java
+++ b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
@@ -119,7 +119,7 @@ public class DataCommands {
                 ArgumentBuilder<CommandSourceStack, ?> argumentBuilder2 = Commands.argument("targetPath", NbtPathArgument.nbtPath());
 
                 for(DataCommands.DataProvider dataProvider2 : SOURCE_PROVIDERS) {
-                    biConsumer.accept(argumentBuilder2, (DataCommands.DataManipulatorDecorator)(dataManipulator) -> dataProvider2.wrap(Commands.literal("from"), (argumentBuilder) -> argumentBuilder.executes((commandContext) -> {
+                    biConsumer.accept(argumentBuilder2, (DataCommands.DataManipulatorDecorator)(dataManipulator) -> dataProvider2.wrap(Commands.literal("from"), (argumentBuilderIn) -> argumentBuilderIn.executes((commandContext) -> {
                                 List<Tag> list = Collections.singletonList(dataProvider2.access(commandContext).getData());
                                 return manipulateData(commandContext, dataProvider, dataManipulator, list);
                             }).then(Commands.argument("sourcePath", NbtPathArgument.nbtPath()).executes((commandContext) -> {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index a31c97256109af9a2d7ef0642d731f4b5ad36542..c4962e2991729b80f9a6da31f952430b15e572ed 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -92,33 +92,6 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
         return this.worldGenSettings;
     }
 
-    public static record WorldGenProperties(String a, JsonObject b, boolean c, String d) {
-        private final String levelSeed;
-        private final JsonObject generatorSettings;
-        private final boolean generateStructures;
-        private final String levelType;
-
-        public WorldGenProperties(String s, JsonObject jsonObject, boolean flag, String s2) {
-            this.levelSeed = s;
-            this.generatorSettings = jsonObject;
-            this.generateStructures = flag;
-            this.levelType = s2;
-        }
-
-        public String levelSeed() {
-            return this.levelSeed;
-        }
-
-        public JsonObject generatorSettings() {
-            return this.generatorSettings;
-        }
-
-        public boolean generateStructures() {
-            return this.generateStructures;
-        }
-
-        public String levelType() {
-            return this.levelType;
-        }
+    public static record WorldGenProperties(String levelSeed, JsonObject generatorSettings, boolean generateStructures, String levelType) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index 945e8be448a1b52511562e4a3b51bb6b8ea49457..ffd4ee5ee4d86096227076a81ed848747c6efabd 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -85,7 +85,7 @@ public abstract class Settings<T extends Settings<T>> {
     private static <V extends Number> Function<String, V> wrapNumberDeserializer(Function<String, V> function) {
         return (s) -> {
             try {
-                return (Number)function.apply(s);
+                return function.apply(s);
             } catch (NumberFormatException var3) {
                 return null;
             }
@@ -129,13 +129,13 @@ public abstract class Settings<T extends Settings<T>> {
         String s2 = this.getStringRaw(s);
         V object2 = (V)MoreObjects.firstNonNull(s2 != null ? function.apply(s2) : null, object);
         this.properties.put(s, function2.apply(object2));
-        return new Settings.MutableValue<>(s, object2, function2);
+        return new Settings.MutableValue(s, object2, function2);
     }
 
     protected <V> V get(String s, Function<String, V> function, UnaryOperator<V> unaryOperator, Function<V, String> function2, V object) {
         return this.get(s, (sx) -> {
-            V object = (V)function.apply(sx);
-            return object != null ? unaryOperator.apply(object) : null;
+            V o = (V)function.apply(sx);
+            return o != null ? unaryOperator.apply(o) : null;
         }, function2, object);
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index c003b1b02bfad11a6264dc5537072e30ca1c7220..81bb9a666c8dca800003a2f97cba4526b8b2bf6b 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -275,7 +275,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
         CompletableFuture<List<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> completableFuture2 = Util.sequence(list);
         CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completableFuture3 = completableFuture2.thenApply((listx) -> {
-            List<ChunkAccess> list2 = Lists.newArrayList();
+            List<ChunkAccess> list2In = Lists.newArrayList();
             int i4 = 0;
 
             for(final Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either : listx) {
@@ -293,11 +293,11 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                     });
                 }
 
-                list2.add((ChunkAccess)optional.get());
+                list2In.add((ChunkAccess)optional.get());
                 ++i4;
             }
 
-            return Either.left(list2);
+            return Either.left(list2In);
         });
 
         for(ChunkHolder chunkHolder2 : list2) {
@@ -558,11 +558,11 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completableFuture = this.getChunkRangeFuture(chunkPos, chunkStatus.getRange(), (i) -> this.getDependencyStatus(chunkStatus, i));
         this.level.getProfiler().incrementCounter((Supplier<String>)(() -> "chunkGenerate " + chunkStatus.getName()));
         Executor executor = (runnable) -> this.worldgenMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkHolder, runnable));
-        return completableFuture.thenComposeAsync((either) -> (CompletionStage)either.map((list) -> {
+        return completableFuture.thenComposeAsync((either) -> either.map((list) -> {
                 try {
-                    CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture = chunkStatus.generate(executor, this.level, this.generator, this.structureManager, this.lightEngine, (chunkAccess) -> this.protoChunkToFullChunk(chunkHolder), list, false);
+                    CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFutureIn = chunkStatus.generate(executor, this.level, this.generator, this.structureManager, this.lightEngine, (chunkAccess) -> this.protoChunkToFullChunk(chunkHolder), list, false);
                     this.progressListener.onStatusChange(chunkPos, chunkStatus);
-                    return completableFuture;
+                    return completableFutureIn;
                 } catch (Exception var9) {
                     var9.getStackTrace();
                     CrashReport crashReport = CrashReport.forThrowable(var9, "Exception generating new chunk");
@@ -614,7 +614,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 if (protoChunk instanceof ImposterProtoChunk) {
                     levelChunk = ((ImposterProtoChunk)protoChunk).getWrapped();
                 } else {
-                    levelChunk = new LevelChunk(this.level, protoChunk, (levelChunk) -> postLoadProtoChunk(this.level, protoChunk.getEntities()));
+                    levelChunk = new LevelChunk(this.level, protoChunk, (levelChunkIn) -> postLoadProtoChunk(this.level, protoChunk.getEntities()));
                     chunkHolder.replaceProtoChunk(new ImposterProtoChunk(levelChunk, false));
                 }
 
@@ -919,7 +919,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             }
         }
 
-        int i = SectionPos.blockToSectionCoord(serverPlayer.getBlockX());
+        int iIn = SectionPos.blockToSectionCoord(serverPlayer.getBlockX());
         int i2 = SectionPos.blockToSectionCoord(serverPlayer.getBlockZ());
         SectionPos sectionPos = serverPlayer.getLastSectionPos();
         SectionPos sectionPos2 = SectionPos.of(serverPlayer);
@@ -953,16 +953,16 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
         int i3 = sectionPos.x();
         int i4 = sectionPos.z();
-        if (Math.abs(i3 - i) <= this.viewDistance * 2 && Math.abs(i4 - i2) <= this.viewDistance * 2) {
-            int i5 = Math.min(i, i3) - this.viewDistance - 1;
+        if (Math.abs(i3 - iIn) <= this.viewDistance * 2 && Math.abs(i4 - i2) <= this.viewDistance * 2) {
+            int i5 = Math.min(iIn, i3) - this.viewDistance - 1;
             int i6 = Math.min(i2, i4) - this.viewDistance - 1;
-            int i7 = Math.max(i, i3) + this.viewDistance + 1;
+            int i7 = Math.max(iIn, i3) + this.viewDistance + 1;
             int i8 = Math.max(i2, i4) + this.viewDistance + 1;
 
             for(int i9 = i5; i9 <= i7; ++i9) {
                 for(int i10 = i6; i10 <= i8; ++i10) {
                     boolean flag4 = isChunkInRange(i9, i10, i3, i4, this.viewDistance);
-                    boolean flag5 = isChunkInRange(i9, i10, i, i2, this.viewDistance);
+                    boolean flag5 = isChunkInRange(i9, i10, iIn, i2, this.viewDistance);
                     this.updateChunkTracking(serverPlayer, new ChunkPos(i9, i10), new MutableObject(), flag4, flag5);
                 }
             }
@@ -977,9 +977,9 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 }
             }
 
-            for(int i13 = i - this.viewDistance - 1; i13 <= i + this.viewDistance + 1; ++i13) {
+            for(int i13 = iIn - this.viewDistance - 1; i13 <= iIn + this.viewDistance + 1; ++i13) {
                 for(int i14 = i2 - this.viewDistance - 1; i14 <= i2 + this.viewDistance + 1; ++i14) {
-                    if (isChunkInRange(i13, i14, i, i2, this.viewDistance)) {
+                    if (isChunkInRange(i13, i14, iIn, i2, this.viewDistance)) {
                         boolean flag8 = false;
                         boolean flag9 = true;
                         this.updateChunkTracking(serverPlayer, new ChunkPos(i13, i14), new MutableObject(), false, true);
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
index eec3d990ced630be3e153dda0ba32b2ceb82f489..b42bdefb9648aa7a6ef057b366a6fac11521ab66 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
@@ -16,7 +16,7 @@ import net.minecraft.world.level.ChunkPos;
 
 public class ChunkTaskPriorityQueue<T> {
     public static final int PRIORITY_LEVEL_COUNT = ChunkMap.MAX_CHUNK_DISTANCE + 2;
-    private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue = IntStream.range(0, PRIORITY_LEVEL_COUNT).mapToObj((ix) -> new Long2ObjectLinkedOpenHashMap()).collect(Collectors.toList());
+    private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue = IntStream.range(0, PRIORITY_LEVEL_COUNT).mapToObj((ix) -> new Long2ObjectLinkedOpenHashMap<List<Optional<T>>>()).collect(Collectors.toList());
     private volatile int firstQueue = PRIORITY_LEVEL_COUNT;
     private final String name;
     private final LongSet acquired = new LongOpenHashSet();
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
index f387b3a28c194ae1c3b08bd1d76145ea285631c9..95f9813ab912e1ff7e9f9a726e4c34af8a1d7515 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
@@ -44,7 +44,7 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
     }
 
     public static ChunkTaskPriorityQueueSorter.Message<Runnable> message(Runnable runnable, long l, IntSupplier intSupplier) {
-        return new ChunkTaskPriorityQueueSorter.Message((processorHandle) -> () -> {
+        return new ChunkTaskPriorityQueueSorter.Message<>((processorHandle) -> () -> {
                 runnable.run();
                 processorHandle.tell(Unit.INSTANCE);
             }, l, intSupplier);
@@ -65,12 +65,12 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
     public <T> ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<T>> getProcessor(ProcessorHandle<T> processorHandle, boolean flag) {
         return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> {
                 this.getQueue(processorHandle);
-                processorHandle2.tell(ProcessorHandle.of("chunk priority sorter around " + processorHandle.name(), (message) -> this.submit(processorHandle, message.task, message.pos, message.level, flag)));
+                processorHandle2.tell(ProcessorHandle.<Message<T>>of("chunk priority sorter around " + processorHandle.name(), (message) -> this.submit(processorHandle, message.task, message.pos, message.level, flag)));
             })).join();
     }
 
     public ProcessorHandle<ChunkTaskPriorityQueueSorter.Release> getReleaseProcessor(ProcessorHandle<Runnable> processorHandle) {
-        return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> processorHandle2.tell(ProcessorHandle.of("chunk priority sorter around " + processorHandle.name(), (release) -> this.release(processorHandle, release.pos, release.task, release.clearQueue))))).join();
+        return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> processorHandle2.tell(ProcessorHandle.<Release>of("chunk priority sorter around " + processorHandle.name(), (release) -> this.release(processorHandle, release.pos, release.task, release.clearQueue))))).join();
     }
 
     public void onLevelChange(ChunkPos chunkPos, IntSupplier intSupplier, int i, IntConsumer intConsumer) {
@@ -127,9 +127,9 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
     private <T> ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>> getQueue(ProcessorHandle<T> processorHandle) {
         ChunkTaskPriorityQueue<? extends Function<ProcessorHandle<Unit>, ?>> chunkTaskPriorityQueue = (ChunkTaskPriorityQueue)this.queues.get(processorHandle);
         if (chunkTaskPriorityQueue == null) {
-            throw (IllegalArgumentException)Util.pauseInIde((T)(new IllegalArgumentException("No queue for: " + processorHandle)));
+            throw Util.pauseInIde(new IllegalArgumentException("No queue for: " + processorHandle));
         } else {
-            return chunkTaskPriorityQueue;
+            return (ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>>) chunkTaskPriorityQueue;
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/level/DistanceManager.java b/src/main/java/net/minecraft/server/level/DistanceManager.java
index 480df96b683442c4662758c56a5b1903f44d7c06..257b47a65a12feea5e8a90cf54602f72e3c1b2dd 100644
--- a/src/main/java/net/minecraft/server/level/DistanceManager.java
+++ b/src/main/java/net/minecraft/server/level/DistanceManager.java
@@ -287,7 +287,7 @@ public abstract class DistanceManager {
                     Entry<SortedArraySet<Ticket<?>>> entry = (Entry)var3.next();
                     ChunkPos chunkPos = new ChunkPos(entry.getLongKey());
 
-                    for(Ticket<?> ticket : (SortedArraySet)entry.getValue()) {
+                    for(Ticket<?> ticket : entry.getValue()) {
                         fileOutputStream.write((chunkPos.x + "\t" + chunkPos.z + "\t" + ticket.getType() + "\t" + ticket.getTicketLevel() + "\t\n").getBytes(StandardCharsets.UTF_8));
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 799d6b6800b91f2223ce554fd95662c3a4570321..abbf3939685c67e8d5b38a765e3a7b4548844c5f 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -187,7 +187,7 @@ public class ServerChunkCache extends ChunkSource {
             completableFuture = this.getChunkFutureMainThread(i, i2, chunkStatus, flag);
             this.mainThreadProcessor.managedBlock(completableFuture::isDone);
         } else {
-            completableFuture = CompletableFuture.supplyAsync(() -> this.getChunkFutureMainThread(i, i2, chunkStatus, flag), this.mainThreadProcessor).thenCompose((completableFuture) -> completableFuture);
+            completableFuture = CompletableFuture.supplyAsync(() -> this.getChunkFutureMainThread(i, i2, chunkStatus, flag), this.mainThreadProcessor).thenCompose((completableFutureIn) -> completableFutureIn);
         }
 
         return completableFuture;
@@ -484,23 +484,7 @@ public class ServerChunkCache extends ChunkSource {
         this.distanceManager.removeTicketsOnClosing();
     }
 
-    static record ChunkAndHolder(LevelChunk a, ChunkHolder b) {
-        final LevelChunk chunk;
-        final ChunkHolder holder;
-
-        ChunkAndHolder(LevelChunk levelChunk, ChunkHolder chunkHolder) {
-            this.chunk = levelChunk;
-            this.holder = chunkHolder;
-        }
-
-        public LevelChunk chunk() {
-            return this.chunk;
-        }
-
-        public ChunkHolder holder() {
-            return this.holder;
-        }
-    }
+    static record ChunkAndHolder(LevelChunk chunk, ChunkHolder holder) {}
 
     final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
         MainThreadExecutor(Level level) {
@@ -528,7 +512,7 @@ public class ServerChunkCache extends ChunkSource {
             super.doRunTask(runnable);
         }
 
-        protected boolean pollTask() {
+        public boolean pollTask() {
             if (ServerChunkCache.this.runDistanceManagerUpdates()) {
                 return true;
             } else {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 961244e3d8660e05b82825616db847ad5b5585ee..ca6bfb54ea1a7fba9107e1853c4c4453e8d2b1c7 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1366,7 +1366,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 object2IntOpenHashMap.addTo(s, 1);
             }
 
-            return (String)object2IntOpenHashMap.object2IntEntrySet().stream().sorted(Comparator.comparing(Entry::getIntValue).reversed()).limit(5L).map((entry) -> (String)entry.getKey() + ":" + entry.getIntValue()).collect(Collectors.joining(","));
+            return (String)object2IntOpenHashMap.object2IntEntrySet().stream().sorted(Comparator.<Entry<String>, Integer>comparing(Entry::getIntValue).reversed()).limit(5L).map((entry) -> (String)entry.getKey() + ":" + entry.getIntValue()).collect(Collectors.joining(","));
         } catch (Exception var6) {
             return "";
         }
diff --git a/src/main/java/net/minecraft/server/level/Ticket.java b/src/main/java/net/minecraft/server/level/Ticket.java
index e8d64341efcb1f109c88d2ac6043c79b54766425..06deecab338c9cbc67c29e129531fedbd1a62877 100644
--- a/src/main/java/net/minecraft/server/level/Ticket.java
+++ b/src/main/java/net/minecraft/server/level/Ticket.java
@@ -20,7 +20,7 @@ public final class Ticket<T> implements Comparable<Ticket<?>> {
             return i;
         } else {
             int i2 = Integer.compare(System.identityHashCode(this.type), System.identityHashCode(ticket.type));
-            return i2 != 0 ? i2 : this.type.getComparator().compare(this.key, ticket.key);
+            return i2 != 0 ? i2 : this.type.getComparator().compare(this.key, (T) ticket.key);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/level/TickingTracker.java b/src/main/java/net/minecraft/server/level/TickingTracker.java
index b69f662d756fa09c941882f6507dc0e5123c60d7..954f0f717e1e7fff201531f776905029c8470d42 100644
--- a/src/main/java/net/minecraft/server/level/TickingTracker.java
+++ b/src/main/java/net/minecraft/server/level/TickingTracker.java
@@ -65,9 +65,9 @@ public class TickingTracker extends ChunkTracker {
         while(var3.hasNext()) {
             Entry<SortedArraySet<Ticket<?>>> entry = (Entry)var3.next();
 
-            for(Ticket<?> ticket : (SortedArraySet)entry.getValue()) {
+            for(Ticket<?> ticket : entry.getValue()) {
                 if (ticket.getType() == TicketType.PLAYER) {
-                    list.add(Pair.of(ticket, entry.getLongKey()));
+                    list.add(Pair.of((Ticket<ChunkPos>) ticket, entry.getLongKey()));
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/packs/FolderPackResources.java b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
index fc7d076ea497956f42b1989e45584c434c963c96..28e0a1ad5add0ec9d5818973d8d4f6d5faa8406a 100644
--- a/src/main/java/net/minecraft/server/packs/FolderPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/FolderPackResources.java
@@ -5,6 +5,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.mojang.logging.LogUtils;
 import java.io.File;
+import java.io.FileFilter;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -67,7 +68,7 @@ public class FolderPackResources extends AbstractPackResources {
     public Set<String> getNamespaces(PackType packType) {
         Set<String> set = Sets.newHashSet();
         File file = new File(this.file, packType.getDirectory());
-        File[] files = file.listFiles(DirectoryFileFilter.DIRECTORY);
+        File[] files = file.listFiles((FileFilter) DirectoryFileFilter.DIRECTORY);
         if (files != null) {
             for(File file2 : files) {
                 String s = getRelativePath(file, file2);
diff --git a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
index 4be7681b9743ec5ff9e33b9035295a80a06b7fa5..b5a1b3f0fe56264136810aa3032fc121e71b4fd8 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
@@ -23,7 +23,7 @@ public class ProfiledReloadInstance extends SimpleReloadInstance<ProfiledReloadI
             AtomicLong atomicLong2 = new AtomicLong();
             ActiveProfiler activeProfiler = new ActiveProfiler(Util.timeSource, () -> 0, false);
             ActiveProfiler activeProfiler2 = new ActiveProfiler(Util.timeSource, () -> 0, false);
-            CompletableFuture<Void> completableFuture = preparableReloadListener.reload(preparationBarrier, resourceManagerx, activeProfiler, activeProfiler2, (runnable) -> executor2x.execute(() -> {
+            CompletableFuture<Void> completableFutureIn = preparableReloadListener.reload(preparationBarrier, resourceManagerx, activeProfiler, activeProfiler2, (runnable) -> executor2x.execute(() -> {
                     long l = Util.getNanos();
                     runnable.run();
                     atomicLong.addAndGet(Util.getNanos() - l);
@@ -32,7 +32,7 @@ public class ProfiledReloadInstance extends SimpleReloadInstance<ProfiledReloadI
                     runnable.run();
                     atomicLong2.addAndGet(Util.getNanos() - l);
                 }));
-            return completableFuture.thenApplyAsync((void_) -> {
+            return completableFutureIn.thenApplyAsync((void_) -> {
                 LOGGER.debug("Finished reloading " + preparableReloadListener.getName());
                 return new ProfiledReloadInstance.State(preparableReloadListener.getName(), activeProfiler.getResults(), activeProfiler2.getResults(), atomicLong, atomicLong2);
             }, executor2);
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index bd93fb2bd4da44e12de88857886d6851bfc2fbfb..012bb6ff70800cc9bad4818d250de004381ad432 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -320,7 +320,7 @@ public abstract class PlayerList {
             if (entity.hasExactlyOnePlayerPassenger()) {
                 LOGGER.debug("Removing player mount");
                 serverPlayer.stopRiding();
-                entity.getPassengersAndSelf().forEach((entity) -> entity.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER));
+                entity.getPassengersAndSelf().forEach((entityIn) -> entityIn.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER));
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index ef9d4bea44d2c4b85631abf9be76a088fa2ceed7..72456a6e207afbfa3745fccf94918c6bc6dcaae4 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -142,7 +142,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
                     JsonObject jsonObject = GsonHelper.convertToJsonObject(jsonElement, "entry");
                     StoredUserEntry<K> storedUserEntry = this.createEntry(jsonObject);
                     if (storedUserEntry.getUser() != null) {
-                        this.map.put(this.getKeyForUser(storedUserEntry.getUser()), storedUserEntry);
+                        this.map.put(this.getKeyForUser(storedUserEntry.getUser()), (V) storedUserEntry);
                     }
                 }
             } catch (Throwable var8) {
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index 590a129d5cdecc77ba00dac541e605a629ddc69f..b322909f942fa78f547a7f678d61056626b67324 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -106,11 +106,11 @@ public class ServerStatsCounter extends StatsCounter {
                             String s2 = (String)var7.next();
                             if (compoundTag2.contains(s2, 10)) {
                                 Util.ifElse(Registry.STAT_TYPE.getOptional(new ResourceLocation(s2)), (statType) -> {
-                                    CompoundTag compoundTag2 = compoundTag2.getCompound(s2);
+                                    CompoundTag compoundTag2In = compoundTag2.getCompound(s2);
 
-                                    for(String s2 : compoundTag2.getAllKeys()) {
-                                        if (compoundTag2.contains(s2, 99)) {
-                                            Util.ifElse(this.getStat(statType, s2), (stat) -> this.stats.put(stat, compoundTag2.getInt(s2)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, s2));
+                                    for(String key : compoundTag2In.getAllKeys()) {
+                                        if (compoundTag2In.contains(key, 99)) {
+                                            Util.ifElse(this.getStat(statType, key), (stat) -> this.stats.put(stat, compoundTag2In.getInt(key)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, key));
                                         } else {
                                             LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", new Object[]{this.file, compoundTag2.get(s2), s2});
                                         }
@@ -175,14 +175,14 @@ public class ServerStatsCounter extends StatsCounter {
             ((JsonObject)map.computeIfAbsent(stat.getType(), (statType) -> new JsonObject())).addProperty(getKey(stat).toString(), entry.getIntValue());
         }
 
-        JsonObject jsonObject = new JsonObject();
+        JsonObject jsonObjectIn = new JsonObject();
 
         for(Entry<StatType<?>, JsonObject> entry2 : map.entrySet()) {
-            jsonObject.add(Registry.STAT_TYPE.getKey((StatType)entry2.getKey()).toString(), (JsonElement)entry2.getValue());
+            jsonObjectIn.add(Registry.STAT_TYPE.getKey((StatType)entry2.getKey()).toString(), (JsonElement)entry2.getValue());
         }
 
         JsonObject jsonObject2 = new JsonObject();
-        jsonObject2.add("stats", jsonObject);
+        jsonObject2.add("stats", jsonObjectIn);
         jsonObject2.addProperty("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
         return jsonObject2.toString();
     }
diff --git a/src/main/java/net/minecraft/tags/Tag.java b/src/main/java/net/minecraft/tags/Tag.java
index e20fcfa1830cbc1c55a30867a71fc93a871c471f..82e9382ae2472c77aa512fb18f4776656b74f210 100644
--- a/src/main/java/net/minecraft/tags/Tag.java
+++ b/src/main/java/net/minecraft/tags/Tag.java
@@ -28,7 +28,7 @@ public class Tag<T> {
     }
 
     public static <T> Tag<T> empty() {
-        return EMPTY;
+        return (Tag<T>) EMPTY;
     }
 
     public static class Builder {
@@ -139,26 +139,10 @@ public class Tag<T> {
         }
     }
 
-    public static record BuilderEntry(Tag.Entry a, String b) {
-        final Tag.Entry entry;
-        private final String source;
-
-        public BuilderEntry(Tag.Entry entry, String s) {
-            this.entry = entry;
-            this.source = s;
-        }
-
+    public static record BuilderEntry(Tag.Entry entry, String source) {
         public String toString() {
             return this.entry + " (from " + this.source + ")";
         }
-
-        public Tag.Entry entry() {
-            return this.entry;
-        }
-
-        public String source() {
-            return this.source;
-        }
     }
 
     static class ElementEntry implements Tag.Entry {
diff --git a/src/main/java/net/minecraft/tags/TagKey.java b/src/main/java/net/minecraft/tags/TagKey.java
index 98fc1ded2d3c80c701dc01f51ebce40993a4d2c1..05fb93123fa022e5153d70cf9def473e948833f0 100644
--- a/src/main/java/net/minecraft/tags/TagKey.java
+++ b/src/main/java/net/minecraft/tags/TagKey.java
@@ -9,18 +9,9 @@ import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 
-public record TagKey<T>(ResourceKey<? extends Registry<T>> a, ResourceLocation b) {
-    private final ResourceKey<? extends Registry<T>> registry;
-    private final ResourceLocation location;
+public record TagKey<T>(ResourceKey<? extends Registry<T>> registry, ResourceLocation location) {
     private static final Interner<TagKey<?>> VALUES = Interners.newStrongInterner();
 
-    /** @deprecated */
-    @Deprecated
-    public TagKey(ResourceKey<? extends Registry<T>> resourceKey, ResourceLocation resourceLocation) {
-        this.registry = resourceKey;
-        this.location = resourceLocation;
-    }
-
     public static <T> Codec<TagKey<T>> codec(ResourceKey<? extends Registry<T>> resourceKey) {
         return ResourceLocation.CODEC.xmap((resourceLocation) -> create(resourceKey, resourceLocation), TagKey::location);
     }
@@ -38,18 +29,10 @@ public record TagKey<T>(ResourceKey<? extends Registry<T>> a, ResourceLocation b
     }
 
     public <E> Optional<TagKey<E>> cast(ResourceKey<? extends Registry<E>> resourceKey) {
-        return this.isFor(resourceKey) ? Optional.of(this) : Optional.empty();
+        return this.isFor(resourceKey) ? Optional.of((TagKey<E>) this) : Optional.empty();
     }
 
     public String toString() {
         return "TagKey[" + this.registry.location() + " / " + this.location + "]";
     }
-
-    public ResourceKey<? extends Registry<T>> registry() {
-        return this.registry;
-    }
-
-    public ResourceLocation location() {
-        return this.location;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/tags/TagManager.java b/src/main/java/net/minecraft/tags/TagManager.java
index aac95b1de7d80e413f159f8b9dce0668a9b98bb0..ab7d024d9d5fbc96c1d4cdfdd055144d2ddd1cd9 100644
--- a/src/main/java/net/minecraft/tags/TagManager.java
+++ b/src/main/java/net/minecraft/tags/TagManager.java
@@ -44,21 +44,6 @@ public class TagManager implements PreparableReloadListener {
         return CompletableFuture.supplyAsync(() -> new TagManager.LoadResult<>(resourceKey, tagLoader.loadAndBuild(resourceManager)), executor);
     }
 
-    public static record LoadResult<T>(ResourceKey<? extends Registry<T>> a, Map<ResourceLocation, Tag<Holder<T>>> b) {
-        private final ResourceKey<? extends Registry<T>> key;
-        private final Map<ResourceLocation, Tag<Holder<T>>> tags;
-
-        public LoadResult(ResourceKey<? extends Registry<T>> resourceKey, Map<ResourceLocation, Tag<Holder<T>>> map) {
-            this.key = resourceKey;
-            this.tags = map;
-        }
-
-        public ResourceKey<? extends Registry<T>> key() {
-            return this.key;
-        }
-
-        public Map<ResourceLocation, Tag<Holder<T>>> tags() {
-            return this.tags;
-        }
+    public static record LoadResult<T>(ResourceKey<? extends Registry<T>> key, Map<ResourceLocation, Tag<Holder<T>>> tags) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
index c337a6dc8cc16260f2038439027065ad77839128..487da6925055ec72c437165a15053e8d4fbf6939 100644
--- a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
+++ b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
@@ -57,7 +57,7 @@ public class ClassInstanceMultiMap<T> extends AbstractCollection<T> {
             throw new IllegalArgumentException("Don't know how to search for " + clazz);
         } else {
             List<? extends T> list = this.byClass.computeIfAbsent(clazz, (clazzx) -> this.allInstances.stream().filter(clazzx::isInstance).collect(Collectors.toList()));
-            return Collections.unmodifiableCollection(list);
+            return (Collection<S>) Collections.unmodifiableCollection(list);
         }
     }
 
diff --git a/src/main/java/net/minecraft/util/CubicSpline.java b/src/main/java/net/minecraft/util/CubicSpline.java
index 5f321cb77abb82d827b772d78e83d0befbf0f9b6..985a4d56cdbe9746456ef26a29c0f44bfb3737bd 100644
--- a/src/main/java/net/minecraft/util/CubicSpline.java
+++ b/src/main/java/net/minecraft/util/CubicSpline.java
@@ -22,47 +22,26 @@ public interface CubicSpline<C> extends ToFloatFunction<C> {
 
     float max();
 
+    record Point<C>(float location, CubicSpline<C> value, float derivative) {
+    }
+
     CubicSpline<C> mapAll(CubicSpline.CoordinateVisitor<C> var1);
 
     static <C> Codec<CubicSpline<C>> codec(Codec<ToFloatFunction<C>> codec) {
         MutableObject<Codec<CubicSpline<C>>> mutableObject = new MutableObject();
         Codec<Point<C>> codec2 = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("location").forGetter(Point::location), ExtraCodecs.lazyInitializedCodec(mutableObject::getValue).fieldOf("value").forGetter(Point::value), Codec.FLOAT.fieldOf("derivative").forGetter(Point::derivative)).apply(instance, (f, cubicSpline, f2) -> {
-                record Point<C>(float a, CubicSpline<C> b, float c) {
-                    private final float location;
-                    private final CubicSpline<C> value;
-                    private final float derivative;
-
-                    Point(float f, CubicSpline<C> cubicSpline, float f2) {
-                        this.location = f;
-                        this.value = cubicSpline;
-                        this.derivative = f2;
-                    }
-
-                    public float location() {
-                        return this.location;
-                    }
-
-                    public CubicSpline<C> value() {
-                        return this.value;
-                    }
-
-                    public float derivative() {
-                        return this.derivative;
-                    }
-                }
-
                 return new Point(f, cubicSpline, f2);
             }));
-        Codec<CubicSpline.Multipoint<C>> codec3 = RecordCodecBuilder.create((instance) -> instance.group(codec.fieldOf("coordinate").forGetter(CubicSpline.Multipoint::coordinate), ExtraCodecs.nonEmptyList(codec2.listOf()).fieldOf("points").forGetter((multipoint) -> IntStream.range(0, multipoint.locations.length).mapToObj((i) -> new Point(multipoint.locations()[i], (CubicSpline)multipoint.values().get(i), multipoint.derivatives()[i])).toList())).apply(instance, (toFloatFunction, list) -> {
+        Codec<CubicSpline.Multipoint<C>> codec3 = RecordCodecBuilder.create((instance) -> instance.group(codec.fieldOf("coordinate").forGetter(o -> o.coordinate()), codec2.listOf().fieldOf("points").forGetter((multipoint) -> (List) IntStream.range(0, multipoint.locations.length).mapToObj((i) -> new Point(multipoint.locations()[i], multipoint.values().get(i), multipoint.derivatives()[i])).toList())).apply(instance, (toFloatFunction, list) -> {
                 float[] floats = new float[list.size()];
                 com.google.common.collect.ImmutableList.Builder<CubicSpline<C>> builder = ImmutableList.builder();
                 float[] floats2 = new float[list.size()];
 
                 for(int i = 0; i < list.size(); ++i) {
-                    Point<C> 1Point = (Point)list.get(i);
-                    floats[i] = 1Point.location();
-                    builder.add(1Point.value());
-                    floats2[i] = 1Point.derivative();
+                    Point<C> point = (Point)list.get(i);
+                    floats[i] = point.location();
+                    builder.add(point.value());
+                    floats2[i] = point.derivative();
                 }
 
                 return new CubicSpline.Multipoint(toFloatFunction, floats, builder.build(), floats2);
@@ -110,7 +89,7 @@ public interface CubicSpline<C> extends ToFloatFunction<C> {
         }
 
         public CubicSpline.Builder<C> addPoint(float f, float f2, float f3) {
-            return this.addPoint(f, new CubicSpline.Constant<>(this.valueTransformer.apply((C)f2)), f3);
+            return this.addPoint(f, new CubicSpline.Constant<>(this.valueTransformer.apply(f2)), f3);
         }
 
         public CubicSpline.Builder<C> addPoint(float f, CubicSpline<C> cubicSpline, float f2) {
@@ -134,13 +113,7 @@ public interface CubicSpline<C> extends ToFloatFunction<C> {
     }
 
     @VisibleForDebug
-    public static record Constant<C>(float a) implements CubicSpline<C> {
-        private final float value;
-
-        public Constant(float f) {
-            this.value = f;
-        }
-
+    public static record Constant<C>(float value) implements CubicSpline<C> {
         public float apply(C object) {
             return this.value;
         }
@@ -160,10 +133,6 @@ public interface CubicSpline<C> extends ToFloatFunction<C> {
         public CubicSpline<C> mapAll(CubicSpline.CoordinateVisitor<C> coordinateVisitor) {
             return this;
         }
-
-        public float value() {
-            return this.value;
-        }
     }
 
     public interface CoordinateVisitor<C> {
@@ -171,21 +140,10 @@ public interface CubicSpline<C> extends ToFloatFunction<C> {
     }
 
     @VisibleForDebug
-    public static record Multipoint<C>(ToFloatFunction<C> a, float[] b, List<CubicSpline<C>> c, float[] d) implements CubicSpline<C> {
-        private final ToFloatFunction<C> coordinate;
-        final float[] locations;
-        private final List<CubicSpline<C>> values;
-        private final float[] derivatives;
-
-        public Multipoint(ToFloatFunction<C> toFloatFunction, float[] floats, List<CubicSpline<C>> list, float[] floats2) {
-            if (floats.length == list.size() && floats.length == floats2.length) {
-                this.coordinate = toFloatFunction;
-                this.locations = floats;
-                this.values = list;
-                this.derivatives = floats2;
-            } else {
-                throw new IllegalArgumentException("All lengths must be equal, got: " + floats.length + " " + list.size() + " " + floats2.length);
-            }
+    public static record Multipoint<C>(ToFloatFunction<C> coordinate, float[] locations, List<CubicSpline<C>> values, float[] derivatives) implements CubicSpline<C> {
+        public Multipoint {
+            if (locations.length != values.size() || locations.length != derivatives.length)
+                throw new IllegalArgumentException("All lengths must be equal, got: " + locations.length + " " + values.size() + " " + derivatives.length);
         }
 
         public float apply(C object) {
@@ -232,21 +190,5 @@ public interface CubicSpline<C> extends ToFloatFunction<C> {
         public CubicSpline<C> mapAll(CubicSpline.CoordinateVisitor<C> coordinateVisitor) {
             return new CubicSpline.Multipoint<>(coordinateVisitor.visit(this.coordinate), this.locations, this.values().stream().map((cubicSpline) -> cubicSpline.mapAll(coordinateVisitor)).toList(), this.derivatives);
         }
-
-        public ToFloatFunction<C> coordinate() {
-            return this.coordinate;
-        }
-
-        public float[] locations() {
-            return this.locations;
-        }
-
-        public List<CubicSpline<C>> values() {
-            return this.values;
-        }
-
-        public float[] derivatives() {
-            return this.derivatives;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/ExtraCodecs.java b/src/main/java/net/minecraft/util/ExtraCodecs.java
index 9f855ba9270d38fc12662d077dc40b35ffb6621f..5bc1c2a5dd7515710446741dd7a2a6054b82be10 100644
--- a/src/main/java/net/minecraft/util/ExtraCodecs.java
+++ b/src/main/java/net/minecraft/util/ExtraCodecs.java
@@ -42,8 +42,8 @@ public class ExtraCodecs {
                 P object2 = (P)listx.get(1);
                 return biFunction.apply(object, object2);
             }), (object) -> ImmutableList.of(function.apply(object), function2.apply(object)));
-        Codec<I> codec3 = RecordCodecBuilder.create((instance) -> instance.group(codec.fieldOf(s).forGetter(Pair::getFirst), codec.fieldOf(s2).forGetter(Pair::getSecond)).apply(instance, Pair::of)).comapFlatMap((pair) -> biFunction.apply(pair.getFirst(), pair.getSecond()), (object) -> Pair.of(function.apply(object), function2.apply(object)));
-        Codec<I> codec4 = (new ExtraCodecs.EitherCodec(codec2, codec3)).xmap((either) -> either.map((object) -> object, (object) -> object), Either::left);
+        Codec<I> codec3 = RecordCodecBuilder.<Pair<P, P>>create((instance) -> instance.group(codec.fieldOf(s).forGetter(Pair<P, P>::getFirst), codec.fieldOf(s2).forGetter(Pair<P, P>::getSecond)).apply(instance, Pair::of)).comapFlatMap((pair) -> biFunction.apply(pair.getFirst(), pair.getSecond()), (object) -> Pair.of(function.apply(object), function2.apply(object)));
+        Codec<I> codec4 = (new ExtraCodecs.EitherCodec<>(codec2, codec3)).xmap((either) -> either.map((object) -> object, (object) -> object), Either::left);
         return Codec.either(codec, codec4).comapFlatMap((either) -> either.map((object) -> biFunction.apply(object, object), DataResult::success), (object) -> {
             P object2 = (P)function.apply(object);
             P object3 = (P)function2.apply(object);
@@ -56,7 +56,7 @@ public class ExtraCodecs {
             public <T> DataResult<Pair<A, T>> apply(DynamicOps<T> dynamicOps, T objectx, DataResult<Pair<A, T>> dataResult) {
                 MutableObject<String> mutableObject = new MutableObject();
                 Optional<Pair<A, T>> optional = dataResult.resultOrPartial(mutableObject::setValue);
-                return optional.isPresent() ? dataResult : DataResult.error("(" + (String)mutableObject.getValue() + " -> using default)", Pair.of(object, object));
+                return optional.isPresent() ? dataResult : DataResult.error("(" + (String)mutableObject.getValue() + " -> using default)", Pair.of(object, (T) object));
             }
 
             public <T> DataResult<T> coApply(DynamicOps<T> dynamicOps, A objectx, DataResult<T> dataResult) {
@@ -150,8 +150,25 @@ public class ExtraCodecs {
         return new ExtraCodecs.LazyInitializedCodec<>(supplier);
     }
 
-    public static <E> MapCodec<E> retrieveContext(final Function<DynamicOps<?>, DataResult<E>> function) {
-        // $FF: Couldn't be decompiled
+    public static <E> MapCodec<E> retrieveContext(final Function<DynamicOps<?>, DataResult<E>> getter) {
+        class ContextRetrievalCodec extends MapCodec<E> {
+            public <T> RecordBuilder<T> encode(E object, DynamicOps<T> dynamicOps, RecordBuilder<T> recordBuilder) {
+                return recordBuilder;
+            }
+
+            public <T> DataResult<E> decode(DynamicOps<T> dynamicOps, MapLike<T> mapLike) {
+                return getter.apply(dynamicOps);
+            }
+
+            public String toString() {
+                return "ContextRetrievalCodec[" + getter + "]";
+            }
+
+            public <T> java.util.stream.Stream<T> keys(DynamicOps<T> dynamicOps) {
+                return java.util.stream.Stream.empty();
+            }
+        };
+        return new ContextRetrievalCodec();
     }
 
     public static <E, L extends Collection<E>, T> Function<L, DataResult<L>> ensureHomogenous(Function<E, T> function) {
@@ -173,15 +190,7 @@ public class ExtraCodecs {
         };
     }
 
-    static final class EitherCodec<F, S> implements Codec<Either<F, S>> {
-        private final Codec<F> first;
-        private final Codec<S> second;
-
-        public EitherCodec(Codec<F> codec, Codec<S> codec2) {
-            this.first = codec;
-            this.second = codec2;
-        }
-
+    static record EitherCodec<F, S>(Codec<F> first, Codec<S> second) implements Codec<Either<F, S>> {
         public <T> DataResult<Pair<Either<F, S>, T>> decode(DynamicOps<T> dynamicOps, T object) {
             DataResult<Pair<Either<F, S>, T>> dataResult = this.first.decode(dynamicOps, object).map((pair) -> pair.mapFirst(Either::left));
             if (!dataResult.error().isPresent()) {
@@ -216,12 +225,10 @@ public class ExtraCodecs {
         }
     }
 
-    static record LazyInitializedCodec<A>(Supplier<Codec<A>> a) implements Codec<A> {
-        private final Supplier<Codec<A>> delegate;
+    static record LazyInitializedCodec<A>(Supplier<Codec<A>> delegate) implements Codec<A> {
 
-        LazyInitializedCodec(Supplier<Codec<A>> supplier) {
-            Supplier<Codec<A>> var2 = Suppliers.memoize(supplier::get);
-            this.delegate = var2;
+        LazyInitializedCodec(Supplier<Codec<A>> delegate) {
+            this.delegate = Suppliers.memoize(delegate::get);
         }
 
         public <T> DataResult<Pair<A, T>> decode(DynamicOps<T> dynamicOps, T object) {
@@ -231,21 +238,9 @@ public class ExtraCodecs {
         public <T> DataResult<T> encode(A object, DynamicOps<T> dynamicOps, T object2) {
             return (this.delegate.get()).encode(object, dynamicOps, object2);
         }
-
-        public Supplier<Codec<A>> delegate() {
-            return this.delegate;
-        }
     }
 
-    static final class XorCodec<F, S> implements Codec<Either<F, S>> {
-        private final Codec<F> first;
-        private final Codec<S> second;
-
-        public XorCodec(Codec<F> codec, Codec<S> codec2) {
-            this.first = codec;
-            this.second = codec2;
-        }
-
+    static record XorCodec<F, S>(Codec<F> first, Codec<S> second) implements Codec<Either<F, S>> {
         public <T> DataResult<Pair<Either<F, S>, T>> decode(DynamicOps<T> dynamicOps, T object) {
             DataResult<Pair<Either<F, S>, T>> dataResult = this.first.decode(dynamicOps, object).map((pair) -> pair.mapFirst(Either::left));
             DataResult<Pair<Either<F, S>, T>> dataResult2 = this.second.decode(dynamicOps, object).map((pair) -> pair.mapFirst(Either::right));
diff --git a/src/main/java/net/minecraft/util/InclusiveRange.java b/src/main/java/net/minecraft/util/InclusiveRange.java
index ac15029e50d5d1b609bd0629a79a65f15d8183dc..e426bb2b73dc40e00e22dba093344e5ce9d25cdc 100644
--- a/src/main/java/net/minecraft/util/InclusiveRange.java
+++ b/src/main/java/net/minecraft/util/InclusiveRange.java
@@ -4,20 +4,9 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
 import java.util.function.Function;
 
-public record InclusiveRange<T extends Comparable<T>>(T b, T c) {
-    private final T minInclusive;
-    private final T maxInclusive;
+public record InclusiveRange<T extends Comparable<T>>(T minInclusive, T maxInclusive) {
     public static final Codec<InclusiveRange<Integer>> INT = codec(Codec.INT);
 
-    public InclusiveRange(T comparable, T comparable2) {
-        if (comparable.compareTo(comparable2) > 0) {
-            throw new IllegalArgumentException("min_inclusive must be less than or equal to max_inclusive");
-        } else {
-            this.minInclusive = comparable;
-            this.maxInclusive = comparable2;
-        }
-    }
-
     public static <T extends Comparable<T>> Codec<InclusiveRange<T>> codec(Codec<T> codec) {
         return ExtraCodecs.intervalCodec(codec, "min_inclusive", "max_inclusive", InclusiveRange::create, InclusiveRange::minInclusive, InclusiveRange::maxInclusive);
     }
@@ -48,12 +37,4 @@ public record InclusiveRange<T extends Comparable<T>>(T b, T c) {
     public String toString() {
         return "[" + this.minInclusive + ", " + this.maxInclusive + "]";
     }
-
-    public T minInclusive() {
-        return this.minInclusive;
-    }
-
-    public T maxInclusive() {
-        return this.maxInclusive;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java b/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
index e3b27a2bc10f1127203ff5874eed5582dc2459ac..69767559a40cee9bd01131d5a041e2d08eb52568 100644
--- a/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
+++ b/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
@@ -16,7 +16,7 @@ import javax.annotation.Nullable;
 public class LowerCaseEnumTypeAdapterFactory implements TypeAdapterFactory {
     @Nullable
     public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
-        Class<T> clazz = typeToken.getRawType();
+        Class<T> clazz = (Class<T>) typeToken.getRawType();
         if (!clazz.isEnum()) {
             return null;
         } else {
diff --git a/src/main/java/net/minecraft/util/ModCheck.java b/src/main/java/net/minecraft/util/ModCheck.java
index 4b1de7d086a3017b11bf5331c1056a6b3afa9641..ba16f89a3925b5460153a99893c36a5f72dcf0dd 100644
--- a/src/main/java/net/minecraft/util/ModCheck.java
+++ b/src/main/java/net/minecraft/util/ModCheck.java
@@ -3,15 +3,7 @@ package net.minecraft.util;
 import java.util.function.Supplier;
 import org.apache.commons.lang3.ObjectUtils;
 
-public record ModCheck(ModCheck.Confidence a, String b) {
-    private final ModCheck.Confidence confidence;
-    private final String description;
-
-    public ModCheck(ModCheck.Confidence confidence, String s) {
-        this.confidence = confidence;
-        this.description = s;
-    }
-
+public record ModCheck(ModCheck.Confidence confidence, String description) {
     public static ModCheck identify(String s, Supplier<String> supplier, String s2, Class<?> clazz) {
         String s3 = (String)supplier.get();
         if (!s.equals(s3)) {
@@ -21,10 +13,6 @@ public record ModCheck(ModCheck.Confidence a, String b) {
         }
     }
 
-    public boolean shouldReportAsModified() {
-        return this.confidence.shouldReportAsModified;
-    }
-
     public ModCheck merge(ModCheck modCheck) {
         return new ModCheck((ModCheck.Confidence)ObjectUtils.max(new ModCheck.Confidence[]{this.confidence, modCheck.confidence}), this.description + "; " + modCheck.description);
     }
@@ -33,12 +21,8 @@ public record ModCheck(ModCheck.Confidence a, String b) {
         return this.confidence.description + " " + this.description;
     }
 
-    public ModCheck.Confidence confidence() {
-        return this.confidence;
-    }
-
-    public String description() {
-        return this.description;
+    public boolean shouldReportAsModified() {
+        return confidence.shouldReportAsModified;
     }
 
     public static enum Confidence {
@@ -46,8 +30,8 @@ public record ModCheck(ModCheck.Confidence a, String b) {
         VERY_LIKELY("Very likely;", true),
         DEFINITELY("Definitely;", true);
 
-        final String description;
-        final boolean shouldReportAsModified;
+        String description;
+        boolean shouldReportAsModified;
 
         private Confidence(String s, boolean flag) {
             this.description = s;
diff --git a/src/main/java/net/minecraft/util/StringRepresentable.java b/src/main/java/net/minecraft/util/StringRepresentable.java
index b17fcd036873b57cc9fd203905482f59ccfe82ef..a18d1aa96ddcba1e1665efc8fa8f0b0b08098626 100644
--- a/src/main/java/net/minecraft/util/StringRepresentable.java
+++ b/src/main/java/net/minecraft/util/StringRepresentable.java
@@ -12,7 +12,7 @@ public interface StringRepresentable {
     String getSerializedName();
 
     static <E extends Enum<E> & StringRepresentable> Codec<E> fromEnum(Supplier<E[]> supplier, Function<String, E> function) {
-        E[] enums = (Enum[])supplier.get();
+        E[] enums = supplier.get();
         return ExtraCodecs.orCompressed(ExtraCodecs.stringResolverCodec((object) -> ((StringRepresentable)object).getSerializedName(), function), ExtraCodecs.idResolverCodec((object) -> ((Enum)object).ordinal(), (i) -> i >= 0 && i < enums.length ? enums[i] : null, -1));
     }
 
diff --git a/src/main/java/net/minecraft/util/datafix/DataFixers.java b/src/main/java/net/minecraft/util/datafix/DataFixers.java
index 86bd6e7b2b5d5f8d02151d8ffa5b87ad7e285e86..929f9523f24cf9e6a1dd3e000d22f37875a58bac 100644
--- a/src/main/java/net/minecraft/util/datafix/DataFixers.java
+++ b/src/main/java/net/minecraft/util/datafix/DataFixers.java
@@ -568,17 +568,17 @@ public class DataFixers {
         dataFixerBuilder.addFixer(new AddNewChoices(schema132, "Added Glow Squid", References.ENTITY));
         dataFixerBuilder.addFixer(new AddNewChoices(schema132, "Added Glow Item Frame", References.ENTITY));
         Schema schema133 = dataFixerBuilder.addSchema(2690, SAME_NAMESPACED);
-        ImmutableMap<String, String> immutableMap = ImmutableMap.builder().put("minecraft:weathered_copper_block", "minecraft:oxidized_copper_block").put("minecraft:semi_weathered_copper_block", "minecraft:weathered_copper_block").put("minecraft:lightly_weathered_copper_block", "minecraft:exposed_copper_block").put("minecraft:weathered_cut_copper", "minecraft:oxidized_cut_copper").put("minecraft:semi_weathered_cut_copper", "minecraft:weathered_cut_copper").put("minecraft:lightly_weathered_cut_copper", "minecraft:exposed_cut_copper").put("minecraft:weathered_cut_copper_stairs", "minecraft:oxidized_cut_copper_stairs").put("minecraft:semi_weathered_cut_copper_stairs", "minecraft:weathered_cut_copper_stairs").put("minecraft:lightly_weathered_cut_copper_stairs", "minecraft:exposed_cut_copper_stairs").put("minecraft:weathered_cut_copper_slab", "minecraft:oxidized_cut_copper_slab").put("minecraft:semi_weathered_cut_copper_slab", "minecraft:weathered_cut_copper_slab").put("minecraft:lightly_weathered_cut_copper_slab", "minecraft:exposed_cut_copper_slab").put("minecraft:waxed_semi_weathered_copper", "minecraft:waxed_weathered_copper").put("minecraft:waxed_lightly_weathered_copper", "minecraft:waxed_exposed_copper").put("minecraft:waxed_semi_weathered_cut_copper", "minecraft:waxed_weathered_cut_copper").put("minecraft:waxed_lightly_weathered_cut_copper", "minecraft:waxed_exposed_cut_copper").put("minecraft:waxed_semi_weathered_cut_copper_stairs", "minecraft:waxed_weathered_cut_copper_stairs").put("minecraft:waxed_lightly_weathered_cut_copper_stairs", "minecraft:waxed_exposed_cut_copper_stairs").put("minecraft:waxed_semi_weathered_cut_copper_slab", "minecraft:waxed_weathered_cut_copper_slab").put("minecraft:waxed_lightly_weathered_cut_copper_slab", "minecraft:waxed_exposed_cut_copper_slab").build();
+        ImmutableMap<String, String> immutableMap = ImmutableMap.<String, String>builder().put("minecraft:weathered_copper_block", "minecraft:oxidized_copper_block").put("minecraft:semi_weathered_copper_block", "minecraft:weathered_copper_block").put("minecraft:lightly_weathered_copper_block", "minecraft:exposed_copper_block").put("minecraft:weathered_cut_copper", "minecraft:oxidized_cut_copper").put("minecraft:semi_weathered_cut_copper", "minecraft:weathered_cut_copper").put("minecraft:lightly_weathered_cut_copper", "minecraft:exposed_cut_copper").put("minecraft:weathered_cut_copper_stairs", "minecraft:oxidized_cut_copper_stairs").put("minecraft:semi_weathered_cut_copper_stairs", "minecraft:weathered_cut_copper_stairs").put("minecraft:lightly_weathered_cut_copper_stairs", "minecraft:exposed_cut_copper_stairs").put("minecraft:weathered_cut_copper_slab", "minecraft:oxidized_cut_copper_slab").put("minecraft:semi_weathered_cut_copper_slab", "minecraft:weathered_cut_copper_slab").put("minecraft:lightly_weathered_cut_copper_slab", "minecraft:exposed_cut_copper_slab").put("minecraft:waxed_semi_weathered_copper", "minecraft:waxed_weathered_copper").put("minecraft:waxed_lightly_weathered_copper", "minecraft:waxed_exposed_copper").put("minecraft:waxed_semi_weathered_cut_copper", "minecraft:waxed_weathered_cut_copper").put("minecraft:waxed_lightly_weathered_cut_copper", "minecraft:waxed_exposed_cut_copper").put("minecraft:waxed_semi_weathered_cut_copper_stairs", "minecraft:waxed_weathered_cut_copper_stairs").put("minecraft:waxed_lightly_weathered_cut_copper_stairs", "minecraft:waxed_exposed_cut_copper_stairs").put("minecraft:waxed_semi_weathered_cut_copper_slab", "minecraft:waxed_weathered_cut_copper_slab").put("minecraft:waxed_lightly_weathered_cut_copper_slab", "minecraft:waxed_exposed_cut_copper_slab").build();
         dataFixerBuilder.addFixer(ItemRenameFix.create(schema133, "Renamed copper block items to new oxidized terms", createRenamer(immutableMap)));
         dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema133, "Renamed copper blocks to new oxidized terms", createRenamer(immutableMap)));
         Schema schema134 = dataFixerBuilder.addSchema(2691, SAME_NAMESPACED);
-        ImmutableMap<String, String> immutableMap2 = ImmutableMap.builder().put("minecraft:waxed_copper", "minecraft:waxed_copper_block").put("minecraft:oxidized_copper_block", "minecraft:oxidized_copper").put("minecraft:weathered_copper_block", "minecraft:weathered_copper").put("minecraft:exposed_copper_block", "minecraft:exposed_copper").build();
+        ImmutableMap<String, String> immutableMap2 = ImmutableMap.<String, String>builder().put("minecraft:waxed_copper", "minecraft:waxed_copper_block").put("minecraft:oxidized_copper_block", "minecraft:oxidized_copper").put("minecraft:weathered_copper_block", "minecraft:weathered_copper").put("minecraft:exposed_copper_block", "minecraft:exposed_copper").build();
         dataFixerBuilder.addFixer(ItemRenameFix.create(schema134, "Rename copper item suffixes", createRenamer(immutableMap2)));
         dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema134, "Rename copper blocks suffixes", createRenamer(immutableMap2)));
         Schema schema135 = dataFixerBuilder.addSchema(2693, SAME_NAMESPACED);
         dataFixerBuilder.addFixer(new AddFlagIfNotPresentFix(schema135, References.WORLD_GEN_SETTINGS, "has_increased_height_already", false));
         Schema schema136 = dataFixerBuilder.addSchema(2696, SAME_NAMESPACED);
-        ImmutableMap<String, String> immutableMap3 = ImmutableMap.builder().put("minecraft:grimstone", "minecraft:deepslate").put("minecraft:grimstone_slab", "minecraft:cobbled_deepslate_slab").put("minecraft:grimstone_stairs", "minecraft:cobbled_deepslate_stairs").put("minecraft:grimstone_wall", "minecraft:cobbled_deepslate_wall").put("minecraft:polished_grimstone", "minecraft:polished_deepslate").put("minecraft:polished_grimstone_slab", "minecraft:polished_deepslate_slab").put("minecraft:polished_grimstone_stairs", "minecraft:polished_deepslate_stairs").put("minecraft:polished_grimstone_wall", "minecraft:polished_deepslate_wall").put("minecraft:grimstone_tiles", "minecraft:deepslate_tiles").put("minecraft:grimstone_tile_slab", "minecraft:deepslate_tile_slab").put("minecraft:grimstone_tile_stairs", "minecraft:deepslate_tile_stairs").put("minecraft:grimstone_tile_wall", "minecraft:deepslate_tile_wall").put("minecraft:grimstone_bricks", "minecraft:deepslate_bricks").put("minecraft:grimstone_brick_slab", "minecraft:deepslate_brick_slab").put("minecraft:grimstone_brick_stairs", "minecraft:deepslate_brick_stairs").put("minecraft:grimstone_brick_wall", "minecraft:deepslate_brick_wall").put("minecraft:chiseled_grimstone", "minecraft:chiseled_deepslate").build();
+        ImmutableMap<String, String> immutableMap3 = ImmutableMap.<String, String>builder().put("minecraft:grimstone", "minecraft:deepslate").put("minecraft:grimstone_slab", "minecraft:cobbled_deepslate_slab").put("minecraft:grimstone_stairs", "minecraft:cobbled_deepslate_stairs").put("minecraft:grimstone_wall", "minecraft:cobbled_deepslate_wall").put("minecraft:polished_grimstone", "minecraft:polished_deepslate").put("minecraft:polished_grimstone_slab", "minecraft:polished_deepslate_slab").put("minecraft:polished_grimstone_stairs", "minecraft:polished_deepslate_stairs").put("minecraft:polished_grimstone_wall", "minecraft:polished_deepslate_wall").put("minecraft:grimstone_tiles", "minecraft:deepslate_tiles").put("minecraft:grimstone_tile_slab", "minecraft:deepslate_tile_slab").put("minecraft:grimstone_tile_stairs", "minecraft:deepslate_tile_stairs").put("minecraft:grimstone_tile_wall", "minecraft:deepslate_tile_wall").put("minecraft:grimstone_bricks", "minecraft:deepslate_bricks").put("minecraft:grimstone_brick_slab", "minecraft:deepslate_brick_slab").put("minecraft:grimstone_brick_stairs", "minecraft:deepslate_brick_stairs").put("minecraft:grimstone_brick_wall", "minecraft:deepslate_brick_wall").put("minecraft:chiseled_grimstone", "minecraft:chiseled_deepslate").build();
         dataFixerBuilder.addFixer(ItemRenameFix.create(schema136, "Renamed grimstone block items to deepslate", createRenamer(immutableMap3)));
         dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema136, "Renamed grimstone blocks to deepslate", createRenamer(immutableMap3)));
         Schema schema137 = dataFixerBuilder.addSchema(2700, SAME_NAMESPACED);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
index 9bb677aeb69b03cf6d397a0a8969cbbeec814817..3c27cf8ee3836c68dc5a68c6df6722cddd5e6a72 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
@@ -42,10 +42,10 @@ public abstract class AbstractUUIDFix extends DataFix {
 
     protected static Optional<Dynamic<?>> createUUIDFromString(Dynamic<?> dynamic, String s) {
         return dynamic.get(s).result().flatMap((dynamic2) -> {
-            String s = dynamic2.asString((String)null);
-            if (s != null) {
+            String str = dynamic2.asString((String)null);
+            if (str != null) {
                 try {
-                    UUID uuid = UUID.fromString(s);
+                    UUID uuid = UUID.fromString(str);
                     return createUUIDTag(dynamic, uuid.getMostSignificantBits(), uuid.getLeastSignificantBits());
                 } catch (IllegalArgumentException var4) {
                 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java b/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
index 3ab0439256147535debf786cbe8ee81ccc5015c8..c97af610debc491cb5da67734b752f5a446fe36f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
@@ -27,10 +27,10 @@ public class AddNewChoices extends DataFix {
             throw new IllegalStateException("Could not inject: key type is not the same");
         } else {
             return this.fixTypeEverywhere(s, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
-                    if (!taggedChoiceType2.hasType(pair.getFirst())) {
+                    if (!((TaggedChoiceType) taggedChoiceType2).hasType(pair.getFirst())) {
                         throw new IllegalArgumentException(String.format("Unknown type %s in %s ", pair.getFirst(), this.type));
                     } else {
-                        return pair;
+                        return (com.mojang.datafixers.util.Pair) pair;
                     }
                 });
         }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
index 168660cdeb3d1bff72d2ff36d3a9f09ec2839400..e583ad6e2a14e268a5f9b14ac757145033891872 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
@@ -5,7 +5,7 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class AdvancementsFix extends AdvancementsRenameFix {
-    private static final Map<String, String> RENAMES = ImmutableMap.builder().put("minecraft:recipes/brewing/speckled_melon", "minecraft:recipes/brewing/glistering_melon_slice").put("minecraft:recipes/building_blocks/black_stained_hardened_clay", "minecraft:recipes/building_blocks/black_terracotta").put("minecraft:recipes/building_blocks/blue_stained_hardened_clay", "minecraft:recipes/building_blocks/blue_terracotta").put("minecraft:recipes/building_blocks/brown_stained_hardened_clay", "minecraft:recipes/building_blocks/brown_terracotta").put("minecraft:recipes/building_blocks/cyan_stained_hardened_clay", "minecraft:recipes/building_blocks/cyan_terracotta").put("minecraft:recipes/building_blocks/gray_stained_hardened_clay", "minecraft:recipes/building_blocks/gray_terracotta").put("minecraft:recipes/building_blocks/green_stained_hardened_clay", "minecraft:recipes/building_blocks/green_terracotta").put("minecraft:recipes/building_blocks/light_blue_stained_hardened_clay", "minecraft:recipes/building_blocks/light_blue_terracotta").put("minecraft:recipes/building_blocks/light_gray_stained_hardened_clay", "minecraft:recipes/building_blocks/light_gray_terracotta").put("minecraft:recipes/building_blocks/lime_stained_hardened_clay", "minecraft:recipes/building_blocks/lime_terracotta").put("minecraft:recipes/building_blocks/magenta_stained_hardened_clay", "minecraft:recipes/building_blocks/magenta_terracotta").put("minecraft:recipes/building_blocks/orange_stained_hardened_clay", "minecraft:recipes/building_blocks/orange_terracotta").put("minecraft:recipes/building_blocks/pink_stained_hardened_clay", "minecraft:recipes/building_blocks/pink_terracotta").put("minecraft:recipes/building_blocks/purple_stained_hardened_clay", "minecraft:recipes/building_blocks/purple_terracotta").put("minecraft:recipes/building_blocks/red_stained_hardened_clay", "minecraft:recipes/building_blocks/red_terracotta").put("minecraft:recipes/building_blocks/white_stained_hardened_clay", "minecraft:recipes/building_blocks/white_terracotta").put("minecraft:recipes/building_blocks/yellow_stained_hardened_clay", "minecraft:recipes/building_blocks/yellow_terracotta").put("minecraft:recipes/building_blocks/acacia_wooden_slab", "minecraft:recipes/building_blocks/acacia_slab").put("minecraft:recipes/building_blocks/birch_wooden_slab", "minecraft:recipes/building_blocks/birch_slab").put("minecraft:recipes/building_blocks/dark_oak_wooden_slab", "minecraft:recipes/building_blocks/dark_oak_slab").put("minecraft:recipes/building_blocks/jungle_wooden_slab", "minecraft:recipes/building_blocks/jungle_slab").put("minecraft:recipes/building_blocks/oak_wooden_slab", "minecraft:recipes/building_blocks/oak_slab").put("minecraft:recipes/building_blocks/spruce_wooden_slab", "minecraft:recipes/building_blocks/spruce_slab").put("minecraft:recipes/building_blocks/brick_block", "minecraft:recipes/building_blocks/bricks").put("minecraft:recipes/building_blocks/chiseled_stonebrick", "minecraft:recipes/building_blocks/chiseled_stone_bricks").put("minecraft:recipes/building_blocks/end_bricks", "minecraft:recipes/building_blocks/end_stone_bricks").put("minecraft:recipes/building_blocks/lit_pumpkin", "minecraft:recipes/building_blocks/jack_o_lantern").put("minecraft:recipes/building_blocks/magma", "minecraft:recipes/building_blocks/magma_block").put("minecraft:recipes/building_blocks/melon_block", "minecraft:recipes/building_blocks/melon").put("minecraft:recipes/building_blocks/mossy_stonebrick", "minecraft:recipes/building_blocks/mossy_stone_bricks").put("minecraft:recipes/building_blocks/nether_brick", "minecraft:recipes/building_blocks/nether_bricks").put("minecraft:recipes/building_blocks/pillar_quartz_block", "minecraft:recipes/building_blocks/quartz_pillar").put("minecraft:recipes/building_blocks/red_nether_brick", "minecraft:recipes/building_blocks/red_nether_bricks").put("minecraft:recipes/building_blocks/snow", "minecraft:recipes/building_blocks/snow_block").put("minecraft:recipes/building_blocks/smooth_red_sandstone", "minecraft:recipes/building_blocks/cut_red_sandstone").put("minecraft:recipes/building_blocks/smooth_sandstone", "minecraft:recipes/building_blocks/cut_sandstone").put("minecraft:recipes/building_blocks/stonebrick", "minecraft:recipes/building_blocks/stone_bricks").put("minecraft:recipes/building_blocks/stone_stairs", "minecraft:recipes/building_blocks/cobblestone_stairs").put("minecraft:recipes/building_blocks/string_to_wool", "minecraft:recipes/building_blocks/white_wool_from_string").put("minecraft:recipes/decorations/fence", "minecraft:recipes/decorations/oak_fence").put("minecraft:recipes/decorations/purple_shulker_box", "minecraft:recipes/decorations/shulker_box").put("minecraft:recipes/decorations/slime", "minecraft:recipes/decorations/slime_block").put("minecraft:recipes/decorations/snow_layer", "minecraft:recipes/decorations/snow").put("minecraft:recipes/misc/bone_meal_from_block", "minecraft:recipes/misc/bone_meal_from_bone_block").put("minecraft:recipes/misc/bone_meal_from_bone", "minecraft:recipes/misc/bone_meal").put("minecraft:recipes/misc/gold_ingot_from_block", "minecraft:recipes/misc/gold_ingot_from_gold_block").put("minecraft:recipes/misc/iron_ingot_from_block", "minecraft:recipes/misc/iron_ingot_from_iron_block").put("minecraft:recipes/redstone/fence_gate", "minecraft:recipes/redstone/oak_fence_gate").put("minecraft:recipes/redstone/noteblock", "minecraft:recipes/redstone/note_block").put("minecraft:recipes/redstone/trapdoor", "minecraft:recipes/redstone/oak_trapdoor").put("minecraft:recipes/redstone/wooden_button", "minecraft:recipes/redstone/oak_button").put("minecraft:recipes/redstone/wooden_door", "minecraft:recipes/redstone/oak_door").put("minecraft:recipes/redstone/wooden_pressure_plate", "minecraft:recipes/redstone/oak_pressure_plate").put("minecraft:recipes/transportation/boat", "minecraft:recipes/transportation/oak_boat").put("minecraft:recipes/transportation/golden_rail", "minecraft:recipes/transportation/powered_rail").build();
+    private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("minecraft:recipes/brewing/speckled_melon", "minecraft:recipes/brewing/glistering_melon_slice").put("minecraft:recipes/building_blocks/black_stained_hardened_clay", "minecraft:recipes/building_blocks/black_terracotta").put("minecraft:recipes/building_blocks/blue_stained_hardened_clay", "minecraft:recipes/building_blocks/blue_terracotta").put("minecraft:recipes/building_blocks/brown_stained_hardened_clay", "minecraft:recipes/building_blocks/brown_terracotta").put("minecraft:recipes/building_blocks/cyan_stained_hardened_clay", "minecraft:recipes/building_blocks/cyan_terracotta").put("minecraft:recipes/building_blocks/gray_stained_hardened_clay", "minecraft:recipes/building_blocks/gray_terracotta").put("minecraft:recipes/building_blocks/green_stained_hardened_clay", "minecraft:recipes/building_blocks/green_terracotta").put("minecraft:recipes/building_blocks/light_blue_stained_hardened_clay", "minecraft:recipes/building_blocks/light_blue_terracotta").put("minecraft:recipes/building_blocks/light_gray_stained_hardened_clay", "minecraft:recipes/building_blocks/light_gray_terracotta").put("minecraft:recipes/building_blocks/lime_stained_hardened_clay", "minecraft:recipes/building_blocks/lime_terracotta").put("minecraft:recipes/building_blocks/magenta_stained_hardened_clay", "minecraft:recipes/building_blocks/magenta_terracotta").put("minecraft:recipes/building_blocks/orange_stained_hardened_clay", "minecraft:recipes/building_blocks/orange_terracotta").put("minecraft:recipes/building_blocks/pink_stained_hardened_clay", "minecraft:recipes/building_blocks/pink_terracotta").put("minecraft:recipes/building_blocks/purple_stained_hardened_clay", "minecraft:recipes/building_blocks/purple_terracotta").put("minecraft:recipes/building_blocks/red_stained_hardened_clay", "minecraft:recipes/building_blocks/red_terracotta").put("minecraft:recipes/building_blocks/white_stained_hardened_clay", "minecraft:recipes/building_blocks/white_terracotta").put("minecraft:recipes/building_blocks/yellow_stained_hardened_clay", "minecraft:recipes/building_blocks/yellow_terracotta").put("minecraft:recipes/building_blocks/acacia_wooden_slab", "minecraft:recipes/building_blocks/acacia_slab").put("minecraft:recipes/building_blocks/birch_wooden_slab", "minecraft:recipes/building_blocks/birch_slab").put("minecraft:recipes/building_blocks/dark_oak_wooden_slab", "minecraft:recipes/building_blocks/dark_oak_slab").put("minecraft:recipes/building_blocks/jungle_wooden_slab", "minecraft:recipes/building_blocks/jungle_slab").put("minecraft:recipes/building_blocks/oak_wooden_slab", "minecraft:recipes/building_blocks/oak_slab").put("minecraft:recipes/building_blocks/spruce_wooden_slab", "minecraft:recipes/building_blocks/spruce_slab").put("minecraft:recipes/building_blocks/brick_block", "minecraft:recipes/building_blocks/bricks").put("minecraft:recipes/building_blocks/chiseled_stonebrick", "minecraft:recipes/building_blocks/chiseled_stone_bricks").put("minecraft:recipes/building_blocks/end_bricks", "minecraft:recipes/building_blocks/end_stone_bricks").put("minecraft:recipes/building_blocks/lit_pumpkin", "minecraft:recipes/building_blocks/jack_o_lantern").put("minecraft:recipes/building_blocks/magma", "minecraft:recipes/building_blocks/magma_block").put("minecraft:recipes/building_blocks/melon_block", "minecraft:recipes/building_blocks/melon").put("minecraft:recipes/building_blocks/mossy_stonebrick", "minecraft:recipes/building_blocks/mossy_stone_bricks").put("minecraft:recipes/building_blocks/nether_brick", "minecraft:recipes/building_blocks/nether_bricks").put("minecraft:recipes/building_blocks/pillar_quartz_block", "minecraft:recipes/building_blocks/quartz_pillar").put("minecraft:recipes/building_blocks/red_nether_brick", "minecraft:recipes/building_blocks/red_nether_bricks").put("minecraft:recipes/building_blocks/snow", "minecraft:recipes/building_blocks/snow_block").put("minecraft:recipes/building_blocks/smooth_red_sandstone", "minecraft:recipes/building_blocks/cut_red_sandstone").put("minecraft:recipes/building_blocks/smooth_sandstone", "minecraft:recipes/building_blocks/cut_sandstone").put("minecraft:recipes/building_blocks/stonebrick", "minecraft:recipes/building_blocks/stone_bricks").put("minecraft:recipes/building_blocks/stone_stairs", "minecraft:recipes/building_blocks/cobblestone_stairs").put("minecraft:recipes/building_blocks/string_to_wool", "minecraft:recipes/building_blocks/white_wool_from_string").put("minecraft:recipes/decorations/fence", "minecraft:recipes/decorations/oak_fence").put("minecraft:recipes/decorations/purple_shulker_box", "minecraft:recipes/decorations/shulker_box").put("minecraft:recipes/decorations/slime", "minecraft:recipes/decorations/slime_block").put("minecraft:recipes/decorations/snow_layer", "minecraft:recipes/decorations/snow").put("minecraft:recipes/misc/bone_meal_from_block", "minecraft:recipes/misc/bone_meal_from_bone_block").put("minecraft:recipes/misc/bone_meal_from_bone", "minecraft:recipes/misc/bone_meal").put("minecraft:recipes/misc/gold_ingot_from_block", "minecraft:recipes/misc/gold_ingot_from_gold_block").put("minecraft:recipes/misc/iron_ingot_from_block", "minecraft:recipes/misc/iron_ingot_from_iron_block").put("minecraft:recipes/redstone/fence_gate", "minecraft:recipes/redstone/oak_fence_gate").put("minecraft:recipes/redstone/noteblock", "minecraft:recipes/redstone/note_block").put("minecraft:recipes/redstone/trapdoor", "minecraft:recipes/redstone/oak_trapdoor").put("minecraft:recipes/redstone/wooden_button", "minecraft:recipes/redstone/oak_button").put("minecraft:recipes/redstone/wooden_door", "minecraft:recipes/redstone/oak_door").put("minecraft:recipes/redstone/wooden_pressure_plate", "minecraft:recipes/redstone/oak_pressure_plate").put("minecraft:recipes/transportation/boat", "minecraft:recipes/transportation/oak_boat").put("minecraft:recipes/transportation/golden_rail", "minecraft:recipes/transportation/powered_rail").build();
 
     public AdvancementsFix(Schema schema, boolean flag) {
         super(schema, flag, "AdvancementsFix", (s) -> (String)RENAMES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java b/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
index 84e34e10e7adc02746a439c5e5a0455300e4dc4f..daf42bdafcab9dc6d8f79c5fb1ff35a21bccf8cb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
@@ -13,7 +13,7 @@ import com.mojang.serialization.Dynamic;
 import java.util.Map;
 
 public class AttributesRename extends DataFix {
-    private static final Map<String, String> RENAMES = ImmutableMap.builder().put("generic.maxHealth", "generic.max_health").put("Max Health", "generic.max_health").put("zombie.spawnReinforcements", "zombie.spawn_reinforcements").put("Spawn Reinforcements Chance", "zombie.spawn_reinforcements").put("horse.jumpStrength", "horse.jump_strength").put("Jump Strength", "horse.jump_strength").put("generic.followRange", "generic.follow_range").put("Follow Range", "generic.follow_range").put("generic.knockbackResistance", "generic.knockback_resistance").put("Knockback Resistance", "generic.knockback_resistance").put("generic.movementSpeed", "generic.movement_speed").put("Movement Speed", "generic.movement_speed").put("generic.flyingSpeed", "generic.flying_speed").put("Flying Speed", "generic.flying_speed").put("generic.attackDamage", "generic.attack_damage").put("generic.attackKnockback", "generic.attack_knockback").put("generic.attackSpeed", "generic.attack_speed").put("generic.armorToughness", "generic.armor_toughness").build();
+    private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("generic.maxHealth", "generic.max_health").put("Max Health", "generic.max_health").put("zombie.spawnReinforcements", "zombie.spawn_reinforcements").put("Spawn Reinforcements Chance", "zombie.spawn_reinforcements").put("horse.jumpStrength", "horse.jump_strength").put("Jump Strength", "horse.jump_strength").put("generic.followRange", "generic.follow_range").put("Follow Range", "generic.follow_range").put("generic.knockbackResistance", "generic.knockback_resistance").put("Knockback Resistance", "generic.knockback_resistance").put("generic.movementSpeed", "generic.movement_speed").put("Movement Speed", "generic.movement_speed").put("generic.flyingSpeed", "generic.flying_speed").put("Flying Speed", "generic.flying_speed").put("generic.attackDamage", "generic.attack_damage").put("generic.attackKnockback", "generic.attack_knockback").put("generic.attackSpeed", "generic.attack_speed").put("generic.armorToughness", "generic.armor_toughness").build();
 
     public AttributesRename(Schema schema) {
         super(schema, false);
@@ -30,10 +30,10 @@ public class AttributesRename extends DataFix {
     }
 
     private static Typed<?> fixItemStackTag(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("AttributeModifiers", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> dynamic.update("AttributeName", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("AttributeModifiers", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicIn) -> dynamicIn.update("AttributeName", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
     }
 
     private static Typed<?> fixEntity(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Attributes", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> dynamic.update("Name", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Attributes", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicIn) -> dynamicIn.update("Name", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
index 04fec0c98753679661a17c2dd33f8839bb204124..be972e0b8e6bdfe19a4e47dbdc95de7498d0f4fe 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
@@ -5,7 +5,7 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class BiomeFix extends RenameBiomesFix {
-    public static final Map<String, String> BIOMES = ImmutableMap.builder().put("minecraft:extreme_hills", "minecraft:mountains").put("minecraft:swampland", "minecraft:swamp").put("minecraft:hell", "minecraft:nether_wastes").put("minecraft:sky", "minecraft:the_end").put("minecraft:ice_flats", "minecraft:snowy_tundra").put("minecraft:ice_mountains", "minecraft:snowy_mountains").put("minecraft:mushroom_island", "minecraft:mushroom_fields").put("minecraft:mushroom_island_shore", "minecraft:mushroom_field_shore").put("minecraft:beaches", "minecraft:beach").put("minecraft:forest_hills", "minecraft:wooded_hills").put("minecraft:smaller_extreme_hills", "minecraft:mountain_edge").put("minecraft:stone_beach", "minecraft:stone_shore").put("minecraft:cold_beach", "minecraft:snowy_beach").put("minecraft:roofed_forest", "minecraft:dark_forest").put("minecraft:taiga_cold", "minecraft:snowy_taiga").put("minecraft:taiga_cold_hills", "minecraft:snowy_taiga_hills").put("minecraft:redwood_taiga", "minecraft:giant_tree_taiga").put("minecraft:redwood_taiga_hills", "minecraft:giant_tree_taiga_hills").put("minecraft:extreme_hills_with_trees", "minecraft:wooded_mountains").put("minecraft:savanna_rock", "minecraft:savanna_plateau").put("minecraft:mesa", "minecraft:badlands").put("minecraft:mesa_rock", "minecraft:wooded_badlands_plateau").put("minecraft:mesa_clear_rock", "minecraft:badlands_plateau").put("minecraft:sky_island_low", "minecraft:small_end_islands").put("minecraft:sky_island_medium", "minecraft:end_midlands").put("minecraft:sky_island_high", "minecraft:end_highlands").put("minecraft:sky_island_barren", "minecraft:end_barrens").put("minecraft:void", "minecraft:the_void").put("minecraft:mutated_plains", "minecraft:sunflower_plains").put("minecraft:mutated_desert", "minecraft:desert_lakes").put("minecraft:mutated_extreme_hills", "minecraft:gravelly_mountains").put("minecraft:mutated_forest", "minecraft:flower_forest").put("minecraft:mutated_taiga", "minecraft:taiga_mountains").put("minecraft:mutated_swampland", "minecraft:swamp_hills").put("minecraft:mutated_ice_flats", "minecraft:ice_spikes").put("minecraft:mutated_jungle", "minecraft:modified_jungle").put("minecraft:mutated_jungle_edge", "minecraft:modified_jungle_edge").put("minecraft:mutated_birch_forest", "minecraft:tall_birch_forest").put("minecraft:mutated_birch_forest_hills", "minecraft:tall_birch_hills").put("minecraft:mutated_roofed_forest", "minecraft:dark_forest_hills").put("minecraft:mutated_taiga_cold", "minecraft:snowy_taiga_mountains").put("minecraft:mutated_redwood_taiga", "minecraft:giant_spruce_taiga").put("minecraft:mutated_redwood_taiga_hills", "minecraft:giant_spruce_taiga_hills").put("minecraft:mutated_extreme_hills_with_trees", "minecraft:modified_gravelly_mountains").put("minecraft:mutated_savanna", "minecraft:shattered_savanna").put("minecraft:mutated_savanna_rock", "minecraft:shattered_savanna_plateau").put("minecraft:mutated_mesa", "minecraft:eroded_badlands").put("minecraft:mutated_mesa_rock", "minecraft:modified_wooded_badlands_plateau").put("minecraft:mutated_mesa_clear_rock", "minecraft:modified_badlands_plateau").put("minecraft:warm_deep_ocean", "minecraft:deep_warm_ocean").put("minecraft:lukewarm_deep_ocean", "minecraft:deep_lukewarm_ocean").put("minecraft:cold_deep_ocean", "minecraft:deep_cold_ocean").put("minecraft:frozen_deep_ocean", "minecraft:deep_frozen_ocean").build();
+    public static final Map<String, String> BIOMES = ImmutableMap.<String, String>builder().put("minecraft:extreme_hills", "minecraft:mountains").put("minecraft:swampland", "minecraft:swamp").put("minecraft:hell", "minecraft:nether_wastes").put("minecraft:sky", "minecraft:the_end").put("minecraft:ice_flats", "minecraft:snowy_tundra").put("minecraft:ice_mountains", "minecraft:snowy_mountains").put("minecraft:mushroom_island", "minecraft:mushroom_fields").put("minecraft:mushroom_island_shore", "minecraft:mushroom_field_shore").put("minecraft:beaches", "minecraft:beach").put("minecraft:forest_hills", "minecraft:wooded_hills").put("minecraft:smaller_extreme_hills", "minecraft:mountain_edge").put("minecraft:stone_beach", "minecraft:stone_shore").put("minecraft:cold_beach", "minecraft:snowy_beach").put("minecraft:roofed_forest", "minecraft:dark_forest").put("minecraft:taiga_cold", "minecraft:snowy_taiga").put("minecraft:taiga_cold_hills", "minecraft:snowy_taiga_hills").put("minecraft:redwood_taiga", "minecraft:giant_tree_taiga").put("minecraft:redwood_taiga_hills", "minecraft:giant_tree_taiga_hills").put("minecraft:extreme_hills_with_trees", "minecraft:wooded_mountains").put("minecraft:savanna_rock", "minecraft:savanna_plateau").put("minecraft:mesa", "minecraft:badlands").put("minecraft:mesa_rock", "minecraft:wooded_badlands_plateau").put("minecraft:mesa_clear_rock", "minecraft:badlands_plateau").put("minecraft:sky_island_low", "minecraft:small_end_islands").put("minecraft:sky_island_medium", "minecraft:end_midlands").put("minecraft:sky_island_high", "minecraft:end_highlands").put("minecraft:sky_island_barren", "minecraft:end_barrens").put("minecraft:void", "minecraft:the_void").put("minecraft:mutated_plains", "minecraft:sunflower_plains").put("minecraft:mutated_desert", "minecraft:desert_lakes").put("minecraft:mutated_extreme_hills", "minecraft:gravelly_mountains").put("minecraft:mutated_forest", "minecraft:flower_forest").put("minecraft:mutated_taiga", "minecraft:taiga_mountains").put("minecraft:mutated_swampland", "minecraft:swamp_hills").put("minecraft:mutated_ice_flats", "minecraft:ice_spikes").put("minecraft:mutated_jungle", "minecraft:modified_jungle").put("minecraft:mutated_jungle_edge", "minecraft:modified_jungle_edge").put("minecraft:mutated_birch_forest", "minecraft:tall_birch_forest").put("minecraft:mutated_birch_forest_hills", "minecraft:tall_birch_hills").put("minecraft:mutated_roofed_forest", "minecraft:dark_forest_hills").put("minecraft:mutated_taiga_cold", "minecraft:snowy_taiga_mountains").put("minecraft:mutated_redwood_taiga", "minecraft:giant_spruce_taiga").put("minecraft:mutated_redwood_taiga_hills", "minecraft:giant_spruce_taiga_hills").put("minecraft:mutated_extreme_hills_with_trees", "minecraft:modified_gravelly_mountains").put("minecraft:mutated_savanna", "minecraft:shattered_savanna").put("minecraft:mutated_savanna_rock", "minecraft:shattered_savanna_plateau").put("minecraft:mutated_mesa", "minecraft:eroded_badlands").put("minecraft:mutated_mesa_rock", "minecraft:modified_wooded_badlands_plateau").put("minecraft:mutated_mesa_clear_rock", "minecraft:modified_badlands_plateau").put("minecraft:warm_deep_ocean", "minecraft:deep_warm_ocean").put("minecraft:lukewarm_deep_ocean", "minecraft:deep_lukewarm_ocean").put("minecraft:cold_deep_ocean", "minecraft:deep_cold_ocean").put("minecraft:frozen_deep_ocean", "minecraft:deep_frozen_ocean").build();
 
     public BiomeFix(Schema schema, boolean flag) {
         super(schema, flag, "Biomes fix", BIOMES);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
index 31344fb9159f61033eabd823aa86a4c249d6098b..bb5ea649d9be4e832af6f5145e5aada2cf352b37 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
@@ -40,13 +40,13 @@ public class BitStorageAlignFix extends DataFix {
     }
 
     private Typed<?> updateHeightmaps(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Heightmaps", (dynamic2) -> dynamic2.updateMapValues((pair) -> pair.mapSecond((dynamic2) -> updateBitStorage(dynamic, dynamic2, 256, 9)))));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Heightmaps", (dynamic2) -> dynamic2.updateMapValues((pair) -> pair.mapSecond((dynamicIn2) -> updateBitStorage(dynamic, dynamicIn2, 256, 9)))));
     }
 
     private static Typed<?> updateSections(OpticFinder<?> opticFinder, OpticFinder<?> opticFinder2, OpticFinder<List<Pair<String, Dynamic<?>>>> opticFinder3, Typed<?> typed) {
-        return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> {
-                int i = typed.getOptional(opticFinder3).map((list) -> Math.max(4, DataFixUtils.ceillog2(list.size()))).orElse(0);
-                return i != 0 && !Mth.isPowerOfTwo(i) ? typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("BlockStates", (dynamic2) -> updateBitStorage(dynamic, dynamic2, 4096, i))) : typed;
+        return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> {
+                int i = typedIn.getOptional(opticFinder3).map((list) -> Math.max(4, DataFixUtils.ceillog2(list.size()))).orElse(0);
+                return i != 0 && !Mth.isPowerOfTwo(i) ? typedIn.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("BlockStates", (dynamic2) -> updateBitStorage(dynamic, dynamic2, 4096, i))) : typedIn;
             }));
     }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
index c1287656922f0182ea234ae79453b66e1969b3fb..e74a7b50cbdf15015fcb6fc00a21386d9175bcf9 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
@@ -13,7 +13,7 @@ public class BlockEntityBannerColorFix extends NamedEntityFix {
 
     public Dynamic<?> fixTag(Dynamic<?> dynamic) {
         dynamic = dynamic.update("Base", (dynamicx) -> dynamicx.createInt(15 - dynamicx.asInt(0)));
-        return dynamic.update("Patterns", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.update("Color", (dynamicx) -> dynamicx.createInt(15 - dynamicx.asInt(0))))).map(dynamicx::createList).result(), dynamicx));
+        return dynamic.update("Patterns", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamicIn) -> dynamicIn.update("Color", (dynamicIn2) -> dynamicIn2.createInt(15 - dynamicIn2.asInt(0))))).map(dynamicx::createList).result(), dynamicx));
     }
 
     protected Typed<?> fix(Typed<?> typed) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
index 5c8781febffe89c501141800da2b160a2d5d93dd..47ccd0ca23170c3cd862478730a8fda33ba1b766 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
@@ -43,8 +43,8 @@ public class BlockEntityIdFix extends DataFix {
     public TypeRewriteRule makeRule() {
         Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
         Type<?> type2 = this.getOutputSchema().getType(References.ITEM_STACK);
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY);
         return TypeRewriteRule.seq(this.convertUnchecked("item stack block entity name hook converter", type, type2), this.fixTypeEverywhere("BlockEntityIdFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> (String)ID_MAP.getOrDefault(s, s))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
index 3ea9ec7648de70bc3e0c0c6f65418407c1d3b6a9..8c6676f045fb6a5086a71e60fc71a6a2752610bf 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
@@ -17,7 +17,7 @@ public class BlockEntityUUIDFix extends AbstractUUIDFix {
     }
 
     private Dynamic<?> updateSkull(Dynamic<?> dynamic) {
-        return dynamic.get("Owner").get().map((dynamicx) -> replaceUUIDString(dynamicx, "Id", "Id").orElse(dynamicx)).map((dynamic2) -> dynamic.remove("Owner").set("SkullOwner", dynamic2)).result().orElse(dynamic);
+        return dynamic.get("Owner").get().map((dynamicx) -> replaceUUIDString(dynamicx, "Id", "Id").orElse(dynamicx)).map((dynamic2) -> dynamic.remove("Owner").set("SkullOwner", dynamic2)).result().orElse((Dynamic) dynamic);
     }
 
     private Dynamic<?> updateConduit(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
index cc453beff9635ae1389f86d40201d88f0163cb8e..f6891a378a35892a02d295993a0239676f70ce63 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
@@ -22,10 +22,10 @@ public abstract class BlockRenameFixWithJigsaw extends BlockRenameFix {
         TypeReference typeReference = References.BLOCK_ENTITY;
         String s = "minecraft:jigsaw";
         OpticFinder<?> opticFinder = DSL.namedChoice("minecraft:jigsaw", this.getInputSchema().getChoiceType(typeReference, "minecraft:jigsaw"));
-        TypeRewriteRule typeRewriteRule = this.fixTypeEverywhereTyped(this.name + " for jigsaw state", this.getInputSchema().getType(typeReference), this.getOutputSchema().getType(typeReference), (typed) -> typed.updateTyped(opticFinder, this.getOutputSchema().getChoiceType(typeReference, "minecraft:jigsaw"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("final_state", (dynamic2) -> DataFixUtils.orElse(dynamic2.asString().result().map((s) -> {
-                            int i = s.indexOf(91);
-                            int i2 = s.indexOf(123);
-                            int i3 = s.length();
+        TypeRewriteRule typeRewriteRule = this.fixTypeEverywhereTyped(this.name + " for jigsaw state", this.getInputSchema().getType(typeReference), this.getOutputSchema().getType(typeReference), (typed) -> typed.updateTyped(opticFinder, this.getOutputSchema().getChoiceType(typeReference, "minecraft:jigsaw"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("final_state", (dynamic2) -> DataFixUtils.orElse(dynamic2.asString().result().map((str) -> {
+                            int i = str.indexOf(91);
+                            int i2 = str.indexOf(123);
+                            int i3 = str.length();
                             if (i > 0) {
                                 i3 = Math.min(i3, i);
                             }
@@ -34,9 +34,9 @@ public abstract class BlockRenameFixWithJigsaw extends BlockRenameFix {
                                 i3 = Math.min(i3, i2);
                             }
 
-                            String s2 = s.substring(0, i3);
+                            String s2 = str.substring(0, i3);
                             String s3 = this.fixBlock(s2);
-                            return s3 + s.substring(i3);
+                            return s3 + str.substring(i3);
                         }).map(dynamic::createString), dynamic2)))));
         return TypeRewriteRule.seq(super.makeRule(), typeRewriteRule);
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java b/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java
index d6aa74de191db9769783d9ce280f2ddb1825a592..55e188467327ddd0d720fd3670e2acdfc885e4ea 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java
@@ -3,7 +3,7 @@ package net.minecraft.util.datafix.fixes;
 import com.google.common.collect.ImmutableMap;
 
 public final class CavesAndCliffsRenames {
-    public static final ImmutableMap<String, String> RENAMES = ImmutableMap.builder().put("minecraft:badlands_plateau", "minecraft:badlands").put("minecraft:bamboo_jungle_hills", "minecraft:bamboo_jungle").put("minecraft:birch_forest_hills", "minecraft:birch_forest").put("minecraft:dark_forest_hills", "minecraft:dark_forest").put("minecraft:desert_hills", "minecraft:desert").put("minecraft:desert_lakes", "minecraft:desert").put("minecraft:giant_spruce_taiga_hills", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_spruce_taiga", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_tree_taiga_hills", "minecraft:old_growth_pine_taiga").put("minecraft:giant_tree_taiga", "minecraft:old_growth_pine_taiga").put("minecraft:gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:jungle_edge", "minecraft:sparse_jungle").put("minecraft:jungle_hills", "minecraft:jungle").put("minecraft:modified_badlands_plateau", "minecraft:badlands").put("minecraft:modified_gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:modified_jungle_edge", "minecraft:sparse_jungle").put("minecraft:modified_jungle", "minecraft:jungle").put("minecraft:modified_wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:mountain_edge", "minecraft:windswept_hills").put("minecraft:mountains", "minecraft:windswept_hills").put("minecraft:mushroom_field_shore", "minecraft:mushroom_fields").put("minecraft:shattered_savanna", "minecraft:windswept_savanna").put("minecraft:shattered_savanna_plateau", "minecraft:windswept_savanna").put("minecraft:snowy_mountains", "minecraft:snowy_plains").put("minecraft:snowy_taiga_hills", "minecraft:snowy_taiga").put("minecraft:snowy_taiga_mountains", "minecraft:snowy_taiga").put("minecraft:snowy_tundra", "minecraft:snowy_plains").put("minecraft:stone_shore", "minecraft:stony_shore").put("minecraft:swamp_hills", "minecraft:swamp").put("minecraft:taiga_hills", "minecraft:taiga").put("minecraft:taiga_mountains", "minecraft:taiga").put("minecraft:tall_birch_forest", "minecraft:old_growth_birch_forest").put("minecraft:tall_birch_hills", "minecraft:old_growth_birch_forest").put("minecraft:wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:wooded_hills", "minecraft:forest").put("minecraft:wooded_mountains", "minecraft:windswept_forest").put("minecraft:lofty_peaks", "minecraft:jagged_peaks").put("minecraft:snowcapped_peaks", "minecraft:frozen_peaks").build();
+    public static final ImmutableMap<String, String> RENAMES = ImmutableMap.<String, String>builder().put("minecraft:badlands_plateau", "minecraft:badlands").put("minecraft:bamboo_jungle_hills", "minecraft:bamboo_jungle").put("minecraft:birch_forest_hills", "minecraft:birch_forest").put("minecraft:dark_forest_hills", "minecraft:dark_forest").put("minecraft:desert_hills", "minecraft:desert").put("minecraft:desert_lakes", "minecraft:desert").put("minecraft:giant_spruce_taiga_hills", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_spruce_taiga", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_tree_taiga_hills", "minecraft:old_growth_pine_taiga").put("minecraft:giant_tree_taiga", "minecraft:old_growth_pine_taiga").put("minecraft:gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:jungle_edge", "minecraft:sparse_jungle").put("minecraft:jungle_hills", "minecraft:jungle").put("minecraft:modified_badlands_plateau", "minecraft:badlands").put("minecraft:modified_gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:modified_jungle_edge", "minecraft:sparse_jungle").put("minecraft:modified_jungle", "minecraft:jungle").put("minecraft:modified_wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:mountain_edge", "minecraft:windswept_hills").put("minecraft:mountains", "minecraft:windswept_hills").put("minecraft:mushroom_field_shore", "minecraft:mushroom_fields").put("minecraft:shattered_savanna", "minecraft:windswept_savanna").put("minecraft:shattered_savanna_plateau", "minecraft:windswept_savanna").put("minecraft:snowy_mountains", "minecraft:snowy_plains").put("minecraft:snowy_taiga_hills", "minecraft:snowy_taiga").put("minecraft:snowy_taiga_mountains", "minecraft:snowy_taiga").put("minecraft:snowy_tundra", "minecraft:snowy_plains").put("minecraft:stone_shore", "minecraft:stony_shore").put("minecraft:swamp_hills", "minecraft:swamp").put("minecraft:taiga_hills", "minecraft:taiga").put("minecraft:taiga_mountains", "minecraft:taiga").put("minecraft:tall_birch_forest", "minecraft:old_growth_birch_forest").put("minecraft:tall_birch_hills", "minecraft:old_growth_birch_forest").put("minecraft:wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:wooded_hills", "minecraft:forest").put("minecraft:wooded_mountains", "minecraft:windswept_forest").put("minecraft:lofty_peaks", "minecraft:jagged_peaks").put("minecraft:snowcapped_peaks", "minecraft:frozen_peaks").build();
 
     private CavesAndCliffsRenames() {
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java
index b2e42841c2df2ea282a1b940375499103ac6ae8d..bd36d76e52ce6bf90b26e4518f7a50eb5244fb2c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java
@@ -12,6 +12,8 @@ import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.types.templates.List.ListType;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Dynamic;
+
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
@@ -39,11 +41,11 @@ public class ChunkBedBlockEntityInjecterFix extends DataFix {
         OpticFinder<?> opticFinder = DSL.fieldFinder("Level", type);
         OpticFinder<List<TE>> opticFinder2 = DSL.fieldFinder("TileEntities", listType);
         int i = 416;
-        return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), (dynamicOps) -> (pair) -> pair), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), (typed) -> {
+        return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), (dynamicOps) -> (pair) -> (Pair) pair), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), (typed) -> {
             Typed<?> typed2 = typed.getTyped(opticFinder);
             Dynamic<?> dynamic = typed2.get(DSL.remainderFinder());
-            int i = dynamic.get("xPos").asInt(0);
-            int i2 = dynamic.get("zPos").asInt(0);
+            int xPos = dynamic.get("xPos").asInt(0);
+            int zPos = dynamic.get("zPos").asInt(0);
             List<TE> list = Lists.newArrayList((Iterable)typed2.getOrCreate(opticFinder2));
             List<? extends Dynamic<?>> list2 = dynamic.get("Sections").asList(Function.identity());
 
@@ -53,16 +55,17 @@ public class ChunkBedBlockEntityInjecterFix extends DataFix {
                 Stream<Integer> stream = dynamic2.get("Blocks").asStream().map((dynamicx) -> dynamicx.asInt(0));
                 int i5 = 0;
 
-                for(int i6 : stream::iterator) {
+                for (Iterator<Integer> it = stream.iterator(); it.hasNext(); ) {
+                    int i6 = it.next();
                     if (416 == (i6 & 255) << 4) {
                         int i7 = i5 & 15;
                         int i8 = i5 >> 8 & 15;
                         int i9 = i5 >> 4 & 15;
                         Map<Dynamic<?>, Dynamic<?>> map = Maps.newHashMap();
                         map.put(dynamic2.createString("id"), dynamic2.createString("minecraft:bed"));
-                        map.put(dynamic2.createString("x"), dynamic2.createInt(i7 + (i << 4)));
+                        map.put(dynamic2.createString("x"), dynamic2.createInt(i7 + (xPos << 4)));
                         map.put(dynamic2.createString("y"), dynamic2.createInt(i8 + (i4 << 4)));
-                        map.put(dynamic2.createString("z"), dynamic2.createInt(i9 + (i2 << 4)));
+                        map.put(dynamic2.createString("z"), dynamic2.createInt(i9 + (zPos << 4)));
                         map.put(dynamic2.createString("color"), dynamic2.createShort((short)14));
                         list.add((type2.read(dynamic2.createMap(map)).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created bed block entity."))).getFirst());
                     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java
index af2ae85e0995e3653cacc8f8696194dd8a28302e..f679d7e59073e89702f12bc7896c6c339c35b947 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java
@@ -81,15 +81,15 @@ public class ChunkHeightAndBiomeFix extends DataFix {
                 Dynamic<?>[] dynamics = getBiomeContainers(dynamic, flag, i, mutableBoolean);
                 Dynamic<?> dynamic2 = makePalettedContainer(dynamic.createList(Stream.of(dynamic.createMap(ImmutableMap.of(dynamic.createString("Name"), dynamic.createString("minecraft:air"))))));
                 Set<String> set = Sets.newHashSet();
-                MutableObject<Supplier<ChunkProtoTickListFix.PoorMansPalettedContainer>> mutableObject = new MutableObject(() -> null);
+                MutableObject<Supplier<ChunkProtoTickListFix.PoorMansPalettedContainer>> mutableObject = new MutableObject<>(() -> null);
                 typed2 = typed2.updateTyped(opticFinder2, type4, (typedx) -> {
                     IntSet intSet = new IntOpenHashSet();
                     Dynamic<?> dynamic3 = typedx.write().result().orElseThrow(() -> new IllegalStateException("Malformed Chunk.Level.Sections"));
                     List<Dynamic<?>> list = dynamic3.asStream().map((dynamic2x) -> {
                         int i2 = dynamic2x.get("Y").asInt(0);
-                        Dynamic<?> dynamic3 = DataFixUtils.orElse(dynamic2x.get("Palette").result().flatMap((dynamic2xx) -> {
-                            dynamic2xx.asStream().map((dynamic) -> dynamic.get("Name").asString("minecraft:air")).forEach(set::add);
-                            return dynamic2x.get("BlockStates").result().map((dynamic2) -> makeOptimizedPalettedContainer(dynamic2xx, dynamic2));
+                        Dynamic<?> dynamic3In = DataFixUtils.orElse(dynamic2x.get("Palette").result().flatMap((dynamic2xx) -> {
+                            dynamic2xx.asStream().map((dynamicIn) -> dynamicIn.get("Name").asString("minecraft:air")).forEach(set::add);
+                            return dynamic2x.get("BlockStates").result().map((dynamicIn2) -> makeOptimizedPalettedContainer(dynamic2xx, dynamicIn2));
                         }), dynamic2);
                         Dynamic<?> dynamic4 = dynamic2x;
                         int i3 = i2 - i;
@@ -100,13 +100,13 @@ public class ChunkHeightAndBiomeFix extends DataFix {
                         intSet.add(i2);
                         if (dynamic2x.get("Y").asInt(Integer.MAX_VALUE) == 0) {
                             mutableObject.setValue(() -> {
-                                List<? extends Dynamic<?>> list = dynamic3.get("palette").asList(Function.identity());
-                                long[] longs = dynamic3.get("data").asLongStream().toArray();
-                                return new ChunkProtoTickListFix.PoorMansPalettedContainer(list, longs);
+                                List<? extends Dynamic<?>> listIn = dynamic3In.get("palette").asList(Function.identity());
+                                long[] longs = dynamic3In.get("data").asLongStream().toArray();
+                                return new ChunkProtoTickListFix.PoorMansPalettedContainer(listIn, longs);
                             });
                         }
 
-                        return dynamic4.set("block_states", dynamic3).remove("Palette").remove("BlockStates");
+                        return dynamic4.set("block_states", dynamic3In).remove("Palette").remove("BlockStates");
                     }).collect(Collectors.toCollection(ArrayList::new));
 
                     for(int i2 = 0; i2 < dynamics.length; ++i2) {
@@ -159,12 +159,13 @@ public class ChunkHeightAndBiomeFix extends DataFix {
             mutableBoolean.setValue(true);
 
             for(int i2 = 0; i2 < 24; ++i2) {
-                dynamics[i2] = makeBiomeContainer(dynamic, (i2) -> getOldBiome(ints, i2 * 64 + i2));
+                dynamics[i2] = makeBiomeContainer(dynamic, (i2In) -> getOldBiome(ints, i2In * 64 + i2In));
             }
         } else if (ints != null && ints.length == 1024) {
             for(int i4 = 0; i4 < 16; ++i4) {
                 int i5 = i4 - i;
-                dynamics[i5] = makeBiomeContainer(dynamic, (i2) -> getOldBiome(ints, i4 * 64 + i2));
+                int finalI = i4;
+                dynamics[i5] = makeBiomeContainer(dynamic, (i2) -> getOldBiome(ints, finalI * 64 + i2));
             }
 
             if (flag) {
@@ -250,11 +251,11 @@ public class ChunkHeightAndBiomeFix extends DataFix {
     private static <T> Dynamic<T> shiftUpgradeData(Dynamic<T> dynamic) {
         return dynamic.update("Indices", (dynamicx) -> {
             Map<Dynamic<?>, Dynamic<?>> map = new HashMap();
-            dynamicx.getMapValues().result().ifPresent((map2) -> map2.forEach((dynamic, dynamic2) -> {
+            dynamicx.getMapValues().result().ifPresent((map2) -> map2.forEach((dynamicIn, dynamic2) -> {
                     try {
-                        dynamic.asString().result().map(Integer::parseInt).ifPresent((integer) -> {
+                        dynamicIn.asString().result().map(Integer::parseInt).ifPresent((integer) -> {
                             int i = integer - -4;
-                            map.put(dynamic.createString(Integer.toString(i)), dynamic2);
+                            map.put(dynamicIn.createString(Integer.toString(i)), dynamic2);
                         });
                     } catch (NumberFormatException var4) {
                     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
index 2e363df30d9c3db13ff3cc831649ca97768f69f6..97a05e4eca6f396cca3bf58d27d6c4ff504ead50 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
@@ -561,22 +561,22 @@ public class ChunkPalettedStorageFix extends DataFix {
             this.level = dynamic;
             this.x = dynamic.get("xPos").asInt(0) << 4;
             this.z = dynamic.get("zPos").asInt(0) << 4;
-            dynamic.get("TileEntities").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamic) -> {
-                    int i = dynamic.get("x").asInt(0) - this.x & 15;
-                    int i2 = dynamic.get("y").asInt(0);
-                    int i3 = dynamic.get("z").asInt(0) - this.z & 15;
-                    int i4 = i2 << 8 | i3 << 4 | i;
-                    if (this.blockEntities.put(i4, dynamic) != null) {
-                        ChunkPalettedStorageFix.LOGGER.warn("In chunk: {}x{} found a duplicate block entity at position: [{}, {}, {}]", new Object[]{this.x, this.z, i, i2, i3});
-                    }
+            dynamic.get("TileEntities").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamicIn) -> {
+                int i = dynamicIn.get("x").asInt(0) - this.x & 15;
+                int i2 = dynamicIn.get("y").asInt(0);
+                int i3 = dynamicIn.get("z").asInt(0) - this.z & 15;
+                int i4 = i2 << 8 | i3 << 4 | i;
+                if (this.blockEntities.put(i4, dynamicIn) != null) {
+                    ChunkPalettedStorageFix.LOGGER.warn("In chunk: {}x{} found a duplicate block entity at position: [{}, {}, {}]", this.x, this.z, i, i2, i3);
+                }
 
-                }));
+            }));
             boolean flag = dynamic.get("convertedFromAlphaFormat").asBoolean(false);
-            dynamic.get("Sections").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamic) -> {
-                    ChunkPalettedStorageFix.Section section = new ChunkPalettedStorageFix.Section(dynamic);
-                    this.sides = section.upgrade(this.sides);
-                    this.sections[section.y] = section;
-                }));
+            dynamic.get("Sections").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamicIn) -> {
+                ChunkPalettedStorageFix.Section section = new ChunkPalettedStorageFix.Section(dynamicIn);
+                this.sides = section.upgrade(this.sides);
+                this.sections[section.y] = section;
+            }));
 
             for(ChunkPalettedStorageFix.Section section : this.sections) {
                 if (section != null) {
@@ -586,211 +586,211 @@ public class ChunkPalettedStorageFix extends DataFix {
                         java.util.Map.Entry<Integer, IntList> entry = (java.util.Map.Entry)var7.next();
                         int i = section.y << 12;
                         switch(entry.getKey()) {
-                        case 2:
-                            IntListIterator var30 = ((IntList)entry.getValue()).iterator();
-
-                            while(var30.hasNext()) {
-                                int i2 = var30.next();
-                                i2 |= i;
-                                Dynamic<?> dynamic2 = this.getBlock(i2);
-                                if ("minecraft:grass_block".equals(ChunkPalettedStorageFix.getName(dynamic2))) {
-                                    String s = ChunkPalettedStorageFix.getName(this.getBlock(relative(i2, ChunkPalettedStorageFix.Direction.UP)));
-                                    if ("minecraft:snow".equals(s) || "minecraft:snow_layer".equals(s)) {
-                                        this.setBlock(i2, ChunkPalettedStorageFix.SNOWY_GRASS);
+                            case 2:
+                                IntListIterator var30 = ((IntList)entry.getValue()).iterator();
+
+                                while(var30.hasNext()) {
+                                    int i2 = var30.next();
+                                    i2 |= i;
+                                    Dynamic<?> dynamic2 = this.getBlock(i2);
+                                    if ("minecraft:grass_block".equals(ChunkPalettedStorageFix.getName(dynamic2))) {
+                                        String s = ChunkPalettedStorageFix.getName(this.getBlock(relative(i2, ChunkPalettedStorageFix.Direction.UP)));
+                                        if ("minecraft:snow".equals(s) || "minecraft:snow_layer".equals(s)) {
+                                            this.setBlock(i2, ChunkPalettedStorageFix.SNOWY_GRASS);
+                                        }
                                     }
                                 }
-                            }
-                            break;
-                        case 3:
-                            IntListIterator var29 = ((IntList)entry.getValue()).iterator();
-
-                            while(var29.hasNext()) {
-                                int i3 = var29.next();
-                                i3 |= i;
-                                Dynamic<?> dynamic3 = this.getBlock(i3);
-                                if ("minecraft:podzol".equals(ChunkPalettedStorageFix.getName(dynamic3))) {
-                                    String s2 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i3, ChunkPalettedStorageFix.Direction.UP)));
-                                    if ("minecraft:snow".equals(s2) || "minecraft:snow_layer".equals(s2)) {
-                                        this.setBlock(i3, ChunkPalettedStorageFix.SNOWY_PODZOL);
+                                break;
+                            case 3:
+                                IntListIterator var29 = ((IntList)entry.getValue()).iterator();
+
+                                while(var29.hasNext()) {
+                                    int i3 = var29.next();
+                                    i3 |= i;
+                                    Dynamic<?> dynamic3 = this.getBlock(i3);
+                                    if ("minecraft:podzol".equals(ChunkPalettedStorageFix.getName(dynamic3))) {
+                                        String s2 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i3, ChunkPalettedStorageFix.Direction.UP)));
+                                        if ("minecraft:snow".equals(s2) || "minecraft:snow_layer".equals(s2)) {
+                                            this.setBlock(i3, ChunkPalettedStorageFix.SNOWY_PODZOL);
+                                        }
                                     }
                                 }
-                            }
-                            break;
-                        case 25:
-                            IntListIterator var28 = ((IntList)entry.getValue()).iterator();
-
-                            while(var28.hasNext()) {
-                                int i5 = var28.next();
-                                i5 |= i;
-                                Dynamic<?> dynamic5 = this.removeBlockEntity(i5);
-                                if (dynamic5 != null) {
-                                    String s4 = Boolean.toString(dynamic5.get("powered").asBoolean(false)) + (byte)Math.min(Math.max(dynamic5.get("note").asInt(0), 0), 24);
-                                    this.setBlock(i5, ChunkPalettedStorageFix.NOTE_BLOCK_MAP.getOrDefault(s4, ChunkPalettedStorageFix.NOTE_BLOCK_MAP.get("false0")));
+                                break;
+                            case 25:
+                                IntListIterator var28 = ((IntList)entry.getValue()).iterator();
+
+                                while(var28.hasNext()) {
+                                    int i5 = var28.next();
+                                    i5 |= i;
+                                    Dynamic<?> dynamic5 = this.removeBlockEntity(i5);
+                                    if (dynamic5 != null) {
+                                        String s4 = Boolean.toString(dynamic5.get("powered").asBoolean(false)) + (byte)Math.min(Math.max(dynamic5.get("note").asInt(0), 0), 24);
+                                        this.setBlock(i5, ChunkPalettedStorageFix.NOTE_BLOCK_MAP.getOrDefault(s4, ChunkPalettedStorageFix.NOTE_BLOCK_MAP.get("false0")));
+                                    }
                                 }
-                            }
-                            break;
-                        case 26:
-                            IntListIterator var27 = ((IntList)entry.getValue()).iterator();
-
-                            while(var27.hasNext()) {
-                                int i6 = var27.next();
-                                i6 |= i;
-                                Dynamic<?> dynamic6 = this.getBlockEntity(i6);
-                                Dynamic<?> dynamic7 = this.getBlock(i6);
-                                if (dynamic6 != null) {
-                                    int i7 = dynamic6.get("color").asInt(0);
-                                    if (i7 != 14 && i7 >= 0 && i7 < 16) {
-                                        String s5 = ChunkPalettedStorageFix.getProperty(dynamic7, "facing") + ChunkPalettedStorageFix.getProperty(dynamic7, "occupied") + ChunkPalettedStorageFix.getProperty(dynamic7, "part") + i7;
-                                        if (ChunkPalettedStorageFix.BED_BLOCK_MAP.containsKey(s5)) {
-                                            this.setBlock(i6, ChunkPalettedStorageFix.BED_BLOCK_MAP.get(s5));
+                                break;
+                            case 26:
+                                IntListIterator var27 = ((IntList)entry.getValue()).iterator();
+
+                                while(var27.hasNext()) {
+                                    int i6 = var27.next();
+                                    i6 |= i;
+                                    Dynamic<?> dynamic6 = this.getBlockEntity(i6);
+                                    Dynamic<?> dynamic7 = this.getBlock(i6);
+                                    if (dynamic6 != null) {
+                                        int i7 = dynamic6.get("color").asInt(0);
+                                        if (i7 != 14 && i7 >= 0 && i7 < 16) {
+                                            String s5 = ChunkPalettedStorageFix.getProperty(dynamic7, "facing") + ChunkPalettedStorageFix.getProperty(dynamic7, "occupied") + ChunkPalettedStorageFix.getProperty(dynamic7, "part") + i7;
+                                            if (ChunkPalettedStorageFix.BED_BLOCK_MAP.containsKey(s5)) {
+                                                this.setBlock(i6, ChunkPalettedStorageFix.BED_BLOCK_MAP.get(s5));
+                                            }
                                         }
                                     }
                                 }
-                            }
-                            break;
-                        case 64:
-                        case 71:
-                        case 193:
-                        case 194:
-                        case 195:
-                        case 196:
-                        case 197:
-                            IntListIterator var26 = ((IntList)entry.getValue()).iterator();
-
-                            while(var26.hasNext()) {
-                                int i13 = var26.next();
-                                i13 |= i;
-                                Dynamic<?> dynamic13 = this.getBlock(i13);
-                                if (ChunkPalettedStorageFix.getName(dynamic13).endsWith("_door")) {
-                                    Dynamic<?> dynamic14 = this.getBlock(i13);
-                                    if ("lower".equals(ChunkPalettedStorageFix.getProperty(dynamic14, "half"))) {
-                                        int i14 = relative(i13, ChunkPalettedStorageFix.Direction.UP);
-                                        Dynamic<?> dynamic15 = this.getBlock(i14);
-                                        String s13 = ChunkPalettedStorageFix.getName(dynamic14);
-                                        if (s13.equals(ChunkPalettedStorageFix.getName(dynamic15))) {
-                                            String s14 = ChunkPalettedStorageFix.getProperty(dynamic14, "facing");
-                                            String s15 = ChunkPalettedStorageFix.getProperty(dynamic14, "open");
-                                            String s16 = flag ? "left" : ChunkPalettedStorageFix.getProperty(dynamic15, "hinge");
-                                            String s17 = flag ? "false" : ChunkPalettedStorageFix.getProperty(dynamic15, "powered");
-                                            this.setBlock(i13, ChunkPalettedStorageFix.DOOR_MAP.get(s13 + s14 + "lower" + s16 + s15 + s17));
-                                            this.setBlock(i14, ChunkPalettedStorageFix.DOOR_MAP.get(s13 + s14 + "upper" + s16 + s15 + s17));
+                                break;
+                            case 64:
+                            case 71:
+                            case 193:
+                            case 194:
+                            case 195:
+                            case 196:
+                            case 197:
+                                IntListIterator var26 = ((IntList)entry.getValue()).iterator();
+
+                                while(var26.hasNext()) {
+                                    int i13 = var26.next();
+                                    i13 |= i;
+                                    Dynamic<?> dynamic13 = this.getBlock(i13);
+                                    if (ChunkPalettedStorageFix.getName(dynamic13).endsWith("_door")) {
+                                        Dynamic<?> dynamic14 = this.getBlock(i13);
+                                        if ("lower".equals(ChunkPalettedStorageFix.getProperty(dynamic14, "half"))) {
+                                            int i14 = relative(i13, ChunkPalettedStorageFix.Direction.UP);
+                                            Dynamic<?> dynamic15 = this.getBlock(i14);
+                                            String s13 = ChunkPalettedStorageFix.getName(dynamic14);
+                                            if (s13.equals(ChunkPalettedStorageFix.getName(dynamic15))) {
+                                                String s14 = ChunkPalettedStorageFix.getProperty(dynamic14, "facing");
+                                                String s15 = ChunkPalettedStorageFix.getProperty(dynamic14, "open");
+                                                String s16 = flag ? "left" : ChunkPalettedStorageFix.getProperty(dynamic15, "hinge");
+                                                String s17 = flag ? "false" : ChunkPalettedStorageFix.getProperty(dynamic15, "powered");
+                                                this.setBlock(i13, ChunkPalettedStorageFix.DOOR_MAP.get(s13 + s14 + "lower" + s16 + s15 + s17));
+                                                this.setBlock(i14, ChunkPalettedStorageFix.DOOR_MAP.get(s13 + s14 + "upper" + s16 + s15 + s17));
+                                            }
                                         }
                                     }
                                 }
-                            }
-                            break;
-                        case 86:
-                            IntListIterator var25 = ((IntList)entry.getValue()).iterator();
-
-                            while(var25.hasNext()) {
-                                int i10 = var25.next();
-                                i10 |= i;
-                                Dynamic<?> dynamic10 = this.getBlock(i10);
-                                if ("minecraft:carved_pumpkin".equals(ChunkPalettedStorageFix.getName(dynamic10))) {
-                                    String s7 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i10, ChunkPalettedStorageFix.Direction.DOWN)));
-                                    if ("minecraft:grass_block".equals(s7) || "minecraft:dirt".equals(s7)) {
-                                        this.setBlock(i10, ChunkPalettedStorageFix.PUMPKIN);
+                                break;
+                            case 86:
+                                IntListIterator var25 = ((IntList)entry.getValue()).iterator();
+
+                                while(var25.hasNext()) {
+                                    int i10 = var25.next();
+                                    i10 |= i;
+                                    Dynamic<?> dynamic10 = this.getBlock(i10);
+                                    if ("minecraft:carved_pumpkin".equals(ChunkPalettedStorageFix.getName(dynamic10))) {
+                                        String s7 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i10, ChunkPalettedStorageFix.Direction.DOWN)));
+                                        if ("minecraft:grass_block".equals(s7) || "minecraft:dirt".equals(s7)) {
+                                            this.setBlock(i10, ChunkPalettedStorageFix.PUMPKIN);
+                                        }
                                     }
                                 }
-                            }
-                            break;
-                        case 110:
-                            IntListIterator var24 = ((IntList)entry.getValue()).iterator();
-
-                            while(var24.hasNext()) {
-                                int i4 = var24.next();
-                                i4 |= i;
-                                Dynamic<?> dynamic4 = this.getBlock(i4);
-                                if ("minecraft:mycelium".equals(ChunkPalettedStorageFix.getName(dynamic4))) {
-                                    String s3 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i4, ChunkPalettedStorageFix.Direction.UP)));
-                                    if ("minecraft:snow".equals(s3) || "minecraft:snow_layer".equals(s3)) {
-                                        this.setBlock(i4, ChunkPalettedStorageFix.SNOWY_MYCELIUM);
+                                break;
+                            case 110:
+                                IntListIterator var24 = ((IntList)entry.getValue()).iterator();
+
+                                while(var24.hasNext()) {
+                                    int i4 = var24.next();
+                                    i4 |= i;
+                                    Dynamic<?> dynamic4 = this.getBlock(i4);
+                                    if ("minecraft:mycelium".equals(ChunkPalettedStorageFix.getName(dynamic4))) {
+                                        String s3 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i4, ChunkPalettedStorageFix.Direction.UP)));
+                                        if ("minecraft:snow".equals(s3) || "minecraft:snow_layer".equals(s3)) {
+                                            this.setBlock(i4, ChunkPalettedStorageFix.SNOWY_MYCELIUM);
+                                        }
                                     }
                                 }
-                            }
-                            break;
-                        case 140:
-                            IntListIterator var23 = ((IntList)entry.getValue()).iterator();
-
-                            while(var23.hasNext()) {
-                                int i11 = var23.next();
-                                i11 |= i;
-                                Dynamic<?> dynamic11 = this.removeBlockEntity(i11);
-                                if (dynamic11 != null) {
-                                    String s8 = dynamic11.get("Item").asString("") + dynamic11.get("Data").asInt(0);
-                                    this.setBlock(i11, ChunkPalettedStorageFix.FLOWER_POT_MAP.getOrDefault(s8, ChunkPalettedStorageFix.FLOWER_POT_MAP.get("minecraft:air0")));
-                                }
-                            }
-                            break;
-                        case 144:
-                            IntListIterator var22 = ((IntList)entry.getValue()).iterator();
-
-                            while(var22.hasNext()) {
-                                int i12 = var22.next();
-                                i12 |= i;
-                                Dynamic<?> dynamic12 = this.getBlockEntity(i12);
-                                if (dynamic12 != null) {
-                                    String s9 = String.valueOf(dynamic12.get("SkullType").asInt(0));
-                                    String s10 = ChunkPalettedStorageFix.getProperty(this.getBlock(i12), "facing");
-                                    String s12;
-                                    if (!"up".equals(s10) && !"down".equals(s10)) {
-                                        s12 = s9 + s10;
-                                    } else {
-                                        s12 = s9 + String.valueOf(dynamic12.get("Rot").asInt(0));
+                                break;
+                            case 140:
+                                IntListIterator var23 = ((IntList)entry.getValue()).iterator();
+
+                                while(var23.hasNext()) {
+                                    int i11 = var23.next();
+                                    i11 |= i;
+                                    Dynamic<?> dynamic11 = this.removeBlockEntity(i11);
+                                    if (dynamic11 != null) {
+                                        String s8 = dynamic11.get("Item").asString("") + dynamic11.get("Data").asInt(0);
+                                        this.setBlock(i11, ChunkPalettedStorageFix.FLOWER_POT_MAP.getOrDefault(s8, ChunkPalettedStorageFix.FLOWER_POT_MAP.get("minecraft:air0")));
                                     }
+                                }
+                                break;
+                            case 144:
+                                IntListIterator var22 = ((IntList)entry.getValue()).iterator();
+
+                                while(var22.hasNext()) {
+                                    int i12 = var22.next();
+                                    i12 |= i;
+                                    Dynamic<?> dynamic12 = this.getBlockEntity(i12);
+                                    if (dynamic12 != null) {
+                                        String s9 = String.valueOf(dynamic12.get("SkullType").asInt(0));
+                                        String s10 = ChunkPalettedStorageFix.getProperty(this.getBlock(i12), "facing");
+                                        String s12;
+                                        if (!"up".equals(s10) && !"down".equals(s10)) {
+                                            s12 = s9 + s10;
+                                        } else {
+                                            s12 = s9 + String.valueOf(dynamic12.get("Rot").asInt(0));
+                                        }
 
-                                    dynamic12.remove("SkullType");
-                                    dynamic12.remove("facing");
-                                    dynamic12.remove("Rot");
-                                    this.setBlock(i12, ChunkPalettedStorageFix.SKULL_MAP.getOrDefault(s12, ChunkPalettedStorageFix.SKULL_MAP.get("0north")));
+                                        dynamic12.remove("SkullType");
+                                        dynamic12.remove("facing");
+                                        dynamic12.remove("Rot");
+                                        this.setBlock(i12, ChunkPalettedStorageFix.SKULL_MAP.getOrDefault(s12, ChunkPalettedStorageFix.SKULL_MAP.get("0north")));
+                                    }
                                 }
-                            }
-                            break;
-                        case 175:
-                            IntListIterator var21 = ((IntList)entry.getValue()).iterator();
-
-                            while(var21.hasNext()) {
-                                int i15 = var21.next();
-                                i15 |= i;
-                                Dynamic<?> dynamic16 = this.getBlock(i15);
-                                if ("upper".equals(ChunkPalettedStorageFix.getProperty(dynamic16, "half"))) {
-                                    Dynamic<?> dynamic17 = this.getBlock(relative(i15, ChunkPalettedStorageFix.Direction.DOWN));
-                                    String s18 = ChunkPalettedStorageFix.getName(dynamic17);
-                                    if ("minecraft:sunflower".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_SUNFLOWER);
-                                    } else if ("minecraft:lilac".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_LILAC);
-                                    } else if ("minecraft:tall_grass".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_TALL_GRASS);
-                                    } else if ("minecraft:large_fern".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_LARGE_FERN);
-                                    } else if ("minecraft:rose_bush".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_ROSE_BUSH);
-                                    } else if ("minecraft:peony".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_PEONY);
+                                break;
+                            case 175:
+                                IntListIterator var21 = ((IntList)entry.getValue()).iterator();
+
+                                while(var21.hasNext()) {
+                                    int i15 = var21.next();
+                                    i15 |= i;
+                                    Dynamic<?> dynamic16 = this.getBlock(i15);
+                                    if ("upper".equals(ChunkPalettedStorageFix.getProperty(dynamic16, "half"))) {
+                                        Dynamic<?> dynamic17 = this.getBlock(relative(i15, ChunkPalettedStorageFix.Direction.DOWN));
+                                        String s18 = ChunkPalettedStorageFix.getName(dynamic17);
+                                        if ("minecraft:sunflower".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_SUNFLOWER);
+                                        } else if ("minecraft:lilac".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_LILAC);
+                                        } else if ("minecraft:tall_grass".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_TALL_GRASS);
+                                        } else if ("minecraft:large_fern".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_LARGE_FERN);
+                                        } else if ("minecraft:rose_bush".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_ROSE_BUSH);
+                                        } else if ("minecraft:peony".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_PEONY);
+                                        }
                                     }
                                 }
-                            }
-                            break;
-                        case 176:
-                        case 177:
-                            IntListIterator var10 = ((IntList)entry.getValue()).iterator();
-
-                            while(var10.hasNext()) {
-                                int i8 = var10.next();
-                                i8 |= i;
-                                Dynamic<?> dynamic8 = this.getBlockEntity(i8);
-                                Dynamic<?> dynamic9 = this.getBlock(i8);
-                                if (dynamic8 != null) {
-                                    int i9 = dynamic8.get("Base").asInt(0);
-                                    if (i9 != 15 && i9 >= 0 && i9 < 16) {
-                                        String s6 = ChunkPalettedStorageFix.getProperty(dynamic9, entry.getKey() == 176 ? "rotation" : "facing") + "_" + i9;
-                                        if (ChunkPalettedStorageFix.BANNER_BLOCK_MAP.containsKey(s6)) {
-                                            this.setBlock(i8, ChunkPalettedStorageFix.BANNER_BLOCK_MAP.get(s6));
+                                break;
+                            case 176:
+                            case 177:
+                                IntListIterator var10 = ((IntList)entry.getValue()).iterator();
+
+                                while(var10.hasNext()) {
+                                    int i8 = var10.next();
+                                    i8 |= i;
+                                    Dynamic<?> dynamic8 = this.getBlockEntity(i8);
+                                    Dynamic<?> dynamic9 = this.getBlock(i8);
+                                    if (dynamic8 != null) {
+                                        int i9 = dynamic8.get("Base").asInt(0);
+                                        if (i9 != 15 && i9 >= 0 && i9 < 16) {
+                                            String s6 = ChunkPalettedStorageFix.getProperty(dynamic9, entry.getKey() == 176 ? "rotation" : "facing") + "_" + i9;
+                                            if (ChunkPalettedStorageFix.BANNER_BLOCK_MAP.containsKey(s6)) {
+                                                this.setBlock(i8, ChunkPalettedStorageFix.BANNER_BLOCK_MAP.get(s6));
+                                            }
                                         }
                                     }
                                 }
-                            }
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java
index fde49a4e077b72007a3cc1dc7de3ea57a39798f0..7d6237b1a6c8a7b20130f29e37674dfcd2d569af 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java
@@ -47,23 +47,23 @@ public class ChunkProtoTickListFix extends DataFix {
                 Dynamic<?> dynamic = typedx.get(DSL.remainderFinder());
                 MutableInt mutableInt = new MutableInt();
                 Int2ObjectMap<Supplier<ChunkProtoTickListFix.PoorMansPalettedContainer>> int2ObjectMap = new Int2ObjectArrayMap();
-                typedx.getOptionalTyped(opticFinder2).ifPresent((typed) -> typed.getAllTyped(opticFinder3).forEach((typedx) -> {
-                        Dynamic<?> dynamic = typedx.get(DSL.remainderFinder());
-                        int i = dynamic.get("Y").asInt(Integer.MAX_VALUE);
+                typedx.getOptionalTyped(opticFinder2).ifPresent((typedIn) -> typedIn.getAllTyped(opticFinder3).forEach((typedIn2) -> {
+                        Dynamic<?> dynamicIn = typedIn2.get(DSL.remainderFinder());
+                        int i = dynamicIn.get("Y").asInt(Integer.MAX_VALUE);
                         if (i != Integer.MAX_VALUE) {
-                            if (typedx.getOptionalTyped(opticFinder5).isPresent()) {
+                            if (typedIn2.getOptionalTyped(opticFinder5).isPresent()) {
                                 mutableInt.setValue(Math.min(i, mutableInt.getValue()));
                             }
 
-                            typedx.getOptionalTyped(opticFinder4).ifPresent((typed) -> int2ObjectMap.put(i, Suppliers.memoize(() -> {
-                                    List<? extends Dynamic<?>> list = typed.getOptionalTyped(opticFinder6).map((typedx) -> typedx.write().result().map((dynamic) -> dynamic.asList(Function.identity())).orElse(Collections.emptyList())).orElse(Collections.emptyList());
-                                    long[] longs = (typed.get(DSL.remainderFinder())).get("data").asLongStream().toArray();
+                            typedIn2.getOptionalTyped(opticFinder4).ifPresent((typedIn3) -> int2ObjectMap.put(i, Suppliers.memoize(() -> {
+                                    List<? extends Dynamic<?>> list = typedIn3.getOptionalTyped(opticFinder6).map((typedIn4) -> typedIn4.write().result().map((dynamicIn2) -> dynamicIn2.asList(Function.identity())).orElse(Collections.emptyList())).orElse(Collections.emptyList());
+                                    long[] longs = (typedIn3.get(DSL.remainderFinder())).get("data").asLongStream().toArray();
                                     return new ChunkProtoTickListFix.PoorMansPalettedContainer(list, longs);
                                 })));
                         }
                     }));
                 byte b = mutableInt.getValue().byteValue();
-                typedx = typedx.update(DSL.remainderFinder(), (dynamicx) -> dynamicx.update("yPos", (dynamic) -> dynamic.createByte(b)));
+                typedx = typedx.update(DSL.remainderFinder(), (dynamicx) -> dynamicx.update("yPos", (dynamicIn) -> dynamicIn.createByte(b)));
                 if (!typedx.getOptionalTyped(opticFinder7).isPresent() && !dynamic.get("fluid_ticks").result().isPresent()) {
                     int i = dynamic.get("xPos").asInt(0);
                     int i2 = dynamic.get("zPos").asInt(0);
@@ -119,7 +119,7 @@ public class ChunkProtoTickListFix extends DataFix {
         int i6 = i4 >>> 4 & 15;
         int i7 = i4 >>> 8 & 15;
         String s = (String)function.apply(supplier != null ? ((ChunkProtoTickListFix.PoorMansPalettedContainer)supplier.get()).get(i5, i6, i7) : null);
-        return dynamic.createMap(ImmutableMap.builder().put(dynamic.createString("i"), dynamic.createString(s)).put(dynamic.createString("x"), dynamic.createInt(i * 16 + i5)).put(dynamic.createString("y"), dynamic.createInt(i2 * 16 + i6)).put(dynamic.createString("z"), dynamic.createInt(i3 * 16 + i7)).put(dynamic.createString("t"), dynamic.createInt(0)).put(dynamic.createString("p"), dynamic.createInt(0)).build());
+        return dynamic.createMap(ImmutableMap.<Dynamic<?>, Dynamic<?>>builder().put(dynamic.createString("i"), dynamic.createString(s)).put(dynamic.createString("x"), dynamic.createInt(i * 16 + i5)).put(dynamic.createString("y"), dynamic.createInt(i2 * 16 + i6)).put(dynamic.createString("z"), dynamic.createInt(i3 * 16 + i7)).put(dynamic.createString("t"), dynamic.createInt(0)).put(dynamic.createString("p"), dynamic.createInt(0)).build());
     }
 
     public static final class PoorMansPalettedContainer {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
index ab7931e277bfef1a6dfcb1acdb8995e8a951622b..28aebc40b4a980e0817e54882b915fe225251242 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
@@ -12,7 +12,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class ChunkStatusFix2 extends DataFix {
-    private static final Map<String, String> RENAMES_AND_DOWNGRADES = ImmutableMap.builder().put("structure_references", "empty").put("biomes", "empty").put("base", "surface").put("carved", "carvers").put("liquid_carved", "liquid_carvers").put("decorated", "features").put("lighted", "light").put("mobs_spawned", "spawn").put("finalized", "heightmaps").put("fullchunk", "full").build();
+    private static final Map<String, String> RENAMES_AND_DOWNGRADES = ImmutableMap.<String, String>builder().put("structure_references", "empty").put("biomes", "empty").put("base", "surface").put("carved", "carvers").put("liquid_carved", "liquid_carvers").put("decorated", "features").put("lighted", "light").put("mobs_spawned", "spawn").put("finalized", "heightmaps").put("fullchunk", "full").build();
 
     public ChunkStatusFix2(Schema schema, boolean flag) {
         super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
index fd900527afb969760c70feda9885d5b7cc050dcb..d9f5eeba5c135a2512ea2737aad81407e8e7029e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
@@ -11,7 +11,7 @@ import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Dynamic;
 
 public class ChunkStructuresTemplateRenameFix extends DataFix {
-    private static final ImmutableMap<String, Pair<String, ImmutableMap<String, String>>> RENAMES = ImmutableMap.builder().put("EndCity", Pair.of("ECP", ImmutableMap.builder().put("second_floor", "second_floor_1").put("third_floor", "third_floor_1").put("third_floor_c", "third_floor_2").build())).put("Mansion", Pair.of("WMP", ImmutableMap.builder().put("carpet_south", "carpet_south_1").put("carpet_west", "carpet_west_1").put("indoors_door", "indoors_door_1").put("indoors_wall", "indoors_wall_1").build())).put("Igloo", Pair.of("Iglu", ImmutableMap.builder().put("minecraft:igloo/igloo_bottom", "minecraft:igloo/bottom").put("minecraft:igloo/igloo_middle", "minecraft:igloo/middle").put("minecraft:igloo/igloo_top", "minecraft:igloo/top").build())).put("Ocean_Ruin", Pair.of("ORP", ImmutableMap.builder().put("minecraft:ruin/big_ruin1_brick", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_ruin2_brick", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_ruin3_brick", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_ruin8_brick", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_ruin1_cracked", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_ruin2_cracked", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_ruin3_cracked", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_ruin8_cracked", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_ruin1_mossy", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_ruin2_mossy", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_ruin3_mossy", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_ruin8_mossy", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_ruin_warm4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_ruin_warm5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_ruin_warm6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_ruin_warm7", "minecraft:underwater_ruin/big_warm_7").put("minecraft:ruin/ruin1_brick", "minecraft:underwater_ruin/brick_1").put("minecraft:ruin/ruin2_brick", "minecraft:underwater_ruin/brick_2").put("minecraft:ruin/ruin3_brick", "minecraft:underwater_ruin/brick_3").put("minecraft:ruin/ruin4_brick", "minecraft:underwater_ruin/brick_4").put("minecraft:ruin/ruin5_brick", "minecraft:underwater_ruin/brick_5").put("minecraft:ruin/ruin6_brick", "minecraft:underwater_ruin/brick_6").put("minecraft:ruin/ruin7_brick", "minecraft:underwater_ruin/brick_7").put("minecraft:ruin/ruin8_brick", "minecraft:underwater_ruin/brick_8").put("minecraft:ruin/ruin1_cracked", "minecraft:underwater_ruin/cracked_1").put("minecraft:ruin/ruin2_cracked", "minecraft:underwater_ruin/cracked_2").put("minecraft:ruin/ruin3_cracked", "minecraft:underwater_ruin/cracked_3").put("minecraft:ruin/ruin4_cracked", "minecraft:underwater_ruin/cracked_4").put("minecraft:ruin/ruin5_cracked", "minecraft:underwater_ruin/cracked_5").put("minecraft:ruin/ruin6_cracked", "minecraft:underwater_ruin/cracked_6").put("minecraft:ruin/ruin7_cracked", "minecraft:underwater_ruin/cracked_7").put("minecraft:ruin/ruin8_cracked", "minecraft:underwater_ruin/cracked_8").put("minecraft:ruin/ruin1_mossy", "minecraft:underwater_ruin/mossy_1").put("minecraft:ruin/ruin2_mossy", "minecraft:underwater_ruin/mossy_2").put("minecraft:ruin/ruin3_mossy", "minecraft:underwater_ruin/mossy_3").put("minecraft:ruin/ruin4_mossy", "minecraft:underwater_ruin/mossy_4").put("minecraft:ruin/ruin5_mossy", "minecraft:underwater_ruin/mossy_5").put("minecraft:ruin/ruin6_mossy", "minecraft:underwater_ruin/mossy_6").put("minecraft:ruin/ruin7_mossy", "minecraft:underwater_ruin/mossy_7").put("minecraft:ruin/ruin8_mossy", "minecraft:underwater_ruin/mossy_8").put("minecraft:ruin/ruin_warm1", "minecraft:underwater_ruin/warm_1").put("minecraft:ruin/ruin_warm2", "minecraft:underwater_ruin/warm_2").put("minecraft:ruin/ruin_warm3", "minecraft:underwater_ruin/warm_3").put("minecraft:ruin/ruin_warm4", "minecraft:underwater_ruin/warm_4").put("minecraft:ruin/ruin_warm5", "minecraft:underwater_ruin/warm_5").put("minecraft:ruin/ruin_warm6", "minecraft:underwater_ruin/warm_6").put("minecraft:ruin/ruin_warm7", "minecraft:underwater_ruin/warm_7").put("minecraft:ruin/ruin_warm8", "minecraft:underwater_ruin/warm_8").put("minecraft:ruin/big_brick_1", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_brick_2", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_brick_3", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_brick_8", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_mossy_1", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_mossy_2", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_mossy_3", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_mossy_8", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_cracked_1", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_cracked_2", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_cracked_3", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_cracked_8", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_warm_4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_warm_5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_warm_6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_warm_7", "minecraft:underwater_ruin/big_warm_7").build())).build();
+    private static final ImmutableMap<String, Pair<String, ImmutableMap<String, String>>> RENAMES = ImmutableMap.<String, Pair<String, ImmutableMap<String, String>>>builder().put("EndCity", Pair.of("ECP", ImmutableMap.<String, String>builder().put("second_floor", "second_floor_1").put("third_floor", "third_floor_1").put("third_floor_c", "third_floor_2").build())).put("Mansion", Pair.of("WMP", ImmutableMap.<String, String>builder().put("carpet_south", "carpet_south_1").put("carpet_west", "carpet_west_1").put("indoors_door", "indoors_door_1").put("indoors_wall", "indoors_wall_1").build())).put("Igloo", Pair.of("Iglu", ImmutableMap.<String, String>builder().put("minecraft:igloo/igloo_bottom", "minecraft:igloo/bottom").put("minecraft:igloo/igloo_middle", "minecraft:igloo/middle").put("minecraft:igloo/igloo_top", "minecraft:igloo/top").build())).put("Ocean_Ruin", Pair.of("ORP", ImmutableMap.<String, String>builder().put("minecraft:ruin/big_ruin1_brick", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_ruin2_brick", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_ruin3_brick", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_ruin8_brick", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_ruin1_cracked", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_ruin2_cracked", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_ruin3_cracked", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_ruin8_cracked", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_ruin1_mossy", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_ruin2_mossy", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_ruin3_mossy", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_ruin8_mossy", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_ruin_warm4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_ruin_warm5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_ruin_warm6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_ruin_warm7", "minecraft:underwater_ruin/big_warm_7").put("minecraft:ruin/ruin1_brick", "minecraft:underwater_ruin/brick_1").put("minecraft:ruin/ruin2_brick", "minecraft:underwater_ruin/brick_2").put("minecraft:ruin/ruin3_brick", "minecraft:underwater_ruin/brick_3").put("minecraft:ruin/ruin4_brick", "minecraft:underwater_ruin/brick_4").put("minecraft:ruin/ruin5_brick", "minecraft:underwater_ruin/brick_5").put("minecraft:ruin/ruin6_brick", "minecraft:underwater_ruin/brick_6").put("minecraft:ruin/ruin7_brick", "minecraft:underwater_ruin/brick_7").put("minecraft:ruin/ruin8_brick", "minecraft:underwater_ruin/brick_8").put("minecraft:ruin/ruin1_cracked", "minecraft:underwater_ruin/cracked_1").put("minecraft:ruin/ruin2_cracked", "minecraft:underwater_ruin/cracked_2").put("minecraft:ruin/ruin3_cracked", "minecraft:underwater_ruin/cracked_3").put("minecraft:ruin/ruin4_cracked", "minecraft:underwater_ruin/cracked_4").put("minecraft:ruin/ruin5_cracked", "minecraft:underwater_ruin/cracked_5").put("minecraft:ruin/ruin6_cracked", "minecraft:underwater_ruin/cracked_6").put("minecraft:ruin/ruin7_cracked", "minecraft:underwater_ruin/cracked_7").put("minecraft:ruin/ruin8_cracked", "minecraft:underwater_ruin/cracked_8").put("minecraft:ruin/ruin1_mossy", "minecraft:underwater_ruin/mossy_1").put("minecraft:ruin/ruin2_mossy", "minecraft:underwater_ruin/mossy_2").put("minecraft:ruin/ruin3_mossy", "minecraft:underwater_ruin/mossy_3").put("minecraft:ruin/ruin4_mossy", "minecraft:underwater_ruin/mossy_4").put("minecraft:ruin/ruin5_mossy", "minecraft:underwater_ruin/mossy_5").put("minecraft:ruin/ruin6_mossy", "minecraft:underwater_ruin/mossy_6").put("minecraft:ruin/ruin7_mossy", "minecraft:underwater_ruin/mossy_7").put("minecraft:ruin/ruin8_mossy", "minecraft:underwater_ruin/mossy_8").put("minecraft:ruin/ruin_warm1", "minecraft:underwater_ruin/warm_1").put("minecraft:ruin/ruin_warm2", "minecraft:underwater_ruin/warm_2").put("minecraft:ruin/ruin_warm3", "minecraft:underwater_ruin/warm_3").put("minecraft:ruin/ruin_warm4", "minecraft:underwater_ruin/warm_4").put("minecraft:ruin/ruin_warm5", "minecraft:underwater_ruin/warm_5").put("minecraft:ruin/ruin_warm6", "minecraft:underwater_ruin/warm_6").put("minecraft:ruin/ruin_warm7", "minecraft:underwater_ruin/warm_7").put("minecraft:ruin/ruin_warm8", "minecraft:underwater_ruin/warm_8").put("minecraft:ruin/big_brick_1", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_brick_2", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_brick_3", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_brick_8", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_mossy_1", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_mossy_2", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_mossy_3", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_mossy_8", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_cracked_1", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_cracked_2", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_cracked_3", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_cracked_8", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_warm_4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_warm_5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_warm_6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_warm_7", "minecraft:underwater_ruin/big_warm_7").build())).build();
 
     public ChunkStructuresTemplateRenameFix(Schema schema, boolean flag) {
         super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
index 4ab4d69d5c574bd93515975ee8dfa8fdaf232f27..e28af5a88e772514f8962487e0a4fabdffd04637 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
@@ -4,5 +4,5 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class DyeItemRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:cactus_green", "minecraft:green_dye").put("minecraft:rose_red", "minecraft:red_dye").put("minecraft:dandelion_yellow", "minecraft:yellow_dye").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:cactus_green", "minecraft:green_dye").put("minecraft:rose_red", "minecraft:red_dye").put("minecraft:dandelion_yellow", "minecraft:yellow_dye").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
index 92158735b92e2909780e3fede25bf1ae8de1e675..af73844c1130dd7ef042bcb7bca4d78dc01e53a8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
@@ -319,7 +319,7 @@ public class EntityBlockStateFix extends DataFix {
         Type<Either<Pair<String, Dynamic<?>>, Unit>> type2 = DSL.optional(DSL.field("BlockState", DSL.named(References.BLOCK_STATE.typeName(), DSL.remainderType())));
         Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
         return typed.update(type.finder(), type2, (either) -> {
-            int i = either.map((pair) -> (Integer)((Either)pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId), (unit) -> {
+            int i = either.map((pair) -> (Integer)pair.getSecond().map((integer) -> integer, EntityBlockStateFix::getBlockId), (unit) -> {
                 Optional<Number> optional = dynamic.get("TileID").asNumber().result();
                 return (Integer)optional.map(Number::intValue).orElseGet(() -> dynamic.get("Tile").asByte((byte)0) & 255);
             });
@@ -333,7 +333,7 @@ public class EntityBlockStateFix extends DataFix {
         Type<Pair<String, Dynamic<?>>> type2 = DSL.field(s3, DSL.named(References.BLOCK_STATE.typeName(), DSL.remainderType()));
         Dynamic<?> dynamic = typed.getOrCreate(DSL.remainderFinder());
         return typed.update(type.finder(), type2, (pair) -> {
-            int i = ((Either)pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId);
+            int i = pair.getSecond().map((integer) -> integer, EntityBlockStateFix::getBlockId);
             int i2 = dynamic.get(s2).asInt(0) & 15;
             return Pair.of(References.BLOCK_STATE.typeName(), BlockStateData.getTag(i << 4 | i2));
         }).set(DSL.remainderFinder(), dynamic.remove(s2));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
index 18834f82dd1bbdec870ffb20ff204006625c0c4f..aaf599a4ede02e6640d5ec2112854b0025f3eba7 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
@@ -5,8 +5,8 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class EntityCodSalmonFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:salmon_mob", "minecraft:salmon").put("minecraft:cod_mob", "minecraft:cod").build();
-    public static final Map<String, String> RENAMED_EGG_IDS = ImmutableMap.builder().put("minecraft:salmon_mob_spawn_egg", "minecraft:salmon_spawn_egg").put("minecraft:cod_mob_spawn_egg", "minecraft:cod_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:salmon_mob", "minecraft:salmon").put("minecraft:cod_mob", "minecraft:cod").build();
+    public static final Map<String, String> RENAMED_EGG_IDS = ImmutableMap.<String, String>builder().put("minecraft:salmon_mob_spawn_egg", "minecraft:salmon_spawn_egg").put("minecraft:cod_mob_spawn_egg", "minecraft:cod_spawn_egg").build();
 
     public EntityCodSalmonFix(Schema schema, boolean flag) {
         super("EntityCodSalmonFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
index 80d4719f1a85aaebe8ab6358123def4c020a6cae..86b6ad5421f251aca626d20f99b9e853e890b1ce 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
@@ -39,11 +39,11 @@ public class EntityEquipmentToArmorAndHandFix extends DataFix {
                 List<IS> list = optional.get();
                 IS object = (IS)(type.read(dynamic.emptyMap()).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created empty itemstack."))).getFirst();
                 if (!list.isEmpty()) {
-                    either = Either.left(Lists.newArrayList(new Object[]{list.get(0), object}));
+                    either = Either.left(Lists.newArrayList(list.get(0), object));
                 }
 
                 if (list.size() > 1) {
-                    List<IS> list2 = Lists.newArrayList(new Object[]{object, object, object, object});
+                    List<IS> list2 = Lists.newArrayList(object, object, object, object);
 
                     for(int i = 1; i < Math.min(list.size(), 5); ++i) {
                         list2.set(i - 1, list.get(i));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
index a8fbfef3f6afdadf5545e8062d42db06f4b42250..bf9b029315f830538729572fca53127624f3603e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
@@ -93,8 +93,8 @@ public class EntityIdFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
         Type<?> type2 = this.getOutputSchema().getType(References.ITEM_STACK);
         return TypeRewriteRule.seq(this.convertUnchecked("item stack entity name hook converter", type, type2), this.fixTypeEverywhere("EntityIdFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> (String)ID_MAP.getOrDefault(s, s))));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
index 75e58f5058a9ff1d5079b7eacab15b5b51776597..399b21112aadb2309d60237294fe6c72601d46eb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
@@ -22,8 +22,8 @@ public class EntityMinecartIdentifiersFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         return this.fixTypeEverywhere("EntityMinecartIdentifiersFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
                 if (!Objects.equals(pair.getFirst(), "Minecart")) {
                     return pair;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
index 453b2647c3cdeebc1d50ef77537ef0af9a9e8293..1d530a7013cd99c3e50bc4968416cbc5c3fccbff 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
@@ -6,7 +6,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityPufferfishRenameFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:puffer_fish_spawn_egg", "minecraft:pufferfish_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:puffer_fish_spawn_egg", "minecraft:pufferfish_spawn_egg").build();
 
     public EntityPufferfishRenameFix(Schema schema, boolean flag) {
         super("EntityPufferfishRenameFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
index 477a371e3a3c19aa1387832b89a86bcec2a1513e..a3d6ed68db43948cb432183519b2225abfbd4394 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
@@ -6,7 +6,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityRavagerRenameFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:illager_beast_spawn_egg", "minecraft:ravager_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:illager_beast_spawn_egg", "minecraft:ravager_spawn_egg").build();
 
     public EntityRavagerRenameFix(Schema schema, boolean flag) {
         super("EntityRavagerRenameFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
index c139b1927129ce0d6cde4a4db030b991a7a7a305..602387b1833ef806557776bc3136b891dc0c72e0 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
@@ -18,8 +18,8 @@ public abstract class EntityRenameFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         return this.fixTypeEverywhere(this.name, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
                 String s = (String)pair.getFirst();
                 Type<?> type = (Type)taggedChoiceType.types().get(s);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
index 2787bf3945ae8d9f58b38f4062987d09eeabcca8..6cf2aedb2fa7e5d583b9a176f1b9654f064a1e79 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
@@ -61,7 +61,7 @@ public class EntityRidingToPassengersFix extends DataFix {
                             return optional.orElseThrow(() -> new IllegalStateException("Should always have an entity tree here"));
                         }
 
-                        pair2 = (new Typed(type, dynamicOps, optional2.get())).getOptional(opticFinder).orElseThrow(() -> new IllegalStateException("Should always have an entity here"));
+                        pair2 = (new Typed<>(type, dynamicOps, optional2.get())).getOptional(opticFinder).orElseThrow(() -> new IllegalStateException("Should always have an entity here"));
                     }
                 }), this.writeAndRead("player RootVehicle injecter", type8, type9));
         }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
index 99f3abf08cd8d6118a8f05f16c3753ec8c68eb2f..3aa084bfaedb9633727b54fa6001ee407e2bb456 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
@@ -5,9 +5,9 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class EntityTheRenameningFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:commandblock_minecart", "minecraft:command_block_minecart").put("minecraft:ender_crystal", "minecraft:end_crystal").put("minecraft:snowman", "minecraft:snow_golem").put("minecraft:evocation_illager", "minecraft:evoker").put("minecraft:evocation_fangs", "minecraft:evoker_fangs").put("minecraft:illusion_illager", "minecraft:illusioner").put("minecraft:vindication_illager", "minecraft:vindicator").put("minecraft:villager_golem", "minecraft:iron_golem").put("minecraft:xp_orb", "minecraft:experience_orb").put("minecraft:xp_bottle", "minecraft:experience_bottle").put("minecraft:eye_of_ender_signal", "minecraft:eye_of_ender").put("minecraft:fireworks_rocket", "minecraft:firework_rocket").build();
-    public static final Map<String, String> RENAMED_BLOCKS = ImmutableMap.builder().put("minecraft:portal", "minecraft:nether_portal").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:stripped_oak_bark", "minecraft:stripped_oak_wood").put("minecraft:stripped_spruce_bark", "minecraft:stripped_spruce_wood").put("minecraft:stripped_birch_bark", "minecraft:stripped_birch_wood").put("minecraft:stripped_jungle_bark", "minecraft:stripped_jungle_wood").put("minecraft:stripped_acacia_bark", "minecraft:stripped_acacia_wood").put("minecraft:stripped_dark_oak_bark", "minecraft:stripped_dark_oak_wood").put("minecraft:mob_spawner", "minecraft:spawner").build();
-    public static final Map<String, String> RENAMED_ITEMS = ImmutableMap.builder().putAll(RENAMED_BLOCKS).put("minecraft:clownfish", "minecraft:tropical_fish").put("minecraft:chorus_fruit_popped", "minecraft:popped_chorus_fruit").put("minecraft:evocation_illager_spawn_egg", "minecraft:evoker_spawn_egg").put("minecraft:vindication_illager_spawn_egg", "minecraft:vindicator_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:commandblock_minecart", "minecraft:command_block_minecart").put("minecraft:ender_crystal", "minecraft:end_crystal").put("minecraft:snowman", "minecraft:snow_golem").put("minecraft:evocation_illager", "minecraft:evoker").put("minecraft:evocation_fangs", "minecraft:evoker_fangs").put("minecraft:illusion_illager", "minecraft:illusioner").put("minecraft:vindication_illager", "minecraft:vindicator").put("minecraft:villager_golem", "minecraft:iron_golem").put("minecraft:xp_orb", "minecraft:experience_orb").put("minecraft:xp_bottle", "minecraft:experience_bottle").put("minecraft:eye_of_ender_signal", "minecraft:eye_of_ender").put("minecraft:fireworks_rocket", "minecraft:firework_rocket").build();
+    public static final Map<String, String> RENAMED_BLOCKS = ImmutableMap.<String, String>builder().put("minecraft:portal", "minecraft:nether_portal").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:stripped_oak_bark", "minecraft:stripped_oak_wood").put("minecraft:stripped_spruce_bark", "minecraft:stripped_spruce_wood").put("minecraft:stripped_birch_bark", "minecraft:stripped_birch_wood").put("minecraft:stripped_jungle_bark", "minecraft:stripped_jungle_wood").put("minecraft:stripped_acacia_bark", "minecraft:stripped_acacia_wood").put("minecraft:stripped_dark_oak_bark", "minecraft:stripped_dark_oak_wood").put("minecraft:mob_spawner", "minecraft:spawner").build();
+    public static final Map<String, String> RENAMED_ITEMS = ImmutableMap.<String, String>builder().putAll(RENAMED_BLOCKS).put("minecraft:clownfish", "minecraft:tropical_fish").put("minecraft:chorus_fruit_popped", "minecraft:popped_chorus_fruit").put("minecraft:evocation_illager_spawn_egg", "minecraft:evoker_spawn_egg").put("minecraft:vindication_illager_spawn_egg", "minecraft:vindicator_spawn_egg").build();
     private static final String MINECRAFT_BRED = "minecraft:bred_";
 
     public EntityTheRenameningFix(Schema schema, boolean flag) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
index 3519f81d2b5fe2a381cf3cf38a298ebfd07e175a..a08f9bc5fe0a7666a119e67b4db3b143e39d08e1 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
@@ -65,9 +65,9 @@ public class EntityUUIDFix extends AbstractUUIDFix {
     }
 
     private static Dynamic<?> updatePiglin(Dynamic<?> dynamic) {
-        return dynamic.update("Brain", (dynamicx) -> dynamicx.update("memories", (dynamic) -> dynamic.update("minecraft:angry_at", (dynamicx) -> replaceUUIDString(dynamicx, "value", "value").orElseGet(() -> {
+        return dynamic.update("Brain", (dynamicx) -> dynamicx.update("memories", (dynamicIn) -> dynamicIn.update("minecraft:angry_at", (dynamicIn2) -> replaceUUIDString(dynamicIn2, "value", "value").orElseGet(() -> {
                         LOGGER.warn("angry_at has no value.");
-                        return dynamicx;
+                        return dynamicIn2;
                     }))));
     }
 
@@ -120,7 +120,7 @@ public class EntityUUIDFix extends AbstractUUIDFix {
     }
 
     public static Dynamic<?> updateLivingEntity(Dynamic<?> dynamic) {
-        return dynamic.update("Attributes", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> dynamicx.update("Modifiers", (dynamic2) -> dynamicx.createList(dynamic2.asStream().map((dynamic) -> replaceUUIDLeastMost(dynamic, "UUID", "UUID").orElse(dynamic)))))));
+        return dynamic.update("Attributes", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> dynamicx.update("Modifiers", (dynamicIn2) -> dynamicx.createList(dynamicIn2.asStream().map((dynamicIn3) -> replaceUUIDLeastMost(dynamicIn3, "UUID", "UUID").orElse(dynamicIn3)))))));
     }
 
     private static Dynamic<?> updateProjectile(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
index 474d047f94a638d026010f7b19ad3b1c14f66e41..86b7ab5bb3b298948ed8578d2eb8fb7dc7f5ff31 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
@@ -6,7 +6,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityZombifiedPiglinRenameFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:zombie_pigman_spawn_egg", "minecraft:zombified_piglin_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:zombie_pigman_spawn_egg", "minecraft:zombified_piglin_spawn_egg").build();
 
     public EntityZombifiedPiglinRenameFix(Schema schema) {
         super("EntityZombifiedPiglinRenameFix", schema, true);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java b/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
index 7b3b50ba4d430b200f791b8c41392e9d7b9b0981..731f5c89fba9dd9e5e595e0370ecfe79b30160cb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
@@ -24,6 +24,6 @@ public class ForcePoiRebuild extends DataFix {
     }
 
     private static <T> Dynamic<T> cap(Dynamic<T> dynamic) {
-        return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.remove("Valid"))));
+        return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond(((dynamicIn) -> dynamicIn.remove("Valid")))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
index 29a0c27bad66157a3b6f92bf08c7c8b40f046826..2f4aeef113caa0aba4e30c3dd29cbd445f4b3c21 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
@@ -50,8 +50,8 @@ public class FurnaceRecipeFix extends DataFix {
             int i3 = dynamic.get(s2).asInt(0);
             if (i3 > 0) {
                 optional.ifPresent((dynamicx) -> {
-                    Optional<? extends Pair<R, ? extends Dynamic<?>>> optional = type.read(dynamicx).result();
-                    optional.ifPresent((pair) -> list.add(Pair.of(pair.getFirst(), i3)));
+                    Optional<? extends Pair<R, ? extends Dynamic<?>>> optionalIn = type.read(dynamicx).result();
+                    optionalIn.ifPresent((pair) -> list.add(Pair.of(pair.getFirst(), i3)));
                 });
             }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
index 52e51a0a76a5b73f0d9daa7dae770dbf56d26c6f..d496524f3cc41951a463691a7df6a5e43a3fd57a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
@@ -12,6 +12,6 @@ public class GossipUUIDFix extends NamedEntityFix {
     }
 
     protected Typed<?> fix(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Gossips", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> AbstractUUIDFix.replaceUUIDLeastMost(dynamic, "Target", "Target").orElse(dynamic))).map(dynamicx::createList), dynamicx)));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Gossips", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicIn) -> AbstractUUIDFix.replaceUUIDLeastMost(dynamicIn, "Target", "Target").orElse(dynamicIn))).map(dynamicx::createList), dynamicx)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java b/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
index 83e7f2c00601fb69c078a2e5e3eb288b0091a11f..9c32be3cf3f20efbafa565b3d6f593702e324aa5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
@@ -23,7 +23,7 @@ public class IglooMetadataRemovalFix extends DataFix {
     }
 
     private static <T> Dynamic<T> removeIglooPieces(Dynamic<T> dynamic) {
-        return dynamic.asStreamOpt().map((stream) -> stream.filter((dynamic) -> !isIglooPiece(dynamic))).map(dynamic::createList).result().orElse(dynamic);
+        return dynamic.asStreamOpt().map((stream) -> stream.filter((dynamicIn) -> !isIglooPiece(dynamicIn))).map(dynamic::createList).result().orElse(dynamic);
     }
 
     private static boolean isIglooPiece(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
index 0162f7fc0c14fccdf7637ef439daafe8100e9c21..e13739ff6eda2fa20e9bcf718296cec8f1b66a37 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
@@ -20,7 +20,7 @@ public class ItemLoreFix extends DataFix {
     protected TypeRewriteRule makeRule() {
         Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
         OpticFinder<?> opticFinder = type.findField("tag");
-        return this.fixTypeEverywhereTyped("Item Lore componentize", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("display", (dynamicx) -> dynamicx.update("Lore", (dynamic) -> DataFixUtils.orElse(dynamic.asStreamOpt().map(ItemLoreFix::fixLoreList).map(dynamic::createList).result(), dynamic))))));
+        return this.fixTypeEverywhereTyped("Item Lore componentize", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("display", (dynamicx) -> dynamicx.update("Lore", (dynamicIn) -> DataFixUtils.orElse(dynamicIn.asStreamOpt().map(ItemLoreFix::fixLoreList).map(dynamicIn::createList).result(), dynamicIn))))));
     }
 
     private static <T> Stream<Dynamic<T>> fixLoreList(Stream<Dynamic<T>> stream) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
index c407f82326ff631ac1fb1344a41a5a87e6e07d0f..fed9a916b296910074bea760c4ba5991c0df47fe 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
@@ -61,11 +61,11 @@ public class ItemStackEnchantmentNamesFix extends DataFix {
     }
 
     private Dynamic<?> fixTag(Dynamic<?> dynamic) {
-        Optional<? extends Dynamic<?>> optional = dynamic.get("ench").asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.set("id", dynamic.createString((String)MAP.getOrDefault(dynamic.get("id").asInt(0), "null"))))).map(dynamic::createList).result();
+        Optional<? extends Dynamic<?>> optional = dynamic.get("ench").asStreamOpt().map((stream) -> stream.map((dynamicIn) -> dynamicIn.set("id", dynamicIn.createString((String)MAP.getOrDefault(dynamicIn.get("id").asInt(0), "null"))))).map(dynamic::createList).result();
         if (optional.isPresent()) {
             dynamic = dynamic.remove("ench").set("Enchantments", optional.get());
         }
 
-        return dynamic.update("StoredEnchantments", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.set("id", dynamic.createString((String)MAP.getOrDefault(dynamic.get("id").asInt(0), "null"))))).map(dynamicx::createList).result(), dynamicx));
+        return dynamic.update("StoredEnchantments", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamicIn) -> dynamicIn.set("id", dynamicIn.createString((String)MAP.getOrDefault(dynamicIn.get("id").asInt(0), "null"))))).map(dynamicx::createList).result(), dynamicx));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
index 6cb5056748301b3d82c400700d6fc9ada9f6cfda..8c1832c2c2cb732d447dda4c46b01725def158e7 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
@@ -19,11 +19,11 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix {
     }
 
     public Dynamic<?> fixTag(Dynamic<?> dynamic) {
-        return dynamic.update("pages", (dynamic2) -> DataFixUtils.orElse(dynamic2.asStreamOpt().map((stream) -> stream.map((dynamic) -> {
-                    if (!dynamic.asString().result().isPresent()) {
-                        return dynamic;
+        return dynamic.update("pages", (dynamic2) -> DataFixUtils.orElse(dynamic2.asStreamOpt().map((stream) -> stream.map((dynamicIn) -> {
+                    if (!dynamicIn.asString().result().isPresent()) {
+                        return dynamicIn;
                     } else {
-                        String s = dynamic.asString("");
+                        String s = dynamicIn.asString("");
                         Component component = null;
                         if (!"null".equals(s) && !StringUtils.isEmpty(s)) {
                             if (s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"' || s.charAt(0) == '{' && s.charAt(s.length() - 1) == '}') {
@@ -59,7 +59,7 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix {
                             component = TextComponent.EMPTY;
                         }
 
-                        return dynamic.createString(Component.Serializer.toJson(component));
+                        return dynamicIn.createString(Component.Serializer.toJson(component));
                     }
                 })).map(dynamic::createList).result(), dynamic.emptyList()));
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java b/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
index c3c2e1e17d000e76d818807ad112dde8c21347f6..0cb5d6f58b66472a555479a7c66912f43371c10f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
@@ -10,7 +10,7 @@ import java.util.Map;
 import java.util.Optional;
 
 public class JigsawRotationFix extends DataFix {
-    private static final Map<String, String> RENAMES = ImmutableMap.builder().put("down", "down_south").put("up", "up_north").put("north", "north_up").put("south", "south_up").put("west", "west_up").put("east", "east_up").build();
+    private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("down", "down_south").put("up", "up_north").put("north", "north_up").put("south", "south_up").put("west", "west_up").put("east", "east_up").build();
 
     public JigsawRotationFix(Schema schema, boolean flag) {
         super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
index 7183ae5fb148fe4efd42af474ffe16bc437cb277..629cc5e62d2c1d3b4a21851c54f3b66fe0409232 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
@@ -73,10 +73,10 @@ public class LeavesFix extends DataFix {
             OpticFinder<?> opticFinder3 = DSL.typeFinder(type3);
             return this.fixTypeEverywhereTyped("Leaves fix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> {
                     int[] ints = new int[]{0};
-                    Typed<?> typed2 = typedx.updateTyped(opticFinder2, (typed) -> {
-                        Int2ObjectMap<LeavesFix.LeavesSection> int2ObjectMap = new Int2ObjectOpenHashMap(typed.getAllTyped(opticFinder3).stream().map((typedx) -> new LeavesFix.LeavesSection(typedx, this.getInputSchema())).collect(Collectors.toMap(LeavesFix.Section::getIndex, (leavesSection) -> leavesSection)));
+                    Typed<?> typed2 = typedx.updateTyped(opticFinder2, (typedIn) -> {
+                        Int2ObjectMap<LeavesFix.LeavesSection> int2ObjectMap = new Int2ObjectOpenHashMap(typedIn.getAllTyped(opticFinder3).stream().map((typedIn2) -> new LeavesFix.LeavesSection(typedIn2, this.getInputSchema())).collect(Collectors.toMap(LeavesFix.Section::getIndex, (leavesSection) -> leavesSection)));
                         if (int2ObjectMap.values().stream().allMatch(LeavesFix.Section::isSkippable)) {
-                            return typed;
+                            return typedIn;
                         } else {
                             List<IntSet> list = Lists.newArrayList();
 
@@ -135,7 +135,7 @@ public class LeavesFix extends DataFix {
                                 }
                             }
 
-                            return typed.updateTyped(opticFinder3, (typedx) -> ((LeavesFix.LeavesSection)int2ObjectMap.get((typedx.get(DSL.remainderFinder())).get("Y").asInt(0))).write(typedx));
+                            return typedIn.updateTyped(opticFinder3, (typedIn2) -> ((LeavesFix.LeavesSection)int2ObjectMap.get((typedIn2.get(DSL.remainderFinder())).get("Y").asInt(0))).write(typedIn2));
                         }
                     });
                     if (ints[0] != 0) {
@@ -295,7 +295,7 @@ public class LeavesFix extends DataFix {
                 throw new IllegalStateException("Block state type is not what was expected.");
             } else {
                 Optional<List<Pair<String, Dynamic<?>>>> optional = typed.getOptional(this.paletteFinder);
-                this.palette = optional.map((list) -> list.stream().map(Pair::getSecond).collect(Collectors.toList())).orElse(ImmutableList.of());
+                this.palette = (List) optional.map((list) -> list.stream().map(Pair::getSecond).collect(Collectors.toList())).orElse(ImmutableList.of());
                 Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
                 this.index = dynamic.get("Y").asInt(0);
                 this.readStorage(dynamic);
@@ -314,7 +314,7 @@ public class LeavesFix extends DataFix {
         }
 
         public Typed<?> write(Typed<?> typed) {
-            return this.isSkippable() ? typed : typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.set("BlockStates", dynamic.createLongList(Arrays.stream(this.storage.getRaw())))).set(this.paletteFinder, this.palette.stream().map((dynamic) -> Pair.of(References.BLOCK_STATE.typeName(), dynamic)).collect(Collectors.toList()));
+            return this.isSkippable() ? typed : typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.set("BlockStates", dynamic.createLongList(Arrays.stream(this.storage.getRaw())))).set((OpticFinder) this.paletteFinder, this.palette.stream().map((dynamic) -> Pair.of(References.BLOCK_STATE.typeName(), dynamic)).collect(Collectors.toList()));
         }
 
         public boolean isSkippable() {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
index fbe410a9a98f78629775a235198bfb4bb940eb2b..6463d3f3efe1aeb27bb6b941180829a23f82b35e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
@@ -59,16 +59,16 @@ public class LevelFlatGeneratorInfoFix extends DataFix {
                 stringBuilder.append((String)StreamSupport.stream(LAYER_SPLITTER.split(s3).spliterator(), false).map((sx) -> {
                     List<String> list = splitter.splitToList(sx);
                     int i2;
-                    String s2;
+                    String s2In;
                     if (list.size() == 2) {
                         i2 = NumberUtils.toInt((String)list.get(0));
-                        s2 = (String)list.get(1);
+                        s2In = (String)list.get(1);
                     } else {
                         i2 = 1;
-                        s2 = (String)list.get(0);
+                        s2In = (String)list.get(0);
                     }
 
-                    List<String> list2 = BLOCK_SPLITTER.splitToList(s2);
+                    List<String> list2 = BLOCK_SPLITTER.splitToList(s2In);
                     int i4 = ((String)list2.get(0)).equals("minecraft") ? 1 : 0;
                     String s4 = (String)list2.get(i4);
                     int i5 = i == 3 ? EntityBlockStateFix.getBlockId("minecraft:" + s4) : NumberUtils.toInt(s4, 0);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
index cfda875528ebd1dbcc4c82b67a5eece8e0076ca0..c6f5290e7d21b49f57277663212aaa64e8f0168c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
@@ -27,13 +27,13 @@ public class LevelUUIDFix extends AbstractUUIDFix {
     }
 
     private Dynamic<?> updateDragonFight(Dynamic<?> dynamic) {
-        return dynamic.update("DimensionData", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("DragonFight", (dynamicx) -> replaceUUIDLeastMost(dynamicx, "DragonUUID", "Dragon").orElse(dynamicx)))));
+        return dynamic.update("DimensionData", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicIn) -> dynamicIn.update("DragonFight", (dynamicIn2) -> replaceUUIDLeastMost(dynamicIn2, "DragonUUID", "Dragon").orElse(dynamicIn2)))));
     }
 
     private Dynamic<?> updateCustomBossEvents(Dynamic<?> dynamic) {
-        return dynamic.update("CustomBossEvents", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("Players", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> createUUIDFromML(dynamicx).orElseGet(() -> {
+        return dynamic.update("CustomBossEvents", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicIn) -> dynamicIn.update("Players", (dynamic2) -> dynamicIn.createList(dynamic2.asStream().map((dynamicIn2) -> createUUIDFromML(dynamicIn2).orElseGet(() -> {
                                 LOGGER.warn("CustomBossEvents contains invalid UUIDs.");
-                                return dynamicx;
+                                return dynamicIn2;
                             })))))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java b/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
index d968b56338b5c1fb7489c64edfbbd8085fad9ca3..1acbabaf3703a9308a2756f4bfdecab593c28544 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
@@ -50,7 +50,7 @@ public class MissingDimensionFix extends DataFix {
             return this.fixTypeEverywhereTyped("MissingDimensionFix", type2, (typed) -> typed.updateTyped(fieldFinder, (typed2) -> typed2.updateTyped(opticFinder, (typed2x) -> {
                         if (!(typed2x.getValue() instanceof List)) {
                             throw new IllegalStateException("List exptected");
-                        } else if ((typed2x.getValue()).isEmpty()) {
+                        } else if (((List)typed2x.getValue()).isEmpty()) {
                             Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
                             Dynamic<?> dynamic2 = this.recreateSettings(dynamic);
                             return DataFixUtils.orElse(compoundListType.readTyped(dynamic2).result().map(Pair::getFirst), typed2x);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
index f46a0e0129201aee7bc227b03d90c9c6a8daf54c..06281588fa5e6fcc640fbea4bfb942d8d26fa1b5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
@@ -32,10 +32,10 @@ public class MobSpawnerEntityIdentifiersFix extends DataFix {
 
             Optional<? extends Stream<? extends Dynamic<?>>> optional2 = dynamic.get("SpawnPotentials").asStreamOpt().result();
             if (optional2.isPresent()) {
-                dynamic = dynamic.set("SpawnPotentials", dynamic.createList(((Stream)optional2.get()).map((dynamicx) -> {
-                    Optional<String> optional = dynamicx.get("Type").asString().result();
-                    if (optional.isPresent()) {
-                        Dynamic<?> dynamic2 = (DataFixUtils.orElse(dynamicx.get("Properties").result(), dynamicx.emptyMap())).set("id", dynamicx.createString((String)optional.get()));
+                dynamic = dynamic.set("SpawnPotentials", dynamic.createList((optional2.get()).map((dynamicx) -> {
+                    Optional<String> optionalIn = dynamicx.get("Type").asString().result();
+                    if (optionalIn.isPresent()) {
+                        Dynamic<?> dynamic2 = (DataFixUtils.orElse(dynamicx.get("Properties").result(), dynamicx.emptyMap())).set("id", dynamicx.createString((String)optionalIn.get()));
                         return dynamicx.set("Entity", dynamic2).remove("Type").remove("Properties");
                     } else {
                         return dynamicx;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java b/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
index 69695f1d64c4a3da5f758e280bf676ddfb9a2149..5c016485c545b2970ad736777a03f8129f04355f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
@@ -34,7 +34,7 @@ public class NewVillageFix extends DataFix {
         OpticFinder<?> opticFinder2 = opticFinder.type().findField("Structures");
         OpticFinder<?> opticFinder3 = opticFinder2.type().findField("Starts");
         OpticFinder<List<Pair<String, SF>>> opticFinder4 = compoundListType.finder();
-        return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("NewVillageFix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.updateTyped(opticFinder3, (typedx) -> typedx.update(opticFinder4, (list) -> list.stream().filter((pair) -> !Objects.equals(pair.getFirst(), "Village")).map((pair) -> pair.mapFirst((s) -> s.equals("New_Village") ? "Village" : s)).collect(Collectors.toList()))).update(DSL.remainderFinder(), (dynamic) -> dynamic.update("References", (dynamicx) -> {
+        return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("NewVillageFix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.updateTyped(opticFinder3, (typedIn2) -> typedIn2.update(opticFinder4, (list) -> list.stream().filter((pair) -> !Objects.equals(pair.getFirst(), "Village")).map((pair) -> pair.mapFirst((s) -> s.equals("New_Village") ? "Village" : s)).collect(Collectors.toList()))).update(DSL.remainderFinder(), (dynamic) -> dynamic.update("References", (dynamicx) -> {
                             Optional<? extends Dynamic<?>> optional = dynamicx.get("New_Village").result();
                             return (DataFixUtils.orElse(optional.map((dynamic2) -> dynamicx.remove("New_Village").set("Village", dynamic2)), dynamicx)).remove("Village");
                         }))))), this.fixTypeEverywhereTyped("NewVillageStartFix", type2, (typed) -> typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("id", (dynamicx) -> Objects.equals(NamespacedSchema.ensureNamespaced(dynamicx.asString("")), "minecraft:new_village") ? dynamicx.createString("minecraft:village") : dynamicx))));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
index 62fcad9c9abd9ef77737352ccb57c6085b0bcf7c..9045fe84651448810f62d8a4f40fbcc43f27c4f2 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
@@ -158,6 +158,6 @@ public class OptionsKeyLwjgl3Fix extends DataFix {
                         } else {
                             return Pair.of(entry.getKey(), entry.getValue());
                         }
-                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse(dynamic)));
+                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse((Dynamic) dynamic)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java
index 518c64d127f65bbb8f9d1bebfd38ee43bd11ec83..002e4b17d647cbdef70d1e0b275de9a4aa6592b9 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java
@@ -24,6 +24,6 @@ public class OptionsKeyTranslationFix extends DataFix {
                         }
 
                         return Pair.of(entry.getKey(), entry.getValue());
-                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse(dynamic)));
+                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse((Dynamic) dynamic)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OverreachingTickFix.java b/src/main/java/net/minecraft/util/datafix/fixes/OverreachingTickFix.java
index 3e5170fa5b84db9e3dd96f6dcf4b3577f2bf24c6..87fcaca84f958f7ace494f3feac556f2fde88882 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OverreachingTickFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OverreachingTickFix.java
@@ -25,9 +25,9 @@ public class OverreachingTickFix extends DataFix {
             return typed.update(DSL.remainderFinder(), (dynamic) -> {
                 int i = dynamic.get("xPos").asInt(0);
                 int i2 = dynamic.get("zPos").asInt(0);
-                Optional<? extends Dynamic<?>> optional2 = dynamic.get("fluid_ticks").get().result();
-                dynamic = extractOverreachingTicks(dynamic, i, i2, optional2, "neighbor_block_ticks");
-                return extractOverreachingTicks(dynamic, i, i2, optional2, "neighbor_fluid_ticks");
+                Optional<? extends Dynamic<?>> optional2In = dynamic.get("fluid_ticks").get().result();
+                dynamic = extractOverreachingTicks(dynamic, i, i2, optional2In, "neighbor_block_ticks");
+                return extractOverreachingTicks(dynamic, i, i2, optional2In, "neighbor_fluid_ticks");
             });
         });
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java b/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java
index a38fc4a8565c6290d0f81eee7bf3b9ff6b76bb30..d1c0b71c12f072177115c66895ecfe808996169d 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/PoiTypeRename.java
@@ -26,11 +26,11 @@ public abstract class PoiTypeRename extends DataFix {
     }
 
     private <T> Dynamic<T> cap(Dynamic<T> dynamic) {
-        return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("Records", (dynamicx) -> DataFixUtils.orElse(this.renameRecords(dynamicx), dynamicx)))));
+        return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicIn) -> dynamicIn.update("Records", (dynamicIn2) -> DataFixUtils.orElse(this.renameRecords(dynamicIn2), dynamicIn2)))));
     }
 
     private <T> Optional<Dynamic<T>> renameRecords(Dynamic<T> dynamic) {
-        return dynamic.asStreamOpt().map((stream) -> dynamic.createList(stream.map((dynamicx) -> dynamicx.update("type", (dynamic) -> DataFixUtils.orElse(dynamic.asString().map(this::rename).map(dynamic::createString).result(), dynamic))))).result();
+        return dynamic.asStreamOpt().map((stream) -> dynamic.createList(stream.map((dynamicx) -> dynamicx.update("type", (dynamicIn) -> DataFixUtils.orElse(dynamicIn.asString().map(this::rename).map(dynamicIn::createString).result(), dynamicIn))))).result();
     }
 
     protected abstract String rename(String var1);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
index cb0fee86cdcf2b29d51c3a95001a903d5b199a71..4a3a0310c3f44e002633d3f72109fdc19c9e947c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
@@ -5,7 +5,7 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class RecipesFix extends RecipesRenameFix {
-    private static final Map<String, String> RECIPES = ImmutableMap.builder().put("minecraft:acacia_wooden_slab", "minecraft:acacia_slab").put("minecraft:birch_wooden_slab", "minecraft:birch_slab").put("minecraft:black_stained_hardened_clay", "minecraft:black_terracotta").put("minecraft:blue_stained_hardened_clay", "minecraft:blue_terracotta").put("minecraft:boat", "minecraft:oak_boat").put("minecraft:bone_meal_from_block", "minecraft:bone_meal_from_bone_block").put("minecraft:bone_meal_from_bone", "minecraft:bone_meal").put("minecraft:brick_block", "minecraft:bricks").put("minecraft:brown_stained_hardened_clay", "minecraft:brown_terracotta").put("minecraft:chiseled_stonebrick", "minecraft:chiseled_stone_bricks").put("minecraft:cyan_stained_hardened_clay", "minecraft:cyan_terracotta").put("minecraft:dark_oak_wooden_slab", "minecraft:dark_oak_slab").put("minecraft:end_bricks", "minecraft:end_stone_bricks").put("minecraft:fence_gate", "minecraft:oak_fence_gate").put("minecraft:fence", "minecraft:oak_fence").put("minecraft:golden_rail", "minecraft:powered_rail").put("minecraft:gold_ingot_from_block", "minecraft:gold_ingot_from_gold_block").put("minecraft:gray_stained_hardened_clay", "minecraft:gray_terracotta").put("minecraft:green_stained_hardened_clay", "minecraft:green_terracotta").put("minecraft:iron_ingot_from_block", "minecraft:iron_ingot_from_iron_block").put("minecraft:jungle_wooden_slab", "minecraft:jungle_slab").put("minecraft:light_blue_stained_hardened_clay", "minecraft:light_blue_terracotta").put("minecraft:light_gray_stained_hardened_clay", "minecraft:light_gray_terracotta").put("minecraft:lime_stained_hardened_clay", "minecraft:lime_terracotta").put("minecraft:lit_pumpkin", "minecraft:jack_o_lantern").put("minecraft:magenta_stained_hardened_clay", "minecraft:magenta_terracotta").put("minecraft:magma", "minecraft:magma_block").put("minecraft:melon_block", "minecraft:melon").put("minecraft:mossy_stonebrick", "minecraft:mossy_stone_bricks").put("minecraft:noteblock", "minecraft:note_block").put("minecraft:oak_wooden_slab", "minecraft:oak_slab").put("minecraft:orange_stained_hardened_clay", "minecraft:orange_terracotta").put("minecraft:pillar_quartz_block", "minecraft:quartz_pillar").put("minecraft:pink_stained_hardened_clay", "minecraft:pink_terracotta").put("minecraft:purple_shulker_box", "minecraft:shulker_box").put("minecraft:purple_stained_hardened_clay", "minecraft:purple_terracotta").put("minecraft:red_nether_brick", "minecraft:red_nether_bricks").put("minecraft:red_stained_hardened_clay", "minecraft:red_terracotta").put("minecraft:slime", "minecraft:slime_block").put("minecraft:smooth_red_sandstone", "minecraft:cut_red_sandstone").put("minecraft:smooth_sandstone", "minecraft:cut_sandstone").put("minecraft:snow_layer", "minecraft:snow").put("minecraft:snow", "minecraft:snow_block").put("minecraft:speckled_melon", "minecraft:glistering_melon_slice").put("minecraft:spruce_wooden_slab", "minecraft:spruce_slab").put("minecraft:stonebrick", "minecraft:stone_bricks").put("minecraft:stone_stairs", "minecraft:cobblestone_stairs").put("minecraft:string_to_wool", "minecraft:white_wool_from_string").put("minecraft:trapdoor", "minecraft:oak_trapdoor").put("minecraft:white_stained_hardened_clay", "minecraft:white_terracotta").put("minecraft:wooden_button", "minecraft:oak_button").put("minecraft:wooden_door", "minecraft:oak_door").put("minecraft:wooden_pressure_plate", "minecraft:oak_pressure_plate").put("minecraft:yellow_stained_hardened_clay", "minecraft:yellow_terracotta").build();
+    private static final Map<String, String> RECIPES = ImmutableMap.<String, String>builder().put("minecraft:acacia_wooden_slab", "minecraft:acacia_slab").put("minecraft:birch_wooden_slab", "minecraft:birch_slab").put("minecraft:black_stained_hardened_clay", "minecraft:black_terracotta").put("minecraft:blue_stained_hardened_clay", "minecraft:blue_terracotta").put("minecraft:boat", "minecraft:oak_boat").put("minecraft:bone_meal_from_block", "minecraft:bone_meal_from_bone_block").put("minecraft:bone_meal_from_bone", "minecraft:bone_meal").put("minecraft:brick_block", "minecraft:bricks").put("minecraft:brown_stained_hardened_clay", "minecraft:brown_terracotta").put("minecraft:chiseled_stonebrick", "minecraft:chiseled_stone_bricks").put("minecraft:cyan_stained_hardened_clay", "minecraft:cyan_terracotta").put("minecraft:dark_oak_wooden_slab", "minecraft:dark_oak_slab").put("minecraft:end_bricks", "minecraft:end_stone_bricks").put("minecraft:fence_gate", "minecraft:oak_fence_gate").put("minecraft:fence", "minecraft:oak_fence").put("minecraft:golden_rail", "minecraft:powered_rail").put("minecraft:gold_ingot_from_block", "minecraft:gold_ingot_from_gold_block").put("minecraft:gray_stained_hardened_clay", "minecraft:gray_terracotta").put("minecraft:green_stained_hardened_clay", "minecraft:green_terracotta").put("minecraft:iron_ingot_from_block", "minecraft:iron_ingot_from_iron_block").put("minecraft:jungle_wooden_slab", "minecraft:jungle_slab").put("minecraft:light_blue_stained_hardened_clay", "minecraft:light_blue_terracotta").put("minecraft:light_gray_stained_hardened_clay", "minecraft:light_gray_terracotta").put("minecraft:lime_stained_hardened_clay", "minecraft:lime_terracotta").put("minecraft:lit_pumpkin", "minecraft:jack_o_lantern").put("minecraft:magenta_stained_hardened_clay", "minecraft:magenta_terracotta").put("minecraft:magma", "minecraft:magma_block").put("minecraft:melon_block", "minecraft:melon").put("minecraft:mossy_stonebrick", "minecraft:mossy_stone_bricks").put("minecraft:noteblock", "minecraft:note_block").put("minecraft:oak_wooden_slab", "minecraft:oak_slab").put("minecraft:orange_stained_hardened_clay", "minecraft:orange_terracotta").put("minecraft:pillar_quartz_block", "minecraft:quartz_pillar").put("minecraft:pink_stained_hardened_clay", "minecraft:pink_terracotta").put("minecraft:purple_shulker_box", "minecraft:shulker_box").put("minecraft:purple_stained_hardened_clay", "minecraft:purple_terracotta").put("minecraft:red_nether_brick", "minecraft:red_nether_bricks").put("minecraft:red_stained_hardened_clay", "minecraft:red_terracotta").put("minecraft:slime", "minecraft:slime_block").put("minecraft:smooth_red_sandstone", "minecraft:cut_red_sandstone").put("minecraft:smooth_sandstone", "minecraft:cut_sandstone").put("minecraft:snow_layer", "minecraft:snow").put("minecraft:snow", "minecraft:snow_block").put("minecraft:speckled_melon", "minecraft:glistering_melon_slice").put("minecraft:spruce_wooden_slab", "minecraft:spruce_slab").put("minecraft:stonebrick", "minecraft:stone_bricks").put("minecraft:stone_stairs", "minecraft:cobblestone_stairs").put("minecraft:string_to_wool", "minecraft:white_wool_from_string").put("minecraft:trapdoor", "minecraft:oak_trapdoor").put("minecraft:white_stained_hardened_clay", "minecraft:white_terracotta").put("minecraft:wooden_button", "minecraft:oak_button").put("minecraft:wooden_door", "minecraft:oak_door").put("minecraft:wooden_pressure_plate", "minecraft:oak_pressure_plate").put("minecraft:yellow_stained_hardened_clay", "minecraft:yellow_terracotta").build();
 
     public RecipesFix(Schema schema, boolean flag) {
         super(schema, flag, "Recipes fix", (s) -> (String)RECIPES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
index 2c1190d423d75f809a88b28c4a472026482b171d..958847faa5883e3435ba9baf4240d7b9dbc58965 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
@@ -5,7 +5,7 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class RecipesRenameningFix extends RecipesRenameFix {
-    private static final Map<String, String> RECIPES = ImmutableMap.builder().put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").build();
+    private static final Map<String, String> RECIPES = ImmutableMap.<String, String>builder().put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").build();
 
     public RecipesRenameningFix(Schema schema, boolean flag) {
         super(schema, flag, "Recipes renamening fix", (s) -> (String)RECIPES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
index fe9ccf1b7bfece293d5c3df8a299629e1cdf4e4a..f6715f7bfa1103aed8946ae4c690f94f9b91fc1b 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
@@ -23,13 +23,13 @@ public class RedstoneWireConnectionsFix extends DataFix {
             String s2 = dynamicx.get("west").asString("none");
             String s3 = dynamicx.get("north").asString("none");
             String s4 = dynamicx.get("south").asString("none");
-            boolean flag = isConnected(s) || isConnected(s2);
+            boolean flagIn = isConnected(s) || isConnected(s2);
             boolean flag2 = isConnected(s3) || isConnected(s4);
             String s5 = !isConnected(s) && !flag2 ? "side" : s;
             String s6 = !isConnected(s2) && !flag2 ? "side" : s2;
-            String s7 = !isConnected(s3) && !flag ? "side" : s3;
-            String s8 = !isConnected(s4) && !flag ? "side" : s4;
-            return dynamicx.update("east", (dynamic) -> dynamic.createString(s5)).update("west", (dynamic) -> dynamic.createString(s6)).update("north", (dynamic) -> dynamic.createString(s7)).update("south", (dynamic) -> dynamic.createString(s8));
+            String s7 = !isConnected(s3) && !flagIn ? "side" : s3;
+            String s8 = !isConnected(s4) && !flagIn ? "side" : s4;
+            return dynamicx.update("east", (dynamicIn) -> dynamicIn.createString(s5)).update("west", (dynamicIn2) -> dynamicIn2.createString(s6)).update("north", (dynamicIn3) -> dynamicIn3.createString(s7)).update("south", (dynamicIn4) -> dynamicIn4.createString(s8));
         });
     }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
index d3f00a724eed7b30be7715efb72ad96b5b054280..a50273f8c740d3d55567ee0ce7a59f65d68a258c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
@@ -4,5 +4,5 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class RenamedCoralFansFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:tube_coral_fan", "minecraft:tube_coral_wall_fan").put("minecraft:brain_coral_fan", "minecraft:brain_coral_wall_fan").put("minecraft:bubble_coral_fan", "minecraft:bubble_coral_wall_fan").put("minecraft:fire_coral_fan", "minecraft:fire_coral_wall_fan").put("minecraft:horn_coral_fan", "minecraft:horn_coral_wall_fan").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:tube_coral_fan", "minecraft:tube_coral_wall_fan").put("minecraft:brain_coral_fan", "minecraft:brain_coral_wall_fan").put("minecraft:bubble_coral_fan", "minecraft:bubble_coral_wall_fan").put("minecraft:fire_coral_fan", "minecraft:fire_coral_wall_fan").put("minecraft:horn_coral_fan", "minecraft:horn_coral_wall_fan").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
index c233f609568e42e10939e3d990805a74dcf735e3..defba40c27926c5e9b9a8b6b8c55711495fcc51e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
@@ -4,5 +4,5 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class RenamedCoralFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:blue_coral", "minecraft:tube_coral_block").put("minecraft:pink_coral", "minecraft:brain_coral_block").put("minecraft:purple_coral", "minecraft:bubble_coral_block").put("minecraft:red_coral", "minecraft:fire_coral_block").put("minecraft:yellow_coral", "minecraft:horn_coral_block").put("minecraft:blue_coral_plant", "minecraft:tube_coral").put("minecraft:pink_coral_plant", "minecraft:brain_coral").put("minecraft:purple_coral_plant", "minecraft:bubble_coral").put("minecraft:red_coral_plant", "minecraft:fire_coral").put("minecraft:yellow_coral_plant", "minecraft:horn_coral").put("minecraft:blue_coral_fan", "minecraft:tube_coral_fan").put("minecraft:pink_coral_fan", "minecraft:brain_coral_fan").put("minecraft:purple_coral_fan", "minecraft:bubble_coral_fan").put("minecraft:red_coral_fan", "minecraft:fire_coral_fan").put("minecraft:yellow_coral_fan", "minecraft:horn_coral_fan").put("minecraft:blue_dead_coral", "minecraft:dead_tube_coral").put("minecraft:pink_dead_coral", "minecraft:dead_brain_coral").put("minecraft:purple_dead_coral", "minecraft:dead_bubble_coral").put("minecraft:red_dead_coral", "minecraft:dead_fire_coral").put("minecraft:yellow_dead_coral", "minecraft:dead_horn_coral").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:blue_coral", "minecraft:tube_coral_block").put("minecraft:pink_coral", "minecraft:brain_coral_block").put("minecraft:purple_coral", "minecraft:bubble_coral_block").put("minecraft:red_coral", "minecraft:fire_coral_block").put("minecraft:yellow_coral", "minecraft:horn_coral_block").put("minecraft:blue_coral_plant", "minecraft:tube_coral").put("minecraft:pink_coral_plant", "minecraft:brain_coral").put("minecraft:purple_coral_plant", "minecraft:bubble_coral").put("minecraft:red_coral_plant", "minecraft:fire_coral").put("minecraft:yellow_coral_plant", "minecraft:horn_coral").put("minecraft:blue_coral_fan", "minecraft:tube_coral_fan").put("minecraft:pink_coral_fan", "minecraft:brain_coral_fan").put("minecraft:purple_coral_fan", "minecraft:bubble_coral_fan").put("minecraft:red_coral_fan", "minecraft:fire_coral_fan").put("minecraft:yellow_coral_fan", "minecraft:horn_coral_fan").put("minecraft:blue_dead_coral", "minecraft:dead_tube_coral").put("minecraft:pink_dead_coral", "minecraft:dead_brain_coral").put("minecraft:purple_dead_coral", "minecraft:dead_bubble_coral").put("minecraft:red_dead_coral", "minecraft:dead_fire_coral").put("minecraft:yellow_dead_coral", "minecraft:dead_horn_coral").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
index 0b4e8af408be853fd481bd531464aeef99e9cc37..e900319c7cf6a00b2fad77726ba7d8e9d9b14605 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
@@ -15,9 +15,9 @@ public class SavedDataUUIDFix extends AbstractUUIDFix {
     }
 
     protected TypeRewriteRule makeRule() {
-        return this.fixTypeEverywhereTyped("SavedDataUUIDFix", this.getInputSchema().getType(this.typeReference), (typed) -> typed.updateTyped(typed.getType().findField("data"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Raids", (dynamicx) -> dynamicx.createList(dynamicx.asStream().map((dynamic) -> dynamic.update("HeroesOfTheVillage", (dynamicx) -> dynamicx.createList(dynamicx.asStream().map((dynamic) -> createUUIDFromLongs(dynamic, "UUIDMost", "UUIDLeast").orElseGet(() -> {
+        return this.fixTypeEverywhereTyped("SavedDataUUIDFix", this.getInputSchema().getType(this.typeReference), (typed) -> typed.updateTyped(typed.getType().findField("data"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Raids", (dynamicx) -> dynamicx.createList(dynamicx.asStream().map((dynamicIn) -> dynamicIn.update("HeroesOfTheVillage", (dynamicIn2) -> dynamicIn2.createList(dynamicIn2.asStream().map((dynamicIn3) -> createUUIDFromLongs(dynamicIn3, "UUIDMost", "UUIDLeast").orElseGet(() -> {
                                         LOGGER.warn("HeroesOfTheVillage contained invalid UUIDs.");
-                                        return dynamic;
+                                        return dynamicIn3;
                                     }))))))))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
index 38e587bf513c6f0d5ccccb2c518062ca1beb6067..b8069c15c86b2c206bce82789e519e55fca824b6 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
@@ -19,18 +19,18 @@ public abstract class SimplestEntityRenameFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         Type<Pair<String, String>> type = DSL.named(References.ENTITY_NAME.typeName(), NamespacedSchema.namespacedString());
         if (!Objects.equals(this.getOutputSchema().getType(References.ENTITY_NAME), type)) {
             throw new IllegalStateException("Entity name type is not what was expected.");
         } else {
             return TypeRewriteRule.seq(this.fixTypeEverywhere(this.name, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> {
                         String s2 = this.rename(s);
-                        Type<?> type = (Type)taggedChoiceType.types().get(s);
+                        Type<?> typeIn = (Type)taggedChoiceType.types().get(s);
                         Type<?> type2 = (Type)taggedChoiceType2.types().get(s2);
-                        if (!type2.equals(type, true, true)) {
-                            throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", type2, type));
+                        if (!type2.equals(typeIn, true, true)) {
+                            throw new IllegalStateException(String.format("Dynamic type check failed: %s not equal to %s", type2, typeIn));
                         } else {
                             return s2;
                         }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java
index aa4662d680f8b34eeb07d3482bf1b2f35462dc90..8a7fb02d27218dad6110b2e667cb3ab423f0d4fb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java
@@ -33,9 +33,9 @@ public class SpawnerDataFix extends DataFix {
 
     private <T> Typed<T> wrapSpawnPotentialsToWeightedEntries(Type<T> type, Typed<?> typed) {
         DynamicOps<?> dynamicOps = typed.getOps();
-        List<?> list = typed.getValue();
+        List<?> list = (List<?>) typed.getValue();
         List<?> list2 = list.stream().map((object) -> {
-            Pair<Object, Dynamic<?>> pair = object;
+            Pair<Object, Dynamic<?>> pair = (Pair<Object, Dynamic<?>>) object;
             int i = ((Number)(pair.getSecond()).get("Weight").asNumber().result().orElse(1)).intValue();
             Dynamic<?> dynamic = new Dynamic(dynamicOps);
             dynamic = dynamic.set("weight", dynamic.createInt(i));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
index 722ebc760c66bbb16a685ddc570f7f48f3dacaec..eadeb3095028999e42b011efce4106d98e2e95ca 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
@@ -20,13 +20,13 @@ import javax.annotation.Nullable;
 import org.apache.commons.lang3.StringUtils;
 
 public class StatsCounterFix extends DataFix {
-    private static final Set<String> SKIP = ImmutableSet.builder().add("stat.craftItem.minecraft.spawn_egg").add("stat.useItem.minecraft.spawn_egg").add("stat.breakItem.minecraft.spawn_egg").add("stat.pickup.minecraft.spawn_egg").add("stat.drop.minecraft.spawn_egg").build();
-    private static final Map<String, String> CUSTOM_MAP = ImmutableMap.builder().put("stat.leaveGame", "minecraft:leave_game").put("stat.playOneMinute", "minecraft:play_one_minute").put("stat.timeSinceDeath", "minecraft:time_since_death").put("stat.sneakTime", "minecraft:sneak_time").put("stat.walkOneCm", "minecraft:walk_one_cm").put("stat.crouchOneCm", "minecraft:crouch_one_cm").put("stat.sprintOneCm", "minecraft:sprint_one_cm").put("stat.swimOneCm", "minecraft:swim_one_cm").put("stat.fallOneCm", "minecraft:fall_one_cm").put("stat.climbOneCm", "minecraft:climb_one_cm").put("stat.flyOneCm", "minecraft:fly_one_cm").put("stat.diveOneCm", "minecraft:dive_one_cm").put("stat.minecartOneCm", "minecraft:minecart_one_cm").put("stat.boatOneCm", "minecraft:boat_one_cm").put("stat.pigOneCm", "minecraft:pig_one_cm").put("stat.horseOneCm", "minecraft:horse_one_cm").put("stat.aviateOneCm", "minecraft:aviate_one_cm").put("stat.jump", "minecraft:jump").put("stat.drop", "minecraft:drop").put("stat.damageDealt", "minecraft:damage_dealt").put("stat.damageTaken", "minecraft:damage_taken").put("stat.deaths", "minecraft:deaths").put("stat.mobKills", "minecraft:mob_kills").put("stat.animalsBred", "minecraft:animals_bred").put("stat.playerKills", "minecraft:player_kills").put("stat.fishCaught", "minecraft:fish_caught").put("stat.talkedToVillager", "minecraft:talked_to_villager").put("stat.tradedWithVillager", "minecraft:traded_with_villager").put("stat.cakeSlicesEaten", "minecraft:eat_cake_slice").put("stat.cauldronFilled", "minecraft:fill_cauldron").put("stat.cauldronUsed", "minecraft:use_cauldron").put("stat.armorCleaned", "minecraft:clean_armor").put("stat.bannerCleaned", "minecraft:clean_banner").put("stat.brewingstandInteraction", "minecraft:interact_with_brewingstand").put("stat.beaconInteraction", "minecraft:interact_with_beacon").put("stat.dropperInspected", "minecraft:inspect_dropper").put("stat.hopperInspected", "minecraft:inspect_hopper").put("stat.dispenserInspected", "minecraft:inspect_dispenser").put("stat.noteblockPlayed", "minecraft:play_noteblock").put("stat.noteblockTuned", "minecraft:tune_noteblock").put("stat.flowerPotted", "minecraft:pot_flower").put("stat.trappedChestTriggered", "minecraft:trigger_trapped_chest").put("stat.enderchestOpened", "minecraft:open_enderchest").put("stat.itemEnchanted", "minecraft:enchant_item").put("stat.recordPlayed", "minecraft:play_record").put("stat.furnaceInteraction", "minecraft:interact_with_furnace").put("stat.craftingTableInteraction", "minecraft:interact_with_crafting_table").put("stat.chestOpened", "minecraft:open_chest").put("stat.sleepInBed", "minecraft:sleep_in_bed").put("stat.shulkerBoxOpened", "minecraft:open_shulker_box").build();
+    private static final Set<String> SKIP = ImmutableSet.<String>builder().add("stat.craftItem.minecraft.spawn_egg").add("stat.useItem.minecraft.spawn_egg").add("stat.breakItem.minecraft.spawn_egg").add("stat.pickup.minecraft.spawn_egg").add("stat.drop.minecraft.spawn_egg").build();
+    private static final Map<String, String> CUSTOM_MAP = ImmutableMap.<String, String>builder().put("stat.leaveGame", "minecraft:leave_game").put("stat.playOneMinute", "minecraft:play_one_minute").put("stat.timeSinceDeath", "minecraft:time_since_death").put("stat.sneakTime", "minecraft:sneak_time").put("stat.walkOneCm", "minecraft:walk_one_cm").put("stat.crouchOneCm", "minecraft:crouch_one_cm").put("stat.sprintOneCm", "minecraft:sprint_one_cm").put("stat.swimOneCm", "minecraft:swim_one_cm").put("stat.fallOneCm", "minecraft:fall_one_cm").put("stat.climbOneCm", "minecraft:climb_one_cm").put("stat.flyOneCm", "minecraft:fly_one_cm").put("stat.diveOneCm", "minecraft:dive_one_cm").put("stat.minecartOneCm", "minecraft:minecart_one_cm").put("stat.boatOneCm", "minecraft:boat_one_cm").put("stat.pigOneCm", "minecraft:pig_one_cm").put("stat.horseOneCm", "minecraft:horse_one_cm").put("stat.aviateOneCm", "minecraft:aviate_one_cm").put("stat.jump", "minecraft:jump").put("stat.drop", "minecraft:drop").put("stat.damageDealt", "minecraft:damage_dealt").put("stat.damageTaken", "minecraft:damage_taken").put("stat.deaths", "minecraft:deaths").put("stat.mobKills", "minecraft:mob_kills").put("stat.animalsBred", "minecraft:animals_bred").put("stat.playerKills", "minecraft:player_kills").put("stat.fishCaught", "minecraft:fish_caught").put("stat.talkedToVillager", "minecraft:talked_to_villager").put("stat.tradedWithVillager", "minecraft:traded_with_villager").put("stat.cakeSlicesEaten", "minecraft:eat_cake_slice").put("stat.cauldronFilled", "minecraft:fill_cauldron").put("stat.cauldronUsed", "minecraft:use_cauldron").put("stat.armorCleaned", "minecraft:clean_armor").put("stat.bannerCleaned", "minecraft:clean_banner").put("stat.brewingstandInteraction", "minecraft:interact_with_brewingstand").put("stat.beaconInteraction", "minecraft:interact_with_beacon").put("stat.dropperInspected", "minecraft:inspect_dropper").put("stat.hopperInspected", "minecraft:inspect_hopper").put("stat.dispenserInspected", "minecraft:inspect_dispenser").put("stat.noteblockPlayed", "minecraft:play_noteblock").put("stat.noteblockTuned", "minecraft:tune_noteblock").put("stat.flowerPotted", "minecraft:pot_flower").put("stat.trappedChestTriggered", "minecraft:trigger_trapped_chest").put("stat.enderchestOpened", "minecraft:open_enderchest").put("stat.itemEnchanted", "minecraft:enchant_item").put("stat.recordPlayed", "minecraft:play_record").put("stat.furnaceInteraction", "minecraft:interact_with_furnace").put("stat.craftingTableInteraction", "minecraft:interact_with_crafting_table").put("stat.chestOpened", "minecraft:open_chest").put("stat.sleepInBed", "minecraft:sleep_in_bed").put("stat.shulkerBoxOpened", "minecraft:open_shulker_box").build();
     private static final String BLOCK_KEY = "stat.mineBlock";
     private static final String NEW_BLOCK_KEY = "minecraft:mined";
-    private static final Map<String, String> ITEM_KEYS = ImmutableMap.builder().put("stat.craftItem", "minecraft:crafted").put("stat.useItem", "minecraft:used").put("stat.breakItem", "minecraft:broken").put("stat.pickup", "minecraft:picked_up").put("stat.drop", "minecraft:dropped").build();
-    private static final Map<String, String> ENTITY_KEYS = ImmutableMap.builder().put("stat.entityKilledBy", "minecraft:killed_by").put("stat.killEntity", "minecraft:killed").build();
-    private static final Map<String, String> ENTITIES = ImmutableMap.builder().put("Bat", "minecraft:bat").put("Blaze", "minecraft:blaze").put("CaveSpider", "minecraft:cave_spider").put("Chicken", "minecraft:chicken").put("Cow", "minecraft:cow").put("Creeper", "minecraft:creeper").put("Donkey", "minecraft:donkey").put("ElderGuardian", "minecraft:elder_guardian").put("Enderman", "minecraft:enderman").put("Endermite", "minecraft:endermite").put("EvocationIllager", "minecraft:evocation_illager").put("Ghast", "minecraft:ghast").put("Guardian", "minecraft:guardian").put("Horse", "minecraft:horse").put("Husk", "minecraft:husk").put("Llama", "minecraft:llama").put("LavaSlime", "minecraft:magma_cube").put("MushroomCow", "minecraft:mooshroom").put("Mule", "minecraft:mule").put("Ozelot", "minecraft:ocelot").put("Parrot", "minecraft:parrot").put("Pig", "minecraft:pig").put("PolarBear", "minecraft:polar_bear").put("Rabbit", "minecraft:rabbit").put("Sheep", "minecraft:sheep").put("Shulker", "minecraft:shulker").put("Silverfish", "minecraft:silverfish").put("SkeletonHorse", "minecraft:skeleton_horse").put("Skeleton", "minecraft:skeleton").put("Slime", "minecraft:slime").put("Spider", "minecraft:spider").put("Squid", "minecraft:squid").put("Stray", "minecraft:stray").put("Vex", "minecraft:vex").put("Villager", "minecraft:villager").put("VindicationIllager", "minecraft:vindication_illager").put("Witch", "minecraft:witch").put("WitherSkeleton", "minecraft:wither_skeleton").put("Wolf", "minecraft:wolf").put("ZombieHorse", "minecraft:zombie_horse").put("PigZombie", "minecraft:zombie_pigman").put("ZombieVillager", "minecraft:zombie_villager").put("Zombie", "minecraft:zombie").build();
+    private static final Map<String, String> ITEM_KEYS = ImmutableMap.<String, String>builder().put("stat.craftItem", "minecraft:crafted").put("stat.useItem", "minecraft:used").put("stat.breakItem", "minecraft:broken").put("stat.pickup", "minecraft:picked_up").put("stat.drop", "minecraft:dropped").build();
+    private static final Map<String, String> ENTITY_KEYS = ImmutableMap.<String, String>builder().put("stat.entityKilledBy", "minecraft:killed_by").put("stat.killEntity", "minecraft:killed").build();
+    private static final Map<String, String> ENTITIES = ImmutableMap.<String, String>builder().put("Bat", "minecraft:bat").put("Blaze", "minecraft:blaze").put("CaveSpider", "minecraft:cave_spider").put("Chicken", "minecraft:chicken").put("Cow", "minecraft:cow").put("Creeper", "minecraft:creeper").put("Donkey", "minecraft:donkey").put("ElderGuardian", "minecraft:elder_guardian").put("Enderman", "minecraft:enderman").put("Endermite", "minecraft:endermite").put("EvocationIllager", "minecraft:evocation_illager").put("Ghast", "minecraft:ghast").put("Guardian", "minecraft:guardian").put("Horse", "minecraft:horse").put("Husk", "minecraft:husk").put("Llama", "minecraft:llama").put("LavaSlime", "minecraft:magma_cube").put("MushroomCow", "minecraft:mooshroom").put("Mule", "minecraft:mule").put("Ozelot", "minecraft:ocelot").put("Parrot", "minecraft:parrot").put("Pig", "minecraft:pig").put("PolarBear", "minecraft:polar_bear").put("Rabbit", "minecraft:rabbit").put("Sheep", "minecraft:sheep").put("Shulker", "minecraft:shulker").put("Silverfish", "minecraft:silverfish").put("SkeletonHorse", "minecraft:skeleton_horse").put("Skeleton", "minecraft:skeleton").put("Slime", "minecraft:slime").put("Spider", "minecraft:spider").put("Squid", "minecraft:squid").put("Stray", "minecraft:stray").put("Vex", "minecraft:vex").put("Villager", "minecraft:villager").put("VindicationIllager", "minecraft:vindication_illager").put("Witch", "minecraft:witch").put("WitherSkeleton", "minecraft:wither_skeleton").put("Wolf", "minecraft:wolf").put("ZombieHorse", "minecraft:zombie_horse").put("PigZombie", "minecraft:zombie_pigman").put("ZombieVillager", "minecraft:zombie_villager").put("Zombie", "minecraft:zombie").build();
     private static final String NEW_CUSTOM_KEY = "minecraft:custom";
 
     public StatsCounterFix(Schema schema, boolean flag) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
index 8237b1eac30fc214bbbe7951286360d86b2a931c..157e31cc84e3aba07fd2a7fc0f42064a71e0c0da 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
@@ -35,7 +35,7 @@ public class StatsRenameFix extends DataFix {
         } else {
             OpticFinder<?> opticFinder2 = DSL.namedChoice("minecraft:custom", type3);
             OpticFinder<String> opticFinder3 = DSL.fieldFinder("id", NamespacedSchema.namespacedString());
-            return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
+            return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
         }
     }
 
@@ -45,6 +45,6 @@ public class StatsRenameFix extends DataFix {
         OpticFinder<?> opticFinder = type2.findField("stats");
         OpticFinder<?> opticFinder2 = opticFinder.type().findField("minecraft:custom");
         OpticFinder<String> opticFinder3 = NamespacedSchema.namespacedString().finder();
-        return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
+        return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StructureSettingsFlattenFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StructureSettingsFlattenFix.java
index c96be79bef782b3931d786e1bab196eba5e013e9..4506362a583e7af1f00dfa87aa6cf461ef52d57b 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StructureSettingsFlattenFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StructureSettingsFlattenFix.java
@@ -27,11 +27,11 @@ public class StructureSettingsFlattenFix extends DataFix {
 
     private static Pair<Dynamic<?>, Dynamic<?>> fixDimension(Pair<Dynamic<?>, Dynamic<?>> pair) {
         Dynamic<?> dynamic = pair.getSecond();
-        return Pair.of(pair.getFirst(), dynamic.update("generator", (dynamicx) -> dynamicx.update("settings", (dynamic) -> dynamic.update("structures", StructureSettingsFlattenFix::fixStructures))));
+        return Pair.of(pair.getFirst(), dynamic.update("generator", (dynamicx) -> dynamicx.update("settings", (dynamicIn) -> dynamicIn.update("structures", StructureSettingsFlattenFix::fixStructures))));
     }
 
     private static Dynamic<?> fixStructures(Dynamic<?> dynamic) {
-        Dynamic<?> dynamic2 = dynamic.get("structures").orElseEmptyMap().updateMapValues((pair) -> pair.mapSecond((dynamic2) -> dynamic2.set("type", dynamic.createString("minecraft:random_spread"))));
+        Dynamic<?> dynamic2 = dynamic.get("structures").orElseEmptyMap().updateMapValues((pair) -> pair.mapSecond((dynamic2In) -> dynamic2In.set("type", dynamic.createString("minecraft:random_spread"))));
         return DataFixUtils.orElse(dynamic.get("stronghold").result().map((dynamic3) -> dynamic2.set("minecraft:stronghold", dynamic3.set("type", dynamic.createString("minecraft:concentric_rings")))), dynamic2);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix.java
index be90e390014e21dad81956e43a635ed431b9792a..779e6272deb969c3d4ed7a1dcfae9cc3f41b0e19 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix.java
@@ -19,7 +19,7 @@ import java.util.Map.Entry;
 import java.util.function.Function;
 
 public class StructuresBecomeConfiguredFix extends DataFix {
-    private static final Map<String, StructuresBecomeConfiguredFix.Conversion> CONVERSION_MAP = ImmutableMap.builder().put("mineshaft", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:badlands", "minecraft:eroded_badlands", "minecraft:wooded_badlands"), "minecraft:mineshaft_mesa"), "minecraft:mineshaft")).put("shipwreck", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:beach", "minecraft:snowy_beach"), "minecraft:shipwreck_beached"), "minecraft:shipwreck")).put("ocean_ruin", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:warm_ocean", "minecraft:lukewarm_ocean", "minecraft:deep_lukewarm_ocean"), "minecraft:ocean_ruin_warm"), "minecraft:ocean_ruin_cold")).put("village", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:desert"), "minecraft:village_desert", List.of("minecraft:savanna"), "minecraft:village_savanna", List.of("minecraft:snowy_plains"), "minecraft:village_snowy", List.of("minecraft:taiga"), "minecraft:village_taiga"), "minecraft:village_plains")).put("ruined_portal", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:desert"), "minecraft:ruined_portal_desert", List.of("minecraft:badlands", "minecraft:eroded_badlands", "minecraft:wooded_badlands", "minecraft:windswept_hills", "minecraft:windswept_forest", "minecraft:windswept_gravelly_hills", "minecraft:savanna_plateau", "minecraft:windswept_savanna", "minecraft:stony_shore", "minecraft:meadow", "minecraft:frozen_peaks", "minecraft:jagged_peaks", "minecraft:stony_peaks", "minecraft:snowy_slopes"), "minecraft:ruined_portal_mountain", List.of("minecraft:bamboo_jungle", "minecraft:jungle", "minecraft:sparse_jungle"), "minecraft:ruined_portal_jungle", List.of("minecraft:deep_frozen_ocean", "minecraft:deep_cold_ocean", "minecraft:deep_ocean", "minecraft:deep_lukewarm_ocean", "minecraft:frozen_ocean", "minecraft:ocean", "minecraft:cold_ocean", "minecraft:lukewarm_ocean", "minecraft:warm_ocean"), "minecraft:ruined_portal_ocean"), "minecraft:ruined_portal_standard")).put("pillager_outpost", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:pillager_outpost")).put("mansion", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:mansion")).put("jungle_pyramid", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:jungle_pyramid")).put("desert_pyramid", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:desert_pyramid")).put("igloo", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:igloo")).put("swamp_hut", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:swamp_hut")).put("stronghold", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:stronghold")).put("monument", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:monument")).put("fortress", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:fortress")).put("endcity", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:end_city")).put("buried_treasure", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:buried_treasure")).put("nether_fossil", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:nether_fossil")).put("bastion_remnant", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:bastion_remnant")).build();
+    private static final Map<String, StructuresBecomeConfiguredFix.Conversion> CONVERSION_MAP = ImmutableMap.<String, Conversion>builder().put("mineshaft", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:badlands", "minecraft:eroded_badlands", "minecraft:wooded_badlands"), "minecraft:mineshaft_mesa"), "minecraft:mineshaft")).put("shipwreck", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:beach", "minecraft:snowy_beach"), "minecraft:shipwreck_beached"), "minecraft:shipwreck")).put("ocean_ruin", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:warm_ocean", "minecraft:lukewarm_ocean", "minecraft:deep_lukewarm_ocean"), "minecraft:ocean_ruin_warm"), "minecraft:ocean_ruin_cold")).put("village", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:desert"), "minecraft:village_desert", List.of("minecraft:savanna"), "minecraft:village_savanna", List.of("minecraft:snowy_plains"), "minecraft:village_snowy", List.of("minecraft:taiga"), "minecraft:village_taiga"), "minecraft:village_plains")).put("ruined_portal", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:desert"), "minecraft:ruined_portal_desert", List.of("minecraft:badlands", "minecraft:eroded_badlands", "minecraft:wooded_badlands", "minecraft:windswept_hills", "minecraft:windswept_forest", "minecraft:windswept_gravelly_hills", "minecraft:savanna_plateau", "minecraft:windswept_savanna", "minecraft:stony_shore", "minecraft:meadow", "minecraft:frozen_peaks", "minecraft:jagged_peaks", "minecraft:stony_peaks", "minecraft:snowy_slopes"), "minecraft:ruined_portal_mountain", List.of("minecraft:bamboo_jungle", "minecraft:jungle", "minecraft:sparse_jungle"), "minecraft:ruined_portal_jungle", List.of("minecraft:deep_frozen_ocean", "minecraft:deep_cold_ocean", "minecraft:deep_ocean", "minecraft:deep_lukewarm_ocean", "minecraft:frozen_ocean", "minecraft:ocean", "minecraft:cold_ocean", "minecraft:lukewarm_ocean", "minecraft:warm_ocean"), "minecraft:ruined_portal_ocean"), "minecraft:ruined_portal_standard")).put("pillager_outpost", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:pillager_outpost")).put("mansion", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:mansion")).put("jungle_pyramid", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:jungle_pyramid")).put("desert_pyramid", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:desert_pyramid")).put("igloo", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:igloo")).put("swamp_hut", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:swamp_hut")).put("stronghold", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:stronghold")).put("monument", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:monument")).put("fortress", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:fortress")).put("endcity", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:end_city")).put("buried_treasure", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:buried_treasure")).put("nether_fossil", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:nether_fossil")).put("bastion_remnant", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:bastion_remnant")).build();
 
     public StructuresBecomeConfiguredFix(Schema schema) {
         super(schema, false);
@@ -100,8 +100,8 @@ public class StructuresBecomeConfiguredFix extends DataFix {
 
     private Optional<String> guessConfiguration(Dynamic<?> dynamic, StructuresBecomeConfiguredFix.Conversion conversion) {
         Object2IntArrayMap<String> object2IntArrayMap = new Object2IntArrayMap();
-        dynamic.get("sections").asList(Function.identity()).forEach((dynamicx) -> dynamicx.get("biomes").get("palette").asList(Function.identity()).forEach((dynamic) -> {
-                String s = (String)conversion.biomeMapping().get(dynamic.asString(""));
+        dynamic.get("sections").asList(Function.identity()).forEach((dynamicx) -> dynamicx.get("biomes").get("palette").asList(Function.identity()).forEach((dynamicIn) -> {
+                String s = (String)conversion.biomeMapping().get(dynamicIn.asString(""));
                 if (s != null) {
                     object2IntArrayMap.mergeInt(s, 1, Integer::sum);
                 }
@@ -110,15 +110,7 @@ public class StructuresBecomeConfiguredFix extends DataFix {
         return object2IntArrayMap.object2IntEntrySet().stream().max(Comparator.comparingInt(it.unimi.dsi.fastutil.objects.Object2IntMap.Entry::getIntValue)).map(Entry::getKey);
     }
 
-    static record Conversion(Map<String, String> a, String b) {
-        private final Map<String, String> biomeMapping;
-        final String fallback;
-
-        private Conversion(Map<String, String> map, String s) {
-            this.biomeMapping = map;
-            this.fallback = s;
-        }
-
+    static record Conversion(Map<String, String> biomeMapping, String fallback) {
         public static StructuresBecomeConfiguredFix.Conversion trivial(String s) {
             return new StructuresBecomeConfiguredFix.Conversion(Map.of(), s);
         }
@@ -136,13 +128,5 @@ public class StructuresBecomeConfiguredFix extends DataFix {
 
             return builder.build();
         }
-
-        public Map<String, String> biomeMapping() {
-            return this.biomeMapping;
-        }
-
-        public String fallback() {
-            return this.fallback;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java b/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
index 12addbbbcd00cca0462169afc14248eb1f7d98e2..bb463457dfc98fdc5a0766c25acb780fcbc4bc0c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
@@ -69,19 +69,19 @@ public class TrappedChestBlockEntityFix extends DataFix {
                             Dynamic<?> dynamic = typedx.get(DSL.remainderFinder());
                             int i3 = dynamic.get("xPos").asInt(0);
                             int i4 = dynamic.get("zPos").asInt(0);
-                            TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
-                            return typedx.updateTyped(opticFinder, (typed) -> typed.updateTyped(taggedChoiceType.finder(), (typedx) -> {
-                                    Dynamic<?> dynamic = typedx.getOrCreate(DSL.remainderFinder());
-                                    int i3 = dynamic.get("x").asInt(0) - (i3 << 4);
-                                    int i4 = dynamic.get("y").asInt(0);
-                                    int i5 = dynamic.get("z").asInt(0) - (i4 << 4);
-                                    return intSet.contains(LeavesFix.getIndex(i3, i4, i5)) ? typedx.update(taggedChoiceType.finder(), (pair) -> pair.mapFirst((s) -> {
+                            TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
+                            return typedx.updateTyped(opticFinder, (typedIn) -> typedIn.updateTyped(taggedChoiceType.finder(), (typedIn2) -> {
+                                    Dynamic<?> dynamicIn = typedIn2.getOrCreate(DSL.remainderFinder());
+                                    int x = dynamicIn.get("x").asInt(0) - (i3 << 4);
+                                    int y = dynamicIn.get("y").asInt(0);
+                                    int z = dynamicIn.get("z").asInt(0) - (i4 << 4);
+                                    return intSet.contains(LeavesFix.getIndex(x, y, z)) ? typedIn2.update(taggedChoiceType.finder(), (pair) -> pair.mapFirst((s) -> {
                                             if (!Objects.equals(s, "minecraft:chest")) {
                                                 LOGGER.warn("Block Entity was expected to be a chest");
                                             }
 
                                             return "minecraft:trapped_chest";
-                                        })) : typedx;
+                                        })) : typedIn2;
                                 }));
                         }
                     })));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
index 020f2b6dae6e255960c4743060793a54c66eab5e..938b5e6cfdc7019e3099f3834f7136f720e81682 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
@@ -37,7 +37,7 @@ public class VillagerRebuildLevelAndXpFix extends DataFix {
                 int i = dynamic.get("VillagerData").get("level").asInt(0);
                 Typed<?> typed2 = typedx;
                 if (i == 0 || i == 1) {
-                    int i2 = typedx.getOptionalTyped(opticFinder2).flatMap((typed) -> typed.getOptionalTyped(opticFinder3)).map((typed) -> typed.getAllTyped(opticFinder4).size()).orElse(0);
+                    int i2 = typedx.getOptionalTyped(opticFinder2).flatMap((typedIn) -> typedIn.getOptionalTyped(opticFinder3)).map((typedIn) -> typedIn.getAllTyped(opticFinder4).size()).orElse(0);
                     i = Mth.clamp(i2 / 2, 1, 5);
                     if (i > 1) {
                         typed2 = addLevel(typedx, i);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
index 815ea87dd01a4ff81becf0803303d6b723fffc1e..c6ef560b029993b909e47fb537452f39b126f3b1 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
@@ -31,7 +31,7 @@ public class VillagerTradeFix extends NamedEntityFix {
             OpticFinder<?> opticFinder6 = type2.findField("sell");
             OpticFinder<Pair<String, String>> opticFinder7 = DSL.fieldFinder("id", DSL.named(References.ITEM_NAME.typeName(), NamespacedSchema.namespacedString()));
             Function<Typed<?>, Typed<?>> function = (typedx) -> this.updateItemStack(opticFinder7, typedx);
-            return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.updateTyped(opticFinder3, (typedx) -> typedx.updateTyped(opticFinder4, function).updateTyped(opticFinder5, function).updateTyped(opticFinder6, function))));
+            return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.updateTyped(opticFinder3, (typedIn2) -> typedIn2.updateTyped(opticFinder4, function).updateTyped(opticFinder5, function).updateTyped(opticFinder6, function))));
         }
     }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java
index e8d7b316cd509643bcaf0df3e65b3a4b91d5954e..fb7ca1955342154648f3989d67a7772eb9915dd3 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java
@@ -16,7 +16,7 @@ public class WorldGenSettingsDisallowOldCustomWorldsFix extends DataFix {
         OpticFinder<?> opticFinder = type.findField("dimensions");
         return this.fixTypeEverywhereTyped("WorldGenSettingsDisallowOldCustomWorldsFix_" + this.getOutputSchema().getVersionKey(), type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> {
                 typedx.write().map((dynamic) -> dynamic.getMapValues().map((map) -> {
-                        map.forEach((dynamic, dynamic2) -> {
+                        map.forEach((dynamicIn, dynamic2) -> {
                             if (dynamic2.get("type").asString().result().isEmpty()) {
                                 throw new IllegalStateException("Unable load old custom worlds.");
                             }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
index bd6d5f28c53e57b7f9448622d3e74565b33aa311..4cfd68e37af0e7d3ed16feb9ca083671da550cf8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
@@ -33,7 +33,7 @@ public class WorldGenSettingsFix extends DataFix {
     private static final String END_CITY = "minecraft:endcity";
     private static final String WOODLAND_MANSION = "minecraft:mansion";
     private static final String OCEAN_MONUMENT = "minecraft:monument";
-    private static final ImmutableMap<String, WorldGenSettingsFix.StructureFeatureConfiguration> DEFAULTS = ImmutableMap.builder().put("minecraft:village", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 10387312)).put("minecraft:desert_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357617)).put("minecraft:igloo", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357618)).put("minecraft:jungle_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357619)).put("minecraft:swamp_hut", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357620)).put("minecraft:pillager_outpost", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 165745296)).put("minecraft:monument", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 5, 10387313)).put("minecraft:endcity", new WorldGenSettingsFix.StructureFeatureConfiguration(20, 11, 10387313)).put("minecraft:mansion", new WorldGenSettingsFix.StructureFeatureConfiguration(80, 20, 10387319)).build();
+    private static final ImmutableMap<String, WorldGenSettingsFix.StructureFeatureConfiguration> DEFAULTS = ImmutableMap.<String, WorldGenSettingsFix.StructureFeatureConfiguration>builder().put("minecraft:village", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 10387312)).put("minecraft:desert_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357617)).put("minecraft:igloo", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357618)).put("minecraft:jungle_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357619)).put("minecraft:swamp_hut", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357620)).put("minecraft:pillager_outpost", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 165745296)).put("minecraft:monument", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 5, 10387313)).put("minecraft:endcity", new WorldGenSettingsFix.StructureFeatureConfiguration(20, 11, 10387313)).put("minecraft:mansion", new WorldGenSettingsFix.StructureFeatureConfiguration(80, 20, 10387319)).build();
 
     public WorldGenSettingsFix(Schema schema) {
         super(schema, true);
@@ -48,7 +48,7 @@ public class WorldGenSettingsFix extends DataFix {
     }
 
     private static <T> Dynamic<T> vanillaBiomeSource(Dynamic<T> dynamic, long l, boolean flag, boolean flag2) {
-        Builder<Dynamic<T>, Dynamic<T>> builder = ImmutableMap.builder().put(dynamic.createString("type"), dynamic.createString("minecraft:vanilla_layered")).put(dynamic.createString("seed"), dynamic.createLong(l)).put(dynamic.createString("large_biomes"), dynamic.createBoolean(flag2));
+        Builder<Dynamic<T>, Dynamic<T>> builder = ImmutableMap.<Dynamic<T>, Dynamic<T>>builder().put(dynamic.createString("type"), dynamic.createString("minecraft:vanilla_layered")).put(dynamic.createString("seed"), dynamic.createLong(l)).put(dynamic.createString("large_biomes"), dynamic.createBoolean(flag2));
         if (flag) {
             builder.put(dynamic.createString("legacy_biome_init_layer"), dynamic.createBoolean(flag));
         }
@@ -143,9 +143,9 @@ public class WorldGenSettingsFix extends DataFix {
             map.put("minecraft:village", (WorldGenSettingsFix.StructureFeatureConfiguration)DEFAULTS.get("minecraft:village"));
         }
 
-        optionalDynamic.get("structures").flatMap(Dynamic::getMapValues).result().ifPresent((map2) -> map2.forEach((dynamic, dynamic2) -> dynamic2.getMapValues().result().ifPresent((map2) -> map2.forEach((dynamic2, dynamic3) -> {
+        optionalDynamic.get("structures").flatMap(Dynamic::getMapValues).result().ifPresent((map2) -> map2.forEach((dynamic, dynamic2) -> dynamic2.getMapValues().result().ifPresent((map2In) -> map2In.forEach((dynamic2In, dynamic3) -> {
                         String s = dynamic.asString("");
-                        String s2 = dynamic2.asString("");
+                        String s2 = dynamic2In.asString("");
                         String s3 = dynamic3.asString("");
                         if ("stronghold".equals(s)) {
                             mutableBoolean.setTrue();
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java
index f3e0ff57a11be7b0d2976db3428b365256e3e8bc..30dddc944504e53261ac9bd930c03a08059f09f8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java
@@ -33,27 +33,27 @@ public class WorldGenSettingsHeightAndBiomeFix extends DataFix {
             boolean flag2 = optionalDynamic.asBoolean(true);
             return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.remove("has_increased_height_already")).updateTyped(opticFinder, type3, (typedx) -> {
                 Dynamic<?> dynamic = typedx.write().result().orElseThrow(() -> new IllegalStateException("Malformed WorldGenSettings.dimensions"));
-                dynamic = dynamic.update("minecraft:overworld", (dynamicx) -> dynamicx.update("generator", (dynamic) -> {
-                        String s = dynamic.get("type").asString("");
+                dynamic = dynamic.update("minecraft:overworld", (dynamicx) -> dynamicx.update("generator", (dynamicIn) -> {
+                        String s = dynamicIn.get("type").asString("");
                         if ("minecraft:noise".equals(s)) {
                             MutableBoolean mutableBoolean = new MutableBoolean();
-                            dynamic = dynamic.update("biome_source", (dynamicx) -> {
-                                String s = dynamicx.get("type").asString("");
-                                if ("minecraft:vanilla_layered".equals(s) || flag && "minecraft:multi_noise".equals(s)) {
-                                    if (dynamicx.get("large_biomes").asBoolean(false)) {
+                            dynamicIn = dynamicIn.update("biome_source", (dynamicxIn2) -> {
+                                String typeIn = dynamicxIn2.get("type").asString("");
+                                if ("minecraft:vanilla_layered".equals(typeIn) || flag && "minecraft:multi_noise".equals(typeIn)) {
+                                    if (dynamicxIn2.get("large_biomes").asBoolean(false)) {
                                         mutableBoolean.setTrue();
                                     }
 
-                                    return dynamicx.createMap(ImmutableMap.of(dynamicx.createString("preset"), dynamicx.createString("minecraft:overworld"), dynamicx.createString("type"), dynamicx.createString("minecraft:multi_noise")));
+                                    return dynamicxIn2.createMap(ImmutableMap.of(dynamicxIn2.createString("preset"), dynamicxIn2.createString("minecraft:overworld"), dynamicxIn2.createString("type"), dynamicxIn2.createString("minecraft:multi_noise")));
                                 } else {
-                                    return dynamicx;
+                                    return dynamicxIn2;
                                 }
                             });
-                            return mutableBoolean.booleanValue() ? dynamic.update("settings", (dynamicx) -> "minecraft:overworld".equals(dynamicx.asString("")) ? dynamicx.createString("minecraft:large_biomes") : dynamicx) : dynamic;
+                            return mutableBoolean.booleanValue() ? dynamicIn.update("settings", (dynamicxIn3) -> "minecraft:overworld".equals(dynamicxIn3.asString("")) ? dynamicxIn3.createString("minecraft:large_biomes") : dynamicxIn3) : dynamicIn;
                         } else if ("minecraft:flat".equals(s)) {
-                            return flag2 ? dynamic : dynamic.update("settings", (dynamicx) -> dynamicx.update("layers", WorldGenSettingsHeightAndBiomeFix::updateLayers));
+                            return flag2 ? dynamicIn : dynamicIn.update("settings", (dynamicxIn4) -> dynamicxIn4.update("layers", WorldGenSettingsHeightAndBiomeFix::updateLayers));
                         } else {
-                            return dynamic;
+                            return dynamicIn;
                         }
                     }));
                 return (type3.readTyped(dynamic).result().orElseThrow(() -> new IllegalStateException("WorldGenSettingsHeightAndBiomeFix failed."))).getFirst();
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java b/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
index 0d2da421f69fb3253a097761e990034616eab28b..0956a7e5fa04296758ed52fb357ceec7db9cb54d 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
@@ -46,11 +46,11 @@ public class V1451_6 extends NamespacedSchema {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
             Dynamic<T> dynamic = new Dynamic(dynamicOps, object);
             Optional<Dynamic<T>> optional = dynamic.get("CriteriaType").get().get().left().flatMap((dynamic2) -> {
-                Optional<String> optional = dynamic2.get("type").asString().get().left();
-                Optional<String> optional2 = dynamic2.get("id").asString().get().left();
-                if (optional.isPresent() && optional2.isPresent()) {
-                    String s = (String)optional.get();
-                    return s.equals("_special") ? Optional.of(dynamic.createString((String)optional2.get())) : Optional.of(dynamic2.createString(this.packWithDot(s) + ":" + this.packWithDot((String)optional2.get())));
+                Optional<String> typeOptional = dynamic2.get("type").asString().get().left();
+                Optional<String> idOptional = dynamic2.get("id").asString().get().left();
+                if (typeOptional.isPresent() && idOptional.isPresent()) {
+                    String s = (String)typeOptional.get();
+                    return s.equals("_special") ? Optional.of(dynamic.createString((String)idOptional.get())) : Optional.of(dynamic2.createString(this.packWithDot(s) + ":" + this.packWithDot((String)idOptional.get())));
                 } else {
                     return Optional.empty();
                 }
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V704.java b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
index 9cfda62a5341f052d46b97f32927c3c5f1921189..00ba7dd4d61b91cba0866e69d2d016fff678c342 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V704.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
@@ -138,7 +138,7 @@ public class V704 extends Schema {
     });
     protected static final HookFunction ADD_NAMES = new HookFunction() {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-            return V99.addNames(new Dynamic(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "ArmorStand");
+            return V99.addNames(new Dynamic<>(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "ArmorStand");
         }
     };
 
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V705.java b/src/main/java/net/minecraft/util/datafix/schemas/V705.java
index 4c5f62c5b60826da77f9e71170d83bd1174c8831..d112911d628e7abffec2805dec315764f27ccc11 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V705.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V705.java
@@ -14,7 +14,7 @@ import net.minecraft.util.datafix.fixes.References;
 public class V705 extends NamespacedSchema {
     protected static final HookFunction ADD_NAMES = new HookFunction() {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-            return V99.addNames(new Dynamic(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "minecraft:armor_stand");
+            return V99.addNames(new Dynamic<>(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "minecraft:armor_stand");
         }
     };
 
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V99.java b/src/main/java/net/minecraft/util/datafix/schemas/V99.java
index 6bcc80f11b61372632ebd4462e715177bedda178..2d56b6442aa83d9594cc30fc08d2ae9703c417a2 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V99.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V99.java
@@ -54,7 +54,7 @@ public class V99 extends Schema {
     });
     protected static final HookFunction ADD_NAMES = new HookFunction() {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-            return V99.addNames(new Dynamic(dynamicOps, object), V99.ITEM_TO_BLOCKENTITY, "ArmorStand");
+            return V99.addNames(new Dynamic<>(dynamicOps, object), V99.ITEM_TO_BLOCKENTITY, "ArmorStand");
         }
     };
 
@@ -206,14 +206,14 @@ public class V99 extends Schema {
 
     protected static <T> T addNames(Dynamic<T> dynamic, Map<String, String> map, String s) {
         return (T)dynamic.update("tag", (dynamic2) -> dynamic2.update("BlockEntityTag", (dynamic2x) -> {
-                String s = (String)dynamic.get("id").asString().result().map(NamespacedSchema::ensureNamespaced).orElse("minecraft:air");
-                if (!"minecraft:air".equals(s)) {
-                    String s2 = (String)map.get(s);
+                String id = (String)dynamic.get("id").asString().result().map(NamespacedSchema::ensureNamespaced).orElse("minecraft:air");
+                if (!"minecraft:air".equals(id)) {
+                    String s2 = (String)map.get(id);
                     if (s2 != null) {
                         return dynamic2x.set("id", dynamic.createString(s2));
                     }
 
-                    LOGGER.warn("Unable to resolve BlockEntity for ItemStack: {}", s);
+                    LOGGER.warn("Unable to resolve BlockEntity for ItemStack: {}", id);
                 }
 
                 return dynamic2x;
diff --git a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
index deb32d29ab4148510ecb78395d4c34d53184aa23..ab9d6a72ae6bf3604db146988c4ad5b130d05155 100644
--- a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
+++ b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
@@ -43,7 +43,7 @@ public class FilledProfileResults implements ProfileResults {
         }
     };
     private static final Splitter SPLITTER = Splitter.on('\u001e');
-    private static final Comparator<Entry<String, FilledProfileResults.CounterCollector>> COUNTER_ENTRY_COMPARATOR = Entry.comparingByValue(Comparator.comparingLong((counterCollector) -> counterCollector.totalValue)).reversed();
+    private static final Comparator<Entry<String, FilledProfileResults.CounterCollector>> COUNTER_ENTRY_COMPARATOR = Entry.<String, CounterCollector>comparingByValue(Comparator.comparingLong((counterCollector) -> counterCollector.totalValue)).reversed();
     private final Map<String, ? extends ProfilerPathEntry> entries;
     private final long startTimeNano;
     private final int startTimeTicks;
@@ -124,7 +124,7 @@ public class FilledProfileResults implements ProfileResults {
             Object2LongMap<String> object2LongMap = profilerPathEntry.getCounters();
             if (!object2LongMap.isEmpty()) {
                 List<String> list = SPLITTER.splitToList(s);
-                object2LongMap.forEach((sx, l) -> ((FilledProfileResults.CounterCollector)map.computeIfAbsent(sx, (s) -> new FilledProfileResults.CounterCollector())).addValue(list.iterator(), l));
+                object2LongMap.forEach((sx, l) -> ((FilledProfileResults.CounterCollector)map.computeIfAbsent(sx, (str) -> new FilledProfileResults.CounterCollector())).addValue(list.iterator(), l));
             }
 
         });
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java b/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java
index 976325a036b5ef191a60ebbfd57ec50898411c02..445aca154f262388be61217fcd9de2c3c78a9a88 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java
@@ -19,97 +19,13 @@ import net.minecraft.util.profiling.jfr.stats.TickTimeStat;
 import net.minecraft.util.profiling.jfr.stats.TimedStatSummary;
 import net.minecraft.world.level.chunk.ChunkStatus;
 
-public record JfrStatsResult(Instant a, Instant b, Duration c, @Nullable Duration d, List<TickTimeStat> e, List<CpuLoadStat> f, GcHeapStat.Summary g, ThreadAllocationStat.Summary h, NetworkPacketSummary i, NetworkPacketSummary j, FileIOStat.Summary k, FileIOStat.Summary l, List<ChunkGenStat> m) {
-    private final Instant recordingStarted;
-    private final Instant recordingEnded;
-    private final Duration recordingDuration;
-    @Nullable
-    private final Duration worldCreationDuration;
-    private final List<TickTimeStat> tickTimes;
-    private final List<CpuLoadStat> cpuLoadStats;
-    private final GcHeapStat.Summary heapSummary;
-    private final ThreadAllocationStat.Summary threadAllocationSummary;
-    private final NetworkPacketSummary receivedPacketsSummary;
-    private final NetworkPacketSummary sentPacketsSummary;
-    private final FileIOStat.Summary fileWrites;
-    private final FileIOStat.Summary fileReads;
-    private final List<ChunkGenStat> chunkGenStats;
-
-    public JfrStatsResult(Instant instant, Instant instant2, Duration duration, @Nullable Duration duration2, List<TickTimeStat> list, List<CpuLoadStat> list2, GcHeapStat.Summary summary, ThreadAllocationStat.Summary summary2, NetworkPacketSummary networkPacketSummary, NetworkPacketSummary networkPacketSummary2, FileIOStat.Summary summary3, FileIOStat.Summary summary4, List<ChunkGenStat> list3) {
-        this.recordingStarted = instant;
-        this.recordingEnded = instant2;
-        this.recordingDuration = duration;
-        this.worldCreationDuration = duration2;
-        this.tickTimes = list;
-        this.cpuLoadStats = list2;
-        this.heapSummary = summary;
-        this.threadAllocationSummary = summary2;
-        this.receivedPacketsSummary = networkPacketSummary;
-        this.sentPacketsSummary = networkPacketSummary2;
-        this.fileWrites = summary3;
-        this.fileReads = summary4;
-        this.chunkGenStats = list3;
-    }
-
+public record JfrStatsResult(Instant recordingStarted, Instant recordingEnded, Duration recordingDuration, Duration worldCreationDuration, List<TickTimeStat> tickTimes, List<CpuLoadStat> cpuLoadStats, GcHeapStat.Summary heapSummary, ThreadAllocationStat.Summary threadAllocationSummary, NetworkPacketSummary receivedPacketsSummary, NetworkPacketSummary sentPacketsSummary, FileIOStat.Summary fileWrites, FileIOStat.Summary fileReads, List<ChunkGenStat> chunkGenStats) {
     public List<Pair<ChunkStatus, TimedStatSummary<ChunkGenStat>>> chunkGenSummary() {
         Map<ChunkStatus, List<ChunkGenStat>> map = this.chunkGenStats.stream().collect(Collectors.groupingBy(ChunkGenStat::status));
-        return map.entrySet().stream().map((entry) -> Pair.of((ChunkStatus)entry.getKey(), TimedStatSummary.summary(entry.getValue()))).sorted(Comparator.comparing((pair) -> ((TimedStatSummary)pair.getSecond()).totalDuration()).reversed()).toList();
+        return map.entrySet().stream().map((entry) -> Pair.of((ChunkStatus)entry.getKey(), TimedStatSummary.summary(entry.getValue()))).sorted(Comparator.<Pair<ChunkStatus, TimedStatSummary<ChunkGenStat>>, Duration>comparing((pair) -> pair.getSecond().totalDuration()).reversed()).toList();
     }
 
     public String asJson() {
         return (new JfrResultJsonSerializer()).format(this);
     }
-
-    public Instant recordingStarted() {
-        return this.recordingStarted;
-    }
-
-    public Instant recordingEnded() {
-        return this.recordingEnded;
-    }
-
-    public Duration recordingDuration() {
-        return this.recordingDuration;
-    }
-
-    @Nullable
-    public Duration worldCreationDuration() {
-        return this.worldCreationDuration;
-    }
-
-    public List<TickTimeStat> tickTimes() {
-        return this.tickTimes;
-    }
-
-    public List<CpuLoadStat> cpuLoadStats() {
-        return this.cpuLoadStats;
-    }
-
-    public GcHeapStat.Summary heapSummary() {
-        return this.heapSummary;
-    }
-
-    public ThreadAllocationStat.Summary threadAllocationSummary() {
-        return this.threadAllocationSummary;
-    }
-
-    public NetworkPacketSummary receivedPacketsSummary() {
-        return this.receivedPacketsSummary;
-    }
-
-    public NetworkPacketSummary sentPacketsSummary() {
-        return this.sentPacketsSummary;
-    }
-
-    public FileIOStat.Summary fileWrites() {
-        return this.fileWrites;
-    }
-
-    public FileIOStat.Summary fileReads() {
-        return this.fileReads;
-    }
-
-    public List<ChunkGenStat> chunkGenStats() {
-        return this.chunkGenStats;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java b/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java
index e6f4a8c962e9d396b5809308aa180c661b62576a..65c6a05348ec768e5cc355658ac417ee16cd7273 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java
@@ -81,14 +81,14 @@ public class JfrResultJsonSerializer {
             JsonObject jsonObject3 = Util.make(new JsonObject(), (jsonObject2x) -> jsonObject2.add("durationNanosPercentiles", jsonObject2x));
             timedStatSummary.percentilesNanos().forEach((integer, d) -> jsonObject3.addProperty("p" + integer, d));
             Function<ChunkGenStat, JsonElement> function = (chunkGenStat) -> {
-                JsonObject jsonObject = new JsonObject();
-                jsonObject.addProperty("durationNanos", chunkGenStat.duration().toNanos());
-                jsonObject.addProperty("level", chunkGenStat.level());
-                jsonObject.addProperty("chunkPosX", chunkGenStat.chunkPos().x);
-                jsonObject.addProperty("chunkPosZ", chunkGenStat.chunkPos().z);
-                jsonObject.addProperty("worldPosX", chunkGenStat.worldPos().x);
-                jsonObject.addProperty("worldPosZ", chunkGenStat.worldPos().z);
-                return jsonObject;
+                JsonObject jsonObjectIn = new JsonObject();
+                jsonObjectIn.addProperty("durationNanos", chunkGenStat.duration().toNanos());
+                jsonObjectIn.addProperty("level", chunkGenStat.level());
+                jsonObjectIn.addProperty("chunkPosX", chunkGenStat.chunkPos().x);
+                jsonObjectIn.addProperty("chunkPosZ", chunkGenStat.chunkPos().z);
+                jsonObjectIn.addProperty("worldPosX", chunkGenStat.worldPos().x);
+                jsonObjectIn.addProperty("worldPosZ", chunkGenStat.worldPos().z);
+                return jsonObjectIn;
             };
             jsonObject2.add("fastest", (JsonElement)function.apply(timedStatSummary.fastest()));
             jsonObject2.add("slowest", (JsonElement)function.apply(timedStatSummary.slowest()));
@@ -139,10 +139,10 @@ public class JfrResultJsonSerializer {
         JsonArray jsonArray = new JsonArray();
         jsonObject.add("topContributors", jsonArray);
         summary.topTenContributorsByTotalBytes().forEach((pair) -> {
-            JsonObject jsonObject = new JsonObject();
-            jsonArray.add(jsonObject);
-            jsonObject.addProperty("path", (String)pair.getFirst());
-            jsonObject.addProperty("totalBytes", (Number)pair.getSecond());
+            JsonObject jsonObjectIn = new JsonObject();
+            jsonArray.add(jsonObjectIn);
+            jsonObjectIn.addProperty("path", (String)pair.getFirst());
+            jsonObjectIn.addProperty("totalBytes", (Number)pair.getSecond());
         });
         return jsonObject;
     }
@@ -163,15 +163,15 @@ public class JfrResultJsonSerializer {
         JsonArray jsonArray = new JsonArray();
         jsonObject.add("topContributors", jsonArray);
         networkPacketSummary.largestSizeContributors().forEach((pair) -> {
-            JsonObject jsonObject = new JsonObject();
-            jsonArray.add(jsonObject);
+            JsonObject jsonObjectIn = new JsonObject();
+            jsonArray.add(jsonObjectIn);
             NetworkPacketSummary.PacketIdentification packetIdentification = (NetworkPacketSummary.PacketIdentification)pair.getFirst();
             NetworkPacketSummary.PacketCountAndSize packetCountAndSize = (NetworkPacketSummary.PacketCountAndSize)pair.getSecond();
-            jsonObject.addProperty("protocolId", packetIdentification.protocolId());
-            jsonObject.addProperty("packetId", packetIdentification.packetId());
-            jsonObject.addProperty("packetName", packetIdentification.packetName());
-            jsonObject.addProperty("totalBytes", packetCountAndSize.totalSize());
-            jsonObject.addProperty("count", packetCountAndSize.totalCount());
+            jsonObjectIn.addProperty("protocolId", packetIdentification.protocolId());
+            jsonObjectIn.addProperty("packetId", packetIdentification.packetId());
+            jsonObjectIn.addProperty("packetName", packetIdentification.packetName());
+            jsonObjectIn.addProperty("totalBytes", packetCountAndSize.totalSize());
+            jsonObjectIn.addProperty("count", packetCountAndSize.totalCount());
         });
         return jsonObject;
     }
@@ -179,12 +179,12 @@ public class JfrResultJsonSerializer {
     private JsonElement cpu(List<CpuLoadStat> list) {
         JsonObject jsonObject = new JsonObject();
         BiFunction<List<CpuLoadStat>, ToDoubleFunction<CpuLoadStat>, JsonObject> biFunction = (listx, toDoubleFunction) -> {
-            JsonObject jsonObject = new JsonObject();
+            JsonObject jsonObjectIn = new JsonObject();
             DoubleSummaryStatistics doubleSummaryStatistics = listx.stream().mapToDouble(toDoubleFunction).summaryStatistics();
-            jsonObject.addProperty("min", doubleSummaryStatistics.getMin());
-            jsonObject.addProperty("average", doubleSummaryStatistics.getAverage());
-            jsonObject.addProperty("max", doubleSummaryStatistics.getMax());
-            return jsonObject;
+            jsonObjectIn.addProperty("min", doubleSummaryStatistics.getMin());
+            jsonObjectIn.addProperty("average", doubleSummaryStatistics.getAverage());
+            jsonObjectIn.addProperty("max", doubleSummaryStatistics.getMax());
+            return jsonObjectIn;
         };
         jsonObject.add("jvm", (JsonElement)biFunction.apply(list, CpuLoadStat::jvm));
         jsonObject.add("userJvm", (JsonElement)biFunction.apply(list, CpuLoadStat::userJvm));
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/ChunkGenStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/ChunkGenStat.java
index 70c42d0742364e30493273885645eafe6b98fcc8..c1c751cbf4f5293de4b52747990112340d69fbee 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/ChunkGenStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/ChunkGenStat.java
@@ -6,42 +6,8 @@ import net.minecraft.server.level.ColumnPos;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkStatus;
 
-public record ChunkGenStat(Duration a, ChunkPos b, ColumnPos c, ChunkStatus d, String e) implements TimedStat {
-    private final Duration duration;
-    private final ChunkPos chunkPos;
-    private final ColumnPos worldPos;
-    private final ChunkStatus status;
-    private final String level;
-
-    public ChunkGenStat(Duration duration, ChunkPos chunkPos, ColumnPos columnPos, ChunkStatus chunkStatus, String s) {
-        this.duration = duration;
-        this.chunkPos = chunkPos;
-        this.worldPos = columnPos;
-        this.status = chunkStatus;
-        this.level = s;
-    }
-
+public record ChunkGenStat(Duration duration, ChunkPos chunkPos, ColumnPos worldPos, ChunkStatus status, String level) implements TimedStat {
     public static ChunkGenStat from(RecordedEvent recordedEvent) {
         return new ChunkGenStat(recordedEvent.getDuration(), new ChunkPos(recordedEvent.getInt("chunkPosX"), recordedEvent.getInt("chunkPosX")), new ColumnPos(recordedEvent.getInt("worldPosX"), recordedEvent.getInt("worldPosZ")), ChunkStatus.byName(recordedEvent.getString("status")), recordedEvent.getString("level"));
     }
-
-    public Duration duration() {
-        return this.duration;
-    }
-
-    public ChunkPos chunkPos() {
-        return this.chunkPos;
-    }
-
-    public ColumnPos worldPos() {
-        return this.worldPos;
-    }
-
-    public ChunkStatus status() {
-        return this.status;
-    }
-
-    public String level() {
-        return this.level;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/CpuLoadStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/CpuLoadStat.java
index a48e3de45e3020eea4743b8e863af1c7b00ff5bc..76e6413cb803facb52d9b399dd03ba35cbb18292 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/CpuLoadStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/CpuLoadStat.java
@@ -2,30 +2,8 @@ package net.minecraft.util.profiling.jfr.stats;
 
 import jdk.jfr.consumer.RecordedEvent;
 
-public record CpuLoadStat(double a, double b, double c) {
-    private final double jvm;
-    private final double userJvm;
-    private final double system;
-
-    public CpuLoadStat(double d, double d2, double d3) {
-        this.jvm = d;
-        this.userJvm = d2;
-        this.system = d3;
-    }
-
+public record CpuLoadStat(double jvm, double userJvm, double system) {
     public static CpuLoadStat from(RecordedEvent recordedEvent) {
         return new CpuLoadStat((double)recordedEvent.getFloat("jvmSystem"), (double)recordedEvent.getFloat("jvmUser"), (double)recordedEvent.getFloat("machineTotal"));
     }
-
-    public double jvm() {
-        return this.jvm;
-    }
-
-    public double userJvm() {
-        return this.userJvm;
-    }
-
-    public double system() {
-        return this.system;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java
index 4fef20475385e2c71b51f4d5abdd866f24d98add..9994a85a762a4d0ad71372b19a16f6ac7d8c939e 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java
@@ -8,75 +8,12 @@ import java.util.Map.Entry;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 
-public record FileIOStat(Duration a, @Nullable String b, long c) {
-    private final Duration duration;
-    @Nullable
-    private final String path;
-    private final long bytes;
-
-    public FileIOStat(Duration duration, @Nullable String s, long l) {
-        this.duration = duration;
-        this.path = s;
-        this.bytes = l;
-    }
-
+public record FileIOStat(Duration duration, String path, long bytes) {
     public static FileIOStat.Summary summary(Duration duration, List<FileIOStat> list) {
         long l = list.stream().mapToLong((fileIOStat) -> fileIOStat.bytes).sum();
-        return new FileIOStat.Summary(l, (double)l / (double)duration.getSeconds(), (long)list.size(), (double)list.size() / (double)duration.getSeconds(), (Duration)list.stream().map(FileIOStat::duration).reduce(Duration.ZERO, Duration::plus), (list.stream().filter((fileIOStat) -> fileIOStat.path != null).collect(Collectors.groupingBy((fileIOStat) -> fileIOStat.path, Collectors.summingLong((fileIOStat) -> fileIOStat.bytes)))).entrySet().stream().sorted(Entry.comparingByValue().reversed()).map((entry) -> Pair.of((String)entry.getKey(), (Long)entry.getValue())).limit(10L).toList());
-    }
-
-    public Duration duration() {
-        return this.duration;
-    }
-
-    @Nullable
-    public String path() {
-        return this.path;
-    }
-
-    public long bytes() {
-        return this.bytes;
+        return new FileIOStat.Summary(l, (double)l / (double)duration.getSeconds(), (long)list.size(), (double)list.size() / (double)duration.getSeconds(), (Duration)list.stream().map(FileIOStat::duration).reduce(Duration.ZERO, Duration::plus), (list.stream().filter((fileIOStat) -> fileIOStat.path != null).collect(Collectors.groupingBy((fileIOStat) -> fileIOStat.path, Collectors.summingLong((fileIOStat) -> fileIOStat.bytes)))).entrySet().stream().sorted(Entry.<String, Long>comparingByValue().reversed()).map((entry) -> Pair.of((String)entry.getKey(), (Long)entry.getValue())).limit(10L).toList());
     }
 
-    public static record Summary(long a, double b, long c, double d, Duration e, List<Pair<String, Long>> f) {
-        private final long totalBytes;
-        private final double bytesPerSecond;
-        private final long counts;
-        private final double countsPerSecond;
-        private final Duration timeSpentInIO;
-        private final List<Pair<String, Long>> topTenContributorsByTotalBytes;
-
-        public Summary(long l, double d, long l2, double d2, Duration duration, List<Pair<String, Long>> list) {
-            this.totalBytes = l;
-            this.bytesPerSecond = d;
-            this.counts = l2;
-            this.countsPerSecond = d2;
-            this.timeSpentInIO = duration;
-            this.topTenContributorsByTotalBytes = list;
-        }
-
-        public long totalBytes() {
-            return this.totalBytes;
-        }
-
-        public double bytesPerSecond() {
-            return this.bytesPerSecond;
-        }
-
-        public long counts() {
-            return this.counts;
-        }
-
-        public double countsPerSecond() {
-            return this.countsPerSecond;
-        }
-
-        public Duration timeSpentInIO() {
-            return this.timeSpentInIO;
-        }
-
-        public List<Pair<String, Long>> topTenContributorsByTotalBytes() {
-            return this.topTenContributorsByTotalBytes;
-        }
+    public static record Summary(long totalBytes, double bytesPerSecond, long counts, double countsPerSecond, Duration timeSpentInIO, List<Pair<String, Long>> topTenContributorsByTotalBytes) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/GcHeapStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/GcHeapStat.java
index 767bc1069a58fa6421e75c3fcaa7c9dbfb2d6e50..701ebf168b673da1edbe26dd54644077a06b06ed 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/GcHeapStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/GcHeapStat.java
@@ -7,17 +7,7 @@ import java.util.Map;
 import java.util.stream.Collectors;
 import jdk.jfr.consumer.RecordedEvent;
 
-public record GcHeapStat(Instant a, long b, GcHeapStat.Timing c) {
-    private final Instant timestamp;
-    private final long heapUsed;
-    private final GcHeapStat.Timing timing;
-
-    public GcHeapStat(Instant instant, long l, GcHeapStat.Timing timing) {
-        this.timestamp = instant;
-        this.heapUsed = l;
-        this.timing = timing;
-    }
-
+public record GcHeapStat(Instant timestamp, long heapUsed, GcHeapStat.Timing timing) {
     public static GcHeapStat from(RecordedEvent recordedEvent) {
         return new GcHeapStat(recordedEvent.getStartTime(), recordedEvent.getLong("heapUsed"), recordedEvent.getString("when").equalsIgnoreCase("before gc") ? GcHeapStat.Timing.BEFORE_GC : GcHeapStat.Timing.AFTER_GC);
     }
@@ -42,50 +32,10 @@ public record GcHeapStat(Instant a, long b, GcHeapStat.Timing c) {
         return (double)l / (double)duration.getSeconds();
     }
 
-    public Instant timestamp() {
-        return this.timestamp;
-    }
-
-    public long heapUsed() {
-        return this.heapUsed;
-    }
-
-    public GcHeapStat.Timing timing() {
-        return this.timing;
-    }
-
-    public static record Summary(Duration a, Duration b, int c, double d) {
-        private final Duration duration;
-        private final Duration gcTotalDuration;
-        private final int totalGCs;
-        private final double allocationRateBytesPerSecond;
-
-        public Summary(Duration duration, Duration duration2, int i, double d) {
-            this.duration = duration;
-            this.gcTotalDuration = duration2;
-            this.totalGCs = i;
-            this.allocationRateBytesPerSecond = d;
-        }
-
+    public static record Summary(Duration duration, Duration gcTotalDuration, int totalGCs, double allocationRateBytesPerSecond) {
         public float gcOverHead() {
             return (float)this.gcTotalDuration.toMillis() / (float)this.duration.toMillis();
         }
-
-        public Duration duration() {
-            return this.duration;
-        }
-
-        public Duration gcTotalDuration() {
-            return this.gcTotalDuration;
-        }
-
-        public int totalGCs() {
-            return this.totalGCs;
-        }
-
-        public double allocationRateBytesPerSecond() {
-            return this.allocationRateBytesPerSecond;
-        }
     }
 
     static enum Timing {
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/NetworkPacketSummary.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/NetworkPacketSummary.java
index e1aa56f26007bf13fdcf12526ffc4a0c7a2c3169..23a3a335cd394f516fee098af958a3c935a2591e 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/NetworkPacketSummary.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/NetworkPacketSummary.java
@@ -44,41 +44,17 @@ public final class NetworkPacketSummary {
         return this.largestSizeContributors;
     }
 
-    public static record PacketCountAndSize(long a, long b) {
-        final long totalCount;
-        final long totalSize;
+    public static record PacketCountAndSize(long totalCount, long totalSize) {
         static final Comparator<NetworkPacketSummary.PacketCountAndSize> SIZE_THEN_COUNT = Comparator.comparing(NetworkPacketSummary.PacketCountAndSize::totalSize).thenComparing(NetworkPacketSummary.PacketCountAndSize::totalCount).reversed();
 
-        public PacketCountAndSize(long l, long l2) {
-            this.totalCount = l;
-            this.totalSize = l2;
-        }
-
         NetworkPacketSummary.PacketCountAndSize add(NetworkPacketSummary.PacketCountAndSize packetCountAndSize) {
             return new NetworkPacketSummary.PacketCountAndSize(this.totalCount + packetCountAndSize.totalCount, this.totalSize + packetCountAndSize.totalSize);
         }
-
-        public long totalCount() {
-            return this.totalCount;
-        }
-
-        public long totalSize() {
-            return this.totalSize;
-        }
     }
 
-    public static record PacketIdentification(PacketFlow a, int b, int c) {
-        private final PacketFlow direction;
-        private final int protocolId;
-        private final int packetId;
+    public static record PacketIdentification(PacketFlow direction, int protocolId, int packetId) {
         private static final Map<NetworkPacketSummary.PacketIdentification, String> PACKET_NAME_BY_ID;
 
-        public PacketIdentification(PacketFlow packetFlow, int i, int i2) {
-            this.direction = packetFlow;
-            this.protocolId = i;
-            this.packetId = i2;
-        }
-
         public String packetName() {
             return (String)PACKET_NAME_BY_ID.getOrDefault(this, "unknown");
         }
@@ -87,18 +63,6 @@ public final class NetworkPacketSummary {
             return new NetworkPacketSummary.PacketIdentification(recordedEvent.getEventType().getName().equals("minecraft.PacketSent") ? PacketFlow.CLIENTBOUND : PacketFlow.SERVERBOUND, recordedEvent.getInt("protocolId"), recordedEvent.getInt("packetId"));
         }
 
-        public PacketFlow direction() {
-            return this.direction;
-        }
-
-        public int protocolId() {
-            return this.protocolId;
-        }
-
-        public int packetId() {
-            return this.packetId;
-        }
-
         static {
             Builder<NetworkPacketSummary.PacketIdentification, String> builder = ImmutableMap.builder();
 
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/ThreadAllocationStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/ThreadAllocationStat.java
index 3f92c9c97fdc4b72be685d1f86545e42d9b064bd..eff4edbf6ceab2beaff427943ed86957796478d8 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/ThreadAllocationStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/ThreadAllocationStat.java
@@ -10,21 +10,12 @@ import java.util.stream.Collectors;
 import jdk.jfr.consumer.RecordedEvent;
 import jdk.jfr.consumer.RecordedThread;
 
-public record ThreadAllocationStat(Instant a, String b, long c) {
-    private final Instant timestamp;
-    private final String threadName;
-    private final long totalBytes;
+public record ThreadAllocationStat(Instant timestamp, String threadName, long totalBytes) {
     private static final String UNKNOWN_THREAD = "unknown";
 
-    public ThreadAllocationStat(Instant instant, String s, long l) {
-        this.timestamp = instant;
-        this.threadName = s;
-        this.totalBytes = l;
-    }
-
     public static ThreadAllocationStat from(RecordedEvent recordedEvent) {
         RecordedThread recordedThread = recordedEvent.getThread("thread");
-        String s = recordedThread == null ? "unknown" : (String)MoreObjects.firstNonNull(recordedThread.getJavaName(), "unknown");
+        String s = recordedThread == null ? UNKNOWN_THREAD : (String)MoreObjects.firstNonNull(recordedThread.getJavaName(), UNKNOWN_THREAD);
         return new ThreadAllocationStat(recordedEvent.getStartTime(), s, recordedEvent.getLong("allocated"));
     }
 
@@ -43,27 +34,5 @@ public record ThreadAllocationStat(Instant a, String b, long c) {
         return new ThreadAllocationStat.Summary(map);
     }
 
-    public Instant timestamp() {
-        return this.timestamp;
-    }
-
-    public String threadName() {
-        return this.threadName;
-    }
-
-    public long totalBytes() {
-        return this.totalBytes;
-    }
-
-    public static record Summary(Map<String, Double> a) {
-        private final Map<String, Double> allocationsPerSecondByThread;
-
-        public Summary(Map<String, Double> map) {
-            this.allocationsPerSecondByThread = map;
-        }
-
-        public Map<String, Double> allocationsPerSecondByThread() {
-            return this.allocationsPerSecondByThread;
-        }
-    }
+    public static record Summary(Map<String, Double> allocationsPerSecondByThread) {}
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/TickTimeStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/TickTimeStat.java
index 7cc170f2530565ddab79cc5e4f6e5b8016648995..96e47ea921319bb755a53e8f1a12d240add72665 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/TickTimeStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/TickTimeStat.java
@@ -4,24 +4,8 @@ import java.time.Duration;
 import java.time.Instant;
 import jdk.jfr.consumer.RecordedEvent;
 
-public record TickTimeStat(Instant a, Duration b) {
-    private final Instant timestamp;
-    private final Duration currentAverage;
-
-    public TickTimeStat(Instant instant, Duration duration) {
-        this.timestamp = instant;
-        this.currentAverage = duration;
-    }
-
+public record TickTimeStat(Instant timestamp, Duration currentAverage) {
     public static TickTimeStat from(RecordedEvent recordedEvent) {
         return new TickTimeStat(recordedEvent.getStartTime(), recordedEvent.getDuration("averageTickDuration"));
     }
-
-    public Instant timestamp() {
-        return this.timestamp;
-    }
-
-    public Duration currentAverage() {
-        return this.currentAverage;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java
index 424f06e64553d2af2a62f00a4a6f586ac984f8e3..d20a296b1ee615668de627542373eaa22900e39f 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java
@@ -7,24 +7,7 @@ import java.util.Map;
 import javax.annotation.Nullable;
 import net.minecraft.util.profiling.jfr.Percentiles;
 
-public record TimedStatSummary<T extends TimedStat>(T a, T b, @Nullable T c, int d, Map<Integer, Double> e, Duration f) {
-    private final T fastest;
-    private final T slowest;
-    @Nullable
-    private final T secondSlowest;
-    private final int count;
-    private final Map<Integer, Double> percentilesNanos;
-    private final Duration totalDuration;
-
-    public TimedStatSummary(T timedStat, T timedStat2, @Nullable T timedStat3, int i, Map<Integer, Double> map, Duration duration) {
-        this.fastest = timedStat;
-        this.slowest = timedStat2;
-        this.secondSlowest = timedStat3;
-        this.count = i;
-        this.percentilesNanos = map;
-        this.totalDuration = duration;
-    }
-
+public record TimedStatSummary<T extends TimedStat>(T fastest, T slowest, T secondSlowest, int count, Map<Integer, Double> percentilesNanos, Duration totalDuration) {
     public static <T extends TimedStat> TimedStatSummary<T> summary(List<T> list) {
         if (list.isEmpty()) {
             throw new IllegalArgumentException("No values");
@@ -36,32 +19,7 @@ public record TimedStatSummary<T extends TimedStat>(T a, T b, @Nullable T c, int
             T timedStat3 = list2.size() > 1 ? list2.get(list2.size() - 2) : null;
             int i = list2.size();
             Map<Integer, Double> map = Percentiles.evaluate(list2.stream().mapToLong((timedStatx) -> timedStatx.duration().toNanos()).toArray());
-            return new TimedStatSummary<>(timedStat, timedStat2, timedStat3, i, map, duration);
+            return new TimedStatSummary(timedStat, timedStat2, timedStat3, i, map, duration);
         }
     }
-
-    public T fastest() {
-        return this.fastest;
-    }
-
-    public T slowest() {
-        return this.slowest;
-    }
-
-    @Nullable
-    public T secondSlowest() {
-        return this.secondSlowest;
-    }
-
-    public int count() {
-        return this.count;
-    }
-
-    public Map<Integer, Double> percentilesNanos() {
-        return this.percentilesNanos;
-    }
-
-    public Duration totalDuration() {
-        return this.totalDuration;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/random/WeightedRandom.java b/src/main/java/net/minecraft/util/random/WeightedRandom.java
index c2eb3eaed8d492ce6cb96f329268873ff3e2f25f..a1070f874ac950610a8e83faff064bbc1d8ca580 100644
--- a/src/main/java/net/minecraft/util/random/WeightedRandom.java
+++ b/src/main/java/net/minecraft/util/random/WeightedRandom.java
@@ -25,7 +25,7 @@ public class WeightedRandom {
 
     public static <T extends WeightedEntry> Optional<T> getRandomItem(Random random, List<T> list, int i) {
         if (i < 0) {
-            throw (IllegalArgumentException)Util.pauseInIde((T)(new IllegalArgumentException("Negative total weight in getRandomItem")));
+            throw (IllegalArgumentException)Util.pauseInIde((new IllegalArgumentException("Negative total weight in getRandomItem")));
         } else if (i == 0) {
             return Optional.empty();
         } else {
diff --git a/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java b/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
index 21e6b79ffdb005cf1307d0d425d4269e7746f7f6..33192849afacc3d656b0f2aa6dbe3ccc5850f93c 100644
--- a/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
@@ -7,7 +7,7 @@ import java.util.Random;
 import java.util.function.Function;
 
 public class BiasedToBottomInt extends IntProvider {
-    public static final Codec<BiasedToBottomInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.maxInclusive)).apply(instance, BiasedToBottomInt::new)).comapFlatMap((biasedToBottomInt) -> biasedToBottomInt.maxInclusive < biasedToBottomInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + biasedToBottomInt.minInclusive + ", max_inclusive: " + biasedToBottomInt.maxInclusive) : DataResult.success(biasedToBottomInt), Function.identity());
+    public static final Codec<BiasedToBottomInt> CODEC = RecordCodecBuilder.<BiasedToBottomInt>create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.maxInclusive)).apply(instance, BiasedToBottomInt::new)).comapFlatMap((biasedToBottomInt) -> biasedToBottomInt.maxInclusive < biasedToBottomInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + biasedToBottomInt.minInclusive + ", max_inclusive: " + biasedToBottomInt.maxInclusive) : DataResult.success(biasedToBottomInt), Function.identity());
     private final int minInclusive;
     private final int maxInclusive;
 
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java b/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
index 2e361052cc294c8319953d45013fc20554c102d5..a44a2b1b0bfebd9020db49c4b0f29043417c3c2f 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
@@ -8,7 +8,7 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class ClampedInt extends IntProvider {
-    public static final Codec<ClampedInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(IntProvider.CODEC.fieldOf("source").forGetter((clampedInt) -> clampedInt.source), Codec.INT.fieldOf("min_inclusive").forGetter((clampedInt) -> clampedInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedInt) -> clampedInt.maxInclusive)).apply(instance, ClampedInt::new)).comapFlatMap((clampedInt) -> clampedInt.maxInclusive < clampedInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + clampedInt.minInclusive + ", max_inclusive: " + clampedInt.maxInclusive) : DataResult.success(clampedInt), Function.identity());
+    public static final Codec<ClampedInt> CODEC = RecordCodecBuilder.<ClampedInt>create((instance) -> instance.group(IntProvider.CODEC.fieldOf("source").forGetter((clampedInt) -> clampedInt.source), Codec.INT.fieldOf("min_inclusive").forGetter((clampedInt) -> clampedInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedInt) -> clampedInt.maxInclusive)).apply(instance, ClampedInt::new)).comapFlatMap((clampedInt) -> clampedInt.maxInclusive < clampedInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + clampedInt.minInclusive + ", max_inclusive: " + clampedInt.maxInclusive) : DataResult.success(clampedInt), Function.identity());
     private final IntProvider source;
     private int minInclusive;
     private int maxInclusive;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
index af89f06330d1d636fefa9d9bf026170d10605460..3cd8af08c5eeae31c229d5d8f927c35e9414978e 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
@@ -8,7 +8,7 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class ClampedNormalFloat extends FloatProvider {
-    public static final Codec<ClampedNormalFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalFloat) -> clampedNormalFloat.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalFloat) -> clampedNormalFloat.deviation), Codec.FLOAT.fieldOf("min").forGetter((clampedNormalFloat) -> clampedNormalFloat.min), Codec.FLOAT.fieldOf("max").forGetter((clampedNormalFloat) -> clampedNormalFloat.max)).apply(instance, ClampedNormalFloat::new)).comapFlatMap((clampedNormalFloat) -> clampedNormalFloat.max < clampedNormalFloat.min ? DataResult.error("Max must be larger than min: [" + clampedNormalFloat.min + ", " + clampedNormalFloat.max + "]") : DataResult.success(clampedNormalFloat), Function.identity());
+    public static final Codec<ClampedNormalFloat> CODEC = RecordCodecBuilder.<ClampedNormalFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalFloat) -> clampedNormalFloat.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalFloat) -> clampedNormalFloat.deviation), Codec.FLOAT.fieldOf("min").forGetter((clampedNormalFloat) -> clampedNormalFloat.min), Codec.FLOAT.fieldOf("max").forGetter((clampedNormalFloat) -> clampedNormalFloat.max)).apply(instance, ClampedNormalFloat::new)).comapFlatMap((clampedNormalFloat) -> clampedNormalFloat.max < clampedNormalFloat.min ? DataResult.error("Max must be larger than min: [" + clampedNormalFloat.min + ", " + clampedNormalFloat.max + "]") : DataResult.success(clampedNormalFloat), Function.identity());
     private float mean;
     private float deviation;
     private float min;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java
index c6022b1bfed0c050e6981ec6e0e879e4b1755814..87c84bb18364a0ba6a77815c3b7f3ce34915f97d 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java
@@ -8,7 +8,7 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class ClampedNormalInt extends IntProvider {
-    public static final Codec<ClampedNormalInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalInt) -> clampedNormalInt.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalInt) -> clampedNormalInt.deviation), Codec.INT.fieldOf("min_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.min_inclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.max_inclusive)).apply(instance, ClampedNormalInt::new)).comapFlatMap((clampedNormalInt) -> clampedNormalInt.max_inclusive < clampedNormalInt.min_inclusive ? DataResult.error("Max must be larger than min: [" + clampedNormalInt.min_inclusive + ", " + clampedNormalInt.max_inclusive + "]") : DataResult.success(clampedNormalInt), Function.identity());
+    public static final Codec<ClampedNormalInt> CODEC = RecordCodecBuilder.<ClampedNormalInt>create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalInt) -> clampedNormalInt.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalInt) -> clampedNormalInt.deviation), Codec.INT.fieldOf("min_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.min_inclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.max_inclusive)).apply(instance, ClampedNormalInt::new)).comapFlatMap((clampedNormalInt) -> clampedNormalInt.max_inclusive < clampedNormalInt.min_inclusive ? DataResult.error("Max must be larger than min: [" + clampedNormalInt.min_inclusive + ", " + clampedNormalInt.max_inclusive + "]") : DataResult.success(clampedNormalInt), Function.identity());
     private float mean;
     private float deviation;
     private int min_inclusive;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java b/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
index 3e9465d88d25fba69ca39257aeec519819be898f..c503580f6ff76239a26846222cb3bbfe4106e047 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
@@ -7,7 +7,7 @@ import java.util.Random;
 
 public class ConstantFloat extends FloatProvider {
     public static final ConstantFloat ZERO = new ConstantFloat(0.0F);
-    public static final Codec<ConstantFloat> CODEC = Codec.either(Codec.FLOAT, RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("value").forGetter((constantFloat) -> constantFloat.value)).apply(instance, ConstantFloat::new))).xmap((either) -> (ConstantFloat)either.map(ConstantFloat::of, (constantFloat) -> constantFloat), (constantFloat) -> Either.left(constantFloat.value));
+    public static final Codec<ConstantFloat> CODEC = Codec.either(Codec.FLOAT, RecordCodecBuilder.<ConstantFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("value").forGetter((constantFloat) -> constantFloat.value)).apply(instance, ConstantFloat::new))).xmap((either) -> (ConstantFloat)either.map(ConstantFloat::of, (constantFloat) -> constantFloat), (constantFloat) -> Either.left(constantFloat.value));
     private final float value;
 
     public static ConstantFloat of(float f) {
diff --git a/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java b/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
index 1f993dbadef01649c00a7fc5a07538b444cf8ce1..dd291b74ecdc1615e34d02dad58845f72d79fcc1 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
@@ -7,7 +7,7 @@ import java.util.Random;
 
 public class ConstantInt extends IntProvider {
     public static final ConstantInt ZERO = new ConstantInt(0);
-    public static final Codec<ConstantInt> CODEC = Codec.either(Codec.INT, RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("value").forGetter((constantInt) -> constantInt.value)).apply(instance, ConstantInt::new))).xmap((either) -> (ConstantInt)either.map(ConstantInt::of, (constantInt) -> constantInt), (constantInt) -> Either.left(constantInt.value));
+    public static final Codec<ConstantInt> CODEC = Codec.<Integer, ConstantInt>either(Codec.INT, RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("value").forGetter((constantInt) -> constantInt.value)).apply(instance, ConstantInt::new))).xmap((either) -> (ConstantInt)either.map(ConstantInt::of, (constantInt) -> constantInt), (constantInt) -> Either.left(constantInt.value));
     private final int value;
 
     public static ConstantInt of(int i) {
diff --git a/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java b/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
index 1978569738dd5ae322c016dcdf1743f761903d62..23384a1d1169d8d2a37ee3d5db149ffb6fa6b2c1 100644
--- a/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
@@ -7,7 +7,7 @@ import java.util.Random;
 import java.util.function.Function;
 
 public class TrapezoidFloat extends FloatProvider {
-    public static final Codec<TrapezoidFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("min").forGetter((trapezoidFloat) -> trapezoidFloat.min), Codec.FLOAT.fieldOf("max").forGetter((trapezoidFloat) -> trapezoidFloat.max), Codec.FLOAT.fieldOf("plateau").forGetter((trapezoidFloat) -> trapezoidFloat.plateau)).apply(instance, TrapezoidFloat::new)).comapFlatMap((trapezoidFloat) -> {
+    public static final Codec<TrapezoidFloat> CODEC = RecordCodecBuilder.<TrapezoidFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("min").forGetter((trapezoidFloat) -> trapezoidFloat.min), Codec.FLOAT.fieldOf("max").forGetter((trapezoidFloat) -> trapezoidFloat.max), Codec.FLOAT.fieldOf("plateau").forGetter((trapezoidFloat) -> trapezoidFloat.plateau)).apply(instance, TrapezoidFloat::new)).comapFlatMap((trapezoidFloat) -> {
         if (trapezoidFloat.max < trapezoidFloat.min) {
             return DataResult.error("Max must be larger than min: [" + trapezoidFloat.min + ", " + trapezoidFloat.max + "]");
         } else {
diff --git a/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java b/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
index b8970c65778b8152cad872c7355bf8a7f04f9563..55de71abf7e8f19a82643a963dfdbd799b17d918 100644
--- a/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
@@ -8,7 +8,7 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class UniformFloat extends FloatProvider {
-    public static final Codec<UniformFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("min_inclusive").forGetter((uniformFloat) -> uniformFloat.minInclusive), Codec.FLOAT.fieldOf("max_exclusive").forGetter((uniformFloat) -> uniformFloat.maxExclusive)).apply(instance, UniformFloat::new)).comapFlatMap((uniformFloat) -> uniformFloat.maxExclusive <= uniformFloat.minInclusive ? DataResult.error("Max must be larger than min, min_inclusive: " + uniformFloat.minInclusive + ", max_exclusive: " + uniformFloat.maxExclusive) : DataResult.success(uniformFloat), Function.identity());
+    public static final Codec<UniformFloat> CODEC = RecordCodecBuilder.<UniformFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("min_inclusive").forGetter((uniformFloat) -> uniformFloat.minInclusive), Codec.FLOAT.fieldOf("max_exclusive").forGetter((uniformFloat) -> uniformFloat.maxExclusive)).apply(instance, UniformFloat::new)).comapFlatMap((uniformFloat) -> uniformFloat.maxExclusive <= uniformFloat.minInclusive ? DataResult.error("Max must be larger than min, min_inclusive: " + uniformFloat.minInclusive + ", max_exclusive: " + uniformFloat.maxExclusive) : DataResult.success(uniformFloat), Function.identity());
     private final float minInclusive;
     private final float maxExclusive;
 
diff --git a/src/main/java/net/minecraft/util/valueproviders/UniformInt.java b/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
index 26fd1c29d10cd770c468f8b3e6ac7a0f1fc9bebe..92522bfbdb47b3561e5b50793e564b82f375848a 100644
--- a/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
@@ -8,7 +8,7 @@ import java.util.function.Function;
 import net.minecraft.util.Mth;
 
 public class UniformInt extends IntProvider {
-    public static final Codec<UniformInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((uniformInt) -> uniformInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((uniformInt) -> uniformInt.maxInclusive)).apply(instance, UniformInt::new)).comapFlatMap((uniformInt) -> uniformInt.maxInclusive < uniformInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + uniformInt.minInclusive + ", max_inclusive: " + uniformInt.maxInclusive) : DataResult.success(uniformInt), Function.identity());
+    public static final Codec<UniformInt> CODEC = RecordCodecBuilder.<UniformInt>create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((uniformInt) -> uniformInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((uniformInt) -> uniformInt.maxInclusive)).apply(instance, UniformInt::new)).comapFlatMap((uniformInt) -> uniformInt.maxInclusive < uniformInt.minInclusive ? DataResult.error("Max must be at least min, min_inclusive: " + uniformInt.minInclusive + ", max_inclusive: " + uniformInt.maxInclusive) : DataResult.success(uniformInt), Function.identity());
     private final int minInclusive;
     private final int maxInclusive;
 
diff --git a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
index 24fda11bb35954b12bacaa0f2a81bb9ee5e59296..17873029b77b8b6ba4bac7292e66d1b9cb92bcac 100644
--- a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
+++ b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
@@ -107,7 +107,7 @@ public class WorldUpgrader {
                 builder2.put(resourceKey2, new ChunkStorage(path.resolve("region"), this.dataFixer, true));
             }
 
-            ImmutableMap<ResourceKey<Level>, ChunkStorage> immutableMap2 = builder2.build();
+            ImmutableMap<ResourceKey<Level>, ChunkStorage> immutableMap2In = builder2.build();
             long l = Util.getMillis();
             this.status = new TranslatableComponent("optimizeWorld.stage.upgrading");
 
@@ -119,7 +119,7 @@ public class WorldUpgrader {
                 for(UnmodifiableIterator iOException2 = immutableSet.iterator(); iOException2.hasNext(); f2 += f3) {
                     ResourceKey<Level> resourceKey3 = (ResourceKey)iOException2.next();
                     ListIterator<ChunkPos> listIterator = (ListIterator)immutableMap.get(resourceKey3);
-                    ChunkStorage chunkStorage = (ChunkStorage)immutableMap2.get(resourceKey3);
+                    ChunkStorage chunkStorage = (ChunkStorage)immutableMap2In.get(resourceKey3);
                     if (listIterator.hasNext()) {
                         ChunkPos chunkPos = (ChunkPos)listIterator.next();
                         boolean flag2 = false;
@@ -179,7 +179,7 @@ public class WorldUpgrader {
             }
 
             this.status = new TranslatableComponent("optimizeWorld.stage.finished");
-            UnmodifiableIterator var32 = immutableMap2.values().iterator();
+            UnmodifiableIterator var32 = immutableMap2In.values().iterator();
 
             while(var32.hasNext()) {
                 ChunkStorage chunkStorage2 = (ChunkStorage)var32.next();
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 4c9e0fe01ca359b48afcd7526002da94044108a0..8f74dd27ff2ca4ad8afc999aa3df89089f985ce6 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -3264,21 +3264,5 @@ public abstract class LivingEntity extends Entity {
         this.setDeltaMovement((double)((float)clientboundAddMobPacket.getXd() / 8000.0F), (double)((float)clientboundAddMobPacket.getYd() / 8000.0F), (double)((float)clientboundAddMobPacket.getZd() / 8000.0F));
     }
 
-    public static record Fallsounds(SoundEvent a, SoundEvent b) {
-        private final SoundEvent small;
-        private final SoundEvent big;
-
-        public Fallsounds(SoundEvent soundEvent, SoundEvent soundEvent2) {
-            this.small = soundEvent;
-            this.big = soundEvent2;
-        }
-
-        public SoundEvent small() {
-            return this.small;
-        }
-
-        public SoundEvent big() {
-            return this.big;
-        }
-    }
+    public static record Fallsounds(SoundEvent small, SoundEvent big) {}
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index bee9e35d1d78478d02f5487253c50e8288a34416..251f50615868417154c3d1bffcc8774b8ae7799c 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -1058,7 +1058,7 @@ public abstract class Mob extends LivingEntity {
             if (itemStack.getItem() instanceof SpawnEggItem) {
                 if (this.level instanceof ServerLevel) {
                     SpawnEggItem spawnEggItem = (SpawnEggItem)itemStack.getItem();
-                    Optional<Mob> optional = spawnEggItem.spawnOffspringFromSpawnEgg(player, this, this.getType(), (ServerLevel)this.level, this.position(), itemStack);
+                    Optional<Mob> optional = spawnEggItem.spawnOffspringFromSpawnEgg(player, this, (EntityType) this.getType(), (ServerLevel)this.level, this.position(), itemStack);
                     optional.ifPresent((mob) -> this.onOffspringSpawnedFromEgg(player, mob));
                     return optional.isPresent() ? InteractionResult.SUCCESS : InteractionResult.PASS;
                 } else {
diff --git a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
index e3c4a1e49703c0220c3c74ac163be1011adc428f..ae472a139eed4967c9ba4d1353e5436bfb58a156 100644
--- a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
+++ b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
@@ -60,7 +60,7 @@ public class SpawnPlacements {
 
     public static <T extends Entity> boolean checkSpawnRules(EntityType<T> entityType, ServerLevelAccessor serverLevelAccessor, MobSpawnType mobSpawnType, BlockPos blockPos, Random random) {
         SpawnPlacements.Data data = (SpawnPlacements.Data)DATA_BY_TYPE.get(entityType);
-        return data == null || data.predicate.test(entityType, serverLevelAccessor, mobSpawnType, blockPos, random);
+        return data == null || data.predicate.test((EntityType) entityType, serverLevelAccessor, mobSpawnType, blockPos, random);
     }
 
     static {
diff --git a/src/main/java/net/minecraft/world/entity/ai/Brain.java b/src/main/java/net/minecraft/world/entity/ai/Brain.java
index 3fec9b953622fc6f818641245a27f946306f8445..31e8b1a8ca33e13be3f0e93c3273890c7140ca48 100644
--- a/src/main/java/net/minecraft/world/entity/ai/Brain.java
+++ b/src/main/java/net/minecraft/world/entity/ai/Brain.java
@@ -68,14 +68,14 @@ public class Brain<E extends LivingEntity> {
             }
 
             public <T> DataResult<Brain<E>> decode(DynamicOps<T> dynamicOps, MapLike<T> mapLike) {
-                MutableObject<DataResult<Builder<Brain.MemoryValue<?>>>> mutableObject = new MutableObject(DataResult.success(ImmutableList.builder()));
+                MutableObject<DataResult<Builder<Brain.MemoryValue<?>>>> mutableObjectIn = new MutableObject<>(DataResult.success(ImmutableList.builder()));
                 mapLike.entries().forEach((pair) -> {
                     DataResult<MemoryModuleType<?>> dataResult = Registry.MEMORY_MODULE_TYPE.byNameCodec().parse(dynamicOps, pair.getFirst());
                     DataResult<? extends Brain.MemoryValue<?>> dataResult2 = dataResult.flatMap((memoryModuleType) -> this.captureRead(memoryModuleType, dynamicOps, (T)pair.getSecond()));
-                    mutableObject.setValue((mutableObject.getValue()).apply2(Builder::add, dataResult2));
+                    mutableObjectIn.setValue((mutableObjectIn.getValue()).apply2(Builder::add, dataResult2));
                 });
-                ImmutableList<Brain.MemoryValue<?>> immutableList = (ImmutableList)(mutableObject.getValue()).resultOrPartial(Brain.LOGGER::error).map(Builder::build).orElseGet(ImmutableList::of);
-                return DataResult.success(new Brain(collection, collection2, immutableList, mutableObject::getValue));
+                ImmutableList<Brain.MemoryValue<?>> immutableList = mutableObjectIn.getValue().resultOrPartial(Brain.LOGGER::error).map(Builder::build).orElseGet(ImmutableList::of);
+                return DataResult.success(new Brain<>(collection, collection2, immutableList, mutableObject::getValue));
             }
 
             private <T, U> DataResult<Brain.MemoryValue<U>> captureRead(MemoryModuleType<U> memoryModuleType, DynamicOps<T> dynamicOps, T object) {
@@ -156,7 +156,7 @@ public class Brain<E extends LivingEntity> {
     }
 
     public <U> Optional<U> getMemory(MemoryModuleType<U> memoryModuleType) {
-        return (this.memories.get(memoryModuleType)).map(ExpirableValue::getValue);
+        return (Optional<U>) (this.memories.get(memoryModuleType)).map(ExpirableValue::getValue);
     }
 
     public <U> long getTimeUntilExpiry(MemoryModuleType<U> memoryModuleType) {
@@ -320,7 +320,7 @@ public class Brain<E extends LivingEntity> {
         UnmodifiableIterator var5 = immutableList.iterator();
 
         while(var5.hasNext()) {
-            Pair<Integer, ? extends Behavior<? super E>> pair = var5.next();
+            Pair<Integer, ? extends Behavior<? super E>> pair = (Pair) var5.next();
             ((this.availableBehaviorsByPriority.computeIfAbsent((Integer)pair.getFirst(), (integer) -> Maps.newHashMap())).computeIfAbsent(activity, (activityx) -> Sets.newLinkedHashSet())).add((Behavior)pair.getSecond());
         }
 
@@ -428,7 +428,7 @@ public class Brain<E extends LivingEntity> {
     }
 
     private boolean isEmptyCollection(Object object) {
-        return object instanceof Collection && (object).isEmpty();
+        return object instanceof Collection && ((Collection) object).isEmpty();
     }
 
     ImmutableList<? extends Pair<Integer, ? extends Behavior<? super E>>> createPriorityPairs(int i, ImmutableList<? extends Behavior<? super E>> immutableList) {
@@ -449,7 +449,7 @@ public class Brain<E extends LivingEntity> {
         private final Optional<? extends ExpirableValue<U>> value;
 
         static <U> Brain.MemoryValue<U> createUnchecked(MemoryModuleType<U> memoryModuleType, Optional<? extends ExpirableValue<?>> optional) {
-            return new Brain.MemoryValue<>(memoryModuleType, optional);
+            return new Brain.MemoryValue(memoryModuleType, optional);
         }
 
         MemoryValue(MemoryModuleType<U> memoryModuleType, Optional<? extends ExpirableValue<U>> optional) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
index 3522548e22751b3841e638a1b86d7e54c191e278..e75a120dfdddae4349f4d5c04c907726a63dd875 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
@@ -74,7 +74,7 @@ import org.slf4j.Logger;
 
 public class DefaultAttributes {
     private static final Logger LOGGER = LogUtils.getLogger();
-    private static final Map<EntityType<? extends LivingEntity>, AttributeSupplier> SUPPLIERS = ImmutableMap.builder().put(EntityType.ARMOR_STAND, LivingEntity.createLivingAttributes().build()).put(EntityType.AXOLOTL, Axolotl.createAttributes().build()).put(EntityType.BAT, Bat.createAttributes().build()).put(EntityType.BEE, Bee.createAttributes().build()).put(EntityType.BLAZE, Blaze.createAttributes().build()).put(EntityType.CAT, Cat.createAttributes().build()).put(EntityType.CAVE_SPIDER, CaveSpider.createCaveSpider().build()).put(EntityType.CHICKEN, Chicken.createAttributes().build()).put(EntityType.COD, AbstractFish.createAttributes().build()).put(EntityType.COW, Cow.createAttributes().build()).put(EntityType.CREEPER, Creeper.createAttributes().build()).put(EntityType.DOLPHIN, Dolphin.createAttributes().build()).put(EntityType.DONKEY, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.DROWNED, Zombie.createAttributes().build()).put(EntityType.ELDER_GUARDIAN, ElderGuardian.createAttributes().build()).put(EntityType.ENDERMAN, EnderMan.createAttributes().build()).put(EntityType.ENDERMITE, Endermite.createAttributes().build()).put(EntityType.ENDER_DRAGON, EnderDragon.createAttributes().build()).put(EntityType.EVOKER, Evoker.createAttributes().build()).put(EntityType.FOX, Fox.createAttributes().build()).put(EntityType.GHAST, Ghast.createAttributes().build()).put(EntityType.GIANT, Giant.createAttributes().build()).put(EntityType.GLOW_SQUID, GlowSquid.createAttributes().build()).put(EntityType.GOAT, Goat.createAttributes().build()).put(EntityType.GUARDIAN, Guardian.createAttributes().build()).put(EntityType.HOGLIN, Hoglin.createAttributes().build()).put(EntityType.HORSE, AbstractHorse.createBaseHorseAttributes().build()).put(EntityType.HUSK, Zombie.createAttributes().build()).put(EntityType.ILLUSIONER, Illusioner.createAttributes().build()).put(EntityType.IRON_GOLEM, IronGolem.createAttributes().build()).put(EntityType.LLAMA, Llama.createAttributes().build()).put(EntityType.MAGMA_CUBE, MagmaCube.createAttributes().build()).put(EntityType.MOOSHROOM, Cow.createAttributes().build()).put(EntityType.MULE, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.OCELOT, Ocelot.createAttributes().build()).put(EntityType.PANDA, Panda.createAttributes().build()).put(EntityType.PARROT, Parrot.createAttributes().build()).put(EntityType.PHANTOM, Monster.createMonsterAttributes().build()).put(EntityType.PIG, Pig.createAttributes().build()).put(EntityType.PIGLIN, Piglin.createAttributes().build()).put(EntityType.PIGLIN_BRUTE, PiglinBrute.createAttributes().build()).put(EntityType.PILLAGER, Pillager.createAttributes().build()).put(EntityType.PLAYER, Player.createAttributes().build()).put(EntityType.POLAR_BEAR, PolarBear.createAttributes().build()).put(EntityType.PUFFERFISH, AbstractFish.createAttributes().build()).put(EntityType.RABBIT, Rabbit.createAttributes().build()).put(EntityType.RAVAGER, Ravager.createAttributes().build()).put(EntityType.SALMON, AbstractFish.createAttributes().build()).put(EntityType.SHEEP, Sheep.createAttributes().build()).put(EntityType.SHULKER, Shulker.createAttributes().build()).put(EntityType.SILVERFISH, Silverfish.createAttributes().build()).put(EntityType.SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.SKELETON_HORSE, SkeletonHorse.createAttributes().build()).put(EntityType.SLIME, Monster.createMonsterAttributes().build()).put(EntityType.SNOW_GOLEM, SnowGolem.createAttributes().build()).put(EntityType.SPIDER, Spider.createAttributes().build()).put(EntityType.SQUID, Squid.createAttributes().build()).put(EntityType.STRAY, AbstractSkeleton.createAttributes().build()).put(EntityType.STRIDER, Strider.createAttributes().build()).put(EntityType.TRADER_LLAMA, Llama.createAttributes().build()).put(EntityType.TROPICAL_FISH, AbstractFish.createAttributes().build()).put(EntityType.TURTLE, Turtle.createAttributes().build()).put(EntityType.VEX, Vex.createAttributes().build()).put(EntityType.VILLAGER, Villager.createAttributes().build()).put(EntityType.VINDICATOR, Vindicator.createAttributes().build()).put(EntityType.WANDERING_TRADER, Mob.createMobAttributes().build()).put(EntityType.WITCH, Witch.createAttributes().build()).put(EntityType.WITHER, WitherBoss.createAttributes().build()).put(EntityType.WITHER_SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.WOLF, Wolf.createAttributes().build()).put(EntityType.ZOGLIN, Zoglin.createAttributes().build()).put(EntityType.ZOMBIE, Zombie.createAttributes().build()).put(EntityType.ZOMBIE_HORSE, ZombieHorse.createAttributes().build()).put(EntityType.ZOMBIE_VILLAGER, Zombie.createAttributes().build()).put(EntityType.ZOMBIFIED_PIGLIN, ZombifiedPiglin.createAttributes().build()).build();
+    private static final Map<EntityType<? extends LivingEntity>, AttributeSupplier> SUPPLIERS = ImmutableMap.<EntityType<? extends LivingEntity>, AttributeSupplier>builder().put(EntityType.ARMOR_STAND, LivingEntity.createLivingAttributes().build()).put(EntityType.AXOLOTL, Axolotl.createAttributes().build()).put(EntityType.BAT, Bat.createAttributes().build()).put(EntityType.BEE, Bee.createAttributes().build()).put(EntityType.BLAZE, Blaze.createAttributes().build()).put(EntityType.CAT, Cat.createAttributes().build()).put(EntityType.CAVE_SPIDER, CaveSpider.createCaveSpider().build()).put(EntityType.CHICKEN, Chicken.createAttributes().build()).put(EntityType.COD, AbstractFish.createAttributes().build()).put(EntityType.COW, Cow.createAttributes().build()).put(EntityType.CREEPER, Creeper.createAttributes().build()).put(EntityType.DOLPHIN, Dolphin.createAttributes().build()).put(EntityType.DONKEY, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.DROWNED, Zombie.createAttributes().build()).put(EntityType.ELDER_GUARDIAN, ElderGuardian.createAttributes().build()).put(EntityType.ENDERMAN, EnderMan.createAttributes().build()).put(EntityType.ENDERMITE, Endermite.createAttributes().build()).put(EntityType.ENDER_DRAGON, EnderDragon.createAttributes().build()).put(EntityType.EVOKER, Evoker.createAttributes().build()).put(EntityType.FOX, Fox.createAttributes().build()).put(EntityType.GHAST, Ghast.createAttributes().build()).put(EntityType.GIANT, Giant.createAttributes().build()).put(EntityType.GLOW_SQUID, GlowSquid.createAttributes().build()).put(EntityType.GOAT, Goat.createAttributes().build()).put(EntityType.GUARDIAN, Guardian.createAttributes().build()).put(EntityType.HOGLIN, Hoglin.createAttributes().build()).put(EntityType.HORSE, AbstractHorse.createBaseHorseAttributes().build()).put(EntityType.HUSK, Zombie.createAttributes().build()).put(EntityType.ILLUSIONER, Illusioner.createAttributes().build()).put(EntityType.IRON_GOLEM, IronGolem.createAttributes().build()).put(EntityType.LLAMA, Llama.createAttributes().build()).put(EntityType.MAGMA_CUBE, MagmaCube.createAttributes().build()).put(EntityType.MOOSHROOM, Cow.createAttributes().build()).put(EntityType.MULE, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.OCELOT, Ocelot.createAttributes().build()).put(EntityType.PANDA, Panda.createAttributes().build()).put(EntityType.PARROT, Parrot.createAttributes().build()).put(EntityType.PHANTOM, Monster.createMonsterAttributes().build()).put(EntityType.PIG, Pig.createAttributes().build()).put(EntityType.PIGLIN, Piglin.createAttributes().build()).put(EntityType.PIGLIN_BRUTE, PiglinBrute.createAttributes().build()).put(EntityType.PILLAGER, Pillager.createAttributes().build()).put(EntityType.PLAYER, Player.createAttributes().build()).put(EntityType.POLAR_BEAR, PolarBear.createAttributes().build()).put(EntityType.PUFFERFISH, AbstractFish.createAttributes().build()).put(EntityType.RABBIT, Rabbit.createAttributes().build()).put(EntityType.RAVAGER, Ravager.createAttributes().build()).put(EntityType.SALMON, AbstractFish.createAttributes().build()).put(EntityType.SHEEP, Sheep.createAttributes().build()).put(EntityType.SHULKER, Shulker.createAttributes().build()).put(EntityType.SILVERFISH, Silverfish.createAttributes().build()).put(EntityType.SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.SKELETON_HORSE, SkeletonHorse.createAttributes().build()).put(EntityType.SLIME, Monster.createMonsterAttributes().build()).put(EntityType.SNOW_GOLEM, SnowGolem.createAttributes().build()).put(EntityType.SPIDER, Spider.createAttributes().build()).put(EntityType.SQUID, Squid.createAttributes().build()).put(EntityType.STRAY, AbstractSkeleton.createAttributes().build()).put(EntityType.STRIDER, Strider.createAttributes().build()).put(EntityType.TRADER_LLAMA, Llama.createAttributes().build()).put(EntityType.TROPICAL_FISH, AbstractFish.createAttributes().build()).put(EntityType.TURTLE, Turtle.createAttributes().build()).put(EntityType.VEX, Vex.createAttributes().build()).put(EntityType.VILLAGER, Villager.createAttributes().build()).put(EntityType.VINDICATOR, Vindicator.createAttributes().build()).put(EntityType.WANDERING_TRADER, Mob.createMobAttributes().build()).put(EntityType.WITCH, Witch.createAttributes().build()).put(EntityType.WITHER, WitherBoss.createAttributes().build()).put(EntityType.WITHER_SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.WOLF, Wolf.createAttributes().build()).put(EntityType.ZOGLIN, Zoglin.createAttributes().build()).put(EntityType.ZOMBIE, Zombie.createAttributes().build()).put(EntityType.ZOMBIE_HORSE, ZombieHorse.createAttributes().build()).put(EntityType.ZOMBIE_VILLAGER, Zombie.createAttributes().build()).put(EntityType.ZOMBIFIED_PIGLIN, ZombifiedPiglin.createAttributes().build()).build();
 
     public static AttributeSupplier getSupplier(EntityType<? extends LivingEntity> entityType) {
         return (AttributeSupplier)SUPPLIERS.get(entityType);
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java b/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
index a7809ce5b9155264b9b9e907ef75470683b99319..aa34389bfcd09ece11cbaeae8cd6cceeca8f267c 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
@@ -139,15 +139,11 @@ public class BehaviorUtils {
     public static Optional<LivingEntity> getLivingEntityFromUUIDMemory(LivingEntity livingEntity, MemoryModuleType<UUID> memoryModuleType) {
         Optional<UUID> optional = livingEntity.getBrain().getMemory(memoryModuleType);
         return optional.map((uuid) -> ((ServerLevel)livingEntity.level).getEntity(uuid)).map((entity) -> {
-            LivingEntity var10000;
             if (entity instanceof LivingEntity) {
-                LivingEntity livingEntity = (LivingEntity)entity;
-                var10000 = livingEntity;
+                return (LivingEntity) entity;
             } else {
-                var10000 = null;
+                return null;
             }
-
-            return var10000;
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java b/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java
index c9ecbb36d36f7290706e37947c4efe5a7614c847..7bfcec6e1a71a8fe25392736081cb486ce580377 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java
@@ -32,8 +32,8 @@ public class EntityTracker implements PositionTracker {
             if (!livingEntity2.isAlive()) {
                 return false;
             } else {
-                Optional<NearestVisibleLivingEntities> optional = livingEntity.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
-                return optional.isPresent() && ((NearestVisibleLivingEntities)optional.get()).contains(livingEntity2);
+                Optional<NearestVisibleLivingEntities> optionalIn = livingEntity.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
+                return optionalIn.isPresent() && ((NearestVisibleLivingEntities)optionalIn.get()).contains(livingEntity2);
             }
         } else {
             return true;
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
index 8642044cacb367f3068241344c62a151938ab8c0..b41d1963ff3e6a7d3efe69c67ff37ac7656e6ec4 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
@@ -50,7 +50,7 @@ public class InteractWith<E extends LivingEntity, T extends LivingEntity> extend
     }
 
     private boolean isTargetValid(LivingEntity livingEntity) {
-        return this.type.equals(livingEntity.getType()) && this.targetFilter.test(livingEntity);
+        return this.type.equals(livingEntity.getType()) && this.targetFilter.test((T) livingEntity);
     }
 
     protected void start(ServerLevel serverLevel, E livingEntity, long l) {
@@ -67,6 +67,6 @@ public class InteractWith<E extends LivingEntity, T extends LivingEntity> extend
     }
 
     private boolean canInteract(E livingEntity, LivingEntity livingEntity2) {
-        return this.type.equals(livingEntity2.getType()) && livingEntity2.distanceToSqr(livingEntity) <= (double)this.interactionRangeSqr && this.targetFilter.test(livingEntity2);
+        return this.type.equals(livingEntity2.getType()) && livingEntity2.distanceToSqr(livingEntity) <= (double)this.interactionRangeSqr && this.targetFilter.test((T) livingEntity2);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java b/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
index b28687daf30f72a039cba0b9edc4d3037bcabd0b..323178b8626b6333a597c3b50c75ac484f6611cc 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
@@ -50,13 +50,13 @@ public class SetClosestHomeAsWalkTarget extends Behavior<LivingEntity> {
         PathfinderMob pathfinderMob = (PathfinderMob)livingEntity;
         PoiManager poiManager = serverLevel.getPoiManager();
         Predicate<BlockPos> predicate = (blockPosx) -> {
-            long l = blockPosx.asLong();
-            if (this.batchCache.containsKey(l)) {
+            long pos = blockPosx.asLong();
+            if (this.batchCache.containsKey(pos)) {
                 return false;
             } else if (++this.triedCount >= 5) {
                 return false;
             } else {
-                this.batchCache.put(l, this.lastUpdate + 40L);
+                this.batchCache.put(pos, this.lastUpdate + 40L);
                 return true;
             }
         };
diff --git a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
index b8e93cd18c1306dba8744a984789365c7474b94c..d995a2a55e0322556464ba0e8fc5daf04988bd74 100644
--- a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
+++ b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
@@ -90,9 +90,9 @@ public class GossipContainer {
     public void transferFrom(GossipContainer gossipContainer, Random random, int i) {
         Collection<GossipContainer.GossipEntry> collection = gossipContainer.selectGossipsForTransfer(random, i);
         collection.forEach((gossipEntry) -> {
-            int i = gossipEntry.value - gossipEntry.type.decayPerTransfer;
-            if (i >= 2) {
-                this.getOrCreate(gossipEntry.target).entries.mergeInt(gossipEntry.type, i, GossipContainer::mergeValuesForTransfer);
+            int iIn = gossipEntry.value - gossipEntry.type.decayPerTransfer;
+            if (iIn >= 2) {
+                this.getOrCreate(gossipEntry.target).entries.mergeInt(gossipEntry.type, iIn, GossipContainer::mergeValuesForTransfer);
             }
 
         });
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
index 3d9d3ff8dae4e73450df432844c3a2d8ed2748f2..e2c5665188966a2975004fd5a23d73c4bf3100de 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
@@ -6,7 +6,7 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 
 public class VillagerHostilesSensor extends NearestVisibleLivingEntitySensor {
-    private static final ImmutableMap<EntityType<?>, Float> ACCEPTABLE_DISTANCE_FROM_HOSTILES = ImmutableMap.builder().put(EntityType.DROWNED, 8.0F).put(EntityType.EVOKER, 12.0F).put(EntityType.HUSK, 8.0F).put(EntityType.ILLUSIONER, 12.0F).put(EntityType.PILLAGER, 15.0F).put(EntityType.RAVAGER, 12.0F).put(EntityType.VEX, 8.0F).put(EntityType.VINDICATOR, 10.0F).put(EntityType.ZOGLIN, 10.0F).put(EntityType.ZOMBIE, 8.0F).put(EntityType.ZOMBIE_VILLAGER, 8.0F).build();
+    private static final ImmutableMap<EntityType<?>, Float> ACCEPTABLE_DISTANCE_FROM_HOSTILES = ImmutableMap.<EntityType<?>, Float>builder().put(EntityType.DROWNED, 8.0F).put(EntityType.EVOKER, 12.0F).put(EntityType.HUSK, 8.0F).put(EntityType.ILLUSIONER, 12.0F).put(EntityType.PILLAGER, 15.0F).put(EntityType.RAVAGER, 12.0F).put(EntityType.VEX, 8.0F).put(EntityType.VINDICATOR, 10.0F).put(EntityType.ZOGLIN, 10.0F).put(EntityType.ZOMBIE, 8.0F).put(EntityType.ZOMBIE_VILLAGER, 8.0F).build();
 
     protected boolean isMatchingEntity(LivingEntity livingEntity, LivingEntity livingEntity2) {
         return this.isHostile(livingEntity2) && this.isClose(livingEntity, livingEntity2);
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
index d74deef5439320e415369777da4741f279bc15d8..b822d24d25e6b33488e4acb8fc4bf4c7ddc0484a 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -30,7 +30,7 @@ public class PoiSection {
     private boolean isValid;
 
     public static Codec<PoiSection> codec(Runnable runnable) {
-        return RecordCodecBuilder.create((instance) -> instance.group(RecordCodecBuilder.point(runnable), Codec.BOOL.optionalFieldOf("Valid", false).forGetter((poiSection) -> poiSection.isValid), PoiRecord.codec(runnable).listOf().fieldOf("Records").forGetter((poiSection) -> ImmutableList.copyOf(poiSection.records.values()))).apply(instance, PoiSection::new)).orElseGet(Util.prefix("Failed to read POI section: ", LOGGER::error), () -> new PoiSection(runnable, false, ImmutableList.of()));
+        return RecordCodecBuilder.<PoiSection>create((instance) -> instance.group(RecordCodecBuilder.point(runnable), Codec.BOOL.optionalFieldOf("Valid", false).forGetter((poiSection) -> poiSection.isValid), PoiRecord.codec(runnable).listOf().fieldOf("Records").forGetter((poiSection) -> ImmutableList.copyOf(poiSection.records.values()))).apply(instance, PoiSection::new)).orElseGet(Util.prefix("Failed to read POI section: ", LOGGER::error), () -> new PoiSection(runnable, false, ImmutableList.of()));
     }
 
     public PoiSection(Runnable runnable) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
index 4f2768f40bff55acc05068a2a8c4243516f4b8f0..3dd2b31e3f31b01d58260169144b02fdb463373e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
@@ -85,7 +85,7 @@ public abstract class AbstractFish extends WaterAnimal implements Bucketable {
     protected void registerGoals() {
         super.registerGoals();
         this.goalSelector.addGoal(0, new PanicGoal(this, 1.25D));
-        this.goalSelector.addGoal(2, new AvoidEntityGoal(this, Player.class, 8.0F, 1.6D, 1.4D, EntitySelector.NO_SPECTATORS::test));
+        this.goalSelector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0F, 1.6D, 1.4D, EntitySelector.NO_SPECTATORS::test));
         this.goalSelector.addGoal(4, new AbstractFish.FishSwimGoal(this));
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index 928adf9518da93e8905e395c1dd5b60bb324a66f..257d2fbfcf0482ea4923b8cf2228d1017fc41de3 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -148,9 +148,9 @@ public class Fox extends Animal {
         this.goalSelector.addGoal(1, new Fox.FaceplantGoal());
         this.goalSelector.addGoal(2, new Fox.FoxPanicGoal(2.2D));
         this.goalSelector.addGoal(3, new Fox.FoxBreedGoal(1.0D));
-        this.goalSelector.addGoal(4, new AvoidEntityGoal(this, Player.class, 16.0F, 1.6D, 1.4D, (livingEntity) -> AVOID_PLAYERS.test(livingEntity) && !this.trusts(livingEntity.getUUID()) && !this.isDefending()));
-        this.goalSelector.addGoal(4, new AvoidEntityGoal(this, Wolf.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !((Wolf)livingEntity).isTame() && !this.isDefending()));
-        this.goalSelector.addGoal(4, new AvoidEntityGoal(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !this.isDefending()));
+        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Player.class, 16.0F, 1.6D, 1.4D, (livingEntity) -> AVOID_PLAYERS.test(livingEntity) && !this.trusts(livingEntity.getUUID()) && !this.isDefending()));
+        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Wolf.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !((Wolf)livingEntity).isTame() && !this.isDefending()));
+        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !this.isDefending()));
         this.goalSelector.addGoal(5, new Fox.StalkPreyGoal());
         this.goalSelector.addGoal(6, new Fox.FoxPounceGoal());
         this.goalSelector.addGoal(6, new Fox.SeekShelterGoal(1.25D));
diff --git a/src/main/java/net/minecraft/world/entity/animal/Sheep.java b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
index ca067e3e4bc146d0326ba14b686cd680635ec7a8..808878b013cfbae80d124b670046e734ffca77d6 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Sheep.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
@@ -81,7 +81,7 @@ public class Sheep extends Animal implements Shearable {
         enumMap.put(DyeColor.RED, Blocks.RED_WOOL);
         enumMap.put(DyeColor.BLACK, Blocks.BLACK_WOOL);
     });
-    private static final Map<DyeColor, float[]> COLORARRAY_BY_COLOR = Maps.newEnumMap(Arrays.stream(DyeColor.values()).collect(Collectors.toMap((dyeColor) -> dyeColor, Sheep::createSheepColor)));
+    private static final Map<DyeColor, float[]> COLORARRAY_BY_COLOR = Maps.<DyeColor, float[]>newEnumMap(Arrays.stream(DyeColor.values()).collect(Collectors.toMap((dyeColor) -> dyeColor, Sheep::createSheepColor)));
     private int eatAnimationTick;
     private EatBlockGoal eatBlockGoal;
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index a033a3bbb2ceabc0a5dd09af48fcb9cfca8ef207..58c9a639f1be1d0de13fa5ffab5b8019569720a1 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -70,7 +70,7 @@ public class Axolotl extends Animal implements LerpingModel, Bucketable {
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final int TOTAL_PLAYDEAD_TIME = 200;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Axolotl>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.AXOLOTL_ATTACKABLES, SensorType.AXOLOTL_TEMPTATIONS);
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN});
+    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN});
     private static final EntityDataAccessor<Integer> DATA_VARIANT = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_PLAYING_DEAD = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> FROM_BUCKET = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
@@ -419,7 +419,7 @@ public class Axolotl extends Animal implements LerpingModel, Bucketable {
     }
 
     public Brain<Axolotl> getBrain() {
-        return super.getBrain();
+        return (Brain<Axolotl>) super.getBrain();
     }
 
     protected void sendDebugPackets() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index d9f05023fb751284bb78210d0a861c02d5200e36..749734943024ccbf5a4cb4adebd214e99c335a3c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -120,7 +120,7 @@ public class Goat extends Animal {
     }
 
     public Brain<Goat> getBrain() {
-        return super.getBrain();
+        return (Brain<Goat>) super.getBrain();
     }
 
     protected void customServerAiStep() {
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 72720f5507f7a825453168f9919ef93879c52164..86914d46ef4ded48a77282b32143c45788e4b267 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -482,11 +482,11 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
     }
 
     public int getAlternativeTarget(int i) {
-        return this.entityData.get((EntityDataAccessor)DATA_TARGETS.get(i));
+        return this.entityData.get(DATA_TARGETS.get(i));
     }
 
     public void setAlternativeTarget(int i, int i2) {
-        this.entityData.set((EntityDataAccessor)DATA_TARGETS.get(i), i2);
+        this.entityData.set(DATA_TARGETS.get(i), i2);
     }
 
     public boolean isPowered() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index 41b9500201466fb7040a0c477bc82fe3dbe219f5..06f662d9bb8b9927eef3e821f5e3df0baa21c947 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -218,7 +218,7 @@ public class Phantom extends FlyingMob implements Enemy {
                 this.nextScanTick = reducedTickDelay(60);
                 List<Player> list = Phantom.this.level.getNearbyPlayers(this.attackTargeting, Phantom.this, Phantom.this.getBoundingBox().inflate(16.0D, 64.0D, 16.0D));
                 if (!list.isEmpty()) {
-                    list.sort(Comparator.comparing(Entity::getY).reversed());
+                    list.sort(Comparator.<Entity, Double>comparing(Entity::getY).reversed());
 
                     for(Player player : list) {
                         if (Phantom.this.canAttack(player, TargetingConditions.DEFAULT)) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index 654f9baa3d6403b8ecc30c69d263de1030b2012f..cf36522eeaab9ca7712bef0000838165d9644257 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -169,7 +169,7 @@ public class Slime extends Mob implements Enemy {
     }
 
     public EntityType<? extends Slime> getType() {
-        return super.getType();
+        return (EntityType<? extends Slime>) super.getType();
     }
 
     public void remove(Entity.RemovalReason removalReason) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
index 37f628bb5fed5f4afa8f9e415a86bd2a90380194..5d6671325f009d2abccae4e5647e89b946fbe7e3 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
@@ -173,7 +173,7 @@ public class Zoglin extends Monster implements Enemy, HoglinBase {
     }
 
     public Brain<Zoglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Zoglin>) super.getBrain();
     }
 
     protected void updateActivity() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index 70b381778fffe83dd126f6df4d32cb354a10e279..822469fe3abc434d85bc4aa83000387176d537ec 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -60,7 +60,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
     private int timeInOverworld;
     private boolean cannotBeHunted;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Hoglin>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ADULT, SensorType.HOGLIN_SPECIFIC_SENSOR);
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED});
+    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED});
 
     public Hoglin(EntityType<? extends Hoglin> entityType, Level level) {
         super(entityType, level);
@@ -116,7 +116,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
     }
 
     public Brain<Hoglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Hoglin>) super.getBrain();
     }
 
     protected void customServerAiStep() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index 23f1fced7ea7c2094b3a25905a2f0fba7d967c26..22de08794bd877174cf18b13b844ada0f24f4355 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -191,7 +191,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
     }
 
     public Brain<Piglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Piglin>) super.getBrain();
     }
 
     public InteractionResult mobInteract(Player player, InteractionHand interactionHand) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
index 96d9d46a35dfd42d09c6b512ece03fac2a351ad9..4c7b6d33114d6e1162195661ce51710a2c11b0d8 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
@@ -144,7 +144,7 @@ public class PiglinAi {
     }
 
     private static void initAdmireItemActivity(Brain<Piglin> brain) {
-        brain.addActivityAndRemoveMemoryWhenStopped(Activity.ADMIRE_ITEM, 10, ImmutableList.of(new GoToWantedItem<>(PiglinAi::isNotHoldingLovedItemInOffHand, 1.0F, true, 9), new StopAdmiringIfItemTooFarAway(9), new StopAdmiringIfTiredOfTryingToReachItem<>(200, 200)), MemoryModuleType.ADMIRING_ITEM);
+        brain.addActivityAndRemoveMemoryWhenStopped(Activity.ADMIRE_ITEM, 10, ImmutableList.<net.minecraft.world.entity.ai.behavior.Behavior<Piglin>>of(new GoToWantedItem<>(PiglinAi::isNotHoldingLovedItemInOffHand, 1.0F, true, 9), new StopAdmiringIfItemTooFarAway(9), new StopAdmiringIfTiredOfTryingToReachItem<>(200, 200)), MemoryModuleType.ADMIRING_ITEM);
     }
 
     private static void initRetreatActivity(Brain<Piglin> brain) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
index d3b6b56fee09304ff6b69cf85adb489c6708b782..671f56e22b7d2c77e95b147b7d8eb135add23623 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
@@ -64,7 +64,7 @@ public class PiglinBrute extends AbstractPiglin {
     }
 
     public Brain<PiglinBrute> getBrain() {
-        return super.getBrain();
+        return (Brain<PiglinBrute>) super.getBrain();
     }
 
     public boolean canHunt() {
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 9e9c3cc9dbe5036d30d7e111c6d44a2decf477e7..82de352c8c96722b7e369020117046f8e332ffda 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -135,7 +135,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
 
     public Brain<Villager> getBrain() {
-        return super.getBrain();
+        return (Brain<Villager>) super.getBrain();
     }
 
     protected Brain.Provider<Villager> brainProvider() {
@@ -556,12 +556,12 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
 
     private void tellWitnessesThatIWasMurdered(Entity entity) {
-        Level optional = this.level;
-        if (optional instanceof ServerLevel) {
-            ServerLevel serverLevel = (ServerLevel)optional;
-            Optional<NearestVisibleLivingEntities> optional = this.brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
-            if (!optional.isEmpty()) {
-                ((NearestVisibleLivingEntities)optional.get()).findAll(ReputationEventHandler.class::isInstance).forEach((livingEntity) -> serverLevel.onReputationEvent(ReputationEventType.VILLAGER_KILLED, entity, (ReputationEventHandler)livingEntity));
+        Level level = this.level;
+        if (level instanceof ServerLevel) {
+            ServerLevel serverLevel = (ServerLevel)level;
+            Optional<NearestVisibleLivingEntities> optionalIn = this.brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
+            if (!optionalIn.isEmpty()) {
+                ((NearestVisibleLivingEntities)optionalIn.get()).findAll(ReputationEventHandler.class::isInstance).forEach((livingEntity) -> serverLevel.onReputationEvent(ReputationEventType.VILLAGER_KILLED, entity, (ReputationEventHandler)livingEntity));
             }
         }
     }
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
index 2aad3cde4d5d9f34e377adfe1bf28b522f988828..3cfc204e44b269d69a7ee2d0edbcff96e40e93a6 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
@@ -62,10 +62,10 @@ public class VillagerTrades {
     private static final float HIGH_TIER_PRICE_MULTIPLIER = 0.2F;
     public static final Map<VillagerProfession, Int2ObjectMap<VillagerTrades.ItemListing[]>> TRADES = Util.make(Maps.newHashMap(), (hashMap) -> {
         hashMap.put(VillagerProfession.FARMER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHEAT, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.POTATO, 26, 16, 2), new VillagerTrades.EmeraldForItems(Items.CARROT, 22, 16, 2), new VillagerTrades.EmeraldForItems(Items.BEETROOT, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.BREAD, 1, 6, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.PUMPKIN, 6, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN_PIE, 1, 4, 5), new VillagerTrades.ItemsForEmeralds(Items.APPLE, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.COOKIE, 3, 18, 10), new VillagerTrades.EmeraldForItems(Blocks.MELON, 4, 12, 20)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Blocks.CAKE, 1, 1, 12, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.NIGHT_VISION, 100, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.JUMP, 160, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.WEAKNESS, 140, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.BLINDNESS, 120, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.POISON, 280, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.SATURATION, 7, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GOLDEN_CARROT, 3, 3, 30), new VillagerTrades.ItemsForEmeralds(Items.GLISTERING_MELON_SLICE, 4, 3, 30)})));
-        hashMap.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, ImmutableMap.builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
+        hashMap.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, ImmutableMap.<VillagerType, Item>builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
         hashMap.put(VillagerProfession.SHEPHERD, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.WHITE_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BROWN_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BLACK_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.GRAY_WOOL, 18, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.SHEARS, 2, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHITE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.GRAY_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.BLACK_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIGHT_BLUE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIME_DYE, 12, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_CARPET, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.YELLOW_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.LIGHT_GRAY_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.ORANGE_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.RED_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.PINK_DYE, 12, 16, 20), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.RED_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_BED, 3, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BROWN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.PURPLE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.BLUE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.GREEN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.MAGENTA_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.CYAN_DYE, 12, 16, 30), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 12, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.PAINTING, 2, 3, 30)})));
         hashMap.put(VillagerProfession.FLETCHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STICK, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.ARROW, 1, 16, 1), new VillagerTrades.ItemsAndEmeraldsToItems(Blocks.GRAVEL, 10, Items.FLINT, 10, 12, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FLINT, 26, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.BOW, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 14, 16, 20), new VillagerTrades.ItemsForEmeralds(Items.CROSSBOW, 3, 1, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FEATHER, 24, 16, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.BOW, 2, 3, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TRIPWIRE_HOOK, 8, 12, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.CROSSBOW, 3, 3, 15), new VillagerTrades.TippedArrowForItemsAndEmeralds(Items.ARROW, 5, Items.TIPPED_ARROW, 5, 2, 12, 30)})));
-        hashMap.put(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
+        hashMap.put(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.<Integer, ItemListing[]>builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
         hashMap.put(VillagerProfession.CARTOGRAPHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.MAP, 7, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GLASS_PANE, 11, 16, 10), new VillagerTrades.TreasureMapForEmeralds(13, ConfiguredStructureTags.ON_OCEAN_EXPLORER_MAPS, "filled_map.monument", MapDecoration.Type.MONUMENT, 12, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COMPASS, 1, 12, 20), new VillagerTrades.TreasureMapForEmeralds(14, ConfiguredStructureTags.ON_WOODLAND_EXPLORER_MAPS, "filled_map.mansion", MapDecoration.Type.MANSION, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.ITEM_FRAME, 7, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GLOBE_BANNER_PATTERN, 8, 1, 30)})));
         hashMap.put(VillagerProfession.CLERIC, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.ROTTEN_FLESH, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.REDSTONE, 1, 2, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GOLD_INGOT, 3, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.LAPIS_LAZULI, 1, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.RABBIT_FOOT, 2, 12, 20), new VillagerTrades.ItemsForEmeralds(Blocks.GLOWSTONE, 4, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SCUTE, 4, 12, 30), new VillagerTrades.EmeraldForItems(Items.GLASS_BOTTLE, 9, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.ENDER_PEARL, 5, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.NETHER_WART, 22, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.EXPERIENCE_BOTTLE, 3, 1, 30)})));
         hashMap.put(VillagerProfession.ARMORER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_LEGGINGS), 7, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_BOOTS), 4, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_HELMET), 5, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_CHESTPLATE), 9, 1, 12, 1, 0.2F)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_BOOTS), 1, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_LEGGINGS), 3, 1, 12, 5, 0.2F)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.LAVA_BUCKET, 1, 12, 20), new VillagerTrades.EmeraldForItems(Items.DIAMOND, 1, 12, 20), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_HELMET), 1, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_CHESTPLATE), 4, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.SHIELD), 5, 1, 12, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_LEGGINGS, 14, 3, 15, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_BOOTS, 8, 3, 15, 0.2F)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_HELMET, 8, 3, 30, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_CHESTPLATE, 16, 3, 30, 0.2F)})));
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 5c9117efcc017ec29075c679fdc5c703266f2f1b..56486bd8ad083292058ae1eb68d28cee0ce9280a 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -123,7 +123,7 @@ public abstract class Player extends LivingEntity {
     public static final float SWIMMING_BB_HEIGHT = 0.6F;
     public static final float DEFAULT_EYE_HEIGHT = 1.62F;
     public static final EntityDimensions STANDING_DIMENSIONS = EntityDimensions.scalable(0.6F, 1.8F);
-    private static final Map<Pose, EntityDimensions> POSES = ImmutableMap.builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
+    private static final Map<Pose, EntityDimensions> POSES = ImmutableMap.<Pose, EntityDimensions>builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
     private static final int FLY_ACHIEVEMENT_SPEED = 25;
     private static final EntityDataAccessor<Float> DATA_PLAYER_ABSORPTION_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.FLOAT);
     private static final EntityDataAccessor<Integer> DATA_SCORE_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.INT);
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index 5ccbd5a146b45e071b6097fed790ff66671331c3..1ed97b03ba7261f69228b926f37b8f0ff2efa1ec 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -163,7 +163,7 @@ public abstract class AbstractMinecart extends Entity {
                 UnmodifiableIterator d3 = ((ImmutableList)POSE_DISMOUNT_HEIGHTS.get(pose)).iterator();
 
                 while(d3.hasNext()) {
-                    int i2 = d3.next();
+                    int i2 = (int) d3.next();
 
                     for(int[] ints : i) {
                         mutableBlockPos.set(blockPos.getX() + ints[0], blockPos.getY() + i2, blockPos.getZ() + ints[1]);
@@ -180,16 +180,16 @@ public abstract class AbstractMinecart extends Entity {
                 }
             }
 
-            double d2 = this.getBoundingBox().maxY;
-            mutableBlockPos.set((double)blockPos.getX(), d2, (double)blockPos.getZ());
+            double maxY = this.getBoundingBox().maxY;
+            mutableBlockPos.set((double)blockPos.getX(), maxY, (double)blockPos.getZ());
             UnmodifiableIterator var22 = immutableList.iterator();
 
             while(var22.hasNext()) {
                 Pose pose2 = (Pose)var22.next();
                 double d3 = (double)livingEntity.getDimensions(pose2).height;
-                int i3 = Mth.ceil(d2 - (double)mutableBlockPos.getY() + d3);
+                int i3 = Mth.ceil(maxY - (double)mutableBlockPos.getY() + d3);
                 double d4 = DismountHelper.findCeilingFrom(mutableBlockPos, i3, (blockPosx) -> this.level.getBlockState(blockPosx).getCollisionShape(this.level, blockPosx));
-                if (d2 + d3 <= d4) {
+                if (maxY + d3 <= d4) {
                     livingEntity.setPose(pose2);
                     break;
                 }
diff --git a/src/main/java/net/minecraft/world/inventory/DataSlot.java b/src/main/java/net/minecraft/world/inventory/DataSlot.java
index 00799f62cea61878d885ee25341129632cad29a5..4b9dd0554d4002ec5c4995dfbdf22f28c12b74ff 100644
--- a/src/main/java/net/minecraft/world/inventory/DataSlot.java
+++ b/src/main/java/net/minecraft/world/inventory/DataSlot.java
@@ -10,7 +10,7 @@ public abstract class DataSlot {
             }
 
             public void set(int ix) {
-                containerData.set(i, i);
+                containerData.set(i, ix);
             }
         };
     }
@@ -22,7 +22,7 @@ public abstract class DataSlot {
             }
 
             public void set(int ix) {
-                ints[i] = i;
+                ints[i] = ix;
             }
         };
     }
diff --git a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
index d55b1a0b77cd0e8904b7db6b4b02dcfdeff11b4e..6d7ebb7757e1a89e23856974045ce12a20d0b8ad 100644
--- a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
@@ -12,7 +12,7 @@ public abstract class RecipeBookMenu<C extends Container> extends AbstractContai
     }
 
     public void handlePlacement(boolean flag, Recipe<?> recipe, ServerPlayer serverPlayer) {
-        (new ServerPlaceRecipe<>(this)).recipeClicked(serverPlayer, recipe, flag);
+        (new ServerPlaceRecipe<>(this)).recipeClicked(serverPlayer, (Recipe<C>) recipe, flag);
     }
 
     public abstract void fillCraftSlotsStackedContents(StackedContents var1);
diff --git a/src/main/java/net/minecraft/world/item/HoneycombItem.java b/src/main/java/net/minecraft/world/item/HoneycombItem.java
index 856f5f2b9893173ba61804865dff51f57754959a..5b6dfe58b340eef792917fd5a2dce74709a20f95 100644
--- a/src/main/java/net/minecraft/world/item/HoneycombItem.java
+++ b/src/main/java/net/minecraft/world/item/HoneycombItem.java
@@ -17,7 +17,7 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class HoneycombItem extends Item {
-    public static final Supplier<BiMap<Block, Block>> WAXABLES = Suppliers.memoize(() -> ImmutableBiMap.builder().put(Blocks.COPPER_BLOCK, Blocks.WAXED_COPPER_BLOCK).put(Blocks.EXPOSED_COPPER, Blocks.WAXED_EXPOSED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.WAXED_WEATHERED_COPPER).put(Blocks.OXIDIZED_COPPER, Blocks.WAXED_OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.WAXED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WAXED_EXPOSED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.WAXED_WEATHERED_CUT_COPPER).put(Blocks.OXIDIZED_CUT_COPPER, Blocks.WAXED_OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB).put(Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS).put(Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS).build());
+    public static final Supplier<BiMap<Block, Block>> WAXABLES = Suppliers.memoize(() -> ImmutableBiMap.<Block, Block>builder().put(Blocks.COPPER_BLOCK, Blocks.WAXED_COPPER_BLOCK).put(Blocks.EXPOSED_COPPER, Blocks.WAXED_EXPOSED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.WAXED_WEATHERED_COPPER).put(Blocks.OXIDIZED_COPPER, Blocks.WAXED_OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.WAXED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WAXED_EXPOSED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.WAXED_WEATHERED_CUT_COPPER).put(Blocks.OXIDIZED_CUT_COPPER, Blocks.WAXED_OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB).put(Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS).put(Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS).build());
     public static final Supplier<BiMap<Block, Block>> WAX_OFF_BY_BLOCK = Suppliers.memoize(() -> ((BiMap)WAXABLES.get()).inverse());
 
     public HoneycombItem(Item.Properties properties) {
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index de07725515b6afd754a517181efef947e5d52c77..0eb1f9c2d6ed00047b410e350eb0cfa8a889fc3a 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -73,7 +73,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
     }
 
     public <C extends Container, T extends Recipe<C>> List<T> getAllRecipesFor(RecipeType<T> recipeType) {
-        return this.byType(recipeType).values().stream().map((recipe) -> recipe).collect(Collectors.toList());
+        return this.byType(recipeType).values().stream().map((recipe) -> (T) recipe).collect(Collectors.toList());
     }
 
     public <C extends Container, T extends Recipe<C>> List<T> getRecipesFor(RecipeType<T> recipeType, C container, Level level) {
@@ -81,7 +81,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
     }
 
     private <C extends Container, T extends Recipe<C>> Map<ResourceLocation, Recipe<C>> byType(RecipeType<T> recipeType) {
-        return this.recipes.getOrDefault(recipeType, Collections.emptyMap());
+        return (Map) this.recipes.getOrDefault(recipeType, Collections.emptyMap());
     }
 
     public <C extends Container, T extends Recipe<C>> NonNullList<ItemStack> getRemainingItemsFor(RecipeType<T> recipeType, C container, Level level) {
@@ -100,7 +100,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
     }
 
     public Optional<? extends Recipe<?>> byKey(ResourceLocation resourceLocation) {
-        return Optional.ofNullable((Recipe)this.byName.get(resourceLocation));
+        return Optional.ofNullable((Recipe<?>)this.byName.get(resourceLocation));
     }
 
     public Collection<Recipe<?>> getRecipes() {
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeType.java b/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
index 4da077647c46444466e476682672f77981b36856..df3de9d3f7176dcba7f175103eac3af015433537 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
@@ -24,6 +24,6 @@ public interface RecipeType<T extends Recipe<?>> {
     }
 
     default <C extends Container> Optional<T> tryMatch(Recipe<C> recipe, Level level, C container) {
-        return recipe.matches(container, level) ? Optional.of(recipe) : Optional.empty();
+        return recipe.matches(container, level) ? Optional.of((T) recipe) : Optional.empty();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/BlockEventData.java b/src/main/java/net/minecraft/world/level/BlockEventData.java
index a0a2047a71b78fb3a2f01060abf59b48568a62b0..f96b25aaac3a0b4d6666566d9a1a90552bc5096d 100644
--- a/src/main/java/net/minecraft/world/level/BlockEventData.java
+++ b/src/main/java/net/minecraft/world/level/BlockEventData.java
@@ -3,32 +3,4 @@ package net.minecraft.world.level;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.block.Block;
 
-public record BlockEventData(BlockPos a, Block b, int c, int d) {
-    private final BlockPos pos;
-    private final Block block;
-    private final int paramA;
-    private final int paramB;
-
-    public BlockEventData(BlockPos blockPos, Block block, int i, int i2) {
-        this.pos = blockPos;
-        this.block = block;
-        this.paramA = i;
-        this.paramB = i2;
-    }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public Block block() {
-        return this.block;
-    }
-
-    public int paramA() {
-        return this.paramA;
-    }
-
-    public int paramB() {
-        return this.paramB;
-    }
-}
\ No newline at end of file
+public record BlockEventData(BlockPos pos, Block block, int paramA, int paramB) {}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/BlockGetter.java b/src/main/java/net/minecraft/world/level/BlockGetter.java
index 53d772f066d3f0e84b59ac8c727033535aa7186a..ec5501be91d303eca9e5088913e5842b99194bb5 100644
--- a/src/main/java/net/minecraft/world/level/BlockGetter.java
+++ b/src/main/java/net/minecraft/world/level/BlockGetter.java
@@ -24,7 +24,7 @@ public interface BlockGetter extends LevelHeightAccessor {
 
     default <T extends BlockEntity> Optional<T> getBlockEntity(BlockPos blockPos, BlockEntityType<T> blockEntityType) {
         BlockEntity blockEntity = this.getBlockEntity(blockPos);
-        return blockEntity != null && blockEntity.getType() == blockEntityType ? Optional.of(blockEntity) : Optional.empty();
+        return blockEntity != null && blockEntity.getType() == blockEntityType ? Optional.of((T) blockEntity) : Optional.empty();
     }
 
     BlockState getBlockState(BlockPos var1);
diff --git a/src/main/java/net/minecraft/world/level/CollisionGetter.java b/src/main/java/net/minecraft/world/level/CollisionGetter.java
index fc2eb6ab497cc2f29ee5ff5e14a1d78cd97c1a91..9d2ad54fe8898b698754e866611d15769ed19906 100644
--- a/src/main/java/net/minecraft/world/level/CollisionGetter.java
+++ b/src/main/java/net/minecraft/world/level/CollisionGetter.java
@@ -73,7 +73,7 @@ public interface CollisionGetter extends BlockGetter {
     }
 
     @Nullable
-    private default VoxelShape borderCollision(Entity entity, AABB aabb) {
+    default VoxelShape borderCollision(Entity entity, AABB aabb) {
         WorldBorder worldBorder = this.getWorldBorder();
         return worldBorder.isInsideCloseToBorder(entity, aabb) ? worldBorder.getCollisionShape() : null;
     }
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 4aff128558b3026caabe10eaabb0ab1e18ffbb6e..6350d8309850647e10ed8ccf46b4d797da776bf9 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -262,7 +262,7 @@ public class Explosion {
             ObjectListIterator var12 = objectArrayList.iterator();
 
             while(var12.hasNext()) {
-                Pair<ItemStack, BlockPos> pair = var12.next();
+                Pair<ItemStack, BlockPos> pair = (Pair<ItemStack, BlockPos>) var12.next();
                 Block.popResource(this.level, (BlockPos)pair.getSecond(), (ItemStack)pair.getFirst());
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/GameRules.java b/src/main/java/net/minecraft/world/level/GameRules.java
index 4e1533d72a7e39cb415168362c462d0520db93f3..24d4be5ca98218dfd29dd204905e005fae11f9fc 100644
--- a/src/main/java/net/minecraft/world/level/GameRules.java
+++ b/src/main/java/net/minecraft/world/level/GameRules.java
@@ -124,8 +124,8 @@ public class GameRules {
     }
 
     private static <T extends GameRules.Value<T>> void callVisitorCap(GameRules.GameRuleTypeVisitor gameRuleTypeVisitor, GameRules.Key<?> key, GameRules.Type<?> type) {
-        gameRuleTypeVisitor.visit(key, type);
-        type.callVisitor(gameRuleTypeVisitor, key);
+        gameRuleTypeVisitor.visit((Key) key, type);
+        type.callVisitor(gameRuleTypeVisitor, (Key) key);
     }
 
     public void assignFrom(GameRules gameRules, @Nullable MinecraftServer minecraftServer) {
diff --git a/src/main/java/net/minecraft/world/level/LevelAccessor.java b/src/main/java/net/minecraft/world/level/LevelAccessor.java
index e0b06e5d320e3f5a78a76a45ee04d5450e93e7c6..251e19c288d7d60ead6b034e37d43050df84b4ca 100644
--- a/src/main/java/net/minecraft/world/level/LevelAccessor.java
+++ b/src/main/java/net/minecraft/world/level/LevelAccessor.java
@@ -29,11 +29,11 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
 
     LevelTickAccess<Block> getBlockTicks();
 
-    private default <T> ScheduledTick<T> createTick(BlockPos blockPos, T object, int i, TickPriority tickPriority) {
+    default <T> ScheduledTick<T> createTick(BlockPos blockPos, T object, int i, TickPriority tickPriority) {
         return new ScheduledTick<>(object, blockPos, this.getLevelData().getGameTime() + (long)i, tickPriority, this.nextSubTickCount());
     }
 
-    private default <T> ScheduledTick<T> createTick(BlockPos blockPos, T object, int i) {
+    default <T> ScheduledTick<T> createTick(BlockPos blockPos, T object, int i) {
         return new ScheduledTick<>(object, blockPos, this.getLevelData().getGameTime() + (long)i, this.nextSubTickCount());
     }
 
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index eb380b13f7f36654cf6e92559555e8fe07fb10f2..f66fa7c4071a83dbe062207cc3034bd101638b3e 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -82,13 +82,14 @@ public final class NaturalSpawner {
             MobCategory mobCategory = entity.getType().getCategory();
             if (mobCategory != MobCategory.MISC) {
                 BlockPos blockPos = entity.blockPosition();
+                Entity finalEntity = entity;
                 chunkGetter.query(ChunkPos.asLong(blockPos), (levelChunk) -> {
-                    MobSpawnSettings.MobSpawnCost mobSpawnCost = getRoughBiome(blockPos, levelChunk).getMobSettings().getMobSpawnCost(entity.getType());
+                    MobSpawnSettings.MobSpawnCost mobSpawnCost = getRoughBiome(blockPos, levelChunk).getMobSettings().getMobSpawnCost(finalEntity.getType());
                     if (mobSpawnCost != null) {
-                        potentialCalculator.addCharge(entity.blockPosition(), mobSpawnCost.getCharge());
+                        potentialCalculator.addCharge(finalEntity.blockPosition(), mobSpawnCost.getCharge());
                     }
 
-                    if (entity instanceof Mob) {
+                    if (finalEntity instanceof Mob) {
                         localMobCapCalculator.addMob(levelChunk.getPos(), mobCategory);
                     }
 
diff --git a/src/main/java/net/minecraft/world/level/SpawnData.java b/src/main/java/net/minecraft/world/level/SpawnData.java
index 71c28d703c2e2f16e616fa53d21df5902a17918c..f8a35738da53369f9a3416b406c3f0e67d404910 100644
--- a/src/main/java/net/minecraft/world/level/SpawnData.java
+++ b/src/main/java/net/minecraft/world/level/SpawnData.java
@@ -10,9 +10,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.InclusiveRange;
 import net.minecraft.util.random.SimpleWeightedRandomList;
 
-public record SpawnData(CompoundTag d, Optional<SpawnData.CustomSpawnRules> e) {
-    private final CompoundTag entityToSpawn;
-    private final Optional<SpawnData.CustomSpawnRules> customSpawnRules;
+public record SpawnData(CompoundTag entityToSpawn, Optional<SpawnData.CustomSpawnRules> customSpawnRules) {
     public static final Codec<SpawnData> CODEC = RecordCodecBuilder.create((instance) -> instance.group(CompoundTag.CODEC.fieldOf("entity").forGetter((spawnData) -> spawnData.entityToSpawn), SpawnData.CustomSpawnRules.CODEC.optionalFieldOf("custom_spawn_rules").forGetter((spawnData) -> spawnData.customSpawnRules)).apply(instance, SpawnData::new));
     public static final Codec<SimpleWeightedRandomList<SpawnData>> LIST_CODEC = SimpleWeightedRandomList.wrappedCodecAllowingEmpty(CODEC);
     public static final String DEFAULT_TYPE = "minecraft:pig";
@@ -21,11 +19,9 @@ public record SpawnData(CompoundTag d, Optional<SpawnData.CustomSpawnRules> e) {
         this(Util.make(new CompoundTag(), (compoundTag) -> compoundTag.putString("id", "minecraft:pig")), Optional.empty());
     }
 
-    public SpawnData(CompoundTag compoundTag, Optional<SpawnData.CustomSpawnRules> optional) {
-        ResourceLocation resourceLocation = ResourceLocation.tryParse(compoundTag.getString("id"));
-        compoundTag.putString("id", resourceLocation != null ? resourceLocation.toString() : "minecraft:pig");
-        this.entityToSpawn = compoundTag;
-        this.customSpawnRules = optional;
+    public SpawnData {
+        ResourceLocation resourceLocation = ResourceLocation.tryParse(entityToSpawn.getString("id"));
+        entityToSpawn.putString("id", resourceLocation != null ? resourceLocation.toString() : "minecraft:pig");
     }
 
     public CompoundTag getEntityToSpawn() {
@@ -44,17 +40,10 @@ public record SpawnData(CompoundTag d, Optional<SpawnData.CustomSpawnRules> e) {
         return this.customSpawnRules;
     }
 
-    public static record CustomSpawnRules(InclusiveRange<Integer> b, InclusiveRange<Integer> c) {
-        private final InclusiveRange<Integer> blockLightLimit;
-        private final InclusiveRange<Integer> skyLightLimit;
+    public static record CustomSpawnRules(InclusiveRange<Integer> blockLightLimit, InclusiveRange<Integer> skyLightLimit) {
         private static final InclusiveRange<Integer> LIGHT_RANGE = new InclusiveRange(0, 15);
         public static final Codec<SpawnData.CustomSpawnRules> CODEC = RecordCodecBuilder.create((instance) -> instance.group(InclusiveRange.INT.optionalFieldOf("block_light_limit", LIGHT_RANGE).flatXmap(SpawnData.CustomSpawnRules::checkLightBoundaries, SpawnData.CustomSpawnRules::checkLightBoundaries).forGetter((customSpawnRules) -> customSpawnRules.blockLightLimit), InclusiveRange.INT.optionalFieldOf("sky_light_limit", LIGHT_RANGE).flatXmap(SpawnData.CustomSpawnRules::checkLightBoundaries, SpawnData.CustomSpawnRules::checkLightBoundaries).forGetter((customSpawnRules) -> customSpawnRules.skyLightLimit)).apply(instance, SpawnData.CustomSpawnRules::new));
 
-        public CustomSpawnRules(InclusiveRange<Integer> inclusiveRange, InclusiveRange<Integer> inclusiveRange2) {
-            this.blockLightLimit = inclusiveRange;
-            this.skyLightLimit = inclusiveRange2;
-        }
-
         private static DataResult<InclusiveRange<Integer>> checkLightBoundaries(InclusiveRange<Integer> inclusiveRange) {
             return !LIGHT_RANGE.contains(inclusiveRange) ? DataResult.error("Light values must be withing range " + LIGHT_RANGE) : DataResult.success(inclusiveRange);
         }
diff --git a/src/main/java/net/minecraft/world/level/biome/Biome.java b/src/main/java/net/minecraft/world/level/biome/Biome.java
index 3d9a6ac3f5dce3a5a56ea746cd0549418b6f917b..4b1cf765c1001ad159d0c01c0c954d2d29446734 100644
--- a/src/main/java/net/minecraft/world/level/biome/Biome.java
+++ b/src/main/java/net/minecraft/world/level/biome/Biome.java
@@ -35,8 +35,8 @@ import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluids;
 
 public final class Biome {
-    public static final Codec<Biome> DIRECT_CODEC;
-    public static final Codec<Biome> NETWORK_CODEC;
+    public static final Codec<Biome> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects), BiomeGenerationSettings.CODEC.forGetter((biome) -> biome.generationSettings), MobSpawnSettings.CODEC.forGetter((biome) -> biome.mobSettings)).apply(instance, Biome::new));
+    public static final Codec<Biome> NETWORK_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects)).apply(instance, (climateSettings, biomeCategory, biomeSpecialEffects) -> new Biome(climateSettings, biomeCategory, biomeSpecialEffects, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY)));
     public static final Codec<Holder<Biome>> CODEC = RegistryFileCodec.create(Registry.BIOME_REGISTRY, DIRECT_CODEC);
     public static final Codec<HolderSet<Biome>> LIST_CODEC = RegistryCodecs.homogeneousList(Registry.BIOME_REGISTRY, DIRECT_CODEC);
     private static final PerlinSimplexNoise TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(new LegacyRandomSource(1234L)), ImmutableList.of(0));
@@ -251,11 +251,6 @@ public final class Biome {
         return holder.value().getBiomeCategory();
     }
 
-    static {
-        DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects), BiomeGenerationSettings.CODEC.forGetter((biome) -> biome.generationSettings), MobSpawnSettings.CODEC.forGetter((biome) -> biome.mobSettings)).apply(instance, Biome::new));
-        NETWORK_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> biome.climateSettings), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> biome.biomeCategory), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> biome.specialEffects)).apply(instance, (climateSettings, biomeCategory, biomeSpecialEffects) -> new Biome(climateSettings, biomeCategory, biomeSpecialEffects, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY)));
-    }
-
     public static class BiomeBuilder {
         @Nullable
         public Biome.Precipitation precipitation;
diff --git a/src/main/java/net/minecraft/world/level/biome/BiomeSource.java b/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
index 9a38b3a21c3f389eedd4ed7b263868d416416214..8feba4d38d9b99eb49584df04ed7f64628ac8fbd 100644
--- a/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/BiomeSource.java
@@ -60,30 +60,6 @@ public abstract class BiomeSource implements BiomeResolver {
         Map<FeatureData, Set<FeatureData>> map = new TreeMap(comparator);
         int i = 0;
 
-        record FeatureData(int a, int b, PlacedFeature c) {
-            private final int featureIndex;
-            private final int step;
-            private final PlacedFeature feature;
-
-            FeatureData(int i, int i2, PlacedFeature placedFeature) {
-                this.featureIndex = i;
-                this.step = i2;
-                this.feature = placedFeature;
-            }
-
-            public int featureIndex() {
-                return this.featureIndex;
-            }
-
-            public int step() {
-                return this.step;
-            }
-
-            public PlacedFeature feature() {
-                return this.feature;
-            }
-        }
-
         for(Holder<Biome> holder : list) {
             Biome biome = holder.value();
             List<FeatureData> list2 = Lists.newArrayList();
@@ -91,7 +67,7 @@ public abstract class BiomeSource implements BiomeResolver {
             i = Math.max(i, list3.size());
 
             for(int i2 = 0; i2 < list3.size(); ++i2) {
-                for(Holder<PlacedFeature> holder2 : (HolderSet)list3.get(i2)) {
+                for(Holder<PlacedFeature> holder2 : list3.get(i2)) {
                     PlacedFeature placedFeature = (PlacedFeature)holder2.value();
                     list2.add(new FeatureData(object2IntMap.computeIfAbsent(placedFeature, (object) -> mutableInt.getAndIncrement()), i2, placedFeature));
                 }
@@ -109,12 +85,12 @@ public abstract class BiomeSource implements BiomeResolver {
         Set<FeatureData> set3 = new TreeSet(comparator);
         List<FeatureData> list4 = Lists.newArrayList();
 
-        for(FeatureData 1FeatureData : map.keySet()) {
+        for(FeatureData featureData : map.keySet()) {
             if (!set3.isEmpty()) {
                 throw new IllegalStateException("You somehow broke the universe; DFS bork (iteration finished with non-empty in-progress vertex set");
             }
 
-            if (!set2.contains(1FeatureData) && Graph.depthFirstSearch(map, set2, set3, list4::add, 1FeatureData)) {
+            if (!set2.contains(featureData) && Graph.depthFirstSearch(map, set2, set3, list4::add, featureData)) {
                 if (!flag) {
                     throw new IllegalStateException("Feature order cycle found");
                 }
@@ -148,7 +124,8 @@ public abstract class BiomeSource implements BiomeResolver {
         Builder<BiomeSource.StepFeatureData> builder = ImmutableList.builder();
 
         for(int i5 = 0; i5 < i; ++i5) {
-            List<PlacedFeature> list6 = list4.stream().filter((var1) -> var1.step() == i5).map(FeatureData::feature).collect(Collectors.toList());
+            int finalI = i5;
+            List<PlacedFeature> list6 = list4.stream().filter((var1) -> var1.step() == finalI).map(FeatureData::feature).collect(Collectors.toList());
             int i7 = list6.size();
             Object2IntMap<PlacedFeature> object2IntMap2 = new Object2IntOpenCustomHashMap(i7, Util.identityStrategy());
 
@@ -261,21 +238,9 @@ public abstract class BiomeSource implements BiomeResolver {
         Registry.register(Registry.BIOME_SOURCE, "the_end", TheEndBiomeSource.CODEC);
     }
 
-    public static record StepFeatureData(List<PlacedFeature> a, ToIntFunction<PlacedFeature> b) {
-        private final List<PlacedFeature> features;
-        private final ToIntFunction<PlacedFeature> indexMapping;
-
-        public StepFeatureData(List<PlacedFeature> list, ToIntFunction<PlacedFeature> toIntFunction) {
-            this.features = list;
-            this.indexMapping = toIntFunction;
-        }
-
-        public List<PlacedFeature> features() {
-            return this.features;
-        }
+    public static record StepFeatureData(List<PlacedFeature> features, ToIntFunction<PlacedFeature> indexMapping) {
+    }
 
-        public ToIntFunction<PlacedFeature> indexMapping() {
-            return this.indexMapping;
-        }
+    record FeatureData(int featureIndex, int step, PlacedFeature feature) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/biome/Climate.java b/src/main/java/net/minecraft/world/level/biome/Climate.java
index af4e9c3f92921c5d47550fedc6571ab68d5b510b..63586e4c6047ec4dc62f32f97a4ed3429f777835 100644
--- a/src/main/java/net/minecraft/world/level/biome/Climate.java
+++ b/src/main/java/net/minecraft/world/level/biome/Climate.java
@@ -60,16 +60,9 @@ public class Climate {
         long distance(Climate.RTree.Node<T> var1, long[] var2);
     }
 
-    public static record Parameter(long b, long c) {
-        private final long min;
-        private final long max;
+    public static record Parameter(long min, long max) {
         public static final Codec<Climate.Parameter> CODEC = ExtraCodecs.intervalCodec(Codec.floatRange(-2.0F, 2.0F), "min", "max", (f, f2) -> f.compareTo(f2) > 0 ? DataResult.error("Cannon construct interval, min > max (" + f + " > " + f2 + ")") : DataResult.success(new Climate.Parameter(Climate.quantizeCoord(f), Climate.quantizeCoord(f2))), (parameter) -> Climate.unquantizeCoord(parameter.min()), (parameter) -> Climate.unquantizeCoord(parameter.max()));
 
-        public Parameter(long l, long l2) {
-            this.min = l;
-            this.max = l2;
-        }
-
         public static Climate.Parameter point(float f) {
             return span(f, f);
         }
@@ -109,27 +102,11 @@ public class Climate {
         public Climate.Parameter span(@Nullable Climate.Parameter parameter) {
             return parameter == null ? this : new Climate.Parameter(Math.min(this.min, parameter.min()), Math.max(this.max, parameter.max()));
         }
-
-        public long min() {
-            return this.min;
-        }
-
-        public long max() {
-            return this.max;
-        }
     }
 
-    public static class ParameterList<T> {
-        private final List<Pair<Climate.ParameterPoint, T>> values;
-        private final Climate.RTree<T> index;
-
+    public static record ParameterList<T>(List<Pair<Climate.ParameterPoint, T>> values, Climate.RTree<T> index) {
         public ParameterList(List<Pair<Climate.ParameterPoint, T>> list) {
-            this.values = list;
-            this.index = Climate.RTree.create(list);
-        }
-
-        public List<Pair<Climate.ParameterPoint, T>> values() {
-            return this.values;
+            this(list, Climate.RTree.create(list));
         }
 
         public T findValue(Climate.TargetPoint targetPoint) {
@@ -164,26 +141,9 @@ public class Climate {
         }
     }
 
-    public static record ParameterPoint(Climate.Parameter b, Climate.Parameter c, Climate.Parameter d, Climate.Parameter e, Climate.Parameter f, Climate.Parameter g, long h) {
-        private final Climate.Parameter temperature;
-        private final Climate.Parameter humidity;
-        private final Climate.Parameter continentalness;
-        private final Climate.Parameter erosion;
-        private final Climate.Parameter depth;
-        private final Climate.Parameter weirdness;
-        private final long offset;
+    public static record ParameterPoint(Climate.Parameter temperature, Climate.Parameter humidity, Climate.Parameter continentalness, Climate.Parameter erosion, Climate.Parameter depth, Climate.Parameter weirdness, long offset) {
         public static final Codec<Climate.ParameterPoint> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Climate.Parameter.CODEC.fieldOf("temperature").forGetter((parameterPoint) -> parameterPoint.temperature), Climate.Parameter.CODEC.fieldOf("humidity").forGetter((parameterPoint) -> parameterPoint.humidity), Climate.Parameter.CODEC.fieldOf("continentalness").forGetter((parameterPoint) -> parameterPoint.continentalness), Climate.Parameter.CODEC.fieldOf("erosion").forGetter((parameterPoint) -> parameterPoint.erosion), Climate.Parameter.CODEC.fieldOf("depth").forGetter((parameterPoint) -> parameterPoint.depth), Climate.Parameter.CODEC.fieldOf("weirdness").forGetter((parameterPoint) -> parameterPoint.weirdness), Codec.floatRange(0.0F, 1.0F).fieldOf("offset").xmap(Climate::quantizeCoord, Climate::unquantizeCoord).forGetter((parameterPoint) -> parameterPoint.offset)).apply(instance, Climate.ParameterPoint::new));
 
-        public ParameterPoint(Climate.Parameter parameter, Climate.Parameter parameter2, Climate.Parameter parameter3, Climate.Parameter parameter4, Climate.Parameter parameter5, Climate.Parameter parameter6, long l) {
-            this.temperature = parameter;
-            this.humidity = parameter2;
-            this.continentalness = parameter3;
-            this.erosion = parameter4;
-            this.depth = parameter5;
-            this.weirdness = parameter6;
-            this.offset = l;
-        }
-
         long fitness(Climate.TargetPoint targetPoint) {
             return Mth.square(this.temperature.distance(targetPoint.temperature)) + Mth.square(this.humidity.distance(targetPoint.humidity)) + Mth.square(this.continentalness.distance(targetPoint.continentalness)) + Mth.square(this.erosion.distance(targetPoint.erosion)) + Mth.square(this.depth.distance(targetPoint.depth)) + Mth.square(this.weirdness.distance(targetPoint.weirdness)) + Mth.square(this.offset);
         }
@@ -191,34 +151,6 @@ public class Climate {
         protected List<Climate.Parameter> parameterSpace() {
             return ImmutableList.of(this.temperature, this.humidity, this.continentalness, this.erosion, this.depth, this.weirdness, new Climate.Parameter(this.offset, this.offset));
         }
-
-        public Climate.Parameter temperature() {
-            return this.temperature;
-        }
-
-        public Climate.Parameter humidity() {
-            return this.humidity;
-        }
-
-        public Climate.Parameter continentalness() {
-            return this.continentalness;
-        }
-
-        public Climate.Parameter erosion() {
-            return this.erosion;
-        }
-
-        public Climate.Parameter depth() {
-            return this.depth;
-        }
-
-        public Climate.Parameter weirdness() {
-            return this.weirdness;
-        }
-
-        public long offset() {
-            return this.offset;
-        }
     }
 
     protected static final class RTree<T> {
@@ -433,25 +365,7 @@ public class Climate {
         }
     }
 
-    public static record Sampler(DensityFunction a, DensityFunction b, DensityFunction c, DensityFunction d, DensityFunction e, DensityFunction f, List<Climate.ParameterPoint> g) {
-        private final DensityFunction temperature;
-        private final DensityFunction humidity;
-        private final DensityFunction continentalness;
-        private final DensityFunction erosion;
-        private final DensityFunction depth;
-        private final DensityFunction weirdness;
-        private final List<Climate.ParameterPoint> spawnTarget;
-
-        public Sampler(DensityFunction densityFunction, DensityFunction densityFunction2, DensityFunction densityFunction3, DensityFunction densityFunction4, DensityFunction densityFunction5, DensityFunction densityFunction6, List<Climate.ParameterPoint> list) {
-            this.temperature = densityFunction;
-            this.humidity = densityFunction2;
-            this.continentalness = densityFunction3;
-            this.erosion = densityFunction4;
-            this.depth = densityFunction5;
-            this.weirdness = densityFunction6;
-            this.spawnTarget = list;
-        }
-
+    public static record Sampler(DensityFunction temperature, DensityFunction humidity, DensityFunction continentalness, DensityFunction erosion, DensityFunction depth, DensityFunction weirdness, List<Climate.ParameterPoint> spawnTarget) {
         public Climate.TargetPoint sample(int i, int i2, int i3) {
             int i4 = QuartPos.toBlock(i);
             int i5 = QuartPos.toBlock(i2);
@@ -539,69 +453,15 @@ public class Climate {
             return new Climate.SpawnFinder.Result(new BlockPos(i, 0, i2), l + l2);
         }
 
-        static record Result(BlockPos a, long b) {
-            private final BlockPos location;
-            private final long fitness;
-
-            Result(BlockPos blockPos, long l) {
-                this.location = blockPos;
-                this.fitness = l;
-            }
-
-            public BlockPos location() {
-                return this.location;
-            }
-
-            public long fitness() {
-                return this.fitness;
-            }
+        static record Result(BlockPos location, long fitness) {
         }
     }
 
-    public static record TargetPoint(long a, long b, long c, long d, long e, long f) {
-        final long temperature;
-        final long humidity;
-        final long continentalness;
-        final long erosion;
-        final long depth;
-        final long weirdness;
-
-        public TargetPoint(long l, long l2, long l3, long l4, long l5, long l6) {
-            this.temperature = l;
-            this.humidity = l2;
-            this.continentalness = l3;
-            this.erosion = l4;
-            this.depth = l5;
-            this.weirdness = l6;
-        }
+    public static record TargetPoint(long temperature, long humidity, long continentalness, long erosion, long depth, long weirdness) {
 
         @VisibleForTesting
         protected long[] toParameterArray() {
             return new long[]{this.temperature, this.humidity, this.continentalness, this.erosion, this.depth, this.weirdness, 0L};
         }
-
-        public long temperature() {
-            return this.temperature;
-        }
-
-        public long humidity() {
-            return this.humidity;
-        }
-
-        public long continentalness() {
-            return this.continentalness;
-        }
-
-        public long erosion() {
-            return this.erosion;
-        }
-
-        public long depth() {
-            return this.depth;
-        }
-
-        public long weirdness() {
-            return this.weirdness;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
index 942ae0aaba2d8cb7903c790293f8e8d3b315f9b2..9da2505f366758d1a388fb7878932a7cbfb50bdd 100644
--- a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSource.java
@@ -24,7 +24,7 @@ import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.VisibleForDebug;
 
 public class MultiNoiseBiomeSource extends BiomeSource {
-    public static final MapCodec<MultiNoiseBiomeSource> DIRECT_CODEC;
+    public static final MapCodec<MultiNoiseBiomeSource> DIRECT_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ExtraCodecs.nonEmptyList(RecordCodecBuilder.<Pair<Climate.ParameterPoint, Holder<Biome>>>create((instancex) -> instancex.group(Climate.ParameterPoint.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair<Climate.ParameterPoint, Holder<Biome>>::getSecond)).apply(instancex, Pair::of)).listOf()).xmap(Climate.ParameterList::new, Climate.ParameterList::values).fieldOf("biomes").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.parameters)).apply(instance, MultiNoiseBiomeSource::new));
     public static final Codec<MultiNoiseBiomeSource> CODEC = Codec.mapEither(MultiNoiseBiomeSource.PresetInstance.CODEC, DIRECT_CODEC).xmap((either) -> (MultiNoiseBiomeSource)either.map(MultiNoiseBiomeSource.PresetInstance::biomeSource, Function.identity()), (multiNoiseBiomeSource) -> (Either)multiNoiseBiomeSource.preset().map(Either::left).orElseGet(() -> Either.right(multiNoiseBiomeSource))).codec();
     private final Climate.ParameterList<Holder<Biome>> parameters;
     private final Optional<MultiNoiseBiomeSource.PresetInstance> preset;
@@ -79,13 +79,9 @@ public class MultiNoiseBiomeSource extends BiomeSource {
         list.add("Biome builder PV: " + OverworldBiomeBuilder.getDebugStringForPeaksAndValleys(d) + " C: " + overworldBiomeBuilder.getDebugStringForContinentalness((double)f) + " E: " + overworldBiomeBuilder.getDebugStringForErosion((double)f2) + " T: " + overworldBiomeBuilder.getDebugStringForTemperature((double)f3) + " H: " + overworldBiomeBuilder.getDebugStringForHumidity((double)f4));
     }
 
-    static {
-        DIRECT_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ExtraCodecs.nonEmptyList(RecordCodecBuilder.create((instancex) -> instancex.group(Climate.ParameterPoint.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), Biome.CODEC.fieldOf("biome").forGetter(Pair::getSecond)).apply(instancex, Pair::of)).listOf()).xmap(Climate.ParameterList::new, Climate.ParameterList::values).fieldOf("biomes").forGetter((multiNoiseBiomeSource) -> multiNoiseBiomeSource.parameters)).apply(instance, MultiNoiseBiomeSource::new));
-    }
-
     public static class Preset {
         static final Map<ResourceLocation, MultiNoiseBiomeSource.Preset> BY_NAME = Maps.newHashMap();
-        public static final MultiNoiseBiomeSource.Preset NETHER = new MultiNoiseBiomeSource.Preset(new ResourceLocation("nether"), (registry) -> new Climate.ParameterList(ImmutableList.of(Pair.of(Climate.parameters(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F), registry.getOrCreateHolder(Biomes.NETHER_WASTES)), Pair.of(Climate.parameters(0.0F, -0.5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F), registry.getOrCreateHolder(Biomes.SOUL_SAND_VALLEY)), Pair.of(Climate.parameters(0.4F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F), registry.getOrCreateHolder(Biomes.CRIMSON_FOREST)), Pair.of(Climate.parameters(0.0F, 0.5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.375F), registry.getOrCreateHolder(Biomes.WARPED_FOREST)), Pair.of(Climate.parameters(-0.5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.175F), registry.getOrCreateHolder(Biomes.BASALT_DELTAS)))));
+        public static final MultiNoiseBiomeSource.Preset NETHER = new MultiNoiseBiomeSource.Preset(new ResourceLocation("nether"), (registry) -> new Climate.ParameterList<>(ImmutableList.of(Pair.of(Climate.parameters(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F), registry.getOrCreateHolder(Biomes.NETHER_WASTES)), Pair.of(Climate.parameters(0.0F, -0.5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F), registry.getOrCreateHolder(Biomes.SOUL_SAND_VALLEY)), Pair.of(Climate.parameters(0.4F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F), registry.getOrCreateHolder(Biomes.CRIMSON_FOREST)), Pair.of(Climate.parameters(0.0F, 0.5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.375F), registry.getOrCreateHolder(Biomes.WARPED_FOREST)), Pair.of(Climate.parameters(-0.5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.175F), registry.getOrCreateHolder(Biomes.BASALT_DELTAS)))));
         public static final MultiNoiseBiomeSource.Preset OVERWORLD = new MultiNoiseBiomeSource.Preset(new ResourceLocation("overworld"), (registry) -> {
             Builder<Pair<Climate.ParameterPoint, Holder<Biome>>> builder = ImmutableList.builder();
             (new OverworldBiomeBuilder()).addBiomes((pair) -> builder.add(pair.mapSecond(registry::getOrCreateHolder)));
@@ -114,26 +110,11 @@ public class MultiNoiseBiomeSource extends BiomeSource {
         }
     }
 
-    static record PresetInstance(MultiNoiseBiomeSource.Preset b, Registry<Biome> c) {
-        private final MultiNoiseBiomeSource.Preset preset;
-        private final Registry<Biome> biomes;
+    static record PresetInstance(MultiNoiseBiomeSource.Preset preset, Registry<Biome> biomes) {
         public static final MapCodec<MultiNoiseBiomeSource.PresetInstance> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ResourceLocation.CODEC.flatXmap((resourceLocation) -> Optional.ofNullable((MultiNoiseBiomeSource.Preset)MultiNoiseBiomeSource.Preset.BY_NAME.get(resourceLocation)).map(DataResult::success).orElseGet(() -> DataResult.error("Unknown preset: " + resourceLocation)), (preset) -> DataResult.success(preset.name)).fieldOf("preset").stable().forGetter(MultiNoiseBiomeSource.PresetInstance::preset), RegistryOps.retrieveRegistry(Registry.BIOME_REGISTRY).forGetter(MultiNoiseBiomeSource.PresetInstance::biomes)).apply(instance, instance.stable(MultiNoiseBiomeSource.PresetInstance::new)));
 
-        PresetInstance(MultiNoiseBiomeSource.Preset preset, Registry<Biome> registry) {
-            this.preset = preset;
-            this.biomes = registry;
-        }
-
         public MultiNoiseBiomeSource biomeSource() {
             return this.preset.biomeSource(this, true);
         }
-
-        public MultiNoiseBiomeSource.Preset preset() {
-            return this.preset;
-        }
-
-        public Registry<Biome> biomes() {
-            return this.biomes;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/biome/TerrainShaper.java b/src/main/java/net/minecraft/world/level/biome/TerrainShaper.java
index e0f9230317fd7211ffea8fe65db92fbc98f6d280..a83ebd9822526bda4197f3da9ab7b5b9a430acc7 100644
--- a/src/main/java/net/minecraft/world/level/biome/TerrainShaper.java
+++ b/src/main/java/net/minecraft/world/level/biome/TerrainShaper.java
@@ -18,22 +18,13 @@ import net.minecraft.util.VisibleForDebug;
 import net.minecraft.world.level.levelgen.DensityFunction;
 import org.jetbrains.annotations.VisibleForTesting;
 
-public record TerrainShaper(CubicSpline<TerrainShaper.Point> c, CubicSpline<TerrainShaper.Point> d, CubicSpline<TerrainShaper.Point> e) {
-    private final CubicSpline<TerrainShaper.Point> offsetSampler;
-    private final CubicSpline<TerrainShaper.Point> factorSampler;
-    private final CubicSpline<TerrainShaper.Point> jaggednessSampler;
+public record TerrainShaper(CubicSpline<TerrainShaper.Point> offsetSampler, CubicSpline<TerrainShaper.Point> factorSampler, CubicSpline<TerrainShaper.Point> jaggednessSampler) {
     private static final Codec<CubicSpline<TerrainShaper.Point>> SPLINE_CODEC = CubicSpline.codec(TerrainShaper.Coordinate.WIDE_CODEC);
     public static final Codec<CubicSpline<TerrainShaper.PointCustom>> SPLINE_CUSTOM_CODEC = CubicSpline.codec(TerrainShaper.CoordinateCustom.WIDE_CODEC);
     public static final Codec<TerrainShaper> CODEC = RecordCodecBuilder.create((instance) -> instance.group(SPLINE_CODEC.fieldOf("offset").forGetter(TerrainShaper::offsetSampler), SPLINE_CODEC.fieldOf("factor").forGetter(TerrainShaper::factorSampler), SPLINE_CODEC.fieldOf("jaggedness").forGetter((terrainShaper) -> terrainShaper.jaggednessSampler)).apply(instance, TerrainShaper::new));
     private static final float GLOBAL_OFFSET = -0.50375F;
     private static final ToFloatFunction<Float> NO_TRANSFORM = (f) -> f;
 
-    public TerrainShaper(CubicSpline<TerrainShaper.Point> cubicSpline, CubicSpline<TerrainShaper.Point> cubicSpline2, CubicSpline<TerrainShaper.Point> cubicSpline3) {
-        this.offsetSampler = cubicSpline;
-        this.factorSampler = cubicSpline2;
-        this.jaggednessSampler = cubicSpline3;
-    }
-
     private static float getAmplifiedOffset(float f) {
         return f < 0.0F ? f : f * 2.0F;
     }
@@ -309,8 +300,7 @@ public record TerrainShaper(CubicSpline<TerrainShaper.Point> c, CubicSpline<Terr
         }
     }
 
-    public static record CoordinateCustom(Holder<DensityFunction> a) implements ToFloatFunction<TerrainShaper.PointCustom> {
-        private final Holder<DensityFunction> function;
+    public static record CoordinateCustom(Holder<DensityFunction> function) implements ToFloatFunction<TerrainShaper.PointCustom> {
         static final Codec<ToFloatFunction<TerrainShaper.PointCustom>> WIDE_CODEC = DensityFunction.CODEC.flatComapMap(TerrainShaper.CoordinateCustom::new, (toFloatFunction) -> {
             DataResult var10000;
             if (toFloatFunction instanceof TerrainShaper.CoordinateCustom) {
@@ -323,10 +313,6 @@ public record TerrainShaper(CubicSpline<TerrainShaper.Point> c, CubicSpline<Terr
             return var10000;
         });
 
-        public CoordinateCustom(Holder<DensityFunction> holder) {
-            this.function = holder;
-        }
-
         public float apply(TerrainShaper.PointCustom pointCustom) {
             return (float)this.function.value().compute(pointCustom.context());
         }
@@ -340,45 +326,8 @@ public record TerrainShaper(CubicSpline<TerrainShaper.Point> c, CubicSpline<Terr
         }
     }
 
-    public static record Point(float a, float b, float c, float d) {
-        private final float continents;
-        private final float erosion;
-        private final float ridges;
-        private final float weirdness;
-
-        public Point(float f, float f2, float f3, float f4) {
-            this.continents = f;
-            this.erosion = f2;
-            this.ridges = f3;
-            this.weirdness = f4;
-        }
-
-        public float continents() {
-            return this.continents;
-        }
-
-        public float erosion() {
-            return this.erosion;
-        }
-
-        public float ridges() {
-            return this.ridges;
-        }
-
-        public float weirdness() {
-            return this.weirdness;
-        }
-    }
-
-    public static record PointCustom(DensityFunction.FunctionContext a) {
-        private final DensityFunction.FunctionContext context;
-
-        public PointCustom(DensityFunction.FunctionContext functionContext) {
-            this.context = functionContext;
-        }
+    public static record Point(float continents, float erosion, float ridges, float weirdness) {}
 
-        public DensityFunction.FunctionContext context() {
-            return this.context;
-        }
+    public static record PointCustom(DensityFunction.FunctionContext context) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
index f36aeb222dcf0648d626f423d9ba26ca0a2f3be3..6d688bc0d308f09cc21b0f01476ba387c0c390cb 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
@@ -33,6 +33,6 @@ public abstract class BaseEntityBlock extends Block implements EntityBlock {
 
     @Nullable
     protected static <E extends BlockEntity, A extends BlockEntity> BlockEntityTicker<A> createTickerHelper(BlockEntityType<A> blockEntityType, BlockEntityType<E> blockEntityType2, BlockEntityTicker<? super E> blockEntityTicker) {
-        return blockEntityType2 == blockEntityType ? blockEntityTicker : null;
+        return blockEntityType2 == blockEntityType ? (BlockEntityTicker<A>) blockEntityTicker : null;
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
index 94198785a875a18d134a5e6102bb73846933111e..9c4ca39dbda2362460bd31732a4a31307b7137e0 100644
--- a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
@@ -55,7 +55,7 @@ public class IronBarsBlock extends CrossCollisionBlock {
                 return true;
             }
 
-            if (blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction)) && blockState2.getValue((Property)PROPERTY_BY_DIRECTION.get(direction.getOpposite()))) {
+            if (blockState.getValue(PROPERTY_BY_DIRECTION.get(direction)) && blockState2.getValue(PROPERTY_BY_DIRECTION.get(direction.getOpposite()))) {
                 return true;
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/PipeBlock.java b/src/main/java/net/minecraft/world/level/block/PipeBlock.java
index 4186147b04fa1a6e286969cd3484a4f9ec864f8e..432a87a9d892212697585a0a59e29aad76c0bf99 100644
--- a/src/main/java/net/minecraft/world/level/block/PipeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PipeBlock.java
@@ -79,7 +79,7 @@ public class PipeBlock extends Block {
         int i = 0;
 
         for(int i2 = 0; i2 < DIRECTIONS.length; ++i2) {
-            if (blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(DIRECTIONS[i2]))) {
+            if (blockState.getValue(PROPERTY_BY_DIRECTION.get(DIRECTIONS[i2]))) {
                 i |= 1 << i2;
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index 47e53ae2cd1e4c09a226f12eb8113c5ad9dba2e6..3e8551bce2f2107e87a644871a1771e5b15d63c4 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -85,7 +85,7 @@ public class RedStoneWireBlock extends Block {
         VoxelShape voxelShape = SHAPE_DOT;
 
         for(Direction direction : Direction.Plane.HORIZONTAL) {
-            RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+            RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction));
             if (redstoneSide == RedstoneSide.SIDE) {
                 voxelShape = Shapes.or(voxelShape, (VoxelShape)SHAPES_FLOOR.get(direction));
             } else if (redstoneSide == RedstoneSide.UP) {
@@ -172,7 +172,7 @@ public class RedStoneWireBlock extends Block {
         BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
 
         for(Direction direction : Direction.Plane.HORIZONTAL) {
-            RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+            RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction));
             if (redstoneSide != RedstoneSide.NONE && !levelAccessor.getBlockState(mutableBlockPos.setWithOffset(blockPos, direction)).is(this)) {
                 mutableBlockPos.move(Direction.DOWN);
                 BlockState blockState2 = levelAccessor.getBlockState(mutableBlockPos);
@@ -396,7 +396,7 @@ public class RedStoneWireBlock extends Block {
         int i = blockState.getValue(POWER);
         if (i != 0) {
             for(Direction direction : Direction.Plane.HORIZONTAL) {
-                RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+                RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction));
                 switch(redstoneSide) {
                 case UP:
                     this.spawnParticlesAlongLine(level, random, blockPos, COLORS[i], direction, Direction.UP, -0.5F, 0.5F);
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
index 42b6ea6f07acc5811e2e4c2c938906638ce5bbb3..cb839f61945e33542f5ac60160dd833b9cc8c458 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
@@ -8,7 +8,7 @@ import java.util.function.Supplier;
 import net.minecraft.world.level.block.state.BlockState;
 
 public interface WeatheringCopper extends ChangeOverTimeBlock<WeatheringCopper.WeatherState> {
-    Supplier<BiMap<Block, Block>> NEXT_BY_BLOCK = Suppliers.memoize(() -> ImmutableBiMap.builder().put(Blocks.COPPER_BLOCK, Blocks.EXPOSED_COPPER).put(Blocks.EXPOSED_COPPER, Blocks.WEATHERED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.EXPOSED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WEATHERED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.OXIDIZED_CUT_COPPER_STAIRS).build());
+    Supplier<BiMap<Block, Block>> NEXT_BY_BLOCK = Suppliers.memoize(() -> ImmutableBiMap.<Block, Block>builder().put(Blocks.COPPER_BLOCK, Blocks.EXPOSED_COPPER).put(Blocks.EXPOSED_COPPER, Blocks.WEATHERED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.EXPOSED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WEATHERED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.OXIDIZED_CUT_COPPER_STAIRS).build());
     Supplier<BiMap<Block, Block>> PREVIOUS_BY_BLOCK = Suppliers.memoize(() -> ((BiMap)NEXT_BY_BLOCK.get()).inverse());
 
     static Optional<Block> getPrevious(Block block) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
index e5be49043a30aa9f75bf2487ea6e0f87927372a2..7e7a6144c0b245218cce23c9e0cea0182726cb3b 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
@@ -265,12 +265,12 @@ public class StructureBlockEntity extends BlockEntity {
             BlockPos blockPos3 = new BlockPos(blockPos.getX() + 80, this.level.getMaxBuildHeight() - 1, blockPos.getZ() + 80);
             Stream<BlockPos> stream = this.getRelatedCorners(blockPos2, blockPos3);
             return calculateEnclosingBoundingBox(blockPos, stream).filter((boundingBox) -> {
-                int i = boundingBox.maxX() - boundingBox.minX();
+                int ix = boundingBox.maxX() - boundingBox.minX();
                 int i2 = boundingBox.maxY() - boundingBox.minY();
                 int i3 = boundingBox.maxZ() - boundingBox.minZ();
-                if (i > 1 && i2 > 1 && i3 > 1) {
+                if (ix > 1 && i2 > 1 && i3 > 1) {
                     this.structurePos = new BlockPos(boundingBox.minX() - blockPos.getX() + 1, boundingBox.minY() - blockPos.getY() + 1, boundingBox.minZ() - blockPos.getZ() + 1);
-                    this.structureSize = new Vec3i(i - 1, i2 - 1, i3 - 1);
+                    this.structureSize = new Vec3i(ix - 1, i2 - 1, i3 - 1);
                     this.setChanged();
                     BlockState blockState = this.level.getBlockState(blockPos);
                     this.level.sendBlockUpdated(blockPos, blockState, blockState, 3);
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
index 1e07de2b3263c22f2942899ab2d82593af62583a..496a061eba13ba89bb689ebef4d1fac661ddb257 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.block.state;
 
 import com.google.common.base.MoreObjects;
+import com.google.common.collect.ImmutableCollection;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSortedMap;
@@ -34,7 +35,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
     protected StateDefinition(Function<O, S> function, O object, StateDefinition.Factory<O, S> factory, Map<String, Property<?>> map) {
         this.owner = object;
         this.propertiesByName = ImmutableSortedMap.copyOf(map);
-        Supplier<S> supplier = () -> (StateHolder)function.apply(object);
+        Supplier<S> supplier = () -> (S) function.apply(object);
         MapCodec<S> mapCodec = MapCodec.of(Encoder.empty(), Decoder.unit(supplier));
 
         Entry<String, Property<?>> entry;
@@ -47,13 +48,12 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
         List<S> list = Lists.newArrayList();
         Stream<List<Pair<Property<?>, Comparable<?>>>> stream = Stream.of(Collections.emptyList());
 
-        Property<?> property;
-        for(UnmodifiableIterator var11 = this.propertiesByName.values().iterator(); var11.hasNext(); stream = stream.flatMap((listx) -> property.getPossibleValues().stream().map((comparable) -> {
-                List<Pair<Property<?>, Comparable<?>>> list2 = Lists.newArrayList(listx);
-                list2.add(Pair.of(property, comparable));
-                return list2;
-            }))) {
-            property = (Property)var11.next();
+        for(Property<?> property : this.propertiesByName.values()) {
+            stream = stream.flatMap((l) -> property.getPossibleValues().stream().map((o) -> {
+                List<Pair<Property<?>, Comparable<?>>> list1 = Lists.newArrayList(l);
+                list1.add(Pair.of(property, o));
+                return list1;
+            }));
         }
 
         stream.forEach((list2) -> {
@@ -72,7 +72,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
 
     private static <S extends StateHolder<?, S>, T extends Comparable<T>> MapCodec<S> appendPropertyCodec(MapCodec<S> mapCodec, Supplier<S> supplier, String s, Property<T> property) {
         return Codec.mapPair(mapCodec, property.valueCodec().fieldOf(s).orElseGet((sx) -> {
-        }, () -> property.value((StateHolder)supplier.get()))).xmap((pair) -> (StateHolder)((StateHolder)pair.getFirst()).setValue(property, ((Property.Value)pair.getSecond()).value()), (stateHolder) -> Pair.of(stateHolder, property.value(stateHolder)));
+        }, () -> property.value(supplier.get()))).xmap((pair) -> pair.getFirst().setValue(property, pair.getSecond().value()), (stateHolder) -> Pair.of(stateHolder, property.value(stateHolder)));
     }
 
     public ImmutableList<S> getPossibleStates() {
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
index 8c87e11f9f15006bdf7bfbed0b6f3d78a24dc59a..9c7f21e2d82c94fcd23d8ff1ccf5d0c3be6e441a 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
@@ -98,7 +98,7 @@ public abstract class StateHolder<O, S> {
 
     public <T extends Comparable<T>> Optional<T> getOptionalValue(Property<T> property) {
         Comparable<?> comparable = (Comparable)this.values.get(property);
-        return comparable == null ? Optional.empty() : Optional.of((Comparable)property.getValueClass().cast(comparable));
+        return comparable == null ? Optional.empty() : Optional.of(property.getValueClass().cast(comparable));
     }
 
     public <T extends Comparable<T>, V extends T> S setValue(Property<T> property, V comparable) {
@@ -150,9 +150,9 @@ public abstract class StateHolder<O, S> {
     }
 
     protected static <O, S extends StateHolder<O, S>> Codec<S> codec(Codec<O> codec, Function<O, S> function) {
-        return codec.dispatch("Name", (stateHolder) -> stateHolder.owner, (object) -> {
+        return codec.<S>dispatch("Name", (stateHolder) -> stateHolder.owner, (object) -> {
             S stateHolder = (S)(function.apply(object));
-            return stateHolder.getValues().isEmpty() ? Codec.unit(stateHolder) : stateHolder.propertiesCodec.codec().optionalFieldOf("Properties").xmap((optional) -> (StateHolder)optional.orElse(stateHolder), Optional::of).codec();
+            return stateHolder.getValues().isEmpty() ? Codec.unit(stateHolder) : stateHolder.propertiesCodec.codec().optionalFieldOf("Properties").xmap((optional) -> optional.orElse(stateHolder), Optional::of).codec();
         });
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
index 8c44f10310d942ac0ad9d6c312c8c4dbf90e675f..90c0f7e4815c59f8b2a52cf471f209c8eeed0007 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
@@ -35,7 +35,7 @@ public class EnumProperty<T extends Enum<T> & StringRepresentable> extends Prope
     }
 
     public Optional<T> getValue(String s) {
-        return Optional.ofNullable((Enum)this.names.get(s));
+        return Optional.ofNullable(this.names.get(s));
     }
 
     public String getName(T enum_) {
@@ -64,7 +64,7 @@ public class EnumProperty<T extends Enum<T> & StringRepresentable> extends Prope
     }
 
     public static <T extends Enum<T> & StringRepresentable> EnumProperty<T> create(String s, Class<T> clazz, Predicate<T> predicate) {
-        return create(s, clazz, Arrays.stream((Enum[])clazz.getEnumConstants()).filter(predicate).collect(Collectors.toList()));
+        return create(s, clazz, Arrays.stream(clazz.getEnumConstants()).filter(predicate).collect(Collectors.toList()));
     }
 
     public static <T extends Enum<T> & StringRepresentable> EnumProperty<T> create(String s, Class<T> clazz, T... enums) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
index 0b7b4887214e8b52d3209dc0bfff15826e80ad78..afb2bb920207321340ad6d714f80196f4d88c429 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
@@ -89,29 +89,9 @@ public abstract class Property<T extends Comparable<T>> {
         return dataResult.map((comparable) -> stateHolder.setValue(this, comparable)).setPartial(stateHolder);
     }
 
-    public static record Value<T extends Comparable<T>>(Property<T> a, T b) {
-        private final Property<T> property;
-        private final T value;
-
-        public Value(Property<T> property, T comparable) {
-            if (!property.getPossibleValues().contains(comparable)) {
-                throw new IllegalArgumentException("Value " + comparable + " does not belong to property " + property);
-            } else {
-                this.property = property;
-                this.value = comparable;
-            }
-        }
-
+    public static record Value<T extends Comparable<T>>(Property<T> property, T value) {
         public String toString() {
             return this.property.getName() + "=" + this.property.getName(this.value);
         }
-
-        public Property<T> property() {
-            return this.property;
-        }
-
-        public T value() {
-            return this.value;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index 8f6699468daca93ff4d790cfa46c157df9c09ac8..f8931051a591d1dadc7130153894629cc2909762 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -404,21 +404,5 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
         return this;
     }
 
-    public static record TicksToSave(SerializableTickContainer<Block> a, SerializableTickContainer<Fluid> b) {
-        private final SerializableTickContainer<Block> blocks;
-        private final SerializableTickContainer<Fluid> fluids;
-
-        public TicksToSave(SerializableTickContainer<Block> serializableTickContainer, SerializableTickContainer<Fluid> serializableTickContainer2) {
-            this.blocks = serializableTickContainer;
-            this.fluids = serializableTickContainer2;
-        }
-
-        public SerializableTickContainer<Block> blocks() {
-            return this.blocks;
-        }
-
-        public SerializableTickContainer<Fluid> fluids() {
-            return this.fluids;
-        }
-    }
+    public static record TicksToSave(SerializableTickContainer<Block> blocks, SerializableTickContainer<Fluid> fluids) {}
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
index 2107672aaefd096ca309a61b03d1185ad2352129..82a25f5e43bafd736707ceb4c6ddcc78b5d27a66 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -210,7 +210,7 @@ public abstract class ChunkGenerator implements BiomeManager.NoiseBiomeSource {
 
     @Nullable
     public Pair<BlockPos, Holder<ConfiguredStructureFeature<?, ?>>> findNearestMapFeature(ServerLevel serverLevel, HolderSet<ConfiguredStructureFeature<?, ?>> holderSet, BlockPos blockPos, int i, boolean flag) {
-        Set<Holder<Biome>> set = holderSet.stream().flatMap((holder) -> ((ConfiguredStructureFeature)holder.value()).biomes().stream()).collect(Collectors.toSet());
+        Set<Holder<Biome>> set = holderSet.stream().flatMap((holder) -> holder.value().biomes().stream()).collect(Collectors.toSet());
         if (set.isEmpty()) {
             return null;
         } else {
@@ -225,7 +225,7 @@ public abstract class ChunkGenerator implements BiomeManager.NoiseBiomeSource {
                 for(Holder<ConfiguredStructureFeature<?, ?>> holder : holderSet) {
                     if (!set2.stream().noneMatch(holder.value().biomes()::contains)) {
                         for(StructurePlacement structurePlacement : this.getPlacementsForFeature(holder)) {
-                            (map.computeIfAbsent(structurePlacement, (structurePlacement) -> new ObjectArraySet())).add(holder);
+                            (map.computeIfAbsent(structurePlacement, (structurePlacementIn) -> new ObjectArraySet())).add(holder);
                         }
                     }
                 }
@@ -361,9 +361,9 @@ public abstract class ChunkGenerator implements BiomeManager.NoiseBiomeSource {
                 this.biomeSource.possibleBiomes().stream().map(Holder::value).forEach(set::add);
             } else {
                 ChunkPos.rangeClosed(sectionPos.chunk(), 1).forEach((chunkPosx) -> {
-                    ChunkAccess chunkAccess = worldGenLevel.getChunk(chunkPosx.x, chunkPosx.z);
+                    ChunkAccess chunkAccessIn = worldGenLevel.getChunk(chunkPosx.x, chunkPosx.z);
 
-                    for(LevelChunkSection levelChunkSection : chunkAccess.getSections()) {
+                    for(LevelChunkSection levelChunkSection : chunkAccessIn.getSections()) {
                         levelChunkSection.getBiomes().getAll((holder) -> set.add((Biome)holder.value()));
                     }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
index 1c27bceaeb48ae97e0f65385b776941c2eda24f0..e3913f77b19442736e15d6ef4cffaa0feb54df9c 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
@@ -43,21 +43,24 @@ public class ChunkStatus {
     };
     public static final ChunkStatus EMPTY = registerSimple("empty", (ChunkStatus)null, -1, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkStatus, serverLevel, chunkGenerator, list, chunkAccess) -> {
     });
-    public static final ChunkStatus STRUCTURE_STARTS = register("structure_starts", EMPTY, 0, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkStatus, executor, serverLevel, chunkGenerator, structureManager, threadedLevelLightEngine, function, list, chunkAccess, flag) -> {
-        if (!chunkAccess.getStatus().isOrAfter(chunkStatus)) {
-            if (serverLevel.getServer().getWorldData().worldGenSettings().generateFeatures()) {
-                chunkGenerator.createStructures(serverLevel.registryAccess(), serverLevel.structureFeatureManager(), chunkAccess, structureManager, serverLevel.getSeed());
-            }
+    public static final ChunkStatus STRUCTURE_STARTS = register("structure_starts", EMPTY, 0, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, new GenerationTask() {
+        @Override
+        public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> doWork(ChunkStatus chunkStatus, Executor executor, ServerLevel serverLevel, ChunkGenerator chunkGenerator, StructureManager structureManager, ThreadedLevelLightEngine threadedLevelLightEngine, Function<ChunkAccess, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> chunkAccessCompletableFutureFunction, List<ChunkAccess> list, ChunkAccess chunkAccess, boolean var10) {
+            if (!chunkAccess.getStatus().isOrAfter(chunkStatus)) {
+                if (serverLevel.getServer().getWorldData().worldGenSettings().generateFeatures()) {
+                    chunkGenerator.createStructures(serverLevel.registryAccess(), serverLevel.structureFeatureManager(), chunkAccess, structureManager, serverLevel.getSeed());
+                }
 
-            if (chunkAccess instanceof ProtoChunk) {
-                ProtoChunk protoChunk = (ProtoChunk)chunkAccess;
-                protoChunk.setStatus(chunkStatus);
+                if (chunkAccess instanceof ProtoChunk) {
+                    ProtoChunk protoChunk = (ProtoChunk) chunkAccess;
+                    protoChunk.setStatus(chunkStatus);
+                }
+
+                serverLevel.onStructureStartsAvailable(chunkAccess);
             }
 
-            serverLevel.onStructureStartsAvailable(chunkAccess);
+            return CompletableFuture.completedFuture(Either.left(chunkAccess));
         }
-
-        return CompletableFuture.completedFuture(Either.left(chunkAccess));
     }, (chunkStatus, serverLevel, structureManager, threadedLevelLightEngine, function, chunkAccess) -> {
         if (!chunkAccess.getStatus().isOrAfter(chunkStatus)) {
             if (chunkAccess instanceof ProtoChunk) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 2b262f967b6a2b7f45e58045d5619f59da77840a..8e58df9c8f261e565a5fd8622f875397a8d4adc0 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -571,7 +571,7 @@ public class LevelChunk extends ChunkAccess {
 
     private <T extends BlockEntity> void updateBlockEntityTicker(T blockEntity) {
         BlockState blockState = blockEntity.getBlockState();
-        BlockEntityTicker<T> blockEntityTicker = blockState.getTicker(this.level, blockEntity.getType());
+        BlockEntityTicker<T> blockEntityTicker = (BlockEntityTicker<T>) blockState.getTicker(this.level, blockEntity.getType());
         if (blockEntityTicker == null) {
             this.removeBlockEntityTicker(blockEntity.getBlockPos());
         } else {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index 6dbed27582e96b832059559493361c2efff8bdce..54a7f7e3ed5609df977c95db923e408b94ef1478 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -143,11 +143,11 @@ public class LevelChunkSection {
             }
         }
 
-        BlockCounter 1BlockCounter = new BlockCounter();
-        this.states.count(1BlockCounter);
-        this.nonEmptyBlockCount = (short)1BlockCounter.nonEmptyBlockCount;
-        this.tickingBlockCount = (short)1BlockCounter.tickingBlockCount;
-        this.tickingFluidCount = (short)1BlockCounter.tickingFluidCount;
+        BlockCounter blockCounter = new BlockCounter();
+        this.states.count(blockCounter);
+        this.nonEmptyBlockCount = (short)blockCounter.nonEmptyBlockCount;
+        this.tickingBlockCount = (short)blockCounter.tickingBlockCount;
+        this.tickingFluidCount = (short)blockCounter.tickingFluidCount;
     }
 
     public PalettedContainer<BlockState> getStates() {
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
index a2da78a99a91b78b4efac195d8be236bc48a53bb..bd90f70696178c5aa248f92f581803170adb0591 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -40,7 +40,7 @@ public class PalettedContainer<T> implements PaletteResize<T> {
     }
 
     public static <T> Codec<PalettedContainer<T>> codec(IdMap<T> idMap, Codec<T> codec, PalettedContainer.Strategy strategy, T object) {
-        return RecordCodecBuilder.create((instance) -> instance.group(codec.mapResult(ExtraCodecs.orElsePartial(object)).listOf().fieldOf("palette").forGetter(PalettedContainer.DiscData::paletteEntries), Codec.LONG_STREAM.optionalFieldOf("data").forGetter(PalettedContainer.DiscData::storage)).apply(instance, PalettedContainer.DiscData::new)).comapFlatMap((discData) -> read(idMap, strategy, discData), (palettedContainer) -> palettedContainer.write(idMap, strategy));
+        return RecordCodecBuilder.<DiscData<T>>create((instance) -> instance.group(codec.mapResult(ExtraCodecs.orElsePartial(object)).listOf().fieldOf("palette").forGetter(PalettedContainer.DiscData<T>::paletteEntries), Codec.LONG_STREAM.optionalFieldOf("data").forGetter(PalettedContainer.DiscData<T>::storage)).apply(instance, PalettedContainer.DiscData<T>::new)).comapFlatMap((discData) -> read(idMap, strategy, discData), (palettedContainer) -> palettedContainer.write(idMap, strategy));
     }
 
     public PalettedContainer(IdMap<T> idMap, PalettedContainer.Strategy strategy, PalettedContainer.Configuration<T> configuration, BitStorage bitStorage, List<T> list) {
@@ -256,28 +256,12 @@ public class PalettedContainer<T> implements PaletteResize<T> {
         }
     }
 
-    static record Configuration<T>(Palette.Factory a, int b) {
-        private final Palette.Factory factory;
-        private final int bits;
-
-        Configuration(Palette.Factory factory, int i) {
-            this.factory = factory;
-            this.bits = i;
-        }
-
+    static record Configuration<T>(Palette.Factory factory, int bits) {
         public PalettedContainer.Data<T> createData(IdMap<T> idMap, PaletteResize<T> paletteResize, int i) {
             BitStorage bitStorage = (BitStorage)(this.bits == 0 ? new ZeroBitStorage(i) : new SimpleBitStorage(this.bits, i));
             Palette<T> palette = this.factory.create(this.bits, idMap, paletteResize, List.of());
             return new PalettedContainer.Data<>(this, bitStorage, palette);
         }
-
-        public Palette.Factory factory() {
-            return this.factory;
-        }
-
-        public int bits() {
-            return this.bits;
-        }
     }
 
     @FunctionalInterface
@@ -285,19 +269,10 @@ public class PalettedContainer<T> implements PaletteResize<T> {
         void accept(T var1, int var2);
     }
 
-    static record Data<T>(PalettedContainer.Configuration<T> a, BitStorage b, Palette<T> c) {
-        private final PalettedContainer.Configuration<T> configuration;
-        final BitStorage storage;
-        final Palette<T> palette;
-
-        Data(PalettedContainer.Configuration<T> configuration, BitStorage bitStorage, Palette<T> palette) {
-            this.configuration = configuration;
-            this.storage = bitStorage;
-            this.palette = palette;
-        }
+    static record Data<T>(PalettedContainer.Configuration<T> configuration, BitStorage storage, Palette<T> palette) {
 
         public void copyFrom(Palette<T> palette, BitStorage bitStorage) {
-            for(int i = 0; i < bitStorage.getSize(); ++i) {
+            for (int i = 0; i < bitStorage.getSize(); ++i) {
                 T object = palette.valueFor(bitStorage.get(i));
                 this.storage.set(i, this.palette.idFor(object));
             }
@@ -313,36 +288,9 @@ public class PalettedContainer<T> implements PaletteResize<T> {
             this.palette.write(friendlyByteBuf);
             friendlyByteBuf.writeLongArray(this.storage.getRaw());
         }
-
-        public PalettedContainer.Configuration<T> configuration() {
-            return this.configuration;
-        }
-
-        public BitStorage storage() {
-            return this.storage;
-        }
-
-        public Palette<T> palette() {
-            return this.palette;
-        }
     }
 
-    static record DiscData<T>(List<T> a, Optional<LongStream> b) {
-        private final List<T> paletteEntries;
-        private final Optional<LongStream> storage;
-
-        DiscData(List<T> list, Optional<LongStream> optional) {
-            this.paletteEntries = list;
-            this.storage = optional;
-        }
-
-        public List<T> paletteEntries() {
-            return this.paletteEntries;
-        }
-
-        public Optional<LongStream> storage() {
-            return this.storage;
-        }
+    static record DiscData<T>(List<T> paletteEntries, Optional<LongStream> storage) {
     }
 
     public abstract static class Strategy {
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 7c06dfb80a93b484aa733b059529ab30317621d9..71f5bd2ba1a087203a4a728bc4f0f37062e008f0 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -130,7 +130,7 @@ public class ChunkSerializer {
         ChunkStatus.ChunkType chunkType = getChunkTypeFromTag(compoundTag);
         BlendingData blendingData;
         if (compoundTag.contains("blending_data", 10)) {
-            blendingData = (BlendingData)BlendingData.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("blending_data"))).resultOrPartial(LOGGER::error).orElse(null);
+            blendingData = (BlendingData)BlendingData.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("blending_data"))).resultOrPartial(LOGGER::error).orElse(null);
         } else {
             blendingData = null;
         }
@@ -147,7 +147,7 @@ public class ChunkSerializer {
             chunkAccess = protoChunk;
             protoChunk.setInhabitedTime(l);
             if (compoundTag.contains("below_zero_retrogen", 10)) {
-                BelowZeroRetrogen.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("below_zero_retrogen"))).resultOrPartial(LOGGER::error).ifPresent(protoChunk::setBelowZeroRetrogen);
+                BelowZeroRetrogen.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("below_zero_retrogen"))).resultOrPartial(LOGGER::error).ifPresent(protoChunk::setBelowZeroRetrogen);
             }
 
             ChunkStatus chunkStatus = ChunkStatus.byName(compoundTag.getString("Status"));
@@ -373,13 +373,13 @@ public class ChunkSerializer {
 
             if (listTag2 != null) {
                 for(int i = 0; i < listTag2.size(); ++i) {
-                    CompoundTag compoundTag = listTag2.getCompound(i);
-                    boolean flag = compoundTag.getBoolean("keepPacked");
+                    CompoundTag tag = listTag2.getCompound(i);
+                    boolean flag = tag.getBoolean("keepPacked");
                     if (flag) {
-                        levelChunk.setBlockEntityNbt(compoundTag);
+                        levelChunk.setBlockEntityNbt(tag);
                     } else {
-                        BlockPos blockPos = BlockEntity.getPosFromTag(compoundTag);
-                        BlockEntity blockEntity = BlockEntity.loadStatic(blockPos, levelChunk.getBlockState(blockPos), compoundTag);
+                        BlockPos blockPos = BlockEntity.getPosFromTag(tag);
+                        BlockEntity blockEntity = BlockEntity.loadStatic(blockPos, levelChunk.getBlockState(blockPos), tag);
                         if (blockEntity != null) {
                             levelChunk.setBlockEntity(blockEntity);
                         }
diff --git a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
index 84c67cc60a7440d35e59908d7f1ccb140ab7d1eb..467c41732984dfa6638b0f49974d4632d002568b 100644
--- a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
+++ b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
@@ -42,7 +42,7 @@ public class DimensionType {
     public static final ResourceLocation OVERWORLD_EFFECTS = new ResourceLocation("overworld");
     public static final ResourceLocation NETHER_EFFECTS = new ResourceLocation("the_nether");
     public static final ResourceLocation END_EFFECTS = new ResourceLocation("the_end");
-    public static final Codec<DimensionType> DIRECT_CODEC;
+    public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.<DimensionType>create((instance) -> instance.group(Codec.LONG.optionalFieldOf("fixed_time").xmap((optional) -> (OptionalLong)optional.map(OptionalLong::of).orElseGet(OptionalLong::empty), (optionalLong) -> optionalLong.isPresent() ? Optional.of(optionalLong.getAsLong()) : Optional.empty()).forGetter((dimensionType) -> dimensionType.fixedTime), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange((double)1.0E-5F, 3.0E7D).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange(MIN_Y, MAX_Y).fieldOf("min_y").forGetter(DimensionType::minY), Codec.intRange(16, Y_SIZE).fieldOf("height").forGetter(DimensionType::height), Codec.intRange(0, Y_SIZE).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), TagKey.hashedCodec(Registry.BLOCK_REGISTRY).fieldOf("infiniburn").forGetter((dimensionType) -> dimensionType.infiniburn), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter((dimensionType) -> dimensionType.effectsLocation), Codec.FLOAT.fieldOf("ambient_light").forGetter((dimensionType) -> dimensionType.ambientLight)).apply(instance, DimensionType::new)).comapFlatMap(DimensionType::guardY, Function.identity());
     private static final int MOON_PHASES = 8;
     public static final float[] MOON_BRIGHTNESS_PER_PHASE = new float[]{1.0F, 0.75F, 0.5F, 0.25F, 0.0F, 0.25F, 0.5F, 0.75F};
     public static final ResourceKey<DimensionType> OVERWORLD_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld"));
@@ -274,8 +274,4 @@ public class DimensionType {
     public ResourceLocation effectsLocation() {
         return this.effectsLocation;
     }
-
-    static {
-        DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.LONG.optionalFieldOf("fixed_time").xmap((optional) -> (OptionalLong)optional.map(OptionalLong::of).orElseGet(OptionalLong::empty), (optionalLong) -> optionalLong.isPresent() ? Optional.of(optionalLong.getAsLong()) : Optional.empty()).forGetter((dimensionType) -> dimensionType.fixedTime), Codec.BOOL.fieldOf("has_skylight").forGetter(DimensionType::hasSkyLight), Codec.BOOL.fieldOf("has_ceiling").forGetter(DimensionType::hasCeiling), Codec.BOOL.fieldOf("ultrawarm").forGetter(DimensionType::ultraWarm), Codec.BOOL.fieldOf("natural").forGetter(DimensionType::natural), Codec.doubleRange((double)1.0E-5F, 3.0E7D).fieldOf("coordinate_scale").forGetter(DimensionType::coordinateScale), Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType::piglinSafe), Codec.BOOL.fieldOf("bed_works").forGetter(DimensionType::bedWorks), Codec.BOOL.fieldOf("respawn_anchor_works").forGetter(DimensionType::respawnAnchorWorks), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType::hasRaids), Codec.intRange(MIN_Y, MAX_Y).fieldOf("min_y").forGetter(DimensionType::minY), Codec.intRange(16, Y_SIZE).fieldOf("height").forGetter(DimensionType::height), Codec.intRange(0, Y_SIZE).fieldOf("logical_height").forGetter(DimensionType::logicalHeight), TagKey.hashedCodec(Registry.BLOCK_REGISTRY).fieldOf("infiniburn").forGetter((dimensionType) -> dimensionType.infiniburn), ResourceLocation.CODEC.fieldOf("effects").orElse(OVERWORLD_EFFECTS).forGetter((dimensionType) -> dimensionType.effectsLocation), Codec.FLOAT.fieldOf("ambient_light").forGetter((dimensionType) -> dimensionType.ambientLight)).apply(instance, DimensionType::new)).comapFlatMap(DimensionType::guardY, Function.identity());
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
index cd5fd40ecffdf5ab98232b2cf47de6ec4d07d991..0820ef76bd959536d3d4835fed2deb36133910e1 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
@@ -104,7 +104,7 @@ public class EntitySectionStorage<T extends EntityAccess> {
 
     public LongSet getAllChunksWithExistingSections() {
         LongSet longSet = new LongOpenHashSet();
-        this.sections.keySet().forEach((l) -> longSet.add(getChunkKeyFromSectionKey(l)));
+        this.sections.keySet().forEach((java.util.function.LongConsumer) (l) -> longSet.add(getChunkKeyFromSectionKey(l)));
         return longSet;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
index 36eea12c8ba27654a0d6c739fac0e21c352cc6f3..0e57d738d89ecbb8b3c8c68e9b6f92055e6c6a7f 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
@@ -25,9 +25,9 @@ public class EntityTickList {
                 this.passive.put(entry.getIntKey(), (Entity)entry.getValue());
             }
 
-            Int2ObjectMap<Entity> int2ObjectMap = this.active;
+            Int2ObjectMap<Entity> originalMap = this.active;
             this.active = this.passive;
-            this.passive = int2ObjectMap;
+            this.passive = originalMap;
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
index 74ba6ed677f3e6f5685261abbcb6c7785277d594..6613c48a65069e87370630bda4981f2be29c1410 100644
--- a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -223,7 +223,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
     }
 
     private void processUnloads() {
-        this.chunksToUnload.removeIf((l) -> this.chunkVisibility.get(l) != Visibility.HIDDEN ? true : this.processChunkUnload(l));
+        this.chunksToUnload.removeIf((java.util.function.LongPredicate) (l) -> this.chunkVisibility.get(l) != Visibility.HIDDEN ? true : this.processChunkUnload(l));
     }
 
     private void processPendingLoads() {
@@ -255,7 +255,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
     }
 
     public void autoSave() {
-        this.getAllChunksToSave().forEach((l) -> {
+        this.getAllChunksToSave().forEach((java.util.function.LongConsumer) (l) -> {
             boolean flag = this.chunkVisibility.get(l) == Visibility.HIDDEN;
             if (flag) {
                 this.processChunkUnload(l);
@@ -273,7 +273,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
         while(!longSet.isEmpty()) {
             this.permanentStorage.flush(false);
             this.processPendingLoads();
-            longSet.removeIf((l) -> {
+            longSet.removeIf((java.util.function.LongPredicate) (l) -> {
                 boolean flag = this.chunkVisibility.get(l) == Visibility.HIDDEN;
                 return flag ? this.processChunkUnload(l) : this.storeChunkSections(l, (entityAccess) -> {
                 });
@@ -310,7 +310,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
 
     public void dumpSections(Writer writer) throws IOException {
         CsvOutput csvOutput = CsvOutput.builder().addColumn("x").addColumn("y").addColumn("z").addColumn("visibility").addColumn("load_status").addColumn("entity_count").build(writer);
-        this.sectionStorage.getAllChunksWithExistingSections().forEach((l) -> {
+        this.sectionStorage.getAllChunksWithExistingSections().forEach((java.util.function.LongConsumer) (l) -> {
             PersistentEntitySectionManager.ChunkLoadStatus chunkLoadStatus = (PersistentEntitySectionManager.ChunkLoadStatus)this.chunkLoadStatuses.get(l);
             this.sectionStorage.getExistingSectionPositionsInChunk(l).forEach((lx) -> {
                 EntitySection<T> entitySection = this.sectionStorage.getSection(lx);
diff --git a/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java b/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
index c565b92b29154ace6ab6119aa4ee73aacbf5ede2..7b3cb0b82ed5e543f7593beabd61391854b8ad74 100644
--- a/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
+++ b/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
@@ -26,6 +26,6 @@ public interface PositionSourceType<T extends PositionSource> {
 
     static <T extends PositionSource> void toNetwork(T positionSource, FriendlyByteBuf friendlyByteBuf) {
         friendlyByteBuf.writeResourceLocation(Registry.POSITION_SOURCE_TYPE.getKey(positionSource.getType()));
-        positionSource.getType().write(friendlyByteBuf, positionSource);
+        ((PositionSourceType) positionSource.getType()).write(friendlyByteBuf, positionSource);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/DensityFunction.java b/src/main/java/net/minecraft/world/level/levelgen/DensityFunction.java
index d68d0d1079f5da629a1f71c350e5a77ac405c830..8d4e5fc9b8d530a140a365da170b70761acd93f5 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/DensityFunction.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/DensityFunction.java
@@ -87,28 +87,7 @@ public interface DensityFunction {
         }
     }
 
-    public static record SinglePointContext(int a, int b, int c) implements DensityFunction.FunctionContext {
-        private final int blockX;
-        private final int blockY;
-        private final int blockZ;
-
-        public SinglePointContext(int i, int i2, int i3) {
-            this.blockX = i;
-            this.blockY = i2;
-            this.blockZ = i3;
-        }
-
-        public int blockX() {
-            return this.blockX;
-        }
-
-        public int blockY() {
-            return this.blockY;
-        }
-
-        public int blockZ() {
-            return this.blockZ;
-        }
+    public static record SinglePointContext(int blockX, int blockY, int blockZ) implements DensityFunction.FunctionContext {
     }
 
     public interface Visitor extends Function<DensityFunction, DensityFunction> {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java b/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java
index d7200aadcfec81ef5dd87c90abd4e4426f405dd9..9e7421134d4588e96030ed3b474362b919b3020e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java
@@ -235,21 +235,7 @@ public final class DensityFunctions {
         return add(mul(densityFunction2, densityFunction5), mul(densityFunction3, densityFunction4));
     }
 
-    static record Ap2(DensityFunctions.TwoArgumentSimpleFunction.Type e, DensityFunction f, DensityFunction g, double h, double i) implements DensityFunctions.TwoArgumentSimpleFunction {
-        private final DensityFunctions.TwoArgumentSimpleFunction.Type type;
-        private final DensityFunction argument1;
-        private final DensityFunction argument2;
-        private final double minValue;
-        private final double maxValue;
-
-        Ap2(DensityFunctions.TwoArgumentSimpleFunction.Type type, DensityFunction densityFunction, DensityFunction densityFunction2, double d, double d2) {
-            this.type = type;
-            this.argument1 = densityFunction;
-            this.argument2 = densityFunction2;
-            this.minValue = d;
-            this.maxValue = d2;
-        }
-
+    static record Ap2(DensityFunctions.TwoArgumentSimpleFunction.Type type, DensityFunction argument1, DensityFunction argument2, double minValue, double maxValue) implements DensityFunctions.TwoArgumentSimpleFunction {
         public double compute(DensityFunction.FunctionContext functionContext) {
             double d = this.argument1.compute(functionContext);
             double var10000;
@@ -312,26 +298,6 @@ public final class DensityFunctions {
         public DensityFunction mapAll(DensityFunction.Visitor visitor) {
             return (DensityFunction)visitor.apply(DensityFunctions.TwoArgumentSimpleFunction.create(this.type, this.argument1.mapAll(visitor), this.argument2.mapAll(visitor)));
         }
-
-        public double minValue() {
-            return this.minValue;
-        }
-
-        public double maxValue() {
-            return this.maxValue;
-        }
-
-        public DensityFunctions.TwoArgumentSimpleFunction.Type type() {
-            return this.type;
-        }
-
-        public DensityFunction argument1() {
-            return this.argument1;
-        }
-
-        public DensityFunction argument2() {
-            return this.argument2;
-        }
     }
 
     protected static enum BeardifierMarker implements DensityFunctions.BeardifierOrMarker {
@@ -388,14 +354,9 @@ public final class DensityFunctions {
         }
     }
 
-    static record BlendDensity(DensityFunction a) implements DensityFunctions.TransformerWithContext {
-        private final DensityFunction input;
+    static record BlendDensity(DensityFunction input) implements DensityFunctions.TransformerWithContext {
         static final Codec<DensityFunctions.BlendDensity> CODEC = DensityFunctions.singleFunctionArgumentCodec(DensityFunctions.BlendDensity::new, DensityFunctions.BlendDensity::input);
 
-        BlendDensity(DensityFunction densityFunction) {
-            this.input = densityFunction;
-        }
-
         public double transform(DensityFunction.FunctionContext functionContext, double d) {
             return functionContext.getBlender().blendDensity(functionContext, d);
         }
@@ -415,10 +376,6 @@ public final class DensityFunctions {
         public Codec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction input() {
-            return this.input;
-        }
     }
 
     protected static enum BlendOffset implements DensityFunction.SimpleFunction {
@@ -447,19 +404,10 @@ public final class DensityFunctions {
         }
     }
 
-    protected static record Clamp(DensityFunction e, double f, double g) implements DensityFunctions.PureTransformer {
-        private final DensityFunction input;
-        private final double minValue;
-        private final double maxValue;
+    protected static record Clamp(DensityFunction input, double minValue, double maxValue) implements DensityFunctions.PureTransformer {
         private static final MapCodec<DensityFunctions.Clamp> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.DIRECT_CODEC.fieldOf("input").forGetter(DensityFunctions.Clamp::input), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("min").forGetter(DensityFunctions.Clamp::minValue), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("max").forGetter(DensityFunctions.Clamp::maxValue)).apply(instance, DensityFunctions.Clamp::new));
         public static final Codec<DensityFunctions.Clamp> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
-        protected Clamp(DensityFunction densityFunction, double d, double d2) {
-            this.input = densityFunction;
-            this.minValue = d;
-            this.maxValue = d2;
-        }
-
         public double transform(double d) {
             return Mth.clamp(d, this.minValue, this.maxValue);
         }
@@ -471,29 +419,12 @@ public final class DensityFunctions {
         public Codec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction input() {
-            return this.input;
-        }
-
-        public double minValue() {
-            return this.minValue;
-        }
-
-        public double maxValue() {
-            return this.maxValue;
-        }
     }
 
-    static record Constant(double a) implements DensityFunction.SimpleFunction {
-        final double value;
+    static record Constant(double value) implements DensityFunction.SimpleFunction {
         static final Codec<DensityFunctions.Constant> CODEC = DensityFunctions.singleArgumentCodec(DensityFunctions.NOISE_VALUE_CODEC, DensityFunctions.Constant::new, DensityFunctions.Constant::value);
         static final DensityFunctions.Constant ZERO = new DensityFunctions.Constant(0.0D);
 
-        Constant(double d) {
-            this.value = d;
-        }
-
         public double compute(DensityFunction.FunctionContext functionContext) {
             return this.value;
         }
@@ -513,10 +444,6 @@ public final class DensityFunctions {
         public Codec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public double value() {
-            return this.value;
-        }
     }
 
     protected static final class EndIslandDensityFunction implements DensityFunction.SimpleFunction {
@@ -546,13 +473,7 @@ public final class DensityFunctions {
         }
     }
 
-    protected static record HolderHolder(Holder<DensityFunction> a) implements DensityFunction {
-        private final Holder<DensityFunction> function;
-
-        protected HolderHolder(Holder<DensityFunction> holder) {
-            this.function = holder;
-        }
-
+    protected static record HolderHolder(Holder<DensityFunction> function) implements DensityFunction {
         public double compute(DensityFunction.FunctionContext functionContext) {
             return this.function.value().compute(functionContext);
         }
@@ -576,25 +497,9 @@ public final class DensityFunctions {
         public Codec<? extends DensityFunction> codec() {
             throw new UnsupportedOperationException("Calling .codec() on HolderHolder");
         }
-
-        public Holder<DensityFunction> function() {
-            return this.function;
-        }
     }
 
-    protected static record Mapped(DensityFunctions.Mapped.Type a, DensityFunction e, double f, double g) implements DensityFunctions.PureTransformer {
-        private final DensityFunctions.Mapped.Type type;
-        private final DensityFunction input;
-        private final double minValue;
-        private final double maxValue;
-
-        protected Mapped(DensityFunctions.Mapped.Type type, DensityFunction densityFunction, double d, double d2) {
-            this.type = type;
-            this.input = densityFunction;
-            this.minValue = d;
-            this.maxValue = d2;
-        }
-
+    protected static record Mapped(DensityFunctions.Mapped.Type type, DensityFunction input, double minValue, double maxValue) implements DensityFunctions.PureTransformer {
         public static DensityFunctions.Mapped create(DensityFunctions.Mapped.Type type, DensityFunction densityFunction) {
             double d = densityFunction.minValue();
             double d2 = transform(type, d);
@@ -643,22 +548,6 @@ public final class DensityFunctions {
             return this.type.codec;
         }
 
-        public DensityFunctions.Mapped.Type type() {
-            return this.type;
-        }
-
-        public DensityFunction input() {
-            return this.input;
-        }
-
-        public double minValue() {
-            return this.minValue;
-        }
-
-        public double maxValue() {
-            return this.maxValue;
-        }
-
         static enum Type implements StringRepresentable {
             ABS("abs"),
             SQUARE("square"),
@@ -680,15 +569,7 @@ public final class DensityFunctions {
         }
     }
 
-    protected static record Marker(DensityFunctions.Marker.Type a, DensityFunction e) implements DensityFunctions.MarkerOrMarked {
-        private final DensityFunctions.Marker.Type type;
-        private final DensityFunction wrapped;
-
-        protected Marker(DensityFunctions.Marker.Type type, DensityFunction densityFunction) {
-            this.type = type;
-            this.wrapped = densityFunction;
-        }
-
+    protected static record Marker(DensityFunctions.Marker.Type type, DensityFunction wrapped) implements DensityFunctions.MarkerOrMarked {
         public double compute(DensityFunction.FunctionContext functionContext) {
             return this.wrapped.compute(functionContext);
         }
@@ -709,14 +590,6 @@ public final class DensityFunctions {
             return this.wrapped.maxValue();
         }
 
-        public DensityFunctions.Marker.Type type() {
-            return this.type;
-        }
-
-        public DensityFunction wrapped() {
-            return this.wrapped;
-        }
-
         static enum Type implements StringRepresentable {
             Interpolated("interpolated"),
             FlatCache("flat_cache"),
@@ -747,21 +620,7 @@ public final class DensityFunctions {
         }
     }
 
-    static record MulOrAdd(DensityFunctions.MulOrAdd.Type e, DensityFunction f, double g, double h, double i) implements DensityFunctions.TwoArgumentSimpleFunction, DensityFunctions.PureTransformer {
-        private final DensityFunctions.MulOrAdd.Type specificType;
-        private final DensityFunction input;
-        private final double minValue;
-        private final double maxValue;
-        private final double argument;
-
-        MulOrAdd(DensityFunctions.MulOrAdd.Type type, DensityFunction densityFunction, double d, double d2, double d3) {
-            this.specificType = type;
-            this.input = densityFunction;
-            this.minValue = d;
-            this.maxValue = d2;
-            this.argument = d3;
-        }
-
+    static record MulOrAdd(DensityFunctions.MulOrAdd.Type specificType, DensityFunction input, double minValue, double maxValue, double argument) implements DensityFunctions.TwoArgumentSimpleFunction, DensityFunctions.PureTransformer {
         public DensityFunctions.TwoArgumentSimpleFunction.Type type() {
             return this.specificType == DensityFunctions.MulOrAdd.Type.MUL ? DensityFunctions.TwoArgumentSimpleFunction.Type.MUL : DensityFunctions.TwoArgumentSimpleFunction.Type.ADD;
         }
@@ -810,50 +669,16 @@ public final class DensityFunctions {
             return new DensityFunctions.MulOrAdd(this.specificType, densityFunction, d3, d4, this.argument);
         }
 
-        public DensityFunctions.MulOrAdd.Type specificType() {
-            return this.specificType;
-        }
-
-        public DensityFunction input() {
-            return this.input;
-        }
-
-        public double minValue() {
-            return this.minValue;
-        }
-
-        public double maxValue() {
-            return this.maxValue;
-        }
-
-        public double argument() {
-            return this.argument;
-        }
-
         static enum Type {
             MUL,
             ADD;
         }
     }
 
-    protected static record Noise(Holder<NormalNoise.NoiseParameters> f, @Nullable NormalNoise g, double h, double i) implements DensityFunction.SimpleFunction {
-        private final Holder<NormalNoise.NoiseParameters> noiseData;
-        @Nullable
-        private final NormalNoise noise;
-        /** @deprecated */
-        @Deprecated
-        private final double xzScale;
-        private final double yScale;
-        public static final MapCodec<DensityFunctions.Noise> DATA_CODEC;
+    protected static record Noise(Holder<NormalNoise.NoiseParameters> noiseData, @Nullable NormalNoise noise, @Deprecated double xzScale, double yScale) implements DensityFunction.SimpleFunction {
+        public static final MapCodec<DensityFunctions.Noise> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(NormalNoise.NoiseParameters.CODEC.fieldOf("noise").forGetter(DensityFunctions.Noise::noiseData), Codec.DOUBLE.fieldOf("xz_scale").forGetter(DensityFunctions.Noise::xzScale), Codec.DOUBLE.fieldOf("y_scale").forGetter(DensityFunctions.Noise::yScale)).apply(instance, DensityFunctions.Noise::createUnseeded));
         public static final Codec<DensityFunctions.Noise> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
-        protected Noise(Holder<NormalNoise.NoiseParameters> holder, @Nullable NormalNoise normalNoise, @Deprecated double d, double d2) {
-            this.noiseData = holder;
-            this.noise = normalNoise;
-            this.xzScale = d;
-            this.yScale = d2;
-        }
-
         public static DensityFunctions.Noise createUnseeded(Holder<NormalNoise.NoiseParameters> holder, @Deprecated double d, double d2) {
             return new DensityFunctions.Noise(holder, (NormalNoise)null, d, d2);
         }
@@ -873,29 +698,6 @@ public final class DensityFunctions {
         public Codec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public Holder<NormalNoise.NoiseParameters> noiseData() {
-            return this.noiseData;
-        }
-
-        @Nullable
-        public NormalNoise noise() {
-            return this.noise;
-        }
-
-        /** @deprecated */
-        @Deprecated
-        public double xzScale() {
-            return this.xzScale;
-        }
-
-        public double yScale() {
-            return this.yScale;
-        }
-
-        static {
-            DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(NormalNoise.NoiseParameters.CODEC.fieldOf("noise").forGetter(DensityFunctions.Noise::noiseData), Codec.DOUBLE.fieldOf("xz_scale").forGetter(DensityFunctions.Noise::xzScale), Codec.DOUBLE.fieldOf("y_scale").forGetter(DensityFunctions.Noise::yScale)).apply(instance, DensityFunctions.Noise::createUnseeded));
-        }
     }
 
     interface PureTransformer extends DensityFunction {
@@ -917,23 +719,10 @@ public final class DensityFunctions {
         double transform(double var1);
     }
 
-    static record RangeChoice(DensityFunction f, double g, double h, DensityFunction i, DensityFunction j) implements DensityFunction {
-        private final DensityFunction input;
-        private final double minInclusive;
-        private final double maxExclusive;
-        private final DensityFunction whenInRange;
-        private final DensityFunction whenOutOfRange;
+    static record RangeChoice(DensityFunction input, double minInclusive, double maxExclusive, DensityFunction whenInRange, DensityFunction whenOutOfRange) implements DensityFunction {
         public static final MapCodec<DensityFunctions.RangeChoice> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.HOLDER_HELPER_CODEC.fieldOf("input").forGetter(DensityFunctions.RangeChoice::input), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("min_inclusive").forGetter(DensityFunctions.RangeChoice::minInclusive), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("max_exclusive").forGetter(DensityFunctions.RangeChoice::maxExclusive), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("when_in_range").forGetter(DensityFunctions.RangeChoice::whenInRange), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("when_out_of_range").forGetter(DensityFunctions.RangeChoice::whenOutOfRange)).apply(instance, DensityFunctions.RangeChoice::new));
         public static final Codec<DensityFunctions.RangeChoice> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
-        RangeChoice(DensityFunction densityFunction, double d, double d2, DensityFunction densityFunction2, DensityFunction densityFunction3) {
-            this.input = densityFunction;
-            this.minInclusive = d;
-            this.maxExclusive = d2;
-            this.whenInRange = densityFunction2;
-            this.whenOutOfRange = densityFunction3;
-        }
-
         public double compute(DensityFunction.FunctionContext functionContext) {
             double d = this.input.compute(functionContext);
             return d >= this.minInclusive && d < this.maxExclusive ? this.whenInRange.compute(functionContext) : this.whenOutOfRange.compute(functionContext);
@@ -968,39 +757,11 @@ public final class DensityFunctions {
         public Codec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction input() {
-            return this.input;
-        }
-
-        public double minInclusive() {
-            return this.minInclusive;
-        }
-
-        public double maxExclusive() {
-            return this.maxExclusive;
-        }
-
-        public DensityFunction whenInRange() {
-            return this.whenInRange;
-        }
-
-        public DensityFunction whenOutOfRange() {
-            return this.whenOutOfRange;
-        }
     }
 
-    static record Shift(Holder<NormalNoise.NoiseParameters> a, @Nullable NormalNoise e) implements DensityFunctions.ShiftNoise {
-        private final Holder<NormalNoise.NoiseParameters> noiseData;
-        @Nullable
-        private final NormalNoise offsetNoise;
+    static record Shift(Holder<NormalNoise.NoiseParameters> noiseData, @Nullable NormalNoise offsetNoise) implements DensityFunctions.ShiftNoise {
         static final Codec<DensityFunctions.Shift> CODEC = DensityFunctions.singleArgumentCodec(NormalNoise.NoiseParameters.CODEC, (holder) -> new DensityFunctions.Shift(holder, (NormalNoise)null), DensityFunctions.Shift::noiseData);
 
-        Shift(Holder<NormalNoise.NoiseParameters> holder, @Nullable NormalNoise normalNoise) {
-            this.noiseData = holder;
-            this.offsetNoise = normalNoise;
-        }
-
         public double compute(DensityFunction.FunctionContext functionContext) {
             return this.compute((double)functionContext.blockX(), (double)functionContext.blockY(), (double)functionContext.blockZ());
         }
@@ -1023,17 +784,9 @@ public final class DensityFunctions {
         }
     }
 
-    protected static record ShiftA(Holder<NormalNoise.NoiseParameters> a, @Nullable NormalNoise e) implements DensityFunctions.ShiftNoise {
-        private final Holder<NormalNoise.NoiseParameters> noiseData;
-        @Nullable
-        private final NormalNoise offsetNoise;
+    protected static record ShiftA(Holder<NormalNoise.NoiseParameters> noiseData, @Nullable NormalNoise offsetNoise) implements DensityFunctions.ShiftNoise {
         static final Codec<DensityFunctions.ShiftA> CODEC = DensityFunctions.singleArgumentCodec(NormalNoise.NoiseParameters.CODEC, (holder) -> new DensityFunctions.ShiftA(holder, (NormalNoise)null), DensityFunctions.ShiftA::noiseData);
 
-        protected ShiftA(Holder<NormalNoise.NoiseParameters> holder, @Nullable NormalNoise normalNoise) {
-            this.noiseData = holder;
-            this.offsetNoise = normalNoise;
-        }
-
         public double compute(DensityFunction.FunctionContext functionContext) {
             return this.compute((double)functionContext.blockX(), 0.0D, (double)functionContext.blockZ());
         }
@@ -1045,28 +798,11 @@ public final class DensityFunctions {
         public Codec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public Holder<NormalNoise.NoiseParameters> noiseData() {
-            return this.noiseData;
-        }
-
-        @Nullable
-        public NormalNoise offsetNoise() {
-            return this.offsetNoise;
-        }
     }
 
-    protected static record ShiftB(Holder<NormalNoise.NoiseParameters> a, @Nullable NormalNoise e) implements DensityFunctions.ShiftNoise {
-        private final Holder<NormalNoise.NoiseParameters> noiseData;
-        @Nullable
-        private final NormalNoise offsetNoise;
+    protected static record ShiftB(Holder<NormalNoise.NoiseParameters> noiseData, @Nullable NormalNoise offsetNoise) implements DensityFunctions.ShiftNoise {
         static final Codec<DensityFunctions.ShiftB> CODEC = DensityFunctions.singleArgumentCodec(NormalNoise.NoiseParameters.CODEC, (holder) -> new DensityFunctions.ShiftB(holder, (NormalNoise)null), DensityFunctions.ShiftB::noiseData);
 
-        protected ShiftB(Holder<NormalNoise.NoiseParameters> holder, @Nullable NormalNoise normalNoise) {
-            this.noiseData = holder;
-            this.offsetNoise = normalNoise;
-        }
-
         public double compute(DensityFunction.FunctionContext functionContext) {
             return this.compute((double)functionContext.blockZ(), (double)functionContext.blockX(), 0.0D);
         }
@@ -1078,15 +814,6 @@ public final class DensityFunctions {
         public Codec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public Holder<NormalNoise.NoiseParameters> noiseData() {
-            return this.noiseData;
-        }
-
-        @Nullable
-        public NormalNoise offsetNoise() {
-            return this.offsetNoise;
-        }
     }
 
     interface ShiftNoise extends DensityFunction.SimpleFunction {
@@ -1112,28 +839,10 @@ public final class DensityFunctions {
         DensityFunctions.ShiftNoise withNewNoise(NormalNoise var1);
     }
 
-    protected static record ShiftedNoise(DensityFunction e, DensityFunction f, DensityFunction g, double h, double i, Holder<NormalNoise.NoiseParameters> j, @Nullable NormalNoise k) implements DensityFunction {
-        private final DensityFunction shiftX;
-        private final DensityFunction shiftY;
-        private final DensityFunction shiftZ;
-        private final double xzScale;
-        private final double yScale;
-        private final Holder<NormalNoise.NoiseParameters> noiseData;
-        @Nullable
-        private final NormalNoise noise;
-        private static final MapCodec<DensityFunctions.ShiftedNoise> DATA_CODEC;
+    protected static record ShiftedNoise(DensityFunction shiftX, DensityFunction shiftY, DensityFunction shiftZ, double xzScale, double yScale, Holder<NormalNoise.NoiseParameters> noiseData, @Nullable NormalNoise noise) implements DensityFunction {
+        private static final MapCodec<DensityFunctions.ShiftedNoise> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.HOLDER_HELPER_CODEC.fieldOf("shift_x").forGetter(DensityFunctions.ShiftedNoise::shiftX), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("shift_y").forGetter(DensityFunctions.ShiftedNoise::shiftY), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("shift_z").forGetter(DensityFunctions.ShiftedNoise::shiftZ), Codec.DOUBLE.fieldOf("xz_scale").forGetter(DensityFunctions.ShiftedNoise::xzScale), Codec.DOUBLE.fieldOf("y_scale").forGetter(DensityFunctions.ShiftedNoise::yScale), NormalNoise.NoiseParameters.CODEC.fieldOf("noise").forGetter(DensityFunctions.ShiftedNoise::noiseData)).apply(instance, DensityFunctions.ShiftedNoise::createUnseeded));
         public static final Codec<DensityFunctions.ShiftedNoise> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
-        protected ShiftedNoise(DensityFunction densityFunction, DensityFunction densityFunction2, DensityFunction densityFunction3, double d, double d2, Holder<NormalNoise.NoiseParameters> holder, @Nullable NormalNoise normalNoise) {
-            this.shiftX = densityFunction;
-            this.shiftY = densityFunction2;
-            this.shiftZ = densityFunction3;
-            this.xzScale = d;
-            this.yScale = d2;
-            this.noiseData = holder;
-            this.noise = normalNoise;
-        }
-
         public static DensityFunctions.ShiftedNoise createUnseeded(DensityFunction densityFunction, DensityFunction densityFunction2, DensityFunction densityFunction3, double d, double d2, Holder<NormalNoise.NoiseParameters> holder) {
             return new DensityFunctions.ShiftedNoise(densityFunction, densityFunction2, densityFunction3, d, d2, holder, (NormalNoise)null);
         }
@@ -1168,52 +877,11 @@ public final class DensityFunctions {
         public Codec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction shiftX() {
-            return this.shiftX;
-        }
-
-        public DensityFunction shiftY() {
-            return this.shiftY;
-        }
-
-        public DensityFunction shiftZ() {
-            return this.shiftZ;
-        }
-
-        public double xzScale() {
-            return this.xzScale;
-        }
-
-        public double yScale() {
-            return this.yScale;
-        }
-
-        public Holder<NormalNoise.NoiseParameters> noiseData() {
-            return this.noiseData;
-        }
-
-        @Nullable
-        public NormalNoise noise() {
-            return this.noise;
-        }
-
-        static {
-            DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.HOLDER_HELPER_CODEC.fieldOf("shift_x").forGetter(DensityFunctions.ShiftedNoise::shiftX), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("shift_y").forGetter(DensityFunctions.ShiftedNoise::shiftY), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("shift_z").forGetter(DensityFunctions.ShiftedNoise::shiftZ), Codec.DOUBLE.fieldOf("xz_scale").forGetter(DensityFunctions.ShiftedNoise::xzScale), Codec.DOUBLE.fieldOf("y_scale").forGetter(DensityFunctions.ShiftedNoise::yScale), NormalNoise.NoiseParameters.CODEC.fieldOf("noise").forGetter(DensityFunctions.ShiftedNoise::noiseData)).apply(instance, DensityFunctions.ShiftedNoise::createUnseeded));
-        }
     }
 
-    protected static record Slide(@Nullable NoiseSettings e, DensityFunction f) implements DensityFunctions.TransformerWithContext {
-        @Nullable
-        private final NoiseSettings settings;
-        private final DensityFunction input;
+    protected static record Slide(@Nullable NoiseSettings settings, DensityFunction input) implements DensityFunctions.TransformerWithContext {
         public static final Codec<DensityFunctions.Slide> CODEC = DensityFunctions.singleFunctionArgumentCodec((densityFunction) -> new DensityFunctions.Slide((NoiseSettings)null, densityFunction), DensityFunctions.Slide::input);
 
-        protected Slide(@Nullable NoiseSettings noiseSettings, DensityFunction densityFunction) {
-            this.settings = noiseSettings;
-            this.input = densityFunction;
-        }
-
         public double transform(DensityFunction.FunctionContext functionContext, double d) {
             return this.settings == null ? d : NoiseRouterData.applySlide(this.settings, d, (double)functionContext.blockY());
         }
@@ -1233,30 +901,12 @@ public final class DensityFunctions {
         public Codec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        @Nullable
-        public NoiseSettings settings() {
-            return this.settings;
-        }
-
-        public DensityFunction input() {
-            return this.input;
-        }
     }
 
-    public static record Spline(CubicSpline<TerrainShaper.PointCustom> e, double f, double g) implements DensityFunction {
-        private final CubicSpline<TerrainShaper.PointCustom> spline;
-        private final double minValue;
-        private final double maxValue;
+    public static record Spline(CubicSpline<TerrainShaper.PointCustom> spline, double minValue, double maxValue) implements DensityFunction {
         private static final MapCodec<DensityFunctions.Spline> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(TerrainShaper.SPLINE_CUSTOM_CODEC.fieldOf("spline").forGetter(DensityFunctions.Spline::spline), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("min_value").forGetter(DensityFunctions.Spline::minValue), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("max_value").forGetter(DensityFunctions.Spline::maxValue)).apply(instance, DensityFunctions.Spline::new));
         public static final Codec<DensityFunctions.Spline> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
-        public Spline(CubicSpline<TerrainShaper.PointCustom> cubicSpline, double d, double d2) {
-            this.spline = cubicSpline;
-            this.minValue = d;
-            this.maxValue = d2;
-        }
-
         public double compute(DensityFunction.FunctionContext functionContext) {
             return Mth.clamp((double)this.spline.apply(TerrainShaper.makePoint(functionContext)), this.minValue, this.maxValue);
         }
@@ -1298,28 +948,10 @@ public final class DensityFunctions {
 
     /** @deprecated */
     @Deprecated
-    public static record TerrainShaperSpline(DensityFunction e, DensityFunction f, DensityFunction g, @Nullable TerrainShaper h, DensityFunctions.TerrainShaperSpline.SplineType i, double j, double k) implements DensityFunction {
-        private final DensityFunction continentalness;
-        private final DensityFunction erosion;
-        private final DensityFunction weirdness;
-        @Nullable
-        private final TerrainShaper shaper;
-        private final DensityFunctions.TerrainShaperSpline.SplineType spline;
-        private final double minValue;
-        private final double maxValue;
-        private static final MapCodec<DensityFunctions.TerrainShaperSpline> DATA_CODEC;
+    public static record TerrainShaperSpline(DensityFunction continentalness, DensityFunction erosion, DensityFunction weirdness, @Nullable TerrainShaper shaper, DensityFunctions.TerrainShaperSpline.SplineType spline, double minValue, double maxValue) implements DensityFunction {
+        private static final MapCodec<DensityFunctions.TerrainShaperSpline> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.HOLDER_HELPER_CODEC.fieldOf("continentalness").forGetter(DensityFunctions.TerrainShaperSpline::continentalness), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("erosion").forGetter(DensityFunctions.TerrainShaperSpline::erosion), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("weirdness").forGetter(DensityFunctions.TerrainShaperSpline::weirdness), DensityFunctions.TerrainShaperSpline.SplineType.CODEC.fieldOf("spline").forGetter(DensityFunctions.TerrainShaperSpline::spline), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("min_value").forGetter(DensityFunctions.TerrainShaperSpline::minValue), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("max_value").forGetter(DensityFunctions.TerrainShaperSpline::maxValue)).apply(instance, DensityFunctions.TerrainShaperSpline::createUnseeded));
         public static final Codec<DensityFunctions.TerrainShaperSpline> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
-        public TerrainShaperSpline(DensityFunction densityFunction, DensityFunction densityFunction2, DensityFunction densityFunction3, @Nullable TerrainShaper terrainShaper, DensityFunctions.TerrainShaperSpline.SplineType splineType, double d, double d2) {
-            this.continentalness = densityFunction;
-            this.erosion = densityFunction2;
-            this.weirdness = densityFunction3;
-            this.shaper = terrainShaper;
-            this.spline = splineType;
-            this.minValue = d;
-            this.maxValue = d2;
-        }
-
         public static DensityFunctions.TerrainShaperSpline createUnseeded(DensityFunction densityFunction, DensityFunction densityFunction2, DensityFunction densityFunction3, DensityFunctions.TerrainShaperSpline.SplineType splineType, double d, double d2) {
             return new DensityFunctions.TerrainShaperSpline(densityFunction, densityFunction2, densityFunction3, (TerrainShaper)null, splineType, d, d2);
         }
@@ -1343,39 +975,6 @@ public final class DensityFunctions {
             return CODEC;
         }
 
-        public DensityFunction continentalness() {
-            return this.continentalness;
-        }
-
-        public DensityFunction erosion() {
-            return this.erosion;
-        }
-
-        public DensityFunction weirdness() {
-            return this.weirdness;
-        }
-
-        @Nullable
-        public TerrainShaper shaper() {
-            return this.shaper;
-        }
-
-        public DensityFunctions.TerrainShaperSpline.SplineType spline() {
-            return this.spline;
-        }
-
-        public double minValue() {
-            return this.minValue;
-        }
-
-        public double maxValue() {
-            return this.maxValue;
-        }
-
-        static {
-            DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.HOLDER_HELPER_CODEC.fieldOf("continentalness").forGetter(DensityFunctions.TerrainShaperSpline::continentalness), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("erosion").forGetter(DensityFunctions.TerrainShaperSpline::erosion), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("weirdness").forGetter(DensityFunctions.TerrainShaperSpline::weirdness), DensityFunctions.TerrainShaperSpline.SplineType.CODEC.fieldOf("spline").forGetter(DensityFunctions.TerrainShaperSpline::spline), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("min_value").forGetter(DensityFunctions.TerrainShaperSpline::minValue), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("max_value").forGetter(DensityFunctions.TerrainShaperSpline::maxValue)).apply(instance, DensityFunctions.TerrainShaperSpline::createUnseeded));
-        }
-
         interface Spline {
             float apply(TerrainShaper var1, TerrainShaper.Point var2);
         }
@@ -1517,22 +1116,10 @@ public final class DensityFunctions {
         }
     }
 
-    protected static record WeirdScaledSampler(DensityFunction e, Holder<NormalNoise.NoiseParameters> f, @Nullable NormalNoise g, DensityFunctions.WeirdScaledSampler.RarityValueMapper h) implements DensityFunctions.TransformerWithContext {
-        private final DensityFunction input;
-        private final Holder<NormalNoise.NoiseParameters> noiseData;
-        @Nullable
-        private final NormalNoise noise;
-        private final DensityFunctions.WeirdScaledSampler.RarityValueMapper rarityValueMapper;
-        private static final MapCodec<DensityFunctions.WeirdScaledSampler> DATA_CODEC;
+    protected static record WeirdScaledSampler(DensityFunction input, Holder<NormalNoise.NoiseParameters> noiseData, @Nullable NormalNoise noise, DensityFunctions.WeirdScaledSampler.RarityValueMapper rarityValueMapper) implements DensityFunctions.TransformerWithContext {
+        private static final MapCodec<DensityFunctions.WeirdScaledSampler> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.HOLDER_HELPER_CODEC.fieldOf("input").forGetter(DensityFunctions.WeirdScaledSampler::input), NormalNoise.NoiseParameters.CODEC.fieldOf("noise").forGetter(DensityFunctions.WeirdScaledSampler::noiseData), DensityFunctions.WeirdScaledSampler.RarityValueMapper.CODEC.fieldOf("rarity_value_mapper").forGetter(DensityFunctions.WeirdScaledSampler::rarityValueMapper)).apply(instance, DensityFunctions.WeirdScaledSampler::createUnseeded));
         public static final Codec<DensityFunctions.WeirdScaledSampler> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
-        protected WeirdScaledSampler(DensityFunction densityFunction, Holder<NormalNoise.NoiseParameters> holder, @Nullable NormalNoise normalNoise, DensityFunctions.WeirdScaledSampler.RarityValueMapper rarityValueMapper) {
-            this.input = densityFunction;
-            this.noiseData = holder;
-            this.noise = normalNoise;
-            this.rarityValueMapper = rarityValueMapper;
-        }
-
         public static DensityFunctions.WeirdScaledSampler createUnseeded(DensityFunction densityFunction, Holder<NormalNoise.NoiseParameters> holder, DensityFunctions.WeirdScaledSampler.RarityValueMapper rarityValueMapper) {
             return new DensityFunctions.WeirdScaledSampler(densityFunction, holder, (NormalNoise)null, rarityValueMapper);
         }
@@ -1563,27 +1150,6 @@ public final class DensityFunctions {
             return CODEC;
         }
 
-        public DensityFunction input() {
-            return this.input;
-        }
-
-        public Holder<NormalNoise.NoiseParameters> noiseData() {
-            return this.noiseData;
-        }
-
-        @Nullable
-        public NormalNoise noise() {
-            return this.noise;
-        }
-
-        public DensityFunctions.WeirdScaledSampler.RarityValueMapper rarityValueMapper() {
-            return this.rarityValueMapper;
-        }
-
-        static {
-            DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.HOLDER_HELPER_CODEC.fieldOf("input").forGetter(DensityFunctions.WeirdScaledSampler::input), NormalNoise.NoiseParameters.CODEC.fieldOf("noise").forGetter(DensityFunctions.WeirdScaledSampler::noiseData), DensityFunctions.WeirdScaledSampler.RarityValueMapper.CODEC.fieldOf("rarity_value_mapper").forGetter(DensityFunctions.WeirdScaledSampler::rarityValueMapper)).apply(instance, DensityFunctions.WeirdScaledSampler::createUnseeded));
-        }
-
         public static enum RarityValueMapper implements StringRepresentable {
             TYPE1("type_1", NoiseRouterData.QuantizedSpaghettiRarity::getSpaghettiRarity3D, 2.0D),
             TYPE2("type_2", NoiseRouterData.QuantizedSpaghettiRarity::getSphaghettiRarity2D, 3.0D);
@@ -1606,21 +1172,10 @@ public final class DensityFunctions {
         }
     }
 
-    static record YClampedGradient(int e, int f, double g, double h) implements DensityFunction.SimpleFunction {
-        private final int fromY;
-        private final int toY;
-        private final double fromValue;
-        private final double toValue;
+    static record YClampedGradient(int fromY, int toY, double fromValue, double toValue) implements DensityFunction.SimpleFunction {
         private static final MapCodec<DensityFunctions.YClampedGradient> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.intRange(DimensionType.MIN_Y * 2, DimensionType.MAX_Y * 2).fieldOf("from_y").forGetter(DensityFunctions.YClampedGradient::fromY), Codec.intRange(DimensionType.MIN_Y * 2, DimensionType.MAX_Y * 2).fieldOf("to_y").forGetter(DensityFunctions.YClampedGradient::toY), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("from_value").forGetter(DensityFunctions.YClampedGradient::fromValue), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("to_value").forGetter(DensityFunctions.YClampedGradient::toValue)).apply(instance, DensityFunctions.YClampedGradient::new));
         public static final Codec<DensityFunctions.YClampedGradient> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
-        YClampedGradient(int i, int i2, double d, double d2) {
-            this.fromY = i;
-            this.toY = i2;
-            this.fromValue = d;
-            this.toValue = d2;
-        }
-
         public double compute(DensityFunction.FunctionContext functionContext) {
             return Mth.clampedMap((double)functionContext.blockY(), (double)this.fromY, (double)this.toY, this.fromValue, this.toValue);
         }
@@ -1636,21 +1191,5 @@ public final class DensityFunctions {
         public Codec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public int fromY() {
-            return this.fromY;
-        }
-
-        public int toY() {
-            return this.toY;
-        }
-
-        public double fromValue() {
-            return this.fromValue;
-        }
-
-        public double toValue() {
-            return this.toValue;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
index 601ddb5758e2df264119f79b586d0b9aceb37e35..bc5895d6220787ac4c488347c8db59f81903befb 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
@@ -13,18 +13,22 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.synth.NormalNoise;
 
-public record NoiseGeneratorSettings(NoiseSettings j, BlockState k, BlockState l, NoiseRouterWithOnlyNoises m, SurfaceRules.RuleSource n, int o, boolean p, boolean q, boolean r, boolean s) {
-    private final NoiseSettings noiseSettings;
-    private final BlockState defaultBlock;
-    private final BlockState defaultFluid;
-    private final NoiseRouterWithOnlyNoises noiseRouter;
-    private final SurfaceRules.RuleSource surfaceRule;
-    private final int seaLevel;
-    private final boolean disableMobGeneration;
-    private final boolean aquifersEnabled;
-    private final boolean oreVeinsEnabled;
-    private final boolean useLegacyRandomSource;
-    public static final Codec<NoiseGeneratorSettings> DIRECT_CODEC;
+public record NoiseGeneratorSettings(NoiseSettings noiseSettings,
+                                     BlockState defaultBlock,
+                                     BlockState defaultFluid,
+                                     NoiseRouterWithOnlyNoises noiseRouter,
+                                     SurfaceRules.RuleSource surfaceRule,
+                                     int seaLevel,
+                                     boolean disableMobGeneration,
+                                     boolean aquifersEnabled,
+                                     boolean oreVeinsEnabled,
+                                     boolean useLegacyRandomSource) {
+    public static final Codec<NoiseGeneratorSettings> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(NoiseSettings.CODEC.fieldOf("noise").forGetter(NoiseGeneratorSettings::noiseSettings), BlockState.CODEC.fieldOf("default_block").forGetter(NoiseGeneratorSettings::defaultBlock), BlockState.CODEC.fieldOf("default_fluid").forGetter(NoiseGeneratorSettings::defaultFluid), NoiseRouterWithOnlyNoises.CODEC.fieldOf("noise_router").forGetter(NoiseGeneratorSettings::noiseRouter), SurfaceRules.RuleSource.CODEC.fieldOf("surface_rule").forGetter(NoiseGeneratorSettings::surfaceRule), Codec.INT.fieldOf("sea_level").forGetter(NoiseGeneratorSettings::seaLevel), Codec.BOOL.fieldOf("disable_mob_generation").forGetter(NoiseGeneratorSettings::disableMobGeneration), Codec.BOOL.fieldOf("aquifers_enabled").forGetter(NoiseGeneratorSettings::isAquifersEnabled), Codec.BOOL.fieldOf("ore_veins_enabled").forGetter(NoiseGeneratorSettings::oreVeinsEnabled), Codec.BOOL.fieldOf("legacy_random_source").forGetter(NoiseGeneratorSettings::useLegacyRandomSource)).apply(instance, NoiseGeneratorSettings::new));
+
+    public boolean isAquifersEnabled() {
+        return this.aquifersEnabled;
+    }
+
     public static final Codec<Holder<NoiseGeneratorSettings>> CODEC = RegistryFileCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, DIRECT_CODEC);
     public static final ResourceKey<NoiseGeneratorSettings> OVERWORLD = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("overworld"));
     public static final ResourceKey<NoiseGeneratorSettings> LARGE_BIOMES = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("large_biomes"));
@@ -34,33 +38,6 @@ public record NoiseGeneratorSettings(NoiseSettings j, BlockState k, BlockState l
     public static final ResourceKey<NoiseGeneratorSettings> CAVES = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("caves"));
     public static final ResourceKey<NoiseGeneratorSettings> FLOATING_ISLANDS = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("floating_islands"));
 
-    public NoiseGeneratorSettings(NoiseSettings noiseSettings, BlockState blockState, BlockState blockState2, NoiseRouterWithOnlyNoises noiseRouterWithOnlyNoises, SurfaceRules.RuleSource ruleSource, int i, boolean flag, boolean flag2, boolean flag3, boolean flag4) {
-        this.noiseSettings = noiseSettings;
-        this.defaultBlock = blockState;
-        this.defaultFluid = blockState2;
-        this.noiseRouter = noiseRouterWithOnlyNoises;
-        this.surfaceRule = ruleSource;
-        this.seaLevel = i;
-        this.disableMobGeneration = flag;
-        this.aquifersEnabled = flag2;
-        this.oreVeinsEnabled = flag3;
-        this.useLegacyRandomSource = flag4;
-    }
-
-    /** @deprecated */
-    @Deprecated
-    public boolean disableMobGeneration() {
-        return this.disableMobGeneration;
-    }
-
-    public boolean isAquifersEnabled() {
-        return this.aquifersEnabled;
-    }
-
-    public boolean oreVeinsEnabled() {
-        return this.oreVeinsEnabled;
-    }
-
     public WorldgenRandom.Algorithm getRandomSource() {
         return this.useLegacyRandomSource ? WorldgenRandom.Algorithm.LEGACY : WorldgenRandom.Algorithm.XOROSHIRO;
     }
@@ -74,7 +51,7 @@ public record NoiseGeneratorSettings(NoiseSettings j, BlockState k, BlockState l
     }
 
     public static Holder<NoiseGeneratorSettings> bootstrap() {
-        return (Holder)BuiltinRegistries.NOISE_GENERATOR_SETTINGS.holders().iterator().next();
+        return BuiltinRegistries.NOISE_GENERATOR_SETTINGS.holders().iterator().next();
     }
 
     private static NoiseGeneratorSettings end() {
@@ -98,40 +75,7 @@ public record NoiseGeneratorSettings(NoiseSettings j, BlockState k, BlockState l
         return new NoiseGeneratorSettings(NoiseSettings.FLOATING_ISLANDS_NOISE_SETTINGS, Blocks.STONE.defaultBlockState(), Blocks.WATER.defaultBlockState(), NoiseRouterData.overworldWithoutCaves(NoiseSettings.FLOATING_ISLANDS_NOISE_SETTINGS), SurfaceRuleData.overworldLike(false, false, false), -64, false, false, false, true);
     }
 
-    public NoiseSettings noiseSettings() {
-        return this.noiseSettings;
-    }
-
-    public BlockState defaultBlock() {
-        return this.defaultBlock;
-    }
-
-    public BlockState defaultFluid() {
-        return this.defaultFluid;
-    }
-
-    public NoiseRouterWithOnlyNoises noiseRouter() {
-        return this.noiseRouter;
-    }
-
-    public SurfaceRules.RuleSource surfaceRule() {
-        return this.surfaceRule;
-    }
-
-    public int seaLevel() {
-        return this.seaLevel;
-    }
-
-    public boolean aquifersEnabled() {
-        return this.aquifersEnabled;
-    }
-
-    public boolean useLegacyRandomSource() {
-        return this.useLegacyRandomSource;
-    }
-
     static {
-        DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(NoiseSettings.CODEC.fieldOf("noise").forGetter(NoiseGeneratorSettings::noiseSettings), BlockState.CODEC.fieldOf("default_block").forGetter(NoiseGeneratorSettings::defaultBlock), BlockState.CODEC.fieldOf("default_fluid").forGetter(NoiseGeneratorSettings::defaultFluid), NoiseRouterWithOnlyNoises.CODEC.fieldOf("noise_router").forGetter(NoiseGeneratorSettings::noiseRouter), SurfaceRules.RuleSource.CODEC.fieldOf("surface_rule").forGetter(NoiseGeneratorSettings::surfaceRule), Codec.INT.fieldOf("sea_level").forGetter(NoiseGeneratorSettings::seaLevel), Codec.BOOL.fieldOf("disable_mob_generation").forGetter(NoiseGeneratorSettings::disableMobGeneration), Codec.BOOL.fieldOf("aquifers_enabled").forGetter(NoiseGeneratorSettings::isAquifersEnabled), Codec.BOOL.fieldOf("ore_veins_enabled").forGetter(NoiseGeneratorSettings::oreVeinsEnabled), Codec.BOOL.fieldOf("legacy_random_source").forGetter(NoiseGeneratorSettings::useLegacyRandomSource)).apply(instance, NoiseGeneratorSettings::new));
         register(OVERWORLD, overworld(false, false));
         register(LARGE_BIOMES, overworld(false, true));
         register(AMPLIFIED, overworld(true, false));
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseRouter.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseRouter.java
index 0c947a26897ad4fdd6cde8c9bfd058f4da360bea..e201000ada873d6be4598fd9740d9a1e332b8dea 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseRouter.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseRouter.java
@@ -3,116 +3,22 @@ package net.minecraft.world.level.levelgen;
 import java.util.List;
 import net.minecraft.world.level.biome.Climate;
 
-public record NoiseRouter(DensityFunction a, DensityFunction b, DensityFunction c, DensityFunction d, PositionalRandomFactory e, PositionalRandomFactory f, DensityFunction g, DensityFunction h, DensityFunction i, DensityFunction j, DensityFunction k, DensityFunction l, DensityFunction m, DensityFunction n, DensityFunction o, DensityFunction p, DensityFunction q, List<Climate.ParameterPoint> r) {
-    private final DensityFunction barrierNoise;
-    private final DensityFunction fluidLevelFloodednessNoise;
-    private final DensityFunction fluidLevelSpreadNoise;
-    private final DensityFunction lavaNoise;
-    private final PositionalRandomFactory aquiferPositionalRandomFactory;
-    private final PositionalRandomFactory oreVeinsPositionalRandomFactory;
-    private final DensityFunction temperature;
-    private final DensityFunction humidity;
-    private final DensityFunction continents;
-    private final DensityFunction erosion;
-    private final DensityFunction depth;
-    private final DensityFunction ridges;
-    private final DensityFunction initialDensityWithoutJaggedness;
-    private final DensityFunction finalDensity;
-    private final DensityFunction veinToggle;
-    private final DensityFunction veinRidged;
-    private final DensityFunction veinGap;
-    private final List<Climate.ParameterPoint> spawnTarget;
-
-    public NoiseRouter(DensityFunction densityFunction, DensityFunction densityFunction2, DensityFunction densityFunction3, DensityFunction densityFunction4, PositionalRandomFactory positionalRandomFactory, PositionalRandomFactory positionalRandomFactory2, DensityFunction densityFunction5, DensityFunction densityFunction6, DensityFunction densityFunction7, DensityFunction densityFunction8, DensityFunction densityFunction9, DensityFunction densityFunction10, DensityFunction densityFunction11, DensityFunction densityFunction12, DensityFunction densityFunction13, DensityFunction densityFunction14, DensityFunction densityFunction15, List<Climate.ParameterPoint> list) {
-        this.barrierNoise = densityFunction;
-        this.fluidLevelFloodednessNoise = densityFunction2;
-        this.fluidLevelSpreadNoise = densityFunction3;
-        this.lavaNoise = densityFunction4;
-        this.aquiferPositionalRandomFactory = positionalRandomFactory;
-        this.oreVeinsPositionalRandomFactory = positionalRandomFactory2;
-        this.temperature = densityFunction5;
-        this.humidity = densityFunction6;
-        this.continents = densityFunction7;
-        this.erosion = densityFunction8;
-        this.depth = densityFunction9;
-        this.ridges = densityFunction10;
-        this.initialDensityWithoutJaggedness = densityFunction11;
-        this.finalDensity = densityFunction12;
-        this.veinToggle = densityFunction13;
-        this.veinRidged = densityFunction14;
-        this.veinGap = densityFunction15;
-        this.spawnTarget = list;
-    }
-
-    public DensityFunction barrierNoise() {
-        return this.barrierNoise;
-    }
-
-    public DensityFunction fluidLevelFloodednessNoise() {
-        return this.fluidLevelFloodednessNoise;
-    }
-
-    public DensityFunction fluidLevelSpreadNoise() {
-        return this.fluidLevelSpreadNoise;
-    }
-
-    public DensityFunction lavaNoise() {
-        return this.lavaNoise;
-    }
-
-    public PositionalRandomFactory aquiferPositionalRandomFactory() {
-        return this.aquiferPositionalRandomFactory;
-    }
-
-    public PositionalRandomFactory oreVeinsPositionalRandomFactory() {
-        return this.oreVeinsPositionalRandomFactory;
-    }
-
-    public DensityFunction temperature() {
-        return this.temperature;
-    }
-
-    public DensityFunction humidity() {
-        return this.humidity;
-    }
-
-    public DensityFunction continents() {
-        return this.continents;
-    }
-
-    public DensityFunction erosion() {
-        return this.erosion;
-    }
-
-    public DensityFunction depth() {
-        return this.depth;
-    }
-
-    public DensityFunction ridges() {
-        return this.ridges;
-    }
-
-    public DensityFunction initialDensityWithoutJaggedness() {
-        return this.initialDensityWithoutJaggedness;
-    }
-
-    public DensityFunction finalDensity() {
-        return this.finalDensity;
-    }
-
-    public DensityFunction veinToggle() {
-        return this.veinToggle;
-    }
-
-    public DensityFunction veinRidged() {
-        return this.veinRidged;
-    }
-
-    public DensityFunction veinGap() {
-        return this.veinGap;
-    }
-
-    public List<Climate.ParameterPoint> spawnTarget() {
-        return this.spawnTarget;
-    }
+public record NoiseRouter(DensityFunction barrierNoise,
+                          DensityFunction fluidLevelFloodednessNoise,
+                          DensityFunction fluidLevelSpreadNoise,
+                          DensityFunction lavaNoise,
+                          PositionalRandomFactory aquiferPositionalRandomFactory,
+                          PositionalRandomFactory oreVeinsPositionalRandomFactory,
+                          DensityFunction temperature,
+                          DensityFunction humidity,
+                          DensityFunction continents,
+                          DensityFunction erosion,
+                          DensityFunction depth,
+                          DensityFunction ridges,
+                          DensityFunction initialDensityWithoutJaggedness,
+                          DensityFunction finalDensity,
+                          DensityFunction veinToggle,
+                          DensityFunction veinRidged,
+                          DensityFunction veinGap,
+                          List<Climate.ParameterPoint> spawnTarget) {
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseRouterWithOnlyNoises.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseRouterWithOnlyNoises.java
index a8be31b3bb5235090c296476d075b23cc88272d9..55bf4676e3191c5e04d38cc800595a054575912b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseRouterWithOnlyNoises.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseRouterWithOnlyNoises.java
@@ -4,42 +4,23 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.function.Function;
 
-public record NoiseRouterWithOnlyNoises(DensityFunction b, DensityFunction c, DensityFunction d, DensityFunction e, DensityFunction f, DensityFunction g, DensityFunction h, DensityFunction i, DensityFunction j, DensityFunction k, DensityFunction l, DensityFunction m, DensityFunction n, DensityFunction o, DensityFunction p) {
-    private final DensityFunction barrierNoise;
-    private final DensityFunction fluidLevelFloodednessNoise;
-    private final DensityFunction fluidLevelSpreadNoise;
-    private final DensityFunction lavaNoise;
-    private final DensityFunction temperature;
-    private final DensityFunction vegetation;
-    private final DensityFunction continents;
-    private final DensityFunction erosion;
-    private final DensityFunction depth;
-    private final DensityFunction ridges;
-    private final DensityFunction initialDensityWithoutJaggedness;
-    private final DensityFunction finalDensity;
-    private final DensityFunction veinToggle;
-    private final DensityFunction veinRidged;
-    private final DensityFunction veinGap;
+public record NoiseRouterWithOnlyNoises(DensityFunction barrierNoise,
+                                        DensityFunction fluidLevelFloodednessNoise,
+                                        DensityFunction fluidLevelSpreadNoise,
+                                        DensityFunction lavaNoise,
+                                        DensityFunction temperature,
+                                        DensityFunction vegetation,
+                                        DensityFunction continents,
+                                        DensityFunction erosion,
+                                        DensityFunction depth,
+                                        DensityFunction ridges,
+                                        DensityFunction initialDensityWithoutJaggedness,
+                                        DensityFunction finalDensity,
+                                        DensityFunction veinToggle,
+                                        DensityFunction veinRidged,
+                                        DensityFunction veinGap) {
     public static final Codec<NoiseRouterWithOnlyNoises> CODEC = RecordCodecBuilder.create((instance) -> instance.group(field("barrier", NoiseRouterWithOnlyNoises::barrierNoise), field("fluid_level_floodedness", NoiseRouterWithOnlyNoises::fluidLevelFloodednessNoise), field("fluid_level_spread", NoiseRouterWithOnlyNoises::fluidLevelSpreadNoise), field("lava", NoiseRouterWithOnlyNoises::lavaNoise), field("temperature", NoiseRouterWithOnlyNoises::temperature), field("vegetation", NoiseRouterWithOnlyNoises::vegetation), field("continents", NoiseRouterWithOnlyNoises::continents), field("erosion", NoiseRouterWithOnlyNoises::erosion), field("depth", NoiseRouterWithOnlyNoises::depth), field("ridges", NoiseRouterWithOnlyNoises::ridges), field("initial_density_without_jaggedness", NoiseRouterWithOnlyNoises::initialDensityWithoutJaggedness), field("final_density", NoiseRouterWithOnlyNoises::finalDensity), field("vein_toggle", NoiseRouterWithOnlyNoises::veinToggle), field("vein_ridged", NoiseRouterWithOnlyNoises::veinRidged), field("vein_gap", NoiseRouterWithOnlyNoises::veinGap)).apply(instance, NoiseRouterWithOnlyNoises::new));
 
-    public NoiseRouterWithOnlyNoises(DensityFunction densityFunction, DensityFunction densityFunction2, DensityFunction densityFunction3, DensityFunction densityFunction4, DensityFunction densityFunction5, DensityFunction densityFunction6, DensityFunction densityFunction7, DensityFunction densityFunction8, DensityFunction densityFunction9, DensityFunction densityFunction10, DensityFunction densityFunction11, DensityFunction densityFunction12, DensityFunction densityFunction13, DensityFunction densityFunction14, DensityFunction densityFunction15) {
-        this.barrierNoise = densityFunction;
-        this.fluidLevelFloodednessNoise = densityFunction2;
-        this.fluidLevelSpreadNoise = densityFunction3;
-        this.lavaNoise = densityFunction4;
-        this.temperature = densityFunction5;
-        this.vegetation = densityFunction6;
-        this.continents = densityFunction7;
-        this.erosion = densityFunction8;
-        this.depth = densityFunction9;
-        this.ridges = densityFunction10;
-        this.initialDensityWithoutJaggedness = densityFunction11;
-        this.finalDensity = densityFunction12;
-        this.veinToggle = densityFunction13;
-        this.veinRidged = densityFunction14;
-        this.veinGap = densityFunction15;
-    }
-
     private static RecordCodecBuilder<NoiseRouterWithOnlyNoises, DensityFunction> field(String s, Function<NoiseRouterWithOnlyNoises, DensityFunction> function) {
         return DensityFunction.HOLDER_HELPER_CODEC.fieldOf(s).forGetter(function);
     }
@@ -47,64 +28,4 @@ public record NoiseRouterWithOnlyNoises(DensityFunction b, DensityFunction c, De
     public NoiseRouterWithOnlyNoises mapAll(DensityFunction.Visitor visitor) {
         return new NoiseRouterWithOnlyNoises(this.barrierNoise.mapAll(visitor), this.fluidLevelFloodednessNoise.mapAll(visitor), this.fluidLevelSpreadNoise.mapAll(visitor), this.lavaNoise.mapAll(visitor), this.temperature.mapAll(visitor), this.vegetation.mapAll(visitor), this.continents.mapAll(visitor), this.erosion.mapAll(visitor), this.depth.mapAll(visitor), this.ridges.mapAll(visitor), this.initialDensityWithoutJaggedness.mapAll(visitor), this.finalDensity.mapAll(visitor), this.veinToggle.mapAll(visitor), this.veinRidged.mapAll(visitor), this.veinGap.mapAll(visitor));
     }
-
-    public DensityFunction barrierNoise() {
-        return this.barrierNoise;
-    }
-
-    public DensityFunction fluidLevelFloodednessNoise() {
-        return this.fluidLevelFloodednessNoise;
-    }
-
-    public DensityFunction fluidLevelSpreadNoise() {
-        return this.fluidLevelSpreadNoise;
-    }
-
-    public DensityFunction lavaNoise() {
-        return this.lavaNoise;
-    }
-
-    public DensityFunction temperature() {
-        return this.temperature;
-    }
-
-    public DensityFunction vegetation() {
-        return this.vegetation;
-    }
-
-    public DensityFunction continents() {
-        return this.continents;
-    }
-
-    public DensityFunction erosion() {
-        return this.erosion;
-    }
-
-    public DensityFunction depth() {
-        return this.depth;
-    }
-
-    public DensityFunction ridges() {
-        return this.ridges;
-    }
-
-    public DensityFunction initialDensityWithoutJaggedness() {
-        return this.initialDensityWithoutJaggedness;
-    }
-
-    public DensityFunction finalDensity() {
-        return this.finalDensity;
-    }
-
-    public DensityFunction veinToggle() {
-        return this.veinToggle;
-    }
-
-    public DensityFunction veinRidged() {
-        return this.veinRidged;
-    }
-
-    public DensityFunction veinGap() {
-        return this.veinGap;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSamplingSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSamplingSettings.java
index 49b8643f8b947df7e1ea7ce69979b6aa5db435f9..bcd3c8582e45c71acd920f18f4bea71a98f37485 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSamplingSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSamplingSettings.java
@@ -3,34 +3,7 @@ package net.minecraft.world.level.levelgen;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 
-public record NoiseSamplingSettings(double b, double c, double d, double e) {
-    private final double xzScale;
-    private final double yScale;
-    private final double xzFactor;
-    private final double yFactor;
+public record NoiseSamplingSettings(double xzScale, double yScale, double xzFactor, double yFactor) {
     private static final Codec<Double> SCALE_RANGE = Codec.doubleRange(0.001D, 1000.0D);
     public static final Codec<NoiseSamplingSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(SCALE_RANGE.fieldOf("xz_scale").forGetter(NoiseSamplingSettings::xzScale), SCALE_RANGE.fieldOf("y_scale").forGetter(NoiseSamplingSettings::yScale), SCALE_RANGE.fieldOf("xz_factor").forGetter(NoiseSamplingSettings::xzFactor), SCALE_RANGE.fieldOf("y_factor").forGetter(NoiseSamplingSettings::yFactor)).apply(instance, NoiseSamplingSettings::new));
-
-    public NoiseSamplingSettings(double d, double d2, double d3, double d4) {
-        this.xzScale = d;
-        this.yScale = d2;
-        this.xzFactor = d3;
-        this.yFactor = d4;
-    }
-
-    public double xzScale() {
-        return this.xzScale;
-    }
-
-    public double yScale() {
-        return this.yScale;
-    }
-
-    public double xzFactor() {
-        return this.xzFactor;
-    }
-
-    public double yFactor() {
-        return this.yFactor;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
index 3836c746848c97756b532445120ec04554f799f7..b915a5f5288dc887c59ec3d3e99a8b2472e81735 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
@@ -10,32 +10,13 @@ import net.minecraft.util.Mth;
 import net.minecraft.world.level.biome.TerrainShaper;
 import net.minecraft.world.level.dimension.DimensionType;
 
-public record NoiseSettings(int f, int g, NoiseSamplingSettings h, NoiseSlider i, NoiseSlider j, int k, int l, TerrainShaper m) {
-    private final int minY;
-    private final int height;
-    private final NoiseSamplingSettings noiseSamplingSettings;
-    private final NoiseSlider topSlideSettings;
-    private final NoiseSlider bottomSlideSettings;
-    private final int noiseSizeHorizontal;
-    private final int noiseSizeVertical;
-    private final TerrainShaper terrainShaper;
-    public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY), Codec.intRange(0, DimensionType.Y_SIZE).fieldOf("height").forGetter(NoiseSettings::height), NoiseSamplingSettings.CODEC.fieldOf("sampling").forGetter(NoiseSettings::noiseSamplingSettings), NoiseSlider.CODEC.fieldOf("top_slide").forGetter(NoiseSettings::topSlideSettings), NoiseSlider.CODEC.fieldOf("bottom_slide").forGetter(NoiseSettings::bottomSlideSettings), Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal), Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical), TerrainShaper.CODEC.fieldOf("terrain_shaper").forGetter(NoiseSettings::terrainShaper)).apply(instance, NoiseSettings::new)).comapFlatMap(NoiseSettings::guardY, Function.identity());
+public record NoiseSettings(int minY, int height, NoiseSamplingSettings noiseSamplingSettings, NoiseSlider topSlideSettings, NoiseSlider bottomSlideSettings, int noiseSizeHorizontal, int noiseSizeVertical, TerrainShaper terrainShaper) {
+    public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.<NoiseSettings>create((instance) -> instance.group(Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY), Codec.intRange(0, DimensionType.Y_SIZE).fieldOf("height").forGetter(NoiseSettings::height), NoiseSamplingSettings.CODEC.fieldOf("sampling").forGetter(NoiseSettings::noiseSamplingSettings), NoiseSlider.CODEC.fieldOf("top_slide").forGetter(NoiseSettings::topSlideSettings), NoiseSlider.CODEC.fieldOf("bottom_slide").forGetter(NoiseSettings::bottomSlideSettings), Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal), Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical), TerrainShaper.CODEC.fieldOf("terrain_shaper").forGetter(NoiseSettings::terrainShaper)).apply(instance, NoiseSettings::new)).comapFlatMap(NoiseSettings::guardY, Function.identity());
     static final NoiseSettings NETHER_NOISE_SETTINGS = create(0, 128, new NoiseSamplingSettings(1.0D, 3.0D, 80.0D, 60.0D), new NoiseSlider(0.9375D, 3, 0), new NoiseSlider(2.5D, 4, -1), 1, 2, TerrainProvider.nether());
     static final NoiseSettings END_NOISE_SETTINGS = create(0, 128, new NoiseSamplingSettings(2.0D, 1.0D, 80.0D, 160.0D), new NoiseSlider(-23.4375D, 64, -46), new NoiseSlider(-0.234375D, 7, 1), 2, 1, TerrainProvider.end());
     static final NoiseSettings CAVES_NOISE_SETTINGS = create(-64, 192, new NoiseSamplingSettings(1.0D, 3.0D, 80.0D, 60.0D), new NoiseSlider(0.9375D, 3, 0), new NoiseSlider(2.5D, 4, -1), 1, 2, TerrainProvider.caves());
     static final NoiseSettings FLOATING_ISLANDS_NOISE_SETTINGS = create(0, 256, new NoiseSamplingSettings(2.0D, 1.0D, 80.0D, 160.0D), new NoiseSlider(-23.4375D, 64, -46), new NoiseSlider(-0.234375D, 7, 1), 2, 1, TerrainProvider.floatingIslands());
 
-    public NoiseSettings(int i, int i2, NoiseSamplingSettings noiseSamplingSettings, NoiseSlider noiseSlider, NoiseSlider noiseSlider2, int i3, int i4, TerrainShaper terrainShaper) {
-        this.minY = i;
-        this.height = i2;
-        this.noiseSamplingSettings = noiseSamplingSettings;
-        this.topSlideSettings = noiseSlider;
-        this.bottomSlideSettings = noiseSlider2;
-        this.noiseSizeHorizontal = i3;
-        this.noiseSizeVertical = i4;
-        this.terrainShaper = terrainShaper;
-    }
-
     private static DataResult<NoiseSettings> guardY(NoiseSettings noiseSettings) {
         if (noiseSettings.minY() + noiseSettings.height() > DimensionType.MAX_Y + 1) {
             return DataResult.error("min_y + height cannot be higher than: " + (DimensionType.MAX_Y + 1));
@@ -57,7 +38,6 @@ public record NoiseSettings(int f, int g, NoiseSamplingSettings h, NoiseSlider i
     static NoiseSettings overworldNoiseSettings(boolean flag) {
         return create(-64, 384, new NoiseSamplingSettings(1.0D, 1.0D, 80.0D, 160.0D), new NoiseSlider(-0.078125D, 2, flag ? 0 : 8), new NoiseSlider(flag ? 0.4D : 0.1171875D, 3, 0), 1, 2, TerrainProvider.overworld(flag));
     }
-
     public int getCellHeight() {
         return QuartPos.toBlock(this.noiseSizeVertical());
     }
@@ -73,36 +53,4 @@ public record NoiseSettings(int f, int g, NoiseSamplingSettings h, NoiseSlider i
     public int getMinCellY() {
         return Mth.intFloorDiv(this.minY(), this.getCellHeight());
     }
-
-    public int minY() {
-        return this.minY;
-    }
-
-    public int height() {
-        return this.height;
-    }
-
-    public NoiseSamplingSettings noiseSamplingSettings() {
-        return this.noiseSamplingSettings;
-    }
-
-    public NoiseSlider topSlideSettings() {
-        return this.topSlideSettings;
-    }
-
-    public NoiseSlider bottomSlideSettings() {
-        return this.bottomSlideSettings;
-    }
-
-    public int noiseSizeHorizontal() {
-        return this.noiseSizeHorizontal;
-    }
-
-    public int noiseSizeVertical() {
-        return this.noiseSizeVertical;
-    }
-
-    public TerrainShaper terrainShaper() {
-        return this.terrainShaper;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSlider.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSlider.java
index 2a92c738feeec8a9fbd7203d319fb7fe838e98b8..86cd90969aa597e51c2d1883463caf3da5b5a9fe 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSlider.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSlider.java
@@ -5,18 +5,9 @@ import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.Mth;
 
-public record NoiseSlider(double b, int c, int d) {
-    private final double target;
-    private final int size;
-    private final int offset;
+public record NoiseSlider(double target, int size, int offset) {
     public static final Codec<NoiseSlider> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.DOUBLE.fieldOf("target").forGetter((noiseSlider) -> noiseSlider.target), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("size").forGetter((noiseSlider) -> noiseSlider.size), Codec.INT.fieldOf("offset").forGetter((noiseSlider) -> noiseSlider.offset)).apply(instance, NoiseSlider::new));
 
-    public NoiseSlider(double d, int i, int i2) {
-        this.target = d;
-        this.size = i;
-        this.offset = i2;
-    }
-
     public double applySlide(double d, double d2) {
         if (this.size <= 0) {
             return d;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java b/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java
index a42eda1dc2aa514c66e7786d7783a92a5503c48a..3eec7c9104962d6ea11e797ceb8353e99951cd0b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java
@@ -25,21 +25,5 @@ public final class RandomSupport {
         return SEED_UNIQUIFIER.updateAndGet((l) -> l * 1181783497276652981L) ^ System.nanoTime();
     }
 
-    public static record Seed128bit(long a, long b) {
-        private final long seedLo;
-        private final long seedHi;
-
-        public Seed128bit(long l, long l2) {
-            this.seedLo = l;
-            this.seedHi = l2;
-        }
-
-        public long seedLo() {
-            return this.seedLo;
-        }
-
-        public long seedHi() {
-            return this.seedHi;
-        }
-    }
+    public static record Seed128bit(long seedLo, long seedHi) {}
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java b/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java
index e2a92844d2b48cea8fb1959182ea1e71524ba577..8369edd7a4c44abb770b6a1db56ca5b3ef820b44 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java
@@ -161,7 +161,16 @@ public class SurfaceRules {
         }
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
-            // $FF: Couldn't be decompiled
+            class BiomeCondition extends SurfaceRules.LazyYCondition {
+                BiomeCondition(Context context) {
+                    super(context);
+                }
+
+                protected boolean compute() {
+                    return ((Holder)this.context.biome.get()).is(SurfaceRules.BiomeConditionSource.this.biomeNameTest);
+                }
+            };
+            return new BiomeCondition(context);
         }
 
         public boolean equals(Object object) {
@@ -184,20 +193,13 @@ public class SurfaceRules {
         }
     }
 
-    static record BlockRuleSource(BlockState a, SurfaceRules.StateRule c) implements SurfaceRules.RuleSource {
-        private final BlockState resultState;
-        private final SurfaceRules.StateRule rule;
+    static record BlockRuleSource(BlockState resultState, SurfaceRules.StateRule rule) implements SurfaceRules.RuleSource {
         static final Codec<SurfaceRules.BlockRuleSource> CODEC = BlockState.CODEC.xmap(SurfaceRules.BlockRuleSource::new, SurfaceRules.BlockRuleSource::resultState).fieldOf("result_state").codec();
 
         BlockRuleSource(BlockState blockState) {
             this(blockState, new SurfaceRules.StateRule(blockState));
         }
 
-        private BlockRuleSource(BlockState blockState, SurfaceRules.StateRule stateRule) {
-            this.resultState = blockState;
-            this.rule = stateRule;
-        }
-
         public Codec<? extends SurfaceRules.RuleSource> codec() {
             return CODEC;
         }
@@ -205,14 +207,6 @@ public class SurfaceRules {
         public SurfaceRules.SurfaceRule apply(SurfaceRules.Context context) {
             return this.rule;
         }
-
-        public BlockState resultState() {
-            return this.resultState;
-        }
-
-        public SurfaceRules.StateRule rule() {
-            return this.rule;
-        }
     }
 
     interface Condition {
@@ -451,63 +445,39 @@ public class SurfaceRules {
         }
     }
 
-    static record NoiseThresholdConditionSource(ResourceKey<NormalNoise.NoiseParameters> a, double c, double d) implements SurfaceRules.ConditionSource {
-        private final ResourceKey<NormalNoise.NoiseParameters> noise;
-        final double minThreshold;
-        final double maxThreshold;
+    static record NoiseThresholdConditionSource(ResourceKey<NormalNoise.NoiseParameters> noise, double minThreshold, double maxThreshold) implements SurfaceRules.ConditionSource {
         static final Codec<SurfaceRules.NoiseThresholdConditionSource> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ResourceKey.codec(Registry.NOISE_REGISTRY).fieldOf("noise").forGetter(SurfaceRules.NoiseThresholdConditionSource::noise), Codec.DOUBLE.fieldOf("min_threshold").forGetter(SurfaceRules.NoiseThresholdConditionSource::minThreshold), Codec.DOUBLE.fieldOf("max_threshold").forGetter(SurfaceRules.NoiseThresholdConditionSource::maxThreshold)).apply(instance, SurfaceRules.NoiseThresholdConditionSource::new));
 
-        NoiseThresholdConditionSource(ResourceKey<NormalNoise.NoiseParameters> resourceKey, double d, double d2) {
-            this.noise = resourceKey;
-            this.minThreshold = d;
-            this.maxThreshold = d2;
-        }
-
         public Codec<? extends SurfaceRules.ConditionSource> codec() {
             return CODEC;
         }
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
-            // $FF: Couldn't be decompiled
-        }
-
-        public ResourceKey<NormalNoise.NoiseParameters> noise() {
-            return this.noise;
-        }
-
-        public double minThreshold() {
-            return this.minThreshold;
-        }
+            final NormalNoise noise = context.system.getOrCreateNoise(this.noise);
+            class NoiseThresholdCondition extends SurfaceRules.LazyXZCondition {
+                NoiseThresholdCondition(Context context) {
+                    super(context);
+                }
 
-        public double maxThreshold() {
-            return this.maxThreshold;
+                protected boolean compute() {
+                    double d = noise.getValue(this.context.blockX, 0.0D, this.context.blockZ);
+                    return (d >= SurfaceRules.NoiseThresholdConditionSource.this.minThreshold && d <= SurfaceRules.NoiseThresholdConditionSource.this.maxThreshold);
+                }
+            }
+            return new NoiseThresholdCondition(context);
         }
     }
 
-    static record NotCondition(SurfaceRules.Condition a) implements SurfaceRules.Condition {
-        private final SurfaceRules.Condition target;
-
-        NotCondition(SurfaceRules.Condition condition) {
-            this.target = condition;
-        }
+    static record NotCondition(SurfaceRules.Condition target) implements SurfaceRules.Condition {
 
         public boolean test() {
             return !this.target.test();
         }
-
-        public SurfaceRules.Condition target() {
-            return this.target;
-        }
     }
 
-    static record NotConditionSource(SurfaceRules.ConditionSource a) implements SurfaceRules.ConditionSource {
-        private final SurfaceRules.ConditionSource target;
+    static record NotConditionSource(SurfaceRules.ConditionSource target) implements SurfaceRules.ConditionSource {
         static final Codec<SurfaceRules.NotConditionSource> CODEC = SurfaceRules.ConditionSource.CODEC.xmap(SurfaceRules.NotConditionSource::new, SurfaceRules.NotConditionSource::target).fieldOf("invert").codec();
 
-        NotConditionSource(SurfaceRules.ConditionSource conditionSource) {
-            this.target = conditionSource;
-        }
-
         public Codec<? extends SurfaceRules.ConditionSource> codec() {
             return CODEC;
         }
@@ -515,10 +485,6 @@ public class SurfaceRules {
         public SurfaceRules.Condition apply(SurfaceRules.Context context) {
             return new SurfaceRules.NotCondition((SurfaceRules.Condition)this.target.apply(context));
         }
-
-        public SurfaceRules.ConditionSource target() {
-            return this.target;
-        }
     }
 
     public interface RuleSource extends Function<SurfaceRules.Context, SurfaceRules.SurfaceRule> {
@@ -534,12 +500,7 @@ public class SurfaceRules {
         Codec<? extends SurfaceRules.RuleSource> codec();
     }
 
-    static record SequenceRule(List<SurfaceRules.SurfaceRule> a) implements SurfaceRules.SurfaceRule {
-        private final List<SurfaceRules.SurfaceRule> rules;
-
-        SequenceRule(List<SurfaceRules.SurfaceRule> list) {
-            this.rules = list;
-        }
+    static record SequenceRule(List<SurfaceRules.SurfaceRule> rules) implements SurfaceRules.SurfaceRule {
 
         @Nullable
         public BlockState tryApply(int i, int i2, int i3) {
@@ -552,20 +513,11 @@ public class SurfaceRules {
 
             return null;
         }
-
-        public List<SurfaceRules.SurfaceRule> rules() {
-            return this.rules;
-        }
     }
 
-    static record SequenceRuleSource(List<SurfaceRules.RuleSource> a) implements SurfaceRules.RuleSource {
-        private final List<SurfaceRules.RuleSource> sequence;
+    static record SequenceRuleSource(List<SurfaceRules.RuleSource> sequence) implements SurfaceRules.RuleSource {
         static final Codec<SurfaceRules.SequenceRuleSource> CODEC = SurfaceRules.RuleSource.CODEC.listOf().xmap(SurfaceRules.SequenceRuleSource::new, SurfaceRules.SequenceRuleSource::sequence).fieldOf("sequence").codec();
 
-        SequenceRuleSource(List<SurfaceRules.RuleSource> list) {
-            this.sequence = list;
-        }
-
         public Codec<? extends SurfaceRules.RuleSource> codec() {
             return CODEC;
         }
@@ -583,26 +535,13 @@ public class SurfaceRules {
                 return new SurfaceRules.SequenceRule(builder.build());
             }
         }
-
-        public List<SurfaceRules.RuleSource> sequence() {
-            return this.sequence;
-        }
     }
 
-    static record StateRule(BlockState a) implements SurfaceRules.SurfaceRule {
-        private final BlockState state;
-
-        StateRule(BlockState blockState) {
-            this.state = blockState;
-        }
+    static record StateRule(BlockState state) implements SurfaceRules.SurfaceRule {
 
         public BlockState tryApply(int i, int i2, int i3) {
             return this.state;
         }
-
-        public BlockState state() {
-            return this.state;
-        }
     }
 
     static enum Steep implements SurfaceRules.ConditionSource {
@@ -619,42 +558,28 @@ public class SurfaceRules {
         }
     }
 
-    static record StoneDepthCheck(int a, boolean c, int d, CaveSurface e) implements SurfaceRules.ConditionSource {
-        final int offset;
-        final boolean addSurfaceDepth;
-        final int secondaryDepthRange;
-        private final CaveSurface surfaceType;
+    static record StoneDepthCheck(int offset, boolean addSurfaceDepth, int secondaryDepthRange, CaveSurface surfaceType) implements SurfaceRules.ConditionSource {
         static final Codec<SurfaceRules.StoneDepthCheck> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("offset").forGetter(SurfaceRules.StoneDepthCheck::offset), Codec.BOOL.fieldOf("add_surface_depth").forGetter(SurfaceRules.StoneDepthCheck::addSurfaceDepth), Codec.INT.fieldOf("secondary_depth_range").forGetter(SurfaceRules.StoneDepthCheck::secondaryDepthRange), CaveSurface.CODEC.fieldOf("surface_type").forGetter(SurfaceRules.StoneDepthCheck::surfaceType)).apply(instance, SurfaceRules.StoneDepthCheck::new));
 
-        StoneDepthCheck(int i, boolean flag, int i2, CaveSurface caveSurface) {
-            this.offset = i;
-            this.addSurfaceDepth = flag;
-            this.secondaryDepthRange = i2;
-            this.surfaceType = caveSurface;
-        }
-
         public Codec<? extends SurfaceRules.ConditionSource> codec() {
             return CODEC;
         }
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
-            // $FF: Couldn't be decompiled
-        }
-
-        public int offset() {
-            return this.offset;
-        }
-
-        public boolean addSurfaceDepth() {
-            return this.addSurfaceDepth;
-        }
-
-        public int secondaryDepthRange() {
-            return this.secondaryDepthRange;
-        }
+            final boolean ceiling = (this.surfaceType == CaveSurface.CEILING);
+            class StoneDepthCondition extends SurfaceRules.LazyYCondition {
+                StoneDepthCondition(Context context) {
+                    super(context);
+                }
 
-        public CaveSurface surfaceType() {
-            return this.surfaceType;
+                protected boolean compute() {
+                    int i = ceiling ? this.context.stoneDepthBelow : this.context.stoneDepthAbove;
+                    int i2 = SurfaceRules.StoneDepthCheck.this.addSurfaceDepth ? this.context.surfaceDepth : 0;
+                    int i3 = (SurfaceRules.StoneDepthCheck.this.secondaryDepthRange == 0) ? 0 : (int)Mth.map(this.context.getSurfaceSecondary(), -1.0D, 1.0D, 0.0D, SurfaceRules.StoneDepthCheck.this.secondaryDepthRange);
+                    return (i <= 1 + SurfaceRules.StoneDepthCheck.this.offset + i2 + i3);
+                }
+            }
+            return new StoneDepthCondition(context);
         }
     }
 
@@ -677,39 +602,17 @@ public class SurfaceRules {
         }
     }
 
-    static record TestRule(SurfaceRules.Condition a, SurfaceRules.SurfaceRule b) implements SurfaceRules.SurfaceRule {
-        private final SurfaceRules.Condition condition;
-        private final SurfaceRules.SurfaceRule followup;
-
-        TestRule(SurfaceRules.Condition condition, SurfaceRules.SurfaceRule surfaceRule) {
-            this.condition = condition;
-            this.followup = surfaceRule;
-        }
+    static record TestRule(SurfaceRules.Condition condition, SurfaceRules.SurfaceRule followup) implements SurfaceRules.SurfaceRule {
 
         @Nullable
         public BlockState tryApply(int i, int i2, int i3) {
             return !this.condition.test() ? null : this.followup.tryApply(i, i2, i3);
         }
-
-        public SurfaceRules.Condition condition() {
-            return this.condition;
-        }
-
-        public SurfaceRules.SurfaceRule followup() {
-            return this.followup;
-        }
     }
 
-    static record TestRuleSource(SurfaceRules.ConditionSource a, SurfaceRules.RuleSource c) implements SurfaceRules.RuleSource {
-        private final SurfaceRules.ConditionSource ifTrue;
-        private final SurfaceRules.RuleSource thenRun;
+    static record TestRuleSource(SurfaceRules.ConditionSource ifTrue, SurfaceRules.RuleSource thenRun) implements SurfaceRules.RuleSource {
         static final Codec<SurfaceRules.TestRuleSource> CODEC = RecordCodecBuilder.create((instance) -> instance.group(SurfaceRules.ConditionSource.CODEC.fieldOf("if_true").forGetter(SurfaceRules.TestRuleSource::ifTrue), SurfaceRules.RuleSource.CODEC.fieldOf("then_run").forGetter(SurfaceRules.TestRuleSource::thenRun)).apply(instance, SurfaceRules.TestRuleSource::new));
 
-        TestRuleSource(SurfaceRules.ConditionSource conditionSource, SurfaceRules.RuleSource ruleSource) {
-            this.ifTrue = conditionSource;
-            this.thenRun = ruleSource;
-        }
-
         public Codec<? extends SurfaceRules.RuleSource> codec() {
             return CODEC;
         }
@@ -717,112 +620,78 @@ public class SurfaceRules {
         public SurfaceRules.SurfaceRule apply(SurfaceRules.Context context) {
             return new SurfaceRules.TestRule((SurfaceRules.Condition)this.ifTrue.apply(context), (SurfaceRules.SurfaceRule)this.thenRun.apply(context));
         }
-
-        public SurfaceRules.ConditionSource ifTrue() {
-            return this.ifTrue;
-        }
-
-        public SurfaceRules.RuleSource thenRun() {
-            return this.thenRun;
-        }
     }
 
-    static record VerticalGradientConditionSource(ResourceLocation a, VerticalAnchor c, VerticalAnchor d) implements SurfaceRules.ConditionSource {
-        private final ResourceLocation randomName;
-        private final VerticalAnchor trueAtAndBelow;
-        private final VerticalAnchor falseAtAndAbove;
+    static record VerticalGradientConditionSource(ResourceLocation randomName, VerticalAnchor trueAtAndBelow, VerticalAnchor falseAtAndAbove) implements SurfaceRules.ConditionSource {
         static final Codec<SurfaceRules.VerticalGradientConditionSource> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("random_name").forGetter(SurfaceRules.VerticalGradientConditionSource::randomName), VerticalAnchor.CODEC.fieldOf("true_at_and_below").forGetter(SurfaceRules.VerticalGradientConditionSource::trueAtAndBelow), VerticalAnchor.CODEC.fieldOf("false_at_and_above").forGetter(SurfaceRules.VerticalGradientConditionSource::falseAtAndAbove)).apply(instance, SurfaceRules.VerticalGradientConditionSource::new));
 
-        VerticalGradientConditionSource(ResourceLocation resourceLocation, VerticalAnchor verticalAnchor, VerticalAnchor verticalAnchor2) {
-            this.randomName = resourceLocation;
-            this.trueAtAndBelow = verticalAnchor;
-            this.falseAtAndAbove = verticalAnchor2;
-        }
-
         public Codec<? extends SurfaceRules.ConditionSource> codec() {
             return CODEC;
         }
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
-            // $FF: Couldn't be decompiled
-        }
-
-        public ResourceLocation randomName() {
-            return this.randomName;
-        }
-
-        public VerticalAnchor trueAtAndBelow() {
-            return this.trueAtAndBelow;
-        }
+            final int trueAtAndBelow = trueAtAndBelow().resolveY(context.context);
+            final int falseAtAndAbove = falseAtAndAbove().resolveY(context.context);
+            final PositionalRandomFactory randomFactory = context.system.getOrCreateRandomFactory(randomName());
+            class VerticalGradientCondition extends SurfaceRules.LazyYCondition {
+                VerticalGradientCondition(Context context) {
+                    super(context);
+                }
 
-        public VerticalAnchor falseAtAndAbove() {
-            return this.falseAtAndAbove;
+                protected boolean compute() {
+                    int i = this.context.blockY;
+                    if (i <= trueAtAndBelow)
+                        return true;
+                    if (i >= falseAtAndAbove)
+                        return false;
+                    double d = net.minecraft.util.Mth.map(i, trueAtAndBelow, falseAtAndAbove, 1.0D, 0.0D);
+                    RandomSource randomSource = randomFactory.at(this.context.blockX, i, this.context.blockZ);
+                    return (randomSource.nextFloat() < d);
+                }
+            }
+            return new VerticalGradientCondition(context);
         }
     }
 
-    static record WaterConditionSource(int a, int c, boolean d) implements SurfaceRules.ConditionSource {
-        final int offset;
-        final int surfaceDepthMultiplier;
-        final boolean addStoneDepth;
+    static record WaterConditionSource(int offset, int surfaceDepthMultiplier, boolean addStoneDepth) implements SurfaceRules.ConditionSource {
         static final Codec<SurfaceRules.WaterConditionSource> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("offset").forGetter(SurfaceRules.WaterConditionSource::offset), Codec.intRange(-20, 20).fieldOf("surface_depth_multiplier").forGetter(SurfaceRules.WaterConditionSource::surfaceDepthMultiplier), Codec.BOOL.fieldOf("add_stone_depth").forGetter(SurfaceRules.WaterConditionSource::addStoneDepth)).apply(instance, SurfaceRules.WaterConditionSource::new));
 
-        WaterConditionSource(int i, int i2, boolean flag) {
-            this.offset = i;
-            this.surfaceDepthMultiplier = i2;
-            this.addStoneDepth = flag;
-        }
-
         public Codec<? extends SurfaceRules.ConditionSource> codec() {
             return CODEC;
         }
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
-            // $FF: Couldn't be decompiled
-        }
-
-        public int offset() {
-            return this.offset;
-        }
-
-        public int surfaceDepthMultiplier() {
-            return this.surfaceDepthMultiplier;
-        }
+            class WaterCondition extends SurfaceRules.LazyYCondition {
+                WaterCondition(Context context) {
+                    super(context);
+                }
 
-        public boolean addStoneDepth() {
-            return this.addStoneDepth;
+                protected boolean compute() {
+                    return (this.context.waterHeight == Integer.MIN_VALUE || this.context.blockY + (SurfaceRules.WaterConditionSource.this.addStoneDepth ? this.context.stoneDepthAbove : 0) >= this.context.waterHeight + SurfaceRules.WaterConditionSource.this.offset + this.context.surfaceDepth * SurfaceRules.WaterConditionSource.this.surfaceDepthMultiplier);
+                }
+            }
+            return new WaterCondition(context);
         }
     }
 
-    static record YConditionSource(VerticalAnchor a, int c, boolean d) implements SurfaceRules.ConditionSource {
-        final VerticalAnchor anchor;
-        final int surfaceDepthMultiplier;
-        final boolean addStoneDepth;
+    static record YConditionSource(VerticalAnchor anchor, int surfaceDepthMultiplier, boolean addStoneDepth) implements SurfaceRules.ConditionSource {
         static final Codec<SurfaceRules.YConditionSource> CODEC = RecordCodecBuilder.create((instance) -> instance.group(VerticalAnchor.CODEC.fieldOf("anchor").forGetter(SurfaceRules.YConditionSource::anchor), Codec.intRange(-20, 20).fieldOf("surface_depth_multiplier").forGetter(SurfaceRules.YConditionSource::surfaceDepthMultiplier), Codec.BOOL.fieldOf("add_stone_depth").forGetter(SurfaceRules.YConditionSource::addStoneDepth)).apply(instance, SurfaceRules.YConditionSource::new));
 
-        YConditionSource(VerticalAnchor verticalAnchor, int i, boolean flag) {
-            this.anchor = verticalAnchor;
-            this.surfaceDepthMultiplier = i;
-            this.addStoneDepth = flag;
-        }
-
         public Codec<? extends SurfaceRules.ConditionSource> codec() {
             return CODEC;
         }
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
-            // $FF: Couldn't be decompiled
-        }
-
-        public VerticalAnchor anchor() {
-            return this.anchor;
-        }
-
-        public int surfaceDepthMultiplier() {
-            return this.surfaceDepthMultiplier;
-        }
+            class YCondition extends SurfaceRules.LazyYCondition {
+                YCondition(Context context) {
+                    super(context);
+                }
 
-        public boolean addStoneDepth() {
-            return this.addStoneDepth;
+                protected boolean compute() {
+                    return (this.context.blockY + (SurfaceRules.YConditionSource.this.addStoneDepth ? this.context.stoneDepthAbove : 0) >= SurfaceRules.YConditionSource.this.anchor.resolveY(this.context.context) + this.context.surfaceDepth * SurfaceRules.YConditionSource.this.surfaceDepthMultiplier);
+                }
+            }
+            return new YCondition(context);
         }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/VerticalAnchor.java b/src/main/java/net/minecraft/world/level/levelgen/VerticalAnchor.java
index e67b04d25473657da57316ad7b32593a83074977..1789f131927f48328f303e53102cf391c2e689b0 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/VerticalAnchor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/VerticalAnchor.java
@@ -41,14 +41,9 @@ public interface VerticalAnchor {
 
     int resolveY(WorldGenerationContext var1);
 
-    public static record AboveBottom(int e) implements VerticalAnchor {
-        private final int offset;
+    public static record AboveBottom(int offset) implements VerticalAnchor {
         public static final Codec<VerticalAnchor.AboveBottom> CODEC = Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("above_bottom").xmap(VerticalAnchor.AboveBottom::new, VerticalAnchor.AboveBottom::offset).codec();
 
-        public AboveBottom(int i) {
-            this.offset = i;
-        }
-
         public int resolveY(WorldGenerationContext worldGenerationContext) {
             return worldGenerationContext.getMinGenY() + this.offset;
         }
@@ -56,20 +51,11 @@ public interface VerticalAnchor {
         public String toString() {
             return this.offset + " above bottom";
         }
-
-        public int offset() {
-            return this.offset;
-        }
     }
 
-    public static record Absolute(int e) implements VerticalAnchor {
-        private final int y;
+    public static record Absolute(int y) implements VerticalAnchor {
         public static final Codec<VerticalAnchor.Absolute> CODEC = Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("absolute").xmap(VerticalAnchor.Absolute::new, VerticalAnchor.Absolute::y).codec();
 
-        public Absolute(int i) {
-            this.y = i;
-        }
-
         public int resolveY(WorldGenerationContext worldGenerationContext) {
             return this.y;
         }
@@ -83,14 +69,9 @@ public interface VerticalAnchor {
         }
     }
 
-    public static record BelowTop(int e) implements VerticalAnchor {
-        private final int offset;
+    public static record BelowTop(int offset) implements VerticalAnchor {
         public static final Codec<VerticalAnchor.BelowTop> CODEC = Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("below_top").xmap(VerticalAnchor.BelowTop::new, VerticalAnchor.BelowTop::offset).codec();
 
-        public BelowTop(int i) {
-            this.offset = i;
-        }
-
         public int resolveY(WorldGenerationContext worldGenerationContext) {
             return worldGenerationContext.getGenDepth() - 1 + worldGenerationContext.getMinGenY() - this.offset;
         }
@@ -98,9 +79,5 @@ public interface VerticalAnchor {
         public String toString() {
             return this.offset + " below top";
         }
-
-        public int offset() {
-            return this.offset;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
index fd768ee0345ed4758c3472d2753d975d1ada1d5d..062c0960e41ce6fb5673b26674fcfeb543bf5fd8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -35,7 +35,7 @@ import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 
 public class WorldGenSettings {
-    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), RegistryCodecs.dataPackAwareCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((worldGenSettings) -> worldGenSettings.legacyCustomOptions)).apply(instance, instance.stable(WorldGenSettings::new))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
+    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.<WorldGenSettings>create((instance) -> instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), RegistryCodecs.dataPackAwareCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((worldGenSettings) -> worldGenSettings.legacyCustomOptions)).apply(instance, instance.stable(WorldGenSettings::new))).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
     private static final Logger LOGGER = LogUtils.getLogger();
     private final long seed;
     private final boolean generateFeatures;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/blending/Blender.java b/src/main/java/net/minecraft/world/level/levelgen/blending/Blender.java
index c1f509d2affd63ca1277929aa1f6dc6bb7892994..620203b4eb545107f3bc0c00464e910f39777e69 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/blending/Blender.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/blending/Blender.java
@@ -103,7 +103,7 @@ public class Blender {
             MutableDouble mutableDouble = new MutableDouble(0.0D);
             MutableDouble mutableDouble2 = new MutableDouble(0.0D);
             MutableDouble mutableDouble3 = new MutableDouble(Double.POSITIVE_INFINITY);
-            this.blendingData.forEach((l, blendingData) -> blendingData.iterateHeights(QuartPos.fromSection(ChunkPos.getX(l)), QuartPos.fromSection(ChunkPos.getZ(l)), (i3x, i4x, d) -> {
+            this.blendingData.forEach((l, blendingData) -> blendingData.iterateHeights(QuartPos.fromSection(ChunkPos.getX(l)), QuartPos.fromSection(ChunkPos.getZ(l)), (i3x, i4x, dIn) -> {
                     double d2 = Mth.length((double)(i3 - i3x), (double)(i4 - i4x));
                     if (!(d2 > (double)HEIGHT_BLENDING_RANGE_CELLS)) {
                         if (d2 < mutableDouble3.doubleValue()) {
@@ -111,7 +111,7 @@ public class Blender {
                         }
 
                         double d3 = 1.0D / (d2 * d2 * d2 * d2);
-                        mutableDouble2.add(d * d3);
+                        mutableDouble2.add(dIn * d3);
                         mutableDouble.add(d3);
                     }
                 }));
@@ -144,18 +144,18 @@ public class Blender {
             MutableDouble mutableDouble = new MutableDouble(0.0D);
             MutableDouble mutableDouble2 = new MutableDouble(0.0D);
             MutableDouble mutableDouble3 = new MutableDouble(Double.POSITIVE_INFINITY);
-            this.blendingDataForDensityBlending.forEach((l, blendingData) -> blendingData.iterateDensities(QuartPos.fromSection(ChunkPos.getX(l)), QuartPos.fromSection(ChunkPos.getZ(l)), i2 - 1, i2 + 1, (i4, i5, i6, d) -> {
-                    double d2 = Mth.length((double)(i - i4), (double)((i2 - i5) * 2), (double)(i3 - i6));
-                    if (!(d2 > 2.0D)) {
-                        if (d2 < mutableDouble3.doubleValue()) {
-                            mutableDouble3.setValue(d2);
-                        }
-
-                        double d3 = 1.0D / (d2 * d2 * d2 * d2);
-                        mutableDouble2.add(d * d3);
-                        mutableDouble.add(d3);
+            this.blendingDataForDensityBlending.forEach((l, blendingData) -> blendingData.iterateDensities(QuartPos.fromSection(ChunkPos.getX(l)), QuartPos.fromSection(ChunkPos.getZ(l)), i2 - 1, i2 + 1, (i4, i5, i6, dIn) -> {
+                double d2In = Mth.length((double)(i - i4), (double)((i2 - i5) * 2), (double)(i3 - i6));
+                if (!(d2In > 2.0D)) {
+                    if (d2In < mutableDouble3.doubleValue()) {
+                        mutableDouble3.setValue(d2In);
                     }
-                }));
+
+                    double d3 = 1.0D / (d2In * d2In * d2In * d2In);
+                    mutableDouble2.add(dIn * d3);
+                    mutableDouble.add(d3);
+                }
+            }));
             if (mutableDouble3.doubleValue() == Double.POSITIVE_INFINITY) {
                 return d;
             } else {
@@ -209,16 +209,16 @@ public class Blender {
         double d2 = (double)i2 + SHIFT_NOISE.getValue((double)i2, (double)i, 0.0D) * 12.0D;
         MutableDouble mutableDouble = new MutableDouble(Double.POSITIVE_INFINITY);
         MutableObject<Holder<Biome>> mutableObject = new MutableObject();
-        this.blendingData.forEach((l, blendingData) -> blendingData.iterateBiomes(QuartPos.fromSection(ChunkPos.getX(l)), QuartPos.fromSection(ChunkPos.getZ(l)), (i, i2, holder) -> {
-                double d3 = Mth.length(d - (double)i, d2 - (double)i2);
-                if (!(d3 > (double)HEIGHT_BLENDING_RANGE_CELLS)) {
-                    if (d3 < mutableDouble.doubleValue()) {
-                        mutableObject.setValue(holder);
-                        mutableDouble.setValue(d3);
-                    }
-
+        this.blendingData.forEach((l, blendingData) -> blendingData.iterateBiomes(QuartPos.fromSection(ChunkPos.getX(l)), QuartPos.fromSection(ChunkPos.getZ(l)), (ix, i2x, holder) -> {
+            double d3 = Mth.length(d - (double)ix, d2 - (double)i2x);
+            if (!(d3 > (double)HEIGHT_BLENDING_RANGE_CELLS)) {
+                if (d3 < mutableDouble.doubleValue()) {
+                    mutableObject.setValue(holder);
+                    mutableDouble.setValue(d3);
                 }
-            }));
+
+            }
+        }));
         if (mutableDouble.doubleValue() == Double.POSITIVE_INFINITY) {
             return null;
         } else {
@@ -331,7 +331,8 @@ public class Blender {
 
         double d3 = d;
         double d4 = d2;
-        return (d3, d4x, d5) -> distanceToCube(d3 - 8.0D - d3, d4x - OLD_CHUNK_CENTER_Y, d5 - 8.0D - d4, 8.0D, OLD_CHUNK_Y_RADIUS, 8.0D);
+        // TODO: right? (d3 -> d3x)
+        return (d3x, d4x, d5) -> distanceToCube(d3x - 8.0D - d3, d4x - OLD_CHUNK_CENTER_Y, d5 - 8.0D - d4, 8.0D, OLD_CHUNK_Y_RADIUS, 8.0D);
     }
 
     private static double distanceToCube(double d, double d2, double d3, double d4, double d5, double d6) {
@@ -341,22 +342,7 @@ public class Blender {
         return Mth.length(Math.max(0.0D, d7), Math.max(0.0D, d8), Math.max(0.0D, d9));
     }
 
-    public static record BlendingOutput(double a, double b) {
-        private final double alpha;
-        private final double blendingOffset;
-
-        public BlendingOutput(double d, double d2) {
-            this.alpha = d;
-            this.blendingOffset = d2;
-        }
-
-        public double alpha() {
-            return this.alpha;
-        }
-
-        public double blendingOffset() {
-            return this.blendingOffset;
-        }
+    public static record BlendingOutput(double alpha, double blendingOffset) {
     }
 
     interface CellValueGetter {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/blending/BlendingData.java b/src/main/java/net/minecraft/world/level/levelgen/blending/BlendingData.java
index d580ceea6b29f7c544cbdfa1ee8d5774f9b3ef1b..e316dfb24ca4a0a47f910413524db61b4da2c519 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/blending/BlendingData.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/blending/BlendingData.java
@@ -62,7 +62,7 @@ public class BlendingData {
     private final transient double[][] densities;
     private final transient double[] floorDensities;
     private static final Codec<double[]> DOUBLE_ARRAY_CODEC = Codec.DOUBLE.listOf().xmap(Doubles::toArray, Doubles::asList);
-    public static final Codec<BlendingData> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.BOOL.fieldOf("old_noise").forGetter(BlendingData::oldNoise), DOUBLE_ARRAY_CODEC.optionalFieldOf("heights").forGetter((blendingData) -> DoubleStream.of(blendingData.heights).anyMatch((d) -> d != Double.MAX_VALUE) ? Optional.of(blendingData.heights) : Optional.empty())).apply(instance, BlendingData::new)).comapFlatMap(BlendingData::validateArraySize, Function.identity());
+    public static final Codec<BlendingData> CODEC = RecordCodecBuilder.<BlendingData>create((instance) -> instance.group(Codec.BOOL.fieldOf("old_noise").forGetter(BlendingData::oldNoise), DOUBLE_ARRAY_CODEC.optionalFieldOf("heights").forGetter((blendingData) -> DoubleStream.of(blendingData.heights).anyMatch((d) -> d != Double.MAX_VALUE) ? Optional.of(blendingData.heights) : Optional.empty())).apply(instance, BlendingData::new)).comapFlatMap(BlendingData::validateArraySize, Function.identity());
 
     private static DataResult<BlendingData> validateArraySize(BlendingData blendingData) {
         return blendingData.heights.length != CELL_COLUMN_COUNT ? DataResult.error("heights has to be of length " + CELL_COLUMN_COUNT) : DataResult.success(blendingData);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java b/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java
index 55599099f4c5e83989ece077b28cbf3282b1c9a8..f77f4f3ae332e849a25fcd9c4486a4aeca3ad6a8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java
@@ -16,18 +16,11 @@ import net.minecraft.world.level.chunk.CarvingMask;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.levelgen.Aquifer;
 
-public record ConfiguredWorldCarver<WC extends CarverConfiguration>(WorldCarver<WC> d, WC e) {
-    private final WorldCarver<WC> worldCarver;
-    private final WC config;
+public record ConfiguredWorldCarver<WC extends CarverConfiguration>(WorldCarver<WC> worldCarver, WC config) {
     public static final Codec<ConfiguredWorldCarver<?>> DIRECT_CODEC = Registry.CARVER.byNameCodec().dispatch((configuredWorldCarver) -> configuredWorldCarver.worldCarver, WorldCarver::configuredCodec);
     public static final Codec<Holder<ConfiguredWorldCarver<?>>> CODEC = RegistryFileCodec.create(Registry.CONFIGURED_CARVER_REGISTRY, DIRECT_CODEC);
     public static final Codec<HolderSet<ConfiguredWorldCarver<?>>> LIST_CODEC = RegistryCodecs.homogeneousList(Registry.CONFIGURED_CARVER_REGISTRY, DIRECT_CODEC);
 
-    public ConfiguredWorldCarver(WorldCarver<WC> worldCarver, WC carverConfiguration) {
-        this.worldCarver = worldCarver;
-        this.config = carverConfiguration;
-    }
-
     public boolean isStartChunk(Random random) {
         return this.worldCarver.isStartChunk(this.config, random);
     }
@@ -35,12 +28,4 @@ public record ConfiguredWorldCarver<WC extends CarverConfiguration>(WorldCarver<
     public boolean carve(CarvingContext carvingContext, ChunkAccess chunkAccess, Function<BlockPos, Holder<Biome>> function, Random random, Aquifer aquifer, ChunkPos chunkPos, CarvingMask carvingMask) {
         return SharedConstants.debugVoidTerrain(chunkAccess.getPos()) ? false : this.worldCarver.carve(carvingContext, this.config, chunkAccess, function, random, aquifer, chunkPos, carvingMask);
     }
-
-    public WorldCarver<WC> worldCarver() {
-        return this.worldCarver;
-    }
-
-    public WC config() {
-        return this.config;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
index 0442de4bb9c003b7c3c383c07bd12a95f12f2724..9d04cec7313100d91fc5bf7c648241fc2bb0443f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
@@ -13,18 +13,11 @@ import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 
-public record ConfiguredFeature<FC extends FeatureConfiguration, F extends Feature<FC>>(F d, FC e) {
-    private final F feature;
-    private final FC config;
+public record ConfiguredFeature<FC extends FeatureConfiguration, F extends Feature<FC>>(F feature, FC config) {
     public static final Codec<ConfiguredFeature<?, ?>> DIRECT_CODEC = Registry.FEATURE.byNameCodec().dispatch((configuredFeature) -> configuredFeature.feature, Feature::configuredCodec);
     public static final Codec<Holder<ConfiguredFeature<?, ?>>> CODEC = RegistryFileCodec.create(Registry.CONFIGURED_FEATURE_REGISTRY, DIRECT_CODEC);
     public static final Codec<HolderSet<ConfiguredFeature<?, ?>>> LIST_CODEC = RegistryCodecs.homogeneousList(Registry.CONFIGURED_FEATURE_REGISTRY, DIRECT_CODEC);
 
-    public ConfiguredFeature(F feature, FC featureConfiguration) {
-        this.feature = feature;
-        this.config = featureConfiguration;
-    }
-
     public boolean place(WorldGenLevel worldGenLevel, ChunkGenerator chunkGenerator, Random random, BlockPos blockPos) {
         return this.feature.place(this.config, worldGenLevel, chunkGenerator, random, blockPos);
     }
@@ -36,12 +29,4 @@ public record ConfiguredFeature<FC extends FeatureConfiguration, F extends Featu
     public String toString() {
         return "Configured: " + this.feature + ": " + this.config;
     }
-
-    public F feature() {
-        return this.feature;
-    }
-
-    public FC config() {
-        return this.config;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/CoralFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/CoralFeature.java
index a0fad61a3b192ffe53ffccd873a3a8ca392a724c..814af6cfda5d18a0d806b52085605d56dd5d75a8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/CoralFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/CoralFeature.java
@@ -48,12 +48,12 @@ public abstract class CoralFeature extends Feature<NoneFeatureConfiguration> {
                     BlockPos blockPos3 = blockPos.relative(direction);
                     if (levelAccessor.getBlockState(blockPos3).is(Blocks.WATER)) {
                         Registry.BLOCK.getTag(BlockTags.WALL_CORALS).flatMap((named) -> named.getRandomElement(random)).map(Holder::value).ifPresent((block) -> {
-                            BlockState blockState = block.defaultBlockState();
-                            if (blockState.hasProperty(BaseCoralWallFanBlock.FACING)) {
-                                blockState = blockState.setValue(BaseCoralWallFanBlock.FACING, direction);
+                            BlockState blockStateIn = block.defaultBlockState();
+                            if (blockStateIn.hasProperty(BaseCoralWallFanBlock.FACING)) {
+                                blockStateIn = blockStateIn.setValue(BaseCoralWallFanBlock.FACING, direction);
                             }
 
-                            levelAccessor.setBlock(blockPos3, blockState, 2);
+                            levelAccessor.setBlock(blockPos3, blockStateIn, 2);
                         });
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/EndCityFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/EndCityFeature.java
index e6e134fdc7ae71d13ccbbb993f96b37f28b8cb41..1177a8183111889cfb92127d73fa65818087b9ed 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/EndCityFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/EndCityFeature.java
@@ -54,7 +54,7 @@ public class EndCityFeature extends StructureFeature<NoneFeatureConfiguration> {
             return Optional.empty();
         } else {
             BlockPos blockPos = context.chunkPos().getMiddleBlockPosition(i);
-            return !context.validBiome().test(context.chunkGenerator().getNoiseBiome(QuartPos.fromBlock(blockPos.getX()), QuartPos.fromBlock(blockPos.getY()), QuartPos.fromBlock(blockPos.getZ()))) ? Optional.empty() : Optional.of((PieceGenerator<>)(structurePiecesBuilder, contextx) -> {
+            return !context.validBiome().test(context.chunkGenerator().getNoiseBiome(QuartPos.fromBlock(blockPos.getX()), QuartPos.fromBlock(blockPos.getY()), QuartPos.fromBlock(blockPos.getZ()))) ? Optional.empty() : Optional.of((structurePiecesBuilder, contextx) -> {
                 Rotation rotation = Rotation.getRandom(contextx.random());
                 List<StructurePiece> list = Lists.newArrayList();
                 EndCityPieces.startHouseTower(contextx.structureManager(), blockPos, rotation, list, contextx.random());
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/FeatureCountTracker.java b/src/main/java/net/minecraft/world/level/levelgen/feature/FeatureCountTracker.java
index 3982871f9330fed7329766ec4bc482f4657c1d60..612e3aad3003fd3607ad4bdb18ec1d6967092e62 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/FeatureCountTracker.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/FeatureCountTracker.java
@@ -60,39 +60,7 @@ public class FeatureCountTracker {
         });
     }
 
-    static record FeatureData(ConfiguredFeature<?, ?> a, Optional<PlacedFeature> b) {
-        private final ConfiguredFeature<?, ?> feature;
-        private final Optional<PlacedFeature> topFeature;
+    static record FeatureData(ConfiguredFeature<?, ?> feature, Optional<PlacedFeature> topFeature) {}
 
-        FeatureData(ConfiguredFeature<?, ?> configuredFeature, Optional<PlacedFeature> optional) {
-            this.feature = configuredFeature;
-            this.topFeature = optional;
-        }
-
-        public ConfiguredFeature<?, ?> feature() {
-            return this.feature;
-        }
-
-        public Optional<PlacedFeature> topFeature() {
-            return this.topFeature;
-        }
-    }
-
-    static record LevelData(Object2IntMap<FeatureCountTracker.FeatureData> a, MutableInt b) {
-        private final Object2IntMap<FeatureCountTracker.FeatureData> featureData;
-        private final MutableInt chunksWithFeatures;
-
-        LevelData(Object2IntMap<FeatureCountTracker.FeatureData> object2IntMap, MutableInt mutableInt) {
-            this.featureData = object2IntMap;
-            this.chunksWithFeatures = mutableInt;
-        }
-
-        public Object2IntMap<FeatureCountTracker.FeatureData> featureData() {
-            return this.featureData;
-        }
-
-        public MutableInt chunksWithFeatures() {
-            return this.chunksWithFeatures;
-        }
-    }
+    static record LevelData(Object2IntMap<FeatureCountTracker.FeatureData> featureData, MutableInt chunksWithFeatures) {}
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/LakeFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/LakeFeature.java
index 7d32f2a7ce36ad76372c6228e12eb0f2f6744592..165bd4fe05a3ac1e5cfd0fced9c30913eb43871b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/LakeFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/LakeFeature.java
@@ -134,22 +134,7 @@ public class LakeFeature extends Feature<LakeFeature.Configuration> {
         return !blockState.is(BlockTags.FEATURES_CANNOT_REPLACE);
     }
 
-    public static record Configuration(BlockStateProvider b, BlockStateProvider c) implements FeatureConfiguration {
-        private final BlockStateProvider fluid;
-        private final BlockStateProvider barrier;
+    public static record Configuration(BlockStateProvider fluid, BlockStateProvider barrier) implements FeatureConfiguration {
         public static final Codec<LakeFeature.Configuration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockStateProvider.CODEC.fieldOf("fluid").forGetter(LakeFeature.Configuration::fluid), BlockStateProvider.CODEC.fieldOf("barrier").forGetter(LakeFeature.Configuration::barrier)).apply(instance, LakeFeature.Configuration::new));
-
-        public Configuration(BlockStateProvider blockStateProvider, BlockStateProvider blockStateProvider2) {
-            this.fluid = blockStateProvider;
-            this.barrier = blockStateProvider2;
-        }
-
-        public BlockStateProvider fluid() {
-            return this.fluid;
-        }
-
-        public BlockStateProvider barrier() {
-            return this.barrier;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java
index e3b080fbd6c6a19eb3ab17b82d91f33eae019e19..a804c5398811e3f4a09e10471945d4280f308202 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/RuinedPortalFeature.java
@@ -104,7 +104,7 @@ public class RuinedPortalFeature extends StructureFeature<RuinedPortalConfigurat
         int i = context.chunkGenerator().getBaseHeight(blockPos3.getX(), blockPos3.getZ(), RuinedPortalPiece.getHeightMapType(verticalPlacement), context.heightAccessor()) - 1;
         int i2 = findSuitableY(worldgenRandom, context.chunkGenerator(), verticalPlacement, properties.airPocket, i, boundingBox.getYSpan(), boundingBox, context.heightAccessor());
         BlockPos blockPos4 = new BlockPos(blockPos2.getX(), i2, blockPos2.getZ());
-        return !context.validBiome().test(context.chunkGenerator().getNoiseBiome(QuartPos.fromBlock(blockPos4.getX()), QuartPos.fromBlock(blockPos4.getY()), QuartPos.fromBlock(blockPos4.getZ()))) ? Optional.empty() : Optional.of((PieceGenerator<>)(structurePiecesBuilder, context2) -> {
+        return !context.validBiome().test(context.chunkGenerator().getNoiseBiome(QuartPos.fromBlock(blockPos4.getX()), QuartPos.fromBlock(blockPos4.getY()), QuartPos.fromBlock(blockPos4.getZ()))) ? Optional.empty() : Optional.of((structurePiecesBuilder, context2) -> {
             if (ruinedPortalConfiguration.portalType == RuinedPortalFeature.Type.MOUNTAIN || ruinedPortalConfiguration.portalType == RuinedPortalFeature.Type.OCEAN || ruinedPortalConfiguration.portalType == RuinedPortalFeature.Type.STANDARD) {
                 properties.cold = isCold(blockPos4, context.chunkGenerator().getNoiseBiome(QuartPos.fromBlock(blockPos4.getX()), QuartPos.fromBlock(blockPos4.getY()), QuartPos.fromBlock(blockPos4.getZ())));
             }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
index de14c6048b65366b636e1b1a3cab89a8cda0075f..c5da92df9cc4500ea18d2a503f3f6e5f95cebf0b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
@@ -97,7 +97,7 @@ public class StructureFeature<C extends FeatureConfiguration> {
     @Nullable
     public static StructureStart loadStaticStart(StructurePieceSerializationContext structurePieceSerializationContext, CompoundTag compoundTag, long l) {
         String s = compoundTag.getString("id");
-        if ("INVALID".equals(s)) {
+        if (StructureStart.INVALID_START_ID.equals(s)) {
             return StructureStart.INVALID_START;
         } else {
             Registry<ConfiguredStructureFeature<?, ?>> registry = structurePieceSerializationContext.registryAccess().registryOrThrow(Registry.CONFIGURED_STRUCTURE_FEATURE_REGISTRY);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/WoodlandMansionFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/WoodlandMansionFeature.java
index 19033a5b1442768a6c63be7892736160bbfaa676..45b833d6b6a906f2f6376f9e13a38a6184e1e66e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/WoodlandMansionFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/WoodlandMansionFeature.java
@@ -52,7 +52,7 @@ public class WoodlandMansionFeature extends StructureFeature<NoneFeatureConfigur
             return Optional.empty();
         } else {
             BlockPos blockPos = new BlockPos(context.chunkPos().getMiddleBlockX(), i5 + 1, context.chunkPos().getMiddleBlockZ());
-            return Optional.of((PieceGenerator<>)(structurePiecesBuilder, contextx) -> {
+            return Optional.of((structurePiecesBuilder, contextx) -> {
                 List<WoodlandMansionPieces.WoodlandMansionPiece> list = Lists.newLinkedList();
                 WoodlandMansionPieces.generateMansion(contextx.structureManager(), blockPos, rotation, list, worldgenRandom);
                 list.forEach(structurePiecesBuilder::addPiece);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockColumnConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockColumnConfiguration.java
index 45a53126673ef61ff1f9d9d3c84e8f4b0adb4afb..44f7bd7645c2d99d780d975a3dbd1ccd4a9c93b0 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockColumnConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockColumnConfiguration.java
@@ -10,20 +10,9 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate;
 import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
 
-public record BlockColumnConfiguration(List<BlockColumnConfiguration.Layer> b, Direction c, BlockPredicate d, boolean e) implements FeatureConfiguration {
-    private final List<BlockColumnConfiguration.Layer> layers;
-    private final Direction direction;
-    private final BlockPredicate allowedPlacement;
-    private final boolean prioritizeTip;
+public record BlockColumnConfiguration(List<BlockColumnConfiguration.Layer> layers, Direction direction, BlockPredicate allowedPlacement, boolean prioritizeTip) implements FeatureConfiguration {
     public static final Codec<BlockColumnConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockColumnConfiguration.Layer.CODEC.listOf().fieldOf("layers").forGetter(BlockColumnConfiguration::layers), Direction.CODEC.fieldOf("direction").forGetter(BlockColumnConfiguration::direction), BlockPredicate.CODEC.fieldOf("allowed_placement").forGetter(BlockColumnConfiguration::allowedPlacement), Codec.BOOL.fieldOf("prioritize_tip").forGetter(BlockColumnConfiguration::prioritizeTip)).apply(instance, BlockColumnConfiguration::new));
 
-    public BlockColumnConfiguration(List<BlockColumnConfiguration.Layer> list, Direction direction, BlockPredicate blockPredicate, boolean flag) {
-        this.layers = list;
-        this.direction = direction;
-        this.allowedPlacement = blockPredicate;
-        this.prioritizeTip = flag;
-    }
-
     public static BlockColumnConfiguration.Layer layer(IntProvider intProvider, BlockStateProvider blockStateProvider) {
         return new BlockColumnConfiguration.Layer(intProvider, blockStateProvider);
     }
@@ -32,38 +21,7 @@ public record BlockColumnConfiguration(List<BlockColumnConfiguration.Layer> b, D
         return new BlockColumnConfiguration(List.of(layer(intProvider, blockStateProvider)), Direction.UP, BlockPredicate.matchesBlock(Blocks.AIR, BlockPos.ZERO), false);
     }
 
-    public List<BlockColumnConfiguration.Layer> layers() {
-        return this.layers;
-    }
-
-    public Direction direction() {
-        return this.direction;
-    }
-
-    public BlockPredicate allowedPlacement() {
-        return this.allowedPlacement;
-    }
-
-    public boolean prioritizeTip() {
-        return this.prioritizeTip;
-    }
-
-    public static record Layer(IntProvider b, BlockStateProvider c) {
-        private final IntProvider height;
-        private final BlockStateProvider state;
+    public static record Layer(IntProvider height, BlockStateProvider state) {
         public static final Codec<BlockColumnConfiguration.Layer> CODEC = RecordCodecBuilder.create((instance) -> instance.group(IntProvider.NON_NEGATIVE_CODEC.fieldOf("height").forGetter(BlockColumnConfiguration.Layer::height), BlockStateProvider.CODEC.fieldOf("provider").forGetter(BlockColumnConfiguration.Layer::state)).apply(instance, BlockColumnConfiguration.Layer::new));
-
-        public Layer(IntProvider intProvider, BlockStateProvider blockStateProvider) {
-            this.height = intProvider;
-            this.state = blockStateProvider;
-        }
-
-        public IntProvider height() {
-            return this.height;
-        }
-
-        public BlockStateProvider state() {
-            return this.state;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java
index dc7e515f26fa6e6317b06eb78d2b3815effbe85b..7ace6e16c3a6f7e19ece7880cdffd15640a3f10d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java
@@ -6,33 +6,6 @@ import java.util.List;
 import net.minecraft.util.valueproviders.IntProvider;
 import net.minecraft.world.level.block.state.BlockState;
 
-public record DiskConfiguration(BlockState b, IntProvider c, int d, List<BlockState> e) implements FeatureConfiguration {
-    private final BlockState state;
-    private final IntProvider radius;
-    private final int halfHeight;
-    private final List<BlockState> targets;
+public record DiskConfiguration(BlockState state, IntProvider radius, int halfHeight, List<BlockState> targets) implements FeatureConfiguration {
     public static final Codec<DiskConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockState.CODEC.fieldOf("state").forGetter(DiskConfiguration::state), IntProvider.codec(0, 8).fieldOf("radius").forGetter(DiskConfiguration::radius), Codec.intRange(0, 4).fieldOf("half_height").forGetter(DiskConfiguration::halfHeight), BlockState.CODEC.listOf().fieldOf("targets").forGetter(DiskConfiguration::targets)).apply(instance, DiskConfiguration::new));
-
-    public DiskConfiguration(BlockState blockState, IntProvider intProvider, int i, List<BlockState> list) {
-        this.state = blockState;
-        this.radius = intProvider;
-        this.halfHeight = i;
-        this.targets = list;
-    }
-
-    public BlockState state() {
-        return this.state;
-    }
-
-    public IntProvider radius() {
-        return this.radius;
-    }
-
-    public int halfHeight() {
-        return this.halfHeight;
-    }
-
-    public List<BlockState> targets() {
-        return this.targets;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
index 2304e10d6fa23494630deffc74d7625255989799..40b0546975a6ec54039b98007431f2c0752338b7 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
@@ -6,33 +6,6 @@ import net.minecraft.core.Holder;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.world.level.levelgen.placement.PlacedFeature;
 
-public record RandomPatchConfiguration(int b, int c, int d, Holder<PlacedFeature> e) implements FeatureConfiguration {
-    private final int tries;
-    private final int xzSpread;
-    private final int ySpread;
-    private final Holder<PlacedFeature> feature;
+public record RandomPatchConfiguration(int tries, int xzSpread, int ySpread, Holder<PlacedFeature> feature) implements FeatureConfiguration {
     public static final Codec<RandomPatchConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.POSITIVE_INT.fieldOf("tries").orElse(128).forGetter(RandomPatchConfiguration::tries), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("xz_spread").orElse(7).forGetter(RandomPatchConfiguration::xzSpread), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("y_spread").orElse(3).forGetter(RandomPatchConfiguration::ySpread), PlacedFeature.CODEC.fieldOf("feature").forGetter(RandomPatchConfiguration::feature)).apply(instance, RandomPatchConfiguration::new));
-
-    public RandomPatchConfiguration(int i, int i2, int i3, Holder<PlacedFeature> holder) {
-        this.tries = i;
-        this.xzSpread = i2;
-        this.ySpread = i3;
-        this.feature = holder;
-    }
-
-    public int tries() {
-        return this.tries;
-    }
-
-    public int xzSpread() {
-        return this.xzSpread;
-    }
-
-    public int ySpread() {
-        return this.ySpread;
-    }
-
-    public Holder<PlacedFeature> feature() {
-        return this.feature;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
index bd70700edf50dc233522b8aba66cdc18edb6730a..9a1e0952b2ad80b66727222664fe5e874d5f8821 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
@@ -4,15 +4,6 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
 
-public record SimpleBlockConfiguration(BlockStateProvider b) implements FeatureConfiguration {
-    private final BlockStateProvider toPlace;
+public record SimpleBlockConfiguration(BlockStateProvider toPlace) implements FeatureConfiguration {
     public static final Codec<SimpleBlockConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockStateProvider.CODEC.fieldOf("to_place").forGetter((simpleBlockConfiguration) -> simpleBlockConfiguration.toPlace)).apply(instance, SimpleBlockConfiguration::new));
-
-    public SimpleBlockConfiguration(BlockStateProvider blockStateProvider) {
-        this.toPlace = blockStateProvider;
-    }
-
-    public BlockStateProvider toPlace() {
-        return this.toPlace;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TwistingVinesConfig.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TwistingVinesConfig.java
index ddc21b901f30a59fb3be0f14ab4cfd2fca488982..763643f5df58a47f8068d10a2f1c834b1f1dba7d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TwistingVinesConfig.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TwistingVinesConfig.java
@@ -4,27 +4,6 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.util.ExtraCodecs;
 
-public record TwistingVinesConfig(int b, int c, int d) implements FeatureConfiguration {
-    private final int spreadWidth;
-    private final int spreadHeight;
-    private final int maxHeight;
+public record TwistingVinesConfig(int spreadWidth, int spreadHeight, int maxHeight) implements FeatureConfiguration {
     public static final Codec<TwistingVinesConfig> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.POSITIVE_INT.fieldOf("spread_width").forGetter(TwistingVinesConfig::spreadWidth), ExtraCodecs.POSITIVE_INT.fieldOf("spread_height").forGetter(TwistingVinesConfig::spreadHeight), ExtraCodecs.POSITIVE_INT.fieldOf("max_height").forGetter(TwistingVinesConfig::maxHeight)).apply(instance, TwistingVinesConfig::new));
-
-    public TwistingVinesConfig(int i, int i2, int i3) {
-        this.spreadWidth = i;
-        this.spreadHeight = i2;
-        this.maxHeight = i3;
-    }
-
-    public int spreadWidth() {
-        return this.spreadWidth;
-    }
-
-    public int spreadHeight() {
-        return this.spreadHeight;
-    }
-
-    public int maxHeight() {
-        return this.maxHeight;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
index fb9f76cb35a02900d075889de14b18925250493e..d49af1bfd6acdc963f49ddaf5c9b357ecb87fba1 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
@@ -31,7 +31,7 @@ public class AlterGroundDecorator extends TreeDecorator {
                 this.placeCircle(levelSimulatedReader, biConsumer, random, blockPos.west().south(2));
                 this.placeCircle(levelSimulatedReader, biConsumer, random, blockPos.east(2).south(2));
 
-                for(int i = 0; i < 5; ++i) {
+                for(int ix = 0; ix < 5; ++ix) {
                     int i2 = random.nextInt(64);
                     int i3 = i2 % 8;
                     int i4 = i2 / 8;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
index e872b300ea503881a1365a789fa90c2784578aa7..e24de5b61ae142ce3d75b0ab5b410785b83146b3 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
@@ -44,9 +44,9 @@ public class BeehiveDecorator extends TreeDecorator {
                 if (!optional.isEmpty()) {
                     biConsumer.accept((BlockPos)optional.get(), Blocks.BEE_NEST.defaultBlockState().setValue(BeehiveBlock.FACING, WORLDGEN_FACING));
                     levelSimulatedReader.getBlockEntity((BlockPos)optional.get(), BlockEntityType.BEEHIVE).ifPresent((beehiveBlockEntity) -> {
-                        int i = 2 + random.nextInt(2);
+                        int iIn = 2 + random.nextInt(2);
 
-                        for(int i2 = 0; i2 < i; ++i2) {
+                        for(int i2 = 0; i2 < iIn; ++i2) {
                             CompoundTag compoundTag = new CompoundTag();
                             compoundTag.putString("id", Registry.ENTITY_TYPE.getKey(EntityType.BEE).toString());
                             beehiveBlockEntity.storeBee(compoundTag, random.nextInt(599), false);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
index a68ea95b3a7d40c99d624a146e4fef5069015bbc..f9ef3c099db60cdd8a88b78d2c1026775b33d23d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
@@ -32,7 +32,7 @@ import org.slf4j.Logger;
 
 public class FlatLevelGeneratorSettings {
     private static final Logger LOGGER = LogUtils.getLogger();
-    public static final Codec<FlatLevelGeneratorSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(RegistryOps.retrieveRegistry(Registry.BIOME_REGISTRY).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.biomes), RegistryCodecs.homogeneousList(Registry.STRUCTURE_SET_REGISTRY).optionalFieldOf("structure_overrides").forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.structureOverrides), FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter(FlatLevelGeneratorSettings::getLayersInfo), Codec.BOOL.fieldOf("lakes").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.addLakes), Codec.BOOL.fieldOf("features").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.decoration), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter((flatLevelGeneratorSettings) -> Optional.of(flatLevelGeneratorSettings.biome))).apply(instance, FlatLevelGeneratorSettings::new)).comapFlatMap(FlatLevelGeneratorSettings::validateHeight, Function.identity()).stable();
+    public static final Codec<FlatLevelGeneratorSettings> CODEC = RecordCodecBuilder.<FlatLevelGeneratorSettings>create((instance) -> instance.group(RegistryOps.retrieveRegistry(Registry.BIOME_REGISTRY).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.biomes), RegistryCodecs.homogeneousList(Registry.STRUCTURE_SET_REGISTRY).optionalFieldOf("structure_overrides").forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.structureOverrides), FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter(FlatLevelGeneratorSettings::getLayersInfo), Codec.BOOL.fieldOf("lakes").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.addLakes), Codec.BOOL.fieldOf("features").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.decoration), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter((flatLevelGeneratorSettings) -> Optional.of(flatLevelGeneratorSettings.biome))).apply(instance, FlatLevelGeneratorSettings::new)).comapFlatMap(FlatLevelGeneratorSettings::validateHeight, Function.identity()).stable();
     private final Registry<Biome> biomes;
     private final Optional<HolderSet<StructureSet>> structureOverrides;
     private final List<FlatLayerInfo> layersInfo = Lists.newArrayList();
@@ -118,7 +118,7 @@ public class FlatLevelGeneratorSettings {
 
             for(int i = 0; i < list.size(); ++i) {
                 if (i != GenerationStep.Decoration.UNDERGROUND_STRUCTURES.ordinal() && i != GenerationStep.Decoration.SURFACE_STRUCTURES.ordinal()) {
-                    for(Holder<PlacedFeature> holder : (HolderSet)list.get(i)) {
+                    for(Holder<PlacedFeature> holder : list.get(i)) {
                         builder.addFeature(i, holder);
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java b/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
index fd194708d1fb7ad7a17098776afa6d46311fb348..6043701b98811623d50ca47a987ee211daaeef6d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
@@ -9,7 +9,7 @@ import net.minecraft.world.level.levelgen.WorldGenerationContext;
 
 public class ConstantHeight extends HeightProvider {
     public static final ConstantHeight ZERO = new ConstantHeight(VerticalAnchor.absolute(0));
-    public static final Codec<ConstantHeight> CODEC = Codec.either(VerticalAnchor.CODEC, RecordCodecBuilder.create((instance) -> instance.group(VerticalAnchor.CODEC.fieldOf("value").forGetter((constantHeight) -> constantHeight.value)).apply(instance, ConstantHeight::new))).xmap((either) -> (ConstantHeight)either.map(ConstantHeight::of, (constantHeight) -> constantHeight), (constantHeight) -> Either.left(constantHeight.value));
+    public static final Codec<ConstantHeight> CODEC = Codec.either(VerticalAnchor.CODEC, RecordCodecBuilder.<ConstantHeight>create((instance) -> instance.group(VerticalAnchor.CODEC.fieldOf("value").forGetter((constantHeight) -> constantHeight.value)).apply(instance, ConstantHeight::new))).xmap((either) -> (ConstantHeight)either.map(ConstantHeight::of, (constantHeight) -> constantHeight), (constantHeight) -> Either.left(constantHeight.value));
     private final VerticalAnchor value;
 
     public static ConstantHeight of(VerticalAnchor verticalAnchor) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java b/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
index 165765d1a8ef23d54524977483d77a6cf9301c6a..f71e4e53d88629e5bc06cb476197b8dfa70ec211 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
@@ -6,13 +6,7 @@ import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.DensityFunction;
 import net.minecraft.world.level.levelgen.NoiseChunk;
 
-public record MaterialRuleList(List<NoiseChunk.BlockStateFiller> a) implements NoiseChunk.BlockStateFiller {
-    private final List<NoiseChunk.BlockStateFiller> materialRuleList;
-
-    public MaterialRuleList(List<NoiseChunk.BlockStateFiller> list) {
-        this.materialRuleList = list;
-    }
-
+public record MaterialRuleList(List<NoiseChunk.BlockStateFiller> materialRuleList) implements NoiseChunk.BlockStateFiller {
     @Nullable
     public BlockState calculate(DensityFunction.FunctionContext functionContext) {
         for(NoiseChunk.BlockStateFiller blockStateFiller : this.materialRuleList) {
@@ -24,8 +18,4 @@ public record MaterialRuleList(List<NoiseChunk.BlockStateFiller> a) implements N
 
         return null;
     }
-
-    public List<NoiseChunk.BlockStateFiller> materialRuleList() {
-        return this.materialRuleList;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/PlacedFeature.java b/src/main/java/net/minecraft/world/level/levelgen/placement/PlacedFeature.java
index 32d5667a5110035e1fc88864f5bc2415246c94e6..2d7038bf12c74b64ba6a22e207a231fd52c3334f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/PlacedFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/PlacedFeature.java
@@ -17,19 +17,12 @@ import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import org.apache.commons.lang3.mutable.MutableBoolean;
 
-public record PlacedFeature(Holder<ConfiguredFeature<?, ?>> e, List<PlacementModifier> f) {
-    private final Holder<ConfiguredFeature<?, ?>> feature;
-    private final List<PlacementModifier> placement;
-    public static final Codec<PlacedFeature> DIRECT_CODEC;
+public record PlacedFeature(Holder<ConfiguredFeature<?, ?>> feature, List<PlacementModifier> placement) {
+    public static final Codec<PlacedFeature> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(ConfiguredFeature.CODEC.fieldOf("feature").forGetter((placedFeature) -> placedFeature.feature), PlacementModifier.CODEC.listOf().fieldOf("placement").forGetter((placedFeature) -> placedFeature.placement)).apply(instance, PlacedFeature::new));
     public static final Codec<Holder<PlacedFeature>> CODEC = RegistryFileCodec.create(Registry.PLACED_FEATURE_REGISTRY, DIRECT_CODEC);
     public static final Codec<HolderSet<PlacedFeature>> LIST_CODEC = RegistryCodecs.homogeneousList(Registry.PLACED_FEATURE_REGISTRY, DIRECT_CODEC);
     public static final Codec<List<HolderSet<PlacedFeature>>> LIST_OF_LISTS_CODEC = RegistryCodecs.homogeneousList(Registry.PLACED_FEATURE_REGISTRY, DIRECT_CODEC, true).listOf();
 
-    public PlacedFeature(Holder<ConfiguredFeature<?, ?>> holder, List<PlacementModifier> list) {
-        this.feature = holder;
-        this.placement = list;
-    }
-
     public boolean place(WorldGenLevel worldGenLevel, ChunkGenerator chunkGenerator, Random random, BlockPos blockPos) {
         return this.placeWithContext(new PlacementContext(worldGenLevel, chunkGenerator, Optional.empty()), random, blockPos);
     }
@@ -64,25 +57,7 @@ public record PlacedFeature(Holder<ConfiguredFeature<?, ?>> e, List<PlacementMod
         return "Placed " + this.feature;
     }
 
-    public Holder<ConfiguredFeature<?, ?>> feature() {
-        return this.feature;
-    }
-
-    public List<PlacementModifier> placement() {
-        return this.placement;
-    }
-
-    static {
-        DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(ConfiguredFeature.CODEC.fieldOf("feature").forGetter((placedFeature) -> placedFeature.feature), PlacementModifier.CODEC.listOf().fieldOf("placement").forGetter((placedFeature) -> placedFeature.placement)).apply(instance, PlacedFeature::new));
-    }
-
+    // TODO: Mojang forgot to remove this?
     static record test(int a) {
-        private test(int i) {
-            this.a = i;
-        }
-
-        public int a() {
-            return this.a;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/NetherFossilFeature.java b/src/main/java/net/minecraft/world/level/levelgen/structure/NetherFossilFeature.java
index 32a85478763d25aa1945f301c2599966aae696ac..c4566631383127aae54e2fce32660944f9c5425e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/NetherFossilFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/NetherFossilFeature.java
@@ -48,7 +48,7 @@ public class NetherFossilFeature extends StructureFeature<RangeConfiguration> {
             return Optional.empty();
         } else {
             BlockPos blockPos = new BlockPos(i, i4, i2);
-            return Optional.of((PieceGenerator<>)(structurePiecesBuilder, context2) -> NetherFossilPieces.addPieces(context.structureManager(), structurePiecesBuilder, worldgenRandom, blockPos));
+            return Optional.of((structurePiecesBuilder, context2) -> NetherFossilPieces.addPieces(context.structureManager(), structurePiecesBuilder, worldgenRandom, blockPos));
         }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java b/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
index e0f53a55b0fd01d16bc90885437f1ec645fe5c91..bbf66d300f75e01efe6242e37e567ff10f988133 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
@@ -1314,7 +1314,7 @@ public class OceanMonumentPieces {
         protected static final BlockState LAMP_BLOCK = Blocks.SEA_LANTERN.defaultBlockState();
         protected static final boolean DO_FILL = true;
         protected static final BlockState FILL_BLOCK = Blocks.WATER.defaultBlockState();
-        protected static final Set<Block> FILL_KEEP = ImmutableSet.builder().add(Blocks.ICE).add(Blocks.PACKED_ICE).add(Blocks.BLUE_ICE).add(FILL_BLOCK.getBlock()).build();
+        protected static final Set<Block> FILL_KEEP = ImmutableSet.<Block>builder().add(Blocks.ICE).add(Blocks.PACKED_ICE).add(Blocks.BLUE_ICE).add(FILL_BLOCK.getBlock()).build();
         protected static final int GRIDROOM_WIDTH = 8;
         protected static final int GRIDROOM_DEPTH = 8;
         protected static final int GRIDROOM_HEIGHT = 4;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java
index 40ec51b7d9643bbc576e5839f6a82fa3e9f3ef0f..4888fa3b75001111185ede01334408a8ce38f525 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/RuinedPortalPiece.java
@@ -66,7 +66,7 @@ public class RuinedPortalPiece extends TemplateStructurePiece {
     public RuinedPortalPiece(StructureManager structureManager, CompoundTag compoundTag) {
         super(StructurePieceType.RUINED_PORTAL, compoundTag, structureManager, (resourceLocation) -> makeSettings(structureManager, compoundTag, resourceLocation));
         this.verticalPlacement = RuinedPortalPiece.VerticalPlacement.byName(compoundTag.getString("VerticalPlacement"));
-        this.properties = (RuinedPortalPiece.Properties)RuinedPortalPiece.Properties.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.get("Properties"))).getOrThrow(true, LOGGER::error);
+        this.properties = (RuinedPortalPiece.Properties)RuinedPortalPiece.Properties.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.get("Properties"))).getOrThrow(true, LOGGER::error);
     }
 
     protected void addAdditionalSaveData(StructurePieceSerializationContext structurePieceSerializationContext, CompoundTag compoundTag) {
@@ -80,7 +80,7 @@ public class RuinedPortalPiece extends TemplateStructurePiece {
     private static StructurePlaceSettings makeSettings(StructureManager structureManager, CompoundTag compoundTag, ResourceLocation resourceLocation) {
         StructureTemplate structureTemplate = structureManager.getOrCreate(resourceLocation);
         BlockPos blockPos = new BlockPos(structureTemplate.getSize().getX() / 2, 0, structureTemplate.getSize().getZ() / 2);
-        return makeSettings(Mirror.valueOf(compoundTag.getString("Mirror")), Rotation.valueOf(compoundTag.getString("Rotation")), RuinedPortalPiece.VerticalPlacement.byName(compoundTag.getString("VerticalPlacement")), blockPos, (RuinedPortalPiece.Properties)RuinedPortalPiece.Properties.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.get("Properties"))).getOrThrow(true, LOGGER::error));
+        return makeSettings(Mirror.valueOf(compoundTag.getString("Mirror")), Rotation.valueOf(compoundTag.getString("Rotation")), RuinedPortalPiece.VerticalPlacement.byName(compoundTag.getString("VerticalPlacement")), blockPos, (RuinedPortalPiece.Properties)RuinedPortalPiece.Properties.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.get("Properties"))).getOrThrow(true, LOGGER::error));
     }
 
     private static StructurePlaceSettings makeSettings(Mirror mirror, Rotation rotation, RuinedPortalPiece.VerticalPlacement verticalPlacement, BlockPos blockPos, RuinedPortalPiece.Properties properties) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
index 0da0c5894297455e620ba549b46c953a867c4759..0f9872f54b686b514d475af03a785d46bfb65ca5 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
@@ -47,7 +47,7 @@ public abstract class StructurePiece {
     private Rotation rotation;
     protected int genDepth;
     private final StructurePieceType type;
-    private static final Set<Block> SHAPE_CHECK_BLOCKS = ImmutableSet.builder().add(Blocks.NETHER_BRICK_FENCE).add(Blocks.TORCH).add(Blocks.WALL_TORCH).add(Blocks.OAK_FENCE).add(Blocks.SPRUCE_FENCE).add(Blocks.DARK_OAK_FENCE).add(Blocks.ACACIA_FENCE).add(Blocks.BIRCH_FENCE).add(Blocks.JUNGLE_FENCE).add(Blocks.LADDER).add(Blocks.IRON_BARS).build();
+    private static final Set<Block> SHAPE_CHECK_BLOCKS = ImmutableSet.<Block>builder().add(Blocks.NETHER_BRICK_FENCE).add(Blocks.TORCH).add(Blocks.WALL_TORCH).add(Blocks.OAK_FENCE).add(Blocks.SPRUCE_FENCE).add(Blocks.DARK_OAK_FENCE).add(Blocks.ACACIA_FENCE).add(Blocks.BIRCH_FENCE).add(Blocks.JUNGLE_FENCE).add(Blocks.LADDER).add(Blocks.IRON_BARS).build();
 
     protected StructurePiece(StructurePieceType structurePieceType, int i, BoundingBox boundingBox) {
         this.type = structurePieceType;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSet.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSet.java
index 87ec958dc72770b8272368a5c834f8f5f18bc0ab..e4ecb9e910fff1d6ffdb5176a6e17b9efd199067 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSet.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSet.java
@@ -13,21 +13,14 @@ import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.levelgen.feature.ConfiguredStructureFeature;
 import net.minecraft.world.level.levelgen.structure.placement.StructurePlacement;
 
-public record StructureSet(List<StructureSet.StructureSelectionEntry> c, StructurePlacement d) {
-    private final List<StructureSet.StructureSelectionEntry> structures;
-    private final StructurePlacement placement;
-    public static final Codec<StructureSet> DIRECT_CODEC;
+public record StructureSet(List<StructureSet.StructureSelectionEntry> structures, StructurePlacement placement) {
+    public static final Codec<StructureSet> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(StructureSet.StructureSelectionEntry.CODEC.listOf().fieldOf("structures").forGetter(StructureSet::structures), StructurePlacement.CODEC.fieldOf("placement").forGetter(StructureSet::placement)).apply(instance, StructureSet::new));
     public static final Codec<Holder<StructureSet>> CODEC = RegistryFileCodec.create(Registry.STRUCTURE_SET_REGISTRY, DIRECT_CODEC);
 
     public StructureSet(Holder<ConfiguredStructureFeature<?, ?>> holder, StructurePlacement structurePlacement) {
         this(List.of(new StructureSet.StructureSelectionEntry(holder, 1)), structurePlacement);
     }
 
-    public StructureSet(List<StructureSet.StructureSelectionEntry> list, StructurePlacement structurePlacement) {
-        this.structures = list;
-        this.placement = structurePlacement;
-    }
-
     public static StructureSet.StructureSelectionEntry entry(Holder<ConfiguredStructureFeature<?, ?>> holder, int i) {
         return new StructureSet.StructureSelectionEntry(holder, i);
     }
@@ -44,31 +37,12 @@ public record StructureSet(List<StructureSet.StructureSelectionEntry> c, Structu
         return this.placement;
     }
 
-    static {
-        DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(StructureSet.StructureSelectionEntry.CODEC.listOf().fieldOf("structures").forGetter(StructureSet::structures), StructurePlacement.CODEC.fieldOf("placement").forGetter(StructureSet::placement)).apply(instance, StructureSet::new));
-    }
-
-    public static record StructureSelectionEntry(Holder<ConfiguredStructureFeature<?, ?>> b, int c) {
-        private final Holder<ConfiguredStructureFeature<?, ?>> structure;
-        private final int weight;
+    public static record StructureSelectionEntry(Holder<ConfiguredStructureFeature<?, ?>> structure, int weight) {
         public static final Codec<StructureSet.StructureSelectionEntry> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ConfiguredStructureFeature.CODEC.fieldOf("structure").forGetter(StructureSet.StructureSelectionEntry::structure), ExtraCodecs.POSITIVE_INT.fieldOf("weight").forGetter(StructureSet.StructureSelectionEntry::weight)).apply(instance, StructureSet.StructureSelectionEntry::new));
 
-        public StructureSelectionEntry(Holder<ConfiguredStructureFeature<?, ?>> holder, int i) {
-            this.structure = holder;
-            this.weight = i;
-        }
-
         public boolean generatesInMatchingBiome(Predicate<Holder<Biome>> predicate) {
             HolderSet<Biome> holderSet = this.structure().value().biomes();
             return holderSet.stream().anyMatch(predicate);
         }
-
-        public Holder<ConfiguredStructureFeature<?, ?>> structure() {
-            return this.structure;
-        }
-
-        public int weight() {
-            return this.weight;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSpawnOverride.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSpawnOverride.java
index c6c85fa3ff029e2c5f8700e430d17d417d6259a5..0e5b309e08202f53385d0bd82ce8ec6b2e2da536 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSpawnOverride.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSpawnOverride.java
@@ -7,24 +7,9 @@ import net.minecraft.util.StringRepresentable;
 import net.minecraft.util.random.WeightedRandomList;
 import net.minecraft.world.level.biome.MobSpawnSettings;
 
-public record StructureSpawnOverride(StructureSpawnOverride.BoundingBoxType b, WeightedRandomList<MobSpawnSettings.SpawnerData> c) {
-    private final StructureSpawnOverride.BoundingBoxType boundingBox;
-    private final WeightedRandomList<MobSpawnSettings.SpawnerData> spawns;
+public record StructureSpawnOverride(StructureSpawnOverride.BoundingBoxType boundingBox, WeightedRandomList<MobSpawnSettings.SpawnerData> spawns) {
     public static final Codec<StructureSpawnOverride> CODEC = RecordCodecBuilder.create((instance) -> instance.group(StructureSpawnOverride.BoundingBoxType.CODEC.fieldOf("bounding_box").forGetter(StructureSpawnOverride::boundingBox), WeightedRandomList.codec(MobSpawnSettings.SpawnerData.CODEC).fieldOf("spawns").forGetter(StructureSpawnOverride::spawns)).apply(instance, StructureSpawnOverride::new));
 
-    public StructureSpawnOverride(StructureSpawnOverride.BoundingBoxType boundingBoxType, WeightedRandomList<MobSpawnSettings.SpawnerData> weightedRandomList) {
-        this.boundingBox = boundingBoxType;
-        this.spawns = weightedRandomList;
-    }
-
-    public StructureSpawnOverride.BoundingBoxType boundingBox() {
-        return this.boundingBox;
-    }
-
-    public WeightedRandomList<MobSpawnSettings.SpawnerData> spawns() {
-        return this.spawns;
-    }
-
     public static enum BoundingBoxType implements StringRepresentable {
         PIECE("piece"),
         STRUCTURE("full");
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java
index 784def3267c94f09f13576bad51a8f088ca2a109..adc3ca187dc7043a69810c82bac450e23a8fac6b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java
@@ -68,7 +68,7 @@ public final class StructureStart {
             compoundTag.put("Children", this.pieceContainer.save(structurePieceSerializationContext));
             return compoundTag;
         } else {
-            compoundTag.putString("id", "INVALID");
+            compoundTag.putString("id", INVALID_START_ID);
             return compoundTag;
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGenerator.java
index 0066b6d3aaee0dd73c21909fb02e037e7d09c89d..3e78e92dacdcbaf7b366de8a85a0d011af07c69a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGenerator.java
@@ -11,51 +11,6 @@ import net.minecraft.world.level.levelgen.structure.templatesystem.StructureMana
 public interface PieceGenerator<C extends FeatureConfiguration> {
     void generatePieces(StructurePiecesBuilder var1, PieceGenerator.Context<C> var2);
 
-    public static record Context<C extends FeatureConfiguration>(C a, ChunkGenerator b, StructureManager c, ChunkPos d, LevelHeightAccessor e, WorldgenRandom f, long g) {
-        private final C config;
-        private final ChunkGenerator chunkGenerator;
-        private final StructureManager structureManager;
-        private final ChunkPos chunkPos;
-        private final LevelHeightAccessor heightAccessor;
-        private final WorldgenRandom random;
-        private final long seed;
-
-        public Context(C featureConfiguration, ChunkGenerator chunkGenerator, StructureManager structureManager, ChunkPos chunkPos, LevelHeightAccessor levelHeightAccessor, WorldgenRandom worldgenRandom, long l) {
-            this.config = featureConfiguration;
-            this.chunkGenerator = chunkGenerator;
-            this.structureManager = structureManager;
-            this.chunkPos = chunkPos;
-            this.heightAccessor = levelHeightAccessor;
-            this.random = worldgenRandom;
-            this.seed = l;
-        }
-
-        public C config() {
-            return this.config;
-        }
-
-        public ChunkGenerator chunkGenerator() {
-            return this.chunkGenerator;
-        }
-
-        public StructureManager structureManager() {
-            return this.structureManager;
-        }
-
-        public ChunkPos chunkPos() {
-            return this.chunkPos;
-        }
-
-        public LevelHeightAccessor heightAccessor() {
-            return this.heightAccessor;
-        }
-
-        public WorldgenRandom random() {
-            return this.random;
-        }
-
-        public long seed() {
-            return this.seed;
-        }
+    public static record Context<C>(C config, ChunkGenerator chunkGenerator, StructureManager structureManager, ChunkPos chunkPos, LevelHeightAccessor heightAccessor, WorldgenRandom random, long seed) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGeneratorSupplier.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGeneratorSupplier.java
index 8856c60c657ebe7013e4b5df599c389c11bcd8d6..3e60ae970a11c9fec4f6bb3f4eed8fa21516bfa9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGeneratorSupplier.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGeneratorSupplier.java
@@ -27,28 +27,7 @@ public interface PieceGeneratorSupplier<C extends FeatureConfiguration> {
         return (context) -> context.validBiomeOnTop(types);
     }
 
-    public static record Context<C extends FeatureConfiguration>(ChunkGenerator a, BiomeSource b, long c, ChunkPos d, C e, LevelHeightAccessor f, Predicate<Holder<Biome>> g, StructureManager h, RegistryAccess i) {
-        private final ChunkGenerator chunkGenerator;
-        private final BiomeSource biomeSource;
-        private final long seed;
-        private final ChunkPos chunkPos;
-        private final C config;
-        private final LevelHeightAccessor heightAccessor;
-        private final Predicate<Holder<Biome>> validBiome;
-        private final StructureManager structureManager;
-        private final RegistryAccess registryAccess;
-
-        public Context(ChunkGenerator chunkGenerator, BiomeSource biomeSource, long l, ChunkPos chunkPos, C featureConfiguration, LevelHeightAccessor levelHeightAccessor, Predicate<Holder<Biome>> predicate, StructureManager structureManager, RegistryAccess registryAccess) {
-            this.chunkGenerator = chunkGenerator;
-            this.biomeSource = biomeSource;
-            this.seed = l;
-            this.chunkPos = chunkPos;
-            this.config = featureConfiguration;
-            this.heightAccessor = levelHeightAccessor;
-            this.validBiome = predicate;
-            this.structureManager = structureManager;
-            this.registryAccess = registryAccess;
-        }
+    public static record Context<C extends FeatureConfiguration>(ChunkGenerator chunkGenerator, BiomeSource biomeSource, long seed, ChunkPos chunkPos, C config, LevelHeightAccessor heightAccessor, Predicate<Holder<Biome>> validBiome, StructureManager structureManager, RegistryAccess registryAccess) {
 
         public boolean validBiomeOnTop(Heightmap.Types types) {
             int i = this.chunkPos.getMiddleBlockX();
@@ -68,41 +47,5 @@ public interface PieceGeneratorSupplier<C extends FeatureConfiguration> {
             int[] ints = this.getCornerHeights(i3, i, i4, i2);
             return Math.min(Math.min(ints[0], ints[1]), Math.min(ints[2], ints[3]));
         }
-
-        public ChunkGenerator chunkGenerator() {
-            return this.chunkGenerator;
-        }
-
-        public BiomeSource biomeSource() {
-            return this.biomeSource;
-        }
-
-        public long seed() {
-            return this.seed;
-        }
-
-        public ChunkPos chunkPos() {
-            return this.chunkPos;
-        }
-
-        public C config() {
-            return this.config;
-        }
-
-        public LevelHeightAccessor heightAccessor() {
-            return this.heightAccessor;
-        }
-
-        public Predicate<Holder<Biome>> validBiome() {
-            return this.validBiome;
-        }
-
-        public StructureManager structureManager() {
-            return this.structureManager;
-        }
-
-        public RegistryAccess registryAccess() {
-            return this.registryAccess;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java
index a4aadc14bd5e549436771c9378b53ba82909c570..537d00400f83beddd9cd7e1c4723ef1bcc651cec 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java
@@ -16,14 +16,13 @@ import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.levelgen.structure.StructurePiece;
 import org.slf4j.Logger;
 
-public record PiecesContainer(List<StructurePiece> a) {
-    private final List<StructurePiece> pieces;
+public record PiecesContainer(List<StructurePiece> pieces) {
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final ResourceLocation JIGSAW_RENAME = new ResourceLocation("jigsaw");
-    private static final Map<ResourceLocation, ResourceLocation> RENAMES = ImmutableMap.builder().put(new ResourceLocation("nvi"), JIGSAW_RENAME).put(new ResourceLocation("pcp"), JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), JIGSAW_RENAME).put(new ResourceLocation("runtime"), JIGSAW_RENAME).build();
+    private static final Map<ResourceLocation, ResourceLocation> RENAMES = ImmutableMap.<ResourceLocation, ResourceLocation>builder().put(new ResourceLocation("nvi"), JIGSAW_RENAME).put(new ResourceLocation("pcp"), JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), JIGSAW_RENAME).put(new ResourceLocation("runtime"), JIGSAW_RENAME).build();
 
-    public PiecesContainer(List<StructurePiece> list) {
-        this.pieces = List.copyOf(list);
+    public PiecesContainer(List<StructurePiece> pieces) {
+        this.pieces = List.copyOf(pieces);
     }
 
     public boolean isEmpty() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext.java
index b2be92a87da95e916d39ae7a2952422a27be53cf..b4152f47ad3e31db882264e1e68aeb79d3865882 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext.java
@@ -6,31 +6,9 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 
-public record StructurePieceSerializationContext(ResourceManager a, RegistryAccess b, StructureManager c) {
-    private final ResourceManager resourceManager;
-    private final RegistryAccess registryAccess;
-    private final StructureManager structureManager;
-
-    public StructurePieceSerializationContext(ResourceManager resourceManager, RegistryAccess registryAccess, StructureManager structureManager) {
-        this.resourceManager = resourceManager;
-        this.registryAccess = registryAccess;
-        this.structureManager = structureManager;
-    }
-
+public record StructurePieceSerializationContext(ResourceManager resourceManager, RegistryAccess registryAccess, StructureManager structureManager) {
     public static StructurePieceSerializationContext fromLevel(ServerLevel serverLevel) {
         MinecraftServer minecraftServer = serverLevel.getServer();
         return new StructurePieceSerializationContext(minecraftServer.getResourceManager(), minecraftServer.registryAccess(), minecraftServer.getStructureManager());
     }
-
-    public ResourceManager resourceManager() {
-        return this.resourceManager;
-    }
-
-    public RegistryAccess registryAccess() {
-        return this.registryAccess;
-    }
-
-    public StructureManager structureManager() {
-        return this.structureManager;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/ConcentricRingsStructurePlacement.java b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/ConcentricRingsStructurePlacement.java
index cb5680a8f8b51b4bccbb1f091c56e537a6589aaf..d7bb4117f5ddaf0f47a3c3fcf5437ed68147bee7 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/ConcentricRingsStructurePlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/ConcentricRingsStructurePlacement.java
@@ -6,18 +6,9 @@ import java.util.List;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 
-public record ConcentricRingsStructurePlacement(int c, int d, int e) implements StructurePlacement {
-    private final int distance;
-    private final int spread;
-    private final int count;
+public record ConcentricRingsStructurePlacement(int distance, int spread, int count) implements StructurePlacement {
     public static final Codec<ConcentricRingsStructurePlacement> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.intRange(0, 1023).fieldOf("distance").forGetter(ConcentricRingsStructurePlacement::distance), Codec.intRange(0, 1023).fieldOf("spread").forGetter(ConcentricRingsStructurePlacement::spread), Codec.intRange(1, 4095).fieldOf("count").forGetter(ConcentricRingsStructurePlacement::count)).apply(instance, ConcentricRingsStructurePlacement::new));
 
-    public ConcentricRingsStructurePlacement(int i, int i2, int i3) {
-        this.distance = i;
-        this.spread = i2;
-        this.count = i3;
-    }
-
     public boolean isFeatureChunk(ChunkGenerator chunkGenerator, long l, int i, int i2) {
         List<ChunkPos> list = chunkGenerator.getRingPositionsFor(this);
         return list == null ? false : list.contains(new ChunkPos(i, i2));
@@ -26,16 +17,4 @@ public record ConcentricRingsStructurePlacement(int c, int d, int e) implements
     public StructurePlacementType<?> type() {
         return StructurePlacementType.CONCENTRIC_RINGS;
     }
-
-    public int distance() {
-        return this.distance;
-    }
-
-    public int spread() {
-        return this.spread;
-    }
-
-    public int count() {
-        return this.count;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java
index bec8d3561145d94b9a39d86424ab19a747c64614..3127767430410136b1c62fb660e592be87a81b67 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java
@@ -10,24 +10,11 @@ import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.LegacyRandomSource;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 
-public record RandomSpreadStructurePlacement(int c, int d, RandomSpreadType e, int f, Vec3i g) implements StructurePlacement {
-    private final int spacing;
-    private final int separation;
-    private final RandomSpreadType spreadType;
-    private final int salt;
-    private final Vec3i locateOffset;
-    public static final Codec<RandomSpreadStructurePlacement> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.intRange(0, 4096).fieldOf("spacing").forGetter(RandomSpreadStructurePlacement::spacing), Codec.intRange(0, 4096).fieldOf("separation").forGetter(RandomSpreadStructurePlacement::separation), RandomSpreadType.CODEC.optionalFieldOf("spread_type", RandomSpreadType.LINEAR).forGetter(RandomSpreadStructurePlacement::spreadType), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("salt").forGetter(RandomSpreadStructurePlacement::salt), Vec3i.offsetCodec(16).optionalFieldOf("locate_offset", Vec3i.ZERO).forGetter(RandomSpreadStructurePlacement::locateOffset)).apply(instance, RandomSpreadStructurePlacement::new)).flatXmap((randomSpreadStructurePlacement) -> randomSpreadStructurePlacement.spacing <= randomSpreadStructurePlacement.separation ? DataResult.error("Spacing has to be larger than separation") : DataResult.success(randomSpreadStructurePlacement), DataResult::success).codec();
+public record RandomSpreadStructurePlacement(int spacing, int separation, RandomSpreadType spreadType, int salt, Vec3i locateOffset) implements StructurePlacement {
+    public static final Codec<RandomSpreadStructurePlacement> CODEC = RecordCodecBuilder.<RandomSpreadStructurePlacement>mapCodec((instance) -> instance.group(Codec.intRange(0, 4096).fieldOf("spacing").forGetter(RandomSpreadStructurePlacement::spacing), Codec.intRange(0, 4096).fieldOf("separation").forGetter(RandomSpreadStructurePlacement::separation), RandomSpreadType.CODEC.optionalFieldOf("spread_type", RandomSpreadType.LINEAR).forGetter(RandomSpreadStructurePlacement::spreadType), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("salt").forGetter(RandomSpreadStructurePlacement::salt), Vec3i.offsetCodec(16).optionalFieldOf("locate_offset", Vec3i.ZERO).forGetter(RandomSpreadStructurePlacement::locateOffset)).apply(instance, RandomSpreadStructurePlacement::new)).flatXmap((randomSpreadStructurePlacement) -> randomSpreadStructurePlacement.spacing <= randomSpreadStructurePlacement.separation ? DataResult.error("Spacing has to be larger than separation") : DataResult.success(randomSpreadStructurePlacement), DataResult::success).codec();
 
-    public RandomSpreadStructurePlacement(int i, int i2, RandomSpreadType randomSpreadType, int i3) {
-        this(i, i2, randomSpreadType, i3, Vec3i.ZERO);
-    }
-
-    public RandomSpreadStructurePlacement(int i, int i2, RandomSpreadType randomSpreadType, int i3, Vec3i vec3i) {
-        this.spacing = i;
-        this.separation = i2;
-        this.spreadType = randomSpreadType;
-        this.salt = i3;
-        this.locateOffset = vec3i;
+    public RandomSpreadStructurePlacement(int spacing, int separation, RandomSpreadType spreadType, int salt) {
+        this(spacing, separation, spreadType, salt, Vec3i.ZERO);
     }
 
     public ChunkPos getPotentialFeatureChunk(long l, int i, int i2) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pools/JigsawPlacement.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pools/JigsawPlacement.java
index d21d9a8ebd071364773cd25a2802a5dd1b18a222..91043bfb03f0a2f9a2adc1d9bb3e66b4b1cb7b8f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pools/JigsawPlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pools/JigsawPlacement.java
@@ -76,7 +76,7 @@ public class JigsawPlacement {
             } else {
                 int i5 = boundingBox.minY() + poolElementStructurePiece.getGroundLevelDelta();
                 poolElementStructurePiece.move(0, i3 - i5, 0);
-                return Optional.of((PieceGenerator<>)(structurePiecesBuilder, contextx) -> {
+                return Optional.of((structurePiecesBuilder, contextx) -> {
                     List<PoolElementStructurePiece> list = Lists.newArrayList();
                     list.add(poolElementStructurePiece);
                     if (jigsawConfiguration.maxDepth() > 0) {
@@ -200,12 +200,12 @@ public class JigsawPlacement {
                                         if (!boundingBox2.isInside(structureBlockInfox.pos.relative(JigsawBlock.getFrontFacing(structureBlockInfox.state)))) {
                                             return 0;
                                         } else {
-                                            ResourceLocation resourceLocation = new ResourceLocation(structureBlockInfox.nbt.getString("pool"));
-                                            Optional<StructureTemplatePool> optional = this.pools.getOptional(resourceLocation);
-                                            Optional<StructureTemplatePool> optional2 = optional.flatMap((structureTemplatePool) -> this.pools.getOptional(structureTemplatePool.getFallback()));
-                                            int i = optional.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
-                                            int i2 = optional2.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
-                                            return Math.max(i, i2);
+                                            ResourceLocation resourceLocationIn = new ResourceLocation(structureBlockInfox.nbt.getString("pool"));
+                                            Optional<StructureTemplatePool> optionalIn = this.pools.getOptional(resourceLocationIn);
+                                            Optional<StructureTemplatePool> optionalIn2 = optionalIn.flatMap((structureTemplatePool) -> this.pools.getOptional(structureTemplatePool.getFallback()));
+                                            int ix = optionalIn.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
+                                            int i2x = optionalIn2.map((structureTemplatePool) -> structureTemplatePool.getMaxSize(this.structureManager)).orElse(0);
+                                            return Math.max(ix, i2x);
                                         }
                                     }).max().orElse(0);
                                 } else {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool.java
index 3fac4005968d01c429103d88df6665ce80db618d..2e7c463b8fd4df85b8583f43f502aa6dcfbd6a03 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool.java
@@ -29,7 +29,7 @@ import org.slf4j.Logger;
 public class StructureTemplatePool {
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final int SIZE_UNSET = Integer.MIN_VALUE;
-    public static final Codec<StructureTemplatePool> DIRECT_CODEC;
+    public static final Codec<StructureTemplatePool> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName), ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback), Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.intRange(1, 150).fieldOf("weight")).codec().listOf().fieldOf("elements").forGetter((structureTemplatePool) -> structureTemplatePool.rawTemplates)).apply(instance, StructureTemplatePool::new));
     public static final Codec<Holder<StructureTemplatePool>> CODEC = RegistryFileCodec.create(Registry.TEMPLATE_POOL_REGISTRY, DIRECT_CODEC);
     private final ResourceLocation name;
     private final List<Pair<StructurePoolElement, Integer>> rawTemplates;
@@ -98,10 +98,6 @@ public class StructureTemplatePool {
         return this.templates.size();
     }
 
-    static {
-        DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("name").forGetter(StructureTemplatePool::getName), ResourceLocation.CODEC.fieldOf("fallback").forGetter(StructureTemplatePool::getFallback), Codec.mapPair(StructurePoolElement.CODEC.fieldOf("element"), Codec.intRange(1, 150).fieldOf("weight")).codec().listOf().fieldOf("elements").forGetter((structureTemplatePool) -> structureTemplatePool.rawTemplates)).apply(instance, StructureTemplatePool::new));
-    }
-
     public static enum Projection implements StringRepresentable {
         TERRAIN_MATCHING("terrain_matching", ImmutableList.of(new GravityProcessor(Heightmap.Types.WORLD_SURFACE_WG, -1))),
         RIGID("rigid", ImmutableList.of());
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
index 3c52974e01653648886fa25c9018884342856166..4508041542a28f3eea268806a88cf6aa7010370f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -130,7 +130,7 @@ public class StructureTemplate {
     }
 
     private static List<StructureTemplate.StructureBlockInfo> buildInfoList(List<StructureTemplate.StructureBlockInfo> list, List<StructureTemplate.StructureBlockInfo> list2, List<StructureTemplate.StructureBlockInfo> list3) {
-        Comparator<StructureTemplate.StructureBlockInfo> comparator = Comparator.comparingInt((structureBlockInfo) -> structureBlockInfo.pos.getY()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getX()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getZ());
+        Comparator<StructureTemplate.StructureBlockInfo> comparator = Comparator.<StructureBlockInfo>comparingInt((structureBlockInfo) -> structureBlockInfo.pos.getY()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getX()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getZ());
         list.sort(comparator);
         list3.sort(comparator);
         list2.sort(comparator);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/synth/NormalNoise.java b/src/main/java/net/minecraft/world/level/levelgen/synth/NormalNoise.java
index ec607fedd6d7e08efe21aada05e360f8a87c7e28..b86bbf29976c7c46f7cd4aece83f0a395910c28d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/synth/NormalNoise.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/synth/NormalNoise.java
@@ -94,9 +94,7 @@ public class NormalNoise {
         stringBuilder.append("}");
     }
 
-    public static record NoiseParameters(int c, DoubleList d) {
-        final int firstOctave;
-        final DoubleList amplitudes;
+    public static record NoiseParameters(int firstOctave, DoubleList amplitudes) {
         public static final Codec<NormalNoise.NoiseParameters> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("firstOctave").forGetter(NormalNoise.NoiseParameters::firstOctave), Codec.DOUBLE.listOf().fieldOf("amplitudes").forGetter(NormalNoise.NoiseParameters::amplitudes)).apply(instance, NormalNoise.NoiseParameters::new));
         public static final Codec<Holder<NormalNoise.NoiseParameters>> CODEC = RegistryFileCodec.create(Registry.NOISE_REGISTRY, DIRECT_CODEC);
 
@@ -107,18 +105,5 @@ public class NormalNoise {
         public NoiseParameters(int i, double d, double... doubles) {
             this(i, Util.make(new DoubleArrayList(doubles), (doubleArrayList) -> doubleArrayList.add(0, d)));
         }
-
-        public NoiseParameters(int i, DoubleList doubleList) {
-            this.firstOctave = i;
-            this.amplitudes = doubleList;
-        }
-
-        public int firstOctave() {
-            return this.firstOctave;
-        }
-
-        public DoubleList amplitudes() {
-            return this.amplitudes;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
index fd9bed60f07038c1b5bd9340d2e203b65505cdf1..a4d4751b3500deea050139fe6bcff5744cad4258 100644
--- a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
+++ b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
@@ -85,13 +85,13 @@ public abstract class DynamicGraphMinFixedPoint {
 
     public void removeIf(LongPredicate longPredicate) {
         LongList longList = new LongArrayList();
-        this.computedLevels.keySet().forEach((l) -> {
+        this.computedLevels.keySet().forEach((java.util.function.LongConsumer) (l) -> {
             if (longPredicate.test(l)) {
                 longList.add(l);
             }
 
         });
-        longList.forEach(this::removeFromQueue);
+        longList.forEach((java.util.function.LongConsumer) this::removeFromQueue);
     }
 
     private void dequeue(long l, int i, int i2, boolean flag) {
diff --git a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
index bed2a98ffc45aae6dd4812fb611e1e7bfdce4abe..5c9ec183e477e488c582509972dd09e1dddb1b15 100644
--- a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
@@ -203,10 +203,10 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
 
             this.toRemove.clear();
             this.hasToRemove = false;
-            ObjectIterator<Entry<DataLayer>> objectIterator = this.queuedSections.long2ObjectEntrySet().iterator();
+            ObjectIterator<Entry<DataLayer>> objectIteratorIn = this.queuedSections.long2ObjectEntrySet().iterator();
 
-            while(objectIterator.hasNext()) {
-                Entry<DataLayer> entry = (Entry)objectIterator.next();
+            while(objectIteratorIn.hasNext()) {
+                Entry<DataLayer> entry = objectIteratorIn.next();
                 long l3 = entry.getLongKey();
                 if (this.storingLightForSection(l3)) {
                     DataLayer dataLayer3 = (DataLayer)entry.getValue();
@@ -236,13 +236,13 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
             }
 
             this.untrustedSections.clear();
-            objectIterator = this.queuedSections.long2ObjectEntrySet().iterator();
+            objectIteratorIn = this.queuedSections.long2ObjectEntrySet().iterator();
 
-            while(objectIterator.hasNext()) {
-                Entry<DataLayer> entry2 = (Entry)objectIterator.next();
+            while(objectIteratorIn.hasNext()) {
+                Entry<DataLayer> entry2 = (Entry)objectIteratorIn.next();
                 long l6 = entry2.getLongKey();
                 if (this.storingLightForSection(l6)) {
-                    objectIterator.remove();
+                    objectIteratorIn.remove();
                 }
             }
 
diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index 8cef607e91cae47d58eda965bbfff7332a9007f2..d14fb555951bf480db03af9bc3088c0102eb472c 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -262,16 +262,16 @@ public abstract class FlowingFluid extends Fluid {
                 BlockPos blockPos3 = blockPos.relative(direction2);
                 short s = getCacheKey(blockPos2, blockPos3);
                 Pair<BlockState, FluidState> pair = short2ObjectMap.computeIfAbsent(s, (sx) -> {
-                    BlockState blockState = levelReader.getBlockState(blockPos3);
-                    return Pair.of(blockState, blockState.getFluidState());
+                    BlockState blockStateIn = levelReader.getBlockState(blockPos3);
+                    return Pair.of(blockStateIn, blockStateIn.getFluidState());
                 });
                 BlockState blockState2 = (BlockState)pair.getFirst();
                 FluidState fluidState = (FluidState)pair.getSecond();
                 if (this.canPassThrough(levelReader, this.getFlowing(), blockPos, blockState, direction2, blockPos3, blockState2, fluidState)) {
                     boolean flag = short2BooleanMap.computeIfAbsent(s, (sx) -> {
-                        BlockPos blockPos2 = blockPos3.below();
-                        BlockState blockState2 = levelReader.getBlockState(blockPos2);
-                        return this.isWaterHole(levelReader, this.getFlowing(), blockPos3, blockState2, blockPos2, blockState2);
+                        BlockPos blockPos2In = blockPos3.below();
+                        BlockState blockState2In = levelReader.getBlockState(blockPos2In);
+                        return this.isWaterHole(levelReader, this.getFlowing(), blockPos3, blockState2, blockPos2In, blockState2In);
                     });
                     if (flag) {
                         return i;
@@ -332,8 +332,8 @@ public abstract class FlowingFluid extends Fluid {
             BlockPos blockPos2 = blockPos.relative(direction);
             short s = getCacheKey(blockPos, blockPos2);
             Pair<BlockState, FluidState> pair = short2ObjectMap.computeIfAbsent(s, (sx) -> {
-                BlockState blockState = levelReader.getBlockState(blockPos2);
-                return Pair.of(blockState, blockState.getFluidState());
+                BlockState blockStateIn = levelReader.getBlockState(blockPos2);
+                return Pair.of(blockStateIn, blockStateIn.getFluidState());
             });
             BlockState blockState2 = (BlockState)pair.getFirst();
             FluidState fluidState = (FluidState)pair.getSecond();
@@ -341,8 +341,8 @@ public abstract class FlowingFluid extends Fluid {
             if (this.canPassThrough(levelReader, fluidState2.getType(), blockPos, blockState, direction, blockPos2, blockState2, fluidState)) {
                 BlockPos blockPos3 = blockPos2.below();
                 boolean flag = short2BooleanMap.computeIfAbsent(s, (sx) -> {
-                    BlockState blockState2 = levelReader.getBlockState(blockPos3);
-                    return this.isWaterHole(levelReader, this.getFlowing(), blockPos2, blockState2, blockPos3, blockState2);
+                    BlockState blockState2In = levelReader.getBlockState(blockPos3);
+                    return this.isWaterHole(levelReader, this.getFlowing(), blockPos2, blockState2, blockPos3, blockState2In);
                 });
                 int i2;
                 if (flag) {
diff --git a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
index 7cadd6ef88f0904ce5748e269f6713840d416739..a97e8481af27dc6692b8d187ab751098b01dad02 100644
--- a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
+++ b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
@@ -43,12 +43,12 @@ public class PortalForcer {
         PoiManager poiManager = this.level.getPoiManager();
         int i = flag ? 16 : 128;
         poiManager.ensureLoadedAndValid(this.level, blockPos, i);
-        Optional<PoiRecord> optional = poiManager.getInSquare((poiType) -> poiType == PoiType.NETHER_PORTAL, blockPos, i, PoiManager.Occupancy.ANY).filter((poiRecord) -> worldBorder.isWithinBounds(poiRecord.getPos())).sorted(Comparator.comparingDouble((poiRecord) -> poiRecord.getPos().distSqr(blockPos)).thenComparingInt((poiRecord) -> poiRecord.getPos().getY())).filter((poiRecord) -> this.level.getBlockState(poiRecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS)).findFirst();
+        Optional<PoiRecord> optional = poiManager.getInSquare((poiType) -> poiType == PoiType.NETHER_PORTAL, blockPos, i, PoiManager.Occupancy.ANY).filter((poiRecord) -> worldBorder.isWithinBounds(poiRecord.getPos())).sorted(Comparator.<PoiRecord>comparingDouble((poiRecord) -> poiRecord.getPos().distSqr(blockPos)).thenComparingInt((poiRecord) -> poiRecord.getPos().getY())).filter((poiRecord) -> this.level.getBlockState(poiRecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS)).findFirst();
         return optional.map((poiRecord) -> {
-            BlockPos blockPos = poiRecord.getPos();
-            this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(blockPos), 3, blockPos);
-            BlockState blockState = this.level.getBlockState(blockPos);
-            return BlockUtil.getLargestRectangleAround(blockPos, blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockPosx) -> this.level.getBlockState(blockPosx) == blockState);
+            BlockPos pos = poiRecord.getPos();
+            this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(pos), 3, pos);
+            BlockState blockState = this.level.getBlockState(pos);
+            return BlockUtil.getLargestRectangleAround(pos, blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockPosx) -> this.level.getBlockState(blockPosx) == blockState);
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index 9630e25ddc692a8d19c0a701bde62c4bc41d2bd8..0f16b0a5f68f18285ce4fe53571be49e37590fc8 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -86,20 +86,20 @@ public class LevelStorageSource {
 
     private static <T> Pair<WorldGenSettings, Lifecycle> readWorldGenSettings(Dynamic<T> dynamic, DataFixer dataFixer, int i) {
         Dynamic<T> dynamic2 = dynamic.get("WorldGenSettings").orElseEmptyMap();
-        UnmodifiableIterator dynamic3 = OLD_SETTINGS_KEYS.iterator();
+        UnmodifiableIterator this_is_not_dynamic = OLD_SETTINGS_KEYS.iterator();
 
-        while(dynamic3.hasNext()) {
-            String s = (String)dynamic3.next();
+        while(this_is_not_dynamic.hasNext()) {
+            String s = (String)this_is_not_dynamic.next();
             Optional<? extends Dynamic<?>> optional = dynamic.get(s).result();
             if (optional.isPresent()) {
                 dynamic2 = dynamic2.set(s, optional.get());
             }
         }
 
-        Dynamic<T> dynamic3 = dataFixer.update(References.WORLD_GEN_SETTINGS, dynamic2, i, SharedConstants.getCurrentVersion().getWorldVersion());
-        DataResult<WorldGenSettings> dataResult = WorldGenSettings.CODEC.parse(dynamic3);
+        Dynamic<T> dynamic3In = dataFixer.update(References.WORLD_GEN_SETTINGS, dynamic2, i, SharedConstants.getCurrentVersion().getWorldVersion());
+        DataResult<WorldGenSettings> dataResult = WorldGenSettings.CODEC.parse(dynamic3In);
         return Pair.of((WorldGenSettings)dataResult.resultOrPartial(Util.prefix("WorldGenSettings: ", LOGGER::error)).orElseGet(() -> {
-            RegistryAccess registryAccess = RegistryAccess.readFromDisk(dynamic3);
+            RegistryAccess registryAccess = RegistryAccess.readFromDisk(dynamic3In);
             return WorldGenSettings.makeDefault(registryAccess);
         }), dataResult.lifecycle());
     }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java b/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
index d4de70655e0c38754598ae3d89e19ee5e00c8204..e43e4f5127b065c3be86439cef25738e8f305cf9 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/GsonAdapterFactory.java
@@ -111,7 +111,7 @@ public class GsonAdapterFactory {
             } else {
                 JsonObject jsonObject = new JsonObject();
                 jsonObject.addProperty(this.typeKey, this.registry.getKey(serializerType).toString());
-                serializerType.getSerializer().serialize(jsonObject, object, jsonSerializationContext);
+                ((Serializer) serializerType.getSerializer()).serialize(jsonObject, object, jsonSerializationContext);
                 return jsonObject;
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java b/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
index 96e168fa3dc2abad90e1061d511b38061ceef994..e43914bad2c13a75a1868f452d1a54e6a2112004 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
@@ -53,12 +53,12 @@ public class ValidationContext {
     }
 
     public ValidationContext enterTable(String s, ResourceLocation resourceLocation) {
-        ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.builder().addAll(this.visitedTables).add(resourceLocation).build();
+        ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.<ResourceLocation>builder().addAll(this.visitedTables).add(resourceLocation).build();
         return new ValidationContext(this.problems, () -> this.getContext() + s, this.params, this.conditionResolver, this.visitedConditions, this.tableResolver, immutableSet);
     }
 
     public ValidationContext enterCondition(String s, ResourceLocation resourceLocation) {
-        ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.builder().addAll(this.visitedConditions).add(resourceLocation).build();
+        ImmutableSet<ResourceLocation> immutableSet = ImmutableSet.<ResourceLocation>builder().addAll(this.visitedConditions).add(resourceLocation).build();
         return new ValidationContext(this.problems, () -> this.getContext() + s, this.params, this.conditionResolver, immutableSet, this.tableResolver, this.visitedTables);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
index 595502c2cbc893dec5666131b1a1224a5c695a55..2c1ca826c513cbeb11188bcd5ddc318730356104 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
@@ -29,8 +29,8 @@ public class EntryGroup extends CompositeEntryBase {
             };
         default:
             return (lootContext, consumer) -> {
-                for(ComposableEntryContainer composableEntryContainer : composableEntryContainers) {
-                    composableEntryContainer.expand(lootContext, consumer);
+                for(ComposableEntryContainer composableEntryContainerIn : composableEntryContainers) {
+                    composableEntryContainerIn.expand(lootContext, consumer);
                 }
 
                 return true;
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
index f0f0de0f97f66da84adff83f3b35d9fc5c883933..60e87cb0b444c4a4e7a79945d845d4bf6cdb54b1 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
@@ -47,7 +47,7 @@ public class EnchantRandomlyFunction extends LootItemConditionalFunction {
         Enchantment enchantment;
         if (this.enchantments.isEmpty()) {
             boolean flag = itemStack.is(Items.BOOK);
-            List<Enchantment> list = Registry.ENCHANTMENT.stream().filter(Enchantment::isDiscoverable).filter((enchantment) -> flag || enchantment.canEnchant(itemStack)).collect(Collectors.toList());
+            List<Enchantment> list = Registry.ENCHANTMENT.stream().filter(Enchantment::isDiscoverable).filter((enchantmentIn) -> flag || enchantmentIn.canEnchant(itemStack)).collect(Collectors.toList());
             if (list.isEmpty()) {
                 LOGGER.warn("Couldn't find a compatible enchantment for {}", itemStack);
                 return itemStack;
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
index cd8d2f792f8af7b1a2a7aad16c8fb42a94fd9a9e..e1b7a6f2fff504345910c0856b10d0dba923b053 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
@@ -55,8 +55,8 @@ public class LootItemFunctions {
             return (itemStack, lootContext) -> (ItemStack)biFunction2.apply((ItemStack)biFunction.apply(itemStack, lootContext), lootContext);
         default:
             return (itemStack, lootContext) -> {
-                for(BiFunction<ItemStack, LootContext, ItemStack> biFunction : biFunctions) {
-                    itemStack = (ItemStack)biFunction.apply(itemStack, lootContext);
+                for(BiFunction<ItemStack, LootContext, ItemStack> biFunctionIn : biFunctions) {
+                    itemStack = (ItemStack)biFunctionIn.apply(itemStack, lootContext);
                 }
 
                 return itemStack;
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
index e6ca1917505a7163ba288c431f927d23972b37b7..2f21f574c2ae5f60ce798e9681445fe06bca2026 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
@@ -86,10 +86,10 @@ public class SetBannerPatternFunction extends LootItemConditionalFunction {
             super.serialize(jsonObject, setBannerPatternFunction, jsonSerializationContext);
             JsonArray jsonArray = new JsonArray();
             setBannerPatternFunction.patterns.forEach((pair) -> {
-                JsonObject jsonObject = new JsonObject();
-                jsonObject.addProperty("pattern", ((BannerPattern)pair.getFirst()).getFilename());
-                jsonObject.addProperty("color", ((DyeColor)pair.getSecond()).getName());
-                jsonArray.add(jsonObject);
+                JsonObject jsonObjectIn = new JsonObject();
+                jsonObjectIn.addProperty("pattern", ((BannerPattern)pair.getFirst()).getFilename());
+                jsonObjectIn.addProperty("color", ((DyeColor)pair.getSecond()).getName());
+                jsonArray.add(jsonObjectIn);
             });
             jsonObject.add("patterns", jsonArray);
             jsonObject.addProperty("append", setBannerPatternFunction.append);
diff --git a/src/main/java/net/minecraft/world/level/timers/TimerQueue.java b/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
index 325c558b6fcd738579d5e2cdcb6f5595d325162f..3ebc89f4bcfa87d4bc68696556ef2d89812d7f79 100644
--- a/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
+++ b/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
@@ -28,7 +28,7 @@ public class TimerQueue<T> {
     private final Table<String, Long, TimerQueue.Event<T>> events = HashBasedTable.create();
 
     private static <T> Comparator<TimerQueue.Event<T>> createComparator() {
-        return Comparator.comparingLong((event) -> event.triggerTime).thenComparing((event) -> event.sequentialId);
+        return Comparator.<Event<T>>comparingLong((event) -> event.triggerTime).thenComparing((event) -> event.sequentialId);
     }
 
     public TimerQueue(TimerCallbacks<T> timerCallbacks, Stream<Dynamic<Tag>> stream) {
diff --git a/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java b/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java
index 1454d50ade65cac9c90a31eaf85014a66f7697e0..eacb549cb0c2fcd0bfe03cd561e3bbeadedf143a 100644
--- a/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java
+++ b/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java
@@ -33,10 +33,10 @@ public class BlackholeTickAccess {
     };
 
     public static <T> TickContainerAccess<T> emptyContainer() {
-        return CONTAINER_BLACKHOLE;
+        return (TickContainerAccess<T>) CONTAINER_BLACKHOLE;
     }
 
     public static <T> LevelTickAccess<T> emptyLevelList() {
-        return LEVEL_BLACKHOLE;
+        return (LevelTickAccess<T>) LEVEL_BLACKHOLE;
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/ticks/LevelTicks.java b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
index 8d34f778a96b7a9974129089cc4eca42564d6c6a..6d70fa1c7c96125b07faee8de23f80747c2e70ed 100644
--- a/src/main/java/net/minecraft/world/ticks/LevelTicks.java
+++ b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
@@ -75,7 +75,7 @@ public class LevelTicks<T> implements LevelTickAccess<T> {
         long l = ChunkPos.asLong(scheduledTick.pos());
         LevelChunkTicks<T> levelChunkTicks = (LevelChunkTicks)this.allContainers.get(l);
         if (levelChunkTicks == null) {
-            Util.pauseInIde((T)(new IllegalStateException("Trying to schedule tick in not loaded position " + scheduledTick.pos())));
+            Util.pauseInIde((new IllegalStateException("Trying to schedule tick in not loaded position " + scheduledTick.pos())));
         } else {
             levelChunkTicks.schedule(scheduledTick);
         }
diff --git a/src/main/java/net/minecraft/world/ticks/SavedTick.java b/src/main/java/net/minecraft/world/ticks/SavedTick.java
index 4698dcf5e997fcaad666bf84f866f06dae6f0c38..2d90418bab686fff98e17c0805c2aed64f3bd539 100644
--- a/src/main/java/net/minecraft/world/ticks/SavedTick.java
+++ b/src/main/java/net/minecraft/world/ticks/SavedTick.java
@@ -10,11 +10,7 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.world.level.ChunkPos;
 
-public record SavedTick<T>(T b, BlockPos c, int d, TickPriority e) {
-    private final T type;
-    private final BlockPos pos;
-    private final int delay;
-    private final TickPriority priority;
+public record SavedTick<T>(T type, BlockPos pos, int delay, TickPriority priority) {
     private static final String TAG_ID = "i";
     private static final String TAG_X = "x";
     private static final String TAG_Y = "y";
@@ -37,13 +33,6 @@ public record SavedTick<T>(T b, BlockPos c, int d, TickPriority e) {
         }
     };
 
-    public SavedTick(T object, BlockPos blockPos, int i, TickPriority tickPriority) {
-        this.type = object;
-        this.pos = blockPos;
-        this.delay = i;
-        this.priority = tickPriority;
-    }
-
     public static <T> void loadTickList(ListTag listTag, Function<String, Optional<T>> function, ChunkPos chunkPos, Consumer<SavedTick<T>> consumer) {
         long l = chunkPos.toLong();
 
@@ -92,20 +81,4 @@ public record SavedTick<T>(T b, BlockPos c, int d, TickPriority e) {
     public static <T> SavedTick<T> probe(T object, BlockPos blockPos) {
         return new SavedTick<>(object, blockPos, 0, TickPriority.NORMAL);
     }
-
-    public T type() {
-        return this.type;
-    }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public int delay() {
-        return this.delay;
-    }
-
-    public TickPriority priority() {
-        return this.priority;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/ticks/ScheduledTick.java b/src/main/java/net/minecraft/world/ticks/ScheduledTick.java
index 472e5ddf020a3c1afc413f1eeb5c74fd5d748cef..7e853be6fc25c293310f621c7482e1232b7a1c82 100644
--- a/src/main/java/net/minecraft/world/ticks/ScheduledTick.java
+++ b/src/main/java/net/minecraft/world/ticks/ScheduledTick.java
@@ -5,12 +5,7 @@ import java.util.Comparator;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 
-public record ScheduledTick<T>(T d, BlockPos e, long f, TickPriority g, long h) {
-    private final T type;
-    private final BlockPos pos;
-    private final long triggerTick;
-    private final TickPriority priority;
-    private final long subTickOrder;
+public record ScheduledTick<T>(T type, BlockPos pos, long triggerTick, TickPriority priority, long subTickOrder) {
     public static final Comparator<ScheduledTick<?>> DRAIN_ORDER = (scheduledTick, scheduledTick2) -> {
         int i = Long.compare(scheduledTick.triggerTick, scheduledTick2.triggerTick);
         if (i != 0) {
@@ -44,36 +39,11 @@ public record ScheduledTick<T>(T d, BlockPos e, long f, TickPriority g, long h)
         this(object, blockPos, l, TickPriority.NORMAL, l2);
     }
 
-    public ScheduledTick(T object, BlockPos blockPos, long l, TickPriority tickPriority, long l2) {
-        blockPos = blockPos.immutable();
-        this.type = object;
-        this.pos = blockPos;
-        this.triggerTick = l;
-        this.priority = tickPriority;
-        this.subTickOrder = l2;
+    public ScheduledTick {
+        pos = pos.immutable();
     }
 
     public static <T> ScheduledTick<T> probe(T object, BlockPos blockPos) {
         return new ScheduledTick<>(object, blockPos, 0L, TickPriority.NORMAL, 0L);
     }
-
-    public T type() {
-        return this.type;
-    }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public long triggerTick() {
-        return this.triggerTick;
-    }
-
-    public TickPriority priority() {
-        return this.priority;
-    }
-
-    public long subTickOrder() {
-        return this.subTickOrder;
-    }
 }
\ No newline at end of file
diff --git a/src/main/resources/META-INF/MANIFEST.MF b/src/main/resources/META-INF/MANIFEST.MF
index 54f165d5b7667fdf8dc7d999ef532ab39eda546f..d43ed607295b14c114a19860f02ed5a38e7b3c87 100644
--- a/src/main/resources/META-INF/MANIFEST.MF
+++ b/src/main/resources/META-INF/MANIFEST.MF
@@ -1,3 +1,3 @@
 Manifest-Version: 1.0
 Main-Class: net.minecraft.client.main.Main
-
+Multi-Release: true
