From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Sun, 10 Jan 2021 20:40:08 +0900
Subject: [PATCH] decompile fix


diff --git a/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java b/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
index 8f3f9946dd08ade4b63f84c517eeb2576e7af443..7cb31f32512675d3aeac8ee06266cba30e6d3909 100644
--- a/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
+++ b/src/main/java/com/mojang/blaze3d/audio/OggAudioStream.java
@@ -190,7 +190,7 @@ public class OggAudioStream implements AudioStream {
                 memoryStack.close();
             }
 
-            return (boolean)i;
+            return false;
         }
     }
 
diff --git a/src/main/java/com/mojang/blaze3d/font/SpaceProvider.java b/src/main/java/com/mojang/blaze3d/font/SpaceProvider.java
index 998f07f25d49d4d2a23f6d3839230c00665029e7..e4a63f4057191deb1a5745b2a38b1c3cf6b5697c 100644
--- a/src/main/java/com/mojang/blaze3d/font/SpaceProvider.java
+++ b/src/main/java/com/mojang/blaze3d/font/SpaceProvider.java
@@ -31,8 +31,7 @@ public class SpaceProvider implements GlyphProvider {
         return IntSets.unmodifiable(this.glyphs.keySet());
     }
 
-    public static record Definition(Map<Integer, Float> c) implements GlyphProviderDefinition {
-        private final Map<Integer, Float> advances;
+    public static record Definition(Map<Integer, Float> advances) implements GlyphProviderDefinition {
         public static final MapCodec<SpaceProvider.Definition> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.unboundedMap(ExtraCodecs.CODEPOINT, Codec.FLOAT).fieldOf("advances").forGetter(SpaceProvider.Definition::advances)).apply(instance, SpaceProvider.Definition::new));
 
         public GlyphProviderType type() {
@@ -43,9 +42,5 @@ public class SpaceProvider implements GlyphProvider {
             GlyphProviderDefinition.Loader loader = (resourceManager) -> new SpaceProvider(this.advances);
             return Either.left(loader);
         }
-
-        public Map<Integer, Float> advances() {
-            return this.advances;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java b/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
index 5ec94f6d8b029e6e5acf040d35cadd9760532206..2d0766c874693a53585f4dcc32fde1ab22b5b2f5 100644
--- a/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
+++ b/src/main/java/com/mojang/blaze3d/font/TrueTypeGlyphProvider.java
@@ -97,7 +97,7 @@ public class TrueTypeGlyphProvider implements GlyphProvider {
                             break label62;
                         }
 
-                        var18 = () -> f / this.oversample;
+                        var18 = (com.mojang.blaze3d.font.GlyphInfo.SpaceGlyphInfo) () -> f / this.oversample;
                     } catch (Throwable var16) {
                         if (memoryStack != null) {
                             try {
@@ -210,4 +210,4 @@ public class TrueTypeGlyphProvider implements GlyphProvider {
             });
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
index fa6b0b23bdf71255614653b594305c2f534b8094..f5313856d832b9c046125046f23f5e42d579c74c 100644
--- a/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
+++ b/src/main/java/com/mojang/blaze3d/platform/InputConstants.java
@@ -202,7 +202,7 @@ public class InputConstants {
 
     public static boolean isRawMouseInputSupported() {
         try {
-            return GLFW_RAW_MOUSE_MOTION_SUPPORTED != null && GLFW_RAW_MOUSE_MOTION_SUPPORTED.invokeExact();
+            return GLFW_RAW_MOUSE_MOTION_SUPPORTED != null && (boolean) GLFW_RAW_MOUSE_MOTION_SUPPORTED.invokeExact();
         } catch (Throwable var1) {
             throw new RuntimeException(var1);
         }
@@ -224,7 +224,7 @@ public class InputConstants {
         try {
             methodHandle = lookup.findStatic(GLFW.class, "glfwRawMouseMotionSupported", methodType);
             MethodHandle methodHandle2 = lookup.findStaticGetter(GLFW.class, "GLFW_RAW_MOUSE_MOTION", Integer.TYPE);
-            i = methodHandle2.invokeExact();
+            i = (int) methodHandle2.invokeExact();
         } catch (NoSuchFieldException | NoSuchMethodException var5) {
         } catch (Throwable var6) {
             throw new RuntimeException(var6);
diff --git a/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java b/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java
index 155c479ada9d06724133ca380fcf0095615f0c68..17d4158853ceb1d78a4e21c95bb01f82c16b5998 100644
--- a/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java
+++ b/src/main/java/com/mojang/blaze3d/platform/MacosUtil.java
@@ -23,7 +23,7 @@ public class MacosUtil {
     }
 
     private static boolean isInKioskMode(NSObject nSObject) {
-        return (nSObject.sendRaw("styleMask", new Object[0]) & 16384L) == 16384L;
+        return ((long) nSObject.sendRaw("styleMask", new Object[0]) & 16384L) == 16384L;
     }
 
     private static void toggleFullscreen(NSObject nSObject) {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
index d6faddb0c6f1ed25fe5e1db03e3c6a8661a44753..23432880fb879e0f4c07b5bfd96936194ac2237f 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/BufferBuilder.java
@@ -55,7 +55,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
     }
 
     private static int roundUp(int i) {
-        int i2 = 2097152;
+        int i2 = GROWTH_SIZE;
         if (i == 0) {
             return i2;
         } else {
@@ -364,15 +364,7 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         return MemoryUtil.memSlice(this.buffer, i, i2 - i);
     }
 
-    public static record DrawState(VertexFormat a, int b, int c, VertexFormat.Mode d, VertexFormat.IndexType e, boolean f, boolean g) {
-        private final VertexFormat format;
-        final int vertexCount;
-        private final int indexCount;
-        private final VertexFormat.Mode mode;
-        private final VertexFormat.IndexType indexType;
-        private final boolean indexOnly;
-        private final boolean sequentialIndex;
-
+    public static record DrawState(VertexFormat format, int vertexCount, int indexCount, VertexFormat.Mode mode, VertexFormat.IndexType indexType, boolean indexOnly, boolean sequentialIndex) {
         public int vertexBufferSize() {
             return this.vertexCount * this.format.getVertexSize();
         }
@@ -400,34 +392,6 @@ public class BufferBuilder extends DefaultedVertexConsumer implements BufferVert
         public int bufferSize() {
             return this.indexBufferEnd();
         }
-
-        public VertexFormat format() {
-            return this.format;
-        }
-
-        public int vertexCount() {
-            return this.vertexCount;
-        }
-
-        public int indexCount() {
-            return this.indexCount;
-        }
-
-        public VertexFormat.Mode mode() {
-            return this.mode;
-        }
-
-        public VertexFormat.IndexType indexType() {
-            return this.indexType;
-        }
-
-        public boolean indexOnly() {
-            return this.indexOnly;
-        }
-
-        public boolean sequentialIndex() {
-            return this.sequentialIndex;
-        }
     }
 
     public class RenderedBuffer {
diff --git a/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java b/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
index 00b8353961e5737884435e1a72f6fef37527c918..81b15d782de7485dba613eb60ee5fc4c090e4388 100644
--- a/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
+++ b/src/main/java/com/mojang/blaze3d/vertex/DefaultVertexFormat.java
@@ -11,18 +11,18 @@ public class DefaultVertexFormat {
     public static final VertexFormatElement ELEMENT_NORMAL = new VertexFormatElement(0, VertexFormatElement.Type.BYTE, VertexFormatElement.Usage.NORMAL, 3);
     public static final VertexFormatElement ELEMENT_PADDING = new VertexFormatElement(0, VertexFormatElement.Type.BYTE, VertexFormatElement.Usage.PADDING, 1);
     public static final VertexFormatElement ELEMENT_UV = ELEMENT_UV0;
-    public static final VertexFormat BLIT_SCREEN = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV", ELEMENT_UV).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat BLOCK = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-    public static final VertexFormat NEW_ENTITY = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV1", ELEMENT_UV1).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-    public static final VertexFormat PARTICLE = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
-    public static final VertexFormat POSITION = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).build());
-    public static final VertexFormat POSITION_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat POSITION_COLOR_NORMAL = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
-    public static final VertexFormat POSITION_COLOR_LIGHTMAP = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
-    public static final VertexFormat POSITION_TEX = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).build());
-    public static final VertexFormat POSITION_COLOR_TEX = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).build());
-    public static final VertexFormat POSITION_TEX_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat POSITION_COLOR_TEX_LIGHTMAP = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).build());
-    public static final VertexFormat POSITION_TEX_LIGHTMAP_COLOR = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Color", ELEMENT_COLOR).build());
-    public static final VertexFormat POSITION_TEX_COLOR_NORMAL = new VertexFormat(ImmutableMap.builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat BLIT_SCREEN = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV", ELEMENT_UV).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat BLOCK = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat NEW_ENTITY = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV1", ELEMENT_UV1).put("UV2", ELEMENT_UV2).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat PARTICLE = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
+    public static final VertexFormat POSITION = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).build());
+    public static final VertexFormat POSITION_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat POSITION_COLOR_NORMAL = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
+    public static final VertexFormat POSITION_COLOR_LIGHTMAP = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV2", ELEMENT_UV2).build());
+    public static final VertexFormat POSITION_TEX = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).build());
+    public static final VertexFormat POSITION_COLOR_TEX = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).build());
+    public static final VertexFormat POSITION_TEX_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat POSITION_COLOR_TEX_LIGHTMAP = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("Color", ELEMENT_COLOR).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).build());
+    public static final VertexFormat POSITION_TEX_LIGHTMAP_COLOR = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("UV2", ELEMENT_UV2).put("Color", ELEMENT_COLOR).build());
+    public static final VertexFormat POSITION_TEX_COLOR_NORMAL = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder().put("Position", ELEMENT_POSITION).put("UV0", ELEMENT_UV0).put("Color", ELEMENT_COLOR).put("Normal", ELEMENT_NORMAL).put("Padding", ELEMENT_PADDING).build());
 }
\ No newline at end of file
diff --git a/src/main/java/com/mojang/math/GivensParameters.java b/src/main/java/com/mojang/math/GivensParameters.java
index 327cfd3a3b619e602bb3a750f381fe11d8718443..7f3f2bec72e490ce5c48cf9c3ef4ab285d1e95eb 100644
--- a/src/main/java/com/mojang/math/GivensParameters.java
+++ b/src/main/java/com/mojang/math/GivensParameters.java
@@ -4,10 +4,7 @@ import org.joml.Math;
 import org.joml.Matrix3f;
 import org.joml.Quaternionf;
 
-public record GivensParameters(float a, float b) {
-    private final float sinHalf;
-    private final float cosHalf;
-
+public record GivensParameters(float sinHalf, float cosHalf) {
     public static GivensParameters fromUnnormalized(float f, float f2) {
         float f3 = Math.invsqrt(f * f + f2 * f2);
         return new GivensParameters(f3 * f, f3 * f2);
@@ -87,12 +84,4 @@ public record GivensParameters(float a, float b) {
         matrix3f.m22 = 1.0F;
         return matrix3f;
     }
-
-    public float sinHalf() {
-        return this.sinHalf;
-    }
-
-    public float cosHalf() {
-        return this.cosHalf;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/com/mojang/realmsclient/RealmsAvailability.java b/src/main/java/com/mojang/realmsclient/RealmsAvailability.java
index 5dc58caba63bcd217c02903044a5f3c924ecc888..21a333030c404d6a0d8a24c5e8310b057c735102 100644
--- a/src/main/java/com/mojang/realmsclient/RealmsAvailability.java
+++ b/src/main/java/com/mojang/realmsclient/RealmsAvailability.java
@@ -49,11 +49,7 @@ public class RealmsAvailability {
         }, Util.ioPool());
     }
 
-    public static record Result(RealmsAvailability.Type a, @Nullable RealmsServiceException b) {
-        private final RealmsAvailability.Type type;
-        @Nullable
-        private final RealmsServiceException exception;
-
+    public static record Result(RealmsAvailability.Type type, @Nullable RealmsServiceException exception) {
         public Result(RealmsAvailability.Type type) {
             this(type, (RealmsServiceException)null);
         }
@@ -87,15 +83,6 @@ public class RealmsAvailability {
 
             return (Screen)var10000;
         }
-
-        public RealmsAvailability.Type type() {
-            return this.type;
-        }
-
-        @Nullable
-        public RealmsServiceException exception() {
-            return this.exception;
-        }
     }
 
     public static enum Type {
@@ -105,4 +92,4 @@ public class RealmsAvailability {
         AUTHENTICATION_ERROR,
         UNEXPECTED_ERROR;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/mojang/realmsclient/client/FileUpload.java b/src/main/java/com/mojang/realmsclient/client/FileUpload.java
index 698735d764d710d351613726a35f7b7ca54415a4..6de8b02512666a9346ff64abd90d3556f7b16167 100644
--- a/src/main/java/com/mojang/realmsclient/client/FileUpload.java
+++ b/src/main/java/com/mojang/realmsclient/client/FileUpload.java
@@ -159,7 +159,7 @@ public class FileUpload {
     }
 
     private long getRetryDelaySeconds(HttpResponse httpResponse) {
-        return Optional.ofNullable(httpResponse.getFirstHeader("Retry-After")).map(NameValuePair::getValue).map(Long::valueOf).orElse(0L);
+        return Optional.ofNullable(httpResponse.getFirstHeader("Retry-After")).map(org.apache.http.Header::getValue).map(Long::valueOf).orElse(0L);
     }
 
     public boolean isFinished() {
diff --git a/src/main/java/com/mojang/realmsclient/client/RealmsError.java b/src/main/java/com/mojang/realmsclient/client/RealmsError.java
index 969bd8fdab72be35aee6a2dd72dc0c2f091a6c0b..f7e70fe622d568aead64c22387cf389367167788 100644
--- a/src/main/java/com/mojang/realmsclient/client/RealmsError.java
+++ b/src/main/java/com/mojang/realmsclient/client/RealmsError.java
@@ -44,8 +44,7 @@ public interface RealmsError {
         }
     }
 
-    public static record AuthenticationError(String d) implements RealmsError {
-        private final String message;
+    public static record AuthenticationError(String message) implements RealmsError {
         public static final int ERROR_CODE = 401;
 
         public int errorCode() {
@@ -59,16 +58,9 @@ public interface RealmsError {
         public String logMessage() {
             return String.format(Locale.ROOT, "Realms authentication error with message '%s'", this.message);
         }
-
-        public String message() {
-            return this.message;
-        }
     }
 
-    public static record CustomError(int e, @Nullable Component f) implements RealmsError {
-        private final int httpCode;
-        @Nullable
-        private final Component payload;
+    public static record CustomError(int httpCode, @Nullable Component payload) implements RealmsError {
         public static final RealmsError.CustomError SERVICE_BUSY = new RealmsError.CustomError(429, Component.translatable("mco.errorMessage.serviceBusy"));
         public static final Component RETRY_MESSAGE = Component.translatable("mco.errorMessage.retry");
 
@@ -99,25 +91,9 @@ public interface RealmsError {
         public String logMessage() {
             return this.payload != null ? String.format(Locale.ROOT, "Realms service error (%d) with message '%s'", this.httpCode, this.payload.getString()) : String.format(Locale.ROOT, "Realms service error (%d) with no payload", this.httpCode);
         }
-
-        public int httpCode() {
-            return this.httpCode;
-        }
-
-        @Nullable
-        public Component payload() {
-            return this.payload;
-        }
     }
 
-    public static record ErrorWithJsonPayload(int c, int d, @Nullable String e, @Nullable String f) implements RealmsError {
-        private final int httpCode;
-        private final int code;
-        @Nullable
-        private final String reason;
-        @Nullable
-        private final String message;
-
+    public static record ErrorWithJsonPayload(int httpCode, int code, @Nullable String reason, @Nullable String message) implements RealmsError {
         public int errorCode() {
             return this.code;
         }
@@ -141,30 +117,9 @@ public interface RealmsError {
         public String logMessage() {
             return String.format(Locale.ROOT, "Realms service error (%d/%d/%s) with message '%s'", this.httpCode, this.code, this.reason, this.message);
         }
-
-        public int httpCode() {
-            return this.httpCode;
-        }
-
-        public int code() {
-            return this.code;
-        }
-
-        @Nullable
-        public String reason() {
-            return this.reason;
-        }
-
-        @Nullable
-        public String message() {
-            return this.message;
-        }
     }
 
-    public static record ErrorWithRawPayload(int c, String d) implements RealmsError {
-        private final int httpCode;
-        private final String payload;
-
+    public static record ErrorWithRawPayload(int httpCode, String payload) implements RealmsError {
         public int errorCode() {
             return this.httpCode;
         }
@@ -176,13 +131,5 @@ public interface RealmsError {
         public String logMessage() {
             return String.format(Locale.ROOT, "Realms service error (%d) with raw payload '%s'", this.httpCode, this.payload);
         }
-
-        public int httpCode() {
-            return this.httpCode;
-        }
-
-        public String payload() {
-            return this.payload;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
index 79c66d40b2ac860e8f3f60907b4cae07a85d3e80..4b48cc490e688c779cad15098324c8e5a3247b4d 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsBrokenWorldScreen.java
@@ -69,14 +69,14 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
             boolean flag = i != this.serverData.activeSlot || this.serverData.worldType == RealmsServer.WorldType.MINIGAME;
             Button button;
             if (flag) {
-                button = Button.builder(Component.translatable("mco.brokenworld.play"), (button) -> this.minecraft.setScreen(new RealmsLongRunningMcoTaskScreen(this.lastScreen, new SwitchSlotTask(this.serverData.id, i, this::doSwitchOrReset)))).bounds(this.getFramePositionX(i), row(8), 80, 20).build();
+                button = Button.builder(Component.translatable("mco.brokenworld.play"), (buttonIn) -> this.minecraft.setScreen(new RealmsLongRunningMcoTaskScreen(this.lastScreen, new SwitchSlotTask(this.serverData.id, i, this::doSwitchOrReset)))).bounds(this.getFramePositionX(i), row(8), 80, 20).build();
                 button.active = !((RealmsWorldOptions)this.serverData.slots.get(i)).empty;
             } else {
-                button = Button.builder(Component.translatable("mco.brokenworld.download"), (button) -> {
+                button = Button.builder(Component.translatable("mco.brokenworld.download"), (buttonIn) -> {
                     Component component = Component.translatable("mco.configure.world.restore.download.question.line1");
                     Component component2 = Component.translatable("mco.configure.world.restore.download.question.line2");
-                    this.minecraft.setScreen(new RealmsLongConfirmationScreen((flag) -> {
-                        if (flag) {
+                    this.minecraft.setScreen(new RealmsLongConfirmationScreen((flagIn) -> {
+                        if (flagIn) {
                             this.downloadWorld(i);
                         } else {
                             this.minecraft.setScreen(this);
@@ -222,4 +222,4 @@ public class RealmsBrokenWorldScreen extends RealmsScreen {
         guiGraphics.drawCenteredString(this.font, s, i + 40, i2 + 66, -1);
         guiGraphics.setColor(1.0F, 1.0F, 1.0F, 1.0F);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsGenericErrorScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsGenericErrorScreen.java
index 48713ba54ed91d000c05e47b766f8cd5c6bdd1df..fe7c7e3d395067a3cc48f7e05db1c0a0bdabdb10 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsGenericErrorScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsGenericErrorScreen.java
@@ -62,16 +62,6 @@ public class RealmsGenericErrorScreen extends RealmsScreen {
         this.line2Split.renderCentered(guiGraphics, this.width / 2, 100, 9, -65536);
     }
 
-    static record ErrorMessage(Component a, Component b) {
-        final Component title;
-        final Component detail;
-
-        public Component title() {
-            return this.title;
-        }
-
-        public Component detail() {
-            return this.detail;
-        }
+    static record ErrorMessage(Component title, Component detail) {
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
index 283c30aa9b56dd7b1e7ea9188a60d2d2bbcce47e..788aed386ac53be7c067bb881ab7d234650cd115 100644
--- a/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
+++ b/src/main/java/com/mojang/realmsclient/gui/screens/RealmsSelectWorldTemplateScreen.java
@@ -151,43 +151,43 @@ public class RealmsSelectWorldTemplateScreen extends RealmsScreen {
 
     }
 
-    private void fetchTemplatesAsync(final WorldTemplatePaginatedList worldTemplatePaginatedList) {
+    private void fetchTemplatesAsync(final WorldTemplatePaginatedList worldTemplatePaginatedListParam) {
         (new Thread("realms-template-fetcher") {
             public void run() {
-                WorldTemplatePaginatedList worldTemplatePaginatedList = worldTemplatePaginatedList;
-
-                Either<WorldTemplatePaginatedList, Exception> either;
-                for(RealmsClient realmsClient = RealmsClient.create(); worldTemplatePaginatedList != null; worldTemplatePaginatedList = (WorldTemplatePaginatedList)RealmsSelectWorldTemplateScreen.this.minecraft.submit(() -> {
-                    if (either.right().isPresent()) {
-                        RealmsSelectWorldTemplateScreen.LOGGER.error("Couldn't fetch templates", (Throwable)either.right().get());
-                        if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
-                            RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(I18n.get("mco.template.select.failure"));
-                        }
-
-                        return null;
-                    } else {
-                        WorldTemplatePaginatedList worldTemplatePaginatedList = (WorldTemplatePaginatedList)either.left().get();
-
-                        for(WorldTemplate worldTemplate : worldTemplatePaginatedList.templates) {
-                            RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.addEntry(worldTemplate);
-                        }
-
-                        if (worldTemplatePaginatedList.templates.isEmpty()) {
+                WorldTemplatePaginatedList worldTemplatePaginatedList = worldTemplatePaginatedListParam;
+
+                RealmsClient realmsClient = RealmsClient.create();
+                while (worldTemplatePaginatedList != null) {
+                    Either<WorldTemplatePaginatedList, Exception> either = RealmsSelectWorldTemplateScreen.this.fetchTemplates(worldTemplatePaginatedList, realmsClient);
+                    worldTemplatePaginatedList = RealmsSelectWorldTemplateScreen.this.minecraft.submit(() -> {
+                        if (either.right().isPresent()) {
+                            RealmsSelectWorldTemplateScreen.LOGGER.error("Couldn't fetch templates", (Throwable)either.right().get());
                             if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
-                                String s = I18n.get("mco.template.select.none", "%link");
-                                TextRenderingUtils.LineSegment lineSegment = TextRenderingUtils.LineSegment.link(I18n.get("mco.template.select.none.linkTitle"), "https://aka.ms/MinecraftRealmsContentCreator");
-                                RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(s, lineSegment);
+                                RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(I18n.get("mco.template.select.failure"));
                             }
 
                             return null;
                         } else {
-                            return worldTemplatePaginatedList;
+                            WorldTemplatePaginatedList worldTemplatePaginatedListIn = either.left().get();
+
+                            for (WorldTemplate worldTemplate : worldTemplatePaginatedListIn.templates) {
+                                RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.addEntry(worldTemplate);
+                            }
+
+                            if (worldTemplatePaginatedListIn.templates.isEmpty()) {
+                                if (RealmsSelectWorldTemplateScreen.this.worldTemplateObjectSelectionList.isEmpty()) {
+                                    String s = I18n.get("mco.template.select.none", "%link");
+                                    TextRenderingUtils.LineSegment lineSegment = TextRenderingUtils.LineSegment.link(I18n.get("mco.template.select.none.linkTitle"), "https://aka.ms/MinecraftRealmsContentCreator");
+                                    RealmsSelectWorldTemplateScreen.this.noTemplatesMessage = TextRenderingUtils.decompose(s, lineSegment);
+                                }
+
+                                return null;
+                            } else {
+                                return worldTemplatePaginatedListIn;
+                            }
                         }
-                    }
-                }).join()) {
-                    either = RealmsSelectWorldTemplateScreen.this.fetchTemplates(worldTemplatePaginatedList, realmsClient);
+                    }).join();
                 }
-
             }
         }).start();
     }
@@ -367,4 +367,4 @@ public class RealmsSelectWorldTemplateScreen extends RealmsScreen {
             return this.children().stream().map((entry) -> entry.template).collect(Collectors.toList());
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/mojang/realmsclient/gui/task/DataFetcher.java b/src/main/java/com/mojang/realmsclient/gui/task/DataFetcher.java
index d9468b798b5015c4d9dc8a64ce9c4741a57c11bb..f4ceb8c47003cbb27cfcd513a2fa1be1bef2b06a 100644
--- a/src/main/java/com/mojang/realmsclient/gui/task/DataFetcher.java
+++ b/src/main/java/com/mojang/realmsclient/gui/task/DataFetcher.java
@@ -39,17 +39,7 @@ public class DataFetcher {
         return new DataFetcher.Subscription();
     }
 
-    static record ComputationResult<T>(Either<T, Exception> a, long b) {
-        private final Either<T, Exception> value;
-        final long time;
-
-        public Either<T, Exception> value() {
-            return this.value;
-        }
-
-        public long time() {
-            return this.time;
-        }
+    static record ComputationResult<T>(Either<T, Exception> value, long time) {
     }
 
     class SubscribedTask<T> {
@@ -122,17 +112,7 @@ public class DataFetcher {
         }
     }
 
-    static record SuccessfulComputationResult<T>(T a, long b) {
-        final T value;
-        final long time;
-
-        public T value() {
-            return this.value;
-        }
-
-        public long time() {
-            return this.time;
-        }
+    static record SuccessfulComputationResult<T>(T value, long time) {
     }
 
     public class Task<T> {
@@ -166,9 +146,9 @@ public class DataFetcher {
                     this.lastResult = new DataFetcher.SuccessfulComputationResult<>((T)object, l2);
                     this.nextUpdate = l2 + this.period * this.repeatStrategy.delayCyclesAfterSuccess();
                 }).ifRight((exception) -> {
-                    long l2 = this.repeatStrategy.delayCyclesAfterFailure();
-                    DataFetcher.LOGGER.warn("Failed to process task {}, will repeat after {} cycles", new Object[]{this.id, l2, exception});
-                    this.nextUpdate = l2 + this.period * l2;
+                    long cycles = this.repeatStrategy.delayCyclesAfterFailure();
+                    DataFetcher.LOGGER.warn("Failed to process task {}, will repeat after {} cycles", new Object[]{this.id, cycles, exception});
+                    this.nextUpdate = cycles + this.period * cycles;
                 });
             }
 
@@ -176,8 +156,8 @@ public class DataFetcher {
                 this.pendingTask = CompletableFuture.supplyAsync(() -> {
                     try {
                         T object = (T)this.updater.call();
-                        long l = DataFetcher.this.timeSource.get(DataFetcher.this.resolution);
-                        return new DataFetcher.ComputationResult(Either.left(object), l);
+                        long l1 = DataFetcher.this.timeSource.get(DataFetcher.this.resolution);
+                        return new DataFetcher.ComputationResult(Either.left(object), l1);
                     } catch (Exception var4) {
                         long l2 = DataFetcher.this.timeSource.get(DataFetcher.this.resolution);
                         return new DataFetcher.ComputationResult(Either.right(var4), l2);
diff --git a/src/main/java/com/mojang/realmsclient/util/RealmsTextureManager.java b/src/main/java/com/mojang/realmsclient/util/RealmsTextureManager.java
index 13af084ebf807e970f8541b88786aefa76341810..a3c166aa285fc3ac37f567343df4af900d59d464 100644
--- a/src/main/java/com/mojang/realmsclient/util/RealmsTextureManager.java
+++ b/src/main/java/com/mojang/realmsclient/util/RealmsTextureManager.java
@@ -59,16 +59,6 @@ public class RealmsTextureManager {
         return null;
     }
 
-    public static record RealmsTexture(String a, ResourceLocation b) {
-        private final String image;
-        final ResourceLocation textureId;
-
-        public String image() {
-            return this.image;
-        }
-
-        public ResourceLocation textureId() {
-            return this.textureId;
-        }
+    public static record RealmsTexture(String image, ResourceLocation textureId) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 844551ce38b9814fce83eeddaeace326e9938d58..11f4e792880f7ecfa12eb0ab150f2d6041f4b4ac 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -30,6 +30,7 @@ import java.nio.file.Path;
 import java.nio.file.spi.FileSystemProvider;
 import java.security.AccessController;
 import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 import java.time.Duration;
 import java.time.Instant;
 import java.time.ZonedDateTime;
@@ -153,21 +154,21 @@ public class Util {
     }
 
     private static int getMaxThreads() {
-        String s = System.getProperty("max.bg.threads");
+        String s = System.getProperty(MAX_THREADS_SYSTEM_PROPERTY);
         if (s != null) {
             try {
                 int i = Integer.parseInt(s);
-                if (i >= 1 && i <= 255) {
+                if (i >= 1 && i <= DEFAULT_MAX_THREADS) {
                     return i;
                 }
 
-                LOGGER.error("Wrong {} property value '{}'. Should be an integer value between 1 and {}.", new Object[]{"max.bg.threads", s, 255});
+                LOGGER.error("Wrong {} property value '{}'. Should be an integer value between 1 and {}.", new Object[]{"max.bg.threads", s, DEFAULT_MAX_THREADS});
             } catch (NumberFormatException var2) {
-                LOGGER.error("Could not parse {} property value '{}'. Should be an integer value between 1 and {}.", new Object[]{"max.bg.threads", s, 255});
+                LOGGER.error("Could not parse {} property value '{}'. Should be an integer value between 1 and {}.", new Object[]{"max.bg.threads", s, DEFAULT_MAX_THREADS});
             }
         }
 
-        return 255;
+        return DEFAULT_MAX_THREADS;
     }
 
     public static ExecutorService backgroundExecutor() {
@@ -268,7 +269,7 @@ public class Util {
             String s2 = thread.getName();
             thread.setName(s);
 
-            Object var4;
+            V var4;
             try {
                 var4 = supplier.get();
             } finally {
@@ -353,7 +354,7 @@ public class Util {
     }
 
     public static <K> Strategy<K> identityStrategy() {
-        return Util.IdentityStrategy.INSTANCE;
+        return (Strategy<K>) IdentityStrategy.INSTANCE;
     }
 
     public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<V>> list) {
@@ -789,7 +790,7 @@ public class Util {
     public static <T, E extends Exception> T getOrThrow(DataResult<T> dataResult, Function<String, E> function) throws E {
         Optional<PartialResult<T>> optional = dataResult.error();
         if (optional.isPresent()) {
-            throw (Exception)function.apply(((PartialResult)optional.get()).message());
+            throw (E)function.apply(optional.get().message());
         } else {
             return (T)dataResult.result().orElseThrow();
         }
@@ -838,7 +839,7 @@ public class Util {
 
         public void openUrl(URL url) {
             try {
-                Process process = (Process)AccessController.doPrivileged(() -> Runtime.getRuntime().exec(this.getOpenUrlArguments(url)));
+                Process process = (Process)AccessController.doPrivileged((PrivilegedExceptionAction<?>) () -> Runtime.getRuntime().exec(this.getOpenUrlArguments(url)));
                 process.getInputStream().close();
                 process.getErrorStream().close();
                 process.getOutputStream().close();
diff --git a/src/main/java/net/minecraft/advancements/Advancement.java b/src/main/java/net/minecraft/advancements/Advancement.java
index 0dccf96b47465397c73f4166ce1ea6f85f94cc13..6b88a3aae5f0aa4ddeab339a869235ec0bbae4b4 100644
--- a/src/main/java/net/minecraft/advancements/Advancement.java
+++ b/src/main/java/net/minecraft/advancements/Advancement.java
@@ -21,15 +21,7 @@ import net.minecraft.util.GsonHelper;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.ItemLike;
 
-public record Advancement(Optional<ResourceLocation> a, Optional<DisplayInfo> b, AdvancementRewards c, Map<String, Criterion<?>> d, AdvancementRequirements e, boolean f, Optional<Component> g) {
-    private final Optional<ResourceLocation> parent;
-    private final Optional<DisplayInfo> display;
-    private final AdvancementRewards rewards;
-    private final Map<String, Criterion<?>> criteria;
-    private final AdvancementRequirements requirements;
-    private final boolean sendsTelemetryEvent;
-    private final Optional<Component> name;
-
+public record Advancement(Optional<ResourceLocation> parent, Optional<DisplayInfo> display, AdvancementRewards rewards, Map<String, Criterion<?>> criteria, AdvancementRequirements requirements, boolean sendsTelemetryEvent, Optional<Component> name) {
     public Advancement(Optional<ResourceLocation> optional, Optional<DisplayInfo> optional2, AdvancementRewards advancementRewards, Map<String, Criterion<?>> map, AdvancementRequirements advancementRequirements, boolean flag) {
         this(optional, optional2, advancementRewards, Map.copyOf(map), advancementRequirements, flag, optional2.map(Advancement::decorateName));
     }
@@ -99,34 +91,6 @@ public record Advancement(Optional<ResourceLocation> a, Optional<DisplayInfo> b,
         return this.parent.isEmpty();
     }
 
-    public Optional<ResourceLocation> parent() {
-        return this.parent;
-    }
-
-    public Optional<DisplayInfo> display() {
-        return this.display;
-    }
-
-    public AdvancementRewards rewards() {
-        return this.rewards;
-    }
-
-    public Map<String, Criterion<?>> criteria() {
-        return this.criteria;
-    }
-
-    public AdvancementRequirements requirements() {
-        return this.requirements;
-    }
-
-    public boolean sendsTelemetryEvent() {
-        return this.sendsTelemetryEvent;
-    }
-
-    public Optional<Component> name() {
-        return this.name;
-    }
-
     public static class Builder {
         private Optional<ResourceLocation> parent = Optional.empty();
         private Optional<DisplayInfo> display = Optional.empty();
@@ -212,4 +176,4 @@ public record Advancement(Optional<ResourceLocation> a, Optional<DisplayInfo> b,
             return advancementHolder;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/AdvancementHolder.java b/src/main/java/net/minecraft/advancements/AdvancementHolder.java
index ec51a037d942c9d514dc98c6bd07b339d16fe22b..a329a8b5135da8e48a3e5b5521127a021f8dffde 100644
--- a/src/main/java/net/minecraft/advancements/AdvancementHolder.java
+++ b/src/main/java/net/minecraft/advancements/AdvancementHolder.java
@@ -3,10 +3,7 @@ package net.minecraft.advancements;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 
-public record AdvancementHolder(ResourceLocation a, Advancement b) {
-    private final ResourceLocation id;
-    private final Advancement value;
-
+public record AdvancementHolder(ResourceLocation id, Advancement value) {
     public void write(FriendlyByteBuf friendlyByteBuf) {
         friendlyByteBuf.writeResourceLocation(this.id);
         this.value.write(friendlyByteBuf);
@@ -38,12 +35,4 @@ public record AdvancementHolder(ResourceLocation a, Advancement b) {
     public String toString() {
         return this.id.toString();
     }
-
-    public ResourceLocation id() {
-        return this.id;
-    }
-
-    public Advancement value() {
-        return this.value;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/AdvancementRequirements.java b/src/main/java/net/minecraft/advancements/AdvancementRequirements.java
index 4e9ecc0a0aaf6bfcfa7194255ff82dbced18454d..66a74d3b658ab5b59ccf664e697d0fb77644fddf 100644
--- a/src/main/java/net/minecraft/advancements/AdvancementRequirements.java
+++ b/src/main/java/net/minecraft/advancements/AdvancementRequirements.java
@@ -12,8 +12,7 @@ import java.util.function.Predicate;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.util.GsonHelper;
 
-public record AdvancementRequirements(String[][] b) {
-    private final String[][] requirements;
+public record AdvancementRequirements(String[][] requirements) {
     public static final AdvancementRequirements EMPTY = new AdvancementRequirements(new String[0][]);
 
     public AdvancementRequirements(FriendlyByteBuf friendlyByteBuf) {
@@ -153,14 +152,10 @@ public record AdvancementRequirements(String[][] b) {
         return set;
     }
 
-    public String[][] requirements() {
-        return this.requirements;
-    }
-
     public interface Strategy {
         AdvancementRequirements.Strategy AND = AdvancementRequirements::allOf;
         AdvancementRequirements.Strategy OR = AdvancementRequirements::anyOf;
 
         AdvancementRequirements create(Collection<String> var1);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/Criterion.java b/src/main/java/net/minecraft/advancements/Criterion.java
index cda43a4cb76f0e15d2ea4a057bd4e2f16d34bccf..3a12e474192326108b257060eefbcbf60c122403 100644
--- a/src/main/java/net/minecraft/advancements/Criterion.java
+++ b/src/main/java/net/minecraft/advancements/Criterion.java
@@ -11,10 +11,7 @@ import net.minecraft.advancements.critereon.DeserializationContext;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.GsonHelper;
 
-public record Criterion<T extends CriterionTriggerInstance>(CriterionTrigger<T> a, T b) {
-    private final CriterionTrigger<T> trigger;
-    private final T triggerInstance;
-
+public record Criterion<T extends CriterionTriggerInstance>(CriterionTrigger<T> trigger, T triggerInstance) {
     public static Criterion<?> criterionFromJson(JsonObject jsonObject, DeserializationContext deserializationContext) {
         ResourceLocation resourceLocation = new ResourceLocation(GsonHelper.getAsString(jsonObject, "trigger"));
         CriterionTrigger<?> criterionTrigger = CriteriaTriggers.getCriterion(resourceLocation);
@@ -50,12 +47,4 @@ public record Criterion<T extends CriterionTriggerInstance>(CriterionTrigger<T>
 
         return jsonObject;
     }
-
-    public CriterionTrigger<T> trigger() {
-        return this.trigger;
-    }
-
-    public T triggerInstance() {
-        return this.triggerInstance;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/CriterionTrigger.java b/src/main/java/net/minecraft/advancements/CriterionTrigger.java
index eb7f0510d60ee77a9888c81ecbae5c8eb51220c4..0220b2b18f7d6b2c6f7054d2bd6978ee2005aa3b 100644
--- a/src/main/java/net/minecraft/advancements/CriterionTrigger.java
+++ b/src/main/java/net/minecraft/advancements/CriterionTrigger.java
@@ -17,25 +17,9 @@ public interface CriterionTrigger<T extends CriterionTriggerInstance> {
         return new Criterion<>(this, criterionTriggerInstance);
     }
 
-    public static record Listener<T extends CriterionTriggerInstance>(T a, AdvancementHolder b, String c) {
-        private final T trigger;
-        private final AdvancementHolder advancement;
-        private final String criterion;
-
+    public static record Listener<T extends CriterionTriggerInstance>(T trigger, AdvancementHolder advancement, String criterion) {
         public void run(PlayerAdvancements playerAdvancements) {
             playerAdvancements.award(this.advancement, this.criterion);
         }
-
-        public T trigger() {
-            return this.trigger;
-        }
-
-        public AdvancementHolder advancement() {
-            return this.advancement;
-        }
-
-        public String criterion() {
-            return this.criterion;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/BlockPredicate.java b/src/main/java/net/minecraft/advancements/critereon/BlockPredicate.java
index d36a4889f94e0e7adfdb5e7e6f3ba3f42a150332..bbb93f7843537da6fac4463dd8198a4927d454de 100644
--- a/src/main/java/net/minecraft/advancements/critereon/BlockPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/BlockPredicate.java
@@ -16,11 +16,11 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 
-public record BlockPredicate(Optional<TagKey<Block>> b, Optional<HolderSet<Block>> c, Optional<StatePropertiesPredicate> d, Optional<NbtPredicate> e) {
-    private final Optional<TagKey<Block>> tag;
-    private final Optional<HolderSet<Block>> blocks;
-    private final Optional<StatePropertiesPredicate> properties;
-    private final Optional<NbtPredicate> nbt;
+public record BlockPredicate(
+        Optional<TagKey<Block>> tag,
+        Optional<HolderSet<Block>> blocks,
+        Optional<StatePropertiesPredicate> properties,
+        Optional<NbtPredicate> nbt) {
     private static final Codec<HolderSet<Block>> BLOCKS_CODEC = BuiltInRegistries.BLOCK.holderByNameCodec().listOf().xmap(HolderSet::direct, (holderSet) -> holderSet.stream().toList());
     public static final Codec<BlockPredicate> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(TagKey.codec(Registries.BLOCK), "tag").forGetter(BlockPredicate::tag), ExtraCodecs.strictOptionalField(BLOCKS_CODEC, "blocks").forGetter(BlockPredicate::blocks), ExtraCodecs.strictOptionalField(StatePropertiesPredicate.CODEC, "state").forGetter(BlockPredicate::properties), ExtraCodecs.strictOptionalField(NbtPredicate.CODEC, "nbt").forGetter(BlockPredicate::nbt)).apply(instance, BlockPredicate::new));
 
@@ -48,22 +48,6 @@ public record BlockPredicate(Optional<TagKey<Block>> b, Optional<HolderSet<Block
         }
     }
 
-    public Optional<TagKey<Block>> tag() {
-        return this.tag;
-    }
-
-    public Optional<HolderSet<Block>> blocks() {
-        return this.blocks;
-    }
-
-    public Optional<StatePropertiesPredicate> properties() {
-        return this.properties;
-    }
-
-    public Optional<NbtPredicate> nbt() {
-        return this.nbt;
-    }
-
     public static class Builder {
         private Optional<HolderSet<Block>> blocks = Optional.empty();
         private Optional<TagKey<Block>> tag = Optional.empty();
@@ -106,4 +90,4 @@ public record BlockPredicate(Optional<TagKey<Block>> b, Optional<HolderSet<Block
             return new BlockPredicate(this.tag, this.blocks, this.properties, this.nbt);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/DamagePredicate.java b/src/main/java/net/minecraft/advancements/critereon/DamagePredicate.java
index 1b2271c60e9c16dea29f59b350b2fd5b2dbd7d8e..749930ba9cb349e86b41b29af41533a0cc5ab0f5 100644
--- a/src/main/java/net/minecraft/advancements/critereon/DamagePredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/DamagePredicate.java
@@ -8,13 +8,13 @@ import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.damagesource.DamageSource;
 
-public record DamagePredicate(MinMaxBounds.Doubles a, MinMaxBounds.Doubles b, Optional<EntityPredicate> c, Optional<Boolean> d, Optional<DamageSourcePredicate> e) {
-    private final MinMaxBounds.Doubles dealtDamage;
-    private final MinMaxBounds.Doubles takenDamage;
-    private final Optional<EntityPredicate> sourceEntity;
-    private final Optional<Boolean> blocked;
-    private final Optional<DamageSourcePredicate> type;
-
+public record DamagePredicate(
+        MinMaxBounds.Doubles dealtDamage,
+        MinMaxBounds.Doubles takenDamage,
+        Optional<EntityPredicate> sourceEntity,
+        Optional<Boolean> blocked,
+        Optional<DamageSourcePredicate> type
+) {
     public boolean matches(ServerPlayer serverPlayer, DamageSource damageSource, float f, float f2, boolean flag) {
         if (!this.dealtDamage.matches((double)f)) {
             return false;
@@ -53,26 +53,6 @@ public record DamagePredicate(MinMaxBounds.Doubles a, MinMaxBounds.Doubles b, Op
         return jsonObject;
     }
 
-    public MinMaxBounds.Doubles dealtDamage() {
-        return this.dealtDamage;
-    }
-
-    public MinMaxBounds.Doubles takenDamage() {
-        return this.takenDamage;
-    }
-
-    public Optional<EntityPredicate> sourceEntity() {
-        return this.sourceEntity;
-    }
-
-    public Optional<Boolean> blocked() {
-        return this.blocked;
-    }
-
-    public Optional<DamageSourcePredicate> type() {
-        return this.type;
-    }
-
     public static class Builder {
         private MinMaxBounds.Doubles dealtDamage = MinMaxBounds.Doubles.ANY;
         private MinMaxBounds.Doubles takenDamage = MinMaxBounds.Doubles.ANY;
@@ -118,4 +98,4 @@ public record DamagePredicate(MinMaxBounds.Doubles a, MinMaxBounds.Doubles b, Op
             return new DamagePredicate(this.dealtDamage, this.takenDamage, this.sourceEntity, this.blocked, this.type);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/DamageSourcePredicate.java b/src/main/java/net/minecraft/advancements/critereon/DamageSourcePredicate.java
index 97587dbf60abe07b57020332bc898bfed619bb37..63b84cfd72c9c5a5c77fbd34df38ff773b874e0d 100644
--- a/src/main/java/net/minecraft/advancements/critereon/DamageSourcePredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/DamageSourcePredicate.java
@@ -18,10 +18,7 @@ import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.DamageType;
 import net.minecraft.world.phys.Vec3;
 
-public record DamageSourcePredicate(List<TagPredicate<DamageType>> b, Optional<EntityPredicate> c, Optional<EntityPredicate> d) {
-    private final List<TagPredicate<DamageType>> tags;
-    private final Optional<EntityPredicate> directEntity;
-    private final Optional<EntityPredicate> sourceEntity;
+public record DamageSourcePredicate(List<TagPredicate<DamageType>> tags, Optional<EntityPredicate> directEntity, Optional<EntityPredicate> sourceEntity) {
     public static final Codec<DamageSourcePredicate> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(TagPredicate.codec(Registries.DAMAGE_TYPE).listOf(), "tags", List.of()).forGetter(DamageSourcePredicate::tags), ExtraCodecs.strictOptionalField(EntityPredicate.CODEC, "direct_entity").forGetter(DamageSourcePredicate::directEntity), ExtraCodecs.strictOptionalField(EntityPredicate.CODEC, "source_entity").forGetter(DamageSourcePredicate::sourceEntity)).apply(instance, DamageSourcePredicate::new));
 
     public boolean matches(ServerPlayer serverPlayer, DamageSource damageSource) {
@@ -50,18 +47,6 @@ public record DamageSourcePredicate(List<TagPredicate<DamageType>> b, Optional<E
         return Util.getOrThrow(CODEC.encodeStart(JsonOps.INSTANCE, this), IllegalStateException::new);
     }
 
-    public List<TagPredicate<DamageType>> tags() {
-        return this.tags;
-    }
-
-    public Optional<EntityPredicate> directEntity() {
-        return this.directEntity;
-    }
-
-    public Optional<EntityPredicate> sourceEntity() {
-        return this.sourceEntity;
-    }
-
     public static class Builder {
         private final com.google.common.collect.ImmutableList.Builder<TagPredicate<DamageType>> tags = ImmutableList.builder();
         private Optional<EntityPredicate> directEntity = Optional.empty();
@@ -90,4 +75,4 @@ public record DamageSourcePredicate(List<TagPredicate<DamageType>> b, Optional<E
             return new DamageSourcePredicate(this.tags.build(), this.directEntity, this.sourceEntity);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/DistancePredicate.java b/src/main/java/net/minecraft/advancements/critereon/DistancePredicate.java
index a697e651d4569c92b0c2d38ae2eb6ed6f0bc3e98..9a43890e6c69bcc2263392bd9ebf16c4ebbb32c0 100644
--- a/src/main/java/net/minecraft/advancements/critereon/DistancePredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/DistancePredicate.java
@@ -11,12 +11,7 @@ import net.minecraft.Util;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.Mth;
 
-public record DistancePredicate(MinMaxBounds.Doubles b, MinMaxBounds.Doubles c, MinMaxBounds.Doubles d, MinMaxBounds.Doubles e, MinMaxBounds.Doubles f) {
-    private final MinMaxBounds.Doubles x;
-    private final MinMaxBounds.Doubles y;
-    private final MinMaxBounds.Doubles z;
-    private final MinMaxBounds.Doubles horizontal;
-    private final MinMaxBounds.Doubles absolute;
+public record DistancePredicate(MinMaxBounds.Doubles x, MinMaxBounds.Doubles y, MinMaxBounds.Doubles z, MinMaxBounds.Doubles horizontal, MinMaxBounds.Doubles absolute) {
     public static final Codec<DistancePredicate> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(MinMaxBounds.Doubles.CODEC, "x", MinMaxBounds.Doubles.ANY).forGetter(DistancePredicate::x), ExtraCodecs.strictOptionalField(MinMaxBounds.Doubles.CODEC, "y", MinMaxBounds.Doubles.ANY).forGetter(DistancePredicate::y), ExtraCodecs.strictOptionalField(MinMaxBounds.Doubles.CODEC, "z", MinMaxBounds.Doubles.ANY).forGetter(DistancePredicate::z), ExtraCodecs.strictOptionalField(MinMaxBounds.Doubles.CODEC, "horizontal", MinMaxBounds.Doubles.ANY).forGetter(DistancePredicate::horizontal), ExtraCodecs.strictOptionalField(MinMaxBounds.Doubles.CODEC, "absolute", MinMaxBounds.Doubles.ANY).forGetter(DistancePredicate::absolute)).apply(instance, DistancePredicate::new));
 
     public static DistancePredicate horizontal(MinMaxBounds.Doubles doubles) {
@@ -53,24 +48,4 @@ public record DistancePredicate(MinMaxBounds.Doubles b, MinMaxBounds.Doubles c,
     public JsonElement serializeToJson() {
         return Util.getOrThrow(CODEC.encodeStart(JsonOps.INSTANCE, this), IllegalStateException::new);
     }
-
-    public MinMaxBounds.Doubles x() {
-        return this.x;
-    }
-
-    public MinMaxBounds.Doubles y() {
-        return this.y;
-    }
-
-    public MinMaxBounds.Doubles z() {
-        return this.z;
-    }
-
-    public MinMaxBounds.Doubles horizontal() {
-        return this.horizontal;
-    }
-
-    public MinMaxBounds.Doubles absolute() {
-        return this.absolute;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/EnchantmentPredicate.java b/src/main/java/net/minecraft/advancements/critereon/EnchantmentPredicate.java
index b01cd8b2dfaa63bc060f807d93bb11e6e5c3dbfe..6a6f22174f2c891f38028b66748a0e458f3ef206 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EnchantmentPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EnchantmentPredicate.java
@@ -9,9 +9,7 @@ import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.world.item.enchantment.Enchantment;
 
-public record EnchantmentPredicate(Optional<Holder<Enchantment>> b, MinMaxBounds.Ints c) {
-    private final Optional<Holder<Enchantment>> enchantment;
-    private final MinMaxBounds.Ints level;
+public record EnchantmentPredicate(Optional<Holder<Enchantment>> enchantment, MinMaxBounds.Ints level) {
     public static final Codec<EnchantmentPredicate> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(BuiltInRegistries.ENCHANTMENT.holderByNameCodec(), "enchantment").forGetter(EnchantmentPredicate::enchantment), ExtraCodecs.strictOptionalField(MinMaxBounds.Ints.CODEC, "levels", MinMaxBounds.Ints.ANY).forGetter(EnchantmentPredicate::level)).apply(instance, EnchantmentPredicate::new));
 
     public EnchantmentPredicate(Enchantment enchantment, MinMaxBounds.Ints ints) {
@@ -41,12 +39,4 @@ public record EnchantmentPredicate(Optional<Holder<Enchantment>> b, MinMaxBounds
 
         return true;
     }
-
-    public Optional<Holder<Enchantment>> enchantment() {
-        return this.enchantment;
-    }
-
-    public MinMaxBounds.Ints level() {
-        return this.level;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityEquipmentPredicate.java b/src/main/java/net/minecraft/advancements/critereon/EntityEquipmentPredicate.java
index 28a3754231b16314982401c8299ad08316915896..930723cf3e3fd825c084f0d4ca268423c1c025fa 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityEquipmentPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityEquipmentPredicate.java
@@ -11,13 +11,13 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.raid.Raid;
 import net.minecraft.world.item.Items;
 
-public record EntityEquipmentPredicate(Optional<ItemPredicate> c, Optional<ItemPredicate> d, Optional<ItemPredicate> e, Optional<ItemPredicate> f, Optional<ItemPredicate> g, Optional<ItemPredicate> h) {
-    private final Optional<ItemPredicate> head;
-    private final Optional<ItemPredicate> chest;
-    private final Optional<ItemPredicate> legs;
-    private final Optional<ItemPredicate> feet;
-    private final Optional<ItemPredicate> mainhand;
-    private final Optional<ItemPredicate> offhand;
+public record EntityEquipmentPredicate(
+        Optional<ItemPredicate> head,
+        Optional<ItemPredicate> chest,
+        Optional<ItemPredicate> legs,
+        Optional<ItemPredicate> feet,
+        Optional<ItemPredicate> mainhand,
+        Optional<ItemPredicate> offhand) {
     public static final Codec<EntityEquipmentPredicate> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(ItemPredicate.CODEC, "head").forGetter(EntityEquipmentPredicate::head), ExtraCodecs.strictOptionalField(ItemPredicate.CODEC, "chest").forGetter(EntityEquipmentPredicate::chest), ExtraCodecs.strictOptionalField(ItemPredicate.CODEC, "legs").forGetter(EntityEquipmentPredicate::legs), ExtraCodecs.strictOptionalField(ItemPredicate.CODEC, "feet").forGetter(EntityEquipmentPredicate::feet), ExtraCodecs.strictOptionalField(ItemPredicate.CODEC, "mainhand").forGetter(EntityEquipmentPredicate::mainhand), ExtraCodecs.strictOptionalField(ItemPredicate.CODEC, "offhand").forGetter(EntityEquipmentPredicate::offhand)).apply(instance, EntityEquipmentPredicate::new));
     public static final EntityEquipmentPredicate CAPTAIN = EntityEquipmentPredicate.Builder.equipment().head(ItemPredicate.Builder.item().of(Items.WHITE_BANNER).hasNbt(Raid.getLeaderBannerInstance().getTag())).build();
 
@@ -42,30 +42,6 @@ public record EntityEquipmentPredicate(Optional<ItemPredicate> c, Optional<ItemP
         }
     }
 
-    public Optional<ItemPredicate> head() {
-        return this.head;
-    }
-
-    public Optional<ItemPredicate> chest() {
-        return this.chest;
-    }
-
-    public Optional<ItemPredicate> legs() {
-        return this.legs;
-    }
-
-    public Optional<ItemPredicate> feet() {
-        return this.feet;
-    }
-
-    public Optional<ItemPredicate> mainhand() {
-        return this.mainhand;
-    }
-
-    public Optional<ItemPredicate> offhand() {
-        return this.offhand;
-    }
-
     public static class Builder {
         private Optional<ItemPredicate> head = Optional.empty();
         private Optional<ItemPredicate> chest = Optional.empty();
@@ -112,4 +88,4 @@ public record EntityEquipmentPredicate(Optional<ItemPredicate> c, Optional<ItemP
             return new EntityEquipmentPredicate(this.head, this.chest, this.legs, this.feet, this.mainhand, this.offhand);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityFlagsPredicate.java b/src/main/java/net/minecraft/advancements/critereon/EntityFlagsPredicate.java
index 00f4e682e534b793348c1e9f84971d72bed22e55..24ff9d3fee2b74acae59a8a624dc585f5dc873b3 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityFlagsPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityFlagsPredicate.java
@@ -7,12 +7,7 @@ import net.minecraft.util.ExtraCodecs;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 
-public record EntityFlagsPredicate(Optional<Boolean> b, Optional<Boolean> c, Optional<Boolean> d, Optional<Boolean> e, Optional<Boolean> f) {
-    private final Optional<Boolean> isOnFire;
-    private final Optional<Boolean> isCrouching;
-    private final Optional<Boolean> isSprinting;
-    private final Optional<Boolean> isSwimming;
-    private final Optional<Boolean> isBaby;
+public record EntityFlagsPredicate(Optional<Boolean> isOnFire, Optional<Boolean> isCrouching, Optional<Boolean> isSprinting, Optional<Boolean> isSwimming, Optional<Boolean> isBaby) {
     public static final Codec<EntityFlagsPredicate> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(Codec.BOOL, "is_on_fire").forGetter(EntityFlagsPredicate::isOnFire), ExtraCodecs.strictOptionalField(Codec.BOOL, "is_sneaking").forGetter(EntityFlagsPredicate::isCrouching), ExtraCodecs.strictOptionalField(Codec.BOOL, "is_sprinting").forGetter(EntityFlagsPredicate::isSprinting), ExtraCodecs.strictOptionalField(Codec.BOOL, "is_swimming").forGetter(EntityFlagsPredicate::isSwimming), ExtraCodecs.strictOptionalField(Codec.BOOL, "is_baby").forGetter(EntityFlagsPredicate::isBaby)).apply(instance, EntityFlagsPredicate::new));
 
     public boolean matches(Entity entity) {
@@ -36,26 +31,6 @@ public record EntityFlagsPredicate(Optional<Boolean> b, Optional<Boolean> c, Opt
         }
     }
 
-    public Optional<Boolean> isOnFire() {
-        return this.isOnFire;
-    }
-
-    public Optional<Boolean> isCrouching() {
-        return this.isCrouching;
-    }
-
-    public Optional<Boolean> isSprinting() {
-        return this.isSprinting;
-    }
-
-    public Optional<Boolean> isSwimming() {
-        return this.isSwimming;
-    }
-
-    public Optional<Boolean> isBaby() {
-        return this.isBaby;
-    }
-
     public static class Builder {
         private Optional<Boolean> isOnFire = Optional.empty();
         private Optional<Boolean> isCrouching = Optional.empty();
@@ -96,4 +71,4 @@ public record EntityFlagsPredicate(Optional<Boolean> b, Optional<Boolean> c, Opt
             return new EntityFlagsPredicate(this.isOnFire, this.isCrouching, this.isSprinting, this.isSwimming, this.isBaby);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityPredicate.java b/src/main/java/net/minecraft/advancements/critereon/EntityPredicate.java
index 44a3fbc7f7578427abd42573211b400999944fae..8549984b9ae0a80db2ae565cd7a794ea0d79499f 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityPredicate.java
@@ -30,20 +30,21 @@ import net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyC
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.Team;
 
-public record EntityPredicate(Optional<EntityTypePredicate> b, Optional<DistancePredicate> c, Optional<LocationPredicate> d, Optional<LocationPredicate> e, Optional<MobEffectsPredicate> f, Optional<NbtPredicate> g, Optional<EntityFlagsPredicate> h, Optional<EntityEquipmentPredicate> i, Optional<EntitySubPredicate> j, Optional<EntityPredicate> k, Optional<EntityPredicate> l, Optional<EntityPredicate> m, Optional<String> n) {
-    private final Optional<EntityTypePredicate> entityType;
-    private final Optional<DistancePredicate> distanceToPlayer;
-    private final Optional<LocationPredicate> location;
-    private final Optional<LocationPredicate> steppingOnLocation;
-    private final Optional<MobEffectsPredicate> effects;
-    private final Optional<NbtPredicate> nbt;
-    private final Optional<EntityFlagsPredicate> flags;
-    private final Optional<EntityEquipmentPredicate> equipment;
-    private final Optional<EntitySubPredicate> subPredicate;
-    private final Optional<EntityPredicate> vehicle;
-    private final Optional<EntityPredicate> passenger;
-    private final Optional<EntityPredicate> targetedEntity;
-    private final Optional<String> team;
+public record EntityPredicate(
+        Optional<EntityTypePredicate> entityType,
+        Optional<DistancePredicate> distanceToPlayer,
+        Optional<LocationPredicate> location,
+        Optional<LocationPredicate> steppingOnLocation,
+        Optional<MobEffectsPredicate> effects,
+        Optional<NbtPredicate> nbt,
+        Optional<EntityFlagsPredicate> flags,
+        Optional<EntityEquipmentPredicate> equipment,
+        Optional<EntitySubPredicate> subPredicate,
+        Optional<EntityPredicate> vehicle,
+        Optional<EntityPredicate> passenger,
+        Optional<EntityPredicate> targetedEntity,
+        Optional<String> team
+) {
     public static final Codec<EntityPredicate> CODEC = ExtraCodecs.recursive((codec) -> RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(EntityTypePredicate.CODEC, "type").forGetter(EntityPredicate::entityType), ExtraCodecs.strictOptionalField(DistancePredicate.CODEC, "distance").forGetter(EntityPredicate::distanceToPlayer), ExtraCodecs.strictOptionalField(LocationPredicate.CODEC, "location").forGetter(EntityPredicate::location), ExtraCodecs.strictOptionalField(LocationPredicate.CODEC, "stepping_on").forGetter(EntityPredicate::steppingOnLocation), ExtraCodecs.strictOptionalField(MobEffectsPredicate.CODEC, "effects").forGetter(EntityPredicate::effects), ExtraCodecs.strictOptionalField(NbtPredicate.CODEC, "nbt").forGetter(EntityPredicate::nbt), ExtraCodecs.strictOptionalField(EntityFlagsPredicate.CODEC, "flags").forGetter(EntityPredicate::flags), ExtraCodecs.strictOptionalField(EntityEquipmentPredicate.CODEC, "equipment").forGetter(EntityPredicate::equipment), ExtraCodecs.strictOptionalField(EntitySubPredicate.CODEC, "type_specific").forGetter(EntityPredicate::subPredicate), ExtraCodecs.strictOptionalField(codec, "vehicle").forGetter(EntityPredicate::vehicle), ExtraCodecs.strictOptionalField(codec, "passenger").forGetter(EntityPredicate::passenger), ExtraCodecs.strictOptionalField(codec, "targeted_entity").forGetter(EntityPredicate::targetedEntity), ExtraCodecs.strictOptionalField(Codec.STRING, "team").forGetter(EntityPredicate::team)).apply(instance, EntityPredicate::new)));
 
     public static Optional<ContextAwarePredicate> fromJson(JsonObject jsonObject, String s, DeserializationContext deserializationContext) {
@@ -320,4 +321,4 @@ public record EntityPredicate(Optional<EntityTypePredicate> b, Optional<Distance
             return new EntityPredicate(this.entityType, this.distanceToPlayer, this.location, this.steppingOnLocation, this.effects, this.nbt, this.flags, this.equipment, this.subPredicate, this.vehicle, this.passenger, this.targetedEntity, this.team);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntitySubPredicate.java b/src/main/java/net/minecraft/advancements/critereon/EntitySubPredicate.java
index 8f5740f84effc1c1e18d8dbb3ef810c0fb5f5c07..1ef18af27ed096a35b7e0bdd11d18b11a95558f1 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntitySubPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntitySubPredicate.java
@@ -46,12 +46,7 @@ public interface EntitySubPredicate {
         return EntitySubPredicate.Types.FROG.createPredicate(frogVariant);
     }
 
-    public static record Type(MapCodec<? extends EntitySubPredicate> a) {
-        private final MapCodec<? extends EntitySubPredicate> codec;
-
-        public MapCodec<? extends EntitySubPredicate> codec() {
-            return this.codec;
-        }
+    public static record Type(MapCodec<? extends EntitySubPredicate> codec) {
     }
 
     public static final class Types {
@@ -211,7 +206,7 @@ public interface EntitySubPredicate {
 
             return var10000;
         });
-        public static final BiMap<String, EntitySubPredicate.Type> TYPES = ImmutableBiMap.builder().put("any", ANY).put("lightning", LIGHTNING).put("fishing_hook", FISHING_HOOK).put("player", PLAYER).put("slime", SLIME).put("cat", CAT.type()).put("frog", FROG.type()).put("axolotl", AXOLOTL.type()).put("boat", BOAT.type()).put("fox", FOX.type()).put("mooshroom", MOOSHROOM.type()).put("painting", PAINTING.type()).put("rabbit", RABBIT.type()).put("horse", HORSE.type()).put("llama", LLAMA.type()).put("villager", VILLAGER.type()).put("parrot", PARROT.type()).put("tropical_fish", TROPICAL_FISH.type()).buildOrThrow();
+        public static final BiMap<String, EntitySubPredicate.Type> TYPES = ImmutableBiMap.<String, EntitySubPredicate.Type>builder().put("any", ANY).put("lightning", LIGHTNING).put("fishing_hook", FISHING_HOOK).put("player", PLAYER).put("slime", SLIME).put("cat", CAT.type()).put("frog", FROG.type()).put("axolotl", AXOLOTL.type()).put("boat", BOAT.type()).put("fox", FOX.type()).put("mooshroom", MOOSHROOM.type()).put("painting", PAINTING.type()).put("rabbit", RABBIT.type()).put("horse", HORSE.type()).put("llama", LLAMA.type()).put("villager", VILLAGER.type()).put("parrot", PARROT.type()).put("tropical_fish", TROPICAL_FISH.type()).buildOrThrow();
         public static final Codec<EntitySubPredicate.Type> TYPE_CODEC = ExtraCodecs.stringResolverCodec(TYPES.inverse()::get, TYPES::get);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java b/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java
index 54ed13d5c2e8445f5984d21433c57b5f6e5f2c46..e3f66d275b134b78dfe247242e9c7f618b930324 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityTypePredicate.java
@@ -10,8 +10,7 @@ import net.minecraft.core.registries.Registries;
 import net.minecraft.tags.TagKey;
 import net.minecraft.world.entity.EntityType;
 
-public record EntityTypePredicate(HolderSet<EntityType<?>> b) {
-    private final HolderSet<EntityType<?>> types;
+public record EntityTypePredicate(HolderSet<EntityType<?>> types) {
     public static final Codec<EntityTypePredicate> CODEC = Codec.either(TagKey.hashedCodec(Registries.ENTITY_TYPE), BuiltInRegistries.ENTITY_TYPE.holderByNameCodec()).flatComapMap((either) -> (EntityTypePredicate)either.map((tagKey) -> new EntityTypePredicate(BuiltInRegistries.ENTITY_TYPE.getOrCreateTag(tagKey)), (holder) -> new EntityTypePredicate(HolderSet.direct(holder))), (entityTypePredicate) -> {
         HolderSet<EntityType<?>> holderSet = entityTypePredicate.types();
         Optional<TagKey<EntityType<?>>> optional = holderSet.unwrapKey();
@@ -33,8 +32,4 @@ public record EntityTypePredicate(HolderSet<EntityType<?>> b) {
     public boolean matches(EntityType<?> entityType) {
         return entityType.is(this.types);
     }
-
-    public HolderSet<EntityType<?>> types() {
-        return this.types;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityVariantPredicate.java b/src/main/java/net/minecraft/advancements/critereon/EntityVariantPredicate.java
index a644db97c78d8e4542484c36bc4d664400ff4de8..49458f3d38b8e5c99fb516f30adfd60711316928 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityVariantPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityVariantPredicate.java
@@ -37,25 +37,9 @@ public class EntityVariantPredicate<V> {
         return new EntityVariantPredicate.SubPredicate<>(this.type, this.getter, object);
     }
 
-    public static record SubPredicate<V>(EntitySubPredicate.Type b, Function<Entity, Optional<V>> c, V d) implements EntitySubPredicate {
-        private final EntitySubPredicate.Type type;
-        private final Function<Entity, Optional<V>> getter;
-        private final V variant;
-
+    public static record SubPredicate<V>(EntitySubPredicate.Type type, Function<Entity, Optional<V>> getter, V variant) implements EntitySubPredicate {
         public boolean matches(Entity entity, ServerLevel serverLevel, @Nullable Vec3 vec3) {
             return (this.getter.apply(entity)).filter((object) -> object.equals(this.variant)).isPresent();
         }
-
-        public EntitySubPredicate.Type type() {
-            return this.type;
-        }
-
-        public Function<Entity, Optional<V>> getter() {
-            return this.getter;
-        }
-
-        public V variant() {
-            return this.variant;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/FishingHookPredicate.java b/src/main/java/net/minecraft/advancements/critereon/FishingHookPredicate.java
index 7dc71a0a3ab33738b4b3cb6aa147b60fed7a2f14..5dccf7e410bdfb74b7a800f770b1827c3b7ebf47 100644
--- a/src/main/java/net/minecraft/advancements/critereon/FishingHookPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/FishingHookPredicate.java
@@ -11,8 +11,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.projectile.FishingHook;
 import net.minecraft.world.phys.Vec3;
 
-public record FishingHookPredicate(Optional<Boolean> d) implements EntitySubPredicate {
-    private final Optional<Boolean> inOpenWater;
+public record FishingHookPredicate(Optional<Boolean> inOpenWater) implements EntitySubPredicate {
     public static final FishingHookPredicate ANY = new FishingHookPredicate(Optional.empty());
     public static final MapCodec<FishingHookPredicate> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ExtraCodecs.strictOptionalField(Codec.BOOL, "in_open_water").forGetter(FishingHookPredicate::inOpenWater)).apply(instance, FishingHookPredicate::new));
 
@@ -34,8 +33,4 @@ public record FishingHookPredicate(Optional<Boolean> d) implements EntitySubPred
             return false;
         }
     }
-
-    public Optional<Boolean> inOpenWater() {
-        return this.inOpenWater;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/FluidPredicate.java b/src/main/java/net/minecraft/advancements/critereon/FluidPredicate.java
index 472c65899bdbd4e4b44db0815408cbe5381ba41e..404bce5bbef0bb3a72003a25af239bb4be2235f9 100644
--- a/src/main/java/net/minecraft/advancements/critereon/FluidPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/FluidPredicate.java
@@ -13,10 +13,7 @@ import net.minecraft.util.ExtraCodecs;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.FluidState;
 
-public record FluidPredicate(Optional<TagKey<Fluid>> b, Optional<Holder<Fluid>> c, Optional<StatePropertiesPredicate> d) {
-    private final Optional<TagKey<Fluid>> tag;
-    private final Optional<Holder<Fluid>> fluid;
-    private final Optional<StatePropertiesPredicate> properties;
+public record FluidPredicate(Optional<TagKey<Fluid>> tag, Optional<Holder<Fluid>> fluid, Optional<StatePropertiesPredicate> properties) {
     public static final Codec<FluidPredicate> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(TagKey.codec(Registries.FLUID), "tag").forGetter(FluidPredicate::tag), ExtraCodecs.strictOptionalField(BuiltInRegistries.FLUID.holderByNameCodec(), "fluid").forGetter(FluidPredicate::fluid), ExtraCodecs.strictOptionalField(StatePropertiesPredicate.CODEC, "state").forGetter(FluidPredicate::properties)).apply(instance, FluidPredicate::new));
 
     public boolean matches(ServerLevel serverLevel, BlockPos blockPos) {
@@ -34,18 +31,6 @@ public record FluidPredicate(Optional<TagKey<Fluid>> b, Optional<Holder<Fluid>>
         }
     }
 
-    public Optional<TagKey<Fluid>> tag() {
-        return this.tag;
-    }
-
-    public Optional<Holder<Fluid>> fluid() {
-        return this.fluid;
-    }
-
-    public Optional<StatePropertiesPredicate> properties() {
-        return this.properties;
-    }
-
     public static class Builder {
         private Optional<Holder<Fluid>> fluid = Optional.empty();
         private Optional<TagKey<Fluid>> fluids = Optional.empty();
@@ -77,4 +62,4 @@ public record FluidPredicate(Optional<TagKey<Fluid>> b, Optional<Holder<Fluid>>
             return new FluidPredicate(this.fluids, this.fluid, this.properties);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java b/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
index 68691d966255e93840d83849c7f393849a1b4078..071bfe01ff8ee5e60ba0ed7d75789e59ec7fe029 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
@@ -27,15 +27,16 @@ import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.level.ItemLike;
 
-public record ItemPredicate(Optional<TagKey<Item>> b, Optional<HolderSet<Item>> c, MinMaxBounds.Ints d, MinMaxBounds.Ints e, List<EnchantmentPredicate> f, List<EnchantmentPredicate> g, Optional<Holder<Potion>> h, Optional<NbtPredicate> i) {
-    private final Optional<TagKey<Item>> tag;
-    private final Optional<HolderSet<Item>> items;
-    private final MinMaxBounds.Ints count;
-    private final MinMaxBounds.Ints durability;
-    private final List<EnchantmentPredicate> enchantments;
-    private final List<EnchantmentPredicate> storedEnchantments;
-    private final Optional<Holder<Potion>> potion;
-    private final Optional<NbtPredicate> nbt;
+public record ItemPredicate(
+        Optional<TagKey<Item>> tag,
+        Optional<HolderSet<Item>> items,
+        MinMaxBounds.Ints count,
+        MinMaxBounds.Ints durability,
+        List<EnchantmentPredicate> enchantments,
+        List<EnchantmentPredicate> storedEnchantments,
+        Optional<Holder<Potion>> potion,
+        Optional<NbtPredicate> nbt
+) {
     private static final Codec<HolderSet<Item>> ITEMS_CODEC = BuiltInRegistries.ITEM.holderByNameCodec().listOf().xmap(HolderSet::direct, (holderSet) -> holderSet.stream().toList());
     public static final Codec<ItemPredicate> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(TagKey.codec(Registries.ITEM), "tag").forGetter(ItemPredicate::tag), ExtraCodecs.strictOptionalField(ITEMS_CODEC, "items").forGetter(ItemPredicate::items), ExtraCodecs.strictOptionalField(MinMaxBounds.Ints.CODEC, "count", MinMaxBounds.Ints.ANY).forGetter(ItemPredicate::count), ExtraCodecs.strictOptionalField(MinMaxBounds.Ints.CODEC, "durability", MinMaxBounds.Ints.ANY).forGetter(ItemPredicate::durability), ExtraCodecs.strictOptionalField(EnchantmentPredicate.CODEC.listOf(), "enchantments", List.of()).forGetter(ItemPredicate::enchantments), ExtraCodecs.strictOptionalField(EnchantmentPredicate.CODEC.listOf(), "stored_enchantments", List.of()).forGetter(ItemPredicate::storedEnchantments), ExtraCodecs.strictOptionalField(BuiltInRegistries.POTION.holderByNameCodec(), "potion").forGetter(ItemPredicate::potion), ExtraCodecs.strictOptionalField(NbtPredicate.CODEC, "nbt").forGetter(ItemPredicate::nbt)).apply(instance, ItemPredicate::new));
 
@@ -93,38 +94,6 @@ public record ItemPredicate(Optional<TagKey<Item>> b, Optional<HolderSet<Item>>
         return jsonElement != null && !jsonElement.isJsonNull() ? Util.getOrThrow(CODEC.listOf().parse(JsonOps.INSTANCE, jsonElement), JsonParseException::new) : List.of();
     }
 
-    public Optional<TagKey<Item>> tag() {
-        return this.tag;
-    }
-
-    public Optional<HolderSet<Item>> items() {
-        return this.items;
-    }
-
-    public MinMaxBounds.Ints count() {
-        return this.count;
-    }
-
-    public MinMaxBounds.Ints durability() {
-        return this.durability;
-    }
-
-    public List<EnchantmentPredicate> enchantments() {
-        return this.enchantments;
-    }
-
-    public List<EnchantmentPredicate> storedEnchantments() {
-        return this.storedEnchantments;
-    }
-
-    public Optional<Holder<Potion>> potion() {
-        return this.potion;
-    }
-
-    public Optional<NbtPredicate> nbt() {
-        return this.nbt;
-    }
-
     public static class Builder {
         private final com.google.common.collect.ImmutableList.Builder<EnchantmentPredicate> enchantments = ImmutableList.builder();
         private final com.google.common.collect.ImmutableList.Builder<EnchantmentPredicate> storedEnchantments = ImmutableList.builder();
@@ -188,4 +157,4 @@ public record ItemPredicate(Optional<TagKey<Item>> b, Optional<HolderSet<Item>>
             return new ItemPredicate(this.tag, this.items, this.count, this.durability, list, list2, this.potion, this.nbt);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/LightPredicate.java b/src/main/java/net/minecraft/advancements/critereon/LightPredicate.java
index feea514229357878f98f874c9e273018d8e64a59..d9282e49ea3d43d9863f290b2c1fc61b1b3729c2 100644
--- a/src/main/java/net/minecraft/advancements/critereon/LightPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/LightPredicate.java
@@ -6,8 +6,7 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.ExtraCodecs;
 
-public record LightPredicate(MinMaxBounds.Ints b) {
-    private final MinMaxBounds.Ints composite;
+public record LightPredicate(MinMaxBounds.Ints composite) {
     public static final Codec<LightPredicate> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(MinMaxBounds.Ints.CODEC, "light", MinMaxBounds.Ints.ANY).forGetter(LightPredicate::composite)).apply(instance, LightPredicate::new));
 
     public boolean matches(ServerLevel serverLevel, BlockPos blockPos) {
@@ -18,10 +17,6 @@ public record LightPredicate(MinMaxBounds.Ints b) {
         }
     }
 
-    public MinMaxBounds.Ints composite() {
-        return this.composite;
-    }
-
     public static class Builder {
         private MinMaxBounds.Ints composite = MinMaxBounds.Ints.ANY;
 
@@ -38,4 +33,4 @@ public record LightPredicate(MinMaxBounds.Ints b) {
             return new LightPredicate(this.composite);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/LightningBoltPredicate.java b/src/main/java/net/minecraft/advancements/critereon/LightningBoltPredicate.java
index 0866f6315b787c64cf2b670fde6c341b62093a34..a9f22cd23fa5bc68cdc9c7dae3d71ebeb288ea03 100644
--- a/src/main/java/net/minecraft/advancements/critereon/LightningBoltPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/LightningBoltPredicate.java
@@ -10,9 +10,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LightningBolt;
 import net.minecraft.world.phys.Vec3;
 
-public record LightningBoltPredicate(MinMaxBounds.Ints c, Optional<EntityPredicate> d) implements EntitySubPredicate {
-    private final MinMaxBounds.Ints blocksSetOnFire;
-    private final Optional<EntityPredicate> entityStruck;
+public record LightningBoltPredicate(MinMaxBounds.Ints blocksSetOnFire, Optional<EntityPredicate> entityStruck) implements EntitySubPredicate {
     public static final MapCodec<LightningBoltPredicate> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ExtraCodecs.strictOptionalField(MinMaxBounds.Ints.CODEC, "blocks_set_on_fire", MinMaxBounds.Ints.ANY).forGetter(LightningBoltPredicate::blocksSetOnFire), ExtraCodecs.strictOptionalField(EntityPredicate.CODEC, "entity_struck").forGetter(LightningBoltPredicate::entityStruck)).apply(instance, LightningBoltPredicate::new));
 
     public static LightningBoltPredicate blockSetOnFire(MinMaxBounds.Ints ints) {
@@ -31,12 +29,4 @@ public record LightningBoltPredicate(MinMaxBounds.Ints c, Optional<EntityPredica
             return this.blocksSetOnFire.matches(lightningBolt.getBlocksSetOnFire()) && (this.entityStruck.isEmpty() || lightningBolt.getHitEntities().anyMatch((entityx) -> ((EntityPredicate)this.entityStruck.get()).matches(serverLevel, vec3, entityx)));
         }
     }
-
-    public MinMaxBounds.Ints blocksSetOnFire() {
-        return this.blocksSetOnFire;
-    }
-
-    public Optional<EntityPredicate> entityStruck() {
-        return this.entityStruck;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/LocationPredicate.java b/src/main/java/net/minecraft/advancements/critereon/LocationPredicate.java
index aee39233ed2da70780a3100c2e297d3ead925580..9e62d30692ced63cffc93cdc142a099c9b022e18 100644
--- a/src/main/java/net/minecraft/advancements/critereon/LocationPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/LocationPredicate.java
@@ -18,15 +18,16 @@ import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.block.CampfireBlock;
 import net.minecraft.world.level.levelgen.structure.Structure;
 
-public record LocationPredicate(Optional<LocationPredicate.PositionPredicate> b, Optional<ResourceKey<Biome>> c, Optional<ResourceKey<Structure>> d, Optional<ResourceKey<Level>> e, Optional<Boolean> f, Optional<LightPredicate> g, Optional<BlockPredicate> h, Optional<FluidPredicate> i) {
-    private final Optional<LocationPredicate.PositionPredicate> position;
-    private final Optional<ResourceKey<Biome>> biome;
-    private final Optional<ResourceKey<Structure>> structure;
-    private final Optional<ResourceKey<Level>> dimension;
-    private final Optional<Boolean> smokey;
-    private final Optional<LightPredicate> light;
-    private final Optional<BlockPredicate> block;
-    private final Optional<FluidPredicate> fluid;
+public record LocationPredicate(
+        Optional<LocationPredicate.PositionPredicate> position,
+        Optional<ResourceKey<Biome>> biome,
+        Optional<ResourceKey<Structure>> structure,
+        Optional<ResourceKey<Level>> dimension,
+        Optional<Boolean> smokey,
+        Optional<LightPredicate> light,
+        Optional<BlockPredicate> block,
+        Optional<FluidPredicate> fluid
+) {
     public static final Codec<LocationPredicate> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(LocationPredicate.PositionPredicate.CODEC, "position").forGetter(LocationPredicate::position), ExtraCodecs.strictOptionalField(ResourceKey.codec(Registries.BIOME), "biome").forGetter(LocationPredicate::biome), ExtraCodecs.strictOptionalField(ResourceKey.codec(Registries.STRUCTURE), "structure").forGetter(LocationPredicate::structure), ExtraCodecs.strictOptionalField(ResourceKey.codec(Registries.DIMENSION), "dimension").forGetter(LocationPredicate::dimension), ExtraCodecs.strictOptionalField(Codec.BOOL, "smokey").forGetter(LocationPredicate::smokey), ExtraCodecs.strictOptionalField(LightPredicate.CODEC, "light").forGetter(LocationPredicate::light), ExtraCodecs.strictOptionalField(BlockPredicate.CODEC, "block").forGetter(LocationPredicate::block), ExtraCodecs.strictOptionalField(FluidPredicate.CODEC, "fluid").forGetter(LocationPredicate::fluid)).apply(instance, LocationPredicate::new));
 
     private static Optional<LocationPredicate> of(Optional<LocationPredicate.PositionPredicate> optional, Optional<ResourceKey<Biome>> optional2, Optional<ResourceKey<Structure>> optional3, Optional<ResourceKey<Level>> optional4, Optional<Boolean> optional5, Optional<LightPredicate> optional6, Optional<BlockPredicate> optional7, Optional<FluidPredicate> optional8) {
@@ -191,10 +192,7 @@ public record LocationPredicate(Optional<LocationPredicate.PositionPredicate> b,
         }
     }
 
-    static record PositionPredicate(MinMaxBounds.Doubles b, MinMaxBounds.Doubles c, MinMaxBounds.Doubles d) {
-        private final MinMaxBounds.Doubles x;
-        private final MinMaxBounds.Doubles y;
-        private final MinMaxBounds.Doubles z;
+    static record PositionPredicate(MinMaxBounds.Doubles x, MinMaxBounds.Doubles y, MinMaxBounds.Doubles z) {
         public static final Codec<LocationPredicate.PositionPredicate> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(MinMaxBounds.Doubles.CODEC, "x", MinMaxBounds.Doubles.ANY).forGetter(LocationPredicate.PositionPredicate::x), ExtraCodecs.strictOptionalField(MinMaxBounds.Doubles.CODEC, "y", MinMaxBounds.Doubles.ANY).forGetter(LocationPredicate.PositionPredicate::y), ExtraCodecs.strictOptionalField(MinMaxBounds.Doubles.CODEC, "z", MinMaxBounds.Doubles.ANY).forGetter(LocationPredicate.PositionPredicate::z)).apply(instance, LocationPredicate.PositionPredicate::new));
 
         static Optional<LocationPredicate.PositionPredicate> of(MinMaxBounds.Doubles doubles, MinMaxBounds.Doubles doubles2, MinMaxBounds.Doubles doubles3) {
@@ -204,17 +202,5 @@ public record LocationPredicate(Optional<LocationPredicate.PositionPredicate> b,
         public boolean matches(double d, double d2, double d3) {
             return this.x.matches(d) && this.y.matches(d2) && this.z.matches(d3);
         }
-
-        public MinMaxBounds.Doubles x() {
-            return this.x;
-        }
-
-        public MinMaxBounds.Doubles y() {
-            return this.y;
-        }
-
-        public MinMaxBounds.Doubles z() {
-            return this.z;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/MinMaxBounds.java b/src/main/java/net/minecraft/advancements/critereon/MinMaxBounds.java
index 46bf57f0199508b3371569452eaeacd2d7739288..d68d6a4d8abeb94596eee231975cef516f0683e7 100644
--- a/src/main/java/net/minecraft/advancements/critereon/MinMaxBounds.java
+++ b/src/main/java/net/minecraft/advancements/critereon/MinMaxBounds.java
@@ -39,9 +39,9 @@ public interface MinMaxBounds<T extends Number> {
 
     static <T extends Number, R extends MinMaxBounds<T>> Codec<R> createCodec(Codec<T> codec, MinMaxBounds.BoundsFactory<T, R> boundsFactory) {
         Codec<R> codec2 = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(codec, "min").forGetter(MinMaxBounds::min), ExtraCodecs.strictOptionalField(codec, "max").forGetter(MinMaxBounds::max)).apply(instance, boundsFactory::create));
-        return Codec.either(codec2, codec).xmap((either) -> (MinMaxBounds)either.map((minMaxBounds) -> minMaxBounds, (number) -> boundsFactory.create(Optional.of(number), Optional.of(number))), (minMaxBounds) -> {
+        return Codec.either(codec2, codec).xmap((either) -> either.map((minMaxBounds) -> minMaxBounds, (number) -> boundsFactory.create(Optional.of(number), Optional.of(number))), (minMaxBounds) -> {
             Optional<T> optional = minMaxBounds.unwrapPoint();
-            return optional.isPresent() ? Either.right((Number)optional.get()) : Either.left(minMaxBounds);
+            return optional.isPresent() ? Either.right(optional.get()) : Either.left(minMaxBounds);
         });
     }
 
@@ -89,7 +89,7 @@ public interface MinMaxBounds<T extends Number> {
             return Optional.empty();
         } else {
             try {
-                return Optional.of((Number)function.apply(s));
+                return Optional.of(function.apply(s));
             } catch (NumberFormatException var6) {
                 throw ((DynamicCommandExceptionType)supplier.get()).createWithContext(stringReader, s);
             }
@@ -119,13 +119,9 @@ public interface MinMaxBounds<T extends Number> {
         R create(StringReader var1, Optional<T> var2, Optional<T> var3) throws CommandSyntaxException;
     }
 
-    public static record Doubles(Optional<Double> e, Optional<Double> f, Optional<Double> g, Optional<Double> h) implements MinMaxBounds<Double> {
-        private final Optional<Double> min;
-        private final Optional<Double> max;
-        private final Optional<Double> minSq;
-        private final Optional<Double> maxSq;
+    public static record Doubles(Optional<Double> min, Optional<Double> max, Optional<Double> minSq, Optional<Double> maxSq) implements MinMaxBounds<Double> {
         public static final MinMaxBounds.Doubles ANY = new MinMaxBounds.Doubles(Optional.empty(), Optional.empty());
-        public static final Codec<MinMaxBounds.Doubles> CODEC = MinMaxBounds.createCodec(Codec.DOUBLE, MinMaxBounds.Doubles::new);
+        public static final Codec<MinMaxBounds.Doubles> CODEC = MinMaxBounds.<Double, Doubles>createCodec(Codec.DOUBLE, MinMaxBounds.Doubles::new);
 
         private Doubles(Optional<Double> optional, Optional<Double> optional2) {
             this(optional, optional2, squareOpt(optional), squareOpt(optional2));
@@ -190,31 +186,11 @@ public interface MinMaxBounds<T extends Number> {
         public static MinMaxBounds.Doubles fromReader(StringReader stringReader, Function<Double, Double> function) throws CommandSyntaxException {
             return MinMaxBounds.fromReader(stringReader, MinMaxBounds.Doubles::create, Double::parseDouble, CommandSyntaxException.BUILT_IN_EXCEPTIONS::readerInvalidDouble, function);
         }
-
-        public Optional<Double> min() {
-            return this.min;
-        }
-
-        public Optional<Double> max() {
-            return this.max;
-        }
-
-        public Optional<Double> minSq() {
-            return this.minSq;
-        }
-
-        public Optional<Double> maxSq() {
-            return this.maxSq;
-        }
     }
 
-    public static record Ints(Optional<Integer> e, Optional<Integer> f, Optional<Long> g, Optional<Long> h) implements MinMaxBounds<Integer> {
-        private final Optional<Integer> min;
-        private final Optional<Integer> max;
-        private final Optional<Long> minSq;
-        private final Optional<Long> maxSq;
+    public static record Ints(Optional<Integer> min, Optional<Integer> max, Optional<Long> minSq, Optional<Long> maxSq) implements MinMaxBounds<Integer> {
         public static final MinMaxBounds.Ints ANY = new MinMaxBounds.Ints(Optional.empty(), Optional.empty());
-        public static final Codec<MinMaxBounds.Ints> CODEC = MinMaxBounds.createCodec(Codec.INT, MinMaxBounds.Ints::new);
+        public static final Codec<MinMaxBounds.Ints> CODEC = MinMaxBounds.<Integer, Ints>createCodec(Codec.INT, MinMaxBounds.Ints::new);
 
         private Ints(Optional<Integer> optional, Optional<Integer> optional2) {
             this(optional, optional2, optional.map((integer) -> integer.longValue() * integer.longValue()), squareOpt(optional2));
@@ -279,21 +255,5 @@ public interface MinMaxBounds<T extends Number> {
         public static MinMaxBounds.Ints fromReader(StringReader stringReader, Function<Integer, Integer> function) throws CommandSyntaxException {
             return MinMaxBounds.fromReader(stringReader, MinMaxBounds.Ints::create, Integer::parseInt, CommandSyntaxException.BUILT_IN_EXCEPTIONS::readerInvalidInt, function);
         }
-
-        public Optional<Integer> min() {
-            return this.min;
-        }
-
-        public Optional<Integer> max() {
-            return this.max;
-        }
-
-        public Optional<Long> minSq() {
-            return this.minSq;
-        }
-
-        public Optional<Long> maxSq() {
-            return this.maxSq;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/MobEffectsPredicate.java b/src/main/java/net/minecraft/advancements/critereon/MobEffectsPredicate.java
index 2b7cab5b8da3f4d81bf14a54686cae7d7bd2a526..a2422ac37763e8278662704ca06cd159a8a9a176 100644
--- a/src/main/java/net/minecraft/advancements/critereon/MobEffectsPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/MobEffectsPredicate.java
@@ -19,8 +19,7 @@ import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 
-public record MobEffectsPredicate(Map<Holder<MobEffect>, MobEffectsPredicate.MobEffectInstancePredicate> b) {
-    private final Map<Holder<MobEffect>, MobEffectsPredicate.MobEffectInstancePredicate> effectMap;
+public record MobEffectsPredicate(Map<Holder<MobEffect>, MobEffectsPredicate.MobEffectInstancePredicate> effectMap) {
     public static final Codec<MobEffectsPredicate> CODEC = Codec.unboundedMap(BuiltInRegistries.MOB_EFFECT.holderByNameCodec(), MobEffectsPredicate.MobEffectInstancePredicate.CODEC).xmap(MobEffectsPredicate::new, MobEffectsPredicate::effectMap);
 
     public boolean matches(Entity entity) {
@@ -83,11 +82,7 @@ public record MobEffectsPredicate(Map<Holder<MobEffect>, MobEffectsPredicate.Mob
         }
     }
 
-    public static record MobEffectInstancePredicate(MinMaxBounds.Ints b, MinMaxBounds.Ints c, Optional<Boolean> d, Optional<Boolean> e) {
-        private final MinMaxBounds.Ints amplifier;
-        private final MinMaxBounds.Ints duration;
-        private final Optional<Boolean> ambient;
-        private final Optional<Boolean> visible;
+    public static record MobEffectInstancePredicate(MinMaxBounds.Ints amplifier, MinMaxBounds.Ints duration, Optional<Boolean> ambient, Optional<Boolean> visible) {
         public static final Codec<MobEffectsPredicate.MobEffectInstancePredicate> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(MinMaxBounds.Ints.CODEC, "amplifier", MinMaxBounds.Ints.ANY).forGetter(MobEffectsPredicate.MobEffectInstancePredicate::amplifier), ExtraCodecs.strictOptionalField(MinMaxBounds.Ints.CODEC, "duration", MinMaxBounds.Ints.ANY).forGetter(MobEffectsPredicate.MobEffectInstancePredicate::duration), ExtraCodecs.strictOptionalField(Codec.BOOL, "ambient").forGetter(MobEffectsPredicate.MobEffectInstancePredicate::ambient), ExtraCodecs.strictOptionalField(Codec.BOOL, "visible").forGetter(MobEffectsPredicate.MobEffectInstancePredicate::visible)).apply(instance, MobEffectsPredicate.MobEffectInstancePredicate::new));
 
         public MobEffectInstancePredicate() {
@@ -107,21 +102,5 @@ public record MobEffectsPredicate(Map<Holder<MobEffect>, MobEffectsPredicate.Mob
                 return !this.visible.isPresent() || this.visible.get() == mobEffectInstance.isVisible();
             }
         }
-
-        public MinMaxBounds.Ints amplifier() {
-            return this.amplifier;
-        }
-
-        public MinMaxBounds.Ints duration() {
-            return this.duration;
-        }
-
-        public Optional<Boolean> ambient() {
-            return this.ambient;
-        }
-
-        public Optional<Boolean> visible() {
-            return this.visible;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/NbtPredicate.java b/src/main/java/net/minecraft/advancements/critereon/NbtPredicate.java
index 4c95c4c45fa6898d2e4b754d070d3c26e01d0650..ca2e52f684f37183ca22bd5426e781eb979f4346 100644
--- a/src/main/java/net/minecraft/advancements/critereon/NbtPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/NbtPredicate.java
@@ -10,8 +10,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 
-public record NbtPredicate(CompoundTag b) {
-    private final CompoundTag tag;
+public record NbtPredicate(CompoundTag tag) {
     public static final Codec<NbtPredicate> CODEC = TagParser.AS_CODEC.xmap(NbtPredicate::new, NbtPredicate::tag);
 
     public boolean matches(ItemStack itemStack) {
@@ -37,8 +36,4 @@ public record NbtPredicate(CompoundTag b) {
 
         return compoundTag;
     }
-
-    public CompoundTag tag() {
-        return this.tag;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java b/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
index a9bd839c2035711669badc3690bf2250eb3706e3..56df51cb1a63fd061806920b28fc50da0c21fa9e 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlayerPredicate.java
@@ -41,13 +41,14 @@ import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 
-public record PlayerPredicate(MinMaxBounds.Ints d, Optional<GameType> e, List<PlayerPredicate.StatMatcher<?>> f, Object2BooleanMap<ResourceLocation> g, Map<ResourceLocation, PlayerPredicate.AdvancementPredicate> h, Optional<EntityPredicate> i) implements EntitySubPredicate {
-    private final MinMaxBounds.Ints level;
-    private final Optional<GameType> gameType;
-    private final List<PlayerPredicate.StatMatcher<?>> stats;
-    private final Object2BooleanMap<ResourceLocation> recipes;
-    private final Map<ResourceLocation, PlayerPredicate.AdvancementPredicate> advancements;
-    private final Optional<EntityPredicate> lookingAt;
+public record PlayerPredicate(
+        MinMaxBounds.Ints level,
+        Optional<GameType> gameType,
+        List<PlayerPredicate.StatMatcher<?>> stats,
+        Object2BooleanMap<ResourceLocation> recipes,
+        Map<ResourceLocation, PlayerPredicate.AdvancementPredicate> advancements,
+        Optional<EntityPredicate> lookingAt
+) implements EntitySubPredicate {
     public static final int LOOKING_AT_RANGE = 100;
     public static final MapCodec<PlayerPredicate> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ExtraCodecs.strictOptionalField(MinMaxBounds.Ints.CODEC, "level", MinMaxBounds.Ints.ANY).forGetter(PlayerPredicate::level), GameType.CODEC.optionalFieldOf("gamemode").forGetter(PlayerPredicate::gameType), ExtraCodecs.strictOptionalField(PlayerPredicate.StatMatcher.CODEC.listOf(), "stats", List.of()).forGetter(PlayerPredicate::stats), ExtraCodecs.strictOptionalField(ExtraCodecs.object2BooleanMap(ResourceLocation.CODEC), "recipes", Object2BooleanMaps.emptyMap()).forGetter(PlayerPredicate::recipes), ExtraCodecs.strictOptionalField(Codec.unboundedMap(ResourceLocation.CODEC, PlayerPredicate.AdvancementPredicate.CODEC), "advancements", Map.of()).forGetter(PlayerPredicate::advancements), ExtraCodecs.strictOptionalField(EntityPredicate.CODEC, "looking_at").forGetter(PlayerPredicate::lookingAt)).apply(instance, PlayerPredicate::new));
 
@@ -139,8 +140,7 @@ public record PlayerPredicate(MinMaxBounds.Ints d, Optional<GameType> e, List<Pl
         return this.lookingAt;
     }
 
-    static record AdvancementCriterionsPredicate(Object2BooleanMap<String> c) implements PlayerPredicate.AdvancementPredicate {
-        private final Object2BooleanMap<String> criterions;
+    static record AdvancementCriterionsPredicate(Object2BooleanMap<String> criterions) implements PlayerPredicate.AdvancementPredicate {
         public static final Codec<PlayerPredicate.AdvancementCriterionsPredicate> CODEC = ExtraCodecs.object2BooleanMap(Codec.STRING).xmap(PlayerPredicate.AdvancementCriterionsPredicate::new, PlayerPredicate.AdvancementCriterionsPredicate::criterions);
 
         public boolean test(AdvancementProgress advancementProgress) {
@@ -156,23 +156,14 @@ public record PlayerPredicate(MinMaxBounds.Ints d, Optional<GameType> e, List<Pl
 
             return true;
         }
-
-        public Object2BooleanMap<String> criterions() {
-            return this.criterions;
-        }
     }
 
-    static record AdvancementDonePredicate(boolean c) implements PlayerPredicate.AdvancementPredicate {
-        private final boolean state;
+    static record AdvancementDonePredicate(boolean state) implements PlayerPredicate.AdvancementPredicate {
         public static final Codec<PlayerPredicate.AdvancementDonePredicate> CODEC = Codec.BOOL.xmap(PlayerPredicate.AdvancementDonePredicate::new, PlayerPredicate.AdvancementDonePredicate::state);
 
         public boolean test(AdvancementProgress advancementProgress) {
             return advancementProgress.isDone() == this.state;
         }
-
-        public boolean state() {
-            return this.state;
-        }
     }
 
     interface AdvancementPredicate extends Predicate<AdvancementProgress> {
@@ -241,11 +232,7 @@ public record PlayerPredicate(MinMaxBounds.Ints d, Optional<GameType> e, List<Pl
         }
     }
 
-    static record StatMatcher<T>(StatType<T> b, Holder<T> c, MinMaxBounds.Ints d, Supplier<Stat<T>> e) {
-        private final StatType<T> type;
-        private final Holder<T> value;
-        private final MinMaxBounds.Ints range;
-        private final Supplier<Stat<T>> stat;
+    static record StatMatcher<T>(StatType<T> type, Holder<T> value, MinMaxBounds.Ints range, Supplier<Stat<T>> stat) {
         public static final Codec<PlayerPredicate.StatMatcher<?>> CODEC = BuiltInRegistries.STAT_TYPE.byNameCodec().dispatch(PlayerPredicate.StatMatcher::type, PlayerPredicate.StatMatcher::createTypedCodec);
 
         public StatMatcher(StatType<T> statType, Holder<T> holder, MinMaxBounds.Ints ints) {
@@ -259,21 +246,5 @@ public record PlayerPredicate(MinMaxBounds.Ints d, Optional<GameType> e, List<Pl
         public boolean matches(StatsCounter statsCounter) {
             return this.range.matches(statsCounter.getValue((Stat)this.stat.get()));
         }
-
-        public StatType<T> type() {
-            return this.type;
-        }
-
-        public Holder<T> value() {
-            return this.value;
-        }
-
-        public MinMaxBounds.Ints range() {
-            return this.range;
-        }
-
-        public Supplier<Stat<T>> stat() {
-            return this.stat;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/SlimePredicate.java b/src/main/java/net/minecraft/advancements/critereon/SlimePredicate.java
index e391fac039028f1ffc825ba889d69f5675fd5e72..40dc65914e946024a08a9540243442f2eaba7393 100644
--- a/src/main/java/net/minecraft/advancements/critereon/SlimePredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/SlimePredicate.java
@@ -9,8 +9,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.monster.Slime;
 import net.minecraft.world.phys.Vec3;
 
-public record SlimePredicate(MinMaxBounds.Ints c) implements EntitySubPredicate {
-    private final MinMaxBounds.Ints size;
+public record SlimePredicate(MinMaxBounds.Ints size) implements EntitySubPredicate {
     public static final MapCodec<SlimePredicate> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ExtraCodecs.strictOptionalField(MinMaxBounds.Ints.CODEC, "size", MinMaxBounds.Ints.ANY).forGetter(SlimePredicate::size)).apply(instance, SlimePredicate::new));
 
     public static SlimePredicate sized(MinMaxBounds.Ints ints) {
@@ -29,8 +28,4 @@ public record SlimePredicate(MinMaxBounds.Ints c) implements EntitySubPredicate
     public EntitySubPredicate.Type type() {
         return EntitySubPredicate.Types.SLIME;
     }
-
-    public MinMaxBounds.Ints size() {
-        return this.size;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
index 6b66197259ec8d2898916550145fcaa6285568be..d7413a5bc7fe34c1a8dee3cc3c26a03071e16ede 100644
--- a/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/StatePropertiesPredicate.java
@@ -22,8 +22,7 @@ import net.minecraft.world.level.block.state.StateHolder;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.material.FluidState;
 
-public record StatePropertiesPredicate(List<StatePropertiesPredicate.PropertyMatcher> b) {
-    private final List<StatePropertiesPredicate.PropertyMatcher> properties;
+public record StatePropertiesPredicate(List<StatePropertiesPredicate.PropertyMatcher> properties) {
     private static final Codec<List<StatePropertiesPredicate.PropertyMatcher>> PROPERTIES_CODEC = Codec.unboundedMap(Codec.STRING, StatePropertiesPredicate.ValueMatcher.CODEC).xmap((map) -> map.entrySet().stream().map((entry) -> new StatePropertiesPredicate.PropertyMatcher((String)entry.getKey(), (StatePropertiesPredicate.ValueMatcher)entry.getValue())).toList(), (list) -> list.stream().collect(Collectors.toMap(StatePropertiesPredicate.PropertyMatcher::name, StatePropertiesPredicate.PropertyMatcher::valueMatcher)));
     public static final Codec<StatePropertiesPredicate> CODEC = PROPERTIES_CODEC.xmap(StatePropertiesPredicate::new, StatePropertiesPredicate::properties);
 
@@ -68,10 +67,6 @@ public record StatePropertiesPredicate(List<StatePropertiesPredicate.PropertyMat
         return Util.getOrThrow(CODEC.encodeStart(JsonOps.INSTANCE, this), IllegalStateException::new);
     }
 
-    public List<StatePropertiesPredicate.PropertyMatcher> properties() {
-        return this.properties;
-    }
-
     public static class Builder {
         private final com.google.common.collect.ImmutableList.Builder<StatePropertiesPredicate.PropertyMatcher> matchers = ImmutableList.builder();
 
@@ -104,25 +99,17 @@ public record StatePropertiesPredicate(List<StatePropertiesPredicate.PropertyMat
         }
     }
 
-    static record ExactMatcher(String c) implements StatePropertiesPredicate.ValueMatcher {
-        private final String value;
+    static record ExactMatcher(String value) implements StatePropertiesPredicate.ValueMatcher {
         public static final Codec<StatePropertiesPredicate.ExactMatcher> CODEC = Codec.STRING.xmap(StatePropertiesPredicate.ExactMatcher::new, StatePropertiesPredicate.ExactMatcher::value);
 
         public <T extends Comparable<T>> boolean match(StateHolder<?, ?> stateHolder, Property<T> property) {
             T comparable = stateHolder.getValue(property);
             Optional<T> optional = property.getValue(this.value);
-            return optional.isPresent() && comparable.compareTo((Comparable)optional.get()) == 0;
-        }
-
-        public String value() {
-            return this.value;
+            return optional.isPresent() && comparable.compareTo(optional.get()) == 0;
         }
     }
 
-    static record PropertyMatcher(String a, StatePropertiesPredicate.ValueMatcher b) {
-        private final String name;
-        private final StatePropertiesPredicate.ValueMatcher valueMatcher;
-
+    static record PropertyMatcher(String name, StatePropertiesPredicate.ValueMatcher valueMatcher) {
         public <S extends StateHolder<?, S>> boolean match(StateDefinition<?, S> stateDefinition, S stateHolder) {
             Property<?> property = stateDefinition.getProperty(this.name);
             return property != null && this.valueMatcher.match(stateHolder, property);
@@ -132,47 +119,29 @@ public record StatePropertiesPredicate(List<StatePropertiesPredicate.PropertyMat
             Property<?> property = stateDefinition.getProperty(this.name);
             return property != null ? Optional.empty() : Optional.of(this.name);
         }
-
-        public String name() {
-            return this.name;
-        }
-
-        public StatePropertiesPredicate.ValueMatcher valueMatcher() {
-            return this.valueMatcher;
-        }
     }
 
-    static record RangedMatcher(Optional<String> c, Optional<String> d) implements StatePropertiesPredicate.ValueMatcher {
-        private final Optional<String> minValue;
-        private final Optional<String> maxValue;
+    static record RangedMatcher(Optional<String> minValue, Optional<String> maxValue) implements StatePropertiesPredicate.ValueMatcher {
         public static final Codec<StatePropertiesPredicate.RangedMatcher> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(Codec.STRING, "min").forGetter(StatePropertiesPredicate.RangedMatcher::minValue), ExtraCodecs.strictOptionalField(Codec.STRING, "max").forGetter(StatePropertiesPredicate.RangedMatcher::maxValue)).apply(instance, StatePropertiesPredicate.RangedMatcher::new));
 
         public <T extends Comparable<T>> boolean match(StateHolder<?, ?> stateHolder, Property<T> property) {
             T comparable = stateHolder.getValue(property);
             if (this.minValue.isPresent()) {
                 Optional<T> optional = property.getValue((String)this.minValue.get());
-                if (optional.isEmpty() || comparable.compareTo((Comparable)optional.get()) < 0) {
+                if (optional.isEmpty() || comparable.compareTo(optional.get()) < 0) {
                     return false;
                 }
             }
 
             if (this.maxValue.isPresent()) {
                 Optional<T> optional2 = property.getValue((String)this.maxValue.get());
-                if (optional2.isEmpty() || comparable.compareTo((Comparable)optional2.get()) > 0) {
+                if (optional2.isEmpty() || comparable.compareTo(optional2.get()) > 0) {
                     return false;
                 }
             }
 
             return true;
         }
-
-        public Optional<String> minValue() {
-            return this.minValue;
-        }
-
-        public Optional<String> maxValue() {
-            return this.maxValue;
-        }
     }
 
     interface ValueMatcher {
@@ -190,4 +159,4 @@ public record StatePropertiesPredicate(List<StatePropertiesPredicate.PropertyMat
 
         <T extends Comparable<T>> boolean match(StateHolder<?, ?> var1, Property<T> var2);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/TagPredicate.java b/src/main/java/net/minecraft/advancements/critereon/TagPredicate.java
index 830dfd5f1ef071ddce01cae9b7e87893a0a2052c..05770a75e4cbbfdf66afa3a0318e745b851e1fb2 100644
--- a/src/main/java/net/minecraft/advancements/critereon/TagPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/TagPredicate.java
@@ -7,10 +7,7 @@ import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.tags.TagKey;
 
-public record TagPredicate<T>(TagKey<T> a, boolean b) {
-    private final TagKey<T> tag;
-    private final boolean expected;
-
+public record TagPredicate<T>(TagKey<T> tag, boolean expected) {
     public static <T> Codec<TagPredicate<T>> codec(ResourceKey<? extends Registry<T>> resourceKey) {
         return RecordCodecBuilder.create((instance) -> instance.group(TagKey.codec(resourceKey).fieldOf("id").forGetter(TagPredicate::tag), Codec.BOOL.fieldOf("expected").forGetter(TagPredicate::expected)).apply(instance, TagPredicate::new));
     }
@@ -26,12 +23,4 @@ public record TagPredicate<T>(TagKey<T> a, boolean b) {
     public boolean matches(Holder<T> holder) {
         return holder.is(this.tag) == this.expected;
     }
-
-    public TagKey<T> tag() {
-        return this.tag;
-    }
-
-    public boolean expected() {
-        return this.expected;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/advancements/critereon/WrappedMinMaxBounds.java b/src/main/java/net/minecraft/advancements/critereon/WrappedMinMaxBounds.java
index 8eb61a7eb1f3ccb295469a21d10f917b33ac2571..0f71758c32a135190a2b77396aba5677269217ad 100644
--- a/src/main/java/net/minecraft/advancements/critereon/WrappedMinMaxBounds.java
+++ b/src/main/java/net/minecraft/advancements/critereon/WrappedMinMaxBounds.java
@@ -12,11 +12,7 @@ import javax.annotation.Nullable;
 import net.minecraft.network.chat.Component;
 import net.minecraft.util.GsonHelper;
 
-public record WrappedMinMaxBounds(@Nullable Float c, @Nullable Float d) {
-    @Nullable
-    private final Float min;
-    @Nullable
-    private final Float max;
+public record WrappedMinMaxBounds(@Nullable Float min, @Nullable Float max) {
     public static final WrappedMinMaxBounds ANY = new WrappedMinMaxBounds((Float)null, (Float)null);
     public static final SimpleCommandExceptionType ERROR_INTS_ONLY = new SimpleCommandExceptionType(Component.translatable("argument.range.ints"));
 
@@ -179,4 +175,4 @@ public record WrappedMinMaxBounds(@Nullable Float c, @Nullable Float d) {
     public Float max() {
         return this.max;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/GuiMessage.java b/src/main/java/net/minecraft/client/GuiMessage.java
index 986b2b1dabd99dc0d84c7593e37a1441e379d0cd..e0c79ce735e9cbeb87296493a23c65dac6727387 100644
--- a/src/main/java/net/minecraft/client/GuiMessage.java
+++ b/src/main/java/net/minecraft/client/GuiMessage.java
@@ -5,54 +5,7 @@ import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MessageSignature;
 import net.minecraft.util.FormattedCharSequence;
 
-public record GuiMessage(int a, Component b, @Nullable MessageSignature c, @Nullable GuiMessageTag d) {
-    private final int addedTime;
-    private final Component content;
-    @Nullable
-    private final MessageSignature signature;
-    @Nullable
-    private final GuiMessageTag tag;
-
-    public int addedTime() {
-        return this.addedTime;
-    }
-
-    public Component content() {
-        return this.content;
-    }
-
-    @Nullable
-    public MessageSignature signature() {
-        return this.signature;
-    }
-
-    @Nullable
-    public GuiMessageTag tag() {
-        return this.tag;
-    }
-
-    public static record Line(int a, FormattedCharSequence b, @Nullable GuiMessageTag c, boolean d) {
-        private final int addedTime;
-        private final FormattedCharSequence content;
-        @Nullable
-        private final GuiMessageTag tag;
-        private final boolean endOfEntry;
-
-        public int addedTime() {
-            return this.addedTime;
-        }
-
-        public FormattedCharSequence content() {
-            return this.content;
-        }
-
-        @Nullable
-        public GuiMessageTag tag() {
-            return this.tag;
-        }
-
-        public boolean endOfEntry() {
-            return this.endOfEntry;
-        }
+public record GuiMessage(int addedTime, Component content, @Nullable MessageSignature signature, @Nullable GuiMessageTag tag) {
+    public static record Line(int addedTime, FormattedCharSequence content, @Nullable GuiMessageTag tag, boolean endOfEntry) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/GuiMessageTag.java b/src/main/java/net/minecraft/client/GuiMessageTag.java
index 689062e32af5efe764d677f0118bb2df9e097840..d917bd5f26ea2bbb08a4dd15505a0c97189caaa5 100644
--- a/src/main/java/net/minecraft/client/GuiMessageTag.java
+++ b/src/main/java/net/minecraft/client/GuiMessageTag.java
@@ -7,14 +7,7 @@ import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.resources.ResourceLocation;
 
-public record GuiMessageTag(int a, @Nullable GuiMessageTag.Icon b, @Nullable Component c, @Nullable String d) {
-    private final int indicatorColor;
-    @Nullable
-    private final GuiMessageTag.Icon icon;
-    @Nullable
-    private final Component text;
-    @Nullable
-    private final String logTag;
+public record GuiMessageTag(int indicatorColor, @Nullable GuiMessageTag.Icon icon, @Nullable Component text, @Nullable String logTag) {
     private static final Component SYSTEM_TEXT = Component.translatable("chat.tag.system");
     private static final Component SYSTEM_TEXT_SINGLE_PLAYER = Component.translatable("chat.tag.system_single_player");
     private static final Component CHAT_NOT_SECURE_TEXT = Component.translatable("chat.tag.not_secure");
@@ -85,4 +78,4 @@ public record GuiMessageTag(int a, @Nullable GuiMessageTag.Icon b, @Nullable Com
             guiGraphics.blitSprite(this.sprite, i, i2, this.width, this.height);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index 7255217412b22119f5b3b6ba8c65683d8a536935..30945e8b692c6adce7897c38a1793f6ee1381c9e 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -532,7 +532,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
                 this.options.fullscreen().set(this.window.isFullscreen());
             }
         } else {
-            StringBuilder stringBuilder = new StringBuilder("Recovering from unsupported resolution (" + this.window.getWidth() + "x" + this.window.getHeight() + ").\nPlease make sure you have up-to-date drivers (see aka.ms/mcdriver for instructions).");
+            StringBuilder stringBuilder = new StringBuilder("Recovering from unsupported resolution (" + this.window.getWidth() + "x" + this.window.getHeight() + ").\n" + UPDATE_DRIVERS_ADVICE);
             if (GlDebug.isDebugEnabled()) {
                 stringBuilder.append("\n\nReported GL debug messages:\n").append(String.join("\n", GlDebug.getLastOpenGlDebugMessages()));
             }
@@ -784,9 +784,9 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
     }
 
     private void createSearchTrees() {
-        this.searchRegistry.register(SearchRegistry.CREATIVE_NAMES, (list) -> new FullTextSearchTree((itemStack) -> itemStack.getTooltipLines((Player)null, TooltipFlag.Default.NORMAL.asCreative()).stream().map((component) -> ChatFormatting.stripFormatting(component.getString()).trim()).filter((s) -> !s.isEmpty()), (itemStack) -> Stream.of(BuiltInRegistries.ITEM.getKey(itemStack.getItem())), list));
-        this.searchRegistry.register(SearchRegistry.CREATIVE_TAGS, (list) -> new IdSearchTree((itemStack) -> itemStack.getTags().map(TagKey::location), list));
-        this.searchRegistry.register(SearchRegistry.RECIPE_COLLECTIONS, (list) -> new FullTextSearchTree((recipeCollection) -> recipeCollection.getRecipes().stream().flatMap((recipeHolder) -> recipeHolder.value().getResultItem(recipeCollection.registryAccess()).getTooltipLines((Player)null, TooltipFlag.Default.NORMAL).stream()).map((component) -> ChatFormatting.stripFormatting(component.getString()).trim()).filter((s) -> !s.isEmpty()), (recipeCollection) -> recipeCollection.getRecipes().stream().map((recipeHolder) -> BuiltInRegistries.ITEM.getKey(recipeHolder.value().getResultItem(recipeCollection.registryAccess()).getItem())), list));
+        this.searchRegistry.register(SearchRegistry.CREATIVE_NAMES, (list) -> new FullTextSearchTree<>((itemStack) -> itemStack.getTooltipLines((Player)null, TooltipFlag.Default.NORMAL.asCreative()).stream().map((component) -> ChatFormatting.stripFormatting(component.getString()).trim()).filter((s) -> !s.isEmpty()), (itemStack) -> Stream.of(BuiltInRegistries.ITEM.getKey(itemStack.getItem())), list));
+        this.searchRegistry.register(SearchRegistry.CREATIVE_TAGS, (list) -> new IdSearchTree<>((itemStack) -> itemStack.getTags().map(TagKey::location), list));
+        this.searchRegistry.register(SearchRegistry.RECIPE_COLLECTIONS, (list) -> new FullTextSearchTree<>((recipeCollection) -> recipeCollection.getRecipes().stream().flatMap((recipeHolder) -> recipeHolder.value().getResultItem(recipeCollection.registryAccess()).getTooltipLines((Player)null, TooltipFlag.Default.NORMAL).stream()).map((component) -> ChatFormatting.stripFormatting(component.getString()).trim()).filter((s) -> !s.isEmpty()), (recipeCollection) -> recipeCollection.getRecipes().stream().map((recipeHolder) -> BuiltInRegistries.ITEM.getKey(recipeHolder.value().getResultItem(recipeCollection.registryAccess()).getItem())), list));
         CreativeModeTabs.searchTab().setSearchTreeBuilder((list) -> {
             this.populateSearchTree(SearchRegistry.CREATIVE_NAMES, list);
             this.populateSearchTree(SearchRegistry.CREATIVE_TAGS, list);
@@ -1097,7 +1097,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
             this.profiler.pop();
             this.profiler.push("tick");
 
-            for(int i2 = 0; i2 < Math.min(10, i); ++i2) {
+            for(int i2 = 0; i2 < Math.min(MAX_TICKS_PER_UPDATE, i); ++i2) {
                 this.profiler.incrementCounter("clientTick");
                 this.tick();
             }
@@ -2315,13 +2315,13 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
             systemReport.setDetail("Resource Packs", (Supplier<String>)(() -> {
                 StringBuilder stringBuilder = new StringBuilder();
 
-                for(String s : options.resourcePacks) {
+                for(String resourcePack : options.resourcePacks) {
                     if (stringBuilder.length() > 0) {
                         stringBuilder.append(", ");
                     }
 
-                    stringBuilder.append(s);
-                    if (options.incompatibleResourcePacks.contains(s)) {
+                    stringBuilder.append(resourcePack);
+                    if (options.incompatibleResourcePacks.contains(resourcePack)) {
                         stringBuilder.append(" (incompatible)");
                     }
                 }
@@ -2344,7 +2344,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
     }
 
     public CompletableFuture<Void> delayTextureReload() {
-        return this.submit(this::reloadResourcePacks).thenCompose((completableFuture) -> completableFuture);
+        return this.submit((Supplier<CompletableFuture<Void>>) this::reloadResourcePacks).thenCompose((completableFuture) -> completableFuture);
     }
 
     public void updateReportEnvironment(ReportEnvironment reportEnvironment) {
@@ -2829,16 +2829,6 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
         public abstract boolean isChatAllowed(boolean var1);
     }
 
-    static record GameLoadCookie(RealmsClient a, GameConfig.QuickPlayData b) {
-        private final RealmsClient realmsClient;
-        private final GameConfig.QuickPlayData quickPlayData;
-
-        public RealmsClient realmsClient() {
-            return this.realmsClient;
-        }
-
-        public GameConfig.QuickPlayData quickPlayData() {
-            return this.quickPlayData;
-        }
+    static record GameLoadCookie(RealmsClient realmsClient, GameConfig.QuickPlayData quickPlayData) {
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/OptionInstance.java b/src/main/java/net/minecraft/client/OptionInstance.java
index 96472387b62b6b539f2e8b9de30eaa63bb96e4b8..fae8995a1c252e4d3d161e531e3619d38827aa1a 100644
--- a/src/main/java/net/minecraft/client/OptionInstance.java
+++ b/src/main/java/net/minecraft/client/OptionInstance.java
@@ -62,7 +62,7 @@ public final class OptionInstance<T> {
     }
 
     public static OptionInstance<Boolean> createBoolean(String s, OptionInstance.TooltipSupplier<Boolean> tooltipSupplier, OptionInstance.CaptionBasedToString<Boolean> captionBasedToString, boolean flag, Consumer<Boolean> consumer) {
-        return new OptionInstance(s, tooltipSupplier, captionBasedToString, BOOLEAN_VALUES, (T)flag, consumer);
+        return new OptionInstance<>(s, tooltipSupplier, captionBasedToString, BOOLEAN_VALUES, flag, consumer);
     }
 
     public OptionInstance(String s, OptionInstance.TooltipSupplier<T> tooltipSupplier, OptionInstance.CaptionBasedToString<T> captionBasedToString, OptionInstance.ValueSet<T> valueSet, T object, Consumer<T> consumer) {
@@ -133,13 +133,7 @@ public final class OptionInstance<T> {
         return this.values;
     }
 
-    public static record AltEnum<T>(List<T> a, List<T> b, BooleanSupplier c, OptionInstance.CycleableValueSet.ValueSetter<T> d, Codec<T> e) implements OptionInstance.CycleableValueSet<T> {
-        private final List<T> values;
-        private final List<T> altValues;
-        private final BooleanSupplier altCondition;
-        private final OptionInstance.CycleableValueSet.ValueSetter<T> valueSetter;
-        private final Codec<T> codec;
-
+    public static record AltEnum<T>(List<T> values, List<T> altValues, BooleanSupplier altCondition, OptionInstance.CycleableValueSet.ValueSetter<T> valueSetter, Codec<T> codec) implements OptionInstance.CycleableValueSet<T> {
         public CycleButton.ValueListSupplier<T> valueListSupplier() {
             return CycleButton.ValueListSupplier.create(this.altCondition, this.values, this.altValues);
         }
@@ -147,37 +141,13 @@ public final class OptionInstance<T> {
         public Optional<T> validateValue(T object) {
             return (this.altCondition.getAsBoolean() ? this.altValues : this.values).contains(object) ? Optional.of(object) : Optional.empty();
         }
-
-        public List<T> values() {
-            return this.values;
-        }
-
-        public List<T> altValues() {
-            return this.altValues;
-        }
-
-        public BooleanSupplier altCondition() {
-            return this.altCondition;
-        }
-
-        public OptionInstance.CycleableValueSet.ValueSetter<T> valueSetter() {
-            return this.valueSetter;
-        }
-
-        public Codec<T> codec() {
-            return this.codec;
-        }
     }
 
     public interface CaptionBasedToString<T> {
         Component toString(Component var1, T var2);
     }
 
-    public static record ClampingLazyMaxIntRange(int a, IntSupplier b, int c) implements OptionInstance.IntRangeBase, OptionInstance.SliderableOrCyclableValueSet<Integer> {
-        private final int minInclusive;
-        private final IntSupplier maxSupplier;
-        private final int encodableMaxInclusive;
-
+    public static record ClampingLazyMaxIntRange(int minInclusive, IntSupplier maxSupplier, int encodableMaxInclusive) implements OptionInstance.IntRangeBase, OptionInstance.SliderableOrCyclableValueSet<Integer> {
         public Optional<Integer> validateValue(Integer integer) {
             return Optional.of(Mth.clamp(integer, this.minInclusive(), this.maxInclusive()));
         }
@@ -200,18 +170,6 @@ public final class OptionInstance<T> {
         public CycleButton.ValueListSupplier<Integer> valueListSupplier() {
             return CycleButton.ValueListSupplier.create(IntStream.range(this.minInclusive, this.maxInclusive() + 1).boxed().toList());
         }
-
-        public int minInclusive() {
-            return this.minInclusive;
-        }
-
-        public IntSupplier maxSupplier() {
-            return this.maxSupplier;
-        }
-
-        public int encodableMaxInclusive() {
-            return this.encodableMaxInclusive;
-        }
     }
 
     interface CycleableValueSet<T> extends OptionInstance.ValueSet<T> {
@@ -234,10 +192,7 @@ public final class OptionInstance<T> {
         }
     }
 
-    public static record Enum<T>(List<T> a, Codec<T> b) implements OptionInstance.CycleableValueSet<T> {
-        private final List<T> values;
-        private final Codec<T> codec;
-
+    public static record Enum<T>(List<T> values, Codec<T> codec) implements OptionInstance.CycleableValueSet<T> {
         public Optional<T> validateValue(T object) {
             return this.values.contains(object) ? Optional.of(object) : Optional.empty();
         }
@@ -245,20 +200,9 @@ public final class OptionInstance<T> {
         public CycleButton.ValueListSupplier<T> valueListSupplier() {
             return CycleButton.ValueListSupplier.create(this.values);
         }
-
-        public List<T> values() {
-            return this.values;
-        }
-
-        public Codec<T> codec() {
-            return this.codec;
-        }
     }
 
-    public static record IntRange(int a, int b) implements OptionInstance.IntRangeBase {
-        private final int minInclusive;
-        private final int maxInclusive;
-
+    public static record IntRange(int minInclusive, int maxInclusive) implements OptionInstance.IntRangeBase {
         public Optional<Integer> validateValue(Integer integer) {
             return integer.compareTo(this.minInclusive()) >= 0 && integer.compareTo(this.maxInclusive()) <= 0 ? Optional.of(integer) : Optional.empty();
         }
@@ -292,7 +236,7 @@ public final class OptionInstance<T> {
         default <R> OptionInstance.SliderableValueSet<R> xmap(final IntFunction<? extends R> intFunction, final ToIntFunction<? super R> toIntFunction) {
             return new OptionInstance.SliderableValueSet<R>() {
                 public Optional<R> validateValue(R object) {
-                    return IntRangeBase.this.validateValue((T)Integer.valueOf(toIntFunction.applyAsInt(object))).map(intFunction::apply);
+                    return IntRangeBase.this.validateValue(toIntFunction.applyAsInt(object)).map(intFunction::apply);
                 }
 
                 public double toSliderValue(R object) {
@@ -310,11 +254,7 @@ public final class OptionInstance<T> {
         }
     }
 
-    public static record LazyEnum<T>(Supplier<List<T>> a, Function<T, Optional<T>> b, Codec<T> c) implements OptionInstance.CycleableValueSet<T> {
-        private final Supplier<List<T>> values;
-        private final Function<T, Optional<T>> validateValue;
-        private final Codec<T> codec;
-
+    public static record LazyEnum<T>(Supplier<List<T>> values, Function<T, Optional<T>> validateValue, Codec<T> codec) implements OptionInstance.CycleableValueSet<T> {
         public Optional<T> validateValue(T object) {
             return this.validateValue.apply(object);
         }
@@ -322,18 +262,6 @@ public final class OptionInstance<T> {
         public CycleButton.ValueListSupplier<T> valueListSupplier() {
             return CycleButton.ValueListSupplier.create(this.values.get());
         }
-
-        public Supplier<List<T>> values() {
-            return this.values;
-        }
-
-        public Function<T, Optional<T>> validateValue() {
-            return this.validateValue;
-        }
-
-        public Codec<T> codec() {
-            return this.codec;
-        }
     }
 
     static final class OptionInstanceSliderButton<N> extends AbstractOptionSliderButton {
diff --git a/src/main/java/net/minecraft/client/Options.java b/src/main/java/net/minecraft/client/Options.java
index 22fcd7259ae732a7b16c74741f7c4b1323e95092..a100789cff4f17f724e013eec040a14723f9bb75 100644
--- a/src/main/java/net/minecraft/client/Options.java
+++ b/src/main/java/net/minecraft/client/Options.java
@@ -91,7 +91,7 @@ public class Options {
     private final OptionInstance<Boolean> darkMojangStudiosBackground = OptionInstance.createBoolean("options.darkMojangStudiosBackgroundColor", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_DARK_MOJANG_BACKGROUND), false);
     private static final Component ACCESSIBILITY_TOOLTIP_HIDE_LIGHTNING_FLASHES = Component.translatable("options.hideLightningFlashes.tooltip");
     private final OptionInstance<Boolean> hideLightningFlash = OptionInstance.createBoolean("options.hideLightningFlashes", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_HIDE_LIGHTNING_FLASHES), false);
-    private final OptionInstance<Double> sensitivity = new OptionInstance("options.sensitivity", OptionInstance.noTooltip(), (component, d) -> {
+    private final OptionInstance<Double> sensitivity = new OptionInstance<>("options.sensitivity", OptionInstance.noTooltip(), (component, d) -> {
         if (d == 0.0D) {
             return genericValueLabel(component, Component.translatable("options.sensitivity.min"));
         } else {
@@ -102,10 +102,10 @@ public class Options {
     private final OptionInstance<Integer> renderDistance;
     private final OptionInstance<Integer> simulationDistance;
     private int serverRenderDistance = 0;
-    private final OptionInstance<Double> entityDistanceScaling = new OptionInstance("options.entityDistanceScaling", OptionInstance.noTooltip(), Options::percentValueLabel, (new OptionInstance.IntRange(2, 20)).xmap((i) -> (double)i / 4.0D, (d) -> (int)(d * 4.0D)), Codec.doubleRange(0.5D, 5.0D), 1.0D, (d) -> {
+    private final OptionInstance<Double> entityDistanceScaling = new OptionInstance<>("options.entityDistanceScaling", OptionInstance.noTooltip(), Options::percentValueLabel, (new OptionInstance.IntRange(2, 20)).xmap((i) -> (double)i / 4.0D, (d) -> (int)(d * 4.0D)), Codec.doubleRange(0.5D, 5.0D), 1.0D, (d) -> {
     });
     public static final int UNLIMITED_FRAMERATE_CUTOFF = 260;
-    private final OptionInstance<Integer> framerateLimit = new OptionInstance("options.framerateLimit", OptionInstance.noTooltip(), (component, integer) -> integer == 260 ? genericValueLabel(component, Component.translatable("options.framerateLimit.max")) : genericValueLabel(component, Component.translatable("options.framerate", integer)), (new OptionInstance.IntRange(1, 26)).xmap((i) -> i * 10, (integer) -> integer / 10), Codec.intRange(10, 260), 120, (integer) -> Minecraft.getInstance().getWindow().setFramerateLimit(integer));
+    private final OptionInstance<Integer> framerateLimit = new OptionInstance<>("options.framerateLimit", OptionInstance.noTooltip(), (component, integer) -> integer == 260 ? genericValueLabel(component, Component.translatable("options.framerateLimit.max")) : genericValueLabel(component, Component.translatable("options.framerate", integer)), (new OptionInstance.IntRange(1, 26)).xmap((i) -> i * 10, (integer) -> integer / 10), Codec.intRange(10, 260), 120, (integer) -> Minecraft.getInstance().getWindow().setFramerateLimit(integer));
     private final OptionInstance<CloudStatus> cloudStatus = new OptionInstance<>("options.renderClouds", OptionInstance.noTooltip(), OptionInstance.forOptionEnum(), new OptionInstance.Enum<>(Arrays.asList(CloudStatus.values()), ExtraCodecs.withAlternative(CloudStatus.CODEC, Codec.BOOL, (flagx) -> flagx ? CloudStatus.FANCY : CloudStatus.OFF)), CloudStatus.FANCY, (cloudStatus) -> {
         if (Minecraft.useShaderTransparency()) {
             RenderTarget renderTarget = Minecraft.getInstance().levelRenderer.getCloudsTarget();
@@ -176,11 +176,11 @@ public class Options {
     public List<String> incompatibleResourcePacks = Lists.newArrayList();
     private final OptionInstance<ChatVisiblity> chatVisibility = new OptionInstance<>("options.chat.visibility", OptionInstance.noTooltip(), OptionInstance.forOptionEnum(), new OptionInstance.Enum<>(Arrays.asList(ChatVisiblity.values()), Codec.INT.xmap(ChatVisiblity::byId, ChatVisiblity::getId)), ChatVisiblity.FULL, (chatVisiblity) -> {
     });
-    private final OptionInstance<Double> chatOpacity = new OptionInstance("options.chat.opacity", OptionInstance.noTooltip(), (component, d) -> percentValueLabel(component, d * 0.9D + 0.1D), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
-    private final OptionInstance<Double> chatLineSpacing = new OptionInstance("options.chat.line_spacing", OptionInstance.noTooltip(), Options::percentValueLabel, OptionInstance.UnitDouble.INSTANCE, 0.0D, (d) -> {
+    private final OptionInstance<Double> chatOpacity = new OptionInstance<>("options.chat.opacity", OptionInstance.noTooltip(), (component, d) -> percentValueLabel(component, d * 0.9D + 0.1D), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
+    private final OptionInstance<Double> chatLineSpacing = new OptionInstance<>("options.chat.line_spacing", OptionInstance.noTooltip(), Options::percentValueLabel, OptionInstance.UnitDouble.INSTANCE, 0.0D, (d) -> {
     });
-    private final OptionInstance<Double> textBackgroundOpacity = new OptionInstance("options.accessibility.text_background_opacity", OptionInstance.noTooltip(), Options::percentValueLabel, OptionInstance.UnitDouble.INSTANCE, 0.5D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
-    private final OptionInstance<Double> panoramaSpeed = new OptionInstance("options.accessibility.panorama_speed", OptionInstance.noTooltip(), Options::percentValueLabel, OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> {
+    private final OptionInstance<Double> textBackgroundOpacity = new OptionInstance<>("options.accessibility.text_background_opacity", OptionInstance.noTooltip(), Options::percentValueLabel, OptionInstance.UnitDouble.INSTANCE, 0.5D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
+    private final OptionInstance<Double> panoramaSpeed = new OptionInstance<>("options.accessibility.panorama_speed", OptionInstance.noTooltip(), Options::percentValueLabel, OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> {
     });
     private static final Component ACCESSIBILITY_TOOLTIP_CONTRAST_MODE = Component.translatable("options.accessibility.high_contrast.tooltip");
     private final OptionInstance<Boolean> highContrast = OptionInstance.createBoolean("options.accessibility.high_contrast", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_CONTRAST_MODE), false, (flagx) -> {
@@ -193,7 +193,6 @@ public class Options {
         } else if (flag2 && !flagx && packRepository.removePack("high_contrast")) {
             this.updateResourcePacks(packRepository);
         }
-
     });
     private final OptionInstance<Boolean> narratorHotkey = OptionInstance.createBoolean("options.accessibility.narrator_hotkey", OptionInstance.cachedConstantTooltip(Component.translatable("options.accessibility.narrator_hotkey.tooltip")), true);
     @Nullable
@@ -205,15 +204,15 @@ public class Options {
     private final OptionInstance<HumanoidArm> mainHand = new OptionInstance<>("options.mainHand", OptionInstance.noTooltip(), OptionInstance.forOptionEnum(), new OptionInstance.Enum<>(Arrays.asList(HumanoidArm.values()), HumanoidArm.CODEC), HumanoidArm.RIGHT, (humanoidArm) -> this.broadcastOptions());
     public int overrideWidth;
     public int overrideHeight;
-    private final OptionInstance<Double> chatScale = new OptionInstance("options.chat.scale", OptionInstance.noTooltip(), (component, d) -> (Component)(d == 0.0D ? CommonComponents.optionStatus(component, false) : percentValueLabel(component, d)), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
-    private final OptionInstance<Double> chatWidth = new OptionInstance("options.chat.width", OptionInstance.noTooltip(), (component, d) -> pixelValueLabel(component, ChatComponent.getWidth(d)), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
-    private final OptionInstance<Double> chatHeightUnfocused = new OptionInstance("options.chat.height.unfocused", OptionInstance.noTooltip(), (component, d) -> pixelValueLabel(component, ChatComponent.getHeight(d)), OptionInstance.UnitDouble.INSTANCE, ChatComponent.defaultUnfocusedPct(), (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
-    private final OptionInstance<Double> chatHeightFocused = new OptionInstance("options.chat.height.focused", OptionInstance.noTooltip(), (component, d) -> pixelValueLabel(component, ChatComponent.getHeight(d)), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
-    private final OptionInstance<Double> chatDelay = new OptionInstance("options.chat.delay_instant", OptionInstance.noTooltip(), (component, d) -> d <= 0.0D ? Component.translatable("options.chat.delay_none") : Component.translatable("options.chat.delay", String.format(Locale.ROOT, "%.1f", d)), (new OptionInstance.IntRange(0, 60)).xmap((i) -> (double)i / 10.0D, (d) -> (int)(d * 10.0D)), Codec.doubleRange(0.0D, 6.0D), 0.0D, (d) -> Minecraft.getInstance().getChatListener().setMessageDelay(d));
+    private final OptionInstance<Double> chatScale = new OptionInstance<>("options.chat.scale", OptionInstance.noTooltip(), (component, d) -> (Component)(d == 0.0D ? CommonComponents.optionStatus(component, false) : percentValueLabel(component, d)), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
+    private final OptionInstance<Double> chatWidth = new OptionInstance<>("options.chat.width", OptionInstance.noTooltip(), (component, d) -> pixelValueLabel(component, ChatComponent.getWidth(d)), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
+    private final OptionInstance<Double> chatHeightUnfocused = new OptionInstance<>("options.chat.height.unfocused", OptionInstance.noTooltip(), (component, d) -> pixelValueLabel(component, ChatComponent.getHeight(d)), OptionInstance.UnitDouble.INSTANCE, ChatComponent.defaultUnfocusedPct(), (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
+    private final OptionInstance<Double> chatHeightFocused = new OptionInstance<>("options.chat.height.focused", OptionInstance.noTooltip(), (component, d) -> pixelValueLabel(component, ChatComponent.getHeight(d)), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().gui.getChat().rescaleChat());
+    private final OptionInstance<Double> chatDelay = new OptionInstance<>("options.chat.delay_instant", OptionInstance.noTooltip(), (component, d) -> d <= 0.0D ? Component.translatable("options.chat.delay_none") : Component.translatable("options.chat.delay", String.format(Locale.ROOT, "%.1f", d)), (new OptionInstance.IntRange(0, 60)).xmap((i) -> (double)i / 10.0D, (d) -> (int)(d * 10.0D)), Codec.doubleRange(0.0D, 6.0D), 0.0D, (d) -> Minecraft.getInstance().getChatListener().setMessageDelay(d));
     private static final Component ACCESSIBILITY_TOOLTIP_NOTIFICATION_DISPLAY_TIME = Component.translatable("options.notifications.display_time.tooltip");
     private final OptionInstance<Double> notificationDisplayTime = new OptionInstance("options.notifications.display_time", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_NOTIFICATION_DISPLAY_TIME), (component, d) -> genericValueLabel(component, Component.translatable("options.multiplier", d)), (new OptionInstance.IntRange(5, 100)).xmap((i) -> (double)i / 10.0D, (d) -> (int)(d * 10.0D)), Codec.doubleRange(0.5D, 10.0D), 1.0D, (d) -> {
     });
-    private final OptionInstance<Integer> mipmapLevels = new OptionInstance("options.mipmapLevels", OptionInstance.noTooltip(), (component, integer) -> (Component)(integer == 0 ? CommonComponents.optionStatus(component, false) : genericValueLabel(component, integer)), new OptionInstance.IntRange(0, 4), 4, (integer) -> {
+    private final OptionInstance<Integer> mipmapLevels = new OptionInstance<>("options.mipmapLevels", OptionInstance.noTooltip(), (component, integer) -> (Component)(integer == 0 ? CommonComponents.optionStatus(component, false) : genericValueLabel(component, integer)), new OptionInstance.IntRange(0, 4), 4, (integer) -> {
     });
     public boolean useNativeTransport = true;
     private final OptionInstance<AttackIndicatorStatus> attackIndicator = new OptionInstance<>("options.attackIndicator", OptionInstance.noTooltip(), OptionInstance.forOptionEnum(), new OptionInstance.Enum<>(Arrays.asList(AttackIndicatorStatus.values()), Codec.INT.xmap(AttackIndicatorStatus::byId, AttackIndicatorStatus::getId)), AttackIndicatorStatus.CROSSHAIR, (attackIndicatorStatus) -> {
@@ -221,11 +220,11 @@ public class Options {
     public TutorialSteps tutorialStep = TutorialSteps.MOVEMENT;
     public boolean joinedFirstServer = false;
     public boolean hideBundleTutorial = false;
-    private final OptionInstance<Integer> biomeBlendRadius = new OptionInstance("options.biomeBlendRadius", OptionInstance.noTooltip(), (component, integer) -> {
+    private final OptionInstance<Integer> biomeBlendRadius = new OptionInstance<>("options.biomeBlendRadius", OptionInstance.noTooltip(), (component, integer) -> {
         int i = integer * 2 + 1;
         return genericValueLabel(component, Component.translatable("options.biomeBlendRadius." + i));
     }, new OptionInstance.IntRange(0, 7), 2, (integer) -> Minecraft.getInstance().levelRenderer.allChanged());
-    private final OptionInstance<Double> mouseWheelSensitivity = new OptionInstance("options.mouseWheelSensitivity", OptionInstance.noTooltip(), (component, d) -> genericValueLabel(component, Component.literal(String.format(Locale.ROOT, "%.2f", d))), (new OptionInstance.IntRange(-200, 100)).xmap(Options::logMouse, Options::unlogMouse), Codec.doubleRange(logMouse(-200), logMouse(100)), logMouse(0), (d) -> {
+    private final OptionInstance<Double> mouseWheelSensitivity = new OptionInstance<>("options.mouseWheelSensitivity", OptionInstance.noTooltip(), (component, d) -> genericValueLabel(component, Component.literal(String.format(Locale.ROOT, "%.2f", d))), (new OptionInstance.IntRange(-200, 100)).xmap(Options::logMouse, Options::unlogMouse), Codec.doubleRange(logMouse(-200), logMouse(100)), logMouse(0), (d) -> {
     });
     private final OptionInstance<Boolean> rawMouseInput = OptionInstance.createBoolean("options.rawMouseInput", true, (flagx) -> {
         Window window = Minecraft.getInstance().getWindow();
@@ -276,7 +275,7 @@ public class Options {
         soundManager.reload();
         soundManager.play(SimpleSoundInstance.forUI(SoundEvents.UI_BUTTON_CLICK, 1.0F));
     });
-    private final OptionInstance<Boolean> backgroundForChatOnly = new OptionInstance("options.accessibility.text_background", OptionInstance.noTooltip(), (component, flagx) -> flagx ? Component.translatable("options.accessibility.text_background.chat") : Component.translatable("options.accessibility.text_background.everywhere"), OptionInstance.BOOLEAN_VALUES, true, (flagx) -> {
+    private final OptionInstance<Boolean> backgroundForChatOnly = new OptionInstance<>("options.accessibility.text_background", OptionInstance.noTooltip(), (component, flagx) -> flagx ? Component.translatable("options.accessibility.text_background.chat") : Component.translatable("options.accessibility.text_background.everywhere"), OptionInstance.BOOLEAN_VALUES, true, (flagx) -> {
     });
     private final OptionInstance<Boolean> touchscreen = OptionInstance.createBoolean("options.touchscreen", false);
     private final OptionInstance<Boolean> fullscreen = OptionInstance.createBoolean("options.fullscreen", false, (flagx) -> {
@@ -290,9 +289,9 @@ public class Options {
     private final OptionInstance<Boolean> bobView = OptionInstance.createBoolean("options.viewBobbing", true);
     private static final Component MOVEMENT_TOGGLE = Component.translatable("options.key.toggle");
     private static final Component MOVEMENT_HOLD = Component.translatable("options.key.hold");
-    private final OptionInstance<Boolean> toggleCrouch = new OptionInstance("key.sneak", OptionInstance.noTooltip(), (component, flagx) -> flagx ? MOVEMENT_TOGGLE : MOVEMENT_HOLD, OptionInstance.BOOLEAN_VALUES, false, (flagx) -> {
+    private final OptionInstance<Boolean> toggleCrouch = new OptionInstance<>("key.sneak", OptionInstance.noTooltip(), (component, flagx) -> flagx ? MOVEMENT_TOGGLE : MOVEMENT_HOLD, OptionInstance.BOOLEAN_VALUES, false, (flagx) -> {
     });
-    private final OptionInstance<Boolean> toggleSprint = new OptionInstance("key.sprint", OptionInstance.noTooltip(), (component, flagx) -> flagx ? MOVEMENT_TOGGLE : MOVEMENT_HOLD, OptionInstance.BOOLEAN_VALUES, false, (flagx) -> {
+    private final OptionInstance<Boolean> toggleSprint = new OptionInstance<>("key.sprint", OptionInstance.noTooltip(), (component, flagx) -> flagx ? MOVEMENT_TOGGLE : MOVEMENT_HOLD, OptionInstance.BOOLEAN_VALUES, false, (flagx) -> {
     });
     public boolean skipMultiplayerWarning;
     public boolean skipRealms32bitWarning;
@@ -334,7 +333,7 @@ public class Options {
     private CameraType cameraType = CameraType.FIRST_PERSON;
     public String lastMpIp = "";
     public boolean smoothCamera;
-    private final OptionInstance<Integer> fov = new OptionInstance("options.fov", OptionInstance.noTooltip(), (component, integer) -> {
+    private final OptionInstance<Integer> fov = new OptionInstance<>("options.fov", OptionInstance.noTooltip(), (component, integer) -> {
         Component var10000;
         switch(integer) {
         case 70:
@@ -360,23 +359,23 @@ public class Options {
     }, false, (flagx) -> {
     });
     private static final Component ACCESSIBILITY_TOOLTIP_SCREEN_EFFECT = Component.translatable("options.screenEffectScale.tooltip");
-    private final OptionInstance<Double> screenEffectScale = new OptionInstance("options.screenEffectScale", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_SCREEN_EFFECT), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> {
+    private final OptionInstance<Double> screenEffectScale = new OptionInstance<>("options.screenEffectScale", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_SCREEN_EFFECT), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> {
     });
     private static final Component ACCESSIBILITY_TOOLTIP_FOV_EFFECT = Component.translatable("options.fovEffectScale.tooltip");
-    private final OptionInstance<Double> fovEffectScale = new OptionInstance("options.fovEffectScale", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_FOV_EFFECT), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE.xmap(Mth::square, Math::sqrt), Codec.doubleRange(0.0D, 1.0D), 1.0D, (d) -> {
+    private final OptionInstance<Double> fovEffectScale = new OptionInstance<>("options.fovEffectScale", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_FOV_EFFECT), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE.xmap(Mth::square, Math::sqrt), Codec.doubleRange(0.0D, 1.0D), 1.0D, (d) -> {
     });
     private static final Component ACCESSIBILITY_TOOLTIP_DARKNESS_EFFECT = Component.translatable("options.darknessEffectScale.tooltip");
-    private final OptionInstance<Double> darknessEffectScale = new OptionInstance("options.darknessEffectScale", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_DARKNESS_EFFECT), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE.xmap(Mth::square, Math::sqrt), 1.0D, (d) -> {
+    private final OptionInstance<Double> darknessEffectScale = new OptionInstance<>("options.darknessEffectScale", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_DARKNESS_EFFECT), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE.xmap(Mth::square, Math::sqrt), 1.0D, (d) -> {
     });
     private static final Component ACCESSIBILITY_TOOLTIP_GLINT_SPEED = Component.translatable("options.glintSpeed.tooltip");
-    private final OptionInstance<Double> glintSpeed = new OptionInstance("options.glintSpeed", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_GLINT_SPEED), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE, 0.5D, (d) -> {
+    private final OptionInstance<Double> glintSpeed = new OptionInstance<>("options.glintSpeed", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_GLINT_SPEED), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE, 0.5D, (d) -> {
     });
     private static final Component ACCESSIBILITY_TOOLTIP_GLINT_STRENGTH = Component.translatable("options.glintStrength.tooltip");
-    private final OptionInstance<Double> glintStrength = new OptionInstance("options.glintStrength", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_GLINT_STRENGTH), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE, 0.75D, RenderSystem::setShaderGlintAlpha);
+    private final OptionInstance<Double> glintStrength = new OptionInstance<>("options.glintStrength", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_GLINT_STRENGTH), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE, 0.75D, RenderSystem::setShaderGlintAlpha);
     private static final Component ACCESSIBILITY_TOOLTIP_DAMAGE_TILT_STRENGTH = Component.translatable("options.damageTiltStrength.tooltip");
-    private final OptionInstance<Double> damageTiltStrength = new OptionInstance("options.damageTiltStrength", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_DAMAGE_TILT_STRENGTH), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> {
+    private final OptionInstance<Double> damageTiltStrength = new OptionInstance<>("options.damageTiltStrength", OptionInstance.cachedConstantTooltip(ACCESSIBILITY_TOOLTIP_DAMAGE_TILT_STRENGTH), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> {
     });
-    private final OptionInstance<Double> gamma = new OptionInstance("options.gamma", OptionInstance.noTooltip(), (component, d) -> {
+    private final OptionInstance<Double> gamma = new OptionInstance<>("options.gamma", OptionInstance.noTooltip(), (component, d) -> {
         int i = (int)(d * 100.0D);
         if (i == 0) {
             return genericValueLabel(component, Component.translatable("options.gamma.min"));
@@ -389,22 +388,22 @@ public class Options {
     });
     public static final int AUTO_GUI_SCALE = 0;
     private static final int MAX_GUI_SCALE_INCLUSIVE = 2147483646;
-    private final OptionInstance<Integer> guiScale = new OptionInstance("options.guiScale", OptionInstance.noTooltip(), (component, integer) -> integer == 0 ? Component.translatable("options.guiScale.auto") : Component.literal(Integer.toString(integer)), new OptionInstance.ClampingLazyMaxIntRange(0, () -> {
+    private final OptionInstance<Integer> guiScale = new OptionInstance<>("options.guiScale", OptionInstance.noTooltip(), (component, integer) -> integer == 0 ? Component.translatable("options.guiScale.auto") : Component.literal(Integer.toString(integer)), new OptionInstance.ClampingLazyMaxIntRange(0, () -> {
         Minecraft minecraft = Minecraft.getInstance();
         return !minecraft.isRunning() ? 2147483646 : minecraft.getWindow().calculateScale(0, minecraft.isEnforceUnicode());
     }, 2147483646), 0, (integer) -> {
     });
     private final OptionInstance<ParticleStatus> particles = new OptionInstance<>("options.particles", OptionInstance.noTooltip(), OptionInstance.forOptionEnum(), new OptionInstance.Enum<>(Arrays.asList(ParticleStatus.values()), Codec.INT.xmap(ParticleStatus::byId, ParticleStatus::getId)), ParticleStatus.ALL, (particleStatus) -> {
     });
-    private final OptionInstance<NarratorStatus> narrator = new OptionInstance("options.narrator", OptionInstance.noTooltip(), (component, narratorStatus) -> (Component)(this.minecraft.getNarrator().isActive() ? narratorStatus.getName() : Component.translatable("options.narrator.notavailable")), new OptionInstance.Enum(Arrays.asList(NarratorStatus.values()), Codec.INT.xmap(NarratorStatus::byId, NarratorStatus::getId)), NarratorStatus.OFF, (narratorStatus) -> this.minecraft.getNarrator().updateNarratorStatus(narratorStatus));
+    private final OptionInstance<NarratorStatus> narrator = new OptionInstance<>("options.narrator", OptionInstance.noTooltip(), (component, narratorStatus) -> (Component)(this.minecraft.getNarrator().isActive() ? narratorStatus.getName() : Component.translatable("options.narrator.notavailable")), new OptionInstance.Enum(Arrays.asList(NarratorStatus.values()), Codec.INT.xmap(NarratorStatus::byId, NarratorStatus::getId)), NarratorStatus.OFF, (narratorStatus) -> this.minecraft.getNarrator().updateNarratorStatus(narratorStatus));
     public String languageCode = "en_us";
-    private final OptionInstance<String> soundDevice = new OptionInstance("options.audioDevice", OptionInstance.noTooltip(), (component, s) -> {
+    private final OptionInstance<String> soundDevice = new OptionInstance<>("options.audioDevice", OptionInstance.noTooltip(), (component, s) -> {
         if ("".equals(s)) {
             return Component.translatable("options.audioDevice.default");
         } else {
             return s.startsWith("OpenAL Soft on ") ? Component.literal(s.substring(SoundEngine.OPEN_AL_SOFT_PREFIX_LENGTH)) : Component.literal(s);
         }
-    }, new OptionInstance.LazyEnum(() -> Stream.concat(Stream.of(""), Minecraft.getInstance().getSoundManager().getAvailableSoundDevices().stream()).toList(), (s) -> Minecraft.getInstance().isRunning() && s != "" && !Minecraft.getInstance().getSoundManager().getAvailableSoundDevices().contains(s) ? Optional.empty() : Optional.of(s), Codec.STRING), "", (s) -> {
+    }, new OptionInstance.LazyEnum<>(() -> Stream.concat(Stream.of(""), Minecraft.getInstance().getSoundManager().getAvailableSoundDevices().stream()).toList(), (s) -> Minecraft.getInstance().isRunning() && s != "" && !Minecraft.getInstance().getSoundManager().getAvailableSoundDevices().contains(s) ? Optional.empty() : Optional.of(s), Codec.STRING), "", (s) -> {
         SoundManager soundManager = Minecraft.getInstance().getSoundManager();
         soundManager.reload();
         soundManager.play(SimpleSoundInstance.forUI(SoundEvents.UI_BUTTON_CLICK, 1.0F));
@@ -627,7 +626,7 @@ public class Options {
     }
 
     private OptionInstance<Double> createSoundSliderOptionInstance(String s, SoundSource soundSource) {
-        return new OptionInstance(s, OptionInstance.noTooltip(), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().getSoundManager().updateSourceVolume(soundSource, d.floatValue()));
+        return new OptionInstance<>(s, OptionInstance.noTooltip(), (component, d) -> d == 0.0D ? genericValueLabel(component, CommonComponents.OPTION_OFF) : percentValueLabel(component, d), OptionInstance.UnitDouble.INSTANCE, 1.0D, (d) -> Minecraft.getInstance().getSoundManager().updateSourceVolume(soundSource, d.floatValue()));
     }
 
     public OptionInstance<Boolean> showSubtitles() {
@@ -1170,7 +1169,7 @@ public class Options {
     }
 
     public String dumpOptionsForReport() {
-        Stream<Pair<String, Object>> stream = Stream.builder().add(Pair.of("ao", this.ambientOcclusion.get())).add(Pair.of("biomeBlendRadius", this.biomeBlendRadius.get())).add(Pair.of("enableVsync", this.enableVsync.get())).add(Pair.of("entityDistanceScaling", this.entityDistanceScaling.get())).add(Pair.of("entityShadows", this.entityShadows.get())).add(Pair.of("forceUnicodeFont", this.forceUnicodeFont.get())).add(Pair.of("fov", this.fov.get())).add(Pair.of("fovEffectScale", this.fovEffectScale.get())).add(Pair.of("darknessEffectScale", this.darknessEffectScale.get())).add(Pair.of("glintSpeed", this.glintSpeed.get())).add(Pair.of("glintStrength", this.glintStrength.get())).add(Pair.of("prioritizeChunkUpdates", this.prioritizeChunkUpdates.get())).add(Pair.of("fullscreen", this.fullscreen.get())).add(Pair.of("fullscreenResolution", String.valueOf(this.fullscreenVideoModeString))).add(Pair.of("gamma", this.gamma.get())).add(Pair.of("glDebugVerbosity", this.glDebugVerbosity)).add(Pair.of("graphicsMode", this.graphicsMode.get())).add(Pair.of("guiScale", this.guiScale.get())).add(Pair.of("maxFps", this.framerateLimit.get())).add(Pair.of("mipmapLevels", this.mipmapLevels.get())).add(Pair.of("narrator", this.narrator.get())).add(Pair.of("overrideHeight", this.overrideHeight)).add(Pair.of("overrideWidth", this.overrideWidth)).add(Pair.of("particles", this.particles.get())).add(Pair.of("reducedDebugInfo", this.reducedDebugInfo.get())).add(Pair.of("renderClouds", this.cloudStatus.get())).add(Pair.of("renderDistance", this.renderDistance.get())).add(Pair.of("simulationDistance", this.simulationDistance.get())).add(Pair.of("resourcePacks", this.resourcePacks)).add(Pair.of("screenEffectScale", this.screenEffectScale.get())).add(Pair.of("syncChunkWrites", this.syncWrites)).add(Pair.of("useNativeTransport", this.useNativeTransport)).add(Pair.of("soundDevice", this.soundDevice.get())).build();
+        Stream<Pair<String, Object>> stream = Stream.<Pair<String, Object>>builder().add(Pair.of("ao", this.ambientOcclusion.get())).add(Pair.of("biomeBlendRadius", this.biomeBlendRadius.get())).add(Pair.of("enableVsync", this.enableVsync.get())).add(Pair.of("entityDistanceScaling", this.entityDistanceScaling.get())).add(Pair.of("entityShadows", this.entityShadows.get())).add(Pair.of("forceUnicodeFont", this.forceUnicodeFont.get())).add(Pair.of("fov", this.fov.get())).add(Pair.of("fovEffectScale", this.fovEffectScale.get())).add(Pair.of("darknessEffectScale", this.darknessEffectScale.get())).add(Pair.of("glintSpeed", this.glintSpeed.get())).add(Pair.of("glintStrength", this.glintStrength.get())).add(Pair.of("prioritizeChunkUpdates", this.prioritizeChunkUpdates.get())).add(Pair.of("fullscreen", this.fullscreen.get())).add(Pair.of("fullscreenResolution", String.valueOf(this.fullscreenVideoModeString))).add(Pair.of("gamma", this.gamma.get())).add(Pair.of("glDebugVerbosity", this.glDebugVerbosity)).add(Pair.of("graphicsMode", this.graphicsMode.get())).add(Pair.of("guiScale", this.guiScale.get())).add(Pair.of("maxFps", this.framerateLimit.get())).add(Pair.of("mipmapLevels", this.mipmapLevels.get())).add(Pair.of("narrator", this.narrator.get())).add(Pair.of("overrideHeight", this.overrideHeight)).add(Pair.of("overrideWidth", this.overrideWidth)).add(Pair.of("particles", this.particles.get())).add(Pair.of("reducedDebugInfo", this.reducedDebugInfo.get())).add(Pair.of("renderClouds", this.cloudStatus.get())).add(Pair.of("renderDistance", this.renderDistance.get())).add(Pair.of("simulationDistance", this.simulationDistance.get())).add(Pair.of("resourcePacks", this.resourcePacks)).add(Pair.of("screenEffectScale", this.screenEffectScale.get())).add(Pair.of("syncChunkWrites", this.syncWrites)).add(Pair.of("useNativeTransport", this.useNativeTransport)).add(Pair.of("soundDevice", this.soundDevice.get())).build();
         return (String)stream.map((pair) -> (String)pair.getFirst() + ": " + pair.getSecond()).collect(Collectors.joining(System.lineSeparator()));
     }
 
@@ -1211,4 +1210,4 @@ public class Options {
 
         <T> T process(String var1, T var2, Function<String, T> var3, Function<T, String> var4);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/PeriodicNotificationManager.java b/src/main/java/net/minecraft/client/PeriodicNotificationManager.java
index 380a9c23a9a02a314a99d10fbc95ed0d29d60d4c..bfa3d46df5a4532c9ca9d93494b2f5990eca9b22 100644
--- a/src/main/java/net/minecraft/client/PeriodicNotificationManager.java
+++ b/src/main/java/net/minecraft/client/PeriodicNotificationManager.java
@@ -28,7 +28,7 @@ import net.minecraft.util.profiling.ProfilerFiller;
 import org.slf4j.Logger;
 
 public class PeriodicNotificationManager extends SimplePreparableReloadListener<Map<String, List<PeriodicNotificationManager.Notification>>> implements AutoCloseable {
-    private static final Codec<Map<String, List<PeriodicNotificationManager.Notification>>> CODEC = Codec.unboundedMap(Codec.STRING, RecordCodecBuilder.create((instance) -> instance.group(Codec.LONG.optionalFieldOf("delay", 0L).forGetter(PeriodicNotificationManager.Notification::delay), Codec.LONG.fieldOf("period").forGetter(PeriodicNotificationManager.Notification::period), Codec.STRING.fieldOf("title").forGetter(PeriodicNotificationManager.Notification::title), Codec.STRING.fieldOf("message").forGetter(PeriodicNotificationManager.Notification::message)).apply(instance, PeriodicNotificationManager.Notification::new)).listOf());
+    private static final Codec<Map<String, List<PeriodicNotificationManager.Notification>>> CODEC = Codec.unboundedMap(Codec.STRING, RecordCodecBuilder.<PeriodicNotificationManager.Notification>create((instance) -> instance.group(Codec.LONG.optionalFieldOf("delay", 0L).forGetter(PeriodicNotificationManager.Notification::delay), Codec.LONG.fieldOf("period").forGetter(PeriodicNotificationManager.Notification::period), Codec.STRING.fieldOf("title").forGetter(PeriodicNotificationManager.Notification::title), Codec.STRING.fieldOf("message").forGetter(PeriodicNotificationManager.Notification::message)).apply(instance, PeriodicNotificationManager.Notification::new)).listOf());
     private static final Logger LOGGER = LogUtils.getLogger();
     private final ResourceLocation notifications;
     private final Object2BooleanFunction<String> selector;
@@ -118,33 +118,12 @@ public class PeriodicNotificationManager extends SimplePreparableReloadListener<
         return list.stream().mapToLong((notification) -> notification.delay).min().orElse(0L);
     }
 
-    public static record Notification(long a, long b, String c, String d) {
-        final long delay;
-        final long period;
-        final String title;
-        final String message;
-
-        public Notification(long l, long l2, String s, String s2) {
-            this.delay = l != 0L ? l : l2;
-            this.period = l2;
-            this.title = s;
-            this.message = s2;
-        }
-
-        public long delay() {
-            return this.delay;
-        }
-
-        public long period() {
-            return this.period;
-        }
-
-        public String title() {
-            return this.title;
-        }
-
-        public String message() {
-            return this.message;
+    public static record Notification(long delay, long period, String title, String message) {
+        public Notification(long delay, long period, String title, String message) {
+            this.delay = delay != 0L ? delay : period;
+            this.period = period;
+            this.title = title;
+            this.message = message;
         }
     }
 
diff --git a/src/main/java/net/minecraft/client/animation/AnimationChannel.java b/src/main/java/net/minecraft/client/animation/AnimationChannel.java
index 94be0758d8a88a5aa7c9e84d7bf913ed7136fabd..e4688cef13ae84daf32cc1cd9d9b8b281574e084 100644
--- a/src/main/java/net/minecraft/client/animation/AnimationChannel.java
+++ b/src/main/java/net/minecraft/client/animation/AnimationChannel.java
@@ -4,18 +4,7 @@ import net.minecraft.client.model.geom.ModelPart;
 import net.minecraft.util.Mth;
 import org.joml.Vector3f;
 
-public record AnimationChannel(AnimationChannel.Target a, Keyframe... b) {
-    private final AnimationChannel.Target target;
-    private final Keyframe[] keyframes;
-
-    public AnimationChannel.Target target() {
-        return this.target;
-    }
-
-    public Keyframe[] keyframes() {
-        return this.keyframes;
-    }
-
+public record AnimationChannel(AnimationChannel.Target target, Keyframe... keyframes) {
     public interface Interpolation {
         Vector3f apply(Vector3f var1, float var2, Keyframe[] var3, int var4, int var5, float var6);
     }
diff --git a/src/main/java/net/minecraft/client/animation/AnimationDefinition.java b/src/main/java/net/minecraft/client/animation/AnimationDefinition.java
index 06bb8febbac9d7a885c8113f4502291052732a08..8b59f2810a4057a43f9ad5e0b167c893e261f6d4 100644
--- a/src/main/java/net/minecraft/client/animation/AnimationDefinition.java
+++ b/src/main/java/net/minecraft/client/animation/AnimationDefinition.java
@@ -5,23 +5,7 @@ import java.util.List;
 import java.util.Map;
 import org.apache.commons.compress.utils.Lists;
 
-public record AnimationDefinition(float a, boolean b, Map<String, List<AnimationChannel>> c) {
-    private final float lengthInSeconds;
-    private final boolean looping;
-    private final Map<String, List<AnimationChannel>> boneAnimations;
-
-    public float lengthInSeconds() {
-        return this.lengthInSeconds;
-    }
-
-    public boolean looping() {
-        return this.looping;
-    }
-
-    public Map<String, List<AnimationChannel>> boneAnimations() {
-        return this.boneAnimations;
-    }
-
+public record AnimationDefinition(float lengthInSeconds, boolean looping, Map<String, List<AnimationChannel>> boneAnimations) {
     public static class Builder {
         private final float length;
         private final Map<String, List<AnimationChannel>> animationByBone = Maps.newHashMap();
diff --git a/src/main/java/net/minecraft/client/animation/Keyframe.java b/src/main/java/net/minecraft/client/animation/Keyframe.java
index a49a0c719722526320d54d3a85ce04fefb8e709c..29f6a6075dd51f66e658b22365ddee3232aa6199 100644
--- a/src/main/java/net/minecraft/client/animation/Keyframe.java
+++ b/src/main/java/net/minecraft/client/animation/Keyframe.java
@@ -2,20 +2,5 @@ package net.minecraft.client.animation;
 
 import org.joml.Vector3f;
 
-public record Keyframe(float a, Vector3f b, AnimationChannel.Interpolation c) {
-    private final float timestamp;
-    private final Vector3f target;
-    private final AnimationChannel.Interpolation interpolation;
-
-    public float timestamp() {
-        return this.timestamp;
-    }
-
-    public Vector3f target() {
-        return this.target;
-    }
-
-    public AnimationChannel.Interpolation interpolation() {
-        return this.interpolation;
-    }
+public record Keyframe(float timestamp, Vector3f target, AnimationChannel.Interpolation interpolation) {
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/gui/ComponentPath.java b/src/main/java/net/minecraft/client/gui/ComponentPath.java
index cf27a8356d9b4c991def0c4299828305a6466852..3d8d3d41e1fb971e4c1068d68edf56616ff77522 100644
--- a/src/main/java/net/minecraft/client/gui/ComponentPath.java
+++ b/src/main/java/net/minecraft/client/gui/ComponentPath.java
@@ -28,22 +28,13 @@ public interface ComponentPath {
 
     void applyFocus(boolean var1);
 
-    public static record Leaf(GuiEventListener a) implements ComponentPath {
-        private final GuiEventListener component;
-
+    public static record Leaf(GuiEventListener component) implements ComponentPath {
         public void applyFocus(boolean flag) {
             this.component.setFocused(flag);
         }
-
-        public GuiEventListener component() {
-            return this.component;
-        }
     }
 
-    public static record Path(ContainerEventHandler a, ComponentPath b) implements ComponentPath {
-        private final ContainerEventHandler component;
-        private final ComponentPath childPath;
-
+    public static record Path(ContainerEventHandler component, ComponentPath childPath) implements ComponentPath {
         public void applyFocus(boolean flag) {
             if (!flag) {
                 this.component.setFocused((GuiEventListener)null);
@@ -53,13 +44,5 @@ public interface ComponentPath {
 
             this.childPath.applyFocus(flag);
         }
-
-        public ContainerEventHandler component() {
-            return this.component;
-        }
-
-        public ComponentPath childPath() {
-            return this.childPath;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/gui/Font.java b/src/main/java/net/minecraft/client/gui/Font.java
index 8dfefeabcd743d6a76f6194e1c9773d41a3bbfa0..f4738e1945623acb11670a5857ff80545d38bfbe 100644
--- a/src/main/java/net/minecraft/client/gui/Font.java
+++ b/src/main/java/net/minecraft/client/gui/Font.java
@@ -84,14 +84,14 @@ public class Font {
                     float[] floats = new float[]{f};
                     int i7 = i5;
                     int i8 = i6;
-                    formattedCharSequence.accept((i4x, style, i5) -> {
+                    formattedCharSequence.accept((i4x, style, i5x) -> {
                         boolean flag = style.isBold();
                         FontSet fontSet = this.getFontSet(style.getFont());
-                        GlyphInfo glyphInfo = fontSet.getGlyphInfo(i5, this.filterFishyGlyphs);
+                        GlyphInfo glyphInfo = fontSet.getGlyphInfo(i5x, this.filterFishyGlyphs);
                         stringRenderOutput.x = floats[0] + (float)i7 * glyphInfo.getShadowOffset();
                         stringRenderOutput.y = f2 + (float)i8 * glyphInfo.getShadowOffset();
                         floats[0] += glyphInfo.getAdvance(flag);
-                        return stringRenderOutput.accept(i4x, style.withColor(i4), i5);
+                        return stringRenderOutput.accept(i4x, style.withColor(i4), i5x);
                     });
                 }
             }
diff --git a/src/main/java/net/minecraft/client/gui/Gui.java b/src/main/java/net/minecraft/client/gui/Gui.java
index 95081ff6db50710e3695c228dad046d2072966b5..26fa38f8bbc3801ed97fb9d335ec704a94ba88cc 100644
--- a/src/main/java/net/minecraft/client/gui/Gui.java
+++ b/src/main/java/net/minecraft/client/gui/Gui.java
@@ -444,7 +444,7 @@ public class Gui {
 
             RenderSystem.enableBlend();
             int i = 0;
-            int i2 = 0;
+            int i2In = 0;
             MobEffectTextureManager mobEffectTextureManager = this.minecraft.getMobEffectTextures();
             List<Runnable> list = Lists.newArrayListWithExpectedSize(collection.size());
 
@@ -461,8 +461,8 @@ public class Gui {
                         ++i;
                         i3 -= 25 * i;
                     } else {
-                        ++i2;
-                        i3 -= 25 * i2;
+                        ++i2In;
+                        i3 -= 25 * i2In;
                         i4 += 26;
                     }
 
@@ -481,9 +481,10 @@ public class Gui {
                     TextureAtlasSprite textureAtlasSprite = mobEffectTextureManager.get(mobEffect);
                     int i8 = i4;
                     float f2 = f;
+                    int finalI = i3;
                     list.add((Runnable)() -> {
                         guiGraphics.setColor(1.0F, 1.0F, 1.0F, f2);
-                        guiGraphics.blit(i3 + 3, i8 + 3, 0, 18, 18, textureAtlasSprite);
+                        guiGraphics.blit(finalI + 3, i8 + 3, 0, 18, 18, textureAtlasSprite);
                         guiGraphics.setColor(1.0F, 1.0F, 1.0F, 1.0F);
                     });
                 }
@@ -1249,4 +1250,4 @@ public class Gui {
             return heartType;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/components/ChatComponent.java b/src/main/java/net/minecraft/client/gui/components/ChatComponent.java
index 6c00bceac5815555b10a89d0eec120f3a6f14df9..6a4dc2d6f416662a2ec99f0df610e2d4957e5872 100644
--- a/src/main/java/net/minecraft/client/gui/components/ChatComponent.java
+++ b/src/main/java/net/minecraft/client/gui/components/ChatComponent.java
@@ -478,16 +478,6 @@ public class ChatComponent {
         return (int)(9.0D * (this.minecraft.options.chatLineSpacing().get() + 1.0D));
     }
 
-    static record DelayedMessageDeletion(MessageSignature a, int b) {
-        private final MessageSignature signature;
-        private final int deletableAfter;
-
-        public MessageSignature signature() {
-            return this.signature;
-        }
-
-        public int deletableAfter() {
-            return this.deletableAfter;
-        }
+    static record DelayedMessageDeletion(MessageSignature signature, int deletableAfter) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/gui/components/CycleButton.java b/src/main/java/net/minecraft/client/gui/components/CycleButton.java
index 2c8e7d1b5e916093387b23a9a2f82be86bac141c..aa9ee05905fc9eca9d31252ae9da08d70ea8f173 100644
--- a/src/main/java/net/minecraft/client/gui/components/CycleButton.java
+++ b/src/main/java/net/minecraft/client/gui/components/CycleButton.java
@@ -134,15 +134,15 @@ public class CycleButton<T> extends AbstractButton {
     }
 
     public static CycleButton.Builder<Boolean> booleanBuilder(Component component, Component component2) {
-        return (new CycleButton.Builder((flag) -> flag ? component : component2)).withValues(BOOLEAN_OPTIONS);
+        return (new CycleButton.Builder<Boolean>((flag) -> flag ? component : component2)).withValues(BOOLEAN_OPTIONS);
     }
 
     public static CycleButton.Builder<Boolean> onOffBuilder() {
-        return (new CycleButton.Builder((flag) -> flag ? CommonComponents.OPTION_ON : CommonComponents.OPTION_OFF)).withValues(BOOLEAN_OPTIONS);
+        return (new CycleButton.Builder<Boolean>((flag) -> flag ? CommonComponents.OPTION_ON : CommonComponents.OPTION_OFF)).withValues(BOOLEAN_OPTIONS);
     }
 
     public static CycleButton.Builder<Boolean> onOffBuilder(boolean flag) {
-        return onOffBuilder().withInitialValue((T)flag);
+        return onOffBuilder().withInitialValue(flag);
     }
 
     public static class Builder<T> {
diff --git a/src/main/java/net/minecraft/client/gui/components/MultiLineTextWidget.java b/src/main/java/net/minecraft/client/gui/components/MultiLineTextWidget.java
index 41b7b79c443d55d44241f020d356e2cc9d20b66b..c6e1c4f5b99b2078d5e8b2effecff67e2611ec69 100644
--- a/src/main/java/net/minecraft/client/gui/components/MultiLineTextWidget.java
+++ b/src/main/java/net/minecraft/client/gui/components/MultiLineTextWidget.java
@@ -69,21 +69,6 @@ public class MultiLineTextWidget extends AbstractStringWidget {
         return new MultiLineTextWidget.CacheKey(this.getMessage(), this.maxWidth.orElse(Integer.MAX_VALUE), this.maxRows);
     }
 
-    static record CacheKey(Component a, int b, OptionalInt c) {
-        final Component message;
-        final int maxWidth;
-        final OptionalInt maxRows;
-
-        public Component message() {
-            return this.message;
-        }
-
-        public int maxWidth() {
-            return this.maxWidth;
-        }
-
-        public OptionalInt maxRows() {
-            return this.maxRows;
-        }
+    static record CacheKey(Component message, int maxWidth, OptionalInt maxRows) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/gui/components/MultilineTextField.java b/src/main/java/net/minecraft/client/gui/components/MultilineTextField.java
index b33ae090f76d379ede21670faddf4a7ec00a2603..42b3f23a30f3fb873cbe515dca0a4eb0d23dcaff 100644
--- a/src/main/java/net/minecraft/client/gui/components/MultilineTextField.java
+++ b/src/main/java/net/minecraft/client/gui/components/MultilineTextField.java
@@ -355,17 +355,7 @@ public class MultilineTextField {
         }
     }
 
-    protected static record StringView(int a, int b) {
-        final int beginIndex;
-        final int endIndex;
+    protected static record StringView(int beginIndex, int endIndex) {
         static final MultilineTextField.StringView EMPTY = new MultilineTextField.StringView(0, 0);
-
-        public int beginIndex() {
-            return this.beginIndex;
-        }
-
-        public int endIndex() {
-            return this.endIndex;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/gui/components/PlayerSkinWidget.java b/src/main/java/net/minecraft/client/gui/components/PlayerSkinWidget.java
index e8e147cfc2d6d899200bf4a07d1605d74f203f59..ef524537cd18d969fcb9ecbf1039ca71e951cbe6 100644
--- a/src/main/java/net/minecraft/client/gui/components/PlayerSkinWidget.java
+++ b/src/main/java/net/minecraft/client/gui/components/PlayerSkinWidget.java
@@ -71,10 +71,7 @@ public class PlayerSkinWidget extends AbstractWidget {
         return null;
     }
 
-    static record Model(PlayerModel<?> a, PlayerModel<?> b) {
-        private final PlayerModel<?> wideModel;
-        private final PlayerModel<?> slimModel;
-
+    static record Model(PlayerModel<?> wideModel, PlayerModel<?> slimModel) {
         public static PlayerSkinWidget.Model bake(EntityModelSet entityModelSet) {
             PlayerModel<?> playerModel = new PlayerModel(entityModelSet.bakeLayer(ModelLayers.PLAYER), false);
             PlayerModel<?> playerModel2 = new PlayerModel(entityModelSet.bakeLayer(ModelLayers.PLAYER_SLIM), true);
@@ -96,13 +93,5 @@ public class PlayerSkinWidget extends AbstractWidget {
             guiGraphics.flush();
             Lighting.setupFor3DItems();
         }
-
-        public PlayerModel<?> wideModel() {
-            return this.wideModel;
-        }
-
-        public PlayerModel<?> slimModel() {
-            return this.slimModel;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java b/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java
index cc51f0135ba250facd42dcf9f7f7a4a1531ebf15..689ddf5c302b6847334a83e370189026d4866569 100644
--- a/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/components/PlayerTabOverlay.java
@@ -46,7 +46,7 @@ public class PlayerTabOverlay {
     private static final ResourceLocation HEART_FULL_SPRITE = new ResourceLocation("hud/heart/full");
     private static final ResourceLocation HEART_ABSORBING_HALF_BLINKING_SPRITE = new ResourceLocation("hud/heart/absorbing_half_blinking");
     private static final ResourceLocation HEART_HALF_SPRITE = new ResourceLocation("hud/heart/half");
-    private static final Comparator<PlayerInfo> PLAYER_COMPARATOR = Comparator.comparingInt((playerInfo) -> playerInfo.getGameMode() == GameType.SPECTATOR ? 1 : 0).thenComparing((playerInfo) -> Optionull.mapOrDefault(playerInfo.getTeam(), PlayerTeam::getName, "")).thenComparing((playerInfo) -> playerInfo.getProfile().getName(), String::compareToIgnoreCase);
+    private static final Comparator<PlayerInfo> PLAYER_COMPARATOR = Comparator.<PlayerInfo>comparingInt((playerInfo) -> playerInfo.getGameMode() == GameType.SPECTATOR ? 1 : 0).thenComparing((playerInfo) -> Optionull.mapOrDefault(playerInfo.getTeam(), PlayerTeam::getName, "")).thenComparing((playerInfo) -> playerInfo.getProfile().getName(), String::compareToIgnoreCase);
     public static final int MAX_ROWS_PER_COL = 20;
     private final Minecraft minecraft;
     private final Gui gui;
@@ -340,4 +340,4 @@ public class PlayerTabOverlay {
             return this.blinkUntilTick > l && (this.blinkUntilTick - l) % 6L >= 3L;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/components/WidgetSprites.java b/src/main/java/net/minecraft/client/gui/components/WidgetSprites.java
index c2619283138fb65c87ce5b2cbc404320262a6aa5..85a688ae15674b8898c0d7bcb6de8fea9a18b048 100644
--- a/src/main/java/net/minecraft/client/gui/components/WidgetSprites.java
+++ b/src/main/java/net/minecraft/client/gui/components/WidgetSprites.java
@@ -2,12 +2,7 @@ package net.minecraft.client.gui.components;
 
 import net.minecraft.resources.ResourceLocation;
 
-public record WidgetSprites(ResourceLocation a, ResourceLocation b, ResourceLocation c, ResourceLocation d) {
-    private final ResourceLocation enabled;
-    private final ResourceLocation disabled;
-    private final ResourceLocation enabledFocused;
-    private final ResourceLocation disabledFocused;
-
+public record WidgetSprites(ResourceLocation enabled, ResourceLocation disabled, ResourceLocation enabledFocused, ResourceLocation disabledFocused) {
     public WidgetSprites(ResourceLocation resourceLocation, ResourceLocation resourceLocation2) {
         this(resourceLocation, resourceLocation, resourceLocation2, resourceLocation2);
     }
@@ -23,20 +18,4 @@ public record WidgetSprites(ResourceLocation a, ResourceLocation b, ResourceLoca
             return flag2 ? this.disabledFocused : this.disabled;
         }
     }
-
-    public ResourceLocation enabled() {
-        return this.enabled;
-    }
-
-    public ResourceLocation disabled() {
-        return this.disabled;
-    }
-
-    public ResourceLocation enabledFocused() {
-        return this.enabledFocused;
-    }
-
-    public ResourceLocation disabledFocused() {
-        return this.disabledFocused;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java b/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java
index fddc921a185be15db0de877ab4f4b9dab8750bd8..04690ded1976c6c9e90313c8d95d701700d8774e 100644
--- a/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java
+++ b/src/main/java/net/minecraft/client/gui/components/toasts/ToastComponent.java
@@ -36,11 +36,11 @@ public class ToastComponent {
             });
             if (!this.queued.isEmpty() && this.freeSlots() > 0) {
                 this.queued.removeIf((toast) -> {
-                    int i = toast.slotCount();
-                    int i2 = this.findFreeIndex(i);
-                    if (i2 != -1) {
-                        this.visible.add(new ToastComponent.ToastInstance<>(toast, i2, i));
-                        this.occupiedSlots.set(i2, i2 + i);
+                    int slotCount = toast.slotCount();
+                    int freeIndex = this.findFreeIndex(slotCount);
+                    if (freeIndex != -1) {
+                        this.visible.add(new ToastComponent.ToastInstance<>(toast, freeIndex, slotCount));
+                        this.occupiedSlots.set(freeIndex, freeIndex + slotCount);
                         return true;
                     } else {
                         return false;
diff --git a/src/main/java/net/minecraft/client/gui/font/FontManager.java b/src/main/java/net/minecraft/client/gui/font/FontManager.java
index 8bd471276bd183975caa8b3e82f94af31a2fbc43..efc36b080d2cccb9c744351e59956b29981360d4 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontManager.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontManager.java
@@ -74,10 +74,10 @@ public class FontManager implements PreparableReloadListener, AutoCloseable {
         for(Entry<ResourceLocation, List<Resource>> entry : FONT_DEFINITIONS.listMatchingResourceStacks(resourceManager).entrySet()) {
             ResourceLocation resourceLocation = FONT_DEFINITIONS.fileToId((ResourceLocation)entry.getKey());
             list.add(CompletableFuture.supplyAsync(() -> {
-                List<Pair<FontManager.BuilderId, GlyphProviderDefinition>> list = loadResourceStack(entry.getValue(), resourceLocation);
+                List<Pair<FontManager.BuilderId, GlyphProviderDefinition>> definitions = loadResourceStack(entry.getValue(), resourceLocation);
                 FontManager.UnresolvedBuilderBundle unresolvedBuilderBundle = new FontManager.UnresolvedBuilderBundle(resourceLocation);
 
-                for(Pair<FontManager.BuilderId, GlyphProviderDefinition> pair : list) {
+                for(Pair<FontManager.BuilderId, GlyphProviderDefinition> pair : definitions) {
                     FontManager.BuilderId builderId = (FontManager.BuilderId)pair.getFirst();
                     ((GlyphProviderDefinition)pair.getSecond()).unpack().ifLeft((loader) -> {
                         CompletableFuture<Optional<GlyphProvider>> completableFuture = this.safeLoad(builderId, loader, resourceManager, executor);
@@ -95,10 +95,10 @@ public class FontManager implements PreparableReloadListener, AutoCloseable {
             list2.add(CompletableFuture.completedFuture(Optional.of(glyphProvider)));
             return Util.sequence(list2).thenCompose((list2x) -> {
                 Map<ResourceLocation, List<GlyphProvider>> map = this.resolveProviders(listx);
-                CompletableFuture<?>[] completableFutures = (CompletableFuture[])map.values().stream().map((list) -> CompletableFuture.runAsync(() -> this.finalizeProviderLoading(list, glyphProvider), executor)).toArray((i) -> new CompletableFuture[i]);
+                CompletableFuture<?>[] completableFutures = (CompletableFuture[])map.values().stream().map((providers) -> CompletableFuture.runAsync(() -> this.finalizeProviderLoading(providers, glyphProvider), executor)).toArray((i) -> new CompletableFuture[i]);
                 return CompletableFuture.allOf(completableFutures).thenApply((void_) -> {
-                    List<GlyphProvider> list2 = list2x.stream().flatMap(Optional::stream).toList();
-                    return new FontManager.Preparation(map, list2);
+                    List<GlyphProvider> glyphProviders = list2x.stream().flatMap(Optional::stream).toList();
+                    return new FontManager.Preparation(map, glyphProviders);
                 });
             });
         });
@@ -119,7 +119,7 @@ public class FontManager implements PreparableReloadListener, AutoCloseable {
         Map<ResourceLocation, List<GlyphProvider>> map = new HashMap();
         DependencySorter<ResourceLocation, FontManager.UnresolvedBuilderBundle> dependencySorter = new DependencySorter<>();
         list.forEach((unresolvedBuilderBundle) -> dependencySorter.addEntry(unresolvedBuilderBundle.fontId, unresolvedBuilderBundle));
-        dependencySorter.orderByDependencies((resourceLocation, unresolvedBuilderBundle) -> unresolvedBuilderBundle.resolve(map::get).ifPresent((list) -> map.put(resourceLocation, list)));
+        dependencySorter.orderByDependencies((resourceLocation, unresolvedBuilderBundle) -> unresolvedBuilderBundle.resolve(map::get).ifPresent((providers) -> map.put(resourceLocation, providers)));
         return map;
     }
 
@@ -131,10 +131,10 @@ public class FontManager implements PreparableReloadListener, AutoCloseable {
             intSet.addAll(glyphProvider2.getSupportedGlyphs());
         }
 
-        intSet.forEach((i) -> {
+        intSet.forEach((java.util.function.IntConsumer) (i) -> {
             if (i != 32) {
-                for(GlyphProvider glyphProvider : Lists.reverse(list)) {
-                    if (glyphProvider.getGlyph(i) != null) {
+                for(GlyphProvider provider : Lists.reverse(list)) {
+                    if (provider.getGlyph(i) != null) {
                         break;
                     }
                 }
@@ -225,32 +225,13 @@ public class FontManager implements PreparableReloadListener, AutoCloseable {
         this.missingFontSet.close();
     }
 
-    static record BuilderId(ResourceLocation a, String b, int c) {
-        private final ResourceLocation fontId;
-        private final String pack;
-        private final int index;
-
+    static record BuilderId(ResourceLocation fontId, String pack, int index) {
         public String toString() {
             return "(" + this.fontId + ": builder #" + this.index + " from pack " + this.pack + ")";
         }
-
-        public ResourceLocation fontId() {
-            return this.fontId;
-        }
-
-        public String pack() {
-            return this.pack;
-        }
-
-        public int index() {
-            return this.index;
-        }
     }
 
-    static record BuilderResult(FontManager.BuilderId a, Either<CompletableFuture<Optional<GlyphProvider>>, ResourceLocation> b) {
-        private final FontManager.BuilderId id;
-        final Either<CompletableFuture<Optional<GlyphProvider>>, ResourceLocation> result;
-
+    static record BuilderResult(FontManager.BuilderId id, Either<CompletableFuture<Optional<GlyphProvider>>, ResourceLocation> result) {
         public Optional<List<GlyphProvider>> resolve(Function<ResourceLocation, List<GlyphProvider>> function) {
             return this.result.map((completableFuture) -> (completableFuture.join()).map(List::of), (resourceLocation) -> {
                 List<GlyphProvider> list = function.apply(resourceLocation);
@@ -262,43 +243,16 @@ public class FontManager implements PreparableReloadListener, AutoCloseable {
                 }
             });
         }
-
-        public FontManager.BuilderId id() {
-            return this.id;
-        }
-
-        public Either<CompletableFuture<Optional<GlyphProvider>>, ResourceLocation> result() {
-            return this.result;
-        }
     }
 
-    static record FontDefinitionFile(List<GlyphProviderDefinition> b) {
-        final List<GlyphProviderDefinition> providers;
+    static record FontDefinitionFile(List<GlyphProviderDefinition> providers) {
         public static final Codec<FontManager.FontDefinitionFile> CODEC = RecordCodecBuilder.create((instance) -> instance.group(GlyphProviderDefinition.CODEC.listOf().fieldOf("providers").forGetter(FontManager.FontDefinitionFile::providers)).apply(instance, FontManager.FontDefinitionFile::new));
-
-        public List<GlyphProviderDefinition> providers() {
-            return this.providers;
-        }
     }
 
-    static record Preparation(Map<ResourceLocation, List<GlyphProvider>> a, List<GlyphProvider> b) {
-        private final Map<ResourceLocation, List<GlyphProvider>> providers;
-        final List<GlyphProvider> allProviders;
-
-        public Map<ResourceLocation, List<GlyphProvider>> providers() {
-            return this.providers;
-        }
-
-        public List<GlyphProvider> allProviders() {
-            return this.allProviders;
-        }
+    static record Preparation(Map<ResourceLocation, List<GlyphProvider>> providers, List<GlyphProvider> allProviders) {
     }
 
-    static record UnresolvedBuilderBundle(ResourceLocation a, List<FontManager.BuilderResult> b, Set<ResourceLocation> c) implements DependencySorter.Entry<ResourceLocation> {
-        final ResourceLocation fontId;
-        private final List<FontManager.BuilderResult> builders;
-        private final Set<ResourceLocation> dependencies;
-
+    static record UnresolvedBuilderBundle(ResourceLocation fontId, List<FontManager.BuilderResult> builders, Set<ResourceLocation> dependencies) implements DependencySorter.Entry<ResourceLocation> {
         public UnresolvedBuilderBundle(ResourceLocation resourceLocation) {
             this(resourceLocation, new ArrayList(), new HashSet());
         }
@@ -337,17 +291,5 @@ public class FontManager implements PreparableReloadListener, AutoCloseable {
 
         public void visitOptionalDependencies(Consumer<ResourceLocation> consumer) {
         }
-
-        public ResourceLocation fontId() {
-            return this.fontId;
-        }
-
-        public List<FontManager.BuilderResult> builders() {
-            return this.builders;
-        }
-
-        public Set<ResourceLocation> dependencies() {
-            return this.dependencies;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/font/FontSet.java b/src/main/java/net/minecraft/client/gui/font/FontSet.java
index ab2404756df663782f45cbc82827f75d9bbf5ef3..e17eb52542f098e38e9d9b39648a4bdb61d2d325 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontSet.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontSet.java
@@ -53,7 +53,7 @@ public class FontSet implements AutoCloseable {
         }
 
         Set<GlyphProvider> set = Sets.newHashSet();
-        intSet.forEach((i) -> {
+        intSet.forEach((java.util.function.IntConsumer) (i) -> {
             for(GlyphProvider glyphProvider : list) {
                 GlyphInfo glyphInfo = glyphProvider.getGlyph(i);
                 if (glyphInfo != null) {
@@ -165,21 +165,11 @@ public class FontSet implements AutoCloseable {
         return this.whiteGlyph;
     }
 
-    static record GlyphInfoFilter(GlyphInfo a, GlyphInfo b) {
-        private final GlyphInfo glyphInfo;
-        private final GlyphInfo glyphInfoNotFishy;
+    static record GlyphInfoFilter(GlyphInfo glyphInfo, GlyphInfo glyphInfoNotFishy) {
         static final FontSet.GlyphInfoFilter MISSING = new FontSet.GlyphInfoFilter(SpecialGlyphs.MISSING, SpecialGlyphs.MISSING);
 
         GlyphInfo select(boolean flag) {
             return flag ? this.glyphInfoNotFishy : this.glyphInfo;
         }
-
-        public GlyphInfo glyphInfo() {
-            return this.glyphInfo;
-        }
-
-        public GlyphInfo glyphInfoNotFishy() {
-            return this.glyphInfoNotFishy;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/gui/font/GlyphRenderTypes.java b/src/main/java/net/minecraft/client/gui/font/GlyphRenderTypes.java
index ad1905f09f78d3d9e0be61d1757dbca3b0584d90..ab6fd948904b5fa44b275b9d1dc2588bde16f6ea 100644
--- a/src/main/java/net/minecraft/client/gui/font/GlyphRenderTypes.java
+++ b/src/main/java/net/minecraft/client/gui/font/GlyphRenderTypes.java
@@ -4,11 +4,7 @@ import net.minecraft.client.gui.Font;
 import net.minecraft.client.renderer.RenderType;
 import net.minecraft.resources.ResourceLocation;
 
-public record GlyphRenderTypes(RenderType a, RenderType b, RenderType c) {
-    private final RenderType normal;
-    private final RenderType seeThrough;
-    private final RenderType polygonOffset;
-
+public record GlyphRenderTypes(RenderType normal, RenderType seeThrough, RenderType polygonOffset) {
     public static GlyphRenderTypes createForIntensityTexture(ResourceLocation resourceLocation) {
         return new GlyphRenderTypes(RenderType.textIntensity(resourceLocation), RenderType.textIntensitySeeThrough(resourceLocation), RenderType.textIntensityPolygonOffset(resourceLocation));
     }
@@ -35,16 +31,4 @@ public record GlyphRenderTypes(RenderType a, RenderType b, RenderType c) {
 
         return var10000;
     }
-
-    public RenderType normal() {
-        return this.normal;
-    }
-
-    public RenderType seeThrough() {
-        return this.seeThrough;
-    }
-
-    public RenderType polygonOffset() {
-        return this.polygonOffset;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/font/providers/BitmapProvider.java b/src/main/java/net/minecraft/client/gui/font/providers/BitmapProvider.java
index 9a9a3707d3bcb682ac1effbbdfe786615387cda8..c5624f286e6564aa0bb2ca27b5294f2c8fd50e0b 100644
--- a/src/main/java/net/minecraft/client/gui/font/providers/BitmapProvider.java
+++ b/src/main/java/net/minecraft/client/gui/font/providers/BitmapProvider.java
@@ -48,11 +48,7 @@ public class BitmapProvider implements GlyphProvider {
         return IntSets.unmodifiable(this.glyphs.keySet());
     }
 
-    public static record Definition(ResourceLocation c, int d, int e, int[][] f) implements GlyphProviderDefinition {
-        private final ResourceLocation file;
-        private final int height;
-        private final int ascent;
-        private final int[][] codepointGrid;
+    public static record Definition(ResourceLocation file, int height, int ascent, int[][] codepointGrid) implements GlyphProviderDefinition {
         private static final Codec<int[][]> CODEPOINT_GRID_CODEC = ExtraCodecs.validate(Codec.STRING.listOf().xmap((list) -> {
             int i = list.size();
             int[][] i2 = new int[i][];
@@ -171,34 +167,9 @@ public class BitmapProvider implements GlyphProvider {
 
             return i5 + 1;
         }
-
-        public ResourceLocation file() {
-            return this.file;
-        }
-
-        public int height() {
-            return this.height;
-        }
-
-        public int ascent() {
-            return this.ascent;
-        }
-
-        public int[][] codepointGrid() {
-            return this.codepointGrid;
-        }
     }
 
-    static record Glyph(float a, NativeImage b, int c, int d, int e, int f, int g, int h) implements GlyphInfo {
-        final float scale;
-        final NativeImage image;
-        final int offsetX;
-        final int offsetY;
-        final int width;
-        final int height;
-        private final int advance;
-        final int ascent;
-
+    static record Glyph(float scale, NativeImage image, int offsetX, int offsetY, int width, int height, int advance, int ascent) implements GlyphInfo {
         public float getAdvance() {
             return (float)this.advance;
         }
@@ -230,37 +201,5 @@ public class BitmapProvider implements GlyphProvider {
                 }
             });
         }
-
-        public float scale() {
-            return this.scale;
-        }
-
-        public NativeImage image() {
-            return this.image;
-        }
-
-        public int offsetX() {
-            return this.offsetX;
-        }
-
-        public int offsetY() {
-            return this.offsetY;
-        }
-
-        public int width() {
-            return this.width;
-        }
-
-        public int height() {
-            return this.height;
-        }
-
-        public int advance() {
-            return this.advance;
-        }
-
-        public int ascent() {
-            return this.ascent;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/font/providers/GlyphProviderDefinition.java b/src/main/java/net/minecraft/client/gui/font/providers/GlyphProviderDefinition.java
index 148468a4dae3894a6ade8bf8e67c554afccd9adf..9ec94b361d86051f5559a7883eb9b9c30eda4a18 100644
--- a/src/main/java/net/minecraft/client/gui/font/providers/GlyphProviderDefinition.java
+++ b/src/main/java/net/minecraft/client/gui/font/providers/GlyphProviderDefinition.java
@@ -18,11 +18,6 @@ public interface GlyphProviderDefinition {
         GlyphProvider load(ResourceManager var1) throws IOException;
     }
 
-    public static record Reference(ResourceLocation a) {
-        private final ResourceLocation id;
-
-        public ResourceLocation id() {
-            return this.id;
-        }
+    public static record Reference(ResourceLocation id) {
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/font/providers/ProviderReferenceDefinition.java b/src/main/java/net/minecraft/client/gui/font/providers/ProviderReferenceDefinition.java
index fd91adcdddc78af6b0207310bb83d0f33a436fbd..822297fac5eb350977bfbde43649e3b95ec5fab9 100644
--- a/src/main/java/net/minecraft/client/gui/font/providers/ProviderReferenceDefinition.java
+++ b/src/main/java/net/minecraft/client/gui/font/providers/ProviderReferenceDefinition.java
@@ -5,8 +5,7 @@ import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.resources.ResourceLocation;
 
-public record ProviderReferenceDefinition(ResourceLocation c) implements GlyphProviderDefinition {
-    private final ResourceLocation id;
+public record ProviderReferenceDefinition(ResourceLocation id) implements GlyphProviderDefinition {
     public static final MapCodec<ProviderReferenceDefinition> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("id").forGetter(ProviderReferenceDefinition::id)).apply(instance, ProviderReferenceDefinition::new));
 
     public GlyphProviderType type() {
@@ -16,8 +15,4 @@ public record ProviderReferenceDefinition(ResourceLocation c) implements GlyphPr
     public Either<GlyphProviderDefinition.Loader, GlyphProviderDefinition.Reference> unpack() {
         return Either.right(new GlyphProviderDefinition.Reference(this.id));
     }
-
-    public ResourceLocation id() {
-        return this.id;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/font/providers/TrueTypeGlyphProviderDefinition.java b/src/main/java/net/minecraft/client/gui/font/providers/TrueTypeGlyphProviderDefinition.java
index 07923a8b29a528084c4bfdf63bcab257c0ac2d87..f8d7a36530608b2a17af4a310cb0d4ad33119643 100644
--- a/src/main/java/net/minecraft/client/gui/font/providers/TrueTypeGlyphProviderDefinition.java
+++ b/src/main/java/net/minecraft/client/gui/font/providers/TrueTypeGlyphProviderDefinition.java
@@ -19,12 +19,12 @@ import org.lwjgl.stb.STBTTFontinfo;
 import org.lwjgl.stb.STBTruetype;
 import org.lwjgl.system.MemoryUtil;
 
-public record TrueTypeGlyphProviderDefinition(ResourceLocation c, float d, float e, TrueTypeGlyphProviderDefinition.Shift f, String g) implements GlyphProviderDefinition {
-    private final ResourceLocation location;
-    private final float size;
-    private final float oversample;
-    private final TrueTypeGlyphProviderDefinition.Shift shift;
-    private final String skip;
+public record TrueTypeGlyphProviderDefinition(
+        ResourceLocation location,
+        float size,
+        float oversample,
+        TrueTypeGlyphProviderDefinition.Shift shift,
+        String skip) implements GlyphProviderDefinition {
     private static final Codec<String> SKIP_LIST_CODEC = ExtraCodecs.withAlternative(Codec.STRING, Codec.STRING.listOf(), (list) -> String.join("", list));
     public static final MapCodec<TrueTypeGlyphProviderDefinition> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("file").forGetter(TrueTypeGlyphProviderDefinition::location), Codec.FLOAT.optionalFieldOf("size", 11.0F).forGetter(TrueTypeGlyphProviderDefinition::size), Codec.FLOAT.optionalFieldOf("oversample", 1.0F).forGetter(TrueTypeGlyphProviderDefinition::oversample), TrueTypeGlyphProviderDefinition.Shift.CODEC.optionalFieldOf("shift", TrueTypeGlyphProviderDefinition.Shift.NONE).forGetter(TrueTypeGlyphProviderDefinition::shift), SKIP_LIST_CODEC.optionalFieldOf("skip", "").forGetter(TrueTypeGlyphProviderDefinition::skip)).apply(instance, TrueTypeGlyphProviderDefinition::new));
 
@@ -80,38 +80,8 @@ public record TrueTypeGlyphProviderDefinition(ResourceLocation c, float d, float
         }
     }
 
-    public ResourceLocation location() {
-        return this.location;
-    }
-
-    public float size() {
-        return this.size;
-    }
-
-    public float oversample() {
-        return this.oversample;
-    }
-
-    public TrueTypeGlyphProviderDefinition.Shift shift() {
-        return this.shift;
-    }
-
-    public String skip() {
-        return this.skip;
-    }
-
-    public static record Shift(float c, float d) {
-        final float x;
-        final float y;
+    public static record Shift(float x, float y) {
         public static final TrueTypeGlyphProviderDefinition.Shift NONE = new TrueTypeGlyphProviderDefinition.Shift(0.0F, 0.0F);
         public static final Codec<TrueTypeGlyphProviderDefinition.Shift> CODEC = Codec.FLOAT.listOf().comapFlatMap((list) -> Util.fixedSize(list, 2).map((listx) -> new TrueTypeGlyphProviderDefinition.Shift(listx.get(0), listx.get(1))), (shift) -> List.of(shift.x, shift.y));
-
-        public float x() {
-            return this.x;
-        }
-
-        public float y() {
-            return this.y;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/font/providers/UnihexProvider.java b/src/main/java/net/minecraft/client/gui/font/providers/UnihexProvider.java
index 69470eba1c4242fd6dfd7ce8fdd0e4b112526e7b..5cd623a709c182fb47aea02d336e35ed059cfe98 100644
--- a/src/main/java/net/minecraft/client/gui/font/providers/UnihexProvider.java
+++ b/src/main/java/net/minecraft/client/gui/font/providers/UnihexProvider.java
@@ -212,9 +212,7 @@ public class UnihexProvider implements GlyphProvider {
         }
     }
 
-    static record ByteContents(byte[] a) implements UnihexProvider.LineData {
-        private final byte[] contents;
-
+    static record ByteContents(byte[] contents) implements UnihexProvider.LineData {
         public int line(int i) {
             return this.contents[i] << 24;
         }
@@ -236,10 +234,6 @@ public class UnihexProvider implements GlyphProvider {
         public int bitWidth() {
             return 8;
         }
-
-        public byte[] contents() {
-            return this.contents;
-        }
     }
 
     public static class Definition implements GlyphProviderDefinition {
@@ -338,9 +332,7 @@ public class UnihexProvider implements GlyphProvider {
         }
     }
 
-    public static record Dimensions(int c, int d) {
-        final int left;
-        final int right;
+    public static record Dimensions(int left, int right) {
         public static final MapCodec<UnihexProvider.Dimensions> MAP_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.INT.fieldOf("left").forGetter(UnihexProvider.Dimensions::left), Codec.INT.fieldOf("right").forGetter(UnihexProvider.Dimensions::right)).apply(instance, UnihexProvider.Dimensions::new));
         public static final Codec<UnihexProvider.Dimensions> CODEC = MAP_CODEC.codec();
 
@@ -359,21 +351,9 @@ public class UnihexProvider implements GlyphProvider {
         public static int right(int i) {
             return (byte)i;
         }
-
-        public int left() {
-            return this.left;
-        }
-
-        public int right() {
-            return this.right;
-        }
     }
 
-    static record Glyph(UnihexProvider.LineData a, int b, int c) implements GlyphInfo {
-        final UnihexProvider.LineData contents;
-        final int left;
-        final int right;
-
+    static record Glyph(UnihexProvider.LineData contents, int left, int right) implements GlyphInfo {
         public int width() {
             return this.right - this.left + 1;
         }
@@ -416,23 +396,9 @@ public class UnihexProvider implements GlyphProvider {
                 }
             });
         }
-
-        public UnihexProvider.LineData contents() {
-            return this.contents;
-        }
-
-        public int left() {
-            return this.left;
-        }
-
-        public int right() {
-            return this.right;
-        }
     }
 
-    static record IntContents(int[] a, int b) implements UnihexProvider.LineData {
-        private final int[] contents;
-        private final int bitWidth;
+    static record IntContents(int[] contents, int bitWidth) implements UnihexProvider.LineData {
         private static final int SIZE_24 = 24;
 
         public int line(int i) {
@@ -456,7 +422,7 @@ public class UnihexProvider implements GlyphProvider {
                 i2 |= i11;
             }
 
-            return new UnihexProvider.IntContents(ints, 24);
+            return new UnihexProvider.IntContents(ints, SIZE_24);
         }
 
         public static UnihexProvider.LineData read32(int i, ByteList byteList) {
@@ -480,14 +446,6 @@ public class UnihexProvider implements GlyphProvider {
 
             return new UnihexProvider.IntContents(ints, 32);
         }
-
-        public int[] contents() {
-            return this.contents;
-        }
-
-        public int bitWidth() {
-            return this.bitWidth;
-        }
     }
 
     public interface LineData {
@@ -522,24 +480,9 @@ public class UnihexProvider implements GlyphProvider {
         }
     }
 
-    static record OverrideRange(int b, int c, UnihexProvider.Dimensions d) {
-        final int from;
-        final int to;
-        final UnihexProvider.Dimensions dimensions;
+    static record OverrideRange(int from, int to, UnihexProvider.Dimensions dimensions) {
         private static final Codec<UnihexProvider.OverrideRange> RAW_CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.CODEPOINT.fieldOf("from").forGetter(UnihexProvider.OverrideRange::from), ExtraCodecs.CODEPOINT.fieldOf("to").forGetter(UnihexProvider.OverrideRange::to), UnihexProvider.Dimensions.MAP_CODEC.forGetter(UnihexProvider.OverrideRange::dimensions)).apply(instance, UnihexProvider.OverrideRange::new));
         public static final Codec<UnihexProvider.OverrideRange> CODEC = ExtraCodecs.validate(RAW_CODEC, (overrideRange) -> overrideRange.from >= overrideRange.to ? DataResult.error(() -> "Invalid range: [" + overrideRange.from + ";" + overrideRange.to + "]") : DataResult.success(overrideRange));
-
-        public int from() {
-            return this.from;
-        }
-
-        public int to() {
-            return this.to;
-        }
-
-        public UnihexProvider.Dimensions dimensions() {
-            return this.dimensions;
-        }
     }
 
     @FunctionalInterface
@@ -547,9 +490,7 @@ public class UnihexProvider implements GlyphProvider {
         void accept(int var1, UnihexProvider.LineData var2);
     }
 
-    static record ShortContents(short[] a) implements UnihexProvider.LineData {
-        private final short[] contents;
-
+    static record ShortContents(short[] contents) implements UnihexProvider.LineData {
         public int line(int i) {
             return this.contents[i] << 16;
         }
@@ -573,9 +514,5 @@ public class UnihexProvider implements GlyphProvider {
         public int bitWidth() {
             return 16;
         }
-
-        public short[] contents() {
-            return this.contents;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java b/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
index d3d734743820c9112bf0623da8e86ea779f17679..91996dcd1df45f2b340636b102c194ea29bdbcc6 100644
--- a/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
+++ b/src/main/java/net/minecraft/client/gui/narration/NarrationThunk.java
@@ -9,7 +9,7 @@ import net.minecraft.util.Unit;
 public class NarrationThunk<T> {
     private final T contents;
     private final BiConsumer<Consumer<String>, T> converter;
-    public static final NarrationThunk<?> EMPTY = new NarrationThunk((T)Unit.INSTANCE, (consumer, unit) -> {
+    public static final NarrationThunk<?> EMPTY = new NarrationThunk(Unit.INSTANCE, (consumer, unit) -> {
     });
 
     private NarrationThunk(T object, BiConsumer<Consumer<String>, T> biConsumer) {
@@ -18,7 +18,7 @@ public class NarrationThunk<T> {
     }
 
     public static NarrationThunk<?> from(String s) {
-        return new NarrationThunk((T)s, Consumer::accept);
+        return new NarrationThunk<>(s, Consumer::accept);
     }
 
     public static NarrationThunk<?> from(Component component) {
@@ -26,7 +26,7 @@ public class NarrationThunk<T> {
     }
 
     public static NarrationThunk<?> from(List<Component> list) {
-        return new NarrationThunk((T)list, (consumer, list2) -> list.stream().map(Component::getString).forEach(consumer));
+        return new NarrationThunk<>(list, (consumer, list2) -> list.stream().map(Component::getString).forEach(consumer));
     }
 
     public void getText(Consumer<String> consumer) {
diff --git a/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java b/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
index 1f88364b9929dc12f05535dd2297844a0f6efc0f..16189cf8f3ea7941c7aab3ee3eade99f03ce01e0 100644
--- a/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
+++ b/src/main/java/net/minecraft/client/gui/narration/ScreenNarrationCollector.java
@@ -7,7 +7,7 @@ import java.util.function.Consumer;
 
 public class ScreenNarrationCollector {
     int generation;
-    final Map<ScreenNarrationCollector.EntryKey, ScreenNarrationCollector.NarrationEntry> entries = Maps.newTreeMap(Comparator.comparing((entryKey) -> entryKey.type).thenComparing((entryKey) -> entryKey.depth));
+    final Map<ScreenNarrationCollector.EntryKey, ScreenNarrationCollector.NarrationEntry> entries = Maps.newTreeMap(Comparator.<EntryKey, NarratedElementType>comparing((entryKey) -> entryKey.type).thenComparing((entryKey) -> entryKey.depth));
 
     public void update(Consumer<NarrationElementOutput> consumer) {
         ++this.generation;
diff --git a/src/main/java/net/minecraft/client/gui/navigation/FocusNavigationEvent.java b/src/main/java/net/minecraft/client/gui/navigation/FocusNavigationEvent.java
index 5577d775ff1c5d9e7d56a1f5cb939b8fad65200a..7185f6950593a1a7225d401908e7f20e50e0ef66 100644
--- a/src/main/java/net/minecraft/client/gui/navigation/FocusNavigationEvent.java
+++ b/src/main/java/net/minecraft/client/gui/navigation/FocusNavigationEvent.java
@@ -3,16 +3,10 @@ package net.minecraft.client.gui.navigation;
 public interface FocusNavigationEvent {
     ScreenDirection getVerticalDirectionForInitialFocus();
 
-    public static record ArrowNavigation(ScreenDirection a) implements FocusNavigationEvent {
-        private final ScreenDirection direction;
-
+    public static record ArrowNavigation(ScreenDirection direction) implements FocusNavigationEvent {
         public ScreenDirection getVerticalDirectionForInitialFocus() {
             return this.direction.getAxis() == ScreenAxis.VERTICAL ? this.direction : ScreenDirection.DOWN;
         }
-
-        public ScreenDirection direction() {
-            return this.direction;
-        }
     }
 
     public static class InitialFocus implements FocusNavigationEvent {
@@ -21,15 +15,9 @@ public interface FocusNavigationEvent {
         }
     }
 
-    public static record TabNavigation(boolean a) implements FocusNavigationEvent {
-        private final boolean forward;
-
+    public static record TabNavigation(boolean forward) implements FocusNavigationEvent {
         public ScreenDirection getVerticalDirectionForInitialFocus() {
             return this.forward ? ScreenDirection.DOWN : ScreenDirection.UP;
         }
-
-        public boolean forward() {
-            return this.forward;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/gui/navigation/ScreenPosition.java b/src/main/java/net/minecraft/client/gui/navigation/ScreenPosition.java
index 1044c248e1d4cf6873f13d4ac74c973e0647f0d1..727badcbf289543010f94d4aab4e17508660c508 100644
--- a/src/main/java/net/minecraft/client/gui/navigation/ScreenPosition.java
+++ b/src/main/java/net/minecraft/client/gui/navigation/ScreenPosition.java
@@ -1,9 +1,6 @@
 package net.minecraft.client.gui.navigation;
 
-public record ScreenPosition(int a, int b) {
-    private final int x;
-    private final int y;
-
+public record ScreenPosition(int x, int y) {
     public static ScreenPosition of(ScreenAxis screenAxis, int i, int i2) {
         ScreenPosition var10000;
         switch(screenAxis) {
@@ -57,12 +54,4 @@ public record ScreenPosition(int a, int b) {
 
         return var10000;
     }
-
-    public int x() {
-        return this.x;
-    }
-
-    public int y() {
-        return this.y;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/gui/navigation/ScreenRectangle.java b/src/main/java/net/minecraft/client/gui/navigation/ScreenRectangle.java
index a55c2ce4b41c00cb7f6a2f52f8acfa487a119760..d785f147da8681529b8c797cb3dd7f5f3b4d8f8a 100644
--- a/src/main/java/net/minecraft/client/gui/navigation/ScreenRectangle.java
+++ b/src/main/java/net/minecraft/client/gui/navigation/ScreenRectangle.java
@@ -2,10 +2,7 @@ package net.minecraft.client.gui.navigation;
 
 import javax.annotation.Nullable;
 
-public record ScreenRectangle(ScreenPosition a, int b, int c) {
-    private final ScreenPosition position;
-    private final int width;
-    private final int height;
+public record ScreenRectangle(ScreenPosition position, int width, int height) {
     private static final ScreenRectangle EMPTY = new ScreenRectangle(0, 0, 0, 0);
 
     public ScreenRectangle(int i, int i2, int i3, int i4) {
@@ -105,16 +102,4 @@ public record ScreenRectangle(ScreenPosition a, int b, int c) {
     public int right() {
         return this.position.x() + this.width;
     }
-
-    public ScreenPosition position() {
-        return this.position;
-    }
-
-    public int width() {
-        return this.width;
-    }
-
-    public int height() {
-        return this.height;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/gui/screens/DisconnectedScreen.java b/src/main/java/net/minecraft/client/gui/screens/DisconnectedScreen.java
index 1c86922c61f6cff5bd51421df7606b09f4d8c2e9..2bba4789dfcd5b728e54c3a301657fdae317fc39 100644
--- a/src/main/java/net/minecraft/client/gui/screens/DisconnectedScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/DisconnectedScreen.java
@@ -33,9 +33,9 @@ public class DisconnectedScreen extends Screen {
         this.layout.addChild((new MultiLineTextWidget(this.reason, this.font)).setMaxWidth(this.width - 50).setCentered(true));
         Button button;
         if (this.minecraft.allowsMultiplayer()) {
-            button = Button.builder(this.buttonText, (button) -> this.minecraft.setScreen(this.parent)).build();
+            button = Button.builder(this.buttonText, (buttonIn) -> this.minecraft.setScreen(this.parent)).build();
         } else {
-            button = Button.builder(TO_TITLE, (button) -> this.minecraft.setScreen(new TitleScreen())).build();
+            button = Button.builder(TO_TITLE, (buttonIn) -> this.minecraft.setScreen(new TitleScreen())).build();
         }
 
         this.layout.addChild(button);
@@ -55,4 +55,4 @@ public class DisconnectedScreen extends Screen {
     public boolean shouldCloseOnEsc() {
         return false;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/screens/LevelLoadingScreen.java b/src/main/java/net/minecraft/client/gui/screens/LevelLoadingScreen.java
index ee55c16e82622e4ea3464c29323f1a8510b5461a..ae59fdd9065043a18b7a50db6f47b34c6256c5ca 100644
--- a/src/main/java/net/minecraft/client/gui/screens/LevelLoadingScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/LevelLoadingScreen.java
@@ -97,15 +97,15 @@ public class LevelLoadingScreen extends Screen {
                 guiGraphics.fill(i - i12, i2 + i12 - 1, i + i12, i2 + i12, -16772609);
             }
 
-            for(int i10 = 0; i10 < i8; ++i10) {
-                for(int i11 = 0; i11 < i8; ++i11) {
-                    ChunkStatus chunkStatus = storingChunkProgressListener.getStatus(i10, i11);
-                    int i12 = i10 + i10 * i5;
-                    int i13 = i11 + i11 * i5;
-                    guiGraphics.fill(i12, i13, i12 + i3, i13 + i3, COLORS.getInt(chunkStatus) | -16777216);
+            for(int i14 = 0; i14 < i8; ++i14) {
+                for(int i15 = 0; i15 < i8; ++i15) {
+                    ChunkStatus chunkStatus = storingChunkProgressListener.getStatus(i14, i15);
+                    int i16 = i14 + i14 * i5;
+                    int i17 = i15 + i15 * i5;
+                    guiGraphics.fill(i16, i17, i16 + i3, i17 + i3, COLORS.getInt(chunkStatus) | -16777216);
                 }
             }
 
         });
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
index 41a230ad7412996816bb1b4934859d1759407fac..0e02f90c8098e58fc7b24699db5240a56c3358be 100644
--- a/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/PresetFlatWorldScreen.java
@@ -255,7 +255,7 @@ public class PresetFlatWorldScreen extends Screen {
 
             public Entry(Holder<FlatLevelGeneratorPreset> holder) {
                 this.preset = (FlatLevelGeneratorPreset)holder.value();
-                this.name = (Component)holder.unwrapKey().map((resourceKey) -> Component.translatable(resourceKey.location().toLanguageKey("flat_world_preset"))).orElse(PresetFlatWorldScreen.UNKNOWN_PRESET);
+                this.name = (Component)holder.unwrapKey().<Component>map((resourceKey) -> Component.translatable(resourceKey.location().toLanguageKey("flat_world_preset"))).orElse(PresetFlatWorldScreen.UNKNOWN_PRESET);
             }
 
             public void render(GuiGraphics guiGraphics, int i, int i2, int i3, int i4, int i5, int i6, int i7, boolean flag, float f) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/Screen.java b/src/main/java/net/minecraft/client/gui/screens/Screen.java
index f5341a83883f57880d4d9a34e6b914cce772ec94..136f8d495c7c4459cb9f81f39f880e155529be4b 100644
--- a/src/main/java/net/minecraft/client/gui/screens/Screen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/Screen.java
@@ -611,17 +611,7 @@ public abstract class Screen extends AbstractContainerEventHandler implements Re
         return null;
     }
 
-    static record DeferredTooltipRendering(List<FormattedCharSequence> a, ClientTooltipPositioner b) {
-        private final List<FormattedCharSequence> tooltip;
-        private final ClientTooltipPositioner positioner;
-
-        public List<FormattedCharSequence> tooltip() {
-            return this.tooltip;
-        }
-
-        public ClientTooltipPositioner positioner() {
-            return this.positioner;
-        }
+    static record DeferredTooltipRendering(List<FormattedCharSequence> tooltip, ClientTooltipPositioner positioner) {
     }
 
     public static class NarratableSearchResult {
@@ -635,4 +625,4 @@ public abstract class Screen extends AbstractContainerEventHandler implements Re
             this.priority = narrationPriority;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
index 140fe02d4753e2cbfadccc27b3aee007814ac08d..2fb422f45c4eab5f7a4912c0c5eaae9292565438 100644
--- a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
@@ -352,31 +352,10 @@ public class TitleScreen extends Screen {
         this.minecraft.setScreen(this);
     }
 
-    static record WarningLabel(Font a, MultiLineLabel b, int c, int d) {
-        private final Font font;
-        private final MultiLineLabel label;
-        private final int x;
-        private final int y;
-
+    static record WarningLabel(Font font, MultiLineLabel label, int x, int y) {
         public void render(GuiGraphics guiGraphics, int i) {
             this.label.renderBackgroundCentered(guiGraphics, this.x, this.y, 9, 2, 2097152 | Math.min(i, 1426063360));
             this.label.renderCentered(guiGraphics, this.x, this.y, 9, 16777215 | i);
         }
-
-        public Font font() {
-            return this.font;
-        }
-
-        public MultiLineLabel label() {
-            return this.label;
-        }
-
-        public int x() {
-            return this.x;
-        }
-
-        public int y() {
-            return this.y;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/screens/VideoSettingsScreen.java b/src/main/java/net/minecraft/client/gui/screens/VideoSettingsScreen.java
index 7689a3caaf9746d27643c57dac8315b4ece7f458..f6e8728c42f2973f3e2b6f657e2527a2b292bfd9 100644
--- a/src/main/java/net/minecraft/client/gui/screens/VideoSettingsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/VideoSettingsScreen.java
@@ -57,7 +57,7 @@ public class VideoSettingsScreen extends OptionsSubScreen {
             i2 = optional.map(monitor::getVideoModeIndex).orElse(-1);
         }
 
-        OptionInstance<Integer> optionInstance = new OptionInstance("options.fullscreen.resolution", OptionInstance.noTooltip(), (component, integer) -> {
+        OptionInstance<Integer> optionInstance = new OptionInstance<>("options.fullscreen.resolution", OptionInstance.noTooltip(), (component, integer) -> {
             if (monitor == null) {
                 return Component.translatable("options.fullscreen.unavailable");
             } else if (integer == -1) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
index 4d31f7ed45f166df9a1f2fb834e2ee4636839ed6..0cb646fbde9e89c3c2047787ce785969028e2cf1 100644
--- a/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/achievement/StatsScreen.java
@@ -412,11 +412,11 @@ public class StatsScreen extends Screen implements StatsUpdateListener {
                     i = 0;
                     i2 = 0;
                 } else if (ItemStatisticsList.this.blockColumns.contains(ItemStatisticsList.this.sortColumn)) {
-                    StatType<Block> statType = ItemStatisticsList.this.sortColumn;
+                    StatType<Block> statType = (StatType<Block>) ItemStatisticsList.this.sortColumn;
                     i = item instanceof BlockItem ? StatsScreen.this.stats.getValue(statType, ((BlockItem)item).getBlock()) : -1;
                     i2 = item2 instanceof BlockItem ? StatsScreen.this.stats.getValue(statType, ((BlockItem)item2).getBlock()) : -1;
                 } else {
-                    StatType<Item> statType2 = ItemStatisticsList.this.sortColumn;
+                    StatType<Item> statType2 = (StatType<Item>) ItemStatisticsList.this.sortColumn;
                     i = StatsScreen.this.stats.getValue(statType2, item);
                     i2 = StatsScreen.this.stats.getValue(statType2, item2);
                 }
diff --git a/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementTabType.java b/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementTabType.java
index d40c007d2642bc31f88483b6ab5c6e32ba7b5911..3c8dda905991c18fd7cdd862c604e2ef7aee2863 100644
--- a/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementTabType.java
+++ b/src/main/java/net/minecraft/client/gui/screens/advancements/AdvancementTabType.java
@@ -102,21 +102,6 @@ enum AdvancementTabType {
         return d > (double)i4 && d < (double)(i4 + this.width) && d2 > (double)i5 && d2 < (double)(i5 + this.height);
     }
 
-    static record Sprites(ResourceLocation a, ResourceLocation b, ResourceLocation c) {
-        private final ResourceLocation first;
-        private final ResourceLocation middle;
-        private final ResourceLocation last;
-
-        public ResourceLocation first() {
-            return this.first;
-        }
-
-        public ResourceLocation middle() {
-            return this.middle;
-        }
-
-        public ResourceLocation last() {
-            return this.last;
-        }
+    static record Sprites(ResourceLocation first, ResourceLocation middle, ResourceLocation last) {
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
index db99ddbb4cc3ebef84b5d97611f2062ae58786ae..c90d26db4f000909b8a3831e9a0ceec8b5c3c379 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/CommandBlockEditScreen.java
@@ -32,7 +32,7 @@ public class CommandBlockEditScreen extends AbstractCommandBlockEditScreen {
 
     protected void init() {
         super.init();
-        this.modeButton = this.addRenderableWidget(CycleButton.builder((mode) -> {
+        this.modeButton = this.addRenderableWidget(CycleButton.<CommandBlockEntity.Mode>builder((mode) -> {
             MutableComponent var10000;
             switch(mode) {
             case SEQUENCE:
@@ -86,4 +86,4 @@ public class CommandBlockEditScreen extends AbstractCommandBlockEditScreen {
     protected void populateAndSendPacket(BaseCommandBlock baseCommandBlock) {
         this.minecraft.getConnection().send(new ServerboundSetCommandBlockPacket(BlockPos.containing(baseCommandBlock.getPosition()), this.commandEdit.getValue(), this.mode, baseCommandBlock.isTrackOutput(), this.conditional, this.autoexec));
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java b/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
index 8c5672e480f7de41073b65ed38e612dce571df8a..c9e90a93561d0129d0a3ed00e77808245e8567ed 100644
--- a/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/inventory/StructureBlockEditScreen.java
@@ -109,7 +109,7 @@ public class StructureBlockEditScreen extends Screen {
             }
 
         }).bounds(this.width / 2 + 4 + 100, 185, 50, 20).build());
-        this.addRenderableWidget(CycleButton.builder((structureMode) -> Component.translatable("structure_block.mode." + structureMode.getSerializedName())).withValues(DEFAULT_MODES, ALL_MODES).displayOnlyValue().withInitialValue(this.initialMode).create(this.width / 2 - 4 - 150, 185, 50, 20, Component.literal("MODE"), (cycleButton, structureMode) -> {
+        this.addRenderableWidget(CycleButton.<StructureMode>builder((structureMode) -> Component.translatable("structure_block.mode." + structureMode.getSerializedName())).withValues(DEFAULT_MODES, ALL_MODES).displayOnlyValue().withInitialValue(this.initialMode).create(this.width / 2 - 4 - 150, 185, 50, 20, Component.literal("MODE"), (cycleButton, structureMode) -> {
             this.structure.setMode(structureMode);
             this.updateMode(structureMode);
         }));
diff --git a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
index f89460b57701704e596cd53f91deb396b841f868..b06d1a46e1b9fc17f4104bb3b4215e6192360cae 100644
--- a/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/packs/PackSelectionScreen.java
@@ -132,10 +132,10 @@ public class PackSelectionScreen extends Screen {
         String s = packEntry == null ? "" : packEntry.getPackId();
         transferableSelectionList.setSelected((TransferableSelectionList.PackEntry)null);
         stream.forEach((entry) -> {
-            TransferableSelectionList.PackEntry packEntry = new TransferableSelectionList.PackEntry(this.minecraft, transferableSelectionList, entry);
-            transferableSelectionList.children().add(packEntry);
+            TransferableSelectionList.PackEntry packEntryIn = new TransferableSelectionList.PackEntry(this.minecraft, transferableSelectionList, entry);
+            transferableSelectionList.children().add(packEntryIn);
             if (entry.getId().equals(s)) {
-                transferableSelectionList.setSelected(packEntry);
+                transferableSelectionList.setSelected(packEntryIn);
             }
 
         });
@@ -255,8 +255,8 @@ public class PackSelectionScreen extends Screen {
                 }
 
                 if (!set.isEmpty()) {
-                    String s = (String)extractPackNames(set).collect(Collectors.joining(", "));
-                    this.minecraft.setScreen(new AlertScreen(() -> this.minecraft.setScreen(this), Component.translatable("pack.dropRejected.title"), Component.translatable("pack.dropRejected.message", s)));
+                    String packNames = (String)extractPackNames(set).collect(Collectors.joining(", "));
+                    this.minecraft.setScreen(new AlertScreen(() -> this.minecraft.setScreen(this), Component.translatable("pack.dropRejected.title"), Component.translatable("pack.dropRejected.message", packNames)));
                     return;
                 }
             }
@@ -283,8 +283,8 @@ public class PackSelectionScreen extends Screen {
                         break label69;
                     }
 
-                    String s = pack.getId();
-                    ResourceLocation resourceLocation = new ResourceLocation("minecraft", "pack/" + Util.sanitizeName(s, ResourceLocation::validPathChar) + "/" + Hashing.sha1().hashUnencodedChars(s) + "/icon");
+                    String packId = pack.getId();
+                    ResourceLocation resourceLocation = new ResourceLocation("minecraft", "pack/" + Util.sanitizeName(packId, ResourceLocation::validPathChar) + "/" + Hashing.sha1().hashUnencodedChars(packId) + "/icon");
                     InputStream inputStream = (InputStream)ioSupplier.get();
 
                     try {
@@ -419,4 +419,4 @@ public class PackSelectionScreen extends Screen {
             this.watcher.close();
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/screens/reporting/ChatReportScreen.java b/src/main/java/net/minecraft/client/gui/screens/reporting/ChatReportScreen.java
index 5f3e582facadf33be12de5d149790fa46767c7c2..70cf10cd9f672a9e2103a98f431fd090af2c6603 100644
--- a/src/main/java/net/minecraft/client/gui/screens/reporting/ChatReportScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/reporting/ChatReportScreen.java
@@ -47,8 +47,8 @@ public class ChatReportScreen extends AbstractReportScreen<ChatReport.Builder> {
                 this.reportBuilder = builder;
                 this.onReportChanged();
             }))).width(280).build());
-        this.selectReasonButton = Button.builder(SELECT_REASON, (button) -> this.minecraft.setScreen(new ReportReasonSelectionScreen(this, this.reportBuilder.reason(), (reportReason) -> {
-                this.reportBuilder.setReason(reportReason);
+        this.selectReasonButton = Button.builder(SELECT_REASON, (button) -> this.minecraft.setScreen(new ReportReasonSelectionScreen(this, this.reportBuilder.reason(), (reportReasonIn) -> {
+                this.reportBuilder.setReason(reportReasonIn);
                 this.onReportChanged();
             }))).width(280).build();
         this.layout.addChild(CommonLayouts.labeledElement(this.font, this.selectReasonButton, OBSERVED_WHAT_LABEL));
@@ -95,4 +95,4 @@ public class ChatReportScreen extends AbstractReportScreen<ChatReport.Builder> {
     public boolean mouseReleased(double d, double d2, int i) {
         return super.mouseReleased(d, d2, i) ? true : this.commentBox.mouseReleased(d, d2, i);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/screens/reporting/ChatSelectionScreen.java b/src/main/java/net/minecraft/client/gui/screens/reporting/ChatSelectionScreen.java
index 2fe99bce07137484a0d442b463955d6f934de8ba..cda76248a04e30ce49455432bbb80ad3cb803b97 100644
--- a/src/main/java/net/minecraft/client/gui/screens/reporting/ChatSelectionScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/reporting/ChatSelectionScreen.java
@@ -253,21 +253,10 @@ public class ChatSelectionScreen extends Screen {
             }
         }
 
-        static record Heading(UUID a, ChatSelectionScreen.ChatSelectionList.Entry b) {
-            private final UUID sender;
-            private final ChatSelectionScreen.ChatSelectionList.Entry entry;
-
+        static record Heading(UUID sender, ChatSelectionScreen.ChatSelectionList.Entry entry) {
             public boolean canCombine(ChatSelectionScreen.ChatSelectionList.Heading heading) {
                 return heading.sender.equals(this.sender);
             }
-
-            public UUID sender() {
-                return this.sender;
-            }
-
-            public ChatSelectionScreen.ChatSelectionList.Entry entry() {
-                return this.entry;
-            }
         }
 
         public class MessageEntry extends ChatSelectionScreen.ChatSelectionList.Entry {
diff --git a/src/main/java/net/minecraft/client/gui/screens/reporting/ReportReasonSelectionScreen.java b/src/main/java/net/minecraft/client/gui/screens/reporting/ReportReasonSelectionScreen.java
index 0c6a11a37cfcdc0ccda9b99ff81b0c0bad0c805d..281709940532354eb6947ac8912efe94d09a9efb 100644
--- a/src/main/java/net/minecraft/client/gui/screens/reporting/ReportReasonSelectionScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/reporting/ReportReasonSelectionScreen.java
@@ -53,9 +53,9 @@ public class ReportReasonSelectionScreen extends Screen {
             }, "https://aka.ms/aboutjavareporting", true))).bounds(i, this.buttonTop(), 150, 20).build());
         int i2 = this.width / 2 + 5;
         this.addRenderableWidget(Button.builder(CommonComponents.GUI_DONE, (button) -> {
-            ReportReasonSelectionScreen.ReasonSelectionList.Entry entry = this.reasonSelectionList.getSelected();
-            if (entry != null) {
-                this.onSelectedReason.accept(entry.getReason());
+            ReportReasonSelectionScreen.ReasonSelectionList.Entry entryIn = this.reasonSelectionList.getSelected();
+            if (entryIn != null) {
+                this.onSelectedReason.accept(entryIn.getReason());
             }
 
             this.minecraft.setScreen(this.lastScreen);
diff --git a/src/main/java/net/minecraft/client/gui/screens/social/SocialInteractionsPlayerList.java b/src/main/java/net/minecraft/client/gui/screens/social/SocialInteractionsPlayerList.java
index d2c89d9acaf666e534d32c4a5f3bae911f02f623..d0994e25d07a38804837818cbc7498aba3cbec64 100644
--- a/src/main/java/net/minecraft/client/gui/screens/social/SocialInteractionsPlayerList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/social/SocialInteractionsPlayerList.java
@@ -73,9 +73,9 @@ public class SocialInteractionsPlayerList extends ContainerObjectSelectionList<P
                 GameProfile gameProfile = (GameProfile)var4.next();
                 if (flag) {
                     playerEntry = (PlayerEntry)map.computeIfAbsent(gameProfile.getId(), (uuid) -> {
-                        PlayerEntry playerEntry = new PlayerEntry(this.minecraft, this.socialInteractionsScreen, gameProfile.getId(), gameProfile.getName(), this.minecraft.getSkinManager().lookupInsecure(gameProfile), true);
-                        playerEntry.setRemoved(true);
-                        return playerEntry;
+                        PlayerEntry playerEntryIn = new PlayerEntry(this.minecraft, this.socialInteractionsScreen, gameProfile.getId(), gameProfile.getName(), this.minecraft.getSkinManager().lookupInsecure(gameProfile), true);
+                        playerEntryIn.setRemoved(true);
+                        return playerEntryIn;
                     });
                     break;
                 }
@@ -104,7 +104,7 @@ public class SocialInteractionsPlayerList extends ContainerObjectSelectionList<P
     }
 
     private void sortPlayerEntries() {
-        this.players.sort(Comparator.comparing((playerEntry) -> {
+        this.players.sort(Comparator.comparing((PlayerEntry playerEntry) -> {
             if (this.minecraft.isLocalPlayer(playerEntry.getPlayerId())) {
                 return 0;
             } else if (this.minecraft.getReportingContext().hasDraftReportFor(playerEntry.getPlayerId())) {
@@ -179,4 +179,4 @@ public class SocialInteractionsPlayerList extends ContainerObjectSelectionList<P
         }
 
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/screens/telemetry/TelemetryEventWidget.java b/src/main/java/net/minecraft/client/gui/screens/telemetry/TelemetryEventWidget.java
index d7489256d9992992fee32714504a849f097aaf10..120f693d4f66a075b79a555acc34f0ccf374cfec 100644
--- a/src/main/java/net/minecraft/client/gui/screens/telemetry/TelemetryEventWidget.java
+++ b/src/main/java/net/minecraft/client/gui/screens/telemetry/TelemetryEventWidget.java
@@ -114,17 +114,7 @@ public class TelemetryEventWidget extends AbstractScrollWidget {
         return this.width - this.totalInnerPadding();
     }
 
-    static record Content(Layout a, Component b) {
-        private final Layout container;
-        private final Component narration;
-
-        public Layout container() {
-            return this.container;
-        }
-
-        public Component narration() {
-            return this.narration;
-        }
+    static record Content(Layout container, Component narration) {
     }
 
     static class ContentBuilder {
@@ -162,4 +152,4 @@ public class TelemetryEventWidget extends AbstractScrollWidget {
             return new TelemetryEventWidget.Content(this.layout, this.narration);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
index 2964fbef3ec7c0439559c5ff1a91d38e9c2e6840..b662559dac2b7f007a51d8b8afaf66667fff8c9e 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
@@ -117,7 +117,7 @@ public class CreateWorldScreen extends Screen {
         queueLoadScreen(minecraft, PREPARING_WORLD_DATA);
         PackRepository packRepository = new PackRepository(new ServerPacksSource(minecraft.directoryValidator()));
         WorldLoader.InitConfig initConfig = createDefaultLoadConfig(packRepository, WorldDataConfiguration.DEFAULT);
-        CompletableFuture<WorldCreationContext> completableFuture = WorldLoader.load(initConfig, (dataLoadContext) -> new WorldLoader.DataLoadOutput(new CreateWorldScreen.DataPackReloadCookie(new WorldGenSettings(WorldOptions.defaultWithRandomSeed(), WorldPresets.createNormalWorldDimensions(dataLoadContext.datapackWorldgen())), dataLoadContext.dataConfiguration()), dataLoadContext.datapackDimensions()), (closeableResourceManager, reloadableServerResources, layeredRegistryAccess, dataPackReloadCookie) -> {
+        CompletableFuture<WorldCreationContext> completableFuture = WorldLoader.load(initConfig, (dataLoadContext) -> new WorldLoader.DataLoadOutput<>(new CreateWorldScreen.DataPackReloadCookie(new WorldGenSettings(WorldOptions.defaultWithRandomSeed(), WorldPresets.createNormalWorldDimensions(dataLoadContext.datapackWorldgen())), dataLoadContext.dataConfiguration()), dataLoadContext.datapackDimensions()), (closeableResourceManager, reloadableServerResources, layeredRegistryAccess, dataPackReloadCookie) -> {
             closeableResourceManager.close();
             return new WorldCreationContext(dataPackReloadCookie.worldGenSettings(), layeredRegistryAccess, reloadableServerResources, dataPackReloadCookie.dataConfiguration());
         }, Util.backgroundExecutor(), minecraft);
@@ -320,7 +320,7 @@ public class CreateWorldScreen extends Screen {
     private void applyNewPackConfig(PackRepository packRepository, WorldDataConfiguration worldDataConfiguration, Consumer<WorldDataConfiguration> consumer) {
         this.minecraft.forceSetScreen(new GenericDirtMessageScreen(Component.translatable("dataPack.validation.working")));
         WorldLoader.InitConfig initConfig = createDefaultLoadConfig(packRepository, worldDataConfiguration);
-        WorldLoader.load(initConfig, (dataLoadContext) -> {
+        WorldLoader.<DataPackReloadCookie, WorldCreationContext>load(initConfig, (dataLoadContext) -> {
             if (dataLoadContext.datapackWorldgen().registryOrThrow(Registries.WORLD_PRESET).size() == 0) {
                 throw new IllegalStateException("Needs at least one world preset to continue");
             } else if (dataLoadContext.datapackWorldgen().registryOrThrow(Registries.BIOME).size() == 0) {
@@ -331,7 +331,7 @@ public class CreateWorldScreen extends Screen {
                 DataResult<JsonElement> dataResult = WorldGenSettings.encode(dynamicOps, worldCreationContext.options(), worldCreationContext.selectedDimensions()).setLifecycle(Lifecycle.stable());
                 DynamicOps<JsonElement> dynamicOps2 = RegistryOps.create(JsonOps.INSTANCE, dataLoadContext.datapackWorldgen());
                 WorldGenSettings worldGenSettings = (WorldGenSettings)dataResult.flatMap((jsonElement) -> WorldGenSettings.CODEC.parse(dynamicOps2, jsonElement)).getOrThrow(false, Util.prefix("Error parsing worldgen settings after loading data packs: ", LOGGER::error));
-                return new WorldLoader.DataLoadOutput(new CreateWorldScreen.DataPackReloadCookie(worldGenSettings, dataLoadContext.dataConfiguration()), dataLoadContext.datapackDimensions());
+                return new WorldLoader.DataLoadOutput<>(new CreateWorldScreen.DataPackReloadCookie(worldGenSettings, dataLoadContext.dataConfiguration()), dataLoadContext.datapackDimensions());
             }
         }, (closeableResourceManager, reloadableServerResources, layeredRegistryAccess, dataPackReloadCookie) -> {
             closeableResourceManager.close();
@@ -518,17 +518,7 @@ public class CreateWorldScreen extends Screen {
         }
     }
 
-    static record DataPackReloadCookie(WorldGenSettings a, WorldDataConfiguration b) {
-        private final WorldGenSettings worldGenSettings;
-        private final WorldDataConfiguration dataConfiguration;
-
-        public WorldGenSettings worldGenSettings() {
-            return this.worldGenSettings;
-        }
-
-        public WorldDataConfiguration dataConfiguration() {
-            return this.dataConfiguration;
-        }
+    static record DataPackReloadCookie(WorldGenSettings worldGenSettings, WorldDataConfiguration dataConfiguration) {
     }
 
     class GameTab extends GridLayoutTab {
@@ -546,7 +536,7 @@ public class CreateWorldScreen extends Screen {
             CreateWorldScreen.this.uiState.addListener((worldCreationUiState) -> this.nameEdit.setTooltip(Tooltip.create(Component.translatable("selectWorld.targetFolder", Component.literal(worldCreationUiState.getTargetFolder()).withStyle(ChatFormatting.ITALIC)))));
             CreateWorldScreen.this.setInitialFocus(this.nameEdit);
             rowHelper.addChild(CommonLayouts.labeledElement(CreateWorldScreen.this.font, this.nameEdit, CreateWorldScreen.NAME_LABEL), rowHelper.newCellSettings().alignHorizontallyCenter());
-            CycleButton<WorldCreationUiState.SelectedGameMode> cycleButton = rowHelper.addChild(CycleButton.builder((selectedGameMode) -> selectedGameMode.displayName).withValues(WorldCreationUiState.SelectedGameMode.SURVIVAL, WorldCreationUiState.SelectedGameMode.HARDCORE, WorldCreationUiState.SelectedGameMode.CREATIVE).create(0, 0, 210, 20, CreateWorldScreen.GAME_MODEL_LABEL, (cycleButtonx, selectedGameMode) -> CreateWorldScreen.this.uiState.setGameMode(selectedGameMode)), layoutSettings);
+            CycleButton<WorldCreationUiState.SelectedGameMode> cycleButton = rowHelper.addChild(CycleButton.<WorldCreationUiState.SelectedGameMode>builder((selectedGameMode) -> selectedGameMode.displayName).withValues(WorldCreationUiState.SelectedGameMode.SURVIVAL, WorldCreationUiState.SelectedGameMode.HARDCORE, WorldCreationUiState.SelectedGameMode.CREATIVE).create(0, 0, 210, 20, CreateWorldScreen.GAME_MODEL_LABEL, (cycleButtonx, selectedGameMode) -> CreateWorldScreen.this.uiState.setGameMode(selectedGameMode)), layoutSettings);
             CreateWorldScreen.this.uiState.addListener((worldCreationUiState) -> {
                 cycleButton.setValue(worldCreationUiState.getGameMode());
                 cycleButton.active = !worldCreationUiState.isDebug();
@@ -661,4 +651,4 @@ public class CreateWorldScreen extends Screen {
             return ((WorldCreationUiState.WorldTypeEntry)cycleButton.getValue()).isAmplified() ? CommonComponents.joinForNarration(cycleButton.createDefaultNarrationMessage(), AMPLIFIED_HELP_TEXT) : cycleButton.createDefaultNarrationMessage();
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
index d9ef59734a33d025939ceaeccacc9d8201608eef..3685cda873b204fdef7ff0f89f8d0fc22a3ab0a8 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/EditGameRulesScreen.java
@@ -224,7 +224,7 @@ public class EditGameRulesScreen extends Screen {
                     List<FormattedCharSequence> list;
                     String s3;
                     if (I18n.exists(s2)) {
-                        Builder<FormattedCharSequence> builder = ImmutableList.builder().add(component2.getVisualOrderText());
+                        Builder<FormattedCharSequence> builder = ImmutableList.<FormattedCharSequence>builder().add(component2.getVisualOrderText());
                         Component component4 = Component.translatable(s2);
                         EditGameRulesScreen.this.font.split(component4, 150).forEach(builder::add);
                         list = builder.add(component3.getVisualOrderText()).build();
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/SwitchGrid.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/SwitchGrid.java
index f13e78d1dd2f8d511ff71a2e562956700ebacd73..0825b40dddb73f46ac9bd890d9cbb695d11bac60 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/SwitchGrid.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/SwitchGrid.java
@@ -91,25 +91,10 @@ class SwitchGrid {
         }
     }
 
-    static record InfoUnderneathSettings(int a, boolean b) {
-        final int maxInfoRows;
-        final boolean alwaysMaxHeight;
-
-        public int maxInfoRows() {
-            return this.maxInfoRows;
-        }
-
-        public boolean alwaysMaxHeight() {
-            return this.alwaysMaxHeight;
-        }
+    static record InfoUnderneathSettings(int maxInfoRows, boolean alwaysMaxHeight) {
     }
 
-    static record LabeledSwitch(CycleButton<Boolean> a, BooleanSupplier b, @Nullable BooleanSupplier c) {
-        private final CycleButton<Boolean> button;
-        private final BooleanSupplier stateSupplier;
-        @Nullable
-        private final BooleanSupplier isActiveCondition;
-
+    static record LabeledSwitch(CycleButton<Boolean> button, BooleanSupplier stateSupplier, @Nullable BooleanSupplier isActiveCondition) {
         public void refreshState() {
             this.button.setValue(this.stateSupplier.getAsBoolean());
             if (this.isActiveCondition != null) {
@@ -117,19 +102,6 @@ class SwitchGrid {
             }
 
         }
-
-        public CycleButton<Boolean> button() {
-            return this.button;
-        }
-
-        public BooleanSupplier stateSupplier() {
-            return this.stateSupplier;
-        }
-
-        @Nullable
-        public BooleanSupplier isActiveCondition() {
-            return this.isActiveCondition;
-        }
     }
 
     public static class SwitchBuilder {
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldCreationContext.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldCreationContext.java
index 10ae2d88e355338f9e87bcf7be2e84e30bd6b391..65f27a439f835223b5b33f6c4f23e9f6696d93b7 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldCreationContext.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldCreationContext.java
@@ -14,14 +14,7 @@ import net.minecraft.world.level.levelgen.WorldDimensions;
 import net.minecraft.world.level.levelgen.WorldGenSettings;
 import net.minecraft.world.level.levelgen.WorldOptions;
 
-public record WorldCreationContext(WorldOptions a, Registry<LevelStem> b, WorldDimensions c, LayeredRegistryAccess<RegistryLayer> d, ReloadableServerResources e, WorldDataConfiguration f) {
-    private final WorldOptions options;
-    private final Registry<LevelStem> datapackDimensions;
-    private final WorldDimensions selectedDimensions;
-    private final LayeredRegistryAccess<RegistryLayer> worldgenRegistries;
-    private final ReloadableServerResources dataPackResources;
-    private final WorldDataConfiguration dataConfiguration;
-
+public record WorldCreationContext(WorldOptions options, Registry<LevelStem> datapackDimensions, WorldDimensions selectedDimensions, LayeredRegistryAccess<RegistryLayer> worldgenRegistries, ReloadableServerResources dataPackResources, WorldDataConfiguration dataConfiguration) {
     public WorldCreationContext(WorldGenSettings worldGenSettings, LayeredRegistryAccess<RegistryLayer> layeredRegistryAccess, ReloadableServerResources reloadableServerResources, WorldDataConfiguration worldDataConfiguration) {
         this(worldGenSettings.options(), worldGenSettings.dimensions(), layeredRegistryAccess, reloadableServerResources, worldDataConfiguration);
     }
@@ -46,30 +39,6 @@ public record WorldCreationContext(WorldOptions a, Registry<LevelStem> b, WorldD
         return this.worldgenRegistries.compositeAccess();
     }
 
-    public WorldOptions options() {
-        return this.options;
-    }
-
-    public Registry<LevelStem> datapackDimensions() {
-        return this.datapackDimensions;
-    }
-
-    public WorldDimensions selectedDimensions() {
-        return this.selectedDimensions;
-    }
-
-    public LayeredRegistryAccess<RegistryLayer> worldgenRegistries() {
-        return this.worldgenRegistries;
-    }
-
-    public ReloadableServerResources dataPackResources() {
-        return this.dataPackResources;
-    }
-
-    public WorldDataConfiguration dataConfiguration() {
-        return this.dataConfiguration;
-    }
-
     @FunctionalInterface
     public interface DimensionsUpdater extends BiFunction<RegistryAccess.Frozen, WorldDimensions, WorldDimensions> {
     }
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldCreationUiState.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldCreationUiState.java
index 3e765211a69442beaf5a2b4e332ba578075c1ffc..5730c8d94d7329ac37244a3db5820e932d232ca8 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldCreationUiState.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldCreationUiState.java
@@ -278,22 +278,15 @@ public class WorldCreationUiState {
         }
     }
 
-    public static record WorldTypeEntry(@Nullable Holder<WorldPreset> a) {
-        @Nullable
-        private final Holder<WorldPreset> preset;
+    public static record WorldTypeEntry(@Nullable Holder<WorldPreset> preset) {
         private static final Component CUSTOM_WORLD_DESCRIPTION = Component.translatable("generator.custom");
 
         public Component describePreset() {
-            return (Component)Optional.ofNullable(this.preset).flatMap(Holder::unwrapKey).map((resourceKey) -> Component.translatable(resourceKey.location().toLanguageKey("generator"))).orElse(CUSTOM_WORLD_DESCRIPTION);
+            return (Component)Optional.ofNullable(this.preset).flatMap(Holder::unwrapKey).<Component>map((resourceKey) -> Component.translatable(resourceKey.location().toLanguageKey("generator"))).orElse(CUSTOM_WORLD_DESCRIPTION);
         }
 
         public boolean isAmplified() {
             return Optional.ofNullable(this.preset).flatMap(Holder::unwrapKey).filter((resourceKey) -> resourceKey.equals(WorldPresets.AMPLIFIED)).isPresent();
         }
-
-        @Nullable
-        public Holder<WorldPreset> preset() {
-            return this.preset;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldOpenFlows.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldOpenFlows.java
index cf51c4354a5fbf91cf456efde2a6aa20d92e6ff7..6662ee640da813b79675b937031399d05944b94a 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldOpenFlows.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldOpenFlows.java
@@ -135,35 +135,20 @@ public class WorldOpenFlows {
         }, WorldStem::new);
     }
 
+    record Data(LevelSettings levelSettings, WorldOptions options, Registry<LevelStem> existingDimensions) {
+    }
+
     public Pair<LevelSettings, WorldCreationContext> recreateWorldData(LevelStorageSource.LevelStorageAccess levelStorageAccess) throws Exception {
         PackRepository packRepository = ServerPacksSource.createPackRepository(levelStorageAccess);
         WorldLoader.PackConfig packConfig = this.getPackConfigFromLevelData(levelStorageAccess, false, packRepository);
         return this.loadWorldDataBlocking(packConfig, (dataLoadContext) -> {
             DynamicOps<Tag> dynamicOps = RegistryOps.create(NbtOps.INSTANCE, dataLoadContext.datapackWorldgen());
-            Registry<LevelStem> registry = (new MappedRegistry(Registries.LEVEL_STEM, Lifecycle.stable())).freeze();
+            Registry<LevelStem> registry = new MappedRegistry<>(Registries.LEVEL_STEM, Lifecycle.stable()).freeze();
             Pair<WorldData, WorldDimensions.Complete> pair = levelStorageAccess.getDataTag(dynamicOps, dataLoadContext.dataConfiguration(), registry, dataLoadContext.datapackWorldgen().allRegistriesLifecycle());
             if (pair == null) {
                 throw new IllegalStateException("Failed to load world");
             } else {
-                record Data(LevelSettings a, WorldOptions b, Registry<LevelStem> c) {
-                    final LevelSettings levelSettings;
-                    final WorldOptions options;
-                    final Registry<LevelStem> existingDimensions;
-
-                    public LevelSettings levelSettings() {
-                        return this.levelSettings;
-                    }
-
-                    public WorldOptions options() {
-                        return this.options;
-                    }
-
-                    public Registry<LevelStem> existingDimensions() {
-                        return this.existingDimensions;
-                    }
-                }
-
-                return new WorldLoader.DataLoadOutput(new Data(((WorldData)pair.getFirst()).getLevelSettings(), ((WorldData)pair.getFirst()).worldGenOptions(), ((WorldDimensions.Complete)pair.getSecond()).dimensions()), dataLoadContext.datapackDimensions());
+                return new WorldLoader.DataLoadOutput<>(new Data(pair.getFirst().getLevelSettings(), pair.getFirst().worldGenOptions(), pair.getSecond().dimensions()), dataLoadContext.datapackDimensions());
             }
         }, (closeableResourceManager, reloadableServerResources, layeredRegistryAccess, var3) -> {
             closeableResourceManager.close();
diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
index 3fbf3df3ae27236968483ebbd0738c6e70038555..4d8c16b341f870b03afa03e7d7898dd22f4f3f3e 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
@@ -436,10 +436,10 @@ public class WorldSelectionList extends ObjectSelectionList<WorldSelectionList.E
                         Component component = Component.translatable(s2, this.summary.getWorldVersionName(), SharedConstants.getCurrentVersion().getName());
                         this.minecraft.setScreen(new BackupConfirmScreen(this.screen, (flag, flag2) -> {
                             if (flag) {
-                                String s = this.summary.getLevelId();
+                                String levelId = this.summary.getLevelId();
 
                                 try {
-                                    LevelStorageSource.LevelStorageAccess levelStorageAccess = this.minecraft.getLevelSource().validateAndCreateAccess(s);
+                                    LevelStorageSource.LevelStorageAccess levelStorageAccess = this.minecraft.getLevelSource().validateAndCreateAccess(levelId);
 
                                     try {
                                         EditWorldScreen.makeBackupAndShowToast(levelStorageAccess);
@@ -459,8 +459,8 @@ public class WorldSelectionList extends ObjectSelectionList<WorldSelectionList.E
                                         levelStorageAccess.close();
                                     }
                                 } catch (IOException var9) {
-                                    SystemToast.onWorldAccessFailure(this.minecraft, s);
-                                    WorldSelectionList.LOGGER.error("Failed to backup level {}", s, var9);
+                                    SystemToast.onWorldAccessFailure(this.minecraft, levelId);
+                                    WorldSelectionList.LOGGER.error("Failed to backup level {}", levelId, var9);
                                 } catch (ContentValidationException var10) {
                                     WorldSelectionList.LOGGER.warn("{}", var10.getMessage());
                                     this.minecraft.setScreen(NoticeWithLinkScreen.createWorldSymlinkWarningScreen(this.screen));
@@ -671,4 +671,4 @@ public class WorldSelectionList extends ObjectSelectionList<WorldSelectionList.E
             return !this.summary.isDisabled();
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/spectator/categories/TeleportToPlayerMenuCategory.java b/src/main/java/net/minecraft/client/gui/spectator/categories/TeleportToPlayerMenuCategory.java
index c1b6587599d8b19436030c24d0d72fcb86365056..3d3fd71651cdd7be878773804afc2d45407da08a 100644
--- a/src/main/java/net/minecraft/client/gui/spectator/categories/TeleportToPlayerMenuCategory.java
+++ b/src/main/java/net/minecraft/client/gui/spectator/categories/TeleportToPlayerMenuCategory.java
@@ -26,7 +26,7 @@ public class TeleportToPlayerMenuCategory implements SpectatorMenuCategory, Spec
     }
 
     public TeleportToPlayerMenuCategory(Collection<PlayerInfo> collection) {
-        this.items = collection.stream().filter((playerInfo) -> playerInfo.getGameMode() != GameType.SPECTATOR).sorted(PROFILE_ORDER).map((playerInfo) -> new PlayerMenuItem(playerInfo.getProfile())).toList();
+        this.items = collection.stream().filter((playerInfo) -> playerInfo.getGameMode() != GameType.SPECTATOR).sorted(PROFILE_ORDER).map((playerInfo) -> (SpectatorMenuItem) new PlayerMenuItem(playerInfo.getProfile())).toList();
     }
 
     public List<SpectatorMenuItem> getItems() {
diff --git a/src/main/java/net/minecraft/client/main/GameConfig.java b/src/main/java/net/minecraft/client/main/GameConfig.java
index f2cb82ab29dfd228238aa02f0c552761807edee2..ac41fcd44baf636b9570e2dc845b75b7d612d9bc 100644
--- a/src/main/java/net/minecraft/client/main/GameConfig.java
+++ b/src/main/java/net/minecraft/client/main/GameConfig.java
@@ -60,39 +60,14 @@ public class GameConfig {
         }
     }
 
-    public static record QuickPlayData(@Nullable String a, @Nullable String b, @Nullable String c, @Nullable String d) {
-        @Nullable
-        private final String path;
-        @Nullable
-        private final String singleplayer;
-        @Nullable
-        private final String multiplayer;
-        @Nullable
-        private final String realms;
-
+    public static record QuickPlayData(
+            @Nullable String path,
+            @Nullable String singleplayer,
+            @Nullable String multiplayer,
+            @Nullable String realms) {
         public boolean isEnabled() {
             return !Util.isBlank(this.singleplayer) || !Util.isBlank(this.multiplayer) || !Util.isBlank(this.realms);
         }
-
-        @Nullable
-        public String path() {
-            return this.path;
-        }
-
-        @Nullable
-        public String singleplayer() {
-            return this.singleplayer;
-        }
-
-        @Nullable
-        public String multiplayer() {
-            return this.multiplayer;
-        }
-
-        @Nullable
-        public String realms() {
-            return this.realms;
-        }
     }
 
     public static class UserData {
@@ -108,4 +83,4 @@ public class GameConfig {
             this.proxy = proxy;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientCommonPacketListenerImpl.java b/src/main/java/net/minecraft/client/multiplayer/ClientCommonPacketListenerImpl.java
index a0c3435691595d18d21d002c8acfe5e14146123b..38751763283166e2627fde31359a836f2c5435bf 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientCommonPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientCommonPacketListenerImpl.java
@@ -182,7 +182,7 @@ public abstract class ClientCommonPacketListenerImpl implements ClientCommonPack
         if (!networkPayload.isEmpty()) {
             Registry<T> registry = (Registry)this.registryAccess().registry(resourceKey).orElseThrow(() -> new IllegalStateException("Unknown registry " + resourceKey));
             Map<TagKey<T>, List<Holder<T>>> map = new HashMap();
-            TagNetworkSerialization.deserializeTagsFromNetwork(resourceKey, registry, networkPayload, map::put);
+            TagNetworkSerialization.deserializeTagsFromNetwork((ResourceKey<? extends Registry<T>>) resourceKey, registry, networkPayload, map::put);
             registry.bindTags(map);
         }
     }
@@ -239,21 +239,6 @@ public abstract class ClientCommonPacketListenerImpl implements ClientCommonPack
 
     }
 
-    static record DeferredPacket(Packet<? extends ServerboundPacketListener> a, BooleanSupplier b, long c) {
-        final Packet<? extends ServerboundPacketListener> packet;
-        private final BooleanSupplier sendCondition;
-        private final long expirationTime;
-
-        public Packet<? extends ServerboundPacketListener> packet() {
-            return this.packet;
-        }
-
-        public BooleanSupplier sendCondition() {
-            return this.sendCondition;
-        }
-
-        public long expirationTime() {
-            return this.expirationTime;
-        }
+    static record DeferredPacket(Packet<? extends ServerboundPacketListener> packet, BooleanSupplier sendCondition, long expirationTime) {
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index dd53dd8ae24050abbbfdc746c4a9c90a855dd386..3b6211e9f58810e0da8f65cfc208b9fe7ee14187 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -1111,8 +1111,8 @@ public class ClientPacketListener extends ClientCommonPacketListenerImpl impleme
             SignBlockEntity signBlockEntity = (SignBlockEntity)blockState;
             this.minecraft.player.openTextEdit(signBlockEntity, clientboundOpenSignEditorPacket.isFrontText());
         } else {
-            BlockState blockState = this.level.getBlockState(blockPos);
-            SignBlockEntity signBlockEntity2 = new SignBlockEntity(blockPos, blockState);
+            BlockState blockStateIn = this.level.getBlockState(blockPos);
+            SignBlockEntity signBlockEntity2 = new SignBlockEntity(blockPos, blockStateIn);
             signBlockEntity2.setLevel(this.level);
             this.minecraft.player.openTextEdit(signBlockEntity2, clientboundOpenSignEditorPacket.isFrontText());
         }
@@ -2162,4 +2162,4 @@ public class ClientPacketListener extends ClientCommonPacketListenerImpl impleme
     public boolean isFeatureEnabled(FeatureFlagSet featureFlagSet) {
         return featureFlagSet.isSubsetOf(this.enabledFeatures());
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/multiplayer/CommonListenerCookie.java b/src/main/java/net/minecraft/client/multiplayer/CommonListenerCookie.java
index 44d231495c263443ab82f4b63ea4c0d66629d481..6d94251939fe7c0a938f27022eefeeb231f244d5 100644
--- a/src/main/java/net/minecraft/client/multiplayer/CommonListenerCookie.java
+++ b/src/main/java/net/minecraft/client/multiplayer/CommonListenerCookie.java
@@ -7,46 +7,13 @@ import net.minecraft.client.telemetry.WorldSessionTelemetryManager;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.world.flag.FeatureFlagSet;
 
-public record CommonListenerCookie(GameProfile a, WorldSessionTelemetryManager b, RegistryAccess.Frozen c, FeatureFlagSet d, @Nullable String e, @Nullable ServerData f, @Nullable Screen g) {
-    private final GameProfile localGameProfile;
-    private final WorldSessionTelemetryManager telemetryManager;
-    private final RegistryAccess.Frozen receivedRegistries;
-    private final FeatureFlagSet enabledFeatures;
-    @Nullable
-    private final String serverBrand;
-    @Nullable
-    private final ServerData serverData;
-    @Nullable
-    private final Screen postDisconnectScreen;
-
-    public GameProfile localGameProfile() {
-        return this.localGameProfile;
-    }
-
-    public WorldSessionTelemetryManager telemetryManager() {
-        return this.telemetryManager;
-    }
-
-    public RegistryAccess.Frozen receivedRegistries() {
-        return this.receivedRegistries;
-    }
-
-    public FeatureFlagSet enabledFeatures() {
-        return this.enabledFeatures;
-    }
-
-    @Nullable
-    public String serverBrand() {
-        return this.serverBrand;
-    }
-
-    @Nullable
-    public ServerData serverData() {
-        return this.serverData;
-    }
-
-    @Nullable
-    public Screen postDisconnectScreen() {
-        return this.postDisconnectScreen;
-    }
-}
\ No newline at end of file
+public record CommonListenerCookie(
+        GameProfile localGameProfile,
+        WorldSessionTelemetryManager telemetryManager,
+        RegistryAccess.Frozen receivedRegistries,
+        FeatureFlagSet enabledFeatures,
+        @Nullable String serverBrand,
+        @Nullable ServerData serverData,
+        @Nullable Screen postDisconnectScreen
+) {
+}
diff --git a/src/main/java/net/minecraft/client/multiplayer/chat/ChatListener.java b/src/main/java/net/minecraft/client/multiplayer/chat/ChatListener.java
index f0461cc56df22aa1a668ae89944479272413b3a7..da03ddc8edcf47f6a8d3feb6edd586533c671861 100644
--- a/src/main/java/net/minecraft/client/multiplayer/chat/ChatListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/chat/ChatListener.java
@@ -195,22 +195,9 @@ public class ChatListener {
         }
     }
 
-    static record Message(@Nullable MessageSignature a, BooleanSupplier b) {
-        @Nullable
-        private final MessageSignature signature;
-        private final BooleanSupplier handler;
-
+    static record Message(@Nullable MessageSignature signature, BooleanSupplier handler) {
         public boolean accept() {
             return this.handler.getAsBoolean();
         }
-
-        @Nullable
-        public MessageSignature signature() {
-            return this.signature;
-        }
-
-        public BooleanSupplier handler() {
-            return this.handler;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/multiplayer/chat/LoggedChatMessage.java b/src/main/java/net/minecraft/client/multiplayer/chat/LoggedChatMessage.java
index d8d24418e825f69220e5cce8131c43107b9822c1..079822568cb3acc1caab7c874f7b5eb2cd2b2309 100644
--- a/src/main/java/net/minecraft/client/multiplayer/chat/LoggedChatMessage.java
+++ b/src/main/java/net/minecraft/client/multiplayer/chat/LoggedChatMessage.java
@@ -31,10 +31,7 @@ public interface LoggedChatMessage extends LoggedChatEvent {
 
     boolean canReport(UUID var1);
 
-    public static record Player(GameProfile c, PlayerChatMessage d, ChatTrustLevel e) implements LoggedChatMessage {
-        private final GameProfile profile;
-        private final PlayerChatMessage message;
-        private final ChatTrustLevel trustLevel;
+    public static record Player(GameProfile profile, PlayerChatMessage message, ChatTrustLevel trustLevel) implements LoggedChatMessage {
         public static final Codec<LoggedChatMessage.Player> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.GAME_PROFILE.fieldOf("profile").forGetter(LoggedChatMessage.Player::profile), PlayerChatMessage.MAP_CODEC.forGetter(LoggedChatMessage.Player::message), ChatTrustLevel.CODEC.optionalFieldOf("trust_level", ChatTrustLevel.SECURE).forGetter(LoggedChatMessage.Player::trustLevel)).apply(instance, LoggedChatMessage.Player::new));
         private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT);
 
@@ -74,23 +71,9 @@ public interface LoggedChatMessage extends LoggedChatEvent {
         public LoggedChatEvent.Type type() {
             return LoggedChatEvent.Type.PLAYER;
         }
-
-        public GameProfile profile() {
-            return this.profile;
-        }
-
-        public PlayerChatMessage message() {
-            return this.message;
-        }
-
-        public ChatTrustLevel trustLevel() {
-            return this.trustLevel;
-        }
     }
 
-    public static record System(Component c, Instant d) implements LoggedChatMessage {
-        private final Component message;
-        private final Instant timeStamp;
+    public static record System(Component message, Instant timeStamp) implements LoggedChatMessage {
         public static final Codec<LoggedChatMessage.System> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.COMPONENT.fieldOf("message").forGetter(LoggedChatMessage.System::message), ExtraCodecs.INSTANT_ISO8601.fieldOf("time_stamp").forGetter(LoggedChatMessage.System::timeStamp)).apply(instance, LoggedChatMessage.System::new));
 
         public Component toContentComponent() {
@@ -104,13 +87,5 @@ public interface LoggedChatMessage extends LoggedChatEvent {
         public LoggedChatEvent.Type type() {
             return LoggedChatEvent.Type.SYSTEM;
         }
-
-        public Component message() {
-            return this.message;
-        }
-
-        public Instant timeStamp() {
-            return this.timeStamp;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/multiplayer/chat/report/AbuseReportSender.java b/src/main/java/net/minecraft/client/multiplayer/chat/report/AbuseReportSender.java
index e20063ac15730912dc1ca667c0d304fe662433ec..d1c4652f3bcba02ec0736e6f6bbb9562d8029d3b 100644
--- a/src/main/java/net/minecraft/client/multiplayer/chat/report/AbuseReportSender.java
+++ b/src/main/java/net/minecraft/client/multiplayer/chat/report/AbuseReportSender.java
@@ -33,9 +33,7 @@ public interface AbuseReportSender {
         }
     }
 
-    public static record Services(ReportEnvironment a, UserApiService b) implements AbuseReportSender {
-        private final ReportEnvironment environment;
-        private final UserApiService userApiService;
+    public static record Services(ReportEnvironment environment, UserApiService userApiService) implements AbuseReportSender {
         private static final Component SERVICE_UNAVAILABLE_TEXT = Component.translatable("gui.abuseReport.send.service_unavailable");
         private static final Component HTTP_ERROR_TEXT = Component.translatable("gui.abuseReport.send.http_error");
         private static final Component JSON_ERROR_TEXT = Component.translatable("gui.abuseReport.send.json_error");
@@ -87,13 +85,5 @@ public interface AbuseReportSender {
         public AbuseReportLimits reportLimits() {
             return this.userApiService.getAbuseReportLimits();
         }
-
-        public ReportEnvironment environment() {
-            return this.environment;
-        }
-
-        public UserApiService userApiService() {
-            return this.userApiService;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/multiplayer/chat/report/ChatReportContextBuilder.java b/src/main/java/net/minecraft/client/multiplayer/chat/report/ChatReportContextBuilder.java
index 76c3e85420544be292c1b53e55f6658c79490199..f580a3d4875e2aad6ee8ac082c34e62e63c7befc 100644
--- a/src/main/java/net/minecraft/client/multiplayer/chat/report/ChatReportContextBuilder.java
+++ b/src/main/java/net/minecraft/client/multiplayer/chat/report/ChatReportContextBuilder.java
@@ -29,11 +29,11 @@ public class ChatReportContextBuilder {
             LoggedChatEvent flag = chatLog.lookup(i);
             if (flag instanceof LoggedChatMessage.Player) {
                 LoggedChatMessage.Player player = (LoggedChatMessage.Player)flag;
-                boolean flag = this.acceptContext(player.message());
+                boolean b = this.acceptContext(player.message());
                 if (intSortedSet.remove(i)) {
                     this.trackContext(player.message());
                     handler.accept(i, player);
-                } else if (flag) {
+                } else if (b) {
                     handler.accept(i, player);
                 }
             }
diff --git a/src/main/java/net/minecraft/client/multiplayer/chat/report/Report.java b/src/main/java/net/minecraft/client/multiplayer/chat/report/Report.java
index 873cd02d2589e49dfc67a34c7248d915409655ba..ca39ad27717455b67d7c86089a5eb6eb4c62ef97 100644
--- a/src/main/java/net/minecraft/client/multiplayer/chat/report/Report.java
+++ b/src/main/java/net/minecraft/client/multiplayer/chat/report/Report.java
@@ -74,8 +74,7 @@ public abstract class Report {
         public abstract Either<Report.Result, Report.CannotBuildReason> build(ReportingContext var1);
     }
 
-    public static record CannotBuildReason(Component e) {
-        private final Component message;
+    public static record CannotBuildReason(Component message) {
         public static final Report.CannotBuildReason NO_REASON = new Report.CannotBuildReason(Component.translatable("gui.abuseReport.send.no_reason"));
         public static final Report.CannotBuildReason NO_REPORTED_MESSAGES = new Report.CannotBuildReason(Component.translatable("gui.chatReport.send.no_reported_messages"));
         public static final Report.CannotBuildReason TOO_MANY_MESSAGES = new Report.CannotBuildReason(Component.translatable("gui.chatReport.send.too_many_messages"));
@@ -90,21 +89,6 @@ public abstract class Report {
         }
     }
 
-    public static record Result(UUID a, ReportType b, AbuseReport c) {
-        private final UUID id;
-        private final ReportType reportType;
-        private final AbuseReport report;
-
-        public UUID id() {
-            return this.id;
-        }
-
-        public ReportType reportType() {
-            return this.reportType;
-        }
-
-        public AbuseReport report() {
-            return this.report;
-        }
+    public static record Result(UUID id, ReportType reportType, AbuseReport report) {
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/multiplayer/chat/report/ReportEnvironment.java b/src/main/java/net/minecraft/client/multiplayer/chat/report/ReportEnvironment.java
index 611accfe40de7c6a28f8271ca37fc9bac02d999a..c6161c68ed61b0087913ed6e827f4a36a2745a8f 100644
--- a/src/main/java/net/minecraft/client/multiplayer/chat/report/ReportEnvironment.java
+++ b/src/main/java/net/minecraft/client/multiplayer/chat/report/ReportEnvironment.java
@@ -8,11 +8,7 @@ import java.util.Locale;
 import javax.annotation.Nullable;
 import net.minecraft.client.Minecraft;
 
-public record ReportEnvironment(String a, @Nullable ReportEnvironment.Server b) {
-    private final String clientVersion;
-    @Nullable
-    private final ReportEnvironment.Server server;
-
+public record ReportEnvironment(String clientVersion, @Nullable ReportEnvironment.Server server) {
     public static ReportEnvironment local() {
         return create((ReportEnvironment.Server)null);
     }
@@ -65,39 +61,14 @@ public record ReportEnvironment(String a, @Nullable ReportEnvironment.Server b)
         return stringBuilder.toString();
     }
 
-    public String clientVersion() {
-        return this.clientVersion;
-    }
-
-    @Nullable
-    public ReportEnvironment.Server server() {
-        return this.server;
-    }
-
     public interface Server {
-        public static record Realm(long a, int b) implements ReportEnvironment.Server {
-            private final long realmId;
-            private final int slotId;
-
+        public static record Realm(long realmId, int slotId) implements ReportEnvironment.Server {
             public Realm(RealmsServer realmsServer) {
                 this(realmsServer.id, realmsServer.activeSlot);
             }
-
-            public long realmId() {
-                return this.realmId;
-            }
-
-            public int slotId() {
-                return this.slotId;
-            }
         }
 
-        public static record ThirdParty(String a) implements ReportEnvironment.Server {
-            final String ip;
-
-            public String ip() {
-                return this.ip;
-            }
+        public static record ThirdParty(String ip) implements ReportEnvironment.Server {
         }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/multiplayer/chat/report/ReportingContext.java b/src/main/java/net/minecraft/client/multiplayer/chat/report/ReportingContext.java
index 5c18dcfa746c01ad605857afe4b5a6e04114b5f1..b6e80c83deb6bcff63a93c4b0d7d87a62a14d2c6 100644
--- a/src/main/java/net/minecraft/client/multiplayer/chat/report/ReportingContext.java
+++ b/src/main/java/net/minecraft/client/multiplayer/chat/report/ReportingContext.java
@@ -25,7 +25,7 @@ public final class ReportingContext {
     }
 
     public static ReportingContext create(ReportEnvironment reportEnvironment, UserApiService userApiService) {
-        ChatLog chatLog = new ChatLog(1024);
+        ChatLog chatLog = new ChatLog(LOG_CAPACITY);
         AbuseReportSender abuseReportSender = AbuseReportSender.create(reportEnvironment, userApiService);
         return new ReportingContext(abuseReportSender, reportEnvironment, chatLog);
     }
diff --git a/src/main/java/net/minecraft/client/particle/ParticleEngine.java b/src/main/java/net/minecraft/client/particle/ParticleEngine.java
index a0db9c3e1b3146cf8a703c141dc102bb41802221..6520ea9b97e27c3331cd31d5fde94d91c4ce4bc6 100644
--- a/src/main/java/net/minecraft/client/particle/ParticleEngine.java
+++ b/src/main/java/net/minecraft/client/particle/ParticleEngine.java
@@ -208,24 +208,15 @@ public class ParticleEngine implements PreparableReloadListener {
         this.providers.put(BuiltInRegistries.PARTICLE_TYPE.getId(particleType), spriteParticleRegistration.create(mutableSpriteSet));
     }
 
+    record ParticleDefinition(ResourceLocation id, Optional<List<ResourceLocation>> sprites) {
+    }
+
     public CompletableFuture<Void> reload(PreparableReloadListener.PreparationBarrier preparationBarrier, ResourceManager resourceManager, ProfilerFiller profilerFiller, ProfilerFiller profilerFiller2, Executor executor, Executor executor2) {
         CompletableFuture<List<ParticleDefinition>> completableFuture = CompletableFuture.supplyAsync(() -> PARTICLE_LISTER.listMatchingResources(resourceManager), executor).thenCompose((map) -> {
             List<CompletableFuture<ParticleDefinition>> list = new ArrayList(map.size());
             map.forEach((resourceLocation, resource) -> {
                 ResourceLocation resourceLocation2 = PARTICLE_LISTER.fileToId(resourceLocation);
                 list.add(CompletableFuture.supplyAsync(() -> {
-                    record ParticleDefinition(ResourceLocation a, Optional<List<ResourceLocation>> b) {
-                        private final ResourceLocation id;
-                        private final Optional<List<ResourceLocation>> sprites;
-
-                        public ResourceLocation id() {
-                            return this.id;
-                        }
-
-                        public Optional<List<ResourceLocation>> sprites() {
-                            return this.sprites;
-                        }
-                    }
 
                     return new ParticleDefinition(resourceLocation2, this.loadParticleDescription(resourceLocation2, resource));
                 }, executor));
diff --git a/src/main/java/net/minecraft/client/particle/SculkChargeParticle.java b/src/main/java/net/minecraft/client/particle/SculkChargeParticle.java
index c633481d90ea4d549116c636b7666a9ea965b28a..0b004c62f1c3461c99ca50717fe60e0be76bd730 100644
--- a/src/main/java/net/minecraft/client/particle/SculkChargeParticle.java
+++ b/src/main/java/net/minecraft/client/particle/SculkChargeParticle.java
@@ -28,9 +28,7 @@ public class SculkChargeParticle extends TextureSheetParticle {
         this.setSpriteFromAge(this.sprites);
     }
 
-    public static record Provider(SpriteSet a) implements ParticleProvider<SculkChargeParticleOptions> {
-        private final SpriteSet sprite;
-
+    public static record Provider(SpriteSet sprite) implements ParticleProvider<SculkChargeParticleOptions> {
         public Particle createParticle(SculkChargeParticleOptions sculkChargeParticleOptions, ClientLevel clientLevel, double d, double d2, double d3, double d4, double d5, double d6) {
             SculkChargeParticle sculkChargeParticle = new SculkChargeParticle(clientLevel, d, d2, d3, d4, d5, d6, this.sprite);
             sculkChargeParticle.setAlpha(1.0F);
@@ -40,9 +38,5 @@ public class SculkChargeParticle extends TextureSheetParticle {
             sculkChargeParticle.setLifetime(clientLevel.random.nextInt(12) + 8);
             return sculkChargeParticle;
         }
-
-        public SpriteSet sprite() {
-            return this.sprite;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/particle/SculkChargePopParticle.java b/src/main/java/net/minecraft/client/particle/SculkChargePopParticle.java
index 52db10576dd947e0b3d2de7fa07773d95c8d836b..1a21c035711e66440c5b9e0007a8f7b6ae05df8f 100644
--- a/src/main/java/net/minecraft/client/particle/SculkChargePopParticle.java
+++ b/src/main/java/net/minecraft/client/particle/SculkChargePopParticle.java
@@ -28,9 +28,7 @@ public class SculkChargePopParticle extends TextureSheetParticle {
         this.setSpriteFromAge(this.sprites);
     }
 
-    public static record Provider(SpriteSet a) implements ParticleProvider<SimpleParticleType> {
-        private final SpriteSet sprite;
-
+    public static record Provider(SpriteSet sprite) implements ParticleProvider<SimpleParticleType> {
         public Particle createParticle(SimpleParticleType simpleParticleType, ClientLevel clientLevel, double d, double d2, double d3, double d4, double d5, double d6) {
             SculkChargePopParticle sculkChargePopParticle = new SculkChargePopParticle(clientLevel, d, d2, d3, d4, d5, d6, this.sprite);
             sculkChargePopParticle.setAlpha(1.0F);
@@ -38,9 +36,5 @@ public class SculkChargePopParticle extends TextureSheetParticle {
             sculkChargePopParticle.setLifetime(clientLevel.random.nextInt(4) + 6);
             return sculkChargePopParticle;
         }
-
-        public SpriteSet sprite() {
-            return this.sprite;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/quickplay/QuickPlayLog.java b/src/main/java/net/minecraft/client/quickplay/QuickPlayLog.java
index 98d76b6cda015eaca67d359e2357227b47d31b97..60e80cd81b4341be2061f893a5d2f346bdc43016 100644
--- a/src/main/java/net/minecraft/client/quickplay/QuickPlayLog.java
+++ b/src/main/java/net/minecraft/client/quickplay/QuickPlayLog.java
@@ -71,42 +71,12 @@ public class QuickPlayLog {
         }
     }
 
-    static record QuickPlayEntry(QuickPlayLog.QuickPlayWorld b, Instant c, GameType d) {
-        private final QuickPlayLog.QuickPlayWorld quickPlayWorld;
-        private final Instant lastPlayedTime;
-        private final GameType gamemode;
+    static record QuickPlayEntry(QuickPlayLog.QuickPlayWorld quickPlayWorld, Instant lastPlayedTime, GameType gamemode) {
         public static final Codec<QuickPlayLog.QuickPlayEntry> CODEC = RecordCodecBuilder.create((instance) -> instance.group(QuickPlayLog.QuickPlayWorld.MAP_CODEC.forGetter(QuickPlayLog.QuickPlayEntry::quickPlayWorld), ExtraCodecs.INSTANT_ISO8601.fieldOf("lastPlayedTime").forGetter(QuickPlayLog.QuickPlayEntry::lastPlayedTime), GameType.CODEC.fieldOf("gamemode").forGetter(QuickPlayLog.QuickPlayEntry::gamemode)).apply(instance, QuickPlayLog.QuickPlayEntry::new));
-
-        public QuickPlayLog.QuickPlayWorld quickPlayWorld() {
-            return this.quickPlayWorld;
-        }
-
-        public Instant lastPlayedTime() {
-            return this.lastPlayedTime;
-        }
-
-        public GameType gamemode() {
-            return this.gamemode;
-        }
     }
 
-    static record QuickPlayWorld(QuickPlayLog.Type b, String c, String d) {
-        private final QuickPlayLog.Type type;
-        private final String id;
-        private final String name;
+    static record QuickPlayWorld(QuickPlayLog.Type type, String id, String name) {
         public static final MapCodec<QuickPlayLog.QuickPlayWorld> MAP_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(QuickPlayLog.Type.CODEC.fieldOf("type").forGetter(QuickPlayLog.QuickPlayWorld::type), ExtraCodecs.ESCAPED_STRING.fieldOf("id").forGetter(QuickPlayLog.QuickPlayWorld::id), Codec.STRING.fieldOf("name").forGetter(QuickPlayLog.QuickPlayWorld::name)).apply(instance, QuickPlayLog.QuickPlayWorld::new));
-
-        public QuickPlayLog.Type type() {
-            return this.type;
-        }
-
-        public String id() {
-            return this.id;
-        }
-
-        public String name() {
-            return this.name;
-        }
     }
 
     public static enum Type implements StringRepresentable {
@@ -125,4 +95,4 @@ public class QuickPlayLog {
             return this.name;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
index 6c53c832c57576120886f708af70b64547cafe37..f7b4bddd8643b17b11fc1596b271439cd418872f 100644
--- a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
@@ -151,4 +151,4 @@ public class BlockEntityWithoutLevelRenderer implements ResourceManagerReloadLis
 
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/renderer/GameRenderer.java b/src/main/java/net/minecraft/client/renderer/GameRenderer.java
index 5d76dac7d08af41347a7e7b25b4e1e3588f73c0b..2c953392fb67bd941bd1ba0b236445706dde3f22 100644
--- a/src/main/java/net/minecraft/client/renderer/GameRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/GameRenderer.java
@@ -672,23 +672,22 @@ public class GameRenderer implements AutoCloseable {
 
     private void bobHurt(PoseStack poseStack, float f) {
         Entity f2 = this.minecraft.getCameraEntity();
-        if (f2 instanceof LivingEntity) {
-            LivingEntity livingEntity = (LivingEntity)f2;
-            float f2 = (float)livingEntity.hurtTime - f;
+        if (f2 instanceof LivingEntity livingEntity) {
+            float f2x = (float)livingEntity.hurtTime - f;
             if (livingEntity.isDeadOrDying()) {
                 float f3 = Math.min((float)livingEntity.deathTime + f, 20.0F);
                 poseStack.mulPose(Axis.ZP.rotationDegrees(40.0F - 8000.0F / (f3 + 200.0F)));
             }
 
-            if (f2 < 0.0F) {
+            if (f2x < 0.0F) {
                 return;
             }
 
-            f2 /= (float)livingEntity.hurtDuration;
-            f2 = Mth.sin(f2 * f2 * f2 * f2 * (float)Math.PI);
+            float var8 = f2x / (float)livingEntity.hurtDuration;
+            float var9 = Mth.sin(var8 * var8 * var8 * var8 * (float) Math.PI);
             float f4 = livingEntity.getHurtDir();
             poseStack.mulPose(Axis.YP.rotationDegrees(-f4));
-            float f5 = (float)((double)(-f2) * 14.0D * this.minecraft.options.damageTiltStrength().get());
+            float f5 = (float)((double)(-var9) * 14.0 * this.minecraft.options.damageTiltStrength().get());
             poseStack.mulPose(Axis.ZP.rotationDegrees(f5));
             poseStack.mulPose(Axis.YP.rotationDegrees(f4));
         }
@@ -1408,21 +1407,10 @@ public class GameRenderer implements AutoCloseable {
         return rendertypeGuiGhostRecipeOverlayShader;
     }
 
-    public static record ResourceCache(ResourceProvider a, Map<ResourceLocation, Resource> b) implements ResourceProvider {
-        private final ResourceProvider original;
-        private final Map<ResourceLocation, Resource> cache;
-
+    public static record ResourceCache(ResourceProvider original, Map<ResourceLocation, Resource> cache) implements ResourceProvider {
         public Optional<Resource> getResource(ResourceLocation resourceLocation) {
             Resource resource = (Resource)this.cache.get(resourceLocation);
             return resource != null ? Optional.of(resource) : this.original.getResource(resourceLocation);
         }
-
-        public ResourceProvider original() {
-            return this.original;
-        }
-
-        public Map<ResourceLocation, Resource> cache() {
-            return this.cache;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
index a80226f88e47c73d1f24563f6465d0e026abebeb..cf9abe467f4f15921a8730f2e8ca6ac30e6a5dac 100644
--- a/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/LevelRenderer.java
@@ -475,7 +475,7 @@ public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseab
             if (this.minecraft.getResourcePackRepository().getSelectedIds().size() > 1) {
                 Component component = (Component)this.minecraft.getResourceManager().listPacks().findFirst().map((packResources) -> Component.literal(packResources.packId())).orElse(null);
                 this.minecraft.options.graphicsMode().set(GraphicsStatus.FANCY);
-                this.minecraft.clearResourcePacksOnError(transparencyShaderException, component, (Minecraft.GameLoadCookie)null);
+                this.minecraft.clearResourcePacksOnError(transparencyShaderException, component, null);
             } else {
                 CrashReport crashReport = this.minecraft.fillReport(new CrashReport(s2, transparencyShaderException));
                 this.minecraft.options.graphicsMode().set(GraphicsStatus.FANCY);
@@ -1495,13 +1495,13 @@ public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseab
                     this.renderEndSky(poseStack);
                 } else if (this.minecraft.level.effects().skyType() == DimensionSpecialEffects.SkyType.NORMAL) {
                     Vec3 vec3 = this.level.getSkyColor(this.minecraft.gameRenderer.getMainCamera().getPosition(), f);
-                    float f2 = (float)vec3.x;
+                    float f2In = (float)vec3.x;
                     float f3 = (float)vec3.y;
                     float f4 = (float)vec3.z;
                     FogRenderer.levelFogColor();
                     BufferBuilder bufferBuilder = Tesselator.getInstance().getBuilder();
                     RenderSystem.depthMask(false);
-                    RenderSystem.setShaderColor(f2, f3, f4, 1.0F);
+                    RenderSystem.setShaderColor(f2In, f3, f4, 1.0F);
                     ShaderInstance shaderInstance = RenderSystem.getShader();
                     this.skyBuffer.bind();
                     this.skyBuffer.drawWithShader(poseStack.last().pose(), matrix4f, shaderInstance);
@@ -2607,9 +2607,8 @@ public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseab
             break;
         case 3008:
             BlockState blockState2 = Block.stateById(i2);
-            Block blockState3 = blockState2.getBlock();
-            if (blockState3 instanceof BrushableBlock) {
-                BrushableBlock brushableBlock = (BrushableBlock)blockState3;
+            Block block = blockState2.getBlock();
+            if (block instanceof BrushableBlock brushableBlock) {
                 this.level.playLocalSound(blockPos, brushableBlock.getBrushCompletedSound(), SoundSource.PLAYERS, 1.0F, 1.0F, false);
             }
 
@@ -2724,4 +2723,4 @@ public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseab
             super(s, throwable);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/renderer/SectionOcclusionGraph.java b/src/main/java/net/minecraft/client/renderer/SectionOcclusionGraph.java
index 8ba35dff5e84fffb2fa7b30ddeaeaa60c0b4627a..6b255bad3aa57efe1b26f7cb9f93a486075c48cb 100644
--- a/src/main/java/net/minecraft/client/renderer/SectionOcclusionGraph.java
+++ b/src/main/java/net/minecraft/client/renderer/SectionOcclusionGraph.java
@@ -389,38 +389,16 @@ public class SectionOcclusionGraph {
         return ((SectionOcclusionGraph.GraphState)this.currentGraph.get()).storage.sectionToNodeMap.get(renderSection);
     }
 
-    static record GraphEvents(LongSet a, BlockingQueue<SectionRenderDispatcher.RenderSection> b) {
-        final LongSet chunksWhichReceivedNeighbors;
-        final BlockingQueue<SectionRenderDispatcher.RenderSection> sectionsToPropagateFrom;
-
+    static record GraphEvents(LongSet chunksWhichReceivedNeighbors, BlockingQueue<SectionRenderDispatcher.RenderSection> sectionsToPropagateFrom) {
         public GraphEvents() {
             this(new LongOpenHashSet(), new LinkedBlockingQueue());
         }
-
-        public LongSet chunksWhichReceivedNeighbors() {
-            return this.chunksWhichReceivedNeighbors;
-        }
-
-        public BlockingQueue<SectionRenderDispatcher.RenderSection> sectionsToPropagateFrom() {
-            return this.sectionsToPropagateFrom;
-        }
     }
 
-    static record GraphState(SectionOcclusionGraph.GraphStorage a, SectionOcclusionGraph.GraphEvents b) {
-        final SectionOcclusionGraph.GraphStorage storage;
-        final SectionOcclusionGraph.GraphEvents events;
-
+    static record GraphState(SectionOcclusionGraph.GraphStorage storage, SectionOcclusionGraph.GraphEvents events) {
         public GraphState(int i) {
             this(new SectionOcclusionGraph.GraphStorage(i), new SectionOcclusionGraph.GraphEvents());
         }
-
-        public SectionOcclusionGraph.GraphStorage storage() {
-            return this.storage;
-        }
-
-        public SectionOcclusionGraph.GraphEvents events() {
-            return this.events;
-        }
     }
 
     static class GraphStorage {
@@ -505,4 +483,4 @@ public class SectionOcclusionGraph {
             return i >= 0 && i < this.nodes.length ? this.nodes[i] : null;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
index e654f130d54683fd0d195b91e80d03dab67af6ed..4e427ff628fc873238742d362ec5a3ebd95aa294 100644
--- a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
@@ -312,7 +312,7 @@ public class LiquidBlockRenderer {
             floats[1] += 10.0F;
         } else if (f >= 0.0F) {
             floats[0] += f;
-            int var10002 = floats[1]++;
+            floats[1]++;
         }
 
     }
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/BlockElementRotation.java b/src/main/java/net/minecraft/client/renderer/block/model/BlockElementRotation.java
index 67141ae5f19600c5f3c7163d28dd73245b1a5351..44213b2f4922405370e13ed609bce07b13426e97 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/BlockElementRotation.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/BlockElementRotation.java
@@ -3,25 +3,5 @@ package net.minecraft.client.renderer.block.model;
 import net.minecraft.core.Direction;
 import org.joml.Vector3f;
 
-public record BlockElementRotation(Vector3f a, Direction.Axis b, float c, boolean d) {
-    private final Vector3f origin;
-    private final Direction.Axis axis;
-    private final float angle;
-    private final boolean rescale;
-
-    public Vector3f origin() {
-        return this.origin;
-    }
-
-    public Direction.Axis axis() {
-        return this.axis;
-    }
-
-    public float angle() {
-        return this.angle;
-    }
-
-    public boolean rescale() {
-        return this.rescale;
-    }
+public record BlockElementRotation(Vector3f origin, Direction.Axis axis, float angle, boolean rescale) {
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java b/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
index 9d19eb17389d892e8ca5058d15a064cf1290cb0d..af67b16483f6474a6e1ac919ceed8d4b4a9f54ce 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/multipart/KeyValueCondition.java
@@ -42,7 +42,7 @@ public class KeyValueCondition implements Condition {
                     predicate = this.getBlockStatePredicate(stateDefinition, property, s);
                 } else {
                     List<Predicate<BlockState>> list2 = list.stream().map((sx) -> this.getBlockStatePredicate(stateDefinition, property, sx)).collect(Collectors.toList());
-                    predicate = (blockState) -> list2.stream().anyMatch((predicate) -> predicate.test(blockState));
+                    predicate = (blockState) -> list2.stream().anyMatch((predicateIn) -> predicateIn.test(blockState));
                 }
 
                 return flag ? predicate.negate() : predicate;
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/BannerRenderer.java b/src/main/java/net/minecraft/client/renderer/blockentity/BannerRenderer.java
index 2a02a6325924681140a049305101d940fd628cd6..0ac605c61c870414feeeda859599fbe7eb38407f 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/BannerRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/BannerRenderer.java
@@ -107,7 +107,7 @@ public class BannerRenderer implements BlockEntityRenderer<BannerBlockEntity> {
         for(int i3 = 0; i3 < 17 && i3 < list.size(); ++i3) {
             Pair<Holder<BannerPattern>, DyeColor> pair = list.get(i3);
             float[] floats = ((DyeColor)pair.getSecond()).getTextureDiffuseColors();
-            ((Holder)pair.getFirst()).unwrapKey().map((resourceKey) -> flag ? Sheets.getBannerMaterial(resourceKey) : Sheets.getShieldMaterial(resourceKey)).ifPresent((materialx) -> modelPart.render(poseStack, materialx.buffer(multiBufferSource, RenderType::entityNoOutline), i, i2, floats[0], floats[1], floats[2], 1.0F));
+            pair.getFirst().unwrapKey().map((resourceKey) -> flag ? Sheets.getBannerMaterial(resourceKey) : Sheets.getShieldMaterial(resourceKey)).ifPresent((materialx) -> modelPart.render(poseStack, materialx.buffer(multiBufferSource, RenderType::entityNoOutline), i, i2, floats[0], floats[1], floats[2], 1.0F));
         }
 
     }
diff --git a/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java
index 3b30a4270cbe8dc2fdc6284732c758c42e572b3e..a9b5a538d15f4c662226581f881b085940fde4f3 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/BeeDebugRenderer.java
@@ -300,16 +300,6 @@ public class BeeDebugRenderer implements DebugRenderer.SimpleDebugRenderer {
         DebugRenderer.getTargetedEntity(this.minecraft.getCameraEntity(), 8).ifPresent((entity) -> this.lastLookedAtUuid = entity.getUUID());
     }
 
-    static record HiveDebugInfo(HiveDebugPayload.HiveInfo a, long b) {
-        final HiveDebugPayload.HiveInfo info;
-        private final long lastSeen;
-
-        public HiveDebugPayload.HiveInfo info() {
-            return this.info;
-        }
-
-        public long lastSeen() {
-            return this.lastSeen;
-        }
+    static record HiveDebugInfo(HiveDebugPayload.HiveInfo info, long lastSeen) {
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
index 8713589b8e59bf785fc31d504d4338eb418bb4dd..2d1303241c15a1d4315a597cfbc86308f06bdbb3 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
@@ -102,17 +102,17 @@ public class ChunkDebugRenderer implements DebugRenderer.SimpleDebugRenderer {
                 if (serverLevel == null) {
                     return ImmutableMap.of();
                 } else {
-                    Builder<ChunkPos, String> builder = ImmutableMap.builder();
+                    Builder<ChunkPos, String> builderIn = ImmutableMap.builder();
                     ServerChunkCache serverChunkCache = serverLevel.getChunkSource();
 
                     for(int i3 = i - 12; i3 <= i + 12; ++i3) {
                         for(int i4 = i2 - 12; i4 <= i2 + 12; ++i4) {
                             ChunkPos chunkPos = new ChunkPos(i3, i4);
-                            builder.put(chunkPos, "Server: " + serverChunkCache.getChunkDebugData(chunkPos));
+                            builderIn.put(chunkPos, "Server: " + serverChunkCache.getChunkDebugData(chunkPos));
                         }
                     }
 
-                    return builder.build();
+                    return builderIn.build();
                 }
             });
         }
diff --git a/src/main/java/net/minecraft/client/renderer/debug/GameEventListenerRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/GameEventListenerRenderer.java
index 632b71190e8c4747a3e2a66ba6b0cdf3295db4fc..b411d22ebb3c2ab877a8564c441815a74fd5b362 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/GameEventListenerRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/GameEventListenerRenderer.java
@@ -101,26 +101,10 @@ public class GameEventListenerRenderer implements DebugRenderer.SimpleDebugRende
         this.trackedListeners.add(new GameEventListenerRenderer.TrackedListener(positionSource, i));
     }
 
-    static record TrackedGameEvent(long a, ResourceKey<GameEvent> b, Vec3 c) {
-        private final long timeStamp;
-        final ResourceKey<GameEvent> gameEvent;
-        final Vec3 position;
-
+    static record TrackedGameEvent(long timeStamp, ResourceKey<GameEvent> gameEvent, Vec3 position) {
         public boolean isExpired() {
             return Util.getMillis() - this.timeStamp > 3000L;
         }
-
-        public long timeStamp() {
-            return this.timeStamp;
-        }
-
-        public ResourceKey<GameEvent> gameEvent() {
-            return this.gameEvent;
-        }
-
-        public Vec3 position() {
-            return this.position;
-        }
     }
 
     static class TrackedListener implements GameEventListener {
@@ -152,4 +136,4 @@ public class GameEventListenerRenderer implements DebugRenderer.SimpleDebugRende
             return false;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
index 9a9d63f1f34bfc8b6c22ee733d6bacd670daced2..ed23fd8a5c167c7f68f01a05be0742ac79a95be4 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/GoalSelectorDebugRenderer.java
@@ -54,16 +54,6 @@ public class GoalSelectorDebugRenderer implements DebugRenderer.SimpleDebugRende
 
     }
 
-    static record EntityGoalInfo(BlockPos a, List<GoalDebugPayload.DebugGoal> b) {
-        final BlockPos entityPos;
-        final List<GoalDebugPayload.DebugGoal> goals;
-
-        public BlockPos entityPos() {
-            return this.entityPos;
-        }
-
-        public List<GoalDebugPayload.DebugGoal> goals() {
-            return this.goals;
-        }
+    static record EntityGoalInfo(BlockPos entityPos, List<GoalDebugPayload.DebugGoal> goals) {
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
index aa11c2882840fa4cecbd488d43c9ccc34f6c707a..7e91201a6769018d5f5cd732d82b042b695da201 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
@@ -92,7 +92,7 @@ public class EntityRenderDispatcher implements ResourceManagerReloadListener {
             AbstractClientPlayer abstractClientPlayer = (AbstractClientPlayer)entity;
             PlayerSkin.Model model = abstractClientPlayer.getSkin().model();
             EntityRenderer<? extends Player> entityRenderer = (EntityRenderer)this.playerRenderers.get(model);
-            return entityRenderer != null ? entityRenderer : (EntityRenderer)this.playerRenderers.get(PlayerSkin.Model.WIDE);
+            return entityRenderer != null ? (EntityRenderer<? super T>) entityRenderer : (EntityRenderer)this.playerRenderers.get(PlayerSkin.Model.WIDE);
         } else {
             return (EntityRenderer)this.renderers.get(entity.getType());
         }
@@ -364,4 +364,4 @@ public class EntityRenderDispatcher implements ResourceManagerReloadListener {
         this.renderers = EntityRenderers.createEntityRenderers(context);
         this.playerRenderers = EntityRenderers.createPlayerRenderers(context);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
index ba358bfa5a4dc1c3f797608f6a8d9400fdd3a37b..d65dfdc2feb5da5e9ced68177e2173c60d21dea9 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/EntityRenderers.java
@@ -19,7 +19,7 @@ import org.slf4j.Logger;
 public class EntityRenderers {
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final Map<EntityType<?>, EntityRendererProvider<?>> PROVIDERS = new Object2ObjectOpenHashMap();
-    private static final Map<PlayerSkin.Model, EntityRendererProvider<AbstractClientPlayer>> PLAYER_PROVIDERS = Map.of(PlayerSkin.Model.WIDE, (EntityRendererProvider<>)(context) -> new PlayerRenderer(context, false), PlayerSkin.Model.SLIM, (EntityRendererProvider<>)(context) -> new PlayerRenderer(context, true));
+    private static final Map<PlayerSkin.Model, EntityRendererProvider<AbstractClientPlayer>> PLAYER_PROVIDERS = Map.of(PlayerSkin.Model.WIDE, (EntityRendererProvider)(context) -> new PlayerRenderer(context, false), PlayerSkin.Model.SLIM, (EntityRendererProvider)(context) -> new PlayerRenderer(context, true));
 
     private static <T extends Entity> void register(EntityType<? extends T> entityType, EntityRendererProvider<T> entityRendererProvider) {
         PROVIDERS.put(entityType, entityRendererProvider);
@@ -187,4 +187,4 @@ public class EntityRenderers {
         register(EntityType.ZOMBIE_VILLAGER, ZombieVillagerRenderer::new);
         register(EntityType.ZOMBIFIED_PIGLIN, (context) -> new PiglinRenderer(context, ModelLayers.ZOMBIFIED_PIGLIN, ModelLayers.ZOMBIFIED_PIGLIN_INNER_ARMOR, ModelLayers.ZOMBIFIED_PIGLIN_OUTER_ARMOR, true));
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/HumanoidArmorLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/HumanoidArmorLayer.java
index de90e3ba3a709a0a62c468f748ed140c594823d4..f2d8efae76c608add83c1933db9c177c6ed03984 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/HumanoidArmorLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/HumanoidArmorLayer.java
@@ -47,26 +47,26 @@ public class HumanoidArmorLayer<T extends LivingEntity, M extends HumanoidModel<
 
     private void renderArmorPiece(PoseStack poseStack, MultiBufferSource multiBufferSource, T livingEntity, EquipmentSlot equipmentSlot, int i, A humanoidModel) {
         ItemStack itemStack = livingEntity.getItemBySlot(equipmentSlot);
-        Item flag = itemStack.getItem();
-        if (flag instanceof ArmorItem) {
-            ArmorItem armorItem = (ArmorItem)flag;
+        Item item = itemStack.getItem();
+        if (item instanceof ArmorItem) {
+            ArmorItem armorItem = (ArmorItem)item;
             if (armorItem.getEquipmentSlot() == equipmentSlot) {
                 this.getParentModel().copyPropertiesTo(humanoidModel);
                 this.setPartVisibility(humanoidModel, equipmentSlot);
-                boolean flag = this.usesInnerModel(equipmentSlot);
+                boolean usesInnerModel = this.usesInnerModel(equipmentSlot);
                 if (armorItem instanceof DyeableArmorItem) {
                     DyeableArmorItem dyeableArmorItem = (DyeableArmorItem)armorItem;
                     int i2 = dyeableArmorItem.getColor(itemStack);
                     float f = (float)(i2 >> 16 & 255) / 255.0F;
                     float f2 = (float)(i2 >> 8 & 255) / 255.0F;
                     float f3 = (float)(i2 & 255) / 255.0F;
-                    this.renderModel(poseStack, multiBufferSource, i, armorItem, humanoidModel, flag, f, f2, f3, (String)null);
-                    this.renderModel(poseStack, multiBufferSource, i, armorItem, humanoidModel, flag, 1.0F, 1.0F, 1.0F, "overlay");
+                    this.renderModel(poseStack, multiBufferSource, i, armorItem, humanoidModel, usesInnerModel, f, f2, f3, (String)null);
+                    this.renderModel(poseStack, multiBufferSource, i, armorItem, humanoidModel, usesInnerModel, 1.0F, 1.0F, 1.0F, "overlay");
                 } else {
-                    this.renderModel(poseStack, multiBufferSource, i, armorItem, humanoidModel, flag, 1.0F, 1.0F, 1.0F, (String)null);
+                    this.renderModel(poseStack, multiBufferSource, i, armorItem, humanoidModel, usesInnerModel, 1.0F, 1.0F, 1.0F, (String)null);
                 }
 
-                ArmorTrim.getTrim(livingEntity.level().registryAccess(), itemStack, true).ifPresent((armorTrim) -> this.renderTrim(armorItem.getMaterial(), poseStack, multiBufferSource, i, armorTrim, humanoidModel, flag));
+                ArmorTrim.getTrim(livingEntity.level().registryAccess(), itemStack, true).ifPresent((armorTrim) -> this.renderTrim(armorItem.getMaterial(), poseStack, multiBufferSource, i, armorTrim, humanoidModel, usesInnerModel));
                 if (itemStack.hasFoil()) {
                     this.renderGlint(poseStack, multiBufferSource, i, humanoidModel);
                 }
@@ -126,4 +126,4 @@ public class HumanoidArmorLayer<T extends LivingEntity, M extends HumanoidModel<
         String s2 = "textures/models/armor/" + armorItem.getMaterial().getName() + "_layer_" + (flag ? 2 : 1) + (s == null ? "" : "_" + s) + ".png";
         return (ResourceLocation)ARMOR_LOCATION_CACHE.computeIfAbsent(s2, ResourceLocation::new);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java b/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java
index a3970405d1ba349b58da4970949ae4c17df59115..dc0ff1c5dba90b9140e285092bfec0d7e3f1539f 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/layers/VillagerProfessionLayer.java
@@ -57,7 +57,7 @@ public class VillagerProfessionLayer<T extends LivingEntity & VillagerDataHolder
             renderColoredCutoutModel(entityModel, resourceLocation, poseStack, multiBufferSource, i, livingEntity, 1.0F, 1.0F, 1.0F);
             entityModel.hatVisible(true);
             if (villagerProfession != VillagerProfession.NONE && !livingEntity.isBaby()) {
-                ResourceLocation resourceLocation2 = this.getResourceLocation("profession", BuiltInRegistries.VILLAGER_PROFESSION.getKey((T)villagerProfession));
+                ResourceLocation resourceLocation2 = this.getResourceLocation("profession", BuiltInRegistries.VILLAGER_PROFESSION.getKey(villagerProfession));
                 renderColoredCutoutModel(entityModel, resourceLocation2, poseStack, multiBufferSource, i, livingEntity, 1.0F, 1.0F, 1.0F);
                 if (villagerProfession != VillagerProfession.NITWIT) {
                     ResourceLocation resourceLocation3 = this.getResourceLocation("profession_level", (ResourceLocation)LEVEL_LOCATIONS.get(Mth.clamp(villagerData.getLevel(), 1, LEVEL_LOCATIONS.size())));
diff --git a/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java b/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
index 7ac3160a5c0c7c688a96e15eff0eec6dee816b86..c7e1de2ed533d4327de15aafd45a2eb3fdc997d8 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/HttpTexture.java
@@ -108,9 +108,9 @@ public class HttpTexture extends SimpleTexture {
                             }
 
                             Minecraft.getInstance().execute(() -> {
-                                NativeImage nativeImage = this.load(inputStream);
-                                if (nativeImage != null) {
-                                    this.loadCallback(nativeImage);
+                                NativeImage nativeImageIn = this.load(inputStream);
+                                if (nativeImageIn != null) {
+                                    this.loadCallback(nativeImageIn);
                                 }
 
                             });
diff --git a/src/main/java/net/minecraft/client/renderer/texture/SpriteLoader.java b/src/main/java/net/minecraft/client/renderer/texture/SpriteLoader.java
index e21d466ad43fa0e56070d6c8353de3cf9fa41b93..ce15d95281ce12a1b49b1f52ed71d4d2c0b712b8 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/SpriteLoader.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/SpriteLoader.java
@@ -83,16 +83,16 @@ public class SpriteLoader {
 
         int i10 = Math.max(stitcher.getWidth(), this.minWidth);
         int i11 = Math.max(stitcher.getHeight(), this.minHeight);
-        Map<ResourceLocation, TextureAtlasSprite> map = this.getStitchedSprites(stitcher, i10, i11);
-        TextureAtlasSprite textureAtlasSprite = (TextureAtlasSprite)map.get(MissingTextureAtlasSprite.getLocation());
+        Map<ResourceLocation, TextureAtlasSprite> mapIn = this.getStitchedSprites(stitcher, i10, i11);
+        TextureAtlasSprite textureAtlasSprite = (TextureAtlasSprite)mapIn.get(MissingTextureAtlasSprite.getLocation());
         CompletableFuture<Void> completableFuture;
         if (i8 > 0) {
-            completableFuture = CompletableFuture.runAsync(() -> map.values().forEach((textureAtlasSprite) -> textureAtlasSprite.contents().increaseMipLevel(i8)), executor);
+            completableFuture = CompletableFuture.runAsync(() -> mapIn.values().forEach((textureAtlasSpriteIn) -> textureAtlasSpriteIn.contents().increaseMipLevel(i8)), executor);
         } else {
             completableFuture = CompletableFuture.completedFuture(null);
         }
 
-        return new SpriteLoader.Preparations(i10, i11, i8, textureAtlasSprite, map, completableFuture);
+        return new SpriteLoader.Preparations(i10, i11, i8, textureAtlasSprite, mapIn, completableFuture);
     }
 
     public static CompletableFuture<List<SpriteContents>> runSpriteSuppliers(SpriteResourceLoader spriteResourceLoader, List<Function<SpriteResourceLoader, SpriteContents>> list, Executor executor) {
@@ -115,40 +115,9 @@ public class SpriteLoader {
         return map;
     }
 
-    public static record Preparations(int a, int b, int c, TextureAtlasSprite d, Map<ResourceLocation, TextureAtlasSprite> e, CompletableFuture<Void> f) {
-        private final int width;
-        private final int height;
-        private final int mipLevel;
-        private final TextureAtlasSprite missing;
-        private final Map<ResourceLocation, TextureAtlasSprite> regions;
-        private final CompletableFuture<Void> readyForUpload;
-
+    public static record Preparations(int width, int height, int mipLevel, TextureAtlasSprite missing, Map<ResourceLocation, TextureAtlasSprite> regions, CompletableFuture<Void> readyForUpload) {
         public CompletableFuture<SpriteLoader.Preparations> waitForUpload() {
             return this.readyForUpload.thenApply((void_) -> this);
         }
-
-        public int width() {
-            return this.width;
-        }
-
-        public int height() {
-            return this.height;
-        }
-
-        public int mipLevel() {
-            return this.mipLevel;
-        }
-
-        public TextureAtlasSprite missing() {
-            return this.missing;
-        }
-
-        public Map<ResourceLocation, TextureAtlasSprite> regions() {
-            return this.regions;
-        }
-
-        public CompletableFuture<Void> readyForUpload() {
-            return this.readyForUpload;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
index 5aa421018c4938d56fab82e9c225caf6e6fff243..f00411f5a00e15e46eb95b535b13d82fa1f4bd51 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
@@ -10,7 +10,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.Mth;
 
 public class Stitcher<T extends Stitcher.Entry> {
-    private static final Comparator<Stitcher.Holder<?>> HOLDER_COMPARATOR = Comparator.comparing((holder) -> -holder.height).thenComparing((holder) -> -holder.width).thenComparing((holder) -> holder.entry.name());
+    private static final Comparator<Stitcher.Holder<?>> HOLDER_COMPARATOR = Comparator.<Holder<?>, Integer>comparing((holder) -> -holder.height).thenComparing((holder) -> -holder.width).thenComparing((holder) -> holder.entry.name());
     private final int mipLevel;
     private final List<Stitcher.Holder<T>> texturesToBeStitched = new ArrayList();
     private final List<Stitcher.Region<T>> storage = new ArrayList();
@@ -117,26 +117,10 @@ public class Stitcher<T extends Stitcher.Entry> {
         ResourceLocation name();
     }
 
-    static record Holder<T extends Stitcher.Entry>(T a, int b, int c) {
-        final T entry;
-        final int width;
-        final int height;
-
+    static record Holder<T extends Stitcher.Entry>(T entry, int width, int height) {
         public Holder(T entry, int i) {
             this(entry, Stitcher.smallestFittingMinTexel(entry.width(), i), Stitcher.smallestFittingMinTexel(entry.height(), i));
         }
-
-        public T entry() {
-            return this.entry;
-        }
-
-        public int width() {
-            return this.width;
-        }
-
-        public int height() {
-            return this.height;
-        }
     }
 
     public static class Region<T extends Stitcher.Entry> {
diff --git a/src/main/java/net/minecraft/client/renderer/texture/atlas/SpriteSourceType.java b/src/main/java/net/minecraft/client/renderer/texture/atlas/SpriteSourceType.java
index 2b2bd5de392ba5fe19612ffae34b7239ecc70b2b..6a17ad6fb2794ddaf84c4ba9a7ff588304dab588 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/atlas/SpriteSourceType.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/atlas/SpriteSourceType.java
@@ -2,10 +2,5 @@ package net.minecraft.client.renderer.texture.atlas;
 
 import com.mojang.serialization.Codec;
 
-public record SpriteSourceType(Codec<? extends SpriteSource> a) {
-    private final Codec<? extends SpriteSource> codec;
-
-    public Codec<? extends SpriteSource> codec() {
-        return this.codec;
-    }
+public record SpriteSourceType(Codec<? extends SpriteSource> codec) {
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/renderer/texture/atlas/sources/PalettedPermutations.java b/src/main/java/net/minecraft/client/renderer/texture/atlas/sources/PalettedPermutations.java
index 69fa443f63474d27eac5901e94811ad6d9c79394..85c88afb6d47aa1c16dc904b973489feb29ee3a6 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/atlas/sources/PalettedPermutations.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/atlas/sources/PalettedPermutations.java
@@ -151,11 +151,7 @@ public class PalettedPermutations implements SpriteSource {
         return SpriteSources.PALETTED_PERMUTATIONS;
     }
 
-    static record PalettedSpriteSupplier(LazyLoadedImage a, Supplier<IntUnaryOperator> b, ResourceLocation c) implements SpriteSource.SpriteSupplier {
-        private final LazyLoadedImage baseImage;
-        private final Supplier<IntUnaryOperator> palette;
-        private final ResourceLocation permutationLocation;
-
+    static record PalettedSpriteSupplier(LazyLoadedImage baseImage, Supplier<IntUnaryOperator> palette, ResourceLocation permutationLocation) implements SpriteSource.SpriteSupplier {
         @Nullable
         public SpriteContents apply(SpriteResourceLoader spriteResourceLoader) {
             Object var3;
@@ -175,17 +171,5 @@ public class PalettedPermutations implements SpriteSource {
         public void discard() {
             this.baseImage.release();
         }
-
-        public LazyLoadedImage baseImage() {
-            return this.baseImage;
-        }
-
-        public Supplier<IntUnaryOperator> palette() {
-            return this.palette;
-        }
-
-        public ResourceLocation permutationLocation() {
-            return this.permutationLocation;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/renderer/texture/atlas/sources/Unstitcher.java b/src/main/java/net/minecraft/client/renderer/texture/atlas/sources/Unstitcher.java
index ede13d69361be172541d53eab26ecee386072d31..3a7b7f1e49d414d05d12b58dcd063a4bf0d57fa5 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/atlas/sources/Unstitcher.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/atlas/sources/Unstitcher.java
@@ -55,33 +55,8 @@ public class Unstitcher implements SpriteSource {
         return SpriteSources.UNSTITCHER;
     }
 
-    static record Region(ResourceLocation b, double c, double d, double e, double f) {
-        final ResourceLocation sprite;
-        final double x;
-        final double y;
-        final double width;
-        final double height;
+    static record Region(ResourceLocation sprite, double x, double y, double width, double height) {
         public static final Codec<Unstitcher.Region> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("sprite").forGetter(Unstitcher.Region::sprite), Codec.DOUBLE.fieldOf("x").forGetter(Unstitcher.Region::x), Codec.DOUBLE.fieldOf("y").forGetter(Unstitcher.Region::y), Codec.DOUBLE.fieldOf("width").forGetter(Unstitcher.Region::width), Codec.DOUBLE.fieldOf("height").forGetter(Unstitcher.Region::height)).apply(instance, Unstitcher.Region::new));
-
-        public ResourceLocation sprite() {
-            return this.sprite;
-        }
-
-        public double x() {
-            return this.x;
-        }
-
-        public double y() {
-            return this.y;
-        }
-
-        public double width() {
-            return this.width;
-        }
-
-        public double height() {
-            return this.height;
-        }
     }
 
     static class RegionInstance implements SpriteSource.SpriteSupplier {
diff --git a/src/main/java/net/minecraft/client/resources/DefaultPlayerSkin.java b/src/main/java/net/minecraft/client/resources/DefaultPlayerSkin.java
index 1196db4c110036a1b388183f46ec31130f817614..c1a3922872fe1953db0e03d76ea16ce5ff904497 100644
--- a/src/main/java/net/minecraft/client/resources/DefaultPlayerSkin.java
+++ b/src/main/java/net/minecraft/client/resources/DefaultPlayerSkin.java
@@ -22,4 +22,4 @@ public class DefaultPlayerSkin {
     private static PlayerSkin create(String s, PlayerSkin.Model model) {
         return new PlayerSkin(new ResourceLocation(s), (String)null, (ResourceLocation)null, (ResourceLocation)null, model, true);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/resources/DownloadedPackSource.java b/src/main/java/net/minecraft/client/resources/DownloadedPackSource.java
index 766768f40d33bddcbd0105ac23a58e9694e958f6..484eb3c76f10b76c2118a79d82b04e4b1d697fb5 100644
--- a/src/main/java/net/minecraft/client/resources/DownloadedPackSource.java
+++ b/src/main/java/net/minecraft/client/resources/DownloadedPackSource.java
@@ -107,8 +107,8 @@ public class DownloadedPackSource implements RepositorySource {
             }).exceptionallyCompose((throwable) -> this.clearServerPack().thenAcceptAsync((void_) -> {
                     LOGGER.warn("Pack application failed: {}, deleting file {}", throwable.getMessage(), file);
                     deleteQuietly(file);
-                }, Util.ioPool()).thenAcceptAsync((void_) -> minecraft.setScreen(new ConfirmScreen((flag) -> {
-                        if (flag) {
+                }, Util.ioPool()).thenAcceptAsync((void_) -> minecraft.setScreen(new ConfirmScreen((flagIn) -> {
+                        if (flagIn) {
                             minecraft.setScreen((Screen)null);
                         } else {
                             ClientPacketListener clientPacketListener = minecraft.getConnection();
diff --git a/src/main/java/net/minecraft/client/resources/PlayerSkin.java b/src/main/java/net/minecraft/client/resources/PlayerSkin.java
index 3e3bf7c1375d2e0a4b5b7b8d82b7a001d3b75f13..8ae101291e1b0b88f980c778222e870eaab411b9 100644
--- a/src/main/java/net/minecraft/client/resources/PlayerSkin.java
+++ b/src/main/java/net/minecraft/client/resources/PlayerSkin.java
@@ -3,44 +3,14 @@ package net.minecraft.client.resources;
 import javax.annotation.Nullable;
 import net.minecraft.resources.ResourceLocation;
 
-public record PlayerSkin(ResourceLocation a, @Nullable String b, @Nullable ResourceLocation c, @Nullable ResourceLocation d, PlayerSkin.Model e, boolean f) {
-    private final ResourceLocation texture;
-    @Nullable
-    private final String textureUrl;
-    @Nullable
-    private final ResourceLocation capeTexture;
-    @Nullable
-    private final ResourceLocation elytraTexture;
-    private final PlayerSkin.Model model;
-    private final boolean secure;
-
-    public ResourceLocation texture() {
-        return this.texture;
-    }
-
-    @Nullable
-    public String textureUrl() {
-        return this.textureUrl;
-    }
-
-    @Nullable
-    public ResourceLocation capeTexture() {
-        return this.capeTexture;
-    }
-
-    @Nullable
-    public ResourceLocation elytraTexture() {
-        return this.elytraTexture;
-    }
-
-    public PlayerSkin.Model model() {
-        return this.model;
-    }
-
-    public boolean secure() {
-        return this.secure;
-    }
-
+public record PlayerSkin(
+        ResourceLocation texture,
+        @Nullable String textureUrl,
+        @Nullable ResourceLocation capeTexture,
+        @Nullable ResourceLocation elytraTexture,
+        PlayerSkin.Model model,
+        boolean secure
+) {
     public static enum Model {
         SLIM("slim"),
         WIDE("default");
@@ -80,4 +50,4 @@ public record PlayerSkin(ResourceLocation a, @Nullable String b, @Nullable Resou
             return this.id;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/resources/SkinManager.java b/src/main/java/net/minecraft/client/resources/SkinManager.java
index 363b34e887694dad6370248f095d493536b558a4..923a79004178b8817f0fee50960c0972bda45e94 100644
--- a/src/main/java/net/minecraft/client/resources/SkinManager.java
+++ b/src/main/java/net/minecraft/client/resources/SkinManager.java
@@ -96,9 +96,7 @@ public class SkinManager {
         return (Property)Iterables.getFirst(gameProfile.getProperties().get("textures"), null);
     }
 
-    static record CacheKey(GameProfile a) {
-        private final GameProfile profile;
-
+    static record CacheKey(GameProfile profile) {
         public boolean equals(Object object) {
             if (!(object instanceof SkinManager.CacheKey)) {
                 return false;
@@ -117,10 +115,6 @@ public class SkinManager {
             Property property = SkinManager.getTextureProperty(this.profile);
             return property != null ? property.value() : null;
         }
-
-        public GameProfile profile() {
-            return this.profile;
-        }
     }
 
     static class TextureCache {
@@ -177,14 +171,12 @@ public class SkinManager {
         }
     }
 
-    static record TextureInfo(@Nullable MinecraftProfileTexture b, @Nullable MinecraftProfileTexture c, @Nullable MinecraftProfileTexture d, boolean e) {
-        @Nullable
-        private final MinecraftProfileTexture skin;
-        @Nullable
-        private final MinecraftProfileTexture cape;
-        @Nullable
-        private final MinecraftProfileTexture elytra;
-        private final boolean secure;
+    static record TextureInfo(
+            @Nullable MinecraftProfileTexture skin,
+            @Nullable MinecraftProfileTexture cape,
+            @Nullable MinecraftProfileTexture elytra,
+            boolean secure
+    ) {
         public static final SkinManager.TextureInfo EMPTY = new SkinManager.TextureInfo((MinecraftProfileTexture)null, (MinecraftProfileTexture)null, (MinecraftProfileTexture)null, true);
 
         public static SkinManager.TextureInfo unpack(Map<Type, MinecraftProfileTexture> map, boolean flag) {
@@ -210,4 +202,4 @@ public class SkinManager {
             return this.secure;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/resources/language/LanguageInfo.java b/src/main/java/net/minecraft/client/resources/language/LanguageInfo.java
index c1bb8f748a17f3879895df4a2e13183bbfeea09c..70c9b578470123683909c8d06d6eba3971b8594e 100644
--- a/src/main/java/net/minecraft/client/resources/language/LanguageInfo.java
+++ b/src/main/java/net/minecraft/client/resources/language/LanguageInfo.java
@@ -5,25 +5,10 @@ import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.network.chat.Component;
 import net.minecraft.util.ExtraCodecs;
 
-public record LanguageInfo(String b, String c, boolean d) {
-    private final String region;
-    private final String name;
-    private final boolean bidirectional;
+public record LanguageInfo(String region, String name, boolean bidirectional) {
     public static final Codec<LanguageInfo> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.NON_EMPTY_STRING.fieldOf("region").forGetter(LanguageInfo::region), ExtraCodecs.NON_EMPTY_STRING.fieldOf("name").forGetter(LanguageInfo::name), Codec.BOOL.optionalFieldOf("bidirectional", false).forGetter(LanguageInfo::bidirectional)).apply(instance, LanguageInfo::new));
 
     public Component toComponent() {
         return Component.literal(this.name + " (" + this.region + ")");
     }
-
-    public String region() {
-        return this.region;
-    }
-
-    public String name() {
-        return this.name;
-    }
-
-    public boolean bidirectional() {
-        return this.bidirectional;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/resources/metadata/animation/FrameSize.java b/src/main/java/net/minecraft/client/resources/metadata/animation/FrameSize.java
index 6c1e8a3b7c8b2d251b6d5a2e9a20bda19aefdf4b..4ecf87e6cd4da3a5b0f0d3da7e5f9ef60028e1e9 100644
--- a/src/main/java/net/minecraft/client/resources/metadata/animation/FrameSize.java
+++ b/src/main/java/net/minecraft/client/resources/metadata/animation/FrameSize.java
@@ -1,14 +1,4 @@
 package net.minecraft.client.resources.metadata.animation;
 
-public record FrameSize(int a, int b) {
-    private final int width;
-    private final int height;
-
-    public int width() {
-        return this.width;
-    }
-
-    public int height() {
-        return this.height;
-    }
+public record FrameSize(int width, int height) {
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/resources/metadata/gui/GuiMetadataSection.java b/src/main/java/net/minecraft/client/resources/metadata/gui/GuiMetadataSection.java
index c3b5bfb3901ecdb38e1122b2577ebe1bf30ba827..24c446da26a1a37236a01c1d1a103242afe851a8 100644
--- a/src/main/java/net/minecraft/client/resources/metadata/gui/GuiMetadataSection.java
+++ b/src/main/java/net/minecraft/client/resources/metadata/gui/GuiMetadataSection.java
@@ -5,13 +5,8 @@ import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.server.packs.metadata.MetadataSectionType;
 import net.minecraft.util.ExtraCodecs;
 
-public record GuiMetadataSection(GuiSpriteScaling d) {
-    private final GuiSpriteScaling scaling;
+public record GuiMetadataSection(GuiSpriteScaling scaling) {
     public static final GuiMetadataSection DEFAULT = new GuiMetadataSection(GuiSpriteScaling.DEFAULT);
     public static final Codec<GuiMetadataSection> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(GuiSpriteScaling.CODEC, "scaling", GuiSpriteScaling.DEFAULT).forGetter(GuiMetadataSection::scaling)).apply(instance, GuiMetadataSection::new));
     public static final MetadataSectionType<GuiMetadataSection> TYPE = MetadataSectionType.fromCodec("gui", CODEC);
-
-    public GuiSpriteScaling scaling() {
-        return this.scaling;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/resources/metadata/gui/GuiSpriteScaling.java b/src/main/java/net/minecraft/client/resources/metadata/gui/GuiSpriteScaling.java
index f1ca17ba6a7d60924c4b7cc5b593cbd7bfec03a9..8fc854d1e8f77d4e08439faa7f01f91f6578e37f 100644
--- a/src/main/java/net/minecraft/client/resources/metadata/gui/GuiSpriteScaling.java
+++ b/src/main/java/net/minecraft/client/resources/metadata/gui/GuiSpriteScaling.java
@@ -15,10 +15,7 @@ public interface GuiSpriteScaling {
 
     GuiSpriteScaling.Type type();
 
-    public static record NineSlice(int d, int e, GuiSpriteScaling.NineSlice.Border f) implements GuiSpriteScaling {
-        private final int width;
-        private final int height;
-        private final GuiSpriteScaling.NineSlice.Border border;
+    public static record NineSlice(int width, int height, GuiSpriteScaling.NineSlice.Border border) implements GuiSpriteScaling {
         public static final Codec<GuiSpriteScaling.NineSlice> CODEC = ExtraCodecs.validate(RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.POSITIVE_INT.fieldOf("width").forGetter(GuiSpriteScaling.NineSlice::width), ExtraCodecs.POSITIVE_INT.fieldOf("height").forGetter(GuiSpriteScaling.NineSlice::height), GuiSpriteScaling.NineSlice.Border.CODEC.fieldOf("border").forGetter(GuiSpriteScaling.NineSlice::border)).apply(instance, GuiSpriteScaling.NineSlice::new)), GuiSpriteScaling.NineSlice::validate);
 
         private static DataResult<GuiSpriteScaling.NineSlice> validate(GuiSpriteScaling.NineSlice nineSlice) {
@@ -34,23 +31,7 @@ public interface GuiSpriteScaling {
             return GuiSpriteScaling.Type.NINE_SLICE;
         }
 
-        public int width() {
-            return this.width;
-        }
-
-        public int height() {
-            return this.height;
-        }
-
-        public GuiSpriteScaling.NineSlice.Border border() {
-            return this.border;
-        }
-
-        public static record Border(int a, int b, int c, int d) {
-            private final int left;
-            private final int top;
-            private final int right;
-            private final int bottom;
+        public static record Border(int left, int top, int right, int bottom) {
             private static final Codec<GuiSpriteScaling.NineSlice.Border> VALUE_CODEC = ExtraCodecs.POSITIVE_INT.flatComapMap((integer) -> new GuiSpriteScaling.NineSlice.Border(integer, integer, integer, integer), (border) -> {
                 OptionalInt optionalInt = border.unpackValue();
                 return optionalInt.isPresent() ? DataResult.success(optionalInt.getAsInt()) : DataResult.error(() -> "Border has different side sizes");
@@ -61,22 +42,6 @@ public interface GuiSpriteScaling {
             private OptionalInt unpackValue() {
                 return this.left() == this.top() && this.top() == this.right() && this.right() == this.bottom() ? OptionalInt.of(this.left()) : OptionalInt.empty();
             }
-
-            public int left() {
-                return this.left;
-            }
-
-            public int top() {
-                return this.top;
-            }
-
-            public int right() {
-                return this.right;
-            }
-
-            public int bottom() {
-                return this.bottom;
-            }
         }
     }
 
@@ -88,22 +53,12 @@ public interface GuiSpriteScaling {
         }
     }
 
-    public static record Tile(int d, int e) implements GuiSpriteScaling {
-        private final int width;
-        private final int height;
+    public static record Tile(int width, int height) implements GuiSpriteScaling {
         public static final Codec<GuiSpriteScaling.Tile> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.POSITIVE_INT.fieldOf("width").forGetter(GuiSpriteScaling.Tile::width), ExtraCodecs.POSITIVE_INT.fieldOf("height").forGetter(GuiSpriteScaling.Tile::height)).apply(instance, GuiSpriteScaling.Tile::new));
 
         public GuiSpriteScaling.Type type() {
             return GuiSpriteScaling.Type.TILE;
         }
-
-        public int width() {
-            return this.width;
-        }
-
-        public int height() {
-            return this.height;
-        }
     }
 
     public static enum Type implements StringRepresentable {
@@ -128,4 +83,4 @@ public interface GuiSpriteScaling {
             return this.codec;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/resources/metadata/language/LanguageMetadataSection.java b/src/main/java/net/minecraft/client/resources/metadata/language/LanguageMetadataSection.java
index f1ff5596453493c00883262256bb7c83e8683af2..ea602795676c13e289c2f5c5cd93e2648d2f7da2 100644
--- a/src/main/java/net/minecraft/client/resources/metadata/language/LanguageMetadataSection.java
+++ b/src/main/java/net/minecraft/client/resources/metadata/language/LanguageMetadataSection.java
@@ -6,13 +6,8 @@ import net.minecraft.client.resources.language.LanguageInfo;
 import net.minecraft.server.packs.metadata.MetadataSectionType;
 import net.minecraft.util.ExtraCodecs;
 
-public record LanguageMetadataSection(Map<String, LanguageInfo> d) {
-    private final Map<String, LanguageInfo> languages;
+public record LanguageMetadataSection(Map<String, LanguageInfo> languages) {
     public static final Codec<String> LANGUAGE_CODE_CODEC = ExtraCodecs.sizeLimitedString(1, 16);
     public static final Codec<LanguageMetadataSection> CODEC = Codec.unboundedMap(LANGUAGE_CODE_CODEC, LanguageInfo.CODEC).xmap(LanguageMetadataSection::new, LanguageMetadataSection::languages);
     public static final MetadataSectionType<LanguageMetadataSection> TYPE = MetadataSectionType.fromCodec("language", CODEC);
-
-    public Map<String, LanguageInfo> languages() {
-        return this.languages;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/resources/model/AtlasSet.java b/src/main/java/net/minecraft/client/resources/model/AtlasSet.java
index adeff551aedc4ef3fee44a2b24aa017286979571..bc7304deadd27e597192395ea77b269887a87640 100644
--- a/src/main/java/net/minecraft/client/resources/model/AtlasSet.java
+++ b/src/main/java/net/minecraft/client/resources/model/AtlasSet.java
@@ -40,21 +40,10 @@ public class AtlasSet implements AutoCloseable {
         }));
     }
 
-    static record AtlasEntry(TextureAtlas a, ResourceLocation b) implements AutoCloseable {
-        final TextureAtlas atlas;
-        final ResourceLocation atlasInfoLocation;
-
+    static record AtlasEntry(TextureAtlas atlas, ResourceLocation atlasInfoLocation) implements AutoCloseable {
         public void close() {
             this.atlas.clearTextureData();
         }
-
-        public TextureAtlas atlas() {
-            return this.atlas;
-        }
-
-        public ResourceLocation atlasInfoLocation() {
-            return this.atlasInfoLocation;
-        }
     }
 
     public static class StitchResult {
diff --git a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
index 640af49142e85543726e2b6b62d96500c29f43db..8b2736c26a54ede6bcc4c6f8674959ced5e0d9ce 100644
--- a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
+++ b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
@@ -275,14 +275,14 @@ public class ModelBakery {
                         blockModelDefinition.getVariants().forEach((s, multiVariant) -> {
                             try {
                                 immutableList.stream().filter(predicate(stateDefinition, s)).forEach((blockState) -> {
-                                    Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair2 = map3.put(blockState, Pair.of(multiVariant, () -> ModelBakery.ModelGroupKey.create(blockState, multiVariant, list)));
-                                    if (pair2 != null && pair2.getFirst() != multiPart) {
+                                    Pair<UnbakedModel, Supplier<ModelBakery.ModelGroupKey>> pair3 = map3.put(blockState, Pair.of(multiVariant, () -> ModelBakery.ModelGroupKey.create(blockState, multiVariant, list)));
+                                    if (pair3 != null && pair3.getFirst() != multiPart) {
                                         map3.put(blockState, pair);
-                                        throw new RuntimeException("Overlapping definition with: " + (String)((Entry)blockModelDefinition.getVariants().entrySet().stream().filter((entry) -> entry.getValue() == pair2.getFirst()).findFirst().get()).getKey());
+                                        throw new RuntimeException("Overlapping definition with: " + (String)(blockModelDefinition.getVariants().entrySet().stream().filter((entry) -> entry.getValue() == pair3.getFirst()).findFirst().get()).getKey());
                                     }
                                 });
                             } catch (Exception var12) {
-                                LOGGER.warn("Exception loading blockstate definition: '{}' in resourcepack: '{}' for variant: '{}': {}", new Object[]{resourceLocation4, pair2.getFirst(), s, var12.getMessage()});
+                                LOGGER.warn("Exception loading blockstate definition: '{}' in resourcepack: '{}' for variant: '{}': {}", resourceLocation4, pair2.getFirst(), s, var12.getMessage());
                             }
 
                         });
@@ -304,8 +304,8 @@ public class ModelBakery {
                         this.cacheAndQueueDependencies(modelResourceLocationx, (UnbakedModel)pair2.getFirst());
 
                         try {
-                            ModelBakery.ModelGroupKey modelGroupKey = (ModelBakery.ModelGroupKey)(pair2.getSecond()).get();
-                            (map5.computeIfAbsent(modelGroupKey, (modelGroupKey) -> Sets.newIdentityHashSet())).add(blockState);
+                            ModelBakery.ModelGroupKey modelGroupKeyIn = (ModelBakery.ModelGroupKey)(pair2.getSecond()).get();
+                            (map5.computeIfAbsent(modelGroupKeyIn, (modelGroupKeyInIn) -> Sets.newIdentityHashSet())).add(blockState);
                         } catch (Exception var9) {
                             LOGGER.warn("Exception evaluating model definition: '{}'", modelResourceLocationx, var9);
                         }
@@ -386,22 +386,7 @@ public class ModelBakery {
         return this.modelGroups;
     }
 
-    static record BakedCacheKey(ResourceLocation a, Transformation b, boolean c) {
-        private final ResourceLocation id;
-        private final Transformation transformation;
-        private final boolean isUvLocked;
-
-        public ResourceLocation id() {
-            return this.id;
-        }
-
-        public Transformation transformation() {
-            return this.transformation;
-        }
-
-        public boolean isUvLocked() {
-            return this.isUvLocked;
-        }
+    static record BakedCacheKey(ResourceLocation id, Transformation transformation, boolean isUvLocked) {
     }
 
     static class BlockStateDefinitionException extends RuntimeException {
@@ -410,17 +395,7 @@ public class ModelBakery {
         }
     }
 
-    public static record LoadedJson(String a, JsonElement b) {
-        final String source;
-        final JsonElement data;
-
-        public String source() {
-            return this.source;
-        }
-
-        public JsonElement data() {
-            return this.data;
-        }
+    public static record LoadedJson(String source, JsonElement data) {
     }
 
     class ModelBakerImpl implements ModelBaker {
diff --git a/src/main/java/net/minecraft/client/resources/model/ModelManager.java b/src/main/java/net/minecraft/client/resources/model/ModelManager.java
index 97895858799c6ebf53c84267e4b028c9c5e14578..20780ecc801a1faf07396d357dddb6879b136de5 100644
--- a/src/main/java/net/minecraft/client/resources/model/ModelManager.java
+++ b/src/main/java/net/minecraft/client/resources/model/ModelManager.java
@@ -122,10 +122,10 @@ public class ModelManager implements PreparableReloadListener, AutoCloseable {
 
             for(Entry<ResourceLocation, List<Resource>> entry : map.entrySet()) {
                 list.add(CompletableFuture.supplyAsync(() -> {
-                    List<Resource> list = entry.getValue();
-                    List<ModelBakery.LoadedJson> list2 = new ArrayList(list.size());
+                    List<Resource> listIn = entry.getValue();
+                    List<ModelBakery.LoadedJson> list2 = new ArrayList(listIn.size());
 
-                    for(Resource resource : list) {
+                    for(Resource resource : listIn) {
                         try {
                             Reader reader = resource.openAsReader();
 
@@ -238,31 +238,6 @@ public class ModelManager implements PreparableReloadListener, AutoCloseable {
         this.maxMipmapLevels = i;
     }
 
-    static record ReloadState(ModelBakery a, BakedModel b, Map<BlockState, BakedModel> c, Map<ResourceLocation, AtlasSet.StitchResult> d, CompletableFuture<Void> e) {
-        final ModelBakery modelBakery;
-        final BakedModel missingModel;
-        final Map<BlockState, BakedModel> modelCache;
-        final Map<ResourceLocation, AtlasSet.StitchResult> atlasPreparations;
-        final CompletableFuture<Void> readyForUpload;
-
-        public ModelBakery modelBakery() {
-            return this.modelBakery;
-        }
-
-        public BakedModel missingModel() {
-            return this.missingModel;
-        }
-
-        public Map<BlockState, BakedModel> modelCache() {
-            return this.modelCache;
-        }
-
-        public Map<ResourceLocation, AtlasSet.StitchResult> atlasPreparations() {
-            return this.atlasPreparations;
-        }
-
-        public CompletableFuture<Void> readyForUpload() {
-            return this.readyForUpload;
-        }
+    static record ReloadState(ModelBakery modelBakery, BakedModel missingModel, Map<BlockState, BakedModel> modelCache, Map<ResourceLocation, AtlasSet.StitchResult> atlasPreparations, CompletableFuture<Void> readyForUpload) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/searchtree/PlainTextSearchTree.java b/src/main/java/net/minecraft/client/searchtree/PlainTextSearchTree.java
index c1ed7229710f49b605f830a273781c5a5849a74a..c08d4ef9a5a12ecd0d1a0c06a149a4c7fbc4894f 100644
--- a/src/main/java/net/minecraft/client/searchtree/PlainTextSearchTree.java
+++ b/src/main/java/net/minecraft/client/searchtree/PlainTextSearchTree.java
@@ -17,7 +17,7 @@ public interface PlainTextSearchTree<T> {
             SuffixArray<T> suffixArray = new SuffixArray<>();
 
             for(T object : list) {
-                ((Stream)function.apply(object)).forEach((s) -> suffixArray.add(object, s.toLowerCase(Locale.ROOT)));
+                function.apply(object).forEach((s) -> suffixArray.add(object, s.toLowerCase(Locale.ROOT)));
             }
 
             suffixArray.generate();
diff --git a/src/main/java/net/minecraft/client/searchtree/ResourceLocationSearchTree.java b/src/main/java/net/minecraft/client/searchtree/ResourceLocationSearchTree.java
index aec933f9c5a0b16094650758d68bb2e8650b1578..ddbdee3ac8d4e02f0dd763b0a3483b27c38b45bf 100644
--- a/src/main/java/net/minecraft/client/searchtree/ResourceLocationSearchTree.java
+++ b/src/main/java/net/minecraft/client/searchtree/ResourceLocationSearchTree.java
@@ -27,7 +27,7 @@ public interface ResourceLocationSearchTree<T> {
             final SuffixArray<T> suffixArray2 = new SuffixArray<>();
 
             for(T object : list) {
-                ((Stream)function.apply(object)).forEach((resourceLocation) -> {
+                function.apply(object).forEach((resourceLocation) -> {
                     suffixArray.add(object, resourceLocation.getNamespace().toLowerCase(Locale.ROOT));
                     suffixArray2.add(object, resourceLocation.getPath().toLowerCase(Locale.ROOT));
                 });
diff --git a/src/main/java/net/minecraft/client/sounds/SoundEngine.java b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
index 69ce26b626404eca7cc509eb816d943be76df952..0bf6de6829ae2920de62769944a187f4f7472f35 100644
--- a/src/main/java/net/minecraft/client/sounds/SoundEngine.java
+++ b/src/main/java/net/minecraft/client/sounds/SoundEngine.java
@@ -120,12 +120,12 @@ public class SoundEngine {
                 this.listener.setGain(f);
             } else {
                 this.instanceToChannel.forEach((soundInstance, channelHandle) -> {
-                    float f = this.calculateVolume(soundInstance);
+                    float volume = this.calculateVolume(soundInstance);
                     channelHandle.execute((channel) -> {
-                        if (f <= 0.0F) {
+                        if (volume <= 0.0F) {
                             channel.stop();
                         } else {
-                            channel.setVolume(f);
+                            channel.setVolume(volume);
                         }
 
                     });
diff --git a/src/main/java/net/minecraft/client/telemetry/TelemetryEventInstance.java b/src/main/java/net/minecraft/client/telemetry/TelemetryEventInstance.java
index 584a9db1fd3d7a483caac28a1302d689e43d358b..f642e89cb7f8572e9d775fd17597994f2a41d0c1 100644
--- a/src/main/java/net/minecraft/client/telemetry/TelemetryEventInstance.java
+++ b/src/main/java/net/minecraft/client/telemetry/TelemetryEventInstance.java
@@ -4,15 +4,13 @@ import com.mojang.authlib.minecraft.TelemetryEvent;
 import com.mojang.authlib.minecraft.TelemetrySession;
 import com.mojang.serialization.Codec;
 
-public record TelemetryEventInstance(TelemetryEventType b, TelemetryPropertyMap c) {
-    private final TelemetryEventType type;
-    private final TelemetryPropertyMap properties;
+public record TelemetryEventInstance(TelemetryEventType type, TelemetryPropertyMap properties) {
     public static final Codec<TelemetryEventInstance> CODEC = TelemetryEventType.CODEC.dispatchStable(TelemetryEventInstance::type, TelemetryEventType::codec);
 
     public TelemetryEventInstance {
-        telemetryPropertyMap.propertySet().forEach((telemetryProperty) -> {
-            if (!telemetryEventType.contains(telemetryProperty)) {
-                throw new IllegalArgumentException("Property '" + telemetryProperty.id() + "' not expected for event: '" + telemetryEventType.id() + "'");
+        properties.propertySet().forEach((telemetryProperty) -> {
+            if (!type.contains(telemetryProperty)) {
+                throw new IllegalArgumentException("Property '" + telemetryProperty.id() + "' not expected for event: '" + type.id() + "'");
             }
         });
     }
@@ -20,12 +18,4 @@ public record TelemetryEventInstance(TelemetryEventType b, TelemetryPropertyMap
     public TelemetryEvent export(TelemetrySession telemetrySession) {
         return this.type.export(telemetrySession, this.properties);
     }
-
-    public TelemetryEventType type() {
-        return this.type;
-    }
-
-    public TelemetryPropertyMap properties() {
-        return this.properties;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/telemetry/TelemetryProperty.java b/src/main/java/net/minecraft/client/telemetry/TelemetryProperty.java
index db3ae93b7cd1204a80561cb0e96297807724273d..f61b08ea5e50d5736c154e1534910aa6e0f58f26 100644
--- a/src/main/java/net/minecraft/client/telemetry/TelemetryProperty.java
+++ b/src/main/java/net/minecraft/client/telemetry/TelemetryProperty.java
@@ -18,11 +18,7 @@ import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.StringRepresentable;
 
-public record TelemetryProperty<T>(String F, String G, Codec<T> H, TelemetryProperty.Exporter<T> I) {
-    private final String id;
-    private final String exportKey;
-    private final Codec<T> codec;
-    private final TelemetryProperty.Exporter<T> exporter;
+public record TelemetryProperty<T>(String id, String exportKey, Codec<T> codec, TelemetryProperty.Exporter<T> exporter) {
     private static final DateTimeFormatter TIMESTAMP_FORMATTER = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.from(ZoneOffset.UTC));
     public static final TelemetryProperty<String> USER_ID = string("user_id", "userId");
     public static final TelemetryProperty<String> CLIENT_ID = string("client_id", "clientId");
@@ -106,22 +102,6 @@ public record TelemetryProperty<T>(String F, String G, Codec<T> H, TelemetryProp
         return "TelemetryProperty[" + this.id + "]";
     }
 
-    public String id() {
-        return this.id;
-    }
-
-    public String exportKey() {
-        return this.exportKey;
-    }
-
-    public Codec<T> codec() {
-        return this.codec;
-    }
-
-    public TelemetryProperty.Exporter<T> exporter() {
-        return this.exporter;
-    }
-
     public interface Exporter<T> {
         void apply(TelemetryPropertyContainer var1, String var2, T var3);
     }
@@ -167,4 +147,4 @@ public record TelemetryProperty<T>(String F, String G, Codec<T> H, TelemetryProp
             return this.key;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/telemetry/TelemetryPropertyMap.java b/src/main/java/net/minecraft/client/telemetry/TelemetryPropertyMap.java
index 31ba6a9c9570d7eab48bc7972d74f4407e89e822..f9f51c8cdd434fad4e35776821b5ef4c9ec0067d 100644
--- a/src/main/java/net/minecraft/client/telemetry/TelemetryPropertyMap.java
+++ b/src/main/java/net/minecraft/client/telemetry/TelemetryPropertyMap.java
@@ -55,7 +55,7 @@ public class TelemetryPropertyMap {
                 T object = (T)mapLike.get(telemetryProperty.id());
                 if (object != null) {
                     DataResult<V> dataResult2 = telemetryProperty.codec().parse(dynamicOps, object);
-                    return dataResult.apply2stable((builder, objectx) -> builder.put(telemetryProperty, (T)objectx), dataResult2);
+                    return dataResult.apply2stable((builder, objectx) -> builder.put(telemetryProperty, objectx), dataResult2);
                 } else {
                     return dataResult;
                 }
diff --git a/src/main/java/net/minecraft/client/telemetry/events/GameLoadTimesEvent.java b/src/main/java/net/minecraft/client/telemetry/events/GameLoadTimesEvent.java
index a89656f010fc9c55c0286f9c055cd1bb67e958b7..139c01d041f297928c02ee591d53a647c3f5a5de 100644
--- a/src/main/java/net/minecraft/client/telemetry/events/GameLoadTimesEvent.java
+++ b/src/main/java/net/minecraft/client/telemetry/events/GameLoadTimesEvent.java
@@ -71,12 +71,7 @@ public class GameLoadTimesEvent {
         this.bootstrapTime = OptionalLong.of(l);
     }
 
-    public static record Measurement(int b) {
-        private final int millis;
+    public static record Measurement(int millis) {
         public static final Codec<GameLoadTimesEvent.Measurement> CODEC = Codec.INT.xmap(GameLoadTimesEvent.Measurement::new, (measurement) -> measurement.millis);
-
-        public int millis() {
-            return this.millis;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/commands/CommandSigningContext.java b/src/main/java/net/minecraft/commands/CommandSigningContext.java
index 3813f8faa85fc63ad3b8cf2fbd191dcb5b818287..e8debf1765650324e615bc34476012ac1c45801f 100644
--- a/src/main/java/net/minecraft/commands/CommandSigningContext.java
+++ b/src/main/java/net/minecraft/commands/CommandSigningContext.java
@@ -15,16 +15,10 @@ public interface CommandSigningContext {
     @Nullable
     PlayerChatMessage getArgument(String var1);
 
-    public static record SignedArguments(Map<String, PlayerChatMessage> b) implements CommandSigningContext {
-        private final Map<String, PlayerChatMessage> arguments;
-
+    public static record SignedArguments(Map<String, PlayerChatMessage> arguments) implements CommandSigningContext {
         @Nullable
         public PlayerChatMessage getArgument(String s) {
             return (PlayerChatMessage)this.arguments.get(s);
         }
-
-        public Map<String, PlayerChatMessage> arguments() {
-            return this.arguments;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 6fd3975c7ebea7aa38071983f088d1a9e3cb354e..1bf78e316e1e211fdd90d8f62fc2ff47c3200733 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -305,7 +305,7 @@ public class Commands {
     private void fillUsableCommands(CommandNode<CommandSourceStack> commandNode, CommandNode<SharedSuggestionProvider> commandNode2, CommandSourceStack commandSourceStack, Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map) {
         for(CommandNode<CommandSourceStack> commandNode3 : commandNode.getChildren()) {
             if (commandNode3.canUse(commandSourceStack)) {
-                ArgumentBuilder<SharedSuggestionProvider, ?> argumentBuilder = commandNode3.createBuilder();
+                ArgumentBuilder<SharedSuggestionProvider, ?> argumentBuilder = (ArgumentBuilder) commandNode3.createBuilder();
                 argumentBuilder.requires((sharedSuggestionProvider) -> true);
                 if (argumentBuilder.getCommand() != null) {
                     argumentBuilder.executes((commandContext) -> 0);
diff --git a/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java b/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java
index a6427991113267addafeb2cf689dd45f725206f3..eff4696b5d2c32c96abbd91b022ca6ea50bcfff5 100644
--- a/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java
+++ b/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java
@@ -8,14 +8,13 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.MessageSignature;
 import net.minecraft.network.chat.SignableCommand;
 
-public record ArgumentSignatures(List<ArgumentSignatures.Entry> b) {
-    private final List<ArgumentSignatures.Entry> entries;
+public record ArgumentSignatures(List<ArgumentSignatures.Entry> entries) {
     public static final ArgumentSignatures EMPTY = new ArgumentSignatures(List.of());
     private static final int MAX_ARGUMENT_COUNT = 8;
     private static final int MAX_ARGUMENT_NAME_LENGTH = 16;
 
     public ArgumentSignatures(FriendlyByteBuf friendlyByteBuf) {
-        this(friendlyByteBuf.readCollection(FriendlyByteBuf.limitValue(ArrayList::new, 8), ArgumentSignatures.Entry::new));
+        this((List<Entry>) friendlyByteBuf.readCollection(FriendlyByteBuf.limitValue(ArrayList::new, 8), ArgumentSignatures.Entry::new));
     }
 
     @Nullable
@@ -41,14 +40,7 @@ public record ArgumentSignatures(List<ArgumentSignatures.Entry> b) {
         return new ArgumentSignatures(list);
     }
 
-    public List<ArgumentSignatures.Entry> entries() {
-        return this.entries;
-    }
-
-    public static record Entry(String a, MessageSignature b) {
-        final String name;
-        final MessageSignature signature;
-
+    public static record Entry(String name, MessageSignature signature) {
         public Entry(FriendlyByteBuf friendlyByteBuf) {
             this(friendlyByteBuf.readUtf(16), MessageSignature.read(friendlyByteBuf));
         }
@@ -57,14 +49,6 @@ public record ArgumentSignatures(List<ArgumentSignatures.Entry> b) {
             friendlyByteBuf.writeUtf(this.name, 16);
             MessageSignature.write(friendlyByteBuf, this.signature);
         }
-
-        public String name() {
-            return this.name;
-        }
-
-        public MessageSignature signature() {
-            return this.signature;
-        }
     }
 
     @FunctionalInterface
diff --git a/src/main/java/net/minecraft/commands/arguments/EntityArgument.java b/src/main/java/net/minecraft/commands/arguments/EntityArgument.java
index 7a6398da7bd7d607181c0fcb7d4d4652816529a2..c09e448f49172e90540c23cc960adb03c331f7cb 100644
--- a/src/main/java/net/minecraft/commands/arguments/EntityArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/EntityArgument.java
@@ -114,9 +114,9 @@ public class EntityArgument implements ArgumentType<EntitySelector> {
         Object stringReader = commandContext.getSource();
         if (stringReader instanceof SharedSuggestionProvider) {
             SharedSuggestionProvider sharedSuggestionProvider = (SharedSuggestionProvider)stringReader;
-            StringReader stringReader = new StringReader(suggestionsBuilder.getInput());
-            stringReader.setCursor(suggestionsBuilder.getStart());
-            EntitySelectorParser entitySelectorParser = new EntitySelectorParser(stringReader, sharedSuggestionProvider.hasPermission(2));
+            StringReader stringReaderIn = new StringReader(suggestionsBuilder.getInput());
+            stringReaderIn.setCursor(suggestionsBuilder.getStart());
+            EntitySelectorParser entitySelectorParser = new EntitySelectorParser(stringReaderIn, sharedSuggestionProvider.hasPermission(2));
 
             try {
                 entitySelectorParser.parse();
diff --git a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
index 0d3c409223fc0139deb6c4d0b1142e7f917ed69e..38afd3d4f6223097fb3b9f973fa0d24ad0781e28 100644
--- a/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ObjectiveArgument.java
@@ -56,7 +56,7 @@ public class ObjectiveArgument implements ArgumentType<String> {
             return SharedSuggestionProvider.suggest(commandSourceStack.getServer().getScoreboard().getObjectiveNames(), suggestionsBuilder);
         } else if (object instanceof SharedSuggestionProvider) {
             SharedSuggestionProvider sharedSuggestionProvider = (SharedSuggestionProvider)object;
-            return sharedSuggestionProvider.customSuggestion(commandContext);
+            return sharedSuggestionProvider.customSuggestion((CommandContext<SharedSuggestionProvider>) commandContext);
         } else {
             return Suggestions.empty();
         }
diff --git a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
index 9297452ea357eaf7ee8151da9fb9c3395ac676f2..9ab32e06c3542707fe70d16571128d9d4f1edfd1 100644
--- a/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/OperationArgument.java
@@ -52,7 +52,7 @@ public class OperationArgument implements ArgumentType<OperationArgument.Operati
     }
 
     private static OperationArgument.Operation getOperation(String s) throws CommandSyntaxException {
-        return (OperationArgument.Operation)(s.equals("><") ? (score, score2) -> {
+        return (OperationArgument.Operation)(s.equals("><") ? (Operation) (score, score2) -> {
             int i = score.getScore();
             score.setScore(score2.getScore());
             score2.setScore(i);
diff --git a/src/main/java/net/minecraft/commands/arguments/ResourceOrTagArgument.java b/src/main/java/net/minecraft/commands/arguments/ResourceOrTagArgument.java
index 7c7e55fb1f3b2c46e4362d3d5164790fd79123b2..671b1782ecd14ede4d7b8f00a65a8a94136bea9e 100644
--- a/src/main/java/net/minecraft/commands/arguments/ResourceOrTagArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ResourceOrTagArgument.java
@@ -122,15 +122,13 @@ public class ResourceOrTagArgument<T> implements ArgumentType<ResourceOrTagArgum
         }
     }
 
-    static record ResourceResult<T>(Holder.Reference<T> a) implements ResourceOrTagArgument.Result<T> {
-        private final Holder.Reference<T> value;
-
+    static record ResourceResult<T>(Holder.Reference<T> value) implements ResourceOrTagArgument.Result<T> {
         public Either<Holder.Reference<T>, HolderSet.Named<T>> unwrap() {
             return Either.left(this.value);
         }
 
         public <E> Optional<ResourceOrTagArgument.Result<E>> cast(ResourceKey<? extends Registry<E>> resourceKey) {
-            return this.value.key().isFor(resourceKey) ? Optional.of(this) : Optional.empty();
+            return this.value.key().isFor(resourceKey) ? Optional.of((Result<E>) this) : Optional.empty();
         }
 
         public boolean test(Holder<T> holder) {
@@ -140,10 +138,6 @@ public class ResourceOrTagArgument<T> implements ArgumentType<ResourceOrTagArgum
         public String asPrintable() {
             return this.value.key().location().toString();
         }
-
-        public Holder.Reference<T> value() {
-            return this.value;
-        }
     }
 
     public interface Result<T> extends Predicate<Holder<T>> {
@@ -154,15 +148,13 @@ public class ResourceOrTagArgument<T> implements ArgumentType<ResourceOrTagArgum
         String asPrintable();
     }
 
-    static record TagResult<T>(HolderSet.Named<T> a) implements ResourceOrTagArgument.Result<T> {
-        private final HolderSet.Named<T> tag;
-
+    static record TagResult<T>(HolderSet.Named<T> tag) implements ResourceOrTagArgument.Result<T> {
         public Either<Holder.Reference<T>, HolderSet.Named<T>> unwrap() {
             return Either.right(this.tag);
         }
 
         public <E> Optional<ResourceOrTagArgument.Result<E>> cast(ResourceKey<? extends Registry<E>> resourceKey) {
-            return this.tag.key().isFor(resourceKey) ? Optional.of(this) : Optional.empty();
+            return this.tag.key().isFor(resourceKey) ? Optional.of((Result<E>) this) : Optional.empty();
         }
 
         public boolean test(Holder<T> holder) {
@@ -172,9 +164,5 @@ public class ResourceOrTagArgument<T> implements ArgumentType<ResourceOrTagArgum
         public String asPrintable() {
             return "#" + this.tag.key().location();
         }
-
-        public HolderSet.Named<T> tag() {
-            return this.tag;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/commands/arguments/ResourceOrTagKeyArgument.java b/src/main/java/net/minecraft/commands/arguments/ResourceOrTagKeyArgument.java
index 7fdc0db2ae2e9add8498f7e209ccbd52863ad164..08238f58fe669d8a49fdc6cd6bf9afd881d74467 100644
--- a/src/main/java/net/minecraft/commands/arguments/ResourceOrTagKeyArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/ResourceOrTagKeyArgument.java
@@ -109,9 +109,7 @@ public class ResourceOrTagKeyArgument<T> implements ArgumentType<ResourceOrTagKe
         }
     }
 
-    static record ResourceResult<T>(ResourceKey<T> a) implements ResourceOrTagKeyArgument.Result<T> {
-        private final ResourceKey<T> key;
-
+    static record ResourceResult<T>(ResourceKey<T> key) implements ResourceOrTagKeyArgument.Result<T> {
         public Either<ResourceKey<T>, TagKey<T>> unwrap() {
             return Either.left(this.key);
         }
@@ -127,10 +125,6 @@ public class ResourceOrTagKeyArgument<T> implements ArgumentType<ResourceOrTagKe
         public String asPrintable() {
             return this.key.location().toString();
         }
-
-        public ResourceKey<T> key() {
-            return this.key;
-        }
     }
 
     public interface Result<T> extends Predicate<Holder<T>> {
@@ -141,9 +135,7 @@ public class ResourceOrTagKeyArgument<T> implements ArgumentType<ResourceOrTagKe
         String asPrintable();
     }
 
-    static record TagResult<T>(TagKey<T> a) implements ResourceOrTagKeyArgument.Result<T> {
-        private final TagKey<T> key;
-
+    static record TagResult<T>(TagKey<T> key) implements ResourceOrTagKeyArgument.Result<T> {
         public Either<ResourceKey<T>, TagKey<T>> unwrap() {
             return Either.right(this.key);
         }
@@ -159,9 +151,5 @@ public class ResourceOrTagKeyArgument<T> implements ArgumentType<ResourceOrTagKe
         public String asPrintable() {
             return "#" + this.key.location();
         }
-
-        public TagKey<T> key() {
-            return this.key;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
index 12e5c43b69d3278052983b5624b0f2b9d05cbb16..5348ddf8362261803a11884046cd1f1b3b1e7de1 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
@@ -240,9 +240,8 @@ public class BlockStateParser {
 
     private static <T extends Comparable<T>> SuggestionsBuilder addSuggestions(SuggestionsBuilder suggestionsBuilder, Property<T> property) {
         for(T comparable : property.getPossibleValues()) {
-            if (comparable instanceof Integer) {
-                Integer integer = (Integer)comparable;
-                suggestionsBuilder.suggest(integer);
+            if (comparable instanceof Integer i) {
+                suggestionsBuilder.suggest(i);
             } else {
                 suggestionsBuilder.suggest(property.getName(comparable));
             }
@@ -483,8 +482,8 @@ public class BlockStateParser {
     private <T extends Comparable<T>> void setValue(Property<T> property, String s, int i) throws CommandSyntaxException {
         Optional<T> optional = property.getValue(s);
         if (optional.isPresent()) {
-            this.state = this.state.setValue(property, (Comparable)optional.get());
-            this.properties.put(property, (Comparable)optional.get());
+            this.state = this.state.setValue(property, optional.get());
+            this.properties.put(property, optional.get());
         } else {
             this.reader.setCursor(i);
             throw ERROR_INVALID_VALUE.createWithContext(this.reader, this.id.toString(), property.getName(), s);
@@ -518,43 +517,9 @@ public class BlockStateParser {
         stringBuilder.append(property.getName((T)comparable));
     }
 
-    public static record BlockResult(BlockState a, Map<Property<?>, Comparable<?>> b, @Nullable CompoundTag c) {
-        private final BlockState blockState;
-        private final Map<Property<?>, Comparable<?>> properties;
-        @Nullable
-        private final CompoundTag nbt;
-
-        public BlockState blockState() {
-            return this.blockState;
-        }
-
-        public Map<Property<?>, Comparable<?>> properties() {
-            return this.properties;
-        }
-
-        @Nullable
-        public CompoundTag nbt() {
-            return this.nbt;
-        }
+    public static record BlockResult(BlockState blockState, Map<Property<?>, Comparable<?>> properties, @Nullable CompoundTag nbt) {
     }
 
-    public static record TagResult(HolderSet<Block> a, Map<String, String> b, @Nullable CompoundTag c) {
-        private final HolderSet<Block> tag;
-        private final Map<String, String> vagueProperties;
-        @Nullable
-        private final CompoundTag nbt;
-
-        public HolderSet<Block> tag() {
-            return this.tag;
-        }
-
-        public Map<String, String> vagueProperties() {
-            return this.vagueProperties;
-        }
-
-        @Nullable
-        public CompoundTag nbt() {
-            return this.nbt;
-        }
+    public static record TagResult(HolderSet<Block> tag, Map<String, String> vagueProperties, @Nullable CompoundTag nbt) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/commands/arguments/item/ItemInput.java b/src/main/java/net/minecraft/commands/arguments/item/ItemInput.java
index 13f29a52ea0fef5b50a5f902c7ae8177da2859ea..f15dd217a2753c6c988200972125a4a43b9bb9c0 100644
--- a/src/main/java/net/minecraft/commands/arguments/item/ItemInput.java
+++ b/src/main/java/net/minecraft/commands/arguments/item/ItemInput.java
@@ -54,6 +54,6 @@ public class ItemInput implements Predicate<ItemStack> {
     }
 
     private String getItemName() {
-        return this.item.unwrapKey().map(ResourceKey::location).orElseGet(() -> "unknown[" + this.item + "]").toString();
+        return this.item.unwrapKey().map(ResourceKey::location).map(Object::toString).orElseGet(() -> "unknown[" + this.item + "]");
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java b/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java
index 8aa766fffcfb8d9c6cb81a96eddfb0fe882bd5e2..09d7937ede2c39557aca67d755be57c13b67bacc 100644
--- a/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java
@@ -157,33 +157,9 @@ public class ItemParser {
         return this.suggestItem(suggestionsBuilder);
     }
 
-    public static record ItemResult(Holder<Item> a, @Nullable CompoundTag b) {
-        private final Holder<Item> item;
-        @Nullable
-        private final CompoundTag nbt;
-
-        public Holder<Item> item() {
-            return this.item;
-        }
-
-        @Nullable
-        public CompoundTag nbt() {
-            return this.nbt;
-        }
+    public static record ItemResult(Holder<Item> item, @Nullable CompoundTag nbt) {
     }
 
-    public static record TagResult(HolderSet<Item> a, @Nullable CompoundTag b) {
-        private final HolderSet<Item> tag;
-        @Nullable
-        private final CompoundTag nbt;
-
-        public HolderSet<Item> tag() {
-            return this.tag;
-        }
-
-        @Nullable
-        public CompoundTag nbt() {
-            return this.nbt;
-        }
+    public static record TagResult(HolderSet<Item> tag, @Nullable CompoundTag nbt) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java b/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
index 5062b3291d6037f0815ac42b5def520d1d6bd9cc..c1c9144350d4f115d2db416278cfcee0c8bb8bf2 100644
--- a/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
+++ b/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
@@ -496,21 +496,6 @@ public class EntitySelectorOptions {
         void handle(EntitySelectorParser var1) throws CommandSyntaxException;
     }
 
-    static record Option(EntitySelectorOptions.Modifier a, Predicate<EntitySelectorParser> b, Component c) {
-        final EntitySelectorOptions.Modifier modifier;
-        final Predicate<EntitySelectorParser> canUse;
-        final Component description;
-
-        public EntitySelectorOptions.Modifier modifier() {
-            return this.modifier;
-        }
-
-        public Predicate<EntitySelectorParser> canUse() {
-            return this.canUse;
-        }
-
-        public Component description() {
-            return this.description;
-        }
+    static record Option(EntitySelectorOptions.Modifier modifier, Predicate<EntitySelectorParser> canUse, Component description) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypeInfos.java b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypeInfos.java
index ec1ed365fbd0341f0b64ee08c0fd3b7f68acef93..2ed5afb582f1ac295b9014cbedd8ee002be36e9d 100644
--- a/src/main/java/net/minecraft/commands/synchronization/ArgumentTypeInfos.java
+++ b/src/main/java/net/minecraft/commands/synchronization/ArgumentTypeInfos.java
@@ -112,10 +112,10 @@ public class ArgumentTypeInfos {
         register(registry, "dimension", DimensionArgument.class, SingletonArgumentInfo.contextFree(DimensionArgument::dimension));
         register(registry, "gamemode", GameModeArgument.class, SingletonArgumentInfo.contextFree(GameModeArgument::gameMode));
         register(registry, "time", TimeArgument.class, new TimeArgument.Info());
-        register(registry, "resource_or_tag", fixClassType(ResourceOrTagArgument.class), new ResourceOrTagArgument.Info());
-        register(registry, "resource_or_tag_key", fixClassType(ResourceOrTagKeyArgument.class), new ResourceOrTagKeyArgument.Info());
-        register(registry, "resource", fixClassType(ResourceArgument.class), new ResourceArgument.Info());
-        register(registry, "resource_key", fixClassType(ResourceKeyArgument.class), new ResourceKeyArgument.Info());
+        register(registry, "resource_or_tag", fixClassType(ResourceOrTagArgument.class), new ResourceOrTagArgument.Info<>());
+        register(registry, "resource_or_tag_key", fixClassType(ResourceOrTagKeyArgument.class), new ResourceOrTagKeyArgument.Info<>());
+        register(registry, "resource", fixClassType(ResourceArgument.class), new ResourceArgument.Info<>());
+        register(registry, "resource_key", fixClassType(ResourceKeyArgument.class), new ResourceKeyArgument.Info<>());
         register(registry, "template_mirror", TemplateMirrorArgument.class, SingletonArgumentInfo.contextFree(TemplateMirrorArgument::templateMirror));
         register(registry, "template_rotation", TemplateRotationArgument.class, SingletonArgumentInfo.contextFree(TemplateRotationArgument::templateRotation));
         register(registry, "heightmap", HeightmapTypeArgument.class, SingletonArgumentInfo.contextFree(HeightmapTypeArgument::heightmap));
@@ -128,7 +128,7 @@ public class ArgumentTypeInfos {
     }
 
     private static <T extends ArgumentType<?>> Class<T> fixClassType(Class<? super T> clazz) {
-        return clazz;
+        return (Class<T>) clazz;
     }
 
     public static boolean isClassRecognized(Class<?> clazz) {
@@ -136,11 +136,11 @@ public class ArgumentTypeInfos {
     }
 
     public static <A extends ArgumentType<?>> ArgumentTypeInfo<A, ?> byClass(A argumentType) {
-        ArgumentTypeInfo<?, ?> argumentTypeInfo = (ArgumentTypeInfo)BY_CLASS.get(argumentType.getClass());
+        ArgumentTypeInfo<?, ?> argumentTypeInfo = BY_CLASS.get(argumentType.getClass());
         if (argumentTypeInfo == null) {
             throw new IllegalArgumentException(String.format(Locale.ROOT, "Unrecognized argument type %s (%s)", argumentType, argumentType.getClass()));
         } else {
-            return argumentTypeInfo;
+            return (ArgumentTypeInfo<A, ?>) argumentTypeInfo;
         }
     }
 
diff --git a/src/main/java/net/minecraft/commands/synchronization/SingletonArgumentInfo.java b/src/main/java/net/minecraft/commands/synchronization/SingletonArgumentInfo.java
index 93be3e51469990d43da832cc9828a411264b4620..6a25bab5148c462bca61cf2ee1f1d64a4c596189 100644
--- a/src/main/java/net/minecraft/commands/synchronization/SingletonArgumentInfo.java
+++ b/src/main/java/net/minecraft/commands/synchronization/SingletonArgumentInfo.java
@@ -15,7 +15,7 @@ public class SingletonArgumentInfo<A extends ArgumentType<?>> implements Argumen
     }
 
     public static <T extends ArgumentType<?>> SingletonArgumentInfo<T> contextFree(Supplier<T> supplier) {
-        return new SingletonArgumentInfo<>((commandBuildContext) -> (ArgumentType)supplier.get());
+        return new SingletonArgumentInfo<>((commandBuildContext) -> supplier.get());
     }
 
     public static <T extends ArgumentType<?>> SingletonArgumentInfo<T> contextAware(Function<CommandBuildContext, T> function) {
diff --git a/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java b/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
index 2ff558cb660a71c9d0a7db66c77d3909c4fc5b27..6b9551150181441bda343b981ad5093189cbcdeb 100644
--- a/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
+++ b/src/main/java/net/minecraft/commands/synchronization/SuggestionProviders.java
@@ -29,7 +29,7 @@ public class SuggestionProviders {
             throw new IllegalArgumentException("A command suggestion provider is already registered with the name " + resourceLocation);
         } else {
             PROVIDERS_BY_NAME.put(resourceLocation, suggestionProvider);
-            return new SuggestionProviders.Wrapper(resourceLocation, suggestionProvider);
+            return (SuggestionProvider<S>) new Wrapper(resourceLocation, suggestionProvider);
         }
     }
 
diff --git a/src/main/java/net/minecraft/core/BlockPos.java b/src/main/java/net/minecraft/core/BlockPos.java
index 6ac3a041e053462a5c72d4c4850ebb560cf4985f..e4f35d0900b913f013edd778163a396988c8e7c7 100644
--- a/src/main/java/net/minecraft/core/BlockPos.java
+++ b/src/main/java/net/minecraft/core/BlockPos.java
@@ -247,11 +247,11 @@ public class BlockPos extends Vec3i {
             };
     }
 
-    public static Iterable<BlockPos> withinManhattan(BlockPos blockPos, int i, int i2, int i3) {
-        int i4 = i + i2 + i3;
-        int i5 = blockPos.getX();
-        int i6 = blockPos.getY();
-        int i7 = blockPos.getZ();
+    public static Iterable<BlockPos> withinManhattan(BlockPos blockPos, int originZ, int maxDepth, int reachX) {
+        int reachY = originZ + maxDepth + reachX;
+        int reachZ = blockPos.getX();
+        int originX = blockPos.getY();
+        int originY = blockPos.getZ();
         return () -> new AbstractIterator<BlockPos>() {
                 private final BlockPos.MutableBlockPos cursor = new BlockPos.MutableBlockPos();
                 private int currentDepth;
@@ -264,7 +264,7 @@ public class BlockPos extends Vec3i {
                 protected BlockPos computeNext() {
                     if (this.zMirror) {
                         this.zMirror = false;
-                        this.cursor.setZ(i7 - (this.cursor.getZ() - i7));
+                        this.cursor.setZ(originY - (this.cursor.getZ() - originY));
                         return this.cursor;
                     } else {
                         BlockPos blockPos;
@@ -273,24 +273,24 @@ public class BlockPos extends Vec3i {
                                 ++this.x;
                                 if (this.x > this.maxX) {
                                     ++this.currentDepth;
-                                    if (this.currentDepth > i4) {
+                                    if (this.currentDepth > reachY) {
                                         return (BlockPos)this.endOfData();
                                     }
 
-                                    this.maxX = Math.min(i, this.currentDepth);
+                                    this.maxX = Math.min(originZ, this.currentDepth);
                                     this.x = -this.maxX;
                                 }
 
-                                this.maxY = Math.min(i2, this.currentDepth - Math.abs(this.x));
+                                this.maxY = Math.min(maxDepth, this.currentDepth - Math.abs(this.x));
                                 this.y = -this.maxY;
                             }
 
                             int i = this.x;
                             int i2 = this.y;
                             int i3 = this.currentDepth - Math.abs(i) - Math.abs(i2);
-                            if (i3 <= i3) {
+                            if (i3 <= reachZ) {
                                 this.zMirror = i3 != 0;
-                                blockPos = this.cursor.set(i5 + i, i6 + i2, i7 + i3);
+                                blockPos = this.cursor.set(reachZ + i, originX + i2, originY + i3);
                             }
                         }
 
@@ -334,10 +334,10 @@ public class BlockPos extends Vec3i {
         return StreamSupport.stream(betweenClosed(i, i2, i3, i4, i5, i6).spliterator(), false);
     }
 
-    public static Iterable<BlockPos> betweenClosed(int i, int i2, int i3, int i4, int i5, int i6) {
-        int i7 = i4 - i + 1;
-        int i8 = i5 - i2 + 1;
-        int i9 = i6 - i3 + 1;
+    public static Iterable<BlockPos> betweenClosed(int end, int width, int height, int minX, int minY, int minZ) {
+        int i7 = minX - end + 1;
+        int i8 = minY - width + 1;
+        int i9 = minZ - height + 1;
         int i10 = i7 * i8 * i9;
         return () -> new AbstractIterator<BlockPos>() {
                 private final BlockPos.MutableBlockPos cursor = new BlockPos.MutableBlockPos();
@@ -352,7 +352,7 @@ public class BlockPos extends Vec3i {
                         int i3 = i2 % i8;
                         int i4 = i2 / i8;
                         ++this.index;
-                        return this.cursor.set(i + i, i2 + i3, i3 + i4);
+                        return this.cursor.set(end + i, width + i3, height + i4);
                     }
                 }
             };
diff --git a/src/main/java/net/minecraft/core/Holder.java b/src/main/java/net/minecraft/core/Holder.java
index 2c435c12f4179413ee27e4c5955a4a250540259f..9a10b1067cb0e99f4c9c5036616e3aebaa361659 100644
--- a/src/main/java/net/minecraft/core/Holder.java
+++ b/src/main/java/net/minecraft/core/Holder.java
@@ -38,9 +38,7 @@ public interface Holder<T> {
         return new Holder.Direct<>(object);
     }
 
-    public static record Direct<T>(T a) implements Holder<T> {
-        private final T value;
-
+    public static record Direct<T>(T value) implements Holder<T> {
         public boolean isBound() {
             return true;
         }
@@ -84,10 +82,6 @@ public interface Holder<T> {
         public Stream<TagKey<T>> tags() {
             return Stream.of();
         }
-
-        public T value() {
-            return this.value;
-        }
     }
 
     public static enum Kind {
diff --git a/src/main/java/net/minecraft/core/MappedRegistry.java b/src/main/java/net/minecraft/core/MappedRegistry.java
index ebeaf223b52ba2a0a7f4f5058b81db151433629a..e9312cb2cda9ed260f8b82b8f1eafea443e37059 100644
--- a/src/main/java/net/minecraft/core/MappedRegistry.java
+++ b/src/main/java/net/minecraft/core/MappedRegistry.java
@@ -123,11 +123,11 @@ public class MappedRegistry<T> implements WritableRegistry<T> {
         Validate.notNull(resourceKey);
         Validate.notNull(object);
         if (this.byLocation.containsKey(resourceKey.location())) {
-            Util.pauseInIde((T)(new IllegalStateException("Adding duplicate key '" + resourceKey + "' to registry")));
+            Util.pauseInIde((new IllegalStateException("Adding duplicate key '" + resourceKey + "' to registry")));
         }
 
         if (this.byValue.containsKey(object)) {
-            Util.pauseInIde((T)(new IllegalStateException("Adding duplicate value '" + object + "' to registry")));
+            Util.pauseInIde((new IllegalStateException("Adding duplicate value '" + object + "' to registry")));
         }
 
         Holder.Reference<T> reference;
@@ -178,7 +178,7 @@ public class MappedRegistry<T> implements WritableRegistry<T> {
 
     @Nullable
     public T get(@Nullable ResourceKey<T> resourceKey) {
-        return getValueFromNullable((Holder.Reference)this.byKey.get(resourceKey));
+        return getValueFromNullable(this.byKey.get(resourceKey));
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/core/NonNullList.java b/src/main/java/net/minecraft/core/NonNullList.java
index c2190c60e178443cd0a49d4cf42b0febebc2f346..4460f34e2589d9987affa1f40e0ba4c7e2ba3c4d 100644
--- a/src/main/java/net/minecraft/core/NonNullList.java
+++ b/src/main/java/net/minecraft/core/NonNullList.java
@@ -25,7 +25,7 @@ public class NonNullList<E> extends AbstractList<E> {
         Validate.notNull(object);
         Object[] objects = new Object[i];
         Arrays.fill(objects, object);
-        return new NonNullList<>(Arrays.asList(objects), object);
+        return new NonNullList(Arrays.asList(objects), object);
     }
 
     @SafeVarargs
diff --git a/src/main/java/net/minecraft/core/Registry.java b/src/main/java/net/minecraft/core/Registry.java
index 1fb96b758deadc03258595eb8200cb15037c1a87..0cbb7ba2c99963e7d8559a9924cbb9d3c737f1ee 100644
--- a/src/main/java/net/minecraft/core/Registry.java
+++ b/src/main/java/net/minecraft/core/Registry.java
@@ -159,7 +159,7 @@ public interface Registry<T> extends Keyable, IdMap<T> {
             }
 
             public Iterator<Holder<T>> iterator() {
-                return Registry.this.holders().map((reference) -> reference).iterator();
+                return Registry.this.holders().map((reference) -> (Holder<T>) reference).iterator();
             }
         };
     }
diff --git a/src/main/java/net/minecraft/core/RegistryAccess.java b/src/main/java/net/minecraft/core/RegistryAccess.java
index 4afe6e7acd732316360ca393b0ae42d4a60a7d1c..c5c2b19792fb3360b2bf6c8e6050ccf3ed51a443 100644
--- a/src/main/java/net/minecraft/core/RegistryAccess.java
+++ b/src/main/java/net/minecraft/core/RegistryAccess.java
@@ -23,7 +23,7 @@ public interface RegistryAccess extends HolderLookup.Provider {
     }
 
     default <E> Registry<E> registryOrThrow(ResourceKey<? extends Registry<? extends E>> resourceKey) {
-        return (Registry)this.registry(resourceKey).orElseThrow(() -> new IllegalStateException("Missing registry: " + resourceKey));
+        return this.registry(resourceKey).orElseThrow(() -> new IllegalStateException("Missing registry: " + resourceKey));
     }
 
     Stream<RegistryAccess.RegistryEntry<?>> registries();
@@ -31,8 +31,7 @@ public interface RegistryAccess extends HolderLookup.Provider {
     static RegistryAccess.Frozen fromRegistryOfRegistries(final Registry<? extends Registry<?>> registry) {
         return new RegistryAccess.Frozen() {
             public <T> Optional<Registry<T>> registry(ResourceKey<? extends Registry<? extends T>> resourceKey) {
-                Registry<Registry<T>> registry = registry;
-                return registry.getOptional(resourceKey);
+                return registry.getOptional((ResourceKey) resourceKey);
             }
 
             public Stream<RegistryAccess.RegistryEntry<?>> registries() {
@@ -86,28 +85,17 @@ public interface RegistryAccess extends HolderLookup.Provider {
         }
     }
 
-    public static record RegistryEntry<T>(ResourceKey<? extends Registry<T>> a, Registry<T> b) {
-        private final ResourceKey<? extends Registry<T>> key;
-        final Registry<T> value;
-
+    public static record RegistryEntry<T>(ResourceKey<? extends Registry<T>> key, Registry<T> value) {
         private static <T, R extends Registry<? extends T>> RegistryAccess.RegistryEntry<T> fromMapEntry(Entry<? extends ResourceKey<? extends Registry<?>>, R> entry) {
             return fromUntyped((ResourceKey)entry.getKey(), (Registry)entry.getValue());
         }
 
         private static <T> RegistryAccess.RegistryEntry<T> fromUntyped(ResourceKey<? extends Registry<?>> resourceKey, Registry<?> registry) {
-            return new RegistryAccess.RegistryEntry<>(resourceKey, registry);
+            return new RegistryAccess.RegistryEntry<>((ResourceKey) resourceKey, registry);
         }
 
         private RegistryAccess.RegistryEntry<T> freeze() {
             return new RegistryAccess.RegistryEntry<>(this.key, this.value.freeze());
         }
-
-        public ResourceKey<? extends Registry<T>> key() {
-            return this.key;
-        }
-
-        public Registry<T> value() {
-            return this.value;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/core/RegistryCodecs.java b/src/main/java/net/minecraft/core/RegistryCodecs.java
index b2949465de0efbc9149f2078c0e5b1baf5ab5f0b..b52422f788661af0de1d58aacbe4bdcc70d2f82c 100644
--- a/src/main/java/net/minecraft/core/RegistryCodecs.java
+++ b/src/main/java/net/minecraft/core/RegistryCodecs.java
@@ -63,21 +63,6 @@ public class RegistryCodecs {
         return HolderSetCodec.create(resourceKey, RegistryFixedCodec.create(resourceKey), flag);
     }
 
-    static record RegistryEntry<T>(ResourceKey<T> a, int b, T c) {
-        private final ResourceKey<T> key;
-        private final int id;
-        private final T value;
-
-        public ResourceKey<T> key() {
-            return this.key;
-        }
-
-        public int id() {
-            return this.id;
-        }
-
-        public T value() {
-            return this.value;
-        }
+    static record RegistryEntry<T>(ResourceKey<T> key, int id, T value) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/core/RegistrySetBuilder.java b/src/main/java/net/minecraft/core/RegistrySetBuilder.java
index ef8a30424de6f289cad6680d15fa64cf9ab7f466..3f45d855505d9b768505a5484b508f5531ee4e6a 100644
--- a/src/main/java/net/minecraft/core/RegistrySetBuilder.java
+++ b/src/main/java/net/minecraft/core/RegistrySetBuilder.java
@@ -68,13 +68,13 @@ public class RegistrySetBuilder {
         return provider2;
     }
 
-    static record BuildState(RegistrySetBuilder.CompositeOwner a, RegistrySetBuilder.UniversalLookup b, Map<ResourceLocation, HolderGetter<?>> c, Map<ResourceKey<?>, RegistrySetBuilder.RegisteredValue<?>> d, List<RuntimeException> e) {
-        private final RegistrySetBuilder.CompositeOwner owner;
-        final RegistrySetBuilder.UniversalLookup lookup;
-        final Map<ResourceLocation, HolderGetter<?>> registries;
-        final Map<ResourceKey<?>, RegistrySetBuilder.RegisteredValue<?>> registeredValues;
-        final List<RuntimeException> errors;
-
+    static record BuildState(
+            RegistrySetBuilder.CompositeOwner owner,
+            RegistrySetBuilder.UniversalLookup lookup,
+            Map<ResourceLocation, HolderGetter<?>> registries,
+            Map<ResourceKey<?>, RegistrySetBuilder.RegisteredValue<?>> registeredValues,
+            List<RuntimeException> errors
+    ) {
         public static RegistrySetBuilder.BuildState create(RegistryAccess registryAccess, Stream<ResourceKey<? extends Registry<?>>> stream) {
             RegistrySetBuilder.CompositeOwner compositeOwner = new RegistrySetBuilder.CompositeOwner();
             List<RuntimeException> list = new ArrayList();
@@ -191,17 +191,7 @@ public class RegistrySetBuilder {
         }
     }
 
-    static record RegisteredValue<T>(T a, Lifecycle b) {
-        final T value;
-        private final Lifecycle lifecycle;
-
-        public T value() {
-            return this.value;
-        }
-
-        public Lifecycle lifecycle() {
-            return this.lifecycle;
-        }
+    static record RegisteredValue<T>(T value, Lifecycle lifecycle) {
     }
 
     @FunctionalInterface
@@ -209,11 +199,7 @@ public class RegistrySetBuilder {
         void run(BootstapContext<T> var1);
     }
 
-    static record RegistryContents<T>(ResourceKey<? extends Registry<? extends T>> a, Lifecycle b, Map<ResourceKey<T>, RegistrySetBuilder.ValueAndHolder<T>> c) {
-        final ResourceKey<? extends Registry<? extends T>> key;
-        final Lifecycle lifecycle;
-        final Map<ResourceKey<T>, RegistrySetBuilder.ValueAndHolder<T>> values;
-
+    static record RegistryContents<T>(ResourceKey<? extends Registry<? extends T>> key, Lifecycle lifecycle, Map<ResourceKey<T>, RegistrySetBuilder.ValueAndHolder<T>> values) {
         public HolderLookup.RegistryLookup<T> buildAsLookup() {
             return new HolderLookup.RegistryLookup<T>() {
                 private final Map<ResourceKey<T>, Holder.Reference<T>> entries = RegistryContents.this.values.entrySet().stream().collect(Collectors.toUnmodifiableMap(Entry::getKey, (entry) -> {
@@ -248,25 +234,9 @@ public class RegistrySetBuilder {
                 }
             };
         }
-
-        public ResourceKey<? extends Registry<? extends T>> key() {
-            return this.key;
-        }
-
-        public Lifecycle lifecycle() {
-            return this.lifecycle;
-        }
-
-        public Map<ResourceKey<T>, RegistrySetBuilder.ValueAndHolder<T>> values() {
-            return this.values;
-        }
     }
 
-    static record RegistryStub<T>(ResourceKey<? extends Registry<T>> a, Lifecycle b, RegistrySetBuilder.RegistryBootstrap<T> c) {
-        private final ResourceKey<? extends Registry<T>> key;
-        private final Lifecycle lifecycle;
-        private final RegistrySetBuilder.RegistryBootstrap<T> bootstrap;
-
+    static record RegistryStub<T>(ResourceKey<? extends Registry<T>> key, Lifecycle lifecycle, RegistrySetBuilder.RegistryBootstrap<T> bootstrap) {
         void apply(RegistrySetBuilder.BuildState buildState) {
             this.bootstrap.run(buildState.bootstapContext());
         }
@@ -281,25 +251,13 @@ public class RegistrySetBuilder {
                 if (resourceKey.isFor(this.key)) {
                     RegistrySetBuilder.RegisteredValue<T> registeredValue = (RegistrySetBuilder.RegisteredValue)entry.getValue();
                     Holder.Reference<T> reference = (Holder.Reference)buildState.lookup.holders.remove(resourceKey);
-                    map.put(resourceKey, new RegistrySetBuilder.ValueAndHolder<T>(registeredValue, Optional.ofNullable(reference)));
+                    map.put((ResourceKey<T>) resourceKey, new RegistrySetBuilder.ValueAndHolder<T>(registeredValue, Optional.ofNullable(reference)));
                     iterator.remove();
                 }
             }
 
             return new RegistrySetBuilder.RegistryContents<>(this.key, this.lifecycle, map);
         }
-
-        public ResourceKey<? extends Registry<T>> key() {
-            return this.key;
-        }
-
-        public Lifecycle lifecycle() {
-            return this.lifecycle;
-        }
-
-        public RegistrySetBuilder.RegistryBootstrap<T> bootstrap() {
-            return this.bootstrap;
-        }
     }
 
     static class UniversalLookup extends RegistrySetBuilder.EmptyTagLookup<Object> {
@@ -314,20 +272,10 @@ public class RegistrySetBuilder {
         }
 
         <T> Holder.Reference<T> getOrCreate(ResourceKey<T> resourceKey) {
-            return (Holder.Reference)this.holders.computeIfAbsent(resourceKey, (resourceKeyx) -> Holder.Reference.createStandAlone(this.owner, resourceKeyx));
+            return (Holder.Reference)this.holders.computeIfAbsent((ResourceKey<Object>) resourceKey, (resourceKeyx) -> Holder.Reference.createStandAlone(this.owner, resourceKeyx));
         }
     }
 
-    static record ValueAndHolder<T>(RegistrySetBuilder.RegisteredValue<T> a, Optional<Holder.Reference<T>> b) {
-        private final RegistrySetBuilder.RegisteredValue<T> value;
-        private final Optional<Holder.Reference<T>> holder;
-
-        public RegistrySetBuilder.RegisteredValue<T> value() {
-            return this.value;
-        }
-
-        public Optional<Holder.Reference<T>> holder() {
-            return this.holder;
-        }
+    static record ValueAndHolder<T>(RegistrySetBuilder.RegisteredValue<T> value, Optional<Holder.Reference<T>> holder) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/core/RegistrySynchronization.java b/src/main/java/net/minecraft/core/RegistrySynchronization.java
index 3f8367f0447b637493eaf00eede2efffd844db40..ba927dee3c7fcf1d5af7e8f163378daed74d1e61 100644
--- a/src/main/java/net/minecraft/core/RegistrySynchronization.java
+++ b/src/main/java/net/minecraft/core/RegistrySynchronization.java
@@ -43,18 +43,18 @@ public class RegistrySynchronization {
     }
 
     private static <E> DataResult<? extends Codec<E>> getNetworkCodec(ResourceKey<? extends Registry<E>> resourceKey) {
-        return Optional.ofNullable((RegistrySynchronization.NetworkedRegistryData)NETWORKABLE_REGISTRIES.get(resourceKey)).map((networkedRegistryData) -> networkedRegistryData.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error(() -> "Unknown or not serializable registry: " + resourceKey));
+        return Optional.ofNullable((RegistrySynchronization.NetworkedRegistryData<E>)NETWORKABLE_REGISTRIES.get(resourceKey)).map((networkedRegistryData) -> networkedRegistryData.networkCodec()).map(DataResult::success).orElseGet(() -> DataResult.error(() -> "Unknown or not serializable registry: " + resourceKey));
     }
 
     private static <E> Codec<RegistryAccess> makeNetworkCodec() {
         Codec<ResourceKey<? extends Registry<E>>> codec = ResourceLocation.CODEC.xmap(ResourceKey::createRegistryKey, ResourceKey::location);
-        Codec<Registry<E>> codec2 = codec.partialDispatch("type", (registry) -> DataResult.success(registry.key()), (resourceKey) -> getNetworkCodec(resourceKey).map((codec) -> RegistryCodecs.networkCodec(resourceKey, Lifecycle.experimental(), codec)));
+        Codec<Registry<E>> codec2 = codec.partialDispatch("type", (registry) -> DataResult.success(registry.key()), (resourceKey) -> getNetworkCodec(resourceKey).map((codecIn) -> RegistryCodecs.networkCodec(resourceKey, Lifecycle.experimental(), codecIn)));
         UnboundedMapCodec<? extends ResourceKey<? extends Registry<?>>, ? extends Registry<?>> unboundedMapCodec = Codec.unboundedMap(codec, codec2);
         return captureMap(unboundedMapCodec);
     }
 
     private static <K extends ResourceKey<? extends Registry<?>>, V extends Registry<?>> Codec<RegistryAccess> captureMap(UnboundedMapCodec<K, V> unboundedMapCodec) {
-        return unboundedMapCodec.xmap(RegistryAccess.ImmutableRegistryAccess::new, (registryAccess) -> ownedNetworkableRegistries(registryAccess).collect(ImmutableMap.toImmutableMap((registryEntry) -> registryEntry.key(), (registryEntry) -> registryEntry.value())));
+        return unboundedMapCodec.xmap(RegistryAccess.ImmutableRegistryAccess::new, (registryAccess) -> ownedNetworkableRegistries(registryAccess).collect(ImmutableMap.toImmutableMap((registryEntry) -> (K) registryEntry.key(), (registryEntry) -> (V) registryEntry.value())));
     }
 
     public static Stream<RegistryAccess.RegistryEntry<?>> networkedRegistries(LayeredRegistryAccess<RegistryLayer> layeredRegistryAccess) {
@@ -67,16 +67,6 @@ public class RegistrySynchronization {
         return Stream.concat(stream2, stream);
     }
 
-    static record NetworkedRegistryData<E>(ResourceKey<? extends Registry<E>> a, Codec<E> b) {
-        private final ResourceKey<? extends Registry<E>> key;
-        private final Codec<E> networkCodec;
-
-        public ResourceKey<? extends Registry<E>> key() {
-            return this.key;
-        }
-
-        public Codec<E> networkCodec() {
-            return this.networkCodec;
-        }
+    static record NetworkedRegistryData<E>(ResourceKey<? extends Registry<E>> key, Codec<E> networkCodec) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/core/dispenser/BlockSource.java b/src/main/java/net/minecraft/core/dispenser/BlockSource.java
index c76422c9b26ce04bc5e527a9794411379f494051..d8e7d78cbf8bbe9b62bee901c921c61888478dfb 100644
--- a/src/main/java/net/minecraft/core/dispenser/BlockSource.java
+++ b/src/main/java/net/minecraft/core/dispenser/BlockSource.java
@@ -6,29 +6,8 @@ import net.minecraft.world.level.block.entity.DispenserBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.Vec3;
 
-public record BlockSource(ServerLevel a, BlockPos b, BlockState c, DispenserBlockEntity d) {
-    private final ServerLevel level;
-    private final BlockPos pos;
-    private final BlockState state;
-    private final DispenserBlockEntity blockEntity;
-
+public record BlockSource(ServerLevel level, BlockPos pos, BlockState state, DispenserBlockEntity blockEntity) {
     public Vec3 center() {
         return this.pos.getCenter();
     }
-
-    public ServerLevel level() {
-        return this.level;
-    }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public BlockState state() {
-        return this.state;
-    }
-
-    public DispenserBlockEntity blockEntity() {
-        return this.blockEntity;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/core/particles/SculkChargeParticleOptions.java b/src/main/java/net/minecraft/core/particles/SculkChargeParticleOptions.java
index 0c1fe8c68370712ac9862adac34c59550062ee67..271ca3bd0c3da3b5088291531e569f0eafc41479 100644
--- a/src/main/java/net/minecraft/core/particles/SculkChargeParticleOptions.java
+++ b/src/main/java/net/minecraft/core/particles/SculkChargeParticleOptions.java
@@ -8,8 +8,7 @@ import java.util.Locale;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.network.FriendlyByteBuf;
 
-public record SculkChargeParticleOptions(float c) implements ParticleOptions {
-    private final float roll;
+public record SculkChargeParticleOptions(float roll) implements ParticleOptions {
     public static final Codec<SculkChargeParticleOptions> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("roll").forGetter((sculkChargeParticleOptions) -> sculkChargeParticleOptions.roll)).apply(instance, SculkChargeParticleOptions::new));
     public static final ParticleOptions.Deserializer<SculkChargeParticleOptions> DESERIALIZER = new ParticleOptions.Deserializer<SculkChargeParticleOptions>() {
         public SculkChargeParticleOptions fromCommand(ParticleType<SculkChargeParticleOptions> particleType, StringReader stringReader) throws CommandSyntaxException {
@@ -34,8 +33,4 @@ public record SculkChargeParticleOptions(float c) implements ParticleOptions {
     public String writeToString() {
         return String.format(Locale.ROOT, "%s %.2f", BuiltInRegistries.PARTICLE_TYPE.getKey(this.getType()), this.roll);
     }
-
-    public float roll() {
-        return this.roll;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/core/registries/BuiltInRegistries.java b/src/main/java/net/minecraft/core/registries/BuiltInRegistries.java
index de836a0e63f14a1deb45781855d33cdd9759ab13..97672e0f4290fde29fcfe704ab53537a06973ae1 100644
--- a/src/main/java/net/minecraft/core/registries/BuiltInRegistries.java
+++ b/src/main/java/net/minecraft/core/registries/BuiltInRegistries.java
@@ -210,7 +210,7 @@ public class BuiltInRegistries {
     private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> resourceKey, R writableRegistry, BuiltInRegistries.RegistryBootstrap<T> registryBootstrap, Lifecycle lifecycle) {
         ResourceLocation resourceLocation = resourceKey.location();
         LOADERS.put(resourceLocation, () -> registryBootstrap.run(writableRegistry));
-        WRITABLE_REGISTRY.register(resourceKey, writableRegistry, lifecycle);
+        WRITABLE_REGISTRY.register((ResourceKey) resourceKey, writableRegistry, lifecycle);
         return writableRegistry;
     }
 
diff --git a/src/main/java/net/minecraft/data/HashCache.java b/src/main/java/net/minecraft/data/HashCache.java
index 515234c793ad42da080acd9cd105a798a191ed86..e2135ef84865e2cac6f8ecf1cbfe837944d7a966 100644
--- a/src/main/java/net/minecraft/data/HashCache.java
+++ b/src/main/java/net/minecraft/data/HashCache.java
@@ -190,10 +190,7 @@ public class HashCache {
         }
     }
 
-    static record ProviderCache(String a, ImmutableMap<Path, HashCode> b) {
-        final String version;
-        private final ImmutableMap<Path, HashCode> data;
-
+    static record ProviderCache(String version, ImmutableMap<Path, HashCode> data) {
         @Nullable
         public HashCode get(Path path) {
             return (HashCode)this.data.get(path);
@@ -279,20 +276,9 @@ public class HashCache {
             }
 
         }
-
-        public String version() {
-            return this.version;
-        }
-
-        public ImmutableMap<Path, HashCode> data() {
-            return this.data;
-        }
     }
 
-    static record ProviderCacheBuilder(String a, ConcurrentMap<Path, HashCode> b) {
-        private final String version;
-        private final ConcurrentMap<Path, HashCode> data;
-
+    static record ProviderCacheBuilder(String version, ConcurrentMap<Path, HashCode> data) {
         ProviderCacheBuilder(String s) {
             this(s, new ConcurrentHashMap());
         }
@@ -304,14 +290,6 @@ public class HashCache {
         public HashCache.ProviderCache build() {
             return new HashCache.ProviderCache(this.version, ImmutableMap.copyOf(this.data));
         }
-
-        public String version() {
-            return this.version;
-        }
-
-        public ConcurrentMap<Path, HashCode> data() {
-            return this.data;
-        }
     }
 
     @FunctionalInterface
@@ -319,21 +297,6 @@ public class HashCache {
         CompletableFuture<?> update(CachedOutput var1);
     }
 
-    public static record UpdateResult(String a, HashCache.ProviderCache b, int c) {
-        private final String providerId;
-        private final HashCache.ProviderCache cache;
-        private final int writes;
-
-        public String providerId() {
-            return this.providerId;
-        }
-
-        public HashCache.ProviderCache cache() {
-            return this.cache;
-        }
-
-        public int writes() {
-            return this.writes;
-        }
+    public static record UpdateResult(String providerId, HashCache.ProviderCache cache, int writes) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
index ff3b6feb8b4992b5aa9438f26d0489d822882d68..93d27b18cc913dd85a4affa3c86b3997a9661638 100644
--- a/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
+++ b/src/main/java/net/minecraft/data/info/RegistryDumpReport.java
@@ -33,14 +33,14 @@ public class RegistryDumpReport implements DataProvider {
             jsonObject.addProperty("default", resourceLocation.toString());
         }
 
-        int i = BuiltInRegistries.REGISTRY.getId(registry);
+        int i = ((Registry) BuiltInRegistries.REGISTRY).getId(registry);
         jsonObject.addProperty("protocol_id", i);
         JsonObject jsonObject2 = new JsonObject();
         registry.holders().forEach((reference) -> {
             T object = (T)reference.value();
-            int i = registry.getId(object);
-            JsonObject jsonObject2 = new JsonObject();
-            jsonObject2.addProperty("protocol_id", i);
+            int iIn = registry.getId(object);
+            JsonObject jsonObject2In = new JsonObject();
+            jsonObject2In.addProperty("protocol_id", iIn);
             jsonObject2.add(reference.key().location().toString(), jsonObject2);
         });
         jsonObject.add("entries", jsonObject2);
diff --git a/src/main/java/net/minecraft/data/loot/LootTableProvider.java b/src/main/java/net/minecraft/data/loot/LootTableProvider.java
index 59684258789e7a9b38f2bbd3fc43462f83fb3209..f09343b77c393446aa5c218e50ed0a82096dca13 100644
--- a/src/main/java/net/minecraft/data/loot/LootTableProvider.java
+++ b/src/main/java/net/minecraft/data/loot/LootTableProvider.java
@@ -84,16 +84,6 @@ public class LootTableProvider implements DataProvider {
         return "Loot Tables";
     }
 
-    public static record SubProviderEntry(Supplier<LootTableSubProvider> a, LootContextParamSet b) {
-        private final Supplier<LootTableSubProvider> provider;
-        final LootContextParamSet paramSet;
-
-        public Supplier<LootTableSubProvider> provider() {
-            return this.provider;
-        }
-
-        public LootContextParamSet paramSet() {
-            return this.paramSet;
-        }
+    public static record SubProviderEntry(Supplier<LootTableSubProvider> provider, LootContextParamSet paramSet) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/models/BlockModelGenerators.java b/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
index 5e3747aa0479f408d3d1ee01135e5710a38aeb34..63bf03689d92a0b742d2a4c5dcfe18376715a05f 100644
--- a/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
+++ b/src/main/java/net/minecraft/data/models/BlockModelGenerators.java
@@ -75,15 +75,15 @@ public class BlockModelGenerators {
     final BiConsumer<ResourceLocation, Supplier<JsonElement>> modelOutput;
     private final Consumer<Item> skippedAutoModelsOutput;
     final List<Block> nonOrientableTrapdoor = ImmutableList.of(Blocks.OAK_TRAPDOOR, Blocks.DARK_OAK_TRAPDOOR, Blocks.IRON_TRAPDOOR);
-    final Map<Block, BlockModelGenerators.BlockStateGeneratorSupplier> fullBlockModelCustomGenerators = ImmutableMap.builder().put(Blocks.STONE, BlockModelGenerators::createMirroredCubeGenerator).put(Blocks.DEEPSLATE, BlockModelGenerators::createMirroredColumnGenerator).put(Blocks.MUD_BRICKS, BlockModelGenerators::createNorthWestMirroredCubeGenerator).build();
-    final Map<Block, TexturedModel> texturedModels = ImmutableMap.builder().put(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.SANDSTONE)).put(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.RED_SANDSTONE)).put(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).put(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).put(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_SANDSTONE)))).put(Blocks.CUT_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.RED_SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_RED_SANDSTONE)))).put(Blocks.QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.QUARTZ_BLOCK)).put(Blocks.SMOOTH_QUARTZ, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.QUARTZ_BLOCK, "_bottom"))).put(Blocks.BLACKSTONE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.BLACKSTONE)).put(Blocks.DEEPSLATE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.DEEPSLATE)).put(Blocks.CHISELED_QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.CHISELED_QUARTZ_BLOCK).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_QUARTZ_BLOCK)))).put(Blocks.CHISELED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_SANDSTONE).updateTextures((textureMapping) -> {
+    final Map<Block, BlockModelGenerators.BlockStateGeneratorSupplier> fullBlockModelCustomGenerators = ImmutableMap.<Block, BlockModelGenerators.BlockStateGeneratorSupplier>builder().put(Blocks.STONE, BlockModelGenerators::createMirroredCubeGenerator).put(Blocks.DEEPSLATE, BlockModelGenerators::createMirroredColumnGenerator).put(Blocks.MUD_BRICKS, BlockModelGenerators::createNorthWestMirroredCubeGenerator).build();
+    final Map<Block, TexturedModel> texturedModels = ImmutableMap.<Block, TexturedModel>builder().put(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.SANDSTONE)).put(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.RED_SANDSTONE)).put(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).put(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).put(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_SANDSTONE)))).put(Blocks.CUT_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.RED_SANDSTONE).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_RED_SANDSTONE)))).put(Blocks.QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.QUARTZ_BLOCK)).put(Blocks.SMOOTH_QUARTZ, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.QUARTZ_BLOCK, "_bottom"))).put(Blocks.BLACKSTONE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.BLACKSTONE)).put(Blocks.DEEPSLATE, TexturedModel.COLUMN_WITH_WALL.get(Blocks.DEEPSLATE)).put(Blocks.CHISELED_QUARTZ_BLOCK, TexturedModel.COLUMN.get(Blocks.CHISELED_QUARTZ_BLOCK).updateTextures((textureMapping) -> textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_QUARTZ_BLOCK)))).put(Blocks.CHISELED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_SANDSTONE).updateTextures((textureMapping) -> {
         textureMapping.put(TextureSlot.END, TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"));
         textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_SANDSTONE));
     })).put(Blocks.CHISELED_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.CHISELED_RED_SANDSTONE).updateTextures((textureMapping) -> {
         textureMapping.put(TextureSlot.END, TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"));
         textureMapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CHISELED_RED_SANDSTONE));
     })).build();
-    static final Map<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>> SHAPE_CONSUMERS = ImmutableMap.builder().put(BlockFamily.Variant.BUTTON, BlockModelGenerators.BlockFamilyProvider::button).put(BlockFamily.Variant.DOOR, BlockModelGenerators.BlockFamilyProvider::door).put(BlockFamily.Variant.CHISELED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CRACKED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CUSTOM_FENCE, BlockModelGenerators.BlockFamilyProvider::customFence).put(BlockFamily.Variant.FENCE, BlockModelGenerators.BlockFamilyProvider::fence).put(BlockFamily.Variant.CUSTOM_FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::customFenceGate).put(BlockFamily.Variant.FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::fenceGate).put(BlockFamily.Variant.SIGN, BlockModelGenerators.BlockFamilyProvider::sign).put(BlockFamily.Variant.SLAB, BlockModelGenerators.BlockFamilyProvider::slab).put(BlockFamily.Variant.STAIRS, BlockModelGenerators.BlockFamilyProvider::stairs).put(BlockFamily.Variant.PRESSURE_PLATE, BlockModelGenerators.BlockFamilyProvider::pressurePlate).put(BlockFamily.Variant.TRAPDOOR, BlockModelGenerators.BlockFamilyProvider::trapdoor).put(BlockFamily.Variant.WALL, BlockModelGenerators.BlockFamilyProvider::wall).build();
+    static final Map<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>> SHAPE_CONSUMERS = ImmutableMap.<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>>builder().put(BlockFamily.Variant.BUTTON, BlockModelGenerators.BlockFamilyProvider::button).put(BlockFamily.Variant.DOOR, BlockModelGenerators.BlockFamilyProvider::door).put(BlockFamily.Variant.CHISELED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CRACKED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CUSTOM_FENCE, BlockModelGenerators.BlockFamilyProvider::customFence).put(BlockFamily.Variant.FENCE, BlockModelGenerators.BlockFamilyProvider::fence).put(BlockFamily.Variant.CUSTOM_FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::customFenceGate).put(BlockFamily.Variant.FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::fenceGate).put(BlockFamily.Variant.SIGN, BlockModelGenerators.BlockFamilyProvider::sign).put(BlockFamily.Variant.SLAB, BlockModelGenerators.BlockFamilyProvider::slab).put(BlockFamily.Variant.STAIRS, BlockModelGenerators.BlockFamilyProvider::stairs).put(BlockFamily.Variant.PRESSURE_PLATE, BlockModelGenerators.BlockFamilyProvider::pressurePlate).put(BlockFamily.Variant.TRAPDOOR, BlockModelGenerators.BlockFamilyProvider::trapdoor).put(BlockFamily.Variant.WALL, BlockModelGenerators.BlockFamilyProvider::wall).build();
     public static final List<Pair<BooleanProperty, Function<ResourceLocation, Variant>>> MULTIFACE_GENERATOR = List.of(Pair.of(BlockStateProperties.NORTH, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation)), Pair.of(BlockStateProperties.EAST, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)), Pair.of(BlockStateProperties.SOUTH, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180).with(VariantProperties.UV_LOCK, true)), Pair.of(BlockStateProperties.WEST, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true)), Pair.of(BlockStateProperties.UP, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.X_ROT, VariantProperties.Rotation.R270).with(VariantProperties.UV_LOCK, true)), Pair.of(BlockStateProperties.DOWN, (resourceLocation) -> Variant.variant().with(VariantProperties.MODEL, resourceLocation).with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.UV_LOCK, true)));
     private static final Map<BlockModelGenerators.BookSlotModelCacheKey, ResourceLocation> CHISELED_BOOKSHELF_SLOT_MODEL_CACHE = new HashMap();
 
@@ -2156,17 +2156,7 @@ public class BlockModelGenerators {
         BlockStateGenerator create(Block var1, ResourceLocation var2, TextureMapping var3, BiConsumer<ResourceLocation, Supplier<JsonElement>> var4);
     }
 
-    static record BookSlotModelCacheKey(ModelTemplate a, String b) {
-        private final ModelTemplate template;
-        private final String modelSuffix;
-
-        public ModelTemplate template() {
-            return this.template;
-        }
-
-        public String modelSuffix() {
-            return this.modelSuffix;
-        }
+    static record BookSlotModelCacheKey(ModelTemplate template, String modelSuffix) {
     }
 
     static enum TintState {
diff --git a/src/main/java/net/minecraft/data/models/ItemModelGenerators.java b/src/main/java/net/minecraft/data/models/ItemModelGenerators.java
index 92d034d730a89d3566fbb58807e8c3999e4b7e02..450b0f02d2fd06f603b41f63c88eb3f9516ee011 100644
--- a/src/main/java/net/minecraft/data/models/ItemModelGenerators.java
+++ b/src/main/java/net/minecraft/data/models/ItemModelGenerators.java
@@ -391,25 +391,9 @@ public class ItemModelGenerators {
         this.generateFlatItem(Items.SNORT_POTTERY_SHERD, ModelTemplates.FLAT_ITEM);
     }
 
-    static record TrimModelData(String a, float b, Map<ArmorMaterial, String> c) {
-        private final String name;
-        private final float itemModelIndex;
-        private final Map<ArmorMaterial, String> overrideArmorMaterials;
-
+    static record TrimModelData(String name, float itemModelIndex, Map<ArmorMaterial, String> overrideArmorMaterials) {
         public String name(ArmorMaterial armorMaterial) {
             return (String)this.overrideArmorMaterials.getOrDefault(armorMaterial, this.name);
         }
-
-        public String name() {
-            return this.name;
-        }
-
-        public float itemModelIndex() {
-            return this.itemModelIndex;
-        }
-
-        public Map<ArmorMaterial, String> overrideArmorMaterials() {
-            return this.overrideArmorMaterials;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/data/models/blockstates/Selector.java b/src/main/java/net/minecraft/data/models/blockstates/Selector.java
index 1680f2a0b0d799933a7d099426148fe82dc84293..2b033e63fca12eb331bb130f45cc320b06949242 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/Selector.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/Selector.java
@@ -12,11 +12,11 @@ public final class Selector {
     private final List<Property.Value<?>> values;
 
     public Selector extend(Property.Value<?> value) {
-        return new Selector(ImmutableList.builder().addAll(this.values).add(value).build());
+        return new Selector(ImmutableList.<Property.Value<?>>builder().addAll(this.values).add(value).build());
     }
 
     public Selector extend(Selector selector) {
-        return new Selector(ImmutableList.builder().addAll(this.values).addAll(selector.values).build());
+        return new Selector(ImmutableList.<Property.Value<?>>builder().addAll(this.values).addAll(selector.values).build());
     }
 
     private Selector(List<Property.Value<?>> list) {
diff --git a/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java b/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
index 0175fa79e75a6dda6df00ee4f7bcb5d7c762fcc4..1d56e9173bf839b376659f8f24faa785be44ee58 100644
--- a/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
+++ b/src/main/java/net/minecraft/data/models/blockstates/VariantProperties.java
@@ -4,11 +4,11 @@ import com.google.gson.JsonPrimitive;
 import net.minecraft.resources.ResourceLocation;
 
 public class VariantProperties {
-    public static final VariantProperty<VariantProperties.Rotation> X_ROT = new VariantProperty("x", (rotation) -> new JsonPrimitive(rotation.value));
-    public static final VariantProperty<VariantProperties.Rotation> Y_ROT = new VariantProperty("y", (rotation) -> new JsonPrimitive(rotation.value));
+    public static final VariantProperty<VariantProperties.Rotation> X_ROT = new VariantProperty<>("x", (rotation) -> new JsonPrimitive(rotation.value));
+    public static final VariantProperty<VariantProperties.Rotation> Y_ROT = new VariantProperty<>("y", (rotation) -> new JsonPrimitive(rotation.value));
     public static final VariantProperty<ResourceLocation> MODEL = new VariantProperty<>("model", (resourceLocation) -> new JsonPrimitive(resourceLocation.toString()));
-    public static final VariantProperty<Boolean> UV_LOCK = new VariantProperty("uvlock", JsonPrimitive::new);
-    public static final VariantProperty<Integer> WEIGHT = new VariantProperty("weight", JsonPrimitive::new);
+    public static final VariantProperty<Boolean> UV_LOCK = new VariantProperty<>("uvlock", JsonPrimitive::new);
+    public static final VariantProperty<Integer> WEIGHT = new VariantProperty<>("weight", JsonPrimitive::new);
 
     public static enum Rotation {
         R0(0),
diff --git a/src/main/java/net/minecraft/data/models/model/ModelTemplate.java b/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
index 1bff9692151f73fe1509c126995d034377566e72..45b57cc07f39edb58f544a5b80b4b6548aa2b9b3 100644
--- a/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
+++ b/src/main/java/net/minecraft/data/models/model/ModelTemplate.java
@@ -61,7 +61,7 @@ public class ModelTemplate {
     }
 
     private Map<TextureSlot, ResourceLocation> createMap(TextureMapping textureMapping) {
-        return Streams.concat(new Stream[]{this.requiredSlots.stream(), textureMapping.getForced()}).collect(ImmutableMap.toImmutableMap(Function.identity(), textureMapping::get));
+        return (Map<TextureSlot, ResourceLocation>) Streams.concat(new Stream[]{this.requiredSlots.stream(), textureMapping.getForced()}).collect(ImmutableMap.toImmutableMap(Function.identity(), textureMapping::get));
     }
 
     public interface JsonFactory {
diff --git a/src/main/java/net/minecraft/data/recipes/RecipeProvider.java b/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
index 5794de2ab55a207adcca3875f2be11040b1a2999..f04b248739e9e63bb4dd5c5784e35aa92c524d0a 100644
--- a/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
+++ b/src/main/java/net/minecraft/data/recipes/RecipeProvider.java
@@ -45,7 +45,7 @@ import net.minecraft.world.level.block.Blocks;
 public abstract class RecipeProvider implements DataProvider {
     final PackOutput.PathProvider recipePathProvider;
     final PackOutput.PathProvider advancementPathProvider;
-    private static final Map<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>> SHAPE_BUILDERS = ImmutableMap.builder().put(BlockFamily.Variant.BUTTON, (itemLike, itemLike2) -> buttonBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CHISELED, (itemLike, itemLike2) -> chiseledBuilder(RecipeCategory.BUILDING_BLOCKS, itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUT, (itemLike, itemLike2) -> cutBuilder(RecipeCategory.BUILDING_BLOCKS, itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.DOOR, (itemLike, itemLike2) -> doorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUSTOM_FENCE, (itemLike, itemLike2) -> fenceBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE, (itemLike, itemLike2) -> fenceBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUSTOM_FENCE_GATE, (itemLike, itemLike2) -> fenceGateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE_GATE, (itemLike, itemLike2) -> fenceGateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SIGN, (itemLike, itemLike2) -> signBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SLAB, (itemLike, itemLike2) -> slabBuilder(RecipeCategory.BUILDING_BLOCKS, itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.STAIRS, (itemLike, itemLike2) -> stairBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.PRESSURE_PLATE, (itemLike, itemLike2) -> pressurePlateBuilder(RecipeCategory.REDSTONE, itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.POLISHED, (itemLike, itemLike2) -> polishedBuilder(RecipeCategory.BUILDING_BLOCKS, itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.TRAPDOOR, (itemLike, itemLike2) -> trapdoorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.WALL, (itemLike, itemLike2) -> wallBuilder(RecipeCategory.DECORATIONS, itemLike, Ingredient.of(itemLike2))).build();
+    private static final Map<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>> SHAPE_BUILDERS = ImmutableMap.<BlockFamily.Variant, BiFunction<ItemLike, ItemLike, RecipeBuilder>>builder().put(BlockFamily.Variant.BUTTON, (itemLike, itemLike2) -> buttonBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CHISELED, (itemLike, itemLike2) -> chiseledBuilder(RecipeCategory.BUILDING_BLOCKS, itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUT, (itemLike, itemLike2) -> cutBuilder(RecipeCategory.BUILDING_BLOCKS, itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.DOOR, (itemLike, itemLike2) -> doorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUSTOM_FENCE, (itemLike, itemLike2) -> fenceBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE, (itemLike, itemLike2) -> fenceBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.CUSTOM_FENCE_GATE, (itemLike, itemLike2) -> fenceGateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.FENCE_GATE, (itemLike, itemLike2) -> fenceGateBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SIGN, (itemLike, itemLike2) -> signBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.SLAB, (itemLike, itemLike2) -> slabBuilder(RecipeCategory.BUILDING_BLOCKS, itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.STAIRS, (itemLike, itemLike2) -> stairBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.PRESSURE_PLATE, (itemLike, itemLike2) -> pressurePlateBuilder(RecipeCategory.REDSTONE, itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.POLISHED, (itemLike, itemLike2) -> polishedBuilder(RecipeCategory.BUILDING_BLOCKS, itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.TRAPDOOR, (itemLike, itemLike2) -> trapdoorBuilder(itemLike, Ingredient.of(itemLike2))).put(BlockFamily.Variant.WALL, (itemLike, itemLike2) -> wallBuilder(RecipeCategory.DECORATIONS, itemLike, Ingredient.of(itemLike2))).build();
 
     public RecipeProvider(PackOutput packOutput) {
         this.recipePathProvider = packOutput.createPathProvider(PackOutput.Target.DATA_PACK, "recipes");
@@ -335,7 +335,7 @@ public abstract class RecipeProvider implements DataProvider {
     }
 
     protected static void waxRecipes(RecipeOutput recipeOutput) {
-        ((BiMap)HoneycombItem.WAXABLES.get()).forEach((block, block2) -> ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, block2).requires(block).requires(Items.HONEYCOMB).group(getItemName(block2)).unlockedBy(getHasName(block), has(block)).save(recipeOutput, getConversionRecipeName(block2, Items.HONEYCOMB)));
+        HoneycombItem.WAXABLES.get().forEach((block, block2) -> ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, block2).requires(block).requires(Items.HONEYCOMB).group(getItemName(block2)).unlockedBy(getHasName(block), has(block)).save(recipeOutput, getConversionRecipeName(block2, Items.HONEYCOMB)));
     }
 
     protected static void generateRecipes(RecipeOutput recipeOutput, BlockFamily blockFamily) {
@@ -419,4 +419,4 @@ public abstract class RecipeProvider implements DataProvider {
     public final String getName() {
         return "Recipes";
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/data/recipes/SimpleCookingRecipeBuilder.java b/src/main/java/net/minecraft/data/recipes/SimpleCookingRecipeBuilder.java
index c7a9098b66eb54f4f155e51fca3f96a7c578cc6c..3c390fe95e90e625b45fd68ca74a3fcf5e69fc0a 100644
--- a/src/main/java/net/minecraft/data/recipes/SimpleCookingRecipeBuilder.java
+++ b/src/main/java/net/minecraft/data/recipes/SimpleCookingRecipeBuilder.java
@@ -113,17 +113,17 @@ public class SimpleCookingRecipeBuilder implements RecipeBuilder {
         }
     }
 
-    static record Result(ResourceLocation a, String b, CookingBookCategory c, Ingredient d, Item e, float f, int g, AdvancementHolder h, RecipeSerializer<? extends AbstractCookingRecipe> i) implements FinishedRecipe {
-        private final ResourceLocation id;
-        private final String group;
-        private final CookingBookCategory category;
-        private final Ingredient ingredient;
-        private final Item result;
-        private final float experience;
-        private final int cookingTime;
-        private final AdvancementHolder advancement;
-        private final RecipeSerializer<? extends AbstractCookingRecipe> type;
-
+    static record Result(
+            ResourceLocation id,
+            String group,
+            CookingBookCategory category,
+            Ingredient ingredient,
+            Item result,
+            float experience,
+            int cookingTime,
+            AdvancementHolder advancement,
+            RecipeSerializer<? extends AbstractCookingRecipe> type
+    ) implements FinishedRecipe {
         public void serializeRecipeData(JsonObject jsonObject) {
             if (!this.group.isEmpty()) {
                 jsonObject.addProperty("group", this.group);
@@ -135,41 +135,5 @@ public class SimpleCookingRecipeBuilder implements RecipeBuilder {
             jsonObject.addProperty("experience", this.experience);
             jsonObject.addProperty("cookingtime", this.cookingTime);
         }
-
-        public ResourceLocation id() {
-            return this.id;
-        }
-
-        public String group() {
-            return this.group;
-        }
-
-        public CookingBookCategory category() {
-            return this.category;
-        }
-
-        public Ingredient ingredient() {
-            return this.ingredient;
-        }
-
-        public Item result() {
-            return this.result;
-        }
-
-        public float experience() {
-            return this.experience;
-        }
-
-        public int cookingTime() {
-            return this.cookingTime;
-        }
-
-        public AdvancementHolder advancement() {
-            return this.advancement;
-        }
-
-        public RecipeSerializer<? extends AbstractCookingRecipe> type() {
-            return this.type;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/data/recipes/SingleItemRecipeBuilder.java b/src/main/java/net/minecraft/data/recipes/SingleItemRecipeBuilder.java
index a76fc72c96e65457d9fd20a2e6c918a87564b44a..e5d183afba9d66159b2110cd1728740adf4c3d35 100644
--- a/src/main/java/net/minecraft/data/recipes/SingleItemRecipeBuilder.java
+++ b/src/main/java/net/minecraft/data/recipes/SingleItemRecipeBuilder.java
@@ -70,15 +70,7 @@ public class SingleItemRecipeBuilder implements RecipeBuilder {
         }
     }
 
-    public static record Result(ResourceLocation a, RecipeSerializer<?> b, String c, Ingredient d, Item e, int f, AdvancementHolder g) implements FinishedRecipe {
-        private final ResourceLocation id;
-        private final RecipeSerializer<?> type;
-        private final String group;
-        private final Ingredient ingredient;
-        private final Item result;
-        private final int count;
-        private final AdvancementHolder advancement;
-
+    public static record Result(ResourceLocation id, RecipeSerializer<?> type, String group, Ingredient ingredient, Item result, int count, AdvancementHolder advancement) implements FinishedRecipe {
         public void serializeRecipeData(JsonObject jsonObject) {
             if (!this.group.isEmpty()) {
                 jsonObject.addProperty("group", this.group);
@@ -88,33 +80,5 @@ public class SingleItemRecipeBuilder implements RecipeBuilder {
             jsonObject.addProperty("result", BuiltInRegistries.ITEM.getKey(this.result).toString());
             jsonObject.addProperty("count", this.count);
         }
-
-        public ResourceLocation id() {
-            return this.id;
-        }
-
-        public RecipeSerializer<?> type() {
-            return this.type;
-        }
-
-        public String group() {
-            return this.group;
-        }
-
-        public Ingredient ingredient() {
-            return this.ingredient;
-        }
-
-        public Item result() {
-            return this.result;
-        }
-
-        public int count() {
-            return this.count;
-        }
-
-        public AdvancementHolder advancement() {
-            return this.advancement;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/data/recipes/SmithingTransformRecipeBuilder.java b/src/main/java/net/minecraft/data/recipes/SmithingTransformRecipeBuilder.java
index 43500dae40135707de593d3695e9be9b0d3e08f5..f9fe2a50e7dde255bc776a2e256c921f3f6f5894 100644
--- a/src/main/java/net/minecraft/data/recipes/SmithingTransformRecipeBuilder.java
+++ b/src/main/java/net/minecraft/data/recipes/SmithingTransformRecipeBuilder.java
@@ -59,15 +59,15 @@ public class SmithingTransformRecipeBuilder {
         }
     }
 
-    public static record Result(ResourceLocation a, RecipeSerializer<?> b, Ingredient c, Ingredient d, Ingredient e, Item f, AdvancementHolder g) implements FinishedRecipe {
-        private final ResourceLocation id;
-        private final RecipeSerializer<?> type;
-        private final Ingredient template;
-        private final Ingredient base;
-        private final Ingredient addition;
-        private final Item result;
-        private final AdvancementHolder advancement;
-
+    public static record Result(
+            ResourceLocation id,
+            RecipeSerializer<?> type,
+            Ingredient template,
+            Ingredient base,
+            Ingredient addition,
+            Item result,
+            AdvancementHolder advancement
+    ) implements FinishedRecipe {
         public void serializeRecipeData(JsonObject jsonObject) {
             jsonObject.add("template", this.template.toJson(true));
             jsonObject.add("base", this.base.toJson(true));
@@ -76,33 +76,5 @@ public class SmithingTransformRecipeBuilder {
             jsonObject2.addProperty("item", BuiltInRegistries.ITEM.getKey(this.result).toString());
             jsonObject.add("result", jsonObject2);
         }
-
-        public ResourceLocation id() {
-            return this.id;
-        }
-
-        public RecipeSerializer<?> type() {
-            return this.type;
-        }
-
-        public Ingredient template() {
-            return this.template;
-        }
-
-        public Ingredient base() {
-            return this.base;
-        }
-
-        public Ingredient addition() {
-            return this.addition;
-        }
-
-        public Item result() {
-            return this.result;
-        }
-
-        public AdvancementHolder advancement() {
-            return this.advancement;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/data/recipes/SmithingTrimRecipeBuilder.java b/src/main/java/net/minecraft/data/recipes/SmithingTrimRecipeBuilder.java
index 3708e6e3c98403d34de22ea27f4dd1fde2f69675..db023db8dc555bc786e393e5ce2b67020e828cbe 100644
--- a/src/main/java/net/minecraft/data/recipes/SmithingTrimRecipeBuilder.java
+++ b/src/main/java/net/minecraft/data/recipes/SmithingTrimRecipeBuilder.java
@@ -51,42 +51,18 @@ public class SmithingTrimRecipeBuilder {
         }
     }
 
-    public static record Result(ResourceLocation a, RecipeSerializer<?> b, Ingredient c, Ingredient d, Ingredient e, AdvancementHolder f) implements FinishedRecipe {
-        private final ResourceLocation id;
-        private final RecipeSerializer<?> type;
-        private final Ingredient template;
-        private final Ingredient base;
-        private final Ingredient addition;
-        private final AdvancementHolder advancement;
-
+    public static record Result(
+            ResourceLocation id,
+            RecipeSerializer<?> type,
+            Ingredient template,
+            Ingredient base,
+            Ingredient addition,
+            AdvancementHolder advancement
+    ) implements FinishedRecipe {
         public void serializeRecipeData(JsonObject jsonObject) {
             jsonObject.add("template", this.template.toJson(true));
             jsonObject.add("base", this.base.toJson(true));
             jsonObject.add("addition", this.addition.toJson(true));
         }
-
-        public ResourceLocation id() {
-            return this.id;
-        }
-
-        public RecipeSerializer<?> type() {
-            return this.type;
-        }
-
-        public Ingredient template() {
-            return this.template;
-        }
-
-        public Ingredient base() {
-            return this.base;
-        }
-
-        public Ingredient addition() {
-            return this.addition;
-        }
-
-        public AdvancementHolder advancement() {
-            return this.advancement;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/data/registries/VanillaRegistries.java b/src/main/java/net/minecraft/data/registries/VanillaRegistries.java
index 38f0cf7b2c715fba282f4f22c9cfccdceffcdeff..c0283a9b1d00ebc3320a32ca64cef4faef361861 100644
--- a/src/main/java/net/minecraft/data/registries/VanillaRegistries.java
+++ b/src/main/java/net/minecraft/data/registries/VanillaRegistries.java
@@ -46,8 +46,8 @@ public class VanillaRegistries {
             ResourceLocation resourceLocation = reference.key().location();
             List<HolderSet<PlacedFeature>> list = ((Biome)reference.value()).getGenerationSettings().features();
             list.stream().flatMap(HolderSet::stream).forEach((holder) -> holder.unwrap().ifLeft((resourceKey) -> {
-                    Holder.Reference<PlacedFeature> reference = holderGetter.getOrThrow(resourceKey);
-                    if (!validatePlacedFeature((PlacedFeature)reference.value())) {
+                    Holder.Reference<PlacedFeature> referenceIn = holderGetter.getOrThrow(resourceKey);
+                    if (!validatePlacedFeature((PlacedFeature)referenceIn.value())) {
                         Util.logAndPauseIfInIde("Placed feature " + resourceKey.location() + " in biome " + resourceLocation + " is missing BiomeFilter.biome()");
                     }
 
diff --git a/src/main/java/net/minecraft/data/structures/SnbtDatafixer.java b/src/main/java/net/minecraft/data/structures/SnbtDatafixer.java
index 2a1249776fc21f36d9c6e5fe4af3de6a9d36b287..5eb394c68ee74bcc4719c0b8dfd56569f674fc99 100644
--- a/src/main/java/net/minecraft/data/structures/SnbtDatafixer.java
+++ b/src/main/java/net/minecraft/data/structures/SnbtDatafixer.java
@@ -30,8 +30,8 @@ public class SnbtDatafixer {
         try {
             stream.filter((path) -> path.toString().endsWith(".snbt")).forEach((path) -> {
                 try {
-                    String s = Files.readString(path);
-                    CompoundTag compoundTag = NbtUtils.snbtToStructure(s);
+                    String text = Files.readString(path);
+                    CompoundTag compoundTag = NbtUtils.snbtToStructure(text);
                     CompoundTag compoundTag2 = StructureUpdater.update(path.toString(), compoundTag);
                     NbtToSnbt.writeSnbt(CachedOutput.NO_CACHE, path, NbtUtils.structureToSnbt(compoundTag2));
                 } catch (IOException | CommandSyntaxException var4) {
@@ -55,4 +55,4 @@ public class SnbtDatafixer {
         }
 
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/data/structures/SnbtToNbt.java b/src/main/java/net/minecraft/data/structures/SnbtToNbt.java
index d6e2be0fd8b63bb015eca843ff0fa9fa4b0c37a2..c98228608aa75b5d12b3395ed57643cd83066e8e 100644
--- a/src/main/java/net/minecraft/data/structures/SnbtToNbt.java
+++ b/src/main/java/net/minecraft/data/structures/SnbtToNbt.java
@@ -141,7 +141,7 @@ public class SnbtToNbt implements DataProvider {
         try {
             cachedOutput.writeIfNeeded(path2, taskResult.payload, taskResult.hash);
         } catch (IOException var6) {
-            LOGGER.error("Couldn't write structure {} at {}", new Object[]{taskResult.name, path2, var6});
+            LOGGER.error("Couldn't write structure {} at {}", taskResult.name, path2, var6);
         }
 
     }
@@ -157,21 +157,6 @@ public class SnbtToNbt implements DataProvider {
         }
     }
 
-    static record TaskResult(String a, byte[] b, HashCode c) {
-        final String name;
-        final byte[] payload;
-        final HashCode hash;
-
-        public String name() {
-            return this.name;
-        }
-
-        public byte[] payload() {
-            return this.payload;
-        }
-
-        public HashCode hash() {
-            return this.hash;
-        }
+    static record TaskResult(String name, byte[] payload, HashCode hash) {
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/data/tags/TagsProvider.java b/src/main/java/net/minecraft/data/tags/TagsProvider.java
index 3ae0e26aa4e1b3c2217a508aada1eef728b88461..187df2f219ec12f48e378603c4baf6427dfd5c30 100644
--- a/src/main/java/net/minecraft/data/tags/TagsProvider.java
+++ b/src/main/java/net/minecraft/data/tags/TagsProvider.java
@@ -59,17 +59,7 @@ public abstract class TagsProvider<T> implements DataProvider {
             this.contentsDone.complete(null);
             return provider;
         }).thenCombineAsync(this.parentProvider, (provider, tagLookup) -> {
-            record CombinedData<T>(HolderLookup.Provider a, TagsProvider.TagLookup<T> b) {
-                final HolderLookup.Provider contents;
-                final TagsProvider.TagLookup<T> parent;
-
-                public HolderLookup.Provider contents() {
-                    return this.contents;
-                }
-
-                public TagsProvider.TagLookup<T> parent() {
-                    return this.parent;
-                }
+            record CombinedData<T>(HolderLookup.Provider contents, TagsProvider.TagLookup<T> parent) {
             }
 
             return new CombinedData(provider, tagLookup);
diff --git a/src/main/java/net/minecraft/data/worldgen/placement/PlacementUtils.java b/src/main/java/net/minecraft/data/worldgen/placement/PlacementUtils.java
index 1b4a5080c7b9b25a87348e9e7253e1e7e0d2c9df..3af0bb043f34313d708fb3cd4d82fc9fd35d25a0 100644
--- a/src/main/java/net/minecraft/data/worldgen/placement/PlacementUtils.java
+++ b/src/main/java/net/minecraft/data/worldgen/placement/PlacementUtils.java
@@ -84,7 +84,7 @@ public class PlacementUtils {
     }
 
     public static <FC extends FeatureConfiguration, F extends Feature<FC>> Holder<PlacedFeature> inlinePlaced(F feature, FC featureConfiguration, PlacementModifier... placementModifiers) {
-        return inlinePlaced(Holder.direct(new ConfiguredFeature(feature, featureConfiguration)), placementModifiers);
+        return inlinePlaced(Holder.direct(new ConfiguredFeature<>(feature, featureConfiguration)), placementModifiers);
     }
 
     public static <FC extends FeatureConfiguration, F extends Feature<FC>> Holder<PlacedFeature> onlyWhenEmpty(F feature, FC featureConfiguration) {
diff --git a/src/main/java/net/minecraft/data/worldgen/placement/VegetationPlacements.java b/src/main/java/net/minecraft/data/worldgen/placement/VegetationPlacements.java
index 77c7475ae0035e7b1f4be1e6d0a839669604fdee..477a60c6803b2b5e78c5212155ba4bf35c3de10d 100644
--- a/src/main/java/net/minecraft/data/worldgen/placement/VegetationPlacements.java
+++ b/src/main/java/net/minecraft/data/worldgen/placement/VegetationPlacements.java
@@ -130,7 +130,7 @@ public class VegetationPlacements {
     }
 
     private static Builder<PlacementModifier> treePlacementBase(PlacementModifier placementModifier) {
-        return ImmutableList.builder().add(placementModifier).add(InSquarePlacement.spread()).add(TREE_THRESHOLD).add(PlacementUtils.HEIGHTMAP_OCEAN_FLOOR).add(BiomeFilter.biome());
+        return ImmutableList.<PlacementModifier>builder().add(placementModifier).add(InSquarePlacement.spread()).add(TREE_THRESHOLD).add(PlacementUtils.HEIGHTMAP_OCEAN_FLOOR).add(BiomeFilter.biome());
     }
 
     public static List<PlacementModifier> treePlacement(PlacementModifier placementModifier) {
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java b/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
index 3ad7d39a6c6828b7856431f941aeeed79e6c77bd..d453ef45ffd5d01a0a73084beceb66b8dda0c918 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestBatchRunner.java
@@ -34,8 +34,8 @@ public class GameTestBatchRunner {
         this.testTicker = gameTestTicker;
         this.testsPerRow = i;
         this.batches = collection.stream().map((gameTestBatch) -> {
-            Collection<GameTestInfo> collection = gameTestBatch.getTestFunctions().stream().map((testFunction) -> new GameTestInfo(testFunction, rotation, serverLevel)).collect(ImmutableList.toImmutableList());
-            return Pair.of(gameTestBatch, collection);
+            Collection<GameTestInfo> collectionIn = gameTestBatch.getTestFunctions().stream().map((testFunction) -> new GameTestInfo(testFunction, rotation, serverLevel)).collect(ImmutableList.toImmutableList());
+            return Pair.of(gameTestBatch, collectionIn);
         }).collect(ImmutableList.toImmutableList());
         this.allTestInfos = this.batches.stream().flatMap((pair) -> (pair.getSecond()).stream()).collect(ImmutableList.toImmutableList());
     }
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java b/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
index 2817067917f1890602a4f6e9c5cd0aaf4f79de08..159de76591d69380119ec68867a758354567f779 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestRegistry.java
@@ -51,7 +51,7 @@ public class GameTestRegistry {
         T annotation = method.getAnnotation(clazz);
         if (annotation != null) {
             String s = (String)function.apply(annotation);
-            Consumer<ServerLevel> consumer = map.putIfAbsent(s, turnMethodIntoConsumer(method));
+            Consumer<ServerLevel> consumer = map.putIfAbsent(s, (Consumer<ServerLevel>) turnMethodIntoConsumer(method));
             if (consumer != null) {
                 throw new RuntimeException("Hey, there should only be one " + clazz + " method per batch. Batch '" + s + "' has more than one!");
             }
@@ -101,7 +101,7 @@ public class GameTestRegistry {
     private static Collection<TestFunction> useTestGeneratorMethod(Method method) {
         try {
             Object object = method.getDeclaringClass().newInstance();
-            return method.invoke(object);
+            return (Collection<TestFunction>) method.invoke(object);
         } catch (ReflectiveOperationException var2) {
             throw new RuntimeException(var2);
         }
@@ -115,7 +115,7 @@ public class GameTestRegistry {
         String s4 = gameTest.template().isEmpty() ? s3 : s2 + "." + gameTest.template();
         String s5 = gameTest.batch();
         Rotation rotation = StructureUtils.getRotationForRotationSteps(gameTest.rotationSteps());
-        return new TestFunction(s5, s3, s4, rotation, gameTest.timeoutTicks(), gameTest.setupTicks(), gameTest.required(), gameTest.requiredSuccesses(), gameTest.attempts(), turnMethodIntoConsumer(method));
+        return new TestFunction(s5, s3, s4, rotation, gameTest.timeoutTicks(), gameTest.setupTicks(), gameTest.required(), gameTest.requiredSuccesses(), gameTest.attempts(), (Consumer<GameTestHelper>) turnMethodIntoConsumer(method));
     }
 
     private static Consumer<?> turnMethodIntoConsumer(Method method) {
diff --git a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
index 2ead86691ef5d6df54092762bae1203a3975a9a3..a9abc4457cdf4b25660d2778818face49ca0d3ab 100644
--- a/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
+++ b/src/main/java/net/minecraft/gametest/framework/GameTestRunner.java
@@ -48,8 +48,8 @@ public class GameTestRunner {
             Consumer<ServerLevel> consumer = GameTestRegistry.getBeforeBatchFunction(s);
             Consumer<ServerLevel> consumer2 = GameTestRegistry.getAfterBatchFunction(s);
             MutableInt mutableInt = new MutableInt();
-            Collection<TestFunction> collection = entry.getValue();
-            return Streams.stream(Iterables.partition(collection, 100)).map((list) -> new GameTestBatch(s + ":" + mutableInt.incrementAndGet(), ImmutableList.copyOf(list), consumer, consumer2));
+            Collection<TestFunction> collectionIn = entry.getValue();
+            return Streams.stream(Iterables.partition(collectionIn, 100)).map((list) -> new GameTestBatch(s + ":" + mutableInt.incrementAndGet(), ImmutableList.copyOf(list), consumer, consumer2));
         }).collect(ImmutableList.toImmutableList());
     }
 
@@ -59,9 +59,9 @@ public class GameTestRunner {
         BlockPos blockPos3 = blockPos.offset(i, 0, i);
         BlockPos.betweenClosedStream(blockPos2, blockPos3).filter((blockPosx) -> serverLevel.getBlockState(blockPosx).is(Blocks.STRUCTURE_BLOCK)).forEach((blockPosx) -> {
             StructureBlockEntity structureBlockEntity = (StructureBlockEntity)serverLevel.getBlockEntity(blockPosx);
-            BlockPos blockPos2 = structureBlockEntity.getBlockPos();
+            BlockPos pos = structureBlockEntity.getBlockPos();
             BoundingBox boundingBox = StructureUtils.getStructureBoundingBox(structureBlockEntity);
-            StructureUtils.clearSpaceForStructure(boundingBox, blockPos2.getY(), serverLevel);
+            StructureUtils.clearSpaceForStructure(boundingBox, pos.getY(), serverLevel);
         });
     }
 
diff --git a/src/main/java/net/minecraft/nbt/NbtOps.java b/src/main/java/net/minecraft/nbt/NbtOps.java
index b1653642a1f1d4a8923e9e5dba592e447be5ca88..027829c772b08ec0dde250c539046d400b950519 100644
--- a/src/main/java/net/minecraft/nbt/NbtOps.java
+++ b/src/main/java/net/minecraft/nbt/NbtOps.java
@@ -161,11 +161,11 @@ public class NbtOps implements DynamicOps<Tag> {
 
             List<Tag> list = Lists.newArrayList();
             mapLike.entries().forEach((pair) -> {
-                Tag tag = (Tag)pair.getFirst();
-                if (!(tag instanceof StringTag)) {
-                    list.add(tag);
+                Tag tagIn = (Tag)pair.getFirst();
+                if (!(tagIn instanceof StringTag)) {
+                    list.add(tagIn);
                 } else {
-                    compoundTag.put(tag.getAsString(), (Tag)pair.getSecond());
+                    compoundTag.put(tagIn.getAsString(), (Tag)pair.getSecond());
                 }
             });
             return !list.isEmpty() ? DataResult.error(() -> "some keys are not strings: " + list, compoundTag) : DataResult.success(compoundTag);
@@ -249,7 +249,7 @@ public class NbtOps implements DynamicOps<Tag> {
     public DataResult<Consumer<Consumer<Tag>>> getList(Tag tag) {
         if (tag instanceof ListTag) {
             ListTag listTag = (ListTag)tag;
-            return listTag.getElementType() == 10 ? DataResult.success((consumer) -> listTag.forEach((tag) -> consumer.accept(tryUnwrap((CompoundTag)tag)))) : DataResult.success(listTag::forEach);
+            return listTag.getElementType() == 10 ? DataResult.success((consumer) -> listTag.forEach((tagIn) -> consumer.accept(tryUnwrap((CompoundTag)tagIn)))) : DataResult.success(listTag::forEach);
         } else if (tag instanceof CollectionTag) {
             CollectionTag<?> collectionTag = (CollectionTag)tag;
             return DataResult.success(collectionTag::forEach);
@@ -263,7 +263,7 @@ public class NbtOps implements DynamicOps<Tag> {
             ByteArrayTag byteArrayTag = (ByteArrayTag)tag;
             return DataResult.success(ByteBuffer.wrap(byteArrayTag.getAsByteArray()));
         } else {
-            return super.getByteBuffer(tag);
+            return DynamicOps.super.getByteBuffer(tag);
         }
     }
 
@@ -276,7 +276,7 @@ public class NbtOps implements DynamicOps<Tag> {
             IntArrayTag intArrayTag = (IntArrayTag)tag;
             return DataResult.success(Arrays.stream(intArrayTag.getAsIntArray()));
         } else {
-            return super.getIntStream(tag);
+            return DynamicOps.super.getIntStream(tag);
         }
     }
 
@@ -289,7 +289,7 @@ public class NbtOps implements DynamicOps<Tag> {
             LongArrayTag longArrayTag = (LongArrayTag)tag;
             return DataResult.success(Arrays.stream(longArrayTag.getAsLongArray()));
         } else {
-            return super.getLongStream(tag);
+            return DynamicOps.super.getLongStream(tag);
         }
     }
 
diff --git a/src/main/java/net/minecraft/nbt/NbtUtils.java b/src/main/java/net/minecraft/nbt/NbtUtils.java
index 9afd5193e47541f265df95b95cfbc83800c71049..eefec750962a000080873438f1b197a3bbd19a34 100644
--- a/src/main/java/net/minecraft/nbt/NbtUtils.java
+++ b/src/main/java/net/minecraft/nbt/NbtUtils.java
@@ -43,8 +43,8 @@ import net.minecraft.world.level.material.FluidState;
 import org.slf4j.Logger;
 
 public final class NbtUtils {
-    private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.comparingInt((listTag) -> listTag.getInt(1)).thenComparingInt((listTag) -> listTag.getInt(0)).thenComparingInt((listTag) -> listTag.getInt(2));
-    private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.comparingDouble((listTag) -> listTag.getDouble(1)).thenComparingDouble((listTag) -> listTag.getDouble(0)).thenComparingDouble((listTag) -> listTag.getDouble(2));
+    private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.<ListTag>comparingInt((listTag) -> listTag.getInt(1)).thenComparingInt((listTag) -> listTag.getInt(0)).thenComparingInt((listTag) -> listTag.getInt(2));
+    private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.<ListTag>comparingDouble((listTag) -> listTag.getDouble(1)).thenComparingDouble((listTag) -> listTag.getDouble(0)).thenComparingDouble((listTag) -> listTag.getDouble(2));
     public static final String SNBT_DATA_TAG = "data";
     private static final char PROPERTIES_START = '{';
     private static final char PROPERTIES_END = '}';
@@ -239,7 +239,7 @@ public final class NbtUtils {
     private static <S extends StateHolder<?, S>, T extends Comparable<T>> S setValueHelper(S stateHolder, Property<T> property, String s, CompoundTag compoundTag, CompoundTag compoundTag2) {
         Optional<T> optional = property.getValue(compoundTag.getString(s));
         if (optional.isPresent()) {
-            return stateHolder.setValue(property, (Comparable)optional.get());
+            return stateHolder.setValue(property, optional.get());
         } else {
             LOGGER.warn("Unable to read property: {} with value: {} for blockstate: {}", new Object[]{s, compoundTag.getString(s), compoundTag2});
             return stateHolder;
@@ -516,13 +516,13 @@ public final class NbtUtils {
             ListTag listTag4 = new ListTag();
             ListTag listTag5 = compoundTag.getList("palettes", 9);
             listTag5.stream().map(ListTag.class::cast).forEach((listTag3x) -> {
-                CompoundTag compoundTag = new CompoundTag();
+                CompoundTag compoundTagIn = new CompoundTag();
 
                 for(int i = 0; i < listTag3x.size(); ++i) {
-                    compoundTag.putString(listTag3.getString(i), packBlockState(listTag3x.getCompound(i)));
+                    compoundTagIn.putString(listTag3.getString(i), packBlockState(listTag3x.getCompound(i)));
                 }
 
-                listTag4.add(compoundTag);
+                listTag4.add(compoundTagIn);
             });
             compoundTag.put("palettes", listTag4);
         }
@@ -600,8 +600,8 @@ public final class NbtUtils {
             CompoundTag compoundTag2 = new CompoundTag();
             if (i + 2 <= s.length()) {
                 String s3 = s.substring(i + 1, s.indexOf(125, i));
-                COMMA_SPLITTER.split(s3).forEach((s2) -> {
-                    List<String> list = COLON_SPLITTER.splitToList(s2);
+                COMMA_SPLITTER.split(s3).forEach((s2x) -> {
+                    List<String> list = COLON_SPLITTER.splitToList(s2x);
                     if (list.size() == 2) {
                         compoundTag2.putString((String)list.get(0), (String)list.get(1));
                     } else {
diff --git a/src/main/java/net/minecraft/nbt/TagParser.java b/src/main/java/net/minecraft/nbt/TagParser.java
index 440bc166d63409f81d0c951af0fdd0c9f6695113..a0e5cb5eeb31c0eb05d80205499b846a73019f3f 100644
--- a/src/main/java/net/minecraft/nbt/TagParser.java
+++ b/src/main/java/net/minecraft/nbt/TagParser.java
@@ -245,11 +245,11 @@ public class TagParser {
                 }
 
                 if (tagType2 == ByteTag.TYPE) {
-                    list.add(((NumericTag)tag).getAsByte());
+                    list.add((T) (Object) ((NumericTag)tag).getAsByte());
                 } else if (tagType2 == LongTag.TYPE) {
-                    list.add(((NumericTag)tag).getAsLong());
+                    list.add((T) (Object) ((NumericTag)tag).getAsLong());
                 } else {
-                    list.add(((NumericTag)tag).getAsInt());
+                    list.add((T) (Object) ((NumericTag)tag).getAsInt());
                 }
 
                 if (this.hasElementSeparator()) {
diff --git a/src/main/java/net/minecraft/nbt/visitors/FieldSelector.java b/src/main/java/net/minecraft/nbt/visitors/FieldSelector.java
index 66a5befce7ed81f1fedd8ccbea4924349a3d85f7..a41772d129801ebeb808640894977a0ca7270853 100644
--- a/src/main/java/net/minecraft/nbt/visitors/FieldSelector.java
+++ b/src/main/java/net/minecraft/nbt/visitors/FieldSelector.java
@@ -3,11 +3,7 @@ package net.minecraft.nbt.visitors;
 import java.util.List;
 import net.minecraft.nbt.TagType;
 
-public record FieldSelector(List<String> a, TagType<?> b, String c) {
-    private final List<String> path;
-    private final TagType<?> type;
-    private final String name;
-
+public record FieldSelector(List<String> path, TagType<?> type, String name) {
     public FieldSelector(TagType<?> type, String name) {
         this(List.of(), type, name);
     }
@@ -19,16 +15,4 @@ public record FieldSelector(List<String> a, TagType<?> b, String c) {
     public FieldSelector(String firstPath, String secondPath, TagType<?> type, String name) {
         this(List.of(firstPath, secondPath), type, name);
     }
-
-    public List<String> path() {
-        return this.path;
-    }
-
-    public TagType<?> type() {
-        return this.type;
-    }
-
-    public String name() {
-        return this.name;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/nbt/visitors/FieldTree.java b/src/main/java/net/minecraft/nbt/visitors/FieldTree.java
index f489b40e83e14e2718eea8425c7098e47315a00e..cd81e798a1b9f2888e0644ed4ad4f942c427b505 100644
--- a/src/main/java/net/minecraft/nbt/visitors/FieldTree.java
+++ b/src/main/java/net/minecraft/nbt/visitors/FieldTree.java
@@ -4,11 +4,7 @@ import java.util.HashMap;
 import java.util.Map;
 import net.minecraft.nbt.TagType;
 
-public record FieldTree(int a, Map<String, TagType<?>> b, Map<String, FieldTree> c) {
-    private final int depth;
-    private final Map<String, TagType<?>> selectedFields;
-    private final Map<String, FieldTree> fieldsToRecurse;
-
+public record FieldTree(int depth, Map<String, TagType<?>> selectedFields, Map<String, FieldTree> fieldsToRecurse) {
     private FieldTree(int depth) {
         this(depth, new HashMap(), new HashMap());
     }
@@ -29,16 +25,4 @@ public record FieldTree(int a, Map<String, TagType<?>> b, Map<String, FieldTree>
     public boolean isSelected(TagType<?> tagType, String s) {
         return tagType.equals(this.selectedFields().get(s));
     }
-
-    public int depth() {
-        return this.depth;
-    }
-
-    public Map<String, TagType<?>> selectedFields() {
-        return this.selectedFields;
-    }
-
-    public Map<String, FieldTree> fieldsToRecurse() {
-        return this.fieldsToRecurse;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index a3360e6413adb519c67f73136889a969abff2980..1663af005ad40c159d494be6f8b04bef01aae628 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -277,10 +277,10 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
                 if (future.isSuccess()) {
                     packetSendListener.onSuccess();
                 } else {
-                    Packet<?> packet = packetSendListener.onFailure();
-                    if (packet != null) {
-                        ChannelFuture channelFuture = this.channel.writeAndFlush(packet);
-                        channelFuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+                    Packet<?> packetIn = packetSendListener.onFailure();
+                    if (packetIn != null) {
+                        ChannelFuture channelFutureIn = this.channel.writeAndFlush(packetIn);
+                        channelFutureIn.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/network/ConnectionProtocol.java b/src/main/java/net/minecraft/network/ConnectionProtocol.java
index 59e2d81167d4ece4f66fb0e6a3fe0d7e91fb6ccb..98805e31c654abb8cda7fcebd1dc546cd6a52180 100644
--- a/src/main/java/net/minecraft/network/ConnectionProtocol.java
+++ b/src/main/java/net/minecraft/network/ConnectionProtocol.java
@@ -185,28 +185,32 @@ import net.minecraft.network.protocol.game.ServerboundTeleportToEntityPacket;
 import net.minecraft.network.protocol.game.ServerboundUseItemOnPacket;
 import net.minecraft.network.protocol.game.ServerboundUseItemPacket;
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
+import net.minecraft.network.protocol.handshake.ServerHandshakePacketListener;
+import net.minecraft.network.protocol.login.ClientLoginPacketListener;
 import net.minecraft.network.protocol.login.ClientboundCustomQueryPacket;
 import net.minecraft.network.protocol.login.ClientboundGameProfilePacket;
 import net.minecraft.network.protocol.login.ClientboundHelloPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginCompressionPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
+import net.minecraft.network.protocol.login.ServerLoginPacketListener;
 import net.minecraft.network.protocol.login.ServerboundCustomQueryAnswerPacket;
 import net.minecraft.network.protocol.login.ServerboundHelloPacket;
 import net.minecraft.network.protocol.login.ServerboundKeyPacket;
 import net.minecraft.network.protocol.login.ServerboundLoginAcknowledgedPacket;
 import net.minecraft.network.protocol.status.ClientboundPongResponsePacket;
 import net.minecraft.network.protocol.status.ClientboundStatusResponsePacket;
+import net.minecraft.network.protocol.status.ServerStatusPacketListener;
 import net.minecraft.network.protocol.status.ServerboundPingRequestPacket;
 import net.minecraft.network.protocol.status.ServerboundStatusRequestPacket;
 import net.minecraft.util.VisibleForDebug;
 import org.slf4j.Logger;
 
 public enum ConnectionProtocol {
-    HANDSHAKING("handshake", protocol().addFlow(PacketFlow.CLIENTBOUND, new ConnectionProtocol.PacketSet()).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
-    PLAY("play", protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).withBundlePacket(ClientboundBundlePacket.class, ClientboundBundlePacket::new).addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockChangedAckPacket.class, ClientboundBlockChangedAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChunkBatchFinishedPacket.class, ClientboundChunkBatchFinishedPacket::new).addPacket(ClientboundChunkBatchStartPacket.class, ClientboundChunkBatchStartPacket::new).addPacket(ClientboundChunksBiomesPacket.class, ClientboundChunksBiomesPacket::new).addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomChatCompletionsPacket.class, ClientboundCustomChatCompletionsPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundDamageEventPacket.class, ClientboundDamageEventPacket::new).addPacket(ClientboundDeleteChatPacket.class, ClientboundDeleteChatPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundDisguisedChatPacket.class, ClientboundDisguisedChatPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundHurtAnimationPacket.class, ClientboundHurtAnimationPacket::new).addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkWithLightPacket.class, ClientboundLevelChunkWithLightPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerChatPacket.class, ClientboundPlayerChatPacket::new).addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new).addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new).addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new).addPacket(ClientboundPlayerInfoRemovePacket.class, ClientboundPlayerInfoRemovePacket::new).addPacket(ClientboundPlayerInfoUpdatePacket.class, ClientboundPlayerInfoUpdatePacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundServerDataPacket.class, ClientboundServerDataPacket::new).addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new).addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new).addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new).addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new).addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new).addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetSimulationDistancePacket.class, ClientboundSetSimulationDistancePacket::new).addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new).addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStartConfigurationPacket.class, ClientboundStartConfigurationPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundSystemChatPacket.class, ClientboundSystemChatPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatAckPacket.class, ServerboundChatAckPacket::new).addPacket(ServerboundChatCommandPacket.class, ServerboundChatCommandPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundChatSessionUpdatePacket.class, ServerboundChatSessionUpdatePacket::new).addPacket(ServerboundChunkBatchReceivedPacket.class, ServerboundChunkBatchReceivedPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundConfigurationAcknowledgedPacket.class, ServerboundConfigurationAcknowledgedPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read).addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
-    STATUS("status", protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
-    LOGIN("login", protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryAnswerPacket.class, ServerboundCustomQueryAnswerPacket::read).addPacket(ServerboundLoginAcknowledgedPacket.class, ServerboundLoginAcknowledgedPacket::new))),
-    CONFIGURATION("configuration", protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundFinishConfigurationPacket.class, ClientboundFinishConfigurationPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundRegistryDataPacket.class, ClientboundRegistryDataPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundUpdateEnabledFeaturesPacket.class, ClientboundUpdateEnabledFeaturesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet()).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundFinishConfigurationPacket.class, ServerboundFinishConfigurationPacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new)));
+    HANDSHAKING("handshake", protocol().addFlow(PacketFlow.CLIENTBOUND, new ConnectionProtocol.PacketSet()).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerHandshakePacketListener>()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
+    PLAY("play", protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.game.ClientGamePacketListener>()).withBundlePacket(ClientboundBundlePacket.class, ClientboundBundlePacket::new).addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockChangedAckPacket.class, ClientboundBlockChangedAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChunkBatchFinishedPacket.class, ClientboundChunkBatchFinishedPacket::new).addPacket(ClientboundChunkBatchStartPacket.class, ClientboundChunkBatchStartPacket::new).addPacket(ClientboundChunksBiomesPacket.class, ClientboundChunksBiomesPacket::new).addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomChatCompletionsPacket.class, ClientboundCustomChatCompletionsPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundDamageEventPacket.class, ClientboundDamageEventPacket::new).addPacket(ClientboundDeleteChatPacket.class, ClientboundDeleteChatPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundDisguisedChatPacket.class, ClientboundDisguisedChatPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundHurtAnimationPacket.class, ClientboundHurtAnimationPacket::new).addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkWithLightPacket.class, ClientboundLevelChunkWithLightPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerChatPacket.class, ClientboundPlayerChatPacket::new).addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new).addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new).addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new).addPacket(ClientboundPlayerInfoRemovePacket.class, ClientboundPlayerInfoRemovePacket::new).addPacket(ClientboundPlayerInfoUpdatePacket.class, ClientboundPlayerInfoUpdatePacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundServerDataPacket.class, ClientboundServerDataPacket::new).addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new).addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new).addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new).addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new).addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new).addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetSimulationDistancePacket.class, ClientboundSetSimulationDistancePacket::new).addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new).addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStartConfigurationPacket.class, ClientboundStartConfigurationPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundSystemChatPacket.class, ClientboundSystemChatPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.game.ServerGamePacketListener>()).addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatAckPacket.class, ServerboundChatAckPacket::new).addPacket(ServerboundChatCommandPacket.class, ServerboundChatCommandPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundChatSessionUpdatePacket.class, ServerboundChatSessionUpdatePacket::new).addPacket(ServerboundChunkBatchReceivedPacket.class, ServerboundChunkBatchReceivedPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundConfigurationAcknowledgedPacket.class, ServerboundConfigurationAcknowledgedPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read).addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
+    STATUS("status", protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerStatusPacketListener>()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.status.ClientStatusPacketListener>()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
+    LOGIN("login", protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientLoginPacketListener>()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerLoginPacketListener>()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryAnswerPacket.class, ServerboundCustomQueryAnswerPacket::read).addPacket(ServerboundLoginAcknowledgedPacket.class, ServerboundLoginAcknowledgedPacket::new))),
+    CONFIGURATION("configuration", protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.configuration.ClientConfigurationPacketListener>()).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundFinishConfigurationPacket.class, ClientboundFinishConfigurationPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundRegistryDataPacket.class, ClientboundRegistryDataPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundUpdateEnabledFeaturesPacket.class, ClientboundUpdateEnabledFeaturesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.configuration.ServerConfigurationPacketListener>()).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundFinishConfigurationPacket.class, ServerboundFinishConfigurationPacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new)));
 
     public static final int NOT_REGISTERED = -1;
     private final String id;
@@ -352,4 +356,4 @@ public enum ConnectionProtocol {
             return map;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index fb4f42fbc2e8c761ed63e9cc611e108e17d5ecd3..2afca43a1c188aee4ab786994749ea8ce0f955b5 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -217,7 +217,7 @@ public class FriendlyByteBuf extends ByteBuf {
 
     public void writeIntIdList(IntList intList) {
         this.writeVarInt(intList.size());
-        intList.forEach(this::writeVarInt);
+        intList.forEach((java.util.function.IntConsumer) this::writeVarInt);
     }
 
     public <K, V, M extends Map<K, V>> M readMap(IntFunction<M> intFunction, FriendlyByteBuf.Reader<K> reader, FriendlyByteBuf.Reader<V> reader2) {
diff --git a/src/main/java/net/minecraft/network/chat/ChatType.java b/src/main/java/net/minecraft/network/chat/ChatType.java
index ab72e0c1cb3da2424fb90b6af459021237ec04c9..f3ddee9cb8fc4cb842f2e2f37364e8a39b8817de 100644
--- a/src/main/java/net/minecraft/network/chat/ChatType.java
+++ b/src/main/java/net/minecraft/network/chat/ChatType.java
@@ -14,9 +14,7 @@ import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.entity.Entity;
 
-public record ChatType(ChatTypeDecoration j, ChatTypeDecoration k) {
-    private final ChatTypeDecoration chat;
-    private final ChatTypeDecoration narration;
+public record ChatType(ChatTypeDecoration chat, ChatTypeDecoration narration) {
     public static final Codec<ChatType> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ChatTypeDecoration.CODEC.fieldOf("chat").forGetter(ChatType::chat), ChatTypeDecoration.CODEC.fieldOf("narration").forGetter(ChatType::narration)).apply(instance, ChatType::new));
     public static final ChatTypeDecoration DEFAULT_CHAT_DECORATION = ChatTypeDecoration.withSender("chat.type.text");
     public static final ResourceKey<ChatType> CHAT = create("chat");
@@ -58,20 +56,7 @@ public record ChatType(ChatTypeDecoration j, ChatTypeDecoration k) {
         return new ChatType.Bound(this, component);
     }
 
-    public ChatTypeDecoration chat() {
-        return this.chat;
-    }
-
-    public ChatTypeDecoration narration() {
-        return this.narration;
-    }
-
-    public static record Bound(ChatType a, Component b, @Nullable Component c) {
-        private final ChatType chatType;
-        private final Component name;
-        @Nullable
-        private final Component targetName;
-
+    public static record Bound(ChatType chatType, Component name, @Nullable Component targetName) {
         Bound(ChatType chatType, Component component) {
             this(chatType, component, (Component)null);
         }
@@ -92,27 +77,9 @@ public record ChatType(ChatTypeDecoration j, ChatTypeDecoration k) {
             Registry<ChatType> registry = registryAccess.registryOrThrow(Registries.CHAT_TYPE);
             return new ChatType.BoundNetwork(registry.getId(this.chatType), this.name, this.targetName);
         }
-
-        public ChatType chatType() {
-            return this.chatType;
-        }
-
-        public Component name() {
-            return this.name;
-        }
-
-        @Nullable
-        public Component targetName() {
-            return this.targetName;
-        }
     }
 
-    public static record BoundNetwork(int a, Component b, @Nullable Component c) {
-        private final int chatType;
-        private final Component name;
-        @Nullable
-        private final Component targetName;
-
+    public static record BoundNetwork(int chatType, Component name, @Nullable Component targetName) {
         public BoundNetwork(FriendlyByteBuf friendlyByteBuf) {
             this(friendlyByteBuf.readVarInt(), friendlyByteBuf.readComponent(), friendlyByteBuf.readNullable(FriendlyByteBuf::readComponent));
         }
@@ -128,18 +95,5 @@ public record ChatType(ChatTypeDecoration j, ChatTypeDecoration k) {
             ChatType chatType = (ChatType)registry.byId(this.chatType);
             return Optional.ofNullable(chatType).map((chatTypex) -> new ChatType.Bound(chatTypex, this.name, this.targetName));
         }
-
-        public int chatType() {
-            return this.chatType;
-        }
-
-        public Component name() {
-            return this.name;
-        }
-
-        @Nullable
-        public Component targetName() {
-            return this.targetName;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/ChatTypeDecoration.java b/src/main/java/net/minecraft/network/chat/ChatTypeDecoration.java
index 2777d3b57f725e9aaf148cb30cfe1b58160291e3..decc7f29f69a62c6eb0bb146f4696c36957538c6 100644
--- a/src/main/java/net/minecraft/network/chat/ChatTypeDecoration.java
+++ b/src/main/java/net/minecraft/network/chat/ChatTypeDecoration.java
@@ -8,10 +8,7 @@ import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
 import net.minecraft.util.StringRepresentable;
 
-public record ChatTypeDecoration(String b, List<ChatTypeDecoration.Parameter> c, Style d) {
-    private final String translationKey;
-    private final List<ChatTypeDecoration.Parameter> parameters;
-    private final Style style;
+public record ChatTypeDecoration(String translationKey, List<ChatTypeDecoration.Parameter> parameters, Style style) {
     public static final Codec<ChatTypeDecoration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.STRING.fieldOf("translation_key").forGetter(ChatTypeDecoration::translationKey), ChatTypeDecoration.Parameter.CODEC.listOf().fieldOf("parameters").forGetter(ChatTypeDecoration::parameters), Style.FORMATTING_CODEC.optionalFieldOf("style", Style.EMPTY).forGetter(ChatTypeDecoration::style)).apply(instance, ChatTypeDecoration::new));
 
     public static ChatTypeDecoration withSender(String s) {
@@ -48,18 +45,6 @@ public record ChatTypeDecoration(String b, List<ChatTypeDecoration.Parameter> c,
         return components;
     }
 
-    public String translationKey() {
-        return this.translationKey;
-    }
-
-    public List<ChatTypeDecoration.Parameter> parameters() {
-        return this.parameters;
-    }
-
-    public Style style() {
-        return this.style;
-    }
-
     public static enum Parameter implements StringRepresentable {
         SENDER("sender", (component, bound) -> bound.name()),
         TARGET("target", (component, bound) -> bound.targetName()),
diff --git a/src/main/java/net/minecraft/network/chat/ComponentUtils.java b/src/main/java/net/minecraft/network/chat/ComponentUtils.java
index ee52049165a801d4704a64bb9b8e292413aa2cf6..ae30b9d4bd708c7797cc2a551ab6106b098cc83d 100644
--- a/src/main/java/net/minecraft/network/chat/ComponentUtils.java
+++ b/src/main/java/net/minecraft/network/chat/ComponentUtils.java
@@ -72,7 +72,7 @@ public class ComponentUtils {
         if (collection.isEmpty()) {
             return CommonComponents.EMPTY;
         } else if (collection.size() == 1) {
-            return (Component)function.apply((Comparable)collection.iterator().next());
+            return (Component)function.apply(collection.iterator().next());
         } else {
             List<T> list = Lists.newArrayList(collection);
             list.sort(Comparable::compareTo);
@@ -127,9 +127,9 @@ public class ComponentUtils {
             ComponentContents s = component.getContents();
             if (s instanceof TranslatableContents) {
                 TranslatableContents translatableContents = (TranslatableContents)s;
-                String s = translatableContents.getKey();
+                String key = translatableContents.getKey();
                 String s2 = translatableContents.getFallback();
-                return s2 != null || Language.getInstance().has(s);
+                return s2 != null || Language.getInstance().has(key);
             }
         }
 
diff --git a/src/main/java/net/minecraft/network/chat/LastSeenMessages.java b/src/main/java/net/minecraft/network/chat/LastSeenMessages.java
index 4c470ada26ececdfbdeaaa904980da43d63349a6..3176132c052e5863f3435d2da9ca4d4245d150f0 100644
--- a/src/main/java/net/minecraft/network/chat/LastSeenMessages.java
+++ b/src/main/java/net/minecraft/network/chat/LastSeenMessages.java
@@ -10,8 +10,7 @@ import java.util.Optional;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.util.SignatureUpdater;
 
-public record LastSeenMessages(List<MessageSignature> d) {
-    private final List<MessageSignature> entries;
+public record LastSeenMessages(List<MessageSignature> entries) {
     public static final Codec<LastSeenMessages> CODEC = MessageSignature.CODEC.listOf().xmap(LastSeenMessages::new, LastSeenMessages::entries);
     public static LastSeenMessages EMPTY = new LastSeenMessages(List.of());
     public static final int LAST_SEEN_MESSAGES_MAX_LENGTH = 20;
@@ -29,16 +28,11 @@ public record LastSeenMessages(List<MessageSignature> d) {
         return new LastSeenMessages.Packed(this.entries.stream().map((messageSignature) -> messageSignature.pack(messageSignatureCache)).toList());
     }
 
-    public List<MessageSignature> entries() {
-        return this.entries;
-    }
-
-    public static record Packed(List<MessageSignature.Packed> b) {
-        private final List<MessageSignature.Packed> entries;
+    public static record Packed(List<MessageSignature.Packed> entries) {
         public static final LastSeenMessages.Packed EMPTY = new LastSeenMessages.Packed(List.of());
 
         public Packed(FriendlyByteBuf friendlyByteBuf) {
-            this(friendlyByteBuf.readCollection(FriendlyByteBuf.limitValue(ArrayList::new, 20), MessageSignature.Packed::read));
+            this((List<MessageSignature.Packed>) friendlyByteBuf.readCollection(FriendlyByteBuf.limitValue(ArrayList::new, 20), MessageSignature.Packed::read));
         }
 
         public void write(FriendlyByteBuf friendlyByteBuf) {
@@ -59,16 +53,9 @@ public record LastSeenMessages(List<MessageSignature> d) {
 
             return Optional.of(new LastSeenMessages(list));
         }
-
-        public List<MessageSignature.Packed> entries() {
-            return this.entries;
-        }
     }
 
-    public static record Update(int a, BitSet b) {
-        private final int offset;
-        private final BitSet acknowledged;
-
+    public static record Update(int offset, BitSet acknowledged) {
         public Update(FriendlyByteBuf friendlyByteBuf) {
             this(friendlyByteBuf.readVarInt(), friendlyByteBuf.readFixedBitSet(20));
         }
@@ -77,13 +64,5 @@ public record LastSeenMessages(List<MessageSignature> d) {
             friendlyByteBuf.writeVarInt(this.offset);
             friendlyByteBuf.writeFixedBitSet(this.acknowledged, 20);
         }
-
-        public int offset() {
-            return this.offset;
-        }
-
-        public BitSet acknowledged() {
-            return this.acknowledged;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/LastSeenMessagesTracker.java b/src/main/java/net/minecraft/network/chat/LastSeenMessagesTracker.java
index ce0abaca02e70b94e27447648dd3281b959ccaf9..7df1bae9443896e2d07a2c4657cede7a692c3e07 100644
--- a/src/main/java/net/minecraft/network/chat/LastSeenMessagesTracker.java
+++ b/src/main/java/net/minecraft/network/chat/LastSeenMessagesTracker.java
@@ -75,16 +75,6 @@ public class LastSeenMessagesTracker {
         return this.offset;
     }
 
-    public static record Update(LastSeenMessages a, LastSeenMessages.Update b) {
-        private final LastSeenMessages lastSeen;
-        private final LastSeenMessages.Update update;
-
-        public LastSeenMessages lastSeen() {
-            return this.lastSeen;
-        }
-
-        public LastSeenMessages.Update update() {
-            return this.update;
-        }
+    public static record Update(LastSeenMessages lastSeen, LastSeenMessages.Update update) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/LastSeenTrackedEntry.java b/src/main/java/net/minecraft/network/chat/LastSeenTrackedEntry.java
index 91c5e71f6f8263eaf5a0b88abfcaa83500a7aa8c..e2e782af786c36090b7909f8d1869cd1ddbec0c0 100644
--- a/src/main/java/net/minecraft/network/chat/LastSeenTrackedEntry.java
+++ b/src/main/java/net/minecraft/network/chat/LastSeenTrackedEntry.java
@@ -1,18 +1,7 @@
 package net.minecraft.network.chat;
 
-public record LastSeenTrackedEntry(MessageSignature a, boolean b) {
-    private final MessageSignature signature;
-    private final boolean pending;
-
+public record LastSeenTrackedEntry(MessageSignature signature, boolean pending) {
     public LastSeenTrackedEntry acknowledge() {
         return this.pending ? new LastSeenTrackedEntry(this.signature, false) : this;
     }
-
-    public MessageSignature signature() {
-        return this.signature;
-    }
-
-    public boolean pending() {
-        return this.pending;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/LocalChatSession.java b/src/main/java/net/minecraft/network/chat/LocalChatSession.java
index f27681d0ac57940215049739de717adce367941f..7cd15b9f1dbf9553bd74c007b2c5afe8d3c9c21d 100644
--- a/src/main/java/net/minecraft/network/chat/LocalChatSession.java
+++ b/src/main/java/net/minecraft/network/chat/LocalChatSession.java
@@ -4,10 +4,7 @@ import java.util.UUID;
 import net.minecraft.util.Signer;
 import net.minecraft.world.entity.player.ProfileKeyPair;
 
-public record LocalChatSession(UUID a, ProfileKeyPair b) {
-    private final UUID sessionId;
-    private final ProfileKeyPair keyPair;
-
+public record LocalChatSession(UUID sessionId, ProfileKeyPair keyPair) {
     public static LocalChatSession create(ProfileKeyPair profileKeyPair) {
         return new LocalChatSession(UUID.randomUUID(), profileKeyPair);
     }
@@ -19,12 +16,4 @@ public record LocalChatSession(UUID a, ProfileKeyPair b) {
     public RemoteChatSession asRemote() {
         return new RemoteChatSession(this.sessionId, this.keyPair.publicKey());
     }
-
-    public UUID sessionId() {
-        return this.sessionId;
-    }
-
-    public ProfileKeyPair keyPair() {
-        return this.keyPair;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/MessageSignature.java b/src/main/java/net/minecraft/network/chat/MessageSignature.java
index ed3117402729481b60e1a7d257fb2b5b16963942..ace7a5bed8d01288faf83ae2bf36c5b2bbe6966c 100644
--- a/src/main/java/net/minecraft/network/chat/MessageSignature.java
+++ b/src/main/java/net/minecraft/network/chat/MessageSignature.java
@@ -12,8 +12,7 @@ import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.SignatureUpdater;
 import net.minecraft.util.SignatureValidator;
 
-public record MessageSignature(byte[] c) {
-    private final byte[] bytes;
+public record MessageSignature(byte[] bytes) {
     public static final Codec<MessageSignature> CODEC = ExtraCodecs.BASE64_STRING.xmap(MessageSignature::new, MessageSignature::bytes);
     public static final int BYTES = 256;
 
@@ -67,14 +66,7 @@ public record MessageSignature(byte[] c) {
         return i != -1 ? new MessageSignature.Packed(i) : new MessageSignature.Packed(this);
     }
 
-    public byte[] bytes() {
-        return this.bytes;
-    }
-
-    public static record Packed(int b, @Nullable MessageSignature c) {
-        private final int id;
-        @Nullable
-        private final MessageSignature fullSignature;
+    public static record Packed(int id, @Nullable MessageSignature fullSignature) {
         public static final int FULL_SIGNATURE = -1;
 
         public Packed(MessageSignature messageSignature) {
@@ -101,14 +93,5 @@ public record MessageSignature(byte[] c) {
         public Optional<MessageSignature> unpack(MessageSignatureCache messageSignatureCache) {
             return this.fullSignature != null ? Optional.of(this.fullSignature) : Optional.ofNullable(messageSignatureCache.unpack(this.id));
         }
-
-        public int id() {
-            return this.id;
-        }
-
-        @Nullable
-        public MessageSignature fullSignature() {
-            return this.fullSignature;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/OutgoingChatMessage.java b/src/main/java/net/minecraft/network/chat/OutgoingChatMessage.java
index 27cf1ee5059e5008135c166b5fb19f8cfc023161..68234a7ab93d13cb1fd203db1fd4db2428d485f4 100644
--- a/src/main/java/net/minecraft/network/chat/OutgoingChatMessage.java
+++ b/src/main/java/net/minecraft/network/chat/OutgoingChatMessage.java
@@ -11,21 +11,13 @@ public interface OutgoingChatMessage {
         return (OutgoingChatMessage)(playerChatMessage.isSystem() ? new OutgoingChatMessage.Disguised(playerChatMessage.decoratedContent()) : new OutgoingChatMessage.Player(playerChatMessage));
     }
 
-    public static record Disguised(Component a) implements OutgoingChatMessage {
-        private final Component content;
-
-        public Component content() {
-            return this.content;
-        }
-
+    public static record Disguised(Component content) implements OutgoingChatMessage {
         public void sendToPlayer(ServerPlayer serverPlayer, boolean flag, ChatType.Bound bound) {
             serverPlayer.connection.sendDisguisedChatMessage(this.content, bound);
         }
     }
 
-    public static record Player(PlayerChatMessage a) implements OutgoingChatMessage {
-        private final PlayerChatMessage message;
-
+    public static record Player(PlayerChatMessage message) implements OutgoingChatMessage {
         public Component content() {
             return this.message.decoratedContent();
         }
@@ -37,9 +29,5 @@ public interface OutgoingChatMessage {
             }
 
         }
-
-        public PlayerChatMessage message() {
-            return this.message;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/PlayerChatMessage.java b/src/main/java/net/minecraft/network/chat/PlayerChatMessage.java
index 32c512c5e62a47981d1b8b3ea000203a950b449d..b00759531dd1df820f0e59facebed52909e9cab2 100644
--- a/src/main/java/net/minecraft/network/chat/PlayerChatMessage.java
+++ b/src/main/java/net/minecraft/network/chat/PlayerChatMessage.java
@@ -15,14 +15,7 @@ import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.SignatureUpdater;
 import net.minecraft.util.SignatureValidator;
 
-public record PlayerChatMessage(SignedMessageLink d, @Nullable MessageSignature e, SignedMessageBody f, @Nullable Component g, FilterMask h) {
-    private final SignedMessageLink link;
-    @Nullable
-    private final MessageSignature signature;
-    private final SignedMessageBody signedBody;
-    @Nullable
-    private final Component unsignedContent;
-    private final FilterMask filterMask;
+public record PlayerChatMessage(SignedMessageLink link, @Nullable MessageSignature signature, SignedMessageBody signedBody, @Nullable Component unsignedContent, FilterMask filterMask) {
     public static final MapCodec<PlayerChatMessage> MAP_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(SignedMessageLink.CODEC.fieldOf("link").forGetter(PlayerChatMessage::link), MessageSignature.CODEC.optionalFieldOf("signature").forGetter((playerChatMessage) -> Optional.ofNullable(playerChatMessage.signature)), SignedMessageBody.MAP_CODEC.forGetter(PlayerChatMessage::signedBody), ExtraCodecs.COMPONENT.optionalFieldOf("unsigned_content").forGetter((playerChatMessage) -> Optional.ofNullable(playerChatMessage.unsignedContent)), FilterMask.CODEC.optionalFieldOf("filter_mask", FilterMask.PASS_THROUGH).forGetter(PlayerChatMessage::filterMask)).apply(instance, (signedMessageLink, optional, signedMessageBody, optional2, filterMask) -> new PlayerChatMessage(signedMessageLink, (MessageSignature)optional.orElse(null), signedMessageBody, (Component)optional2.orElse(null), filterMask)));
     private static final UUID SYSTEM_SENDER = Util.NIL_UUID;
     public static final Duration MESSAGE_EXPIRES_AFTER_SERVER = Duration.ofMinutes(5L);
@@ -108,26 +101,4 @@ public record PlayerChatMessage(SignedMessageLink d, @Nullable MessageSignature
     public boolean isFullyFiltered() {
         return this.filterMask.isFullyFiltered();
     }
-
-    public SignedMessageLink link() {
-        return this.link;
-    }
-
-    @Nullable
-    public MessageSignature signature() {
-        return this.signature;
-    }
-
-    public SignedMessageBody signedBody() {
-        return this.signedBody;
-    }
-
-    @Nullable
-    public Component unsignedContent() {
-        return this.unsignedContent;
-    }
-
-    public FilterMask filterMask() {
-        return this.filterMask;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/RemoteChatSession.java b/src/main/java/net/minecraft/network/chat/RemoteChatSession.java
index 156b67617b2c1471b4eca5e91755e590f19dfd93..bbe8274574d1fb0f2cd7d71dc53228b38d57f262 100644
--- a/src/main/java/net/minecraft/network/chat/RemoteChatSession.java
+++ b/src/main/java/net/minecraft/network/chat/RemoteChatSession.java
@@ -7,10 +7,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.util.SignatureValidator;
 import net.minecraft.world.entity.player.ProfilePublicKey;
 
-public record RemoteChatSession(UUID a, ProfilePublicKey b) {
-    private final UUID sessionId;
-    private final ProfilePublicKey profilePublicKey;
-
+public record RemoteChatSession(UUID sessionId, ProfilePublicKey profilePublicKey) {
     public SignedMessageValidator createMessageValidator(Duration duration) {
         return new SignedMessageValidator.KeyBased(this.profilePublicKey.createSignatureValidator(), () -> this.profilePublicKey.data().hasExpired(duration));
     }
@@ -27,18 +24,7 @@ public record RemoteChatSession(UUID a, ProfilePublicKey b) {
         return this.profilePublicKey.data().hasExpired();
     }
 
-    public UUID sessionId() {
-        return this.sessionId;
-    }
-
-    public ProfilePublicKey profilePublicKey() {
-        return this.profilePublicKey;
-    }
-
-    public static record Data(UUID a, ProfilePublicKey.Data b) {
-        private final UUID sessionId;
-        private final ProfilePublicKey.Data profilePublicKey;
-
+    public static record Data(UUID sessionId, ProfilePublicKey.Data profilePublicKey) {
         public static RemoteChatSession.Data read(FriendlyByteBuf friendlyByteBuf) {
             return new RemoteChatSession.Data(friendlyByteBuf.readUUID(), new ProfilePublicKey.Data(friendlyByteBuf));
         }
@@ -51,13 +37,5 @@ public record RemoteChatSession(UUID a, ProfilePublicKey b) {
         public RemoteChatSession validate(GameProfile gameProfile, SignatureValidator signatureValidator) throws ProfilePublicKey.ValidationException {
             return new RemoteChatSession(this.sessionId, ProfilePublicKey.createValidated(signatureValidator, gameProfile.getId(), this.profilePublicKey));
         }
-
-        public UUID sessionId() {
-            return this.sessionId;
-        }
-
-        public ProfilePublicKey.Data profilePublicKey() {
-            return this.profilePublicKey;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/chat/SignableCommand.java b/src/main/java/net/minecraft/network/chat/SignableCommand.java
index a82a84e9deb4d5dd40c1022abba4a71b4d5dee7b..d6e001f0a9debebf449eaa951b9ef533a2b03fdc 100644
--- a/src/main/java/net/minecraft/network/chat/SignableCommand.java
+++ b/src/main/java/net/minecraft/network/chat/SignableCommand.java
@@ -10,9 +10,7 @@ import java.util.ArrayList;
 import java.util.List;
 import net.minecraft.commands.arguments.SignedArgument;
 
-public record SignableCommand<S>(List<SignableCommand.Argument<S>> a) {
-    private final List<SignableCommand.Argument<S>> arguments;
-
+public record SignableCommand<S>(List<SignableCommand.Argument<S>> arguments) {
     public static <S> SignableCommand<S> of(ParseResults<S> parseResults) {
         String s = parseResults.getReader().getString();
         CommandContextBuilder<S> commandContextBuilder = parseResults.getContext();
@@ -40,9 +38,9 @@ public record SignableCommand<S>(List<SignableCommand.Argument<S>> a) {
             if (parsedArgument instanceof ArgumentCommandNode) {
                 ArgumentCommandNode<S, ?> argumentCommandNode = (ArgumentCommandNode)parsedArgument;
                 if (argumentCommandNode.getType() instanceof SignedArgument) {
-                    ParsedArgument<S, ?> parsedArgument = (ParsedArgument)commandContextBuilder.getArguments().get(argumentCommandNode.getName());
-                    if (parsedArgument != null) {
-                        String s2 = parsedArgument.getRange().get(s);
+                    ParsedArgument<S, ?> parsedArgumentIn = (ParsedArgument)commandContextBuilder.getArguments().get(argumentCommandNode.getName());
+                    if (parsedArgumentIn != null) {
+                        String s2 = parsedArgumentIn.getRange().get(s);
                         list.add(new SignableCommand.Argument(argumentCommandNode, s2));
                     }
                 }
@@ -52,24 +50,9 @@ public record SignableCommand<S>(List<SignableCommand.Argument<S>> a) {
         return list;
     }
 
-    public List<SignableCommand.Argument<S>> arguments() {
-        return this.arguments;
-    }
-
-    public static record Argument<S>(ArgumentCommandNode<S, ?> a, String b) {
-        private final ArgumentCommandNode<S, ?> node;
-        private final String value;
-
+    public static record Argument<S>(ArgumentCommandNode<S, ?> node, String value) {
         public String name() {
             return this.node.getName();
         }
-
-        public ArgumentCommandNode<S, ?> node() {
-            return this.node;
-        }
-
-        public String value() {
-            return this.value;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/SignedMessageBody.java b/src/main/java/net/minecraft/network/chat/SignedMessageBody.java
index 5a1bfd9bf7e35631941b7d07abad7f41819cf37c..1aa0a4a895c2ffc560e9a08499e887307c406771 100644
--- a/src/main/java/net/minecraft/network/chat/SignedMessageBody.java
+++ b/src/main/java/net/minecraft/network/chat/SignedMessageBody.java
@@ -13,11 +13,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.SignatureUpdater;
 
-public record SignedMessageBody(String b, Instant c, long d, LastSeenMessages e) {
-    private final String content;
-    private final Instant timeStamp;
-    private final long salt;
-    private final LastSeenMessages lastSeen;
+public record SignedMessageBody(String content, Instant timeStamp, long salt, LastSeenMessages lastSeen) {
     public static final MapCodec<SignedMessageBody> MAP_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.STRING.fieldOf("content").forGetter(SignedMessageBody::content), ExtraCodecs.INSTANT_ISO8601.fieldOf("time_stamp").forGetter(SignedMessageBody::timeStamp), Codec.LONG.fieldOf("salt").forGetter(SignedMessageBody::salt), LastSeenMessages.CODEC.optionalFieldOf("last_seen", LastSeenMessages.EMPTY).forGetter(SignedMessageBody::lastSeen)).apply(instance, SignedMessageBody::new));
 
     public static SignedMessageBody unsigned(String s) {
@@ -37,28 +33,7 @@ public record SignedMessageBody(String b, Instant c, long d, LastSeenMessages e)
         return new SignedMessageBody.Packed(this.content, this.timeStamp, this.salt, this.lastSeen.pack(messageSignatureCache));
     }
 
-    public String content() {
-        return this.content;
-    }
-
-    public Instant timeStamp() {
-        return this.timeStamp;
-    }
-
-    public long salt() {
-        return this.salt;
-    }
-
-    public LastSeenMessages lastSeen() {
-        return this.lastSeen;
-    }
-
-    public static record Packed(String a, Instant b, long c, LastSeenMessages.Packed d) {
-        private final String content;
-        private final Instant timeStamp;
-        private final long salt;
-        private final LastSeenMessages.Packed lastSeen;
-
+    public static record Packed(String content, Instant timeStamp, long salt, LastSeenMessages.Packed lastSeen) {
         public Packed(FriendlyByteBuf friendlyByteBuf) {
             this(friendlyByteBuf.readUtf(256), friendlyByteBuf.readInstant(), friendlyByteBuf.readLong(), new LastSeenMessages.Packed(friendlyByteBuf));
         }
@@ -73,21 +48,5 @@ public record SignedMessageBody(String b, Instant c, long d, LastSeenMessages e)
         public Optional<SignedMessageBody> unpack(MessageSignatureCache messageSignatureCache) {
             return this.lastSeen.unpack(messageSignatureCache).map((lastSeenMessages) -> new SignedMessageBody(this.content, this.timeStamp, this.salt, lastSeenMessages));
         }
-
-        public String content() {
-            return this.content;
-        }
-
-        public Instant timeStamp() {
-            return this.timeStamp;
-        }
-
-        public long salt() {
-            return this.salt;
-        }
-
-        public LastSeenMessages.Packed lastSeen() {
-            return this.lastSeen;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/SignedMessageLink.java b/src/main/java/net/minecraft/network/chat/SignedMessageLink.java
index d06f17ba2d3f4ae81e93ea5f02af695c91db170c..804bc7148d895c607c9f553a912d7dd94a1f6e40 100644
--- a/src/main/java/net/minecraft/network/chat/SignedMessageLink.java
+++ b/src/main/java/net/minecraft/network/chat/SignedMessageLink.java
@@ -11,10 +11,7 @@ import net.minecraft.core.UUIDUtil;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.SignatureUpdater;
 
-public record SignedMessageLink(int b, UUID c, UUID d) {
-    private final int index;
-    private final UUID sender;
-    private final UUID sessionId;
+public record SignedMessageLink(int index, UUID sender, UUID sessionId) {
     public static final Codec<SignedMessageLink> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.NON_NEGATIVE_INT.fieldOf("index").forGetter(SignedMessageLink::index), UUIDUtil.CODEC.fieldOf("sender").forGetter(SignedMessageLink::sender), UUIDUtil.CODEC.fieldOf("session_id").forGetter(SignedMessageLink::sessionId)).apply(instance, SignedMessageLink::new));
 
     public static SignedMessageLink unsigned(UUID uuid) {
@@ -39,16 +36,4 @@ public record SignedMessageLink(int b, UUID c, UUID d) {
     public SignedMessageLink advance() {
         return this.index == Integer.MAX_VALUE ? null : new SignedMessageLink(this.index + 1, this.sender, this.sessionId);
     }
-
-    public int index() {
-        return this.index;
-    }
-
-    public UUID sender() {
-        return this.sender;
-    }
-
-    public UUID sessionId() {
-        return this.sessionId;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/Style.java b/src/main/java/net/minecraft/network/chat/Style.java
index debeea389130e907edb152e3b561f9bde92df161..e53fd771187aca84b11d7723664ebadd0245c45e 100644
--- a/src/main/java/net/minecraft/network/chat/Style.java
+++ b/src/main/java/net/minecraft/network/chat/Style.java
@@ -306,17 +306,17 @@ public class Style {
             }
         }
 
-        Collector 1Collector = new Collector();
-        1Collector.addValueString("color", this.color);
-        1Collector.addFlagString("bold", this.bold);
-        1Collector.addFlagString("italic", this.italic);
-        1Collector.addFlagString("underlined", this.underlined);
-        1Collector.addFlagString("strikethrough", this.strikethrough);
-        1Collector.addFlagString("obfuscated", this.obfuscated);
-        1Collector.addValueString("clickEvent", this.clickEvent);
-        1Collector.addValueString("hoverEvent", this.hoverEvent);
-        1Collector.addValueString("insertion", this.insertion);
-        1Collector.addValueString("font", this.font);
+        Collector collector = new Collector();
+        collector.addValueString("color", this.color);
+        collector.addFlagString("bold", this.bold);
+        collector.addFlagString("italic", this.italic);
+        collector.addFlagString("underlined", this.underlined);
+        collector.addFlagString("strikethrough", this.strikethrough);
+        collector.addFlagString("obfuscated", this.obfuscated);
+        collector.addValueString("clickEvent", this.clickEvent);
+        collector.addValueString("hoverEvent", this.hoverEvent);
+        collector.addValueString("insertion", this.insertion);
+        collector.addValueString("font", this.font);
         stringBuilder.append("}");
         return stringBuilder.toString();
     }
diff --git a/src/main/java/net/minecraft/network/chat/contents/BlockDataSource.java b/src/main/java/net/minecraft/network/chat/contents/BlockDataSource.java
index ad7a7ba53531f09364be7b48aa7b4a6824d0af89..59599c6b8cd413c24e221fd028f1ee5019123d6c 100644
--- a/src/main/java/net/minecraft/network/chat/contents/BlockDataSource.java
+++ b/src/main/java/net/minecraft/network/chat/contents/BlockDataSource.java
@@ -12,11 +12,7 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.block.entity.BlockEntity;
 
-public record BlockDataSource(String a, @Nullable Coordinates b) implements DataSource {
-    private final String posPattern;
-    @Nullable
-    private final Coordinates compiledPos;
-
+public record BlockDataSource(String posPattern, @Nullable Coordinates compiledPos) implements DataSource {
     public BlockDataSource(String s) {
         this(s, compilePos(s));
     }
diff --git a/src/main/java/net/minecraft/network/chat/contents/EntityDataSource.java b/src/main/java/net/minecraft/network/chat/contents/EntityDataSource.java
index 7b8795276adb7ca1e1d23831dfd0630950718639..6fbc1261a4ba2721752c956a20a1c688d2b64a37 100644
--- a/src/main/java/net/minecraft/network/chat/contents/EntityDataSource.java
+++ b/src/main/java/net/minecraft/network/chat/contents/EntityDataSource.java
@@ -12,11 +12,7 @@ import net.minecraft.commands.arguments.selector.EntitySelectorParser;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.entity.Entity;
 
-public record EntityDataSource(String a, @Nullable EntitySelector b) implements DataSource {
-    private final String selectorPattern;
-    @Nullable
-    private final EntitySelector compiledSelector;
-
+public record EntityDataSource(String selectorPattern, @Nullable EntitySelector compiledSelector) implements DataSource {
     public EntityDataSource(String s) {
         this(s, compileSelector(s));
     }
@@ -62,13 +58,4 @@ public record EntityDataSource(String a, @Nullable EntitySelector b) implements
     public int hashCode() {
         return this.selectorPattern.hashCode();
     }
-
-    public String selectorPattern() {
-        return this.selectorPattern;
-    }
-
-    @Nullable
-    public EntitySelector compiledSelector() {
-        return this.compiledSelector;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/contents/LiteralContents.java b/src/main/java/net/minecraft/network/chat/contents/LiteralContents.java
index ff2de14aff002c3c28716d264b1a0a71556dea56..417ef61467070920410a8e82a4163b9ecf7430e7 100644
--- a/src/main/java/net/minecraft/network/chat/contents/LiteralContents.java
+++ b/src/main/java/net/minecraft/network/chat/contents/LiteralContents.java
@@ -5,9 +5,7 @@ import net.minecraft.network.chat.ComponentContents;
 import net.minecraft.network.chat.FormattedText;
 import net.minecraft.network.chat.Style;
 
-public record LiteralContents(String b) implements ComponentContents {
-    private final String text;
-
+public record LiteralContents(String text) implements ComponentContents {
     public <T> Optional<T> visit(FormattedText.ContentConsumer<T> contentConsumer) {
         return contentConsumer.accept(this.text);
     }
@@ -19,8 +17,4 @@ public record LiteralContents(String b) implements ComponentContents {
     public String toString() {
         return "literal{" + this.text + "}";
     }
-
-    public String text() {
-        return this.text;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/chat/contents/StorageDataSource.java b/src/main/java/net/minecraft/network/chat/contents/StorageDataSource.java
index 403cd2160ae7b3fbb98e9cf4d50d9b7b2a0a19de..b0e9f6fd8eca0afd5351d051f87f8671bbf5ca7e 100644
--- a/src/main/java/net/minecraft/network/chat/contents/StorageDataSource.java
+++ b/src/main/java/net/minecraft/network/chat/contents/StorageDataSource.java
@@ -5,9 +5,7 @@ import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.resources.ResourceLocation;
 
-public record StorageDataSource(ResourceLocation a) implements DataSource {
-    private final ResourceLocation id;
-
+public record StorageDataSource(ResourceLocation id) implements DataSource {
     public Stream<CompoundTag> getData(CommandSourceStack commandSourceStack) {
         CompoundTag compoundTag = commandSourceStack.getServer().getCommandStorage().get(this.id);
         return Stream.of(compoundTag);
@@ -16,8 +14,4 @@ public record StorageDataSource(ResourceLocation a) implements DataSource {
     public String toString() {
         return "storage=" + this.id;
     }
-
-    public ResourceLocation id() {
-        return this.id;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/BundlerInfo.java b/src/main/java/net/minecraft/network/protocol/BundlerInfo.java
index 720279cb610c035a4ea81cd49c9fe90f8f7413bc..7a50123187fc4a090b1528f610ea39fdaf37ec23 100644
--- a/src/main/java/net/minecraft/network/protocol/BundlerInfo.java
+++ b/src/main/java/net/minecraft/network/protocol/BundlerInfo.java
@@ -46,7 +46,7 @@ public interface BundlerInfo {
                         } else if (this.bundlePackets.size() >= 4096) {
                             throw new IllegalStateException("Too many packets in a bundle");
                         } else {
-                            this.bundlePackets.add(packet);
+                            this.bundlePackets.add((Packet<T>) packet);
                             return null;
                         }
                     }
diff --git a/src/main/java/net/minecraft/network/protocol/common/ClientboundCustomPayloadPacket.java b/src/main/java/net/minecraft/network/protocol/common/ClientboundCustomPayloadPacket.java
index d4dec174b9635c60916fee22d5753c0d1bffd08e..3c419e0983129259e6cca5a572f911214a89a84c 100644
--- a/src/main/java/net/minecraft/network/protocol/common/ClientboundCustomPayloadPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/common/ClientboundCustomPayloadPacket.java
@@ -26,10 +26,9 @@ import net.minecraft.network.protocol.common.custom.VillageSectionsDebugPayload;
 import net.minecraft.network.protocol.common.custom.WorldGenAttemptDebugPayload;
 import net.minecraft.resources.ResourceLocation;
 
-public record ClientboundCustomPayloadPacket(CustomPacketPayload a) implements Packet<ClientCommonPacketListener> {
-    private final CustomPacketPayload payload;
+public record ClientboundCustomPayloadPacket(CustomPacketPayload payload) implements Packet<ClientCommonPacketListener> {
     private static final int MAX_PAYLOAD_SIZE = 1048576;
-    private static final Map<ResourceLocation, FriendlyByteBuf.Reader<? extends CustomPacketPayload>> KNOWN_TYPES = ImmutableMap.builder().put(BrandPayload.ID, BrandPayload::new).put(BeeDebugPayload.ID, BeeDebugPayload::new).put(BrainDebugPayload.ID, BrainDebugPayload::new).put(GameEventDebugPayload.ID, GameEventDebugPayload::new).put(GameEventListenerDebugPayload.ID, GameEventListenerDebugPayload::new).put(GameTestAddMarkerDebugPayload.ID, GameTestAddMarkerDebugPayload::new).put(GameTestClearMarkersDebugPayload.ID, GameTestClearMarkersDebugPayload::new).put(GoalDebugPayload.ID, GoalDebugPayload::new).put(HiveDebugPayload.ID, HiveDebugPayload::new).put(NeighborUpdatesDebugPayload.ID, NeighborUpdatesDebugPayload::new).put(PathfindingDebugPayload.ID, PathfindingDebugPayload::new).put(PoiAddedDebugPayload.ID, PoiAddedDebugPayload::new).put(PoiRemovedDebugPayload.ID, PoiRemovedDebugPayload::new).put(PoiTicketCountDebugPayload.ID, PoiTicketCountDebugPayload::new).put(RaidsDebugPayload.ID, RaidsDebugPayload::new).put(StructuresDebugPayload.ID, StructuresDebugPayload::new).put(VillageSectionsDebugPayload.ID, VillageSectionsDebugPayload::new).put(WorldGenAttemptDebugPayload.ID, WorldGenAttemptDebugPayload::new).build();
+    private static final Map<ResourceLocation, FriendlyByteBuf.Reader<? extends CustomPacketPayload>> KNOWN_TYPES = ImmutableMap.<ResourceLocation, FriendlyByteBuf.Reader<? extends CustomPacketPayload>>builder().put(BrandPayload.ID, BrandPayload::new).put(BeeDebugPayload.ID, BeeDebugPayload::new).put(BrainDebugPayload.ID, BrainDebugPayload::new).put(GameEventDebugPayload.ID, GameEventDebugPayload::new).put(GameEventListenerDebugPayload.ID, GameEventListenerDebugPayload::new).put(GameTestAddMarkerDebugPayload.ID, GameTestAddMarkerDebugPayload::new).put(GameTestClearMarkersDebugPayload.ID, GameTestClearMarkersDebugPayload::new).put(GoalDebugPayload.ID, GoalDebugPayload::new).put(HiveDebugPayload.ID, HiveDebugPayload::new).put(NeighborUpdatesDebugPayload.ID, NeighborUpdatesDebugPayload::new).put(PathfindingDebugPayload.ID, PathfindingDebugPayload::new).put(PoiAddedDebugPayload.ID, PoiAddedDebugPayload::new).put(PoiRemovedDebugPayload.ID, PoiRemovedDebugPayload::new).put(PoiTicketCountDebugPayload.ID, PoiTicketCountDebugPayload::new).put(RaidsDebugPayload.ID, RaidsDebugPayload::new).put(StructuresDebugPayload.ID, StructuresDebugPayload::new).put(VillageSectionsDebugPayload.ID, VillageSectionsDebugPayload::new).put(WorldGenAttemptDebugPayload.ID, WorldGenAttemptDebugPayload::new).build();
 
     public ClientboundCustomPayloadPacket(FriendlyByteBuf friendlyByteBuf) {
         this(readPayload(friendlyByteBuf.readResourceLocation(), friendlyByteBuf));
@@ -58,8 +57,4 @@ public record ClientboundCustomPayloadPacket(CustomPacketPayload a) implements P
     public void handle(ClientCommonPacketListener clientCommonPacketListener) {
         clientCommonPacketListener.handleCustomPayload(this);
     }
-
-    public CustomPacketPayload payload() {
-        return this.payload;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/ServerboundClientInformationPacket.java b/src/main/java/net/minecraft/network/protocol/common/ServerboundClientInformationPacket.java
index b5286531602276d87374a9bd6ebbe3cfb179cd33..8b6445521c3b452c1bcd2a83996cf34edc03ee55 100644
--- a/src/main/java/net/minecraft/network/protocol/common/ServerboundClientInformationPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/common/ServerboundClientInformationPacket.java
@@ -4,9 +4,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.server.level.ClientInformation;
 
-public record ServerboundClientInformationPacket(ClientInformation a) implements Packet<ServerCommonPacketListener> {
-    private final ClientInformation information;
-
+public record ServerboundClientInformationPacket(ClientInformation information) implements Packet<ServerCommonPacketListener> {
     public ServerboundClientInformationPacket(FriendlyByteBuf friendlyByteBuf) {
         this(new ClientInformation(friendlyByteBuf));
     }
@@ -18,8 +16,4 @@ public record ServerboundClientInformationPacket(ClientInformation a) implements
     public void handle(ServerCommonPacketListener serverCommonPacketListener) {
         serverCommonPacketListener.handleClientInformation(this);
     }
-
-    public ClientInformation information() {
-        return this.information;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/ServerboundCustomPayloadPacket.java b/src/main/java/net/minecraft/network/protocol/common/ServerboundCustomPayloadPacket.java
index 826f53c9d0728bf81ae0ae13f2591b9c7326af94..4786814c88f1da42f1e1dd95c95caea73ee4bc12 100644
--- a/src/main/java/net/minecraft/network/protocol/common/ServerboundCustomPayloadPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/common/ServerboundCustomPayloadPacket.java
@@ -9,10 +9,9 @@ import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
 import net.minecraft.network.protocol.common.custom.DiscardedPayload;
 import net.minecraft.resources.ResourceLocation;
 
-public record ServerboundCustomPayloadPacket(CustomPacketPayload a) implements Packet<ServerCommonPacketListener> {
-    private final CustomPacketPayload payload;
+public record ServerboundCustomPayloadPacket(CustomPacketPayload payload) implements Packet<ServerCommonPacketListener> {
     private static final int MAX_PAYLOAD_SIZE = 32767;
-    private static final Map<ResourceLocation, FriendlyByteBuf.Reader<? extends CustomPacketPayload>> KNOWN_TYPES = ImmutableMap.builder().put(BrandPayload.ID, BrandPayload::new).build();
+    private static final Map<ResourceLocation, FriendlyByteBuf.Reader<? extends CustomPacketPayload>> KNOWN_TYPES = ImmutableMap.<ResourceLocation, FriendlyByteBuf.Reader<? extends CustomPacketPayload>>builder().put(BrandPayload.ID, BrandPayload::new).build();
 
     public ServerboundCustomPayloadPacket(FriendlyByteBuf friendlyByteBuf) {
         this(readPayload(friendlyByteBuf.readResourceLocation(), friendlyByteBuf));
@@ -45,4 +44,4 @@ public record ServerboundCustomPayloadPacket(CustomPacketPayload a) implements P
     public CustomPacketPayload payload() {
         return this.payload;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/BeeDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/BeeDebugPayload.java
index 5c005e01deb4be1ffefe676ea8c8884525619349..8aa8cd2b90412c3b52e1cfac4c725771bf6ac911 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/BeeDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/BeeDebugPayload.java
@@ -13,8 +13,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.pathfinder.Path;
 import net.minecraft.world.phys.Vec3;
 
-public record BeeDebugPayload(BeeDebugPayload.BeeInfo b) implements CustomPacketPayload {
-    private final BeeDebugPayload.BeeInfo beeInfo;
+public record BeeDebugPayload(BeeDebugPayload.BeeInfo beeInfo) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/bee");
 
     public BeeDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -33,20 +32,17 @@ public record BeeDebugPayload(BeeDebugPayload.BeeInfo b) implements CustomPacket
         return this.beeInfo;
     }
 
-    public static record BeeInfo(UUID a, int b, Vec3 c, @Nullable Path d, @Nullable BlockPos e, @Nullable BlockPos f, int g, Set<String> h, List<BlockPos> i) {
-        private final UUID uuid;
-        private final int id;
-        private final Vec3 pos;
-        @Nullable
-        private final Path path;
-        @Nullable
-        private final BlockPos hivePos;
-        @Nullable
-        private final BlockPos flowerPos;
-        private final int travelTicks;
-        private final Set<String> goals;
-        private final List<BlockPos> blacklistedHives;
-
+    public static record BeeInfo(
+        UUID uuid,
+        int id,
+        Vec3 pos,
+        @Nullable Path path,
+        @Nullable BlockPos hivePos,
+        @Nullable BlockPos flowerPos,
+        int travelTicks,
+        Set<String> goals,
+        List<BlockPos> blacklistedHives
+    ) {
         public BeeInfo(FriendlyByteBuf friendlyByteBuf) {
             this(friendlyByteBuf.readUUID(), friendlyByteBuf.readInt(), friendlyByteBuf.readVec3(), friendlyByteBuf.readNullable(Path::createFromStream), friendlyByteBuf.readNullable(FriendlyByteBuf::readBlockPos), friendlyByteBuf.readNullable(FriendlyByteBuf::readBlockPos), friendlyByteBuf.readInt(), friendlyByteBuf.readCollection(HashSet::new, FriendlyByteBuf::readUtf), friendlyByteBuf.readList(FriendlyByteBuf::readBlockPos));
         }
@@ -74,44 +70,5 @@ public record BeeDebugPayload(BeeDebugPayload.BeeInfo b) implements CustomPacket
         public String toString() {
             return this.generateName();
         }
-
-        public UUID uuid() {
-            return this.uuid;
-        }
-
-        public int id() {
-            return this.id;
-        }
-
-        public Vec3 pos() {
-            return this.pos;
-        }
-
-        @Nullable
-        public Path path() {
-            return this.path;
-        }
-
-        @Nullable
-        public BlockPos hivePos() {
-            return this.hivePos;
-        }
-
-        @Nullable
-        public BlockPos flowerPos() {
-            return this.flowerPos;
-        }
-
-        public int travelTicks() {
-            return this.travelTicks;
-        }
-
-        public Set<String> goals() {
-            return this.goals;
-        }
-
-        public List<BlockPos> blacklistedHives() {
-            return this.blacklistedHives;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/BrainDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/BrainDebugPayload.java
index 1ec7a0c364b906d616086f2fa3186478a1d1f5b5..288277a35909d637f524339696d67d899086e974 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/BrainDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/BrainDebugPayload.java
@@ -11,8 +11,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.pathfinder.Path;
 import net.minecraft.world.phys.Vec3;
 
-public record BrainDebugPayload(BrainDebugPayload.BrainDump b) implements CustomPacketPayload {
-    private final BrainDebugPayload.BrainDump brainDump;
+public record BrainDebugPayload(BrainDebugPayload.BrainDump brainDump) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/brain");
 
     public BrainDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -27,30 +26,27 @@ public record BrainDebugPayload(BrainDebugPayload.BrainDump b) implements Custom
         return ID;
     }
 
-    public BrainDebugPayload.BrainDump brainDump() {
-        return this.brainDump;
-    }
-
-    public static record BrainDump(UUID a, int b, String c, String d, int e, float f, float g, Vec3 h, String i, @Nullable Path j, boolean k, int l, List<String> m, List<String> n, List<String> o, List<String> p, Set<BlockPos> q, Set<BlockPos> r) {
-        private final UUID uuid;
-        private final int id;
-        private final String name;
-        private final String profession;
-        private final int xp;
-        private final float health;
-        private final float maxHealth;
-        private final Vec3 pos;
-        private final String inventory;
-        @Nullable
-        private final Path path;
-        private final boolean wantsGolem;
-        private final int angerLevel;
-        private final List<String> activities;
-        private final List<String> behaviors;
-        private final List<String> memories;
-        private final List<String> gossips;
-        private final Set<BlockPos> pois;
-        private final Set<BlockPos> potentialPois;
+    public static record BrainDump(
+            UUID uuid,
+            int id,
+            String name,
+            String profession,
+            int xp,
+            float health,
+            float maxHealth,
+            Vec3 pos,
+            String inventory,
+
+            @Nullable Path path,
+            boolean wantsGolem,
+            int angerLevel,
+            List<String> activities,
+            List<String> behaviors,
+            List<String> memories,
+            List<String> gossips,
+            Set<BlockPos> pois,
+            Set<BlockPos> potentialPois
+    ) {
 
         public BrainDump(FriendlyByteBuf friendlyByteBuf) {
             this(friendlyByteBuf.readUUID(), friendlyByteBuf.readInt(), friendlyByteBuf.readUtf(), friendlyByteBuf.readUtf(), friendlyByteBuf.readInt(), friendlyByteBuf.readFloat(), friendlyByteBuf.readFloat(), friendlyByteBuf.readVec3(), friendlyByteBuf.readUtf(), friendlyByteBuf.readNullable(Path::createFromStream), friendlyByteBuf.readBoolean(), friendlyByteBuf.readInt(), friendlyByteBuf.readList(FriendlyByteBuf::readUtf), friendlyByteBuf.readList(FriendlyByteBuf::readUtf), friendlyByteBuf.readList(FriendlyByteBuf::readUtf), friendlyByteBuf.readList(FriendlyByteBuf::readUtf), friendlyByteBuf.readCollection(HashSet::new, FriendlyByteBuf::readBlockPos), friendlyByteBuf.readCollection(HashSet::new, FriendlyByteBuf::readBlockPos));
@@ -84,78 +80,5 @@ public record BrainDebugPayload(BrainDebugPayload.BrainDump b) implements Custom
         public boolean hasPotentialPoi(BlockPos blockPos) {
             return this.potentialPois.contains(blockPos);
         }
-
-        public UUID uuid() {
-            return this.uuid;
-        }
-
-        public int id() {
-            return this.id;
-        }
-
-        public String name() {
-            return this.name;
-        }
-
-        public String profession() {
-            return this.profession;
-        }
-
-        public int xp() {
-            return this.xp;
-        }
-
-        public float health() {
-            return this.health;
-        }
-
-        public float maxHealth() {
-            return this.maxHealth;
-        }
-
-        public Vec3 pos() {
-            return this.pos;
-        }
-
-        public String inventory() {
-            return this.inventory;
-        }
-
-        @Nullable
-        public Path path() {
-            return this.path;
-        }
-
-        public boolean wantsGolem() {
-            return this.wantsGolem;
-        }
-
-        public int angerLevel() {
-            return this.angerLevel;
-        }
-
-        public List<String> activities() {
-            return this.activities;
-        }
-
-        public List<String> behaviors() {
-            return this.behaviors;
-        }
-
-        public List<String> memories() {
-            return this.memories;
-        }
-
-        public List<String> gossips() {
-            return this.gossips;
-        }
-
-        public Set<BlockPos> pois() {
-            return this.pois;
-        }
-
-        public Set<BlockPos> potentialPois() {
-            return this.potentialPois;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/BrandPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/BrandPayload.java
index ca63cc8e87cb071f4d976efde871b4e63182bcca..f0c0dade137c598cf876e5bc574ed7e289b0fcfc 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/BrandPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/BrandPayload.java
@@ -3,8 +3,7 @@ package net.minecraft.network.protocol.common.custom;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 
-public record BrandPayload(String b) implements CustomPacketPayload {
-    private final String brand;
+public record BrandPayload(String brand) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("brand");
 
     public BrandPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -18,8 +17,4 @@ public record BrandPayload(String b) implements CustomPacketPayload {
     public ResourceLocation id() {
         return ID;
     }
-
-    public String brand() {
-        return this.brand;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/DiscardedPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/DiscardedPayload.java
index 17628cf2de4495dcb03c200cc5f8ed162f99d6fa..2c63b14a00e732302614feaedb49d31a325c0719 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/DiscardedPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/DiscardedPayload.java
@@ -3,13 +3,7 @@ package net.minecraft.network.protocol.common.custom;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 
-public record DiscardedPayload(ResourceLocation a) implements CustomPacketPayload {
-    private final ResourceLocation id;
-
+public record DiscardedPayload(ResourceLocation id) implements CustomPacketPayload {
     public void write(FriendlyByteBuf friendlyByteBuf) {
     }
-
-    public ResourceLocation id() {
-        return this.id;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/GameEventDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/GameEventDebugPayload.java
index e0e8bf3e8212b4da0c028aec4e05e57af4e7a47d..d4e2348afbc319409329c020bb9c5a82fd0736b5 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/GameEventDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/GameEventDebugPayload.java
@@ -7,9 +7,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.Vec3;
 
-public record GameEventDebugPayload(ResourceKey<GameEvent> b, Vec3 c) implements CustomPacketPayload {
-    private final ResourceKey<GameEvent> type;
-    private final Vec3 pos;
+public record GameEventDebugPayload(ResourceKey<GameEvent> type, Vec3 pos) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/game_event");
 
     public GameEventDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -24,12 +22,4 @@ public record GameEventDebugPayload(ResourceKey<GameEvent> b, Vec3 c) implements
     public ResourceLocation id() {
         return ID;
     }
-
-    public ResourceKey<GameEvent> type() {
-        return this.type;
-    }
-
-    public Vec3 pos() {
-        return this.pos;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/GameEventListenerDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/GameEventListenerDebugPayload.java
index ee4b2ca1ffb9edc2bc6044a342deca7d1b23f068..8924d39ea5d00b419b4cf7697c5aa5587038969f 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/GameEventListenerDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/GameEventListenerDebugPayload.java
@@ -5,9 +5,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.gameevent.PositionSource;
 import net.minecraft.world.level.gameevent.PositionSourceType;
 
-public record GameEventListenerDebugPayload(PositionSource b, int c) implements CustomPacketPayload {
-    private final PositionSource listenerPos;
-    private final int listenerRange;
+public record GameEventListenerDebugPayload(PositionSource listenerPos, int listenerRange) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/game_event_listeners");
 
     public GameEventListenerDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -22,12 +20,4 @@ public record GameEventListenerDebugPayload(PositionSource b, int c) implements
     public ResourceLocation id() {
         return ID;
     }
-
-    public PositionSource listenerPos() {
-        return this.listenerPos;
-    }
-
-    public int listenerRange() {
-        return this.listenerRange;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/GameTestAddMarkerDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/GameTestAddMarkerDebugPayload.java
index c0cf10bd0f499f9e8c8aff0352d9c55c0278bf35..06a229e883f67aca49ea5c091aed2c0970706a7f 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/GameTestAddMarkerDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/GameTestAddMarkerDebugPayload.java
@@ -4,11 +4,7 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 
-public record GameTestAddMarkerDebugPayload(BlockPos b, int c, String d, int e) implements CustomPacketPayload {
-    private final BlockPos pos;
-    private final int color;
-    private final String text;
-    private final int durationMs;
+public record GameTestAddMarkerDebugPayload(BlockPos pos, int color, String text, int durationMs) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/game_test_add_marker");
 
     public GameTestAddMarkerDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -25,20 +21,4 @@ public record GameTestAddMarkerDebugPayload(BlockPos b, int c, String d, int e)
     public ResourceLocation id() {
         return ID;
     }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public int color() {
-        return this.color;
-    }
-
-    public String text() {
-        return this.text;
-    }
-
-    public int durationMs() {
-        return this.durationMs;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/GoalDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/GoalDebugPayload.java
index 2b58b9f8e9f92bdb2acf950503da4deeeeaa0eb2..5c630ef82181a46201c04f663970bc3e73454b6f 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/GoalDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/GoalDebugPayload.java
@@ -5,10 +5,7 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 
-public record GoalDebugPayload(int b, BlockPos c, List<GoalDebugPayload.DebugGoal> d) implements CustomPacketPayload {
-    private final int entityId;
-    private final BlockPos pos;
-    private final List<GoalDebugPayload.DebugGoal> goals;
+public record GoalDebugPayload(int entityId, BlockPos pos, List<GoalDebugPayload.DebugGoal> goals) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/goal_selector");
 
     public GoalDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -25,23 +22,7 @@ public record GoalDebugPayload(int b, BlockPos c, List<GoalDebugPayload.DebugGoa
         return ID;
     }
 
-    public int entityId() {
-        return this.entityId;
-    }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public List<GoalDebugPayload.DebugGoal> goals() {
-        return this.goals;
-    }
-
-    public static record DebugGoal(int a, boolean b, String c) {
-        private final int priority;
-        private final boolean isRunning;
-        private final String name;
-
+    public static record DebugGoal(int priority, boolean isRunning, String name) {
         public DebugGoal(FriendlyByteBuf friendlyByteBuf) {
             this(friendlyByteBuf.readInt(), friendlyByteBuf.readBoolean(), friendlyByteBuf.readUtf(255));
         }
@@ -51,17 +32,5 @@ public record GoalDebugPayload(int b, BlockPos c, List<GoalDebugPayload.DebugGoa
             friendlyByteBuf.writeBoolean(this.isRunning);
             friendlyByteBuf.writeUtf(this.name);
         }
-
-        public int priority() {
-            return this.priority;
-        }
-
-        public boolean isRunning() {
-            return this.isRunning;
-        }
-
-        public String name() {
-            return this.name;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/HiveDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/HiveDebugPayload.java
index 18e0e8e5ae3316ba041d75c3669ab365be69ee2f..3a4fbefc874a943a6c169af0341c9396ff9c98fb 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/HiveDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/HiveDebugPayload.java
@@ -4,8 +4,7 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 
-public record HiveDebugPayload(HiveDebugPayload.HiveInfo b) implements CustomPacketPayload {
-    private final HiveDebugPayload.HiveInfo hiveInfo;
+public record HiveDebugPayload(HiveDebugPayload.HiveInfo hiveInfo) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/hive");
 
     public HiveDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -20,17 +19,7 @@ public record HiveDebugPayload(HiveDebugPayload.HiveInfo b) implements CustomPac
         return ID;
     }
 
-    public HiveDebugPayload.HiveInfo hiveInfo() {
-        return this.hiveInfo;
-    }
-
-    public static record HiveInfo(BlockPos a, String b, int c, int d, boolean e) {
-        private final BlockPos pos;
-        private final String hiveType;
-        private final int occupantCount;
-        private final int honeyLevel;
-        private final boolean sedated;
-
+    public static record HiveInfo(BlockPos pos, String hiveType, int occupantCount, int honeyLevel, boolean sedated) {
         public HiveInfo(FriendlyByteBuf friendlyByteBuf) {
             this(friendlyByteBuf.readBlockPos(), friendlyByteBuf.readUtf(), friendlyByteBuf.readInt(), friendlyByteBuf.readInt(), friendlyByteBuf.readBoolean());
         }
@@ -42,25 +31,5 @@ public record HiveDebugPayload(HiveDebugPayload.HiveInfo b) implements CustomPac
             friendlyByteBuf.writeInt(this.honeyLevel);
             friendlyByteBuf.writeBoolean(this.sedated);
         }
-
-        public BlockPos pos() {
-            return this.pos;
-        }
-
-        public String hiveType() {
-            return this.hiveType;
-        }
-
-        public int occupantCount() {
-            return this.occupantCount;
-        }
-
-        public int honeyLevel() {
-            return this.honeyLevel;
-        }
-
-        public boolean sedated() {
-            return this.sedated;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/NeighborUpdatesDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/NeighborUpdatesDebugPayload.java
index 806445489c052a0241fd9ba732f16ace68afff73..a1473228792347c4ad1c6683531d2154a73c4416 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/NeighborUpdatesDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/NeighborUpdatesDebugPayload.java
@@ -4,9 +4,7 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 
-public record NeighborUpdatesDebugPayload(long b, BlockPos c) implements CustomPacketPayload {
-    private final long time;
-    private final BlockPos pos;
+public record NeighborUpdatesDebugPayload(long time, BlockPos pos) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/neighbors_update");
 
     public NeighborUpdatesDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -21,12 +19,4 @@ public record NeighborUpdatesDebugPayload(long b, BlockPos c) implements CustomP
     public ResourceLocation id() {
         return ID;
     }
-
-    public long time() {
-        return this.time;
-    }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/PathfindingDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/PathfindingDebugPayload.java
index d24bbad5880e978911242fca83f97c0d341ada1c..0b597799dafef1b53f17a56de294057bbf960d28 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/PathfindingDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/PathfindingDebugPayload.java
@@ -4,10 +4,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.pathfinder.Path;
 
-public record PathfindingDebugPayload(int b, Path c, float d) implements CustomPacketPayload {
-    private final int entityId;
-    private final Path path;
-    private final float maxNodeDistance;
+public record PathfindingDebugPayload(int entityId, Path path, float maxNodeDistance) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/path");
 
     public PathfindingDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -23,16 +20,4 @@ public record PathfindingDebugPayload(int b, Path c, float d) implements CustomP
     public ResourceLocation id() {
         return ID;
     }
-
-    public int entityId() {
-        return this.entityId;
-    }
-
-    public Path path() {
-        return this.path;
-    }
-
-    public float maxNodeDistance() {
-        return this.maxNodeDistance;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/PoiAddedDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/PoiAddedDebugPayload.java
index 3aae6fc1df68f3f6371b2e9e309e227bc892df83..4220f6d2994b1208c6bd09a317137d8acb9dd078 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/PoiAddedDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/PoiAddedDebugPayload.java
@@ -4,10 +4,7 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 
-public record PoiAddedDebugPayload(BlockPos b, String c, int d) implements CustomPacketPayload {
-    private final BlockPos pos;
-    private final String type;
-    private final int freeTicketCount;
+public record PoiAddedDebugPayload(BlockPos pos, String type, int freeTicketCount) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/poi_added");
 
     public PoiAddedDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -23,16 +20,4 @@ public record PoiAddedDebugPayload(BlockPos b, String c, int d) implements Custo
     public ResourceLocation id() {
         return ID;
     }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public String type() {
-        return this.type;
-    }
-
-    public int freeTicketCount() {
-        return this.freeTicketCount;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/PoiRemovedDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/PoiRemovedDebugPayload.java
index e643f82b1c0f478bf2b596f2d638ea8db7fd16d6..27aadf5ad4437237b13e7212bc6a94fd9935613c 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/PoiRemovedDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/PoiRemovedDebugPayload.java
@@ -4,8 +4,7 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 
-public record PoiRemovedDebugPayload(BlockPos b) implements CustomPacketPayload {
-    private final BlockPos pos;
+public record PoiRemovedDebugPayload(BlockPos pos) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/poi_removed");
 
     public PoiRemovedDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -19,8 +18,4 @@ public record PoiRemovedDebugPayload(BlockPos b) implements CustomPacketPayload
     public ResourceLocation id() {
         return ID;
     }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/PoiTicketCountDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/PoiTicketCountDebugPayload.java
index 1fdb04d7982c7d39a168fcfad305793ab65e162e..5cb33c559532efeec89214edf99cf56d43ca96e8 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/PoiTicketCountDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/PoiTicketCountDebugPayload.java
@@ -4,9 +4,7 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 
-public record PoiTicketCountDebugPayload(BlockPos b, int c) implements CustomPacketPayload {
-    private final BlockPos pos;
-    private final int freeTicketCount;
+public record PoiTicketCountDebugPayload(BlockPos pos, int freeTicketCount) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/poi_ticket_count");
 
     public PoiTicketCountDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -21,12 +19,4 @@ public record PoiTicketCountDebugPayload(BlockPos b, int c) implements CustomPac
     public ResourceLocation id() {
         return ID;
     }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public int freeTicketCount() {
-        return this.freeTicketCount;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/RaidsDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/RaidsDebugPayload.java
index 18049a1234a3dbcff0b750b6ec02c2d31e5190f5..d080792b3566e951377488cfbde74250ef8780e6 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/RaidsDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/RaidsDebugPayload.java
@@ -5,8 +5,7 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 
-public record RaidsDebugPayload(List<BlockPos> b) implements CustomPacketPayload {
-    private final List<BlockPos> raidCenters;
+public record RaidsDebugPayload(List<BlockPos> raidCenters) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/raids");
 
     public RaidsDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -20,8 +19,4 @@ public record RaidsDebugPayload(List<BlockPos> b) implements CustomPacketPayload
     public ResourceLocation id() {
         return ID;
     }
-
-    public List<BlockPos> raidCenters() {
-        return this.raidCenters;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/StructuresDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/StructuresDebugPayload.java
index 8aa60e304c6989bd8a4876b28020d177057c8251..a0aef45aced0794ac12e3ad799c25e1e16e64d68 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/StructuresDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/StructuresDebugPayload.java
@@ -8,10 +8,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
-public record StructuresDebugPayload(ResourceKey<Level> b, BoundingBox c, List<StructuresDebugPayload.PieceInfo> d) implements CustomPacketPayload {
-    private final ResourceKey<Level> dimension;
-    private final BoundingBox mainBB;
-    private final List<StructuresDebugPayload.PieceInfo> pieces;
+public record StructuresDebugPayload(ResourceKey<Level> dimension, BoundingBox mainBB, List<StructuresDebugPayload.PieceInfo> pieces) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/structures");
 
     public StructuresDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -41,22 +38,7 @@ public record StructuresDebugPayload(ResourceKey<Level> b, BoundingBox c, List<S
         friendlyByteBuf.writeInt(boundingBox.maxZ());
     }
 
-    public ResourceKey<Level> dimension() {
-        return this.dimension;
-    }
-
-    public BoundingBox mainBB() {
-        return this.mainBB;
-    }
-
-    public List<StructuresDebugPayload.PieceInfo> pieces() {
-        return this.pieces;
-    }
-
-    public static record PieceInfo(BoundingBox a, boolean b) {
-        private final BoundingBox boundingBox;
-        private final boolean isStart;
-
+    public static record PieceInfo(BoundingBox boundingBox, boolean isStart) {
         public PieceInfo(FriendlyByteBuf friendlyByteBuf) {
             this(StructuresDebugPayload.readBoundingBox(friendlyByteBuf), friendlyByteBuf.readBoolean());
         }
@@ -65,13 +47,5 @@ public record StructuresDebugPayload(ResourceKey<Level> b, BoundingBox c, List<S
             StructuresDebugPayload.writeBoundingBox(friendlyByteBuf, this.boundingBox);
             friendlyByteBuf.writeBoolean(this.isStart);
         }
-
-        public BoundingBox boundingBox() {
-            return this.boundingBox;
-        }
-
-        public boolean isStart() {
-            return this.isStart;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/VillageSectionsDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/VillageSectionsDebugPayload.java
index 2555fb6d766a58a30a222287024d450c8a4c1a11..ac83a292929160ec721702b0b24a0501a1434515 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/VillageSectionsDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/VillageSectionsDebugPayload.java
@@ -6,9 +6,7 @@ import net.minecraft.core.SectionPos;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 
-public record VillageSectionsDebugPayload(Set<SectionPos> b, Set<SectionPos> c) implements CustomPacketPayload {
-    private final Set<SectionPos> villageChunks;
-    private final Set<SectionPos> notVillageChunks;
+public record VillageSectionsDebugPayload(Set<SectionPos> villageChunks, Set<SectionPos> notVillageChunks) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/village_sections");
 
     public VillageSectionsDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -23,12 +21,4 @@ public record VillageSectionsDebugPayload(Set<SectionPos> b, Set<SectionPos> c)
     public ResourceLocation id() {
         return ID;
     }
-
-    public Set<SectionPos> villageChunks() {
-        return this.villageChunks;
-    }
-
-    public Set<SectionPos> notVillageChunks() {
-        return this.notVillageChunks;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/common/custom/WorldGenAttemptDebugPayload.java b/src/main/java/net/minecraft/network/protocol/common/custom/WorldGenAttemptDebugPayload.java
index a1b3c4e1409d2c828e02c8452ef9218485153dbb..2a671f94f13c4d6e678a82512a64c2a922030968 100644
--- a/src/main/java/net/minecraft/network/protocol/common/custom/WorldGenAttemptDebugPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/common/custom/WorldGenAttemptDebugPayload.java
@@ -4,13 +4,7 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 
-public record WorldGenAttemptDebugPayload(BlockPos b, float c, float d, float e, float f, float g) implements CustomPacketPayload {
-    private final BlockPos pos;
-    private final float scale;
-    private final float red;
-    private final float green;
-    private final float blue;
-    private final float alpha;
+public record WorldGenAttemptDebugPayload(BlockPos pos, float scale, float red, float green, float blue, float alpha) implements CustomPacketPayload {
     public static final ResourceLocation ID = new ResourceLocation("debug/worldgen_attempt");
 
     public WorldGenAttemptDebugPayload(FriendlyByteBuf friendlyByteBuf) {
@@ -29,28 +23,4 @@ public record WorldGenAttemptDebugPayload(BlockPos b, float c, float d, float e,
     public ResourceLocation id() {
         return ID;
     }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public float scale() {
-        return this.scale;
-    }
-
-    public float red() {
-        return this.red;
-    }
-
-    public float green() {
-        return this.green;
-    }
-
-    public float blue() {
-        return this.blue;
-    }
-
-    public float alpha() {
-        return this.alpha;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/configuration/ClientboundRegistryDataPacket.java b/src/main/java/net/minecraft/network/protocol/configuration/ClientboundRegistryDataPacket.java
index ea4e229e17f0cd7df3353eca6370c50cb126c2a0..623196e30f7d95d4e49ea709bc81a1ffbc1b3b99 100644
--- a/src/main/java/net/minecraft/network/protocol/configuration/ClientboundRegistryDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/configuration/ClientboundRegistryDataPacket.java
@@ -9,8 +9,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.RegistryOps;
 
-public record ClientboundRegistryDataPacket(RegistryAccess.Frozen a) implements Packet<ClientConfigurationPacketListener> {
-    private final RegistryAccess.Frozen registryHolder;
+public record ClientboundRegistryDataPacket(RegistryAccess.Frozen registryHolder) implements Packet<ClientConfigurationPacketListener> {
     private static final RegistryOps<Tag> BUILTIN_CONTEXT_OPS = RegistryOps.create(NbtOps.INSTANCE, RegistryAccess.fromRegistryOfRegistries(BuiltInRegistries.REGISTRY));
 
     public ClientboundRegistryDataPacket(FriendlyByteBuf friendlyByteBuf) {
@@ -24,8 +23,4 @@ public record ClientboundRegistryDataPacket(RegistryAccess.Frozen a) implements
     public void handle(ClientConfigurationPacketListener clientConfigurationPacketListener) {
         clientConfigurationPacketListener.handleRegistryData(this);
     }
-
-    public RegistryAccess.Frozen registryHolder() {
-        return this.registryHolder;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/configuration/ClientboundUpdateEnabledFeaturesPacket.java b/src/main/java/net/minecraft/network/protocol/configuration/ClientboundUpdateEnabledFeaturesPacket.java
index d495aceb653efaf2133036e52e1bcfc7fa27836f..920a2d24b5f900bfee08283482c2370a061088f8 100644
--- a/src/main/java/net/minecraft/network/protocol/configuration/ClientboundUpdateEnabledFeaturesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/configuration/ClientboundUpdateEnabledFeaturesPacket.java
@@ -6,11 +6,9 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceLocation;
 
-public record ClientboundUpdateEnabledFeaturesPacket(Set<ResourceLocation> a) implements Packet<ClientConfigurationPacketListener> {
-    private final Set<ResourceLocation> features;
-
+public record ClientboundUpdateEnabledFeaturesPacket(Set<ResourceLocation> features) implements Packet<ClientConfigurationPacketListener> {
     public ClientboundUpdateEnabledFeaturesPacket(FriendlyByteBuf friendlyByteBuf) {
-        this(friendlyByteBuf.readCollection(HashSet::new, FriendlyByteBuf::readResourceLocation));
+        this((Set<ResourceLocation>) friendlyByteBuf.readCollection(HashSet::new, FriendlyByteBuf::readResourceLocation));
     }
 
     public void write(FriendlyByteBuf friendlyByteBuf) {
@@ -20,8 +18,4 @@ public record ClientboundUpdateEnabledFeaturesPacket(Set<ResourceLocation> a) im
     public void handle(ClientConfigurationPacketListener clientConfigurationPacketListener) {
         clientConfigurationPacketListener.handleEnabledFeatures(this);
     }
-
-    public Set<ResourceLocation> features() {
-        return this.features;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockChangedAckPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockChangedAckPacket.java
index 6de5daee6472719fb5871e29835de8730a5dbd39..0ef27550137baa8a0412f8b64db16402c6c68749 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockChangedAckPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockChangedAckPacket.java
@@ -3,9 +3,7 @@ package net.minecraft.network.protocol.game;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundBlockChangedAckPacket(int a) implements Packet<ClientGamePacketListener> {
-    private final int sequence;
-
+public record ClientboundBlockChangedAckPacket(int sequence) implements Packet<ClientGamePacketListener> {
     public ClientboundBlockChangedAckPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readVarInt());
     }
@@ -17,8 +15,4 @@ public record ClientboundBlockChangedAckPacket(int a) implements Packet<ClientGa
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleBlockChangedAck(this);
     }
-
-    public int sequence() {
-        return this.sequence;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundChunkBatchFinishedPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundChunkBatchFinishedPacket.java
index e3d16e050767264c99f57dcfc97c7b455f7a0082..d5ed5f2ee4235ffce254577f0f93c7992e5fca9c 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundChunkBatchFinishedPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundChunkBatchFinishedPacket.java
@@ -3,9 +3,7 @@ package net.minecraft.network.protocol.game;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundChunkBatchFinishedPacket(int a) implements Packet<ClientGamePacketListener> {
-    private final int batchSize;
-
+public record ClientboundChunkBatchFinishedPacket(int batchSize) implements Packet<ClientGamePacketListener> {
     public ClientboundChunkBatchFinishedPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readVarInt());
     }
@@ -17,8 +15,4 @@ public record ClientboundChunkBatchFinishedPacket(int a) implements Packet<Clien
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleChunkBatchFinished(this);
     }
-
-    public int batchSize() {
-        return this.batchSize;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundChunksBiomesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundChunksBiomesPacket.java
index 7a95ab35af7b84d66393b035402a820b95ce5698..e0c663120e2d0295aefaf7af0ef52c2bf9ec57dc 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundChunksBiomesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundChunksBiomesPacket.java
@@ -9,8 +9,7 @@ import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.LevelChunkSection;
 
-public record ClientboundChunksBiomesPacket(List<ClientboundChunksBiomesPacket.ChunkBiomeData> a) implements Packet<ClientGamePacketListener> {
-    private final List<ClientboundChunksBiomesPacket.ChunkBiomeData> chunkBiomeData;
+public record ClientboundChunksBiomesPacket(List<ClientboundChunksBiomesPacket.ChunkBiomeData> chunkBiomeData) implements Packet<ClientGamePacketListener> {
     private static final int TWO_MEGABYTES = 2097152;
 
     public ClientboundChunksBiomesPacket(FriendlyByteBuf friendlyByteBuf) {
@@ -33,10 +32,7 @@ public record ClientboundChunksBiomesPacket(List<ClientboundChunksBiomesPacket.C
         return this.chunkBiomeData;
     }
 
-    public static record ChunkBiomeData(ChunkPos a, byte[] b) {
-        private final ChunkPos pos;
-        private final byte[] buffer;
-
+    public static record ChunkBiomeData(ChunkPos pos, byte[] buffer) {
         public ChunkBiomeData(LevelChunk levelChunk) {
             this(levelChunk.getPos(), new byte[calculateChunkSize(levelChunk)]);
             extractChunkData(new FriendlyByteBuf(this.getWriteBuffer()), levelChunk);
@@ -77,13 +73,5 @@ public record ClientboundChunksBiomesPacket(List<ClientboundChunksBiomesPacket.C
             friendlyByteBuf.writeChunkPos(this.pos);
             friendlyByteBuf.writeByteArray(this.buffer);
         }
-
-        public ChunkPos pos() {
-            return this.pos;
-        }
-
-        public byte[] buffer() {
-            return this.buffer;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
index 97e91a88615fb09931da39be508a55799df1e01f..7dc7663d8e82ce2445bfc284d228be77377df504 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
@@ -37,7 +37,7 @@ public class ClientboundCommandSuggestionsPacket implements Packet<ClientGamePac
         friendlyByteBuf.writeVarInt(this.suggestions.getRange().getLength());
         friendlyByteBuf.writeCollection(this.suggestions.getList(), (friendlyByteBufx, suggestion) -> {
             friendlyByteBufx.writeUtf(suggestion.getText());
-            friendlyByteBufx.writeNullable(suggestion.getTooltip(), (friendlyByteBuf, message) -> friendlyByteBuf.writeComponent(ComponentUtils.fromMessage(message)));
+            friendlyByteBufx.writeNullable(suggestion.getTooltip(), (friendlyByteBufIn, message) -> friendlyByteBufIn.writeComponent(ComponentUtils.fromMessage(message)));
         });
     }
 
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomChatCompletionsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomChatCompletionsPacket.java
index 4da9a8accb1079663da48c2a7da5deb8a2af1658..833e7826297e13b29b92afb3fc7661b5a10542e3 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomChatCompletionsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomChatCompletionsPacket.java
@@ -4,10 +4,7 @@ import java.util.List;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundCustomChatCompletionsPacket(ClientboundCustomChatCompletionsPacket.Action a, List<String> b) implements Packet<ClientGamePacketListener> {
-    private final ClientboundCustomChatCompletionsPacket.Action action;
-    private final List<String> entries;
-
+public record ClientboundCustomChatCompletionsPacket(ClientboundCustomChatCompletionsPacket.Action action, List<String> entries) implements Packet<ClientGamePacketListener> {
     public ClientboundCustomChatCompletionsPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readEnum(ClientboundCustomChatCompletionsPacket.Action.class), friendlyByteBuf.readList(FriendlyByteBuf::readUtf));
     }
@@ -21,14 +18,6 @@ public record ClientboundCustomChatCompletionsPacket(ClientboundCustomChatComple
         clientGamePacketListener.handleCustomChatCompletions(this);
     }
 
-    public ClientboundCustomChatCompletionsPacket.Action action() {
-        return this.action;
-    }
-
-    public List<String> entries() {
-        return this.entries;
-    }
-
     public static enum Action {
         ADD,
         REMOVE,
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundDamageEventPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundDamageEventPacket.java
index 6c52de54758d7f34839fa754e627f5256b0386fa..7fef315e06286b2d30bd99ea141d2ece513a7216 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundDamageEventPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundDamageEventPacket.java
@@ -11,13 +11,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.Vec3;
 
-public record ClientboundDamageEventPacket(int a, int b, int c, int d, Optional<Vec3> e) implements Packet<ClientGamePacketListener> {
-    private final int entityId;
-    private final int sourceTypeId;
-    private final int sourceCauseId;
-    private final int sourceDirectId;
-    private final Optional<Vec3> sourcePosition;
-
+public record ClientboundDamageEventPacket(int entityId, int sourceTypeId, int sourceCauseId, int sourceDirectId, Optional<Vec3> sourcePosition) implements Packet<ClientGamePacketListener> {
     public ClientboundDamageEventPacket(Entity entity, DamageSource damageSource) {
         this(entity.getId(), entity.level().registryAccess().registryOrThrow(Registries.DAMAGE_TYPE).getId(damageSource.type()), damageSource.getEntity() != null ? damageSource.getEntity().getId() : -1, damageSource.getDirectEntity() != null ? damageSource.getDirectEntity().getId() : -1, Optional.ofNullable(damageSource.sourcePositionRaw()));
     }
@@ -60,24 +54,4 @@ public record ClientboundDamageEventPacket(int a, int b, int c, int d, Optional<
             return new DamageSource(holder, entity2, entity);
         }
     }
-
-    public int entityId() {
-        return this.entityId;
-    }
-
-    public int sourceTypeId() {
-        return this.sourceTypeId;
-    }
-
-    public int sourceCauseId() {
-        return this.sourceCauseId;
-    }
-
-    public int sourceDirectId() {
-        return this.sourceDirectId;
-    }
-
-    public Optional<Vec3> sourcePosition() {
-        return this.sourcePosition;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundDeleteChatPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundDeleteChatPacket.java
index fdad83db0ea941610e54920c8e1a128ea65355bb..f19e01ed8a75e383d4073a4d0bae63019713263f 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundDeleteChatPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundDeleteChatPacket.java
@@ -4,9 +4,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.MessageSignature;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundDeleteChatPacket(MessageSignature.Packed a) implements Packet<ClientGamePacketListener> {
-    private final MessageSignature.Packed messageSignature;
-
+public record ClientboundDeleteChatPacket(MessageSignature.Packed messageSignature) implements Packet<ClientGamePacketListener> {
     public ClientboundDeleteChatPacket(FriendlyByteBuf friendlyByteBuf) {
         this(MessageSignature.Packed.read(friendlyByteBuf));
     }
@@ -18,8 +16,4 @@ public record ClientboundDeleteChatPacket(MessageSignature.Packed a) implements
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleDeleteChat(this);
     }
-
-    public MessageSignature.Packed messageSignature() {
-        return this.messageSignature;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundDisguisedChatPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundDisguisedChatPacket.java
index db1d93b634a48ca2889bb699737dc083f5456c10..cc139924ec444d63c05f33e13b37833d0694a957 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundDisguisedChatPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundDisguisedChatPacket.java
@@ -5,10 +5,7 @@ import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundDisguisedChatPacket(Component a, ChatType.BoundNetwork b) implements Packet<ClientGamePacketListener> {
-    private final Component message;
-    private final ChatType.BoundNetwork chatType;
-
+public record ClientboundDisguisedChatPacket(Component message, ChatType.BoundNetwork chatType) implements Packet<ClientGamePacketListener> {
     public ClientboundDisguisedChatPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readComponent(), new ChatType.BoundNetwork(friendlyByteBuf));
     }
@@ -25,12 +22,4 @@ public record ClientboundDisguisedChatPacket(Component a, ChatType.BoundNetwork
     public boolean isSkippable() {
         return true;
     }
-
-    public Component message() {
-        return this.message;
-    }
-
-    public ChatType.BoundNetwork chatType() {
-        return this.chatType;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundForgetLevelChunkPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundForgetLevelChunkPacket.java
index 8abed36be56c2578d05b127e4d5dfdefe589edbc..e7904f2ac5527fff68784ed7a621c6369ccd21dd 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundForgetLevelChunkPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundForgetLevelChunkPacket.java
@@ -4,9 +4,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.level.ChunkPos;
 
-public record ClientboundForgetLevelChunkPacket(ChunkPos a) implements Packet<ClientGamePacketListener> {
-    private final ChunkPos pos;
-
+public record ClientboundForgetLevelChunkPacket(ChunkPos pos) implements Packet<ClientGamePacketListener> {
     public ClientboundForgetLevelChunkPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readChunkPos());
     }
@@ -18,8 +16,4 @@ public record ClientboundForgetLevelChunkPacket(ChunkPos a) implements Packet<Cl
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleForgetLevelChunk(this);
     }
-
-    public ChunkPos pos() {
-        return this.pos;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundHurtAnimationPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundHurtAnimationPacket.java
index be7ad55e65a4faa843fc83b3250e829a2941819b..9cc7cb9503d05e0e0cb12b0324bd1fec0968515b 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundHurtAnimationPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundHurtAnimationPacket.java
@@ -4,10 +4,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.entity.LivingEntity;
 
-public record ClientboundHurtAnimationPacket(int a, float b) implements Packet<ClientGamePacketListener> {
-    private final int id;
-    private final float yaw;
-
+public record ClientboundHurtAnimationPacket(int id, float yaw) implements Packet<ClientGamePacketListener> {
     public ClientboundHurtAnimationPacket(LivingEntity livingEntity) {
         this(livingEntity.getId(), livingEntity.getHurtDir());
     }
@@ -24,12 +21,4 @@ public record ClientboundHurtAnimationPacket(int a, float b) implements Packet<C
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleHurtAnimation(this);
     }
-
-    public int id() {
-        return this.id;
-    }
-
-    public float yaw() {
-        return this.yaw;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java
index beb808d9980193c231fdf94a4748f950f791e3c5..ea193525b0185c9a3aafbabfcc62600b9789a946 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLoginPacket.java
@@ -8,18 +8,18 @@ import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.world.level.Level;
 
-public record ClientboundLoginPacket(int a, boolean b, Set<ResourceKey<Level>> c, int d, int e, int f, boolean g, boolean h, boolean i, CommonPlayerSpawnInfo j) implements Packet<ClientGamePacketListener> {
-    private final int playerId;
-    private final boolean hardcore;
-    private final Set<ResourceKey<Level>> levels;
-    private final int maxPlayers;
-    private final int chunkRadius;
-    private final int simulationDistance;
-    private final boolean reducedDebugInfo;
-    private final boolean showDeathScreen;
-    private final boolean doLimitedCrafting;
-    private final CommonPlayerSpawnInfo commonPlayerSpawnInfo;
-
+public record ClientboundLoginPacket(
+        int playerId,
+        boolean hardcore,
+        Set<ResourceKey<Level>> levels,
+        int maxPlayers,
+        int chunkRadius,
+        int simulationDistance,
+        boolean reducedDebugInfo,
+        boolean showDeathScreen,
+        boolean doLimitedCrafting,
+        CommonPlayerSpawnInfo commonPlayerSpawnInfo
+) implements Packet<ClientGamePacketListener> {
     public ClientboundLoginPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readInt(), friendlyByteBuf.readBoolean(), friendlyByteBuf.readCollection(Sets::newHashSetWithExpectedSize, (friendlyByteBufx) -> friendlyByteBufx.readResourceKey(Registries.DIMENSION)), friendlyByteBuf.readVarInt(), friendlyByteBuf.readVarInt(), friendlyByteBuf.readVarInt(), friendlyByteBuf.readBoolean(), friendlyByteBuf.readBoolean(), friendlyByteBuf.readBoolean(), new CommonPlayerSpawnInfo(friendlyByteBuf));
     }
@@ -40,44 +40,4 @@ public record ClientboundLoginPacket(int a, boolean b, Set<ResourceKey<Level>> c
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleLogin(this);
     }
-
-    public int playerId() {
-        return this.playerId;
-    }
-
-    public boolean hardcore() {
-        return this.hardcore;
-    }
-
-    public Set<ResourceKey<Level>> levels() {
-        return this.levels;
-    }
-
-    public int maxPlayers() {
-        return this.maxPlayers;
-    }
-
-    public int chunkRadius() {
-        return this.chunkRadius;
-    }
-
-    public int simulationDistance() {
-        return this.simulationDistance;
-    }
-
-    public boolean reducedDebugInfo() {
-        return this.reducedDebugInfo;
-    }
-
-    public boolean showDeathScreen() {
-        return this.showDeathScreen;
-    }
-
-    public boolean doLimitedCrafting() {
-        return this.doLimitedCrafting;
-    }
-
-    public CommonPlayerSpawnInfo commonPlayerSpawnInfo() {
-        return this.commonPlayerSpawnInfo;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundMapItemDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundMapItemDataPacket.java
index ceb436dbc8ad06c2a17f9bc15ba11e49bcc1650e..aa7930cec2b4100c309bb1d7cd10c822048a4df1 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundMapItemDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundMapItemDataPacket.java
@@ -31,12 +31,12 @@ public class ClientboundMapItemDataPacket implements Packet<ClientGamePacketList
         this.mapId = friendlyByteBuf.readVarInt();
         this.scale = friendlyByteBuf.readByte();
         this.locked = friendlyByteBuf.readBoolean();
-        this.decorations = friendlyByteBuf.readNullable((friendlyByteBufx) -> friendlyByteBufx.readList((friendlyByteBuf) -> {
-                MapDecoration.Type type = friendlyByteBuf.readEnum(MapDecoration.Type.class);
-                byte b = friendlyByteBuf.readByte();
-                byte b2 = friendlyByteBuf.readByte();
-                byte b3 = (byte)(friendlyByteBuf.readByte() & 15);
-                Component component = friendlyByteBuf.readNullable(FriendlyByteBuf::readComponent);
+        this.decorations = friendlyByteBuf.readNullable((friendlyByteBufx) -> friendlyByteBufx.readList((friendlyByteBufIn) -> {
+                MapDecoration.Type type = friendlyByteBufIn.readEnum(MapDecoration.Type.class);
+                byte b = friendlyByteBufIn.readByte();
+                byte b2 = friendlyByteBufIn.readByte();
+                byte b3 = (byte)(friendlyByteBufIn.readByte() & 15);
+                Component component = friendlyByteBufIn.readNullable(FriendlyByteBuf::readComponent);
                 return new MapDecoration(type, b, b2, b3, component);
             }));
         int i = friendlyByteBuf.readUnsignedByte();
@@ -56,12 +56,12 @@ public class ClientboundMapItemDataPacket implements Packet<ClientGamePacketList
         friendlyByteBuf.writeVarInt(this.mapId);
         friendlyByteBuf.writeByte(this.scale);
         friendlyByteBuf.writeBoolean(this.locked);
-        friendlyByteBuf.writeNullable(this.decorations, (friendlyByteBufx, list) -> friendlyByteBufx.writeCollection(list, (friendlyByteBuf, mapDecoration) -> {
-                friendlyByteBuf.writeEnum(mapDecoration.type());
-                friendlyByteBuf.writeByte(mapDecoration.x());
-                friendlyByteBuf.writeByte(mapDecoration.y());
-                friendlyByteBuf.writeByte(mapDecoration.rot() & 15);
-                friendlyByteBuf.writeNullable(mapDecoration.name(), FriendlyByteBuf::writeComponent);
+        friendlyByteBuf.writeNullable(this.decorations, (friendlyByteBufx, list) -> friendlyByteBufx.writeCollection(list, (friendlyByteBufIn, mapDecoration) -> {
+                friendlyByteBufIn.writeEnum(mapDecoration.type());
+                friendlyByteBufIn.writeByte(mapDecoration.x());
+                friendlyByteBufIn.writeByte(mapDecoration.y());
+                friendlyByteBufIn.writeByte(mapDecoration.rot() & 15);
+                friendlyByteBufIn.writeNullable(mapDecoration.name(), FriendlyByteBuf::writeComponent);
             }));
         if (this.colorPatch != null) {
             friendlyByteBuf.writeByte(this.colorPatch.width);
@@ -101,4 +101,4 @@ public class ClientboundMapItemDataPacket implements Packet<ClientGamePacketList
     public boolean isLocked() {
         return this.locked;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerChatPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerChatPacket.java
index b95656caacd8cee729c52cd3e4c50fbd2664f680..f9e8e5289b25c9f3c19a3fae929f3ec6061f6156 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerChatPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerChatPacket.java
@@ -10,17 +10,7 @@ import net.minecraft.network.chat.MessageSignature;
 import net.minecraft.network.chat.SignedMessageBody;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundPlayerChatPacket(UUID a, int b, @Nullable MessageSignature c, SignedMessageBody.Packed d, @Nullable Component e, FilterMask f, ChatType.BoundNetwork g) implements Packet<ClientGamePacketListener> {
-    private final UUID sender;
-    private final int index;
-    @Nullable
-    private final MessageSignature signature;
-    private final SignedMessageBody.Packed body;
-    @Nullable
-    private final Component unsignedContent;
-    private final FilterMask filterMask;
-    private final ChatType.BoundNetwork chatType;
-
+public record ClientboundPlayerChatPacket(UUID sender, int index, @Nullable MessageSignature signature, SignedMessageBody.Packed body, @Nullable Component unsignedContent, FilterMask filterMask, ChatType.BoundNetwork chatType) implements Packet<ClientGamePacketListener> {
     public ClientboundPlayerChatPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readUUID(), friendlyByteBuf.readVarInt(), friendlyByteBuf.readNullable(MessageSignature::read), new SignedMessageBody.Packed(friendlyByteBuf), friendlyByteBuf.readNullable(FriendlyByteBuf::readComponent), FilterMask.read(friendlyByteBuf), new ChatType.BoundNetwork(friendlyByteBuf));
     }
@@ -42,34 +32,4 @@ public record ClientboundPlayerChatPacket(UUID a, int b, @Nullable MessageSignat
     public boolean isSkippable() {
         return true;
     }
-
-    public UUID sender() {
-        return this.sender;
-    }
-
-    public int index() {
-        return this.index;
-    }
-
-    @Nullable
-    public MessageSignature signature() {
-        return this.signature;
-    }
-
-    public SignedMessageBody.Packed body() {
-        return this.body;
-    }
-
-    @Nullable
-    public Component unsignedContent() {
-        return this.unsignedContent;
-    }
-
-    public FilterMask filterMask() {
-        return this.filterMask;
-    }
-
-    public ChatType.BoundNetwork chatType() {
-        return this.chatType;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoRemovePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoRemovePacket.java
index b158a1bc826e1f5653553a02d0f81d65b1e62352..4978516a37046fb045344d66d685fc824ffec600 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoRemovePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoRemovePacket.java
@@ -5,9 +5,7 @@ import java.util.UUID;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundPlayerInfoRemovePacket(List<UUID> a) implements Packet<ClientGamePacketListener> {
-    private final List<UUID> profileIds;
-
+public record ClientboundPlayerInfoRemovePacket(List<UUID> profileIds) implements Packet<ClientGamePacketListener> {
     public ClientboundPlayerInfoRemovePacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readList(FriendlyByteBuf::readUUID));
     }
@@ -19,8 +17,4 @@ public record ClientboundPlayerInfoRemovePacket(List<UUID> a) implements Packet<
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handlePlayerInfoRemove(this);
     }
-
-    public List<UUID> profileIds() {
-        return this.profileIds;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
index 1e8ddf3a3ecfcfd4a320d9b653efff3e23dad3eb..8a5309e9d432dd60b2e3caa1de5f17375ec4a5a4 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
@@ -113,52 +113,18 @@ public class ClientboundPlayerInfoUpdatePacket implements Packet<ClientGamePacke
         }
     }
 
-    public static record Entry(UUID a, @Nullable GameProfile b, boolean c, int d, GameType e, @Nullable Component f, @Nullable RemoteChatSession.Data g) {
-        private final UUID profileId;
-        @Nullable
-        private final GameProfile profile;
-        private final boolean listed;
-        private final int latency;
-        private final GameType gameMode;
-        @Nullable
-        private final Component displayName;
-        @Nullable
-        final RemoteChatSession.Data chatSession;
-
+    public static record Entry(
+            UUID profileId,
+            @Nullable GameProfile profile,
+            boolean listed,
+            int latency,
+            GameType gameMode,
+            @Nullable Component displayName,
+            @Nullable RemoteChatSession.Data chatSession
+    ) {
         Entry(ServerPlayer serverPlayer) {
             this(serverPlayer.getUUID(), serverPlayer.getGameProfile(), true, serverPlayer.connection.latency(), serverPlayer.gameMode.getGameModeForPlayer(), serverPlayer.getTabListDisplayName(), Optionull.map(serverPlayer.getChatSession(), RemoteChatSession::asData));
         }
-
-        public UUID profileId() {
-            return this.profileId;
-        }
-
-        @Nullable
-        public GameProfile profile() {
-            return this.profile;
-        }
-
-        public boolean listed() {
-            return this.listed;
-        }
-
-        public int latency() {
-            return this.latency;
-        }
-
-        public GameType gameMode() {
-            return this.gameMode;
-        }
-
-        @Nullable
-        public Component displayName() {
-            return this.displayName;
-        }
-
-        @Nullable
-        public RemoteChatSession.Data chatSession() {
-            return this.chatSession;
-        }
     }
 
     static class EntryBuilder {
@@ -181,4 +147,4 @@ public class ClientboundPlayerInfoUpdatePacket implements Packet<ClientGamePacke
             return new ClientboundPlayerInfoUpdatePacket.Entry(this.profileId, this.profile, this.listed, this.latency, this.gameMode, this.displayName, this.chatSession);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundRespawnPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundRespawnPacket.java
index 83a47990ec81640bbd501d717afa59845d1c4f79..69bd6a251e770ec3560e4033c08935a47ad2a484 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundRespawnPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundRespawnPacket.java
@@ -3,9 +3,7 @@ package net.minecraft.network.protocol.game;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundRespawnPacket(CommonPlayerSpawnInfo d, byte e) implements Packet<ClientGamePacketListener> {
-    private final CommonPlayerSpawnInfo commonPlayerSpawnInfo;
-    private final byte dataToKeep;
+public record ClientboundRespawnPacket(CommonPlayerSpawnInfo commonPlayerSpawnInfo, byte dataToKeep) implements Packet<ClientGamePacketListener> {
     public static final byte KEEP_ATTRIBUTES = 1;
     public static final byte KEEP_ENTITY_DATA = 2;
     public static final byte KEEP_ALL_DATA = 3;
@@ -34,4 +32,4 @@ public record ClientboundRespawnPacket(CommonPlayerSpawnInfo d, byte e) implemen
     public byte dataToKeep() {
         return this.dataToKeep;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
index ec4df5084db59941832059f06da01b6065e00cdc..2ef04996a1bb461c4cccc3a9b4ae0e37632f5d41 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
@@ -6,9 +6,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.syncher.SynchedEntityData;
 
-public record ClientboundSetEntityDataPacket(int b, List<SynchedEntityData.DataValue<?>> c) implements Packet<ClientGamePacketListener> {
-    private final int id;
-    private final List<SynchedEntityData.DataValue<?>> packedItems;
+public record ClientboundSetEntityDataPacket(int id, List<SynchedEntityData.DataValue<?>> packedItems) implements Packet<ClientGamePacketListener> {
     public static final int EOF_MARKER = 255;
 
     public ClientboundSetEntityDataPacket(FriendlyByteBuf friendlyByteBuf) {
@@ -20,14 +18,14 @@ public record ClientboundSetEntityDataPacket(int b, List<SynchedEntityData.DataV
             dataValue.write(friendlyByteBuf);
         }
 
-        friendlyByteBuf.writeByte(255);
+        friendlyByteBuf.writeByte(EOF_MARKER);
     }
 
     private static List<SynchedEntityData.DataValue<?>> unpack(FriendlyByteBuf friendlyByteBuf) {
         List<SynchedEntityData.DataValue<?>> list = new ArrayList();
 
         int i;
-        while((i = friendlyByteBuf.readUnsignedByte()) != 255) {
+        while((i = friendlyByteBuf.readUnsignedByte()) != EOF_MARKER) {
             list.add(SynchedEntityData.DataValue.read(friendlyByteBuf, i));
         }
 
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java
index d1e274a389d246fe225627e8539428d646ad0d94..5bf2f4e4978a98178802dd71471ecb37685424df 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket.java
@@ -3,9 +3,7 @@ package net.minecraft.network.protocol.game;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundSetSimulationDistancePacket(int a) implements Packet<ClientGamePacketListener> {
-    private final int simulationDistance;
-
+public record ClientboundSetSimulationDistancePacket(int simulationDistance) implements Packet<ClientGamePacketListener> {
     public ClientboundSetSimulationDistancePacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readVarInt());
     }
@@ -17,8 +15,4 @@ public record ClientboundSetSimulationDistancePacket(int a) implements Packet<Cl
     public void handle(ClientGamePacketListener clientGamePacketListener) {
         clientGamePacketListener.handleSetSimulationDistance(this);
     }
-
-    public int simulationDistance() {
-        return this.simulationDistance;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
index 549964bb087d12acc4d6bca2942c05ba69ce452e..d352c501e532fe3614928aa24dab002bd39bf3da 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
@@ -4,10 +4,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundSystemChatPacket(Component a, boolean b) implements Packet<ClientGamePacketListener> {
-    private final Component content;
-    private final boolean overlay;
-
+public record ClientboundSystemChatPacket(Component content, boolean overlay) implements Packet<ClientGamePacketListener> {
     public ClientboundSystemChatPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readComponent(), friendlyByteBuf.readBoolean());
     }
@@ -24,12 +21,4 @@ public record ClientboundSystemChatPacket(Component a, boolean b) implements Pac
     public boolean isSkippable() {
         return true;
     }
-
-    public Component content() {
-        return this.content;
-    }
-
-    public boolean overlay() {
-        return this.overlay;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
index 668e47e395ea0d54e45ef896b0921125b1d8f9d5..de8cdbc59d9f82d6e1de868544b5f34c2e020180 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket.java
@@ -31,7 +31,7 @@ public class ClientboundUpdateAttributesPacket implements Packet<ClientGamePacke
             ResourceLocation resourceLocation = friendlyByteBufx.readResourceLocation();
             Attribute attribute = BuiltInRegistries.ATTRIBUTE.get(resourceLocation);
             double d = friendlyByteBufx.readDouble();
-            List<AttributeModifier> list = friendlyByteBufx.readList((friendlyByteBuf) -> new AttributeModifier(friendlyByteBuf.readUUID(), "Unknown synced attribute modifier", friendlyByteBuf.readDouble(), AttributeModifier.Operation.fromValue(friendlyByteBuf.readByte())));
+            List<AttributeModifier> list = friendlyByteBufx.readList((friendlyByteBufIn) -> new AttributeModifier(friendlyByteBufIn.readUUID(), "Unknown synced attribute modifier", friendlyByteBufIn.readDouble(), AttributeModifier.Operation.fromValue(friendlyByteBufIn.readByte())));
             return new ClientboundUpdateAttributesPacket.AttributeSnapshot(attribute, d, list);
         });
     }
@@ -41,10 +41,10 @@ public class ClientboundUpdateAttributesPacket implements Packet<ClientGamePacke
         friendlyByteBuf.writeCollection(this.attributes, (friendlyByteBufx, attributeSnapshot) -> {
             friendlyByteBufx.writeResourceLocation(BuiltInRegistries.ATTRIBUTE.getKey(attributeSnapshot.getAttribute()));
             friendlyByteBufx.writeDouble(attributeSnapshot.getBase());
-            friendlyByteBufx.writeCollection(attributeSnapshot.getModifiers(), (friendlyByteBuf, attributeModifier) -> {
-                friendlyByteBuf.writeUUID(attributeModifier.getId());
-                friendlyByteBuf.writeDouble(attributeModifier.getAmount());
-                friendlyByteBuf.writeByte(attributeModifier.getOperation().toValue());
+            friendlyByteBufx.writeCollection(attributeSnapshot.getModifiers(), (friendlyByteBufIn, attributeModifier) -> {
+                friendlyByteBufIn.writeUUID(attributeModifier.getId());
+                friendlyByteBufIn.writeDouble(attributeModifier.getAmount());
+                friendlyByteBufIn.writeByte(attributeModifier.getOperation().toValue());
             });
         });
     }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
index 9764f313458ede5d5e32e7a45a3c222df791bf61..0bed6e4b401cb215a662c09d4d5fd411c738f6ad 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
@@ -44,6 +44,6 @@ public class ClientboundUpdateRecipesPacket implements Packet<ClientGamePacketLi
     public static <T extends Recipe<?>> void toNetwork(FriendlyByteBuf friendlyByteBuf, RecipeHolder<?> recipeHolder) {
         friendlyByteBuf.writeResourceLocation(BuiltInRegistries.RECIPE_SERIALIZER.getKey(recipeHolder.value().getSerializer()));
         friendlyByteBuf.writeResourceLocation(recipeHolder.id());
-        recipeHolder.value().getSerializer().toNetwork(friendlyByteBuf, recipeHolder.value());
+        ((RecipeHolder) recipeHolder).value().getSerializer().toNetwork(friendlyByteBuf, ((RecipeHolder) recipeHolder).value());
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/game/CommonPlayerSpawnInfo.java b/src/main/java/net/minecraft/network/protocol/game/CommonPlayerSpawnInfo.java
index a4f3816216fe5b74e5a36e00c31514570d0db96b..745eb45a4282d57e64279713f845c6b941951e59 100644
--- a/src/main/java/net/minecraft/network/protocol/game/CommonPlayerSpawnInfo.java
+++ b/src/main/java/net/minecraft/network/protocol/game/CommonPlayerSpawnInfo.java
@@ -10,18 +10,17 @@ import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.dimension.DimensionType;
 
-public record CommonPlayerSpawnInfo(ResourceKey<DimensionType> a, ResourceKey<Level> b, long c, GameType d, @Nullable GameType e, boolean f, boolean g, Optional<GlobalPos> h, int i) {
-    private final ResourceKey<DimensionType> dimensionType;
-    private final ResourceKey<Level> dimension;
-    private final long seed;
-    private final GameType gameType;
-    @Nullable
-    private final GameType previousGameType;
-    private final boolean isDebug;
-    private final boolean isFlat;
-    private final Optional<GlobalPos> lastDeathLocation;
-    private final int portalCooldown;
-
+public record CommonPlayerSpawnInfo(
+        ResourceKey<DimensionType> dimensionType,
+        ResourceKey<Level> dimension,
+        long seed,
+        GameType gameType,
+        @Nullable GameType previousGameType,
+        boolean isDebug,
+        boolean isFlat,
+        Optional<GlobalPos> lastDeathLocation,
+        int portalCooldown
+) {
     public CommonPlayerSpawnInfo(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readResourceKey(Registries.DIMENSION_TYPE), friendlyByteBuf.readResourceKey(Registries.DIMENSION), friendlyByteBuf.readLong(), GameType.byId(friendlyByteBuf.readByte()), GameType.byNullableId(friendlyByteBuf.readByte()), friendlyByteBuf.readBoolean(), friendlyByteBuf.readBoolean(), friendlyByteBuf.readOptional(FriendlyByteBuf::readGlobalPos), friendlyByteBuf.readVarInt());
     }
@@ -37,41 +36,4 @@ public record CommonPlayerSpawnInfo(ResourceKey<DimensionType> a, ResourceKey<Le
         friendlyByteBuf.writeOptional(this.lastDeathLocation, FriendlyByteBuf::writeGlobalPos);
         friendlyByteBuf.writeVarInt(this.portalCooldown);
     }
-
-    public ResourceKey<DimensionType> dimensionType() {
-        return this.dimensionType;
-    }
-
-    public ResourceKey<Level> dimension() {
-        return this.dimension;
-    }
-
-    public long seed() {
-        return this.seed;
-    }
-
-    public GameType gameType() {
-        return this.gameType;
-    }
-
-    @Nullable
-    public GameType previousGameType() {
-        return this.previousGameType;
-    }
-
-    public boolean isDebug() {
-        return this.isDebug;
-    }
-
-    public boolean isFlat() {
-        return this.isFlat;
-    }
-
-    public Optional<GlobalPos> lastDeathLocation() {
-        return this.lastDeathLocation;
-    }
-
-    public int portalCooldown() {
-        return this.portalCooldown;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatAckPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatAckPacket.java
index db1110e6525810a2283e8fbc2d212b1d64b6b885..2a2c6ebf399ac4cc0af4d0041a34b1277f4188dd 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatAckPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatAckPacket.java
@@ -3,9 +3,7 @@ package net.minecraft.network.protocol.game;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ServerboundChatAckPacket(int a) implements Packet<ServerGamePacketListener> {
-    private final int offset;
-
+public record ServerboundChatAckPacket(int offset) implements Packet<ServerGamePacketListener> {
     public ServerboundChatAckPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readVarInt());
     }
@@ -17,8 +15,4 @@ public record ServerboundChatAckPacket(int a) implements Packet<ServerGamePacket
     public void handle(ServerGamePacketListener serverGamePacketListener) {
         serverGamePacketListener.handleChatAck(this);
     }
-
-    public int offset() {
-        return this.offset;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatCommandPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatCommandPacket.java
index 035c1cdef1b14ec6c625b60f3aabb6c89561ad15..765a2dd0e596d454dca3c24750568dab91b35567 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatCommandPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatCommandPacket.java
@@ -6,13 +6,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.LastSeenMessages;
 import net.minecraft.network.protocol.Packet;
 
-public record ServerboundChatCommandPacket(String a, Instant b, long c, ArgumentSignatures d, LastSeenMessages.Update e) implements Packet<ServerGamePacketListener> {
-    private final String command;
-    private final Instant timeStamp;
-    private final long salt;
-    private final ArgumentSignatures argumentSignatures;
-    private final LastSeenMessages.Update lastSeenMessages;
-
+public record ServerboundChatCommandPacket(String command, Instant timeStamp, long salt, ArgumentSignatures argumentSignatures, LastSeenMessages.Update lastSeenMessages) implements Packet<ServerGamePacketListener> {
     public ServerboundChatCommandPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readUtf(256), friendlyByteBuf.readInstant(), friendlyByteBuf.readLong(), new ArgumentSignatures(friendlyByteBuf), new LastSeenMessages.Update(friendlyByteBuf));
     }
@@ -28,24 +22,4 @@ public record ServerboundChatCommandPacket(String a, Instant b, long c, Argument
     public void handle(ServerGamePacketListener serverGamePacketListener) {
         serverGamePacketListener.handleChatCommand(this);
     }
-
-    public String command() {
-        return this.command;
-    }
-
-    public Instant timeStamp() {
-        return this.timeStamp;
-    }
-
-    public long salt() {
-        return this.salt;
-    }
-
-    public ArgumentSignatures argumentSignatures() {
-        return this.argumentSignatures;
-    }
-
-    public LastSeenMessages.Update lastSeenMessages() {
-        return this.lastSeenMessages;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPacket.java
index d3a2ef4ae3dc44ecda011ec391333f2faf4435bd..08aa7c28318c328264a8d6ec0fb11f77155da269 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPacket.java
@@ -7,14 +7,7 @@ import net.minecraft.network.chat.LastSeenMessages;
 import net.minecraft.network.chat.MessageSignature;
 import net.minecraft.network.protocol.Packet;
 
-public record ServerboundChatPacket(String a, Instant b, long c, @Nullable MessageSignature d, LastSeenMessages.Update e) implements Packet<ServerGamePacketListener> {
-    private final String message;
-    private final Instant timeStamp;
-    private final long salt;
-    @Nullable
-    private final MessageSignature signature;
-    private final LastSeenMessages.Update lastSeenMessages;
-
+public record ServerboundChatPacket(String message, Instant timeStamp, long salt, @Nullable MessageSignature signature, LastSeenMessages.Update lastSeenMessages) implements Packet<ServerGamePacketListener> {
     public ServerboundChatPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readUtf(256), friendlyByteBuf.readInstant(), friendlyByteBuf.readLong(), friendlyByteBuf.readNullable(MessageSignature::read), new LastSeenMessages.Update(friendlyByteBuf));
     }
@@ -30,25 +23,4 @@ public record ServerboundChatPacket(String a, Instant b, long c, @Nullable Messa
     public void handle(ServerGamePacketListener serverGamePacketListener) {
         serverGamePacketListener.handleChat(this);
     }
-
-    public String message() {
-        return this.message;
-    }
-
-    public Instant timeStamp() {
-        return this.timeStamp;
-    }
-
-    public long salt() {
-        return this.salt;
-    }
-
-    @Nullable
-    public MessageSignature signature() {
-        return this.signature;
-    }
-
-    public LastSeenMessages.Update lastSeenMessages() {
-        return this.lastSeenMessages;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java
index 8326c4ab2d0b3342810b6b239724f8f5e57614e7..7da409fb43e02e3d2614f81e68e3fe9ffab6b589 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java
@@ -4,9 +4,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.RemoteChatSession;
 import net.minecraft.network.protocol.Packet;
 
-public record ServerboundChatSessionUpdatePacket(RemoteChatSession.Data a) implements Packet<ServerGamePacketListener> {
-    private final RemoteChatSession.Data chatSession;
-
+public record ServerboundChatSessionUpdatePacket(RemoteChatSession.Data chatSession) implements Packet<ServerGamePacketListener> {
     public ServerboundChatSessionUpdatePacket(FriendlyByteBuf friendlyByteBuf) {
         this(RemoteChatSession.Data.read(friendlyByteBuf));
     }
@@ -18,8 +16,4 @@ public record ServerboundChatSessionUpdatePacket(RemoteChatSession.Data a) imple
     public void handle(ServerGamePacketListener serverGamePacketListener) {
         serverGamePacketListener.handleChatSessionUpdate(this);
     }
-
-    public RemoteChatSession.Data chatSession() {
-        return this.chatSession;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundChunkBatchReceivedPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundChunkBatchReceivedPacket.java
index 41f79a955706e32033c35fb77c3215407beee9b8..a6a24c4169ea55af22cd62645ad4e24299eebdfe 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundChunkBatchReceivedPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundChunkBatchReceivedPacket.java
@@ -3,9 +3,7 @@ package net.minecraft.network.protocol.game;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ServerboundChunkBatchReceivedPacket(float a) implements Packet<ServerGamePacketListener> {
-    private final float desiredChunksPerTick;
-
+public record ServerboundChunkBatchReceivedPacket(float desiredChunksPerTick) implements Packet<ServerGamePacketListener> {
     public ServerboundChunkBatchReceivedPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readFloat());
     }
@@ -17,8 +15,4 @@ public record ServerboundChunkBatchReceivedPacket(float a) implements Packet<Ser
     public void handle(ServerGamePacketListener serverGamePacketListener) {
         serverGamePacketListener.handleChunkBatchReceived(this);
     }
-
-    public float desiredChunksPerTick() {
-        return this.desiredChunksPerTick;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/handshake/ClientIntentionPacket.java b/src/main/java/net/minecraft/network/protocol/handshake/ClientIntentionPacket.java
index 92f1c5991673ef369bd79ee2adeb6334bda4c395..60859566adfc9ac37b370a5dff4054f9d1162833 100644
--- a/src/main/java/net/minecraft/network/protocol/handshake/ClientIntentionPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/handshake/ClientIntentionPacket.java
@@ -4,11 +4,7 @@ import net.minecraft.network.ConnectionProtocol;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientIntentionPacket(int a, String b, int c, ClientIntent d) implements Packet<ServerHandshakePacketListener> {
-    private final int protocolVersion;
-    public String hostName;
-    private final int port;
-    private final ClientIntent intention;
+public record ClientIntentionPacket(int protocolVersion, String hostName, int port, ClientIntent intention) implements Packet<ServerHandshakePacketListener> {
     private static final int MAX_HOST_LENGTH = 255;
 
     public ClientIntentionPacket(FriendlyByteBuf friendlyByteBuf) {
@@ -29,20 +25,4 @@ public record ClientIntentionPacket(int a, String b, int c, ClientIntent d) impl
     public ConnectionProtocol nextProtocol() {
         return this.intention.protocol();
     }
-
-    public int protocolVersion() {
-        return this.protocolVersion;
-    }
-
-    public String hostName() {
-        return this.hostName;
-    }
-
-    public int port() {
-        return this.port;
-    }
-
-    public ClientIntent intention() {
-        return this.intention;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/login/ClientboundCustomQueryPacket.java b/src/main/java/net/minecraft/network/protocol/login/ClientboundCustomQueryPacket.java
index 22c51ef6dd34bd817d9b69cd7d89da9410cd2a0e..588cc14c489a17719f4b37c8ec06f262a915439f 100644
--- a/src/main/java/net/minecraft/network/protocol/login/ClientboundCustomQueryPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/login/ClientboundCustomQueryPacket.java
@@ -6,9 +6,7 @@ import net.minecraft.network.protocol.login.custom.CustomQueryPayload;
 import net.minecraft.network.protocol.login.custom.DiscardedQueryPayload;
 import net.minecraft.resources.ResourceLocation;
 
-public record ClientboundCustomQueryPacket(int a, CustomQueryPayload b) implements Packet<ClientLoginPacketListener> {
-    private final int transactionId;
-    private final CustomQueryPayload payload;
+public record ClientboundCustomQueryPacket(int transactionId, CustomQueryPayload payload) implements Packet<ClientLoginPacketListener> {
     private static final int MAX_PAYLOAD_SIZE = 1048576;
 
     public ClientboundCustomQueryPacket(FriendlyByteBuf friendlyByteBuf) {
@@ -38,12 +36,4 @@ public record ClientboundCustomQueryPacket(int a, CustomQueryPayload b) implemen
     public void handle(ClientLoginPacketListener clientLoginPacketListener) {
         clientLoginPacketListener.handleCustomQuery(this);
     }
-
-    public int transactionId() {
-        return this.transactionId;
-    }
-
-    public CustomQueryPayload payload() {
-        return this.payload;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/login/ServerboundCustomQueryAnswerPacket.java b/src/main/java/net/minecraft/network/protocol/login/ServerboundCustomQueryAnswerPacket.java
index 8104d8f93f76448bf1d6710391a964b339fba7f4..1c23e6b4e4b1d0e563a52781ede574e7c931e32e 100644
--- a/src/main/java/net/minecraft/network/protocol/login/ServerboundCustomQueryAnswerPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/login/ServerboundCustomQueryAnswerPacket.java
@@ -6,10 +6,7 @@ import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.login.custom.CustomQueryAnswerPayload;
 import net.minecraft.network.protocol.login.custom.DiscardedQueryAnswerPayload;
 
-public record ServerboundCustomQueryAnswerPacket(int a, @Nullable CustomQueryAnswerPayload b) implements Packet<ServerLoginPacketListener> {
-    private final int transactionId;
-    @Nullable
-    private final CustomQueryAnswerPayload payload;
+public record ServerboundCustomQueryAnswerPacket(int transactionId, @Nullable CustomQueryAnswerPayload payload) implements Packet<ServerLoginPacketListener> {
     private static final int MAX_PAYLOAD_SIZE = 1048576;
 
     public static ServerboundCustomQueryAnswerPacket read(FriendlyByteBuf friendlyByteBuf) {
@@ -39,13 +36,4 @@ public record ServerboundCustomQueryAnswerPacket(int a, @Nullable CustomQueryAns
     public void handle(ServerLoginPacketListener serverLoginPacketListener) {
         serverLoginPacketListener.handleCustomQueryPacket(this);
     }
-
-    public int transactionId() {
-        return this.transactionId;
-    }
-
-    @Nullable
-    public CustomQueryAnswerPayload payload() {
-        return this.payload;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/login/ServerboundHelloPacket.java b/src/main/java/net/minecraft/network/protocol/login/ServerboundHelloPacket.java
index 60a2ab2637f94e8df5c1b99fa654ac6d6f4ace7a..c496dad8f65b4646c1269f81ac4ef37ab0f005ae 100644
--- a/src/main/java/net/minecraft/network/protocol/login/ServerboundHelloPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/login/ServerboundHelloPacket.java
@@ -4,10 +4,7 @@ import java.util.UUID;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ServerboundHelloPacket(String a, UUID b) implements Packet<ServerLoginPacketListener> {
-    private final String name;
-    private final UUID profileId;
-
+public record ServerboundHelloPacket(String name, UUID profileId) implements Packet<ServerLoginPacketListener> {
     public ServerboundHelloPacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readUtf(16), friendlyByteBuf.readUUID());
     }
@@ -20,12 +17,4 @@ public record ServerboundHelloPacket(String a, UUID b) implements Packet<ServerL
     public void handle(ServerLoginPacketListener serverLoginPacketListener) {
         serverLoginPacketListener.handleHello(this);
     }
-
-    public String name() {
-        return this.name;
-    }
-
-    public UUID profileId() {
-        return this.profileId;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/login/custom/DiscardedQueryPayload.java b/src/main/java/net/minecraft/network/protocol/login/custom/DiscardedQueryPayload.java
index 26d8da8f575da585161a4bed63838d0ea3919c3f..8ddbb515216199af0bcf94c3aef83cb6fd08d3e7 100644
--- a/src/main/java/net/minecraft/network/protocol/login/custom/DiscardedQueryPayload.java
+++ b/src/main/java/net/minecraft/network/protocol/login/custom/DiscardedQueryPayload.java
@@ -3,13 +3,7 @@ package net.minecraft.network.protocol.login.custom;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 
-public record DiscardedQueryPayload(ResourceLocation a) implements CustomQueryPayload {
-    private final ResourceLocation id;
-
+public record DiscardedQueryPayload(ResourceLocation id) implements CustomQueryPayload {
     public void write(FriendlyByteBuf friendlyByteBuf) {
     }
-
-    public ResourceLocation id() {
-        return this.id;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/protocol/status/ClientboundStatusResponsePacket.java b/src/main/java/net/minecraft/network/protocol/status/ClientboundStatusResponsePacket.java
index 89bd8fe552efbc3d0cd394236b8f001de680b876..8c9d172f8e8a150d8616a4465b27fe3acb5bc54b 100644
--- a/src/main/java/net/minecraft/network/protocol/status/ClientboundStatusResponsePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/status/ClientboundStatusResponsePacket.java
@@ -3,9 +3,7 @@ package net.minecraft.network.protocol.status;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundStatusResponsePacket(ServerStatus a) implements Packet<ClientStatusPacketListener> {
-    private final ServerStatus status;
-
+public record ClientboundStatusResponsePacket(ServerStatus status) implements Packet<ClientStatusPacketListener> {
     public ClientboundStatusResponsePacket(FriendlyByteBuf friendlyByteBuf) {
         this(friendlyByteBuf.readJsonWithCodec(ServerStatus.CODEC));
     }
@@ -17,8 +15,4 @@ public record ClientboundStatusResponsePacket(ServerStatus a) implements Packet<
     public void handle(ClientStatusPacketListener clientStatusPacketListener) {
         clientStatusPacketListener.handleStatusResponse(this);
     }
-
-    public ServerStatus status() {
-        return this.status;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/status/ServerStatus.java b/src/main/java/net/minecraft/network/protocol/status/ServerStatus.java
index efaa4673add6959e2887c30494de24ca79b9f4ad..33f8bc07741db0fc89a1648a15c103b3f020dd61 100644
--- a/src/main/java/net/minecraft/network/protocol/status/ServerStatus.java
+++ b/src/main/java/net/minecraft/network/protocol/status/ServerStatus.java
@@ -15,36 +15,10 @@ import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.util.ExtraCodecs;
 
-public record ServerStatus(Component b, Optional<ServerStatus.Players> c, Optional<ServerStatus.Version> d, Optional<ServerStatus.Favicon> e, boolean f) {
-    private final Component description;
-    private final Optional<ServerStatus.Players> players;
-    private final Optional<ServerStatus.Version> version;
-    private final Optional<ServerStatus.Favicon> favicon;
-    private final boolean enforcesSecureChat;
+public record ServerStatus(Component description, Optional<ServerStatus.Players> players, Optional<ServerStatus.Version> version, Optional<ServerStatus.Favicon> favicon, boolean enforcesSecureChat) {
     public static final Codec<ServerStatus> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.COMPONENT.optionalFieldOf("description", CommonComponents.EMPTY).forGetter(ServerStatus::description), ServerStatus.Players.CODEC.optionalFieldOf("players").forGetter(ServerStatus::players), ServerStatus.Version.CODEC.optionalFieldOf("version").forGetter(ServerStatus::version), ServerStatus.Favicon.CODEC.optionalFieldOf("favicon").forGetter(ServerStatus::favicon), Codec.BOOL.optionalFieldOf("enforcesSecureChat", false).forGetter(ServerStatus::enforcesSecureChat)).apply(instance, ServerStatus::new));
 
-    public Component description() {
-        return this.description;
-    }
-
-    public Optional<ServerStatus.Players> players() {
-        return this.players;
-    }
-
-    public Optional<ServerStatus.Version> version() {
-        return this.version;
-    }
-
-    public Optional<ServerStatus.Favicon> favicon() {
-        return this.favicon;
-    }
-
-    public boolean enforcesSecureChat() {
-        return this.enforcesSecureChat;
-    }
-
-    public static record Favicon(byte[] b) {
-        private final byte[] iconBytes;
+    public static record Favicon(byte[] iconBytes) {
         private static final String PREFIX = "data:image/png;base64,";
         public static final Codec<ServerStatus.Favicon> CODEC = Codec.STRING.comapFlatMap((s) -> {
             if (!s.startsWith("data:image/png;base64,")) {
@@ -59,48 +33,19 @@ public record ServerStatus(Component b, Optional<ServerStatus.Players> c, Option
                 }
             }
         }, (favicon) -> "data:image/png;base64," + new String(Base64.getEncoder().encode(favicon.iconBytes), StandardCharsets.UTF_8));
-
-        public byte[] iconBytes() {
-            return this.iconBytes;
-        }
     }
 
-    public static record Players(int b, int c, List<GameProfile> d) {
-        private final int max;
-        private final int online;
-        private final List<GameProfile> sample;
+    public static record Players(int max, int online, List<GameProfile> sample) {
         private static final Codec<GameProfile> PROFILE_CODEC = RecordCodecBuilder.create((instance) -> instance.group(UUIDUtil.STRING_CODEC.fieldOf("id").forGetter(GameProfile::getId), Codec.STRING.fieldOf("name").forGetter(GameProfile::getName)).apply(instance, GameProfile::new));
         public static final Codec<ServerStatus.Players> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("max").forGetter(ServerStatus.Players::max), Codec.INT.fieldOf("online").forGetter(ServerStatus.Players::online), PROFILE_CODEC.listOf().optionalFieldOf("sample", List.of()).forGetter(ServerStatus.Players::sample)).apply(instance, ServerStatus.Players::new));
-
-        public int max() {
-            return this.max;
-        }
-
-        public int online() {
-            return this.online;
-        }
-
-        public List<GameProfile> sample() {
-            return this.sample;
-        }
     }
 
-    public static record Version(String b, int c) {
-        private final String name;
-        private final int protocol;
+    public static record Version(String name, int protocol) {
         public static final Codec<ServerStatus.Version> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.STRING.fieldOf("name").forGetter(ServerStatus.Version::name), Codec.INT.fieldOf("protocol").forGetter(ServerStatus.Version::protocol)).apply(instance, ServerStatus.Version::new));
 
         public static ServerStatus.Version current() {
             WorldVersion worldVersion = SharedConstants.getCurrentVersion();
             return new ServerStatus.Version(worldVersion.getName(), worldVersion.getProtocolVersion());
         }
-
-        public String name() {
-            return this.name;
-        }
-
-        public int protocol() {
-            return this.protocol;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
index 9e591d9494003eee4a0f1bc0f788a1d93dccf81b..37c1349b9b3b757163ea0bb4613be6f61f98a271 100644
--- a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
@@ -207,7 +207,7 @@ public class SynchedEntityData {
         if (!Objects.equals(dataValue.serializer(), dataItem.accessor.getSerializer())) {
             throw new IllegalStateException(String.format(Locale.ROOT, "Invalid entity data item type for field %d on entity %s: old=%s(%s), new=%s(%s)", dataItem.accessor.getId(), this.entity, dataItem.value, dataItem.value.getClass(), dataValue.value, dataValue.value.getClass()));
         } else {
-            dataItem.setValue(dataValue.value);
+            dataItem.setValue((T) dataValue.value);
         }
     }
 
@@ -256,11 +256,7 @@ public class SynchedEntityData {
         }
     }
 
-    public static record DataValue<T>(int a, EntityDataSerializer<T> b, T c) {
-        final int id;
-        private final EntityDataSerializer<T> serializer;
-        final T value;
-
+    public static record DataValue<T>(int id, EntityDataSerializer<T> serializer, T value) {
         public static <T> SynchedEntityData.DataValue<T> create(EntityDataAccessor<T> entityDataAccessor, T object) {
             EntityDataSerializer<T> entityDataSerializer = entityDataAccessor.getSerializer();
             return new SynchedEntityData.DataValue<>(entityDataAccessor.getId(), entityDataSerializer, entityDataSerializer.copy(object));
@@ -290,17 +286,5 @@ public class SynchedEntityData {
         private static <T> SynchedEntityData.DataValue<T> read(FriendlyByteBuf friendlyByteBuf, int i, EntityDataSerializer<T> entityDataSerializer) {
             return new SynchedEntityData.DataValue<>(i, entityDataSerializer, entityDataSerializer.read(friendlyByteBuf));
         }
-
-        public int id() {
-            return this.id;
-        }
-
-        public EntityDataSerializer<T> serializer() {
-            return this.serializer;
-        }
-
-        public T value() {
-            return this.value;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/resources/RegistryDataLoader.java b/src/main/java/net/minecraft/resources/RegistryDataLoader.java
index 325c4a698852fe96c3c728c8f2b94fc4dd39248c..eee3bc965b3564d0f50f666588ee109988542998 100644
--- a/src/main/java/net/minecraft/resources/RegistryDataLoader.java
+++ b/src/main/java/net/minecraft/resources/RegistryDataLoader.java
@@ -159,22 +159,11 @@ public class RegistryDataLoader {
         void load(ResourceManager var1, RegistryOps.RegistryInfoLookup var2);
     }
 
-    public static record RegistryData<T>(ResourceKey<? extends Registry<T>> a, Codec<T> b) {
-        private final ResourceKey<? extends Registry<T>> key;
-        private final Codec<T> elementCodec;
-
+    public static record RegistryData<T>(ResourceKey<? extends Registry<T>> key, Codec<T> elementCodec) {
         Pair<WritableRegistry<?>, RegistryDataLoader.Loader> create(Lifecycle lifecycle, Map<ResourceKey<?>, Exception> map) {
             WritableRegistry<T> writableRegistry = new MappedRegistry<>(this.key, lifecycle);
             RegistryDataLoader.Loader loader = (resourceManager, registryInfoLookup) -> RegistryDataLoader.loadRegistryContents(registryInfoLookup, resourceManager, this.key, writableRegistry, this.elementCodec, map);
             return Pair.of(writableRegistry, loader);
         }
-
-        public ResourceKey<? extends Registry<T>> key() {
-            return this.key;
-        }
-
-        public Codec<T> elementCodec() {
-            return this.elementCodec;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/resources/RegistryFileCodec.java b/src/main/java/net/minecraft/resources/RegistryFileCodec.java
index d22f07d38ac56433e6a72403fbb573cc945c69ec..0744504abad39e853c88fb39b016098ce738c0fc 100644
--- a/src/main/java/net/minecraft/resources/RegistryFileCodec.java
+++ b/src/main/java/net/minecraft/resources/RegistryFileCodec.java
@@ -53,14 +53,14 @@ public final class RegistryFileCodec<E> implements Codec<Holder<E>> {
             if (optional.isEmpty()) {
                 return DataResult.error(() -> "Registry does not exist: " + this.registryKey);
             } else {
-                HolderGetter<E> holderGetter = (HolderGetter)optional.get();
+                HolderGetter<E> holderGetter = optional.get();
                 DataResult<Pair<ResourceLocation, T>> dataResult = ResourceLocation.CODEC.decode(dynamicOps, object);
                 if (dataResult.result().isEmpty()) {
                     return !this.allowInline ? DataResult.error(() -> "Inline definitions not allowed here") : this.elementCodec.decode(dynamicOps, object).map((pairx) -> pairx.mapFirst(Holder::direct));
                 } else {
                     Pair<ResourceLocation, T> pair = dataResult.result().get();
                     ResourceKey<E> resourceKey = ResourceKey.create(this.registryKey, (ResourceLocation)pair.getFirst());
-                    return (holderGetter.get(resourceKey).map(DataResult::success).orElseGet(() -> DataResult.error(() -> "Failed to get element " + resourceKey))).map((reference) -> Pair.of(reference, pair.getSecond())).setLifecycle(Lifecycle.stable());
+                    return (holderGetter.get(resourceKey).map(DataResult::success).orElseGet(() -> DataResult.error(() -> "Failed to get element " + resourceKey))).map((reference) -> Pair.of((Holder<E>) reference, pair.getSecond())).setLifecycle(Lifecycle.stable());
                 }
             }
         } else {
diff --git a/src/main/java/net/minecraft/resources/RegistryFixedCodec.java b/src/main/java/net/minecraft/resources/RegistryFixedCodec.java
index ae26a80686aa3bc89b531267856e0d6dab3c4601..b99a79d715f739c5ba5973b59d20ec31efa93ef3 100644
--- a/src/main/java/net/minecraft/resources/RegistryFixedCodec.java
+++ b/src/main/java/net/minecraft/resources/RegistryFixedCodec.java
@@ -45,7 +45,7 @@ public final class RegistryFixedCodec<E> implements Codec<Holder<E>> {
             if (optional.isPresent()) {
                 return ResourceLocation.CODEC.decode(dynamicOps, object).flatMap((pair) -> {
                     ResourceLocation resourceLocation = (ResourceLocation)pair.getFirst();
-                    return (((HolderGetter)optional.get()).get(ResourceKey.create(this.registryKey, resourceLocation)).map(DataResult::success).orElseGet(() -> DataResult.error(() -> "Failed to get element " + resourceLocation))).map((reference) -> Pair.of(reference, pair.getSecond())).setLifecycle(Lifecycle.stable());
+                    return (optional.get().get(ResourceKey.create(this.registryKey, resourceLocation)).map(DataResult::success).orElseGet(() -> DataResult.error(() -> "Failed to get element " + resourceLocation))).map((reference) -> Pair.of((Holder<E>) reference, pair.getSecond())).setLifecycle(Lifecycle.stable());
                 });
             }
         }
diff --git a/src/main/java/net/minecraft/resources/RegistryOps.java b/src/main/java/net/minecraft/resources/RegistryOps.java
index cb6d87a73e78f6170f85f77b609fb37f86d32a6d..935ba5aa1b4e0fbc29f67e4a8ce9d2f3137be3e6 100644
--- a/src/main/java/net/minecraft/resources/RegistryOps.java
+++ b/src/main/java/net/minecraft/resources/RegistryOps.java
@@ -22,7 +22,7 @@ public class RegistryOps<T> extends DelegatingOps<T> {
             private final Map<ResourceKey<? extends Registry<?>>, Optional<? extends RegistryOps.RegistryInfo<?>>> lookups = new HashMap();
 
             public <T> Optional<RegistryOps.RegistryInfo<T>> lookup(ResourceKey<? extends Registry<? extends T>> resourceKey) {
-                return this.lookups.computeIfAbsent(resourceKey, registryInfoLookup::lookup);
+                return (Optional<RegistryInfo<T>>) this.lookups.computeIfAbsent(resourceKey, registryInfoLookup::lookup);
             }
         };
     }
@@ -55,7 +55,7 @@ public class RegistryOps<T> extends DelegatingOps<T> {
     public static <E, O> RecordCodecBuilder<O, HolderGetter<E>> retrieveGetter(ResourceKey<? extends Registry<? extends E>> resourceKey) {
         return ExtraCodecs.retrieveContext((dynamicOps) -> {
             if (dynamicOps instanceof RegistryOps) {
-                RegistryOps<?> registryOps = (RegistryOps)dynamicOps;
+                RegistryOps<?> registryOps = (RegistryOps<?>) dynamicOps;
                 return registryOps.lookupProvider.lookup(resourceKey).map((registryInfo) -> DataResult.success(registryInfo.getter(), registryInfo.elementsLifecycle())).orElseGet(() -> DataResult.error(() -> "Unknown registry: " + resourceKey));
             } else {
                 return DataResult.error(() -> "Not a registry ops");
@@ -75,22 +75,7 @@ public class RegistryOps<T> extends DelegatingOps<T> {
         }).forGetter((object) -> null);
     }
 
-    public static record RegistryInfo<T>(HolderOwner<T> a, HolderGetter<T> b, Lifecycle c) {
-        private final HolderOwner<T> owner;
-        private final HolderGetter<T> getter;
-        private final Lifecycle elementsLifecycle;
-
-        public HolderOwner<T> owner() {
-            return this.owner;
-        }
-
-        public HolderGetter<T> getter() {
-            return this.getter;
-        }
-
-        public Lifecycle elementsLifecycle() {
-            return this.elementsLifecycle;
-        }
+    public static record RegistryInfo<T>(HolderOwner<T> owner, HolderGetter<T> getter, Lifecycle elementsLifecycle) {
     }
 
     public interface RegistryInfoLookup {
diff --git a/src/main/java/net/minecraft/resources/ResourceKey.java b/src/main/java/net/minecraft/resources/ResourceKey.java
index bd9ebbb2a05e6891051f99ec06747d3a69ddcd98..4cbf5a333126c47cbea841590785e19cd147b147 100644
--- a/src/main/java/net/minecraft/resources/ResourceKey.java
+++ b/src/main/java/net/minecraft/resources/ResourceKey.java
@@ -42,7 +42,7 @@ public class ResourceKey<T> {
     }
 
     public <E> Optional<ResourceKey<E>> cast(ResourceKey<? extends Registry<E>> resourceKey) {
-        return this.isFor(resourceKey) ? Optional.of(this) : Optional.empty();
+        return this.isFor(resourceKey) ? Optional.of((ResourceKey<E>) this) : Optional.empty();
     }
 
     public ResourceLocation location() {
@@ -53,16 +53,6 @@ public class ResourceKey<T> {
         return this.registryName;
     }
 
-    static record InternKey(ResourceLocation a, ResourceLocation b) {
-        final ResourceLocation registry;
-        final ResourceLocation location;
-
-        public ResourceLocation registry() {
-            return this.registry;
-        }
-
-        public ResourceLocation location() {
-            return this.location;
-        }
+    static record InternKey(ResourceLocation registry, ResourceLocation location) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 7fa5791ad7133bb17332a69b79a67b538e57aa04..8555549249f5e95ac0e8a353babafe1a722e8b6e 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -184,16 +184,16 @@ public class Main {
             WorldData worldData = worldStem.worldData();
             levelStorageAccess.saveDataTag(frozen, worldData);
             final DedicatedServer dedicatedServer = MinecraftServer.spin((threadx) -> {
-                DedicatedServer dedicatedServer = new DedicatedServer(threadx, levelStorageAccess, packRepository, worldStem, dedicatedServerSettings, DataFixers.getDataFixer(), services, LoggerChunkProgressListener::new);
-                dedicatedServer.setPort(optionSet.valueOf(optionSpec11));
-                dedicatedServer.setDemo(optionSet.has(optionSpec3));
-                dedicatedServer.setId((String)optionSet.valueOf(optionSpec12));
-                boolean flag = !optionSet.has(optionSpec) && !optionSet.valuesOf(optionSpec15).contains("nogui");
-                if (flag && !GraphicsEnvironment.isHeadless()) {
-                    dedicatedServer.showGui();
+                DedicatedServer dedicatedServerIn = new DedicatedServer(threadx, levelStorageAccess, packRepository, worldStem, dedicatedServerSettings, DataFixers.getDataFixer(), services, LoggerChunkProgressListener::new);
+                dedicatedServerIn.setPort(optionSet.valueOf(optionSpec11));
+                dedicatedServerIn.setDemo(optionSet.has(optionSpec3));
+                dedicatedServerIn.setId((String)optionSet.valueOf(optionSpec12));
+                boolean nogui = !optionSet.has(optionSpec) && !optionSet.valuesOf(optionSpec15).contains("nogui");
+                if (nogui && !GraphicsEnvironment.isHeadless()) {
+                    dedicatedServerIn.showGui();
                 }
 
-                return dedicatedServer;
+                return dedicatedServerIn;
             });
             Thread thread = new Thread("Server Shutdown Thread") {
                 public void run() {
@@ -262,4 +262,4 @@ public class Main {
         }
 
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 39fbb24327cf86f2f2b0645cdfe3b3c29b9c4491..803f81e3ecc96978caf9c82419bbcd5a04c53e9e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -739,7 +739,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
 
-    protected void doRunTask(TickTask tickTask) {
+    public void doRunTask(TickTask tickTask) {
         this.getProfiler().incrementCounter("runTask");
         super.doRunTask(tickTask);
     }
@@ -1769,46 +1769,13 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return true;
     }
 
-    static record ReloadableResources(CloseableResourceManager a, ReloadableServerResources b) implements AutoCloseable {
-        final CloseableResourceManager resourceManager;
-        final ReloadableServerResources managers;
-
+    static record ReloadableResources(CloseableResourceManager resourceManager, ReloadableServerResources managers) implements AutoCloseable {
         public void close() {
             this.resourceManager.close();
         }
-
-        public CloseableResourceManager resourceManager() {
-            return this.resourceManager;
-        }
-
-        public ReloadableServerResources managers() {
-            return this.managers;
-        }
     }
 
-    public static record ServerResourcePackInfo(String a, String b, boolean c, @Nullable Component d) {
-        private final String url;
-        private final String hash;
-        private final boolean isRequired;
-        @Nullable
-        private final Component prompt;
-
-        public String url() {
-            return this.url;
-        }
-
-        public String hash() {
-            return this.hash;
-        }
-
-        public boolean isRequired() {
-            return this.isRequired;
-        }
-
-        @Nullable
-        public Component prompt() {
-            return this.prompt;
-        }
+    public static record ServerResourcePackInfo(String url, String hash, boolean isRequired, @Nullable Component prompt) {
     }
 
     static class TimeProfiler {
@@ -1852,4 +1819,4 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             };
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index ed7c78a76bd9d09e13c8b5d30376bc23ba687fc9..3414fe631babcc56d53418eaedb5360320770c92 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -357,16 +357,11 @@ public class PlayerAdvancements {
         });
     }
 
-    static record Data(Map<ResourceLocation, AdvancementProgress> b) {
-        private final Map<ResourceLocation, AdvancementProgress> map;
+    static record Data(Map<ResourceLocation, AdvancementProgress> map) {
         public static final Codec<PlayerAdvancements.Data> CODEC = Codec.unboundedMap(ResourceLocation.CODEC, AdvancementProgress.CODEC).xmap(PlayerAdvancements.Data::new, PlayerAdvancements.Data::map);
 
         public void forEach(BiConsumer<ResourceLocation, AdvancementProgress> biConsumer) {
             this.map.entrySet().stream().sorted(Entry.comparingByValue()).forEach((entry) -> biConsumer.accept((ResourceLocation)entry.getKey(), (AdvancementProgress)entry.getValue()));
         }
-
-        public Map<ResourceLocation, AdvancementProgress> map() {
-            return this.map;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
index 2be2005b17bdda65a8f975a3d3bed1b34c7e988b..e527e8f0507ddc300c73d3b7a3a18bba89d0450f 100644
--- a/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
+++ b/src/main/java/net/minecraft/server/ServerFunctionLibrary.java
@@ -84,7 +84,7 @@ public class ServerFunctionLibrary implements PreparableReloadListener {
         return completableFuture.thenCombine(completableFuture2, Pair::of).thenCompose(preparationBarrier::wait).thenAcceptAsync((pair) -> {
             Map<ResourceLocation, CompletableFuture<CommandFunction>> map = pair.getSecond();
             Builder<ResourceLocation, CommandFunction> builder = ImmutableMap.builder();
-            map.forEach((resourceLocation, completableFuture) -> completableFuture.handle((commandFunction, throwable) -> {
+            map.forEach((resourceLocation, completableFutureIn) -> completableFutureIn.handle((commandFunction, throwable) -> {
                     if (throwable != null) {
                         LOGGER.error("Failed to load function {}", resourceLocation, throwable);
                     } else {
diff --git a/src/main/java/net/minecraft/server/Services.java b/src/main/java/net/minecraft/server/Services.java
index df235de076a7404043a3a34b59b4f47b0500eae5..1cacf603569bbb44fb3397ba2e451ba5a4b803cb 100644
--- a/src/main/java/net/minecraft/server/Services.java
+++ b/src/main/java/net/minecraft/server/Services.java
@@ -10,11 +10,11 @@ import javax.annotation.Nullable;
 import net.minecraft.server.players.GameProfileCache;
 import net.minecraft.util.SignatureValidator;
 
-public record Services(MinecraftSessionService a, ServicesKeySet b, GameProfileRepository c, GameProfileCache d) {
-    private final MinecraftSessionService sessionService;
-    private final ServicesKeySet servicesKeySet;
-    private final GameProfileRepository profileRepository;
-    private final GameProfileCache profileCache;
+public record Services(
+        MinecraftSessionService sessionService,
+        ServicesKeySet servicesKeySet,
+        GameProfileRepository profileRepository,
+        GameProfileCache profileCache) {
     private static final String USERID_CACHE_FILE = "usercache.json";
 
     public static Services create(YggdrasilAuthenticationService yggdrasilAuthenticationService, File file) {
@@ -28,20 +28,4 @@ public record Services(MinecraftSessionService a, ServicesKeySet b, GameProfileR
     public SignatureValidator profileKeySignatureValidator() {
         return SignatureValidator.from(this.servicesKeySet, ServicesKeyType.PROFILE_KEY);
     }
-
-    public MinecraftSessionService sessionService() {
-        return this.sessionService;
-    }
-
-    public ServicesKeySet servicesKeySet() {
-        return this.servicesKeySet;
-    }
-
-    public GameProfileRepository profileRepository() {
-        return this.profileRepository;
-    }
-
-    public GameProfileCache profileCache() {
-        return this.profileCache;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/WorldLoader.java b/src/main/java/net/minecraft/server/WorldLoader.java
index 3b18d4bd16c3ccc432733e319411122c5afc9c9e..db04a598d56f18fe67c523c6436f86378d77e7da 100644
--- a/src/main/java/net/minecraft/server/WorldLoader.java
+++ b/src/main/java/net/minecraft/server/WorldLoader.java
@@ -59,66 +59,16 @@ public class WorldLoader {
         return layeredRegistryAccess.replaceFrom(registryLayer, frozen);
     }
 
-    public static record DataLoadContext(ResourceManager a, WorldDataConfiguration b, RegistryAccess.Frozen c, RegistryAccess.Frozen d) {
-        private final ResourceManager resources;
-        private final WorldDataConfiguration dataConfiguration;
-        private final RegistryAccess.Frozen datapackWorldgen;
-        private final RegistryAccess.Frozen datapackDimensions;
-
-        public ResourceManager resources() {
-            return this.resources;
-        }
-
-        public WorldDataConfiguration dataConfiguration() {
-            return this.dataConfiguration;
-        }
-
-        public RegistryAccess.Frozen datapackWorldgen() {
-            return this.datapackWorldgen;
-        }
-
-        public RegistryAccess.Frozen datapackDimensions() {
-            return this.datapackDimensions;
-        }
+    public static record DataLoadContext(ResourceManager resources, WorldDataConfiguration dataConfiguration, RegistryAccess.Frozen datapackWorldgen, RegistryAccess.Frozen datapackDimensions) {
     }
 
-    public static record DataLoadOutput<D>(D a, RegistryAccess.Frozen b) {
-        final D cookie;
-        final RegistryAccess.Frozen finalDimensions;
-
-        public D cookie() {
-            return this.cookie;
-        }
-
-        public RegistryAccess.Frozen finalDimensions() {
-            return this.finalDimensions;
-        }
+    public static record DataLoadOutput<D>(D cookie, RegistryAccess.Frozen finalDimensions) {
     }
 
-    public static record InitConfig(WorldLoader.PackConfig a, Commands.CommandSelection b, int c) {
-        final WorldLoader.PackConfig packConfig;
-        private final Commands.CommandSelection commandSelection;
-        private final int functionCompilationLevel;
-
-        public WorldLoader.PackConfig packConfig() {
-            return this.packConfig;
-        }
-
-        public Commands.CommandSelection commandSelection() {
-            return this.commandSelection;
-        }
-
-        public int functionCompilationLevel() {
-            return this.functionCompilationLevel;
-        }
+    public static record InitConfig(WorldLoader.PackConfig packConfig, Commands.CommandSelection commandSelection, int functionCompilationLevel) {
     }
 
-    public static record PackConfig(PackRepository a, WorldDataConfiguration b, boolean c, boolean d) {
-        private final PackRepository packRepository;
-        private final WorldDataConfiguration initialDataConfig;
-        private final boolean safeMode;
-        private final boolean initMode;
-
+    public static record PackConfig(PackRepository packRepository, WorldDataConfiguration initialDataConfig, boolean safeMode, boolean initMode) {
         public Pair<WorldDataConfiguration, CloseableResourceManager> createResourceManager() {
             FeatureFlagSet featureFlagSet = this.initMode ? FeatureFlags.REGISTRY.allFlags() : this.initialDataConfig.enabledFeatures();
             WorldDataConfiguration worldDataConfiguration = MinecraftServer.configurePackRepository(this.packRepository, this.initialDataConfig.dataPacks(), this.safeMode, featureFlagSet);
@@ -130,22 +80,6 @@ public class WorldLoader {
             CloseableResourceManager closeableResourceManager = new MultiPackResourceManager(PackType.SERVER_DATA, list);
             return Pair.of(worldDataConfiguration, closeableResourceManager);
         }
-
-        public PackRepository packRepository() {
-            return this.packRepository;
-        }
-
-        public WorldDataConfiguration initialDataConfig() {
-            return this.initialDataConfig;
-        }
-
-        public boolean safeMode() {
-            return this.safeMode;
-        }
-
-        public boolean initMode() {
-            return this.initMode;
-        }
     }
 
     @FunctionalInterface
diff --git a/src/main/java/net/minecraft/server/WorldStem.java b/src/main/java/net/minecraft/server/WorldStem.java
index 6b379054bd15e851e64c64f130214425df4bb25a..42f1abecac6ca07604ede516ca834a7222e66280 100644
--- a/src/main/java/net/minecraft/server/WorldStem.java
+++ b/src/main/java/net/minecraft/server/WorldStem.java
@@ -4,29 +4,8 @@ import net.minecraft.core.LayeredRegistryAccess;
 import net.minecraft.server.packs.resources.CloseableResourceManager;
 import net.minecraft.world.level.storage.WorldData;
 
-public record WorldStem(CloseableResourceManager a, ReloadableServerResources b, LayeredRegistryAccess<RegistryLayer> c, WorldData d) implements AutoCloseable {
-    private final CloseableResourceManager resourceManager;
-    private final ReloadableServerResources dataPackResources;
-    private final LayeredRegistryAccess<RegistryLayer> registries;
-    private final WorldData worldData;
-
+public record WorldStem(CloseableResourceManager resourceManager, ReloadableServerResources dataPackResources, LayeredRegistryAccess<RegistryLayer> registries, WorldData worldData) implements AutoCloseable {
     public void close() {
         this.resourceManager.close();
     }
-
-    public CloseableResourceManager resourceManager() {
-        return this.resourceManager;
-    }
-
-    public ReloadableServerResources dataPackResources() {
-        return this.dataPackResources;
-    }
-
-    public LayeredRegistryAccess<RegistryLayer> registries() {
-        return this.registries;
-    }
-
-    public WorldData worldData() {
-        return this.worldData;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/chase/ChaseClient.java b/src/main/java/net/minecraft/server/chase/ChaseClient.java
index ff17c3311567e3e642d028ed6371ae389544ed60..1bea8dfdd95e022f689057b21068f4d0a8e27dc8 100644
--- a/src/main/java/net/minecraft/server/chase/ChaseClient.java
+++ b/src/main/java/net/minecraft/server/chase/ChaseClient.java
@@ -173,21 +173,5 @@ public class ChaseClient {
         });
     }
 
-    static record TeleportTarget(ResourceKey<Level> a, Vec3 b, Vec2 c) {
-        final ResourceKey<Level> level;
-        final Vec3 pos;
-        final Vec2 rot;
-
-        public ResourceKey<Level> level() {
-            return this.level;
-        }
-
-        public Vec3 pos() {
-            return this.pos;
-        }
-
-        public Vec2 rot() {
-            return this.rot;
-        }
-    }
+    static record TeleportTarget(ResourceKey<Level> level, Vec3 pos, Vec2 rot) {}
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/chase/ChaseServer.java b/src/main/java/net/minecraft/server/chase/ChaseServer.java
index ce0282764cdef2af33fefaeafd4f2a258b4072b6..c76c18367b42aa0040d9f553d797997bdcf8bab9 100644
--- a/src/main/java/net/minecraft/server/chase/ChaseServer.java
+++ b/src/main/java/net/minecraft/server/chase/ChaseServer.java
@@ -142,40 +142,9 @@ public class ChaseServer {
         }
     }
 
-    static record PlayerPosition(String a, double b, double c, double d, float e, float f) {
-        private final String dimensionName;
-        private final double x;
-        private final double y;
-        private final double z;
-        private final float yRot;
-        private final float xRot;
-
+    static record PlayerPosition(String dimensionName, double x, double y, double z, float yRot, float xRot) {
         String format() {
             return String.format(Locale.ROOT, "t %s %.2f %.2f %.2f %.2f %.2f\n", this.dimensionName, this.x, this.y, this.z, this.yRot, this.xRot);
         }
-
-        public String dimensionName() {
-            return this.dimensionName;
-        }
-
-        public double x() {
-            return this.x;
-        }
-
-        public double y() {
-            return this.y;
-        }
-
-        public double z() {
-            return this.z;
-        }
-
-        public float yRot() {
-            return this.yRot;
-        }
-
-        public float xRot() {
-            return this.xRot;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/commands/CloneCommands.java b/src/main/java/net/minecraft/server/commands/CloneCommands.java
index d262e18dc02b90289d8c2de1579e602dddb27998..8b503f7a577b2d1fcdbacec662dc75e2bd5b6d28 100644
--- a/src/main/java/net/minecraft/server/commands/CloneCommands.java
+++ b/src/main/java/net/minecraft/server/commands/CloneCommands.java
@@ -187,17 +187,7 @@ public class CloneCommands {
         R apply(T var1) throws CommandSyntaxException;
     }
 
-    static record DimensionAndPosition(ServerLevel a, BlockPos b) {
-        private final ServerLevel dimension;
-        private final BlockPos position;
-
-        public ServerLevel dimension() {
-            return this.dimension;
-        }
-
-        public BlockPos position() {
-            return this.position;
-        }
+    static record DimensionAndPosition(ServerLevel dimension, BlockPos position) {
     }
 
     static enum Mode {
diff --git a/src/main/java/net/minecraft/server/commands/ExecuteCommand.java b/src/main/java/net/minecraft/server/commands/ExecuteCommand.java
index 0b02ac846ce506990087edfc2316627a59a5e299..4d9d55a2223bf1894ecfab1dfee9a678a9de6feb 100644
--- a/src/main/java/net/minecraft/server/commands/ExecuteCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ExecuteCommand.java
@@ -391,7 +391,7 @@ public class ExecuteCommand {
         return (commandContext) -> {
             CommandSourceStack commandSourceStack = (CommandSourceStack)commandContext.getSource();
             Entity entity = commandSourceStack.getEntity();
-            return entity == null ? List.of() : ((Stream)function.apply(entity)).filter((entityx) -> !entityx.isRemoved()).map(commandSourceStack::withEntity).toList();
+            return entity == null ? List.of() : function.apply(entity).filter((entityx) -> !entityx.isRemoved()).map(commandSourceStack::withEntity).toList();
         };
     }
 
diff --git a/src/main/java/net/minecraft/server/commands/FunctionCommand.java b/src/main/java/net/minecraft/server/commands/FunctionCommand.java
index 738da50c397f6b520dca9189b071a3a33fe5ca5b..de5d663369a0efeeb05978cc3e8b6c7f1a152f0c 100644
--- a/src/main/java/net/minecraft/server/commands/FunctionCommand.java
+++ b/src/main/java/net/minecraft/server/commands/FunctionCommand.java
@@ -92,16 +92,6 @@ public class FunctionCommand {
         return functionResult != null ? functionResult : new FunctionCommand.FunctionResult(i, false);
     }
 
-    public static record FunctionResult(int a, boolean b) {
-        private final int value;
-        private final boolean isReturn;
-
-        public int value() {
-            return this.value;
-        }
-
-        public boolean isReturn() {
-            return this.isReturn;
-        }
+    public static record FunctionResult(int value, boolean isReturn) {
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/commands/LocateCommand.java b/src/main/java/net/minecraft/server/commands/LocateCommand.java
index 93f62b2e75f3628e32b643046158030394fef433..ae8584412bb790133ca2b69d058efdfd66a77d4d 100644
--- a/src/main/java/net/minecraft/server/commands/LocateCommand.java
+++ b/src/main/java/net/minecraft/server/commands/LocateCommand.java
@@ -94,7 +94,7 @@ public class LocateCommand {
     }
 
     private static String getElementName(Pair<BlockPos, ? extends Holder<?>> pair) {
-        return (String)((Holder)pair.getSecond()).unwrapKey().map((resourceKey) -> resourceKey.location().toString()).orElse("[unregistered]");
+        return pair.getSecond().unwrapKey().map((resourceKey) -> resourceKey.location().toString()).orElse("[unregistered]");
     }
 
     public static int showLocateResult(CommandSourceStack commandSourceStack, ResourceOrTagArgument.Result<?> result, BlockPos blockPos, Pair<BlockPos, ? extends Holder<?>> pair, String s, boolean flag, Duration duration) {
diff --git a/src/main/java/net/minecraft/server/commands/data/DataCommands.java b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
index 9f729d65df6f61006d60efbefec8fc4175d30f0f..60cc88ad272bc40958c1a668ce9e17cf2ad7b247 100644
--- a/src/main/java/net/minecraft/server/commands/data/DataCommands.java
+++ b/src/main/java/net/minecraft/server/commands/data/DataCommands.java
@@ -113,8 +113,8 @@ public class DataCommands {
                 ArgumentBuilder<CommandSourceStack, ?> argumentBuilder2 = Commands.argument("targetPath", NbtPathArgument.nbtPath());
 
                 for(DataCommands.DataProvider dataProvider2 : SOURCE_PROVIDERS) {
-                    biConsumer.accept(argumentBuilder2, (DataCommands.DataManipulatorDecorator)(dataManipulator) -> dataProvider2.wrap(Commands.literal("from"), (argumentBuilder) -> argumentBuilder.executes((commandContext) -> manipulateData(commandContext, dataProvider, dataManipulator, getSingletonSource(commandContext, dataProvider2))).then(Commands.argument("sourcePath", NbtPathArgument.nbtPath()).executes((commandContext) -> manipulateData(commandContext, dataProvider, dataManipulator, resolveSourcePath(commandContext, dataProvider2))))));
-                    biConsumer.accept(argumentBuilder2, (DataCommands.DataManipulatorDecorator)(dataManipulator) -> dataProvider2.wrap(Commands.literal("string"), (argumentBuilder) -> argumentBuilder.executes((commandContext) -> manipulateData(commandContext, dataProvider, dataManipulator, stringifyTagList(getSingletonSource(commandContext, dataProvider2), (s) -> s))).then(((RequiredArgumentBuilder)Commands.argument("sourcePath", NbtPathArgument.nbtPath()).executes((commandContext) -> manipulateData(commandContext, dataProvider, dataManipulator, stringifyTagList(resolveSourcePath(commandContext, dataProvider2), (s) -> s)))).then(((RequiredArgumentBuilder)Commands.argument("start", IntegerArgumentType.integer()).executes((commandContext) -> manipulateData(commandContext, dataProvider, dataManipulator, stringifyTagList(resolveSourcePath(commandContext, dataProvider2), (s) -> substring(s, IntegerArgumentType.getInteger(commandContext, "start")))))).then(Commands.argument("end", IntegerArgumentType.integer()).executes((commandContext) -> manipulateData(commandContext, dataProvider, dataManipulator, stringifyTagList(resolveSourcePath(commandContext, dataProvider2), (s) -> substring(s, IntegerArgumentType.getInteger(commandContext, "start"), IntegerArgumentType.getInteger(commandContext, "end"))))))))));
+                    biConsumer.accept(argumentBuilder2, (DataCommands.DataManipulatorDecorator)(dataManipulator) -> dataProvider2.wrap(Commands.literal("from"), (argumentBuilderIn) -> argumentBuilderIn.executes((commandContext) -> manipulateData(commandContext, dataProvider, dataManipulator, getSingletonSource(commandContext, dataProvider2))).then(Commands.argument("sourcePath", NbtPathArgument.nbtPath()).executes((commandContext) -> manipulateData(commandContext, dataProvider, dataManipulator, resolveSourcePath(commandContext, dataProvider2))))));
+                    biConsumer.accept(argumentBuilder2, (DataCommands.DataManipulatorDecorator)(dataManipulator) -> dataProvider2.wrap(Commands.literal("string"), (argumentBuilderIn) -> argumentBuilderIn.executes((commandContext) -> manipulateData(commandContext, dataProvider, dataManipulator, stringifyTagList(getSingletonSource(commandContext, dataProvider2), (s) -> s))).then(((RequiredArgumentBuilder)Commands.argument("sourcePath", NbtPathArgument.nbtPath()).executes((commandContext) -> manipulateData(commandContext, dataProvider, dataManipulator, stringifyTagList(resolveSourcePath(commandContext, dataProvider2), (s) -> s)))).then(((RequiredArgumentBuilder)Commands.argument("start", IntegerArgumentType.integer()).executes((commandContext) -> manipulateData(commandContext, dataProvider, dataManipulator, stringifyTagList(resolveSourcePath(commandContext, dataProvider2), (s) -> substring(s, IntegerArgumentType.getInteger(commandContext, "start")))))).then(Commands.argument("end", IntegerArgumentType.integer()).executes((commandContext) -> manipulateData(commandContext, dataProvider, dataManipulator, stringifyTagList(resolveSourcePath(commandContext, dataProvider2), (s) -> substring(s, IntegerArgumentType.getInteger(commandContext, "start"), IntegerArgumentType.getInteger(commandContext, "end"))))))))));
                 }
 
                 biConsumer.accept(argumentBuilder2, (DataCommands.DataManipulatorDecorator)(dataManipulator) -> Commands.literal("value").then(Commands.argument("value", NbtTagArgument.nbtTag()).executes((commandContext) -> {
@@ -274,4 +274,4 @@ public class DataCommands {
     interface StringProcessor {
         String process(String var1) throws CommandSyntaxException;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index 075dae6cab7dd6b13e81379bab5f32f21a1bb7d4..58c33d1613a12e88874c1bbaa1efbb4d41de0103 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -182,22 +182,20 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
         return this.worldDimensionData.create(registryAccess);
     }
 
-    static record WorldDimensionData(JsonObject a, String b) {
-        private final JsonObject generatorSettings;
-        private final String levelType;
+    static record WorldDimensionData(JsonObject generatorSettings, String levelType) {
         private static final Map<String, ResourceKey<WorldPreset>> LEGACY_PRESET_NAMES = Map.of("default", WorldPresets.NORMAL, "largebiomes", WorldPresets.LARGE_BIOMES);
 
         public WorldDimensions create(RegistryAccess registryAccess) {
             Registry<WorldPreset> registry = registryAccess.registryOrThrow(Registries.WORLD_PRESET);
-            Holder.Reference<WorldPreset> reference = (Holder.Reference)registry.getHolder(WorldPresets.NORMAL).or(() -> registry.holders().findAny()).orElseThrow(() -> new IllegalStateException("Invalid datapack contents: can't find default preset"));
-            Holder<WorldPreset> holder = (Holder)Optional.ofNullable(ResourceLocation.tryParse(this.levelType)).map((resourceLocation) -> ResourceKey.create(Registries.WORLD_PRESET, resourceLocation)).or(() -> Optional.ofNullable((ResourceKey)LEGACY_PRESET_NAMES.get(this.levelType))).flatMap(registry::getHolder).orElseGet(() -> {
+            Holder.Reference<WorldPreset> reference = registry.getHolder(WorldPresets.NORMAL).or(() -> registry.holders().findAny()).orElseThrow(() -> new IllegalStateException("Invalid datapack contents: can't find default preset"));
+            Holder<WorldPreset> holder = Optional.ofNullable(ResourceLocation.tryParse(this.levelType)).map((resourceLocation) -> ResourceKey.create(Registries.WORLD_PRESET, resourceLocation)).or(() -> Optional.ofNullable(LEGACY_PRESET_NAMES.get(this.levelType))).flatMap(registry::getHolder).orElseGet(() -> {
                 DedicatedServerProperties.LOGGER.warn("Failed to parse level-type {}, defaulting to {}", this.levelType, reference.key().location());
                 return reference;
             });
             WorldDimensions worldDimensions = holder.value().createWorldDimensions();
             if (holder.is(WorldPresets.FLAT)) {
                 RegistryOps<JsonElement> registryOps = RegistryOps.create(JsonOps.INSTANCE, registryAccess);
-                Optional<FlatLevelGeneratorSettings> optional = FlatLevelGeneratorSettings.CODEC.parse(new Dynamic(registryOps, this.generatorSettings())).resultOrPartial(DedicatedServerProperties.LOGGER::error);
+                Optional<FlatLevelGeneratorSettings> optional = FlatLevelGeneratorSettings.CODEC.parse(new Dynamic<>(registryOps, this.generatorSettings())).resultOrPartial(DedicatedServerProperties.LOGGER::error);
                 if (optional.isPresent()) {
                     return worldDimensions.replaceOverworldGenerator(registryAccess, new FlatLevelSource((FlatLevelGeneratorSettings)optional.get()));
                 }
@@ -205,13 +203,5 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
 
             return worldDimensions;
         }
-
-        public JsonObject generatorSettings() {
-            return this.generatorSettings;
-        }
-
-        public String levelType() {
-            return this.levelType;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index 6e2990101679977076b9ecca1dcb3933742cda87..cb42ad172bf229c15b48f3c38ce6769f54cbb64f 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -122,7 +122,7 @@ public abstract class Settings<T extends Settings<T>> {
     private static <V extends Number> Function<String, V> wrapNumberDeserializer(Function<String, V> function) {
         return (s) -> {
             try {
-                return (Number)function.apply(s);
+                return function.apply(s);
             } catch (NumberFormatException var3) {
                 return null;
             }
@@ -166,13 +166,13 @@ public abstract class Settings<T extends Settings<T>> {
         String s2 = this.getStringRaw(s);
         V object2 = (V)MoreObjects.firstNonNull(s2 != null ? function.apply(s2) : null, object);
         this.properties.put(s, function2.apply(object2));
-        return new Settings.MutableValue<>(s, object2, function2);
+        return new Settings.MutableValue(s, object2, function2);
     }
 
     protected <V> V get(String s, Function<String, V> function, UnaryOperator<V> unaryOperator, Function<V, String> function2, V object) {
         return this.get(s, (sx) -> {
-            V object = (V)function.apply(sx);
-            return object != null ? unaryOperator.apply(object) : null;
+            V o = (V)function.apply(sx);
+            return o != null ? unaryOperator.apply(o) : null;
         }, function2, object);
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 036bd5aba7b81a2952ba2a52312eebc18fdfbeda..df23bdfc2fe9df1396f6d45a6f57f90ceed3a374 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -295,7 +295,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
             CompletableFuture<List<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> completableFuture2 = Util.sequence(list);
             CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completableFuture3 = completableFuture2.thenApply((listx) -> {
-                List<ChunkAccess> list2 = Lists.newArrayList();
+                List<ChunkAccess> list2In = Lists.newArrayList();
                 int i4 = 0;
 
                 for(final Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either : listx) {
@@ -313,11 +313,11 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                         });
                     }
 
-                    list2.add((ChunkAccess)optional.get());
+                    list2In.add((ChunkAccess)optional.get());
                     ++i4;
                 }
 
-                return Either.left(list2);
+                return Either.left(list2In);
             });
 
             for(ChunkHolder chunkHolder3 : list2) {
@@ -549,9 +549,9 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             if (optional.isPresent()) {
                 ChunkAccess chunkAccess = ChunkSerializer.read(this.level, this.poiManager, chunkPos, (CompoundTag)optional.get());
                 this.markPosition(chunkPos, chunkAccess.getStatus().getChunkType());
-                return Either.left(chunkAccess);
+                return Either.<ChunkAccess, ChunkHolder.ChunkLoadingFailure>left(chunkAccess);
             } else {
-                return Either.left(this.createEmptyChunk(chunkPos));
+                return Either.<ChunkAccess, ChunkHolder.ChunkLoadingFailure>left(this.createEmptyChunk(chunkPos));
             }
         }, this.mainThreadExecutor).exceptionallyAsync((throwable) -> this.handleChunkLoadFailure(throwable, chunkPos), this.mainThreadExecutor);
     }
@@ -595,18 +595,18 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completableFuture = this.getChunkRangeFuture(chunkHolder, chunkStatus.getRange(), (i) -> this.getDependencyStatus(chunkStatus, i));
         this.level.getProfiler().incrementCounter((Supplier<String>)(() -> "chunkGenerate " + chunkStatus));
         Executor executor = (runnable) -> this.worldgenMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkHolder, runnable));
-        return completableFuture.thenComposeAsync((either) -> (CompletionStage)either.map((list) -> {
+        return completableFuture.thenComposeAsync((either) -> either.map((list) -> {
                 try {
                     ChunkAccess chunkAccess = (ChunkAccess)list.get(list.size() / 2);
-                    CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture;
+                    CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFutureIn;
                     if (chunkAccess.getStatus().isOrAfter(chunkStatus)) {
-                        completableFuture = chunkStatus.load(this.level, this.structureTemplateManager, this.lightEngine, (chunkAccess) -> this.protoChunkToFullChunk(chunkHolder), chunkAccess);
+                        completableFutureIn = chunkStatus.load(this.level, this.structureTemplateManager, this.lightEngine, (chunkAccessIn) -> this.protoChunkToFullChunk(chunkHolder), chunkAccess);
                     } else {
-                        completableFuture = chunkStatus.generate(executor, this.level, this.generator, this.structureTemplateManager, this.lightEngine, (chunkAccess) -> this.protoChunkToFullChunk(chunkHolder), list);
+                        completableFutureIn = chunkStatus.generate(executor, this.level, this.generator, this.structureTemplateManager, this.lightEngine, (chunkAccessIn) -> this.protoChunkToFullChunk(chunkHolder), list);
                     }
 
                     this.progressListener.onStatusChange(chunkPos, chunkStatus);
-                    return completableFuture;
+                    return completableFutureIn;
                 } catch (Exception var9) {
                     var9.getStackTrace();
                     CrashReport crashReport = CrashReport.forThrowable(var9, "Exception generating new chunk");
@@ -658,7 +658,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 if (protoChunk instanceof ImposterProtoChunk) {
                     levelChunk = ((ImposterProtoChunk)protoChunk).getWrapped();
                 } else {
-                    levelChunk = new LevelChunk(this.level, protoChunk, (levelChunk) -> postLoadProtoChunk(this.level, protoChunk.getEntities()));
+                    levelChunk = new LevelChunk(this.level, protoChunk, (levelChunkIn) -> postLoadProtoChunk(this.level, protoChunk.getEntities()));
                     chunkHolder.replaceProtoChunk(new ImposterProtoChunk(levelChunk, false));
                 }
 
@@ -680,11 +680,11 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> completableFuture2 = completableFuture.thenApplyAsync((either) -> either.mapLeft((list) -> (LevelChunk)list.get(list.size() / 2)), (runnable) -> this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkHolder, runnable))).thenApplyAsync((either) -> either.ifLeft((levelChunk) -> {
                 levelChunk.postProcessGeneration();
                 this.level.startTickingChunk(levelChunk);
-                CompletableFuture<?> completableFuture = chunkHolder.getChunkSendSyncFuture();
-                if (completableFuture.isDone()) {
+                CompletableFuture<?> completableFutureIn = chunkHolder.getChunkSendSyncFuture();
+                if (completableFutureIn.isDone()) {
                     this.onChunkReadyToSend(levelChunk);
                 } else {
-                    completableFuture.thenAcceptAsync((object) -> this.onChunkReadyToSend(levelChunk), this.mainThreadExecutor);
+                    completableFutureIn.thenAcceptAsync((object) -> this.onChunkReadyToSend(levelChunk), this.mainThreadExecutor);
                 }
 
             }), this.mainThreadExecutor);
@@ -967,15 +967,15 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             }
         }
 
-        SectionPos sectionPos = serverPlayer.getLastSectionPos();
+        SectionPos lastSectionPos = serverPlayer.getLastSectionPos();
         SectionPos sectionPos2 = SectionPos.of(serverPlayer);
         boolean flag = this.playerMap.ignored(serverPlayer);
         boolean flag2 = this.skipPlayer(serverPlayer);
-        boolean flag3 = sectionPos.asLong() != sectionPos2.asLong();
+        boolean flag3 = lastSectionPos.asLong() != sectionPos2.asLong();
         if (flag3 || flag != flag2) {
             this.updatePlayerPos(serverPlayer);
             if (!flag) {
-                this.distanceManager.removePlayer(sectionPos, serverPlayer);
+                this.distanceManager.removePlayer(lastSectionPos, serverPlayer);
             }
 
             if (!flag2) {
@@ -1311,4 +1311,4 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
index a307cabfe351d21c3e23383bf410a51e73a294c8..3ea850cd78d818bdc1da3eae263333789d03042f 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
@@ -16,7 +16,7 @@ import net.minecraft.world.level.ChunkPos;
 
 public class ChunkTaskPriorityQueue<T> {
     public static final int PRIORITY_LEVEL_COUNT = ChunkLevel.MAX_LEVEL + 2;
-    private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue = IntStream.range(0, PRIORITY_LEVEL_COUNT).mapToObj((ix) -> new Long2ObjectLinkedOpenHashMap()).collect(Collectors.toList());
+    private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue = IntStream.range(0, PRIORITY_LEVEL_COUNT).mapToObj((ix) -> new Long2ObjectLinkedOpenHashMap<List<Optional<T>>>()).collect(Collectors.toList());
     private volatile int firstQueue = PRIORITY_LEVEL_COUNT;
     private final String name;
     private final LongSet acquired = new LongOpenHashSet();
@@ -108,4 +108,4 @@ public class ChunkTaskPriorityQueue<T> {
     LongSet getAcquired() {
         return new LongOpenHashSet(this.acquired);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
index f387b3a28c194ae1c3b08bd1d76145ea285631c9..95f9813ab912e1ff7e9f9a726e4c34af8a1d7515 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
@@ -44,7 +44,7 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
     }
 
     public static ChunkTaskPriorityQueueSorter.Message<Runnable> message(Runnable runnable, long l, IntSupplier intSupplier) {
-        return new ChunkTaskPriorityQueueSorter.Message((processorHandle) -> () -> {
+        return new ChunkTaskPriorityQueueSorter.Message<>((processorHandle) -> () -> {
                 runnable.run();
                 processorHandle.tell(Unit.INSTANCE);
             }, l, intSupplier);
@@ -65,12 +65,12 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
     public <T> ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<T>> getProcessor(ProcessorHandle<T> processorHandle, boolean flag) {
         return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> {
                 this.getQueue(processorHandle);
-                processorHandle2.tell(ProcessorHandle.of("chunk priority sorter around " + processorHandle.name(), (message) -> this.submit(processorHandle, message.task, message.pos, message.level, flag)));
+                processorHandle2.tell(ProcessorHandle.<Message<T>>of("chunk priority sorter around " + processorHandle.name(), (message) -> this.submit(processorHandle, message.task, message.pos, message.level, flag)));
             })).join();
     }
 
     public ProcessorHandle<ChunkTaskPriorityQueueSorter.Release> getReleaseProcessor(ProcessorHandle<Runnable> processorHandle) {
-        return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> processorHandle2.tell(ProcessorHandle.of("chunk priority sorter around " + processorHandle.name(), (release) -> this.release(processorHandle, release.pos, release.task, release.clearQueue))))).join();
+        return (ProcessorHandle)this.mailbox.ask((processorHandle2) -> new StrictQueue.IntRunnable(0, () -> processorHandle2.tell(ProcessorHandle.<Release>of("chunk priority sorter around " + processorHandle.name(), (release) -> this.release(processorHandle, release.pos, release.task, release.clearQueue))))).join();
     }
 
     public void onLevelChange(ChunkPos chunkPos, IntSupplier intSupplier, int i, IntConsumer intConsumer) {
@@ -127,9 +127,9 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
     private <T> ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>> getQueue(ProcessorHandle<T> processorHandle) {
         ChunkTaskPriorityQueue<? extends Function<ProcessorHandle<Unit>, ?>> chunkTaskPriorityQueue = (ChunkTaskPriorityQueue)this.queues.get(processorHandle);
         if (chunkTaskPriorityQueue == null) {
-            throw (IllegalArgumentException)Util.pauseInIde((T)(new IllegalArgumentException("No queue for: " + processorHandle)));
+            throw Util.pauseInIde(new IllegalArgumentException("No queue for: " + processorHandle));
         } else {
-            return chunkTaskPriorityQueue;
+            return (ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>, T>>) chunkTaskPriorityQueue;
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkTrackingView.java b/src/main/java/net/minecraft/server/level/ChunkTrackingView.java
index eddc83f93b335452924377e89ef31ee000131824..19c358568a5d82f5dbcabbc7aca3b583b8527ba9 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTrackingView.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTrackingView.java
@@ -84,10 +84,7 @@ public interface ChunkTrackingView {
         return l3 < (long)i8;
     }
 
-    public static record Positioned(ChunkPos b, int c) implements ChunkTrackingView {
-        private final ChunkPos center;
-        private final int viewDistance;
-
+    public static record Positioned(ChunkPos center, int viewDistance) implements ChunkTrackingView {
         int minX() {
             return this.center.x - this.viewDistance - 1;
         }
@@ -132,4 +129,4 @@ public interface ChunkTrackingView {
             return this.viewDistance;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/level/ClientInformation.java b/src/main/java/net/minecraft/server/level/ClientInformation.java
index 5f131db97508fd3f5cef6f0b4ecf9c6b8b88fdf1..d906e474ae208b6d700215623c449ccf484cfdf3 100644
--- a/src/main/java/net/minecraft/server/level/ClientInformation.java
+++ b/src/main/java/net/minecraft/server/level/ClientInformation.java
@@ -5,15 +5,16 @@ import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.player.ChatVisiblity;
 import net.minecraft.world.entity.player.Player;
 
-public record ClientInformation(String b, int c, ChatVisiblity d, boolean e, int f, HumanoidArm g, boolean h, boolean i) {
-    private final String language;
-    private final int viewDistance;
-    private final ChatVisiblity chatVisibility;
-    private final boolean chatColors;
-    private final int modelCustomisation;
-    private final HumanoidArm mainHand;
-    private final boolean textFilteringEnabled;
-    private final boolean allowsListing;
+public record ClientInformation(
+        String language,
+        int viewDistance,
+        ChatVisiblity chatVisibility,
+        boolean chatColors,
+        int modelCustomisation,
+        HumanoidArm mainHand,
+        boolean textFilteringEnabled,
+        boolean allowsListing
+) {
     public static final int MAX_LANGUAGE_LENGTH = 16;
 
     public ClientInformation(FriendlyByteBuf friendlyByteBuf) {
@@ -34,36 +35,4 @@ public record ClientInformation(String b, int c, ChatVisiblity d, boolean e, int
     public static ClientInformation createDefault() {
         return new ClientInformation("en_us", 2, ChatVisiblity.FULL, true, 0, Player.DEFAULT_MAIN_HAND, false, false);
     }
-
-    public String language() {
-        return this.language;
-    }
-
-    public int viewDistance() {
-        return this.viewDistance;
-    }
-
-    public ChatVisiblity chatVisibility() {
-        return this.chatVisibility;
-    }
-
-    public boolean chatColors() {
-        return this.chatColors;
-    }
-
-    public int modelCustomisation() {
-        return this.modelCustomisation;
-    }
-
-    public HumanoidArm mainHand() {
-        return this.mainHand;
-    }
-
-    public boolean textFilteringEnabled() {
-        return this.textFilteringEnabled;
-    }
-
-    public boolean allowsListing() {
-        return this.allowsListing;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/level/ColumnPos.java b/src/main/java/net/minecraft/server/level/ColumnPos.java
index 2cf93087462cc5e1c8a3e802424bfb5538ed425f..b4d015fc6f5f43b4b03702be262857adc6ca7065 100644
--- a/src/main/java/net/minecraft/server/level/ColumnPos.java
+++ b/src/main/java/net/minecraft/server/level/ColumnPos.java
@@ -3,9 +3,7 @@ package net.minecraft.server.level;
 import net.minecraft.core.SectionPos;
 import net.minecraft.world.level.ChunkPos;
 
-public record ColumnPos(int a, int b) {
-    private final int x;
-    private final int z;
+public record ColumnPos(int x, int z) {
     private static final long COORD_BITS = 32L;
     private static final long COORD_MASK = 4294967295L;
 
@@ -36,12 +34,4 @@ public record ColumnPos(int a, int b) {
     public int hashCode() {
         return ChunkPos.hash(this.x, this.z);
     }
-
-    public int x() {
-        return this.x;
-    }
-
-    public int z() {
-        return this.z;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/level/DistanceManager.java b/src/main/java/net/minecraft/server/level/DistanceManager.java
index a8fcdde7ba7cb918cc71f097021b0799b7f1ee0a..9fd921ccff319d1682395b8a6bf8680bc7ec0c44 100644
--- a/src/main/java/net/minecraft/server/level/DistanceManager.java
+++ b/src/main/java/net/minecraft/server/level/DistanceManager.java
@@ -283,7 +283,7 @@ public abstract class DistanceManager {
                     Entry<SortedArraySet<Ticket<?>>> entry = (Entry)var3.next();
                     ChunkPos chunkPos = new ChunkPos(entry.getLongKey());
 
-                    for(Ticket<?> ticket : (SortedArraySet)entry.getValue()) {
+                    for(Ticket<?> ticket : entry.getValue()) {
                         fileOutputStream.write((chunkPos.x + "\t" + chunkPos.z + "\t" + ticket.getType() + "\t" + ticket.getTicketLevel() + "\t\n").getBytes(StandardCharsets.UTF_8));
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 0e636a9df385ed0ad02a5eda4426236e3cd1a331..aa49ec3cda3067625f909f16c0bdf76d229a55d2 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -189,7 +189,7 @@ public class ServerChunkCache extends ChunkSource {
             completableFuture = this.getChunkFutureMainThread(i, i2, chunkStatus, flag);
             this.mainThreadProcessor.managedBlock(completableFuture::isDone);
         } else {
-            completableFuture = CompletableFuture.supplyAsync(() -> this.getChunkFutureMainThread(i, i2, chunkStatus, flag), this.mainThreadProcessor).thenCompose((completableFuture) -> completableFuture);
+            completableFuture = CompletableFuture.supplyAsync(() -> this.getChunkFutureMainThread(i, i2, chunkStatus, flag), this.mainThreadProcessor).thenCompose((completableFutureIn) -> completableFutureIn);
         }
 
         return completableFuture;
@@ -495,17 +495,7 @@ public class ServerChunkCache extends ChunkSource {
         this.distanceManager.removeTicketsOnClosing();
     }
 
-    static record ChunkAndHolder(LevelChunk a, ChunkHolder b) {
-        final LevelChunk chunk;
-        final ChunkHolder holder;
-
-        public LevelChunk chunk() {
-            return this.chunk;
-        }
-
-        public ChunkHolder holder() {
-            return this.holder;
-        }
+    static record ChunkAndHolder(LevelChunk chunk, ChunkHolder holder) {
     }
 
     final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
@@ -534,7 +524,7 @@ public class ServerChunkCache extends ChunkSource {
             super.doRunTask(runnable);
         }
 
-        protected boolean pollTask() {
+        public boolean pollTask() {
             if (ServerChunkCache.this.runDistanceManagerUpdates()) {
                 return true;
             } else {
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 7bc832526f9771a8ceb8840b399589452086de33..6b679ae419015bf53bac8a973fafdcb6d43541a8 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -92,9 +92,9 @@ public class ServerEntity {
             this.lastPassengers = list;
         }
 
-        Entity i4 = this.entity;
-        if (i4 instanceof ItemFrame) {
-            ItemFrame itemFrame = (ItemFrame)i4;
+        Entity localEntity = this.entity;
+        if (localEntity instanceof ItemFrame) {
+            ItemFrame itemFrame = (ItemFrame)localEntity;
             if (this.tickCount % 10 == 0) {
                 ItemStack itemStack = itemFrame.getItem();
                 if (itemStack.getItem() instanceof MapItem) {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 040a59a9b7b7ba7a208a32fdcf00563a71412153..caa451a6f1edf9d1e371f790b007ce4045eee332 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1428,7 +1428,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 object2IntOpenHashMap.addTo(s, 1);
             }
 
-            return (String)object2IntOpenHashMap.object2IntEntrySet().stream().sorted(Comparator.comparing(Entry::getIntValue).reversed()).limit(5L).map((entry) -> (String)entry.getKey() + ":" + entry.getIntValue()).collect(Collectors.joining(","));
+            return (String)object2IntOpenHashMap.object2IntEntrySet().stream().sorted(Comparator.<Entry<String>, Integer>comparing(Entry::getIntValue).reversed()).limit(5L).map((entry) -> (String)entry.getKey() + ":" + entry.getIntValue()).collect(Collectors.joining(","));
         } catch (Exception var6) {
             return "";
         }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index a07fcf4ca1e2d7e04fa6f72233f279d5b270762d..a20af5f67506024b17c8812fb059d9a223ea2159 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -303,7 +303,7 @@ public class ServerPlayer extends Player {
     public void readAdditionalSaveData(CompoundTag compoundTag) {
         super.readAdditionalSaveData(compoundTag);
         if (compoundTag.contains("warden_spawn_tracker", 10)) {
-            WardenSpawnTracker.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.get("warden_spawn_tracker"))).resultOrPartial(LOGGER::error).ifPresent((wardenSpawnTracker) -> this.wardenSpawnTracker = wardenSpawnTracker);
+            WardenSpawnTracker.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.get("warden_spawn_tracker"))).resultOrPartial(LOGGER::error).ifPresent((wardenSpawnTracker) -> this.wardenSpawnTracker = wardenSpawnTracker);
         }
 
         if (compoundTag.contains("enteredNetherPosition", 10)) {
diff --git a/src/main/java/net/minecraft/server/level/Ticket.java b/src/main/java/net/minecraft/server/level/Ticket.java
index e8d64341efcb1f109c88d2ac6043c79b54766425..06deecab338c9cbc67c29e129531fedbd1a62877 100644
--- a/src/main/java/net/minecraft/server/level/Ticket.java
+++ b/src/main/java/net/minecraft/server/level/Ticket.java
@@ -20,7 +20,7 @@ public final class Ticket<T> implements Comparable<Ticket<?>> {
             return i;
         } else {
             int i2 = Integer.compare(System.identityHashCode(this.type), System.identityHashCode(ticket.type));
-            return i2 != 0 ? i2 : this.type.getComparator().compare(this.key, ticket.key);
+            return i2 != 0 ? i2 : this.type.getComparator().compare(this.key, (T) ticket.key);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/level/TickingTracker.java b/src/main/java/net/minecraft/server/level/TickingTracker.java
index 1400a90dd94978f34efc6161cb02722697a75d51..0cad1aa81fd39e2808439b5bf58f60a4a082f621 100644
--- a/src/main/java/net/minecraft/server/level/TickingTracker.java
+++ b/src/main/java/net/minecraft/server/level/TickingTracker.java
@@ -66,9 +66,9 @@ public class TickingTracker extends ChunkTracker {
         while(var3.hasNext()) {
             Entry<SortedArraySet<Ticket<?>>> entry = (Entry)var3.next();
 
-            for(Ticket<?> ticket : (SortedArraySet)entry.getValue()) {
+            for(Ticket<?> ticket : entry.getValue()) {
                 if (ticket.getType() == TicketType.PLAYER) {
-                    list.add(Pair.of(ticket, entry.getLongKey()));
+                    list.add(Pair.of((Ticket<ChunkPos>) ticket, entry.getLongKey()));
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/network/CommonListenerCookie.java b/src/main/java/net/minecraft/server/network/CommonListenerCookie.java
index adc3d06c502b2c794b093a054ffd371beaf49988..cd1d0cda1eb3eefba7662484fa6ee32cd43f36e5 100644
--- a/src/main/java/net/minecraft/server/network/CommonListenerCookie.java
+++ b/src/main/java/net/minecraft/server/network/CommonListenerCookie.java
@@ -3,24 +3,8 @@ package net.minecraft.server.network;
 import com.mojang.authlib.GameProfile;
 import net.minecraft.server.level.ClientInformation;
 
-public record CommonListenerCookie(GameProfile a, int b, ClientInformation c) {
-    private final GameProfile gameProfile;
-    private final int latency;
-    private final ClientInformation clientInformation;
-
+public record CommonListenerCookie(GameProfile gameProfile, int latency, ClientInformation clientInformation) {
     public static CommonListenerCookie createInitial(GameProfile gameProfile) {
         return new CommonListenerCookie(gameProfile, 0, ClientInformation.createDefault());
     }
-
-    public GameProfile gameProfile() {
-        return this.gameProfile;
-    }
-
-    public int latency() {
-        return this.latency;
-    }
-
-    public ClientInformation clientInformation() {
-        return this.clientInformation;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/network/ConfigurationTask.java b/src/main/java/net/minecraft/server/network/ConfigurationTask.java
index 198bba1992c6ae1bc30a1389150f03abf2989d4f..84e0529de44a1b1923c1566c1e9574bacbe7f6df 100644
--- a/src/main/java/net/minecraft/server/network/ConfigurationTask.java
+++ b/src/main/java/net/minecraft/server/network/ConfigurationTask.java
@@ -8,15 +8,9 @@ public interface ConfigurationTask {
 
     ConfigurationTask.Type type();
 
-    public static record Type(String a) {
-        private final String id;
-
+    public static record Type(String id) {
         public String toString() {
             return this.id;
         }
-
-        public String id() {
-            return this.id;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/network/FilteredText.java b/src/main/java/net/minecraft/server/network/FilteredText.java
index b5a5dc7a2fbae2b915eef4ac53b0aa28eaca2c4a..ecc63d5b8a12cd13b39a2f9a620e1b6daafc3645 100644
--- a/src/main/java/net/minecraft/server/network/FilteredText.java
+++ b/src/main/java/net/minecraft/server/network/FilteredText.java
@@ -4,9 +4,7 @@ import java.util.Objects;
 import javax.annotation.Nullable;
 import net.minecraft.network.chat.FilterMask;
 
-public record FilteredText(String b, FilterMask c) {
-    private final String raw;
-    private final FilterMask mask;
+public record FilteredText(String raw, FilterMask mask) {
     public static final FilteredText EMPTY = passThrough("");
 
     public static FilteredText passThrough(String s) {
@@ -29,12 +27,4 @@ public record FilteredText(String b, FilterMask c) {
     public boolean isFiltered() {
         return !this.mask.isEmpty();
     }
-
-    public String raw() {
-        return this.raw;
-    }
-
-    public FilterMask mask() {
-        return this.mask;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index ef6d15004ea123e137bfb8bb4c94696d4319427f..78d118ec24d03db28c2fe0112ec948e83115db69 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -1666,4 +1666,4 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
     interface EntityInteraction {
         InteractionResult run(ServerPlayer var1, Entity var2, InteractionHand var3);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/network/TextFilterClient.java b/src/main/java/net/minecraft/server/network/TextFilterClient.java
index 2d01181eb1a36384951602501bcac91aa127e30f..f99dbcd660f82f9ec7a05c404e3f8c153b82583f 100644
--- a/src/main/java/net/minecraft/server/network/TextFilterClient.java
+++ b/src/main/java/net/minecraft/server/network/TextFilterClient.java
@@ -98,38 +98,38 @@ public class TextFilterClient implements AutoCloseable {
                     URL url2 = getEndpoint(uri, jsonObject2, "join", "v1/join");
                     URL url3 = getEndpoint(uri, jsonObject2, "leave", "v1/leave");
                     TextFilterClient.JoinOrLeaveEncoder joinOrLeaveEncoder = (gameProfile) -> {
-                        JsonObject jsonObject = new JsonObject();
-                        jsonObject.addProperty("server", s3);
-                        jsonObject.addProperty("room", s4);
-                        jsonObject.addProperty("user_id", gameProfile.getId().toString());
-                        jsonObject.addProperty("user_display_name", gameProfile.getName());
-                        return jsonObject;
+                        JsonObject jsonObjectIn = new JsonObject();
+                        jsonObjectIn.addProperty("server", s3);
+                        jsonObjectIn.addProperty("room", s4);
+                        jsonObjectIn.addProperty("user_id", gameProfile.getId().toString());
+                        jsonObjectIn.addProperty("user_display_name", gameProfile.getName());
+                        return jsonObjectIn;
                     };
                     TextFilterClient.MessageEncoder messageEncoder;
                     if (flag) {
                         messageEncoder = (gameProfile, s3x) -> {
-                            JsonObject jsonObject = new JsonObject();
-                            jsonObject.addProperty("rule", i);
-                            jsonObject.addProperty("server", s3);
-                            jsonObject.addProperty("room", s4);
-                            jsonObject.addProperty("player", gameProfile.getId().toString());
-                            jsonObject.addProperty("player_display_name", gameProfile.getName());
-                            jsonObject.addProperty("text", s3x);
-                            jsonObject.addProperty("language", "*");
-                            return jsonObject;
+                            JsonObject jsonObjectIn = new JsonObject();
+                            jsonObjectIn.addProperty("rule", i);
+                            jsonObjectIn.addProperty("server", s3);
+                            jsonObjectIn.addProperty("room", s4);
+                            jsonObjectIn.addProperty("player", gameProfile.getId().toString());
+                            jsonObjectIn.addProperty("player_display_name", gameProfile.getName());
+                            jsonObjectIn.addProperty("text", s3x);
+                            jsonObjectIn.addProperty("language", "*");
+                            return jsonObjectIn;
                         };
                     } else {
                         String s6 = String.valueOf(i);
                         messageEncoder = (gameProfile, s4x) -> {
-                            JsonObject jsonObject = new JsonObject();
-                            jsonObject.addProperty("rule_id", s6);
-                            jsonObject.addProperty("category", s3);
-                            jsonObject.addProperty("subcategory", s4);
-                            jsonObject.addProperty("user_id", gameProfile.getId().toString());
-                            jsonObject.addProperty("user_display_name", gameProfile.getName());
-                            jsonObject.addProperty("text", s4x);
-                            jsonObject.addProperty("language", "*");
-                            return jsonObject;
+                            JsonObject jsonObjectIn = new JsonObject();
+                            jsonObjectIn.addProperty("rule_id", s6);
+                            jsonObjectIn.addProperty("category", s3);
+                            jsonObjectIn.addProperty("subcategory", s4);
+                            jsonObjectIn.addProperty("user_id", gameProfile.getId().toString());
+                            jsonObjectIn.addProperty("user_display_name", gameProfile.getName());
+                            jsonObjectIn.addProperty("text", s4x);
+                            jsonObjectIn.addProperty("language", "*");
+                            return jsonObjectIn;
                         };
                     }
 
diff --git a/src/main/java/net/minecraft/server/packs/FeatureFlagsMetadataSection.java b/src/main/java/net/minecraft/server/packs/FeatureFlagsMetadataSection.java
index 1138045391e4c93fe5b5c4a12a00d6409aefa3c5..1c690573dd6e296ede806b40df35ca3868667ed9 100644
--- a/src/main/java/net/minecraft/server/packs/FeatureFlagsMetadataSection.java
+++ b/src/main/java/net/minecraft/server/packs/FeatureFlagsMetadataSection.java
@@ -6,12 +6,7 @@ import net.minecraft.server.packs.metadata.MetadataSectionType;
 import net.minecraft.world.flag.FeatureFlagSet;
 import net.minecraft.world.flag.FeatureFlags;
 
-public record FeatureFlagsMetadataSection(FeatureFlagSet b) {
-    private final FeatureFlagSet flags;
+public record FeatureFlagsMetadataSection(FeatureFlagSet flags) {
     private static final Codec<FeatureFlagsMetadataSection> CODEC = RecordCodecBuilder.create((instance) -> instance.group(FeatureFlags.CODEC.fieldOf("enabled").forGetter(FeatureFlagsMetadataSection::flags)).apply(instance, FeatureFlagsMetadataSection::new));
     public static final MetadataSectionType<FeatureFlagsMetadataSection> TYPE = MetadataSectionType.fromCodec("features", CODEC);
-
-    public FeatureFlagSet flags() {
-        return this.flags;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/packs/OverlayMetadataSection.java b/src/main/java/net/minecraft/server/packs/OverlayMetadataSection.java
index 593236bd8457660d5186fc2554ffceda1d3badb5..d149e65da2f198e912fed90d0ee6850d2b01f7ce 100644
--- a/src/main/java/net/minecraft/server/packs/OverlayMetadataSection.java
+++ b/src/main/java/net/minecraft/server/packs/OverlayMetadataSection.java
@@ -9,8 +9,7 @@ import net.minecraft.server.packs.metadata.MetadataSectionType;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.InclusiveRange;
 
-public record OverlayMetadataSection(List<OverlayMetadataSection.OverlayEntry> b) {
-    private final List<OverlayMetadataSection.OverlayEntry> overlays;
+public record OverlayMetadataSection(List<OverlayMetadataSection.OverlayEntry> overlays) {
     private static final Pattern DIR_VALIDATOR = Pattern.compile("[-_a-zA-Z0-9.]+");
     private static final Codec<OverlayMetadataSection> CODEC = RecordCodecBuilder.create((instance) -> instance.group(OverlayMetadataSection.OverlayEntry.CODEC.listOf().fieldOf("entries").forGetter(OverlayMetadataSection::overlays)).apply(instance, OverlayMetadataSection::new));
     public static final MetadataSectionType<OverlayMetadataSection> TYPE = MetadataSectionType.fromCodec("overlays", CODEC);
@@ -23,25 +22,11 @@ public record OverlayMetadataSection(List<OverlayMetadataSection.OverlayEntry> b
         return this.overlays.stream().filter((overlayEntry) -> overlayEntry.isApplicable(i)).map(OverlayMetadataSection.OverlayEntry::overlay).toList();
     }
 
-    public List<OverlayMetadataSection.OverlayEntry> overlays() {
-        return this.overlays;
-    }
-
-    public static record OverlayEntry(InclusiveRange<Integer> a, String b) {
-        private final InclusiveRange<Integer> format;
-        private final String overlay;
+    public static record OverlayEntry(InclusiveRange<Integer> format, String overlay) {
         static final Codec<OverlayMetadataSection.OverlayEntry> CODEC = RecordCodecBuilder.create((instance) -> instance.group(InclusiveRange.codec(Codec.INT).fieldOf("formats").forGetter(OverlayMetadataSection.OverlayEntry::format), ExtraCodecs.validate(Codec.STRING, OverlayMetadataSection::validateOverlayDir).fieldOf("directory").forGetter(OverlayMetadataSection.OverlayEntry::overlay)).apply(instance, OverlayMetadataSection.OverlayEntry::new));
 
         public boolean isApplicable(int i) {
             return this.format.isValueInRange(i);
         }
-
-        public InclusiveRange<Integer> format() {
-            return this.format;
-        }
-
-        public String overlay() {
-            return this.overlay;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/packs/linkfs/LinkFSPath.java b/src/main/java/net/minecraft/server/packs/linkfs/LinkFSPath.java
index 53b38e94209bcfcebfe204eef7d537497057e30c..e67fc5bf7c34a0bc785238f8a5e965e2095eeae2 100644
--- a/src/main/java/net/minecraft/server/packs/linkfs/LinkFSPath.java
+++ b/src/main/java/net/minecraft/server/packs/linkfs/LinkFSPath.java
@@ -226,8 +226,8 @@ class LinkFSPath implements Path {
             PathContents linkFSPath = this.pathContents;
             if (linkFSPath instanceof PathContents.DirectoryContents) {
                 PathContents.DirectoryContents directoryContents = (PathContents.DirectoryContents)linkFSPath;
-                LinkFSPath linkFSPath = (LinkFSPath)directoryContents.children().get(s);
-                return linkFSPath != null ? linkFSPath : new LinkFSPath(this.fileSystem, s, this, PathContents.MISSING);
+                LinkFSPath linkFSPathIn = (LinkFSPath)directoryContents.children().get(s);
+                return linkFSPathIn != null ? linkFSPathIn : new LinkFSPath(this.fileSystem, s, this, PathContents.MISSING);
             } else if (this.pathContents instanceof PathContents.FileContents) {
                 return new LinkFSPath(this.fileSystem, s, this, PathContents.MISSING);
             } else {
diff --git a/src/main/java/net/minecraft/server/packs/linkfs/LinkFSProvider.java b/src/main/java/net/minecraft/server/packs/linkfs/LinkFSProvider.java
index 39f67370ddcb183f34ad692609aaa88927e589de..70423f63e43f735f96eb6d122e47e102f2a8af81 100644
--- a/src/main/java/net/minecraft/server/packs/linkfs/LinkFSProvider.java
+++ b/src/main/java/net/minecraft/server/packs/linkfs/LinkFSProvider.java
@@ -75,7 +75,7 @@ class LinkFSProvider extends FileSystemProvider {
                         } catch (IOException var3) {
                             throw new DirectoryIteratorException(var3);
                         }
-                    }).map((linkFSPath) -> linkFSPath).iterator();
+                    }).map((linkFSPath) -> (Path) linkFSPath).iterator();
                 }
 
                 public void close() {
diff --git a/src/main/java/net/minecraft/server/packs/linkfs/LinkFileSystem.java b/src/main/java/net/minecraft/server/packs/linkfs/LinkFileSystem.java
index c46fe9c53aaab2dd67c068ec0ec068200c6097e5..2a07d7eb62cf0c9acf62b0468f4f961cff3866ab 100644
--- a/src/main/java/net/minecraft/server/packs/linkfs/LinkFileSystem.java
+++ b/src/main/java/net/minecraft/server/packs/linkfs/LinkFileSystem.java
@@ -162,20 +162,9 @@ public class LinkFileSystem extends FileSystem {
         }
     }
 
-    static record DirectoryEntry(Map<String, LinkFileSystem.DirectoryEntry> a, Map<String, Path> b) {
-        final Map<String, LinkFileSystem.DirectoryEntry> children;
-        final Map<String, Path> files;
-
+    static record DirectoryEntry(Map<String, LinkFileSystem.DirectoryEntry> children, Map<String, Path> files) {
         public DirectoryEntry() {
             this(new HashMap(), new HashMap());
         }
-
-        public Map<String, LinkFileSystem.DirectoryEntry> children() {
-            return this.children;
-        }
-
-        public Map<String, Path> files() {
-            return this.files;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/packs/linkfs/PathContents.java b/src/main/java/net/minecraft/server/packs/linkfs/PathContents.java
index 3f51f0ed1b54762bdcdbebe8d6da8aabec59eee0..1f5913034f97726103149ee1ef841b34332bd18b 100644
--- a/src/main/java/net/minecraft/server/packs/linkfs/PathContents.java
+++ b/src/main/java/net/minecraft/server/packs/linkfs/PathContents.java
@@ -15,19 +15,9 @@ interface PathContents {
         }
     };
 
-    public static record DirectoryContents(Map<String, LinkFSPath> c) implements PathContents {
-        private final Map<String, LinkFSPath> children;
-
-        public Map<String, LinkFSPath> children() {
-            return this.children;
-        }
+    public static record DirectoryContents(Map<String, LinkFSPath> children) implements PathContents {
     }
 
-    public static record FileContents(Path c) implements PathContents {
-        private final Path contents;
-
-        public Path contents() {
-            return this.contents;
-        }
+    public static record FileContents(Path contents) implements PathContents {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/packs/metadata/pack/PackMetadataSection.java b/src/main/java/net/minecraft/server/packs/metadata/pack/PackMetadataSection.java
index 71d8c0b3ce8781d3eb8ed562a2493ba1af2763b0..89eee496869197efbcd3a6083a48bd95917d5d03 100644
--- a/src/main/java/net/minecraft/server/packs/metadata/pack/PackMetadataSection.java
+++ b/src/main/java/net/minecraft/server/packs/metadata/pack/PackMetadataSection.java
@@ -8,22 +8,7 @@ import net.minecraft.server.packs.metadata.MetadataSectionType;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.InclusiveRange;
 
-public record PackMetadataSection(Component c, int d, Optional<InclusiveRange<Integer>> e) {
-    private final Component description;
-    private final int packFormat;
-    private final Optional<InclusiveRange<Integer>> supportedFormats;
+public record PackMetadataSection(Component description, int packFormat, Optional<InclusiveRange<Integer>> supportedFormats) {
     public static final Codec<PackMetadataSection> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.COMPONENT.fieldOf("description").forGetter(PackMetadataSection::description), Codec.INT.fieldOf("pack_format").forGetter(PackMetadataSection::packFormat), InclusiveRange.codec(Codec.INT).optionalFieldOf("supported_formats").forGetter(PackMetadataSection::supportedFormats)).apply(instance, PackMetadataSection::new));
     public static final MetadataSectionType<PackMetadataSection> TYPE = MetadataSectionType.fromCodec("pack", CODEC);
-
-    public Component description() {
-        return this.description;
-    }
-
-    public int packFormat() {
-        return this.packFormat;
-    }
-
-    public Optional<InclusiveRange<Integer>> supportedFormats() {
-        return this.supportedFormats;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/packs/repository/Pack.java b/src/main/java/net/minecraft/server/packs/repository/Pack.java
index a2628de2bc12bd55fb73c7e8f64f8de0eec3d40e..55e6dc3e1501e2ff1680e24a6298d5e368947637 100644
--- a/src/main/java/net/minecraft/server/packs/repository/Pack.java
+++ b/src/main/java/net/minecraft/server/packs/repository/Pack.java
@@ -179,27 +179,7 @@ public class Pack {
         return this.id.hashCode();
     }
 
-    public static record Info(Component a, PackCompatibility b, FeatureFlagSet c, List<String> d) {
-        final Component description;
-        private final PackCompatibility compatibility;
-        private final FeatureFlagSet requestedFeatures;
-        private final List<String> overlays;
-
-        public Component description() {
-            return this.description;
-        }
-
-        public PackCompatibility compatibility() {
-            return this.compatibility;
-        }
-
-        public FeatureFlagSet requestedFeatures() {
-            return this.requestedFeatures;
-        }
-
-        public List<String> overlays() {
-            return this.overlays;
-        }
+    public static record Info(Component description, PackCompatibility compatibility, FeatureFlagSet requestedFeatures, List<String> overlays) {
     }
 
     public static enum Position {
@@ -243,4 +223,4 @@ public class Pack {
 
         PackResources openFull(String var1, Pack.Info var2);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/packs/resources/FallbackResourceManager.java b/src/main/java/net/minecraft/server/packs/resources/FallbackResourceManager.java
index 706f8cb067b110da4b46167b6fdbfe1cfdc908d4..c49797d8daeda8956e64050ecdbaa22642b4bf9b 100644
--- a/src/main/java/net/minecraft/server/packs/resources/FallbackResourceManager.java
+++ b/src/main/java/net/minecraft/server/packs/resources/FallbackResourceManager.java
@@ -105,8 +105,8 @@ public class FallbackResourceManager implements ResourceManager {
                         ioSupplier2 = ResourceMetadata.EMPTY_SUPPLIER;
                     } else {
                         ioSupplier2 = () -> {
-                            IoSupplier<InputStream> ioSupplier = packResources.getResource(this.type, resourceLocation2);
-                            return ioSupplier != null ? parseMetadata(ioSupplier) : ResourceMetadata.EMPTY;
+                            IoSupplier<InputStream> ioSupplier3 = packResources.getResource(this.type, resourceLocation2);
+                            return ioSupplier3 != null ? parseMetadata(ioSupplier3) : ResourceMetadata.EMPTY;
                         };
                     }
 
@@ -144,6 +144,9 @@ public class FallbackResourceManager implements ResourceManager {
         return resourceLocation.withPath(resourceLocation.getPath() + ".mcmeta");
     }
 
+    record ResourceWithSourceAndIndex(PackResources packResources, IoSupplier<InputStream> resource, int packIndex) {
+    }
+
     public Map<ResourceLocation, Resource> listResources(String s, Predicate<ResourceLocation> predicate) {
         Map<ResourceLocation, ResourceWithSourceAndIndex> map = new HashMap();
         Map<ResourceLocation, ResourceWithSourceAndIndex> map2 = new HashMap();
@@ -157,23 +160,6 @@ public class FallbackResourceManager implements ResourceManager {
             if (packResources != null) {
                 int i3 = i2;
                 packResources.listResources(this.type, this.namespace, s, (resourceLocation, ioSupplier) -> {
-                    record ResourceWithSourceAndIndex(PackResources a, IoSupplier<InputStream> b, int c) {
-                        final PackResources packResources;
-                        final IoSupplier<InputStream> resource;
-                        final int packIndex;
-
-                        public PackResources packResources() {
-                            return this.packResources;
-                        }
-
-                        public IoSupplier<InputStream> resource() {
-                            return this.resource;
-                        }
-
-                        public int packIndex() {
-                            return this.packIndex;
-                        }
-                    }
 
                     if (isMetadata(resourceLocation)) {
                         if (predicate.test(getResourceLocationFromMetadata(resourceLocation))) {
@@ -190,10 +176,10 @@ public class FallbackResourceManager implements ResourceManager {
         Map<ResourceLocation, Resource> map3 = Maps.newTreeMap();
         map.forEach((resourceLocation, var3) -> {
             ResourceLocation resourceLocation2 = getMetadataLocation(resourceLocation);
-            ResourceWithSourceAndIndex 1ResourceWithSourceAndIndex2 = (ResourceWithSourceAndIndex)map2.get(resourceLocation2);
+            ResourceWithSourceAndIndex resourceWithSourceAndIndex2 = (ResourceWithSourceAndIndex)map2.get(resourceLocation2);
             IoSupplier<ResourceMetadata> ioSupplier;
-            if (1ResourceWithSourceAndIndex2 != null && 1ResourceWithSourceAndIndex2.packIndex >= var3.packIndex) {
-                ioSupplier = convertToMetadata(1ResourceWithSourceAndIndex2.resource);
+            if (resourceWithSourceAndIndex2 != null && resourceWithSourceAndIndex2.packIndex >= var3.packIndex) {
+                ioSupplier = convertToMetadata(resourceWithSourceAndIndex2.resource);
             } else {
                 ioSupplier = ResourceMetadata.EMPTY_SUPPLIER;
             }
@@ -321,31 +307,10 @@ public class FallbackResourceManager implements ResourceManager {
         return this.fallbacks.stream().map((packEntry) -> packEntry.resources).filter(Objects::nonNull);
     }
 
-    static record EntryStack(ResourceLocation a, ResourceLocation b, List<FallbackResourceManager.ResourceWithSource> c, Map<PackResources, IoSupplier<InputStream>> d) {
-        final ResourceLocation fileLocation;
-        private final ResourceLocation metadataLocation;
-        final List<FallbackResourceManager.ResourceWithSource> fileSources;
-        final Map<PackResources, IoSupplier<InputStream>> metaSources;
-
+    static record EntryStack(ResourceLocation fileLocation, ResourceLocation metadataLocation, List<FallbackResourceManager.ResourceWithSource> fileSources, Map<PackResources, IoSupplier<InputStream>> metaSources) {
         EntryStack(ResourceLocation resourceLocation) {
             this(resourceLocation, FallbackResourceManager.getMetadataLocation(resourceLocation), new ArrayList(), new Object2ObjectArrayMap());
         }
-
-        public ResourceLocation fileLocation() {
-            return this.fileLocation;
-        }
-
-        public ResourceLocation metadataLocation() {
-            return this.metadataLocation;
-        }
-
-        public List<FallbackResourceManager.ResourceWithSource> fileSources() {
-            return this.fileSources;
-        }
-
-        public Map<PackResources, IoSupplier<InputStream>> metaSources() {
-            return this.metaSources;
-        }
     }
 
     static class LeakedResourceWarningInputStream extends FilterInputStream {
@@ -376,13 +341,7 @@ public class FallbackResourceManager implements ResourceManager {
         }
     }
 
-    static record PackEntry(String a, @Nullable PackResources b, @Nullable Predicate<ResourceLocation> c) {
-        final String name;
-        @Nullable
-        final PackResources resources;
-        @Nullable
-        private final Predicate<ResourceLocation> filter;
-
+    static record PackEntry(String name, @Nullable PackResources resources, @Nullable Predicate<ResourceLocation> filter) {
         public void filterAll(Collection<ResourceLocation> collection) {
             if (this.filter != null) {
                 collection.removeIf(this.filter);
@@ -393,32 +352,8 @@ public class FallbackResourceManager implements ResourceManager {
         public boolean isFiltered(ResourceLocation resourceLocation) {
             return this.filter != null && this.filter.test(resourceLocation);
         }
-
-        public String name() {
-            return this.name;
-        }
-
-        @Nullable
-        public PackResources resources() {
-            return this.resources;
-        }
-
-        @Nullable
-        public Predicate<ResourceLocation> filter() {
-            return this.filter;
-        }
     }
 
-    static record ResourceWithSource(PackResources a, IoSupplier<InputStream> b) {
-        final PackResources source;
-        final IoSupplier<InputStream> resource;
-
-        public PackResources source() {
-            return this.source;
-        }
-
-        public IoSupplier<InputStream> resource() {
-            return this.resource;
-        }
+    static record ResourceWithSource(PackResources source, IoSupplier<InputStream> resource) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
index 401791a6c06732530f6e22cb5fec1a696adbae89..988a8579478088d1ea3d9bc23a399d7f96d8a60e 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ProfiledReloadInstance.java
@@ -23,7 +23,7 @@ public class ProfiledReloadInstance extends SimpleReloadInstance<ProfiledReloadI
             AtomicLong atomicLong2 = new AtomicLong();
             ActiveProfiler activeProfiler = new ActiveProfiler(Util.timeSource, () -> 0, false);
             ActiveProfiler activeProfiler2 = new ActiveProfiler(Util.timeSource, () -> 0, false);
-            CompletableFuture<Void> completableFuture = preparableReloadListener.reload(preparationBarrier, resourceManagerx, activeProfiler, activeProfiler2, (runnable) -> executor2x.execute(() -> {
+            CompletableFuture<Void> completableFutureIn = preparableReloadListener.reload(preparationBarrier, resourceManagerx, activeProfiler, activeProfiler2, (runnable) -> executor2x.execute(() -> {
                     long l = Util.getNanos();
                     runnable.run();
                     atomicLong.addAndGet(Util.getNanos() - l);
@@ -32,7 +32,7 @@ public class ProfiledReloadInstance extends SimpleReloadInstance<ProfiledReloadI
                     runnable.run();
                     atomicLong2.addAndGet(Util.getNanos() - l);
                 }));
-            return completableFuture.thenApplyAsync((void_) -> {
+            return completableFutureIn.thenApplyAsync((void_) -> {
                 LOGGER.debug("Finished reloading " + preparableReloadListener.getName());
                 return new ProfiledReloadInstance.State(preparableReloadListener.getName(), activeProfiler.getResults(), activeProfiler2.getResults(), atomicLong, atomicLong2);
             }, executor2);
diff --git a/src/main/java/net/minecraft/server/packs/resources/ResourceMetadata.java b/src/main/java/net/minecraft/server/packs/resources/ResourceMetadata.java
index 501062338602277b5bff634a403fe8317fa45f54..e33baf546ef25efe586b55720beb8ff2b53f83be 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ResourceMetadata.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ResourceMetadata.java
@@ -74,9 +74,9 @@ public interface ResourceMetadata {
             final ImmutableMap<MetadataSectionSerializer<?>, Object> immutableMap = this.map.build();
             return immutableMap.isEmpty() ? ResourceMetadata.EMPTY : new ResourceMetadata() {
                 public <T> Optional<T> getSection(MetadataSectionSerializer<T> metadataSectionSerializer) {
-                    return Optional.ofNullable(immutableMap.get(metadataSectionSerializer));
+                    return Optional.ofNullable((T) immutableMap.get(metadataSectionSerializer));
                 }
             };
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 061c16b93718a7f50260bb675d54caca69ed9ba9..085eba8cf07ec54bb33fdc223b4f038762668211 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -327,7 +327,7 @@ public abstract class PlayerList {
             if (entity.hasExactlyOnePlayerPassenger()) {
                 LOGGER.debug("Removing player mount");
                 serverPlayer.stopRiding();
-                entity.getPassengersAndSelf().forEach((entity) -> entity.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER));
+                entity.getPassengersAndSelf().forEach((entityIn) -> entityIn.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER));
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index 0f95ce6228fd1786cc2614063bcec58154042edb..35961166e21aac26e94e0c5e792e8451ecc92669 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -146,7 +146,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
                         JsonObject jsonObject = GsonHelper.convertToJsonObject(jsonElement, "entry");
                         StoredUserEntry<K> storedUserEntry = this.createEntry(jsonObject);
                         if (storedUserEntry.getUser() != null) {
-                            this.map.put(this.getKeyForUser(storedUserEntry.getUser()), storedUserEntry);
+                            this.map.put(this.getKeyForUser(storedUserEntry.getUser()), (V) storedUserEntry);
                         }
                     }
                 } catch (Throwable var8) {
@@ -174,4 +174,4 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
 
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index 5d1f3e635059f90e513d60b3c0d8a20b39ab07b6..5513010da7ffe67a7799b45101abef86a7232c99 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -102,11 +102,11 @@ public class ServerStatsCounter extends StatsCounter {
                             String s2 = (String)var7.next();
                             if (compoundTag2.contains(s2, 10)) {
                                 Util.ifElse(BuiltInRegistries.STAT_TYPE.getOptional(new ResourceLocation(s2)), (statType) -> {
-                                    CompoundTag compoundTag2 = compoundTag2.getCompound(s2);
+                                    CompoundTag compoundTag2In = compoundTag2.getCompound(s2);
 
-                                    for(String s2 : compoundTag2.getAllKeys()) {
-                                        if (compoundTag2.contains(s2, 99)) {
-                                            Util.ifElse(this.getStat(statType, s2), (stat) -> this.stats.put(stat, compoundTag2.getInt(s2)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, s2));
+                                    for(String key : compoundTag2In.getAllKeys()) {
+                                        if (compoundTag2In.contains(key, 99)) {
+                                            Util.ifElse(this.getStat(statType, key), (stat) -> this.stats.put(stat, compoundTag2In.getInt(key)), () -> LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, key));
                                         } else {
                                             LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", new Object[]{this.file, compoundTag2.get(s2), s2});
                                         }
@@ -171,14 +171,14 @@ public class ServerStatsCounter extends StatsCounter {
             ((JsonObject)map.computeIfAbsent(stat.getType(), (statType) -> new JsonObject())).addProperty(getKey(stat).toString(), entry.getIntValue());
         }
 
-        JsonObject jsonObject = new JsonObject();
+        JsonObject jsonObjectIn = new JsonObject();
 
         for(Entry<StatType<?>, JsonObject> entry2 : map.entrySet()) {
-            jsonObject.add(BuiltInRegistries.STAT_TYPE.getKey((StatType)entry2.getKey()).toString(), (JsonElement)entry2.getValue());
+            jsonObjectIn.add(BuiltInRegistries.STAT_TYPE.getKey((StatType)entry2.getKey()).toString(), (JsonElement)entry2.getValue());
         }
 
         JsonObject jsonObject2 = new JsonObject();
-        jsonObject2.add("stats", jsonObject);
+        jsonObject2.add("stats", jsonObjectIn);
         jsonObject2.addProperty("DataVersion", SharedConstants.getCurrentVersion().getDataVersion().getVersion());
         return jsonObject2.toString();
     }
diff --git a/src/main/java/net/minecraft/tags/TagFile.java b/src/main/java/net/minecraft/tags/TagFile.java
index c8cb3020f686c288f81baa778a56acd7cfcb8f69..368cbf520e00978353d640edb6ca705e5f3622dd 100644
--- a/src/main/java/net/minecraft/tags/TagFile.java
+++ b/src/main/java/net/minecraft/tags/TagFile.java
@@ -4,16 +4,6 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.List;
 
-public record TagFile(List<TagEntry> b, boolean c) {
-    private final List<TagEntry> entries;
-    private final boolean replace;
+public record TagFile(List<TagEntry> entries, boolean replace) {
     public static final Codec<TagFile> CODEC = RecordCodecBuilder.create((instance) -> instance.group(TagEntry.CODEC.listOf().fieldOf("values").forGetter(TagFile::entries), Codec.BOOL.optionalFieldOf("replace", false).forGetter(TagFile::replace)).apply(instance, TagFile::new));
-
-    public List<TagEntry> entries() {
-        return this.entries;
-    }
-
-    public boolean replace() {
-        return this.replace;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/tags/TagKey.java b/src/main/java/net/minecraft/tags/TagKey.java
index c4bab4b7048b11b9e866ba0e74d3479755cef7b0..64e4141eb43fd8506b988ba2f033ad1c7f50717f 100644
--- a/src/main/java/net/minecraft/tags/TagKey.java
+++ b/src/main/java/net/minecraft/tags/TagKey.java
@@ -9,9 +9,7 @@ import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 
-public record TagKey<T>(ResourceKey<? extends Registry<T>> a, ResourceLocation b) {
-    private final ResourceKey<? extends Registry<T>> registry;
-    private final ResourceLocation location;
+public record TagKey<T>(ResourceKey<? extends Registry<T>> registry, ResourceLocation location) {
     private static final Interner<TagKey<?>> VALUES = Interners.newWeakInterner();
 
     public static <T> Codec<TagKey<T>> codec(ResourceKey<? extends Registry<T>> resourceKey) {
@@ -31,18 +29,10 @@ public record TagKey<T>(ResourceKey<? extends Registry<T>> a, ResourceLocation b
     }
 
     public <E> Optional<TagKey<E>> cast(ResourceKey<? extends Registry<E>> resourceKey) {
-        return this.isFor(resourceKey) ? Optional.of(this) : Optional.empty();
+        return this.isFor(resourceKey) ? Optional.of((TagKey<E>) this) : Optional.empty();
     }
 
     public String toString() {
         return "TagKey[" + this.registry.location() + " / " + this.location + "]";
     }
-
-    public ResourceKey<? extends Registry<T>> registry() {
-        return this.registry;
-    }
-
-    public ResourceLocation location() {
-        return this.location;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/tags/TagLoader.java b/src/main/java/net/minecraft/tags/TagLoader.java
index eb03d967b0a16b13e91c38fbe4ada1055d37a95e..64ba1e0e25960b620d5d79b304c061748d5365af 100644
--- a/src/main/java/net/minecraft/tags/TagLoader.java
+++ b/src/main/java/net/minecraft/tags/TagLoader.java
@@ -53,7 +53,7 @@ public class TagLoader<T> {
                     try {
                         JsonElement jsonElement = JsonParser.parseReader(reader);
                         List<TagLoader.EntryWithSource> list = map.computeIfAbsent(resourceLocation2, (resourceLocationx) -> new ArrayList());
-                        TagFile tagFile = (TagFile)TagFile.CODEC.parse(new Dynamic(JsonOps.INSTANCE, jsonElement)).getOrThrow(false, LOGGER::error);
+                        TagFile tagFile = (TagFile)TagFile.CODEC.parse(new Dynamic<>(JsonOps.INSTANCE, jsonElement)).getOrThrow(false, LOGGER::error);
                         if (tagFile.replace()) {
                             list.clear();
                         }
@@ -120,26 +120,13 @@ public class TagLoader<T> {
         return this.build(this.load(resourceManager));
     }
 
-    public static record EntryWithSource(TagEntry a, String b) {
-        final TagEntry entry;
-        private final String source;
-
+    public static record EntryWithSource(TagEntry entry, String source) {
         public String toString() {
             return this.entry + " (from " + this.source + ")";
         }
-
-        public TagEntry entry() {
-            return this.entry;
-        }
-
-        public String source() {
-            return this.source;
-        }
     }
 
-    static record SortingEntry(List<TagLoader.EntryWithSource> a) implements DependencySorter.Entry<ResourceLocation> {
-        final List<TagLoader.EntryWithSource> entries;
-
+    static record SortingEntry(List<TagLoader.EntryWithSource> entries) implements DependencySorter.Entry<ResourceLocation> {
         public void visitRequiredDependencies(Consumer<ResourceLocation> consumer) {
             this.entries.forEach((entryWithSource) -> entryWithSource.entry.visitRequiredDependencies(consumer));
         }
@@ -147,9 +134,5 @@ public class TagLoader<T> {
         public void visitOptionalDependencies(Consumer<ResourceLocation> consumer) {
             this.entries.forEach((entryWithSource) -> entryWithSource.entry.visitOptionalDependencies(consumer));
         }
-
-        public List<TagLoader.EntryWithSource> entries() {
-            return this.entries;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/tags/TagManager.java b/src/main/java/net/minecraft/tags/TagManager.java
index c5dcd76d2b4d28768d5e7191937f05df0fa24918..4b57a3a77342bc0512677de4ac0bc77123a751b3 100644
--- a/src/main/java/net/minecraft/tags/TagManager.java
+++ b/src/main/java/net/minecraft/tags/TagManager.java
@@ -46,16 +46,6 @@ public class TagManager implements PreparableReloadListener {
         return CompletableFuture.supplyAsync(() -> new TagManager.LoadResult<>(resourceKey, tagLoader.loadAndBuild(resourceManager)), executor);
     }
 
-    public static record LoadResult<T>(ResourceKey<? extends Registry<T>> a, Map<ResourceLocation, Collection<Holder<T>>> b) {
-        private final ResourceKey<? extends Registry<T>> key;
-        private final Map<ResourceLocation, Collection<Holder<T>>> tags;
-
-        public ResourceKey<? extends Registry<T>> key() {
-            return this.key;
-        }
-
-        public Map<ResourceLocation, Collection<Holder<T>>> tags() {
-            return this.tags;
-        }
+    public static record LoadResult<T>(ResourceKey<? extends Registry<T>> key, Map<ResourceLocation, Collection<Holder<T>>> tags) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/Brightness.java b/src/main/java/net/minecraft/util/Brightness.java
index 874c34e35a2e2aaea12863d29c693a6802a34378..91cfe64199a49ddbea439f54896c814b00c09518 100644
--- a/src/main/java/net/minecraft/util/Brightness.java
+++ b/src/main/java/net/minecraft/util/Brightness.java
@@ -3,9 +3,7 @@ package net.minecraft.util;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 
-public record Brightness(int d, int e) {
-    private final int block;
-    private final int sky;
+public record Brightness(int block, int sky) {
     public static final Codec<Integer> LIGHT_VALUE_CODEC = ExtraCodecs.intRange(0, 15);
     public static final Codec<Brightness> CODEC = RecordCodecBuilder.create((instance) -> instance.group(LIGHT_VALUE_CODEC.fieldOf("block").forGetter(Brightness::block), LIGHT_VALUE_CODEC.fieldOf("sky").forGetter(Brightness::sky)).apply(instance, Brightness::new));
     public static Brightness FULL_BRIGHT = new Brightness(15, 15);
@@ -19,12 +17,4 @@ public record Brightness(int d, int e) {
         int i3 = i >> 20 & '\uffff';
         return new Brightness(i2, i3);
     }
-
-    public int block() {
-        return this.block;
-    }
-
-    public int sky() {
-        return this.sky;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
index c337a6dc8cc16260f2038439027065ad77839128..487da6925055ec72c437165a15053e8d4fbf6939 100644
--- a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
+++ b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
@@ -57,7 +57,7 @@ public class ClassInstanceMultiMap<T> extends AbstractCollection<T> {
             throw new IllegalArgumentException("Don't know how to search for " + clazz);
         } else {
             List<? extends T> list = this.byClass.computeIfAbsent(clazz, (clazzx) -> this.allInstances.stream().filter(clazzx::isInstance).collect(Collectors.toList()));
-            return Collections.unmodifiableCollection(list);
+            return (Collection<S>) Collections.unmodifiableCollection(list);
         }
     }
 
diff --git a/src/main/java/net/minecraft/util/Crypt.java b/src/main/java/net/minecraft/util/Crypt.java
index 094d4289cba823691958dbeb9d2ac0c0bf0d5617..f94aed17d4dd1e5ff26f67062679d1c0ae77b901 100644
--- a/src/main/java/net/minecraft/util/Crypt.java
+++ b/src/main/java/net/minecraft/util/Crypt.java
@@ -198,9 +198,7 @@ public class Crypt {
         T apply(byte[] var1) throws CryptException;
     }
 
-    public static record SaltSignaturePair(long b, byte[] c) {
-        private final long salt;
-        private final byte[] signature;
+    public static record SaltSignaturePair(long salt, byte[] signature) {
         public static final Crypt.SaltSignaturePair EMPTY = new Crypt.SaltSignaturePair(0L, ByteArrays.EMPTY_ARRAY);
 
         public SaltSignaturePair(FriendlyByteBuf friendlyByteBuf) {
@@ -219,14 +217,6 @@ public class Crypt {
         public byte[] saltAsBytes() {
             return Longs.toByteArray(this.salt);
         }
-
-        public long salt() {
-            return this.salt;
-        }
-
-        public byte[] signature() {
-            return this.signature;
-        }
     }
 
     public static class SaltSupplier {
diff --git a/src/main/java/net/minecraft/util/CubicSpline.java b/src/main/java/net/minecraft/util/CubicSpline.java
index 080a97c5c45a0af51048dd278a326e12797efb9a..e41e87f9a6e8c1c120f1c495000c1deda741b8a8 100644
--- a/src/main/java/net/minecraft/util/CubicSpline.java
+++ b/src/main/java/net/minecraft/util/CubicSpline.java
@@ -20,44 +20,29 @@ public interface CubicSpline<C, I extends ToFloatFunction<C>> extends ToFloatFun
 
     CubicSpline<C, I> mapAll(CubicSpline.CoordinateVisitor<I> var1);
 
+    record Point<C, I extends ToFloatFunction<C>>(float location, CubicSpline<C, I> value, float derivative) {
+    }
+
     static <C, I extends ToFloatFunction<C>> Codec<CubicSpline<C, I>> codec(Codec<I> codec) {
         MutableObject<Codec<CubicSpline<C, I>>> mutableObject = new MutableObject();
         Codec<Point<C, I>> codec2 = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("location").forGetter(Point::location), ExtraCodecs.lazyInitializedCodec(mutableObject::getValue).fieldOf("value").forGetter(Point::value), Codec.FLOAT.fieldOf("derivative").forGetter(Point::derivative)).apply(instance, (f, cubicSpline, f2) -> {
-                record Point<C, I extends ToFloatFunction<C>>(float a, CubicSpline<C, I> b, float c) {
-                    private final float location;
-                    private final CubicSpline<C, I> value;
-                    private final float derivative;
-
-                    public float location() {
-                        return this.location;
-                    }
-
-                    public CubicSpline<C, I> value() {
-                        return this.value;
-                    }
-
-                    public float derivative() {
-                        return this.derivative;
-                    }
-                }
-
                 return new Point(f, cubicSpline, f2);
             }));
-        Codec<CubicSpline.Multipoint<C, I>> codec3 = RecordCodecBuilder.create((instance) -> instance.group(codec.fieldOf("coordinate").forGetter(CubicSpline.Multipoint::coordinate), ExtraCodecs.nonEmptyList(codec2.listOf()).fieldOf("points").forGetter((multipoint) -> IntStream.range(0, multipoint.locations.length).mapToObj((i) -> new Point(multipoint.locations()[i], (CubicSpline)multipoint.values().get(i), multipoint.derivatives()[i])).toList())).apply(instance, (toFloatFunction, list) -> {
+        Codec<CubicSpline.Multipoint<C, I>> codec3 = RecordCodecBuilder.create((instance) -> instance.group(codec.fieldOf("coordinate").forGetter(CubicSpline.Multipoint<C, I>::coordinate), ExtraCodecs.nonEmptyList(codec2.listOf()).fieldOf("points").forGetter((multipoint) -> IntStream.range(0, multipoint.locations.length).mapToObj((i) -> new Point<>(multipoint.locations()[i], multipoint.values().get(i), multipoint.derivatives()[i])).toList())).apply(instance, (toFloatFunction, list) -> {
                 float[] floats = new float[list.size()];
                 com.google.common.collect.ImmutableList.Builder<CubicSpline<C, I>> builder = ImmutableList.builder();
                 float[] floats2 = new float[list.size()];
 
                 for(int i = 0; i < list.size(); ++i) {
-                    Point<C, I> 1Point = (Point)list.get(i);
-                    floats[i] = 1Point.location();
-                    builder.add(1Point.value());
-                    floats2[i] = 1Point.derivative();
+                    Point<C, I> point = (Point)list.get(i);
+                    floats[i] = point.location();
+                    builder.add(point.value());
+                    floats2[i] = point.derivative();
                 }
 
                 return CubicSpline.Multipoint.create((I)toFloatFunction, floats, builder.build(), floats2);
             }));
-        mutableObject.setValue(Codec.either(Codec.FLOAT, codec3).xmap((either) -> (CubicSpline)either.map(CubicSpline.Constant::new, (multipoint) -> multipoint), (cubicSpline) -> {
+        mutableObject.setValue(Codec.either(Codec.FLOAT, codec3).xmap((either) -> either.map(CubicSpline.Constant::new, (multipoint) -> multipoint), (cubicSpline) -> {
             Either var10000;
             if (cubicSpline instanceof CubicSpline.Constant) {
                 CubicSpline.Constant<C, I> constant = (CubicSpline.Constant)cubicSpline;
@@ -100,11 +85,11 @@ public interface CubicSpline<C, I extends ToFloatFunction<C>> extends ToFloatFun
         }
 
         public CubicSpline.Builder<C, I> addPoint(float f, float f2) {
-            return this.addPoint(f, new CubicSpline.Constant<>(this.valueTransformer.apply((C)f2)), 0.0F);
+            return this.addPoint(f, new CubicSpline.Constant<>(this.valueTransformer.apply(f2)), 0.0F);
         }
 
         public CubicSpline.Builder<C, I> addPoint(float f, float f2, float f3) {
-            return this.addPoint(f, new CubicSpline.Constant<>(this.valueTransformer.apply((C)f2)), f3);
+            return this.addPoint(f, new CubicSpline.Constant<>(this.valueTransformer.apply(f2)), f3);
         }
 
         public CubicSpline.Builder<C, I> addPoint(float f, CubicSpline<C, I> cubicSpline) {
@@ -132,9 +117,7 @@ public interface CubicSpline<C, I extends ToFloatFunction<C>> extends ToFloatFun
     }
 
     @VisibleForDebug
-    public static record Constant<C, I extends ToFloatFunction<C>>(float b) implements CubicSpline<C, I> {
-        private final float value;
-
+    public static record Constant<C, I extends ToFloatFunction<C>>(float value) implements CubicSpline<C, I> {
         public float apply(C object) {
             return this.value;
         }
@@ -154,10 +137,6 @@ public interface CubicSpline<C, I extends ToFloatFunction<C>> extends ToFloatFun
         public CubicSpline<C, I> mapAll(CubicSpline.CoordinateVisitor<I> coordinateVisitor) {
             return this;
         }
-
-        public float value() {
-            return this.value;
-        }
     }
 
     public interface CoordinateVisitor<I> {
@@ -165,16 +144,9 @@ public interface CubicSpline<C, I extends ToFloatFunction<C>> extends ToFloatFun
     }
 
     @VisibleForDebug
-    public static record Multipoint<C, I extends ToFloatFunction<C>>(I b, float[] c, List<CubicSpline<C, I>> d, float[] e, float f, float g) implements CubicSpline<C, I> {
-        private final I coordinate;
-        final float[] locations;
-        private final List<CubicSpline<C, I>> values;
-        private final float[] derivatives;
-        private final float minValue;
-        private final float maxValue;
-
+    public static record Multipoint<C, I extends ToFloatFunction<C>>(I coordinate, float[] locations, List<CubicSpline<C, I>> values, float[] derivatives, float minValue, float maxValue) implements CubicSpline<C, I> {
         public Multipoint {
-            validateSizes(floats, list, floats2);
+            validateSizes(locations, values, derivatives);
         }
 
         static <C, I extends ToFloatFunction<C>> CubicSpline.Multipoint<C, I> create(I toFloatFunction, float[] floats, List<CubicSpline<C, I>> list, float[] floats2) {
@@ -289,29 +261,5 @@ public interface CubicSpline<C, I extends ToFloatFunction<C>> extends ToFloatFun
         public CubicSpline<C, I> mapAll(CubicSpline.CoordinateVisitor<I> coordinateVisitor) {
             return create(coordinateVisitor.visit(this.coordinate), this.locations, this.values().stream().map((cubicSpline) -> cubicSpline.mapAll(coordinateVisitor)).toList(), this.derivatives);
         }
-
-        public I coordinate() {
-            return this.coordinate;
-        }
-
-        public float[] locations() {
-            return this.locations;
-        }
-
-        public List<CubicSpline<C, I>> values() {
-            return this.values;
-        }
-
-        public float[] derivatives() {
-            return this.derivatives;
-        }
-
-        public float minValue() {
-            return this.minValue;
-        }
-
-        public float maxValue() {
-            return this.maxValue;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/ExtraCodecs.java b/src/main/java/net/minecraft/util/ExtraCodecs.java
index 23ba6c5ed65e48759ecdf95fbc9f963bc3166f99..ef08de0b55c83cf43bf9ec2f6b0df716dc9ff03c 100644
--- a/src/main/java/net/minecraft/util/ExtraCodecs.java
+++ b/src/main/java/net/minecraft/util/ExtraCodecs.java
@@ -182,7 +182,7 @@ public class ExtraCodecs {
                 P object2 = (P)listx.get(1);
                 return biFunction.apply(object, object2);
             }), (object) -> ImmutableList.of(function.apply(object), function2.apply(object)));
-        Codec<I> codec3 = RecordCodecBuilder.create((instance) -> instance.group(codec.fieldOf(s).forGetter(Pair::getFirst), codec.fieldOf(s2).forGetter(Pair::getSecond)).apply(instance, Pair::of)).comapFlatMap((pair) -> biFunction.apply(pair.getFirst(), pair.getSecond()), (object) -> Pair.of(function.apply(object), function2.apply(object)));
+        Codec<I> codec3 = RecordCodecBuilder.<Pair<P, P>>create((instance) -> instance.group(codec.fieldOf(s).forGetter(Pair::getFirst), codec.fieldOf(s2).forGetter(Pair::getSecond)).apply(instance, Pair::of)).comapFlatMap((pair) -> biFunction.apply(pair.getFirst(), pair.getSecond()), (object) -> Pair.of(function.apply(object), function2.apply(object)));
         Codec<I> codec4 = withAlternative(codec2, codec3);
         return Codec.either(codec, codec4).comapFlatMap((either) -> either.map((object) -> biFunction.apply(object, object), DataResult::success), (object) -> {
             P object2 = (P)function.apply(object);
@@ -196,7 +196,7 @@ public class ExtraCodecs {
             public <T> DataResult<Pair<A, T>> apply(DynamicOps<T> dynamicOps, T objectx, DataResult<Pair<A, T>> dataResult) {
                 MutableObject<String> mutableObject = new MutableObject();
                 Optional<Pair<A, T>> optional = dataResult.resultOrPartial(mutableObject::setValue);
-                return optional.isPresent() ? dataResult : DataResult.error(() -> "(" + (String)mutableObject.getValue() + " -> using default)", Pair.of(object, object));
+                return optional.isPresent() ? dataResult : DataResult.error(() -> "(" + (String)mutableObject.getValue() + " -> using default)", Pair.of(object, (T) object));
             }
 
             public <T> DataResult<T> coApply(DynamicOps<T> dynamicOps, A objectx, DataResult<T> dataResult) {
@@ -504,10 +504,7 @@ public class ExtraCodecs {
         }
     }
 
-    public static record StrictUnboundedMapCodec<K, V>(Codec<K> a, Codec<V> b) implements Codec<Map<K, V>>, BaseMapCodec<K, V> {
-        private final Codec<K> keyCodec;
-        private final Codec<V> elementCodec;
-
+    public static record StrictUnboundedMapCodec<K, V>(Codec<K> keyCodec, Codec<V> elementCodec) implements Codec<Map<K, V>>, BaseMapCodec<K, V> {
         public <T> DataResult<Map<K, V>> decode(DynamicOps<T> dynamicOps, MapLike<T> mapLike) {
             Builder<K, V> builder = ImmutableMap.builder();
 
@@ -552,20 +549,9 @@ public class ExtraCodecs {
         public String toString() {
             return "StrictUnboundedMapCodec[" + this.keyCodec + " -> " + this.elementCodec + "]";
         }
-
-        public Codec<K> keyCodec() {
-            return this.keyCodec;
-        }
-
-        public Codec<V> elementCodec() {
-            return this.elementCodec;
-        }
     }
 
-    public static record TagOrElementLocation(ResourceLocation a, boolean b) {
-        private final ResourceLocation id;
-        private final boolean tag;
-
+    public static record TagOrElementLocation(ResourceLocation id, boolean tag) {
         public String toString() {
             return this.decoratedId();
         }
@@ -573,20 +559,9 @@ public class ExtraCodecs {
         private String decoratedId() {
             return this.tag ? "#" + this.id : this.id.toString();
         }
-
-        public ResourceLocation id() {
-            return this.id;
-        }
-
-        public boolean tag() {
-            return this.tag;
-        }
     }
 
-    static record XorCodec<F, S>(Codec<F> a, Codec<S> b) implements Codec<Either<F, S>> {
-        private final Codec<F> first;
-        private final Codec<S> second;
-
+    static record XorCodec<F, S>(Codec<F> first, Codec<S> second) implements Codec<Either<F, S>> {
         public <T> DataResult<Pair<Either<F, S>, T>> decode(DynamicOps<T> dynamicOps, T object) {
             DataResult<Pair<Either<F, S>, T>> dataResult = this.first.decode(dynamicOps, object).map((pair) -> pair.mapFirst(Either::left));
             DataResult<Pair<Either<F, S>, T>> dataResult2 = this.second.decode(dynamicOps, object).map((pair) -> pair.mapFirst(Either::right));
@@ -608,13 +583,5 @@ public class ExtraCodecs {
         public String toString() {
             return "XorCodec[" + this.first + ", " + this.second + "]";
         }
-
-        public Codec<F> first() {
-            return this.first;
-        }
-
-        public Codec<S> second() {
-            return this.second;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/InclusiveRange.java b/src/main/java/net/minecraft/util/InclusiveRange.java
index 006b42c1accf362fb042da02191fe5d85d75f713..5a6b0fa41d046ddb572751187700f22796f24963 100644
--- a/src/main/java/net/minecraft/util/InclusiveRange.java
+++ b/src/main/java/net/minecraft/util/InclusiveRange.java
@@ -3,13 +3,11 @@ package net.minecraft.util;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
 
-public record InclusiveRange<T extends Comparable<T>>(T b, T c) {
-    private final T minInclusive;
-    private final T maxInclusive;
+public record InclusiveRange<T extends Comparable<T>>(T minInclusive, T maxInclusive) {
     public static final Codec<InclusiveRange<Integer>> INT = codec(Codec.INT);
 
     public InclusiveRange {
-        if (comparable.compareTo(comparable2) > 0) {
+        if (minInclusive.compareTo(maxInclusive) > 0) {
             throw new IllegalArgumentException("min_inclusive must be less than or equal to max_inclusive");
         }
     }
@@ -47,12 +45,4 @@ public record InclusiveRange<T extends Comparable<T>>(T b, T c) {
     public String toString() {
         return "[" + this.minInclusive + ", " + this.maxInclusive + "]";
     }
-
-    public T minInclusive() {
-        return this.minInclusive;
-    }
-
-    public T maxInclusive() {
-        return this.maxInclusive;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/KeyDispatchDataCodec.java b/src/main/java/net/minecraft/util/KeyDispatchDataCodec.java
index e9a410f2f7c63ccdc8be85f9a8fdcaaa5ab89198..a2ca0a2f94414a97343c84e802c0f136042df78b 100644
--- a/src/main/java/net/minecraft/util/KeyDispatchDataCodec.java
+++ b/src/main/java/net/minecraft/util/KeyDispatchDataCodec.java
@@ -3,9 +3,7 @@ package net.minecraft.util;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
 
-public record KeyDispatchDataCodec<A>(Codec<A> a) {
-    private final Codec<A> codec;
-
+public record KeyDispatchDataCodec<A>(Codec<A> codec) {
     public static <A> KeyDispatchDataCodec<A> of(Codec<A> codec) {
         return new KeyDispatchDataCodec<>(codec);
     }
@@ -13,8 +11,4 @@ public record KeyDispatchDataCodec<A>(Codec<A> a) {
     public static <A> KeyDispatchDataCodec<A> of(MapCodec<A> mapCodec) {
         return new KeyDispatchDataCodec<>(mapCodec.codec());
     }
-
-    public Codec<A> codec() {
-        return this.codec;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java b/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
index e3b27a2bc10f1127203ff5874eed5582dc2459ac..69767559a40cee9bd01131d5a041e2d08eb52568 100644
--- a/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
+++ b/src/main/java/net/minecraft/util/LowerCaseEnumTypeAdapterFactory.java
@@ -16,7 +16,7 @@ import javax.annotation.Nullable;
 public class LowerCaseEnumTypeAdapterFactory implements TypeAdapterFactory {
     @Nullable
     public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
-        Class<T> clazz = typeToken.getRawType();
+        Class<T> clazz = (Class<T>) typeToken.getRawType();
         if (!clazz.isEnum()) {
             return null;
         } else {
diff --git a/src/main/java/net/minecraft/util/ModCheck.java b/src/main/java/net/minecraft/util/ModCheck.java
index a9ad5a7797cfcc95f4ccead58755fbcfe9e27e26..3cb67b682ca1ae2232c1a3403efcfb931c1e3720 100644
--- a/src/main/java/net/minecraft/util/ModCheck.java
+++ b/src/main/java/net/minecraft/util/ModCheck.java
@@ -3,10 +3,7 @@ package net.minecraft.util;
 import java.util.function.Supplier;
 import org.apache.commons.lang3.ObjectUtils;
 
-public record ModCheck(ModCheck.Confidence a, String b) {
-    private final ModCheck.Confidence confidence;
-    private final String description;
-
+public record ModCheck(ModCheck.Confidence confidence, String description) {
     public static ModCheck identify(String s, Supplier<String> supplier, String s2, Class<?> clazz) {
         String s3 = (String)supplier.get();
         if (!s.equals(s3)) {
@@ -28,14 +25,6 @@ public record ModCheck(ModCheck.Confidence a, String b) {
         return this.confidence.description + " " + this.description;
     }
 
-    public ModCheck.Confidence confidence() {
-        return this.confidence;
-    }
-
-    public String description() {
-        return this.description;
-    }
-
     public static enum Confidence {
         PROBABLY_NOT("Probably not.", false),
         VERY_LIKELY("Very likely;", true),
diff --git a/src/main/java/net/minecraft/util/PngInfo.java b/src/main/java/net/minecraft/util/PngInfo.java
index 5e85b23b004912468b815b219fc87fdf49e85834..ec38bbc9af085f7c21cf0f5284b3936f1df14205 100644
--- a/src/main/java/net/minecraft/util/PngInfo.java
+++ b/src/main/java/net/minecraft/util/PngInfo.java
@@ -5,9 +5,7 @@ import java.io.DataInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 
-public record PngInfo(int a, int b) {
-    private final int width;
-    private final int height;
+public record PngInfo(int width, int height) {
     private static final long PNG_HEADER = -8552249625308161526L;
     private static final int IHDR_TYPE = 1229472850;
     private static final int IHDR_SIZE = 13;
@@ -30,12 +28,4 @@ public record PngInfo(int a, int b) {
     public static PngInfo fromBytes(byte[] bytes) throws IOException {
         return fromStream(new ByteArrayInputStream(bytes));
     }
-
-    public int width() {
-        return this.width;
-    }
-
-    public int height() {
-        return this.height;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/StringRepresentable.java b/src/main/java/net/minecraft/util/StringRepresentable.java
index f38104f98c8fc8d2883482efefd9346de27e9287..feda8c4ac1ccfcca5162e45ddc7d1a34ae44c559 100644
--- a/src/main/java/net/minecraft/util/StringRepresentable.java
+++ b/src/main/java/net/minecraft/util/StringRepresentable.java
@@ -24,10 +24,10 @@ public interface StringRepresentable {
     }
 
     static <E extends Enum<E> & StringRepresentable> StringRepresentable.EnumCodec<E> fromEnumWithMapping(Supplier<E[]> supplier, Function<String, String> function) {
-        E[] enums = (Enum[])supplier.get();
+        E[] enums = supplier.get();
         if (enums.length > 16) {
             Map<String, E> map = Arrays.stream(enums).collect(Collectors.toMap((enum_) -> (String)function.apply(((StringRepresentable)enum_).getSerializedName()), (enum_) -> enum_));
-            return new StringRepresentable.EnumCodec<>(enums, (s) -> s == null ? null : (Enum)map.get(s));
+            return new StringRepresentable.EnumCodec<>(enums, (s) -> s == null ? null : map.get(s));
         } else {
             return new StringRepresentable.EnumCodec<>(enums, (s) -> {
                 for(E enum_ : enums) {
diff --git a/src/main/java/net/minecraft/util/datafix/DataFixTypes.java b/src/main/java/net/minecraft/util/datafix/DataFixTypes.java
index 2075b6aae02a5ea872894186ceb6f33114e8923f..3908ae50e03edddfdb26b18f6a6522a5d81f2498 100644
--- a/src/main/java/net/minecraft/util/datafix/DataFixTypes.java
+++ b/src/main/java/net/minecraft/util/datafix/DataFixTypes.java
@@ -52,9 +52,9 @@ public enum DataFixTypes {
             }
 
             public <T> DataResult<Pair<A, T>> decode(DynamicOps<T> dynamicOps, T object) {
-                int i = dynamicOps.get(object, "DataVersion").flatMap(dynamicOps::getNumberValue).map(Number::intValue).result().orElse(i);
+                int ix = dynamicOps.get(object, "DataVersion").flatMap(dynamicOps::getNumberValue).map(Number::intValue).result().orElse(i);
                 Dynamic<T> dynamic = new Dynamic(dynamicOps, dynamicOps.remove(object, "DataVersion"));
-                Dynamic<T> dynamic2 = DataFixTypes.this.updateToCurrentVersion(dataFixer, dynamic, i);
+                Dynamic<T> dynamic2 = DataFixTypes.this.updateToCurrentVersion(dataFixer, dynamic, ix);
                 return codec.decode(dynamic2);
             }
         };
@@ -79,4 +79,4 @@ public enum DataFixTypes {
     static {
         TYPES_FOR_LEVEL_LIST = Set.of(LEVEL.type);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/datafix/DataFixers.java b/src/main/java/net/minecraft/util/datafix/DataFixers.java
index 8d327885583d085f77a2e30489f15f4fcd4ffdbc..27aaab731c78585647236534f24ed697713608d8 100644
--- a/src/main/java/net/minecraft/util/datafix/DataFixers.java
+++ b/src/main/java/net/minecraft/util/datafix/DataFixers.java
@@ -626,17 +626,17 @@ public class DataFixers {
         dataFixerBuilder.addFixer(new AddNewChoices(schema130, "Added Glow Squid", References.ENTITY));
         dataFixerBuilder.addFixer(new AddNewChoices(schema130, "Added Glow Item Frame", References.ENTITY));
         Schema schema131 = dataFixerBuilder.addSchema(2690, SAME_NAMESPACED);
-        ImmutableMap<String, String> immutableMap = ImmutableMap.builder().put("minecraft:weathered_copper_block", "minecraft:oxidized_copper_block").put("minecraft:semi_weathered_copper_block", "minecraft:weathered_copper_block").put("minecraft:lightly_weathered_copper_block", "minecraft:exposed_copper_block").put("minecraft:weathered_cut_copper", "minecraft:oxidized_cut_copper").put("minecraft:semi_weathered_cut_copper", "minecraft:weathered_cut_copper").put("minecraft:lightly_weathered_cut_copper", "minecraft:exposed_cut_copper").put("minecraft:weathered_cut_copper_stairs", "minecraft:oxidized_cut_copper_stairs").put("minecraft:semi_weathered_cut_copper_stairs", "minecraft:weathered_cut_copper_stairs").put("minecraft:lightly_weathered_cut_copper_stairs", "minecraft:exposed_cut_copper_stairs").put("minecraft:weathered_cut_copper_slab", "minecraft:oxidized_cut_copper_slab").put("minecraft:semi_weathered_cut_copper_slab", "minecraft:weathered_cut_copper_slab").put("minecraft:lightly_weathered_cut_copper_slab", "minecraft:exposed_cut_copper_slab").put("minecraft:waxed_semi_weathered_copper", "minecraft:waxed_weathered_copper").put("minecraft:waxed_lightly_weathered_copper", "minecraft:waxed_exposed_copper").put("minecraft:waxed_semi_weathered_cut_copper", "minecraft:waxed_weathered_cut_copper").put("minecraft:waxed_lightly_weathered_cut_copper", "minecraft:waxed_exposed_cut_copper").put("minecraft:waxed_semi_weathered_cut_copper_stairs", "minecraft:waxed_weathered_cut_copper_stairs").put("minecraft:waxed_lightly_weathered_cut_copper_stairs", "minecraft:waxed_exposed_cut_copper_stairs").put("minecraft:waxed_semi_weathered_cut_copper_slab", "minecraft:waxed_weathered_cut_copper_slab").put("minecraft:waxed_lightly_weathered_cut_copper_slab", "minecraft:waxed_exposed_cut_copper_slab").build();
+        ImmutableMap<String, String> immutableMap = ImmutableMap.<String, String>builder().put("minecraft:weathered_copper_block", "minecraft:oxidized_copper_block").put("minecraft:semi_weathered_copper_block", "minecraft:weathered_copper_block").put("minecraft:lightly_weathered_copper_block", "minecraft:exposed_copper_block").put("minecraft:weathered_cut_copper", "minecraft:oxidized_cut_copper").put("minecraft:semi_weathered_cut_copper", "minecraft:weathered_cut_copper").put("minecraft:lightly_weathered_cut_copper", "minecraft:exposed_cut_copper").put("minecraft:weathered_cut_copper_stairs", "minecraft:oxidized_cut_copper_stairs").put("minecraft:semi_weathered_cut_copper_stairs", "minecraft:weathered_cut_copper_stairs").put("minecraft:lightly_weathered_cut_copper_stairs", "minecraft:exposed_cut_copper_stairs").put("minecraft:weathered_cut_copper_slab", "minecraft:oxidized_cut_copper_slab").put("minecraft:semi_weathered_cut_copper_slab", "minecraft:weathered_cut_copper_slab").put("minecraft:lightly_weathered_cut_copper_slab", "minecraft:exposed_cut_copper_slab").put("minecraft:waxed_semi_weathered_copper", "minecraft:waxed_weathered_copper").put("minecraft:waxed_lightly_weathered_copper", "minecraft:waxed_exposed_copper").put("minecraft:waxed_semi_weathered_cut_copper", "minecraft:waxed_weathered_cut_copper").put("minecraft:waxed_lightly_weathered_cut_copper", "minecraft:waxed_exposed_cut_copper").put("minecraft:waxed_semi_weathered_cut_copper_stairs", "minecraft:waxed_weathered_cut_copper_stairs").put("minecraft:waxed_lightly_weathered_cut_copper_stairs", "minecraft:waxed_exposed_cut_copper_stairs").put("minecraft:waxed_semi_weathered_cut_copper_slab", "minecraft:waxed_weathered_cut_copper_slab").put("minecraft:waxed_lightly_weathered_cut_copper_slab", "minecraft:waxed_exposed_cut_copper_slab").build();
         dataFixerBuilder.addFixer(ItemRenameFix.create(schema131, "Renamed copper block items to new oxidized terms", createRenamer(immutableMap)));
         dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema131, "Renamed copper blocks to new oxidized terms", createRenamer(immutableMap)));
         Schema schema132 = dataFixerBuilder.addSchema(2691, SAME_NAMESPACED);
-        ImmutableMap<String, String> immutableMap2 = ImmutableMap.builder().put("minecraft:waxed_copper", "minecraft:waxed_copper_block").put("minecraft:oxidized_copper_block", "minecraft:oxidized_copper").put("minecraft:weathered_copper_block", "minecraft:weathered_copper").put("minecraft:exposed_copper_block", "minecraft:exposed_copper").build();
+        ImmutableMap<String, String> immutableMap2 = ImmutableMap.<String, String>builder().put("minecraft:waxed_copper", "minecraft:waxed_copper_block").put("minecraft:oxidized_copper_block", "minecraft:oxidized_copper").put("minecraft:weathered_copper_block", "minecraft:weathered_copper").put("minecraft:exposed_copper_block", "minecraft:exposed_copper").build();
         dataFixerBuilder.addFixer(ItemRenameFix.create(schema132, "Rename copper item suffixes", createRenamer(immutableMap2)));
         dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema132, "Rename copper blocks suffixes", createRenamer(immutableMap2)));
         Schema schema133 = dataFixerBuilder.addSchema(2693, SAME_NAMESPACED);
         dataFixerBuilder.addFixer(new AddFlagIfNotPresentFix(schema133, References.WORLD_GEN_SETTINGS, "has_increased_height_already", false));
         Schema schema134 = dataFixerBuilder.addSchema(2696, SAME_NAMESPACED);
-        ImmutableMap<String, String> immutableMap3 = ImmutableMap.builder().put("minecraft:grimstone", "minecraft:deepslate").put("minecraft:grimstone_slab", "minecraft:cobbled_deepslate_slab").put("minecraft:grimstone_stairs", "minecraft:cobbled_deepslate_stairs").put("minecraft:grimstone_wall", "minecraft:cobbled_deepslate_wall").put("minecraft:polished_grimstone", "minecraft:polished_deepslate").put("minecraft:polished_grimstone_slab", "minecraft:polished_deepslate_slab").put("minecraft:polished_grimstone_stairs", "minecraft:polished_deepslate_stairs").put("minecraft:polished_grimstone_wall", "minecraft:polished_deepslate_wall").put("minecraft:grimstone_tiles", "minecraft:deepslate_tiles").put("minecraft:grimstone_tile_slab", "minecraft:deepslate_tile_slab").put("minecraft:grimstone_tile_stairs", "minecraft:deepslate_tile_stairs").put("minecraft:grimstone_tile_wall", "minecraft:deepslate_tile_wall").put("minecraft:grimstone_bricks", "minecraft:deepslate_bricks").put("minecraft:grimstone_brick_slab", "minecraft:deepslate_brick_slab").put("minecraft:grimstone_brick_stairs", "minecraft:deepslate_brick_stairs").put("minecraft:grimstone_brick_wall", "minecraft:deepslate_brick_wall").put("minecraft:chiseled_grimstone", "minecraft:chiseled_deepslate").build();
+        ImmutableMap<String, String> immutableMap3 = ImmutableMap.<String, String>builder().put("minecraft:grimstone", "minecraft:deepslate").put("minecraft:grimstone_slab", "minecraft:cobbled_deepslate_slab").put("minecraft:grimstone_stairs", "minecraft:cobbled_deepslate_stairs").put("minecraft:grimstone_wall", "minecraft:cobbled_deepslate_wall").put("minecraft:polished_grimstone", "minecraft:polished_deepslate").put("minecraft:polished_grimstone_slab", "minecraft:polished_deepslate_slab").put("minecraft:polished_grimstone_stairs", "minecraft:polished_deepslate_stairs").put("minecraft:polished_grimstone_wall", "minecraft:polished_deepslate_wall").put("minecraft:grimstone_tiles", "minecraft:deepslate_tiles").put("minecraft:grimstone_tile_slab", "minecraft:deepslate_tile_slab").put("minecraft:grimstone_tile_stairs", "minecraft:deepslate_tile_stairs").put("minecraft:grimstone_tile_wall", "minecraft:deepslate_tile_wall").put("minecraft:grimstone_bricks", "minecraft:deepslate_bricks").put("minecraft:grimstone_brick_slab", "minecraft:deepslate_brick_slab").put("minecraft:grimstone_brick_stairs", "minecraft:deepslate_brick_stairs").put("minecraft:grimstone_brick_wall", "minecraft:deepslate_brick_wall").put("minecraft:chiseled_grimstone", "minecraft:chiseled_deepslate").build();
         dataFixerBuilder.addFixer(ItemRenameFix.create(schema134, "Renamed grimstone block items to deepslate", createRenamer(immutableMap3)));
         dataFixerBuilder.addFixer(BlockRenameFixWithJigsaw.create(schema134, "Renamed grimstone blocks to deepslate", createRenamer(immutableMap3)));
         Schema schema135 = dataFixerBuilder.addSchema(2700, SAME_NAMESPACED);
@@ -696,9 +696,9 @@ public class DataFixers {
         Schema schema159 = dataFixerBuilder.addSchema(3083, V3083::new);
         dataFixerBuilder.addFixer(new AddNewChoices(schema159, "Added Allay", References.ENTITY));
         Schema schema160 = dataFixerBuilder.addSchema(3084, SAME_NAMESPACED);
-        dataFixerBuilder.addFixer(new NamespacedTypeRenameFix(schema160, "game_event_renames_3084", References.GAME_EVENT_NAME, createRenamer(ImmutableMap.builder().put("minecraft:block_press", "minecraft:block_activate").put("minecraft:block_switch", "minecraft:block_activate").put("minecraft:block_unpress", "minecraft:block_deactivate").put("minecraft:block_unswitch", "minecraft:block_deactivate").put("minecraft:drinking_finish", "minecraft:drink").put("minecraft:elytra_free_fall", "minecraft:elytra_glide").put("minecraft:entity_damaged", "minecraft:entity_damage").put("minecraft:entity_dying", "minecraft:entity_die").put("minecraft:entity_killed", "minecraft:entity_die").put("minecraft:mob_interact", "minecraft:entity_interact").put("minecraft:ravager_roar", "minecraft:entity_roar").put("minecraft:ring_bell", "minecraft:block_change").put("minecraft:shulker_close", "minecraft:container_close").put("minecraft:shulker_open", "minecraft:container_open").put("minecraft:wolf_shaking", "minecraft:entity_shake").build())));
+        dataFixerBuilder.addFixer(new NamespacedTypeRenameFix(schema160, "game_event_renames_3084", References.GAME_EVENT_NAME, createRenamer(ImmutableMap.<String, String>builder().put("minecraft:block_press", "minecraft:block_activate").put("minecraft:block_switch", "minecraft:block_activate").put("minecraft:block_unpress", "minecraft:block_deactivate").put("minecraft:block_unswitch", "minecraft:block_deactivate").put("minecraft:drinking_finish", "minecraft:drink").put("minecraft:elytra_free_fall", "minecraft:elytra_glide").put("minecraft:entity_damaged", "minecraft:entity_damage").put("minecraft:entity_dying", "minecraft:entity_die").put("minecraft:entity_killed", "minecraft:entity_die").put("minecraft:mob_interact", "minecraft:entity_interact").put("minecraft:ravager_roar", "minecraft:entity_roar").put("minecraft:ring_bell", "minecraft:block_change").put("minecraft:shulker_close", "minecraft:container_close").put("minecraft:shulker_open", "minecraft:container_open").put("minecraft:wolf_shaking", "minecraft:entity_shake").build())));
         Schema schema161 = dataFixerBuilder.addSchema(3086, SAME_NAMESPACED);
-        dataFixerBuilder.addFixer(new EntityVariantFix(schema161, "Change cat variant type", References.ENTITY, "minecraft:cat", "CatType", Util.make(new Int2ObjectOpenHashMap(), (int2ObjectOpenHashMap) -> {
+        dataFixerBuilder.addFixer(new EntityVariantFix(schema161, "Change cat variant type", References.ENTITY, "minecraft:cat", "CatType", Util.make(new Int2ObjectOpenHashMap<String>(), (int2ObjectOpenHashMap) -> {
             int2ObjectOpenHashMap.defaultReturnValue("minecraft:tabby");
             int2ObjectOpenHashMap.put(0, "minecraft:tabby");
             int2ObjectOpenHashMap.put(1, "minecraft:black");
@@ -712,10 +712,10 @@ public class DataFixers {
             int2ObjectOpenHashMap.put(9, "minecraft:jellie");
             int2ObjectOpenHashMap.put(10, "minecraft:all_black");
         })::get));
-        ImmutableMap<String, String> immutableMap4 = ImmutableMap.builder().put("textures/entity/cat/tabby.png", "minecraft:tabby").put("textures/entity/cat/black.png", "minecraft:black").put("textures/entity/cat/red.png", "minecraft:red").put("textures/entity/cat/siamese.png", "minecraft:siamese").put("textures/entity/cat/british_shorthair.png", "minecraft:british").put("textures/entity/cat/calico.png", "minecraft:calico").put("textures/entity/cat/persian.png", "minecraft:persian").put("textures/entity/cat/ragdoll.png", "minecraft:ragdoll").put("textures/entity/cat/white.png", "minecraft:white").put("textures/entity/cat/jellie.png", "minecraft:jellie").put("textures/entity/cat/all_black.png", "minecraft:all_black").build();
+        ImmutableMap<String, String> immutableMap4 = ImmutableMap.<String, String>builder().put("textures/entity/cat/tabby.png", "minecraft:tabby").put("textures/entity/cat/black.png", "minecraft:black").put("textures/entity/cat/red.png", "minecraft:red").put("textures/entity/cat/siamese.png", "minecraft:siamese").put("textures/entity/cat/british_shorthair.png", "minecraft:british").put("textures/entity/cat/calico.png", "minecraft:calico").put("textures/entity/cat/persian.png", "minecraft:persian").put("textures/entity/cat/ragdoll.png", "minecraft:ragdoll").put("textures/entity/cat/white.png", "minecraft:white").put("textures/entity/cat/jellie.png", "minecraft:jellie").put("textures/entity/cat/all_black.png", "minecraft:all_black").build();
         dataFixerBuilder.addFixer(new CriteriaRenameFix(schema161, "Migrate cat variant advancement", "minecraft:husbandry/complete_catalogue", (s) -> (String)immutableMap4.getOrDefault(s, s)));
         Schema schema162 = dataFixerBuilder.addSchema(3087, SAME_NAMESPACED);
-        dataFixerBuilder.addFixer(new EntityVariantFix(schema162, "Change frog variant type", References.ENTITY, "minecraft:frog", "Variant", Util.make(new Int2ObjectOpenHashMap(), (int2ObjectOpenHashMap) -> {
+        dataFixerBuilder.addFixer(new EntityVariantFix(schema162, "Change frog variant type", References.ENTITY, "minecraft:frog", "Variant", Util.make(new Int2ObjectOpenHashMap<String>(), (int2ObjectOpenHashMap) -> {
             int2ObjectOpenHashMap.put(0, "minecraft:temperate");
             int2ObjectOpenHashMap.put(1, "minecraft:warm");
             int2ObjectOpenHashMap.put(2, "minecraft:cold");
@@ -800,4 +800,4 @@ public class DataFixers {
     private static UnaryOperator<String> createRenamer(String s, String s2) {
         return (s3) -> Objects.equals(s3, s) ? s2 : s3;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
index 9bb677aeb69b03cf6d397a0a8969cbbeec814817..3c27cf8ee3836c68dc5a68c6df6722cddd5e6a72 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AbstractUUIDFix.java
@@ -42,10 +42,10 @@ public abstract class AbstractUUIDFix extends DataFix {
 
     protected static Optional<Dynamic<?>> createUUIDFromString(Dynamic<?> dynamic, String s) {
         return dynamic.get(s).result().flatMap((dynamic2) -> {
-            String s = dynamic2.asString((String)null);
-            if (s != null) {
+            String str = dynamic2.asString((String)null);
+            if (str != null) {
                 try {
-                    UUID uuid = UUID.fromString(s);
+                    UUID uuid = UUID.fromString(str);
                     return createUUIDTag(dynamic, uuid.getMostSignificantBits(), uuid.getLeastSignificantBits());
                 } catch (IllegalArgumentException var4) {
                 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java b/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
index cc35b58c63e3866420152574273dc3fefbdeefff..3ca19e9922242d0c06725a0de8c344fb986289ad 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AddNewChoices.java
@@ -28,10 +28,10 @@ public class AddNewChoices extends DataFix {
             throw new IllegalStateException("Could not inject: key type is not the same");
         } else {
             return this.fixTypeEverywhere(s, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
-                    if (!taggedChoiceType2.hasType(pair.getFirst())) {
+                    if (!((TaggedChoiceType) taggedChoiceType2).hasType(pair.getFirst())) {
                         throw new IllegalArgumentException(String.format(Locale.ROOT, "Unknown type %s in %s ", pair.getFirst(), this.type));
                     } else {
-                        return pair;
+                        return (com.mojang.datafixers.util.Pair) pair;
                     }
                 });
         }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
index 168660cdeb3d1bff72d2ff36d3a9f09ec2839400..e583ad6e2a14e268a5f9b14ac757145033891872 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AdvancementsFix.java
@@ -5,7 +5,7 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class AdvancementsFix extends AdvancementsRenameFix {
-    private static final Map<String, String> RENAMES = ImmutableMap.builder().put("minecraft:recipes/brewing/speckled_melon", "minecraft:recipes/brewing/glistering_melon_slice").put("minecraft:recipes/building_blocks/black_stained_hardened_clay", "minecraft:recipes/building_blocks/black_terracotta").put("minecraft:recipes/building_blocks/blue_stained_hardened_clay", "minecraft:recipes/building_blocks/blue_terracotta").put("minecraft:recipes/building_blocks/brown_stained_hardened_clay", "minecraft:recipes/building_blocks/brown_terracotta").put("minecraft:recipes/building_blocks/cyan_stained_hardened_clay", "minecraft:recipes/building_blocks/cyan_terracotta").put("minecraft:recipes/building_blocks/gray_stained_hardened_clay", "minecraft:recipes/building_blocks/gray_terracotta").put("minecraft:recipes/building_blocks/green_stained_hardened_clay", "minecraft:recipes/building_blocks/green_terracotta").put("minecraft:recipes/building_blocks/light_blue_stained_hardened_clay", "minecraft:recipes/building_blocks/light_blue_terracotta").put("minecraft:recipes/building_blocks/light_gray_stained_hardened_clay", "minecraft:recipes/building_blocks/light_gray_terracotta").put("minecraft:recipes/building_blocks/lime_stained_hardened_clay", "minecraft:recipes/building_blocks/lime_terracotta").put("minecraft:recipes/building_blocks/magenta_stained_hardened_clay", "minecraft:recipes/building_blocks/magenta_terracotta").put("minecraft:recipes/building_blocks/orange_stained_hardened_clay", "minecraft:recipes/building_blocks/orange_terracotta").put("minecraft:recipes/building_blocks/pink_stained_hardened_clay", "minecraft:recipes/building_blocks/pink_terracotta").put("minecraft:recipes/building_blocks/purple_stained_hardened_clay", "minecraft:recipes/building_blocks/purple_terracotta").put("minecraft:recipes/building_blocks/red_stained_hardened_clay", "minecraft:recipes/building_blocks/red_terracotta").put("minecraft:recipes/building_blocks/white_stained_hardened_clay", "minecraft:recipes/building_blocks/white_terracotta").put("minecraft:recipes/building_blocks/yellow_stained_hardened_clay", "minecraft:recipes/building_blocks/yellow_terracotta").put("minecraft:recipes/building_blocks/acacia_wooden_slab", "minecraft:recipes/building_blocks/acacia_slab").put("minecraft:recipes/building_blocks/birch_wooden_slab", "minecraft:recipes/building_blocks/birch_slab").put("minecraft:recipes/building_blocks/dark_oak_wooden_slab", "minecraft:recipes/building_blocks/dark_oak_slab").put("minecraft:recipes/building_blocks/jungle_wooden_slab", "minecraft:recipes/building_blocks/jungle_slab").put("minecraft:recipes/building_blocks/oak_wooden_slab", "minecraft:recipes/building_blocks/oak_slab").put("minecraft:recipes/building_blocks/spruce_wooden_slab", "minecraft:recipes/building_blocks/spruce_slab").put("minecraft:recipes/building_blocks/brick_block", "minecraft:recipes/building_blocks/bricks").put("minecraft:recipes/building_blocks/chiseled_stonebrick", "minecraft:recipes/building_blocks/chiseled_stone_bricks").put("minecraft:recipes/building_blocks/end_bricks", "minecraft:recipes/building_blocks/end_stone_bricks").put("minecraft:recipes/building_blocks/lit_pumpkin", "minecraft:recipes/building_blocks/jack_o_lantern").put("minecraft:recipes/building_blocks/magma", "minecraft:recipes/building_blocks/magma_block").put("minecraft:recipes/building_blocks/melon_block", "minecraft:recipes/building_blocks/melon").put("minecraft:recipes/building_blocks/mossy_stonebrick", "minecraft:recipes/building_blocks/mossy_stone_bricks").put("minecraft:recipes/building_blocks/nether_brick", "minecraft:recipes/building_blocks/nether_bricks").put("minecraft:recipes/building_blocks/pillar_quartz_block", "minecraft:recipes/building_blocks/quartz_pillar").put("minecraft:recipes/building_blocks/red_nether_brick", "minecraft:recipes/building_blocks/red_nether_bricks").put("minecraft:recipes/building_blocks/snow", "minecraft:recipes/building_blocks/snow_block").put("minecraft:recipes/building_blocks/smooth_red_sandstone", "minecraft:recipes/building_blocks/cut_red_sandstone").put("minecraft:recipes/building_blocks/smooth_sandstone", "minecraft:recipes/building_blocks/cut_sandstone").put("minecraft:recipes/building_blocks/stonebrick", "minecraft:recipes/building_blocks/stone_bricks").put("minecraft:recipes/building_blocks/stone_stairs", "minecraft:recipes/building_blocks/cobblestone_stairs").put("minecraft:recipes/building_blocks/string_to_wool", "minecraft:recipes/building_blocks/white_wool_from_string").put("minecraft:recipes/decorations/fence", "minecraft:recipes/decorations/oak_fence").put("minecraft:recipes/decorations/purple_shulker_box", "minecraft:recipes/decorations/shulker_box").put("minecraft:recipes/decorations/slime", "minecraft:recipes/decorations/slime_block").put("minecraft:recipes/decorations/snow_layer", "minecraft:recipes/decorations/snow").put("minecraft:recipes/misc/bone_meal_from_block", "minecraft:recipes/misc/bone_meal_from_bone_block").put("minecraft:recipes/misc/bone_meal_from_bone", "minecraft:recipes/misc/bone_meal").put("minecraft:recipes/misc/gold_ingot_from_block", "minecraft:recipes/misc/gold_ingot_from_gold_block").put("minecraft:recipes/misc/iron_ingot_from_block", "minecraft:recipes/misc/iron_ingot_from_iron_block").put("minecraft:recipes/redstone/fence_gate", "minecraft:recipes/redstone/oak_fence_gate").put("minecraft:recipes/redstone/noteblock", "minecraft:recipes/redstone/note_block").put("minecraft:recipes/redstone/trapdoor", "minecraft:recipes/redstone/oak_trapdoor").put("minecraft:recipes/redstone/wooden_button", "minecraft:recipes/redstone/oak_button").put("minecraft:recipes/redstone/wooden_door", "minecraft:recipes/redstone/oak_door").put("minecraft:recipes/redstone/wooden_pressure_plate", "minecraft:recipes/redstone/oak_pressure_plate").put("minecraft:recipes/transportation/boat", "minecraft:recipes/transportation/oak_boat").put("minecraft:recipes/transportation/golden_rail", "minecraft:recipes/transportation/powered_rail").build();
+    private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("minecraft:recipes/brewing/speckled_melon", "minecraft:recipes/brewing/glistering_melon_slice").put("minecraft:recipes/building_blocks/black_stained_hardened_clay", "minecraft:recipes/building_blocks/black_terracotta").put("minecraft:recipes/building_blocks/blue_stained_hardened_clay", "minecraft:recipes/building_blocks/blue_terracotta").put("minecraft:recipes/building_blocks/brown_stained_hardened_clay", "minecraft:recipes/building_blocks/brown_terracotta").put("minecraft:recipes/building_blocks/cyan_stained_hardened_clay", "minecraft:recipes/building_blocks/cyan_terracotta").put("minecraft:recipes/building_blocks/gray_stained_hardened_clay", "minecraft:recipes/building_blocks/gray_terracotta").put("minecraft:recipes/building_blocks/green_stained_hardened_clay", "minecraft:recipes/building_blocks/green_terracotta").put("minecraft:recipes/building_blocks/light_blue_stained_hardened_clay", "minecraft:recipes/building_blocks/light_blue_terracotta").put("minecraft:recipes/building_blocks/light_gray_stained_hardened_clay", "minecraft:recipes/building_blocks/light_gray_terracotta").put("minecraft:recipes/building_blocks/lime_stained_hardened_clay", "minecraft:recipes/building_blocks/lime_terracotta").put("minecraft:recipes/building_blocks/magenta_stained_hardened_clay", "minecraft:recipes/building_blocks/magenta_terracotta").put("minecraft:recipes/building_blocks/orange_stained_hardened_clay", "minecraft:recipes/building_blocks/orange_terracotta").put("minecraft:recipes/building_blocks/pink_stained_hardened_clay", "minecraft:recipes/building_blocks/pink_terracotta").put("minecraft:recipes/building_blocks/purple_stained_hardened_clay", "minecraft:recipes/building_blocks/purple_terracotta").put("minecraft:recipes/building_blocks/red_stained_hardened_clay", "minecraft:recipes/building_blocks/red_terracotta").put("minecraft:recipes/building_blocks/white_stained_hardened_clay", "minecraft:recipes/building_blocks/white_terracotta").put("minecraft:recipes/building_blocks/yellow_stained_hardened_clay", "minecraft:recipes/building_blocks/yellow_terracotta").put("minecraft:recipes/building_blocks/acacia_wooden_slab", "minecraft:recipes/building_blocks/acacia_slab").put("minecraft:recipes/building_blocks/birch_wooden_slab", "minecraft:recipes/building_blocks/birch_slab").put("minecraft:recipes/building_blocks/dark_oak_wooden_slab", "minecraft:recipes/building_blocks/dark_oak_slab").put("minecraft:recipes/building_blocks/jungle_wooden_slab", "minecraft:recipes/building_blocks/jungle_slab").put("minecraft:recipes/building_blocks/oak_wooden_slab", "minecraft:recipes/building_blocks/oak_slab").put("minecraft:recipes/building_blocks/spruce_wooden_slab", "minecraft:recipes/building_blocks/spruce_slab").put("minecraft:recipes/building_blocks/brick_block", "minecraft:recipes/building_blocks/bricks").put("minecraft:recipes/building_blocks/chiseled_stonebrick", "minecraft:recipes/building_blocks/chiseled_stone_bricks").put("minecraft:recipes/building_blocks/end_bricks", "minecraft:recipes/building_blocks/end_stone_bricks").put("minecraft:recipes/building_blocks/lit_pumpkin", "minecraft:recipes/building_blocks/jack_o_lantern").put("minecraft:recipes/building_blocks/magma", "minecraft:recipes/building_blocks/magma_block").put("minecraft:recipes/building_blocks/melon_block", "minecraft:recipes/building_blocks/melon").put("minecraft:recipes/building_blocks/mossy_stonebrick", "minecraft:recipes/building_blocks/mossy_stone_bricks").put("minecraft:recipes/building_blocks/nether_brick", "minecraft:recipes/building_blocks/nether_bricks").put("minecraft:recipes/building_blocks/pillar_quartz_block", "minecraft:recipes/building_blocks/quartz_pillar").put("minecraft:recipes/building_blocks/red_nether_brick", "minecraft:recipes/building_blocks/red_nether_bricks").put("minecraft:recipes/building_blocks/snow", "minecraft:recipes/building_blocks/snow_block").put("minecraft:recipes/building_blocks/smooth_red_sandstone", "minecraft:recipes/building_blocks/cut_red_sandstone").put("minecraft:recipes/building_blocks/smooth_sandstone", "minecraft:recipes/building_blocks/cut_sandstone").put("minecraft:recipes/building_blocks/stonebrick", "minecraft:recipes/building_blocks/stone_bricks").put("minecraft:recipes/building_blocks/stone_stairs", "minecraft:recipes/building_blocks/cobblestone_stairs").put("minecraft:recipes/building_blocks/string_to_wool", "minecraft:recipes/building_blocks/white_wool_from_string").put("minecraft:recipes/decorations/fence", "minecraft:recipes/decorations/oak_fence").put("minecraft:recipes/decorations/purple_shulker_box", "minecraft:recipes/decorations/shulker_box").put("minecraft:recipes/decorations/slime", "minecraft:recipes/decorations/slime_block").put("minecraft:recipes/decorations/snow_layer", "minecraft:recipes/decorations/snow").put("minecraft:recipes/misc/bone_meal_from_block", "minecraft:recipes/misc/bone_meal_from_bone_block").put("minecraft:recipes/misc/bone_meal_from_bone", "minecraft:recipes/misc/bone_meal").put("minecraft:recipes/misc/gold_ingot_from_block", "minecraft:recipes/misc/gold_ingot_from_gold_block").put("minecraft:recipes/misc/iron_ingot_from_block", "minecraft:recipes/misc/iron_ingot_from_iron_block").put("minecraft:recipes/redstone/fence_gate", "minecraft:recipes/redstone/oak_fence_gate").put("minecraft:recipes/redstone/noteblock", "minecraft:recipes/redstone/note_block").put("minecraft:recipes/redstone/trapdoor", "minecraft:recipes/redstone/oak_trapdoor").put("minecraft:recipes/redstone/wooden_button", "minecraft:recipes/redstone/oak_button").put("minecraft:recipes/redstone/wooden_door", "minecraft:recipes/redstone/oak_door").put("minecraft:recipes/redstone/wooden_pressure_plate", "minecraft:recipes/redstone/oak_pressure_plate").put("minecraft:recipes/transportation/boat", "minecraft:recipes/transportation/oak_boat").put("minecraft:recipes/transportation/golden_rail", "minecraft:recipes/transportation/powered_rail").build();
 
     public AdvancementsFix(Schema schema, boolean flag) {
         super(schema, flag, "AdvancementsFix", (s) -> (String)RENAMES.getOrDefault(s, s));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java b/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
index 84e34e10e7adc02746a439c5e5a0455300e4dc4f..daf42bdafcab9dc6d8f79c5fb1ff35a21bccf8cb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/AttributesRename.java
@@ -13,7 +13,7 @@ import com.mojang.serialization.Dynamic;
 import java.util.Map;
 
 public class AttributesRename extends DataFix {
-    private static final Map<String, String> RENAMES = ImmutableMap.builder().put("generic.maxHealth", "generic.max_health").put("Max Health", "generic.max_health").put("zombie.spawnReinforcements", "zombie.spawn_reinforcements").put("Spawn Reinforcements Chance", "zombie.spawn_reinforcements").put("horse.jumpStrength", "horse.jump_strength").put("Jump Strength", "horse.jump_strength").put("generic.followRange", "generic.follow_range").put("Follow Range", "generic.follow_range").put("generic.knockbackResistance", "generic.knockback_resistance").put("Knockback Resistance", "generic.knockback_resistance").put("generic.movementSpeed", "generic.movement_speed").put("Movement Speed", "generic.movement_speed").put("generic.flyingSpeed", "generic.flying_speed").put("Flying Speed", "generic.flying_speed").put("generic.attackDamage", "generic.attack_damage").put("generic.attackKnockback", "generic.attack_knockback").put("generic.attackSpeed", "generic.attack_speed").put("generic.armorToughness", "generic.armor_toughness").build();
+    private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("generic.maxHealth", "generic.max_health").put("Max Health", "generic.max_health").put("zombie.spawnReinforcements", "zombie.spawn_reinforcements").put("Spawn Reinforcements Chance", "zombie.spawn_reinforcements").put("horse.jumpStrength", "horse.jump_strength").put("Jump Strength", "horse.jump_strength").put("generic.followRange", "generic.follow_range").put("Follow Range", "generic.follow_range").put("generic.knockbackResistance", "generic.knockback_resistance").put("Knockback Resistance", "generic.knockback_resistance").put("generic.movementSpeed", "generic.movement_speed").put("Movement Speed", "generic.movement_speed").put("generic.flyingSpeed", "generic.flying_speed").put("Flying Speed", "generic.flying_speed").put("generic.attackDamage", "generic.attack_damage").put("generic.attackKnockback", "generic.attack_knockback").put("generic.attackSpeed", "generic.attack_speed").put("generic.armorToughness", "generic.armor_toughness").build();
 
     public AttributesRename(Schema schema) {
         super(schema, false);
@@ -30,10 +30,10 @@ public class AttributesRename extends DataFix {
     }
 
     private static Typed<?> fixItemStackTag(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("AttributeModifiers", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> dynamic.update("AttributeName", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("AttributeModifiers", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicIn) -> dynamicIn.update("AttributeName", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
     }
 
     private static Typed<?> fixEntity(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Attributes", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> dynamic.update("Name", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Attributes", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicIn) -> dynamicIn.update("Name", AttributesRename::fixName))).map(dynamicx::createList), dynamicx)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
index 49661f910e93a0c62f54f2716d2de74333a87504..aefa4d5e67d1704802ac2570c1862b4de12b9036 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BiomeFix.java
@@ -4,5 +4,5 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class BiomeFix {
-    public static final Map<String, String> BIOMES = ImmutableMap.builder().put("minecraft:extreme_hills", "minecraft:mountains").put("minecraft:swampland", "minecraft:swamp").put("minecraft:hell", "minecraft:nether_wastes").put("minecraft:sky", "minecraft:the_end").put("minecraft:ice_flats", "minecraft:snowy_tundra").put("minecraft:ice_mountains", "minecraft:snowy_mountains").put("minecraft:mushroom_island", "minecraft:mushroom_fields").put("minecraft:mushroom_island_shore", "minecraft:mushroom_field_shore").put("minecraft:beaches", "minecraft:beach").put("minecraft:forest_hills", "minecraft:wooded_hills").put("minecraft:smaller_extreme_hills", "minecraft:mountain_edge").put("minecraft:stone_beach", "minecraft:stone_shore").put("minecraft:cold_beach", "minecraft:snowy_beach").put("minecraft:roofed_forest", "minecraft:dark_forest").put("minecraft:taiga_cold", "minecraft:snowy_taiga").put("minecraft:taiga_cold_hills", "minecraft:snowy_taiga_hills").put("minecraft:redwood_taiga", "minecraft:giant_tree_taiga").put("minecraft:redwood_taiga_hills", "minecraft:giant_tree_taiga_hills").put("minecraft:extreme_hills_with_trees", "minecraft:wooded_mountains").put("minecraft:savanna_rock", "minecraft:savanna_plateau").put("minecraft:mesa", "minecraft:badlands").put("minecraft:mesa_rock", "minecraft:wooded_badlands_plateau").put("minecraft:mesa_clear_rock", "minecraft:badlands_plateau").put("minecraft:sky_island_low", "minecraft:small_end_islands").put("minecraft:sky_island_medium", "minecraft:end_midlands").put("minecraft:sky_island_high", "minecraft:end_highlands").put("minecraft:sky_island_barren", "minecraft:end_barrens").put("minecraft:void", "minecraft:the_void").put("minecraft:mutated_plains", "minecraft:sunflower_plains").put("minecraft:mutated_desert", "minecraft:desert_lakes").put("minecraft:mutated_extreme_hills", "minecraft:gravelly_mountains").put("minecraft:mutated_forest", "minecraft:flower_forest").put("minecraft:mutated_taiga", "minecraft:taiga_mountains").put("minecraft:mutated_swampland", "minecraft:swamp_hills").put("minecraft:mutated_ice_flats", "minecraft:ice_spikes").put("minecraft:mutated_jungle", "minecraft:modified_jungle").put("minecraft:mutated_jungle_edge", "minecraft:modified_jungle_edge").put("minecraft:mutated_birch_forest", "minecraft:tall_birch_forest").put("minecraft:mutated_birch_forest_hills", "minecraft:tall_birch_hills").put("minecraft:mutated_roofed_forest", "minecraft:dark_forest_hills").put("minecraft:mutated_taiga_cold", "minecraft:snowy_taiga_mountains").put("minecraft:mutated_redwood_taiga", "minecraft:giant_spruce_taiga").put("minecraft:mutated_redwood_taiga_hills", "minecraft:giant_spruce_taiga_hills").put("minecraft:mutated_extreme_hills_with_trees", "minecraft:modified_gravelly_mountains").put("minecraft:mutated_savanna", "minecraft:shattered_savanna").put("minecraft:mutated_savanna_rock", "minecraft:shattered_savanna_plateau").put("minecraft:mutated_mesa", "minecraft:eroded_badlands").put("minecraft:mutated_mesa_rock", "minecraft:modified_wooded_badlands_plateau").put("minecraft:mutated_mesa_clear_rock", "minecraft:modified_badlands_plateau").put("minecraft:warm_deep_ocean", "minecraft:deep_warm_ocean").put("minecraft:lukewarm_deep_ocean", "minecraft:deep_lukewarm_ocean").put("minecraft:cold_deep_ocean", "minecraft:deep_cold_ocean").put("minecraft:frozen_deep_ocean", "minecraft:deep_frozen_ocean").build();
-}
\ No newline at end of file
+    public static final Map<String, String> BIOMES = ImmutableMap.<String, String>builder().put("minecraft:extreme_hills", "minecraft:mountains").put("minecraft:swampland", "minecraft:swamp").put("minecraft:hell", "minecraft:nether_wastes").put("minecraft:sky", "minecraft:the_end").put("minecraft:ice_flats", "minecraft:snowy_tundra").put("minecraft:ice_mountains", "minecraft:snowy_mountains").put("minecraft:mushroom_island", "minecraft:mushroom_fields").put("minecraft:mushroom_island_shore", "minecraft:mushroom_field_shore").put("minecraft:beaches", "minecraft:beach").put("minecraft:forest_hills", "minecraft:wooded_hills").put("minecraft:smaller_extreme_hills", "minecraft:mountain_edge").put("minecraft:stone_beach", "minecraft:stone_shore").put("minecraft:cold_beach", "minecraft:snowy_beach").put("minecraft:roofed_forest", "minecraft:dark_forest").put("minecraft:taiga_cold", "minecraft:snowy_taiga").put("minecraft:taiga_cold_hills", "minecraft:snowy_taiga_hills").put("minecraft:redwood_taiga", "minecraft:giant_tree_taiga").put("minecraft:redwood_taiga_hills", "minecraft:giant_tree_taiga_hills").put("minecraft:extreme_hills_with_trees", "minecraft:wooded_mountains").put("minecraft:savanna_rock", "minecraft:savanna_plateau").put("minecraft:mesa", "minecraft:badlands").put("minecraft:mesa_rock", "minecraft:wooded_badlands_plateau").put("minecraft:mesa_clear_rock", "minecraft:badlands_plateau").put("minecraft:sky_island_low", "minecraft:small_end_islands").put("minecraft:sky_island_medium", "minecraft:end_midlands").put("minecraft:sky_island_high", "minecraft:end_highlands").put("minecraft:sky_island_barren", "minecraft:end_barrens").put("minecraft:void", "minecraft:the_void").put("minecraft:mutated_plains", "minecraft:sunflower_plains").put("minecraft:mutated_desert", "minecraft:desert_lakes").put("minecraft:mutated_extreme_hills", "minecraft:gravelly_mountains").put("minecraft:mutated_forest", "minecraft:flower_forest").put("minecraft:mutated_taiga", "minecraft:taiga_mountains").put("minecraft:mutated_swampland", "minecraft:swamp_hills").put("minecraft:mutated_ice_flats", "minecraft:ice_spikes").put("minecraft:mutated_jungle", "minecraft:modified_jungle").put("minecraft:mutated_jungle_edge", "minecraft:modified_jungle_edge").put("minecraft:mutated_birch_forest", "minecraft:tall_birch_forest").put("minecraft:mutated_birch_forest_hills", "minecraft:tall_birch_hills").put("minecraft:mutated_roofed_forest", "minecraft:dark_forest_hills").put("minecraft:mutated_taiga_cold", "minecraft:snowy_taiga_mountains").put("minecraft:mutated_redwood_taiga", "minecraft:giant_spruce_taiga").put("minecraft:mutated_redwood_taiga_hills", "minecraft:giant_spruce_taiga_hills").put("minecraft:mutated_extreme_hills_with_trees", "minecraft:modified_gravelly_mountains").put("minecraft:mutated_savanna", "minecraft:shattered_savanna").put("minecraft:mutated_savanna_rock", "minecraft:shattered_savanna_plateau").put("minecraft:mutated_mesa", "minecraft:eroded_badlands").put("minecraft:mutated_mesa_rock", "minecraft:modified_wooded_badlands_plateau").put("minecraft:mutated_mesa_clear_rock", "minecraft:modified_badlands_plateau").put("minecraft:warm_deep_ocean", "minecraft:deep_warm_ocean").put("minecraft:lukewarm_deep_ocean", "minecraft:deep_lukewarm_ocean").put("minecraft:cold_deep_ocean", "minecraft:deep_cold_ocean").put("minecraft:frozen_deep_ocean", "minecraft:deep_frozen_ocean").build();
+}
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
index 31344fb9159f61033eabd823aa86a4c249d6098b..bb5ea649d9be4e832af6f5145e5aada2cf352b37 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BitStorageAlignFix.java
@@ -40,13 +40,13 @@ public class BitStorageAlignFix extends DataFix {
     }
 
     private Typed<?> updateHeightmaps(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Heightmaps", (dynamic2) -> dynamic2.updateMapValues((pair) -> pair.mapSecond((dynamic2) -> updateBitStorage(dynamic, dynamic2, 256, 9)))));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Heightmaps", (dynamic2) -> dynamic2.updateMapValues((pair) -> pair.mapSecond((dynamicIn2) -> updateBitStorage(dynamic, dynamicIn2, 256, 9)))));
     }
 
     private static Typed<?> updateSections(OpticFinder<?> opticFinder, OpticFinder<?> opticFinder2, OpticFinder<List<Pair<String, Dynamic<?>>>> opticFinder3, Typed<?> typed) {
-        return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> {
-                int i = typed.getOptional(opticFinder3).map((list) -> Math.max(4, DataFixUtils.ceillog2(list.size()))).orElse(0);
-                return i != 0 && !Mth.isPowerOfTwo(i) ? typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("BlockStates", (dynamic2) -> updateBitStorage(dynamic, dynamic2, 4096, i))) : typed;
+        return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> {
+                int i = typedIn.getOptional(opticFinder3).map((list) -> Math.max(4, DataFixUtils.ceillog2(list.size()))).orElse(0);
+                return i != 0 && !Mth.isPowerOfTwo(i) ? typedIn.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("BlockStates", (dynamic2) -> updateBitStorage(dynamic, dynamic2, 4096, i))) : typedIn;
             }));
     }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
index c1287656922f0182ea234ae79453b66e1969b3fb..e74a7b50cbdf15015fcb6fc00a21386d9175bcf9 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityBannerColorFix.java
@@ -13,7 +13,7 @@ public class BlockEntityBannerColorFix extends NamedEntityFix {
 
     public Dynamic<?> fixTag(Dynamic<?> dynamic) {
         dynamic = dynamic.update("Base", (dynamicx) -> dynamicx.createInt(15 - dynamicx.asInt(0)));
-        return dynamic.update("Patterns", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.update("Color", (dynamicx) -> dynamicx.createInt(15 - dynamicx.asInt(0))))).map(dynamicx::createList).result(), dynamicx));
+        return dynamic.update("Patterns", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamicIn) -> dynamicIn.update("Color", (dynamicIn2) -> dynamicIn2.createInt(15 - dynamicIn2.asInt(0))))).map(dynamicx::createList).result(), dynamicx));
     }
 
     protected Typed<?> fix(Typed<?> typed) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
index 5c8781febffe89c501141800da2b160a2d5d93dd..47ccd0ca23170c3cd862478730a8fda33ba1b766 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityIdFix.java
@@ -43,8 +43,8 @@ public class BlockEntityIdFix extends DataFix {
     public TypeRewriteRule makeRule() {
         Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
         Type<?> type2 = this.getOutputSchema().getType(References.ITEM_STACK);
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY);
         return TypeRewriteRule.seq(this.convertUnchecked("item stack block entity name hook converter", type, type2), this.fixTypeEverywhere("BlockEntityIdFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> (String)ID_MAP.getOrDefault(s, s))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityRenameFix.java
index 4841882b7b83418242442500b55c11c9e4ff9ce0..f6527537664aa308216ee232d67a08ebcfcd74f7 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityRenameFix.java
@@ -17,12 +17,12 @@ public class BlockEntityRenameFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY);
         return this.fixTypeEverywhere(this.name, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst(this.nameChangeLookup));
     }
 
     public static DataFix create(Schema schema, String s, UnaryOperator<String> unaryOperator) {
         return new BlockEntityRenameFix(schema, s, unaryOperator);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntitySignDoubleSidedEditableTextFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntitySignDoubleSidedEditableTextFix.java
index fa93393ec47847674d0392d489a9a325e851f704..99f0f8b5db1dcc253e489d27990b1ea89d3697e2 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntitySignDoubleSidedEditableTextFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntitySignDoubleSidedEditableTextFix.java
@@ -31,8 +31,8 @@ public class BlockEntitySignDoubleSidedEditableTextFix extends NamedEntityFix {
         List<Optional<Dynamic<T>>> list2 = getLines(dynamic, "FilteredText").toList();
         if (list2.stream().anyMatch(Optional::isPresent)) {
             dynamic3 = dynamic3.set("filtered_messages", dynamic.createList(Streams.mapWithIndex(list2.stream(), (optional, l) -> {
-                Dynamic<T> dynamic = list.get((int)l);
-                return optional.orElse(dynamic);
+                Dynamic<T> dynamicx = list.get((int)l);
+                return optional.orElse(dynamicx);
             })));
         }
 
@@ -55,4 +55,4 @@ public class BlockEntitySignDoubleSidedEditableTextFix extends NamedEntityFix {
     protected Typed<?> fix(Typed<?> typed) {
         return typed.update(DSL.remainderFinder(), BlockEntitySignDoubleSidedEditableTextFix::fixTag);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
index 3ea9ec7648de70bc3e0c0c6f65418407c1d3b6a9..8c6676f045fb6a5086a71e60fc71a6a2752610bf 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockEntityUUIDFix.java
@@ -17,7 +17,7 @@ public class BlockEntityUUIDFix extends AbstractUUIDFix {
     }
 
     private Dynamic<?> updateSkull(Dynamic<?> dynamic) {
-        return dynamic.get("Owner").get().map((dynamicx) -> replaceUUIDString(dynamicx, "Id", "Id").orElse(dynamicx)).map((dynamic2) -> dynamic.remove("Owner").set("SkullOwner", dynamic2)).result().orElse(dynamic);
+        return dynamic.get("Owner").get().map((dynamicx) -> replaceUUIDString(dynamicx, "Id", "Id").orElse(dynamicx)).map((dynamic2) -> dynamic.remove("Owner").set("SkullOwner", dynamic2)).result().orElse((Dynamic) dynamic);
     }
 
     private Dynamic<?> updateConduit(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java b/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
index cc453beff9635ae1389f86d40201d88f0163cb8e..f6891a378a35892a02d295993a0239676f70ce63 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw.java
@@ -22,10 +22,10 @@ public abstract class BlockRenameFixWithJigsaw extends BlockRenameFix {
         TypeReference typeReference = References.BLOCK_ENTITY;
         String s = "minecraft:jigsaw";
         OpticFinder<?> opticFinder = DSL.namedChoice("minecraft:jigsaw", this.getInputSchema().getChoiceType(typeReference, "minecraft:jigsaw"));
-        TypeRewriteRule typeRewriteRule = this.fixTypeEverywhereTyped(this.name + " for jigsaw state", this.getInputSchema().getType(typeReference), this.getOutputSchema().getType(typeReference), (typed) -> typed.updateTyped(opticFinder, this.getOutputSchema().getChoiceType(typeReference, "minecraft:jigsaw"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("final_state", (dynamic2) -> DataFixUtils.orElse(dynamic2.asString().result().map((s) -> {
-                            int i = s.indexOf(91);
-                            int i2 = s.indexOf(123);
-                            int i3 = s.length();
+        TypeRewriteRule typeRewriteRule = this.fixTypeEverywhereTyped(this.name + " for jigsaw state", this.getInputSchema().getType(typeReference), this.getOutputSchema().getType(typeReference), (typed) -> typed.updateTyped(opticFinder, this.getOutputSchema().getChoiceType(typeReference, "minecraft:jigsaw"), (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("final_state", (dynamic2) -> DataFixUtils.orElse(dynamic2.asString().result().map((str) -> {
+                            int i = str.indexOf(91);
+                            int i2 = str.indexOf(123);
+                            int i3 = str.length();
                             if (i > 0) {
                                 i3 = Math.min(i3, i);
                             }
@@ -34,9 +34,9 @@ public abstract class BlockRenameFixWithJigsaw extends BlockRenameFix {
                                 i3 = Math.min(i3, i2);
                             }
 
-                            String s2 = s.substring(0, i3);
+                            String s2 = str.substring(0, i3);
                             String s3 = this.fixBlock(s2);
-                            return s3 + s.substring(i3);
+                            return s3 + str.substring(i3);
                         }).map(dynamic::createString), dynamic2)))));
         return TypeRewriteRule.seq(super.makeRule(), typeRewriteRule);
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java b/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java
index d6aa74de191db9769783d9ce280f2ddb1825a592..55e188467327ddd0d720fd3670e2acdfc885e4ea 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/CavesAndCliffsRenames.java
@@ -3,7 +3,7 @@ package net.minecraft.util.datafix.fixes;
 import com.google.common.collect.ImmutableMap;
 
 public final class CavesAndCliffsRenames {
-    public static final ImmutableMap<String, String> RENAMES = ImmutableMap.builder().put("minecraft:badlands_plateau", "minecraft:badlands").put("minecraft:bamboo_jungle_hills", "minecraft:bamboo_jungle").put("minecraft:birch_forest_hills", "minecraft:birch_forest").put("minecraft:dark_forest_hills", "minecraft:dark_forest").put("minecraft:desert_hills", "minecraft:desert").put("minecraft:desert_lakes", "minecraft:desert").put("minecraft:giant_spruce_taiga_hills", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_spruce_taiga", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_tree_taiga_hills", "minecraft:old_growth_pine_taiga").put("minecraft:giant_tree_taiga", "minecraft:old_growth_pine_taiga").put("minecraft:gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:jungle_edge", "minecraft:sparse_jungle").put("minecraft:jungle_hills", "minecraft:jungle").put("minecraft:modified_badlands_plateau", "minecraft:badlands").put("minecraft:modified_gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:modified_jungle_edge", "minecraft:sparse_jungle").put("minecraft:modified_jungle", "minecraft:jungle").put("minecraft:modified_wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:mountain_edge", "minecraft:windswept_hills").put("minecraft:mountains", "minecraft:windswept_hills").put("minecraft:mushroom_field_shore", "minecraft:mushroom_fields").put("minecraft:shattered_savanna", "minecraft:windswept_savanna").put("minecraft:shattered_savanna_plateau", "minecraft:windswept_savanna").put("minecraft:snowy_mountains", "minecraft:snowy_plains").put("minecraft:snowy_taiga_hills", "minecraft:snowy_taiga").put("minecraft:snowy_taiga_mountains", "minecraft:snowy_taiga").put("minecraft:snowy_tundra", "minecraft:snowy_plains").put("minecraft:stone_shore", "minecraft:stony_shore").put("minecraft:swamp_hills", "minecraft:swamp").put("minecraft:taiga_hills", "minecraft:taiga").put("minecraft:taiga_mountains", "minecraft:taiga").put("minecraft:tall_birch_forest", "minecraft:old_growth_birch_forest").put("minecraft:tall_birch_hills", "minecraft:old_growth_birch_forest").put("minecraft:wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:wooded_hills", "minecraft:forest").put("minecraft:wooded_mountains", "minecraft:windswept_forest").put("minecraft:lofty_peaks", "minecraft:jagged_peaks").put("minecraft:snowcapped_peaks", "minecraft:frozen_peaks").build();
+    public static final ImmutableMap<String, String> RENAMES = ImmutableMap.<String, String>builder().put("minecraft:badlands_plateau", "minecraft:badlands").put("minecraft:bamboo_jungle_hills", "minecraft:bamboo_jungle").put("minecraft:birch_forest_hills", "minecraft:birch_forest").put("minecraft:dark_forest_hills", "minecraft:dark_forest").put("minecraft:desert_hills", "minecraft:desert").put("minecraft:desert_lakes", "minecraft:desert").put("minecraft:giant_spruce_taiga_hills", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_spruce_taiga", "minecraft:old_growth_spruce_taiga").put("minecraft:giant_tree_taiga_hills", "minecraft:old_growth_pine_taiga").put("minecraft:giant_tree_taiga", "minecraft:old_growth_pine_taiga").put("minecraft:gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:jungle_edge", "minecraft:sparse_jungle").put("minecraft:jungle_hills", "minecraft:jungle").put("minecraft:modified_badlands_plateau", "minecraft:badlands").put("minecraft:modified_gravelly_mountains", "minecraft:windswept_gravelly_hills").put("minecraft:modified_jungle_edge", "minecraft:sparse_jungle").put("minecraft:modified_jungle", "minecraft:jungle").put("minecraft:modified_wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:mountain_edge", "minecraft:windswept_hills").put("minecraft:mountains", "minecraft:windswept_hills").put("minecraft:mushroom_field_shore", "minecraft:mushroom_fields").put("minecraft:shattered_savanna", "minecraft:windswept_savanna").put("minecraft:shattered_savanna_plateau", "minecraft:windswept_savanna").put("minecraft:snowy_mountains", "minecraft:snowy_plains").put("minecraft:snowy_taiga_hills", "minecraft:snowy_taiga").put("minecraft:snowy_taiga_mountains", "minecraft:snowy_taiga").put("minecraft:snowy_tundra", "minecraft:snowy_plains").put("minecraft:stone_shore", "minecraft:stony_shore").put("minecraft:swamp_hills", "minecraft:swamp").put("minecraft:taiga_hills", "minecraft:taiga").put("minecraft:taiga_mountains", "minecraft:taiga").put("minecraft:tall_birch_forest", "minecraft:old_growth_birch_forest").put("minecraft:tall_birch_hills", "minecraft:old_growth_birch_forest").put("minecraft:wooded_badlands_plateau", "minecraft:wooded_badlands").put("minecraft:wooded_hills", "minecraft:forest").put("minecraft:wooded_mountains", "minecraft:windswept_forest").put("minecraft:lofty_peaks", "minecraft:jagged_peaks").put("minecraft:snowcapped_peaks", "minecraft:frozen_peaks").build();
 
     private CavesAndCliffsRenames() {
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java
index 0a283844d684d20b8c56918e0757c51b92224b99..684de5178c0b61ed6fef5e3eee432f17bf87e46a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java
@@ -13,6 +13,8 @@ import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.types.templates.List.ListType;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Dynamic;
+
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
@@ -39,11 +41,11 @@ public class ChunkBedBlockEntityInjecterFix extends DataFix {
         OpticFinder<?> opticFinder = DSL.fieldFinder("Level", type);
         OpticFinder<List<TE>> opticFinder2 = DSL.fieldFinder("TileEntities", listType);
         int i = 416;
-        return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), (dynamicOps) -> (pair) -> pair), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), (typed) -> {
+        return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), (dynamicOps) -> (pair) -> (Pair) pair), this.fixTypeEverywhereTyped("BedBlockEntityInjecter", this.getOutputSchema().getType(References.CHUNK), (typed) -> {
             Typed<?> typed2 = typed.getTyped(opticFinder);
             Dynamic<?> dynamic = typed2.get(DSL.remainderFinder());
-            int i = dynamic.get("xPos").asInt(0);
-            int i2 = dynamic.get("zPos").asInt(0);
+            int xPos = dynamic.get("xPos").asInt(0);
+            int zPos = dynamic.get("zPos").asInt(0);
             List<TE> list = Lists.newArrayList((Iterable)typed2.getOrCreate(opticFinder2));
 
             for(Dynamic<?> dynamic2 : dynamic.get("Sections").asList(Function.identity())) {
@@ -56,9 +58,9 @@ public class ChunkBedBlockEntityInjecterFix extends DataFix {
                         int i8 = i5 >> 4 & 15;
                         Map<Dynamic<?>, Dynamic<?>> map = Maps.newHashMap();
                         map.put(dynamic2.createString("id"), dynamic2.createString("minecraft:bed"));
-                        map.put(dynamic2.createString("x"), dynamic2.createInt(i6 + (i << 4)));
+                        map.put(dynamic2.createString("x"), dynamic2.createInt(i6 + (xPos << 4)));
                         map.put(dynamic2.createString("y"), dynamic2.createInt(i7 + (i3 << 4)));
-                        map.put(dynamic2.createString("z"), dynamic2.createInt(i8 + (i2 << 4)));
+                        map.put(dynamic2.createString("z"), dynamic2.createInt(i8 + (zPos << 4)));
                         map.put(dynamic2.createString("color"), dynamic2.createShort((short)14));
                         return map;
                     } else {
@@ -75,4 +77,4 @@ public class ChunkBedBlockEntityInjecterFix extends DataFix {
             return !list.isEmpty() ? typed.set(opticFinder, typed2.set(opticFinder2, list)) : typed;
         }));
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java
index 90334fdbe4446471558aa4b6ba995ff233beddc7..7f3b1fa5963c653a09b02f82477ea74986c571fc 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java
@@ -81,15 +81,15 @@ public class ChunkHeightAndBiomeFix extends DataFix {
                 Dynamic<?>[] dynamics = getBiomeContainers(dynamic, flag, i, mutableBoolean);
                 Dynamic<?> dynamic2 = makePalettedContainer(dynamic.createList(Stream.of(dynamic.createMap(ImmutableMap.of(dynamic.createString("Name"), dynamic.createString("minecraft:air"))))));
                 Set<String> set = Sets.newHashSet();
-                MutableObject<Supplier<ChunkProtoTickListFix.PoorMansPalettedContainer>> mutableObject = new MutableObject(() -> null);
+                MutableObject<Supplier<ChunkProtoTickListFix.PoorMansPalettedContainer>> mutableObject = new MutableObject<>(() -> null);
                 typed2 = typed2.updateTyped(opticFinder2, type4, (typedx) -> {
                     IntSet intSet = new IntOpenHashSet();
                     Dynamic<?> dynamic3 = typedx.write().result().orElseThrow(() -> new IllegalStateException("Malformed Chunk.Level.Sections"));
                     List<Dynamic<?>> list = dynamic3.asStream().map((dynamic2x) -> {
                         int i2 = dynamic2x.get("Y").asInt(0);
-                        Dynamic<?> dynamic3 = DataFixUtils.orElse(dynamic2x.get("Palette").result().flatMap((dynamic2xx) -> {
-                            dynamic2xx.asStream().map((dynamic) -> dynamic.get("Name").asString("minecraft:air")).forEach(set::add);
-                            return dynamic2x.get("BlockStates").result().map((dynamic2) -> makeOptimizedPalettedContainer(dynamic2xx, dynamic2));
+                        Dynamic<?> dynamic3In = DataFixUtils.orElse(dynamic2x.get("Palette").result().flatMap((dynamic2xx) -> {
+                            dynamic2xx.asStream().map((dynamicIn) -> dynamicIn.get("Name").asString("minecraft:air")).forEach(set::add);
+                            return dynamic2x.get("BlockStates").result().map((dynamicIn2) -> makeOptimizedPalettedContainer(dynamic2xx, dynamicIn2));
                         }), dynamic2);
                         Dynamic<?> dynamic4 = dynamic2x;
                         int i3 = i2 - i;
@@ -100,13 +100,13 @@ public class ChunkHeightAndBiomeFix extends DataFix {
                         intSet.add(i2);
                         if (dynamic2x.get("Y").asInt(Integer.MAX_VALUE) == 0) {
                             mutableObject.setValue(() -> {
-                                List<? extends Dynamic<?>> list = dynamic3.get("palette").asList(Function.identity());
-                                long[] longs = dynamic3.get("data").asLongStream().toArray();
-                                return new ChunkProtoTickListFix.PoorMansPalettedContainer(list, longs);
+                                List<? extends Dynamic<?>> listIn = dynamic3In.get("palette").asList(Function.identity());
+                                long[] longs = dynamic3In.get("data").asLongStream().toArray();
+                                return new ChunkProtoTickListFix.PoorMansPalettedContainer(listIn, longs);
                             });
                         }
 
-                        return dynamic4.set("block_states", dynamic3).remove("Palette").remove("BlockStates");
+                        return dynamic4.set("block_states", dynamic3In).remove("Palette").remove("BlockStates");
                     }).collect(Collectors.toCollection(ArrayList::new));
 
                     for(int i2 = 0; i2 < dynamics.length; ++i2) {
@@ -159,12 +159,13 @@ public class ChunkHeightAndBiomeFix extends DataFix {
             mutableBoolean.setValue(true);
 
             for(int i2 = 0; i2 < 24; ++i2) {
-                dynamics[i2] = makeBiomeContainer(dynamic, (i2) -> getOldBiome(ints, i2 * 64 + i2));
+                dynamics[i2] = makeBiomeContainer(dynamic, (i2In) -> getOldBiome(ints, i2In * 64 + i2In));
             }
         } else if (ints != null && ints.length == 1024) {
             for(int i4 = 0; i4 < 16; ++i4) {
                 int i5 = i4 - i;
-                dynamics[i5] = makeBiomeContainer(dynamic, (i2) -> getOldBiome(ints, i4 * 64 + i2));
+                int finalI = i4;
+                dynamics[i5] = makeBiomeContainer(dynamic, (i2) -> getOldBiome(ints, finalI * 64 + i2));
             }
 
             if (flag) {
@@ -249,11 +250,11 @@ public class ChunkHeightAndBiomeFix extends DataFix {
     private static <T> Dynamic<T> shiftUpgradeData(Dynamic<T> dynamic) {
         return dynamic.update("Indices", (dynamicx) -> {
             Map<Dynamic<?>, Dynamic<?>> map = new HashMap();
-            dynamicx.getMapValues().result().ifPresent((map2) -> map2.forEach((dynamic, dynamic2) -> {
+            dynamicx.getMapValues().result().ifPresent((map2) -> map2.forEach((dynamicIn, dynamic2) -> {
                     try {
-                        dynamic.asString().result().map(Integer::parseInt).ifPresent((integer) -> {
+                        dynamicIn.asString().result().map(Integer::parseInt).ifPresent((integer) -> {
                             int i = integer - -4;
-                            map.put(dynamic.createString(Integer.toString(i)), dynamic2);
+                            map.put(dynamicIn.createString(Integer.toString(i)), dynamic2);
                         });
                     } catch (NumberFormatException var4) {
                     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
index dc7e26d4c8b683a1c89ee21f772a930be738ca68..27da60e5847c5fe76ff0fe45487acf5ecb612d4f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
@@ -562,22 +562,22 @@ public class ChunkPalettedStorageFix extends DataFix {
             this.level = dynamic;
             this.x = dynamic.get("xPos").asInt(0) << 4;
             this.z = dynamic.get("zPos").asInt(0) << 4;
-            dynamic.get("TileEntities").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamic) -> {
-                    int i = dynamic.get("x").asInt(0) - this.x & 15;
-                    int i2 = dynamic.get("y").asInt(0);
-                    int i3 = dynamic.get("z").asInt(0) - this.z & 15;
-                    int i4 = i2 << 8 | i3 << 4 | i;
-                    if (this.blockEntities.put(i4, dynamic) != null) {
-                        ChunkPalettedStorageFix.LOGGER.warn("In chunk: {}x{} found a duplicate block entity at position: [{}, {}, {}]", new Object[]{this.x, this.z, i, i2, i3});
-                    }
+            dynamic.get("TileEntities").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamicIn) -> {
+                int i = dynamicIn.get("x").asInt(0) - this.x & 15;
+                int i2 = dynamicIn.get("y").asInt(0);
+                int i3 = dynamicIn.get("z").asInt(0) - this.z & 15;
+                int i4 = i2 << 8 | i3 << 4 | i;
+                if (this.blockEntities.put(i4, dynamicIn) != null) {
+                    ChunkPalettedStorageFix.LOGGER.warn("In chunk: {}x{} found a duplicate block entity at position: [{}, {}, {}]", this.x, this.z, i, i2, i3);
+                }
 
-                }));
+            }));
             boolean flag = dynamic.get("convertedFromAlphaFormat").asBoolean(false);
-            dynamic.get("Sections").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamic) -> {
-                    ChunkPalettedStorageFix.Section section = new ChunkPalettedStorageFix.Section(dynamic);
-                    this.sides = section.upgrade(this.sides);
-                    this.sections[section.y] = section;
-                }));
+            dynamic.get("Sections").asStreamOpt().result().ifPresent((stream) -> stream.forEach((dynamicIn) -> {
+                ChunkPalettedStorageFix.Section section = new ChunkPalettedStorageFix.Section(dynamicIn);
+                this.sides = section.upgrade(this.sides);
+                this.sections[section.y] = section;
+            }));
 
             for(ChunkPalettedStorageFix.Section section : this.sections) {
                 if (section != null) {
@@ -587,211 +587,211 @@ public class ChunkPalettedStorageFix extends DataFix {
                         java.util.Map.Entry<Integer, IntList> entry = (java.util.Map.Entry)var7.next();
                         int i = section.y << 12;
                         switch(entry.getKey()) {
-                        case 2:
-                            IntListIterator var30 = ((IntList)entry.getValue()).iterator();
-
-                            while(var30.hasNext()) {
-                                int i2 = var30.next();
-                                i2 |= i;
-                                Dynamic<?> dynamic2 = this.getBlock(i2);
-                                if ("minecraft:grass_block".equals(ChunkPalettedStorageFix.getName(dynamic2))) {
-                                    String s = ChunkPalettedStorageFix.getName(this.getBlock(relative(i2, ChunkPalettedStorageFix.Direction.UP)));
-                                    if ("minecraft:snow".equals(s) || "minecraft:snow_layer".equals(s)) {
-                                        this.setBlock(i2, ChunkPalettedStorageFix.SNOWY_GRASS);
+                            case 2:
+                                IntListIterator var30 = ((IntList)entry.getValue()).iterator();
+
+                                while(var30.hasNext()) {
+                                    int i2 = var30.next();
+                                    i2 |= i;
+                                    Dynamic<?> dynamic2 = this.getBlock(i2);
+                                    if ("minecraft:grass_block".equals(ChunkPalettedStorageFix.getName(dynamic2))) {
+                                        String s = ChunkPalettedStorageFix.getName(this.getBlock(relative(i2, ChunkPalettedStorageFix.Direction.UP)));
+                                        if ("minecraft:snow".equals(s) || "minecraft:snow_layer".equals(s)) {
+                                            this.setBlock(i2, ChunkPalettedStorageFix.SNOWY_GRASS);
+                                        }
                                     }
                                 }
-                            }
-                            break;
-                        case 3:
-                            IntListIterator var29 = ((IntList)entry.getValue()).iterator();
-
-                            while(var29.hasNext()) {
-                                int i3 = var29.next();
-                                i3 |= i;
-                                Dynamic<?> dynamic3 = this.getBlock(i3);
-                                if ("minecraft:podzol".equals(ChunkPalettedStorageFix.getName(dynamic3))) {
-                                    String s2 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i3, ChunkPalettedStorageFix.Direction.UP)));
-                                    if ("minecraft:snow".equals(s2) || "minecraft:snow_layer".equals(s2)) {
-                                        this.setBlock(i3, ChunkPalettedStorageFix.SNOWY_PODZOL);
+                                break;
+                            case 3:
+                                IntListIterator var29 = ((IntList)entry.getValue()).iterator();
+
+                                while(var29.hasNext()) {
+                                    int i3 = var29.next();
+                                    i3 |= i;
+                                    Dynamic<?> dynamic3 = this.getBlock(i3);
+                                    if ("minecraft:podzol".equals(ChunkPalettedStorageFix.getName(dynamic3))) {
+                                        String s2 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i3, ChunkPalettedStorageFix.Direction.UP)));
+                                        if ("minecraft:snow".equals(s2) || "minecraft:snow_layer".equals(s2)) {
+                                            this.setBlock(i3, ChunkPalettedStorageFix.SNOWY_PODZOL);
+                                        }
                                     }
                                 }
-                            }
-                            break;
-                        case 25:
-                            IntListIterator var28 = ((IntList)entry.getValue()).iterator();
-
-                            while(var28.hasNext()) {
-                                int i5 = var28.next();
-                                i5 |= i;
-                                Dynamic<?> dynamic5 = this.removeBlockEntity(i5);
-                                if (dynamic5 != null) {
-                                    String s4 = Boolean.toString(dynamic5.get("powered").asBoolean(false)) + (byte)Math.min(Math.max(dynamic5.get("note").asInt(0), 0), 24);
-                                    this.setBlock(i5, ChunkPalettedStorageFix.NOTE_BLOCK_MAP.getOrDefault(s4, ChunkPalettedStorageFix.NOTE_BLOCK_MAP.get("false0")));
+                                break;
+                            case 25:
+                                IntListIterator var28 = ((IntList)entry.getValue()).iterator();
+
+                                while(var28.hasNext()) {
+                                    int i5 = var28.next();
+                                    i5 |= i;
+                                    Dynamic<?> dynamic5 = this.removeBlockEntity(i5);
+                                    if (dynamic5 != null) {
+                                        String s4 = Boolean.toString(dynamic5.get("powered").asBoolean(false)) + (byte)Math.min(Math.max(dynamic5.get("note").asInt(0), 0), 24);
+                                        this.setBlock(i5, ChunkPalettedStorageFix.NOTE_BLOCK_MAP.getOrDefault(s4, ChunkPalettedStorageFix.NOTE_BLOCK_MAP.get("false0")));
+                                    }
                                 }
-                            }
-                            break;
-                        case 26:
-                            IntListIterator var27 = ((IntList)entry.getValue()).iterator();
-
-                            while(var27.hasNext()) {
-                                int i6 = var27.next();
-                                i6 |= i;
-                                Dynamic<?> dynamic6 = this.getBlockEntity(i6);
-                                Dynamic<?> dynamic7 = this.getBlock(i6);
-                                if (dynamic6 != null) {
-                                    int i7 = dynamic6.get("color").asInt(0);
-                                    if (i7 != 14 && i7 >= 0 && i7 < 16) {
-                                        String s5 = ChunkPalettedStorageFix.getProperty(dynamic7, "facing") + ChunkPalettedStorageFix.getProperty(dynamic7, "occupied") + ChunkPalettedStorageFix.getProperty(dynamic7, "part") + i7;
-                                        if (ChunkPalettedStorageFix.BED_BLOCK_MAP.containsKey(s5)) {
-                                            this.setBlock(i6, ChunkPalettedStorageFix.BED_BLOCK_MAP.get(s5));
+                                break;
+                            case 26:
+                                IntListIterator var27 = ((IntList)entry.getValue()).iterator();
+
+                                while(var27.hasNext()) {
+                                    int i6 = var27.next();
+                                    i6 |= i;
+                                    Dynamic<?> dynamic6 = this.getBlockEntity(i6);
+                                    Dynamic<?> dynamic7 = this.getBlock(i6);
+                                    if (dynamic6 != null) {
+                                        int i7 = dynamic6.get("color").asInt(0);
+                                        if (i7 != 14 && i7 >= 0 && i7 < 16) {
+                                            String s5 = ChunkPalettedStorageFix.getProperty(dynamic7, "facing") + ChunkPalettedStorageFix.getProperty(dynamic7, "occupied") + ChunkPalettedStorageFix.getProperty(dynamic7, "part") + i7;
+                                            if (ChunkPalettedStorageFix.BED_BLOCK_MAP.containsKey(s5)) {
+                                                this.setBlock(i6, ChunkPalettedStorageFix.BED_BLOCK_MAP.get(s5));
+                                            }
                                         }
                                     }
                                 }
-                            }
-                            break;
-                        case 64:
-                        case 71:
-                        case 193:
-                        case 194:
-                        case 195:
-                        case 196:
-                        case 197:
-                            IntListIterator var26 = ((IntList)entry.getValue()).iterator();
-
-                            while(var26.hasNext()) {
-                                int i13 = var26.next();
-                                i13 |= i;
-                                Dynamic<?> dynamic13 = this.getBlock(i13);
-                                if (ChunkPalettedStorageFix.getName(dynamic13).endsWith("_door")) {
-                                    Dynamic<?> dynamic14 = this.getBlock(i13);
-                                    if ("lower".equals(ChunkPalettedStorageFix.getProperty(dynamic14, "half"))) {
-                                        int i14 = relative(i13, ChunkPalettedStorageFix.Direction.UP);
-                                        Dynamic<?> dynamic15 = this.getBlock(i14);
-                                        String s13 = ChunkPalettedStorageFix.getName(dynamic14);
-                                        if (s13.equals(ChunkPalettedStorageFix.getName(dynamic15))) {
-                                            String s14 = ChunkPalettedStorageFix.getProperty(dynamic14, "facing");
-                                            String s15 = ChunkPalettedStorageFix.getProperty(dynamic14, "open");
-                                            String s16 = flag ? "left" : ChunkPalettedStorageFix.getProperty(dynamic15, "hinge");
-                                            String s17 = flag ? "false" : ChunkPalettedStorageFix.getProperty(dynamic15, "powered");
-                                            this.setBlock(i13, ChunkPalettedStorageFix.DOOR_MAP.get(s13 + s14 + "lower" + s16 + s15 + s17));
-                                            this.setBlock(i14, ChunkPalettedStorageFix.DOOR_MAP.get(s13 + s14 + "upper" + s16 + s15 + s17));
+                                break;
+                            case 64:
+                            case 71:
+                            case 193:
+                            case 194:
+                            case 195:
+                            case 196:
+                            case 197:
+                                IntListIterator var26 = ((IntList)entry.getValue()).iterator();
+
+                                while(var26.hasNext()) {
+                                    int i13 = var26.next();
+                                    i13 |= i;
+                                    Dynamic<?> dynamic13 = this.getBlock(i13);
+                                    if (ChunkPalettedStorageFix.getName(dynamic13).endsWith("_door")) {
+                                        Dynamic<?> dynamic14 = this.getBlock(i13);
+                                        if ("lower".equals(ChunkPalettedStorageFix.getProperty(dynamic14, "half"))) {
+                                            int i14 = relative(i13, ChunkPalettedStorageFix.Direction.UP);
+                                            Dynamic<?> dynamic15 = this.getBlock(i14);
+                                            String s13 = ChunkPalettedStorageFix.getName(dynamic14);
+                                            if (s13.equals(ChunkPalettedStorageFix.getName(dynamic15))) {
+                                                String s14 = ChunkPalettedStorageFix.getProperty(dynamic14, "facing");
+                                                String s15 = ChunkPalettedStorageFix.getProperty(dynamic14, "open");
+                                                String s16 = flag ? "left" : ChunkPalettedStorageFix.getProperty(dynamic15, "hinge");
+                                                String s17 = flag ? "false" : ChunkPalettedStorageFix.getProperty(dynamic15, "powered");
+                                                this.setBlock(i13, ChunkPalettedStorageFix.DOOR_MAP.get(s13 + s14 + "lower" + s16 + s15 + s17));
+                                                this.setBlock(i14, ChunkPalettedStorageFix.DOOR_MAP.get(s13 + s14 + "upper" + s16 + s15 + s17));
+                                            }
                                         }
                                     }
                                 }
-                            }
-                            break;
-                        case 86:
-                            IntListIterator var25 = ((IntList)entry.getValue()).iterator();
-
-                            while(var25.hasNext()) {
-                                int i10 = var25.next();
-                                i10 |= i;
-                                Dynamic<?> dynamic10 = this.getBlock(i10);
-                                if ("minecraft:carved_pumpkin".equals(ChunkPalettedStorageFix.getName(dynamic10))) {
-                                    String s7 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i10, ChunkPalettedStorageFix.Direction.DOWN)));
-                                    if ("minecraft:grass_block".equals(s7) || "minecraft:dirt".equals(s7)) {
-                                        this.setBlock(i10, ChunkPalettedStorageFix.PUMPKIN);
+                                break;
+                            case 86:
+                                IntListIterator var25 = ((IntList)entry.getValue()).iterator();
+
+                                while(var25.hasNext()) {
+                                    int i10 = var25.next();
+                                    i10 |= i;
+                                    Dynamic<?> dynamic10 = this.getBlock(i10);
+                                    if ("minecraft:carved_pumpkin".equals(ChunkPalettedStorageFix.getName(dynamic10))) {
+                                        String s7 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i10, ChunkPalettedStorageFix.Direction.DOWN)));
+                                        if ("minecraft:grass_block".equals(s7) || "minecraft:dirt".equals(s7)) {
+                                            this.setBlock(i10, ChunkPalettedStorageFix.PUMPKIN);
+                                        }
                                     }
                                 }
-                            }
-                            break;
-                        case 110:
-                            IntListIterator var24 = ((IntList)entry.getValue()).iterator();
-
-                            while(var24.hasNext()) {
-                                int i4 = var24.next();
-                                i4 |= i;
-                                Dynamic<?> dynamic4 = this.getBlock(i4);
-                                if ("minecraft:mycelium".equals(ChunkPalettedStorageFix.getName(dynamic4))) {
-                                    String s3 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i4, ChunkPalettedStorageFix.Direction.UP)));
-                                    if ("minecraft:snow".equals(s3) || "minecraft:snow_layer".equals(s3)) {
-                                        this.setBlock(i4, ChunkPalettedStorageFix.SNOWY_MYCELIUM);
+                                break;
+                            case 110:
+                                IntListIterator var24 = ((IntList)entry.getValue()).iterator();
+
+                                while(var24.hasNext()) {
+                                    int i4 = var24.next();
+                                    i4 |= i;
+                                    Dynamic<?> dynamic4 = this.getBlock(i4);
+                                    if ("minecraft:mycelium".equals(ChunkPalettedStorageFix.getName(dynamic4))) {
+                                        String s3 = ChunkPalettedStorageFix.getName(this.getBlock(relative(i4, ChunkPalettedStorageFix.Direction.UP)));
+                                        if ("minecraft:snow".equals(s3) || "minecraft:snow_layer".equals(s3)) {
+                                            this.setBlock(i4, ChunkPalettedStorageFix.SNOWY_MYCELIUM);
+                                        }
                                     }
                                 }
-                            }
-                            break;
-                        case 140:
-                            IntListIterator var23 = ((IntList)entry.getValue()).iterator();
-
-                            while(var23.hasNext()) {
-                                int i11 = var23.next();
-                                i11 |= i;
-                                Dynamic<?> dynamic11 = this.removeBlockEntity(i11);
-                                if (dynamic11 != null) {
-                                    String s8 = dynamic11.get("Item").asString("") + dynamic11.get("Data").asInt(0);
-                                    this.setBlock(i11, ChunkPalettedStorageFix.FLOWER_POT_MAP.getOrDefault(s8, ChunkPalettedStorageFix.FLOWER_POT_MAP.get("minecraft:air0")));
-                                }
-                            }
-                            break;
-                        case 144:
-                            IntListIterator var22 = ((IntList)entry.getValue()).iterator();
-
-                            while(var22.hasNext()) {
-                                int i12 = var22.next();
-                                i12 |= i;
-                                Dynamic<?> dynamic12 = this.getBlockEntity(i12);
-                                if (dynamic12 != null) {
-                                    String s9 = String.valueOf(dynamic12.get("SkullType").asInt(0));
-                                    String s10 = ChunkPalettedStorageFix.getProperty(this.getBlock(i12), "facing");
-                                    String s12;
-                                    if (!"up".equals(s10) && !"down".equals(s10)) {
-                                        s12 = s9 + s10;
-                                    } else {
-                                        s12 = s9 + String.valueOf(dynamic12.get("Rot").asInt(0));
+                                break;
+                            case 140:
+                                IntListIterator var23 = ((IntList)entry.getValue()).iterator();
+
+                                while(var23.hasNext()) {
+                                    int i11 = var23.next();
+                                    i11 |= i;
+                                    Dynamic<?> dynamic11 = this.removeBlockEntity(i11);
+                                    if (dynamic11 != null) {
+                                        String s8 = dynamic11.get("Item").asString("") + dynamic11.get("Data").asInt(0);
+                                        this.setBlock(i11, ChunkPalettedStorageFix.FLOWER_POT_MAP.getOrDefault(s8, ChunkPalettedStorageFix.FLOWER_POT_MAP.get("minecraft:air0")));
                                     }
+                                }
+                                break;
+                            case 144:
+                                IntListIterator var22 = ((IntList)entry.getValue()).iterator();
+
+                                while(var22.hasNext()) {
+                                    int i12 = var22.next();
+                                    i12 |= i;
+                                    Dynamic<?> dynamic12 = this.getBlockEntity(i12);
+                                    if (dynamic12 != null) {
+                                        String s9 = String.valueOf(dynamic12.get("SkullType").asInt(0));
+                                        String s10 = ChunkPalettedStorageFix.getProperty(this.getBlock(i12), "facing");
+                                        String s12;
+                                        if (!"up".equals(s10) && !"down".equals(s10)) {
+                                            s12 = s9 + s10;
+                                        } else {
+                                            s12 = s9 + String.valueOf(dynamic12.get("Rot").asInt(0));
+                                        }
 
-                                    dynamic12.remove("SkullType");
-                                    dynamic12.remove("facing");
-                                    dynamic12.remove("Rot");
-                                    this.setBlock(i12, ChunkPalettedStorageFix.SKULL_MAP.getOrDefault(s12, ChunkPalettedStorageFix.SKULL_MAP.get("0north")));
+                                        dynamic12.remove("SkullType");
+                                        dynamic12.remove("facing");
+                                        dynamic12.remove("Rot");
+                                        this.setBlock(i12, ChunkPalettedStorageFix.SKULL_MAP.getOrDefault(s12, ChunkPalettedStorageFix.SKULL_MAP.get("0north")));
+                                    }
                                 }
-                            }
-                            break;
-                        case 175:
-                            IntListIterator var21 = ((IntList)entry.getValue()).iterator();
-
-                            while(var21.hasNext()) {
-                                int i15 = var21.next();
-                                i15 |= i;
-                                Dynamic<?> dynamic16 = this.getBlock(i15);
-                                if ("upper".equals(ChunkPalettedStorageFix.getProperty(dynamic16, "half"))) {
-                                    Dynamic<?> dynamic17 = this.getBlock(relative(i15, ChunkPalettedStorageFix.Direction.DOWN));
-                                    String s18 = ChunkPalettedStorageFix.getName(dynamic17);
-                                    if ("minecraft:sunflower".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_SUNFLOWER);
-                                    } else if ("minecraft:lilac".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_LILAC);
-                                    } else if ("minecraft:tall_grass".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_TALL_GRASS);
-                                    } else if ("minecraft:large_fern".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_LARGE_FERN);
-                                    } else if ("minecraft:rose_bush".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_ROSE_BUSH);
-                                    } else if ("minecraft:peony".equals(s18)) {
-                                        this.setBlock(i15, ChunkPalettedStorageFix.UPPER_PEONY);
+                                break;
+                            case 175:
+                                IntListIterator var21 = ((IntList)entry.getValue()).iterator();
+
+                                while(var21.hasNext()) {
+                                    int i15 = var21.next();
+                                    i15 |= i;
+                                    Dynamic<?> dynamic16 = this.getBlock(i15);
+                                    if ("upper".equals(ChunkPalettedStorageFix.getProperty(dynamic16, "half"))) {
+                                        Dynamic<?> dynamic17 = this.getBlock(relative(i15, ChunkPalettedStorageFix.Direction.DOWN));
+                                        String s18 = ChunkPalettedStorageFix.getName(dynamic17);
+                                        if ("minecraft:sunflower".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_SUNFLOWER);
+                                        } else if ("minecraft:lilac".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_LILAC);
+                                        } else if ("minecraft:tall_grass".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_TALL_GRASS);
+                                        } else if ("minecraft:large_fern".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_LARGE_FERN);
+                                        } else if ("minecraft:rose_bush".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_ROSE_BUSH);
+                                        } else if ("minecraft:peony".equals(s18)) {
+                                            this.setBlock(i15, ChunkPalettedStorageFix.UPPER_PEONY);
+                                        }
                                     }
                                 }
-                            }
-                            break;
-                        case 176:
-                        case 177:
-                            IntListIterator var10 = ((IntList)entry.getValue()).iterator();
-
-                            while(var10.hasNext()) {
-                                int i8 = var10.next();
-                                i8 |= i;
-                                Dynamic<?> dynamic8 = this.getBlockEntity(i8);
-                                Dynamic<?> dynamic9 = this.getBlock(i8);
-                                if (dynamic8 != null) {
-                                    int i9 = dynamic8.get("Base").asInt(0);
-                                    if (i9 != 15 && i9 >= 0 && i9 < 16) {
-                                        String s6 = ChunkPalettedStorageFix.getProperty(dynamic9, entry.getKey() == 176 ? "rotation" : "facing") + "_" + i9;
-                                        if (ChunkPalettedStorageFix.BANNER_BLOCK_MAP.containsKey(s6)) {
-                                            this.setBlock(i8, ChunkPalettedStorageFix.BANNER_BLOCK_MAP.get(s6));
+                                break;
+                            case 176:
+                            case 177:
+                                IntListIterator var10 = ((IntList)entry.getValue()).iterator();
+
+                                while(var10.hasNext()) {
+                                    int i8 = var10.next();
+                                    i8 |= i;
+                                    Dynamic<?> dynamic8 = this.getBlockEntity(i8);
+                                    Dynamic<?> dynamic9 = this.getBlock(i8);
+                                    if (dynamic8 != null) {
+                                        int i9 = dynamic8.get("Base").asInt(0);
+                                        if (i9 != 15 && i9 >= 0 && i9 < 16) {
+                                            String s6 = ChunkPalettedStorageFix.getProperty(dynamic9, entry.getKey() == 176 ? "rotation" : "facing") + "_" + i9;
+                                            if (ChunkPalettedStorageFix.BANNER_BLOCK_MAP.containsKey(s6)) {
+                                                this.setBlock(i8, ChunkPalettedStorageFix.BANNER_BLOCK_MAP.get(s6));
+                                            }
                                         }
                                     }
                                 }
-                            }
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java
index fde49a4e077b72007a3cc1dc7de3ea57a39798f0..7d6237b1a6c8a7b20130f29e37674dfcd2d569af 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java
@@ -47,23 +47,23 @@ public class ChunkProtoTickListFix extends DataFix {
                 Dynamic<?> dynamic = typedx.get(DSL.remainderFinder());
                 MutableInt mutableInt = new MutableInt();
                 Int2ObjectMap<Supplier<ChunkProtoTickListFix.PoorMansPalettedContainer>> int2ObjectMap = new Int2ObjectArrayMap();
-                typedx.getOptionalTyped(opticFinder2).ifPresent((typed) -> typed.getAllTyped(opticFinder3).forEach((typedx) -> {
-                        Dynamic<?> dynamic = typedx.get(DSL.remainderFinder());
-                        int i = dynamic.get("Y").asInt(Integer.MAX_VALUE);
+                typedx.getOptionalTyped(opticFinder2).ifPresent((typedIn) -> typedIn.getAllTyped(opticFinder3).forEach((typedIn2) -> {
+                        Dynamic<?> dynamicIn = typedIn2.get(DSL.remainderFinder());
+                        int i = dynamicIn.get("Y").asInt(Integer.MAX_VALUE);
                         if (i != Integer.MAX_VALUE) {
-                            if (typedx.getOptionalTyped(opticFinder5).isPresent()) {
+                            if (typedIn2.getOptionalTyped(opticFinder5).isPresent()) {
                                 mutableInt.setValue(Math.min(i, mutableInt.getValue()));
                             }
 
-                            typedx.getOptionalTyped(opticFinder4).ifPresent((typed) -> int2ObjectMap.put(i, Suppliers.memoize(() -> {
-                                    List<? extends Dynamic<?>> list = typed.getOptionalTyped(opticFinder6).map((typedx) -> typedx.write().result().map((dynamic) -> dynamic.asList(Function.identity())).orElse(Collections.emptyList())).orElse(Collections.emptyList());
-                                    long[] longs = (typed.get(DSL.remainderFinder())).get("data").asLongStream().toArray();
+                            typedIn2.getOptionalTyped(opticFinder4).ifPresent((typedIn3) -> int2ObjectMap.put(i, Suppliers.memoize(() -> {
+                                    List<? extends Dynamic<?>> list = typedIn3.getOptionalTyped(opticFinder6).map((typedIn4) -> typedIn4.write().result().map((dynamicIn2) -> dynamicIn2.asList(Function.identity())).orElse(Collections.emptyList())).orElse(Collections.emptyList());
+                                    long[] longs = (typedIn3.get(DSL.remainderFinder())).get("data").asLongStream().toArray();
                                     return new ChunkProtoTickListFix.PoorMansPalettedContainer(list, longs);
                                 })));
                         }
                     }));
                 byte b = mutableInt.getValue().byteValue();
-                typedx = typedx.update(DSL.remainderFinder(), (dynamicx) -> dynamicx.update("yPos", (dynamic) -> dynamic.createByte(b)));
+                typedx = typedx.update(DSL.remainderFinder(), (dynamicx) -> dynamicx.update("yPos", (dynamicIn) -> dynamicIn.createByte(b)));
                 if (!typedx.getOptionalTyped(opticFinder7).isPresent() && !dynamic.get("fluid_ticks").result().isPresent()) {
                     int i = dynamic.get("xPos").asInt(0);
                     int i2 = dynamic.get("zPos").asInt(0);
@@ -119,7 +119,7 @@ public class ChunkProtoTickListFix extends DataFix {
         int i6 = i4 >>> 4 & 15;
         int i7 = i4 >>> 8 & 15;
         String s = (String)function.apply(supplier != null ? ((ChunkProtoTickListFix.PoorMansPalettedContainer)supplier.get()).get(i5, i6, i7) : null);
-        return dynamic.createMap(ImmutableMap.builder().put(dynamic.createString("i"), dynamic.createString(s)).put(dynamic.createString("x"), dynamic.createInt(i * 16 + i5)).put(dynamic.createString("y"), dynamic.createInt(i2 * 16 + i6)).put(dynamic.createString("z"), dynamic.createInt(i3 * 16 + i7)).put(dynamic.createString("t"), dynamic.createInt(0)).put(dynamic.createString("p"), dynamic.createInt(0)).build());
+        return dynamic.createMap(ImmutableMap.<Dynamic<?>, Dynamic<?>>builder().put(dynamic.createString("i"), dynamic.createString(s)).put(dynamic.createString("x"), dynamic.createInt(i * 16 + i5)).put(dynamic.createString("y"), dynamic.createInt(i2 * 16 + i6)).put(dynamic.createString("z"), dynamic.createInt(i3 * 16 + i7)).put(dynamic.createString("t"), dynamic.createInt(0)).put(dynamic.createString("p"), dynamic.createInt(0)).build());
     }
 
     public static final class PoorMansPalettedContainer {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
index ab7931e277bfef1a6dfcb1acdb8995e8a951622b..28aebc40b4a980e0817e54882b915fe225251242 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStatusFix2.java
@@ -12,7 +12,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class ChunkStatusFix2 extends DataFix {
-    private static final Map<String, String> RENAMES_AND_DOWNGRADES = ImmutableMap.builder().put("structure_references", "empty").put("biomes", "empty").put("base", "surface").put("carved", "carvers").put("liquid_carved", "liquid_carvers").put("decorated", "features").put("lighted", "light").put("mobs_spawned", "spawn").put("finalized", "heightmaps").put("fullchunk", "full").build();
+    private static final Map<String, String> RENAMES_AND_DOWNGRADES = ImmutableMap.<String, String>builder().put("structure_references", "empty").put("biomes", "empty").put("base", "surface").put("carved", "carvers").put("liquid_carved", "liquid_carvers").put("decorated", "features").put("lighted", "light").put("mobs_spawned", "spawn").put("finalized", "heightmaps").put("fullchunk", "full").build();
 
     public ChunkStatusFix2(Schema schema, boolean flag) {
         super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
index 6f6f66b5c027f654d4e647d7a113a8f4d34dcc55..b9d35e03e1cae68b261763a05d8ec395e606505c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ChunkStructuresTemplateRenameFix.java
@@ -10,7 +10,7 @@ import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Dynamic;
 
 public class ChunkStructuresTemplateRenameFix extends DataFix {
-    private static final ImmutableMap<String, Pair<String, ImmutableMap<String, String>>> RENAMES = ImmutableMap.builder().put("EndCity", Pair.of("ECP", ImmutableMap.builder().put("second_floor", "second_floor_1").put("third_floor", "third_floor_1").put("third_floor_c", "third_floor_2").build())).put("Mansion", Pair.of("WMP", ImmutableMap.builder().put("carpet_south", "carpet_south_1").put("carpet_west", "carpet_west_1").put("indoors_door", "indoors_door_1").put("indoors_wall", "indoors_wall_1").build())).put("Igloo", Pair.of("Iglu", ImmutableMap.builder().put("minecraft:igloo/igloo_bottom", "minecraft:igloo/bottom").put("minecraft:igloo/igloo_middle", "minecraft:igloo/middle").put("minecraft:igloo/igloo_top", "minecraft:igloo/top").build())).put("Ocean_Ruin", Pair.of("ORP", ImmutableMap.builder().put("minecraft:ruin/big_ruin1_brick", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_ruin2_brick", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_ruin3_brick", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_ruin8_brick", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_ruin1_cracked", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_ruin2_cracked", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_ruin3_cracked", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_ruin8_cracked", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_ruin1_mossy", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_ruin2_mossy", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_ruin3_mossy", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_ruin8_mossy", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_ruin_warm4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_ruin_warm5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_ruin_warm6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_ruin_warm7", "minecraft:underwater_ruin/big_warm_7").put("minecraft:ruin/ruin1_brick", "minecraft:underwater_ruin/brick_1").put("minecraft:ruin/ruin2_brick", "minecraft:underwater_ruin/brick_2").put("minecraft:ruin/ruin3_brick", "minecraft:underwater_ruin/brick_3").put("minecraft:ruin/ruin4_brick", "minecraft:underwater_ruin/brick_4").put("minecraft:ruin/ruin5_brick", "minecraft:underwater_ruin/brick_5").put("minecraft:ruin/ruin6_brick", "minecraft:underwater_ruin/brick_6").put("minecraft:ruin/ruin7_brick", "minecraft:underwater_ruin/brick_7").put("minecraft:ruin/ruin8_brick", "minecraft:underwater_ruin/brick_8").put("minecraft:ruin/ruin1_cracked", "minecraft:underwater_ruin/cracked_1").put("minecraft:ruin/ruin2_cracked", "minecraft:underwater_ruin/cracked_2").put("minecraft:ruin/ruin3_cracked", "minecraft:underwater_ruin/cracked_3").put("minecraft:ruin/ruin4_cracked", "minecraft:underwater_ruin/cracked_4").put("minecraft:ruin/ruin5_cracked", "minecraft:underwater_ruin/cracked_5").put("minecraft:ruin/ruin6_cracked", "minecraft:underwater_ruin/cracked_6").put("minecraft:ruin/ruin7_cracked", "minecraft:underwater_ruin/cracked_7").put("minecraft:ruin/ruin8_cracked", "minecraft:underwater_ruin/cracked_8").put("minecraft:ruin/ruin1_mossy", "minecraft:underwater_ruin/mossy_1").put("minecraft:ruin/ruin2_mossy", "minecraft:underwater_ruin/mossy_2").put("minecraft:ruin/ruin3_mossy", "minecraft:underwater_ruin/mossy_3").put("minecraft:ruin/ruin4_mossy", "minecraft:underwater_ruin/mossy_4").put("minecraft:ruin/ruin5_mossy", "minecraft:underwater_ruin/mossy_5").put("minecraft:ruin/ruin6_mossy", "minecraft:underwater_ruin/mossy_6").put("minecraft:ruin/ruin7_mossy", "minecraft:underwater_ruin/mossy_7").put("minecraft:ruin/ruin8_mossy", "minecraft:underwater_ruin/mossy_8").put("minecraft:ruin/ruin_warm1", "minecraft:underwater_ruin/warm_1").put("minecraft:ruin/ruin_warm2", "minecraft:underwater_ruin/warm_2").put("minecraft:ruin/ruin_warm3", "minecraft:underwater_ruin/warm_3").put("minecraft:ruin/ruin_warm4", "minecraft:underwater_ruin/warm_4").put("minecraft:ruin/ruin_warm5", "minecraft:underwater_ruin/warm_5").put("minecraft:ruin/ruin_warm6", "minecraft:underwater_ruin/warm_6").put("minecraft:ruin/ruin_warm7", "minecraft:underwater_ruin/warm_7").put("minecraft:ruin/ruin_warm8", "minecraft:underwater_ruin/warm_8").put("minecraft:ruin/big_brick_1", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_brick_2", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_brick_3", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_brick_8", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_mossy_1", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_mossy_2", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_mossy_3", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_mossy_8", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_cracked_1", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_cracked_2", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_cracked_3", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_cracked_8", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_warm_4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_warm_5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_warm_6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_warm_7", "minecraft:underwater_ruin/big_warm_7").build())).build();
+    private static final ImmutableMap<String, Pair<String, ImmutableMap<String, String>>> RENAMES = ImmutableMap.<String, Pair<String, ImmutableMap<String, String>>>builder().put("EndCity", Pair.of("ECP", ImmutableMap.<String, String>builder().put("second_floor", "second_floor_1").put("third_floor", "third_floor_1").put("third_floor_c", "third_floor_2").build())).put("Mansion", Pair.of("WMP", ImmutableMap.<String, String>builder().put("carpet_south", "carpet_south_1").put("carpet_west", "carpet_west_1").put("indoors_door", "indoors_door_1").put("indoors_wall", "indoors_wall_1").build())).put("Igloo", Pair.of("Iglu", ImmutableMap.<String, String>builder().put("minecraft:igloo/igloo_bottom", "minecraft:igloo/bottom").put("minecraft:igloo/igloo_middle", "minecraft:igloo/middle").put("minecraft:igloo/igloo_top", "minecraft:igloo/top").build())).put("Ocean_Ruin", Pair.of("ORP", ImmutableMap.<String, String>builder().put("minecraft:ruin/big_ruin1_brick", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_ruin2_brick", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_ruin3_brick", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_ruin8_brick", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_ruin1_cracked", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_ruin2_cracked", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_ruin3_cracked", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_ruin8_cracked", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_ruin1_mossy", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_ruin2_mossy", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_ruin3_mossy", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_ruin8_mossy", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_ruin_warm4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_ruin_warm5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_ruin_warm6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_ruin_warm7", "minecraft:underwater_ruin/big_warm_7").put("minecraft:ruin/ruin1_brick", "minecraft:underwater_ruin/brick_1").put("minecraft:ruin/ruin2_brick", "minecraft:underwater_ruin/brick_2").put("minecraft:ruin/ruin3_brick", "minecraft:underwater_ruin/brick_3").put("minecraft:ruin/ruin4_brick", "minecraft:underwater_ruin/brick_4").put("minecraft:ruin/ruin5_brick", "minecraft:underwater_ruin/brick_5").put("minecraft:ruin/ruin6_brick", "minecraft:underwater_ruin/brick_6").put("minecraft:ruin/ruin7_brick", "minecraft:underwater_ruin/brick_7").put("minecraft:ruin/ruin8_brick", "minecraft:underwater_ruin/brick_8").put("minecraft:ruin/ruin1_cracked", "minecraft:underwater_ruin/cracked_1").put("minecraft:ruin/ruin2_cracked", "minecraft:underwater_ruin/cracked_2").put("minecraft:ruin/ruin3_cracked", "minecraft:underwater_ruin/cracked_3").put("minecraft:ruin/ruin4_cracked", "minecraft:underwater_ruin/cracked_4").put("minecraft:ruin/ruin5_cracked", "minecraft:underwater_ruin/cracked_5").put("minecraft:ruin/ruin6_cracked", "minecraft:underwater_ruin/cracked_6").put("minecraft:ruin/ruin7_cracked", "minecraft:underwater_ruin/cracked_7").put("minecraft:ruin/ruin8_cracked", "minecraft:underwater_ruin/cracked_8").put("minecraft:ruin/ruin1_mossy", "minecraft:underwater_ruin/mossy_1").put("minecraft:ruin/ruin2_mossy", "minecraft:underwater_ruin/mossy_2").put("minecraft:ruin/ruin3_mossy", "minecraft:underwater_ruin/mossy_3").put("minecraft:ruin/ruin4_mossy", "minecraft:underwater_ruin/mossy_4").put("minecraft:ruin/ruin5_mossy", "minecraft:underwater_ruin/mossy_5").put("minecraft:ruin/ruin6_mossy", "minecraft:underwater_ruin/mossy_6").put("minecraft:ruin/ruin7_mossy", "minecraft:underwater_ruin/mossy_7").put("minecraft:ruin/ruin8_mossy", "minecraft:underwater_ruin/mossy_8").put("minecraft:ruin/ruin_warm1", "minecraft:underwater_ruin/warm_1").put("minecraft:ruin/ruin_warm2", "minecraft:underwater_ruin/warm_2").put("minecraft:ruin/ruin_warm3", "minecraft:underwater_ruin/warm_3").put("minecraft:ruin/ruin_warm4", "minecraft:underwater_ruin/warm_4").put("minecraft:ruin/ruin_warm5", "minecraft:underwater_ruin/warm_5").put("minecraft:ruin/ruin_warm6", "minecraft:underwater_ruin/warm_6").put("minecraft:ruin/ruin_warm7", "minecraft:underwater_ruin/warm_7").put("minecraft:ruin/ruin_warm8", "minecraft:underwater_ruin/warm_8").put("minecraft:ruin/big_brick_1", "minecraft:underwater_ruin/big_brick_1").put("minecraft:ruin/big_brick_2", "minecraft:underwater_ruin/big_brick_2").put("minecraft:ruin/big_brick_3", "minecraft:underwater_ruin/big_brick_3").put("minecraft:ruin/big_brick_8", "minecraft:underwater_ruin/big_brick_8").put("minecraft:ruin/big_mossy_1", "minecraft:underwater_ruin/big_mossy_1").put("minecraft:ruin/big_mossy_2", "minecraft:underwater_ruin/big_mossy_2").put("minecraft:ruin/big_mossy_3", "minecraft:underwater_ruin/big_mossy_3").put("minecraft:ruin/big_mossy_8", "minecraft:underwater_ruin/big_mossy_8").put("minecraft:ruin/big_cracked_1", "minecraft:underwater_ruin/big_cracked_1").put("minecraft:ruin/big_cracked_2", "minecraft:underwater_ruin/big_cracked_2").put("minecraft:ruin/big_cracked_3", "minecraft:underwater_ruin/big_cracked_3").put("minecraft:ruin/big_cracked_8", "minecraft:underwater_ruin/big_cracked_8").put("minecraft:ruin/big_warm_4", "minecraft:underwater_ruin/big_warm_4").put("minecraft:ruin/big_warm_5", "minecraft:underwater_ruin/big_warm_5").put("minecraft:ruin/big_warm_6", "minecraft:underwater_ruin/big_warm_6").put("minecraft:ruin/big_warm_7", "minecraft:underwater_ruin/big_warm_7").build())).build();
 
     public ChunkStructuresTemplateRenameFix(Schema schema, boolean flag) {
         super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/CriteriaRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/CriteriaRenameFix.java
index 0961208ca793a73d6cd5748a66bb8bfe2bf228ac..087fa9ee5edfded7ab221a55195a09b3ae570364 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/CriteriaRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/CriteriaRenameFix.java
@@ -25,6 +25,6 @@ public class CriteriaRenameFix extends DataFix {
     }
 
     private Dynamic<?> fixAdvancements(Dynamic<?> dynamic) {
-        return dynamic.update(this.advancementId, (dynamicx) -> dynamicx.update("criteria", (dynamic) -> dynamic.updateMapValues((pair) -> pair.mapFirst((dynamic) -> DataFixUtils.orElse(dynamic.asString().map((s) -> dynamic.createString((String)this.conversions.apply(s))).result(), dynamic)))));
+        return dynamic.update(this.advancementId, (dynamicx) -> dynamicx.update("criteria", (dynamicIn) -> dynamicIn.updateMapValues((pair) -> pair.mapFirst((dynamicInIn) -> DataFixUtils.orElse(dynamicInIn.asString().map((s) -> dynamicInIn.createString((String)this.conversions.apply(s))).result(), dynamicInIn)))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
index 4ab4d69d5c574bd93515975ee8dfa8fdaf232f27..e28af5a88e772514f8962487e0a4fabdffd04637 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/DyeItemRenameFix.java
@@ -4,5 +4,5 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class DyeItemRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:cactus_green", "minecraft:green_dye").put("minecraft:rose_red", "minecraft:red_dye").put("minecraft:dandelion_yellow", "minecraft:yellow_dye").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:cactus_green", "minecraft:green_dye").put("minecraft:rose_red", "minecraft:red_dye").put("minecraft:dandelion_yellow", "minecraft:yellow_dye").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
index 92158735b92e2909780e3fede25bf1ae8de1e675..af73844c1130dd7ef042bcb7bca4d78dc01e53a8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityBlockStateFix.java
@@ -319,7 +319,7 @@ public class EntityBlockStateFix extends DataFix {
         Type<Either<Pair<String, Dynamic<?>>, Unit>> type2 = DSL.optional(DSL.field("BlockState", DSL.named(References.BLOCK_STATE.typeName(), DSL.remainderType())));
         Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
         return typed.update(type.finder(), type2, (either) -> {
-            int i = either.map((pair) -> (Integer)((Either)pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId), (unit) -> {
+            int i = either.map((pair) -> (Integer)pair.getSecond().map((integer) -> integer, EntityBlockStateFix::getBlockId), (unit) -> {
                 Optional<Number> optional = dynamic.get("TileID").asNumber().result();
                 return (Integer)optional.map(Number::intValue).orElseGet(() -> dynamic.get("Tile").asByte((byte)0) & 255);
             });
@@ -333,7 +333,7 @@ public class EntityBlockStateFix extends DataFix {
         Type<Pair<String, Dynamic<?>>> type2 = DSL.field(s3, DSL.named(References.BLOCK_STATE.typeName(), DSL.remainderType()));
         Dynamic<?> dynamic = typed.getOrCreate(DSL.remainderFinder());
         return typed.update(type.finder(), type2, (pair) -> {
-            int i = ((Either)pair.getSecond()).map((integer) -> integer, EntityBlockStateFix::getBlockId);
+            int i = pair.getSecond().map((integer) -> integer, EntityBlockStateFix::getBlockId);
             int i2 = dynamic.get(s2).asInt(0) & 15;
             return Pair.of(References.BLOCK_STATE.typeName(), BlockStateData.getTag(i << 4 | i2));
         }).set(DSL.remainderFinder(), dynamic.remove(s2));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
index 18834f82dd1bbdec870ffb20ff204006625c0c4f..aaf599a4ede02e6640d5ec2112854b0025f3eba7 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityCodSalmonFix.java
@@ -5,8 +5,8 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class EntityCodSalmonFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:salmon_mob", "minecraft:salmon").put("minecraft:cod_mob", "minecraft:cod").build();
-    public static final Map<String, String> RENAMED_EGG_IDS = ImmutableMap.builder().put("minecraft:salmon_mob_spawn_egg", "minecraft:salmon_spawn_egg").put("minecraft:cod_mob_spawn_egg", "minecraft:cod_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:salmon_mob", "minecraft:salmon").put("minecraft:cod_mob", "minecraft:cod").build();
+    public static final Map<String, String> RENAMED_EGG_IDS = ImmutableMap.<String, String>builder().put("minecraft:salmon_mob_spawn_egg", "minecraft:salmon_spawn_egg").put("minecraft:cod_mob_spawn_egg", "minecraft:cod_spawn_egg").build();
 
     public EntityCodSalmonFix(Schema schema, boolean flag) {
         super("EntityCodSalmonFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
index 9b356f76bd14ff1be82f2bb96f56c81856bd7ef7..13d655e21897e26c9c517d418d97ada610f45a65 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
@@ -39,11 +39,11 @@ public class EntityEquipmentToArmorAndHandFix extends DataFix {
                 List<IS> list = optional.get();
                 IS object = (IS)(type.read(dynamic.emptyMap()).result().orElseThrow(() -> new IllegalStateException("Could not parse newly created empty itemstack."))).getFirst();
                 if (!list.isEmpty()) {
-                    either = Either.left(Lists.newArrayList(new Object[]{list.get(0), object}));
+                    either = Either.left(Lists.newArrayList(list.get(0), object));
                 }
 
                 if (list.size() > 1) {
-                    List<IS> list2 = Lists.newArrayList(new Object[]{object, object, object, object});
+                    List<IS> list2 = Lists.newArrayList(object, object, object, object);
 
                     for(int i = 1; i < Math.min(list.size(), 5); ++i) {
                         list2.set(i - 1, list.get(i));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
index a8fbfef3f6afdadf5545e8062d42db06f4b42250..bf9b029315f830538729572fca53127624f3603e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityIdFix.java
@@ -93,8 +93,8 @@ public class EntityIdFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
         Type<?> type2 = this.getOutputSchema().getType(References.ITEM_STACK);
         return TypeRewriteRule.seq(this.convertUnchecked("item stack entity name hook converter", type, type2), this.fixTypeEverywhere("EntityIdFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> (String)ID_MAP.getOrDefault(s, s))));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
index 75e58f5058a9ff1d5079b7eacab15b5b51776597..399b21112aadb2309d60237294fe6c72601d46eb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityMinecartIdentifiersFix.java
@@ -22,8 +22,8 @@ public class EntityMinecartIdentifiersFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         return this.fixTypeEverywhere("EntityMinecartIdentifiersFix", taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
                 if (!Objects.equals(pair.getFirst(), "Minecart")) {
                     return pair;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
index 453b2647c3cdeebc1d50ef77537ef0af9a9e8293..1d530a7013cd99c3e50bc4968416cbc5c3fccbff 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityPufferfishRenameFix.java
@@ -6,7 +6,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityPufferfishRenameFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:puffer_fish_spawn_egg", "minecraft:pufferfish_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:puffer_fish_spawn_egg", "minecraft:pufferfish_spawn_egg").build();
 
     public EntityPufferfishRenameFix(Schema schema, boolean flag) {
         super("EntityPufferfishRenameFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
index 477a371e3a3c19aa1387832b89a86bcec2a1513e..a3d6ed68db43948cb432183519b2225abfbd4394 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRavagerRenameFix.java
@@ -6,7 +6,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityRavagerRenameFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:illager_beast_spawn_egg", "minecraft:ravager_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:illager_beast_spawn_egg", "minecraft:ravager_spawn_egg").build();
 
     public EntityRavagerRenameFix(Schema schema, boolean flag) {
         super("EntityRavagerRenameFix", schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
index 102d7f8a20f6d078dc582b59c895958527935e03..d9e7c0a5c92cd5a3d6dfea4db6fe3f03a9d9c430 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRenameFix.java
@@ -19,8 +19,8 @@ public abstract class EntityRenameFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         return this.fixTypeEverywhere(this.name, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> {
                 String s = (String)pair.getFirst();
                 Type<?> type = (Type)taggedChoiceType.types().get(s);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
index fcec410d58261228c85dc7e8800d886ef43b79cb..8ea7b0eb6b499cf86e97d1450e2b7b8dea11dafe 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
@@ -61,7 +61,7 @@ public class EntityRidingToPassengersFix extends DataFix {
                             return optional.orElseThrow(() -> new IllegalStateException("Should always have an entity tree here"));
                         }
 
-                        pair2 = (new Typed(type, dynamicOps, optional2.get())).getOptional(opticFinder).orElseThrow(() -> new IllegalStateException("Should always have an entity here"));
+                        pair2 = (new Typed<>(type, dynamicOps, optional2.get())).getOptional(opticFinder).orElseThrow(() -> new IllegalStateException("Should always have an entity here"));
                     }
                 }), this.writeAndRead("player RootVehicle injecter", type8, type9));
         }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
index 99f3abf08cd8d6118a8f05f16c3753ec8c68eb2f..3aa084bfaedb9633727b54fa6001ee407e2bb456 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityTheRenameningFix.java
@@ -5,9 +5,9 @@ import com.mojang.datafixers.schemas.Schema;
 import java.util.Map;
 
 public class EntityTheRenameningFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:commandblock_minecart", "minecraft:command_block_minecart").put("minecraft:ender_crystal", "minecraft:end_crystal").put("minecraft:snowman", "minecraft:snow_golem").put("minecraft:evocation_illager", "minecraft:evoker").put("minecraft:evocation_fangs", "minecraft:evoker_fangs").put("minecraft:illusion_illager", "minecraft:illusioner").put("minecraft:vindication_illager", "minecraft:vindicator").put("minecraft:villager_golem", "minecraft:iron_golem").put("minecraft:xp_orb", "minecraft:experience_orb").put("minecraft:xp_bottle", "minecraft:experience_bottle").put("minecraft:eye_of_ender_signal", "minecraft:eye_of_ender").put("minecraft:fireworks_rocket", "minecraft:firework_rocket").build();
-    public static final Map<String, String> RENAMED_BLOCKS = ImmutableMap.builder().put("minecraft:portal", "minecraft:nether_portal").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:stripped_oak_bark", "minecraft:stripped_oak_wood").put("minecraft:stripped_spruce_bark", "minecraft:stripped_spruce_wood").put("minecraft:stripped_birch_bark", "minecraft:stripped_birch_wood").put("minecraft:stripped_jungle_bark", "minecraft:stripped_jungle_wood").put("minecraft:stripped_acacia_bark", "minecraft:stripped_acacia_wood").put("minecraft:stripped_dark_oak_bark", "minecraft:stripped_dark_oak_wood").put("minecraft:mob_spawner", "minecraft:spawner").build();
-    public static final Map<String, String> RENAMED_ITEMS = ImmutableMap.builder().putAll(RENAMED_BLOCKS).put("minecraft:clownfish", "minecraft:tropical_fish").put("minecraft:chorus_fruit_popped", "minecraft:popped_chorus_fruit").put("minecraft:evocation_illager_spawn_egg", "minecraft:evoker_spawn_egg").put("minecraft:vindication_illager_spawn_egg", "minecraft:vindicator_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:commandblock_minecart", "minecraft:command_block_minecart").put("minecraft:ender_crystal", "minecraft:end_crystal").put("minecraft:snowman", "minecraft:snow_golem").put("minecraft:evocation_illager", "minecraft:evoker").put("minecraft:evocation_fangs", "minecraft:evoker_fangs").put("minecraft:illusion_illager", "minecraft:illusioner").put("minecraft:vindication_illager", "minecraft:vindicator").put("minecraft:villager_golem", "minecraft:iron_golem").put("minecraft:xp_orb", "minecraft:experience_orb").put("minecraft:xp_bottle", "minecraft:experience_bottle").put("minecraft:eye_of_ender_signal", "minecraft:eye_of_ender").put("minecraft:fireworks_rocket", "minecraft:firework_rocket").build();
+    public static final Map<String, String> RENAMED_BLOCKS = ImmutableMap.<String, String>builder().put("minecraft:portal", "minecraft:nether_portal").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:stripped_oak_bark", "minecraft:stripped_oak_wood").put("minecraft:stripped_spruce_bark", "minecraft:stripped_spruce_wood").put("minecraft:stripped_birch_bark", "minecraft:stripped_birch_wood").put("minecraft:stripped_jungle_bark", "minecraft:stripped_jungle_wood").put("minecraft:stripped_acacia_bark", "minecraft:stripped_acacia_wood").put("minecraft:stripped_dark_oak_bark", "minecraft:stripped_dark_oak_wood").put("minecraft:mob_spawner", "minecraft:spawner").build();
+    public static final Map<String, String> RENAMED_ITEMS = ImmutableMap.<String, String>builder().putAll(RENAMED_BLOCKS).put("minecraft:clownfish", "minecraft:tropical_fish").put("minecraft:chorus_fruit_popped", "minecraft:popped_chorus_fruit").put("minecraft:evocation_illager_spawn_egg", "minecraft:evoker_spawn_egg").put("minecraft:vindication_illager_spawn_egg", "minecraft:vindicator_spawn_egg").build();
     private static final String MINECRAFT_BRED = "minecraft:bred_";
 
     public EntityTheRenameningFix(Schema schema, boolean flag) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
index 3519f81d2b5fe2a381cf3cf38a298ebfd07e175a..a08f9bc5fe0a7666a119e67b4db3b143e39d08e1 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityUUIDFix.java
@@ -65,9 +65,9 @@ public class EntityUUIDFix extends AbstractUUIDFix {
     }
 
     private static Dynamic<?> updatePiglin(Dynamic<?> dynamic) {
-        return dynamic.update("Brain", (dynamicx) -> dynamicx.update("memories", (dynamic) -> dynamic.update("minecraft:angry_at", (dynamicx) -> replaceUUIDString(dynamicx, "value", "value").orElseGet(() -> {
+        return dynamic.update("Brain", (dynamicx) -> dynamicx.update("memories", (dynamicIn) -> dynamicIn.update("minecraft:angry_at", (dynamicIn2) -> replaceUUIDString(dynamicIn2, "value", "value").orElseGet(() -> {
                         LOGGER.warn("angry_at has no value.");
-                        return dynamicx;
+                        return dynamicIn2;
                     }))));
     }
 
@@ -120,7 +120,7 @@ public class EntityUUIDFix extends AbstractUUIDFix {
     }
 
     public static Dynamic<?> updateLivingEntity(Dynamic<?> dynamic) {
-        return dynamic.update("Attributes", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> dynamicx.update("Modifiers", (dynamic2) -> dynamicx.createList(dynamic2.asStream().map((dynamic) -> replaceUUIDLeastMost(dynamic, "UUID", "UUID").orElse(dynamic)))))));
+        return dynamic.update("Attributes", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> dynamicx.update("Modifiers", (dynamicIn2) -> dynamicx.createList(dynamicIn2.asStream().map((dynamicIn3) -> replaceUUIDLeastMost(dynamicIn3, "UUID", "UUID").orElse(dynamicIn3)))))));
     }
 
     private static Dynamic<?> updateProjectile(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityVariantFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityVariantFix.java
index f177a1ea7456c472526cf9f90d5d9e302201cc98..8009dcc7f635780f7331058f22e0128ea51dbe20 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityVariantFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityVariantFix.java
@@ -23,7 +23,7 @@ public class EntityVariantFix extends NamedEntityFix {
     private static <T> Dynamic<T> updateAndRename(Dynamic<T> dynamic, String s, String s2, Function<Dynamic<T>, Dynamic<T>> function) {
         return dynamic.map((object) -> {
             DynamicOps<T> dynamicOps = dynamic.getOps();
-            Function<T, T> function2 = (objectx) -> (function.apply(new Dynamic(dynamicOps, objectx))).getValue();
+            Function<T, T> function2 = (objectx) -> (function.apply(new Dynamic<>(dynamicOps, objectx))).getValue();
             return dynamicOps.get(object, s).map((object2) -> dynamicOps.set(object, s2, function2.apply(object2))).result().orElse(object);
         });
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
index 474d047f94a638d026010f7b19ad3b1c14f66e41..86b7ab5bb3b298948ed8578d2eb8fb7dc7f5ff31 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/EntityZombifiedPiglinRenameFix.java
@@ -6,7 +6,7 @@ import java.util.Map;
 import java.util.Objects;
 
 public class EntityZombifiedPiglinRenameFix extends SimplestEntityRenameFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:zombie_pigman_spawn_egg", "minecraft:zombified_piglin_spawn_egg").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:zombie_pigman_spawn_egg", "minecraft:zombified_piglin_spawn_egg").build();
 
     public EntityZombifiedPiglinRenameFix(Schema schema) {
         super("EntityZombifiedPiglinRenameFix", schema, true);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/FeatureFlagRemoveFix.java b/src/main/java/net/minecraft/util/datafix/fixes/FeatureFlagRemoveFix.java
index 201be7f77681cec25aefe2d82b1327c6157d0270..8b76b7bb10de58e9d76a891e9fb4196cf05c4b21 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/FeatureFlagRemoveFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/FeatureFlagRemoveFix.java
@@ -28,8 +28,8 @@ public class FeatureFlagRemoveFix extends DataFix {
 
     private <T> Dynamic<T> fixTag(Dynamic<T> dynamic) {
         List<Dynamic<T>> list = dynamic.get("removed_features").asStream().collect(Collectors.toCollection(ArrayList::new));
-        Dynamic<T> dynamic2 = dynamic.update("enabled_features", (dynamic2x) -> DataFixUtils.orElse(dynamic2x.asStreamOpt().result().map((stream) -> stream.filter((dynamic2) -> {
-                    Optional<String> optional = dynamic2.asString().result();
+        Dynamic<T> dynamic2 = dynamic.update("enabled_features", (dynamic2x) -> DataFixUtils.orElse(dynamic2x.asStreamOpt().result().map((stream) -> stream.filter((dynamic2In) -> {
+                    Optional<String> optional = dynamic2In.asString().result();
                     if (optional.isEmpty()) {
                         return true;
                     } else {
@@ -47,4 +47,4 @@ public class FeatureFlagRemoveFix extends DataFix {
 
         return dynamic2;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java b/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
index 7b3b50ba4d430b200f791b8c41392e9d7b9b0981..731f5c89fba9dd9e5e595e0370ecfe79b30160cb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ForcePoiRebuild.java
@@ -24,6 +24,6 @@ public class ForcePoiRebuild extends DataFix {
     }
 
     private static <T> Dynamic<T> cap(Dynamic<T> dynamic) {
-        return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.remove("Valid"))));
+        return dynamic.update("Sections", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond(((dynamicIn) -> dynamicIn.remove("Valid")))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
index 29a0c27bad66157a3b6f92bf08c7c8b40f046826..2f4aeef113caa0aba4e30c3dd29cbd445f4b3c21 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/FurnaceRecipeFix.java
@@ -50,8 +50,8 @@ public class FurnaceRecipeFix extends DataFix {
             int i3 = dynamic.get(s2).asInt(0);
             if (i3 > 0) {
                 optional.ifPresent((dynamicx) -> {
-                    Optional<? extends Pair<R, ? extends Dynamic<?>>> optional = type.read(dynamicx).result();
-                    optional.ifPresent((pair) -> list.add(Pair.of(pair.getFirst(), i3)));
+                    Optional<? extends Pair<R, ? extends Dynamic<?>>> optionalIn = type.read(dynamicx).result();
+                    optionalIn.ifPresent((pair) -> list.add(Pair.of(pair.getFirst(), i3)));
                 });
             }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
index 52e51a0a76a5b73f0d9daa7dae770dbf56d26c6f..d496524f3cc41951a463691a7df6a5e43a3fd57a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/GossipUUIDFix.java
@@ -12,6 +12,6 @@ public class GossipUUIDFix extends NamedEntityFix {
     }
 
     protected Typed<?> fix(Typed<?> typed) {
-        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Gossips", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamic) -> AbstractUUIDFix.replaceUUIDLeastMost(dynamic, "Target", "Target").orElse(dynamic))).map(dynamicx::createList), dynamicx)));
+        return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("Gossips", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().result().map((stream) -> stream.map((dynamicIn) -> AbstractUUIDFix.replaceUUIDLeastMost(dynamicIn, "Target", "Target").orElse(dynamicIn))).map(dynamicx::createList), dynamicx)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java b/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
index 80861c3345c4176567cebbf4553a4724ec4cccb5..9c2b1290b8f0e1d48464d40070878925f2d7a106 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/IglooMetadataRemovalFix.java
@@ -23,7 +23,7 @@ public class IglooMetadataRemovalFix extends DataFix {
     }
 
     private static <T> Dynamic<T> removeIglooPieces(Dynamic<T> dynamic) {
-        return dynamic.asStreamOpt().map((stream) -> stream.filter((dynamic) -> !isIglooPiece(dynamic))).map(dynamic::createList).result().orElse(dynamic);
+        return dynamic.asStreamOpt().map((stream) -> stream.filter((dynamicIn) -> !isIglooPiece(dynamicIn))).map(dynamic::createList).result().orElse(dynamic);
     }
 
     private static boolean isIglooPiece(Dynamic<?> dynamic) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
index f9968693cae8a91abf865edcd4ec060a1a21bd4d..e935d8483458e48d6a1a6a2f84255f2d5c06e0fc 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemLoreFix.java
@@ -19,7 +19,7 @@ public class ItemLoreFix extends DataFix {
     protected TypeRewriteRule makeRule() {
         Type<?> type = this.getInputSchema().getType(References.ITEM_STACK);
         OpticFinder<?> opticFinder = type.findField("tag");
-        return this.fixTypeEverywhereTyped("Item Lore componentize", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("display", (dynamicx) -> dynamicx.update("Lore", (dynamic) -> DataFixUtils.orElse(dynamic.asStreamOpt().map(ItemLoreFix::fixLoreList).map(dynamic::createList).result(), dynamic))))));
+        return this.fixTypeEverywhereTyped("Item Lore componentize", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("display", (dynamicx) -> dynamicx.update("Lore", (dynamicIn) -> DataFixUtils.orElse(dynamicIn.asStreamOpt().map(ItemLoreFix::fixLoreList).map(dynamicIn::createList).result(), dynamicIn))))));
     }
 
     private static <T> Stream<Dynamic<T>> fixLoreList(Stream<Dynamic<T>> stream) {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
index c407f82326ff631ac1fb1344a41a5a87e6e07d0f..fed9a916b296910074bea760c4ba5991c0df47fe 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
@@ -61,11 +61,11 @@ public class ItemStackEnchantmentNamesFix extends DataFix {
     }
 
     private Dynamic<?> fixTag(Dynamic<?> dynamic) {
-        Optional<? extends Dynamic<?>> optional = dynamic.get("ench").asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.set("id", dynamic.createString((String)MAP.getOrDefault(dynamic.get("id").asInt(0), "null"))))).map(dynamic::createList).result();
+        Optional<? extends Dynamic<?>> optional = dynamic.get("ench").asStreamOpt().map((stream) -> stream.map((dynamicIn) -> dynamicIn.set("id", dynamicIn.createString((String)MAP.getOrDefault(dynamicIn.get("id").asInt(0), "null"))))).map(dynamic::createList).result();
         if (optional.isPresent()) {
             dynamic = dynamic.remove("ench").set("Enchantments", optional.get());
         }
 
-        return dynamic.update("StoredEnchantments", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamic) -> dynamic.set("id", dynamic.createString((String)MAP.getOrDefault(dynamic.get("id").asInt(0), "null"))))).map(dynamicx::createList).result(), dynamicx));
+        return dynamic.update("StoredEnchantments", (dynamicx) -> DataFixUtils.orElse(dynamicx.asStreamOpt().map((stream) -> stream.map((dynamicIn) -> dynamicIn.set("id", dynamicIn.createString((String)MAP.getOrDefault(dynamicIn.get("id").asInt(0), "null"))))).map(dynamicx::createList).result(), dynamicx));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
index c7a097794c5febbef3a6a997866345f0765cbe5c..f1545e1e276b05489f1564993804c6cecc42c22a 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemWrittenBookPagesStrictJsonFix.java
@@ -19,11 +19,11 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix {
     }
 
     public Dynamic<?> fixTag(Dynamic<?> dynamic) {
-        return dynamic.update("pages", (dynamic2) -> DataFixUtils.orElse(dynamic2.asStreamOpt().map((stream) -> stream.map((dynamic) -> {
-                    if (dynamic.asString().result().isEmpty()) {
-                        return dynamic;
+        return dynamic.update("pages", (dynamic2) -> DataFixUtils.orElse(dynamic2.asStreamOpt().map((stream) -> stream.map((dynamicIn) -> {
+                    if (dynamicIn.asString().result().isEmpty()) {
+                        return dynamicIn;
                     } else {
-                        String s = dynamic.asString("");
+                        String s = dynamicIn.asString("");
                         Component component = null;
                         if (!"null".equals(s) && !StringUtils.isEmpty(s)) {
                             if (s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"' || s.charAt(0) == '{' && s.charAt(s.length() - 1) == '}') {
@@ -59,7 +59,7 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix {
                             component = CommonComponents.EMPTY;
                         }
 
-                        return dynamic.createString(Component.Serializer.toJson(component));
+                        return dynamicIn.createString(Component.Serializer.toJson(component));
                     }
                 })).map(dynamic::createList).result(), dynamic.emptyList()));
     }
@@ -69,4 +69,4 @@ public class ItemWrittenBookPagesStrictJsonFix extends DataFix {
         OpticFinder<?> opticFinder = type.findField("tag");
         return this.fixTypeEverywhereTyped("ItemWrittenBookPagesStrictJsonFix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.update(DSL.remainderFinder(), this::fixTag)));
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java b/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
index c3c2e1e17d000e76d818807ad112dde8c21347f6..0cb5d6f58b66472a555479a7c66912f43371c10f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/JigsawRotationFix.java
@@ -10,7 +10,7 @@ import java.util.Map;
 import java.util.Optional;
 
 public class JigsawRotationFix extends DataFix {
-    private static final Map<String, String> RENAMES = ImmutableMap.builder().put("down", "down_south").put("up", "up_north").put("north", "north_up").put("south", "south_up").put("west", "west_up").put("east", "east_up").build();
+    private static final Map<String, String> RENAMES = ImmutableMap.<String, String>builder().put("down", "down_south").put("up", "up_north").put("north", "north_up").put("south", "south_up").put("west", "west_up").put("east", "east_up").build();
 
     public JigsawRotationFix(Schema schema, boolean flag) {
         super(schema, flag);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
index 7183ae5fb148fe4efd42af474ffe16bc437cb277..629cc5e62d2c1d3b4a21851c54f3b66fe0409232 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LeavesFix.java
@@ -73,10 +73,10 @@ public class LeavesFix extends DataFix {
             OpticFinder<?> opticFinder3 = DSL.typeFinder(type3);
             return this.fixTypeEverywhereTyped("Leaves fix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> {
                     int[] ints = new int[]{0};
-                    Typed<?> typed2 = typedx.updateTyped(opticFinder2, (typed) -> {
-                        Int2ObjectMap<LeavesFix.LeavesSection> int2ObjectMap = new Int2ObjectOpenHashMap(typed.getAllTyped(opticFinder3).stream().map((typedx) -> new LeavesFix.LeavesSection(typedx, this.getInputSchema())).collect(Collectors.toMap(LeavesFix.Section::getIndex, (leavesSection) -> leavesSection)));
+                    Typed<?> typed2 = typedx.updateTyped(opticFinder2, (typedIn) -> {
+                        Int2ObjectMap<LeavesFix.LeavesSection> int2ObjectMap = new Int2ObjectOpenHashMap(typedIn.getAllTyped(opticFinder3).stream().map((typedIn2) -> new LeavesFix.LeavesSection(typedIn2, this.getInputSchema())).collect(Collectors.toMap(LeavesFix.Section::getIndex, (leavesSection) -> leavesSection)));
                         if (int2ObjectMap.values().stream().allMatch(LeavesFix.Section::isSkippable)) {
-                            return typed;
+                            return typedIn;
                         } else {
                             List<IntSet> list = Lists.newArrayList();
 
@@ -135,7 +135,7 @@ public class LeavesFix extends DataFix {
                                 }
                             }
 
-                            return typed.updateTyped(opticFinder3, (typedx) -> ((LeavesFix.LeavesSection)int2ObjectMap.get((typedx.get(DSL.remainderFinder())).get("Y").asInt(0))).write(typedx));
+                            return typedIn.updateTyped(opticFinder3, (typedIn2) -> ((LeavesFix.LeavesSection)int2ObjectMap.get((typedIn2.get(DSL.remainderFinder())).get("Y").asInt(0))).write(typedIn2));
                         }
                     });
                     if (ints[0] != 0) {
@@ -295,7 +295,7 @@ public class LeavesFix extends DataFix {
                 throw new IllegalStateException("Block state type is not what was expected.");
             } else {
                 Optional<List<Pair<String, Dynamic<?>>>> optional = typed.getOptional(this.paletteFinder);
-                this.palette = optional.map((list) -> list.stream().map(Pair::getSecond).collect(Collectors.toList())).orElse(ImmutableList.of());
+                this.palette = (List) optional.map((list) -> list.stream().map(Pair::getSecond).collect(Collectors.toList())).orElse(ImmutableList.of());
                 Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
                 this.index = dynamic.get("Y").asInt(0);
                 this.readStorage(dynamic);
@@ -314,7 +314,7 @@ public class LeavesFix extends DataFix {
         }
 
         public Typed<?> write(Typed<?> typed) {
-            return this.isSkippable() ? typed : typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.set("BlockStates", dynamic.createLongList(Arrays.stream(this.storage.getRaw())))).set(this.paletteFinder, this.palette.stream().map((dynamic) -> Pair.of(References.BLOCK_STATE.typeName(), dynamic)).collect(Collectors.toList()));
+            return this.isSkippable() ? typed : typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.set("BlockStates", dynamic.createLongList(Arrays.stream(this.storage.getRaw())))).set((OpticFinder) this.paletteFinder, this.palette.stream().map((dynamic) -> Pair.of(References.BLOCK_STATE.typeName(), dynamic)).collect(Collectors.toList()));
         }
 
         public boolean isSkippable() {
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
index fbe410a9a98f78629775a235198bfb4bb940eb2b..6463d3f3efe1aeb27bb6b941180829a23f82b35e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelFlatGeneratorInfoFix.java
@@ -59,16 +59,16 @@ public class LevelFlatGeneratorInfoFix extends DataFix {
                 stringBuilder.append((String)StreamSupport.stream(LAYER_SPLITTER.split(s3).spliterator(), false).map((sx) -> {
                     List<String> list = splitter.splitToList(sx);
                     int i2;
-                    String s2;
+                    String s2In;
                     if (list.size() == 2) {
                         i2 = NumberUtils.toInt((String)list.get(0));
-                        s2 = (String)list.get(1);
+                        s2In = (String)list.get(1);
                     } else {
                         i2 = 1;
-                        s2 = (String)list.get(0);
+                        s2In = (String)list.get(0);
                     }
 
-                    List<String> list2 = BLOCK_SPLITTER.splitToList(s2);
+                    List<String> list2 = BLOCK_SPLITTER.splitToList(s2In);
                     int i4 = ((String)list2.get(0)).equals("minecraft") ? 1 : 0;
                     String s4 = (String)list2.get(i4);
                     int i5 = i == 3 ? EntityBlockStateFix.getBlockId("minecraft:" + s4) : NumberUtils.toInt(s4, 0);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
index cfda875528ebd1dbcc4c82b67a5eece8e0076ca0..c6f5290e7d21b49f57277663212aaa64e8f0168c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/LevelUUIDFix.java
@@ -27,13 +27,13 @@ public class LevelUUIDFix extends AbstractUUIDFix {
     }
 
     private Dynamic<?> updateDragonFight(Dynamic<?> dynamic) {
-        return dynamic.update("DimensionData", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("DragonFight", (dynamicx) -> replaceUUIDLeastMost(dynamicx, "DragonUUID", "Dragon").orElse(dynamicx)))));
+        return dynamic.update("DimensionData", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicIn) -> dynamicIn.update("DragonFight", (dynamicIn2) -> replaceUUIDLeastMost(dynamicIn2, "DragonUUID", "Dragon").orElse(dynamicIn2)))));
     }
 
     private Dynamic<?> updateCustomBossEvents(Dynamic<?> dynamic) {
-        return dynamic.update("CustomBossEvents", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamic) -> dynamic.update("Players", (dynamic2) -> dynamic.createList(dynamic2.asStream().map((dynamicx) -> createUUIDFromML(dynamicx).orElseGet(() -> {
+        return dynamic.update("CustomBossEvents", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapSecond((dynamicIn) -> dynamicIn.update("Players", (dynamic2) -> dynamicIn.createList(dynamic2.asStream().map((dynamicIn2) -> createUUIDFromML(dynamicIn2).orElseGet(() -> {
                                 LOGGER.warn("CustomBossEvents contains invalid UUIDs.");
-                                return dynamicx;
+                                return dynamicIn2;
                             })))))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java b/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
index 89eb678271618d7db17bbde0bb45aeb5cf7dde8f..d18a1ef863db159ad465a69362d296b34b9250f5 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/MissingDimensionFix.java
@@ -49,7 +49,7 @@ public class MissingDimensionFix extends DataFix {
             return this.fixTypeEverywhereTyped("MissingDimensionFix", type3, (typed) -> typed.updateTyped(fieldFinder, (typed2) -> typed2.updateTyped(opticFinder, (typed2x) -> {
                         if (!(typed2x.getValue() instanceof List)) {
                             throw new IllegalStateException("List exptected");
-                        } else if ((typed2x.getValue()).isEmpty()) {
+                        } else if (((List)typed2x.getValue()).isEmpty()) {
                             Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
                             Dynamic<?> dynamic2 = this.recreateSettings(dynamic);
                             return DataFixUtils.orElse(compoundListType.readTyped(dynamic2).result().map(Pair::getFirst), typed2x);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java b/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
index bb97f0e621add656a0c003db51c43d08f13ff7fe..bea3576e71eb7a9eb3949b2b680f2aa40cea9615 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/MobSpawnerEntityIdentifiersFix.java
@@ -32,10 +32,10 @@ public class MobSpawnerEntityIdentifiersFix extends DataFix {
 
             Optional<? extends Stream<? extends Dynamic<?>>> optional2 = dynamic.get("SpawnPotentials").asStreamOpt().result();
             if (optional2.isPresent()) {
-                dynamic = dynamic.set("SpawnPotentials", dynamic.createList(((Stream)optional2.get()).map((dynamicx) -> {
-                    Optional<String> optional = dynamicx.get("Type").asString().result();
-                    if (optional.isPresent()) {
-                        Dynamic<?> dynamic2 = (DataFixUtils.orElse(dynamicx.get("Properties").result(), dynamicx.emptyMap())).set("id", dynamicx.createString((String)optional.get()));
+                dynamic = dynamic.set("SpawnPotentials", dynamic.createList((optional2.get()).map((dynamicx) -> {
+                    Optional<String> optionalIn = dynamicx.get("Type").asString().result();
+                    if (optionalIn.isPresent()) {
+                        Dynamic<?> dynamic2 = (DataFixUtils.orElse(dynamicx.get("Properties").result(), dynamicx.emptyMap())).set("id", dynamicx.createString((String)optionalIn.get()));
                         return dynamicx.set("Entity", dynamic2).remove("Type").remove("Properties");
                     } else {
                         return dynamicx;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java b/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
index 69695f1d64c4a3da5f758e280bf676ddfb9a2149..5c016485c545b2970ad736777a03f8129f04355f 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/NewVillageFix.java
@@ -34,7 +34,7 @@ public class NewVillageFix extends DataFix {
         OpticFinder<?> opticFinder2 = opticFinder.type().findField("Structures");
         OpticFinder<?> opticFinder3 = opticFinder2.type().findField("Starts");
         OpticFinder<List<Pair<String, SF>>> opticFinder4 = compoundListType.finder();
-        return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("NewVillageFix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.updateTyped(opticFinder3, (typedx) -> typedx.update(opticFinder4, (list) -> list.stream().filter((pair) -> !Objects.equals(pair.getFirst(), "Village")).map((pair) -> pair.mapFirst((s) -> s.equals("New_Village") ? "Village" : s)).collect(Collectors.toList()))).update(DSL.remainderFinder(), (dynamic) -> dynamic.update("References", (dynamicx) -> {
+        return TypeRewriteRule.seq(this.fixTypeEverywhereTyped("NewVillageFix", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.updateTyped(opticFinder3, (typedIn2) -> typedIn2.update(opticFinder4, (list) -> list.stream().filter((pair) -> !Objects.equals(pair.getFirst(), "Village")).map((pair) -> pair.mapFirst((s) -> s.equals("New_Village") ? "Village" : s)).collect(Collectors.toList()))).update(DSL.remainderFinder(), (dynamic) -> dynamic.update("References", (dynamicx) -> {
                             Optional<? extends Dynamic<?>> optional = dynamicx.get("New_Village").result();
                             return (DataFixUtils.orElse(optional.map((dynamic2) -> dynamicx.remove("New_Village").set("Village", dynamic2)), dynamicx)).remove("Village");
                         }))))), this.fixTypeEverywhereTyped("NewVillageStartFix", type2, (typed) -> typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("id", (dynamicx) -> Objects.equals(NamespacedSchema.ensureNamespaced(dynamicx.asString("")), "minecraft:new_village") ? dynamicx.createString("minecraft:village") : dynamicx))));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
index 62fcad9c9abd9ef77737352ccb57c6085b0bcf7c..9045fe84651448810f62d8a4f40fbcc43f27c4f2 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyLwjgl3Fix.java
@@ -158,6 +158,6 @@ public class OptionsKeyLwjgl3Fix extends DataFix {
                         } else {
                             return Pair.of(entry.getKey(), entry.getValue());
                         }
-                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse(dynamic)));
+                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse((Dynamic) dynamic)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java
index 518c64d127f65bbb8f9d1bebfd38ee43bd11ec83..002e4b17d647cbdef70d1e0b275de9a4aa6592b9 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OptionsKeyTranslationFix.java
@@ -24,6 +24,6 @@ public class OptionsKeyTranslationFix extends DataFix {
                         }
 
                         return Pair.of(entry.getKey(), entry.getValue());
-                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse(dynamic)));
+                    }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)))).result().orElse((Dynamic) dynamic)));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/OverreachingTickFix.java b/src/main/java/net/minecraft/util/datafix/fixes/OverreachingTickFix.java
index 3e5170fa5b84db9e3dd96f6dcf4b3577f2bf24c6..87fcaca84f958f7ace494f3feac556f2fde88882 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/OverreachingTickFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/OverreachingTickFix.java
@@ -25,9 +25,9 @@ public class OverreachingTickFix extends DataFix {
             return typed.update(DSL.remainderFinder(), (dynamic) -> {
                 int i = dynamic.get("xPos").asInt(0);
                 int i2 = dynamic.get("zPos").asInt(0);
-                Optional<? extends Dynamic<?>> optional2 = dynamic.get("fluid_ticks").get().result();
-                dynamic = extractOverreachingTicks(dynamic, i, i2, optional2, "neighbor_block_ticks");
-                return extractOverreachingTicks(dynamic, i, i2, optional2, "neighbor_fluid_ticks");
+                Optional<? extends Dynamic<?>> optional2In = dynamic.get("fluid_ticks").get().result();
+                dynamic = extractOverreachingTicks(dynamic, i, i2, optional2In, "neighbor_block_ticks");
+                return extractOverreachingTicks(dynamic, i, i2, optional2In, "neighbor_fluid_ticks");
             });
         });
     }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
index c5648ee761cb7a1cb15ce5d7e8cbcfe9e6d67e36..02588f985ceaa62cbcb74a3b450d5b9fbeec4c02 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RecipesFix.java
@@ -4,5 +4,5 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class RecipesFix {
-    public static final Map<String, String> RECIPES = ImmutableMap.builder().put("minecraft:acacia_wooden_slab", "minecraft:acacia_slab").put("minecraft:birch_wooden_slab", "minecraft:birch_slab").put("minecraft:black_stained_hardened_clay", "minecraft:black_terracotta").put("minecraft:blue_stained_hardened_clay", "minecraft:blue_terracotta").put("minecraft:boat", "minecraft:oak_boat").put("minecraft:bone_meal_from_block", "minecraft:bone_meal_from_bone_block").put("minecraft:bone_meal_from_bone", "minecraft:bone_meal").put("minecraft:brick_block", "minecraft:bricks").put("minecraft:brown_stained_hardened_clay", "minecraft:brown_terracotta").put("minecraft:chiseled_stonebrick", "minecraft:chiseled_stone_bricks").put("minecraft:cyan_stained_hardened_clay", "minecraft:cyan_terracotta").put("minecraft:dark_oak_wooden_slab", "minecraft:dark_oak_slab").put("minecraft:end_bricks", "minecraft:end_stone_bricks").put("minecraft:fence_gate", "minecraft:oak_fence_gate").put("minecraft:fence", "minecraft:oak_fence").put("minecraft:golden_rail", "minecraft:powered_rail").put("minecraft:gold_ingot_from_block", "minecraft:gold_ingot_from_gold_block").put("minecraft:gray_stained_hardened_clay", "minecraft:gray_terracotta").put("minecraft:green_stained_hardened_clay", "minecraft:green_terracotta").put("minecraft:iron_ingot_from_block", "minecraft:iron_ingot_from_iron_block").put("minecraft:jungle_wooden_slab", "minecraft:jungle_slab").put("minecraft:light_blue_stained_hardened_clay", "minecraft:light_blue_terracotta").put("minecraft:light_gray_stained_hardened_clay", "minecraft:light_gray_terracotta").put("minecraft:lime_stained_hardened_clay", "minecraft:lime_terracotta").put("minecraft:lit_pumpkin", "minecraft:jack_o_lantern").put("minecraft:magenta_stained_hardened_clay", "minecraft:magenta_terracotta").put("minecraft:magma", "minecraft:magma_block").put("minecraft:melon_block", "minecraft:melon").put("minecraft:mossy_stonebrick", "minecraft:mossy_stone_bricks").put("minecraft:noteblock", "minecraft:note_block").put("minecraft:oak_wooden_slab", "minecraft:oak_slab").put("minecraft:orange_stained_hardened_clay", "minecraft:orange_terracotta").put("minecraft:pillar_quartz_block", "minecraft:quartz_pillar").put("minecraft:pink_stained_hardened_clay", "minecraft:pink_terracotta").put("minecraft:purple_shulker_box", "minecraft:shulker_box").put("minecraft:purple_stained_hardened_clay", "minecraft:purple_terracotta").put("minecraft:red_nether_brick", "minecraft:red_nether_bricks").put("minecraft:red_stained_hardened_clay", "minecraft:red_terracotta").put("minecraft:slime", "minecraft:slime_block").put("minecraft:smooth_red_sandstone", "minecraft:cut_red_sandstone").put("minecraft:smooth_sandstone", "minecraft:cut_sandstone").put("minecraft:snow_layer", "minecraft:snow").put("minecraft:snow", "minecraft:snow_block").put("minecraft:speckled_melon", "minecraft:glistering_melon_slice").put("minecraft:spruce_wooden_slab", "minecraft:spruce_slab").put("minecraft:stonebrick", "minecraft:stone_bricks").put("minecraft:stone_stairs", "minecraft:cobblestone_stairs").put("minecraft:string_to_wool", "minecraft:white_wool_from_string").put("minecraft:trapdoor", "minecraft:oak_trapdoor").put("minecraft:white_stained_hardened_clay", "minecraft:white_terracotta").put("minecraft:wooden_button", "minecraft:oak_button").put("minecraft:wooden_door", "minecraft:oak_door").put("minecraft:wooden_pressure_plate", "minecraft:oak_pressure_plate").put("minecraft:yellow_stained_hardened_clay", "minecraft:yellow_terracotta").build();
-}
\ No newline at end of file
+    public static final Map<String, String> RECIPES = ImmutableMap.<String, String>builder().put("minecraft:acacia_wooden_slab", "minecraft:acacia_slab").put("minecraft:birch_wooden_slab", "minecraft:birch_slab").put("minecraft:black_stained_hardened_clay", "minecraft:black_terracotta").put("minecraft:blue_stained_hardened_clay", "minecraft:blue_terracotta").put("minecraft:boat", "minecraft:oak_boat").put("minecraft:bone_meal_from_block", "minecraft:bone_meal_from_bone_block").put("minecraft:bone_meal_from_bone", "minecraft:bone_meal").put("minecraft:brick_block", "minecraft:bricks").put("minecraft:brown_stained_hardened_clay", "minecraft:brown_terracotta").put("minecraft:chiseled_stonebrick", "minecraft:chiseled_stone_bricks").put("minecraft:cyan_stained_hardened_clay", "minecraft:cyan_terracotta").put("minecraft:dark_oak_wooden_slab", "minecraft:dark_oak_slab").put("minecraft:end_bricks", "minecraft:end_stone_bricks").put("minecraft:fence_gate", "minecraft:oak_fence_gate").put("minecraft:fence", "minecraft:oak_fence").put("minecraft:golden_rail", "minecraft:powered_rail").put("minecraft:gold_ingot_from_block", "minecraft:gold_ingot_from_gold_block").put("minecraft:gray_stained_hardened_clay", "minecraft:gray_terracotta").put("minecraft:green_stained_hardened_clay", "minecraft:green_terracotta").put("minecraft:iron_ingot_from_block", "minecraft:iron_ingot_from_iron_block").put("minecraft:jungle_wooden_slab", "minecraft:jungle_slab").put("minecraft:light_blue_stained_hardened_clay", "minecraft:light_blue_terracotta").put("minecraft:light_gray_stained_hardened_clay", "minecraft:light_gray_terracotta").put("minecraft:lime_stained_hardened_clay", "minecraft:lime_terracotta").put("minecraft:lit_pumpkin", "minecraft:jack_o_lantern").put("minecraft:magenta_stained_hardened_clay", "minecraft:magenta_terracotta").put("minecraft:magma", "minecraft:magma_block").put("minecraft:melon_block", "minecraft:melon").put("minecraft:mossy_stonebrick", "minecraft:mossy_stone_bricks").put("minecraft:noteblock", "minecraft:note_block").put("minecraft:oak_wooden_slab", "minecraft:oak_slab").put("minecraft:orange_stained_hardened_clay", "minecraft:orange_terracotta").put("minecraft:pillar_quartz_block", "minecraft:quartz_pillar").put("minecraft:pink_stained_hardened_clay", "minecraft:pink_terracotta").put("minecraft:purple_shulker_box", "minecraft:shulker_box").put("minecraft:purple_stained_hardened_clay", "minecraft:purple_terracotta").put("minecraft:red_nether_brick", "minecraft:red_nether_bricks").put("minecraft:red_stained_hardened_clay", "minecraft:red_terracotta").put("minecraft:slime", "minecraft:slime_block").put("minecraft:smooth_red_sandstone", "minecraft:cut_red_sandstone").put("minecraft:smooth_sandstone", "minecraft:cut_sandstone").put("minecraft:snow_layer", "minecraft:snow").put("minecraft:snow", "minecraft:snow_block").put("minecraft:speckled_melon", "minecraft:glistering_melon_slice").put("minecraft:spruce_wooden_slab", "minecraft:spruce_slab").put("minecraft:stonebrick", "minecraft:stone_bricks").put("minecraft:stone_stairs", "minecraft:cobblestone_stairs").put("minecraft:string_to_wool", "minecraft:white_wool_from_string").put("minecraft:trapdoor", "minecraft:oak_trapdoor").put("minecraft:white_stained_hardened_clay", "minecraft:white_terracotta").put("minecraft:wooden_button", "minecraft:oak_button").put("minecraft:wooden_door", "minecraft:oak_door").put("minecraft:wooden_pressure_plate", "minecraft:oak_pressure_plate").put("minecraft:yellow_stained_hardened_clay", "minecraft:yellow_terracotta").build();
+}
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
index 996a98bd25f365f475f6a3487bbc9c9949778701..9c5a420d8a66fbae30775aa07e6c40bc2c661f03 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RecipesRenameningFix.java
@@ -4,5 +4,5 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class RecipesRenameningFix {
-    public static final Map<String, String> RECIPES = ImmutableMap.builder().put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").build();
-}
\ No newline at end of file
+    public static final Map<String, String> RECIPES = ImmutableMap.<String, String>builder().put("minecraft:acacia_bark", "minecraft:acacia_wood").put("minecraft:birch_bark", "minecraft:birch_wood").put("minecraft:dark_oak_bark", "minecraft:dark_oak_wood").put("minecraft:jungle_bark", "minecraft:jungle_wood").put("minecraft:oak_bark", "minecraft:oak_wood").put("minecraft:spruce_bark", "minecraft:spruce_wood").build();
+}
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
index fe9ccf1b7bfece293d5c3df8a299629e1cdf4e4a..f6715f7bfa1103aed8946ae4c690f94f9b91fc1b 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RedstoneWireConnectionsFix.java
@@ -23,13 +23,13 @@ public class RedstoneWireConnectionsFix extends DataFix {
             String s2 = dynamicx.get("west").asString("none");
             String s3 = dynamicx.get("north").asString("none");
             String s4 = dynamicx.get("south").asString("none");
-            boolean flag = isConnected(s) || isConnected(s2);
+            boolean flagIn = isConnected(s) || isConnected(s2);
             boolean flag2 = isConnected(s3) || isConnected(s4);
             String s5 = !isConnected(s) && !flag2 ? "side" : s;
             String s6 = !isConnected(s2) && !flag2 ? "side" : s2;
-            String s7 = !isConnected(s3) && !flag ? "side" : s3;
-            String s8 = !isConnected(s4) && !flag ? "side" : s4;
-            return dynamicx.update("east", (dynamic) -> dynamic.createString(s5)).update("west", (dynamic) -> dynamic.createString(s6)).update("north", (dynamic) -> dynamic.createString(s7)).update("south", (dynamic) -> dynamic.createString(s8));
+            String s7 = !isConnected(s3) && !flagIn ? "side" : s3;
+            String s8 = !isConnected(s4) && !flagIn ? "side" : s4;
+            return dynamicx.update("east", (dynamicIn) -> dynamicIn.createString(s5)).update("west", (dynamicIn2) -> dynamicIn2.createString(s6)).update("north", (dynamicIn3) -> dynamicIn3.createString(s7)).update("south", (dynamicIn4) -> dynamicIn4.createString(s8));
         });
     }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
index d3f00a724eed7b30be7715efb72ad96b5b054280..a50273f8c740d3d55567ee0ce7a59f65d68a258c 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFansFix.java
@@ -4,5 +4,5 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class RenamedCoralFansFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:tube_coral_fan", "minecraft:tube_coral_wall_fan").put("minecraft:brain_coral_fan", "minecraft:brain_coral_wall_fan").put("minecraft:bubble_coral_fan", "minecraft:bubble_coral_wall_fan").put("minecraft:fire_coral_fan", "minecraft:fire_coral_wall_fan").put("minecraft:horn_coral_fan", "minecraft:horn_coral_wall_fan").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:tube_coral_fan", "minecraft:tube_coral_wall_fan").put("minecraft:brain_coral_fan", "minecraft:brain_coral_wall_fan").put("minecraft:bubble_coral_fan", "minecraft:bubble_coral_wall_fan").put("minecraft:fire_coral_fan", "minecraft:fire_coral_wall_fan").put("minecraft:horn_coral_fan", "minecraft:horn_coral_wall_fan").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
index c233f609568e42e10939e3d990805a74dcf735e3..defba40c27926c5e9b9a8b6b8c55711495fcc51e 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/RenamedCoralFix.java
@@ -4,5 +4,5 @@ import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
 public class RenamedCoralFix {
-    public static final Map<String, String> RENAMED_IDS = ImmutableMap.builder().put("minecraft:blue_coral", "minecraft:tube_coral_block").put("minecraft:pink_coral", "minecraft:brain_coral_block").put("minecraft:purple_coral", "minecraft:bubble_coral_block").put("minecraft:red_coral", "minecraft:fire_coral_block").put("minecraft:yellow_coral", "minecraft:horn_coral_block").put("minecraft:blue_coral_plant", "minecraft:tube_coral").put("minecraft:pink_coral_plant", "minecraft:brain_coral").put("minecraft:purple_coral_plant", "minecraft:bubble_coral").put("minecraft:red_coral_plant", "minecraft:fire_coral").put("minecraft:yellow_coral_plant", "minecraft:horn_coral").put("minecraft:blue_coral_fan", "minecraft:tube_coral_fan").put("minecraft:pink_coral_fan", "minecraft:brain_coral_fan").put("minecraft:purple_coral_fan", "minecraft:bubble_coral_fan").put("minecraft:red_coral_fan", "minecraft:fire_coral_fan").put("minecraft:yellow_coral_fan", "minecraft:horn_coral_fan").put("minecraft:blue_dead_coral", "minecraft:dead_tube_coral").put("minecraft:pink_dead_coral", "minecraft:dead_brain_coral").put("minecraft:purple_dead_coral", "minecraft:dead_bubble_coral").put("minecraft:red_dead_coral", "minecraft:dead_fire_coral").put("minecraft:yellow_dead_coral", "minecraft:dead_horn_coral").build();
+    public static final Map<String, String> RENAMED_IDS = ImmutableMap.<String, String>builder().put("minecraft:blue_coral", "minecraft:tube_coral_block").put("minecraft:pink_coral", "minecraft:brain_coral_block").put("minecraft:purple_coral", "minecraft:bubble_coral_block").put("minecraft:red_coral", "minecraft:fire_coral_block").put("minecraft:yellow_coral", "minecraft:horn_coral_block").put("minecraft:blue_coral_plant", "minecraft:tube_coral").put("minecraft:pink_coral_plant", "minecraft:brain_coral").put("minecraft:purple_coral_plant", "minecraft:bubble_coral").put("minecraft:red_coral_plant", "minecraft:fire_coral").put("minecraft:yellow_coral_plant", "minecraft:horn_coral").put("minecraft:blue_coral_fan", "minecraft:tube_coral_fan").put("minecraft:pink_coral_fan", "minecraft:brain_coral_fan").put("minecraft:purple_coral_fan", "minecraft:bubble_coral_fan").put("minecraft:red_coral_fan", "minecraft:fire_coral_fan").put("minecraft:yellow_coral_fan", "minecraft:horn_coral_fan").put("minecraft:blue_dead_coral", "minecraft:dead_tube_coral").put("minecraft:pink_dead_coral", "minecraft:dead_brain_coral").put("minecraft:purple_dead_coral", "minecraft:dead_bubble_coral").put("minecraft:red_dead_coral", "minecraft:dead_fire_coral").put("minecraft:yellow_dead_coral", "minecraft:dead_horn_coral").build();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
index 4fa0ac4861dd66dab1fc437220e8505da0ec24be..af685fe1d8ab2a3bfa927032ab211e3685e5ed4d 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SavedDataUUIDFix.java
@@ -15,9 +15,9 @@ public class SavedDataUUIDFix extends AbstractUUIDFix {
     }
 
     protected TypeRewriteRule makeRule() {
-        return this.fixTypeEverywhereTyped("SavedDataUUIDFix", this.getInputSchema().getType(this.typeReference), (typed) -> typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("data", (dynamicx) -> dynamicx.update("Raids", (dynamic) -> dynamic.createList(dynamic.asStream().map((dynamicx) -> dynamicx.update("HeroesOfTheVillage", (dynamic) -> dynamic.createList(dynamic.asStream().map((dynamicx) -> createUUIDFromLongs(dynamicx, "UUIDMost", "UUIDLeast").orElseGet(() -> {
+        return this.fixTypeEverywhereTyped("SavedDataUUIDFix", this.getInputSchema().getType(this.typeReference), (typed) -> typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("data", (dynamicx) -> dynamicx.update("Raids", (dynamicxx) -> dynamicxx.createList(dynamicxx.asStream().map((dynamicxxx) -> dynamicxxx.update("HeroesOfTheVillage", (dynamicxxxx) -> dynamicxxxx.createList(dynamicxxxx.asStream().map((dynamicxxxxx) -> createUUIDFromLongs(dynamicxxxxx, "UUIDMost", "UUIDLeast").orElseGet(() -> {
                                         LOGGER.warn("HeroesOfTheVillage contained invalid UUIDs.");
-                                        return dynamicx;
+                                        return dynamicxxxxx;
                                     }))))))))));
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ScoreboardDisplaySlotFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ScoreboardDisplaySlotFix.java
index 373497a4613d9faab639d23297bd747d6a8dcfb2..bec85ed3e5a2e8326f6170acdbe5e61077699922 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ScoreboardDisplaySlotFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ScoreboardDisplaySlotFix.java
@@ -13,7 +13,7 @@ import java.util.Map;
 import javax.annotation.Nullable;
 
 public class ScoreboardDisplaySlotFix extends DataFix {
-    private static final Map<String, String> SLOT_RENAMES = ImmutableMap.builder().put("slot_0", "list").put("slot_1", "sidebar").put("slot_2", "below_name").put("slot_3", "sidebar.team.black").put("slot_4", "sidebar.team.dark_blue").put("slot_5", "sidebar.team.dark_green").put("slot_6", "sidebar.team.dark_aqua").put("slot_7", "sidebar.team.dark_red").put("slot_8", "sidebar.team.dark_purple").put("slot_9", "sidebar.team.gold").put("slot_10", "sidebar.team.gray").put("slot_11", "sidebar.team.dark_gray").put("slot_12", "sidebar.team.blue").put("slot_13", "sidebar.team.green").put("slot_14", "sidebar.team.aqua").put("slot_15", "sidebar.team.red").put("slot_16", "sidebar.team.light_purple").put("slot_17", "sidebar.team.yellow").put("slot_18", "sidebar.team.white").build();
+    private static final Map<String, String> SLOT_RENAMES = ImmutableMap.<String, String>builder().put("slot_0", "list").put("slot_1", "sidebar").put("slot_2", "below_name").put("slot_3", "sidebar.team.black").put("slot_4", "sidebar.team.dark_blue").put("slot_5", "sidebar.team.dark_green").put("slot_6", "sidebar.team.dark_aqua").put("slot_7", "sidebar.team.dark_red").put("slot_8", "sidebar.team.dark_purple").put("slot_9", "sidebar.team.gold").put("slot_10", "sidebar.team.gray").put("slot_11", "sidebar.team.dark_gray").put("slot_12", "sidebar.team.blue").put("slot_13", "sidebar.team.green").put("slot_14", "sidebar.team.aqua").put("slot_15", "sidebar.team.red").put("slot_16", "sidebar.team.light_purple").put("slot_17", "sidebar.team.yellow").put("slot_18", "sidebar.team.white").build();
 
     public ScoreboardDisplaySlotFix(Schema schema) {
         super(schema, false);
@@ -27,6 +27,6 @@ public class ScoreboardDisplaySlotFix extends DataFix {
     protected TypeRewriteRule makeRule() {
         Type<?> type = this.getInputSchema().getType(References.SAVED_DATA_SCOREBOARD);
         OpticFinder<?> opticFinder = type.findField("data");
-        return this.fixTypeEverywhereTyped("Scoreboard DisplaySlot rename", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("DisplaySlots", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapFirst((dynamic) -> DataFixUtils.orElse(dynamic.asString().result().map(ScoreboardDisplaySlotFix::rename).map(dynamic::createString), dynamic)))))));
+        return this.fixTypeEverywhereTyped("Scoreboard DisplaySlot rename", type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.update(DSL.remainderFinder(), (dynamic) -> dynamic.update("DisplaySlots", (dynamicx) -> dynamicx.updateMapValues((pair) -> pair.mapFirst((dynamicxx) -> DataFixUtils.orElse(dynamicxx.asString().result().map(ScoreboardDisplaySlotFix::rename).map(dynamicxx::createString), dynamicxx)))))));
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
index 02c1ddef20a56dce1562476af90eda1c74ce2777..048807eef027d3d00570870d7611dd6c228a98e8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SimplestEntityRenameFix.java
@@ -20,18 +20,18 @@ public abstract class SimplestEntityRenameFix extends DataFix {
     }
 
     public TypeRewriteRule makeRule() {
-        TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.ENTITY);
-        TaggedChoiceType<String> taggedChoiceType2 = this.getOutputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.ENTITY);
+        TaggedChoiceType<String> taggedChoiceType2 = (TaggedChoiceType<String>) this.getOutputSchema().findChoiceType(References.ENTITY);
         Type<Pair<String, String>> type = DSL.named(References.ENTITY_NAME.typeName(), NamespacedSchema.namespacedString());
         if (!Objects.equals(this.getOutputSchema().getType(References.ENTITY_NAME), type)) {
             throw new IllegalStateException("Entity name type is not what was expected.");
         } else {
             return TypeRewriteRule.seq(this.fixTypeEverywhere(this.name, taggedChoiceType, taggedChoiceType2, (dynamicOps) -> (pair) -> pair.mapFirst((s) -> {
                         String s2 = this.rename(s);
-                        Type<?> type = (Type)taggedChoiceType.types().get(s);
+                        Type<?> typeIn = (Type)taggedChoiceType.types().get(s);
                         Type<?> type2 = (Type)taggedChoiceType2.types().get(s2);
-                        if (!type2.equals(type, true, true)) {
-                            throw new IllegalStateException(String.format(Locale.ROOT, "Dynamic type check failed: %s not equal to %s", type2, type));
+                        if (!type2.equals(typeIn, true, true)) {
+                            throw new IllegalStateException(String.format(Locale.ROOT, "Dynamic type check failed: %s not equal to %s", type2, typeIn));
                         } else {
                             return s2;
                         }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java b/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java
index aa4662d680f8b34eeb07d3482bf1b2f35462dc90..8a7fb02d27218dad6110b2e667cb3ab423f0d4fb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/SpawnerDataFix.java
@@ -33,9 +33,9 @@ public class SpawnerDataFix extends DataFix {
 
     private <T> Typed<T> wrapSpawnPotentialsToWeightedEntries(Type<T> type, Typed<?> typed) {
         DynamicOps<?> dynamicOps = typed.getOps();
-        List<?> list = typed.getValue();
+        List<?> list = (List<?>) typed.getValue();
         List<?> list2 = list.stream().map((object) -> {
-            Pair<Object, Dynamic<?>> pair = object;
+            Pair<Object, Dynamic<?>> pair = (Pair<Object, Dynamic<?>>) object;
             int i = ((Number)(pair.getSecond()).get("Weight").asNumber().result().orElse(1)).intValue();
             Dynamic<?> dynamic = new Dynamic(dynamicOps);
             dynamic = dynamic.set("weight", dynamic.createInt(i));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
index 71020d826a8dab274ba209a32018fad37a428e6a..e5f6088e1e83a578f56de138c9149047b77f06af 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StatsCounterFix.java
@@ -22,13 +22,13 @@ import org.apache.commons.lang3.StringUtils;
 
 public class StatsCounterFix extends DataFix {
     private static final Set<String> SPECIAL_OBJECTIVE_CRITERIA = Set.of("dummy", "trigger", "deathCount", "playerKillCount", "totalKillCount", "health", "food", "air", "armor", "xp", "level", "killedByTeam.aqua", "killedByTeam.black", "killedByTeam.blue", "killedByTeam.dark_aqua", "killedByTeam.dark_blue", "killedByTeam.dark_gray", "killedByTeam.dark_green", "killedByTeam.dark_purple", "killedByTeam.dark_red", "killedByTeam.gold", "killedByTeam.gray", "killedByTeam.green", "killedByTeam.light_purple", "killedByTeam.red", "killedByTeam.white", "killedByTeam.yellow", "teamkill.aqua", "teamkill.black", "teamkill.blue", "teamkill.dark_aqua", "teamkill.dark_blue", "teamkill.dark_gray", "teamkill.dark_green", "teamkill.dark_purple", "teamkill.dark_red", "teamkill.gold", "teamkill.gray", "teamkill.green", "teamkill.light_purple", "teamkill.red", "teamkill.white", "teamkill.yellow");
-    private static final Set<String> SKIP = ImmutableSet.builder().add("stat.craftItem.minecraft.spawn_egg").add("stat.useItem.minecraft.spawn_egg").add("stat.breakItem.minecraft.spawn_egg").add("stat.pickup.minecraft.spawn_egg").add("stat.drop.minecraft.spawn_egg").build();
-    private static final Map<String, String> CUSTOM_MAP = ImmutableMap.builder().put("stat.leaveGame", "minecraft:leave_game").put("stat.playOneMinute", "minecraft:play_one_minute").put("stat.timeSinceDeath", "minecraft:time_since_death").put("stat.sneakTime", "minecraft:sneak_time").put("stat.walkOneCm", "minecraft:walk_one_cm").put("stat.crouchOneCm", "minecraft:crouch_one_cm").put("stat.sprintOneCm", "minecraft:sprint_one_cm").put("stat.swimOneCm", "minecraft:swim_one_cm").put("stat.fallOneCm", "minecraft:fall_one_cm").put("stat.climbOneCm", "minecraft:climb_one_cm").put("stat.flyOneCm", "minecraft:fly_one_cm").put("stat.diveOneCm", "minecraft:dive_one_cm").put("stat.minecartOneCm", "minecraft:minecart_one_cm").put("stat.boatOneCm", "minecraft:boat_one_cm").put("stat.pigOneCm", "minecraft:pig_one_cm").put("stat.horseOneCm", "minecraft:horse_one_cm").put("stat.aviateOneCm", "minecraft:aviate_one_cm").put("stat.jump", "minecraft:jump").put("stat.drop", "minecraft:drop").put("stat.damageDealt", "minecraft:damage_dealt").put("stat.damageTaken", "minecraft:damage_taken").put("stat.deaths", "minecraft:deaths").put("stat.mobKills", "minecraft:mob_kills").put("stat.animalsBred", "minecraft:animals_bred").put("stat.playerKills", "minecraft:player_kills").put("stat.fishCaught", "minecraft:fish_caught").put("stat.talkedToVillager", "minecraft:talked_to_villager").put("stat.tradedWithVillager", "minecraft:traded_with_villager").put("stat.cakeSlicesEaten", "minecraft:eat_cake_slice").put("stat.cauldronFilled", "minecraft:fill_cauldron").put("stat.cauldronUsed", "minecraft:use_cauldron").put("stat.armorCleaned", "minecraft:clean_armor").put("stat.bannerCleaned", "minecraft:clean_banner").put("stat.brewingstandInteraction", "minecraft:interact_with_brewingstand").put("stat.beaconInteraction", "minecraft:interact_with_beacon").put("stat.dropperInspected", "minecraft:inspect_dropper").put("stat.hopperInspected", "minecraft:inspect_hopper").put("stat.dispenserInspected", "minecraft:inspect_dispenser").put("stat.noteblockPlayed", "minecraft:play_noteblock").put("stat.noteblockTuned", "minecraft:tune_noteblock").put("stat.flowerPotted", "minecraft:pot_flower").put("stat.trappedChestTriggered", "minecraft:trigger_trapped_chest").put("stat.enderchestOpened", "minecraft:open_enderchest").put("stat.itemEnchanted", "minecraft:enchant_item").put("stat.recordPlayed", "minecraft:play_record").put("stat.furnaceInteraction", "minecraft:interact_with_furnace").put("stat.craftingTableInteraction", "minecraft:interact_with_crafting_table").put("stat.chestOpened", "minecraft:open_chest").put("stat.sleepInBed", "minecraft:sleep_in_bed").put("stat.shulkerBoxOpened", "minecraft:open_shulker_box").build();
+    private static final Set<String> SKIP = ImmutableSet.<String>builder().add("stat.craftItem.minecraft.spawn_egg").add("stat.useItem.minecraft.spawn_egg").add("stat.breakItem.minecraft.spawn_egg").add("stat.pickup.minecraft.spawn_egg").add("stat.drop.minecraft.spawn_egg").build();
+    private static final Map<String, String> CUSTOM_MAP = ImmutableMap.<String, String>builder().put("stat.leaveGame", "minecraft:leave_game").put("stat.playOneMinute", "minecraft:play_one_minute").put("stat.timeSinceDeath", "minecraft:time_since_death").put("stat.sneakTime", "minecraft:sneak_time").put("stat.walkOneCm", "minecraft:walk_one_cm").put("stat.crouchOneCm", "minecraft:crouch_one_cm").put("stat.sprintOneCm", "minecraft:sprint_one_cm").put("stat.swimOneCm", "minecraft:swim_one_cm").put("stat.fallOneCm", "minecraft:fall_one_cm").put("stat.climbOneCm", "minecraft:climb_one_cm").put("stat.flyOneCm", "minecraft:fly_one_cm").put("stat.diveOneCm", "minecraft:dive_one_cm").put("stat.minecartOneCm", "minecraft:minecart_one_cm").put("stat.boatOneCm", "minecraft:boat_one_cm").put("stat.pigOneCm", "minecraft:pig_one_cm").put("stat.horseOneCm", "minecraft:horse_one_cm").put("stat.aviateOneCm", "minecraft:aviate_one_cm").put("stat.jump", "minecraft:jump").put("stat.drop", "minecraft:drop").put("stat.damageDealt", "minecraft:damage_dealt").put("stat.damageTaken", "minecraft:damage_taken").put("stat.deaths", "minecraft:deaths").put("stat.mobKills", "minecraft:mob_kills").put("stat.animalsBred", "minecraft:animals_bred").put("stat.playerKills", "minecraft:player_kills").put("stat.fishCaught", "minecraft:fish_caught").put("stat.talkedToVillager", "minecraft:talked_to_villager").put("stat.tradedWithVillager", "minecraft:traded_with_villager").put("stat.cakeSlicesEaten", "minecraft:eat_cake_slice").put("stat.cauldronFilled", "minecraft:fill_cauldron").put("stat.cauldronUsed", "minecraft:use_cauldron").put("stat.armorCleaned", "minecraft:clean_armor").put("stat.bannerCleaned", "minecraft:clean_banner").put("stat.brewingstandInteraction", "minecraft:interact_with_brewingstand").put("stat.beaconInteraction", "minecraft:interact_with_beacon").put("stat.dropperInspected", "minecraft:inspect_dropper").put("stat.hopperInspected", "minecraft:inspect_hopper").put("stat.dispenserInspected", "minecraft:inspect_dispenser").put("stat.noteblockPlayed", "minecraft:play_noteblock").put("stat.noteblockTuned", "minecraft:tune_noteblock").put("stat.flowerPotted", "minecraft:pot_flower").put("stat.trappedChestTriggered", "minecraft:trigger_trapped_chest").put("stat.enderchestOpened", "minecraft:open_enderchest").put("stat.itemEnchanted", "minecraft:enchant_item").put("stat.recordPlayed", "minecraft:play_record").put("stat.furnaceInteraction", "minecraft:interact_with_furnace").put("stat.craftingTableInteraction", "minecraft:interact_with_crafting_table").put("stat.chestOpened", "minecraft:open_chest").put("stat.sleepInBed", "minecraft:sleep_in_bed").put("stat.shulkerBoxOpened", "minecraft:open_shulker_box").build();
     private static final String BLOCK_KEY = "stat.mineBlock";
     private static final String NEW_BLOCK_KEY = "minecraft:mined";
-    private static final Map<String, String> ITEM_KEYS = ImmutableMap.builder().put("stat.craftItem", "minecraft:crafted").put("stat.useItem", "minecraft:used").put("stat.breakItem", "minecraft:broken").put("stat.pickup", "minecraft:picked_up").put("stat.drop", "minecraft:dropped").build();
-    private static final Map<String, String> ENTITY_KEYS = ImmutableMap.builder().put("stat.entityKilledBy", "minecraft:killed_by").put("stat.killEntity", "minecraft:killed").build();
-    private static final Map<String, String> ENTITIES = ImmutableMap.builder().put("Bat", "minecraft:bat").put("Blaze", "minecraft:blaze").put("CaveSpider", "minecraft:cave_spider").put("Chicken", "minecraft:chicken").put("Cow", "minecraft:cow").put("Creeper", "minecraft:creeper").put("Donkey", "minecraft:donkey").put("ElderGuardian", "minecraft:elder_guardian").put("Enderman", "minecraft:enderman").put("Endermite", "minecraft:endermite").put("EvocationIllager", "minecraft:evocation_illager").put("Ghast", "minecraft:ghast").put("Guardian", "minecraft:guardian").put("Horse", "minecraft:horse").put("Husk", "minecraft:husk").put("Llama", "minecraft:llama").put("LavaSlime", "minecraft:magma_cube").put("MushroomCow", "minecraft:mooshroom").put("Mule", "minecraft:mule").put("Ozelot", "minecraft:ocelot").put("Parrot", "minecraft:parrot").put("Pig", "minecraft:pig").put("PolarBear", "minecraft:polar_bear").put("Rabbit", "minecraft:rabbit").put("Sheep", "minecraft:sheep").put("Shulker", "minecraft:shulker").put("Silverfish", "minecraft:silverfish").put("SkeletonHorse", "minecraft:skeleton_horse").put("Skeleton", "minecraft:skeleton").put("Slime", "minecraft:slime").put("Spider", "minecraft:spider").put("Squid", "minecraft:squid").put("Stray", "minecraft:stray").put("Vex", "minecraft:vex").put("Villager", "minecraft:villager").put("VindicationIllager", "minecraft:vindication_illager").put("Witch", "minecraft:witch").put("WitherSkeleton", "minecraft:wither_skeleton").put("Wolf", "minecraft:wolf").put("ZombieHorse", "minecraft:zombie_horse").put("PigZombie", "minecraft:zombie_pigman").put("ZombieVillager", "minecraft:zombie_villager").put("Zombie", "minecraft:zombie").build();
+    private static final Map<String, String> ITEM_KEYS = ImmutableMap.<String, String>builder().put("stat.craftItem", "minecraft:crafted").put("stat.useItem", "minecraft:used").put("stat.breakItem", "minecraft:broken").put("stat.pickup", "minecraft:picked_up").put("stat.drop", "minecraft:dropped").build();
+    private static final Map<String, String> ENTITY_KEYS = ImmutableMap.<String, String>builder().put("stat.entityKilledBy", "minecraft:killed_by").put("stat.killEntity", "minecraft:killed").build();
+    private static final Map<String, String> ENTITIES = ImmutableMap.<String, String>builder().put("Bat", "minecraft:bat").put("Blaze", "minecraft:blaze").put("CaveSpider", "minecraft:cave_spider").put("Chicken", "minecraft:chicken").put("Cow", "minecraft:cow").put("Creeper", "minecraft:creeper").put("Donkey", "minecraft:donkey").put("ElderGuardian", "minecraft:elder_guardian").put("Enderman", "minecraft:enderman").put("Endermite", "minecraft:endermite").put("EvocationIllager", "minecraft:evocation_illager").put("Ghast", "minecraft:ghast").put("Guardian", "minecraft:guardian").put("Horse", "minecraft:horse").put("Husk", "minecraft:husk").put("Llama", "minecraft:llama").put("LavaSlime", "minecraft:magma_cube").put("MushroomCow", "minecraft:mooshroom").put("Mule", "minecraft:mule").put("Ozelot", "minecraft:ocelot").put("Parrot", "minecraft:parrot").put("Pig", "minecraft:pig").put("PolarBear", "minecraft:polar_bear").put("Rabbit", "minecraft:rabbit").put("Sheep", "minecraft:sheep").put("Shulker", "minecraft:shulker").put("Silverfish", "minecraft:silverfish").put("SkeletonHorse", "minecraft:skeleton_horse").put("Skeleton", "minecraft:skeleton").put("Slime", "minecraft:slime").put("Spider", "minecraft:spider").put("Squid", "minecraft:squid").put("Stray", "minecraft:stray").put("Vex", "minecraft:vex").put("Villager", "minecraft:villager").put("VindicationIllager", "minecraft:vindication_illager").put("Witch", "minecraft:witch").put("WitherSkeleton", "minecraft:wither_skeleton").put("Wolf", "minecraft:wolf").put("ZombieHorse", "minecraft:zombie_horse").put("PigZombie", "minecraft:zombie_pigman").put("ZombieVillager", "minecraft:zombie_villager").put("Zombie", "minecraft:zombie").build();
     private static final String NEW_CUSTOM_KEY = "minecraft:custom";
 
     public StatsCounterFix(Schema schema, boolean flag) {
@@ -130,16 +130,6 @@ public class StatsCounterFix extends DataFix {
         return BlockStateData.upgradeBlock(s);
     }
 
-    static record StatType(String a, String b) {
-        final String type;
-        final String typeKey;
-
-        public String type() {
-            return this.type;
-        }
-
-        public String typeKey() {
-            return this.typeKey;
-        }
+    static record StatType(String type, String typeKey) {
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
index 8237b1eac30fc214bbbe7951286360d86b2a931c..157e31cc84e3aba07fd2a7fc0f42064a71e0c0da 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StatsRenameFix.java
@@ -35,7 +35,7 @@ public class StatsRenameFix extends DataFix {
         } else {
             OpticFinder<?> opticFinder2 = DSL.namedChoice("minecraft:custom", type3);
             OpticFinder<String> opticFinder3 = DSL.fieldFinder("id", NamespacedSchema.namespacedString());
-            return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
+            return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
         }
     }
 
@@ -45,6 +45,6 @@ public class StatsRenameFix extends DataFix {
         OpticFinder<?> opticFinder = type2.findField("stats");
         OpticFinder<?> opticFinder2 = opticFinder.type().findField("minecraft:custom");
         OpticFinder<String> opticFinder3 = NamespacedSchema.namespacedString().finder();
-        return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
+        return this.fixTypeEverywhereTyped(this.name, type2, type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.update(opticFinder3, (s) -> (String)this.renames.getOrDefault(s, s)))));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StructureSettingsFlattenFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StructureSettingsFlattenFix.java
index c96be79bef782b3931d786e1bab196eba5e013e9..4506362a583e7af1f00dfa87aa6cf461ef52d57b 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StructureSettingsFlattenFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StructureSettingsFlattenFix.java
@@ -27,11 +27,11 @@ public class StructureSettingsFlattenFix extends DataFix {
 
     private static Pair<Dynamic<?>, Dynamic<?>> fixDimension(Pair<Dynamic<?>, Dynamic<?>> pair) {
         Dynamic<?> dynamic = pair.getSecond();
-        return Pair.of(pair.getFirst(), dynamic.update("generator", (dynamicx) -> dynamicx.update("settings", (dynamic) -> dynamic.update("structures", StructureSettingsFlattenFix::fixStructures))));
+        return Pair.of(pair.getFirst(), dynamic.update("generator", (dynamicx) -> dynamicx.update("settings", (dynamicIn) -> dynamicIn.update("structures", StructureSettingsFlattenFix::fixStructures))));
     }
 
     private static Dynamic<?> fixStructures(Dynamic<?> dynamic) {
-        Dynamic<?> dynamic2 = dynamic.get("structures").orElseEmptyMap().updateMapValues((pair) -> pair.mapSecond((dynamic2) -> dynamic2.set("type", dynamic.createString("minecraft:random_spread"))));
+        Dynamic<?> dynamic2 = dynamic.get("structures").orElseEmptyMap().updateMapValues((pair) -> pair.mapSecond((dynamic2In) -> dynamic2In.set("type", dynamic.createString("minecraft:random_spread"))));
         return DataFixUtils.orElse(dynamic.get("stronghold").result().map((dynamic3) -> dynamic2.set("minecraft:stronghold", dynamic3.set("type", dynamic.createString("minecraft:concentric_rings")))), dynamic2);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix.java b/src/main/java/net/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix.java
index 40d1ac05720139d597ac99047bd6948b1272ee77..f6224e1fbfa69aac3be593e41794d05508a33533 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix.java
@@ -19,7 +19,7 @@ import java.util.Map.Entry;
 import java.util.function.Function;
 
 public class StructuresBecomeConfiguredFix extends DataFix {
-    private static final Map<String, StructuresBecomeConfiguredFix.Conversion> CONVERSION_MAP = ImmutableMap.builder().put("mineshaft", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:badlands", "minecraft:eroded_badlands", "minecraft:wooded_badlands"), "minecraft:mineshaft_mesa"), "minecraft:mineshaft")).put("shipwreck", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:beach", "minecraft:snowy_beach"), "minecraft:shipwreck_beached"), "minecraft:shipwreck")).put("ocean_ruin", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:warm_ocean", "minecraft:lukewarm_ocean", "minecraft:deep_lukewarm_ocean"), "minecraft:ocean_ruin_warm"), "minecraft:ocean_ruin_cold")).put("village", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:desert"), "minecraft:village_desert", List.of("minecraft:savanna"), "minecraft:village_savanna", List.of("minecraft:snowy_plains"), "minecraft:village_snowy", List.of("minecraft:taiga"), "minecraft:village_taiga"), "minecraft:village_plains")).put("ruined_portal", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:desert"), "minecraft:ruined_portal_desert", List.of("minecraft:badlands", "minecraft:eroded_badlands", "minecraft:wooded_badlands", "minecraft:windswept_hills", "minecraft:windswept_forest", "minecraft:windswept_gravelly_hills", "minecraft:savanna_plateau", "minecraft:windswept_savanna", "minecraft:stony_shore", "minecraft:meadow", "minecraft:frozen_peaks", "minecraft:jagged_peaks", "minecraft:stony_peaks", "minecraft:snowy_slopes"), "minecraft:ruined_portal_mountain", List.of("minecraft:bamboo_jungle", "minecraft:jungle", "minecraft:sparse_jungle"), "minecraft:ruined_portal_jungle", List.of("minecraft:deep_frozen_ocean", "minecraft:deep_cold_ocean", "minecraft:deep_ocean", "minecraft:deep_lukewarm_ocean", "minecraft:frozen_ocean", "minecraft:ocean", "minecraft:cold_ocean", "minecraft:lukewarm_ocean", "minecraft:warm_ocean"), "minecraft:ruined_portal_ocean"), "minecraft:ruined_portal")).put("pillager_outpost", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:pillager_outpost")).put("mansion", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:mansion")).put("jungle_pyramid", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:jungle_pyramid")).put("desert_pyramid", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:desert_pyramid")).put("igloo", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:igloo")).put("swamp_hut", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:swamp_hut")).put("stronghold", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:stronghold")).put("monument", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:monument")).put("fortress", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:fortress")).put("endcity", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:end_city")).put("buried_treasure", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:buried_treasure")).put("nether_fossil", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:nether_fossil")).put("bastion_remnant", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:bastion_remnant")).build();
+    private static final Map<String, StructuresBecomeConfiguredFix.Conversion> CONVERSION_MAP = ImmutableMap.<String, Conversion>builder().put("mineshaft", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:badlands", "minecraft:eroded_badlands", "minecraft:wooded_badlands"), "minecraft:mineshaft_mesa"), "minecraft:mineshaft")).put("shipwreck", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:beach", "minecraft:snowy_beach"), "minecraft:shipwreck_beached"), "minecraft:shipwreck")).put("ocean_ruin", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:warm_ocean", "minecraft:lukewarm_ocean", "minecraft:deep_lukewarm_ocean"), "minecraft:ocean_ruin_warm"), "minecraft:ocean_ruin_cold")).put("village", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:desert"), "minecraft:village_desert", List.of("minecraft:savanna"), "minecraft:village_savanna", List.of("minecraft:snowy_plains"), "minecraft:village_snowy", List.of("minecraft:taiga"), "minecraft:village_taiga"), "minecraft:village_plains")).put("ruined_portal", StructuresBecomeConfiguredFix.Conversion.biomeMapped(Map.of(List.of("minecraft:desert"), "minecraft:ruined_portal_desert", List.of("minecraft:badlands", "minecraft:eroded_badlands", "minecraft:wooded_badlands", "minecraft:windswept_hills", "minecraft:windswept_forest", "minecraft:windswept_gravelly_hills", "minecraft:savanna_plateau", "minecraft:windswept_savanna", "minecraft:stony_shore", "minecraft:meadow", "minecraft:frozen_peaks", "minecraft:jagged_peaks", "minecraft:stony_peaks", "minecraft:snowy_slopes"), "minecraft:ruined_portal_mountain", List.of("minecraft:bamboo_jungle", "minecraft:jungle", "minecraft:sparse_jungle"), "minecraft:ruined_portal_jungle", List.of("minecraft:deep_frozen_ocean", "minecraft:deep_cold_ocean", "minecraft:deep_ocean", "minecraft:deep_lukewarm_ocean", "minecraft:frozen_ocean", "minecraft:ocean", "minecraft:cold_ocean", "minecraft:lukewarm_ocean", "minecraft:warm_ocean"), "minecraft:ruined_portal_ocean"), "minecraft:ruined_portal")).put("pillager_outpost", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:pillager_outpost")).put("mansion", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:mansion")).put("jungle_pyramid", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:jungle_pyramid")).put("desert_pyramid", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:desert_pyramid")).put("igloo", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:igloo")).put("swamp_hut", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:swamp_hut")).put("stronghold", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:stronghold")).put("monument", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:monument")).put("fortress", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:fortress")).put("endcity", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:end_city")).put("buried_treasure", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:buried_treasure")).put("nether_fossil", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:nether_fossil")).put("bastion_remnant", StructuresBecomeConfiguredFix.Conversion.trivial("minecraft:bastion_remnant")).build();
 
     public StructuresBecomeConfiguredFix(Schema schema) {
         super(schema, false);
@@ -100,8 +100,8 @@ public class StructuresBecomeConfiguredFix extends DataFix {
 
     private Optional<String> guessConfiguration(Dynamic<?> dynamic, StructuresBecomeConfiguredFix.Conversion conversion) {
         Object2IntArrayMap<String> object2IntArrayMap = new Object2IntArrayMap();
-        dynamic.get("sections").asList(Function.identity()).forEach((dynamicx) -> dynamicx.get("biomes").get("palette").asList(Function.identity()).forEach((dynamic) -> {
-                String s = (String)conversion.biomeMapping().get(dynamic.asString(""));
+        dynamic.get("sections").asList(Function.identity()).forEach((dynamicx) -> dynamicx.get("biomes").get("palette").asList(Function.identity()).forEach((dynamicIn) -> {
+                String s = (String)conversion.biomeMapping().get(dynamicIn.asString(""));
                 if (s != null) {
                     object2IntArrayMap.mergeInt(s, 1, Integer::sum);
                 }
@@ -110,10 +110,7 @@ public class StructuresBecomeConfiguredFix extends DataFix {
         return object2IntArrayMap.object2IntEntrySet().stream().max(Comparator.comparingInt(it.unimi.dsi.fastutil.objects.Object2IntMap.Entry::getIntValue)).map(Entry::getKey);
     }
 
-    static record Conversion(Map<String, String> a, String b) {
-        private final Map<String, String> biomeMapping;
-        final String fallback;
-
+    static record Conversion(Map<String, String> biomeMapping, String fallback) {
         public static StructuresBecomeConfiguredFix.Conversion trivial(String s) {
             return new StructuresBecomeConfiguredFix.Conversion(Map.of(), s);
         }
@@ -131,13 +128,5 @@ public class StructuresBecomeConfiguredFix extends DataFix {
 
             return builder.build();
         }
-
-        public Map<String, String> biomeMapping() {
-            return this.biomeMapping;
-        }
-
-        public String fallback() {
-            return this.fallback;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java b/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
index 35a1ca2584e148014f75ed6857a2a2f14988f19e..fe0c33e85756bfde9e40fcd7f330edb3ab6c3c2d 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/TrappedChestBlockEntityFix.java
@@ -69,19 +69,19 @@ public class TrappedChestBlockEntityFix extends DataFix {
                             Dynamic<?> dynamic = typedx.get(DSL.remainderFinder());
                             int i3 = dynamic.get("xPos").asInt(0);
                             int i4 = dynamic.get("zPos").asInt(0);
-                            TaggedChoiceType<String> taggedChoiceType = this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
-                            return typedx.updateTyped(opticFinder, (typed) -> typed.updateTyped(taggedChoiceType.finder(), (typedx) -> {
-                                    Dynamic<?> dynamic = typedx.getOrCreate(DSL.remainderFinder());
-                                    int i3 = dynamic.get("x").asInt(0) - (i3 << 4);
-                                    int i4 = dynamic.get("y").asInt(0);
-                                    int i5 = dynamic.get("z").asInt(0) - (i4 << 4);
-                                    return intSet.contains(LeavesFix.getIndex(i3, i4, i5)) ? typedx.update(taggedChoiceType.finder(), (pair) -> pair.mapFirst((s) -> {
+                            TaggedChoiceType<String> taggedChoiceType = (TaggedChoiceType<String>) this.getInputSchema().findChoiceType(References.BLOCK_ENTITY);
+                            return typedx.updateTyped(opticFinder, (typedIn) -> typedIn.updateTyped(taggedChoiceType.finder(), (typedIn2) -> {
+                                    Dynamic<?> dynamicIn = typedIn2.getOrCreate(DSL.remainderFinder());
+                                    int x = dynamicIn.get("x").asInt(0) - (i3 << 4);
+                                    int y = dynamicIn.get("y").asInt(0);
+                                    int z = dynamicIn.get("z").asInt(0) - (i4 << 4);
+                                    return intSet.contains(LeavesFix.getIndex(x, y, z)) ? typedIn2.update(taggedChoiceType.finder(), (pair) -> pair.mapFirst((s) -> {
                                             if (!Objects.equals(s, "minecraft:chest")) {
                                                 LOGGER.warn("Block Entity was expected to be a chest");
                                             }
 
                                             return "minecraft:trapped_chest";
-                                        })) : typedx;
+                                        })) : typedIn2;
                                 }));
                         }
                     })));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
index 0e61509b0db27e0a1d7746af2144b52b3dd78b34..3e427d4c04f1864303990013c50b3248c2945b55 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerRebuildLevelAndXpFix.java
@@ -37,7 +37,7 @@ public class VillagerRebuildLevelAndXpFix extends DataFix {
                 int i = dynamic.get("VillagerData").get("level").asInt(0);
                 Typed<?> typed2 = typedx;
                 if (i == 0 || i == 1) {
-                    int i2 = typedx.getOptionalTyped(opticFinder2).flatMap((typed) -> typed.getOptionalTyped(opticFinder3)).map((typed) -> typed.getAllTyped(opticFinder4).size()).orElse(0);
+                    int i2 = typedx.getOptionalTyped(opticFinder2).flatMap((typedIn) -> typedIn.getOptionalTyped(opticFinder3)).map((typedIn) -> typedIn.getAllTyped(opticFinder4).size()).orElse(0);
                     i = Mth.clamp(i2 / 2, 1, 5);
                     if (i > 1) {
                         typed2 = addLevel(typedx, i);
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
index 815ea87dd01a4ff81becf0803303d6b723fffc1e..c6ef560b029993b909e47fb537452f39b126f3b1 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/VillagerTradeFix.java
@@ -31,7 +31,7 @@ public class VillagerTradeFix extends NamedEntityFix {
             OpticFinder<?> opticFinder6 = type2.findField("sell");
             OpticFinder<Pair<String, String>> opticFinder7 = DSL.fieldFinder("id", DSL.named(References.ITEM_NAME.typeName(), NamespacedSchema.namespacedString()));
             Function<Typed<?>, Typed<?>> function = (typedx) -> this.updateItemStack(opticFinder7, typedx);
-            return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typed) -> typed.updateTyped(opticFinder3, (typedx) -> typedx.updateTyped(opticFinder4, function).updateTyped(opticFinder5, function).updateTyped(opticFinder6, function))));
+            return typed.updateTyped(opticFinder, (typedx) -> typedx.updateTyped(opticFinder2, (typedIn) -> typedIn.updateTyped(opticFinder3, (typedIn2) -> typedIn2.updateTyped(opticFinder4, function).updateTyped(opticFinder5, function).updateTyped(opticFinder6, function))));
         }
     }
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java
index e8d7b316cd509643bcaf0df3e65b3a4b91d5954e..fb7ca1955342154648f3989d67a7772eb9915dd3 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix.java
@@ -16,7 +16,7 @@ public class WorldGenSettingsDisallowOldCustomWorldsFix extends DataFix {
         OpticFinder<?> opticFinder = type.findField("dimensions");
         return this.fixTypeEverywhereTyped("WorldGenSettingsDisallowOldCustomWorldsFix_" + this.getOutputSchema().getVersionKey(), type, (typed) -> typed.updateTyped(opticFinder, (typedx) -> {
                 typedx.write().map((dynamic) -> dynamic.getMapValues().map((map) -> {
-                        map.forEach((dynamic, dynamic2) -> {
+                        map.forEach((dynamicIn, dynamic2) -> {
                             if (dynamic2.get("type").asString().result().isEmpty()) {
                                 throw new IllegalStateException("Unable load old custom worlds.");
                             }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
index c01545c5a3ca534d1406ba7a674f49b7094ca934..7a89a4795341dde5822d2a1bacd91982df53f7bb 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsFix.java
@@ -33,7 +33,7 @@ public class WorldGenSettingsFix extends DataFix {
     private static final String END_CITY = "minecraft:endcity";
     private static final String WOODLAND_MANSION = "minecraft:mansion";
     private static final String OCEAN_MONUMENT = "minecraft:monument";
-    private static final ImmutableMap<String, WorldGenSettingsFix.StructureFeatureConfiguration> DEFAULTS = ImmutableMap.builder().put("minecraft:village", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 10387312)).put("minecraft:desert_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357617)).put("minecraft:igloo", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357618)).put("minecraft:jungle_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357619)).put("minecraft:swamp_hut", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357620)).put("minecraft:pillager_outpost", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 165745296)).put("minecraft:monument", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 5, 10387313)).put("minecraft:endcity", new WorldGenSettingsFix.StructureFeatureConfiguration(20, 11, 10387313)).put("minecraft:mansion", new WorldGenSettingsFix.StructureFeatureConfiguration(80, 20, 10387319)).build();
+    private static final ImmutableMap<String, WorldGenSettingsFix.StructureFeatureConfiguration> DEFAULTS = ImmutableMap.<String, WorldGenSettingsFix.StructureFeatureConfiguration>builder().put("minecraft:village", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 10387312)).put("minecraft:desert_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357617)).put("minecraft:igloo", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357618)).put("minecraft:jungle_pyramid", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357619)).put("minecraft:swamp_hut", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 14357620)).put("minecraft:pillager_outpost", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 8, 165745296)).put("minecraft:monument", new WorldGenSettingsFix.StructureFeatureConfiguration(32, 5, 10387313)).put("minecraft:endcity", new WorldGenSettingsFix.StructureFeatureConfiguration(20, 11, 10387313)).put("minecraft:mansion", new WorldGenSettingsFix.StructureFeatureConfiguration(80, 20, 10387319)).build();
 
     public WorldGenSettingsFix(Schema schema) {
         super(schema, true);
@@ -48,7 +48,7 @@ public class WorldGenSettingsFix extends DataFix {
     }
 
     private static <T> Dynamic<T> vanillaBiomeSource(Dynamic<T> dynamic, long l, boolean flag, boolean flag2) {
-        Builder<Dynamic<T>, Dynamic<T>> builder = ImmutableMap.builder().put(dynamic.createString("type"), dynamic.createString("minecraft:vanilla_layered")).put(dynamic.createString("seed"), dynamic.createLong(l)).put(dynamic.createString("large_biomes"), dynamic.createBoolean(flag2));
+        Builder<Dynamic<T>, Dynamic<T>> builder = ImmutableMap.<Dynamic<T>, Dynamic<T>>builder().put(dynamic.createString("type"), dynamic.createString("minecraft:vanilla_layered")).put(dynamic.createString("seed"), dynamic.createLong(l)).put(dynamic.createString("large_biomes"), dynamic.createBoolean(flag2));
         if (flag) {
             builder.put(dynamic.createString("legacy_biome_init_layer"), dynamic.createBoolean(flag));
         }
@@ -143,9 +143,9 @@ public class WorldGenSettingsFix extends DataFix {
             map.put("minecraft:village", (WorldGenSettingsFix.StructureFeatureConfiguration)DEFAULTS.get("minecraft:village"));
         }
 
-        optionalDynamic.get("structures").flatMap(Dynamic::getMapValues).result().ifPresent((map2) -> map2.forEach((dynamic, dynamic2) -> dynamic2.getMapValues().result().ifPresent((map2) -> map2.forEach((dynamic2, dynamic3) -> {
+        optionalDynamic.get("structures").flatMap(Dynamic::getMapValues).result().ifPresent((map2) -> map2.forEach((dynamic, dynamic2) -> dynamic2.getMapValues().result().ifPresent((map2In) -> map2In.forEach((dynamic2In, dynamic3) -> {
                         String s = dynamic.asString("");
-                        String s2 = dynamic2.asString("");
+                        String s2 = dynamic2In.asString("");
                         String s3 = dynamic3.asString("");
                         if ("stronghold".equals(s)) {
                             mutableBoolean.setTrue();
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java
index f3e0ff57a11be7b0d2976db3428b365256e3e8bc..30dddc944504e53261ac9bd930c03a08059f09f8 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix.java
@@ -33,27 +33,27 @@ public class WorldGenSettingsHeightAndBiomeFix extends DataFix {
             boolean flag2 = optionalDynamic.asBoolean(true);
             return typed.update(DSL.remainderFinder(), (dynamic) -> dynamic.remove("has_increased_height_already")).updateTyped(opticFinder, type3, (typedx) -> {
                 Dynamic<?> dynamic = typedx.write().result().orElseThrow(() -> new IllegalStateException("Malformed WorldGenSettings.dimensions"));
-                dynamic = dynamic.update("minecraft:overworld", (dynamicx) -> dynamicx.update("generator", (dynamic) -> {
-                        String s = dynamic.get("type").asString("");
+                dynamic = dynamic.update("minecraft:overworld", (dynamicx) -> dynamicx.update("generator", (dynamicIn) -> {
+                        String s = dynamicIn.get("type").asString("");
                         if ("minecraft:noise".equals(s)) {
                             MutableBoolean mutableBoolean = new MutableBoolean();
-                            dynamic = dynamic.update("biome_source", (dynamicx) -> {
-                                String s = dynamicx.get("type").asString("");
-                                if ("minecraft:vanilla_layered".equals(s) || flag && "minecraft:multi_noise".equals(s)) {
-                                    if (dynamicx.get("large_biomes").asBoolean(false)) {
+                            dynamicIn = dynamicIn.update("biome_source", (dynamicxIn2) -> {
+                                String typeIn = dynamicxIn2.get("type").asString("");
+                                if ("minecraft:vanilla_layered".equals(typeIn) || flag && "minecraft:multi_noise".equals(typeIn)) {
+                                    if (dynamicxIn2.get("large_biomes").asBoolean(false)) {
                                         mutableBoolean.setTrue();
                                     }
 
-                                    return dynamicx.createMap(ImmutableMap.of(dynamicx.createString("preset"), dynamicx.createString("minecraft:overworld"), dynamicx.createString("type"), dynamicx.createString("minecraft:multi_noise")));
+                                    return dynamicxIn2.createMap(ImmutableMap.of(dynamicxIn2.createString("preset"), dynamicxIn2.createString("minecraft:overworld"), dynamicxIn2.createString("type"), dynamicxIn2.createString("minecraft:multi_noise")));
                                 } else {
-                                    return dynamicx;
+                                    return dynamicxIn2;
                                 }
                             });
-                            return mutableBoolean.booleanValue() ? dynamic.update("settings", (dynamicx) -> "minecraft:overworld".equals(dynamicx.asString("")) ? dynamicx.createString("minecraft:large_biomes") : dynamicx) : dynamic;
+                            return mutableBoolean.booleanValue() ? dynamicIn.update("settings", (dynamicxIn3) -> "minecraft:overworld".equals(dynamicxIn3.asString("")) ? dynamicxIn3.createString("minecraft:large_biomes") : dynamicxIn3) : dynamicIn;
                         } else if ("minecraft:flat".equals(s)) {
-                            return flag2 ? dynamic : dynamic.update("settings", (dynamicx) -> dynamicx.update("layers", WorldGenSettingsHeightAndBiomeFix::updateLayers));
+                            return flag2 ? dynamicIn : dynamicIn.update("settings", (dynamicxIn4) -> dynamicxIn4.update("layers", WorldGenSettingsHeightAndBiomeFix::updateLayers));
                         } else {
-                            return dynamic;
+                            return dynamicIn;
                         }
                     }));
                 return (type3.readTyped(dynamic).result().orElseThrow(() -> new IllegalStateException("WorldGenSettingsHeightAndBiomeFix failed."))).getFirst();
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java b/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
index 7ffd64158f39e0d3c75d26656633f3f77af458f1..650cd5392af4068479dc3a4f0be7827b650c6108 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V1451_6.java
@@ -41,11 +41,11 @@ public class V1451_6 extends NamespacedSchema {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
             Dynamic<T> dynamic = new Dynamic(dynamicOps, object);
             Optional<Dynamic<T>> optional = dynamic.get("CriteriaType").get().get().left().flatMap((dynamic2) -> {
-                Optional<String> optional = dynamic2.get("type").asString().get().left();
-                Optional<String> optional2 = dynamic2.get("id").asString().get().left();
-                if (optional.isPresent() && optional2.isPresent()) {
-                    String s = (String)optional.get();
-                    return s.equals("_special") ? Optional.of(dynamic.createString((String)optional2.get())) : Optional.of(dynamic2.createString(V1451_6.packNamespacedWithDot(s) + ":" + V1451_6.packNamespacedWithDot((String)optional2.get())));
+                Optional<String> typeOptional = dynamic2.get("type").asString().get().left();
+                Optional<String> idOptional = dynamic2.get("id").asString().get().left();
+                if (typeOptional.isPresent() && idOptional.isPresent()) {
+                    String s = (String)typeOptional.get();
+                    return s.equals("_special") ? Optional.of(dynamic.createString((String)idOptional.get())) : Optional.of(dynamic2.createString(V1451_6.packNamespacedWithDot(s) + ":" + V1451_6.packNamespacedWithDot((String)idOptional.get())));
                 } else {
                     return Optional.empty();
                 }
@@ -88,4 +88,4 @@ public class V1451_6 extends NamespacedSchema {
         ResourceLocation resourceLocation = ResourceLocation.tryParse(s);
         return resourceLocation != null ? resourceLocation.getNamespace() + "." + resourceLocation.getPath() : s;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V704.java b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
index b0e445d27c70ae9de2b80a8206c9995fe59c9390..1ec97be0a98f7d1bcf0beb776862483a1ad0ff29 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V704.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
@@ -139,7 +139,7 @@ public class V704 extends Schema {
     });
     protected static final HookFunction ADD_NAMES = new HookFunction() {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-            return V99.addNames(new Dynamic(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "ArmorStand");
+            return V99.addNames(new Dynamic<>(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "ArmorStand");
         }
     };
 
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V705.java b/src/main/java/net/minecraft/util/datafix/schemas/V705.java
index 4c5f62c5b60826da77f9e71170d83bd1174c8831..d112911d628e7abffec2805dec315764f27ccc11 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V705.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V705.java
@@ -14,7 +14,7 @@ import net.minecraft.util.datafix.fixes.References;
 public class V705 extends NamespacedSchema {
     protected static final HookFunction ADD_NAMES = new HookFunction() {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-            return V99.addNames(new Dynamic(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "minecraft:armor_stand");
+            return V99.addNames(new Dynamic<>(dynamicOps, object), V704.ITEM_TO_BLOCKENTITY, "minecraft:armor_stand");
         }
     };
 
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V99.java b/src/main/java/net/minecraft/util/datafix/schemas/V99.java
index 26e1c876cdd829ddfce7f77e0ee1980e81df4a62..1ec088aa39001780d40d2e2f281de2a39ab01818 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V99.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V99.java
@@ -54,7 +54,7 @@ public class V99 extends Schema {
     });
     protected static final HookFunction ADD_NAMES = new HookFunction() {
         public <T> T apply(DynamicOps<T> dynamicOps, T object) {
-            return V99.addNames(new Dynamic(dynamicOps, object), V99.ITEM_TO_BLOCKENTITY, "ArmorStand");
+            return V99.addNames(new Dynamic<>(dynamicOps, object), V99.ITEM_TO_BLOCKENTITY, "ArmorStand");
         }
     };
 
@@ -213,14 +213,14 @@ public class V99 extends Schema {
 
     protected static <T> T addNames(Dynamic<T> dynamic, Map<String, String> map, String s) {
         return (T)dynamic.update("tag", (dynamic2) -> dynamic2.update("BlockEntityTag", (dynamic2x) -> {
-                String s = (String)dynamic.get("id").asString().result().map(NamespacedSchema::ensureNamespaced).orElse("minecraft:air");
-                if (!"minecraft:air".equals(s)) {
-                    String s2 = (String)map.get(s);
+                String id = (String)dynamic.get("id").asString().result().map(NamespacedSchema::ensureNamespaced).orElse("minecraft:air");
+                if (!"minecraft:air".equals(id)) {
+                    String s2 = (String)map.get(id);
                     if (s2 != null) {
                         return dynamic2x.set("id", dynamic.createString(s2));
                     }
 
-                    LOGGER.warn("Unable to resolve BlockEntity for ItemStack: {}", s);
+                    LOGGER.warn("Unable to resolve BlockEntity for ItemStack: {}", id);
                 }
 
                 return dynamic2x;
diff --git a/src/main/java/net/minecraft/util/eventlog/EventLogDirectory.java b/src/main/java/net/minecraft/util/eventlog/EventLogDirectory.java
index f150d285aaddb77e84d4932df22bbfd9796ad4a8..f0a0a24c2e21daf03b8e465266e6d4f8cda033d1 100644
--- a/src/main/java/net/minecraft/util/eventlog/EventLogDirectory.java
+++ b/src/main/java/net/minecraft/util/eventlog/EventLogDirectory.java
@@ -168,10 +168,7 @@ public class EventLogDirectory {
         return rawFile;
     }
 
-    public static record CompressedFile(Path a, EventLogDirectory.FileId b) implements EventLogDirectory.File {
-        private final Path path;
-        private final EventLogDirectory.FileId id;
-
+    public static record CompressedFile(Path path, EventLogDirectory.FileId id) implements EventLogDirectory.File {
         @Nullable
         public Reader openReader() throws IOException {
             return !Files.exists(this.path, new LinkOption[0]) ? null : new BufferedReader(new InputStreamReader(new GZIPInputStream(Files.newInputStream(this.path))));
@@ -180,14 +177,6 @@ public class EventLogDirectory {
         public EventLogDirectory.CompressedFile compress() {
             return this;
         }
-
-        public Path path() {
-            return this.path;
-        }
-
-        public EventLogDirectory.FileId id() {
-            return this.id;
-        }
     }
 
     public interface File {
@@ -201,9 +190,7 @@ public class EventLogDirectory {
         EventLogDirectory.CompressedFile compress() throws IOException;
     }
 
-    public static record FileId(LocalDate a, int b) {
-        private final LocalDate date;
-        private final int index;
+    public static record FileId(LocalDate date, int index) {
         private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.BASIC_ISO_DATE;
 
         @Nullable
@@ -230,14 +217,6 @@ public class EventLogDirectory {
         public String toFileName(String s) {
             return this + s;
         }
-
-        public LocalDate date() {
-            return this.date;
-        }
-
-        public int index() {
-            return this.index;
-        }
     }
 
     public static class FileList implements Iterable<EventLogDirectory.File> {
@@ -294,10 +273,7 @@ public class EventLogDirectory {
         }
     }
 
-    public static record RawFile(Path a, EventLogDirectory.FileId b) implements EventLogDirectory.File {
-        private final Path path;
-        private final EventLogDirectory.FileId id;
-
+    public static record RawFile(Path path, EventLogDirectory.FileId id) implements EventLogDirectory.File {
         public FileChannel openChannel() throws IOException {
             return FileChannel.open(this.path, StandardOpenOption.WRITE, StandardOpenOption.READ);
         }
@@ -312,13 +288,5 @@ public class EventLogDirectory {
             EventLogDirectory.tryCompress(this.path, path);
             return new EventLogDirectory.CompressedFile(path, this.id);
         }
-
-        public Path path() {
-            return this.path;
-        }
-
-        public EventLogDirectory.FileId id() {
-            return this.id;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
index dcba5c5615db88aafb96239c176de1d383ff1d2c..c3ebc8b29864ce6d7e80d635f7e5acf2fe1b4e3c 100644
--- a/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
+++ b/src/main/java/net/minecraft/util/profiling/FilledProfileResults.java
@@ -43,7 +43,7 @@ public class FilledProfileResults implements ProfileResults {
         }
     };
     private static final Splitter SPLITTER = Splitter.on('\u001e');
-    private static final Comparator<Entry<String, FilledProfileResults.CounterCollector>> COUNTER_ENTRY_COMPARATOR = Entry.comparingByValue(Comparator.comparingLong((counterCollector) -> counterCollector.totalValue)).reversed();
+    private static final Comparator<Entry<String, FilledProfileResults.CounterCollector>> COUNTER_ENTRY_COMPARATOR = Entry.<String, CounterCollector>comparingByValue(Comparator.comparingLong((counterCollector) -> counterCollector.totalValue)).reversed();
     private final Map<String, ? extends ProfilerPathEntry> entries;
     private final long startTimeNano;
     private final int startTimeTicks;
@@ -124,7 +124,7 @@ public class FilledProfileResults implements ProfileResults {
             Object2LongMap<String> object2LongMap = profilerPathEntry.getCounters();
             if (!object2LongMap.isEmpty()) {
                 List<String> list = SPLITTER.splitToList(s);
-                object2LongMap.forEach((sx, l) -> ((FilledProfileResults.CounterCollector)map.computeIfAbsent(sx, (s) -> new FilledProfileResults.CounterCollector())).addValue(list.iterator(), l));
+                object2LongMap.forEach((sx, l) -> ((FilledProfileResults.CounterCollector)map.computeIfAbsent(sx, (str) -> new FilledProfileResults.CounterCollector())).addValue(list.iterator(), l));
             }
 
         });
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java b/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java
index bee39d1566f0d096e38c9a87c76bb1560956874b..1b8ac342f2b7322edfcff227f397c010bebb4e55 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/parse/JfrStatsResult.java
@@ -19,81 +19,26 @@ import net.minecraft.util.profiling.jfr.stats.TickTimeStat;
 import net.minecraft.util.profiling.jfr.stats.TimedStatSummary;
 import net.minecraft.world.level.chunk.ChunkStatus;
 
-public record JfrStatsResult(Instant a, Instant b, Duration c, @Nullable Duration d, List<TickTimeStat> e, List<CpuLoadStat> f, GcHeapStat.Summary g, ThreadAllocationStat.Summary h, NetworkPacketSummary i, NetworkPacketSummary j, FileIOStat.Summary k, FileIOStat.Summary l, List<ChunkGenStat> m) {
-    private final Instant recordingStarted;
-    private final Instant recordingEnded;
-    private final Duration recordingDuration;
-    @Nullable
-    private final Duration worldCreationDuration;
-    private final List<TickTimeStat> tickTimes;
-    private final List<CpuLoadStat> cpuLoadStats;
-    private final GcHeapStat.Summary heapSummary;
-    private final ThreadAllocationStat.Summary threadAllocationSummary;
-    private final NetworkPacketSummary receivedPacketsSummary;
-    private final NetworkPacketSummary sentPacketsSummary;
-    private final FileIOStat.Summary fileWrites;
-    private final FileIOStat.Summary fileReads;
-    private final List<ChunkGenStat> chunkGenStats;
-
+public record JfrStatsResult(
+        Instant recordingStarted,
+        Instant recordingEnded,
+        Duration recordingDuration,
+        @Nullable Duration worldCreationDuration,
+        List<TickTimeStat> tickTimes,
+        List<CpuLoadStat> cpuLoadStats,
+        GcHeapStat.Summary heapSummary,
+        ThreadAllocationStat.Summary threadAllocationSummary,
+        NetworkPacketSummary receivedPacketsSummary,
+        NetworkPacketSummary sentPacketsSummary,
+        FileIOStat.Summary fileWrites,
+        FileIOStat.Summary fileReads,
+        List<ChunkGenStat> chunkGenStats) {
     public List<Pair<ChunkStatus, TimedStatSummary<ChunkGenStat>>> chunkGenSummary() {
         Map<ChunkStatus, List<ChunkGenStat>> map = this.chunkGenStats.stream().collect(Collectors.groupingBy(ChunkGenStat::status));
-        return map.entrySet().stream().map((entry) -> Pair.of((ChunkStatus)entry.getKey(), TimedStatSummary.summary(entry.getValue()))).sorted(Comparator.comparing((pair) -> ((TimedStatSummary)pair.getSecond()).totalDuration()).reversed()).toList();
+        return map.entrySet().stream().map((entry) -> Pair.of(entry.getKey(), TimedStatSummary.summary(entry.getValue()))).sorted(Comparator.<Pair<ChunkStatus, TimedStatSummary<ChunkGenStat>>, Duration>comparing((pair) -> pair.getSecond().totalDuration()).reversed()).toList();
     }
 
     public String asJson() {
         return (new JfrResultJsonSerializer()).format(this);
     }
-
-    public Instant recordingStarted() {
-        return this.recordingStarted;
-    }
-
-    public Instant recordingEnded() {
-        return this.recordingEnded;
-    }
-
-    public Duration recordingDuration() {
-        return this.recordingDuration;
-    }
-
-    @Nullable
-    public Duration worldCreationDuration() {
-        return this.worldCreationDuration;
-    }
-
-    public List<TickTimeStat> tickTimes() {
-        return this.tickTimes;
-    }
-
-    public List<CpuLoadStat> cpuLoadStats() {
-        return this.cpuLoadStats;
-    }
-
-    public GcHeapStat.Summary heapSummary() {
-        return this.heapSummary;
-    }
-
-    public ThreadAllocationStat.Summary threadAllocationSummary() {
-        return this.threadAllocationSummary;
-    }
-
-    public NetworkPacketSummary receivedPacketsSummary() {
-        return this.receivedPacketsSummary;
-    }
-
-    public NetworkPacketSummary sentPacketsSummary() {
-        return this.sentPacketsSummary;
-    }
-
-    public FileIOStat.Summary fileWrites() {
-        return this.fileWrites;
-    }
-
-    public FileIOStat.Summary fileReads() {
-        return this.fileReads;
-    }
-
-    public List<ChunkGenStat> chunkGenStats() {
-        return this.chunkGenStats;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java b/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java
index 587756f7d9a3ea1f1ed42aa8cc880c63cf6fbc50..674ba6f59aa0f22cba6b5967822f1b292fb76abd 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer.java
@@ -81,14 +81,14 @@ public class JfrResultJsonSerializer {
             JsonObject jsonObject3 = Util.make(new JsonObject(), (jsonObject2x) -> jsonObject2.add("durationNanosPercentiles", jsonObject2x));
             timedStatSummary.percentilesNanos().forEach((integer, d) -> jsonObject3.addProperty("p" + integer, d));
             Function<ChunkGenStat, JsonElement> function = (chunkGenStat) -> {
-                JsonObject jsonObject = new JsonObject();
-                jsonObject.addProperty("durationNanos", chunkGenStat.duration().toNanos());
-                jsonObject.addProperty("level", chunkGenStat.level());
-                jsonObject.addProperty("chunkPosX", chunkGenStat.chunkPos().x);
-                jsonObject.addProperty("chunkPosZ", chunkGenStat.chunkPos().z);
-                jsonObject.addProperty("worldPosX", chunkGenStat.worldPos().x());
-                jsonObject.addProperty("worldPosZ", chunkGenStat.worldPos().z());
-                return jsonObject;
+                JsonObject jsonObjectIn = new JsonObject();
+                jsonObjectIn.addProperty("durationNanos", chunkGenStat.duration().toNanos());
+                jsonObjectIn.addProperty("level", chunkGenStat.level());
+                jsonObjectIn.addProperty("chunkPosX", chunkGenStat.chunkPos().x);
+                jsonObjectIn.addProperty("chunkPosZ", chunkGenStat.chunkPos().z);
+                jsonObjectIn.addProperty("worldPosX", chunkGenStat.worldPos().x());
+                jsonObjectIn.addProperty("worldPosZ", chunkGenStat.worldPos().z());
+                return jsonObjectIn;
             };
             jsonObject2.add("fastest", (JsonElement)function.apply(timedStatSummary.fastest()));
             jsonObject2.add("slowest", (JsonElement)function.apply(timedStatSummary.slowest()));
@@ -139,10 +139,10 @@ public class JfrResultJsonSerializer {
         JsonArray jsonArray = new JsonArray();
         jsonObject.add("topContributors", jsonArray);
         summary.topTenContributorsByTotalBytes().forEach((pair) -> {
-            JsonObject jsonObject = new JsonObject();
-            jsonArray.add(jsonObject);
-            jsonObject.addProperty("path", (String)pair.getFirst());
-            jsonObject.addProperty("totalBytes", (Number)pair.getSecond());
+            JsonObject jsonObjectIn = new JsonObject();
+            jsonArray.add(jsonObjectIn);
+            jsonObjectIn.addProperty("path", (String)pair.getFirst());
+            jsonObjectIn.addProperty("totalBytes", (Number)pair.getSecond());
         });
         return jsonObject;
     }
@@ -163,15 +163,15 @@ public class JfrResultJsonSerializer {
         JsonArray jsonArray = new JsonArray();
         jsonObject.add("topContributors", jsonArray);
         networkPacketSummary.largestSizeContributors().forEach((pair) -> {
-            JsonObject jsonObject = new JsonObject();
-            jsonArray.add(jsonObject);
+            JsonObject jsonObjectIn = new JsonObject();
+            jsonArray.add(jsonObjectIn);
             NetworkPacketSummary.PacketIdentification packetIdentification = (NetworkPacketSummary.PacketIdentification)pair.getFirst();
             NetworkPacketSummary.PacketCountAndSize packetCountAndSize = (NetworkPacketSummary.PacketCountAndSize)pair.getSecond();
-            jsonObject.addProperty("protocolId", packetIdentification.protocolId());
-            jsonObject.addProperty("packetId", packetIdentification.packetId());
-            jsonObject.addProperty("packetName", packetIdentification.packetName());
-            jsonObject.addProperty("totalBytes", packetCountAndSize.totalSize());
-            jsonObject.addProperty("count", packetCountAndSize.totalCount());
+            jsonObjectIn.addProperty("protocolId", packetIdentification.protocolId());
+            jsonObjectIn.addProperty("packetId", packetIdentification.packetId());
+            jsonObjectIn.addProperty("packetName", packetIdentification.packetName());
+            jsonObjectIn.addProperty("totalBytes", packetCountAndSize.totalSize());
+            jsonObjectIn.addProperty("count", packetCountAndSize.totalCount());
         });
         return jsonObject;
     }
@@ -179,12 +179,12 @@ public class JfrResultJsonSerializer {
     private JsonElement cpu(List<CpuLoadStat> list) {
         JsonObject jsonObject = new JsonObject();
         BiFunction<List<CpuLoadStat>, ToDoubleFunction<CpuLoadStat>, JsonObject> biFunction = (listx, toDoubleFunction) -> {
-            JsonObject jsonObject = new JsonObject();
+            JsonObject jsonObjectIn = new JsonObject();
             DoubleSummaryStatistics doubleSummaryStatistics = listx.stream().mapToDouble(toDoubleFunction).summaryStatistics();
-            jsonObject.addProperty("min", doubleSummaryStatistics.getMin());
-            jsonObject.addProperty("average", doubleSummaryStatistics.getAverage());
-            jsonObject.addProperty("max", doubleSummaryStatistics.getMax());
-            return jsonObject;
+            jsonObjectIn.addProperty("min", doubleSummaryStatistics.getMin());
+            jsonObjectIn.addProperty("average", doubleSummaryStatistics.getAverage());
+            jsonObjectIn.addProperty("max", doubleSummaryStatistics.getMax());
+            return jsonObjectIn;
         };
         jsonObject.add("jvm", (JsonElement)biFunction.apply(list, CpuLoadStat::jvm));
         jsonObject.add("userJvm", (JsonElement)biFunction.apply(list, CpuLoadStat::userJvm));
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/ChunkGenStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/ChunkGenStat.java
index 7943544aadd7b4bb53ea3270522b1e8f75669c2f..c1c751cbf4f5293de4b52747990112340d69fbee 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/ChunkGenStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/ChunkGenStat.java
@@ -6,34 +6,8 @@ import net.minecraft.server.level.ColumnPos;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkStatus;
 
-public record ChunkGenStat(Duration a, ChunkPos b, ColumnPos c, ChunkStatus d, String e) implements TimedStat {
-    private final Duration duration;
-    private final ChunkPos chunkPos;
-    private final ColumnPos worldPos;
-    private final ChunkStatus status;
-    private final String level;
-
+public record ChunkGenStat(Duration duration, ChunkPos chunkPos, ColumnPos worldPos, ChunkStatus status, String level) implements TimedStat {
     public static ChunkGenStat from(RecordedEvent recordedEvent) {
         return new ChunkGenStat(recordedEvent.getDuration(), new ChunkPos(recordedEvent.getInt("chunkPosX"), recordedEvent.getInt("chunkPosX")), new ColumnPos(recordedEvent.getInt("worldPosX"), recordedEvent.getInt("worldPosZ")), ChunkStatus.byName(recordedEvent.getString("status")), recordedEvent.getString("level"));
     }
-
-    public Duration duration() {
-        return this.duration;
-    }
-
-    public ChunkPos chunkPos() {
-        return this.chunkPos;
-    }
-
-    public ColumnPos worldPos() {
-        return this.worldPos;
-    }
-
-    public ChunkStatus status() {
-        return this.status;
-    }
-
-    public String level() {
-        return this.level;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/CpuLoadStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/CpuLoadStat.java
index 9a2adc918048296e548245954820bad952dbbda7..76e6413cb803facb52d9b399dd03ba35cbb18292 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/CpuLoadStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/CpuLoadStat.java
@@ -2,24 +2,8 @@ package net.minecraft.util.profiling.jfr.stats;
 
 import jdk.jfr.consumer.RecordedEvent;
 
-public record CpuLoadStat(double a, double b, double c) {
-    private final double jvm;
-    private final double userJvm;
-    private final double system;
-
+public record CpuLoadStat(double jvm, double userJvm, double system) {
     public static CpuLoadStat from(RecordedEvent recordedEvent) {
         return new CpuLoadStat((double)recordedEvent.getFloat("jvmSystem"), (double)recordedEvent.getFloat("jvmUser"), (double)recordedEvent.getFloat("machineTotal"));
     }
-
-    public double jvm() {
-        return this.jvm;
-    }
-
-    public double userJvm() {
-        return this.userJvm;
-    }
-
-    public double system() {
-        return this.system;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java
index c151e74632d5d01c9aad5a24060bb60c54c3bbb3..50ef2f34361ea882177d412b9854b9efbf2573f3 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/FileIOStat.java
@@ -8,15 +8,10 @@ import java.util.Map.Entry;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 
-public record FileIOStat(Duration a, @Nullable String b, long c) {
-    private final Duration duration;
-    @Nullable
-    private final String path;
-    private final long bytes;
-
+public record FileIOStat(Duration duration, @Nullable String path, long bytes) {
     public static FileIOStat.Summary summary(Duration duration, List<FileIOStat> list) {
         long l = list.stream().mapToLong((fileIOStat) -> fileIOStat.bytes).sum();
-        return new FileIOStat.Summary(l, (double)l / (double)duration.getSeconds(), (long)list.size(), (double)list.size() / (double)duration.getSeconds(), (Duration)list.stream().map(FileIOStat::duration).reduce(Duration.ZERO, Duration::plus), (list.stream().filter((fileIOStat) -> fileIOStat.path != null).collect(Collectors.groupingBy((fileIOStat) -> fileIOStat.path, Collectors.summingLong((fileIOStat) -> fileIOStat.bytes)))).entrySet().stream().sorted(Entry.comparingByValue().reversed()).map((entry) -> Pair.of((String)entry.getKey(), (Long)entry.getValue())).limit(10L).toList());
+        return new FileIOStat.Summary(l, (double)l / (double)duration.getSeconds(), (long)list.size(), (double)list.size() / (double)duration.getSeconds(), (Duration)list.stream().map(FileIOStat::duration).reduce(Duration.ZERO, Duration::plus), (list.stream().filter((fileIOStat) -> fileIOStat.path != null).collect(Collectors.groupingBy((fileIOStat) -> fileIOStat.path, Collectors.summingLong((fileIOStat) -> fileIOStat.bytes)))).entrySet().stream().sorted(Entry.<String, Long>comparingByValue().reversed()).map((entry) -> Pair.of((String)entry.getKey(), (Long)entry.getValue())).limit(10L).toList());
     }
 
     public Duration duration() {
@@ -32,36 +27,6 @@ public record FileIOStat(Duration a, @Nullable String b, long c) {
         return this.bytes;
     }
 
-    public static record Summary(long a, double b, long c, double d, Duration e, List<Pair<String, Long>> f) {
-        private final long totalBytes;
-        private final double bytesPerSecond;
-        private final long counts;
-        private final double countsPerSecond;
-        private final Duration timeSpentInIO;
-        private final List<Pair<String, Long>> topTenContributorsByTotalBytes;
-
-        public long totalBytes() {
-            return this.totalBytes;
-        }
-
-        public double bytesPerSecond() {
-            return this.bytesPerSecond;
-        }
-
-        public long counts() {
-            return this.counts;
-        }
-
-        public double countsPerSecond() {
-            return this.countsPerSecond;
-        }
-
-        public Duration timeSpentInIO() {
-            return this.timeSpentInIO;
-        }
-
-        public List<Pair<String, Long>> topTenContributorsByTotalBytes() {
-            return this.topTenContributorsByTotalBytes;
-        }
+    public static record Summary(long totalBytes, double bytesPerSecond, long counts, double countsPerSecond, Duration timeSpentInIO, List<Pair<String, Long>> topTenContributorsByTotalBytes) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/GcHeapStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/GcHeapStat.java
index 0a0b028446afadbf63ee78dd79853944d2875404..701ebf168b673da1edbe26dd54644077a06b06ed 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/GcHeapStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/GcHeapStat.java
@@ -7,11 +7,7 @@ import java.util.Map;
 import java.util.stream.Collectors;
 import jdk.jfr.consumer.RecordedEvent;
 
-public record GcHeapStat(Instant a, long b, GcHeapStat.Timing c) {
-    private final Instant timestamp;
-    private final long heapUsed;
-    private final GcHeapStat.Timing timing;
-
+public record GcHeapStat(Instant timestamp, long heapUsed, GcHeapStat.Timing timing) {
     public static GcHeapStat from(RecordedEvent recordedEvent) {
         return new GcHeapStat(recordedEvent.getStartTime(), recordedEvent.getLong("heapUsed"), recordedEvent.getString("when").equalsIgnoreCase("before gc") ? GcHeapStat.Timing.BEFORE_GC : GcHeapStat.Timing.AFTER_GC);
     }
@@ -36,43 +32,10 @@ public record GcHeapStat(Instant a, long b, GcHeapStat.Timing c) {
         return (double)l / (double)duration.getSeconds();
     }
 
-    public Instant timestamp() {
-        return this.timestamp;
-    }
-
-    public long heapUsed() {
-        return this.heapUsed;
-    }
-
-    public GcHeapStat.Timing timing() {
-        return this.timing;
-    }
-
-    public static record Summary(Duration a, Duration b, int c, double d) {
-        private final Duration duration;
-        private final Duration gcTotalDuration;
-        private final int totalGCs;
-        private final double allocationRateBytesPerSecond;
-
+    public static record Summary(Duration duration, Duration gcTotalDuration, int totalGCs, double allocationRateBytesPerSecond) {
         public float gcOverHead() {
             return (float)this.gcTotalDuration.toMillis() / (float)this.duration.toMillis();
         }
-
-        public Duration duration() {
-            return this.duration;
-        }
-
-        public Duration gcTotalDuration() {
-            return this.gcTotalDuration;
-        }
-
-        public int totalGCs() {
-            return this.totalGCs;
-        }
-
-        public double allocationRateBytesPerSecond() {
-            return this.allocationRateBytesPerSecond;
-        }
     }
 
     static enum Timing {
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/NetworkPacketSummary.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/NetworkPacketSummary.java
index 7835c4257a9af24716d04341adfd9a19550b9b22..cfd8c5cdd188c8faa885883d84d5350507ae9210 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/NetworkPacketSummary.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/NetworkPacketSummary.java
@@ -44,28 +44,15 @@ public final class NetworkPacketSummary {
         return this.largestSizeContributors;
     }
 
-    public static record PacketCountAndSize(long a, long b) {
-        final long totalCount;
-        final long totalSize;
+    public static record PacketCountAndSize(long totalCount, long totalSize) {
         static final Comparator<NetworkPacketSummary.PacketCountAndSize> SIZE_THEN_COUNT = Comparator.comparing(NetworkPacketSummary.PacketCountAndSize::totalSize).thenComparing(NetworkPacketSummary.PacketCountAndSize::totalCount).reversed();
 
         NetworkPacketSummary.PacketCountAndSize add(NetworkPacketSummary.PacketCountAndSize packetCountAndSize) {
             return new NetworkPacketSummary.PacketCountAndSize(this.totalCount + packetCountAndSize.totalCount, this.totalSize + packetCountAndSize.totalSize);
         }
-
-        public long totalCount() {
-            return this.totalCount;
-        }
-
-        public long totalSize() {
-            return this.totalSize;
-        }
     }
 
-    public static record PacketIdentification(PacketFlow a, String b, int c) {
-        private final PacketFlow direction;
-        private final String protocolId;
-        private final int packetId;
+    public static record PacketIdentification(PacketFlow direction, String protocolId, int packetId) {
         private static final Map<NetworkPacketSummary.PacketIdentification, String> PACKET_NAME_BY_ID;
 
         public String packetName() {
@@ -76,18 +63,6 @@ public final class NetworkPacketSummary {
             return new NetworkPacketSummary.PacketIdentification(recordedEvent.getEventType().getName().equals("minecraft.PacketSent") ? PacketFlow.CLIENTBOUND : PacketFlow.SERVERBOUND, recordedEvent.getString("protocolId"), recordedEvent.getInt("packetId"));
         }
 
-        public PacketFlow direction() {
-            return this.direction;
-        }
-
-        public String protocolId() {
-            return this.protocolId;
-        }
-
-        public int packetId() {
-            return this.packetId;
-        }
-
         static {
             Builder<NetworkPacketSummary.PacketIdentification, String> builder = ImmutableMap.builder();
 
@@ -101,4 +76,4 @@ public final class NetworkPacketSummary {
             PACKET_NAME_BY_ID = builder.build();
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/ThreadAllocationStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/ThreadAllocationStat.java
index bad6abce1db5e9d90cec723ba3ce728980e518db..a59270cc1e99cbd61c76130e859de6bc59df0fc2 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/ThreadAllocationStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/ThreadAllocationStat.java
@@ -10,15 +10,12 @@ import java.util.stream.Collectors;
 import jdk.jfr.consumer.RecordedEvent;
 import jdk.jfr.consumer.RecordedThread;
 
-public record ThreadAllocationStat(Instant a, String b, long c) {
-    private final Instant timestamp;
-    private final String threadName;
-    private final long totalBytes;
+public record ThreadAllocationStat(Instant timestamp, String threadName, long totalBytes) {
     private static final String UNKNOWN_THREAD = "unknown";
 
     public static ThreadAllocationStat from(RecordedEvent recordedEvent) {
         RecordedThread recordedThread = recordedEvent.getThread("thread");
-        String s = recordedThread == null ? "unknown" : (String)MoreObjects.firstNonNull(recordedThread.getJavaName(), "unknown");
+        String s = recordedThread == null ? UNKNOWN_THREAD : (String)MoreObjects.firstNonNull(recordedThread.getJavaName(), UNKNOWN_THREAD);
         return new ThreadAllocationStat(recordedEvent.getStartTime(), s, recordedEvent.getLong("allocated"));
     }
 
@@ -49,11 +46,6 @@ public record ThreadAllocationStat(Instant a, String b, long c) {
         return this.totalBytes;
     }
 
-    public static record Summary(Map<String, Double> a) {
-        private final Map<String, Double> allocationsPerSecondByThread;
-
-        public Map<String, Double> allocationsPerSecondByThread() {
-            return this.allocationsPerSecondByThread;
-        }
+    public static record Summary(Map<String, Double> allocationsPerSecondByThread) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/TickTimeStat.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/TickTimeStat.java
index cd8c050e77a0687e3e33262d1c901af4391695e6..96e47ea921319bb755a53e8f1a12d240add72665 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/TickTimeStat.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/TickTimeStat.java
@@ -4,19 +4,8 @@ import java.time.Duration;
 import java.time.Instant;
 import jdk.jfr.consumer.RecordedEvent;
 
-public record TickTimeStat(Instant a, Duration b) {
-    private final Instant timestamp;
-    private final Duration currentAverage;
-
+public record TickTimeStat(Instant timestamp, Duration currentAverage) {
     public static TickTimeStat from(RecordedEvent recordedEvent) {
         return new TickTimeStat(recordedEvent.getStartTime(), recordedEvent.getDuration("averageTickDuration"));
     }
-
-    public Instant timestamp() {
-        return this.timestamp;
-    }
-
-    public Duration currentAverage() {
-        return this.currentAverage;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java b/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java
index ba4be1102095a9d7ecd8c891f7c81f9cd25e780f..0610dcfe064ae24a118e4ffc3b067906ac02e48a 100644
--- a/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java
+++ b/src/main/java/net/minecraft/util/profiling/jfr/stats/TimedStatSummary.java
@@ -7,15 +7,7 @@ import java.util.Map;
 import javax.annotation.Nullable;
 import net.minecraft.util.profiling.jfr.Percentiles;
 
-public record TimedStatSummary<T extends TimedStat>(T a, T b, @Nullable T c, int d, Map<Integer, Double> e, Duration f) {
-    private final T fastest;
-    private final T slowest;
-    @Nullable
-    private final T secondSlowest;
-    private final int count;
-    private final Map<Integer, Double> percentilesNanos;
-    private final Duration totalDuration;
-
+public record TimedStatSummary<T extends TimedStat>(T fastest, T slowest, @Nullable T secondSlowest, int count, Map<Integer, Double> percentilesNanos, Duration totalDuration) {
     public static <T extends TimedStat> TimedStatSummary<T> summary(List<T> list) {
         if (list.isEmpty()) {
             throw new IllegalArgumentException("No values");
@@ -30,29 +22,4 @@ public record TimedStatSummary<T extends TimedStat>(T a, T b, @Nullable T c, int
             return new TimedStatSummary<>(timedStat, timedStat2, timedStat3, i, map, duration);
         }
     }
-
-    public T fastest() {
-        return this.fastest;
-    }
-
-    public T slowest() {
-        return this.slowest;
-    }
-
-    @Nullable
-    public T secondSlowest() {
-        return this.secondSlowest;
-    }
-
-    public int count() {
-        return this.count;
-    }
-
-    public Map<Integer, Double> percentilesNanos() {
-        return this.percentilesNanos;
-    }
-
-    public Duration totalDuration() {
-        return this.totalDuration;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/random/WeightedRandom.java b/src/main/java/net/minecraft/util/random/WeightedRandom.java
index 85c4c8639bbf0ce91f49ad459fba4e2f951e350a..ff4de2385ee4da9a635f29c1ed9eb6e24352520a 100644
--- a/src/main/java/net/minecraft/util/random/WeightedRandom.java
+++ b/src/main/java/net/minecraft/util/random/WeightedRandom.java
@@ -25,7 +25,7 @@ public class WeightedRandom {
 
     public static <T extends WeightedEntry> Optional<T> getRandomItem(RandomSource randomSource, List<T> list, int i) {
         if (i < 0) {
-            throw (IllegalArgumentException)Util.pauseInIde((T)(new IllegalArgumentException("Negative total weight in getRandomItem")));
+            throw (IllegalArgumentException)Util.pauseInIde((new IllegalArgumentException("Negative total weight in getRandomItem")));
         } else if (i == 0) {
             return Optional.empty();
         } else {
diff --git a/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java b/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
index 7ccce34f1350e2e16914507eec138a5d0b254cab..8eb728a96fed696b679c28d964778c2aaaca563a 100644
--- a/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/BiasedToBottomInt.java
@@ -7,7 +7,7 @@ import java.util.function.Function;
 import net.minecraft.util.RandomSource;
 
 public class BiasedToBottomInt extends IntProvider {
-    public static final Codec<BiasedToBottomInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.maxInclusive)).apply(instance, BiasedToBottomInt::new)).comapFlatMap((biasedToBottomInt) -> biasedToBottomInt.maxInclusive < biasedToBottomInt.minInclusive ? DataResult.error(() -> "Max must be at least min, min_inclusive: " + biasedToBottomInt.minInclusive + ", max_inclusive: " + biasedToBottomInt.maxInclusive) : DataResult.success(biasedToBottomInt), Function.identity());
+    public static final Codec<BiasedToBottomInt> CODEC = RecordCodecBuilder.<BiasedToBottomInt>create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((biasedToBottomInt) -> biasedToBottomInt.maxInclusive)).apply(instance, BiasedToBottomInt::new)).comapFlatMap((biasedToBottomInt) -> biasedToBottomInt.maxInclusive < biasedToBottomInt.minInclusive ? DataResult.error(() -> "Max must be at least min, min_inclusive: " + biasedToBottomInt.minInclusive + ", max_inclusive: " + biasedToBottomInt.maxInclusive) : DataResult.success(biasedToBottomInt), Function.identity());
     private final int minInclusive;
     private final int maxInclusive;
 
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java b/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
index e896151921ad440e6915b53e868a0055b7c7311a..bfdd03ffc76b77ef0c82a6b3e6350127f34cea37 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedInt.java
@@ -8,7 +8,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 
 public class ClampedInt extends IntProvider {
-    public static final Codec<ClampedInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(IntProvider.CODEC.fieldOf("source").forGetter((clampedInt) -> clampedInt.source), Codec.INT.fieldOf("min_inclusive").forGetter((clampedInt) -> clampedInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedInt) -> clampedInt.maxInclusive)).apply(instance, ClampedInt::new)).comapFlatMap((clampedInt) -> clampedInt.maxInclusive < clampedInt.minInclusive ? DataResult.error(() -> "Max must be at least min, min_inclusive: " + clampedInt.minInclusive + ", max_inclusive: " + clampedInt.maxInclusive) : DataResult.success(clampedInt), Function.identity());
+    public static final Codec<ClampedInt> CODEC = RecordCodecBuilder.<ClampedInt>create((instance) -> instance.group(IntProvider.CODEC.fieldOf("source").forGetter((clampedInt) -> clampedInt.source), Codec.INT.fieldOf("min_inclusive").forGetter((clampedInt) -> clampedInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedInt) -> clampedInt.maxInclusive)).apply(instance, ClampedInt::new)).comapFlatMap((clampedInt) -> clampedInt.maxInclusive < clampedInt.minInclusive ? DataResult.error(() -> "Max must be at least min, min_inclusive: " + clampedInt.minInclusive + ", max_inclusive: " + clampedInt.maxInclusive) : DataResult.success(clampedInt), Function.identity());
     private final IntProvider source;
     private final int minInclusive;
     private final int maxInclusive;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
index 8630342895a125d7cbdf020d8273f20a7e246f7f..c70065a4610dc4766610d69aef78f7de65212a31 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalFloat.java
@@ -8,7 +8,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 
 public class ClampedNormalFloat extends FloatProvider {
-    public static final Codec<ClampedNormalFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalFloat) -> clampedNormalFloat.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalFloat) -> clampedNormalFloat.deviation), Codec.FLOAT.fieldOf("min").forGetter((clampedNormalFloat) -> clampedNormalFloat.min), Codec.FLOAT.fieldOf("max").forGetter((clampedNormalFloat) -> clampedNormalFloat.max)).apply(instance, ClampedNormalFloat::new)).comapFlatMap((clampedNormalFloat) -> clampedNormalFloat.max < clampedNormalFloat.min ? DataResult.error(() -> "Max must be larger than min: [" + clampedNormalFloat.min + ", " + clampedNormalFloat.max + "]") : DataResult.success(clampedNormalFloat), Function.identity());
+    public static final Codec<ClampedNormalFloat> CODEC = RecordCodecBuilder.<ClampedNormalFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalFloat) -> clampedNormalFloat.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalFloat) -> clampedNormalFloat.deviation), Codec.FLOAT.fieldOf("min").forGetter((clampedNormalFloat) -> clampedNormalFloat.min), Codec.FLOAT.fieldOf("max").forGetter((clampedNormalFloat) -> clampedNormalFloat.max)).apply(instance, ClampedNormalFloat::new)).comapFlatMap((clampedNormalFloat) -> clampedNormalFloat.max < clampedNormalFloat.min ? DataResult.error(() -> "Max must be larger than min: [" + clampedNormalFloat.min + ", " + clampedNormalFloat.max + "]") : DataResult.success(clampedNormalFloat), Function.identity());
     private final float mean;
     private final float deviation;
     private final float min;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java
index 9bcacc04c0af24eb24fe2a09116cf396f60a1630..1383e9478335d4ae62185c846f3db4a1c539a19c 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ClampedNormalInt.java
@@ -8,7 +8,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 
 public class ClampedNormalInt extends IntProvider {
-    public static final Codec<ClampedNormalInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalInt) -> clampedNormalInt.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalInt) -> clampedNormalInt.deviation), Codec.INT.fieldOf("min_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.min_inclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.max_inclusive)).apply(instance, ClampedNormalInt::new)).comapFlatMap((clampedNormalInt) -> clampedNormalInt.max_inclusive < clampedNormalInt.min_inclusive ? DataResult.error(() -> "Max must be larger than min: [" + clampedNormalInt.min_inclusive + ", " + clampedNormalInt.max_inclusive + "]") : DataResult.success(clampedNormalInt), Function.identity());
+    public static final Codec<ClampedNormalInt> CODEC = RecordCodecBuilder.<ClampedNormalInt>create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((clampedNormalInt) -> clampedNormalInt.mean), Codec.FLOAT.fieldOf("deviation").forGetter((clampedNormalInt) -> clampedNormalInt.deviation), Codec.INT.fieldOf("min_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.min_inclusive), Codec.INT.fieldOf("max_inclusive").forGetter((clampedNormalInt) -> clampedNormalInt.max_inclusive)).apply(instance, ClampedNormalInt::new)).comapFlatMap((clampedNormalInt) -> clampedNormalInt.max_inclusive < clampedNormalInt.min_inclusive ? DataResult.error(() -> "Max must be larger than min: [" + clampedNormalInt.min_inclusive + ", " + clampedNormalInt.max_inclusive + "]") : DataResult.success(clampedNormalInt), Function.identity());
     private final float mean;
     private final float deviation;
     private final int min_inclusive;
diff --git a/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java b/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
index a427b0a69b31ee41fdb8474fd3ed137722032bd1..4a9a259756b7321b0a2af86ed3a8d8ee80cd9044 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ConstantFloat.java
@@ -40,4 +40,4 @@ public class ConstantFloat extends FloatProvider {
     public String toString() {
         return Float.toString(this.value);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java b/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
index 17c7ab5b29ac16ad094b3175939d738f767d874e..00b41db9543a8f72b50e6b4bb8e06f49ccc8a0f4 100644
--- a/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/ConstantInt.java
@@ -40,4 +40,4 @@ public class ConstantInt extends IntProvider {
     public String toString() {
         return Integer.toString(this.value);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java b/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
index 209b72398265cab654efc751a0bcb2182470b8dd..9479d81364739f928abe16b00a497cdbe94de41b 100644
--- a/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/TrapezoidFloat.java
@@ -7,7 +7,7 @@ import java.util.function.Function;
 import net.minecraft.util.RandomSource;
 
 public class TrapezoidFloat extends FloatProvider {
-    public static final Codec<TrapezoidFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("min").forGetter((trapezoidFloat) -> trapezoidFloat.min), Codec.FLOAT.fieldOf("max").forGetter((trapezoidFloat) -> trapezoidFloat.max), Codec.FLOAT.fieldOf("plateau").forGetter((trapezoidFloat) -> trapezoidFloat.plateau)).apply(instance, TrapezoidFloat::new)).comapFlatMap((trapezoidFloat) -> {
+    public static final Codec<TrapezoidFloat> CODEC = RecordCodecBuilder.<TrapezoidFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("min").forGetter((trapezoidFloat) -> trapezoidFloat.min), Codec.FLOAT.fieldOf("max").forGetter((trapezoidFloat) -> trapezoidFloat.max), Codec.FLOAT.fieldOf("plateau").forGetter((trapezoidFloat) -> trapezoidFloat.plateau)).apply(instance, TrapezoidFloat::new)).comapFlatMap((trapezoidFloat) -> {
         if (trapezoidFloat.max < trapezoidFloat.min) {
             return DataResult.error(() -> "Max must be larger than min: [" + trapezoidFloat.min + ", " + trapezoidFloat.max + "]");
         } else {
diff --git a/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java b/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
index a34fcfa6625d8c41ebd7810d4db2e943005b0edf..45998505e8ca7d9c014cda8bf3e911e6aaf9515c 100644
--- a/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
+++ b/src/main/java/net/minecraft/util/valueproviders/UniformFloat.java
@@ -8,7 +8,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 
 public class UniformFloat extends FloatProvider {
-    public static final Codec<UniformFloat> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("min_inclusive").forGetter((uniformFloat) -> uniformFloat.minInclusive), Codec.FLOAT.fieldOf("max_exclusive").forGetter((uniformFloat) -> uniformFloat.maxExclusive)).apply(instance, UniformFloat::new)).comapFlatMap((uniformFloat) -> uniformFloat.maxExclusive <= uniformFloat.minInclusive ? DataResult.error(() -> "Max must be larger than min, min_inclusive: " + uniformFloat.minInclusive + ", max_exclusive: " + uniformFloat.maxExclusive) : DataResult.success(uniformFloat), Function.identity());
+    public static final Codec<UniformFloat> CODEC = RecordCodecBuilder.<UniformFloat>create((instance) -> instance.group(Codec.FLOAT.fieldOf("min_inclusive").forGetter((uniformFloat) -> uniformFloat.minInclusive), Codec.FLOAT.fieldOf("max_exclusive").forGetter((uniformFloat) -> uniformFloat.maxExclusive)).apply(instance, UniformFloat::new)).comapFlatMap((uniformFloat) -> uniformFloat.maxExclusive <= uniformFloat.minInclusive ? DataResult.error(() -> "Max must be larger than min, min_inclusive: " + uniformFloat.minInclusive + ", max_exclusive: " + uniformFloat.maxExclusive) : DataResult.success(uniformFloat), Function.identity());
     private final float minInclusive;
     private final float maxExclusive;
 
diff --git a/src/main/java/net/minecraft/util/valueproviders/UniformInt.java b/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
index 89681a2b4d346c9a2d8e8405ceb4bba756084153..631c2bbfcd628d77510c1dc1dda31e6cd29c3f95 100644
--- a/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
+++ b/src/main/java/net/minecraft/util/valueproviders/UniformInt.java
@@ -8,7 +8,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 
 public class UniformInt extends IntProvider {
-    public static final Codec<UniformInt> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((uniformInt) -> uniformInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((uniformInt) -> uniformInt.maxInclusive)).apply(instance, UniformInt::new)).comapFlatMap((uniformInt) -> uniformInt.maxInclusive < uniformInt.minInclusive ? DataResult.error(() -> "Max must be at least min, min_inclusive: " + uniformInt.minInclusive + ", max_inclusive: " + uniformInt.maxInclusive) : DataResult.success(uniformInt), Function.identity());
+    public static final Codec<UniformInt> CODEC = RecordCodecBuilder.<UniformInt>create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((uniformInt) -> uniformInt.minInclusive), Codec.INT.fieldOf("max_inclusive").forGetter((uniformInt) -> uniformInt.maxInclusive)).apply(instance, UniformInt::new)).comapFlatMap((uniformInt) -> uniformInt.maxInclusive < uniformInt.minInclusive ? DataResult.error(() -> "Max must be at least min, min_inclusive: " + uniformInt.minInclusive + ", max_inclusive: " + uniformInt.maxInclusive) : DataResult.success(uniformInt), Function.identity());
     private final int minInclusive;
     private final int maxInclusive;
 
diff --git a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
index 02b6f7d3f36a2deb4dcd967f18e76921921813b6..1fddf20fb751edc0263d54befa2ee72f75e89c39 100644
--- a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
+++ b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
@@ -110,7 +110,7 @@ public class WorldUpgrader {
                 builder2.put(resourceKey2, new ChunkStorage(path.resolve("region"), this.dataFixer, true));
             }
 
-            ImmutableMap<ResourceKey<Level>, ChunkStorage> immutableMap2 = builder2.build();
+            ImmutableMap<ResourceKey<Level>, ChunkStorage> immutableMap2In = builder2.build();
             long l = Util.getMillis();
             this.status = Component.translatable("optimizeWorld.stage.upgrading");
 
@@ -120,7 +120,7 @@ public class WorldUpgrader {
 
                 for(ResourceKey<Level> resourceKey3 : this.levels) {
                     ListIterator<ChunkPos> listIterator = (ListIterator)immutableMap.get(resourceKey3);
-                    ChunkStorage chunkStorage = (ChunkStorage)immutableMap2.get(resourceKey3);
+                    ChunkStorage chunkStorage = (ChunkStorage)immutableMap2In.get(resourceKey3);
                     if (listIterator.hasNext()) {
                         ChunkPos chunkPos = (ChunkPos)listIterator.next();
                         boolean flag2 = false;
@@ -188,7 +188,7 @@ public class WorldUpgrader {
             }
 
             this.status = Component.translatable("optimizeWorld.stage.finished");
-            UnmodifiableIterator var33 = immutableMap2.values().iterator();
+            UnmodifiableIterator var33 = immutableMap2In.values().iterator();
 
             while(var33.hasNext()) {
                 ChunkStorage chunkStorage2 = (ChunkStorage)var33.next();
diff --git a/src/main/java/net/minecraft/world/damagesource/CombatEntry.java b/src/main/java/net/minecraft/world/damagesource/CombatEntry.java
index 0786675008aa3c61eecc7e55dc009e1786f2df66..65e86250cb162b12e295b7523af0e90500aca9ec 100644
--- a/src/main/java/net/minecraft/world/damagesource/CombatEntry.java
+++ b/src/main/java/net/minecraft/world/damagesource/CombatEntry.java
@@ -2,27 +2,5 @@ package net.minecraft.world.damagesource;
 
 import javax.annotation.Nullable;
 
-public record CombatEntry(DamageSource a, float b, @Nullable FallLocation c, float d) {
-    private final DamageSource source;
-    private final float damage;
-    @Nullable
-    private final FallLocation fallLocation;
-    private final float fallDistance;
-
-    public DamageSource source() {
-        return this.source;
-    }
-
-    public float damage() {
-        return this.damage;
-    }
-
-    @Nullable
-    public FallLocation fallLocation() {
-        return this.fallLocation;
-    }
-
-    public float fallDistance() {
-        return this.fallDistance;
-    }
-}
\ No newline at end of file
+public record CombatEntry(DamageSource source, float damage, @Nullable FallLocation fallLocation, float fallDistance) {
+}
diff --git a/src/main/java/net/minecraft/world/damagesource/DamageType.java b/src/main/java/net/minecraft/world/damagesource/DamageType.java
index eca189f64bdb508472bd66e94549fdf5777df6d8..13ef06e87a8f90df057ba7e9ef57d3dc2118557e 100644
--- a/src/main/java/net/minecraft/world/damagesource/DamageType.java
+++ b/src/main/java/net/minecraft/world/damagesource/DamageType.java
@@ -3,12 +3,7 @@ package net.minecraft.world.damagesource;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 
-public record DamageType(String b, DamageScaling c, float d, DamageEffects e, DeathMessageType f) {
-    private final String msgId;
-    private final DamageScaling scaling;
-    private final float exhaustion;
-    private final DamageEffects effects;
-    private final DeathMessageType deathMessageType;
+public record DamageType(String msgId, DamageScaling scaling, float exhaustion, DamageEffects effects, DeathMessageType deathMessageType) {
     public static final Codec<DamageType> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.STRING.fieldOf("message_id").forGetter(DamageType::msgId), DamageScaling.CODEC.fieldOf("scaling").forGetter(DamageType::scaling), Codec.FLOAT.fieldOf("exhaustion").forGetter(DamageType::exhaustion), DamageEffects.CODEC.optionalFieldOf("effects", DamageEffects.HURT).forGetter(DamageType::effects), DeathMessageType.CODEC.optionalFieldOf("death_message_type", DeathMessageType.DEFAULT).forGetter(DamageType::deathMessageType)).apply(instance, DamageType::new));
 
     public DamageType(String s, DamageScaling damageScaling, float f) {
@@ -26,24 +21,4 @@ public record DamageType(String b, DamageScaling c, float d, DamageEffects e, De
     public DamageType(String s, float f) {
         this(s, DamageScaling.WHEN_CAUSED_BY_LIVING_NON_PLAYER, f);
     }
-
-    public String msgId() {
-        return this.msgId;
-    }
-
-    public DamageScaling scaling() {
-        return this.scaling;
-    }
-
-    public float exhaustion() {
-        return this.exhaustion;
-    }
-
-    public DamageEffects effects() {
-        return this.effects;
-    }
-
-    public DeathMessageType deathMessageType() {
-        return this.deathMessageType;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/damagesource/FallLocation.java b/src/main/java/net/minecraft/world/damagesource/FallLocation.java
index b5b6955f7b352f09b33b90ecebb575bea457a335..88c93fd08946ca22aeb803d4c7d95e88d1755919 100644
--- a/src/main/java/net/minecraft/world/damagesource/FallLocation.java
+++ b/src/main/java/net/minecraft/world/damagesource/FallLocation.java
@@ -8,8 +8,7 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 
-public record FallLocation(String i) {
-    private final String id;
+public record FallLocation(String id) {
     public static final FallLocation GENERIC = new FallLocation("generic");
     public static final FallLocation LADDER = new FallLocation("ladder");
     public static final FallLocation VINES = new FallLocation("vines");
@@ -51,8 +50,4 @@ public record FallLocation(String i) {
     public String languageKey() {
         return "death.fell.accident." + this.id;
     }
-
-    public String id() {
-        return this.id;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/effect/MobEffectInstance.java b/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
index 20acb4cd6ba97811aaf87d05d563d44a470bc67b..0fd0ea9ce52264793ae1c4739c678f94e4029590 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
@@ -302,7 +302,7 @@ public class MobEffectInstance implements Comparable<MobEffectInstance> {
 
         Optional<MobEffectInstance.FactorData> optional;
         if (compoundTag.contains("factor_calculation_data", 10)) {
-            optional = MobEffectInstance.FactorData.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("factor_calculation_data"))).resultOrPartial(LOGGER::error);
+            optional = MobEffectInstance.FactorData.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("factor_calculation_data"))).resultOrPartial(LOGGER::error);
         } else {
             optional = Optional.empty();
         }
@@ -362,4 +362,4 @@ public class MobEffectInstance implements Comparable<MobEffectInstance> {
             return Mth.lerp(f, this.factorPreviousFrame, this.factorCurrent);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/entity/Display.java b/src/main/java/net/minecraft/world/entity/Display.java
index d7b15cbc78c2fcb518402d4a156b756524508f8f..db239288d1176c012baddc001ba66cdaf37076dd 100644
--- a/src/main/java/net/minecraft/world/entity/Display.java
+++ b/src/main/java/net/minecraft/world/entity/Display.java
@@ -531,30 +531,14 @@ public abstract class Display extends Entity {
             this.blockRenderState = new Display.BlockDisplay.BlockRenderState(this.getBlockState());
         }
 
-        public static record BlockRenderState(BlockState a) {
-            private final BlockState blockState;
-
-            public BlockState blockState() {
-                return this.blockState;
-            }
+        public static record BlockRenderState(BlockState blockState) {
         }
     }
 
-    static record ColorInterpolator(int a, int b) implements Display.IntInterpolator {
-        private final int previous;
-        private final int current;
-
+    static record ColorInterpolator(int previous, int current) implements Display.IntInterpolator {
         public int get(float f) {
             return FastColor.ARGB32.lerp(f, this.previous, this.current);
         }
-
-        public int previous() {
-            return this.previous;
-        }
-
-        public int current() {
-            return this.current;
-        }
     }
 
     @FunctionalInterface
@@ -664,52 +648,20 @@ public abstract class Display extends Entity {
             this.itemRenderState = new Display.ItemDisplay.ItemRenderState(this.getItemStack(), this.getItemTransform());
         }
 
-        public static record ItemRenderState(ItemStack a, ItemDisplayContext b) {
-            private final ItemStack itemStack;
-            private final ItemDisplayContext itemTransform;
-
-            public ItemStack itemStack() {
-                return this.itemStack;
-            }
-
-            public ItemDisplayContext itemTransform() {
-                return this.itemTransform;
-            }
+        public static record ItemRenderState(ItemStack itemStack, ItemDisplayContext itemTransform) {
         }
     }
 
-    static record LinearFloatInterpolator(float a, float b) implements Display.FloatInterpolator {
-        private final float previous;
-        private final float current;
-
+    static record LinearFloatInterpolator(float previous, float current) implements Display.FloatInterpolator {
         public float get(float f) {
             return Mth.lerp(f, this.previous, this.current);
         }
-
-        public float previous() {
-            return this.previous;
-        }
-
-        public float current() {
-            return this.current;
-        }
     }
 
-    static record LinearIntInterpolator(int a, int b) implements Display.IntInterpolator {
-        private final int previous;
-        private final int current;
-
+    static record LinearIntInterpolator(int previous, int current) implements Display.IntInterpolator {
         public int get(float f) {
             return Mth.lerpInt(f, this.previous, this.current);
         }
-
-        public int previous() {
-            return this.previous;
-        }
-
-        public int current() {
-            return this.current;
-        }
     }
 
     static class PosRotInterpolationTarget {
@@ -739,13 +691,13 @@ public abstract class Display extends Entity {
         }
     }
 
-    public static record RenderState(Display.GenericInterpolator<Transformation> a, Display.BillboardConstraints b, int c, Display.FloatInterpolator d, Display.FloatInterpolator e, int f) {
-        final Display.GenericInterpolator<Transformation> transformation;
-        private final Display.BillboardConstraints billboardConstraints;
-        private final int brightnessOverride;
-        final Display.FloatInterpolator shadowRadius;
-        final Display.FloatInterpolator shadowStrength;
-        private final int glowColorOverride;
+    public static record RenderState(
+            Display.GenericInterpolator<Transformation> transformation,
+            Display.BillboardConstraints billboardConstraints,
+            int brightnessOverride,
+            Display.FloatInterpolator shadowRadius,
+            Display.FloatInterpolator shadowStrength,
+            int glowColorOverride) {
 
         public Display.GenericInterpolator<Transformation> transformation() {
             return this.transformation;
@@ -1000,30 +952,10 @@ public abstract class Display extends Entity {
             }
         }
 
-        public static record CachedInfo(List<Display.TextDisplay.CachedLine> a, int b) {
-            private final List<Display.TextDisplay.CachedLine> lines;
-            private final int width;
-
-            public List<Display.TextDisplay.CachedLine> lines() {
-                return this.lines;
-            }
-
-            public int width() {
-                return this.width;
-            }
+        public static record CachedInfo(List<Display.TextDisplay.CachedLine> lines, int width) {
         }
 
-        public static record CachedLine(FormattedCharSequence a, int b) {
-            private final FormattedCharSequence contents;
-            private final int width;
-
-            public FormattedCharSequence contents() {
-                return this.contents;
-            }
-
-            public int width() {
-                return this.width;
-            }
+        public static record CachedLine(FormattedCharSequence contents, int width) {
         }
 
         @FunctionalInterface
@@ -1031,49 +963,18 @@ public abstract class Display extends Entity {
             Display.TextDisplay.CachedInfo split(Component var1, int var2);
         }
 
-        public static record TextRenderState(Component a, int b, Display.IntInterpolator c, Display.IntInterpolator d, byte e) {
-            private final Component text;
-            private final int lineWidth;
-            final Display.IntInterpolator textOpacity;
-            final Display.IntInterpolator backgroundColor;
-            private final byte flags;
-
-            public Component text() {
-                return this.text;
-            }
-
-            public int lineWidth() {
-                return this.lineWidth;
-            }
-
-            public Display.IntInterpolator textOpacity() {
-                return this.textOpacity;
-            }
-
-            public Display.IntInterpolator backgroundColor() {
-                return this.backgroundColor;
-            }
-
-            public byte flags() {
-                return this.flags;
-            }
+        public static record TextRenderState(
+                Component text,
+                int lineWidth,
+                Display.IntInterpolator textOpacity,
+                Display.IntInterpolator backgroundColor,
+                byte flags) {
         }
     }
 
-    static record TransformationInterpolator(Transformation a, Transformation b) implements Display.GenericInterpolator<Transformation> {
-        private final Transformation previous;
-        private final Transformation current;
-
+    static record TransformationInterpolator(Transformation previous, Transformation current) implements Display.GenericInterpolator<Transformation> {
         public Transformation get(float f) {
             return (double)f >= 1.0D ? this.current : this.previous.slerp(this.current, f);
         }
-
-        public Transformation previous() {
-            return this.previous;
-        }
-
-        public Transformation current() {
-            return this.current;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/entity/Interaction.java b/src/main/java/net/minecraft/world/entity/Interaction.java
index 5cfe56f028b29285dfc57b461b4538d2d0c53f15..23e7d2b6e699159df735ea38fcca4ed076392cfb 100644
--- a/src/main/java/net/minecraft/world/entity/Interaction.java
+++ b/src/main/java/net/minecraft/world/entity/Interaction.java
@@ -184,17 +184,7 @@ public class Interaction extends Entity implements Attackable, Targeting {
         return this.getDimensions().makeBoundingBox(this.position());
     }
 
-    static record PlayerAction(UUID b, long c) {
-        private final UUID player;
-        private final long timestamp;
+    static record PlayerAction(UUID player, long timestamp) {
         public static final Codec<Interaction.PlayerAction> CODEC = RecordCodecBuilder.create((instance) -> instance.group(UUIDUtil.CODEC.fieldOf("player").forGetter(Interaction.PlayerAction::player), Codec.LONG.fieldOf("timestamp").forGetter(Interaction.PlayerAction::timestamp)).apply(instance, Interaction.PlayerAction::new));
-
-        public UUID player() {
-            return this.player;
-        }
-
-        public long timestamp() {
-            return this.timestamp;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index e82cda08191f944e7d510a13732a23830b6d9284..5fea9e5ed37bccccb2a6bce1cb3b580550f2989b 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -3380,16 +3380,6 @@ public abstract class LivingEntity extends Entity implements Attackable {
         this.yHeadRot = (float)Mth.rotLerp(1.0D / (double)i, (double)this.yHeadRot, d);
     }
 
-    public static record Fallsounds(SoundEvent a, SoundEvent b) {
-        private final SoundEvent small;
-        private final SoundEvent big;
-
-        public SoundEvent small() {
-            return this.small;
-        }
-
-        public SoundEvent big() {
-            return this.big;
-        }
+    public static record Fallsounds(SoundEvent small, SoundEvent big) {
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index ae280c9b2f55cd70dee9fb1f5abc9a51347da742..86965058b894e117f40887a9f63178d55313489e 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -646,10 +646,10 @@ public abstract class Mob extends LivingEntity implements Targeting {
 
                     Item diggerItem2 = itemStack2.getItem();
                     if (diggerItem2 instanceof DiggerItem) {
-                        DiggerItem diggerItem = (DiggerItem)diggerItem2;
-                        DiggerItem diggerItem2 = (DiggerItem)itemStack.getItem();
-                        if (diggerItem2.getAttackDamage() != diggerItem.getAttackDamage()) {
-                            return diggerItem2.getAttackDamage() > diggerItem.getAttackDamage();
+                        DiggerItem diggerItemIn = (DiggerItem)diggerItem2;
+                        DiggerItem diggerItem2In = (DiggerItem)itemStack.getItem();
+                        if (diggerItem2In.getAttackDamage() != diggerItemIn.getAttackDamage()) {
+                            return diggerItem2In.getAttackDamage() > diggerItemIn.getAttackDamage();
                         }
 
                         return this.canReplaceEqualItem(itemStack, itemStack2);
@@ -1118,7 +1118,7 @@ public abstract class Mob extends LivingEntity implements Targeting {
             if (itemStack.getItem() instanceof SpawnEggItem) {
                 if (this.level() instanceof ServerLevel) {
                     SpawnEggItem spawnEggItem = (SpawnEggItem)itemStack.getItem();
-                    Optional<Mob> optional = spawnEggItem.spawnOffspringFromSpawnEgg(player, this, this.getType(), (ServerLevel)this.level(), this.position(), itemStack);
+                    Optional<Mob> optional = spawnEggItem.spawnOffspringFromSpawnEgg(player, this, (EntityType) this.getType(), (ServerLevel)this.level(), this.position(), itemStack);
                     optional.ifPresent((mob) -> this.onOffspringSpawnedFromEgg(player, mob));
                     return optional.isPresent() ? InteractionResult.SUCCESS : InteractionResult.PASS;
                 } else {
@@ -1458,4 +1458,4 @@ public abstract class Mob extends LivingEntity implements Targeting {
         SpawnEggItem spawnEggItem = SpawnEggItem.byId(this.getType());
         return spawnEggItem == null ? null : new ItemStack(spawnEggItem);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
index 14bdf1cf46bb7c81b4a03f840808bd2b43435c8b..66e4b95e90c93a3334af990a6ae677c650b65b84 100644
--- a/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
+++ b/src/main/java/net/minecraft/world/entity/SpawnPlacements.java
@@ -61,7 +61,7 @@ public class SpawnPlacements {
 
     public static <T extends Entity> boolean checkSpawnRules(EntityType<T> entityType, ServerLevelAccessor serverLevelAccessor, MobSpawnType mobSpawnType, BlockPos blockPos, RandomSource randomSource) {
         SpawnPlacements.Data data = (SpawnPlacements.Data)DATA_BY_TYPE.get(entityType);
-        return data == null || data.predicate.test(entityType, serverLevelAccessor, mobSpawnType, blockPos, randomSource);
+        return data == null || data.predicate.test((EntityType) entityType, serverLevelAccessor, mobSpawnType, blockPos, randomSource);
     }
 
     static {
diff --git a/src/main/java/net/minecraft/world/entity/ai/Brain.java b/src/main/java/net/minecraft/world/entity/ai/Brain.java
index c196301146ac885df5230d2177c091a2ce34f8ff..be698a29268b95b391770af2c6cc4eb536c638af 100644
--- a/src/main/java/net/minecraft/world/entity/ai/Brain.java
+++ b/src/main/java/net/minecraft/world/entity/ai/Brain.java
@@ -69,14 +69,14 @@ public class Brain<E extends LivingEntity> {
             }
 
             public <T> DataResult<Brain<E>> decode(DynamicOps<T> dynamicOps, MapLike<T> mapLike) {
-                MutableObject<DataResult<Builder<Brain.MemoryValue<?>>>> mutableObject = new MutableObject(DataResult.success(ImmutableList.builder()));
+                MutableObject<DataResult<Builder<Brain.MemoryValue<?>>>> mutableObjectIn = new MutableObject<>(DataResult.success(ImmutableList.builder()));
                 mapLike.entries().forEach((pair) -> {
                     DataResult<MemoryModuleType<?>> dataResult = BuiltInRegistries.MEMORY_MODULE_TYPE.byNameCodec().parse(dynamicOps, pair.getFirst());
                     DataResult<? extends Brain.MemoryValue<?>> dataResult2 = dataResult.flatMap((memoryModuleType) -> this.captureRead(memoryModuleType, dynamicOps, (T)pair.getSecond()));
-                    mutableObject.setValue((mutableObject.getValue()).apply2(Builder::add, dataResult2));
+                    mutableObjectIn.setValue((mutableObjectIn.getValue()).apply2(Builder::add, dataResult2));
                 });
-                ImmutableList<Brain.MemoryValue<?>> immutableList = (ImmutableList)(mutableObject.getValue()).resultOrPartial(Brain.LOGGER::error).map(Builder::build).orElseGet(ImmutableList::of);
-                return DataResult.success(new Brain(collection, collection2, immutableList, mutableObject::getValue));
+                ImmutableList<Brain.MemoryValue<?>> immutableList = mutableObjectIn.getValue().resultOrPartial(Brain.LOGGER::error).map(Builder::build).orElseGet(ImmutableList::of);
+                return DataResult.success(new Brain<>(collection, collection2, immutableList, mutableObject::getValue));
             }
 
             private <T, U> DataResult<Brain.MemoryValue<U>> captureRead(MemoryModuleType<U> memoryModuleType, DynamicOps<T> dynamicOps, T object) {
@@ -165,14 +165,14 @@ public class Brain<E extends LivingEntity> {
         if (optional == null) {
             throw new IllegalStateException("Unregistered memory fetched: " + memoryModuleType);
         } else {
-            return optional.map(ExpirableValue::getValue);
+            return (Optional<U>) optional.map(ExpirableValue::getValue);
         }
     }
 
     @Nullable
     public <U> Optional<U> getMemoryInternal(MemoryModuleType<U> memoryModuleType) {
         Optional<? extends ExpirableValue<?>> optional = this.memories.get(memoryModuleType);
-        return optional == null ? null : optional.map(ExpirableValue::getValue);
+        return optional == null ? null : (Optional<U>) optional.map(ExpirableValue::getValue);
     }
 
     public <U> long getTimeUntilExpiry(MemoryModuleType<U> memoryModuleType) {
@@ -333,10 +333,7 @@ public class Brain<E extends LivingEntity> {
             this.activityMemoriesToEraseWhenStopped.put(activity, set2);
         }
 
-        UnmodifiableIterator var5 = immutableList.iterator();
-
-        while(var5.hasNext()) {
-            Pair<Integer, ? extends BehaviorControl<? super E>> pair = var5.next();
+        for (var pair : immutableList) {
             ((this.availableBehaviorsByPriority.computeIfAbsent((Integer)pair.getFirst(), (integer) -> Maps.newHashMap())).computeIfAbsent(activity, (activityx) -> Sets.newLinkedHashSet())).add((BehaviorControl)pair.getSecond());
         }
 
@@ -445,7 +442,7 @@ public class Brain<E extends LivingEntity> {
     }
 
     private boolean isEmptyCollection(Object object) {
-        return object instanceof Collection && (object).isEmpty();
+        return object instanceof Collection && ((Collection) object).isEmpty();
     }
 
     ImmutableList<? extends Pair<Integer, ? extends BehaviorControl<? super E>>> createPriorityPairs(int i, ImmutableList<? extends BehaviorControl<? super E>> immutableList) {
@@ -466,7 +463,7 @@ public class Brain<E extends LivingEntity> {
         private final Optional<? extends ExpirableValue<U>> value;
 
         static <U> Brain.MemoryValue<U> createUnchecked(MemoryModuleType<U> memoryModuleType, Optional<? extends ExpirableValue<?>> optional) {
-            return new Brain.MemoryValue<>(memoryModuleType, optional);
+            return new Brain.MemoryValue(memoryModuleType, optional);
         }
 
         MemoryValue(MemoryModuleType<U> memoryModuleType, Optional<? extends ExpirableValue<U>> optional) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
index a89c1176e1033bda199b4f1733a4bbe42b730ab1..8c5846457ceb6a0650c1adfc3f2733f530ff3591 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
@@ -80,7 +80,7 @@ import org.slf4j.Logger;
 
 public class DefaultAttributes {
     private static final Logger LOGGER = LogUtils.getLogger();
-    private static final Map<EntityType<? extends LivingEntity>, AttributeSupplier> SUPPLIERS = ImmutableMap.builder().put(EntityType.ALLAY, Allay.createAttributes().build()).put(EntityType.ARMOR_STAND, LivingEntity.createLivingAttributes().build()).put(EntityType.AXOLOTL, Axolotl.createAttributes().build()).put(EntityType.BAT, Bat.createAttributes().build()).put(EntityType.BEE, Bee.createAttributes().build()).put(EntityType.BLAZE, Blaze.createAttributes().build()).put(EntityType.CAT, Cat.createAttributes().build()).put(EntityType.CAMEL, Camel.createAttributes().build()).put(EntityType.CAVE_SPIDER, CaveSpider.createCaveSpider().build()).put(EntityType.CHICKEN, Chicken.createAttributes().build()).put(EntityType.COD, AbstractFish.createAttributes().build()).put(EntityType.COW, Cow.createAttributes().build()).put(EntityType.CREEPER, Creeper.createAttributes().build()).put(EntityType.DOLPHIN, Dolphin.createAttributes().build()).put(EntityType.DONKEY, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.DROWNED, Zombie.createAttributes().build()).put(EntityType.ELDER_GUARDIAN, ElderGuardian.createAttributes().build()).put(EntityType.ENDERMAN, EnderMan.createAttributes().build()).put(EntityType.ENDERMITE, Endermite.createAttributes().build()).put(EntityType.ENDER_DRAGON, EnderDragon.createAttributes().build()).put(EntityType.EVOKER, Evoker.createAttributes().build()).put(EntityType.FOX, Fox.createAttributes().build()).put(EntityType.FROG, Frog.createAttributes().build()).put(EntityType.GHAST, Ghast.createAttributes().build()).put(EntityType.GIANT, Giant.createAttributes().build()).put(EntityType.GLOW_SQUID, GlowSquid.createAttributes().build()).put(EntityType.GOAT, Goat.createAttributes().build()).put(EntityType.GUARDIAN, Guardian.createAttributes().build()).put(EntityType.HOGLIN, Hoglin.createAttributes().build()).put(EntityType.HORSE, AbstractHorse.createBaseHorseAttributes().build()).put(EntityType.HUSK, Zombie.createAttributes().build()).put(EntityType.ILLUSIONER, Illusioner.createAttributes().build()).put(EntityType.IRON_GOLEM, IronGolem.createAttributes().build()).put(EntityType.LLAMA, Llama.createAttributes().build()).put(EntityType.MAGMA_CUBE, MagmaCube.createAttributes().build()).put(EntityType.MOOSHROOM, Cow.createAttributes().build()).put(EntityType.MULE, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.OCELOT, Ocelot.createAttributes().build()).put(EntityType.PANDA, Panda.createAttributes().build()).put(EntityType.PARROT, Parrot.createAttributes().build()).put(EntityType.PHANTOM, Monster.createMonsterAttributes().build()).put(EntityType.PIG, Pig.createAttributes().build()).put(EntityType.PIGLIN, Piglin.createAttributes().build()).put(EntityType.PIGLIN_BRUTE, PiglinBrute.createAttributes().build()).put(EntityType.PILLAGER, Pillager.createAttributes().build()).put(EntityType.PLAYER, Player.createAttributes().build()).put(EntityType.POLAR_BEAR, PolarBear.createAttributes().build()).put(EntityType.PUFFERFISH, AbstractFish.createAttributes().build()).put(EntityType.RABBIT, Rabbit.createAttributes().build()).put(EntityType.RAVAGER, Ravager.createAttributes().build()).put(EntityType.SALMON, AbstractFish.createAttributes().build()).put(EntityType.SHEEP, Sheep.createAttributes().build()).put(EntityType.SHULKER, Shulker.createAttributes().build()).put(EntityType.SILVERFISH, Silverfish.createAttributes().build()).put(EntityType.SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.SKELETON_HORSE, SkeletonHorse.createAttributes().build()).put(EntityType.SLIME, Monster.createMonsterAttributes().build()).put(EntityType.SNIFFER, Sniffer.createAttributes().build()).put(EntityType.SNOW_GOLEM, SnowGolem.createAttributes().build()).put(EntityType.SPIDER, Spider.createAttributes().build()).put(EntityType.SQUID, Squid.createAttributes().build()).put(EntityType.STRAY, AbstractSkeleton.createAttributes().build()).put(EntityType.STRIDER, Strider.createAttributes().build()).put(EntityType.TADPOLE, Tadpole.createAttributes().build()).put(EntityType.TRADER_LLAMA, Llama.createAttributes().build()).put(EntityType.TROPICAL_FISH, AbstractFish.createAttributes().build()).put(EntityType.TURTLE, Turtle.createAttributes().build()).put(EntityType.VEX, Vex.createAttributes().build()).put(EntityType.VILLAGER, Villager.createAttributes().build()).put(EntityType.VINDICATOR, Vindicator.createAttributes().build()).put(EntityType.WARDEN, Warden.createAttributes().build()).put(EntityType.WANDERING_TRADER, Mob.createMobAttributes().build()).put(EntityType.WITCH, Witch.createAttributes().build()).put(EntityType.WITHER, WitherBoss.createAttributes().build()).put(EntityType.WITHER_SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.WOLF, Wolf.createAttributes().build()).put(EntityType.ZOGLIN, Zoglin.createAttributes().build()).put(EntityType.ZOMBIE, Zombie.createAttributes().build()).put(EntityType.ZOMBIE_HORSE, ZombieHorse.createAttributes().build()).put(EntityType.ZOMBIE_VILLAGER, Zombie.createAttributes().build()).put(EntityType.ZOMBIFIED_PIGLIN, ZombifiedPiglin.createAttributes().build()).build();
+    private static final Map<EntityType<? extends LivingEntity>, AttributeSupplier> SUPPLIERS = ImmutableMap.<EntityType<? extends LivingEntity>, AttributeSupplier>builder().put(EntityType.ALLAY, Allay.createAttributes().build()).put(EntityType.ARMOR_STAND, LivingEntity.createLivingAttributes().build()).put(EntityType.AXOLOTL, Axolotl.createAttributes().build()).put(EntityType.BAT, Bat.createAttributes().build()).put(EntityType.BEE, Bee.createAttributes().build()).put(EntityType.BLAZE, Blaze.createAttributes().build()).put(EntityType.CAT, Cat.createAttributes().build()).put(EntityType.CAMEL, Camel.createAttributes().build()).put(EntityType.CAVE_SPIDER, CaveSpider.createCaveSpider().build()).put(EntityType.CHICKEN, Chicken.createAttributes().build()).put(EntityType.COD, AbstractFish.createAttributes().build()).put(EntityType.COW, Cow.createAttributes().build()).put(EntityType.CREEPER, Creeper.createAttributes().build()).put(EntityType.DOLPHIN, Dolphin.createAttributes().build()).put(EntityType.DONKEY, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.DROWNED, Zombie.createAttributes().build()).put(EntityType.ELDER_GUARDIAN, ElderGuardian.createAttributes().build()).put(EntityType.ENDERMAN, EnderMan.createAttributes().build()).put(EntityType.ENDERMITE, Endermite.createAttributes().build()).put(EntityType.ENDER_DRAGON, EnderDragon.createAttributes().build()).put(EntityType.EVOKER, Evoker.createAttributes().build()).put(EntityType.FOX, Fox.createAttributes().build()).put(EntityType.FROG, Frog.createAttributes().build()).put(EntityType.GHAST, Ghast.createAttributes().build()).put(EntityType.GIANT, Giant.createAttributes().build()).put(EntityType.GLOW_SQUID, GlowSquid.createAttributes().build()).put(EntityType.GOAT, Goat.createAttributes().build()).put(EntityType.GUARDIAN, Guardian.createAttributes().build()).put(EntityType.HOGLIN, Hoglin.createAttributes().build()).put(EntityType.HORSE, AbstractHorse.createBaseHorseAttributes().build()).put(EntityType.HUSK, Zombie.createAttributes().build()).put(EntityType.ILLUSIONER, Illusioner.createAttributes().build()).put(EntityType.IRON_GOLEM, IronGolem.createAttributes().build()).put(EntityType.LLAMA, Llama.createAttributes().build()).put(EntityType.MAGMA_CUBE, MagmaCube.createAttributes().build()).put(EntityType.MOOSHROOM, Cow.createAttributes().build()).put(EntityType.MULE, AbstractChestedHorse.createBaseChestedHorseAttributes().build()).put(EntityType.OCELOT, Ocelot.createAttributes().build()).put(EntityType.PANDA, Panda.createAttributes().build()).put(EntityType.PARROT, Parrot.createAttributes().build()).put(EntityType.PHANTOM, Monster.createMonsterAttributes().build()).put(EntityType.PIG, Pig.createAttributes().build()).put(EntityType.PIGLIN, Piglin.createAttributes().build()).put(EntityType.PIGLIN_BRUTE, PiglinBrute.createAttributes().build()).put(EntityType.PILLAGER, Pillager.createAttributes().build()).put(EntityType.PLAYER, Player.createAttributes().build()).put(EntityType.POLAR_BEAR, PolarBear.createAttributes().build()).put(EntityType.PUFFERFISH, AbstractFish.createAttributes().build()).put(EntityType.RABBIT, Rabbit.createAttributes().build()).put(EntityType.RAVAGER, Ravager.createAttributes().build()).put(EntityType.SALMON, AbstractFish.createAttributes().build()).put(EntityType.SHEEP, Sheep.createAttributes().build()).put(EntityType.SHULKER, Shulker.createAttributes().build()).put(EntityType.SILVERFISH, Silverfish.createAttributes().build()).put(EntityType.SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.SKELETON_HORSE, SkeletonHorse.createAttributes().build()).put(EntityType.SLIME, Monster.createMonsterAttributes().build()).put(EntityType.SNIFFER, Sniffer.createAttributes().build()).put(EntityType.SNOW_GOLEM, SnowGolem.createAttributes().build()).put(EntityType.SPIDER, Spider.createAttributes().build()).put(EntityType.SQUID, Squid.createAttributes().build()).put(EntityType.STRAY, AbstractSkeleton.createAttributes().build()).put(EntityType.STRIDER, Strider.createAttributes().build()).put(EntityType.TADPOLE, Tadpole.createAttributes().build()).put(EntityType.TRADER_LLAMA, Llama.createAttributes().build()).put(EntityType.TROPICAL_FISH, AbstractFish.createAttributes().build()).put(EntityType.TURTLE, Turtle.createAttributes().build()).put(EntityType.VEX, Vex.createAttributes().build()).put(EntityType.VILLAGER, Villager.createAttributes().build()).put(EntityType.VINDICATOR, Vindicator.createAttributes().build()).put(EntityType.WARDEN, Warden.createAttributes().build()).put(EntityType.WANDERING_TRADER, Mob.createMobAttributes().build()).put(EntityType.WITCH, Witch.createAttributes().build()).put(EntityType.WITHER, WitherBoss.createAttributes().build()).put(EntityType.WITHER_SKELETON, AbstractSkeleton.createAttributes().build()).put(EntityType.WOLF, Wolf.createAttributes().build()).put(EntityType.ZOGLIN, Zoglin.createAttributes().build()).put(EntityType.ZOMBIE, Zombie.createAttributes().build()).put(EntityType.ZOMBIE_HORSE, ZombieHorse.createAttributes().build()).put(EntityType.ZOMBIE_VILLAGER, Zombie.createAttributes().build()).put(EntityType.ZOMBIFIED_PIGLIN, ZombifiedPiglin.createAttributes().build()).build();
 
     public static AttributeSupplier getSupplier(EntityType<? extends LivingEntity> entityType) {
         return (AttributeSupplier)SUPPLIERS.get(entityType);
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalPanic.java b/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalPanic.java
index c6d51e91bc6317881e0ed5409df8256ecb91f400..ea3d90a9ae9379aaa93b58e1ae7b1eef21036232 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalPanic.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalPanic.java
@@ -84,7 +84,7 @@ public class AnimalPanic extends Behavior<PathfinderMob> {
         } else {
             Predicate<BlockPos> predicate;
             if (Mth.ceil(entity.getBbWidth()) == 2) {
-                predicate = (blockPosx) -> BlockPos.squareOutSouthEast(blockPosx).allMatch((blockPos) -> blockGetter.getFluidState(blockPos).is(FluidTags.WATER));
+                predicate = (blockPosx) -> BlockPos.squareOutSouthEast(blockPosx).allMatch((blockPosIn) -> blockGetter.getFluidState(blockPosIn).is(FluidTags.WATER));
             } else {
                 predicate = (blockPosx) -> blockGetter.getFluidState(blockPosx).is(FluidTags.WATER);
             }
@@ -92,4 +92,4 @@ public class AnimalPanic extends Behavior<PathfinderMob> {
             return BlockPos.findClosestMatch(blockPos, 5, 1, predicate);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/BecomePassiveIfMemoryPresent.java b/src/main/java/net/minecraft/world/entity/ai/behavior/BecomePassiveIfMemoryPresent.java
index a16095b13049be16b3d6cc8e549fa1a577c3c18c..717ed226de71f9aaed1fb77736bfd81e8a313185 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/BecomePassiveIfMemoryPresent.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/BecomePassiveIfMemoryPresent.java
@@ -7,7 +7,7 @@ import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 
 public class BecomePassiveIfMemoryPresent {
     public static BehaviorControl<LivingEntity> create(MemoryModuleType<?> memoryModuleType, int i) {
-        return BehaviorBuilder.create((instance) -> instance.group(instance.registered(MemoryModuleType.ATTACK_TARGET), instance.absent(MemoryModuleType.PACIFIED), instance.present(memoryModuleType)).apply(instance, instance.point(() -> "[BecomePassive if " + memoryModuleType + " present]", (Function3)(memoryAccessor, memoryAccessor2, memoryAccessor3) -> (serverLevel, livingEntity, l) -> {
+        return BehaviorBuilder.create((instance) -> instance.group(instance.registered(MemoryModuleType.ATTACK_TARGET), instance.absent(MemoryModuleType.PACIFIED), instance.present(memoryModuleType)).apply(instance, instance.point(() -> "[BecomePassive if " + memoryModuleType + " present]", (memoryAccessor, memoryAccessor2, memoryAccessor3) -> (serverLevel, livingEntity, l) -> {
                     memoryAccessor2.setWithExpiry(true, (long)i);
                     memoryAccessor.erase();
                     return true;
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java b/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
index 49925771e3f3a4e0a170804606cc6dcf3d8de99e..f444ad760fe41c6d36c4ceaefc4e967a3d281c76 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
@@ -102,8 +102,8 @@ public class BehaviorUtils {
         if (i2 instanceof ProjectileWeaponItem) {
             ProjectileWeaponItem projectileWeaponItem = (ProjectileWeaponItem)i2;
             if (mob.canFireProjectileWeapon(projectileWeaponItem)) {
-                int i2 = projectileWeaponItem.getDefaultProjectileRange() - i;
-                return mob.closerThan(livingEntity, (double)i2);
+                int i2In = projectileWeaponItem.getDefaultProjectileRange() - i;
+                return mob.closerThan(livingEntity, (double)i2In);
             }
         }
 
@@ -139,15 +139,11 @@ public class BehaviorUtils {
     public static Optional<LivingEntity> getLivingEntityFromUUIDMemory(LivingEntity livingEntity, MemoryModuleType<UUID> memoryModuleType) {
         Optional<UUID> optional = livingEntity.getBrain().getMemory(memoryModuleType);
         return optional.map((uuid) -> ((ServerLevel)livingEntity.level()).getEntity(uuid)).map((entity) -> {
-            LivingEntity var10000;
             if (entity instanceof LivingEntity) {
-                LivingEntity livingEntity = (LivingEntity)entity;
-                var10000 = livingEntity;
+                return (LivingEntity) entity;
             } else {
-                var10000 = null;
+                return null;
             }
-
-            return var10000;
         });
     }
 
@@ -164,4 +160,4 @@ public class BehaviorUtils {
     public static boolean isBreeding(LivingEntity livingEntity) {
         return livingEntity.getBrain().hasMemoryValue(MemoryModuleType.BREED_TARGET);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java b/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java
index c9ecbb36d36f7290706e37947c4efe5a7614c847..7bfcec6e1a71a8fe25392736081cb486ce580377 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/EntityTracker.java
@@ -32,8 +32,8 @@ public class EntityTracker implements PositionTracker {
             if (!livingEntity2.isAlive()) {
                 return false;
             } else {
-                Optional<NearestVisibleLivingEntities> optional = livingEntity.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
-                return optional.isPresent() && ((NearestVisibleLivingEntities)optional.get()).contains(livingEntity2);
+                Optional<NearestVisibleLivingEntities> optionalIn = livingEntity.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
+                return optionalIn.isPresent() && ((NearestVisibleLivingEntities)optionalIn.get()).contains(livingEntity2);
             }
         } else {
             return true;
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java b/src/main/java/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java
index ffb1caee5ba5992e8dbbb12ec2564e33d732eead..9031a36e8a975b81d0e7c6a1018787d340067882 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java
@@ -111,9 +111,9 @@ public class HarvestFarmland extends Behavior<Villager> {
                             Item blockState2 = itemStack.getItem();
                             if (blockState2 instanceof BlockItem) {
                                 BlockItem blockItem = (BlockItem)blockState2;
-                                BlockState blockState2 = blockItem.getBlock().defaultBlockState();
-                                serverLevel.setBlockAndUpdate(this.aboveFarmlandPos, blockState2);
-                                serverLevel.gameEvent(GameEvent.BLOCK_PLACE, this.aboveFarmlandPos, GameEvent.Context.of(villager, blockState2));
+                                BlockState blockStateIn = blockItem.getBlock().defaultBlockState();
+                                serverLevel.setBlockAndUpdate(this.aboveFarmlandPos, blockStateIn);
+                                serverLevel.gameEvent(GameEvent.BLOCK_PLACE, this.aboveFarmlandPos, GameEvent.Context.of(villager, blockStateIn));
                                 flag = true;
                             }
                         }
@@ -147,4 +147,4 @@ public class HarvestFarmland extends Behavior<Villager> {
     protected boolean canStillUse(ServerLevel serverLevel, Villager villager, long l) {
         return this.timeWorkedSoFar < 200;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
index 9f981aaeb158eb6a8da3789e629e29d3ff7adce8..2d0afa382b29eed6998f548217717d6934413f0a 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWith.java
@@ -16,13 +16,13 @@ public class InteractWith {
 
     public static <E extends LivingEntity, T extends LivingEntity> BehaviorControl<E> of(EntityType<? extends T> entityType, int i, Predicate<E> predicate, Predicate<T> predicate2, MemoryModuleType<T> memoryModuleType, float f, int i2) {
         int i3 = i * i;
-        Predicate<LivingEntity> predicate3 = (livingEntity) -> entityType.equals(livingEntity.getType()) && predicate2.test(livingEntity);
+        Predicate<LivingEntity> predicate3 = (livingEntity) -> entityType.equals(livingEntity.getType()) && predicate2.test((T) livingEntity);
         return BehaviorBuilder.create((instance) -> instance.group(instance.registered(memoryModuleType), instance.registered(MemoryModuleType.LOOK_TARGET), instance.absent(MemoryModuleType.WALK_TARGET), instance.present(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES)).apply(instance, (memoryAccessor, memoryAccessor2, memoryAccessor3, memoryAccessor4) -> (serverLevel, livingEntity, l) -> {
                     NearestVisibleLivingEntities nearestVisibleLivingEntities = instance.get(memoryAccessor4);
                     if (predicate.test(livingEntity) && nearestVisibleLivingEntities.contains(predicate3)) {
                         Optional<LivingEntity> optional = nearestVisibleLivingEntities.findClosest((livingEntity2) -> livingEntity2.distanceToSqr(livingEntity) <= (double)i3 && predicate3.test(livingEntity2));
                         optional.ifPresent((livingEntityx) -> {
-                            memoryAccessor.set(livingEntityx);
+                            memoryAccessor.set((T) livingEntityx);
                             memoryAccessor2.set(new EntityTracker(livingEntityx, true));
                             memoryAccessor3.set(new WalkTarget(new EntityTracker(livingEntityx, false), f, i2));
                         });
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java b/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
index 5ae8bcd14537011edab9aa979ae1a22daa93a090..d7a919cb99cfefe856e3916749243845ef2784d6 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
@@ -40,13 +40,13 @@ public class SetClosestHomeAsWalkTarget {
                             MutableInt mutableInt = new MutableInt(0);
                             mutableLong.setValue(serverLevel.getGameTime() + (long)serverLevel.getRandom().nextInt(20));
                             Predicate<BlockPos> predicate = (blockPosx) -> {
-                                long l = blockPosx.asLong();
-                                if (long2LongMap.containsKey(l)) {
+                                long pos = blockPosx.asLong();
+                                if (long2LongMap.containsKey(pos)) {
                                     return false;
                                 } else if (mutableInt.incrementAndGet() >= 5) {
                                     return false;
                                 } else {
-                                    long2LongMap.put(l, mutableLong.getValue() + 40L);
+                                    long2LongMap.put(pos, mutableLong.getValue() + 40L);
                                     return true;
                                 }
                             };
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/StopBeingAngryIfTargetDead.java b/src/main/java/net/minecraft/world/entity/ai/behavior/StopBeingAngryIfTargetDead.java
index b97c09139152aee8c8a7335bb36e2f5aeffe5408..ea2d6a585fdb3f6c74fa0650c00da9b67b70f826 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/StopBeingAngryIfTargetDead.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/StopBeingAngryIfTargetDead.java
@@ -11,15 +11,11 @@ public class StopBeingAngryIfTargetDead {
     public static BehaviorControl<LivingEntity> create() {
         return BehaviorBuilder.create((instance) -> instance.group(instance.present(MemoryModuleType.ANGRY_AT)).apply(instance, (memoryAccessor) -> (serverLevel, livingEntity, l) -> {
                     Optional.ofNullable(serverLevel.getEntity(instance.get(memoryAccessor))).map((entity) -> {
-                        LivingEntity var10000;
                         if (entity instanceof LivingEntity) {
-                            LivingEntity livingEntity = (LivingEntity)entity;
-                            var10000 = livingEntity;
+                            return (LivingEntity)entity;
                         } else {
-                            var10000 = null;
+                            return null;
                         }
-
-                        return var10000;
                     }).filter(LivingEntity::isDeadOrDying).filter((livingEntityx) -> livingEntityx.getType() != EntityType.PLAYER || serverLevel.getGameRules().getBoolean(GameRules.RULE_FORGIVE_DEAD_PLAYERS)).ifPresent((livingEntityx) -> memoryAccessor.erase());
                     return true;
                 }));
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/TriggerGate.java b/src/main/java/net/minecraft/world/entity/ai/behavior/TriggerGate.java
index c4385c0e3d7d807870641889972f79fc9d3bf304..9edad12fcb56befed1a9f4666075f4215c6e9bb7 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/TriggerGate.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/TriggerGate.java
@@ -13,14 +13,14 @@ public class TriggerGate {
 
     public static <E extends LivingEntity> OneShot<E> triggerGate(List<Pair<? extends Trigger<? super E>, Integer>> list, GateBehavior.OrderPolicy orderPolicy, GateBehavior.RunningPolicy runningPolicy) {
         ShufflingList<Trigger<? super E>> shufflingList = new ShufflingList<>();
-        list.forEach((pair) -> shufflingList.add((Trigger)pair.getFirst(), pair.getSecond()));
-        return BehaviorBuilder.create((instance) -> instance.point((Trigger<LivingEntity>)(serverLevel, livingEntity, l) -> {
+        list.forEach((pair) -> shufflingList.add(pair.getFirst(), pair.getSecond()));
+        return BehaviorBuilder.create((instance) -> instance.point((serverLevel, livingEntity, l) -> {
                 if (orderPolicy == GateBehavior.OrderPolicy.SHUFFLED) {
                     shufflingList.shuffle();
                 }
 
                 for(Trigger<? super E> trigger : shufflingList) {
-                    if (trigger.trigger(serverLevel, (E)livingEntity, l) && runningPolicy == GateBehavior.RunningPolicy.RUN_ONE) {
+                    if (trigger.trigger(serverLevel, livingEntity, l) && runningPolicy == GateBehavior.RunningPolicy.RUN_ONE) {
                         break;
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/VillageBoundRandomStroll.java b/src/main/java/net/minecraft/world/entity/ai/behavior/VillageBoundRandomStroll.java
index 354bfef3d0bacd02087c3e66688316af5c38188a..adc94a654a530aa5151b29e7aeadbd5b56969fc4 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/VillageBoundRandomStroll.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/VillageBoundRandomStroll.java
@@ -35,7 +35,7 @@ public class VillageBoundRandomStroll {
                         }
                     }
 
-                    memoryAccessor.setOrErase(Optional.ofNullable(vec3).map((vec3) -> new WalkTarget(vec3, f, 0)));
+                    memoryAccessor.setOrErase(Optional.ofNullable(vec3).map((vec3In) -> new WalkTarget(vec3In, f, 0)));
                     return true;
                 }));
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder.java b/src/main/java/net/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder.java
index fcedd1c8ffb7380284f7cccd7f4163ee95b92434..ac36f5d40304f75d5e39bdd62cb89a7e1de60815 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder.java
@@ -59,11 +59,11 @@ public class BehaviorBuilder<E extends LivingEntity, M> implements App<BehaviorB
     }
 
     public static <E extends LivingEntity> OneShot<E> triggerIf(Predicate<E> predicate) {
-        return create((instance) -> instance.point((Trigger<LivingEntity>)(serverLevel, livingEntity, l) -> predicate.test(livingEntity)));
+        return create((instance) -> instance.point((serverLevel, livingEntity, l) -> predicate.test(livingEntity)));
     }
 
     public static <E extends LivingEntity> OneShot<E> triggerIf(BiPredicate<ServerLevel, E> biPredicate) {
-        return create((instance) -> instance.point((Trigger<LivingEntity>)(serverLevel, livingEntity, l) -> biPredicate.test(serverLevel, livingEntity)));
+        return create((instance) -> instance.point((serverLevel, livingEntity, l) -> biPredicate.test(serverLevel, livingEntity)));
     }
 
     static <E extends LivingEntity, M> BehaviorBuilder.TriggerWithResult<E, M> get(App<BehaviorBuilder.Mu<E>, M> app) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/declarative/MemoryCondition.java b/src/main/java/net/minecraft/world/entity/ai/behavior/declarative/MemoryCondition.java
index fe2721629f3a910b2d96f304474afe1b30746484..60d12511a25a18b0092fa8e597cedefe1cd8378d 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/declarative/MemoryCondition.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/declarative/MemoryCondition.java
@@ -20,9 +20,7 @@ public interface MemoryCondition<F extends K1, Value> {
     @Nullable
     MemoryAccessor<F, Value> createAccessor(Brain<?> var1, Optional<Value> var2);
 
-    public static record Absent<Value>(MemoryModuleType<Value> a) implements MemoryCondition<Mu<Unit>, Value> {
-        private final MemoryModuleType<Value> memory;
-
+    public static record Absent<Value>(MemoryModuleType<Value> memory) implements MemoryCondition<Mu<Unit>, Value> {
         public MemoryStatus condition() {
             return MemoryStatus.VALUE_ABSENT;
         }
@@ -30,15 +28,9 @@ public interface MemoryCondition<F extends K1, Value> {
         public MemoryAccessor<Mu<Unit>, Value> createAccessor(Brain<?> brain, Optional<Value> optional) {
             return optional.isPresent() ? null : new MemoryAccessor<>(brain, this.memory, Const.create(Unit.INSTANCE));
         }
-
-        public MemoryModuleType<Value> memory() {
-            return this.memory;
-        }
     }
 
-    public static record Present<Value>(MemoryModuleType<Value> a) implements MemoryCondition<com.mojang.datafixers.kinds.IdF.Mu, Value> {
-        private final MemoryModuleType<Value> memory;
-
+    public static record Present<Value>(MemoryModuleType<Value> memory) implements MemoryCondition<com.mojang.datafixers.kinds.IdF.Mu, Value> {
         public MemoryStatus condition() {
             return MemoryStatus.VALUE_PRESENT;
         }
@@ -46,15 +38,9 @@ public interface MemoryCondition<F extends K1, Value> {
         public MemoryAccessor<com.mojang.datafixers.kinds.IdF.Mu, Value> createAccessor(Brain<?> brain, Optional<Value> optional) {
             return optional.isEmpty() ? null : new MemoryAccessor<>(brain, this.memory, IdF.create(optional.get()));
         }
-
-        public MemoryModuleType<Value> memory() {
-            return this.memory;
-        }
     }
 
-    public static record Registered<Value>(MemoryModuleType<Value> a) implements MemoryCondition<com.mojang.datafixers.kinds.OptionalBox.Mu, Value> {
-        private final MemoryModuleType<Value> memory;
-
+    public static record Registered<Value>(MemoryModuleType<Value> memory) implements MemoryCondition<com.mojang.datafixers.kinds.OptionalBox.Mu, Value> {
         public MemoryStatus condition() {
             return MemoryStatus.REGISTERED;
         }
@@ -62,9 +48,5 @@ public interface MemoryCondition<F extends K1, Value> {
         public MemoryAccessor<com.mojang.datafixers.kinds.OptionalBox.Mu, Value> createAccessor(Brain<?> brain, Optional<Value> optional) {
             return new MemoryAccessor<>(brain, this.memory, OptionalBox.create(optional));
         }
-
-        public MemoryModuleType<Value> memory() {
-            return this.memory;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
index ca75dc8b3824858b5871da4e835559791c995871..c32de882a7e108f50bbe10828e6bafce757afe8e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
+++ b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
@@ -93,9 +93,9 @@ public class GossipContainer {
     public void transferFrom(GossipContainer gossipContainer, RandomSource randomSource, int i) {
         Collection<GossipContainer.GossipEntry> collection = gossipContainer.selectGossipsForTransfer(randomSource, i);
         collection.forEach((gossipEntry) -> {
-            int i = gossipEntry.value - gossipEntry.type.decayPerTransfer;
-            if (i >= 2) {
-                this.getOrCreate(gossipEntry.target).entries.mergeInt(gossipEntry.type, i, GossipContainer::mergeValuesForTransfer);
+            int iIn = gossipEntry.value - gossipEntry.type.decayPerTransfer;
+            if (iIn >= 2) {
+                this.getOrCreate(gossipEntry.target).entries.mergeInt(gossipEntry.type, iIn, GossipContainer::mergeValuesForTransfer);
             }
 
         });
@@ -212,27 +212,12 @@ public class GossipContainer {
         }
     }
 
-    static record GossipEntry(UUID c, GossipType d, int e) {
-        final UUID target;
-        final GossipType type;
-        final int value;
+    static record GossipEntry(UUID target, GossipType type, int value) {
         public static final Codec<GossipContainer.GossipEntry> CODEC = RecordCodecBuilder.create((instance) -> instance.group(UUIDUtil.CODEC.fieldOf("Target").forGetter(GossipContainer.GossipEntry::target), GossipType.CODEC.fieldOf("Type").forGetter(GossipContainer.GossipEntry::type), ExtraCodecs.POSITIVE_INT.fieldOf("Value").forGetter(GossipContainer.GossipEntry::value)).apply(instance, GossipContainer.GossipEntry::new));
         public static final Codec<List<GossipContainer.GossipEntry>> LIST_CODEC = CODEC.listOf();
 
         public int weightedValue() {
             return this.value * this.type.weight;
         }
-
-        public UUID target() {
-            return this.target;
-        }
-
-        public GossipType type() {
-            return this.type;
-        }
-
-        public int value() {
-            return this.value;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
index 3d9d3ff8dae4e73450df432844c3a2d8ed2748f2..e2c5665188966a2975004fd5a23d73c4bf3100de 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/VillagerHostilesSensor.java
@@ -6,7 +6,7 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 
 public class VillagerHostilesSensor extends NearestVisibleLivingEntitySensor {
-    private static final ImmutableMap<EntityType<?>, Float> ACCEPTABLE_DISTANCE_FROM_HOSTILES = ImmutableMap.builder().put(EntityType.DROWNED, 8.0F).put(EntityType.EVOKER, 12.0F).put(EntityType.HUSK, 8.0F).put(EntityType.ILLUSIONER, 12.0F).put(EntityType.PILLAGER, 15.0F).put(EntityType.RAVAGER, 12.0F).put(EntityType.VEX, 8.0F).put(EntityType.VINDICATOR, 10.0F).put(EntityType.ZOGLIN, 10.0F).put(EntityType.ZOMBIE, 8.0F).put(EntityType.ZOMBIE_VILLAGER, 8.0F).build();
+    private static final ImmutableMap<EntityType<?>, Float> ACCEPTABLE_DISTANCE_FROM_HOSTILES = ImmutableMap.<EntityType<?>, Float>builder().put(EntityType.DROWNED, 8.0F).put(EntityType.EVOKER, 12.0F).put(EntityType.HUSK, 8.0F).put(EntityType.ILLUSIONER, 12.0F).put(EntityType.PILLAGER, 15.0F).put(EntityType.RAVAGER, 12.0F).put(EntityType.VEX, 8.0F).put(EntityType.VINDICATOR, 10.0F).put(EntityType.ZOGLIN, 10.0F).put(EntityType.ZOMBIE, 8.0F).put(EntityType.ZOMBIE_VILLAGER, 8.0F).build();
 
     protected boolean isMatchingEntity(LivingEntity livingEntity, LivingEntity livingEntity2) {
         return this.isHostile(livingEntity2) && this.isClose(livingEntity, livingEntity2);
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
index cc6f6dd5276fb143303f05647ad06036bdc892be..9fef3ea183afb7738c90c6e1d1d8f6b1ed3ada59 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -31,7 +31,7 @@ public class PoiSection {
     private boolean isValid;
 
     public static Codec<PoiSection> codec(Runnable runnable) {
-        return RecordCodecBuilder.create((instance) -> instance.group(RecordCodecBuilder.point(runnable), Codec.BOOL.optionalFieldOf("Valid", false).forGetter((poiSection) -> poiSection.isValid), PoiRecord.codec(runnable).listOf().fieldOf("Records").forGetter((poiSection) -> ImmutableList.copyOf(poiSection.records.values()))).apply(instance, PoiSection::new)).orElseGet(Util.prefix("Failed to read POI section: ", LOGGER::error), () -> new PoiSection(runnable, false, ImmutableList.of()));
+        return RecordCodecBuilder.<PoiSection>create((instance) -> instance.group(RecordCodecBuilder.point(runnable), Codec.BOOL.optionalFieldOf("Valid", false).forGetter((poiSection) -> poiSection.isValid), PoiRecord.codec(runnable).listOf().fieldOf("Records").forGetter((poiSection) -> ImmutableList.copyOf(poiSection.records.values()))).apply(instance, PoiSection::new)).orElseGet(Util.prefix("Failed to read POI section: ", LOGGER::error), () -> new PoiSection(runnable, false, ImmutableList.of()));
     }
 
     public PoiSection(Runnable runnable) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiType.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiType.java
index c9093f7dff8551c7f8069e18d1bfbcfa9207fa37..321ebbefe99b5a631ef3cb6044dc3b22c80242fd 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiType.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiType.java
@@ -5,29 +5,14 @@ import java.util.function.Predicate;
 import net.minecraft.core.Holder;
 import net.minecraft.world.level.block.state.BlockState;
 
-public record PoiType(Set<BlockState> b, int c, int d) {
-    private final Set<BlockState> matchingStates;
-    private final int maxTickets;
-    private final int validRange;
+public record PoiType(Set<BlockState> matchingStates, int maxTickets, int validRange) {
     public static final Predicate<Holder<PoiType>> NONE = (holder) -> false;
 
     public PoiType {
-        set = Set.copyOf(set);
+        matchingStates = Set.copyOf(matchingStates);
     }
 
     public boolean is(BlockState blockState) {
         return this.matchingStates.contains(blockState);
     }
-
-    public Set<BlockState> matchingStates() {
-        return this.matchingStates;
-    }
-
-    public int maxTickets() {
-        return this.maxTickets;
-    }
-
-    public int validRange() {
-        return this.validRange;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
index 728b79551e11cb7b9ee330eba04c8cc46b37ab40..9d133f9e0c0190b7300cac63808b71cce3399dad 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
@@ -85,7 +85,7 @@ public abstract class AbstractFish extends WaterAnimal implements Bucketable {
     protected void registerGoals() {
         super.registerGoals();
         this.goalSelector.addGoal(0, new PanicGoal(this, 1.25D));
-        this.goalSelector.addGoal(2, new AvoidEntityGoal(this, Player.class, 8.0F, 1.6D, 1.4D, EntitySelector.NO_SPECTATORS::test));
+        this.goalSelector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0F, 1.6D, 1.4D, EntitySelector.NO_SPECTATORS::test));
         this.goalSelector.addGoal(4, new AbstractFish.FishSwimGoal(this));
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/CatVariant.java b/src/main/java/net/minecraft/world/entity/animal/CatVariant.java
index 6d73f7e657ed70e5d6b330c1890ff9a9245d3ff3..008b5349b4d0900ee0f13fe740be5bbf5ae4d696 100644
--- a/src/main/java/net/minecraft/world/entity/animal/CatVariant.java
+++ b/src/main/java/net/minecraft/world/entity/animal/CatVariant.java
@@ -5,8 +5,7 @@ import net.minecraft.core.registries.Registries;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 
-public record CatVariant(ResourceLocation l) {
-    private final ResourceLocation texture;
+public record CatVariant(ResourceLocation texture) {
     public static final ResourceKey<CatVariant> TABBY = createKey("tabby");
     public static final ResourceKey<CatVariant> BLACK = createKey("black");
     public static final ResourceKey<CatVariant> RED = createKey("red");
@@ -40,8 +39,4 @@ public record CatVariant(ResourceLocation l) {
     private static CatVariant register(Registry<CatVariant> registry, ResourceKey<CatVariant> resourceKey, String s) {
         return Registry.register(registry, resourceKey, new CatVariant(new ResourceLocation(s)));
     }
-
-    public ResourceLocation texture() {
-        return this.texture;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index 00ffd57b1fe79c22f23123f206864fc70a4e8961..54544fcf72edee7b6ec1023d07edd4b635b68cd7 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -152,9 +152,9 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         this.goalSelector.addGoal(1, new Fox.FaceplantGoal());
         this.goalSelector.addGoal(2, new Fox.FoxPanicGoal(2.2D));
         this.goalSelector.addGoal(3, new Fox.FoxBreedGoal(1.0D));
-        this.goalSelector.addGoal(4, new AvoidEntityGoal(this, Player.class, 16.0F, 1.6D, 1.4D, (livingEntity) -> AVOID_PLAYERS.test(livingEntity) && !this.trusts(livingEntity.getUUID()) && !this.isDefending()));
-        this.goalSelector.addGoal(4, new AvoidEntityGoal(this, Wolf.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !((Wolf)livingEntity).isTame() && !this.isDefending()));
-        this.goalSelector.addGoal(4, new AvoidEntityGoal(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !this.isDefending()));
+        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Player.class, 16.0F, 1.6D, 1.4D, (livingEntity) -> AVOID_PLAYERS.test(livingEntity) && !this.trusts(livingEntity.getUUID()) && !this.isDefending()));
+        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Wolf.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !((Wolf)livingEntity).isTame() && !this.isDefending()));
+        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (livingEntity) -> !this.isDefending()));
         this.goalSelector.addGoal(5, new Fox.StalkPreyGoal());
         this.goalSelector.addGoal(6, new Fox.FoxPounceGoal());
         this.goalSelector.addGoal(6, new Fox.SeekShelterGoal(1.25D));
diff --git a/src/main/java/net/minecraft/world/entity/animal/FrogVariant.java b/src/main/java/net/minecraft/world/entity/animal/FrogVariant.java
index c42ae6a217d795b02006004d05081a3cb798a6f5..4840d63e2853435fc5c74730c77f55fe34eb8833 100644
--- a/src/main/java/net/minecraft/world/entity/animal/FrogVariant.java
+++ b/src/main/java/net/minecraft/world/entity/animal/FrogVariant.java
@@ -4,8 +4,7 @@ import net.minecraft.core.Registry;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.resources.ResourceLocation;
 
-public record FrogVariant(ResourceLocation d) {
-    private final ResourceLocation texture;
+public record FrogVariant(ResourceLocation texture) {
     public static final FrogVariant TEMPERATE = register("temperate", "textures/entity/frog/temperate_frog.png");
     public static final FrogVariant WARM = register("warm", "textures/entity/frog/warm_frog.png");
     public static final FrogVariant COLD = register("cold", "textures/entity/frog/cold_frog.png");
@@ -13,8 +12,4 @@ public record FrogVariant(ResourceLocation d) {
     private static FrogVariant register(String s, String s2) {
         return Registry.register(BuiltInRegistries.FROG_VARIANT, s, new FrogVariant(new ResourceLocation(s2)));
     }
-
-    public ResourceLocation texture() {
-        return this.texture;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/animal/Sheep.java b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
index f519ab17deae5a4cc906bd68f78738b269ed96e9..bf19929c63c91aa3db6aca5e69406f5ae3a796bb 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Sheep.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
@@ -85,7 +85,7 @@ public class Sheep extends Animal implements Shearable {
         enumMap.put(DyeColor.RED, Blocks.RED_WOOL);
         enumMap.put(DyeColor.BLACK, Blocks.BLACK_WOOL);
     });
-    private static final Map<DyeColor, float[]> COLORARRAY_BY_COLOR = Maps.newEnumMap(Arrays.stream(DyeColor.values()).collect(Collectors.toMap((dyeColor) -> dyeColor, Sheep::createSheepColor)));
+    private static final Map<DyeColor, float[]> COLORARRAY_BY_COLOR = Maps.<DyeColor, float[]>newEnumMap(Arrays.stream(DyeColor.values()).collect(Collectors.toMap((dyeColor) -> dyeColor, Sheep::createSheepColor)));
     private int eatAnimationTick;
     private EatBlockGoal eatBlockGoal;
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/TropicalFish.java b/src/main/java/net/minecraft/world/entity/animal/TropicalFish.java
index 38573c501d6f80123a7c8c824b50a3ebeda52fc6..3dbdf076ae59f5a5857b7d33e393ae646ccce213 100644
--- a/src/main/java/net/minecraft/world/entity/animal/TropicalFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/TropicalFish.java
@@ -237,25 +237,9 @@ public class TropicalFish extends AbstractSchoolingFish implements VariantHolder
         }
     }
 
-    public static record Variant(TropicalFish.Pattern a, DyeColor b, DyeColor c) {
-        private final TropicalFish.Pattern pattern;
-        private final DyeColor baseColor;
-        private final DyeColor patternColor;
-
+    public static record Variant(TropicalFish.Pattern pattern, DyeColor baseColor, DyeColor patternColor) {
         public int getPackedId() {
             return TropicalFish.packVariant(this.pattern, this.baseColor, this.patternColor);
         }
-
-        public TropicalFish.Pattern pattern() {
-            return this.pattern;
-        }
-
-        public DyeColor baseColor() {
-            return this.baseColor;
-        }
-
-        public DyeColor patternColor() {
-            return this.patternColor;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
index 5e9b2e1a11b9b05e58aaea1e28956ff7350a5040..707ae9a878757f6aceaec4844b0e3434c281fb6f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
@@ -115,7 +115,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
     }
 
     public Brain<Allay> getBrain() {
-        return super.getBrain();
+        return (Brain<Allay>) super.getBrain();
     }
 
     public static AttributeSupplier.Builder createAttributes() {
@@ -161,9 +161,8 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
     }
 
     public boolean hurt(DamageSource damageSource, float f) {
-        Entity optional = damageSource.getEntity();
-        if (optional instanceof Player) {
-            Player player = (Player)optional;
+        Entity entity = damageSource.getEntity();
+        if (entity instanceof Player player) {
             Optional<UUID> optional = this.getBrain().getMemory(MemoryModuleType.LIKED_PLAYER);
             if (optional.isPresent() && player.getUUID().equals(optional.get())) {
                 return false;
@@ -431,7 +430,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         super.readAdditionalSaveData(compoundTag);
         this.readInventoryFromTag(compoundTag);
         if (compoundTag.contains("listener", 10)) {
-            VibrationSystem.Data.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((data) -> this.vibrationData = data);
+            VibrationSystem.Data.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((data) -> this.vibrationData = data);
         }
 
         this.duplicationCooldown = (long)compoundTag.getInt("DuplicationCooldown");
@@ -586,4 +585,4 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
             return GameEventTags.ALLAY_CAN_LISTEN;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/entity/animal/allay/AllayAi.java b/src/main/java/net/minecraft/world/entity/animal/allay/AllayAi.java
index a3054895fcb6f9e6e06ecf228e1d8f80233be896..dcdc14e4e1c1ab9d37f9a9e8936c0c860206cacf 100644
--- a/src/main/java/net/minecraft/world/entity/animal/allay/AllayAi.java
+++ b/src/main/java/net/minecraft/world/entity/animal/allay/AllayAi.java
@@ -63,7 +63,7 @@ public class AllayAi {
     }
 
     private static void initIdleActivity(Brain<Allay> brain) {
-        brain.addActivityWithConditions(Activity.IDLE, ImmutableList.of(Pair.of(0, GoToWantedItem.create((allay) -> true, 1.75F, true, 32)), Pair.of(1, new GoAndGiveItemsToTarget(AllayAi::getItemDepositPosition, 2.25F, 20)), Pair.of(2, StayCloseToTarget.create(AllayAi::getItemDepositPosition, Predicate.not(AllayAi::hasWantedItem), 4, 16, 2.25F)), Pair.of(3, SetEntityLookTargetSometimes.create(6.0F, UniformInt.of(30, 60))), Pair.of(4, new RunOne<>(ImmutableList.of(Pair.of(RandomStroll.fly(1.0F), 2), Pair.of(SetWalkTargetFromLookTarget.create(1.0F, 3), 2), Pair.of(new DoNothing(30, 60), 1))))), ImmutableSet.of());
+        brain.addActivityWithConditions(Activity.IDLE, ImmutableList.of(Pair.of(0, GoToWantedItem.create((allay) -> true, 1.75F, true, 32)), Pair.of(1, new GoAndGiveItemsToTarget<>(AllayAi::getItemDepositPosition, 2.25F, 20)), Pair.of(2, StayCloseToTarget.create(AllayAi::getItemDepositPosition, Predicate.not(AllayAi::hasWantedItem), 4, 16, 2.25F)), Pair.of(3, SetEntityLookTargetSometimes.create(6.0F, UniformInt.of(30, 60))), Pair.of(4, new RunOne<>(ImmutableList.of(Pair.of(RandomStroll.fly(1.0F), 2), Pair.of(SetWalkTargetFromLookTarget.create(1.0F, 3), 2), Pair.of(new DoNothing(30, 60), 1))))), ImmutableSet.of());
     }
 
     public static void updateActivity(Allay allay) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index f46da8db3a4be967b0a62668ab88cae757771fcf..3a454f4fe9dc3315ee8a4a9475a12e2278897bed 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -69,7 +69,7 @@ import org.joml.Vector3f;
 public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolotl.Variant>, Bucketable {
     public static final int TOTAL_PLAYDEAD_TIME = 200;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Axolotl>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.AXOLOTL_ATTACKABLES, SensorType.AXOLOTL_TEMPTATIONS);
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN, MemoryModuleType.IS_PANICKING});
+    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN, MemoryModuleType.IS_PANICKING});
     private static final EntityDataAccessor<Integer> DATA_VARIANT = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_PLAYING_DEAD = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> FROM_BUCKET = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
@@ -405,7 +405,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
     }
 
     public Brain<Axolotl> getBrain() {
-        return super.getBrain();
+        return (Brain<Axolotl>) super.getBrain();
     }
 
     protected void sendDebugPackets() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java b/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java
index 0e5f3bbae1c5cbf3f5ac0c068e5ee86644b1ff05..b4bd1a84c2c6ba2d9d30d1987a790df2889f0ca0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java
+++ b/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java
@@ -138,7 +138,7 @@ public class Camel extends AbstractHorse implements PlayerRideableJumping, Saddl
 
     protected void customServerAiStep() {
         this.level().getProfiler().push("camelBrain");
-        Brain<?> brain = this.getBrain();
+        Brain<Camel> brain = (Brain<Camel>) this.getBrain();
         brain.tick((ServerLevel)this.level(), this);
         this.level().getProfiler().pop();
         this.level().getProfiler().push("camelActivityUpdate");
@@ -616,4 +616,4 @@ public class Camel extends AbstractHorse implements PlayerRideableJumping, Saddl
             super.tick();
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
index 805fb8df5f1ba3fc55ed1bba72fcb1e7574bc57b..61afb292285ba08b17f73fe4d1860800d49569f4 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
@@ -98,7 +98,7 @@ public class Frog extends Animal implements VariantHolder<FrogVariant> {
     }
 
     public Brain<Frog> getBrain() {
-        return super.getBrain();
+        return (Brain<Frog>) super.getBrain();
     }
 
     protected void defineSynchedData() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/FrogAi.java b/src/main/java/net/minecraft/world/entity/animal/frog/FrogAi.java
index 5fcf3bff2fb337bc72803f24bca931850822fffa..fc44b65fd6fd9921f591f4f988f32e18c512a311 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/FrogAi.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/FrogAi.java
@@ -83,7 +83,7 @@ public class FrogAi {
     }
 
     private static void initSwimActivity(Brain<Frog> brain) {
-        brain.addActivityWithConditions(Activity.SWIM, ImmutableList.of(Pair.of(0, SetEntityLookTargetSometimes.create(EntityType.PLAYER, 6.0F, UniformInt.of(30, 60))), Pair.of(1, new FollowTemptation((livingEntity) -> 1.25F)), Pair.of(2, StartAttacking.create(FrogAi::canAttack, (frog) -> frog.getBrain().getMemory(MemoryModuleType.NEAREST_ATTACKABLE))), Pair.of(3, TryFindLand.create(8, 1.5F)), Pair.of(5, new GateBehavior(ImmutableMap.of(MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT), ImmutableSet.of(), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.TRY_ALL, ImmutableList.of(Pair.of(RandomStroll.swim(0.75F), 1), Pair.of(RandomStroll.stroll(1.0F, true), 1), Pair.of(SetWalkTargetFromLookTarget.create(1.0F, 3), 1), Pair.of(BehaviorBuilder.triggerIf(Entity::isInWaterOrBubble), 5))))), ImmutableSet.of(Pair.of(MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.IS_IN_WATER, MemoryStatus.VALUE_PRESENT)));
+        brain.addActivityWithConditions(Activity.SWIM, ImmutableList.of(Pair.of(0, SetEntityLookTargetSometimes.create(EntityType.PLAYER, 6.0F, UniformInt.of(30, 60))), Pair.of(1, new FollowTemptation((livingEntity) -> 1.25F)), Pair.of(2, StartAttacking.create(FrogAi::canAttack, (frog) -> frog.getBrain().getMemory(MemoryModuleType.NEAREST_ATTACKABLE))), Pair.of(3, TryFindLand.create(8, 1.5F)), Pair.of(5, new GateBehavior<>(ImmutableMap.of(MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT), ImmutableSet.of(), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.TRY_ALL, ImmutableList.of(Pair.of(RandomStroll.swim(0.75F), 1), Pair.of(RandomStroll.stroll(1.0F, true), 1), Pair.of(SetWalkTargetFromLookTarget.create(1.0F, 3), 1), Pair.of(BehaviorBuilder.triggerIf(Entity::isInWaterOrBubble), 5))))), ImmutableSet.of(Pair.of(MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.IS_IN_WATER, MemoryStatus.VALUE_PRESENT)));
     }
 
     private static void initLaySpawnActivity(Brain<Frog> brain) {
@@ -91,7 +91,7 @@ public class FrogAi {
     }
 
     private static void initJumpActivity(Brain<Frog> brain) {
-        brain.addActivityWithConditions(Activity.LONG_JUMP, ImmutableList.of(Pair.of(0, new LongJumpMidJump(TIME_BETWEEN_LONG_JUMPS, SoundEvents.FROG_STEP)), Pair.of(1, new LongJumpToPreferredBlock(TIME_BETWEEN_LONG_JUMPS, 2, 4, 1.5F, (frog) -> SoundEvents.FROG_LONG_JUMP, BlockTags.FROG_PREFER_JUMP_TO, 0.5F, FrogAi::isAcceptableLandingSpot))), ImmutableSet.of(Pair.of(MemoryModuleType.TEMPTING_PLAYER, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.IS_IN_WATER, MemoryStatus.VALUE_ABSENT)));
+        brain.addActivityWithConditions(Activity.LONG_JUMP, ImmutableList.of(Pair.of(0, new LongJumpMidJump(TIME_BETWEEN_LONG_JUMPS, SoundEvents.FROG_STEP)), Pair.of(1, new LongJumpToPreferredBlock<>(TIME_BETWEEN_LONG_JUMPS, 2, 4, 1.5F, (frog) -> SoundEvents.FROG_LONG_JUMP, BlockTags.FROG_PREFER_JUMP_TO, 0.5F, FrogAi::isAcceptableLandingSpot))), ImmutableSet.of(Pair.of(MemoryModuleType.TEMPTING_PLAYER, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.IS_IN_WATER, MemoryStatus.VALUE_ABSENT)));
     }
 
     private static void initTongueActivity(Brain<Frog> brain) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
index 6965f1b93de2dac865f06bb6508248a63b7cbe50..546187bf1ea7cc12ff5baf09bc09394d34535ecc 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
@@ -63,7 +63,7 @@ public class Tadpole extends AbstractFish {
     }
 
     public Brain<Tadpole> getBrain() {
-        return super.getBrain();
+        return (Brain<Tadpole>) super.getBrain();
     }
 
     protected SoundEvent getFlopSound() {
@@ -195,9 +195,9 @@ public class Tadpole extends AbstractFish {
     }
 
     private void ageUp() {
-        Level frog = this.level();
-        if (frog instanceof ServerLevel) {
-            ServerLevel serverLevel = (ServerLevel)frog;
+        Level level = this.level();
+        if (level instanceof ServerLevel) {
+            ServerLevel serverLevel = (ServerLevel)level;
             Frog frog = EntityType.FROG.create(this.level());
             if (frog != null) {
                 frog.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
@@ -224,4 +224,4 @@ public class Tadpole extends AbstractFish {
     public boolean shouldDropExperience() {
         return false;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index bc52b1228a47291359ed1a45a01766ed555f17bb..4d1d1205ae3741233986ef89a1526d85c71a4c23 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -164,7 +164,7 @@ public class Goat extends Animal {
     }
 
     public Brain<Goat> getBrain() {
-        return super.getBrain();
+        return (Brain<Goat>) super.getBrain();
     }
 
     protected void customServerAiStep() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/GoatAi.java b/src/main/java/net/minecraft/world/entity/animal/goat/GoatAi.java
index e359d19776bc30853635215ea8dbe3328c3554a4..19e0a1c75d40485e25aa99bc7e513928ca5f78df 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/GoatAi.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/GoatAi.java
@@ -83,7 +83,7 @@ public class GoatAi {
     }
 
     private static void initRamActivity(Brain<Goat> brain) {
-        brain.addActivityWithConditions(Activity.RAM, ImmutableList.of(Pair.of(0, new RamTarget<>((goat) -> goat.isScreamingGoat() ? TIME_BETWEEN_RAMS_SCREAMER : TIME_BETWEEN_RAMS, RAM_TARGET_CONDITIONS, 3.0F, (goat) -> goat.isBaby() ? 1.0D : 2.5D, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_RAM_IMPACT : SoundEvents.GOAT_RAM_IMPACT, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_HORN_BREAK : SoundEvents.GOAT_HORN_BREAK)), Pair.of(1, new PrepareRamNearestTarget<>((goat) -> goat.isScreamingGoat() ? TIME_BETWEEN_RAMS_SCREAMER.getMinValue() : TIME_BETWEEN_RAMS.getMinValue(), 4, 7, 1.25F, RAM_TARGET_CONDITIONS, 20, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_PREPARE_RAM : SoundEvents.GOAT_PREPARE_RAM))), ImmutableSet.of(Pair.of(MemoryModuleType.TEMPTING_PLAYER, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.RAM_COOLDOWN_TICKS, MemoryStatus.VALUE_ABSENT)));
+        brain.addActivityWithConditions(Activity.RAM, ImmutableList.of(Pair.of(0, new RamTarget((goat) -> goat.isScreamingGoat() ? TIME_BETWEEN_RAMS_SCREAMER : TIME_BETWEEN_RAMS, RAM_TARGET_CONDITIONS, 3.0F, (goat) -> goat.isBaby() ? 1.0D : 2.5D, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_RAM_IMPACT : SoundEvents.GOAT_RAM_IMPACT, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_HORN_BREAK : SoundEvents.GOAT_HORN_BREAK)), Pair.of(1, new PrepareRamNearestTarget<>((goat) -> goat.isScreamingGoat() ? TIME_BETWEEN_RAMS_SCREAMER.getMinValue() : TIME_BETWEEN_RAMS.getMinValue(), 4, 7, 1.25F, RAM_TARGET_CONDITIONS, 20, (goat) -> goat.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_PREPARE_RAM : SoundEvents.GOAT_PREPARE_RAM))), ImmutableSet.of(Pair.of(MemoryModuleType.TEMPTING_PLAYER, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.RAM_COOLDOWN_TICKS, MemoryStatus.VALUE_ABSENT)));
     }
 
     public static void updateActivity(Goat goat) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
index abd89cf284df5aad8831eca06a450fab41e5502a..775eed57aaee0d538308d75abdb5bc66045a307a 100644
--- a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
+++ b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
@@ -411,7 +411,7 @@ public class Sniffer extends Animal {
     }
 
     public Brain<Sniffer> getBrain() {
-        return super.getBrain();
+        return (Brain<Sniffer>) super.getBrain();
     }
 
     protected Brain.Provider<Sniffer> brainProvider() {
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 6bfaeed6f39980f649aacc6fa76b9bfb1179a6cc..f1fd59b98e9045f76793ef3b70b6bc3e7520215e 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -477,11 +477,11 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
     }
 
     public int getAlternativeTarget(int i) {
-        return this.entityData.get((EntityDataAccessor)DATA_TARGETS.get(i));
+        return this.entityData.get(DATA_TARGETS.get(i));
     }
 
     public void setAlternativeTarget(int i, int i2) {
-        this.entityData.set((EntityDataAccessor)DATA_TARGETS.get(i), i2);
+        this.entityData.set(DATA_TARGETS.get(i), i2);
     }
 
     public boolean isPowered() {
diff --git a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
index f14b8804845da4bb52eb0df4d68ba228916d2ad6..d74e83772a6b61549073236b0b64885149abc053 100644
--- a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
@@ -228,8 +228,8 @@ public class FallingBlockEntity extends Entity {
                 DamageSource damageSource2 = var10000;
                 float f3 = (float)Math.min(Mth.floor((float)i * this.fallDamagePerDistance), this.fallDamageMax);
                 this.level().getEntities(this, this.getBoundingBox(), predicate).forEach((entity) -> entity.hurt(damageSource2, f3));
-                boolean flag = this.blockState.is(BlockTags.ANVIL);
-                if (flag && f3 > 0.0F && this.random.nextFloat() < 0.05F + (float)i * 0.05F) {
+                boolean isAnvil = this.blockState.is(BlockTags.ANVIL);
+                if (isAnvil && f3 > 0.0F && this.random.nextFloat() < 0.05F + (float)i * 0.05F) {
                     BlockState blockState = AnvilBlock.damage(this.blockState);
                     if (blockState == null) {
                         this.cancelDrop = true;
@@ -328,4 +328,4 @@ public class FallingBlockEntity extends Entity {
         this.setPos(d, d2, d3);
         this.setStartPos(this.blockPosition());
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index 654bcd31bebb1c01f9a6b39110eaeebf11eb1425..2c70a1bd68b304d51d8eea4031aac3db4669c7f2 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -226,7 +226,7 @@ public class Phantom extends FlyingMob implements Enemy {
                 this.nextScanTick = reducedTickDelay(60);
                 List<Player> list = Phantom.this.level().getNearbyPlayers(this.attackTargeting, Phantom.this, Phantom.this.getBoundingBox().inflate(16.0D, 64.0D, 16.0D));
                 if (!list.isEmpty()) {
-                    list.sort(Comparator.comparing(Entity::getY).reversed());
+                    list.sort(Comparator.<Entity, Double>comparing(Entity::getY).reversed());
 
                     for(Player player : list) {
                         if (Phantom.this.canAttack(player, TargetingConditions.DEFAULT)) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index cf370d23cf6d363f1428c1d1753219ee276e2f8c..44ae18bb7fb7e18395f69a7197fe567ea9907e19 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -176,7 +176,7 @@ public class Slime extends Mob implements Enemy {
     }
 
     public EntityType<? extends Slime> getType() {
-        return super.getType();
+        return (EntityType<? extends Slime>) super.getType();
     }
 
     public void remove(Entity.RemovalReason removalReason) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
index b573487bbb6d0b30667008c423623313ba78f299..d0cf1102dcb2c6e94cac4e19c9da8923ad96ec89 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
@@ -174,7 +174,7 @@ public class Zoglin extends Monster implements Enemy, HoglinBase {
     }
 
     public Brain<Zoglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Zoglin>) super.getBrain();
     }
 
     protected void updateActivity() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index b450913b69b57fe7b7eea4de01315a322fbec6f3..e55a47f75d204391694f284e3c638c8623dda608 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -62,7 +62,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
     private int timeInOverworld;
     private boolean cannotBeHunted;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Hoglin>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ADULT, SensorType.HOGLIN_SPECIFIC_SENSOR);
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED, MemoryModuleType.IS_PANICKING});
+    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED, MemoryModuleType.IS_PANICKING});
 
     public Hoglin(EntityType<? extends Hoglin> entityType, Level level) {
         super(entityType, level);
@@ -118,7 +118,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
     }
 
     public Brain<Hoglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Hoglin>) super.getBrain();
     }
 
     protected void customServerAiStep() {
@@ -328,4 +328,4 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
         super.sendDebugPackets();
         DebugPackets.sendEntityBrain(this);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index a6dcff58affd5f9fe6a882aa0e5ef2c66016d50c..7a6546bbcc0d5d95e764a2a3041582f7812c45cc 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -202,7 +202,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
     }
 
     public Brain<Piglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Piglin>) super.getBrain();
     }
 
     public InteractionResult mobInteract(Player player, InteractionHand interactionHand) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
index 554ad6726881627e925310bb5af99dcc4538c062..086113231b62673acb8de7926147d2dbe7ec0aa7 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
@@ -155,7 +155,7 @@ public class PiglinAi {
     }
 
     private static void initRideHoglinActivity(Brain<Piglin> brain) {
-        brain.addActivityAndRemoveMemoryWhenStopped(Activity.RIDE, 10, ImmutableList.of(Mount.create(0.8F), SetEntityLookTarget.create(PiglinAi::isPlayerHoldingLovedItem, 8.0F), BehaviorBuilder.sequence(BehaviorBuilder.triggerIf(Entity::isPassenger), TriggerGate.triggerOneShuffled(ImmutableList.builder().addAll(createLookBehaviors()).add(Pair.of(BehaviorBuilder.triggerIf(((piglin) -> true)), 1)).build())), DismountOrSkipMounting.create(8, PiglinAi::wantsToStopRiding)), MemoryModuleType.RIDE_TARGET);
+        brain.addActivityAndRemoveMemoryWhenStopped(Activity.RIDE, 10, ImmutableList.of(Mount.create(0.8F), SetEntityLookTarget.create(PiglinAi::isPlayerHoldingLovedItem, 8.0F), BehaviorBuilder.sequence(BehaviorBuilder.triggerIf(Entity::isPassenger), TriggerGate.triggerOneShuffled(ImmutableList.<Pair<? extends net.minecraft.world.entity.ai.behavior.declarative.Trigger<? super Piglin>, Integer>>builder().addAll(createLookBehaviors()).add(Pair.of(BehaviorBuilder.triggerIf(((piglin) -> true)), 1)).build())), DismountOrSkipMounting.create(8, PiglinAi::wantsToStopRiding)), MemoryModuleType.RIDE_TARGET);
     }
 
     private static ImmutableList<Pair<OneShot<LivingEntity>, Integer>> createLookBehaviors() {
@@ -163,7 +163,7 @@ public class PiglinAi {
     }
 
     private static RunOne<LivingEntity> createIdleLookBehaviors() {
-        return new RunOne<>(ImmutableList.builder().addAll(createLookBehaviors()).add(Pair.of(new DoNothing(30, 60), 1)).build());
+        return new RunOne<>(ImmutableList.<Pair<? extends BehaviorControl<? super LivingEntity>, Integer>>builder().addAll(createLookBehaviors()).add(Pair.of(new DoNothing(30, 60), 1)).build());
     }
 
     private static RunOne<Piglin> createIdleMovementBehaviors() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
index 7615b0ff697094bab54529332135b8ff5e3048fb..fae86e23fb7a0fe034813eaec1ced1ce449ba4e8 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
@@ -65,7 +65,7 @@ public class PiglinBrute extends AbstractPiglin {
     }
 
     public Brain<PiglinBrute> getBrain() {
-        return super.getBrain();
+        return (Brain<PiglinBrute>) super.getBrain();
     }
 
     public boolean canHunt() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java b/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
index 0f22b1b7c69bce89e68efe026dcccb0c369d0d6d..365f4cb49b17767f8abe24411a0bf92dd7962acf 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
@@ -60,7 +60,7 @@ public class AngerManagement {
     }
 
     private List<Pair<UUID, Integer>> createUuidAngerPairs() {
-        return Streams.concat(new Stream[]{this.suspects.stream().map((entity) -> Pair.of(entity.getUUID(), this.angerBySuspect.getInt(entity))), this.angerByUuid.object2IntEntrySet().stream().map((entry) -> Pair.of((UUID)entry.getKey(), entry.getIntValue()))}).collect(Collectors.toList());
+        return (List) Streams.concat(new Stream[]{this.suspects.stream().map((entity) -> Pair.of(entity.getUUID(), this.angerBySuspect.getInt(entity))), this.angerByUuid.object2IntEntrySet().stream().map((entry) -> Pair.of((UUID)entry.getKey(), entry.getIntValue()))}).collect(Collectors.toList());
     }
 
     public void tick(ServerLevel serverLevel, Predicate<Entity> predicate) {
@@ -167,9 +167,7 @@ public class AngerManagement {
     }
 
     @VisibleForTesting
-    protected static record Sorter(AngerManagement a) implements Comparator<Entity> {
-        private final AngerManagement angerManagement;
-
+    protected static record Sorter(AngerManagement angerManagement) implements Comparator<Entity> {
         public int compare(Entity entity, Entity entity2) {
             if (entity.equals(entity2)) {
                 return 0;
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
index 24f3ec47632886afa9ed9d6447544a6935f1f21c..92cf2d46cedfd38032545e2aaf3ad90b0d70faaa 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
@@ -343,7 +343,7 @@ public class Warden extends Monster implements VibrationSystem {
     }
 
     public Brain<Warden> getBrain() {
-        return super.getBrain();
+        return (Brain<Warden>) super.getBrain();
     }
 
     protected void sendDebugPackets() {
@@ -386,12 +386,12 @@ public class Warden extends Monster implements VibrationSystem {
     public void readAdditionalSaveData(CompoundTag compoundTag) {
         super.readAdditionalSaveData(compoundTag);
         if (compoundTag.contains("anger")) {
-            AngerManagement.codec(this::canTargetEntity).parse(new Dynamic(NbtOps.INSTANCE, compoundTag.get("anger"))).resultOrPartial(LOGGER::error).ifPresent((angerManagement) -> this.angerManagement = angerManagement);
+            AngerManagement.codec(this::canTargetEntity).parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.get("anger"))).resultOrPartial(LOGGER::error).ifPresent((angerManagement) -> this.angerManagement = angerManagement);
             this.syncClientAngerLevel();
         }
 
         if (compoundTag.contains("listener", 10)) {
-            VibrationSystem.Data.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((data) -> this.vibrationData = data);
+            VibrationSystem.Data.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((data) -> this.vibrationData = data);
         }
 
     }
@@ -604,4 +604,4 @@ public class Warden extends Monster implements VibrationSystem {
             }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java b/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java
index baf326e88118fba5a9e76937bb285701a4f40e28..68ae103c9dc5ea401fb16c12bdf440f283ee94c8 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java
@@ -88,7 +88,7 @@ public class WardenAi {
     }
 
     private static void initEmergeActivity(Brain<Warden> brain) {
-        brain.addActivityAndRemoveMemoryWhenStopped(Activity.EMERGE, 5, ImmutableList.of(new Emerging(EMERGE_DURATION)), MemoryModuleType.IS_EMERGING);
+        brain.addActivityAndRemoveMemoryWhenStopped(Activity.EMERGE, 5, ImmutableList.of(new Emerging<>(EMERGE_DURATION)), MemoryModuleType.IS_EMERGING);
     }
 
     private static void initDiggingActivity(Brain<Warden> brain) {
@@ -104,7 +104,7 @@ public class WardenAi {
     }
 
     private static void initSniffingActivity(Brain<Warden> brain) {
-        brain.addActivityAndRemoveMemoryWhenStopped(Activity.SNIFF, 5, ImmutableList.of(SetRoarTarget.create(Warden::getEntityAngryAt), new Sniffing(SNIFFING_DURATION)), MemoryModuleType.IS_SNIFFING);
+        brain.addActivityAndRemoveMemoryWhenStopped(Activity.SNIFF, 5, ImmutableList.of(SetRoarTarget.create(Warden::getEntityAngryAt), new Sniffing<>(SNIFFING_DURATION)), MemoryModuleType.IS_SNIFFING);
     }
 
     private static void initRoarActivity(Brain<Warden> brain) {
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index bd3c84b51d5ffd6928531470ac645591035f327e..992671e8a494df2e254ecb95efbe847d1a89b256 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -137,7 +137,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
 
     public Brain<Villager> getBrain() {
-        return super.getBrain();
+        return (Brain<Villager>) super.getBrain();
     }
 
     protected Brain.Provider<Villager> brainProvider() {
@@ -569,12 +569,12 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
 
     private void tellWitnessesThatIWasMurdered(Entity entity) {
-        Level optional = this.level();
-        if (optional instanceof ServerLevel) {
-            ServerLevel serverLevel = (ServerLevel)optional;
-            Optional<NearestVisibleLivingEntities> optional = this.brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
-            if (!optional.isEmpty()) {
-                ((NearestVisibleLivingEntities)optional.get()).findAll(ReputationEventHandler.class::isInstance).forEach((livingEntity) -> serverLevel.onReputationEvent(ReputationEventType.VILLAGER_KILLED, entity, (ReputationEventHandler)livingEntity));
+        Level level = this.level();
+        if (level instanceof ServerLevel) {
+            ServerLevel serverLevel = (ServerLevel)level;
+            Optional<NearestVisibleLivingEntities> optionalIn = this.brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
+            if (!optionalIn.isEmpty()) {
+                ((NearestVisibleLivingEntities)optionalIn.get()).findAll(ReputationEventHandler.class::isInstance).forEach((livingEntity) -> serverLevel.onReputationEvent(ReputationEventType.VILLAGER_KILLED, entity, (ReputationEventHandler)livingEntity));
             }
         }
     }
@@ -880,4 +880,4 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
             return false;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java b/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java
index 053f3cd00d99715796d9aca40b0a205981028e74..b6eee63387c16abeda244cb8ee64204c07ce4d8d 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java
@@ -18,14 +18,7 @@ import net.minecraft.world.item.Items;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 
-public record VillagerProfession(String q, Predicate<Holder<PoiType>> r, Predicate<Holder<PoiType>> s, ImmutableSet<Item> t, ImmutableSet<Block> u, @Nullable SoundEvent v) {
-    private final String name;
-    private final Predicate<Holder<PoiType>> heldJobSite;
-    private final Predicate<Holder<PoiType>> acquirableJobSite;
-    private final ImmutableSet<Item> requestedItems;
-    private final ImmutableSet<Block> secondaryPoi;
-    @Nullable
-    private final SoundEvent workSound;
+public record VillagerProfession(String name, Predicate<Holder<PoiType>> heldJobSite, Predicate<Holder<PoiType>> acquirableJobSite, ImmutableSet<Item> requestedItems, ImmutableSet<Block> secondaryPoi, @Nullable SoundEvent workSound) {
     public static final Predicate<Holder<PoiType>> ALL_ACQUIRABLE_JOBS = (holder) -> holder.is(PoiTypeTags.ACQUIRABLE_JOB_SITE);
     public static final VillagerProfession NONE = register("none", PoiType.NONE, ALL_ACQUIRABLE_JOBS, (SoundEvent)null);
     public static final VillagerProfession ARMORER = register("armorer", PoiTypes.ARMORER, SoundEvents.VILLAGER_WORK_ARMORER);
@@ -62,29 +55,4 @@ public record VillagerProfession(String q, Predicate<Holder<PoiType>> r, Predica
     private static VillagerProfession register(String s, Predicate<Holder<PoiType>> predicate, Predicate<Holder<PoiType>> predicate2, ImmutableSet<Item> immutableSet, ImmutableSet<Block> immutableSet2, @Nullable SoundEvent soundEvent) {
         return Registry.register(BuiltInRegistries.VILLAGER_PROFESSION, new ResourceLocation(s), new VillagerProfession(s, predicate, predicate2, immutableSet, immutableSet2, soundEvent));
     }
-
-    public String name() {
-        return this.name;
-    }
-
-    public Predicate<Holder<PoiType>> heldJobSite() {
-        return this.heldJobSite;
-    }
-
-    public Predicate<Holder<PoiType>> acquirableJobSite() {
-        return this.acquirableJobSite;
-    }
-
-    public ImmutableSet<Item> requestedItems() {
-        return this.requestedItems;
-    }
-
-    public ImmutableSet<Block> secondaryPoi() {
-        return this.secondaryPoi;
-    }
-
-    @Nullable
-    public SoundEvent workSound() {
-        return this.workSound;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
index 3ce3c7fead4bf5b4178070b9dcbd78babc99a047..99c0339ca7227d1907d76cd9c518439c677cb16b 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
@@ -68,10 +68,10 @@ public class VillagerTrades {
     private static final float HIGH_TIER_PRICE_MULTIPLIER = 0.2F;
     public static final Map<VillagerProfession, Int2ObjectMap<VillagerTrades.ItemListing[]>> TRADES = Util.make(Maps.newHashMap(), (hashMap) -> {
         hashMap.put(VillagerProfession.FARMER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHEAT, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.POTATO, 26, 16, 2), new VillagerTrades.EmeraldForItems(Items.CARROT, 22, 16, 2), new VillagerTrades.EmeraldForItems(Items.BEETROOT, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.BREAD, 1, 6, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.PUMPKIN, 6, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN_PIE, 1, 4, 5), new VillagerTrades.ItemsForEmeralds(Items.APPLE, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.COOKIE, 3, 18, 10), new VillagerTrades.EmeraldForItems(Blocks.MELON, 4, 12, 20)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Blocks.CAKE, 1, 1, 12, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.NIGHT_VISION, 100, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.JUMP, 160, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.WEAKNESS, 140, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.BLINDNESS, 120, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.POISON, 280, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.SATURATION, 7, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GOLDEN_CARROT, 3, 3, 30), new VillagerTrades.ItemsForEmeralds(Items.GLISTERING_MELON_SLICE, 4, 3, 30)})));
-        hashMap.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, 1, Items.COOKED_COD, 6, 16, 1, 0.05F), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, 1, Items.COOKED_SALMON, 6, 16, 5, 0.05F), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, ImmutableMap.builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
+        hashMap.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, 1, Items.COOKED_COD, 6, 16, 1, 0.05F), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, 1, Items.COOKED_SALMON, 6, 16, 5, 0.05F), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, ImmutableMap.<VillagerType, Item>builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
         hashMap.put(VillagerProfession.SHEPHERD, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.WHITE_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BROWN_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BLACK_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.GRAY_WOOL, 18, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.SHEARS, 2, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHITE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.GRAY_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.BLACK_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIGHT_BLUE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIME_DYE, 12, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_CARPET, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.YELLOW_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.LIGHT_GRAY_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.ORANGE_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.RED_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.PINK_DYE, 12, 16, 20), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.RED_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_BED, 3, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BROWN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.PURPLE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.BLUE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.GREEN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.MAGENTA_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.CYAN_DYE, 12, 16, 30), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 12, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.PAINTING, 2, 3, 30)})));
         hashMap.put(VillagerProfession.FLETCHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STICK, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.ARROW, 1, 16, 1), new VillagerTrades.ItemsAndEmeraldsToItems(Blocks.GRAVEL, 10, 1, Items.FLINT, 10, 12, 1, 0.05F)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FLINT, 26, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.BOW, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 14, 16, 20), new VillagerTrades.ItemsForEmeralds(Items.CROSSBOW, 3, 1, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FEATHER, 24, 16, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.BOW, 2, 3, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TRIPWIRE_HOOK, 8, 12, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.CROSSBOW, 3, 3, 15), new VillagerTrades.TippedArrowForItemsAndEmeralds(Items.ARROW, 5, Items.TIPPED_ARROW, 5, 2, 12, 30)})));
-        hashMap.put(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
+        hashMap.put(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.<Integer, ItemListing[]>builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
         hashMap.put(VillagerProfession.CARTOGRAPHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.MAP, 7, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GLASS_PANE, 11, 16, 10), new VillagerTrades.TreasureMapForEmeralds(13, StructureTags.ON_OCEAN_EXPLORER_MAPS, "filled_map.monument", MapDecoration.Type.MONUMENT, 12, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COMPASS, 1, 12, 20), new VillagerTrades.TreasureMapForEmeralds(14, StructureTags.ON_WOODLAND_EXPLORER_MAPS, "filled_map.mansion", MapDecoration.Type.MANSION, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.ITEM_FRAME, 7, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GLOBE_BANNER_PATTERN, 8, 1, 30)})));
         hashMap.put(VillagerProfession.CLERIC, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.ROTTEN_FLESH, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.REDSTONE, 1, 2, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GOLD_INGOT, 3, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.LAPIS_LAZULI, 1, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.RABBIT_FOOT, 2, 12, 20), new VillagerTrades.ItemsForEmeralds(Blocks.GLOWSTONE, 4, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SCUTE, 4, 12, 30), new VillagerTrades.EmeraldForItems(Items.GLASS_BOTTLE, 9, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.ENDER_PEARL, 5, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.NETHER_WART, 22, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.EXPERIENCE_BOTTLE, 3, 1, 30)})));
         hashMap.put(VillagerProfession.ARMORER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_LEGGINGS), 7, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_BOOTS), 4, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_HELMET), 5, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_CHESTPLATE), 9, 1, 12, 1, 0.2F)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_BOOTS), 1, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_LEGGINGS), 3, 1, 12, 5, 0.2F)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.LAVA_BUCKET, 1, 12, 20), new VillagerTrades.EmeraldForItems(Items.DIAMOND, 1, 12, 20), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_HELMET), 1, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_CHESTPLATE), 4, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.SHIELD), 5, 1, 12, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_LEGGINGS, 14, 3, 15, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_BOOTS, 8, 3, 15, 0.2F)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_HELMET, 8, 3, 30, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_CHESTPLATE, 16, 3, 30, 0.2F)})));
@@ -89,15 +89,15 @@ public class VillagerTrades {
     private static final VillagerTrades.TreasureMapForEmeralds SNOWY_MAP = new VillagerTrades.TreasureMapForEmeralds(8, StructureTags.ON_SNOWY_VILLAGE_MAPS, "filled_map.village_snowy", MapDecoration.Type.SNOWY_VILLAGE, 12, 5);
     private static final VillagerTrades.TreasureMapForEmeralds JUNGLE_MAP = new VillagerTrades.TreasureMapForEmeralds(8, StructureTags.ON_JUNGLE_EXPLORER_MAPS, "filled_map.explorer_jungle", MapDecoration.Type.JUNGLE_TEMPLE, 12, 5);
     private static final VillagerTrades.TreasureMapForEmeralds SWAMP_MAP = new VillagerTrades.TreasureMapForEmeralds(8, StructureTags.ON_SWAMP_EXPLORER_MAPS, "filled_map.explorer_swamp", MapDecoration.Type.SWAMP_HUT, 12, 5);
-    public static final Map<VillagerProfession, Int2ObjectMap<VillagerTrades.ItemListing[]>> EXPERIMENTAL_TRADES = Map.of(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), commonBooks(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), commonBooks(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), commonBooks(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{specialBooks(), new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()), VillagerProfession.ARMORER, toIntMap(ImmutableMap.builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 12, 2), new VillagerTrades.EmeraldForItems(Items.IRON_INGOT, 5, 12, 2)}).put(2, new VillagerTrades.ItemListing[]{VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.IRON_BOOTS, 4, 1, 12, 5, 0.05F), VillagerType.DESERT, VillagerType.PLAINS, VillagerType.SAVANNA, VillagerType.SNOW, VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.CHAINMAIL_BOOTS, 4, 1, 12, 5, 0.05F), VillagerType.JUNGLE, VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.IRON_HELMET, 5, 1, 12, 5, 0.05F), VillagerType.DESERT, VillagerType.PLAINS, VillagerType.SAVANNA, VillagerType.SNOW, VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.CHAINMAIL_HELMET, 5, 1, 12, 5, 0.05F), VillagerType.JUNGLE, VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.IRON_LEGGINGS, 7, 1, 12, 5, 0.05F), VillagerType.DESERT, VillagerType.PLAINS, VillagerType.SAVANNA, VillagerType.SNOW, VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.CHAINMAIL_LEGGINGS, 7, 1, 12, 5, 0.05F), VillagerType.JUNGLE, VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.IRON_CHESTPLATE, 9, 1, 12, 5, 0.05F), VillagerType.DESERT, VillagerType.PLAINS, VillagerType.SAVANNA, VillagerType.SNOW, VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.CHAINMAIL_CHESTPLATE, 9, 1, 12, 5, 0.05F), VillagerType.JUNGLE, VillagerType.SWAMP)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.LAVA_BUCKET, 1, 12, 20), new VillagerTrades.ItemsForEmeralds(Items.SHIELD, 5, 1, 12, 10, 0.05F), new VillagerTrades.ItemsForEmeralds(Items.BELL, 36, 1, 12, 10, 0.2F)}).put(4, new VillagerTrades.ItemListing[]{VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_BOOTS, Enchantments.THORNS, 1), 8, 1, 3, 15, 0.05F), VillagerType.DESERT), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_HELMET, Enchantments.THORNS, 1), 9, 1, 3, 15, 0.05F), VillagerType.DESERT), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_LEGGINGS, Enchantments.THORNS, 1), 11, 1, 3, 15, 0.05F), VillagerType.DESERT), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_CHESTPLATE, Enchantments.THORNS, 1), 13, 1, 3, 15, 0.05F), VillagerType.DESERT), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_BOOTS, Enchantments.ALL_DAMAGE_PROTECTION, 1), 8, 1, 3, 15, 0.05F), VillagerType.PLAINS), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_HELMET, Enchantments.ALL_DAMAGE_PROTECTION, 1), 9, 1, 3, 15, 0.05F), VillagerType.PLAINS), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_LEGGINGS, Enchantments.ALL_DAMAGE_PROTECTION, 1), 11, 1, 3, 15, 0.05F), VillagerType.PLAINS), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_CHESTPLATE, Enchantments.ALL_DAMAGE_PROTECTION, 1), 13, 1, 3, 15, 0.05F), VillagerType.PLAINS), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_BOOTS, Enchantments.BINDING_CURSE, 1), 2, 1, 3, 15, 0.05F), VillagerType.SAVANNA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_HELMET, Enchantments.BINDING_CURSE, 1), 3, 1, 3, 15, 0.05F), VillagerType.SAVANNA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_LEGGINGS, Enchantments.BINDING_CURSE, 1), 5, 1, 3, 15, 0.05F), VillagerType.SAVANNA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_CHESTPLATE, Enchantments.BINDING_CURSE, 1), 7, 1, 3, 15, 0.05F), VillagerType.SAVANNA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_BOOTS, Enchantments.FROST_WALKER, 1), 8, 1, 3, 15, 0.05F), VillagerType.SNOW), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_HELMET, Enchantments.AQUA_AFFINITY, 1), 9, 1, 3, 15, 0.05F), VillagerType.SNOW), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_BOOTS, Enchantments.UNBREAKING, 1), 8, 1, 3, 15, 0.05F), VillagerType.JUNGLE), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_HELMET, Enchantments.UNBREAKING, 1), 9, 1, 3, 15, 0.05F), VillagerType.JUNGLE), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_LEGGINGS, Enchantments.UNBREAKING, 1), 11, 1, 3, 15, 0.05F), VillagerType.JUNGLE), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_CHESTPLATE, Enchantments.UNBREAKING, 1), 13, 1, 3, 15, 0.05F), VillagerType.JUNGLE), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_BOOTS, Enchantments.MENDING, 1), 8, 1, 3, 15, 0.05F), VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_HELMET, Enchantments.MENDING, 1), 9, 1, 3, 15, 0.05F), VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_LEGGINGS, Enchantments.MENDING, 1), 11, 1, 3, 15, 0.05F), VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_CHESTPLATE, Enchantments.MENDING, 1), 13, 1, 3, 15, 0.05F), VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND_BOOTS, 1, 4, Items.DIAMOND_LEGGINGS, 1, 3, 15, 0.05F), VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND_LEGGINGS, 1, 4, Items.DIAMOND_CHESTPLATE, 1, 3, 15, 0.05F), VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND_HELMET, 1, 4, Items.DIAMOND_BOOTS, 1, 3, 15, 0.05F), VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND_CHESTPLATE, 1, 2, Items.DIAMOND_HELMET, 1, 3, 15, 0.05F), VillagerType.TAIGA)}).put(5, new VillagerTrades.ItemListing[]{VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 4, 16, enchant(Items.DIAMOND_CHESTPLATE, Enchantments.THORNS, 1), 1, 3, 30, 0.05F), VillagerType.DESERT), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 3, 16, enchant(Items.DIAMOND_LEGGINGS, Enchantments.THORNS, 1), 1, 3, 30, 0.05F), VillagerType.DESERT), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 3, 16, enchant(Items.DIAMOND_LEGGINGS, Enchantments.ALL_DAMAGE_PROTECTION, 1), 1, 3, 30, 0.05F), VillagerType.PLAINS), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 2, 12, enchant(Items.DIAMOND_BOOTS, Enchantments.ALL_DAMAGE_PROTECTION, 1), 1, 3, 30, 0.05F), VillagerType.PLAINS), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 2, 6, enchant(Items.DIAMOND_HELMET, Enchantments.BINDING_CURSE, 1), 1, 3, 30, 0.05F), VillagerType.SAVANNA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 3, 8, enchant(Items.DIAMOND_CHESTPLATE, Enchantments.BINDING_CURSE, 1), 1, 3, 30, 0.05F), VillagerType.SAVANNA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 2, 12, enchant(Items.DIAMOND_BOOTS, Enchantments.FROST_WALKER, 1), 1, 3, 30, 0.05F), VillagerType.SNOW), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 3, 12, enchant(Items.DIAMOND_HELMET, Enchantments.AQUA_AFFINITY, 1), 1, 3, 30, 0.05F), VillagerType.SNOW), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_HELMET, Enchantments.PROJECTILE_PROTECTION, 1), 9, 1, 3, 30, 0.05F), VillagerType.JUNGLE), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_BOOTS, Enchantments.FALL_PROTECTION, 1), 8, 1, 3, 30, 0.05F), VillagerType.JUNGLE), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_HELMET, Enchantments.RESPIRATION, 1), 9, 1, 3, 30, 0.05F), VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_BOOTS, Enchantments.DEPTH_STRIDER, 1), 8, 1, 3, 30, 0.05F), VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 4, 18, enchant(Items.DIAMOND_CHESTPLATE, Enchantments.BLAST_PROTECTION, 1), 1, 3, 30, 0.05F), VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 3, 18, enchant(Items.DIAMOND_LEGGINGS, Enchantments.BLAST_PROTECTION, 1), 1, 3, 30, 0.05F), VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.EmeraldForItems(Items.DIAMOND_BLOCK, 1, 12, 30, 42), VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.EmeraldForItems(Items.IRON_BLOCK, 1, 12, 30, 4), VillagerType.DESERT, VillagerType.JUNGLE, VillagerType.PLAINS, VillagerType.SAVANNA, VillagerType.SNOW, VillagerType.SWAMP)}).build()), VillagerProfession.CARTOGRAPHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.MAP, 7, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GLASS_PANE, 11, 16, 10), new VillagerTrades.TypeSpecificTrade(ImmutableMap.builder().put(VillagerType.DESERT, SAVANNA_MAP).put(VillagerType.SAVANNA, PLAINS_MAP).put(VillagerType.PLAINS, TAIGA_MAP).put(VillagerType.TAIGA, SNOWY_MAP).put(VillagerType.SNOW, PLAINS_MAP).put(VillagerType.JUNGLE, SAVANNA_MAP).put(VillagerType.SWAMP, SNOWY_MAP).build()), new VillagerTrades.TypeSpecificTrade(ImmutableMap.builder().put(VillagerType.DESERT, PLAINS_MAP).put(VillagerType.SAVANNA, DESERT_MAP).put(VillagerType.PLAINS, SAVANNA_MAP).put(VillagerType.TAIGA, PLAINS_MAP).put(VillagerType.SNOW, TAIGA_MAP).put(VillagerType.JUNGLE, DESERT_MAP).put(VillagerType.SWAMP, TAIGA_MAP).build()), new VillagerTrades.TypeSpecificTrade(ImmutableMap.builder().put(VillagerType.DESERT, JUNGLE_MAP).put(VillagerType.SAVANNA, JUNGLE_MAP).put(VillagerType.PLAINS, new VillagerTrades.FailureItemListing()).put(VillagerType.TAIGA, SWAMP_MAP).put(VillagerType.SNOW, SWAMP_MAP).put(VillagerType.JUNGLE, SWAMP_MAP).put(VillagerType.SWAMP, JUNGLE_MAP).build())}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COMPASS, 1, 12, 20), new VillagerTrades.TreasureMapForEmeralds(13, StructureTags.ON_OCEAN_EXPLORER_MAPS, "filled_map.monument", MapDecoration.Type.MONUMENT, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.ITEM_FRAME, 7, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GLOBE_BANNER_PATTERN, 8, 1, 30), new VillagerTrades.TreasureMapForEmeralds(14, StructureTags.ON_WOODLAND_EXPLORER_MAPS, "filled_map.mansion", MapDecoration.Type.MANSION, 1, 30)})));
-    public static final List<Pair<VillagerTrades.ItemListing[], Integer>> EXPERIMENTAL_WANDERING_TRADER_TRADES = ImmutableList.builder().add(Pair.of(new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(potion(Potions.WATER), 1, 1, 1), new VillagerTrades.EmeraldForItems(Items.WATER_BUCKET, 1, 1, 1, 2), new VillagerTrades.EmeraldForItems(Items.MILK_BUCKET, 1, 1, 1, 2), new VillagerTrades.EmeraldForItems(Items.FERMENTED_SPIDER_EYE, 1, 1, 1, 3), new VillagerTrades.EmeraldForItems(Items.BAKED_POTATO, 4, 1, 1), new VillagerTrades.EmeraldForItems(Items.HAY_BLOCK, 1, 1, 1)}, 2)).add(Pair.of(new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.PACKED_ICE, 1, 1, 6, 1), new VillagerTrades.ItemsForEmeralds(Items.BLUE_ICE, 6, 1, 6, 1), new VillagerTrades.ItemsForEmeralds(Items.GUNPOWDER, 1, 4, 2, 1), new VillagerTrades.ItemsForEmeralds(Items.PODZOL, 3, 3, 6, 1), new VillagerTrades.ItemsForEmeralds(Blocks.ACACIA_LOG, 1, 8, 4, 1), new VillagerTrades.ItemsForEmeralds(Blocks.BIRCH_LOG, 1, 8, 4, 1), new VillagerTrades.ItemsForEmeralds(Blocks.DARK_OAK_LOG, 1, 8, 4, 1), new VillagerTrades.ItemsForEmeralds(Blocks.JUNGLE_LOG, 1, 8, 4, 1), new VillagerTrades.ItemsForEmeralds(Blocks.OAK_LOG, 1, 8, 4, 1), new VillagerTrades.ItemsForEmeralds(Blocks.SPRUCE_LOG, 1, 8, 4, 1), new VillagerTrades.ItemsForEmeralds(Blocks.CHERRY_LOG, 1, 8, 4, 1), new VillagerTrades.EnchantedItemForEmeralds(Items.IRON_PICKAXE, 1, 1, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(potion(Potions.LONG_INVISIBILITY), 5, 1, 1, 1)}, 2)).add(Pair.of(new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.TROPICAL_FISH_BUCKET, 3, 1, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.PUFFERFISH_BUCKET, 3, 1, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.SEA_PICKLE, 2, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.SLIME_BALL, 4, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.GLOWSTONE, 2, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.NAUTILUS_SHELL, 5, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.FERN, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.SUGAR_CANE, 1, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN, 1, 1, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.KELP, 3, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.CACTUS, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.DANDELION, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.POPPY, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BLUE_ORCHID, 1, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.ALLIUM, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.AZURE_BLUET, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.WHITE_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PINK_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.OXEYE_DAISY, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.CORNFLOWER, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LILY_OF_THE_VALLEY, 1, 1, 7, 1), new VillagerTrades.ItemsForEmeralds(Items.WHEAT_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BEETROOT_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.MELON_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.ACACIA_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.BIRCH_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.DARK_OAK_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.JUNGLE_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.OAK_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.SPRUCE_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.CHERRY_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.MANGROVE_PROPAGULE, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.WHITE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BLUE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PINK_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BLACK_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.GREEN_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.GRAY_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LIME_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BROWN_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.CYAN_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BRAIN_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.BUBBLE_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.FIRE_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.HORN_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.TUBE_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.VINE, 1, 3, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.BROWN_MUSHROOM, 1, 3, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_MUSHROOM, 1, 3, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.LILY_PAD, 1, 5, 2, 1), new VillagerTrades.ItemsForEmeralds(Items.SMALL_DRIPLEAF, 1, 2, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.SAND, 1, 8, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_SAND, 1, 4, 6, 1), new VillagerTrades.ItemsForEmeralds(Items.POINTED_DRIPSTONE, 1, 2, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.ROOTED_DIRT, 1, 2, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.MOSS_BLOCK, 1, 2, 5, 1)}, 5)).build();
+    public static final Map<VillagerProfession, Int2ObjectMap<VillagerTrades.ItemListing[]>> EXPERIMENTAL_TRADES = Map.of(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.<Integer, VillagerTrades.ItemListing[]>builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), commonBooks(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), commonBooks(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), commonBooks(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{specialBooks(), new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()), VillagerProfession.ARMORER, toIntMap(ImmutableMap.<Integer, ItemListing[]>builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 12, 2), new VillagerTrades.EmeraldForItems(Items.IRON_INGOT, 5, 12, 2)}).put(2, new VillagerTrades.ItemListing[]{VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.IRON_BOOTS, 4, 1, 12, 5, 0.05F), VillagerType.DESERT, VillagerType.PLAINS, VillagerType.SAVANNA, VillagerType.SNOW, VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.CHAINMAIL_BOOTS, 4, 1, 12, 5, 0.05F), VillagerType.JUNGLE, VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.IRON_HELMET, 5, 1, 12, 5, 0.05F), VillagerType.DESERT, VillagerType.PLAINS, VillagerType.SAVANNA, VillagerType.SNOW, VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.CHAINMAIL_HELMET, 5, 1, 12, 5, 0.05F), VillagerType.JUNGLE, VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.IRON_LEGGINGS, 7, 1, 12, 5, 0.05F), VillagerType.DESERT, VillagerType.PLAINS, VillagerType.SAVANNA, VillagerType.SNOW, VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.CHAINMAIL_LEGGINGS, 7, 1, 12, 5, 0.05F), VillagerType.JUNGLE, VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.IRON_CHESTPLATE, 9, 1, 12, 5, 0.05F), VillagerType.DESERT, VillagerType.PLAINS, VillagerType.SAVANNA, VillagerType.SNOW, VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(Items.CHAINMAIL_CHESTPLATE, 9, 1, 12, 5, 0.05F), VillagerType.JUNGLE, VillagerType.SWAMP)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.LAVA_BUCKET, 1, 12, 20), new VillagerTrades.ItemsForEmeralds(Items.SHIELD, 5, 1, 12, 10, 0.05F), new VillagerTrades.ItemsForEmeralds(Items.BELL, 36, 1, 12, 10, 0.2F)}).put(4, new VillagerTrades.ItemListing[]{VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_BOOTS, Enchantments.THORNS, 1), 8, 1, 3, 15, 0.05F), VillagerType.DESERT), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_HELMET, Enchantments.THORNS, 1), 9, 1, 3, 15, 0.05F), VillagerType.DESERT), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_LEGGINGS, Enchantments.THORNS, 1), 11, 1, 3, 15, 0.05F), VillagerType.DESERT), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_CHESTPLATE, Enchantments.THORNS, 1), 13, 1, 3, 15, 0.05F), VillagerType.DESERT), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_BOOTS, Enchantments.ALL_DAMAGE_PROTECTION, 1), 8, 1, 3, 15, 0.05F), VillagerType.PLAINS), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_HELMET, Enchantments.ALL_DAMAGE_PROTECTION, 1), 9, 1, 3, 15, 0.05F), VillagerType.PLAINS), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_LEGGINGS, Enchantments.ALL_DAMAGE_PROTECTION, 1), 11, 1, 3, 15, 0.05F), VillagerType.PLAINS), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_CHESTPLATE, Enchantments.ALL_DAMAGE_PROTECTION, 1), 13, 1, 3, 15, 0.05F), VillagerType.PLAINS), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_BOOTS, Enchantments.BINDING_CURSE, 1), 2, 1, 3, 15, 0.05F), VillagerType.SAVANNA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_HELMET, Enchantments.BINDING_CURSE, 1), 3, 1, 3, 15, 0.05F), VillagerType.SAVANNA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_LEGGINGS, Enchantments.BINDING_CURSE, 1), 5, 1, 3, 15, 0.05F), VillagerType.SAVANNA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_CHESTPLATE, Enchantments.BINDING_CURSE, 1), 7, 1, 3, 15, 0.05F), VillagerType.SAVANNA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_BOOTS, Enchantments.FROST_WALKER, 1), 8, 1, 3, 15, 0.05F), VillagerType.SNOW), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.IRON_HELMET, Enchantments.AQUA_AFFINITY, 1), 9, 1, 3, 15, 0.05F), VillagerType.SNOW), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_BOOTS, Enchantments.UNBREAKING, 1), 8, 1, 3, 15, 0.05F), VillagerType.JUNGLE), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_HELMET, Enchantments.UNBREAKING, 1), 9, 1, 3, 15, 0.05F), VillagerType.JUNGLE), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_LEGGINGS, Enchantments.UNBREAKING, 1), 11, 1, 3, 15, 0.05F), VillagerType.JUNGLE), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_CHESTPLATE, Enchantments.UNBREAKING, 1), 13, 1, 3, 15, 0.05F), VillagerType.JUNGLE), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_BOOTS, Enchantments.MENDING, 1), 8, 1, 3, 15, 0.05F), VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_HELMET, Enchantments.MENDING, 1), 9, 1, 3, 15, 0.05F), VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_LEGGINGS, Enchantments.MENDING, 1), 11, 1, 3, 15, 0.05F), VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_CHESTPLATE, Enchantments.MENDING, 1), 13, 1, 3, 15, 0.05F), VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND_BOOTS, 1, 4, Items.DIAMOND_LEGGINGS, 1, 3, 15, 0.05F), VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND_LEGGINGS, 1, 4, Items.DIAMOND_CHESTPLATE, 1, 3, 15, 0.05F), VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND_HELMET, 1, 4, Items.DIAMOND_BOOTS, 1, 3, 15, 0.05F), VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND_CHESTPLATE, 1, 2, Items.DIAMOND_HELMET, 1, 3, 15, 0.05F), VillagerType.TAIGA)}).put(5, new VillagerTrades.ItemListing[]{VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 4, 16, enchant(Items.DIAMOND_CHESTPLATE, Enchantments.THORNS, 1), 1, 3, 30, 0.05F), VillagerType.DESERT), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 3, 16, enchant(Items.DIAMOND_LEGGINGS, Enchantments.THORNS, 1), 1, 3, 30, 0.05F), VillagerType.DESERT), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 3, 16, enchant(Items.DIAMOND_LEGGINGS, Enchantments.ALL_DAMAGE_PROTECTION, 1), 1, 3, 30, 0.05F), VillagerType.PLAINS), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 2, 12, enchant(Items.DIAMOND_BOOTS, Enchantments.ALL_DAMAGE_PROTECTION, 1), 1, 3, 30, 0.05F), VillagerType.PLAINS), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 2, 6, enchant(Items.DIAMOND_HELMET, Enchantments.BINDING_CURSE, 1), 1, 3, 30, 0.05F), VillagerType.SAVANNA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 3, 8, enchant(Items.DIAMOND_CHESTPLATE, Enchantments.BINDING_CURSE, 1), 1, 3, 30, 0.05F), VillagerType.SAVANNA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 2, 12, enchant(Items.DIAMOND_BOOTS, Enchantments.FROST_WALKER, 1), 1, 3, 30, 0.05F), VillagerType.SNOW), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 3, 12, enchant(Items.DIAMOND_HELMET, Enchantments.AQUA_AFFINITY, 1), 1, 3, 30, 0.05F), VillagerType.SNOW), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_HELMET, Enchantments.PROJECTILE_PROTECTION, 1), 9, 1, 3, 30, 0.05F), VillagerType.JUNGLE), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_BOOTS, Enchantments.FALL_PROTECTION, 1), 8, 1, 3, 30, 0.05F), VillagerType.JUNGLE), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_HELMET, Enchantments.RESPIRATION, 1), 9, 1, 3, 30, 0.05F), VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsForEmeralds(enchant(Items.CHAINMAIL_BOOTS, Enchantments.DEPTH_STRIDER, 1), 8, 1, 3, 30, 0.05F), VillagerType.SWAMP), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 4, 18, enchant(Items.DIAMOND_CHESTPLATE, Enchantments.BLAST_PROTECTION, 1), 1, 3, 30, 0.05F), VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.ItemsAndEmeraldsToItems(Items.DIAMOND, 3, 18, enchant(Items.DIAMOND_LEGGINGS, Enchantments.BLAST_PROTECTION, 1), 1, 3, 30, 0.05F), VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.EmeraldForItems(Items.DIAMOND_BLOCK, 1, 12, 30, 42), VillagerType.TAIGA), VillagerTrades.TypeSpecificTrade.oneTradeInBiomes(new VillagerTrades.EmeraldForItems(Items.IRON_BLOCK, 1, 12, 30, 4), VillagerType.DESERT, VillagerType.JUNGLE, VillagerType.PLAINS, VillagerType.SAVANNA, VillagerType.SNOW, VillagerType.SWAMP)}).build()), VillagerProfession.CARTOGRAPHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.MAP, 7, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GLASS_PANE, 11, 16, 10), new VillagerTrades.TypeSpecificTrade(ImmutableMap.<VillagerType, ItemListing>builder().put(VillagerType.DESERT, SAVANNA_MAP).put(VillagerType.SAVANNA, PLAINS_MAP).put(VillagerType.PLAINS, TAIGA_MAP).put(VillagerType.TAIGA, SNOWY_MAP).put(VillagerType.SNOW, PLAINS_MAP).put(VillagerType.JUNGLE, SAVANNA_MAP).put(VillagerType.SWAMP, SNOWY_MAP).build()), new VillagerTrades.TypeSpecificTrade(ImmutableMap.<VillagerType, ItemListing>builder().put(VillagerType.DESERT, PLAINS_MAP).put(VillagerType.SAVANNA, DESERT_MAP).put(VillagerType.PLAINS, SAVANNA_MAP).put(VillagerType.TAIGA, PLAINS_MAP).put(VillagerType.SNOW, TAIGA_MAP).put(VillagerType.JUNGLE, DESERT_MAP).put(VillagerType.SWAMP, TAIGA_MAP).build()), new VillagerTrades.TypeSpecificTrade(ImmutableMap.<VillagerType, ItemListing>builder().put(VillagerType.DESERT, JUNGLE_MAP).put(VillagerType.SAVANNA, JUNGLE_MAP).put(VillagerType.PLAINS, new VillagerTrades.FailureItemListing()).put(VillagerType.TAIGA, SWAMP_MAP).put(VillagerType.SNOW, SWAMP_MAP).put(VillagerType.JUNGLE, SWAMP_MAP).put(VillagerType.SWAMP, JUNGLE_MAP).build())}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COMPASS, 1, 12, 20), new VillagerTrades.TreasureMapForEmeralds(13, StructureTags.ON_OCEAN_EXPLORER_MAPS, "filled_map.monument", MapDecoration.Type.MONUMENT, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.ITEM_FRAME, 7, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GLOBE_BANNER_PATTERN, 8, 1, 30), new VillagerTrades.TreasureMapForEmeralds(14, StructureTags.ON_WOODLAND_EXPLORER_MAPS, "filled_map.mansion", MapDecoration.Type.MANSION, 1, 30)})));
+    public static final List<Pair<VillagerTrades.ItemListing[], Integer>> EXPERIMENTAL_WANDERING_TRADER_TRADES = ImmutableList.<Pair<ItemListing[], Integer>>builder().add(Pair.of(new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(potion(Potions.WATER), 1, 1, 1), new VillagerTrades.EmeraldForItems(Items.WATER_BUCKET, 1, 1, 1, 2), new VillagerTrades.EmeraldForItems(Items.MILK_BUCKET, 1, 1, 1, 2), new VillagerTrades.EmeraldForItems(Items.FERMENTED_SPIDER_EYE, 1, 1, 1, 3), new VillagerTrades.EmeraldForItems(Items.BAKED_POTATO, 4, 1, 1), new VillagerTrades.EmeraldForItems(Items.HAY_BLOCK, 1, 1, 1)}, 2)).add(Pair.of(new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.PACKED_ICE, 1, 1, 6, 1), new VillagerTrades.ItemsForEmeralds(Items.BLUE_ICE, 6, 1, 6, 1), new VillagerTrades.ItemsForEmeralds(Items.GUNPOWDER, 1, 4, 2, 1), new VillagerTrades.ItemsForEmeralds(Items.PODZOL, 3, 3, 6, 1), new VillagerTrades.ItemsForEmeralds(Blocks.ACACIA_LOG, 1, 8, 4, 1), new VillagerTrades.ItemsForEmeralds(Blocks.BIRCH_LOG, 1, 8, 4, 1), new VillagerTrades.ItemsForEmeralds(Blocks.DARK_OAK_LOG, 1, 8, 4, 1), new VillagerTrades.ItemsForEmeralds(Blocks.JUNGLE_LOG, 1, 8, 4, 1), new VillagerTrades.ItemsForEmeralds(Blocks.OAK_LOG, 1, 8, 4, 1), new VillagerTrades.ItemsForEmeralds(Blocks.SPRUCE_LOG, 1, 8, 4, 1), new VillagerTrades.ItemsForEmeralds(Blocks.CHERRY_LOG, 1, 8, 4, 1), new VillagerTrades.EnchantedItemForEmeralds(Items.IRON_PICKAXE, 1, 1, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(potion(Potions.LONG_INVISIBILITY), 5, 1, 1, 1)}, 2)).add(Pair.of(new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.TROPICAL_FISH_BUCKET, 3, 1, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.PUFFERFISH_BUCKET, 3, 1, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.SEA_PICKLE, 2, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.SLIME_BALL, 4, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.GLOWSTONE, 2, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.NAUTILUS_SHELL, 5, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.FERN, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.SUGAR_CANE, 1, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN, 1, 1, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.KELP, 3, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.CACTUS, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.DANDELION, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.POPPY, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BLUE_ORCHID, 1, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.ALLIUM, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.AZURE_BLUET, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.WHITE_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PINK_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.OXEYE_DAISY, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.CORNFLOWER, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LILY_OF_THE_VALLEY, 1, 1, 7, 1), new VillagerTrades.ItemsForEmeralds(Items.WHEAT_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BEETROOT_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.MELON_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.ACACIA_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.BIRCH_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.DARK_OAK_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.JUNGLE_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.OAK_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.SPRUCE_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.CHERRY_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.MANGROVE_PROPAGULE, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.WHITE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BLUE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PINK_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BLACK_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.GREEN_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.GRAY_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LIME_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BROWN_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.CYAN_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BRAIN_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.BUBBLE_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.FIRE_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.HORN_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.TUBE_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.VINE, 1, 3, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.BROWN_MUSHROOM, 1, 3, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_MUSHROOM, 1, 3, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.LILY_PAD, 1, 5, 2, 1), new VillagerTrades.ItemsForEmeralds(Items.SMALL_DRIPLEAF, 1, 2, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.SAND, 1, 8, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_SAND, 1, 4, 6, 1), new VillagerTrades.ItemsForEmeralds(Items.POINTED_DRIPSTONE, 1, 2, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.ROOTED_DIRT, 1, 2, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.MOSS_BLOCK, 1, 2, 5, 1)}, 5)).build();
 
     private static VillagerTrades.ItemListing commonBooks(int i) {
-        return new VillagerTrades.TypeSpecificTrade(ImmutableMap.builder().put(VillagerType.DESERT, new VillagerTrades.EnchantBookForEmeralds(i, Enchantments.FIRE_PROTECTION, Enchantments.THORNS, Enchantments.INFINITY_ARROWS)).put(VillagerType.JUNGLE, new VillagerTrades.EnchantBookForEmeralds(i, Enchantments.FALL_PROTECTION, Enchantments.PROJECTILE_PROTECTION, Enchantments.POWER_ARROWS)).put(VillagerType.PLAINS, new VillagerTrades.EnchantBookForEmeralds(i, Enchantments.PUNCH_ARROWS, Enchantments.SMITE, Enchantments.BANE_OF_ARTHROPODS)).put(VillagerType.SAVANNA, new VillagerTrades.EnchantBookForEmeralds(i, Enchantments.KNOCKBACK, Enchantments.BINDING_CURSE, Enchantments.SWEEPING_EDGE)).put(VillagerType.SNOW, new VillagerTrades.EnchantBookForEmeralds(i, Enchantments.AQUA_AFFINITY, Enchantments.MOB_LOOTING, Enchantments.FROST_WALKER)).put(VillagerType.SWAMP, new VillagerTrades.EnchantBookForEmeralds(i, Enchantments.DEPTH_STRIDER, Enchantments.RESPIRATION, Enchantments.VANISHING_CURSE)).put(VillagerType.TAIGA, new VillagerTrades.EnchantBookForEmeralds(i, Enchantments.BLAST_PROTECTION, Enchantments.FIRE_ASPECT, Enchantments.FLAMING_ARROWS)).build());
+        return new VillagerTrades.TypeSpecificTrade(ImmutableMap.<VillagerType, ItemListing>builder().put(VillagerType.DESERT, new VillagerTrades.EnchantBookForEmeralds(i, Enchantments.FIRE_PROTECTION, Enchantments.THORNS, Enchantments.INFINITY_ARROWS)).put(VillagerType.JUNGLE, new VillagerTrades.EnchantBookForEmeralds(i, Enchantments.FALL_PROTECTION, Enchantments.PROJECTILE_PROTECTION, Enchantments.POWER_ARROWS)).put(VillagerType.PLAINS, new VillagerTrades.EnchantBookForEmeralds(i, Enchantments.PUNCH_ARROWS, Enchantments.SMITE, Enchantments.BANE_OF_ARTHROPODS)).put(VillagerType.SAVANNA, new VillagerTrades.EnchantBookForEmeralds(i, Enchantments.KNOCKBACK, Enchantments.BINDING_CURSE, Enchantments.SWEEPING_EDGE)).put(VillagerType.SNOW, new VillagerTrades.EnchantBookForEmeralds(i, Enchantments.AQUA_AFFINITY, Enchantments.MOB_LOOTING, Enchantments.FROST_WALKER)).put(VillagerType.SWAMP, new VillagerTrades.EnchantBookForEmeralds(i, Enchantments.DEPTH_STRIDER, Enchantments.RESPIRATION, Enchantments.VANISHING_CURSE)).put(VillagerType.TAIGA, new VillagerTrades.EnchantBookForEmeralds(i, Enchantments.BLAST_PROTECTION, Enchantments.FIRE_ASPECT, Enchantments.FLAMING_ARROWS)).build());
     }
 
     private static VillagerTrades.ItemListing specialBooks() {
-        return new VillagerTrades.TypeSpecificTrade(ImmutableMap.builder().put(VillagerType.DESERT, new VillagerTrades.EnchantBookForEmeralds(30, 3, 3, Enchantments.BLOCK_EFFICIENCY)).put(VillagerType.JUNGLE, new VillagerTrades.EnchantBookForEmeralds(30, 2, 2, Enchantments.UNBREAKING)).put(VillagerType.PLAINS, new VillagerTrades.EnchantBookForEmeralds(30, 3, 3, Enchantments.ALL_DAMAGE_PROTECTION)).put(VillagerType.SAVANNA, new VillagerTrades.EnchantBookForEmeralds(30, 3, 3, Enchantments.SHARPNESS)).put(VillagerType.SNOW, new VillagerTrades.EnchantBookForEmeralds(30, Enchantments.SILK_TOUCH)).put(VillagerType.SWAMP, new VillagerTrades.EnchantBookForEmeralds(30, Enchantments.MENDING)).put(VillagerType.TAIGA, new VillagerTrades.EnchantBookForEmeralds(30, 2, 2, Enchantments.BLOCK_FORTUNE)).build());
+        return new VillagerTrades.TypeSpecificTrade(ImmutableMap.<VillagerType, ItemListing>builder().put(VillagerType.DESERT, new VillagerTrades.EnchantBookForEmeralds(30, 3, 3, Enchantments.BLOCK_EFFICIENCY)).put(VillagerType.JUNGLE, new VillagerTrades.EnchantBookForEmeralds(30, 2, 2, Enchantments.UNBREAKING)).put(VillagerType.PLAINS, new VillagerTrades.EnchantBookForEmeralds(30, 3, 3, Enchantments.ALL_DAMAGE_PROTECTION)).put(VillagerType.SAVANNA, new VillagerTrades.EnchantBookForEmeralds(30, 3, 3, Enchantments.SHARPNESS)).put(VillagerType.SNOW, new VillagerTrades.EnchantBookForEmeralds(30, Enchantments.SILK_TOUCH)).put(VillagerType.SWAMP, new VillagerTrades.EnchantBookForEmeralds(30, Enchantments.MENDING)).put(VillagerType.TAIGA, new VillagerTrades.EnchantBookForEmeralds(30, 2, 2, Enchantments.BLOCK_FORTUNE)).build());
     }
 
     private static Int2ObjectMap<VillagerTrades.ItemListing[]> toIntMap(ImmutableMap<Integer, VillagerTrades.ItemListing[]> immutableMap) {
@@ -449,9 +449,7 @@ public class VillagerTrades {
         }
     }
 
-    static record TypeSpecificTrade(Map<VillagerType, VillagerTrades.ItemListing> a) implements VillagerTrades.ItemListing {
-        private final Map<VillagerType, VillagerTrades.ItemListing> trades;
-
+    static record TypeSpecificTrade(Map<VillagerType, VillagerTrades.ItemListing> trades) implements VillagerTrades.ItemListing {
         public static VillagerTrades.TypeSpecificTrade oneTradeInBiomes(VillagerTrades.ItemListing itemListing, VillagerType... villagerTypes) {
             return new VillagerTrades.TypeSpecificTrade(Arrays.stream(villagerTypes).collect(Collectors.toMap((villagerType) -> villagerType, (villagerType) -> itemListing)));
         }
@@ -472,4 +470,4 @@ public class VillagerTrades {
             return this.trades;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index ba60f1efc5995ea2eb3e0c94c5b47e69b2d59516..a0feaab81526d96e02717008cdaf09390e2d13a5 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -128,7 +128,7 @@ public abstract class Player extends LivingEntity {
     public static final float SWIMMING_BB_HEIGHT = 0.6F;
     public static final float DEFAULT_EYE_HEIGHT = 1.62F;
     public static final EntityDimensions STANDING_DIMENSIONS = EntityDimensions.scalable(0.6F, 1.8F);
-    private static final Map<Pose, EntityDimensions> POSES = ImmutableMap.builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
+    private static final Map<Pose, EntityDimensions> POSES = ImmutableMap.<Pose, EntityDimensions>builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
     private static final int FLY_ACHIEVEMENT_SPEED = 25;
     private static final EntityDataAccessor<Float> DATA_PLAYER_ABSORPTION_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.FLOAT);
     private static final EntityDataAccessor<Integer> DATA_SCORE_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.INT);
diff --git a/src/main/java/net/minecraft/world/entity/player/ProfileKeyPair.java b/src/main/java/net/minecraft/world/entity/player/ProfileKeyPair.java
index 1d49a1a3f7ccd5d0a4ec6089d22bdd2d6ee9390b..c7eabd7cdca001a2a5b2c132b04339047a8da50d 100644
--- a/src/main/java/net/minecraft/world/entity/player/ProfileKeyPair.java
+++ b/src/main/java/net/minecraft/world/entity/player/ProfileKeyPair.java
@@ -7,25 +7,10 @@ import java.time.Instant;
 import net.minecraft.util.Crypt;
 import net.minecraft.util.ExtraCodecs;
 
-public record ProfileKeyPair(PrivateKey b, ProfilePublicKey c, Instant d) {
-    private final PrivateKey privateKey;
-    private final ProfilePublicKey publicKey;
-    private final Instant refreshedAfter;
+public record ProfileKeyPair(PrivateKey privateKey, ProfilePublicKey publicKey, Instant refreshedAfter) {
     public static final Codec<ProfileKeyPair> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Crypt.PRIVATE_KEY_CODEC.fieldOf("private_key").forGetter(ProfileKeyPair::privateKey), ProfilePublicKey.TRUSTED_CODEC.fieldOf("public_key").forGetter(ProfileKeyPair::publicKey), ExtraCodecs.INSTANT_ISO8601.fieldOf("refreshed_after").forGetter(ProfileKeyPair::refreshedAfter)).apply(instance, ProfileKeyPair::new));
 
     public boolean dueRefresh() {
         return this.refreshedAfter.isBefore(Instant.now());
     }
-
-    public PrivateKey privateKey() {
-        return this.privateKey;
-    }
-
-    public ProfilePublicKey publicKey() {
-        return this.publicKey;
-    }
-
-    public Instant refreshedAfter() {
-        return this.refreshedAfter;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/player/ProfilePublicKey.java b/src/main/java/net/minecraft/world/entity/player/ProfilePublicKey.java
index 7152da67ac39155102f46db289fcc32fbc3e52a7..c6b408e1d69eac84c0de9dcffeb9bad11e9310ba 100644
--- a/src/main/java/net/minecraft/world/entity/player/ProfilePublicKey.java
+++ b/src/main/java/net/minecraft/world/entity/player/ProfilePublicKey.java
@@ -16,8 +16,7 @@ import net.minecraft.util.Crypt;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.SignatureValidator;
 
-public record ProfilePublicKey(ProfilePublicKey.Data d) {
-    private final ProfilePublicKey.Data data;
+public record ProfilePublicKey(ProfilePublicKey.Data data) {
     public static final Component EXPIRED_PROFILE_PUBLIC_KEY = Component.translatable("multiplayer.disconnect.expired_public_key");
     private static final Component INVALID_SIGNATURE = Component.translatable("multiplayer.disconnect.invalid_public_key_signature.new");
     public static final Duration EXPIRY_GRACE_PERIOD = Duration.ofHours(8L);
@@ -39,15 +38,12 @@ public record ProfilePublicKey(ProfilePublicKey.Data d) {
         return this.data;
     }
 
-    public static record Data(Instant b, PublicKey c, byte[] d) {
-        private final Instant expiresAt;
-        final PublicKey key;
-        private final byte[] keySignature;
+    public static record Data(Instant expiresAt, PublicKey key, byte[] keySignature) {
         private static final int MAX_KEY_SIGNATURE_SIZE = 4096;
         public static final Codec<ProfilePublicKey.Data> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.INSTANT_ISO8601.fieldOf("expires_at").forGetter(ProfilePublicKey.Data::expiresAt), Crypt.PUBLIC_KEY_CODEC.fieldOf("key").forGetter(ProfilePublicKey.Data::key), ExtraCodecs.BASE64_STRING.fieldOf("signature_v2").forGetter(ProfilePublicKey.Data::keySignature)).apply(instance, ProfilePublicKey.Data::new));
 
         public Data(FriendlyByteBuf friendlyByteBuf) {
-            this(friendlyByteBuf.readInstant(), friendlyByteBuf.readPublicKey(), friendlyByteBuf.readByteArray(4096));
+            this(friendlyByteBuf.readInstant(), friendlyByteBuf.readPublicKey(), friendlyByteBuf.readByteArray(MAX_KEY_SIGNATURE_SIZE));
         }
 
         public void write(FriendlyByteBuf friendlyByteBuf) {
@@ -84,18 +80,6 @@ public record ProfilePublicKey(ProfilePublicKey.Data d) {
                 return this.expiresAt.equals(data.expiresAt) && this.key.equals(data.key) && Arrays.equals(this.keySignature, data.keySignature);
             }
         }
-
-        public Instant expiresAt() {
-            return this.expiresAt;
-        }
-
-        public PublicKey key() {
-            return this.key;
-        }
-
-        public byte[] keySignature() {
-            return this.keySignature;
-        }
     }
 
     public static class ValidationException extends ThrowingComponent {
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index 3715d965a58bcf72107a5dceb6950d79c6120bfa..d95047e72ef4321aaa4686a4d2c1d4d6ba3fab76 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -167,7 +167,7 @@ public abstract class AbstractMinecart extends Entity {
                 UnmodifiableIterator d3 = ((ImmutableList)POSE_DISMOUNT_HEIGHTS.get(pose)).iterator();
 
                 while(d3.hasNext()) {
-                    int i2 = d3.next();
+                    int i2 = (int) d3.next();
 
                     for(int[] ints : i) {
                         mutableBlockPos.set(blockPos.getX() + ints[0], blockPos.getY() + i2, blockPos.getZ() + ints[1]);
@@ -184,16 +184,16 @@ public abstract class AbstractMinecart extends Entity {
                 }
             }
 
-            double d2 = this.getBoundingBox().maxY;
-            mutableBlockPos.set((double)blockPos.getX(), d2, (double)blockPos.getZ());
+            double maxY = this.getBoundingBox().maxY;
+            mutableBlockPos.set((double)blockPos.getX(), maxY, (double)blockPos.getZ());
             UnmodifiableIterator var22 = immutableList.iterator();
 
             while(var22.hasNext()) {
                 Pose pose2 = (Pose)var22.next();
                 double d3 = (double)livingEntity.getDimensions(pose2).height;
-                int i3 = Mth.ceil(d2 - (double)mutableBlockPos.getY() + d3);
+                int i3 = Mth.ceil(maxY - (double)mutableBlockPos.getY() + d3);
                 double d4 = DismountHelper.findCeilingFrom(mutableBlockPos, i3, (blockPosx) -> this.level().getBlockState(blockPosx).getCollisionShape(this.level(), blockPosx));
-                if (d2 + d3 <= d4) {
+                if (maxY + d3 <= d4) {
                     livingEntity.setPose(pose2);
                     break;
                 }
@@ -862,4 +862,4 @@ public abstract class AbstractMinecart extends Entity {
         HOPPER,
         COMMAND_BLOCK;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/inventory/DataSlot.java b/src/main/java/net/minecraft/world/inventory/DataSlot.java
index 00799f62cea61878d885ee25341129632cad29a5..4b9dd0554d4002ec5c4995dfbdf22f28c12b74ff 100644
--- a/src/main/java/net/minecraft/world/inventory/DataSlot.java
+++ b/src/main/java/net/minecraft/world/inventory/DataSlot.java
@@ -10,7 +10,7 @@ public abstract class DataSlot {
             }
 
             public void set(int ix) {
-                containerData.set(i, i);
+                containerData.set(i, ix);
             }
         };
     }
@@ -22,7 +22,7 @@ public abstract class DataSlot {
             }
 
             public void set(int ix) {
-                ints[i] = i;
+                ints[i] = ix;
             }
         };
     }
diff --git a/src/main/java/net/minecraft/world/inventory/ItemCombinerMenuSlotDefinition.java b/src/main/java/net/minecraft/world/inventory/ItemCombinerMenuSlotDefinition.java
index 4f74b4bff1340c256ffe790edcc69af334533fc2..8a74d96e8946fc0a5a01e8f95cf3468ac22eb09e 100644
--- a/src/main/java/net/minecraft/world/inventory/ItemCombinerMenuSlotDefinition.java
+++ b/src/main/java/net/minecraft/world/inventory/ItemCombinerMenuSlotDefinition.java
@@ -70,27 +70,7 @@ public class ItemCombinerMenuSlotDefinition {
         }
     }
 
-    public static record SlotDefinition(int a, int b, int c, Predicate<ItemStack> d) {
-        private final int slotIndex;
-        private final int x;
-        private final int y;
-        private final Predicate<ItemStack> mayPlace;
+    public static record SlotDefinition(int slotIndex, int x, int y, Predicate<ItemStack> mayPlace) {
         static final ItemCombinerMenuSlotDefinition.SlotDefinition EMPTY = new ItemCombinerMenuSlotDefinition.SlotDefinition(0, 0, 0, (itemStack) -> true);
-
-        public int slotIndex() {
-            return this.slotIndex;
-        }
-
-        public int x() {
-            return this.x;
-        }
-
-        public int y() {
-            return this.y;
-        }
-
-        public Predicate<ItemStack> mayPlace() {
-            return this.mayPlace;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
index 11886d83dd4ad6d9ee507c3469e9a6269273237a..fc3f7f3b21f214451f63370ced2107d1ec71d999 100644
--- a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
@@ -13,7 +13,7 @@ public abstract class RecipeBookMenu<C extends Container> extends AbstractContai
     }
 
     public void handlePlacement(boolean flag, RecipeHolder<?> recipeHolder, ServerPlayer serverPlayer) {
-        (new ServerPlaceRecipe<>(this)).recipeClicked(serverPlayer, recipeHolder, flag);
+        (new ServerPlaceRecipe<>(this)).recipeClicked(serverPlayer, (RecipeHolder) recipeHolder, flag);
     }
 
     public abstract void fillCraftSlotsStackedContents(StackedContents var1);
@@ -33,4 +33,4 @@ public abstract class RecipeBookMenu<C extends Container> extends AbstractContai
     public abstract RecipeBookType getRecipeBookType();
 
     public abstract boolean shouldMoveToInventory(int var1);
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/item/BrushItem.java b/src/main/java/net/minecraft/world/item/BrushItem.java
index 2e24ef2efce533f0d8f03ce59740b44d3f493a13..81c7f236e0f671e9408e5a3cf6fbf607b90e2247 100644
--- a/src/main/java/net/minecraft/world/item/BrushItem.java
+++ b/src/main/java/net/minecraft/world/item/BrushItem.java
@@ -70,10 +70,10 @@ public class BrushItem extends Item {
                             this.spawnDustParticles(level, blockHitResult, blockState, livingEntity.getViewVector(0.0F), humanoidArm);
                         }
 
-                        Block flag2 = blockState.getBlock();
+                        Block block = blockState.getBlock();
                         SoundEvent soundEvent;
-                        if (flag2 instanceof BrushableBlock) {
-                            BrushableBlock brushableBlock = (BrushableBlock)flag2;
+                        if (block instanceof BrushableBlock) {
+                            BrushableBlock brushableBlock = (BrushableBlock)block;
                             soundEvent = brushableBlock.getBrushSound();
                         } else {
                             soundEvent = SoundEvents.BRUSH_GENERIC;
@@ -122,10 +122,7 @@ public class BrushItem extends Item {
 
     }
 
-    static record DustParticlesDelta(double a, double b, double c) {
-        private final double xd;
-        private final double yd;
-        private final double zd;
+    static record DustParticlesDelta(double xd, double yd, double zd) {
         private static final double ALONG_SIDE_DELTA = 1.0D;
         private static final double OUT_FROM_SIDE_DELTA = 0.1D;
 
@@ -155,17 +152,5 @@ public class BrushItem extends Item {
 
             return var10000;
         }
-
-        public double xd() {
-            return this.xd;
-        }
-
-        public double yd() {
-            return this.yd;
-        }
-
-        public double zd() {
-            return this.zd;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/item/BucketItem.java b/src/main/java/net/minecraft/world/item/BucketItem.java
index 9880548e035dab944c9798213550676a893bd553..85135a0bc97bbeb632552e4080c3cf6a7b04e1bc 100644
--- a/src/main/java/net/minecraft/world/item/BucketItem.java
+++ b/src/main/java/net/minecraft/world/item/BucketItem.java
@@ -53,14 +53,14 @@ public class BucketItem extends Item implements DispensibleContainerItem {
                     Block itemStack2 = blockState.getBlock();
                     if (itemStack2 instanceof BucketPickup) {
                         BucketPickup bucketPickup = (BucketPickup)itemStack2;
-                        ItemStack itemStack2 = bucketPickup.pickupBlock(player, level, blockPos, blockState);
-                        if (!itemStack2.isEmpty()) {
+                        ItemStack itemStack2x = bucketPickup.pickupBlock(player, level, blockPos, blockState);
+                        if (!itemStack2x.isEmpty()) {
                             player.awardStat(Stats.ITEM_USED.get(this));
                             bucketPickup.getPickupSound().ifPresent((soundEvent) -> player.playSound(soundEvent, 1.0F, 1.0F));
                             level.gameEvent(player, GameEvent.FLUID_PICKUP, blockPos);
-                            ItemStack itemStack3 = ItemUtils.createFilledResult(itemStack, player, itemStack2);
+                            ItemStack itemStack3 = ItemUtils.createFilledResult(itemStack, player, itemStack2x);
                             if (!level.isClientSide) {
-                                CriteriaTriggers.FILLED_BUCKET.trigger((ServerPlayer)player, itemStack2);
+                                CriteriaTriggers.FILLED_BUCKET.trigger((ServerPlayer)player, itemStack2x);
                             }
 
                             return InteractionResultHolder.sidedSuccess(itemStack3, level.isClientSide());
@@ -97,16 +97,17 @@ public class BucketItem extends Item implements DispensibleContainerItem {
     }
 
     public boolean emptyContents(@Nullable Player player, Level level, BlockPos blockPos, @Nullable BlockHitResult blockHitResult) {
-        Fluid blockState = this.content;
-        if (!(blockState instanceof FlowingFluid)) {
+        Fluid fluid = this.content;
+        if (!(fluid instanceof FlowingFluid)) {
             return false;
         } else {
             FlowingFluid flowingFluid;
             Block block;
+            BlockState blockState;
             boolean flag;
             boolean var10000;
             label82: {
-                flowingFluid = (FlowingFluid)blockState;
+                flowingFluid = (FlowingFluid)fluid;
                 blockState = level.getBlockState(blockPos);
                 block = blockState.getBlock();
                 flag = blockState.canBeReplaced(this.content);
@@ -170,4 +171,4 @@ public class BucketItem extends Item implements DispensibleContainerItem {
         levelAccessor.playSound(player, blockPos, soundEvent, SoundSource.BLOCKS, 1.0F, 1.0F);
         levelAccessor.gameEvent(player, GameEvent.FLUID_PLACE, blockPos);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/item/CreativeModeTab.java b/src/main/java/net/minecraft/world/item/CreativeModeTab.java
index 2d7e72e009ed76d09d223480d571f0586bd0cc39..0774d3f6a719b75cddb7a449da573575f2d1d498 100644
--- a/src/main/java/net/minecraft/world/item/CreativeModeTab.java
+++ b/src/main/java/net/minecraft/world/item/CreativeModeTab.java
@@ -241,26 +241,10 @@ public class CreativeModeTab {
         }
     }
 
-    public static record ItemDisplayParameters(FeatureFlagSet a, boolean b, HolderLookup.Provider c) {
-        final FeatureFlagSet enabledFeatures;
-        private final boolean hasPermissions;
-        private final HolderLookup.Provider holders;
-
+    public static record ItemDisplayParameters(FeatureFlagSet enabledFeatures, boolean hasPermissions, HolderLookup.Provider holders) {
         public boolean needsUpdate(FeatureFlagSet featureFlagSet, boolean flag, HolderLookup.Provider provider) {
             return !this.enabledFeatures.equals(featureFlagSet) || this.hasPermissions != flag || this.holders != provider;
         }
-
-        public FeatureFlagSet enabledFeatures() {
-            return this.enabledFeatures;
-        }
-
-        public boolean hasPermissions() {
-            return this.hasPermissions;
-        }
-
-        public HolderLookup.Provider holders() {
-            return this.holders;
-        }
     }
 
     public interface Output {
diff --git a/src/main/java/net/minecraft/world/item/CreativeModeTabs.java b/src/main/java/net/minecraft/world/item/CreativeModeTabs.java
index b817be6858f28fd185c188ecbd6f2d5d7050ff24..d229537350cb85a59a9ac4d1d20e8b1f0eed8215 100644
--- a/src/main/java/net/minecraft/world/item/CreativeModeTabs.java
+++ b/src/main/java/net/minecraft/world/item/CreativeModeTabs.java
@@ -53,7 +53,7 @@ public class CreativeModeTabs {
     private static final ResourceKey<CreativeModeTab> SPAWN_EGGS = createKey("spawn_eggs");
     private static final ResourceKey<CreativeModeTab> OP_BLOCKS = createKey("op_blocks");
     private static final ResourceKey<CreativeModeTab> INVENTORY = createKey("inventory");
-    private static final Comparator<Holder<PaintingVariant>> PAINTING_COMPARATOR = Comparator.comparing(Holder::value, Comparator.comparingInt((paintingVariant) -> paintingVariant.getHeight() * paintingVariant.getWidth()).thenComparing(PaintingVariant::getWidth));
+    private static final Comparator<Holder<PaintingVariant>> PAINTING_COMPARATOR = Comparator.comparing(Holder::value, Comparator.<PaintingVariant>comparingInt((paintingVariant) -> paintingVariant.getHeight() * paintingVariant.getWidth()).thenComparing(PaintingVariant::getWidth));
     @Nullable
     private static CreativeModeTab.ItemDisplayParameters CACHED_PARAMETERS;
 
@@ -1635,4 +1635,4 @@ public class CreativeModeTabs {
             return true;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/item/Equipable.java b/src/main/java/net/minecraft/world/item/Equipable.java
index 8c1a7ee166c5dafc5bbf0a9f25697f1bc2360b56..f4d4be913ee27fd95f14a3f81ceb331590ea9633 100644
--- a/src/main/java/net/minecraft/world/item/Equipable.java
+++ b/src/main/java/net/minecraft/world/item/Equipable.java
@@ -50,8 +50,7 @@ public interface Equipable extends Vanishable {
                 BlockItem blockItem = (BlockItem)var3;
                 Block var6 = blockItem.getBlock();
                 if (var6 instanceof Equipable) {
-                    Equipable equipable2 = (Equipable)var6;
-                    return equipable2;
+                    return (Equipable)var6;
                 }
             }
 
diff --git a/src/main/java/net/minecraft/world/item/HoneycombItem.java b/src/main/java/net/minecraft/world/item/HoneycombItem.java
index 7ee825fab5c50a7dd8c2d5b6be84c9db4ebcbeec..91599c6ab96677ba6c911101b1a6f5183ce956bf 100644
--- a/src/main/java/net/minecraft/world/item/HoneycombItem.java
+++ b/src/main/java/net/minecraft/world/item/HoneycombItem.java
@@ -20,7 +20,7 @@ import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.gameevent.GameEvent;
 
 public class HoneycombItem extends Item implements SignApplicator {
-    public static final Supplier<BiMap<Block, Block>> WAXABLES = Suppliers.memoize(() -> ImmutableBiMap.builder().put(Blocks.COPPER_BLOCK, Blocks.WAXED_COPPER_BLOCK).put(Blocks.EXPOSED_COPPER, Blocks.WAXED_EXPOSED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.WAXED_WEATHERED_COPPER).put(Blocks.OXIDIZED_COPPER, Blocks.WAXED_OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.WAXED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WAXED_EXPOSED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.WAXED_WEATHERED_CUT_COPPER).put(Blocks.OXIDIZED_CUT_COPPER, Blocks.WAXED_OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB).put(Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS).put(Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS).build());
+    public static final Supplier<BiMap<Block, Block>> WAXABLES = Suppliers.memoize(() -> ImmutableBiMap.<Block, Block>builder().put(Blocks.COPPER_BLOCK, Blocks.WAXED_COPPER_BLOCK).put(Blocks.EXPOSED_COPPER, Blocks.WAXED_EXPOSED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.WAXED_WEATHERED_COPPER).put(Blocks.OXIDIZED_COPPER, Blocks.WAXED_OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.WAXED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WAXED_EXPOSED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.WAXED_WEATHERED_CUT_COPPER).put(Blocks.OXIDIZED_CUT_COPPER, Blocks.WAXED_OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB).put(Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS).put(Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS).build());
     public static final Supplier<BiMap<Block, Block>> WAX_OFF_BY_BLOCK = Suppliers.memoize(() -> ((BiMap)WAXABLES.get()).inverse());
 
     public HoneycombItem(Item.Properties properties) {
@@ -62,4 +62,4 @@ public class HoneycombItem extends Item implements SignApplicator {
     public boolean canApplyToSign(SignText signText, Player player) {
         return true;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/item/Instrument.java b/src/main/java/net/minecraft/world/item/Instrument.java
index 71c18827e9e52c3420179b1f875c3c21088af4f8..2ea69cd0f3a6e263037585584ae3f14c50f7b97e 100644
--- a/src/main/java/net/minecraft/world/item/Instrument.java
+++ b/src/main/java/net/minecraft/world/item/Instrument.java
@@ -6,21 +6,6 @@ import net.minecraft.core.Holder;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.util.ExtraCodecs;
 
-public record Instrument(Holder<SoundEvent> b, int c, float d) {
-    private final Holder<SoundEvent> soundEvent;
-    private final int useDuration;
-    private final float range;
+public record Instrument(Holder<SoundEvent> soundEvent, int useDuration, float range) {
     public static final Codec<Instrument> CODEC = RecordCodecBuilder.create((instance) -> instance.group(SoundEvent.CODEC.fieldOf("sound_event").forGetter(Instrument::soundEvent), ExtraCodecs.POSITIVE_INT.fieldOf("use_duration").forGetter(Instrument::useDuration), ExtraCodecs.POSITIVE_FLOAT.fieldOf("range").forGetter(Instrument::range)).apply(instance, Instrument::new));
-
-    public Holder<SoundEvent> soundEvent() {
-        return this.soundEvent;
-    }
-
-    public int useDuration() {
-        return this.useDuration;
-    }
-
-    public float range() {
-        return this.range;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/item/TooltipFlag.java b/src/main/java/net/minecraft/world/item/TooltipFlag.java
index 209dbe44e0ec6d64d7a7484abd27c5a8d8ed6b1f..43a6dcf34348f4317bca346ce07af7803791fc6f 100644
--- a/src/main/java/net/minecraft/world/item/TooltipFlag.java
+++ b/src/main/java/net/minecraft/world/item/TooltipFlag.java
@@ -8,10 +8,7 @@ public interface TooltipFlag {
 
     boolean isCreative();
 
-    public static record Default(boolean c, boolean d) implements TooltipFlag {
-        private final boolean advanced;
-        private final boolean creative;
-
+    public static record Default(boolean advanced, boolean creative) implements TooltipFlag {
         public boolean isAdvanced() {
             return this.advanced;
         }
@@ -23,13 +20,5 @@ public interface TooltipFlag {
         public TooltipFlag.Default asCreative() {
             return new TooltipFlag.Default(this.advanced, true);
         }
-
-        public boolean advanced() {
-            return this.advanced;
-        }
-
-        public boolean creative() {
-            return this.creative;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/item/armortrim/TrimMaterial.java b/src/main/java/net/minecraft/world/item/armortrim/TrimMaterial.java
index 923c390154ce634ce8d9fdf80de0ea6d9dd2fd79..4a217497c3d1946a9988e5a2260eb62ea194e3bc 100644
--- a/src/main/java/net/minecraft/world/item/armortrim/TrimMaterial.java
+++ b/src/main/java/net/minecraft/world/item/armortrim/TrimMaterial.java
@@ -13,36 +13,11 @@ import net.minecraft.util.ExtraCodecs;
 import net.minecraft.world.item.ArmorMaterials;
 import net.minecraft.world.item.Item;
 
-public record TrimMaterial(String c, Holder<Item> d, float e, Map<ArmorMaterials, String> f, Component g) {
-    private final String assetName;
-    private final Holder<Item> ingredient;
-    private final float itemModelIndex;
-    private final Map<ArmorMaterials, String> overrideArmorMaterials;
-    private final Component description;
+public record TrimMaterial(String assetName, Holder<Item> ingredient, float itemModelIndex, Map<ArmorMaterials, String> overrideArmorMaterials, Component description) {
     public static final Codec<TrimMaterial> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.RESOURCE_PATH_CODEC.fieldOf("asset_name").forGetter(TrimMaterial::assetName), RegistryFixedCodec.create(Registries.ITEM).fieldOf("ingredient").forGetter(TrimMaterial::ingredient), Codec.FLOAT.fieldOf("item_model_index").forGetter(TrimMaterial::itemModelIndex), Codec.unboundedMap(ArmorMaterials.CODEC, Codec.STRING).optionalFieldOf("override_armor_materials", Map.of()).forGetter(TrimMaterial::overrideArmorMaterials), ExtraCodecs.COMPONENT.fieldOf("description").forGetter(TrimMaterial::description)).apply(instance, TrimMaterial::new));
     public static final Codec<Holder<TrimMaterial>> CODEC = RegistryFileCodec.create(Registries.TRIM_MATERIAL, DIRECT_CODEC);
 
     public static TrimMaterial create(String s, Item item, float f, Component component, Map<ArmorMaterials, String> map) {
         return new TrimMaterial(s, BuiltInRegistries.ITEM.wrapAsHolder(item), f, map, component);
     }
-
-    public String assetName() {
-        return this.assetName;
-    }
-
-    public Holder<Item> ingredient() {
-        return this.ingredient;
-    }
-
-    public float itemModelIndex() {
-        return this.itemModelIndex;
-    }
-
-    public Map<ArmorMaterials, String> overrideArmorMaterials() {
-        return this.overrideArmorMaterials;
-    }
-
-    public Component description() {
-        return this.description;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/item/armortrim/TrimPattern.java b/src/main/java/net/minecraft/world/item/armortrim/TrimPattern.java
index b4af79b52091b9f8143fa0a14222d871bc4fbde2..5db5a541c75ab3b51ce93d3d68319640ad676986 100644
--- a/src/main/java/net/minecraft/world/item/armortrim/TrimPattern.java
+++ b/src/main/java/net/minecraft/world/item/armortrim/TrimPattern.java
@@ -11,31 +11,11 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.world.item.Item;
 
-public record TrimPattern(ResourceLocation c, Holder<Item> d, Component e, boolean f) {
-    private final ResourceLocation assetId;
-    private final Holder<Item> templateItem;
-    private final Component description;
-    private final boolean decal;
+public record TrimPattern(ResourceLocation assetId, Holder<Item> templateItem, Component description, boolean decal) {
     public static final Codec<TrimPattern> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("asset_id").forGetter(TrimPattern::assetId), RegistryFixedCodec.create(Registries.ITEM).fieldOf("template_item").forGetter(TrimPattern::templateItem), ExtraCodecs.COMPONENT.fieldOf("description").forGetter(TrimPattern::description), Codec.BOOL.fieldOf("decal").orElse(false).forGetter(TrimPattern::decal)).apply(instance, TrimPattern::new));
     public static final Codec<Holder<TrimPattern>> CODEC = RegistryFileCodec.create(Registries.TRIM_PATTERN, DIRECT_CODEC);
 
     public Component copyWithStyle(Holder<TrimMaterial> holder) {
         return this.description.copy().withStyle(((TrimMaterial)holder.value()).description().getStyle());
     }
-
-    public ResourceLocation assetId() {
-        return this.assetId;
-    }
-
-    public Holder<Item> templateItem() {
-        return this.templateItem;
-    }
-
-    public Component description() {
-        return this.description;
-    }
-
-    public boolean decal() {
-        return this.decal;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/item/crafting/Ingredient.java b/src/main/java/net/minecraft/world/item/crafting/Ingredient.java
index bc8251623b30eccff497d1938044c23cff55c5f9..74092db465b5d0e7e03cc6337ef14de39370df11 100644
--- a/src/main/java/net/minecraft/world/item/crafting/Ingredient.java
+++ b/src/main/java/net/minecraft/world/item/crafting/Ingredient.java
@@ -148,8 +148,7 @@ public final class Ingredient implements Predicate<ItemStack> {
         });
     }
 
-    static record ItemValue(ItemStack b) implements Ingredient.Value {
-        private final ItemStack item;
+    static record ItemValue(ItemStack item) implements Ingredient.Value {
         static final Codec<Ingredient.ItemValue> CODEC = RecordCodecBuilder.create((instance) -> instance.group(CraftingRecipeCodecs.ITEMSTACK_NONAIR_CODEC.fieldOf("item").forGetter((itemValue) -> itemValue.item)).apply(instance, Ingredient.ItemValue::new));
 
         public boolean equals(Object object) {
@@ -164,14 +163,9 @@ public final class Ingredient implements Predicate<ItemStack> {
         public Collection<ItemStack> getItems() {
             return Collections.singleton(this.item);
         }
-
-        public ItemStack item() {
-            return this.item;
-        }
     }
 
-    static record TagValue(TagKey<Item> b) implements Ingredient.Value {
-        private final TagKey<Item> tag;
+    static record TagValue(TagKey<Item> tag) implements Ingredient.Value {
         static final Codec<Ingredient.TagValue> CODEC = RecordCodecBuilder.create((instance) -> instance.group(TagKey.codec(Registries.ITEM).fieldOf("tag").forGetter((tagValue) -> tagValue.tag)).apply(instance, Ingredient.TagValue::new));
 
         public boolean equals(Object object) {
@@ -192,10 +186,6 @@ public final class Ingredient implements Predicate<ItemStack> {
 
             return list;
         }
-
-        public TagKey<Item> tag() {
-            return this.tag;
-        }
     }
 
     interface Value {
@@ -213,4 +203,4 @@ public final class Ingredient implements Predicate<ItemStack> {
 
         Collection<ItemStack> getItems();
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeHolder.java b/src/main/java/net/minecraft/world/item/crafting/RecipeHolder.java
index 41713ee799bec1f4d4d8aa84bef187b36a353195..52a2f3051b6d0a0d99dfe612f3653a92e7105739 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeHolder.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeHolder.java
@@ -2,10 +2,7 @@ package net.minecraft.world.item.crafting;
 
 import net.minecraft.resources.ResourceLocation;
 
-public record RecipeHolder<T extends Recipe<?>>(ResourceLocation a, T b) {
-    private final ResourceLocation id;
-    private final T value;
-
+public record RecipeHolder<T extends Recipe<?>>(ResourceLocation id, T value) {
     public boolean equals(Object object) {
         if (this == object) {
             return true;
@@ -28,12 +25,4 @@ public record RecipeHolder<T extends Recipe<?>>(ResourceLocation a, T b) {
     public String toString() {
         return this.id.toString();
     }
-
-    public ResourceLocation id() {
-        return this.id;
-    }
-
-    public T value() {
-        return this.value;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index f48ad1cec631db33287fa9c90908bc4d139a3c0e..98667c82f0c940cef127577431f9d5e42c960499 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -98,7 +98,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
     }
 
     private <C extends Container, T extends Recipe<C>> Map<ResourceLocation, RecipeHolder<T>> byType(RecipeType<T> recipeType) {
-        return this.recipes.getOrDefault(recipeType, Collections.emptyMap());
+        return (Map) this.recipes.getOrDefault(recipeType, Collections.emptyMap());
     }
 
     public <C extends Container, T extends Recipe<C>> NonNullList<ItemStack> getRemainingItemsFor(RecipeType<T> recipeType, C container, Level level) {
@@ -174,4 +174,4 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
     public interface CachedCheck<C extends Container, T extends Recipe<C>> {
         Optional<RecipeHolder<T>> getRecipeFor(C var1, Level var2);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
index 952f312cb344329a7797819bc1d0c6a447f7091b..fe402556f65b0894b369a0abe800949b12986dc0 100644
--- a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
@@ -271,38 +271,15 @@ public class ShapedRecipe implements CraftingRecipe {
             friendlyByteBuf.writeBoolean(shapedRecipe.showNotification);
         }
 
-        static record RawShapedRecipe(String b, CraftingBookCategory c, Map<String, Ingredient> d, List<String> e, ItemStack f, boolean g) {
-            final String group;
-            final CraftingBookCategory category;
-            final Map<String, Ingredient> key;
-            final List<String> pattern;
-            final ItemStack result;
-            final boolean showNotification;
+        static record RawShapedRecipe(
+                String group,
+                CraftingBookCategory category,
+                Map<String, Ingredient> key,
+                List<String> pattern,
+                ItemStack result,
+                boolean showNotification
+        ) {
             public static final Codec<ShapedRecipe.Serializer.RawShapedRecipe> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(Codec.STRING, "group", "").forGetter((rawShapedRecipe) -> rawShapedRecipe.group), CraftingBookCategory.CODEC.fieldOf("category").orElse(CraftingBookCategory.MISC).forGetter((rawShapedRecipe) -> rawShapedRecipe.category), ExtraCodecs.strictUnboundedMap(ShapedRecipe.Serializer.SINGLE_CHARACTER_STRING_CODEC, Ingredient.CODEC_NONEMPTY).fieldOf("key").forGetter((rawShapedRecipe) -> rawShapedRecipe.key), ShapedRecipe.Serializer.PATTERN_CODEC.fieldOf("pattern").forGetter((rawShapedRecipe) -> rawShapedRecipe.pattern), CraftingRecipeCodecs.ITEMSTACK_OBJECT_CODEC.fieldOf("result").forGetter((rawShapedRecipe) -> rawShapedRecipe.result), ExtraCodecs.strictOptionalField(Codec.BOOL, "show_notification", true).forGetter((rawShapedRecipe) -> rawShapedRecipe.showNotification)).apply(instance, ShapedRecipe.Serializer.RawShapedRecipe::new));
-
-            public String group() {
-                return this.group;
-            }
-
-            public CraftingBookCategory category() {
-                return this.category;
-            }
-
-            public Map<String, Ingredient> key() {
-                return this.key;
-            }
-
-            public List<String> pattern() {
-                return this.pattern;
-            }
-
-            public ItemStack result() {
-                return this.result;
-            }
-
-            public boolean showNotification() {
-                return this.showNotification;
-            }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/BlockEventData.java b/src/main/java/net/minecraft/world/level/BlockEventData.java
index 37d90acbd7b9fd7d4452583854c5e47db99fde67..f96b25aaac3a0b4d6666566d9a1a90552bc5096d 100644
--- a/src/main/java/net/minecraft/world/level/BlockEventData.java
+++ b/src/main/java/net/minecraft/world/level/BlockEventData.java
@@ -3,25 +3,4 @@ package net.minecraft.world.level;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.block.Block;
 
-public record BlockEventData(BlockPos a, Block b, int c, int d) {
-    private final BlockPos pos;
-    private final Block block;
-    private final int paramA;
-    private final int paramB;
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public Block block() {
-        return this.block;
-    }
-
-    public int paramA() {
-        return this.paramA;
-    }
-
-    public int paramB() {
-        return this.paramB;
-    }
-}
\ No newline at end of file
+public record BlockEventData(BlockPos pos, Block block, int paramA, int paramB) {}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/BlockGetter.java b/src/main/java/net/minecraft/world/level/BlockGetter.java
index ae9e6e6475d0b5a08306beea53c6c2280baa1361..3ee54cec284c4e5f44d2e9d04a8d93ca80247c46 100644
--- a/src/main/java/net/minecraft/world/level/BlockGetter.java
+++ b/src/main/java/net/minecraft/world/level/BlockGetter.java
@@ -24,7 +24,7 @@ public interface BlockGetter extends LevelHeightAccessor {
 
     default <T extends BlockEntity> Optional<T> getBlockEntity(BlockPos blockPos, BlockEntityType<T> blockEntityType) {
         BlockEntity blockEntity = this.getBlockEntity(blockPos);
-        return blockEntity != null && blockEntity.getType() == blockEntityType ? Optional.of(blockEntity) : Optional.empty();
+        return blockEntity != null && blockEntity.getType() == blockEntityType ? Optional.of((T) blockEntity) : Optional.empty();
     }
 
     BlockState getBlockState(BlockPos var1);
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 7530112b601814b3dde58fe2e0324c4a6626dd6e..191a47cb7f67511a2298685363ae8097627f1d1a 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -248,16 +248,14 @@ public class Explosion {
                     BlockPos blockPos2 = blockPos.immutable();
                     this.level.getProfiler().push("explosion_blocks");
                     if (block.dropFromExplosion(this)) {
-                        Level blockEntity = this.level;
-                        if (blockEntity instanceof ServerLevel) {
-                            ServerLevel serverLevel = (ServerLevel)blockEntity;
-                            BlockEntity blockEntity = blockState.hasBlockEntity() ? this.level.getBlockEntity(blockPos) : null;
-                            LootParams.Builder builder = (new LootParams.Builder(serverLevel)).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(blockPos)).withParameter(LootContextParams.TOOL, ItemStack.EMPTY).withOptionalParameter(LootContextParams.BLOCK_ENTITY, blockEntity).withOptionalParameter(LootContextParams.THIS_ENTITY, this.source);
+                        if (this.level instanceof ServerLevel serverLevelIn) {
+                            BlockEntity blockEntityIn = blockState.hasBlockEntity() ? this.level.getBlockEntity(blockPos) : null;
+                            LootParams.Builder builder = (new LootParams.Builder(serverLevelIn)).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(blockPos)).withParameter(LootContextParams.TOOL, ItemStack.EMPTY).withOptionalParameter(LootContextParams.BLOCK_ENTITY, blockEntityIn).withOptionalParameter(LootContextParams.THIS_ENTITY, this.source);
                             if (this.blockInteraction == Explosion.BlockInteraction.DESTROY_WITH_DECAY) {
                                 builder.withParameter(LootContextParams.EXPLOSION_RADIUS, this.radius);
                             }
 
-                            blockState.spawnAfterBreak(serverLevel, blockPos, ItemStack.EMPTY, flag3);
+                            blockState.spawnAfterBreak(serverLevelIn, blockPos, ItemStack.EMPTY, flag3);
                             blockState.getDrops(builder).forEach((itemStack) -> addBlockDrops(objectArrayList, itemStack, blockPos2));
                         }
                     }
@@ -271,7 +269,7 @@ public class Explosion {
             var5 = objectArrayList.iterator();
 
             while(var5.hasNext()) {
-                Pair<ItemStack, BlockPos> pair = var5.next();
+                Pair<ItemStack, BlockPos> pair = (Pair<ItemStack, BlockPos>) var5.next();
                 Block.popResource(this.level, (BlockPos)pair.getSecond(), (ItemStack)pair.getFirst());
             }
         }
@@ -367,4 +365,4 @@ public class Explosion {
         DESTROY,
         DESTROY_WITH_DECAY;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/GameRules.java b/src/main/java/net/minecraft/world/level/GameRules.java
index 79fe043e120d4773ca3eb72569ad359e9eaeb50d..36faaaf2b15f01481ac0bb7fcc46988c01994c8f 100644
--- a/src/main/java/net/minecraft/world/level/GameRules.java
+++ b/src/main/java/net/minecraft/world/level/GameRules.java
@@ -140,8 +140,8 @@ public class GameRules {
     }
 
     private static <T extends GameRules.Value<T>> void callVisitorCap(GameRules.GameRuleTypeVisitor gameRuleTypeVisitor, GameRules.Key<?> key, GameRules.Type<?> type) {
-        gameRuleTypeVisitor.visit(key, type);
-        type.callVisitor(gameRuleTypeVisitor, key);
+        gameRuleTypeVisitor.visit((Key) key, type);
+        type.callVisitor(gameRuleTypeVisitor, (Key) key);
     }
 
     public void assignFrom(GameRules gameRules, @Nullable MinecraftServer minecraftServer) {
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index 6ff899e36db43839c973fa08730f6c660ea6f500..00adcf02dd3e245c8a7546d7dd1ae7d94b3b42d6 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -84,13 +84,14 @@ public final class NaturalSpawner {
             MobCategory mobCategory = entity.getType().getCategory();
             if (mobCategory != MobCategory.MISC) {
                 BlockPos blockPos = entity.blockPosition();
+                Entity finalEntity = entity;
                 chunkGetter.query(ChunkPos.asLong(blockPos), (levelChunk) -> {
-                    MobSpawnSettings.MobSpawnCost mobSpawnCost = getRoughBiome(blockPos, levelChunk).getMobSettings().getMobSpawnCost(entity.getType());
+                    MobSpawnSettings.MobSpawnCost mobSpawnCost = getRoughBiome(blockPos, levelChunk).getMobSettings().getMobSpawnCost(finalEntity.getType());
                     if (mobSpawnCost != null) {
-                        potentialCalculator.addCharge(entity.blockPosition(), mobSpawnCost.charge());
+                        potentialCalculator.addCharge(finalEntity.blockPosition(), mobSpawnCost.charge());
                     }
 
-                    if (entity instanceof Mob) {
+                    if (finalEntity instanceof Mob) {
                         localMobCapCalculator.addMob(levelChunk.getPos(), mobCategory);
                     }
 
diff --git a/src/main/java/net/minecraft/world/level/SpawnData.java b/src/main/java/net/minecraft/world/level/SpawnData.java
index 74b721d4ff2af153acd653fe526f21376153ac82..6ed244452dac3a0d40484109e052d242d1bc59c4 100644
--- a/src/main/java/net/minecraft/world/level/SpawnData.java
+++ b/src/main/java/net/minecraft/world/level/SpawnData.java
@@ -11,9 +11,7 @@ import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.InclusiveRange;
 import net.minecraft.util.random.SimpleWeightedRandomList;
 
-public record SpawnData(CompoundTag d, Optional<SpawnData.CustomSpawnRules> e) {
-    private final CompoundTag entityToSpawn;
-    private final Optional<SpawnData.CustomSpawnRules> customSpawnRules;
+public record SpawnData(CompoundTag entityToSpawn, Optional<SpawnData.CustomSpawnRules> customSpawnRules) {
     public static final String ENTITY_TAG = "entity";
     public static final Codec<SpawnData> CODEC = RecordCodecBuilder.create((instance) -> instance.group(CompoundTag.CODEC.fieldOf("entity").forGetter((spawnData) -> spawnData.entityToSpawn), SpawnData.CustomSpawnRules.CODEC.optionalFieldOf("custom_spawn_rules").forGetter((spawnData) -> spawnData.customSpawnRules)).apply(instance, SpawnData::new));
     public static final Codec<SimpleWeightedRandomList<SpawnData>> LIST_CODEC = SimpleWeightedRandomList.wrappedCodecAllowingEmpty(CODEC);
@@ -22,18 +20,16 @@ public record SpawnData(CompoundTag d, Optional<SpawnData.CustomSpawnRules> e) {
         this(new CompoundTag(), Optional.empty());
     }
 
-    public SpawnData(CompoundTag compoundTag, Optional<SpawnData.CustomSpawnRules> optional) {
-        if (compoundTag.contains("id")) {
-            ResourceLocation resourceLocation = ResourceLocation.tryParse(compoundTag.getString("id"));
+    public SpawnData {
+        if (entityToSpawn.contains("id")) {
+            ResourceLocation resourceLocation = ResourceLocation.tryParse(entityToSpawn.getString("id"));
             if (resourceLocation != null) {
-                compoundTag.putString("id", resourceLocation.toString());
+                entityToSpawn.putString("id", resourceLocation.toString());
             } else {
-                compoundTag.remove("id");
+                entityToSpawn.remove("id");
             }
         }
 
-        this.entityToSpawn = compoundTag;
-        this.customSpawnRules = optional;
     }
 
     public CompoundTag getEntityToSpawn() {
@@ -44,17 +40,7 @@ public record SpawnData(CompoundTag d, Optional<SpawnData.CustomSpawnRules> e) {
         return this.customSpawnRules;
     }
 
-    public CompoundTag entityToSpawn() {
-        return this.entityToSpawn;
-    }
-
-    public Optional<SpawnData.CustomSpawnRules> customSpawnRules() {
-        return this.customSpawnRules;
-    }
-
-    public static record CustomSpawnRules(InclusiveRange<Integer> b, InclusiveRange<Integer> c) {
-        private final InclusiveRange<Integer> blockLightLimit;
-        private final InclusiveRange<Integer> skyLightLimit;
+    public static record CustomSpawnRules(InclusiveRange<Integer> blockLightLimit, InclusiveRange<Integer> skyLightLimit) {
         private static final InclusiveRange<Integer> LIGHT_RANGE = new InclusiveRange(0, 15);
         public static final Codec<SpawnData.CustomSpawnRules> CODEC = RecordCodecBuilder.create((instance) -> instance.group(lightLimit("block_light_limit").forGetter((customSpawnRules) -> customSpawnRules.blockLightLimit), lightLimit("sky_light_limit").forGetter((customSpawnRules) -> customSpawnRules.skyLightLimit)).apply(instance, SpawnData.CustomSpawnRules::new));
 
@@ -65,13 +51,5 @@ public record SpawnData(CompoundTag d, Optional<SpawnData.CustomSpawnRules> e) {
         private static MapCodec<InclusiveRange<Integer>> lightLimit(String s) {
             return ExtraCodecs.validate(InclusiveRange.INT.optionalFieldOf(s, LIGHT_RANGE), SpawnData.CustomSpawnRules::checkLightBoundaries);
         }
-
-        public InclusiveRange<Integer> blockLightLimit() {
-            return this.blockLightLimit;
-        }
-
-        public InclusiveRange<Integer> skyLightLimit() {
-            return this.skyLightLimit;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/WorldDataConfiguration.java b/src/main/java/net/minecraft/world/level/WorldDataConfiguration.java
index c86f4067e558618660c654e4e228ba3c4dcc9dbd..369eb62f85efd2b84698c83b1350d3510131ae88 100644
--- a/src/main/java/net/minecraft/world/level/WorldDataConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/WorldDataConfiguration.java
@@ -5,22 +5,12 @@ import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.world.flag.FeatureFlagSet;
 import net.minecraft.world.flag.FeatureFlags;
 
-public record WorldDataConfiguration(DataPackConfig d, FeatureFlagSet e) {
-    private final DataPackConfig dataPacks;
-    private final FeatureFlagSet enabledFeatures;
+public record WorldDataConfiguration(DataPackConfig dataPacks, FeatureFlagSet enabledFeatures) {
     public static final String ENABLED_FEATURES_ID = "enabled_features";
-    public static final Codec<WorldDataConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(DataPackConfig.CODEC.optionalFieldOf("DataPacks", DataPackConfig.DEFAULT).forGetter(WorldDataConfiguration::dataPacks), FeatureFlags.CODEC.optionalFieldOf("enabled_features", FeatureFlags.DEFAULT_FLAGS).forGetter(WorldDataConfiguration::enabledFeatures)).apply(instance, WorldDataConfiguration::new));
+    public static final Codec<WorldDataConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(DataPackConfig.CODEC.optionalFieldOf("DataPacks", DataPackConfig.DEFAULT).forGetter(WorldDataConfiguration::dataPacks), FeatureFlags.CODEC.optionalFieldOf(ENABLED_FEATURES_ID, FeatureFlags.DEFAULT_FLAGS).forGetter(WorldDataConfiguration::enabledFeatures)).apply(instance, WorldDataConfiguration::new));
     public static final WorldDataConfiguration DEFAULT = new WorldDataConfiguration(DataPackConfig.DEFAULT, FeatureFlags.DEFAULT_FLAGS);
 
     public WorldDataConfiguration expandFeatures(FeatureFlagSet featureFlagSet) {
         return new WorldDataConfiguration(this.dataPacks, this.enabledFeatures.join(featureFlagSet));
     }
-
-    public DataPackConfig dataPacks() {
-        return this.dataPacks;
-    }
-
-    public FeatureFlagSet enabledFeatures() {
-        return this.enabledFeatures;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/biome/Biome.java b/src/main/java/net/minecraft/world/level/biome/Biome.java
index 7f69b096681ab438f4f5e170a076f245ca3268cd..3111cec4b7f9b2ce5634cd83c2f04b29b25368a4 100644
--- a/src/main/java/net/minecraft/world/level/biome/Biome.java
+++ b/src/main/java/net/minecraft/world/level/biome/Biome.java
@@ -294,28 +294,8 @@ public final class Biome {
         }
     }
 
-    static record ClimateSettings(boolean b, float c, Biome.TemperatureModifier d, float e) {
-        private final boolean hasPrecipitation;
-        final float temperature;
-        final Biome.TemperatureModifier temperatureModifier;
-        final float downfall;
+    static record ClimateSettings(boolean hasPrecipitation, float temperature, Biome.TemperatureModifier temperatureModifier, float downfall) {
         public static final MapCodec<Biome.ClimateSettings> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.BOOL.fieldOf("has_precipitation").forGetter((climateSettings) -> climateSettings.hasPrecipitation), Codec.FLOAT.fieldOf("temperature").forGetter((climateSettings) -> climateSettings.temperature), Biome.TemperatureModifier.CODEC.optionalFieldOf("temperature_modifier", Biome.TemperatureModifier.NONE).forGetter((climateSettings) -> climateSettings.temperatureModifier), Codec.FLOAT.fieldOf("downfall").forGetter((climateSettings) -> climateSettings.downfall)).apply(instance, Biome.ClimateSettings::new));
-
-        public boolean hasPrecipitation() {
-            return this.hasPrecipitation;
-        }
-
-        public float temperature() {
-            return this.temperature;
-        }
-
-        public Biome.TemperatureModifier temperatureModifier() {
-            return this.temperatureModifier;
-        }
-
-        public float downfall() {
-            return this.downfall;
-        }
     }
 
     public static enum Precipitation {
diff --git a/src/main/java/net/minecraft/world/level/biome/Climate.java b/src/main/java/net/minecraft/world/level/biome/Climate.java
index 927e150f2a545db3c296340616ee1526abd9e9c4..2bb0f1e4e6f2fca0de276bc2ef1922e2c7144235 100644
--- a/src/main/java/net/minecraft/world/level/biome/Climate.java
+++ b/src/main/java/net/minecraft/world/level/biome/Climate.java
@@ -62,9 +62,7 @@ public class Climate {
         long distance(Climate.RTree.Node<T> var1, long[] var2);
     }
 
-    public static record Parameter(long b, long c) {
-        private final long min;
-        private final long max;
+    public static record Parameter(long min, long max) {
         public static final Codec<Climate.Parameter> CODEC = ExtraCodecs.intervalCodec(Codec.floatRange(-2.0F, 2.0F), "min", "max", (f, f2) -> f.compareTo(f2) > 0 ? DataResult.error(() -> "Cannon construct interval, min > max (" + f + " > " + f2 + ")") : DataResult.success(new Climate.Parameter(Climate.quantizeCoord(f), Climate.quantizeCoord(f2))), (parameter) -> Climate.unquantizeCoord(parameter.min()), (parameter) -> Climate.unquantizeCoord(parameter.max()));
 
         public static Climate.Parameter point(float f) {
@@ -106,14 +104,6 @@ public class Climate {
         public Climate.Parameter span(@Nullable Climate.Parameter parameter) {
             return parameter == null ? this : new Climate.Parameter(Math.min(this.min, parameter.min()), Math.max(this.max, parameter.max()));
         }
-
-        public long min() {
-            return this.min;
-        }
-
-        public long max() {
-            return this.max;
-        }
     }
 
     public static class ParameterList<T> {
@@ -121,7 +111,7 @@ public class Climate {
         private final Climate.RTree<T> index;
 
         public static <T> Codec<Climate.ParameterList<T>> codec(MapCodec<T> mapCodec) {
-            return ExtraCodecs.nonEmptyList(RecordCodecBuilder.create((instance) -> instance.group(Climate.ParameterPoint.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), mapCodec.forGetter(Pair::getSecond)).apply(instance, Pair::of)).listOf()).xmap(Climate.ParameterList::new, Climate.ParameterList::values);
+            return ExtraCodecs.nonEmptyList(RecordCodecBuilder.<Pair<Climate.ParameterPoint, T>>create((instance) -> instance.group(Climate.ParameterPoint.CODEC.fieldOf("parameters").forGetter(Pair::getFirst), mapCodec.<Pair<Climate.ParameterPoint, T>>forGetter(Pair::getSecond)).apply(instance, Pair::of)).listOf()).xmap(Climate.ParameterList::new, Climate.ParameterList::values);
         }
 
         public ParameterList(List<Pair<Climate.ParameterPoint, T>> list) {
@@ -165,14 +155,7 @@ public class Climate {
         }
     }
 
-    public static record ParameterPoint(Climate.Parameter b, Climate.Parameter c, Climate.Parameter d, Climate.Parameter e, Climate.Parameter f, Climate.Parameter g, long h) {
-        private final Climate.Parameter temperature;
-        private final Climate.Parameter humidity;
-        private final Climate.Parameter continentalness;
-        private final Climate.Parameter erosion;
-        private final Climate.Parameter depth;
-        private final Climate.Parameter weirdness;
-        private final long offset;
+    public static record ParameterPoint(Climate.Parameter temperature, Climate.Parameter humidity, Climate.Parameter continentalness, Climate.Parameter erosion, Climate.Parameter depth, Climate.Parameter weirdness, long offset) {
         public static final Codec<Climate.ParameterPoint> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Climate.Parameter.CODEC.fieldOf("temperature").forGetter((parameterPoint) -> parameterPoint.temperature), Climate.Parameter.CODEC.fieldOf("humidity").forGetter((parameterPoint) -> parameterPoint.humidity), Climate.Parameter.CODEC.fieldOf("continentalness").forGetter((parameterPoint) -> parameterPoint.continentalness), Climate.Parameter.CODEC.fieldOf("erosion").forGetter((parameterPoint) -> parameterPoint.erosion), Climate.Parameter.CODEC.fieldOf("depth").forGetter((parameterPoint) -> parameterPoint.depth), Climate.Parameter.CODEC.fieldOf("weirdness").forGetter((parameterPoint) -> parameterPoint.weirdness), Codec.floatRange(0.0F, 1.0F).fieldOf("offset").xmap(Climate::quantizeCoord, Climate::unquantizeCoord).forGetter((parameterPoint) -> parameterPoint.offset)).apply(instance, Climate.ParameterPoint::new));
 
         long fitness(Climate.TargetPoint targetPoint) {
@@ -182,34 +165,6 @@ public class Climate {
         protected List<Climate.Parameter> parameterSpace() {
             return ImmutableList.of(this.temperature, this.humidity, this.continentalness, this.erosion, this.depth, this.weirdness, new Climate.Parameter(this.offset, this.offset));
         }
-
-        public Climate.Parameter temperature() {
-            return this.temperature;
-        }
-
-        public Climate.Parameter humidity() {
-            return this.humidity;
-        }
-
-        public Climate.Parameter continentalness() {
-            return this.continentalness;
-        }
-
-        public Climate.Parameter erosion() {
-            return this.erosion;
-        }
-
-        public Climate.Parameter depth() {
-            return this.depth;
-        }
-
-        public Climate.Parameter weirdness() {
-            return this.weirdness;
-        }
-
-        public long offset() {
-            return this.offset;
-        }
     }
 
     protected static final class RTree<T> {
@@ -424,15 +379,7 @@ public class Climate {
         }
     }
 
-    public static record Sampler(DensityFunction a, DensityFunction b, DensityFunction c, DensityFunction d, DensityFunction e, DensityFunction f, List<Climate.ParameterPoint> g) {
-        private final DensityFunction temperature;
-        private final DensityFunction humidity;
-        private final DensityFunction continentalness;
-        private final DensityFunction erosion;
-        private final DensityFunction depth;
-        private final DensityFunction weirdness;
-        private final List<Climate.ParameterPoint> spawnTarget;
-
+    public static record Sampler(DensityFunction temperature, DensityFunction humidity, DensityFunction continentalness, DensityFunction erosion, DensityFunction depth, DensityFunction weirdness, List<Climate.ParameterPoint> spawnTarget) {
         public Climate.TargetPoint sample(int i, int i2, int i3) {
             int i4 = QuartPos.toBlock(i);
             int i5 = QuartPos.toBlock(i2);
@@ -444,34 +391,6 @@ public class Climate {
         public BlockPos findSpawnPosition() {
             return this.spawnTarget.isEmpty() ? BlockPos.ZERO : Climate.findSpawnPosition(this.spawnTarget, this);
         }
-
-        public DensityFunction temperature() {
-            return this.temperature;
-        }
-
-        public DensityFunction humidity() {
-            return this.humidity;
-        }
-
-        public DensityFunction continentalness() {
-            return this.continentalness;
-        }
-
-        public DensityFunction erosion() {
-            return this.erosion;
-        }
-
-        public DensityFunction depth() {
-            return this.depth;
-        }
-
-        public DensityFunction weirdness() {
-            return this.weirdness;
-        }
-
-        public List<Climate.ParameterPoint> spawnTarget() {
-            return this.spawnTarget;
-        }
     }
 
     static class SpawnFinder {
@@ -520,55 +439,14 @@ public class Climate {
             return new Climate.SpawnFinder.Result(new BlockPos(i, 0, i2), l + l2);
         }
 
-        static record Result(BlockPos a, long b) {
-            private final BlockPos location;
-            private final long fitness;
-
-            public BlockPos location() {
-                return this.location;
-            }
-
-            public long fitness() {
-                return this.fitness;
-            }
+        static record Result(BlockPos location, long fitness) {
         }
     }
 
-    public static record TargetPoint(long a, long b, long c, long d, long e, long f) {
-        final long temperature;
-        final long humidity;
-        final long continentalness;
-        final long erosion;
-        final long depth;
-        final long weirdness;
-
+    public static record TargetPoint(long temperature, long humidity, long continentalness, long erosion, long depth, long weirdness) {
         @VisibleForTesting
         protected long[] toParameterArray() {
             return new long[]{this.temperature, this.humidity, this.continentalness, this.erosion, this.depth, this.weirdness, 0L};
         }
-
-        public long temperature() {
-            return this.temperature;
-        }
-
-        public long humidity() {
-            return this.humidity;
-        }
-
-        public long continentalness() {
-            return this.continentalness;
-        }
-
-        public long erosion() {
-            return this.erosion;
-        }
-
-        public long depth() {
-            return this.depth;
-        }
-
-        public long weirdness() {
-            return this.weirdness;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/biome/FeatureSorter.java b/src/main/java/net/minecraft/world/level/biome/FeatureSorter.java
index 16bf19f3f4f560bef96ea97ebdd500b21c79ee79..7803a8f5d4a78db85d644ad4360fef54ba8a6640 100644
--- a/src/main/java/net/minecraft/world/level/biome/FeatureSorter.java
+++ b/src/main/java/net/minecraft/world/level/biome/FeatureSorter.java
@@ -30,22 +30,7 @@ public class FeatureSorter {
         Object2IntMap<PlacedFeature> object2IntMap = new Object2IntOpenHashMap();
         MutableInt mutableInt = new MutableInt(0);
 
-        record FeatureData(int a, int b, PlacedFeature c) {
-            private final int featureIndex;
-            private final int step;
-            private final PlacedFeature feature;
-
-            public int featureIndex() {
-                return this.featureIndex;
-            }
-
-            public int step() {
-                return this.step;
-            }
-
-            public PlacedFeature feature() {
-                return this.feature;
-            }
+        record FeatureData(int featureIndex, int step, PlacedFeature feature) {
         }
 
         Comparator<FeatureData> comparator = Comparator.comparingInt(FeatureData::step).thenComparingInt(FeatureData::featureIndex);
@@ -58,9 +43,9 @@ public class FeatureSorter {
             i = Math.max(i, list3.size());
 
             for(int i2 = 0; i2 < list3.size(); ++i2) {
-                for(Holder<PlacedFeature> holder : (HolderSet)list3.get(i2)) {
+                for(Holder<PlacedFeature> holder : list3.get(i2)) {
                     PlacedFeature placedFeature = (PlacedFeature)holder.value();
-                    list2.add(new FeatureData(object2IntMap.computeIfAbsent(placedFeature, (object) -> mutableInt.getAndIncrement()), i2, placedFeature));
+                    list2.add(new FeatureData(object2IntMap.computeIfAbsent(placedFeature, (objectIn) -> mutableInt.getAndIncrement()), i2, placedFeature));
                 }
             }
 
@@ -76,12 +61,12 @@ public class FeatureSorter {
         Set<FeatureData> set3 = new TreeSet(comparator);
         List<FeatureData> list4 = Lists.newArrayList();
 
-        for(FeatureData 1FeatureData : map.keySet()) {
+        for(FeatureData featureData : map.keySet()) {
             if (!set3.isEmpty()) {
                 throw new IllegalStateException("You somehow broke the universe; DFS bork (iteration finished with non-empty in-progress vertex set");
             }
 
-            if (!set2.contains(1FeatureData) && Graph.depthFirstSearch(map, set2, set3, list4::add, (T)1FeatureData)) {
+            if (!set2.contains(featureData) && Graph.depthFirstSearch(map, set2, set3, list4::add, featureData)) {
                 if (!flag) {
                     throw new IllegalStateException("Feature order cycle found");
                 }
@@ -123,20 +108,9 @@ public class FeatureSorter {
         return builder.build();
     }
 
-    public static record StepFeatureData(List<PlacedFeature> a, ToIntFunction<PlacedFeature> b) {
-        private final List<PlacedFeature> features;
-        private final ToIntFunction<PlacedFeature> indexMapping;
-
+    public static record StepFeatureData(List<PlacedFeature> features, ToIntFunction<PlacedFeature> indexMapping) {
         StepFeatureData(List<PlacedFeature> list) {
             this(list, Util.createIndexLookup(list, (i) -> new Object2IntOpenCustomHashMap(i, Util.identityStrategy())));
         }
-
-        public List<PlacedFeature> features() {
-            return this.features;
-        }
-
-        public ToIntFunction<PlacedFeature> indexMapping() {
-            return this.indexMapping;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java b/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
index 6892809664ae4afe5d396e93fe685e6eede92efe..f3fb813613abb7eb3c0b1e71a5699126a0d7bec4 100644
--- a/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
+++ b/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
@@ -78,18 +78,8 @@ public class MobSpawnSettings {
         }
     }
 
-    public static record MobSpawnCost(double b, double c) {
-        private final double energyBudget;
-        private final double charge;
+    public static record MobSpawnCost(double energyBudget, double charge) {
         public static final Codec<MobSpawnSettings.MobSpawnCost> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.DOUBLE.fieldOf("energy_budget").forGetter((mobSpawnCost) -> mobSpawnCost.energyBudget), Codec.DOUBLE.fieldOf("charge").forGetter((mobSpawnCost) -> mobSpawnCost.charge)).apply(instance, MobSpawnSettings.MobSpawnCost::new));
-
-        public double energyBudget() {
-            return this.energyBudget;
-        }
-
-        public double charge() {
-            return this.charge;
-        }
     }
 
     public static class SpawnerData extends WeightedEntry.IntrusiveBase {
diff --git a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSourceParameterList.java b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSourceParameterList.java
index 2e8e848c2375594e239a59f622b53752e75a8573..de7d7a54402e6df46b5c5acb5afb1d8f02c780e7 100644
--- a/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSourceParameterList.java
+++ b/src/main/java/net/minecraft/world/level/biome/MultiNoiseBiomeSourceParameterList.java
@@ -39,9 +39,7 @@ public class MultiNoiseBiomeSourceParameterList {
         return MultiNoiseBiomeSourceParameterList.Preset.BY_NAME.values().stream().collect(Collectors.toMap((preset) -> preset, (preset) -> preset.provider().apply((resourceKey) -> resourceKey)));
     }
 
-    public static record Preset(ResourceLocation d, MultiNoiseBiomeSourceParameterList.Preset.SourceProvider e) {
-        private final ResourceLocation id;
-        final MultiNoiseBiomeSourceParameterList.Preset.SourceProvider provider;
+    public static record Preset(ResourceLocation id, MultiNoiseBiomeSourceParameterList.Preset.SourceProvider provider) {
         public static final MultiNoiseBiomeSourceParameterList.Preset NETHER = new MultiNoiseBiomeSourceParameterList.Preset(new ResourceLocation("nether"), new MultiNoiseBiomeSourceParameterList.Preset.SourceProvider() {
             public <T> Climate.ParameterList<T> apply(Function<ResourceKey<Biome>, T> function) {
                 return new Climate.ParameterList<>(List.of(Pair.of(Climate.parameters(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F), function.apply(Biomes.NETHER_WASTES)), Pair.of(Climate.parameters(0.0F, -0.5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F), function.apply(Biomes.SOUL_SAND_VALLEY)), Pair.of(Climate.parameters(0.4F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F), function.apply(Biomes.CRIMSON_FOREST)), Pair.of(Climate.parameters(0.0F, 0.5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.375F), function.apply(Biomes.WARPED_FOREST)), Pair.of(Climate.parameters(-0.5F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.175F), function.apply(Biomes.BASALT_DELTAS))));
@@ -78,4 +76,4 @@ public class MultiNoiseBiomeSourceParameterList {
             <T> Climate.ParameterList<T> apply(Function<ResourceKey<Biome>, T> var1);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
index f36aeb222dcf0648d626f423d9ba26ca0a2f3be3..6d688bc0d308f09cc21b0f01476ba387c0c390cb 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
@@ -33,6 +33,6 @@ public abstract class BaseEntityBlock extends Block implements EntityBlock {
 
     @Nullable
     protected static <E extends BlockEntity, A extends BlockEntity> BlockEntityTicker<A> createTickerHelper(BlockEntityType<A> blockEntityType, BlockEntityType<E> blockEntityType2, BlockEntityTicker<? super E> blockEntityTicker) {
-        return blockEntityType2 == blockEntityType ? blockEntityTicker : null;
+        return blockEntityType2 == blockEntityType ? (BlockEntityTicker<A>) blockEntityTicker : null;
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/Blocks.java b/src/main/java/net/minecraft/world/level/block/Blocks.java
index 8cb0a0ac2933cab90a8b8893ba9038fa556ce06f..a1303c2e8790feb4149488cefaf3d2deb6333b44 100644
--- a/src/main/java/net/minecraft/world/level/block/Blocks.java
+++ b/src/main/java/net/minecraft/world/level/block/Blocks.java
@@ -1061,7 +1061,7 @@ public class Blocks {
     }
 
     private static Boolean ocelotOrParrot(BlockState blockState, BlockGetter blockGetter, BlockPos blockPos, EntityType<?> entityType) {
-        return (boolean)entityType == EntityType.OCELOT || entityType == EntityType.PARROT;
+        return entityType == EntityType.OCELOT || entityType == EntityType.PARROT;
     }
 
     private static BedBlock bed(DyeColor dyeColor) {
diff --git a/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java b/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java
index 91faccd00efd84df4735f5eff161c7221e635053..9e1b63845d00c4838374f93de4cd11042baee1fe 100644
--- a/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java
@@ -50,11 +50,11 @@ public class CeilingHangingSignBlock extends SignBlock {
     }
 
     public InteractionResult use(BlockState blockState, Level level, BlockPos blockPos, Player player, InteractionHand interactionHand, BlockHitResult blockHitResult) {
-        BlockEntity itemStack = level.getBlockEntity(blockPos);
-        if (itemStack instanceof SignBlockEntity) {
-            SignBlockEntity signBlockEntity = (SignBlockEntity)itemStack;
-            ItemStack itemStack = player.getItemInHand(interactionHand);
-            if (this.shouldTryToChainAnotherHangingSign(player, blockHitResult, signBlockEntity, itemStack)) {
+        BlockEntity blockEntity = level.getBlockEntity(blockPos);
+        if (blockEntity instanceof SignBlockEntity) {
+            SignBlockEntity signBlockEntity = (SignBlockEntity)blockEntity;
+            ItemStack hand = player.getItemInHand(interactionHand);
+            if (this.shouldTryToChainAnotherHangingSign(player, blockHitResult, signBlockEntity, hand)) {
                 return InteractionResult.PASS;
             }
         }
@@ -133,4 +133,4 @@ public class CeilingHangingSignBlock extends SignBlock {
     public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level level, BlockState blockState, BlockEntityType<T> blockEntityType) {
         return createTickerHelper(blockEntityType, BlockEntityType.HANGING_SIGN, SignBlockEntity::tick);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java b/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java
index 3cf784cec7a2e09c7bd4b1bf42cf54a6fe5a3aca..7d8f6a6771252bc902a077b13db8c27c963e1949 100644
--- a/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java
@@ -55,12 +55,12 @@ public class ChiseledBookShelfBlock extends BaseEntityBlock {
         BlockEntity optional = level.getBlockEntity(blockPos);
         if (optional instanceof ChiseledBookShelfBlockEntity) {
             ChiseledBookShelfBlockEntity chiseledBookShelfBlockEntity = (ChiseledBookShelfBlockEntity)optional;
-            Optional<Vec2> optional = getRelativeHitCoordinatesForBlockFace(blockHitResult, blockState.getValue(HorizontalDirectionalBlock.FACING));
-            if (optional.isEmpty()) {
+            Optional<Vec2> optionalIn = getRelativeHitCoordinatesForBlockFace(blockHitResult, blockState.getValue(HorizontalDirectionalBlock.FACING));
+            if (optionalIn.isEmpty()) {
                 return InteractionResult.PASS;
             } else {
-                int i = getHitSlot((Vec2)optional.get());
-                if (blockState.getValue((Property)SLOT_OCCUPIED_PROPERTIES.get(i))) {
+                int i = getHitSlot((Vec2)optionalIn.get());
+                if (blockState.getValue(SLOT_OCCUPIED_PROPERTIES.get(i))) {
                     removeBook(level, blockPos, player, chiseledBookShelfBlockEntity, i);
                     return InteractionResult.sidedSuccess(level.isClientSide);
                 } else {
diff --git a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
index 94198785a875a18d134a5e6102bb73846933111e..9c4ca39dbda2362460bd31732a4a31307b7137e0 100644
--- a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
@@ -55,7 +55,7 @@ public class IronBarsBlock extends CrossCollisionBlock {
                 return true;
             }
 
-            if (blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction)) && blockState2.getValue((Property)PROPERTY_BY_DIRECTION.get(direction.getOpposite()))) {
+            if (blockState.getValue(PROPERTY_BY_DIRECTION.get(direction)) && blockState2.getValue(PROPERTY_BY_DIRECTION.get(direction.getOpposite()))) {
                 return true;
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java b/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
index e2ae949debc93bbef19f02f47cd4af00af82cb82..35e8e3ebd8202f3eec4becdfdd7fe53c5c498d42 100644
--- a/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
+++ b/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
@@ -127,17 +127,7 @@ public class MultifaceSpreader {
         }
     }
 
-    public static record SpreadPos(BlockPos a, Direction b) {
-        private final BlockPos pos;
-        private final Direction face;
-
-        public BlockPos pos() {
-            return this.pos;
-        }
-
-        public Direction face() {
-            return this.face;
-        }
+    public static record SpreadPos(BlockPos pos, Direction face) {
     }
 
     @FunctionalInterface
diff --git a/src/main/java/net/minecraft/world/level/block/PipeBlock.java b/src/main/java/net/minecraft/world/level/block/PipeBlock.java
index 4186147b04fa1a6e286969cd3484a4f9ec864f8e..432a87a9d892212697585a0a59e29aad76c0bf99 100644
--- a/src/main/java/net/minecraft/world/level/block/PipeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PipeBlock.java
@@ -79,7 +79,7 @@ public class PipeBlock extends Block {
         int i = 0;
 
         for(int i2 = 0; i2 < DIRECTIONS.length; ++i2) {
-            if (blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(DIRECTIONS[i2]))) {
+            if (blockState.getValue(PROPERTY_BY_DIRECTION.get(DIRECTIONS[i2]))) {
                 i |= 1 << i2;
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
index 392c801cac0514468ccd31af6632d2dc9bb8a926..711d7918407bc67873b684146fa171908f1b2dfc 100644
--- a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
@@ -170,16 +170,6 @@ public class PitcherCropBlock extends DoublePlantBlock implements BonemealableBl
         }
     }
 
-    static record PosAndState(BlockPos a, BlockState b) {
-        final BlockPos pos;
-        final BlockState state;
-
-        public BlockPos pos() {
-            return this.pos;
-        }
-
-        public BlockState state() {
-            return this.state;
-        }
+    static record PosAndState(BlockPos pos, BlockState state) {
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
index 89e421612797a7a75efe840000cab27dddd6d8d2..02901be343e84cd5156e0b9e77b08a84e270724a 100644
--- a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
@@ -500,15 +500,15 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
     private static Optional<PointedDripstoneBlock.FluidInfo> getFluidAboveStalactite(Level level, BlockPos blockPos, BlockState blockState) {
         return !isStalactite(blockState) ? Optional.empty() : findRootBlock(level, blockPos, blockState, 11).map((blockPosx) -> {
             BlockPos blockPos2 = blockPosx.above();
-            BlockState blockState = level.getBlockState(blockPos2);
+            BlockState blockStateIn = level.getBlockState(blockPos2);
             Fluid fluid;
-            if (blockState.is(Blocks.MUD) && !level.dimensionType().ultraWarm()) {
+            if (blockStateIn.is(Blocks.MUD) && !level.dimensionType().ultraWarm()) {
                 fluid = Fluids.WATER;
             } else {
                 fluid = level.getFluidState(blockPos2).getType();
             }
 
-            return new PointedDripstoneBlock.FluidInfo(blockPos2, fluid, blockState);
+            return new PointedDripstoneBlock.FluidInfo(blockPos2, fluid, blockStateIn);
         });
     }
 
@@ -560,21 +560,6 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
         }
     }
 
-    static record FluidInfo(BlockPos a, Fluid b, BlockState c) {
-        final BlockPos pos;
-        final Fluid fluid;
-        final BlockState sourceState;
-
-        public BlockPos pos() {
-            return this.pos;
-        }
-
-        public Fluid fluid() {
-            return this.fluid;
-        }
-
-        public BlockState sourceState() {
-            return this.sourceState;
-        }
+    static record FluidInfo(BlockPos pos, Fluid fluid, BlockState sourceState) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
index 61d5f92d2f45eefc07e15e06cf2c8548f13f050b..2cf358c9c7ad55ad319761abcad243cf0f37ff93 100644
--- a/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
@@ -30,19 +30,10 @@ public class PressurePlateBlock extends BasePressurePlateBlock {
     }
 
     protected int getSignalStrength(Level level, BlockPos blockPos) {
-        Class<Entity> var10000;
-        switch(this.sensitivity) {
-        case EVERYTHING:
-            var10000 = Entity.class;
-            break;
-        case MOBS:
-            var10000 = LivingEntity.class;
-            break;
-        default:
-            throw new IncompatibleClassChangeError();
-        }
-
-        Class clazz = var10000;
+        Class<? extends Entity> clazz = switch (this.sensitivity) {
+            case EVERYTHING -> Entity.class;
+            case MOBS -> LivingEntity.class;
+        };
         return getEntityCount(level, TOUCH_AABB.move(blockPos), clazz) > 0 ? 15 : 0;
     }
 
@@ -54,4 +45,4 @@ public class PressurePlateBlock extends BasePressurePlateBlock {
         EVERYTHING,
         MOBS;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index 0dd45966b02a354bc541105e6d39e2133fa5de11..404b26392450d4aeb1c2b4f6f3586ca771ef9f78 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -84,7 +84,7 @@ public class RedStoneWireBlock extends Block {
         VoxelShape voxelShape = SHAPE_DOT;
 
         for(Direction direction : Direction.Plane.HORIZONTAL) {
-            RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+            RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction));
             if (redstoneSide == RedstoneSide.SIDE) {
                 voxelShape = Shapes.or(voxelShape, (VoxelShape)SHAPES_FLOOR.get(direction));
             } else if (redstoneSide == RedstoneSide.UP) {
@@ -171,7 +171,7 @@ public class RedStoneWireBlock extends Block {
         BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
 
         for(Direction direction : Direction.Plane.HORIZONTAL) {
-            RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+            RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction));
             if (redstoneSide != RedstoneSide.NONE && !levelAccessor.getBlockState(mutableBlockPos.setWithOffset(blockPos, direction)).is(this)) {
                 mutableBlockPos.move(Direction.DOWN);
                 BlockState blockState2 = levelAccessor.getBlockState(mutableBlockPos);
@@ -393,7 +393,7 @@ public class RedStoneWireBlock extends Block {
         int i = blockState.getValue(POWER);
         if (i != 0) {
             for(Direction direction : Direction.Plane.HORIZONTAL) {
-                RedstoneSide redstoneSide = blockState.getValue((Property)PROPERTY_BY_DIRECTION.get(direction));
+                RedstoneSide redstoneSide = blockState.getValue(PROPERTY_BY_DIRECTION.get(direction));
                 switch(redstoneSide) {
                 case UP:
                     this.spawnParticlesAlongLine(level, randomSource, blockPos, COLORS[i], direction, Direction.UP, -0.5F, 0.5F);
diff --git a/src/main/java/net/minecraft/world/level/block/SculkSpreader.java b/src/main/java/net/minecraft/world/level/block/SculkSpreader.java
index 139b5796fdaac3a06847e32343f6471b72521b39..316e527d1264a083eb1e20b42fb57668505028ce 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkSpreader.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkSpreader.java
@@ -105,7 +105,7 @@ public class SculkSpreader {
     public void load(CompoundTag compoundTag) {
         if (compoundTag.contains("cursors", 9)) {
             this.cursors.clear();
-            List<SculkSpreader.ChargeCursor> list = SculkSpreader.ChargeCursor.CODEC.listOf().parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getList("cursors", 10))).resultOrPartial(LOGGER::error).orElseGet(ArrayList::new);
+            List<SculkSpreader.ChargeCursor> list = SculkSpreader.ChargeCursor.CODEC.listOf().parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getList("cursors", 10))).resultOrPartial(LOGGER::error).orElseGet(ArrayList::new);
             int i = Math.min(list.size(), 32);
 
             for(int i2 = 0; i2 < i; ++i2) {
diff --git a/src/main/java/net/minecraft/world/level/block/SignBlock.java b/src/main/java/net/minecraft/world/level/block/SignBlock.java
index f056ea884d8c407d9990bd6de95dcb556b089cbc..f5c5092c284c143d5cd8faf0d41241261bc80734 100644
--- a/src/main/java/net/minecraft/world/level/block/SignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SignBlock.java
@@ -82,34 +82,34 @@ public abstract class SignBlock extends BaseEntityBlock implements SimpleWaterlo
 
         SignApplicator signApplicator2 = var10000;
         boolean flag = signApplicator2 != null && player.mayBuild();
-        BlockEntity flag2 = level.getBlockEntity(blockPos);
-        if (flag2 instanceof SignBlockEntity) {
-            SignBlockEntity signBlockEntity = (SignBlockEntity)flag2;
+        BlockEntity blockEntity = level.getBlockEntity(blockPos);
+        if (blockEntity instanceof SignBlockEntity) {
+            SignBlockEntity signBlockEntityIn = (SignBlockEntity)blockEntity;
             if (!level.isClientSide) {
-                boolean flag2 = signBlockEntity.isFacingFrontText(player);
-                SignText signText = signBlockEntity.getText(flag2);
-                boolean flag3 = signBlockEntity.executeClickCommandsIfPresent(player, level, blockPos, flag2);
-                if (signBlockEntity.isWaxed()) {
-                    level.playSound((Player)null, signBlockEntity.getBlockPos(), SoundEvents.WAXED_SIGN_INTERACT_FAIL, SoundSource.BLOCKS);
+                boolean facingFrontText = signBlockEntityIn.isFacingFrontText(player);
+                SignText signText = signBlockEntityIn.getText(facingFrontText);
+                boolean flag3 = signBlockEntityIn.executeClickCommandsIfPresent(player, level, blockPos, facingFrontText);
+                if (signBlockEntityIn.isWaxed()) {
+                    level.playSound((Player)null, signBlockEntityIn.getBlockPos(), SoundEvents.WAXED_SIGN_INTERACT_FAIL, SoundSource.BLOCKS);
                     return this.getInteractionResult(flag);
-                } else if (flag && !this.otherPlayerIsEditingSign(player, signBlockEntity) && signApplicator2.canApplyToSign(signText, player) && signApplicator2.tryApplyToSign(level, signBlockEntity, flag2, player)) {
+                } else if (flag && !this.otherPlayerIsEditingSign(player, signBlockEntityIn) && signApplicator2.canApplyToSign(signText, player) && signApplicator2.tryApplyToSign(level, signBlockEntityIn, facingFrontText, player)) {
                     if (!player.isCreative()) {
                         itemStack.shrink(1);
                     }
 
-                    level.gameEvent(GameEvent.BLOCK_CHANGE, signBlockEntity.getBlockPos(), GameEvent.Context.of(player, signBlockEntity.getBlockState()));
+                    level.gameEvent(GameEvent.BLOCK_CHANGE, signBlockEntityIn.getBlockPos(), GameEvent.Context.of(player, signBlockEntityIn.getBlockState()));
                     player.awardStat(Stats.ITEM_USED.get(item));
                     return InteractionResult.SUCCESS;
                 } else if (flag3) {
                     return InteractionResult.SUCCESS;
-                } else if (!this.otherPlayerIsEditingSign(player, signBlockEntity) && player.mayBuild() && this.hasEditableText(player, signBlockEntity, flag2)) {
-                    this.openTextEdit(player, signBlockEntity, flag2);
+                } else if (!this.otherPlayerIsEditingSign(player, signBlockEntityIn) && player.mayBuild() && this.hasEditableText(player, signBlockEntityIn, facingFrontText)) {
+                    this.openTextEdit(player, signBlockEntityIn, facingFrontText);
                     return this.getInteractionResult(flag);
                 } else {
                     return InteractionResult.PASS;
                 }
             } else {
-                return !flag && !signBlockEntity.isWaxed() ? InteractionResult.CONSUME : InteractionResult.SUCCESS;
+                return !flag && !signBlockEntityIn.isWaxed() ? InteractionResult.CONSUME : InteractionResult.SUCCESS;
             }
         } else {
             return InteractionResult.PASS;
@@ -164,4 +164,4 @@ public abstract class SignBlock extends BaseEntityBlock implements SimpleWaterlo
     public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level level, BlockState blockState, BlockEntityType<T> blockEntityType) {
         return createTickerHelper(blockEntityType, BlockEntityType.SIGN, SignBlockEntity::tick);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/block/SuspiciousEffectHolder.java b/src/main/java/net/minecraft/world/level/block/SuspiciousEffectHolder.java
index 37907b216164d01018db8c6ad257b6415dbd55b0..387638d4bf3c57bc2b6120f9854c84473ee22768 100644
--- a/src/main/java/net/minecraft/world/level/block/SuspiciousEffectHolder.java
+++ b/src/main/java/net/minecraft/world/level/block/SuspiciousEffectHolder.java
@@ -41,22 +41,12 @@ public interface SuspiciousEffectHolder {
         }
     }
 
-    public static record EffectEntry(MobEffect c, int d) {
-        private final MobEffect effect;
-        private final int duration;
+    public static record EffectEntry(MobEffect effect, int duration) {
         public static final Codec<SuspiciousEffectHolder.EffectEntry> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BuiltInRegistries.MOB_EFFECT.byNameCodec().fieldOf("id").forGetter(SuspiciousEffectHolder.EffectEntry::effect), Codec.INT.optionalFieldOf("duration", 160).forGetter(SuspiciousEffectHolder.EffectEntry::duration)).apply(instance, SuspiciousEffectHolder.EffectEntry::new));
         public static final Codec<List<SuspiciousEffectHolder.EffectEntry>> LIST_CODEC = CODEC.listOf();
 
         public MobEffectInstance createEffectInstance() {
             return new MobEffectInstance(this.effect, this.duration);
         }
-
-        public MobEffect effect() {
-            return this.effect;
-        }
-
-        public int duration() {
-            return this.duration;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java b/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java
index 4b6c99908a13e9886a2c18c2d85d3ab3a26326be..6875f90472dd8d883de1c4f0f0196377ec098f11 100644
--- a/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java
@@ -49,9 +49,9 @@ public class WallHangingSignBlock extends SignBlock {
     }
 
     public InteractionResult use(BlockState blockState, Level level, BlockPos blockPos, Player player, InteractionHand interactionHand, BlockHitResult blockHitResult) {
-        BlockEntity itemStack = level.getBlockEntity(blockPos);
-        if (itemStack instanceof SignBlockEntity) {
-            SignBlockEntity signBlockEntity = (SignBlockEntity)itemStack;
+        BlockEntity blockEntity = level.getBlockEntity(blockPos);
+        if (blockEntity instanceof SignBlockEntity) {
+            SignBlockEntity signBlockEntity = (SignBlockEntity)blockEntity;
             ItemStack itemStack = player.getItemInHand(interactionHand);
             if (this.shouldTryToChainAnotherHangingSign(blockState, player, blockHitResult, signBlockEntity, itemStack)) {
                 return InteractionResult.PASS;
@@ -154,4 +154,4 @@ public class WallHangingSignBlock extends SignBlock {
     public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level level, BlockState blockState, BlockEntityType<T> blockEntityType) {
         return createTickerHelper(blockEntityType, BlockEntityType.HANGING_SIGN, SignBlockEntity::tick);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
index 42b6ea6f07acc5811e2e4c2c938906638ce5bbb3..cb839f61945e33542f5ac60160dd833b9cc8c458 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopper.java
@@ -8,7 +8,7 @@ import java.util.function.Supplier;
 import net.minecraft.world.level.block.state.BlockState;
 
 public interface WeatheringCopper extends ChangeOverTimeBlock<WeatheringCopper.WeatherState> {
-    Supplier<BiMap<Block, Block>> NEXT_BY_BLOCK = Suppliers.memoize(() -> ImmutableBiMap.builder().put(Blocks.COPPER_BLOCK, Blocks.EXPOSED_COPPER).put(Blocks.EXPOSED_COPPER, Blocks.WEATHERED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.EXPOSED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WEATHERED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.OXIDIZED_CUT_COPPER_STAIRS).build());
+    Supplier<BiMap<Block, Block>> NEXT_BY_BLOCK = Suppliers.memoize(() -> ImmutableBiMap.<Block, Block>builder().put(Blocks.COPPER_BLOCK, Blocks.EXPOSED_COPPER).put(Blocks.EXPOSED_COPPER, Blocks.WEATHERED_COPPER).put(Blocks.WEATHERED_COPPER, Blocks.OXIDIZED_COPPER).put(Blocks.CUT_COPPER, Blocks.EXPOSED_CUT_COPPER).put(Blocks.EXPOSED_CUT_COPPER, Blocks.WEATHERED_CUT_COPPER).put(Blocks.WEATHERED_CUT_COPPER, Blocks.OXIDIZED_CUT_COPPER).put(Blocks.CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER_SLAB).put(Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER_SLAB).put(Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.OXIDIZED_CUT_COPPER_SLAB).put(Blocks.CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER_STAIRS).put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER_STAIRS).put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.OXIDIZED_CUT_COPPER_STAIRS).build());
     Supplier<BiMap<Block, Block>> PREVIOUS_BY_BLOCK = Suppliers.memoize(() -> ((BiMap)NEXT_BY_BLOCK.get()).inverse());
 
     static Optional<Block> getPrevious(Block block) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/DecoratedPotBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/DecoratedPotBlockEntity.java
index 613c4d385b3db7b65048d0b16d7f88d9aebef73f..9c23a35fa8e76214f4cd667b1640858ab38954f7 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/DecoratedPotBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/DecoratedPotBlockEntity.java
@@ -67,11 +67,7 @@ public class DecoratedPotBlockEntity extends BlockEntity {
         return itemStack;
     }
 
-    public static record Decorations(Item b, Item c, Item d, Item e) {
-        private final Item back;
-        private final Item left;
-        private final Item right;
-        private final Item front;
+    public static record Decorations(Item back, Item left, Item right, Item front) {
         public static final DecoratedPotBlockEntity.Decorations EMPTY = new DecoratedPotBlockEntity.Decorations(Items.BRICK, Items.BRICK, Items.BRICK, Items.BRICK);
 
         public CompoundTag save(CompoundTag compoundTag) {
@@ -106,21 +102,5 @@ public class DecoratedPotBlockEntity extends BlockEntity {
                 return BuiltInRegistries.ITEM.get(ResourceLocation.tryParse(tag.getAsString()));
             }
         }
-
-        public Item back() {
-            return this.back;
-        }
-
-        public Item left() {
-            return this.left;
-        }
-
-        public Item right() {
-            return this.right;
-        }
-
-        public Item front() {
-            return this.front;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
index 4a65c07645edbe0fb00c724d01f13983eea311e2..c287ed756a92a201206981f03682ade257c08975 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
@@ -76,9 +76,9 @@ public class SculkCatalystBlockEntity extends BlockEntity implements GameEventLi
 
         public boolean handleGameEvent(ServerLevel serverLevel, GameEvent gameEvent, GameEvent.Context context, Vec3 vec3) {
             if (gameEvent == GameEvent.ENTITY_DIE) {
-                Entity i = context.sourceEntity();
-                if (i instanceof LivingEntity) {
-                    LivingEntity livingEntity = (LivingEntity)i;
+                Entity entity = context.sourceEntity();
+                if (entity instanceof LivingEntity) {
+                    LivingEntity livingEntity = (LivingEntity)entity;
                     if (!livingEntity.wasExperienceConsumed()) {
                         int i = livingEntity.getExperienceReward();
                         if (livingEntity.shouldDropExperience() && i > 0) {
@@ -119,4 +119,4 @@ public class SculkCatalystBlockEntity extends BlockEntity implements GameEventLi
 
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SculkSensorBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SculkSensorBlockEntity.java
index ad70827c4099c04de229a66848bc15b9e2738983..a1e43619bf8da23dec6cc2129f00248baff26fb0 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SculkSensorBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SculkSensorBlockEntity.java
@@ -43,7 +43,7 @@ public class SculkSensorBlockEntity extends BlockEntity implements GameEventList
         super.load(compoundTag);
         this.lastVibrationFrequency = compoundTag.getInt("last_vibration_frequency");
         if (compoundTag.contains("listener", 10)) {
-            VibrationSystem.Data.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((data) -> this.vibrationData = data);
+            VibrationSystem.Data.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((data) -> this.vibrationData = data);
         }
 
     }
@@ -122,4 +122,4 @@ public class SculkSensorBlockEntity extends BlockEntity implements GameEventList
             return true;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SculkShriekerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SculkShriekerBlockEntity.java
index 9b34fea7633b7f43af01cea1a6640bb2838366df..316ef2ddb89bc9c6ff801f2c650e0c7cdd14a713 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SculkShriekerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SculkShriekerBlockEntity.java
@@ -79,7 +79,7 @@ public class SculkShriekerBlockEntity extends BlockEntity implements GameEventLi
         }
 
         if (compoundTag.contains("listener", 10)) {
-            VibrationSystem.Data.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((data) -> this.vibrationData = data);
+            VibrationSystem.Data.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((data) -> this.vibrationData = data);
         }
 
     }
@@ -223,4 +223,4 @@ public class SculkShriekerBlockEntity extends BlockEntity implements GameEventLi
             return true;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
index 04d4223e2765c31d095a8754c1c8815c935e9bab..99c7a967b90cf446fd7038ce0b3993a5c09381fa 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
@@ -55,9 +55,9 @@ public class SignBlockEntity extends BlockEntity {
         Block vec3 = this.getBlockState().getBlock();
         if (vec3 instanceof SignBlock) {
             SignBlock signBlock = (SignBlock)vec3;
-            Vec3 vec3 = signBlock.getSignHitboxCenterPosition(this.getBlockState());
-            double d = player.getX() - ((double)this.getBlockPos().getX() + vec3.x);
-            double d2 = player.getZ() - ((double)this.getBlockPos().getZ() + vec3.z);
+            Vec3 centerPosition = signBlock.getSignHitboxCenterPosition(this.getBlockState());
+            double d = player.getX() - ((double)this.getBlockPos().getX() + centerPosition.x);
+            double d2 = player.getZ() - ((double)this.getBlockPos().getZ() + centerPosition.z);
             float f = signBlock.getYRotationDegrees(this.getBlockState());
             float f2 = (float)(Mth.atan2(d2, d) * (double)(180F / (float)Math.PI)) - 90.0F;
             return Mth.degreesDifferenceAbs(f, f2) <= 90.0F;
@@ -271,4 +271,4 @@ public class SignBlockEntity extends BlockEntity {
         }
 
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SkullBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SkullBlockEntity.java
index 3b8b1edc069b85d28a5be5114cf3ebc7970e1ecd..149f42b5bae6cd00c7d8d5c57644c2ee572e87f2 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SkullBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SkullBlockEntity.java
@@ -173,9 +173,9 @@ public class SkullBlockEntity extends BlockEntity {
     private static CompletableFuture<Optional<GameProfile>> fetchGameProfile(String s) {
         GameProfileCache gameProfileCache = profileCache;
         return gameProfileCache == null ? CompletableFuture.completedFuture(Optional.empty()) : gameProfileCache.getAsync(s).thenCompose((optional) -> optional.isPresent() ? fillProfileTextures((GameProfile)optional.get()) : CompletableFuture.completedFuture(Optional.empty())).thenApplyAsync((optional) -> {
-            GameProfileCache gameProfileCache = profileCache;
-            if (gameProfileCache != null) {
-                optional.ifPresent(gameProfileCache::add);
+            GameProfileCache gameProfileCacheIn = profileCache;
+            if (gameProfileCacheIn != null) {
+                optional.ifPresent(gameProfileCacheIn::add);
                 return optional;
             } else {
                 return Optional.empty();
@@ -198,4 +198,4 @@ public class SkullBlockEntity extends BlockEntity {
     private static boolean hasTextures(GameProfile gameProfile) {
         return gameProfile.getProperties().containsKey("textures");
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
index 04173193a5a467c8db6296de191839ea0e8dac4d..ad5d3dc157a6ad706b3930861d4863b384a9def2 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/StructureBlockEntity.java
@@ -265,12 +265,12 @@ public class StructureBlockEntity extends BlockEntity {
             BlockPos blockPos3 = new BlockPos(blockPos.getX() + 80, this.level.getMaxBuildHeight() - 1, blockPos.getZ() + 80);
             Stream<BlockPos> stream = this.getRelatedCorners(blockPos2, blockPos3);
             return calculateEnclosingBoundingBox(blockPos, stream).filter((boundingBox) -> {
-                int i = boundingBox.maxX() - boundingBox.minX();
+                int ix = boundingBox.maxX() - boundingBox.minX();
                 int i2 = boundingBox.maxY() - boundingBox.minY();
                 int i3 = boundingBox.maxZ() - boundingBox.minZ();
-                if (i > 1 && i2 > 1 && i3 > 1) {
+                if (ix > 1 && i2 > 1 && i3 > 1) {
                     this.structurePos = new BlockPos(boundingBox.minX() - blockPos.getX() + 1, boundingBox.minY() - blockPos.getY() + 1, boundingBox.minZ() - blockPos.getZ() + 1);
-                    this.structureSize = new Vec3i(i - 1, i2 - 1, i3 - 1);
+                    this.structureSize = new Vec3i(ix - 1, i2 - 1, i3 - 1);
                     this.setChanged();
                     BlockState blockState = this.level.getBlockState(blockPos);
                     this.level.sendBlockUpdated(blockPos, blockState, blockState, 3);
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
index 1e07de2b3263c22f2942899ab2d82593af62583a..496a061eba13ba89bb689ebef4d1fac661ddb257 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateDefinition.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.block.state;
 
 import com.google.common.base.MoreObjects;
+import com.google.common.collect.ImmutableCollection;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSortedMap;
@@ -34,7 +35,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
     protected StateDefinition(Function<O, S> function, O object, StateDefinition.Factory<O, S> factory, Map<String, Property<?>> map) {
         this.owner = object;
         this.propertiesByName = ImmutableSortedMap.copyOf(map);
-        Supplier<S> supplier = () -> (StateHolder)function.apply(object);
+        Supplier<S> supplier = () -> (S) function.apply(object);
         MapCodec<S> mapCodec = MapCodec.of(Encoder.empty(), Decoder.unit(supplier));
 
         Entry<String, Property<?>> entry;
@@ -47,13 +48,12 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
         List<S> list = Lists.newArrayList();
         Stream<List<Pair<Property<?>, Comparable<?>>>> stream = Stream.of(Collections.emptyList());
 
-        Property<?> property;
-        for(UnmodifiableIterator var11 = this.propertiesByName.values().iterator(); var11.hasNext(); stream = stream.flatMap((listx) -> property.getPossibleValues().stream().map((comparable) -> {
-                List<Pair<Property<?>, Comparable<?>>> list2 = Lists.newArrayList(listx);
-                list2.add(Pair.of(property, comparable));
-                return list2;
-            }))) {
-            property = (Property)var11.next();
+        for(Property<?> property : this.propertiesByName.values()) {
+            stream = stream.flatMap((l) -> property.getPossibleValues().stream().map((o) -> {
+                List<Pair<Property<?>, Comparable<?>>> list1 = Lists.newArrayList(l);
+                list1.add(Pair.of(property, o));
+                return list1;
+            }));
         }
 
         stream.forEach((list2) -> {
@@ -72,7 +72,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
 
     private static <S extends StateHolder<?, S>, T extends Comparable<T>> MapCodec<S> appendPropertyCodec(MapCodec<S> mapCodec, Supplier<S> supplier, String s, Property<T> property) {
         return Codec.mapPair(mapCodec, property.valueCodec().fieldOf(s).orElseGet((sx) -> {
-        }, () -> property.value((StateHolder)supplier.get()))).xmap((pair) -> (StateHolder)((StateHolder)pair.getFirst()).setValue(property, ((Property.Value)pair.getSecond()).value()), (stateHolder) -> Pair.of(stateHolder, property.value(stateHolder)));
+        }, () -> property.value(supplier.get()))).xmap((pair) -> pair.getFirst().setValue(property, pair.getSecond().value()), (stateHolder) -> Pair.of(stateHolder, property.value(stateHolder)));
     }
 
     public ImmutableList<S> getPossibleStates() {
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
index da039b4ca2fd8e6d7f316455cebe5d5929e0a05d..c2deaef2e7c844e771d47d4f5dc7c2988904b3c2 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
@@ -98,7 +98,7 @@ public abstract class StateHolder<O, S> {
 
     public <T extends Comparable<T>> Optional<T> getOptionalValue(Property<T> property) {
         Comparable<?> comparable = (Comparable)this.values.get(property);
-        return comparable == null ? Optional.empty() : Optional.of((Comparable)property.getValueClass().cast(comparable));
+        return comparable == null ? Optional.empty() : Optional.of(property.getValueClass().cast(comparable));
     }
 
     public <T extends Comparable<T>, V extends T> S setValue(Property<T> property, V comparable) {
@@ -164,9 +164,9 @@ public abstract class StateHolder<O, S> {
     }
 
     protected static <O, S extends StateHolder<O, S>> Codec<S> codec(Codec<O> codec, Function<O, S> function) {
-        return codec.dispatch("Name", (stateHolder) -> stateHolder.owner, (object) -> {
+        return codec.<S>dispatch("Name", (stateHolder) -> stateHolder.owner, (object) -> {
             S stateHolder = (S)(function.apply(object));
-            return stateHolder.getValues().isEmpty() ? Codec.unit(stateHolder) : stateHolder.propertiesCodec.codec().optionalFieldOf("Properties").xmap((optional) -> (StateHolder)optional.orElse(stateHolder), Optional::of).codec();
+            return stateHolder.getValues().isEmpty() ? Codec.unit(stateHolder) : stateHolder.propertiesCodec.codec().optionalFieldOf("Properties").xmap((optional) -> optional.orElse(stateHolder), Optional::of).codec();
         });
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/BlockSetType.java b/src/main/java/net/minecraft/world/level/block/state/properties/BlockSetType.java
index cbbc2be7ac9ffd46224b6832d96c95c7d65be950..dadda3a7823051d85168fb0705c8e50db92b9ef2 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/BlockSetType.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/BlockSetType.java
@@ -7,18 +7,18 @@ import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.level.block.SoundType;
 
-public record BlockSetType(String p, boolean q, SoundType r, SoundEvent s, SoundEvent t, SoundEvent u, SoundEvent v, SoundEvent w, SoundEvent x, SoundEvent y, SoundEvent z) {
-    private final String name;
-    private final boolean canOpenByHand;
-    private final SoundType soundType;
-    private final SoundEvent doorClose;
-    private final SoundEvent doorOpen;
-    private final SoundEvent trapdoorClose;
-    private final SoundEvent trapdoorOpen;
-    private final SoundEvent pressurePlateClickOff;
-    private final SoundEvent pressurePlateClickOn;
-    private final SoundEvent buttonClickOff;
-    private final SoundEvent buttonClickOn;
+public record BlockSetType(
+        String name,
+        boolean canOpenByHand,
+        SoundType soundType,
+        SoundEvent doorClose,
+        SoundEvent doorOpen,
+        SoundEvent trapdoorClose,
+        SoundEvent trapdoorOpen,
+        SoundEvent pressurePlateClickOff,
+        SoundEvent pressurePlateClickOn,
+        SoundEvent buttonClickOff,
+        SoundEvent buttonClickOn) {
     private static final Set<BlockSetType> VALUES = new ObjectArraySet();
     public static final BlockSetType IRON = register(new BlockSetType("iron", false, SoundType.METAL, SoundEvents.IRON_DOOR_CLOSE, SoundEvents.IRON_DOOR_OPEN, SoundEvents.IRON_TRAPDOOR_CLOSE, SoundEvents.IRON_TRAPDOOR_OPEN, SoundEvents.METAL_PRESSURE_PLATE_CLICK_OFF, SoundEvents.METAL_PRESSURE_PLATE_CLICK_ON, SoundEvents.STONE_BUTTON_CLICK_OFF, SoundEvents.STONE_BUTTON_CLICK_ON));
     public static final BlockSetType GOLD = register(new BlockSetType("gold", false, SoundType.METAL, SoundEvents.IRON_DOOR_CLOSE, SoundEvents.IRON_DOOR_OPEN, SoundEvents.IRON_TRAPDOOR_CLOSE, SoundEvents.IRON_TRAPDOOR_OPEN, SoundEvents.METAL_PRESSURE_PLATE_CLICK_OFF, SoundEvents.METAL_PRESSURE_PLATE_CLICK_ON, SoundEvents.STONE_BUTTON_CLICK_OFF, SoundEvents.STONE_BUTTON_CLICK_ON));
@@ -48,48 +48,4 @@ public record BlockSetType(String p, boolean q, SoundType r, SoundEvent s, Sound
     public static Stream<BlockSetType> values() {
         return VALUES.stream();
     }
-
-    public String name() {
-        return this.name;
-    }
-
-    public boolean canOpenByHand() {
-        return this.canOpenByHand;
-    }
-
-    public SoundType soundType() {
-        return this.soundType;
-    }
-
-    public SoundEvent doorClose() {
-        return this.doorClose;
-    }
-
-    public SoundEvent doorOpen() {
-        return this.doorOpen;
-    }
-
-    public SoundEvent trapdoorClose() {
-        return this.trapdoorClose;
-    }
-
-    public SoundEvent trapdoorOpen() {
-        return this.trapdoorOpen;
-    }
-
-    public SoundEvent pressurePlateClickOff() {
-        return this.pressurePlateClickOff;
-    }
-
-    public SoundEvent pressurePlateClickOn() {
-        return this.pressurePlateClickOn;
-    }
-
-    public SoundEvent buttonClickOff() {
-        return this.buttonClickOff;
-    }
-
-    public SoundEvent buttonClickOn() {
-        return this.buttonClickOn;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
index e29f75d34822ed3b4b8cbd48e116f31d34265b5a..d980945f175ff0866aefd1116a28ee2cbd6b8768 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
@@ -35,7 +35,7 @@ public class EnumProperty<T extends Enum<T> & StringRepresentable> extends Prope
     }
 
     public Optional<T> getValue(String s) {
-        return Optional.ofNullable((Enum)this.names.get(s));
+        return Optional.ofNullable(this.names.get(s));
     }
 
     public String getName(T enum_) {
@@ -68,7 +68,7 @@ public class EnumProperty<T extends Enum<T> & StringRepresentable> extends Prope
     }
 
     public static <T extends Enum<T> & StringRepresentable> EnumProperty<T> create(String s, Class<T> clazz, Predicate<T> predicate) {
-        return create(s, clazz, Arrays.stream((Enum[])clazz.getEnumConstants()).filter(predicate).collect(Collectors.toList()));
+        return create(s, clazz, Arrays.stream(clazz.getEnumConstants()).filter(predicate).collect(Collectors.toList()));
     }
 
     public static <T extends Enum<T> & StringRepresentable> EnumProperty<T> create(String s, Class<T> clazz, T... enums) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
index b14cb95584778e4415aee9910b0deedb4184a4af..d4b40a990de9b83206bbddab7f14ed0ed0518ec7 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
@@ -89,26 +89,15 @@ public abstract class Property<T extends Comparable<T>> {
         return dataResult.map((comparable) -> stateHolder.setValue(this, comparable)).setPartial(stateHolder);
     }
 
-    public static record Value<T extends Comparable<T>>(Property<T> a, T b) {
-        private final Property<T> property;
-        private final T value;
-
+    public static record Value<T extends Comparable<T>>(Property<T> property, T value) {
         public Value {
-            if (!property.getPossibleValues().contains(comparable)) {
-                throw new IllegalArgumentException("Value " + comparable + " does not belong to property " + property);
+            if (!property.getPossibleValues().contains(value)) {
+                throw new IllegalArgumentException("Value " + value + " does not belong to property " + property);
             }
         }
 
         public String toString() {
             return this.property.getName() + "=" + this.property.getName(this.value);
         }
-
-        public Property<T> property() {
-            return this.property;
-        }
-
-        public T value() {
-            return this.value;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/WoodType.java b/src/main/java/net/minecraft/world/level/block/state/properties/WoodType.java
index 8d06a9d4e978d46be94047a2cc4c4c5e92964c16..21ec522032dfa5282631fb0dbc4b375b789c14ad 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/WoodType.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/WoodType.java
@@ -7,13 +7,7 @@ import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.level.block.SoundType;
 
-public record WoodType(String l, BlockSetType m, SoundType n, SoundType o, SoundEvent p, SoundEvent q) {
-    private final String name;
-    private final BlockSetType setType;
-    private final SoundType soundType;
-    private final SoundType hangingSignSoundType;
-    private final SoundEvent fenceGateClose;
-    private final SoundEvent fenceGateOpen;
+public record WoodType(String name, BlockSetType setType, SoundType soundType, SoundType hangingSignSoundType, SoundEvent fenceGateClose, SoundEvent fenceGateOpen) {
     private static final Set<WoodType> VALUES = new ObjectArraySet();
     public static final WoodType OAK = register(new WoodType("oak", BlockSetType.OAK));
     public static final WoodType SPRUCE = register(new WoodType("spruce", BlockSetType.SPRUCE));
@@ -39,28 +33,4 @@ public record WoodType(String l, BlockSetType m, SoundType n, SoundType o, Sound
     public static Stream<WoodType> values() {
         return VALUES.stream();
     }
-
-    public String name() {
-        return this.name;
-    }
-
-    public BlockSetType setType() {
-        return this.setType;
-    }
-
-    public SoundType soundType() {
-        return this.soundType;
-    }
-
-    public SoundType hangingSignSoundType() {
-        return this.hangingSignSoundType;
-    }
-
-    public SoundEvent fenceGateClose() {
-        return this.fenceGateClose;
-    }
-
-    public SoundEvent fenceGateOpen() {
-        return this.fenceGateOpen;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index 799b4b7c150a891381575159e7bf91e3e7530028..77c3193e2720393afc7341a806dc3588064bdecc 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -455,16 +455,5 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
         return this.skyLightSources;
     }
 
-    public static record TicksToSave(SerializableTickContainer<Block> a, SerializableTickContainer<Fluid> b) {
-        private final SerializableTickContainer<Block> blocks;
-        private final SerializableTickContainer<Fluid> fluids;
-
-        public SerializableTickContainer<Block> blocks() {
-            return this.blocks;
-        }
-
-        public SerializableTickContainer<Fluid> fluids() {
-            return this.fluids;
-        }
-    }
-}
\ No newline at end of file
+    public static record TicksToSave(SerializableTickContainer<Block> blocks, SerializableTickContainer<Fluid> fluids) {}
+}
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
index 93c5c3eacf61dc8ef804cbc02a018ff4ae3d2e52..9ed4eebbcc9dac8c6ecb091b5c8bcf84d7e739cf 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -120,7 +120,7 @@ public abstract class ChunkGenerator {
 
         for(Holder<Structure> holder : holderSet) {
             for(StructurePlacement structurePlacement : chunkGeneratorStructureState.getPlacementsForStructure(holder)) {
-                (map.computeIfAbsent(structurePlacement, (structurePlacement) -> new ObjectArraySet())).add(holder);
+                (map.computeIfAbsent(structurePlacement, (structurePlacementIn) -> new ObjectArraySet())).add(holder);
             }
         }
 
@@ -272,9 +272,9 @@ public abstract class ChunkGenerator {
             long l = worldgenRandom.setDecorationSeed(worldGenLevel.getSeed(), blockPos.getX(), blockPos.getZ());
             Set<Holder<Biome>> set = new ObjectArraySet();
             ChunkPos.rangeClosed(sectionPos.chunk(), 1).forEach((chunkPosx) -> {
-                ChunkAccess chunkAccess = worldGenLevel.getChunk(chunkPosx.x, chunkPosx.z);
+                ChunkAccess chunkAccessIn = worldGenLevel.getChunk(chunkPosx.x, chunkPosx.z);
 
-                for(LevelChunkSection levelChunkSection : chunkAccess.getSections()) {
+                for(LevelChunkSection levelChunkSection : chunkAccessIn.getSections()) {
                     levelChunkSection.getBiomes().getAll(set::add);
                 }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
index e864587b601257437f94b2b211717dca60daac3f..5ed8f068262c333194747dafa01788a421b660e8 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
@@ -139,8 +139,8 @@ public class ChunkGeneratorStructureState {
             }
 
             return Util.sequence(list).thenApply((listx) -> {
-                double d = (double)stopwatch.stop().elapsed(TimeUnit.MILLISECONDS) / 1000.0D;
-                LOGGER.debug("Calculation for {} took {}s", holder, d);
+                double elapsed = (double)stopwatch.stop().elapsed(TimeUnit.MILLISECONDS) / 1000.0D;
+                LOGGER.debug("Calculation for {} took {}s", holder, elapsed);
                 return listx;
             });
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
index 084b770a471b135e199b70a1bf84e8d4a5c84d73..3716c30948134532f9e6bbfe5301c2bb6592ab6a 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
@@ -35,13 +35,18 @@ public class ChunkStatus {
     private static final ChunkStatus.LoadingTask PASSTHROUGH_LOAD_TASK = (chunkStatus, serverLevel, structureTemplateManager, threadedLevelLightEngine, function, chunkAccess) -> CompletableFuture.completedFuture(Either.left(chunkAccess));
     public static final ChunkStatus EMPTY = registerSimple("empty", (ChunkStatus)null, -1, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkStatus, serverLevel, chunkGenerator, list, chunkAccess) -> {
     });
-    public static final ChunkStatus STRUCTURE_STARTS = register("structure_starts", EMPTY, 0, false, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkStatus, executor, serverLevel, chunkGenerator, structureTemplateManager, threadedLevelLightEngine, function, list, chunkAccess) -> {
-        if (serverLevel.getServer().getWorldData().worldGenOptions().generateStructures()) {
-            chunkGenerator.createStructures(serverLevel.registryAccess(), serverLevel.getChunkSource().getGeneratorState(), serverLevel.structureManager(), chunkAccess, structureTemplateManager);
-        }
+    public static final ChunkStatus STRUCTURE_STARTS = register("structure_starts", EMPTY, 0, false, PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, new GenerationTask() {
+        @Override
+        public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> doWork(ChunkStatus chunkStatus, Executor executor, ServerLevel serverLevel, ChunkGenerator chunkGenerator, StructureTemplateManager structureTemplateManager, ThreadedLevelLightEngine threadedLevelLightEngine, Function<ChunkAccess, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> chunkAccessCompletableFutureFunction, List<ChunkAccess> list, ChunkAccess chunkAccess) {
+            if (serverLevel.getServer().getWorldData().worldGenOptions().generateStructures()) {
+                chunkGenerator.createStructures(serverLevel.registryAccess(), serverLevel.getChunkSource().getGeneratorState(), serverLevel.structureManager(), chunkAccess, structureTemplateManager);
+            }
 
-        serverLevel.onStructureStartsAvailable(chunkAccess);
-        return CompletableFuture.completedFuture(Either.left(chunkAccess));
+                serverLevel.onStructureStartsAvailable(chunkAccess);
+
+
+            return CompletableFuture.completedFuture(Either.left(chunkAccess));
+        }
     }, (chunkStatus, serverLevel, structureTemplateManager, threadedLevelLightEngine, function, chunkAccess) -> {
         serverLevel.onStructureStartsAvailable(chunkAccess);
         return CompletableFuture.completedFuture(Either.left(chunkAccess));
@@ -201,9 +206,9 @@ public class ChunkStatus {
         ChunkAccess chunkAccess = (ChunkAccess)list.get(list.size() / 2);
         ProfiledDuration profiledDuration = JvmProfiler.INSTANCE.onChunkGenerate(chunkAccess.getPos(), serverLevel.dimension(), this.toString());
         return this.generationTask.doWork(this, executor, serverLevel, chunkGenerator, structureTemplateManager, threadedLevelLightEngine, function, list, chunkAccess).thenApply((either) -> {
-            either.ifLeft((chunkAccess) -> {
-                if (chunkAccess instanceof ProtoChunk) {
-                    ProtoChunk protoChunk = (ProtoChunk)chunkAccess;
+            either.ifLeft((chunkAccessIn) -> {
+                if (chunkAccessIn instanceof ProtoChunk) {
+                    ProtoChunk protoChunk = (ProtoChunk)chunkAccessIn;
                     if (!protoChunk.getStatus().isOrAfter(this)) {
                         protoChunk.setStatus(this);
                     }
@@ -271,4 +276,4 @@ public class ChunkStatus {
 
         void doWork(ChunkStatus var1, ServerLevel var2, ChunkGenerator var3, List<ChunkAccess> var4, ChunkAccess var5);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 7243d0d2e4454b70a85308dc91e6f14ed5fe69df..2be379ef765e4b4305e0701e3fb73cb2a10dd817 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -600,7 +600,7 @@ public class LevelChunk extends ChunkAccess {
 
     private <T extends BlockEntity> void updateBlockEntityTicker(T blockEntity) {
         BlockState blockState = blockEntity.getBlockState();
-        BlockEntityTicker<T> blockEntityTicker = blockState.getTicker(this.level, blockEntity.getType());
+        BlockEntityTicker<T> blockEntityTicker = (BlockEntityTicker<T>) blockState.getTicker(this.level, blockEntity.getType());
         if (blockEntityTicker == null) {
             this.removeBlockEntityTicker(blockEntity.getBlockPos());
         } else {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index dc2566d031a68ca4cb32840ef372f802d1c1ac3b..7739314995cd091c5466371182303b6ad318f7d6 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -131,11 +131,11 @@ public class LevelChunkSection {
             }
         }
 
-        BlockCounter 1BlockCounter = new BlockCounter();
-        this.states.count(1BlockCounter);
-        this.nonEmptyBlockCount = (short)1BlockCounter.nonEmptyBlockCount;
-        this.tickingBlockCount = (short)1BlockCounter.tickingBlockCount;
-        this.tickingFluidCount = (short)1BlockCounter.tickingFluidCount;
+        BlockCounter blockCounter = new BlockCounter();
+        this.states.count(blockCounter);
+        this.nonEmptyBlockCount = (short)blockCounter.nonEmptyBlockCount;
+        this.tickingBlockCount = (short)blockCounter.tickingBlockCount;
+        this.tickingFluidCount = (short)blockCounter.tickingFluidCount;
     }
 
     public PalettedContainer<BlockState> getStates() {
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
index e66f386c22d8e15338cb82b6b827838c4eeddc9f..7df1e2dd15acaa886e27ea04ed8cbdb8997756db 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -51,7 +51,7 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
     }
 
     private static <T, C extends PalettedContainerRO<T>> Codec<C> codec(IdMap<T> idMap, Codec<T> codec, PalettedContainer.Strategy strategy, T object, PalettedContainerRO.Unpacker<T, C> unpacker) {
-        return RecordCodecBuilder.create((instance) -> instance.group(codec.mapResult(ExtraCodecs.orElsePartial(object)).listOf().fieldOf("palette").forGetter(PalettedContainerRO.PackedData::paletteEntries), Codec.LONG_STREAM.optionalFieldOf("data").forGetter(PalettedContainerRO.PackedData::storage)).apply(instance, PalettedContainerRO.PackedData::new)).comapFlatMap((packedData) -> unpacker.read(idMap, strategy, packedData), (palettedContainerRO) -> palettedContainerRO.pack(idMap, strategy));
+        return RecordCodecBuilder.<PalettedContainerRO.PackedData<T>>create((instance) -> instance.group(codec.mapResult(ExtraCodecs.orElsePartial(object)).listOf().fieldOf("palette").forGetter(PalettedContainerRO.PackedData::paletteEntries), Codec.LONG_STREAM.optionalFieldOf("data").forGetter(PalettedContainerRO.PackedData::storage)).apply(instance, PalettedContainerRO.PackedData::new)).comapFlatMap((packedData) -> unpacker.read(idMap, strategy, packedData), (palettedContainerRO) -> palettedContainerRO.pack(idMap, strategy));
     }
 
     public PalettedContainer(IdMap<T> idMap, PalettedContainer.Strategy strategy, PalettedContainer.Configuration<T> configuration, BitStorage bitStorage, List<T> list) {
@@ -271,10 +271,7 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
         }
     }
 
-    static record Configuration<T>(Palette.Factory a, int b) {
-        private final Palette.Factory factory;
-        private final int bits;
-
+    static record Configuration<T>(Palette.Factory factory, int bits) {
         public PalettedContainer.Data<T> createData(IdMap<T> idMap, PaletteResize<T> paletteResize, int i) {
             BitStorage bitStorage = (BitStorage)(this.bits == 0 ? new ZeroBitStorage(i) : new SimpleBitStorage(this.bits, i));
             Palette<T> palette = this.factory.create(this.bits, idMap, paletteResize, List.of());
@@ -295,11 +292,7 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
         void accept(T var1, int var2);
     }
 
-    static record Data<T>(PalettedContainer.Configuration<T> a, BitStorage b, Palette<T> c) {
-        private final PalettedContainer.Configuration<T> configuration;
-        final BitStorage storage;
-        final Palette<T> palette;
-
+    static record Data<T>(PalettedContainer.Configuration<T> configuration, BitStorage storage, Palette<T> palette) {
         public void copyFrom(Palette<T> palette, BitStorage bitStorage) {
             for(int i = 0; i < bitStorage.getSize(); ++i) {
                 T object = palette.valueFor(bitStorage.get(i));
@@ -321,18 +314,6 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
         public PalettedContainer.Data<T> copy() {
             return new PalettedContainer.Data<>(this.configuration, this.storage.copy(), this.palette.copy());
         }
-
-        public PalettedContainer.Configuration<T> configuration() {
-            return this.configuration;
-        }
-
-        public BitStorage storage() {
-            return this.storage;
-        }
-
-        public Palette<T> palette() {
-            return this.palette;
-        }
     }
 
     public abstract static class Strategy {
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainerRO.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainerRO.java
index fe6f3f3a8dd8f81ef044a22fb4ad0edb0c61e4ca..1eb1343176fb5bc9e31b10bcbebc352d23725473 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainerRO.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainerRO.java
@@ -26,17 +26,7 @@ public interface PalettedContainerRO<T> {
 
     PalettedContainerRO.PackedData<T> pack(IdMap<T> var1, PalettedContainer.Strategy var2);
 
-    public static record PackedData<T>(List<T> a, Optional<LongStream> b) {
-        private final List<T> paletteEntries;
-        private final Optional<LongStream> storage;
-
-        public List<T> paletteEntries() {
-            return this.paletteEntries;
-        }
-
-        public Optional<LongStream> storage() {
-            return this.storage;
-        }
+    public static record PackedData<T>(List<T> paletteEntries, Optional<LongStream> storage) {
     }
 
     public interface Unpacker<T, C extends PalettedContainerRO<T>> {
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 0badbb33edaf5e3014a0c4d640a61921c640b91e..2215c7ff2edcb78a75fc029ace1004611d0ab8bf 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -144,7 +144,7 @@ public class ChunkSerializer {
         ChunkStatus.ChunkType chunkType = getChunkTypeFromTag(compoundTag);
         BlendingData blendingData;
         if (compoundTag.contains("blending_data", 10)) {
-            blendingData = (BlendingData)BlendingData.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("blending_data"))).resultOrPartial(LOGGER::error).orElse(null);
+            blendingData = (BlendingData)BlendingData.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("blending_data"))).resultOrPartial(LOGGER::error).orElse(null);
         } else {
             blendingData = null;
         }
@@ -161,7 +161,7 @@ public class ChunkSerializer {
             chunkAccess = protoChunk;
             protoChunk.setInhabitedTime(l);
             if (compoundTag.contains("below_zero_retrogen", 10)) {
-                BelowZeroRetrogen.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.getCompound("below_zero_retrogen"))).resultOrPartial(LOGGER::error).ifPresent(protoChunk::setBelowZeroRetrogen);
+                BelowZeroRetrogen.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.getCompound("below_zero_retrogen"))).resultOrPartial(LOGGER::error).ifPresent(protoChunk::setBelowZeroRetrogen);
             }
 
             ChunkStatus chunkStatus = ChunkStatus.byName(compoundTag.getString("Status"));
@@ -365,13 +365,13 @@ public class ChunkSerializer {
 
             if (listTag2 != null) {
                 for(int i = 0; i < listTag2.size(); ++i) {
-                    CompoundTag compoundTag = listTag2.getCompound(i);
-                    boolean flag = compoundTag.getBoolean("keepPacked");
+                    CompoundTag tag = listTag2.getCompound(i);
+                    boolean flag = tag.getBoolean("keepPacked");
                     if (flag) {
-                        levelChunk.setBlockEntityNbt(compoundTag);
+                        levelChunk.setBlockEntityNbt(tag);
                     } else {
-                        BlockPos blockPos = BlockEntity.getPosFromTag(compoundTag);
-                        BlockEntity blockEntity = BlockEntity.loadStatic(blockPos, levelChunk.getBlockState(blockPos), compoundTag);
+                        BlockPos blockPos = BlockEntity.getPosFromTag(tag);
+                        BlockEntity blockEntity = BlockEntity.loadStatic(blockPos, levelChunk.getBlockState(blockPos), tag);
                         if (blockEntity != null) {
                             levelChunk.setBlockEntity(blockEntity);
                         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java b/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java
index ee1c02b67a1c656bed4e398bf0d35047380e88d0..85ebfbb363ab2e2695c23a70ae266a526e092611 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java
@@ -107,8 +107,7 @@ public class IOWorker implements ChunkScanAccess, AutoCloseable {
                 if (tag instanceof CompoundTag) {
                     CompoundTag compoundTag = (CompoundTag)tag;
                     if (this.isOldChunk(compoundTag)) {
-                        int i = chunkPosx.getRegionLocalZ() * 32 + chunkPosx.getRegionLocalX();
-                        bitSet.set(i);
+                        bitSet.set(chunkPosx.getRegionLocalZ() * 32 + chunkPosx.getRegionLocalX());
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
index 7cbd2f1577813a3d02744a92a963b81d555c0cdf..9e6ef610f7b0a9a852d5a8fc0a4415b1ed57d485 100644
--- a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
+++ b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
@@ -21,22 +21,22 @@ import net.minecraft.util.valueproviders.IntProvider;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 
-public record DimensionType(OptionalLong k, boolean l, boolean m, boolean n, boolean o, double p, boolean q, boolean r, int s, int t, int u, TagKey<Block> v, ResourceLocation w, float x, DimensionType.MonsterSettings y) {
-    private final OptionalLong fixedTime;
-    private final boolean hasSkyLight;
-    private final boolean hasCeiling;
-    private final boolean ultraWarm;
-    private final boolean natural;
-    private final double coordinateScale;
-    private final boolean bedWorks;
-    private final boolean respawnAnchorWorks;
-    private final int minY;
-    private final int height;
-    private final int logicalHeight;
-    private final TagKey<Block> infiniburn;
-    private final ResourceLocation effectsLocation;
-    private final float ambientLight;
-    private final DimensionType.MonsterSettings monsterSettings;
+public record DimensionType(
+        OptionalLong fixedTime,
+        boolean hasSkyLight,
+        boolean hasCeiling,
+        boolean ultraWarm,
+        boolean natural,
+        double coordinateScale,
+        boolean bedWorks,
+        boolean respawnAnchorWorks,
+        int minY,
+        int height,
+        int logicalHeight,
+        TagKey<Block> infiniburn,
+        ResourceLocation effectsLocation,
+        float ambientLight,
+        DimensionType.MonsterSettings monsterSettings) {
     public static final int BITS_FOR_Y = BlockPos.PACKED_Y_LENGTH;
     public static final int MIN_HEIGHT = 16;
     public static final int Y_SIZE = (1 << BITS_FOR_Y) - 32;
@@ -50,15 +50,15 @@ public record DimensionType(OptionalLong k, boolean l, boolean m, boolean n, boo
     public static final Codec<Holder<DimensionType>> CODEC = RegistryFileCodec.create(Registries.DIMENSION_TYPE, DIRECT_CODEC);
 
     public DimensionType {
-        if (i2 < 16) {
+        if (height < 16) {
             throw new IllegalStateException("height has to be at least 16");
-        } else if (i + i2 > MAX_Y + 1) {
+        } else if (minY + height > MAX_Y + 1) {
             throw new IllegalStateException("min_y + height cannot be higher than: " + (MAX_Y + 1));
-        } else if (i3 > i2) {
+        } else if (logicalHeight > height) {
             throw new IllegalStateException("logical_height cannot be higher than height");
-        } else if (i2 % 16 != 0) {
+        } else if (height % 16 != 0) {
             throw new IllegalStateException("height has to be multiple of 16");
-        } else if (i % 16 != 0) {
+        } else if (minY % 16 != 0) {
             throw new IllegalStateException("min_y has to be a multiple of 16");
         }
     }
@@ -131,87 +131,7 @@ public record DimensionType(OptionalLong k, boolean l, boolean m, boolean n, boo
         return this.monsterSettings.monsterSpawnBlockLightLimit();
     }
 
-    public OptionalLong fixedTime() {
-        return this.fixedTime;
-    }
-
-    public boolean hasSkyLight() {
-        return this.hasSkyLight;
-    }
-
-    public boolean hasCeiling() {
-        return this.hasCeiling;
-    }
-
-    public boolean ultraWarm() {
-        return this.ultraWarm;
-    }
-
-    public boolean natural() {
-        return this.natural;
-    }
-
-    public double coordinateScale() {
-        return this.coordinateScale;
-    }
-
-    public boolean bedWorks() {
-        return this.bedWorks;
-    }
-
-    public boolean respawnAnchorWorks() {
-        return this.respawnAnchorWorks;
-    }
-
-    public int minY() {
-        return this.minY;
-    }
-
-    public int height() {
-        return this.height;
-    }
-
-    public int logicalHeight() {
-        return this.logicalHeight;
-    }
-
-    public TagKey<Block> infiniburn() {
-        return this.infiniburn;
-    }
-
-    public ResourceLocation effectsLocation() {
-        return this.effectsLocation;
-    }
-
-    public float ambientLight() {
-        return this.ambientLight;
-    }
-
-    public DimensionType.MonsterSettings monsterSettings() {
-        return this.monsterSettings;
-    }
-
-    public static record MonsterSettings(boolean b, boolean c, IntProvider d, int e) {
-        private final boolean piglinSafe;
-        private final boolean hasRaids;
-        private final IntProvider monsterSpawnLightTest;
-        private final int monsterSpawnBlockLightLimit;
+    public static record MonsterSettings(boolean piglinSafe, boolean hasRaids, IntProvider monsterSpawnLightTest, int monsterSpawnBlockLightLimit) {
         public static final MapCodec<DimensionType.MonsterSettings> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.BOOL.fieldOf("piglin_safe").forGetter(DimensionType.MonsterSettings::piglinSafe), Codec.BOOL.fieldOf("has_raids").forGetter(DimensionType.MonsterSettings::hasRaids), IntProvider.codec(0, 15).fieldOf("monster_spawn_light_level").forGetter(DimensionType.MonsterSettings::monsterSpawnLightTest), Codec.intRange(0, 15).fieldOf("monster_spawn_block_light_limit").forGetter(DimensionType.MonsterSettings::monsterSpawnBlockLightLimit)).apply(instance, DimensionType.MonsterSettings::new));
-
-        public boolean piglinSafe() {
-            return this.piglinSafe;
-        }
-
-        public boolean hasRaids() {
-            return this.hasRaids;
-        }
-
-        public IntProvider monsterSpawnLightTest() {
-            return this.monsterSpawnLightTest;
-        }
-
-        public int monsterSpawnBlockLightLimit() {
-            return this.monsterSpawnBlockLightLimit;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/dimension/LevelStem.java b/src/main/java/net/minecraft/world/level/dimension/LevelStem.java
index b5dc19d86b8cb4ace7b144fada7be0d89d8eaa53..89e5a8bbcc04989d947f159101a7002f64b4c226 100644
--- a/src/main/java/net/minecraft/world/level/dimension/LevelStem.java
+++ b/src/main/java/net/minecraft/world/level/dimension/LevelStem.java
@@ -8,19 +8,9 @@ import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 
-public record LevelStem(Holder<DimensionType> e, ChunkGenerator f) {
-    private final Holder<DimensionType> type;
-    private final ChunkGenerator generator;
+public record LevelStem(Holder<DimensionType> type, ChunkGenerator generator) {
     public static final Codec<LevelStem> CODEC = RecordCodecBuilder.create((instance) -> instance.group(DimensionType.CODEC.fieldOf("type").forGetter(LevelStem::type), ChunkGenerator.CODEC.fieldOf("generator").forGetter(LevelStem::generator)).apply(instance, instance.stable(LevelStem::new)));
     public static final ResourceKey<LevelStem> OVERWORLD = ResourceKey.create(Registries.LEVEL_STEM, new ResourceLocation("overworld"));
     public static final ResourceKey<LevelStem> NETHER = ResourceKey.create(Registries.LEVEL_STEM, new ResourceLocation("the_nether"));
     public static final ResourceKey<LevelStem> END = ResourceKey.create(Registries.LEVEL_STEM, new ResourceLocation("the_end"));
-
-    public Holder<DimensionType> type() {
-        return this.type;
-    }
-
-    public ChunkGenerator generator() {
-        return this.generator;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
index 65ae8af904eba0b92f64badd1395a7c8d0cdc4b1..c37de531aa0cddeee126361bc971d5497df5b187 100644
--- a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
+++ b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
@@ -523,43 +523,15 @@ public class EndDragonFight {
         return this.dragonUUID;
     }
 
-    public static record Data(boolean c, boolean d, boolean e, boolean f, Optional<UUID> g, Optional<BlockPos> h, Optional<List<Integer>> i) {
-        final boolean needsStateScanning;
-        final boolean dragonKilled;
-        final boolean previouslyKilled;
-        final boolean isRespawning;
-        final Optional<UUID> dragonUUID;
-        final Optional<BlockPos> exitPortalLocation;
-        final Optional<List<Integer>> gateways;
+    public static record Data(
+            boolean needsStateScanning,
+            boolean dragonKilled,
+            boolean previouslyKilled,
+            boolean isRespawning,
+            Optional<UUID> dragonUUID,
+            Optional<BlockPos> exitPortalLocation,
+            Optional<List<Integer>> gateways) {
         public static final Codec<EndDragonFight.Data> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.BOOL.fieldOf("NeedsStateScanning").orElse(true).forGetter(EndDragonFight.Data::needsStateScanning), Codec.BOOL.fieldOf("DragonKilled").orElse(false).forGetter(EndDragonFight.Data::dragonKilled), Codec.BOOL.fieldOf("PreviouslyKilled").orElse(false).forGetter(EndDragonFight.Data::previouslyKilled), Codec.BOOL.optionalFieldOf("IsRespawning", false).forGetter(EndDragonFight.Data::isRespawning), UUIDUtil.CODEC.optionalFieldOf("Dragon").forGetter(EndDragonFight.Data::dragonUUID), BlockPos.CODEC.optionalFieldOf("ExitPortalLocation").forGetter(EndDragonFight.Data::exitPortalLocation), Codec.list(Codec.INT).optionalFieldOf("Gateways").forGetter(EndDragonFight.Data::gateways)).apply(instance, EndDragonFight.Data::new));
         public static final EndDragonFight.Data DEFAULT = new EndDragonFight.Data(true, false, false, false, Optional.empty(), Optional.empty(), Optional.empty());
-
-        public boolean needsStateScanning() {
-            return this.needsStateScanning;
-        }
-
-        public boolean dragonKilled() {
-            return this.dragonKilled;
-        }
-
-        public boolean previouslyKilled() {
-            return this.previouslyKilled;
-        }
-
-        public boolean isRespawning() {
-            return this.isRespawning;
-        }
-
-        public Optional<UUID> dragonUUID() {
-            return this.dragonUUID;
-        }
-
-        public Optional<BlockPos> exitPortalLocation() {
-            return this.exitPortalLocation;
-        }
-
-        public Optional<List<Integer>> gateways() {
-            return this.gateways;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/entity/EntityLookup.java b/src/main/java/net/minecraft/world/level/entity/EntityLookup.java
index 58f4d5385b5948b451f6ea18bc71159a858d11fc..4aa61d88661cf50e33b0a8d8e82fdb7acee2bc90 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntityLookup.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntityLookup.java
@@ -23,7 +23,7 @@ public class EntityLookup<T extends EntityAccess> {
         while(var3.hasNext()) {
             T entityAccess = (T)(var3.next());
             U entityAccess2 = (U)((EntityAccess)entityTypeTest.tryCast(entityAccess));
-            if (entityAccess2 != null && abortableIterationConsumer.accept((T)entityAccess2).shouldAbort()) {
+            if (entityAccess2 != null && abortableIterationConsumer.accept(entityAccess2).shouldAbort()) {
                 return;
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/entity/EntitySection.java b/src/main/java/net/minecraft/world/level/entity/EntitySection.java
index b8851d1811441662ae43aefeec002ee2d9be59a6..ce6939334d4437bf4b1f17ac9a282fdc84bfd915 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntitySection.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntitySection.java
@@ -44,7 +44,7 @@ public class EntitySection<T extends EntityAccess> {
         } else {
             for(T entityAccess : collection) {
                 U entityAccess2 = (U)((EntityAccess)entityTypeTest.tryCast(entityAccess));
-                if (entityAccess2 != null && entityAccess.getBoundingBox().intersects(aabb) && abortableIterationConsumer.accept((T)entityAccess2).shouldAbort()) {
+                if (entityAccess2 != null && entityAccess.getBoundingBox().intersects(aabb) && abortableIterationConsumer.accept(entityAccess2).shouldAbort()) {
                     return AbortableIterationConsumer.Continuation.ABORT;
                 }
             }
diff --git a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
index dfeabe6a9fad652dbd2d9929db9b602825cb2fea..2f94d1f9d6bf0eef153f58f3a12802406f9fbca2 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
@@ -105,7 +105,7 @@ public class EntitySectionStorage<T extends EntityAccess> {
 
     public LongSet getAllChunksWithExistingSections() {
         LongSet longSet = new LongOpenHashSet();
-        this.sections.keySet().forEach((l) -> longSet.add(getChunkKeyFromSectionKey(l)));
+        this.sections.keySet().forEach((java.util.function.LongConsumer) (l) -> longSet.add(getChunkKeyFromSectionKey(l)));
         return longSet;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
index 36eea12c8ba27654a0d6c739fac0e21c352cc6f3..0e57d738d89ecbb8b3c8c68e9b6f92055e6c6a7f 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
@@ -25,9 +25,9 @@ public class EntityTickList {
                 this.passive.put(entry.getIntKey(), (Entity)entry.getValue());
             }
 
-            Int2ObjectMap<Entity> int2ObjectMap = this.active;
+            Int2ObjectMap<Entity> originalMap = this.active;
             this.active = this.passive;
-            this.passive = int2ObjectMap;
+            this.passive = originalMap;
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
index 3332d328cf64f60bcdbb2ec6a22b0cb40f3f03ad..32689329ce319e0fa12368c2717c22c57bcb4fd9 100644
--- a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -223,7 +223,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
     }
 
     private void processUnloads() {
-        this.chunksToUnload.removeIf((l) -> this.chunkVisibility.get(l) != Visibility.HIDDEN ? true : this.processChunkUnload(l));
+        this.chunksToUnload.removeIf((java.util.function.LongPredicate) (l) -> this.chunkVisibility.get(l) != Visibility.HIDDEN ? true : this.processChunkUnload(l));
     }
 
     private void processPendingLoads() {
@@ -255,7 +255,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
     }
 
     public void autoSave() {
-        this.getAllChunksToSave().forEach((l) -> {
+        this.getAllChunksToSave().forEach((java.util.function.LongConsumer) (l) -> {
             boolean flag = this.chunkVisibility.get(l) == Visibility.HIDDEN;
             if (flag) {
                 this.processChunkUnload(l);
@@ -273,7 +273,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
         while(!longSet.isEmpty()) {
             this.permanentStorage.flush(false);
             this.processPendingLoads();
-            longSet.removeIf((l) -> {
+            longSet.removeIf((java.util.function.LongPredicate) (l) -> {
                 boolean flag = this.chunkVisibility.get(l) == Visibility.HIDDEN;
                 return flag ? this.processChunkUnload(l) : this.storeChunkSections(l, (entityAccess) -> {
                 });
@@ -310,7 +310,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
 
     public void dumpSections(Writer writer) throws IOException {
         CsvOutput csvOutput = CsvOutput.builder().addColumn("x").addColumn("y").addColumn("z").addColumn("visibility").addColumn("load_status").addColumn("entity_count").build(writer);
-        this.sectionStorage.getAllChunksWithExistingSections().forEach((l) -> {
+        this.sectionStorage.getAllChunksWithExistingSections().forEach((java.util.function.LongConsumer) (l) -> {
             PersistentEntitySectionManager.ChunkLoadStatus chunkLoadStatus = (PersistentEntitySectionManager.ChunkLoadStatus)this.chunkLoadStatuses.get(l);
             this.sectionStorage.getExistingSectionPositionsInChunk(l).forEach((lx) -> {
                 EntitySection<T> entitySection = this.sectionStorage.getSection(lx);
diff --git a/src/main/java/net/minecraft/world/level/gameevent/GameEvent.java b/src/main/java/net/minecraft/world/level/gameevent/GameEvent.java
index af35c44c2f2d04bcb3ec3620229e77ae2b31cba6..c8d0f1cf0ab30a9a0dc17e45a1c766b1c8189c98 100644
--- a/src/main/java/net/minecraft/world/level/gameevent/GameEvent.java
+++ b/src/main/java/net/minecraft/world/level/gameevent/GameEvent.java
@@ -104,12 +104,7 @@ public class GameEvent {
         return this.builtInRegistryHolder.is(tagKey);
     }
 
-    public static record Context(@Nullable Entity a, @Nullable BlockState b) {
-        @Nullable
-        private final Entity sourceEntity;
-        @Nullable
-        private final BlockState affectedState;
-
+    public static record Context(@Nullable Entity sourceEntity, @Nullable BlockState affectedState) {
         public static GameEvent.Context of(@Nullable Entity entity) {
             return new GameEvent.Context(entity, (BlockState)null);
         }
@@ -121,16 +116,6 @@ public class GameEvent {
         public static GameEvent.Context of(@Nullable Entity entity, @Nullable BlockState blockState) {
             return new GameEvent.Context(entity, blockState);
         }
-
-        @Nullable
-        public Entity sourceEntity() {
-            return this.sourceEntity;
-        }
-
-        @Nullable
-        public BlockState affectedState() {
-            return this.affectedState;
-        }
     }
 
     public static final class ListenerInfo implements Comparable<GameEvent.ListenerInfo> {
diff --git a/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java b/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
index d824609b33c2faac746cdcfa55f800c4e105b103..361a026525f1a6d26f6b81a6c24f7dac4b3287f8 100644
--- a/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
+++ b/src/main/java/net/minecraft/world/level/gameevent/PositionSourceType.java
@@ -27,6 +27,6 @@ public interface PositionSourceType<T extends PositionSource> {
 
     static <T extends PositionSource> void toNetwork(T positionSource, FriendlyByteBuf friendlyByteBuf) {
         friendlyByteBuf.writeResourceLocation(BuiltInRegistries.POSITION_SOURCE_TYPE.getKey(positionSource.getType()));
-        positionSource.getType().write(friendlyByteBuf, positionSource);
+        ((PositionSourceType) positionSource.getType()).write(friendlyByteBuf, positionSource);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationInfo.java b/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationInfo.java
index 63fac340e2149c46ca8f56feeb29b4f5d31ad998..096747dadb091b63cbd0098a1ecbc8bb240360b5 100644
--- a/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationInfo.java
+++ b/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationInfo.java
@@ -13,16 +13,7 @@ import net.minecraft.world.entity.projectile.Projectile;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.Vec3;
 
-public record VibrationInfo(GameEvent b, float c, Vec3 d, @Nullable UUID e, @Nullable UUID f, @Nullable Entity g) {
-    private final GameEvent gameEvent;
-    private final float distance;
-    private final Vec3 pos;
-    @Nullable
-    private final UUID uuid;
-    @Nullable
-    private final UUID projectileOwnerUuid;
-    @Nullable
-    private final Entity entity;
+public record VibrationInfo(GameEvent gameEvent, float distance, Vec3 pos, @Nullable UUID uuid, @Nullable UUID projectileOwnerUuid, @Nullable Entity entity) {
     public static final Codec<VibrationInfo> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BuiltInRegistries.GAME_EVENT.byNameCodec().fieldOf("game_event").forGetter(VibrationInfo::gameEvent), Codec.floatRange(0.0F, Float.MAX_VALUE).fieldOf("distance").forGetter(VibrationInfo::distance), Vec3.CODEC.fieldOf("pos").forGetter(VibrationInfo::pos), UUIDUtil.CODEC.optionalFieldOf("source").forGetter((vibrationInfo) -> Optional.ofNullable(vibrationInfo.uuid())), UUIDUtil.CODEC.optionalFieldOf("projectile_owner").forGetter((vibrationInfo) -> Optional.ofNullable(vibrationInfo.projectileOwnerUuid()))).apply(instance, (gameEvent, f, vec3, optional, optional2) -> new VibrationInfo(gameEvent, f, vec3, (UUID)optional.orElse(null), (UUID)optional2.orElse(null))));
 
     public VibrationInfo(GameEvent gameEvent, float f, Vec3 vec3, @Nullable UUID uuid, @Nullable UUID uuid2) {
@@ -52,31 +43,4 @@ public record VibrationInfo(GameEvent b, float c, Vec3 d, @Nullable UUID e, @Nul
     public Optional<Entity> getProjectileOwner(ServerLevel serverLevel) {
         return this.getEntity(serverLevel).filter((entity) -> entity instanceof Projectile).map((entity) -> (Projectile)entity).map(Projectile::getOwner).or(() -> Optional.ofNullable(this.projectileOwnerUuid).map(serverLevel::getEntity));
     }
-
-    public GameEvent gameEvent() {
-        return this.gameEvent;
-    }
-
-    public float distance() {
-        return this.distance;
-    }
-
-    public Vec3 pos() {
-        return this.pos;
-    }
-
-    @Nullable
-    public UUID uuid() {
-        return this.uuid;
-    }
-
-    @Nullable
-    public UUID projectileOwnerUuid() {
-        return this.projectileOwnerUuid;
-    }
-
-    @Nullable
-    public Entity entity() {
-        return this.entity;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java b/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java
index d8433b51ef614df551be5fff0a3d77ba18c272d1..e2c16edab60f6b029ee4674c7ab9e5d7c5b411e2 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java
@@ -174,21 +174,6 @@ public class Beardifier implements DensityFunctions.BeardifierOrMarker {
     }
 
     @VisibleForTesting
-    public static record Rigid(BoundingBox a, TerrainAdjustment b, int c) {
-        private final BoundingBox box;
-        private final TerrainAdjustment terrainAdjustment;
-        private final int groundLevelDelta;
-
-        public BoundingBox box() {
-            return this.box;
-        }
-
-        public TerrainAdjustment terrainAdjustment() {
-            return this.terrainAdjustment;
-        }
-
-        public int groundLevelDelta() {
-            return this.groundLevelDelta;
-        }
+    public static record Rigid(BoundingBox box, TerrainAdjustment terrainAdjustment, int groundLevelDelta) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/DensityFunction.java b/src/main/java/net/minecraft/world/level/levelgen/DensityFunction.java
index e208c2d789233491f4be6b9368766b688ee1941c..b8e99c3fda3220b5fad0c78db687f3570ebdc20d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/DensityFunction.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/DensityFunction.java
@@ -79,10 +79,7 @@ public interface DensityFunction {
         }
     }
 
-    public static record NoiseHolder(Holder<NormalNoise.NoiseParameters> b, @Nullable NormalNoise c) {
-        private final Holder<NormalNoise.NoiseParameters> noiseData;
-        @Nullable
-        private final NormalNoise noise;
+    public static record NoiseHolder(Holder<NormalNoise.NoiseParameters> noiseData, @Nullable NormalNoise noise) {
         public static final Codec<DensityFunction.NoiseHolder> CODEC = NormalNoise.NoiseParameters.CODEC.xmap((holder) -> new DensityFunction.NoiseHolder(holder, (NormalNoise)null), DensityFunction.NoiseHolder::noiseData);
 
         public NoiseHolder(Holder<NormalNoise.NoiseParameters> holder) {
@@ -96,15 +93,6 @@ public interface DensityFunction {
         public double maxValue() {
             return this.noise == null ? 2.0D : this.noise.maxValue();
         }
-
-        public Holder<NormalNoise.NoiseParameters> noiseData() {
-            return this.noiseData;
-        }
-
-        @Nullable
-        public NormalNoise noise() {
-            return this.noise;
-        }
     }
 
     public interface SimpleFunction extends DensityFunction {
@@ -117,22 +105,7 @@ public interface DensityFunction {
         }
     }
 
-    public static record SinglePointContext(int a, int b, int c) implements DensityFunction.FunctionContext {
-        private final int blockX;
-        private final int blockY;
-        private final int blockZ;
-
-        public int blockX() {
-            return this.blockX;
-        }
-
-        public int blockY() {
-            return this.blockY;
-        }
-
-        public int blockZ() {
-            return this.blockZ;
-        }
+    public static record SinglePointContext(int blockX, int blockY, int blockZ) implements DensityFunction.FunctionContext {
     }
 
     public interface Visitor {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java b/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java
index cc6b4312ff0ed3a14bf0d3965e4132f355c54a6e..58e07e853f7d94328331eb22429c57386e27f028 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java
@@ -238,13 +238,7 @@ public final class DensityFunctions {
         return add(mul(densityFunction, add(densityFunction2, constant(-d))), constant(d));
     }
 
-    static record Ap2(DensityFunctions.TwoArgumentSimpleFunction.Type e, DensityFunction f, DensityFunction g, double h, double i) implements DensityFunctions.TwoArgumentSimpleFunction {
-        private final DensityFunctions.TwoArgumentSimpleFunction.Type type;
-        private final DensityFunction argument1;
-        private final DensityFunction argument2;
-        private final double minValue;
-        private final double maxValue;
-
+    static record Ap2(DensityFunctions.TwoArgumentSimpleFunction.Type type, DensityFunction argument1, DensityFunction argument2, double minValue, double maxValue) implements DensityFunctions.TwoArgumentSimpleFunction {
         public double compute(DensityFunction.FunctionContext functionContext) {
             double d = this.argument1.compute(functionContext);
             double var10000;
@@ -307,26 +301,6 @@ public final class DensityFunctions {
         public DensityFunction mapAll(DensityFunction.Visitor visitor) {
             return visitor.apply(DensityFunctions.TwoArgumentSimpleFunction.create(this.type, this.argument1.mapAll(visitor), this.argument2.mapAll(visitor)));
         }
-
-        public double minValue() {
-            return this.minValue;
-        }
-
-        public double maxValue() {
-            return this.maxValue;
-        }
-
-        public DensityFunctions.TwoArgumentSimpleFunction.Type type() {
-            return this.type;
-        }
-
-        public DensityFunction argument1() {
-            return this.argument1;
-        }
-
-        public DensityFunction argument2() {
-            return this.argument2;
-        }
     }
 
     protected static enum BeardifierMarker implements DensityFunctions.BeardifierOrMarker {
@@ -383,8 +357,7 @@ public final class DensityFunctions {
         }
     }
 
-    static record BlendDensity(DensityFunction a) implements DensityFunctions.TransformerWithContext {
-        private final DensityFunction input;
+    static record BlendDensity(DensityFunction input) implements DensityFunctions.TransformerWithContext {
         static final KeyDispatchDataCodec<DensityFunctions.BlendDensity> CODEC = DensityFunctions.singleFunctionArgumentCodec(DensityFunctions.BlendDensity::new, DensityFunctions.BlendDensity::input);
 
         public double transform(DensityFunction.FunctionContext functionContext, double d) {
@@ -406,10 +379,6 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction input() {
-            return this.input;
-        }
     }
 
     protected static enum BlendOffset implements DensityFunction.SimpleFunction {
@@ -438,10 +407,7 @@ public final class DensityFunctions {
         }
     }
 
-    protected static record Clamp(DensityFunction e, double f, double g) implements DensityFunctions.PureTransformer {
-        private final DensityFunction input;
-        private final double minValue;
-        private final double maxValue;
+    protected static record Clamp(DensityFunction input, double minValue, double maxValue) implements DensityFunctions.PureTransformer {
         private static final MapCodec<DensityFunctions.Clamp> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.DIRECT_CODEC.fieldOf("input").forGetter(DensityFunctions.Clamp::input), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("min").forGetter(DensityFunctions.Clamp::minValue), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("max").forGetter(DensityFunctions.Clamp::maxValue)).apply(instance, DensityFunctions.Clamp::new));
         public static final KeyDispatchDataCodec<DensityFunctions.Clamp> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
@@ -456,22 +422,9 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction input() {
-            return this.input;
-        }
-
-        public double minValue() {
-            return this.minValue;
-        }
-
-        public double maxValue() {
-            return this.maxValue;
-        }
     }
 
-    static record Constant(double a) implements DensityFunction.SimpleFunction {
-        final double value;
+    static record Constant(double value) implements DensityFunction.SimpleFunction {
         static final KeyDispatchDataCodec<DensityFunctions.Constant> CODEC = DensityFunctions.singleArgumentCodec(DensityFunctions.NOISE_VALUE_CODEC, DensityFunctions.Constant::new, DensityFunctions.Constant::value);
         static final DensityFunctions.Constant ZERO = new DensityFunctions.Constant(0.0D);
 
@@ -494,10 +447,6 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public double value() {
-            return this.value;
-        }
     }
 
     protected static final class EndIslandDensityFunction implements DensityFunction.SimpleFunction {
@@ -555,9 +504,7 @@ public final class DensityFunctions {
     }
 
     @VisibleForDebug
-    public static record HolderHolder(Holder<DensityFunction> a) implements DensityFunction {
-        private final Holder<DensityFunction> function;
-
+    public static record HolderHolder(Holder<DensityFunction> function) implements DensityFunction {
         public double compute(DensityFunction.FunctionContext functionContext) {
             return this.function.value().compute(functionContext);
         }
@@ -581,18 +528,9 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             throw new UnsupportedOperationException("Calling .codec() on HolderHolder");
         }
-
-        public Holder<DensityFunction> function() {
-            return this.function;
-        }
     }
 
-    protected static record Mapped(DensityFunctions.Mapped.Type a, DensityFunction e, double f, double g) implements DensityFunctions.PureTransformer {
-        private final DensityFunctions.Mapped.Type type;
-        private final DensityFunction input;
-        private final double minValue;
-        private final double maxValue;
-
+    protected static record Mapped(DensityFunctions.Mapped.Type type, DensityFunction input, double minValue, double maxValue) implements DensityFunctions.PureTransformer {
         public static DensityFunctions.Mapped create(DensityFunctions.Mapped.Type type, DensityFunction densityFunction) {
             double d = densityFunction.minValue();
             double d2 = transform(type, d);
@@ -641,22 +579,6 @@ public final class DensityFunctions {
             return this.type.codec;
         }
 
-        public DensityFunctions.Mapped.Type type() {
-            return this.type;
-        }
-
-        public DensityFunction input() {
-            return this.input;
-        }
-
-        public double minValue() {
-            return this.minValue;
-        }
-
-        public double maxValue() {
-            return this.maxValue;
-        }
-
         static enum Type implements StringRepresentable {
             ABS("abs"),
             SQUARE("square"),
@@ -678,10 +600,7 @@ public final class DensityFunctions {
         }
     }
 
-    protected static record Marker(DensityFunctions.Marker.Type a, DensityFunction e) implements DensityFunctions.MarkerOrMarked {
-        private final DensityFunctions.Marker.Type type;
-        private final DensityFunction wrapped;
-
+    protected static record Marker(DensityFunctions.Marker.Type type, DensityFunction wrapped) implements DensityFunctions.MarkerOrMarked {
         public double compute(DensityFunction.FunctionContext functionContext) {
             return this.wrapped.compute(functionContext);
         }
@@ -698,14 +617,6 @@ public final class DensityFunctions {
             return this.wrapped.maxValue();
         }
 
-        public DensityFunctions.Marker.Type type() {
-            return this.type;
-        }
-
-        public DensityFunction wrapped() {
-            return this.wrapped;
-        }
-
         static enum Type implements StringRepresentable {
             Interpolated("interpolated"),
             FlatCache("flat_cache"),
@@ -740,13 +651,7 @@ public final class DensityFunctions {
         }
     }
 
-    static record MulOrAdd(DensityFunctions.MulOrAdd.Type e, DensityFunction f, double g, double h, double i) implements DensityFunctions.PureTransformer, DensityFunctions.TwoArgumentSimpleFunction {
-        private final DensityFunctions.MulOrAdd.Type specificType;
-        private final DensityFunction input;
-        private final double minValue;
-        private final double maxValue;
-        private final double argument;
-
+    static record MulOrAdd(DensityFunctions.MulOrAdd.Type specificType, DensityFunction input, double minValue, double maxValue, double argument) implements DensityFunctions.PureTransformer, DensityFunctions.TwoArgumentSimpleFunction {
         public DensityFunctions.TwoArgumentSimpleFunction.Type type() {
             return this.specificType == DensityFunctions.MulOrAdd.Type.MUL ? DensityFunctions.TwoArgumentSimpleFunction.Type.MUL : DensityFunctions.TwoArgumentSimpleFunction.Type.ADD;
         }
@@ -795,38 +700,13 @@ public final class DensityFunctions {
             return new DensityFunctions.MulOrAdd(this.specificType, densityFunction, d3, d4, this.argument);
         }
 
-        public DensityFunctions.MulOrAdd.Type specificType() {
-            return this.specificType;
-        }
-
-        public DensityFunction input() {
-            return this.input;
-        }
-
-        public double minValue() {
-            return this.minValue;
-        }
-
-        public double maxValue() {
-            return this.maxValue;
-        }
-
-        public double argument() {
-            return this.argument;
-        }
-
         static enum Type {
             MUL,
             ADD;
         }
     }
 
-    protected static record Noise(DensityFunction.NoiseHolder f, double g, double h) implements DensityFunction {
-        private final DensityFunction.NoiseHolder noise;
-        /** @deprecated */
-        @Deprecated
-        private final double xzScale;
-        private final double yScale;
+    protected static record Noise(DensityFunction.NoiseHolder noise, double xzScale, double yScale) implements DensityFunction {
         public static final MapCodec<DensityFunctions.Noise> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.NoiseHolder.CODEC.fieldOf("noise").forGetter(DensityFunctions.Noise::noise), Codec.DOUBLE.fieldOf("xz_scale").forGetter(DensityFunctions.Noise::xzScale), Codec.DOUBLE.fieldOf("y_scale").forGetter(DensityFunctions.Noise::yScale)).apply(instance, DensityFunctions.Noise::new));
         public static final KeyDispatchDataCodec<DensityFunctions.Noise> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
@@ -853,20 +733,6 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction.NoiseHolder noise() {
-            return this.noise;
-        }
-
-        /** @deprecated */
-        @Deprecated
-        public double xzScale() {
-            return this.xzScale;
-        }
-
-        public double yScale() {
-            return this.yScale;
-        }
     }
 
     interface PureTransformer extends DensityFunction {
@@ -888,12 +754,7 @@ public final class DensityFunctions {
         double transform(double var1);
     }
 
-    static record RangeChoice(DensityFunction f, double g, double h, DensityFunction i, DensityFunction j) implements DensityFunction {
-        private final DensityFunction input;
-        private final double minInclusive;
-        private final double maxExclusive;
-        private final DensityFunction whenInRange;
-        private final DensityFunction whenOutOfRange;
+    static record RangeChoice(DensityFunction input, double minInclusive, double maxExclusive, DensityFunction whenInRange, DensityFunction whenOutOfRange) implements DensityFunction {
         public static final MapCodec<DensityFunctions.RangeChoice> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.HOLDER_HELPER_CODEC.fieldOf("input").forGetter(DensityFunctions.RangeChoice::input), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("min_inclusive").forGetter(DensityFunctions.RangeChoice::minInclusive), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("max_exclusive").forGetter(DensityFunctions.RangeChoice::maxExclusive), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("when_in_range").forGetter(DensityFunctions.RangeChoice::whenInRange), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("when_out_of_range").forGetter(DensityFunctions.RangeChoice::whenOutOfRange)).apply(instance, DensityFunctions.RangeChoice::new));
         public static final KeyDispatchDataCodec<DensityFunctions.RangeChoice> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
@@ -931,30 +792,9 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction input() {
-            return this.input;
-        }
-
-        public double minInclusive() {
-            return this.minInclusive;
-        }
-
-        public double maxExclusive() {
-            return this.maxExclusive;
-        }
-
-        public DensityFunction whenInRange() {
-            return this.whenInRange;
-        }
-
-        public DensityFunction whenOutOfRange() {
-            return this.whenOutOfRange;
-        }
     }
 
-    protected static record Shift(DensityFunction.NoiseHolder a) implements DensityFunctions.ShiftNoise {
-        private final DensityFunction.NoiseHolder offsetNoise;
+    protected static record Shift(DensityFunction.NoiseHolder offsetNoise) implements DensityFunctions.ShiftNoise {
         static final KeyDispatchDataCodec<DensityFunctions.Shift> CODEC = DensityFunctions.singleArgumentCodec(DensityFunction.NoiseHolder.CODEC, DensityFunctions.Shift::new, DensityFunctions.Shift::offsetNoise);
 
         public double compute(DensityFunction.FunctionContext functionContext) {
@@ -968,14 +808,9 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction.NoiseHolder offsetNoise() {
-            return this.offsetNoise;
-        }
     }
 
-    protected static record ShiftA(DensityFunction.NoiseHolder a) implements DensityFunctions.ShiftNoise {
-        private final DensityFunction.NoiseHolder offsetNoise;
+    protected static record ShiftA(DensityFunction.NoiseHolder offsetNoise) implements DensityFunctions.ShiftNoise {
         static final KeyDispatchDataCodec<DensityFunctions.ShiftA> CODEC = DensityFunctions.singleArgumentCodec(DensityFunction.NoiseHolder.CODEC, DensityFunctions.ShiftA::new, DensityFunctions.ShiftA::offsetNoise);
 
         public double compute(DensityFunction.FunctionContext functionContext) {
@@ -989,14 +824,9 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction.NoiseHolder offsetNoise() {
-            return this.offsetNoise;
-        }
     }
 
-    protected static record ShiftB(DensityFunction.NoiseHolder a) implements DensityFunctions.ShiftNoise {
-        private final DensityFunction.NoiseHolder offsetNoise;
+    protected static record ShiftB(DensityFunction.NoiseHolder offsetNoise) implements DensityFunctions.ShiftNoise {
         static final KeyDispatchDataCodec<DensityFunctions.ShiftB> CODEC = DensityFunctions.singleArgumentCodec(DensityFunction.NoiseHolder.CODEC, DensityFunctions.ShiftB::new, DensityFunctions.ShiftB::offsetNoise);
 
         public double compute(DensityFunction.FunctionContext functionContext) {
@@ -1010,10 +840,6 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction.NoiseHolder offsetNoise() {
-            return this.offsetNoise;
-        }
     }
 
     interface ShiftNoise extends DensityFunction {
@@ -1036,13 +862,7 @@ public final class DensityFunctions {
         }
     }
 
-    protected static record ShiftedNoise(DensityFunction e, DensityFunction f, DensityFunction g, double h, double i, DensityFunction.NoiseHolder j) implements DensityFunction {
-        private final DensityFunction shiftX;
-        private final DensityFunction shiftY;
-        private final DensityFunction shiftZ;
-        private final double xzScale;
-        private final double yScale;
-        private final DensityFunction.NoiseHolder noise;
+    protected static record ShiftedNoise(DensityFunction shiftX, DensityFunction shiftY, DensityFunction shiftZ, double xzScale, double yScale, DensityFunction.NoiseHolder noise) implements DensityFunction {
         private static final MapCodec<DensityFunctions.ShiftedNoise> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.HOLDER_HELPER_CODEC.fieldOf("shift_x").forGetter(DensityFunctions.ShiftedNoise::shiftX), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("shift_y").forGetter(DensityFunctions.ShiftedNoise::shiftY), DensityFunction.HOLDER_HELPER_CODEC.fieldOf("shift_z").forGetter(DensityFunctions.ShiftedNoise::shiftZ), Codec.DOUBLE.fieldOf("xz_scale").forGetter(DensityFunctions.ShiftedNoise::xzScale), Codec.DOUBLE.fieldOf("y_scale").forGetter(DensityFunctions.ShiftedNoise::yScale), DensityFunction.NoiseHolder.CODEC.fieldOf("noise").forGetter(DensityFunctions.ShiftedNoise::noise)).apply(instance, DensityFunctions.ShiftedNoise::new));
         public static final KeyDispatchDataCodec<DensityFunctions.ShiftedNoise> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
@@ -1072,34 +892,9 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public DensityFunction shiftX() {
-            return this.shiftX;
-        }
-
-        public DensityFunction shiftY() {
-            return this.shiftY;
-        }
-
-        public DensityFunction shiftZ() {
-            return this.shiftZ;
-        }
-
-        public double xzScale() {
-            return this.xzScale;
-        }
-
-        public double yScale() {
-            return this.yScale;
-        }
-
-        public DensityFunction.NoiseHolder noise() {
-            return this.noise;
-        }
     }
 
-    public static record Spline(CubicSpline<DensityFunctions.Spline.Point, DensityFunctions.Spline.Coordinate> e) implements DensityFunction {
-        private final CubicSpline<DensityFunctions.Spline.Point, DensityFunctions.Spline.Coordinate> spline;
+    public static record Spline(CubicSpline<DensityFunctions.Spline.Point, DensityFunctions.Spline.Coordinate> spline) implements DensityFunction {
         private static final Codec<CubicSpline<DensityFunctions.Spline.Point, DensityFunctions.Spline.Coordinate>> SPLINE_CODEC = CubicSpline.codec(DensityFunctions.Spline.Coordinate.CODEC);
         private static final MapCodec<DensityFunctions.Spline> DATA_CODEC = SPLINE_CODEC.fieldOf("spline").xmap(DensityFunctions.Spline::new, DensityFunctions.Spline::spline);
         public static final KeyDispatchDataCodec<DensityFunctions.Spline> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
@@ -1128,12 +923,7 @@ public final class DensityFunctions {
             return CODEC;
         }
 
-        public CubicSpline<DensityFunctions.Spline.Point, DensityFunctions.Spline.Coordinate> spline() {
-            return this.spline;
-        }
-
-        public static record Coordinate(Holder<DensityFunction> c) implements ToFloatFunction<DensityFunctions.Spline.Point> {
-            private final Holder<DensityFunction> function;
+        public static record Coordinate(Holder<DensityFunction> function) implements ToFloatFunction<DensityFunctions.Spline.Point> {
             public static final Codec<DensityFunctions.Spline.Coordinate> CODEC = DensityFunction.CODEC.xmap(DensityFunctions.Spline.Coordinate::new, DensityFunctions.Spline.Coordinate::function);
 
             public String toString() {
@@ -1175,18 +965,9 @@ public final class DensityFunctions {
             public DensityFunctions.Spline.Coordinate mapAll(DensityFunction.Visitor visitor) {
                 return new DensityFunctions.Spline.Coordinate(new Holder.Direct<>(this.function.value().mapAll(visitor)));
             }
-
-            public Holder<DensityFunction> function() {
-                return this.function;
-            }
         }
 
-        public static record Point(DensityFunction.FunctionContext a) {
-            private final DensityFunction.FunctionContext context;
-
-            public DensityFunction.FunctionContext context() {
-                return this.context;
-            }
+        public static record Point(DensityFunction.FunctionContext context) {
         }
     }
 
@@ -1306,10 +1087,7 @@ public final class DensityFunctions {
         }
     }
 
-    protected static record WeirdScaledSampler(DensityFunction e, DensityFunction.NoiseHolder f, DensityFunctions.WeirdScaledSampler.RarityValueMapper g) implements DensityFunctions.TransformerWithContext {
-        private final DensityFunction input;
-        private final DensityFunction.NoiseHolder noise;
-        private final DensityFunctions.WeirdScaledSampler.RarityValueMapper rarityValueMapper;
+    protected static record WeirdScaledSampler(DensityFunction input, DensityFunction.NoiseHolder noise, DensityFunctions.WeirdScaledSampler.RarityValueMapper rarityValueMapper) implements DensityFunctions.TransformerWithContext {
         private static final MapCodec<DensityFunctions.WeirdScaledSampler> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(DensityFunction.HOLDER_HELPER_CODEC.fieldOf("input").forGetter(DensityFunctions.WeirdScaledSampler::input), DensityFunction.NoiseHolder.CODEC.fieldOf("noise").forGetter(DensityFunctions.WeirdScaledSampler::noise), DensityFunctions.WeirdScaledSampler.RarityValueMapper.CODEC.fieldOf("rarity_value_mapper").forGetter(DensityFunctions.WeirdScaledSampler::rarityValueMapper)).apply(instance, DensityFunctions.WeirdScaledSampler::new));
         public static final KeyDispatchDataCodec<DensityFunctions.WeirdScaledSampler> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
@@ -1334,18 +1112,6 @@ public final class DensityFunctions {
             return CODEC;
         }
 
-        public DensityFunction input() {
-            return this.input;
-        }
-
-        public DensityFunction.NoiseHolder noise() {
-            return this.noise;
-        }
-
-        public DensityFunctions.WeirdScaledSampler.RarityValueMapper rarityValueMapper() {
-            return this.rarityValueMapper;
-        }
-
         public static enum RarityValueMapper implements StringRepresentable {
             TYPE1("type_1", NoiseRouterData.QuantizedSpaghettiRarity::getSpaghettiRarity3D, 2.0D),
             TYPE2("type_2", NoiseRouterData.QuantizedSpaghettiRarity::getSphaghettiRarity2D, 3.0D);
@@ -1367,11 +1133,7 @@ public final class DensityFunctions {
         }
     }
 
-    static record YClampedGradient(int e, int f, double g, double h) implements DensityFunction.SimpleFunction {
-        private final int fromY;
-        private final int toY;
-        private final double fromValue;
-        private final double toValue;
+    static record YClampedGradient(int fromY, int toY, double fromValue, double toValue) implements DensityFunction.SimpleFunction {
         private static final MapCodec<DensityFunctions.YClampedGradient> DATA_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.intRange(DimensionType.MIN_Y * 2, DimensionType.MAX_Y * 2).fieldOf("from_y").forGetter(DensityFunctions.YClampedGradient::fromY), Codec.intRange(DimensionType.MIN_Y * 2, DimensionType.MAX_Y * 2).fieldOf("to_y").forGetter(DensityFunctions.YClampedGradient::toY), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("from_value").forGetter(DensityFunctions.YClampedGradient::fromValue), DensityFunctions.NOISE_VALUE_CODEC.fieldOf("to_value").forGetter(DensityFunctions.YClampedGradient::toValue)).apply(instance, DensityFunctions.YClampedGradient::new));
         public static final KeyDispatchDataCodec<DensityFunctions.YClampedGradient> CODEC = DensityFunctions.makeCodec(DATA_CODEC);
 
@@ -1390,21 +1152,5 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
-
-        public int fromY() {
-            return this.fromY;
-        }
-
-        public int toY() {
-            return this.toY;
-        }
-
-        public double fromValue() {
-            return this.fromValue;
-        }
-
-        public double toValue() {
-            return this.toValue;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
index 52d0e47defc2acacc4df90f0ba5b60413a66bbe5..cdb79164d6acd949b80e4b82f3954833712e5630 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
@@ -15,18 +15,18 @@ import net.minecraft.world.level.biome.OverworldBiomeBuilder;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 
-public record NoiseGeneratorSettings(NoiseSettings j, BlockState k, BlockState l, NoiseRouter m, SurfaceRules.RuleSource n, List<Climate.ParameterPoint> o, int p, boolean q, boolean r, boolean s, boolean t) {
-    private final NoiseSettings noiseSettings;
-    private final BlockState defaultBlock;
-    private final BlockState defaultFluid;
-    private final NoiseRouter noiseRouter;
-    private final SurfaceRules.RuleSource surfaceRule;
-    private final List<Climate.ParameterPoint> spawnTarget;
-    private final int seaLevel;
-    private final boolean disableMobGeneration;
-    private final boolean aquifersEnabled;
-    private final boolean oreVeinsEnabled;
-    private final boolean useLegacyRandomSource;
+public record NoiseGeneratorSettings(
+        NoiseSettings noiseSettings,
+        BlockState defaultBlock,
+        BlockState defaultFluid,
+        NoiseRouter noiseRouter,
+        SurfaceRules.RuleSource surfaceRule,
+        List<Climate.ParameterPoint> spawnTarget,
+        int seaLevel,
+        boolean disableMobGeneration,
+        boolean aquifersEnabled,
+        boolean oreVeinsEnabled,
+        boolean useLegacyRandomSource) {
     public static final Codec<NoiseGeneratorSettings> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(NoiseSettings.CODEC.fieldOf("noise").forGetter(NoiseGeneratorSettings::noiseSettings), BlockState.CODEC.fieldOf("default_block").forGetter(NoiseGeneratorSettings::defaultBlock), BlockState.CODEC.fieldOf("default_fluid").forGetter(NoiseGeneratorSettings::defaultFluid), NoiseRouter.CODEC.fieldOf("noise_router").forGetter(NoiseGeneratorSettings::noiseRouter), SurfaceRules.RuleSource.CODEC.fieldOf("surface_rule").forGetter(NoiseGeneratorSettings::surfaceRule), Climate.ParameterPoint.CODEC.listOf().fieldOf("spawn_target").forGetter(NoiseGeneratorSettings::spawnTarget), Codec.INT.fieldOf("sea_level").forGetter(NoiseGeneratorSettings::seaLevel), Codec.BOOL.fieldOf("disable_mob_generation").forGetter(NoiseGeneratorSettings::disableMobGeneration), Codec.BOOL.fieldOf("aquifers_enabled").forGetter(NoiseGeneratorSettings::isAquifersEnabled), Codec.BOOL.fieldOf("ore_veins_enabled").forGetter(NoiseGeneratorSettings::oreVeinsEnabled), Codec.BOOL.fieldOf("legacy_random_source").forGetter(NoiseGeneratorSettings::useLegacyRandomSource)).apply(instance, NoiseGeneratorSettings::new));
     public static final Codec<Holder<NoiseGeneratorSettings>> CODEC = RegistryFileCodec.create(Registries.NOISE_SETTINGS, DIRECT_CODEC);
     public static final ResourceKey<NoiseGeneratorSettings> OVERWORLD = ResourceKey.create(Registries.NOISE_SETTINGS, new ResourceLocation("overworld"));
@@ -37,20 +37,10 @@ public record NoiseGeneratorSettings(NoiseSettings j, BlockState k, BlockState l
     public static final ResourceKey<NoiseGeneratorSettings> CAVES = ResourceKey.create(Registries.NOISE_SETTINGS, new ResourceLocation("caves"));
     public static final ResourceKey<NoiseGeneratorSettings> FLOATING_ISLANDS = ResourceKey.create(Registries.NOISE_SETTINGS, new ResourceLocation("floating_islands"));
 
-    /** @deprecated */
-    @Deprecated
-    public boolean disableMobGeneration() {
-        return this.disableMobGeneration;
-    }
-
     public boolean isAquifersEnabled() {
         return this.aquifersEnabled;
     }
 
-    public boolean oreVeinsEnabled() {
-        return this.oreVeinsEnabled;
-    }
-
     public WorldgenRandom.Algorithm getRandomSource() {
         return this.useLegacyRandomSource ? WorldgenRandom.Algorithm.LEGACY : WorldgenRandom.Algorithm.XOROSHIRO;
     }
@@ -88,40 +78,4 @@ public record NoiseGeneratorSettings(NoiseSettings j, BlockState k, BlockState l
     public static NoiseGeneratorSettings dummy() {
         return new NoiseGeneratorSettings(NoiseSettings.OVERWORLD_NOISE_SETTINGS, Blocks.STONE.defaultBlockState(), Blocks.AIR.defaultBlockState(), NoiseRouterData.none(), SurfaceRuleData.air(), List.of(), 63, true, false, false, false);
     }
-
-    public NoiseSettings noiseSettings() {
-        return this.noiseSettings;
-    }
-
-    public BlockState defaultBlock() {
-        return this.defaultBlock;
-    }
-
-    public BlockState defaultFluid() {
-        return this.defaultFluid;
-    }
-
-    public NoiseRouter noiseRouter() {
-        return this.noiseRouter;
-    }
-
-    public SurfaceRules.RuleSource surfaceRule() {
-        return this.surfaceRule;
-    }
-
-    public List<Climate.ParameterPoint> spawnTarget() {
-        return this.spawnTarget;
-    }
-
-    public int seaLevel() {
-        return this.seaLevel;
-    }
-
-    public boolean aquifersEnabled() {
-        return this.aquifersEnabled;
-    }
-
-    public boolean useLegacyRandomSource() {
-        return this.useLegacyRandomSource;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseRouter.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseRouter.java
index 9bc70bb98ca12c256bd8e3304df0bdce33677e45..27c281dfb6dbfd061f62091289bab0887284f04a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseRouter.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseRouter.java
@@ -4,22 +4,22 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.function.Function;
 
-public record NoiseRouter(DensityFunction b, DensityFunction c, DensityFunction d, DensityFunction e, DensityFunction f, DensityFunction g, DensityFunction h, DensityFunction i, DensityFunction j, DensityFunction k, DensityFunction l, DensityFunction m, DensityFunction n, DensityFunction o, DensityFunction p) {
-    private final DensityFunction barrierNoise;
-    private final DensityFunction fluidLevelFloodednessNoise;
-    private final DensityFunction fluidLevelSpreadNoise;
-    private final DensityFunction lavaNoise;
-    private final DensityFunction temperature;
-    private final DensityFunction vegetation;
-    private final DensityFunction continents;
-    private final DensityFunction erosion;
-    private final DensityFunction depth;
-    private final DensityFunction ridges;
-    private final DensityFunction initialDensityWithoutJaggedness;
-    private final DensityFunction finalDensity;
-    private final DensityFunction veinToggle;
-    private final DensityFunction veinRidged;
-    private final DensityFunction veinGap;
+public record NoiseRouter(
+        DensityFunction barrierNoise,
+        DensityFunction fluidLevelFloodednessNoise,
+        DensityFunction fluidLevelSpreadNoise,
+        DensityFunction lavaNoise,
+        DensityFunction temperature,
+        DensityFunction vegetation,
+        DensityFunction continents,
+        DensityFunction erosion,
+        DensityFunction depth,
+        DensityFunction ridges,
+        DensityFunction initialDensityWithoutJaggedness,
+        DensityFunction finalDensity,
+        DensityFunction veinToggle,
+        DensityFunction veinRidged,
+        DensityFunction veinGap) {
     public static final Codec<NoiseRouter> CODEC = RecordCodecBuilder.create((instance) -> instance.group(field("barrier", NoiseRouter::barrierNoise), field("fluid_level_floodedness", NoiseRouter::fluidLevelFloodednessNoise), field("fluid_level_spread", NoiseRouter::fluidLevelSpreadNoise), field("lava", NoiseRouter::lavaNoise), field("temperature", NoiseRouter::temperature), field("vegetation", NoiseRouter::vegetation), field("continents", NoiseRouter::continents), field("erosion", NoiseRouter::erosion), field("depth", NoiseRouter::depth), field("ridges", NoiseRouter::ridges), field("initial_density_without_jaggedness", NoiseRouter::initialDensityWithoutJaggedness), field("final_density", NoiseRouter::finalDensity), field("vein_toggle", NoiseRouter::veinToggle), field("vein_ridged", NoiseRouter::veinRidged), field("vein_gap", NoiseRouter::veinGap)).apply(instance, NoiseRouter::new));
 
     private static RecordCodecBuilder<NoiseRouter, DensityFunction> field(String s, Function<NoiseRouter, DensityFunction> function) {
@@ -29,64 +29,4 @@ public record NoiseRouter(DensityFunction b, DensityFunction c, DensityFunction
     public NoiseRouter mapAll(DensityFunction.Visitor visitor) {
         return new NoiseRouter(this.barrierNoise.mapAll(visitor), this.fluidLevelFloodednessNoise.mapAll(visitor), this.fluidLevelSpreadNoise.mapAll(visitor), this.lavaNoise.mapAll(visitor), this.temperature.mapAll(visitor), this.vegetation.mapAll(visitor), this.continents.mapAll(visitor), this.erosion.mapAll(visitor), this.depth.mapAll(visitor), this.ridges.mapAll(visitor), this.initialDensityWithoutJaggedness.mapAll(visitor), this.finalDensity.mapAll(visitor), this.veinToggle.mapAll(visitor), this.veinRidged.mapAll(visitor), this.veinGap.mapAll(visitor));
     }
-
-    public DensityFunction barrierNoise() {
-        return this.barrierNoise;
-    }
-
-    public DensityFunction fluidLevelFloodednessNoise() {
-        return this.fluidLevelFloodednessNoise;
-    }
-
-    public DensityFunction fluidLevelSpreadNoise() {
-        return this.fluidLevelSpreadNoise;
-    }
-
-    public DensityFunction lavaNoise() {
-        return this.lavaNoise;
-    }
-
-    public DensityFunction temperature() {
-        return this.temperature;
-    }
-
-    public DensityFunction vegetation() {
-        return this.vegetation;
-    }
-
-    public DensityFunction continents() {
-        return this.continents;
-    }
-
-    public DensityFunction erosion() {
-        return this.erosion;
-    }
-
-    public DensityFunction depth() {
-        return this.depth;
-    }
-
-    public DensityFunction ridges() {
-        return this.ridges;
-    }
-
-    public DensityFunction initialDensityWithoutJaggedness() {
-        return this.initialDensityWithoutJaggedness;
-    }
-
-    public DensityFunction finalDensity() {
-        return this.finalDensity;
-    }
-
-    public DensityFunction veinToggle() {
-        return this.veinToggle;
-    }
-
-    public DensityFunction veinRidged() {
-        return this.veinRidged;
-    }
-
-    public DensityFunction veinGap() {
-        return this.veinGap;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
index d1f5e00a52ce8b758729400204a5e6c94497e592..92fdac16aece31fe8c40d536af45ad202ae91bfa 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
@@ -8,12 +8,8 @@ import net.minecraft.core.QuartPos;
 import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.dimension.DimensionType;
 
-public record NoiseSettings(int g, int h, int i, int j) {
-    private final int minY;
-    private final int height;
-    private final int noiseSizeHorizontal;
-    private final int noiseSizeVertical;
-    public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY), Codec.intRange(0, DimensionType.Y_SIZE).fieldOf("height").forGetter(NoiseSettings::height), Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal), Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical)).apply(instance, NoiseSettings::new)).comapFlatMap(NoiseSettings::guardY, Function.identity());
+public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int noiseSizeVertical) {
+    public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.<NoiseSettings>create((instance) -> instance.group(Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY), Codec.intRange(0, DimensionType.Y_SIZE).fieldOf("height").forGetter(NoiseSettings::height), Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal), Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical)).apply(instance, NoiseSettings::new)).comapFlatMap(NoiseSettings::guardY, Function.identity());
     protected static final NoiseSettings OVERWORLD_NOISE_SETTINGS = create(-64, 384, 1, 2);
     protected static final NoiseSettings NETHER_NOISE_SETTINGS = create(0, 128, 1, 2);
     protected static final NoiseSettings END_NOISE_SETTINGS = create(0, 128, 2, 1);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java b/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java
index 568894450c526c818cd0944c567cca35de222d48..d35054c21de8b36eb88a521665056111103ac07d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java
@@ -41,10 +41,7 @@ public final class RandomSupport {
         return SEED_UNIQUIFIER.updateAndGet((l) -> l * 1181783497276652981L) ^ System.nanoTime();
     }
 
-    public static record Seed128bit(long a, long b) {
-        private final long seedLo;
-        private final long seedHi;
-
+    public static record Seed128bit(long seedLo, long seedHi) {
         public RandomSupport.Seed128bit xor(long l, long l2) {
             return new RandomSupport.Seed128bit(this.seedLo ^ l, this.seedHi ^ l2);
         }
@@ -56,13 +53,5 @@ public final class RandomSupport {
         public RandomSupport.Seed128bit mixed() {
             return new RandomSupport.Seed128bit(RandomSupport.mixStafford13(this.seedLo), RandomSupport.mixStafford13(this.seedHi));
         }
-
-        public long seedLo() {
-            return this.seedLo;
-        }
-
-        public long seedHi() {
-            return this.seedHi;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java b/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java
index 63090560231d3915cdc410120e7f1ffcfc6c1bbd..e04759182cd395f21fef3bafb88e2f7e7dc35da9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java
@@ -171,7 +171,7 @@ public class SurfaceRules {
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
             class BiomeCondition extends SurfaceRules.LazyYCondition {
-                BiomeCondition() {
+                BiomeCondition(Context context) {
                     super(context);
                 }
 
@@ -180,7 +180,7 @@ public class SurfaceRules {
                 }
             }
 
-            return new BiomeCondition();
+            return new BiomeCondition(context);
         }
 
         public boolean equals(Object object) {
@@ -203,9 +203,7 @@ public class SurfaceRules {
         }
     }
 
-    static record BlockRuleSource(BlockState a, SurfaceRules.StateRule c) implements SurfaceRules.RuleSource {
-        private final BlockState resultState;
-        private final SurfaceRules.StateRule rule;
+    static record BlockRuleSource(BlockState resultState, SurfaceRules.StateRule rule) implements SurfaceRules.RuleSource {
         static final KeyDispatchDataCodec<SurfaceRules.BlockRuleSource> CODEC = KeyDispatchDataCodec.of(BlockState.CODEC.xmap(SurfaceRules.BlockRuleSource::new, SurfaceRules.BlockRuleSource::resultState).fieldOf("result_state"));
 
         BlockRuleSource(BlockState blockState) {
@@ -219,14 +217,6 @@ public class SurfaceRules {
         public SurfaceRules.SurfaceRule apply(SurfaceRules.Context context) {
             return this.rule;
         }
-
-        public BlockState resultState() {
-            return this.resultState;
-        }
-
-        public SurfaceRules.StateRule rule() {
-            return this.rule;
-        }
     }
 
     interface Condition {
@@ -467,10 +457,7 @@ public class SurfaceRules {
         }
     }
 
-    static record NoiseThresholdConditionSource(ResourceKey<NormalNoise.NoiseParameters> a, double c, double d) implements SurfaceRules.ConditionSource {
-        private final ResourceKey<NormalNoise.NoiseParameters> noise;
-        final double minThreshold;
-        final double maxThreshold;
+    static record NoiseThresholdConditionSource(ResourceKey<NormalNoise.NoiseParameters> noise, double minThreshold, double maxThreshold) implements SurfaceRules.ConditionSource {
         static final KeyDispatchDataCodec<SurfaceRules.NoiseThresholdConditionSource> CODEC = KeyDispatchDataCodec.of(RecordCodecBuilder.mapCodec((instance) -> instance.group(ResourceKey.codec(Registries.NOISE).fieldOf("noise").forGetter(SurfaceRules.NoiseThresholdConditionSource::noise), Codec.DOUBLE.fieldOf("min_threshold").forGetter(SurfaceRules.NoiseThresholdConditionSource::minThreshold), Codec.DOUBLE.fieldOf("max_threshold").forGetter(SurfaceRules.NoiseThresholdConditionSource::maxThreshold)).apply(instance, SurfaceRules.NoiseThresholdConditionSource::new)));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.ConditionSource> codec() {
@@ -481,7 +468,7 @@ public class SurfaceRules {
             final NormalNoise normalNoise = context.randomState.getOrCreateNoise(this.noise);
 
             class NoiseThresholdCondition extends SurfaceRules.LazyXZCondition {
-                NoiseThresholdCondition() {
+                NoiseThresholdCondition(Context context) {
                     super(context);
                 }
 
@@ -491,7 +478,7 @@ public class SurfaceRules {
                 }
             }
 
-            return new NoiseThresholdCondition();
+            return new NoiseThresholdCondition(context);
         }
 
         public ResourceKey<NormalNoise.NoiseParameters> noise() {
@@ -507,20 +494,13 @@ public class SurfaceRules {
         }
     }
 
-    static record NotCondition(SurfaceRules.Condition a) implements SurfaceRules.Condition {
-        private final SurfaceRules.Condition target;
-
+    static record NotCondition(SurfaceRules.Condition target) implements SurfaceRules.Condition {
         public boolean test() {
             return !this.target.test();
         }
-
-        public SurfaceRules.Condition target() {
-            return this.target;
-        }
     }
 
-    static record NotConditionSource(SurfaceRules.ConditionSource a) implements SurfaceRules.ConditionSource {
-        private final SurfaceRules.ConditionSource target;
+    static record NotConditionSource(SurfaceRules.ConditionSource target) implements SurfaceRules.ConditionSource {
         static final KeyDispatchDataCodec<SurfaceRules.NotConditionSource> CODEC = KeyDispatchDataCodec.of(SurfaceRules.ConditionSource.CODEC.xmap(SurfaceRules.NotConditionSource::new, SurfaceRules.NotConditionSource::target).fieldOf("invert"));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.ConditionSource> codec() {
@@ -530,10 +510,6 @@ public class SurfaceRules {
         public SurfaceRules.Condition apply(SurfaceRules.Context context) {
             return new SurfaceRules.NotCondition((SurfaceRules.Condition)this.target.apply(context));
         }
-
-        public SurfaceRules.ConditionSource target() {
-            return this.target;
-        }
     }
 
     public interface RuleSource extends Function<SurfaceRules.Context, SurfaceRules.SurfaceRule> {
@@ -549,9 +525,7 @@ public class SurfaceRules {
         KeyDispatchDataCodec<? extends SurfaceRules.RuleSource> codec();
     }
 
-    static record SequenceRule(List<SurfaceRules.SurfaceRule> a) implements SurfaceRules.SurfaceRule {
-        private final List<SurfaceRules.SurfaceRule> rules;
-
+    static record SequenceRule(List<SurfaceRules.SurfaceRule> rules) implements SurfaceRules.SurfaceRule {
         @Nullable
         public BlockState tryApply(int i, int i2, int i3) {
             for(SurfaceRules.SurfaceRule surfaceRule : this.rules) {
@@ -563,14 +537,9 @@ public class SurfaceRules {
 
             return null;
         }
-
-        public List<SurfaceRules.SurfaceRule> rules() {
-            return this.rules;
-        }
     }
 
-    static record SequenceRuleSource(List<SurfaceRules.RuleSource> a) implements SurfaceRules.RuleSource {
-        private final List<SurfaceRules.RuleSource> sequence;
+    static record SequenceRuleSource(List<SurfaceRules.RuleSource> sequence) implements SurfaceRules.RuleSource {
         static final KeyDispatchDataCodec<SurfaceRules.SequenceRuleSource> CODEC = KeyDispatchDataCodec.of(SurfaceRules.RuleSource.CODEC.listOf().xmap(SurfaceRules.SequenceRuleSource::new, SurfaceRules.SequenceRuleSource::sequence).fieldOf("sequence"));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.RuleSource> codec() {
@@ -590,22 +559,12 @@ public class SurfaceRules {
                 return new SurfaceRules.SequenceRule(builder.build());
             }
         }
-
-        public List<SurfaceRules.RuleSource> sequence() {
-            return this.sequence;
-        }
     }
 
-    static record StateRule(BlockState a) implements SurfaceRules.SurfaceRule {
-        private final BlockState state;
-
+    static record StateRule(BlockState state) implements SurfaceRules.SurfaceRule {
         public BlockState tryApply(int i, int i2, int i3) {
             return this.state;
         }
-
-        public BlockState state() {
-            return this.state;
-        }
     }
 
     static enum Steep implements SurfaceRules.ConditionSource {
@@ -622,11 +581,7 @@ public class SurfaceRules {
         }
     }
 
-    static record StoneDepthCheck(int a, boolean c, int d, CaveSurface e) implements SurfaceRules.ConditionSource {
-        final int offset;
-        final boolean addSurfaceDepth;
-        final int secondaryDepthRange;
-        private final CaveSurface surfaceType;
+    static record StoneDepthCheck(int offset, boolean addSurfaceDepth, int secondaryDepthRange, CaveSurface surfaceType) implements SurfaceRules.ConditionSource {
         static final KeyDispatchDataCodec<SurfaceRules.StoneDepthCheck> CODEC = KeyDispatchDataCodec.of(RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.INT.fieldOf("offset").forGetter(SurfaceRules.StoneDepthCheck::offset), Codec.BOOL.fieldOf("add_surface_depth").forGetter(SurfaceRules.StoneDepthCheck::addSurfaceDepth), Codec.INT.fieldOf("secondary_depth_range").forGetter(SurfaceRules.StoneDepthCheck::secondaryDepthRange), CaveSurface.CODEC.fieldOf("surface_type").forGetter(SurfaceRules.StoneDepthCheck::surfaceType)).apply(instance, SurfaceRules.StoneDepthCheck::new)));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.ConditionSource> codec() {
@@ -637,7 +592,7 @@ public class SurfaceRules {
             final boolean flag = this.surfaceType == CaveSurface.CEILING;
 
             class StoneDepthCondition extends SurfaceRules.LazyYCondition {
-                StoneDepthCondition() {
+                StoneDepthCondition(Context context) {
                     super(context);
                 }
 
@@ -649,23 +604,7 @@ public class SurfaceRules {
                 }
             }
 
-            return new StoneDepthCondition();
-        }
-
-        public int offset() {
-            return this.offset;
-        }
-
-        public boolean addSurfaceDepth() {
-            return this.addSurfaceDepth;
-        }
-
-        public int secondaryDepthRange() {
-            return this.secondaryDepthRange;
-        }
-
-        public CaveSurface surfaceType() {
-            return this.surfaceType;
+            return new StoneDepthCondition(context);
         }
     }
 
@@ -688,27 +627,14 @@ public class SurfaceRules {
         }
     }
 
-    static record TestRule(SurfaceRules.Condition a, SurfaceRules.SurfaceRule b) implements SurfaceRules.SurfaceRule {
-        private final SurfaceRules.Condition condition;
-        private final SurfaceRules.SurfaceRule followup;
-
+    static record TestRule(SurfaceRules.Condition condition, SurfaceRules.SurfaceRule followup) implements SurfaceRules.SurfaceRule {
         @Nullable
         public BlockState tryApply(int i, int i2, int i3) {
             return !this.condition.test() ? null : this.followup.tryApply(i, i2, i3);
         }
-
-        public SurfaceRules.Condition condition() {
-            return this.condition;
-        }
-
-        public SurfaceRules.SurfaceRule followup() {
-            return this.followup;
-        }
     }
 
-    static record TestRuleSource(SurfaceRules.ConditionSource a, SurfaceRules.RuleSource c) implements SurfaceRules.RuleSource {
-        private final SurfaceRules.ConditionSource ifTrue;
-        private final SurfaceRules.RuleSource thenRun;
+    static record TestRuleSource(SurfaceRules.ConditionSource ifTrue, SurfaceRules.RuleSource thenRun) implements SurfaceRules.RuleSource {
         static final KeyDispatchDataCodec<SurfaceRules.TestRuleSource> CODEC = KeyDispatchDataCodec.of(RecordCodecBuilder.mapCodec((instance) -> instance.group(SurfaceRules.ConditionSource.CODEC.fieldOf("if_true").forGetter(SurfaceRules.TestRuleSource::ifTrue), SurfaceRules.RuleSource.CODEC.fieldOf("then_run").forGetter(SurfaceRules.TestRuleSource::thenRun)).apply(instance, SurfaceRules.TestRuleSource::new)));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.RuleSource> codec() {
@@ -718,20 +644,9 @@ public class SurfaceRules {
         public SurfaceRules.SurfaceRule apply(SurfaceRules.Context context) {
             return new SurfaceRules.TestRule((SurfaceRules.Condition)this.ifTrue.apply(context), (SurfaceRules.SurfaceRule)this.thenRun.apply(context));
         }
-
-        public SurfaceRules.ConditionSource ifTrue() {
-            return this.ifTrue;
-        }
-
-        public SurfaceRules.RuleSource thenRun() {
-            return this.thenRun;
-        }
     }
 
-    static record VerticalGradientConditionSource(ResourceLocation a, VerticalAnchor c, VerticalAnchor d) implements SurfaceRules.ConditionSource {
-        private final ResourceLocation randomName;
-        private final VerticalAnchor trueAtAndBelow;
-        private final VerticalAnchor falseAtAndAbove;
+    static record VerticalGradientConditionSource(ResourceLocation randomName, VerticalAnchor trueAtAndBelow, VerticalAnchor falseAtAndAbove) implements SurfaceRules.ConditionSource {
         static final KeyDispatchDataCodec<SurfaceRules.VerticalGradientConditionSource> CODEC = KeyDispatchDataCodec.of(RecordCodecBuilder.mapCodec((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("random_name").forGetter(SurfaceRules.VerticalGradientConditionSource::randomName), VerticalAnchor.CODEC.fieldOf("true_at_and_below").forGetter(SurfaceRules.VerticalGradientConditionSource::trueAtAndBelow), VerticalAnchor.CODEC.fieldOf("false_at_and_above").forGetter(SurfaceRules.VerticalGradientConditionSource::falseAtAndAbove)).apply(instance, SurfaceRules.VerticalGradientConditionSource::new)));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.ConditionSource> codec() {
@@ -744,44 +659,30 @@ public class SurfaceRules {
             final PositionalRandomFactory positionalRandomFactory = context.randomState.getOrCreateRandomFactory(this.randomName());
 
             class VerticalGradientCondition extends SurfaceRules.LazyYCondition {
-                VerticalGradientCondition() {
+                VerticalGradientCondition(Context context) {
                     super(context);
                 }
 
                 protected boolean compute() {
-                    int i = this.context.blockY;
-                    if (i <= i) {
+                    int ix = this.context.blockY;
+                    if (ix <= i) {
                         return true;
-                    } else if (i >= i2) {
+                    } else if (ix >= i2) {
                         return false;
                     } else {
-                        double d = Mth.map((double)i, (double)i, (double)i2, 1.0D, 0.0D);
-                        RandomSource randomSource = positionalRandomFactory.at(this.context.blockX, i, this.context.blockZ);
+                        // TODO: (ix, ix, i2), (i, ix, i2), or (ix, i, i2), which is correct one?
+                        double d = Mth.map((double)ix, (double)ix, (double)i2, 1.0D, 0.0D);
+                        RandomSource randomSource = positionalRandomFactory.at(this.context.blockX, ix, this.context.blockZ);
                         return (double)randomSource.nextFloat() < d;
                     }
                 }
             }
 
-            return new VerticalGradientCondition();
-        }
-
-        public ResourceLocation randomName() {
-            return this.randomName;
-        }
-
-        public VerticalAnchor trueAtAndBelow() {
-            return this.trueAtAndBelow;
-        }
-
-        public VerticalAnchor falseAtAndAbove() {
-            return this.falseAtAndAbove;
+            return new VerticalGradientCondition(context);
         }
     }
 
-    static record WaterConditionSource(int a, int c, boolean d) implements SurfaceRules.ConditionSource {
-        final int offset;
-        final int surfaceDepthMultiplier;
-        final boolean addStoneDepth;
+    static record WaterConditionSource(int offset, int surfaceDepthMultiplier, boolean addStoneDepth) implements SurfaceRules.ConditionSource {
         static final KeyDispatchDataCodec<SurfaceRules.WaterConditionSource> CODEC = KeyDispatchDataCodec.of(RecordCodecBuilder.mapCodec((instance) -> instance.group(Codec.INT.fieldOf("offset").forGetter(SurfaceRules.WaterConditionSource::offset), Codec.intRange(-20, 20).fieldOf("surface_depth_multiplier").forGetter(SurfaceRules.WaterConditionSource::surfaceDepthMultiplier), Codec.BOOL.fieldOf("add_stone_depth").forGetter(SurfaceRules.WaterConditionSource::addStoneDepth)).apply(instance, SurfaceRules.WaterConditionSource::new)));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.ConditionSource> codec() {
@@ -790,7 +691,7 @@ public class SurfaceRules {
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
             class WaterCondition extends SurfaceRules.LazyYCondition {
-                WaterCondition() {
+                WaterCondition(Context context) {
                     super(context);
                 }
 
@@ -799,26 +700,11 @@ public class SurfaceRules {
                 }
             }
 
-            return new WaterCondition();
-        }
-
-        public int offset() {
-            return this.offset;
-        }
-
-        public int surfaceDepthMultiplier() {
-            return this.surfaceDepthMultiplier;
-        }
-
-        public boolean addStoneDepth() {
-            return this.addStoneDepth;
+            return new WaterCondition(context);
         }
     }
 
-    static record YConditionSource(VerticalAnchor a, int c, boolean d) implements SurfaceRules.ConditionSource {
-        final VerticalAnchor anchor;
-        final int surfaceDepthMultiplier;
-        final boolean addStoneDepth;
+    static record YConditionSource(VerticalAnchor anchor, int surfaceDepthMultiplier, boolean addStoneDepth) implements SurfaceRules.ConditionSource {
         static final KeyDispatchDataCodec<SurfaceRules.YConditionSource> CODEC = KeyDispatchDataCodec.of(RecordCodecBuilder.mapCodec((instance) -> instance.group(VerticalAnchor.CODEC.fieldOf("anchor").forGetter(SurfaceRules.YConditionSource::anchor), Codec.intRange(-20, 20).fieldOf("surface_depth_multiplier").forGetter(SurfaceRules.YConditionSource::surfaceDepthMultiplier), Codec.BOOL.fieldOf("add_stone_depth").forGetter(SurfaceRules.YConditionSource::addStoneDepth)).apply(instance, SurfaceRules.YConditionSource::new)));
 
         public KeyDispatchDataCodec<? extends SurfaceRules.ConditionSource> codec() {
@@ -827,7 +713,7 @@ public class SurfaceRules {
 
         public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
             class YCondition extends SurfaceRules.LazyYCondition {
-                YCondition() {
+                YCondition(Context context) {
                     super(context);
                 }
 
@@ -836,19 +722,7 @@ public class SurfaceRules {
                 }
             }
 
-            return new YCondition();
-        }
-
-        public VerticalAnchor anchor() {
-            return this.anchor;
-        }
-
-        public int surfaceDepthMultiplier() {
-            return this.surfaceDepthMultiplier;
-        }
-
-        public boolean addStoneDepth() {
-            return this.addStoneDepth;
+            return new YCondition(context);
         }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/VerticalAnchor.java b/src/main/java/net/minecraft/world/level/levelgen/VerticalAnchor.java
index c2448daa7abd62f88e6e4b52da040eef7076412c..1789f131927f48328f303e53102cf391c2e689b0 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/VerticalAnchor.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/VerticalAnchor.java
@@ -41,8 +41,7 @@ public interface VerticalAnchor {
 
     int resolveY(WorldGenerationContext var1);
 
-    public static record AboveBottom(int e) implements VerticalAnchor {
-        private final int offset;
+    public static record AboveBottom(int offset) implements VerticalAnchor {
         public static final Codec<VerticalAnchor.AboveBottom> CODEC = Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("above_bottom").xmap(VerticalAnchor.AboveBottom::new, VerticalAnchor.AboveBottom::offset).codec();
 
         public int resolveY(WorldGenerationContext worldGenerationContext) {
@@ -52,14 +51,9 @@ public interface VerticalAnchor {
         public String toString() {
             return this.offset + " above bottom";
         }
-
-        public int offset() {
-            return this.offset;
-        }
     }
 
-    public static record Absolute(int e) implements VerticalAnchor {
-        private final int y;
+    public static record Absolute(int y) implements VerticalAnchor {
         public static final Codec<VerticalAnchor.Absolute> CODEC = Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("absolute").xmap(VerticalAnchor.Absolute::new, VerticalAnchor.Absolute::y).codec();
 
         public int resolveY(WorldGenerationContext worldGenerationContext) {
@@ -75,8 +69,7 @@ public interface VerticalAnchor {
         }
     }
 
-    public static record BelowTop(int e) implements VerticalAnchor {
-        private final int offset;
+    public static record BelowTop(int offset) implements VerticalAnchor {
         public static final Codec<VerticalAnchor.BelowTop> CODEC = Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("below_top").xmap(VerticalAnchor.BelowTop::new, VerticalAnchor.BelowTop::offset).codec();
 
         public int resolveY(WorldGenerationContext worldGenerationContext) {
@@ -86,9 +79,5 @@ public interface VerticalAnchor {
         public String toString() {
             return this.offset + " below top";
         }
-
-        public int offset() {
-            return this.offset;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/WorldDimensions.java b/src/main/java/net/minecraft/world/level/levelgen/WorldDimensions.java
index 93ef2630906d0f721dde5802bda7af49f718968e..72635c9df4c28ea1e96e46d451f55edaef8f8574 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/WorldDimensions.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/WorldDimensions.java
@@ -28,14 +28,13 @@ import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.storage.PrimaryLevelData;
 
-public record WorldDimensions(Registry<LevelStem> b) {
-    private final Registry<LevelStem> dimensions;
+public record WorldDimensions(Registry<LevelStem> dimensions) {
     public static final MapCodec<WorldDimensions> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(RegistryCodecs.fullCodec(Registries.LEVEL_STEM, Lifecycle.stable(), LevelStem.CODEC).fieldOf("dimensions").forGetter(WorldDimensions::dimensions)).apply(instance, instance.stable(WorldDimensions::new)));
     private static final Set<ResourceKey<LevelStem>> BUILTIN_ORDER = ImmutableSet.of(LevelStem.OVERWORLD, LevelStem.NETHER, LevelStem.END);
     private static final int VANILLA_DIMENSION_COUNT = BUILTIN_ORDER.size();
 
     public WorldDimensions {
-        LevelStem levelStem = (LevelStem)registry.get(LevelStem.OVERWORLD);
+        LevelStem levelStem = (LevelStem)dimensions.get(LevelStem.OVERWORLD);
         if (levelStem == null) {
             throw new IllegalStateException("Overworld settings missing");
         }
@@ -168,26 +167,16 @@ public record WorldDimensions(Registry<LevelStem> b) {
         return false;
     }
 
+    record Entry(ResourceKey<LevelStem> key, LevelStem value) {
+        Lifecycle lifecycle() {
+            return WorldDimensions.checkStability(this.key, this.value);
+        }
+    }
+
     public WorldDimensions.Complete bake(Registry<LevelStem> registry) {
         Stream<ResourceKey<LevelStem>> stream = Stream.concat(registry.registryKeySet().stream(), this.dimensions.registryKeySet().stream()).distinct();
         List<Entry> list = new ArrayList();
         keysInOrder(stream).forEach((resourceKey) -> registry.getOptional(resourceKey).or(() -> this.dimensions.getOptional(resourceKey)).ifPresent((levelStem) -> {
-                record Entry(ResourceKey<LevelStem> a, LevelStem b) {
-                    final ResourceKey<LevelStem> key;
-                    final LevelStem value;
-
-                    Lifecycle lifecycle() {
-                        return WorldDimensions.checkStability(this.key, this.value);
-                    }
-
-                    public ResourceKey<LevelStem> key() {
-                        return this.key;
-                    }
-
-                    public LevelStem value() {
-                        return this.value;
-                    }
-                }
 
                 list.add(new Entry(resourceKey, levelStem));
             }));
@@ -203,10 +192,7 @@ public record WorldDimensions(Registry<LevelStem> b) {
         return this.dimensions;
     }
 
-    public static record Complete(Registry<LevelStem> a, PrimaryLevelData.SpecialWorldProperty b) {
-        private final Registry<LevelStem> dimensions;
-        private final PrimaryLevelData.SpecialWorldProperty specialWorldProperty;
-
+    public static record Complete(Registry<LevelStem> dimensions, PrimaryLevelData.SpecialWorldProperty specialWorldProperty) {
         public Lifecycle lifecycle() {
             return this.dimensions.registryLifecycle();
         }
@@ -214,13 +200,5 @@ public record WorldDimensions(Registry<LevelStem> b) {
         public RegistryAccess.Frozen dimensionsRegistryAccess() {
             return (new RegistryAccess.ImmutableRegistryAccess(List.of(this.dimensions))).freeze();
         }
-
-        public Registry<LevelStem> dimensions() {
-            return this.dimensions;
-        }
-
-        public PrimaryLevelData.SpecialWorldProperty specialWorldProperty() {
-            return this.specialWorldProperty;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
index 701b3ba4fee7108389b6d21d70ca5a634ad60a92..fdfc13a5229da9ebe29e44e543034a6f60aa3472 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -7,9 +7,7 @@ import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.registries.Registries;
 
-public record WorldGenSettings(WorldOptions b, WorldDimensions c) {
-    private final WorldOptions options;
-    private final WorldDimensions dimensions;
+public record WorldGenSettings(WorldOptions options, WorldDimensions dimensions) {
     public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(WorldOptions.CODEC.forGetter(WorldGenSettings::options), WorldDimensions.CODEC.forGetter(WorldGenSettings::dimensions)).apply(instance, instance.stable(WorldGenSettings::new)));
 
     public static <T> DataResult<T> encode(DynamicOps<T> dynamicOps, WorldOptions worldOptions, WorldDimensions worldDimensions) {
@@ -19,12 +17,4 @@ public record WorldGenSettings(WorldOptions b, WorldDimensions c) {
     public static <T> DataResult<T> encode(DynamicOps<T> dynamicOps, WorldOptions worldOptions, RegistryAccess registryAccess) {
         return encode(dynamicOps, worldOptions, new WorldDimensions(registryAccess.registryOrThrow(Registries.LEVEL_STEM)));
     }
-
-    public WorldOptions options() {
-        return this.options;
-    }
-
-    public WorldDimensions dimensions() {
-        return this.dimensions;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/blending/Blender.java b/src/main/java/net/minecraft/world/level/levelgen/blending/Blender.java
index f243607fc9ec9261fda4440e2e24e09f6a37cb25..9ebab46c49ee8a8b7c97d385cac214f65c517362 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/blending/Blender.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/blending/Blender.java
@@ -109,7 +109,7 @@ public class Blender {
             MutableDouble mutableDouble = new MutableDouble(0.0D);
             MutableDouble mutableDouble2 = new MutableDouble(0.0D);
             MutableDouble mutableDouble3 = new MutableDouble(Double.POSITIVE_INFINITY);
-            this.heightAndBiomeBlendingData.forEach((l, blendingData) -> blendingData.iterateHeights(QuartPos.fromSection(ChunkPos.getX(l)), QuartPos.fromSection(ChunkPos.getZ(l)), (i3x, i4x, d) -> {
+            this.heightAndBiomeBlendingData.forEach((l, blendingData) -> blendingData.iterateHeights(QuartPos.fromSection(ChunkPos.getX(l)), QuartPos.fromSection(ChunkPos.getZ(l)), (i3x, i4x, dIn) -> {
                     double d2 = Mth.length((double)(i3 - i3x), (double)(i4 - i4x));
                     if (!(d2 > (double)HEIGHT_BLENDING_RANGE_CELLS)) {
                         if (d2 < mutableDouble3.doubleValue()) {
@@ -117,7 +117,7 @@ public class Blender {
                         }
 
                         double d3 = 1.0D / (d2 * d2 * d2 * d2);
-                        mutableDouble2.add(d * d3);
+                        mutableDouble2.add(dIn * d3);
                         mutableDouble.add(d3);
                     }
                 }));
@@ -150,18 +150,18 @@ public class Blender {
             MutableDouble mutableDouble = new MutableDouble(0.0D);
             MutableDouble mutableDouble2 = new MutableDouble(0.0D);
             MutableDouble mutableDouble3 = new MutableDouble(Double.POSITIVE_INFINITY);
-            this.densityBlendingData.forEach((l, blendingData) -> blendingData.iterateDensities(QuartPos.fromSection(ChunkPos.getX(l)), QuartPos.fromSection(ChunkPos.getZ(l)), i2 - 1, i2 + 1, (i4, i5, i6, d) -> {
-                    double d2 = Mth.length((double)(i - i4), (double)((i2 - i5) * 2), (double)(i3 - i6));
-                    if (!(d2 > 2.0D)) {
-                        if (d2 < mutableDouble3.doubleValue()) {
-                            mutableDouble3.setValue(d2);
-                        }
-
-                        double d3 = 1.0D / (d2 * d2 * d2 * d2);
-                        mutableDouble2.add(d * d3);
-                        mutableDouble.add(d3);
+            this.densityBlendingData.forEach((l, blendingData) -> blendingData.iterateDensities(QuartPos.fromSection(ChunkPos.getX(l)), QuartPos.fromSection(ChunkPos.getZ(l)), i2 - 1, i2 + 1, (i4, i5, i6, dIn) -> {
+                double d2In = Mth.length((double)(i - i4), (double)((i2 - i5) * 2), (double)(i3 - i6));
+                if (!(d2In > 2.0D)) {
+                    if (d2In < mutableDouble3.doubleValue()) {
+                        mutableDouble3.setValue(d2In);
                     }
-                }));
+
+                    double d3 = 1.0D / (d2In * d2In * d2In * d2In);
+                    mutableDouble2.add(dIn * d3);
+                    mutableDouble.add(d3);
+                }
+            }));
             if (mutableDouble3.doubleValue() == Double.POSITIVE_INFINITY) {
                 return d;
             } else {
@@ -214,15 +214,15 @@ public class Blender {
         MutableDouble mutableDouble = new MutableDouble(Double.POSITIVE_INFINITY);
         MutableObject<Holder<Biome>> mutableObject = new MutableObject();
         this.heightAndBiomeBlendingData.forEach((l, blendingData) -> blendingData.iterateBiomes(QuartPos.fromSection(ChunkPos.getX(l)), i2, QuartPos.fromSection(ChunkPos.getZ(l)), (i3x, i4, holder) -> {
-                double d = Mth.length((double)(i - i3x), (double)(i3 - i4));
-                if (!(d > (double)HEIGHT_BLENDING_RANGE_CELLS)) {
-                    if (d < mutableDouble.doubleValue()) {
+                double d3 = Mth.length((double)(i - i3x), (double)(i3 - i4));
+                if (!(d3 > (double)HEIGHT_BLENDING_RANGE_CELLS)) {
+                    if (d3 < mutableDouble.doubleValue()) {
                         mutableObject.setValue(holder);
-                        mutableDouble.setValue(d);
+                        mutableDouble.setValue(d3);
                     }
 
-                }
-            }));
+            }
+        }));
         if (mutableDouble.doubleValue() == Double.POSITIVE_INFINITY) {
             return null;
         } else {
@@ -358,17 +358,7 @@ public class Blender {
         return Mth.length(Math.max(0.0D, d7), Math.max(0.0D, d8), Math.max(0.0D, d9));
     }
 
-    public static record BlendingOutput(double a, double b) {
-        private final double alpha;
-        private final double blendingOffset;
-
-        public double alpha() {
-            return this.alpha;
-        }
-
-        public double blendingOffset() {
-            return this.blendingOffset;
-        }
+    public static record BlendingOutput(double alpha, double blendingOffset) {
     }
 
     interface CellValueGetter {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/blending/BlendingData.java b/src/main/java/net/minecraft/world/level/levelgen/blending/BlendingData.java
index 060357f578c64051492640bb6281c54bbb93cd52..463fdae3fbbc3e0ab548647e21c06eb708bd6a82 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/blending/BlendingData.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/blending/BlendingData.java
@@ -55,7 +55,7 @@ public class BlendingData {
     private final List<List<Holder<Biome>>> biomes;
     private final transient double[][] densities;
     private static final Codec<double[]> DOUBLE_ARRAY_CODEC = Codec.DOUBLE.listOf().xmap(Doubles::toArray, Doubles::asList);
-    public static final Codec<BlendingData> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_section").forGetter((blendingData) -> blendingData.areaWithOldGeneration.getMinSection()), Codec.INT.fieldOf("max_section").forGetter((blendingData) -> blendingData.areaWithOldGeneration.getMaxSection()), DOUBLE_ARRAY_CODEC.optionalFieldOf("heights").forGetter((blendingData) -> DoubleStream.of(blendingData.heights).anyMatch((d) -> d != Double.MAX_VALUE) ? Optional.of(blendingData.heights) : Optional.empty())).apply(instance, BlendingData::new)).comapFlatMap(BlendingData::validateArraySize, Function.identity());
+    public static final Codec<BlendingData> CODEC = RecordCodecBuilder.<BlendingData>create((instance) -> instance.group(Codec.INT.fieldOf("min_section").forGetter((blendingData) -> blendingData.areaWithOldGeneration.getMinSection()), Codec.INT.fieldOf("max_section").forGetter((blendingData) -> blendingData.areaWithOldGeneration.getMaxSection()), DOUBLE_ARRAY_CODEC.optionalFieldOf("heights").forGetter((blendingData) -> DoubleStream.of(blendingData.heights).anyMatch((d) -> d != Double.MAX_VALUE) ? Optional.of(blendingData.heights) : Optional.empty())).apply(instance, BlendingData::new)).comapFlatMap(BlendingData::validateArraySize, Function.identity());
 
     private static DataResult<BlendingData> validateArraySize(BlendingData blendingData) {
         return blendingData.heights.length != CELL_COLUMN_COUNT ? DataResult.error(() -> "heights has to be of length " + CELL_COLUMN_COUNT) : DataResult.success(blendingData);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java b/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java
index 6e71fdc57ef30a6dc4a43ec85ce56f99a52e1621..4f2c2b6455ac659831d597f8029f6751e926209b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver.java
@@ -17,9 +17,7 @@ import net.minecraft.world.level.chunk.CarvingMask;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.levelgen.Aquifer;
 
-public record ConfiguredWorldCarver<WC extends CarverConfiguration>(WorldCarver<WC> d, WC e) {
-    private final WorldCarver<WC> worldCarver;
-    private final WC config;
+public record ConfiguredWorldCarver<WC extends CarverConfiguration>(WorldCarver<WC> worldCarver, WC config) {
     public static final Codec<ConfiguredWorldCarver<?>> DIRECT_CODEC = BuiltInRegistries.CARVER.byNameCodec().dispatch((configuredWorldCarver) -> configuredWorldCarver.worldCarver, WorldCarver::configuredCodec);
     public static final Codec<Holder<ConfiguredWorldCarver<?>>> CODEC = RegistryFileCodec.create(Registries.CONFIGURED_CARVER, DIRECT_CODEC);
     public static final Codec<HolderSet<ConfiguredWorldCarver<?>>> LIST_CODEC = RegistryCodecs.homogeneousList(Registries.CONFIGURED_CARVER, DIRECT_CODEC);
@@ -31,12 +29,4 @@ public record ConfiguredWorldCarver<WC extends CarverConfiguration>(WorldCarver<
     public boolean carve(CarvingContext carvingContext, ChunkAccess chunkAccess, Function<BlockPos, Holder<Biome>> function, RandomSource randomSource, Aquifer aquifer, ChunkPos chunkPos, CarvingMask carvingMask) {
         return SharedConstants.debugVoidTerrain(chunkAccess.getPos()) ? false : this.worldCarver.carve(carvingContext, this.config, chunkAccess, function, randomSource, aquifer, chunkPos, carvingMask);
     }
-
-    public WorldCarver<WC> worldCarver() {
-        return this.worldCarver;
-    }
-
-    public WC config() {
-        return this.config;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
index 66d3b241e8ec1b5657f255a38267edbb618f6f31..e1eedb894f207d6f004f19cfefbb882117062925 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/ConfiguredFeature.java
@@ -14,9 +14,7 @@ import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 
-public record ConfiguredFeature<FC extends FeatureConfiguration, F extends Feature<FC>>(F d, FC e) {
-    private final F feature;
-    private final FC config;
+public record ConfiguredFeature<FC extends FeatureConfiguration, F extends Feature<FC>>(F feature, FC config) {
     public static final Codec<ConfiguredFeature<?, ?>> DIRECT_CODEC = BuiltInRegistries.FEATURE.byNameCodec().dispatch((configuredFeature) -> configuredFeature.feature, Feature::configuredCodec);
     public static final Codec<Holder<ConfiguredFeature<?, ?>>> CODEC = RegistryFileCodec.create(Registries.CONFIGURED_FEATURE, DIRECT_CODEC);
     public static final Codec<HolderSet<ConfiguredFeature<?, ?>>> LIST_CODEC = RegistryCodecs.homogeneousList(Registries.CONFIGURED_FEATURE, DIRECT_CODEC);
@@ -32,12 +30,4 @@ public record ConfiguredFeature<FC extends FeatureConfiguration, F extends Featu
     public String toString() {
         return "Configured: " + this.feature + ": " + this.config;
     }
-
-    public F feature() {
-        return this.feature;
-    }
-
-    public FC config() {
-        return this.config;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/CoralFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/CoralFeature.java
index 4570ac6a4f86f03b1102d9269969589b8bc53d6d..6e77afe3adf7482339a628c2735062138ad31132 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/CoralFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/CoralFeature.java
@@ -48,12 +48,12 @@ public abstract class CoralFeature extends Feature<NoneFeatureConfiguration> {
                     BlockPos blockPos3 = blockPos.relative(direction);
                     if (levelAccessor.getBlockState(blockPos3).is(Blocks.WATER)) {
                         BuiltInRegistries.BLOCK.getTag(BlockTags.WALL_CORALS).flatMap((named) -> named.getRandomElement(randomSource)).map(Holder::value).ifPresent((block) -> {
-                            BlockState blockState = block.defaultBlockState();
-                            if (blockState.hasProperty(BaseCoralWallFanBlock.FACING)) {
-                                blockState = blockState.setValue(BaseCoralWallFanBlock.FACING, direction);
+                            BlockState blockStateIn = block.defaultBlockState();
+                            if (blockStateIn.hasProperty(BaseCoralWallFanBlock.FACING)) {
+                                blockStateIn = blockStateIn.setValue(BaseCoralWallFanBlock.FACING, direction);
                             }
 
-                            levelAccessor.setBlock(blockPos3, blockState, 2);
+                            levelAccessor.setBlock(blockPos3, blockStateIn, 2);
                         });
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/FeatureCountTracker.java b/src/main/java/net/minecraft/world/level/levelgen/feature/FeatureCountTracker.java
index 8a502adbd1caaf8585ba7b1c0e09c958d7796a21..94805f81af0a02448a31c1e94297f0b1d1fe6836 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/FeatureCountTracker.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/FeatureCountTracker.java
@@ -62,29 +62,9 @@ public class FeatureCountTracker {
         });
     }
 
-    static record FeatureData(ConfiguredFeature<?, ?> a, Optional<PlacedFeature> b) {
-        private final ConfiguredFeature<?, ?> feature;
-        private final Optional<PlacedFeature> topFeature;
-
-        public ConfiguredFeature<?, ?> feature() {
-            return this.feature;
-        }
-
-        public Optional<PlacedFeature> topFeature() {
-            return this.topFeature;
-        }
+    static record FeatureData(ConfiguredFeature<?, ?> feature, Optional<PlacedFeature> topFeature) {
     }
 
-    static record LevelData(Object2IntMap<FeatureCountTracker.FeatureData> a, MutableInt b) {
-        private final Object2IntMap<FeatureCountTracker.FeatureData> featureData;
-        private final MutableInt chunksWithFeatures;
-
-        public Object2IntMap<FeatureCountTracker.FeatureData> featureData() {
-            return this.featureData;
-        }
-
-        public MutableInt chunksWithFeatures() {
-            return this.chunksWithFeatures;
-        }
+    static record LevelData(Object2IntMap<FeatureCountTracker.FeatureData> featureData, MutableInt chunksWithFeatures) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/LakeFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/LakeFeature.java
index 0264021eb3c2bae47b0e8e54311ba148ce0da98d..815289a73b483899b31a26ff8875eb6f4c2dd18d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/LakeFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/LakeFeature.java
@@ -133,9 +133,7 @@ public class LakeFeature extends Feature<LakeFeature.Configuration> {
         return !blockState.is(BlockTags.FEATURES_CANNOT_REPLACE);
     }
 
-    public static record Configuration(BlockStateProvider b, BlockStateProvider c) implements FeatureConfiguration {
-        private final BlockStateProvider fluid;
-        private final BlockStateProvider barrier;
+    public static record Configuration(BlockStateProvider fluid, BlockStateProvider barrier) implements FeatureConfiguration {
         public static final Codec<LakeFeature.Configuration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockStateProvider.CODEC.fieldOf("fluid").forGetter(LakeFeature.Configuration::fluid), BlockStateProvider.CODEC.fieldOf("barrier").forGetter(LakeFeature.Configuration::barrier)).apply(instance, LakeFeature.Configuration::new));
 
         public BlockStateProvider fluid() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockColumnConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockColumnConfiguration.java
index 387819c53fa7a55bf9f56f6c5a07bcafb169dd05..781c83464ebce9f4c7b897de7fe7ccd57a421115 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockColumnConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/BlockColumnConfiguration.java
@@ -8,11 +8,7 @@ import net.minecraft.util.valueproviders.IntProvider;
 import net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate;
 import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
 
-public record BlockColumnConfiguration(List<BlockColumnConfiguration.Layer> b, Direction c, BlockPredicate d, boolean e) implements FeatureConfiguration {
-    private final List<BlockColumnConfiguration.Layer> layers;
-    private final Direction direction;
-    private final BlockPredicate allowedPlacement;
-    private final boolean prioritizeTip;
+public record BlockColumnConfiguration(List<BlockColumnConfiguration.Layer> layers, Direction direction, BlockPredicate allowedPlacement, boolean prioritizeTip) implements FeatureConfiguration {
     public static final Codec<BlockColumnConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockColumnConfiguration.Layer.CODEC.listOf().fieldOf("layers").forGetter(BlockColumnConfiguration::layers), Direction.CODEC.fieldOf("direction").forGetter(BlockColumnConfiguration::direction), BlockPredicate.CODEC.fieldOf("allowed_placement").forGetter(BlockColumnConfiguration::allowedPlacement), Codec.BOOL.fieldOf("prioritize_tip").forGetter(BlockColumnConfiguration::prioritizeTip)).apply(instance, BlockColumnConfiguration::new));
 
     public static BlockColumnConfiguration.Layer layer(IntProvider intProvider, BlockStateProvider blockStateProvider) {
@@ -23,33 +19,7 @@ public record BlockColumnConfiguration(List<BlockColumnConfiguration.Layer> b, D
         return new BlockColumnConfiguration(List.of(layer(intProvider, blockStateProvider)), Direction.UP, BlockPredicate.ONLY_IN_AIR_PREDICATE, false);
     }
 
-    public List<BlockColumnConfiguration.Layer> layers() {
-        return this.layers;
-    }
-
-    public Direction direction() {
-        return this.direction;
-    }
-
-    public BlockPredicate allowedPlacement() {
-        return this.allowedPlacement;
-    }
-
-    public boolean prioritizeTip() {
-        return this.prioritizeTip;
-    }
-
-    public static record Layer(IntProvider b, BlockStateProvider c) {
-        private final IntProvider height;
-        private final BlockStateProvider state;
+    public static record Layer(IntProvider height, BlockStateProvider state) {
         public static final Codec<BlockColumnConfiguration.Layer> CODEC = RecordCodecBuilder.create((instance) -> instance.group(IntProvider.NON_NEGATIVE_CODEC.fieldOf("height").forGetter(BlockColumnConfiguration.Layer::height), BlockStateProvider.CODEC.fieldOf("provider").forGetter(BlockColumnConfiguration.Layer::state)).apply(instance, BlockColumnConfiguration.Layer::new));
-
-        public IntProvider height() {
-            return this.height;
-        }
-
-        public BlockStateProvider state() {
-            return this.state;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java
index 1ad318b76fa8942c3fcf51789db56611d16e05e2..722511d24eeef36e394a8a0334250d370c7e3efc 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration.java
@@ -6,26 +6,6 @@ import net.minecraft.util.valueproviders.IntProvider;
 import net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate;
 import net.minecraft.world.level.levelgen.feature.stateproviders.RuleBasedBlockStateProvider;
 
-public record DiskConfiguration(RuleBasedBlockStateProvider b, BlockPredicate c, IntProvider d, int e) implements FeatureConfiguration {
-    private final RuleBasedBlockStateProvider stateProvider;
-    private final BlockPredicate target;
-    private final IntProvider radius;
-    private final int halfHeight;
+public record DiskConfiguration(RuleBasedBlockStateProvider stateProvider, BlockPredicate target, IntProvider radius, int halfHeight) implements FeatureConfiguration {
     public static final Codec<DiskConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(RuleBasedBlockStateProvider.CODEC.fieldOf("state_provider").forGetter(DiskConfiguration::stateProvider), BlockPredicate.CODEC.fieldOf("target").forGetter(DiskConfiguration::target), IntProvider.codec(0, 8).fieldOf("radius").forGetter(DiskConfiguration::radius), Codec.intRange(0, 4).fieldOf("half_height").forGetter(DiskConfiguration::halfHeight)).apply(instance, DiskConfiguration::new));
-
-    public RuleBasedBlockStateProvider stateProvider() {
-        return this.stateProvider;
-    }
-
-    public BlockPredicate target() {
-        return this.target;
-    }
-
-    public IntProvider radius() {
-        return this.radius;
-    }
-
-    public int halfHeight() {
-        return this.halfHeight;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
index fd5cf431ba3566fe5a6f887472ead45de5e4b7b5..40b0546975a6ec54039b98007431f2c0752338b7 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration.java
@@ -6,26 +6,6 @@ import net.minecraft.core.Holder;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.world.level.levelgen.placement.PlacedFeature;
 
-public record RandomPatchConfiguration(int b, int c, int d, Holder<PlacedFeature> e) implements FeatureConfiguration {
-    private final int tries;
-    private final int xzSpread;
-    private final int ySpread;
-    private final Holder<PlacedFeature> feature;
+public record RandomPatchConfiguration(int tries, int xzSpread, int ySpread, Holder<PlacedFeature> feature) implements FeatureConfiguration {
     public static final Codec<RandomPatchConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.POSITIVE_INT.fieldOf("tries").orElse(128).forGetter(RandomPatchConfiguration::tries), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("xz_spread").orElse(7).forGetter(RandomPatchConfiguration::xzSpread), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("y_spread").orElse(3).forGetter(RandomPatchConfiguration::ySpread), PlacedFeature.CODEC.fieldOf("feature").forGetter(RandomPatchConfiguration::feature)).apply(instance, RandomPatchConfiguration::new));
-
-    public int tries() {
-        return this.tries;
-    }
-
-    public int xzSpread() {
-        return this.xzSpread;
-    }
-
-    public int ySpread() {
-        return this.ySpread;
-    }
-
-    public Holder<PlacedFeature> feature() {
-        return this.feature;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SculkPatchConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SculkPatchConfiguration.java
index 3c89fb89f2fbb670887f620757ed6f9dbbf20848..0421a358422c219c73d6aae6b664c3026fdf5bd5 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SculkPatchConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SculkPatchConfiguration.java
@@ -4,41 +4,6 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.util.valueproviders.IntProvider;
 
-public record SculkPatchConfiguration(int b, int c, int d, int e, int f, IntProvider g, float h) implements FeatureConfiguration {
-    private final int chargeCount;
-    private final int amountPerCharge;
-    private final int spreadAttempts;
-    private final int growthRounds;
-    private final int spreadRounds;
-    private final IntProvider extraRareGrowths;
-    private final float catalystChance;
+public record SculkPatchConfiguration(int chargeCount, int amountPerCharge, int spreadAttempts, int growthRounds, int spreadRounds, IntProvider extraRareGrowths, float catalystChance) implements FeatureConfiguration {
     public static final Codec<SculkPatchConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.intRange(1, 32).fieldOf("charge_count").forGetter(SculkPatchConfiguration::chargeCount), Codec.intRange(1, 500).fieldOf("amount_per_charge").forGetter(SculkPatchConfiguration::amountPerCharge), Codec.intRange(1, 64).fieldOf("spread_attempts").forGetter(SculkPatchConfiguration::spreadAttempts), Codec.intRange(0, 8).fieldOf("growth_rounds").forGetter(SculkPatchConfiguration::growthRounds), Codec.intRange(0, 8).fieldOf("spread_rounds").forGetter(SculkPatchConfiguration::spreadRounds), IntProvider.CODEC.fieldOf("extra_rare_growths").forGetter(SculkPatchConfiguration::extraRareGrowths), Codec.floatRange(0.0F, 1.0F).fieldOf("catalyst_chance").forGetter(SculkPatchConfiguration::catalystChance)).apply(instance, SculkPatchConfiguration::new));
-
-    public int chargeCount() {
-        return this.chargeCount;
-    }
-
-    public int amountPerCharge() {
-        return this.amountPerCharge;
-    }
-
-    public int spreadAttempts() {
-        return this.spreadAttempts;
-    }
-
-    public int growthRounds() {
-        return this.growthRounds;
-    }
-
-    public int spreadRounds() {
-        return this.spreadRounds;
-    }
-
-    public IntProvider extraRareGrowths() {
-        return this.extraRareGrowths;
-    }
-
-    public float catalystChance() {
-        return this.catalystChance;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
index b401eece159cbdc649582dfd1b72907cb568efce..9a1e0952b2ad80b66727222664fe5e874d5f8821 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration.java
@@ -4,11 +4,6 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
 
-public record SimpleBlockConfiguration(BlockStateProvider b) implements FeatureConfiguration {
-    private final BlockStateProvider toPlace;
+public record SimpleBlockConfiguration(BlockStateProvider toPlace) implements FeatureConfiguration {
     public static final Codec<SimpleBlockConfiguration> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockStateProvider.CODEC.fieldOf("to_place").forGetter((simpleBlockConfiguration) -> simpleBlockConfiguration.toPlace)).apply(instance, SimpleBlockConfiguration::new));
-
-    public BlockStateProvider toPlace() {
-        return this.toPlace;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TwistingVinesConfig.java b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TwistingVinesConfig.java
index e93b917cf6e56c2653b693ebf0461f9aa0abc0ac..763643f5df58a47f8068d10a2f1c834b1f1dba7d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TwistingVinesConfig.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/configurations/TwistingVinesConfig.java
@@ -4,21 +4,6 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.util.ExtraCodecs;
 
-public record TwistingVinesConfig(int b, int c, int d) implements FeatureConfiguration {
-    private final int spreadWidth;
-    private final int spreadHeight;
-    private final int maxHeight;
+public record TwistingVinesConfig(int spreadWidth, int spreadHeight, int maxHeight) implements FeatureConfiguration {
     public static final Codec<TwistingVinesConfig> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.POSITIVE_INT.fieldOf("spread_width").forGetter(TwistingVinesConfig::spreadWidth), ExtraCodecs.POSITIVE_INT.fieldOf("spread_height").forGetter(TwistingVinesConfig::spreadHeight), ExtraCodecs.POSITIVE_INT.fieldOf("max_height").forGetter(TwistingVinesConfig::maxHeight)).apply(instance, TwistingVinesConfig::new));
-
-    public int spreadWidth() {
-        return this.spreadWidth;
-    }
-
-    public int spreadHeight() {
-        return this.spreadHeight;
-    }
-
-    public int maxHeight() {
-        return this.maxHeight;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/AboveRootPlacement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/AboveRootPlacement.java
index d57618e2f9c50d580d68f4e3f0643bd48de9b6c1..6f396f950b905acabce2d588fc9fa2191ddd1a96 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/AboveRootPlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/AboveRootPlacement.java
@@ -4,16 +4,6 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
 
-public record AboveRootPlacement(BlockStateProvider b, float c) {
-    private final BlockStateProvider aboveRootProvider;
-    private final float aboveRootPlacementChance;
+public record AboveRootPlacement(BlockStateProvider aboveRootProvider, float aboveRootPlacementChance) {
     public static final Codec<AboveRootPlacement> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockStateProvider.CODEC.fieldOf("above_root_provider").forGetter((aboveRootPlacement) -> aboveRootPlacement.aboveRootProvider), Codec.floatRange(0.0F, 1.0F).fieldOf("above_root_placement_chance").forGetter((aboveRootPlacement) -> aboveRootPlacement.aboveRootPlacementChance)).apply(instance, AboveRootPlacement::new));
-
-    public BlockStateProvider aboveRootProvider() {
-        return this.aboveRootProvider;
-    }
-
-    public float aboveRootPlacementChance() {
-        return this.aboveRootPlacementChance;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement.java b/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement.java
index f77eccea740fd1fd96d221df5d232cf2d12b77ad..66fbdd9bb71a18d25824afac782b317ad8621fa2 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement.java
@@ -8,13 +8,7 @@ import net.minecraft.core.registries.Registries;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
 
-public record MangroveRootPlacement(HolderSet<Block> b, HolderSet<Block> c, BlockStateProvider d, int e, int f, float g) {
-    private final HolderSet<Block> canGrowThrough;
-    private final HolderSet<Block> muddyRootsIn;
-    private final BlockStateProvider muddyRootsProvider;
-    private final int maxRootWidth;
-    private final int maxRootLength;
-    private final float randomSkewChance;
+public record MangroveRootPlacement(HolderSet<Block> canGrowThrough, HolderSet<Block> muddyRootsIn, BlockStateProvider muddyRootsProvider, int maxRootWidth, int maxRootLength, float randomSkewChance) {
     public static final Codec<MangroveRootPlacement> CODEC = RecordCodecBuilder.create((instance) -> instance.group(RegistryCodecs.homogeneousList(Registries.BLOCK).fieldOf("can_grow_through").forGetter((mangroveRootPlacement) -> mangroveRootPlacement.canGrowThrough), RegistryCodecs.homogeneousList(Registries.BLOCK).fieldOf("muddy_roots_in").forGetter((mangroveRootPlacement) -> mangroveRootPlacement.muddyRootsIn), BlockStateProvider.CODEC.fieldOf("muddy_roots_provider").forGetter((mangroveRootPlacement) -> mangroveRootPlacement.muddyRootsProvider), Codec.intRange(1, 12).fieldOf("max_root_width").forGetter((mangroveRootPlacement) -> mangroveRootPlacement.maxRootWidth), Codec.intRange(1, 64).fieldOf("max_root_length").forGetter((mangroveRootPlacement) -> mangroveRootPlacement.maxRootLength), Codec.floatRange(0.0F, 1.0F).fieldOf("random_skew_chance").forGetter((mangroveRootPlacement) -> mangroveRootPlacement.randomSkewChance)).apply(instance, MangroveRootPlacement::new));
 
     public HolderSet<Block> canGrowThrough() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RuleBasedBlockStateProvider.java b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RuleBasedBlockStateProvider.java
index 86846bcfc28e702d859bdc4456696a4f0d8036b6..d4cc378ee2dddf37bb0e6c02a76ece3036439e37 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RuleBasedBlockStateProvider.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/stateproviders/RuleBasedBlockStateProvider.java
@@ -10,9 +10,7 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate;
 
-public record RuleBasedBlockStateProvider(BlockStateProvider b, List<RuleBasedBlockStateProvider.Rule> c) {
-    private final BlockStateProvider fallback;
-    private final List<RuleBasedBlockStateProvider.Rule> rules;
+public record RuleBasedBlockStateProvider(BlockStateProvider fallback, List<RuleBasedBlockStateProvider.Rule> rules) {
     public static final Codec<RuleBasedBlockStateProvider> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockStateProvider.CODEC.fieldOf("fallback").forGetter(RuleBasedBlockStateProvider::fallback), RuleBasedBlockStateProvider.Rule.CODEC.listOf().fieldOf("rules").forGetter(RuleBasedBlockStateProvider::rules)).apply(instance, RuleBasedBlockStateProvider::new));
 
     public static RuleBasedBlockStateProvider simple(BlockStateProvider blockStateProvider) {
@@ -33,25 +31,7 @@ public record RuleBasedBlockStateProvider(BlockStateProvider b, List<RuleBasedBl
         return this.fallback.getState(randomSource, blockPos);
     }
 
-    public BlockStateProvider fallback() {
-        return this.fallback;
-    }
-
-    public List<RuleBasedBlockStateProvider.Rule> rules() {
-        return this.rules;
-    }
-
-    public static record Rule(BlockPredicate b, BlockStateProvider c) {
-        private final BlockPredicate ifTrue;
-        private final BlockStateProvider then;
+    public static record Rule(BlockPredicate ifTrue, BlockStateProvider then) {
         public static final Codec<RuleBasedBlockStateProvider.Rule> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BlockPredicate.CODEC.fieldOf("if_true").forGetter(RuleBasedBlockStateProvider.Rule::ifTrue), BlockStateProvider.CODEC.fieldOf("then").forGetter(RuleBasedBlockStateProvider.Rule::then)).apply(instance, RuleBasedBlockStateProvider.Rule::new));
-
-        public BlockPredicate ifTrue() {
-            return this.ifTrue;
-        }
-
-        public BlockStateProvider then() {
-            return this.then;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
index d900cc9ddf00f835c838de1035594188a0ea3bf3..0977dac3c10af5211f409962f69ece14bc1a32bd 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator.java
@@ -40,7 +40,7 @@ public class AlterGroundDecorator extends TreeDecorator {
                 this.placeCircle(context, blockPos.west().south(2));
                 this.placeCircle(context, blockPos.east(2).south(2));
 
-                for(int i = 0; i < 5; ++i) {
+                for(int ix = 0; ix < 5; ++ix) {
                     int i2 = context.random().nextInt(64);
                     int i3 = i2 % 8;
                     int i4 = i2 / 8;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
index a34c5189f335bcc326bd8473697db1f8e1f9930a..539d0c5157bb836856615ff9143234545ebf21a5 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator.java
@@ -43,9 +43,9 @@ public class BeehiveDecorator extends TreeDecorator {
                 if (!optional.isEmpty()) {
                     context.setBlock((BlockPos)optional.get(), Blocks.BEE_NEST.defaultBlockState().setValue(BeehiveBlock.FACING, WORLDGEN_FACING));
                     context.level().getBlockEntity((BlockPos)optional.get(), BlockEntityType.BEEHIVE).ifPresent((beehiveBlockEntity) -> {
-                        int i = 2 + randomSource.nextInt(2);
+                        int iIn = 2 + randomSource.nextInt(2);
 
-                        for(int i2 = 0; i2 < i; ++i2) {
+                        for(int i2 = 0; i2 < iIn; ++i2) {
                             CompoundTag compoundTag = new CompoundTag();
                             compoundTag.putString("id", BuiltInRegistries.ENTITY_TYPE.getKey(EntityType.BEE).toString());
                             beehiveBlockEntity.storeBee(compoundTag, randomSource.nextInt(599), false);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorPreset.java b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorPreset.java
index 5209b0bcf38a7d59ab6d4eb5993d68dfe631b380..8234b6201799f59ac097a91307259817b1b55588 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorPreset.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorPreset.java
@@ -8,17 +8,7 @@ import net.minecraft.resources.RegistryFileCodec;
 import net.minecraft.resources.RegistryFixedCodec;
 import net.minecraft.world.item.Item;
 
-public record FlatLevelGeneratorPreset(Holder<Item> c, FlatLevelGeneratorSettings d) {
-    private final Holder<Item> displayItem;
-    private final FlatLevelGeneratorSettings settings;
+public record FlatLevelGeneratorPreset(Holder<Item> displayItem, FlatLevelGeneratorSettings settings) {
     public static final Codec<FlatLevelGeneratorPreset> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(RegistryFixedCodec.create(Registries.ITEM).fieldOf("display").forGetter((flatLevelGeneratorPreset) -> flatLevelGeneratorPreset.displayItem), FlatLevelGeneratorSettings.CODEC.fieldOf("settings").forGetter((flatLevelGeneratorPreset) -> flatLevelGeneratorPreset.settings)).apply(instance, FlatLevelGeneratorPreset::new));
     public static final Codec<Holder<FlatLevelGeneratorPreset>> CODEC = RegistryFileCodec.create(Registries.FLAT_LEVEL_GENERATOR_PRESET, DIRECT_CODEC);
-
-    public Holder<Item> displayItem() {
-        return this.displayItem;
-    }
-
-    public FlatLevelGeneratorSettings settings() {
-        return this.settings;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
index ad509763be12ab7519cdd6cb06211cb38f0bfb9f..01a2934b23598e93f28e85bcada699367b3a6a6a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings.java
@@ -33,7 +33,7 @@ import org.slf4j.Logger;
 
 public class FlatLevelGeneratorSettings {
     private static final Logger LOGGER = LogUtils.getLogger();
-    public static final Codec<FlatLevelGeneratorSettings> CODEC = RecordCodecBuilder.create((instance) -> instance.group(RegistryCodecs.homogeneousList(Registries.STRUCTURE_SET).optionalFieldOf("structure_overrides").forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.structureOverrides), FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter(FlatLevelGeneratorSettings::getLayersInfo), Codec.BOOL.fieldOf("lakes").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.addLakes), Codec.BOOL.fieldOf("features").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.decoration), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter((flatLevelGeneratorSettings) -> Optional.of(flatLevelGeneratorSettings.biome)), RegistryOps.retrieveElement(Biomes.PLAINS), RegistryOps.retrieveElement(MiscOverworldPlacements.LAKE_LAVA_UNDERGROUND), RegistryOps.retrieveElement(MiscOverworldPlacements.LAKE_LAVA_SURFACE)).apply(instance, FlatLevelGeneratorSettings::new)).comapFlatMap(FlatLevelGeneratorSettings::validateHeight, Function.identity()).stable();
+    public static final Codec<FlatLevelGeneratorSettings> CODEC = RecordCodecBuilder.<FlatLevelGeneratorSettings>create((instance) -> instance.group(RegistryCodecs.homogeneousList(Registries.STRUCTURE_SET).optionalFieldOf("structure_overrides").forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.structureOverrides), FlatLayerInfo.CODEC.listOf().fieldOf("layers").forGetter(FlatLevelGeneratorSettings::getLayersInfo), Codec.BOOL.fieldOf("lakes").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.addLakes), Codec.BOOL.fieldOf("features").orElse(false).forGetter((flatLevelGeneratorSettings) -> flatLevelGeneratorSettings.decoration), Biome.CODEC.optionalFieldOf("biome").orElseGet(Optional::empty).forGetter((flatLevelGeneratorSettings) -> Optional.of(flatLevelGeneratorSettings.biome)), RegistryOps.retrieveElement(Biomes.PLAINS), RegistryOps.retrieveElement(MiscOverworldPlacements.LAKE_LAVA_UNDERGROUND), RegistryOps.retrieveElement(MiscOverworldPlacements.LAKE_LAVA_SURFACE)).apply(instance, FlatLevelGeneratorSettings::new)).comapFlatMap(FlatLevelGeneratorSettings::validateHeight, Function.identity()).stable();
     private final Optional<HolderSet<StructureSet>> structureOverrides;
     private final List<FlatLayerInfo> layersInfo = Lists.newArrayList();
     private final Holder<Biome> biome;
@@ -123,7 +123,7 @@ public class FlatLevelGeneratorSettings {
 
                 for(int i = 0; i < list.size(); ++i) {
                     if (i != GenerationStep.Decoration.UNDERGROUND_STRUCTURES.ordinal() && i != GenerationStep.Decoration.SURFACE_STRUCTURES.ordinal() && (!this.addLakes || i != GenerationStep.Decoration.LAKES.ordinal())) {
-                        for(Holder<PlacedFeature> holder3 : (HolderSet)list.get(i)) {
+                        for(Holder<PlacedFeature> holder3 : list.get(i)) {
                             plainBuilder.addFeature(i, holder3);
                         }
                     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java b/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
index 626d290e496b3b2df20fa2671a9ced1cf975cacc..58ae3c966a99ce0e597cda414b3b07c6ad5d5736 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/heightproviders/ConstantHeight.java
@@ -34,4 +34,4 @@ public class ConstantHeight extends HeightProvider {
     public String toString() {
         return this.value.toString();
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java b/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
index 418cd2c166ff34538a91261517019c90058368f3..f71e4e53d88629e5bc06cb476197b8dfa70ec211 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
@@ -6,9 +6,7 @@ import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.DensityFunction;
 import net.minecraft.world.level.levelgen.NoiseChunk;
 
-public record MaterialRuleList(List<NoiseChunk.BlockStateFiller> a) implements NoiseChunk.BlockStateFiller {
-    private final List<NoiseChunk.BlockStateFiller> materialRuleList;
-
+public record MaterialRuleList(List<NoiseChunk.BlockStateFiller> materialRuleList) implements NoiseChunk.BlockStateFiller {
     @Nullable
     public BlockState calculate(DensityFunction.FunctionContext functionContext) {
         for(NoiseChunk.BlockStateFiller blockStateFiller : this.materialRuleList) {
@@ -20,8 +18,4 @@ public record MaterialRuleList(List<NoiseChunk.BlockStateFiller> a) implements N
 
         return null;
     }
-
-    public List<NoiseChunk.BlockStateFiller> materialRuleList() {
-        return this.materialRuleList;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/placement/PlacedFeature.java b/src/main/java/net/minecraft/world/level/levelgen/placement/PlacedFeature.java
index 2d953a175a613f70ae24a5c8beafe1ed94fe394e..2538a1fa32b64036f54554992417e36886ad4641 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/placement/PlacedFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/placement/PlacedFeature.java
@@ -17,9 +17,7 @@ import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import org.apache.commons.lang3.mutable.MutableBoolean;
 
-public record PlacedFeature(Holder<ConfiguredFeature<?, ?>> e, List<PlacementModifier> f) {
-    private final Holder<ConfiguredFeature<?, ?>> feature;
-    private final List<PlacementModifier> placement;
+public record PlacedFeature(Holder<ConfiguredFeature<?, ?>> feature, List<PlacementModifier> placement) {
     public static final Codec<PlacedFeature> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(ConfiguredFeature.CODEC.fieldOf("feature").forGetter((placedFeature) -> placedFeature.feature), PlacementModifier.CODEC.listOf().fieldOf("placement").forGetter((placedFeature) -> placedFeature.placement)).apply(instance, PlacedFeature::new));
     public static final Codec<Holder<PlacedFeature>> CODEC = RegistryFileCodec.create(Registries.PLACED_FEATURE, DIRECT_CODEC);
     public static final Codec<HolderSet<PlacedFeature>> LIST_CODEC = RegistryCodecs.homogeneousList(Registries.PLACED_FEATURE, DIRECT_CODEC);
@@ -58,12 +56,4 @@ public record PlacedFeature(Holder<ConfiguredFeature<?, ?>> e, List<PlacementMod
     public String toString() {
         return "Placed " + this.feature;
     }
-
-    public Holder<ConfiguredFeature<?, ?>> feature() {
-        return this.feature;
-    }
-
-    public List<PlacementModifier> placement() {
-        return this.placement;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/presets/WorldPreset.java b/src/main/java/net/minecraft/world/level/levelgen/presets/WorldPreset.java
index a39ccd88b5c462a1eeedf7212e6ae95cb189e0af..f806ec651704be8bcf0e735cb27d7700de2d180e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/presets/WorldPreset.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/presets/WorldPreset.java
@@ -18,7 +18,7 @@ import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.levelgen.WorldDimensions;
 
 public class WorldPreset {
-    public static final Codec<WorldPreset> DIRECT_CODEC = ExtraCodecs.validate(RecordCodecBuilder.create((instance) -> instance.group(Codec.unboundedMap(ResourceKey.codec(Registries.LEVEL_STEM), LevelStem.CODEC).fieldOf("dimensions").forGetter((worldPreset) -> worldPreset.dimensions)).apply(instance, WorldPreset::new)), WorldPreset::requireOverworld);
+    public static final Codec<WorldPreset> DIRECT_CODEC = ExtraCodecs.validate(RecordCodecBuilder.<WorldPreset>create((instance) -> instance.group(Codec.unboundedMap(ResourceKey.codec(Registries.LEVEL_STEM), LevelStem.CODEC).fieldOf("dimensions").forGetter((worldPreset) -> worldPreset.dimensions)).apply(instance, WorldPreset::new)), WorldPreset::requireOverworld);
     public static final Codec<Holder<WorldPreset>> CODEC = RegistryFileCodec.create(Registries.WORLD_PRESET, DIRECT_CODEC);
     private final Map<ResourceKey<LevelStem>, LevelStem> dimensions;
 
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java b/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java
index 9e7ba3ea671e0807adb39745d2de8c651f876592..764e5ac5984e4f8be58f81ada581843ff7d2141d 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java
@@ -153,18 +153,17 @@ public abstract class Structure {
 
     public abstract StructureType<?> type();
 
-    public static record GenerationContext(RegistryAccess a, ChunkGenerator b, BiomeSource c, RandomState d, StructureTemplateManager e, WorldgenRandom f, long g, ChunkPos h, LevelHeightAccessor i, Predicate<Holder<Biome>> j) {
-        private final RegistryAccess registryAccess;
-        final ChunkGenerator chunkGenerator;
-        private final BiomeSource biomeSource;
-        final RandomState randomState;
-        private final StructureTemplateManager structureTemplateManager;
-        private final WorldgenRandom random;
-        private final long seed;
-        private final ChunkPos chunkPos;
-        private final LevelHeightAccessor heightAccessor;
-        final Predicate<Holder<Biome>> validBiome;
-
+    public static record GenerationContext(
+            RegistryAccess registryAccess,
+            ChunkGenerator chunkGenerator,
+            BiomeSource biomeSource,
+            RandomState randomState,
+            StructureTemplateManager structureTemplateManager,
+            WorldgenRandom random,
+            long seed,
+            ChunkPos chunkPos,
+            LevelHeightAccessor heightAccessor,
+            Predicate<Holder<Biome>> validBiome) {
         public GenerationContext(RegistryAccess registryAccess, ChunkGenerator chunkGenerator, BiomeSource biomeSource, RandomState randomState, StructureTemplateManager structureTemplateManager, long l, ChunkPos chunkPos, LevelHeightAccessor levelHeightAccessor, Predicate<Holder<Biome>> predicate) {
             this(registryAccess, chunkGenerator, biomeSource, randomState, structureTemplateManager, makeRandom(l, chunkPos), l, chunkPos, levelHeightAccessor, predicate);
         }
@@ -174,52 +173,9 @@ public abstract class Structure {
             worldgenRandom.setLargeFeatureSeed(l, chunkPos.x, chunkPos.z);
             return worldgenRandom;
         }
-
-        public RegistryAccess registryAccess() {
-            return this.registryAccess;
-        }
-
-        public ChunkGenerator chunkGenerator() {
-            return this.chunkGenerator;
-        }
-
-        public BiomeSource biomeSource() {
-            return this.biomeSource;
-        }
-
-        public RandomState randomState() {
-            return this.randomState;
-        }
-
-        public StructureTemplateManager structureTemplateManager() {
-            return this.structureTemplateManager;
-        }
-
-        public WorldgenRandom random() {
-            return this.random;
-        }
-
-        public long seed() {
-            return this.seed;
-        }
-
-        public ChunkPos chunkPos() {
-            return this.chunkPos;
-        }
-
-        public LevelHeightAccessor heightAccessor() {
-            return this.heightAccessor;
-        }
-
-        public Predicate<Holder<Biome>> validBiome() {
-            return this.validBiome;
-        }
     }
 
-    public static record GenerationStub(BlockPos a, Either<Consumer<StructurePiecesBuilder>, StructurePiecesBuilder> b) {
-        private final BlockPos position;
-        private final Either<Consumer<StructurePiecesBuilder>, StructurePiecesBuilder> generator;
-
+    public static record GenerationStub(BlockPos position, Either<Consumer<StructurePiecesBuilder>, StructurePiecesBuilder> generator) {
         public GenerationStub(BlockPos blockPos, Consumer<StructurePiecesBuilder> consumer) {
             this(blockPos, Either.left(consumer));
         }
@@ -231,21 +187,9 @@ public abstract class Structure {
                 return structurePiecesBuilder;
             }, (structurePiecesBuilder) -> structurePiecesBuilder);
         }
-
-        public BlockPos position() {
-            return this.position;
-        }
-
-        public Either<Consumer<StructurePiecesBuilder>, StructurePiecesBuilder> generator() {
-            return this.generator;
-        }
     }
 
-    public static record StructureSettings(HolderSet<Biome> b, Map<MobCategory, StructureSpawnOverride> c, GenerationStep.Decoration d, TerrainAdjustment e) {
-        final HolderSet<Biome> biomes;
-        final Map<MobCategory, StructureSpawnOverride> spawnOverrides;
-        final GenerationStep.Decoration step;
-        final TerrainAdjustment terrainAdaptation;
+    public static record StructureSettings(HolderSet<Biome> biomes, Map<MobCategory, StructureSpawnOverride> spawnOverrides, GenerationStep.Decoration step, TerrainAdjustment terrainAdaptation) {
         public static final MapCodec<Structure.StructureSettings> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(RegistryCodecs.homogeneousList(Registries.BIOME).fieldOf("biomes").forGetter(Structure.StructureSettings::biomes), Codec.simpleMap(MobCategory.CODEC, StructureSpawnOverride.CODEC, StringRepresentable.keys(MobCategory.values())).fieldOf("spawn_overrides").forGetter(Structure.StructureSettings::spawnOverrides), GenerationStep.Decoration.CODEC.fieldOf("step").forGetter(Structure.StructureSettings::step), TerrainAdjustment.CODEC.optionalFieldOf("terrain_adaptation", TerrainAdjustment.NONE).forGetter(Structure.StructureSettings::terrainAdaptation)).apply(instance, Structure.StructureSettings::new));
 
         public HolderSet<Biome> biomes() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
index 5706b80547fb50c82b2dd278799ec9a00fe3155d..990549b97ff947926769592cd2fc6db174158442 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
@@ -46,7 +46,7 @@ public abstract class StructurePiece {
     private Rotation rotation;
     protected int genDepth;
     private final StructurePieceType type;
-    private static final Set<Block> SHAPE_CHECK_BLOCKS = ImmutableSet.builder().add(Blocks.NETHER_BRICK_FENCE).add(Blocks.TORCH).add(Blocks.WALL_TORCH).add(Blocks.OAK_FENCE).add(Blocks.SPRUCE_FENCE).add(Blocks.DARK_OAK_FENCE).add(Blocks.ACACIA_FENCE).add(Blocks.BIRCH_FENCE).add(Blocks.JUNGLE_FENCE).add(Blocks.LADDER).add(Blocks.IRON_BARS).build();
+    private static final Set<Block> SHAPE_CHECK_BLOCKS = ImmutableSet.<Block>builder().add(Blocks.NETHER_BRICK_FENCE).add(Blocks.TORCH).add(Blocks.WALL_TORCH).add(Blocks.OAK_FENCE).add(Blocks.SPRUCE_FENCE).add(Blocks.DARK_OAK_FENCE).add(Blocks.ACACIA_FENCE).add(Blocks.BIRCH_FENCE).add(Blocks.JUNGLE_FENCE).add(Blocks.LADDER).add(Blocks.IRON_BARS).build();
 
     protected StructurePiece(StructurePieceType structurePieceType, int i, BoundingBox boundingBox) {
         this.type = structurePieceType;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSet.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSet.java
index 97fcf6a3fe44f141fd1f1d05e0425f21e7fd16ff..863c61a84bb9836ee0e2eef5bbfc65f7aba2c74f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSet.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSet.java
@@ -9,9 +9,7 @@ import net.minecraft.resources.RegistryFileCodec;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.world.level.levelgen.structure.placement.StructurePlacement;
 
-public record StructureSet(List<StructureSet.StructureSelectionEntry> c, StructurePlacement d) {
-    private final List<StructureSet.StructureSelectionEntry> structures;
-    private final StructurePlacement placement;
+public record StructureSet(List<StructureSet.StructureSelectionEntry> structures, StructurePlacement placement) {
     public static final Codec<StructureSet> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(StructureSet.StructureSelectionEntry.CODEC.listOf().fieldOf("structures").forGetter(StructureSet::structures), StructurePlacement.CODEC.fieldOf("placement").forGetter(StructureSet::placement)).apply(instance, StructureSet::new));
     public static final Codec<Holder<StructureSet>> CODEC = RegistryFileCodec.create(Registries.STRUCTURE_SET, DIRECT_CODEC);
 
@@ -27,25 +25,7 @@ public record StructureSet(List<StructureSet.StructureSelectionEntry> c, Structu
         return new StructureSet.StructureSelectionEntry(holder, 1);
     }
 
-    public List<StructureSet.StructureSelectionEntry> structures() {
-        return this.structures;
-    }
-
-    public StructurePlacement placement() {
-        return this.placement;
-    }
-
-    public static record StructureSelectionEntry(Holder<Structure> b, int c) {
-        private final Holder<Structure> structure;
-        private final int weight;
+    public static record StructureSelectionEntry(Holder<Structure> structure, int weight) {
         public static final Codec<StructureSet.StructureSelectionEntry> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Structure.CODEC.fieldOf("structure").forGetter(StructureSet.StructureSelectionEntry::structure), ExtraCodecs.POSITIVE_INT.fieldOf("weight").forGetter(StructureSet.StructureSelectionEntry::weight)).apply(instance, StructureSet.StructureSelectionEntry::new));
-
-        public Holder<Structure> structure() {
-            return this.structure;
-        }
-
-        public int weight() {
-            return this.weight;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSpawnOverride.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSpawnOverride.java
index 984d53c2dc333f2d434e74081407b6f89f93fdca..3fa7b5d6e0dc835b355ea84fdbe68c0eaef6f862 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSpawnOverride.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureSpawnOverride.java
@@ -6,19 +6,9 @@ import net.minecraft.util.StringRepresentable;
 import net.minecraft.util.random.WeightedRandomList;
 import net.minecraft.world.level.biome.MobSpawnSettings;
 
-public record StructureSpawnOverride(StructureSpawnOverride.BoundingBoxType b, WeightedRandomList<MobSpawnSettings.SpawnerData> c) {
-    private final StructureSpawnOverride.BoundingBoxType boundingBox;
-    private final WeightedRandomList<MobSpawnSettings.SpawnerData> spawns;
+public record StructureSpawnOverride(StructureSpawnOverride.BoundingBoxType boundingBox, WeightedRandomList<MobSpawnSettings.SpawnerData> spawns) {
     public static final Codec<StructureSpawnOverride> CODEC = RecordCodecBuilder.create((instance) -> instance.group(StructureSpawnOverride.BoundingBoxType.CODEC.fieldOf("bounding_box").forGetter(StructureSpawnOverride::boundingBox), WeightedRandomList.codec(MobSpawnSettings.SpawnerData.CODEC).fieldOf("spawns").forGetter(StructureSpawnOverride::spawns)).apply(instance, StructureSpawnOverride::new));
 
-    public StructureSpawnOverride.BoundingBoxType boundingBox() {
-        return this.boundingBox;
-    }
-
-    public WeightedRandomList<MobSpawnSettings.SpawnerData> spawns() {
-        return this.spawns;
-    }
-
     public static enum BoundingBoxType implements StringRepresentable {
         PIECE("piece"),
         STRUCTURE("full");
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java
index 0e25365104acf2eea0d98508c76c5ec8dc1d6308..f9e151334daf1d810f66f1e06200fe27f7bf6219 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java
@@ -105,7 +105,7 @@ public final class StructureStart {
             compoundTag.put("Children", this.pieceContainer.save(structurePieceSerializationContext));
             return compoundTag;
         } else {
-            compoundTag.putString("id", "INVALID");
+            compoundTag.putString("id", INVALID_START_ID);
             return compoundTag;
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGenerator.java
index 2338abf3407bd955b107ba1e0c37488775c36db9..b4c1ba069eb53326da18d8181941d1cc9524b8ac 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGenerator.java
@@ -11,41 +11,6 @@ import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemp
 public interface PieceGenerator<C extends FeatureConfiguration> {
     void generatePieces(StructurePiecesBuilder var1, PieceGenerator.Context<C> var2);
 
-    public static record Context<C extends FeatureConfiguration>(C a, ChunkGenerator b, StructureTemplateManager c, ChunkPos d, LevelHeightAccessor e, WorldgenRandom f, long g) {
-        private final C config;
-        private final ChunkGenerator chunkGenerator;
-        private final StructureTemplateManager structureTemplateManager;
-        private final ChunkPos chunkPos;
-        private final LevelHeightAccessor heightAccessor;
-        private final WorldgenRandom random;
-        private final long seed;
-
-        public C config() {
-            return this.config;
-        }
-
-        public ChunkGenerator chunkGenerator() {
-            return this.chunkGenerator;
-        }
-
-        public StructureTemplateManager structureTemplateManager() {
-            return this.structureTemplateManager;
-        }
-
-        public ChunkPos chunkPos() {
-            return this.chunkPos;
-        }
-
-        public LevelHeightAccessor heightAccessor() {
-            return this.heightAccessor;
-        }
-
-        public WorldgenRandom random() {
-            return this.random;
-        }
-
-        public long seed() {
-            return this.seed;
-        }
+    public static record Context<C extends FeatureConfiguration>(C config, ChunkGenerator chunkGenerator, StructureTemplateManager structureTemplateManager, ChunkPos chunkPos, LevelHeightAccessor heightAccessor, WorldgenRandom random, long seed) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGeneratorSupplier.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGeneratorSupplier.java
index c04cd9eff59e6ddde6bf08e7bea904b4bcc3f421..af6ad827df694503f4faf88cba7dc38b066a8203 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGeneratorSupplier.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PieceGeneratorSupplier.java
@@ -28,18 +28,17 @@ public interface PieceGeneratorSupplier<C extends FeatureConfiguration> {
         return (context) -> context.validBiomeOnTop(types);
     }
 
-    public static record Context<C extends FeatureConfiguration>(ChunkGenerator a, BiomeSource b, RandomState c, long d, ChunkPos e, C f, LevelHeightAccessor g, Predicate<Holder<Biome>> h, StructureTemplateManager i, RegistryAccess j) {
-        private final ChunkGenerator chunkGenerator;
-        private final BiomeSource biomeSource;
-        private final RandomState randomState;
-        private final long seed;
-        private final ChunkPos chunkPos;
-        private final C config;
-        private final LevelHeightAccessor heightAccessor;
-        private final Predicate<Holder<Biome>> validBiome;
-        private final StructureTemplateManager structureTemplateManager;
-        private final RegistryAccess registryAccess;
-
+    public static record Context<C extends FeatureConfiguration>(
+            ChunkGenerator chunkGenerator,
+            BiomeSource biomeSource,
+            RandomState randomState,
+            long seed,
+            ChunkPos chunkPos,
+            C config,
+            LevelHeightAccessor heightAccessor,
+            Predicate<Holder<Biome>> validBiome,
+            StructureTemplateManager structureTemplateManager,
+            RegistryAccess registryAccess) {
         public boolean validBiomeOnTop(Heightmap.Types types) {
             int i = this.chunkPos.getMiddleBlockX();
             int i2 = this.chunkPos.getMiddleBlockZ();
@@ -47,45 +46,5 @@ public interface PieceGeneratorSupplier<C extends FeatureConfiguration> {
             Holder<Biome> holder = this.chunkGenerator.getBiomeSource().getNoiseBiome(QuartPos.fromBlock(i), QuartPos.fromBlock(i3), QuartPos.fromBlock(i2), this.randomState.sampler());
             return this.validBiome.test(holder);
         }
-
-        public ChunkGenerator chunkGenerator() {
-            return this.chunkGenerator;
-        }
-
-        public BiomeSource biomeSource() {
-            return this.biomeSource;
-        }
-
-        public RandomState randomState() {
-            return this.randomState;
-        }
-
-        public long seed() {
-            return this.seed;
-        }
-
-        public ChunkPos chunkPos() {
-            return this.chunkPos;
-        }
-
-        public C config() {
-            return this.config;
-        }
-
-        public LevelHeightAccessor heightAccessor() {
-            return this.heightAccessor;
-        }
-
-        public Predicate<Holder<Biome>> validBiome() {
-            return this.validBiome;
-        }
-
-        public StructureTemplateManager structureTemplateManager() {
-            return this.structureTemplateManager;
-        }
-
-        public RegistryAccess registryAccess() {
-            return this.registryAccess;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java
index bc04323ee6b5e454b3762c20630441444d878418..5c8fa1d9fa8bc13fbec89a03f03e14159c7cf77b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer.java
@@ -16,14 +16,13 @@ import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.levelgen.structure.StructurePiece;
 import org.slf4j.Logger;
 
-public record PiecesContainer(List<StructurePiece> a) {
-    private final List<StructurePiece> pieces;
+public record PiecesContainer(List<StructurePiece> pieces) {
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final ResourceLocation JIGSAW_RENAME = new ResourceLocation("jigsaw");
-    private static final Map<ResourceLocation, ResourceLocation> RENAMES = ImmutableMap.builder().put(new ResourceLocation("nvi"), JIGSAW_RENAME).put(new ResourceLocation("pcp"), JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), JIGSAW_RENAME).put(new ResourceLocation("runtime"), JIGSAW_RENAME).build();
+    private static final Map<ResourceLocation, ResourceLocation> RENAMES = ImmutableMap.<ResourceLocation, ResourceLocation>builder().put(new ResourceLocation("nvi"), JIGSAW_RENAME).put(new ResourceLocation("pcp"), JIGSAW_RENAME).put(new ResourceLocation("bastionremnant"), JIGSAW_RENAME).put(new ResourceLocation("runtime"), JIGSAW_RENAME).build();
 
-    public PiecesContainer(List<StructurePiece> list) {
-        this.pieces = List.copyOf(list);
+    public PiecesContainer(List<StructurePiece> pieces) {
+        this.pieces = List.copyOf(pieces);
     }
 
     public boolean isEmpty() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext.java
index 263464676629587e4144cd11ce44419413ac1532..d4fdfe8353c47165dcba631a13885133f6543ab8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext.java
@@ -6,25 +6,9 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 
-public record StructurePieceSerializationContext(ResourceManager a, RegistryAccess b, StructureTemplateManager c) {
-    private final ResourceManager resourceManager;
-    private final RegistryAccess registryAccess;
-    private final StructureTemplateManager structureTemplateManager;
-
+public record StructurePieceSerializationContext(ResourceManager resourceManager, RegistryAccess registryAccess, StructureTemplateManager structureTemplateManager) {
     public static StructurePieceSerializationContext fromLevel(ServerLevel serverLevel) {
         MinecraftServer minecraftServer = serverLevel.getServer();
         return new StructurePieceSerializationContext(minecraftServer.getResourceManager(), minecraftServer.registryAccess(), minecraftServer.getStructureManager());
     }
-
-    public ResourceManager resourceManager() {
-        return this.resourceManager;
-    }
-
-    public RegistryAccess registryAccess() {
-        return this.registryAccess;
-    }
-
-    public StructureTemplateManager structureTemplateManager() {
-        return this.structureTemplateManager;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java
index defba62c4a084ca1bb52b80f0f0cc00f25e236e3..e64d7ce0b4167c525a892d44236cd80056cd460e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement.java
@@ -12,7 +12,7 @@ import net.minecraft.world.level.levelgen.LegacyRandomSource;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 
 public class RandomSpreadStructurePlacement extends StructurePlacement {
-    public static final Codec<RandomSpreadStructurePlacement> CODEC = ExtraCodecs.validate(RecordCodecBuilder.mapCodec((instance) -> placementCodec(instance).and(instance.group(Codec.intRange(0, 4096).fieldOf("spacing").forGetter(RandomSpreadStructurePlacement::spacing), Codec.intRange(0, 4096).fieldOf("separation").forGetter(RandomSpreadStructurePlacement::separation), RandomSpreadType.CODEC.optionalFieldOf("spread_type", RandomSpreadType.LINEAR).forGetter(RandomSpreadStructurePlacement::spreadType))).apply(instance, RandomSpreadStructurePlacement::new)), RandomSpreadStructurePlacement::validate).codec();
+    public static final Codec<RandomSpreadStructurePlacement> CODEC = ExtraCodecs.validate(RecordCodecBuilder.<RandomSpreadStructurePlacement>mapCodec((instance) -> placementCodec(instance).and(instance.group(Codec.intRange(0, 4096).fieldOf("spacing").forGetter(RandomSpreadStructurePlacement::spacing), Codec.intRange(0, 4096).fieldOf("separation").forGetter(RandomSpreadStructurePlacement::separation), RandomSpreadType.CODEC.optionalFieldOf("spread_type", RandomSpreadType.LINEAR).forGetter(RandomSpreadStructurePlacement::spreadType))).apply(instance, RandomSpreadStructurePlacement::new)), RandomSpreadStructurePlacement::validate).codec();
     private final int spacing;
     private final int separation;
     private final RandomSpreadType spreadType;
@@ -63,4 +63,4 @@ public class RandomSpreadStructurePlacement extends StructurePlacement {
     public StructurePlacementType<?> type() {
         return StructurePlacementType.RANDOM_SPREAD;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
index 0d246f09289bbf5a94bf6433c866227714f56eea..f4e7999f6d7662cc3b8d0dc73380a30d221ac00c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
@@ -108,22 +108,12 @@ public abstract class StructurePlacement {
 
     /** @deprecated */
     @Deprecated
-    public static record ExclusionZone(Holder<StructureSet> b, int c) {
-        private final Holder<StructureSet> otherSet;
-        private final int chunkCount;
+    public static record ExclusionZone(Holder<StructureSet> otherSet, int chunkCount) {
         public static final Codec<StructurePlacement.ExclusionZone> CODEC = RecordCodecBuilder.create((instance) -> instance.group(RegistryFileCodec.create(Registries.STRUCTURE_SET, StructureSet.DIRECT_CODEC, false).fieldOf("other_set").forGetter(StructurePlacement.ExclusionZone::otherSet), Codec.intRange(1, 16).fieldOf("chunk_count").forGetter(StructurePlacement.ExclusionZone::chunkCount)).apply(instance, StructurePlacement.ExclusionZone::new));
 
         boolean isPlacementForbidden(ChunkGeneratorStructureState chunkGeneratorStructureState, int i, int i2) {
             return chunkGeneratorStructureState.hasStructureChunkInRange(this.otherSet, i, i2, this.chunkCount);
         }
-
-        public Holder<StructureSet> otherSet() {
-            return this.otherSet;
-        }
-
-        public int chunkCount() {
-            return this.chunkCount;
-        }
     }
 
     @FunctionalInterface
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pools/JigsawPlacement.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pools/JigsawPlacement.java
index d6f6272a31030b4efaa91a960759d2f82388b67b..16ceb72599b22521d0202a05feca2869cac2fc86 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pools/JigsawPlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pools/JigsawPlacement.java
@@ -242,12 +242,12 @@ public class JigsawPlacement {
                                             if (!boundingBox2.isInside(structureBlockInfox.pos().relative(JigsawBlock.getFrontFacing(structureBlockInfox.state())))) {
                                                 return 0;
                                             } else {
-                                                ResourceKey<StructureTemplatePool> resourceKey = readPoolName(structureBlockInfox);
-                                                Optional<? extends Holder<StructureTemplatePool>> optional = this.pools.getHolder(resourceKey);
-                                                Optional<Holder<StructureTemplatePool>> optional2 = optional.map((holder) -> ((StructureTemplatePool)holder.value()).getFallback());
-                                                int i = optional.map((holder) -> ((StructureTemplatePool)holder.value()).getMaxSize(this.structureTemplateManager)).orElse(0);
-                                                int i2 = optional2.map((holder) -> ((StructureTemplatePool)holder.value()).getMaxSize(this.structureTemplateManager)).orElse(0);
-                                                return Math.max(i, i2);
+                                                ResourceKey<StructureTemplatePool> resourceKeyIn = readPoolName(structureBlockInfox);
+                                                Optional<? extends Holder<StructureTemplatePool>> optionalIn = this.pools.getHolder(resourceKeyIn);
+                                                Optional<Holder<StructureTemplatePool>> optional2 = optionalIn.map((holderIn) -> ((StructureTemplatePool)holderIn.value()).getFallback());
+                                                int iIn = optionalIn.map((holderIn) -> ((StructureTemplatePool)holderIn.value()).getMaxSize(this.structureTemplateManager)).orElse(0);
+                                                int i2In = optional2.map((holderIn) -> ((StructureTemplatePool)holderIn.value()).getMaxSize(this.structureTemplateManager)).orElse(0);
+                                                return Math.max(iIn, i2In);
                                             }
                                         }).max().orElse(0);
                                     } else {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/JigsawStructure.java b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/JigsawStructure.java
index cbfa02c596ca2ea59ed7921f77f13e4598451dd3..8d3e89e92dea28031cae5ea66488dac09125ff69 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/JigsawStructure.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/JigsawStructure.java
@@ -19,7 +19,7 @@ import net.minecraft.world.level.levelgen.structure.pools.StructureTemplatePool;
 
 public final class JigsawStructure extends Structure {
     public static final int MAX_TOTAL_STRUCTURE_RANGE = 128;
-    public static final Codec<JigsawStructure> CODEC = ExtraCodecs.validate(RecordCodecBuilder.mapCodec((instance) -> instance.group(settingsCodec(instance), StructureTemplatePool.CODEC.fieldOf("start_pool").forGetter((jigsawStructure) -> jigsawStructure.startPool), ResourceLocation.CODEC.optionalFieldOf("start_jigsaw_name").forGetter((jigsawStructure) -> jigsawStructure.startJigsawName), Codec.intRange(0, 7).fieldOf("size").forGetter((jigsawStructure) -> jigsawStructure.maxDepth), HeightProvider.CODEC.fieldOf("start_height").forGetter((jigsawStructure) -> jigsawStructure.startHeight), Codec.BOOL.fieldOf("use_expansion_hack").forGetter((jigsawStructure) -> jigsawStructure.useExpansionHack), Heightmap.Types.CODEC.optionalFieldOf("project_start_to_heightmap").forGetter((jigsawStructure) -> jigsawStructure.projectStartToHeightmap), Codec.intRange(1, 128).fieldOf("max_distance_from_center").forGetter((jigsawStructure) -> jigsawStructure.maxDistanceFromCenter)).apply(instance, JigsawStructure::new)), JigsawStructure::verifyRange).codec();
+    public static final Codec<JigsawStructure> CODEC = ExtraCodecs.validate(RecordCodecBuilder.<JigsawStructure>mapCodec((instance) -> instance.group(settingsCodec(instance), StructureTemplatePool.CODEC.fieldOf("start_pool").forGetter((jigsawStructure) -> jigsawStructure.startPool), ResourceLocation.CODEC.optionalFieldOf("start_jigsaw_name").forGetter((jigsawStructure) -> jigsawStructure.startJigsawName), Codec.intRange(0, 7).fieldOf("size").forGetter((jigsawStructure) -> jigsawStructure.maxDepth), HeightProvider.CODEC.fieldOf("start_height").forGetter((jigsawStructure) -> jigsawStructure.startHeight), Codec.BOOL.fieldOf("use_expansion_hack").forGetter((jigsawStructure) -> jigsawStructure.useExpansionHack), Heightmap.Types.CODEC.optionalFieldOf("project_start_to_heightmap").forGetter((jigsawStructure) -> jigsawStructure.projectStartToHeightmap), Codec.intRange(1, 128).fieldOf("max_distance_from_center").forGetter((jigsawStructure) -> jigsawStructure.maxDistanceFromCenter)).apply(instance, JigsawStructure::new)), JigsawStructure::verifyRange).codec();
     private final Holder<StructureTemplatePool> startPool;
     private final Optional<ResourceLocation> startJigsawName;
     private final int maxDepth;
@@ -76,4 +76,4 @@ public final class JigsawStructure extends Structure {
     public StructureType<?> type() {
         return StructureType.JIGSAW;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/OceanMonumentPieces.java b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/OceanMonumentPieces.java
index 99de914f198115989c5faff299844b8146e29bfb..710c0e67c6ddb19f972f77d9c3b04355f0710788 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/OceanMonumentPieces.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/OceanMonumentPieces.java
@@ -1320,7 +1320,7 @@ public class OceanMonumentPieces {
         protected static final BlockState LAMP_BLOCK = Blocks.SEA_LANTERN.defaultBlockState();
         protected static final boolean DO_FILL = true;
         protected static final BlockState FILL_BLOCK = Blocks.WATER.defaultBlockState();
-        protected static final Set<Block> FILL_KEEP = ImmutableSet.builder().add(Blocks.ICE).add(Blocks.PACKED_ICE).add(Blocks.BLUE_ICE).add(FILL_BLOCK.getBlock()).build();
+        protected static final Set<Block> FILL_KEEP = ImmutableSet.<Block>builder().add(Blocks.ICE).add(Blocks.PACKED_ICE).add(Blocks.BLUE_ICE).add(FILL_BLOCK.getBlock()).build();
         protected static final int GRIDROOM_WIDTH = 8;
         protected static final int GRIDROOM_DEPTH = 8;
         protected static final int GRIDROOM_HEIGHT = 4;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece.java
index 16f8fbe2679fc3af35dcfb7bebdc308ae8ad85d9..4e57e0ced68ae6b5dee07e6ed70ec7b078225ec9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece.java
@@ -65,7 +65,7 @@ public class RuinedPortalPiece extends TemplateStructurePiece {
     public RuinedPortalPiece(StructureTemplateManager structureTemplateManager, CompoundTag compoundTag) {
         super(StructurePieceType.RUINED_PORTAL, compoundTag, structureTemplateManager, (resourceLocation) -> makeSettings(structureTemplateManager, compoundTag, resourceLocation));
         this.verticalPlacement = RuinedPortalPiece.VerticalPlacement.byName(compoundTag.getString("VerticalPlacement"));
-        this.properties = (RuinedPortalPiece.Properties)RuinedPortalPiece.Properties.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.get("Properties"))).getOrThrow(true, LOGGER::error);
+        this.properties = (RuinedPortalPiece.Properties)RuinedPortalPiece.Properties.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.get("Properties"))).getOrThrow(true, LOGGER::error);
     }
 
     protected void addAdditionalSaveData(StructurePieceSerializationContext structurePieceSerializationContext, CompoundTag compoundTag) {
@@ -79,7 +79,7 @@ public class RuinedPortalPiece extends TemplateStructurePiece {
     private static StructurePlaceSettings makeSettings(StructureTemplateManager structureTemplateManager, CompoundTag compoundTag, ResourceLocation resourceLocation) {
         StructureTemplate structureTemplate = structureTemplateManager.getOrCreate(resourceLocation);
         BlockPos blockPos = new BlockPos(structureTemplate.getSize().getX() / 2, 0, structureTemplate.getSize().getZ() / 2);
-        return makeSettings(Mirror.valueOf(compoundTag.getString("Mirror")), Rotation.valueOf(compoundTag.getString("Rotation")), RuinedPortalPiece.VerticalPlacement.byName(compoundTag.getString("VerticalPlacement")), blockPos, (RuinedPortalPiece.Properties)RuinedPortalPiece.Properties.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundTag.get("Properties"))).getOrThrow(true, LOGGER::error));
+        return makeSettings(Mirror.valueOf(compoundTag.getString("Mirror")), Rotation.valueOf(compoundTag.getString("Rotation")), RuinedPortalPiece.VerticalPlacement.byName(compoundTag.getString("VerticalPlacement")), blockPos, (RuinedPortalPiece.Properties)RuinedPortalPiece.Properties.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundTag.get("Properties"))).getOrThrow(true, LOGGER::error));
     }
 
     private static StructurePlaceSettings makeSettings(Mirror mirror, Rotation rotation, RuinedPortalPiece.VerticalPlacement verticalPlacement, BlockPos blockPos, RuinedPortalPiece.Properties properties) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalStructure.java b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalStructure.java
index 2385e4dc5ce417a1285781b430af8a261d6c01b2..78c1d7d4a4598547e3dbc1321c0d638d1053e291 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalStructure.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/RuinedPortalStructure.java
@@ -178,47 +178,7 @@ public class RuinedPortalStructure extends Structure {
         return StructureType.RUINED_PORTAL;
     }
 
-    public static record Setup(RuinedPortalPiece.VerticalPlacement b, float c, float d, boolean e, boolean f, boolean g, boolean h, float i) {
-        private final RuinedPortalPiece.VerticalPlacement placement;
-        private final float airPocketProbability;
-        private final float mossiness;
-        private final boolean overgrown;
-        private final boolean vines;
-        private final boolean canBeCold;
-        private final boolean replaceWithBlackstone;
-        private final float weight;
+    public static record Setup(RuinedPortalPiece.VerticalPlacement placement, float airPocketProbability, float mossiness, boolean overgrown, boolean vines, boolean canBeCold, boolean replaceWithBlackstone, float weight) {
         public static final Codec<RuinedPortalStructure.Setup> CODEC = RecordCodecBuilder.create((instance) -> instance.group(RuinedPortalPiece.VerticalPlacement.CODEC.fieldOf("placement").forGetter(RuinedPortalStructure.Setup::placement), Codec.floatRange(0.0F, 1.0F).fieldOf("air_pocket_probability").forGetter(RuinedPortalStructure.Setup::airPocketProbability), Codec.floatRange(0.0F, 1.0F).fieldOf("mossiness").forGetter(RuinedPortalStructure.Setup::mossiness), Codec.BOOL.fieldOf("overgrown").forGetter(RuinedPortalStructure.Setup::overgrown), Codec.BOOL.fieldOf("vines").forGetter(RuinedPortalStructure.Setup::vines), Codec.BOOL.fieldOf("can_be_cold").forGetter(RuinedPortalStructure.Setup::canBeCold), Codec.BOOL.fieldOf("replace_with_blackstone").forGetter(RuinedPortalStructure.Setup::replaceWithBlackstone), ExtraCodecs.POSITIVE_FLOAT.fieldOf("weight").forGetter(RuinedPortalStructure.Setup::weight)).apply(instance, RuinedPortalStructure.Setup::new));
-
-        public RuinedPortalPiece.VerticalPlacement placement() {
-            return this.placement;
-        }
-
-        public float airPocketProbability() {
-            return this.airPocketProbability;
-        }
-
-        public float mossiness() {
-            return this.mossiness;
-        }
-
-        public boolean overgrown() {
-            return this.overgrown;
-        }
-
-        public boolean vines() {
-            return this.vines;
-        }
-
-        public boolean canBeCold() {
-            return this.canBeCold;
-        }
-
-        public boolean replaceWithBlackstone() {
-            return this.replaceWithBlackstone;
-        }
-
-        public float weight() {
-            return this.weight;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
index a7486d19c739f58dc8988132680ae2c86153ae31..d6021ae651699554e07d61d827d23229afc45335 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -131,7 +131,7 @@ public class StructureTemplate {
     }
 
     private static List<StructureTemplate.StructureBlockInfo> buildInfoList(List<StructureTemplate.StructureBlockInfo> list, List<StructureTemplate.StructureBlockInfo> list2, List<StructureTemplate.StructureBlockInfo> list3) {
-        Comparator<StructureTemplate.StructureBlockInfo> comparator = Comparator.comparingInt((structureBlockInfo) -> structureBlockInfo.pos.getY()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getX()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getZ());
+        Comparator<StructureTemplate.StructureBlockInfo> comparator = Comparator.<StructureBlockInfo>comparingInt((structureBlockInfo) -> structureBlockInfo.pos.getY()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getX()).thenComparingInt((structureBlockInfo) -> structureBlockInfo.pos.getZ());
         list.sort(comparator);
         list3.sort(comparator);
         list2.sort(comparator);
@@ -732,28 +732,10 @@ public class StructureTemplate {
         }
     }
 
-    public static record StructureBlockInfo(BlockPos a, BlockState b, @Nullable CompoundTag c) {
-        final BlockPos pos;
-        final BlockState state;
-        @Nullable
-        final CompoundTag nbt;
-
+    public static record StructureBlockInfo(BlockPos pos, BlockState state, @Nullable CompoundTag nbt) {
         public String toString() {
             return String.format(Locale.ROOT, "<StructureBlockInfo | %s | %s | %s>", this.pos, this.state, this.nbt);
         }
-
-        public BlockPos pos() {
-            return this.pos;
-        }
-
-        public BlockState state() {
-            return this.state;
-        }
-
-        @Nullable
-        public CompoundTag nbt() {
-            return this.nbt;
-        }
     }
 
     public static class StructureEntityInfo {
@@ -767,4 +749,4 @@ public class StructureTemplate {
             this.nbt = compoundTag;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager.java
index 6d6ec819c2a2c65326cf8c98bf5068b31a5a6ddd..8c89e9c10e4fa194d0441913b6beff1bc8d56eab 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager.java
@@ -344,16 +344,6 @@ public class StructureTemplateManager {
         InputStream open() throws IOException;
     }
 
-    static record Source(Function<ResourceLocation, Optional<StructureTemplate>> a, Supplier<Stream<ResourceLocation>> b) {
-        private final Function<ResourceLocation, Optional<StructureTemplate>> loader;
-        private final Supplier<Stream<ResourceLocation>> lister;
-
-        public Function<ResourceLocation, Optional<StructureTemplate>> loader() {
-            return this.loader;
-        }
-
-        public Supplier<Stream<ResourceLocation>> lister() {
-            return this.lister;
-        }
+    static record Source(Function<ResourceLocation, Optional<StructureTemplate>> loader, Supplier<Stream<ResourceLocation>> lister) {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/levelgen/synth/NormalNoise.java b/src/main/java/net/minecraft/world/level/levelgen/synth/NormalNoise.java
index f5ee1f9a35d2418377f955fd9c1bdb60e558f006..83376cc51fb7011ef756e75682a94673a7797f59 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/synth/NormalNoise.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/synth/NormalNoise.java
@@ -94,9 +94,7 @@ public class NormalNoise {
         stringBuilder.append("}");
     }
 
-    public static record NoiseParameters(int c, DoubleList d) {
-        final int firstOctave;
-        final DoubleList amplitudes;
+    public static record NoiseParameters(int firstOctave, DoubleList amplitudes) {
         public static final Codec<NormalNoise.NoiseParameters> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("firstOctave").forGetter(NormalNoise.NoiseParameters::firstOctave), Codec.DOUBLE.listOf().fieldOf("amplitudes").forGetter(NormalNoise.NoiseParameters::amplitudes)).apply(instance, NormalNoise.NoiseParameters::new));
         public static final Codec<Holder<NormalNoise.NoiseParameters>> CODEC = RegistryFileCodec.create(Registries.NOISE, DIRECT_CODEC);
 
@@ -107,13 +105,5 @@ public class NormalNoise {
         public NoiseParameters(int i, double d, double... doubles) {
             this(i, Util.make(new DoubleArrayList(doubles), (doubleArrayList) -> doubleArrayList.add(0, d)));
         }
-
-        public int firstOctave() {
-            return this.firstOctave;
-        }
-
-        public DoubleList amplitudes() {
-            return this.amplitudes;
-        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
index b131148afd4825fbc95da54aa53b2ed673017812..ed5a02d3a577a7895028682e1eabb4cbec934e41 100644
--- a/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
+++ b/src/main/java/net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint.java
@@ -45,13 +45,13 @@ public abstract class DynamicGraphMinFixedPoint {
 
     public void removeIf(LongPredicate longPredicate) {
         LongList longList = new LongArrayList();
-        this.computedLevels.keySet().forEach((l) -> {
+        this.computedLevels.keySet().forEach((java.util.function.LongConsumer) (l) -> {
             if (longPredicate.test(l)) {
                 longList.add(l);
             }
 
         });
-        longList.forEach(this::removeFromQueue);
+        longList.forEach((java.util.function.LongConsumer) this::removeFromQueue);
     }
 
     private int calculatePriority(int i, int i2) {
diff --git a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
index bce964e358698354f3be2f988713baa0c8cf0c92..c79683d30c14e6a2b182fd041981c72eb2508e67 100644
--- a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
@@ -149,10 +149,10 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
             }
 
             this.toRemove.clear();
-            ObjectIterator<Entry<DataLayer>> objectIterator = Long2ObjectMaps.fastIterator(this.queuedSections);
+            ObjectIterator<Entry<DataLayer>> objectIteratorIn = Long2ObjectMaps.fastIterator(this.queuedSections);
 
-            while(objectIterator.hasNext()) {
-                Entry<DataLayer> entry = (Entry)objectIterator.next();
+            while(objectIteratorIn.hasNext()) {
+                Entry<DataLayer> entry = objectIteratorIn.next();
                 long l3 = entry.getLongKey();
                 if (this.storingLightForSection(l3)) {
                     DataLayer dataLayer3 = (DataLayer)entry.getValue();
@@ -161,7 +161,7 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
                         this.changedSections.add(l3);
                     }
 
-                    objectIterator.remove();
+                    objectIteratorIn.remove();
                 }
             }
 
@@ -333,4 +333,4 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
             return this.display;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index 974ef4bf999d554e9ffb6dde68de7327e25bb902..a6f4b6b7adbc985d74f518a1b6653677a737a805 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -264,16 +264,16 @@ public abstract class FlowingFluid extends Fluid {
                 BlockPos blockPos3 = blockPos.relative(direction2);
                 short s = getCacheKey(blockPos2, blockPos3);
                 Pair<BlockState, FluidState> pair = short2ObjectMap.computeIfAbsent(s, (sx) -> {
-                    BlockState blockState = levelReader.getBlockState(blockPos3);
-                    return Pair.of(blockState, blockState.getFluidState());
+                    BlockState blockStateIn = levelReader.getBlockState(blockPos3);
+                    return Pair.of(blockStateIn, blockStateIn.getFluidState());
                 });
                 BlockState blockState2 = (BlockState)pair.getFirst();
                 FluidState fluidState = (FluidState)pair.getSecond();
                 if (this.canPassThrough(levelReader, this.getFlowing(), blockPos, blockState, direction2, blockPos3, blockState2, fluidState)) {
                     boolean flag = short2BooleanMap.computeIfAbsent(s, (sx) -> {
-                        BlockPos blockPos2 = blockPos3.below();
-                        BlockState blockState2 = levelReader.getBlockState(blockPos2);
-                        return this.isWaterHole(levelReader, this.getFlowing(), blockPos3, blockState2, blockPos2, blockState2);
+                        BlockPos blockPos2In = blockPos3.below();
+                        BlockState blockState2In = levelReader.getBlockState(blockPos2In);
+                        return this.isWaterHole(levelReader, this.getFlowing(), blockPos3, blockState2, blockPos2In, blockState2In);
                     });
                     if (flag) {
                         return i;
@@ -334,8 +334,8 @@ public abstract class FlowingFluid extends Fluid {
             BlockPos blockPos2 = blockPos.relative(direction);
             short s = getCacheKey(blockPos, blockPos2);
             Pair<BlockState, FluidState> pair = short2ObjectMap.computeIfAbsent(s, (sx) -> {
-                BlockState blockState = level.getBlockState(blockPos2);
-                return Pair.of(blockState, blockState.getFluidState());
+                BlockState blockStateIn = level.getBlockState(blockPos2);
+                return Pair.of(blockStateIn, blockStateIn.getFluidState());
             });
             BlockState blockState2 = (BlockState)pair.getFirst();
             FluidState fluidState = (FluidState)pair.getSecond();
@@ -343,8 +343,8 @@ public abstract class FlowingFluid extends Fluid {
             if (this.canPassThrough(level, fluidState2.getType(), blockPos, blockState, direction, blockPos2, blockState2, fluidState)) {
                 BlockPos blockPos3 = blockPos2.below();
                 boolean flag = short2BooleanMap.computeIfAbsent(s, (sx) -> {
-                    BlockState blockState2 = level.getBlockState(blockPos3);
-                    return this.isWaterHole(level, this.getFlowing(), blockPos2, blockState2, blockPos3, blockState2);
+                    BlockState blockState2In = level.getBlockState(blockPos3);
+                    return this.isWaterHole(level, this.getFlowing(), blockPos2, blockState2, blockPos3, blockState2In);
                 });
                 int i2;
                 if (flag) {
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/Path.java b/src/main/java/net/minecraft/world/level/pathfinder/Path.java
index 8bae73a7ec5f1ce273109d750ceff51fcbae367d..8620a2c89b1f3ee0f1763f66a356d5069269ed24 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/Path.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/Path.java
@@ -191,11 +191,7 @@ public class Path {
         return path;
     }
 
-    public static record DebugData(Node[] a, Node[] b, Set<Target> c) {
-        private final Node[] openSet;
-        private final Node[] closedSet;
-        final Set<Target> targetNodes;
-
+    public static record DebugData(Node[] openSet, Node[] closedSet, Set<Target> targetNodes) {
         public void write(FriendlyByteBuf friendlyByteBuf) {
             friendlyByteBuf.writeCollection(this.targetNodes, (friendlyByteBufx, target) -> target.writeToStream(friendlyByteBufx));
             Path.writeNodeArray(friendlyByteBuf, this.openSet);
@@ -221,4 +217,4 @@ public class Path {
             return this.targetNodes;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
index f430d4cce9c422f93b34e26e26cb449302ce25d0..da63c42e23b3e1f74bc506402b990bf31991ae43 100644
--- a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
+++ b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
@@ -43,12 +43,12 @@ public class PortalForcer {
         PoiManager poiManager = this.level.getPoiManager();
         int i = flag ? 16 : 128;
         poiManager.ensureLoadedAndValid(this.level, blockPos, i);
-        Optional<PoiRecord> optional = poiManager.getInSquare((holder) -> holder.is(PoiTypes.NETHER_PORTAL), blockPos, i, PoiManager.Occupancy.ANY).filter((poiRecord) -> worldBorder.isWithinBounds(poiRecord.getPos())).sorted(Comparator.comparingDouble((poiRecord) -> poiRecord.getPos().distSqr(blockPos)).thenComparingInt((poiRecord) -> poiRecord.getPos().getY())).filter((poiRecord) -> this.level.getBlockState(poiRecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS)).findFirst();
+        Optional<PoiRecord> optional = poiManager.getInSquare((holder) -> holder.is(PoiTypes.NETHER_PORTAL), blockPos, i, PoiManager.Occupancy.ANY).filter((poiRecord) -> worldBorder.isWithinBounds(poiRecord.getPos())).sorted(Comparator.<PoiRecord>comparingDouble((poiRecord) -> poiRecord.getPos().distSqr(blockPos)).thenComparingInt((poiRecord) -> poiRecord.getPos().getY())).filter((poiRecord) -> this.level.getBlockState(poiRecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS)).findFirst();
         return optional.map((poiRecord) -> {
-            BlockPos blockPos = poiRecord.getPos();
-            this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(blockPos), 3, blockPos);
-            BlockState blockState = this.level.getBlockState(blockPos);
-            return BlockUtil.getLargestRectangleAround(blockPos, blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockPosx) -> this.level.getBlockState(blockPosx) == blockState);
+            BlockPos pos = poiRecord.getPos();
+            this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(pos), 3, pos);
+            BlockState blockState = this.level.getBlockState(pos);
+            return BlockUtil.getLargestRectangleAround(pos, blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockPosx) -> this.level.getBlockState(blockPosx) == blockState);
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java b/src/main/java/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
index d7d8c4dfb0d976e9718b63ce33fd2696ae338d94..ebf532eb59284f335dd45fc30fd54c7a31cc47bc 100644
--- a/src/main/java/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
+++ b/src/main/java/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
@@ -86,37 +86,11 @@ public class CollectingNeighborUpdater implements NeighborUpdater {
 
     }
 
-    static record FullNeighborUpdate(BlockState a, BlockPos b, Block c, BlockPos d, boolean e) implements CollectingNeighborUpdater.NeighborUpdates {
-        private final BlockState state;
-        private final BlockPos pos;
-        private final Block block;
-        private final BlockPos neighborPos;
-        private final boolean movedByPiston;
-
+    static record FullNeighborUpdate(BlockState state, BlockPos pos, Block block, BlockPos neighborPos, boolean movedByPiston) implements CollectingNeighborUpdater.NeighborUpdates {
         public boolean runNext(Level level) {
             NeighborUpdater.executeUpdate(level, this.state, this.pos, this.block, this.neighborPos, this.movedByPiston);
             return false;
         }
-
-        public BlockState state() {
-            return this.state;
-        }
-
-        public BlockPos pos() {
-            return this.pos;
-        }
-
-        public Block block() {
-            return this.block;
-        }
-
-        public BlockPos neighborPos() {
-            return this.neighborPos;
-        }
-
-        public boolean movedByPiston() {
-            return this.movedByPiston;
-        }
     }
 
     static final class MultiNeighborUpdate implements CollectingNeighborUpdater.NeighborUpdates {
@@ -152,65 +126,24 @@ public class CollectingNeighborUpdater implements NeighborUpdater {
         boolean runNext(Level var1);
     }
 
-    static record ShapeUpdate(Direction a, BlockState b, BlockPos c, BlockPos d, int e, int f) implements CollectingNeighborUpdater.NeighborUpdates {
-        private final Direction direction;
-        private final BlockState state;
-        private final BlockPos pos;
-        private final BlockPos neighborPos;
-        private final int updateFlags;
-        private final int updateLimit;
-
+    static record ShapeUpdate(
+            Direction direction,
+            BlockState state,
+            BlockPos pos,
+            BlockPos neighborPos,
+            int updateFlags,
+            int updateLimit) implements CollectingNeighborUpdater.NeighborUpdates {
         public boolean runNext(Level level) {
             NeighborUpdater.executeShapeUpdate(level, this.direction, this.state, this.pos, this.neighborPos, this.updateFlags, this.updateLimit);
             return false;
         }
-
-        public Direction direction() {
-            return this.direction;
-        }
-
-        public BlockState state() {
-            return this.state;
-        }
-
-        public BlockPos pos() {
-            return this.pos;
-        }
-
-        public BlockPos neighborPos() {
-            return this.neighborPos;
-        }
-
-        public int updateFlags() {
-            return this.updateFlags;
-        }
-
-        public int updateLimit() {
-            return this.updateLimit;
-        }
     }
 
-    static record SimpleNeighborUpdate(BlockPos a, Block b, BlockPos c) implements CollectingNeighborUpdater.NeighborUpdates {
-        private final BlockPos pos;
-        private final Block block;
-        private final BlockPos neighborPos;
-
+    static record SimpleNeighborUpdate(BlockPos pos, Block block, BlockPos neighborPos) implements CollectingNeighborUpdater.NeighborUpdates {
         public boolean runNext(Level level) {
             BlockState blockState = level.getBlockState(this.pos);
             NeighborUpdater.executeUpdate(level, blockState, this.pos, this.block, this.neighborPos, false);
             return false;
         }
-
-        public BlockPos pos() {
-            return this.pos;
-        }
-
-        public Block block() {
-            return this.block;
-        }
-
-        public BlockPos neighborPos() {
-            return this.neighborPos;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/saveddata/SavedData.java b/src/main/java/net/minecraft/world/level/saveddata/SavedData.java
index e35fb9d4f66e699d4f9cd2347ca1e34f6fa18c57..572b194c611abb7003fe8580c74dc46aaccc061d 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/SavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/SavedData.java
@@ -45,21 +45,6 @@ public abstract class SavedData {
         }
     }
 
-    public static record Factory<T extends SavedData>(Supplier<T> a, Function<CompoundTag, T> b, DataFixTypes c) {
-        private final Supplier<T> constructor;
-        private final Function<CompoundTag, T> deserializer;
-        private final DataFixTypes type;
-
-        public Supplier<T> constructor() {
-            return this.constructor;
-        }
-
-        public Function<CompoundTag, T> deserializer() {
-            return this.deserializer;
-        }
-
-        public DataFixTypes type() {
-            return this.type;
-        }
+    public static record Factory<T extends SavedData>(Supplier<T> constructor, Function<CompoundTag, T> deserializer, DataFixTypes type) {
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapDecoration.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapDecoration.java
index 12e150048698ed8fda99dd12c31a9bac59f21ab0..6223f326dac90e1a23fa37cc70c8a6ef11491aa9 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapDecoration.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapDecoration.java
@@ -7,14 +7,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.util.StringRepresentable;
 import net.minecraft.world.level.material.MapColor;
 
-public record MapDecoration(MapDecoration.Type a, byte b, byte c, byte d, @Nullable Component e) {
-    private final MapDecoration.Type type;
-    private final byte x;
-    private final byte y;
-    private final byte rot;
-    @Nullable
-    private final Component name;
-
+public record MapDecoration(MapDecoration.Type type, byte x, byte y, byte rot, @Nullable Component name) {
     public byte getImage() {
         return this.type.getIcon();
     }
@@ -23,27 +16,6 @@ public record MapDecoration(MapDecoration.Type a, byte b, byte c, byte d, @Nulla
         return this.type.isRenderedOnFrame();
     }
 
-    public MapDecoration.Type type() {
-        return this.type;
-    }
-
-    public byte x() {
-        return this.x;
-    }
-
-    public byte y() {
-        return this.y;
-    }
-
-    public byte rot() {
-        return this.rot;
-    }
-
-    @Nullable
-    public Component name() {
-        return this.name;
-    }
-
     public static enum Type implements StringRepresentable {
         PLAYER("player", false, true),
         FRAME("frame", true, true),
@@ -133,4 +105,4 @@ public record MapDecoration(MapDecoration.Type a, byte b, byte c, byte d, @Nulla
             return this.name;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index dba585ac98dfe3f5f7d2364c029f23c3cf50a619..40c532bd0e876073488d736b14134158d6d6b936 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -157,8 +157,8 @@ public class LevelStorageSource {
             }
         }
 
-        Dynamic<T> dynamic3 = DataFixTypes.WORLD_GEN_SETTINGS.updateToCurrentVersion(dataFixer, dynamic2, i);
-        return WorldGenSettings.CODEC.parse(dynamic3);
+        Dynamic<T> dynamic3In = DataFixTypes.WORLD_GEN_SETTINGS.updateToCurrentVersion(dataFixer, dynamic2, i);
+        return WorldGenSettings.CODEC.parse(dynamic3In);
     }
 
     private static WorldDataConfiguration readDataConfig(Dynamic<?> dynamic) {
@@ -412,9 +412,7 @@ public class LevelStorageSource {
         return this.worldDirValidator;
     }
 
-    public static record LevelCandidates(List<LevelStorageSource.LevelDirectory> a) implements Iterable<LevelStorageSource.LevelDirectory> {
-        final List<LevelStorageSource.LevelDirectory> levels;
-
+    public static record LevelCandidates(List<LevelStorageSource.LevelDirectory> levels) implements Iterable<LevelStorageSource.LevelDirectory> {
         public boolean isEmpty() {
             return this.levels.isEmpty();
         }
@@ -422,15 +420,9 @@ public class LevelStorageSource {
         public Iterator<LevelStorageSource.LevelDirectory> iterator() {
             return this.levels.iterator();
         }
-
-        public List<LevelStorageSource.LevelDirectory> levels() {
-            return this.levels;
-        }
     }
 
-    public static record LevelDirectory(Path a) {
-        private final Path path;
-
+    public static record LevelDirectory(Path path) {
         public String directoryName() {
             return this.path.getFileName().toString();
         }
@@ -458,10 +450,6 @@ public class LevelStorageSource {
         public Path resourcePath(LevelResource levelResource) {
             return this.path.resolve(levelResource.getId());
         }
-
-        public Path path() {
-            return this.path;
-        }
     }
 
     public class LevelStorageAccess implements AutoCloseable {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java b/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java
index 6c0dd89861980f56fbda5b74d63a3c33875c58c6..6c20729fdc46ab0add171117b94827983a837d6a 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java
@@ -148,16 +148,6 @@ public class LootContext {
         }
     }
 
-    public static record VisitedEntry<T>(LootDataType<T> a, T b) {
-        private final LootDataType<T> type;
-        private final T value;
-
-        public LootDataType<T> type() {
-            return this.type;
-        }
-
-        public T value() {
-            return this.value;
-        }
+    public static record VisitedEntry<T>(LootDataType<T> type, T value) {
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootDataId.java b/src/main/java/net/minecraft/world/level/storage/loot/LootDataId.java
index 9149072433dd1d18efbdf2a6b2b624e595214116..b772e6f69ce75e844eaba6868b5f0e816c991172 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootDataId.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootDataId.java
@@ -2,15 +2,5 @@ package net.minecraft.world.level.storage.loot;
 
 import net.minecraft.resources.ResourceLocation;
 
-public record LootDataId<T>(LootDataType<T> a, ResourceLocation b) {
-    private final LootDataType<T> type;
-    private final ResourceLocation location;
-
-    public LootDataType<T> type() {
-        return this.type;
-    }
-
-    public ResourceLocation location() {
-        return this.location;
-    }
-}
\ No newline at end of file
+public record LootDataId<T>(LootDataType<T> type, ResourceLocation location) {
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootDataManager.java b/src/main/java/net/minecraft/world/level/storage/loot/LootDataManager.java
index 6ec99ce9a8e81e028f3d132a2bc18f6004e5ec88..2edfd65a2ba360b277ae25e8fb2cefb80df292b5 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootDataManager.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootDataManager.java
@@ -39,9 +39,9 @@ public class LootDataManager implements PreparableReloadListener, LootDataResolv
         Map<ResourceLocation, T> map2 = new HashMap();
         map.put(lootDataType, map2);
         return CompletableFuture.runAsync(() -> {
-            Map<ResourceLocation, JsonElement> map2 = new HashMap();
-            SimpleJsonResourceReloadListener.scanDirectory(resourceManager, lootDataType.directory(), GSON, map2);
-            map2.forEach((resourceLocation, jsonElement) -> lootDataType.deserialize(resourceLocation, jsonElement).ifPresent((object) -> map2.put(resourceLocation, object)));
+            Map<ResourceLocation, JsonElement> elements = new HashMap();
+            SimpleJsonResourceReloadListener.scanDirectory(resourceManager, lootDataType.directory(), GSON, elements);
+            elements.forEach((resourceLocation, jsonElement) -> lootDataType.deserialize(resourceLocation, jsonElement).ifPresent((object) -> map2.put(resourceLocation, object)));
         }, executor);
     }
 
@@ -53,8 +53,8 @@ public class LootDataManager implements PreparableReloadListener, LootDataResolv
 
         Builder<LootDataId<?>, Object> builder = ImmutableMap.builder();
         com.google.common.collect.ImmutableMultimap.Builder<LootDataType<?>, ResourceLocation> builder2 = ImmutableMultimap.builder();
-        map.forEach((lootDataType, mapx) -> mapx.forEach((resourceLocation, object) -> {
-                builder.put(new LootDataId(lootDataType, resourceLocation), object);
+        map.forEach((lootDataType, mapx) -> mapx.forEach((resourceLocation, objectIn) -> {
+                builder.put(new LootDataId(lootDataType, resourceLocation), objectIn);
                 builder2.put(lootDataType, resourceLocation);
             }));
         builder.put(EMPTY_LOOT_TABLE_KEY, LootTable.EMPTY);
@@ -83,4 +83,4 @@ public class LootDataManager implements PreparableReloadListener, LootDataResolv
     public Collection<ResourceLocation> getKeys(LootDataType<?> lootDataType) {
         return this.typeKeys.get(lootDataType);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootDataType.java b/src/main/java/net/minecraft/world/level/storage/loot/LootDataType.java
index d70afa86ebf410f4cf65c78042eac2ce87dc06b5..26177adda40785d8107d303615ffeaa14d405b80 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootDataType.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootDataType.java
@@ -59,4 +59,4 @@ public class LootDataType<T> {
     public interface Validator<T> {
         void run(ValidationContext var1, LootDataId<T> var2, T var3);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java b/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
index 870d6b9996340990e87bed2cd72cedea226a5ea6..a5ac24eb07d42f5d9e7117b86b9d4276c7a57633 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/ValidationContext.java
@@ -47,7 +47,7 @@ public class ValidationContext {
     }
 
     public ValidationContext enterElement(String s, LootDataId<?> lootDataId) {
-        ImmutableSet<LootDataId<?>> immutableSet = ImmutableSet.builder().addAll(this.visitedElements).add(lootDataId).build();
+        ImmutableSet<LootDataId<?>> immutableSet = ImmutableSet.<LootDataId<?>>builder().addAll(this.visitedElements).add(lootDataId).build();
         return new ValidationContext(this.problems, () -> this.getContext() + s, this.params, this.resolver, immutableSet);
     }
 
@@ -70,4 +70,4 @@ public class ValidationContext {
     public ValidationContext setParams(LootContextParamSet lootContextParamSet) {
         return new ValidationContext(this.problems, this.context, lootContextParamSet, this.resolver, this.visitedElements);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
index f878d8730a962cdbd68ce8c37c33e853350039b5..97c58291613d9eec49122fd03fc95383b20408ca 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/EntryGroup.java
@@ -36,8 +36,8 @@ public class EntryGroup extends CompositeEntryBase {
             break;
         default:
             var10000 = (lootContext, consumer) -> {
-                for(ComposableEntryContainer composableEntryContainer : list) {
-                    composableEntryContainer.expand(lootContext, consumer);
+                for(ComposableEntryContainer composableEntryContainerIn : list) {
+                    composableEntryContainerIn.expand(lootContext, consumer);
                 }
 
                 return true;
@@ -74,4 +74,4 @@ public class EntryGroup extends CompositeEntryBase {
             return new EntryGroup(this.entries.build(), this.getConditions());
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryType.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryType.java
index 85aa623e5f841305d85feb028bfb0fbe8fee19e0..9087baed5f8808fb01258be4c2297a937e0935bc 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryType.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryType.java
@@ -2,10 +2,5 @@ package net.minecraft.world.level.storage.loot.entries;
 
 import com.mojang.serialization.Codec;
 
-public record LootPoolEntryType(Codec<? extends LootPoolEntryContainer> a) {
-    private final Codec<? extends LootPoolEntryContainer> codec;
-
-    public Codec<? extends LootPoolEntryContainer> codec() {
-        return this.codec;
-    }
-}
\ No newline at end of file
+public record LootPoolEntryType(Codec<? extends LootPoolEntryContainer> codec) {
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
index bfa8ca4ba2f1348e164014fa954a8b0c4f6783de..f153a5101ccaf156c5bbe1cb965bba22266721b5 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/ApplyBonusCount.java
@@ -45,8 +45,8 @@ public class ApplyBonusCount extends LootItemConditionalFunction {
         public <T> DataResult<ApplyBonusCount.Formula> decode(DynamicOps<T> dynamicOps, MapLike<T> mapLike) {
             T object = (T)mapLike.get("formula");
             return object == null ? DataResult.error(() -> "Missing type for formula in: " + mapLike) : ApplyBonusCount.FORMULA_TYPE_CODEC.decode(dynamicOps, object).flatMap((pair) -> {
-                T object = (T)Objects.requireNonNullElseGet(mapLike.get("parameters"), dynamicOps::emptyMap);
-                return ((ApplyBonusCount.FormulaType)pair.getFirst()).codec().decode(dynamicOps, object).map(Pair::getFirst);
+                T objectIn = (T)Objects.requireNonNullElseGet(mapLike.get("parameters"), dynamicOps::emptyMap);
+                return ((ApplyBonusCount.FormulaType)pair.getFirst()).codec().decode(dynamicOps, objectIn).map(Pair::getFirst);
             });
         }
 
@@ -62,7 +62,7 @@ public class ApplyBonusCount extends LootItemConditionalFunction {
         }
 
         private <T, F extends ApplyBonusCount.Formula> DataResult<T> encode(Codec<F> codec, ApplyBonusCount.Formula formula, DynamicOps<T> dynamicOps) {
-            return codec.encodeStart(dynamicOps, formula);
+            return codec.encodeStart(dynamicOps, (F) formula);
         }
     };
     public static final Codec<ApplyBonusCount> CODEC = RecordCodecBuilder.create((instance) -> commonFields(instance).and(instance.group(BuiltInRegistries.ENCHANTMENT.holderByNameCodec().fieldOf("enchantment").forGetter((applyBonusCount) -> applyBonusCount.enchantment), FORMULA_CODEC.forGetter((applyBonusCount) -> applyBonusCount.formula))).apply(instance, ApplyBonusCount::new));
@@ -110,9 +110,7 @@ public class ApplyBonusCount extends LootItemConditionalFunction {
         return simpleBuilder((list) -> new ApplyBonusCount(list, enchantment.builtInRegistryHolder(), new ApplyBonusCount.UniformBonusCount(i)));
     }
 
-    static record BinomialWithBonusCount(int b, float c) implements ApplyBonusCount.Formula {
-        private final int extraRounds;
-        private final float probability;
+    static record BinomialWithBonusCount(int extraRounds, float probability) implements ApplyBonusCount.Formula {
         private static final Codec<ApplyBonusCount.BinomialWithBonusCount> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("extra").forGetter(ApplyBonusCount.BinomialWithBonusCount::extraRounds), Codec.FLOAT.fieldOf("probability").forGetter(ApplyBonusCount.BinomialWithBonusCount::probability)).apply(instance, ApplyBonusCount.BinomialWithBonusCount::new));
         public static final ApplyBonusCount.FormulaType TYPE = new ApplyBonusCount.FormulaType(new ResourceLocation("binomial_with_bonus_count"), CODEC);
 
@@ -129,14 +127,6 @@ public class ApplyBonusCount extends LootItemConditionalFunction {
         public ApplyBonusCount.FormulaType getType() {
             return TYPE;
         }
-
-        public int extraRounds() {
-            return this.extraRounds;
-        }
-
-        public float probability() {
-            return this.probability;
-        }
     }
 
     interface Formula {
@@ -145,17 +135,7 @@ public class ApplyBonusCount extends LootItemConditionalFunction {
         ApplyBonusCount.FormulaType getType();
     }
 
-    static record FormulaType(ResourceLocation a, Codec<? extends ApplyBonusCount.Formula> b) {
-        private final ResourceLocation id;
-        private final Codec<? extends ApplyBonusCount.Formula> codec;
-
-        public ResourceLocation id() {
-            return this.id;
-        }
-
-        public Codec<? extends ApplyBonusCount.Formula> codec() {
-            return this.codec;
-        }
+    static record FormulaType(ResourceLocation id, Codec<? extends ApplyBonusCount.Formula> codec) {
     }
 
     static record OreDrops() implements ApplyBonusCount.Formula {
@@ -180,8 +160,7 @@ public class ApplyBonusCount extends LootItemConditionalFunction {
         }
     }
 
-    static record UniformBonusCount(int c) implements ApplyBonusCount.Formula {
-        private final int bonusMultiplier;
+    static record UniformBonusCount(int bonusMultiplier) implements ApplyBonusCount.Formula {
         public static final Codec<ApplyBonusCount.UniformBonusCount> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("bonusMultiplier").forGetter(ApplyBonusCount.UniformBonusCount::bonusMultiplier)).apply(instance, ApplyBonusCount.UniformBonusCount::new));
         public static final ApplyBonusCount.FormulaType TYPE = new ApplyBonusCount.FormulaType(new ResourceLocation("uniform_bonus_count"), CODEC);
 
@@ -192,9 +171,5 @@ public class ApplyBonusCount extends LootItemConditionalFunction {
         public ApplyBonusCount.FormulaType getType() {
             return TYPE;
         }
-
-        public int bonusMultiplier() {
-            return this.bonusMultiplier;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java
index aeba52ffbe451d9411bbadb94da4bb2ca144cbe4..df491ff4c3a7a7dbe1fcbc2fbeb71cb39358850b 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyNbtFunction.java
@@ -89,10 +89,7 @@ public class CopyNbtFunction extends LootItemConditionalFunction {
         }
     }
 
-    static record CopyOperation(CopyNbtFunction.Path b, CopyNbtFunction.Path c, CopyNbtFunction.MergeStrategy d) {
-        private final CopyNbtFunction.Path sourcePath;
-        private final CopyNbtFunction.Path targetPath;
-        private final CopyNbtFunction.MergeStrategy op;
+    static record CopyOperation(CopyNbtFunction.Path sourcePath, CopyNbtFunction.Path targetPath, CopyNbtFunction.MergeStrategy op) {
         public static final Codec<CopyNbtFunction.CopyOperation> CODEC = RecordCodecBuilder.create((instance) -> instance.group(CopyNbtFunction.Path.CODEC.fieldOf("source").forGetter(CopyNbtFunction.CopyOperation::sourcePath), CopyNbtFunction.Path.CODEC.fieldOf("target").forGetter(CopyNbtFunction.CopyOperation::targetPath), CopyNbtFunction.MergeStrategy.CODEC.fieldOf("op").forGetter(CopyNbtFunction.CopyOperation::op)).apply(instance, CopyNbtFunction.CopyOperation::new));
 
         public void apply(Supplier<Tag> supplier, Tag tag) {
@@ -105,18 +102,6 @@ public class CopyNbtFunction extends LootItemConditionalFunction {
             }
 
         }
-
-        public CopyNbtFunction.Path sourcePath() {
-            return this.sourcePath;
-        }
-
-        public CopyNbtFunction.Path targetPath() {
-            return this.targetPath;
-        }
-
-        public CopyNbtFunction.MergeStrategy op() {
-            return this.op;
-        }
     }
 
     public static enum MergeStrategy implements StringRepresentable {
@@ -167,9 +152,7 @@ public class CopyNbtFunction extends LootItemConditionalFunction {
         }
     }
 
-    static record Path(String b, NbtPathArgument.NbtPath c) {
-        private final String string;
-        private final NbtPathArgument.NbtPath path;
+    static record Path(String string, NbtPathArgument.NbtPath path) {
         public static final Codec<CopyNbtFunction.Path> CODEC = Codec.STRING.comapFlatMap((s) -> {
             try {
                 return DataResult.success(of(s));
@@ -182,13 +165,5 @@ public class CopyNbtFunction extends LootItemConditionalFunction {
             NbtPathArgument.NbtPath nbtPath = (new NbtPathArgument()).parse(new StringReader(s));
             return new CopyNbtFunction.Path(s, nbtPath);
         }
-
-        public String string() {
-            return this.string;
-        }
-
-        public NbtPathArgument.NbtPath path() {
-            return this.path;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
index 85ab52760acf48ef66c22b7bf17e384200823e0a..e11d511fa46c348f84db3dfb5addc3f75a4bbe7e 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
@@ -88,4 +88,4 @@ public class EnchantRandomlyFunction extends LootItemConditionalFunction {
             return new EnchantRandomlyFunction(this.getConditions(), this.enchantments.isEmpty() ? Optional.empty() : Optional.of(HolderSet.direct(this.enchantments)));
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/FillPlayerHead.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/FillPlayerHead.java
index 0b9b9240c400151a64736cde154c38da221bb048..ba60067606cbb177b0abe1f656d7a7cf07e1e15e 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/FillPlayerHead.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/FillPlayerHead.java
@@ -37,8 +37,8 @@ public class FillPlayerHead extends LootItemConditionalFunction {
             Object gameProfile = lootContext.getParamOrNull(this.entityTarget.getParam());
             if (gameProfile instanceof Player) {
                 Player player = (Player)gameProfile;
-                GameProfile gameProfile = player.getGameProfile();
-                itemStack.getOrCreateTag().put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), gameProfile));
+                GameProfile gameProfilex = player.getGameProfile();
+                itemStack.getOrCreateTag().put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), gameProfilex));
             }
         }
 
@@ -48,4 +48,4 @@ public class FillPlayerHead extends LootItemConditionalFunction {
     public static LootItemConditionalFunction.Builder<?> fillPlayerHead(LootContext.EntityTarget entityTarget) {
         return simpleBuilder((list) -> new FillPlayerHead(list, entityTarget));
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctionType.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctionType.java
index c339766217a871e46fa1c5fdc7a8771604ab6e03..3e7f3d0480baed5f10165d5615bd0c67b713ffa2 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctionType.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctionType.java
@@ -2,10 +2,5 @@ package net.minecraft.world.level.storage.loot.functions;
 
 import com.mojang.serialization.Codec;
 
-public record LootItemFunctionType(Codec<? extends LootItemFunction> a) {
-    private final Codec<? extends LootItemFunction> codec;
-
-    public Codec<? extends LootItemFunction> codec() {
-        return this.codec;
-    }
-}
\ No newline at end of file
+public record LootItemFunctionType(Codec<? extends LootItemFunction> codec) {
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
index 0e953c9e81fac89e182fae4e63b6dd1d55d5cfc7..07749c46a350a9940ead0f712abccaa67afa0ff0 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootItemFunctions.java
@@ -48,29 +48,17 @@ public class LootItemFunctions {
 
     public static BiFunction<ItemStack, LootContext, ItemStack> compose(List<? extends BiFunction<ItemStack, LootContext, ItemStack>> list) {
         List<BiFunction<ItemStack, LootContext, ItemStack>> list2 = List.copyOf(list);
-        BiFunction var10000;
-        switch(list2.size()) {
-        case 0:
-            var10000 = IDENTITY;
-            break;
-        case 1:
-            var10000 = list2.get(0);
-            break;
-        case 2:
-            BiFunction<ItemStack, LootContext, ItemStack> biFunction = list2.get(0);
-            BiFunction<ItemStack, LootContext, ItemStack> biFunction2 = list2.get(1);
-            var10000 = (itemStack, lootContext) -> (ItemStack)biFunction2.apply((ItemStack)biFunction.apply(itemStack, lootContext), lootContext);
-            break;
-        default:
-            var10000 = (itemStack, lootContext) -> {
-                for(BiFunction<ItemStack, LootContext, ItemStack> biFunction : list2) {
-                    itemStack = (ItemStack)biFunction.apply(itemStack, lootContext);
+        return switch(list2.size()) {
+            case 0 -> IDENTITY;
+            case 1 -> list2.get(0);
+            case 2 -> (ItemStack itemStack, LootContext lootContext) -> (ItemStack) list2.get(1).apply((ItemStack) list2.get(0).apply(itemStack, lootContext), lootContext);
+            default -> (itemStack, lootContext) -> {
+                for (BiFunction<ItemStack, LootContext, ItemStack> biFunctionIn : list2) {
+                    itemStack = (ItemStack) biFunctionIn.apply(itemStack, lootContext);
                 }
 
                 return itemStack;
             };
-        }
-
-        return var10000;
+        };
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetAttributesFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetAttributesFunction.java
index 931b761c8f66627bbc6f2460708bdffe556d5330..2a990dbc5f72301442125353bb5f2a39fe41f262 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetAttributesFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetAttributesFunction.java
@@ -81,39 +81,9 @@ public class SetAttributesFunction extends LootItemConditionalFunction {
         }
     }
 
-    static record Modifier(String b, Holder<Attribute> c, AttributeModifier.Operation d, NumberProvider e, List<EquipmentSlot> f, Optional<UUID> g) {
-        final String name;
-        final Holder<Attribute> attribute;
-        final AttributeModifier.Operation operation;
-        final NumberProvider amount;
-        final List<EquipmentSlot> slots;
-        final Optional<UUID> id;
+    static record Modifier(String name, Holder<Attribute> attribute, AttributeModifier.Operation operation, NumberProvider amount, List<EquipmentSlot> slots, Optional<UUID> id) {
         private static final Codec<List<EquipmentSlot>> SLOTS_CODEC = ExtraCodecs.nonEmptyList(Codec.either(EquipmentSlot.CODEC, EquipmentSlot.CODEC.listOf()).xmap((either) -> either.map(List::of, Function.identity()), (list) -> list.size() == 1 ? Either.left((EquipmentSlot)list.get(0)) : Either.right(list)));
         public static final Codec<SetAttributesFunction.Modifier> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.STRING.fieldOf("name").forGetter(SetAttributesFunction.Modifier::name), BuiltInRegistries.ATTRIBUTE.holderByNameCodec().fieldOf("attribute").forGetter(SetAttributesFunction.Modifier::attribute), AttributeModifier.Operation.CODEC.fieldOf("operation").forGetter(SetAttributesFunction.Modifier::operation), NumberProviders.CODEC.fieldOf("amount").forGetter(SetAttributesFunction.Modifier::amount), SLOTS_CODEC.fieldOf("slot").forGetter(SetAttributesFunction.Modifier::slots), ExtraCodecs.strictOptionalField(UUIDUtil.STRING_CODEC, "id").forGetter(SetAttributesFunction.Modifier::id)).apply(instance, SetAttributesFunction.Modifier::new));
-
-        public String name() {
-            return this.name;
-        }
-
-        public Holder<Attribute> attribute() {
-            return this.attribute;
-        }
-
-        public AttributeModifier.Operation operation() {
-            return this.operation;
-        }
-
-        public NumberProvider amount() {
-            return this.amount;
-        }
-
-        public List<EquipmentSlot> slots() {
-            return this.slots;
-        }
-
-        public Optional<UUID> id() {
-            return this.id;
-        }
     }
 
     public static class ModifierBuilder {
@@ -145,4 +115,4 @@ public class SetAttributesFunction extends LootItemConditionalFunction {
             return new SetAttributesFunction.Modifier(this.name, this.attribute, this.operation, this.amount, List.copyOf(this.slots), this.id);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
index e88532b513665e7a817b67f987ced8823de209e9..d7af5822abe79929e2d1ce29f78ff12637b09882 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction.java
@@ -85,4 +85,4 @@ public class SetBannerPatternFunction extends LootItemConditionalFunction {
             return this;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
index 76c5bd77143e44b1db091e07f6cc13395f34f894..22f7fb96b8454f0406a8399d4268e6f14c76c43f 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
@@ -36,7 +36,7 @@ public class SetLoreFunction extends LootItemConditionalFunction {
     }
 
     public Set<LootContextParam<?>> getReferencedContextParams() {
-        return this.resolutionContext.map((entityTarget) -> Set.of(entityTarget.getParam())).orElseGet(Set::of);
+        return this.resolutionContext.map((entityTarget) -> Set.<LootContextParam<?>>of(entityTarget.getParam())).orElseGet(Set::of);
     }
 
     public ItemStack run(ItemStack itemStack, LootContext lootContext) {
@@ -122,4 +122,4 @@ public class SetLoreFunction extends LootItemConditionalFunction {
             return new SetLoreFunction(this.getConditions(), this.replace, this.lore.build(), this.resolutionContext);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetNameFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetNameFunction.java
index 4f2c6423b893956b8e7666f47e8d914b4b368d99..198a809e27e7de35bfdab4fb48cc17f7d69a61df 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetNameFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetNameFunction.java
@@ -37,7 +37,7 @@ public class SetNameFunction extends LootItemConditionalFunction {
     }
 
     public Set<LootContextParam<?>> getReferencedContextParams() {
-        return this.resolutionContext.map((entityTarget) -> Set.of(entityTarget.getParam())).orElse(Set.of());
+        return this.resolutionContext.map((entityTarget) -> Set.<LootContextParam<?>>of(entityTarget.getParam())).orElse(Set.of());
     }
 
     public static UnaryOperator<Component> createResolver(LootContext lootContext, @Nullable LootContext.EntityTarget entityTarget) {
@@ -71,4 +71,4 @@ public class SetNameFunction extends LootItemConditionalFunction {
     public static LootItemConditionalFunction.Builder<?> setName(Component component, LootContext.EntityTarget entityTarget) {
         return simpleBuilder((list) -> new SetNameFunction(list, Optional.of(component), Optional.of(entityTarget)));
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetStewEffectFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetStewEffectFunction.java
index eb711288806796c2faa03a3882fabb246d02647c..f6cad3d50e3ea7c8709572b30c5bf3a402f4cd04 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/SetStewEffectFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/SetStewEffectFunction.java
@@ -88,17 +88,7 @@ public class SetStewEffectFunction extends LootItemConditionalFunction {
         }
     }
 
-    static record EffectEntry(Holder<MobEffect> b, NumberProvider c) {
-        private final Holder<MobEffect> effect;
-        private final NumberProvider duration;
+    static record EffectEntry(Holder<MobEffect> effect, NumberProvider duration) {
         public static final Codec<SetStewEffectFunction.EffectEntry> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BuiltInRegistries.MOB_EFFECT.holderByNameCodec().fieldOf("type").forGetter(SetStewEffectFunction.EffectEntry::effect), NumberProviders.CODEC.fieldOf("duration").forGetter(SetStewEffectFunction.EffectEntry::duration)).apply(instance, SetStewEffectFunction.EffectEntry::new));
-
-        public Holder<MobEffect> effect() {
-            return this.effect;
-        }
-
-        public NumberProvider duration() {
-            return this.duration;
-        }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/BonusLevelTableCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/BonusLevelTableCondition.java
index 8a1a882732c0a0391a099b817a1e70f905819b01..ce18da87b1811f3ec48d74f6def3cff1554e2c69 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/BonusLevelTableCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/BonusLevelTableCondition.java
@@ -15,9 +15,7 @@ import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 
-public record BonusLevelTableCondition(Holder<Enchantment> b, List<Float> c) implements LootItemCondition {
-    private final Holder<Enchantment> enchantment;
-    private final List<Float> values;
+public record BonusLevelTableCondition(Holder<Enchantment> enchantment, List<Float> values) implements LootItemCondition {
     public static final Codec<BonusLevelTableCondition> CODEC = RecordCodecBuilder.create((instance) -> instance.group(BuiltInRegistries.ENCHANTMENT.holderByNameCodec().fieldOf("enchantment").forGetter(BonusLevelTableCondition::enchantment), Codec.FLOAT.listOf().fieldOf("chances").forGetter(BonusLevelTableCondition::values)).apply(instance, BonusLevelTableCondition::new));
 
     public LootItemConditionType getType() {
@@ -44,12 +42,4 @@ public record BonusLevelTableCondition(Holder<Enchantment> b, List<Float> c) imp
 
         return () -> new BonusLevelTableCondition(enchantment.builtInRegistryHolder(), list);
     }
-
-    public Holder<Enchantment> enchantment() {
-        return this.enchantment;
-    }
-
-    public List<Float> values() {
-        return this.values;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/ConditionReference.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/ConditionReference.java
index 0ab2b9fd7d3390096b8f2ddd80d42785086ba6da..64b5a6323e76d1c8ae99d6b2a4a94187dfb40263 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/ConditionReference.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/ConditionReference.java
@@ -10,8 +10,7 @@ import net.minecraft.world.level.storage.loot.LootDataType;
 import net.minecraft.world.level.storage.loot.ValidationContext;
 import org.slf4j.Logger;
 
-public record ConditionReference(ResourceLocation b) implements LootItemCondition {
-    private final ResourceLocation name;
+public record ConditionReference(ResourceLocation name) implements LootItemCondition {
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final Codec<ConditionReference> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("name").forGetter(ConditionReference::name)).apply(instance, ConditionReference::new));
 
@@ -55,8 +54,4 @@ public record ConditionReference(ResourceLocation b) implements LootItemConditio
     public static LootItemCondition.Builder conditionReference(ResourceLocation resourceLocation) {
         return () -> new ConditionReference(resourceLocation);
     }
-
-    public ResourceLocation name() {
-        return this.name;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/DamageSourceCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/DamageSourceCondition.java
index c696f91f88e6795131f0d1c8d5034bca73073204..2c483953c7b820f9f04f0f44093d56a1a1fd0a50 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/DamageSourceCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/DamageSourceCondition.java
@@ -13,8 +13,7 @@ import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.phys.Vec3;
 
-public record DamageSourceCondition(Optional<DamageSourcePredicate> b) implements LootItemCondition {
-    private final Optional<DamageSourcePredicate> predicate;
+public record DamageSourceCondition(Optional<DamageSourcePredicate> predicate) implements LootItemCondition {
     public static final Codec<DamageSourceCondition> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(DamageSourcePredicate.CODEC, "predicate").forGetter(DamageSourceCondition::predicate)).apply(instance, DamageSourceCondition::new));
 
     public LootItemConditionType getType() {
@@ -38,8 +37,4 @@ public record DamageSourceCondition(Optional<DamageSourcePredicate> b) implement
     public static LootItemCondition.Builder hasDamageSource(DamageSourcePredicate.Builder builder) {
         return () -> new DamageSourceCondition(Optional.of(builder.build()));
     }
-
-    public Optional<DamageSourcePredicate> predicate() {
-        return this.predicate;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/EntityHasScoreCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/EntityHasScoreCondition.java
index 6d103f7d6588a25c92641d048205a984a44b6c31..fed5c80df6d9aeef97b5b870883e147718e4da2a 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/EntityHasScoreCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/EntityHasScoreCondition.java
@@ -15,9 +15,7 @@ import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.scores.Objective;
 import net.minecraft.world.scores.Scoreboard;
 
-public record EntityHasScoreCondition(Map<String, IntRange> b, LootContext.EntityTarget c) implements LootItemCondition {
-    private final Map<String, IntRange> scores;
-    private final LootContext.EntityTarget entityTarget;
+public record EntityHasScoreCondition(Map<String, IntRange> scores, LootContext.EntityTarget entityTarget) implements LootItemCondition {
     public static final Codec<EntityHasScoreCondition> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.unboundedMap(Codec.STRING, IntRange.CODEC).fieldOf("scores").forGetter(EntityHasScoreCondition::scores), LootContext.EntityTarget.CODEC.fieldOf("entity").forGetter(EntityHasScoreCondition::entityTarget)).apply(instance, EntityHasScoreCondition::new));
 
     public LootItemConditionType getType() {
@@ -59,14 +57,6 @@ public record EntityHasScoreCondition(Map<String, IntRange> b, LootContext.Entit
         return new EntityHasScoreCondition.Builder(entityTarget);
     }
 
-    public Map<String, IntRange> scores() {
-        return this.scores;
-    }
-
-    public LootContext.EntityTarget entityTarget() {
-        return this.entityTarget;
-    }
-
     public static class Builder implements LootItemCondition.Builder {
         private final com.google.common.collect.ImmutableMap.Builder<String, IntRange> scores = ImmutableMap.builder();
         private final LootContext.EntityTarget entityTarget;
@@ -84,4 +74,4 @@ public record EntityHasScoreCondition(Map<String, IntRange> b, LootContext.Entit
             return new EntityHasScoreCondition(this.scores.build(), this.entityTarget);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/InvertedLootItemCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/InvertedLootItemCondition.java
index e7a7808e592773a9d005515f8ba56be258c6c4d1..e5cd4e4d8e5d688eea26dc01c2dc3616e1113543 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/InvertedLootItemCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/InvertedLootItemCondition.java
@@ -7,8 +7,7 @@ import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.ValidationContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 
-public record InvertedLootItemCondition(LootItemCondition b) implements LootItemCondition {
-    private final LootItemCondition term;
+public record InvertedLootItemCondition(LootItemCondition term) implements LootItemCondition {
     public static final Codec<InvertedLootItemCondition> CODEC = RecordCodecBuilder.create((instance) -> instance.group(LootItemConditions.CODEC.fieldOf("term").forGetter(InvertedLootItemCondition::term)).apply(instance, InvertedLootItemCondition::new));
 
     public LootItemConditionType getType() {
@@ -32,8 +31,4 @@ public record InvertedLootItemCondition(LootItemCondition b) implements LootItem
         InvertedLootItemCondition invertedLootItemCondition = new InvertedLootItemCondition(builder.build());
         return () -> invertedLootItemCondition;
     }
-
-    public LootItemCondition term() {
-        return this.term;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LocationCheck.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LocationCheck.java
index 687afb75f9e519b86a31d0c615d4818a91e0d66e..7f8c1dab08de1e65fb03173cf34c76a98fa36291 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LocationCheck.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LocationCheck.java
@@ -12,9 +12,7 @@ import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.phys.Vec3;
 
-public record LocationCheck(Optional<LocationPredicate> b, BlockPos c) implements LootItemCondition {
-    private final Optional<LocationPredicate> predicate;
-    private final BlockPos offset;
+public record LocationCheck(Optional<LocationPredicate> predicate, BlockPos offset) implements LootItemCondition {
     private static final MapCodec<BlockPos> OFFSET_CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(ExtraCodecs.strictOptionalField(Codec.INT, "offsetX", 0).forGetter(Vec3i::getX), ExtraCodecs.strictOptionalField(Codec.INT, "offsetY", 0).forGetter(Vec3i::getY), ExtraCodecs.strictOptionalField(Codec.INT, "offsetZ", 0).forGetter(Vec3i::getZ)).apply(instance, BlockPos::new));
     public static final Codec<LocationCheck> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(LocationPredicate.CODEC, "predicate").forGetter(LocationCheck::predicate), OFFSET_CODEC.forGetter(LocationCheck::offset)).apply(instance, LocationCheck::new));
 
@@ -34,12 +32,4 @@ public record LocationCheck(Optional<LocationPredicate> b, BlockPos c) implement
     public static LootItemCondition.Builder checkLocation(LocationPredicate.Builder builder, BlockPos blockPos) {
         return () -> new LocationCheck(Optional.of(builder.build()), blockPos);
     }
-
-    public Optional<LocationPredicate> predicate() {
-        return this.predicate;
-    }
-
-    public BlockPos offset() {
-        return this.offset;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemBlockStatePropertyCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemBlockStatePropertyCondition.java
index 06577d1244a1b622a27259c5d69ca6e065842c85..369fd7908689f8fa3a9338029a691dcc31cc45ee 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemBlockStatePropertyCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemBlockStatePropertyCondition.java
@@ -15,13 +15,11 @@ import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 
-public record LootItemBlockStatePropertyCondition(Holder<Block> b, Optional<StatePropertiesPredicate> c) implements LootItemCondition {
-    private final Holder<Block> block;
-    private final Optional<StatePropertiesPredicate> properties;
+public record LootItemBlockStatePropertyCondition(Holder<Block> block, Optional<StatePropertiesPredicate> properties) implements LootItemCondition {
     public static final Codec<LootItemBlockStatePropertyCondition> CODEC = ExtraCodecs.validate(RecordCodecBuilder.create((instance) -> instance.group(BuiltInRegistries.BLOCK.holderByNameCodec().fieldOf("block").forGetter(LootItemBlockStatePropertyCondition::block), ExtraCodecs.strictOptionalField(StatePropertiesPredicate.CODEC, "properties").forGetter(LootItemBlockStatePropertyCondition::properties)).apply(instance, LootItemBlockStatePropertyCondition::new)), LootItemBlockStatePropertyCondition::validate);
 
     private static DataResult<LootItemBlockStatePropertyCondition> validate(LootItemBlockStatePropertyCondition lootItemBlockStatePropertyCondition) {
-        return lootItemBlockStatePropertyCondition.properties().flatMap((statePropertiesPredicate) -> statePropertiesPredicate.checkState(lootItemBlockStatePropertyCondition.block().value().getStateDefinition())).map((s) -> DataResult.error(() -> "Block " + lootItemBlockStatePropertyCondition.block() + " has no property" + s)).orElse(DataResult.success(lootItemBlockStatePropertyCondition));
+        return (DataResult) lootItemBlockStatePropertyCondition.properties().flatMap((statePropertiesPredicate) -> statePropertiesPredicate.checkState(lootItemBlockStatePropertyCondition.block().value().getStateDefinition())).map((s) -> DataResult.error(() -> "Block " + lootItemBlockStatePropertyCondition.block() + " has no property" + s)).orElse(DataResult.success(lootItemBlockStatePropertyCondition));
     }
 
     public LootItemConditionType getType() {
@@ -41,14 +39,6 @@ public record LootItemBlockStatePropertyCondition(Holder<Block> b, Optional<Stat
         return new LootItemBlockStatePropertyCondition.Builder(block);
     }
 
-    public Holder<Block> block() {
-        return this.block;
-    }
-
-    public Optional<StatePropertiesPredicate> properties() {
-        return this.properties;
-    }
-
     public static class Builder implements LootItemCondition.Builder {
         private final Holder<Block> block;
         private Optional<StatePropertiesPredicate> properties = Optional.empty();
@@ -66,4 +56,4 @@ public record LootItemBlockStatePropertyCondition(Holder<Block> b, Optional<Stat
             return new LootItemBlockStatePropertyCondition(this.block, this.properties);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemConditionType.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemConditionType.java
index 81d903cc581f99a5368205b35513b4273d822f8c..9e12d8540ae792732f8510590682105d644aa74d 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemConditionType.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemConditionType.java
@@ -2,10 +2,5 @@ package net.minecraft.world.level.storage.loot.predicates;
 
 import com.mojang.serialization.Codec;
 
-public record LootItemConditionType(Codec<? extends LootItemCondition> a) {
-    private final Codec<? extends LootItemCondition> codec;
-
-    public Codec<? extends LootItemCondition> codec() {
-        return this.codec;
-    }
-}
\ No newline at end of file
+public record LootItemConditionType(Codec<? extends LootItemCondition> codec) {
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemConditions.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemConditions.java
index 41b983a8c3e59719345988b9c005cf623722f32f..3bb3907a0af4419a0b2ee76e92804d727cd257d1 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemConditions.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemConditions.java
@@ -36,7 +36,7 @@ public class LootItemConditions {
 
     public static <T> Predicate<T> andConditions(List<? extends Predicate<T>> list) {
         List<Predicate<T>> list2 = List.copyOf(list);
-        Predicate var10000;
+        Predicate<T> var10000;
         switch(list2.size()) {
         case 0:
             var10000 = (object) -> true;
@@ -57,14 +57,13 @@ public class LootItemConditions {
 
                 return true;
             };
-        }
-
+        };
         return var10000;
     }
 
     public static <T> Predicate<T> orConditions(List<? extends Predicate<T>> list) {
         List<Predicate<T>> list2 = List.copyOf(list);
-        Predicate var10000;
+        Predicate<T> var10000;
         switch(list2.size()) {
         case 0:
             var10000 = (object) -> false;
@@ -85,8 +84,7 @@ public class LootItemConditions {
 
                 return false;
             };
-        }
-
+        };
         return var10000;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemEntityPropertyCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemEntityPropertyCondition.java
index 6ccbd745c13320bce557c27a33f721140883f08a..2cfe69126c9cbb01aa5e32ad0e5848d3806b2b76 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemEntityPropertyCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemEntityPropertyCondition.java
@@ -13,9 +13,7 @@ import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.phys.Vec3;
 
-public record LootItemEntityPropertyCondition(Optional<EntityPredicate> b, LootContext.EntityTarget c) implements LootItemCondition {
-    private final Optional<EntityPredicate> predicate;
-    private final LootContext.EntityTarget entityTarget;
+public record LootItemEntityPropertyCondition(Optional<EntityPredicate> predicate, LootContext.EntityTarget entityTarget) implements LootItemCondition {
     public static final Codec<LootItemEntityPropertyCondition> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(EntityPredicate.CODEC, "predicate").forGetter(LootItemEntityPropertyCondition::predicate), LootContext.EntityTarget.CODEC.fieldOf("entity").forGetter(LootItemEntityPropertyCondition::entityTarget)).apply(instance, LootItemEntityPropertyCondition::new));
 
     public LootItemConditionType getType() {
@@ -43,12 +41,4 @@ public record LootItemEntityPropertyCondition(Optional<EntityPredicate> b, LootC
     public static LootItemCondition.Builder hasProperties(LootContext.EntityTarget entityTarget, EntityPredicate entityPredicate) {
         return () -> new LootItemEntityPropertyCondition(Optional.of(entityPredicate), entityTarget);
     }
-
-    public Optional<EntityPredicate> predicate() {
-        return this.predicate;
-    }
-
-    public LootContext.EntityTarget entityTarget() {
-        return this.entityTarget;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceCondition.java
index e838ed8245e607c6ba6ef0a1ade05f348bacc610..f0e3827acfa5d1c75b9c6f248ecdceb5dfdb9fdc 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceCondition.java
@@ -4,8 +4,7 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.world.level.storage.loot.LootContext;
 
-public record LootItemRandomChanceCondition(float b) implements LootItemCondition {
-    private final float probability;
+public record LootItemRandomChanceCondition(float probability) implements LootItemCondition {
     public static final Codec<LootItemRandomChanceCondition> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("chance").forGetter(LootItemRandomChanceCondition::probability)).apply(instance, LootItemRandomChanceCondition::new));
 
     public LootItemConditionType getType() {
@@ -19,8 +18,4 @@ public record LootItemRandomChanceCondition(float b) implements LootItemConditio
     public static LootItemCondition.Builder randomChance(float f) {
         return () -> new LootItemRandomChanceCondition(f);
     }
-
-    public float probability() {
-        return this.probability;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java
index 10d8db8f5647aea97a905b654ec6154ce35f76d0..f7092e41bf74a23f54d5daf001a0191b7a38fac8 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java
@@ -11,9 +11,7 @@ import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 
-public record LootItemRandomChanceWithLootingCondition(float b, float c) implements LootItemCondition {
-    private final float percent;
-    private final float lootingMultiplier;
+public record LootItemRandomChanceWithLootingCondition(float percent, float lootingMultiplier) implements LootItemCondition {
     public static final Codec<LootItemRandomChanceWithLootingCondition> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("chance").forGetter(LootItemRandomChanceWithLootingCondition::percent), Codec.FLOAT.fieldOf("looting_multiplier").forGetter(LootItemRandomChanceWithLootingCondition::lootingMultiplier)).apply(instance, LootItemRandomChanceWithLootingCondition::new));
 
     public LootItemConditionType getType() {
@@ -37,12 +35,4 @@ public record LootItemRandomChanceWithLootingCondition(float b, float c) impleme
     public static LootItemCondition.Builder randomChanceAndLootingBoost(float f, float f2) {
         return () -> new LootItemRandomChanceWithLootingCondition(f, f2);
     }
-
-    public float percent() {
-        return this.percent;
-    }
-
-    public float lootingMultiplier() {
-        return this.lootingMultiplier;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/MatchTool.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/MatchTool.java
index 1d8f3409331d034c130dc91648db7c7045185483..c8a8ceca7d59f9da475ab3e956e20883999d3c70 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/MatchTool.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/MatchTool.java
@@ -12,8 +12,7 @@ import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 
-public record MatchTool(Optional<ItemPredicate> b) implements LootItemCondition {
-    private final Optional<ItemPredicate> predicate;
+public record MatchTool(Optional<ItemPredicate> predicate) implements LootItemCondition {
     public static final Codec<MatchTool> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(ItemPredicate.CODEC, "predicate").forGetter(MatchTool::predicate)).apply(instance, MatchTool::new));
 
     public LootItemConditionType getType() {
@@ -32,8 +31,4 @@ public record MatchTool(Optional<ItemPredicate> b) implements LootItemCondition
     public static LootItemCondition.Builder toolMatches(ItemPredicate.Builder builder) {
         return () -> new MatchTool(Optional.of(builder.build()));
     }
-
-    public Optional<ItemPredicate> predicate() {
-        return this.predicate;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/TimeCheck.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/TimeCheck.java
index dbd2bbefef48ae21a9c4db71ac4e890d9606000f..ff587e6ef71ba62958d378d78f32485453f092c7 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/TimeCheck.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/TimeCheck.java
@@ -10,9 +10,7 @@ import net.minecraft.world.level.storage.loot.IntRange;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 
-public record TimeCheck(Optional<Long> b, IntRange c) implements LootItemCondition {
-    private final Optional<Long> period;
-    private final IntRange value;
+public record TimeCheck(Optional<Long> period, IntRange value) implements LootItemCondition {
     public static final Codec<TimeCheck> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(Codec.LONG, "period").forGetter(TimeCheck::period), IntRange.CODEC.fieldOf("value").forGetter(TimeCheck::value)).apply(instance, TimeCheck::new));
 
     public LootItemConditionType getType() {
@@ -37,14 +35,6 @@ public record TimeCheck(Optional<Long> b, IntRange c) implements LootItemConditi
         return new TimeCheck.Builder(intRange);
     }
 
-    public Optional<Long> period() {
-        return this.period;
-    }
-
-    public IntRange value() {
-        return this.value;
-    }
-
     public static class Builder implements LootItemCondition.Builder {
         private Optional<Long> period = Optional.empty();
         private final IntRange value;
@@ -62,4 +52,4 @@ public record TimeCheck(Optional<Long> b, IntRange c) implements LootItemConditi
             return new TimeCheck(this.period, this.value);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/ValueCheckCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/ValueCheckCondition.java
index 3975cec690fa899f0a2de9b404f5c2404784812a..fbb3998b0010f80becfb7c534dbb0c7611c82057 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/ValueCheckCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/ValueCheckCondition.java
@@ -10,9 +10,7 @@ import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.providers.number.NumberProvider;
 import net.minecraft.world.level.storage.loot.providers.number.NumberProviders;
 
-public record ValueCheckCondition(NumberProvider b, IntRange c) implements LootItemCondition {
-    private final NumberProvider provider;
-    private final IntRange range;
+public record ValueCheckCondition(NumberProvider provider, IntRange range) implements LootItemCondition {
     public static final Codec<ValueCheckCondition> CODEC = RecordCodecBuilder.create((instance) -> instance.group(NumberProviders.CODEC.fieldOf("value").forGetter(ValueCheckCondition::provider), IntRange.CODEC.fieldOf("range").forGetter(ValueCheckCondition::range)).apply(instance, ValueCheckCondition::new));
 
     public LootItemConditionType getType() {
@@ -30,12 +28,4 @@ public record ValueCheckCondition(NumberProvider b, IntRange c) implements LootI
     public static LootItemCondition.Builder hasValue(NumberProvider numberProvider, IntRange intRange) {
         return () -> new ValueCheckCondition(numberProvider, intRange);
     }
-
-    public NumberProvider provider() {
-        return this.provider;
-    }
-
-    public IntRange range() {
-        return this.range;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/WeatherCheck.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/WeatherCheck.java
index da59845b30e21d39888b533a70a25aa9b79a938a..3b7e9cf176467a0f53b14c24ce34f4c5bdae2db8 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/WeatherCheck.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/WeatherCheck.java
@@ -7,9 +7,7 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.world.level.storage.loot.LootContext;
 
-public record WeatherCheck(Optional<Boolean> b, Optional<Boolean> c) implements LootItemCondition {
-    private final Optional<Boolean> isRaining;
-    private final Optional<Boolean> isThundering;
+public record WeatherCheck(Optional<Boolean> isRaining, Optional<Boolean> isThundering) implements LootItemCondition {
     public static final Codec<WeatherCheck> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ExtraCodecs.strictOptionalField(Codec.BOOL, "raining").forGetter(WeatherCheck::isRaining), ExtraCodecs.strictOptionalField(Codec.BOOL, "thundering").forGetter(WeatherCheck::isThundering)).apply(instance, WeatherCheck::new));
 
     public LootItemConditionType getType() {
@@ -29,14 +27,6 @@ public record WeatherCheck(Optional<Boolean> b, Optional<Boolean> c) implements
         return new WeatherCheck.Builder();
     }
 
-    public Optional<Boolean> isRaining() {
-        return this.isRaining;
-    }
-
-    public Optional<Boolean> isThundering() {
-        return this.isThundering;
-    }
-
     public static class Builder implements LootItemCondition.Builder {
         private Optional<Boolean> isRaining = Optional.empty();
         private Optional<Boolean> isThundering = Optional.empty();
@@ -55,4 +45,4 @@ public record WeatherCheck(Optional<Boolean> b, Optional<Boolean> c) implements
             return new WeatherCheck(this.isRaining, this.isThundering);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/providers/nbt/LootNbtProviderType.java b/src/main/java/net/minecraft/world/level/storage/loot/providers/nbt/LootNbtProviderType.java
index 02c2d1aa0ce21ee0db2f9895614e98ea7bd9c5fe..d42dba8211e47d3a4144f866165c1404ad0974cd 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/providers/nbt/LootNbtProviderType.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/providers/nbt/LootNbtProviderType.java
@@ -2,10 +2,5 @@ package net.minecraft.world.level.storage.loot.providers.nbt;
 
 import com.mojang.serialization.Codec;
 
-public record LootNbtProviderType(Codec<? extends NbtProvider> a) {
-    private final Codec<? extends NbtProvider> codec;
-
-    public Codec<? extends NbtProvider> codec() {
-        return this.codec;
-    }
-}
\ No newline at end of file
+public record LootNbtProviderType(Codec<? extends NbtProvider> codec) {
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/providers/nbt/StorageNbtProvider.java b/src/main/java/net/minecraft/world/level/storage/loot/providers/nbt/StorageNbtProvider.java
index c41010cf51ab6d7defa3aab34bbf1d3979816fc3..e0e9dc3e50c96b95dd794849bde576c922f60589 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/providers/nbt/StorageNbtProvider.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/providers/nbt/StorageNbtProvider.java
@@ -10,8 +10,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 
-public record StorageNbtProvider(ResourceLocation b) implements NbtProvider {
-    private final ResourceLocation id;
+public record StorageNbtProvider(ResourceLocation id) implements NbtProvider {
     public static final Codec<StorageNbtProvider> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ResourceLocation.CODEC.fieldOf("source").forGetter(StorageNbtProvider::id)).apply(instance, StorageNbtProvider::new));
 
     public LootNbtProviderType getType() {
@@ -26,8 +25,4 @@ public record StorageNbtProvider(ResourceLocation b) implements NbtProvider {
     public Set<LootContextParam<?>> getReferencedContextParams() {
         return ImmutableSet.of();
     }
-
-    public ResourceLocation id() {
-        return this.id;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/BinomialDistributionGenerator.java b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/BinomialDistributionGenerator.java
index a0bd39b917723a1dc362d223ac59d8ab0467473b..49b2ef5bd09453db4155628b451b0ac701603bc5 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/BinomialDistributionGenerator.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/BinomialDistributionGenerator.java
@@ -8,9 +8,7 @@ import net.minecraft.util.RandomSource;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 
-public record BinomialDistributionGenerator(NumberProvider b, NumberProvider c) implements NumberProvider {
-    private final NumberProvider n;
-    private final NumberProvider p;
+public record BinomialDistributionGenerator(NumberProvider n, NumberProvider p) implements NumberProvider {
     public static final Codec<BinomialDistributionGenerator> CODEC = RecordCodecBuilder.create((instance) -> instance.group(NumberProviders.CODEC.fieldOf("n").forGetter(BinomialDistributionGenerator::n), NumberProviders.CODEC.fieldOf("p").forGetter(BinomialDistributionGenerator::p)).apply(instance, BinomialDistributionGenerator::new));
 
     public LootNumberProviderType getType() {
@@ -43,12 +41,4 @@ public record BinomialDistributionGenerator(NumberProvider b, NumberProvider c)
     public Set<LootContextParam<?>> getReferencedContextParams() {
         return Sets.union(this.n.getReferencedContextParams(), this.p.getReferencedContextParams());
     }
-
-    public NumberProvider n() {
-        return this.n;
-    }
-
-    public NumberProvider p() {
-        return this.p;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/ConstantValue.java b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/ConstantValue.java
index 1264035c7e87d70fed726471ee5ccecd645ba3e7..5d89e4f9a8e93c337ebbdbc1f202afcf142d1294 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/ConstantValue.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/ConstantValue.java
@@ -4,8 +4,7 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import net.minecraft.world.level.storage.loot.LootContext;
 
-public record ConstantValue(float c) implements NumberProvider {
-    private final float value;
+public record ConstantValue(float value) implements NumberProvider {
     public static final Codec<ConstantValue> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("value").forGetter(ConstantValue::value)).apply(instance, ConstantValue::new));
     public static final Codec<ConstantValue> INLINE_CODEC = Codec.FLOAT.xmap(ConstantValue::new, ConstantValue::value);
 
@@ -34,8 +33,4 @@ public record ConstantValue(float c) implements NumberProvider {
     public int hashCode() {
         return this.value != 0.0F ? Float.floatToIntBits(this.value) : 0;
     }
-
-    public float value() {
-        return this.value;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/LootNumberProviderType.java b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/LootNumberProviderType.java
index 0950a1f791fab88ef596af22f4a56ddf0aa8b698..a1371a859ea90c1982b56981388f0a25413551d5 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/LootNumberProviderType.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/LootNumberProviderType.java
@@ -2,10 +2,5 @@ package net.minecraft.world.level.storage.loot.providers.number;
 
 import com.mojang.serialization.Codec;
 
-public record LootNumberProviderType(Codec<? extends NumberProvider> a) {
-    private final Codec<? extends NumberProvider> codec;
-
-    public Codec<? extends NumberProvider> codec() {
-        return this.codec;
-    }
-}
\ No newline at end of file
+public record LootNumberProviderType(Codec<? extends NumberProvider> codec) {
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/ScoreboardValue.java b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/ScoreboardValue.java
index 0ee0c0998441c43e154286d000639d469e018bb6..079145cc457f2caef5ea4485137b18817873b2a3 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/ScoreboardValue.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/ScoreboardValue.java
@@ -11,10 +11,7 @@ import net.minecraft.world.level.storage.loot.providers.score.ScoreboardNameProv
 import net.minecraft.world.scores.Objective;
 import net.minecraft.world.scores.Scoreboard;
 
-public record ScoreboardValue(ScoreboardNameProvider b, String c, float d) implements NumberProvider {
-    private final ScoreboardNameProvider target;
-    private final String score;
-    private final float scale;
+public record ScoreboardValue(ScoreboardNameProvider target, String score, float scale) implements NumberProvider {
     public static final Codec<ScoreboardValue> CODEC = RecordCodecBuilder.create((instance) -> instance.group(ScoreboardNameProviders.CODEC.fieldOf("target").forGetter(ScoreboardValue::target), Codec.STRING.fieldOf("score").forGetter(ScoreboardValue::score), Codec.FLOAT.fieldOf("scale").orElse(1.0F).forGetter(ScoreboardValue::scale)).apply(instance, ScoreboardValue::new));
 
     public LootNumberProviderType getType() {
@@ -47,16 +44,4 @@ public record ScoreboardValue(ScoreboardNameProvider b, String c, float d) imple
             }
         }
     }
-
-    public ScoreboardNameProvider target() {
-        return this.target;
-    }
-
-    public String score() {
-        return this.score;
-    }
-
-    public float scale() {
-        return this.scale;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/UniformGenerator.java b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/UniformGenerator.java
index 5d77a0f03cbcac1d1a15808603f2fa0a4229c50f..f1e2408fc21aa50c7e7af84ff4519467db38131c 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/UniformGenerator.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/UniformGenerator.java
@@ -8,9 +8,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 
-public record UniformGenerator(NumberProvider b, NumberProvider c) implements NumberProvider {
-    private final NumberProvider min;
-    private final NumberProvider max;
+public record UniformGenerator(NumberProvider min, NumberProvider max) implements NumberProvider {
     public static final Codec<UniformGenerator> CODEC = RecordCodecBuilder.create((instance) -> instance.group(NumberProviders.CODEC.fieldOf("min").forGetter(UniformGenerator::min), NumberProviders.CODEC.fieldOf("max").forGetter(UniformGenerator::max)).apply(instance, UniformGenerator::new));
 
     public LootNumberProviderType getType() {
@@ -32,12 +30,4 @@ public record UniformGenerator(NumberProvider b, NumberProvider c) implements Nu
     public Set<LootContextParam<?>> getReferencedContextParams() {
         return Sets.union(this.min.getReferencedContextParams(), this.max.getReferencedContextParams());
     }
-
-    public NumberProvider min() {
-        return this.min;
-    }
-
-    public NumberProvider max() {
-        return this.max;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/providers/score/ContextScoreboardNameProvider.java b/src/main/java/net/minecraft/world/level/storage/loot/providers/score/ContextScoreboardNameProvider.java
index 42103dd5fed919a8770eef20adfa9bbc86c96e5e..14cf96d6007f413c67bc2580c92666e2fd9943a2 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/providers/score/ContextScoreboardNameProvider.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/providers/score/ContextScoreboardNameProvider.java
@@ -9,8 +9,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 
-public record ContextScoreboardNameProvider(LootContext.EntityTarget c) implements ScoreboardNameProvider {
-    private final LootContext.EntityTarget target;
+public record ContextScoreboardNameProvider(LootContext.EntityTarget target) implements ScoreboardNameProvider {
     public static final Codec<ContextScoreboardNameProvider> CODEC = RecordCodecBuilder.create((instance) -> instance.group(LootContext.EntityTarget.CODEC.fieldOf("target").forGetter(ContextScoreboardNameProvider::target)).apply(instance, ContextScoreboardNameProvider::new));
     public static final Codec<ContextScoreboardNameProvider> INLINE_CODEC = LootContext.EntityTarget.CODEC.xmap(ContextScoreboardNameProvider::new, ContextScoreboardNameProvider::target);
 
@@ -31,8 +30,4 @@ public record ContextScoreboardNameProvider(LootContext.EntityTarget c) implemen
     public Set<LootContextParam<?>> getReferencedContextParams() {
         return ImmutableSet.of(this.target.getParam());
     }
-
-    public LootContext.EntityTarget target() {
-        return this.target;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/providers/score/FixedScoreboardNameProvider.java b/src/main/java/net/minecraft/world/level/storage/loot/providers/score/FixedScoreboardNameProvider.java
index d80218740d9048a61bf8c6a1806a776a790fe916..a5c76967b8d778dc2bde121ed6a1a949f6f9d67b 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/providers/score/FixedScoreboardNameProvider.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/providers/score/FixedScoreboardNameProvider.java
@@ -8,8 +8,7 @@ import javax.annotation.Nullable;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 
-public record FixedScoreboardNameProvider(String b) implements ScoreboardNameProvider {
-    private final String name;
+public record FixedScoreboardNameProvider(String name) implements ScoreboardNameProvider {
     public static final Codec<FixedScoreboardNameProvider> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.STRING.fieldOf("name").forGetter(FixedScoreboardNameProvider::name)).apply(instance, FixedScoreboardNameProvider::new));
 
     public static ScoreboardNameProvider forName(String s) {
@@ -28,8 +27,4 @@ public record FixedScoreboardNameProvider(String b) implements ScoreboardNamePro
     public Set<LootContextParam<?>> getReferencedContextParams() {
         return ImmutableSet.of();
     }
-
-    public String name() {
-        return this.name;
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/providers/score/LootScoreProviderType.java b/src/main/java/net/minecraft/world/level/storage/loot/providers/score/LootScoreProviderType.java
index 55f6fc8d016391a592091a169f83034d6ccd3ca8..ef055912ce7cdf6562a37f194b5a375a5bf68fb6 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/providers/score/LootScoreProviderType.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/providers/score/LootScoreProviderType.java
@@ -2,10 +2,5 @@ package net.minecraft.world.level.storage.loot.providers.score;
 
 import com.mojang.serialization.Codec;
 
-public record LootScoreProviderType(Codec<? extends ScoreboardNameProvider> a) {
-    private final Codec<? extends ScoreboardNameProvider> codec;
-
-    public Codec<? extends ScoreboardNameProvider> codec() {
-        return this.codec;
-    }
-}
\ No newline at end of file
+public record LootScoreProviderType(Codec<? extends ScoreboardNameProvider> codec) {
+}
diff --git a/src/main/java/net/minecraft/world/level/timers/TimerQueue.java b/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
index aa0614902bb67fa84916f649630331181a86587e..7033668359b56a2d7c0be400445175c8afcea1d3 100644
--- a/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
+++ b/src/main/java/net/minecraft/world/level/timers/TimerQueue.java
@@ -29,7 +29,7 @@ public class TimerQueue<T> {
     private final Table<String, Long, TimerQueue.Event<T>> events = HashBasedTable.create();
 
     private static <T> Comparator<TimerQueue.Event<T>> createComparator() {
-        return Comparator.comparingLong((event) -> event.triggerTime).thenComparing((event) -> event.sequentialId);
+        return Comparator.<Event<T>>comparingLong((event) -> event.triggerTime).thenComparing((event) -> event.sequentialId);
     }
 
     public TimerQueue(TimerCallbacks<T> timerCallbacks, Stream<? extends Dynamic<?>> stream) {
diff --git a/src/main/java/net/minecraft/world/level/validation/ForbiddenSymlinkInfo.java b/src/main/java/net/minecraft/world/level/validation/ForbiddenSymlinkInfo.java
index 306f4b5ecbeae75b8e3c1df0b7b9f1c14318768c..1cdffeb8e28f7ed5b57064c845b64cba2542c5db 100644
--- a/src/main/java/net/minecraft/world/level/validation/ForbiddenSymlinkInfo.java
+++ b/src/main/java/net/minecraft/world/level/validation/ForbiddenSymlinkInfo.java
@@ -2,15 +2,5 @@ package net.minecraft.world.level.validation;
 
 import java.nio.file.Path;
 
-public record ForbiddenSymlinkInfo(Path a, Path b) {
-    private final Path link;
-    private final Path target;
-
-    public Path link() {
-        return this.link;
-    }
-
-    public Path target() {
-        return this.target;
-    }
-}
\ No newline at end of file
+public record ForbiddenSymlinkInfo(Path link, Path target) {
+}
diff --git a/src/main/java/net/minecraft/world/level/validation/PathAllowList.java b/src/main/java/net/minecraft/world/level/validation/PathAllowList.java
index bc790ea0cc240c8a2f42340135a3cb2df9527b63..e457aabea82bcdc921ef7662dcdcb2b46533608f 100644
--- a/src/main/java/net/minecraft/world/level/validation/PathAllowList.java
+++ b/src/main/java/net/minecraft/world/level/validation/PathAllowList.java
@@ -63,10 +63,7 @@ public class PathAllowList implements PathMatcher {
         return new PathAllowList(bufferedReader.lines().flatMap((s) -> PathAllowList.ConfigEntry.parse(s).stream()).toList());
     }
 
-    public static record ConfigEntry(PathAllowList.EntryType a, String b) {
-        private final PathAllowList.EntryType type;
-        private final String pattern;
-
+    public static record ConfigEntry(PathAllowList.EntryType type, String pattern) {
         public PathMatcher compile(FileSystem fileSystem) {
             return this.type().compile(fileSystem, this.pattern);
         }
@@ -114,14 +111,6 @@ public class PathAllowList implements PathMatcher {
         static PathAllowList.ConfigEntry prefix(String s) {
             return new PathAllowList.ConfigEntry(PathAllowList.EntryType.PREFIX, s);
         }
-
-        public PathAllowList.EntryType type() {
-            return this.type;
-        }
-
-        public String pattern() {
-            return this.pattern;
-        }
     }
 
     @FunctionalInterface
@@ -131,4 +120,4 @@ public class PathAllowList implements PathMatcher {
 
         PathMatcher compile(FileSystem var1, String var2);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java b/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java
index 1454d50ade65cac9c90a31eaf85014a66f7697e0..eacb549cb0c2fcd0bfe03cd561e3bbeadedf143a 100644
--- a/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java
+++ b/src/main/java/net/minecraft/world/ticks/BlackholeTickAccess.java
@@ -33,10 +33,10 @@ public class BlackholeTickAccess {
     };
 
     public static <T> TickContainerAccess<T> emptyContainer() {
-        return CONTAINER_BLACKHOLE;
+        return (TickContainerAccess<T>) CONTAINER_BLACKHOLE;
     }
 
     public static <T> LevelTickAccess<T> emptyLevelList() {
-        return LEVEL_BLACKHOLE;
+        return (LevelTickAccess<T>) LEVEL_BLACKHOLE;
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/ticks/LevelTicks.java b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
index 32d5e08a0f9fd1c650195ca798948376665c0b66..90ac8bd4987268009cb52ad071feaf75b88138eb 100644
--- a/src/main/java/net/minecraft/world/ticks/LevelTicks.java
+++ b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
@@ -75,7 +75,7 @@ public class LevelTicks<T> implements LevelTickAccess<T> {
         long l = ChunkPos.asLong(scheduledTick.pos());
         LevelChunkTicks<T> levelChunkTicks = (LevelChunkTicks)this.allContainers.get(l);
         if (levelChunkTicks == null) {
-            Util.pauseInIde((T)(new IllegalStateException("Trying to schedule tick in not loaded position " + scheduledTick.pos())));
+            Util.pauseInIde((new IllegalStateException("Trying to schedule tick in not loaded position " + scheduledTick.pos())));
         } else {
             levelChunkTicks.schedule(scheduledTick);
         }
diff --git a/src/main/java/net/minecraft/world/ticks/SavedTick.java b/src/main/java/net/minecraft/world/ticks/SavedTick.java
index f628e44286b7ffc22f1b923808d336da23e1dd59..2d90418bab686fff98e17c0805c2aed64f3bd539 100644
--- a/src/main/java/net/minecraft/world/ticks/SavedTick.java
+++ b/src/main/java/net/minecraft/world/ticks/SavedTick.java
@@ -10,11 +10,7 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.world.level.ChunkPos;
 
-public record SavedTick<T>(T b, BlockPos c, int d, TickPriority e) {
-    private final T type;
-    private final BlockPos pos;
-    private final int delay;
-    private final TickPriority priority;
+public record SavedTick<T>(T type, BlockPos pos, int delay, TickPriority priority) {
     private static final String TAG_ID = "i";
     private static final String TAG_X = "x";
     private static final String TAG_Y = "y";
@@ -85,20 +81,4 @@ public record SavedTick<T>(T b, BlockPos c, int d, TickPriority e) {
     public static <T> SavedTick<T> probe(T object, BlockPos blockPos) {
         return new SavedTick<>(object, blockPos, 0, TickPriority.NORMAL);
     }
-
-    public T type() {
-        return this.type;
-    }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public int delay() {
-        return this.delay;
-    }
-
-    public TickPriority priority() {
-        return this.priority;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/ticks/ScheduledTick.java b/src/main/java/net/minecraft/world/ticks/ScheduledTick.java
index 534a1c3f862b4535dcca8f74ab541389d4900d19..7e853be6fc25c293310f621c7482e1232b7a1c82 100644
--- a/src/main/java/net/minecraft/world/ticks/ScheduledTick.java
+++ b/src/main/java/net/minecraft/world/ticks/ScheduledTick.java
@@ -5,12 +5,7 @@ import java.util.Comparator;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 
-public record ScheduledTick<T>(T d, BlockPos e, long f, TickPriority g, long h) {
-    private final T type;
-    private final BlockPos pos;
-    private final long triggerTick;
-    private final TickPriority priority;
-    private final long subTickOrder;
+public record ScheduledTick<T>(T type, BlockPos pos, long triggerTick, TickPriority priority, long subTickOrder) {
     public static final Comparator<ScheduledTick<?>> DRAIN_ORDER = (scheduledTick, scheduledTick2) -> {
         int i = Long.compare(scheduledTick.triggerTick, scheduledTick2.triggerTick);
         if (i != 0) {
@@ -45,30 +40,10 @@ public record ScheduledTick<T>(T d, BlockPos e, long f, TickPriority g, long h)
     }
 
     public ScheduledTick {
-        blockPos = blockPos.immutable();
+        pos = pos.immutable();
     }
 
     public static <T> ScheduledTick<T> probe(T object, BlockPos blockPos) {
         return new ScheduledTick<>(object, blockPos, 0L, TickPriority.NORMAL, 0L);
     }
-
-    public T type() {
-        return this.type;
-    }
-
-    public BlockPos pos() {
-        return this.pos;
-    }
-
-    public long triggerTick() {
-        return this.triggerTick;
-    }
-
-    public TickPriority priority() {
-        return this.priority;
-    }
-
-    public long subTickOrder() {
-        return this.subTickOrder;
-    }
 }
\ No newline at end of file
diff --git a/src/main/resources/META-INF/MANIFEST.MF b/src/main/resources/META-INF/MANIFEST.MF
index 54f165d5b7667fdf8dc7d999ef532ab39eda546f..d43ed607295b14c114a19860f02ed5a38e7b3c87 100644
--- a/src/main/resources/META-INF/MANIFEST.MF
+++ b/src/main/resources/META-INF/MANIFEST.MF
@@ -1,3 +1,3 @@
 Manifest-Version: 1.0
 Main-Class: net.minecraft.client.main.Main
-
+Multi-Release: true
